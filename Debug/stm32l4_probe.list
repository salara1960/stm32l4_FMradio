
stm32l4_probe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000126a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001abc  08012838  08012838  00022838  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080142f4  080142f4  00030400  2**0
                  CONTENTS
  4 .ARM          00000008  080142f4  080142f4  000242f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080142fc  080142fc  00030400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080142fc  080142fc  000242fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014300  08014300  00024300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000400  20000000  08014304  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002da4  20000400  08014704  00030400  2**3
                  ALLOC
 10 ._user_heap_stack 00001004  200031a4  08014704  000331a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030400  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eac4  00000000  00000000  00030430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000399a  00000000  00000000  0004eef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a80  00000000  00000000  00052890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001990  00000000  00000000  00054310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b2d2  00000000  00000000  00055ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f8b9  00000000  00000000  00080f72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102300  00000000  00000000  000a082b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a2b2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008790  00000000  00000000  001a2b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000400 	.word	0x20000400
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801281c 	.word	0x0801281c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000404 	.word	0x20000404
 80001cc:	0801281c 	.word	0x0801281c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ca6:	f000 b9f5 	b.w	8001094 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f883 	bl	8000dc4 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f876 	bl	8000dc4 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f865 	bl	8000dc4 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f857 	bl	8000dc4 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d3c:	f000 b9aa 	b.w	8001094 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f83c 	bl	8000dc4 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_d2lz>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	460d      	mov	r5, r1
 8000d62:	f7ff febb 	bl	8000adc <__aeabi_dcmplt>
 8000d66:	b928      	cbnz	r0, 8000d74 <__aeabi_d2lz+0x1c>
 8000d68:	4620      	mov	r0, r4
 8000d6a:	4629      	mov	r1, r5
 8000d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d70:	f000 b80a 	b.w	8000d88 <__aeabi_d2ulz>
 8000d74:	4620      	mov	r0, r4
 8000d76:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d7a:	f000 f805 	bl	8000d88 <__aeabi_d2ulz>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
 8000d86:	bf00      	nop

08000d88 <__aeabi_d2ulz>:
 8000d88:	b5d0      	push	{r4, r6, r7, lr}
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__aeabi_d2ulz+0x34>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4606      	mov	r6, r0
 8000d90:	460f      	mov	r7, r1
 8000d92:	f7ff fc31 	bl	80005f8 <__aeabi_dmul>
 8000d96:	f7ff ff07 	bl	8000ba8 <__aeabi_d2uiz>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	f7ff fbb2 	bl	8000504 <__aeabi_ui2d>
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <__aeabi_d2ulz+0x38>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f7ff fc28 	bl	80005f8 <__aeabi_dmul>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4630      	mov	r0, r6
 8000dae:	4639      	mov	r1, r7
 8000db0:	f7ff fa6a 	bl	8000288 <__aeabi_dsub>
 8000db4:	f7ff fef8 	bl	8000ba8 <__aeabi_d2uiz>
 8000db8:	4621      	mov	r1, r4
 8000dba:	bdd0      	pop	{r4, r6, r7, pc}
 8000dbc:	3df00000 	.word	0x3df00000
 8000dc0:	41f00000 	.word	0x41f00000

08000dc4 <__udivmoddi4>:
 8000dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc8:	9d08      	ldr	r5, [sp, #32]
 8000dca:	4604      	mov	r4, r0
 8000dcc:	468e      	mov	lr, r1
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d14d      	bne.n	8000e6e <__udivmoddi4+0xaa>
 8000dd2:	428a      	cmp	r2, r1
 8000dd4:	4694      	mov	ip, r2
 8000dd6:	d969      	bls.n	8000eac <__udivmoddi4+0xe8>
 8000dd8:	fab2 f282 	clz	r2, r2
 8000ddc:	b152      	cbz	r2, 8000df4 <__udivmoddi4+0x30>
 8000dde:	fa01 f302 	lsl.w	r3, r1, r2
 8000de2:	f1c2 0120 	rsb	r1, r2, #32
 8000de6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dea:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dee:	ea41 0e03 	orr.w	lr, r1, r3
 8000df2:	4094      	lsls	r4, r2
 8000df4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df8:	0c21      	lsrs	r1, r4, #16
 8000dfa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dfe:	fa1f f78c 	uxth.w	r7, ip
 8000e02:	fb08 e316 	mls	r3, r8, r6, lr
 8000e06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e0a:	fb06 f107 	mul.w	r1, r6, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x64>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000e1a:	f080 811f 	bcs.w	800105c <__udivmoddi4+0x298>
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	f240 811c 	bls.w	800105c <__udivmoddi4+0x298>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b2a4      	uxth	r4, r4
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e38:	fb00 f707 	mul.w	r7, r0, r7
 8000e3c:	42a7      	cmp	r7, r4
 8000e3e:	d90a      	bls.n	8000e56 <__udivmoddi4+0x92>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e48:	f080 810a 	bcs.w	8001060 <__udivmoddi4+0x29c>
 8000e4c:	42a7      	cmp	r7, r4
 8000e4e:	f240 8107 	bls.w	8001060 <__udivmoddi4+0x29c>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e5a:	1be4      	subs	r4, r4, r7
 8000e5c:	2600      	movs	r6, #0
 8000e5e:	b11d      	cbz	r5, 8000e68 <__udivmoddi4+0xa4>
 8000e60:	40d4      	lsrs	r4, r2
 8000e62:	2300      	movs	r3, #0
 8000e64:	e9c5 4300 	strd	r4, r3, [r5]
 8000e68:	4631      	mov	r1, r6
 8000e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d909      	bls.n	8000e86 <__udivmoddi4+0xc2>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	f000 80ef 	beq.w	8001056 <__udivmoddi4+0x292>
 8000e78:	2600      	movs	r6, #0
 8000e7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7e:	4630      	mov	r0, r6
 8000e80:	4631      	mov	r1, r6
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	fab3 f683 	clz	r6, r3
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d14a      	bne.n	8000f24 <__udivmoddi4+0x160>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d302      	bcc.n	8000e98 <__udivmoddi4+0xd4>
 8000e92:	4282      	cmp	r2, r0
 8000e94:	f200 80f9 	bhi.w	800108a <__udivmoddi4+0x2c6>
 8000e98:	1a84      	subs	r4, r0, r2
 8000e9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	469e      	mov	lr, r3
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d0e0      	beq.n	8000e68 <__udivmoddi4+0xa4>
 8000ea6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eaa:	e7dd      	b.n	8000e68 <__udivmoddi4+0xa4>
 8000eac:	b902      	cbnz	r2, 8000eb0 <__udivmoddi4+0xec>
 8000eae:	deff      	udf	#255	; 0xff
 8000eb0:	fab2 f282 	clz	r2, r2
 8000eb4:	2a00      	cmp	r2, #0
 8000eb6:	f040 8092 	bne.w	8000fde <__udivmoddi4+0x21a>
 8000eba:	eba1 010c 	sub.w	r1, r1, ip
 8000ebe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec2:	fa1f fe8c 	uxth.w	lr, ip
 8000ec6:	2601      	movs	r6, #1
 8000ec8:	0c20      	lsrs	r0, r4, #16
 8000eca:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ece:	fb07 1113 	mls	r1, r7, r3, r1
 8000ed2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed6:	fb0e f003 	mul.w	r0, lr, r3
 8000eda:	4288      	cmp	r0, r1
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x12c>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x12a>
 8000ee8:	4288      	cmp	r0, r1
 8000eea:	f200 80cb 	bhi.w	8001084 <__udivmoddi4+0x2c0>
 8000eee:	4643      	mov	r3, r8
 8000ef0:	1a09      	subs	r1, r1, r0
 8000ef2:	b2a4      	uxth	r4, r4
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1110 	mls	r1, r7, r0, r1
 8000efc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f00:	fb0e fe00 	mul.w	lr, lr, r0
 8000f04:	45a6      	cmp	lr, r4
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x156>
 8000f08:	eb1c 0404 	adds.w	r4, ip, r4
 8000f0c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f10:	d202      	bcs.n	8000f18 <__udivmoddi4+0x154>
 8000f12:	45a6      	cmp	lr, r4
 8000f14:	f200 80bb 	bhi.w	800108e <__udivmoddi4+0x2ca>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	eba4 040e 	sub.w	r4, r4, lr
 8000f1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f22:	e79c      	b.n	8000e5e <__udivmoddi4+0x9a>
 8000f24:	f1c6 0720 	rsb	r7, r6, #32
 8000f28:	40b3      	lsls	r3, r6
 8000f2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f32:	fa20 f407 	lsr.w	r4, r0, r7
 8000f36:	fa01 f306 	lsl.w	r3, r1, r6
 8000f3a:	431c      	orrs	r4, r3
 8000f3c:	40f9      	lsrs	r1, r7
 8000f3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f42:	fa00 f306 	lsl.w	r3, r0, r6
 8000f46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f4a:	0c20      	lsrs	r0, r4, #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fb09 1118 	mls	r1, r9, r8, r1
 8000f54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f58:	fb08 f00e 	mul.w	r0, r8, lr
 8000f5c:	4288      	cmp	r0, r1
 8000f5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f62:	d90b      	bls.n	8000f7c <__udivmoddi4+0x1b8>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f6c:	f080 8088 	bcs.w	8001080 <__udivmoddi4+0x2bc>
 8000f70:	4288      	cmp	r0, r1
 8000f72:	f240 8085 	bls.w	8001080 <__udivmoddi4+0x2bc>
 8000f76:	f1a8 0802 	sub.w	r8, r8, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1a09      	subs	r1, r1, r0
 8000f7e:	b2a4      	uxth	r4, r4
 8000f80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f84:	fb09 1110 	mls	r1, r9, r0, r1
 8000f88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f90:	458e      	cmp	lr, r1
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x1e2>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f9c:	d26c      	bcs.n	8001078 <__udivmoddi4+0x2b4>
 8000f9e:	458e      	cmp	lr, r1
 8000fa0:	d96a      	bls.n	8001078 <__udivmoddi4+0x2b4>
 8000fa2:	3802      	subs	r0, #2
 8000fa4:	4461      	add	r1, ip
 8000fa6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000faa:	fba0 9402 	umull	r9, r4, r0, r2
 8000fae:	eba1 010e 	sub.w	r1, r1, lr
 8000fb2:	42a1      	cmp	r1, r4
 8000fb4:	46c8      	mov	r8, r9
 8000fb6:	46a6      	mov	lr, r4
 8000fb8:	d356      	bcc.n	8001068 <__udivmoddi4+0x2a4>
 8000fba:	d053      	beq.n	8001064 <__udivmoddi4+0x2a0>
 8000fbc:	b15d      	cbz	r5, 8000fd6 <__udivmoddi4+0x212>
 8000fbe:	ebb3 0208 	subs.w	r2, r3, r8
 8000fc2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fc6:	fa01 f707 	lsl.w	r7, r1, r7
 8000fca:	fa22 f306 	lsr.w	r3, r2, r6
 8000fce:	40f1      	lsrs	r1, r6
 8000fd0:	431f      	orrs	r7, r3
 8000fd2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fd6:	2600      	movs	r6, #0
 8000fd8:	4631      	mov	r1, r6
 8000fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fde:	f1c2 0320 	rsb	r3, r2, #32
 8000fe2:	40d8      	lsrs	r0, r3
 8000fe4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fe8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fec:	4091      	lsls	r1, r2
 8000fee:	4301      	orrs	r1, r0
 8000ff0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ff4:	fa1f fe8c 	uxth.w	lr, ip
 8000ff8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ffc:	fb07 3610 	mls	r6, r7, r0, r3
 8001000:	0c0b      	lsrs	r3, r1, #16
 8001002:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001006:	fb00 f60e 	mul.w	r6, r0, lr
 800100a:	429e      	cmp	r6, r3
 800100c:	fa04 f402 	lsl.w	r4, r4, r2
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x260>
 8001012:	eb1c 0303 	adds.w	r3, ip, r3
 8001016:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800101a:	d22f      	bcs.n	800107c <__udivmoddi4+0x2b8>
 800101c:	429e      	cmp	r6, r3
 800101e:	d92d      	bls.n	800107c <__udivmoddi4+0x2b8>
 8001020:	3802      	subs	r0, #2
 8001022:	4463      	add	r3, ip
 8001024:	1b9b      	subs	r3, r3, r6
 8001026:	b289      	uxth	r1, r1
 8001028:	fbb3 f6f7 	udiv	r6, r3, r7
 800102c:	fb07 3316 	mls	r3, r7, r6, r3
 8001030:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001034:	fb06 f30e 	mul.w	r3, r6, lr
 8001038:	428b      	cmp	r3, r1
 800103a:	d908      	bls.n	800104e <__udivmoddi4+0x28a>
 800103c:	eb1c 0101 	adds.w	r1, ip, r1
 8001040:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8001044:	d216      	bcs.n	8001074 <__udivmoddi4+0x2b0>
 8001046:	428b      	cmp	r3, r1
 8001048:	d914      	bls.n	8001074 <__udivmoddi4+0x2b0>
 800104a:	3e02      	subs	r6, #2
 800104c:	4461      	add	r1, ip
 800104e:	1ac9      	subs	r1, r1, r3
 8001050:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001054:	e738      	b.n	8000ec8 <__udivmoddi4+0x104>
 8001056:	462e      	mov	r6, r5
 8001058:	4628      	mov	r0, r5
 800105a:	e705      	b.n	8000e68 <__udivmoddi4+0xa4>
 800105c:	4606      	mov	r6, r0
 800105e:	e6e3      	b.n	8000e28 <__udivmoddi4+0x64>
 8001060:	4618      	mov	r0, r3
 8001062:	e6f8      	b.n	8000e56 <__udivmoddi4+0x92>
 8001064:	454b      	cmp	r3, r9
 8001066:	d2a9      	bcs.n	8000fbc <__udivmoddi4+0x1f8>
 8001068:	ebb9 0802 	subs.w	r8, r9, r2
 800106c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001070:	3801      	subs	r0, #1
 8001072:	e7a3      	b.n	8000fbc <__udivmoddi4+0x1f8>
 8001074:	4646      	mov	r6, r8
 8001076:	e7ea      	b.n	800104e <__udivmoddi4+0x28a>
 8001078:	4620      	mov	r0, r4
 800107a:	e794      	b.n	8000fa6 <__udivmoddi4+0x1e2>
 800107c:	4640      	mov	r0, r8
 800107e:	e7d1      	b.n	8001024 <__udivmoddi4+0x260>
 8001080:	46d0      	mov	r8, sl
 8001082:	e77b      	b.n	8000f7c <__udivmoddi4+0x1b8>
 8001084:	3b02      	subs	r3, #2
 8001086:	4461      	add	r1, ip
 8001088:	e732      	b.n	8000ef0 <__udivmoddi4+0x12c>
 800108a:	4630      	mov	r0, r6
 800108c:	e709      	b.n	8000ea2 <__udivmoddi4+0xde>
 800108e:	4464      	add	r4, ip
 8001090:	3802      	subs	r0, #2
 8001092:	e742      	b.n	8000f1a <__udivmoddi4+0x156>

08001094 <__aeabi_idiv0>:
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <ST7565_Select>:
uint8_t lcdRdy = 1;

//------------------------------------------------------------------------------

inline static void ST7565_Select()
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
#ifdef CS_PORT
	//-- если захотим переделать под HAL ------------------
	#ifdef ST7565_SPI_HAL
		//HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
		CS_GPIO_Port->BSRR = ( CS_Pin << 16 );
 800109c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80010a4:	619a      	str	r2, [r3, #24]
	#ifdef ST7565_SPI_CMSIS
		CS_GPIO_Port->BSRR = ( CS_Pin << 16 );
	#endif
	//-----------------------------------------------------
#endif
}
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <ST7565_Unselect>:

//------------------------------------------------------------------------------

inline static void ST7565_Unselect()
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
#ifdef CS_PORT
	//-- если захотим переделать под HAL ------------------
	#ifdef ST7565_SPI_HAL
		//HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
		CS_GPIO_Port->BSRR = CS_Pin;
 80010b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010b8:	2210      	movs	r2, #16
 80010ba:	619a      	str	r2, [r3, #24]
	#ifdef ST7565_SPI_CMSIS
		CS_GPIO_Port->BSRR = CS_Pin;
	#endif
	//-----------------------------------------------------
#endif
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
	...

080010c8 <ST7565_Reset>:
	* @brief	 ( описание ):  аппарвтный сброс дисплея
	* @param	( параметры ):	
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Reset()
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	RES_GPIO_Port->BSRR = (RES_Pin << 16);//HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_RESET );
 80010cc:	4b07      	ldr	r3, [pc, #28]	; (80010ec <ST7565_Reset+0x24>)
 80010ce:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80010d2:	619a      	str	r2, [r3, #24]
	HAL_Delay(1);
 80010d4:	2001      	movs	r0, #1
 80010d6:	f005 fa31 	bl	800653c <HAL_Delay>
	
	RES_GPIO_Port->BSRR = RES_Pin;//HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_SET );
 80010da:	4b04      	ldr	r3, [pc, #16]	; (80010ec <ST7565_Reset+0x24>)
 80010dc:	2204      	movs	r2, #4
 80010de:	619a      	str	r2, [r3, #24]
	HAL_Delay(1);
 80010e0:	2001      	movs	r0, #1
 80010e2:	f005 fa2b 	bl	800653c <HAL_Delay>
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	48000c00 	.word	0x48000c00

080010f0 <ST7565_w_dats>:
//--------------------------------------------------------------------------------
#ifdef SET_NEW_PROC
inline static void ST7565_w_dats(uint8_t *Data, uint16_t len)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	807b      	strh	r3, [r7, #2]
	DC_GPIO_Port->BSRR = DC_Pin;//HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80010fc:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <ST7565_w_dats+0x84>)
 80010fe:	2220      	movs	r2, #32
 8001100:	619a      	str	r2, [r3, #24]

	if (with_dma) {
 8001102:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <ST7565_w_dats+0x88>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d018      	beq.n	800113c <ST7565_w_dats+0x4c>
		lcdRdy = 0;
 800110a:	4b1c      	ldr	r3, [pc, #112]	; (800117c <ST7565_w_dats+0x8c>)
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]
		if (HAL_SPI_Transmit_DMA(&ST7565_SPI_HAL, Data, len) != HAL_OK) devError |= devLCD;
 8001110:	887b      	ldrh	r3, [r7, #2]
 8001112:	461a      	mov	r2, r3
 8001114:	6879      	ldr	r1, [r7, #4]
 8001116:	481a      	ldr	r0, [pc, #104]	; (8001180 <ST7565_w_dats+0x90>)
 8001118:	f00a f810 	bl	800b13c <HAL_SPI_Transmit_DMA>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d006      	beq.n	8001130 <ST7565_w_dats+0x40>
 8001122:	4b18      	ldr	r3, [pc, #96]	; (8001184 <ST7565_w_dats+0x94>)
 8001124:	881b      	ldrh	r3, [r3, #0]
 8001126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800112a:	b29a      	uxth	r2, r3
 800112c:	4b15      	ldr	r3, [pc, #84]	; (8001184 <ST7565_w_dats+0x94>)
 800112e:	801a      	strh	r2, [r3, #0]
		while (!lcdRdy) {};
 8001130:	bf00      	nop
 8001132:	4b12      	ldr	r3, [pc, #72]	; (800117c <ST7565_w_dats+0x8c>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d0fb      	beq.n	8001132 <ST7565_w_dats+0x42>
	} else {
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Data, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
	}
}
 800113a:	e017      	b.n	800116c <ST7565_w_dats+0x7c>
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Data, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
 800113c:	887a      	ldrh	r2, [r7, #2]
 800113e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	480e      	ldr	r0, [pc, #56]	; (8001180 <ST7565_w_dats+0x90>)
 8001146:	f009 fb48 	bl	800a7da <HAL_SPI_Transmit>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d006      	beq.n	800115e <ST7565_w_dats+0x6e>
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <ST7565_w_dats+0x94>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001158:	b29a      	uxth	r2, r3
 800115a:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <ST7565_w_dats+0x94>)
 800115c:	801a      	strh	r2, [r3, #0]
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
 800115e:	bf00      	nop
 8001160:	4807      	ldr	r0, [pc, #28]	; (8001180 <ST7565_w_dats+0x90>)
 8001162:	f00a fb89 	bl	800b878 <HAL_SPI_GetState>
 8001166:	4603      	mov	r3, r0
 8001168:	2b01      	cmp	r3, #1
 800116a:	d1f9      	bne.n	8001160 <ST7565_w_dats+0x70>
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	48000400 	.word	0x48000400
 8001178:	2000081c 	.word	0x2000081c
 800117c:	20000000 	.word	0x20000000
 8001180:	20000928 	.word	0x20000928
 8001184:	20001860 	.word	0x20001860

08001188 <ST7565_w_cmds>:
//
inline static void ST7565_w_cmds(uint8_t *Command, uint16_t len)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	807b      	strh	r3, [r7, #2]
	DC_GPIO_Port->BSRR = (DC_Pin << 16);//HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8001194:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <ST7565_w_cmds+0x88>)
 8001196:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800119a:	619a      	str	r2, [r3, #24]

	if (with_dma) {
 800119c:	4b1d      	ldr	r3, [pc, #116]	; (8001214 <ST7565_w_cmds+0x8c>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d018      	beq.n	80011d6 <ST7565_w_cmds+0x4e>
		lcdRdy = 0;
 80011a4:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <ST7565_w_cmds+0x90>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	701a      	strb	r2, [r3, #0]
		if (HAL_SPI_Transmit_DMA(&ST7565_SPI_HAL, Command, len) != HAL_OK) devError |= devLCD;
 80011aa:	887b      	ldrh	r3, [r7, #2]
 80011ac:	461a      	mov	r2, r3
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	481a      	ldr	r0, [pc, #104]	; (800121c <ST7565_w_cmds+0x94>)
 80011b2:	f009 ffc3 	bl	800b13c <HAL_SPI_Transmit_DMA>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d006      	beq.n	80011ca <ST7565_w_cmds+0x42>
 80011bc:	4b18      	ldr	r3, [pc, #96]	; (8001220 <ST7565_w_cmds+0x98>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	4b16      	ldr	r3, [pc, #88]	; (8001220 <ST7565_w_cmds+0x98>)
 80011c8:	801a      	strh	r2, [r3, #0]
		while (!lcdRdy) {};
 80011ca:	bf00      	nop
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <ST7565_w_cmds+0x90>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0fb      	beq.n	80011cc <ST7565_w_cmds+0x44>
	} else {
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Command, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
	}
}
 80011d4:	e017      	b.n	8001206 <ST7565_w_cmds+0x7e>
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Command, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
 80011d6:	887a      	ldrh	r2, [r7, #2]
 80011d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011dc:	6879      	ldr	r1, [r7, #4]
 80011de:	480f      	ldr	r0, [pc, #60]	; (800121c <ST7565_w_cmds+0x94>)
 80011e0:	f009 fafb 	bl	800a7da <HAL_SPI_Transmit>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d006      	beq.n	80011f8 <ST7565_w_cmds+0x70>
 80011ea:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <ST7565_w_cmds+0x98>)
 80011ec:	881b      	ldrh	r3, [r3, #0]
 80011ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <ST7565_w_cmds+0x98>)
 80011f6:	801a      	strh	r2, [r3, #0]
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
 80011f8:	bf00      	nop
 80011fa:	4808      	ldr	r0, [pc, #32]	; (800121c <ST7565_w_cmds+0x94>)
 80011fc:	f00a fb3c 	bl	800b878 <HAL_SPI_GetState>
 8001200:	4603      	mov	r3, r0
 8001202:	2b01      	cmp	r3, #1
 8001204:	d1f9      	bne.n	80011fa <ST7565_w_cmds+0x72>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	48000400 	.word	0x48000400
 8001214:	2000081c 	.word	0x2000081c
 8001218:	20000000 	.word	0x20000000
 800121c:	20000928 	.word	0x20000928
 8001220:	20001860 	.word	0x20001860

08001224 <ST7565_SetX>:
inline static void ST7565_SetX(uint8_t x)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
	uint8_t bytes[] = { ((x & 0xf0) >> 4) | 0x10, x & 0x0f };
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	091b      	lsrs	r3, r3, #4
 8001232:	b2db      	uxtb	r3, r3
 8001234:	f043 0310 	orr.w	r3, r3, #16
 8001238:	b2db      	uxtb	r3, r3
 800123a:	733b      	strb	r3, [r7, #12]
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	b2db      	uxtb	r3, r3
 8001244:	737b      	strb	r3, [r7, #13]
	ST7565_w_cmds(bytes, 2);
 8001246:	f107 030c 	add.w	r3, r7, #12
 800124a:	2102      	movs	r1, #2
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff9b 	bl	8001188 <ST7565_w_cmds>
}
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <ST7565_SetY>:
//
inline static void ST7565_SetY(uint8_t y)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b084      	sub	sp, #16
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	71fb      	strb	r3, [r7, #7]
	uint8_t byte = (y & 0x07) | 0xB0;
 8001264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001268:	f003 0307 	and.w	r3, r3, #7
 800126c:	b25b      	sxtb	r3, r3
 800126e:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8001272:	b25b      	sxtb	r3, r3
 8001274:	b2db      	uxtb	r3, r3
 8001276:	73fb      	strb	r3, [r7, #15]
	ST7565_w_cmds(&byte, 1);
 8001278:	f107 030f 	add.w	r3, r7, #15
 800127c:	2101      	movs	r1, #1
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff ff82 	bl	8001188 <ST7565_w_cmds>
}
 8001284:	bf00      	nop
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <ST7565_Display_fill>:
								( данные отправляются сразу на дисплей и записываются в буфер кадра )
								Функцию ST7565_Update() вызывать не нужно
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Display_fill(uint8_t fill)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
uint8_t page;//, column;
	
	memset(ST7565_buffer, fill, (SCREEN_WIDTH * SCREEN_HEIGHT / 8));	// отчистка памяти заполняем массив значением 0x00
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800129c:	4619      	mov	r1, r3
 800129e:	4814      	ldr	r0, [pc, #80]	; (80012f0 <ST7565_Display_fill+0x64>)
 80012a0:	f00c fffe 	bl	800e2a0 <memset>
	
	ST7565_Select();
 80012a4:	f7ff fef8 	bl	8001098 <ST7565_Select>
#ifdef SET_NEW_PROC
	uint8_t dta[] = {0, 0x10, 0};
 80012a8:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <ST7565_Display_fill+0x68>)
 80012aa:	f107 030c 	add.w	r3, r7, #12
 80012ae:	6812      	ldr	r2, [r2, #0]
 80012b0:	4611      	mov	r1, r2
 80012b2:	8019      	strh	r1, [r3, #0]
 80012b4:	3302      	adds	r3, #2
 80012b6:	0c12      	lsrs	r2, r2, #16
 80012b8:	701a      	strb	r2, [r3, #0]
#endif
	for (page = 0xB7; page >= 0xB0; page-- ) {
 80012ba:	23b7      	movs	r3, #183	; 0xb7
 80012bc:	73fb      	strb	r3, [r7, #15]
 80012be:	e00e      	b.n	80012de <ST7565_Display_fill+0x52>
		ST7565_w_cmd(page);  //set page address
		ST7565_w_cmd(0x10);  //set Column address MSB   
		ST7565_w_cmd(0x00);  //set column address LSB
		for (column = 0; column < 131; column++) ST7565_w_dat(fill);
#else
		dta[0] = page;
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	733b      	strb	r3, [r7, #12]
		ST7565_w_cmds(dta, sizeof(dta));
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	2103      	movs	r1, #3
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff ff5c 	bl	8001188 <ST7565_w_cmds>
		ST7565_w_dats(ST7565_buffer, 131);
 80012d0:	2183      	movs	r1, #131	; 0x83
 80012d2:	4807      	ldr	r0, [pc, #28]	; (80012f0 <ST7565_Display_fill+0x64>)
 80012d4:	f7ff ff0c 	bl	80010f0 <ST7565_w_dats>
	for (page = 0xB7; page >= 0xB0; page-- ) {
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	3b01      	subs	r3, #1
 80012dc:	73fb      	strb	r3, [r7, #15]
 80012de:	7bfb      	ldrb	r3, [r7, #15]
 80012e0:	2baf      	cmp	r3, #175	; 0xaf
 80012e2:	d8ed      	bhi.n	80012c0 <ST7565_Display_fill+0x34>
#endif
    }
		
	ST7565_Unselect();
 80012e4:	f7ff fee4 	bl	80010b0 <ST7565_Unselect>
}
 80012e8:	bf00      	nop
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	2000041c 	.word	0x2000041c
 80012f4:	08012838 	.word	0x08012838

080012f8 <ST7565_Init>:
	* @brief	 ( описание ):  инициализация дисплея ( при другой инициализации можно поменять параметры внутри функции )
	* @param	( параметры ):	
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Init()
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
	ST7565_Select();
 80012fe:	f7ff fecb 	bl	8001098 <ST7565_Select>
	ST7565_w_cmd(CMD_DISPLAY_ON);    		//Display on
	// Инвертирование экрана CMD_SET_DISP_NORMAL - OFF    CMD_SET_DISP_REVERSE - ON
	ST7565_w_cmd(CMD_SET_DISP_NORMAL);
	//HAL_Delay(1);//1
#else
	uint8_t dta[] = {
 8001302:	4a09      	ldr	r2, [pc, #36]	; (8001328 <ST7565_Init+0x30>)
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	ca07      	ldmia	r2, {r0, r1, r2}
 8001308:	c303      	stmia	r3!, {r0, r1}
 800130a:	801a      	strh	r2, [r3, #0]
	};
	#if defined (SCREEN_ORIENTATION_180)
		dta[1] = CMD_SET_ADC_REVERSE;    	//ADC selection(SEG0->SEG128)  CMD_SET_ADC_NORMAL горизонтально «нормальная» (не перевернутая)
		dta[2] = CMD_SET_COM_NORMAL;    		//SHL selection(COM0->COM64)   CMD_SET_COM_REVERSE вертикально «перевернутая» (дополняет команду выше)
	#endif
	ST7565_w_cmds(dta, sizeof(dta));
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	210a      	movs	r1, #10
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff39 	bl	8001188 <ST7565_w_cmds>
#endif
	
	ST7565_Display_fill(0);
 8001316:	2000      	movs	r0, #0
 8001318:	f7ff ffb8 	bl	800128c <ST7565_Display_fill>
	
	ST7565_Unselect();
 800131c:	f7ff fec8 	bl	80010b0 <ST7565_Unselect>
   
}
 8001320:	bf00      	nop
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	0801283c 	.word	0x0801283c

0800132c <ST7565_CMD_DISPLAY>:
//--------------------------------------------------------------------------------
void ST7565_CMD_DISPLAY(uint8_t byte)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
#ifdef SET_NEW_PROC
	ST7565_w_cmds(&byte, 1);
 8001336:	1dfb      	adds	r3, r7, #7
 8001338:	2101      	movs	r1, #1
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff ff24 	bl	8001188 <ST7565_w_cmds>
#else
	ST7565_w_cmd(byte);
#endif
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <ST7565_Draw_pixel>:
	* @param	( параметры ):	координата X(0 - 127) и координата Y(0 - 63)  color 1 or 0
	* @return  ( возвращает ):	
*******************************************************************************/
// X(0 - 127)  Y(0 - 63)
void ST7565_Draw_pixel(int16_t x, int16_t y, uint8_t color)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	80fb      	strh	r3, [r7, #6]
 8001352:	460b      	mov	r3, r1
 8001354:	80bb      	strh	r3, [r7, #4]
 8001356:	4613      	mov	r3, r2
 8001358:	70fb      	strb	r3, [r7, #3]
    if (x >= SCREEN_WIDTH || x < 0 || y >= SCREEN_HEIGHT || y < 0) return;
 800135a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800135e:	2b7f      	cmp	r3, #127	; 0x7f
 8001360:	dc4c      	bgt.n	80013fc <ST7565_Draw_pixel+0xb4>
 8001362:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001366:	2b00      	cmp	r3, #0
 8001368:	db48      	blt.n	80013fc <ST7565_Draw_pixel+0xb4>
 800136a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800136e:	2b3f      	cmp	r3, #63	; 0x3f
 8001370:	dc44      	bgt.n	80013fc <ST7565_Draw_pixel+0xb4>
 8001372:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	db40      	blt.n	80013fc <ST7565_Draw_pixel+0xb4>

    uint16_t array_pos = x + ((y >> 3) * SCREEN_WIDTH );
 800137a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800137e:	10db      	asrs	r3, r3, #3
 8001380:	b21b      	sxth	r3, r3
 8001382:	b29b      	uxth	r3, r3
 8001384:	01db      	lsls	r3, r3, #7
 8001386:	b29a      	uxth	r2, r3
 8001388:	88fb      	ldrh	r3, [r7, #6]
 800138a:	4413      	add	r3, r2
 800138c:	81fb      	strh	r3, [r7, #14]

    if (color) {
 800138e:	78fb      	ldrb	r3, [r7, #3]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d018      	beq.n	80013c6 <ST7565_Draw_pixel+0x7e>
        ST7565_buffer[array_pos] |= 1 << (y % 8);
 8001394:	89fb      	ldrh	r3, [r7, #14]
 8001396:	4a1c      	ldr	r2, [pc, #112]	; (8001408 <ST7565_Draw_pixel+0xc0>)
 8001398:	5cd3      	ldrb	r3, [r2, r3]
 800139a:	b25a      	sxtb	r2, r3
 800139c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013a0:	4259      	negs	r1, r3
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	f001 0107 	and.w	r1, r1, #7
 80013aa:	bf58      	it	pl
 80013ac:	424b      	negpl	r3, r1
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	4619      	mov	r1, r3
 80013b2:	2301      	movs	r3, #1
 80013b4:	408b      	lsls	r3, r1
 80013b6:	b25b      	sxtb	r3, r3
 80013b8:	4313      	orrs	r3, r2
 80013ba:	b25a      	sxtb	r2, r3
 80013bc:	89fb      	ldrh	r3, [r7, #14]
 80013be:	b2d1      	uxtb	r1, r2
 80013c0:	4a11      	ldr	r2, [pc, #68]	; (8001408 <ST7565_Draw_pixel+0xc0>)
 80013c2:	54d1      	strb	r1, [r2, r3]
 80013c4:	e01b      	b.n	80013fe <ST7565_Draw_pixel+0xb6>
    } else {
        ST7565_buffer[array_pos] &= 0xFF ^ 1 << (y % 8);
 80013c6:	89fb      	ldrh	r3, [r7, #14]
 80013c8:	4a0f      	ldr	r2, [pc, #60]	; (8001408 <ST7565_Draw_pixel+0xc0>)
 80013ca:	5cd3      	ldrb	r3, [r2, r3]
 80013cc:	b25a      	sxtb	r2, r3
 80013ce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013d2:	4259      	negs	r1, r3
 80013d4:	f003 0307 	and.w	r3, r3, #7
 80013d8:	f001 0107 	and.w	r1, r1, #7
 80013dc:	bf58      	it	pl
 80013de:	424b      	negpl	r3, r1
 80013e0:	b21b      	sxth	r3, r3
 80013e2:	4619      	mov	r1, r3
 80013e4:	2301      	movs	r3, #1
 80013e6:	408b      	lsls	r3, r1
 80013e8:	b25b      	sxtb	r3, r3
 80013ea:	43db      	mvns	r3, r3
 80013ec:	b25b      	sxtb	r3, r3
 80013ee:	4013      	ands	r3, r2
 80013f0:	b25a      	sxtb	r2, r3
 80013f2:	89fb      	ldrh	r3, [r7, #14]
 80013f4:	b2d1      	uxtb	r1, r2
 80013f6:	4a04      	ldr	r2, [pc, #16]	; (8001408 <ST7565_Draw_pixel+0xc0>)
 80013f8:	54d1      	strb	r1, [r2, r3]
 80013fa:	e000      	b.n	80013fe <ST7565_Draw_pixel+0xb6>
    if (x >= SCREEN_WIDTH || x < 0 || y >= SCREEN_HEIGHT || y < 0) return;
 80013fc:	bf00      	nop
    }
}
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	2000041c 	.word	0x2000041c

0800140c <ST7565_Update>:
	* @brief	 ( описание ):  вывод буффера кадра на дисплей
	* @param	( параметры ):	
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Update()
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
uint8_t x, y;
		
	ST7565_Select();
 8001412:	f7ff fe41 	bl	8001098 <ST7565_Select>

  	for (y = 0; y < 8; y++) {
 8001416:	2300      	movs	r3, #0
 8001418:	71bb      	strb	r3, [r7, #6]
 800141a:	e01d      	b.n	8001458 <ST7565_Update+0x4c>
		ST7565_SetX(0);	
 800141c:	2000      	movs	r0, #0
 800141e:	f7ff ff01 	bl	8001224 <ST7565_SetX>
		ST7565_SetY(y);
 8001422:	79bb      	ldrb	r3, [r7, #6]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff ff18 	bl	800125a <ST7565_SetY>
		for (x = 0; x < 128; x++) {
 800142a:	2300      	movs	r3, #0
 800142c:	71fb      	strb	r3, [r7, #7]
 800142e:	e00c      	b.n	800144a <ST7565_Update+0x3e>
			ST7565_w_dats(&ST7565_buffer[x + 128 * y], 1);
 8001430:	79fa      	ldrb	r2, [r7, #7]
 8001432:	79bb      	ldrb	r3, [r7, #6]
 8001434:	01db      	lsls	r3, r3, #7
 8001436:	4413      	add	r3, r2
 8001438:	4a0d      	ldr	r2, [pc, #52]	; (8001470 <ST7565_Update+0x64>)
 800143a:	4413      	add	r3, r2
 800143c:	2101      	movs	r1, #1
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fe56 	bl	80010f0 <ST7565_w_dats>
		for (x = 0; x < 128; x++) {
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	3301      	adds	r3, #1
 8001448:	71fb      	strb	r3, [r7, #7]
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	2b00      	cmp	r3, #0
 8001450:	daee      	bge.n	8001430 <ST7565_Update+0x24>
  	for (y = 0; y < 8; y++) {
 8001452:	79bb      	ldrb	r3, [r7, #6]
 8001454:	3301      	adds	r3, #1
 8001456:	71bb      	strb	r3, [r7, #6]
 8001458:	79bb      	ldrb	r3, [r7, #6]
 800145a:	2b07      	cmp	r3, #7
 800145c:	d9de      	bls.n	800141c <ST7565_Update+0x10>
		}
	}
	
	ST7565_Unselect();
 800145e:	f7ff fe27 	bl	80010b0 <ST7565_Unselect>
	HAL_Delay(100);
 8001462:	2064      	movs	r0, #100	; 0x64
 8001464:	f005 f86a 	bl	800653c <HAL_Delay>
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	2000041c 	.word	0x2000041c

08001474 <ST7565_DrawChar>:
	* @brief	 ( описание ):  функция записывает 1 символ в буфер кадра
	* @param	( параметры ):	координаты X(0 - 127)  Y(0 - 63), символ, шрифт, множитель, цвет 1 или 0
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawChar(int16_t x, int16_t y, unsigned char ch, FontDef_t* Font, uint8_t multiplier, uint8_t color)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b088      	sub	sp, #32
 8001478:	af00      	add	r7, sp, #0
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	4603      	mov	r3, r0
 800147e:	81fb      	strh	r3, [r7, #14]
 8001480:	460b      	mov	r3, r1
 8001482:	81bb      	strh	r3, [r7, #12]
 8001484:	4613      	mov	r3, r2
 8001486:	72fb      	strb	r3, [r7, #11]
uint16_t i, j;
uint16_t b;
int16_t X = x, Y = y;
 8001488:	89fb      	ldrh	r3, [r7, #14]
 800148a:	833b      	strh	r3, [r7, #24]
 800148c:	89bb      	ldrh	r3, [r7, #12]
 800148e:	82fb      	strh	r3, [r7, #22]
int16_t xx, yy;
	
	if (multiplier < 1) multiplier = 1;
 8001490:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001494:	2b00      	cmp	r3, #0
 8001496:	d102      	bne.n	800149e <ST7565_DrawChar+0x2a>
 8001498:	2301      	movs	r3, #1
 800149a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	
	// Check available space in LCD
	if (SCREEN_WIDTH >= ( x + Font->FontWidth) || SCREEN_HEIGHT >= ( y + Font->FontHeight)) {
 800149e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	7812      	ldrb	r2, [r2, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	2b80      	cmp	r3, #128	; 0x80
 80014aa:	dd07      	ble.n	80014bc <ST7565_DrawChar+0x48>
 80014ac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	7852      	ldrb	r2, [r2, #1]
 80014b4:	4413      	add	r3, r2
 80014b6:	2b40      	cmp	r3, #64	; 0x40
 80014b8:	f300 8154 	bgt.w	8001764 <ST7565_DrawChar+0x2f0>
		// Go through font
		for (i = 0; i < Font->FontHeight; i++) {
 80014bc:	2300      	movs	r3, #0
 80014be:	83fb      	strh	r3, [r7, #30]
 80014c0:	e149      	b.n	8001756 <ST7565_DrawChar+0x2e2>
			if (ch < 127) {
 80014c2:	7afb      	ldrb	r3, [r7, #11]
 80014c4:	2b7e      	cmp	r3, #126	; 0x7e
 80014c6:	d80f      	bhi.n	80014e8 <ST7565_DrawChar+0x74>
				b = Font->data[(ch - 32) * Font->FontHeight + i];
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80014ce:	7afb      	ldrb	r3, [r7, #11]
 80014d0:	3b20      	subs	r3, #32
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	7849      	ldrb	r1, [r1, #1]
 80014d6:	fb03 f101 	mul.w	r1, r3, r1
 80014da:	8bfb      	ldrh	r3, [r7, #30]
 80014dc:	440b      	add	r3, r1
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	4413      	add	r3, r2
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	837b      	strh	r3, [r7, #26]
 80014e6:	e0af      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch > 191) {
 80014e8:	7afb      	ldrb	r3, [r7, #11]
 80014ea:	2bbf      	cmp	r3, #191	; 0xbf
 80014ec:	d90f      	bls.n	800150e <ST7565_DrawChar+0x9a>
				// +96 это так как латинские символы и знаки в шрифтах занимают 96 позиций
				// и если в шрифте который содержит сперва латиницу и спец символы и потом 
				// только кирилицу то нужно добавлять 95 если шрифт 
				// содержит только кирилицу то +96 не нужно
				b = Font->data[((ch - 192) + 96) * Font->FontHeight + i];
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80014f4:	7afb      	ldrb	r3, [r7, #11]
 80014f6:	3b60      	subs	r3, #96	; 0x60
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	7849      	ldrb	r1, [r1, #1]
 80014fc:	fb03 f101 	mul.w	r1, r3, r1
 8001500:	8bfb      	ldrh	r3, [r7, #30]
 8001502:	440b      	add	r3, r1
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	4413      	add	r3, r2
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	837b      	strh	r3, [r7, #26]
 800150c:	e09c      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 168) {	// 168 символ по ASCII - Ё
 800150e:	7afb      	ldrb	r3, [r7, #11]
 8001510:	2ba8      	cmp	r3, #168	; 0xa8
 8001512:	d111      	bne.n	8001538 <ST7565_DrawChar+0xc4>
				// 160 эллемент ( символ Ё ) 
				b = Font->data[160 * Font->FontHeight + i];
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f8d3 2002 	ldr.w	r2, [r3, #2]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	785b      	ldrb	r3, [r3, #1]
 800151e:	4619      	mov	r1, r3
 8001520:	460b      	mov	r3, r1
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	440b      	add	r3, r1
 8001526:	015b      	lsls	r3, r3, #5
 8001528:	4619      	mov	r1, r3
 800152a:	8bfb      	ldrh	r3, [r7, #30]
 800152c:	440b      	add	r3, r1
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4413      	add	r3, r2
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	837b      	strh	r3, [r7, #26]
 8001536:	e087      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 184) {	// 184 символ по ASCII - ё
 8001538:	7afb      	ldrb	r3, [r7, #11]
 800153a:	2bb8      	cmp	r3, #184	; 0xb8
 800153c:	d111      	bne.n	8001562 <ST7565_DrawChar+0xee>
				// 161 эллемент  ( символ ё ) 
				b = Font->data[161 * Font->FontHeight + i];
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f8d3 1002 	ldr.w	r1, [r3, #2]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	785b      	ldrb	r3, [r3, #1]
 8001548:	461a      	mov	r2, r3
 800154a:	4613      	mov	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	015b      	lsls	r3, r3, #5
 8001552:	441a      	add	r2, r3
 8001554:	8bfb      	ldrh	r3, [r7, #30]
 8001556:	4413      	add	r3, r2
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	440b      	add	r3, r1
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	837b      	strh	r3, [r7, #26]
 8001560:	e072      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 170) {	// 168 символ по ASCII - Є
 8001562:	7afb      	ldrb	r3, [r7, #11]
 8001564:	2baa      	cmp	r3, #170	; 0xaa
 8001566:	d10f      	bne.n	8001588 <ST7565_DrawChar+0x114>
				// 162 эллемент ( символ Є )
				b = Font->data[162 * Font->FontHeight + i];
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f8d3 2002 	ldr.w	r2, [r3, #2]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	785b      	ldrb	r3, [r3, #1]
 8001572:	4619      	mov	r1, r3
 8001574:	23a2      	movs	r3, #162	; 0xa2
 8001576:	fb03 f101 	mul.w	r1, r3, r1
 800157a:	8bfb      	ldrh	r3, [r7, #30]
 800157c:	440b      	add	r3, r1
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	4413      	add	r3, r2
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	837b      	strh	r3, [r7, #26]
 8001586:	e05f      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 175) {	// 184 символ по ASCII - Ї
 8001588:	7afb      	ldrb	r3, [r7, #11]
 800158a:	2baf      	cmp	r3, #175	; 0xaf
 800158c:	d10f      	bne.n	80015ae <ST7565_DrawChar+0x13a>
				// 163 эллемент  ( символ Ї )
				b = Font->data[163 * Font->FontHeight + i];
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	785b      	ldrb	r3, [r3, #1]
 8001598:	4619      	mov	r1, r3
 800159a:	23a3      	movs	r3, #163	; 0xa3
 800159c:	fb03 f101 	mul.w	r1, r3, r1
 80015a0:	8bfb      	ldrh	r3, [r7, #30]
 80015a2:	440b      	add	r3, r1
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	4413      	add	r3, r2
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	837b      	strh	r3, [r7, #26]
 80015ac:	e04c      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 178) {	// 168 символ по ASCII - І
 80015ae:	7afb      	ldrb	r3, [r7, #11]
 80015b0:	2bb2      	cmp	r3, #178	; 0xb2
 80015b2:	d10f      	bne.n	80015d4 <ST7565_DrawChar+0x160>
				// 164 эллемент ( символ І )
				b = Font->data[164 * Font->FontHeight + i];
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	785b      	ldrb	r3, [r3, #1]
 80015be:	4619      	mov	r1, r3
 80015c0:	23a4      	movs	r3, #164	; 0xa4
 80015c2:	fb03 f101 	mul.w	r1, r3, r1
 80015c6:	8bfb      	ldrh	r3, [r7, #30]
 80015c8:	440b      	add	r3, r1
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	4413      	add	r3, r2
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	837b      	strh	r3, [r7, #26]
 80015d2:	e039      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			}
			else if (ch == 179) {	// 184 символ по ASCII - і
 80015d4:	7afb      	ldrb	r3, [r7, #11]
 80015d6:	2bb3      	cmp	r3, #179	; 0xb3
 80015d8:	d111      	bne.n	80015fe <ST7565_DrawChar+0x18a>
				// 165 эллемент  ( символ і )
				b = Font->data[165 * Font->FontHeight + i];
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	785b      	ldrb	r3, [r3, #1]
 80015e4:	4619      	mov	r1, r3
 80015e6:	460b      	mov	r3, r1
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	440b      	add	r3, r1
 80015ec:	0159      	lsls	r1, r3, #5
 80015ee:	4419      	add	r1, r3
 80015f0:	8bfb      	ldrh	r3, [r7, #30]
 80015f2:	440b      	add	r3, r1
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	4413      	add	r3, r2
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	837b      	strh	r3, [r7, #26]
 80015fc:	e024      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 186) {	// 184 символ по ASCII - є
 80015fe:	7afb      	ldrb	r3, [r7, #11]
 8001600:	2bba      	cmp	r3, #186	; 0xba
 8001602:	d10f      	bne.n	8001624 <ST7565_DrawChar+0x1b0>
				// 166 эллемент  ( символ є )
				b = Font->data[166 * Font->FontHeight + i];
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f8d3 2002 	ldr.w	r2, [r3, #2]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	785b      	ldrb	r3, [r3, #1]
 800160e:	4619      	mov	r1, r3
 8001610:	23a6      	movs	r3, #166	; 0xa6
 8001612:	fb03 f101 	mul.w	r1, r3, r1
 8001616:	8bfb      	ldrh	r3, [r7, #30]
 8001618:	440b      	add	r3, r1
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	4413      	add	r3, r2
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	837b      	strh	r3, [r7, #26]
 8001622:	e011      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 191) {	// 168 символ по ASCII - ї
 8001624:	7afb      	ldrb	r3, [r7, #11]
 8001626:	2bbf      	cmp	r3, #191	; 0xbf
 8001628:	d10e      	bne.n	8001648 <ST7565_DrawChar+0x1d4>
				// 167 эллемент ( символ ї )
				b = Font->data[167 * Font->FontHeight + i];
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	785b      	ldrb	r3, [r3, #1]
 8001634:	4619      	mov	r1, r3
 8001636:	23a7      	movs	r3, #167	; 0xa7
 8001638:	fb03 f101 	mul.w	r1, r3, r1
 800163c:	8bfb      	ldrh	r3, [r7, #30]
 800163e:	440b      	add	r3, r1
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4413      	add	r3, r2
 8001644:	881b      	ldrh	r3, [r3, #0]
 8001646:	837b      	strh	r3, [r7, #26]
			}
			//-----------------------------------------------------------------------------
			
			for (j = 0; j < Font->FontWidth; j++) {
 8001648:	2300      	movs	r3, #0
 800164a:	83bb      	strh	r3, [r7, #28]
 800164c:	e071      	b.n	8001732 <ST7565_DrawChar+0x2be>
				if ((b << j) & 0x8000) {
 800164e:	8b7a      	ldrh	r2, [r7, #26]
 8001650:	8bbb      	ldrh	r3, [r7, #28]
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d02d      	beq.n	80016ba <ST7565_DrawChar+0x246>
					for (yy = 0; yy < multiplier; yy++){
 800165e:	2300      	movs	r3, #0
 8001660:	827b      	strh	r3, [r7, #18]
 8001662:	e023      	b.n	80016ac <ST7565_DrawChar+0x238>
						for (xx = 0; xx < multiplier; xx++){
 8001664:	2300      	movs	r3, #0
 8001666:	82bb      	strh	r3, [r7, #20]
 8001668:	e014      	b.n	8001694 <ST7565_DrawChar+0x220>
							ST7565_Draw_pixel(X + xx, Y + yy, color);
 800166a:	8b3a      	ldrh	r2, [r7, #24]
 800166c:	8abb      	ldrh	r3, [r7, #20]
 800166e:	4413      	add	r3, r2
 8001670:	b29b      	uxth	r3, r3
 8001672:	b218      	sxth	r0, r3
 8001674:	8afa      	ldrh	r2, [r7, #22]
 8001676:	8a7b      	ldrh	r3, [r7, #18]
 8001678:	4413      	add	r3, r2
 800167a:	b29b      	uxth	r3, r3
 800167c:	b21b      	sxth	r3, r3
 800167e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001682:	4619      	mov	r1, r3
 8001684:	f7ff fe60 	bl	8001348 <ST7565_Draw_pixel>
						for (xx = 0; xx < multiplier; xx++){
 8001688:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800168c:	b29b      	uxth	r3, r3
 800168e:	3301      	adds	r3, #1
 8001690:	b29b      	uxth	r3, r3
 8001692:	82bb      	strh	r3, [r7, #20]
 8001694:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001698:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800169c:	429a      	cmp	r2, r3
 800169e:	dbe4      	blt.n	800166a <ST7565_DrawChar+0x1f6>
					for (yy = 0; yy < multiplier; yy++){
 80016a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	3301      	adds	r3, #1
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	827b      	strh	r3, [r7, #18]
 80016ac:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80016b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80016b4:	429a      	cmp	r2, r3
 80016b6:	dbd5      	blt.n	8001664 <ST7565_DrawChar+0x1f0>
 80016b8:	e031      	b.n	800171e <ST7565_DrawChar+0x2aa>
						}
					}
				} else {// если фон очищать то оставляем если чтоб фон оставался старый то коментируем эту часть -------------
					for (yy = 0; yy < multiplier; yy++){
 80016ba:	2300      	movs	r3, #0
 80016bc:	827b      	strh	r3, [r7, #18]
 80016be:	e028      	b.n	8001712 <ST7565_DrawChar+0x29e>
						for (xx = 0; xx < multiplier; xx++){
 80016c0:	2300      	movs	r3, #0
 80016c2:	82bb      	strh	r3, [r7, #20]
 80016c4:	e019      	b.n	80016fa <ST7565_DrawChar+0x286>
							ST7565_Draw_pixel(X + xx, Y + yy, !color);
 80016c6:	8b3a      	ldrh	r2, [r7, #24]
 80016c8:	8abb      	ldrh	r3, [r7, #20]
 80016ca:	4413      	add	r3, r2
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	b218      	sxth	r0, r3
 80016d0:	8afa      	ldrh	r2, [r7, #22]
 80016d2:	8a7b      	ldrh	r3, [r7, #18]
 80016d4:	4413      	add	r3, r2
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	b219      	sxth	r1, r3
 80016da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80016de:	2b00      	cmp	r3, #0
 80016e0:	bf0c      	ite	eq
 80016e2:	2301      	moveq	r3, #1
 80016e4:	2300      	movne	r3, #0
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	461a      	mov	r2, r3
 80016ea:	f7ff fe2d 	bl	8001348 <ST7565_Draw_pixel>
						for (xx = 0; xx < multiplier; xx++){
 80016ee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	3301      	adds	r3, #1
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	82bb      	strh	r3, [r7, #20]
 80016fa:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80016fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001702:	429a      	cmp	r2, r3
 8001704:	dbdf      	blt.n	80016c6 <ST7565_DrawChar+0x252>
					for (yy = 0; yy < multiplier; yy++){
 8001706:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800170a:	b29b      	uxth	r3, r3
 800170c:	3301      	adds	r3, #1
 800170e:	b29b      	uxth	r3, r3
 8001710:	827b      	strh	r3, [r7, #18]
 8001712:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001716:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800171a:	429a      	cmp	r2, r3
 800171c:	dbd0      	blt.n	80016c0 <ST7565_DrawChar+0x24c>
						}
					}
				}
				//----------------------------------------------------------------------------------------------------
				X += multiplier;
 800171e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001722:	b29a      	uxth	r2, r3
 8001724:	8b3b      	ldrh	r3, [r7, #24]
 8001726:	4413      	add	r3, r2
 8001728:	b29b      	uxth	r3, r3
 800172a:	833b      	strh	r3, [r7, #24]
			for (j = 0; j < Font->FontWidth; j++) {
 800172c:	8bbb      	ldrh	r3, [r7, #28]
 800172e:	3301      	adds	r3, #1
 8001730:	83bb      	strh	r3, [r7, #28]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	b29b      	uxth	r3, r3
 8001738:	8bba      	ldrh	r2, [r7, #28]
 800173a:	429a      	cmp	r2, r3
 800173c:	d387      	bcc.n	800164e <ST7565_DrawChar+0x1da>
			}
			X = x;
 800173e:	89fb      	ldrh	r3, [r7, #14]
 8001740:	833b      	strh	r3, [r7, #24]
			Y += multiplier;
 8001742:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001746:	b29a      	uxth	r2, r3
 8001748:	8afb      	ldrh	r3, [r7, #22]
 800174a:	4413      	add	r3, r2
 800174c:	b29b      	uxth	r3, r3
 800174e:	82fb      	strh	r3, [r7, #22]
		for (i = 0; i < Font->FontHeight; i++) {
 8001750:	8bfb      	ldrh	r3, [r7, #30]
 8001752:	3301      	adds	r3, #1
 8001754:	83fb      	strh	r3, [r7, #30]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	785b      	ldrb	r3, [r3, #1]
 800175a:	b29b      	uxth	r3, r3
 800175c:	8bfa      	ldrh	r2, [r7, #30]
 800175e:	429a      	cmp	r2, r3
 8001760:	f4ff aeaf 	bcc.w	80014c2 <ST7565_DrawChar+0x4e>
		}
		
	}
}
 8001764:	bf00      	nop
 8001766:	3720      	adds	r7, #32
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <ST7565_Print>:
 * @brief	 ( описание ):  функция записывает строку в буфер кадра ( поддерживает кириллицу ( в том числе и Укр. язык) и латиницу
 * @param	( параметры ):	координаты X(0 - 127)  Y(0 - 63), символ, шрифт, множитель, цвет 1 или 0
 * @return  ( возвращает ):
*******************************************************************************/
void ST7565_Print(int16_t x, int16_t y, char *str, FontDef_t *Font, uint8_t multiplier, uint8_t color)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af02      	add	r7, sp, #8
 8001772:	60ba      	str	r2, [r7, #8]
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	4603      	mov	r3, r0
 8001778:	81fb      	strh	r3, [r7, #14]
 800177a:	460b      	mov	r3, r1
 800177c:	81bb      	strh	r3, [r7, #12]
unsigned char buff_char;
uint16_t len = strlen(str);
 800177e:	68b8      	ldr	r0, [r7, #8]
 8001780:	f7fe fd26 	bl	80001d0 <strlen>
 8001784:	4603      	mov	r3, r0
 8001786:	82bb      	strh	r3, [r7, #20]

	if (multiplier < 1) multiplier = 1;
 8001788:	f897 3020 	ldrb.w	r3, [r7, #32]
 800178c:	2b00      	cmp	r3, #0
 800178e:	f040 809c 	bne.w	80018ca <ST7565_Print+0x15e>
 8001792:	2301      	movs	r3, #1
 8001794:	f887 3020 	strb.w	r3, [r7, #32]
	
	while (len--) {
 8001798:	e097      	b.n	80018ca <ST7565_Print+0x15e>
		//---------------------------------------------------------------------
		// проверка на кириллицу UTF-8, если латиница то пропускаем if
		// Расширенные символы ASCII Win-1251 кириллица (код символа 128-255)
		// проверяем первый байт из двух ( так как UTF-8 ето два байта )
		// если он больше либо равен 0xC0 ( первый байт в кириллеце будет равен 0xD0 либо 0xD1 именно в алфавите )
		if ( (uint8_t)*str >= 0xC0 ) {	// код 0xC0 соответствует символу кириллица 'A' по ASCII Win-1251
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2bbf      	cmp	r3, #191	; 0xbf
 80017a0:	d974      	bls.n	800188c <ST7565_Print+0x120>
			// проверяем какой именно байт первый 0xD0 либо 0xD1
			switch ((uint8_t)*str) {
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2bd0      	cmp	r3, #208	; 0xd0
 80017a8:	d002      	beq.n	80017b0 <ST7565_Print+0x44>
 80017aa:	2bd1      	cmp	r3, #209	; 0xd1
 80017ac:	d02c      	beq.n	8001808 <ST7565_Print+0x9c>
 80017ae:	e05b      	b.n	8001868 <ST7565_Print+0xfc>
				case 0xD0:
				//{
					// увеличиваем массив так как нам нужен второй байт
					str++;
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	3301      	adds	r3, #1
 80017b4:	60bb      	str	r3, [r7, #8]
					// проверяем второй байт там сам символ
					if ((uint8_t)*str == 0x81) { buff_char = 0xA8; break; }		// байт символа Ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b81      	cmp	r3, #129	; 0x81
 80017bc:	d102      	bne.n	80017c4 <ST7565_Print+0x58>
 80017be:	23a8      	movs	r3, #168	; 0xa8
 80017c0:	75fb      	strb	r3, [r7, #23]
 80017c2:	e051      	b.n	8001868 <ST7565_Print+0xfc>
					else if ((uint8_t)*str >= 0x90 && (uint8_t)*str <= 0xBF) { buff_char = (*str) + 0x30; }	// байт символов А...Я а...п  делаем здвиг на +48
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b8f      	cmp	r3, #143	; 0x8f
 80017ca:	d908      	bls.n	80017de <ST7565_Print+0x72>
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2bbf      	cmp	r3, #191	; 0xbf
 80017d2:	d804      	bhi.n	80017de <ST7565_Print+0x72>
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	3330      	adds	r3, #48	; 0x30
 80017da:	75fb      	strb	r3, [r7, #23]
					else if ((uint8_t)*str == 0x84) { buff_char = 0xAA; break; }		// байт символа Є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x86) { buff_char = 0xB2; break; }		// байт символа І ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x87) { buff_char = 0xAF; break; }		// байт символа Ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
				break;
 80017dc:	e041      	b.n	8001862 <ST7565_Print+0xf6>
					else if ((uint8_t)*str == 0x84) { buff_char = 0xAA; break; }		// байт символа Є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b84      	cmp	r3, #132	; 0x84
 80017e4:	d102      	bne.n	80017ec <ST7565_Print+0x80>
 80017e6:	23aa      	movs	r3, #170	; 0xaa
 80017e8:	75fb      	strb	r3, [r7, #23]
 80017ea:	e03d      	b.n	8001868 <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x86) { buff_char = 0xB2; break; }		// байт символа І ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b86      	cmp	r3, #134	; 0x86
 80017f2:	d102      	bne.n	80017fa <ST7565_Print+0x8e>
 80017f4:	23b2      	movs	r3, #178	; 0xb2
 80017f6:	75fb      	strb	r3, [r7, #23]
 80017f8:	e036      	b.n	8001868 <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x87) { buff_char = 0xAF; break; }		// байт символа Ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b87      	cmp	r3, #135	; 0x87
 8001800:	d12f      	bne.n	8001862 <ST7565_Print+0xf6>
 8001802:	23af      	movs	r3, #175	; 0xaf
 8001804:	75fb      	strb	r3, [r7, #23]
 8001806:	e02f      	b.n	8001868 <ST7565_Print+0xfc>
				//}
				case 0xD1:
				//{
					// увеличиваем массив так как нам нужен второй байт
					str++;
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	3301      	adds	r3, #1
 800180c:	60bb      	str	r3, [r7, #8]
					// проверяем второй байт там сам символ
					if ((uint8_t)*str == 0x91) { buff_char = 0xB8; break; }		// байт символа ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b91      	cmp	r3, #145	; 0x91
 8001814:	d102      	bne.n	800181c <ST7565_Print+0xb0>
 8001816:	23b8      	movs	r3, #184	; 0xb8
 8001818:	75fb      	strb	r3, [r7, #23]
 800181a:	e025      	b.n	8001868 <ST7565_Print+0xfc>
					else if ((uint8_t)*str >= 0x80 && (uint8_t)*str <= 0x8F) { buff_char = (*str) + 0x70; }	// байт символов п...я	елаем здвиг на +112
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	b25b      	sxtb	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	da08      	bge.n	8001838 <ST7565_Print+0xcc>
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b8f      	cmp	r3, #143	; 0x8f
 800182c:	d804      	bhi.n	8001838 <ST7565_Print+0xcc>
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	3370      	adds	r3, #112	; 0x70
 8001834:	75fb      	strb	r3, [r7, #23]
					else if ((uint8_t)*str == 0x94) { buff_char = 0xBA; break; }		// байт символа є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x96) { buff_char = 0xB3; break; }		// байт символа і ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x97) { buff_char = 0xBF; break; }		// байт символа ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
				break;
 8001836:	e016      	b.n	8001866 <ST7565_Print+0xfa>
					else if ((uint8_t)*str == 0x94) { buff_char = 0xBA; break; }		// байт символа є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b94      	cmp	r3, #148	; 0x94
 800183e:	d102      	bne.n	8001846 <ST7565_Print+0xda>
 8001840:	23ba      	movs	r3, #186	; 0xba
 8001842:	75fb      	strb	r3, [r7, #23]
 8001844:	e010      	b.n	8001868 <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x96) { buff_char = 0xB3; break; }		// байт символа і ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b96      	cmp	r3, #150	; 0x96
 800184c:	d102      	bne.n	8001854 <ST7565_Print+0xe8>
 800184e:	23b3      	movs	r3, #179	; 0xb3
 8001850:	75fb      	strb	r3, [r7, #23]
 8001852:	e009      	b.n	8001868 <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x97) { buff_char = 0xBF; break; }		// байт символа ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b97      	cmp	r3, #151	; 0x97
 800185a:	d104      	bne.n	8001866 <ST7565_Print+0xfa>
 800185c:	23bf      	movs	r3, #191	; 0xbf
 800185e:	75fb      	strb	r3, [r7, #23]
 8001860:	e002      	b.n	8001868 <ST7565_Print+0xfc>
				break;
 8001862:	bf00      	nop
 8001864:	e000      	b.n	8001868 <ST7565_Print+0xfc>
				break;
 8001866:	bf00      	nop
				//}
			}
			// уменьшаем еще переменную так как израсходывали 2 байта для кириллицы
			len--;
 8001868:	8abb      	ldrh	r3, [r7, #20]
 800186a:	3b01      	subs	r3, #1
 800186c:	82bb      	strh	r3, [r7, #20]
			ST7565_DrawChar(x, y, buff_char, Font, multiplier, color);
 800186e:	7dfa      	ldrb	r2, [r7, #23]
 8001870:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001874:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001878:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800187c:	9301      	str	r3, [sp, #4]
 800187e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f7ff fdf5 	bl	8001474 <ST7565_DrawChar>
 800188a:	e00e      	b.n	80018aa <ST7565_Print+0x13e>
		} else {
			ST7565_DrawChar(x, y, *str, Font, multiplier, color);
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	781a      	ldrb	r2, [r3, #0]
 8001890:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001894:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001898:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800189c:	9301      	str	r3, [sp, #4]
 800189e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f7ff fde5 	bl	8001474 <ST7565_DrawChar>
		}
		
		x += (Font->FontWidth * multiplier);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	fb12 f303 	smulbb	r3, r2, r3
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	89fb      	ldrh	r3, [r7, #14]
 80018be:	4413      	add	r3, r2
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	81fb      	strh	r3, [r7, #14]
		str++;
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	3301      	adds	r3, #1
 80018c8:	60bb      	str	r3, [r7, #8]
	while (len--) {
 80018ca:	8abb      	ldrh	r3, [r7, #20]
 80018cc:	1e5a      	subs	r2, r3, #1
 80018ce:	82ba      	strh	r2, [r7, #20]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f47f af62 	bne.w	800179a <ST7565_Print+0x2e>
	}
}
 80018d6:	bf00      	nop
 80018d8:	bf00      	nop
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <ST7565_DrawLine>:
	* @param	( параметры ):	координаты начальной точки и конечной и цвет 0 или 1
								X(0 - 127)  Y(0 - 63)
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint8_t c)
{
 80018e0:	b590      	push	{r4, r7, lr}
 80018e2:	b087      	sub	sp, #28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4604      	mov	r4, r0
 80018e8:	4608      	mov	r0, r1
 80018ea:	4611      	mov	r1, r2
 80018ec:	461a      	mov	r2, r3
 80018ee:	4623      	mov	r3, r4
 80018f0:	80fb      	strh	r3, [r7, #6]
 80018f2:	4603      	mov	r3, r0
 80018f4:	80bb      	strh	r3, [r7, #4]
 80018f6:	460b      	mov	r3, r1
 80018f8:	807b      	strh	r3, [r7, #2]
 80018fa:	4613      	mov	r3, r2
 80018fc:	803b      	strh	r3, [r7, #0]
int16_t dx, dy, sx, sy, err, e2, i, tmp;
	
	/* Check for overflow */
	if (x0 >= SCREEN_WIDTH)  x0 = SCREEN_WIDTH  - 1;
 80018fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001902:	2b7f      	cmp	r3, #127	; 0x7f
 8001904:	dd01      	ble.n	800190a <ST7565_DrawLine+0x2a>
 8001906:	237f      	movs	r3, #127	; 0x7f
 8001908:	80fb      	strh	r3, [r7, #6]
	if (x1 >= SCREEN_WIDTH)  x1 = SCREEN_WIDTH  - 1;
 800190a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800190e:	2b7f      	cmp	r3, #127	; 0x7f
 8001910:	dd01      	ble.n	8001916 <ST7565_DrawLine+0x36>
 8001912:	237f      	movs	r3, #127	; 0x7f
 8001914:	807b      	strh	r3, [r7, #2]
	if (y0 >= SCREEN_HEIGHT) y0 = SCREEN_HEIGHT - 1;
 8001916:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800191a:	2b3f      	cmp	r3, #63	; 0x3f
 800191c:	dd01      	ble.n	8001922 <ST7565_DrawLine+0x42>
 800191e:	233f      	movs	r3, #63	; 0x3f
 8001920:	80bb      	strh	r3, [r7, #4]
	if (y1 >= SCREEN_HEIGHT) y1 = SCREEN_HEIGHT - 1;
 8001922:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001926:	2b3f      	cmp	r3, #63	; 0x3f
 8001928:	dd01      	ble.n	800192e <ST7565_DrawLine+0x4e>
 800192a:	233f      	movs	r3, #63	; 0x3f
 800192c:	803b      	strh	r3, [r7, #0]
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 800192e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001932:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001936:	429a      	cmp	r2, r3
 8001938:	da05      	bge.n	8001946 <ST7565_DrawLine+0x66>
 800193a:	887a      	ldrh	r2, [r7, #2]
 800193c:	88fb      	ldrh	r3, [r7, #6]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	b29b      	uxth	r3, r3
 8001942:	b21b      	sxth	r3, r3
 8001944:	e004      	b.n	8001950 <ST7565_DrawLine+0x70>
 8001946:	88fa      	ldrh	r2, [r7, #6]
 8001948:	887b      	ldrh	r3, [r7, #2]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	b29b      	uxth	r3, r3
 800194e:	b21b      	sxth	r3, r3
 8001950:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8001952:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001956:	f9b7 3000 	ldrsh.w	r3, [r7]
 800195a:	429a      	cmp	r2, r3
 800195c:	da05      	bge.n	800196a <ST7565_DrawLine+0x8a>
 800195e:	883a      	ldrh	r2, [r7, #0]
 8001960:	88bb      	ldrh	r3, [r7, #4]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	b29b      	uxth	r3, r3
 8001966:	b21b      	sxth	r3, r3
 8001968:	e004      	b.n	8001974 <ST7565_DrawLine+0x94>
 800196a:	88ba      	ldrh	r2, [r7, #4]
 800196c:	883b      	ldrh	r3, [r7, #0]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	b29b      	uxth	r3, r3
 8001972:	b21b      	sxth	r3, r3
 8001974:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8001976:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800197a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800197e:	429a      	cmp	r2, r3
 8001980:	da01      	bge.n	8001986 <ST7565_DrawLine+0xa6>
 8001982:	2301      	movs	r3, #1
 8001984:	e001      	b.n	800198a <ST7565_DrawLine+0xaa>
 8001986:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800198a:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 800198c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001990:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001994:	429a      	cmp	r2, r3
 8001996:	da01      	bge.n	800199c <ST7565_DrawLine+0xbc>
 8001998:	2301      	movs	r3, #1
 800199a:	e001      	b.n	80019a0 <ST7565_DrawLine+0xc0>
 800199c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019a0:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 80019a2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80019a6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	dd06      	ble.n	80019bc <ST7565_DrawLine+0xdc>
 80019ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80019b2:	0fda      	lsrs	r2, r3, #31
 80019b4:	4413      	add	r3, r2
 80019b6:	105b      	asrs	r3, r3, #1
 80019b8:	b21b      	sxth	r3, r3
 80019ba:	e006      	b.n	80019ca <ST7565_DrawLine+0xea>
 80019bc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80019c0:	0fda      	lsrs	r2, r3, #31
 80019c2:	4413      	add	r3, r2
 80019c4:	105b      	asrs	r3, r3, #1
 80019c6:	425b      	negs	r3, r3
 80019c8:	b21b      	sxth	r3, r3
 80019ca:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 80019cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d130      	bne.n	8001a36 <ST7565_DrawLine+0x156>
		if (y1 < y0) {
 80019d4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80019d8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80019dc:	429a      	cmp	r2, r3
 80019de:	da05      	bge.n	80019ec <ST7565_DrawLine+0x10c>
			tmp = y1;
 80019e0:	883b      	ldrh	r3, [r7, #0]
 80019e2:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80019e4:	88bb      	ldrh	r3, [r7, #4]
 80019e6:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80019e8:	893b      	ldrh	r3, [r7, #8]
 80019ea:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 80019ec:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80019f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	da05      	bge.n	8001a04 <ST7565_DrawLine+0x124>
			tmp = x1;
 80019f8:	887b      	ldrh	r3, [r7, #2]
 80019fa:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80019fc:	88fb      	ldrh	r3, [r7, #6]
 80019fe:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001a00:	893b      	ldrh	r3, [r7, #8]
 8001a02:	80fb      	strh	r3, [r7, #6]
		}
		
		// Vertical line
		for (i = y0; i <= y1; i++) ST7565_Draw_pixel(x0, i, c);
 8001a04:	88bb      	ldrh	r3, [r7, #4]
 8001a06:	82bb      	strh	r3, [r7, #20]
 8001a08:	e00e      	b.n	8001a28 <ST7565_DrawLine+0x148>
 8001a0a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001a0e:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8001a12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff fc96 	bl	8001348 <ST7565_Draw_pixel>
 8001a1c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	3301      	adds	r3, #1
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	82bb      	strh	r3, [r7, #20]
 8001a28:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001a2c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	ddea      	ble.n	8001a0a <ST7565_DrawLine+0x12a>
		
		return;
 8001a34:	e06e      	b.n	8001b14 <ST7565_DrawLine+0x234>
	}
	
	if (dy == 0) {
 8001a36:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d130      	bne.n	8001aa0 <ST7565_DrawLine+0x1c0>
		if (y1 < y0) {
 8001a3e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001a42:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	da05      	bge.n	8001a56 <ST7565_DrawLine+0x176>
			tmp = y1;
 8001a4a:	883b      	ldrh	r3, [r7, #0]
 8001a4c:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001a4e:	88bb      	ldrh	r3, [r7, #4]
 8001a50:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001a52:	893b      	ldrh	r3, [r7, #8]
 8001a54:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001a56:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001a5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	da05      	bge.n	8001a6e <ST7565_DrawLine+0x18e>
			tmp = x1;
 8001a62:	887b      	ldrh	r3, [r7, #2]
 8001a64:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001a66:	88fb      	ldrh	r3, [r7, #6]
 8001a68:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001a6a:	893b      	ldrh	r3, [r7, #8]
 8001a6c:	80fb      	strh	r3, [r7, #6]
		}
		
		// Horizontal line
		for (i = x0; i <= x1; i++) ST7565_Draw_pixel(i, y0, c);
 8001a6e:	88fb      	ldrh	r3, [r7, #6]
 8001a70:	82bb      	strh	r3, [r7, #20]
 8001a72:	e00e      	b.n	8001a92 <ST7565_DrawLine+0x1b2>
 8001a74:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001a78:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001a7c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fc61 	bl	8001348 <ST7565_Draw_pixel>
 8001a86:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	82bb      	strh	r3, [r7, #20]
 8001a92:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001a96:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	ddea      	ble.n	8001a74 <ST7565_DrawLine+0x194>
		
		return;
 8001a9e:	e039      	b.n	8001b14 <ST7565_DrawLine+0x234>
	}
	
	while (1) {
		ST7565_Draw_pixel(x0, y0, c);
 8001aa0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001aa4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001aa8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fc4b 	bl	8001348 <ST7565_Draw_pixel>
		if (x0 == x1 && y0 == y1) break;
 8001ab2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001ab6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d105      	bne.n	8001aca <ST7565_DrawLine+0x1ea>
 8001abe:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001ac2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d023      	beq.n	8001b12 <ST7565_DrawLine+0x232>

		e2 = err; 
 8001aca:	8afb      	ldrh	r3, [r7, #22]
 8001acc:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8001ace:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001ad2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001ad6:	425b      	negs	r3, r3
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	dd09      	ble.n	8001af0 <ST7565_DrawLine+0x210>
			err -= dy;
 8001adc:	8afa      	ldrh	r2, [r7, #22]
 8001ade:	8a3b      	ldrh	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001ae6:	88fa      	ldrh	r2, [r7, #6]
 8001ae8:	89fb      	ldrh	r3, [r7, #14]
 8001aea:	4413      	add	r3, r2
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8001af0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001af4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	dad1      	bge.n	8001aa0 <ST7565_DrawLine+0x1c0>
			err += dx;
 8001afc:	8afa      	ldrh	r2, [r7, #22]
 8001afe:	8a7b      	ldrh	r3, [r7, #18]
 8001b00:	4413      	add	r3, r2
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001b06:	88ba      	ldrh	r2, [r7, #4]
 8001b08:	89bb      	ldrh	r3, [r7, #12]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	80bb      	strh	r3, [r7, #4]
		ST7565_Draw_pixel(x0, y0, c);
 8001b10:	e7c6      	b.n	8001aa0 <ST7565_DrawLine+0x1c0>
		if (x0 == x1 && y0 == y1) break;
 8001b12:	bf00      	nop
		} 
	}
}
 8001b14:	371c      	adds	r7, #28
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd90      	pop	{r4, r7, pc}

08001b1a <ST7565_DrawRectangle>:
	* @param	( параметры ):	координаты верхнего левого и ширина и высота и цвет
								X(0 - 127)  Y(0 - 63)
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawRectangle(int16_t x, int16_t y, int16_t w, int16_t h, uint8_t c)
{
 8001b1a:	b590      	push	{r4, r7, lr}
 8001b1c:	b085      	sub	sp, #20
 8001b1e:	af02      	add	r7, sp, #8
 8001b20:	4604      	mov	r4, r0
 8001b22:	4608      	mov	r0, r1
 8001b24:	4611      	mov	r1, r2
 8001b26:	461a      	mov	r2, r3
 8001b28:	4623      	mov	r3, r4
 8001b2a:	80fb      	strh	r3, [r7, #6]
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	80bb      	strh	r3, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	807b      	strh	r3, [r7, #2]
 8001b34:	4613      	mov	r3, r2
 8001b36:	803b      	strh	r3, [r7, #0]
	// Check input parameters
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001b38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b3c:	2b7f      	cmp	r3, #127	; 0x7f
 8001b3e:	dc6a      	bgt.n	8001c16 <ST7565_DrawRectangle+0xfc>
 8001b40:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001b44:	2b3f      	cmp	r3, #63	; 0x3f
 8001b46:	dc66      	bgt.n	8001c16 <ST7565_DrawRectangle+0xfc>
	
	// Check width and height
	if ((x + w) >= SCREEN_WIDTH)  w = SCREEN_WIDTH  - x;
 8001b48:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b50:	4413      	add	r3, r2
 8001b52:	2b7f      	cmp	r3, #127	; 0x7f
 8001b54:	dd04      	ble.n	8001b60 <ST7565_DrawRectangle+0x46>
 8001b56:	88fb      	ldrh	r3, [r7, #6]
 8001b58:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	807b      	strh	r3, [r7, #2]
	if ((y + h) >= SCREEN_HEIGHT) h = SCREEN_HEIGHT - y;
 8001b60:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001b64:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001b68:	4413      	add	r3, r2
 8001b6a:	2b3f      	cmp	r3, #63	; 0x3f
 8001b6c:	dd04      	ble.n	8001b78 <ST7565_DrawRectangle+0x5e>
 8001b6e:	88bb      	ldrh	r3, [r7, #4]
 8001b70:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	803b      	strh	r3, [r7, #0]
	
	// Draw 4 lines
	ST7565_DrawLine(x, y, x + w, y, c);         // Top line
 8001b78:	88fa      	ldrh	r2, [r7, #6]
 8001b7a:	887b      	ldrh	r3, [r7, #2]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	b21a      	sxth	r2, r3
 8001b82:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8001b86:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001b8a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001b8e:	7e3b      	ldrb	r3, [r7, #24]
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	4623      	mov	r3, r4
 8001b94:	f7ff fea4 	bl	80018e0 <ST7565_DrawLine>
	ST7565_DrawLine(x, y + h, x + w, y + h, c); // Bottom line
 8001b98:	88ba      	ldrh	r2, [r7, #4]
 8001b9a:	883b      	ldrh	r3, [r7, #0]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	b219      	sxth	r1, r3
 8001ba2:	88fa      	ldrh	r2, [r7, #6]
 8001ba4:	887b      	ldrh	r3, [r7, #2]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	b21c      	sxth	r4, r3
 8001bac:	88ba      	ldrh	r2, [r7, #4]
 8001bae:	883b      	ldrh	r3, [r7, #0]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	b21a      	sxth	r2, r3
 8001bb6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001bba:	7e3b      	ldrb	r3, [r7, #24]
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	4622      	mov	r2, r4
 8001bc2:	f7ff fe8d 	bl	80018e0 <ST7565_DrawLine>
	ST7565_DrawLine(x, y, x, y + h, c);         // Left line
 8001bc6:	88ba      	ldrh	r2, [r7, #4]
 8001bc8:	883b      	ldrh	r3, [r7, #0]
 8001bca:	4413      	add	r3, r2
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	b21c      	sxth	r4, r3
 8001bd0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001bd4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001bd8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001bdc:	7e3b      	ldrb	r3, [r7, #24]
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	4623      	mov	r3, r4
 8001be2:	f7ff fe7d 	bl	80018e0 <ST7565_DrawLine>
	ST7565_DrawLine(x + w, y, x + w, y + h, c); // Right line
 8001be6:	88fa      	ldrh	r2, [r7, #6]
 8001be8:	887b      	ldrh	r3, [r7, #2]
 8001bea:	4413      	add	r3, r2
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	b218      	sxth	r0, r3
 8001bf0:	88fa      	ldrh	r2, [r7, #6]
 8001bf2:	887b      	ldrh	r3, [r7, #2]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	b21c      	sxth	r4, r3
 8001bfa:	88ba      	ldrh	r2, [r7, #4]
 8001bfc:	883b      	ldrh	r3, [r7, #0]
 8001bfe:	4413      	add	r3, r2
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	b21a      	sxth	r2, r3
 8001c04:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001c08:	7e3b      	ldrb	r3, [r7, #24]
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	4622      	mov	r2, r4
 8001c10:	f7ff fe66 	bl	80018e0 <ST7565_DrawLine>
 8001c14:	e000      	b.n	8001c18 <ST7565_DrawRectangle+0xfe>
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001c16:	bf00      	nop
}
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd90      	pop	{r4, r7, pc}

08001c1e <ST7565_DrawFilledRectangle>:
	* @param	( параметры ):	координаты верхнего левого и ширина и высота и цвет
								X(0 - 127)  Y(0 - 63)
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawFilledRectangle(int16_t x, int16_t y, int16_t w, int16_t h, uint8_t c)
{
 8001c1e:	b590      	push	{r4, r7, lr}
 8001c20:	b087      	sub	sp, #28
 8001c22:	af02      	add	r7, sp, #8
 8001c24:	4604      	mov	r4, r0
 8001c26:	4608      	mov	r0, r1
 8001c28:	4611      	mov	r1, r2
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	4623      	mov	r3, r4
 8001c2e:	80fb      	strh	r3, [r7, #6]
 8001c30:	4603      	mov	r3, r0
 8001c32:	80bb      	strh	r3, [r7, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	807b      	strh	r3, [r7, #2]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	803b      	strh	r3, [r7, #0]
uint8_t i;
	
	// Check input parameters
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001c3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c40:	2b7f      	cmp	r3, #127	; 0x7f
 8001c42:	dc41      	bgt.n	8001cc8 <ST7565_DrawFilledRectangle+0xaa>
 8001c44:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c48:	2b3f      	cmp	r3, #63	; 0x3f
 8001c4a:	dc3d      	bgt.n	8001cc8 <ST7565_DrawFilledRectangle+0xaa>
	
	// Check width and height
	if ((x + w) >= SCREEN_WIDTH)  w = SCREEN_WIDTH  - x;
 8001c4c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001c50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001c54:	4413      	add	r3, r2
 8001c56:	2b7f      	cmp	r3, #127	; 0x7f
 8001c58:	dd04      	ble.n	8001c64 <ST7565_DrawFilledRectangle+0x46>
 8001c5a:	88fb      	ldrh	r3, [r7, #6]
 8001c5c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	807b      	strh	r3, [r7, #2]
	if ((y + h) >= SCREEN_HEIGHT) h = SCREEN_HEIGHT - y;
 8001c64:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001c68:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	2b3f      	cmp	r3, #63	; 0x3f
 8001c70:	dd04      	ble.n	8001c7c <ST7565_DrawFilledRectangle+0x5e>
 8001c72:	88bb      	ldrh	r3, [r7, #4]
 8001c74:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	803b      	strh	r3, [r7, #0]
	
	for (i = 0; i <= h; i++) ST7565_DrawLine(x, y + i, x + w, y + i, c);
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	73fb      	strb	r3, [r7, #15]
 8001c80:	e01c      	b.n	8001cbc <ST7565_DrawFilledRectangle+0x9e>
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	88bb      	ldrh	r3, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	b219      	sxth	r1, r3
 8001c8e:	88fa      	ldrh	r2, [r7, #6]
 8001c90:	887b      	ldrh	r3, [r7, #2]
 8001c92:	4413      	add	r3, r2
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	b21c      	sxth	r4, r3
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	88bb      	ldrh	r3, [r7, #4]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	b21a      	sxth	r2, r3
 8001ca4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001ca8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	4622      	mov	r2, r4
 8001cb2:	f7ff fe15 	bl	80018e0 <ST7565_DrawLine>
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	73fb      	strb	r3, [r7, #15]
 8001cbc:	7bfa      	ldrb	r2, [r7, #15]
 8001cbe:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	dddd      	ble.n	8001c82 <ST7565_DrawFilledRectangle+0x64>
 8001cc6:	e000      	b.n	8001cca <ST7565_DrawFilledRectangle+0xac>
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001cc8:	bf00      	nop
}
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd90      	pop	{r4, r7, pc}

08001cd0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001cd4:	f3bf 8f4f 	dsb	sy
}
 8001cd8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <__NVIC_SystemReset+0x24>)
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001ce2:	4904      	ldr	r1, [pc, #16]	; (8001cf4 <__NVIC_SystemReset+0x24>)
 8001ce4:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <__NVIC_SystemReset+0x28>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001cea:	f3bf 8f4f 	dsb	sy
}
 8001cee:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001cf0:	bf00      	nop
 8001cf2:	e7fd      	b.n	8001cf0 <__NVIC_SystemReset+0x20>
 8001cf4:	e000ed00 	.word	0xe000ed00
 8001cf8:	05fa0004 	.word	0x05fa0004

08001cfc <showCfg>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//------------------------------------------------------------------------------------------
void showCfg()
{
 8001cfc:	b5b0      	push	{r4, r5, r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af04      	add	r7, sp, #16
	*strf = '\0';
 8001d02:	4b20      	ldr	r3, [pc, #128]	; (8001d84 <showCfg+0x88>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_LIST; i++) {
 8001d08:	2300      	movs	r3, #0
 8001d0a:	607b      	str	r3, [r7, #4]
 8001d0c:	e02d      	b.n	8001d6a <showCfg+0x6e>
		sprintf(strf+strlen(strf), "%u:%.1f:%s\r\n", list[i].band, list[i].freq, list[i].name);
 8001d0e:	481d      	ldr	r0, [pc, #116]	; (8001d84 <showCfg+0x88>)
 8001d10:	f7fe fa5e 	bl	80001d0 <strlen>
 8001d14:	4603      	mov	r3, r0
 8001d16:	4a1b      	ldr	r2, [pc, #108]	; (8001d84 <showCfg+0x88>)
 8001d18:	189c      	adds	r4, r3, r2
 8001d1a:	491b      	ldr	r1, [pc, #108]	; (8001d88 <showCfg+0x8c>)
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	4413      	add	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	440b      	add	r3, r1
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	461d      	mov	r5, r3
 8001d2c:	4916      	ldr	r1, [pc, #88]	; (8001d88 <showCfg+0x8c>)
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	4613      	mov	r3, r2
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	4413      	add	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	440b      	add	r3, r1
 8001d3a:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7fe fc02 	bl	8000548 <__aeabi_f2d>
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	4613      	mov	r3, r2
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	4413      	add	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4a0e      	ldr	r2, [pc, #56]	; (8001d88 <showCfg+0x8c>)
 8001d50:	4413      	add	r3, r2
 8001d52:	3305      	adds	r3, #5
 8001d54:	9302      	str	r3, [sp, #8]
 8001d56:	e9cd 0100 	strd	r0, r1, [sp]
 8001d5a:	462a      	mov	r2, r5
 8001d5c:	490b      	ldr	r1, [pc, #44]	; (8001d8c <showCfg+0x90>)
 8001d5e:	4620      	mov	r0, r4
 8001d60:	f00c ff10 	bl	800eb84 <siprintf>
	for (int i = 0; i < MAX_LIST; i++) {
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3301      	adds	r3, #1
 8001d68:	607b      	str	r3, [r7, #4]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b18      	cmp	r3, #24
 8001d6e:	ddce      	ble.n	8001d0e <showCfg+0x12>
	}
	Report(0, "%s", strf);
 8001d70:	4a04      	ldr	r2, [pc, #16]	; (8001d84 <showCfg+0x88>)
 8001d72:	4907      	ldr	r1, [pc, #28]	; (8001d90 <showCfg+0x94>)
 8001d74:	2000      	movs	r0, #0
 8001d76:	f002 f903 	bl	8003f80 <Report>
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bdb0      	pop	{r4, r5, r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20001460 	.word	0x20001460
 8001d88:	20002cc0 	.word	0x20002cc0
 8001d8c:	080129d4 	.word	0x080129d4
 8001d90:	080129e4 	.word	0x080129e4

08001d94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d98:	b0c2      	sub	sp, #264	; 0x108
 8001d9a:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d9c:	f004 fb59 	bl	8006452 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001da0:	f001 f9de 	bl	8003160 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001da4:	f001 fc16 	bl	80035d4 <MX_GPIO_Init>
  MX_TIM4_Init();
 8001da8:	f001 fb44 	bl	8003434 <MX_TIM4_Init>
  MX_DMA_Init();
 8001dac:	f001 fbc0 	bl	8003530 <MX_DMA_Init>
  MX_RTC_Init();
 8001db0:	f001 fa68 	bl	8003284 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8001db4:	f001 fb8c 	bl	80034d0 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001db8:	f001 fafe 	bl	80033b8 <MX_SPI2_Init>
  MX_SPI1_Init();
 8001dbc:	f001 fabe 	bl	800333c <MX_SPI1_Init>
  MX_I2C1_Init();
 8001dc0:	f001 fa20 	bl	8003204 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  if (HAL_TIM_Base_Start_IT(tikPort) != HAL_OK) devError |= devTIK;
 8001dc4:	4b5c      	ldr	r3, [pc, #368]	; (8001f38 <main+0x1a4>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f00a f8c5 	bl	800bf58 <HAL_TIM_Base_Start_IT>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d006      	beq.n	8001de2 <main+0x4e>
 8001dd4:	4b59      	ldr	r3, [pc, #356]	; (8001f3c <main+0x1a8>)
 8001dd6:	881b      	ldrh	r3, [r3, #0]
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	4b57      	ldr	r3, [pc, #348]	; (8001f3c <main+0x1a8>)
 8001de0:	801a      	strh	r2, [r3, #0]

  for (int8_t i = 0; i < 4; i++) {
 8001de2:	2300      	movs	r3, #0
 8001de4:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8001de8:	e012      	b.n	8001e10 <main+0x7c>
	  errLedOn(true);
 8001dea:	2001      	movs	r0, #1
 8001dec:	f001 ffa8 	bl	8003d40 <errLedOn>
	  HAL_Delay(150);
 8001df0:	2096      	movs	r0, #150	; 0x96
 8001df2:	f004 fba3 	bl	800653c <HAL_Delay>
	  errLedOn(false);
 8001df6:	2000      	movs	r0, #0
 8001df8:	f001 ffa2 	bl	8003d40 <errLedOn>
	  HAL_Delay(150);
 8001dfc:	2096      	movs	r0, #150	; 0x96
 8001dfe:	f004 fb9d 	bl	800653c <HAL_Delay>
  for (int8_t i = 0; i < 4; i++) {
 8001e02:	f997 30e7 	ldrsb.w	r3, [r7, #231]	; 0xe7
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	3301      	adds	r3, #1
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8001e10:	f997 30e7 	ldrsb.w	r3, [r7, #231]	; 0xe7
 8001e14:	2b03      	cmp	r3, #3
 8001e16:	dde8      	ble.n	8001dea <main+0x56>
  }

  if (HAL_UART_Receive_IT(cmdPort, &rxByte, 1) != HAL_OK) devError |= devUART;
 8001e18:	4b49      	ldr	r3, [pc, #292]	; (8001f40 <main+0x1ac>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	4949      	ldr	r1, [pc, #292]	; (8001f44 <main+0x1b0>)
 8001e20:	4618      	mov	r0, r3
 8001e22:	f00a fd71 	bl	800c908 <HAL_UART_Receive_IT>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d006      	beq.n	8001e3a <main+0xa6>
 8001e2c:	4b43      	ldr	r3, [pc, #268]	; (8001f3c <main+0x1a8>)
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	f043 0302 	orr.w	r3, r3, #2
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	4b41      	ldr	r3, [pc, #260]	; (8001f3c <main+0x1a8>)
 8001e38:	801a      	strh	r2, [r3, #0]

  set_Date(epoch);
 8001e3a:	4b43      	ldr	r3, [pc, #268]	; (8001f48 <main+0x1b4>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f001 ffa4 	bl	8003d8c <set_Date>

  HAL_Delay(150);
 8001e44:	2096      	movs	r0, #150	; 0x96
 8001e46:	f004 fb79 	bl	800653c <HAL_Delay>

  Report(1, "[que:%u] Start application ver.%s\r\n", cntEvt, ver);
 8001e4a:	4b40      	ldr	r3, [pc, #256]	; (8001f4c <main+0x1b8>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	461a      	mov	r2, r3
 8001e52:	4b3f      	ldr	r3, [pc, #252]	; (8001f50 <main+0x1bc>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	493f      	ldr	r1, [pc, #252]	; (8001f54 <main+0x1c0>)
 8001e58:	2001      	movs	r0, #1
 8001e5a:	f002 f891 	bl	8003f80 <Report>

#ifdef SET_W25FLASH
    chipPresent = W25qxx_Init();
 8001e5e:	f003 fe7f 	bl	8005b60 <W25qxx_Init>
 8001e62:	4603      	mov	r3, r0
 8001e64:	461a      	mov	r2, r3
 8001e66:	4b3c      	ldr	r3, [pc, #240]	; (8001f58 <main+0x1c4>)
 8001e68:	701a      	strb	r2, [r3, #0]
    uint32_t cid = W25qxx_getChipID();
 8001e6a:	f003 ff33 	bl	8005cd4 <W25qxx_getChipID>
 8001e6e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
    if ( chipPresent && ((cid >= W25Q10) && (cid <= W25Q128)) ) validChipID = true;
 8001e72:	4b39      	ldr	r3, [pc, #228]	; (8001f58 <main+0x1c4>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00a      	beq.n	8001e90 <main+0xfc>
 8001e7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d006      	beq.n	8001e90 <main+0xfc>
 8001e82:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e86:	2b08      	cmp	r3, #8
 8001e88:	d802      	bhi.n	8001e90 <main+0xfc>
 8001e8a:	4b34      	ldr	r3, [pc, #208]	; (8001f5c <main+0x1c8>)
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	701a      	strb	r2, [r3, #0]
    list_sector = W25qxx_getPageSize() << 1;
 8001e90:	f003 ff44 	bl	8005d1c <W25qxx_getPageSize>
 8001e94:	4603      	mov	r3, r0
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4b31      	ldr	r3, [pc, #196]	; (8001f60 <main+0x1cc>)
 8001e9c:	601a      	str	r2, [r3, #0]
    //
    listSize = sizeof(rec_t) * MAX_LIST;
 8001e9e:	4b31      	ldr	r3, [pc, #196]	; (8001f64 <main+0x1d0>)
 8001ea0:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001ea4:	801a      	strh	r2, [r3, #0]
    memset((uint8_t *)&list[0].band, 0, listSize);
 8001ea6:	4b2f      	ldr	r3, [pc, #188]	; (8001f64 <main+0x1d0>)
 8001ea8:	881b      	ldrh	r3, [r3, #0]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	2100      	movs	r1, #0
 8001eae:	482e      	ldr	r0, [pc, #184]	; (8001f68 <main+0x1d4>)
 8001eb0:	f00c f9f6 	bl	800e2a0 <memset>
    //
    cfgSector = W25qxx_getSectorCount() - 1;
 8001eb4:	f003 ff1a 	bl	8005cec <W25qxx_getSectorCount>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	4a2b      	ldr	r2, [pc, #172]	; (8001f6c <main+0x1d8>)
 8001ebe:	6013      	str	r3, [r2, #0]
    if (W25qxx_IsEmptySector(cfgSector, 0, listSize)) {//sector is empty -> need write data to sector
 8001ec0:	4b2a      	ldr	r3, [pc, #168]	; (8001f6c <main+0x1d8>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a27      	ldr	r2, [pc, #156]	; (8001f64 <main+0x1d0>)
 8001ec6:	8812      	ldrh	r2, [r2, #0]
 8001ec8:	2100      	movs	r1, #0
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f003 ff90 	bl	8005df0 <W25qxx_IsEmptySector>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d017      	beq.n	8001f06 <main+0x172>
    	if (!(devError & devSPI)) {
 8001ed6:	4b19      	ldr	r3, [pc, #100]	; (8001f3c <main+0x1a8>)
 8001ed8:	881b      	ldrh	r3, [r3, #0]
 8001eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d153      	bne.n	8001f8a <main+0x1f6>
    		W25qxx_WriteSector((uint8_t *)&def_list[0].band, cfgSector, 0, listSize);
 8001ee2:	4b22      	ldr	r3, [pc, #136]	; (8001f6c <main+0x1d8>)
 8001ee4:	6819      	ldr	r1, [r3, #0]
 8001ee6:	4b1f      	ldr	r3, [pc, #124]	; (8001f64 <main+0x1d0>)
 8001ee8:	881b      	ldrh	r3, [r3, #0]
 8001eea:	2200      	movs	r2, #0
 8001eec:	4820      	ldr	r0, [pc, #128]	; (8001f70 <main+0x1dc>)
 8001eee:	f004 f8f3 	bl	80060d8 <W25qxx_WriteSector>
    		Report(1, "Writen cfg_stations_data (%lu bytes) to cfgSector #%lu\r\n", listSize, cfgSector);
 8001ef2:	4b1c      	ldr	r3, [pc, #112]	; (8001f64 <main+0x1d0>)
 8001ef4:	881b      	ldrh	r3, [r3, #0]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	4b1c      	ldr	r3, [pc, #112]	; (8001f6c <main+0x1d8>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	491d      	ldr	r1, [pc, #116]	; (8001f74 <main+0x1e0>)
 8001efe:	2001      	movs	r0, #1
 8001f00:	f002 f83e 	bl	8003f80 <Report>
 8001f04:	e041      	b.n	8001f8a <main+0x1f6>
      	}
    } else {//in sector	present any data
    	if (!(devError & devSPI)) {
 8001f06:	4b0d      	ldr	r3, [pc, #52]	; (8001f3c <main+0x1a8>)
 8001f08:	881b      	ldrh	r3, [r3, #0]
 8001f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d134      	bne.n	8001f7c <main+0x1e8>
    		W25qxx_ReadSector((uint8_t *)&list[0].band, cfgSector, 0, listSize);
 8001f12:	4b16      	ldr	r3, [pc, #88]	; (8001f6c <main+0x1d8>)
 8001f14:	6819      	ldr	r1, [r3, #0]
 8001f16:	4b13      	ldr	r3, [pc, #76]	; (8001f64 <main+0x1d0>)
 8001f18:	881b      	ldrh	r3, [r3, #0]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	4812      	ldr	r0, [pc, #72]	; (8001f68 <main+0x1d4>)
 8001f1e:	f004 fa03 	bl	8006328 <W25qxx_ReadSector>
    		Report(1, "Readed cfg_stations_data (%lu bytes) from cfgSector #%lu\r\n", listSize, cfgSector);
 8001f22:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <main+0x1d0>)
 8001f24:	881b      	ldrh	r3, [r3, #0]
 8001f26:	461a      	mov	r2, r3
 8001f28:	4b10      	ldr	r3, [pc, #64]	; (8001f6c <main+0x1d8>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4912      	ldr	r1, [pc, #72]	; (8001f78 <main+0x1e4>)
 8001f2e:	2001      	movs	r0, #1
 8001f30:	f002 f826 	bl	8003f80 <Report>
 8001f34:	e029      	b.n	8001f8a <main+0x1f6>
 8001f36:	bf00      	nop
 8001f38:	20000008 	.word	0x20000008
 8001f3c:	20001860 	.word	0x20001860
 8001f40:	20000010 	.word	0x20000010
 8001f44:	20001870 	.word	0x20001870
 8001f48:	20000018 	.word	0x20000018
 8001f4c:	20001c7c 	.word	0x20001c7c
 8001f50:	20000004 	.word	0x20000004
 8001f54:	080129e8 	.word	0x080129e8
 8001f58:	20002c94 	.word	0x20002c94
 8001f5c:	20002c95 	.word	0x20002c95
 8001f60:	20001c88 	.word	0x20001c88
 8001f64:	20003044 	.word	0x20003044
 8001f68:	20002cc0 	.word	0x20002cc0
 8001f6c:	20002ca0 	.word	0x20002ca0
 8001f70:	08013a4c 	.word	0x08013a4c
 8001f74:	08012a0c 	.word	0x08012a0c
 8001f78:	08012a48 	.word	0x08012a48
      	} else {
      		memcpy((uint8_t *)&list[0].band, (uint8_t *)&def_list[0].band, listSize);
 8001f7c:	4ba8      	ldr	r3, [pc, #672]	; (8002220 <main+0x48c>)
 8001f7e:	881b      	ldrh	r3, [r3, #0]
 8001f80:	461a      	mov	r2, r3
 8001f82:	49a8      	ldr	r1, [pc, #672]	; (8002224 <main+0x490>)
 8001f84:	48a8      	ldr	r0, [pc, #672]	; (8002228 <main+0x494>)
 8001f86:	f00c f97d 	bl	800e284 <memcpy>
#endif


#ifdef SET_RDA_CHIP

    rdaID = rda5807_init(&Freq);
 8001f8a:	48a8      	ldr	r0, [pc, #672]	; (800222c <main+0x498>)
 8001f8c:	f002 fbf0 	bl	8004770 <rda5807_init>
 8001f90:	4603      	mov	r3, r0
 8001f92:	461a      	mov	r2, r3
 8001f94:	4ba6      	ldr	r3, [pc, #664]	; (8002230 <main+0x49c>)
 8001f96:	701a      	strb	r2, [r3, #0]
    RSSI = rda5807_rssi();
 8001f98:	f002 fc58 	bl	800484c <rda5807_rssi>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	4ba4      	ldr	r3, [pc, #656]	; (8002234 <main+0x4a0>)
 8001fa2:	801a      	strh	r2, [r3, #0]
    rda5807_SetVolume(Volume);
 8001fa4:	4ba4      	ldr	r3, [pc, #656]	; (8002238 <main+0x4a4>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f002 fe2d 	bl	8004c08 <rda5807_SetVolume>
    rda5807_SetBassBoost(BassBoost);
 8001fae:	4ba3      	ldr	r3, [pc, #652]	; (800223c <main+0x4a8>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f002 fe70 	bl	8004c98 <rda5807_SetBassBoost>
    stereo = rda5807_Get_StereoMonoFlag();
 8001fb8:	f002 ff84 	bl	8004ec4 <rda5807_Get_StereoMonoFlag>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	4b9f      	ldr	r3, [pc, #636]	; (8002240 <main+0x4ac>)
 8001fc2:	701a      	strb	r2, [r3, #0]
    Chan = rda5807_Get_Channel();
 8001fc4:	f002 ff96 	bl	8004ef4 <rda5807_Get_Channel>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	461a      	mov	r2, r3
 8001fcc:	4b9d      	ldr	r3, [pc, #628]	; (8002244 <main+0x4b0>)
 8001fce:	801a      	strh	r2, [r3, #0]
#endif

#ifdef SET_DISPLAY

	#ifdef FONT_6x8
  		FontDef_t Font_6x8 = { 6, 8, Font6x8 };
 8001fd0:	4a9d      	ldr	r2, [pc, #628]	; (8002248 <main+0x4b4>)
 8001fd2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001fd6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fda:	6018      	str	r0, [r3, #0]
 8001fdc:	3304      	adds	r3, #4
 8001fde:	8019      	strh	r1, [r3, #0]
  		lfnt = &Font_6x8;
 8001fe0:	4a9a      	ldr	r2, [pc, #616]	; (800224c <main+0x4b8>)
 8001fe2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001fe6:	6013      	str	r3, [r2, #0]
	#endif


  	uint16_t lin1 = 1;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
  	uint16_t lin2 = lin1 + Font_6x8.FontHeight;//chipID...
 8001fee:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001ff8:	4413      	add	r3, r2
 8001ffa:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
  	uint16_t lin3 = lin2 + Font_6x8.FontHeight + 1;//Band...
 8001ffe:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8002002:	b29a      	uxth	r2, r3
 8002004:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8002008:	4413      	add	r3, r2
 800200a:	b29b      	uxth	r3, r3
 800200c:	3301      	adds	r3, #1
 800200e:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
  	uint16_t lin4 = lin3 + Font_6x8.FontHeight + 1;//Volume...//Freq...
 8002012:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8002016:	b29a      	uxth	r2, r3
 8002018:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 800201c:	4413      	add	r3, r2
 800201e:	b29b      	uxth	r3, r3
 8002020:	3301      	adds	r3, #1
 8002022:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
  	uint16_t lin5 = lin4 + Font_6x8.FontHeight + 1;//Freq...//Volume...
 8002026:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 800202a:	b29a      	uxth	r2, r3
 800202c:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8002030:	4413      	add	r3, r2
 8002032:	b29b      	uxth	r3, r3
 8002034:	3301      	adds	r3, #1
 8002036:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
  	uint16_t lin6 = lin5 + Font_6x8.FontHeight + 1;//Station
 800203a:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 800203e:	b29a      	uxth	r2, r3
 8002040:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8002044:	4413      	add	r3, r2
 8002046:	b29b      	uxth	r3, r3
 8002048:	3301      	adds	r3, #1
 800204a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
  	char st[64];
  	char sta[32];
  	char stb[32];

  	ST7565_Reset();
 800204e:	f7ff f83b 	bl	80010c8 <ST7565_Reset>
  	ST7565_Init();
 8002052:	f7ff f951 	bl	80012f8 <ST7565_Init>

  	ST7565_CMD_DISPLAY(CMD_DISPLAY_ON);
 8002056:	20af      	movs	r0, #175	; 0xaf
 8002058:	f7ff f968 	bl	800132c <ST7565_CMD_DISPLAY>

    int dl = sprintf(tmp, "Ver.%s", ver);
 800205c:	4b7c      	ldr	r3, [pc, #496]	; (8002250 <main+0x4bc>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	461a      	mov	r2, r3
 8002062:	497c      	ldr	r1, [pc, #496]	; (8002254 <main+0x4c0>)
 8002064:	487c      	ldr	r0, [pc, #496]	; (8002258 <main+0x4c4>)
 8002066:	f00c fd8d 	bl	800eb84 <siprintf>
 800206a:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
    uint16_t x = ((SCREEN_WIDTH - (Font_6x8.FontWidth * dl)) >> 1) & 0x7f;
 800206e:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8002072:	461a      	mov	r2, r3
 8002074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002078:	fb02 f303 	mul.w	r3, r2, r3
 800207c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002080:	105b      	asrs	r3, r3, #1
 8002082:	b29b      	uxth	r3, r3
 8002084:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002088:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
    ST7565_Print(x, SCREEN_HEIGHT - Font_6x8.FontHeight, tmp, &Font_6x8, 1, PIX_ON);//печатаем надпись с указаным шрифтом и цветом(PIX_ON-белый, PIX_OFF-черный)
 800208c:	f9b7 00b2 	ldrsh.w	r0, [r7, #178]	; 0xb2
 8002090:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8002094:	b29b      	uxth	r3, r3
 8002096:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800209a:	b29b      	uxth	r3, r3
 800209c:	b219      	sxth	r1, r3
 800209e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80020a2:	2201      	movs	r2, #1
 80020a4:	9201      	str	r2, [sp, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	9200      	str	r2, [sp, #0]
 80020aa:	4a6b      	ldr	r2, [pc, #428]	; (8002258 <main+0x4c4>)
 80020ac:	f7ff fb5e 	bl	800176c <ST7565_Print>

	#ifdef SET_RDA_CHIP
    	int il = sprintf(st, "RDA5807 chipID:0x%x", rdaID);
 80020b0:	4b5f      	ldr	r3, [pc, #380]	; (8002230 <main+0x49c>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	461a      	mov	r2, r3
 80020b6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80020ba:	4968      	ldr	r1, [pc, #416]	; (800225c <main+0x4c8>)
 80020bc:	4618      	mov	r0, r3
 80020be:	f00c fd61 	bl	800eb84 <siprintf>
 80020c2:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    	uint16_t xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * il)) >> 1) & 0x7f;
 80020c6:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80020ca:	461a      	mov	r2, r3
 80020cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80020d0:	fb02 f303 	mul.w	r3, r2, r3
 80020d4:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80020d8:	105b      	asrs	r3, r3, #1
 80020da:	b29b      	uxth	r3, r3
 80020dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020e0:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    	if (!xf) xf = 1;
 80020e4:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d102      	bne.n	80020f2 <main+0x35e>
 80020ec:	2301      	movs	r3, #1
 80020ee:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    	ST7565_Print(xf, lin2, st, &Font_6x8, 1, PIX_ON);
 80020f2:	f9b7 00da 	ldrsh.w	r0, [r7, #218]	; 0xda
 80020f6:	f9b7 10bc 	ldrsh.w	r1, [r7, #188]	; 0xbc
 80020fa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80020fe:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002102:	2401      	movs	r4, #1
 8002104:	9401      	str	r4, [sp, #4]
 8002106:	2401      	movs	r4, #1
 8002108:	9400      	str	r4, [sp, #0]
 800210a:	f7ff fb2f 	bl	800176c <ST7565_Print>

    	int it = sprintf(stb, "FM Band:%s", allBands[Band]);//(uint16_t)lBand, (uint16_t)rBand);
 800210e:	4b54      	ldr	r3, [pc, #336]	; (8002260 <main+0x4cc>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	461a      	mov	r2, r3
 8002114:	4b53      	ldr	r3, [pc, #332]	; (8002264 <main+0x4d0>)
 8002116:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800211a:	f107 0310 	add.w	r3, r7, #16
 800211e:	4952      	ldr	r1, [pc, #328]	; (8002268 <main+0x4d4>)
 8002120:	4618      	mov	r0, r3
 8002122:	f00c fd2f 	bl	800eb84 <siprintf>
 8002126:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
    	int lit = it;
 800212a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800212e:	60fb      	str	r3, [r7, #12]
    	xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * it)) >> 1) & 0x7f;
 8002130:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8002134:	461a      	mov	r2, r3
 8002136:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800213a:	fb02 f303 	mul.w	r3, r2, r3
 800213e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002142:	105b      	asrs	r3, r3, #1
 8002144:	b29b      	uxth	r3, r3
 8002146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800214a:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 800214e:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <main+0x3ca>
 8002156:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 800215a:	2b7d      	cmp	r3, #125	; 0x7d
 800215c:	d902      	bls.n	8002164 <main+0x3d0>
 800215e:	2301      	movs	r3, #1
 8002160:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    	ST7565_Print(xf, lin3, stb, &Font_6x8, 1, PIX_ON);
 8002164:	f9b7 00da 	ldrsh.w	r0, [r7, #218]	; 0xda
 8002168:	f9b7 10ba 	ldrsh.w	r1, [r7, #186]	; 0xba
 800216c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002170:	f107 0210 	add.w	r2, r7, #16
 8002174:	2401      	movs	r4, #1
 8002176:	9401      	str	r4, [sp, #4]
 8002178:	2401      	movs	r4, #1
 800217a:	9400      	str	r4, [sp, #0]
 800217c:	f7ff faf6 	bl	800176c <ST7565_Print>

    	int im = sprintf(st, "Bass:%u Vol:%u", BassBoost, Volume);
 8002180:	4b2e      	ldr	r3, [pc, #184]	; (800223c <main+0x4a8>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	461a      	mov	r2, r3
 8002186:	4b2c      	ldr	r3, [pc, #176]	; (8002238 <main+0x4a4>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800218e:	4937      	ldr	r1, [pc, #220]	; (800226c <main+0x4d8>)
 8002190:	f00c fcf8 	bl	800eb84 <siprintf>
 8002194:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
    	int lim = im;
 8002198:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800219c:	60bb      	str	r3, [r7, #8]
    	xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * im)) >> 1) & 0x7f;
 800219e:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80021a2:	461a      	mov	r2, r3
 80021a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80021a8:	fb02 f303 	mul.w	r3, r2, r3
 80021ac:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80021b0:	105b      	asrs	r3, r3, #1
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021b8:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 80021bc:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d003      	beq.n	80021cc <main+0x438>
 80021c4:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 80021c8:	2b7d      	cmp	r3, #125	; 0x7d
 80021ca:	d902      	bls.n	80021d2 <main+0x43e>
 80021cc:	2301      	movs	r3, #1
 80021ce:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    	ST7565_Print(xf, lin4, st, &Font_6x8, 1, PIX_ON);
 80021d2:	f9b7 00da 	ldrsh.w	r0, [r7, #218]	; 0xda
 80021d6:	f9b7 10b8 	ldrsh.w	r1, [r7, #184]	; 0xb8
 80021da:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80021de:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80021e2:	2401      	movs	r4, #1
 80021e4:	9401      	str	r4, [sp, #4]
 80021e6:	2401      	movs	r4, #1
 80021e8:	9400      	str	r4, [sp, #0]
 80021ea:	f7ff fabf 	bl	800176c <ST7565_Print>

    	if (stereo)
 80021ee:	4b14      	ldr	r3, [pc, #80]	; (8002240 <main+0x4ac>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d03e      	beq.n	8002274 <main+0x4e0>
    		il = sprintf(st, "Rssi:%u Freq:%.1f S", RSSI, Freq);
 80021f6:	4b0f      	ldr	r3, [pc, #60]	; (8002234 <main+0x4a0>)
 80021f8:	881b      	ldrh	r3, [r3, #0]
 80021fa:	461c      	mov	r4, r3
 80021fc:	4b0b      	ldr	r3, [pc, #44]	; (800222c <main+0x498>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f7fe f9a1 	bl	8000548 <__aeabi_f2d>
 8002206:	4602      	mov	r2, r0
 8002208:	460b      	mov	r3, r1
 800220a:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800220e:	e9cd 2300 	strd	r2, r3, [sp]
 8002212:	4622      	mov	r2, r4
 8002214:	4916      	ldr	r1, [pc, #88]	; (8002270 <main+0x4dc>)
 8002216:	f00c fcb5 	bl	800eb84 <siprintf>
 800221a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800221e:	e03d      	b.n	800229c <main+0x508>
 8002220:	20003044 	.word	0x20003044
 8002224:	08013a4c 	.word	0x08013a4c
 8002228:	20002cc0 	.word	0x20002cc0
 800222c:	200001cc 	.word	0x200001cc
 8002230:	20002cb8 	.word	0x20002cb8
 8002234:	20002cb6 	.word	0x20002cb6
 8002238:	200001d7 	.word	0x200001d7
 800223c:	20002cba 	.word	0x20002cba
 8002240:	20002cbc 	.word	0x20002cbc
 8002244:	20002cb4 	.word	0x20002cb4
 8002248:	08012e04 	.word	0x08012e04
 800224c:	20002ca8 	.word	0x20002ca8
 8002250:	20000004 	.word	0x20000004
 8002254:	08012a84 	.word	0x08012a84
 8002258:	20000fe0 	.word	0x20000fe0
 800225c:	08012a8c 	.word	0x08012a8c
 8002260:	200001d4 	.word	0x200001d4
 8002264:	200001e0 	.word	0x200001e0
 8002268:	08012aa0 	.word	0x08012aa0
 800226c:	08012aac 	.word	0x08012aac
 8002270:	08012abc 	.word	0x08012abc
    	else
    		il = sprintf(st, "Rssi:%u Freq:%.1f", RSSI, Freq);
 8002274:	4bb0      	ldr	r3, [pc, #704]	; (8002538 <main+0x7a4>)
 8002276:	881b      	ldrh	r3, [r3, #0]
 8002278:	461c      	mov	r4, r3
 800227a:	4bb0      	ldr	r3, [pc, #704]	; (800253c <main+0x7a8>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f7fe f962 	bl	8000548 <__aeabi_f2d>
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800228c:	e9cd 2300 	strd	r2, r3, [sp]
 8002290:	4622      	mov	r2, r4
 8002292:	49ab      	ldr	r1, [pc, #684]	; (8002540 <main+0x7ac>)
 8002294:	f00c fc76 	bl	800eb84 <siprintf>
 8002298:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    	int lil = il;
 800229c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022a0:	607b      	str	r3, [r7, #4]
    	xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * il)) >> 1) & 0x7f;
 80022a2:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80022a6:	461a      	mov	r2, r3
 80022a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022ac:	fb02 f303 	mul.w	r3, r2, r3
 80022b0:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80022b4:	105b      	asrs	r3, r3, #1
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022bc:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 80022c0:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d003      	beq.n	80022d0 <main+0x53c>
 80022c8:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 80022cc:	2b7d      	cmp	r3, #125	; 0x7d
 80022ce:	d902      	bls.n	80022d6 <main+0x542>
 80022d0:	2301      	movs	r3, #1
 80022d2:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    	ST7565_Print(xf, lin5, st, &Font_6x8, 1, PIX_ON);
 80022d6:	f9b7 00da 	ldrsh.w	r0, [r7, #218]	; 0xda
 80022da:	f9b7 10b6 	ldrsh.w	r1, [r7, #182]	; 0xb6
 80022de:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80022e2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80022e6:	2401      	movs	r4, #1
 80022e8:	9401      	str	r4, [sp, #4]
 80022ea:	2401      	movs	r4, #1
 80022ec:	9400      	str	r4, [sp, #0]
 80022ee:	f7ff fa3d 	bl	800176c <ST7565_Print>

    	int ia = sprintf(sta, "%s", nameStation(Freq));
 80022f2:	4b92      	ldr	r3, [pc, #584]	; (800253c <main+0x7a8>)
 80022f4:	edd3 7a00 	vldr	s15, [r3]
 80022f8:	eeb0 0a67 	vmov.f32	s0, s15
 80022fc:	f001 fb88 	bl	8003a10 <nameStation>
 8002300:	4602      	mov	r2, r0
 8002302:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002306:	498f      	ldr	r1, [pc, #572]	; (8002544 <main+0x7b0>)
 8002308:	4618      	mov	r0, r3
 800230a:	f00c fc3b 	bl	800eb84 <siprintf>
 800230e:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
    	int lia = ia;
 8002312:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002316:	603b      	str	r3, [r7, #0]
    	xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * ia)) >> 1) & 0x7f;
 8002318:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 800231c:	461a      	mov	r2, r3
 800231e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002322:	fb02 f303 	mul.w	r3, r2, r3
 8002326:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800232a:	105b      	asrs	r3, r3, #1
 800232c:	b29b      	uxth	r3, r3
 800232e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002332:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 8002336:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <main+0x5b2>
 800233e:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 8002342:	2b7d      	cmp	r3, #125	; 0x7d
 8002344:	d902      	bls.n	800234c <main+0x5b8>
 8002346:	2301      	movs	r3, #1
 8002348:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    	ST7565_Print(xf, lin6, sta, &Font_6x8, 1, PIX_ON);
 800234c:	f9b7 00da 	ldrsh.w	r0, [r7, #218]	; 0xda
 8002350:	f9b7 10b4 	ldrsh.w	r1, [r7, #180]	; 0xb4
 8002354:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002358:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800235c:	2401      	movs	r4, #1
 800235e:	9401      	str	r4, [sp, #4]
 8002360:	2401      	movs	r4, #1
 8002362:	9400      	str	r4, [sp, #0]
 8002364:	f7ff fa02 	bl	800176c <ST7565_Print>

    	Report(1, "ChipID:0x%x Chan:%u Freq:%.2f %s RSSI:%u Band:%s Vol:%u BassEn:%u\r\n",
 8002368:	4b77      	ldr	r3, [pc, #476]	; (8002548 <main+0x7b4>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	461e      	mov	r6, r3
 800236e:	4b77      	ldr	r3, [pc, #476]	; (800254c <main+0x7b8>)
 8002370:	881b      	ldrh	r3, [r3, #0]
 8002372:	4698      	mov	r8, r3
 8002374:	4b71      	ldr	r3, [pc, #452]	; (800253c <main+0x7a8>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f7fe f8e5 	bl	8000548 <__aeabi_f2d>
 800237e:	4602      	mov	r2, r0
 8002380:	460b      	mov	r3, r1
 8002382:	496d      	ldr	r1, [pc, #436]	; (8002538 <main+0x7a4>)
 8002384:	8809      	ldrh	r1, [r1, #0]
 8002386:	460c      	mov	r4, r1
 8002388:	4971      	ldr	r1, [pc, #452]	; (8002550 <main+0x7bc>)
 800238a:	7809      	ldrb	r1, [r1, #0]
 800238c:	4608      	mov	r0, r1
 800238e:	4971      	ldr	r1, [pc, #452]	; (8002554 <main+0x7c0>)
 8002390:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8002394:	4870      	ldr	r0, [pc, #448]	; (8002558 <main+0x7c4>)
 8002396:	7800      	ldrb	r0, [r0, #0]
 8002398:	4605      	mov	r5, r0
 800239a:	4870      	ldr	r0, [pc, #448]	; (800255c <main+0x7c8>)
 800239c:	7800      	ldrb	r0, [r0, #0]
 800239e:	9006      	str	r0, [sp, #24]
 80023a0:	9505      	str	r5, [sp, #20]
 80023a2:	9104      	str	r1, [sp, #16]
 80023a4:	9403      	str	r4, [sp, #12]
 80023a6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80023aa:	9102      	str	r1, [sp, #8]
 80023ac:	e9cd 2300 	strd	r2, r3, [sp]
 80023b0:	4643      	mov	r3, r8
 80023b2:	4632      	mov	r2, r6
 80023b4:	496a      	ldr	r1, [pc, #424]	; (8002560 <main+0x7cc>)
 80023b6:	2001      	movs	r0, #1
 80023b8:	f001 fde2 	bl	8003f80 <Report>
    			rdaID, Chan, Freq, sta, RSSI, allBands[Band], Volume, BassBoost);
	#endif

    ST7565_DrawRectangle(0, Font_6x8.FontHeight, SCREEN_WIDTH - 1, SCREEN_HEIGHT - (Font_6x8.FontHeight << 1) - 2, PIX_ON);
 80023bc:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 80023c0:	b219      	sxth	r1, r3
 80023c2:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	f1c3 033e 	rsb	r3, r3, #62	; 0x3e
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	b21b      	sxth	r3, r3
 80023d4:	2201      	movs	r2, #1
 80023d6:	9200      	str	r2, [sp, #0]
 80023d8:	227f      	movs	r2, #127	; 0x7f
 80023da:	2000      	movs	r0, #0
 80023dc:	f7ff fb9d 	bl	8001b1a <ST7565_DrawRectangle>
    ST7565_DrawFilledRectangle(0, 0, SCREEN_WIDTH - 1, Font_6x8.FontHeight, PIX_ON);
 80023e0:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 80023e4:	b21b      	sxth	r3, r3
 80023e6:	2201      	movs	r2, #1
 80023e8:	9200      	str	r2, [sp, #0]
 80023ea:	227f      	movs	r2, #127	; 0x7f
 80023ec:	2100      	movs	r1, #0
 80023ee:	2000      	movs	r0, #0
 80023f0:	f7ff fc15 	bl	8001c1e <ST7565_DrawFilledRectangle>
    ST7565_Update();
 80023f4:	f7ff f80a 	bl	800140c <ST7565_Update>

    startSec = true;
 80023f8:	4b5a      	ldr	r3, [pc, #360]	; (8002564 <main+0x7d0>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	701a      	strb	r2, [r3, #0]

#endif

    uint16_t lastErr = devOK;
 80023fe:	2300      	movs	r3, #0
 8002400:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8

    putEvt(evt_Freq);
 8002404:	200c      	movs	r0, #12
 8002406:	f001 fa51 	bl	80038ac <putEvt>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


    while (!restart) {
 800240a:	f000 be81 	b.w	8003110 <main+0x137c>


#ifdef SET_FIFO_MODE
    	evt = getEvt();
 800240e:	f001 fabf 	bl	8003990 <getEvt>
 8002412:	4603      	mov	r3, r0
 8002414:	4a54      	ldr	r2, [pc, #336]	; (8002568 <main+0x7d4>)
 8002416:	6013      	str	r3, [r2, #0]
    	if (evt != evt_None) {
 8002418:	4b53      	ldr	r3, [pc, #332]	; (8002568 <main+0x7d4>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002420:	f000 85f6 	beq.w	8003010 <main+0x127c>
    		cntEvt = getEvtCount();
 8002424:	f001 fa36 	bl	8003894 <getEvtCount>
 8002428:	4603      	mov	r3, r0
 800242a:	461a      	mov	r2, r3
 800242c:	4b4f      	ldr	r3, [pc, #316]	; (800256c <main+0x7d8>)
 800242e:	701a      	strb	r2, [r3, #0]
    		if (evt != evt_Sec) {
 8002430:	4b4d      	ldr	r3, [pc, #308]	; (8002568 <main+0x7d4>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b08      	cmp	r3, #8
 8002436:	d050      	beq.n	80024da <main+0x746>
    			Report(1, "[que:%u] get event '%s'\r\n", cntEvt, str_cmds[evt]);
 8002438:	4b4c      	ldr	r3, [pc, #304]	; (800256c <main+0x7d8>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	b2db      	uxtb	r3, r3
 800243e:	4619      	mov	r1, r3
 8002440:	4b49      	ldr	r3, [pc, #292]	; (8002568 <main+0x7d4>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a4a      	ldr	r2, [pc, #296]	; (8002570 <main+0x7dc>)
 8002446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244a:	460a      	mov	r2, r1
 800244c:	4949      	ldr	r1, [pc, #292]	; (8002574 <main+0x7e0>)
 800244e:	2001      	movs	r0, #1
 8002450:	f001 fd96 	bl	8003f80 <Report>
#ifdef SET_DISPLAY
    			ST7565_DrawFilledRectangle(0, SCREEN_HEIGHT - Font_6x8.FontHeight, SCREEN_WIDTH - 1, Font_6x8.FontHeight, PIX_OFF);
 8002454:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8002458:	b29b      	uxth	r3, r3
 800245a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800245e:	b29b      	uxth	r3, r3
 8002460:	b219      	sxth	r1, r3
 8002462:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8002466:	b21b      	sxth	r3, r3
 8002468:	2200      	movs	r2, #0
 800246a:	9200      	str	r2, [sp, #0]
 800246c:	227f      	movs	r2, #127	; 0x7f
 800246e:	2000      	movs	r0, #0
 8002470:	f7ff fbd5 	bl	8001c1e <ST7565_DrawFilledRectangle>
    			dl = sprintf(tmp, "evt(%u) : %s", cntEvt, str_cmds[evt]);
 8002474:	4b3d      	ldr	r3, [pc, #244]	; (800256c <main+0x7d8>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	4619      	mov	r1, r3
 800247c:	4b3a      	ldr	r3, [pc, #232]	; (8002568 <main+0x7d4>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a3b      	ldr	r2, [pc, #236]	; (8002570 <main+0x7dc>)
 8002482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002486:	460a      	mov	r2, r1
 8002488:	493b      	ldr	r1, [pc, #236]	; (8002578 <main+0x7e4>)
 800248a:	483c      	ldr	r0, [pc, #240]	; (800257c <main+0x7e8>)
 800248c:	f00c fb7a 	bl	800eb84 <siprintf>
 8002490:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
    			x = ((SCREEN_WIDTH - (Font_6x8.FontWidth * dl)) >> 1) & 0x7f;
 8002494:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8002498:	461a      	mov	r2, r3
 800249a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800249e:	fb02 f303 	mul.w	r3, r2, r3
 80024a2:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80024a6:	105b      	asrs	r3, r3, #1
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024ae:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
    			ST7565_Print(x, SCREEN_HEIGHT - Font_6x8.FontHeight, tmp, &Font_6x8, 1, PIX_ON);//печатаем надпись с указаным шрифтом и цветом(PIX_ON-белый, PIX_OFF-черный)
 80024b2:	f9b7 00b2 	ldrsh.w	r0, [r7, #178]	; 0xb2
 80024b6:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	b219      	sxth	r1, r3
 80024c4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80024c8:	2201      	movs	r2, #1
 80024ca:	9201      	str	r2, [sp, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	9200      	str	r2, [sp, #0]
 80024d0:	4a2a      	ldr	r2, [pc, #168]	; (800257c <main+0x7e8>)
 80024d2:	f7ff f94b 	bl	800176c <ST7565_Print>
    			ST7565_Update();
 80024d6:	f7fe ff99 	bl	800140c <ST7565_Update>
#endif
    		}
    		switch (evt) {
 80024da:	4b23      	ldr	r3, [pc, #140]	; (8002568 <main+0x7d4>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2b12      	cmp	r3, #18
 80024e0:	f200 8586 	bhi.w	8002ff0 <main+0x125c>
 80024e4:	a201      	add	r2, pc, #4	; (adr r2, 80024ec <main+0x758>)
 80024e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ea:	bf00      	nop
 80024ec:	08002d03 	.word	0x08002d03
 80024f0:	08002d51 	.word	0x08002d51
 80024f4:	08002d69 	.word	0x08002d69
 80024f8:	08002d89 	.word	0x08002d89
 80024fc:	08002dfd 	.word	0x08002dfd
 8002500:	08002fa1 	.word	0x08002fa1
 8002504:	08002dfd 	.word	0x08002dfd
 8002508:	08002f1f 	.word	0x08002f1f
 800250c:	08002aad 	.word	0x08002aad
 8002510:	08002a47 	.word	0x08002a47
 8002514:	08002ceb 	.word	0x08002ceb
 8002518:	08002a27 	.word	0x08002a27
 800251c:	080028db 	.word	0x080028db
 8002520:	08002775 	.word	0x08002775
 8002524:	080027ef 	.word	0x080027ef
 8002528:	080026f9 	.word	0x080026f9
 800252c:	08002655 	.word	0x08002655
 8002530:	08002581 	.word	0x08002581
 8002534:	0800264d 	.word	0x0800264d
 8002538:	20002cb6 	.word	0x20002cb6
 800253c:	200001cc 	.word	0x200001cc
 8002540:	08012ad0 	.word	0x08012ad0
 8002544:	080129e4 	.word	0x080129e4
 8002548:	20002cb8 	.word	0x20002cb8
 800254c:	20002cb4 	.word	0x20002cb4
 8002550:	200001d4 	.word	0x200001d4
 8002554:	200001e0 	.word	0x200001e0
 8002558:	200001d7 	.word	0x200001d7
 800255c:	20002cba 	.word	0x20002cba
 8002560:	08012ae4 	.word	0x08012ae4
 8002564:	20002ca4 	.word	0x20002ca4
 8002568:	200001b4 	.word	0x200001b4
 800256c:	20001c7c 	.word	0x20001c7c
 8002570:	20000068 	.word	0x20000068
 8002574:	08012b28 	.word	0x08012b28
 8002578:	08012b44 	.word	0x08012b44
 800257c:	20000fe0 	.word	0x20000fe0
    			case evt_Band:
    				Band = newBand;
 8002580:	4bab      	ldr	r3, [pc, #684]	; (8002830 <main+0xa9c>)
 8002582:	781a      	ldrb	r2, [r3, #0]
 8002584:	4bab      	ldr	r3, [pc, #684]	; (8002834 <main+0xaa0>)
 8002586:	701a      	strb	r2, [r3, #0]
    				if (!rda5807_Set_Band(Band)) {
 8002588:	4baa      	ldr	r3, [pc, #680]	; (8002834 <main+0xaa0>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f002 fcc3 	bl	8004f18 <rda5807_Set_Band>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	f040 8522 	bne.w	8002fde <main+0x124a>
    					sprintf(stb, "FM Band:%s", allBands[Band]);//(uint16_t)lBand, (uint16_t)rBand);
 800259a:	4ba6      	ldr	r3, [pc, #664]	; (8002834 <main+0xaa0>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	461a      	mov	r2, r3
 80025a0:	4ba5      	ldr	r3, [pc, #660]	; (8002838 <main+0xaa4>)
 80025a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80025a6:	f107 0310 	add.w	r3, r7, #16
 80025aa:	49a4      	ldr	r1, [pc, #656]	; (800283c <main+0xaa8>)
 80025ac:	4618      	mov	r0, r3
 80025ae:	f00c fae9 	bl	800eb84 <siprintf>
    					showLine(stb, lin3, &lit, true);
 80025b2:	f107 020c 	add.w	r2, r7, #12
 80025b6:	f8b7 10ba 	ldrh.w	r1, [r7, #186]	; 0xba
 80025ba:	f107 0010 	add.w	r0, r7, #16
 80025be:	2301      	movs	r3, #1
 80025c0:	f001 fb50 	bl	8003c64 <showLine>
    					Report(1, "[que:%u] set new band=%u '%s'\r\n", cntEvt, Band, allBands[Band]);
 80025c4:	4b9e      	ldr	r3, [pc, #632]	; (8002840 <main+0xaac>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	4619      	mov	r1, r3
 80025cc:	4b99      	ldr	r3, [pc, #612]	; (8002834 <main+0xaa0>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	4b98      	ldr	r3, [pc, #608]	; (8002834 <main+0xaa0>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	4b97      	ldr	r3, [pc, #604]	; (8002838 <main+0xaa4>)
 80025da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	4603      	mov	r3, r0
 80025e2:	460a      	mov	r2, r1
 80025e4:	4997      	ldr	r1, [pc, #604]	; (8002844 <main+0xab0>)
 80025e6:	2001      	movs	r0, #1
 80025e8:	f001 fcca 	bl	8003f80 <Report>
    					if (next_evt == evt) {
 80025ec:	4b96      	ldr	r3, [pc, #600]	; (8002848 <main+0xab4>)
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	4b96      	ldr	r3, [pc, #600]	; (800284c <main+0xab8>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d120      	bne.n	800263a <main+0x8a6>
    						if ((Freq < lBand) || (Freq > rBand)) {
 80025f8:	4b95      	ldr	r3, [pc, #596]	; (8002850 <main+0xabc>)
 80025fa:	ed93 7a00 	vldr	s14, [r3]
 80025fe:	4b95      	ldr	r3, [pc, #596]	; (8002854 <main+0xac0>)
 8002600:	edd3 7a00 	vldr	s15, [r3]
 8002604:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800260c:	d40c      	bmi.n	8002628 <main+0x894>
 800260e:	4b90      	ldr	r3, [pc, #576]	; (8002850 <main+0xabc>)
 8002610:	ed93 7a00 	vldr	s14, [r3]
 8002614:	4b90      	ldr	r3, [pc, #576]	; (8002858 <main+0xac4>)
 8002616:	edd3 7a00 	vldr	s15, [r3]
 800261a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800261e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002622:	dc01      	bgt.n	8002628 <main+0x894>
    					} else {
    						next_evt = evt;
    						putEvt(evt_Freq);
    					}
    				}
    			break;
 8002624:	f000 bcdb 	b.w	8002fde <main+0x124a>
    							newFreq = lBand;
 8002628:	4b8a      	ldr	r3, [pc, #552]	; (8002854 <main+0xac0>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a8b      	ldr	r2, [pc, #556]	; (800285c <main+0xac8>)
 800262e:	6013      	str	r3, [r2, #0]
    							putEvt(evt_Freq);
 8002630:	200c      	movs	r0, #12
 8002632:	f001 f93b 	bl	80038ac <putEvt>
    			break;
 8002636:	f000 bcd2 	b.w	8002fde <main+0x124a>
    						next_evt = evt;
 800263a:	4b84      	ldr	r3, [pc, #528]	; (800284c <main+0xab8>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a82      	ldr	r2, [pc, #520]	; (8002848 <main+0xab4>)
 8002640:	6013      	str	r3, [r2, #0]
    						putEvt(evt_Freq);
 8002642:	200c      	movs	r0, #12
 8002644:	f001 f932 	bl	80038ac <putEvt>
    			break;
 8002648:	f000 bcc9 	b.w	8002fde <main+0x124a>
    			case evt_Cfg:
    				showCfg();
 800264c:	f7ff fb56 	bl	8001cfc <showCfg>
    			break;
 8002650:	f000 bcce 	b.w	8002ff0 <main+0x125c>
    			case evt_List:
    				next_evt = evt_Freq;
 8002654:	4b7c      	ldr	r3, [pc, #496]	; (8002848 <main+0xab4>)
 8002656:	220c      	movs	r2, #12
 8002658:	601a      	str	r2, [r3, #0]
    				newFreq = getNextList(Freq, seek_up, &newBand);
 800265a:	4b7d      	ldr	r3, [pc, #500]	; (8002850 <main+0xabc>)
 800265c:	edd3 7a00 	vldr	s15, [r3]
 8002660:	4b7f      	ldr	r3, [pc, #508]	; (8002860 <main+0xacc>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	b2db      	uxtb	r3, r3
 8002666:	4972      	ldr	r1, [pc, #456]	; (8002830 <main+0xa9c>)
 8002668:	4618      	mov	r0, r3
 800266a:	eeb0 0a67 	vmov.f32	s0, s15
 800266e:	f001 fa15 	bl	8003a9c <getNextList>
 8002672:	eef0 7a40 	vmov.f32	s15, s0
 8002676:	4b79      	ldr	r3, [pc, #484]	; (800285c <main+0xac8>)
 8002678:	edc3 7a00 	vstr	s15, [r3]
					if (newBand == Band) {
 800267c:	4b6c      	ldr	r3, [pc, #432]	; (8002830 <main+0xa9c>)
 800267e:	781a      	ldrb	r2, [r3, #0]
 8002680:	4b6c      	ldr	r3, [pc, #432]	; (8002834 <main+0xaa0>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	429a      	cmp	r2, r3
 8002686:	d119      	bne.n	80026bc <main+0x928>
						//next_evt = evt_Freq;
						Report(1, "Band = newBand = %u -> goto set newFreq to %.1f (up = %u)\r\n", newBand, newFreq, seek_up);
 8002688:	4b69      	ldr	r3, [pc, #420]	; (8002830 <main+0xa9c>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	461c      	mov	r4, r3
 800268e:	4b73      	ldr	r3, [pc, #460]	; (800285c <main+0xac8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f7fd ff58 	bl	8000548 <__aeabi_f2d>
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	4970      	ldr	r1, [pc, #448]	; (8002860 <main+0xacc>)
 800269e:	7809      	ldrb	r1, [r1, #0]
 80026a0:	b2c9      	uxtb	r1, r1
 80026a2:	9102      	str	r1, [sp, #8]
 80026a4:	e9cd 2300 	strd	r2, r3, [sp]
 80026a8:	4622      	mov	r2, r4
 80026aa:	496e      	ldr	r1, [pc, #440]	; (8002864 <main+0xad0>)
 80026ac:	2001      	movs	r0, #1
 80026ae:	f001 fc67 	bl	8003f80 <Report>
    					putEvt(evt_Freq);
 80026b2:	200c      	movs	r0, #12
 80026b4:	f001 f8fa 	bl	80038ac <putEvt>
					} else {
						Report(1, "Band = %u -> goto set newBand to %u (newFreq to %.1f up = %u)\r\n", Band, newBand, newFreq, seek_up);
    					putEvt(evt_Band);
					}
    			break;
 80026b8:	f000 bc9a 	b.w	8002ff0 <main+0x125c>
						Report(1, "Band = %u -> goto set newBand to %u (newFreq to %.1f up = %u)\r\n", Band, newBand, newFreq, seek_up);
 80026bc:	4b5d      	ldr	r3, [pc, #372]	; (8002834 <main+0xaa0>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	461c      	mov	r4, r3
 80026c2:	4b5b      	ldr	r3, [pc, #364]	; (8002830 <main+0xa9c>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	461d      	mov	r5, r3
 80026c8:	4b64      	ldr	r3, [pc, #400]	; (800285c <main+0xac8>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7fd ff3b 	bl	8000548 <__aeabi_f2d>
 80026d2:	4602      	mov	r2, r0
 80026d4:	460b      	mov	r3, r1
 80026d6:	4962      	ldr	r1, [pc, #392]	; (8002860 <main+0xacc>)
 80026d8:	7809      	ldrb	r1, [r1, #0]
 80026da:	b2c9      	uxtb	r1, r1
 80026dc:	9102      	str	r1, [sp, #8]
 80026de:	e9cd 2300 	strd	r2, r3, [sp]
 80026e2:	462b      	mov	r3, r5
 80026e4:	4622      	mov	r2, r4
 80026e6:	4960      	ldr	r1, [pc, #384]	; (8002868 <main+0xad4>)
 80026e8:	2001      	movs	r0, #1
 80026ea:	f001 fc49 	bl	8003f80 <Report>
    					putEvt(evt_Band);
 80026ee:	2011      	movs	r0, #17
 80026f0:	f001 f8dc 	bl	80038ac <putEvt>
    			break;
 80026f4:	f000 bc7c 	b.w	8002ff0 <main+0x125c>
    			case evt_Bass:
    				if (newBassBoost != BassBoost) {
 80026f8:	4b5c      	ldr	r3, [pc, #368]	; (800286c <main+0xad8>)
 80026fa:	781a      	ldrb	r2, [r3, #0]
 80026fc:	4b5c      	ldr	r3, [pc, #368]	; (8002870 <main+0xadc>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	429a      	cmp	r2, r3
 8002702:	f000 846e 	beq.w	8002fe2 <main+0x124e>
    					BassBoost = newBassBoost;
 8002706:	4b59      	ldr	r3, [pc, #356]	; (800286c <main+0xad8>)
 8002708:	781a      	ldrb	r2, [r3, #0]
 800270a:	4b59      	ldr	r3, [pc, #356]	; (8002870 <main+0xadc>)
 800270c:	701a      	strb	r2, [r3, #0]
    					rda5807_SetBassBoost(BassBoost);
 800270e:	4b58      	ldr	r3, [pc, #352]	; (8002870 <main+0xadc>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f002 fac0 	bl	8004c98 <rda5807_SetBassBoost>
    					//
    					if (noMute)
 8002718:	4b56      	ldr	r3, [pc, #344]	; (8002874 <main+0xae0>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00a      	beq.n	8002736 <main+0x9a2>
    						sprintf(st, "Bass:%u Vol:%u", BassBoost, Volume);
 8002720:	4b53      	ldr	r3, [pc, #332]	; (8002870 <main+0xadc>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	461a      	mov	r2, r3
 8002726:	4b54      	ldr	r3, [pc, #336]	; (8002878 <main+0xae4>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800272e:	4953      	ldr	r1, [pc, #332]	; (800287c <main+0xae8>)
 8002730:	f00c fa28 	bl	800eb84 <siprintf>
 8002734:	e009      	b.n	800274a <main+0x9b6>
    					else
    						sprintf(st, "Bass:%u Vol:%u M", BassBoost, Volume);
 8002736:	4b4e      	ldr	r3, [pc, #312]	; (8002870 <main+0xadc>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	461a      	mov	r2, r3
 800273c:	4b4e      	ldr	r3, [pc, #312]	; (8002878 <main+0xae4>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002744:	494e      	ldr	r1, [pc, #312]	; (8002880 <main+0xaec>)
 8002746:	f00c fa1d 	bl	800eb84 <siprintf>
    					showLine(st, lin4, &lim, true);
 800274a:	f107 0208 	add.w	r2, r7, #8
 800274e:	f8b7 10b8 	ldrh.w	r1, [r7, #184]	; 0xb8
 8002752:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002756:	2301      	movs	r3, #1
 8002758:	f001 fa84 	bl	8003c64 <showLine>
    					Report(1, "[que:%u] set new BassBoost to %u\r\n", cntEvt, BassBoost);
 800275c:	4b38      	ldr	r3, [pc, #224]	; (8002840 <main+0xaac>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	b2db      	uxtb	r3, r3
 8002762:	461a      	mov	r2, r3
 8002764:	4b42      	ldr	r3, [pc, #264]	; (8002870 <main+0xadc>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	4946      	ldr	r1, [pc, #280]	; (8002884 <main+0xaf0>)
 800276a:	2001      	movs	r0, #1
 800276c:	f001 fc08 	bl	8003f80 <Report>
    				}
    			break;
 8002770:	f000 bc37 	b.w	8002fe2 <main+0x124e>
    			case evt_Vol:
    				if (newVolume != Volume) {
 8002774:	4b44      	ldr	r3, [pc, #272]	; (8002888 <main+0xaf4>)
 8002776:	781a      	ldrb	r2, [r3, #0]
 8002778:	4b3f      	ldr	r3, [pc, #252]	; (8002878 <main+0xae4>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	f000 8432 	beq.w	8002fe6 <main+0x1252>
    					Volume = newVolume;
 8002782:	4b41      	ldr	r3, [pc, #260]	; (8002888 <main+0xaf4>)
 8002784:	781a      	ldrb	r2, [r3, #0]
 8002786:	4b3c      	ldr	r3, [pc, #240]	; (8002878 <main+0xae4>)
 8002788:	701a      	strb	r2, [r3, #0]
    					rda5807_SetVolume(Volume);
 800278a:	4b3b      	ldr	r3, [pc, #236]	; (8002878 <main+0xae4>)
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f002 fa3a 	bl	8004c08 <rda5807_SetVolume>
    					//
    					if (noMute)
 8002794:	4b37      	ldr	r3, [pc, #220]	; (8002874 <main+0xae0>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00a      	beq.n	80027b2 <main+0xa1e>
    						sprintf(st, "Bass:%u Vol:%u", BassBoost, Volume);
 800279c:	4b34      	ldr	r3, [pc, #208]	; (8002870 <main+0xadc>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	461a      	mov	r2, r3
 80027a2:	4b35      	ldr	r3, [pc, #212]	; (8002878 <main+0xae4>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80027aa:	4934      	ldr	r1, [pc, #208]	; (800287c <main+0xae8>)
 80027ac:	f00c f9ea 	bl	800eb84 <siprintf>
 80027b0:	e009      	b.n	80027c6 <main+0xa32>
    					else
    						sprintf(st, "Bass:%u Vol:%u M", BassBoost, Volume);
 80027b2:	4b2f      	ldr	r3, [pc, #188]	; (8002870 <main+0xadc>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	461a      	mov	r2, r3
 80027b8:	4b2f      	ldr	r3, [pc, #188]	; (8002878 <main+0xae4>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80027c0:	492f      	ldr	r1, [pc, #188]	; (8002880 <main+0xaec>)
 80027c2:	f00c f9df 	bl	800eb84 <siprintf>
    					showLine(st, lin4, &lim, true);
 80027c6:	f107 0208 	add.w	r2, r7, #8
 80027ca:	f8b7 10b8 	ldrh.w	r1, [r7, #184]	; 0xb8
 80027ce:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80027d2:	2301      	movs	r3, #1
 80027d4:	f001 fa46 	bl	8003c64 <showLine>
    					Report(1, "[que:%u] set new Volume to %u\r\n", cntEvt, Volume);
 80027d8:	4b19      	ldr	r3, [pc, #100]	; (8002840 <main+0xaac>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	461a      	mov	r2, r3
 80027e0:	4b25      	ldr	r3, [pc, #148]	; (8002878 <main+0xae4>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	4929      	ldr	r1, [pc, #164]	; (800288c <main+0xaf8>)
 80027e6:	2001      	movs	r0, #1
 80027e8:	f001 fbca 	bl	8003f80 <Report>
    				}
    			break;
 80027ec:	e3fb      	b.n	8002fe6 <main+0x1252>
    			case evt_Mute:
    				noMute = (~noMute) & 1;
 80027ee:	4b21      	ldr	r3, [pc, #132]	; (8002874 <main+0xae0>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	bf0c      	ite	eq
 80027fa:	2301      	moveq	r3, #1
 80027fc:	2300      	movne	r3, #0
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	461a      	mov	r2, r3
 8002802:	4b1c      	ldr	r3, [pc, #112]	; (8002874 <main+0xae0>)
 8002804:	701a      	strb	r2, [r3, #0]
    				rda5807_Set_Mute(noMute);
 8002806:	4b1b      	ldr	r3, [pc, #108]	; (8002874 <main+0xae0>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f002 fbf0 	bl	8004ff0 <rda5807_Set_Mute>
    				//
    				if (noMute)
 8002810:	4b18      	ldr	r3, [pc, #96]	; (8002874 <main+0xae0>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d03b      	beq.n	8002890 <main+0xafc>
    					sprintf(st, "Bass:%u Vol:%u", BassBoost, Volume);
 8002818:	4b15      	ldr	r3, [pc, #84]	; (8002870 <main+0xadc>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	461a      	mov	r2, r3
 800281e:	4b16      	ldr	r3, [pc, #88]	; (8002878 <main+0xae4>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002826:	4915      	ldr	r1, [pc, #84]	; (800287c <main+0xae8>)
 8002828:	f00c f9ac 	bl	800eb84 <siprintf>
 800282c:	e03a      	b.n	80028a4 <main+0xb10>
 800282e:	bf00      	nop
 8002830:	200001d5 	.word	0x200001d5
 8002834:	200001d4 	.word	0x200001d4
 8002838:	200001e0 	.word	0x200001e0
 800283c:	08012aa0 	.word	0x08012aa0
 8002840:	20001c7c 	.word	0x20001c7c
 8002844:	08012b54 	.word	0x08012b54
 8002848:	200001b8 	.word	0x200001b8
 800284c:	200001b4 	.word	0x200001b4
 8002850:	200001cc 	.word	0x200001cc
 8002854:	20002cac 	.word	0x20002cac
 8002858:	20002cb0 	.word	0x20002cb0
 800285c:	200001d0 	.word	0x200001d0
 8002860:	200001d6 	.word	0x200001d6
 8002864:	08012b74 	.word	0x08012b74
 8002868:	08012bb0 	.word	0x08012bb0
 800286c:	20002cbb 	.word	0x20002cbb
 8002870:	20002cba 	.word	0x20002cba
 8002874:	200001d9 	.word	0x200001d9
 8002878:	200001d7 	.word	0x200001d7
 800287c:	08012aac 	.word	0x08012aac
 8002880:	08012bf0 	.word	0x08012bf0
 8002884:	08012c04 	.word	0x08012c04
 8002888:	200001d8 	.word	0x200001d8
 800288c:	08012c28 	.word	0x08012c28
    				else
    					sprintf(st, "Bass:%u Vol:%u M", BassBoost, Volume);
 8002890:	4b71      	ldr	r3, [pc, #452]	; (8002a58 <main+0xcc4>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	461a      	mov	r2, r3
 8002896:	4b71      	ldr	r3, [pc, #452]	; (8002a5c <main+0xcc8>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800289e:	4970      	ldr	r1, [pc, #448]	; (8002a60 <main+0xccc>)
 80028a0:	f00c f970 	bl	800eb84 <siprintf>
    				showLine(st, lin4, &lim, true);
 80028a4:	f107 0208 	add.w	r2, r7, #8
 80028a8:	f8b7 10b8 	ldrh.w	r1, [r7, #184]	; 0xb8
 80028ac:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80028b0:	2301      	movs	r3, #1
 80028b2:	f001 f9d7 	bl	8003c64 <showLine>
    				Report(1, "[que:%u] set Mute to %u\r\n", cntEvt, (~noMute) & 1);
 80028b6:	4b6b      	ldr	r3, [pc, #428]	; (8002a64 <main+0xcd0>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	461a      	mov	r2, r3
 80028be:	4b6a      	ldr	r3, [pc, #424]	; (8002a68 <main+0xcd4>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	bf0c      	ite	eq
 80028ca:	2301      	moveq	r3, #1
 80028cc:	2300      	movne	r3, #0
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	4966      	ldr	r1, [pc, #408]	; (8002a6c <main+0xcd8>)
 80028d2:	2001      	movs	r0, #1
 80028d4:	f001 fb54 	bl	8003f80 <Report>
    			break;
 80028d8:	e38a      	b.n	8002ff0 <main+0x125c>
    			case evt_Freq:
    				if ((newFreq >= lBand) && (newFreq <= rBand)) {
 80028da:	4b65      	ldr	r3, [pc, #404]	; (8002a70 <main+0xcdc>)
 80028dc:	ed93 7a00 	vldr	s14, [r3]
 80028e0:	4b64      	ldr	r3, [pc, #400]	; (8002a74 <main+0xce0>)
 80028e2:	edd3 7a00 	vldr	s15, [r3]
 80028e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ee:	da00      	bge.n	80028f2 <main+0xb5e>
    						sprintf(sta, "%s", nameStation(Freq));
    						showLine(sta, lin6, &lia, true);
    						Report(1, "[que:%u] set new Freq to %.1f %s (Chan:%u)\r\n", cntEvt, Freq, sta, Chan);
    					}
    				}
				break;
 80028f0:	e37b      	b.n	8002fea <main+0x1256>
    				if ((newFreq >= lBand) && (newFreq <= rBand)) {
 80028f2:	4b5f      	ldr	r3, [pc, #380]	; (8002a70 <main+0xcdc>)
 80028f4:	ed93 7a00 	vldr	s14, [r3]
 80028f8:	4b5f      	ldr	r3, [pc, #380]	; (8002a78 <main+0xce4>)
 80028fa:	edd3 7a00 	vldr	s15, [r3]
 80028fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002906:	d900      	bls.n	800290a <main+0xb76>
				break;
 8002908:	e36f      	b.n	8002fea <main+0x1256>
    					if (newFreq != Freq) {
 800290a:	4b59      	ldr	r3, [pc, #356]	; (8002a70 <main+0xcdc>)
 800290c:	ed93 7a00 	vldr	s14, [r3]
 8002910:	4b5a      	ldr	r3, [pc, #360]	; (8002a7c <main+0xce8>)
 8002912:	edd3 7a00 	vldr	s15, [r3]
 8002916:	eeb4 7a67 	vcmp.f32	s14, s15
 800291a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800291e:	f000 8364 	beq.w	8002fea <main+0x1256>
    						Freq = newFreq;
 8002922:	4b53      	ldr	r3, [pc, #332]	; (8002a70 <main+0xcdc>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a55      	ldr	r2, [pc, #340]	; (8002a7c <main+0xce8>)
 8002928:	6013      	str	r3, [r2, #0]
    						uint16_t fr = (uint16_t)(Freq * 10);
 800292a:	4b54      	ldr	r3, [pc, #336]	; (8002a7c <main+0xce8>)
 800292c:	edd3 7a00 	vldr	s15, [r3]
 8002930:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002934:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002938:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800293c:	ee17 3a90 	vmov	r3, s15
 8002940:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
    						rda5807_SetFreq_In100Khz(fr);
 8002944:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8002948:	4618      	mov	r0, r3
 800294a:	f002 f9c5 	bl	8004cd8 <rda5807_SetFreq_In100Khz>
    						stereo = rda5807_Get_StereoMonoFlag();
 800294e:	f002 fab9 	bl	8004ec4 <rda5807_Get_StereoMonoFlag>
 8002952:	4603      	mov	r3, r0
 8002954:	461a      	mov	r2, r3
 8002956:	4b4a      	ldr	r3, [pc, #296]	; (8002a80 <main+0xcec>)
 8002958:	701a      	strb	r2, [r3, #0]
    						Chan = rda5807_Get_Channel();
 800295a:	f002 facb 	bl	8004ef4 <rda5807_Get_Channel>
 800295e:	4603      	mov	r3, r0
 8002960:	461a      	mov	r2, r3
 8002962:	4b48      	ldr	r3, [pc, #288]	; (8002a84 <main+0xcf0>)
 8002964:	801a      	strh	r2, [r3, #0]
    						if (stereo)
 8002966:	4b46      	ldr	r3, [pc, #280]	; (8002a80 <main+0xcec>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d012      	beq.n	8002994 <main+0xc00>
    							sprintf(st, "Rssi:%u Freq:%.1f S", RSSI, Freq);
 800296e:	4b46      	ldr	r3, [pc, #280]	; (8002a88 <main+0xcf4>)
 8002970:	881b      	ldrh	r3, [r3, #0]
 8002972:	461c      	mov	r4, r3
 8002974:	4b41      	ldr	r3, [pc, #260]	; (8002a7c <main+0xce8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f7fd fde5 	bl	8000548 <__aeabi_f2d>
 800297e:	4602      	mov	r2, r0
 8002980:	460b      	mov	r3, r1
 8002982:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002986:	e9cd 2300 	strd	r2, r3, [sp]
 800298a:	4622      	mov	r2, r4
 800298c:	493f      	ldr	r1, [pc, #252]	; (8002a8c <main+0xcf8>)
 800298e:	f00c f8f9 	bl	800eb84 <siprintf>
 8002992:	e011      	b.n	80029b8 <main+0xc24>
    							sprintf(st, "Rssi:%u Freq:%.1f", RSSI, Freq);
 8002994:	4b3c      	ldr	r3, [pc, #240]	; (8002a88 <main+0xcf4>)
 8002996:	881b      	ldrh	r3, [r3, #0]
 8002998:	461c      	mov	r4, r3
 800299a:	4b38      	ldr	r3, [pc, #224]	; (8002a7c <main+0xce8>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7fd fdd2 	bl	8000548 <__aeabi_f2d>
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80029ac:	e9cd 2300 	strd	r2, r3, [sp]
 80029b0:	4622      	mov	r2, r4
 80029b2:	4937      	ldr	r1, [pc, #220]	; (8002a90 <main+0xcfc>)
 80029b4:	f00c f8e6 	bl	800eb84 <siprintf>
    						showLine(st, lin5, &lil, false);
 80029b8:	1d3a      	adds	r2, r7, #4
 80029ba:	f8b7 10b6 	ldrh.w	r1, [r7, #182]	; 0xb6
 80029be:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80029c2:	2300      	movs	r3, #0
 80029c4:	f001 f94e 	bl	8003c64 <showLine>
    						sprintf(sta, "%s", nameStation(Freq));
 80029c8:	4b2c      	ldr	r3, [pc, #176]	; (8002a7c <main+0xce8>)
 80029ca:	edd3 7a00 	vldr	s15, [r3]
 80029ce:	eeb0 0a67 	vmov.f32	s0, s15
 80029d2:	f001 f81d 	bl	8003a10 <nameStation>
 80029d6:	4602      	mov	r2, r0
 80029d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029dc:	492d      	ldr	r1, [pc, #180]	; (8002a94 <main+0xd00>)
 80029de:	4618      	mov	r0, r3
 80029e0:	f00c f8d0 	bl	800eb84 <siprintf>
    						showLine(sta, lin6, &lia, true);
 80029e4:	463a      	mov	r2, r7
 80029e6:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 80029ea:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80029ee:	2301      	movs	r3, #1
 80029f0:	f001 f938 	bl	8003c64 <showLine>
    						Report(1, "[que:%u] set new Freq to %.1f %s (Chan:%u)\r\n", cntEvt, Freq, sta, Chan);
 80029f4:	4b1b      	ldr	r3, [pc, #108]	; (8002a64 <main+0xcd0>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	461c      	mov	r4, r3
 80029fc:	4b1f      	ldr	r3, [pc, #124]	; (8002a7c <main+0xce8>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7fd fda1 	bl	8000548 <__aeabi_f2d>
 8002a06:	4602      	mov	r2, r0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	491e      	ldr	r1, [pc, #120]	; (8002a84 <main+0xcf0>)
 8002a0c:	8809      	ldrh	r1, [r1, #0]
 8002a0e:	9103      	str	r1, [sp, #12]
 8002a10:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002a14:	9102      	str	r1, [sp, #8]
 8002a16:	e9cd 2300 	strd	r2, r3, [sp]
 8002a1a:	4622      	mov	r2, r4
 8002a1c:	491e      	ldr	r1, [pc, #120]	; (8002a98 <main+0xd04>)
 8002a1e:	2001      	movs	r0, #1
 8002a20:	f001 faae 	bl	8003f80 <Report>
				break;
 8002a24:	e2e1      	b.n	8002fea <main+0x1256>
    			case evt_Scan:
    				if (!scan) {
 8002a26:	4b1d      	ldr	r3, [pc, #116]	; (8002a9c <main+0xd08>)
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f040 82de 	bne.w	8002fee <main+0x125a>
    					scan = 1;
 8002a32:	4b1a      	ldr	r3, [pc, #104]	; (8002a9c <main+0xd08>)
 8002a34:	2201      	movs	r2, #1
 8002a36:	701a      	strb	r2, [r3, #0]
    					rda5807_StartSeek(seek_up);
 8002a38:	4b19      	ldr	r3, [pc, #100]	; (8002aa0 <main+0xd0c>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f002 fa04 	bl	8004e4c <rda5807_StartSeek>
    				}
    			break;
 8002a44:	e2d3      	b.n	8002fee <main+0x125a>
    			case evt_Ver:
    				Report(1, "Ver.%s\r\n", ver);
 8002a46:	4b17      	ldr	r3, [pc, #92]	; (8002aa4 <main+0xd10>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	4916      	ldr	r1, [pc, #88]	; (8002aa8 <main+0xd14>)
 8002a4e:	2001      	movs	r0, #1
 8002a50:	f001 fa96 	bl	8003f80 <Report>
    			break;
 8002a54:	e2cc      	b.n	8002ff0 <main+0x125c>
 8002a56:	bf00      	nop
 8002a58:	20002cba 	.word	0x20002cba
 8002a5c:	200001d7 	.word	0x200001d7
 8002a60:	08012bf0 	.word	0x08012bf0
 8002a64:	20001c7c 	.word	0x20001c7c
 8002a68:	200001d9 	.word	0x200001d9
 8002a6c:	08012c48 	.word	0x08012c48
 8002a70:	200001d0 	.word	0x200001d0
 8002a74:	20002cac 	.word	0x20002cac
 8002a78:	20002cb0 	.word	0x20002cb0
 8002a7c:	200001cc 	.word	0x200001cc
 8002a80:	20002cbc 	.word	0x20002cbc
 8002a84:	20002cb4 	.word	0x20002cb4
 8002a88:	20002cb6 	.word	0x20002cb6
 8002a8c:	08012abc 	.word	0x08012abc
 8002a90:	08012ad0 	.word	0x08012ad0
 8002a94:	080129e4 	.word	0x080129e4
 8002a98:	08012c64 	.word	0x08012c64
 8002a9c:	20002cb9 	.word	0x20002cb9
 8002aa0:	200001d6 	.word	0x200001d6
 8002aa4:	20000004 	.word	0x20000004
 8002aa8:	08012c94 	.word	0x08012c94
    			case evt_Sec:
    			{
#ifdef SET_DISPLAY
    				dl = sec2str(st);
 8002aac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f001 f9cb 	bl	8003e4c <sec2str>
 8002ab6:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
    				x = ((SCREEN_WIDTH - (Font_6x8.FontWidth * dl)) >> 1) & 0x7f;
 8002aba:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8002abe:	461a      	mov	r2, r3
 8002ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ac4:	fb02 f303 	mul.w	r3, r2, r3
 8002ac8:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002acc:	105b      	asrs	r3, r3, #1
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ad4:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
    				ST7565_Print(x, lin1, st, &Font_6x8, 0, PIX_OFF);
 8002ad8:	f9b7 00b2 	ldrsh.w	r0, [r7, #178]	; 0xb2
 8002adc:	f9b7 10be 	ldrsh.w	r1, [r7, #190]	; 0xbe
 8002ae0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002ae4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002ae8:	2400      	movs	r4, #0
 8002aea:	9401      	str	r4, [sp, #4]
 8002aec:	2400      	movs	r4, #0
 8002aee:	9400      	str	r4, [sp, #0]
 8002af0:	f7fe fe3c 	bl	800176c <ST7565_Print>
#endif
    				//
    				if (scan) {
 8002af4:	4ba9      	ldr	r3, [pc, #676]	; (8002d9c <main+0x1008>)
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d04f      	beq.n	8002b9e <main+0xe0a>
    					if (rda5807_Get_SeekTuneReadyFlag()) {
 8002afe:	f002 f9cf 	bl	8004ea0 <rda5807_Get_SeekTuneReadyFlag>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d04a      	beq.n	8002b9e <main+0xe0a>
    						Freq = (float)rda5807_GetFreq_In100Khz();
 8002b08:	f002 f960 	bl	8004dcc <rda5807_GetFreq_In100Khz>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	ee07 3a90 	vmov	s15, r3
 8002b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b16:	4ba2      	ldr	r3, [pc, #648]	; (8002da0 <main+0x100c>)
 8002b18:	edc3 7a00 	vstr	s15, [r3]
    						Freq /= 10;
 8002b1c:	4ba0      	ldr	r3, [pc, #640]	; (8002da0 <main+0x100c>)
 8002b1e:	ed93 7a00 	vldr	s14, [r3]
 8002b22:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002b26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b2a:	4b9d      	ldr	r3, [pc, #628]	; (8002da0 <main+0x100c>)
 8002b2c:	edc3 7a00 	vstr	s15, [r3]
    						scan = 0;
 8002b30:	4b9a      	ldr	r3, [pc, #616]	; (8002d9c <main+0x1008>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	701a      	strb	r2, [r3, #0]
    						Chan = rda5807_Get_Channel();
 8002b36:	f002 f9dd 	bl	8004ef4 <rda5807_Get_Channel>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	4b99      	ldr	r3, [pc, #612]	; (8002da4 <main+0x1010>)
 8002b40:	801a      	strh	r2, [r3, #0]
    						sprintf(sta, "%s", nameStation(Freq));
 8002b42:	4b97      	ldr	r3, [pc, #604]	; (8002da0 <main+0x100c>)
 8002b44:	edd3 7a00 	vldr	s15, [r3]
 8002b48:	eeb0 0a67 	vmov.f32	s0, s15
 8002b4c:	f000 ff60 	bl	8003a10 <nameStation>
 8002b50:	4602      	mov	r2, r0
 8002b52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b56:	4994      	ldr	r1, [pc, #592]	; (8002da8 <main+0x1014>)
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f00c f813 	bl	800eb84 <siprintf>
    						showLine(sta, lin6, &lia, true);
 8002b5e:	463a      	mov	r2, r7
 8002b60:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 8002b64:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002b68:	2301      	movs	r3, #1
 8002b6a:	f001 f87b 	bl	8003c64 <showLine>
    						Report(1, "[que:%u] set new Freq to %.1f %s (Chan:%u)\r\n", cntEvt, Freq, sta, Chan);
 8002b6e:	4b8f      	ldr	r3, [pc, #572]	; (8002dac <main+0x1018>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	461c      	mov	r4, r3
 8002b76:	4b8a      	ldr	r3, [pc, #552]	; (8002da0 <main+0x100c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7fd fce4 	bl	8000548 <__aeabi_f2d>
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	4987      	ldr	r1, [pc, #540]	; (8002da4 <main+0x1010>)
 8002b86:	8809      	ldrh	r1, [r1, #0]
 8002b88:	9103      	str	r1, [sp, #12]
 8002b8a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002b8e:	9102      	str	r1, [sp, #8]
 8002b90:	e9cd 2300 	strd	r2, r3, [sp]
 8002b94:	4622      	mov	r2, r4
 8002b96:	4986      	ldr	r1, [pc, #536]	; (8002db0 <main+0x101c>)
 8002b98:	2001      	movs	r0, #1
 8002b9a:	f001 f9f1 	bl	8003f80 <Report>
    					}
    				}
    				//
    				uint16_t rssi = rda5807_rssi();
 8002b9e:	f001 fe55 	bl	800484c <rda5807_rssi>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
    				if (rssi != RSSI) {
 8002ba8:	4b82      	ldr	r3, [pc, #520]	; (8002db4 <main+0x1020>)
 8002baa:	881b      	ldrh	r3, [r3, #0]
 8002bac:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d03a      	beq.n	8002c2a <main+0xe96>
    					RSSI = rssi;
 8002bb4:	4a7f      	ldr	r2, [pc, #508]	; (8002db4 <main+0x1020>)
 8002bb6:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8002bba:	8013      	strh	r3, [r2, #0]
    					stereo = rda5807_Get_StereoMonoFlag();
 8002bbc:	f002 f982 	bl	8004ec4 <rda5807_Get_StereoMonoFlag>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	4b7c      	ldr	r3, [pc, #496]	; (8002db8 <main+0x1024>)
 8002bc6:	701a      	strb	r2, [r3, #0]
#ifdef SET_DISPLAY
    					if (stereo)
 8002bc8:	4b7b      	ldr	r3, [pc, #492]	; (8002db8 <main+0x1024>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d012      	beq.n	8002bf6 <main+0xe62>
    						sprintf(st, "Rssi:%u Freq:%.1f S", RSSI, Freq);
 8002bd0:	4b78      	ldr	r3, [pc, #480]	; (8002db4 <main+0x1020>)
 8002bd2:	881b      	ldrh	r3, [r3, #0]
 8002bd4:	461c      	mov	r4, r3
 8002bd6:	4b72      	ldr	r3, [pc, #456]	; (8002da0 <main+0x100c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fd fcb4 	bl	8000548 <__aeabi_f2d>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002be8:	e9cd 2300 	strd	r2, r3, [sp]
 8002bec:	4622      	mov	r2, r4
 8002bee:	4973      	ldr	r1, [pc, #460]	; (8002dbc <main+0x1028>)
 8002bf0:	f00b ffc8 	bl	800eb84 <siprintf>
 8002bf4:	e011      	b.n	8002c1a <main+0xe86>
    					else
    						sprintf(st, "Rssi:%u Freq:%.1f", RSSI, Freq);
 8002bf6:	4b6f      	ldr	r3, [pc, #444]	; (8002db4 <main+0x1020>)
 8002bf8:	881b      	ldrh	r3, [r3, #0]
 8002bfa:	461c      	mov	r4, r3
 8002bfc:	4b68      	ldr	r3, [pc, #416]	; (8002da0 <main+0x100c>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7fd fca1 	bl	8000548 <__aeabi_f2d>
 8002c06:	4602      	mov	r2, r0
 8002c08:	460b      	mov	r3, r1
 8002c0a:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002c0e:	e9cd 2300 	strd	r2, r3, [sp]
 8002c12:	4622      	mov	r2, r4
 8002c14:	496a      	ldr	r1, [pc, #424]	; (8002dc0 <main+0x102c>)
 8002c16:	f00b ffb5 	bl	800eb84 <siprintf>
    					showLine(st, lin5, &lil, false);
 8002c1a:	1d3a      	adds	r2, r7, #4
 8002c1c:	f8b7 10b6 	ldrh.w	r1, [r7, #182]	; 0xb6
 8002c20:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002c24:	2300      	movs	r3, #0
 8002c26:	f001 f81d 	bl	8003c64 <showLine>
    					//showLine(sta, lin6, &lia, true);
    					////Report(1, "ChipID:0x%x Chan:%u Freq:%.2f RSSI:%u\r\n", rdaID, Chan, Freq, RSSI);
#endif
    				}
    				//
    				if (devError) {
 8002c2a:	4b66      	ldr	r3, [pc, #408]	; (8002dc4 <main+0x1030>)
 8002c2c:	881b      	ldrh	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00d      	beq.n	8002c4e <main+0xeba>
    					dl = sprintf(tmp, "devError : 0x%04X", devError);
 8002c32:	4b64      	ldr	r3, [pc, #400]	; (8002dc4 <main+0x1030>)
 8002c34:	881b      	ldrh	r3, [r3, #0]
 8002c36:	461a      	mov	r2, r3
 8002c38:	4963      	ldr	r1, [pc, #396]	; (8002dc8 <main+0x1034>)
 8002c3a:	4864      	ldr	r0, [pc, #400]	; (8002dcc <main+0x1038>)
 8002c3c:	f00b ffa2 	bl	800eb84 <siprintf>
 8002c40:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
    					lastErr = devError;
 8002c44:	4b5f      	ldr	r3, [pc, #380]	; (8002dc4 <main+0x1030>)
 8002c46:	881b      	ldrh	r3, [r3, #0]
 8002c48:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
 8002c4c:	e013      	b.n	8002c76 <main+0xee2>
    				} else {
    					if (lastErr) {
 8002c4e:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00c      	beq.n	8002c70 <main+0xedc>
    						dl = sprintf(tmp, "Ver.%s", ver);
 8002c56:	4b5e      	ldr	r3, [pc, #376]	; (8002dd0 <main+0x103c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	495d      	ldr	r1, [pc, #372]	; (8002dd4 <main+0x1040>)
 8002c5e:	485b      	ldr	r0, [pc, #364]	; (8002dcc <main+0x1038>)
 8002c60:	f00b ff90 	bl	800eb84 <siprintf>
 8002c64:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
    						lastErr = devOK;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
 8002c6e:	e002      	b.n	8002c76 <main+0xee2>
    					} else dl = 0;
 8002c70:	2300      	movs	r3, #0
 8002c72:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    				}
#ifdef SET_DISPLAY
    				if (dl) {
 8002c76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d032      	beq.n	8002ce4 <main+0xf50>
    					ST7565_DrawFilledRectangle(0, SCREEN_HEIGHT - Font_6x8.FontHeight, SCREEN_WIDTH - 1, Font_6x8.FontHeight, PIX_OFF);
 8002c7e:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	b219      	sxth	r1, r3
 8002c8c:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8002c90:	b21b      	sxth	r3, r3
 8002c92:	2200      	movs	r2, #0
 8002c94:	9200      	str	r2, [sp, #0]
 8002c96:	227f      	movs	r2, #127	; 0x7f
 8002c98:	2000      	movs	r0, #0
 8002c9a:	f7fe ffc0 	bl	8001c1e <ST7565_DrawFilledRectangle>
    					x = ((SCREEN_WIDTH - (Font_6x8.FontWidth * dl)) >> 1) & 0x7f;
 8002c9e:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ca8:	fb02 f303 	mul.w	r3, r2, r3
 8002cac:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002cb0:	105b      	asrs	r3, r3, #1
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cb8:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
    					ST7565_Print(x, SCREEN_HEIGHT - Font_6x8.FontHeight, tmp, &Font_6x8, 1, PIX_ON);
 8002cbc:	f9b7 00b2 	ldrsh.w	r0, [r7, #178]	; 0xb2
 8002cc0:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	b219      	sxth	r1, r3
 8002cce:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	9201      	str	r2, [sp, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	9200      	str	r2, [sp, #0]
 8002cda:	4a3c      	ldr	r2, [pc, #240]	; (8002dcc <main+0x1038>)
 8002cdc:	f7fe fd46 	bl	800176c <ST7565_Print>
    					ST7565_Update();
 8002ce0:	f7fe fb94 	bl	800140c <ST7565_Update>
    				}
    				//
    				ST7565_Update();
 8002ce4:	f7fe fb92 	bl	800140c <ST7565_Update>
#endif
    			}
    			break;
 8002ce8:	e182      	b.n	8002ff0 <main+0x125c>
    			case evt_Clr:
    				devError = devOK;
 8002cea:	4b36      	ldr	r3, [pc, #216]	; (8002dc4 <main+0x1030>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	801a      	strh	r2, [r3, #0]
    				Report(1, "[que:%u] Clear all Errors...\r\n", cntEvt);
 8002cf0:	4b2e      	ldr	r3, [pc, #184]	; (8002dac <main+0x1018>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	4937      	ldr	r1, [pc, #220]	; (8002dd8 <main+0x1044>)
 8002cfa:	2001      	movs	r0, #1
 8002cfc:	f001 f940 	bl	8003f80 <Report>
    			break;
 8002d00:	e176      	b.n	8002ff0 <main+0x125c>
    			case evt_Help:
    				stx[0] = '\0';
 8002d02:	4b36      	ldr	r3, [pc, #216]	; (8002ddc <main+0x1048>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	701a      	strb	r2, [r3, #0]
    				for (int8_t i = 0; i < MAX_CMDS; i++) sprintf(stx+strlen(stx), "\t%s\r\n", s_cmds[i]);
 8002d08:	2300      	movs	r3, #0
 8002d0a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002d0e:	e015      	b.n	8002d3c <main+0xfa8>
 8002d10:	4832      	ldr	r0, [pc, #200]	; (8002ddc <main+0x1048>)
 8002d12:	f7fd fa5d 	bl	80001d0 <strlen>
 8002d16:	4603      	mov	r3, r0
 8002d18:	4a30      	ldr	r2, [pc, #192]	; (8002ddc <main+0x1048>)
 8002d1a:	1898      	adds	r0, r3, r2
 8002d1c:	f997 30d7 	ldrsb.w	r3, [r7, #215]	; 0xd7
 8002d20:	4a2f      	ldr	r2, [pc, #188]	; (8002de0 <main+0x104c>)
 8002d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d26:	461a      	mov	r2, r3
 8002d28:	492e      	ldr	r1, [pc, #184]	; (8002de4 <main+0x1050>)
 8002d2a:	f00b ff2b 	bl	800eb84 <siprintf>
 8002d2e:	f997 30d7 	ldrsb.w	r3, [r7, #215]	; 0xd7
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	3301      	adds	r3, #1
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002d3c:	f997 30d7 	ldrsb.w	r3, [r7, #215]	; 0xd7
 8002d40:	2b12      	cmp	r3, #18
 8002d42:	dde5      	ble.n	8002d10 <main+0xf7c>
    				Report(0, "%s", stx);
 8002d44:	4a25      	ldr	r2, [pc, #148]	; (8002ddc <main+0x1048>)
 8002d46:	4918      	ldr	r1, [pc, #96]	; (8002da8 <main+0x1014>)
 8002d48:	2000      	movs	r0, #0
 8002d4a:	f001 f919 	bl	8003f80 <Report>
    			break;
 8002d4e:	e14f      	b.n	8002ff0 <main+0x125c>
    			case evt_Restart:
    				restart = 1;
 8002d50:	4b25      	ldr	r3, [pc, #148]	; (8002de8 <main+0x1054>)
 8002d52:	2201      	movs	r2, #1
 8002d54:	701a      	strb	r2, [r3, #0]
    				Report(1, "[que:%u] Restart system...\r\n", cntEvt);
 8002d56:	4b15      	ldr	r3, [pc, #84]	; (8002dac <main+0x1018>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	4923      	ldr	r1, [pc, #140]	; (8002dec <main+0x1058>)
 8002d60:	2001      	movs	r0, #1
 8002d62:	f001 f90d 	bl	8003f80 <Report>
    			break;
 8002d66:	e143      	b.n	8002ff0 <main+0x125c>
    			case evt_Epoch:
    				set_Date(epoch);
 8002d68:	4b21      	ldr	r3, [pc, #132]	; (8002df0 <main+0x105c>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f001 f80d 	bl	8003d8c <set_Date>
    				Report(1, "[que:%u] Set Unix TimeStamp to %lu\r\n", cntEvt, epoch);
 8002d72:	4b0e      	ldr	r3, [pc, #56]	; (8002dac <main+0x1018>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	461a      	mov	r2, r3
 8002d7a:	4b1d      	ldr	r3, [pc, #116]	; (8002df0 <main+0x105c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	491d      	ldr	r1, [pc, #116]	; (8002df4 <main+0x1060>)
 8002d80:	2001      	movs	r0, #1
 8002d82:	f001 f8fd 	bl	8003f80 <Report>
    			break;
 8002d86:	e133      	b.n	8002ff0 <main+0x125c>
    			case evt_Err:
    				Report(1, "[que:%u] Error input from uart\r\n", cntEvt);
 8002d88:	4b08      	ldr	r3, [pc, #32]	; (8002dac <main+0x1018>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	461a      	mov	r2, r3
 8002d90:	4919      	ldr	r1, [pc, #100]	; (8002df8 <main+0x1064>)
 8002d92:	2001      	movs	r0, #1
 8002d94:	f001 f8f4 	bl	8003f80 <Report>
    			break;
 8002d98:	e12a      	b.n	8002ff0 <main+0x125c>
 8002d9a:	bf00      	nop
 8002d9c:	20002cb9 	.word	0x20002cb9
 8002da0:	200001cc 	.word	0x200001cc
 8002da4:	20002cb4 	.word	0x20002cb4
 8002da8:	080129e4 	.word	0x080129e4
 8002dac:	20001c7c 	.word	0x20001c7c
 8002db0:	08012c64 	.word	0x08012c64
 8002db4:	20002cb6 	.word	0x20002cb6
 8002db8:	20002cbc 	.word	0x20002cbc
 8002dbc:	08012abc 	.word	0x08012abc
 8002dc0:	08012ad0 	.word	0x08012ad0
 8002dc4:	20001860 	.word	0x20001860
 8002dc8:	08012ca0 	.word	0x08012ca0
 8002dcc:	20000fe0 	.word	0x20000fe0
 8002dd0:	20000004 	.word	0x20000004
 8002dd4:	08012a84 	.word	0x08012a84
 8002dd8:	08012cb4 	.word	0x08012cb4
 8002ddc:	20000be0 	.word	0x20000be0
 8002de0:	2000001c 	.word	0x2000001c
 8002de4:	08012cd4 	.word	0x08012cd4
 8002de8:	20001c74 	.word	0x20001c74
 8002dec:	08012cdc 	.word	0x08012cdc
 8002df0:	20000018 	.word	0x20000018
 8002df4:	08012cfc 	.word	0x08012cfc
 8002df8:	08012d24 	.word	0x08012d24
#ifdef SET_W25FLASH
    			case evt_sRead:
    			case evt_sNext:
    			{
    				uint32_t w25_adr = (adr_sector * W25qxx_getSectorSize()) + offset_sector;
 8002dfc:	f002 ff82 	bl	8005d04 <W25qxx_getSectorSize>
 8002e00:	4603      	mov	r3, r0
 8002e02:	4aa5      	ldr	r2, [pc, #660]	; (8003098 <main+0x1304>)
 8002e04:	6812      	ldr	r2, [r2, #0]
 8002e06:	fb02 f303 	mul.w	r3, r2, r3
 8002e0a:	4aa4      	ldr	r2, [pc, #656]	; (800309c <main+0x1308>)
 8002e0c:	6812      	ldr	r2, [r2, #0]
 8002e0e:	4413      	add	r3, r2
 8002e10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    				uint32_t dlin = list_sector;
 8002e14:	4ba2      	ldr	r3, [pc, #648]	; (80030a0 <main+0x130c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    				int step = 32;
 8002e1c:	2320      	movs	r3, #32
 8002e1e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    				uint32_t ind = 0;
 8002e22:	2300      	movs	r3, #0
 8002e24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    				W25qxx_ReadSector(fs_work, adr_sector, offset_sector, dlin);
 8002e28:	4b9b      	ldr	r3, [pc, #620]	; (8003098 <main+0x1304>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4b9b      	ldr	r3, [pc, #620]	; (800309c <main+0x1308>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	461a      	mov	r2, r3
 8002e34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e38:	489a      	ldr	r0, [pc, #616]	; (80030a4 <main+0x1310>)
 8002e3a:	f003 fa75 	bl	8006328 <W25qxx_ReadSector>
    				Report(0, "Read sector:%d offset:%d len:%u\r\n", adr_sector, offset_sector, dlin);
 8002e3e:	4b96      	ldr	r3, [pc, #600]	; (8003098 <main+0x1304>)
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	4b96      	ldr	r3, [pc, #600]	; (800309c <main+0x1308>)
 8002e44:	6819      	ldr	r1, [r3, #0]
 8002e46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e4a:	9300      	str	r3, [sp, #0]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	4996      	ldr	r1, [pc, #600]	; (80030a8 <main+0x1314>)
 8002e50:	2000      	movs	r0, #0
 8002e52:	f001 f895 	bl	8003f80 <Report>
    				while (ind < dlin) {
 8002e56:	e05b      	b.n	8002f10 <main+0x117c>
    					strf[0] = '\0';
 8002e58:	4b94      	ldr	r3, [pc, #592]	; (80030ac <main+0x1318>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	701a      	strb	r2, [r3, #0]
    					while (1) {
    						sprintf(strf+strlen(strf), "%06X ", (unsigned int)w25_adr);
 8002e5e:	4893      	ldr	r0, [pc, #588]	; (80030ac <main+0x1318>)
 8002e60:	f7fd f9b6 	bl	80001d0 <strlen>
 8002e64:	4603      	mov	r3, r0
 8002e66:	4a91      	ldr	r2, [pc, #580]	; (80030ac <main+0x1318>)
 8002e68:	4413      	add	r3, r2
 8002e6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002e6e:	4990      	ldr	r1, [pc, #576]	; (80030b0 <main+0x131c>)
 8002e70:	4618      	mov	r0, r3
 8002e72:	f00b fe87 	bl	800eb84 <siprintf>
    						for (int i = 0; i < step; i++) sprintf(strf+strlen(strf), " %02X", fs_work[i + ind]);
 8002e76:	2300      	movs	r3, #0
 8002e78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e7c:	e015      	b.n	8002eaa <main+0x1116>
 8002e7e:	488b      	ldr	r0, [pc, #556]	; (80030ac <main+0x1318>)
 8002e80:	f7fd f9a6 	bl	80001d0 <strlen>
 8002e84:	4603      	mov	r3, r0
 8002e86:	4a89      	ldr	r2, [pc, #548]	; (80030ac <main+0x1318>)
 8002e88:	1898      	adds	r0, r3, r2
 8002e8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002e8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e92:	4413      	add	r3, r2
 8002e94:	4a83      	ldr	r2, [pc, #524]	; (80030a4 <main+0x1310>)
 8002e96:	5cd3      	ldrb	r3, [r2, r3]
 8002e98:	461a      	mov	r2, r3
 8002e9a:	4986      	ldr	r1, [pc, #536]	; (80030b4 <main+0x1320>)
 8002e9c:	f00b fe72 	bl	800eb84 <siprintf>
 8002ea0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002eaa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002eae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	dbe3      	blt.n	8002e7e <main+0x10ea>
    						strcat(strf, "\r\n");
 8002eb6:	487d      	ldr	r0, [pc, #500]	; (80030ac <main+0x1318>)
 8002eb8:	f7fd f98a 	bl	80001d0 <strlen>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	4b7a      	ldr	r3, [pc, #488]	; (80030ac <main+0x1318>)
 8002ec2:	4413      	add	r3, r2
 8002ec4:	4a7c      	ldr	r2, [pc, #496]	; (80030b8 <main+0x1324>)
 8002ec6:	8811      	ldrh	r1, [r2, #0]
 8002ec8:	7892      	ldrb	r2, [r2, #2]
 8002eca:	8019      	strh	r1, [r3, #0]
 8002ecc:	709a      	strb	r2, [r3, #2]
    						w25_adr += step;
 8002ece:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ed2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002ed6:	4413      	add	r3, r2
 8002ed8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    						ind += step;
 8002edc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ee0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002ee4:	4413      	add	r3, r2
 8002ee6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    						if (!(ind % W25qxx_getPageSize())) break;
 8002eea:	f002 ff17 	bl	8005d1c <W25qxx_getPageSize>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ef4:	fbb3 f1f2 	udiv	r1, r3, r2
 8002ef8:	fb01 f202 	mul.w	r2, r1, r2
 8002efc:	1a9b      	subs	r3, r3, r2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d000      	beq.n	8002f04 <main+0x1170>
    						sprintf(strf+strlen(strf), "%06X ", (unsigned int)w25_adr);
 8002f02:	e7ac      	b.n	8002e5e <main+0x10ca>
    						if (!(ind % W25qxx_getPageSize())) break;
 8002f04:	bf00      	nop
    					}
    					Report(0, "%s", strf);
 8002f06:	4a69      	ldr	r2, [pc, #420]	; (80030ac <main+0x1318>)
 8002f08:	496c      	ldr	r1, [pc, #432]	; (80030bc <main+0x1328>)
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	f001 f838 	bl	8003f80 <Report>
    				while (ind < dlin) {
 8002f10:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002f14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d39d      	bcc.n	8002e58 <main+0x10c4>
    				}
    			}
    			break;
 8002f1c:	e068      	b.n	8002ff0 <main+0x125c>
    			case evt_sWrite:
    			{
    				uint32_t ss = W25qxx_getSectorSize();
 8002f1e:	f002 fef1 	bl	8005d04 <W25qxx_getSectorSize>
 8002f22:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
    				if (!W25qxx_IsEmptySector(adr_sector, 0, ss)) W25qxx_EraseSector(adr_sector);
 8002f26:	4b5c      	ldr	r3, [pc, #368]	; (8003098 <main+0x1304>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f2e:	2100      	movs	r1, #0
 8002f30:	4618      	mov	r0, r3
 8002f32:	f002 ff5d 	bl	8005df0 <W25qxx_IsEmptySector>
 8002f36:	4603      	mov	r3, r0
 8002f38:	f083 0301 	eor.w	r3, r3, #1
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d004      	beq.n	8002f4c <main+0x11b8>
 8002f42:	4b55      	ldr	r3, [pc, #340]	; (8003098 <main+0x1304>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f002 fef6 	bl	8005d38 <W25qxx_EraseSector>
    				memset(fs_work, byte_write, ss);
 8002f4c:	4b5c      	ldr	r3, [pc, #368]	; (80030c0 <main+0x132c>)
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f54:	4619      	mov	r1, r3
 8002f56:	4853      	ldr	r0, [pc, #332]	; (80030a4 <main+0x1310>)
 8002f58:	f00b f9a2 	bl	800e2a0 <memset>
    				if (len_write != -1) ss = len_write;
 8002f5c:	4b59      	ldr	r3, [pc, #356]	; (80030c4 <main+0x1330>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f64:	d003      	beq.n	8002f6e <main+0x11da>
 8002f66:	4b57      	ldr	r3, [pc, #348]	; (80030c4 <main+0x1330>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    				W25qxx_WriteSector(fs_work, adr_sector, offset_sector, ss);
 8002f6e:	4b4a      	ldr	r3, [pc, #296]	; (8003098 <main+0x1304>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4619      	mov	r1, r3
 8002f74:	4b49      	ldr	r3, [pc, #292]	; (800309c <main+0x1308>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f7e:	4849      	ldr	r0, [pc, #292]	; (80030a4 <main+0x1310>)
 8002f80:	f003 f8aa 	bl	80060d8 <W25qxx_WriteSector>
    				Report(0, "Fill sector:%d byte:%02X len:%d done\r\n", adr_sector, byte_write, ss);
 8002f84:	4b44      	ldr	r3, [pc, #272]	; (8003098 <main+0x1304>)
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	4b4d      	ldr	r3, [pc, #308]	; (80030c0 <main+0x132c>)
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	460b      	mov	r3, r1
 8002f96:	494c      	ldr	r1, [pc, #304]	; (80030c8 <main+0x1334>)
 8002f98:	2000      	movs	r0, #0
 8002f9a:	f000 fff1 	bl	8003f80 <Report>
    			}
    			break;
 8002f9e:	e027      	b.n	8002ff0 <main+0x125c>
    			case evt_sErase:
    				if (adr_sector == -1) {
 8002fa0:	4b3d      	ldr	r3, [pc, #244]	; (8003098 <main+0x1304>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fa8:	d10c      	bne.n	8002fc4 <main+0x1230>
    					Report(1, "Erase flash");
 8002faa:	4948      	ldr	r1, [pc, #288]	; (80030cc <main+0x1338>)
 8002fac:	2001      	movs	r0, #1
 8002fae:	f000 ffe7 	bl	8003f80 <Report>
    					flag_sector = true;
 8002fb2:	4b47      	ldr	r3, [pc, #284]	; (80030d0 <main+0x133c>)
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	701a      	strb	r2, [r3, #0]
    					btime = HAL_GetTick();
 8002fb8:	f003 fab4 	bl	8006524 <HAL_GetTick>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	4a45      	ldr	r2, [pc, #276]	; (80030d4 <main+0x1340>)
 8002fc0:	6013      	str	r3, [r2, #0]
    				} else {
    					W25qxx_EraseSector(adr_sector);
    					Report(1, "Erase sector:%d done\r\n", adr_sector);
    				}
    			break;
 8002fc2:	e015      	b.n	8002ff0 <main+0x125c>
    					W25qxx_EraseSector(adr_sector);
 8002fc4:	4b34      	ldr	r3, [pc, #208]	; (8003098 <main+0x1304>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f002 feb5 	bl	8005d38 <W25qxx_EraseSector>
    					Report(1, "Erase sector:%d done\r\n", adr_sector);
 8002fce:	4b32      	ldr	r3, [pc, #200]	; (8003098 <main+0x1304>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	4940      	ldr	r1, [pc, #256]	; (80030d8 <main+0x1344>)
 8002fd6:	2001      	movs	r0, #1
 8002fd8:	f000 ffd2 	bl	8003f80 <Report>
    			break;
 8002fdc:	e008      	b.n	8002ff0 <main+0x125c>
    			break;
 8002fde:	bf00      	nop
 8002fe0:	e006      	b.n	8002ff0 <main+0x125c>
    			break;
 8002fe2:	bf00      	nop
 8002fe4:	e004      	b.n	8002ff0 <main+0x125c>
    			break;
 8002fe6:	bf00      	nop
 8002fe8:	e002      	b.n	8002ff0 <main+0x125c>
				break;
 8002fea:	bf00      	nop
 8002fec:	e000      	b.n	8002ff0 <main+0x125c>
    			break;
 8002fee:	bf00      	nop
#endif
    		}
    		if ((evt >= evt_sRead) && (evt <= evt_sWrite)) {
 8002ff0:	4b3a      	ldr	r3, [pc, #232]	; (80030dc <main+0x1348>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2b03      	cmp	r3, #3
 8002ff6:	dd0b      	ble.n	8003010 <main+0x127c>
 8002ff8:	4b38      	ldr	r3, [pc, #224]	; (80030dc <main+0x1348>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2b07      	cmp	r3, #7
 8002ffe:	dc07      	bgt.n	8003010 <main+0x127c>
    			last_cmd_sector =  evt;//cmd_sector;
 8003000:	4b36      	ldr	r3, [pc, #216]	; (80030dc <main+0x1348>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a36      	ldr	r2, [pc, #216]	; (80030e0 <main+0x134c>)
 8003006:	6013      	str	r3, [r2, #0]
    			cmd_sector = sNone;
 8003008:	4b36      	ldr	r3, [pc, #216]	; (80030e4 <main+0x1350>)
 800300a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800300e:	601a      	str	r2, [r3, #0]
    		}
    	}
#endif

#ifdef SET_W25FLASH
    	if (flag_sector) {
 8003010:	4b2f      	ldr	r3, [pc, #188]	; (80030d0 <main+0x133c>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d031      	beq.n	800307c <main+0x12e8>
    		adr_sector++;
 8003018:	4b1f      	ldr	r3, [pc, #124]	; (8003098 <main+0x1304>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	3301      	adds	r3, #1
 800301e:	4a1e      	ldr	r2, [pc, #120]	; (8003098 <main+0x1304>)
 8003020:	6013      	str	r3, [r2, #0]
    		if (adr_sector >= W25qxx_getSectorCount()) {
 8003022:	f002 fe63 	bl	8005cec <W25qxx_getSectorCount>
 8003026:	4603      	mov	r3, r0
 8003028:	4a1b      	ldr	r2, [pc, #108]	; (8003098 <main+0x1304>)
 800302a:	6812      	ldr	r2, [r2, #0]
 800302c:	4293      	cmp	r3, r2
 800302e:	d816      	bhi.n	800305e <main+0x12ca>
    			flag_sector = false;
 8003030:	4b27      	ldr	r3, [pc, #156]	; (80030d0 <main+0x133c>)
 8003032:	2200      	movs	r2, #0
 8003034:	701a      	strb	r2, [r3, #0]
    			etime = HAL_GetTick();
 8003036:	f003 fa75 	bl	8006524 <HAL_GetTick>
 800303a:	4603      	mov	r3, r0
 800303c:	4a2a      	ldr	r2, [pc, #168]	; (80030e8 <main+0x1354>)
 800303e:	6013      	str	r3, [r2, #0]
    			Report(0, " done (%lu sec)\r\n", (etime - btime) / 1000);
 8003040:	4b29      	ldr	r3, [pc, #164]	; (80030e8 <main+0x1354>)
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	4b23      	ldr	r3, [pc, #140]	; (80030d4 <main+0x1340>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	4a28      	ldr	r2, [pc, #160]	; (80030ec <main+0x1358>)
 800304c:	fba2 2303 	umull	r2, r3, r2, r3
 8003050:	099b      	lsrs	r3, r3, #6
 8003052:	461a      	mov	r2, r3
 8003054:	4926      	ldr	r1, [pc, #152]	; (80030f0 <main+0x135c>)
 8003056:	2000      	movs	r0, #0
 8003058:	f000 ff92 	bl	8003f80 <Report>
 800305c:	e00e      	b.n	800307c <main+0x12e8>
    		} else {
    			//putEvt(evt_sErase);
    			W25qxx_EraseSector(adr_sector);
 800305e:	4b0e      	ldr	r3, [pc, #56]	; (8003098 <main+0x1304>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4618      	mov	r0, r3
 8003064:	f002 fe68 	bl	8005d38 <W25qxx_EraseSector>
    			if (!(adr_sector % 8)) Report(0, ".");
 8003068:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <main+0x1304>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	2b00      	cmp	r3, #0
 8003072:	d103      	bne.n	800307c <main+0x12e8>
 8003074:	491f      	ldr	r1, [pc, #124]	; (80030f4 <main+0x1360>)
 8003076:	2000      	movs	r0, #0
 8003078:	f000 ff82 	bl	8003f80 <Report>
    		}
    	}
#endif


    	if (devError) {
 800307c:	4b1e      	ldr	r3, [pc, #120]	; (80030f8 <main+0x1364>)
 800307e:	881b      	ldrh	r3, [r3, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d03b      	beq.n	80030fc <main+0x1368>
    		errLedOn(true);
 8003084:	2001      	movs	r0, #1
 8003086:	f000 fe5b 	bl	8003d40 <errLedOn>
    		HAL_Delay(50);
 800308a:	2032      	movs	r0, #50	; 0x32
 800308c:	f003 fa56 	bl	800653c <HAL_Delay>
    		errLedOn(false);
 8003090:	2000      	movs	r0, #0
 8003092:	f000 fe55 	bl	8003d40 <errLedOn>
 8003096:	e03b      	b.n	8003110 <main+0x137c>
 8003098:	20001c80 	.word	0x20001c80
 800309c:	20001c84 	.word	0x20001c84
 80030a0:	20001c88 	.word	0x20001c88
 80030a4:	20001c94 	.word	0x20001c94
 80030a8:	08012d48 	.word	0x08012d48
 80030ac:	20001460 	.word	0x20001460
 80030b0:	08012d6c 	.word	0x08012d6c
 80030b4:	08012d74 	.word	0x08012d74
 80030b8:	08012d7c 	.word	0x08012d7c
 80030bc:	080129e4 	.word	0x080129e4
 80030c0:	200001c8 	.word	0x200001c8
 80030c4:	20001c8c 	.word	0x20001c8c
 80030c8:	08012d80 	.word	0x08012d80
 80030cc:	08012da8 	.word	0x08012da8
 80030d0:	20001c90 	.word	0x20001c90
 80030d4:	20002c98 	.word	0x20002c98
 80030d8:	08012db4 	.word	0x08012db4
 80030dc:	200001b4 	.word	0x200001b4
 80030e0:	200001c4 	.word	0x200001c4
 80030e4:	200001c0 	.word	0x200001c0
 80030e8:	20002c9c 	.word	0x20002c9c
 80030ec:	10624dd3 	.word	0x10624dd3
 80030f0:	08012dcc 	.word	0x08012dcc
 80030f4:	08012de0 	.word	0x08012de0
 80030f8:	20001860 	.word	0x20001860
    	} else {
    		if (HAL_GPIO_ReadPin(ERR_LED_GPIO_Port, ERR_LED_Pin)) errLedOn(false);
 80030fc:	2108      	movs	r1, #8
 80030fe:	4813      	ldr	r0, [pc, #76]	; (800314c <main+0x13b8>)
 8003100:	f003 ffb2 	bl	8007068 <HAL_GPIO_ReadPin>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <main+0x137c>
 800310a:	2000      	movs	r0, #0
 800310c:	f000 fe18 	bl	8003d40 <errLedOn>
    while (!restart) {
 8003110:	4b0f      	ldr	r3, [pc, #60]	; (8003150 <main+0x13bc>)
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	f43f a979 	beq.w	800240e <main+0x67a>

    /* USER CODE BEGIN 3 */

    }//while (!restart)

    HAL_TIM_Base_Stop_IT(tikPort);
 800311c:	4b0d      	ldr	r3, [pc, #52]	; (8003154 <main+0x13c0>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4618      	mov	r0, r3
 8003122:	f008 ff89 	bl	800c038 <HAL_TIM_Base_Stop_IT>

#ifdef SET_DISPLAY
    ST7565_Reset();
 8003126:	f7fd ffcf 	bl	80010c8 <ST7565_Reset>
    ST7565_CMD_DISPLAY(CMD_DISPLAY_OFF);
 800312a:	20ae      	movs	r0, #174	; 0xae
 800312c:	f7fe f8fe 	bl	800132c <ST7565_CMD_DISPLAY>
#endif

    Report(1, "[que:%u] Stop application...\r\n", cntEvt);
 8003130:	4b09      	ldr	r3, [pc, #36]	; (8003158 <main+0x13c4>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	b2db      	uxtb	r3, r3
 8003136:	461a      	mov	r2, r3
 8003138:	4908      	ldr	r1, [pc, #32]	; (800315c <main+0x13c8>)
 800313a:	2001      	movs	r0, #1
 800313c:	f000 ff20 	bl	8003f80 <Report>

    HAL_Delay(500);
 8003140:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003144:	f003 f9fa 	bl	800653c <HAL_Delay>

    NVIC_SystemReset();
 8003148:	f7fe fdc2 	bl	8001cd0 <__NVIC_SystemReset>
 800314c:	48000800 	.word	0x48000800
 8003150:	20001c74 	.word	0x20001c74
 8003154:	20000008 	.word	0x20000008
 8003158:	20001c7c 	.word	0x20001c7c
 800315c:	08012de4 	.word	0x08012de4

08003160 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b096      	sub	sp, #88	; 0x58
 8003164:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003166:	f107 0314 	add.w	r3, r7, #20
 800316a:	2244      	movs	r2, #68	; 0x44
 800316c:	2100      	movs	r1, #0
 800316e:	4618      	mov	r0, r3
 8003170:	f00b f896 	bl	800e2a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003174:	463b      	mov	r3, r7
 8003176:	2200      	movs	r2, #0
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	605a      	str	r2, [r3, #4]
 800317c:	609a      	str	r2, [r3, #8]
 800317e:	60da      	str	r2, [r3, #12]
 8003180:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003182:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003186:	f005 fc59 	bl	8008a3c <HAL_PWREx_ControlVoltageScaling>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003190:	f001 fadc 	bl	800474c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003194:	2309      	movs	r3, #9
 8003196:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003198:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800319c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800319e:	2301      	movs	r3, #1
 80031a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031a2:	2302      	movs	r3, #2
 80031a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80031a6:	2303      	movs	r3, #3
 80031a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80031aa:	2301      	movs	r3, #1
 80031ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80031ae:	2314      	movs	r3, #20
 80031b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80031b2:	2307      	movs	r3, #7
 80031b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80031b6:	2302      	movs	r3, #2
 80031b8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80031ba:	2302      	movs	r3, #2
 80031bc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031be:	f107 0314 	add.w	r3, r7, #20
 80031c2:	4618      	mov	r0, r3
 80031c4:	f005 fc90 	bl	8008ae8 <HAL_RCC_OscConfig>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80031ce:	f001 fabd 	bl	800474c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031d2:	230f      	movs	r3, #15
 80031d4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031d6:	2303      	movs	r3, #3
 80031d8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031da:	2300      	movs	r3, #0
 80031dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80031de:	2300      	movs	r3, #0
 80031e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80031e2:	2300      	movs	r3, #0
 80031e4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80031e6:	463b      	mov	r3, r7
 80031e8:	2104      	movs	r1, #4
 80031ea:	4618      	mov	r0, r3
 80031ec:	f006 f858 	bl	80092a0 <HAL_RCC_ClockConfig>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80031f6:	f001 faa9 	bl	800474c <Error_Handler>
  }
}
 80031fa:	bf00      	nop
 80031fc:	3758      	adds	r7, #88	; 0x58
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
	...

08003204 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003208:	4b1b      	ldr	r3, [pc, #108]	; (8003278 <MX_I2C1_Init+0x74>)
 800320a:	4a1c      	ldr	r2, [pc, #112]	; (800327c <MX_I2C1_Init+0x78>)
 800320c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702D95;
 800320e:	4b1a      	ldr	r3, [pc, #104]	; (8003278 <MX_I2C1_Init+0x74>)
 8003210:	4a1b      	ldr	r2, [pc, #108]	; (8003280 <MX_I2C1_Init+0x7c>)
 8003212:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003214:	4b18      	ldr	r3, [pc, #96]	; (8003278 <MX_I2C1_Init+0x74>)
 8003216:	2200      	movs	r2, #0
 8003218:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800321a:	4b17      	ldr	r3, [pc, #92]	; (8003278 <MX_I2C1_Init+0x74>)
 800321c:	2201      	movs	r2, #1
 800321e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003220:	4b15      	ldr	r3, [pc, #84]	; (8003278 <MX_I2C1_Init+0x74>)
 8003222:	2200      	movs	r2, #0
 8003224:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003226:	4b14      	ldr	r3, [pc, #80]	; (8003278 <MX_I2C1_Init+0x74>)
 8003228:	2200      	movs	r2, #0
 800322a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800322c:	4b12      	ldr	r3, [pc, #72]	; (8003278 <MX_I2C1_Init+0x74>)
 800322e:	2200      	movs	r2, #0
 8003230:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003232:	4b11      	ldr	r3, [pc, #68]	; (8003278 <MX_I2C1_Init+0x74>)
 8003234:	2200      	movs	r2, #0
 8003236:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003238:	4b0f      	ldr	r3, [pc, #60]	; (8003278 <MX_I2C1_Init+0x74>)
 800323a:	2200      	movs	r2, #0
 800323c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800323e:	480e      	ldr	r0, [pc, #56]	; (8003278 <MX_I2C1_Init+0x74>)
 8003240:	f003 ff74 	bl	800712c <HAL_I2C_Init>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800324a:	f001 fa7f 	bl	800474c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 800324e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003252:	4809      	ldr	r0, [pc, #36]	; (8003278 <MX_I2C1_Init+0x74>)
 8003254:	f005 fb2c 	bl	80088b0 <HAL_I2CEx_ConfigAnalogFilter>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800325e:	f001 fa75 	bl	800474c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003262:	2100      	movs	r1, #0
 8003264:	4804      	ldr	r0, [pc, #16]	; (8003278 <MX_I2C1_Init+0x74>)
 8003266:	f005 fb6e 	bl	8008946 <HAL_I2CEx_ConfigDigitalFilter>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8003270:	f001 fa6c 	bl	800474c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003274:	bf00      	nop
 8003276:	bd80      	pop	{r7, pc}
 8003278:	20000820 	.word	0x20000820
 800327c:	40005400 	.word	0x40005400
 8003280:	00702d95 	.word	0x00702d95

08003284 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800328a:	1d3b      	adds	r3, r7, #4
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	605a      	str	r2, [r3, #4]
 8003292:	609a      	str	r2, [r3, #8]
 8003294:	60da      	str	r2, [r3, #12]
 8003296:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003298:	2300      	movs	r3, #0
 800329a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800329c:	4b25      	ldr	r3, [pc, #148]	; (8003334 <MX_RTC_Init+0xb0>)
 800329e:	4a26      	ldr	r2, [pc, #152]	; (8003338 <MX_RTC_Init+0xb4>)
 80032a0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80032a2:	4b24      	ldr	r3, [pc, #144]	; (8003334 <MX_RTC_Init+0xb0>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80032a8:	4b22      	ldr	r3, [pc, #136]	; (8003334 <MX_RTC_Init+0xb0>)
 80032aa:	227f      	movs	r2, #127	; 0x7f
 80032ac:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80032ae:	4b21      	ldr	r3, [pc, #132]	; (8003334 <MX_RTC_Init+0xb0>)
 80032b0:	22ff      	movs	r2, #255	; 0xff
 80032b2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80032b4:	4b1f      	ldr	r3, [pc, #124]	; (8003334 <MX_RTC_Init+0xb0>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80032ba:	4b1e      	ldr	r3, [pc, #120]	; (8003334 <MX_RTC_Init+0xb0>)
 80032bc:	2200      	movs	r2, #0
 80032be:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80032c0:	4b1c      	ldr	r3, [pc, #112]	; (8003334 <MX_RTC_Init+0xb0>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80032c6:	4b1b      	ldr	r3, [pc, #108]	; (8003334 <MX_RTC_Init+0xb0>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80032cc:	4819      	ldr	r0, [pc, #100]	; (8003334 <MX_RTC_Init+0xb0>)
 80032ce:	f006 fec7 	bl	800a060 <HAL_RTC_Init>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80032d8:	f001 fa38 	bl	800474c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80032dc:	2300      	movs	r3, #0
 80032de:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80032e0:	2300      	movs	r3, #0
 80032e2:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80032e4:	2300      	movs	r3, #0
 80032e6:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80032e8:	2300      	movs	r3, #0
 80032ea:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80032ec:	2300      	movs	r3, #0
 80032ee:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80032f0:	1d3b      	adds	r3, r7, #4
 80032f2:	2201      	movs	r2, #1
 80032f4:	4619      	mov	r1, r3
 80032f6:	480f      	ldr	r0, [pc, #60]	; (8003334 <MX_RTC_Init+0xb0>)
 80032f8:	f006 ff2d 	bl	800a156 <HAL_RTC_SetTime>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8003302:	f001 fa23 	bl	800474c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8003306:	2303      	movs	r3, #3
 8003308:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 800330a:	2307      	movs	r3, #7
 800330c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x6;
 800330e:	2306      	movs	r3, #6
 8003310:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 8003312:	2322      	movs	r3, #34	; 0x22
 8003314:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003316:	463b      	mov	r3, r7
 8003318:	2201      	movs	r2, #1
 800331a:	4619      	mov	r1, r3
 800331c:	4805      	ldr	r0, [pc, #20]	; (8003334 <MX_RTC_Init+0xb0>)
 800331e:	f007 f813 	bl	800a348 <HAL_RTC_SetDate>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8003328:	f001 fa10 	bl	800474c <Error_Handler>

  //set_Date(epoch);

  /* USER CODE END RTC_Init 2 */

}
 800332c:	bf00      	nop
 800332e:	3718      	adds	r7, #24
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	20000904 	.word	0x20000904
 8003338:	40002800 	.word	0x40002800

0800333c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003340:	4b1b      	ldr	r3, [pc, #108]	; (80033b0 <MX_SPI1_Init+0x74>)
 8003342:	4a1c      	ldr	r2, [pc, #112]	; (80033b4 <MX_SPI1_Init+0x78>)
 8003344:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003346:	4b1a      	ldr	r3, [pc, #104]	; (80033b0 <MX_SPI1_Init+0x74>)
 8003348:	f44f 7282 	mov.w	r2, #260	; 0x104
 800334c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800334e:	4b18      	ldr	r3, [pc, #96]	; (80033b0 <MX_SPI1_Init+0x74>)
 8003350:	2200      	movs	r2, #0
 8003352:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003354:	4b16      	ldr	r3, [pc, #88]	; (80033b0 <MX_SPI1_Init+0x74>)
 8003356:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800335a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800335c:	4b14      	ldr	r3, [pc, #80]	; (80033b0 <MX_SPI1_Init+0x74>)
 800335e:	2200      	movs	r2, #0
 8003360:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003362:	4b13      	ldr	r3, [pc, #76]	; (80033b0 <MX_SPI1_Init+0x74>)
 8003364:	2200      	movs	r2, #0
 8003366:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003368:	4b11      	ldr	r3, [pc, #68]	; (80033b0 <MX_SPI1_Init+0x74>)
 800336a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800336e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003370:	4b0f      	ldr	r3, [pc, #60]	; (80033b0 <MX_SPI1_Init+0x74>)
 8003372:	2208      	movs	r2, #8
 8003374:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003376:	4b0e      	ldr	r3, [pc, #56]	; (80033b0 <MX_SPI1_Init+0x74>)
 8003378:	2200      	movs	r2, #0
 800337a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800337c:	4b0c      	ldr	r3, [pc, #48]	; (80033b0 <MX_SPI1_Init+0x74>)
 800337e:	2200      	movs	r2, #0
 8003380:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003382:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <MX_SPI1_Init+0x74>)
 8003384:	2200      	movs	r2, #0
 8003386:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003388:	4b09      	ldr	r3, [pc, #36]	; (80033b0 <MX_SPI1_Init+0x74>)
 800338a:	2207      	movs	r2, #7
 800338c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800338e:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <MX_SPI1_Init+0x74>)
 8003390:	2200      	movs	r2, #0
 8003392:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003394:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <MX_SPI1_Init+0x74>)
 8003396:	2200      	movs	r2, #0
 8003398:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800339a:	4805      	ldr	r0, [pc, #20]	; (80033b0 <MX_SPI1_Init+0x74>)
 800339c:	f007 f97a 	bl	800a694 <HAL_SPI_Init>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80033a6:	f001 f9d1 	bl	800474c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80033aa:	bf00      	nop
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	20000928 	.word	0x20000928
 80033b4:	40013000 	.word	0x40013000

080033b8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80033bc:	4b1b      	ldr	r3, [pc, #108]	; (800342c <MX_SPI2_Init+0x74>)
 80033be:	4a1c      	ldr	r2, [pc, #112]	; (8003430 <MX_SPI2_Init+0x78>)
 80033c0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80033c2:	4b1a      	ldr	r3, [pc, #104]	; (800342c <MX_SPI2_Init+0x74>)
 80033c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80033c8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80033ca:	4b18      	ldr	r3, [pc, #96]	; (800342c <MX_SPI2_Init+0x74>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80033d0:	4b16      	ldr	r3, [pc, #88]	; (800342c <MX_SPI2_Init+0x74>)
 80033d2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80033d6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80033d8:	4b14      	ldr	r3, [pc, #80]	; (800342c <MX_SPI2_Init+0x74>)
 80033da:	2200      	movs	r2, #0
 80033dc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80033de:	4b13      	ldr	r3, [pc, #76]	; (800342c <MX_SPI2_Init+0x74>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80033e4:	4b11      	ldr	r3, [pc, #68]	; (800342c <MX_SPI2_Init+0x74>)
 80033e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033ea:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033ec:	4b0f      	ldr	r3, [pc, #60]	; (800342c <MX_SPI2_Init+0x74>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80033f2:	4b0e      	ldr	r3, [pc, #56]	; (800342c <MX_SPI2_Init+0x74>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80033f8:	4b0c      	ldr	r3, [pc, #48]	; (800342c <MX_SPI2_Init+0x74>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033fe:	4b0b      	ldr	r3, [pc, #44]	; (800342c <MX_SPI2_Init+0x74>)
 8003400:	2200      	movs	r2, #0
 8003402:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003404:	4b09      	ldr	r3, [pc, #36]	; (800342c <MX_SPI2_Init+0x74>)
 8003406:	2207      	movs	r2, #7
 8003408:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800340a:	4b08      	ldr	r3, [pc, #32]	; (800342c <MX_SPI2_Init+0x74>)
 800340c:	2200      	movs	r2, #0
 800340e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003410:	4b06      	ldr	r3, [pc, #24]	; (800342c <MX_SPI2_Init+0x74>)
 8003412:	2200      	movs	r2, #0
 8003414:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003416:	4805      	ldr	r0, [pc, #20]	; (800342c <MX_SPI2_Init+0x74>)
 8003418:	f007 f93c 	bl	800a694 <HAL_SPI_Init>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8003422:	f001 f993 	bl	800474c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003426:	bf00      	nop
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	2000098c 	.word	0x2000098c
 8003430:	40003800 	.word	0x40003800

08003434 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b088      	sub	sp, #32
 8003438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800343a:	f107 0310 	add.w	r3, r7, #16
 800343e:	2200      	movs	r2, #0
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	605a      	str	r2, [r3, #4]
 8003444:	609a      	str	r2, [r3, #8]
 8003446:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003448:	1d3b      	adds	r3, r7, #4
 800344a:	2200      	movs	r2, #0
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	605a      	str	r2, [r3, #4]
 8003450:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN TIM4_Init 1 */

  // interupt every 10 ms

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003452:	4b1d      	ldr	r3, [pc, #116]	; (80034c8 <MX_TIM4_Init+0x94>)
 8003454:	4a1d      	ldr	r2, [pc, #116]	; (80034cc <MX_TIM4_Init+0x98>)
 8003456:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7999;
 8003458:	4b1b      	ldr	r3, [pc, #108]	; (80034c8 <MX_TIM4_Init+0x94>)
 800345a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800345e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003460:	4b19      	ldr	r3, [pc, #100]	; (80034c8 <MX_TIM4_Init+0x94>)
 8003462:	2200      	movs	r2, #0
 8003464:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8003466:	4b18      	ldr	r3, [pc, #96]	; (80034c8 <MX_TIM4_Init+0x94>)
 8003468:	2263      	movs	r2, #99	; 0x63
 800346a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800346c:	4b16      	ldr	r3, [pc, #88]	; (80034c8 <MX_TIM4_Init+0x94>)
 800346e:	2200      	movs	r2, #0
 8003470:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003472:	4b15      	ldr	r3, [pc, #84]	; (80034c8 <MX_TIM4_Init+0x94>)
 8003474:	2280      	movs	r2, #128	; 0x80
 8003476:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003478:	4813      	ldr	r0, [pc, #76]	; (80034c8 <MX_TIM4_Init+0x94>)
 800347a:	f008 fd15 	bl	800bea8 <HAL_TIM_Base_Init>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d001      	beq.n	8003488 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8003484:	f001 f962 	bl	800474c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003488:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800348c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800348e:	f107 0310 	add.w	r3, r7, #16
 8003492:	4619      	mov	r1, r3
 8003494:	480c      	ldr	r0, [pc, #48]	; (80034c8 <MX_TIM4_Init+0x94>)
 8003496:	f008 ff1d 	bl	800c2d4 <HAL_TIM_ConfigClockSource>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80034a0:	f001 f954 	bl	800474c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034a4:	2300      	movs	r3, #0
 80034a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034a8:	2300      	movs	r3, #0
 80034aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80034ac:	1d3b      	adds	r3, r7, #4
 80034ae:	4619      	mov	r1, r3
 80034b0:	4805      	ldr	r0, [pc, #20]	; (80034c8 <MX_TIM4_Init+0x94>)
 80034b2:	f009 f935 	bl	800c720 <HAL_TIMEx_MasterConfigSynchronization>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80034bc:	f001 f946 	bl	800474c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80034c0:	bf00      	nop
 80034c2:	3720      	adds	r7, #32
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	20000ac8 	.word	0x20000ac8
 80034cc:	40000800 	.word	0x40000800

080034d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80034d4:	4b14      	ldr	r3, [pc, #80]	; (8003528 <MX_USART2_UART_Init+0x58>)
 80034d6:	4a15      	ldr	r2, [pc, #84]	; (800352c <MX_USART2_UART_Init+0x5c>)
 80034d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 80034da:	4b13      	ldr	r3, [pc, #76]	; (8003528 <MX_USART2_UART_Init+0x58>)
 80034dc:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80034e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80034e2:	4b11      	ldr	r3, [pc, #68]	; (8003528 <MX_USART2_UART_Init+0x58>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80034e8:	4b0f      	ldr	r3, [pc, #60]	; (8003528 <MX_USART2_UART_Init+0x58>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80034ee:	4b0e      	ldr	r3, [pc, #56]	; (8003528 <MX_USART2_UART_Init+0x58>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80034f4:	4b0c      	ldr	r3, [pc, #48]	; (8003528 <MX_USART2_UART_Init+0x58>)
 80034f6:	220c      	movs	r2, #12
 80034f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034fa:	4b0b      	ldr	r3, [pc, #44]	; (8003528 <MX_USART2_UART_Init+0x58>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003500:	4b09      	ldr	r3, [pc, #36]	; (8003528 <MX_USART2_UART_Init+0x58>)
 8003502:	2200      	movs	r2, #0
 8003504:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003506:	4b08      	ldr	r3, [pc, #32]	; (8003528 <MX_USART2_UART_Init+0x58>)
 8003508:	2200      	movs	r2, #0
 800350a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800350c:	4b06      	ldr	r3, [pc, #24]	; (8003528 <MX_USART2_UART_Init+0x58>)
 800350e:	2200      	movs	r2, #0
 8003510:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003512:	4805      	ldr	r0, [pc, #20]	; (8003528 <MX_USART2_UART_Init+0x58>)
 8003514:	f009 f9aa 	bl	800c86c <HAL_UART_Init>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800351e:	f001 f915 	bl	800474c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003522:	bf00      	nop
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	20000b14 	.word	0x20000b14
 800352c:	40004400 	.word	0x40004400

08003530 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003536:	4b26      	ldr	r3, [pc, #152]	; (80035d0 <MX_DMA_Init+0xa0>)
 8003538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800353a:	4a25      	ldr	r2, [pc, #148]	; (80035d0 <MX_DMA_Init+0xa0>)
 800353c:	f043 0301 	orr.w	r3, r3, #1
 8003540:	6493      	str	r3, [r2, #72]	; 0x48
 8003542:	4b23      	ldr	r3, [pc, #140]	; (80035d0 <MX_DMA_Init+0xa0>)
 8003544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	607b      	str	r3, [r7, #4]
 800354c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800354e:	4b20      	ldr	r3, [pc, #128]	; (80035d0 <MX_DMA_Init+0xa0>)
 8003550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003552:	4a1f      	ldr	r2, [pc, #124]	; (80035d0 <MX_DMA_Init+0xa0>)
 8003554:	f043 0302 	orr.w	r3, r3, #2
 8003558:	6493      	str	r3, [r2, #72]	; 0x48
 800355a:	4b1d      	ldr	r3, [pc, #116]	; (80035d0 <MX_DMA_Init+0xa0>)
 800355c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	603b      	str	r3, [r7, #0]
 8003564:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003566:	2200      	movs	r2, #0
 8003568:	2100      	movs	r1, #0
 800356a:	200d      	movs	r0, #13
 800356c:	f003 f909 	bl	8006782 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003570:	200d      	movs	r0, #13
 8003572:	f003 f922 	bl	80067ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8003576:	2200      	movs	r2, #0
 8003578:	2100      	movs	r1, #0
 800357a:	200e      	movs	r0, #14
 800357c:	f003 f901 	bl	8006782 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003580:	200e      	movs	r0, #14
 8003582:	f003 f91a 	bl	80067ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8003586:	2200      	movs	r2, #0
 8003588:	2100      	movs	r1, #0
 800358a:	200f      	movs	r0, #15
 800358c:	f003 f8f9 	bl	8006782 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003590:	200f      	movs	r0, #15
 8003592:	f003 f912 	bl	80067ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8003596:	2200      	movs	r2, #0
 8003598:	2100      	movs	r1, #0
 800359a:	2010      	movs	r0, #16
 800359c:	f003 f8f1 	bl	8006782 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80035a0:	2010      	movs	r0, #16
 80035a2:	f003 f90a 	bl	80067ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 3, 0);
 80035a6:	2200      	movs	r2, #0
 80035a8:	2103      	movs	r1, #3
 80035aa:	2011      	movs	r0, #17
 80035ac:	f003 f8e9 	bl	8006782 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80035b0:	2011      	movs	r0, #17
 80035b2:	f003 f902 	bl	80067ba <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0, 0);
 80035b6:	2200      	movs	r2, #0
 80035b8:	2100      	movs	r1, #0
 80035ba:	2044      	movs	r0, #68	; 0x44
 80035bc:	f003 f8e1 	bl	8006782 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 80035c0:	2044      	movs	r0, #68	; 0x44
 80035c2:	f003 f8fa 	bl	80067ba <HAL_NVIC_EnableIRQ>

}
 80035c6:	bf00      	nop
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	40021000 	.word	0x40021000

080035d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b08a      	sub	sp, #40	; 0x28
 80035d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035da:	f107 0314 	add.w	r3, r7, #20
 80035de:	2200      	movs	r2, #0
 80035e0:	601a      	str	r2, [r3, #0]
 80035e2:	605a      	str	r2, [r3, #4]
 80035e4:	609a      	str	r2, [r3, #8]
 80035e6:	60da      	str	r2, [r3, #12]
 80035e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035ea:	4b6f      	ldr	r3, [pc, #444]	; (80037a8 <MX_GPIO_Init+0x1d4>)
 80035ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ee:	4a6e      	ldr	r2, [pc, #440]	; (80037a8 <MX_GPIO_Init+0x1d4>)
 80035f0:	f043 0304 	orr.w	r3, r3, #4
 80035f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035f6:	4b6c      	ldr	r3, [pc, #432]	; (80037a8 <MX_GPIO_Init+0x1d4>)
 80035f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035fa:	f003 0304 	and.w	r3, r3, #4
 80035fe:	613b      	str	r3, [r7, #16]
 8003600:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003602:	4b69      	ldr	r3, [pc, #420]	; (80037a8 <MX_GPIO_Init+0x1d4>)
 8003604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003606:	4a68      	ldr	r2, [pc, #416]	; (80037a8 <MX_GPIO_Init+0x1d4>)
 8003608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800360c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800360e:	4b66      	ldr	r3, [pc, #408]	; (80037a8 <MX_GPIO_Init+0x1d4>)
 8003610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003616:	60fb      	str	r3, [r7, #12]
 8003618:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800361a:	4b63      	ldr	r3, [pc, #396]	; (80037a8 <MX_GPIO_Init+0x1d4>)
 800361c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800361e:	4a62      	ldr	r2, [pc, #392]	; (80037a8 <MX_GPIO_Init+0x1d4>)
 8003620:	f043 0301 	orr.w	r3, r3, #1
 8003624:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003626:	4b60      	ldr	r3, [pc, #384]	; (80037a8 <MX_GPIO_Init+0x1d4>)
 8003628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	60bb      	str	r3, [r7, #8]
 8003630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003632:	4b5d      	ldr	r3, [pc, #372]	; (80037a8 <MX_GPIO_Init+0x1d4>)
 8003634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003636:	4a5c      	ldr	r2, [pc, #368]	; (80037a8 <MX_GPIO_Init+0x1d4>)
 8003638:	f043 0302 	orr.w	r3, r3, #2
 800363c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800363e:	4b5a      	ldr	r3, [pc, #360]	; (80037a8 <MX_GPIO_Init+0x1d4>)
 8003640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	607b      	str	r3, [r7, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800364a:	4b57      	ldr	r3, [pc, #348]	; (80037a8 <MX_GPIO_Init+0x1d4>)
 800364c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800364e:	4a56      	ldr	r2, [pc, #344]	; (80037a8 <MX_GPIO_Init+0x1d4>)
 8003650:	f043 0308 	orr.w	r3, r3, #8
 8003654:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003656:	4b54      	ldr	r3, [pc, #336]	; (80037a8 <MX_GPIO_Init+0x1d4>)
 8003658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800365a:	f003 0308 	and.w	r3, r3, #8
 800365e:	603b      	str	r3, [r7, #0]
 8003660:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TIK_LED_Pin|ERR_LED_Pin, GPIO_PIN_RESET);
 8003662:	2200      	movs	r2, #0
 8003664:	2109      	movs	r1, #9
 8003666:	4851      	ldr	r0, [pc, #324]	; (80037ac <MX_GPIO_Init+0x1d8>)
 8003668:	f003 fd16 	bl	8007098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800366c:	2201      	movs	r2, #1
 800366e:	2110      	movs	r1, #16
 8003670:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003674:	f003 fd10 	bl	8007098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|SPI1_DC_Pin, GPIO_PIN_SET);
 8003678:	2201      	movs	r2, #1
 800367a:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 800367e:	484c      	ldr	r0, [pc, #304]	; (80037b0 <MX_GPIO_Init+0x1dc>)
 8003680:	f003 fd0a 	bl	8007098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8003684:	2201      	movs	r2, #1
 8003686:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800368a:	4848      	ldr	r0, [pc, #288]	; (80037ac <MX_GPIO_Init+0x1d8>)
 800368c:	f003 fd04 	bl	8007098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_RST_GPIO_Port, SPI1_RST_Pin, GPIO_PIN_SET);
 8003690:	2201      	movs	r2, #1
 8003692:	2104      	movs	r1, #4
 8003694:	4847      	ldr	r0, [pc, #284]	; (80037b4 <MX_GPIO_Init+0x1e0>)
 8003696:	f003 fcff 	bl	8007098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TIK_LED_Pin */
  GPIO_InitStruct.Pin = TIK_LED_Pin;
 800369a:	2301      	movs	r3, #1
 800369c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800369e:	2301      	movs	r3, #1
 80036a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80036a2:	2302      	movs	r3, #2
 80036a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80036a6:	2301      	movs	r3, #1
 80036a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TIK_LED_GPIO_Port, &GPIO_InitStruct);
 80036aa:	f107 0314 	add.w	r3, r7, #20
 80036ae:	4619      	mov	r1, r3
 80036b0:	483e      	ldr	r0, [pc, #248]	; (80037ac <MX_GPIO_Init+0x1d8>)
 80036b2:	f003 fb2f 	bl	8006d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY0_Pin KEY1_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin;
 80036b6:	2306      	movs	r3, #6
 80036b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80036ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80036be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036c0:	2301      	movs	r3, #1
 80036c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036c4:	f107 0314 	add.w	r3, r7, #20
 80036c8:	4619      	mov	r1, r3
 80036ca:	4838      	ldr	r0, [pc, #224]	; (80037ac <MX_GPIO_Init+0x1d8>)
 80036cc:	f003 fb22 	bl	8006d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : ERR_LED_Pin */
  GPIO_InitStruct.Pin = ERR_LED_Pin;
 80036d0:	2308      	movs	r3, #8
 80036d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036d4:	2301      	movs	r3, #1
 80036d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d8:	2300      	movs	r3, #0
 80036da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80036dc:	2301      	movs	r3, #1
 80036de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERR_LED_GPIO_Port, &GPIO_InitStruct);
 80036e0:	f107 0314 	add.w	r3, r7, #20
 80036e4:	4619      	mov	r1, r3
 80036e6:	4831      	ldr	r0, [pc, #196]	; (80037ac <MX_GPIO_Init+0x1d8>)
 80036e8:	f003 fb14 	bl	8006d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80036ec:	2310      	movs	r3, #16
 80036ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036f0:	2301      	movs	r3, #1
 80036f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f4:	2300      	movs	r3, #0
 80036f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036f8:	2302      	movs	r3, #2
 80036fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80036fc:	f107 0314 	add.w	r3, r7, #20
 8003700:	4619      	mov	r1, r3
 8003702:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003706:	f003 fb05 	bl	8006d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 800370a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800370e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003710:	2301      	movs	r3, #1
 8003712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003714:	2301      	movs	r3, #1
 8003716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003718:	2302      	movs	r3, #2
 800371a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 800371c:	f107 0314 	add.w	r3, r7, #20
 8003720:	4619      	mov	r1, r3
 8003722:	4823      	ldr	r0, [pc, #140]	; (80037b0 <MX_GPIO_Init+0x1dc>)
 8003724:	f003 faf6 	bl	8006d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8003728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800372c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800372e:	2301      	movs	r3, #1
 8003730:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003732:	2301      	movs	r3, #1
 8003734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003736:	2301      	movs	r3, #1
 8003738:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 800373a:	f107 0314 	add.w	r3, r7, #20
 800373e:	4619      	mov	r1, r3
 8003740:	481a      	ldr	r0, [pc, #104]	; (80037ac <MX_GPIO_Init+0x1d8>)
 8003742:	f003 fae7 	bl	8006d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_RST_Pin */
  GPIO_InitStruct.Pin = SPI1_RST_Pin;
 8003746:	2304      	movs	r3, #4
 8003748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800374a:	2301      	movs	r3, #1
 800374c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800374e:	2301      	movs	r3, #1
 8003750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003752:	2302      	movs	r3, #2
 8003754:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_RST_GPIO_Port, &GPIO_InitStruct);
 8003756:	f107 0314 	add.w	r3, r7, #20
 800375a:	4619      	mov	r1, r3
 800375c:	4815      	ldr	r0, [pc, #84]	; (80037b4 <MX_GPIO_Init+0x1e0>)
 800375e:	f003 fad9 	bl	8006d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_DC_Pin */
  GPIO_InitStruct.Pin = SPI1_DC_Pin;
 8003762:	2320      	movs	r3, #32
 8003764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003766:	2301      	movs	r3, #1
 8003768:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800376a:	2300      	movs	r3, #0
 800376c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800376e:	2302      	movs	r3, #2
 8003770:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_DC_GPIO_Port, &GPIO_InitStruct);
 8003772:	f107 0314 	add.w	r3, r7, #20
 8003776:	4619      	mov	r1, r3
 8003778:	480d      	ldr	r0, [pc, #52]	; (80037b0 <MX_GPIO_Init+0x1dc>)
 800377a:	f003 facb 	bl	8006d14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800377e:	2200      	movs	r2, #0
 8003780:	2100      	movs	r1, #0
 8003782:	2007      	movs	r0, #7
 8003784:	f002 fffd 	bl	8006782 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003788:	2007      	movs	r0, #7
 800378a:	f003 f816 	bl	80067ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800378e:	2200      	movs	r2, #0
 8003790:	2100      	movs	r1, #0
 8003792:	2008      	movs	r0, #8
 8003794:	f002 fff5 	bl	8006782 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003798:	2008      	movs	r0, #8
 800379a:	f003 f80e 	bl	80067ba <HAL_NVIC_EnableIRQ>

}
 800379e:	bf00      	nop
 80037a0:	3728      	adds	r7, #40	; 0x28
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	40021000 	.word	0x40021000
 80037ac:	48000800 	.word	0x48000800
 80037b0:	48000400 	.word	0x48000400
 80037b4:	48000c00 	.word	0x48000c00

080037b8 <hexToBin>:

//-------------------------------------------------------------------------------------------
//      Преобразует два символа строки из hex-формата в двоичный
//
uint8_t hexToBin(char *sc)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
char st = 0, ml = 0;
 80037c0:	2300      	movs	r3, #0
 80037c2:	73fb      	strb	r3, [r7, #15]
 80037c4:	2300      	movs	r3, #0
 80037c6:	73bb      	strb	r3, [r7, #14]

	if ((sc[0] >= '0') && (sc[0] <= '9')) st = (sc[0] - 0x30);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2b2f      	cmp	r3, #47	; 0x2f
 80037ce:	d908      	bls.n	80037e2 <hexToBin+0x2a>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	2b39      	cmp	r3, #57	; 0x39
 80037d6:	d804      	bhi.n	80037e2 <hexToBin+0x2a>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	3b30      	subs	r3, #48	; 0x30
 80037de:	73fb      	strb	r3, [r7, #15]
 80037e0:	e018      	b.n	8003814 <hexToBin+0x5c>
	else
	if ((sc[0] >= 'A') && (sc[0] <= 'F')) st = (sc[0] - 0x37);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	2b40      	cmp	r3, #64	; 0x40
 80037e8:	d908      	bls.n	80037fc <hexToBin+0x44>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	2b46      	cmp	r3, #70	; 0x46
 80037f0:	d804      	bhi.n	80037fc <hexToBin+0x44>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	3b37      	subs	r3, #55	; 0x37
 80037f8:	73fb      	strb	r3, [r7, #15]
 80037fa:	e00b      	b.n	8003814 <hexToBin+0x5c>
	else
	if ((sc[0] >= 'a') && (sc[0] <= 'f')) st = (sc[0] - 0x57);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	2b60      	cmp	r3, #96	; 0x60
 8003802:	d907      	bls.n	8003814 <hexToBin+0x5c>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	2b66      	cmp	r3, #102	; 0x66
 800380a:	d803      	bhi.n	8003814 <hexToBin+0x5c>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	3b57      	subs	r3, #87	; 0x57
 8003812:	73fb      	strb	r3, [r7, #15]

	if ((sc[1] >= '0') && (sc[1] <= '9')) ml = (sc[1] - 0x30);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3301      	adds	r3, #1
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	2b2f      	cmp	r3, #47	; 0x2f
 800381c:	d90a      	bls.n	8003834 <hexToBin+0x7c>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3301      	adds	r3, #1
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	2b39      	cmp	r3, #57	; 0x39
 8003826:	d805      	bhi.n	8003834 <hexToBin+0x7c>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3301      	adds	r3, #1
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	3b30      	subs	r3, #48	; 0x30
 8003830:	73bb      	strb	r3, [r7, #14]
 8003832:	e01e      	b.n	8003872 <hexToBin+0xba>
	else
	if ((sc[1] >= 'A') && (sc[1] <= 'F')) ml = (sc[1] - 0x37);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3301      	adds	r3, #1
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	2b40      	cmp	r3, #64	; 0x40
 800383c:	d90a      	bls.n	8003854 <hexToBin+0x9c>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3301      	adds	r3, #1
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	2b46      	cmp	r3, #70	; 0x46
 8003846:	d805      	bhi.n	8003854 <hexToBin+0x9c>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	3301      	adds	r3, #1
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	3b37      	subs	r3, #55	; 0x37
 8003850:	73bb      	strb	r3, [r7, #14]
 8003852:	e00e      	b.n	8003872 <hexToBin+0xba>
	else
	if ((sc[1] >= 'a') && (sc[1] <= 'f')) ml = (sc[1] - 0x57);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3301      	adds	r3, #1
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	2b60      	cmp	r3, #96	; 0x60
 800385c:	d909      	bls.n	8003872 <hexToBin+0xba>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	3301      	adds	r3, #1
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	2b66      	cmp	r3, #102	; 0x66
 8003866:	d804      	bhi.n	8003872 <hexToBin+0xba>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3301      	adds	r3, #1
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	3b57      	subs	r3, #87	; 0x57
 8003870:	73bb      	strb	r3, [r7, #14]

	return ((st << 4) | (ml & 0x0f));
 8003872:	7bfb      	ldrb	r3, [r7, #15]
 8003874:	011b      	lsls	r3, r3, #4
 8003876:	b25a      	sxtb	r2, r3
 8003878:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800387c:	f003 030f 	and.w	r3, r3, #15
 8003880:	b25b      	sxtb	r3, r3
 8003882:	4313      	orrs	r3, r2
 8003884:	b25b      	sxtb	r3, r3
 8003886:	b2db      	uxtb	r3, r3

}
 8003888:	4618      	mov	r0, r3
 800388a:	3714      	adds	r7, #20
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <getEvtCount>:


#ifdef SET_FIFO_MODE
//-------------------------------------------------------------------------------------------
uint8_t getEvtCount()
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
	return cnt_evt;
 8003898:	4b03      	ldr	r3, [pc, #12]	; (80038a8 <getEvtCount+0x14>)
 800389a:	781b      	ldrb	r3, [r3, #0]
}
 800389c:	4618      	mov	r0, r3
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	20001c7a 	.word	0x20001c7a

080038ac <putEvt>:
//-------------------------------------------------------------------------------------------
void putEvt(int evt)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]

	//while (lock_fifo);
	//lock_fifo = true;

	if (cnt_evt > (MAX_FIFO_SIZE - 3)) {
 80038b4:	4b30      	ldr	r3, [pc, #192]	; (8003978 <putEvt+0xcc>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	2b3d      	cmp	r3, #61	; 0x3d
 80038ba:	d907      	bls.n	80038cc <putEvt+0x20>
		devError |= devFIFO;
 80038bc:	4b2f      	ldr	r3, [pc, #188]	; (800397c <putEvt+0xd0>)
 80038be:	881b      	ldrh	r3, [r3, #0]
 80038c0:	f043 0310 	orr.w	r3, r3, #16
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	4b2d      	ldr	r3, [pc, #180]	; (800397c <putEvt+0xd0>)
 80038c8:	801a      	strh	r2, [r3, #0]
		//lock_fifo = false;
		return;
 80038ca:	e051      	b.n	8003970 <putEvt+0xc4>
	}

	HAL_NVIC_DisableIRQ(USART2_IRQn);
 80038cc:	2026      	movs	r0, #38	; 0x26
 80038ce:	f002 ff82 	bl	80067d6 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(TIM4_IRQn);
 80038d2:	201e      	movs	r0, #30
 80038d4:	f002 ff7f 	bl	80067d6 <HAL_NVIC_DisableIRQ>

	if (cnt_evt >= MAX_FIFO_SIZE) {
 80038d8:	4b27      	ldr	r3, [pc, #156]	; (8003978 <putEvt+0xcc>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	2b3f      	cmp	r3, #63	; 0x3f
 80038de:	d906      	bls.n	80038ee <putEvt+0x42>
			wr_evt_err++;
 80038e0:	4b27      	ldr	r3, [pc, #156]	; (8003980 <putEvt+0xd4>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	3301      	adds	r3, #1
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	4b25      	ldr	r3, [pc, #148]	; (8003980 <putEvt+0xd4>)
 80038ea:	701a      	strb	r2, [r3, #0]
 80038ec:	e027      	b.n	800393e <putEvt+0x92>
		} else {
			evt_fifo[wr_evt_adr] = evt;
 80038ee:	4b25      	ldr	r3, [pc, #148]	; (8003984 <putEvt+0xd8>)
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	4619      	mov	r1, r3
 80038f4:	4a24      	ldr	r2, [pc, #144]	; (8003988 <putEvt+0xdc>)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			cnt_evt++;
 80038fc:	4b1e      	ldr	r3, [pc, #120]	; (8003978 <putEvt+0xcc>)
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	3301      	adds	r3, #1
 8003902:	b2da      	uxtb	r2, r3
 8003904:	4b1c      	ldr	r3, [pc, #112]	; (8003978 <putEvt+0xcc>)
 8003906:	701a      	strb	r2, [r3, #0]
			if (wr_evt_adr < (MAX_FIFO_SIZE - 1) ) {
 8003908:	4b1e      	ldr	r3, [pc, #120]	; (8003984 <putEvt+0xd8>)
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	2b3e      	cmp	r3, #62	; 0x3e
 800390e:	d806      	bhi.n	800391e <putEvt+0x72>
				wr_evt_adr++;
 8003910:	4b1c      	ldr	r3, [pc, #112]	; (8003984 <putEvt+0xd8>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	3301      	adds	r3, #1
 8003916:	b2da      	uxtb	r2, r3
 8003918:	4b1a      	ldr	r3, [pc, #104]	; (8003984 <putEvt+0xd8>)
 800391a:	701a      	strb	r2, [r3, #0]
 800391c:	e002      	b.n	8003924 <putEvt+0x78>
			} else  {
				wr_evt_adr = 0;
 800391e:	4b19      	ldr	r3, [pc, #100]	; (8003984 <putEvt+0xd8>)
 8003920:	2200      	movs	r2, #0
 8003922:	701a      	strb	r2, [r3, #0]
			}
			wr_evt_err = 0;
 8003924:	4b16      	ldr	r3, [pc, #88]	; (8003980 <putEvt+0xd4>)
 8003926:	2200      	movs	r2, #0
 8003928:	701a      	strb	r2, [r3, #0]
			if (cnt_evt > max_evt) max_evt = cnt_evt;
 800392a:	4b13      	ldr	r3, [pc, #76]	; (8003978 <putEvt+0xcc>)
 800392c:	781a      	ldrb	r2, [r3, #0]
 800392e:	4b17      	ldr	r3, [pc, #92]	; (800398c <putEvt+0xe0>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	429a      	cmp	r2, r3
 8003934:	d903      	bls.n	800393e <putEvt+0x92>
 8003936:	4b10      	ldr	r3, [pc, #64]	; (8003978 <putEvt+0xcc>)
 8003938:	781a      	ldrb	r2, [r3, #0]
 800393a:	4b14      	ldr	r3, [pc, #80]	; (800398c <putEvt+0xe0>)
 800393c:	701a      	strb	r2, [r3, #0]
		}

		if (wr_evt_err) devError |= devFIFO;
 800393e:	4b10      	ldr	r3, [pc, #64]	; (8003980 <putEvt+0xd4>)
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d007      	beq.n	8003956 <putEvt+0xaa>
 8003946:	4b0d      	ldr	r3, [pc, #52]	; (800397c <putEvt+0xd0>)
 8003948:	881b      	ldrh	r3, [r3, #0]
 800394a:	f043 0310 	orr.w	r3, r3, #16
 800394e:	b29a      	uxth	r2, r3
 8003950:	4b0a      	ldr	r3, [pc, #40]	; (800397c <putEvt+0xd0>)
 8003952:	801a      	strh	r2, [r3, #0]
 8003954:	e006      	b.n	8003964 <putEvt+0xb8>
				   else devError &= ~devFIFO;
 8003956:	4b09      	ldr	r3, [pc, #36]	; (800397c <putEvt+0xd0>)
 8003958:	881b      	ldrh	r3, [r3, #0]
 800395a:	f023 0310 	bic.w	r3, r3, #16
 800395e:	b29a      	uxth	r2, r3
 8003960:	4b06      	ldr	r3, [pc, #24]	; (800397c <putEvt+0xd0>)
 8003962:	801a      	strh	r2, [r3, #0]

		HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003964:	201e      	movs	r0, #30
 8003966:	f002 ff28 	bl	80067ba <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 800396a:	2026      	movs	r0, #38	; 0x26
 800396c:	f002 ff25 	bl	80067ba <HAL_NVIC_EnableIRQ>

		//lock_fifo = false;
}
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	20001c7a 	.word	0x20001c7a
 800397c:	20001860 	.word	0x20001860
 8003980:	20001c79 	.word	0x20001c79
 8003984:	20001c78 	.word	0x20001c78
 8003988:	200000b4 	.word	0x200000b4
 800398c:	20001c7b 	.word	0x20001c7b

08003990 <getEvt>:
//-------------------------------------------------------------------------------------------
int getEvt()
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
int ret = evt_None;
 8003996:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800399a:	607b      	str	r3, [r7, #4]

	//while (lock_fifo);
	//lock_fifo = true;

	HAL_NVIC_DisableIRQ(USART2_IRQn);
 800399c:	2026      	movs	r0, #38	; 0x26
 800399e:	f002 ff1a 	bl	80067d6 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(TIM4_IRQn);
 80039a2:	201e      	movs	r0, #30
 80039a4:	f002 ff17 	bl	80067d6 <HAL_NVIC_DisableIRQ>
	if (cnt_evt) {
 80039a8:	4b16      	ldr	r3, [pc, #88]	; (8003a04 <getEvt+0x74>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d01e      	beq.n	80039ee <getEvt+0x5e>
		ret = evt_fifo[rd_evt_adr];
 80039b0:	4b15      	ldr	r3, [pc, #84]	; (8003a08 <getEvt+0x78>)
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	461a      	mov	r2, r3
 80039b6:	4b15      	ldr	r3, [pc, #84]	; (8003a0c <getEvt+0x7c>)
 80039b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039bc:	607b      	str	r3, [r7, #4]
		if (cnt_evt) cnt_evt--;
 80039be:	4b11      	ldr	r3, [pc, #68]	; (8003a04 <getEvt+0x74>)
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d005      	beq.n	80039d2 <getEvt+0x42>
 80039c6:	4b0f      	ldr	r3, [pc, #60]	; (8003a04 <getEvt+0x74>)
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	3b01      	subs	r3, #1
 80039cc:	b2da      	uxtb	r2, r3
 80039ce:	4b0d      	ldr	r3, [pc, #52]	; (8003a04 <getEvt+0x74>)
 80039d0:	701a      	strb	r2, [r3, #0]
		if (rd_evt_adr < (MAX_FIFO_SIZE - 1) ) {
 80039d2:	4b0d      	ldr	r3, [pc, #52]	; (8003a08 <getEvt+0x78>)
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	2b3e      	cmp	r3, #62	; 0x3e
 80039d8:	d806      	bhi.n	80039e8 <getEvt+0x58>
			rd_evt_adr++;
 80039da:	4b0b      	ldr	r3, [pc, #44]	; (8003a08 <getEvt+0x78>)
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	3301      	adds	r3, #1
 80039e0:	b2da      	uxtb	r2, r3
 80039e2:	4b09      	ldr	r3, [pc, #36]	; (8003a08 <getEvt+0x78>)
 80039e4:	701a      	strb	r2, [r3, #0]
 80039e6:	e002      	b.n	80039ee <getEvt+0x5e>
		} else {
			rd_evt_adr = 0;
 80039e8:	4b07      	ldr	r3, [pc, #28]	; (8003a08 <getEvt+0x78>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	701a      	strb	r2, [r3, #0]
		}
	}

	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80039ee:	201e      	movs	r0, #30
 80039f0:	f002 fee3 	bl	80067ba <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 80039f4:	2026      	movs	r0, #38	; 0x26
 80039f6:	f002 fee0 	bl	80067ba <HAL_NVIC_EnableIRQ>

	//lock_fifo = false;

	return ret;
 80039fa:	687b      	ldr	r3, [r7, #4]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	20001c7a 	.word	0x20001c7a
 8003a08:	20001c77 	.word	0x20001c77
 8003a0c:	200000b4 	.word	0x200000b4

08003a10 <nameStation>:
//-------------------------------------------------------------------------------------------
#ifdef SET_DISPLAY

//-------------------------------------------------------------------------------------------
const char *nameStation(float fr)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	ed87 0a01 	vstr	s0, [r7, #4]
int8_t ik = -1;
 8003a1a:	23ff      	movs	r3, #255	; 0xff
 8003a1c:	73fb      	strb	r3, [r7, #15]

	for (int8_t i = 0; i < MAX_LIST; i++) {
 8003a1e:	2300      	movs	r3, #0
 8003a20:	73bb      	strb	r3, [r7, #14]
 8003a22:	e01b      	b.n	8003a5c <nameStation+0x4c>
		if (list[i].freq == fr) {
 8003a24:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8003a28:	491a      	ldr	r1, [pc, #104]	; (8003a94 <nameStation+0x84>)
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	4413      	add	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	440b      	add	r3, r1
 8003a34:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8003a38:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a3c:	ee07 3a10 	vmov	s14, r3
 8003a40:	eef4 7a47 	vcmp.f32	s15, s14
 8003a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a48:	d102      	bne.n	8003a50 <nameStation+0x40>
			ik = i;
 8003a4a:	7bbb      	ldrb	r3, [r7, #14]
 8003a4c:	73fb      	strb	r3, [r7, #15]
			break;
 8003a4e:	e009      	b.n	8003a64 <nameStation+0x54>
	for (int8_t i = 0; i < MAX_LIST; i++) {
 8003a50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	3301      	adds	r3, #1
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	73bb      	strb	r3, [r7, #14]
 8003a5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a60:	2b18      	cmp	r3, #24
 8003a62:	dddf      	ble.n	8003a24 <nameStation+0x14>
		}
	}

	if (ik != -1) return list[ik].name;
 8003a64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a6c:	d009      	beq.n	8003a82 <nameStation+0x72>
 8003a6e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8003a72:	4613      	mov	r3, r2
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	4413      	add	r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	4a06      	ldr	r2, [pc, #24]	; (8003a94 <nameStation+0x84>)
 8003a7c:	4413      	add	r3, r2
 8003a7e:	3305      	adds	r3, #5
 8003a80:	e001      	b.n	8003a86 <nameStation+0x76>
			 else return noneStation;
 8003a82:	4b05      	ldr	r3, [pc, #20]	; (8003a98 <nameStation+0x88>)
 8003a84:	681b      	ldr	r3, [r3, #0]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3714      	adds	r7, #20
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	20002cc0 	.word	0x20002cc0
 8003a98:	200001dc 	.word	0x200001dc

08003a9c <getNextList>:
//-------------------------------------------------------------------------------------------
float getNextList(float fr, uint8_t up, uint8_t *band)
{
 8003a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003aa0:	b08e      	sub	sp, #56	; 0x38
 8003aa2:	af08      	add	r7, sp, #32
 8003aa4:	ed87 0a03 	vstr	s0, [r7, #12]
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	6079      	str	r1, [r7, #4]
 8003aac:	72fb      	strb	r3, [r7, #11]
float ret = fr;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	613b      	str	r3, [r7, #16]
int8_t ik = -1;
 8003ab2:	23ff      	movs	r3, #255	; 0xff
 8003ab4:	75fb      	strb	r3, [r7, #23]

	for (int8_t i = 0; i < MAX_LIST; i++) {
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	75bb      	strb	r3, [r7, #22]
 8003aba:	e01b      	b.n	8003af4 <getNextList+0x58>
		if (list[i].freq == fr) {
 8003abc:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8003ac0:	4965      	ldr	r1, [pc, #404]	; (8003c58 <getNextList+0x1bc>)
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	4413      	add	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	440b      	add	r3, r1
 8003acc:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8003ad0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ad4:	ee07 3a10 	vmov	s14, r3
 8003ad8:	eef4 7a47 	vcmp.f32	s15, s14
 8003adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae0:	d102      	bne.n	8003ae8 <getNextList+0x4c>
			ik = i;
 8003ae2:	7dbb      	ldrb	r3, [r7, #22]
 8003ae4:	75fb      	strb	r3, [r7, #23]
			break;
 8003ae6:	e009      	b.n	8003afc <getNextList+0x60>
	for (int8_t i = 0; i < MAX_LIST; i++) {
 8003ae8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	3301      	adds	r3, #1
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	75bb      	strb	r3, [r7, #22]
 8003af4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003af8:	2b18      	cmp	r3, #24
 8003afa:	dddf      	ble.n	8003abc <getNextList+0x20>
		}
	}
	if (ik != -1) {
 8003afc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b04:	d01b      	beq.n	8003b3e <getNextList+0xa2>
		if (up) {
 8003b06:	7afb      	ldrb	r3, [r7, #11]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00a      	beq.n	8003b22 <getNextList+0x86>
			if (++ik == MAX_LIST) ik = 0;
 8003b0c:	7dfb      	ldrb	r3, [r7, #23]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	75fb      	strb	r3, [r7, #23]
 8003b14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b18:	2b19      	cmp	r3, #25
 8003b1a:	d161      	bne.n	8003be0 <getNextList+0x144>
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	75fb      	strb	r3, [r7, #23]
 8003b20:	e05e      	b.n	8003be0 <getNextList+0x144>
		} else {
			if (ik != 0) ik--; else ik = MAX_LIST - 1;
 8003b22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d006      	beq.n	8003b38 <getNextList+0x9c>
 8003b2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	3b01      	subs	r3, #1
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	75fb      	strb	r3, [r7, #23]
 8003b36:	e053      	b.n	8003be0 <getNextList+0x144>
 8003b38:	2318      	movs	r3, #24
 8003b3a:	75fb      	strb	r3, [r7, #23]
 8003b3c:	e050      	b.n	8003be0 <getNextList+0x144>
		}
	} else {
		if (up) {// seek_up
 8003b3e:	7afb      	ldrb	r3, [r7, #11]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d023      	beq.n	8003b8c <getNextList+0xf0>
			for (int8_t i = ik; i < MAX_LIST; i++) {
 8003b44:	7dfb      	ldrb	r3, [r7, #23]
 8003b46:	757b      	strb	r3, [r7, #21]
 8003b48:	e01b      	b.n	8003b82 <getNextList+0xe6>
				if (list[i].freq > fr) {
 8003b4a:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8003b4e:	4942      	ldr	r1, [pc, #264]	; (8003c58 <getNextList+0x1bc>)
 8003b50:	4613      	mov	r3, r2
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	4413      	add	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	440b      	add	r3, r1
 8003b5a:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8003b5e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b62:	ee07 3a10 	vmov	s14, r3
 8003b66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b6e:	d502      	bpl.n	8003b76 <getNextList+0xda>
					ik = i;
 8003b70:	7d7b      	ldrb	r3, [r7, #21]
 8003b72:	75fb      	strb	r3, [r7, #23]
					break;
 8003b74:	e02d      	b.n	8003bd2 <getNextList+0x136>
			for (int8_t i = ik; i < MAX_LIST; i++) {
 8003b76:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	757b      	strb	r3, [r7, #21]
 8003b82:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003b86:	2b18      	cmp	r3, #24
 8003b88:	dddf      	ble.n	8003b4a <getNextList+0xae>
 8003b8a:	e022      	b.n	8003bd2 <getNextList+0x136>
				}
			}
		} else {// seek_down
			for (int8_t i = ik; i <= 0; i--) {
 8003b8c:	7dfb      	ldrb	r3, [r7, #23]
 8003b8e:	753b      	strb	r3, [r7, #20]
 8003b90:	e01b      	b.n	8003bca <getNextList+0x12e>
				if (list[i].freq < fr) {
 8003b92:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003b96:	4930      	ldr	r1, [pc, #192]	; (8003c58 <getNextList+0x1bc>)
 8003b98:	4613      	mov	r3, r2
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	4413      	add	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	440b      	add	r3, r1
 8003ba2:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8003ba6:	edd7 7a03 	vldr	s15, [r7, #12]
 8003baa:	ee07 3a10 	vmov	s14, r3
 8003bae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb6:	dd02      	ble.n	8003bbe <getNextList+0x122>
					ik = i;
 8003bb8:	7d3b      	ldrb	r3, [r7, #20]
 8003bba:	75fb      	strb	r3, [r7, #23]
					break;
 8003bbc:	e009      	b.n	8003bd2 <getNextList+0x136>
			for (int8_t i = ik; i <= 0; i--) {
 8003bbe:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	753b      	strb	r3, [r7, #20]
 8003bca:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	dddf      	ble.n	8003b92 <getNextList+0xf6>
				}
			}
		}
		if (ik == -1) ik = 0;
 8003bd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003bd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bda:	d101      	bne.n	8003be0 <getNextList+0x144>
 8003bdc:	2300      	movs	r3, #0
 8003bde:	75fb      	strb	r3, [r7, #23]
	}
	ret = list[ik].freq;
 8003be0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8003be4:	491c      	ldr	r1, [pc, #112]	; (8003c58 <getNextList+0x1bc>)
 8003be6:	4613      	mov	r3, r2
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	4413      	add	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	440b      	add	r3, r1
 8003bf0:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8003bf4:	613b      	str	r3, [r7, #16]
	*band = list[ik].band;
 8003bf6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8003bfa:	4917      	ldr	r1, [pc, #92]	; (8003c58 <getNextList+0x1bc>)
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	4413      	add	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	781a      	ldrb	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	701a      	strb	r2, [r3, #0]
	Report(1, "[%s] up=%u ik=%d, fr=%.1f ret=%.1f band=%u\r\n", __func__, up, ik, fr, ret, *band);
 8003c0c:	f897 800b 	ldrb.w	r8, [r7, #11]
 8003c10:	f997 6017 	ldrsb.w	r6, [r7, #23]
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f7fc fc97 	bl	8000548 <__aeabi_f2d>
 8003c1a:	4604      	mov	r4, r0
 8003c1c:	460d      	mov	r5, r1
 8003c1e:	6938      	ldr	r0, [r7, #16]
 8003c20:	f7fc fc92 	bl	8000548 <__aeabi_f2d>
 8003c24:	4602      	mov	r2, r0
 8003c26:	460b      	mov	r3, r1
 8003c28:	6879      	ldr	r1, [r7, #4]
 8003c2a:	7809      	ldrb	r1, [r1, #0]
 8003c2c:	9106      	str	r1, [sp, #24]
 8003c2e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003c32:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003c36:	9600      	str	r6, [sp, #0]
 8003c38:	4643      	mov	r3, r8
 8003c3a:	4a08      	ldr	r2, [pc, #32]	; (8003c5c <getNextList+0x1c0>)
 8003c3c:	4908      	ldr	r1, [pc, #32]	; (8003c60 <getNextList+0x1c4>)
 8003c3e:	2001      	movs	r0, #1
 8003c40:	f000 f99e 	bl	8003f80 <Report>

	return ret;
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	ee07 3a90 	vmov	s15, r3
}
 8003c4a:	eeb0 0a67 	vmov.f32	s0, s15
 8003c4e:	3718      	adds	r7, #24
 8003c50:	46bd      	mov	sp, r7
 8003c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c56:	bf00      	nop
 8003c58:	20002cc0 	.word	0x20002cc0
 8003c5c:	08013dd0 	.word	0x08013dd0
 8003c60:	08012e0c 	.word	0x08012e0c

08003c64 <showLine>:
//-------------------------------------------------------------------------------------------
void showLine(char *msg, uint16_t lin, int *last_len, bool update)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b08a      	sub	sp, #40	; 0x28
 8003c68:	af02      	add	r7, sp, #8
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	607a      	str	r2, [r7, #4]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	460b      	mov	r3, r1
 8003c72:	817b      	strh	r3, [r7, #10]
 8003c74:	4613      	mov	r3, r2
 8003c76:	727b      	strb	r3, [r7, #9]
int il = strlen(msg);
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f7fc faa9 	bl	80001d0 <strlen>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	617b      	str	r3, [r7, #20]
int xf = ( (SCREEN_WIDTH - (lfnt->FontWidth * il) ) >> 1);// & 0x7f;
 8003c82:	4b2e      	ldr	r3, [pc, #184]	; (8003d3c <showLine+0xd8>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	461a      	mov	r2, r3
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	fb02 f303 	mul.w	r3, r2, r3
 8003c90:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8003c94:	105b      	asrs	r3, r3, #1
 8003c96:	61fb      	str	r3, [r7, #28]
bool yes = false;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	76fb      	strb	r3, [r7, #27]

	if (*last_len > il) {
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	da0d      	bge.n	8003cc2 <showLine+0x5e>
		ST7565_DrawFilledRectangle(2, lin, SCREEN_WIDTH - 4, lfnt->FontHeight, PIX_OFF);
 8003ca6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003caa:	4b24      	ldr	r3, [pc, #144]	; (8003d3c <showLine+0xd8>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	785b      	ldrb	r3, [r3, #1]
 8003cb0:	b21b      	sxth	r3, r3
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	9200      	str	r2, [sp, #0]
 8003cb6:	227c      	movs	r2, #124	; 0x7c
 8003cb8:	2002      	movs	r0, #2
 8003cba:	f7fd ffb0 	bl	8001c1e <ST7565_DrawFilledRectangle>
		yes = true;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	76fb      	strb	r3, [r7, #27]
	}
	*last_len = il;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	601a      	str	r2, [r3, #0]
	if (*msg > 0x7f) {
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	b25b      	sxtb	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	da03      	bge.n	8003cda <showLine+0x76>
		xf += il;
 8003cd2:	69fa      	ldr	r2, [r7, #28]
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	61fb      	str	r3, [r7, #28]
	}
	if (!yes) ST7565_DrawFilledRectangle(2, lin, SCREEN_WIDTH - 4, lfnt->FontHeight, PIX_OFF);
 8003cda:	7efb      	ldrb	r3, [r7, #27]
 8003cdc:	f083 0301 	eor.w	r3, r3, #1
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00b      	beq.n	8003cfe <showLine+0x9a>
 8003ce6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003cea:	4b14      	ldr	r3, [pc, #80]	; (8003d3c <showLine+0xd8>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	785b      	ldrb	r3, [r3, #1]
 8003cf0:	b21b      	sxth	r3, r3
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	9200      	str	r2, [sp, #0]
 8003cf6:	227c      	movs	r2, #124	; 0x7c
 8003cf8:	2002      	movs	r0, #2
 8003cfa:	f7fd ff90 	bl	8001c1e <ST7565_DrawFilledRectangle>

	if ((!xf) || (xf > (SCREEN_WIDTH - 4))) xf = 1;
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d002      	beq.n	8003d0a <showLine+0xa6>
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	2b7c      	cmp	r3, #124	; 0x7c
 8003d08:	dd01      	ble.n	8003d0e <showLine+0xaa>
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	61fb      	str	r3, [r7, #28]
	ST7565_Print(xf, lin, msg, lfnt, 1, PIX_ON);
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	b218      	sxth	r0, r3
 8003d12:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003d16:	4b09      	ldr	r3, [pc, #36]	; (8003d3c <showLine+0xd8>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	9201      	str	r2, [sp, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	9200      	str	r2, [sp, #0]
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	f7fd fd22 	bl	800176c <ST7565_Print>
	if (update) ST7565_Update();
 8003d28:	7a7b      	ldrb	r3, [r7, #9]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <showLine+0xce>
 8003d2e:	f7fd fb6d 	bl	800140c <ST7565_Update>
}
 8003d32:	bf00      	nop
 8003d34:	3720      	adds	r7, #32
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	20002ca8 	.word	0x20002ca8

08003d40 <errLedOn>:
#endif
//-------------------------------------------------------------------------------------------
void errLedOn(bool on)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	4603      	mov	r3, r0
 8003d48:	71fb      	strb	r3, [r7, #7]
	if (on)
 8003d4a:	79fb      	ldrb	r3, [r7, #7]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d005      	beq.n	8003d5c <errLedOn+0x1c>
		HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_SET);//LED ON
 8003d50:	2201      	movs	r2, #1
 8003d52:	2108      	movs	r1, #8
 8003d54:	4806      	ldr	r0, [pc, #24]	; (8003d70 <errLedOn+0x30>)
 8003d56:	f003 f99f 	bl	8007098 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_RESET);//LED OFF
}
 8003d5a:	e004      	b.n	8003d66 <errLedOn+0x26>
		HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_RESET);//LED OFF
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	2108      	movs	r1, #8
 8003d60:	4803      	ldr	r0, [pc, #12]	; (8003d70 <errLedOn+0x30>)
 8003d62:	f003 f999 	bl	8007098 <HAL_GPIO_WritePin>
}
 8003d66:	bf00      	nop
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	48000800 	.word	0x48000800

08003d74 <get_secCounter>:
//------------------------------------------------------------------------------------
uint32_t get_secCounter()
{
 8003d74:	b480      	push	{r7}
 8003d76:	af00      	add	r7, sp, #0
	return secCounter;
 8003d78:	4b03      	ldr	r3, [pc, #12]	; (8003d88 <get_secCounter+0x14>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	20001864 	.word	0x20001864

08003d8c <set_Date>:

    for (i = 0; i < strlen(st); i++) *(st + i) = toupper(*(st + i));
}
//------------------------------------------------------------------------------------------
void set_Date(uint32_t usec)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b094      	sub	sp, #80	; 0x50
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
struct tm ts;
time_t ep = (time_t)usec;
 8003d94:	6879      	ldr	r1, [r7, #4]
 8003d96:	2000      	movs	r0, #0
 8003d98:	460a      	mov	r2, r1
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	e9c7 2308 	strd	r2, r3, [r7, #32]

	gmtime_r(&ep, &ts);
 8003da0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003da4:	f107 0320 	add.w	r3, r7, #32
 8003da8:	4611      	mov	r1, r2
 8003daa:	4618      	mov	r0, r3
 8003dac:	f00a f99a 	bl	800e0e4 <gmtime_r>

	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	sDate.WeekDay = ts.tm_wday;
 8003db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	723b      	strb	r3, [r7, #8]
	sDate.Month   = ts.tm_mon + 1;
 8003db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	3301      	adds	r3, #1
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	727b      	strb	r3, [r7, #9]
	sDate.Date    = ts.tm_mday;
 8003dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	72bb      	strb	r3, [r7, #10]
	sDate.Year    = ts.tm_year;
 8003dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	72fb      	strb	r3, [r7, #11]
	sTime.Hours   = ts.tm_hour + tZone;
 8003dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dce:	b2da      	uxtb	r2, r3
 8003dd0:	4b1a      	ldr	r3, [pc, #104]	; (8003e3c <set_Date+0xb0>)
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = ts.tm_min;
 8003dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = ts.tm_sec;
 8003de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	73bb      	strb	r3, [r7, #14]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 8003de6:	f107 030c 	add.w	r3, r7, #12
 8003dea:	2200      	movs	r2, #0
 8003dec:	4619      	mov	r1, r3
 8003dee:	4814      	ldr	r0, [pc, #80]	; (8003e40 <set_Date+0xb4>)
 8003df0:	f006 f9b1 	bl	800a156 <HAL_RTC_SetTime>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d007      	beq.n	8003e0a <set_Date+0x7e>
 8003dfa:	4b12      	ldr	r3, [pc, #72]	; (8003e44 <set_Date+0xb8>)
 8003dfc:	881b      	ldrh	r3, [r3, #0]
 8003dfe:	f043 0308 	orr.w	r3, r3, #8
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	4b0f      	ldr	r3, [pc, #60]	; (8003e44 <set_Date+0xb8>)
 8003e06:	801a      	strh	r2, [r3, #0]
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
		else {
			setDate = true;
		}
	}
}
 8003e08:	e014      	b.n	8003e34 <set_Date+0xa8>
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 8003e0a:	f107 0308 	add.w	r3, r7, #8
 8003e0e:	2200      	movs	r2, #0
 8003e10:	4619      	mov	r1, r3
 8003e12:	480b      	ldr	r0, [pc, #44]	; (8003e40 <set_Date+0xb4>)
 8003e14:	f006 fa98 	bl	800a348 <HAL_RTC_SetDate>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d007      	beq.n	8003e2e <set_Date+0xa2>
 8003e1e:	4b09      	ldr	r3, [pc, #36]	; (8003e44 <set_Date+0xb8>)
 8003e20:	881b      	ldrh	r3, [r3, #0]
 8003e22:	f043 0308 	orr.w	r3, r3, #8
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <set_Date+0xb8>)
 8003e2a:	801a      	strh	r2, [r3, #0]
}
 8003e2c:	e002      	b.n	8003e34 <set_Date+0xa8>
			setDate = true;
 8003e2e:	4b06      	ldr	r3, [pc, #24]	; (8003e48 <set_Date+0xbc>)
 8003e30:	2201      	movs	r2, #1
 8003e32:	701a      	strb	r2, [r3, #0]
}
 8003e34:	bf00      	nop
 8003e36:	3750      	adds	r7, #80	; 0x50
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	20001c76 	.word	0x20001c76
 8003e40:	20000904 	.word	0x20000904
 8003e44:	20001860 	.word	0x20001860
 8003e48:	20001c75 	.word	0x20001c75

08003e4c <sec2str>:

	return ep;
}
//------------------------------------------------------------------------------------------
int sec2str(char *st)
{
 8003e4c:	b590      	push	{r4, r7, lr}
 8003e4e:	b093      	sub	sp, #76	; 0x4c
 8003e50:	af04      	add	r7, sp, #16
 8003e52:	6078      	str	r0, [r7, #4]
int ret = 0;
 8003e54:	2300      	movs	r3, #0
 8003e56:	637b      	str	r3, [r7, #52]	; 0x34

	if (!setDate) {
 8003e58:	4b40      	ldr	r3, [pc, #256]	; (8003f5c <sec2str+0x110>)
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	f083 0301 	eor.w	r3, r3, #1
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d040      	beq.n	8003ee8 <sec2str+0x9c>
		uint32_t sec = get_secCounter();
 8003e66:	f7ff ff85 	bl	8003d74 <get_secCounter>
 8003e6a:	6338      	str	r0, [r7, #48]	; 0x30

		uint32_t day = sec / (60 * 60 * 24);
 8003e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6e:	4a3c      	ldr	r2, [pc, #240]	; (8003f60 <sec2str+0x114>)
 8003e70:	fba2 2303 	umull	r2, r3, r2, r3
 8003e74:	0c1b      	lsrs	r3, r3, #16
 8003e76:	62fb      	str	r3, [r7, #44]	; 0x2c
		sec %= (60 * 60 * 24);
 8003e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7a:	4a39      	ldr	r2, [pc, #228]	; (8003f60 <sec2str+0x114>)
 8003e7c:	fba2 1203 	umull	r1, r2, r2, r3
 8003e80:	0c12      	lsrs	r2, r2, #16
 8003e82:	4938      	ldr	r1, [pc, #224]	; (8003f64 <sec2str+0x118>)
 8003e84:	fb01 f202 	mul.w	r2, r1, r2
 8003e88:	1a9b      	subs	r3, r3, r2
 8003e8a:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t hour = sec / (60 * 60);
 8003e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8e:	4a36      	ldr	r2, [pc, #216]	; (8003f68 <sec2str+0x11c>)
 8003e90:	fba2 2303 	umull	r2, r3, r2, r3
 8003e94:	0adb      	lsrs	r3, r3, #11
 8003e96:	62bb      	str	r3, [r7, #40]	; 0x28
		sec %= (60 * 60);
 8003e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9a:	4a33      	ldr	r2, [pc, #204]	; (8003f68 <sec2str+0x11c>)
 8003e9c:	fba2 1203 	umull	r1, r2, r2, r3
 8003ea0:	0ad2      	lsrs	r2, r2, #11
 8003ea2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003ea6:	fb01 f202 	mul.w	r2, r1, r2
 8003eaa:	1a9b      	subs	r3, r3, r2
 8003eac:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t min = sec / (60);
 8003eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb0:	4a2e      	ldr	r2, [pc, #184]	; (8003f6c <sec2str+0x120>)
 8003eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb6:	095b      	lsrs	r3, r3, #5
 8003eb8:	627b      	str	r3, [r7, #36]	; 0x24
		sec %= 60;
 8003eba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ebc:	4b2b      	ldr	r3, [pc, #172]	; (8003f6c <sec2str+0x120>)
 8003ebe:	fba3 1302 	umull	r1, r3, r3, r2
 8003ec2:	0959      	lsrs	r1, r3, #5
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	011b      	lsls	r3, r3, #4
 8003ec8:	1a5b      	subs	r3, r3, r1
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	633b      	str	r3, [r7, #48]	; 0x30

		ret = sprintf(st, "%lu.%02lu:%02lu:%02lu", day, hour, min, sec);
 8003ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed2:	9301      	str	r3, [sp, #4]
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003edc:	4924      	ldr	r1, [pc, #144]	; (8003f70 <sec2str+0x124>)
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f00a fe50 	bl	800eb84 <siprintf>
 8003ee4:	6378      	str	r0, [r7, #52]	; 0x34
 8003ee6:	e034      	b.n	8003f52 <sec2str+0x106>
	} else {
		RTC_TimeTypeDef sTime;
		RTC_DateTypeDef sDate;
		if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN)) devError |= devRTC;
 8003ee8:	f107 030c 	add.w	r3, r7, #12
 8003eec:	2200      	movs	r2, #0
 8003eee:	4619      	mov	r1, r3
 8003ef0:	4820      	ldr	r0, [pc, #128]	; (8003f74 <sec2str+0x128>)
 8003ef2:	f006 fab0 	bl	800a456 <HAL_RTC_GetDate>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d007      	beq.n	8003f0c <sec2str+0xc0>
 8003efc:	4b1e      	ldr	r3, [pc, #120]	; (8003f78 <sec2str+0x12c>)
 8003efe:	881b      	ldrh	r3, [r3, #0]
 8003f00:	f043 0308 	orr.w	r3, r3, #8
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	4b1c      	ldr	r3, [pc, #112]	; (8003f78 <sec2str+0x12c>)
 8003f08:	801a      	strh	r2, [r3, #0]
 8003f0a:	e022      	b.n	8003f52 <sec2str+0x106>
		else {
			if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN)) devError |= devRTC;
 8003f0c:	f107 0310 	add.w	r3, r7, #16
 8003f10:	2200      	movs	r2, #0
 8003f12:	4619      	mov	r1, r3
 8003f14:	4817      	ldr	r0, [pc, #92]	; (8003f74 <sec2str+0x128>)
 8003f16:	f006 f9bb 	bl	800a290 <HAL_RTC_GetTime>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d007      	beq.n	8003f30 <sec2str+0xe4>
 8003f20:	4b15      	ldr	r3, [pc, #84]	; (8003f78 <sec2str+0x12c>)
 8003f22:	881b      	ldrh	r3, [r3, #0]
 8003f24:	f043 0308 	orr.w	r3, r3, #8
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	4b13      	ldr	r3, [pc, #76]	; (8003f78 <sec2str+0x12c>)
 8003f2c:	801a      	strh	r2, [r3, #0]
 8003f2e:	e010      	b.n	8003f52 <sec2str+0x106>
			else {
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
								sDate.Date, sDate.Month,
 8003f30:	7bbb      	ldrb	r3, [r7, #14]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 8003f32:	4618      	mov	r0, r3
								sDate.Date, sDate.Month,
 8003f34:	7b7b      	ldrb	r3, [r7, #13]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 8003f36:	461c      	mov	r4, r3
								sTime.Hours, sTime.Minutes, sTime.Seconds);
 8003f38:	7c3b      	ldrb	r3, [r7, #16]
 8003f3a:	7c7a      	ldrb	r2, [r7, #17]
 8003f3c:	7cb9      	ldrb	r1, [r7, #18]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 8003f3e:	9102      	str	r1, [sp, #8]
 8003f40:	9201      	str	r2, [sp, #4]
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	4623      	mov	r3, r4
 8003f46:	4602      	mov	r2, r0
 8003f48:	490c      	ldr	r1, [pc, #48]	; (8003f7c <sec2str+0x130>)
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f00a fe1a 	bl	800eb84 <siprintf>
 8003f50:	6378      	str	r0, [r7, #52]	; 0x34
			}
		}
	}

	return ret;
 8003f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	373c      	adds	r7, #60	; 0x3c
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd90      	pop	{r4, r7, pc}
 8003f5c:	20001c75 	.word	0x20001c75
 8003f60:	c22e4507 	.word	0xc22e4507
 8003f64:	00015180 	.word	0x00015180
 8003f68:	91a2b3c5 	.word	0x91a2b3c5
 8003f6c:	88888889 	.word	0x88888889
 8003f70:	08012e3c 	.word	0x08012e3c
 8003f74:	20000904 	.word	0x20000904
 8003f78:	20001860 	.word	0x20001860
 8003f7c:	08012e54 	.word	0x08012e54

08003f80 <Report>:
//--------------------------------------------------------------------------------------------
void Report(const uint8_t addTime, const char *fmt, ...)
{
 8003f80:	b40e      	push	{r1, r2, r3}
 8003f82:	b590      	push	{r4, r7, lr}
 8003f84:	b088      	sub	sp, #32
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	4603      	mov	r3, r0
 8003f8a:	71fb      	strb	r3, [r7, #7]
size_t len = MAX_UART_BUF;
 8003f8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f90:	617b      	str	r3, [r7, #20]
char *buf = &cmdBuf[0];
 8003f92:	4b32      	ldr	r3, [pc, #200]	; (800405c <Report+0xdc>)
 8003f94:	613b      	str	r3, [r7, #16]
uint32_t cnt = 16;
 8003f96:	2310      	movs	r3, #16
 8003f98:	61fb      	str	r3, [r7, #28]
uint32_t stim = HAL_GetTick();
 8003f9a:	f002 fac3 	bl	8006524 <HAL_GetTick>
 8003f9e:	60f8      	str	r0, [r7, #12]

	while (!uartRdy && cnt) {
 8003fa0:	e008      	b.n	8003fb4 <Report+0x34>
		if (HAL_GetTick() - stim) cnt--;
 8003fa2:	f002 fabf 	bl	8006524 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d002      	beq.n	8003fb4 <Report+0x34>
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	61fb      	str	r3, [r7, #28]
	while (!uartRdy && cnt) {
 8003fb4:	4b2a      	ldr	r3, [pc, #168]	; (8004060 <Report+0xe0>)
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d102      	bne.n	8003fc2 <Report+0x42>
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1ef      	bne.n	8003fa2 <Report+0x22>
	}

	//if (buf) {
		*buf = '\0';
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	701a      	strb	r2, [r3, #0]
		int dl = 0;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	61bb      	str	r3, [r7, #24]
		if (addTime) {
 8003fcc:	79fb      	ldrb	r3, [r7, #7]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d010      	beq.n	8003ff4 <Report+0x74>
			dl = sec2str(buf);
 8003fd2:	6938      	ldr	r0, [r7, #16]
 8003fd4:	f7ff ff3a 	bl	8003e4c <sec2str>
 8003fd8:	61b8      	str	r0, [r7, #24]
			strcat(buf, " | ");
 8003fda:	6938      	ldr	r0, [r7, #16]
 8003fdc:	f7fc f8f8 	bl	80001d0 <strlen>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	4a1e      	ldr	r2, [pc, #120]	; (8004064 <Report+0xe4>)
 8003fea:	6810      	ldr	r0, [r2, #0]
 8003fec:	6018      	str	r0, [r3, #0]
			dl += 3;
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	3303      	adds	r3, #3
 8003ff2:	61bb      	str	r3, [r7, #24]
		}

		va_list args;
		va_start(args, fmt);
 8003ff4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ff8:	60bb      	str	r3, [r7, #8]
		vsnprintf(buf + dl, len - dl, fmt, args);
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	18d0      	adds	r0, r2, r3
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	1ad1      	subs	r1, r2, r3
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800400a:	f00b fcfb 	bl	800fa04 <vsniprintf>

		uartRdy = false;
 800400e:	4b14      	ldr	r3, [pc, #80]	; (8004060 <Report+0xe0>)
 8004010:	2200      	movs	r2, #0
 8004012:	701a      	strb	r2, [r3, #0]
		if (HAL_UART_Transmit_DMA(cmdPort, (uint8_t *)buf, strlen(buf)) != HAL_OK) devError |= devUART;
 8004014:	4b14      	ldr	r3, [pc, #80]	; (8004068 <Report+0xe8>)
 8004016:	681c      	ldr	r4, [r3, #0]
 8004018:	6938      	ldr	r0, [r7, #16]
 800401a:	f7fc f8d9 	bl	80001d0 <strlen>
 800401e:	4603      	mov	r3, r0
 8004020:	b29b      	uxth	r3, r3
 8004022:	461a      	mov	r2, r3
 8004024:	6939      	ldr	r1, [r7, #16]
 8004026:	4620      	mov	r0, r4
 8004028:	f008 fcc4 	bl	800c9b4 <HAL_UART_Transmit_DMA>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d006      	beq.n	8004040 <Report+0xc0>
 8004032:	4b0e      	ldr	r3, [pc, #56]	; (800406c <Report+0xec>)
 8004034:	881b      	ldrh	r3, [r3, #0]
 8004036:	f043 0302 	orr.w	r3, r3, #2
 800403a:	b29a      	uxth	r2, r3
 800403c:	4b0b      	ldr	r3, [pc, #44]	; (800406c <Report+0xec>)
 800403e:	801a      	strh	r2, [r3, #0]
		while (!uartRdy) {} //HAL_Delay(1)
 8004040:	bf00      	nop
 8004042:	4b07      	ldr	r3, [pc, #28]	; (8004060 <Report+0xe0>)
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0fb      	beq.n	8004042 <Report+0xc2>
	//	free(buf);
	//} else {
	//	devError |= devMEM;
	//}

}
 800404a:	bf00      	nop
 800404c:	bf00      	nop
 800404e:	3720      	adds	r7, #32
 8004050:	46bd      	mov	sp, r7
 8004052:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004056:	b003      	add	sp, #12
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	20001060 	.word	0x20001060
 8004060:	20000014 	.word	0x20000014
 8004064:	08012e70 	.word	0x08012e70
 8004068:	20000010 	.word	0x20000010
 800406c:	20001860 	.word	0x20001860

08004070 <HAL_TIM_PeriodElapsedCallback>:



//------------------------------------------------------------------------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004070:	b5b0      	push	{r4, r5, r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) {
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a15      	ldr	r2, [pc, #84]	; (80040d4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d124      	bne.n	80040cc <HAL_TIM_PeriodElapsedCallback+0x5c>
		msCounter++;//inc_msCounter();
 8004082:	4b15      	ldr	r3, [pc, #84]	; (80040d8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8004084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004088:	1c54      	adds	r4, r2, #1
 800408a:	f143 0500 	adc.w	r5, r3, #0
 800408e:	4b12      	ldr	r3, [pc, #72]	; (80040d8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8004090:	e9c3 4500 	strd	r4, r5, [r3]
		if (!(msCounter % _1s)) {// 1 seconda
 8004094:	4b10      	ldr	r3, [pc, #64]	; (80040d8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8004096:	e9d3 0100 	ldrd	r0, r1, [r3]
 800409a:	f04f 0264 	mov.w	r2, #100	; 0x64
 800409e:	f04f 0300 	mov.w	r3, #0
 80040a2:	f7fc fe41 	bl	8000d28 <__aeabi_uldivmod>
 80040a6:	4313      	orrs	r3, r2
 80040a8:	d110      	bne.n	80040cc <HAL_TIM_PeriodElapsedCallback+0x5c>
			secCounter++;
 80040aa:	4b0c      	ldr	r3, [pc, #48]	; (80040dc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	3301      	adds	r3, #1
 80040b0:	4a0a      	ldr	r2, [pc, #40]	; (80040dc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80040b2:	6013      	str	r3, [r2, #0]
		  	HAL_GPIO_TogglePin(TIK_LED_GPIO_Port, TIK_LED_Pin);
 80040b4:	2101      	movs	r1, #1
 80040b6:	480a      	ldr	r0, [pc, #40]	; (80040e0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80040b8:	f003 f806 	bl	80070c8 <HAL_GPIO_TogglePin>
#ifdef SET_DISPLAY
		  	if (startSec) putEvt(evt_Sec);
 80040bc:	4b09      	ldr	r3, [pc, #36]	; (80040e4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d002      	beq.n	80040cc <HAL_TIM_PeriodElapsedCallback+0x5c>
 80040c6:	2008      	movs	r0, #8
 80040c8:	f7ff fbf0 	bl	80038ac <putEvt>
#endif
	  	}
	}
}
 80040cc:	bf00      	nop
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bdb0      	pop	{r4, r5, r7, pc}
 80040d4:	40000800 	.word	0x40000800
 80040d8:	20001868 	.word	0x20001868
 80040dc:	20001864 	.word	0x20001864
 80040e0:	48000800 	.word	0x48000800
 80040e4:	20002ca4 	.word	0x20002ca4

080040e8 <HAL_UART_TxCpltCallback>:
//--------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a05      	ldr	r2, [pc, #20]	; (800410c <HAL_UART_TxCpltCallback+0x24>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d102      	bne.n	8004100 <HAL_UART_TxCpltCallback+0x18>
		uartRdy = 1;
 80040fa:	4b05      	ldr	r3, [pc, #20]	; (8004110 <HAL_UART_TxCpltCallback+0x28>)
 80040fc:	2201      	movs	r2, #1
 80040fe:	701a      	strb	r2, [r3, #0]
	}
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	40004400 	.word	0x40004400
 8004110:	20000014 	.word	0x20000014

08004114 <HAL_UART_RxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004114:	b590      	push	{r4, r7, lr}
 8004116:	b08d      	sub	sp, #52	; 0x34
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4aa8      	ldr	r2, [pc, #672]	; (80043c4 <HAL_UART_RxCpltCallback+0x2b0>)
 8004122:	4293      	cmp	r3, r2
 8004124:	f040 8247 	bne.w	80045b6 <HAL_UART_RxCpltCallback+0x4a2>
		rxBuf[rxInd++] = (char)rxByte;
 8004128:	4ba7      	ldr	r3, [pc, #668]	; (80043c8 <HAL_UART_RxCpltCallback+0x2b4>)
 800412a:	881b      	ldrh	r3, [r3, #0]
 800412c:	1c5a      	adds	r2, r3, #1
 800412e:	b291      	uxth	r1, r2
 8004130:	4aa5      	ldr	r2, [pc, #660]	; (80043c8 <HAL_UART_RxCpltCallback+0x2b4>)
 8004132:	8011      	strh	r1, [r2, #0]
 8004134:	461a      	mov	r2, r3
 8004136:	4ba5      	ldr	r3, [pc, #660]	; (80043cc <HAL_UART_RxCpltCallback+0x2b8>)
 8004138:	7819      	ldrb	r1, [r3, #0]
 800413a:	4ba5      	ldr	r3, [pc, #660]	; (80043d0 <HAL_UART_RxCpltCallback+0x2bc>)
 800413c:	5499      	strb	r1, [r3, r2]
		if (rxByte == 0x0a) {//end of line
 800413e:	4ba3      	ldr	r3, [pc, #652]	; (80043cc <HAL_UART_RxCpltCallback+0x2b8>)
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	2b0a      	cmp	r3, #10
 8004144:	f040 8228 	bne.w	8004598 <HAL_UART_RxCpltCallback+0x484>
			rxBuf[--rxInd] = '\0';
 8004148:	4b9f      	ldr	r3, [pc, #636]	; (80043c8 <HAL_UART_RxCpltCallback+0x2b4>)
 800414a:	881b      	ldrh	r3, [r3, #0]
 800414c:	3b01      	subs	r3, #1
 800414e:	b29a      	uxth	r2, r3
 8004150:	4b9d      	ldr	r3, [pc, #628]	; (80043c8 <HAL_UART_RxCpltCallback+0x2b4>)
 8004152:	801a      	strh	r2, [r3, #0]
 8004154:	4b9c      	ldr	r3, [pc, #624]	; (80043c8 <HAL_UART_RxCpltCallback+0x2b4>)
 8004156:	881b      	ldrh	r3, [r3, #0]
 8004158:	461a      	mov	r2, r3
 800415a:	4b9d      	ldr	r3, [pc, #628]	; (80043d0 <HAL_UART_RxCpltCallback+0x2bc>)
 800415c:	2100      	movs	r1, #0
 800415e:	5499      	strb	r1, [r3, r2]

			int i, ev = -1;
 8004160:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004164:	62bb      	str	r3, [r7, #40]	; 0x28
			if (strlen(rxBuf) > 2) {
 8004166:	489a      	ldr	r0, [pc, #616]	; (80043d0 <HAL_UART_RxCpltCallback+0x2bc>)
 8004168:	f7fc f832 	bl	80001d0 <strlen>
 800416c:	4603      	mov	r3, r0
 800416e:	2b02      	cmp	r3, #2
 8004170:	f240 820c 	bls.w	800458c <HAL_UART_RxCpltCallback+0x478>
				for (i = 0; i < MAX_CMDS; i++) {
 8004174:	2300      	movs	r3, #0
 8004176:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004178:	e1f9      	b.n	800456e <HAL_UART_RxCpltCallback+0x45a>
					if (!strncmp(rxBuf, s_cmds[i], strlen(s_cmds[i]))) {
 800417a:	4a96      	ldr	r2, [pc, #600]	; (80043d4 <HAL_UART_RxCpltCallback+0x2c0>)
 800417c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800417e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8004182:	4a94      	ldr	r2, [pc, #592]	; (80043d4 <HAL_UART_RxCpltCallback+0x2c0>)
 8004184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800418a:	4618      	mov	r0, r3
 800418c:	f7fc f820 	bl	80001d0 <strlen>
 8004190:	4603      	mov	r3, r0
 8004192:	461a      	mov	r2, r3
 8004194:	4621      	mov	r1, r4
 8004196:	488e      	ldr	r0, [pc, #568]	; (80043d0 <HAL_UART_RxCpltCallback+0x2bc>)
 8004198:	f00a fd21 	bl	800ebde <strncmp>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f040 81e2 	bne.w	8004568 <HAL_UART_RxCpltCallback+0x454>
						char *uk = rxBuf + strlen(s_cmds[i]);
 80041a4:	4a8b      	ldr	r2, [pc, #556]	; (80043d4 <HAL_UART_RxCpltCallback+0x2c0>)
 80041a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7fc f80f 	bl	80001d0 <strlen>
 80041b2:	4603      	mov	r3, r0
 80041b4:	4a86      	ldr	r2, [pc, #536]	; (80043d0 <HAL_UART_RxCpltCallback+0x2bc>)
 80041b6:	4413      	add	r3, r2
 80041b8:	623b      	str	r3, [r7, #32]
						ev = -1;
 80041ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041be:	62bb      	str	r3, [r7, #40]	; 0x28
						switch (i) {
 80041c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c2:	2b12      	cmp	r3, #18
 80041c4:	f200 81d8 	bhi.w	8004578 <HAL_UART_RxCpltCallback+0x464>
 80041c8:	a201      	add	r2, pc, #4	; (adr r2, 80041d0 <HAL_UART_RxCpltCallback+0xbc>)
 80041ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ce:	bf00      	nop
 80041d0:	08004357 	.word	0x08004357
 80041d4:	0800435d 	.word	0x0800435d
 80041d8:	08004363 	.word	0x08004363
 80041dc:	08004579 	.word	0x08004579
 80041e0:	080043b5 	.word	0x080043b5
 80041e4:	080043b5 	.word	0x080043b5
 80041e8:	0800450b 	.word	0x0800450b
 80041ec:	0800446f 	.word	0x0800446f
 80041f0:	08004579 	.word	0x08004579
 80041f4:	08004357 	.word	0x08004357
 80041f8:	08004357 	.word	0x08004357
 80041fc:	08004315 	.word	0x08004315
 8004200:	080042d1 	.word	0x080042d1
 8004204:	08004249 	.word	0x08004249
 8004208:	08004357 	.word	0x08004357
 800420c:	080042b3 	.word	0x080042b3
 8004210:	08004315 	.word	0x08004315
 8004214:	0800421d 	.word	0x0800421d
 8004218:	08004357 	.word	0x08004357
							case cmdBand://"band:2"
								if (strlen(uk) >= 1) {
 800421c:	6a3b      	ldr	r3, [r7, #32]
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 818f 	beq.w	8004544 <HAL_UART_RxCpltCallback+0x430>
									newBand = atol(uk);
 8004226:	6a38      	ldr	r0, [r7, #32]
 8004228:	f009 ff51 	bl	800e0ce <atol>
 800422c:	4603      	mov	r3, r0
 800422e:	b2da      	uxtb	r2, r3
 8004230:	4b69      	ldr	r3, [pc, #420]	; (80043d8 <HAL_UART_RxCpltCallback+0x2c4>)
 8004232:	701a      	strb	r2, [r3, #0]
									if (newBand != Band) {
 8004234:	4b68      	ldr	r3, [pc, #416]	; (80043d8 <HAL_UART_RxCpltCallback+0x2c4>)
 8004236:	781a      	ldrb	r2, [r3, #0]
 8004238:	4b68      	ldr	r3, [pc, #416]	; (80043dc <HAL_UART_RxCpltCallback+0x2c8>)
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	429a      	cmp	r2, r3
 800423e:	f000 8181 	beq.w	8004544 <HAL_UART_RxCpltCallback+0x430>
										ev = i;
 8004242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004244:	62bb      	str	r3, [r7, #40]	; 0x28
									}
								}
							break;
 8004246:	e17d      	b.n	8004544 <HAL_UART_RxCpltCallback+0x430>
							case cmdVol:
								if (strlen(uk) >= 1) {
 8004248:	6a3b      	ldr	r3, [r7, #32]
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 817b 	beq.w	8004548 <HAL_UART_RxCpltCallback+0x434>
									uint8_t nv = Volume;
 8004252:	4b63      	ldr	r3, [pc, #396]	; (80043e0 <HAL_UART_RxCpltCallback+0x2cc>)
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									if (strstr(uk, "up")) {
 800425a:	4962      	ldr	r1, [pc, #392]	; (80043e4 <HAL_UART_RxCpltCallback+0x2d0>)
 800425c:	6a38      	ldr	r0, [r7, #32]
 800425e:	f00a fcd2 	bl	800ec06 <strstr>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d005      	beq.n	8004274 <HAL_UART_RxCpltCallback+0x160>
										nv++;
 8004268:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800426c:	3301      	adds	r3, #1
 800426e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004272:	e012      	b.n	800429a <HAL_UART_RxCpltCallback+0x186>
									} else if (strstr(uk, "down")) {
 8004274:	495c      	ldr	r1, [pc, #368]	; (80043e8 <HAL_UART_RxCpltCallback+0x2d4>)
 8004276:	6a38      	ldr	r0, [r7, #32]
 8004278:	f00a fcc5 	bl	800ec06 <strstr>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d005      	beq.n	800428e <HAL_UART_RxCpltCallback+0x17a>
										nv--;
 8004282:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004286:	3b01      	subs	r3, #1
 8004288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800428c:	e005      	b.n	800429a <HAL_UART_RxCpltCallback+0x186>
									} else {
										nv = (uint8_t)atol(uk);
 800428e:	6a38      	ldr	r0, [r7, #32]
 8004290:	f009 ff1d 	bl	800e0ce <atol>
 8004294:	4603      	mov	r3, r0
 8004296:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									}
									if ((nv >= 0) && (nv <= 15)) {
 800429a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800429e:	2b0f      	cmp	r3, #15
 80042a0:	f200 8152 	bhi.w	8004548 <HAL_UART_RxCpltCallback+0x434>
										newVolume = nv;
 80042a4:	4a51      	ldr	r2, [pc, #324]	; (80043ec <HAL_UART_RxCpltCallback+0x2d8>)
 80042a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042aa:	7013      	strb	r3, [r2, #0]
										ev = i;
 80042ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ae:	62bb      	str	r3, [r7, #40]	; 0x28
									}
								}
							break;
 80042b0:	e14a      	b.n	8004548 <HAL_UART_RxCpltCallback+0x434>
							case cmdBass:
								if (strlen(uk) >= 1) {
 80042b2:	6a3b      	ldr	r3, [r7, #32]
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 8148 	beq.w	800454c <HAL_UART_RxCpltCallback+0x438>
									newBassBoost = (uint8_t)atol(uk);
 80042bc:	6a38      	ldr	r0, [r7, #32]
 80042be:	f009 ff06 	bl	800e0ce <atol>
 80042c2:	4603      	mov	r3, r0
 80042c4:	b2da      	uxtb	r2, r3
 80042c6:	4b4a      	ldr	r3, [pc, #296]	; (80043f0 <HAL_UART_RxCpltCallback+0x2dc>)
 80042c8:	701a      	strb	r2, [r3, #0]
									ev = i;
 80042ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042cc:	62bb      	str	r3, [r7, #40]	; 0x28
								}
							break;
 80042ce:	e13d      	b.n	800454c <HAL_UART_RxCpltCallback+0x438>
							case cmdFreq://"freq:95.1"
								if (strlen(uk) >= 2) {
 80042d0:	6a38      	ldr	r0, [r7, #32]
 80042d2:	f7fb ff7d 	bl	80001d0 <strlen>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b01      	cmp	r3, #1
 80042da:	f240 8139 	bls.w	8004550 <HAL_UART_RxCpltCallback+0x43c>
									newFreq = (float)atof(uk);
 80042de:	6a38      	ldr	r0, [r7, #32]
 80042e0:	f009 feee 	bl	800e0c0 <atof>
 80042e4:	ec53 2b10 	vmov	r2, r3, d0
 80042e8:	4610      	mov	r0, r2
 80042ea:	4619      	mov	r1, r3
 80042ec:	f7fc fc7c 	bl	8000be8 <__aeabi_d2f>
 80042f0:	4603      	mov	r3, r0
 80042f2:	4a40      	ldr	r2, [pc, #256]	; (80043f4 <HAL_UART_RxCpltCallback+0x2e0>)
 80042f4:	6013      	str	r3, [r2, #0]
									if (newFreq != Freq) {
 80042f6:	4b3f      	ldr	r3, [pc, #252]	; (80043f4 <HAL_UART_RxCpltCallback+0x2e0>)
 80042f8:	ed93 7a00 	vldr	s14, [r3]
 80042fc:	4b3e      	ldr	r3, [pc, #248]	; (80043f8 <HAL_UART_RxCpltCallback+0x2e4>)
 80042fe:	edd3 7a00 	vldr	s15, [r3]
 8004302:	eeb4 7a67 	vcmp.f32	s14, s15
 8004306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800430a:	f000 8121 	beq.w	8004550 <HAL_UART_RxCpltCallback+0x43c>
										ev = i;
 800430e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004310:	62bb      	str	r3, [r7, #40]	; 0x28
									}
								}
							break;
 8004312:	e11d      	b.n	8004550 <HAL_UART_RxCpltCallback+0x43c>
							case cmdScan://"scan"
							case cmdList://"list"
								seek_up = 1;
 8004314:	4b39      	ldr	r3, [pc, #228]	; (80043fc <HAL_UART_RxCpltCallback+0x2e8>)
 8004316:	2201      	movs	r2, #1
 8004318:	701a      	strb	r2, [r3, #0]
								ev = i;
 800431a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431c:	62bb      	str	r3, [r7, #40]	; 0x28
								char *uki = strchr(uk, ':');
 800431e:	213a      	movs	r1, #58	; 0x3a
 8004320:	6a38      	ldr	r0, [r7, #32]
 8004322:	f00a fc4f 	bl	800ebc4 <strchr>
 8004326:	61f8      	str	r0, [r7, #28]
								if (uki) {
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	2b00      	cmp	r3, #0
 800432c:	f000 8112 	beq.w	8004554 <HAL_UART_RxCpltCallback+0x440>
									if ((*(char *)(uki + 1) == '0') || strstr(uki + 1, "down")) seek_up = 0;
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	3301      	adds	r3, #1
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	2b30      	cmp	r3, #48	; 0x30
 8004338:	d009      	beq.n	800434e <HAL_UART_RxCpltCallback+0x23a>
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	3301      	adds	r3, #1
 800433e:	492a      	ldr	r1, [pc, #168]	; (80043e8 <HAL_UART_RxCpltCallback+0x2d4>)
 8004340:	4618      	mov	r0, r3
 8004342:	f00a fc60 	bl	800ec06 <strstr>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 8103 	beq.w	8004554 <HAL_UART_RxCpltCallback+0x440>
 800434e:	4b2b      	ldr	r3, [pc, #172]	; (80043fc <HAL_UART_RxCpltCallback+0x2e8>)
 8004350:	2200      	movs	r2, #0
 8004352:	701a      	strb	r2, [r3, #0]
								}
							break;
 8004354:	e0fe      	b.n	8004554 <HAL_UART_RxCpltCallback+0x440>
							case cmdClr://"clr"
							case cmdHelp://"help"
							case cmdVer://"ver"
							case cmdMute://"mute"
							case cmdCfg://"cfg"
								ev = i;
 8004356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004358:	62bb      	str	r3, [r7, #40]	; 0x28
							break;
 800435a:	e104      	b.n	8004566 <HAL_UART_RxCpltCallback+0x452>
							case cmdRestart://"restart" -> restart = 1;
								ev = i;
 800435c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800435e:	62bb      	str	r3, [r7, #40]	; 0x28
							break;
 8004360:	e101      	b.n	8004566 <HAL_UART_RxCpltCallback+0x452>
							case cmdEpoch://"epoch:1657191323"
								if (strlen(uk) >= 10) {
 8004362:	6a38      	ldr	r0, [r7, #32]
 8004364:	f7fb ff34 	bl	80001d0 <strlen>
 8004368:	4603      	mov	r3, r0
 800436a:	2b09      	cmp	r3, #9
 800436c:	f240 80f4 	bls.w	8004558 <HAL_UART_RxCpltCallback+0x444>
									char *uki = strchr(uk, ':');
 8004370:	213a      	movs	r1, #58	; 0x3a
 8004372:	6a38      	ldr	r0, [r7, #32]
 8004374:	f00a fc26 	bl	800ebc4 <strchr>
 8004378:	60b8      	str	r0, [r7, #8]
									if (uki) {
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00c      	beq.n	800439a <HAL_UART_RxCpltCallback+0x286>
										tZone = (uint8_t)atol(uki + 1);
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	3301      	adds	r3, #1
 8004384:	4618      	mov	r0, r3
 8004386:	f009 fea2 	bl	800e0ce <atol>
 800438a:	4603      	mov	r3, r0
 800438c:	b2da      	uxtb	r2, r3
 800438e:	4b1c      	ldr	r3, [pc, #112]	; (8004400 <HAL_UART_RxCpltCallback+0x2ec>)
 8004390:	701a      	strb	r2, [r3, #0]
										*uki = '\0';
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	2200      	movs	r2, #0
 8004396:	701a      	strb	r2, [r3, #0]
 8004398:	e002      	b.n	80043a0 <HAL_UART_RxCpltCallback+0x28c>
									} else {
										tZone = 0;
 800439a:	4b19      	ldr	r3, [pc, #100]	; (8004400 <HAL_UART_RxCpltCallback+0x2ec>)
 800439c:	2200      	movs	r2, #0
 800439e:	701a      	strb	r2, [r3, #0]
									}
									epoch = (uint32_t)atol(uk);
 80043a0:	6a38      	ldr	r0, [r7, #32]
 80043a2:	f009 fe94 	bl	800e0ce <atol>
 80043a6:	4603      	mov	r3, r0
 80043a8:	461a      	mov	r2, r3
 80043aa:	4b16      	ldr	r3, [pc, #88]	; (8004404 <HAL_UART_RxCpltCallback+0x2f0>)
 80043ac:	601a      	str	r2, [r3, #0]
									ev = i;
 80043ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b0:	62bb      	str	r3, [r7, #40]	; 0x28
								}
							break;
 80043b2:	e0d1      	b.n	8004558 <HAL_UART_RxCpltCallback+0x444>
							case cmdsRead:// read:0
							case cmdsErase:// erase:0
								if (i == cmdsRead) cmd_sector = cmdsRead;
 80043b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b6:	2b04      	cmp	r3, #4
 80043b8:	d128      	bne.n	800440c <HAL_UART_RxCpltCallback+0x2f8>
 80043ba:	4b13      	ldr	r3, [pc, #76]	; (8004408 <HAL_UART_RxCpltCallback+0x2f4>)
 80043bc:	2204      	movs	r2, #4
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	e027      	b.n	8004412 <HAL_UART_RxCpltCallback+0x2fe>
 80043c2:	bf00      	nop
 80043c4:	40004400 	.word	0x40004400
 80043c8:	20001872 	.word	0x20001872
 80043cc:	20001870 	.word	0x20001870
 80043d0:	20001874 	.word	0x20001874
 80043d4:	2000001c 	.word	0x2000001c
 80043d8:	200001d5 	.word	0x200001d5
 80043dc:	200001d4 	.word	0x200001d4
 80043e0:	200001d7 	.word	0x200001d7
 80043e4:	08012e74 	.word	0x08012e74
 80043e8:	08012e78 	.word	0x08012e78
 80043ec:	200001d8 	.word	0x200001d8
 80043f0:	20002cbb 	.word	0x20002cbb
 80043f4:	200001d0 	.word	0x200001d0
 80043f8:	200001cc 	.word	0x200001cc
 80043fc:	200001d6 	.word	0x200001d6
 8004400:	20001c76 	.word	0x20001c76
 8004404:	20000018 	.word	0x20000018
 8004408:	200001c0 	.word	0x200001c0
											  else cmd_sector = cmdsErase;
 800440c:	4b6c      	ldr	r3, [pc, #432]	; (80045c0 <HAL_UART_RxCpltCallback+0x4ac>)
 800440e:	2205      	movs	r2, #5
 8004410:	601a      	str	r2, [r3, #0]
								if (*uk == ':') {
 8004412:	6a3b      	ldr	r3, [r7, #32]
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	2b3a      	cmp	r3, #58	; 0x3a
 8004418:	f040 80a0 	bne.w	800455c <HAL_UART_RxCpltCallback+0x448>
									int sek = atoi(++uk);
 800441c:	6a3b      	ldr	r3, [r7, #32]
 800441e:	3301      	adds	r3, #1
 8004420:	623b      	str	r3, [r7, #32]
 8004422:	6a38      	ldr	r0, [r7, #32]
 8004424:	f009 fe4f 	bl	800e0c6 <atoi>
 8004428:	60f8      	str	r0, [r7, #12]
									if ( ((sek >= 0) && (sek < W25qxx_getSectorCount())) || (sek == -1) ) {
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2b00      	cmp	r3, #0
 800442e:	db05      	blt.n	800443c <HAL_UART_RxCpltCallback+0x328>
 8004430:	f001 fc5c 	bl	8005cec <W25qxx_getSectorCount>
 8004434:	4602      	mov	r2, r0
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	429a      	cmp	r2, r3
 800443a:	d804      	bhi.n	8004446 <HAL_UART_RxCpltCallback+0x332>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004442:	f040 808b 	bne.w	800455c <HAL_UART_RxCpltCallback+0x448>
										adr_sector = sek;
 8004446:	4a5f      	ldr	r2, [pc, #380]	; (80045c4 <HAL_UART_RxCpltCallback+0x4b0>)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6013      	str	r3, [r2, #0]
										offset_sector = 0;
 800444c:	4b5e      	ldr	r3, [pc, #376]	; (80045c8 <HAL_UART_RxCpltCallback+0x4b4>)
 800444e:	2200      	movs	r2, #0
 8004450:	601a      	str	r2, [r3, #0]
										if (sek == -1) {
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004458:	d106      	bne.n	8004468 <HAL_UART_RxCpltCallback+0x354>
											if (cmd_sector == cmdsErase) ev = i;
 800445a:	4b59      	ldr	r3, [pc, #356]	; (80045c0 <HAL_UART_RxCpltCallback+0x4ac>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2b05      	cmp	r3, #5
 8004460:	d17c      	bne.n	800455c <HAL_UART_RxCpltCallback+0x448>
 8004462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004464:	62bb      	str	r3, [r7, #40]	; 0x28
										} else {
											ev = i;
										}
									}
								}
							break;
 8004466:	e079      	b.n	800455c <HAL_UART_RxCpltCallback+0x448>
											ev = i;
 8004468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800446a:	62bb      	str	r3, [r7, #40]	; 0x28
							break;
 800446c:	e076      	b.n	800455c <HAL_UART_RxCpltCallback+0x448>
							case cmdsWrite:// write:0:a5 | write:0:a5:256
								if (*uk == ':') {
 800446e:	6a3b      	ldr	r3, [r7, #32]
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	2b3a      	cmp	r3, #58	; 0x3a
 8004474:	d174      	bne.n	8004560 <HAL_UART_RxCpltCallback+0x44c>
									uk++;
 8004476:	6a3b      	ldr	r3, [r7, #32]
 8004478:	3301      	adds	r3, #1
 800447a:	623b      	str	r3, [r7, #32]
									int sek = atoi(uk);
 800447c:	6a38      	ldr	r0, [r7, #32]
 800447e:	f009 fe22 	bl	800e0c6 <atoi>
 8004482:	61b8      	str	r0, [r7, #24]
									if ((sek >= 0) && (sek < W25qxx_getSectorCount())) {
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	2b00      	cmp	r3, #0
 8004488:	db6a      	blt.n	8004560 <HAL_UART_RxCpltCallback+0x44c>
 800448a:	f001 fc2f 	bl	8005cec <W25qxx_getSectorCount>
 800448e:	4602      	mov	r2, r0
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	429a      	cmp	r2, r3
 8004494:	d964      	bls.n	8004560 <HAL_UART_RxCpltCallback+0x44c>
										char *ukn = strchr(uk, ':');
 8004496:	213a      	movs	r1, #58	; 0x3a
 8004498:	6a38      	ldr	r0, [r7, #32]
 800449a:	f00a fb93 	bl	800ebc4 <strchr>
 800449e:	6178      	str	r0, [r7, #20]
										if (ukn) {
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d05c      	beq.n	8004560 <HAL_UART_RxCpltCallback+0x44c>
											len_write = -1;
 80044a6:	4b49      	ldr	r3, [pc, #292]	; (80045cc <HAL_UART_RxCpltCallback+0x4b8>)
 80044a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044ac:	601a      	str	r2, [r3, #0]
											ukn++;
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	3301      	adds	r3, #1
 80044b2:	617b      	str	r3, [r7, #20]
											byte_write = hexToBin(ukn);
 80044b4:	6978      	ldr	r0, [r7, #20]
 80044b6:	f7ff f97f 	bl	80037b8 <hexToBin>
 80044ba:	4603      	mov	r3, r0
 80044bc:	461a      	mov	r2, r3
 80044be:	4b44      	ldr	r3, [pc, #272]	; (80045d0 <HAL_UART_RxCpltCallback+0x4bc>)
 80044c0:	701a      	strb	r2, [r3, #0]
											uk = strchr(ukn, ':');
 80044c2:	213a      	movs	r1, #58	; 0x3a
 80044c4:	6978      	ldr	r0, [r7, #20]
 80044c6:	f00a fb7d 	bl	800ebc4 <strchr>
 80044ca:	6238      	str	r0, [r7, #32]
											if (uk) {
 80044cc:	6a3b      	ldr	r3, [r7, #32]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d012      	beq.n	80044f8 <HAL_UART_RxCpltCallback+0x3e4>
												int l = atoi(++uk);
 80044d2:	6a3b      	ldr	r3, [r7, #32]
 80044d4:	3301      	adds	r3, #1
 80044d6:	623b      	str	r3, [r7, #32]
 80044d8:	6a38      	ldr	r0, [r7, #32]
 80044da:	f009 fdf4 	bl	800e0c6 <atoi>
 80044de:	6138      	str	r0, [r7, #16]
												if ((l > 0) && (l < W25qxx_getSectorSize())) len_write = l;
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	dd08      	ble.n	80044f8 <HAL_UART_RxCpltCallback+0x3e4>
 80044e6:	f001 fc0d 	bl	8005d04 <W25qxx_getSectorSize>
 80044ea:	4602      	mov	r2, r0
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d902      	bls.n	80044f8 <HAL_UART_RxCpltCallback+0x3e4>
 80044f2:	4a36      	ldr	r2, [pc, #216]	; (80045cc <HAL_UART_RxCpltCallback+0x4b8>)
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	6013      	str	r3, [r2, #0]
											}
											adr_sector = sek;
 80044f8:	4a32      	ldr	r2, [pc, #200]	; (80045c4 <HAL_UART_RxCpltCallback+0x4b0>)
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	6013      	str	r3, [r2, #0]
											offset_sector = 0;
 80044fe:	4b32      	ldr	r3, [pc, #200]	; (80045c8 <HAL_UART_RxCpltCallback+0x4b4>)
 8004500:	2200      	movs	r2, #0
 8004502:	601a      	str	r2, [r3, #0]
											ev = i;//flag_sector = true;
 8004504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004506:	62bb      	str	r3, [r7, #40]	; 0x28
										}
									}
								}
							break;
 8004508:	e02a      	b.n	8004560 <HAL_UART_RxCpltCallback+0x44c>
							case cmdsNext:// next
								if ((last_cmd_sector == cmdsRead) || (last_cmd_sector == cmdsNext)) {
 800450a:	4b32      	ldr	r3, [pc, #200]	; (80045d4 <HAL_UART_RxCpltCallback+0x4c0>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2b04      	cmp	r3, #4
 8004510:	d003      	beq.n	800451a <HAL_UART_RxCpltCallback+0x406>
 8004512:	4b30      	ldr	r3, [pc, #192]	; (80045d4 <HAL_UART_RxCpltCallback+0x4c0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2b06      	cmp	r3, #6
 8004518:	d124      	bne.n	8004564 <HAL_UART_RxCpltCallback+0x450>
									if ((offset_sector + list_sector) < W25qxx_getSectorSize()) {
 800451a:	4b2b      	ldr	r3, [pc, #172]	; (80045c8 <HAL_UART_RxCpltCallback+0x4b4>)
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	4b2e      	ldr	r3, [pc, #184]	; (80045d8 <HAL_UART_RxCpltCallback+0x4c4>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4413      	add	r3, r2
 8004524:	461c      	mov	r4, r3
 8004526:	f001 fbed 	bl	8005d04 <W25qxx_getSectorSize>
 800452a:	4603      	mov	r3, r0
 800452c:	429c      	cmp	r4, r3
 800452e:	d219      	bcs.n	8004564 <HAL_UART_RxCpltCallback+0x450>
										offset_sector += list_sector;
 8004530:	4b25      	ldr	r3, [pc, #148]	; (80045c8 <HAL_UART_RxCpltCallback+0x4b4>)
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	4b28      	ldr	r3, [pc, #160]	; (80045d8 <HAL_UART_RxCpltCallback+0x4c4>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4413      	add	r3, r2
 800453a:	4a23      	ldr	r2, [pc, #140]	; (80045c8 <HAL_UART_RxCpltCallback+0x4b4>)
 800453c:	6013      	str	r3, [r2, #0]
										ev = i;//flag_sector = true;
 800453e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004540:	62bb      	str	r3, [r7, #40]	; 0x28
									}
								}
							break;
 8004542:	e00f      	b.n	8004564 <HAL_UART_RxCpltCallback+0x450>
							break;
 8004544:	bf00      	nop
 8004546:	e017      	b.n	8004578 <HAL_UART_RxCpltCallback+0x464>
							break;
 8004548:	bf00      	nop
 800454a:	e015      	b.n	8004578 <HAL_UART_RxCpltCallback+0x464>
							break;
 800454c:	bf00      	nop
 800454e:	e013      	b.n	8004578 <HAL_UART_RxCpltCallback+0x464>
							break;
 8004550:	bf00      	nop
 8004552:	e011      	b.n	8004578 <HAL_UART_RxCpltCallback+0x464>
							break;
 8004554:	bf00      	nop
 8004556:	e00f      	b.n	8004578 <HAL_UART_RxCpltCallback+0x464>
							break;
 8004558:	bf00      	nop
 800455a:	e00d      	b.n	8004578 <HAL_UART_RxCpltCallback+0x464>
							break;
 800455c:	bf00      	nop
 800455e:	e00b      	b.n	8004578 <HAL_UART_RxCpltCallback+0x464>
							break;
 8004560:	bf00      	nop
 8004562:	e009      	b.n	8004578 <HAL_UART_RxCpltCallback+0x464>
							break;
 8004564:	bf00      	nop
						}
						break;
 8004566:	e007      	b.n	8004578 <HAL_UART_RxCpltCallback+0x464>
				for (i = 0; i < MAX_CMDS; i++) {
 8004568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800456a:	3301      	adds	r3, #1
 800456c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800456e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004570:	2b12      	cmp	r3, #18
 8004572:	f77f ae02 	ble.w	800417a <HAL_UART_RxCpltCallback+0x66>
 8004576:	e000      	b.n	800457a <HAL_UART_RxCpltCallback+0x466>
						break;
 8004578:	bf00      	nop
					}
				}
				//
				if (ev == -1) ev = cmdErr;
 800457a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004580:	d101      	bne.n	8004586 <HAL_UART_RxCpltCallback+0x472>
 8004582:	2303      	movs	r3, #3
 8004584:	62bb      	str	r3, [r7, #40]	; 0x28
				putEvt(ev);
 8004586:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004588:	f7ff f990 	bl	80038ac <putEvt>
				//
			}

			rxInd = 0;
 800458c:	4b13      	ldr	r3, [pc, #76]	; (80045dc <HAL_UART_RxCpltCallback+0x4c8>)
 800458e:	2200      	movs	r2, #0
 8004590:	801a      	strh	r2, [r3, #0]
			*rxBuf = '\0';
 8004592:	4b13      	ldr	r3, [pc, #76]	; (80045e0 <HAL_UART_RxCpltCallback+0x4cc>)
 8004594:	2200      	movs	r2, #0
 8004596:	701a      	strb	r2, [r3, #0]
		}

		if (HAL_UART_Receive_IT(huart, &rxByte, 1) != HAL_OK) devError |= devUART;
 8004598:	2201      	movs	r2, #1
 800459a:	4912      	ldr	r1, [pc, #72]	; (80045e4 <HAL_UART_RxCpltCallback+0x4d0>)
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f008 f9b3 	bl	800c908 <HAL_UART_Receive_IT>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d006      	beq.n	80045b6 <HAL_UART_RxCpltCallback+0x4a2>
 80045a8:	4b0f      	ldr	r3, [pc, #60]	; (80045e8 <HAL_UART_RxCpltCallback+0x4d4>)
 80045aa:	881b      	ldrh	r3, [r3, #0]
 80045ac:	f043 0302 	orr.w	r3, r3, #2
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	4b0d      	ldr	r3, [pc, #52]	; (80045e8 <HAL_UART_RxCpltCallback+0x4d4>)
 80045b4:	801a      	strh	r2, [r3, #0]
	}
}
 80045b6:	bf00      	nop
 80045b8:	3734      	adds	r7, #52	; 0x34
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd90      	pop	{r4, r7, pc}
 80045be:	bf00      	nop
 80045c0:	200001c0 	.word	0x200001c0
 80045c4:	20001c80 	.word	0x20001c80
 80045c8:	20001c84 	.word	0x20001c84
 80045cc:	20001c8c 	.word	0x20001c8c
 80045d0:	200001c8 	.word	0x200001c8
 80045d4:	200001c4 	.word	0x200001c4
 80045d8:	20001c88 	.word	0x20001c88
 80045dc:	20001872 	.word	0x20001872
 80045e0:	20001874 	.word	0x20001874
 80045e4:	20001870 	.word	0x20001870
 80045e8:	20001860 	.word	0x20001860

080045ec <HAL_UART_ErrorCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a07      	ldr	r2, [pc, #28]	; (8004618 <HAL_UART_ErrorCallback+0x2c>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d106      	bne.n	800460c <HAL_UART_ErrorCallback+0x20>
		devError |= devUART;
 80045fe:	4b07      	ldr	r3, [pc, #28]	; (800461c <HAL_UART_ErrorCallback+0x30>)
 8004600:	881b      	ldrh	r3, [r3, #0]
 8004602:	f043 0302 	orr.w	r3, r3, #2
 8004606:	b29a      	uxth	r2, r3
 8004608:	4b04      	ldr	r3, [pc, #16]	; (800461c <HAL_UART_ErrorCallback+0x30>)
 800460a:	801a      	strh	r2, [r3, #0]
	}
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	40004400 	.word	0x40004400
 800461c:	20001860 	.word	0x20001860

08004620 <spiDone>:
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
//    Функция устанавливает в начальное состояние 'готов' служебные параметры порта SPI1:
//
void spiDone(SPI_HandleTypeDef *hspi)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
#ifdef SET_W25FLASH
	if (hspi->Instance == SPI2) {
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a0a      	ldr	r2, [pc, #40]	; (8004658 <spiDone+0x38>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d105      	bne.n	800463e <spiDone+0x1e>
		W25_UNSELECT();
 8004632:	f001 f97f 	bl	8005934 <W25_UNSELECT>
		spiRdy = 1;
 8004636:	4b09      	ldr	r3, [pc, #36]	; (800465c <spiDone+0x3c>)
 8004638:	2201      	movs	r2, #1
 800463a:	701a      	strb	r2, [r3, #0]
	else
	if (hspi->Instance == SPI1) {
		lcdRdy = 1;
	}
#endif
}
 800463c:	e007      	b.n	800464e <spiDone+0x2e>
	if (hspi->Instance == SPI1) {
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a07      	ldr	r2, [pc, #28]	; (8004660 <spiDone+0x40>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d102      	bne.n	800464e <spiDone+0x2e>
		lcdRdy = 1;
 8004648:	4b06      	ldr	r3, [pc, #24]	; (8004664 <spiDone+0x44>)
 800464a:	2201      	movs	r2, #1
 800464c:	701a      	strb	r2, [r3, #0]
}
 800464e:	bf00      	nop
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	40003800 	.word	0x40003800
 800465c:	200001bc 	.word	0x200001bc
 8004660:	40013000 	.word	0x40013000
 8004664:	20000000 	.word	0x20000000

08004668 <HAL_SPI_RxCpltCallback>:
//-------------------------------------------------------------------------------------------
//    CallBack функция, вызывается по завершении приема данных от порта SPI
//
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f7ff ffd5 	bl	8004620 <spiDone>
}
 8004676:	bf00      	nop
 8004678:	3708      	adds	r7, #8
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <HAL_SPI_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
//    CallBack функция, вызывается по завершении передачи данных в порт SPI
//
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b082      	sub	sp, #8
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7ff ffca 	bl	8004620 <spiDone>
}
 800468c:	bf00      	nop
 800468e:	3708      	adds	r7, #8
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <HAL_SPI_TxRxCpltCallback>:
//-------------------------------------------------------------------------------------------
//    CallBack функция, вызывается по завершении приема/передачи данных порта SPI
//
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7ff ffbf 	bl	8004620 <spiDone>
}
 80046a2:	bf00      	nop
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
	...

080046ac <HAL_SPI_ErrorCallback>:
//--------------------------------------------------------------------------------------------
//    CallBack функция, вызывается при возникновении ошибки у модуля SPI
//
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7ff ffb3 	bl	8004620 <spiDone>
	devError |= devSPI;
 80046ba:	4b05      	ldr	r3, [pc, #20]	; (80046d0 <HAL_SPI_ErrorCallback+0x24>)
 80046bc:	881b      	ldrh	r3, [r3, #0]
 80046be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046c2:	b29a      	uxth	r2, r3
 80046c4:	4b02      	ldr	r3, [pc, #8]	; (80046d0 <HAL_SPI_ErrorCallback+0x24>)
 80046c6:	801a      	strh	r2, [r3, #0]
}
 80046c8:	bf00      	nop
 80046ca:	3708      	adds	r7, #8
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	20001860 	.word	0x20001860

080046d4 <HAL_I2C_ErrorCallback>:
	}
#endif
}
//--------------------------------------------------------------------------------------------
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
#ifdef SET_RDA_CHIP
	if (hi2c->Instance == I2C1) {
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a07      	ldr	r2, [pc, #28]	; (8004700 <HAL_I2C_ErrorCallback+0x2c>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d106      	bne.n	80046f4 <HAL_I2C_ErrorCallback+0x20>
		devError |= devRDA;
 80046e6:	4b07      	ldr	r3, [pc, #28]	; (8004704 <HAL_I2C_ErrorCallback+0x30>)
 80046e8:	881b      	ldrh	r3, [r3, #0]
 80046ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	4b04      	ldr	r3, [pc, #16]	; (8004704 <HAL_I2C_ErrorCallback+0x30>)
 80046f2:	801a      	strh	r2, [r3, #0]
	}
#endif
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr
 8004700:	40005400 	.word	0x40005400
 8004704:	20001860 	.word	0x20001860

08004708 <HAL_GPIO_EXTI_Callback>:
//--------------------------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
 800470e:	4603      	mov	r3, r0
 8004710:	80fb      	strh	r3, [r7, #6]
	if ((GPIO_Pin != KEY0_Pin) && (GPIO_Pin != KEY1_Pin)) return;
 8004712:	88fb      	ldrh	r3, [r7, #6]
 8004714:	2b02      	cmp	r3, #2
 8004716:	d002      	beq.n	800471e <HAL_GPIO_EXTI_Callback+0x16>
 8004718:	88fb      	ldrh	r3, [r7, #6]
 800471a:	2b04      	cmp	r3, #4
 800471c:	d110      	bne.n	8004740 <HAL_GPIO_EXTI_Callback+0x38>

	if (GPIO_Pin == KEY0_Pin) seek_up = 1;
 800471e:	88fb      	ldrh	r3, [r7, #6]
 8004720:	2b02      	cmp	r3, #2
 8004722:	d103      	bne.n	800472c <HAL_GPIO_EXTI_Callback+0x24>
 8004724:	4b08      	ldr	r3, [pc, #32]	; (8004748 <HAL_GPIO_EXTI_Callback+0x40>)
 8004726:	2201      	movs	r2, #1
 8004728:	701a      	strb	r2, [r3, #0]
 800472a:	e005      	b.n	8004738 <HAL_GPIO_EXTI_Callback+0x30>
	else
	if (GPIO_Pin == KEY1_Pin) seek_up = 0;
 800472c:	88fb      	ldrh	r3, [r7, #6]
 800472e:	2b04      	cmp	r3, #4
 8004730:	d102      	bne.n	8004738 <HAL_GPIO_EXTI_Callback+0x30>
 8004732:	4b05      	ldr	r3, [pc, #20]	; (8004748 <HAL_GPIO_EXTI_Callback+0x40>)
 8004734:	2200      	movs	r2, #0
 8004736:	701a      	strb	r2, [r3, #0]

	putEvt(cmdScan);
 8004738:	200b      	movs	r0, #11
 800473a:	f7ff f8b7 	bl	80038ac <putEvt>
 800473e:	e000      	b.n	8004742 <HAL_GPIO_EXTI_Callback+0x3a>
	if ((GPIO_Pin != KEY0_Pin) && (GPIO_Pin != KEY1_Pin)) return;
 8004740:	bf00      	nop
}
 8004742:	3708      	adds	r7, #8
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	200001d6 	.word	0x200001d6

0800474c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004750:	b672      	cpsid	i
}
 8004752:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  devError |= devSYS;
 8004754:	4b05      	ldr	r3, [pc, #20]	; (800476c <Error_Handler+0x20>)
 8004756:	881b      	ldrh	r3, [r3, #0]
 8004758:	f043 0320 	orr.w	r3, r3, #32
 800475c:	b29a      	uxth	r2, r3
 800475e:	4b03      	ldr	r3, [pc, #12]	; (800476c <Error_Handler+0x20>)
 8004760:	801a      	strh	r2, [r3, #0]
	  errLedOn(true);
 8004762:	2001      	movs	r0, #1
 8004764:	f7ff faec 	bl	8003d40 <errLedOn>
	  devError |= devSYS;
 8004768:	e7f4      	b.n	8004754 <Error_Handler+0x8>
 800476a:	bf00      	nop
 800476c:	20001860 	.word	0x20001860

08004770 <rda5807_init>:

//==============================================================================
// Инициализация rda5807
//==============================================================================
uint8_t rda5807_init(float *freq)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b088      	sub	sp, #32
 8004774:	af04      	add	r7, sp, #16
 8004776:	6078      	str	r0, [r7, #4]
uint8_t buf[2] = {0, 0};
 8004778:	2300      	movs	r3, #0
 800477a:	813b      	strh	r3, [r7, #8]
uint8_t *id = &buf[0];
 800477c:	f107 0308 	add.w	r3, r7, #8
 8004780:	60fb      	str	r3, [r7, #12]

    if (HAL_I2C_Mem_Read(i2cRDA, RDA5807_RandAccess_Addr, 0, I2C_MEMADD_SIZE_8BIT, buf, 2, RDA5807_TO) != HAL_OK) {
 8004782:	4b30      	ldr	r3, [pc, #192]	; (8004844 <rda5807_init+0xd4>)
 8004784:	6818      	ldr	r0, [r3, #0]
 8004786:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800478a:	9302      	str	r3, [sp, #8]
 800478c:	2302      	movs	r3, #2
 800478e:	9301      	str	r3, [sp, #4]
 8004790:	f107 0308 	add.w	r3, r7, #8
 8004794:	9300      	str	r3, [sp, #0]
 8004796:	2301      	movs	r3, #1
 8004798:	2200      	movs	r2, #0
 800479a:	2122      	movs	r1, #34	; 0x22
 800479c:	f002 ff5e 	bl	800765c <HAL_I2C_Mem_Read>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d13c      	bne.n	8004820 <rda5807_init+0xb0>
    stx[0] = '\0';
    for (int i = 0; i < 64; i++) sprintf(stx+strlen(stx)," %02x", buf11[i]);
    Report(1, "[%s] %s\r\n", __func__, stx);
#endif

    rda5807_SoftReset();
 80047a6:	f000 f927 	bl	80049f8 <rda5807_SoftReset>
    if (devError & devRDA) goto err_out;
 80047aa:	4b27      	ldr	r3, [pc, #156]	; (8004848 <rda5807_init+0xd8>)
 80047ac:	881b      	ldrh	r3, [r3, #0]
 80047ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d136      	bne.n	8004824 <rda5807_init+0xb4>

    rda5807_SetupDefault();
 80047b6:	f000 f949 	bl	8004a4c <rda5807_SetupDefault>
    if (devError & devRDA) goto err_out;
 80047ba:	4b23      	ldr	r3, [pc, #140]	; (8004848 <rda5807_init+0xd8>)
 80047bc:	881b      	ldrh	r3, [r3, #0]
 80047be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d130      	bne.n	8004828 <rda5807_init+0xb8>

    uint16_t fr = (uint16_t)(*freq * 10);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	edd3 7a00 	vldr	s15, [r3]
 80047cc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80047d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047d8:	ee17 3a90 	vmov	r3, s15
 80047dc:	817b      	strh	r3, [r7, #10]
    rda5807_SetFreq_In100Khz(fr);
 80047de:	897b      	ldrh	r3, [r7, #10]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f000 fa79 	bl	8004cd8 <rda5807_SetFreq_In100Khz>
    //
    HAL_Delay(200);
 80047e6:	20c8      	movs	r0, #200	; 0xc8
 80047e8:	f001 fea8 	bl	800653c <HAL_Delay>
    //
    *freq = (float)rda5807_GetFreq_In100Khz();
 80047ec:	f000 faee 	bl	8004dcc <rda5807_GetFreq_In100Khz>
 80047f0:	4603      	mov	r3, r0
 80047f2:	ee07 3a90 	vmov	s15, r3
 80047f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	edc3 7a00 	vstr	s15, [r3]
    *freq /= 10;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	ed93 7a00 	vldr	s14, [r3]
 8004806:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800480a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	edc3 7a00 	vstr	s15, [r3]
#ifdef SET_RDA_DEBUG
    Report(1, "[%s] Freq: %.2f\r\n", __func__, *freq);//rda5807_GetFreq_In100Khz());
#endif

    HAL_Delay(100);
 8004814:	2064      	movs	r0, #100	; 0x64
 8004816:	f001 fe91 	bl	800653c <HAL_Delay>

    return *id;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	e00d      	b.n	800483c <rda5807_init+0xcc>
    	goto err_out;
 8004820:	bf00      	nop
 8004822:	e002      	b.n	800482a <rda5807_init+0xba>
    if (devError & devRDA) goto err_out;
 8004824:	bf00      	nop
 8004826:	e000      	b.n	800482a <rda5807_init+0xba>
    if (devError & devRDA) goto err_out;
 8004828:	bf00      	nop

err_out:
	devError |= devRDA;
 800482a:	4b07      	ldr	r3, [pc, #28]	; (8004848 <rda5807_init+0xd8>)
 800482c:	881b      	ldrh	r3, [r3, #0]
 800482e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004832:	b29a      	uxth	r2, r3
 8004834:	4b04      	ldr	r3, [pc, #16]	; (8004848 <rda5807_init+0xd8>)
 8004836:	801a      	strh	r2, [r3, #0]
    return *id;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	781b      	ldrb	r3, [r3, #0]
}
 800483c:	4618      	mov	r0, r3
 800483e:	3710      	adds	r7, #16
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	200001f0 	.word	0x200001f0
 8004848:	20001860 	.word	0x20001860

0800484c <rda5807_rssi>:
//==============================================================================
uint16_t rda5807_rssi()
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
uint16_t word = 0;
 8004852:	2300      	movs	r3, #0
 8004854:	80fb      	strh	r3, [r7, #6]

    rda5807_read(0x0B, &word, 1);
 8004856:	1dbb      	adds	r3, r7, #6
 8004858:	2201      	movs	r2, #1
 800485a:	4619      	mov	r1, r3
 800485c:	200b      	movs	r0, #11
 800485e:	f000 f85d 	bl	800491c <rda5807_read>

    return (word >> 9);
 8004862:	88fb      	ldrh	r3, [r7, #6]
 8004864:	0a5b      	lsrs	r3, r3, #9
 8004866:	b29b      	uxth	r3, r3
}
 8004868:	4618      	mov	r0, r3
 800486a:	3708      	adds	r7, #8
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <rda5807_bytes_change>:

//==============================================================================
// Процедура меняет местами байты попарно в буфере pBuff 
//==============================================================================
void rda5807_bytes_change(uint8_t *pBuff, uint8_t count)
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	460b      	mov	r3, r1
 800487a:	70fb      	strb	r3, [r7, #3]
    while (count > 1) {    // Если осталась хотя бы пара байт
 800487c:	e010      	b.n	80048a0 <rda5807_bytes_change+0x30>
        uint8_t Temp = *(pBuff + 1);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	785b      	ldrb	r3, [r3, #1]
 8004882:	73fb      	strb	r3, [r7, #15]
        *(pBuff + 1) = *pBuff;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	3301      	adds	r3, #1
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	7812      	ldrb	r2, [r2, #0]
 800488c:	701a      	strb	r2, [r3, #0]
        *pBuff = Temp;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	7bfa      	ldrb	r2, [r7, #15]
 8004892:	701a      	strb	r2, [r3, #0]
        pBuff += 2;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	3302      	adds	r3, #2
 8004898:	607b      	str	r3, [r7, #4]
        count -= 2;
 800489a:	78fb      	ldrb	r3, [r7, #3]
 800489c:	3b02      	subs	r3, #2
 800489e:	70fb      	strb	r3, [r7, #3]
    while (count > 1) {    // Если осталась хотя бы пара байт
 80048a0:	78fb      	ldrb	r3, [r7, #3]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d8eb      	bhi.n	800487e <rda5807_bytes_change+0xe>
    }
}
 80048a6:	bf00      	nop
 80048a8:	bf00      	nop
 80048aa:	3714      	adds	r7, #20
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <rda5807_write_regfile>:
//==============================================================================
// Процедура пишет в rda5807 группу регистров (кол-во RegNum) начиная с 0x02
// Используется I2C-адрес RDA5807_SeqAccess_Addr
//==============================================================================
void rda5807_write_regfile(uint16_t *pBuff, uint8_t RegNum)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af02      	add	r7, sp, #8
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	460b      	mov	r3, r1
 80048be:	70fb      	strb	r3, [r7, #3]
    err = i2cm_Start(I2Cx, RDA5807_SeqAccess_Addr, 0, RDA5807_TO);
    if (err) {
        Error_Handler();
    } //*/

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 80048c0:	78fb      	ldrb	r3, [r7, #3]
 80048c2:	005b      	lsls	r3, r3, #1
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	4619      	mov	r1, r3
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f7ff ffd1 	bl	8004870 <rda5807_bytes_change>

//    err = i2cm_WriteBuff(I2Cx, (uint8_t *) pBuff, RegNum << 1, RDA5807_TO);
//    i2cm_Stop(I2Cx, RDA5807_TO);

    if (HAL_I2C_Master_Transmit(i2cRDA, (uint16_t)RDA5807_SeqAccess_Addr, (uint8_t *)pBuff, RegNum << 1, RDA5807_TO) != HAL_OK) {
 80048ce:	4b11      	ldr	r3, [pc, #68]	; (8004914 <rda5807_write_regfile+0x60>)
 80048d0:	6818      	ldr	r0, [r3, #0]
 80048d2:	78fb      	ldrb	r3, [r7, #3]
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	b29b      	uxth	r3, r3
 80048da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80048de:	9200      	str	r2, [sp, #0]
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	2120      	movs	r1, #32
 80048e4:	f002 fcb2 	bl	800724c <HAL_I2C_Master_Transmit>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d006      	beq.n	80048fc <rda5807_write_regfile+0x48>
    	devError |= devRDA;
 80048ee:	4b0a      	ldr	r3, [pc, #40]	; (8004918 <rda5807_write_regfile+0x64>)
 80048f0:	881b      	ldrh	r3, [r3, #0]
 80048f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	4b07      	ldr	r3, [pc, #28]	; (8004918 <rda5807_write_regfile+0x64>)
 80048fa:	801a      	strh	r2, [r3, #0]
    }

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 80048fc:	78fb      	ldrb	r3, [r7, #3]
 80048fe:	005b      	lsls	r3, r3, #1
 8004900:	b2db      	uxtb	r3, r3
 8004902:	4619      	mov	r1, r3
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f7ff ffb3 	bl	8004870 <rda5807_bytes_change>
}
 800490a:	bf00      	nop
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	200001f0 	.word	0x200001f0
 8004918:	20001860 	.word	0x20001860

0800491c <rda5807_read>:
//==============================================================================
// Процедура читает из rda5807 группу регистров (кол-во RegNum) начиная с RegAddr
// Используется I2C-адрес RDA5807_RandAccess_Addr (для режима совместимости с rda5800)
//==============================================================================
void rda5807_read(uint8_t RegAddr, uint16_t *pBuff, uint8_t RegNum)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af04      	add	r7, sp, #16
 8004922:	4603      	mov	r3, r0
 8004924:	6039      	str	r1, [r7, #0]
 8004926:	71fb      	strb	r3, [r7, #7]
 8004928:	4613      	mov	r3, r2
 800492a:	71bb      	strb	r3, [r7, #6]
        Error_Handler();
    }
    // Читаем
    i2cm_ReadBuffAndStop(I2Cx, (uint8_t *) pBuff, RegNum << 1, RDA5807_TO); //*/

    if (HAL_I2C_Mem_Read(i2cRDA, RDA5807_RandAccess_Addr,
 800492c:	4b13      	ldr	r3, [pc, #76]	; (800497c <rda5807_read+0x60>)
 800492e:	6818      	ldr	r0, [r3, #0]
 8004930:	79fb      	ldrb	r3, [r7, #7]
 8004932:	b29a      	uxth	r2, r3
 8004934:	79bb      	ldrb	r3, [r7, #6]
 8004936:	b29b      	uxth	r3, r3
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	b29b      	uxth	r3, r3
 800493c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004940:	9102      	str	r1, [sp, #8]
 8004942:	9301      	str	r3, [sp, #4]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	2301      	movs	r3, #1
 800494a:	2122      	movs	r1, #34	; 0x22
 800494c:	f002 fe86 	bl	800765c <HAL_I2C_Mem_Read>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d006      	beq.n	8004964 <rda5807_read+0x48>
    				     RegAddr, I2C_MEMADD_SIZE_8BIT,
						 (uint8_t *)pBuff, RegNum << 1,
						 RDA5807_TO) != HAL_OK) {
    	devError |= devRDA;
 8004956:	4b0a      	ldr	r3, [pc, #40]	; (8004980 <rda5807_read+0x64>)
 8004958:	881b      	ldrh	r3, [r3, #0]
 800495a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800495e:	b29a      	uxth	r2, r3
 8004960:	4b07      	ldr	r3, [pc, #28]	; (8004980 <rda5807_read+0x64>)
 8004962:	801a      	strh	r2, [r3, #0]
    }

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8004964:	79bb      	ldrb	r3, [r7, #6]
 8004966:	005b      	lsls	r3, r3, #1
 8004968:	b2db      	uxtb	r3, r3
 800496a:	4619      	mov	r1, r3
 800496c:	6838      	ldr	r0, [r7, #0]
 800496e:	f7ff ff7f 	bl	8004870 <rda5807_bytes_change>
}
 8004972:	bf00      	nop
 8004974:	3708      	adds	r7, #8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	200001f0 	.word	0x200001f0
 8004980:	20001860 	.word	0x20001860

08004984 <rda5807_write>:
//==============================================================================
// Процедура пишет в rda5807 группу регистров (кол-во RegNum) начиная с RegAddr
// Используется I2C-адрес RDA5807_RandAccess_Addr (для режима совместимости с rda5800)
//==============================================================================
void rda5807_write(uint8_t RegAddr, uint16_t *pBuff, uint8_t RegNum)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af04      	add	r7, sp, #16
 800498a:	4603      	mov	r3, r0
 800498c:	6039      	str	r1, [r7, #0]
 800498e:	71fb      	strb	r3, [r7, #7]
 8004990:	4613      	mov	r3, r2
 8004992:	71bb      	strb	r3, [r7, #6]

    if (i2cm_WriteBuff(I2Cx, &RegAddr, 1, RDA5807_TO)) {
        Error_Handler();
    } //*/

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8004994:	79bb      	ldrb	r3, [r7, #6]
 8004996:	005b      	lsls	r3, r3, #1
 8004998:	b2db      	uxtb	r3, r3
 800499a:	4619      	mov	r1, r3
 800499c:	6838      	ldr	r0, [r7, #0]
 800499e:	f7ff ff67 	bl	8004870 <rda5807_bytes_change>

    //err = i2cm_WriteBuff(I2Cx, (uint8_t *) pBuff, RegNum << 1, RDA5807_TO);
    //i2cm_Stop(I2Cx, RDA5807_TO);

    if (HAL_I2C_Mem_Write(i2cRDA,
 80049a2:	4b13      	ldr	r3, [pc, #76]	; (80049f0 <rda5807_write+0x6c>)
 80049a4:	6818      	ldr	r0, [r3, #0]
 80049a6:	79fb      	ldrb	r3, [r7, #7]
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	79bb      	ldrb	r3, [r7, #6]
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	005b      	lsls	r3, r3, #1
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80049b6:	9102      	str	r1, [sp, #8]
 80049b8:	9301      	str	r3, [sp, #4]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	2301      	movs	r3, #1
 80049c0:	2122      	movs	r1, #34	; 0x22
 80049c2:	f002 fd37 	bl	8007434 <HAL_I2C_Mem_Write>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d006      	beq.n	80049da <rda5807_write+0x56>
    					  RDA5807_RandAccess_Addr,
						  RegAddr, I2C_MEMADD_SIZE_8BIT,
						  (uint8_t *)pBuff, RegNum << 1,
						  RDA5807_TO) != HAL_OK) {
    	devError |= devRDA;
 80049cc:	4b09      	ldr	r3, [pc, #36]	; (80049f4 <rda5807_write+0x70>)
 80049ce:	881b      	ldrh	r3, [r3, #0]
 80049d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	4b07      	ldr	r3, [pc, #28]	; (80049f4 <rda5807_write+0x70>)
 80049d8:	801a      	strh	r2, [r3, #0]
    }

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 80049da:	79bb      	ldrb	r3, [r7, #6]
 80049dc:	005b      	lsls	r3, r3, #1
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	4619      	mov	r1, r3
 80049e2:	6838      	ldr	r0, [r7, #0]
 80049e4:	f7ff ff44 	bl	8004870 <rda5807_bytes_change>
}
 80049e8:	bf00      	nop
 80049ea:	3708      	adds	r7, #8
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	200001f0 	.word	0x200001f0
 80049f4:	20001860 	.word	0x20001860

080049f8 <rda5807_SoftReset>:

//==============================================================================
// Процедура делает программный сброс rda5807
//==============================================================================
void rda5807_SoftReset()
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
tReg02h reg02;

    rda5807_read(2, (uint16_t *)&reg02, 1);
 80049fe:	1d3b      	adds	r3, r7, #4
 8004a00:	2201      	movs	r2, #1
 8004a02:	4619      	mov	r1, r3
 8004a04:	2002      	movs	r0, #2
 8004a06:	f7ff ff89 	bl	800491c <rda5807_read>

	reg02.bENABLE = 1;
 8004a0a:	793b      	ldrb	r3, [r7, #4]
 8004a0c:	f043 0301 	orr.w	r3, r3, #1
 8004a10:	713b      	strb	r3, [r7, #4]
	reg02.bSOFT_RESET = 1;
 8004a12:	793b      	ldrb	r3, [r7, #4]
 8004a14:	f043 0302 	orr.w	r3, r3, #2
 8004a18:	713b      	strb	r3, [r7, #4]
    rda5807_write(2, (uint16_t *)&reg02, 1);
 8004a1a:	1d3b      	adds	r3, r7, #4
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	4619      	mov	r1, r3
 8004a20:	2002      	movs	r0, #2
 8004a22:	f7ff ffaf 	bl	8004984 <rda5807_write>

    reg02.bENABLE = 1;
 8004a26:	793b      	ldrb	r3, [r7, #4]
 8004a28:	f043 0301 	orr.w	r3, r3, #1
 8004a2c:	713b      	strb	r3, [r7, #4]
    reg02.bSOFT_RESET = 0;
 8004a2e:	793b      	ldrb	r3, [r7, #4]
 8004a30:	f36f 0341 	bfc	r3, #1, #1
 8004a34:	713b      	strb	r3, [r7, #4]
    rda5807_write(2, (uint16_t *)&reg02, 1);
 8004a36:	1d3b      	adds	r3, r7, #4
 8004a38:	2201      	movs	r2, #1
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	2002      	movs	r0, #2
 8004a3e:	f7ff ffa1 	bl	8004984 <rda5807_write>
}
 8004a42:	bf00      	nop
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
	...

08004a4c <rda5807_SetupDefault>:

//==============================================================================
// Процедура производит начальную настройку rda5807
//==============================================================================
void rda5807_SetupDefault()
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	af00      	add	r7, sp, #0
	tReg06h Reg06;
	tReg07h Reg07;
} Buffs;*/

    // Регистр 0x02
    Buffs.Reg02.bENABLE = 1;
 8004a50:	4a6b      	ldr	r2, [pc, #428]	; (8004c00 <rda5807_SetupDefault+0x1b4>)
 8004a52:	7813      	ldrb	r3, [r2, #0]
 8004a54:	f043 0301 	orr.w	r3, r3, #1
 8004a58:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSOFT_RESET = 0;
 8004a5a:	4a69      	ldr	r2, [pc, #420]	; (8004c00 <rda5807_SetupDefault+0x1b4>)
 8004a5c:	7813      	ldrb	r3, [r2, #0]
 8004a5e:	f36f 0341 	bfc	r3, #1, #1
 8004a62:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bNEW_METHOD = 1;
 8004a64:	4a66      	ldr	r2, [pc, #408]	; (8004c00 <rda5807_SetupDefault+0x1b4>)
 8004a66:	7813      	ldrb	r3, [r2, #0]
 8004a68:	f043 0304 	orr.w	r3, r3, #4
 8004a6c:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bRDS_EN = 1;
 8004a6e:	4a64      	ldr	r2, [pc, #400]	; (8004c00 <rda5807_SetupDefault+0x1b4>)
 8004a70:	7813      	ldrb	r3, [r2, #0]
 8004a72:	f043 0308 	orr.w	r3, r3, #8
 8004a76:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bCLK_MODE = 0;        // 32.768
 8004a78:	4a61      	ldr	r2, [pc, #388]	; (8004c00 <rda5807_SetupDefault+0x1b4>)
 8004a7a:	7813      	ldrb	r3, [r2, #0]
 8004a7c:	f36f 1306 	bfc	r3, #4, #3
 8004a80:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSKMODE = 0;
 8004a82:	4a5f      	ldr	r2, [pc, #380]	; (8004c00 <rda5807_SetupDefault+0x1b4>)
 8004a84:	7813      	ldrb	r3, [r2, #0]
 8004a86:	f36f 13c7 	bfc	r3, #7, #1
 8004a8a:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSEEK = 0;
 8004a8c:	4a5c      	ldr	r2, [pc, #368]	; (8004c00 <rda5807_SetupDefault+0x1b4>)
 8004a8e:	7853      	ldrb	r3, [r2, #1]
 8004a90:	f36f 0300 	bfc	r3, #0, #1
 8004a94:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bSEEKUP = 1;
 8004a96:	4a5a      	ldr	r2, [pc, #360]	; (8004c00 <rda5807_SetupDefault+0x1b4>)
 8004a98:	7853      	ldrb	r3, [r2, #1]
 8004a9a:	f043 0302 	orr.w	r3, r3, #2
 8004a9e:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bRCLK_DirectInput = 0;
 8004aa0:	4a57      	ldr	r2, [pc, #348]	; (8004c00 <rda5807_SetupDefault+0x1b4>)
 8004aa2:	7853      	ldrb	r3, [r2, #1]
 8004aa4:	f36f 0382 	bfc	r3, #2, #1
 8004aa8:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bRCLK_NonCalibMode = 0;
 8004aaa:	4a55      	ldr	r2, [pc, #340]	; (8004c00 <rda5807_SetupDefault+0x1b4>)
 8004aac:	7853      	ldrb	r3, [r2, #1]
 8004aae:	f36f 03c3 	bfc	r3, #3, #1
 8004ab2:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bBASS = 0;
 8004ab4:	4a52      	ldr	r2, [pc, #328]	; (8004c00 <rda5807_SetupDefault+0x1b4>)
 8004ab6:	7853      	ldrb	r3, [r2, #1]
 8004ab8:	f36f 1304 	bfc	r3, #4, #1
 8004abc:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bMONO = 0;
 8004abe:	4a50      	ldr	r2, [pc, #320]	; (8004c00 <rda5807_SetupDefault+0x1b4>)
 8004ac0:	7853      	ldrb	r3, [r2, #1]
 8004ac2:	f36f 1345 	bfc	r3, #5, #1
 8004ac6:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bDMUTE = 1;
 8004ac8:	4a4d      	ldr	r2, [pc, #308]	; (8004c00 <rda5807_SetupDefault+0x1b4>)
 8004aca:	7853      	ldrb	r3, [r2, #1]
 8004acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ad0:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bDHIZ = 1;
 8004ad2:	4a4b      	ldr	r2, [pc, #300]	; (8004c00 <rda5807_SetupDefault+0x1b4>)
 8004ad4:	7853      	ldrb	r3, [r2, #1]
 8004ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ada:	7053      	strb	r3, [r2, #1]
    // Регистр 0x03
    Buffs.Reg03.bSPACE = 0;//Step;//0;   // Шаг настройки - 0 = 100 КГц
 8004adc:	4a48      	ldr	r2, [pc, #288]	; (8004c00 <rda5807_SetupDefault+0x1b4>)
 8004ade:	7893      	ldrb	r3, [r2, #2]
 8004ae0:	f36f 0301 	bfc	r3, #0, #2
 8004ae4:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bBAND = Band;//2;//0;    // Диапазон 2 - 76–108 MHz
 8004ae6:	4b47      	ldr	r3, [pc, #284]	; (8004c04 <rda5807_SetupDefault+0x1b8>)
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	f003 0303 	and.w	r3, r3, #3
 8004aee:	b2d9      	uxtb	r1, r3
 8004af0:	4a43      	ldr	r2, [pc, #268]	; (8004c00 <rda5807_SetupDefault+0x1b4>)
 8004af2:	7893      	ldrb	r3, [r2, #2]
 8004af4:	f361 0383 	bfi	r3, r1, #2, #2
 8004af8:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bTUNE = 1;
 8004afa:	4a41      	ldr	r2, [pc, #260]	; (8004c00 <rda5807_SetupDefault+0x1b4>)
 8004afc:	7893      	ldrb	r3, [r2, #2]
 8004afe:	f043 0310 	orr.w	r3, r3, #16
 8004b02:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bDIRECT_MODE = 0;
 8004b04:	4a3e      	ldr	r2, [pc, #248]	; (8004c00 <rda5807_SetupDefault+0x1b4>)
 8004b06:	7893      	ldrb	r3, [r2, #2]
 8004b08:	f36f 1345 	bfc	r3, #5, #1
 8004b0c:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bCHAN = 0;
 8004b0e:	4a3c      	ldr	r2, [pc, #240]	; (8004c00 <rda5807_SetupDefault+0x1b4>)
 8004b10:	8853      	ldrh	r3, [r2, #2]
 8004b12:	f36f 138f 	bfc	r3, #6, #10
 8004b16:	8053      	strh	r3, [r2, #2]
    // Регистр 0x04
    Buffs.Reg04.bRSVD1 = 0;
 8004b18:	4b39      	ldr	r3, [pc, #228]	; (8004c00 <rda5807_SetupDefault+0x1b4>)
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	711a      	strb	r2, [r3, #4]
    Buffs.Reg04.bAFCD = 0;
 8004b1e:	4a38      	ldr	r2, [pc, #224]	; (8004c00 <rda5807_SetupDefault+0x1b4>)
 8004b20:	7953      	ldrb	r3, [r2, #5]
 8004b22:	f36f 0300 	bfc	r3, #0, #1
 8004b26:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bSOFTMUTE_EN = 1;
 8004b28:	4a35      	ldr	r2, [pc, #212]	; (8004c00 <rda5807_SetupDefault+0x1b4>)
 8004b2a:	7953      	ldrb	r3, [r2, #5]
 8004b2c:	f043 0302 	orr.w	r3, r3, #2
 8004b30:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bRSVD2 = 0;
 8004b32:	4a33      	ldr	r2, [pc, #204]	; (8004c00 <rda5807_SetupDefault+0x1b4>)
 8004b34:	7953      	ldrb	r3, [r2, #5]
 8004b36:	f36f 0382 	bfc	r3, #2, #1
 8004b3a:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bDE = 0;
 8004b3c:	4a30      	ldr	r2, [pc, #192]	; (8004c00 <rda5807_SetupDefault+0x1b4>)
 8004b3e:	7953      	ldrb	r3, [r2, #5]
 8004b40:	f36f 03c3 	bfc	r3, #3, #1
 8004b44:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bRSVD3 = 0;
 8004b46:	4a2e      	ldr	r2, [pc, #184]	; (8004c00 <rda5807_SetupDefault+0x1b4>)
 8004b48:	7953      	ldrb	r3, [r2, #5]
 8004b4a:	f36f 1307 	bfc	r3, #4, #4
 8004b4e:	7153      	strb	r3, [r2, #5]
    // Регистр 0x05
    Buffs.Reg05.bVOLUME = 0;
 8004b50:	4a2b      	ldr	r2, [pc, #172]	; (8004c00 <rda5807_SetupDefault+0x1b4>)
 8004b52:	7993      	ldrb	r3, [r2, #6]
 8004b54:	f36f 0303 	bfc	r3, #0, #4
 8004b58:	7193      	strb	r3, [r2, #6]
    Buffs.Reg05.bANT_GAIN = 0;
 8004b5a:	4a29      	ldr	r2, [pc, #164]	; (8004c00 <rda5807_SetupDefault+0x1b4>)
 8004b5c:	7993      	ldrb	r3, [r2, #6]
 8004b5e:	f36f 1305 	bfc	r3, #4, #2
 8004b62:	7193      	strb	r3, [r2, #6]
    Buffs.Reg05.bANT_TYPE = ANT_TYPE_Both;//ANT_TYPE_External;//ANT_TYPE_Headphones;//ANT_TYPE_Both;
 8004b64:	4a26      	ldr	r2, [pc, #152]	; (8004c00 <rda5807_SetupDefault+0x1b4>)
 8004b66:	7993      	ldrb	r3, [r2, #6]
 8004b68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b6c:	7193      	strb	r3, [r2, #6]
    Buffs.Reg05.bSEEKTH = 8;
 8004b6e:	4a24      	ldr	r2, [pc, #144]	; (8004c00 <rda5807_SetupDefault+0x1b4>)
 8004b70:	79d3      	ldrb	r3, [r2, #7]
 8004b72:	2108      	movs	r1, #8
 8004b74:	f361 0303 	bfi	r3, r1, #0, #4
 8004b78:	71d3      	strb	r3, [r2, #7]
    Buffs.Reg05.bRSVD3 = 0;
 8004b7a:	4a21      	ldr	r2, [pc, #132]	; (8004c00 <rda5807_SetupDefault+0x1b4>)
 8004b7c:	79d3      	ldrb	r3, [r2, #7]
 8004b7e:	f36f 1306 	bfc	r3, #4, #3
 8004b82:	71d3      	strb	r3, [r2, #7]
    Buffs.Reg05.bINT_MODE = 1;
 8004b84:	4a1e      	ldr	r2, [pc, #120]	; (8004c00 <rda5807_SetupDefault+0x1b4>)
 8004b86:	79d3      	ldrb	r3, [r2, #7]
 8004b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b8c:	71d3      	strb	r3, [r2, #7]
    // Регистр 0x06
    Buffs.Reg06.bRSVD1 = 0;
 8004b8e:	4a1c      	ldr	r2, [pc, #112]	; (8004c00 <rda5807_SetupDefault+0x1b4>)
 8004b90:	8913      	ldrh	r3, [r2, #8]
 8004b92:	f36f 030c 	bfc	r3, #0, #13
 8004b96:	8113      	strh	r3, [r2, #8]
    Buffs.Reg06.bOPEN_MODE = 0;
 8004b98:	4a19      	ldr	r2, [pc, #100]	; (8004c00 <rda5807_SetupDefault+0x1b4>)
 8004b9a:	7a53      	ldrb	r3, [r2, #9]
 8004b9c:	f36f 1346 	bfc	r3, #5, #2
 8004ba0:	7253      	strb	r3, [r2, #9]
    Buffs.Reg06.bRSVD2 = 0;
 8004ba2:	4a17      	ldr	r2, [pc, #92]	; (8004c00 <rda5807_SetupDefault+0x1b4>)
 8004ba4:	7a53      	ldrb	r3, [r2, #9]
 8004ba6:	f36f 13c7 	bfc	r3, #7, #1
 8004baa:	7253      	strb	r3, [r2, #9]
    // Регистр 0x07
    Buffs.Reg07.bFREQ_MODE = 0;
 8004bac:	4a14      	ldr	r2, [pc, #80]	; (8004c00 <rda5807_SetupDefault+0x1b4>)
 8004bae:	7a93      	ldrb	r3, [r2, #10]
 8004bb0:	f36f 0300 	bfc	r3, #0, #1
 8004bb4:	7293      	strb	r3, [r2, #10]
    Buffs.Reg07.bSOFTBLEND_EN = 1;
 8004bb6:	4a12      	ldr	r2, [pc, #72]	; (8004c00 <rda5807_SetupDefault+0x1b4>)
 8004bb8:	7a93      	ldrb	r3, [r2, #10]
 8004bba:	f043 0302 	orr.w	r3, r3, #2
 8004bbe:	7293      	strb	r3, [r2, #10]
    Buffs.Reg07.bSEEK_TH_OLD = 0;
 8004bc0:	4a0f      	ldr	r2, [pc, #60]	; (8004c00 <rda5807_SetupDefault+0x1b4>)
 8004bc2:	7a93      	ldrb	r3, [r2, #10]
 8004bc4:	f36f 0387 	bfc	r3, #2, #6
 8004bc8:	7293      	strb	r3, [r2, #10]
    Buffs.Reg07.bRSVD1 = 0;
 8004bca:	4a0d      	ldr	r2, [pc, #52]	; (8004c00 <rda5807_SetupDefault+0x1b4>)
 8004bcc:	7ad3      	ldrb	r3, [r2, #11]
 8004bce:	f36f 0300 	bfc	r3, #0, #1
 8004bd2:	72d3      	strb	r3, [r2, #11]
    Buffs.Reg07.b65M_50M_MODE = 1;
 8004bd4:	4a0a      	ldr	r2, [pc, #40]	; (8004c00 <rda5807_SetupDefault+0x1b4>)
 8004bd6:	7ad3      	ldrb	r3, [r2, #11]
 8004bd8:	f043 0302 	orr.w	r3, r3, #2
 8004bdc:	72d3      	strb	r3, [r2, #11]
    Buffs.Reg07.bTH_SOFRBLEND = 16;
 8004bde:	4a08      	ldr	r2, [pc, #32]	; (8004c00 <rda5807_SetupDefault+0x1b4>)
 8004be0:	7ad3      	ldrb	r3, [r2, #11]
 8004be2:	2110      	movs	r1, #16
 8004be4:	f361 0386 	bfi	r3, r1, #2, #5
 8004be8:	72d3      	strb	r3, [r2, #11]
    Buffs.Reg07.bRSVD2 = 0;
 8004bea:	4a05      	ldr	r2, [pc, #20]	; (8004c00 <rda5807_SetupDefault+0x1b4>)
 8004bec:	7ad3      	ldrb	r3, [r2, #11]
 8004bee:	f36f 13c7 	bfc	r3, #7, #1
 8004bf2:	72d3      	strb	r3, [r2, #11]

    // Пишем регистры функцией записи регистрового файла
    rda5807_write_regfile((uint16_t *)&(Buffs.Reg02), 6);
 8004bf4:	2106      	movs	r1, #6
 8004bf6:	4802      	ldr	r0, [pc, #8]	; (8004c00 <rda5807_SetupDefault+0x1b4>)
 8004bf8:	f7ff fe5c 	bl	80048b4 <rda5807_write_regfile>
}
 8004bfc:	bf00      	nop
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	20003048 	.word	0x20003048
 8004c04:	200001d4 	.word	0x200001d4

08004c08 <rda5807_SetVolume>:

//==============================================================================
// Процедура устанавливает уровень громкости (0..16) выхода rda5807. При Value=0 включает MUTE
//==============================================================================
void rda5807_SetVolume(uint8_t Value)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	4603      	mov	r3, r0
 8004c10:	71fb      	strb	r3, [r7, #7]
//tReg02h Reg02;
//tReg05h Reg05;
uint8_t Mute = Value ? 0 : 1;
 8004c12:	79fb      	ldrb	r3, [r7, #7]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	bf0c      	ite	eq
 8004c18:	2301      	moveq	r3, #1
 8004c1a:	2300      	movne	r3, #0
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	73fb      	strb	r3, [r7, #15]

    if (Value > 16) Value = 16;
 8004c20:	79fb      	ldrb	r3, [r7, #7]
 8004c22:	2b10      	cmp	r3, #16
 8004c24:	d901      	bls.n	8004c2a <rda5807_SetVolume+0x22>
 8004c26:	2310      	movs	r3, #16
 8004c28:	71fb      	strb	r3, [r7, #7]

    Value--;    // Значение для поля Volume на 1 меньше, чем входной параметр функции
 8004c2a:	79fb      	ldrb	r3, [r7, #7]
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	71fb      	strb	r3, [r7, #7]

    if (!Mute) {
 8004c30:	7bfb      	ldrb	r3, [r7, #15]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d112      	bne.n	8004c5c <rda5807_SetVolume+0x54>
        // Читаем регистр 0x05
        rda5807_read(5, (uint16_t *)&Buffs.Reg05, 1);
 8004c36:	2201      	movs	r2, #1
 8004c38:	4915      	ldr	r1, [pc, #84]	; (8004c90 <rda5807_SetVolume+0x88>)
 8004c3a:	2005      	movs	r0, #5
 8004c3c:	f7ff fe6e 	bl	800491c <rda5807_read>
        // Меняем значение поля VOLUME
        Buffs.Reg05.bVOLUME = Value;
 8004c40:	79fb      	ldrb	r3, [r7, #7]
 8004c42:	f003 030f 	and.w	r3, r3, #15
 8004c46:	b2d9      	uxtb	r1, r3
 8004c48:	4a12      	ldr	r2, [pc, #72]	; (8004c94 <rda5807_SetVolume+0x8c>)
 8004c4a:	7993      	ldrb	r3, [r2, #6]
 8004c4c:	f361 0303 	bfi	r3, r1, #0, #4
 8004c50:	7193      	strb	r3, [r2, #6]
        // Пишем регистр 0x05
        rda5807_write(5, (uint16_t *)&Buffs.Reg05, 1);
 8004c52:	2201      	movs	r2, #1
 8004c54:	490e      	ldr	r1, [pc, #56]	; (8004c90 <rda5807_SetVolume+0x88>)
 8004c56:	2005      	movs	r0, #5
 8004c58:	f7ff fe94 	bl	8004984 <rda5807_write>
    }

    // Читаем регистр 0x02
    rda5807_read(2, (uint16_t *)&Buffs.Reg02, 1);
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	490d      	ldr	r1, [pc, #52]	; (8004c94 <rda5807_SetVolume+0x8c>)
 8004c60:	2002      	movs	r0, #2
 8004c62:	f7ff fe5b 	bl	800491c <rda5807_read>
    // Меняем значение поля VOLUME
    Buffs.Reg02.bDMUTE = Mute ? 0 : 1;
 8004c66:	7bfb      	ldrb	r3, [r7, #15]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	bf0c      	ite	eq
 8004c6c:	2301      	moveq	r3, #1
 8004c6e:	2300      	movne	r3, #0
 8004c70:	b2d9      	uxtb	r1, r3
 8004c72:	4a08      	ldr	r2, [pc, #32]	; (8004c94 <rda5807_SetVolume+0x8c>)
 8004c74:	7853      	ldrb	r3, [r2, #1]
 8004c76:	f361 1386 	bfi	r3, r1, #6, #1
 8004c7a:	7053      	strb	r3, [r2, #1]
    // Пишем регистр 0x02
    rda5807_write(2, (uint16_t *)&Buffs.Reg02, 1);
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	4905      	ldr	r1, [pc, #20]	; (8004c94 <rda5807_SetVolume+0x8c>)
 8004c80:	2002      	movs	r0, #2
 8004c82:	f7ff fe7f 	bl	8004984 <rda5807_write>
}
 8004c86:	bf00      	nop
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	2000304e 	.word	0x2000304e
 8004c94:	20003048 	.word	0x20003048

08004c98 <rda5807_SetBassBoost>:

//==============================================================================
// Процедура включает/выключает BassBoost
//==============================================================================
void rda5807_SetBassBoost(uint8_t Value)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	71fb      	strb	r3, [r7, #7]
//tReg02h Reg02;

    // Читаем регистр 0x02
    rda5807_read(2, (uint16_t *)&Buffs.Reg02, 1);
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	490b      	ldr	r1, [pc, #44]	; (8004cd4 <rda5807_SetBassBoost+0x3c>)
 8004ca6:	2002      	movs	r0, #2
 8004ca8:	f7ff fe38 	bl	800491c <rda5807_read>
    // Меняем значение поля BASS
    Buffs.Reg02.bBASS = (Value) ? 1 : 0;
 8004cac:	79fb      	ldrb	r3, [r7, #7]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	bf14      	ite	ne
 8004cb2:	2301      	movne	r3, #1
 8004cb4:	2300      	moveq	r3, #0
 8004cb6:	b2d9      	uxtb	r1, r3
 8004cb8:	4a06      	ldr	r2, [pc, #24]	; (8004cd4 <rda5807_SetBassBoost+0x3c>)
 8004cba:	7853      	ldrb	r3, [r2, #1]
 8004cbc:	f361 1304 	bfi	r3, r1, #4, #1
 8004cc0:	7053      	strb	r3, [r2, #1]
    // Пишем регистр 0x02
    rda5807_write(2, (uint16_t *)&Buffs.Reg02, 1);
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	4903      	ldr	r1, [pc, #12]	; (8004cd4 <rda5807_SetBassBoost+0x3c>)
 8004cc6:	2002      	movs	r0, #2
 8004cc8:	f7ff fe5c 	bl	8004984 <rda5807_write>
}
 8004ccc:	bf00      	nop
 8004cce:	3708      	adds	r7, #8
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	20003048 	.word	0x20003048

08004cd8 <rda5807_SetFreq_In100Khz>:
//==============================================================================
// Процедура устанавливает текущую частоту Freq100kHz и стартует перенастройку rda5807 на эту частоту.
// Окончание процесса можно установки можно проконтроллировать по обнулению бита STR в регистре 0x0A (функцией rda5807_Get_SeekTuneReadyFlag)
//==============================================================================
void rda5807_SetFreq_In100Khz(uint16_t Freq100kHz)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	4603      	mov	r3, r0
 8004ce0:	80fb      	strh	r3, [r7, #6]
//tReg03h Reg03;
uint16_t l = 870, r = 1080;
 8004ce2:	f240 3366 	movw	r3, #870	; 0x366
 8004ce6:	81fb      	strh	r3, [r7, #14]
 8004ce8:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8004cec:	81bb      	strh	r3, [r7, #12]

    // Проверка входного параметра для диапазона Buffs.Reg03.bBAND
	switch (Buffs.Reg03.bBAND) {    // Диапазон 87–108 MHz
 8004cee:	4b33      	ldr	r3, [pc, #204]	; (8004dbc <rda5807_SetFreq_In100Khz+0xe4>)
 8004cf0:	789b      	ldrb	r3, [r3, #2]
 8004cf2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	2b03      	cmp	r3, #3
 8004cfa:	d011      	beq.n	8004d20 <rda5807_SetFreq_In100Khz+0x48>
 8004cfc:	2b03      	cmp	r3, #3
 8004cfe:	dc16      	bgt.n	8004d2e <rda5807_SetFreq_In100Khz+0x56>
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d002      	beq.n	8004d0a <rda5807_SetFreq_In100Khz+0x32>
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d007      	beq.n	8004d18 <rda5807_SetFreq_In100Khz+0x40>
 8004d08:	e011      	b.n	8004d2e <rda5807_SetFreq_In100Khz+0x56>
		//case 0:// 00 = 87–108 MHz (US/Europe)
		//break;
		case 1:// 01 = 76–91 MHz (Japan)
			l = 760;
 8004d0a:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8004d0e:	81fb      	strh	r3, [r7, #14]
			r = 910;
 8004d10:	f240 338e 	movw	r3, #910	; 0x38e
 8004d14:	81bb      	strh	r3, [r7, #12]
		break;
 8004d16:	e00a      	b.n	8004d2e <rda5807_SetFreq_In100Khz+0x56>
		case 2:// 10 = 76–108 MHz (world wide)
			l = 760;
 8004d18:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8004d1c:	81fb      	strh	r3, [r7, #14]
		break;
 8004d1e:	e006      	b.n	8004d2e <rda5807_SetFreq_In100Khz+0x56>
		case 3:// 11 = 65 –76 MHz (East Europe) or 50-65MHz
			l = 650;
 8004d20:	f240 238a 	movw	r3, #650	; 0x28a
 8004d24:	81fb      	strh	r3, [r7, #14]
			r = 760;
 8004d26:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8004d2a:	81bb      	strh	r3, [r7, #12]
		break;
 8004d2c:	bf00      	nop
	}
	lBand = ((float)l) / 10;
 8004d2e:	89fb      	ldrh	r3, [r7, #14]
 8004d30:	ee07 3a90 	vmov	s15, r3
 8004d34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d38:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004d3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d40:	4b1f      	ldr	r3, [pc, #124]	; (8004dc0 <rda5807_SetFreq_In100Khz+0xe8>)
 8004d42:	edc3 7a00 	vstr	s15, [r3]
	rBand = ((float)r) / 10;
 8004d46:	89bb      	ldrh	r3, [r7, #12]
 8004d48:	ee07 3a90 	vmov	s15, r3
 8004d4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d50:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004d54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d58:	4b1a      	ldr	r3, [pc, #104]	; (8004dc4 <rda5807_SetFreq_In100Khz+0xec>)
 8004d5a:	edc3 7a00 	vstr	s15, [r3]

    if (Freq100kHz < l)  Freq100kHz = l;
 8004d5e:	88fa      	ldrh	r2, [r7, #6]
 8004d60:	89fb      	ldrh	r3, [r7, #14]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d201      	bcs.n	8004d6a <rda5807_SetFreq_In100Khz+0x92>
 8004d66:	89fb      	ldrh	r3, [r7, #14]
 8004d68:	80fb      	strh	r3, [r7, #6]
    if (Freq100kHz > r) Freq100kHz = r;
 8004d6a:	88fa      	ldrh	r2, [r7, #6]
 8004d6c:	89bb      	ldrh	r3, [r7, #12]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d901      	bls.n	8004d76 <rda5807_SetFreq_In100Khz+0x9e>
 8004d72:	89bb      	ldrh	r3, [r7, #12]
 8004d74:	80fb      	strh	r3, [r7, #6]

    // Вычитаем начало диапазона (left)
    Freq100kHz -= l;
 8004d76:	88fa      	ldrh	r2, [r7, #6]
 8004d78:	89fb      	ldrh	r3, [r7, #14]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	80fb      	strh	r3, [r7, #6]

    // Читаем регистр 0x03
    rda5807_read(3, (uint16_t *)&Buffs.Reg03, 1);
 8004d7e:	2201      	movs	r2, #1
 8004d80:	4911      	ldr	r1, [pc, #68]	; (8004dc8 <rda5807_SetFreq_In100Khz+0xf0>)
 8004d82:	2003      	movs	r0, #3
 8004d84:	f7ff fdca 	bl	800491c <rda5807_read>
    // Меняем значение поля CHAN
    Buffs.Reg03.bCHAN = Freq100kHz;
 8004d88:	88fb      	ldrh	r3, [r7, #6]
 8004d8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d8e:	b299      	uxth	r1, r3
 8004d90:	4a0a      	ldr	r2, [pc, #40]	; (8004dbc <rda5807_SetFreq_In100Khz+0xe4>)
 8004d92:	8853      	ldrh	r3, [r2, #2]
 8004d94:	f361 138f 	bfi	r3, r1, #6, #10
 8004d98:	8053      	strh	r3, [r2, #2]
    // Выставляем флаг начала перенастройки на канал
    Buffs.Reg03.bTUNE = 1;
 8004d9a:	4a08      	ldr	r2, [pc, #32]	; (8004dbc <rda5807_SetFreq_In100Khz+0xe4>)
 8004d9c:	7893      	ldrb	r3, [r2, #2]
 8004d9e:	f043 0310 	orr.w	r3, r3, #16
 8004da2:	7093      	strb	r3, [r2, #2]
    // Пишем регистр 0x03
    rda5807_write(3, (uint16_t *)&Buffs.Reg03, 1);
 8004da4:	2201      	movs	r2, #1
 8004da6:	4908      	ldr	r1, [pc, #32]	; (8004dc8 <rda5807_SetFreq_In100Khz+0xf0>)
 8004da8:	2003      	movs	r0, #3
 8004daa:	f7ff fdeb 	bl	8004984 <rda5807_write>

    HAL_Delay(50);
 8004dae:	2032      	movs	r0, #50	; 0x32
 8004db0:	f001 fbc4 	bl	800653c <HAL_Delay>
}
 8004db4:	bf00      	nop
 8004db6:	3710      	adds	r7, #16
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	20003048 	.word	0x20003048
 8004dc0:	20002cac 	.word	0x20002cac
 8004dc4:	20002cb0 	.word	0x20002cb0
 8004dc8:	2000304a 	.word	0x2000304a

08004dcc <rda5807_GetFreq_In100Khz>:

//==============================================================================
// Функция читает текущую частоту, на которую настроен rda5807
//==============================================================================
uint16_t rda5807_GetFreq_In100Khz()
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	491b      	ldr	r1, [pc, #108]	; (8004e44 <rda5807_GetFreq_In100Khz+0x78>)
 8004dd6:	200a      	movs	r0, #10
 8004dd8:	f7ff fda0 	bl	800491c <rda5807_read>

    uint16_t Freq100kHz = Buffs.Reg0A.bREADCHAN;
 8004ddc:	4b1a      	ldr	r3, [pc, #104]	; (8004e48 <rda5807_GetFreq_In100Khz+0x7c>)
 8004dde:	8a1b      	ldrh	r3, [r3, #16]
 8004de0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	80bb      	strh	r3, [r7, #4]

    if (Freq100kHz == 319) return 0;
 8004de8:	88bb      	ldrh	r3, [r7, #4]
 8004dea:	f240 123f 	movw	r2, #319	; 0x13f
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d101      	bne.n	8004df6 <rda5807_GetFreq_In100Khz+0x2a>
 8004df2:	2300      	movs	r3, #0
 8004df4:	e021      	b.n	8004e3a <rda5807_GetFreq_In100Khz+0x6e>

    // Прибавляем начало диапазона (87 МГц)
    uint16_t left = 870;
 8004df6:	f240 3366 	movw	r3, #870	; 0x366
 8004dfa:	80fb      	strh	r3, [r7, #6]
    switch (Buffs.Reg03.bBAND) {    // Диапазон 87–108 MHz
 8004dfc:	4b12      	ldr	r3, [pc, #72]	; (8004e48 <rda5807_GetFreq_In100Khz+0x7c>)
 8004dfe:	789b      	ldrb	r3, [r3, #2]
 8004e00:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b03      	cmp	r3, #3
 8004e08:	d00e      	beq.n	8004e28 <rda5807_GetFreq_In100Khz+0x5c>
 8004e0a:	2b03      	cmp	r3, #3
 8004e0c:	dc10      	bgt.n	8004e30 <rda5807_GetFreq_In100Khz+0x64>
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d002      	beq.n	8004e18 <rda5807_GetFreq_In100Khz+0x4c>
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d004      	beq.n	8004e20 <rda5807_GetFreq_In100Khz+0x54>
 8004e16:	e00b      	b.n	8004e30 <rda5807_GetFreq_In100Khz+0x64>
    	//case 0:// 00 = 87–108 MHz (US/Europe)
    	//break;
    	case 1:// 01 = 76–91 MHz (Japan)
    		left = 760;
 8004e18:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8004e1c:	80fb      	strh	r3, [r7, #6]
    	break;
 8004e1e:	e007      	b.n	8004e30 <rda5807_GetFreq_In100Khz+0x64>
    	case 2:// 10 = 76–108 MHz (world wide)
    		left = 760;
 8004e20:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8004e24:	80fb      	strh	r3, [r7, #6]
    	break;
 8004e26:	e003      	b.n	8004e30 <rda5807_GetFreq_In100Khz+0x64>
    	case 3:// 11 = 65 –76 MHz (East Europe) or 50-65MHz
    		left = 650;
 8004e28:	f240 238a 	movw	r3, #650	; 0x28a
 8004e2c:	80fb      	strh	r3, [r7, #6]
    	break;
 8004e2e:	bf00      	nop
    }
    Freq100kHz += left;
 8004e30:	88ba      	ldrh	r2, [r7, #4]
 8004e32:	88fb      	ldrh	r3, [r7, #6]
 8004e34:	4413      	add	r3, r2
 8004e36:	80bb      	strh	r3, [r7, #4]

    return Freq100kHz;
 8004e38:	88bb      	ldrh	r3, [r7, #4]
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3708      	adds	r7, #8
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	20003058 	.word	0x20003058
 8004e48:	20003048 	.word	0x20003048

08004e4c <rda5807_StartSeek>:

//==============================================================================
// Процедура стартует поиск радиостанции вверх/вниз
//==============================================================================
void rda5807_StartSeek(uint8_t Up)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	4603      	mov	r3, r0
 8004e54:	71fb      	strb	r3, [r7, #7]
//tReg02h Reg02;

    // Читаем регистр 0x02
    rda5807_read(0x02, (uint16_t *)&Buffs.Reg02, 1);
 8004e56:	2201      	movs	r2, #1
 8004e58:	4910      	ldr	r1, [pc, #64]	; (8004e9c <rda5807_StartSeek+0x50>)
 8004e5a:	2002      	movs	r0, #2
 8004e5c:	f7ff fd5e 	bl	800491c <rda5807_read>

    Buffs.Reg02.bSKMODE = 1;          // 07 Seek Mode (0 = wrap at the upper or lower band limit and continue seeking; 1 = stop seeking at the upper or lower band limit)
 8004e60:	4a0e      	ldr	r2, [pc, #56]	; (8004e9c <rda5807_StartSeek+0x50>)
 8004e62:	7813      	ldrb	r3, [r2, #0]
 8004e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e68:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSEEK = 1;            // 08 Seek (0 = Disable stop seek; 1 = Enable)
 8004e6a:	4a0c      	ldr	r2, [pc, #48]	; (8004e9c <rda5807_StartSeek+0x50>)
 8004e6c:	7853      	ldrb	r3, [r2, #1]
 8004e6e:	f043 0301 	orr.w	r3, r3, #1
 8004e72:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bSEEKUP = Up ? 1 : 0; // 09 Seek Up (0 = Seek down; 1 = Seek up)
 8004e74:	79fb      	ldrb	r3, [r7, #7]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	bf14      	ite	ne
 8004e7a:	2301      	movne	r3, #1
 8004e7c:	2300      	moveq	r3, #0
 8004e7e:	b2d9      	uxtb	r1, r3
 8004e80:	4a06      	ldr	r2, [pc, #24]	; (8004e9c <rda5807_StartSeek+0x50>)
 8004e82:	7853      	ldrb	r3, [r2, #1]
 8004e84:	f361 0341 	bfi	r3, r1, #1, #1
 8004e88:	7053      	strb	r3, [r2, #1]

    // Пишем регистр 0x02
    rda5807_write(0x02, (uint16_t *)&Buffs.Reg02, 1);
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	4903      	ldr	r1, [pc, #12]	; (8004e9c <rda5807_StartSeek+0x50>)
 8004e8e:	2002      	movs	r0, #2
 8004e90:	f7ff fd78 	bl	8004984 <rda5807_write>
}
 8004e94:	bf00      	nop
 8004e96:	3708      	adds	r7, #8
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	20003048 	.word	0x20003048

08004ea0 <rda5807_Get_SeekTuneReadyFlag>:
//==============================================================================
// Функция возвращает состояние бита STR (SeekTuneReadyFlag)
// SeekTuneReadyFlag=1 пока идёт процесс настройки на частоту или поиск радиостанции.
//==============================================================================
uint8_t rda5807_Get_SeekTuneReadyFlag()
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	4905      	ldr	r1, [pc, #20]	; (8004ebc <rda5807_Get_SeekTuneReadyFlag+0x1c>)
 8004ea8:	200a      	movs	r0, #10
 8004eaa:	f7ff fd37 	bl	800491c <rda5807_read>

    return Buffs.Reg0A.bSTC;
 8004eae:	4b04      	ldr	r3, [pc, #16]	; (8004ec0 <rda5807_Get_SeekTuneReadyFlag+0x20>)
 8004eb0:	7c5b      	ldrb	r3, [r3, #17]
 8004eb2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004eb6:	b2db      	uxtb	r3, r3
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	20003058 	.word	0x20003058
 8004ec0:	20003048 	.word	0x20003048

08004ec4 <rda5807_Get_StereoMonoFlag>:
//==============================================================================
//==============================================================================
bool rda5807_Get_StereoMonoFlag()
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 8004ec8:	2201      	movs	r2, #1
 8004eca:	4908      	ldr	r1, [pc, #32]	; (8004eec <rda5807_Get_StereoMonoFlag+0x28>)
 8004ecc:	200a      	movs	r0, #10
 8004ece:	f7ff fd25 	bl	800491c <rda5807_read>

    return Buffs.Reg0A.bST;     // Stereo Indicator (0 = Mono; 1 = Stereo)
 8004ed2:	4b07      	ldr	r3, [pc, #28]	; (8004ef0 <rda5807_Get_StereoMonoFlag+0x2c>)
 8004ed4:	7c5b      	ldrb	r3, [r3, #17]
 8004ed6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	bf14      	ite	ne
 8004ee0:	2301      	movne	r3, #1
 8004ee2:	2300      	moveq	r3, #0
 8004ee4:	b2db      	uxtb	r3, r3
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	20003058 	.word	0x20003058
 8004ef0:	20003048 	.word	0x20003048

08004ef4 <rda5807_Get_Channel>:
//==============================================================================
uint16_t rda5807_Get_Channel()
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 8004ef8:	2201      	movs	r2, #1
 8004efa:	4905      	ldr	r1, [pc, #20]	; (8004f10 <rda5807_Get_Channel+0x1c>)
 8004efc:	200a      	movs	r0, #10
 8004efe:	f7ff fd0d 	bl	800491c <rda5807_read>

    return Buffs.Reg0A.bREADCHAN;    // 0-9 Read Channel.
 8004f02:	4b04      	ldr	r3, [pc, #16]	; (8004f14 <rda5807_Get_Channel+0x20>)
 8004f04:	8a1b      	ldrh	r3, [r3, #16]
 8004f06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f0a:	b29b      	uxth	r3, r3
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	20003058 	.word	0x20003058
 8004f14:	20003048 	.word	0x20003048

08004f18 <rda5807_Set_Band>:
//==============================================================================
uint8_t rda5807_Set_Band(uint8_t band)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	4603      	mov	r3, r0
 8004f20:	71fb      	strb	r3, [r7, #7]
	if (band > 3) return 1;
 8004f22:	79fb      	ldrb	r3, [r7, #7]
 8004f24:	2b03      	cmp	r3, #3
 8004f26:	d901      	bls.n	8004f2c <rda5807_Set_Band+0x14>
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e054      	b.n	8004fd6 <rda5807_Set_Band+0xbe>

    // Читаем регистр 3
    rda5807_read(3, (uint16_t *)&Buffs.Reg03, 1);
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	492c      	ldr	r1, [pc, #176]	; (8004fe0 <rda5807_Set_Band+0xc8>)
 8004f30:	2003      	movs	r0, #3
 8004f32:	f7ff fcf3 	bl	800491c <rda5807_read>

    Buffs.Reg03.bBAND = band;
 8004f36:	79fb      	ldrb	r3, [r7, #7]
 8004f38:	f003 0303 	and.w	r3, r3, #3
 8004f3c:	b2d9      	uxtb	r1, r3
 8004f3e:	4a29      	ldr	r2, [pc, #164]	; (8004fe4 <rda5807_Set_Band+0xcc>)
 8004f40:	7893      	ldrb	r3, [r2, #2]
 8004f42:	f361 0383 	bfi	r3, r1, #2, #2
 8004f46:	7093      	strb	r3, [r2, #2]

    rda5807_write(3, (uint16_t *)&Buffs.Reg03, 1);
 8004f48:	2201      	movs	r2, #1
 8004f4a:	4925      	ldr	r1, [pc, #148]	; (8004fe0 <rda5807_Set_Band+0xc8>)
 8004f4c:	2003      	movs	r0, #3
 8004f4e:	f7ff fd19 	bl	8004984 <rda5807_write>

    uint16_t l = 870, r = 1080;
 8004f52:	f240 3366 	movw	r3, #870	; 0x366
 8004f56:	81fb      	strh	r3, [r7, #14]
 8004f58:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8004f5c:	81bb      	strh	r3, [r7, #12]

    switch (Buffs.Reg03.bBAND) {    // Диапазон 87–108 MHz
 8004f5e:	4b21      	ldr	r3, [pc, #132]	; (8004fe4 <rda5807_Set_Band+0xcc>)
 8004f60:	789b      	ldrb	r3, [r3, #2]
 8004f62:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b03      	cmp	r3, #3
 8004f6a:	d011      	beq.n	8004f90 <rda5807_Set_Band+0x78>
 8004f6c:	2b03      	cmp	r3, #3
 8004f6e:	dc16      	bgt.n	8004f9e <rda5807_Set_Band+0x86>
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d002      	beq.n	8004f7a <rda5807_Set_Band+0x62>
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d007      	beq.n	8004f88 <rda5807_Set_Band+0x70>
 8004f78:	e011      	b.n	8004f9e <rda5807_Set_Band+0x86>
    	//case 0:// 00 = 87–108 MHz (US/Europe)
    	//break;
    	case 1:// 01 = 76–91 MHz (Japan)
    		l = 760;
 8004f7a:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8004f7e:	81fb      	strh	r3, [r7, #14]
    		r = 910;
 8004f80:	f240 338e 	movw	r3, #910	; 0x38e
 8004f84:	81bb      	strh	r3, [r7, #12]
    	break;
 8004f86:	e00a      	b.n	8004f9e <rda5807_Set_Band+0x86>
    	case 2:// 10 = 76–108 MHz (world wide)
    		l = 760;
 8004f88:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8004f8c:	81fb      	strh	r3, [r7, #14]
    	break;
 8004f8e:	e006      	b.n	8004f9e <rda5807_Set_Band+0x86>
    	case 3:// 11 = 65 –76 MHz (East Europe) or 50-65MHz
    		l = 650;
 8004f90:	f240 238a 	movw	r3, #650	; 0x28a
 8004f94:	81fb      	strh	r3, [r7, #14]
    		r = 760;
 8004f96:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8004f9a:	81bb      	strh	r3, [r7, #12]
    	break;
 8004f9c:	bf00      	nop
    }
    lBand = ((float)l) / 10;
 8004f9e:	89fb      	ldrh	r3, [r7, #14]
 8004fa0:	ee07 3a90 	vmov	s15, r3
 8004fa4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004fa8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004fac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004fb0:	4b0d      	ldr	r3, [pc, #52]	; (8004fe8 <rda5807_Set_Band+0xd0>)
 8004fb2:	edc3 7a00 	vstr	s15, [r3]
    rBand = ((float)r) / 10;
 8004fb6:	89bb      	ldrh	r3, [r7, #12]
 8004fb8:	ee07 3a90 	vmov	s15, r3
 8004fbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004fc0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004fc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004fc8:	4b08      	ldr	r3, [pc, #32]	; (8004fec <rda5807_Set_Band+0xd4>)
 8004fca:	edc3 7a00 	vstr	s15, [r3]

    HAL_Delay(50);
 8004fce:	2032      	movs	r0, #50	; 0x32
 8004fd0:	f001 fab4 	bl	800653c <HAL_Delay>

    return 0;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3710      	adds	r7, #16
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	2000304a 	.word	0x2000304a
 8004fe4:	20003048 	.word	0x20003048
 8004fe8:	20002cac 	.word	0x20002cac
 8004fec:	20002cb0 	.word	0x20002cb0

08004ff0 <rda5807_Set_Mute>:
//==============================================================================
void rda5807_Set_Mute(uint8_t mute)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	71fb      	strb	r3, [r7, #7]
	// Читаем регистр 2
	rda5807_read(2, (uint16_t *)&Buffs.Reg02, 1);
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	490a      	ldr	r1, [pc, #40]	; (8005028 <rda5807_Set_Mute+0x38>)
 8004ffe:	2002      	movs	r0, #2
 8005000:	f7ff fc8c 	bl	800491c <rda5807_read>

	Buffs.Reg02.bDMUTE = mute & 1;
 8005004:	79fb      	ldrb	r3, [r7, #7]
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	b2d9      	uxtb	r1, r3
 800500c:	4a06      	ldr	r2, [pc, #24]	; (8005028 <rda5807_Set_Mute+0x38>)
 800500e:	7853      	ldrb	r3, [r2, #1]
 8005010:	f361 1386 	bfi	r3, r1, #6, #1
 8005014:	7053      	strb	r3, [r2, #1]

	rda5807_write(2, (uint16_t *)&Buffs.Reg02, 1);
 8005016:	2201      	movs	r2, #1
 8005018:	4903      	ldr	r1, [pc, #12]	; (8005028 <rda5807_Set_Mute+0x38>)
 800501a:	2002      	movs	r0, #2
 800501c:	f7ff fcb2 	bl	8004984 <rda5807_write>
}
 8005020:	bf00      	nop
 8005022:	3708      	adds	r7, #8
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	20003048 	.word	0x20003048

0800502c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005032:	4b0f      	ldr	r3, [pc, #60]	; (8005070 <HAL_MspInit+0x44>)
 8005034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005036:	4a0e      	ldr	r2, [pc, #56]	; (8005070 <HAL_MspInit+0x44>)
 8005038:	f043 0301 	orr.w	r3, r3, #1
 800503c:	6613      	str	r3, [r2, #96]	; 0x60
 800503e:	4b0c      	ldr	r3, [pc, #48]	; (8005070 <HAL_MspInit+0x44>)
 8005040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	607b      	str	r3, [r7, #4]
 8005048:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800504a:	4b09      	ldr	r3, [pc, #36]	; (8005070 <HAL_MspInit+0x44>)
 800504c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800504e:	4a08      	ldr	r2, [pc, #32]	; (8005070 <HAL_MspInit+0x44>)
 8005050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005054:	6593      	str	r3, [r2, #88]	; 0x58
 8005056:	4b06      	ldr	r3, [pc, #24]	; (8005070 <HAL_MspInit+0x44>)
 8005058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800505a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800505e:	603b      	str	r3, [r7, #0]
 8005060:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005062:	bf00      	nop
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	40021000 	.word	0x40021000

08005074 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b0ac      	sub	sp, #176	; 0xb0
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800507c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005080:	2200      	movs	r2, #0
 8005082:	601a      	str	r2, [r3, #0]
 8005084:	605a      	str	r2, [r3, #4]
 8005086:	609a      	str	r2, [r3, #8]
 8005088:	60da      	str	r2, [r3, #12]
 800508a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800508c:	f107 0314 	add.w	r3, r7, #20
 8005090:	2288      	movs	r2, #136	; 0x88
 8005092:	2100      	movs	r1, #0
 8005094:	4618      	mov	r0, r3
 8005096:	f009 f903 	bl	800e2a0 <memset>
  if(hi2c->Instance==I2C1)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a57      	ldr	r2, [pc, #348]	; (80051fc <HAL_I2C_MspInit+0x188>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	f040 80a7 	bne.w	80051f4 <HAL_I2C_MspInit+0x180>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80050a6:	2340      	movs	r3, #64	; 0x40
 80050a8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80050aa:	2300      	movs	r3, #0
 80050ac:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80050ae:	f107 0314 	add.w	r3, r7, #20
 80050b2:	4618      	mov	r0, r3
 80050b4:	f004 fb18 	bl	80096e8 <HAL_RCCEx_PeriphCLKConfig>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d001      	beq.n	80050c2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80050be:	f7ff fb45 	bl	800474c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050c2:	4b4f      	ldr	r3, [pc, #316]	; (8005200 <HAL_I2C_MspInit+0x18c>)
 80050c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050c6:	4a4e      	ldr	r2, [pc, #312]	; (8005200 <HAL_I2C_MspInit+0x18c>)
 80050c8:	f043 0302 	orr.w	r3, r3, #2
 80050cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80050ce:	4b4c      	ldr	r3, [pc, #304]	; (8005200 <HAL_I2C_MspInit+0x18c>)
 80050d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	613b      	str	r3, [r7, #16]
 80050d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80050da:	23c0      	movs	r3, #192	; 0xc0
 80050dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80050e0:	2312      	movs	r3, #18
 80050e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050e6:	2300      	movs	r3, #0
 80050e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80050ec:	2302      	movs	r3, #2
 80050ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80050f2:	2304      	movs	r3, #4
 80050f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050f8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80050fc:	4619      	mov	r1, r3
 80050fe:	4841      	ldr	r0, [pc, #260]	; (8005204 <HAL_I2C_MspInit+0x190>)
 8005100:	f001 fe08 	bl	8006d14 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB6);
 8005104:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005108:	f003 fc6a 	bl	80089e0 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB7);
 800510c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8005110:	f003 fc66 	bl	80089e0 <HAL_I2CEx_EnableFastModePlus>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005114:	4b3a      	ldr	r3, [pc, #232]	; (8005200 <HAL_I2C_MspInit+0x18c>)
 8005116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005118:	4a39      	ldr	r2, [pc, #228]	; (8005200 <HAL_I2C_MspInit+0x18c>)
 800511a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800511e:	6593      	str	r3, [r2, #88]	; 0x58
 8005120:	4b37      	ldr	r3, [pc, #220]	; (8005200 <HAL_I2C_MspInit+0x18c>)
 8005122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005124:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005128:	60fb      	str	r3, [r7, #12]
 800512a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA2_Channel6;
 800512c:	4b36      	ldr	r3, [pc, #216]	; (8005208 <HAL_I2C_MspInit+0x194>)
 800512e:	4a37      	ldr	r2, [pc, #220]	; (800520c <HAL_I2C_MspInit+0x198>)
 8005130:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_5;
 8005132:	4b35      	ldr	r3, [pc, #212]	; (8005208 <HAL_I2C_MspInit+0x194>)
 8005134:	2205      	movs	r2, #5
 8005136:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005138:	4b33      	ldr	r3, [pc, #204]	; (8005208 <HAL_I2C_MspInit+0x194>)
 800513a:	2200      	movs	r2, #0
 800513c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800513e:	4b32      	ldr	r3, [pc, #200]	; (8005208 <HAL_I2C_MspInit+0x194>)
 8005140:	2200      	movs	r2, #0
 8005142:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005144:	4b30      	ldr	r3, [pc, #192]	; (8005208 <HAL_I2C_MspInit+0x194>)
 8005146:	2280      	movs	r2, #128	; 0x80
 8005148:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800514a:	4b2f      	ldr	r3, [pc, #188]	; (8005208 <HAL_I2C_MspInit+0x194>)
 800514c:	2200      	movs	r2, #0
 800514e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005150:	4b2d      	ldr	r3, [pc, #180]	; (8005208 <HAL_I2C_MspInit+0x194>)
 8005152:	2200      	movs	r2, #0
 8005154:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8005156:	4b2c      	ldr	r3, [pc, #176]	; (8005208 <HAL_I2C_MspInit+0x194>)
 8005158:	2200      	movs	r2, #0
 800515a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800515c:	4b2a      	ldr	r3, [pc, #168]	; (8005208 <HAL_I2C_MspInit+0x194>)
 800515e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005162:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8005164:	4828      	ldr	r0, [pc, #160]	; (8005208 <HAL_I2C_MspInit+0x194>)
 8005166:	f001 fb51 	bl	800680c <HAL_DMA_Init>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d001      	beq.n	8005174 <HAL_I2C_MspInit+0x100>
    {
      Error_Handler();
 8005170:	f7ff faec 	bl	800474c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a24      	ldr	r2, [pc, #144]	; (8005208 <HAL_I2C_MspInit+0x194>)
 8005178:	63da      	str	r2, [r3, #60]	; 0x3c
 800517a:	4a23      	ldr	r2, [pc, #140]	; (8005208 <HAL_I2C_MspInit+0x194>)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8005180:	4b23      	ldr	r3, [pc, #140]	; (8005210 <HAL_I2C_MspInit+0x19c>)
 8005182:	4a24      	ldr	r2, [pc, #144]	; (8005214 <HAL_I2C_MspInit+0x1a0>)
 8005184:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 8005186:	4b22      	ldr	r3, [pc, #136]	; (8005210 <HAL_I2C_MspInit+0x19c>)
 8005188:	2203      	movs	r2, #3
 800518a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800518c:	4b20      	ldr	r3, [pc, #128]	; (8005210 <HAL_I2C_MspInit+0x19c>)
 800518e:	2210      	movs	r2, #16
 8005190:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005192:	4b1f      	ldr	r3, [pc, #124]	; (8005210 <HAL_I2C_MspInit+0x19c>)
 8005194:	2200      	movs	r2, #0
 8005196:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005198:	4b1d      	ldr	r3, [pc, #116]	; (8005210 <HAL_I2C_MspInit+0x19c>)
 800519a:	2280      	movs	r2, #128	; 0x80
 800519c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800519e:	4b1c      	ldr	r3, [pc, #112]	; (8005210 <HAL_I2C_MspInit+0x19c>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80051a4:	4b1a      	ldr	r3, [pc, #104]	; (8005210 <HAL_I2C_MspInit+0x19c>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80051aa:	4b19      	ldr	r3, [pc, #100]	; (8005210 <HAL_I2C_MspInit+0x19c>)
 80051ac:	2200      	movs	r2, #0
 80051ae:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80051b0:	4b17      	ldr	r3, [pc, #92]	; (8005210 <HAL_I2C_MspInit+0x19c>)
 80051b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80051b6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80051b8:	4815      	ldr	r0, [pc, #84]	; (8005210 <HAL_I2C_MspInit+0x19c>)
 80051ba:	f001 fb27 	bl	800680c <HAL_DMA_Init>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d001      	beq.n	80051c8 <HAL_I2C_MspInit+0x154>
    {
      Error_Handler();
 80051c4:	f7ff fac2 	bl	800474c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a11      	ldr	r2, [pc, #68]	; (8005210 <HAL_I2C_MspInit+0x19c>)
 80051cc:	639a      	str	r2, [r3, #56]	; 0x38
 80051ce:	4a10      	ldr	r2, [pc, #64]	; (8005210 <HAL_I2C_MspInit+0x19c>)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80051d4:	2200      	movs	r2, #0
 80051d6:	2100      	movs	r1, #0
 80051d8:	201f      	movs	r0, #31
 80051da:	f001 fad2 	bl	8006782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80051de:	201f      	movs	r0, #31
 80051e0:	f001 faeb 	bl	80067ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80051e4:	2200      	movs	r2, #0
 80051e6:	2100      	movs	r1, #0
 80051e8:	2020      	movs	r0, #32
 80051ea:	f001 faca 	bl	8006782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80051ee:	2020      	movs	r0, #32
 80051f0:	f001 fae3 	bl	80067ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80051f4:	bf00      	nop
 80051f6:	37b0      	adds	r7, #176	; 0xb0
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	40005400 	.word	0x40005400
 8005200:	40021000 	.word	0x40021000
 8005204:	48000400 	.word	0x48000400
 8005208:	20000874 	.word	0x20000874
 800520c:	4002046c 	.word	0x4002046c
 8005210:	200008bc 	.word	0x200008bc
 8005214:	4002006c 	.word	0x4002006c

08005218 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b0a4      	sub	sp, #144	; 0x90
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005220:	f107 0308 	add.w	r3, r7, #8
 8005224:	2288      	movs	r2, #136	; 0x88
 8005226:	2100      	movs	r1, #0
 8005228:	4618      	mov	r0, r3
 800522a:	f009 f839 	bl	800e2a0 <memset>
  if(hrtc->Instance==RTC)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a10      	ldr	r2, [pc, #64]	; (8005274 <HAL_RTC_MspInit+0x5c>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d118      	bne.n	800526a <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005238:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800523c:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800523e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005242:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005246:	f107 0308 	add.w	r3, r7, #8
 800524a:	4618      	mov	r0, r3
 800524c:	f004 fa4c 	bl	80096e8 <HAL_RCCEx_PeriphCLKConfig>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d001      	beq.n	800525a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8005256:	f7ff fa79 	bl	800474c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800525a:	4b07      	ldr	r3, [pc, #28]	; (8005278 <HAL_RTC_MspInit+0x60>)
 800525c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005260:	4a05      	ldr	r2, [pc, #20]	; (8005278 <HAL_RTC_MspInit+0x60>)
 8005262:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005266:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800526a:	bf00      	nop
 800526c:	3790      	adds	r7, #144	; 0x90
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	40002800 	.word	0x40002800
 8005278:	40021000 	.word	0x40021000

0800527c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b08c      	sub	sp, #48	; 0x30
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005284:	f107 031c 	add.w	r3, r7, #28
 8005288:	2200      	movs	r2, #0
 800528a:	601a      	str	r2, [r3, #0]
 800528c:	605a      	str	r2, [r3, #4]
 800528e:	609a      	str	r2, [r3, #8]
 8005290:	60da      	str	r2, [r3, #12]
 8005292:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a76      	ldr	r2, [pc, #472]	; (8005474 <HAL_SPI_MspInit+0x1f8>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d15b      	bne.n	8005356 <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800529e:	4b76      	ldr	r3, [pc, #472]	; (8005478 <HAL_SPI_MspInit+0x1fc>)
 80052a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052a2:	4a75      	ldr	r2, [pc, #468]	; (8005478 <HAL_SPI_MspInit+0x1fc>)
 80052a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80052a8:	6613      	str	r3, [r2, #96]	; 0x60
 80052aa:	4b73      	ldr	r3, [pc, #460]	; (8005478 <HAL_SPI_MspInit+0x1fc>)
 80052ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052b2:	61bb      	str	r3, [r7, #24]
 80052b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052b6:	4b70      	ldr	r3, [pc, #448]	; (8005478 <HAL_SPI_MspInit+0x1fc>)
 80052b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ba:	4a6f      	ldr	r2, [pc, #444]	; (8005478 <HAL_SPI_MspInit+0x1fc>)
 80052bc:	f043 0301 	orr.w	r3, r3, #1
 80052c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80052c2:	4b6d      	ldr	r3, [pc, #436]	; (8005478 <HAL_SPI_MspInit+0x1fc>)
 80052c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	617b      	str	r3, [r7, #20]
 80052cc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80052ce:	23a0      	movs	r3, #160	; 0xa0
 80052d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052d2:	2302      	movs	r3, #2
 80052d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052d6:	2300      	movs	r3, #0
 80052d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052da:	2303      	movs	r3, #3
 80052dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80052de:	2305      	movs	r3, #5
 80052e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052e2:	f107 031c 	add.w	r3, r7, #28
 80052e6:	4619      	mov	r1, r3
 80052e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80052ec:	f001 fd12 	bl	8006d14 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80052f0:	4b62      	ldr	r3, [pc, #392]	; (800547c <HAL_SPI_MspInit+0x200>)
 80052f2:	4a63      	ldr	r2, [pc, #396]	; (8005480 <HAL_SPI_MspInit+0x204>)
 80052f4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 80052f6:	4b61      	ldr	r3, [pc, #388]	; (800547c <HAL_SPI_MspInit+0x200>)
 80052f8:	2201      	movs	r2, #1
 80052fa:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80052fc:	4b5f      	ldr	r3, [pc, #380]	; (800547c <HAL_SPI_MspInit+0x200>)
 80052fe:	2210      	movs	r2, #16
 8005300:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005302:	4b5e      	ldr	r3, [pc, #376]	; (800547c <HAL_SPI_MspInit+0x200>)
 8005304:	2200      	movs	r2, #0
 8005306:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005308:	4b5c      	ldr	r3, [pc, #368]	; (800547c <HAL_SPI_MspInit+0x200>)
 800530a:	2280      	movs	r2, #128	; 0x80
 800530c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800530e:	4b5b      	ldr	r3, [pc, #364]	; (800547c <HAL_SPI_MspInit+0x200>)
 8005310:	2200      	movs	r2, #0
 8005312:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005314:	4b59      	ldr	r3, [pc, #356]	; (800547c <HAL_SPI_MspInit+0x200>)
 8005316:	2200      	movs	r2, #0
 8005318:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800531a:	4b58      	ldr	r3, [pc, #352]	; (800547c <HAL_SPI_MspInit+0x200>)
 800531c:	2200      	movs	r2, #0
 800531e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005320:	4b56      	ldr	r3, [pc, #344]	; (800547c <HAL_SPI_MspInit+0x200>)
 8005322:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005326:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8005328:	4854      	ldr	r0, [pc, #336]	; (800547c <HAL_SPI_MspInit+0x200>)
 800532a:	f001 fa6f 	bl	800680c <HAL_DMA_Init>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d001      	beq.n	8005338 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8005334:	f7ff fa0a 	bl	800474c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a50      	ldr	r2, [pc, #320]	; (800547c <HAL_SPI_MspInit+0x200>)
 800533c:	655a      	str	r2, [r3, #84]	; 0x54
 800533e:	4a4f      	ldr	r2, [pc, #316]	; (800547c <HAL_SPI_MspInit+0x200>)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8005344:	2200      	movs	r2, #0
 8005346:	2100      	movs	r1, #0
 8005348:	2023      	movs	r0, #35	; 0x23
 800534a:	f001 fa1a 	bl	8006782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800534e:	2023      	movs	r0, #35	; 0x23
 8005350:	f001 fa33 	bl	80067ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005354:	e08a      	b.n	800546c <HAL_SPI_MspInit+0x1f0>
  else if(hspi->Instance==SPI2)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a4a      	ldr	r2, [pc, #296]	; (8005484 <HAL_SPI_MspInit+0x208>)
 800535c:	4293      	cmp	r3, r2
 800535e:	f040 8085 	bne.w	800546c <HAL_SPI_MspInit+0x1f0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005362:	4b45      	ldr	r3, [pc, #276]	; (8005478 <HAL_SPI_MspInit+0x1fc>)
 8005364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005366:	4a44      	ldr	r2, [pc, #272]	; (8005478 <HAL_SPI_MspInit+0x1fc>)
 8005368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800536c:	6593      	str	r3, [r2, #88]	; 0x58
 800536e:	4b42      	ldr	r3, [pc, #264]	; (8005478 <HAL_SPI_MspInit+0x1fc>)
 8005370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005376:	613b      	str	r3, [r7, #16]
 8005378:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800537a:	4b3f      	ldr	r3, [pc, #252]	; (8005478 <HAL_SPI_MspInit+0x1fc>)
 800537c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800537e:	4a3e      	ldr	r2, [pc, #248]	; (8005478 <HAL_SPI_MspInit+0x1fc>)
 8005380:	f043 0302 	orr.w	r3, r3, #2
 8005384:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005386:	4b3c      	ldr	r3, [pc, #240]	; (8005478 <HAL_SPI_MspInit+0x1fc>)
 8005388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	60fb      	str	r3, [r7, #12]
 8005390:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005392:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005398:	2302      	movs	r3, #2
 800539a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800539c:	2300      	movs	r3, #0
 800539e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053a0:	2303      	movs	r3, #3
 80053a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80053a4:	2305      	movs	r3, #5
 80053a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053a8:	f107 031c 	add.w	r3, r7, #28
 80053ac:	4619      	mov	r1, r3
 80053ae:	4836      	ldr	r0, [pc, #216]	; (8005488 <HAL_SPI_MspInit+0x20c>)
 80053b0:	f001 fcb0 	bl	8006d14 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel4;
 80053b4:	4b35      	ldr	r3, [pc, #212]	; (800548c <HAL_SPI_MspInit+0x210>)
 80053b6:	4a36      	ldr	r2, [pc, #216]	; (8005490 <HAL_SPI_MspInit+0x214>)
 80053b8:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_1;
 80053ba:	4b34      	ldr	r3, [pc, #208]	; (800548c <HAL_SPI_MspInit+0x210>)
 80053bc:	2201      	movs	r2, #1
 80053be:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80053c0:	4b32      	ldr	r3, [pc, #200]	; (800548c <HAL_SPI_MspInit+0x210>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80053c6:	4b31      	ldr	r3, [pc, #196]	; (800548c <HAL_SPI_MspInit+0x210>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80053cc:	4b2f      	ldr	r3, [pc, #188]	; (800548c <HAL_SPI_MspInit+0x210>)
 80053ce:	2280      	movs	r2, #128	; 0x80
 80053d0:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80053d2:	4b2e      	ldr	r3, [pc, #184]	; (800548c <HAL_SPI_MspInit+0x210>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80053d8:	4b2c      	ldr	r3, [pc, #176]	; (800548c <HAL_SPI_MspInit+0x210>)
 80053da:	2200      	movs	r2, #0
 80053dc:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80053de:	4b2b      	ldr	r3, [pc, #172]	; (800548c <HAL_SPI_MspInit+0x210>)
 80053e0:	2200      	movs	r2, #0
 80053e2:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80053e4:	4b29      	ldr	r3, [pc, #164]	; (800548c <HAL_SPI_MspInit+0x210>)
 80053e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80053ea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80053ec:	4827      	ldr	r0, [pc, #156]	; (800548c <HAL_SPI_MspInit+0x210>)
 80053ee:	f001 fa0d 	bl	800680c <HAL_DMA_Init>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d001      	beq.n	80053fc <HAL_SPI_MspInit+0x180>
      Error_Handler();
 80053f8:	f7ff f9a8 	bl	800474c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a23      	ldr	r2, [pc, #140]	; (800548c <HAL_SPI_MspInit+0x210>)
 8005400:	659a      	str	r2, [r3, #88]	; 0x58
 8005402:	4a22      	ldr	r2, [pc, #136]	; (800548c <HAL_SPI_MspInit+0x210>)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8005408:	4b22      	ldr	r3, [pc, #136]	; (8005494 <HAL_SPI_MspInit+0x218>)
 800540a:	4a23      	ldr	r2, [pc, #140]	; (8005498 <HAL_SPI_MspInit+0x21c>)
 800540c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 800540e:	4b21      	ldr	r3, [pc, #132]	; (8005494 <HAL_SPI_MspInit+0x218>)
 8005410:	2201      	movs	r2, #1
 8005412:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005414:	4b1f      	ldr	r3, [pc, #124]	; (8005494 <HAL_SPI_MspInit+0x218>)
 8005416:	2210      	movs	r2, #16
 8005418:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800541a:	4b1e      	ldr	r3, [pc, #120]	; (8005494 <HAL_SPI_MspInit+0x218>)
 800541c:	2200      	movs	r2, #0
 800541e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005420:	4b1c      	ldr	r3, [pc, #112]	; (8005494 <HAL_SPI_MspInit+0x218>)
 8005422:	2280      	movs	r2, #128	; 0x80
 8005424:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005426:	4b1b      	ldr	r3, [pc, #108]	; (8005494 <HAL_SPI_MspInit+0x218>)
 8005428:	2200      	movs	r2, #0
 800542a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800542c:	4b19      	ldr	r3, [pc, #100]	; (8005494 <HAL_SPI_MspInit+0x218>)
 800542e:	2200      	movs	r2, #0
 8005430:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8005432:	4b18      	ldr	r3, [pc, #96]	; (8005494 <HAL_SPI_MspInit+0x218>)
 8005434:	2200      	movs	r2, #0
 8005436:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005438:	4b16      	ldr	r3, [pc, #88]	; (8005494 <HAL_SPI_MspInit+0x218>)
 800543a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800543e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8005440:	4814      	ldr	r0, [pc, #80]	; (8005494 <HAL_SPI_MspInit+0x218>)
 8005442:	f001 f9e3 	bl	800680c <HAL_DMA_Init>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d001      	beq.n	8005450 <HAL_SPI_MspInit+0x1d4>
      Error_Handler();
 800544c:	f7ff f97e 	bl	800474c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a10      	ldr	r2, [pc, #64]	; (8005494 <HAL_SPI_MspInit+0x218>)
 8005454:	655a      	str	r2, [r3, #84]	; 0x54
 8005456:	4a0f      	ldr	r2, [pc, #60]	; (8005494 <HAL_SPI_MspInit+0x218>)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800545c:	2200      	movs	r2, #0
 800545e:	2100      	movs	r1, #0
 8005460:	2024      	movs	r0, #36	; 0x24
 8005462:	f001 f98e 	bl	8006782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8005466:	2024      	movs	r0, #36	; 0x24
 8005468:	f001 f9a7 	bl	80067ba <HAL_NVIC_EnableIRQ>
}
 800546c:	bf00      	nop
 800546e:	3730      	adds	r7, #48	; 0x30
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	40013000 	.word	0x40013000
 8005478:	40021000 	.word	0x40021000
 800547c:	200009f0 	.word	0x200009f0
 8005480:	40020030 	.word	0x40020030
 8005484:	40003800 	.word	0x40003800
 8005488:	48000400 	.word	0x48000400
 800548c:	20000a38 	.word	0x20000a38
 8005490:	40020044 	.word	0x40020044
 8005494:	20000a80 	.word	0x20000a80
 8005498:	40020058 	.word	0x40020058

0800549c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a0d      	ldr	r2, [pc, #52]	; (80054e0 <HAL_TIM_Base_MspInit+0x44>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d113      	bne.n	80054d6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80054ae:	4b0d      	ldr	r3, [pc, #52]	; (80054e4 <HAL_TIM_Base_MspInit+0x48>)
 80054b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054b2:	4a0c      	ldr	r2, [pc, #48]	; (80054e4 <HAL_TIM_Base_MspInit+0x48>)
 80054b4:	f043 0304 	orr.w	r3, r3, #4
 80054b8:	6593      	str	r3, [r2, #88]	; 0x58
 80054ba:	4b0a      	ldr	r3, [pc, #40]	; (80054e4 <HAL_TIM_Base_MspInit+0x48>)
 80054bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054be:	f003 0304 	and.w	r3, r3, #4
 80054c2:	60fb      	str	r3, [r7, #12]
 80054c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 80054c6:	2200      	movs	r2, #0
 80054c8:	2102      	movs	r1, #2
 80054ca:	201e      	movs	r0, #30
 80054cc:	f001 f959 	bl	8006782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80054d0:	201e      	movs	r0, #30
 80054d2:	f001 f972 	bl	80067ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80054d6:	bf00      	nop
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	40000800 	.word	0x40000800
 80054e4:	40021000 	.word	0x40021000

080054e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b0ac      	sub	sp, #176	; 0xb0
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80054f4:	2200      	movs	r2, #0
 80054f6:	601a      	str	r2, [r3, #0]
 80054f8:	605a      	str	r2, [r3, #4]
 80054fa:	609a      	str	r2, [r3, #8]
 80054fc:	60da      	str	r2, [r3, #12]
 80054fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005500:	f107 0314 	add.w	r3, r7, #20
 8005504:	2288      	movs	r2, #136	; 0x88
 8005506:	2100      	movs	r1, #0
 8005508:	4618      	mov	r0, r3
 800550a:	f008 fec9 	bl	800e2a0 <memset>
  if(huart->Instance==USART2)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a3a      	ldr	r2, [pc, #232]	; (80055fc <HAL_UART_MspInit+0x114>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d16d      	bne.n	80055f4 <HAL_UART_MspInit+0x10c>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005518:	2302      	movs	r3, #2
 800551a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800551c:	2300      	movs	r3, #0
 800551e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005520:	f107 0314 	add.w	r3, r7, #20
 8005524:	4618      	mov	r0, r3
 8005526:	f004 f8df 	bl	80096e8 <HAL_RCCEx_PeriphCLKConfig>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d001      	beq.n	8005534 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005530:	f7ff f90c 	bl	800474c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005534:	4b32      	ldr	r3, [pc, #200]	; (8005600 <HAL_UART_MspInit+0x118>)
 8005536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005538:	4a31      	ldr	r2, [pc, #196]	; (8005600 <HAL_UART_MspInit+0x118>)
 800553a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800553e:	6593      	str	r3, [r2, #88]	; 0x58
 8005540:	4b2f      	ldr	r3, [pc, #188]	; (8005600 <HAL_UART_MspInit+0x118>)
 8005542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005548:	613b      	str	r3, [r7, #16]
 800554a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800554c:	4b2c      	ldr	r3, [pc, #176]	; (8005600 <HAL_UART_MspInit+0x118>)
 800554e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005550:	4a2b      	ldr	r2, [pc, #172]	; (8005600 <HAL_UART_MspInit+0x118>)
 8005552:	f043 0301 	orr.w	r3, r3, #1
 8005556:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005558:	4b29      	ldr	r3, [pc, #164]	; (8005600 <HAL_UART_MspInit+0x118>)
 800555a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800555c:	f003 0301 	and.w	r3, r3, #1
 8005560:	60fb      	str	r3, [r7, #12]
 8005562:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = LOG_TX_Pin|LOG_RX_Pin;
 8005564:	230c      	movs	r3, #12
 8005566:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800556a:	2302      	movs	r3, #2
 800556c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005570:	2300      	movs	r3, #0
 8005572:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005576:	2303      	movs	r3, #3
 8005578:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800557c:	2307      	movs	r3, #7
 800557e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005582:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005586:	4619      	mov	r1, r3
 8005588:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800558c:	f001 fbc2 	bl	8006d14 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8005590:	4b1c      	ldr	r3, [pc, #112]	; (8005604 <HAL_UART_MspInit+0x11c>)
 8005592:	4a1d      	ldr	r2, [pc, #116]	; (8005608 <HAL_UART_MspInit+0x120>)
 8005594:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8005596:	4b1b      	ldr	r3, [pc, #108]	; (8005604 <HAL_UART_MspInit+0x11c>)
 8005598:	2202      	movs	r2, #2
 800559a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800559c:	4b19      	ldr	r3, [pc, #100]	; (8005604 <HAL_UART_MspInit+0x11c>)
 800559e:	2210      	movs	r2, #16
 80055a0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80055a2:	4b18      	ldr	r3, [pc, #96]	; (8005604 <HAL_UART_MspInit+0x11c>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80055a8:	4b16      	ldr	r3, [pc, #88]	; (8005604 <HAL_UART_MspInit+0x11c>)
 80055aa:	2280      	movs	r2, #128	; 0x80
 80055ac:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80055ae:	4b15      	ldr	r3, [pc, #84]	; (8005604 <HAL_UART_MspInit+0x11c>)
 80055b0:	2200      	movs	r2, #0
 80055b2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80055b4:	4b13      	ldr	r3, [pc, #76]	; (8005604 <HAL_UART_MspInit+0x11c>)
 80055b6:	2200      	movs	r2, #0
 80055b8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80055ba:	4b12      	ldr	r3, [pc, #72]	; (8005604 <HAL_UART_MspInit+0x11c>)
 80055bc:	2200      	movs	r2, #0
 80055be:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80055c0:	4b10      	ldr	r3, [pc, #64]	; (8005604 <HAL_UART_MspInit+0x11c>)
 80055c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80055c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80055c8:	480e      	ldr	r0, [pc, #56]	; (8005604 <HAL_UART_MspInit+0x11c>)
 80055ca:	f001 f91f 	bl	800680c <HAL_DMA_Init>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d001      	beq.n	80055d8 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 80055d4:	f7ff f8ba 	bl	800474c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a0a      	ldr	r2, [pc, #40]	; (8005604 <HAL_UART_MspInit+0x11c>)
 80055dc:	66da      	str	r2, [r3, #108]	; 0x6c
 80055de:	4a09      	ldr	r2, [pc, #36]	; (8005604 <HAL_UART_MspInit+0x11c>)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80055e4:	2200      	movs	r2, #0
 80055e6:	2101      	movs	r1, #1
 80055e8:	2026      	movs	r0, #38	; 0x26
 80055ea:	f001 f8ca 	bl	8006782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80055ee:	2026      	movs	r0, #38	; 0x26
 80055f0:	f001 f8e3 	bl	80067ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80055f4:	bf00      	nop
 80055f6:	37b0      	adds	r7, #176	; 0xb0
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	40004400 	.word	0x40004400
 8005600:	40021000 	.word	0x40021000
 8005604:	20000b98 	.word	0x20000b98
 8005608:	40020080 	.word	0x40020080

0800560c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800560c:	b480      	push	{r7}
 800560e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005610:	e7fe      	b.n	8005610 <NMI_Handler+0x4>

08005612 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005612:	b480      	push	{r7}
 8005614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005616:	e7fe      	b.n	8005616 <HardFault_Handler+0x4>

08005618 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005618:	b480      	push	{r7}
 800561a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800561c:	e7fe      	b.n	800561c <MemManage_Handler+0x4>

0800561e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800561e:	b480      	push	{r7}
 8005620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005622:	e7fe      	b.n	8005622 <BusFault_Handler+0x4>

08005624 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005624:	b480      	push	{r7}
 8005626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005628:	e7fe      	b.n	8005628 <UsageFault_Handler+0x4>

0800562a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800562a:	b480      	push	{r7}
 800562c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800562e:	bf00      	nop
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005638:	b480      	push	{r7}
 800563a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800563c:	bf00      	nop
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005646:	b480      	push	{r7}
 8005648:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800564a:	bf00      	nop
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005658:	f000 ff50 	bl	80064fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800565c:	bf00      	nop
 800565e:	bd80      	pop	{r7, pc}

08005660 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY0_Pin);
 8005664:	2002      	movs	r0, #2
 8005666:	f001 fd49 	bl	80070fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800566a:	bf00      	nop
 800566c:	bd80      	pop	{r7, pc}

0800566e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800566e:	b580      	push	{r7, lr}
 8005670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY1_Pin);
 8005672:	2004      	movs	r0, #4
 8005674:	f001 fd42 	bl	80070fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8005678:	bf00      	nop
 800567a:	bd80      	pop	{r7, pc}

0800567c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8005680:	4802      	ldr	r0, [pc, #8]	; (800568c <DMA1_Channel3_IRQHandler+0x10>)
 8005682:	f001 fa5a 	bl	8006b3a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005686:	bf00      	nop
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	200009f0 	.word	0x200009f0

08005690 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8005694:	4802      	ldr	r0, [pc, #8]	; (80056a0 <DMA1_Channel4_IRQHandler+0x10>)
 8005696:	f001 fa50 	bl	8006b3a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800569a:	bf00      	nop
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	20000a38 	.word	0x20000a38

080056a4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80056a8:	4802      	ldr	r0, [pc, #8]	; (80056b4 <DMA1_Channel5_IRQHandler+0x10>)
 80056aa:	f001 fa46 	bl	8006b3a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80056ae:	bf00      	nop
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	20000a80 	.word	0x20000a80

080056b8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80056bc:	4802      	ldr	r0, [pc, #8]	; (80056c8 <DMA1_Channel6_IRQHandler+0x10>)
 80056be:	f001 fa3c 	bl	8006b3a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80056c2:	bf00      	nop
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	200008bc 	.word	0x200008bc

080056cc <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80056d0:	4802      	ldr	r0, [pc, #8]	; (80056dc <DMA1_Channel7_IRQHandler+0x10>)
 80056d2:	f001 fa32 	bl	8006b3a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80056d6:	bf00      	nop
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	20000b98 	.word	0x20000b98

080056e0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80056e4:	4802      	ldr	r0, [pc, #8]	; (80056f0 <TIM4_IRQHandler+0x10>)
 80056e6:	f006 fcd6 	bl	800c096 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80056ea:	bf00      	nop
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	20000ac8 	.word	0x20000ac8

080056f4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80056f8:	4802      	ldr	r0, [pc, #8]	; (8005704 <I2C1_EV_IRQHandler+0x10>)
 80056fa:	f002 f8c9 	bl	8007890 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80056fe:	bf00      	nop
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	20000820 	.word	0x20000820

08005708 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800570c:	4802      	ldr	r0, [pc, #8]	; (8005718 <I2C1_ER_IRQHandler+0x10>)
 800570e:	f002 f8d9 	bl	80078c4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8005712:	bf00      	nop
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	20000820 	.word	0x20000820

0800571c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8005720:	4802      	ldr	r0, [pc, #8]	; (800572c <SPI1_IRQHandler+0x10>)
 8005722:	f005 ff8b 	bl	800b63c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8005726:	bf00      	nop
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	20000928 	.word	0x20000928

08005730 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8005734:	4802      	ldr	r0, [pc, #8]	; (8005740 <SPI2_IRQHandler+0x10>)
 8005736:	f005 ff81 	bl	800b63c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800573a:	bf00      	nop
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	2000098c 	.word	0x2000098c

08005744 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005748:	4802      	ldr	r0, [pc, #8]	; (8005754 <USART2_IRQHandler+0x10>)
 800574a:	f007 f9c3 	bl	800cad4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800574e:	bf00      	nop
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	20000b14 	.word	0x20000b14

08005758 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800575c:	4802      	ldr	r0, [pc, #8]	; (8005768 <DMA2_Channel6_IRQHandler+0x10>)
 800575e:	f001 f9ec 	bl	8006b3a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 8005762:	bf00      	nop
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	20000874 	.word	0x20000874

0800576c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800576c:	b480      	push	{r7}
 800576e:	af00      	add	r7, sp, #0
	return 1;
 8005770:	2301      	movs	r3, #1
}
 8005772:	4618      	mov	r0, r3
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <_kill>:

int _kill(int pid, int sig)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005786:	f008 fca7 	bl	800e0d8 <__errno>
 800578a:	4603      	mov	r3, r0
 800578c:	2216      	movs	r2, #22
 800578e:	601a      	str	r2, [r3, #0]
	return -1;
 8005790:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005794:	4618      	mov	r0, r3
 8005796:	3708      	adds	r7, #8
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <_exit>:

void _exit (int status)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80057a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f7ff ffe7 	bl	800577c <_kill>
	while (1) {}		/* Make sure we hang here */
 80057ae:	e7fe      	b.n	80057ae <_exit+0x12>

080057b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b086      	sub	sp, #24
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057bc:	2300      	movs	r3, #0
 80057be:	617b      	str	r3, [r7, #20]
 80057c0:	e00a      	b.n	80057d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80057c2:	f3af 8000 	nop.w
 80057c6:	4601      	mov	r1, r0
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	1c5a      	adds	r2, r3, #1
 80057cc:	60ba      	str	r2, [r7, #8]
 80057ce:	b2ca      	uxtb	r2, r1
 80057d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	3301      	adds	r3, #1
 80057d6:	617b      	str	r3, [r7, #20]
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	429a      	cmp	r2, r3
 80057de:	dbf0      	blt.n	80057c2 <_read+0x12>
	}

return len;
 80057e0:	687b      	ldr	r3, [r7, #4]
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3718      	adds	r7, #24
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b086      	sub	sp, #24
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	60f8      	str	r0, [r7, #12]
 80057f2:	60b9      	str	r1, [r7, #8]
 80057f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057f6:	2300      	movs	r3, #0
 80057f8:	617b      	str	r3, [r7, #20]
 80057fa:	e009      	b.n	8005810 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	1c5a      	adds	r2, r3, #1
 8005800:	60ba      	str	r2, [r7, #8]
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	4618      	mov	r0, r3
 8005806:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	3301      	adds	r3, #1
 800580e:	617b      	str	r3, [r7, #20]
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	429a      	cmp	r2, r3
 8005816:	dbf1      	blt.n	80057fc <_write+0x12>
	}
	return len;
 8005818:	687b      	ldr	r3, [r7, #4]
}
 800581a:	4618      	mov	r0, r3
 800581c:	3718      	adds	r7, #24
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <_close>:

int _close(int file)
{
 8005822:	b480      	push	{r7}
 8005824:	b083      	sub	sp, #12
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
	return -1;
 800582a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800582e:	4618      	mov	r0, r3
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr

0800583a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800583a:	b480      	push	{r7}
 800583c:	b083      	sub	sp, #12
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
 8005842:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800584a:	605a      	str	r2, [r3, #4]
	return 0;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	370c      	adds	r7, #12
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <_isatty>:

int _isatty(int file)
{
 800585a:	b480      	push	{r7}
 800585c:	b083      	sub	sp, #12
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
	return 1;
 8005862:	2301      	movs	r3, #1
}
 8005864:	4618      	mov	r0, r3
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005870:	b480      	push	{r7}
 8005872:	b085      	sub	sp, #20
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	607a      	str	r2, [r7, #4]
	return 0;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3714      	adds	r7, #20
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
	...

0800588c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005894:	4a14      	ldr	r2, [pc, #80]	; (80058e8 <_sbrk+0x5c>)
 8005896:	4b15      	ldr	r3, [pc, #84]	; (80058ec <_sbrk+0x60>)
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80058a0:	4b13      	ldr	r3, [pc, #76]	; (80058f0 <_sbrk+0x64>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d102      	bne.n	80058ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80058a8:	4b11      	ldr	r3, [pc, #68]	; (80058f0 <_sbrk+0x64>)
 80058aa:	4a12      	ldr	r2, [pc, #72]	; (80058f4 <_sbrk+0x68>)
 80058ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80058ae:	4b10      	ldr	r3, [pc, #64]	; (80058f0 <_sbrk+0x64>)
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4413      	add	r3, r2
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d207      	bcs.n	80058cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80058bc:	f008 fc0c 	bl	800e0d8 <__errno>
 80058c0:	4603      	mov	r3, r0
 80058c2:	220c      	movs	r2, #12
 80058c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80058c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058ca:	e009      	b.n	80058e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80058cc:	4b08      	ldr	r3, [pc, #32]	; (80058f0 <_sbrk+0x64>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80058d2:	4b07      	ldr	r3, [pc, #28]	; (80058f0 <_sbrk+0x64>)
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4413      	add	r3, r2
 80058da:	4a05      	ldr	r2, [pc, #20]	; (80058f0 <_sbrk+0x64>)
 80058dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80058de:	68fb      	ldr	r3, [r7, #12]
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3718      	adds	r7, #24
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	20018000 	.word	0x20018000
 80058ec:	00000c00 	.word	0x00000c00
 80058f0:	2000305c 	.word	0x2000305c
 80058f4:	200031a8 	.word	0x200031a8

080058f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80058f8:	b480      	push	{r7}
 80058fa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80058fc:	4b06      	ldr	r3, [pc, #24]	; (8005918 <SystemInit+0x20>)
 80058fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005902:	4a05      	ldr	r2, [pc, #20]	; (8005918 <SystemInit+0x20>)
 8005904:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800590c:	bf00      	nop
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	e000ed00 	.word	0xe000ed00

0800591c <W25_SELECT>:

extern void Report(const uint8_t addTime, const char *fmt, ...);

//------------------------------------------------------------------------------------------

void W25_SELECT()   { W25_SEL(); } //HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_RESET);//set to 0
 800591c:	b580      	push	{r7, lr}
 800591e:	af00      	add	r7, sp, #0
 8005920:	2200      	movs	r2, #0
 8005922:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005926:	4802      	ldr	r0, [pc, #8]	; (8005930 <W25_SELECT+0x14>)
 8005928:	f001 fbb6 	bl	8007098 <HAL_GPIO_WritePin>
 800592c:	bf00      	nop
 800592e:	bd80      	pop	{r7, pc}
 8005930:	48000400 	.word	0x48000400

08005934 <W25_UNSELECT>:
void W25_UNSELECT() { W25_UNSEL(); } //HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_SET);//set to 1
 8005934:	b580      	push	{r7, lr}
 8005936:	af00      	add	r7, sp, #0
 8005938:	2201      	movs	r2, #1
 800593a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800593e:	4802      	ldr	r0, [pc, #8]	; (8005948 <W25_UNSELECT+0x14>)
 8005940:	f001 fbaa 	bl	8007098 <HAL_GPIO_WritePin>
 8005944:	bf00      	nop
 8005946:	bd80      	pop	{r7, pc}
 8005948:	48000400 	.word	0x48000400

0800594c <W25qxx_Spi>:
//void W25_SELECT()   { HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_RESET); }//set to 0
//void W25_UNSELECT() { HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_SET); }//set to 1

//------------------------------------------------------------------------------------------
uint8_t W25qxx_Spi(uint8_t Data)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af02      	add	r7, sp, #8
 8005952:	4603      	mov	r3, r0
 8005954:	71fb      	strb	r3, [r7, #7]
uint8_t ret;

    if (HAL_SPI_TransmitReceive(portFLASH, &Data, &ret, 1, min_wait_ms) != HAL_OK) devError |= devSPI;
 8005956:	4b0c      	ldr	r3, [pc, #48]	; (8005988 <W25qxx_Spi+0x3c>)
 8005958:	6818      	ldr	r0, [r3, #0]
 800595a:	23fa      	movs	r3, #250	; 0xfa
 800595c:	f107 020f 	add.w	r2, r7, #15
 8005960:	1df9      	adds	r1, r7, #7
 8005962:	9300      	str	r3, [sp, #0]
 8005964:	2301      	movs	r3, #1
 8005966:	f005 f9d6 	bl	800ad16 <HAL_SPI_TransmitReceive>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d006      	beq.n	800597e <W25qxx_Spi+0x32>
 8005970:	4b06      	ldr	r3, [pc, #24]	; (800598c <W25qxx_Spi+0x40>)
 8005972:	881b      	ldrh	r3, [r3, #0]
 8005974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005978:	b29a      	uxth	r2, r3
 800597a:	4b04      	ldr	r3, [pc, #16]	; (800598c <W25qxx_Spi+0x40>)
 800597c:	801a      	strh	r2, [r3, #0]

    return ret;
 800597e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005980:	4618      	mov	r0, r3
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	2000000c 	.word	0x2000000c
 800598c:	20001860 	.word	0x20001860

08005990 <W25qxx_Reset>:
//------------------------------------------------------------------------------------------
void W25qxx_Reset(void)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	af00      	add	r7, sp, #0
	W25qxx_Delay(100);
 8005994:	2064      	movs	r0, #100	; 0x64
 8005996:	f000 fdd1 	bl	800653c <HAL_Delay>

	W25_SELECT();
 800599a:	f7ff ffbf 	bl	800591c <W25_SELECT>
		W25qxx_Spi(EN_RESET);
 800599e:	2066      	movs	r0, #102	; 0x66
 80059a0:	f7ff ffd4 	bl	800594c <W25qxx_Spi>
		W25qxx_Spi(CHIP_RESET);
 80059a4:	2099      	movs	r0, #153	; 0x99
 80059a6:	f7ff ffd1 	bl	800594c <W25qxx_Spi>
	W25_UNSELECT();
 80059aa:	f7ff ffc3 	bl	8005934 <W25_UNSELECT>

	W25qxx_Delay(100);
 80059ae:	2064      	movs	r0, #100	; 0x64
 80059b0:	f000 fdc4 	bl	800653c <HAL_Delay>
}
 80059b4:	bf00      	nop
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <W25qxx_ReadID>:
//------------------------------------------------------------------------------------------
uint32_t W25qxx_ReadID(void)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
uint32_t Temp[3] = {0};
 80059be:	1d3b      	adds	r3, r7, #4
 80059c0:	2200      	movs	r2, #0
 80059c2:	601a      	str	r2, [r3, #0]
 80059c4:	605a      	str	r2, [r3, #4]
 80059c6:	609a      	str	r2, [r3, #8]

    W25_SELECT();//set to 0
 80059c8:	f7ff ffa8 	bl	800591c <W25_SELECT>

    W25qxx_Spi(JEDEC_ID);
 80059cc:	209f      	movs	r0, #159	; 0x9f
 80059ce:	f7ff ffbd 	bl	800594c <W25qxx_Spi>
    Temp[0] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80059d2:	20a5      	movs	r0, #165	; 0xa5
 80059d4:	f7ff ffba 	bl	800594c <W25qxx_Spi>
 80059d8:	4603      	mov	r3, r0
 80059da:	607b      	str	r3, [r7, #4]
    Temp[1] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80059dc:	20a5      	movs	r0, #165	; 0xa5
 80059de:	f7ff ffb5 	bl	800594c <W25qxx_Spi>
 80059e2:	4603      	mov	r3, r0
 80059e4:	60bb      	str	r3, [r7, #8]
    Temp[2] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80059e6:	20a5      	movs	r0, #165	; 0xa5
 80059e8:	f7ff ffb0 	bl	800594c <W25qxx_Spi>
 80059ec:	4603      	mov	r3, r0
 80059ee:	60fb      	str	r3, [r7, #12]

    W25_UNSELECT();//set to 1
 80059f0:	f7ff ffa0 	bl	8005934 <W25_UNSELECT>

    return ((Temp[0] << 16) | (Temp[1] << 8) | Temp[2]);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	041a      	lsls	r2, r3, #16
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	021b      	lsls	r3, r3, #8
 80059fc:	431a      	orrs	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	4313      	orrs	r3, r2
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3710      	adds	r7, #16
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
	...

08005a0c <W25qxx_ReadUniqID>:
//------------------------------------------------------------------------------------------
void W25qxx_ReadUniqID(void)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
	uint8_t dat[] = {READ_UID, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE};
 8005a12:	4a18      	ldr	r2, [pc, #96]	; (8005a74 <W25qxx_ReadUniqID+0x68>)
 8005a14:	463b      	mov	r3, r7
 8005a16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005a1a:	6018      	str	r0, [r3, #0]
 8005a1c:	3304      	adds	r3, #4
 8005a1e:	7019      	strb	r1, [r3, #0]
    W25_SELECT();
 8005a20:	f7ff ff7c 	bl	800591c <W25_SELECT>

    //W25qxx_Spi(READ_UID);
    //for (uint8_t i = 0; i < 4; i++) W25qxx_Spi(W25QXX_DUMMY_BYTE);
    //for (uint8_t i = 0; i < 8; i++) w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
    if (HAL_SPI_Transmit(portFLASH, dat, sizeof(dat), min_wait_ms) != HAL_OK) devError |= devSPI;
 8005a24:	4b14      	ldr	r3, [pc, #80]	; (8005a78 <W25qxx_ReadUniqID+0x6c>)
 8005a26:	6818      	ldr	r0, [r3, #0]
 8005a28:	23fa      	movs	r3, #250	; 0xfa
 8005a2a:	4639      	mov	r1, r7
 8005a2c:	2205      	movs	r2, #5
 8005a2e:	f004 fed4 	bl	800a7da <HAL_SPI_Transmit>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d006      	beq.n	8005a46 <W25qxx_ReadUniqID+0x3a>
 8005a38:	4b10      	ldr	r3, [pc, #64]	; (8005a7c <W25qxx_ReadUniqID+0x70>)
 8005a3a:	881b      	ldrh	r3, [r3, #0]
 8005a3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	4b0e      	ldr	r3, [pc, #56]	; (8005a7c <W25qxx_ReadUniqID+0x70>)
 8005a44:	801a      	strh	r2, [r3, #0]
    if (HAL_SPI_Receive(portFLASH, w25qxx.UniqID, 8, min_wait_ms) != HAL_OK) devError |= devSPI;
 8005a46:	4b0c      	ldr	r3, [pc, #48]	; (8005a78 <W25qxx_ReadUniqID+0x6c>)
 8005a48:	6818      	ldr	r0, [r3, #0]
 8005a4a:	23fa      	movs	r3, #250	; 0xfa
 8005a4c:	2208      	movs	r2, #8
 8005a4e:	490c      	ldr	r1, [pc, #48]	; (8005a80 <W25qxx_ReadUniqID+0x74>)
 8005a50:	f005 f831 	bl	800aab6 <HAL_SPI_Receive>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d006      	beq.n	8005a68 <W25qxx_ReadUniqID+0x5c>
 8005a5a:	4b08      	ldr	r3, [pc, #32]	; (8005a7c <W25qxx_ReadUniqID+0x70>)
 8005a5c:	881b      	ldrh	r3, [r3, #0]
 8005a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	4b05      	ldr	r3, [pc, #20]	; (8005a7c <W25qxx_ReadUniqID+0x70>)
 8005a66:	801a      	strh	r2, [r3, #0]

    W25_UNSELECT();
 8005a68:	f7ff ff64 	bl	8005934 <W25_UNSELECT>
}
 8005a6c:	bf00      	nop
 8005a6e:	3708      	adds	r7, #8
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	08012ed4 	.word	0x08012ed4
 8005a78:	2000000c 	.word	0x2000000c
 8005a7c:	20001860 	.word	0x20001860
 8005a80:	20003061 	.word	0x20003061

08005a84 <W25qxx_WriteEnable>:
//------------------------------------------------------------------------------------------
void W25qxx_WriteEnable(void)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	af00      	add	r7, sp, #0
    W25_SELECT();
 8005a88:	f7ff ff48 	bl	800591c <W25_SELECT>

    W25qxx_Spi(WRITE_ENABLE);
 8005a8c:	2006      	movs	r0, #6
 8005a8e:	f7ff ff5d 	bl	800594c <W25qxx_Spi>

    W25_UNSELECT();
 8005a92:	f7ff ff4f 	bl	8005934 <W25_UNSELECT>

    W25qxx_Delay(1);
 8005a96:	2001      	movs	r0, #1
 8005a98:	f000 fd50 	bl	800653c <HAL_Delay>
}
 8005a9c:	bf00      	nop
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <W25qxx_ReadStatusRegister>:

    W25qxx_Delay(1);
}
//------------------------------------------------------------------------------------------
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusReg)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	71fb      	strb	r3, [r7, #7]
uint8_t status = 0;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	73fb      	strb	r3, [r7, #15]

    W25_SELECT();
 8005aae:	f7ff ff35 	bl	800591c <W25_SELECT>

    switch (SelectStatusReg) {
 8005ab2:	79fb      	ldrb	r3, [r7, #7]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d002      	beq.n	8005abe <W25qxx_ReadStatusRegister+0x1e>
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d00d      	beq.n	8005ad8 <W25qxx_ReadStatusRegister+0x38>
 8005abc:	e019      	b.n	8005af2 <W25qxx_ReadStatusRegister+0x52>
        case 1:
            W25qxx_Spi(READ_STAT_REG1);
 8005abe:	2005      	movs	r0, #5
 8005ac0:	f7ff ff44 	bl	800594c <W25qxx_Spi>
            status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005ac4:	20a5      	movs	r0, #165	; 0xa5
 8005ac6:	f7ff ff41 	bl	800594c <W25qxx_Spi>
 8005aca:	4603      	mov	r3, r0
 8005acc:	73fb      	strb	r3, [r7, #15]
            w25qxx.StatusRegister1 = status;
 8005ace:	4a12      	ldr	r2, [pc, #72]	; (8005b18 <W25qxx_ReadStatusRegister+0x78>)
 8005ad0:	7bfb      	ldrb	r3, [r7, #15]
 8005ad2:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
        break;
 8005ad6:	e018      	b.n	8005b0a <W25qxx_ReadStatusRegister+0x6a>
        case 2:
            W25qxx_Spi(READ_STAT_REG2);
 8005ad8:	2035      	movs	r0, #53	; 0x35
 8005ada:	f7ff ff37 	bl	800594c <W25qxx_Spi>
            status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005ade:	20a5      	movs	r0, #165	; 0xa5
 8005ae0:	f7ff ff34 	bl	800594c <W25qxx_Spi>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	73fb      	strb	r3, [r7, #15]
            w25qxx.StatusRegister2 = status;
 8005ae8:	4a0b      	ldr	r2, [pc, #44]	; (8005b18 <W25qxx_ReadStatusRegister+0x78>)
 8005aea:	7bfb      	ldrb	r3, [r7, #15]
 8005aec:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
        break;
 8005af0:	e00b      	b.n	8005b0a <W25qxx_ReadStatusRegister+0x6a>
        default : {
            W25qxx_Spi(READ_STAT_REG3);
 8005af2:	2015      	movs	r0, #21
 8005af4:	f7ff ff2a 	bl	800594c <W25qxx_Spi>
            status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005af8:	20a5      	movs	r0, #165	; 0xa5
 8005afa:	f7ff ff27 	bl	800594c <W25qxx_Spi>
 8005afe:	4603      	mov	r3, r0
 8005b00:	73fb      	strb	r3, [r7, #15]
            w25qxx.StatusRegister3 = status;
 8005b02:	4a05      	ldr	r2, [pc, #20]	; (8005b18 <W25qxx_ReadStatusRegister+0x78>)
 8005b04:	7bfb      	ldrb	r3, [r7, #15]
 8005b06:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
        }
    }

    W25_UNSELECT();
 8005b0a:	f7ff ff13 	bl	8005934 <W25_UNSELECT>

    return status;
 8005b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	20003060 	.word	0x20003060

08005b1c <W25qxx_WaitForWriteEnd>:

    W25_UNSELECT();
}
//------------------------------------------------------------------------------------------
void W25qxx_WaitForWriteEnd(void)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	af00      	add	r7, sp, #0
    W25qxx_Delay(1);
 8005b20:	2001      	movs	r0, #1
 8005b22:	f000 fd0b 	bl	800653c <HAL_Delay>

    W25_SELECT();
 8005b26:	f7ff fef9 	bl	800591c <W25_SELECT>

    W25qxx_Spi(READ_STAT_REG1);
 8005b2a:	2005      	movs	r0, #5
 8005b2c:	f7ff ff0e 	bl	800594c <W25qxx_Spi>
    do
    {
        w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005b30:	20a5      	movs	r0, #165	; 0xa5
 8005b32:	f7ff ff0b 	bl	800594c <W25qxx_Spi>
 8005b36:	4603      	mov	r3, r0
 8005b38:	461a      	mov	r2, r3
 8005b3a:	4b08      	ldr	r3, [pc, #32]	; (8005b5c <W25qxx_WaitForWriteEnd+0x40>)
 8005b3c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        W25qxx_Delay(1);
 8005b40:	2001      	movs	r0, #1
 8005b42:	f000 fcfb 	bl	800653c <HAL_Delay>
    } while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8005b46:	4b05      	ldr	r3, [pc, #20]	; (8005b5c <W25qxx_WaitForWriteEnd+0x40>)
 8005b48:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8005b4c:	f003 0301 	and.w	r3, r3, #1
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1ed      	bne.n	8005b30 <W25qxx_WaitForWriteEnd+0x14>

    W25_UNSELECT();
 8005b54:	f7ff feee 	bl	8005934 <W25_UNSELECT>
}
 8005b58:	bf00      	nop
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	20003060 	.word	0x20003060

08005b60 <W25qxx_Init>:
//------------------------------------------------------------------------------------------
bool W25qxx_Init(void)
{
 8005b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b62:	b089      	sub	sp, #36	; 0x24
 8005b64:	af06      	add	r7, sp, #24

	W25qxx_Reset();
 8005b66:	f7ff ff13 	bl	8005990 <W25qxx_Reset>


    w25qxx.Lock = 1;
 8005b6a:	4b54      	ldr	r3, [pc, #336]	; (8005cbc <W25qxx_Init+0x15c>)
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    bool ret = false;
 8005b72:	2300      	movs	r3, #0
 8005b74:	71fb      	strb	r3, [r7, #7]

    W25_UNSELECT();
 8005b76:	f7ff fedd 	bl	8005934 <W25_UNSELECT>

    uint32_t id = W25qxx_ReadID() & 0xffff;
 8005b7a:	f7ff ff1d 	bl	80059b8 <W25qxx_ReadID>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	603b      	str	r3, [r7, #0]
//#ifdef W25QXX_DEBUG
    Report(1, "w25qxx Init Begin... Chip ID:0x%X\r\n", id);
 8005b84:	683a      	ldr	r2, [r7, #0]
 8005b86:	494e      	ldr	r1, [pc, #312]	; (8005cc0 <W25qxx_Init+0x160>)
 8005b88:	2001      	movs	r0, #1
 8005b8a:	f7fe f9f9 	bl	8003f80 <Report>
//#endif
    id &= 0xff;
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	603b      	str	r3, [r7, #0]
    id -= 0x10;//0x4010;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	3b10      	subs	r3, #16
 8005b98:	603b      	str	r3, [r7, #0]
    if (id > 0x0a) id = 0;
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	2b0a      	cmp	r3, #10
 8005b9e:	d901      	bls.n	8005ba4 <W25qxx_Init+0x44>
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	603b      	str	r3, [r7, #0]
    w25qxx.ID         = id;              //W25Q10..W25Q512
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	b2da      	uxtb	r2, r3
 8005ba8:	4b44      	ldr	r3, [pc, #272]	; (8005cbc <W25qxx_Init+0x15c>)
 8005baa:	701a      	strb	r2, [r3, #0]
    w25qxx.BlockCount = all_chipBLK[id]; //0..1024;
 8005bac:	4a45      	ldr	r2, [pc, #276]	; (8005cc4 <W25qxx_Init+0x164>)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bb4:	4a41      	ldr	r2, [pc, #260]	; (8005cbc <W25qxx_Init+0x15c>)
 8005bb6:	f8c2 301b 	str.w	r3, [r2, #27]
//#ifdef W25QXX_DEBUG
    Report(1, "Chip %s\r\n", all_chipID[id]);
 8005bba:	4a43      	ldr	r2, [pc, #268]	; (8005cc8 <W25qxx_Init+0x168>)
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	4941      	ldr	r1, [pc, #260]	; (8005ccc <W25qxx_Init+0x16c>)
 8005bc6:	2001      	movs	r0, #1
 8005bc8:	f7fe f9da 	bl	8003f80 <Report>
//#endif

    if (id) {
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d06b      	beq.n	8005caa <W25qxx_Init+0x14a>
    	w25qxx.PageSize = 256;
 8005bd2:	4b3a      	ldr	r3, [pc, #232]	; (8005cbc <W25qxx_Init+0x15c>)
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	725a      	strb	r2, [r3, #9]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f042 0201 	orr.w	r2, r2, #1
 8005bde:	729a      	strb	r2, [r3, #10]
    	w25qxx.SectorSize = 0x1000;
 8005be0:	4b36      	ldr	r3, [pc, #216]	; (8005cbc <W25qxx_Init+0x15c>)
 8005be2:	2200      	movs	r2, #0
 8005be4:	73da      	strb	r2, [r3, #15]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f042 0210 	orr.w	r2, r2, #16
 8005bec:	741a      	strb	r2, [r3, #16]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	745a      	strb	r2, [r3, #17]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	749a      	strb	r2, [r3, #18]
    	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8005bf6:	4b31      	ldr	r3, [pc, #196]	; (8005cbc <W25qxx_Init+0x15c>)
 8005bf8:	f8d3 301b 	ldr.w	r3, [r3, #27]
 8005bfc:	011b      	lsls	r3, r3, #4
 8005bfe:	4a2f      	ldr	r2, [pc, #188]	; (8005cbc <W25qxx_Init+0x15c>)
 8005c00:	f8c2 3013 	str.w	r3, [r2, #19]
    	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8005c04:	4b2d      	ldr	r3, [pc, #180]	; (8005cbc <W25qxx_Init+0x15c>)
 8005c06:	f8d3 3013 	ldr.w	r3, [r3, #19]
 8005c0a:	4a2c      	ldr	r2, [pc, #176]	; (8005cbc <W25qxx_Init+0x15c>)
 8005c0c:	f8d2 200f 	ldr.w	r2, [r2, #15]
 8005c10:	fb02 f303 	mul.w	r3, r2, r3
 8005c14:	4a29      	ldr	r2, [pc, #164]	; (8005cbc <W25qxx_Init+0x15c>)
 8005c16:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8005c1a:	b292      	uxth	r2, r2
 8005c1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c20:	4a26      	ldr	r2, [pc, #152]	; (8005cbc <W25qxx_Init+0x15c>)
 8005c22:	f8c2 300b 	str.w	r3, [r2, #11]
    	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8005c26:	4b25      	ldr	r3, [pc, #148]	; (8005cbc <W25qxx_Init+0x15c>)
 8005c28:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8005c2c:	011b      	lsls	r3, r3, #4
 8005c2e:	4a23      	ldr	r2, [pc, #140]	; (8005cbc <W25qxx_Init+0x15c>)
 8005c30:	f8c2 3017 	str.w	r3, [r2, #23]
    	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8005c34:	4b21      	ldr	r3, [pc, #132]	; (8005cbc <W25qxx_Init+0x15c>)
 8005c36:	f8d3 3013 	ldr.w	r3, [r3, #19]
 8005c3a:	4a20      	ldr	r2, [pc, #128]	; (8005cbc <W25qxx_Init+0x15c>)
 8005c3c:	f8d2 200f 	ldr.w	r2, [r2, #15]
 8005c40:	fb02 f303 	mul.w	r3, r2, r3
 8005c44:	0a9b      	lsrs	r3, r3, #10
 8005c46:	4a1d      	ldr	r2, [pc, #116]	; (8005cbc <W25qxx_Init+0x15c>)
 8005c48:	f8c2 301f 	str.w	r3, [r2, #31]
    	W25qxx_ReadUniqID();
 8005c4c:	f7ff fede 	bl	8005a0c <W25qxx_ReadUniqID>
    	W25qxx_ReadStatusRegister(1);
 8005c50:	2001      	movs	r0, #1
 8005c52:	f7ff ff25 	bl	8005aa0 <W25qxx_ReadStatusRegister>
    	W25qxx_ReadStatusRegister(2);
 8005c56:	2002      	movs	r0, #2
 8005c58:	f7ff ff22 	bl	8005aa0 <W25qxx_ReadStatusRegister>
    	W25qxx_ReadStatusRegister(3);
 8005c5c:	2003      	movs	r0, #3
 8005c5e:	f7ff ff1f 	bl	8005aa0 <W25qxx_ReadStatusRegister>
    	ret = true;
 8005c62:	2301      	movs	r3, #1
 8005c64:	71fb      	strb	r3, [r7, #7]
                 "\tSector Size:\t%u bytes\r\n"
                 "\tSector Count:\t%u\r\n"
                 "\tBlock Size:\t%u bytes\r\n"
                 "\tBlock Count:\t%u\r\n"
                 "\tCapacity:\t%u KBytes\r\n",
                 w25qxx.PageSize,
 8005c66:	4b15      	ldr	r3, [pc, #84]	; (8005cbc <W25qxx_Init+0x15c>)
 8005c68:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8005c6c:	b29b      	uxth	r3, r3
    	Report(0,"\tPage Size:\t%u bytes\r\n"
 8005c6e:	461e      	mov	r6, r3
 8005c70:	4b12      	ldr	r3, [pc, #72]	; (8005cbc <W25qxx_Init+0x15c>)
 8005c72:	f8d3 500b 	ldr.w	r5, [r3, #11]
 8005c76:	4b11      	ldr	r3, [pc, #68]	; (8005cbc <W25qxx_Init+0x15c>)
 8005c78:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8005c7c:	4a0f      	ldr	r2, [pc, #60]	; (8005cbc <W25qxx_Init+0x15c>)
 8005c7e:	f8d2 2013 	ldr.w	r2, [r2, #19]
 8005c82:	490e      	ldr	r1, [pc, #56]	; (8005cbc <W25qxx_Init+0x15c>)
 8005c84:	f8d1 1017 	ldr.w	r1, [r1, #23]
 8005c88:	480c      	ldr	r0, [pc, #48]	; (8005cbc <W25qxx_Init+0x15c>)
 8005c8a:	f8d0 001b 	ldr.w	r0, [r0, #27]
 8005c8e:	4c0b      	ldr	r4, [pc, #44]	; (8005cbc <W25qxx_Init+0x15c>)
 8005c90:	f8d4 401f 	ldr.w	r4, [r4, #31]
 8005c94:	9404      	str	r4, [sp, #16]
 8005c96:	9003      	str	r0, [sp, #12]
 8005c98:	9102      	str	r1, [sp, #8]
 8005c9a:	9201      	str	r2, [sp, #4]
 8005c9c:	9300      	str	r3, [sp, #0]
 8005c9e:	462b      	mov	r3, r5
 8005ca0:	4632      	mov	r2, r6
 8005ca2:	490b      	ldr	r1, [pc, #44]	; (8005cd0 <W25qxx_Init+0x170>)
 8005ca4:	2000      	movs	r0, #0
 8005ca6:	f7fe f96b 	bl	8003f80 <Report>
                 w25qxx.BlockCount,
                 w25qxx.CapacityInKiloByte);
//#endif
    }

    w25qxx.Lock = 0;
 8005caa:	4b04      	ldr	r3, [pc, #16]	; (8005cbc <W25qxx_Init+0x15c>)
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    return ret;
 8005cb2:	79fb      	ldrb	r3, [r7, #7]
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cbc:	20003060 	.word	0x20003060
 8005cc0:	08012edc 	.word	0x08012edc
 8005cc4:	08013e24 	.word	0x08013e24
 8005cc8:	200001f8 	.word	0x200001f8
 8005ccc:	08012f00 	.word	0x08012f00
 8005cd0:	08012f0c 	.word	0x08012f0c

08005cd4 <W25qxx_getChipID>:
//------------------------------------------------------------------------------------------
uint32_t W25qxx_getChipID()
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	af00      	add	r7, sp, #0
	return (uint32_t)w25qxx.ID;
 8005cd8:	4b03      	ldr	r3, [pc, #12]	; (8005ce8 <W25qxx_getChipID+0x14>)
 8005cda:	781b      	ldrb	r3, [r3, #0]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop
 8005ce8:	20003060 	.word	0x20003060

08005cec <W25qxx_getSectorCount>:
uint32_t W25qxx_getSectorCount()
{
 8005cec:	b480      	push	{r7}
 8005cee:	af00      	add	r7, sp, #0
	return w25qxx.SectorCount;
 8005cf0:	4b03      	ldr	r3, [pc, #12]	; (8005d00 <W25qxx_getSectorCount+0x14>)
 8005cf2:	f8d3 3013 	ldr.w	r3, [r3, #19]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr
 8005d00:	20003060 	.word	0x20003060

08005d04 <W25qxx_getSectorSize>:
uint32_t W25qxx_getSectorSize()
{
 8005d04:	b480      	push	{r7}
 8005d06:	af00      	add	r7, sp, #0
	return w25qxx.SectorSize;
 8005d08:	4b03      	ldr	r3, [pc, #12]	; (8005d18 <W25qxx_getSectorSize+0x14>)
 8005d0a:	f8d3 300f 	ldr.w	r3, [r3, #15]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr
 8005d18:	20003060 	.word	0x20003060

08005d1c <W25qxx_getPageSize>:
uint32_t W25qxx_getPageCount()
{
	return w25qxx.PageCount;
}
uint32_t W25qxx_getPageSize()
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	af00      	add	r7, sp, #0
	return w25qxx.PageSize;
 8005d20:	4b04      	ldr	r3, [pc, #16]	; (8005d34 <W25qxx_getPageSize+0x18>)
 8005d22:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8005d26:	b29b      	uxth	r3, r3
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	20003060 	.word	0x20003060

08005d38 <W25qxx_EraseSector>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
    while (w25qxx.Lock) W25qxx_Delay(1);
 8005d40:	e002      	b.n	8005d48 <W25qxx_EraseSector+0x10>
 8005d42:	2001      	movs	r0, #1
 8005d44:	f000 fbfa 	bl	800653c <HAL_Delay>
 8005d48:	4b1c      	ldr	r3, [pc, #112]	; (8005dbc <W25qxx_EraseSector+0x84>)
 8005d4a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1f7      	bne.n	8005d42 <W25qxx_EraseSector+0xa>

    w25qxx.Lock = 1;
 8005d52:	4b1a      	ldr	r3, [pc, #104]	; (8005dbc <W25qxx_EraseSector+0x84>)
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
#ifdef W25QXX_DEBUG
    uint32_t StartTime = HAL_GetTick();
    Report(1, "%u Begin...", SectorAddr);
#endif

    W25qxx_WaitForWriteEnd();
 8005d5a:	f7ff fedf 	bl	8005b1c <W25qxx_WaitForWriteEnd>
    SectorAddr = SectorAddr * w25qxx.SectorSize;
 8005d5e:	4b17      	ldr	r3, [pc, #92]	; (8005dbc <W25qxx_EraseSector+0x84>)
 8005d60:	f8d3 200f 	ldr.w	r2, [r3, #15]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	fb02 f303 	mul.w	r3, r2, r3
 8005d6a:	607b      	str	r3, [r7, #4]
    W25qxx_WriteEnable();
 8005d6c:	f7ff fe8a 	bl	8005a84 <W25qxx_WriteEnable>

    W25_SELECT();
 8005d70:	f7ff fdd4 	bl	800591c <W25_SELECT>
    W25qxx_Spi(SECTOR_ERASE);
 8005d74:	2020      	movs	r0, #32
 8005d76:	f7ff fde9 	bl	800594c <W25qxx_Spi>
    //if (w25qxx.ID >= W25Q256) W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
    W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	0c1b      	lsrs	r3, r3, #16
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7ff fde3 	bl	800594c <W25qxx_Spi>
    W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	0a1b      	lsrs	r3, r3, #8
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f7ff fddd 	bl	800594c <W25qxx_Spi>
    W25qxx_Spi(SectorAddr & 0xFF);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7ff fdd8 	bl	800594c <W25qxx_Spi>
    W25_UNSELECT();
 8005d9c:	f7ff fdca 	bl	8005934 <W25_UNSELECT>

    W25qxx_WaitForWriteEnd();
 8005da0:	f7ff febc 	bl	8005b1c <W25qxx_WaitForWriteEnd>

#ifdef W25QXX_DEBUG
    uint32_t dur = HAL_GetTick() - StartTime;
    Report(0, " done after %u ms (%u sec)!\r\n", dur, dur / 1000);
#endif
    W25qxx_Delay(1);
 8005da4:	2001      	movs	r0, #1
 8005da6:	f000 fbc9 	bl	800653c <HAL_Delay>

    w25qxx.Lock = 0;
 8005daa:	4b04      	ldr	r3, [pc, #16]	; (8005dbc <W25qxx_EraseSector+0x84>)
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8005db2:	bf00      	nop
 8005db4:	3708      	adds	r7, #8
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	20003060 	.word	0x20003060

08005dc0 <W25qxx_SectorToPage>:
{
    return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//------------------------------------------------------------------------------------------
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
    return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8005dc8:	4b08      	ldr	r3, [pc, #32]	; (8005dec <W25qxx_SectorToPage+0x2c>)
 8005dca:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	fb02 f303 	mul.w	r3, r2, r3
 8005dd4:	4a05      	ldr	r2, [pc, #20]	; (8005dec <W25qxx_SectorToPage+0x2c>)
 8005dd6:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8005dda:	b292      	uxth	r2, r2
 8005ddc:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr
 8005dec:	20003060 	.word	0x20003060

08005df0 <W25qxx_IsEmptySector>:

    return false;
}
//------------------------------------------------------------------------------------------
bool W25qxx_IsEmptySector(uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToCheck_up_to_SectorSize)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b090      	sub	sp, #64	; 0x40
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	607a      	str	r2, [r7, #4]
    while (w25qxx.Lock) W25qxx_Delay(1);
 8005dfc:	e002      	b.n	8005e04 <W25qxx_IsEmptySector+0x14>
 8005dfe:	2001      	movs	r0, #1
 8005e00:	f000 fb9c 	bl	800653c <HAL_Delay>
 8005e04:	4b59      	ldr	r3, [pc, #356]	; (8005f6c <W25qxx_IsEmptySector+0x17c>)
 8005e06:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1f7      	bne.n	8005dfe <W25qxx_IsEmptySector+0xe>

    w25qxx.Lock = 1;
 8005e0e:	4b57      	ldr	r3, [pc, #348]	; (8005f6c <W25qxx_IsEmptySector+0x17c>)
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    if ( (NumByteToCheck_up_to_SectorSize > w25qxx.SectorSize) || (!NumByteToCheck_up_to_SectorSize) )
 8005e16:	4b55      	ldr	r3, [pc, #340]	; (8005f6c <W25qxx_IsEmptySector+0x17c>)
 8005e18:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d802      	bhi.n	8005e28 <W25qxx_IsEmptySector+0x38>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d103      	bne.n	8005e30 <W25qxx_IsEmptySector+0x40>
                NumByteToCheck_up_to_SectorSize = w25qxx.SectorSize;
 8005e28:	4b50      	ldr	r3, [pc, #320]	; (8005f6c <W25qxx_IsEmptySector+0x17c>)
 8005e2a:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8005e2e:	607b      	str	r3, [r7, #4]
    uint32_t StartTime = HAL_GetTick();
#endif

    uint8_t pBuffer[32];
    uint32_t i, WorkAddress;
    for ( i = OffsetInByte; i < w25qxx.SectorSize; i += sizeof(pBuffer)) {
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e34:	e040      	b.n	8005eb8 <W25qxx_IsEmptySector+0xc8>

    	W25_SELECT();
 8005e36:	f7ff fd71 	bl	800591c <W25_SELECT>
        WorkAddress = (i + Sector_Address * w25qxx.SectorSize);
 8005e3a:	4b4c      	ldr	r3, [pc, #304]	; (8005f6c <W25qxx_IsEmptySector+0x17c>)
 8005e3c:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	fb02 f303 	mul.w	r3, r2, r3
 8005e46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e48:	4413      	add	r3, r2
 8005e4a:	637b      	str	r3, [r7, #52]	; 0x34
        W25qxx_Spi(DATA_READ);//FAST_READ);
 8005e4c:	2003      	movs	r0, #3
 8005e4e:	f7ff fd7d 	bl	800594c <W25qxx_Spi>
        //if (w25qxx.ID >= W25Q256) W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
        W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 8005e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e54:	0c1b      	lsrs	r3, r3, #16
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7ff fd77 	bl	800594c <W25qxx_Spi>
        W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 8005e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e60:	0a1b      	lsrs	r3, r3, #8
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	4618      	mov	r0, r3
 8005e66:	f7ff fd71 	bl	800594c <W25qxx_Spi>
        W25qxx_Spi(WorkAddress & 0xFF);
 8005e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f7ff fd6c 	bl	800594c <W25qxx_Spi>
        //W25qxx_Spi(0);
        HAL_SPI_Receive(portFLASH, pBuffer, sizeof(pBuffer), min_wait_ms);
 8005e74:	4b3e      	ldr	r3, [pc, #248]	; (8005f70 <W25qxx_IsEmptySector+0x180>)
 8005e76:	6818      	ldr	r0, [r3, #0]
 8005e78:	23fa      	movs	r3, #250	; 0xfa
 8005e7a:	f107 0114 	add.w	r1, r7, #20
 8005e7e:	2220      	movs	r2, #32
 8005e80:	f004 fe19 	bl	800aab6 <HAL_SPI_Receive>
        W25_UNSELECT();
 8005e84:	f7ff fd56 	bl	8005934 <W25_UNSELECT>

        for (uint8_t x = 0; x < sizeof(pBuffer); x++) {
 8005e88:	2300      	movs	r3, #0
 8005e8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005e8e:	e00c      	b.n	8005eaa <W25qxx_IsEmptySector+0xba>
            if (pBuffer[x] != 0xFF) goto NOT_EMPTY;
 8005e90:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005e94:	3340      	adds	r3, #64	; 0x40
 8005e96:	443b      	add	r3, r7
 8005e98:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8005e9c:	2bff      	cmp	r3, #255	; 0xff
 8005e9e:	d159      	bne.n	8005f54 <W25qxx_IsEmptySector+0x164>
        for (uint8_t x = 0; x < sizeof(pBuffer); x++) {
 8005ea0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005eaa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005eae:	2b1f      	cmp	r3, #31
 8005eb0:	d9ee      	bls.n	8005e90 <W25qxx_IsEmptySector+0xa0>
    for ( i = OffsetInByte; i < w25qxx.SectorSize; i += sizeof(pBuffer)) {
 8005eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eb4:	3320      	adds	r3, #32
 8005eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005eb8:	4b2c      	ldr	r3, [pc, #176]	; (8005f6c <W25qxx_IsEmptySector+0x17c>)
 8005eba:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8005ebe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d3b8      	bcc.n	8005e36 <W25qxx_IsEmptySector+0x46>
        }
    }
    if ((w25qxx.SectorSize + OffsetInByte) % sizeof(pBuffer) != 0) {
 8005ec4:	4b29      	ldr	r3, [pc, #164]	; (8005f6c <W25qxx_IsEmptySector+0x17c>)
 8005ec6:	f8d3 200f 	ldr.w	r2, [r3, #15]
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	4413      	add	r3, r2
 8005ece:	f003 031f 	and.w	r3, r3, #31
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d038      	beq.n	8005f48 <W25qxx_IsEmptySector+0x158>
        i -= sizeof(pBuffer);
 8005ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ed8:	3b20      	subs	r3, #32
 8005eda:	63fb      	str	r3, [r7, #60]	; 0x3c
        for( ; i < w25qxx.SectorSize; i++) {
 8005edc:	e02e      	b.n	8005f3c <W25qxx_IsEmptySector+0x14c>

            W25_SELECT();
 8005ede:	f7ff fd1d 	bl	800591c <W25_SELECT>
            WorkAddress = (i + Sector_Address * w25qxx.SectorSize);
 8005ee2:	4b22      	ldr	r3, [pc, #136]	; (8005f6c <W25qxx_IsEmptySector+0x17c>)
 8005ee4:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	fb02 f303 	mul.w	r3, r2, r3
 8005eee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ef0:	4413      	add	r3, r2
 8005ef2:	637b      	str	r3, [r7, #52]	; 0x34
            W25qxx_Spi(DATA_READ);//FAST_READ);
 8005ef4:	2003      	movs	r0, #3
 8005ef6:	f7ff fd29 	bl	800594c <W25qxx_Spi>
            //if (w25qxx.ID >= W25Q256) W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
            W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 8005efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005efc:	0c1b      	lsrs	r3, r3, #16
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7ff fd23 	bl	800594c <W25qxx_Spi>
            W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 8005f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f08:	0a1b      	lsrs	r3, r3, #8
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7ff fd1d 	bl	800594c <W25qxx_Spi>
            W25qxx_Spi(WorkAddress & 0xFF);
 8005f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7ff fd18 	bl	800594c <W25qxx_Spi>
            //W25qxx_Spi(0);
            HAL_SPI_Receive(portFLASH, pBuffer, 1, min_wait_ms);
 8005f1c:	4b14      	ldr	r3, [pc, #80]	; (8005f70 <W25qxx_IsEmptySector+0x180>)
 8005f1e:	6818      	ldr	r0, [r3, #0]
 8005f20:	23fa      	movs	r3, #250	; 0xfa
 8005f22:	f107 0114 	add.w	r1, r7, #20
 8005f26:	2201      	movs	r2, #1
 8005f28:	f004 fdc5 	bl	800aab6 <HAL_SPI_Receive>
            W25_UNSELECT();
 8005f2c:	f7ff fd02 	bl	8005934 <W25_UNSELECT>

            if (pBuffer[0] != 0xFF) goto NOT_EMPTY;
 8005f30:	7d3b      	ldrb	r3, [r7, #20]
 8005f32:	2bff      	cmp	r3, #255	; 0xff
 8005f34:	d110      	bne.n	8005f58 <W25qxx_IsEmptySector+0x168>
        for( ; i < w25qxx.SectorSize; i++) {
 8005f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f38:	3301      	adds	r3, #1
 8005f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f3c:	4b0b      	ldr	r3, [pc, #44]	; (8005f6c <W25qxx_IsEmptySector+0x17c>)
 8005f3e:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8005f42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d3ca      	bcc.n	8005ede <W25qxx_IsEmptySector+0xee>
#ifdef W25QXX_DEBUG
    Report(1, "w25qxx CheckSector is Empty in %u ms\r\n", HAL_GetTick() - StartTime);
    //W25qxx_Delay(100);
#endif

    w25qxx.Lock = 0;
 8005f48:	4b08      	ldr	r3, [pc, #32]	; (8005f6c <W25qxx_IsEmptySector+0x17c>)
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    return true;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e007      	b.n	8005f64 <W25qxx_IsEmptySector+0x174>
            if (pBuffer[x] != 0xFF) goto NOT_EMPTY;
 8005f54:	bf00      	nop
 8005f56:	e000      	b.n	8005f5a <W25qxx_IsEmptySector+0x16a>
            if (pBuffer[0] != 0xFF) goto NOT_EMPTY;
 8005f58:	bf00      	nop
#ifdef W25QXX_DEBUG
    Report(1, "w25qxx CheckSector is Not Empty in %u ms\r\n", HAL_GetTick() - StartTime);
    //W25qxx_Delay(100);
#endif

    w25qxx.Lock = 0;
 8005f5a:	4b04      	ldr	r3, [pc, #16]	; (8005f6c <W25qxx_IsEmptySector+0x17c>)
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    return false;
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3740      	adds	r7, #64	; 0x40
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	20003060 	.word	0x20003060
 8005f70:	2000000c 	.word	0x2000000c

08005f74 <W25qxx_WritePage>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b086      	sub	sp, #24
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	607a      	str	r2, [r7, #4]
 8005f80:	603b      	str	r3, [r7, #0]
    while (w25qxx.Lock) W25qxx_Delay(1);
 8005f82:	e002      	b.n	8005f8a <W25qxx_WritePage+0x16>
 8005f84:	2001      	movs	r0, #1
 8005f86:	f000 fad9 	bl	800653c <HAL_Delay>
 8005f8a:	4b4d      	ldr	r3, [pc, #308]	; (80060c0 <W25qxx_WritePage+0x14c>)
 8005f8c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1f7      	bne.n	8005f84 <W25qxx_WritePage+0x10>

    w25qxx.Lock = 1;
 8005f94:	4b4a      	ldr	r3, [pc, #296]	; (80060c0 <W25qxx_WritePage+0x14c>)
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    if ( ((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || !NumByteToWrite_up_to_PageSize )
 8005f9c:	683a      	ldr	r2, [r7, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	4a47      	ldr	r2, [pc, #284]	; (80060c0 <W25qxx_WritePage+0x14c>)
 8005fa4:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8005fa8:	b292      	uxth	r2, r2
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d802      	bhi.n	8005fb4 <W25qxx_WritePage+0x40>
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d107      	bne.n	8005fc4 <W25qxx_WritePage+0x50>
                NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8005fb4:	4b42      	ldr	r3, [pc, #264]	; (80060c0 <W25qxx_WritePage+0x14c>)
 8005fb6:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	603b      	str	r3, [r7, #0]
    if ( (OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize )
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	4413      	add	r3, r2
 8005fca:	4a3d      	ldr	r2, [pc, #244]	; (80060c0 <W25qxx_WritePage+0x14c>)
 8005fcc:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8005fd0:	b292      	uxth	r2, r2
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d907      	bls.n	8005fe6 <W25qxx_WritePage+0x72>
                NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8005fd6:	4b3a      	ldr	r3, [pc, #232]	; (80060c0 <W25qxx_WritePage+0x14c>)
 8005fd8:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	461a      	mov	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	603b      	str	r3, [r7, #0]
    Report(1, "%s WritePage:0x%X(%u), Offset:%u ,Writes %u Bytes, begin...\r\n",
                 __func__, Page_Address, Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
    uint32_t StartTime = HAL_GetTick();
#endif

    W25qxx_WaitForWriteEnd();
 8005fe6:	f7ff fd99 	bl	8005b1c <W25qxx_WaitForWriteEnd>
    W25qxx_WriteEnable();
 8005fea:	f7ff fd4b 	bl	8005a84 <W25qxx_WriteEnable>

    Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8005fee:	4b34      	ldr	r3, [pc, #208]	; (80060c0 <W25qxx_WritePage+0x14c>)
 8005ff0:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	fb02 f303 	mul.w	r3, r2, r3
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	4413      	add	r3, r2
 8006002:	60bb      	str	r3, [r7, #8]
    W25qxx_Spi((Page_Address & 0xFF00) >> 8);
    W25qxx_Spi(Page_Address&0xFF);
    HAL_SPI_Transmit(portFLASH, pBuffer, NumByteToWrite_up_to_PageSize, min_wait_ms);
    W25_UNSELECT();*/

    uint16_t lens = NumByteToWrite_up_to_PageSize + PAGE_HDR_BYTES;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	b29b      	uxth	r3, r3
 8006008:	3304      	adds	r3, #4
 800600a:	82fb      	strh	r3, [r7, #22]
    int idx = 0;
 800600c:	2300      	movs	r3, #0
 800600e:	613b      	str	r3, [r7, #16]
    pageTmp[idx++] = PAGE_PROG;
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	1c5a      	adds	r2, r3, #1
 8006014:	613a      	str	r2, [r7, #16]
 8006016:	4a2b      	ldr	r2, [pc, #172]	; (80060c4 <W25qxx_WritePage+0x150>)
 8006018:	2102      	movs	r1, #2
 800601a:	54d1      	strb	r1, [r2, r3]
    //if (w25qxx.ID >= W25Q256) pageTmp[idx++] = (Page_Address & 0xFF000000) >> 24;
    pageTmp[idx++] = (Page_Address & 0xFF0000) >> 16;
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	0c19      	lsrs	r1, r3, #16
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	1c5a      	adds	r2, r3, #1
 8006024:	613a      	str	r2, [r7, #16]
 8006026:	b2c9      	uxtb	r1, r1
 8006028:	4a26      	ldr	r2, [pc, #152]	; (80060c4 <W25qxx_WritePage+0x150>)
 800602a:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = (Page_Address& 0xFF00) >> 8;
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	0a19      	lsrs	r1, r3, #8
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	1c5a      	adds	r2, r3, #1
 8006034:	613a      	str	r2, [r7, #16]
 8006036:	b2c9      	uxtb	r1, r1
 8006038:	4a22      	ldr	r2, [pc, #136]	; (80060c4 <W25qxx_WritePage+0x150>)
 800603a:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = Page_Address & 0xFF;
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	1c5a      	adds	r2, r3, #1
 8006040:	613a      	str	r2, [r7, #16]
 8006042:	68ba      	ldr	r2, [r7, #8]
 8006044:	b2d1      	uxtb	r1, r2
 8006046:	4a1f      	ldr	r2, [pc, #124]	; (80060c4 <W25qxx_WritePage+0x150>)
 8006048:	54d1      	strb	r1, [r2, r3]
    memcpy(&pageTmp[PAGE_HDR_BYTES], pBuffer, NumByteToWrite_up_to_PageSize);//w25qxx.PageSize);
 800604a:	683a      	ldr	r2, [r7, #0]
 800604c:	68f9      	ldr	r1, [r7, #12]
 800604e:	481e      	ldr	r0, [pc, #120]	; (80060c8 <W25qxx_WritePage+0x154>)
 8006050:	f008 f918 	bl	800e284 <memcpy>

    spiRdy = 0;
 8006054:	4b1d      	ldr	r3, [pc, #116]	; (80060cc <W25qxx_WritePage+0x158>)
 8006056:	2200      	movs	r2, #0
 8006058:	701a      	strb	r2, [r3, #0]

w25_withDMA = 1;
 800605a:	4b1d      	ldr	r3, [pc, #116]	; (80060d0 <W25qxx_WritePage+0x15c>)
 800605c:	2201      	movs	r2, #1
 800605e:	701a      	strb	r2, [r3, #0]
    W25_SELECT();
 8006060:	f7ff fc5c 	bl	800591c <W25_SELECT>
    if (w25_withDMA) {
 8006064:	4b1a      	ldr	r3, [pc, #104]	; (80060d0 <W25qxx_WritePage+0x15c>)
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d012      	beq.n	8006092 <W25qxx_WritePage+0x11e>
    	HAL_SPI_Transmit_DMA(portFLASH, pageTmp, lens);
 800606c:	4b19      	ldr	r3, [pc, #100]	; (80060d4 <W25qxx_WritePage+0x160>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	8afa      	ldrh	r2, [r7, #22]
 8006072:	4914      	ldr	r1, [pc, #80]	; (80060c4 <W25qxx_WritePage+0x150>)
 8006074:	4618      	mov	r0, r3
 8006076:	f005 f861 	bl	800b13c <HAL_SPI_Transmit_DMA>
    	while (!spiRdy) {
 800607a:	e002      	b.n	8006082 <W25qxx_WritePage+0x10e>
    		W25qxx_Delay(1);
 800607c:	2001      	movs	r0, #1
 800607e:	f000 fa5d 	bl	800653c <HAL_Delay>
    	while (!spiRdy) {
 8006082:	4b12      	ldr	r3, [pc, #72]	; (80060cc <W25qxx_WritePage+0x158>)
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d0f8      	beq.n	800607c <W25qxx_WritePage+0x108>
    	}
w25_withDMA = 0;
 800608a:	4b11      	ldr	r3, [pc, #68]	; (80060d0 <W25qxx_WritePage+0x15c>)
 800608c:	2200      	movs	r2, #0
 800608e:	701a      	strb	r2, [r3, #0]
 8006090:	e00d      	b.n	80060ae <W25qxx_WritePage+0x13a>
    } else {
    	HAL_SPI_Transmit(portFLASH, pageTmp, lens, min_wait_ms);
 8006092:	4b10      	ldr	r3, [pc, #64]	; (80060d4 <W25qxx_WritePage+0x160>)
 8006094:	6818      	ldr	r0, [r3, #0]
 8006096:	23fa      	movs	r3, #250	; 0xfa
 8006098:	8afa      	ldrh	r2, [r7, #22]
 800609a:	490a      	ldr	r1, [pc, #40]	; (80060c4 <W25qxx_WritePage+0x150>)
 800609c:	f004 fb9d 	bl	800a7da <HAL_SPI_Transmit>

    	W25_UNSELECT();
 80060a0:	f7ff fc48 	bl	8005934 <W25_UNSELECT>

    	W25qxx_WaitForWriteEnd();
 80060a4:	f7ff fd3a 	bl	8005b1c <W25qxx_WaitForWriteEnd>

    	spiRdy = 1;
 80060a8:	4b08      	ldr	r3, [pc, #32]	; (80060cc <W25qxx_WritePage+0x158>)
 80060aa:	2201      	movs	r2, #1
 80060ac:	701a      	strb	r2, [r3, #0]
    	Report(0, "\r\n");
    	Report(1, "%s done after %u ms\r\n", __func__, StartTime);
#endif
    }

    w25qxx.Lock = 0;
 80060ae:	4b04      	ldr	r3, [pc, #16]	; (80060c0 <W25qxx_WritePage+0x14c>)
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 80060b6:	bf00      	nop
 80060b8:	3718      	adds	r7, #24
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	20003060 	.word	0x20003060
 80060c4:	20003088 	.word	0x20003088
 80060c8:	2000308c 	.word	0x2000308c
 80060cc:	200001bc 	.word	0x200001bc
 80060d0:	2000318d 	.word	0x2000318d
 80060d4:	2000000c 	.word	0x2000000c

080060d8 <W25qxx_WriteSector>:
//------------------------------------------------------------------------------------------
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b088      	sub	sp, #32
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
 80060e4:	603b      	str	r3, [r7, #0]
    if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || !NumByteToWrite_up_to_SectorSize)
 80060e6:	4b31      	ldr	r3, [pc, #196]	; (80061ac <W25qxx_WriteSector+0xd4>)
 80060e8:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80060ec:	683a      	ldr	r2, [r7, #0]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d802      	bhi.n	80060f8 <W25qxx_WriteSector+0x20>
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d103      	bne.n	8006100 <W25qxx_WriteSector+0x28>
                NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 80060f8:	4b2c      	ldr	r3, [pc, #176]	; (80061ac <W25qxx_WriteSector+0xd4>)
 80060fa:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80060fe:	603b      	str	r3, [r7, #0]
    Report(1, "%s WriteSector:0x%X(%u), Offset:%u ,Write %u Bytes, begin...\r\n",
                 __func__, Sector_Address, Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
    //W25qxx_Delay(100);
#endif

    if (OffsetInByte >= w25qxx.SectorSize) {
 8006100:	4b2a      	ldr	r3, [pc, #168]	; (80061ac <W25qxx_WriteSector+0xd4>)
 8006102:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	429a      	cmp	r2, r3
 800610a:	d24b      	bcs.n	80061a4 <W25qxx_WriteSector+0xcc>
        return;
    }

    int32_t BytesToWrite;
    uint32_t LocalOffset, StartPage;
    if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	441a      	add	r2, r3
 8006112:	4b26      	ldr	r3, [pc, #152]	; (80061ac <W25qxx_WriteSector+0xd4>)
 8006114:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006118:	429a      	cmp	r2, r3
 800611a:	d906      	bls.n	800612a <W25qxx_WriteSector+0x52>
        BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 800611c:	4b23      	ldr	r3, [pc, #140]	; (80061ac <W25qxx_WriteSector+0xd4>)
 800611e:	f8d3 200f 	ldr.w	r2, [r3, #15]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	61fb      	str	r3, [r7, #28]
 8006128:	e001      	b.n	800612e <W25qxx_WriteSector+0x56>
    else
        BytesToWrite = NumByteToWrite_up_to_SectorSize;
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	61fb      	str	r3, [r7, #28]
    StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 800612e:	68b8      	ldr	r0, [r7, #8]
 8006130:	f7ff fe46 	bl	8005dc0 <W25qxx_SectorToPage>
 8006134:	4602      	mov	r2, r0
 8006136:	4b1d      	ldr	r3, [pc, #116]	; (80061ac <W25qxx_WriteSector+0xd4>)
 8006138:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800613c:	b29b      	uxth	r3, r3
 800613e:	4619      	mov	r1, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	fbb3 f3f1 	udiv	r3, r3, r1
 8006146:	4413      	add	r3, r2
 8006148:	617b      	str	r3, [r7, #20]
    LocalOffset = OffsetInByte % w25qxx.PageSize;
 800614a:	4b18      	ldr	r3, [pc, #96]	; (80061ac <W25qxx_WriteSector+0xd4>)
 800614c:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006150:	b29b      	uxth	r3, r3
 8006152:	461a      	mov	r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	fbb3 f1f2 	udiv	r1, r3, r2
 800615a:	fb01 f202 	mul.w	r2, r1, r2
 800615e:	1a9b      	subs	r3, r3, r2
 8006160:	61bb      	str	r3, [r7, #24]

    do
    {
        W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	69ba      	ldr	r2, [r7, #24]
 8006166:	6979      	ldr	r1, [r7, #20]
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f7ff ff03 	bl	8005f74 <W25qxx_WritePage>
        StartPage++;
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	3301      	adds	r3, #1
 8006172:	617b      	str	r3, [r7, #20]
        BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8006174:	4b0d      	ldr	r3, [pc, #52]	; (80061ac <W25qxx_WriteSector+0xd4>)
 8006176:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800617a:	b29b      	uxth	r3, r3
 800617c:	461a      	mov	r2, r3
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	1a9a      	subs	r2, r3, r2
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	4413      	add	r3, r2
 8006186:	61fb      	str	r3, [r7, #28]
        pBuffer += w25qxx.PageSize;
 8006188:	4b08      	ldr	r3, [pc, #32]	; (80061ac <W25qxx_WriteSector+0xd4>)
 800618a:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800618e:	b29b      	uxth	r3, r3
 8006190:	461a      	mov	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	4413      	add	r3, r2
 8006196:	60fb      	str	r3, [r7, #12]
        LocalOffset = 0;
 8006198:	2300      	movs	r3, #0
 800619a:	61bb      	str	r3, [r7, #24]
    } while(BytesToWrite > 0);
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	dcdf      	bgt.n	8006162 <W25qxx_WriteSector+0x8a>
 80061a2:	e000      	b.n	80061a6 <W25qxx_WriteSector+0xce>
        return;
 80061a4:	bf00      	nop
#ifdef W25QXX_DEBUG
    Report(1, "%s Done\r\n", __func__);
    //W25qxx_Delay(100);
#endif

}
 80061a6:	3720      	adds	r7, #32
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	20003060 	.word	0x20003060

080061b0 <W25qxx_ReadPage>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b088      	sub	sp, #32
 80061b4:	af02      	add	r7, sp, #8
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]
 80061bc:	603b      	str	r3, [r7, #0]
    while (w25qxx.Lock) W25qxx_Delay(1);
 80061be:	e002      	b.n	80061c6 <W25qxx_ReadPage+0x16>
 80061c0:	2001      	movs	r0, #1
 80061c2:	f000 f9bb 	bl	800653c <HAL_Delay>
 80061c6:	4b51      	ldr	r3, [pc, #324]	; (800630c <W25qxx_ReadPage+0x15c>)
 80061c8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d1f7      	bne.n	80061c0 <W25qxx_ReadPage+0x10>

    w25qxx.Lock = 1;
 80061d0:	4b4e      	ldr	r3, [pc, #312]	; (800630c <W25qxx_ReadPage+0x15c>)
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || !NumByteToRead_up_to_PageSize)
 80061d8:	4b4c      	ldr	r3, [pc, #304]	; (800630c <W25qxx_ReadPage+0x15c>)
 80061da:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80061de:	b29b      	uxth	r3, r3
 80061e0:	461a      	mov	r2, r3
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d802      	bhi.n	80061ee <W25qxx_ReadPage+0x3e>
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d104      	bne.n	80061f8 <W25qxx_ReadPage+0x48>
        NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 80061ee:	4b47      	ldr	r3, [pc, #284]	; (800630c <W25qxx_ReadPage+0x15c>)
 80061f0:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	603b      	str	r3, [r7, #0]
    if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	4413      	add	r3, r2
 80061fe:	4a43      	ldr	r2, [pc, #268]	; (800630c <W25qxx_ReadPage+0x15c>)
 8006200:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8006204:	b292      	uxth	r2, r2
 8006206:	4293      	cmp	r3, r2
 8006208:	d907      	bls.n	800621a <W25qxx_ReadPage+0x6a>
        NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800620a:	4b40      	ldr	r3, [pc, #256]	; (800630c <W25qxx_ReadPage+0x15c>)
 800620c:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006210:	b29b      	uxth	r3, r3
 8006212:	461a      	mov	r2, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	603b      	str	r3, [r7, #0]
                 __func__, Page_Address, Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
    //W25qxx_Delay(100);
    uint32_t StartTime = HAL_GetTick();
#endif

    Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 800621a:	4b3c      	ldr	r3, [pc, #240]	; (800630c <W25qxx_ReadPage+0x15c>)
 800621c:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006220:	b29b      	uxth	r3, r3
 8006222:	461a      	mov	r2, r3
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	fb02 f303 	mul.w	r3, r2, r3
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	4413      	add	r3, r2
 800622e:	60bb      	str	r3, [r7, #8]
    W25qxx_Spi(Page_Address & 0xFF);
    //W25qxx_Spi(0);
    HAL_SPI_Receive(portFLASH, pBuffer, NumByteToRead_up_to_PageSize, min_wait_ms);
    W25_UNSELECT();
    */
    memset(pageTmp, 0, sizeof(pageTmp));
 8006230:	f240 1205 	movw	r2, #261	; 0x105
 8006234:	2100      	movs	r1, #0
 8006236:	4836      	ldr	r0, [pc, #216]	; (8006310 <W25qxx_ReadPage+0x160>)
 8006238:	f008 f832 	bl	800e2a0 <memset>
    uint16_t lens = NumByteToRead_up_to_PageSize + PAGE_HDR_BYTES;// + 1;
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	b29b      	uxth	r3, r3
 8006240:	3304      	adds	r3, #4
 8006242:	82fb      	strh	r3, [r7, #22]
    int idx = 0;
 8006244:	2300      	movs	r3, #0
 8006246:	613b      	str	r3, [r7, #16]
    pageTmp[idx++] = DATA_READ;//FAST_READ;
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	1c5a      	adds	r2, r3, #1
 800624c:	613a      	str	r2, [r7, #16]
 800624e:	4a30      	ldr	r2, [pc, #192]	; (8006310 <W25qxx_ReadPage+0x160>)
 8006250:	2103      	movs	r1, #3
 8006252:	54d1      	strb	r1, [r2, r3]
    //if (w25qxx.ID >= W25Q256) pageTmp[idx++] = (Page_Address & 0xFF000000) >> 24;
    pageTmp[idx++] = (Page_Address & 0xFF0000) >> 16;
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	0c19      	lsrs	r1, r3, #16
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	1c5a      	adds	r2, r3, #1
 800625c:	613a      	str	r2, [r7, #16]
 800625e:	b2c9      	uxtb	r1, r1
 8006260:	4a2b      	ldr	r2, [pc, #172]	; (8006310 <W25qxx_ReadPage+0x160>)
 8006262:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = (Page_Address& 0xFF00) >> 8;
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	0a19      	lsrs	r1, r3, #8
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	1c5a      	adds	r2, r3, #1
 800626c:	613a      	str	r2, [r7, #16]
 800626e:	b2c9      	uxtb	r1, r1
 8006270:	4a27      	ldr	r2, [pc, #156]	; (8006310 <W25qxx_ReadPage+0x160>)
 8006272:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = Page_Address & 0xFF;
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	1c5a      	adds	r2, r3, #1
 8006278:	613a      	str	r2, [r7, #16]
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	b2d1      	uxtb	r1, r2
 800627e:	4a24      	ldr	r2, [pc, #144]	; (8006310 <W25qxx_ReadPage+0x160>)
 8006280:	54d1      	strb	r1, [r2, r3]
    //pageTmp[idx++] = 0;
    spiRdy = 0;
 8006282:	4b24      	ldr	r3, [pc, #144]	; (8006314 <W25qxx_ReadPage+0x164>)
 8006284:	2200      	movs	r2, #0
 8006286:	701a      	strb	r2, [r3, #0]

w25_withDMA = 1;
 8006288:	4b23      	ldr	r3, [pc, #140]	; (8006318 <W25qxx_ReadPage+0x168>)
 800628a:	2201      	movs	r2, #1
 800628c:	701a      	strb	r2, [r3, #0]
    W25_SELECT();
 800628e:	f7ff fb45 	bl	800591c <W25_SELECT>
    if (w25_withDMA) {
 8006292:	4b21      	ldr	r3, [pc, #132]	; (8006318 <W25qxx_ReadPage+0x168>)
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d012      	beq.n	80062c0 <W25qxx_ReadPage+0x110>
    	HAL_SPI_TransmitReceive_DMA(portFLASH, pageTmp, pageTmp, lens);
 800629a:	4b20      	ldr	r3, [pc, #128]	; (800631c <W25qxx_ReadPage+0x16c>)
 800629c:	6818      	ldr	r0, [r3, #0]
 800629e:	8afb      	ldrh	r3, [r7, #22]
 80062a0:	4a1b      	ldr	r2, [pc, #108]	; (8006310 <W25qxx_ReadPage+0x160>)
 80062a2:	491b      	ldr	r1, [pc, #108]	; (8006310 <W25qxx_ReadPage+0x160>)
 80062a4:	f005 f83e 	bl	800b324 <HAL_SPI_TransmitReceive_DMA>
    	while (!spiRdy) {
 80062a8:	e002      	b.n	80062b0 <W25qxx_ReadPage+0x100>
    		W25qxx_Delay(1);
 80062aa:	2001      	movs	r0, #1
 80062ac:	f000 f946 	bl	800653c <HAL_Delay>
    	while (!spiRdy) {
 80062b0:	4b18      	ldr	r3, [pc, #96]	; (8006314 <W25qxx_ReadPage+0x164>)
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d0f8      	beq.n	80062aa <W25qxx_ReadPage+0xfa>
    	}
w25_withDMA = 0;
 80062b8:	4b17      	ldr	r3, [pc, #92]	; (8006318 <W25qxx_ReadPage+0x168>)
 80062ba:	2200      	movs	r2, #0
 80062bc:	701a      	strb	r2, [r3, #0]
 80062be:	e017      	b.n	80062f0 <W25qxx_ReadPage+0x140>
    } else {
    	if (HAL_SPI_TransmitReceive(portFLASH, pageTmp, pageTmp, lens, min_wait_ms) != HAL_OK) devError |= devSPI;
 80062c0:	4b16      	ldr	r3, [pc, #88]	; (800631c <W25qxx_ReadPage+0x16c>)
 80062c2:	6818      	ldr	r0, [r3, #0]
 80062c4:	22fa      	movs	r2, #250	; 0xfa
 80062c6:	8afb      	ldrh	r3, [r7, #22]
 80062c8:	9200      	str	r2, [sp, #0]
 80062ca:	4a11      	ldr	r2, [pc, #68]	; (8006310 <W25qxx_ReadPage+0x160>)
 80062cc:	4910      	ldr	r1, [pc, #64]	; (8006310 <W25qxx_ReadPage+0x160>)
 80062ce:	f004 fd22 	bl	800ad16 <HAL_SPI_TransmitReceive>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d006      	beq.n	80062e6 <W25qxx_ReadPage+0x136>
 80062d8:	4b11      	ldr	r3, [pc, #68]	; (8006320 <W25qxx_ReadPage+0x170>)
 80062da:	881b      	ldrh	r3, [r3, #0]
 80062dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062e0:	b29a      	uxth	r2, r3
 80062e2:	4b0f      	ldr	r3, [pc, #60]	; (8006320 <W25qxx_ReadPage+0x170>)
 80062e4:	801a      	strh	r2, [r3, #0]
    	W25_UNSELECT();
 80062e6:	f7ff fb25 	bl	8005934 <W25_UNSELECT>

    	spiRdy = 1;
 80062ea:	4b0a      	ldr	r3, [pc, #40]	; (8006314 <W25qxx_ReadPage+0x164>)
 80062ec:	2201      	movs	r2, #1
 80062ee:	701a      	strb	r2, [r3, #0]
    }
	memcpy(pBuffer, &pageTmp[PAGE_HDR_BYTES], NumByteToRead_up_to_PageSize);//w25qxx.PageSize);
 80062f0:	683a      	ldr	r2, [r7, #0]
 80062f2:	490c      	ldr	r1, [pc, #48]	; (8006324 <W25qxx_ReadPage+0x174>)
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f007 ffc5 	bl	800e284 <memcpy>
    	Report(0, "\r\n");
    	Report(1, "%s done after %u ms\r\n", __func__, StartTime);
#endif


    w25qxx.Lock = 0;
 80062fa:	4b04      	ldr	r3, [pc, #16]	; (800630c <W25qxx_ReadPage+0x15c>)
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8006302:	bf00      	nop
 8006304:	3718      	adds	r7, #24
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	20003060 	.word	0x20003060
 8006310:	20003088 	.word	0x20003088
 8006314:	200001bc 	.word	0x200001bc
 8006318:	2000318d 	.word	0x2000318d
 800631c:	2000000c 	.word	0x2000000c
 8006320:	20001860 	.word	0x20001860
 8006324:	2000308c 	.word	0x2000308c

08006328 <W25qxx_ReadSector>:
//------------------------------------------------------------------------------------------
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b088      	sub	sp, #32
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]
 8006334:	603b      	str	r3, [r7, #0]
    if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || !NumByteToRead_up_to_SectorSize)
 8006336:	4b31      	ldr	r3, [pc, #196]	; (80063fc <W25qxx_ReadSector+0xd4>)
 8006338:	f8d3 300f 	ldr.w	r3, [r3, #15]
 800633c:	683a      	ldr	r2, [r7, #0]
 800633e:	429a      	cmp	r2, r3
 8006340:	d802      	bhi.n	8006348 <W25qxx_ReadSector+0x20>
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d103      	bne.n	8006350 <W25qxx_ReadSector+0x28>
                NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8006348:	4b2c      	ldr	r3, [pc, #176]	; (80063fc <W25qxx_ReadSector+0xd4>)
 800634a:	f8d3 300f 	ldr.w	r3, [r3, #15]
 800634e:	603b      	str	r3, [r7, #0]
    Report(1, "%s:0x%X(%u), Offset:%u ,Read %u Bytes, begin...\r\n",
                 __func__, Sector_Address, Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
    //W25qxx_Delay(100);
#endif

    if (OffsetInByte >= w25qxx.SectorSize) {
 8006350:	4b2a      	ldr	r3, [pc, #168]	; (80063fc <W25qxx_ReadSector+0xd4>)
 8006352:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	429a      	cmp	r2, r3
 800635a:	d24b      	bcs.n	80063f4 <W25qxx_ReadSector+0xcc>
        return;
    }

    int32_t BytesToRead;
    uint32_t LocalOffset, StartPage;
    if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	441a      	add	r2, r3
 8006362:	4b26      	ldr	r3, [pc, #152]	; (80063fc <W25qxx_ReadSector+0xd4>)
 8006364:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006368:	429a      	cmp	r2, r3
 800636a:	d906      	bls.n	800637a <W25qxx_ReadSector+0x52>
        BytesToRead = w25qxx.SectorSize - OffsetInByte;
 800636c:	4b23      	ldr	r3, [pc, #140]	; (80063fc <W25qxx_ReadSector+0xd4>)
 800636e:	f8d3 200f 	ldr.w	r2, [r3, #15]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	61fb      	str	r3, [r7, #28]
 8006378:	e001      	b.n	800637e <W25qxx_ReadSector+0x56>
    else
        BytesToRead = NumByteToRead_up_to_SectorSize;
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	61fb      	str	r3, [r7, #28]
    StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 800637e:	68b8      	ldr	r0, [r7, #8]
 8006380:	f7ff fd1e 	bl	8005dc0 <W25qxx_SectorToPage>
 8006384:	4602      	mov	r2, r0
 8006386:	4b1d      	ldr	r3, [pc, #116]	; (80063fc <W25qxx_ReadSector+0xd4>)
 8006388:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800638c:	b29b      	uxth	r3, r3
 800638e:	4619      	mov	r1, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	fbb3 f3f1 	udiv	r3, r3, r1
 8006396:	4413      	add	r3, r2
 8006398:	617b      	str	r3, [r7, #20]
    LocalOffset = OffsetInByte % w25qxx.PageSize;
 800639a:	4b18      	ldr	r3, [pc, #96]	; (80063fc <W25qxx_ReadSector+0xd4>)
 800639c:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	461a      	mov	r2, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80063aa:	fb01 f202 	mul.w	r2, r1, r2
 80063ae:	1a9b      	subs	r3, r3, r2
 80063b0:	61bb      	str	r3, [r7, #24]
    do {
        W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	69ba      	ldr	r2, [r7, #24]
 80063b6:	6979      	ldr	r1, [r7, #20]
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	f7ff fef9 	bl	80061b0 <W25qxx_ReadPage>
        StartPage++;
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	3301      	adds	r3, #1
 80063c2:	617b      	str	r3, [r7, #20]
        BytesToRead -= w25qxx.PageSize - LocalOffset;
 80063c4:	4b0d      	ldr	r3, [pc, #52]	; (80063fc <W25qxx_ReadSector+0xd4>)
 80063c6:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	461a      	mov	r2, r3
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	1a9a      	subs	r2, r3, r2
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	4413      	add	r3, r2
 80063d6:	61fb      	str	r3, [r7, #28]
        pBuffer += w25qxx.PageSize;
 80063d8:	4b08      	ldr	r3, [pc, #32]	; (80063fc <W25qxx_ReadSector+0xd4>)
 80063da:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80063de:	b29b      	uxth	r3, r3
 80063e0:	461a      	mov	r2, r3
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	4413      	add	r3, r2
 80063e6:	60fb      	str	r3, [r7, #12]
        LocalOffset = 0;
 80063e8:	2300      	movs	r3, #0
 80063ea:	61bb      	str	r3, [r7, #24]
    } while(BytesToRead > 0);
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	dcdf      	bgt.n	80063b2 <W25qxx_ReadSector+0x8a>
 80063f2:	e000      	b.n	80063f6 <W25qxx_ReadSector+0xce>
        return;
 80063f4:	bf00      	nop
#ifdef W25QXX_DEBUG
    Report(1, "%s done\r\n", __func__);
    //W25qxx_Delay(100);
#endif

}
 80063f6:	3720      	adds	r7, #32
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	20003060 	.word	0x20003060

08006400 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8006400:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006438 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006404:	f7ff fa78 	bl	80058f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006408:	480c      	ldr	r0, [pc, #48]	; (800643c <LoopForever+0x6>)
  ldr r1, =_edata
 800640a:	490d      	ldr	r1, [pc, #52]	; (8006440 <LoopForever+0xa>)
  ldr r2, =_sidata
 800640c:	4a0d      	ldr	r2, [pc, #52]	; (8006444 <LoopForever+0xe>)
  movs r3, #0
 800640e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006410:	e002      	b.n	8006418 <LoopCopyDataInit>

08006412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006416:	3304      	adds	r3, #4

08006418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800641a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800641c:	d3f9      	bcc.n	8006412 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800641e:	4a0a      	ldr	r2, [pc, #40]	; (8006448 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006420:	4c0a      	ldr	r4, [pc, #40]	; (800644c <LoopForever+0x16>)
  movs r3, #0
 8006422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006424:	e001      	b.n	800642a <LoopFillZerobss>

08006426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006428:	3204      	adds	r2, #4

0800642a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800642a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800642c:	d3fb      	bcc.n	8006426 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800642e:	f007 ff05 	bl	800e23c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006432:	f7fb fcaf 	bl	8001d94 <main>

08006436 <LoopForever>:

LoopForever:
    b LoopForever
 8006436:	e7fe      	b.n	8006436 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8006438:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800643c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006440:	20000400 	.word	0x20000400
  ldr r2, =_sidata
 8006444:	08014304 	.word	0x08014304
  ldr r2, =_sbss
 8006448:	20000400 	.word	0x20000400
  ldr r4, =_ebss
 800644c:	200031a4 	.word	0x200031a4

08006450 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006450:	e7fe      	b.n	8006450 <ADC1_2_IRQHandler>

08006452 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006452:	b580      	push	{r7, lr}
 8006454:	b082      	sub	sp, #8
 8006456:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006458:	2300      	movs	r3, #0
 800645a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800645c:	2003      	movs	r0, #3
 800645e:	f000 f985 	bl	800676c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006462:	200f      	movs	r0, #15
 8006464:	f000 f80e 	bl	8006484 <HAL_InitTick>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d002      	beq.n	8006474 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	71fb      	strb	r3, [r7, #7]
 8006472:	e001      	b.n	8006478 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006474:	f7fe fdda 	bl	800502c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006478:	79fb      	ldrb	r3, [r7, #7]
}
 800647a:	4618      	mov	r0, r3
 800647c:	3708      	adds	r7, #8
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
	...

08006484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800648c:	2300      	movs	r3, #0
 800648e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8006490:	4b17      	ldr	r3, [pc, #92]	; (80064f0 <HAL_InitTick+0x6c>)
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d023      	beq.n	80064e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006498:	4b16      	ldr	r3, [pc, #88]	; (80064f4 <HAL_InitTick+0x70>)
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	4b14      	ldr	r3, [pc, #80]	; (80064f0 <HAL_InitTick+0x6c>)
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	4619      	mov	r1, r3
 80064a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80064a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80064aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ae:	4618      	mov	r0, r3
 80064b0:	f000 f99f 	bl	80067f2 <HAL_SYSTICK_Config>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d10f      	bne.n	80064da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2b0f      	cmp	r3, #15
 80064be:	d809      	bhi.n	80064d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80064c0:	2200      	movs	r2, #0
 80064c2:	6879      	ldr	r1, [r7, #4]
 80064c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064c8:	f000 f95b 	bl	8006782 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80064cc:	4a0a      	ldr	r2, [pc, #40]	; (80064f8 <HAL_InitTick+0x74>)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6013      	str	r3, [r2, #0]
 80064d2:	e007      	b.n	80064e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	73fb      	strb	r3, [r7, #15]
 80064d8:	e004      	b.n	80064e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	73fb      	strb	r3, [r7, #15]
 80064de:	e001      	b.n	80064e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80064e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	20000228 	.word	0x20000228
 80064f4:	200001f4 	.word	0x200001f4
 80064f8:	20000224 	.word	0x20000224

080064fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80064fc:	b480      	push	{r7}
 80064fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006500:	4b06      	ldr	r3, [pc, #24]	; (800651c <HAL_IncTick+0x20>)
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	461a      	mov	r2, r3
 8006506:	4b06      	ldr	r3, [pc, #24]	; (8006520 <HAL_IncTick+0x24>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4413      	add	r3, r2
 800650c:	4a04      	ldr	r2, [pc, #16]	; (8006520 <HAL_IncTick+0x24>)
 800650e:	6013      	str	r3, [r2, #0]
}
 8006510:	bf00      	nop
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	20000228 	.word	0x20000228
 8006520:	20003190 	.word	0x20003190

08006524 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006524:	b480      	push	{r7}
 8006526:	af00      	add	r7, sp, #0
  return uwTick;
 8006528:	4b03      	ldr	r3, [pc, #12]	; (8006538 <HAL_GetTick+0x14>)
 800652a:	681b      	ldr	r3, [r3, #0]
}
 800652c:	4618      	mov	r0, r3
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	20003190 	.word	0x20003190

0800653c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006544:	f7ff ffee 	bl	8006524 <HAL_GetTick>
 8006548:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006554:	d005      	beq.n	8006562 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8006556:	4b0a      	ldr	r3, [pc, #40]	; (8006580 <HAL_Delay+0x44>)
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	461a      	mov	r2, r3
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	4413      	add	r3, r2
 8006560:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006562:	bf00      	nop
 8006564:	f7ff ffde 	bl	8006524 <HAL_GetTick>
 8006568:	4602      	mov	r2, r0
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	429a      	cmp	r2, r3
 8006572:	d8f7      	bhi.n	8006564 <HAL_Delay+0x28>
  {
  }
}
 8006574:	bf00      	nop
 8006576:	bf00      	nop
 8006578:	3710      	adds	r7, #16
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	20000228 	.word	0x20000228

08006584 <__NVIC_SetPriorityGrouping>:
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f003 0307 	and.w	r3, r3, #7
 8006592:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006594:	4b0c      	ldr	r3, [pc, #48]	; (80065c8 <__NVIC_SetPriorityGrouping+0x44>)
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80065a0:	4013      	ands	r3, r2
 80065a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80065ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80065b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80065b6:	4a04      	ldr	r2, [pc, #16]	; (80065c8 <__NVIC_SetPriorityGrouping+0x44>)
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	60d3      	str	r3, [r2, #12]
}
 80065bc:	bf00      	nop
 80065be:	3714      	adds	r7, #20
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr
 80065c8:	e000ed00 	.word	0xe000ed00

080065cc <__NVIC_GetPriorityGrouping>:
{
 80065cc:	b480      	push	{r7}
 80065ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80065d0:	4b04      	ldr	r3, [pc, #16]	; (80065e4 <__NVIC_GetPriorityGrouping+0x18>)
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	0a1b      	lsrs	r3, r3, #8
 80065d6:	f003 0307 	and.w	r3, r3, #7
}
 80065da:	4618      	mov	r0, r3
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr
 80065e4:	e000ed00 	.word	0xe000ed00

080065e8 <__NVIC_EnableIRQ>:
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	4603      	mov	r3, r0
 80065f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	db0b      	blt.n	8006612 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80065fa:	79fb      	ldrb	r3, [r7, #7]
 80065fc:	f003 021f 	and.w	r2, r3, #31
 8006600:	4907      	ldr	r1, [pc, #28]	; (8006620 <__NVIC_EnableIRQ+0x38>)
 8006602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006606:	095b      	lsrs	r3, r3, #5
 8006608:	2001      	movs	r0, #1
 800660a:	fa00 f202 	lsl.w	r2, r0, r2
 800660e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006612:	bf00      	nop
 8006614:	370c      	adds	r7, #12
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	e000e100 	.word	0xe000e100

08006624 <__NVIC_DisableIRQ>:
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	4603      	mov	r3, r0
 800662c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800662e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006632:	2b00      	cmp	r3, #0
 8006634:	db12      	blt.n	800665c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006636:	79fb      	ldrb	r3, [r7, #7]
 8006638:	f003 021f 	and.w	r2, r3, #31
 800663c:	490a      	ldr	r1, [pc, #40]	; (8006668 <__NVIC_DisableIRQ+0x44>)
 800663e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006642:	095b      	lsrs	r3, r3, #5
 8006644:	2001      	movs	r0, #1
 8006646:	fa00 f202 	lsl.w	r2, r0, r2
 800664a:	3320      	adds	r3, #32
 800664c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006650:	f3bf 8f4f 	dsb	sy
}
 8006654:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006656:	f3bf 8f6f 	isb	sy
}
 800665a:	bf00      	nop
}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr
 8006668:	e000e100 	.word	0xe000e100

0800666c <__NVIC_SetPriority>:
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	4603      	mov	r3, r0
 8006674:	6039      	str	r1, [r7, #0]
 8006676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800667c:	2b00      	cmp	r3, #0
 800667e:	db0a      	blt.n	8006696 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	b2da      	uxtb	r2, r3
 8006684:	490c      	ldr	r1, [pc, #48]	; (80066b8 <__NVIC_SetPriority+0x4c>)
 8006686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800668a:	0112      	lsls	r2, r2, #4
 800668c:	b2d2      	uxtb	r2, r2
 800668e:	440b      	add	r3, r1
 8006690:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006694:	e00a      	b.n	80066ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	b2da      	uxtb	r2, r3
 800669a:	4908      	ldr	r1, [pc, #32]	; (80066bc <__NVIC_SetPriority+0x50>)
 800669c:	79fb      	ldrb	r3, [r7, #7]
 800669e:	f003 030f 	and.w	r3, r3, #15
 80066a2:	3b04      	subs	r3, #4
 80066a4:	0112      	lsls	r2, r2, #4
 80066a6:	b2d2      	uxtb	r2, r2
 80066a8:	440b      	add	r3, r1
 80066aa:	761a      	strb	r2, [r3, #24]
}
 80066ac:	bf00      	nop
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr
 80066b8:	e000e100 	.word	0xe000e100
 80066bc:	e000ed00 	.word	0xe000ed00

080066c0 <NVIC_EncodePriority>:
{
 80066c0:	b480      	push	{r7}
 80066c2:	b089      	sub	sp, #36	; 0x24
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f003 0307 	and.w	r3, r3, #7
 80066d2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	f1c3 0307 	rsb	r3, r3, #7
 80066da:	2b04      	cmp	r3, #4
 80066dc:	bf28      	it	cs
 80066de:	2304      	movcs	r3, #4
 80066e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	3304      	adds	r3, #4
 80066e6:	2b06      	cmp	r3, #6
 80066e8:	d902      	bls.n	80066f0 <NVIC_EncodePriority+0x30>
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	3b03      	subs	r3, #3
 80066ee:	e000      	b.n	80066f2 <NVIC_EncodePriority+0x32>
 80066f0:	2300      	movs	r3, #0
 80066f2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	fa02 f303 	lsl.w	r3, r2, r3
 80066fe:	43da      	mvns	r2, r3
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	401a      	ands	r2, r3
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006708:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	fa01 f303 	lsl.w	r3, r1, r3
 8006712:	43d9      	mvns	r1, r3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006718:	4313      	orrs	r3, r2
}
 800671a:	4618      	mov	r0, r3
 800671c:	3724      	adds	r7, #36	; 0x24
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
	...

08006728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	3b01      	subs	r3, #1
 8006734:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006738:	d301      	bcc.n	800673e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800673a:	2301      	movs	r3, #1
 800673c:	e00f      	b.n	800675e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800673e:	4a0a      	ldr	r2, [pc, #40]	; (8006768 <SysTick_Config+0x40>)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	3b01      	subs	r3, #1
 8006744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006746:	210f      	movs	r1, #15
 8006748:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800674c:	f7ff ff8e 	bl	800666c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006750:	4b05      	ldr	r3, [pc, #20]	; (8006768 <SysTick_Config+0x40>)
 8006752:	2200      	movs	r2, #0
 8006754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006756:	4b04      	ldr	r3, [pc, #16]	; (8006768 <SysTick_Config+0x40>)
 8006758:	2207      	movs	r2, #7
 800675a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3708      	adds	r7, #8
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	e000e010 	.word	0xe000e010

0800676c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f7ff ff05 	bl	8006584 <__NVIC_SetPriorityGrouping>
}
 800677a:	bf00      	nop
 800677c:	3708      	adds	r7, #8
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b086      	sub	sp, #24
 8006786:	af00      	add	r7, sp, #0
 8006788:	4603      	mov	r3, r0
 800678a:	60b9      	str	r1, [r7, #8]
 800678c:	607a      	str	r2, [r7, #4]
 800678e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006790:	2300      	movs	r3, #0
 8006792:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006794:	f7ff ff1a 	bl	80065cc <__NVIC_GetPriorityGrouping>
 8006798:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	68b9      	ldr	r1, [r7, #8]
 800679e:	6978      	ldr	r0, [r7, #20]
 80067a0:	f7ff ff8e 	bl	80066c0 <NVIC_EncodePriority>
 80067a4:	4602      	mov	r2, r0
 80067a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067aa:	4611      	mov	r1, r2
 80067ac:	4618      	mov	r0, r3
 80067ae:	f7ff ff5d 	bl	800666c <__NVIC_SetPriority>
}
 80067b2:	bf00      	nop
 80067b4:	3718      	adds	r7, #24
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b082      	sub	sp, #8
 80067be:	af00      	add	r7, sp, #0
 80067c0:	4603      	mov	r3, r0
 80067c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80067c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067c8:	4618      	mov	r0, r3
 80067ca:	f7ff ff0d 	bl	80065e8 <__NVIC_EnableIRQ>
}
 80067ce:	bf00      	nop
 80067d0:	3708      	adds	r7, #8
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b082      	sub	sp, #8
 80067da:	af00      	add	r7, sp, #0
 80067dc:	4603      	mov	r3, r0
 80067de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80067e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067e4:	4618      	mov	r0, r3
 80067e6:	f7ff ff1d 	bl	8006624 <__NVIC_DisableIRQ>
}
 80067ea:	bf00      	nop
 80067ec:	3708      	adds	r7, #8
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b082      	sub	sp, #8
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f7ff ff94 	bl	8006728 <SysTick_Config>
 8006800:	4603      	mov	r3, r0
}
 8006802:	4618      	mov	r0, r3
 8006804:	3708      	adds	r7, #8
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
	...

0800680c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d101      	bne.n	800681e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e098      	b.n	8006950 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	461a      	mov	r2, r3
 8006824:	4b4d      	ldr	r3, [pc, #308]	; (800695c <HAL_DMA_Init+0x150>)
 8006826:	429a      	cmp	r2, r3
 8006828:	d80f      	bhi.n	800684a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	461a      	mov	r2, r3
 8006830:	4b4b      	ldr	r3, [pc, #300]	; (8006960 <HAL_DMA_Init+0x154>)
 8006832:	4413      	add	r3, r2
 8006834:	4a4b      	ldr	r2, [pc, #300]	; (8006964 <HAL_DMA_Init+0x158>)
 8006836:	fba2 2303 	umull	r2, r3, r2, r3
 800683a:	091b      	lsrs	r3, r3, #4
 800683c:	009a      	lsls	r2, r3, #2
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a48      	ldr	r2, [pc, #288]	; (8006968 <HAL_DMA_Init+0x15c>)
 8006846:	641a      	str	r2, [r3, #64]	; 0x40
 8006848:	e00e      	b.n	8006868 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	461a      	mov	r2, r3
 8006850:	4b46      	ldr	r3, [pc, #280]	; (800696c <HAL_DMA_Init+0x160>)
 8006852:	4413      	add	r3, r2
 8006854:	4a43      	ldr	r2, [pc, #268]	; (8006964 <HAL_DMA_Init+0x158>)
 8006856:	fba2 2303 	umull	r2, r3, r2, r3
 800685a:	091b      	lsrs	r3, r3, #4
 800685c:	009a      	lsls	r2, r3, #2
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a42      	ldr	r2, [pc, #264]	; (8006970 <HAL_DMA_Init+0x164>)
 8006866:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2202      	movs	r2, #2
 800686c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800687e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006882:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800688c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006898:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	699b      	ldr	r3, [r3, #24]
 800689e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a1b      	ldr	r3, [r3, #32]
 80068aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068c2:	d039      	beq.n	8006938 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c8:	4a27      	ldr	r2, [pc, #156]	; (8006968 <HAL_DMA_Init+0x15c>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d11a      	bne.n	8006904 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80068ce:	4b29      	ldr	r3, [pc, #164]	; (8006974 <HAL_DMA_Init+0x168>)
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068d6:	f003 031c 	and.w	r3, r3, #28
 80068da:	210f      	movs	r1, #15
 80068dc:	fa01 f303 	lsl.w	r3, r1, r3
 80068e0:	43db      	mvns	r3, r3
 80068e2:	4924      	ldr	r1, [pc, #144]	; (8006974 <HAL_DMA_Init+0x168>)
 80068e4:	4013      	ands	r3, r2
 80068e6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80068e8:	4b22      	ldr	r3, [pc, #136]	; (8006974 <HAL_DMA_Init+0x168>)
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6859      	ldr	r1, [r3, #4]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f4:	f003 031c 	and.w	r3, r3, #28
 80068f8:	fa01 f303 	lsl.w	r3, r1, r3
 80068fc:	491d      	ldr	r1, [pc, #116]	; (8006974 <HAL_DMA_Init+0x168>)
 80068fe:	4313      	orrs	r3, r2
 8006900:	600b      	str	r3, [r1, #0]
 8006902:	e019      	b.n	8006938 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006904:	4b1c      	ldr	r3, [pc, #112]	; (8006978 <HAL_DMA_Init+0x16c>)
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800690c:	f003 031c 	and.w	r3, r3, #28
 8006910:	210f      	movs	r1, #15
 8006912:	fa01 f303 	lsl.w	r3, r1, r3
 8006916:	43db      	mvns	r3, r3
 8006918:	4917      	ldr	r1, [pc, #92]	; (8006978 <HAL_DMA_Init+0x16c>)
 800691a:	4013      	ands	r3, r2
 800691c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800691e:	4b16      	ldr	r3, [pc, #88]	; (8006978 <HAL_DMA_Init+0x16c>)
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6859      	ldr	r1, [r3, #4]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800692a:	f003 031c 	and.w	r3, r3, #28
 800692e:	fa01 f303 	lsl.w	r3, r1, r3
 8006932:	4911      	ldr	r1, [pc, #68]	; (8006978 <HAL_DMA_Init+0x16c>)
 8006934:	4313      	orrs	r3, r2
 8006936:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2201      	movs	r2, #1
 8006942:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3714      	adds	r7, #20
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr
 800695c:	40020407 	.word	0x40020407
 8006960:	bffdfff8 	.word	0xbffdfff8
 8006964:	cccccccd 	.word	0xcccccccd
 8006968:	40020000 	.word	0x40020000
 800696c:	bffdfbf8 	.word	0xbffdfbf8
 8006970:	40020400 	.word	0x40020400
 8006974:	400200a8 	.word	0x400200a8
 8006978:	400204a8 	.word	0x400204a8

0800697c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b086      	sub	sp, #24
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	607a      	str	r2, [r7, #4]
 8006988:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800698a:	2300      	movs	r3, #0
 800698c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006994:	2b01      	cmp	r3, #1
 8006996:	d101      	bne.n	800699c <HAL_DMA_Start_IT+0x20>
 8006998:	2302      	movs	r3, #2
 800699a:	e04b      	b.n	8006a34 <HAL_DMA_Start_IT+0xb8>
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d13a      	bne.n	8006a26 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2202      	movs	r2, #2
 80069b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f022 0201 	bic.w	r2, r2, #1
 80069cc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	68b9      	ldr	r1, [r7, #8]
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f000 f96d 	bl	8006cb4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d008      	beq.n	80069f4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f042 020e 	orr.w	r2, r2, #14
 80069f0:	601a      	str	r2, [r3, #0]
 80069f2:	e00f      	b.n	8006a14 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f022 0204 	bic.w	r2, r2, #4
 8006a02:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f042 020a 	orr.w	r2, r2, #10
 8006a12:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f042 0201 	orr.w	r2, r2, #1
 8006a22:	601a      	str	r2, [r3, #0]
 8006a24:	e005      	b.n	8006a32 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006a2e:	2302      	movs	r3, #2
 8006a30:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3718      	adds	r7, #24
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b085      	sub	sp, #20
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a44:	2300      	movs	r3, #0
 8006a46:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d008      	beq.n	8006a66 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2204      	movs	r2, #4
 8006a58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e022      	b.n	8006aac <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f022 020e 	bic.w	r2, r2, #14
 8006a74:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f022 0201 	bic.w	r2, r2, #1
 8006a84:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a8a:	f003 021c 	and.w	r2, r3, #28
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a92:	2101      	movs	r1, #1
 8006a94:	fa01 f202 	lsl.w	r2, r1, r2
 8006a98:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8006aaa:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3714      	adds	r7, #20
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d005      	beq.n	8006adc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2204      	movs	r2, #4
 8006ad4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	73fb      	strb	r3, [r7, #15]
 8006ada:	e029      	b.n	8006b30 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f022 020e 	bic.w	r2, r2, #14
 8006aea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f022 0201 	bic.w	r2, r2, #1
 8006afa:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b00:	f003 021c 	and.w	r2, r3, #28
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b08:	2101      	movs	r1, #1
 8006b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8006b0e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d003      	beq.n	8006b30 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	4798      	blx	r3
    }
  }
  return status;
 8006b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3710      	adds	r7, #16
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}

08006b3a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b084      	sub	sp, #16
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b56:	f003 031c 	and.w	r3, r3, #28
 8006b5a:	2204      	movs	r2, #4
 8006b5c:	409a      	lsls	r2, r3
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	4013      	ands	r3, r2
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d026      	beq.n	8006bb4 <HAL_DMA_IRQHandler+0x7a>
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	f003 0304 	and.w	r3, r3, #4
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d021      	beq.n	8006bb4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 0320 	and.w	r3, r3, #32
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d107      	bne.n	8006b8e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f022 0204 	bic.w	r2, r2, #4
 8006b8c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b92:	f003 021c 	and.w	r2, r3, #28
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9a:	2104      	movs	r1, #4
 8006b9c:	fa01 f202 	lsl.w	r2, r1, r2
 8006ba0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d071      	beq.n	8006c8e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8006bb2:	e06c      	b.n	8006c8e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bb8:	f003 031c 	and.w	r3, r3, #28
 8006bbc:	2202      	movs	r2, #2
 8006bbe:	409a      	lsls	r2, r3
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d02e      	beq.n	8006c26 <HAL_DMA_IRQHandler+0xec>
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	f003 0302 	and.w	r3, r3, #2
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d029      	beq.n	8006c26 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 0320 	and.w	r3, r3, #32
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d10b      	bne.n	8006bf8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f022 020a 	bic.w	r2, r2, #10
 8006bee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bfc:	f003 021c 	and.w	r2, r3, #28
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c04:	2102      	movs	r1, #2
 8006c06:	fa01 f202 	lsl.w	r2, r1, r2
 8006c0a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d038      	beq.n	8006c8e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006c24:	e033      	b.n	8006c8e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c2a:	f003 031c 	and.w	r3, r3, #28
 8006c2e:	2208      	movs	r2, #8
 8006c30:	409a      	lsls	r2, r3
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	4013      	ands	r3, r2
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d02a      	beq.n	8006c90 <HAL_DMA_IRQHandler+0x156>
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	f003 0308 	and.w	r3, r3, #8
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d025      	beq.n	8006c90 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f022 020e 	bic.w	r2, r2, #14
 8006c52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c58:	f003 021c 	and.w	r2, r3, #28
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c60:	2101      	movs	r1, #1
 8006c62:	fa01 f202 	lsl.w	r2, r1, r2
 8006c66:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2201      	movs	r2, #1
 8006c72:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d004      	beq.n	8006c90 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006c8e:	bf00      	nop
 8006c90:	bf00      	nop
}
 8006c92:	3710      	adds	r7, #16
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006ca6:	b2db      	uxtb	r3, r3
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	607a      	str	r2, [r7, #4]
 8006cc0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cc6:	f003 021c 	and.w	r2, r3, #28
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cce:	2101      	movs	r1, #1
 8006cd0:	fa01 f202 	lsl.w	r2, r1, r2
 8006cd4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	683a      	ldr	r2, [r7, #0]
 8006cdc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	2b10      	cmp	r3, #16
 8006ce4:	d108      	bne.n	8006cf8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	68ba      	ldr	r2, [r7, #8]
 8006cf4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006cf6:	e007      	b.n	8006d08 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68ba      	ldr	r2, [r7, #8]
 8006cfe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	60da      	str	r2, [r3, #12]
}
 8006d08:	bf00      	nop
 8006d0a:	3714      	adds	r7, #20
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b087      	sub	sp, #28
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006d22:	e17f      	b.n	8007024 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	2101      	movs	r1, #1
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d30:	4013      	ands	r3, r2
 8006d32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	f000 8171 	beq.w	800701e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	f003 0303 	and.w	r3, r3, #3
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d005      	beq.n	8006d54 <HAL_GPIO_Init+0x40>
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	f003 0303 	and.w	r3, r3, #3
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d130      	bne.n	8006db6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	005b      	lsls	r3, r3, #1
 8006d5e:	2203      	movs	r2, #3
 8006d60:	fa02 f303 	lsl.w	r3, r2, r3
 8006d64:	43db      	mvns	r3, r3
 8006d66:	693a      	ldr	r2, [r7, #16]
 8006d68:	4013      	ands	r3, r2
 8006d6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	68da      	ldr	r2, [r3, #12]
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	005b      	lsls	r3, r3, #1
 8006d74:	fa02 f303 	lsl.w	r3, r2, r3
 8006d78:	693a      	ldr	r2, [r7, #16]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	693a      	ldr	r2, [r7, #16]
 8006d82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d92:	43db      	mvns	r3, r3
 8006d94:	693a      	ldr	r2, [r7, #16]
 8006d96:	4013      	ands	r3, r2
 8006d98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	091b      	lsrs	r3, r3, #4
 8006da0:	f003 0201 	and.w	r2, r3, #1
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	fa02 f303 	lsl.w	r3, r2, r3
 8006daa:	693a      	ldr	r2, [r7, #16]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	693a      	ldr	r2, [r7, #16]
 8006db4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	f003 0303 	and.w	r3, r3, #3
 8006dbe:	2b03      	cmp	r3, #3
 8006dc0:	d118      	bne.n	8006df4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8006dc8:	2201      	movs	r2, #1
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd0:	43db      	mvns	r3, r3
 8006dd2:	693a      	ldr	r2, [r7, #16]
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	08db      	lsrs	r3, r3, #3
 8006dde:	f003 0201 	and.w	r2, r3, #1
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	fa02 f303 	lsl.w	r3, r2, r3
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	693a      	ldr	r2, [r7, #16]
 8006df2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	f003 0303 	and.w	r3, r3, #3
 8006dfc:	2b03      	cmp	r3, #3
 8006dfe:	d017      	beq.n	8006e30 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	005b      	lsls	r3, r3, #1
 8006e0a:	2203      	movs	r2, #3
 8006e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e10:	43db      	mvns	r3, r3
 8006e12:	693a      	ldr	r2, [r7, #16]
 8006e14:	4013      	ands	r3, r2
 8006e16:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	689a      	ldr	r2, [r3, #8]
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	005b      	lsls	r3, r3, #1
 8006e20:	fa02 f303 	lsl.w	r3, r2, r3
 8006e24:	693a      	ldr	r2, [r7, #16]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	693a      	ldr	r2, [r7, #16]
 8006e2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	f003 0303 	and.w	r3, r3, #3
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	d123      	bne.n	8006e84 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	08da      	lsrs	r2, r3, #3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	3208      	adds	r2, #8
 8006e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e48:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	f003 0307 	and.w	r3, r3, #7
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	220f      	movs	r2, #15
 8006e54:	fa02 f303 	lsl.w	r3, r2, r3
 8006e58:	43db      	mvns	r3, r3
 8006e5a:	693a      	ldr	r2, [r7, #16]
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	691a      	ldr	r2, [r3, #16]
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	f003 0307 	and.w	r3, r3, #7
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e70:	693a      	ldr	r2, [r7, #16]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	08da      	lsrs	r2, r3, #3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	3208      	adds	r2, #8
 8006e7e:	6939      	ldr	r1, [r7, #16]
 8006e80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	005b      	lsls	r3, r3, #1
 8006e8e:	2203      	movs	r2, #3
 8006e90:	fa02 f303 	lsl.w	r3, r2, r3
 8006e94:	43db      	mvns	r3, r3
 8006e96:	693a      	ldr	r2, [r7, #16]
 8006e98:	4013      	ands	r3, r2
 8006e9a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	f003 0203 	and.w	r2, r3, #3
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	005b      	lsls	r3, r3, #1
 8006ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8006eac:	693a      	ldr	r2, [r7, #16]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	f000 80ac 	beq.w	800701e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ec6:	4b5f      	ldr	r3, [pc, #380]	; (8007044 <HAL_GPIO_Init+0x330>)
 8006ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eca:	4a5e      	ldr	r2, [pc, #376]	; (8007044 <HAL_GPIO_Init+0x330>)
 8006ecc:	f043 0301 	orr.w	r3, r3, #1
 8006ed0:	6613      	str	r3, [r2, #96]	; 0x60
 8006ed2:	4b5c      	ldr	r3, [pc, #368]	; (8007044 <HAL_GPIO_Init+0x330>)
 8006ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ed6:	f003 0301 	and.w	r3, r3, #1
 8006eda:	60bb      	str	r3, [r7, #8]
 8006edc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006ede:	4a5a      	ldr	r2, [pc, #360]	; (8007048 <HAL_GPIO_Init+0x334>)
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	089b      	lsrs	r3, r3, #2
 8006ee4:	3302      	adds	r3, #2
 8006ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006eea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	f003 0303 	and.w	r3, r3, #3
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	220f      	movs	r2, #15
 8006ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8006efa:	43db      	mvns	r3, r3
 8006efc:	693a      	ldr	r2, [r7, #16]
 8006efe:	4013      	ands	r3, r2
 8006f00:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006f08:	d025      	beq.n	8006f56 <HAL_GPIO_Init+0x242>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a4f      	ldr	r2, [pc, #316]	; (800704c <HAL_GPIO_Init+0x338>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d01f      	beq.n	8006f52 <HAL_GPIO_Init+0x23e>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a4e      	ldr	r2, [pc, #312]	; (8007050 <HAL_GPIO_Init+0x33c>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d019      	beq.n	8006f4e <HAL_GPIO_Init+0x23a>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a4d      	ldr	r2, [pc, #308]	; (8007054 <HAL_GPIO_Init+0x340>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d013      	beq.n	8006f4a <HAL_GPIO_Init+0x236>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a4c      	ldr	r2, [pc, #304]	; (8007058 <HAL_GPIO_Init+0x344>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d00d      	beq.n	8006f46 <HAL_GPIO_Init+0x232>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a4b      	ldr	r2, [pc, #300]	; (800705c <HAL_GPIO_Init+0x348>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d007      	beq.n	8006f42 <HAL_GPIO_Init+0x22e>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4a4a      	ldr	r2, [pc, #296]	; (8007060 <HAL_GPIO_Init+0x34c>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d101      	bne.n	8006f3e <HAL_GPIO_Init+0x22a>
 8006f3a:	2306      	movs	r3, #6
 8006f3c:	e00c      	b.n	8006f58 <HAL_GPIO_Init+0x244>
 8006f3e:	2307      	movs	r3, #7
 8006f40:	e00a      	b.n	8006f58 <HAL_GPIO_Init+0x244>
 8006f42:	2305      	movs	r3, #5
 8006f44:	e008      	b.n	8006f58 <HAL_GPIO_Init+0x244>
 8006f46:	2304      	movs	r3, #4
 8006f48:	e006      	b.n	8006f58 <HAL_GPIO_Init+0x244>
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	e004      	b.n	8006f58 <HAL_GPIO_Init+0x244>
 8006f4e:	2302      	movs	r3, #2
 8006f50:	e002      	b.n	8006f58 <HAL_GPIO_Init+0x244>
 8006f52:	2301      	movs	r3, #1
 8006f54:	e000      	b.n	8006f58 <HAL_GPIO_Init+0x244>
 8006f56:	2300      	movs	r3, #0
 8006f58:	697a      	ldr	r2, [r7, #20]
 8006f5a:	f002 0203 	and.w	r2, r2, #3
 8006f5e:	0092      	lsls	r2, r2, #2
 8006f60:	4093      	lsls	r3, r2
 8006f62:	693a      	ldr	r2, [r7, #16]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006f68:	4937      	ldr	r1, [pc, #220]	; (8007048 <HAL_GPIO_Init+0x334>)
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	089b      	lsrs	r3, r3, #2
 8006f6e:	3302      	adds	r3, #2
 8006f70:	693a      	ldr	r2, [r7, #16]
 8006f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006f76:	4b3b      	ldr	r3, [pc, #236]	; (8007064 <HAL_GPIO_Init+0x350>)
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	43db      	mvns	r3, r3
 8006f80:	693a      	ldr	r2, [r7, #16]
 8006f82:	4013      	ands	r3, r2
 8006f84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d003      	beq.n	8006f9a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8006f92:	693a      	ldr	r2, [r7, #16]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006f9a:	4a32      	ldr	r2, [pc, #200]	; (8007064 <HAL_GPIO_Init+0x350>)
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006fa0:	4b30      	ldr	r3, [pc, #192]	; (8007064 <HAL_GPIO_Init+0x350>)
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	43db      	mvns	r3, r3
 8006faa:	693a      	ldr	r2, [r7, #16]
 8006fac:	4013      	ands	r3, r2
 8006fae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d003      	beq.n	8006fc4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8006fbc:	693a      	ldr	r2, [r7, #16]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006fc4:	4a27      	ldr	r2, [pc, #156]	; (8007064 <HAL_GPIO_Init+0x350>)
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006fca:	4b26      	ldr	r3, [pc, #152]	; (8007064 <HAL_GPIO_Init+0x350>)
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	43db      	mvns	r3, r3
 8006fd4:	693a      	ldr	r2, [r7, #16]
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d003      	beq.n	8006fee <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8006fe6:	693a      	ldr	r2, [r7, #16]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006fee:	4a1d      	ldr	r2, [pc, #116]	; (8007064 <HAL_GPIO_Init+0x350>)
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006ff4:	4b1b      	ldr	r3, [pc, #108]	; (8007064 <HAL_GPIO_Init+0x350>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	43db      	mvns	r3, r3
 8006ffe:	693a      	ldr	r2, [r7, #16]
 8007000:	4013      	ands	r3, r2
 8007002:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800700c:	2b00      	cmp	r3, #0
 800700e:	d003      	beq.n	8007018 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	4313      	orrs	r3, r2
 8007016:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007018:	4a12      	ldr	r2, [pc, #72]	; (8007064 <HAL_GPIO_Init+0x350>)
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	3301      	adds	r3, #1
 8007022:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	fa22 f303 	lsr.w	r3, r2, r3
 800702e:	2b00      	cmp	r3, #0
 8007030:	f47f ae78 	bne.w	8006d24 <HAL_GPIO_Init+0x10>
  }
}
 8007034:	bf00      	nop
 8007036:	bf00      	nop
 8007038:	371c      	adds	r7, #28
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	40021000 	.word	0x40021000
 8007048:	40010000 	.word	0x40010000
 800704c:	48000400 	.word	0x48000400
 8007050:	48000800 	.word	0x48000800
 8007054:	48000c00 	.word	0x48000c00
 8007058:	48001000 	.word	0x48001000
 800705c:	48001400 	.word	0x48001400
 8007060:	48001800 	.word	0x48001800
 8007064:	40010400 	.word	0x40010400

08007068 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007068:	b480      	push	{r7}
 800706a:	b085      	sub	sp, #20
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	460b      	mov	r3, r1
 8007072:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	691a      	ldr	r2, [r3, #16]
 8007078:	887b      	ldrh	r3, [r7, #2]
 800707a:	4013      	ands	r3, r2
 800707c:	2b00      	cmp	r3, #0
 800707e:	d002      	beq.n	8007086 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007080:	2301      	movs	r3, #1
 8007082:	73fb      	strb	r3, [r7, #15]
 8007084:	e001      	b.n	800708a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007086:	2300      	movs	r3, #0
 8007088:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800708a:	7bfb      	ldrb	r3, [r7, #15]
}
 800708c:	4618      	mov	r0, r3
 800708e:	3714      	adds	r7, #20
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	460b      	mov	r3, r1
 80070a2:	807b      	strh	r3, [r7, #2]
 80070a4:	4613      	mov	r3, r2
 80070a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80070a8:	787b      	ldrb	r3, [r7, #1]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d003      	beq.n	80070b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80070ae:	887a      	ldrh	r2, [r7, #2]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80070b4:	e002      	b.n	80070bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80070b6:	887a      	ldrh	r2, [r7, #2]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80070bc:	bf00      	nop
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b085      	sub	sp, #20
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	460b      	mov	r3, r1
 80070d2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	695b      	ldr	r3, [r3, #20]
 80070d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80070da:	887a      	ldrh	r2, [r7, #2]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	4013      	ands	r3, r2
 80070e0:	041a      	lsls	r2, r3, #16
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	43d9      	mvns	r1, r3
 80070e6:	887b      	ldrh	r3, [r7, #2]
 80070e8:	400b      	ands	r3, r1
 80070ea:	431a      	orrs	r2, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	619a      	str	r2, [r3, #24]
}
 80070f0:	bf00      	nop
 80070f2:	3714      	adds	r7, #20
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b082      	sub	sp, #8
 8007100:	af00      	add	r7, sp, #0
 8007102:	4603      	mov	r3, r0
 8007104:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007106:	4b08      	ldr	r3, [pc, #32]	; (8007128 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007108:	695a      	ldr	r2, [r3, #20]
 800710a:	88fb      	ldrh	r3, [r7, #6]
 800710c:	4013      	ands	r3, r2
 800710e:	2b00      	cmp	r3, #0
 8007110:	d006      	beq.n	8007120 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007112:	4a05      	ldr	r2, [pc, #20]	; (8007128 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007114:	88fb      	ldrh	r3, [r7, #6]
 8007116:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007118:	88fb      	ldrh	r3, [r7, #6]
 800711a:	4618      	mov	r0, r3
 800711c:	f7fd faf4 	bl	8004708 <HAL_GPIO_EXTI_Callback>
  }
}
 8007120:	bf00      	nop
 8007122:	3708      	adds	r7, #8
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}
 8007128:	40010400 	.word	0x40010400

0800712c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d101      	bne.n	800713e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e081      	b.n	8007242 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007144:	b2db      	uxtb	r3, r3
 8007146:	2b00      	cmp	r3, #0
 8007148:	d106      	bne.n	8007158 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7fd ff8e 	bl	8005074 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2224      	movs	r2, #36	; 0x24
 800715c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f022 0201 	bic.w	r2, r2, #1
 800716e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	685a      	ldr	r2, [r3, #4]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800717c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	689a      	ldr	r2, [r3, #8]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800718c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	2b01      	cmp	r3, #1
 8007194:	d107      	bne.n	80071a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	689a      	ldr	r2, [r3, #8]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80071a2:	609a      	str	r2, [r3, #8]
 80071a4:	e006      	b.n	80071b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	689a      	ldr	r2, [r3, #8]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80071b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	d104      	bne.n	80071c6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	6812      	ldr	r2, [r2, #0]
 80071d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80071d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68da      	ldr	r2, [r3, #12]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80071e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	691a      	ldr	r2, [r3, #16]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	695b      	ldr	r3, [r3, #20]
 80071f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	699b      	ldr	r3, [r3, #24]
 80071fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	430a      	orrs	r2, r1
 8007202:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	69d9      	ldr	r1, [r3, #28]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6a1a      	ldr	r2, [r3, #32]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	430a      	orrs	r2, r1
 8007212:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f042 0201 	orr.w	r2, r2, #1
 8007222:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2220      	movs	r2, #32
 800722e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3708      	adds	r7, #8
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
	...

0800724c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b088      	sub	sp, #32
 8007250:	af02      	add	r7, sp, #8
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	607a      	str	r2, [r7, #4]
 8007256:	461a      	mov	r2, r3
 8007258:	460b      	mov	r3, r1
 800725a:	817b      	strh	r3, [r7, #10]
 800725c:	4613      	mov	r3, r2
 800725e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007266:	b2db      	uxtb	r3, r3
 8007268:	2b20      	cmp	r3, #32
 800726a:	f040 80da 	bne.w	8007422 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007274:	2b01      	cmp	r3, #1
 8007276:	d101      	bne.n	800727c <HAL_I2C_Master_Transmit+0x30>
 8007278:	2302      	movs	r3, #2
 800727a:	e0d3      	b.n	8007424 <HAL_I2C_Master_Transmit+0x1d8>
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2201      	movs	r2, #1
 8007280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007284:	f7ff f94e 	bl	8006524 <HAL_GetTick>
 8007288:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	9300      	str	r3, [sp, #0]
 800728e:	2319      	movs	r3, #25
 8007290:	2201      	movs	r2, #1
 8007292:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007296:	68f8      	ldr	r0, [r7, #12]
 8007298:	f001 f8d1 	bl	800843e <I2C_WaitOnFlagUntilTimeout>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d001      	beq.n	80072a6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	e0be      	b.n	8007424 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2221      	movs	r2, #33	; 0x21
 80072aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2210      	movs	r2, #16
 80072b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	893a      	ldrh	r2, [r7, #8]
 80072c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2200      	movs	r2, #0
 80072cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	2bff      	cmp	r3, #255	; 0xff
 80072d6:	d90e      	bls.n	80072f6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	22ff      	movs	r2, #255	; 0xff
 80072dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072e2:	b2da      	uxtb	r2, r3
 80072e4:	8979      	ldrh	r1, [r7, #10]
 80072e6:	4b51      	ldr	r3, [pc, #324]	; (800742c <HAL_I2C_Master_Transmit+0x1e0>)
 80072e8:	9300      	str	r3, [sp, #0]
 80072ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f001 fa4e 	bl	8008790 <I2C_TransferConfig>
 80072f4:	e06c      	b.n	80073d0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072fa:	b29a      	uxth	r2, r3
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007304:	b2da      	uxtb	r2, r3
 8007306:	8979      	ldrh	r1, [r7, #10]
 8007308:	4b48      	ldr	r3, [pc, #288]	; (800742c <HAL_I2C_Master_Transmit+0x1e0>)
 800730a:	9300      	str	r3, [sp, #0]
 800730c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f001 fa3d 	bl	8008790 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007316:	e05b      	b.n	80073d0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007318:	697a      	ldr	r2, [r7, #20]
 800731a:	6a39      	ldr	r1, [r7, #32]
 800731c:	68f8      	ldr	r0, [r7, #12]
 800731e:	f001 f8ce 	bl	80084be <I2C_WaitOnTXISFlagUntilTimeout>
 8007322:	4603      	mov	r3, r0
 8007324:	2b00      	cmp	r3, #0
 8007326:	d001      	beq.n	800732c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	e07b      	b.n	8007424 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007330:	781a      	ldrb	r2, [r3, #0]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733c:	1c5a      	adds	r2, r3, #1
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007346:	b29b      	uxth	r3, r3
 8007348:	3b01      	subs	r3, #1
 800734a:	b29a      	uxth	r2, r3
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007354:	3b01      	subs	r3, #1
 8007356:	b29a      	uxth	r2, r3
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007360:	b29b      	uxth	r3, r3
 8007362:	2b00      	cmp	r3, #0
 8007364:	d034      	beq.n	80073d0 <HAL_I2C_Master_Transmit+0x184>
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800736a:	2b00      	cmp	r3, #0
 800736c:	d130      	bne.n	80073d0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	9300      	str	r3, [sp, #0]
 8007372:	6a3b      	ldr	r3, [r7, #32]
 8007374:	2200      	movs	r2, #0
 8007376:	2180      	movs	r1, #128	; 0x80
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	f001 f860 	bl	800843e <I2C_WaitOnFlagUntilTimeout>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d001      	beq.n	8007388 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	e04d      	b.n	8007424 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800738c:	b29b      	uxth	r3, r3
 800738e:	2bff      	cmp	r3, #255	; 0xff
 8007390:	d90e      	bls.n	80073b0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	22ff      	movs	r2, #255	; 0xff
 8007396:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800739c:	b2da      	uxtb	r2, r3
 800739e:	8979      	ldrh	r1, [r7, #10]
 80073a0:	2300      	movs	r3, #0
 80073a2:	9300      	str	r3, [sp, #0]
 80073a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f001 f9f1 	bl	8008790 <I2C_TransferConfig>
 80073ae:	e00f      	b.n	80073d0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073b4:	b29a      	uxth	r2, r3
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073be:	b2da      	uxtb	r2, r3
 80073c0:	8979      	ldrh	r1, [r7, #10]
 80073c2:	2300      	movs	r3, #0
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80073ca:	68f8      	ldr	r0, [r7, #12]
 80073cc:	f001 f9e0 	bl	8008790 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d19e      	bne.n	8007318 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073da:	697a      	ldr	r2, [r7, #20]
 80073dc:	6a39      	ldr	r1, [r7, #32]
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	f001 f8ad 	bl	800853e <I2C_WaitOnSTOPFlagUntilTimeout>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d001      	beq.n	80073ee <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	e01a      	b.n	8007424 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2220      	movs	r2, #32
 80073f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	6859      	ldr	r1, [r3, #4]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	4b0b      	ldr	r3, [pc, #44]	; (8007430 <HAL_I2C_Master_Transmit+0x1e4>)
 8007402:	400b      	ands	r3, r1
 8007404:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2220      	movs	r2, #32
 800740a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2200      	movs	r2, #0
 8007412:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2200      	movs	r2, #0
 800741a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800741e:	2300      	movs	r3, #0
 8007420:	e000      	b.n	8007424 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007422:	2302      	movs	r3, #2
  }
}
 8007424:	4618      	mov	r0, r3
 8007426:	3718      	adds	r7, #24
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}
 800742c:	80002000 	.word	0x80002000
 8007430:	fe00e800 	.word	0xfe00e800

08007434 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b088      	sub	sp, #32
 8007438:	af02      	add	r7, sp, #8
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	4608      	mov	r0, r1
 800743e:	4611      	mov	r1, r2
 8007440:	461a      	mov	r2, r3
 8007442:	4603      	mov	r3, r0
 8007444:	817b      	strh	r3, [r7, #10]
 8007446:	460b      	mov	r3, r1
 8007448:	813b      	strh	r3, [r7, #8]
 800744a:	4613      	mov	r3, r2
 800744c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007454:	b2db      	uxtb	r3, r3
 8007456:	2b20      	cmp	r3, #32
 8007458:	f040 80f9 	bne.w	800764e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800745c:	6a3b      	ldr	r3, [r7, #32]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d002      	beq.n	8007468 <HAL_I2C_Mem_Write+0x34>
 8007462:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007464:	2b00      	cmp	r3, #0
 8007466:	d105      	bne.n	8007474 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800746e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	e0ed      	b.n	8007650 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800747a:	2b01      	cmp	r3, #1
 800747c:	d101      	bne.n	8007482 <HAL_I2C_Mem_Write+0x4e>
 800747e:	2302      	movs	r3, #2
 8007480:	e0e6      	b.n	8007650 <HAL_I2C_Mem_Write+0x21c>
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2201      	movs	r2, #1
 8007486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800748a:	f7ff f84b 	bl	8006524 <HAL_GetTick>
 800748e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	9300      	str	r3, [sp, #0]
 8007494:	2319      	movs	r3, #25
 8007496:	2201      	movs	r2, #1
 8007498:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	f000 ffce 	bl	800843e <I2C_WaitOnFlagUntilTimeout>
 80074a2:	4603      	mov	r3, r0
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d001      	beq.n	80074ac <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	e0d1      	b.n	8007650 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2221      	movs	r2, #33	; 0x21
 80074b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2240      	movs	r2, #64	; 0x40
 80074b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6a3a      	ldr	r2, [r7, #32]
 80074c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80074cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80074d4:	88f8      	ldrh	r0, [r7, #6]
 80074d6:	893a      	ldrh	r2, [r7, #8]
 80074d8:	8979      	ldrh	r1, [r7, #10]
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	9301      	str	r3, [sp, #4]
 80074de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e0:	9300      	str	r3, [sp, #0]
 80074e2:	4603      	mov	r3, r0
 80074e4:	68f8      	ldr	r0, [r7, #12]
 80074e6:	f000 fb87 	bl	8007bf8 <I2C_RequestMemoryWrite>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d005      	beq.n	80074fc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	e0a9      	b.n	8007650 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007500:	b29b      	uxth	r3, r3
 8007502:	2bff      	cmp	r3, #255	; 0xff
 8007504:	d90e      	bls.n	8007524 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	22ff      	movs	r2, #255	; 0xff
 800750a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007510:	b2da      	uxtb	r2, r3
 8007512:	8979      	ldrh	r1, [r7, #10]
 8007514:	2300      	movs	r3, #0
 8007516:	9300      	str	r3, [sp, #0]
 8007518:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800751c:	68f8      	ldr	r0, [r7, #12]
 800751e:	f001 f937 	bl	8008790 <I2C_TransferConfig>
 8007522:	e00f      	b.n	8007544 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007528:	b29a      	uxth	r2, r3
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007532:	b2da      	uxtb	r2, r3
 8007534:	8979      	ldrh	r1, [r7, #10]
 8007536:	2300      	movs	r3, #0
 8007538:	9300      	str	r3, [sp, #0]
 800753a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800753e:	68f8      	ldr	r0, [r7, #12]
 8007540:	f001 f926 	bl	8008790 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007544:	697a      	ldr	r2, [r7, #20]
 8007546:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	f000 ffb8 	bl	80084be <I2C_WaitOnTXISFlagUntilTimeout>
 800754e:	4603      	mov	r3, r0
 8007550:	2b00      	cmp	r3, #0
 8007552:	d001      	beq.n	8007558 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	e07b      	b.n	8007650 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755c:	781a      	ldrb	r2, [r3, #0]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007568:	1c5a      	adds	r2, r3, #1
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007572:	b29b      	uxth	r3, r3
 8007574:	3b01      	subs	r3, #1
 8007576:	b29a      	uxth	r2, r3
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007580:	3b01      	subs	r3, #1
 8007582:	b29a      	uxth	r2, r3
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800758c:	b29b      	uxth	r3, r3
 800758e:	2b00      	cmp	r3, #0
 8007590:	d034      	beq.n	80075fc <HAL_I2C_Mem_Write+0x1c8>
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007596:	2b00      	cmp	r3, #0
 8007598:	d130      	bne.n	80075fc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	9300      	str	r3, [sp, #0]
 800759e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a0:	2200      	movs	r2, #0
 80075a2:	2180      	movs	r1, #128	; 0x80
 80075a4:	68f8      	ldr	r0, [r7, #12]
 80075a6:	f000 ff4a 	bl	800843e <I2C_WaitOnFlagUntilTimeout>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d001      	beq.n	80075b4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	e04d      	b.n	8007650 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	2bff      	cmp	r3, #255	; 0xff
 80075bc:	d90e      	bls.n	80075dc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	22ff      	movs	r2, #255	; 0xff
 80075c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075c8:	b2da      	uxtb	r2, r3
 80075ca:	8979      	ldrh	r1, [r7, #10]
 80075cc:	2300      	movs	r3, #0
 80075ce:	9300      	str	r3, [sp, #0]
 80075d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	f001 f8db 	bl	8008790 <I2C_TransferConfig>
 80075da:	e00f      	b.n	80075fc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075e0:	b29a      	uxth	r2, r3
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075ea:	b2da      	uxtb	r2, r3
 80075ec:	8979      	ldrh	r1, [r7, #10]
 80075ee:	2300      	movs	r3, #0
 80075f0:	9300      	str	r3, [sp, #0]
 80075f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f001 f8ca 	bl	8008790 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007600:	b29b      	uxth	r3, r3
 8007602:	2b00      	cmp	r3, #0
 8007604:	d19e      	bne.n	8007544 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007606:	697a      	ldr	r2, [r7, #20]
 8007608:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f000 ff97 	bl	800853e <I2C_WaitOnSTOPFlagUntilTimeout>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d001      	beq.n	800761a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	e01a      	b.n	8007650 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2220      	movs	r2, #32
 8007620:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	6859      	ldr	r1, [r3, #4]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	4b0a      	ldr	r3, [pc, #40]	; (8007658 <HAL_I2C_Mem_Write+0x224>)
 800762e:	400b      	ands	r3, r1
 8007630:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2220      	movs	r2, #32
 8007636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2200      	movs	r2, #0
 8007646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800764a:	2300      	movs	r3, #0
 800764c:	e000      	b.n	8007650 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800764e:	2302      	movs	r3, #2
  }
}
 8007650:	4618      	mov	r0, r3
 8007652:	3718      	adds	r7, #24
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}
 8007658:	fe00e800 	.word	0xfe00e800

0800765c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b088      	sub	sp, #32
 8007660:	af02      	add	r7, sp, #8
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	4608      	mov	r0, r1
 8007666:	4611      	mov	r1, r2
 8007668:	461a      	mov	r2, r3
 800766a:	4603      	mov	r3, r0
 800766c:	817b      	strh	r3, [r7, #10]
 800766e:	460b      	mov	r3, r1
 8007670:	813b      	strh	r3, [r7, #8]
 8007672:	4613      	mov	r3, r2
 8007674:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800767c:	b2db      	uxtb	r3, r3
 800767e:	2b20      	cmp	r3, #32
 8007680:	f040 80fd 	bne.w	800787e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007684:	6a3b      	ldr	r3, [r7, #32]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d002      	beq.n	8007690 <HAL_I2C_Mem_Read+0x34>
 800768a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800768c:	2b00      	cmp	r3, #0
 800768e:	d105      	bne.n	800769c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007696:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	e0f1      	b.n	8007880 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d101      	bne.n	80076aa <HAL_I2C_Mem_Read+0x4e>
 80076a6:	2302      	movs	r3, #2
 80076a8:	e0ea      	b.n	8007880 <HAL_I2C_Mem_Read+0x224>
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2201      	movs	r2, #1
 80076ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80076b2:	f7fe ff37 	bl	8006524 <HAL_GetTick>
 80076b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	9300      	str	r3, [sp, #0]
 80076bc:	2319      	movs	r3, #25
 80076be:	2201      	movs	r2, #1
 80076c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80076c4:	68f8      	ldr	r0, [r7, #12]
 80076c6:	f000 feba 	bl	800843e <I2C_WaitOnFlagUntilTimeout>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d001      	beq.n	80076d4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
 80076d2:	e0d5      	b.n	8007880 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2222      	movs	r2, #34	; 0x22
 80076d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2240      	movs	r2, #64	; 0x40
 80076e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2200      	movs	r2, #0
 80076e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6a3a      	ldr	r2, [r7, #32]
 80076ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80076f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2200      	movs	r2, #0
 80076fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80076fc:	88f8      	ldrh	r0, [r7, #6]
 80076fe:	893a      	ldrh	r2, [r7, #8]
 8007700:	8979      	ldrh	r1, [r7, #10]
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	9301      	str	r3, [sp, #4]
 8007706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007708:	9300      	str	r3, [sp, #0]
 800770a:	4603      	mov	r3, r0
 800770c:	68f8      	ldr	r0, [r7, #12]
 800770e:	f000 fac7 	bl	8007ca0 <I2C_RequestMemoryRead>
 8007712:	4603      	mov	r3, r0
 8007714:	2b00      	cmp	r3, #0
 8007716:	d005      	beq.n	8007724 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2200      	movs	r2, #0
 800771c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	e0ad      	b.n	8007880 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007728:	b29b      	uxth	r3, r3
 800772a:	2bff      	cmp	r3, #255	; 0xff
 800772c:	d90e      	bls.n	800774c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	22ff      	movs	r2, #255	; 0xff
 8007732:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007738:	b2da      	uxtb	r2, r3
 800773a:	8979      	ldrh	r1, [r7, #10]
 800773c:	4b52      	ldr	r3, [pc, #328]	; (8007888 <HAL_I2C_Mem_Read+0x22c>)
 800773e:	9300      	str	r3, [sp, #0]
 8007740:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007744:	68f8      	ldr	r0, [r7, #12]
 8007746:	f001 f823 	bl	8008790 <I2C_TransferConfig>
 800774a:	e00f      	b.n	800776c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007750:	b29a      	uxth	r2, r3
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800775a:	b2da      	uxtb	r2, r3
 800775c:	8979      	ldrh	r1, [r7, #10]
 800775e:	4b4a      	ldr	r3, [pc, #296]	; (8007888 <HAL_I2C_Mem_Read+0x22c>)
 8007760:	9300      	str	r3, [sp, #0]
 8007762:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007766:	68f8      	ldr	r0, [r7, #12]
 8007768:	f001 f812 	bl	8008790 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	9300      	str	r3, [sp, #0]
 8007770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007772:	2200      	movs	r2, #0
 8007774:	2104      	movs	r1, #4
 8007776:	68f8      	ldr	r0, [r7, #12]
 8007778:	f000 fe61 	bl	800843e <I2C_WaitOnFlagUntilTimeout>
 800777c:	4603      	mov	r3, r0
 800777e:	2b00      	cmp	r3, #0
 8007780:	d001      	beq.n	8007786 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	e07c      	b.n	8007880 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007790:	b2d2      	uxtb	r2, r2
 8007792:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007798:	1c5a      	adds	r2, r3, #1
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077a2:	3b01      	subs	r3, #1
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	3b01      	subs	r3, #1
 80077b2:	b29a      	uxth	r2, r3
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077bc:	b29b      	uxth	r3, r3
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d034      	beq.n	800782c <HAL_I2C_Mem_Read+0x1d0>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d130      	bne.n	800782c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	9300      	str	r3, [sp, #0]
 80077ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d0:	2200      	movs	r2, #0
 80077d2:	2180      	movs	r1, #128	; 0x80
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	f000 fe32 	bl	800843e <I2C_WaitOnFlagUntilTimeout>
 80077da:	4603      	mov	r3, r0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d001      	beq.n	80077e4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	e04d      	b.n	8007880 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	2bff      	cmp	r3, #255	; 0xff
 80077ec:	d90e      	bls.n	800780c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	22ff      	movs	r2, #255	; 0xff
 80077f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077f8:	b2da      	uxtb	r2, r3
 80077fa:	8979      	ldrh	r1, [r7, #10]
 80077fc:	2300      	movs	r3, #0
 80077fe:	9300      	str	r3, [sp, #0]
 8007800:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007804:	68f8      	ldr	r0, [r7, #12]
 8007806:	f000 ffc3 	bl	8008790 <I2C_TransferConfig>
 800780a:	e00f      	b.n	800782c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007810:	b29a      	uxth	r2, r3
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800781a:	b2da      	uxtb	r2, r3
 800781c:	8979      	ldrh	r1, [r7, #10]
 800781e:	2300      	movs	r3, #0
 8007820:	9300      	str	r3, [sp, #0]
 8007822:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f000 ffb2 	bl	8008790 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007830:	b29b      	uxth	r3, r3
 8007832:	2b00      	cmp	r3, #0
 8007834:	d19a      	bne.n	800776c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007836:	697a      	ldr	r2, [r7, #20]
 8007838:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800783a:	68f8      	ldr	r0, [r7, #12]
 800783c:	f000 fe7f 	bl	800853e <I2C_WaitOnSTOPFlagUntilTimeout>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d001      	beq.n	800784a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e01a      	b.n	8007880 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2220      	movs	r2, #32
 8007850:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	6859      	ldr	r1, [r3, #4]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	4b0b      	ldr	r3, [pc, #44]	; (800788c <HAL_I2C_Mem_Read+0x230>)
 800785e:	400b      	ands	r3, r1
 8007860:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2220      	movs	r2, #32
 8007866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2200      	movs	r2, #0
 8007876:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800787a:	2300      	movs	r3, #0
 800787c:	e000      	b.n	8007880 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800787e:	2302      	movs	r3, #2
  }
}
 8007880:	4618      	mov	r0, r3
 8007882:	3718      	adds	r7, #24
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}
 8007888:	80002400 	.word	0x80002400
 800788c:	fe00e800 	.word	0xfe00e800

08007890 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	699b      	ldr	r3, [r3, #24]
 800789e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d005      	beq.n	80078bc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078b4:	68ba      	ldr	r2, [r7, #8]
 80078b6:	68f9      	ldr	r1, [r7, #12]
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	4798      	blx	r3
  }
}
 80078bc:	bf00      	nop
 80078be:	3710      	adds	r7, #16
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b086      	sub	sp, #24
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	699b      	ldr	r3, [r3, #24]
 80078d2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	0a1b      	lsrs	r3, r3, #8
 80078e0:	f003 0301 	and.w	r3, r3, #1
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d010      	beq.n	800790a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	09db      	lsrs	r3, r3, #7
 80078ec:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d00a      	beq.n	800790a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078f8:	f043 0201 	orr.w	r2, r3, #1
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007908:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	0a9b      	lsrs	r3, r3, #10
 800790e:	f003 0301 	and.w	r3, r3, #1
 8007912:	2b00      	cmp	r3, #0
 8007914:	d010      	beq.n	8007938 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	09db      	lsrs	r3, r3, #7
 800791a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00a      	beq.n	8007938 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007926:	f043 0208 	orr.w	r2, r3, #8
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007936:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	0a5b      	lsrs	r3, r3, #9
 800793c:	f003 0301 	and.w	r3, r3, #1
 8007940:	2b00      	cmp	r3, #0
 8007942:	d010      	beq.n	8007966 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	09db      	lsrs	r3, r3, #7
 8007948:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800794c:	2b00      	cmp	r3, #0
 800794e:	d00a      	beq.n	8007966 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007954:	f043 0202 	orr.w	r2, r3, #2
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007964:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800796a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f003 030b 	and.w	r3, r3, #11
 8007972:	2b00      	cmp	r3, #0
 8007974:	d003      	beq.n	800797e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8007976:	68f9      	ldr	r1, [r7, #12]
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 fc27 	bl	80081cc <I2C_ITError>
  }
}
 800797e:	bf00      	nop
 8007980:	3718      	adds	r7, #24
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007986:	b480      	push	{r7}
 8007988:	b083      	sub	sp, #12
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800798e:	bf00      	nop
 8007990:	370c      	adds	r7, #12
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr

0800799a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800799a:	b480      	push	{r7}
 800799c:	b083      	sub	sp, #12
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80079a2:	bf00      	nop
 80079a4:	370c      	adds	r7, #12
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr

080079ae <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80079ae:	b480      	push	{r7}
 80079b0:	b083      	sub	sp, #12
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
 80079b6:	460b      	mov	r3, r1
 80079b8:	70fb      	strb	r3, [r7, #3]
 80079ba:	4613      	mov	r3, r2
 80079bc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80079be:	bf00      	nop
 80079c0:	370c      	adds	r7, #12
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr

080079ca <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80079ca:	b480      	push	{r7}
 80079cc:	b083      	sub	sp, #12
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80079d2:	bf00      	nop
 80079d4:	370c      	adds	r7, #12
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr

080079de <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80079de:	b480      	push	{r7}
 80079e0:	b083      	sub	sp, #12
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80079e6:	bf00      	nop
 80079e8:	370c      	adds	r7, #12
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr

080079f2 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80079f2:	b580      	push	{r7, lr}
 80079f4:	b086      	sub	sp, #24
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	60f8      	str	r0, [r7, #12]
 80079fa:	60b9      	str	r1, [r7, #8]
 80079fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a02:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d101      	bne.n	8007a16 <I2C_Slave_ISR_IT+0x24>
 8007a12:	2302      	movs	r3, #2
 8007a14:	e0ec      	b.n	8007bf0 <I2C_Slave_ISR_IT+0x1fe>
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2201      	movs	r2, #1
 8007a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	095b      	lsrs	r3, r3, #5
 8007a22:	f003 0301 	and.w	r3, r3, #1
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d009      	beq.n	8007a3e <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	095b      	lsrs	r3, r3, #5
 8007a2e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d003      	beq.n	8007a3e <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007a36:	6939      	ldr	r1, [r7, #16]
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f000 fa67 	bl	8007f0c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	091b      	lsrs	r3, r3, #4
 8007a42:	f003 0301 	and.w	r3, r3, #1
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d04d      	beq.n	8007ae6 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	091b      	lsrs	r3, r3, #4
 8007a4e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d047      	beq.n	8007ae6 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d128      	bne.n	8007ab2 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	2b28      	cmp	r3, #40	; 0x28
 8007a6a:	d108      	bne.n	8007a7e <I2C_Slave_ISR_IT+0x8c>
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a72:	d104      	bne.n	8007a7e <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007a74:	6939      	ldr	r1, [r7, #16]
 8007a76:	68f8      	ldr	r0, [r7, #12]
 8007a78:	f000 fb52 	bl	8008120 <I2C_ITListenCplt>
 8007a7c:	e032      	b.n	8007ae4 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	2b29      	cmp	r3, #41	; 0x29
 8007a88:	d10e      	bne.n	8007aa8 <I2C_Slave_ISR_IT+0xb6>
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007a90:	d00a      	beq.n	8007aa8 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2210      	movs	r2, #16
 8007a98:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007a9a:	68f8      	ldr	r0, [r7, #12]
 8007a9c:	f000 fc8d 	bl	80083ba <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007aa0:	68f8      	ldr	r0, [r7, #12]
 8007aa2:	f000 f9d5 	bl	8007e50 <I2C_ITSlaveSeqCplt>
 8007aa6:	e01d      	b.n	8007ae4 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2210      	movs	r2, #16
 8007aae:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007ab0:	e096      	b.n	8007be0 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2210      	movs	r2, #16
 8007ab8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007abe:	f043 0204 	orr.w	r2, r3, #4
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d004      	beq.n	8007ad6 <I2C_Slave_ISR_IT+0xe4>
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007ad2:	f040 8085 	bne.w	8007be0 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ada:	4619      	mov	r1, r3
 8007adc:	68f8      	ldr	r0, [r7, #12]
 8007ade:	f000 fb75 	bl	80081cc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007ae2:	e07d      	b.n	8007be0 <I2C_Slave_ISR_IT+0x1ee>
 8007ae4:	e07c      	b.n	8007be0 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	089b      	lsrs	r3, r3, #2
 8007aea:	f003 0301 	and.w	r3, r3, #1
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d030      	beq.n	8007b54 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	089b      	lsrs	r3, r3, #2
 8007af6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d02a      	beq.n	8007b54 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d018      	beq.n	8007b3a <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b12:	b2d2      	uxtb	r2, r2
 8007b14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1a:	1c5a      	adds	r2, r3, #1
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b24:	3b01      	subs	r3, #1
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	3b01      	subs	r3, #1
 8007b34:	b29a      	uxth	r2, r3
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d14f      	bne.n	8007be4 <I2C_Slave_ISR_IT+0x1f2>
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007b4a:	d04b      	beq.n	8007be4 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007b4c:	68f8      	ldr	r0, [r7, #12]
 8007b4e:	f000 f97f 	bl	8007e50 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007b52:	e047      	b.n	8007be4 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	08db      	lsrs	r3, r3, #3
 8007b58:	f003 0301 	and.w	r3, r3, #1
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00a      	beq.n	8007b76 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	08db      	lsrs	r3, r3, #3
 8007b64:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d004      	beq.n	8007b76 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007b6c:	6939      	ldr	r1, [r7, #16]
 8007b6e:	68f8      	ldr	r0, [r7, #12]
 8007b70:	f000 f8ea 	bl	8007d48 <I2C_ITAddrCplt>
 8007b74:	e037      	b.n	8007be6 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	085b      	lsrs	r3, r3, #1
 8007b7a:	f003 0301 	and.w	r3, r3, #1
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d031      	beq.n	8007be6 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	085b      	lsrs	r3, r3, #1
 8007b86:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d02b      	beq.n	8007be6 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d018      	beq.n	8007bca <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9c:	781a      	ldrb	r2, [r3, #0]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba8:	1c5a      	adds	r2, r3, #1
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	3b01      	subs	r3, #1
 8007bb6:	b29a      	uxth	r2, r3
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bc0:	3b01      	subs	r3, #1
 8007bc2:	b29a      	uxth	r2, r3
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	851a      	strh	r2, [r3, #40]	; 0x28
 8007bc8:	e00d      	b.n	8007be6 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007bd0:	d002      	beq.n	8007bd8 <I2C_Slave_ISR_IT+0x1e6>
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d106      	bne.n	8007be6 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f000 f939 	bl	8007e50 <I2C_ITSlaveSeqCplt>
 8007bde:	e002      	b.n	8007be6 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8007be0:	bf00      	nop
 8007be2:	e000      	b.n	8007be6 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8007be4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2200      	movs	r2, #0
 8007bea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3718      	adds	r7, #24
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b086      	sub	sp, #24
 8007bfc:	af02      	add	r7, sp, #8
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	4608      	mov	r0, r1
 8007c02:	4611      	mov	r1, r2
 8007c04:	461a      	mov	r2, r3
 8007c06:	4603      	mov	r3, r0
 8007c08:	817b      	strh	r3, [r7, #10]
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	813b      	strh	r3, [r7, #8]
 8007c0e:	4613      	mov	r3, r2
 8007c10:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007c12:	88fb      	ldrh	r3, [r7, #6]
 8007c14:	b2da      	uxtb	r2, r3
 8007c16:	8979      	ldrh	r1, [r7, #10]
 8007c18:	4b20      	ldr	r3, [pc, #128]	; (8007c9c <I2C_RequestMemoryWrite+0xa4>)
 8007c1a:	9300      	str	r3, [sp, #0]
 8007c1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c20:	68f8      	ldr	r0, [r7, #12]
 8007c22:	f000 fdb5 	bl	8008790 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c26:	69fa      	ldr	r2, [r7, #28]
 8007c28:	69b9      	ldr	r1, [r7, #24]
 8007c2a:	68f8      	ldr	r0, [r7, #12]
 8007c2c:	f000 fc47 	bl	80084be <I2C_WaitOnTXISFlagUntilTimeout>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d001      	beq.n	8007c3a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	e02c      	b.n	8007c94 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007c3a:	88fb      	ldrh	r3, [r7, #6]
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d105      	bne.n	8007c4c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007c40:	893b      	ldrh	r3, [r7, #8]
 8007c42:	b2da      	uxtb	r2, r3
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	629a      	str	r2, [r3, #40]	; 0x28
 8007c4a:	e015      	b.n	8007c78 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007c4c:	893b      	ldrh	r3, [r7, #8]
 8007c4e:	0a1b      	lsrs	r3, r3, #8
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	b2da      	uxtb	r2, r3
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c5a:	69fa      	ldr	r2, [r7, #28]
 8007c5c:	69b9      	ldr	r1, [r7, #24]
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	f000 fc2d 	bl	80084be <I2C_WaitOnTXISFlagUntilTimeout>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d001      	beq.n	8007c6e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e012      	b.n	8007c94 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007c6e:	893b      	ldrh	r3, [r7, #8]
 8007c70:	b2da      	uxtb	r2, r3
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	9300      	str	r3, [sp, #0]
 8007c7c:	69bb      	ldr	r3, [r7, #24]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	2180      	movs	r1, #128	; 0x80
 8007c82:	68f8      	ldr	r0, [r7, #12]
 8007c84:	f000 fbdb 	bl	800843e <I2C_WaitOnFlagUntilTimeout>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d001      	beq.n	8007c92 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e000      	b.n	8007c94 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007c92:	2300      	movs	r3, #0
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3710      	adds	r7, #16
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	80002000 	.word	0x80002000

08007ca0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b086      	sub	sp, #24
 8007ca4:	af02      	add	r7, sp, #8
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	4608      	mov	r0, r1
 8007caa:	4611      	mov	r1, r2
 8007cac:	461a      	mov	r2, r3
 8007cae:	4603      	mov	r3, r0
 8007cb0:	817b      	strh	r3, [r7, #10]
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	813b      	strh	r3, [r7, #8]
 8007cb6:	4613      	mov	r3, r2
 8007cb8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007cba:	88fb      	ldrh	r3, [r7, #6]
 8007cbc:	b2da      	uxtb	r2, r3
 8007cbe:	8979      	ldrh	r1, [r7, #10]
 8007cc0:	4b20      	ldr	r3, [pc, #128]	; (8007d44 <I2C_RequestMemoryRead+0xa4>)
 8007cc2:	9300      	str	r3, [sp, #0]
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	68f8      	ldr	r0, [r7, #12]
 8007cc8:	f000 fd62 	bl	8008790 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ccc:	69fa      	ldr	r2, [r7, #28]
 8007cce:	69b9      	ldr	r1, [r7, #24]
 8007cd0:	68f8      	ldr	r0, [r7, #12]
 8007cd2:	f000 fbf4 	bl	80084be <I2C_WaitOnTXISFlagUntilTimeout>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d001      	beq.n	8007ce0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	e02c      	b.n	8007d3a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007ce0:	88fb      	ldrh	r3, [r7, #6]
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d105      	bne.n	8007cf2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007ce6:	893b      	ldrh	r3, [r7, #8]
 8007ce8:	b2da      	uxtb	r2, r3
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	629a      	str	r2, [r3, #40]	; 0x28
 8007cf0:	e015      	b.n	8007d1e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007cf2:	893b      	ldrh	r3, [r7, #8]
 8007cf4:	0a1b      	lsrs	r3, r3, #8
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	b2da      	uxtb	r2, r3
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d00:	69fa      	ldr	r2, [r7, #28]
 8007d02:	69b9      	ldr	r1, [r7, #24]
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	f000 fbda 	bl	80084be <I2C_WaitOnTXISFlagUntilTimeout>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d001      	beq.n	8007d14 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	e012      	b.n	8007d3a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007d14:	893b      	ldrh	r3, [r7, #8]
 8007d16:	b2da      	uxtb	r2, r3
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	9300      	str	r3, [sp, #0]
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	2200      	movs	r2, #0
 8007d26:	2140      	movs	r1, #64	; 0x40
 8007d28:	68f8      	ldr	r0, [r7, #12]
 8007d2a:	f000 fb88 	bl	800843e <I2C_WaitOnFlagUntilTimeout>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d001      	beq.n	8007d38 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	e000      	b.n	8007d3a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	80002000 	.word	0x80002000

08007d48 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007d5e:	2b28      	cmp	r3, #40	; 0x28
 8007d60:	d16a      	bne.n	8007e38 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	699b      	ldr	r3, [r3, #24]
 8007d68:	0c1b      	lsrs	r3, r3, #16
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	f003 0301 	and.w	r3, r3, #1
 8007d70:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	699b      	ldr	r3, [r3, #24]
 8007d78:	0c1b      	lsrs	r3, r3, #16
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007d80:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d8e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007d9c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	2b02      	cmp	r3, #2
 8007da4:	d138      	bne.n	8007e18 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8007da6:	897b      	ldrh	r3, [r7, #10]
 8007da8:	09db      	lsrs	r3, r3, #7
 8007daa:	b29a      	uxth	r2, r3
 8007dac:	89bb      	ldrh	r3, [r7, #12]
 8007dae:	4053      	eors	r3, r2
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	f003 0306 	and.w	r3, r3, #6
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d11c      	bne.n	8007df4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8007dba:	897b      	ldrh	r3, [r7, #10]
 8007dbc:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dc2:	1c5a      	adds	r2, r3, #1
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dcc:	2b02      	cmp	r3, #2
 8007dce:	d13b      	bne.n	8007e48 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2208      	movs	r2, #8
 8007ddc:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007de6:	89ba      	ldrh	r2, [r7, #12]
 8007de8:	7bfb      	ldrb	r3, [r7, #15]
 8007dea:	4619      	mov	r1, r3
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f7ff fdde 	bl	80079ae <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007df2:	e029      	b.n	8007e48 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8007df4:	893b      	ldrh	r3, [r7, #8]
 8007df6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007df8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 fcf9 	bl	80087f4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007e0a:	89ba      	ldrh	r2, [r7, #12]
 8007e0c:	7bfb      	ldrb	r3, [r7, #15]
 8007e0e:	4619      	mov	r1, r3
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f7ff fdcc 	bl	80079ae <HAL_I2C_AddrCallback>
}
 8007e16:	e017      	b.n	8007e48 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007e18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 fce9 	bl	80087f4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007e2a:	89ba      	ldrh	r2, [r7, #12]
 8007e2c:	7bfb      	ldrb	r3, [r7, #15]
 8007e2e:	4619      	mov	r1, r3
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f7ff fdbc 	bl	80079ae <HAL_I2C_AddrCallback>
}
 8007e36:	e007      	b.n	8007e48 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2208      	movs	r2, #8
 8007e3e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8007e48:	bf00      	nop
 8007e4a:	3710      	adds	r7, #16
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	0b9b      	lsrs	r3, r3, #14
 8007e6c:	f003 0301 	and.w	r3, r3, #1
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d008      	beq.n	8007e86 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007e82:	601a      	str	r2, [r3, #0]
 8007e84:	e00d      	b.n	8007ea2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	0bdb      	lsrs	r3, r3, #15
 8007e8a:	f003 0301 	and.w	r3, r3, #1
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d007      	beq.n	8007ea2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007ea0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	2b29      	cmp	r3, #41	; 0x29
 8007eac:	d112      	bne.n	8007ed4 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2228      	movs	r2, #40	; 0x28
 8007eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2221      	movs	r2, #33	; 0x21
 8007eba:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007ebc:	2101      	movs	r1, #1
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 fc98 	bl	80087f4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f7ff fd5a 	bl	8007986 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007ed2:	e017      	b.n	8007f04 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	2b2a      	cmp	r3, #42	; 0x2a
 8007ede:	d111      	bne.n	8007f04 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2228      	movs	r2, #40	; 0x28
 8007ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2222      	movs	r2, #34	; 0x22
 8007eec:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007eee:	2102      	movs	r1, #2
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 fc7f 	bl	80087f4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f7ff fd4b 	bl	800799a <HAL_I2C_SlaveRxCpltCallback>
}
 8007f04:	bf00      	nop
 8007f06:	3710      	adds	r7, #16
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b086      	sub	sp, #24
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f28:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2220      	movs	r2, #32
 8007f30:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007f32:	7bfb      	ldrb	r3, [r7, #15]
 8007f34:	2b21      	cmp	r3, #33	; 0x21
 8007f36:	d002      	beq.n	8007f3e <I2C_ITSlaveCplt+0x32>
 8007f38:	7bfb      	ldrb	r3, [r7, #15]
 8007f3a:	2b29      	cmp	r3, #41	; 0x29
 8007f3c:	d108      	bne.n	8007f50 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007f3e:	f248 0101 	movw	r1, #32769	; 0x8001
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 fc56 	bl	80087f4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2221      	movs	r2, #33	; 0x21
 8007f4c:	631a      	str	r2, [r3, #48]	; 0x30
 8007f4e:	e00d      	b.n	8007f6c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007f50:	7bfb      	ldrb	r3, [r7, #15]
 8007f52:	2b22      	cmp	r3, #34	; 0x22
 8007f54:	d002      	beq.n	8007f5c <I2C_ITSlaveCplt+0x50>
 8007f56:	7bfb      	ldrb	r3, [r7, #15]
 8007f58:	2b2a      	cmp	r3, #42	; 0x2a
 8007f5a:	d107      	bne.n	8007f6c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8007f5c:	f248 0102 	movw	r1, #32770	; 0x8002
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 fc47 	bl	80087f4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2222      	movs	r2, #34	; 0x22
 8007f6a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	685a      	ldr	r2, [r3, #4]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f7a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	6859      	ldr	r1, [r3, #4]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	4b64      	ldr	r3, [pc, #400]	; (8008118 <I2C_ITSlaveCplt+0x20c>)
 8007f88:	400b      	ands	r3, r1
 8007f8a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 fa14 	bl	80083ba <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	0b9b      	lsrs	r3, r3, #14
 8007f96:	f003 0301 	and.w	r3, r3, #1
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d013      	beq.n	8007fc6 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007fac:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d020      	beq.n	8007ff8 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	b29a      	uxth	r2, r3
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007fc4:	e018      	b.n	8007ff8 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	0bdb      	lsrs	r3, r3, #15
 8007fca:	f003 0301 	and.w	r3, r3, #1
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d012      	beq.n	8007ff8 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007fe0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d006      	beq.n	8007ff8 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	b29a      	uxth	r2, r3
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	089b      	lsrs	r3, r3, #2
 8007ffc:	f003 0301 	and.w	r3, r3, #1
 8008000:	2b00      	cmp	r3, #0
 8008002:	d020      	beq.n	8008046 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	f023 0304 	bic.w	r3, r3, #4
 800800a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008016:	b2d2      	uxtb	r2, r2
 8008018:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800801e:	1c5a      	adds	r2, r3, #1
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008028:	2b00      	cmp	r3, #0
 800802a:	d00c      	beq.n	8008046 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008030:	3b01      	subs	r3, #1
 8008032:	b29a      	uxth	r2, r3
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800803c:	b29b      	uxth	r3, r3
 800803e:	3b01      	subs	r3, #1
 8008040:	b29a      	uxth	r2, r3
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800804a:	b29b      	uxth	r3, r3
 800804c:	2b00      	cmp	r3, #0
 800804e:	d005      	beq.n	800805c <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008054:	f043 0204 	orr.w	r2, r3, #4
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2200      	movs	r2, #0
 8008060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800806e:	2b00      	cmp	r3, #0
 8008070:	d010      	beq.n	8008094 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008076:	4619      	mov	r1, r3
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 f8a7 	bl	80081cc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008084:	b2db      	uxtb	r3, r3
 8008086:	2b28      	cmp	r3, #40	; 0x28
 8008088:	d141      	bne.n	800810e <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800808a:	6979      	ldr	r1, [r7, #20]
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 f847 	bl	8008120 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008092:	e03c      	b.n	800810e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008098:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800809c:	d014      	beq.n	80080c8 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f7ff fed6 	bl	8007e50 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4a1d      	ldr	r2, [pc, #116]	; (800811c <I2C_ITSlaveCplt+0x210>)
 80080a8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2220      	movs	r2, #32
 80080ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f7ff fc82 	bl	80079ca <HAL_I2C_ListenCpltCallback>
}
 80080c6:	e022      	b.n	800810e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	2b22      	cmp	r3, #34	; 0x22
 80080d2:	d10e      	bne.n	80080f2 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2220      	movs	r2, #32
 80080d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2200      	movs	r2, #0
 80080e0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f7ff fc55 	bl	800799a <HAL_I2C_SlaveRxCpltCallback>
}
 80080f0:	e00d      	b.n	800810e <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2220      	movs	r2, #32
 80080f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f7ff fc3c 	bl	8007986 <HAL_I2C_SlaveTxCpltCallback>
}
 800810e:	bf00      	nop
 8008110:	3718      	adds	r7, #24
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	fe00e800 	.word	0xfe00e800
 800811c:	ffff0000 	.word	0xffff0000

08008120 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4a26      	ldr	r2, [pc, #152]	; (80081c8 <I2C_ITListenCplt+0xa8>)
 800812e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2220      	movs	r2, #32
 800813a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2200      	movs	r2, #0
 800814a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	089b      	lsrs	r3, r3, #2
 8008150:	f003 0301 	and.w	r3, r3, #1
 8008154:	2b00      	cmp	r3, #0
 8008156:	d022      	beq.n	800819e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008162:	b2d2      	uxtb	r2, r2
 8008164:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816a:	1c5a      	adds	r2, r3, #1
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008174:	2b00      	cmp	r3, #0
 8008176:	d012      	beq.n	800819e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800817c:	3b01      	subs	r3, #1
 800817e:	b29a      	uxth	r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008188:	b29b      	uxth	r3, r3
 800818a:	3b01      	subs	r3, #1
 800818c:	b29a      	uxth	r2, r3
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008196:	f043 0204 	orr.w	r2, r3, #4
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800819e:	f248 0103 	movw	r1, #32771	; 0x8003
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 fb26 	bl	80087f4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	2210      	movs	r2, #16
 80081ae:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f7ff fc06 	bl	80079ca <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80081be:	bf00      	nop
 80081c0:	3708      	adds	r7, #8
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	ffff0000 	.word	0xffff0000

080081cc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	4a5d      	ldr	r2, [pc, #372]	; (8008360 <I2C_ITError+0x194>)
 80081ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	431a      	orrs	r2, r3
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80081fe:	7bfb      	ldrb	r3, [r7, #15]
 8008200:	2b28      	cmp	r3, #40	; 0x28
 8008202:	d005      	beq.n	8008210 <I2C_ITError+0x44>
 8008204:	7bfb      	ldrb	r3, [r7, #15]
 8008206:	2b29      	cmp	r3, #41	; 0x29
 8008208:	d002      	beq.n	8008210 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800820a:	7bfb      	ldrb	r3, [r7, #15]
 800820c:	2b2a      	cmp	r3, #42	; 0x2a
 800820e:	d10b      	bne.n	8008228 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008210:	2103      	movs	r1, #3
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 faee 	bl	80087f4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2228      	movs	r2, #40	; 0x28
 800821c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4a50      	ldr	r2, [pc, #320]	; (8008364 <I2C_ITError+0x198>)
 8008224:	635a      	str	r2, [r3, #52]	; 0x34
 8008226:	e011      	b.n	800824c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008228:	f248 0103 	movw	r1, #32771	; 0x8003
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f000 fae1 	bl	80087f4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008238:	b2db      	uxtb	r3, r3
 800823a:	2b60      	cmp	r3, #96	; 0x60
 800823c:	d003      	beq.n	8008246 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2220      	movs	r2, #32
 8008242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008250:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008256:	2b00      	cmp	r3, #0
 8008258:	d039      	beq.n	80082ce <I2C_ITError+0x102>
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	2b11      	cmp	r3, #17
 800825e:	d002      	beq.n	8008266 <I2C_ITError+0x9a>
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	2b21      	cmp	r3, #33	; 0x21
 8008264:	d133      	bne.n	80082ce <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008270:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008274:	d107      	bne.n	8008286 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008284:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800828a:	4618      	mov	r0, r3
 800828c:	f7fe fd04 	bl	8006c98 <HAL_DMA_GetState>
 8008290:	4603      	mov	r3, r0
 8008292:	2b01      	cmp	r3, #1
 8008294:	d017      	beq.n	80082c6 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800829a:	4a33      	ldr	r2, [pc, #204]	; (8008368 <I2C_ITError+0x19c>)
 800829c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7fe fc04 	bl	8006ab8 <HAL_DMA_Abort_IT>
 80082b0:	4603      	mov	r3, r0
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d04d      	beq.n	8008352 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80082c0:	4610      	mov	r0, r2
 80082c2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80082c4:	e045      	b.n	8008352 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 f850 	bl	800836c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80082cc:	e041      	b.n	8008352 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d039      	beq.n	800834a <I2C_ITError+0x17e>
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	2b12      	cmp	r3, #18
 80082da:	d002      	beq.n	80082e2 <I2C_ITError+0x116>
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	2b22      	cmp	r3, #34	; 0x22
 80082e0:	d133      	bne.n	800834a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082f0:	d107      	bne.n	8008302 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008300:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008306:	4618      	mov	r0, r3
 8008308:	f7fe fcc6 	bl	8006c98 <HAL_DMA_GetState>
 800830c:	4603      	mov	r3, r0
 800830e:	2b01      	cmp	r3, #1
 8008310:	d017      	beq.n	8008342 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008316:	4a14      	ldr	r2, [pc, #80]	; (8008368 <I2C_ITError+0x19c>)
 8008318:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2200      	movs	r2, #0
 800831e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008326:	4618      	mov	r0, r3
 8008328:	f7fe fbc6 	bl	8006ab8 <HAL_DMA_Abort_IT>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d011      	beq.n	8008356 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800833c:	4610      	mov	r0, r2
 800833e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008340:	e009      	b.n	8008356 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 f812 	bl	800836c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008348:	e005      	b.n	8008356 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 f80e 	bl	800836c <I2C_TreatErrorCallback>
  }
}
 8008350:	e002      	b.n	8008358 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008352:	bf00      	nop
 8008354:	e000      	b.n	8008358 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008356:	bf00      	nop
}
 8008358:	bf00      	nop
 800835a:	3710      	adds	r7, #16
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}
 8008360:	ffff0000 	.word	0xffff0000
 8008364:	080079f3 	.word	0x080079f3
 8008368:	08008403 	.word	0x08008403

0800836c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800837a:	b2db      	uxtb	r3, r3
 800837c:	2b60      	cmp	r3, #96	; 0x60
 800837e:	d10e      	bne.n	800839e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2220      	movs	r2, #32
 8008384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f7ff fb21 	bl	80079de <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800839c:	e009      	b.n	80083b2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f7fc f991 	bl	80046d4 <HAL_I2C_ErrorCallback>
}
 80083b2:	bf00      	nop
 80083b4:	3708      	adds	r7, #8
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80083ba:	b480      	push	{r7}
 80083bc:	b083      	sub	sp, #12
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	699b      	ldr	r3, [r3, #24]
 80083c8:	f003 0302 	and.w	r3, r3, #2
 80083cc:	2b02      	cmp	r3, #2
 80083ce:	d103      	bne.n	80083d8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2200      	movs	r2, #0
 80083d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	699b      	ldr	r3, [r3, #24]
 80083de:	f003 0301 	and.w	r3, r3, #1
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d007      	beq.n	80083f6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	699a      	ldr	r2, [r3, #24]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f042 0201 	orr.w	r2, r2, #1
 80083f4:	619a      	str	r2, [r3, #24]
  }
}
 80083f6:	bf00      	nop
 80083f8:	370c      	adds	r7, #12
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr

08008402 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b084      	sub	sp, #16
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800840e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008414:	2b00      	cmp	r3, #0
 8008416:	d003      	beq.n	8008420 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800841c:	2200      	movs	r2, #0
 800841e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008424:	2b00      	cmp	r3, #0
 8008426:	d003      	beq.n	8008430 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800842c:	2200      	movs	r2, #0
 800842e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8008430:	68f8      	ldr	r0, [r7, #12]
 8008432:	f7ff ff9b 	bl	800836c <I2C_TreatErrorCallback>
}
 8008436:	bf00      	nop
 8008438:	3710      	adds	r7, #16
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}

0800843e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800843e:	b580      	push	{r7, lr}
 8008440:	b084      	sub	sp, #16
 8008442:	af00      	add	r7, sp, #0
 8008444:	60f8      	str	r0, [r7, #12]
 8008446:	60b9      	str	r1, [r7, #8]
 8008448:	603b      	str	r3, [r7, #0]
 800844a:	4613      	mov	r3, r2
 800844c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800844e:	e022      	b.n	8008496 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008456:	d01e      	beq.n	8008496 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008458:	f7fe f864 	bl	8006524 <HAL_GetTick>
 800845c:	4602      	mov	r2, r0
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	1ad3      	subs	r3, r2, r3
 8008462:	683a      	ldr	r2, [r7, #0]
 8008464:	429a      	cmp	r2, r3
 8008466:	d302      	bcc.n	800846e <I2C_WaitOnFlagUntilTimeout+0x30>
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d113      	bne.n	8008496 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008472:	f043 0220 	orr.w	r2, r3, #32
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2220      	movs	r2, #32
 800847e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2200      	movs	r2, #0
 8008486:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2200      	movs	r2, #0
 800848e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008492:	2301      	movs	r3, #1
 8008494:	e00f      	b.n	80084b6 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	699a      	ldr	r2, [r3, #24]
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	4013      	ands	r3, r2
 80084a0:	68ba      	ldr	r2, [r7, #8]
 80084a2:	429a      	cmp	r2, r3
 80084a4:	bf0c      	ite	eq
 80084a6:	2301      	moveq	r3, #1
 80084a8:	2300      	movne	r3, #0
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	461a      	mov	r2, r3
 80084ae:	79fb      	ldrb	r3, [r7, #7]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d0cd      	beq.n	8008450 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80084b4:	2300      	movs	r3, #0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3710      	adds	r7, #16
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}

080084be <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80084be:	b580      	push	{r7, lr}
 80084c0:	b084      	sub	sp, #16
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	60f8      	str	r0, [r7, #12]
 80084c6:	60b9      	str	r1, [r7, #8]
 80084c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80084ca:	e02c      	b.n	8008526 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	68b9      	ldr	r1, [r7, #8]
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f000 f871 	bl	80085b8 <I2C_IsErrorOccurred>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d001      	beq.n	80084e0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	e02a      	b.n	8008536 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084e6:	d01e      	beq.n	8008526 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084e8:	f7fe f81c 	bl	8006524 <HAL_GetTick>
 80084ec:	4602      	mov	r2, r0
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	1ad3      	subs	r3, r2, r3
 80084f2:	68ba      	ldr	r2, [r7, #8]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d302      	bcc.n	80084fe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d113      	bne.n	8008526 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008502:	f043 0220 	orr.w	r2, r3, #32
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2220      	movs	r2, #32
 800850e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2200      	movs	r2, #0
 8008516:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2200      	movs	r2, #0
 800851e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	e007      	b.n	8008536 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	699b      	ldr	r3, [r3, #24]
 800852c:	f003 0302 	and.w	r3, r3, #2
 8008530:	2b02      	cmp	r3, #2
 8008532:	d1cb      	bne.n	80084cc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008534:	2300      	movs	r3, #0
}
 8008536:	4618      	mov	r0, r3
 8008538:	3710      	adds	r7, #16
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b084      	sub	sp, #16
 8008542:	af00      	add	r7, sp, #0
 8008544:	60f8      	str	r0, [r7, #12]
 8008546:	60b9      	str	r1, [r7, #8]
 8008548:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800854a:	e028      	b.n	800859e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800854c:	687a      	ldr	r2, [r7, #4]
 800854e:	68b9      	ldr	r1, [r7, #8]
 8008550:	68f8      	ldr	r0, [r7, #12]
 8008552:	f000 f831 	bl	80085b8 <I2C_IsErrorOccurred>
 8008556:	4603      	mov	r3, r0
 8008558:	2b00      	cmp	r3, #0
 800855a:	d001      	beq.n	8008560 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800855c:	2301      	movs	r3, #1
 800855e:	e026      	b.n	80085ae <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008560:	f7fd ffe0 	bl	8006524 <HAL_GetTick>
 8008564:	4602      	mov	r2, r0
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	1ad3      	subs	r3, r2, r3
 800856a:	68ba      	ldr	r2, [r7, #8]
 800856c:	429a      	cmp	r2, r3
 800856e:	d302      	bcc.n	8008576 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d113      	bne.n	800859e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800857a:	f043 0220 	orr.w	r2, r3, #32
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2220      	movs	r2, #32
 8008586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2200      	movs	r2, #0
 800858e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2200      	movs	r2, #0
 8008596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800859a:	2301      	movs	r3, #1
 800859c:	e007      	b.n	80085ae <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	699b      	ldr	r3, [r3, #24]
 80085a4:	f003 0320 	and.w	r3, r3, #32
 80085a8:	2b20      	cmp	r3, #32
 80085aa:	d1cf      	bne.n	800854c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
	...

080085b8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b08a      	sub	sp, #40	; 0x28
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80085c4:	2300      	movs	r3, #0
 80085c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	699b      	ldr	r3, [r3, #24]
 80085d0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80085d2:	2300      	movs	r3, #0
 80085d4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80085da:	69bb      	ldr	r3, [r7, #24]
 80085dc:	f003 0310 	and.w	r3, r3, #16
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d075      	beq.n	80086d0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	2210      	movs	r2, #16
 80085ea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80085ec:	e056      	b.n	800869c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085f4:	d052      	beq.n	800869c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80085f6:	f7fd ff95 	bl	8006524 <HAL_GetTick>
 80085fa:	4602      	mov	r2, r0
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	1ad3      	subs	r3, r2, r3
 8008600:	68ba      	ldr	r2, [r7, #8]
 8008602:	429a      	cmp	r2, r3
 8008604:	d302      	bcc.n	800860c <I2C_IsErrorOccurred+0x54>
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d147      	bne.n	800869c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008616:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800861e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	699b      	ldr	r3, [r3, #24]
 8008626:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800862a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800862e:	d12e      	bne.n	800868e <I2C_IsErrorOccurred+0xd6>
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008636:	d02a      	beq.n	800868e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8008638:	7cfb      	ldrb	r3, [r7, #19]
 800863a:	2b20      	cmp	r3, #32
 800863c:	d027      	beq.n	800868e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	685a      	ldr	r2, [r3, #4]
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800864c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800864e:	f7fd ff69 	bl	8006524 <HAL_GetTick>
 8008652:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008654:	e01b      	b.n	800868e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008656:	f7fd ff65 	bl	8006524 <HAL_GetTick>
 800865a:	4602      	mov	r2, r0
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	1ad3      	subs	r3, r2, r3
 8008660:	2b19      	cmp	r3, #25
 8008662:	d914      	bls.n	800868e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008668:	f043 0220 	orr.w	r2, r3, #32
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2220      	movs	r2, #32
 8008674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2200      	movs	r2, #0
 800867c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2200      	movs	r2, #0
 8008684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8008688:	2301      	movs	r3, #1
 800868a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	699b      	ldr	r3, [r3, #24]
 8008694:	f003 0320 	and.w	r3, r3, #32
 8008698:	2b20      	cmp	r3, #32
 800869a:	d1dc      	bne.n	8008656 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	699b      	ldr	r3, [r3, #24]
 80086a2:	f003 0320 	and.w	r3, r3, #32
 80086a6:	2b20      	cmp	r3, #32
 80086a8:	d003      	beq.n	80086b2 <I2C_IsErrorOccurred+0xfa>
 80086aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d09d      	beq.n	80085ee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80086b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d103      	bne.n	80086c2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2220      	movs	r2, #32
 80086c0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80086c2:	6a3b      	ldr	r3, [r7, #32]
 80086c4:	f043 0304 	orr.w	r3, r3, #4
 80086c8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80086ca:	2301      	movs	r3, #1
 80086cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	699b      	ldr	r3, [r3, #24]
 80086d6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80086d8:	69bb      	ldr	r3, [r7, #24]
 80086da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d00b      	beq.n	80086fa <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80086e2:	6a3b      	ldr	r3, [r7, #32]
 80086e4:	f043 0301 	orr.w	r3, r3, #1
 80086e8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80086f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008700:	2b00      	cmp	r3, #0
 8008702:	d00b      	beq.n	800871c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008704:	6a3b      	ldr	r3, [r7, #32]
 8008706:	f043 0308 	orr.w	r3, r3, #8
 800870a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008714:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008716:	2301      	movs	r3, #1
 8008718:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008722:	2b00      	cmp	r3, #0
 8008724:	d00b      	beq.n	800873e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008726:	6a3b      	ldr	r3, [r7, #32]
 8008728:	f043 0302 	orr.w	r3, r3, #2
 800872c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008736:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008738:	2301      	movs	r3, #1
 800873a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800873e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008742:	2b00      	cmp	r3, #0
 8008744:	d01c      	beq.n	8008780 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	f7ff fe37 	bl	80083ba <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	6859      	ldr	r1, [r3, #4]
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	4b0d      	ldr	r3, [pc, #52]	; (800878c <I2C_IsErrorOccurred+0x1d4>)
 8008758:	400b      	ands	r3, r1
 800875a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008760:	6a3b      	ldr	r3, [r7, #32]
 8008762:	431a      	orrs	r2, r3
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2220      	movs	r2, #32
 800876c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2200      	movs	r2, #0
 8008774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2200      	movs	r2, #0
 800877c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008784:	4618      	mov	r0, r3
 8008786:	3728      	adds	r7, #40	; 0x28
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}
 800878c:	fe00e800 	.word	0xfe00e800

08008790 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008790:	b480      	push	{r7}
 8008792:	b087      	sub	sp, #28
 8008794:	af00      	add	r7, sp, #0
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	607b      	str	r3, [r7, #4]
 800879a:	460b      	mov	r3, r1
 800879c:	817b      	strh	r3, [r7, #10]
 800879e:	4613      	mov	r3, r2
 80087a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80087a2:	897b      	ldrh	r3, [r7, #10]
 80087a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80087a8:	7a7b      	ldrb	r3, [r7, #9]
 80087aa:	041b      	lsls	r3, r3, #16
 80087ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80087b0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80087b6:	6a3b      	ldr	r3, [r7, #32]
 80087b8:	4313      	orrs	r3, r2
 80087ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80087be:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	685a      	ldr	r2, [r3, #4]
 80087c6:	6a3b      	ldr	r3, [r7, #32]
 80087c8:	0d5b      	lsrs	r3, r3, #21
 80087ca:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80087ce:	4b08      	ldr	r3, [pc, #32]	; (80087f0 <I2C_TransferConfig+0x60>)
 80087d0:	430b      	orrs	r3, r1
 80087d2:	43db      	mvns	r3, r3
 80087d4:	ea02 0103 	and.w	r1, r2, r3
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	697a      	ldr	r2, [r7, #20]
 80087de:	430a      	orrs	r2, r1
 80087e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80087e2:	bf00      	nop
 80087e4:	371c      	adds	r7, #28
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr
 80087ee:	bf00      	nop
 80087f0:	03ff63ff 	.word	0x03ff63ff

080087f4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b085      	sub	sp, #20
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	460b      	mov	r3, r1
 80087fe:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008800:	2300      	movs	r3, #0
 8008802:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008804:	887b      	ldrh	r3, [r7, #2]
 8008806:	f003 0301 	and.w	r3, r3, #1
 800880a:	2b00      	cmp	r3, #0
 800880c:	d00f      	beq.n	800882e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8008814:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800881c:	b2db      	uxtb	r3, r3
 800881e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008822:	2b28      	cmp	r3, #40	; 0x28
 8008824:	d003      	beq.n	800882e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800882c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800882e:	887b      	ldrh	r3, [r7, #2]
 8008830:	f003 0302 	and.w	r3, r3, #2
 8008834:	2b00      	cmp	r3, #0
 8008836:	d00f      	beq.n	8008858 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800883e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008846:	b2db      	uxtb	r3, r3
 8008848:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800884c:	2b28      	cmp	r3, #40	; 0x28
 800884e:	d003      	beq.n	8008858 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8008856:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008858:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800885c:	2b00      	cmp	r3, #0
 800885e:	da03      	bge.n	8008868 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008866:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008868:	887b      	ldrh	r3, [r7, #2]
 800886a:	2b10      	cmp	r3, #16
 800886c:	d103      	bne.n	8008876 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008874:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008876:	887b      	ldrh	r3, [r7, #2]
 8008878:	2b20      	cmp	r3, #32
 800887a:	d103      	bne.n	8008884 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f043 0320 	orr.w	r3, r3, #32
 8008882:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008884:	887b      	ldrh	r3, [r7, #2]
 8008886:	2b40      	cmp	r3, #64	; 0x40
 8008888:	d103      	bne.n	8008892 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008890:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	6819      	ldr	r1, [r3, #0]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	43da      	mvns	r2, r3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	400a      	ands	r2, r1
 80088a2:	601a      	str	r2, [r3, #0]
}
 80088a4:	bf00      	nop
 80088a6:	3714      	adds	r7, #20
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr

080088b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b083      	sub	sp, #12
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	2b20      	cmp	r3, #32
 80088c4:	d138      	bne.n	8008938 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d101      	bne.n	80088d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80088d0:	2302      	movs	r3, #2
 80088d2:	e032      	b.n	800893a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2201      	movs	r2, #1
 80088d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2224      	movs	r2, #36	; 0x24
 80088e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f022 0201 	bic.w	r2, r2, #1
 80088f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	681a      	ldr	r2, [r3, #0]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008902:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	6819      	ldr	r1, [r3, #0]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	683a      	ldr	r2, [r7, #0]
 8008910:	430a      	orrs	r2, r1
 8008912:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f042 0201 	orr.w	r2, r2, #1
 8008922:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2220      	movs	r2, #32
 8008928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2200      	movs	r2, #0
 8008930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008934:	2300      	movs	r3, #0
 8008936:	e000      	b.n	800893a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008938:	2302      	movs	r3, #2
  }
}
 800893a:	4618      	mov	r0, r3
 800893c:	370c      	adds	r7, #12
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr

08008946 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008946:	b480      	push	{r7}
 8008948:	b085      	sub	sp, #20
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
 800894e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008956:	b2db      	uxtb	r3, r3
 8008958:	2b20      	cmp	r3, #32
 800895a:	d139      	bne.n	80089d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008962:	2b01      	cmp	r3, #1
 8008964:	d101      	bne.n	800896a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008966:	2302      	movs	r3, #2
 8008968:	e033      	b.n	80089d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2201      	movs	r2, #1
 800896e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2224      	movs	r2, #36	; 0x24
 8008976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f022 0201 	bic.w	r2, r2, #1
 8008988:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008998:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	021b      	lsls	r3, r3, #8
 800899e:	68fa      	ldr	r2, [r7, #12]
 80089a0:	4313      	orrs	r3, r2
 80089a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	68fa      	ldr	r2, [r7, #12]
 80089aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f042 0201 	orr.w	r2, r2, #1
 80089ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2220      	movs	r2, #32
 80089c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80089cc:	2300      	movs	r3, #0
 80089ce:	e000      	b.n	80089d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80089d0:	2302      	movs	r3, #2
  }
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3714      	adds	r7, #20
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr
	...

080089e0 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b085      	sub	sp, #20
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80089e8:	4b0b      	ldr	r3, [pc, #44]	; (8008a18 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80089ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089ec:	4a0a      	ldr	r2, [pc, #40]	; (8008a18 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80089ee:	f043 0301 	orr.w	r3, r3, #1
 80089f2:	6613      	str	r3, [r2, #96]	; 0x60
 80089f4:	4b08      	ldr	r3, [pc, #32]	; (8008a18 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80089f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089f8:	f003 0301 	and.w	r3, r3, #1
 80089fc:	60fb      	str	r3, [r7, #12]
 80089fe:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8008a00:	4b06      	ldr	r3, [pc, #24]	; (8008a1c <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8008a02:	685a      	ldr	r2, [r3, #4]
 8008a04:	4905      	ldr	r1, [pc, #20]	; (8008a1c <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	604b      	str	r3, [r1, #4]
}
 8008a0c:	bf00      	nop
 8008a0e:	3714      	adds	r7, #20
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr
 8008a18:	40021000 	.word	0x40021000
 8008a1c:	40010000 	.word	0x40010000

08008a20 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008a20:	b480      	push	{r7}
 8008a22:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8008a24:	4b04      	ldr	r3, [pc, #16]	; (8008a38 <HAL_PWREx_GetVoltageRange+0x18>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr
 8008a36:	bf00      	nop
 8008a38:	40007000 	.word	0x40007000

08008a3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b085      	sub	sp, #20
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a4a:	d130      	bne.n	8008aae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8008a4c:	4b23      	ldr	r3, [pc, #140]	; (8008adc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008a54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a58:	d038      	beq.n	8008acc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008a5a:	4b20      	ldr	r3, [pc, #128]	; (8008adc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008a62:	4a1e      	ldr	r2, [pc, #120]	; (8008adc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008a64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008a68:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008a6a:	4b1d      	ldr	r3, [pc, #116]	; (8008ae0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	2232      	movs	r2, #50	; 0x32
 8008a70:	fb02 f303 	mul.w	r3, r2, r3
 8008a74:	4a1b      	ldr	r2, [pc, #108]	; (8008ae4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8008a76:	fba2 2303 	umull	r2, r3, r2, r3
 8008a7a:	0c9b      	lsrs	r3, r3, #18
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008a80:	e002      	b.n	8008a88 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	3b01      	subs	r3, #1
 8008a86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008a88:	4b14      	ldr	r3, [pc, #80]	; (8008adc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008a8a:	695b      	ldr	r3, [r3, #20]
 8008a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a94:	d102      	bne.n	8008a9c <HAL_PWREx_ControlVoltageScaling+0x60>
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d1f2      	bne.n	8008a82 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008a9c:	4b0f      	ldr	r3, [pc, #60]	; (8008adc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008a9e:	695b      	ldr	r3, [r3, #20]
 8008aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008aa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008aa8:	d110      	bne.n	8008acc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8008aaa:	2303      	movs	r3, #3
 8008aac:	e00f      	b.n	8008ace <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8008aae:	4b0b      	ldr	r3, [pc, #44]	; (8008adc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008aba:	d007      	beq.n	8008acc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008abc:	4b07      	ldr	r3, [pc, #28]	; (8008adc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008ac4:	4a05      	ldr	r2, [pc, #20]	; (8008adc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008ac6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008aca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8008acc:	2300      	movs	r3, #0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3714      	adds	r7, #20
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad8:	4770      	bx	lr
 8008ada:	bf00      	nop
 8008adc:	40007000 	.word	0x40007000
 8008ae0:	200001f4 	.word	0x200001f4
 8008ae4:	431bde83 	.word	0x431bde83

08008ae8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b088      	sub	sp, #32
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d101      	bne.n	8008afa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008af6:	2301      	movs	r3, #1
 8008af8:	e3ca      	b.n	8009290 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008afa:	4b97      	ldr	r3, [pc, #604]	; (8008d58 <HAL_RCC_OscConfig+0x270>)
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	f003 030c 	and.w	r3, r3, #12
 8008b02:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008b04:	4b94      	ldr	r3, [pc, #592]	; (8008d58 <HAL_RCC_OscConfig+0x270>)
 8008b06:	68db      	ldr	r3, [r3, #12]
 8008b08:	f003 0303 	and.w	r3, r3, #3
 8008b0c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f003 0310 	and.w	r3, r3, #16
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	f000 80e4 	beq.w	8008ce4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008b1c:	69bb      	ldr	r3, [r7, #24]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d007      	beq.n	8008b32 <HAL_RCC_OscConfig+0x4a>
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	2b0c      	cmp	r3, #12
 8008b26:	f040 808b 	bne.w	8008c40 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	f040 8087 	bne.w	8008c40 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008b32:	4b89      	ldr	r3, [pc, #548]	; (8008d58 <HAL_RCC_OscConfig+0x270>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f003 0302 	and.w	r3, r3, #2
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d005      	beq.n	8008b4a <HAL_RCC_OscConfig+0x62>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	699b      	ldr	r3, [r3, #24]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d101      	bne.n	8008b4a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	e3a2      	b.n	8009290 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6a1a      	ldr	r2, [r3, #32]
 8008b4e:	4b82      	ldr	r3, [pc, #520]	; (8008d58 <HAL_RCC_OscConfig+0x270>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f003 0308 	and.w	r3, r3, #8
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d004      	beq.n	8008b64 <HAL_RCC_OscConfig+0x7c>
 8008b5a:	4b7f      	ldr	r3, [pc, #508]	; (8008d58 <HAL_RCC_OscConfig+0x270>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b62:	e005      	b.n	8008b70 <HAL_RCC_OscConfig+0x88>
 8008b64:	4b7c      	ldr	r3, [pc, #496]	; (8008d58 <HAL_RCC_OscConfig+0x270>)
 8008b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b6a:	091b      	lsrs	r3, r3, #4
 8008b6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d223      	bcs.n	8008bbc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6a1b      	ldr	r3, [r3, #32]
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f000 fd55 	bl	8009628 <RCC_SetFlashLatencyFromMSIRange>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d001      	beq.n	8008b88 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8008b84:	2301      	movs	r3, #1
 8008b86:	e383      	b.n	8009290 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008b88:	4b73      	ldr	r3, [pc, #460]	; (8008d58 <HAL_RCC_OscConfig+0x270>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a72      	ldr	r2, [pc, #456]	; (8008d58 <HAL_RCC_OscConfig+0x270>)
 8008b8e:	f043 0308 	orr.w	r3, r3, #8
 8008b92:	6013      	str	r3, [r2, #0]
 8008b94:	4b70      	ldr	r3, [pc, #448]	; (8008d58 <HAL_RCC_OscConfig+0x270>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6a1b      	ldr	r3, [r3, #32]
 8008ba0:	496d      	ldr	r1, [pc, #436]	; (8008d58 <HAL_RCC_OscConfig+0x270>)
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008ba6:	4b6c      	ldr	r3, [pc, #432]	; (8008d58 <HAL_RCC_OscConfig+0x270>)
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	69db      	ldr	r3, [r3, #28]
 8008bb2:	021b      	lsls	r3, r3, #8
 8008bb4:	4968      	ldr	r1, [pc, #416]	; (8008d58 <HAL_RCC_OscConfig+0x270>)
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	604b      	str	r3, [r1, #4]
 8008bba:	e025      	b.n	8008c08 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008bbc:	4b66      	ldr	r3, [pc, #408]	; (8008d58 <HAL_RCC_OscConfig+0x270>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a65      	ldr	r2, [pc, #404]	; (8008d58 <HAL_RCC_OscConfig+0x270>)
 8008bc2:	f043 0308 	orr.w	r3, r3, #8
 8008bc6:	6013      	str	r3, [r2, #0]
 8008bc8:	4b63      	ldr	r3, [pc, #396]	; (8008d58 <HAL_RCC_OscConfig+0x270>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6a1b      	ldr	r3, [r3, #32]
 8008bd4:	4960      	ldr	r1, [pc, #384]	; (8008d58 <HAL_RCC_OscConfig+0x270>)
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008bda:	4b5f      	ldr	r3, [pc, #380]	; (8008d58 <HAL_RCC_OscConfig+0x270>)
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	69db      	ldr	r3, [r3, #28]
 8008be6:	021b      	lsls	r3, r3, #8
 8008be8:	495b      	ldr	r1, [pc, #364]	; (8008d58 <HAL_RCC_OscConfig+0x270>)
 8008bea:	4313      	orrs	r3, r2
 8008bec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008bee:	69bb      	ldr	r3, [r7, #24]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d109      	bne.n	8008c08 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6a1b      	ldr	r3, [r3, #32]
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f000 fd15 	bl	8009628 <RCC_SetFlashLatencyFromMSIRange>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d001      	beq.n	8008c08 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8008c04:	2301      	movs	r3, #1
 8008c06:	e343      	b.n	8009290 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008c08:	f000 fc4a 	bl	80094a0 <HAL_RCC_GetSysClockFreq>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	4b52      	ldr	r3, [pc, #328]	; (8008d58 <HAL_RCC_OscConfig+0x270>)
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	091b      	lsrs	r3, r3, #4
 8008c14:	f003 030f 	and.w	r3, r3, #15
 8008c18:	4950      	ldr	r1, [pc, #320]	; (8008d5c <HAL_RCC_OscConfig+0x274>)
 8008c1a:	5ccb      	ldrb	r3, [r1, r3]
 8008c1c:	f003 031f 	and.w	r3, r3, #31
 8008c20:	fa22 f303 	lsr.w	r3, r2, r3
 8008c24:	4a4e      	ldr	r2, [pc, #312]	; (8008d60 <HAL_RCC_OscConfig+0x278>)
 8008c26:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008c28:	4b4e      	ldr	r3, [pc, #312]	; (8008d64 <HAL_RCC_OscConfig+0x27c>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f7fd fc29 	bl	8006484 <HAL_InitTick>
 8008c32:	4603      	mov	r3, r0
 8008c34:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008c36:	7bfb      	ldrb	r3, [r7, #15]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d052      	beq.n	8008ce2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8008c3c:	7bfb      	ldrb	r3, [r7, #15]
 8008c3e:	e327      	b.n	8009290 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	699b      	ldr	r3, [r3, #24]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d032      	beq.n	8008cae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008c48:	4b43      	ldr	r3, [pc, #268]	; (8008d58 <HAL_RCC_OscConfig+0x270>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a42      	ldr	r2, [pc, #264]	; (8008d58 <HAL_RCC_OscConfig+0x270>)
 8008c4e:	f043 0301 	orr.w	r3, r3, #1
 8008c52:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008c54:	f7fd fc66 	bl	8006524 <HAL_GetTick>
 8008c58:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008c5a:	e008      	b.n	8008c6e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008c5c:	f7fd fc62 	bl	8006524 <HAL_GetTick>
 8008c60:	4602      	mov	r2, r0
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	1ad3      	subs	r3, r2, r3
 8008c66:	2b02      	cmp	r3, #2
 8008c68:	d901      	bls.n	8008c6e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8008c6a:	2303      	movs	r3, #3
 8008c6c:	e310      	b.n	8009290 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008c6e:	4b3a      	ldr	r3, [pc, #232]	; (8008d58 <HAL_RCC_OscConfig+0x270>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f003 0302 	and.w	r3, r3, #2
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d0f0      	beq.n	8008c5c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008c7a:	4b37      	ldr	r3, [pc, #220]	; (8008d58 <HAL_RCC_OscConfig+0x270>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a36      	ldr	r2, [pc, #216]	; (8008d58 <HAL_RCC_OscConfig+0x270>)
 8008c80:	f043 0308 	orr.w	r3, r3, #8
 8008c84:	6013      	str	r3, [r2, #0]
 8008c86:	4b34      	ldr	r3, [pc, #208]	; (8008d58 <HAL_RCC_OscConfig+0x270>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6a1b      	ldr	r3, [r3, #32]
 8008c92:	4931      	ldr	r1, [pc, #196]	; (8008d58 <HAL_RCC_OscConfig+0x270>)
 8008c94:	4313      	orrs	r3, r2
 8008c96:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008c98:	4b2f      	ldr	r3, [pc, #188]	; (8008d58 <HAL_RCC_OscConfig+0x270>)
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	69db      	ldr	r3, [r3, #28]
 8008ca4:	021b      	lsls	r3, r3, #8
 8008ca6:	492c      	ldr	r1, [pc, #176]	; (8008d58 <HAL_RCC_OscConfig+0x270>)
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	604b      	str	r3, [r1, #4]
 8008cac:	e01a      	b.n	8008ce4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008cae:	4b2a      	ldr	r3, [pc, #168]	; (8008d58 <HAL_RCC_OscConfig+0x270>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a29      	ldr	r2, [pc, #164]	; (8008d58 <HAL_RCC_OscConfig+0x270>)
 8008cb4:	f023 0301 	bic.w	r3, r3, #1
 8008cb8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008cba:	f7fd fc33 	bl	8006524 <HAL_GetTick>
 8008cbe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008cc0:	e008      	b.n	8008cd4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008cc2:	f7fd fc2f 	bl	8006524 <HAL_GetTick>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	1ad3      	subs	r3, r2, r3
 8008ccc:	2b02      	cmp	r3, #2
 8008cce:	d901      	bls.n	8008cd4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8008cd0:	2303      	movs	r3, #3
 8008cd2:	e2dd      	b.n	8009290 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008cd4:	4b20      	ldr	r3, [pc, #128]	; (8008d58 <HAL_RCC_OscConfig+0x270>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f003 0302 	and.w	r3, r3, #2
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d1f0      	bne.n	8008cc2 <HAL_RCC_OscConfig+0x1da>
 8008ce0:	e000      	b.n	8008ce4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008ce2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f003 0301 	and.w	r3, r3, #1
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d074      	beq.n	8008dda <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	2b08      	cmp	r3, #8
 8008cf4:	d005      	beq.n	8008d02 <HAL_RCC_OscConfig+0x21a>
 8008cf6:	69bb      	ldr	r3, [r7, #24]
 8008cf8:	2b0c      	cmp	r3, #12
 8008cfa:	d10e      	bne.n	8008d1a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	2b03      	cmp	r3, #3
 8008d00:	d10b      	bne.n	8008d1a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d02:	4b15      	ldr	r3, [pc, #84]	; (8008d58 <HAL_RCC_OscConfig+0x270>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d064      	beq.n	8008dd8 <HAL_RCC_OscConfig+0x2f0>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d160      	bne.n	8008dd8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8008d16:	2301      	movs	r3, #1
 8008d18:	e2ba      	b.n	8009290 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d22:	d106      	bne.n	8008d32 <HAL_RCC_OscConfig+0x24a>
 8008d24:	4b0c      	ldr	r3, [pc, #48]	; (8008d58 <HAL_RCC_OscConfig+0x270>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a0b      	ldr	r2, [pc, #44]	; (8008d58 <HAL_RCC_OscConfig+0x270>)
 8008d2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d2e:	6013      	str	r3, [r2, #0]
 8008d30:	e026      	b.n	8008d80 <HAL_RCC_OscConfig+0x298>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d3a:	d115      	bne.n	8008d68 <HAL_RCC_OscConfig+0x280>
 8008d3c:	4b06      	ldr	r3, [pc, #24]	; (8008d58 <HAL_RCC_OscConfig+0x270>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a05      	ldr	r2, [pc, #20]	; (8008d58 <HAL_RCC_OscConfig+0x270>)
 8008d42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d46:	6013      	str	r3, [r2, #0]
 8008d48:	4b03      	ldr	r3, [pc, #12]	; (8008d58 <HAL_RCC_OscConfig+0x270>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a02      	ldr	r2, [pc, #8]	; (8008d58 <HAL_RCC_OscConfig+0x270>)
 8008d4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d52:	6013      	str	r3, [r2, #0]
 8008d54:	e014      	b.n	8008d80 <HAL_RCC_OscConfig+0x298>
 8008d56:	bf00      	nop
 8008d58:	40021000 	.word	0x40021000
 8008d5c:	08013ddc 	.word	0x08013ddc
 8008d60:	200001f4 	.word	0x200001f4
 8008d64:	20000224 	.word	0x20000224
 8008d68:	4ba0      	ldr	r3, [pc, #640]	; (8008fec <HAL_RCC_OscConfig+0x504>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a9f      	ldr	r2, [pc, #636]	; (8008fec <HAL_RCC_OscConfig+0x504>)
 8008d6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d72:	6013      	str	r3, [r2, #0]
 8008d74:	4b9d      	ldr	r3, [pc, #628]	; (8008fec <HAL_RCC_OscConfig+0x504>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a9c      	ldr	r2, [pc, #624]	; (8008fec <HAL_RCC_OscConfig+0x504>)
 8008d7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d013      	beq.n	8008db0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d88:	f7fd fbcc 	bl	8006524 <HAL_GetTick>
 8008d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008d8e:	e008      	b.n	8008da2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008d90:	f7fd fbc8 	bl	8006524 <HAL_GetTick>
 8008d94:	4602      	mov	r2, r0
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	1ad3      	subs	r3, r2, r3
 8008d9a:	2b64      	cmp	r3, #100	; 0x64
 8008d9c:	d901      	bls.n	8008da2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8008d9e:	2303      	movs	r3, #3
 8008da0:	e276      	b.n	8009290 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008da2:	4b92      	ldr	r3, [pc, #584]	; (8008fec <HAL_RCC_OscConfig+0x504>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d0f0      	beq.n	8008d90 <HAL_RCC_OscConfig+0x2a8>
 8008dae:	e014      	b.n	8008dda <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008db0:	f7fd fbb8 	bl	8006524 <HAL_GetTick>
 8008db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008db6:	e008      	b.n	8008dca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008db8:	f7fd fbb4 	bl	8006524 <HAL_GetTick>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	1ad3      	subs	r3, r2, r3
 8008dc2:	2b64      	cmp	r3, #100	; 0x64
 8008dc4:	d901      	bls.n	8008dca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008dc6:	2303      	movs	r3, #3
 8008dc8:	e262      	b.n	8009290 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008dca:	4b88      	ldr	r3, [pc, #544]	; (8008fec <HAL_RCC_OscConfig+0x504>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d1f0      	bne.n	8008db8 <HAL_RCC_OscConfig+0x2d0>
 8008dd6:	e000      	b.n	8008dda <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008dd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f003 0302 	and.w	r3, r3, #2
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d060      	beq.n	8008ea8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8008de6:	69bb      	ldr	r3, [r7, #24]
 8008de8:	2b04      	cmp	r3, #4
 8008dea:	d005      	beq.n	8008df8 <HAL_RCC_OscConfig+0x310>
 8008dec:	69bb      	ldr	r3, [r7, #24]
 8008dee:	2b0c      	cmp	r3, #12
 8008df0:	d119      	bne.n	8008e26 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	2b02      	cmp	r3, #2
 8008df6:	d116      	bne.n	8008e26 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008df8:	4b7c      	ldr	r3, [pc, #496]	; (8008fec <HAL_RCC_OscConfig+0x504>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d005      	beq.n	8008e10 <HAL_RCC_OscConfig+0x328>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d101      	bne.n	8008e10 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	e23f      	b.n	8009290 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e10:	4b76      	ldr	r3, [pc, #472]	; (8008fec <HAL_RCC_OscConfig+0x504>)
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	691b      	ldr	r3, [r3, #16]
 8008e1c:	061b      	lsls	r3, r3, #24
 8008e1e:	4973      	ldr	r1, [pc, #460]	; (8008fec <HAL_RCC_OscConfig+0x504>)
 8008e20:	4313      	orrs	r3, r2
 8008e22:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008e24:	e040      	b.n	8008ea8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	68db      	ldr	r3, [r3, #12]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d023      	beq.n	8008e76 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008e2e:	4b6f      	ldr	r3, [pc, #444]	; (8008fec <HAL_RCC_OscConfig+0x504>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a6e      	ldr	r2, [pc, #440]	; (8008fec <HAL_RCC_OscConfig+0x504>)
 8008e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e3a:	f7fd fb73 	bl	8006524 <HAL_GetTick>
 8008e3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008e40:	e008      	b.n	8008e54 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e42:	f7fd fb6f 	bl	8006524 <HAL_GetTick>
 8008e46:	4602      	mov	r2, r0
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	1ad3      	subs	r3, r2, r3
 8008e4c:	2b02      	cmp	r3, #2
 8008e4e:	d901      	bls.n	8008e54 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8008e50:	2303      	movs	r3, #3
 8008e52:	e21d      	b.n	8009290 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008e54:	4b65      	ldr	r3, [pc, #404]	; (8008fec <HAL_RCC_OscConfig+0x504>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d0f0      	beq.n	8008e42 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e60:	4b62      	ldr	r3, [pc, #392]	; (8008fec <HAL_RCC_OscConfig+0x504>)
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	691b      	ldr	r3, [r3, #16]
 8008e6c:	061b      	lsls	r3, r3, #24
 8008e6e:	495f      	ldr	r1, [pc, #380]	; (8008fec <HAL_RCC_OscConfig+0x504>)
 8008e70:	4313      	orrs	r3, r2
 8008e72:	604b      	str	r3, [r1, #4]
 8008e74:	e018      	b.n	8008ea8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008e76:	4b5d      	ldr	r3, [pc, #372]	; (8008fec <HAL_RCC_OscConfig+0x504>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a5c      	ldr	r2, [pc, #368]	; (8008fec <HAL_RCC_OscConfig+0x504>)
 8008e7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e82:	f7fd fb4f 	bl	8006524 <HAL_GetTick>
 8008e86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008e88:	e008      	b.n	8008e9c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e8a:	f7fd fb4b 	bl	8006524 <HAL_GetTick>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	1ad3      	subs	r3, r2, r3
 8008e94:	2b02      	cmp	r3, #2
 8008e96:	d901      	bls.n	8008e9c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008e98:	2303      	movs	r3, #3
 8008e9a:	e1f9      	b.n	8009290 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008e9c:	4b53      	ldr	r3, [pc, #332]	; (8008fec <HAL_RCC_OscConfig+0x504>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d1f0      	bne.n	8008e8a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f003 0308 	and.w	r3, r3, #8
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d03c      	beq.n	8008f2e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	695b      	ldr	r3, [r3, #20]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d01c      	beq.n	8008ef6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008ebc:	4b4b      	ldr	r3, [pc, #300]	; (8008fec <HAL_RCC_OscConfig+0x504>)
 8008ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ec2:	4a4a      	ldr	r2, [pc, #296]	; (8008fec <HAL_RCC_OscConfig+0x504>)
 8008ec4:	f043 0301 	orr.w	r3, r3, #1
 8008ec8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ecc:	f7fd fb2a 	bl	8006524 <HAL_GetTick>
 8008ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008ed2:	e008      	b.n	8008ee6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ed4:	f7fd fb26 	bl	8006524 <HAL_GetTick>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	1ad3      	subs	r3, r2, r3
 8008ede:	2b02      	cmp	r3, #2
 8008ee0:	d901      	bls.n	8008ee6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8008ee2:	2303      	movs	r3, #3
 8008ee4:	e1d4      	b.n	8009290 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008ee6:	4b41      	ldr	r3, [pc, #260]	; (8008fec <HAL_RCC_OscConfig+0x504>)
 8008ee8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008eec:	f003 0302 	and.w	r3, r3, #2
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d0ef      	beq.n	8008ed4 <HAL_RCC_OscConfig+0x3ec>
 8008ef4:	e01b      	b.n	8008f2e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008ef6:	4b3d      	ldr	r3, [pc, #244]	; (8008fec <HAL_RCC_OscConfig+0x504>)
 8008ef8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008efc:	4a3b      	ldr	r2, [pc, #236]	; (8008fec <HAL_RCC_OscConfig+0x504>)
 8008efe:	f023 0301 	bic.w	r3, r3, #1
 8008f02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f06:	f7fd fb0d 	bl	8006524 <HAL_GetTick>
 8008f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008f0c:	e008      	b.n	8008f20 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f0e:	f7fd fb09 	bl	8006524 <HAL_GetTick>
 8008f12:	4602      	mov	r2, r0
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	1ad3      	subs	r3, r2, r3
 8008f18:	2b02      	cmp	r3, #2
 8008f1a:	d901      	bls.n	8008f20 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8008f1c:	2303      	movs	r3, #3
 8008f1e:	e1b7      	b.n	8009290 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008f20:	4b32      	ldr	r3, [pc, #200]	; (8008fec <HAL_RCC_OscConfig+0x504>)
 8008f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f26:	f003 0302 	and.w	r3, r3, #2
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d1ef      	bne.n	8008f0e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f003 0304 	and.w	r3, r3, #4
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	f000 80a6 	beq.w	8009088 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008f40:	4b2a      	ldr	r3, [pc, #168]	; (8008fec <HAL_RCC_OscConfig+0x504>)
 8008f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d10d      	bne.n	8008f68 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008f4c:	4b27      	ldr	r3, [pc, #156]	; (8008fec <HAL_RCC_OscConfig+0x504>)
 8008f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f50:	4a26      	ldr	r2, [pc, #152]	; (8008fec <HAL_RCC_OscConfig+0x504>)
 8008f52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f56:	6593      	str	r3, [r2, #88]	; 0x58
 8008f58:	4b24      	ldr	r3, [pc, #144]	; (8008fec <HAL_RCC_OscConfig+0x504>)
 8008f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f60:	60bb      	str	r3, [r7, #8]
 8008f62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008f64:	2301      	movs	r3, #1
 8008f66:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008f68:	4b21      	ldr	r3, [pc, #132]	; (8008ff0 <HAL_RCC_OscConfig+0x508>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d118      	bne.n	8008fa6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008f74:	4b1e      	ldr	r3, [pc, #120]	; (8008ff0 <HAL_RCC_OscConfig+0x508>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a1d      	ldr	r2, [pc, #116]	; (8008ff0 <HAL_RCC_OscConfig+0x508>)
 8008f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008f80:	f7fd fad0 	bl	8006524 <HAL_GetTick>
 8008f84:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008f86:	e008      	b.n	8008f9a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f88:	f7fd facc 	bl	8006524 <HAL_GetTick>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	1ad3      	subs	r3, r2, r3
 8008f92:	2b02      	cmp	r3, #2
 8008f94:	d901      	bls.n	8008f9a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8008f96:	2303      	movs	r3, #3
 8008f98:	e17a      	b.n	8009290 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008f9a:	4b15      	ldr	r3, [pc, #84]	; (8008ff0 <HAL_RCC_OscConfig+0x508>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d0f0      	beq.n	8008f88 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	689b      	ldr	r3, [r3, #8]
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d108      	bne.n	8008fc0 <HAL_RCC_OscConfig+0x4d8>
 8008fae:	4b0f      	ldr	r3, [pc, #60]	; (8008fec <HAL_RCC_OscConfig+0x504>)
 8008fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fb4:	4a0d      	ldr	r2, [pc, #52]	; (8008fec <HAL_RCC_OscConfig+0x504>)
 8008fb6:	f043 0301 	orr.w	r3, r3, #1
 8008fba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008fbe:	e029      	b.n	8009014 <HAL_RCC_OscConfig+0x52c>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	2b05      	cmp	r3, #5
 8008fc6:	d115      	bne.n	8008ff4 <HAL_RCC_OscConfig+0x50c>
 8008fc8:	4b08      	ldr	r3, [pc, #32]	; (8008fec <HAL_RCC_OscConfig+0x504>)
 8008fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fce:	4a07      	ldr	r2, [pc, #28]	; (8008fec <HAL_RCC_OscConfig+0x504>)
 8008fd0:	f043 0304 	orr.w	r3, r3, #4
 8008fd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008fd8:	4b04      	ldr	r3, [pc, #16]	; (8008fec <HAL_RCC_OscConfig+0x504>)
 8008fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fde:	4a03      	ldr	r2, [pc, #12]	; (8008fec <HAL_RCC_OscConfig+0x504>)
 8008fe0:	f043 0301 	orr.w	r3, r3, #1
 8008fe4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008fe8:	e014      	b.n	8009014 <HAL_RCC_OscConfig+0x52c>
 8008fea:	bf00      	nop
 8008fec:	40021000 	.word	0x40021000
 8008ff0:	40007000 	.word	0x40007000
 8008ff4:	4b9c      	ldr	r3, [pc, #624]	; (8009268 <HAL_RCC_OscConfig+0x780>)
 8008ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ffa:	4a9b      	ldr	r2, [pc, #620]	; (8009268 <HAL_RCC_OscConfig+0x780>)
 8008ffc:	f023 0301 	bic.w	r3, r3, #1
 8009000:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009004:	4b98      	ldr	r3, [pc, #608]	; (8009268 <HAL_RCC_OscConfig+0x780>)
 8009006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800900a:	4a97      	ldr	r2, [pc, #604]	; (8009268 <HAL_RCC_OscConfig+0x780>)
 800900c:	f023 0304 	bic.w	r3, r3, #4
 8009010:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d016      	beq.n	800904a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800901c:	f7fd fa82 	bl	8006524 <HAL_GetTick>
 8009020:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009022:	e00a      	b.n	800903a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009024:	f7fd fa7e 	bl	8006524 <HAL_GetTick>
 8009028:	4602      	mov	r2, r0
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	1ad3      	subs	r3, r2, r3
 800902e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009032:	4293      	cmp	r3, r2
 8009034:	d901      	bls.n	800903a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8009036:	2303      	movs	r3, #3
 8009038:	e12a      	b.n	8009290 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800903a:	4b8b      	ldr	r3, [pc, #556]	; (8009268 <HAL_RCC_OscConfig+0x780>)
 800903c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009040:	f003 0302 	and.w	r3, r3, #2
 8009044:	2b00      	cmp	r3, #0
 8009046:	d0ed      	beq.n	8009024 <HAL_RCC_OscConfig+0x53c>
 8009048:	e015      	b.n	8009076 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800904a:	f7fd fa6b 	bl	8006524 <HAL_GetTick>
 800904e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009050:	e00a      	b.n	8009068 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009052:	f7fd fa67 	bl	8006524 <HAL_GetTick>
 8009056:	4602      	mov	r2, r0
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	1ad3      	subs	r3, r2, r3
 800905c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009060:	4293      	cmp	r3, r2
 8009062:	d901      	bls.n	8009068 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8009064:	2303      	movs	r3, #3
 8009066:	e113      	b.n	8009290 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009068:	4b7f      	ldr	r3, [pc, #508]	; (8009268 <HAL_RCC_OscConfig+0x780>)
 800906a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800906e:	f003 0302 	and.w	r3, r3, #2
 8009072:	2b00      	cmp	r3, #0
 8009074:	d1ed      	bne.n	8009052 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009076:	7ffb      	ldrb	r3, [r7, #31]
 8009078:	2b01      	cmp	r3, #1
 800907a:	d105      	bne.n	8009088 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800907c:	4b7a      	ldr	r3, [pc, #488]	; (8009268 <HAL_RCC_OscConfig+0x780>)
 800907e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009080:	4a79      	ldr	r2, [pc, #484]	; (8009268 <HAL_RCC_OscConfig+0x780>)
 8009082:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009086:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800908c:	2b00      	cmp	r3, #0
 800908e:	f000 80fe 	beq.w	800928e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009096:	2b02      	cmp	r3, #2
 8009098:	f040 80d0 	bne.w	800923c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800909c:	4b72      	ldr	r3, [pc, #456]	; (8009268 <HAL_RCC_OscConfig+0x780>)
 800909e:	68db      	ldr	r3, [r3, #12]
 80090a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	f003 0203 	and.w	r2, r3, #3
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d130      	bne.n	8009112 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ba:	3b01      	subs	r3, #1
 80090bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80090be:	429a      	cmp	r2, r3
 80090c0:	d127      	bne.n	8009112 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d11f      	bne.n	8009112 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80090dc:	2a07      	cmp	r2, #7
 80090de:	bf14      	ite	ne
 80090e0:	2201      	movne	r2, #1
 80090e2:	2200      	moveq	r2, #0
 80090e4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d113      	bne.n	8009112 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090f4:	085b      	lsrs	r3, r3, #1
 80090f6:	3b01      	subs	r3, #1
 80090f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d109      	bne.n	8009112 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009108:	085b      	lsrs	r3, r3, #1
 800910a:	3b01      	subs	r3, #1
 800910c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800910e:	429a      	cmp	r2, r3
 8009110:	d06e      	beq.n	80091f0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009112:	69bb      	ldr	r3, [r7, #24]
 8009114:	2b0c      	cmp	r3, #12
 8009116:	d069      	beq.n	80091ec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8009118:	4b53      	ldr	r3, [pc, #332]	; (8009268 <HAL_RCC_OscConfig+0x780>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009120:	2b00      	cmp	r3, #0
 8009122:	d105      	bne.n	8009130 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8009124:	4b50      	ldr	r3, [pc, #320]	; (8009268 <HAL_RCC_OscConfig+0x780>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800912c:	2b00      	cmp	r3, #0
 800912e:	d001      	beq.n	8009134 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8009130:	2301      	movs	r3, #1
 8009132:	e0ad      	b.n	8009290 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8009134:	4b4c      	ldr	r3, [pc, #304]	; (8009268 <HAL_RCC_OscConfig+0x780>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a4b      	ldr	r2, [pc, #300]	; (8009268 <HAL_RCC_OscConfig+0x780>)
 800913a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800913e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009140:	f7fd f9f0 	bl	8006524 <HAL_GetTick>
 8009144:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009146:	e008      	b.n	800915a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009148:	f7fd f9ec 	bl	8006524 <HAL_GetTick>
 800914c:	4602      	mov	r2, r0
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	1ad3      	subs	r3, r2, r3
 8009152:	2b02      	cmp	r3, #2
 8009154:	d901      	bls.n	800915a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8009156:	2303      	movs	r3, #3
 8009158:	e09a      	b.n	8009290 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800915a:	4b43      	ldr	r3, [pc, #268]	; (8009268 <HAL_RCC_OscConfig+0x780>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009162:	2b00      	cmp	r3, #0
 8009164:	d1f0      	bne.n	8009148 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009166:	4b40      	ldr	r3, [pc, #256]	; (8009268 <HAL_RCC_OscConfig+0x780>)
 8009168:	68da      	ldr	r2, [r3, #12]
 800916a:	4b40      	ldr	r3, [pc, #256]	; (800926c <HAL_RCC_OscConfig+0x784>)
 800916c:	4013      	ands	r3, r2
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009176:	3a01      	subs	r2, #1
 8009178:	0112      	lsls	r2, r2, #4
 800917a:	4311      	orrs	r1, r2
 800917c:	687a      	ldr	r2, [r7, #4]
 800917e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009180:	0212      	lsls	r2, r2, #8
 8009182:	4311      	orrs	r1, r2
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009188:	0852      	lsrs	r2, r2, #1
 800918a:	3a01      	subs	r2, #1
 800918c:	0552      	lsls	r2, r2, #21
 800918e:	4311      	orrs	r1, r2
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009194:	0852      	lsrs	r2, r2, #1
 8009196:	3a01      	subs	r2, #1
 8009198:	0652      	lsls	r2, r2, #25
 800919a:	4311      	orrs	r1, r2
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80091a0:	0912      	lsrs	r2, r2, #4
 80091a2:	0452      	lsls	r2, r2, #17
 80091a4:	430a      	orrs	r2, r1
 80091a6:	4930      	ldr	r1, [pc, #192]	; (8009268 <HAL_RCC_OscConfig+0x780>)
 80091a8:	4313      	orrs	r3, r2
 80091aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80091ac:	4b2e      	ldr	r3, [pc, #184]	; (8009268 <HAL_RCC_OscConfig+0x780>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a2d      	ldr	r2, [pc, #180]	; (8009268 <HAL_RCC_OscConfig+0x780>)
 80091b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80091b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80091b8:	4b2b      	ldr	r3, [pc, #172]	; (8009268 <HAL_RCC_OscConfig+0x780>)
 80091ba:	68db      	ldr	r3, [r3, #12]
 80091bc:	4a2a      	ldr	r2, [pc, #168]	; (8009268 <HAL_RCC_OscConfig+0x780>)
 80091be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80091c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80091c4:	f7fd f9ae 	bl	8006524 <HAL_GetTick>
 80091c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80091ca:	e008      	b.n	80091de <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80091cc:	f7fd f9aa 	bl	8006524 <HAL_GetTick>
 80091d0:	4602      	mov	r2, r0
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	1ad3      	subs	r3, r2, r3
 80091d6:	2b02      	cmp	r3, #2
 80091d8:	d901      	bls.n	80091de <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80091da:	2303      	movs	r3, #3
 80091dc:	e058      	b.n	8009290 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80091de:	4b22      	ldr	r3, [pc, #136]	; (8009268 <HAL_RCC_OscConfig+0x780>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d0f0      	beq.n	80091cc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80091ea:	e050      	b.n	800928e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80091ec:	2301      	movs	r3, #1
 80091ee:	e04f      	b.n	8009290 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80091f0:	4b1d      	ldr	r3, [pc, #116]	; (8009268 <HAL_RCC_OscConfig+0x780>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d148      	bne.n	800928e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80091fc:	4b1a      	ldr	r3, [pc, #104]	; (8009268 <HAL_RCC_OscConfig+0x780>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a19      	ldr	r2, [pc, #100]	; (8009268 <HAL_RCC_OscConfig+0x780>)
 8009202:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009206:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009208:	4b17      	ldr	r3, [pc, #92]	; (8009268 <HAL_RCC_OscConfig+0x780>)
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	4a16      	ldr	r2, [pc, #88]	; (8009268 <HAL_RCC_OscConfig+0x780>)
 800920e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009212:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009214:	f7fd f986 	bl	8006524 <HAL_GetTick>
 8009218:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800921a:	e008      	b.n	800922e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800921c:	f7fd f982 	bl	8006524 <HAL_GetTick>
 8009220:	4602      	mov	r2, r0
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	1ad3      	subs	r3, r2, r3
 8009226:	2b02      	cmp	r3, #2
 8009228:	d901      	bls.n	800922e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800922a:	2303      	movs	r3, #3
 800922c:	e030      	b.n	8009290 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800922e:	4b0e      	ldr	r3, [pc, #56]	; (8009268 <HAL_RCC_OscConfig+0x780>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009236:	2b00      	cmp	r3, #0
 8009238:	d0f0      	beq.n	800921c <HAL_RCC_OscConfig+0x734>
 800923a:	e028      	b.n	800928e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800923c:	69bb      	ldr	r3, [r7, #24]
 800923e:	2b0c      	cmp	r3, #12
 8009240:	d023      	beq.n	800928a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009242:	4b09      	ldr	r3, [pc, #36]	; (8009268 <HAL_RCC_OscConfig+0x780>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a08      	ldr	r2, [pc, #32]	; (8009268 <HAL_RCC_OscConfig+0x780>)
 8009248:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800924c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800924e:	f7fd f969 	bl	8006524 <HAL_GetTick>
 8009252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009254:	e00c      	b.n	8009270 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009256:	f7fd f965 	bl	8006524 <HAL_GetTick>
 800925a:	4602      	mov	r2, r0
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	1ad3      	subs	r3, r2, r3
 8009260:	2b02      	cmp	r3, #2
 8009262:	d905      	bls.n	8009270 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8009264:	2303      	movs	r3, #3
 8009266:	e013      	b.n	8009290 <HAL_RCC_OscConfig+0x7a8>
 8009268:	40021000 	.word	0x40021000
 800926c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009270:	4b09      	ldr	r3, [pc, #36]	; (8009298 <HAL_RCC_OscConfig+0x7b0>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009278:	2b00      	cmp	r3, #0
 800927a:	d1ec      	bne.n	8009256 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800927c:	4b06      	ldr	r3, [pc, #24]	; (8009298 <HAL_RCC_OscConfig+0x7b0>)
 800927e:	68da      	ldr	r2, [r3, #12]
 8009280:	4905      	ldr	r1, [pc, #20]	; (8009298 <HAL_RCC_OscConfig+0x7b0>)
 8009282:	4b06      	ldr	r3, [pc, #24]	; (800929c <HAL_RCC_OscConfig+0x7b4>)
 8009284:	4013      	ands	r3, r2
 8009286:	60cb      	str	r3, [r1, #12]
 8009288:	e001      	b.n	800928e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800928a:	2301      	movs	r3, #1
 800928c:	e000      	b.n	8009290 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800928e:	2300      	movs	r3, #0
}
 8009290:	4618      	mov	r0, r3
 8009292:	3720      	adds	r7, #32
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}
 8009298:	40021000 	.word	0x40021000
 800929c:	feeefffc 	.word	0xfeeefffc

080092a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b084      	sub	sp, #16
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d101      	bne.n	80092b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80092b0:	2301      	movs	r3, #1
 80092b2:	e0e7      	b.n	8009484 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80092b4:	4b75      	ldr	r3, [pc, #468]	; (800948c <HAL_RCC_ClockConfig+0x1ec>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f003 0307 	and.w	r3, r3, #7
 80092bc:	683a      	ldr	r2, [r7, #0]
 80092be:	429a      	cmp	r2, r3
 80092c0:	d910      	bls.n	80092e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092c2:	4b72      	ldr	r3, [pc, #456]	; (800948c <HAL_RCC_ClockConfig+0x1ec>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f023 0207 	bic.w	r2, r3, #7
 80092ca:	4970      	ldr	r1, [pc, #448]	; (800948c <HAL_RCC_ClockConfig+0x1ec>)
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	4313      	orrs	r3, r2
 80092d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80092d2:	4b6e      	ldr	r3, [pc, #440]	; (800948c <HAL_RCC_ClockConfig+0x1ec>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f003 0307 	and.w	r3, r3, #7
 80092da:	683a      	ldr	r2, [r7, #0]
 80092dc:	429a      	cmp	r2, r3
 80092de:	d001      	beq.n	80092e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80092e0:	2301      	movs	r3, #1
 80092e2:	e0cf      	b.n	8009484 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f003 0302 	and.w	r3, r3, #2
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d010      	beq.n	8009312 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	689a      	ldr	r2, [r3, #8]
 80092f4:	4b66      	ldr	r3, [pc, #408]	; (8009490 <HAL_RCC_ClockConfig+0x1f0>)
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d908      	bls.n	8009312 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009300:	4b63      	ldr	r3, [pc, #396]	; (8009490 <HAL_RCC_ClockConfig+0x1f0>)
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	4960      	ldr	r1, [pc, #384]	; (8009490 <HAL_RCC_ClockConfig+0x1f0>)
 800930e:	4313      	orrs	r3, r2
 8009310:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f003 0301 	and.w	r3, r3, #1
 800931a:	2b00      	cmp	r3, #0
 800931c:	d04c      	beq.n	80093b8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	2b03      	cmp	r3, #3
 8009324:	d107      	bne.n	8009336 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009326:	4b5a      	ldr	r3, [pc, #360]	; (8009490 <HAL_RCC_ClockConfig+0x1f0>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800932e:	2b00      	cmp	r3, #0
 8009330:	d121      	bne.n	8009376 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8009332:	2301      	movs	r3, #1
 8009334:	e0a6      	b.n	8009484 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	2b02      	cmp	r3, #2
 800933c:	d107      	bne.n	800934e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800933e:	4b54      	ldr	r3, [pc, #336]	; (8009490 <HAL_RCC_ClockConfig+0x1f0>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009346:	2b00      	cmp	r3, #0
 8009348:	d115      	bne.n	8009376 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800934a:	2301      	movs	r3, #1
 800934c:	e09a      	b.n	8009484 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d107      	bne.n	8009366 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009356:	4b4e      	ldr	r3, [pc, #312]	; (8009490 <HAL_RCC_ClockConfig+0x1f0>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f003 0302 	and.w	r3, r3, #2
 800935e:	2b00      	cmp	r3, #0
 8009360:	d109      	bne.n	8009376 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009362:	2301      	movs	r3, #1
 8009364:	e08e      	b.n	8009484 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009366:	4b4a      	ldr	r3, [pc, #296]	; (8009490 <HAL_RCC_ClockConfig+0x1f0>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800936e:	2b00      	cmp	r3, #0
 8009370:	d101      	bne.n	8009376 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009372:	2301      	movs	r3, #1
 8009374:	e086      	b.n	8009484 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009376:	4b46      	ldr	r3, [pc, #280]	; (8009490 <HAL_RCC_ClockConfig+0x1f0>)
 8009378:	689b      	ldr	r3, [r3, #8]
 800937a:	f023 0203 	bic.w	r2, r3, #3
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	4943      	ldr	r1, [pc, #268]	; (8009490 <HAL_RCC_ClockConfig+0x1f0>)
 8009384:	4313      	orrs	r3, r2
 8009386:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009388:	f7fd f8cc 	bl	8006524 <HAL_GetTick>
 800938c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800938e:	e00a      	b.n	80093a6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009390:	f7fd f8c8 	bl	8006524 <HAL_GetTick>
 8009394:	4602      	mov	r2, r0
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	1ad3      	subs	r3, r2, r3
 800939a:	f241 3288 	movw	r2, #5000	; 0x1388
 800939e:	4293      	cmp	r3, r2
 80093a0:	d901      	bls.n	80093a6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80093a2:	2303      	movs	r3, #3
 80093a4:	e06e      	b.n	8009484 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80093a6:	4b3a      	ldr	r3, [pc, #232]	; (8009490 <HAL_RCC_ClockConfig+0x1f0>)
 80093a8:	689b      	ldr	r3, [r3, #8]
 80093aa:	f003 020c 	and.w	r2, r3, #12
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	009b      	lsls	r3, r3, #2
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d1eb      	bne.n	8009390 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f003 0302 	and.w	r3, r3, #2
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d010      	beq.n	80093e6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	689a      	ldr	r2, [r3, #8]
 80093c8:	4b31      	ldr	r3, [pc, #196]	; (8009490 <HAL_RCC_ClockConfig+0x1f0>)
 80093ca:	689b      	ldr	r3, [r3, #8]
 80093cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d208      	bcs.n	80093e6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80093d4:	4b2e      	ldr	r3, [pc, #184]	; (8009490 <HAL_RCC_ClockConfig+0x1f0>)
 80093d6:	689b      	ldr	r3, [r3, #8]
 80093d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	689b      	ldr	r3, [r3, #8]
 80093e0:	492b      	ldr	r1, [pc, #172]	; (8009490 <HAL_RCC_ClockConfig+0x1f0>)
 80093e2:	4313      	orrs	r3, r2
 80093e4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80093e6:	4b29      	ldr	r3, [pc, #164]	; (800948c <HAL_RCC_ClockConfig+0x1ec>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f003 0307 	and.w	r3, r3, #7
 80093ee:	683a      	ldr	r2, [r7, #0]
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d210      	bcs.n	8009416 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80093f4:	4b25      	ldr	r3, [pc, #148]	; (800948c <HAL_RCC_ClockConfig+0x1ec>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f023 0207 	bic.w	r2, r3, #7
 80093fc:	4923      	ldr	r1, [pc, #140]	; (800948c <HAL_RCC_ClockConfig+0x1ec>)
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	4313      	orrs	r3, r2
 8009402:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009404:	4b21      	ldr	r3, [pc, #132]	; (800948c <HAL_RCC_ClockConfig+0x1ec>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f003 0307 	and.w	r3, r3, #7
 800940c:	683a      	ldr	r2, [r7, #0]
 800940e:	429a      	cmp	r2, r3
 8009410:	d001      	beq.n	8009416 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8009412:	2301      	movs	r3, #1
 8009414:	e036      	b.n	8009484 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f003 0304 	and.w	r3, r3, #4
 800941e:	2b00      	cmp	r3, #0
 8009420:	d008      	beq.n	8009434 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009422:	4b1b      	ldr	r3, [pc, #108]	; (8009490 <HAL_RCC_ClockConfig+0x1f0>)
 8009424:	689b      	ldr	r3, [r3, #8]
 8009426:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	68db      	ldr	r3, [r3, #12]
 800942e:	4918      	ldr	r1, [pc, #96]	; (8009490 <HAL_RCC_ClockConfig+0x1f0>)
 8009430:	4313      	orrs	r3, r2
 8009432:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f003 0308 	and.w	r3, r3, #8
 800943c:	2b00      	cmp	r3, #0
 800943e:	d009      	beq.n	8009454 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009440:	4b13      	ldr	r3, [pc, #76]	; (8009490 <HAL_RCC_ClockConfig+0x1f0>)
 8009442:	689b      	ldr	r3, [r3, #8]
 8009444:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	691b      	ldr	r3, [r3, #16]
 800944c:	00db      	lsls	r3, r3, #3
 800944e:	4910      	ldr	r1, [pc, #64]	; (8009490 <HAL_RCC_ClockConfig+0x1f0>)
 8009450:	4313      	orrs	r3, r2
 8009452:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009454:	f000 f824 	bl	80094a0 <HAL_RCC_GetSysClockFreq>
 8009458:	4602      	mov	r2, r0
 800945a:	4b0d      	ldr	r3, [pc, #52]	; (8009490 <HAL_RCC_ClockConfig+0x1f0>)
 800945c:	689b      	ldr	r3, [r3, #8]
 800945e:	091b      	lsrs	r3, r3, #4
 8009460:	f003 030f 	and.w	r3, r3, #15
 8009464:	490b      	ldr	r1, [pc, #44]	; (8009494 <HAL_RCC_ClockConfig+0x1f4>)
 8009466:	5ccb      	ldrb	r3, [r1, r3]
 8009468:	f003 031f 	and.w	r3, r3, #31
 800946c:	fa22 f303 	lsr.w	r3, r2, r3
 8009470:	4a09      	ldr	r2, [pc, #36]	; (8009498 <HAL_RCC_ClockConfig+0x1f8>)
 8009472:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009474:	4b09      	ldr	r3, [pc, #36]	; (800949c <HAL_RCC_ClockConfig+0x1fc>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4618      	mov	r0, r3
 800947a:	f7fd f803 	bl	8006484 <HAL_InitTick>
 800947e:	4603      	mov	r3, r0
 8009480:	72fb      	strb	r3, [r7, #11]

  return status;
 8009482:	7afb      	ldrb	r3, [r7, #11]
}
 8009484:	4618      	mov	r0, r3
 8009486:	3710      	adds	r7, #16
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}
 800948c:	40022000 	.word	0x40022000
 8009490:	40021000 	.word	0x40021000
 8009494:	08013ddc 	.word	0x08013ddc
 8009498:	200001f4 	.word	0x200001f4
 800949c:	20000224 	.word	0x20000224

080094a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b089      	sub	sp, #36	; 0x24
 80094a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80094a6:	2300      	movs	r3, #0
 80094a8:	61fb      	str	r3, [r7, #28]
 80094aa:	2300      	movs	r3, #0
 80094ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80094ae:	4b3e      	ldr	r3, [pc, #248]	; (80095a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80094b0:	689b      	ldr	r3, [r3, #8]
 80094b2:	f003 030c 	and.w	r3, r3, #12
 80094b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80094b8:	4b3b      	ldr	r3, [pc, #236]	; (80095a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80094ba:	68db      	ldr	r3, [r3, #12]
 80094bc:	f003 0303 	and.w	r3, r3, #3
 80094c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d005      	beq.n	80094d4 <HAL_RCC_GetSysClockFreq+0x34>
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	2b0c      	cmp	r3, #12
 80094cc:	d121      	bne.n	8009512 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d11e      	bne.n	8009512 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80094d4:	4b34      	ldr	r3, [pc, #208]	; (80095a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f003 0308 	and.w	r3, r3, #8
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d107      	bne.n	80094f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80094e0:	4b31      	ldr	r3, [pc, #196]	; (80095a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80094e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80094e6:	0a1b      	lsrs	r3, r3, #8
 80094e8:	f003 030f 	and.w	r3, r3, #15
 80094ec:	61fb      	str	r3, [r7, #28]
 80094ee:	e005      	b.n	80094fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80094f0:	4b2d      	ldr	r3, [pc, #180]	; (80095a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	091b      	lsrs	r3, r3, #4
 80094f6:	f003 030f 	and.w	r3, r3, #15
 80094fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80094fc:	4a2b      	ldr	r2, [pc, #172]	; (80095ac <HAL_RCC_GetSysClockFreq+0x10c>)
 80094fe:	69fb      	ldr	r3, [r7, #28]
 8009500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009504:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d10d      	bne.n	8009528 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800950c:	69fb      	ldr	r3, [r7, #28]
 800950e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009510:	e00a      	b.n	8009528 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	2b04      	cmp	r3, #4
 8009516:	d102      	bne.n	800951e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009518:	4b25      	ldr	r3, [pc, #148]	; (80095b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800951a:	61bb      	str	r3, [r7, #24]
 800951c:	e004      	b.n	8009528 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	2b08      	cmp	r3, #8
 8009522:	d101      	bne.n	8009528 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009524:	4b23      	ldr	r3, [pc, #140]	; (80095b4 <HAL_RCC_GetSysClockFreq+0x114>)
 8009526:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	2b0c      	cmp	r3, #12
 800952c:	d134      	bne.n	8009598 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800952e:	4b1e      	ldr	r3, [pc, #120]	; (80095a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009530:	68db      	ldr	r3, [r3, #12]
 8009532:	f003 0303 	and.w	r3, r3, #3
 8009536:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	2b02      	cmp	r3, #2
 800953c:	d003      	beq.n	8009546 <HAL_RCC_GetSysClockFreq+0xa6>
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	2b03      	cmp	r3, #3
 8009542:	d003      	beq.n	800954c <HAL_RCC_GetSysClockFreq+0xac>
 8009544:	e005      	b.n	8009552 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8009546:	4b1a      	ldr	r3, [pc, #104]	; (80095b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8009548:	617b      	str	r3, [r7, #20]
      break;
 800954a:	e005      	b.n	8009558 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800954c:	4b19      	ldr	r3, [pc, #100]	; (80095b4 <HAL_RCC_GetSysClockFreq+0x114>)
 800954e:	617b      	str	r3, [r7, #20]
      break;
 8009550:	e002      	b.n	8009558 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8009552:	69fb      	ldr	r3, [r7, #28]
 8009554:	617b      	str	r3, [r7, #20]
      break;
 8009556:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009558:	4b13      	ldr	r3, [pc, #76]	; (80095a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	091b      	lsrs	r3, r3, #4
 800955e:	f003 0307 	and.w	r3, r3, #7
 8009562:	3301      	adds	r3, #1
 8009564:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009566:	4b10      	ldr	r3, [pc, #64]	; (80095a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009568:	68db      	ldr	r3, [r3, #12]
 800956a:	0a1b      	lsrs	r3, r3, #8
 800956c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009570:	697a      	ldr	r2, [r7, #20]
 8009572:	fb03 f202 	mul.w	r2, r3, r2
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	fbb2 f3f3 	udiv	r3, r2, r3
 800957c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800957e:	4b0a      	ldr	r3, [pc, #40]	; (80095a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	0e5b      	lsrs	r3, r3, #25
 8009584:	f003 0303 	and.w	r3, r3, #3
 8009588:	3301      	adds	r3, #1
 800958a:	005b      	lsls	r3, r3, #1
 800958c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800958e:	697a      	ldr	r2, [r7, #20]
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	fbb2 f3f3 	udiv	r3, r2, r3
 8009596:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8009598:	69bb      	ldr	r3, [r7, #24]
}
 800959a:	4618      	mov	r0, r3
 800959c:	3724      	adds	r7, #36	; 0x24
 800959e:	46bd      	mov	sp, r7
 80095a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a4:	4770      	bx	lr
 80095a6:	bf00      	nop
 80095a8:	40021000 	.word	0x40021000
 80095ac:	08013df4 	.word	0x08013df4
 80095b0:	00f42400 	.word	0x00f42400
 80095b4:	007a1200 	.word	0x007a1200

080095b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80095b8:	b480      	push	{r7}
 80095ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80095bc:	4b03      	ldr	r3, [pc, #12]	; (80095cc <HAL_RCC_GetHCLKFreq+0x14>)
 80095be:	681b      	ldr	r3, [r3, #0]
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	46bd      	mov	sp, r7
 80095c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c8:	4770      	bx	lr
 80095ca:	bf00      	nop
 80095cc:	200001f4 	.word	0x200001f4

080095d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80095d4:	f7ff fff0 	bl	80095b8 <HAL_RCC_GetHCLKFreq>
 80095d8:	4602      	mov	r2, r0
 80095da:	4b06      	ldr	r3, [pc, #24]	; (80095f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80095dc:	689b      	ldr	r3, [r3, #8]
 80095de:	0a1b      	lsrs	r3, r3, #8
 80095e0:	f003 0307 	and.w	r3, r3, #7
 80095e4:	4904      	ldr	r1, [pc, #16]	; (80095f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80095e6:	5ccb      	ldrb	r3, [r1, r3]
 80095e8:	f003 031f 	and.w	r3, r3, #31
 80095ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	bd80      	pop	{r7, pc}
 80095f4:	40021000 	.word	0x40021000
 80095f8:	08013dec 	.word	0x08013dec

080095fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009600:	f7ff ffda 	bl	80095b8 <HAL_RCC_GetHCLKFreq>
 8009604:	4602      	mov	r2, r0
 8009606:	4b06      	ldr	r3, [pc, #24]	; (8009620 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009608:	689b      	ldr	r3, [r3, #8]
 800960a:	0adb      	lsrs	r3, r3, #11
 800960c:	f003 0307 	and.w	r3, r3, #7
 8009610:	4904      	ldr	r1, [pc, #16]	; (8009624 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009612:	5ccb      	ldrb	r3, [r1, r3]
 8009614:	f003 031f 	and.w	r3, r3, #31
 8009618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800961c:	4618      	mov	r0, r3
 800961e:	bd80      	pop	{r7, pc}
 8009620:	40021000 	.word	0x40021000
 8009624:	08013dec 	.word	0x08013dec

08009628 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b086      	sub	sp, #24
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009630:	2300      	movs	r3, #0
 8009632:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009634:	4b2a      	ldr	r3, [pc, #168]	; (80096e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800963c:	2b00      	cmp	r3, #0
 800963e:	d003      	beq.n	8009648 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009640:	f7ff f9ee 	bl	8008a20 <HAL_PWREx_GetVoltageRange>
 8009644:	6178      	str	r0, [r7, #20]
 8009646:	e014      	b.n	8009672 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009648:	4b25      	ldr	r3, [pc, #148]	; (80096e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800964a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800964c:	4a24      	ldr	r2, [pc, #144]	; (80096e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800964e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009652:	6593      	str	r3, [r2, #88]	; 0x58
 8009654:	4b22      	ldr	r3, [pc, #136]	; (80096e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800965c:	60fb      	str	r3, [r7, #12]
 800965e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009660:	f7ff f9de 	bl	8008a20 <HAL_PWREx_GetVoltageRange>
 8009664:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009666:	4b1e      	ldr	r3, [pc, #120]	; (80096e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800966a:	4a1d      	ldr	r2, [pc, #116]	; (80096e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800966c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009670:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009678:	d10b      	bne.n	8009692 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2b80      	cmp	r3, #128	; 0x80
 800967e:	d919      	bls.n	80096b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2ba0      	cmp	r3, #160	; 0xa0
 8009684:	d902      	bls.n	800968c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009686:	2302      	movs	r3, #2
 8009688:	613b      	str	r3, [r7, #16]
 800968a:	e013      	b.n	80096b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800968c:	2301      	movs	r3, #1
 800968e:	613b      	str	r3, [r7, #16]
 8009690:	e010      	b.n	80096b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2b80      	cmp	r3, #128	; 0x80
 8009696:	d902      	bls.n	800969e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8009698:	2303      	movs	r3, #3
 800969a:	613b      	str	r3, [r7, #16]
 800969c:	e00a      	b.n	80096b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2b80      	cmp	r3, #128	; 0x80
 80096a2:	d102      	bne.n	80096aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80096a4:	2302      	movs	r3, #2
 80096a6:	613b      	str	r3, [r7, #16]
 80096a8:	e004      	b.n	80096b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2b70      	cmp	r3, #112	; 0x70
 80096ae:	d101      	bne.n	80096b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80096b0:	2301      	movs	r3, #1
 80096b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80096b4:	4b0b      	ldr	r3, [pc, #44]	; (80096e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f023 0207 	bic.w	r2, r3, #7
 80096bc:	4909      	ldr	r1, [pc, #36]	; (80096e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	4313      	orrs	r3, r2
 80096c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80096c4:	4b07      	ldr	r3, [pc, #28]	; (80096e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f003 0307 	and.w	r3, r3, #7
 80096cc:	693a      	ldr	r2, [r7, #16]
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d001      	beq.n	80096d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80096d2:	2301      	movs	r3, #1
 80096d4:	e000      	b.n	80096d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80096d6:	2300      	movs	r3, #0
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3718      	adds	r7, #24
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}
 80096e0:	40021000 	.word	0x40021000
 80096e4:	40022000 	.word	0x40022000

080096e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b086      	sub	sp, #24
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80096f0:	2300      	movs	r3, #0
 80096f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80096f4:	2300      	movs	r3, #0
 80096f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009700:	2b00      	cmp	r3, #0
 8009702:	d041      	beq.n	8009788 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009708:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800970c:	d02a      	beq.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800970e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009712:	d824      	bhi.n	800975e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009714:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009718:	d008      	beq.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800971a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800971e:	d81e      	bhi.n	800975e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009720:	2b00      	cmp	r3, #0
 8009722:	d00a      	beq.n	800973a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009724:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009728:	d010      	beq.n	800974c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800972a:	e018      	b.n	800975e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800972c:	4b86      	ldr	r3, [pc, #536]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800972e:	68db      	ldr	r3, [r3, #12]
 8009730:	4a85      	ldr	r2, [pc, #532]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009736:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009738:	e015      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	3304      	adds	r3, #4
 800973e:	2100      	movs	r1, #0
 8009740:	4618      	mov	r0, r3
 8009742:	f000 fabb 	bl	8009cbc <RCCEx_PLLSAI1_Config>
 8009746:	4603      	mov	r3, r0
 8009748:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800974a:	e00c      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	3320      	adds	r3, #32
 8009750:	2100      	movs	r1, #0
 8009752:	4618      	mov	r0, r3
 8009754:	f000 fba6 	bl	8009ea4 <RCCEx_PLLSAI2_Config>
 8009758:	4603      	mov	r3, r0
 800975a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800975c:	e003      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800975e:	2301      	movs	r3, #1
 8009760:	74fb      	strb	r3, [r7, #19]
      break;
 8009762:	e000      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009764:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009766:	7cfb      	ldrb	r3, [r7, #19]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d10b      	bne.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800976c:	4b76      	ldr	r3, [pc, #472]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800976e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009772:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800977a:	4973      	ldr	r1, [pc, #460]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800977c:	4313      	orrs	r3, r2
 800977e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8009782:	e001      	b.n	8009788 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009784:	7cfb      	ldrb	r3, [r7, #19]
 8009786:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009790:	2b00      	cmp	r3, #0
 8009792:	d041      	beq.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009798:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800979c:	d02a      	beq.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800979e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80097a2:	d824      	bhi.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80097a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80097a8:	d008      	beq.n	80097bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80097aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80097ae:	d81e      	bhi.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d00a      	beq.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80097b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80097b8:	d010      	beq.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80097ba:	e018      	b.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80097bc:	4b62      	ldr	r3, [pc, #392]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80097be:	68db      	ldr	r3, [r3, #12]
 80097c0:	4a61      	ldr	r2, [pc, #388]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80097c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097c6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80097c8:	e015      	b.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	3304      	adds	r3, #4
 80097ce:	2100      	movs	r1, #0
 80097d0:	4618      	mov	r0, r3
 80097d2:	f000 fa73 	bl	8009cbc <RCCEx_PLLSAI1_Config>
 80097d6:	4603      	mov	r3, r0
 80097d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80097da:	e00c      	b.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	3320      	adds	r3, #32
 80097e0:	2100      	movs	r1, #0
 80097e2:	4618      	mov	r0, r3
 80097e4:	f000 fb5e 	bl	8009ea4 <RCCEx_PLLSAI2_Config>
 80097e8:	4603      	mov	r3, r0
 80097ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80097ec:	e003      	b.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80097ee:	2301      	movs	r3, #1
 80097f0:	74fb      	strb	r3, [r7, #19]
      break;
 80097f2:	e000      	b.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80097f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097f6:	7cfb      	ldrb	r3, [r7, #19]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d10b      	bne.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80097fc:	4b52      	ldr	r3, [pc, #328]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80097fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009802:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800980a:	494f      	ldr	r1, [pc, #316]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800980c:	4313      	orrs	r3, r2
 800980e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8009812:	e001      	b.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009814:	7cfb      	ldrb	r3, [r7, #19]
 8009816:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009820:	2b00      	cmp	r3, #0
 8009822:	f000 80a0 	beq.w	8009966 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009826:	2300      	movs	r3, #0
 8009828:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800982a:	4b47      	ldr	r3, [pc, #284]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800982c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800982e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009832:	2b00      	cmp	r3, #0
 8009834:	d101      	bne.n	800983a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8009836:	2301      	movs	r3, #1
 8009838:	e000      	b.n	800983c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800983a:	2300      	movs	r3, #0
 800983c:	2b00      	cmp	r3, #0
 800983e:	d00d      	beq.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009840:	4b41      	ldr	r3, [pc, #260]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009844:	4a40      	ldr	r2, [pc, #256]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800984a:	6593      	str	r3, [r2, #88]	; 0x58
 800984c:	4b3e      	ldr	r3, [pc, #248]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800984e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009854:	60bb      	str	r3, [r7, #8]
 8009856:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009858:	2301      	movs	r3, #1
 800985a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800985c:	4b3b      	ldr	r3, [pc, #236]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a3a      	ldr	r2, [pc, #232]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009866:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009868:	f7fc fe5c 	bl	8006524 <HAL_GetTick>
 800986c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800986e:	e009      	b.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009870:	f7fc fe58 	bl	8006524 <HAL_GetTick>
 8009874:	4602      	mov	r2, r0
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	1ad3      	subs	r3, r2, r3
 800987a:	2b02      	cmp	r3, #2
 800987c:	d902      	bls.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800987e:	2303      	movs	r3, #3
 8009880:	74fb      	strb	r3, [r7, #19]
        break;
 8009882:	e005      	b.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009884:	4b31      	ldr	r3, [pc, #196]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800988c:	2b00      	cmp	r3, #0
 800988e:	d0ef      	beq.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8009890:	7cfb      	ldrb	r3, [r7, #19]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d15c      	bne.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009896:	4b2c      	ldr	r3, [pc, #176]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800989c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d01f      	beq.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098ae:	697a      	ldr	r2, [r7, #20]
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d019      	beq.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80098b4:	4b24      	ldr	r3, [pc, #144]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80098b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80098c0:	4b21      	ldr	r3, [pc, #132]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80098c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098c6:	4a20      	ldr	r2, [pc, #128]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80098c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80098d0:	4b1d      	ldr	r3, [pc, #116]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80098d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098d6:	4a1c      	ldr	r2, [pc, #112]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80098d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80098e0:	4a19      	ldr	r2, [pc, #100]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	f003 0301 	and.w	r3, r3, #1
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d016      	beq.n	8009920 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098f2:	f7fc fe17 	bl	8006524 <HAL_GetTick>
 80098f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80098f8:	e00b      	b.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80098fa:	f7fc fe13 	bl	8006524 <HAL_GetTick>
 80098fe:	4602      	mov	r2, r0
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	1ad3      	subs	r3, r2, r3
 8009904:	f241 3288 	movw	r2, #5000	; 0x1388
 8009908:	4293      	cmp	r3, r2
 800990a:	d902      	bls.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800990c:	2303      	movs	r3, #3
 800990e:	74fb      	strb	r3, [r7, #19]
            break;
 8009910:	e006      	b.n	8009920 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009912:	4b0d      	ldr	r3, [pc, #52]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009918:	f003 0302 	and.w	r3, r3, #2
 800991c:	2b00      	cmp	r3, #0
 800991e:	d0ec      	beq.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8009920:	7cfb      	ldrb	r3, [r7, #19]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d10c      	bne.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009926:	4b08      	ldr	r3, [pc, #32]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800992c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009936:	4904      	ldr	r1, [pc, #16]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009938:	4313      	orrs	r3, r2
 800993a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800993e:	e009      	b.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009940:	7cfb      	ldrb	r3, [r7, #19]
 8009942:	74bb      	strb	r3, [r7, #18]
 8009944:	e006      	b.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8009946:	bf00      	nop
 8009948:	40021000 	.word	0x40021000
 800994c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009950:	7cfb      	ldrb	r3, [r7, #19]
 8009952:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009954:	7c7b      	ldrb	r3, [r7, #17]
 8009956:	2b01      	cmp	r3, #1
 8009958:	d105      	bne.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800995a:	4b9e      	ldr	r3, [pc, #632]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800995c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800995e:	4a9d      	ldr	r2, [pc, #628]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009960:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009964:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f003 0301 	and.w	r3, r3, #1
 800996e:	2b00      	cmp	r3, #0
 8009970:	d00a      	beq.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009972:	4b98      	ldr	r3, [pc, #608]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009978:	f023 0203 	bic.w	r2, r3, #3
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009980:	4994      	ldr	r1, [pc, #592]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009982:	4313      	orrs	r3, r2
 8009984:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f003 0302 	and.w	r3, r3, #2
 8009990:	2b00      	cmp	r3, #0
 8009992:	d00a      	beq.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009994:	4b8f      	ldr	r3, [pc, #572]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800999a:	f023 020c 	bic.w	r2, r3, #12
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099a2:	498c      	ldr	r1, [pc, #560]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80099a4:	4313      	orrs	r3, r2
 80099a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f003 0304 	and.w	r3, r3, #4
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d00a      	beq.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80099b6:	4b87      	ldr	r3, [pc, #540]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80099b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099c4:	4983      	ldr	r1, [pc, #524]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80099c6:	4313      	orrs	r3, r2
 80099c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f003 0308 	and.w	r3, r3, #8
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d00a      	beq.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80099d8:	4b7e      	ldr	r3, [pc, #504]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80099da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099e6:	497b      	ldr	r1, [pc, #492]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80099e8:	4313      	orrs	r3, r2
 80099ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f003 0310 	and.w	r3, r3, #16
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00a      	beq.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80099fa:	4b76      	ldr	r3, [pc, #472]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80099fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a08:	4972      	ldr	r1, [pc, #456]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f003 0320 	and.w	r3, r3, #32
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d00a      	beq.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009a1c:	4b6d      	ldr	r3, [pc, #436]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a22:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a2a:	496a      	ldr	r1, [pc, #424]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d00a      	beq.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009a3e:	4b65      	ldr	r3, [pc, #404]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a4c:	4961      	ldr	r1, [pc, #388]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d00a      	beq.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009a60:	4b5c      	ldr	r3, [pc, #368]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a6e:	4959      	ldr	r1, [pc, #356]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009a70:	4313      	orrs	r3, r2
 8009a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d00a      	beq.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009a82:	4b54      	ldr	r3, [pc, #336]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a88:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a90:	4950      	ldr	r1, [pc, #320]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009a92:	4313      	orrs	r3, r2
 8009a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d00a      	beq.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009aa4:	4b4b      	ldr	r3, [pc, #300]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009aaa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ab2:	4948      	ldr	r1, [pc, #288]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d00a      	beq.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009ac6:	4b43      	ldr	r3, [pc, #268]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009acc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ad4:	493f      	ldr	r1, [pc, #252]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d028      	beq.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009ae8:	4b3a      	ldr	r3, [pc, #232]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009aee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009af6:	4937      	ldr	r1, [pc, #220]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009af8:	4313      	orrs	r3, r2
 8009afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b06:	d106      	bne.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009b08:	4b32      	ldr	r3, [pc, #200]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009b0a:	68db      	ldr	r3, [r3, #12]
 8009b0c:	4a31      	ldr	r2, [pc, #196]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009b0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b12:	60d3      	str	r3, [r2, #12]
 8009b14:	e011      	b.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009b1e:	d10c      	bne.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	3304      	adds	r3, #4
 8009b24:	2101      	movs	r1, #1
 8009b26:	4618      	mov	r0, r3
 8009b28:	f000 f8c8 	bl	8009cbc <RCCEx_PLLSAI1_Config>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8009b30:	7cfb      	ldrb	r3, [r7, #19]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d001      	beq.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8009b36:	7cfb      	ldrb	r3, [r7, #19]
 8009b38:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d028      	beq.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009b46:	4b23      	ldr	r3, [pc, #140]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b4c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b54:	491f      	ldr	r1, [pc, #124]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009b56:	4313      	orrs	r3, r2
 8009b58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b64:	d106      	bne.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009b66:	4b1b      	ldr	r3, [pc, #108]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009b68:	68db      	ldr	r3, [r3, #12]
 8009b6a:	4a1a      	ldr	r2, [pc, #104]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009b6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b70:	60d3      	str	r3, [r2, #12]
 8009b72:	e011      	b.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009b7c:	d10c      	bne.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	3304      	adds	r3, #4
 8009b82:	2101      	movs	r1, #1
 8009b84:	4618      	mov	r0, r3
 8009b86:	f000 f899 	bl	8009cbc <RCCEx_PLLSAI1_Config>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009b8e:	7cfb      	ldrb	r3, [r7, #19]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d001      	beq.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8009b94:	7cfb      	ldrb	r3, [r7, #19]
 8009b96:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d02b      	beq.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009ba4:	4b0b      	ldr	r3, [pc, #44]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009baa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bb2:	4908      	ldr	r1, [pc, #32]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009bc2:	d109      	bne.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009bc4:	4b03      	ldr	r3, [pc, #12]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009bc6:	68db      	ldr	r3, [r3, #12]
 8009bc8:	4a02      	ldr	r2, [pc, #8]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009bca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009bce:	60d3      	str	r3, [r2, #12]
 8009bd0:	e014      	b.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8009bd2:	bf00      	nop
 8009bd4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bdc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009be0:	d10c      	bne.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	3304      	adds	r3, #4
 8009be6:	2101      	movs	r1, #1
 8009be8:	4618      	mov	r0, r3
 8009bea:	f000 f867 	bl	8009cbc <RCCEx_PLLSAI1_Config>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009bf2:	7cfb      	ldrb	r3, [r7, #19]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d001      	beq.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8009bf8:	7cfb      	ldrb	r3, [r7, #19]
 8009bfa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d02f      	beq.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009c08:	4b2b      	ldr	r3, [pc, #172]	; (8009cb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c16:	4928      	ldr	r1, [pc, #160]	; (8009cb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c26:	d10d      	bne.n	8009c44 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	3304      	adds	r3, #4
 8009c2c:	2102      	movs	r1, #2
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f000 f844 	bl	8009cbc <RCCEx_PLLSAI1_Config>
 8009c34:	4603      	mov	r3, r0
 8009c36:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009c38:	7cfb      	ldrb	r3, [r7, #19]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d014      	beq.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8009c3e:	7cfb      	ldrb	r3, [r7, #19]
 8009c40:	74bb      	strb	r3, [r7, #18]
 8009c42:	e011      	b.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c4c:	d10c      	bne.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	3320      	adds	r3, #32
 8009c52:	2102      	movs	r1, #2
 8009c54:	4618      	mov	r0, r3
 8009c56:	f000 f925 	bl	8009ea4 <RCCEx_PLLSAI2_Config>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009c5e:	7cfb      	ldrb	r3, [r7, #19]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d001      	beq.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8009c64:	7cfb      	ldrb	r3, [r7, #19]
 8009c66:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d00a      	beq.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009c74:	4b10      	ldr	r3, [pc, #64]	; (8009cb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c7a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c82:	490d      	ldr	r1, [pc, #52]	; (8009cb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009c84:	4313      	orrs	r3, r2
 8009c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d00b      	beq.n	8009cae <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009c96:	4b08      	ldr	r3, [pc, #32]	; (8009cb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c9c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ca6:	4904      	ldr	r1, [pc, #16]	; (8009cb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009cae:	7cbb      	ldrb	r3, [r7, #18]
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3718      	adds	r7, #24
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}
 8009cb8:	40021000 	.word	0x40021000

08009cbc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b084      	sub	sp, #16
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009cca:	4b75      	ldr	r3, [pc, #468]	; (8009ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009ccc:	68db      	ldr	r3, [r3, #12]
 8009cce:	f003 0303 	and.w	r3, r3, #3
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d018      	beq.n	8009d08 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8009cd6:	4b72      	ldr	r3, [pc, #456]	; (8009ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009cd8:	68db      	ldr	r3, [r3, #12]
 8009cda:	f003 0203 	and.w	r2, r3, #3
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d10d      	bne.n	8009d02 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
       ||
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d009      	beq.n	8009d02 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8009cee:	4b6c      	ldr	r3, [pc, #432]	; (8009ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009cf0:	68db      	ldr	r3, [r3, #12]
 8009cf2:	091b      	lsrs	r3, r3, #4
 8009cf4:	f003 0307 	and.w	r3, r3, #7
 8009cf8:	1c5a      	adds	r2, r3, #1
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	685b      	ldr	r3, [r3, #4]
       ||
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d047      	beq.n	8009d92 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8009d02:	2301      	movs	r3, #1
 8009d04:	73fb      	strb	r3, [r7, #15]
 8009d06:	e044      	b.n	8009d92 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	2b03      	cmp	r3, #3
 8009d0e:	d018      	beq.n	8009d42 <RCCEx_PLLSAI1_Config+0x86>
 8009d10:	2b03      	cmp	r3, #3
 8009d12:	d825      	bhi.n	8009d60 <RCCEx_PLLSAI1_Config+0xa4>
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	d002      	beq.n	8009d1e <RCCEx_PLLSAI1_Config+0x62>
 8009d18:	2b02      	cmp	r3, #2
 8009d1a:	d009      	beq.n	8009d30 <RCCEx_PLLSAI1_Config+0x74>
 8009d1c:	e020      	b.n	8009d60 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009d1e:	4b60      	ldr	r3, [pc, #384]	; (8009ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f003 0302 	and.w	r3, r3, #2
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d11d      	bne.n	8009d66 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009d2e:	e01a      	b.n	8009d66 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009d30:	4b5b      	ldr	r3, [pc, #364]	; (8009ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d116      	bne.n	8009d6a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009d40:	e013      	b.n	8009d6a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009d42:	4b57      	ldr	r3, [pc, #348]	; (8009ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d10f      	bne.n	8009d6e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009d4e:	4b54      	ldr	r3, [pc, #336]	; (8009ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d109      	bne.n	8009d6e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009d5e:	e006      	b.n	8009d6e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009d60:	2301      	movs	r3, #1
 8009d62:	73fb      	strb	r3, [r7, #15]
      break;
 8009d64:	e004      	b.n	8009d70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009d66:	bf00      	nop
 8009d68:	e002      	b.n	8009d70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009d6a:	bf00      	nop
 8009d6c:	e000      	b.n	8009d70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009d6e:	bf00      	nop
    }

    if(status == HAL_OK)
 8009d70:	7bfb      	ldrb	r3, [r7, #15]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d10d      	bne.n	8009d92 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009d76:	4b4a      	ldr	r3, [pc, #296]	; (8009ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009d78:	68db      	ldr	r3, [r3, #12]
 8009d7a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6819      	ldr	r1, [r3, #0]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	3b01      	subs	r3, #1
 8009d88:	011b      	lsls	r3, r3, #4
 8009d8a:	430b      	orrs	r3, r1
 8009d8c:	4944      	ldr	r1, [pc, #272]	; (8009ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009d92:	7bfb      	ldrb	r3, [r7, #15]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d17d      	bne.n	8009e94 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009d98:	4b41      	ldr	r3, [pc, #260]	; (8009ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a40      	ldr	r2, [pc, #256]	; (8009ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009d9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009da2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009da4:	f7fc fbbe 	bl	8006524 <HAL_GetTick>
 8009da8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009daa:	e009      	b.n	8009dc0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009dac:	f7fc fbba 	bl	8006524 <HAL_GetTick>
 8009db0:	4602      	mov	r2, r0
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	1ad3      	subs	r3, r2, r3
 8009db6:	2b02      	cmp	r3, #2
 8009db8:	d902      	bls.n	8009dc0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8009dba:	2303      	movs	r3, #3
 8009dbc:	73fb      	strb	r3, [r7, #15]
        break;
 8009dbe:	e005      	b.n	8009dcc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009dc0:	4b37      	ldr	r3, [pc, #220]	; (8009ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d1ef      	bne.n	8009dac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009dcc:	7bfb      	ldrb	r3, [r7, #15]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d160      	bne.n	8009e94 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d111      	bne.n	8009dfc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009dd8:	4b31      	ldr	r3, [pc, #196]	; (8009ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009dda:	691b      	ldr	r3, [r3, #16]
 8009ddc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8009de0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009de4:	687a      	ldr	r2, [r7, #4]
 8009de6:	6892      	ldr	r2, [r2, #8]
 8009de8:	0211      	lsls	r1, r2, #8
 8009dea:	687a      	ldr	r2, [r7, #4]
 8009dec:	68d2      	ldr	r2, [r2, #12]
 8009dee:	0912      	lsrs	r2, r2, #4
 8009df0:	0452      	lsls	r2, r2, #17
 8009df2:	430a      	orrs	r2, r1
 8009df4:	492a      	ldr	r1, [pc, #168]	; (8009ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009df6:	4313      	orrs	r3, r2
 8009df8:	610b      	str	r3, [r1, #16]
 8009dfa:	e027      	b.n	8009e4c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	2b01      	cmp	r3, #1
 8009e00:	d112      	bne.n	8009e28 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009e02:	4b27      	ldr	r3, [pc, #156]	; (8009ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009e04:	691b      	ldr	r3, [r3, #16]
 8009e06:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8009e0a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	6892      	ldr	r2, [r2, #8]
 8009e12:	0211      	lsls	r1, r2, #8
 8009e14:	687a      	ldr	r2, [r7, #4]
 8009e16:	6912      	ldr	r2, [r2, #16]
 8009e18:	0852      	lsrs	r2, r2, #1
 8009e1a:	3a01      	subs	r2, #1
 8009e1c:	0552      	lsls	r2, r2, #21
 8009e1e:	430a      	orrs	r2, r1
 8009e20:	491f      	ldr	r1, [pc, #124]	; (8009ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009e22:	4313      	orrs	r3, r2
 8009e24:	610b      	str	r3, [r1, #16]
 8009e26:	e011      	b.n	8009e4c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009e28:	4b1d      	ldr	r3, [pc, #116]	; (8009ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009e2a:	691b      	ldr	r3, [r3, #16]
 8009e2c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009e30:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009e34:	687a      	ldr	r2, [r7, #4]
 8009e36:	6892      	ldr	r2, [r2, #8]
 8009e38:	0211      	lsls	r1, r2, #8
 8009e3a:	687a      	ldr	r2, [r7, #4]
 8009e3c:	6952      	ldr	r2, [r2, #20]
 8009e3e:	0852      	lsrs	r2, r2, #1
 8009e40:	3a01      	subs	r2, #1
 8009e42:	0652      	lsls	r2, r2, #25
 8009e44:	430a      	orrs	r2, r1
 8009e46:	4916      	ldr	r1, [pc, #88]	; (8009ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009e4c:	4b14      	ldr	r3, [pc, #80]	; (8009ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4a13      	ldr	r2, [pc, #76]	; (8009ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009e52:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009e56:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e58:	f7fc fb64 	bl	8006524 <HAL_GetTick>
 8009e5c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009e5e:	e009      	b.n	8009e74 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009e60:	f7fc fb60 	bl	8006524 <HAL_GetTick>
 8009e64:	4602      	mov	r2, r0
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	1ad3      	subs	r3, r2, r3
 8009e6a:	2b02      	cmp	r3, #2
 8009e6c:	d902      	bls.n	8009e74 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8009e6e:	2303      	movs	r3, #3
 8009e70:	73fb      	strb	r3, [r7, #15]
          break;
 8009e72:	e005      	b.n	8009e80 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009e74:	4b0a      	ldr	r3, [pc, #40]	; (8009ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d0ef      	beq.n	8009e60 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8009e80:	7bfb      	ldrb	r3, [r7, #15]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d106      	bne.n	8009e94 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009e86:	4b06      	ldr	r3, [pc, #24]	; (8009ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009e88:	691a      	ldr	r2, [r3, #16]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	699b      	ldr	r3, [r3, #24]
 8009e8e:	4904      	ldr	r1, [pc, #16]	; (8009ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009e90:	4313      	orrs	r3, r2
 8009e92:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3710      	adds	r7, #16
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
 8009e9e:	bf00      	nop
 8009ea0:	40021000 	.word	0x40021000

08009ea4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b084      	sub	sp, #16
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
 8009eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009eb2:	4b6a      	ldr	r3, [pc, #424]	; (800a05c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009eb4:	68db      	ldr	r3, [r3, #12]
 8009eb6:	f003 0303 	and.w	r3, r3, #3
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d018      	beq.n	8009ef0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8009ebe:	4b67      	ldr	r3, [pc, #412]	; (800a05c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009ec0:	68db      	ldr	r3, [r3, #12]
 8009ec2:	f003 0203 	and.w	r2, r3, #3
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d10d      	bne.n	8009eea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
       ||
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d009      	beq.n	8009eea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8009ed6:	4b61      	ldr	r3, [pc, #388]	; (800a05c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	091b      	lsrs	r3, r3, #4
 8009edc:	f003 0307 	and.w	r3, r3, #7
 8009ee0:	1c5a      	adds	r2, r3, #1
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	685b      	ldr	r3, [r3, #4]
       ||
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d047      	beq.n	8009f7a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8009eea:	2301      	movs	r3, #1
 8009eec:	73fb      	strb	r3, [r7, #15]
 8009eee:	e044      	b.n	8009f7a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	2b03      	cmp	r3, #3
 8009ef6:	d018      	beq.n	8009f2a <RCCEx_PLLSAI2_Config+0x86>
 8009ef8:	2b03      	cmp	r3, #3
 8009efa:	d825      	bhi.n	8009f48 <RCCEx_PLLSAI2_Config+0xa4>
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	d002      	beq.n	8009f06 <RCCEx_PLLSAI2_Config+0x62>
 8009f00:	2b02      	cmp	r3, #2
 8009f02:	d009      	beq.n	8009f18 <RCCEx_PLLSAI2_Config+0x74>
 8009f04:	e020      	b.n	8009f48 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009f06:	4b55      	ldr	r3, [pc, #340]	; (800a05c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f003 0302 	and.w	r3, r3, #2
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d11d      	bne.n	8009f4e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8009f12:	2301      	movs	r3, #1
 8009f14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009f16:	e01a      	b.n	8009f4e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009f18:	4b50      	ldr	r3, [pc, #320]	; (800a05c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d116      	bne.n	8009f52 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8009f24:	2301      	movs	r3, #1
 8009f26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009f28:	e013      	b.n	8009f52 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009f2a:	4b4c      	ldr	r3, [pc, #304]	; (800a05c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d10f      	bne.n	8009f56 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009f36:	4b49      	ldr	r3, [pc, #292]	; (800a05c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d109      	bne.n	8009f56 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8009f42:	2301      	movs	r3, #1
 8009f44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009f46:	e006      	b.n	8009f56 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	73fb      	strb	r3, [r7, #15]
      break;
 8009f4c:	e004      	b.n	8009f58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009f4e:	bf00      	nop
 8009f50:	e002      	b.n	8009f58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009f52:	bf00      	nop
 8009f54:	e000      	b.n	8009f58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009f56:	bf00      	nop
    }

    if(status == HAL_OK)
 8009f58:	7bfb      	ldrb	r3, [r7, #15]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d10d      	bne.n	8009f7a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009f5e:	4b3f      	ldr	r3, [pc, #252]	; (800a05c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009f60:	68db      	ldr	r3, [r3, #12]
 8009f62:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6819      	ldr	r1, [r3, #0]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	3b01      	subs	r3, #1
 8009f70:	011b      	lsls	r3, r3, #4
 8009f72:	430b      	orrs	r3, r1
 8009f74:	4939      	ldr	r1, [pc, #228]	; (800a05c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009f76:	4313      	orrs	r3, r2
 8009f78:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009f7a:	7bfb      	ldrb	r3, [r7, #15]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d167      	bne.n	800a050 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8009f80:	4b36      	ldr	r3, [pc, #216]	; (800a05c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4a35      	ldr	r2, [pc, #212]	; (800a05c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009f86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f8c:	f7fc faca 	bl	8006524 <HAL_GetTick>
 8009f90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009f92:	e009      	b.n	8009fa8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009f94:	f7fc fac6 	bl	8006524 <HAL_GetTick>
 8009f98:	4602      	mov	r2, r0
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	1ad3      	subs	r3, r2, r3
 8009f9e:	2b02      	cmp	r3, #2
 8009fa0:	d902      	bls.n	8009fa8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8009fa2:	2303      	movs	r3, #3
 8009fa4:	73fb      	strb	r3, [r7, #15]
        break;
 8009fa6:	e005      	b.n	8009fb4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009fa8:	4b2c      	ldr	r3, [pc, #176]	; (800a05c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d1ef      	bne.n	8009f94 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009fb4:	7bfb      	ldrb	r3, [r7, #15]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d14a      	bne.n	800a050 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d111      	bne.n	8009fe4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009fc0:	4b26      	ldr	r3, [pc, #152]	; (800a05c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009fc2:	695b      	ldr	r3, [r3, #20]
 8009fc4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8009fc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fcc:	687a      	ldr	r2, [r7, #4]
 8009fce:	6892      	ldr	r2, [r2, #8]
 8009fd0:	0211      	lsls	r1, r2, #8
 8009fd2:	687a      	ldr	r2, [r7, #4]
 8009fd4:	68d2      	ldr	r2, [r2, #12]
 8009fd6:	0912      	lsrs	r2, r2, #4
 8009fd8:	0452      	lsls	r2, r2, #17
 8009fda:	430a      	orrs	r2, r1
 8009fdc:	491f      	ldr	r1, [pc, #124]	; (800a05c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	614b      	str	r3, [r1, #20]
 8009fe2:	e011      	b.n	800a008 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009fe4:	4b1d      	ldr	r3, [pc, #116]	; (800a05c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009fe6:	695b      	ldr	r3, [r3, #20]
 8009fe8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009fec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	6892      	ldr	r2, [r2, #8]
 8009ff4:	0211      	lsls	r1, r2, #8
 8009ff6:	687a      	ldr	r2, [r7, #4]
 8009ff8:	6912      	ldr	r2, [r2, #16]
 8009ffa:	0852      	lsrs	r2, r2, #1
 8009ffc:	3a01      	subs	r2, #1
 8009ffe:	0652      	lsls	r2, r2, #25
 800a000:	430a      	orrs	r2, r1
 800a002:	4916      	ldr	r1, [pc, #88]	; (800a05c <RCCEx_PLLSAI2_Config+0x1b8>)
 800a004:	4313      	orrs	r3, r2
 800a006:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800a008:	4b14      	ldr	r3, [pc, #80]	; (800a05c <RCCEx_PLLSAI2_Config+0x1b8>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4a13      	ldr	r2, [pc, #76]	; (800a05c <RCCEx_PLLSAI2_Config+0x1b8>)
 800a00e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a012:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a014:	f7fc fa86 	bl	8006524 <HAL_GetTick>
 800a018:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a01a:	e009      	b.n	800a030 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a01c:	f7fc fa82 	bl	8006524 <HAL_GetTick>
 800a020:	4602      	mov	r2, r0
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	1ad3      	subs	r3, r2, r3
 800a026:	2b02      	cmp	r3, #2
 800a028:	d902      	bls.n	800a030 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800a02a:	2303      	movs	r3, #3
 800a02c:	73fb      	strb	r3, [r7, #15]
          break;
 800a02e:	e005      	b.n	800a03c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a030:	4b0a      	ldr	r3, [pc, #40]	; (800a05c <RCCEx_PLLSAI2_Config+0x1b8>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d0ef      	beq.n	800a01c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800a03c:	7bfb      	ldrb	r3, [r7, #15]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d106      	bne.n	800a050 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800a042:	4b06      	ldr	r3, [pc, #24]	; (800a05c <RCCEx_PLLSAI2_Config+0x1b8>)
 800a044:	695a      	ldr	r2, [r3, #20]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	695b      	ldr	r3, [r3, #20]
 800a04a:	4904      	ldr	r1, [pc, #16]	; (800a05c <RCCEx_PLLSAI2_Config+0x1b8>)
 800a04c:	4313      	orrs	r3, r2
 800a04e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800a050:	7bfb      	ldrb	r3, [r7, #15]
}
 800a052:	4618      	mov	r0, r3
 800a054:	3710      	adds	r7, #16
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
 800a05a:	bf00      	nop
 800a05c:	40021000 	.word	0x40021000

0800a060 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b084      	sub	sp, #16
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a068:	2301      	movs	r3, #1
 800a06a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d06c      	beq.n	800a14c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a078:	b2db      	uxtb	r3, r3
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d106      	bne.n	800a08c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2200      	movs	r2, #0
 800a082:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f7fb f8c6 	bl	8005218 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2202      	movs	r2, #2
 800a090:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	22ca      	movs	r2, #202	; 0xca
 800a09a:	625a      	str	r2, [r3, #36]	; 0x24
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	2253      	movs	r2, #83	; 0x53
 800a0a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f000 fa49 	bl	800a53c <RTC_EnterInitMode>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800a0ae:	7bfb      	ldrb	r3, [r7, #15]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d14b      	bne.n	800a14c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	689b      	ldr	r3, [r3, #8]
 800a0ba:	687a      	ldr	r2, [r7, #4]
 800a0bc:	6812      	ldr	r2, [r2, #0]
 800a0be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a0c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0c6:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	6899      	ldr	r1, [r3, #8]
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	685a      	ldr	r2, [r3, #4]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	691b      	ldr	r3, [r3, #16]
 800a0d6:	431a      	orrs	r2, r3
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	699b      	ldr	r3, [r3, #24]
 800a0dc:	431a      	orrs	r2, r3
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	430a      	orrs	r2, r1
 800a0e4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	68d2      	ldr	r2, [r2, #12]
 800a0ee:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	6919      	ldr	r1, [r3, #16]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	689b      	ldr	r3, [r3, #8]
 800a0fa:	041a      	lsls	r2, r3, #16
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	430a      	orrs	r2, r1
 800a102:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 fa4d 	bl	800a5a4 <RTC_ExitInitMode>
 800a10a:	4603      	mov	r3, r0
 800a10c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800a10e:	7bfb      	ldrb	r3, [r7, #15]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d11b      	bne.n	800a14c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f022 0203 	bic.w	r2, r2, #3
 800a122:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	69da      	ldr	r2, [r3, #28]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	695b      	ldr	r3, [r3, #20]
 800a132:	431a      	orrs	r2, r3
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	430a      	orrs	r2, r1
 800a13a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	22ff      	movs	r2, #255	; 0xff
 800a142:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2201      	movs	r2, #1
 800a148:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800a14c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3710      	adds	r7, #16
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}

0800a156 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a156:	b590      	push	{r4, r7, lr}
 800a158:	b087      	sub	sp, #28
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	60f8      	str	r0, [r7, #12]
 800a15e:	60b9      	str	r1, [r7, #8]
 800a160:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a168:	2b01      	cmp	r3, #1
 800a16a:	d101      	bne.n	800a170 <HAL_RTC_SetTime+0x1a>
 800a16c:	2302      	movs	r3, #2
 800a16e:	e08b      	b.n	800a288 <HAL_RTC_SetTime+0x132>
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2201      	movs	r2, #1
 800a174:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2202      	movs	r2, #2
 800a17c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	22ca      	movs	r2, #202	; 0xca
 800a186:	625a      	str	r2, [r3, #36]	; 0x24
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	2253      	movs	r2, #83	; 0x53
 800a18e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a190:	68f8      	ldr	r0, [r7, #12]
 800a192:	f000 f9d3 	bl	800a53c <RTC_EnterInitMode>
 800a196:	4603      	mov	r3, r0
 800a198:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a19a:	7cfb      	ldrb	r3, [r7, #19]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d163      	bne.n	800a268 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d126      	bne.n	800a1f4 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	689b      	ldr	r3, [r3, #8]
 800a1ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d102      	bne.n	800a1ba <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	781b      	ldrb	r3, [r3, #0]
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f000 fa2e 	bl	800a620 <RTC_ByteToBcd2>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	785b      	ldrb	r3, [r3, #1]
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f000 fa27 	bl	800a620 <RTC_ByteToBcd2>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a1d6:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	789b      	ldrb	r3, [r3, #2]
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f000 fa1f 	bl	800a620 <RTC_ByteToBcd2>
 800a1e2:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a1e4:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	78db      	ldrb	r3, [r3, #3]
 800a1ec:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	617b      	str	r3, [r7, #20]
 800a1f2:	e018      	b.n	800a226 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	689b      	ldr	r3, [r3, #8]
 800a1fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d102      	bne.n	800a208 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	2200      	movs	r2, #0
 800a206:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	781b      	ldrb	r3, [r3, #0]
 800a20c:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	785b      	ldrb	r3, [r3, #1]
 800a212:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a214:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a216:	68ba      	ldr	r2, [r7, #8]
 800a218:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a21a:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	78db      	ldrb	r3, [r3, #3]
 800a220:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a222:	4313      	orrs	r3, r2
 800a224:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681a      	ldr	r2, [r3, #0]
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a230:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a234:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	689a      	ldr	r2, [r3, #8]
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a244:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	6899      	ldr	r1, [r3, #8]
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	68da      	ldr	r2, [r3, #12]
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	691b      	ldr	r3, [r3, #16]
 800a254:	431a      	orrs	r2, r3
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	430a      	orrs	r2, r1
 800a25c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a25e:	68f8      	ldr	r0, [r7, #12]
 800a260:	f000 f9a0 	bl	800a5a4 <RTC_ExitInitMode>
 800a264:	4603      	mov	r3, r0
 800a266:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	22ff      	movs	r2, #255	; 0xff
 800a26e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800a270:	7cfb      	ldrb	r3, [r7, #19]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d103      	bne.n	800a27e <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2201      	movs	r2, #1
 800a27a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2200      	movs	r2, #0
 800a282:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800a286:	7cfb      	ldrb	r3, [r7, #19]
}
 800a288:	4618      	mov	r0, r3
 800a28a:	371c      	adds	r7, #28
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd90      	pop	{r4, r7, pc}

0800a290 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b086      	sub	sp, #24
 800a294:	af00      	add	r7, sp, #0
 800a296:	60f8      	str	r0, [r7, #12]
 800a298:	60b9      	str	r1, [r7, #8]
 800a29a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	691b      	ldr	r3, [r3, #16]
 800a2ac:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a2be:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a2c2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	0c1b      	lsrs	r3, r3, #16
 800a2c8:	b2db      	uxtb	r3, r3
 800a2ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a2ce:	b2da      	uxtb	r2, r3
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	0a1b      	lsrs	r3, r3, #8
 800a2d8:	b2db      	uxtb	r3, r3
 800a2da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2de:	b2da      	uxtb	r2, r3
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	b2db      	uxtb	r3, r3
 800a2e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2ec:	b2da      	uxtb	r2, r3
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	0d9b      	lsrs	r3, r3, #22
 800a2f6:	b2db      	uxtb	r3, r3
 800a2f8:	f003 0301 	and.w	r3, r3, #1
 800a2fc:	b2da      	uxtb	r2, r3
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d11a      	bne.n	800a33e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	4618      	mov	r0, r3
 800a30e:	f000 f9a7 	bl	800a660 <RTC_Bcd2ToByte>
 800a312:	4603      	mov	r3, r0
 800a314:	461a      	mov	r2, r3
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	785b      	ldrb	r3, [r3, #1]
 800a31e:	4618      	mov	r0, r3
 800a320:	f000 f99e 	bl	800a660 <RTC_Bcd2ToByte>
 800a324:	4603      	mov	r3, r0
 800a326:	461a      	mov	r2, r3
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	789b      	ldrb	r3, [r3, #2]
 800a330:	4618      	mov	r0, r3
 800a332:	f000 f995 	bl	800a660 <RTC_Bcd2ToByte>
 800a336:	4603      	mov	r3, r0
 800a338:	461a      	mov	r2, r3
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800a33e:	2300      	movs	r3, #0
}
 800a340:	4618      	mov	r0, r3
 800a342:	3718      	adds	r7, #24
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}

0800a348 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a348:	b590      	push	{r4, r7, lr}
 800a34a:	b087      	sub	sp, #28
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	60b9      	str	r1, [r7, #8]
 800a352:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a35a:	2b01      	cmp	r3, #1
 800a35c:	d101      	bne.n	800a362 <HAL_RTC_SetDate+0x1a>
 800a35e:	2302      	movs	r3, #2
 800a360:	e075      	b.n	800a44e <HAL_RTC_SetDate+0x106>
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2201      	movs	r2, #1
 800a366:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2202      	movs	r2, #2
 800a36e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d10e      	bne.n	800a396 <HAL_RTC_SetDate+0x4e>
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	785b      	ldrb	r3, [r3, #1]
 800a37c:	f003 0310 	and.w	r3, r3, #16
 800a380:	2b00      	cmp	r3, #0
 800a382:	d008      	beq.n	800a396 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	785b      	ldrb	r3, [r3, #1]
 800a388:	f023 0310 	bic.w	r3, r3, #16
 800a38c:	b2db      	uxtb	r3, r3
 800a38e:	330a      	adds	r3, #10
 800a390:	b2da      	uxtb	r2, r3
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d11c      	bne.n	800a3d6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	78db      	ldrb	r3, [r3, #3]
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f000 f93d 	bl	800a620 <RTC_ByteToBcd2>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	785b      	ldrb	r3, [r3, #1]
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f000 f936 	bl	800a620 <RTC_ByteToBcd2>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a3b8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	789b      	ldrb	r3, [r3, #2]
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f000 f92e 	bl	800a620 <RTC_ByteToBcd2>
 800a3c4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a3c6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	781b      	ldrb	r3, [r3, #0]
 800a3ce:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a3d0:	4313      	orrs	r3, r2
 800a3d2:	617b      	str	r3, [r7, #20]
 800a3d4:	e00e      	b.n	800a3f4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	78db      	ldrb	r3, [r3, #3]
 800a3da:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	785b      	ldrb	r3, [r3, #1]
 800a3e0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a3e2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800a3e4:	68ba      	ldr	r2, [r7, #8]
 800a3e6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800a3e8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	781b      	ldrb	r3, [r3, #0]
 800a3ee:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	22ca      	movs	r2, #202	; 0xca
 800a3fa:	625a      	str	r2, [r3, #36]	; 0x24
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	2253      	movs	r2, #83	; 0x53
 800a402:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a404:	68f8      	ldr	r0, [r7, #12]
 800a406:	f000 f899 	bl	800a53c <RTC_EnterInitMode>
 800a40a:	4603      	mov	r3, r0
 800a40c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a40e:	7cfb      	ldrb	r3, [r7, #19]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d10c      	bne.n	800a42e <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681a      	ldr	r2, [r3, #0]
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a41e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a422:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a424:	68f8      	ldr	r0, [r7, #12]
 800a426:	f000 f8bd 	bl	800a5a4 <RTC_ExitInitMode>
 800a42a:	4603      	mov	r3, r0
 800a42c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	22ff      	movs	r2, #255	; 0xff
 800a434:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800a436:	7cfb      	ldrb	r3, [r7, #19]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d103      	bne.n	800a444 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2201      	movs	r2, #1
 800a440:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2200      	movs	r2, #0
 800a448:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800a44c:	7cfb      	ldrb	r3, [r7, #19]
}
 800a44e:	4618      	mov	r0, r3
 800a450:	371c      	adds	r7, #28
 800a452:	46bd      	mov	sp, r7
 800a454:	bd90      	pop	{r4, r7, pc}

0800a456 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a456:	b580      	push	{r7, lr}
 800a458:	b086      	sub	sp, #24
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	60f8      	str	r0, [r7, #12]
 800a45e:	60b9      	str	r1, [r7, #8]
 800a460:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a46c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a470:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	0c1b      	lsrs	r3, r3, #16
 800a476:	b2da      	uxtb	r2, r3
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	0a1b      	lsrs	r3, r3, #8
 800a480:	b2db      	uxtb	r3, r3
 800a482:	f003 031f 	and.w	r3, r3, #31
 800a486:	b2da      	uxtb	r2, r3
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	b2db      	uxtb	r3, r3
 800a490:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a494:	b2da      	uxtb	r2, r3
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	0b5b      	lsrs	r3, r3, #13
 800a49e:	b2db      	uxtb	r3, r3
 800a4a0:	f003 0307 	and.w	r3, r3, #7
 800a4a4:	b2da      	uxtb	r2, r3
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d11a      	bne.n	800a4e6 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	78db      	ldrb	r3, [r3, #3]
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f000 f8d3 	bl	800a660 <RTC_Bcd2ToByte>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	461a      	mov	r2, r3
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	785b      	ldrb	r3, [r3, #1]
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f000 f8ca 	bl	800a660 <RTC_Bcd2ToByte>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	789b      	ldrb	r3, [r3, #2]
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f000 f8c1 	bl	800a660 <RTC_Bcd2ToByte>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	461a      	mov	r2, r3
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800a4e6:	2300      	movs	r3, #0
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3718      	adds	r7, #24
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b084      	sub	sp, #16
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	68da      	ldr	r2, [r3, #12]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a506:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800a508:	f7fc f80c 	bl	8006524 <HAL_GetTick>
 800a50c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a50e:	e009      	b.n	800a524 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a510:	f7fc f808 	bl	8006524 <HAL_GetTick>
 800a514:	4602      	mov	r2, r0
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	1ad3      	subs	r3, r2, r3
 800a51a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a51e:	d901      	bls.n	800a524 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800a520:	2303      	movs	r3, #3
 800a522:	e007      	b.n	800a534 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	68db      	ldr	r3, [r3, #12]
 800a52a:	f003 0320 	and.w	r3, r3, #32
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d0ee      	beq.n	800a510 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800a532:	2300      	movs	r3, #0
}
 800a534:	4618      	mov	r0, r3
 800a536:	3710      	adds	r7, #16
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b084      	sub	sp, #16
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a544:	2300      	movs	r3, #0
 800a546:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	68db      	ldr	r3, [r3, #12]
 800a54e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a552:	2b00      	cmp	r3, #0
 800a554:	d120      	bne.n	800a598 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a55e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a560:	f7fb ffe0 	bl	8006524 <HAL_GetTick>
 800a564:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a566:	e00d      	b.n	800a584 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a568:	f7fb ffdc 	bl	8006524 <HAL_GetTick>
 800a56c:	4602      	mov	r2, r0
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	1ad3      	subs	r3, r2, r3
 800a572:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a576:	d905      	bls.n	800a584 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800a578:	2303      	movs	r3, #3
 800a57a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2203      	movs	r2, #3
 800a580:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	68db      	ldr	r3, [r3, #12]
 800a58a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d102      	bne.n	800a598 <RTC_EnterInitMode+0x5c>
 800a592:	7bfb      	ldrb	r3, [r7, #15]
 800a594:	2b03      	cmp	r3, #3
 800a596:	d1e7      	bne.n	800a568 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800a598:	7bfb      	ldrb	r3, [r7, #15]
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3710      	adds	r7, #16
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
	...

0800a5a4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b084      	sub	sp, #16
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800a5b0:	4b1a      	ldr	r3, [pc, #104]	; (800a61c <RTC_ExitInitMode+0x78>)
 800a5b2:	68db      	ldr	r3, [r3, #12]
 800a5b4:	4a19      	ldr	r2, [pc, #100]	; (800a61c <RTC_ExitInitMode+0x78>)
 800a5b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5ba:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a5bc:	4b17      	ldr	r3, [pc, #92]	; (800a61c <RTC_ExitInitMode+0x78>)
 800a5be:	689b      	ldr	r3, [r3, #8]
 800a5c0:	f003 0320 	and.w	r3, r3, #32
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d10c      	bne.n	800a5e2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f7ff ff91 	bl	800a4f0 <HAL_RTC_WaitForSynchro>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d01e      	beq.n	800a612 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2203      	movs	r2, #3
 800a5d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a5dc:	2303      	movs	r3, #3
 800a5de:	73fb      	strb	r3, [r7, #15]
 800a5e0:	e017      	b.n	800a612 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a5e2:	4b0e      	ldr	r3, [pc, #56]	; (800a61c <RTC_ExitInitMode+0x78>)
 800a5e4:	689b      	ldr	r3, [r3, #8]
 800a5e6:	4a0d      	ldr	r2, [pc, #52]	; (800a61c <RTC_ExitInitMode+0x78>)
 800a5e8:	f023 0320 	bic.w	r3, r3, #32
 800a5ec:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f7ff ff7e 	bl	800a4f0 <HAL_RTC_WaitForSynchro>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d005      	beq.n	800a606 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2203      	movs	r2, #3
 800a5fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a602:	2303      	movs	r3, #3
 800a604:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a606:	4b05      	ldr	r3, [pc, #20]	; (800a61c <RTC_ExitInitMode+0x78>)
 800a608:	689b      	ldr	r3, [r3, #8]
 800a60a:	4a04      	ldr	r2, [pc, #16]	; (800a61c <RTC_ExitInitMode+0x78>)
 800a60c:	f043 0320 	orr.w	r3, r3, #32
 800a610:	6093      	str	r3, [r2, #8]
  }

  return status;
 800a612:	7bfb      	ldrb	r3, [r7, #15]
}
 800a614:	4618      	mov	r0, r3
 800a616:	3710      	adds	r7, #16
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}
 800a61c:	40002800 	.word	0x40002800

0800a620 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a620:	b480      	push	{r7}
 800a622:	b085      	sub	sp, #20
 800a624:	af00      	add	r7, sp, #0
 800a626:	4603      	mov	r3, r0
 800a628:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a62a:	2300      	movs	r3, #0
 800a62c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800a62e:	79fb      	ldrb	r3, [r7, #7]
 800a630:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800a632:	e005      	b.n	800a640 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	3301      	adds	r3, #1
 800a638:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800a63a:	7afb      	ldrb	r3, [r7, #11]
 800a63c:	3b0a      	subs	r3, #10
 800a63e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800a640:	7afb      	ldrb	r3, [r7, #11]
 800a642:	2b09      	cmp	r3, #9
 800a644:	d8f6      	bhi.n	800a634 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	b2db      	uxtb	r3, r3
 800a64a:	011b      	lsls	r3, r3, #4
 800a64c:	b2da      	uxtb	r2, r3
 800a64e:	7afb      	ldrb	r3, [r7, #11]
 800a650:	4313      	orrs	r3, r2
 800a652:	b2db      	uxtb	r3, r3
}
 800a654:	4618      	mov	r0, r3
 800a656:	3714      	adds	r7, #20
 800a658:	46bd      	mov	sp, r7
 800a65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65e:	4770      	bx	lr

0800a660 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800a660:	b480      	push	{r7}
 800a662:	b085      	sub	sp, #20
 800a664:	af00      	add	r7, sp, #0
 800a666:	4603      	mov	r3, r0
 800a668:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800a66a:	79fb      	ldrb	r3, [r7, #7]
 800a66c:	091b      	lsrs	r3, r3, #4
 800a66e:	b2db      	uxtb	r3, r3
 800a670:	461a      	mov	r2, r3
 800a672:	0092      	lsls	r2, r2, #2
 800a674:	4413      	add	r3, r2
 800a676:	005b      	lsls	r3, r3, #1
 800a678:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800a67a:	79fb      	ldrb	r3, [r7, #7]
 800a67c:	f003 030f 	and.w	r3, r3, #15
 800a680:	b2da      	uxtb	r2, r3
 800a682:	7bfb      	ldrb	r3, [r7, #15]
 800a684:	4413      	add	r3, r2
 800a686:	b2db      	uxtb	r3, r3
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3714      	adds	r7, #20
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr

0800a694 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b084      	sub	sp, #16
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d101      	bne.n	800a6a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	e095      	b.n	800a7d2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d108      	bne.n	800a6c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	685b      	ldr	r3, [r3, #4]
 800a6b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a6b6:	d009      	beq.n	800a6cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	61da      	str	r2, [r3, #28]
 800a6be:	e005      	b.n	800a6cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a6d8:	b2db      	uxtb	r3, r3
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d106      	bne.n	800a6ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f7fa fdc8 	bl	800527c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2202      	movs	r2, #2
 800a6f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	681a      	ldr	r2, [r3, #0]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a702:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	68db      	ldr	r3, [r3, #12]
 800a708:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a70c:	d902      	bls.n	800a714 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a70e:	2300      	movs	r3, #0
 800a710:	60fb      	str	r3, [r7, #12]
 800a712:	e002      	b.n	800a71a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a718:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	68db      	ldr	r3, [r3, #12]
 800a71e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a722:	d007      	beq.n	800a734 <HAL_SPI_Init+0xa0>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	68db      	ldr	r3, [r3, #12]
 800a728:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a72c:	d002      	beq.n	800a734 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2200      	movs	r2, #0
 800a732:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	689b      	ldr	r3, [r3, #8]
 800a740:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a744:	431a      	orrs	r2, r3
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	691b      	ldr	r3, [r3, #16]
 800a74a:	f003 0302 	and.w	r3, r3, #2
 800a74e:	431a      	orrs	r2, r3
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	695b      	ldr	r3, [r3, #20]
 800a754:	f003 0301 	and.w	r3, r3, #1
 800a758:	431a      	orrs	r2, r3
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	699b      	ldr	r3, [r3, #24]
 800a75e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a762:	431a      	orrs	r2, r3
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	69db      	ldr	r3, [r3, #28]
 800a768:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a76c:	431a      	orrs	r2, r3
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6a1b      	ldr	r3, [r3, #32]
 800a772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a776:	ea42 0103 	orr.w	r1, r2, r3
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a77e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	430a      	orrs	r2, r1
 800a788:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	699b      	ldr	r3, [r3, #24]
 800a78e:	0c1b      	lsrs	r3, r3, #16
 800a790:	f003 0204 	and.w	r2, r3, #4
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a798:	f003 0310 	and.w	r3, r3, #16
 800a79c:	431a      	orrs	r2, r3
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7a2:	f003 0308 	and.w	r3, r3, #8
 800a7a6:	431a      	orrs	r2, r3
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a7b0:	ea42 0103 	orr.w	r1, r2, r3
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	430a      	orrs	r2, r1
 800a7c0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a7d0:	2300      	movs	r3, #0
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3710      	adds	r7, #16
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}

0800a7da <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a7da:	b580      	push	{r7, lr}
 800a7dc:	b088      	sub	sp, #32
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	60f8      	str	r0, [r7, #12]
 800a7e2:	60b9      	str	r1, [r7, #8]
 800a7e4:	603b      	str	r3, [r7, #0]
 800a7e6:	4613      	mov	r3, r2
 800a7e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d101      	bne.n	800a7fc <HAL_SPI_Transmit+0x22>
 800a7f8:	2302      	movs	r3, #2
 800a7fa:	e158      	b.n	800aaae <HAL_SPI_Transmit+0x2d4>
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	2201      	movs	r2, #1
 800a800:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a804:	f7fb fe8e 	bl	8006524 <HAL_GetTick>
 800a808:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a80a:	88fb      	ldrh	r3, [r7, #6]
 800a80c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a814:	b2db      	uxtb	r3, r3
 800a816:	2b01      	cmp	r3, #1
 800a818:	d002      	beq.n	800a820 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a81a:	2302      	movs	r3, #2
 800a81c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a81e:	e13d      	b.n	800aa9c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d002      	beq.n	800a82c <HAL_SPI_Transmit+0x52>
 800a826:	88fb      	ldrh	r3, [r7, #6]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d102      	bne.n	800a832 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a82c:	2301      	movs	r3, #1
 800a82e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a830:	e134      	b.n	800aa9c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	2203      	movs	r2, #3
 800a836:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	2200      	movs	r2, #0
 800a83e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	68ba      	ldr	r2, [r7, #8]
 800a844:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	88fa      	ldrh	r2, [r7, #6]
 800a84a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	88fa      	ldrh	r2, [r7, #6]
 800a850:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2200      	movs	r2, #0
 800a856:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2200      	movs	r2, #0
 800a85c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	2200      	movs	r2, #0
 800a864:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2200      	movs	r2, #0
 800a86c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	2200      	movs	r2, #0
 800a872:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	689b      	ldr	r3, [r3, #8]
 800a878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a87c:	d10f      	bne.n	800a89e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	681a      	ldr	r2, [r3, #0]
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a88c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	681a      	ldr	r2, [r3, #0]
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a89c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8a8:	2b40      	cmp	r3, #64	; 0x40
 800a8aa:	d007      	beq.n	800a8bc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	681a      	ldr	r2, [r3, #0]
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a8ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	68db      	ldr	r3, [r3, #12]
 800a8c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a8c4:	d94b      	bls.n	800a95e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d002      	beq.n	800a8d4 <HAL_SPI_Transmit+0xfa>
 800a8ce:	8afb      	ldrh	r3, [r7, #22]
 800a8d0:	2b01      	cmp	r3, #1
 800a8d2:	d13e      	bne.n	800a952 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8d8:	881a      	ldrh	r2, [r3, #0]
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8e4:	1c9a      	adds	r2, r3, #2
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8ee:	b29b      	uxth	r3, r3
 800a8f0:	3b01      	subs	r3, #1
 800a8f2:	b29a      	uxth	r2, r3
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a8f8:	e02b      	b.n	800a952 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	689b      	ldr	r3, [r3, #8]
 800a900:	f003 0302 	and.w	r3, r3, #2
 800a904:	2b02      	cmp	r3, #2
 800a906:	d112      	bne.n	800a92e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a90c:	881a      	ldrh	r2, [r3, #0]
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a918:	1c9a      	adds	r2, r3, #2
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a922:	b29b      	uxth	r3, r3
 800a924:	3b01      	subs	r3, #1
 800a926:	b29a      	uxth	r2, r3
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a92c:	e011      	b.n	800a952 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a92e:	f7fb fdf9 	bl	8006524 <HAL_GetTick>
 800a932:	4602      	mov	r2, r0
 800a934:	69bb      	ldr	r3, [r7, #24]
 800a936:	1ad3      	subs	r3, r2, r3
 800a938:	683a      	ldr	r2, [r7, #0]
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d803      	bhi.n	800a946 <HAL_SPI_Transmit+0x16c>
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a944:	d102      	bne.n	800a94c <HAL_SPI_Transmit+0x172>
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d102      	bne.n	800a952 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800a94c:	2303      	movs	r3, #3
 800a94e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a950:	e0a4      	b.n	800aa9c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a956:	b29b      	uxth	r3, r3
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d1ce      	bne.n	800a8fa <HAL_SPI_Transmit+0x120>
 800a95c:	e07c      	b.n	800aa58 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	685b      	ldr	r3, [r3, #4]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d002      	beq.n	800a96c <HAL_SPI_Transmit+0x192>
 800a966:	8afb      	ldrh	r3, [r7, #22]
 800a968:	2b01      	cmp	r3, #1
 800a96a:	d170      	bne.n	800aa4e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a970:	b29b      	uxth	r3, r3
 800a972:	2b01      	cmp	r3, #1
 800a974:	d912      	bls.n	800a99c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a97a:	881a      	ldrh	r2, [r3, #0]
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a986:	1c9a      	adds	r2, r3, #2
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a990:	b29b      	uxth	r3, r3
 800a992:	3b02      	subs	r3, #2
 800a994:	b29a      	uxth	r2, r3
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a99a:	e058      	b.n	800aa4e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	330c      	adds	r3, #12
 800a9a6:	7812      	ldrb	r2, [r2, #0]
 800a9a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ae:	1c5a      	adds	r2, r3, #1
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a9b8:	b29b      	uxth	r3, r3
 800a9ba:	3b01      	subs	r3, #1
 800a9bc:	b29a      	uxth	r2, r3
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800a9c2:	e044      	b.n	800aa4e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	689b      	ldr	r3, [r3, #8]
 800a9ca:	f003 0302 	and.w	r3, r3, #2
 800a9ce:	2b02      	cmp	r3, #2
 800a9d0:	d12b      	bne.n	800aa2a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d912      	bls.n	800aa02 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9e0:	881a      	ldrh	r2, [r3, #0]
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ec:	1c9a      	adds	r2, r3, #2
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a9f6:	b29b      	uxth	r3, r3
 800a9f8:	3b02      	subs	r3, #2
 800a9fa:	b29a      	uxth	r2, r3
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 800aa00:	e025      	b.n	800aa4e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	330c      	adds	r3, #12
 800aa0c:	7812      	ldrb	r2, [r2, #0]
 800aa0e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa14:	1c5a      	adds	r2, r3, #1
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa1e:	b29b      	uxth	r3, r3
 800aa20:	3b01      	subs	r3, #1
 800aa22:	b29a      	uxth	r2, r3
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	87da      	strh	r2, [r3, #62]	; 0x3e
 800aa28:	e011      	b.n	800aa4e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aa2a:	f7fb fd7b 	bl	8006524 <HAL_GetTick>
 800aa2e:	4602      	mov	r2, r0
 800aa30:	69bb      	ldr	r3, [r7, #24]
 800aa32:	1ad3      	subs	r3, r2, r3
 800aa34:	683a      	ldr	r2, [r7, #0]
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d803      	bhi.n	800aa42 <HAL_SPI_Transmit+0x268>
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa40:	d102      	bne.n	800aa48 <HAL_SPI_Transmit+0x26e>
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d102      	bne.n	800aa4e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800aa48:	2303      	movs	r3, #3
 800aa4a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800aa4c:	e026      	b.n	800aa9c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa52:	b29b      	uxth	r3, r3
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d1b5      	bne.n	800a9c4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800aa58:	69ba      	ldr	r2, [r7, #24]
 800aa5a:	6839      	ldr	r1, [r7, #0]
 800aa5c:	68f8      	ldr	r0, [r7, #12]
 800aa5e:	f001 f9dd 	bl	800be1c <SPI_EndRxTxTransaction>
 800aa62:	4603      	mov	r3, r0
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d002      	beq.n	800aa6e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	2220      	movs	r2, #32
 800aa6c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	689b      	ldr	r3, [r3, #8]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d10a      	bne.n	800aa8c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aa76:	2300      	movs	r3, #0
 800aa78:	613b      	str	r3, [r7, #16]
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	68db      	ldr	r3, [r3, #12]
 800aa80:	613b      	str	r3, [r7, #16]
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	689b      	ldr	r3, [r3, #8]
 800aa88:	613b      	str	r3, [r7, #16]
 800aa8a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d002      	beq.n	800aa9a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800aa94:	2301      	movs	r3, #1
 800aa96:	77fb      	strb	r3, [r7, #31]
 800aa98:	e000      	b.n	800aa9c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800aa9a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800aaac:	7ffb      	ldrb	r3, [r7, #31]
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3720      	adds	r7, #32
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}

0800aab6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aab6:	b580      	push	{r7, lr}
 800aab8:	b088      	sub	sp, #32
 800aaba:	af02      	add	r7, sp, #8
 800aabc:	60f8      	str	r0, [r7, #12]
 800aabe:	60b9      	str	r1, [r7, #8]
 800aac0:	603b      	str	r3, [r7, #0]
 800aac2:	4613      	mov	r3, r2
 800aac4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800aac6:	2300      	movs	r3, #0
 800aac8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aad2:	d112      	bne.n	800aafa <HAL_SPI_Receive+0x44>
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	689b      	ldr	r3, [r3, #8]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d10e      	bne.n	800aafa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2204      	movs	r2, #4
 800aae0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800aae4:	88fa      	ldrh	r2, [r7, #6]
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	9300      	str	r3, [sp, #0]
 800aaea:	4613      	mov	r3, r2
 800aaec:	68ba      	ldr	r2, [r7, #8]
 800aaee:	68b9      	ldr	r1, [r7, #8]
 800aaf0:	68f8      	ldr	r0, [r7, #12]
 800aaf2:	f000 f910 	bl	800ad16 <HAL_SPI_TransmitReceive>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	e109      	b.n	800ad0e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	d101      	bne.n	800ab08 <HAL_SPI_Receive+0x52>
 800ab04:	2302      	movs	r3, #2
 800ab06:	e102      	b.n	800ad0e <HAL_SPI_Receive+0x258>
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ab10:	f7fb fd08 	bl	8006524 <HAL_GetTick>
 800ab14:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ab1c:	b2db      	uxtb	r3, r3
 800ab1e:	2b01      	cmp	r3, #1
 800ab20:	d002      	beq.n	800ab28 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800ab22:	2302      	movs	r3, #2
 800ab24:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ab26:	e0e9      	b.n	800acfc <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d002      	beq.n	800ab34 <HAL_SPI_Receive+0x7e>
 800ab2e:	88fb      	ldrh	r3, [r7, #6]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d102      	bne.n	800ab3a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800ab34:	2301      	movs	r3, #1
 800ab36:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ab38:	e0e0      	b.n	800acfc <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	2204      	movs	r2, #4
 800ab3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	2200      	movs	r2, #0
 800ab46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	68ba      	ldr	r2, [r7, #8]
 800ab4c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	88fa      	ldrh	r2, [r7, #6]
 800ab52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	88fa      	ldrh	r2, [r7, #6]
 800ab5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	2200      	movs	r2, #0
 800ab62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	2200      	movs	r2, #0
 800ab68:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	2200      	movs	r2, #0
 800ab74:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	68db      	ldr	r3, [r3, #12]
 800ab80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ab84:	d908      	bls.n	800ab98 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	685a      	ldr	r2, [r3, #4]
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ab94:	605a      	str	r2, [r3, #4]
 800ab96:	e007      	b.n	800aba8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	685a      	ldr	r2, [r3, #4]
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800aba6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	689b      	ldr	r3, [r3, #8]
 800abac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abb0:	d10f      	bne.n	800abd2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	681a      	ldr	r2, [r3, #0]
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800abc0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	681a      	ldr	r2, [r3, #0]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800abd0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abdc:	2b40      	cmp	r3, #64	; 0x40
 800abde:	d007      	beq.n	800abf0 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	681a      	ldr	r2, [r3, #0]
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800abee:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	68db      	ldr	r3, [r3, #12]
 800abf4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800abf8:	d867      	bhi.n	800acca <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800abfa:	e030      	b.n	800ac5e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	689b      	ldr	r3, [r3, #8]
 800ac02:	f003 0301 	and.w	r3, r3, #1
 800ac06:	2b01      	cmp	r3, #1
 800ac08:	d117      	bne.n	800ac3a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f103 020c 	add.w	r2, r3, #12
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac16:	7812      	ldrb	r2, [r2, #0]
 800ac18:	b2d2      	uxtb	r2, r2
 800ac1a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac20:	1c5a      	adds	r2, r3, #1
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ac2c:	b29b      	uxth	r3, r3
 800ac2e:	3b01      	subs	r3, #1
 800ac30:	b29a      	uxth	r2, r3
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800ac38:	e011      	b.n	800ac5e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ac3a:	f7fb fc73 	bl	8006524 <HAL_GetTick>
 800ac3e:	4602      	mov	r2, r0
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	1ad3      	subs	r3, r2, r3
 800ac44:	683a      	ldr	r2, [r7, #0]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d803      	bhi.n	800ac52 <HAL_SPI_Receive+0x19c>
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac50:	d102      	bne.n	800ac58 <HAL_SPI_Receive+0x1a2>
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d102      	bne.n	800ac5e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800ac58:	2303      	movs	r3, #3
 800ac5a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800ac5c:	e04e      	b.n	800acfc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d1c8      	bne.n	800abfc <HAL_SPI_Receive+0x146>
 800ac6a:	e034      	b.n	800acd6 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	689b      	ldr	r3, [r3, #8]
 800ac72:	f003 0301 	and.w	r3, r3, #1
 800ac76:	2b01      	cmp	r3, #1
 800ac78:	d115      	bne.n	800aca6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	68da      	ldr	r2, [r3, #12]
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac84:	b292      	uxth	r2, r2
 800ac86:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac8c:	1c9a      	adds	r2, r3, #2
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ac98:	b29b      	uxth	r3, r3
 800ac9a:	3b01      	subs	r3, #1
 800ac9c:	b29a      	uxth	r2, r3
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800aca4:	e011      	b.n	800acca <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aca6:	f7fb fc3d 	bl	8006524 <HAL_GetTick>
 800acaa:	4602      	mov	r2, r0
 800acac:	693b      	ldr	r3, [r7, #16]
 800acae:	1ad3      	subs	r3, r2, r3
 800acb0:	683a      	ldr	r2, [r7, #0]
 800acb2:	429a      	cmp	r2, r3
 800acb4:	d803      	bhi.n	800acbe <HAL_SPI_Receive+0x208>
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acbc:	d102      	bne.n	800acc4 <HAL_SPI_Receive+0x20e>
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d102      	bne.n	800acca <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800acc4:	2303      	movs	r3, #3
 800acc6:	75fb      	strb	r3, [r7, #23]
          goto error;
 800acc8:	e018      	b.n	800acfc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800acd0:	b29b      	uxth	r3, r3
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d1ca      	bne.n	800ac6c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800acd6:	693a      	ldr	r2, [r7, #16]
 800acd8:	6839      	ldr	r1, [r7, #0]
 800acda:	68f8      	ldr	r0, [r7, #12]
 800acdc:	f001 f846 	bl	800bd6c <SPI_EndRxTransaction>
 800ace0:	4603      	mov	r3, r0
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d002      	beq.n	800acec <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2220      	movs	r2, #32
 800acea:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d002      	beq.n	800acfa <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800acf4:	2301      	movs	r3, #1
 800acf6:	75fb      	strb	r3, [r7, #23]
 800acf8:	e000      	b.n	800acfc <HAL_SPI_Receive+0x246>
  }

error :
 800acfa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2201      	movs	r2, #1
 800ad00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	2200      	movs	r2, #0
 800ad08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800ad0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3718      	adds	r7, #24
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}

0800ad16 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ad16:	b580      	push	{r7, lr}
 800ad18:	b08a      	sub	sp, #40	; 0x28
 800ad1a:	af00      	add	r7, sp, #0
 800ad1c:	60f8      	str	r0, [r7, #12]
 800ad1e:	60b9      	str	r1, [r7, #8]
 800ad20:	607a      	str	r2, [r7, #4]
 800ad22:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ad24:	2301      	movs	r3, #1
 800ad26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ad34:	2b01      	cmp	r3, #1
 800ad36:	d101      	bne.n	800ad3c <HAL_SPI_TransmitReceive+0x26>
 800ad38:	2302      	movs	r3, #2
 800ad3a:	e1fb      	b.n	800b134 <HAL_SPI_TransmitReceive+0x41e>
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	2201      	movs	r2, #1
 800ad40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ad44:	f7fb fbee 	bl	8006524 <HAL_GetTick>
 800ad48:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ad50:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	685b      	ldr	r3, [r3, #4]
 800ad56:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800ad58:	887b      	ldrh	r3, [r7, #2]
 800ad5a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800ad5c:	887b      	ldrh	r3, [r7, #2]
 800ad5e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ad60:	7efb      	ldrb	r3, [r7, #27]
 800ad62:	2b01      	cmp	r3, #1
 800ad64:	d00e      	beq.n	800ad84 <HAL_SPI_TransmitReceive+0x6e>
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ad6c:	d106      	bne.n	800ad7c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	689b      	ldr	r3, [r3, #8]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d102      	bne.n	800ad7c <HAL_SPI_TransmitReceive+0x66>
 800ad76:	7efb      	ldrb	r3, [r7, #27]
 800ad78:	2b04      	cmp	r3, #4
 800ad7a:	d003      	beq.n	800ad84 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800ad7c:	2302      	movs	r3, #2
 800ad7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800ad82:	e1cd      	b.n	800b120 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d005      	beq.n	800ad96 <HAL_SPI_TransmitReceive+0x80>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d002      	beq.n	800ad96 <HAL_SPI_TransmitReceive+0x80>
 800ad90:	887b      	ldrh	r3, [r7, #2]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d103      	bne.n	800ad9e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800ad96:	2301      	movs	r3, #1
 800ad98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800ad9c:	e1c0      	b.n	800b120 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ada4:	b2db      	uxtb	r3, r3
 800ada6:	2b04      	cmp	r3, #4
 800ada8:	d003      	beq.n	800adb2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	2205      	movs	r2, #5
 800adae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2200      	movs	r2, #0
 800adb6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	687a      	ldr	r2, [r7, #4]
 800adbc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	887a      	ldrh	r2, [r7, #2]
 800adc2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	887a      	ldrh	r2, [r7, #2]
 800adca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	68ba      	ldr	r2, [r7, #8]
 800add2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	887a      	ldrh	r2, [r7, #2]
 800add8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	887a      	ldrh	r2, [r7, #2]
 800adde:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	2200      	movs	r2, #0
 800ade4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	2200      	movs	r2, #0
 800adea:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	68db      	ldr	r3, [r3, #12]
 800adf0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800adf4:	d802      	bhi.n	800adfc <HAL_SPI_TransmitReceive+0xe6>
 800adf6:	8a3b      	ldrh	r3, [r7, #16]
 800adf8:	2b01      	cmp	r3, #1
 800adfa:	d908      	bls.n	800ae0e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	685a      	ldr	r2, [r3, #4]
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ae0a:	605a      	str	r2, [r3, #4]
 800ae0c:	e007      	b.n	800ae1e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	685a      	ldr	r2, [r3, #4]
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ae1c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae28:	2b40      	cmp	r3, #64	; 0x40
 800ae2a:	d007      	beq.n	800ae3c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	681a      	ldr	r2, [r3, #0]
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ae3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	68db      	ldr	r3, [r3, #12]
 800ae40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ae44:	d97c      	bls.n	800af40 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	685b      	ldr	r3, [r3, #4]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d002      	beq.n	800ae54 <HAL_SPI_TransmitReceive+0x13e>
 800ae4e:	8a7b      	ldrh	r3, [r7, #18]
 800ae50:	2b01      	cmp	r3, #1
 800ae52:	d169      	bne.n	800af28 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae58:	881a      	ldrh	r2, [r3, #0]
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae64:	1c9a      	adds	r2, r3, #2
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae6e:	b29b      	uxth	r3, r3
 800ae70:	3b01      	subs	r3, #1
 800ae72:	b29a      	uxth	r2, r3
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ae78:	e056      	b.n	800af28 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	689b      	ldr	r3, [r3, #8]
 800ae80:	f003 0302 	and.w	r3, r3, #2
 800ae84:	2b02      	cmp	r3, #2
 800ae86:	d11b      	bne.n	800aec0 <HAL_SPI_TransmitReceive+0x1aa>
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae8c:	b29b      	uxth	r3, r3
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d016      	beq.n	800aec0 <HAL_SPI_TransmitReceive+0x1aa>
 800ae92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae94:	2b01      	cmp	r3, #1
 800ae96:	d113      	bne.n	800aec0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae9c:	881a      	ldrh	r2, [r3, #0]
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aea8:	1c9a      	adds	r2, r3, #2
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aeb2:	b29b      	uxth	r3, r3
 800aeb4:	3b01      	subs	r3, #1
 800aeb6:	b29a      	uxth	r2, r3
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800aebc:	2300      	movs	r3, #0
 800aebe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	689b      	ldr	r3, [r3, #8]
 800aec6:	f003 0301 	and.w	r3, r3, #1
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	d11c      	bne.n	800af08 <HAL_SPI_TransmitReceive+0x1f2>
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d016      	beq.n	800af08 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	68da      	ldr	r2, [r3, #12]
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aee4:	b292      	uxth	r2, r2
 800aee6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeec:	1c9a      	adds	r2, r3, #2
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aef8:	b29b      	uxth	r3, r3
 800aefa:	3b01      	subs	r3, #1
 800aefc:	b29a      	uxth	r2, r3
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800af04:	2301      	movs	r3, #1
 800af06:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800af08:	f7fb fb0c 	bl	8006524 <HAL_GetTick>
 800af0c:	4602      	mov	r2, r0
 800af0e:	69fb      	ldr	r3, [r7, #28]
 800af10:	1ad3      	subs	r3, r2, r3
 800af12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af14:	429a      	cmp	r2, r3
 800af16:	d807      	bhi.n	800af28 <HAL_SPI_TransmitReceive+0x212>
 800af18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af1e:	d003      	beq.n	800af28 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800af20:	2303      	movs	r3, #3
 800af22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800af26:	e0fb      	b.n	800b120 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800af2c:	b29b      	uxth	r3, r3
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d1a3      	bne.n	800ae7a <HAL_SPI_TransmitReceive+0x164>
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800af38:	b29b      	uxth	r3, r3
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d19d      	bne.n	800ae7a <HAL_SPI_TransmitReceive+0x164>
 800af3e:	e0df      	b.n	800b100 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d003      	beq.n	800af50 <HAL_SPI_TransmitReceive+0x23a>
 800af48:	8a7b      	ldrh	r3, [r7, #18]
 800af4a:	2b01      	cmp	r3, #1
 800af4c:	f040 80cb 	bne.w	800b0e6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800af54:	b29b      	uxth	r3, r3
 800af56:	2b01      	cmp	r3, #1
 800af58:	d912      	bls.n	800af80 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af5e:	881a      	ldrh	r2, [r3, #0]
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af6a:	1c9a      	adds	r2, r3, #2
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800af74:	b29b      	uxth	r3, r3
 800af76:	3b02      	subs	r3, #2
 800af78:	b29a      	uxth	r2, r3
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800af7e:	e0b2      	b.n	800b0e6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	330c      	adds	r3, #12
 800af8a:	7812      	ldrb	r2, [r2, #0]
 800af8c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af92:	1c5a      	adds	r2, r3, #1
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800af9c:	b29b      	uxth	r3, r3
 800af9e:	3b01      	subs	r3, #1
 800afa0:	b29a      	uxth	r2, r3
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800afa6:	e09e      	b.n	800b0e6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	689b      	ldr	r3, [r3, #8]
 800afae:	f003 0302 	and.w	r3, r3, #2
 800afb2:	2b02      	cmp	r3, #2
 800afb4:	d134      	bne.n	800b020 <HAL_SPI_TransmitReceive+0x30a>
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800afba:	b29b      	uxth	r3, r3
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d02f      	beq.n	800b020 <HAL_SPI_TransmitReceive+0x30a>
 800afc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc2:	2b01      	cmp	r3, #1
 800afc4:	d12c      	bne.n	800b020 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800afca:	b29b      	uxth	r3, r3
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d912      	bls.n	800aff6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afd4:	881a      	ldrh	r2, [r3, #0]
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afe0:	1c9a      	adds	r2, r3, #2
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800afea:	b29b      	uxth	r3, r3
 800afec:	3b02      	subs	r3, #2
 800afee:	b29a      	uxth	r2, r3
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800aff4:	e012      	b.n	800b01c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	330c      	adds	r3, #12
 800b000:	7812      	ldrb	r2, [r2, #0]
 800b002:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b008:	1c5a      	adds	r2, r3, #1
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b012:	b29b      	uxth	r3, r3
 800b014:	3b01      	subs	r3, #1
 800b016:	b29a      	uxth	r2, r3
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b01c:	2300      	movs	r3, #0
 800b01e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	689b      	ldr	r3, [r3, #8]
 800b026:	f003 0301 	and.w	r3, r3, #1
 800b02a:	2b01      	cmp	r3, #1
 800b02c:	d148      	bne.n	800b0c0 <HAL_SPI_TransmitReceive+0x3aa>
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b034:	b29b      	uxth	r3, r3
 800b036:	2b00      	cmp	r3, #0
 800b038:	d042      	beq.n	800b0c0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b040:	b29b      	uxth	r3, r3
 800b042:	2b01      	cmp	r3, #1
 800b044:	d923      	bls.n	800b08e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	68da      	ldr	r2, [r3, #12]
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b050:	b292      	uxth	r2, r2
 800b052:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b058:	1c9a      	adds	r2, r3, #2
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b064:	b29b      	uxth	r3, r3
 800b066:	3b02      	subs	r3, #2
 800b068:	b29a      	uxth	r2, r3
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b076:	b29b      	uxth	r3, r3
 800b078:	2b01      	cmp	r3, #1
 800b07a:	d81f      	bhi.n	800b0bc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	685a      	ldr	r2, [r3, #4]
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b08a:	605a      	str	r2, [r3, #4]
 800b08c:	e016      	b.n	800b0bc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f103 020c 	add.w	r2, r3, #12
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b09a:	7812      	ldrb	r2, [r2, #0]
 800b09c:	b2d2      	uxtb	r2, r2
 800b09e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0a4:	1c5a      	adds	r2, r3, #1
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b0b0:	b29b      	uxth	r3, r3
 800b0b2:	3b01      	subs	r3, #1
 800b0b4:	b29a      	uxth	r2, r3
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b0bc:	2301      	movs	r3, #1
 800b0be:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b0c0:	f7fb fa30 	bl	8006524 <HAL_GetTick>
 800b0c4:	4602      	mov	r2, r0
 800b0c6:	69fb      	ldr	r3, [r7, #28]
 800b0c8:	1ad3      	subs	r3, r2, r3
 800b0ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0cc:	429a      	cmp	r2, r3
 800b0ce:	d803      	bhi.n	800b0d8 <HAL_SPI_TransmitReceive+0x3c2>
 800b0d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b0d6:	d102      	bne.n	800b0de <HAL_SPI_TransmitReceive+0x3c8>
 800b0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d103      	bne.n	800b0e6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800b0de:	2303      	movs	r3, #3
 800b0e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800b0e4:	e01c      	b.n	800b120 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b0ea:	b29b      	uxth	r3, r3
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	f47f af5b 	bne.w	800afa8 <HAL_SPI_TransmitReceive+0x292>
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b0f8:	b29b      	uxth	r3, r3
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	f47f af54 	bne.w	800afa8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b100:	69fa      	ldr	r2, [r7, #28]
 800b102:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b104:	68f8      	ldr	r0, [r7, #12]
 800b106:	f000 fe89 	bl	800be1c <SPI_EndRxTxTransaction>
 800b10a:	4603      	mov	r3, r0
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d006      	beq.n	800b11e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800b110:	2301      	movs	r3, #1
 800b112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2220      	movs	r2, #32
 800b11a:	661a      	str	r2, [r3, #96]	; 0x60
 800b11c:	e000      	b.n	800b120 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800b11e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	2201      	movs	r2, #1
 800b124:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	2200      	movs	r2, #0
 800b12c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b130:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800b134:	4618      	mov	r0, r3
 800b136:	3728      	adds	r7, #40	; 0x28
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}

0800b13c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b086      	sub	sp, #24
 800b140:	af00      	add	r7, sp, #0
 800b142:	60f8      	str	r0, [r7, #12]
 800b144:	60b9      	str	r1, [r7, #8]
 800b146:	4613      	mov	r3, r2
 800b148:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b14a:	2300      	movs	r3, #0
 800b14c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b154:	2b01      	cmp	r3, #1
 800b156:	d101      	bne.n	800b15c <HAL_SPI_Transmit_DMA+0x20>
 800b158:	2302      	movs	r3, #2
 800b15a:	e0d8      	b.n	800b30e <HAL_SPI_Transmit_DMA+0x1d2>
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2201      	movs	r2, #1
 800b160:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b16a:	b2db      	uxtb	r3, r3
 800b16c:	2b01      	cmp	r3, #1
 800b16e:	d002      	beq.n	800b176 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800b170:	2302      	movs	r3, #2
 800b172:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b174:	e0c6      	b.n	800b304 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d002      	beq.n	800b182 <HAL_SPI_Transmit_DMA+0x46>
 800b17c:	88fb      	ldrh	r3, [r7, #6]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d102      	bne.n	800b188 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800b182:	2301      	movs	r3, #1
 800b184:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b186:	e0bd      	b.n	800b304 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	2203      	movs	r2, #3
 800b18c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	2200      	movs	r2, #0
 800b194:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	68ba      	ldr	r2, [r7, #8]
 800b19a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	88fa      	ldrh	r2, [r7, #6]
 800b1a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	88fa      	ldrh	r2, [r7, #6]
 800b1a6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	689b      	ldr	r3, [r3, #8]
 800b1ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b1d2:	d10f      	bne.n	800b1f4 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	681a      	ldr	r2, [r3, #0]
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b1e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	681a      	ldr	r2, [r3, #0]
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b1f2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1f8:	4a47      	ldr	r2, [pc, #284]	; (800b318 <HAL_SPI_Transmit_DMA+0x1dc>)
 800b1fa:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b200:	4a46      	ldr	r2, [pc, #280]	; (800b31c <HAL_SPI_Transmit_DMA+0x1e0>)
 800b202:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b208:	4a45      	ldr	r2, [pc, #276]	; (800b320 <HAL_SPI_Transmit_DMA+0x1e4>)
 800b20a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b210:	2200      	movs	r2, #0
 800b212:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	685a      	ldr	r2, [r3, #4]
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b222:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	68db      	ldr	r3, [r3, #12]
 800b228:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b22c:	d82d      	bhi.n	800b28a <HAL_SPI_Transmit_DMA+0x14e>
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b232:	699b      	ldr	r3, [r3, #24]
 800b234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b238:	d127      	bne.n	800b28a <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b23e:	b29b      	uxth	r3, r3
 800b240:	f003 0301 	and.w	r3, r3, #1
 800b244:	2b00      	cmp	r3, #0
 800b246:	d10f      	bne.n	800b268 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	685a      	ldr	r2, [r3, #4]
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b256:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b25c:	b29b      	uxth	r3, r3
 800b25e:	085b      	lsrs	r3, r3, #1
 800b260:	b29a      	uxth	r2, r3
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b266:	e010      	b.n	800b28a <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	685a      	ldr	r2, [r3, #4]
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b276:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b27c:	b29b      	uxth	r3, r3
 800b27e:	085b      	lsrs	r3, r3, #1
 800b280:	b29b      	uxth	r3, r3
 800b282:	3301      	adds	r3, #1
 800b284:	b29a      	uxth	r2, r3
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b292:	4619      	mov	r1, r3
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	330c      	adds	r3, #12
 800b29a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b2a0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b2a2:	f7fb fb6b 	bl	800697c <HAL_DMA_Start_IT>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d00c      	beq.n	800b2c6 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b2b0:	f043 0210 	orr.w	r2, r3, #16
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	2201      	movs	r2, #1
 800b2c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800b2c4:	e01e      	b.n	800b304 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2d0:	2b40      	cmp	r3, #64	; 0x40
 800b2d2:	d007      	beq.n	800b2e4 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	681a      	ldr	r2, [r3, #0]
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b2e2:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	685a      	ldr	r2, [r3, #4]
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f042 0220 	orr.w	r2, r2, #32
 800b2f2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	685a      	ldr	r2, [r3, #4]
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f042 0202 	orr.w	r2, r2, #2
 800b302:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2200      	movs	r2, #0
 800b308:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b30c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3718      	adds	r7, #24
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}
 800b316:	bf00      	nop
 800b318:	0800ba73 	.word	0x0800ba73
 800b31c:	0800b895 	.word	0x0800b895
 800b320:	0800bac7 	.word	0x0800bac7

0800b324 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b086      	sub	sp, #24
 800b328:	af00      	add	r7, sp, #0
 800b32a:	60f8      	str	r0, [r7, #12]
 800b32c:	60b9      	str	r1, [r7, #8]
 800b32e:	607a      	str	r2, [r7, #4]
 800b330:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b332:	2300      	movs	r3, #0
 800b334:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b33c:	2b01      	cmp	r3, #1
 800b33e:	d101      	bne.n	800b344 <HAL_SPI_TransmitReceive_DMA+0x20>
 800b340:	2302      	movs	r3, #2
 800b342:	e16c      	b.n	800b61e <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	2201      	movs	r2, #1
 800b348:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b352:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	685b      	ldr	r3, [r3, #4]
 800b358:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800b35a:	7dbb      	ldrb	r3, [r7, #22]
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	d00d      	beq.n	800b37c <HAL_SPI_TransmitReceive_DMA+0x58>
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b366:	d106      	bne.n	800b376 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	689b      	ldr	r3, [r3, #8]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d102      	bne.n	800b376 <HAL_SPI_TransmitReceive_DMA+0x52>
 800b370:	7dbb      	ldrb	r3, [r7, #22]
 800b372:	2b04      	cmp	r3, #4
 800b374:	d002      	beq.n	800b37c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800b376:	2302      	movs	r3, #2
 800b378:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b37a:	e14b      	b.n	800b614 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d005      	beq.n	800b38e <HAL_SPI_TransmitReceive_DMA+0x6a>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d002      	beq.n	800b38e <HAL_SPI_TransmitReceive_DMA+0x6a>
 800b388:	887b      	ldrh	r3, [r7, #2]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d102      	bne.n	800b394 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800b38e:	2301      	movs	r3, #1
 800b390:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b392:	e13f      	b.n	800b614 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b39a:	b2db      	uxtb	r3, r3
 800b39c:	2b04      	cmp	r3, #4
 800b39e:	d003      	beq.n	800b3a8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	2205      	movs	r2, #5
 800b3a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	68ba      	ldr	r2, [r7, #8]
 800b3b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	887a      	ldrh	r2, [r7, #2]
 800b3b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	887a      	ldrh	r2, [r7, #2]
 800b3be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	687a      	ldr	r2, [r7, #4]
 800b3c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	887a      	ldrh	r2, [r7, #2]
 800b3ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	887a      	ldrh	r2, [r7, #2]
 800b3d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	685a      	ldr	r2, [r3, #4]
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800b3f0:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	68db      	ldr	r3, [r3, #12]
 800b3f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b3fa:	d908      	bls.n	800b40e <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	685a      	ldr	r2, [r3, #4]
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b40a:	605a      	str	r2, [r3, #4]
 800b40c:	e06f      	b.n	800b4ee <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	685a      	ldr	r2, [r3, #4]
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b41c:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b422:	699b      	ldr	r3, [r3, #24]
 800b424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b428:	d126      	bne.n	800b478 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800b42e:	f003 0301 	and.w	r3, r3, #1
 800b432:	2b00      	cmp	r3, #0
 800b434:	d10f      	bne.n	800b456 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	685a      	ldr	r2, [r3, #4]
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b444:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b44a:	b29b      	uxth	r3, r3
 800b44c:	085b      	lsrs	r3, r3, #1
 800b44e:	b29a      	uxth	r2, r3
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b454:	e010      	b.n	800b478 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	685a      	ldr	r2, [r3, #4]
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b464:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b46a:	b29b      	uxth	r3, r3
 800b46c:	085b      	lsrs	r3, r3, #1
 800b46e:	b29b      	uxth	r3, r3
 800b470:	3301      	adds	r3, #1
 800b472:	b29a      	uxth	r2, r3
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b47c:	699b      	ldr	r3, [r3, #24]
 800b47e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b482:	d134      	bne.n	800b4ee <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	685a      	ldr	r2, [r3, #4]
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b492:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b49a:	b29b      	uxth	r3, r3
 800b49c:	f003 0301 	and.w	r3, r3, #1
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d111      	bne.n	800b4c8 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	685a      	ldr	r2, [r3, #4]
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b4b2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b4ba:	b29b      	uxth	r3, r3
 800b4bc:	085b      	lsrs	r3, r3, #1
 800b4be:	b29a      	uxth	r2, r3
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800b4c6:	e012      	b.n	800b4ee <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	685a      	ldr	r2, [r3, #4]
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b4d6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b4de:	b29b      	uxth	r3, r3
 800b4e0:	085b      	lsrs	r3, r3, #1
 800b4e2:	b29b      	uxth	r3, r3
 800b4e4:	3301      	adds	r3, #1
 800b4e6:	b29a      	uxth	r2, r3
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b4f4:	b2db      	uxtb	r3, r3
 800b4f6:	2b04      	cmp	r3, #4
 800b4f8:	d108      	bne.n	800b50c <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4fe:	4a4a      	ldr	r2, [pc, #296]	; (800b628 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800b500:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b506:	4a49      	ldr	r2, [pc, #292]	; (800b62c <HAL_SPI_TransmitReceive_DMA+0x308>)
 800b508:	62da      	str	r2, [r3, #44]	; 0x2c
 800b50a:	e007      	b.n	800b51c <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b510:	4a47      	ldr	r2, [pc, #284]	; (800b630 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800b512:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b518:	4a46      	ldr	r2, [pc, #280]	; (800b634 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800b51a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b520:	4a45      	ldr	r2, [pc, #276]	; (800b638 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800b522:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b528:	2200      	movs	r2, #0
 800b52a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	330c      	adds	r3, #12
 800b536:	4619      	mov	r1, r3
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b53c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b544:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800b546:	f7fb fa19 	bl	800697c <HAL_DMA_Start_IT>
 800b54a:	4603      	mov	r3, r0
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d00c      	beq.n	800b56a <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b554:	f043 0210 	orr.w	r2, r3, #16
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800b55c:	2301      	movs	r3, #1
 800b55e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2201      	movs	r2, #1
 800b564:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800b568:	e054      	b.n	800b614 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	685a      	ldr	r2, [r3, #4]
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f042 0201 	orr.w	r2, r2, #1
 800b578:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b57e:	2200      	movs	r2, #0
 800b580:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b586:	2200      	movs	r2, #0
 800b588:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b58e:	2200      	movs	r2, #0
 800b590:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b596:	2200      	movs	r2, #0
 800b598:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5a2:	4619      	mov	r1, r3
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	330c      	adds	r3, #12
 800b5aa:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b5b0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b5b2:	f7fb f9e3 	bl	800697c <HAL_DMA_Start_IT>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d00c      	beq.n	800b5d6 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b5c0:	f043 0210 	orr.w	r2, r3, #16
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	2201      	movs	r2, #1
 800b5d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800b5d4:	e01e      	b.n	800b614 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5e0:	2b40      	cmp	r3, #64	; 0x40
 800b5e2:	d007      	beq.n	800b5f4 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	681a      	ldr	r2, [r3, #0]
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b5f2:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	685a      	ldr	r2, [r3, #4]
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	f042 0220 	orr.w	r2, r2, #32
 800b602:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	685a      	ldr	r2, [r3, #4]
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f042 0202 	orr.w	r2, r2, #2
 800b612:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	2200      	movs	r2, #0
 800b618:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b61c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3718      	adds	r7, #24
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
 800b626:	bf00      	nop
 800b628:	0800ba8f 	.word	0x0800ba8f
 800b62c:	0800b93b 	.word	0x0800b93b
 800b630:	0800baab 	.word	0x0800baab
 800b634:	0800b9e3 	.word	0x0800b9e3
 800b638:	0800bac7 	.word	0x0800bac7

0800b63c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b088      	sub	sp, #32
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	689b      	ldr	r3, [r3, #8]
 800b652:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b654:	69bb      	ldr	r3, [r7, #24]
 800b656:	099b      	lsrs	r3, r3, #6
 800b658:	f003 0301 	and.w	r3, r3, #1
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d10f      	bne.n	800b680 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b660:	69bb      	ldr	r3, [r7, #24]
 800b662:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b666:	2b00      	cmp	r3, #0
 800b668:	d00a      	beq.n	800b680 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b66a:	69fb      	ldr	r3, [r7, #28]
 800b66c:	099b      	lsrs	r3, r3, #6
 800b66e:	f003 0301 	and.w	r3, r3, #1
 800b672:	2b00      	cmp	r3, #0
 800b674:	d004      	beq.n	800b680 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	4798      	blx	r3
    return;
 800b67e:	e0d7      	b.n	800b830 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800b680:	69bb      	ldr	r3, [r7, #24]
 800b682:	085b      	lsrs	r3, r3, #1
 800b684:	f003 0301 	and.w	r3, r3, #1
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d00a      	beq.n	800b6a2 <HAL_SPI_IRQHandler+0x66>
 800b68c:	69fb      	ldr	r3, [r7, #28]
 800b68e:	09db      	lsrs	r3, r3, #7
 800b690:	f003 0301 	and.w	r3, r3, #1
 800b694:	2b00      	cmp	r3, #0
 800b696:	d004      	beq.n	800b6a2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	4798      	blx	r3
    return;
 800b6a0:	e0c6      	b.n	800b830 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800b6a2:	69bb      	ldr	r3, [r7, #24]
 800b6a4:	095b      	lsrs	r3, r3, #5
 800b6a6:	f003 0301 	and.w	r3, r3, #1
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d10c      	bne.n	800b6c8 <HAL_SPI_IRQHandler+0x8c>
 800b6ae:	69bb      	ldr	r3, [r7, #24]
 800b6b0:	099b      	lsrs	r3, r3, #6
 800b6b2:	f003 0301 	and.w	r3, r3, #1
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d106      	bne.n	800b6c8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800b6ba:	69bb      	ldr	r3, [r7, #24]
 800b6bc:	0a1b      	lsrs	r3, r3, #8
 800b6be:	f003 0301 	and.w	r3, r3, #1
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	f000 80b4 	beq.w	800b830 <HAL_SPI_IRQHandler+0x1f4>
 800b6c8:	69fb      	ldr	r3, [r7, #28]
 800b6ca:	095b      	lsrs	r3, r3, #5
 800b6cc:	f003 0301 	and.w	r3, r3, #1
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	f000 80ad 	beq.w	800b830 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800b6d6:	69bb      	ldr	r3, [r7, #24]
 800b6d8:	099b      	lsrs	r3, r3, #6
 800b6da:	f003 0301 	and.w	r3, r3, #1
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d023      	beq.n	800b72a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b6e8:	b2db      	uxtb	r3, r3
 800b6ea:	2b03      	cmp	r3, #3
 800b6ec:	d011      	beq.n	800b712 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b6f2:	f043 0204 	orr.w	r2, r3, #4
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	617b      	str	r3, [r7, #20]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	68db      	ldr	r3, [r3, #12]
 800b704:	617b      	str	r3, [r7, #20]
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	689b      	ldr	r3, [r3, #8]
 800b70c:	617b      	str	r3, [r7, #20]
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	e00b      	b.n	800b72a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b712:	2300      	movs	r3, #0
 800b714:	613b      	str	r3, [r7, #16]
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	68db      	ldr	r3, [r3, #12]
 800b71c:	613b      	str	r3, [r7, #16]
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	689b      	ldr	r3, [r3, #8]
 800b724:	613b      	str	r3, [r7, #16]
 800b726:	693b      	ldr	r3, [r7, #16]
        return;
 800b728:	e082      	b.n	800b830 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800b72a:	69bb      	ldr	r3, [r7, #24]
 800b72c:	095b      	lsrs	r3, r3, #5
 800b72e:	f003 0301 	and.w	r3, r3, #1
 800b732:	2b00      	cmp	r3, #0
 800b734:	d014      	beq.n	800b760 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b73a:	f043 0201 	orr.w	r2, r3, #1
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b742:	2300      	movs	r3, #0
 800b744:	60fb      	str	r3, [r7, #12]
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	689b      	ldr	r3, [r3, #8]
 800b74c:	60fb      	str	r3, [r7, #12]
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	681a      	ldr	r2, [r3, #0]
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b75c:	601a      	str	r2, [r3, #0]
 800b75e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800b760:	69bb      	ldr	r3, [r7, #24]
 800b762:	0a1b      	lsrs	r3, r3, #8
 800b764:	f003 0301 	and.w	r3, r3, #1
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d00c      	beq.n	800b786 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b770:	f043 0208 	orr.w	r2, r3, #8
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b778:	2300      	movs	r3, #0
 800b77a:	60bb      	str	r3, [r7, #8]
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	689b      	ldr	r3, [r3, #8]
 800b782:	60bb      	str	r3, [r7, #8]
 800b784:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d04f      	beq.n	800b82e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	685a      	ldr	r2, [r3, #4]
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b79c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2201      	movs	r2, #1
 800b7a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800b7a6:	69fb      	ldr	r3, [r7, #28]
 800b7a8:	f003 0302 	and.w	r3, r3, #2
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d104      	bne.n	800b7ba <HAL_SPI_IRQHandler+0x17e>
 800b7b0:	69fb      	ldr	r3, [r7, #28]
 800b7b2:	f003 0301 	and.w	r3, r3, #1
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d034      	beq.n	800b824 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	685a      	ldr	r2, [r3, #4]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f022 0203 	bic.w	r2, r2, #3
 800b7c8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d011      	beq.n	800b7f6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7d6:	4a18      	ldr	r2, [pc, #96]	; (800b838 <HAL_SPI_IRQHandler+0x1fc>)
 800b7d8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f7fb f96a 	bl	8006ab8 <HAL_DMA_Abort_IT>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d005      	beq.n	800b7f6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b7ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d016      	beq.n	800b82c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b802:	4a0d      	ldr	r2, [pc, #52]	; (800b838 <HAL_SPI_IRQHandler+0x1fc>)
 800b804:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b80a:	4618      	mov	r0, r3
 800b80c:	f7fb f954 	bl	8006ab8 <HAL_DMA_Abort_IT>
 800b810:	4603      	mov	r3, r0
 800b812:	2b00      	cmp	r3, #0
 800b814:	d00a      	beq.n	800b82c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b81a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800b822:	e003      	b.n	800b82c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f7f8 ff41 	bl	80046ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800b82a:	e000      	b.n	800b82e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800b82c:	bf00      	nop
    return;
 800b82e:	bf00      	nop
  }
}
 800b830:	3720      	adds	r7, #32
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}
 800b836:	bf00      	nop
 800b838:	0800bb07 	.word	0x0800bb07

0800b83c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b083      	sub	sp, #12
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800b844:	bf00      	nop
 800b846:	370c      	adds	r7, #12
 800b848:	46bd      	mov	sp, r7
 800b84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84e:	4770      	bx	lr

0800b850 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b850:	b480      	push	{r7}
 800b852:	b083      	sub	sp, #12
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800b858:	bf00      	nop
 800b85a:	370c      	adds	r7, #12
 800b85c:	46bd      	mov	sp, r7
 800b85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b862:	4770      	bx	lr

0800b864 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b864:	b480      	push	{r7}
 800b866:	b083      	sub	sp, #12
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800b86c:	bf00      	nop
 800b86e:	370c      	adds	r7, #12
 800b870:	46bd      	mov	sp, r7
 800b872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b876:	4770      	bx	lr

0800b878 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800b878:	b480      	push	{r7}
 800b87a:	b083      	sub	sp, #12
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b886:	b2db      	uxtb	r3, r3
}
 800b888:	4618      	mov	r0, r3
 800b88a:	370c      	adds	r7, #12
 800b88c:	46bd      	mov	sp, r7
 800b88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b892:	4770      	bx	lr

0800b894 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b086      	sub	sp, #24
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8a0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b8a2:	f7fa fe3f 	bl	8006524 <HAL_GetTick>
 800b8a6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f003 0320 	and.w	r3, r3, #32
 800b8b2:	2b20      	cmp	r3, #32
 800b8b4:	d03b      	beq.n	800b92e <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	685a      	ldr	r2, [r3, #4]
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f022 0220 	bic.w	r2, r2, #32
 800b8c4:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	685a      	ldr	r2, [r3, #4]
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f022 0202 	bic.w	r2, r2, #2
 800b8d4:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b8d6:	693a      	ldr	r2, [r7, #16]
 800b8d8:	2164      	movs	r1, #100	; 0x64
 800b8da:	6978      	ldr	r0, [r7, #20]
 800b8dc:	f000 fa9e 	bl	800be1c <SPI_EndRxTxTransaction>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d005      	beq.n	800b8f2 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b8ea:	f043 0220 	orr.w	r2, r3, #32
 800b8ee:	697b      	ldr	r3, [r7, #20]
 800b8f0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	689b      	ldr	r3, [r3, #8]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d10a      	bne.n	800b910 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	60fb      	str	r3, [r7, #12]
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	68db      	ldr	r3, [r3, #12]
 800b904:	60fb      	str	r3, [r7, #12]
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	689b      	ldr	r3, [r3, #8]
 800b90c:	60fb      	str	r3, [r7, #12]
 800b90e:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	2200      	movs	r2, #0
 800b914:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	2201      	movs	r2, #1
 800b91a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b922:	2b00      	cmp	r3, #0
 800b924:	d003      	beq.n	800b92e <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b926:	6978      	ldr	r0, [r7, #20]
 800b928:	f7f8 fec0 	bl	80046ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b92c:	e002      	b.n	800b934 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800b92e:	6978      	ldr	r0, [r7, #20]
 800b930:	f7f8 fea5 	bl	800467e <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b934:	3718      	adds	r7, #24
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}

0800b93a <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b93a:	b580      	push	{r7, lr}
 800b93c:	b084      	sub	sp, #16
 800b93e:	af00      	add	r7, sp, #0
 800b940:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b946:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b948:	f7fa fdec 	bl	8006524 <HAL_GetTick>
 800b94c:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	f003 0320 	and.w	r3, r3, #32
 800b958:	2b20      	cmp	r3, #32
 800b95a:	d03c      	beq.n	800b9d6 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	685a      	ldr	r2, [r3, #4]
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f022 0220 	bic.w	r2, r2, #32
 800b96a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	689b      	ldr	r3, [r3, #8]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d10d      	bne.n	800b990 <SPI_DMAReceiveCplt+0x56>
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	685b      	ldr	r3, [r3, #4]
 800b978:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b97c:	d108      	bne.n	800b990 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	685a      	ldr	r2, [r3, #4]
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f022 0203 	bic.w	r2, r2, #3
 800b98c:	605a      	str	r2, [r3, #4]
 800b98e:	e007      	b.n	800b9a0 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	685a      	ldr	r2, [r3, #4]
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	f022 0201 	bic.w	r2, r2, #1
 800b99e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b9a0:	68ba      	ldr	r2, [r7, #8]
 800b9a2:	2164      	movs	r1, #100	; 0x64
 800b9a4:	68f8      	ldr	r0, [r7, #12]
 800b9a6:	f000 f9e1 	bl	800bd6c <SPI_EndRxTransaction>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d002      	beq.n	800b9b6 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	2220      	movs	r2, #32
 800b9b4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	2201      	movs	r2, #1
 800b9c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d003      	beq.n	800b9d6 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b9ce:	68f8      	ldr	r0, [r7, #12]
 800b9d0:	f7f8 fe6c 	bl	80046ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b9d4:	e002      	b.n	800b9dc <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800b9d6:	68f8      	ldr	r0, [r7, #12]
 800b9d8:	f7f8 fe46 	bl	8004668 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b9dc:	3710      	adds	r7, #16
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}

0800b9e2 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b9e2:	b580      	push	{r7, lr}
 800b9e4:	b084      	sub	sp, #16
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9ee:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b9f0:	f7fa fd98 	bl	8006524 <HAL_GetTick>
 800b9f4:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	f003 0320 	and.w	r3, r3, #32
 800ba00:	2b20      	cmp	r3, #32
 800ba02:	d030      	beq.n	800ba66 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	685a      	ldr	r2, [r3, #4]
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	f022 0220 	bic.w	r2, r2, #32
 800ba12:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ba14:	68ba      	ldr	r2, [r7, #8]
 800ba16:	2164      	movs	r1, #100	; 0x64
 800ba18:	68f8      	ldr	r0, [r7, #12]
 800ba1a:	f000 f9ff 	bl	800be1c <SPI_EndRxTxTransaction>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d005      	beq.n	800ba30 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba28:	f043 0220 	orr.w	r2, r3, #32
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	685a      	ldr	r2, [r3, #4]
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f022 0203 	bic.w	r2, r2, #3
 800ba3e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	2200      	movs	r2, #0
 800ba44:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	2200      	movs	r2, #0
 800ba4a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	2201      	movs	r2, #1
 800ba52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d003      	beq.n	800ba66 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ba5e:	68f8      	ldr	r0, [r7, #12]
 800ba60:	f7f8 fe24 	bl	80046ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ba64:	e002      	b.n	800ba6c <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800ba66:	68f8      	ldr	r0, [r7, #12]
 800ba68:	f7f8 fe14 	bl	8004694 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ba6c:	3710      	adds	r7, #16
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}

0800ba72 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ba72:	b580      	push	{r7, lr}
 800ba74:	b084      	sub	sp, #16
 800ba76:	af00      	add	r7, sp, #0
 800ba78:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba7e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800ba80:	68f8      	ldr	r0, [r7, #12]
 800ba82:	f7ff fedb 	bl	800b83c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ba86:	bf00      	nop
 800ba88:	3710      	adds	r7, #16
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}

0800ba8e <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ba8e:	b580      	push	{r7, lr}
 800ba90:	b084      	sub	sp, #16
 800ba92:	af00      	add	r7, sp, #0
 800ba94:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba9a:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800ba9c:	68f8      	ldr	r0, [r7, #12]
 800ba9e:	f7ff fed7 	bl	800b850 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800baa2:	bf00      	nop
 800baa4:	3710      	adds	r7, #16
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}

0800baaa <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800baaa:	b580      	push	{r7, lr}
 800baac:	b084      	sub	sp, #16
 800baae:	af00      	add	r7, sp, #0
 800bab0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bab6:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800bab8:	68f8      	ldr	r0, [r7, #12]
 800baba:	f7ff fed3 	bl	800b864 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800babe:	bf00      	nop
 800bac0:	3710      	adds	r7, #16
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}

0800bac6 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800bac6:	b580      	push	{r7, lr}
 800bac8:	b084      	sub	sp, #16
 800baca:	af00      	add	r7, sp, #0
 800bacc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bad2:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	685a      	ldr	r2, [r3, #4]
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	f022 0203 	bic.w	r2, r2, #3
 800bae2:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bae8:	f043 0210 	orr.w	r2, r3, #16
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2201      	movs	r2, #1
 800baf4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800baf8:	68f8      	ldr	r0, [r7, #12]
 800bafa:	f7f8 fdd7 	bl	80046ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bafe:	bf00      	nop
 800bb00:	3710      	adds	r7, #16
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}

0800bb06 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bb06:	b580      	push	{r7, lr}
 800bb08:	b084      	sub	sp, #16
 800bb0a:	af00      	add	r7, sp, #0
 800bb0c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb12:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	2200      	movs	r2, #0
 800bb18:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	2200      	movs	r2, #0
 800bb20:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800bb22:	68f8      	ldr	r0, [r7, #12]
 800bb24:	f7f8 fdc2 	bl	80046ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bb28:	bf00      	nop
 800bb2a:	3710      	adds	r7, #16
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b088      	sub	sp, #32
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	60f8      	str	r0, [r7, #12]
 800bb38:	60b9      	str	r1, [r7, #8]
 800bb3a:	603b      	str	r3, [r7, #0]
 800bb3c:	4613      	mov	r3, r2
 800bb3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800bb40:	f7fa fcf0 	bl	8006524 <HAL_GetTick>
 800bb44:	4602      	mov	r2, r0
 800bb46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb48:	1a9b      	subs	r3, r3, r2
 800bb4a:	683a      	ldr	r2, [r7, #0]
 800bb4c:	4413      	add	r3, r2
 800bb4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800bb50:	f7fa fce8 	bl	8006524 <HAL_GetTick>
 800bb54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bb56:	4b39      	ldr	r3, [pc, #228]	; (800bc3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	015b      	lsls	r3, r3, #5
 800bb5c:	0d1b      	lsrs	r3, r3, #20
 800bb5e:	69fa      	ldr	r2, [r7, #28]
 800bb60:	fb02 f303 	mul.w	r3, r2, r3
 800bb64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bb66:	e054      	b.n	800bc12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb6e:	d050      	beq.n	800bc12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bb70:	f7fa fcd8 	bl	8006524 <HAL_GetTick>
 800bb74:	4602      	mov	r2, r0
 800bb76:	69bb      	ldr	r3, [r7, #24]
 800bb78:	1ad3      	subs	r3, r2, r3
 800bb7a:	69fa      	ldr	r2, [r7, #28]
 800bb7c:	429a      	cmp	r2, r3
 800bb7e:	d902      	bls.n	800bb86 <SPI_WaitFlagStateUntilTimeout+0x56>
 800bb80:	69fb      	ldr	r3, [r7, #28]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d13d      	bne.n	800bc02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	685a      	ldr	r2, [r3, #4]
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bb94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	685b      	ldr	r3, [r3, #4]
 800bb9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bb9e:	d111      	bne.n	800bbc4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	689b      	ldr	r3, [r3, #8]
 800bba4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bba8:	d004      	beq.n	800bbb4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	689b      	ldr	r3, [r3, #8]
 800bbae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bbb2:	d107      	bne.n	800bbc4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	681a      	ldr	r2, [r3, #0]
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bbc2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bbcc:	d10f      	bne.n	800bbee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	681a      	ldr	r2, [r3, #0]
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bbdc:	601a      	str	r2, [r3, #0]
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	681a      	ldr	r2, [r3, #0]
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bbec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	2201      	movs	r2, #1
 800bbf2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800bbfe:	2303      	movs	r3, #3
 800bc00:	e017      	b.n	800bc32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d101      	bne.n	800bc0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800bc08:	2300      	movs	r3, #0
 800bc0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	3b01      	subs	r3, #1
 800bc10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	689a      	ldr	r2, [r3, #8]
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	4013      	ands	r3, r2
 800bc1c:	68ba      	ldr	r2, [r7, #8]
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	bf0c      	ite	eq
 800bc22:	2301      	moveq	r3, #1
 800bc24:	2300      	movne	r3, #0
 800bc26:	b2db      	uxtb	r3, r3
 800bc28:	461a      	mov	r2, r3
 800bc2a:	79fb      	ldrb	r3, [r7, #7]
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	d19b      	bne.n	800bb68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bc30:	2300      	movs	r3, #0
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3720      	adds	r7, #32
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}
 800bc3a:	bf00      	nop
 800bc3c:	200001f4 	.word	0x200001f4

0800bc40 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b08a      	sub	sp, #40	; 0x28
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	60f8      	str	r0, [r7, #12]
 800bc48:	60b9      	str	r1, [r7, #8]
 800bc4a:	607a      	str	r2, [r7, #4]
 800bc4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800bc52:	f7fa fc67 	bl	8006524 <HAL_GetTick>
 800bc56:	4602      	mov	r2, r0
 800bc58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc5a:	1a9b      	subs	r3, r3, r2
 800bc5c:	683a      	ldr	r2, [r7, #0]
 800bc5e:	4413      	add	r3, r2
 800bc60:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800bc62:	f7fa fc5f 	bl	8006524 <HAL_GetTick>
 800bc66:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	330c      	adds	r3, #12
 800bc6e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800bc70:	4b3d      	ldr	r3, [pc, #244]	; (800bd68 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800bc72:	681a      	ldr	r2, [r3, #0]
 800bc74:	4613      	mov	r3, r2
 800bc76:	009b      	lsls	r3, r3, #2
 800bc78:	4413      	add	r3, r2
 800bc7a:	00da      	lsls	r2, r3, #3
 800bc7c:	1ad3      	subs	r3, r2, r3
 800bc7e:	0d1b      	lsrs	r3, r3, #20
 800bc80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc82:	fb02 f303 	mul.w	r3, r2, r3
 800bc86:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800bc88:	e060      	b.n	800bd4c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800bc90:	d107      	bne.n	800bca2 <SPI_WaitFifoStateUntilTimeout+0x62>
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d104      	bne.n	800bca2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800bc98:	69fb      	ldr	r3, [r7, #28]
 800bc9a:	781b      	ldrb	r3, [r3, #0]
 800bc9c:	b2db      	uxtb	r3, r3
 800bc9e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800bca0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bca8:	d050      	beq.n	800bd4c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bcaa:	f7fa fc3b 	bl	8006524 <HAL_GetTick>
 800bcae:	4602      	mov	r2, r0
 800bcb0:	6a3b      	ldr	r3, [r7, #32]
 800bcb2:	1ad3      	subs	r3, r2, r3
 800bcb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcb6:	429a      	cmp	r2, r3
 800bcb8:	d902      	bls.n	800bcc0 <SPI_WaitFifoStateUntilTimeout+0x80>
 800bcba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d13d      	bne.n	800bd3c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	685a      	ldr	r2, [r3, #4]
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bcce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	685b      	ldr	r3, [r3, #4]
 800bcd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bcd8:	d111      	bne.n	800bcfe <SPI_WaitFifoStateUntilTimeout+0xbe>
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	689b      	ldr	r3, [r3, #8]
 800bcde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bce2:	d004      	beq.n	800bcee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	689b      	ldr	r3, [r3, #8]
 800bce8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bcec:	d107      	bne.n	800bcfe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	681a      	ldr	r2, [r3, #0]
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bcfc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd06:	d10f      	bne.n	800bd28 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	681a      	ldr	r2, [r3, #0]
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bd16:	601a      	str	r2, [r3, #0]
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	681a      	ldr	r2, [r3, #0]
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bd26:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	2200      	movs	r2, #0
 800bd34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800bd38:	2303      	movs	r3, #3
 800bd3a:	e010      	b.n	800bd5e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bd3c:	69bb      	ldr	r3, [r7, #24]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d101      	bne.n	800bd46 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800bd42:	2300      	movs	r3, #0
 800bd44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800bd46:	69bb      	ldr	r3, [r7, #24]
 800bd48:	3b01      	subs	r3, #1
 800bd4a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	689a      	ldr	r2, [r3, #8]
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	4013      	ands	r3, r2
 800bd56:	687a      	ldr	r2, [r7, #4]
 800bd58:	429a      	cmp	r2, r3
 800bd5a:	d196      	bne.n	800bc8a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800bd5c:	2300      	movs	r3, #0
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3728      	adds	r7, #40	; 0x28
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}
 800bd66:	bf00      	nop
 800bd68:	200001f4 	.word	0x200001f4

0800bd6c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b086      	sub	sp, #24
 800bd70:	af02      	add	r7, sp, #8
 800bd72:	60f8      	str	r0, [r7, #12]
 800bd74:	60b9      	str	r1, [r7, #8]
 800bd76:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bd80:	d111      	bne.n	800bda6 <SPI_EndRxTransaction+0x3a>
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	689b      	ldr	r3, [r3, #8]
 800bd86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd8a:	d004      	beq.n	800bd96 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	689b      	ldr	r3, [r3, #8]
 800bd90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd94:	d107      	bne.n	800bda6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	681a      	ldr	r2, [r3, #0]
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bda4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	9300      	str	r3, [sp, #0]
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	2200      	movs	r2, #0
 800bdae:	2180      	movs	r1, #128	; 0x80
 800bdb0:	68f8      	ldr	r0, [r7, #12]
 800bdb2:	f7ff febd 	bl	800bb30 <SPI_WaitFlagStateUntilTimeout>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d007      	beq.n	800bdcc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bdc0:	f043 0220 	orr.w	r2, r3, #32
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800bdc8:	2303      	movs	r3, #3
 800bdca:	e023      	b.n	800be14 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	685b      	ldr	r3, [r3, #4]
 800bdd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bdd4:	d11d      	bne.n	800be12 <SPI_EndRxTransaction+0xa6>
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	689b      	ldr	r3, [r3, #8]
 800bdda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bdde:	d004      	beq.n	800bdea <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	689b      	ldr	r3, [r3, #8]
 800bde4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bde8:	d113      	bne.n	800be12 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	9300      	str	r3, [sp, #0]
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800bdf6:	68f8      	ldr	r0, [r7, #12]
 800bdf8:	f7ff ff22 	bl	800bc40 <SPI_WaitFifoStateUntilTimeout>
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d007      	beq.n	800be12 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be06:	f043 0220 	orr.w	r2, r3, #32
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800be0e:	2303      	movs	r3, #3
 800be10:	e000      	b.n	800be14 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800be12:	2300      	movs	r3, #0
}
 800be14:	4618      	mov	r0, r3
 800be16:	3710      	adds	r7, #16
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}

0800be1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b086      	sub	sp, #24
 800be20:	af02      	add	r7, sp, #8
 800be22:	60f8      	str	r0, [r7, #12]
 800be24:	60b9      	str	r1, [r7, #8]
 800be26:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	9300      	str	r3, [sp, #0]
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	2200      	movs	r2, #0
 800be30:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800be34:	68f8      	ldr	r0, [r7, #12]
 800be36:	f7ff ff03 	bl	800bc40 <SPI_WaitFifoStateUntilTimeout>
 800be3a:	4603      	mov	r3, r0
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d007      	beq.n	800be50 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be44:	f043 0220 	orr.w	r2, r3, #32
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800be4c:	2303      	movs	r3, #3
 800be4e:	e027      	b.n	800bea0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	9300      	str	r3, [sp, #0]
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	2200      	movs	r2, #0
 800be58:	2180      	movs	r1, #128	; 0x80
 800be5a:	68f8      	ldr	r0, [r7, #12]
 800be5c:	f7ff fe68 	bl	800bb30 <SPI_WaitFlagStateUntilTimeout>
 800be60:	4603      	mov	r3, r0
 800be62:	2b00      	cmp	r3, #0
 800be64:	d007      	beq.n	800be76 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be6a:	f043 0220 	orr.w	r2, r3, #32
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800be72:	2303      	movs	r3, #3
 800be74:	e014      	b.n	800bea0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	9300      	str	r3, [sp, #0]
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	2200      	movs	r2, #0
 800be7e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800be82:	68f8      	ldr	r0, [r7, #12]
 800be84:	f7ff fedc 	bl	800bc40 <SPI_WaitFifoStateUntilTimeout>
 800be88:	4603      	mov	r3, r0
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d007      	beq.n	800be9e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be92:	f043 0220 	orr.w	r2, r3, #32
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800be9a:	2303      	movs	r3, #3
 800be9c:	e000      	b.n	800bea0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800be9e:	2300      	movs	r3, #0
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	3710      	adds	r7, #16
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}

0800bea8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b082      	sub	sp, #8
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d101      	bne.n	800beba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800beb6:	2301      	movs	r3, #1
 800beb8:	e049      	b.n	800bf4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bec0:	b2db      	uxtb	r3, r3
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d106      	bne.n	800bed4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2200      	movs	r2, #0
 800beca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f7f9 fae4 	bl	800549c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2202      	movs	r2, #2
 800bed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681a      	ldr	r2, [r3, #0]
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	3304      	adds	r3, #4
 800bee4:	4619      	mov	r1, r3
 800bee6:	4610      	mov	r0, r2
 800bee8:	f000 fae6 	bl	800c4b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2201      	movs	r2, #1
 800bef0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2201      	movs	r2, #1
 800bef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2201      	movs	r2, #1
 800bf00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2201      	movs	r2, #1
 800bf08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2201      	movs	r2, #1
 800bf10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2201      	movs	r2, #1
 800bf18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2201      	movs	r2, #1
 800bf20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2201      	movs	r2, #1
 800bf28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2201      	movs	r2, #1
 800bf30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2201      	movs	r2, #1
 800bf38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2201      	movs	r2, #1
 800bf40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2201      	movs	r2, #1
 800bf48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bf4c:	2300      	movs	r3, #0
}
 800bf4e:	4618      	mov	r0, r3
 800bf50:	3708      	adds	r7, #8
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}
	...

0800bf58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bf58:	b480      	push	{r7}
 800bf5a:	b085      	sub	sp, #20
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf66:	b2db      	uxtb	r3, r3
 800bf68:	2b01      	cmp	r3, #1
 800bf6a:	d001      	beq.n	800bf70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	e04f      	b.n	800c010 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2202      	movs	r2, #2
 800bf74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	68da      	ldr	r2, [r3, #12]
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f042 0201 	orr.w	r2, r2, #1
 800bf86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	4a23      	ldr	r2, [pc, #140]	; (800c01c <HAL_TIM_Base_Start_IT+0xc4>)
 800bf8e:	4293      	cmp	r3, r2
 800bf90:	d01d      	beq.n	800bfce <HAL_TIM_Base_Start_IT+0x76>
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf9a:	d018      	beq.n	800bfce <HAL_TIM_Base_Start_IT+0x76>
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	4a1f      	ldr	r2, [pc, #124]	; (800c020 <HAL_TIM_Base_Start_IT+0xc8>)
 800bfa2:	4293      	cmp	r3, r2
 800bfa4:	d013      	beq.n	800bfce <HAL_TIM_Base_Start_IT+0x76>
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	4a1e      	ldr	r2, [pc, #120]	; (800c024 <HAL_TIM_Base_Start_IT+0xcc>)
 800bfac:	4293      	cmp	r3, r2
 800bfae:	d00e      	beq.n	800bfce <HAL_TIM_Base_Start_IT+0x76>
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	4a1c      	ldr	r2, [pc, #112]	; (800c028 <HAL_TIM_Base_Start_IT+0xd0>)
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d009      	beq.n	800bfce <HAL_TIM_Base_Start_IT+0x76>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	4a1b      	ldr	r2, [pc, #108]	; (800c02c <HAL_TIM_Base_Start_IT+0xd4>)
 800bfc0:	4293      	cmp	r3, r2
 800bfc2:	d004      	beq.n	800bfce <HAL_TIM_Base_Start_IT+0x76>
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	4a19      	ldr	r2, [pc, #100]	; (800c030 <HAL_TIM_Base_Start_IT+0xd8>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d115      	bne.n	800bffa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	689a      	ldr	r2, [r3, #8]
 800bfd4:	4b17      	ldr	r3, [pc, #92]	; (800c034 <HAL_TIM_Base_Start_IT+0xdc>)
 800bfd6:	4013      	ands	r3, r2
 800bfd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	2b06      	cmp	r3, #6
 800bfde:	d015      	beq.n	800c00c <HAL_TIM_Base_Start_IT+0xb4>
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfe6:	d011      	beq.n	800c00c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	681a      	ldr	r2, [r3, #0]
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f042 0201 	orr.w	r2, r2, #1
 800bff6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bff8:	e008      	b.n	800c00c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	681a      	ldr	r2, [r3, #0]
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f042 0201 	orr.w	r2, r2, #1
 800c008:	601a      	str	r2, [r3, #0]
 800c00a:	e000      	b.n	800c00e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c00c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c00e:	2300      	movs	r3, #0
}
 800c010:	4618      	mov	r0, r3
 800c012:	3714      	adds	r7, #20
 800c014:	46bd      	mov	sp, r7
 800c016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01a:	4770      	bx	lr
 800c01c:	40012c00 	.word	0x40012c00
 800c020:	40000400 	.word	0x40000400
 800c024:	40000800 	.word	0x40000800
 800c028:	40000c00 	.word	0x40000c00
 800c02c:	40013400 	.word	0x40013400
 800c030:	40014000 	.word	0x40014000
 800c034:	00010007 	.word	0x00010007

0800c038 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800c038:	b480      	push	{r7}
 800c03a:	b083      	sub	sp, #12
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	68da      	ldr	r2, [r3, #12]
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f022 0201 	bic.w	r2, r2, #1
 800c04e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	6a1a      	ldr	r2, [r3, #32]
 800c056:	f241 1311 	movw	r3, #4369	; 0x1111
 800c05a:	4013      	ands	r3, r2
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d10f      	bne.n	800c080 <HAL_TIM_Base_Stop_IT+0x48>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	6a1a      	ldr	r2, [r3, #32]
 800c066:	f240 4344 	movw	r3, #1092	; 0x444
 800c06a:	4013      	ands	r3, r2
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d107      	bne.n	800c080 <HAL_TIM_Base_Stop_IT+0x48>
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	681a      	ldr	r2, [r3, #0]
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f022 0201 	bic.w	r2, r2, #1
 800c07e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2201      	movs	r2, #1
 800c084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c088:	2300      	movs	r3, #0
}
 800c08a:	4618      	mov	r0, r3
 800c08c:	370c      	adds	r7, #12
 800c08e:	46bd      	mov	sp, r7
 800c090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c094:	4770      	bx	lr

0800c096 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c096:	b580      	push	{r7, lr}
 800c098:	b082      	sub	sp, #8
 800c09a:	af00      	add	r7, sp, #0
 800c09c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	691b      	ldr	r3, [r3, #16]
 800c0a4:	f003 0302 	and.w	r3, r3, #2
 800c0a8:	2b02      	cmp	r3, #2
 800c0aa:	d122      	bne.n	800c0f2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	68db      	ldr	r3, [r3, #12]
 800c0b2:	f003 0302 	and.w	r3, r3, #2
 800c0b6:	2b02      	cmp	r3, #2
 800c0b8:	d11b      	bne.n	800c0f2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	f06f 0202 	mvn.w	r2, #2
 800c0c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2201      	movs	r2, #1
 800c0c8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	699b      	ldr	r3, [r3, #24]
 800c0d0:	f003 0303 	and.w	r3, r3, #3
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d003      	beq.n	800c0e0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f000 f9ce 	bl	800c47a <HAL_TIM_IC_CaptureCallback>
 800c0de:	e005      	b.n	800c0ec <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f000 f9c0 	bl	800c466 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f000 f9d1 	bl	800c48e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	691b      	ldr	r3, [r3, #16]
 800c0f8:	f003 0304 	and.w	r3, r3, #4
 800c0fc:	2b04      	cmp	r3, #4
 800c0fe:	d122      	bne.n	800c146 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	68db      	ldr	r3, [r3, #12]
 800c106:	f003 0304 	and.w	r3, r3, #4
 800c10a:	2b04      	cmp	r3, #4
 800c10c:	d11b      	bne.n	800c146 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f06f 0204 	mvn.w	r2, #4
 800c116:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2202      	movs	r2, #2
 800c11c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	699b      	ldr	r3, [r3, #24]
 800c124:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d003      	beq.n	800c134 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f000 f9a4 	bl	800c47a <HAL_TIM_IC_CaptureCallback>
 800c132:	e005      	b.n	800c140 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f000 f996 	bl	800c466 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	f000 f9a7 	bl	800c48e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2200      	movs	r2, #0
 800c144:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	691b      	ldr	r3, [r3, #16]
 800c14c:	f003 0308 	and.w	r3, r3, #8
 800c150:	2b08      	cmp	r3, #8
 800c152:	d122      	bne.n	800c19a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	68db      	ldr	r3, [r3, #12]
 800c15a:	f003 0308 	and.w	r3, r3, #8
 800c15e:	2b08      	cmp	r3, #8
 800c160:	d11b      	bne.n	800c19a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	f06f 0208 	mvn.w	r2, #8
 800c16a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2204      	movs	r2, #4
 800c170:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	69db      	ldr	r3, [r3, #28]
 800c178:	f003 0303 	and.w	r3, r3, #3
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d003      	beq.n	800c188 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f000 f97a 	bl	800c47a <HAL_TIM_IC_CaptureCallback>
 800c186:	e005      	b.n	800c194 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f000 f96c 	bl	800c466 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f000 f97d 	bl	800c48e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2200      	movs	r2, #0
 800c198:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	691b      	ldr	r3, [r3, #16]
 800c1a0:	f003 0310 	and.w	r3, r3, #16
 800c1a4:	2b10      	cmp	r3, #16
 800c1a6:	d122      	bne.n	800c1ee <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	68db      	ldr	r3, [r3, #12]
 800c1ae:	f003 0310 	and.w	r3, r3, #16
 800c1b2:	2b10      	cmp	r3, #16
 800c1b4:	d11b      	bne.n	800c1ee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	f06f 0210 	mvn.w	r2, #16
 800c1be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2208      	movs	r2, #8
 800c1c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	69db      	ldr	r3, [r3, #28]
 800c1cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d003      	beq.n	800c1dc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f000 f950 	bl	800c47a <HAL_TIM_IC_CaptureCallback>
 800c1da:	e005      	b.n	800c1e8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f000 f942 	bl	800c466 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f000 f953 	bl	800c48e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	691b      	ldr	r3, [r3, #16]
 800c1f4:	f003 0301 	and.w	r3, r3, #1
 800c1f8:	2b01      	cmp	r3, #1
 800c1fa:	d10e      	bne.n	800c21a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	68db      	ldr	r3, [r3, #12]
 800c202:	f003 0301 	and.w	r3, r3, #1
 800c206:	2b01      	cmp	r3, #1
 800c208:	d107      	bne.n	800c21a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	f06f 0201 	mvn.w	r2, #1
 800c212:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f7f7 ff2b 	bl	8004070 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	691b      	ldr	r3, [r3, #16]
 800c220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c224:	2b80      	cmp	r3, #128	; 0x80
 800c226:	d10e      	bne.n	800c246 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	68db      	ldr	r3, [r3, #12]
 800c22e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c232:	2b80      	cmp	r3, #128	; 0x80
 800c234:	d107      	bne.n	800c246 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c23e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f000 faff 	bl	800c844 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	691b      	ldr	r3, [r3, #16]
 800c24c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c250:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c254:	d10e      	bne.n	800c274 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	68db      	ldr	r3, [r3, #12]
 800c25c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c260:	2b80      	cmp	r3, #128	; 0x80
 800c262:	d107      	bne.n	800c274 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c26c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c26e:	6878      	ldr	r0, [r7, #4]
 800c270:	f000 faf2 	bl	800c858 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	691b      	ldr	r3, [r3, #16]
 800c27a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c27e:	2b40      	cmp	r3, #64	; 0x40
 800c280:	d10e      	bne.n	800c2a0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	68db      	ldr	r3, [r3, #12]
 800c288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c28c:	2b40      	cmp	r3, #64	; 0x40
 800c28e:	d107      	bne.n	800c2a0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f000 f901 	bl	800c4a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	691b      	ldr	r3, [r3, #16]
 800c2a6:	f003 0320 	and.w	r3, r3, #32
 800c2aa:	2b20      	cmp	r3, #32
 800c2ac:	d10e      	bne.n	800c2cc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	68db      	ldr	r3, [r3, #12]
 800c2b4:	f003 0320 	and.w	r3, r3, #32
 800c2b8:	2b20      	cmp	r3, #32
 800c2ba:	d107      	bne.n	800c2cc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	f06f 0220 	mvn.w	r2, #32
 800c2c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f000 fab2 	bl	800c830 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c2cc:	bf00      	nop
 800c2ce:	3708      	adds	r7, #8
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}

0800c2d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b084      	sub	sp, #16
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c2e8:	2b01      	cmp	r3, #1
 800c2ea:	d101      	bne.n	800c2f0 <HAL_TIM_ConfigClockSource+0x1c>
 800c2ec:	2302      	movs	r3, #2
 800c2ee:	e0b6      	b.n	800c45e <HAL_TIM_ConfigClockSource+0x18a>
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2201      	movs	r2, #1
 800c2f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2202      	movs	r2, #2
 800c2fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	689b      	ldr	r3, [r3, #8]
 800c306:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c30e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c312:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c31a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	68ba      	ldr	r2, [r7, #8]
 800c322:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c32c:	d03e      	beq.n	800c3ac <HAL_TIM_ConfigClockSource+0xd8>
 800c32e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c332:	f200 8087 	bhi.w	800c444 <HAL_TIM_ConfigClockSource+0x170>
 800c336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c33a:	f000 8086 	beq.w	800c44a <HAL_TIM_ConfigClockSource+0x176>
 800c33e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c342:	d87f      	bhi.n	800c444 <HAL_TIM_ConfigClockSource+0x170>
 800c344:	2b70      	cmp	r3, #112	; 0x70
 800c346:	d01a      	beq.n	800c37e <HAL_TIM_ConfigClockSource+0xaa>
 800c348:	2b70      	cmp	r3, #112	; 0x70
 800c34a:	d87b      	bhi.n	800c444 <HAL_TIM_ConfigClockSource+0x170>
 800c34c:	2b60      	cmp	r3, #96	; 0x60
 800c34e:	d050      	beq.n	800c3f2 <HAL_TIM_ConfigClockSource+0x11e>
 800c350:	2b60      	cmp	r3, #96	; 0x60
 800c352:	d877      	bhi.n	800c444 <HAL_TIM_ConfigClockSource+0x170>
 800c354:	2b50      	cmp	r3, #80	; 0x50
 800c356:	d03c      	beq.n	800c3d2 <HAL_TIM_ConfigClockSource+0xfe>
 800c358:	2b50      	cmp	r3, #80	; 0x50
 800c35a:	d873      	bhi.n	800c444 <HAL_TIM_ConfigClockSource+0x170>
 800c35c:	2b40      	cmp	r3, #64	; 0x40
 800c35e:	d058      	beq.n	800c412 <HAL_TIM_ConfigClockSource+0x13e>
 800c360:	2b40      	cmp	r3, #64	; 0x40
 800c362:	d86f      	bhi.n	800c444 <HAL_TIM_ConfigClockSource+0x170>
 800c364:	2b30      	cmp	r3, #48	; 0x30
 800c366:	d064      	beq.n	800c432 <HAL_TIM_ConfigClockSource+0x15e>
 800c368:	2b30      	cmp	r3, #48	; 0x30
 800c36a:	d86b      	bhi.n	800c444 <HAL_TIM_ConfigClockSource+0x170>
 800c36c:	2b20      	cmp	r3, #32
 800c36e:	d060      	beq.n	800c432 <HAL_TIM_ConfigClockSource+0x15e>
 800c370:	2b20      	cmp	r3, #32
 800c372:	d867      	bhi.n	800c444 <HAL_TIM_ConfigClockSource+0x170>
 800c374:	2b00      	cmp	r3, #0
 800c376:	d05c      	beq.n	800c432 <HAL_TIM_ConfigClockSource+0x15e>
 800c378:	2b10      	cmp	r3, #16
 800c37a:	d05a      	beq.n	800c432 <HAL_TIM_ConfigClockSource+0x15e>
 800c37c:	e062      	b.n	800c444 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6818      	ldr	r0, [r3, #0]
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	6899      	ldr	r1, [r3, #8]
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	685a      	ldr	r2, [r3, #4]
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	68db      	ldr	r3, [r3, #12]
 800c38e:	f000 f9a7 	bl	800c6e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	689b      	ldr	r3, [r3, #8]
 800c398:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c3a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	68ba      	ldr	r2, [r7, #8]
 800c3a8:	609a      	str	r2, [r3, #8]
      break;
 800c3aa:	e04f      	b.n	800c44c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6818      	ldr	r0, [r3, #0]
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	6899      	ldr	r1, [r3, #8]
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	685a      	ldr	r2, [r3, #4]
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	68db      	ldr	r3, [r3, #12]
 800c3bc:	f000 f990 	bl	800c6e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	689a      	ldr	r2, [r3, #8]
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c3ce:	609a      	str	r2, [r3, #8]
      break;
 800c3d0:	e03c      	b.n	800c44c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6818      	ldr	r0, [r3, #0]
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	6859      	ldr	r1, [r3, #4]
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	68db      	ldr	r3, [r3, #12]
 800c3de:	461a      	mov	r2, r3
 800c3e0:	f000 f904 	bl	800c5ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	2150      	movs	r1, #80	; 0x50
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f000 f95d 	bl	800c6aa <TIM_ITRx_SetConfig>
      break;
 800c3f0:	e02c      	b.n	800c44c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6818      	ldr	r0, [r3, #0]
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	6859      	ldr	r1, [r3, #4]
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	68db      	ldr	r3, [r3, #12]
 800c3fe:	461a      	mov	r2, r3
 800c400:	f000 f923 	bl	800c64a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	2160      	movs	r1, #96	; 0x60
 800c40a:	4618      	mov	r0, r3
 800c40c:	f000 f94d 	bl	800c6aa <TIM_ITRx_SetConfig>
      break;
 800c410:	e01c      	b.n	800c44c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6818      	ldr	r0, [r3, #0]
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	6859      	ldr	r1, [r3, #4]
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	68db      	ldr	r3, [r3, #12]
 800c41e:	461a      	mov	r2, r3
 800c420:	f000 f8e4 	bl	800c5ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	2140      	movs	r1, #64	; 0x40
 800c42a:	4618      	mov	r0, r3
 800c42c:	f000 f93d 	bl	800c6aa <TIM_ITRx_SetConfig>
      break;
 800c430:	e00c      	b.n	800c44c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681a      	ldr	r2, [r3, #0]
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	4619      	mov	r1, r3
 800c43c:	4610      	mov	r0, r2
 800c43e:	f000 f934 	bl	800c6aa <TIM_ITRx_SetConfig>
      break;
 800c442:	e003      	b.n	800c44c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800c444:	2301      	movs	r3, #1
 800c446:	73fb      	strb	r3, [r7, #15]
      break;
 800c448:	e000      	b.n	800c44c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800c44a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2201      	movs	r2, #1
 800c450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2200      	movs	r2, #0
 800c458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c45c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c45e:	4618      	mov	r0, r3
 800c460:	3710      	adds	r7, #16
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}

0800c466 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c466:	b480      	push	{r7}
 800c468:	b083      	sub	sp, #12
 800c46a:	af00      	add	r7, sp, #0
 800c46c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c46e:	bf00      	nop
 800c470:	370c      	adds	r7, #12
 800c472:	46bd      	mov	sp, r7
 800c474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c478:	4770      	bx	lr

0800c47a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c47a:	b480      	push	{r7}
 800c47c:	b083      	sub	sp, #12
 800c47e:	af00      	add	r7, sp, #0
 800c480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c482:	bf00      	nop
 800c484:	370c      	adds	r7, #12
 800c486:	46bd      	mov	sp, r7
 800c488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48c:	4770      	bx	lr

0800c48e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c48e:	b480      	push	{r7}
 800c490:	b083      	sub	sp, #12
 800c492:	af00      	add	r7, sp, #0
 800c494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c496:	bf00      	nop
 800c498:	370c      	adds	r7, #12
 800c49a:	46bd      	mov	sp, r7
 800c49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a0:	4770      	bx	lr

0800c4a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c4a2:	b480      	push	{r7}
 800c4a4:	b083      	sub	sp, #12
 800c4a6:	af00      	add	r7, sp, #0
 800c4a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c4aa:	bf00      	nop
 800c4ac:	370c      	adds	r7, #12
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b4:	4770      	bx	lr
	...

0800c4b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c4b8:	b480      	push	{r7}
 800c4ba:	b085      	sub	sp, #20
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
 800c4c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	4a40      	ldr	r2, [pc, #256]	; (800c5cc <TIM_Base_SetConfig+0x114>)
 800c4cc:	4293      	cmp	r3, r2
 800c4ce:	d013      	beq.n	800c4f8 <TIM_Base_SetConfig+0x40>
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4d6:	d00f      	beq.n	800c4f8 <TIM_Base_SetConfig+0x40>
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	4a3d      	ldr	r2, [pc, #244]	; (800c5d0 <TIM_Base_SetConfig+0x118>)
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d00b      	beq.n	800c4f8 <TIM_Base_SetConfig+0x40>
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	4a3c      	ldr	r2, [pc, #240]	; (800c5d4 <TIM_Base_SetConfig+0x11c>)
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	d007      	beq.n	800c4f8 <TIM_Base_SetConfig+0x40>
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	4a3b      	ldr	r2, [pc, #236]	; (800c5d8 <TIM_Base_SetConfig+0x120>)
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	d003      	beq.n	800c4f8 <TIM_Base_SetConfig+0x40>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	4a3a      	ldr	r2, [pc, #232]	; (800c5dc <TIM_Base_SetConfig+0x124>)
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	d108      	bne.n	800c50a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c4fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	685b      	ldr	r3, [r3, #4]
 800c504:	68fa      	ldr	r2, [r7, #12]
 800c506:	4313      	orrs	r3, r2
 800c508:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	4a2f      	ldr	r2, [pc, #188]	; (800c5cc <TIM_Base_SetConfig+0x114>)
 800c50e:	4293      	cmp	r3, r2
 800c510:	d01f      	beq.n	800c552 <TIM_Base_SetConfig+0x9a>
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c518:	d01b      	beq.n	800c552 <TIM_Base_SetConfig+0x9a>
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	4a2c      	ldr	r2, [pc, #176]	; (800c5d0 <TIM_Base_SetConfig+0x118>)
 800c51e:	4293      	cmp	r3, r2
 800c520:	d017      	beq.n	800c552 <TIM_Base_SetConfig+0x9a>
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	4a2b      	ldr	r2, [pc, #172]	; (800c5d4 <TIM_Base_SetConfig+0x11c>)
 800c526:	4293      	cmp	r3, r2
 800c528:	d013      	beq.n	800c552 <TIM_Base_SetConfig+0x9a>
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	4a2a      	ldr	r2, [pc, #168]	; (800c5d8 <TIM_Base_SetConfig+0x120>)
 800c52e:	4293      	cmp	r3, r2
 800c530:	d00f      	beq.n	800c552 <TIM_Base_SetConfig+0x9a>
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	4a29      	ldr	r2, [pc, #164]	; (800c5dc <TIM_Base_SetConfig+0x124>)
 800c536:	4293      	cmp	r3, r2
 800c538:	d00b      	beq.n	800c552 <TIM_Base_SetConfig+0x9a>
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	4a28      	ldr	r2, [pc, #160]	; (800c5e0 <TIM_Base_SetConfig+0x128>)
 800c53e:	4293      	cmp	r3, r2
 800c540:	d007      	beq.n	800c552 <TIM_Base_SetConfig+0x9a>
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	4a27      	ldr	r2, [pc, #156]	; (800c5e4 <TIM_Base_SetConfig+0x12c>)
 800c546:	4293      	cmp	r3, r2
 800c548:	d003      	beq.n	800c552 <TIM_Base_SetConfig+0x9a>
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	4a26      	ldr	r2, [pc, #152]	; (800c5e8 <TIM_Base_SetConfig+0x130>)
 800c54e:	4293      	cmp	r3, r2
 800c550:	d108      	bne.n	800c564 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c558:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	68db      	ldr	r3, [r3, #12]
 800c55e:	68fa      	ldr	r2, [r7, #12]
 800c560:	4313      	orrs	r3, r2
 800c562:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	695b      	ldr	r3, [r3, #20]
 800c56e:	4313      	orrs	r3, r2
 800c570:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	68fa      	ldr	r2, [r7, #12]
 800c576:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	689a      	ldr	r2, [r3, #8]
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	681a      	ldr	r2, [r3, #0]
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	4a10      	ldr	r2, [pc, #64]	; (800c5cc <TIM_Base_SetConfig+0x114>)
 800c58c:	4293      	cmp	r3, r2
 800c58e:	d00f      	beq.n	800c5b0 <TIM_Base_SetConfig+0xf8>
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	4a12      	ldr	r2, [pc, #72]	; (800c5dc <TIM_Base_SetConfig+0x124>)
 800c594:	4293      	cmp	r3, r2
 800c596:	d00b      	beq.n	800c5b0 <TIM_Base_SetConfig+0xf8>
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	4a11      	ldr	r2, [pc, #68]	; (800c5e0 <TIM_Base_SetConfig+0x128>)
 800c59c:	4293      	cmp	r3, r2
 800c59e:	d007      	beq.n	800c5b0 <TIM_Base_SetConfig+0xf8>
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	4a10      	ldr	r2, [pc, #64]	; (800c5e4 <TIM_Base_SetConfig+0x12c>)
 800c5a4:	4293      	cmp	r3, r2
 800c5a6:	d003      	beq.n	800c5b0 <TIM_Base_SetConfig+0xf8>
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	4a0f      	ldr	r2, [pc, #60]	; (800c5e8 <TIM_Base_SetConfig+0x130>)
 800c5ac:	4293      	cmp	r3, r2
 800c5ae:	d103      	bne.n	800c5b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	691a      	ldr	r2, [r3, #16]
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2201      	movs	r2, #1
 800c5bc:	615a      	str	r2, [r3, #20]
}
 800c5be:	bf00      	nop
 800c5c0:	3714      	adds	r7, #20
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c8:	4770      	bx	lr
 800c5ca:	bf00      	nop
 800c5cc:	40012c00 	.word	0x40012c00
 800c5d0:	40000400 	.word	0x40000400
 800c5d4:	40000800 	.word	0x40000800
 800c5d8:	40000c00 	.word	0x40000c00
 800c5dc:	40013400 	.word	0x40013400
 800c5e0:	40014000 	.word	0x40014000
 800c5e4:	40014400 	.word	0x40014400
 800c5e8:	40014800 	.word	0x40014800

0800c5ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b087      	sub	sp, #28
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	60f8      	str	r0, [r7, #12]
 800c5f4:	60b9      	str	r1, [r7, #8]
 800c5f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	6a1b      	ldr	r3, [r3, #32]
 800c5fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	6a1b      	ldr	r3, [r3, #32]
 800c602:	f023 0201 	bic.w	r2, r3, #1
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	699b      	ldr	r3, [r3, #24]
 800c60e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c610:	693b      	ldr	r3, [r7, #16]
 800c612:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c616:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	011b      	lsls	r3, r3, #4
 800c61c:	693a      	ldr	r2, [r7, #16]
 800c61e:	4313      	orrs	r3, r2
 800c620:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c622:	697b      	ldr	r3, [r7, #20]
 800c624:	f023 030a 	bic.w	r3, r3, #10
 800c628:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c62a:	697a      	ldr	r2, [r7, #20]
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	4313      	orrs	r3, r2
 800c630:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	693a      	ldr	r2, [r7, #16]
 800c636:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	697a      	ldr	r2, [r7, #20]
 800c63c:	621a      	str	r2, [r3, #32]
}
 800c63e:	bf00      	nop
 800c640:	371c      	adds	r7, #28
 800c642:	46bd      	mov	sp, r7
 800c644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c648:	4770      	bx	lr

0800c64a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c64a:	b480      	push	{r7}
 800c64c:	b087      	sub	sp, #28
 800c64e:	af00      	add	r7, sp, #0
 800c650:	60f8      	str	r0, [r7, #12]
 800c652:	60b9      	str	r1, [r7, #8]
 800c654:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	6a1b      	ldr	r3, [r3, #32]
 800c65a:	f023 0210 	bic.w	r2, r3, #16
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	699b      	ldr	r3, [r3, #24]
 800c666:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	6a1b      	ldr	r3, [r3, #32]
 800c66c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c66e:	697b      	ldr	r3, [r7, #20]
 800c670:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c674:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	031b      	lsls	r3, r3, #12
 800c67a:	697a      	ldr	r2, [r7, #20]
 800c67c:	4313      	orrs	r3, r2
 800c67e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c686:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	011b      	lsls	r3, r3, #4
 800c68c:	693a      	ldr	r2, [r7, #16]
 800c68e:	4313      	orrs	r3, r2
 800c690:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	697a      	ldr	r2, [r7, #20]
 800c696:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	693a      	ldr	r2, [r7, #16]
 800c69c:	621a      	str	r2, [r3, #32]
}
 800c69e:	bf00      	nop
 800c6a0:	371c      	adds	r7, #28
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a8:	4770      	bx	lr

0800c6aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c6aa:	b480      	push	{r7}
 800c6ac:	b085      	sub	sp, #20
 800c6ae:	af00      	add	r7, sp, #0
 800c6b0:	6078      	str	r0, [r7, #4]
 800c6b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	689b      	ldr	r3, [r3, #8]
 800c6b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c6c2:	683a      	ldr	r2, [r7, #0]
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	4313      	orrs	r3, r2
 800c6c8:	f043 0307 	orr.w	r3, r3, #7
 800c6cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	68fa      	ldr	r2, [r7, #12]
 800c6d2:	609a      	str	r2, [r3, #8]
}
 800c6d4:	bf00      	nop
 800c6d6:	3714      	adds	r7, #20
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6de:	4770      	bx	lr

0800c6e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b087      	sub	sp, #28
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	60f8      	str	r0, [r7, #12]
 800c6e8:	60b9      	str	r1, [r7, #8]
 800c6ea:	607a      	str	r2, [r7, #4]
 800c6ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	689b      	ldr	r3, [r3, #8]
 800c6f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c6f4:	697b      	ldr	r3, [r7, #20]
 800c6f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c6fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	021a      	lsls	r2, r3, #8
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	431a      	orrs	r2, r3
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	4313      	orrs	r3, r2
 800c708:	697a      	ldr	r2, [r7, #20]
 800c70a:	4313      	orrs	r3, r2
 800c70c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	697a      	ldr	r2, [r7, #20]
 800c712:	609a      	str	r2, [r3, #8]
}
 800c714:	bf00      	nop
 800c716:	371c      	adds	r7, #28
 800c718:	46bd      	mov	sp, r7
 800c71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71e:	4770      	bx	lr

0800c720 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c720:	b480      	push	{r7}
 800c722:	b085      	sub	sp, #20
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
 800c728:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c730:	2b01      	cmp	r3, #1
 800c732:	d101      	bne.n	800c738 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c734:	2302      	movs	r3, #2
 800c736:	e068      	b.n	800c80a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2201      	movs	r2, #1
 800c73c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2202      	movs	r2, #2
 800c744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	685b      	ldr	r3, [r3, #4]
 800c74e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	689b      	ldr	r3, [r3, #8]
 800c756:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	4a2e      	ldr	r2, [pc, #184]	; (800c818 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	d004      	beq.n	800c76c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	4a2d      	ldr	r2, [pc, #180]	; (800c81c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c768:	4293      	cmp	r3, r2
 800c76a:	d108      	bne.n	800c77e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c772:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	685b      	ldr	r3, [r3, #4]
 800c778:	68fa      	ldr	r2, [r7, #12]
 800c77a:	4313      	orrs	r3, r2
 800c77c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c784:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	68fa      	ldr	r2, [r7, #12]
 800c78c:	4313      	orrs	r3, r2
 800c78e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	68fa      	ldr	r2, [r7, #12]
 800c796:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	4a1e      	ldr	r2, [pc, #120]	; (800c818 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	d01d      	beq.n	800c7de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7aa:	d018      	beq.n	800c7de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	4a1b      	ldr	r2, [pc, #108]	; (800c820 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c7b2:	4293      	cmp	r3, r2
 800c7b4:	d013      	beq.n	800c7de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	4a1a      	ldr	r2, [pc, #104]	; (800c824 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	d00e      	beq.n	800c7de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	4a18      	ldr	r2, [pc, #96]	; (800c828 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c7c6:	4293      	cmp	r3, r2
 800c7c8:	d009      	beq.n	800c7de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	4a13      	ldr	r2, [pc, #76]	; (800c81c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c7d0:	4293      	cmp	r3, r2
 800c7d2:	d004      	beq.n	800c7de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	4a14      	ldr	r2, [pc, #80]	; (800c82c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c7da:	4293      	cmp	r3, r2
 800c7dc:	d10c      	bne.n	800c7f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c7e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	689b      	ldr	r3, [r3, #8]
 800c7ea:	68ba      	ldr	r2, [r7, #8]
 800c7ec:	4313      	orrs	r3, r2
 800c7ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	68ba      	ldr	r2, [r7, #8]
 800c7f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2201      	movs	r2, #1
 800c7fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2200      	movs	r2, #0
 800c804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c808:	2300      	movs	r3, #0
}
 800c80a:	4618      	mov	r0, r3
 800c80c:	3714      	adds	r7, #20
 800c80e:	46bd      	mov	sp, r7
 800c810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c814:	4770      	bx	lr
 800c816:	bf00      	nop
 800c818:	40012c00 	.word	0x40012c00
 800c81c:	40013400 	.word	0x40013400
 800c820:	40000400 	.word	0x40000400
 800c824:	40000800 	.word	0x40000800
 800c828:	40000c00 	.word	0x40000c00
 800c82c:	40014000 	.word	0x40014000

0800c830 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c830:	b480      	push	{r7}
 800c832:	b083      	sub	sp, #12
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c838:	bf00      	nop
 800c83a:	370c      	adds	r7, #12
 800c83c:	46bd      	mov	sp, r7
 800c83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c842:	4770      	bx	lr

0800c844 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c844:	b480      	push	{r7}
 800c846:	b083      	sub	sp, #12
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c84c:	bf00      	nop
 800c84e:	370c      	adds	r7, #12
 800c850:	46bd      	mov	sp, r7
 800c852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c856:	4770      	bx	lr

0800c858 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c858:	b480      	push	{r7}
 800c85a:	b083      	sub	sp, #12
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c860:	bf00      	nop
 800c862:	370c      	adds	r7, #12
 800c864:	46bd      	mov	sp, r7
 800c866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86a:	4770      	bx	lr

0800c86c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b082      	sub	sp, #8
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d101      	bne.n	800c87e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c87a:	2301      	movs	r3, #1
 800c87c:	e040      	b.n	800c900 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c882:	2b00      	cmp	r3, #0
 800c884:	d106      	bne.n	800c894 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2200      	movs	r2, #0
 800c88a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	f7f8 fe2a 	bl	80054e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2224      	movs	r2, #36	; 0x24
 800c898:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	681a      	ldr	r2, [r3, #0]
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	f022 0201 	bic.w	r2, r2, #1
 800c8a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f000 fc0a 	bl	800d0c4 <UART_SetConfig>
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	2b01      	cmp	r3, #1
 800c8b4:	d101      	bne.n	800c8ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800c8b6:	2301      	movs	r3, #1
 800c8b8:	e022      	b.n	800c900 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d002      	beq.n	800c8c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f000 feb6 	bl	800d634 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	685a      	ldr	r2, [r3, #4]
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c8d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	689a      	ldr	r2, [r3, #8]
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c8e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	681a      	ldr	r2, [r3, #0]
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	f042 0201 	orr.w	r2, r2, #1
 800c8f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f000 ff3d 	bl	800d778 <UART_CheckIdleState>
 800c8fe:	4603      	mov	r3, r0
}
 800c900:	4618      	mov	r0, r3
 800c902:	3708      	adds	r7, #8
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}

0800c908 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b08a      	sub	sp, #40	; 0x28
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	60f8      	str	r0, [r7, #12]
 800c910:	60b9      	str	r1, [r7, #8]
 800c912:	4613      	mov	r3, r2
 800c914:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c91a:	2b20      	cmp	r3, #32
 800c91c:	d142      	bne.n	800c9a4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d002      	beq.n	800c92a <HAL_UART_Receive_IT+0x22>
 800c924:	88fb      	ldrh	r3, [r7, #6]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d101      	bne.n	800c92e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800c92a:	2301      	movs	r3, #1
 800c92c:	e03b      	b.n	800c9a6 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800c934:	2b01      	cmp	r3, #1
 800c936:	d101      	bne.n	800c93c <HAL_UART_Receive_IT+0x34>
 800c938:	2302      	movs	r3, #2
 800c93a:	e034      	b.n	800c9a6 <HAL_UART_Receive_IT+0x9e>
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	2201      	movs	r2, #1
 800c940:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	2200      	movs	r2, #0
 800c948:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	4a18      	ldr	r2, [pc, #96]	; (800c9b0 <HAL_UART_Receive_IT+0xa8>)
 800c950:	4293      	cmp	r3, r2
 800c952:	d01f      	beq.n	800c994 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	685b      	ldr	r3, [r3, #4]
 800c95a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d018      	beq.n	800c994 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c968:	697b      	ldr	r3, [r7, #20]
 800c96a:	e853 3f00 	ldrex	r3, [r3]
 800c96e:	613b      	str	r3, [r7, #16]
   return(result);
 800c970:	693b      	ldr	r3, [r7, #16]
 800c972:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c976:	627b      	str	r3, [r7, #36]	; 0x24
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	461a      	mov	r2, r3
 800c97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c980:	623b      	str	r3, [r7, #32]
 800c982:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c984:	69f9      	ldr	r1, [r7, #28]
 800c986:	6a3a      	ldr	r2, [r7, #32]
 800c988:	e841 2300 	strex	r3, r2, [r1]
 800c98c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c98e:	69bb      	ldr	r3, [r7, #24]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d1e6      	bne.n	800c962 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c994:	88fb      	ldrh	r3, [r7, #6]
 800c996:	461a      	mov	r2, r3
 800c998:	68b9      	ldr	r1, [r7, #8]
 800c99a:	68f8      	ldr	r0, [r7, #12]
 800c99c:	f000 fffa 	bl	800d994 <UART_Start_Receive_IT>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	e000      	b.n	800c9a6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800c9a4:	2302      	movs	r3, #2
  }
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	3728      	adds	r7, #40	; 0x28
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}
 800c9ae:	bf00      	nop
 800c9b0:	40008000 	.word	0x40008000

0800c9b4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b08a      	sub	sp, #40	; 0x28
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	60f8      	str	r0, [r7, #12]
 800c9bc:	60b9      	str	r1, [r7, #8]
 800c9be:	4613      	mov	r3, r2
 800c9c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c9c6:	2b20      	cmp	r3, #32
 800c9c8:	d178      	bne.n	800cabc <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800c9ca:	68bb      	ldr	r3, [r7, #8]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d002      	beq.n	800c9d6 <HAL_UART_Transmit_DMA+0x22>
 800c9d0:	88fb      	ldrh	r3, [r7, #6]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d101      	bne.n	800c9da <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	e071      	b.n	800cabe <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800c9e0:	2b01      	cmp	r3, #1
 800c9e2:	d101      	bne.n	800c9e8 <HAL_UART_Transmit_DMA+0x34>
 800c9e4:	2302      	movs	r3, #2
 800c9e6:	e06a      	b.n	800cabe <HAL_UART_Transmit_DMA+0x10a>
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	2201      	movs	r2, #1
 800c9ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	68ba      	ldr	r2, [r7, #8]
 800c9f4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	88fa      	ldrh	r2, [r7, #6]
 800c9fa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	88fa      	ldrh	r2, [r7, #6]
 800ca02:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	2200      	movs	r2, #0
 800ca0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	2221      	movs	r2, #33	; 0x21
 800ca12:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d02b      	beq.n	800ca74 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca20:	4a29      	ldr	r2, [pc, #164]	; (800cac8 <HAL_UART_Transmit_DMA+0x114>)
 800ca22:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca28:	4a28      	ldr	r2, [pc, #160]	; (800cacc <HAL_UART_Transmit_DMA+0x118>)
 800ca2a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca30:	4a27      	ldr	r2, [pc, #156]	; (800cad0 <HAL_UART_Transmit_DMA+0x11c>)
 800ca32:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca38:	2200      	movs	r2, #0
 800ca3a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca44:	4619      	mov	r1, r3
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	3328      	adds	r3, #40	; 0x28
 800ca4c:	461a      	mov	r2, r3
 800ca4e:	88fb      	ldrh	r3, [r7, #6]
 800ca50:	f7f9 ff94 	bl	800697c <HAL_DMA_Start_IT>
 800ca54:	4603      	mov	r3, r0
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d00c      	beq.n	800ca74 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	2210      	movs	r2, #16
 800ca5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	2200      	movs	r2, #0
 800ca66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	2220      	movs	r2, #32
 800ca6e:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 800ca70:	2301      	movs	r3, #1
 800ca72:	e024      	b.n	800cabe <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	2240      	movs	r2, #64	; 0x40
 800ca7a:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	3308      	adds	r3, #8
 800ca8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca8c:	697b      	ldr	r3, [r7, #20]
 800ca8e:	e853 3f00 	ldrex	r3, [r3]
 800ca92:	613b      	str	r3, [r7, #16]
   return(result);
 800ca94:	693b      	ldr	r3, [r7, #16]
 800ca96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca9a:	627b      	str	r3, [r7, #36]	; 0x24
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	3308      	adds	r3, #8
 800caa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800caa4:	623a      	str	r2, [r7, #32]
 800caa6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caa8:	69f9      	ldr	r1, [r7, #28]
 800caaa:	6a3a      	ldr	r2, [r7, #32]
 800caac:	e841 2300 	strex	r3, r2, [r1]
 800cab0:	61bb      	str	r3, [r7, #24]
   return(result);
 800cab2:	69bb      	ldr	r3, [r7, #24]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d1e5      	bne.n	800ca84 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 800cab8:	2300      	movs	r3, #0
 800caba:	e000      	b.n	800cabe <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800cabc:	2302      	movs	r3, #2
  }
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	3728      	adds	r7, #40	; 0x28
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}
 800cac6:	bf00      	nop
 800cac8:	0800dc3b 	.word	0x0800dc3b
 800cacc:	0800dcd5 	.word	0x0800dcd5
 800cad0:	0800dcf1 	.word	0x0800dcf1

0800cad4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b0ba      	sub	sp, #232	; 0xe8
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	69db      	ldr	r3, [r3, #28]
 800cae2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	689b      	ldr	r3, [r3, #8]
 800caf6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cafa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800cafe:	f640 030f 	movw	r3, #2063	; 0x80f
 800cb02:	4013      	ands	r3, r2
 800cb04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800cb08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d115      	bne.n	800cb3c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800cb10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb14:	f003 0320 	and.w	r3, r3, #32
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d00f      	beq.n	800cb3c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800cb1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb20:	f003 0320 	and.w	r3, r3, #32
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d009      	beq.n	800cb3c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	f000 82a6 	beq.w	800d07e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	4798      	blx	r3
      }
      return;
 800cb3a:	e2a0      	b.n	800d07e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800cb3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	f000 8117 	beq.w	800cd74 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800cb46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cb4a:	f003 0301 	and.w	r3, r3, #1
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d106      	bne.n	800cb60 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800cb52:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800cb56:	4b85      	ldr	r3, [pc, #532]	; (800cd6c <HAL_UART_IRQHandler+0x298>)
 800cb58:	4013      	ands	r3, r2
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	f000 810a 	beq.w	800cd74 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cb60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb64:	f003 0301 	and.w	r3, r3, #1
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d011      	beq.n	800cb90 <HAL_UART_IRQHandler+0xbc>
 800cb6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d00b      	beq.n	800cb90 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	2201      	movs	r2, #1
 800cb7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cb86:	f043 0201 	orr.w	r2, r3, #1
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cb90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb94:	f003 0302 	and.w	r3, r3, #2
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d011      	beq.n	800cbc0 <HAL_UART_IRQHandler+0xec>
 800cb9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cba0:	f003 0301 	and.w	r3, r3, #1
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d00b      	beq.n	800cbc0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	2202      	movs	r2, #2
 800cbae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cbb6:	f043 0204 	orr.w	r2, r3, #4
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cbc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cbc4:	f003 0304 	and.w	r3, r3, #4
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d011      	beq.n	800cbf0 <HAL_UART_IRQHandler+0x11c>
 800cbcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cbd0:	f003 0301 	and.w	r3, r3, #1
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d00b      	beq.n	800cbf0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	2204      	movs	r2, #4
 800cbde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cbe6:	f043 0202 	orr.w	r2, r3, #2
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cbf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cbf4:	f003 0308 	and.w	r3, r3, #8
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d017      	beq.n	800cc2c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800cbfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc00:	f003 0320 	and.w	r3, r3, #32
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d105      	bne.n	800cc14 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800cc08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc0c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d00b      	beq.n	800cc2c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	2208      	movs	r2, #8
 800cc1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cc22:	f043 0208 	orr.w	r2, r3, #8
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cc2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d012      	beq.n	800cc5e <HAL_UART_IRQHandler+0x18a>
 800cc38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d00c      	beq.n	800cc5e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cc4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cc54:	f043 0220 	orr.w	r2, r3, #32
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	f000 820c 	beq.w	800d082 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800cc6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc6e:	f003 0320 	and.w	r3, r3, #32
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d00d      	beq.n	800cc92 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800cc76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc7a:	f003 0320 	and.w	r3, r3, #32
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d007      	beq.n	800cc92 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d003      	beq.n	800cc92 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cc98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	689b      	ldr	r3, [r3, #8]
 800cca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cca6:	2b40      	cmp	r3, #64	; 0x40
 800cca8:	d005      	beq.n	800ccb6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ccaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ccae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d04f      	beq.n	800cd56 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f000 ff5c 	bl	800db74 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	689b      	ldr	r3, [r3, #8]
 800ccc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccc6:	2b40      	cmp	r3, #64	; 0x40
 800ccc8:	d141      	bne.n	800cd4e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	3308      	adds	r3, #8
 800ccd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ccd8:	e853 3f00 	ldrex	r3, [r3]
 800ccdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800cce0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cce4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cce8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	3308      	adds	r3, #8
 800ccf2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ccf6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ccfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccfe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cd02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800cd06:	e841 2300 	strex	r3, r2, [r1]
 800cd0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800cd0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d1d9      	bne.n	800ccca <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d013      	beq.n	800cd46 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd22:	4a13      	ldr	r2, [pc, #76]	; (800cd70 <HAL_UART_IRQHandler+0x29c>)
 800cd24:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	f7f9 fec4 	bl	8006ab8 <HAL_DMA_Abort_IT>
 800cd30:	4603      	mov	r3, r0
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d017      	beq.n	800cd66 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd3c:	687a      	ldr	r2, [r7, #4]
 800cd3e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800cd40:	4610      	mov	r0, r2
 800cd42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd44:	e00f      	b.n	800cd66 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cd46:	6878      	ldr	r0, [r7, #4]
 800cd48:	f7f7 fc50 	bl	80045ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd4c:	e00b      	b.n	800cd66 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cd4e:	6878      	ldr	r0, [r7, #4]
 800cd50:	f7f7 fc4c 	bl	80045ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd54:	e007      	b.n	800cd66 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cd56:	6878      	ldr	r0, [r7, #4]
 800cd58:	f7f7 fc48 	bl	80045ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2200      	movs	r2, #0
 800cd60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800cd64:	e18d      	b.n	800d082 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd66:	bf00      	nop
    return;
 800cd68:	e18b      	b.n	800d082 <HAL_UART_IRQHandler+0x5ae>
 800cd6a:	bf00      	nop
 800cd6c:	04000120 	.word	0x04000120
 800cd70:	0800dd6d 	.word	0x0800dd6d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd78:	2b01      	cmp	r3, #1
 800cd7a:	f040 8146 	bne.w	800d00a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cd7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd82:	f003 0310 	and.w	r3, r3, #16
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	f000 813f 	beq.w	800d00a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cd8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cd90:	f003 0310 	and.w	r3, r3, #16
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	f000 8138 	beq.w	800d00a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	2210      	movs	r2, #16
 800cda0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	689b      	ldr	r3, [r3, #8]
 800cda8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdac:	2b40      	cmp	r3, #64	; 0x40
 800cdae:	f040 80b4 	bne.w	800cf1a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	685b      	ldr	r3, [r3, #4]
 800cdba:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cdbe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	f000 815f 	beq.w	800d086 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800cdce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cdd2:	429a      	cmp	r2, r3
 800cdd4:	f080 8157 	bcs.w	800d086 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cdde:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	f003 0320 	and.w	r3, r3, #32
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	f040 8085 	bne.w	800cefe <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ce00:	e853 3f00 	ldrex	r3, [r3]
 800ce04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ce08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ce0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ce10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	461a      	mov	r2, r3
 800ce1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ce1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ce22:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce26:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ce2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ce2e:	e841 2300 	strex	r3, r2, [r1]
 800ce32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ce36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d1da      	bne.n	800cdf4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	3308      	adds	r3, #8
 800ce44:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ce48:	e853 3f00 	ldrex	r3, [r3]
 800ce4c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ce4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ce50:	f023 0301 	bic.w	r3, r3, #1
 800ce54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	3308      	adds	r3, #8
 800ce5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ce62:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ce66:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce68:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ce6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ce6e:	e841 2300 	strex	r3, r2, [r1]
 800ce72:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ce74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d1e1      	bne.n	800ce3e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	3308      	adds	r3, #8
 800ce80:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ce84:	e853 3f00 	ldrex	r3, [r3]
 800ce88:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ce8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ce8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ce90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	3308      	adds	r3, #8
 800ce9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ce9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cea0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cea2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cea4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cea6:	e841 2300 	strex	r3, r2, [r1]
 800ceaa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ceac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d1e3      	bne.n	800ce7a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2220      	movs	r2, #32
 800ceb6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2200      	movs	r2, #0
 800cebc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cec6:	e853 3f00 	ldrex	r3, [r3]
 800ceca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cecc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cece:	f023 0310 	bic.w	r3, r3, #16
 800ced2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	461a      	mov	r2, r3
 800cedc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cee0:	65bb      	str	r3, [r7, #88]	; 0x58
 800cee2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cee4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cee6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cee8:	e841 2300 	strex	r3, r2, [r1]
 800ceec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ceee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d1e4      	bne.n	800cebe <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cef8:	4618      	mov	r0, r3
 800cefa:	f7f9 fd9f 	bl	8006a3c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800cf0a:	b29b      	uxth	r3, r3
 800cf0c:	1ad3      	subs	r3, r2, r3
 800cf0e:	b29b      	uxth	r3, r3
 800cf10:	4619      	mov	r1, r3
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f000 f8ca 	bl	800d0ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cf18:	e0b5      	b.n	800d086 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800cf26:	b29b      	uxth	r3, r3
 800cf28:	1ad3      	subs	r3, r2, r3
 800cf2a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800cf34:	b29b      	uxth	r3, r3
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	f000 80a7 	beq.w	800d08a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800cf3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	f000 80a2 	beq.w	800d08a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf4e:	e853 3f00 	ldrex	r3, [r3]
 800cf52:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cf54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cf5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	461a      	mov	r2, r3
 800cf64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cf68:	647b      	str	r3, [r7, #68]	; 0x44
 800cf6a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf6c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cf6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cf70:	e841 2300 	strex	r3, r2, [r1]
 800cf74:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cf76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d1e4      	bne.n	800cf46 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	3308      	adds	r3, #8
 800cf82:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf86:	e853 3f00 	ldrex	r3, [r3]
 800cf8a:	623b      	str	r3, [r7, #32]
   return(result);
 800cf8c:	6a3b      	ldr	r3, [r7, #32]
 800cf8e:	f023 0301 	bic.w	r3, r3, #1
 800cf92:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	3308      	adds	r3, #8
 800cf9c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800cfa0:	633a      	str	r2, [r7, #48]	; 0x30
 800cfa2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfa4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cfa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cfa8:	e841 2300 	strex	r3, r2, [r1]
 800cfac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cfae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d1e3      	bne.n	800cf7c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2220      	movs	r2, #32
 800cfb8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	e853 3f00 	ldrex	r3, [r3]
 800cfd2:	60fb      	str	r3, [r7, #12]
   return(result);
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	f023 0310 	bic.w	r3, r3, #16
 800cfda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	461a      	mov	r2, r3
 800cfe4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cfe8:	61fb      	str	r3, [r7, #28]
 800cfea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfec:	69b9      	ldr	r1, [r7, #24]
 800cfee:	69fa      	ldr	r2, [r7, #28]
 800cff0:	e841 2300 	strex	r3, r2, [r1]
 800cff4:	617b      	str	r3, [r7, #20]
   return(result);
 800cff6:	697b      	ldr	r3, [r7, #20]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d1e4      	bne.n	800cfc6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cffc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d000:	4619      	mov	r1, r3
 800d002:	6878      	ldr	r0, [r7, #4]
 800d004:	f000 f852 	bl	800d0ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d008:	e03f      	b.n	800d08a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d00a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d00e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d012:	2b00      	cmp	r3, #0
 800d014:	d00e      	beq.n	800d034 <HAL_UART_IRQHandler+0x560>
 800d016:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d01a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d008      	beq.n	800d034 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d02a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f001 f83d 	bl	800e0ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d032:	e02d      	b.n	800d090 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800d034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d00e      	beq.n	800d05e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800d040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d008      	beq.n	800d05e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d050:	2b00      	cmp	r3, #0
 800d052:	d01c      	beq.n	800d08e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d058:	6878      	ldr	r0, [r7, #4]
 800d05a:	4798      	blx	r3
    }
    return;
 800d05c:	e017      	b.n	800d08e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d05e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d066:	2b00      	cmp	r3, #0
 800d068:	d012      	beq.n	800d090 <HAL_UART_IRQHandler+0x5bc>
 800d06a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d06e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d072:	2b00      	cmp	r3, #0
 800d074:	d00c      	beq.n	800d090 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f000 fe8e 	bl	800dd98 <UART_EndTransmit_IT>
    return;
 800d07c:	e008      	b.n	800d090 <HAL_UART_IRQHandler+0x5bc>
      return;
 800d07e:	bf00      	nop
 800d080:	e006      	b.n	800d090 <HAL_UART_IRQHandler+0x5bc>
    return;
 800d082:	bf00      	nop
 800d084:	e004      	b.n	800d090 <HAL_UART_IRQHandler+0x5bc>
      return;
 800d086:	bf00      	nop
 800d088:	e002      	b.n	800d090 <HAL_UART_IRQHandler+0x5bc>
      return;
 800d08a:	bf00      	nop
 800d08c:	e000      	b.n	800d090 <HAL_UART_IRQHandler+0x5bc>
    return;
 800d08e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800d090:	37e8      	adds	r7, #232	; 0xe8
 800d092:	46bd      	mov	sp, r7
 800d094:	bd80      	pop	{r7, pc}
 800d096:	bf00      	nop

0800d098 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d098:	b480      	push	{r7}
 800d09a:	b083      	sub	sp, #12
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d0a0:	bf00      	nop
 800d0a2:	370c      	adds	r7, #12
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0aa:	4770      	bx	lr

0800d0ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b083      	sub	sp, #12
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
 800d0b4:	460b      	mov	r3, r1
 800d0b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d0b8:	bf00      	nop
 800d0ba:	370c      	adds	r7, #12
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c2:	4770      	bx	lr

0800d0c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d0c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d0c8:	b08a      	sub	sp, #40	; 0x28
 800d0ca:	af00      	add	r7, sp, #0
 800d0cc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	689a      	ldr	r2, [r3, #8]
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	691b      	ldr	r3, [r3, #16]
 800d0dc:	431a      	orrs	r2, r3
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	695b      	ldr	r3, [r3, #20]
 800d0e2:	431a      	orrs	r2, r3
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	69db      	ldr	r3, [r3, #28]
 800d0e8:	4313      	orrs	r3, r2
 800d0ea:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	681a      	ldr	r2, [r3, #0]
 800d0f2:	4ba4      	ldr	r3, [pc, #656]	; (800d384 <UART_SetConfig+0x2c0>)
 800d0f4:	4013      	ands	r3, r2
 800d0f6:	68fa      	ldr	r2, [r7, #12]
 800d0f8:	6812      	ldr	r2, [r2, #0]
 800d0fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d0fc:	430b      	orrs	r3, r1
 800d0fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	685b      	ldr	r3, [r3, #4]
 800d106:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	68da      	ldr	r2, [r3, #12]
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	430a      	orrs	r2, r1
 800d114:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	699b      	ldr	r3, [r3, #24]
 800d11a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	4a99      	ldr	r2, [pc, #612]	; (800d388 <UART_SetConfig+0x2c4>)
 800d122:	4293      	cmp	r3, r2
 800d124:	d004      	beq.n	800d130 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	6a1b      	ldr	r3, [r3, #32]
 800d12a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d12c:	4313      	orrs	r3, r2
 800d12e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	689b      	ldr	r3, [r3, #8]
 800d136:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d140:	430a      	orrs	r2, r1
 800d142:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	4a90      	ldr	r2, [pc, #576]	; (800d38c <UART_SetConfig+0x2c8>)
 800d14a:	4293      	cmp	r3, r2
 800d14c:	d126      	bne.n	800d19c <UART_SetConfig+0xd8>
 800d14e:	4b90      	ldr	r3, [pc, #576]	; (800d390 <UART_SetConfig+0x2cc>)
 800d150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d154:	f003 0303 	and.w	r3, r3, #3
 800d158:	2b03      	cmp	r3, #3
 800d15a:	d81b      	bhi.n	800d194 <UART_SetConfig+0xd0>
 800d15c:	a201      	add	r2, pc, #4	; (adr r2, 800d164 <UART_SetConfig+0xa0>)
 800d15e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d162:	bf00      	nop
 800d164:	0800d175 	.word	0x0800d175
 800d168:	0800d185 	.word	0x0800d185
 800d16c:	0800d17d 	.word	0x0800d17d
 800d170:	0800d18d 	.word	0x0800d18d
 800d174:	2301      	movs	r3, #1
 800d176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d17a:	e116      	b.n	800d3aa <UART_SetConfig+0x2e6>
 800d17c:	2302      	movs	r3, #2
 800d17e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d182:	e112      	b.n	800d3aa <UART_SetConfig+0x2e6>
 800d184:	2304      	movs	r3, #4
 800d186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d18a:	e10e      	b.n	800d3aa <UART_SetConfig+0x2e6>
 800d18c:	2308      	movs	r3, #8
 800d18e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d192:	e10a      	b.n	800d3aa <UART_SetConfig+0x2e6>
 800d194:	2310      	movs	r3, #16
 800d196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d19a:	e106      	b.n	800d3aa <UART_SetConfig+0x2e6>
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	4a7c      	ldr	r2, [pc, #496]	; (800d394 <UART_SetConfig+0x2d0>)
 800d1a2:	4293      	cmp	r3, r2
 800d1a4:	d138      	bne.n	800d218 <UART_SetConfig+0x154>
 800d1a6:	4b7a      	ldr	r3, [pc, #488]	; (800d390 <UART_SetConfig+0x2cc>)
 800d1a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1ac:	f003 030c 	and.w	r3, r3, #12
 800d1b0:	2b0c      	cmp	r3, #12
 800d1b2:	d82d      	bhi.n	800d210 <UART_SetConfig+0x14c>
 800d1b4:	a201      	add	r2, pc, #4	; (adr r2, 800d1bc <UART_SetConfig+0xf8>)
 800d1b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1ba:	bf00      	nop
 800d1bc:	0800d1f1 	.word	0x0800d1f1
 800d1c0:	0800d211 	.word	0x0800d211
 800d1c4:	0800d211 	.word	0x0800d211
 800d1c8:	0800d211 	.word	0x0800d211
 800d1cc:	0800d201 	.word	0x0800d201
 800d1d0:	0800d211 	.word	0x0800d211
 800d1d4:	0800d211 	.word	0x0800d211
 800d1d8:	0800d211 	.word	0x0800d211
 800d1dc:	0800d1f9 	.word	0x0800d1f9
 800d1e0:	0800d211 	.word	0x0800d211
 800d1e4:	0800d211 	.word	0x0800d211
 800d1e8:	0800d211 	.word	0x0800d211
 800d1ec:	0800d209 	.word	0x0800d209
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d1f6:	e0d8      	b.n	800d3aa <UART_SetConfig+0x2e6>
 800d1f8:	2302      	movs	r3, #2
 800d1fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d1fe:	e0d4      	b.n	800d3aa <UART_SetConfig+0x2e6>
 800d200:	2304      	movs	r3, #4
 800d202:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d206:	e0d0      	b.n	800d3aa <UART_SetConfig+0x2e6>
 800d208:	2308      	movs	r3, #8
 800d20a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d20e:	e0cc      	b.n	800d3aa <UART_SetConfig+0x2e6>
 800d210:	2310      	movs	r3, #16
 800d212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d216:	e0c8      	b.n	800d3aa <UART_SetConfig+0x2e6>
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	4a5e      	ldr	r2, [pc, #376]	; (800d398 <UART_SetConfig+0x2d4>)
 800d21e:	4293      	cmp	r3, r2
 800d220:	d125      	bne.n	800d26e <UART_SetConfig+0x1aa>
 800d222:	4b5b      	ldr	r3, [pc, #364]	; (800d390 <UART_SetConfig+0x2cc>)
 800d224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d228:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d22c:	2b30      	cmp	r3, #48	; 0x30
 800d22e:	d016      	beq.n	800d25e <UART_SetConfig+0x19a>
 800d230:	2b30      	cmp	r3, #48	; 0x30
 800d232:	d818      	bhi.n	800d266 <UART_SetConfig+0x1a2>
 800d234:	2b20      	cmp	r3, #32
 800d236:	d00a      	beq.n	800d24e <UART_SetConfig+0x18a>
 800d238:	2b20      	cmp	r3, #32
 800d23a:	d814      	bhi.n	800d266 <UART_SetConfig+0x1a2>
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d002      	beq.n	800d246 <UART_SetConfig+0x182>
 800d240:	2b10      	cmp	r3, #16
 800d242:	d008      	beq.n	800d256 <UART_SetConfig+0x192>
 800d244:	e00f      	b.n	800d266 <UART_SetConfig+0x1a2>
 800d246:	2300      	movs	r3, #0
 800d248:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d24c:	e0ad      	b.n	800d3aa <UART_SetConfig+0x2e6>
 800d24e:	2302      	movs	r3, #2
 800d250:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d254:	e0a9      	b.n	800d3aa <UART_SetConfig+0x2e6>
 800d256:	2304      	movs	r3, #4
 800d258:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d25c:	e0a5      	b.n	800d3aa <UART_SetConfig+0x2e6>
 800d25e:	2308      	movs	r3, #8
 800d260:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d264:	e0a1      	b.n	800d3aa <UART_SetConfig+0x2e6>
 800d266:	2310      	movs	r3, #16
 800d268:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d26c:	e09d      	b.n	800d3aa <UART_SetConfig+0x2e6>
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	4a4a      	ldr	r2, [pc, #296]	; (800d39c <UART_SetConfig+0x2d8>)
 800d274:	4293      	cmp	r3, r2
 800d276:	d125      	bne.n	800d2c4 <UART_SetConfig+0x200>
 800d278:	4b45      	ldr	r3, [pc, #276]	; (800d390 <UART_SetConfig+0x2cc>)
 800d27a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d27e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d282:	2bc0      	cmp	r3, #192	; 0xc0
 800d284:	d016      	beq.n	800d2b4 <UART_SetConfig+0x1f0>
 800d286:	2bc0      	cmp	r3, #192	; 0xc0
 800d288:	d818      	bhi.n	800d2bc <UART_SetConfig+0x1f8>
 800d28a:	2b80      	cmp	r3, #128	; 0x80
 800d28c:	d00a      	beq.n	800d2a4 <UART_SetConfig+0x1e0>
 800d28e:	2b80      	cmp	r3, #128	; 0x80
 800d290:	d814      	bhi.n	800d2bc <UART_SetConfig+0x1f8>
 800d292:	2b00      	cmp	r3, #0
 800d294:	d002      	beq.n	800d29c <UART_SetConfig+0x1d8>
 800d296:	2b40      	cmp	r3, #64	; 0x40
 800d298:	d008      	beq.n	800d2ac <UART_SetConfig+0x1e8>
 800d29a:	e00f      	b.n	800d2bc <UART_SetConfig+0x1f8>
 800d29c:	2300      	movs	r3, #0
 800d29e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d2a2:	e082      	b.n	800d3aa <UART_SetConfig+0x2e6>
 800d2a4:	2302      	movs	r3, #2
 800d2a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d2aa:	e07e      	b.n	800d3aa <UART_SetConfig+0x2e6>
 800d2ac:	2304      	movs	r3, #4
 800d2ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d2b2:	e07a      	b.n	800d3aa <UART_SetConfig+0x2e6>
 800d2b4:	2308      	movs	r3, #8
 800d2b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d2ba:	e076      	b.n	800d3aa <UART_SetConfig+0x2e6>
 800d2bc:	2310      	movs	r3, #16
 800d2be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d2c2:	e072      	b.n	800d3aa <UART_SetConfig+0x2e6>
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	4a35      	ldr	r2, [pc, #212]	; (800d3a0 <UART_SetConfig+0x2dc>)
 800d2ca:	4293      	cmp	r3, r2
 800d2cc:	d12a      	bne.n	800d324 <UART_SetConfig+0x260>
 800d2ce:	4b30      	ldr	r3, [pc, #192]	; (800d390 <UART_SetConfig+0x2cc>)
 800d2d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d2d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d2d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d2dc:	d01a      	beq.n	800d314 <UART_SetConfig+0x250>
 800d2de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d2e2:	d81b      	bhi.n	800d31c <UART_SetConfig+0x258>
 800d2e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d2e8:	d00c      	beq.n	800d304 <UART_SetConfig+0x240>
 800d2ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d2ee:	d815      	bhi.n	800d31c <UART_SetConfig+0x258>
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d003      	beq.n	800d2fc <UART_SetConfig+0x238>
 800d2f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d2f8:	d008      	beq.n	800d30c <UART_SetConfig+0x248>
 800d2fa:	e00f      	b.n	800d31c <UART_SetConfig+0x258>
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d302:	e052      	b.n	800d3aa <UART_SetConfig+0x2e6>
 800d304:	2302      	movs	r3, #2
 800d306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d30a:	e04e      	b.n	800d3aa <UART_SetConfig+0x2e6>
 800d30c:	2304      	movs	r3, #4
 800d30e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d312:	e04a      	b.n	800d3aa <UART_SetConfig+0x2e6>
 800d314:	2308      	movs	r3, #8
 800d316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d31a:	e046      	b.n	800d3aa <UART_SetConfig+0x2e6>
 800d31c:	2310      	movs	r3, #16
 800d31e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d322:	e042      	b.n	800d3aa <UART_SetConfig+0x2e6>
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	4a17      	ldr	r2, [pc, #92]	; (800d388 <UART_SetConfig+0x2c4>)
 800d32a:	4293      	cmp	r3, r2
 800d32c:	d13a      	bne.n	800d3a4 <UART_SetConfig+0x2e0>
 800d32e:	4b18      	ldr	r3, [pc, #96]	; (800d390 <UART_SetConfig+0x2cc>)
 800d330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d334:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d338:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d33c:	d01a      	beq.n	800d374 <UART_SetConfig+0x2b0>
 800d33e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d342:	d81b      	bhi.n	800d37c <UART_SetConfig+0x2b8>
 800d344:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d348:	d00c      	beq.n	800d364 <UART_SetConfig+0x2a0>
 800d34a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d34e:	d815      	bhi.n	800d37c <UART_SetConfig+0x2b8>
 800d350:	2b00      	cmp	r3, #0
 800d352:	d003      	beq.n	800d35c <UART_SetConfig+0x298>
 800d354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d358:	d008      	beq.n	800d36c <UART_SetConfig+0x2a8>
 800d35a:	e00f      	b.n	800d37c <UART_SetConfig+0x2b8>
 800d35c:	2300      	movs	r3, #0
 800d35e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d362:	e022      	b.n	800d3aa <UART_SetConfig+0x2e6>
 800d364:	2302      	movs	r3, #2
 800d366:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d36a:	e01e      	b.n	800d3aa <UART_SetConfig+0x2e6>
 800d36c:	2304      	movs	r3, #4
 800d36e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d372:	e01a      	b.n	800d3aa <UART_SetConfig+0x2e6>
 800d374:	2308      	movs	r3, #8
 800d376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d37a:	e016      	b.n	800d3aa <UART_SetConfig+0x2e6>
 800d37c:	2310      	movs	r3, #16
 800d37e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d382:	e012      	b.n	800d3aa <UART_SetConfig+0x2e6>
 800d384:	efff69f3 	.word	0xefff69f3
 800d388:	40008000 	.word	0x40008000
 800d38c:	40013800 	.word	0x40013800
 800d390:	40021000 	.word	0x40021000
 800d394:	40004400 	.word	0x40004400
 800d398:	40004800 	.word	0x40004800
 800d39c:	40004c00 	.word	0x40004c00
 800d3a0:	40005000 	.word	0x40005000
 800d3a4:	2310      	movs	r3, #16
 800d3a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	4a9f      	ldr	r2, [pc, #636]	; (800d62c <UART_SetConfig+0x568>)
 800d3b0:	4293      	cmp	r3, r2
 800d3b2:	d17a      	bne.n	800d4aa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d3b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d3b8:	2b08      	cmp	r3, #8
 800d3ba:	d824      	bhi.n	800d406 <UART_SetConfig+0x342>
 800d3bc:	a201      	add	r2, pc, #4	; (adr r2, 800d3c4 <UART_SetConfig+0x300>)
 800d3be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3c2:	bf00      	nop
 800d3c4:	0800d3e9 	.word	0x0800d3e9
 800d3c8:	0800d407 	.word	0x0800d407
 800d3cc:	0800d3f1 	.word	0x0800d3f1
 800d3d0:	0800d407 	.word	0x0800d407
 800d3d4:	0800d3f7 	.word	0x0800d3f7
 800d3d8:	0800d407 	.word	0x0800d407
 800d3dc:	0800d407 	.word	0x0800d407
 800d3e0:	0800d407 	.word	0x0800d407
 800d3e4:	0800d3ff 	.word	0x0800d3ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d3e8:	f7fc f8f2 	bl	80095d0 <HAL_RCC_GetPCLK1Freq>
 800d3ec:	61f8      	str	r0, [r7, #28]
        break;
 800d3ee:	e010      	b.n	800d412 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d3f0:	4b8f      	ldr	r3, [pc, #572]	; (800d630 <UART_SetConfig+0x56c>)
 800d3f2:	61fb      	str	r3, [r7, #28]
        break;
 800d3f4:	e00d      	b.n	800d412 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d3f6:	f7fc f853 	bl	80094a0 <HAL_RCC_GetSysClockFreq>
 800d3fa:	61f8      	str	r0, [r7, #28]
        break;
 800d3fc:	e009      	b.n	800d412 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d3fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d402:	61fb      	str	r3, [r7, #28]
        break;
 800d404:	e005      	b.n	800d412 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800d406:	2300      	movs	r3, #0
 800d408:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d40a:	2301      	movs	r3, #1
 800d40c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800d410:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d412:	69fb      	ldr	r3, [r7, #28]
 800d414:	2b00      	cmp	r3, #0
 800d416:	f000 80fb 	beq.w	800d610 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	685a      	ldr	r2, [r3, #4]
 800d41e:	4613      	mov	r3, r2
 800d420:	005b      	lsls	r3, r3, #1
 800d422:	4413      	add	r3, r2
 800d424:	69fa      	ldr	r2, [r7, #28]
 800d426:	429a      	cmp	r2, r3
 800d428:	d305      	bcc.n	800d436 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	685b      	ldr	r3, [r3, #4]
 800d42e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800d430:	69fa      	ldr	r2, [r7, #28]
 800d432:	429a      	cmp	r2, r3
 800d434:	d903      	bls.n	800d43e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800d436:	2301      	movs	r3, #1
 800d438:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800d43c:	e0e8      	b.n	800d610 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800d43e:	69fb      	ldr	r3, [r7, #28]
 800d440:	2200      	movs	r2, #0
 800d442:	461c      	mov	r4, r3
 800d444:	4615      	mov	r5, r2
 800d446:	f04f 0200 	mov.w	r2, #0
 800d44a:	f04f 0300 	mov.w	r3, #0
 800d44e:	022b      	lsls	r3, r5, #8
 800d450:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800d454:	0222      	lsls	r2, r4, #8
 800d456:	68f9      	ldr	r1, [r7, #12]
 800d458:	6849      	ldr	r1, [r1, #4]
 800d45a:	0849      	lsrs	r1, r1, #1
 800d45c:	2000      	movs	r0, #0
 800d45e:	4688      	mov	r8, r1
 800d460:	4681      	mov	r9, r0
 800d462:	eb12 0a08 	adds.w	sl, r2, r8
 800d466:	eb43 0b09 	adc.w	fp, r3, r9
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	685b      	ldr	r3, [r3, #4]
 800d46e:	2200      	movs	r2, #0
 800d470:	603b      	str	r3, [r7, #0]
 800d472:	607a      	str	r2, [r7, #4]
 800d474:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d478:	4650      	mov	r0, sl
 800d47a:	4659      	mov	r1, fp
 800d47c:	f7f3 fc54 	bl	8000d28 <__aeabi_uldivmod>
 800d480:	4602      	mov	r2, r0
 800d482:	460b      	mov	r3, r1
 800d484:	4613      	mov	r3, r2
 800d486:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d488:	69bb      	ldr	r3, [r7, #24]
 800d48a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d48e:	d308      	bcc.n	800d4a2 <UART_SetConfig+0x3de>
 800d490:	69bb      	ldr	r3, [r7, #24]
 800d492:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d496:	d204      	bcs.n	800d4a2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	69ba      	ldr	r2, [r7, #24]
 800d49e:	60da      	str	r2, [r3, #12]
 800d4a0:	e0b6      	b.n	800d610 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800d4a8:	e0b2      	b.n	800d610 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	69db      	ldr	r3, [r3, #28]
 800d4ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d4b2:	d15e      	bne.n	800d572 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800d4b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d4b8:	2b08      	cmp	r3, #8
 800d4ba:	d828      	bhi.n	800d50e <UART_SetConfig+0x44a>
 800d4bc:	a201      	add	r2, pc, #4	; (adr r2, 800d4c4 <UART_SetConfig+0x400>)
 800d4be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4c2:	bf00      	nop
 800d4c4:	0800d4e9 	.word	0x0800d4e9
 800d4c8:	0800d4f1 	.word	0x0800d4f1
 800d4cc:	0800d4f9 	.word	0x0800d4f9
 800d4d0:	0800d50f 	.word	0x0800d50f
 800d4d4:	0800d4ff 	.word	0x0800d4ff
 800d4d8:	0800d50f 	.word	0x0800d50f
 800d4dc:	0800d50f 	.word	0x0800d50f
 800d4e0:	0800d50f 	.word	0x0800d50f
 800d4e4:	0800d507 	.word	0x0800d507
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d4e8:	f7fc f872 	bl	80095d0 <HAL_RCC_GetPCLK1Freq>
 800d4ec:	61f8      	str	r0, [r7, #28]
        break;
 800d4ee:	e014      	b.n	800d51a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d4f0:	f7fc f884 	bl	80095fc <HAL_RCC_GetPCLK2Freq>
 800d4f4:	61f8      	str	r0, [r7, #28]
        break;
 800d4f6:	e010      	b.n	800d51a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d4f8:	4b4d      	ldr	r3, [pc, #308]	; (800d630 <UART_SetConfig+0x56c>)
 800d4fa:	61fb      	str	r3, [r7, #28]
        break;
 800d4fc:	e00d      	b.n	800d51a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d4fe:	f7fb ffcf 	bl	80094a0 <HAL_RCC_GetSysClockFreq>
 800d502:	61f8      	str	r0, [r7, #28]
        break;
 800d504:	e009      	b.n	800d51a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d50a:	61fb      	str	r3, [r7, #28]
        break;
 800d50c:	e005      	b.n	800d51a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800d50e:	2300      	movs	r3, #0
 800d510:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d512:	2301      	movs	r3, #1
 800d514:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800d518:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d51a:	69fb      	ldr	r3, [r7, #28]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d077      	beq.n	800d610 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d520:	69fb      	ldr	r3, [r7, #28]
 800d522:	005a      	lsls	r2, r3, #1
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	685b      	ldr	r3, [r3, #4]
 800d528:	085b      	lsrs	r3, r3, #1
 800d52a:	441a      	add	r2, r3
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	685b      	ldr	r3, [r3, #4]
 800d530:	fbb2 f3f3 	udiv	r3, r2, r3
 800d534:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d536:	69bb      	ldr	r3, [r7, #24]
 800d538:	2b0f      	cmp	r3, #15
 800d53a:	d916      	bls.n	800d56a <UART_SetConfig+0x4a6>
 800d53c:	69bb      	ldr	r3, [r7, #24]
 800d53e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d542:	d212      	bcs.n	800d56a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d544:	69bb      	ldr	r3, [r7, #24]
 800d546:	b29b      	uxth	r3, r3
 800d548:	f023 030f 	bic.w	r3, r3, #15
 800d54c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d54e:	69bb      	ldr	r3, [r7, #24]
 800d550:	085b      	lsrs	r3, r3, #1
 800d552:	b29b      	uxth	r3, r3
 800d554:	f003 0307 	and.w	r3, r3, #7
 800d558:	b29a      	uxth	r2, r3
 800d55a:	8afb      	ldrh	r3, [r7, #22]
 800d55c:	4313      	orrs	r3, r2
 800d55e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	8afa      	ldrh	r2, [r7, #22]
 800d566:	60da      	str	r2, [r3, #12]
 800d568:	e052      	b.n	800d610 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800d56a:	2301      	movs	r3, #1
 800d56c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800d570:	e04e      	b.n	800d610 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d572:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d576:	2b08      	cmp	r3, #8
 800d578:	d827      	bhi.n	800d5ca <UART_SetConfig+0x506>
 800d57a:	a201      	add	r2, pc, #4	; (adr r2, 800d580 <UART_SetConfig+0x4bc>)
 800d57c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d580:	0800d5a5 	.word	0x0800d5a5
 800d584:	0800d5ad 	.word	0x0800d5ad
 800d588:	0800d5b5 	.word	0x0800d5b5
 800d58c:	0800d5cb 	.word	0x0800d5cb
 800d590:	0800d5bb 	.word	0x0800d5bb
 800d594:	0800d5cb 	.word	0x0800d5cb
 800d598:	0800d5cb 	.word	0x0800d5cb
 800d59c:	0800d5cb 	.word	0x0800d5cb
 800d5a0:	0800d5c3 	.word	0x0800d5c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d5a4:	f7fc f814 	bl	80095d0 <HAL_RCC_GetPCLK1Freq>
 800d5a8:	61f8      	str	r0, [r7, #28]
        break;
 800d5aa:	e014      	b.n	800d5d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d5ac:	f7fc f826 	bl	80095fc <HAL_RCC_GetPCLK2Freq>
 800d5b0:	61f8      	str	r0, [r7, #28]
        break;
 800d5b2:	e010      	b.n	800d5d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d5b4:	4b1e      	ldr	r3, [pc, #120]	; (800d630 <UART_SetConfig+0x56c>)
 800d5b6:	61fb      	str	r3, [r7, #28]
        break;
 800d5b8:	e00d      	b.n	800d5d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d5ba:	f7fb ff71 	bl	80094a0 <HAL_RCC_GetSysClockFreq>
 800d5be:	61f8      	str	r0, [r7, #28]
        break;
 800d5c0:	e009      	b.n	800d5d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d5c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d5c6:	61fb      	str	r3, [r7, #28]
        break;
 800d5c8:	e005      	b.n	800d5d6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d5ce:	2301      	movs	r3, #1
 800d5d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800d5d4:	bf00      	nop
    }

    if (pclk != 0U)
 800d5d6:	69fb      	ldr	r3, [r7, #28]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d019      	beq.n	800d610 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	685b      	ldr	r3, [r3, #4]
 800d5e0:	085a      	lsrs	r2, r3, #1
 800d5e2:	69fb      	ldr	r3, [r7, #28]
 800d5e4:	441a      	add	r2, r3
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	685b      	ldr	r3, [r3, #4]
 800d5ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5ee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d5f0:	69bb      	ldr	r3, [r7, #24]
 800d5f2:	2b0f      	cmp	r3, #15
 800d5f4:	d909      	bls.n	800d60a <UART_SetConfig+0x546>
 800d5f6:	69bb      	ldr	r3, [r7, #24]
 800d5f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d5fc:	d205      	bcs.n	800d60a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d5fe:	69bb      	ldr	r3, [r7, #24]
 800d600:	b29a      	uxth	r2, r3
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	60da      	str	r2, [r3, #12]
 800d608:	e002      	b.n	800d610 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800d60a:	2301      	movs	r3, #1
 800d60c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	2200      	movs	r2, #0
 800d614:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	2200      	movs	r2, #0
 800d61a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800d61c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800d620:	4618      	mov	r0, r3
 800d622:	3728      	adds	r7, #40	; 0x28
 800d624:	46bd      	mov	sp, r7
 800d626:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d62a:	bf00      	nop
 800d62c:	40008000 	.word	0x40008000
 800d630:	00f42400 	.word	0x00f42400

0800d634 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d634:	b480      	push	{r7}
 800d636:	b083      	sub	sp, #12
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d640:	f003 0301 	and.w	r3, r3, #1
 800d644:	2b00      	cmp	r3, #0
 800d646:	d00a      	beq.n	800d65e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	685b      	ldr	r3, [r3, #4]
 800d64e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	430a      	orrs	r2, r1
 800d65c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d662:	f003 0302 	and.w	r3, r3, #2
 800d666:	2b00      	cmp	r3, #0
 800d668:	d00a      	beq.n	800d680 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	685b      	ldr	r3, [r3, #4]
 800d670:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	430a      	orrs	r2, r1
 800d67e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d684:	f003 0304 	and.w	r3, r3, #4
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d00a      	beq.n	800d6a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	685b      	ldr	r3, [r3, #4]
 800d692:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	430a      	orrs	r2, r1
 800d6a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6a6:	f003 0308 	and.w	r3, r3, #8
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d00a      	beq.n	800d6c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	685b      	ldr	r3, [r3, #4]
 800d6b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	430a      	orrs	r2, r1
 800d6c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6c8:	f003 0310 	and.w	r3, r3, #16
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d00a      	beq.n	800d6e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	689b      	ldr	r3, [r3, #8]
 800d6d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	430a      	orrs	r2, r1
 800d6e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6ea:	f003 0320 	and.w	r3, r3, #32
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d00a      	beq.n	800d708 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	689b      	ldr	r3, [r3, #8]
 800d6f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	430a      	orrs	r2, r1
 800d706:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d70c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d710:	2b00      	cmp	r3, #0
 800d712:	d01a      	beq.n	800d74a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	685b      	ldr	r3, [r3, #4]
 800d71a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	430a      	orrs	r2, r1
 800d728:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d72e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d732:	d10a      	bne.n	800d74a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	685b      	ldr	r3, [r3, #4]
 800d73a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	430a      	orrs	r2, r1
 800d748:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d74e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d752:	2b00      	cmp	r3, #0
 800d754:	d00a      	beq.n	800d76c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	685b      	ldr	r3, [r3, #4]
 800d75c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	430a      	orrs	r2, r1
 800d76a:	605a      	str	r2, [r3, #4]
  }
}
 800d76c:	bf00      	nop
 800d76e:	370c      	adds	r7, #12
 800d770:	46bd      	mov	sp, r7
 800d772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d776:	4770      	bx	lr

0800d778 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b086      	sub	sp, #24
 800d77c:	af02      	add	r7, sp, #8
 800d77e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2200      	movs	r2, #0
 800d784:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d788:	f7f8 fecc 	bl	8006524 <HAL_GetTick>
 800d78c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	f003 0308 	and.w	r3, r3, #8
 800d798:	2b08      	cmp	r3, #8
 800d79a:	d10e      	bne.n	800d7ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d79c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d7a0:	9300      	str	r3, [sp, #0]
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	f000 f82d 	bl	800d80a <UART_WaitOnFlagUntilTimeout>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d001      	beq.n	800d7ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d7b6:	2303      	movs	r3, #3
 800d7b8:	e023      	b.n	800d802 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	f003 0304 	and.w	r3, r3, #4
 800d7c4:	2b04      	cmp	r3, #4
 800d7c6:	d10e      	bne.n	800d7e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d7c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d7cc:	9300      	str	r3, [sp, #0]
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d7d6:	6878      	ldr	r0, [r7, #4]
 800d7d8:	f000 f817 	bl	800d80a <UART_WaitOnFlagUntilTimeout>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d001      	beq.n	800d7e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d7e2:	2303      	movs	r3, #3
 800d7e4:	e00d      	b.n	800d802 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2220      	movs	r2, #32
 800d7ea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2220      	movs	r2, #32
 800d7f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800d800:	2300      	movs	r3, #0
}
 800d802:	4618      	mov	r0, r3
 800d804:	3710      	adds	r7, #16
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}

0800d80a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d80a:	b580      	push	{r7, lr}
 800d80c:	b09c      	sub	sp, #112	; 0x70
 800d80e:	af00      	add	r7, sp, #0
 800d810:	60f8      	str	r0, [r7, #12]
 800d812:	60b9      	str	r1, [r7, #8]
 800d814:	603b      	str	r3, [r7, #0]
 800d816:	4613      	mov	r3, r2
 800d818:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d81a:	e0a5      	b.n	800d968 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d81c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d81e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d822:	f000 80a1 	beq.w	800d968 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d826:	f7f8 fe7d 	bl	8006524 <HAL_GetTick>
 800d82a:	4602      	mov	r2, r0
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	1ad3      	subs	r3, r2, r3
 800d830:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d832:	429a      	cmp	r2, r3
 800d834:	d302      	bcc.n	800d83c <UART_WaitOnFlagUntilTimeout+0x32>
 800d836:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d13e      	bne.n	800d8ba <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d842:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d844:	e853 3f00 	ldrex	r3, [r3]
 800d848:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d84a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d84c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d850:	667b      	str	r3, [r7, #100]	; 0x64
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	461a      	mov	r2, r3
 800d858:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d85a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d85c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d85e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d860:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d862:	e841 2300 	strex	r3, r2, [r1]
 800d866:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d868:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d1e6      	bne.n	800d83c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	3308      	adds	r3, #8
 800d874:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d878:	e853 3f00 	ldrex	r3, [r3]
 800d87c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d880:	f023 0301 	bic.w	r3, r3, #1
 800d884:	663b      	str	r3, [r7, #96]	; 0x60
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	3308      	adds	r3, #8
 800d88c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d88e:	64ba      	str	r2, [r7, #72]	; 0x48
 800d890:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d892:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d894:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d896:	e841 2300 	strex	r3, r2, [r1]
 800d89a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d89c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d1e5      	bne.n	800d86e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	2220      	movs	r2, #32
 800d8a6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	2220      	movs	r2, #32
 800d8ac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800d8b6:	2303      	movs	r3, #3
 800d8b8:	e067      	b.n	800d98a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	f003 0304 	and.w	r3, r3, #4
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d04f      	beq.n	800d968 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	69db      	ldr	r3, [r3, #28]
 800d8ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d8d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d8d6:	d147      	bne.n	800d968 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d8e0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ea:	e853 3f00 	ldrex	r3, [r3]
 800d8ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d8f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	461a      	mov	r2, r3
 800d8fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d900:	637b      	str	r3, [r7, #52]	; 0x34
 800d902:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d904:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d906:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d908:	e841 2300 	strex	r3, r2, [r1]
 800d90c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d910:	2b00      	cmp	r3, #0
 800d912:	d1e6      	bne.n	800d8e2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	3308      	adds	r3, #8
 800d91a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d91c:	697b      	ldr	r3, [r7, #20]
 800d91e:	e853 3f00 	ldrex	r3, [r3]
 800d922:	613b      	str	r3, [r7, #16]
   return(result);
 800d924:	693b      	ldr	r3, [r7, #16]
 800d926:	f023 0301 	bic.w	r3, r3, #1
 800d92a:	66bb      	str	r3, [r7, #104]	; 0x68
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	3308      	adds	r3, #8
 800d932:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d934:	623a      	str	r2, [r7, #32]
 800d936:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d938:	69f9      	ldr	r1, [r7, #28]
 800d93a:	6a3a      	ldr	r2, [r7, #32]
 800d93c:	e841 2300 	strex	r3, r2, [r1]
 800d940:	61bb      	str	r3, [r7, #24]
   return(result);
 800d942:	69bb      	ldr	r3, [r7, #24]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d1e5      	bne.n	800d914 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	2220      	movs	r2, #32
 800d94c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	2220      	movs	r2, #32
 800d952:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	2220      	movs	r2, #32
 800d958:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	2200      	movs	r2, #0
 800d960:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800d964:	2303      	movs	r3, #3
 800d966:	e010      	b.n	800d98a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	69da      	ldr	r2, [r3, #28]
 800d96e:	68bb      	ldr	r3, [r7, #8]
 800d970:	4013      	ands	r3, r2
 800d972:	68ba      	ldr	r2, [r7, #8]
 800d974:	429a      	cmp	r2, r3
 800d976:	bf0c      	ite	eq
 800d978:	2301      	moveq	r3, #1
 800d97a:	2300      	movne	r3, #0
 800d97c:	b2db      	uxtb	r3, r3
 800d97e:	461a      	mov	r2, r3
 800d980:	79fb      	ldrb	r3, [r7, #7]
 800d982:	429a      	cmp	r2, r3
 800d984:	f43f af4a 	beq.w	800d81c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d988:	2300      	movs	r3, #0
}
 800d98a:	4618      	mov	r0, r3
 800d98c:	3770      	adds	r7, #112	; 0x70
 800d98e:	46bd      	mov	sp, r7
 800d990:	bd80      	pop	{r7, pc}
	...

0800d994 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d994:	b480      	push	{r7}
 800d996:	b097      	sub	sp, #92	; 0x5c
 800d998:	af00      	add	r7, sp, #0
 800d99a:	60f8      	str	r0, [r7, #12]
 800d99c:	60b9      	str	r1, [r7, #8]
 800d99e:	4613      	mov	r3, r2
 800d9a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	68ba      	ldr	r2, [r7, #8]
 800d9a6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	88fa      	ldrh	r2, [r7, #6]
 800d9ac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	88fa      	ldrh	r2, [r7, #6]
 800d9b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	689b      	ldr	r3, [r3, #8]
 800d9c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d9c6:	d10e      	bne.n	800d9e6 <UART_Start_Receive_IT+0x52>
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	691b      	ldr	r3, [r3, #16]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d105      	bne.n	800d9dc <UART_Start_Receive_IT+0x48>
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d9d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d9da:	e02d      	b.n	800da38 <UART_Start_Receive_IT+0xa4>
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	22ff      	movs	r2, #255	; 0xff
 800d9e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d9e4:	e028      	b.n	800da38 <UART_Start_Receive_IT+0xa4>
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	689b      	ldr	r3, [r3, #8]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d10d      	bne.n	800da0a <UART_Start_Receive_IT+0x76>
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	691b      	ldr	r3, [r3, #16]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d104      	bne.n	800da00 <UART_Start_Receive_IT+0x6c>
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	22ff      	movs	r2, #255	; 0xff
 800d9fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d9fe:	e01b      	b.n	800da38 <UART_Start_Receive_IT+0xa4>
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	227f      	movs	r2, #127	; 0x7f
 800da04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800da08:	e016      	b.n	800da38 <UART_Start_Receive_IT+0xa4>
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	689b      	ldr	r3, [r3, #8]
 800da0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800da12:	d10d      	bne.n	800da30 <UART_Start_Receive_IT+0x9c>
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	691b      	ldr	r3, [r3, #16]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d104      	bne.n	800da26 <UART_Start_Receive_IT+0x92>
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	227f      	movs	r2, #127	; 0x7f
 800da20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800da24:	e008      	b.n	800da38 <UART_Start_Receive_IT+0xa4>
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	223f      	movs	r2, #63	; 0x3f
 800da2a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800da2e:	e003      	b.n	800da38 <UART_Start_Receive_IT+0xa4>
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	2200      	movs	r2, #0
 800da34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	2200      	movs	r2, #0
 800da3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	2222      	movs	r2, #34	; 0x22
 800da44:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	3308      	adds	r3, #8
 800da4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da50:	e853 3f00 	ldrex	r3, [r3]
 800da54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800da56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da58:	f043 0301 	orr.w	r3, r3, #1
 800da5c:	657b      	str	r3, [r7, #84]	; 0x54
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	3308      	adds	r3, #8
 800da64:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800da66:	64ba      	str	r2, [r7, #72]	; 0x48
 800da68:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800da6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800da6e:	e841 2300 	strex	r3, r2, [r1]
 800da72:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800da74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da76:	2b00      	cmp	r3, #0
 800da78:	d1e5      	bne.n	800da46 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	689b      	ldr	r3, [r3, #8]
 800da7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800da82:	d107      	bne.n	800da94 <UART_Start_Receive_IT+0x100>
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	691b      	ldr	r3, [r3, #16]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d103      	bne.n	800da94 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	4a24      	ldr	r2, [pc, #144]	; (800db20 <UART_Start_Receive_IT+0x18c>)
 800da90:	665a      	str	r2, [r3, #100]	; 0x64
 800da92:	e002      	b.n	800da9a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	4a23      	ldr	r2, [pc, #140]	; (800db24 <UART_Start_Receive_IT+0x190>)
 800da98:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	2200      	movs	r2, #0
 800da9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	691b      	ldr	r3, [r3, #16]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d019      	beq.n	800dade <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dab2:	e853 3f00 	ldrex	r3, [r3]
 800dab6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daba:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800dabe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	461a      	mov	r2, r3
 800dac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dac8:	637b      	str	r3, [r7, #52]	; 0x34
 800daca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dacc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dace:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dad0:	e841 2300 	strex	r3, r2, [r1]
 800dad4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800dad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d1e6      	bne.n	800daaa <UART_Start_Receive_IT+0x116>
 800dadc:	e018      	b.n	800db10 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dae4:	697b      	ldr	r3, [r7, #20]
 800dae6:	e853 3f00 	ldrex	r3, [r3]
 800daea:	613b      	str	r3, [r7, #16]
   return(result);
 800daec:	693b      	ldr	r3, [r7, #16]
 800daee:	f043 0320 	orr.w	r3, r3, #32
 800daf2:	653b      	str	r3, [r7, #80]	; 0x50
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	461a      	mov	r2, r3
 800dafa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dafc:	623b      	str	r3, [r7, #32]
 800dafe:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db00:	69f9      	ldr	r1, [r7, #28]
 800db02:	6a3a      	ldr	r2, [r7, #32]
 800db04:	e841 2300 	strex	r3, r2, [r1]
 800db08:	61bb      	str	r3, [r7, #24]
   return(result);
 800db0a:	69bb      	ldr	r3, [r7, #24]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d1e6      	bne.n	800dade <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800db10:	2300      	movs	r3, #0
}
 800db12:	4618      	mov	r0, r3
 800db14:	375c      	adds	r7, #92	; 0x5c
 800db16:	46bd      	mov	sp, r7
 800db18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1c:	4770      	bx	lr
 800db1e:	bf00      	nop
 800db20:	0800df4d 	.word	0x0800df4d
 800db24:	0800dded 	.word	0x0800dded

0800db28 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800db28:	b480      	push	{r7}
 800db2a:	b089      	sub	sp, #36	; 0x24
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	e853 3f00 	ldrex	r3, [r3]
 800db3c:	60bb      	str	r3, [r7, #8]
   return(result);
 800db3e:	68bb      	ldr	r3, [r7, #8]
 800db40:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800db44:	61fb      	str	r3, [r7, #28]
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	461a      	mov	r2, r3
 800db4c:	69fb      	ldr	r3, [r7, #28]
 800db4e:	61bb      	str	r3, [r7, #24]
 800db50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db52:	6979      	ldr	r1, [r7, #20]
 800db54:	69ba      	ldr	r2, [r7, #24]
 800db56:	e841 2300 	strex	r3, r2, [r1]
 800db5a:	613b      	str	r3, [r7, #16]
   return(result);
 800db5c:	693b      	ldr	r3, [r7, #16]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d1e6      	bne.n	800db30 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	2220      	movs	r2, #32
 800db66:	679a      	str	r2, [r3, #120]	; 0x78
}
 800db68:	bf00      	nop
 800db6a:	3724      	adds	r7, #36	; 0x24
 800db6c:	46bd      	mov	sp, r7
 800db6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db72:	4770      	bx	lr

0800db74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800db74:	b480      	push	{r7}
 800db76:	b095      	sub	sp, #84	; 0x54
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db84:	e853 3f00 	ldrex	r3, [r3]
 800db88:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800db8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800db90:	64fb      	str	r3, [r7, #76]	; 0x4c
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	461a      	mov	r2, r3
 800db98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db9a:	643b      	str	r3, [r7, #64]	; 0x40
 800db9c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dba0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dba2:	e841 2300 	strex	r3, r2, [r1]
 800dba6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d1e6      	bne.n	800db7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	3308      	adds	r3, #8
 800dbb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbb6:	6a3b      	ldr	r3, [r7, #32]
 800dbb8:	e853 3f00 	ldrex	r3, [r3]
 800dbbc:	61fb      	str	r3, [r7, #28]
   return(result);
 800dbbe:	69fb      	ldr	r3, [r7, #28]
 800dbc0:	f023 0301 	bic.w	r3, r3, #1
 800dbc4:	64bb      	str	r3, [r7, #72]	; 0x48
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	3308      	adds	r3, #8
 800dbcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dbce:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dbd0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dbd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dbd6:	e841 2300 	strex	r3, r2, [r1]
 800dbda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dbdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d1e5      	bne.n	800dbae <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dbe6:	2b01      	cmp	r3, #1
 800dbe8:	d118      	bne.n	800dc1c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	e853 3f00 	ldrex	r3, [r3]
 800dbf6:	60bb      	str	r3, [r7, #8]
   return(result);
 800dbf8:	68bb      	ldr	r3, [r7, #8]
 800dbfa:	f023 0310 	bic.w	r3, r3, #16
 800dbfe:	647b      	str	r3, [r7, #68]	; 0x44
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	461a      	mov	r2, r3
 800dc06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc08:	61bb      	str	r3, [r7, #24]
 800dc0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc0c:	6979      	ldr	r1, [r7, #20]
 800dc0e:	69ba      	ldr	r2, [r7, #24]
 800dc10:	e841 2300 	strex	r3, r2, [r1]
 800dc14:	613b      	str	r3, [r7, #16]
   return(result);
 800dc16:	693b      	ldr	r3, [r7, #16]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d1e6      	bne.n	800dbea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	2220      	movs	r2, #32
 800dc20:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	2200      	movs	r2, #0
 800dc26:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800dc2e:	bf00      	nop
 800dc30:	3754      	adds	r7, #84	; 0x54
 800dc32:	46bd      	mov	sp, r7
 800dc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc38:	4770      	bx	lr

0800dc3a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800dc3a:	b580      	push	{r7, lr}
 800dc3c:	b090      	sub	sp, #64	; 0x40
 800dc3e:	af00      	add	r7, sp, #0
 800dc40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc46:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	f003 0320 	and.w	r3, r3, #32
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d137      	bne.n	800dcc6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800dc56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc58:	2200      	movs	r2, #0
 800dc5a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800dc5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	3308      	adds	r3, #8
 800dc64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc68:	e853 3f00 	ldrex	r3, [r3]
 800dc6c:	623b      	str	r3, [r7, #32]
   return(result);
 800dc6e:	6a3b      	ldr	r3, [r7, #32]
 800dc70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dc74:	63bb      	str	r3, [r7, #56]	; 0x38
 800dc76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	3308      	adds	r3, #8
 800dc7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dc7e:	633a      	str	r2, [r7, #48]	; 0x30
 800dc80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dc84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc86:	e841 2300 	strex	r3, r2, [r1]
 800dc8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dc8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d1e5      	bne.n	800dc5e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dc92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc98:	693b      	ldr	r3, [r7, #16]
 800dc9a:	e853 3f00 	ldrex	r3, [r3]
 800dc9e:	60fb      	str	r3, [r7, #12]
   return(result);
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dca6:	637b      	str	r3, [r7, #52]	; 0x34
 800dca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	461a      	mov	r2, r3
 800dcae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcb0:	61fb      	str	r3, [r7, #28]
 800dcb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcb4:	69b9      	ldr	r1, [r7, #24]
 800dcb6:	69fa      	ldr	r2, [r7, #28]
 800dcb8:	e841 2300 	strex	r3, r2, [r1]
 800dcbc:	617b      	str	r3, [r7, #20]
   return(result);
 800dcbe:	697b      	ldr	r3, [r7, #20]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d1e6      	bne.n	800dc92 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dcc4:	e002      	b.n	800dccc <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800dcc6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dcc8:	f7f6 fa0e 	bl	80040e8 <HAL_UART_TxCpltCallback>
}
 800dccc:	bf00      	nop
 800dcce:	3740      	adds	r7, #64	; 0x40
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	bd80      	pop	{r7, pc}

0800dcd4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b084      	sub	sp, #16
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dce0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800dce2:	68f8      	ldr	r0, [r7, #12]
 800dce4:	f7ff f9d8 	bl	800d098 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dce8:	bf00      	nop
 800dcea:	3710      	adds	r7, #16
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}

0800dcf0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b086      	sub	sp, #24
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcfc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800dcfe:	697b      	ldr	r3, [r7, #20]
 800dd00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd02:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800dd04:	697b      	ldr	r3, [r7, #20]
 800dd06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd08:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800dd0a:	697b      	ldr	r3, [r7, #20]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	689b      	ldr	r3, [r3, #8]
 800dd10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd14:	2b80      	cmp	r3, #128	; 0x80
 800dd16:	d109      	bne.n	800dd2c <UART_DMAError+0x3c>
 800dd18:	693b      	ldr	r3, [r7, #16]
 800dd1a:	2b21      	cmp	r3, #33	; 0x21
 800dd1c:	d106      	bne.n	800dd2c <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	2200      	movs	r2, #0
 800dd22:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800dd26:	6978      	ldr	r0, [r7, #20]
 800dd28:	f7ff fefe 	bl	800db28 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800dd2c:	697b      	ldr	r3, [r7, #20]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	689b      	ldr	r3, [r3, #8]
 800dd32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd36:	2b40      	cmp	r3, #64	; 0x40
 800dd38:	d109      	bne.n	800dd4e <UART_DMAError+0x5e>
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	2b22      	cmp	r3, #34	; 0x22
 800dd3e:	d106      	bne.n	800dd4e <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800dd40:	697b      	ldr	r3, [r7, #20]
 800dd42:	2200      	movs	r2, #0
 800dd44:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800dd48:	6978      	ldr	r0, [r7, #20]
 800dd4a:	f7ff ff13 	bl	800db74 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800dd4e:	697b      	ldr	r3, [r7, #20]
 800dd50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd54:	f043 0210 	orr.w	r2, r3, #16
 800dd58:	697b      	ldr	r3, [r7, #20]
 800dd5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dd5e:	6978      	ldr	r0, [r7, #20]
 800dd60:	f7f6 fc44 	bl	80045ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dd64:	bf00      	nop
 800dd66:	3718      	adds	r7, #24
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	bd80      	pop	{r7, pc}

0800dd6c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b084      	sub	sp, #16
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	2200      	movs	r2, #0
 800dd86:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dd8a:	68f8      	ldr	r0, [r7, #12]
 800dd8c:	f7f6 fc2e 	bl	80045ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dd90:	bf00      	nop
 800dd92:	3710      	adds	r7, #16
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}

0800dd98 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b088      	sub	sp, #32
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	e853 3f00 	ldrex	r3, [r3]
 800ddac:	60bb      	str	r3, [r7, #8]
   return(result);
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ddb4:	61fb      	str	r3, [r7, #28]
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	461a      	mov	r2, r3
 800ddbc:	69fb      	ldr	r3, [r7, #28]
 800ddbe:	61bb      	str	r3, [r7, #24]
 800ddc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddc2:	6979      	ldr	r1, [r7, #20]
 800ddc4:	69ba      	ldr	r2, [r7, #24]
 800ddc6:	e841 2300 	strex	r3, r2, [r1]
 800ddca:	613b      	str	r3, [r7, #16]
   return(result);
 800ddcc:	693b      	ldr	r3, [r7, #16]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d1e6      	bne.n	800dda0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2220      	movs	r2, #32
 800ddd6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2200      	movs	r2, #0
 800dddc:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ddde:	6878      	ldr	r0, [r7, #4]
 800dde0:	f7f6 f982 	bl	80040e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dde4:	bf00      	nop
 800dde6:	3720      	adds	r7, #32
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd80      	pop	{r7, pc}

0800ddec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b096      	sub	sp, #88	; 0x58
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ddfa:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de02:	2b22      	cmp	r3, #34	; 0x22
 800de04:	f040 8094 	bne.w	800df30 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800de0e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800de12:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800de16:	b2d9      	uxtb	r1, r3
 800de18:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800de1c:	b2da      	uxtb	r2, r3
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de22:	400a      	ands	r2, r1
 800de24:	b2d2      	uxtb	r2, r2
 800de26:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de2c:	1c5a      	adds	r2, r3, #1
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800de38:	b29b      	uxth	r3, r3
 800de3a:	3b01      	subs	r3, #1
 800de3c:	b29a      	uxth	r2, r3
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800de4a:	b29b      	uxth	r3, r3
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d179      	bne.n	800df44 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de58:	e853 3f00 	ldrex	r3, [r3]
 800de5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800de5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800de64:	653b      	str	r3, [r7, #80]	; 0x50
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	461a      	mov	r2, r3
 800de6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de6e:	647b      	str	r3, [r7, #68]	; 0x44
 800de70:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800de74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800de76:	e841 2300 	strex	r3, r2, [r1]
 800de7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800de7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d1e6      	bne.n	800de50 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	3308      	adds	r3, #8
 800de88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de8c:	e853 3f00 	ldrex	r3, [r3]
 800de90:	623b      	str	r3, [r7, #32]
   return(result);
 800de92:	6a3b      	ldr	r3, [r7, #32]
 800de94:	f023 0301 	bic.w	r3, r3, #1
 800de98:	64fb      	str	r3, [r7, #76]	; 0x4c
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	3308      	adds	r3, #8
 800dea0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dea2:	633a      	str	r2, [r7, #48]	; 0x30
 800dea4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dea6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dea8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800deaa:	e841 2300 	strex	r3, r2, [r1]
 800deae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800deb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d1e5      	bne.n	800de82 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	2220      	movs	r2, #32
 800deba:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2200      	movs	r2, #0
 800dec0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dec6:	2b01      	cmp	r3, #1
 800dec8:	d12e      	bne.n	800df28 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	2200      	movs	r2, #0
 800dece:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ded6:	693b      	ldr	r3, [r7, #16]
 800ded8:	e853 3f00 	ldrex	r3, [r3]
 800dedc:	60fb      	str	r3, [r7, #12]
   return(result);
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	f023 0310 	bic.w	r3, r3, #16
 800dee4:	64bb      	str	r3, [r7, #72]	; 0x48
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	461a      	mov	r2, r3
 800deec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800deee:	61fb      	str	r3, [r7, #28]
 800def0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800def2:	69b9      	ldr	r1, [r7, #24]
 800def4:	69fa      	ldr	r2, [r7, #28]
 800def6:	e841 2300 	strex	r3, r2, [r1]
 800defa:	617b      	str	r3, [r7, #20]
   return(result);
 800defc:	697b      	ldr	r3, [r7, #20]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d1e6      	bne.n	800ded0 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	69db      	ldr	r3, [r3, #28]
 800df08:	f003 0310 	and.w	r3, r3, #16
 800df0c:	2b10      	cmp	r3, #16
 800df0e:	d103      	bne.n	800df18 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	2210      	movs	r2, #16
 800df16:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800df1e:	4619      	mov	r1, r3
 800df20:	6878      	ldr	r0, [r7, #4]
 800df22:	f7ff f8c3 	bl	800d0ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800df26:	e00d      	b.n	800df44 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800df28:	6878      	ldr	r0, [r7, #4]
 800df2a:	f7f6 f8f3 	bl	8004114 <HAL_UART_RxCpltCallback>
}
 800df2e:	e009      	b.n	800df44 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	8b1b      	ldrh	r3, [r3, #24]
 800df36:	b29a      	uxth	r2, r3
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	f042 0208 	orr.w	r2, r2, #8
 800df40:	b292      	uxth	r2, r2
 800df42:	831a      	strh	r2, [r3, #24]
}
 800df44:	bf00      	nop
 800df46:	3758      	adds	r7, #88	; 0x58
 800df48:	46bd      	mov	sp, r7
 800df4a:	bd80      	pop	{r7, pc}

0800df4c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b096      	sub	sp, #88	; 0x58
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800df5a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df62:	2b22      	cmp	r3, #34	; 0x22
 800df64:	f040 8094 	bne.w	800e090 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800df6e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df76:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800df78:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800df7c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800df80:	4013      	ands	r3, r2
 800df82:	b29a      	uxth	r2, r3
 800df84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df86:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df8c:	1c9a      	adds	r2, r3, #2
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800df98:	b29b      	uxth	r3, r3
 800df9a:	3b01      	subs	r3, #1
 800df9c:	b29a      	uxth	r2, r3
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800dfaa:	b29b      	uxth	r3, r3
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d179      	bne.n	800e0a4 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfb8:	e853 3f00 	ldrex	r3, [r3]
 800dfbc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800dfbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dfc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	461a      	mov	r2, r3
 800dfcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dfce:	643b      	str	r3, [r7, #64]	; 0x40
 800dfd0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfd2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dfd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dfd6:	e841 2300 	strex	r3, r2, [r1]
 800dfda:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dfdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d1e6      	bne.n	800dfb0 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	3308      	adds	r3, #8
 800dfe8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfea:	6a3b      	ldr	r3, [r7, #32]
 800dfec:	e853 3f00 	ldrex	r3, [r3]
 800dff0:	61fb      	str	r3, [r7, #28]
   return(result);
 800dff2:	69fb      	ldr	r3, [r7, #28]
 800dff4:	f023 0301 	bic.w	r3, r3, #1
 800dff8:	64bb      	str	r3, [r7, #72]	; 0x48
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	3308      	adds	r3, #8
 800e000:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e002:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e004:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e006:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e00a:	e841 2300 	strex	r3, r2, [r1]
 800e00e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e012:	2b00      	cmp	r3, #0
 800e014:	d1e5      	bne.n	800dfe2 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	2220      	movs	r2, #32
 800e01a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	2200      	movs	r2, #0
 800e020:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e026:	2b01      	cmp	r3, #1
 800e028:	d12e      	bne.n	800e088 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	2200      	movs	r2, #0
 800e02e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	e853 3f00 	ldrex	r3, [r3]
 800e03c:	60bb      	str	r3, [r7, #8]
   return(result);
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	f023 0310 	bic.w	r3, r3, #16
 800e044:	647b      	str	r3, [r7, #68]	; 0x44
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	461a      	mov	r2, r3
 800e04c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e04e:	61bb      	str	r3, [r7, #24]
 800e050:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e052:	6979      	ldr	r1, [r7, #20]
 800e054:	69ba      	ldr	r2, [r7, #24]
 800e056:	e841 2300 	strex	r3, r2, [r1]
 800e05a:	613b      	str	r3, [r7, #16]
   return(result);
 800e05c:	693b      	ldr	r3, [r7, #16]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d1e6      	bne.n	800e030 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	69db      	ldr	r3, [r3, #28]
 800e068:	f003 0310 	and.w	r3, r3, #16
 800e06c:	2b10      	cmp	r3, #16
 800e06e:	d103      	bne.n	800e078 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	2210      	movs	r2, #16
 800e076:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e07e:	4619      	mov	r1, r3
 800e080:	6878      	ldr	r0, [r7, #4]
 800e082:	f7ff f813 	bl	800d0ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e086:	e00d      	b.n	800e0a4 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800e088:	6878      	ldr	r0, [r7, #4]
 800e08a:	f7f6 f843 	bl	8004114 <HAL_UART_RxCpltCallback>
}
 800e08e:	e009      	b.n	800e0a4 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	8b1b      	ldrh	r3, [r3, #24]
 800e096:	b29a      	uxth	r2, r3
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	f042 0208 	orr.w	r2, r2, #8
 800e0a0:	b292      	uxth	r2, r2
 800e0a2:	831a      	strh	r2, [r3, #24]
}
 800e0a4:	bf00      	nop
 800e0a6:	3758      	adds	r7, #88	; 0x58
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	bd80      	pop	{r7, pc}

0800e0ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e0ac:	b480      	push	{r7}
 800e0ae:	b083      	sub	sp, #12
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e0b4:	bf00      	nop
 800e0b6:	370c      	adds	r7, #12
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0be:	4770      	bx	lr

0800e0c0 <atof>:
 800e0c0:	2100      	movs	r1, #0
 800e0c2:	f001 bbdb 	b.w	800f87c <strtod>

0800e0c6 <atoi>:
 800e0c6:	220a      	movs	r2, #10
 800e0c8:	2100      	movs	r1, #0
 800e0ca:	f001 bc65 	b.w	800f998 <strtol>

0800e0ce <atol>:
 800e0ce:	220a      	movs	r2, #10
 800e0d0:	2100      	movs	r1, #0
 800e0d2:	f001 bc61 	b.w	800f998 <strtol>
	...

0800e0d8 <__errno>:
 800e0d8:	4b01      	ldr	r3, [pc, #4]	; (800e0e0 <__errno+0x8>)
 800e0da:	6818      	ldr	r0, [r3, #0]
 800e0dc:	4770      	bx	lr
 800e0de:	bf00      	nop
 800e0e0:	2000022c 	.word	0x2000022c

0800e0e4 <gmtime_r>:
 800e0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0e8:	e9d0 6700 	ldrd	r6, r7, [r0]
 800e0ec:	460c      	mov	r4, r1
 800e0ee:	4a4f      	ldr	r2, [pc, #316]	; (800e22c <gmtime_r+0x148>)
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	4630      	mov	r0, r6
 800e0f4:	4639      	mov	r1, r7
 800e0f6:	f7f2 fdc7 	bl	8000c88 <__aeabi_ldivmod>
 800e0fa:	4639      	mov	r1, r7
 800e0fc:	4605      	mov	r5, r0
 800e0fe:	4a4b      	ldr	r2, [pc, #300]	; (800e22c <gmtime_r+0x148>)
 800e100:	4630      	mov	r0, r6
 800e102:	2300      	movs	r3, #0
 800e104:	f7f2 fdc0 	bl	8000c88 <__aeabi_ldivmod>
 800e108:	2a00      	cmp	r2, #0
 800e10a:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800e10e:	bfb7      	itett	lt
 800e110:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800e114:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 800e118:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 800e11c:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800e120:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800e124:	fbb2 f1f0 	udiv	r1, r2, r0
 800e128:	fb00 2211 	mls	r2, r0, r1, r2
 800e12c:	203c      	movs	r0, #60	; 0x3c
 800e12e:	60a1      	str	r1, [r4, #8]
 800e130:	fbb2 f1f0 	udiv	r1, r2, r0
 800e134:	fb00 2211 	mls	r2, r0, r1, r2
 800e138:	6061      	str	r1, [r4, #4]
 800e13a:	6022      	str	r2, [r4, #0]
 800e13c:	2107      	movs	r1, #7
 800e13e:	1cda      	adds	r2, r3, #3
 800e140:	fb92 f1f1 	sdiv	r1, r2, r1
 800e144:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800e148:	1a52      	subs	r2, r2, r1
 800e14a:	bf48      	it	mi
 800e14c:	3207      	addmi	r2, #7
 800e14e:	4d38      	ldr	r5, [pc, #224]	; (800e230 <gmtime_r+0x14c>)
 800e150:	4838      	ldr	r0, [pc, #224]	; (800e234 <gmtime_r+0x150>)
 800e152:	61a2      	str	r2, [r4, #24]
 800e154:	2b00      	cmp	r3, #0
 800e156:	bfb7      	itett	lt
 800e158:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800e15c:	fb93 f5f5 	sdivge	r5, r3, r5
 800e160:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800e164:	fb92 f5f5 	sdivlt	r5, r2, r5
 800e168:	fb00 3005 	mla	r0, r0, r5, r3
 800e16c:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800e170:	fbb0 f2f2 	udiv	r2, r0, r2
 800e174:	4402      	add	r2, r0
 800e176:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800e17a:	fbb0 f1f3 	udiv	r1, r0, r3
 800e17e:	1a52      	subs	r2, r2, r1
 800e180:	f240 1c6d 	movw	ip, #365	; 0x16d
 800e184:	492c      	ldr	r1, [pc, #176]	; (800e238 <gmtime_r+0x154>)
 800e186:	fbb0 f1f1 	udiv	r1, r0, r1
 800e18a:	2764      	movs	r7, #100	; 0x64
 800e18c:	1a52      	subs	r2, r2, r1
 800e18e:	fbb2 f1fc 	udiv	r1, r2, ip
 800e192:	fbb2 f3f3 	udiv	r3, r2, r3
 800e196:	fbb1 f6f7 	udiv	r6, r1, r7
 800e19a:	1af3      	subs	r3, r6, r3
 800e19c:	4403      	add	r3, r0
 800e19e:	fb0c 3311 	mls	r3, ip, r1, r3
 800e1a2:	2299      	movs	r2, #153	; 0x99
 800e1a4:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800e1a8:	f10e 0e02 	add.w	lr, lr, #2
 800e1ac:	f103 0c01 	add.w	ip, r3, #1
 800e1b0:	fbbe f0f2 	udiv	r0, lr, r2
 800e1b4:	4342      	muls	r2, r0
 800e1b6:	3202      	adds	r2, #2
 800e1b8:	f04f 0805 	mov.w	r8, #5
 800e1bc:	fbb2 f2f8 	udiv	r2, r2, r8
 800e1c0:	ebac 0c02 	sub.w	ip, ip, r2
 800e1c4:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800e1c8:	4596      	cmp	lr, r2
 800e1ca:	bf94      	ite	ls
 800e1cc:	2202      	movls	r2, #2
 800e1ce:	f06f 0209 	mvnhi.w	r2, #9
 800e1d2:	4410      	add	r0, r2
 800e1d4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800e1d8:	fb02 1505 	mla	r5, r2, r5, r1
 800e1dc:	2801      	cmp	r0, #1
 800e1de:	bf98      	it	ls
 800e1e0:	3501      	addls	r5, #1
 800e1e2:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800e1e6:	d30d      	bcc.n	800e204 <gmtime_r+0x120>
 800e1e8:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800e1ec:	61e3      	str	r3, [r4, #28]
 800e1ee:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800e1f8:	f8c4 c00c 	str.w	ip, [r4, #12]
 800e1fc:	6223      	str	r3, [r4, #32]
 800e1fe:	4620      	mov	r0, r4
 800e200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e204:	078a      	lsls	r2, r1, #30
 800e206:	d102      	bne.n	800e20e <gmtime_r+0x12a>
 800e208:	fb07 1616 	mls	r6, r7, r6, r1
 800e20c:	b95e      	cbnz	r6, 800e226 <gmtime_r+0x142>
 800e20e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800e212:	fbb1 f6f2 	udiv	r6, r1, r2
 800e216:	fb02 1216 	mls	r2, r2, r6, r1
 800e21a:	fab2 f282 	clz	r2, r2
 800e21e:	0952      	lsrs	r2, r2, #5
 800e220:	333b      	adds	r3, #59	; 0x3b
 800e222:	4413      	add	r3, r2
 800e224:	e7e2      	b.n	800e1ec <gmtime_r+0x108>
 800e226:	2201      	movs	r2, #1
 800e228:	e7fa      	b.n	800e220 <gmtime_r+0x13c>
 800e22a:	bf00      	nop
 800e22c:	00015180 	.word	0x00015180
 800e230:	00023ab1 	.word	0x00023ab1
 800e234:	fffdc54f 	.word	0xfffdc54f
 800e238:	00023ab0 	.word	0x00023ab0

0800e23c <__libc_init_array>:
 800e23c:	b570      	push	{r4, r5, r6, lr}
 800e23e:	4d0d      	ldr	r5, [pc, #52]	; (800e274 <__libc_init_array+0x38>)
 800e240:	4c0d      	ldr	r4, [pc, #52]	; (800e278 <__libc_init_array+0x3c>)
 800e242:	1b64      	subs	r4, r4, r5
 800e244:	10a4      	asrs	r4, r4, #2
 800e246:	2600      	movs	r6, #0
 800e248:	42a6      	cmp	r6, r4
 800e24a:	d109      	bne.n	800e260 <__libc_init_array+0x24>
 800e24c:	4d0b      	ldr	r5, [pc, #44]	; (800e27c <__libc_init_array+0x40>)
 800e24e:	4c0c      	ldr	r4, [pc, #48]	; (800e280 <__libc_init_array+0x44>)
 800e250:	f004 fae4 	bl	801281c <_init>
 800e254:	1b64      	subs	r4, r4, r5
 800e256:	10a4      	asrs	r4, r4, #2
 800e258:	2600      	movs	r6, #0
 800e25a:	42a6      	cmp	r6, r4
 800e25c:	d105      	bne.n	800e26a <__libc_init_array+0x2e>
 800e25e:	bd70      	pop	{r4, r5, r6, pc}
 800e260:	f855 3b04 	ldr.w	r3, [r5], #4
 800e264:	4798      	blx	r3
 800e266:	3601      	adds	r6, #1
 800e268:	e7ee      	b.n	800e248 <__libc_init_array+0xc>
 800e26a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e26e:	4798      	blx	r3
 800e270:	3601      	adds	r6, #1
 800e272:	e7f2      	b.n	800e25a <__libc_init_array+0x1e>
 800e274:	080142fc 	.word	0x080142fc
 800e278:	080142fc 	.word	0x080142fc
 800e27c:	080142fc 	.word	0x080142fc
 800e280:	08014300 	.word	0x08014300

0800e284 <memcpy>:
 800e284:	440a      	add	r2, r1
 800e286:	4291      	cmp	r1, r2
 800e288:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e28c:	d100      	bne.n	800e290 <memcpy+0xc>
 800e28e:	4770      	bx	lr
 800e290:	b510      	push	{r4, lr}
 800e292:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e296:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e29a:	4291      	cmp	r1, r2
 800e29c:	d1f9      	bne.n	800e292 <memcpy+0xe>
 800e29e:	bd10      	pop	{r4, pc}

0800e2a0 <memset>:
 800e2a0:	4402      	add	r2, r0
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	4293      	cmp	r3, r2
 800e2a6:	d100      	bne.n	800e2aa <memset+0xa>
 800e2a8:	4770      	bx	lr
 800e2aa:	f803 1b01 	strb.w	r1, [r3], #1
 800e2ae:	e7f9      	b.n	800e2a4 <memset+0x4>

0800e2b0 <__cvt>:
 800e2b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e2b4:	ec55 4b10 	vmov	r4, r5, d0
 800e2b8:	2d00      	cmp	r5, #0
 800e2ba:	460e      	mov	r6, r1
 800e2bc:	4619      	mov	r1, r3
 800e2be:	462b      	mov	r3, r5
 800e2c0:	bfbb      	ittet	lt
 800e2c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e2c6:	461d      	movlt	r5, r3
 800e2c8:	2300      	movge	r3, #0
 800e2ca:	232d      	movlt	r3, #45	; 0x2d
 800e2cc:	700b      	strb	r3, [r1, #0]
 800e2ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e2d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e2d4:	4691      	mov	r9, r2
 800e2d6:	f023 0820 	bic.w	r8, r3, #32
 800e2da:	bfbc      	itt	lt
 800e2dc:	4622      	movlt	r2, r4
 800e2de:	4614      	movlt	r4, r2
 800e2e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e2e4:	d005      	beq.n	800e2f2 <__cvt+0x42>
 800e2e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e2ea:	d100      	bne.n	800e2ee <__cvt+0x3e>
 800e2ec:	3601      	adds	r6, #1
 800e2ee:	2102      	movs	r1, #2
 800e2f0:	e000      	b.n	800e2f4 <__cvt+0x44>
 800e2f2:	2103      	movs	r1, #3
 800e2f4:	ab03      	add	r3, sp, #12
 800e2f6:	9301      	str	r3, [sp, #4]
 800e2f8:	ab02      	add	r3, sp, #8
 800e2fa:	9300      	str	r3, [sp, #0]
 800e2fc:	ec45 4b10 	vmov	d0, r4, r5
 800e300:	4653      	mov	r3, sl
 800e302:	4632      	mov	r2, r6
 800e304:	f001 fc18 	bl	800fb38 <_dtoa_r>
 800e308:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e30c:	4607      	mov	r7, r0
 800e30e:	d102      	bne.n	800e316 <__cvt+0x66>
 800e310:	f019 0f01 	tst.w	r9, #1
 800e314:	d022      	beq.n	800e35c <__cvt+0xac>
 800e316:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e31a:	eb07 0906 	add.w	r9, r7, r6
 800e31e:	d110      	bne.n	800e342 <__cvt+0x92>
 800e320:	783b      	ldrb	r3, [r7, #0]
 800e322:	2b30      	cmp	r3, #48	; 0x30
 800e324:	d10a      	bne.n	800e33c <__cvt+0x8c>
 800e326:	2200      	movs	r2, #0
 800e328:	2300      	movs	r3, #0
 800e32a:	4620      	mov	r0, r4
 800e32c:	4629      	mov	r1, r5
 800e32e:	f7f2 fbcb 	bl	8000ac8 <__aeabi_dcmpeq>
 800e332:	b918      	cbnz	r0, 800e33c <__cvt+0x8c>
 800e334:	f1c6 0601 	rsb	r6, r6, #1
 800e338:	f8ca 6000 	str.w	r6, [sl]
 800e33c:	f8da 3000 	ldr.w	r3, [sl]
 800e340:	4499      	add	r9, r3
 800e342:	2200      	movs	r2, #0
 800e344:	2300      	movs	r3, #0
 800e346:	4620      	mov	r0, r4
 800e348:	4629      	mov	r1, r5
 800e34a:	f7f2 fbbd 	bl	8000ac8 <__aeabi_dcmpeq>
 800e34e:	b108      	cbz	r0, 800e354 <__cvt+0xa4>
 800e350:	f8cd 900c 	str.w	r9, [sp, #12]
 800e354:	2230      	movs	r2, #48	; 0x30
 800e356:	9b03      	ldr	r3, [sp, #12]
 800e358:	454b      	cmp	r3, r9
 800e35a:	d307      	bcc.n	800e36c <__cvt+0xbc>
 800e35c:	9b03      	ldr	r3, [sp, #12]
 800e35e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e360:	1bdb      	subs	r3, r3, r7
 800e362:	4638      	mov	r0, r7
 800e364:	6013      	str	r3, [r2, #0]
 800e366:	b004      	add	sp, #16
 800e368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e36c:	1c59      	adds	r1, r3, #1
 800e36e:	9103      	str	r1, [sp, #12]
 800e370:	701a      	strb	r2, [r3, #0]
 800e372:	e7f0      	b.n	800e356 <__cvt+0xa6>

0800e374 <__exponent>:
 800e374:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e376:	4603      	mov	r3, r0
 800e378:	2900      	cmp	r1, #0
 800e37a:	bfb8      	it	lt
 800e37c:	4249      	neglt	r1, r1
 800e37e:	f803 2b02 	strb.w	r2, [r3], #2
 800e382:	bfb4      	ite	lt
 800e384:	222d      	movlt	r2, #45	; 0x2d
 800e386:	222b      	movge	r2, #43	; 0x2b
 800e388:	2909      	cmp	r1, #9
 800e38a:	7042      	strb	r2, [r0, #1]
 800e38c:	dd2a      	ble.n	800e3e4 <__exponent+0x70>
 800e38e:	f10d 0407 	add.w	r4, sp, #7
 800e392:	46a4      	mov	ip, r4
 800e394:	270a      	movs	r7, #10
 800e396:	46a6      	mov	lr, r4
 800e398:	460a      	mov	r2, r1
 800e39a:	fb91 f6f7 	sdiv	r6, r1, r7
 800e39e:	fb07 1516 	mls	r5, r7, r6, r1
 800e3a2:	3530      	adds	r5, #48	; 0x30
 800e3a4:	2a63      	cmp	r2, #99	; 0x63
 800e3a6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800e3aa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e3ae:	4631      	mov	r1, r6
 800e3b0:	dcf1      	bgt.n	800e396 <__exponent+0x22>
 800e3b2:	3130      	adds	r1, #48	; 0x30
 800e3b4:	f1ae 0502 	sub.w	r5, lr, #2
 800e3b8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e3bc:	1c44      	adds	r4, r0, #1
 800e3be:	4629      	mov	r1, r5
 800e3c0:	4561      	cmp	r1, ip
 800e3c2:	d30a      	bcc.n	800e3da <__exponent+0x66>
 800e3c4:	f10d 0209 	add.w	r2, sp, #9
 800e3c8:	eba2 020e 	sub.w	r2, r2, lr
 800e3cc:	4565      	cmp	r5, ip
 800e3ce:	bf88      	it	hi
 800e3d0:	2200      	movhi	r2, #0
 800e3d2:	4413      	add	r3, r2
 800e3d4:	1a18      	subs	r0, r3, r0
 800e3d6:	b003      	add	sp, #12
 800e3d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e3de:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e3e2:	e7ed      	b.n	800e3c0 <__exponent+0x4c>
 800e3e4:	2330      	movs	r3, #48	; 0x30
 800e3e6:	3130      	adds	r1, #48	; 0x30
 800e3e8:	7083      	strb	r3, [r0, #2]
 800e3ea:	70c1      	strb	r1, [r0, #3]
 800e3ec:	1d03      	adds	r3, r0, #4
 800e3ee:	e7f1      	b.n	800e3d4 <__exponent+0x60>

0800e3f0 <_printf_float>:
 800e3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3f4:	ed2d 8b02 	vpush	{d8}
 800e3f8:	b08d      	sub	sp, #52	; 0x34
 800e3fa:	460c      	mov	r4, r1
 800e3fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e400:	4616      	mov	r6, r2
 800e402:	461f      	mov	r7, r3
 800e404:	4605      	mov	r5, r0
 800e406:	f002 fcf5 	bl	8010df4 <_localeconv_r>
 800e40a:	f8d0 a000 	ldr.w	sl, [r0]
 800e40e:	4650      	mov	r0, sl
 800e410:	f7f1 fede 	bl	80001d0 <strlen>
 800e414:	2300      	movs	r3, #0
 800e416:	930a      	str	r3, [sp, #40]	; 0x28
 800e418:	6823      	ldr	r3, [r4, #0]
 800e41a:	9305      	str	r3, [sp, #20]
 800e41c:	f8d8 3000 	ldr.w	r3, [r8]
 800e420:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e424:	3307      	adds	r3, #7
 800e426:	f023 0307 	bic.w	r3, r3, #7
 800e42a:	f103 0208 	add.w	r2, r3, #8
 800e42e:	f8c8 2000 	str.w	r2, [r8]
 800e432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e436:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e43a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e43e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e442:	9307      	str	r3, [sp, #28]
 800e444:	f8cd 8018 	str.w	r8, [sp, #24]
 800e448:	ee08 0a10 	vmov	s16, r0
 800e44c:	4b9f      	ldr	r3, [pc, #636]	; (800e6cc <_printf_float+0x2dc>)
 800e44e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e452:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e456:	f7f2 fb69 	bl	8000b2c <__aeabi_dcmpun>
 800e45a:	bb88      	cbnz	r0, 800e4c0 <_printf_float+0xd0>
 800e45c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e460:	4b9a      	ldr	r3, [pc, #616]	; (800e6cc <_printf_float+0x2dc>)
 800e462:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e466:	f7f2 fb43 	bl	8000af0 <__aeabi_dcmple>
 800e46a:	bb48      	cbnz	r0, 800e4c0 <_printf_float+0xd0>
 800e46c:	2200      	movs	r2, #0
 800e46e:	2300      	movs	r3, #0
 800e470:	4640      	mov	r0, r8
 800e472:	4649      	mov	r1, r9
 800e474:	f7f2 fb32 	bl	8000adc <__aeabi_dcmplt>
 800e478:	b110      	cbz	r0, 800e480 <_printf_float+0x90>
 800e47a:	232d      	movs	r3, #45	; 0x2d
 800e47c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e480:	4b93      	ldr	r3, [pc, #588]	; (800e6d0 <_printf_float+0x2e0>)
 800e482:	4894      	ldr	r0, [pc, #592]	; (800e6d4 <_printf_float+0x2e4>)
 800e484:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e488:	bf94      	ite	ls
 800e48a:	4698      	movls	r8, r3
 800e48c:	4680      	movhi	r8, r0
 800e48e:	2303      	movs	r3, #3
 800e490:	6123      	str	r3, [r4, #16]
 800e492:	9b05      	ldr	r3, [sp, #20]
 800e494:	f023 0204 	bic.w	r2, r3, #4
 800e498:	6022      	str	r2, [r4, #0]
 800e49a:	f04f 0900 	mov.w	r9, #0
 800e49e:	9700      	str	r7, [sp, #0]
 800e4a0:	4633      	mov	r3, r6
 800e4a2:	aa0b      	add	r2, sp, #44	; 0x2c
 800e4a4:	4621      	mov	r1, r4
 800e4a6:	4628      	mov	r0, r5
 800e4a8:	f000 f9d8 	bl	800e85c <_printf_common>
 800e4ac:	3001      	adds	r0, #1
 800e4ae:	f040 8090 	bne.w	800e5d2 <_printf_float+0x1e2>
 800e4b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e4b6:	b00d      	add	sp, #52	; 0x34
 800e4b8:	ecbd 8b02 	vpop	{d8}
 800e4bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4c0:	4642      	mov	r2, r8
 800e4c2:	464b      	mov	r3, r9
 800e4c4:	4640      	mov	r0, r8
 800e4c6:	4649      	mov	r1, r9
 800e4c8:	f7f2 fb30 	bl	8000b2c <__aeabi_dcmpun>
 800e4cc:	b140      	cbz	r0, 800e4e0 <_printf_float+0xf0>
 800e4ce:	464b      	mov	r3, r9
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	bfbc      	itt	lt
 800e4d4:	232d      	movlt	r3, #45	; 0x2d
 800e4d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e4da:	487f      	ldr	r0, [pc, #508]	; (800e6d8 <_printf_float+0x2e8>)
 800e4dc:	4b7f      	ldr	r3, [pc, #508]	; (800e6dc <_printf_float+0x2ec>)
 800e4de:	e7d1      	b.n	800e484 <_printf_float+0x94>
 800e4e0:	6863      	ldr	r3, [r4, #4]
 800e4e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e4e6:	9206      	str	r2, [sp, #24]
 800e4e8:	1c5a      	adds	r2, r3, #1
 800e4ea:	d13f      	bne.n	800e56c <_printf_float+0x17c>
 800e4ec:	2306      	movs	r3, #6
 800e4ee:	6063      	str	r3, [r4, #4]
 800e4f0:	9b05      	ldr	r3, [sp, #20]
 800e4f2:	6861      	ldr	r1, [r4, #4]
 800e4f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	9303      	str	r3, [sp, #12]
 800e4fc:	ab0a      	add	r3, sp, #40	; 0x28
 800e4fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e502:	ab09      	add	r3, sp, #36	; 0x24
 800e504:	ec49 8b10 	vmov	d0, r8, r9
 800e508:	9300      	str	r3, [sp, #0]
 800e50a:	6022      	str	r2, [r4, #0]
 800e50c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e510:	4628      	mov	r0, r5
 800e512:	f7ff fecd 	bl	800e2b0 <__cvt>
 800e516:	9b06      	ldr	r3, [sp, #24]
 800e518:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e51a:	2b47      	cmp	r3, #71	; 0x47
 800e51c:	4680      	mov	r8, r0
 800e51e:	d108      	bne.n	800e532 <_printf_float+0x142>
 800e520:	1cc8      	adds	r0, r1, #3
 800e522:	db02      	blt.n	800e52a <_printf_float+0x13a>
 800e524:	6863      	ldr	r3, [r4, #4]
 800e526:	4299      	cmp	r1, r3
 800e528:	dd41      	ble.n	800e5ae <_printf_float+0x1be>
 800e52a:	f1ab 0b02 	sub.w	fp, fp, #2
 800e52e:	fa5f fb8b 	uxtb.w	fp, fp
 800e532:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e536:	d820      	bhi.n	800e57a <_printf_float+0x18a>
 800e538:	3901      	subs	r1, #1
 800e53a:	465a      	mov	r2, fp
 800e53c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e540:	9109      	str	r1, [sp, #36]	; 0x24
 800e542:	f7ff ff17 	bl	800e374 <__exponent>
 800e546:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e548:	1813      	adds	r3, r2, r0
 800e54a:	2a01      	cmp	r2, #1
 800e54c:	4681      	mov	r9, r0
 800e54e:	6123      	str	r3, [r4, #16]
 800e550:	dc02      	bgt.n	800e558 <_printf_float+0x168>
 800e552:	6822      	ldr	r2, [r4, #0]
 800e554:	07d2      	lsls	r2, r2, #31
 800e556:	d501      	bpl.n	800e55c <_printf_float+0x16c>
 800e558:	3301      	adds	r3, #1
 800e55a:	6123      	str	r3, [r4, #16]
 800e55c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e560:	2b00      	cmp	r3, #0
 800e562:	d09c      	beq.n	800e49e <_printf_float+0xae>
 800e564:	232d      	movs	r3, #45	; 0x2d
 800e566:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e56a:	e798      	b.n	800e49e <_printf_float+0xae>
 800e56c:	9a06      	ldr	r2, [sp, #24]
 800e56e:	2a47      	cmp	r2, #71	; 0x47
 800e570:	d1be      	bne.n	800e4f0 <_printf_float+0x100>
 800e572:	2b00      	cmp	r3, #0
 800e574:	d1bc      	bne.n	800e4f0 <_printf_float+0x100>
 800e576:	2301      	movs	r3, #1
 800e578:	e7b9      	b.n	800e4ee <_printf_float+0xfe>
 800e57a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e57e:	d118      	bne.n	800e5b2 <_printf_float+0x1c2>
 800e580:	2900      	cmp	r1, #0
 800e582:	6863      	ldr	r3, [r4, #4]
 800e584:	dd0b      	ble.n	800e59e <_printf_float+0x1ae>
 800e586:	6121      	str	r1, [r4, #16]
 800e588:	b913      	cbnz	r3, 800e590 <_printf_float+0x1a0>
 800e58a:	6822      	ldr	r2, [r4, #0]
 800e58c:	07d0      	lsls	r0, r2, #31
 800e58e:	d502      	bpl.n	800e596 <_printf_float+0x1a6>
 800e590:	3301      	adds	r3, #1
 800e592:	440b      	add	r3, r1
 800e594:	6123      	str	r3, [r4, #16]
 800e596:	65a1      	str	r1, [r4, #88]	; 0x58
 800e598:	f04f 0900 	mov.w	r9, #0
 800e59c:	e7de      	b.n	800e55c <_printf_float+0x16c>
 800e59e:	b913      	cbnz	r3, 800e5a6 <_printf_float+0x1b6>
 800e5a0:	6822      	ldr	r2, [r4, #0]
 800e5a2:	07d2      	lsls	r2, r2, #31
 800e5a4:	d501      	bpl.n	800e5aa <_printf_float+0x1ba>
 800e5a6:	3302      	adds	r3, #2
 800e5a8:	e7f4      	b.n	800e594 <_printf_float+0x1a4>
 800e5aa:	2301      	movs	r3, #1
 800e5ac:	e7f2      	b.n	800e594 <_printf_float+0x1a4>
 800e5ae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e5b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5b4:	4299      	cmp	r1, r3
 800e5b6:	db05      	blt.n	800e5c4 <_printf_float+0x1d4>
 800e5b8:	6823      	ldr	r3, [r4, #0]
 800e5ba:	6121      	str	r1, [r4, #16]
 800e5bc:	07d8      	lsls	r0, r3, #31
 800e5be:	d5ea      	bpl.n	800e596 <_printf_float+0x1a6>
 800e5c0:	1c4b      	adds	r3, r1, #1
 800e5c2:	e7e7      	b.n	800e594 <_printf_float+0x1a4>
 800e5c4:	2900      	cmp	r1, #0
 800e5c6:	bfd4      	ite	le
 800e5c8:	f1c1 0202 	rsble	r2, r1, #2
 800e5cc:	2201      	movgt	r2, #1
 800e5ce:	4413      	add	r3, r2
 800e5d0:	e7e0      	b.n	800e594 <_printf_float+0x1a4>
 800e5d2:	6823      	ldr	r3, [r4, #0]
 800e5d4:	055a      	lsls	r2, r3, #21
 800e5d6:	d407      	bmi.n	800e5e8 <_printf_float+0x1f8>
 800e5d8:	6923      	ldr	r3, [r4, #16]
 800e5da:	4642      	mov	r2, r8
 800e5dc:	4631      	mov	r1, r6
 800e5de:	4628      	mov	r0, r5
 800e5e0:	47b8      	blx	r7
 800e5e2:	3001      	adds	r0, #1
 800e5e4:	d12c      	bne.n	800e640 <_printf_float+0x250>
 800e5e6:	e764      	b.n	800e4b2 <_printf_float+0xc2>
 800e5e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e5ec:	f240 80e0 	bls.w	800e7b0 <_printf_float+0x3c0>
 800e5f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	f7f2 fa66 	bl	8000ac8 <__aeabi_dcmpeq>
 800e5fc:	2800      	cmp	r0, #0
 800e5fe:	d034      	beq.n	800e66a <_printf_float+0x27a>
 800e600:	4a37      	ldr	r2, [pc, #220]	; (800e6e0 <_printf_float+0x2f0>)
 800e602:	2301      	movs	r3, #1
 800e604:	4631      	mov	r1, r6
 800e606:	4628      	mov	r0, r5
 800e608:	47b8      	blx	r7
 800e60a:	3001      	adds	r0, #1
 800e60c:	f43f af51 	beq.w	800e4b2 <_printf_float+0xc2>
 800e610:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e614:	429a      	cmp	r2, r3
 800e616:	db02      	blt.n	800e61e <_printf_float+0x22e>
 800e618:	6823      	ldr	r3, [r4, #0]
 800e61a:	07d8      	lsls	r0, r3, #31
 800e61c:	d510      	bpl.n	800e640 <_printf_float+0x250>
 800e61e:	ee18 3a10 	vmov	r3, s16
 800e622:	4652      	mov	r2, sl
 800e624:	4631      	mov	r1, r6
 800e626:	4628      	mov	r0, r5
 800e628:	47b8      	blx	r7
 800e62a:	3001      	adds	r0, #1
 800e62c:	f43f af41 	beq.w	800e4b2 <_printf_float+0xc2>
 800e630:	f04f 0800 	mov.w	r8, #0
 800e634:	f104 091a 	add.w	r9, r4, #26
 800e638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e63a:	3b01      	subs	r3, #1
 800e63c:	4543      	cmp	r3, r8
 800e63e:	dc09      	bgt.n	800e654 <_printf_float+0x264>
 800e640:	6823      	ldr	r3, [r4, #0]
 800e642:	079b      	lsls	r3, r3, #30
 800e644:	f100 8105 	bmi.w	800e852 <_printf_float+0x462>
 800e648:	68e0      	ldr	r0, [r4, #12]
 800e64a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e64c:	4298      	cmp	r0, r3
 800e64e:	bfb8      	it	lt
 800e650:	4618      	movlt	r0, r3
 800e652:	e730      	b.n	800e4b6 <_printf_float+0xc6>
 800e654:	2301      	movs	r3, #1
 800e656:	464a      	mov	r2, r9
 800e658:	4631      	mov	r1, r6
 800e65a:	4628      	mov	r0, r5
 800e65c:	47b8      	blx	r7
 800e65e:	3001      	adds	r0, #1
 800e660:	f43f af27 	beq.w	800e4b2 <_printf_float+0xc2>
 800e664:	f108 0801 	add.w	r8, r8, #1
 800e668:	e7e6      	b.n	800e638 <_printf_float+0x248>
 800e66a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	dc39      	bgt.n	800e6e4 <_printf_float+0x2f4>
 800e670:	4a1b      	ldr	r2, [pc, #108]	; (800e6e0 <_printf_float+0x2f0>)
 800e672:	2301      	movs	r3, #1
 800e674:	4631      	mov	r1, r6
 800e676:	4628      	mov	r0, r5
 800e678:	47b8      	blx	r7
 800e67a:	3001      	adds	r0, #1
 800e67c:	f43f af19 	beq.w	800e4b2 <_printf_float+0xc2>
 800e680:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e684:	4313      	orrs	r3, r2
 800e686:	d102      	bne.n	800e68e <_printf_float+0x29e>
 800e688:	6823      	ldr	r3, [r4, #0]
 800e68a:	07d9      	lsls	r1, r3, #31
 800e68c:	d5d8      	bpl.n	800e640 <_printf_float+0x250>
 800e68e:	ee18 3a10 	vmov	r3, s16
 800e692:	4652      	mov	r2, sl
 800e694:	4631      	mov	r1, r6
 800e696:	4628      	mov	r0, r5
 800e698:	47b8      	blx	r7
 800e69a:	3001      	adds	r0, #1
 800e69c:	f43f af09 	beq.w	800e4b2 <_printf_float+0xc2>
 800e6a0:	f04f 0900 	mov.w	r9, #0
 800e6a4:	f104 0a1a 	add.w	sl, r4, #26
 800e6a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6aa:	425b      	negs	r3, r3
 800e6ac:	454b      	cmp	r3, r9
 800e6ae:	dc01      	bgt.n	800e6b4 <_printf_float+0x2c4>
 800e6b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6b2:	e792      	b.n	800e5da <_printf_float+0x1ea>
 800e6b4:	2301      	movs	r3, #1
 800e6b6:	4652      	mov	r2, sl
 800e6b8:	4631      	mov	r1, r6
 800e6ba:	4628      	mov	r0, r5
 800e6bc:	47b8      	blx	r7
 800e6be:	3001      	adds	r0, #1
 800e6c0:	f43f aef7 	beq.w	800e4b2 <_printf_float+0xc2>
 800e6c4:	f109 0901 	add.w	r9, r9, #1
 800e6c8:	e7ee      	b.n	800e6a8 <_printf_float+0x2b8>
 800e6ca:	bf00      	nop
 800e6cc:	7fefffff 	.word	0x7fefffff
 800e6d0:	08013f58 	.word	0x08013f58
 800e6d4:	08013f5c 	.word	0x08013f5c
 800e6d8:	08013f64 	.word	0x08013f64
 800e6dc:	08013f60 	.word	0x08013f60
 800e6e0:	08013f68 	.word	0x08013f68
 800e6e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e6e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e6e8:	429a      	cmp	r2, r3
 800e6ea:	bfa8      	it	ge
 800e6ec:	461a      	movge	r2, r3
 800e6ee:	2a00      	cmp	r2, #0
 800e6f0:	4691      	mov	r9, r2
 800e6f2:	dc37      	bgt.n	800e764 <_printf_float+0x374>
 800e6f4:	f04f 0b00 	mov.w	fp, #0
 800e6f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e6fc:	f104 021a 	add.w	r2, r4, #26
 800e700:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e702:	9305      	str	r3, [sp, #20]
 800e704:	eba3 0309 	sub.w	r3, r3, r9
 800e708:	455b      	cmp	r3, fp
 800e70a:	dc33      	bgt.n	800e774 <_printf_float+0x384>
 800e70c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e710:	429a      	cmp	r2, r3
 800e712:	db3b      	blt.n	800e78c <_printf_float+0x39c>
 800e714:	6823      	ldr	r3, [r4, #0]
 800e716:	07da      	lsls	r2, r3, #31
 800e718:	d438      	bmi.n	800e78c <_printf_float+0x39c>
 800e71a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e71c:	9a05      	ldr	r2, [sp, #20]
 800e71e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e720:	1a9a      	subs	r2, r3, r2
 800e722:	eba3 0901 	sub.w	r9, r3, r1
 800e726:	4591      	cmp	r9, r2
 800e728:	bfa8      	it	ge
 800e72a:	4691      	movge	r9, r2
 800e72c:	f1b9 0f00 	cmp.w	r9, #0
 800e730:	dc35      	bgt.n	800e79e <_printf_float+0x3ae>
 800e732:	f04f 0800 	mov.w	r8, #0
 800e736:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e73a:	f104 0a1a 	add.w	sl, r4, #26
 800e73e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e742:	1a9b      	subs	r3, r3, r2
 800e744:	eba3 0309 	sub.w	r3, r3, r9
 800e748:	4543      	cmp	r3, r8
 800e74a:	f77f af79 	ble.w	800e640 <_printf_float+0x250>
 800e74e:	2301      	movs	r3, #1
 800e750:	4652      	mov	r2, sl
 800e752:	4631      	mov	r1, r6
 800e754:	4628      	mov	r0, r5
 800e756:	47b8      	blx	r7
 800e758:	3001      	adds	r0, #1
 800e75a:	f43f aeaa 	beq.w	800e4b2 <_printf_float+0xc2>
 800e75e:	f108 0801 	add.w	r8, r8, #1
 800e762:	e7ec      	b.n	800e73e <_printf_float+0x34e>
 800e764:	4613      	mov	r3, r2
 800e766:	4631      	mov	r1, r6
 800e768:	4642      	mov	r2, r8
 800e76a:	4628      	mov	r0, r5
 800e76c:	47b8      	blx	r7
 800e76e:	3001      	adds	r0, #1
 800e770:	d1c0      	bne.n	800e6f4 <_printf_float+0x304>
 800e772:	e69e      	b.n	800e4b2 <_printf_float+0xc2>
 800e774:	2301      	movs	r3, #1
 800e776:	4631      	mov	r1, r6
 800e778:	4628      	mov	r0, r5
 800e77a:	9205      	str	r2, [sp, #20]
 800e77c:	47b8      	blx	r7
 800e77e:	3001      	adds	r0, #1
 800e780:	f43f ae97 	beq.w	800e4b2 <_printf_float+0xc2>
 800e784:	9a05      	ldr	r2, [sp, #20]
 800e786:	f10b 0b01 	add.w	fp, fp, #1
 800e78a:	e7b9      	b.n	800e700 <_printf_float+0x310>
 800e78c:	ee18 3a10 	vmov	r3, s16
 800e790:	4652      	mov	r2, sl
 800e792:	4631      	mov	r1, r6
 800e794:	4628      	mov	r0, r5
 800e796:	47b8      	blx	r7
 800e798:	3001      	adds	r0, #1
 800e79a:	d1be      	bne.n	800e71a <_printf_float+0x32a>
 800e79c:	e689      	b.n	800e4b2 <_printf_float+0xc2>
 800e79e:	9a05      	ldr	r2, [sp, #20]
 800e7a0:	464b      	mov	r3, r9
 800e7a2:	4442      	add	r2, r8
 800e7a4:	4631      	mov	r1, r6
 800e7a6:	4628      	mov	r0, r5
 800e7a8:	47b8      	blx	r7
 800e7aa:	3001      	adds	r0, #1
 800e7ac:	d1c1      	bne.n	800e732 <_printf_float+0x342>
 800e7ae:	e680      	b.n	800e4b2 <_printf_float+0xc2>
 800e7b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e7b2:	2a01      	cmp	r2, #1
 800e7b4:	dc01      	bgt.n	800e7ba <_printf_float+0x3ca>
 800e7b6:	07db      	lsls	r3, r3, #31
 800e7b8:	d538      	bpl.n	800e82c <_printf_float+0x43c>
 800e7ba:	2301      	movs	r3, #1
 800e7bc:	4642      	mov	r2, r8
 800e7be:	4631      	mov	r1, r6
 800e7c0:	4628      	mov	r0, r5
 800e7c2:	47b8      	blx	r7
 800e7c4:	3001      	adds	r0, #1
 800e7c6:	f43f ae74 	beq.w	800e4b2 <_printf_float+0xc2>
 800e7ca:	ee18 3a10 	vmov	r3, s16
 800e7ce:	4652      	mov	r2, sl
 800e7d0:	4631      	mov	r1, r6
 800e7d2:	4628      	mov	r0, r5
 800e7d4:	47b8      	blx	r7
 800e7d6:	3001      	adds	r0, #1
 800e7d8:	f43f ae6b 	beq.w	800e4b2 <_printf_float+0xc2>
 800e7dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	f7f2 f970 	bl	8000ac8 <__aeabi_dcmpeq>
 800e7e8:	b9d8      	cbnz	r0, 800e822 <_printf_float+0x432>
 800e7ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7ec:	f108 0201 	add.w	r2, r8, #1
 800e7f0:	3b01      	subs	r3, #1
 800e7f2:	4631      	mov	r1, r6
 800e7f4:	4628      	mov	r0, r5
 800e7f6:	47b8      	blx	r7
 800e7f8:	3001      	adds	r0, #1
 800e7fa:	d10e      	bne.n	800e81a <_printf_float+0x42a>
 800e7fc:	e659      	b.n	800e4b2 <_printf_float+0xc2>
 800e7fe:	2301      	movs	r3, #1
 800e800:	4652      	mov	r2, sl
 800e802:	4631      	mov	r1, r6
 800e804:	4628      	mov	r0, r5
 800e806:	47b8      	blx	r7
 800e808:	3001      	adds	r0, #1
 800e80a:	f43f ae52 	beq.w	800e4b2 <_printf_float+0xc2>
 800e80e:	f108 0801 	add.w	r8, r8, #1
 800e812:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e814:	3b01      	subs	r3, #1
 800e816:	4543      	cmp	r3, r8
 800e818:	dcf1      	bgt.n	800e7fe <_printf_float+0x40e>
 800e81a:	464b      	mov	r3, r9
 800e81c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e820:	e6dc      	b.n	800e5dc <_printf_float+0x1ec>
 800e822:	f04f 0800 	mov.w	r8, #0
 800e826:	f104 0a1a 	add.w	sl, r4, #26
 800e82a:	e7f2      	b.n	800e812 <_printf_float+0x422>
 800e82c:	2301      	movs	r3, #1
 800e82e:	4642      	mov	r2, r8
 800e830:	e7df      	b.n	800e7f2 <_printf_float+0x402>
 800e832:	2301      	movs	r3, #1
 800e834:	464a      	mov	r2, r9
 800e836:	4631      	mov	r1, r6
 800e838:	4628      	mov	r0, r5
 800e83a:	47b8      	blx	r7
 800e83c:	3001      	adds	r0, #1
 800e83e:	f43f ae38 	beq.w	800e4b2 <_printf_float+0xc2>
 800e842:	f108 0801 	add.w	r8, r8, #1
 800e846:	68e3      	ldr	r3, [r4, #12]
 800e848:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e84a:	1a5b      	subs	r3, r3, r1
 800e84c:	4543      	cmp	r3, r8
 800e84e:	dcf0      	bgt.n	800e832 <_printf_float+0x442>
 800e850:	e6fa      	b.n	800e648 <_printf_float+0x258>
 800e852:	f04f 0800 	mov.w	r8, #0
 800e856:	f104 0919 	add.w	r9, r4, #25
 800e85a:	e7f4      	b.n	800e846 <_printf_float+0x456>

0800e85c <_printf_common>:
 800e85c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e860:	4616      	mov	r6, r2
 800e862:	4699      	mov	r9, r3
 800e864:	688a      	ldr	r2, [r1, #8]
 800e866:	690b      	ldr	r3, [r1, #16]
 800e868:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e86c:	4293      	cmp	r3, r2
 800e86e:	bfb8      	it	lt
 800e870:	4613      	movlt	r3, r2
 800e872:	6033      	str	r3, [r6, #0]
 800e874:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e878:	4607      	mov	r7, r0
 800e87a:	460c      	mov	r4, r1
 800e87c:	b10a      	cbz	r2, 800e882 <_printf_common+0x26>
 800e87e:	3301      	adds	r3, #1
 800e880:	6033      	str	r3, [r6, #0]
 800e882:	6823      	ldr	r3, [r4, #0]
 800e884:	0699      	lsls	r1, r3, #26
 800e886:	bf42      	ittt	mi
 800e888:	6833      	ldrmi	r3, [r6, #0]
 800e88a:	3302      	addmi	r3, #2
 800e88c:	6033      	strmi	r3, [r6, #0]
 800e88e:	6825      	ldr	r5, [r4, #0]
 800e890:	f015 0506 	ands.w	r5, r5, #6
 800e894:	d106      	bne.n	800e8a4 <_printf_common+0x48>
 800e896:	f104 0a19 	add.w	sl, r4, #25
 800e89a:	68e3      	ldr	r3, [r4, #12]
 800e89c:	6832      	ldr	r2, [r6, #0]
 800e89e:	1a9b      	subs	r3, r3, r2
 800e8a0:	42ab      	cmp	r3, r5
 800e8a2:	dc26      	bgt.n	800e8f2 <_printf_common+0x96>
 800e8a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e8a8:	1e13      	subs	r3, r2, #0
 800e8aa:	6822      	ldr	r2, [r4, #0]
 800e8ac:	bf18      	it	ne
 800e8ae:	2301      	movne	r3, #1
 800e8b0:	0692      	lsls	r2, r2, #26
 800e8b2:	d42b      	bmi.n	800e90c <_printf_common+0xb0>
 800e8b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e8b8:	4649      	mov	r1, r9
 800e8ba:	4638      	mov	r0, r7
 800e8bc:	47c0      	blx	r8
 800e8be:	3001      	adds	r0, #1
 800e8c0:	d01e      	beq.n	800e900 <_printf_common+0xa4>
 800e8c2:	6823      	ldr	r3, [r4, #0]
 800e8c4:	68e5      	ldr	r5, [r4, #12]
 800e8c6:	6832      	ldr	r2, [r6, #0]
 800e8c8:	f003 0306 	and.w	r3, r3, #6
 800e8cc:	2b04      	cmp	r3, #4
 800e8ce:	bf08      	it	eq
 800e8d0:	1aad      	subeq	r5, r5, r2
 800e8d2:	68a3      	ldr	r3, [r4, #8]
 800e8d4:	6922      	ldr	r2, [r4, #16]
 800e8d6:	bf0c      	ite	eq
 800e8d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e8dc:	2500      	movne	r5, #0
 800e8de:	4293      	cmp	r3, r2
 800e8e0:	bfc4      	itt	gt
 800e8e2:	1a9b      	subgt	r3, r3, r2
 800e8e4:	18ed      	addgt	r5, r5, r3
 800e8e6:	2600      	movs	r6, #0
 800e8e8:	341a      	adds	r4, #26
 800e8ea:	42b5      	cmp	r5, r6
 800e8ec:	d11a      	bne.n	800e924 <_printf_common+0xc8>
 800e8ee:	2000      	movs	r0, #0
 800e8f0:	e008      	b.n	800e904 <_printf_common+0xa8>
 800e8f2:	2301      	movs	r3, #1
 800e8f4:	4652      	mov	r2, sl
 800e8f6:	4649      	mov	r1, r9
 800e8f8:	4638      	mov	r0, r7
 800e8fa:	47c0      	blx	r8
 800e8fc:	3001      	adds	r0, #1
 800e8fe:	d103      	bne.n	800e908 <_printf_common+0xac>
 800e900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e908:	3501      	adds	r5, #1
 800e90a:	e7c6      	b.n	800e89a <_printf_common+0x3e>
 800e90c:	18e1      	adds	r1, r4, r3
 800e90e:	1c5a      	adds	r2, r3, #1
 800e910:	2030      	movs	r0, #48	; 0x30
 800e912:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e916:	4422      	add	r2, r4
 800e918:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e91c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e920:	3302      	adds	r3, #2
 800e922:	e7c7      	b.n	800e8b4 <_printf_common+0x58>
 800e924:	2301      	movs	r3, #1
 800e926:	4622      	mov	r2, r4
 800e928:	4649      	mov	r1, r9
 800e92a:	4638      	mov	r0, r7
 800e92c:	47c0      	blx	r8
 800e92e:	3001      	adds	r0, #1
 800e930:	d0e6      	beq.n	800e900 <_printf_common+0xa4>
 800e932:	3601      	adds	r6, #1
 800e934:	e7d9      	b.n	800e8ea <_printf_common+0x8e>
	...

0800e938 <_printf_i>:
 800e938:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e93c:	7e0f      	ldrb	r7, [r1, #24]
 800e93e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e940:	2f78      	cmp	r7, #120	; 0x78
 800e942:	4691      	mov	r9, r2
 800e944:	4680      	mov	r8, r0
 800e946:	460c      	mov	r4, r1
 800e948:	469a      	mov	sl, r3
 800e94a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e94e:	d807      	bhi.n	800e960 <_printf_i+0x28>
 800e950:	2f62      	cmp	r7, #98	; 0x62
 800e952:	d80a      	bhi.n	800e96a <_printf_i+0x32>
 800e954:	2f00      	cmp	r7, #0
 800e956:	f000 80d8 	beq.w	800eb0a <_printf_i+0x1d2>
 800e95a:	2f58      	cmp	r7, #88	; 0x58
 800e95c:	f000 80a3 	beq.w	800eaa6 <_printf_i+0x16e>
 800e960:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e964:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e968:	e03a      	b.n	800e9e0 <_printf_i+0xa8>
 800e96a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e96e:	2b15      	cmp	r3, #21
 800e970:	d8f6      	bhi.n	800e960 <_printf_i+0x28>
 800e972:	a101      	add	r1, pc, #4	; (adr r1, 800e978 <_printf_i+0x40>)
 800e974:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e978:	0800e9d1 	.word	0x0800e9d1
 800e97c:	0800e9e5 	.word	0x0800e9e5
 800e980:	0800e961 	.word	0x0800e961
 800e984:	0800e961 	.word	0x0800e961
 800e988:	0800e961 	.word	0x0800e961
 800e98c:	0800e961 	.word	0x0800e961
 800e990:	0800e9e5 	.word	0x0800e9e5
 800e994:	0800e961 	.word	0x0800e961
 800e998:	0800e961 	.word	0x0800e961
 800e99c:	0800e961 	.word	0x0800e961
 800e9a0:	0800e961 	.word	0x0800e961
 800e9a4:	0800eaf1 	.word	0x0800eaf1
 800e9a8:	0800ea15 	.word	0x0800ea15
 800e9ac:	0800ead3 	.word	0x0800ead3
 800e9b0:	0800e961 	.word	0x0800e961
 800e9b4:	0800e961 	.word	0x0800e961
 800e9b8:	0800eb13 	.word	0x0800eb13
 800e9bc:	0800e961 	.word	0x0800e961
 800e9c0:	0800ea15 	.word	0x0800ea15
 800e9c4:	0800e961 	.word	0x0800e961
 800e9c8:	0800e961 	.word	0x0800e961
 800e9cc:	0800eadb 	.word	0x0800eadb
 800e9d0:	682b      	ldr	r3, [r5, #0]
 800e9d2:	1d1a      	adds	r2, r3, #4
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	602a      	str	r2, [r5, #0]
 800e9d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e9dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e9e0:	2301      	movs	r3, #1
 800e9e2:	e0a3      	b.n	800eb2c <_printf_i+0x1f4>
 800e9e4:	6820      	ldr	r0, [r4, #0]
 800e9e6:	6829      	ldr	r1, [r5, #0]
 800e9e8:	0606      	lsls	r6, r0, #24
 800e9ea:	f101 0304 	add.w	r3, r1, #4
 800e9ee:	d50a      	bpl.n	800ea06 <_printf_i+0xce>
 800e9f0:	680e      	ldr	r6, [r1, #0]
 800e9f2:	602b      	str	r3, [r5, #0]
 800e9f4:	2e00      	cmp	r6, #0
 800e9f6:	da03      	bge.n	800ea00 <_printf_i+0xc8>
 800e9f8:	232d      	movs	r3, #45	; 0x2d
 800e9fa:	4276      	negs	r6, r6
 800e9fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea00:	485e      	ldr	r0, [pc, #376]	; (800eb7c <_printf_i+0x244>)
 800ea02:	230a      	movs	r3, #10
 800ea04:	e019      	b.n	800ea3a <_printf_i+0x102>
 800ea06:	680e      	ldr	r6, [r1, #0]
 800ea08:	602b      	str	r3, [r5, #0]
 800ea0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ea0e:	bf18      	it	ne
 800ea10:	b236      	sxthne	r6, r6
 800ea12:	e7ef      	b.n	800e9f4 <_printf_i+0xbc>
 800ea14:	682b      	ldr	r3, [r5, #0]
 800ea16:	6820      	ldr	r0, [r4, #0]
 800ea18:	1d19      	adds	r1, r3, #4
 800ea1a:	6029      	str	r1, [r5, #0]
 800ea1c:	0601      	lsls	r1, r0, #24
 800ea1e:	d501      	bpl.n	800ea24 <_printf_i+0xec>
 800ea20:	681e      	ldr	r6, [r3, #0]
 800ea22:	e002      	b.n	800ea2a <_printf_i+0xf2>
 800ea24:	0646      	lsls	r6, r0, #25
 800ea26:	d5fb      	bpl.n	800ea20 <_printf_i+0xe8>
 800ea28:	881e      	ldrh	r6, [r3, #0]
 800ea2a:	4854      	ldr	r0, [pc, #336]	; (800eb7c <_printf_i+0x244>)
 800ea2c:	2f6f      	cmp	r7, #111	; 0x6f
 800ea2e:	bf0c      	ite	eq
 800ea30:	2308      	moveq	r3, #8
 800ea32:	230a      	movne	r3, #10
 800ea34:	2100      	movs	r1, #0
 800ea36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ea3a:	6865      	ldr	r5, [r4, #4]
 800ea3c:	60a5      	str	r5, [r4, #8]
 800ea3e:	2d00      	cmp	r5, #0
 800ea40:	bfa2      	ittt	ge
 800ea42:	6821      	ldrge	r1, [r4, #0]
 800ea44:	f021 0104 	bicge.w	r1, r1, #4
 800ea48:	6021      	strge	r1, [r4, #0]
 800ea4a:	b90e      	cbnz	r6, 800ea50 <_printf_i+0x118>
 800ea4c:	2d00      	cmp	r5, #0
 800ea4e:	d04d      	beq.n	800eaec <_printf_i+0x1b4>
 800ea50:	4615      	mov	r5, r2
 800ea52:	fbb6 f1f3 	udiv	r1, r6, r3
 800ea56:	fb03 6711 	mls	r7, r3, r1, r6
 800ea5a:	5dc7      	ldrb	r7, [r0, r7]
 800ea5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ea60:	4637      	mov	r7, r6
 800ea62:	42bb      	cmp	r3, r7
 800ea64:	460e      	mov	r6, r1
 800ea66:	d9f4      	bls.n	800ea52 <_printf_i+0x11a>
 800ea68:	2b08      	cmp	r3, #8
 800ea6a:	d10b      	bne.n	800ea84 <_printf_i+0x14c>
 800ea6c:	6823      	ldr	r3, [r4, #0]
 800ea6e:	07de      	lsls	r6, r3, #31
 800ea70:	d508      	bpl.n	800ea84 <_printf_i+0x14c>
 800ea72:	6923      	ldr	r3, [r4, #16]
 800ea74:	6861      	ldr	r1, [r4, #4]
 800ea76:	4299      	cmp	r1, r3
 800ea78:	bfde      	ittt	le
 800ea7a:	2330      	movle	r3, #48	; 0x30
 800ea7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ea80:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ea84:	1b52      	subs	r2, r2, r5
 800ea86:	6122      	str	r2, [r4, #16]
 800ea88:	f8cd a000 	str.w	sl, [sp]
 800ea8c:	464b      	mov	r3, r9
 800ea8e:	aa03      	add	r2, sp, #12
 800ea90:	4621      	mov	r1, r4
 800ea92:	4640      	mov	r0, r8
 800ea94:	f7ff fee2 	bl	800e85c <_printf_common>
 800ea98:	3001      	adds	r0, #1
 800ea9a:	d14c      	bne.n	800eb36 <_printf_i+0x1fe>
 800ea9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eaa0:	b004      	add	sp, #16
 800eaa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eaa6:	4835      	ldr	r0, [pc, #212]	; (800eb7c <_printf_i+0x244>)
 800eaa8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800eaac:	6829      	ldr	r1, [r5, #0]
 800eaae:	6823      	ldr	r3, [r4, #0]
 800eab0:	f851 6b04 	ldr.w	r6, [r1], #4
 800eab4:	6029      	str	r1, [r5, #0]
 800eab6:	061d      	lsls	r5, r3, #24
 800eab8:	d514      	bpl.n	800eae4 <_printf_i+0x1ac>
 800eaba:	07df      	lsls	r7, r3, #31
 800eabc:	bf44      	itt	mi
 800eabe:	f043 0320 	orrmi.w	r3, r3, #32
 800eac2:	6023      	strmi	r3, [r4, #0]
 800eac4:	b91e      	cbnz	r6, 800eace <_printf_i+0x196>
 800eac6:	6823      	ldr	r3, [r4, #0]
 800eac8:	f023 0320 	bic.w	r3, r3, #32
 800eacc:	6023      	str	r3, [r4, #0]
 800eace:	2310      	movs	r3, #16
 800ead0:	e7b0      	b.n	800ea34 <_printf_i+0xfc>
 800ead2:	6823      	ldr	r3, [r4, #0]
 800ead4:	f043 0320 	orr.w	r3, r3, #32
 800ead8:	6023      	str	r3, [r4, #0]
 800eada:	2378      	movs	r3, #120	; 0x78
 800eadc:	4828      	ldr	r0, [pc, #160]	; (800eb80 <_printf_i+0x248>)
 800eade:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800eae2:	e7e3      	b.n	800eaac <_printf_i+0x174>
 800eae4:	0659      	lsls	r1, r3, #25
 800eae6:	bf48      	it	mi
 800eae8:	b2b6      	uxthmi	r6, r6
 800eaea:	e7e6      	b.n	800eaba <_printf_i+0x182>
 800eaec:	4615      	mov	r5, r2
 800eaee:	e7bb      	b.n	800ea68 <_printf_i+0x130>
 800eaf0:	682b      	ldr	r3, [r5, #0]
 800eaf2:	6826      	ldr	r6, [r4, #0]
 800eaf4:	6961      	ldr	r1, [r4, #20]
 800eaf6:	1d18      	adds	r0, r3, #4
 800eaf8:	6028      	str	r0, [r5, #0]
 800eafa:	0635      	lsls	r5, r6, #24
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	d501      	bpl.n	800eb04 <_printf_i+0x1cc>
 800eb00:	6019      	str	r1, [r3, #0]
 800eb02:	e002      	b.n	800eb0a <_printf_i+0x1d2>
 800eb04:	0670      	lsls	r0, r6, #25
 800eb06:	d5fb      	bpl.n	800eb00 <_printf_i+0x1c8>
 800eb08:	8019      	strh	r1, [r3, #0]
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	6123      	str	r3, [r4, #16]
 800eb0e:	4615      	mov	r5, r2
 800eb10:	e7ba      	b.n	800ea88 <_printf_i+0x150>
 800eb12:	682b      	ldr	r3, [r5, #0]
 800eb14:	1d1a      	adds	r2, r3, #4
 800eb16:	602a      	str	r2, [r5, #0]
 800eb18:	681d      	ldr	r5, [r3, #0]
 800eb1a:	6862      	ldr	r2, [r4, #4]
 800eb1c:	2100      	movs	r1, #0
 800eb1e:	4628      	mov	r0, r5
 800eb20:	f7f1 fb5e 	bl	80001e0 <memchr>
 800eb24:	b108      	cbz	r0, 800eb2a <_printf_i+0x1f2>
 800eb26:	1b40      	subs	r0, r0, r5
 800eb28:	6060      	str	r0, [r4, #4]
 800eb2a:	6863      	ldr	r3, [r4, #4]
 800eb2c:	6123      	str	r3, [r4, #16]
 800eb2e:	2300      	movs	r3, #0
 800eb30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb34:	e7a8      	b.n	800ea88 <_printf_i+0x150>
 800eb36:	6923      	ldr	r3, [r4, #16]
 800eb38:	462a      	mov	r2, r5
 800eb3a:	4649      	mov	r1, r9
 800eb3c:	4640      	mov	r0, r8
 800eb3e:	47d0      	blx	sl
 800eb40:	3001      	adds	r0, #1
 800eb42:	d0ab      	beq.n	800ea9c <_printf_i+0x164>
 800eb44:	6823      	ldr	r3, [r4, #0]
 800eb46:	079b      	lsls	r3, r3, #30
 800eb48:	d413      	bmi.n	800eb72 <_printf_i+0x23a>
 800eb4a:	68e0      	ldr	r0, [r4, #12]
 800eb4c:	9b03      	ldr	r3, [sp, #12]
 800eb4e:	4298      	cmp	r0, r3
 800eb50:	bfb8      	it	lt
 800eb52:	4618      	movlt	r0, r3
 800eb54:	e7a4      	b.n	800eaa0 <_printf_i+0x168>
 800eb56:	2301      	movs	r3, #1
 800eb58:	4632      	mov	r2, r6
 800eb5a:	4649      	mov	r1, r9
 800eb5c:	4640      	mov	r0, r8
 800eb5e:	47d0      	blx	sl
 800eb60:	3001      	adds	r0, #1
 800eb62:	d09b      	beq.n	800ea9c <_printf_i+0x164>
 800eb64:	3501      	adds	r5, #1
 800eb66:	68e3      	ldr	r3, [r4, #12]
 800eb68:	9903      	ldr	r1, [sp, #12]
 800eb6a:	1a5b      	subs	r3, r3, r1
 800eb6c:	42ab      	cmp	r3, r5
 800eb6e:	dcf2      	bgt.n	800eb56 <_printf_i+0x21e>
 800eb70:	e7eb      	b.n	800eb4a <_printf_i+0x212>
 800eb72:	2500      	movs	r5, #0
 800eb74:	f104 0619 	add.w	r6, r4, #25
 800eb78:	e7f5      	b.n	800eb66 <_printf_i+0x22e>
 800eb7a:	bf00      	nop
 800eb7c:	08013f6a 	.word	0x08013f6a
 800eb80:	08013f7b 	.word	0x08013f7b

0800eb84 <siprintf>:
 800eb84:	b40e      	push	{r1, r2, r3}
 800eb86:	b500      	push	{lr}
 800eb88:	b09c      	sub	sp, #112	; 0x70
 800eb8a:	ab1d      	add	r3, sp, #116	; 0x74
 800eb8c:	9002      	str	r0, [sp, #8]
 800eb8e:	9006      	str	r0, [sp, #24]
 800eb90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800eb94:	4809      	ldr	r0, [pc, #36]	; (800ebbc <siprintf+0x38>)
 800eb96:	9107      	str	r1, [sp, #28]
 800eb98:	9104      	str	r1, [sp, #16]
 800eb9a:	4909      	ldr	r1, [pc, #36]	; (800ebc0 <siprintf+0x3c>)
 800eb9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800eba0:	9105      	str	r1, [sp, #20]
 800eba2:	6800      	ldr	r0, [r0, #0]
 800eba4:	9301      	str	r3, [sp, #4]
 800eba6:	a902      	add	r1, sp, #8
 800eba8:	f002 ff5a 	bl	8011a60 <_svfiprintf_r>
 800ebac:	9b02      	ldr	r3, [sp, #8]
 800ebae:	2200      	movs	r2, #0
 800ebb0:	701a      	strb	r2, [r3, #0]
 800ebb2:	b01c      	add	sp, #112	; 0x70
 800ebb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ebb8:	b003      	add	sp, #12
 800ebba:	4770      	bx	lr
 800ebbc:	2000022c 	.word	0x2000022c
 800ebc0:	ffff0208 	.word	0xffff0208

0800ebc4 <strchr>:
 800ebc4:	b2c9      	uxtb	r1, r1
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ebcc:	b11a      	cbz	r2, 800ebd6 <strchr+0x12>
 800ebce:	428a      	cmp	r2, r1
 800ebd0:	d1f9      	bne.n	800ebc6 <strchr+0x2>
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	4770      	bx	lr
 800ebd6:	2900      	cmp	r1, #0
 800ebd8:	bf18      	it	ne
 800ebda:	2300      	movne	r3, #0
 800ebdc:	e7f9      	b.n	800ebd2 <strchr+0xe>

0800ebde <strncmp>:
 800ebde:	b510      	push	{r4, lr}
 800ebe0:	b17a      	cbz	r2, 800ec02 <strncmp+0x24>
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	3901      	subs	r1, #1
 800ebe6:	1884      	adds	r4, r0, r2
 800ebe8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ebec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ebf0:	4290      	cmp	r0, r2
 800ebf2:	d101      	bne.n	800ebf8 <strncmp+0x1a>
 800ebf4:	42a3      	cmp	r3, r4
 800ebf6:	d101      	bne.n	800ebfc <strncmp+0x1e>
 800ebf8:	1a80      	subs	r0, r0, r2
 800ebfa:	bd10      	pop	{r4, pc}
 800ebfc:	2800      	cmp	r0, #0
 800ebfe:	d1f3      	bne.n	800ebe8 <strncmp+0xa>
 800ec00:	e7fa      	b.n	800ebf8 <strncmp+0x1a>
 800ec02:	4610      	mov	r0, r2
 800ec04:	e7f9      	b.n	800ebfa <strncmp+0x1c>

0800ec06 <strstr>:
 800ec06:	780a      	ldrb	r2, [r1, #0]
 800ec08:	b570      	push	{r4, r5, r6, lr}
 800ec0a:	b96a      	cbnz	r2, 800ec28 <strstr+0x22>
 800ec0c:	bd70      	pop	{r4, r5, r6, pc}
 800ec0e:	429a      	cmp	r2, r3
 800ec10:	d109      	bne.n	800ec26 <strstr+0x20>
 800ec12:	460c      	mov	r4, r1
 800ec14:	4605      	mov	r5, r0
 800ec16:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d0f6      	beq.n	800ec0c <strstr+0x6>
 800ec1e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800ec22:	429e      	cmp	r6, r3
 800ec24:	d0f7      	beq.n	800ec16 <strstr+0x10>
 800ec26:	3001      	adds	r0, #1
 800ec28:	7803      	ldrb	r3, [r0, #0]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d1ef      	bne.n	800ec0e <strstr+0x8>
 800ec2e:	4618      	mov	r0, r3
 800ec30:	e7ec      	b.n	800ec0c <strstr+0x6>

0800ec32 <sulp>:
 800ec32:	b570      	push	{r4, r5, r6, lr}
 800ec34:	4604      	mov	r4, r0
 800ec36:	460d      	mov	r5, r1
 800ec38:	ec45 4b10 	vmov	d0, r4, r5
 800ec3c:	4616      	mov	r6, r2
 800ec3e:	f002 fc6d 	bl	801151c <__ulp>
 800ec42:	ec51 0b10 	vmov	r0, r1, d0
 800ec46:	b17e      	cbz	r6, 800ec68 <sulp+0x36>
 800ec48:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ec4c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	dd09      	ble.n	800ec68 <sulp+0x36>
 800ec54:	051b      	lsls	r3, r3, #20
 800ec56:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ec5a:	2400      	movs	r4, #0
 800ec5c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ec60:	4622      	mov	r2, r4
 800ec62:	462b      	mov	r3, r5
 800ec64:	f7f1 fcc8 	bl	80005f8 <__aeabi_dmul>
 800ec68:	bd70      	pop	{r4, r5, r6, pc}
 800ec6a:	0000      	movs	r0, r0
 800ec6c:	0000      	movs	r0, r0
	...

0800ec70 <_strtod_l>:
 800ec70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec74:	ed2d 8b02 	vpush	{d8}
 800ec78:	b09d      	sub	sp, #116	; 0x74
 800ec7a:	461f      	mov	r7, r3
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	9318      	str	r3, [sp, #96]	; 0x60
 800ec80:	4ba2      	ldr	r3, [pc, #648]	; (800ef0c <_strtod_l+0x29c>)
 800ec82:	9213      	str	r2, [sp, #76]	; 0x4c
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	9305      	str	r3, [sp, #20]
 800ec88:	4604      	mov	r4, r0
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	4688      	mov	r8, r1
 800ec8e:	f7f1 fa9f 	bl	80001d0 <strlen>
 800ec92:	f04f 0a00 	mov.w	sl, #0
 800ec96:	4605      	mov	r5, r0
 800ec98:	f04f 0b00 	mov.w	fp, #0
 800ec9c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800eca0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eca2:	781a      	ldrb	r2, [r3, #0]
 800eca4:	2a2b      	cmp	r2, #43	; 0x2b
 800eca6:	d04e      	beq.n	800ed46 <_strtod_l+0xd6>
 800eca8:	d83b      	bhi.n	800ed22 <_strtod_l+0xb2>
 800ecaa:	2a0d      	cmp	r2, #13
 800ecac:	d834      	bhi.n	800ed18 <_strtod_l+0xa8>
 800ecae:	2a08      	cmp	r2, #8
 800ecb0:	d834      	bhi.n	800ed1c <_strtod_l+0xac>
 800ecb2:	2a00      	cmp	r2, #0
 800ecb4:	d03e      	beq.n	800ed34 <_strtod_l+0xc4>
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	930a      	str	r3, [sp, #40]	; 0x28
 800ecba:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ecbc:	7833      	ldrb	r3, [r6, #0]
 800ecbe:	2b30      	cmp	r3, #48	; 0x30
 800ecc0:	f040 80b0 	bne.w	800ee24 <_strtod_l+0x1b4>
 800ecc4:	7873      	ldrb	r3, [r6, #1]
 800ecc6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ecca:	2b58      	cmp	r3, #88	; 0x58
 800eccc:	d168      	bne.n	800eda0 <_strtod_l+0x130>
 800ecce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ecd0:	9301      	str	r3, [sp, #4]
 800ecd2:	ab18      	add	r3, sp, #96	; 0x60
 800ecd4:	9702      	str	r7, [sp, #8]
 800ecd6:	9300      	str	r3, [sp, #0]
 800ecd8:	4a8d      	ldr	r2, [pc, #564]	; (800ef10 <_strtod_l+0x2a0>)
 800ecda:	ab19      	add	r3, sp, #100	; 0x64
 800ecdc:	a917      	add	r1, sp, #92	; 0x5c
 800ecde:	4620      	mov	r0, r4
 800ece0:	f001 fd80 	bl	80107e4 <__gethex>
 800ece4:	f010 0707 	ands.w	r7, r0, #7
 800ece8:	4605      	mov	r5, r0
 800ecea:	d005      	beq.n	800ecf8 <_strtod_l+0x88>
 800ecec:	2f06      	cmp	r7, #6
 800ecee:	d12c      	bne.n	800ed4a <_strtod_l+0xda>
 800ecf0:	3601      	adds	r6, #1
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	9617      	str	r6, [sp, #92]	; 0x5c
 800ecf6:	930a      	str	r3, [sp, #40]	; 0x28
 800ecf8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	f040 8590 	bne.w	800f820 <_strtod_l+0xbb0>
 800ed00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed02:	b1eb      	cbz	r3, 800ed40 <_strtod_l+0xd0>
 800ed04:	4652      	mov	r2, sl
 800ed06:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ed0a:	ec43 2b10 	vmov	d0, r2, r3
 800ed0e:	b01d      	add	sp, #116	; 0x74
 800ed10:	ecbd 8b02 	vpop	{d8}
 800ed14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed18:	2a20      	cmp	r2, #32
 800ed1a:	d1cc      	bne.n	800ecb6 <_strtod_l+0x46>
 800ed1c:	3301      	adds	r3, #1
 800ed1e:	9317      	str	r3, [sp, #92]	; 0x5c
 800ed20:	e7be      	b.n	800eca0 <_strtod_l+0x30>
 800ed22:	2a2d      	cmp	r2, #45	; 0x2d
 800ed24:	d1c7      	bne.n	800ecb6 <_strtod_l+0x46>
 800ed26:	2201      	movs	r2, #1
 800ed28:	920a      	str	r2, [sp, #40]	; 0x28
 800ed2a:	1c5a      	adds	r2, r3, #1
 800ed2c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ed2e:	785b      	ldrb	r3, [r3, #1]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d1c2      	bne.n	800ecba <_strtod_l+0x4a>
 800ed34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ed36:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	f040 856e 	bne.w	800f81c <_strtod_l+0xbac>
 800ed40:	4652      	mov	r2, sl
 800ed42:	465b      	mov	r3, fp
 800ed44:	e7e1      	b.n	800ed0a <_strtod_l+0x9a>
 800ed46:	2200      	movs	r2, #0
 800ed48:	e7ee      	b.n	800ed28 <_strtod_l+0xb8>
 800ed4a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ed4c:	b13a      	cbz	r2, 800ed5e <_strtod_l+0xee>
 800ed4e:	2135      	movs	r1, #53	; 0x35
 800ed50:	a81a      	add	r0, sp, #104	; 0x68
 800ed52:	f002 fcee 	bl	8011732 <__copybits>
 800ed56:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ed58:	4620      	mov	r0, r4
 800ed5a:	f002 f8ad 	bl	8010eb8 <_Bfree>
 800ed5e:	3f01      	subs	r7, #1
 800ed60:	2f04      	cmp	r7, #4
 800ed62:	d806      	bhi.n	800ed72 <_strtod_l+0x102>
 800ed64:	e8df f007 	tbb	[pc, r7]
 800ed68:	1714030a 	.word	0x1714030a
 800ed6c:	0a          	.byte	0x0a
 800ed6d:	00          	.byte	0x00
 800ed6e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800ed72:	0728      	lsls	r0, r5, #28
 800ed74:	d5c0      	bpl.n	800ecf8 <_strtod_l+0x88>
 800ed76:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ed7a:	e7bd      	b.n	800ecf8 <_strtod_l+0x88>
 800ed7c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800ed80:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ed82:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ed86:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ed8a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ed8e:	e7f0      	b.n	800ed72 <_strtod_l+0x102>
 800ed90:	f8df b180 	ldr.w	fp, [pc, #384]	; 800ef14 <_strtod_l+0x2a4>
 800ed94:	e7ed      	b.n	800ed72 <_strtod_l+0x102>
 800ed96:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ed9a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800ed9e:	e7e8      	b.n	800ed72 <_strtod_l+0x102>
 800eda0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eda2:	1c5a      	adds	r2, r3, #1
 800eda4:	9217      	str	r2, [sp, #92]	; 0x5c
 800eda6:	785b      	ldrb	r3, [r3, #1]
 800eda8:	2b30      	cmp	r3, #48	; 0x30
 800edaa:	d0f9      	beq.n	800eda0 <_strtod_l+0x130>
 800edac:	2b00      	cmp	r3, #0
 800edae:	d0a3      	beq.n	800ecf8 <_strtod_l+0x88>
 800edb0:	2301      	movs	r3, #1
 800edb2:	f04f 0900 	mov.w	r9, #0
 800edb6:	9304      	str	r3, [sp, #16]
 800edb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800edba:	9308      	str	r3, [sp, #32]
 800edbc:	f8cd 901c 	str.w	r9, [sp, #28]
 800edc0:	464f      	mov	r7, r9
 800edc2:	220a      	movs	r2, #10
 800edc4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800edc6:	7806      	ldrb	r6, [r0, #0]
 800edc8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800edcc:	b2d9      	uxtb	r1, r3
 800edce:	2909      	cmp	r1, #9
 800edd0:	d92a      	bls.n	800ee28 <_strtod_l+0x1b8>
 800edd2:	9905      	ldr	r1, [sp, #20]
 800edd4:	462a      	mov	r2, r5
 800edd6:	f7ff ff02 	bl	800ebde <strncmp>
 800edda:	b398      	cbz	r0, 800ee44 <_strtod_l+0x1d4>
 800eddc:	2000      	movs	r0, #0
 800edde:	4632      	mov	r2, r6
 800ede0:	463d      	mov	r5, r7
 800ede2:	9005      	str	r0, [sp, #20]
 800ede4:	4603      	mov	r3, r0
 800ede6:	2a65      	cmp	r2, #101	; 0x65
 800ede8:	d001      	beq.n	800edee <_strtod_l+0x17e>
 800edea:	2a45      	cmp	r2, #69	; 0x45
 800edec:	d118      	bne.n	800ee20 <_strtod_l+0x1b0>
 800edee:	b91d      	cbnz	r5, 800edf8 <_strtod_l+0x188>
 800edf0:	9a04      	ldr	r2, [sp, #16]
 800edf2:	4302      	orrs	r2, r0
 800edf4:	d09e      	beq.n	800ed34 <_strtod_l+0xc4>
 800edf6:	2500      	movs	r5, #0
 800edf8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800edfc:	f108 0201 	add.w	r2, r8, #1
 800ee00:	9217      	str	r2, [sp, #92]	; 0x5c
 800ee02:	f898 2001 	ldrb.w	r2, [r8, #1]
 800ee06:	2a2b      	cmp	r2, #43	; 0x2b
 800ee08:	d075      	beq.n	800eef6 <_strtod_l+0x286>
 800ee0a:	2a2d      	cmp	r2, #45	; 0x2d
 800ee0c:	d07b      	beq.n	800ef06 <_strtod_l+0x296>
 800ee0e:	f04f 0c00 	mov.w	ip, #0
 800ee12:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ee16:	2909      	cmp	r1, #9
 800ee18:	f240 8082 	bls.w	800ef20 <_strtod_l+0x2b0>
 800ee1c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ee20:	2600      	movs	r6, #0
 800ee22:	e09d      	b.n	800ef60 <_strtod_l+0x2f0>
 800ee24:	2300      	movs	r3, #0
 800ee26:	e7c4      	b.n	800edb2 <_strtod_l+0x142>
 800ee28:	2f08      	cmp	r7, #8
 800ee2a:	bfd8      	it	le
 800ee2c:	9907      	ldrle	r1, [sp, #28]
 800ee2e:	f100 0001 	add.w	r0, r0, #1
 800ee32:	bfda      	itte	le
 800ee34:	fb02 3301 	mlale	r3, r2, r1, r3
 800ee38:	9307      	strle	r3, [sp, #28]
 800ee3a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800ee3e:	3701      	adds	r7, #1
 800ee40:	9017      	str	r0, [sp, #92]	; 0x5c
 800ee42:	e7bf      	b.n	800edc4 <_strtod_l+0x154>
 800ee44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ee46:	195a      	adds	r2, r3, r5
 800ee48:	9217      	str	r2, [sp, #92]	; 0x5c
 800ee4a:	5d5a      	ldrb	r2, [r3, r5]
 800ee4c:	2f00      	cmp	r7, #0
 800ee4e:	d037      	beq.n	800eec0 <_strtod_l+0x250>
 800ee50:	9005      	str	r0, [sp, #20]
 800ee52:	463d      	mov	r5, r7
 800ee54:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ee58:	2b09      	cmp	r3, #9
 800ee5a:	d912      	bls.n	800ee82 <_strtod_l+0x212>
 800ee5c:	2301      	movs	r3, #1
 800ee5e:	e7c2      	b.n	800ede6 <_strtod_l+0x176>
 800ee60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ee62:	1c5a      	adds	r2, r3, #1
 800ee64:	9217      	str	r2, [sp, #92]	; 0x5c
 800ee66:	785a      	ldrb	r2, [r3, #1]
 800ee68:	3001      	adds	r0, #1
 800ee6a:	2a30      	cmp	r2, #48	; 0x30
 800ee6c:	d0f8      	beq.n	800ee60 <_strtod_l+0x1f0>
 800ee6e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ee72:	2b08      	cmp	r3, #8
 800ee74:	f200 84d9 	bhi.w	800f82a <_strtod_l+0xbba>
 800ee78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ee7a:	9005      	str	r0, [sp, #20]
 800ee7c:	2000      	movs	r0, #0
 800ee7e:	9308      	str	r3, [sp, #32]
 800ee80:	4605      	mov	r5, r0
 800ee82:	3a30      	subs	r2, #48	; 0x30
 800ee84:	f100 0301 	add.w	r3, r0, #1
 800ee88:	d014      	beq.n	800eeb4 <_strtod_l+0x244>
 800ee8a:	9905      	ldr	r1, [sp, #20]
 800ee8c:	4419      	add	r1, r3
 800ee8e:	9105      	str	r1, [sp, #20]
 800ee90:	462b      	mov	r3, r5
 800ee92:	eb00 0e05 	add.w	lr, r0, r5
 800ee96:	210a      	movs	r1, #10
 800ee98:	4573      	cmp	r3, lr
 800ee9a:	d113      	bne.n	800eec4 <_strtod_l+0x254>
 800ee9c:	182b      	adds	r3, r5, r0
 800ee9e:	2b08      	cmp	r3, #8
 800eea0:	f105 0501 	add.w	r5, r5, #1
 800eea4:	4405      	add	r5, r0
 800eea6:	dc1c      	bgt.n	800eee2 <_strtod_l+0x272>
 800eea8:	9907      	ldr	r1, [sp, #28]
 800eeaa:	230a      	movs	r3, #10
 800eeac:	fb03 2301 	mla	r3, r3, r1, r2
 800eeb0:	9307      	str	r3, [sp, #28]
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800eeb6:	1c51      	adds	r1, r2, #1
 800eeb8:	9117      	str	r1, [sp, #92]	; 0x5c
 800eeba:	7852      	ldrb	r2, [r2, #1]
 800eebc:	4618      	mov	r0, r3
 800eebe:	e7c9      	b.n	800ee54 <_strtod_l+0x1e4>
 800eec0:	4638      	mov	r0, r7
 800eec2:	e7d2      	b.n	800ee6a <_strtod_l+0x1fa>
 800eec4:	2b08      	cmp	r3, #8
 800eec6:	dc04      	bgt.n	800eed2 <_strtod_l+0x262>
 800eec8:	9e07      	ldr	r6, [sp, #28]
 800eeca:	434e      	muls	r6, r1
 800eecc:	9607      	str	r6, [sp, #28]
 800eece:	3301      	adds	r3, #1
 800eed0:	e7e2      	b.n	800ee98 <_strtod_l+0x228>
 800eed2:	f103 0c01 	add.w	ip, r3, #1
 800eed6:	f1bc 0f10 	cmp.w	ip, #16
 800eeda:	bfd8      	it	le
 800eedc:	fb01 f909 	mulle.w	r9, r1, r9
 800eee0:	e7f5      	b.n	800eece <_strtod_l+0x25e>
 800eee2:	2d10      	cmp	r5, #16
 800eee4:	bfdc      	itt	le
 800eee6:	230a      	movle	r3, #10
 800eee8:	fb03 2909 	mlale	r9, r3, r9, r2
 800eeec:	e7e1      	b.n	800eeb2 <_strtod_l+0x242>
 800eeee:	2300      	movs	r3, #0
 800eef0:	9305      	str	r3, [sp, #20]
 800eef2:	2301      	movs	r3, #1
 800eef4:	e77c      	b.n	800edf0 <_strtod_l+0x180>
 800eef6:	f04f 0c00 	mov.w	ip, #0
 800eefa:	f108 0202 	add.w	r2, r8, #2
 800eefe:	9217      	str	r2, [sp, #92]	; 0x5c
 800ef00:	f898 2002 	ldrb.w	r2, [r8, #2]
 800ef04:	e785      	b.n	800ee12 <_strtod_l+0x1a2>
 800ef06:	f04f 0c01 	mov.w	ip, #1
 800ef0a:	e7f6      	b.n	800eefa <_strtod_l+0x28a>
 800ef0c:	080140d8 	.word	0x080140d8
 800ef10:	08013f8c 	.word	0x08013f8c
 800ef14:	7ff00000 	.word	0x7ff00000
 800ef18:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ef1a:	1c51      	adds	r1, r2, #1
 800ef1c:	9117      	str	r1, [sp, #92]	; 0x5c
 800ef1e:	7852      	ldrb	r2, [r2, #1]
 800ef20:	2a30      	cmp	r2, #48	; 0x30
 800ef22:	d0f9      	beq.n	800ef18 <_strtod_l+0x2a8>
 800ef24:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ef28:	2908      	cmp	r1, #8
 800ef2a:	f63f af79 	bhi.w	800ee20 <_strtod_l+0x1b0>
 800ef2e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ef32:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ef34:	9206      	str	r2, [sp, #24]
 800ef36:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ef38:	1c51      	adds	r1, r2, #1
 800ef3a:	9117      	str	r1, [sp, #92]	; 0x5c
 800ef3c:	7852      	ldrb	r2, [r2, #1]
 800ef3e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800ef42:	2e09      	cmp	r6, #9
 800ef44:	d937      	bls.n	800efb6 <_strtod_l+0x346>
 800ef46:	9e06      	ldr	r6, [sp, #24]
 800ef48:	1b89      	subs	r1, r1, r6
 800ef4a:	2908      	cmp	r1, #8
 800ef4c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800ef50:	dc02      	bgt.n	800ef58 <_strtod_l+0x2e8>
 800ef52:	4576      	cmp	r6, lr
 800ef54:	bfa8      	it	ge
 800ef56:	4676      	movge	r6, lr
 800ef58:	f1bc 0f00 	cmp.w	ip, #0
 800ef5c:	d000      	beq.n	800ef60 <_strtod_l+0x2f0>
 800ef5e:	4276      	negs	r6, r6
 800ef60:	2d00      	cmp	r5, #0
 800ef62:	d14d      	bne.n	800f000 <_strtod_l+0x390>
 800ef64:	9904      	ldr	r1, [sp, #16]
 800ef66:	4301      	orrs	r1, r0
 800ef68:	f47f aec6 	bne.w	800ecf8 <_strtod_l+0x88>
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	f47f aee1 	bne.w	800ed34 <_strtod_l+0xc4>
 800ef72:	2a69      	cmp	r2, #105	; 0x69
 800ef74:	d027      	beq.n	800efc6 <_strtod_l+0x356>
 800ef76:	dc24      	bgt.n	800efc2 <_strtod_l+0x352>
 800ef78:	2a49      	cmp	r2, #73	; 0x49
 800ef7a:	d024      	beq.n	800efc6 <_strtod_l+0x356>
 800ef7c:	2a4e      	cmp	r2, #78	; 0x4e
 800ef7e:	f47f aed9 	bne.w	800ed34 <_strtod_l+0xc4>
 800ef82:	499f      	ldr	r1, [pc, #636]	; (800f200 <_strtod_l+0x590>)
 800ef84:	a817      	add	r0, sp, #92	; 0x5c
 800ef86:	f001 fe85 	bl	8010c94 <__match>
 800ef8a:	2800      	cmp	r0, #0
 800ef8c:	f43f aed2 	beq.w	800ed34 <_strtod_l+0xc4>
 800ef90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ef92:	781b      	ldrb	r3, [r3, #0]
 800ef94:	2b28      	cmp	r3, #40	; 0x28
 800ef96:	d12d      	bne.n	800eff4 <_strtod_l+0x384>
 800ef98:	499a      	ldr	r1, [pc, #616]	; (800f204 <_strtod_l+0x594>)
 800ef9a:	aa1a      	add	r2, sp, #104	; 0x68
 800ef9c:	a817      	add	r0, sp, #92	; 0x5c
 800ef9e:	f001 fe8d 	bl	8010cbc <__hexnan>
 800efa2:	2805      	cmp	r0, #5
 800efa4:	d126      	bne.n	800eff4 <_strtod_l+0x384>
 800efa6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800efa8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800efac:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800efb0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800efb4:	e6a0      	b.n	800ecf8 <_strtod_l+0x88>
 800efb6:	210a      	movs	r1, #10
 800efb8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800efbc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800efc0:	e7b9      	b.n	800ef36 <_strtod_l+0x2c6>
 800efc2:	2a6e      	cmp	r2, #110	; 0x6e
 800efc4:	e7db      	b.n	800ef7e <_strtod_l+0x30e>
 800efc6:	4990      	ldr	r1, [pc, #576]	; (800f208 <_strtod_l+0x598>)
 800efc8:	a817      	add	r0, sp, #92	; 0x5c
 800efca:	f001 fe63 	bl	8010c94 <__match>
 800efce:	2800      	cmp	r0, #0
 800efd0:	f43f aeb0 	beq.w	800ed34 <_strtod_l+0xc4>
 800efd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800efd6:	498d      	ldr	r1, [pc, #564]	; (800f20c <_strtod_l+0x59c>)
 800efd8:	3b01      	subs	r3, #1
 800efda:	a817      	add	r0, sp, #92	; 0x5c
 800efdc:	9317      	str	r3, [sp, #92]	; 0x5c
 800efde:	f001 fe59 	bl	8010c94 <__match>
 800efe2:	b910      	cbnz	r0, 800efea <_strtod_l+0x37a>
 800efe4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800efe6:	3301      	adds	r3, #1
 800efe8:	9317      	str	r3, [sp, #92]	; 0x5c
 800efea:	f8df b230 	ldr.w	fp, [pc, #560]	; 800f21c <_strtod_l+0x5ac>
 800efee:	f04f 0a00 	mov.w	sl, #0
 800eff2:	e681      	b.n	800ecf8 <_strtod_l+0x88>
 800eff4:	4886      	ldr	r0, [pc, #536]	; (800f210 <_strtod_l+0x5a0>)
 800eff6:	f002 fe33 	bl	8011c60 <nan>
 800effa:	ec5b ab10 	vmov	sl, fp, d0
 800effe:	e67b      	b.n	800ecf8 <_strtod_l+0x88>
 800f000:	9b05      	ldr	r3, [sp, #20]
 800f002:	9807      	ldr	r0, [sp, #28]
 800f004:	1af3      	subs	r3, r6, r3
 800f006:	2f00      	cmp	r7, #0
 800f008:	bf08      	it	eq
 800f00a:	462f      	moveq	r7, r5
 800f00c:	2d10      	cmp	r5, #16
 800f00e:	9306      	str	r3, [sp, #24]
 800f010:	46a8      	mov	r8, r5
 800f012:	bfa8      	it	ge
 800f014:	f04f 0810 	movge.w	r8, #16
 800f018:	f7f1 fa74 	bl	8000504 <__aeabi_ui2d>
 800f01c:	2d09      	cmp	r5, #9
 800f01e:	4682      	mov	sl, r0
 800f020:	468b      	mov	fp, r1
 800f022:	dd13      	ble.n	800f04c <_strtod_l+0x3dc>
 800f024:	4b7b      	ldr	r3, [pc, #492]	; (800f214 <_strtod_l+0x5a4>)
 800f026:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f02a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f02e:	f7f1 fae3 	bl	80005f8 <__aeabi_dmul>
 800f032:	4682      	mov	sl, r0
 800f034:	4648      	mov	r0, r9
 800f036:	468b      	mov	fp, r1
 800f038:	f7f1 fa64 	bl	8000504 <__aeabi_ui2d>
 800f03c:	4602      	mov	r2, r0
 800f03e:	460b      	mov	r3, r1
 800f040:	4650      	mov	r0, sl
 800f042:	4659      	mov	r1, fp
 800f044:	f7f1 f922 	bl	800028c <__adddf3>
 800f048:	4682      	mov	sl, r0
 800f04a:	468b      	mov	fp, r1
 800f04c:	2d0f      	cmp	r5, #15
 800f04e:	dc38      	bgt.n	800f0c2 <_strtod_l+0x452>
 800f050:	9b06      	ldr	r3, [sp, #24]
 800f052:	2b00      	cmp	r3, #0
 800f054:	f43f ae50 	beq.w	800ecf8 <_strtod_l+0x88>
 800f058:	dd24      	ble.n	800f0a4 <_strtod_l+0x434>
 800f05a:	2b16      	cmp	r3, #22
 800f05c:	dc0b      	bgt.n	800f076 <_strtod_l+0x406>
 800f05e:	496d      	ldr	r1, [pc, #436]	; (800f214 <_strtod_l+0x5a4>)
 800f060:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f064:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f068:	4652      	mov	r2, sl
 800f06a:	465b      	mov	r3, fp
 800f06c:	f7f1 fac4 	bl	80005f8 <__aeabi_dmul>
 800f070:	4682      	mov	sl, r0
 800f072:	468b      	mov	fp, r1
 800f074:	e640      	b.n	800ecf8 <_strtod_l+0x88>
 800f076:	9a06      	ldr	r2, [sp, #24]
 800f078:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800f07c:	4293      	cmp	r3, r2
 800f07e:	db20      	blt.n	800f0c2 <_strtod_l+0x452>
 800f080:	4c64      	ldr	r4, [pc, #400]	; (800f214 <_strtod_l+0x5a4>)
 800f082:	f1c5 050f 	rsb	r5, r5, #15
 800f086:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f08a:	4652      	mov	r2, sl
 800f08c:	465b      	mov	r3, fp
 800f08e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f092:	f7f1 fab1 	bl	80005f8 <__aeabi_dmul>
 800f096:	9b06      	ldr	r3, [sp, #24]
 800f098:	1b5d      	subs	r5, r3, r5
 800f09a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f09e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f0a2:	e7e3      	b.n	800f06c <_strtod_l+0x3fc>
 800f0a4:	9b06      	ldr	r3, [sp, #24]
 800f0a6:	3316      	adds	r3, #22
 800f0a8:	db0b      	blt.n	800f0c2 <_strtod_l+0x452>
 800f0aa:	9b05      	ldr	r3, [sp, #20]
 800f0ac:	1b9e      	subs	r6, r3, r6
 800f0ae:	4b59      	ldr	r3, [pc, #356]	; (800f214 <_strtod_l+0x5a4>)
 800f0b0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800f0b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f0b8:	4650      	mov	r0, sl
 800f0ba:	4659      	mov	r1, fp
 800f0bc:	f7f1 fbc6 	bl	800084c <__aeabi_ddiv>
 800f0c0:	e7d6      	b.n	800f070 <_strtod_l+0x400>
 800f0c2:	9b06      	ldr	r3, [sp, #24]
 800f0c4:	eba5 0808 	sub.w	r8, r5, r8
 800f0c8:	4498      	add	r8, r3
 800f0ca:	f1b8 0f00 	cmp.w	r8, #0
 800f0ce:	dd74      	ble.n	800f1ba <_strtod_l+0x54a>
 800f0d0:	f018 030f 	ands.w	r3, r8, #15
 800f0d4:	d00a      	beq.n	800f0ec <_strtod_l+0x47c>
 800f0d6:	494f      	ldr	r1, [pc, #316]	; (800f214 <_strtod_l+0x5a4>)
 800f0d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f0dc:	4652      	mov	r2, sl
 800f0de:	465b      	mov	r3, fp
 800f0e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f0e4:	f7f1 fa88 	bl	80005f8 <__aeabi_dmul>
 800f0e8:	4682      	mov	sl, r0
 800f0ea:	468b      	mov	fp, r1
 800f0ec:	f038 080f 	bics.w	r8, r8, #15
 800f0f0:	d04f      	beq.n	800f192 <_strtod_l+0x522>
 800f0f2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800f0f6:	dd22      	ble.n	800f13e <_strtod_l+0x4ce>
 800f0f8:	2500      	movs	r5, #0
 800f0fa:	462e      	mov	r6, r5
 800f0fc:	9507      	str	r5, [sp, #28]
 800f0fe:	9505      	str	r5, [sp, #20]
 800f100:	2322      	movs	r3, #34	; 0x22
 800f102:	f8df b118 	ldr.w	fp, [pc, #280]	; 800f21c <_strtod_l+0x5ac>
 800f106:	6023      	str	r3, [r4, #0]
 800f108:	f04f 0a00 	mov.w	sl, #0
 800f10c:	9b07      	ldr	r3, [sp, #28]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	f43f adf2 	beq.w	800ecf8 <_strtod_l+0x88>
 800f114:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f116:	4620      	mov	r0, r4
 800f118:	f001 fece 	bl	8010eb8 <_Bfree>
 800f11c:	9905      	ldr	r1, [sp, #20]
 800f11e:	4620      	mov	r0, r4
 800f120:	f001 feca 	bl	8010eb8 <_Bfree>
 800f124:	4631      	mov	r1, r6
 800f126:	4620      	mov	r0, r4
 800f128:	f001 fec6 	bl	8010eb8 <_Bfree>
 800f12c:	9907      	ldr	r1, [sp, #28]
 800f12e:	4620      	mov	r0, r4
 800f130:	f001 fec2 	bl	8010eb8 <_Bfree>
 800f134:	4629      	mov	r1, r5
 800f136:	4620      	mov	r0, r4
 800f138:	f001 febe 	bl	8010eb8 <_Bfree>
 800f13c:	e5dc      	b.n	800ecf8 <_strtod_l+0x88>
 800f13e:	4b36      	ldr	r3, [pc, #216]	; (800f218 <_strtod_l+0x5a8>)
 800f140:	9304      	str	r3, [sp, #16]
 800f142:	2300      	movs	r3, #0
 800f144:	ea4f 1828 	mov.w	r8, r8, asr #4
 800f148:	4650      	mov	r0, sl
 800f14a:	4659      	mov	r1, fp
 800f14c:	4699      	mov	r9, r3
 800f14e:	f1b8 0f01 	cmp.w	r8, #1
 800f152:	dc21      	bgt.n	800f198 <_strtod_l+0x528>
 800f154:	b10b      	cbz	r3, 800f15a <_strtod_l+0x4ea>
 800f156:	4682      	mov	sl, r0
 800f158:	468b      	mov	fp, r1
 800f15a:	4b2f      	ldr	r3, [pc, #188]	; (800f218 <_strtod_l+0x5a8>)
 800f15c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800f160:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800f164:	4652      	mov	r2, sl
 800f166:	465b      	mov	r3, fp
 800f168:	e9d9 0100 	ldrd	r0, r1, [r9]
 800f16c:	f7f1 fa44 	bl	80005f8 <__aeabi_dmul>
 800f170:	4b2a      	ldr	r3, [pc, #168]	; (800f21c <_strtod_l+0x5ac>)
 800f172:	460a      	mov	r2, r1
 800f174:	400b      	ands	r3, r1
 800f176:	492a      	ldr	r1, [pc, #168]	; (800f220 <_strtod_l+0x5b0>)
 800f178:	428b      	cmp	r3, r1
 800f17a:	4682      	mov	sl, r0
 800f17c:	d8bc      	bhi.n	800f0f8 <_strtod_l+0x488>
 800f17e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f182:	428b      	cmp	r3, r1
 800f184:	bf86      	itte	hi
 800f186:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800f224 <_strtod_l+0x5b4>
 800f18a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800f18e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800f192:	2300      	movs	r3, #0
 800f194:	9304      	str	r3, [sp, #16]
 800f196:	e084      	b.n	800f2a2 <_strtod_l+0x632>
 800f198:	f018 0f01 	tst.w	r8, #1
 800f19c:	d005      	beq.n	800f1aa <_strtod_l+0x53a>
 800f19e:	9b04      	ldr	r3, [sp, #16]
 800f1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1a4:	f7f1 fa28 	bl	80005f8 <__aeabi_dmul>
 800f1a8:	2301      	movs	r3, #1
 800f1aa:	9a04      	ldr	r2, [sp, #16]
 800f1ac:	3208      	adds	r2, #8
 800f1ae:	f109 0901 	add.w	r9, r9, #1
 800f1b2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f1b6:	9204      	str	r2, [sp, #16]
 800f1b8:	e7c9      	b.n	800f14e <_strtod_l+0x4de>
 800f1ba:	d0ea      	beq.n	800f192 <_strtod_l+0x522>
 800f1bc:	f1c8 0800 	rsb	r8, r8, #0
 800f1c0:	f018 020f 	ands.w	r2, r8, #15
 800f1c4:	d00a      	beq.n	800f1dc <_strtod_l+0x56c>
 800f1c6:	4b13      	ldr	r3, [pc, #76]	; (800f214 <_strtod_l+0x5a4>)
 800f1c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f1cc:	4650      	mov	r0, sl
 800f1ce:	4659      	mov	r1, fp
 800f1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1d4:	f7f1 fb3a 	bl	800084c <__aeabi_ddiv>
 800f1d8:	4682      	mov	sl, r0
 800f1da:	468b      	mov	fp, r1
 800f1dc:	ea5f 1828 	movs.w	r8, r8, asr #4
 800f1e0:	d0d7      	beq.n	800f192 <_strtod_l+0x522>
 800f1e2:	f1b8 0f1f 	cmp.w	r8, #31
 800f1e6:	dd1f      	ble.n	800f228 <_strtod_l+0x5b8>
 800f1e8:	2500      	movs	r5, #0
 800f1ea:	462e      	mov	r6, r5
 800f1ec:	9507      	str	r5, [sp, #28]
 800f1ee:	9505      	str	r5, [sp, #20]
 800f1f0:	2322      	movs	r3, #34	; 0x22
 800f1f2:	f04f 0a00 	mov.w	sl, #0
 800f1f6:	f04f 0b00 	mov.w	fp, #0
 800f1fa:	6023      	str	r3, [r4, #0]
 800f1fc:	e786      	b.n	800f10c <_strtod_l+0x49c>
 800f1fe:	bf00      	nop
 800f200:	08013f65 	.word	0x08013f65
 800f204:	08013fa0 	.word	0x08013fa0
 800f208:	08013f5d 	.word	0x08013f5d
 800f20c:	08013fe3 	.word	0x08013fe3
 800f210:	08014290 	.word	0x08014290
 800f214:	08014170 	.word	0x08014170
 800f218:	08014148 	.word	0x08014148
 800f21c:	7ff00000 	.word	0x7ff00000
 800f220:	7ca00000 	.word	0x7ca00000
 800f224:	7fefffff 	.word	0x7fefffff
 800f228:	f018 0310 	ands.w	r3, r8, #16
 800f22c:	bf18      	it	ne
 800f22e:	236a      	movne	r3, #106	; 0x6a
 800f230:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800f5e0 <_strtod_l+0x970>
 800f234:	9304      	str	r3, [sp, #16]
 800f236:	4650      	mov	r0, sl
 800f238:	4659      	mov	r1, fp
 800f23a:	2300      	movs	r3, #0
 800f23c:	f018 0f01 	tst.w	r8, #1
 800f240:	d004      	beq.n	800f24c <_strtod_l+0x5dc>
 800f242:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f246:	f7f1 f9d7 	bl	80005f8 <__aeabi_dmul>
 800f24a:	2301      	movs	r3, #1
 800f24c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800f250:	f109 0908 	add.w	r9, r9, #8
 800f254:	d1f2      	bne.n	800f23c <_strtod_l+0x5cc>
 800f256:	b10b      	cbz	r3, 800f25c <_strtod_l+0x5ec>
 800f258:	4682      	mov	sl, r0
 800f25a:	468b      	mov	fp, r1
 800f25c:	9b04      	ldr	r3, [sp, #16]
 800f25e:	b1c3      	cbz	r3, 800f292 <_strtod_l+0x622>
 800f260:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f264:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f268:	2b00      	cmp	r3, #0
 800f26a:	4659      	mov	r1, fp
 800f26c:	dd11      	ble.n	800f292 <_strtod_l+0x622>
 800f26e:	2b1f      	cmp	r3, #31
 800f270:	f340 8124 	ble.w	800f4bc <_strtod_l+0x84c>
 800f274:	2b34      	cmp	r3, #52	; 0x34
 800f276:	bfde      	ittt	le
 800f278:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800f27c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800f280:	fa03 f202 	lslle.w	r2, r3, r2
 800f284:	f04f 0a00 	mov.w	sl, #0
 800f288:	bfcc      	ite	gt
 800f28a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800f28e:	ea02 0b01 	andle.w	fp, r2, r1
 800f292:	2200      	movs	r2, #0
 800f294:	2300      	movs	r3, #0
 800f296:	4650      	mov	r0, sl
 800f298:	4659      	mov	r1, fp
 800f29a:	f7f1 fc15 	bl	8000ac8 <__aeabi_dcmpeq>
 800f29e:	2800      	cmp	r0, #0
 800f2a0:	d1a2      	bne.n	800f1e8 <_strtod_l+0x578>
 800f2a2:	9b07      	ldr	r3, [sp, #28]
 800f2a4:	9300      	str	r3, [sp, #0]
 800f2a6:	9908      	ldr	r1, [sp, #32]
 800f2a8:	462b      	mov	r3, r5
 800f2aa:	463a      	mov	r2, r7
 800f2ac:	4620      	mov	r0, r4
 800f2ae:	f001 fe6b 	bl	8010f88 <__s2b>
 800f2b2:	9007      	str	r0, [sp, #28]
 800f2b4:	2800      	cmp	r0, #0
 800f2b6:	f43f af1f 	beq.w	800f0f8 <_strtod_l+0x488>
 800f2ba:	9b05      	ldr	r3, [sp, #20]
 800f2bc:	1b9e      	subs	r6, r3, r6
 800f2be:	9b06      	ldr	r3, [sp, #24]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	bfb4      	ite	lt
 800f2c4:	4633      	movlt	r3, r6
 800f2c6:	2300      	movge	r3, #0
 800f2c8:	930c      	str	r3, [sp, #48]	; 0x30
 800f2ca:	9b06      	ldr	r3, [sp, #24]
 800f2cc:	2500      	movs	r5, #0
 800f2ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f2d2:	9312      	str	r3, [sp, #72]	; 0x48
 800f2d4:	462e      	mov	r6, r5
 800f2d6:	9b07      	ldr	r3, [sp, #28]
 800f2d8:	4620      	mov	r0, r4
 800f2da:	6859      	ldr	r1, [r3, #4]
 800f2dc:	f001 fdac 	bl	8010e38 <_Balloc>
 800f2e0:	9005      	str	r0, [sp, #20]
 800f2e2:	2800      	cmp	r0, #0
 800f2e4:	f43f af0c 	beq.w	800f100 <_strtod_l+0x490>
 800f2e8:	9b07      	ldr	r3, [sp, #28]
 800f2ea:	691a      	ldr	r2, [r3, #16]
 800f2ec:	3202      	adds	r2, #2
 800f2ee:	f103 010c 	add.w	r1, r3, #12
 800f2f2:	0092      	lsls	r2, r2, #2
 800f2f4:	300c      	adds	r0, #12
 800f2f6:	f7fe ffc5 	bl	800e284 <memcpy>
 800f2fa:	ec4b ab10 	vmov	d0, sl, fp
 800f2fe:	aa1a      	add	r2, sp, #104	; 0x68
 800f300:	a919      	add	r1, sp, #100	; 0x64
 800f302:	4620      	mov	r0, r4
 800f304:	f002 f986 	bl	8011614 <__d2b>
 800f308:	ec4b ab18 	vmov	d8, sl, fp
 800f30c:	9018      	str	r0, [sp, #96]	; 0x60
 800f30e:	2800      	cmp	r0, #0
 800f310:	f43f aef6 	beq.w	800f100 <_strtod_l+0x490>
 800f314:	2101      	movs	r1, #1
 800f316:	4620      	mov	r0, r4
 800f318:	f001 fed0 	bl	80110bc <__i2b>
 800f31c:	4606      	mov	r6, r0
 800f31e:	2800      	cmp	r0, #0
 800f320:	f43f aeee 	beq.w	800f100 <_strtod_l+0x490>
 800f324:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f326:	9904      	ldr	r1, [sp, #16]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	bfab      	itete	ge
 800f32c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800f32e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800f330:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800f332:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800f336:	bfac      	ite	ge
 800f338:	eb03 0902 	addge.w	r9, r3, r2
 800f33c:	1ad7      	sublt	r7, r2, r3
 800f33e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f340:	eba3 0801 	sub.w	r8, r3, r1
 800f344:	4490      	add	r8, r2
 800f346:	4ba1      	ldr	r3, [pc, #644]	; (800f5cc <_strtod_l+0x95c>)
 800f348:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800f34c:	4598      	cmp	r8, r3
 800f34e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f352:	f280 80c7 	bge.w	800f4e4 <_strtod_l+0x874>
 800f356:	eba3 0308 	sub.w	r3, r3, r8
 800f35a:	2b1f      	cmp	r3, #31
 800f35c:	eba2 0203 	sub.w	r2, r2, r3
 800f360:	f04f 0101 	mov.w	r1, #1
 800f364:	f300 80b1 	bgt.w	800f4ca <_strtod_l+0x85a>
 800f368:	fa01 f303 	lsl.w	r3, r1, r3
 800f36c:	930d      	str	r3, [sp, #52]	; 0x34
 800f36e:	2300      	movs	r3, #0
 800f370:	9308      	str	r3, [sp, #32]
 800f372:	eb09 0802 	add.w	r8, r9, r2
 800f376:	9b04      	ldr	r3, [sp, #16]
 800f378:	45c1      	cmp	r9, r8
 800f37a:	4417      	add	r7, r2
 800f37c:	441f      	add	r7, r3
 800f37e:	464b      	mov	r3, r9
 800f380:	bfa8      	it	ge
 800f382:	4643      	movge	r3, r8
 800f384:	42bb      	cmp	r3, r7
 800f386:	bfa8      	it	ge
 800f388:	463b      	movge	r3, r7
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	bfc2      	ittt	gt
 800f38e:	eba8 0803 	subgt.w	r8, r8, r3
 800f392:	1aff      	subgt	r7, r7, r3
 800f394:	eba9 0903 	subgt.w	r9, r9, r3
 800f398:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	dd17      	ble.n	800f3ce <_strtod_l+0x75e>
 800f39e:	4631      	mov	r1, r6
 800f3a0:	461a      	mov	r2, r3
 800f3a2:	4620      	mov	r0, r4
 800f3a4:	f001 ff4a 	bl	801123c <__pow5mult>
 800f3a8:	4606      	mov	r6, r0
 800f3aa:	2800      	cmp	r0, #0
 800f3ac:	f43f aea8 	beq.w	800f100 <_strtod_l+0x490>
 800f3b0:	4601      	mov	r1, r0
 800f3b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f3b4:	4620      	mov	r0, r4
 800f3b6:	f001 fe97 	bl	80110e8 <__multiply>
 800f3ba:	900b      	str	r0, [sp, #44]	; 0x2c
 800f3bc:	2800      	cmp	r0, #0
 800f3be:	f43f ae9f 	beq.w	800f100 <_strtod_l+0x490>
 800f3c2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f3c4:	4620      	mov	r0, r4
 800f3c6:	f001 fd77 	bl	8010eb8 <_Bfree>
 800f3ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f3cc:	9318      	str	r3, [sp, #96]	; 0x60
 800f3ce:	f1b8 0f00 	cmp.w	r8, #0
 800f3d2:	f300 808c 	bgt.w	800f4ee <_strtod_l+0x87e>
 800f3d6:	9b06      	ldr	r3, [sp, #24]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	dd08      	ble.n	800f3ee <_strtod_l+0x77e>
 800f3dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f3de:	9905      	ldr	r1, [sp, #20]
 800f3e0:	4620      	mov	r0, r4
 800f3e2:	f001 ff2b 	bl	801123c <__pow5mult>
 800f3e6:	9005      	str	r0, [sp, #20]
 800f3e8:	2800      	cmp	r0, #0
 800f3ea:	f43f ae89 	beq.w	800f100 <_strtod_l+0x490>
 800f3ee:	2f00      	cmp	r7, #0
 800f3f0:	dd08      	ble.n	800f404 <_strtod_l+0x794>
 800f3f2:	9905      	ldr	r1, [sp, #20]
 800f3f4:	463a      	mov	r2, r7
 800f3f6:	4620      	mov	r0, r4
 800f3f8:	f001 ff7a 	bl	80112f0 <__lshift>
 800f3fc:	9005      	str	r0, [sp, #20]
 800f3fe:	2800      	cmp	r0, #0
 800f400:	f43f ae7e 	beq.w	800f100 <_strtod_l+0x490>
 800f404:	f1b9 0f00 	cmp.w	r9, #0
 800f408:	dd08      	ble.n	800f41c <_strtod_l+0x7ac>
 800f40a:	4631      	mov	r1, r6
 800f40c:	464a      	mov	r2, r9
 800f40e:	4620      	mov	r0, r4
 800f410:	f001 ff6e 	bl	80112f0 <__lshift>
 800f414:	4606      	mov	r6, r0
 800f416:	2800      	cmp	r0, #0
 800f418:	f43f ae72 	beq.w	800f100 <_strtod_l+0x490>
 800f41c:	9a05      	ldr	r2, [sp, #20]
 800f41e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f420:	4620      	mov	r0, r4
 800f422:	f001 fff1 	bl	8011408 <__mdiff>
 800f426:	4605      	mov	r5, r0
 800f428:	2800      	cmp	r0, #0
 800f42a:	f43f ae69 	beq.w	800f100 <_strtod_l+0x490>
 800f42e:	68c3      	ldr	r3, [r0, #12]
 800f430:	930b      	str	r3, [sp, #44]	; 0x2c
 800f432:	2300      	movs	r3, #0
 800f434:	60c3      	str	r3, [r0, #12]
 800f436:	4631      	mov	r1, r6
 800f438:	f001 ffca 	bl	80113d0 <__mcmp>
 800f43c:	2800      	cmp	r0, #0
 800f43e:	da60      	bge.n	800f502 <_strtod_l+0x892>
 800f440:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f442:	ea53 030a 	orrs.w	r3, r3, sl
 800f446:	f040 8082 	bne.w	800f54e <_strtod_l+0x8de>
 800f44a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d17d      	bne.n	800f54e <_strtod_l+0x8de>
 800f452:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f456:	0d1b      	lsrs	r3, r3, #20
 800f458:	051b      	lsls	r3, r3, #20
 800f45a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f45e:	d976      	bls.n	800f54e <_strtod_l+0x8de>
 800f460:	696b      	ldr	r3, [r5, #20]
 800f462:	b913      	cbnz	r3, 800f46a <_strtod_l+0x7fa>
 800f464:	692b      	ldr	r3, [r5, #16]
 800f466:	2b01      	cmp	r3, #1
 800f468:	dd71      	ble.n	800f54e <_strtod_l+0x8de>
 800f46a:	4629      	mov	r1, r5
 800f46c:	2201      	movs	r2, #1
 800f46e:	4620      	mov	r0, r4
 800f470:	f001 ff3e 	bl	80112f0 <__lshift>
 800f474:	4631      	mov	r1, r6
 800f476:	4605      	mov	r5, r0
 800f478:	f001 ffaa 	bl	80113d0 <__mcmp>
 800f47c:	2800      	cmp	r0, #0
 800f47e:	dd66      	ble.n	800f54e <_strtod_l+0x8de>
 800f480:	9904      	ldr	r1, [sp, #16]
 800f482:	4a53      	ldr	r2, [pc, #332]	; (800f5d0 <_strtod_l+0x960>)
 800f484:	465b      	mov	r3, fp
 800f486:	2900      	cmp	r1, #0
 800f488:	f000 8081 	beq.w	800f58e <_strtod_l+0x91e>
 800f48c:	ea02 010b 	and.w	r1, r2, fp
 800f490:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f494:	dc7b      	bgt.n	800f58e <_strtod_l+0x91e>
 800f496:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f49a:	f77f aea9 	ble.w	800f1f0 <_strtod_l+0x580>
 800f49e:	4b4d      	ldr	r3, [pc, #308]	; (800f5d4 <_strtod_l+0x964>)
 800f4a0:	4650      	mov	r0, sl
 800f4a2:	4659      	mov	r1, fp
 800f4a4:	2200      	movs	r2, #0
 800f4a6:	f7f1 f8a7 	bl	80005f8 <__aeabi_dmul>
 800f4aa:	460b      	mov	r3, r1
 800f4ac:	4303      	orrs	r3, r0
 800f4ae:	bf08      	it	eq
 800f4b0:	2322      	moveq	r3, #34	; 0x22
 800f4b2:	4682      	mov	sl, r0
 800f4b4:	468b      	mov	fp, r1
 800f4b6:	bf08      	it	eq
 800f4b8:	6023      	streq	r3, [r4, #0]
 800f4ba:	e62b      	b.n	800f114 <_strtod_l+0x4a4>
 800f4bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f4c0:	fa02 f303 	lsl.w	r3, r2, r3
 800f4c4:	ea03 0a0a 	and.w	sl, r3, sl
 800f4c8:	e6e3      	b.n	800f292 <_strtod_l+0x622>
 800f4ca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800f4ce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800f4d2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800f4d6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800f4da:	fa01 f308 	lsl.w	r3, r1, r8
 800f4de:	9308      	str	r3, [sp, #32]
 800f4e0:	910d      	str	r1, [sp, #52]	; 0x34
 800f4e2:	e746      	b.n	800f372 <_strtod_l+0x702>
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	9308      	str	r3, [sp, #32]
 800f4e8:	2301      	movs	r3, #1
 800f4ea:	930d      	str	r3, [sp, #52]	; 0x34
 800f4ec:	e741      	b.n	800f372 <_strtod_l+0x702>
 800f4ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f4f0:	4642      	mov	r2, r8
 800f4f2:	4620      	mov	r0, r4
 800f4f4:	f001 fefc 	bl	80112f0 <__lshift>
 800f4f8:	9018      	str	r0, [sp, #96]	; 0x60
 800f4fa:	2800      	cmp	r0, #0
 800f4fc:	f47f af6b 	bne.w	800f3d6 <_strtod_l+0x766>
 800f500:	e5fe      	b.n	800f100 <_strtod_l+0x490>
 800f502:	465f      	mov	r7, fp
 800f504:	d16e      	bne.n	800f5e4 <_strtod_l+0x974>
 800f506:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f508:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f50c:	b342      	cbz	r2, 800f560 <_strtod_l+0x8f0>
 800f50e:	4a32      	ldr	r2, [pc, #200]	; (800f5d8 <_strtod_l+0x968>)
 800f510:	4293      	cmp	r3, r2
 800f512:	d128      	bne.n	800f566 <_strtod_l+0x8f6>
 800f514:	9b04      	ldr	r3, [sp, #16]
 800f516:	4651      	mov	r1, sl
 800f518:	b1eb      	cbz	r3, 800f556 <_strtod_l+0x8e6>
 800f51a:	4b2d      	ldr	r3, [pc, #180]	; (800f5d0 <_strtod_l+0x960>)
 800f51c:	403b      	ands	r3, r7
 800f51e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f522:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f526:	d819      	bhi.n	800f55c <_strtod_l+0x8ec>
 800f528:	0d1b      	lsrs	r3, r3, #20
 800f52a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f52e:	fa02 f303 	lsl.w	r3, r2, r3
 800f532:	4299      	cmp	r1, r3
 800f534:	d117      	bne.n	800f566 <_strtod_l+0x8f6>
 800f536:	4b29      	ldr	r3, [pc, #164]	; (800f5dc <_strtod_l+0x96c>)
 800f538:	429f      	cmp	r7, r3
 800f53a:	d102      	bne.n	800f542 <_strtod_l+0x8d2>
 800f53c:	3101      	adds	r1, #1
 800f53e:	f43f addf 	beq.w	800f100 <_strtod_l+0x490>
 800f542:	4b23      	ldr	r3, [pc, #140]	; (800f5d0 <_strtod_l+0x960>)
 800f544:	403b      	ands	r3, r7
 800f546:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800f54a:	f04f 0a00 	mov.w	sl, #0
 800f54e:	9b04      	ldr	r3, [sp, #16]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d1a4      	bne.n	800f49e <_strtod_l+0x82e>
 800f554:	e5de      	b.n	800f114 <_strtod_l+0x4a4>
 800f556:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f55a:	e7ea      	b.n	800f532 <_strtod_l+0x8c2>
 800f55c:	4613      	mov	r3, r2
 800f55e:	e7e8      	b.n	800f532 <_strtod_l+0x8c2>
 800f560:	ea53 030a 	orrs.w	r3, r3, sl
 800f564:	d08c      	beq.n	800f480 <_strtod_l+0x810>
 800f566:	9b08      	ldr	r3, [sp, #32]
 800f568:	b1db      	cbz	r3, 800f5a2 <_strtod_l+0x932>
 800f56a:	423b      	tst	r3, r7
 800f56c:	d0ef      	beq.n	800f54e <_strtod_l+0x8de>
 800f56e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f570:	9a04      	ldr	r2, [sp, #16]
 800f572:	4650      	mov	r0, sl
 800f574:	4659      	mov	r1, fp
 800f576:	b1c3      	cbz	r3, 800f5aa <_strtod_l+0x93a>
 800f578:	f7ff fb5b 	bl	800ec32 <sulp>
 800f57c:	4602      	mov	r2, r0
 800f57e:	460b      	mov	r3, r1
 800f580:	ec51 0b18 	vmov	r0, r1, d8
 800f584:	f7f0 fe82 	bl	800028c <__adddf3>
 800f588:	4682      	mov	sl, r0
 800f58a:	468b      	mov	fp, r1
 800f58c:	e7df      	b.n	800f54e <_strtod_l+0x8de>
 800f58e:	4013      	ands	r3, r2
 800f590:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f594:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f598:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f59c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800f5a0:	e7d5      	b.n	800f54e <_strtod_l+0x8de>
 800f5a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f5a4:	ea13 0f0a 	tst.w	r3, sl
 800f5a8:	e7e0      	b.n	800f56c <_strtod_l+0x8fc>
 800f5aa:	f7ff fb42 	bl	800ec32 <sulp>
 800f5ae:	4602      	mov	r2, r0
 800f5b0:	460b      	mov	r3, r1
 800f5b2:	ec51 0b18 	vmov	r0, r1, d8
 800f5b6:	f7f0 fe67 	bl	8000288 <__aeabi_dsub>
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	2300      	movs	r3, #0
 800f5be:	4682      	mov	sl, r0
 800f5c0:	468b      	mov	fp, r1
 800f5c2:	f7f1 fa81 	bl	8000ac8 <__aeabi_dcmpeq>
 800f5c6:	2800      	cmp	r0, #0
 800f5c8:	d0c1      	beq.n	800f54e <_strtod_l+0x8de>
 800f5ca:	e611      	b.n	800f1f0 <_strtod_l+0x580>
 800f5cc:	fffffc02 	.word	0xfffffc02
 800f5d0:	7ff00000 	.word	0x7ff00000
 800f5d4:	39500000 	.word	0x39500000
 800f5d8:	000fffff 	.word	0x000fffff
 800f5dc:	7fefffff 	.word	0x7fefffff
 800f5e0:	08013fb8 	.word	0x08013fb8
 800f5e4:	4631      	mov	r1, r6
 800f5e6:	4628      	mov	r0, r5
 800f5e8:	f002 f870 	bl	80116cc <__ratio>
 800f5ec:	ec59 8b10 	vmov	r8, r9, d0
 800f5f0:	ee10 0a10 	vmov	r0, s0
 800f5f4:	2200      	movs	r2, #0
 800f5f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f5fa:	4649      	mov	r1, r9
 800f5fc:	f7f1 fa78 	bl	8000af0 <__aeabi_dcmple>
 800f600:	2800      	cmp	r0, #0
 800f602:	d07a      	beq.n	800f6fa <_strtod_l+0xa8a>
 800f604:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f606:	2b00      	cmp	r3, #0
 800f608:	d04a      	beq.n	800f6a0 <_strtod_l+0xa30>
 800f60a:	4b95      	ldr	r3, [pc, #596]	; (800f860 <_strtod_l+0xbf0>)
 800f60c:	2200      	movs	r2, #0
 800f60e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f612:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800f860 <_strtod_l+0xbf0>
 800f616:	f04f 0800 	mov.w	r8, #0
 800f61a:	4b92      	ldr	r3, [pc, #584]	; (800f864 <_strtod_l+0xbf4>)
 800f61c:	403b      	ands	r3, r7
 800f61e:	930d      	str	r3, [sp, #52]	; 0x34
 800f620:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f622:	4b91      	ldr	r3, [pc, #580]	; (800f868 <_strtod_l+0xbf8>)
 800f624:	429a      	cmp	r2, r3
 800f626:	f040 80b0 	bne.w	800f78a <_strtod_l+0xb1a>
 800f62a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f62e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800f632:	ec4b ab10 	vmov	d0, sl, fp
 800f636:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f63a:	f001 ff6f 	bl	801151c <__ulp>
 800f63e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f642:	ec53 2b10 	vmov	r2, r3, d0
 800f646:	f7f0 ffd7 	bl	80005f8 <__aeabi_dmul>
 800f64a:	4652      	mov	r2, sl
 800f64c:	465b      	mov	r3, fp
 800f64e:	f7f0 fe1d 	bl	800028c <__adddf3>
 800f652:	460b      	mov	r3, r1
 800f654:	4983      	ldr	r1, [pc, #524]	; (800f864 <_strtod_l+0xbf4>)
 800f656:	4a85      	ldr	r2, [pc, #532]	; (800f86c <_strtod_l+0xbfc>)
 800f658:	4019      	ands	r1, r3
 800f65a:	4291      	cmp	r1, r2
 800f65c:	4682      	mov	sl, r0
 800f65e:	d960      	bls.n	800f722 <_strtod_l+0xab2>
 800f660:	ee18 3a90 	vmov	r3, s17
 800f664:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f668:	4293      	cmp	r3, r2
 800f66a:	d104      	bne.n	800f676 <_strtod_l+0xa06>
 800f66c:	ee18 3a10 	vmov	r3, s16
 800f670:	3301      	adds	r3, #1
 800f672:	f43f ad45 	beq.w	800f100 <_strtod_l+0x490>
 800f676:	f8df b200 	ldr.w	fp, [pc, #512]	; 800f878 <_strtod_l+0xc08>
 800f67a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800f67e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f680:	4620      	mov	r0, r4
 800f682:	f001 fc19 	bl	8010eb8 <_Bfree>
 800f686:	9905      	ldr	r1, [sp, #20]
 800f688:	4620      	mov	r0, r4
 800f68a:	f001 fc15 	bl	8010eb8 <_Bfree>
 800f68e:	4631      	mov	r1, r6
 800f690:	4620      	mov	r0, r4
 800f692:	f001 fc11 	bl	8010eb8 <_Bfree>
 800f696:	4629      	mov	r1, r5
 800f698:	4620      	mov	r0, r4
 800f69a:	f001 fc0d 	bl	8010eb8 <_Bfree>
 800f69e:	e61a      	b.n	800f2d6 <_strtod_l+0x666>
 800f6a0:	f1ba 0f00 	cmp.w	sl, #0
 800f6a4:	d11b      	bne.n	800f6de <_strtod_l+0xa6e>
 800f6a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f6aa:	b9f3      	cbnz	r3, 800f6ea <_strtod_l+0xa7a>
 800f6ac:	4b6c      	ldr	r3, [pc, #432]	; (800f860 <_strtod_l+0xbf0>)
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	4640      	mov	r0, r8
 800f6b2:	4649      	mov	r1, r9
 800f6b4:	f7f1 fa12 	bl	8000adc <__aeabi_dcmplt>
 800f6b8:	b9d0      	cbnz	r0, 800f6f0 <_strtod_l+0xa80>
 800f6ba:	4640      	mov	r0, r8
 800f6bc:	4649      	mov	r1, r9
 800f6be:	4b6c      	ldr	r3, [pc, #432]	; (800f870 <_strtod_l+0xc00>)
 800f6c0:	2200      	movs	r2, #0
 800f6c2:	f7f0 ff99 	bl	80005f8 <__aeabi_dmul>
 800f6c6:	4680      	mov	r8, r0
 800f6c8:	4689      	mov	r9, r1
 800f6ca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f6ce:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800f6d2:	9315      	str	r3, [sp, #84]	; 0x54
 800f6d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800f6d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f6dc:	e79d      	b.n	800f61a <_strtod_l+0x9aa>
 800f6de:	f1ba 0f01 	cmp.w	sl, #1
 800f6e2:	d102      	bne.n	800f6ea <_strtod_l+0xa7a>
 800f6e4:	2f00      	cmp	r7, #0
 800f6e6:	f43f ad83 	beq.w	800f1f0 <_strtod_l+0x580>
 800f6ea:	4b62      	ldr	r3, [pc, #392]	; (800f874 <_strtod_l+0xc04>)
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	e78e      	b.n	800f60e <_strtod_l+0x99e>
 800f6f0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800f870 <_strtod_l+0xc00>
 800f6f4:	f04f 0800 	mov.w	r8, #0
 800f6f8:	e7e7      	b.n	800f6ca <_strtod_l+0xa5a>
 800f6fa:	4b5d      	ldr	r3, [pc, #372]	; (800f870 <_strtod_l+0xc00>)
 800f6fc:	4640      	mov	r0, r8
 800f6fe:	4649      	mov	r1, r9
 800f700:	2200      	movs	r2, #0
 800f702:	f7f0 ff79 	bl	80005f8 <__aeabi_dmul>
 800f706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f708:	4680      	mov	r8, r0
 800f70a:	4689      	mov	r9, r1
 800f70c:	b933      	cbnz	r3, 800f71c <_strtod_l+0xaac>
 800f70e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f712:	900e      	str	r0, [sp, #56]	; 0x38
 800f714:	930f      	str	r3, [sp, #60]	; 0x3c
 800f716:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800f71a:	e7dd      	b.n	800f6d8 <_strtod_l+0xa68>
 800f71c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800f720:	e7f9      	b.n	800f716 <_strtod_l+0xaa6>
 800f722:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800f726:	9b04      	ldr	r3, [sp, #16]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d1a8      	bne.n	800f67e <_strtod_l+0xa0e>
 800f72c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f730:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f732:	0d1b      	lsrs	r3, r3, #20
 800f734:	051b      	lsls	r3, r3, #20
 800f736:	429a      	cmp	r2, r3
 800f738:	d1a1      	bne.n	800f67e <_strtod_l+0xa0e>
 800f73a:	4640      	mov	r0, r8
 800f73c:	4649      	mov	r1, r9
 800f73e:	f7f1 fb0b 	bl	8000d58 <__aeabi_d2lz>
 800f742:	f7f0 ff2b 	bl	800059c <__aeabi_l2d>
 800f746:	4602      	mov	r2, r0
 800f748:	460b      	mov	r3, r1
 800f74a:	4640      	mov	r0, r8
 800f74c:	4649      	mov	r1, r9
 800f74e:	f7f0 fd9b 	bl	8000288 <__aeabi_dsub>
 800f752:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f754:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f758:	ea43 030a 	orr.w	r3, r3, sl
 800f75c:	4313      	orrs	r3, r2
 800f75e:	4680      	mov	r8, r0
 800f760:	4689      	mov	r9, r1
 800f762:	d055      	beq.n	800f810 <_strtod_l+0xba0>
 800f764:	a336      	add	r3, pc, #216	; (adr r3, 800f840 <_strtod_l+0xbd0>)
 800f766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f76a:	f7f1 f9b7 	bl	8000adc <__aeabi_dcmplt>
 800f76e:	2800      	cmp	r0, #0
 800f770:	f47f acd0 	bne.w	800f114 <_strtod_l+0x4a4>
 800f774:	a334      	add	r3, pc, #208	; (adr r3, 800f848 <_strtod_l+0xbd8>)
 800f776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f77a:	4640      	mov	r0, r8
 800f77c:	4649      	mov	r1, r9
 800f77e:	f7f1 f9cb 	bl	8000b18 <__aeabi_dcmpgt>
 800f782:	2800      	cmp	r0, #0
 800f784:	f43f af7b 	beq.w	800f67e <_strtod_l+0xa0e>
 800f788:	e4c4      	b.n	800f114 <_strtod_l+0x4a4>
 800f78a:	9b04      	ldr	r3, [sp, #16]
 800f78c:	b333      	cbz	r3, 800f7dc <_strtod_l+0xb6c>
 800f78e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f790:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f794:	d822      	bhi.n	800f7dc <_strtod_l+0xb6c>
 800f796:	a32e      	add	r3, pc, #184	; (adr r3, 800f850 <_strtod_l+0xbe0>)
 800f798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f79c:	4640      	mov	r0, r8
 800f79e:	4649      	mov	r1, r9
 800f7a0:	f7f1 f9a6 	bl	8000af0 <__aeabi_dcmple>
 800f7a4:	b1a0      	cbz	r0, 800f7d0 <_strtod_l+0xb60>
 800f7a6:	4649      	mov	r1, r9
 800f7a8:	4640      	mov	r0, r8
 800f7aa:	f7f1 f9fd 	bl	8000ba8 <__aeabi_d2uiz>
 800f7ae:	2801      	cmp	r0, #1
 800f7b0:	bf38      	it	cc
 800f7b2:	2001      	movcc	r0, #1
 800f7b4:	f7f0 fea6 	bl	8000504 <__aeabi_ui2d>
 800f7b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f7ba:	4680      	mov	r8, r0
 800f7bc:	4689      	mov	r9, r1
 800f7be:	bb23      	cbnz	r3, 800f80a <_strtod_l+0xb9a>
 800f7c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f7c4:	9010      	str	r0, [sp, #64]	; 0x40
 800f7c6:	9311      	str	r3, [sp, #68]	; 0x44
 800f7c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f7cc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f7d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f7d4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f7d8:	1a9b      	subs	r3, r3, r2
 800f7da:	9309      	str	r3, [sp, #36]	; 0x24
 800f7dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f7e0:	eeb0 0a48 	vmov.f32	s0, s16
 800f7e4:	eef0 0a68 	vmov.f32	s1, s17
 800f7e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f7ec:	f001 fe96 	bl	801151c <__ulp>
 800f7f0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f7f4:	ec53 2b10 	vmov	r2, r3, d0
 800f7f8:	f7f0 fefe 	bl	80005f8 <__aeabi_dmul>
 800f7fc:	ec53 2b18 	vmov	r2, r3, d8
 800f800:	f7f0 fd44 	bl	800028c <__adddf3>
 800f804:	4682      	mov	sl, r0
 800f806:	468b      	mov	fp, r1
 800f808:	e78d      	b.n	800f726 <_strtod_l+0xab6>
 800f80a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800f80e:	e7db      	b.n	800f7c8 <_strtod_l+0xb58>
 800f810:	a311      	add	r3, pc, #68	; (adr r3, 800f858 <_strtod_l+0xbe8>)
 800f812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f816:	f7f1 f961 	bl	8000adc <__aeabi_dcmplt>
 800f81a:	e7b2      	b.n	800f782 <_strtod_l+0xb12>
 800f81c:	2300      	movs	r3, #0
 800f81e:	930a      	str	r3, [sp, #40]	; 0x28
 800f820:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f822:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f824:	6013      	str	r3, [r2, #0]
 800f826:	f7ff ba6b 	b.w	800ed00 <_strtod_l+0x90>
 800f82a:	2a65      	cmp	r2, #101	; 0x65
 800f82c:	f43f ab5f 	beq.w	800eeee <_strtod_l+0x27e>
 800f830:	2a45      	cmp	r2, #69	; 0x45
 800f832:	f43f ab5c 	beq.w	800eeee <_strtod_l+0x27e>
 800f836:	2301      	movs	r3, #1
 800f838:	f7ff bb94 	b.w	800ef64 <_strtod_l+0x2f4>
 800f83c:	f3af 8000 	nop.w
 800f840:	94a03595 	.word	0x94a03595
 800f844:	3fdfffff 	.word	0x3fdfffff
 800f848:	35afe535 	.word	0x35afe535
 800f84c:	3fe00000 	.word	0x3fe00000
 800f850:	ffc00000 	.word	0xffc00000
 800f854:	41dfffff 	.word	0x41dfffff
 800f858:	94a03595 	.word	0x94a03595
 800f85c:	3fcfffff 	.word	0x3fcfffff
 800f860:	3ff00000 	.word	0x3ff00000
 800f864:	7ff00000 	.word	0x7ff00000
 800f868:	7fe00000 	.word	0x7fe00000
 800f86c:	7c9fffff 	.word	0x7c9fffff
 800f870:	3fe00000 	.word	0x3fe00000
 800f874:	bff00000 	.word	0xbff00000
 800f878:	7fefffff 	.word	0x7fefffff

0800f87c <strtod>:
 800f87c:	460a      	mov	r2, r1
 800f87e:	4601      	mov	r1, r0
 800f880:	4802      	ldr	r0, [pc, #8]	; (800f88c <strtod+0x10>)
 800f882:	4b03      	ldr	r3, [pc, #12]	; (800f890 <strtod+0x14>)
 800f884:	6800      	ldr	r0, [r0, #0]
 800f886:	f7ff b9f3 	b.w	800ec70 <_strtod_l>
 800f88a:	bf00      	nop
 800f88c:	2000022c 	.word	0x2000022c
 800f890:	20000294 	.word	0x20000294

0800f894 <_strtol_l.constprop.0>:
 800f894:	2b01      	cmp	r3, #1
 800f896:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f89a:	d001      	beq.n	800f8a0 <_strtol_l.constprop.0+0xc>
 800f89c:	2b24      	cmp	r3, #36	; 0x24
 800f89e:	d906      	bls.n	800f8ae <_strtol_l.constprop.0+0x1a>
 800f8a0:	f7fe fc1a 	bl	800e0d8 <__errno>
 800f8a4:	2316      	movs	r3, #22
 800f8a6:	6003      	str	r3, [r0, #0]
 800f8a8:	2000      	movs	r0, #0
 800f8aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8ae:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800f994 <_strtol_l.constprop.0+0x100>
 800f8b2:	460d      	mov	r5, r1
 800f8b4:	462e      	mov	r6, r5
 800f8b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f8ba:	f814 700c 	ldrb.w	r7, [r4, ip]
 800f8be:	f017 0708 	ands.w	r7, r7, #8
 800f8c2:	d1f7      	bne.n	800f8b4 <_strtol_l.constprop.0+0x20>
 800f8c4:	2c2d      	cmp	r4, #45	; 0x2d
 800f8c6:	d132      	bne.n	800f92e <_strtol_l.constprop.0+0x9a>
 800f8c8:	782c      	ldrb	r4, [r5, #0]
 800f8ca:	2701      	movs	r7, #1
 800f8cc:	1cb5      	adds	r5, r6, #2
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d05b      	beq.n	800f98a <_strtol_l.constprop.0+0xf6>
 800f8d2:	2b10      	cmp	r3, #16
 800f8d4:	d109      	bne.n	800f8ea <_strtol_l.constprop.0+0x56>
 800f8d6:	2c30      	cmp	r4, #48	; 0x30
 800f8d8:	d107      	bne.n	800f8ea <_strtol_l.constprop.0+0x56>
 800f8da:	782c      	ldrb	r4, [r5, #0]
 800f8dc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f8e0:	2c58      	cmp	r4, #88	; 0x58
 800f8e2:	d14d      	bne.n	800f980 <_strtol_l.constprop.0+0xec>
 800f8e4:	786c      	ldrb	r4, [r5, #1]
 800f8e6:	2310      	movs	r3, #16
 800f8e8:	3502      	adds	r5, #2
 800f8ea:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800f8ee:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800f8f2:	f04f 0c00 	mov.w	ip, #0
 800f8f6:	fbb8 f9f3 	udiv	r9, r8, r3
 800f8fa:	4666      	mov	r6, ip
 800f8fc:	fb03 8a19 	mls	sl, r3, r9, r8
 800f900:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800f904:	f1be 0f09 	cmp.w	lr, #9
 800f908:	d816      	bhi.n	800f938 <_strtol_l.constprop.0+0xa4>
 800f90a:	4674      	mov	r4, lr
 800f90c:	42a3      	cmp	r3, r4
 800f90e:	dd24      	ble.n	800f95a <_strtol_l.constprop.0+0xc6>
 800f910:	f1bc 0f00 	cmp.w	ip, #0
 800f914:	db1e      	blt.n	800f954 <_strtol_l.constprop.0+0xc0>
 800f916:	45b1      	cmp	r9, r6
 800f918:	d31c      	bcc.n	800f954 <_strtol_l.constprop.0+0xc0>
 800f91a:	d101      	bne.n	800f920 <_strtol_l.constprop.0+0x8c>
 800f91c:	45a2      	cmp	sl, r4
 800f91e:	db19      	blt.n	800f954 <_strtol_l.constprop.0+0xc0>
 800f920:	fb06 4603 	mla	r6, r6, r3, r4
 800f924:	f04f 0c01 	mov.w	ip, #1
 800f928:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f92c:	e7e8      	b.n	800f900 <_strtol_l.constprop.0+0x6c>
 800f92e:	2c2b      	cmp	r4, #43	; 0x2b
 800f930:	bf04      	itt	eq
 800f932:	782c      	ldrbeq	r4, [r5, #0]
 800f934:	1cb5      	addeq	r5, r6, #2
 800f936:	e7ca      	b.n	800f8ce <_strtol_l.constprop.0+0x3a>
 800f938:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800f93c:	f1be 0f19 	cmp.w	lr, #25
 800f940:	d801      	bhi.n	800f946 <_strtol_l.constprop.0+0xb2>
 800f942:	3c37      	subs	r4, #55	; 0x37
 800f944:	e7e2      	b.n	800f90c <_strtol_l.constprop.0+0x78>
 800f946:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800f94a:	f1be 0f19 	cmp.w	lr, #25
 800f94e:	d804      	bhi.n	800f95a <_strtol_l.constprop.0+0xc6>
 800f950:	3c57      	subs	r4, #87	; 0x57
 800f952:	e7db      	b.n	800f90c <_strtol_l.constprop.0+0x78>
 800f954:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800f958:	e7e6      	b.n	800f928 <_strtol_l.constprop.0+0x94>
 800f95a:	f1bc 0f00 	cmp.w	ip, #0
 800f95e:	da05      	bge.n	800f96c <_strtol_l.constprop.0+0xd8>
 800f960:	2322      	movs	r3, #34	; 0x22
 800f962:	6003      	str	r3, [r0, #0]
 800f964:	4646      	mov	r6, r8
 800f966:	b942      	cbnz	r2, 800f97a <_strtol_l.constprop.0+0xe6>
 800f968:	4630      	mov	r0, r6
 800f96a:	e79e      	b.n	800f8aa <_strtol_l.constprop.0+0x16>
 800f96c:	b107      	cbz	r7, 800f970 <_strtol_l.constprop.0+0xdc>
 800f96e:	4276      	negs	r6, r6
 800f970:	2a00      	cmp	r2, #0
 800f972:	d0f9      	beq.n	800f968 <_strtol_l.constprop.0+0xd4>
 800f974:	f1bc 0f00 	cmp.w	ip, #0
 800f978:	d000      	beq.n	800f97c <_strtol_l.constprop.0+0xe8>
 800f97a:	1e69      	subs	r1, r5, #1
 800f97c:	6011      	str	r1, [r2, #0]
 800f97e:	e7f3      	b.n	800f968 <_strtol_l.constprop.0+0xd4>
 800f980:	2430      	movs	r4, #48	; 0x30
 800f982:	2b00      	cmp	r3, #0
 800f984:	d1b1      	bne.n	800f8ea <_strtol_l.constprop.0+0x56>
 800f986:	2308      	movs	r3, #8
 800f988:	e7af      	b.n	800f8ea <_strtol_l.constprop.0+0x56>
 800f98a:	2c30      	cmp	r4, #48	; 0x30
 800f98c:	d0a5      	beq.n	800f8da <_strtol_l.constprop.0+0x46>
 800f98e:	230a      	movs	r3, #10
 800f990:	e7ab      	b.n	800f8ea <_strtol_l.constprop.0+0x56>
 800f992:	bf00      	nop
 800f994:	08013e51 	.word	0x08013e51

0800f998 <strtol>:
 800f998:	4613      	mov	r3, r2
 800f99a:	460a      	mov	r2, r1
 800f99c:	4601      	mov	r1, r0
 800f99e:	4802      	ldr	r0, [pc, #8]	; (800f9a8 <strtol+0x10>)
 800f9a0:	6800      	ldr	r0, [r0, #0]
 800f9a2:	f7ff bf77 	b.w	800f894 <_strtol_l.constprop.0>
 800f9a6:	bf00      	nop
 800f9a8:	2000022c 	.word	0x2000022c

0800f9ac <_vsniprintf_r>:
 800f9ac:	b530      	push	{r4, r5, lr}
 800f9ae:	4614      	mov	r4, r2
 800f9b0:	2c00      	cmp	r4, #0
 800f9b2:	b09b      	sub	sp, #108	; 0x6c
 800f9b4:	4605      	mov	r5, r0
 800f9b6:	461a      	mov	r2, r3
 800f9b8:	da05      	bge.n	800f9c6 <_vsniprintf_r+0x1a>
 800f9ba:	238b      	movs	r3, #139	; 0x8b
 800f9bc:	6003      	str	r3, [r0, #0]
 800f9be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f9c2:	b01b      	add	sp, #108	; 0x6c
 800f9c4:	bd30      	pop	{r4, r5, pc}
 800f9c6:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f9ca:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f9ce:	bf14      	ite	ne
 800f9d0:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800f9d4:	4623      	moveq	r3, r4
 800f9d6:	9302      	str	r3, [sp, #8]
 800f9d8:	9305      	str	r3, [sp, #20]
 800f9da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f9de:	9100      	str	r1, [sp, #0]
 800f9e0:	9104      	str	r1, [sp, #16]
 800f9e2:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f9e6:	4669      	mov	r1, sp
 800f9e8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800f9ea:	f002 f839 	bl	8011a60 <_svfiprintf_r>
 800f9ee:	1c43      	adds	r3, r0, #1
 800f9f0:	bfbc      	itt	lt
 800f9f2:	238b      	movlt	r3, #139	; 0x8b
 800f9f4:	602b      	strlt	r3, [r5, #0]
 800f9f6:	2c00      	cmp	r4, #0
 800f9f8:	d0e3      	beq.n	800f9c2 <_vsniprintf_r+0x16>
 800f9fa:	9b00      	ldr	r3, [sp, #0]
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	701a      	strb	r2, [r3, #0]
 800fa00:	e7df      	b.n	800f9c2 <_vsniprintf_r+0x16>
	...

0800fa04 <vsniprintf>:
 800fa04:	b507      	push	{r0, r1, r2, lr}
 800fa06:	9300      	str	r3, [sp, #0]
 800fa08:	4613      	mov	r3, r2
 800fa0a:	460a      	mov	r2, r1
 800fa0c:	4601      	mov	r1, r0
 800fa0e:	4803      	ldr	r0, [pc, #12]	; (800fa1c <vsniprintf+0x18>)
 800fa10:	6800      	ldr	r0, [r0, #0]
 800fa12:	f7ff ffcb 	bl	800f9ac <_vsniprintf_r>
 800fa16:	b003      	add	sp, #12
 800fa18:	f85d fb04 	ldr.w	pc, [sp], #4
 800fa1c:	2000022c 	.word	0x2000022c

0800fa20 <quorem>:
 800fa20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa24:	6903      	ldr	r3, [r0, #16]
 800fa26:	690c      	ldr	r4, [r1, #16]
 800fa28:	42a3      	cmp	r3, r4
 800fa2a:	4607      	mov	r7, r0
 800fa2c:	f2c0 8081 	blt.w	800fb32 <quorem+0x112>
 800fa30:	3c01      	subs	r4, #1
 800fa32:	f101 0814 	add.w	r8, r1, #20
 800fa36:	f100 0514 	add.w	r5, r0, #20
 800fa3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fa3e:	9301      	str	r3, [sp, #4]
 800fa40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fa44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fa48:	3301      	adds	r3, #1
 800fa4a:	429a      	cmp	r2, r3
 800fa4c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fa50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fa54:	fbb2 f6f3 	udiv	r6, r2, r3
 800fa58:	d331      	bcc.n	800fabe <quorem+0x9e>
 800fa5a:	f04f 0e00 	mov.w	lr, #0
 800fa5e:	4640      	mov	r0, r8
 800fa60:	46ac      	mov	ip, r5
 800fa62:	46f2      	mov	sl, lr
 800fa64:	f850 2b04 	ldr.w	r2, [r0], #4
 800fa68:	b293      	uxth	r3, r2
 800fa6a:	fb06 e303 	mla	r3, r6, r3, lr
 800fa6e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fa72:	b29b      	uxth	r3, r3
 800fa74:	ebaa 0303 	sub.w	r3, sl, r3
 800fa78:	f8dc a000 	ldr.w	sl, [ip]
 800fa7c:	0c12      	lsrs	r2, r2, #16
 800fa7e:	fa13 f38a 	uxtah	r3, r3, sl
 800fa82:	fb06 e202 	mla	r2, r6, r2, lr
 800fa86:	9300      	str	r3, [sp, #0]
 800fa88:	9b00      	ldr	r3, [sp, #0]
 800fa8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fa8e:	b292      	uxth	r2, r2
 800fa90:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fa94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fa98:	f8bd 3000 	ldrh.w	r3, [sp]
 800fa9c:	4581      	cmp	r9, r0
 800fa9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800faa2:	f84c 3b04 	str.w	r3, [ip], #4
 800faa6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800faaa:	d2db      	bcs.n	800fa64 <quorem+0x44>
 800faac:	f855 300b 	ldr.w	r3, [r5, fp]
 800fab0:	b92b      	cbnz	r3, 800fabe <quorem+0x9e>
 800fab2:	9b01      	ldr	r3, [sp, #4]
 800fab4:	3b04      	subs	r3, #4
 800fab6:	429d      	cmp	r5, r3
 800fab8:	461a      	mov	r2, r3
 800faba:	d32e      	bcc.n	800fb1a <quorem+0xfa>
 800fabc:	613c      	str	r4, [r7, #16]
 800fabe:	4638      	mov	r0, r7
 800fac0:	f001 fc86 	bl	80113d0 <__mcmp>
 800fac4:	2800      	cmp	r0, #0
 800fac6:	db24      	blt.n	800fb12 <quorem+0xf2>
 800fac8:	3601      	adds	r6, #1
 800faca:	4628      	mov	r0, r5
 800facc:	f04f 0c00 	mov.w	ip, #0
 800fad0:	f858 2b04 	ldr.w	r2, [r8], #4
 800fad4:	f8d0 e000 	ldr.w	lr, [r0]
 800fad8:	b293      	uxth	r3, r2
 800fada:	ebac 0303 	sub.w	r3, ip, r3
 800fade:	0c12      	lsrs	r2, r2, #16
 800fae0:	fa13 f38e 	uxtah	r3, r3, lr
 800fae4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fae8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800faec:	b29b      	uxth	r3, r3
 800faee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800faf2:	45c1      	cmp	r9, r8
 800faf4:	f840 3b04 	str.w	r3, [r0], #4
 800faf8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fafc:	d2e8      	bcs.n	800fad0 <quorem+0xb0>
 800fafe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fb02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fb06:	b922      	cbnz	r2, 800fb12 <quorem+0xf2>
 800fb08:	3b04      	subs	r3, #4
 800fb0a:	429d      	cmp	r5, r3
 800fb0c:	461a      	mov	r2, r3
 800fb0e:	d30a      	bcc.n	800fb26 <quorem+0x106>
 800fb10:	613c      	str	r4, [r7, #16]
 800fb12:	4630      	mov	r0, r6
 800fb14:	b003      	add	sp, #12
 800fb16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb1a:	6812      	ldr	r2, [r2, #0]
 800fb1c:	3b04      	subs	r3, #4
 800fb1e:	2a00      	cmp	r2, #0
 800fb20:	d1cc      	bne.n	800fabc <quorem+0x9c>
 800fb22:	3c01      	subs	r4, #1
 800fb24:	e7c7      	b.n	800fab6 <quorem+0x96>
 800fb26:	6812      	ldr	r2, [r2, #0]
 800fb28:	3b04      	subs	r3, #4
 800fb2a:	2a00      	cmp	r2, #0
 800fb2c:	d1f0      	bne.n	800fb10 <quorem+0xf0>
 800fb2e:	3c01      	subs	r4, #1
 800fb30:	e7eb      	b.n	800fb0a <quorem+0xea>
 800fb32:	2000      	movs	r0, #0
 800fb34:	e7ee      	b.n	800fb14 <quorem+0xf4>
	...

0800fb38 <_dtoa_r>:
 800fb38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb3c:	ed2d 8b04 	vpush	{d8-d9}
 800fb40:	ec57 6b10 	vmov	r6, r7, d0
 800fb44:	b093      	sub	sp, #76	; 0x4c
 800fb46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fb48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fb4c:	9106      	str	r1, [sp, #24]
 800fb4e:	ee10 aa10 	vmov	sl, s0
 800fb52:	4604      	mov	r4, r0
 800fb54:	9209      	str	r2, [sp, #36]	; 0x24
 800fb56:	930c      	str	r3, [sp, #48]	; 0x30
 800fb58:	46bb      	mov	fp, r7
 800fb5a:	b975      	cbnz	r5, 800fb7a <_dtoa_r+0x42>
 800fb5c:	2010      	movs	r0, #16
 800fb5e:	f001 f951 	bl	8010e04 <malloc>
 800fb62:	4602      	mov	r2, r0
 800fb64:	6260      	str	r0, [r4, #36]	; 0x24
 800fb66:	b920      	cbnz	r0, 800fb72 <_dtoa_r+0x3a>
 800fb68:	4ba7      	ldr	r3, [pc, #668]	; (800fe08 <_dtoa_r+0x2d0>)
 800fb6a:	21ea      	movs	r1, #234	; 0xea
 800fb6c:	48a7      	ldr	r0, [pc, #668]	; (800fe0c <_dtoa_r+0x2d4>)
 800fb6e:	f002 f8f1 	bl	8011d54 <__assert_func>
 800fb72:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fb76:	6005      	str	r5, [r0, #0]
 800fb78:	60c5      	str	r5, [r0, #12]
 800fb7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb7c:	6819      	ldr	r1, [r3, #0]
 800fb7e:	b151      	cbz	r1, 800fb96 <_dtoa_r+0x5e>
 800fb80:	685a      	ldr	r2, [r3, #4]
 800fb82:	604a      	str	r2, [r1, #4]
 800fb84:	2301      	movs	r3, #1
 800fb86:	4093      	lsls	r3, r2
 800fb88:	608b      	str	r3, [r1, #8]
 800fb8a:	4620      	mov	r0, r4
 800fb8c:	f001 f994 	bl	8010eb8 <_Bfree>
 800fb90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb92:	2200      	movs	r2, #0
 800fb94:	601a      	str	r2, [r3, #0]
 800fb96:	1e3b      	subs	r3, r7, #0
 800fb98:	bfaa      	itet	ge
 800fb9a:	2300      	movge	r3, #0
 800fb9c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800fba0:	f8c8 3000 	strge.w	r3, [r8]
 800fba4:	4b9a      	ldr	r3, [pc, #616]	; (800fe10 <_dtoa_r+0x2d8>)
 800fba6:	bfbc      	itt	lt
 800fba8:	2201      	movlt	r2, #1
 800fbaa:	f8c8 2000 	strlt.w	r2, [r8]
 800fbae:	ea33 030b 	bics.w	r3, r3, fp
 800fbb2:	d11b      	bne.n	800fbec <_dtoa_r+0xb4>
 800fbb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fbb6:	f242 730f 	movw	r3, #9999	; 0x270f
 800fbba:	6013      	str	r3, [r2, #0]
 800fbbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fbc0:	4333      	orrs	r3, r6
 800fbc2:	f000 8592 	beq.w	80106ea <_dtoa_r+0xbb2>
 800fbc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fbc8:	b963      	cbnz	r3, 800fbe4 <_dtoa_r+0xac>
 800fbca:	4b92      	ldr	r3, [pc, #584]	; (800fe14 <_dtoa_r+0x2dc>)
 800fbcc:	e022      	b.n	800fc14 <_dtoa_r+0xdc>
 800fbce:	4b92      	ldr	r3, [pc, #584]	; (800fe18 <_dtoa_r+0x2e0>)
 800fbd0:	9301      	str	r3, [sp, #4]
 800fbd2:	3308      	adds	r3, #8
 800fbd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fbd6:	6013      	str	r3, [r2, #0]
 800fbd8:	9801      	ldr	r0, [sp, #4]
 800fbda:	b013      	add	sp, #76	; 0x4c
 800fbdc:	ecbd 8b04 	vpop	{d8-d9}
 800fbe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbe4:	4b8b      	ldr	r3, [pc, #556]	; (800fe14 <_dtoa_r+0x2dc>)
 800fbe6:	9301      	str	r3, [sp, #4]
 800fbe8:	3303      	adds	r3, #3
 800fbea:	e7f3      	b.n	800fbd4 <_dtoa_r+0x9c>
 800fbec:	2200      	movs	r2, #0
 800fbee:	2300      	movs	r3, #0
 800fbf0:	4650      	mov	r0, sl
 800fbf2:	4659      	mov	r1, fp
 800fbf4:	f7f0 ff68 	bl	8000ac8 <__aeabi_dcmpeq>
 800fbf8:	ec4b ab19 	vmov	d9, sl, fp
 800fbfc:	4680      	mov	r8, r0
 800fbfe:	b158      	cbz	r0, 800fc18 <_dtoa_r+0xe0>
 800fc00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fc02:	2301      	movs	r3, #1
 800fc04:	6013      	str	r3, [r2, #0]
 800fc06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	f000 856b 	beq.w	80106e4 <_dtoa_r+0xbac>
 800fc0e:	4883      	ldr	r0, [pc, #524]	; (800fe1c <_dtoa_r+0x2e4>)
 800fc10:	6018      	str	r0, [r3, #0]
 800fc12:	1e43      	subs	r3, r0, #1
 800fc14:	9301      	str	r3, [sp, #4]
 800fc16:	e7df      	b.n	800fbd8 <_dtoa_r+0xa0>
 800fc18:	ec4b ab10 	vmov	d0, sl, fp
 800fc1c:	aa10      	add	r2, sp, #64	; 0x40
 800fc1e:	a911      	add	r1, sp, #68	; 0x44
 800fc20:	4620      	mov	r0, r4
 800fc22:	f001 fcf7 	bl	8011614 <__d2b>
 800fc26:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800fc2a:	ee08 0a10 	vmov	s16, r0
 800fc2e:	2d00      	cmp	r5, #0
 800fc30:	f000 8084 	beq.w	800fd3c <_dtoa_r+0x204>
 800fc34:	ee19 3a90 	vmov	r3, s19
 800fc38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fc3c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800fc40:	4656      	mov	r6, sl
 800fc42:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800fc46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fc4a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800fc4e:	4b74      	ldr	r3, [pc, #464]	; (800fe20 <_dtoa_r+0x2e8>)
 800fc50:	2200      	movs	r2, #0
 800fc52:	4630      	mov	r0, r6
 800fc54:	4639      	mov	r1, r7
 800fc56:	f7f0 fb17 	bl	8000288 <__aeabi_dsub>
 800fc5a:	a365      	add	r3, pc, #404	; (adr r3, 800fdf0 <_dtoa_r+0x2b8>)
 800fc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc60:	f7f0 fcca 	bl	80005f8 <__aeabi_dmul>
 800fc64:	a364      	add	r3, pc, #400	; (adr r3, 800fdf8 <_dtoa_r+0x2c0>)
 800fc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc6a:	f7f0 fb0f 	bl	800028c <__adddf3>
 800fc6e:	4606      	mov	r6, r0
 800fc70:	4628      	mov	r0, r5
 800fc72:	460f      	mov	r7, r1
 800fc74:	f7f0 fc56 	bl	8000524 <__aeabi_i2d>
 800fc78:	a361      	add	r3, pc, #388	; (adr r3, 800fe00 <_dtoa_r+0x2c8>)
 800fc7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc7e:	f7f0 fcbb 	bl	80005f8 <__aeabi_dmul>
 800fc82:	4602      	mov	r2, r0
 800fc84:	460b      	mov	r3, r1
 800fc86:	4630      	mov	r0, r6
 800fc88:	4639      	mov	r1, r7
 800fc8a:	f7f0 faff 	bl	800028c <__adddf3>
 800fc8e:	4606      	mov	r6, r0
 800fc90:	460f      	mov	r7, r1
 800fc92:	f7f0 ff61 	bl	8000b58 <__aeabi_d2iz>
 800fc96:	2200      	movs	r2, #0
 800fc98:	9000      	str	r0, [sp, #0]
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	4630      	mov	r0, r6
 800fc9e:	4639      	mov	r1, r7
 800fca0:	f7f0 ff1c 	bl	8000adc <__aeabi_dcmplt>
 800fca4:	b150      	cbz	r0, 800fcbc <_dtoa_r+0x184>
 800fca6:	9800      	ldr	r0, [sp, #0]
 800fca8:	f7f0 fc3c 	bl	8000524 <__aeabi_i2d>
 800fcac:	4632      	mov	r2, r6
 800fcae:	463b      	mov	r3, r7
 800fcb0:	f7f0 ff0a 	bl	8000ac8 <__aeabi_dcmpeq>
 800fcb4:	b910      	cbnz	r0, 800fcbc <_dtoa_r+0x184>
 800fcb6:	9b00      	ldr	r3, [sp, #0]
 800fcb8:	3b01      	subs	r3, #1
 800fcba:	9300      	str	r3, [sp, #0]
 800fcbc:	9b00      	ldr	r3, [sp, #0]
 800fcbe:	2b16      	cmp	r3, #22
 800fcc0:	d85a      	bhi.n	800fd78 <_dtoa_r+0x240>
 800fcc2:	9a00      	ldr	r2, [sp, #0]
 800fcc4:	4b57      	ldr	r3, [pc, #348]	; (800fe24 <_dtoa_r+0x2ec>)
 800fcc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fcca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcce:	ec51 0b19 	vmov	r0, r1, d9
 800fcd2:	f7f0 ff03 	bl	8000adc <__aeabi_dcmplt>
 800fcd6:	2800      	cmp	r0, #0
 800fcd8:	d050      	beq.n	800fd7c <_dtoa_r+0x244>
 800fcda:	9b00      	ldr	r3, [sp, #0]
 800fcdc:	3b01      	subs	r3, #1
 800fcde:	9300      	str	r3, [sp, #0]
 800fce0:	2300      	movs	r3, #0
 800fce2:	930b      	str	r3, [sp, #44]	; 0x2c
 800fce4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fce6:	1b5d      	subs	r5, r3, r5
 800fce8:	1e6b      	subs	r3, r5, #1
 800fcea:	9305      	str	r3, [sp, #20]
 800fcec:	bf45      	ittet	mi
 800fcee:	f1c5 0301 	rsbmi	r3, r5, #1
 800fcf2:	9304      	strmi	r3, [sp, #16]
 800fcf4:	2300      	movpl	r3, #0
 800fcf6:	2300      	movmi	r3, #0
 800fcf8:	bf4c      	ite	mi
 800fcfa:	9305      	strmi	r3, [sp, #20]
 800fcfc:	9304      	strpl	r3, [sp, #16]
 800fcfe:	9b00      	ldr	r3, [sp, #0]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	db3d      	blt.n	800fd80 <_dtoa_r+0x248>
 800fd04:	9b05      	ldr	r3, [sp, #20]
 800fd06:	9a00      	ldr	r2, [sp, #0]
 800fd08:	920a      	str	r2, [sp, #40]	; 0x28
 800fd0a:	4413      	add	r3, r2
 800fd0c:	9305      	str	r3, [sp, #20]
 800fd0e:	2300      	movs	r3, #0
 800fd10:	9307      	str	r3, [sp, #28]
 800fd12:	9b06      	ldr	r3, [sp, #24]
 800fd14:	2b09      	cmp	r3, #9
 800fd16:	f200 8089 	bhi.w	800fe2c <_dtoa_r+0x2f4>
 800fd1a:	2b05      	cmp	r3, #5
 800fd1c:	bfc4      	itt	gt
 800fd1e:	3b04      	subgt	r3, #4
 800fd20:	9306      	strgt	r3, [sp, #24]
 800fd22:	9b06      	ldr	r3, [sp, #24]
 800fd24:	f1a3 0302 	sub.w	r3, r3, #2
 800fd28:	bfcc      	ite	gt
 800fd2a:	2500      	movgt	r5, #0
 800fd2c:	2501      	movle	r5, #1
 800fd2e:	2b03      	cmp	r3, #3
 800fd30:	f200 8087 	bhi.w	800fe42 <_dtoa_r+0x30a>
 800fd34:	e8df f003 	tbb	[pc, r3]
 800fd38:	59383a2d 	.word	0x59383a2d
 800fd3c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800fd40:	441d      	add	r5, r3
 800fd42:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fd46:	2b20      	cmp	r3, #32
 800fd48:	bfc1      	itttt	gt
 800fd4a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fd4e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800fd52:	fa0b f303 	lslgt.w	r3, fp, r3
 800fd56:	fa26 f000 	lsrgt.w	r0, r6, r0
 800fd5a:	bfda      	itte	le
 800fd5c:	f1c3 0320 	rsble	r3, r3, #32
 800fd60:	fa06 f003 	lslle.w	r0, r6, r3
 800fd64:	4318      	orrgt	r0, r3
 800fd66:	f7f0 fbcd 	bl	8000504 <__aeabi_ui2d>
 800fd6a:	2301      	movs	r3, #1
 800fd6c:	4606      	mov	r6, r0
 800fd6e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800fd72:	3d01      	subs	r5, #1
 800fd74:	930e      	str	r3, [sp, #56]	; 0x38
 800fd76:	e76a      	b.n	800fc4e <_dtoa_r+0x116>
 800fd78:	2301      	movs	r3, #1
 800fd7a:	e7b2      	b.n	800fce2 <_dtoa_r+0x1aa>
 800fd7c:	900b      	str	r0, [sp, #44]	; 0x2c
 800fd7e:	e7b1      	b.n	800fce4 <_dtoa_r+0x1ac>
 800fd80:	9b04      	ldr	r3, [sp, #16]
 800fd82:	9a00      	ldr	r2, [sp, #0]
 800fd84:	1a9b      	subs	r3, r3, r2
 800fd86:	9304      	str	r3, [sp, #16]
 800fd88:	4253      	negs	r3, r2
 800fd8a:	9307      	str	r3, [sp, #28]
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	930a      	str	r3, [sp, #40]	; 0x28
 800fd90:	e7bf      	b.n	800fd12 <_dtoa_r+0x1da>
 800fd92:	2300      	movs	r3, #0
 800fd94:	9308      	str	r3, [sp, #32]
 800fd96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	dc55      	bgt.n	800fe48 <_dtoa_r+0x310>
 800fd9c:	2301      	movs	r3, #1
 800fd9e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fda2:	461a      	mov	r2, r3
 800fda4:	9209      	str	r2, [sp, #36]	; 0x24
 800fda6:	e00c      	b.n	800fdc2 <_dtoa_r+0x28a>
 800fda8:	2301      	movs	r3, #1
 800fdaa:	e7f3      	b.n	800fd94 <_dtoa_r+0x25c>
 800fdac:	2300      	movs	r3, #0
 800fdae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fdb0:	9308      	str	r3, [sp, #32]
 800fdb2:	9b00      	ldr	r3, [sp, #0]
 800fdb4:	4413      	add	r3, r2
 800fdb6:	9302      	str	r3, [sp, #8]
 800fdb8:	3301      	adds	r3, #1
 800fdba:	2b01      	cmp	r3, #1
 800fdbc:	9303      	str	r3, [sp, #12]
 800fdbe:	bfb8      	it	lt
 800fdc0:	2301      	movlt	r3, #1
 800fdc2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	6042      	str	r2, [r0, #4]
 800fdc8:	2204      	movs	r2, #4
 800fdca:	f102 0614 	add.w	r6, r2, #20
 800fdce:	429e      	cmp	r6, r3
 800fdd0:	6841      	ldr	r1, [r0, #4]
 800fdd2:	d93d      	bls.n	800fe50 <_dtoa_r+0x318>
 800fdd4:	4620      	mov	r0, r4
 800fdd6:	f001 f82f 	bl	8010e38 <_Balloc>
 800fdda:	9001      	str	r0, [sp, #4]
 800fddc:	2800      	cmp	r0, #0
 800fdde:	d13b      	bne.n	800fe58 <_dtoa_r+0x320>
 800fde0:	4b11      	ldr	r3, [pc, #68]	; (800fe28 <_dtoa_r+0x2f0>)
 800fde2:	4602      	mov	r2, r0
 800fde4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fde8:	e6c0      	b.n	800fb6c <_dtoa_r+0x34>
 800fdea:	2301      	movs	r3, #1
 800fdec:	e7df      	b.n	800fdae <_dtoa_r+0x276>
 800fdee:	bf00      	nop
 800fdf0:	636f4361 	.word	0x636f4361
 800fdf4:	3fd287a7 	.word	0x3fd287a7
 800fdf8:	8b60c8b3 	.word	0x8b60c8b3
 800fdfc:	3fc68a28 	.word	0x3fc68a28
 800fe00:	509f79fb 	.word	0x509f79fb
 800fe04:	3fd34413 	.word	0x3fd34413
 800fe08:	08013fed 	.word	0x08013fed
 800fe0c:	08014004 	.word	0x08014004
 800fe10:	7ff00000 	.word	0x7ff00000
 800fe14:	08013fe9 	.word	0x08013fe9
 800fe18:	08013fe0 	.word	0x08013fe0
 800fe1c:	08013f69 	.word	0x08013f69
 800fe20:	3ff80000 	.word	0x3ff80000
 800fe24:	08014170 	.word	0x08014170
 800fe28:	0801405f 	.word	0x0801405f
 800fe2c:	2501      	movs	r5, #1
 800fe2e:	2300      	movs	r3, #0
 800fe30:	9306      	str	r3, [sp, #24]
 800fe32:	9508      	str	r5, [sp, #32]
 800fe34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fe38:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	2312      	movs	r3, #18
 800fe40:	e7b0      	b.n	800fda4 <_dtoa_r+0x26c>
 800fe42:	2301      	movs	r3, #1
 800fe44:	9308      	str	r3, [sp, #32]
 800fe46:	e7f5      	b.n	800fe34 <_dtoa_r+0x2fc>
 800fe48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe4a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fe4e:	e7b8      	b.n	800fdc2 <_dtoa_r+0x28a>
 800fe50:	3101      	adds	r1, #1
 800fe52:	6041      	str	r1, [r0, #4]
 800fe54:	0052      	lsls	r2, r2, #1
 800fe56:	e7b8      	b.n	800fdca <_dtoa_r+0x292>
 800fe58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fe5a:	9a01      	ldr	r2, [sp, #4]
 800fe5c:	601a      	str	r2, [r3, #0]
 800fe5e:	9b03      	ldr	r3, [sp, #12]
 800fe60:	2b0e      	cmp	r3, #14
 800fe62:	f200 809d 	bhi.w	800ffa0 <_dtoa_r+0x468>
 800fe66:	2d00      	cmp	r5, #0
 800fe68:	f000 809a 	beq.w	800ffa0 <_dtoa_r+0x468>
 800fe6c:	9b00      	ldr	r3, [sp, #0]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	dd32      	ble.n	800fed8 <_dtoa_r+0x3a0>
 800fe72:	4ab7      	ldr	r2, [pc, #732]	; (8010150 <_dtoa_r+0x618>)
 800fe74:	f003 030f 	and.w	r3, r3, #15
 800fe78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800fe7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fe80:	9b00      	ldr	r3, [sp, #0]
 800fe82:	05d8      	lsls	r0, r3, #23
 800fe84:	ea4f 1723 	mov.w	r7, r3, asr #4
 800fe88:	d516      	bpl.n	800feb8 <_dtoa_r+0x380>
 800fe8a:	4bb2      	ldr	r3, [pc, #712]	; (8010154 <_dtoa_r+0x61c>)
 800fe8c:	ec51 0b19 	vmov	r0, r1, d9
 800fe90:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fe94:	f7f0 fcda 	bl	800084c <__aeabi_ddiv>
 800fe98:	f007 070f 	and.w	r7, r7, #15
 800fe9c:	4682      	mov	sl, r0
 800fe9e:	468b      	mov	fp, r1
 800fea0:	2503      	movs	r5, #3
 800fea2:	4eac      	ldr	r6, [pc, #688]	; (8010154 <_dtoa_r+0x61c>)
 800fea4:	b957      	cbnz	r7, 800febc <_dtoa_r+0x384>
 800fea6:	4642      	mov	r2, r8
 800fea8:	464b      	mov	r3, r9
 800feaa:	4650      	mov	r0, sl
 800feac:	4659      	mov	r1, fp
 800feae:	f7f0 fccd 	bl	800084c <__aeabi_ddiv>
 800feb2:	4682      	mov	sl, r0
 800feb4:	468b      	mov	fp, r1
 800feb6:	e028      	b.n	800ff0a <_dtoa_r+0x3d2>
 800feb8:	2502      	movs	r5, #2
 800feba:	e7f2      	b.n	800fea2 <_dtoa_r+0x36a>
 800febc:	07f9      	lsls	r1, r7, #31
 800febe:	d508      	bpl.n	800fed2 <_dtoa_r+0x39a>
 800fec0:	4640      	mov	r0, r8
 800fec2:	4649      	mov	r1, r9
 800fec4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fec8:	f7f0 fb96 	bl	80005f8 <__aeabi_dmul>
 800fecc:	3501      	adds	r5, #1
 800fece:	4680      	mov	r8, r0
 800fed0:	4689      	mov	r9, r1
 800fed2:	107f      	asrs	r7, r7, #1
 800fed4:	3608      	adds	r6, #8
 800fed6:	e7e5      	b.n	800fea4 <_dtoa_r+0x36c>
 800fed8:	f000 809b 	beq.w	8010012 <_dtoa_r+0x4da>
 800fedc:	9b00      	ldr	r3, [sp, #0]
 800fede:	4f9d      	ldr	r7, [pc, #628]	; (8010154 <_dtoa_r+0x61c>)
 800fee0:	425e      	negs	r6, r3
 800fee2:	4b9b      	ldr	r3, [pc, #620]	; (8010150 <_dtoa_r+0x618>)
 800fee4:	f006 020f 	and.w	r2, r6, #15
 800fee8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800feec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fef0:	ec51 0b19 	vmov	r0, r1, d9
 800fef4:	f7f0 fb80 	bl	80005f8 <__aeabi_dmul>
 800fef8:	1136      	asrs	r6, r6, #4
 800fefa:	4682      	mov	sl, r0
 800fefc:	468b      	mov	fp, r1
 800fefe:	2300      	movs	r3, #0
 800ff00:	2502      	movs	r5, #2
 800ff02:	2e00      	cmp	r6, #0
 800ff04:	d17a      	bne.n	800fffc <_dtoa_r+0x4c4>
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d1d3      	bne.n	800feb2 <_dtoa_r+0x37a>
 800ff0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	f000 8082 	beq.w	8010016 <_dtoa_r+0x4de>
 800ff12:	4b91      	ldr	r3, [pc, #580]	; (8010158 <_dtoa_r+0x620>)
 800ff14:	2200      	movs	r2, #0
 800ff16:	4650      	mov	r0, sl
 800ff18:	4659      	mov	r1, fp
 800ff1a:	f7f0 fddf 	bl	8000adc <__aeabi_dcmplt>
 800ff1e:	2800      	cmp	r0, #0
 800ff20:	d079      	beq.n	8010016 <_dtoa_r+0x4de>
 800ff22:	9b03      	ldr	r3, [sp, #12]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d076      	beq.n	8010016 <_dtoa_r+0x4de>
 800ff28:	9b02      	ldr	r3, [sp, #8]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	dd36      	ble.n	800ff9c <_dtoa_r+0x464>
 800ff2e:	9b00      	ldr	r3, [sp, #0]
 800ff30:	4650      	mov	r0, sl
 800ff32:	4659      	mov	r1, fp
 800ff34:	1e5f      	subs	r7, r3, #1
 800ff36:	2200      	movs	r2, #0
 800ff38:	4b88      	ldr	r3, [pc, #544]	; (801015c <_dtoa_r+0x624>)
 800ff3a:	f7f0 fb5d 	bl	80005f8 <__aeabi_dmul>
 800ff3e:	9e02      	ldr	r6, [sp, #8]
 800ff40:	4682      	mov	sl, r0
 800ff42:	468b      	mov	fp, r1
 800ff44:	3501      	adds	r5, #1
 800ff46:	4628      	mov	r0, r5
 800ff48:	f7f0 faec 	bl	8000524 <__aeabi_i2d>
 800ff4c:	4652      	mov	r2, sl
 800ff4e:	465b      	mov	r3, fp
 800ff50:	f7f0 fb52 	bl	80005f8 <__aeabi_dmul>
 800ff54:	4b82      	ldr	r3, [pc, #520]	; (8010160 <_dtoa_r+0x628>)
 800ff56:	2200      	movs	r2, #0
 800ff58:	f7f0 f998 	bl	800028c <__adddf3>
 800ff5c:	46d0      	mov	r8, sl
 800ff5e:	46d9      	mov	r9, fp
 800ff60:	4682      	mov	sl, r0
 800ff62:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ff66:	2e00      	cmp	r6, #0
 800ff68:	d158      	bne.n	801001c <_dtoa_r+0x4e4>
 800ff6a:	4b7e      	ldr	r3, [pc, #504]	; (8010164 <_dtoa_r+0x62c>)
 800ff6c:	2200      	movs	r2, #0
 800ff6e:	4640      	mov	r0, r8
 800ff70:	4649      	mov	r1, r9
 800ff72:	f7f0 f989 	bl	8000288 <__aeabi_dsub>
 800ff76:	4652      	mov	r2, sl
 800ff78:	465b      	mov	r3, fp
 800ff7a:	4680      	mov	r8, r0
 800ff7c:	4689      	mov	r9, r1
 800ff7e:	f7f0 fdcb 	bl	8000b18 <__aeabi_dcmpgt>
 800ff82:	2800      	cmp	r0, #0
 800ff84:	f040 8295 	bne.w	80104b2 <_dtoa_r+0x97a>
 800ff88:	4652      	mov	r2, sl
 800ff8a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ff8e:	4640      	mov	r0, r8
 800ff90:	4649      	mov	r1, r9
 800ff92:	f7f0 fda3 	bl	8000adc <__aeabi_dcmplt>
 800ff96:	2800      	cmp	r0, #0
 800ff98:	f040 8289 	bne.w	80104ae <_dtoa_r+0x976>
 800ff9c:	ec5b ab19 	vmov	sl, fp, d9
 800ffa0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	f2c0 8148 	blt.w	8010238 <_dtoa_r+0x700>
 800ffa8:	9a00      	ldr	r2, [sp, #0]
 800ffaa:	2a0e      	cmp	r2, #14
 800ffac:	f300 8144 	bgt.w	8010238 <_dtoa_r+0x700>
 800ffb0:	4b67      	ldr	r3, [pc, #412]	; (8010150 <_dtoa_r+0x618>)
 800ffb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ffb6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ffba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	f280 80d5 	bge.w	801016c <_dtoa_r+0x634>
 800ffc2:	9b03      	ldr	r3, [sp, #12]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	f300 80d1 	bgt.w	801016c <_dtoa_r+0x634>
 800ffca:	f040 826f 	bne.w	80104ac <_dtoa_r+0x974>
 800ffce:	4b65      	ldr	r3, [pc, #404]	; (8010164 <_dtoa_r+0x62c>)
 800ffd0:	2200      	movs	r2, #0
 800ffd2:	4640      	mov	r0, r8
 800ffd4:	4649      	mov	r1, r9
 800ffd6:	f7f0 fb0f 	bl	80005f8 <__aeabi_dmul>
 800ffda:	4652      	mov	r2, sl
 800ffdc:	465b      	mov	r3, fp
 800ffde:	f7f0 fd91 	bl	8000b04 <__aeabi_dcmpge>
 800ffe2:	9e03      	ldr	r6, [sp, #12]
 800ffe4:	4637      	mov	r7, r6
 800ffe6:	2800      	cmp	r0, #0
 800ffe8:	f040 8245 	bne.w	8010476 <_dtoa_r+0x93e>
 800ffec:	9d01      	ldr	r5, [sp, #4]
 800ffee:	2331      	movs	r3, #49	; 0x31
 800fff0:	f805 3b01 	strb.w	r3, [r5], #1
 800fff4:	9b00      	ldr	r3, [sp, #0]
 800fff6:	3301      	adds	r3, #1
 800fff8:	9300      	str	r3, [sp, #0]
 800fffa:	e240      	b.n	801047e <_dtoa_r+0x946>
 800fffc:	07f2      	lsls	r2, r6, #31
 800fffe:	d505      	bpl.n	801000c <_dtoa_r+0x4d4>
 8010000:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010004:	f7f0 faf8 	bl	80005f8 <__aeabi_dmul>
 8010008:	3501      	adds	r5, #1
 801000a:	2301      	movs	r3, #1
 801000c:	1076      	asrs	r6, r6, #1
 801000e:	3708      	adds	r7, #8
 8010010:	e777      	b.n	800ff02 <_dtoa_r+0x3ca>
 8010012:	2502      	movs	r5, #2
 8010014:	e779      	b.n	800ff0a <_dtoa_r+0x3d2>
 8010016:	9f00      	ldr	r7, [sp, #0]
 8010018:	9e03      	ldr	r6, [sp, #12]
 801001a:	e794      	b.n	800ff46 <_dtoa_r+0x40e>
 801001c:	9901      	ldr	r1, [sp, #4]
 801001e:	4b4c      	ldr	r3, [pc, #304]	; (8010150 <_dtoa_r+0x618>)
 8010020:	4431      	add	r1, r6
 8010022:	910d      	str	r1, [sp, #52]	; 0x34
 8010024:	9908      	ldr	r1, [sp, #32]
 8010026:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801002a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801002e:	2900      	cmp	r1, #0
 8010030:	d043      	beq.n	80100ba <_dtoa_r+0x582>
 8010032:	494d      	ldr	r1, [pc, #308]	; (8010168 <_dtoa_r+0x630>)
 8010034:	2000      	movs	r0, #0
 8010036:	f7f0 fc09 	bl	800084c <__aeabi_ddiv>
 801003a:	4652      	mov	r2, sl
 801003c:	465b      	mov	r3, fp
 801003e:	f7f0 f923 	bl	8000288 <__aeabi_dsub>
 8010042:	9d01      	ldr	r5, [sp, #4]
 8010044:	4682      	mov	sl, r0
 8010046:	468b      	mov	fp, r1
 8010048:	4649      	mov	r1, r9
 801004a:	4640      	mov	r0, r8
 801004c:	f7f0 fd84 	bl	8000b58 <__aeabi_d2iz>
 8010050:	4606      	mov	r6, r0
 8010052:	f7f0 fa67 	bl	8000524 <__aeabi_i2d>
 8010056:	4602      	mov	r2, r0
 8010058:	460b      	mov	r3, r1
 801005a:	4640      	mov	r0, r8
 801005c:	4649      	mov	r1, r9
 801005e:	f7f0 f913 	bl	8000288 <__aeabi_dsub>
 8010062:	3630      	adds	r6, #48	; 0x30
 8010064:	f805 6b01 	strb.w	r6, [r5], #1
 8010068:	4652      	mov	r2, sl
 801006a:	465b      	mov	r3, fp
 801006c:	4680      	mov	r8, r0
 801006e:	4689      	mov	r9, r1
 8010070:	f7f0 fd34 	bl	8000adc <__aeabi_dcmplt>
 8010074:	2800      	cmp	r0, #0
 8010076:	d163      	bne.n	8010140 <_dtoa_r+0x608>
 8010078:	4642      	mov	r2, r8
 801007a:	464b      	mov	r3, r9
 801007c:	4936      	ldr	r1, [pc, #216]	; (8010158 <_dtoa_r+0x620>)
 801007e:	2000      	movs	r0, #0
 8010080:	f7f0 f902 	bl	8000288 <__aeabi_dsub>
 8010084:	4652      	mov	r2, sl
 8010086:	465b      	mov	r3, fp
 8010088:	f7f0 fd28 	bl	8000adc <__aeabi_dcmplt>
 801008c:	2800      	cmp	r0, #0
 801008e:	f040 80b5 	bne.w	80101fc <_dtoa_r+0x6c4>
 8010092:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010094:	429d      	cmp	r5, r3
 8010096:	d081      	beq.n	800ff9c <_dtoa_r+0x464>
 8010098:	4b30      	ldr	r3, [pc, #192]	; (801015c <_dtoa_r+0x624>)
 801009a:	2200      	movs	r2, #0
 801009c:	4650      	mov	r0, sl
 801009e:	4659      	mov	r1, fp
 80100a0:	f7f0 faaa 	bl	80005f8 <__aeabi_dmul>
 80100a4:	4b2d      	ldr	r3, [pc, #180]	; (801015c <_dtoa_r+0x624>)
 80100a6:	4682      	mov	sl, r0
 80100a8:	468b      	mov	fp, r1
 80100aa:	4640      	mov	r0, r8
 80100ac:	4649      	mov	r1, r9
 80100ae:	2200      	movs	r2, #0
 80100b0:	f7f0 faa2 	bl	80005f8 <__aeabi_dmul>
 80100b4:	4680      	mov	r8, r0
 80100b6:	4689      	mov	r9, r1
 80100b8:	e7c6      	b.n	8010048 <_dtoa_r+0x510>
 80100ba:	4650      	mov	r0, sl
 80100bc:	4659      	mov	r1, fp
 80100be:	f7f0 fa9b 	bl	80005f8 <__aeabi_dmul>
 80100c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80100c4:	9d01      	ldr	r5, [sp, #4]
 80100c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80100c8:	4682      	mov	sl, r0
 80100ca:	468b      	mov	fp, r1
 80100cc:	4649      	mov	r1, r9
 80100ce:	4640      	mov	r0, r8
 80100d0:	f7f0 fd42 	bl	8000b58 <__aeabi_d2iz>
 80100d4:	4606      	mov	r6, r0
 80100d6:	f7f0 fa25 	bl	8000524 <__aeabi_i2d>
 80100da:	3630      	adds	r6, #48	; 0x30
 80100dc:	4602      	mov	r2, r0
 80100de:	460b      	mov	r3, r1
 80100e0:	4640      	mov	r0, r8
 80100e2:	4649      	mov	r1, r9
 80100e4:	f7f0 f8d0 	bl	8000288 <__aeabi_dsub>
 80100e8:	f805 6b01 	strb.w	r6, [r5], #1
 80100ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80100ee:	429d      	cmp	r5, r3
 80100f0:	4680      	mov	r8, r0
 80100f2:	4689      	mov	r9, r1
 80100f4:	f04f 0200 	mov.w	r2, #0
 80100f8:	d124      	bne.n	8010144 <_dtoa_r+0x60c>
 80100fa:	4b1b      	ldr	r3, [pc, #108]	; (8010168 <_dtoa_r+0x630>)
 80100fc:	4650      	mov	r0, sl
 80100fe:	4659      	mov	r1, fp
 8010100:	f7f0 f8c4 	bl	800028c <__adddf3>
 8010104:	4602      	mov	r2, r0
 8010106:	460b      	mov	r3, r1
 8010108:	4640      	mov	r0, r8
 801010a:	4649      	mov	r1, r9
 801010c:	f7f0 fd04 	bl	8000b18 <__aeabi_dcmpgt>
 8010110:	2800      	cmp	r0, #0
 8010112:	d173      	bne.n	80101fc <_dtoa_r+0x6c4>
 8010114:	4652      	mov	r2, sl
 8010116:	465b      	mov	r3, fp
 8010118:	4913      	ldr	r1, [pc, #76]	; (8010168 <_dtoa_r+0x630>)
 801011a:	2000      	movs	r0, #0
 801011c:	f7f0 f8b4 	bl	8000288 <__aeabi_dsub>
 8010120:	4602      	mov	r2, r0
 8010122:	460b      	mov	r3, r1
 8010124:	4640      	mov	r0, r8
 8010126:	4649      	mov	r1, r9
 8010128:	f7f0 fcd8 	bl	8000adc <__aeabi_dcmplt>
 801012c:	2800      	cmp	r0, #0
 801012e:	f43f af35 	beq.w	800ff9c <_dtoa_r+0x464>
 8010132:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010134:	1e6b      	subs	r3, r5, #1
 8010136:	930f      	str	r3, [sp, #60]	; 0x3c
 8010138:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801013c:	2b30      	cmp	r3, #48	; 0x30
 801013e:	d0f8      	beq.n	8010132 <_dtoa_r+0x5fa>
 8010140:	9700      	str	r7, [sp, #0]
 8010142:	e049      	b.n	80101d8 <_dtoa_r+0x6a0>
 8010144:	4b05      	ldr	r3, [pc, #20]	; (801015c <_dtoa_r+0x624>)
 8010146:	f7f0 fa57 	bl	80005f8 <__aeabi_dmul>
 801014a:	4680      	mov	r8, r0
 801014c:	4689      	mov	r9, r1
 801014e:	e7bd      	b.n	80100cc <_dtoa_r+0x594>
 8010150:	08014170 	.word	0x08014170
 8010154:	08014148 	.word	0x08014148
 8010158:	3ff00000 	.word	0x3ff00000
 801015c:	40240000 	.word	0x40240000
 8010160:	401c0000 	.word	0x401c0000
 8010164:	40140000 	.word	0x40140000
 8010168:	3fe00000 	.word	0x3fe00000
 801016c:	9d01      	ldr	r5, [sp, #4]
 801016e:	4656      	mov	r6, sl
 8010170:	465f      	mov	r7, fp
 8010172:	4642      	mov	r2, r8
 8010174:	464b      	mov	r3, r9
 8010176:	4630      	mov	r0, r6
 8010178:	4639      	mov	r1, r7
 801017a:	f7f0 fb67 	bl	800084c <__aeabi_ddiv>
 801017e:	f7f0 fceb 	bl	8000b58 <__aeabi_d2iz>
 8010182:	4682      	mov	sl, r0
 8010184:	f7f0 f9ce 	bl	8000524 <__aeabi_i2d>
 8010188:	4642      	mov	r2, r8
 801018a:	464b      	mov	r3, r9
 801018c:	f7f0 fa34 	bl	80005f8 <__aeabi_dmul>
 8010190:	4602      	mov	r2, r0
 8010192:	460b      	mov	r3, r1
 8010194:	4630      	mov	r0, r6
 8010196:	4639      	mov	r1, r7
 8010198:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801019c:	f7f0 f874 	bl	8000288 <__aeabi_dsub>
 80101a0:	f805 6b01 	strb.w	r6, [r5], #1
 80101a4:	9e01      	ldr	r6, [sp, #4]
 80101a6:	9f03      	ldr	r7, [sp, #12]
 80101a8:	1bae      	subs	r6, r5, r6
 80101aa:	42b7      	cmp	r7, r6
 80101ac:	4602      	mov	r2, r0
 80101ae:	460b      	mov	r3, r1
 80101b0:	d135      	bne.n	801021e <_dtoa_r+0x6e6>
 80101b2:	f7f0 f86b 	bl	800028c <__adddf3>
 80101b6:	4642      	mov	r2, r8
 80101b8:	464b      	mov	r3, r9
 80101ba:	4606      	mov	r6, r0
 80101bc:	460f      	mov	r7, r1
 80101be:	f7f0 fcab 	bl	8000b18 <__aeabi_dcmpgt>
 80101c2:	b9d0      	cbnz	r0, 80101fa <_dtoa_r+0x6c2>
 80101c4:	4642      	mov	r2, r8
 80101c6:	464b      	mov	r3, r9
 80101c8:	4630      	mov	r0, r6
 80101ca:	4639      	mov	r1, r7
 80101cc:	f7f0 fc7c 	bl	8000ac8 <__aeabi_dcmpeq>
 80101d0:	b110      	cbz	r0, 80101d8 <_dtoa_r+0x6a0>
 80101d2:	f01a 0f01 	tst.w	sl, #1
 80101d6:	d110      	bne.n	80101fa <_dtoa_r+0x6c2>
 80101d8:	4620      	mov	r0, r4
 80101da:	ee18 1a10 	vmov	r1, s16
 80101de:	f000 fe6b 	bl	8010eb8 <_Bfree>
 80101e2:	2300      	movs	r3, #0
 80101e4:	9800      	ldr	r0, [sp, #0]
 80101e6:	702b      	strb	r3, [r5, #0]
 80101e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80101ea:	3001      	adds	r0, #1
 80101ec:	6018      	str	r0, [r3, #0]
 80101ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	f43f acf1 	beq.w	800fbd8 <_dtoa_r+0xa0>
 80101f6:	601d      	str	r5, [r3, #0]
 80101f8:	e4ee      	b.n	800fbd8 <_dtoa_r+0xa0>
 80101fa:	9f00      	ldr	r7, [sp, #0]
 80101fc:	462b      	mov	r3, r5
 80101fe:	461d      	mov	r5, r3
 8010200:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010204:	2a39      	cmp	r2, #57	; 0x39
 8010206:	d106      	bne.n	8010216 <_dtoa_r+0x6de>
 8010208:	9a01      	ldr	r2, [sp, #4]
 801020a:	429a      	cmp	r2, r3
 801020c:	d1f7      	bne.n	80101fe <_dtoa_r+0x6c6>
 801020e:	9901      	ldr	r1, [sp, #4]
 8010210:	2230      	movs	r2, #48	; 0x30
 8010212:	3701      	adds	r7, #1
 8010214:	700a      	strb	r2, [r1, #0]
 8010216:	781a      	ldrb	r2, [r3, #0]
 8010218:	3201      	adds	r2, #1
 801021a:	701a      	strb	r2, [r3, #0]
 801021c:	e790      	b.n	8010140 <_dtoa_r+0x608>
 801021e:	4ba6      	ldr	r3, [pc, #664]	; (80104b8 <_dtoa_r+0x980>)
 8010220:	2200      	movs	r2, #0
 8010222:	f7f0 f9e9 	bl	80005f8 <__aeabi_dmul>
 8010226:	2200      	movs	r2, #0
 8010228:	2300      	movs	r3, #0
 801022a:	4606      	mov	r6, r0
 801022c:	460f      	mov	r7, r1
 801022e:	f7f0 fc4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8010232:	2800      	cmp	r0, #0
 8010234:	d09d      	beq.n	8010172 <_dtoa_r+0x63a>
 8010236:	e7cf      	b.n	80101d8 <_dtoa_r+0x6a0>
 8010238:	9a08      	ldr	r2, [sp, #32]
 801023a:	2a00      	cmp	r2, #0
 801023c:	f000 80d7 	beq.w	80103ee <_dtoa_r+0x8b6>
 8010240:	9a06      	ldr	r2, [sp, #24]
 8010242:	2a01      	cmp	r2, #1
 8010244:	f300 80ba 	bgt.w	80103bc <_dtoa_r+0x884>
 8010248:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801024a:	2a00      	cmp	r2, #0
 801024c:	f000 80b2 	beq.w	80103b4 <_dtoa_r+0x87c>
 8010250:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010254:	9e07      	ldr	r6, [sp, #28]
 8010256:	9d04      	ldr	r5, [sp, #16]
 8010258:	9a04      	ldr	r2, [sp, #16]
 801025a:	441a      	add	r2, r3
 801025c:	9204      	str	r2, [sp, #16]
 801025e:	9a05      	ldr	r2, [sp, #20]
 8010260:	2101      	movs	r1, #1
 8010262:	441a      	add	r2, r3
 8010264:	4620      	mov	r0, r4
 8010266:	9205      	str	r2, [sp, #20]
 8010268:	f000 ff28 	bl	80110bc <__i2b>
 801026c:	4607      	mov	r7, r0
 801026e:	2d00      	cmp	r5, #0
 8010270:	dd0c      	ble.n	801028c <_dtoa_r+0x754>
 8010272:	9b05      	ldr	r3, [sp, #20]
 8010274:	2b00      	cmp	r3, #0
 8010276:	dd09      	ble.n	801028c <_dtoa_r+0x754>
 8010278:	42ab      	cmp	r3, r5
 801027a:	9a04      	ldr	r2, [sp, #16]
 801027c:	bfa8      	it	ge
 801027e:	462b      	movge	r3, r5
 8010280:	1ad2      	subs	r2, r2, r3
 8010282:	9204      	str	r2, [sp, #16]
 8010284:	9a05      	ldr	r2, [sp, #20]
 8010286:	1aed      	subs	r5, r5, r3
 8010288:	1ad3      	subs	r3, r2, r3
 801028a:	9305      	str	r3, [sp, #20]
 801028c:	9b07      	ldr	r3, [sp, #28]
 801028e:	b31b      	cbz	r3, 80102d8 <_dtoa_r+0x7a0>
 8010290:	9b08      	ldr	r3, [sp, #32]
 8010292:	2b00      	cmp	r3, #0
 8010294:	f000 80af 	beq.w	80103f6 <_dtoa_r+0x8be>
 8010298:	2e00      	cmp	r6, #0
 801029a:	dd13      	ble.n	80102c4 <_dtoa_r+0x78c>
 801029c:	4639      	mov	r1, r7
 801029e:	4632      	mov	r2, r6
 80102a0:	4620      	mov	r0, r4
 80102a2:	f000 ffcb 	bl	801123c <__pow5mult>
 80102a6:	ee18 2a10 	vmov	r2, s16
 80102aa:	4601      	mov	r1, r0
 80102ac:	4607      	mov	r7, r0
 80102ae:	4620      	mov	r0, r4
 80102b0:	f000 ff1a 	bl	80110e8 <__multiply>
 80102b4:	ee18 1a10 	vmov	r1, s16
 80102b8:	4680      	mov	r8, r0
 80102ba:	4620      	mov	r0, r4
 80102bc:	f000 fdfc 	bl	8010eb8 <_Bfree>
 80102c0:	ee08 8a10 	vmov	s16, r8
 80102c4:	9b07      	ldr	r3, [sp, #28]
 80102c6:	1b9a      	subs	r2, r3, r6
 80102c8:	d006      	beq.n	80102d8 <_dtoa_r+0x7a0>
 80102ca:	ee18 1a10 	vmov	r1, s16
 80102ce:	4620      	mov	r0, r4
 80102d0:	f000 ffb4 	bl	801123c <__pow5mult>
 80102d4:	ee08 0a10 	vmov	s16, r0
 80102d8:	2101      	movs	r1, #1
 80102da:	4620      	mov	r0, r4
 80102dc:	f000 feee 	bl	80110bc <__i2b>
 80102e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	4606      	mov	r6, r0
 80102e6:	f340 8088 	ble.w	80103fa <_dtoa_r+0x8c2>
 80102ea:	461a      	mov	r2, r3
 80102ec:	4601      	mov	r1, r0
 80102ee:	4620      	mov	r0, r4
 80102f0:	f000 ffa4 	bl	801123c <__pow5mult>
 80102f4:	9b06      	ldr	r3, [sp, #24]
 80102f6:	2b01      	cmp	r3, #1
 80102f8:	4606      	mov	r6, r0
 80102fa:	f340 8081 	ble.w	8010400 <_dtoa_r+0x8c8>
 80102fe:	f04f 0800 	mov.w	r8, #0
 8010302:	6933      	ldr	r3, [r6, #16]
 8010304:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010308:	6918      	ldr	r0, [r3, #16]
 801030a:	f000 fe87 	bl	801101c <__hi0bits>
 801030e:	f1c0 0020 	rsb	r0, r0, #32
 8010312:	9b05      	ldr	r3, [sp, #20]
 8010314:	4418      	add	r0, r3
 8010316:	f010 001f 	ands.w	r0, r0, #31
 801031a:	f000 8092 	beq.w	8010442 <_dtoa_r+0x90a>
 801031e:	f1c0 0320 	rsb	r3, r0, #32
 8010322:	2b04      	cmp	r3, #4
 8010324:	f340 808a 	ble.w	801043c <_dtoa_r+0x904>
 8010328:	f1c0 001c 	rsb	r0, r0, #28
 801032c:	9b04      	ldr	r3, [sp, #16]
 801032e:	4403      	add	r3, r0
 8010330:	9304      	str	r3, [sp, #16]
 8010332:	9b05      	ldr	r3, [sp, #20]
 8010334:	4403      	add	r3, r0
 8010336:	4405      	add	r5, r0
 8010338:	9305      	str	r3, [sp, #20]
 801033a:	9b04      	ldr	r3, [sp, #16]
 801033c:	2b00      	cmp	r3, #0
 801033e:	dd07      	ble.n	8010350 <_dtoa_r+0x818>
 8010340:	ee18 1a10 	vmov	r1, s16
 8010344:	461a      	mov	r2, r3
 8010346:	4620      	mov	r0, r4
 8010348:	f000 ffd2 	bl	80112f0 <__lshift>
 801034c:	ee08 0a10 	vmov	s16, r0
 8010350:	9b05      	ldr	r3, [sp, #20]
 8010352:	2b00      	cmp	r3, #0
 8010354:	dd05      	ble.n	8010362 <_dtoa_r+0x82a>
 8010356:	4631      	mov	r1, r6
 8010358:	461a      	mov	r2, r3
 801035a:	4620      	mov	r0, r4
 801035c:	f000 ffc8 	bl	80112f0 <__lshift>
 8010360:	4606      	mov	r6, r0
 8010362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010364:	2b00      	cmp	r3, #0
 8010366:	d06e      	beq.n	8010446 <_dtoa_r+0x90e>
 8010368:	ee18 0a10 	vmov	r0, s16
 801036c:	4631      	mov	r1, r6
 801036e:	f001 f82f 	bl	80113d0 <__mcmp>
 8010372:	2800      	cmp	r0, #0
 8010374:	da67      	bge.n	8010446 <_dtoa_r+0x90e>
 8010376:	9b00      	ldr	r3, [sp, #0]
 8010378:	3b01      	subs	r3, #1
 801037a:	ee18 1a10 	vmov	r1, s16
 801037e:	9300      	str	r3, [sp, #0]
 8010380:	220a      	movs	r2, #10
 8010382:	2300      	movs	r3, #0
 8010384:	4620      	mov	r0, r4
 8010386:	f000 fdb9 	bl	8010efc <__multadd>
 801038a:	9b08      	ldr	r3, [sp, #32]
 801038c:	ee08 0a10 	vmov	s16, r0
 8010390:	2b00      	cmp	r3, #0
 8010392:	f000 81b1 	beq.w	80106f8 <_dtoa_r+0xbc0>
 8010396:	2300      	movs	r3, #0
 8010398:	4639      	mov	r1, r7
 801039a:	220a      	movs	r2, #10
 801039c:	4620      	mov	r0, r4
 801039e:	f000 fdad 	bl	8010efc <__multadd>
 80103a2:	9b02      	ldr	r3, [sp, #8]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	4607      	mov	r7, r0
 80103a8:	f300 808e 	bgt.w	80104c8 <_dtoa_r+0x990>
 80103ac:	9b06      	ldr	r3, [sp, #24]
 80103ae:	2b02      	cmp	r3, #2
 80103b0:	dc51      	bgt.n	8010456 <_dtoa_r+0x91e>
 80103b2:	e089      	b.n	80104c8 <_dtoa_r+0x990>
 80103b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80103b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80103ba:	e74b      	b.n	8010254 <_dtoa_r+0x71c>
 80103bc:	9b03      	ldr	r3, [sp, #12]
 80103be:	1e5e      	subs	r6, r3, #1
 80103c0:	9b07      	ldr	r3, [sp, #28]
 80103c2:	42b3      	cmp	r3, r6
 80103c4:	bfbf      	itttt	lt
 80103c6:	9b07      	ldrlt	r3, [sp, #28]
 80103c8:	9607      	strlt	r6, [sp, #28]
 80103ca:	1af2      	sublt	r2, r6, r3
 80103cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80103ce:	bfb6      	itet	lt
 80103d0:	189b      	addlt	r3, r3, r2
 80103d2:	1b9e      	subge	r6, r3, r6
 80103d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80103d6:	9b03      	ldr	r3, [sp, #12]
 80103d8:	bfb8      	it	lt
 80103da:	2600      	movlt	r6, #0
 80103dc:	2b00      	cmp	r3, #0
 80103de:	bfb7      	itett	lt
 80103e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80103e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80103e8:	1a9d      	sublt	r5, r3, r2
 80103ea:	2300      	movlt	r3, #0
 80103ec:	e734      	b.n	8010258 <_dtoa_r+0x720>
 80103ee:	9e07      	ldr	r6, [sp, #28]
 80103f0:	9d04      	ldr	r5, [sp, #16]
 80103f2:	9f08      	ldr	r7, [sp, #32]
 80103f4:	e73b      	b.n	801026e <_dtoa_r+0x736>
 80103f6:	9a07      	ldr	r2, [sp, #28]
 80103f8:	e767      	b.n	80102ca <_dtoa_r+0x792>
 80103fa:	9b06      	ldr	r3, [sp, #24]
 80103fc:	2b01      	cmp	r3, #1
 80103fe:	dc18      	bgt.n	8010432 <_dtoa_r+0x8fa>
 8010400:	f1ba 0f00 	cmp.w	sl, #0
 8010404:	d115      	bne.n	8010432 <_dtoa_r+0x8fa>
 8010406:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801040a:	b993      	cbnz	r3, 8010432 <_dtoa_r+0x8fa>
 801040c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010410:	0d1b      	lsrs	r3, r3, #20
 8010412:	051b      	lsls	r3, r3, #20
 8010414:	b183      	cbz	r3, 8010438 <_dtoa_r+0x900>
 8010416:	9b04      	ldr	r3, [sp, #16]
 8010418:	3301      	adds	r3, #1
 801041a:	9304      	str	r3, [sp, #16]
 801041c:	9b05      	ldr	r3, [sp, #20]
 801041e:	3301      	adds	r3, #1
 8010420:	9305      	str	r3, [sp, #20]
 8010422:	f04f 0801 	mov.w	r8, #1
 8010426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010428:	2b00      	cmp	r3, #0
 801042a:	f47f af6a 	bne.w	8010302 <_dtoa_r+0x7ca>
 801042e:	2001      	movs	r0, #1
 8010430:	e76f      	b.n	8010312 <_dtoa_r+0x7da>
 8010432:	f04f 0800 	mov.w	r8, #0
 8010436:	e7f6      	b.n	8010426 <_dtoa_r+0x8ee>
 8010438:	4698      	mov	r8, r3
 801043a:	e7f4      	b.n	8010426 <_dtoa_r+0x8ee>
 801043c:	f43f af7d 	beq.w	801033a <_dtoa_r+0x802>
 8010440:	4618      	mov	r0, r3
 8010442:	301c      	adds	r0, #28
 8010444:	e772      	b.n	801032c <_dtoa_r+0x7f4>
 8010446:	9b03      	ldr	r3, [sp, #12]
 8010448:	2b00      	cmp	r3, #0
 801044a:	dc37      	bgt.n	80104bc <_dtoa_r+0x984>
 801044c:	9b06      	ldr	r3, [sp, #24]
 801044e:	2b02      	cmp	r3, #2
 8010450:	dd34      	ble.n	80104bc <_dtoa_r+0x984>
 8010452:	9b03      	ldr	r3, [sp, #12]
 8010454:	9302      	str	r3, [sp, #8]
 8010456:	9b02      	ldr	r3, [sp, #8]
 8010458:	b96b      	cbnz	r3, 8010476 <_dtoa_r+0x93e>
 801045a:	4631      	mov	r1, r6
 801045c:	2205      	movs	r2, #5
 801045e:	4620      	mov	r0, r4
 8010460:	f000 fd4c 	bl	8010efc <__multadd>
 8010464:	4601      	mov	r1, r0
 8010466:	4606      	mov	r6, r0
 8010468:	ee18 0a10 	vmov	r0, s16
 801046c:	f000 ffb0 	bl	80113d0 <__mcmp>
 8010470:	2800      	cmp	r0, #0
 8010472:	f73f adbb 	bgt.w	800ffec <_dtoa_r+0x4b4>
 8010476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010478:	9d01      	ldr	r5, [sp, #4]
 801047a:	43db      	mvns	r3, r3
 801047c:	9300      	str	r3, [sp, #0]
 801047e:	f04f 0800 	mov.w	r8, #0
 8010482:	4631      	mov	r1, r6
 8010484:	4620      	mov	r0, r4
 8010486:	f000 fd17 	bl	8010eb8 <_Bfree>
 801048a:	2f00      	cmp	r7, #0
 801048c:	f43f aea4 	beq.w	80101d8 <_dtoa_r+0x6a0>
 8010490:	f1b8 0f00 	cmp.w	r8, #0
 8010494:	d005      	beq.n	80104a2 <_dtoa_r+0x96a>
 8010496:	45b8      	cmp	r8, r7
 8010498:	d003      	beq.n	80104a2 <_dtoa_r+0x96a>
 801049a:	4641      	mov	r1, r8
 801049c:	4620      	mov	r0, r4
 801049e:	f000 fd0b 	bl	8010eb8 <_Bfree>
 80104a2:	4639      	mov	r1, r7
 80104a4:	4620      	mov	r0, r4
 80104a6:	f000 fd07 	bl	8010eb8 <_Bfree>
 80104aa:	e695      	b.n	80101d8 <_dtoa_r+0x6a0>
 80104ac:	2600      	movs	r6, #0
 80104ae:	4637      	mov	r7, r6
 80104b0:	e7e1      	b.n	8010476 <_dtoa_r+0x93e>
 80104b2:	9700      	str	r7, [sp, #0]
 80104b4:	4637      	mov	r7, r6
 80104b6:	e599      	b.n	800ffec <_dtoa_r+0x4b4>
 80104b8:	40240000 	.word	0x40240000
 80104bc:	9b08      	ldr	r3, [sp, #32]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	f000 80ca 	beq.w	8010658 <_dtoa_r+0xb20>
 80104c4:	9b03      	ldr	r3, [sp, #12]
 80104c6:	9302      	str	r3, [sp, #8]
 80104c8:	2d00      	cmp	r5, #0
 80104ca:	dd05      	ble.n	80104d8 <_dtoa_r+0x9a0>
 80104cc:	4639      	mov	r1, r7
 80104ce:	462a      	mov	r2, r5
 80104d0:	4620      	mov	r0, r4
 80104d2:	f000 ff0d 	bl	80112f0 <__lshift>
 80104d6:	4607      	mov	r7, r0
 80104d8:	f1b8 0f00 	cmp.w	r8, #0
 80104dc:	d05b      	beq.n	8010596 <_dtoa_r+0xa5e>
 80104de:	6879      	ldr	r1, [r7, #4]
 80104e0:	4620      	mov	r0, r4
 80104e2:	f000 fca9 	bl	8010e38 <_Balloc>
 80104e6:	4605      	mov	r5, r0
 80104e8:	b928      	cbnz	r0, 80104f6 <_dtoa_r+0x9be>
 80104ea:	4b87      	ldr	r3, [pc, #540]	; (8010708 <_dtoa_r+0xbd0>)
 80104ec:	4602      	mov	r2, r0
 80104ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80104f2:	f7ff bb3b 	b.w	800fb6c <_dtoa_r+0x34>
 80104f6:	693a      	ldr	r2, [r7, #16]
 80104f8:	3202      	adds	r2, #2
 80104fa:	0092      	lsls	r2, r2, #2
 80104fc:	f107 010c 	add.w	r1, r7, #12
 8010500:	300c      	adds	r0, #12
 8010502:	f7fd febf 	bl	800e284 <memcpy>
 8010506:	2201      	movs	r2, #1
 8010508:	4629      	mov	r1, r5
 801050a:	4620      	mov	r0, r4
 801050c:	f000 fef0 	bl	80112f0 <__lshift>
 8010510:	9b01      	ldr	r3, [sp, #4]
 8010512:	f103 0901 	add.w	r9, r3, #1
 8010516:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801051a:	4413      	add	r3, r2
 801051c:	9305      	str	r3, [sp, #20]
 801051e:	f00a 0301 	and.w	r3, sl, #1
 8010522:	46b8      	mov	r8, r7
 8010524:	9304      	str	r3, [sp, #16]
 8010526:	4607      	mov	r7, r0
 8010528:	4631      	mov	r1, r6
 801052a:	ee18 0a10 	vmov	r0, s16
 801052e:	f7ff fa77 	bl	800fa20 <quorem>
 8010532:	4641      	mov	r1, r8
 8010534:	9002      	str	r0, [sp, #8]
 8010536:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801053a:	ee18 0a10 	vmov	r0, s16
 801053e:	f000 ff47 	bl	80113d0 <__mcmp>
 8010542:	463a      	mov	r2, r7
 8010544:	9003      	str	r0, [sp, #12]
 8010546:	4631      	mov	r1, r6
 8010548:	4620      	mov	r0, r4
 801054a:	f000 ff5d 	bl	8011408 <__mdiff>
 801054e:	68c2      	ldr	r2, [r0, #12]
 8010550:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8010554:	4605      	mov	r5, r0
 8010556:	bb02      	cbnz	r2, 801059a <_dtoa_r+0xa62>
 8010558:	4601      	mov	r1, r0
 801055a:	ee18 0a10 	vmov	r0, s16
 801055e:	f000 ff37 	bl	80113d0 <__mcmp>
 8010562:	4602      	mov	r2, r0
 8010564:	4629      	mov	r1, r5
 8010566:	4620      	mov	r0, r4
 8010568:	9207      	str	r2, [sp, #28]
 801056a:	f000 fca5 	bl	8010eb8 <_Bfree>
 801056e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8010572:	ea43 0102 	orr.w	r1, r3, r2
 8010576:	9b04      	ldr	r3, [sp, #16]
 8010578:	430b      	orrs	r3, r1
 801057a:	464d      	mov	r5, r9
 801057c:	d10f      	bne.n	801059e <_dtoa_r+0xa66>
 801057e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010582:	d02a      	beq.n	80105da <_dtoa_r+0xaa2>
 8010584:	9b03      	ldr	r3, [sp, #12]
 8010586:	2b00      	cmp	r3, #0
 8010588:	dd02      	ble.n	8010590 <_dtoa_r+0xa58>
 801058a:	9b02      	ldr	r3, [sp, #8]
 801058c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010590:	f88b a000 	strb.w	sl, [fp]
 8010594:	e775      	b.n	8010482 <_dtoa_r+0x94a>
 8010596:	4638      	mov	r0, r7
 8010598:	e7ba      	b.n	8010510 <_dtoa_r+0x9d8>
 801059a:	2201      	movs	r2, #1
 801059c:	e7e2      	b.n	8010564 <_dtoa_r+0xa2c>
 801059e:	9b03      	ldr	r3, [sp, #12]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	db04      	blt.n	80105ae <_dtoa_r+0xa76>
 80105a4:	9906      	ldr	r1, [sp, #24]
 80105a6:	430b      	orrs	r3, r1
 80105a8:	9904      	ldr	r1, [sp, #16]
 80105aa:	430b      	orrs	r3, r1
 80105ac:	d122      	bne.n	80105f4 <_dtoa_r+0xabc>
 80105ae:	2a00      	cmp	r2, #0
 80105b0:	ddee      	ble.n	8010590 <_dtoa_r+0xa58>
 80105b2:	ee18 1a10 	vmov	r1, s16
 80105b6:	2201      	movs	r2, #1
 80105b8:	4620      	mov	r0, r4
 80105ba:	f000 fe99 	bl	80112f0 <__lshift>
 80105be:	4631      	mov	r1, r6
 80105c0:	ee08 0a10 	vmov	s16, r0
 80105c4:	f000 ff04 	bl	80113d0 <__mcmp>
 80105c8:	2800      	cmp	r0, #0
 80105ca:	dc03      	bgt.n	80105d4 <_dtoa_r+0xa9c>
 80105cc:	d1e0      	bne.n	8010590 <_dtoa_r+0xa58>
 80105ce:	f01a 0f01 	tst.w	sl, #1
 80105d2:	d0dd      	beq.n	8010590 <_dtoa_r+0xa58>
 80105d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80105d8:	d1d7      	bne.n	801058a <_dtoa_r+0xa52>
 80105da:	2339      	movs	r3, #57	; 0x39
 80105dc:	f88b 3000 	strb.w	r3, [fp]
 80105e0:	462b      	mov	r3, r5
 80105e2:	461d      	mov	r5, r3
 80105e4:	3b01      	subs	r3, #1
 80105e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80105ea:	2a39      	cmp	r2, #57	; 0x39
 80105ec:	d071      	beq.n	80106d2 <_dtoa_r+0xb9a>
 80105ee:	3201      	adds	r2, #1
 80105f0:	701a      	strb	r2, [r3, #0]
 80105f2:	e746      	b.n	8010482 <_dtoa_r+0x94a>
 80105f4:	2a00      	cmp	r2, #0
 80105f6:	dd07      	ble.n	8010608 <_dtoa_r+0xad0>
 80105f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80105fc:	d0ed      	beq.n	80105da <_dtoa_r+0xaa2>
 80105fe:	f10a 0301 	add.w	r3, sl, #1
 8010602:	f88b 3000 	strb.w	r3, [fp]
 8010606:	e73c      	b.n	8010482 <_dtoa_r+0x94a>
 8010608:	9b05      	ldr	r3, [sp, #20]
 801060a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801060e:	4599      	cmp	r9, r3
 8010610:	d047      	beq.n	80106a2 <_dtoa_r+0xb6a>
 8010612:	ee18 1a10 	vmov	r1, s16
 8010616:	2300      	movs	r3, #0
 8010618:	220a      	movs	r2, #10
 801061a:	4620      	mov	r0, r4
 801061c:	f000 fc6e 	bl	8010efc <__multadd>
 8010620:	45b8      	cmp	r8, r7
 8010622:	ee08 0a10 	vmov	s16, r0
 8010626:	f04f 0300 	mov.w	r3, #0
 801062a:	f04f 020a 	mov.w	r2, #10
 801062e:	4641      	mov	r1, r8
 8010630:	4620      	mov	r0, r4
 8010632:	d106      	bne.n	8010642 <_dtoa_r+0xb0a>
 8010634:	f000 fc62 	bl	8010efc <__multadd>
 8010638:	4680      	mov	r8, r0
 801063a:	4607      	mov	r7, r0
 801063c:	f109 0901 	add.w	r9, r9, #1
 8010640:	e772      	b.n	8010528 <_dtoa_r+0x9f0>
 8010642:	f000 fc5b 	bl	8010efc <__multadd>
 8010646:	4639      	mov	r1, r7
 8010648:	4680      	mov	r8, r0
 801064a:	2300      	movs	r3, #0
 801064c:	220a      	movs	r2, #10
 801064e:	4620      	mov	r0, r4
 8010650:	f000 fc54 	bl	8010efc <__multadd>
 8010654:	4607      	mov	r7, r0
 8010656:	e7f1      	b.n	801063c <_dtoa_r+0xb04>
 8010658:	9b03      	ldr	r3, [sp, #12]
 801065a:	9302      	str	r3, [sp, #8]
 801065c:	9d01      	ldr	r5, [sp, #4]
 801065e:	ee18 0a10 	vmov	r0, s16
 8010662:	4631      	mov	r1, r6
 8010664:	f7ff f9dc 	bl	800fa20 <quorem>
 8010668:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801066c:	9b01      	ldr	r3, [sp, #4]
 801066e:	f805 ab01 	strb.w	sl, [r5], #1
 8010672:	1aea      	subs	r2, r5, r3
 8010674:	9b02      	ldr	r3, [sp, #8]
 8010676:	4293      	cmp	r3, r2
 8010678:	dd09      	ble.n	801068e <_dtoa_r+0xb56>
 801067a:	ee18 1a10 	vmov	r1, s16
 801067e:	2300      	movs	r3, #0
 8010680:	220a      	movs	r2, #10
 8010682:	4620      	mov	r0, r4
 8010684:	f000 fc3a 	bl	8010efc <__multadd>
 8010688:	ee08 0a10 	vmov	s16, r0
 801068c:	e7e7      	b.n	801065e <_dtoa_r+0xb26>
 801068e:	9b02      	ldr	r3, [sp, #8]
 8010690:	2b00      	cmp	r3, #0
 8010692:	bfc8      	it	gt
 8010694:	461d      	movgt	r5, r3
 8010696:	9b01      	ldr	r3, [sp, #4]
 8010698:	bfd8      	it	le
 801069a:	2501      	movle	r5, #1
 801069c:	441d      	add	r5, r3
 801069e:	f04f 0800 	mov.w	r8, #0
 80106a2:	ee18 1a10 	vmov	r1, s16
 80106a6:	2201      	movs	r2, #1
 80106a8:	4620      	mov	r0, r4
 80106aa:	f000 fe21 	bl	80112f0 <__lshift>
 80106ae:	4631      	mov	r1, r6
 80106b0:	ee08 0a10 	vmov	s16, r0
 80106b4:	f000 fe8c 	bl	80113d0 <__mcmp>
 80106b8:	2800      	cmp	r0, #0
 80106ba:	dc91      	bgt.n	80105e0 <_dtoa_r+0xaa8>
 80106bc:	d102      	bne.n	80106c4 <_dtoa_r+0xb8c>
 80106be:	f01a 0f01 	tst.w	sl, #1
 80106c2:	d18d      	bne.n	80105e0 <_dtoa_r+0xaa8>
 80106c4:	462b      	mov	r3, r5
 80106c6:	461d      	mov	r5, r3
 80106c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80106cc:	2a30      	cmp	r2, #48	; 0x30
 80106ce:	d0fa      	beq.n	80106c6 <_dtoa_r+0xb8e>
 80106d0:	e6d7      	b.n	8010482 <_dtoa_r+0x94a>
 80106d2:	9a01      	ldr	r2, [sp, #4]
 80106d4:	429a      	cmp	r2, r3
 80106d6:	d184      	bne.n	80105e2 <_dtoa_r+0xaaa>
 80106d8:	9b00      	ldr	r3, [sp, #0]
 80106da:	3301      	adds	r3, #1
 80106dc:	9300      	str	r3, [sp, #0]
 80106de:	2331      	movs	r3, #49	; 0x31
 80106e0:	7013      	strb	r3, [r2, #0]
 80106e2:	e6ce      	b.n	8010482 <_dtoa_r+0x94a>
 80106e4:	4b09      	ldr	r3, [pc, #36]	; (801070c <_dtoa_r+0xbd4>)
 80106e6:	f7ff ba95 	b.w	800fc14 <_dtoa_r+0xdc>
 80106ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	f47f aa6e 	bne.w	800fbce <_dtoa_r+0x96>
 80106f2:	4b07      	ldr	r3, [pc, #28]	; (8010710 <_dtoa_r+0xbd8>)
 80106f4:	f7ff ba8e 	b.w	800fc14 <_dtoa_r+0xdc>
 80106f8:	9b02      	ldr	r3, [sp, #8]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	dcae      	bgt.n	801065c <_dtoa_r+0xb24>
 80106fe:	9b06      	ldr	r3, [sp, #24]
 8010700:	2b02      	cmp	r3, #2
 8010702:	f73f aea8 	bgt.w	8010456 <_dtoa_r+0x91e>
 8010706:	e7a9      	b.n	801065c <_dtoa_r+0xb24>
 8010708:	0801405f 	.word	0x0801405f
 801070c:	08013f68 	.word	0x08013f68
 8010710:	08013fe0 	.word	0x08013fe0

08010714 <rshift>:
 8010714:	6903      	ldr	r3, [r0, #16]
 8010716:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801071a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801071e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010722:	f100 0414 	add.w	r4, r0, #20
 8010726:	dd45      	ble.n	80107b4 <rshift+0xa0>
 8010728:	f011 011f 	ands.w	r1, r1, #31
 801072c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010730:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010734:	d10c      	bne.n	8010750 <rshift+0x3c>
 8010736:	f100 0710 	add.w	r7, r0, #16
 801073a:	4629      	mov	r1, r5
 801073c:	42b1      	cmp	r1, r6
 801073e:	d334      	bcc.n	80107aa <rshift+0x96>
 8010740:	1a9b      	subs	r3, r3, r2
 8010742:	009b      	lsls	r3, r3, #2
 8010744:	1eea      	subs	r2, r5, #3
 8010746:	4296      	cmp	r6, r2
 8010748:	bf38      	it	cc
 801074a:	2300      	movcc	r3, #0
 801074c:	4423      	add	r3, r4
 801074e:	e015      	b.n	801077c <rshift+0x68>
 8010750:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010754:	f1c1 0820 	rsb	r8, r1, #32
 8010758:	40cf      	lsrs	r7, r1
 801075a:	f105 0e04 	add.w	lr, r5, #4
 801075e:	46a1      	mov	r9, r4
 8010760:	4576      	cmp	r6, lr
 8010762:	46f4      	mov	ip, lr
 8010764:	d815      	bhi.n	8010792 <rshift+0x7e>
 8010766:	1a9a      	subs	r2, r3, r2
 8010768:	0092      	lsls	r2, r2, #2
 801076a:	3a04      	subs	r2, #4
 801076c:	3501      	adds	r5, #1
 801076e:	42ae      	cmp	r6, r5
 8010770:	bf38      	it	cc
 8010772:	2200      	movcc	r2, #0
 8010774:	18a3      	adds	r3, r4, r2
 8010776:	50a7      	str	r7, [r4, r2]
 8010778:	b107      	cbz	r7, 801077c <rshift+0x68>
 801077a:	3304      	adds	r3, #4
 801077c:	1b1a      	subs	r2, r3, r4
 801077e:	42a3      	cmp	r3, r4
 8010780:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010784:	bf08      	it	eq
 8010786:	2300      	moveq	r3, #0
 8010788:	6102      	str	r2, [r0, #16]
 801078a:	bf08      	it	eq
 801078c:	6143      	streq	r3, [r0, #20]
 801078e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010792:	f8dc c000 	ldr.w	ip, [ip]
 8010796:	fa0c fc08 	lsl.w	ip, ip, r8
 801079a:	ea4c 0707 	orr.w	r7, ip, r7
 801079e:	f849 7b04 	str.w	r7, [r9], #4
 80107a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80107a6:	40cf      	lsrs	r7, r1
 80107a8:	e7da      	b.n	8010760 <rshift+0x4c>
 80107aa:	f851 cb04 	ldr.w	ip, [r1], #4
 80107ae:	f847 cf04 	str.w	ip, [r7, #4]!
 80107b2:	e7c3      	b.n	801073c <rshift+0x28>
 80107b4:	4623      	mov	r3, r4
 80107b6:	e7e1      	b.n	801077c <rshift+0x68>

080107b8 <__hexdig_fun>:
 80107b8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80107bc:	2b09      	cmp	r3, #9
 80107be:	d802      	bhi.n	80107c6 <__hexdig_fun+0xe>
 80107c0:	3820      	subs	r0, #32
 80107c2:	b2c0      	uxtb	r0, r0
 80107c4:	4770      	bx	lr
 80107c6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80107ca:	2b05      	cmp	r3, #5
 80107cc:	d801      	bhi.n	80107d2 <__hexdig_fun+0x1a>
 80107ce:	3847      	subs	r0, #71	; 0x47
 80107d0:	e7f7      	b.n	80107c2 <__hexdig_fun+0xa>
 80107d2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80107d6:	2b05      	cmp	r3, #5
 80107d8:	d801      	bhi.n	80107de <__hexdig_fun+0x26>
 80107da:	3827      	subs	r0, #39	; 0x27
 80107dc:	e7f1      	b.n	80107c2 <__hexdig_fun+0xa>
 80107de:	2000      	movs	r0, #0
 80107e0:	4770      	bx	lr
	...

080107e4 <__gethex>:
 80107e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107e8:	ed2d 8b02 	vpush	{d8}
 80107ec:	b089      	sub	sp, #36	; 0x24
 80107ee:	ee08 0a10 	vmov	s16, r0
 80107f2:	9304      	str	r3, [sp, #16]
 80107f4:	4bb4      	ldr	r3, [pc, #720]	; (8010ac8 <__gethex+0x2e4>)
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	9301      	str	r3, [sp, #4]
 80107fa:	4618      	mov	r0, r3
 80107fc:	468b      	mov	fp, r1
 80107fe:	4690      	mov	r8, r2
 8010800:	f7ef fce6 	bl	80001d0 <strlen>
 8010804:	9b01      	ldr	r3, [sp, #4]
 8010806:	f8db 2000 	ldr.w	r2, [fp]
 801080a:	4403      	add	r3, r0
 801080c:	4682      	mov	sl, r0
 801080e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010812:	9305      	str	r3, [sp, #20]
 8010814:	1c93      	adds	r3, r2, #2
 8010816:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801081a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801081e:	32fe      	adds	r2, #254	; 0xfe
 8010820:	18d1      	adds	r1, r2, r3
 8010822:	461f      	mov	r7, r3
 8010824:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010828:	9100      	str	r1, [sp, #0]
 801082a:	2830      	cmp	r0, #48	; 0x30
 801082c:	d0f8      	beq.n	8010820 <__gethex+0x3c>
 801082e:	f7ff ffc3 	bl	80107b8 <__hexdig_fun>
 8010832:	4604      	mov	r4, r0
 8010834:	2800      	cmp	r0, #0
 8010836:	d13a      	bne.n	80108ae <__gethex+0xca>
 8010838:	9901      	ldr	r1, [sp, #4]
 801083a:	4652      	mov	r2, sl
 801083c:	4638      	mov	r0, r7
 801083e:	f7fe f9ce 	bl	800ebde <strncmp>
 8010842:	4605      	mov	r5, r0
 8010844:	2800      	cmp	r0, #0
 8010846:	d168      	bne.n	801091a <__gethex+0x136>
 8010848:	f817 000a 	ldrb.w	r0, [r7, sl]
 801084c:	eb07 060a 	add.w	r6, r7, sl
 8010850:	f7ff ffb2 	bl	80107b8 <__hexdig_fun>
 8010854:	2800      	cmp	r0, #0
 8010856:	d062      	beq.n	801091e <__gethex+0x13a>
 8010858:	4633      	mov	r3, r6
 801085a:	7818      	ldrb	r0, [r3, #0]
 801085c:	2830      	cmp	r0, #48	; 0x30
 801085e:	461f      	mov	r7, r3
 8010860:	f103 0301 	add.w	r3, r3, #1
 8010864:	d0f9      	beq.n	801085a <__gethex+0x76>
 8010866:	f7ff ffa7 	bl	80107b8 <__hexdig_fun>
 801086a:	2301      	movs	r3, #1
 801086c:	fab0 f480 	clz	r4, r0
 8010870:	0964      	lsrs	r4, r4, #5
 8010872:	4635      	mov	r5, r6
 8010874:	9300      	str	r3, [sp, #0]
 8010876:	463a      	mov	r2, r7
 8010878:	4616      	mov	r6, r2
 801087a:	3201      	adds	r2, #1
 801087c:	7830      	ldrb	r0, [r6, #0]
 801087e:	f7ff ff9b 	bl	80107b8 <__hexdig_fun>
 8010882:	2800      	cmp	r0, #0
 8010884:	d1f8      	bne.n	8010878 <__gethex+0x94>
 8010886:	9901      	ldr	r1, [sp, #4]
 8010888:	4652      	mov	r2, sl
 801088a:	4630      	mov	r0, r6
 801088c:	f7fe f9a7 	bl	800ebde <strncmp>
 8010890:	b980      	cbnz	r0, 80108b4 <__gethex+0xd0>
 8010892:	b94d      	cbnz	r5, 80108a8 <__gethex+0xc4>
 8010894:	eb06 050a 	add.w	r5, r6, sl
 8010898:	462a      	mov	r2, r5
 801089a:	4616      	mov	r6, r2
 801089c:	3201      	adds	r2, #1
 801089e:	7830      	ldrb	r0, [r6, #0]
 80108a0:	f7ff ff8a 	bl	80107b8 <__hexdig_fun>
 80108a4:	2800      	cmp	r0, #0
 80108a6:	d1f8      	bne.n	801089a <__gethex+0xb6>
 80108a8:	1bad      	subs	r5, r5, r6
 80108aa:	00ad      	lsls	r5, r5, #2
 80108ac:	e004      	b.n	80108b8 <__gethex+0xd4>
 80108ae:	2400      	movs	r4, #0
 80108b0:	4625      	mov	r5, r4
 80108b2:	e7e0      	b.n	8010876 <__gethex+0x92>
 80108b4:	2d00      	cmp	r5, #0
 80108b6:	d1f7      	bne.n	80108a8 <__gethex+0xc4>
 80108b8:	7833      	ldrb	r3, [r6, #0]
 80108ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80108be:	2b50      	cmp	r3, #80	; 0x50
 80108c0:	d13b      	bne.n	801093a <__gethex+0x156>
 80108c2:	7873      	ldrb	r3, [r6, #1]
 80108c4:	2b2b      	cmp	r3, #43	; 0x2b
 80108c6:	d02c      	beq.n	8010922 <__gethex+0x13e>
 80108c8:	2b2d      	cmp	r3, #45	; 0x2d
 80108ca:	d02e      	beq.n	801092a <__gethex+0x146>
 80108cc:	1c71      	adds	r1, r6, #1
 80108ce:	f04f 0900 	mov.w	r9, #0
 80108d2:	7808      	ldrb	r0, [r1, #0]
 80108d4:	f7ff ff70 	bl	80107b8 <__hexdig_fun>
 80108d8:	1e43      	subs	r3, r0, #1
 80108da:	b2db      	uxtb	r3, r3
 80108dc:	2b18      	cmp	r3, #24
 80108de:	d82c      	bhi.n	801093a <__gethex+0x156>
 80108e0:	f1a0 0210 	sub.w	r2, r0, #16
 80108e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80108e8:	f7ff ff66 	bl	80107b8 <__hexdig_fun>
 80108ec:	1e43      	subs	r3, r0, #1
 80108ee:	b2db      	uxtb	r3, r3
 80108f0:	2b18      	cmp	r3, #24
 80108f2:	d91d      	bls.n	8010930 <__gethex+0x14c>
 80108f4:	f1b9 0f00 	cmp.w	r9, #0
 80108f8:	d000      	beq.n	80108fc <__gethex+0x118>
 80108fa:	4252      	negs	r2, r2
 80108fc:	4415      	add	r5, r2
 80108fe:	f8cb 1000 	str.w	r1, [fp]
 8010902:	b1e4      	cbz	r4, 801093e <__gethex+0x15a>
 8010904:	9b00      	ldr	r3, [sp, #0]
 8010906:	2b00      	cmp	r3, #0
 8010908:	bf14      	ite	ne
 801090a:	2700      	movne	r7, #0
 801090c:	2706      	moveq	r7, #6
 801090e:	4638      	mov	r0, r7
 8010910:	b009      	add	sp, #36	; 0x24
 8010912:	ecbd 8b02 	vpop	{d8}
 8010916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801091a:	463e      	mov	r6, r7
 801091c:	4625      	mov	r5, r4
 801091e:	2401      	movs	r4, #1
 8010920:	e7ca      	b.n	80108b8 <__gethex+0xd4>
 8010922:	f04f 0900 	mov.w	r9, #0
 8010926:	1cb1      	adds	r1, r6, #2
 8010928:	e7d3      	b.n	80108d2 <__gethex+0xee>
 801092a:	f04f 0901 	mov.w	r9, #1
 801092e:	e7fa      	b.n	8010926 <__gethex+0x142>
 8010930:	230a      	movs	r3, #10
 8010932:	fb03 0202 	mla	r2, r3, r2, r0
 8010936:	3a10      	subs	r2, #16
 8010938:	e7d4      	b.n	80108e4 <__gethex+0x100>
 801093a:	4631      	mov	r1, r6
 801093c:	e7df      	b.n	80108fe <__gethex+0x11a>
 801093e:	1bf3      	subs	r3, r6, r7
 8010940:	3b01      	subs	r3, #1
 8010942:	4621      	mov	r1, r4
 8010944:	2b07      	cmp	r3, #7
 8010946:	dc0b      	bgt.n	8010960 <__gethex+0x17c>
 8010948:	ee18 0a10 	vmov	r0, s16
 801094c:	f000 fa74 	bl	8010e38 <_Balloc>
 8010950:	4604      	mov	r4, r0
 8010952:	b940      	cbnz	r0, 8010966 <__gethex+0x182>
 8010954:	4b5d      	ldr	r3, [pc, #372]	; (8010acc <__gethex+0x2e8>)
 8010956:	4602      	mov	r2, r0
 8010958:	21de      	movs	r1, #222	; 0xde
 801095a:	485d      	ldr	r0, [pc, #372]	; (8010ad0 <__gethex+0x2ec>)
 801095c:	f001 f9fa 	bl	8011d54 <__assert_func>
 8010960:	3101      	adds	r1, #1
 8010962:	105b      	asrs	r3, r3, #1
 8010964:	e7ee      	b.n	8010944 <__gethex+0x160>
 8010966:	f100 0914 	add.w	r9, r0, #20
 801096a:	f04f 0b00 	mov.w	fp, #0
 801096e:	f1ca 0301 	rsb	r3, sl, #1
 8010972:	f8cd 9008 	str.w	r9, [sp, #8]
 8010976:	f8cd b000 	str.w	fp, [sp]
 801097a:	9306      	str	r3, [sp, #24]
 801097c:	42b7      	cmp	r7, r6
 801097e:	d340      	bcc.n	8010a02 <__gethex+0x21e>
 8010980:	9802      	ldr	r0, [sp, #8]
 8010982:	9b00      	ldr	r3, [sp, #0]
 8010984:	f840 3b04 	str.w	r3, [r0], #4
 8010988:	eba0 0009 	sub.w	r0, r0, r9
 801098c:	1080      	asrs	r0, r0, #2
 801098e:	0146      	lsls	r6, r0, #5
 8010990:	6120      	str	r0, [r4, #16]
 8010992:	4618      	mov	r0, r3
 8010994:	f000 fb42 	bl	801101c <__hi0bits>
 8010998:	1a30      	subs	r0, r6, r0
 801099a:	f8d8 6000 	ldr.w	r6, [r8]
 801099e:	42b0      	cmp	r0, r6
 80109a0:	dd63      	ble.n	8010a6a <__gethex+0x286>
 80109a2:	1b87      	subs	r7, r0, r6
 80109a4:	4639      	mov	r1, r7
 80109a6:	4620      	mov	r0, r4
 80109a8:	f000 fee6 	bl	8011778 <__any_on>
 80109ac:	4682      	mov	sl, r0
 80109ae:	b1a8      	cbz	r0, 80109dc <__gethex+0x1f8>
 80109b0:	1e7b      	subs	r3, r7, #1
 80109b2:	1159      	asrs	r1, r3, #5
 80109b4:	f003 021f 	and.w	r2, r3, #31
 80109b8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80109bc:	f04f 0a01 	mov.w	sl, #1
 80109c0:	fa0a f202 	lsl.w	r2, sl, r2
 80109c4:	420a      	tst	r2, r1
 80109c6:	d009      	beq.n	80109dc <__gethex+0x1f8>
 80109c8:	4553      	cmp	r3, sl
 80109ca:	dd05      	ble.n	80109d8 <__gethex+0x1f4>
 80109cc:	1eb9      	subs	r1, r7, #2
 80109ce:	4620      	mov	r0, r4
 80109d0:	f000 fed2 	bl	8011778 <__any_on>
 80109d4:	2800      	cmp	r0, #0
 80109d6:	d145      	bne.n	8010a64 <__gethex+0x280>
 80109d8:	f04f 0a02 	mov.w	sl, #2
 80109dc:	4639      	mov	r1, r7
 80109de:	4620      	mov	r0, r4
 80109e0:	f7ff fe98 	bl	8010714 <rshift>
 80109e4:	443d      	add	r5, r7
 80109e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80109ea:	42ab      	cmp	r3, r5
 80109ec:	da4c      	bge.n	8010a88 <__gethex+0x2a4>
 80109ee:	ee18 0a10 	vmov	r0, s16
 80109f2:	4621      	mov	r1, r4
 80109f4:	f000 fa60 	bl	8010eb8 <_Bfree>
 80109f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80109fa:	2300      	movs	r3, #0
 80109fc:	6013      	str	r3, [r2, #0]
 80109fe:	27a3      	movs	r7, #163	; 0xa3
 8010a00:	e785      	b.n	801090e <__gethex+0x12a>
 8010a02:	1e73      	subs	r3, r6, #1
 8010a04:	9a05      	ldr	r2, [sp, #20]
 8010a06:	9303      	str	r3, [sp, #12]
 8010a08:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010a0c:	4293      	cmp	r3, r2
 8010a0e:	d019      	beq.n	8010a44 <__gethex+0x260>
 8010a10:	f1bb 0f20 	cmp.w	fp, #32
 8010a14:	d107      	bne.n	8010a26 <__gethex+0x242>
 8010a16:	9b02      	ldr	r3, [sp, #8]
 8010a18:	9a00      	ldr	r2, [sp, #0]
 8010a1a:	f843 2b04 	str.w	r2, [r3], #4
 8010a1e:	9302      	str	r3, [sp, #8]
 8010a20:	2300      	movs	r3, #0
 8010a22:	9300      	str	r3, [sp, #0]
 8010a24:	469b      	mov	fp, r3
 8010a26:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010a2a:	f7ff fec5 	bl	80107b8 <__hexdig_fun>
 8010a2e:	9b00      	ldr	r3, [sp, #0]
 8010a30:	f000 000f 	and.w	r0, r0, #15
 8010a34:	fa00 f00b 	lsl.w	r0, r0, fp
 8010a38:	4303      	orrs	r3, r0
 8010a3a:	9300      	str	r3, [sp, #0]
 8010a3c:	f10b 0b04 	add.w	fp, fp, #4
 8010a40:	9b03      	ldr	r3, [sp, #12]
 8010a42:	e00d      	b.n	8010a60 <__gethex+0x27c>
 8010a44:	9b03      	ldr	r3, [sp, #12]
 8010a46:	9a06      	ldr	r2, [sp, #24]
 8010a48:	4413      	add	r3, r2
 8010a4a:	42bb      	cmp	r3, r7
 8010a4c:	d3e0      	bcc.n	8010a10 <__gethex+0x22c>
 8010a4e:	4618      	mov	r0, r3
 8010a50:	9901      	ldr	r1, [sp, #4]
 8010a52:	9307      	str	r3, [sp, #28]
 8010a54:	4652      	mov	r2, sl
 8010a56:	f7fe f8c2 	bl	800ebde <strncmp>
 8010a5a:	9b07      	ldr	r3, [sp, #28]
 8010a5c:	2800      	cmp	r0, #0
 8010a5e:	d1d7      	bne.n	8010a10 <__gethex+0x22c>
 8010a60:	461e      	mov	r6, r3
 8010a62:	e78b      	b.n	801097c <__gethex+0x198>
 8010a64:	f04f 0a03 	mov.w	sl, #3
 8010a68:	e7b8      	b.n	80109dc <__gethex+0x1f8>
 8010a6a:	da0a      	bge.n	8010a82 <__gethex+0x29e>
 8010a6c:	1a37      	subs	r7, r6, r0
 8010a6e:	4621      	mov	r1, r4
 8010a70:	ee18 0a10 	vmov	r0, s16
 8010a74:	463a      	mov	r2, r7
 8010a76:	f000 fc3b 	bl	80112f0 <__lshift>
 8010a7a:	1bed      	subs	r5, r5, r7
 8010a7c:	4604      	mov	r4, r0
 8010a7e:	f100 0914 	add.w	r9, r0, #20
 8010a82:	f04f 0a00 	mov.w	sl, #0
 8010a86:	e7ae      	b.n	80109e6 <__gethex+0x202>
 8010a88:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010a8c:	42a8      	cmp	r0, r5
 8010a8e:	dd72      	ble.n	8010b76 <__gethex+0x392>
 8010a90:	1b45      	subs	r5, r0, r5
 8010a92:	42ae      	cmp	r6, r5
 8010a94:	dc36      	bgt.n	8010b04 <__gethex+0x320>
 8010a96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010a9a:	2b02      	cmp	r3, #2
 8010a9c:	d02a      	beq.n	8010af4 <__gethex+0x310>
 8010a9e:	2b03      	cmp	r3, #3
 8010aa0:	d02c      	beq.n	8010afc <__gethex+0x318>
 8010aa2:	2b01      	cmp	r3, #1
 8010aa4:	d11c      	bne.n	8010ae0 <__gethex+0x2fc>
 8010aa6:	42ae      	cmp	r6, r5
 8010aa8:	d11a      	bne.n	8010ae0 <__gethex+0x2fc>
 8010aaa:	2e01      	cmp	r6, #1
 8010aac:	d112      	bne.n	8010ad4 <__gethex+0x2f0>
 8010aae:	9a04      	ldr	r2, [sp, #16]
 8010ab0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010ab4:	6013      	str	r3, [r2, #0]
 8010ab6:	2301      	movs	r3, #1
 8010ab8:	6123      	str	r3, [r4, #16]
 8010aba:	f8c9 3000 	str.w	r3, [r9]
 8010abe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010ac0:	2762      	movs	r7, #98	; 0x62
 8010ac2:	601c      	str	r4, [r3, #0]
 8010ac4:	e723      	b.n	801090e <__gethex+0x12a>
 8010ac6:	bf00      	nop
 8010ac8:	080140d8 	.word	0x080140d8
 8010acc:	0801405f 	.word	0x0801405f
 8010ad0:	08014070 	.word	0x08014070
 8010ad4:	1e71      	subs	r1, r6, #1
 8010ad6:	4620      	mov	r0, r4
 8010ad8:	f000 fe4e 	bl	8011778 <__any_on>
 8010adc:	2800      	cmp	r0, #0
 8010ade:	d1e6      	bne.n	8010aae <__gethex+0x2ca>
 8010ae0:	ee18 0a10 	vmov	r0, s16
 8010ae4:	4621      	mov	r1, r4
 8010ae6:	f000 f9e7 	bl	8010eb8 <_Bfree>
 8010aea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010aec:	2300      	movs	r3, #0
 8010aee:	6013      	str	r3, [r2, #0]
 8010af0:	2750      	movs	r7, #80	; 0x50
 8010af2:	e70c      	b.n	801090e <__gethex+0x12a>
 8010af4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d1f2      	bne.n	8010ae0 <__gethex+0x2fc>
 8010afa:	e7d8      	b.n	8010aae <__gethex+0x2ca>
 8010afc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d1d5      	bne.n	8010aae <__gethex+0x2ca>
 8010b02:	e7ed      	b.n	8010ae0 <__gethex+0x2fc>
 8010b04:	1e6f      	subs	r7, r5, #1
 8010b06:	f1ba 0f00 	cmp.w	sl, #0
 8010b0a:	d131      	bne.n	8010b70 <__gethex+0x38c>
 8010b0c:	b127      	cbz	r7, 8010b18 <__gethex+0x334>
 8010b0e:	4639      	mov	r1, r7
 8010b10:	4620      	mov	r0, r4
 8010b12:	f000 fe31 	bl	8011778 <__any_on>
 8010b16:	4682      	mov	sl, r0
 8010b18:	117b      	asrs	r3, r7, #5
 8010b1a:	2101      	movs	r1, #1
 8010b1c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8010b20:	f007 071f 	and.w	r7, r7, #31
 8010b24:	fa01 f707 	lsl.w	r7, r1, r7
 8010b28:	421f      	tst	r7, r3
 8010b2a:	4629      	mov	r1, r5
 8010b2c:	4620      	mov	r0, r4
 8010b2e:	bf18      	it	ne
 8010b30:	f04a 0a02 	orrne.w	sl, sl, #2
 8010b34:	1b76      	subs	r6, r6, r5
 8010b36:	f7ff fded 	bl	8010714 <rshift>
 8010b3a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010b3e:	2702      	movs	r7, #2
 8010b40:	f1ba 0f00 	cmp.w	sl, #0
 8010b44:	d048      	beq.n	8010bd8 <__gethex+0x3f4>
 8010b46:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010b4a:	2b02      	cmp	r3, #2
 8010b4c:	d015      	beq.n	8010b7a <__gethex+0x396>
 8010b4e:	2b03      	cmp	r3, #3
 8010b50:	d017      	beq.n	8010b82 <__gethex+0x39e>
 8010b52:	2b01      	cmp	r3, #1
 8010b54:	d109      	bne.n	8010b6a <__gethex+0x386>
 8010b56:	f01a 0f02 	tst.w	sl, #2
 8010b5a:	d006      	beq.n	8010b6a <__gethex+0x386>
 8010b5c:	f8d9 0000 	ldr.w	r0, [r9]
 8010b60:	ea4a 0a00 	orr.w	sl, sl, r0
 8010b64:	f01a 0f01 	tst.w	sl, #1
 8010b68:	d10e      	bne.n	8010b88 <__gethex+0x3a4>
 8010b6a:	f047 0710 	orr.w	r7, r7, #16
 8010b6e:	e033      	b.n	8010bd8 <__gethex+0x3f4>
 8010b70:	f04f 0a01 	mov.w	sl, #1
 8010b74:	e7d0      	b.n	8010b18 <__gethex+0x334>
 8010b76:	2701      	movs	r7, #1
 8010b78:	e7e2      	b.n	8010b40 <__gethex+0x35c>
 8010b7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010b7c:	f1c3 0301 	rsb	r3, r3, #1
 8010b80:	9315      	str	r3, [sp, #84]	; 0x54
 8010b82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d0f0      	beq.n	8010b6a <__gethex+0x386>
 8010b88:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010b8c:	f104 0314 	add.w	r3, r4, #20
 8010b90:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010b94:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010b98:	f04f 0c00 	mov.w	ip, #0
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ba2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8010ba6:	d01c      	beq.n	8010be2 <__gethex+0x3fe>
 8010ba8:	3201      	adds	r2, #1
 8010baa:	6002      	str	r2, [r0, #0]
 8010bac:	2f02      	cmp	r7, #2
 8010bae:	f104 0314 	add.w	r3, r4, #20
 8010bb2:	d13f      	bne.n	8010c34 <__gethex+0x450>
 8010bb4:	f8d8 2000 	ldr.w	r2, [r8]
 8010bb8:	3a01      	subs	r2, #1
 8010bba:	42b2      	cmp	r2, r6
 8010bbc:	d10a      	bne.n	8010bd4 <__gethex+0x3f0>
 8010bbe:	1171      	asrs	r1, r6, #5
 8010bc0:	2201      	movs	r2, #1
 8010bc2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010bc6:	f006 061f 	and.w	r6, r6, #31
 8010bca:	fa02 f606 	lsl.w	r6, r2, r6
 8010bce:	421e      	tst	r6, r3
 8010bd0:	bf18      	it	ne
 8010bd2:	4617      	movne	r7, r2
 8010bd4:	f047 0720 	orr.w	r7, r7, #32
 8010bd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010bda:	601c      	str	r4, [r3, #0]
 8010bdc:	9b04      	ldr	r3, [sp, #16]
 8010bde:	601d      	str	r5, [r3, #0]
 8010be0:	e695      	b.n	801090e <__gethex+0x12a>
 8010be2:	4299      	cmp	r1, r3
 8010be4:	f843 cc04 	str.w	ip, [r3, #-4]
 8010be8:	d8d8      	bhi.n	8010b9c <__gethex+0x3b8>
 8010bea:	68a3      	ldr	r3, [r4, #8]
 8010bec:	459b      	cmp	fp, r3
 8010bee:	db19      	blt.n	8010c24 <__gethex+0x440>
 8010bf0:	6861      	ldr	r1, [r4, #4]
 8010bf2:	ee18 0a10 	vmov	r0, s16
 8010bf6:	3101      	adds	r1, #1
 8010bf8:	f000 f91e 	bl	8010e38 <_Balloc>
 8010bfc:	4681      	mov	r9, r0
 8010bfe:	b918      	cbnz	r0, 8010c08 <__gethex+0x424>
 8010c00:	4b1a      	ldr	r3, [pc, #104]	; (8010c6c <__gethex+0x488>)
 8010c02:	4602      	mov	r2, r0
 8010c04:	2184      	movs	r1, #132	; 0x84
 8010c06:	e6a8      	b.n	801095a <__gethex+0x176>
 8010c08:	6922      	ldr	r2, [r4, #16]
 8010c0a:	3202      	adds	r2, #2
 8010c0c:	f104 010c 	add.w	r1, r4, #12
 8010c10:	0092      	lsls	r2, r2, #2
 8010c12:	300c      	adds	r0, #12
 8010c14:	f7fd fb36 	bl	800e284 <memcpy>
 8010c18:	4621      	mov	r1, r4
 8010c1a:	ee18 0a10 	vmov	r0, s16
 8010c1e:	f000 f94b 	bl	8010eb8 <_Bfree>
 8010c22:	464c      	mov	r4, r9
 8010c24:	6923      	ldr	r3, [r4, #16]
 8010c26:	1c5a      	adds	r2, r3, #1
 8010c28:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010c2c:	6122      	str	r2, [r4, #16]
 8010c2e:	2201      	movs	r2, #1
 8010c30:	615a      	str	r2, [r3, #20]
 8010c32:	e7bb      	b.n	8010bac <__gethex+0x3c8>
 8010c34:	6922      	ldr	r2, [r4, #16]
 8010c36:	455a      	cmp	r2, fp
 8010c38:	dd0b      	ble.n	8010c52 <__gethex+0x46e>
 8010c3a:	2101      	movs	r1, #1
 8010c3c:	4620      	mov	r0, r4
 8010c3e:	f7ff fd69 	bl	8010714 <rshift>
 8010c42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010c46:	3501      	adds	r5, #1
 8010c48:	42ab      	cmp	r3, r5
 8010c4a:	f6ff aed0 	blt.w	80109ee <__gethex+0x20a>
 8010c4e:	2701      	movs	r7, #1
 8010c50:	e7c0      	b.n	8010bd4 <__gethex+0x3f0>
 8010c52:	f016 061f 	ands.w	r6, r6, #31
 8010c56:	d0fa      	beq.n	8010c4e <__gethex+0x46a>
 8010c58:	4453      	add	r3, sl
 8010c5a:	f1c6 0620 	rsb	r6, r6, #32
 8010c5e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010c62:	f000 f9db 	bl	801101c <__hi0bits>
 8010c66:	42b0      	cmp	r0, r6
 8010c68:	dbe7      	blt.n	8010c3a <__gethex+0x456>
 8010c6a:	e7f0      	b.n	8010c4e <__gethex+0x46a>
 8010c6c:	0801405f 	.word	0x0801405f

08010c70 <L_shift>:
 8010c70:	f1c2 0208 	rsb	r2, r2, #8
 8010c74:	0092      	lsls	r2, r2, #2
 8010c76:	b570      	push	{r4, r5, r6, lr}
 8010c78:	f1c2 0620 	rsb	r6, r2, #32
 8010c7c:	6843      	ldr	r3, [r0, #4]
 8010c7e:	6804      	ldr	r4, [r0, #0]
 8010c80:	fa03 f506 	lsl.w	r5, r3, r6
 8010c84:	432c      	orrs	r4, r5
 8010c86:	40d3      	lsrs	r3, r2
 8010c88:	6004      	str	r4, [r0, #0]
 8010c8a:	f840 3f04 	str.w	r3, [r0, #4]!
 8010c8e:	4288      	cmp	r0, r1
 8010c90:	d3f4      	bcc.n	8010c7c <L_shift+0xc>
 8010c92:	bd70      	pop	{r4, r5, r6, pc}

08010c94 <__match>:
 8010c94:	b530      	push	{r4, r5, lr}
 8010c96:	6803      	ldr	r3, [r0, #0]
 8010c98:	3301      	adds	r3, #1
 8010c9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010c9e:	b914      	cbnz	r4, 8010ca6 <__match+0x12>
 8010ca0:	6003      	str	r3, [r0, #0]
 8010ca2:	2001      	movs	r0, #1
 8010ca4:	bd30      	pop	{r4, r5, pc}
 8010ca6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010caa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010cae:	2d19      	cmp	r5, #25
 8010cb0:	bf98      	it	ls
 8010cb2:	3220      	addls	r2, #32
 8010cb4:	42a2      	cmp	r2, r4
 8010cb6:	d0f0      	beq.n	8010c9a <__match+0x6>
 8010cb8:	2000      	movs	r0, #0
 8010cba:	e7f3      	b.n	8010ca4 <__match+0x10>

08010cbc <__hexnan>:
 8010cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cc0:	680b      	ldr	r3, [r1, #0]
 8010cc2:	115e      	asrs	r6, r3, #5
 8010cc4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010cc8:	f013 031f 	ands.w	r3, r3, #31
 8010ccc:	b087      	sub	sp, #28
 8010cce:	bf18      	it	ne
 8010cd0:	3604      	addne	r6, #4
 8010cd2:	2500      	movs	r5, #0
 8010cd4:	1f37      	subs	r7, r6, #4
 8010cd6:	4690      	mov	r8, r2
 8010cd8:	6802      	ldr	r2, [r0, #0]
 8010cda:	9301      	str	r3, [sp, #4]
 8010cdc:	4682      	mov	sl, r0
 8010cde:	f846 5c04 	str.w	r5, [r6, #-4]
 8010ce2:	46b9      	mov	r9, r7
 8010ce4:	463c      	mov	r4, r7
 8010ce6:	9502      	str	r5, [sp, #8]
 8010ce8:	46ab      	mov	fp, r5
 8010cea:	7851      	ldrb	r1, [r2, #1]
 8010cec:	1c53      	adds	r3, r2, #1
 8010cee:	9303      	str	r3, [sp, #12]
 8010cf0:	b341      	cbz	r1, 8010d44 <__hexnan+0x88>
 8010cf2:	4608      	mov	r0, r1
 8010cf4:	9205      	str	r2, [sp, #20]
 8010cf6:	9104      	str	r1, [sp, #16]
 8010cf8:	f7ff fd5e 	bl	80107b8 <__hexdig_fun>
 8010cfc:	2800      	cmp	r0, #0
 8010cfe:	d14f      	bne.n	8010da0 <__hexnan+0xe4>
 8010d00:	9904      	ldr	r1, [sp, #16]
 8010d02:	9a05      	ldr	r2, [sp, #20]
 8010d04:	2920      	cmp	r1, #32
 8010d06:	d818      	bhi.n	8010d3a <__hexnan+0x7e>
 8010d08:	9b02      	ldr	r3, [sp, #8]
 8010d0a:	459b      	cmp	fp, r3
 8010d0c:	dd13      	ble.n	8010d36 <__hexnan+0x7a>
 8010d0e:	454c      	cmp	r4, r9
 8010d10:	d206      	bcs.n	8010d20 <__hexnan+0x64>
 8010d12:	2d07      	cmp	r5, #7
 8010d14:	dc04      	bgt.n	8010d20 <__hexnan+0x64>
 8010d16:	462a      	mov	r2, r5
 8010d18:	4649      	mov	r1, r9
 8010d1a:	4620      	mov	r0, r4
 8010d1c:	f7ff ffa8 	bl	8010c70 <L_shift>
 8010d20:	4544      	cmp	r4, r8
 8010d22:	d950      	bls.n	8010dc6 <__hexnan+0x10a>
 8010d24:	2300      	movs	r3, #0
 8010d26:	f1a4 0904 	sub.w	r9, r4, #4
 8010d2a:	f844 3c04 	str.w	r3, [r4, #-4]
 8010d2e:	f8cd b008 	str.w	fp, [sp, #8]
 8010d32:	464c      	mov	r4, r9
 8010d34:	461d      	mov	r5, r3
 8010d36:	9a03      	ldr	r2, [sp, #12]
 8010d38:	e7d7      	b.n	8010cea <__hexnan+0x2e>
 8010d3a:	2929      	cmp	r1, #41	; 0x29
 8010d3c:	d156      	bne.n	8010dec <__hexnan+0x130>
 8010d3e:	3202      	adds	r2, #2
 8010d40:	f8ca 2000 	str.w	r2, [sl]
 8010d44:	f1bb 0f00 	cmp.w	fp, #0
 8010d48:	d050      	beq.n	8010dec <__hexnan+0x130>
 8010d4a:	454c      	cmp	r4, r9
 8010d4c:	d206      	bcs.n	8010d5c <__hexnan+0xa0>
 8010d4e:	2d07      	cmp	r5, #7
 8010d50:	dc04      	bgt.n	8010d5c <__hexnan+0xa0>
 8010d52:	462a      	mov	r2, r5
 8010d54:	4649      	mov	r1, r9
 8010d56:	4620      	mov	r0, r4
 8010d58:	f7ff ff8a 	bl	8010c70 <L_shift>
 8010d5c:	4544      	cmp	r4, r8
 8010d5e:	d934      	bls.n	8010dca <__hexnan+0x10e>
 8010d60:	f1a8 0204 	sub.w	r2, r8, #4
 8010d64:	4623      	mov	r3, r4
 8010d66:	f853 1b04 	ldr.w	r1, [r3], #4
 8010d6a:	f842 1f04 	str.w	r1, [r2, #4]!
 8010d6e:	429f      	cmp	r7, r3
 8010d70:	d2f9      	bcs.n	8010d66 <__hexnan+0xaa>
 8010d72:	1b3b      	subs	r3, r7, r4
 8010d74:	f023 0303 	bic.w	r3, r3, #3
 8010d78:	3304      	adds	r3, #4
 8010d7a:	3401      	adds	r4, #1
 8010d7c:	3e03      	subs	r6, #3
 8010d7e:	42b4      	cmp	r4, r6
 8010d80:	bf88      	it	hi
 8010d82:	2304      	movhi	r3, #4
 8010d84:	4443      	add	r3, r8
 8010d86:	2200      	movs	r2, #0
 8010d88:	f843 2b04 	str.w	r2, [r3], #4
 8010d8c:	429f      	cmp	r7, r3
 8010d8e:	d2fb      	bcs.n	8010d88 <__hexnan+0xcc>
 8010d90:	683b      	ldr	r3, [r7, #0]
 8010d92:	b91b      	cbnz	r3, 8010d9c <__hexnan+0xe0>
 8010d94:	4547      	cmp	r7, r8
 8010d96:	d127      	bne.n	8010de8 <__hexnan+0x12c>
 8010d98:	2301      	movs	r3, #1
 8010d9a:	603b      	str	r3, [r7, #0]
 8010d9c:	2005      	movs	r0, #5
 8010d9e:	e026      	b.n	8010dee <__hexnan+0x132>
 8010da0:	3501      	adds	r5, #1
 8010da2:	2d08      	cmp	r5, #8
 8010da4:	f10b 0b01 	add.w	fp, fp, #1
 8010da8:	dd06      	ble.n	8010db8 <__hexnan+0xfc>
 8010daa:	4544      	cmp	r4, r8
 8010dac:	d9c3      	bls.n	8010d36 <__hexnan+0x7a>
 8010dae:	2300      	movs	r3, #0
 8010db0:	f844 3c04 	str.w	r3, [r4, #-4]
 8010db4:	2501      	movs	r5, #1
 8010db6:	3c04      	subs	r4, #4
 8010db8:	6822      	ldr	r2, [r4, #0]
 8010dba:	f000 000f 	and.w	r0, r0, #15
 8010dbe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8010dc2:	6022      	str	r2, [r4, #0]
 8010dc4:	e7b7      	b.n	8010d36 <__hexnan+0x7a>
 8010dc6:	2508      	movs	r5, #8
 8010dc8:	e7b5      	b.n	8010d36 <__hexnan+0x7a>
 8010dca:	9b01      	ldr	r3, [sp, #4]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d0df      	beq.n	8010d90 <__hexnan+0xd4>
 8010dd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010dd4:	f1c3 0320 	rsb	r3, r3, #32
 8010dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8010ddc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010de0:	401a      	ands	r2, r3
 8010de2:	f846 2c04 	str.w	r2, [r6, #-4]
 8010de6:	e7d3      	b.n	8010d90 <__hexnan+0xd4>
 8010de8:	3f04      	subs	r7, #4
 8010dea:	e7d1      	b.n	8010d90 <__hexnan+0xd4>
 8010dec:	2004      	movs	r0, #4
 8010dee:	b007      	add	sp, #28
 8010df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010df4 <_localeconv_r>:
 8010df4:	4800      	ldr	r0, [pc, #0]	; (8010df8 <_localeconv_r+0x4>)
 8010df6:	4770      	bx	lr
 8010df8:	20000384 	.word	0x20000384

08010dfc <__retarget_lock_init_recursive>:
 8010dfc:	4770      	bx	lr

08010dfe <__retarget_lock_acquire_recursive>:
 8010dfe:	4770      	bx	lr

08010e00 <__retarget_lock_release_recursive>:
 8010e00:	4770      	bx	lr
	...

08010e04 <malloc>:
 8010e04:	4b02      	ldr	r3, [pc, #8]	; (8010e10 <malloc+0xc>)
 8010e06:	4601      	mov	r1, r0
 8010e08:	6818      	ldr	r0, [r3, #0]
 8010e0a:	f000 bd59 	b.w	80118c0 <_malloc_r>
 8010e0e:	bf00      	nop
 8010e10:	2000022c 	.word	0x2000022c

08010e14 <__ascii_mbtowc>:
 8010e14:	b082      	sub	sp, #8
 8010e16:	b901      	cbnz	r1, 8010e1a <__ascii_mbtowc+0x6>
 8010e18:	a901      	add	r1, sp, #4
 8010e1a:	b142      	cbz	r2, 8010e2e <__ascii_mbtowc+0x1a>
 8010e1c:	b14b      	cbz	r3, 8010e32 <__ascii_mbtowc+0x1e>
 8010e1e:	7813      	ldrb	r3, [r2, #0]
 8010e20:	600b      	str	r3, [r1, #0]
 8010e22:	7812      	ldrb	r2, [r2, #0]
 8010e24:	1e10      	subs	r0, r2, #0
 8010e26:	bf18      	it	ne
 8010e28:	2001      	movne	r0, #1
 8010e2a:	b002      	add	sp, #8
 8010e2c:	4770      	bx	lr
 8010e2e:	4610      	mov	r0, r2
 8010e30:	e7fb      	b.n	8010e2a <__ascii_mbtowc+0x16>
 8010e32:	f06f 0001 	mvn.w	r0, #1
 8010e36:	e7f8      	b.n	8010e2a <__ascii_mbtowc+0x16>

08010e38 <_Balloc>:
 8010e38:	b570      	push	{r4, r5, r6, lr}
 8010e3a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010e3c:	4604      	mov	r4, r0
 8010e3e:	460d      	mov	r5, r1
 8010e40:	b976      	cbnz	r6, 8010e60 <_Balloc+0x28>
 8010e42:	2010      	movs	r0, #16
 8010e44:	f7ff ffde 	bl	8010e04 <malloc>
 8010e48:	4602      	mov	r2, r0
 8010e4a:	6260      	str	r0, [r4, #36]	; 0x24
 8010e4c:	b920      	cbnz	r0, 8010e58 <_Balloc+0x20>
 8010e4e:	4b18      	ldr	r3, [pc, #96]	; (8010eb0 <_Balloc+0x78>)
 8010e50:	4818      	ldr	r0, [pc, #96]	; (8010eb4 <_Balloc+0x7c>)
 8010e52:	2166      	movs	r1, #102	; 0x66
 8010e54:	f000 ff7e 	bl	8011d54 <__assert_func>
 8010e58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010e5c:	6006      	str	r6, [r0, #0]
 8010e5e:	60c6      	str	r6, [r0, #12]
 8010e60:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010e62:	68f3      	ldr	r3, [r6, #12]
 8010e64:	b183      	cbz	r3, 8010e88 <_Balloc+0x50>
 8010e66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010e68:	68db      	ldr	r3, [r3, #12]
 8010e6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010e6e:	b9b8      	cbnz	r0, 8010ea0 <_Balloc+0x68>
 8010e70:	2101      	movs	r1, #1
 8010e72:	fa01 f605 	lsl.w	r6, r1, r5
 8010e76:	1d72      	adds	r2, r6, #5
 8010e78:	0092      	lsls	r2, r2, #2
 8010e7a:	4620      	mov	r0, r4
 8010e7c:	f000 fc9d 	bl	80117ba <_calloc_r>
 8010e80:	b160      	cbz	r0, 8010e9c <_Balloc+0x64>
 8010e82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010e86:	e00e      	b.n	8010ea6 <_Balloc+0x6e>
 8010e88:	2221      	movs	r2, #33	; 0x21
 8010e8a:	2104      	movs	r1, #4
 8010e8c:	4620      	mov	r0, r4
 8010e8e:	f000 fc94 	bl	80117ba <_calloc_r>
 8010e92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010e94:	60f0      	str	r0, [r6, #12]
 8010e96:	68db      	ldr	r3, [r3, #12]
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d1e4      	bne.n	8010e66 <_Balloc+0x2e>
 8010e9c:	2000      	movs	r0, #0
 8010e9e:	bd70      	pop	{r4, r5, r6, pc}
 8010ea0:	6802      	ldr	r2, [r0, #0]
 8010ea2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010eac:	e7f7      	b.n	8010e9e <_Balloc+0x66>
 8010eae:	bf00      	nop
 8010eb0:	08013fed 	.word	0x08013fed
 8010eb4:	080140ec 	.word	0x080140ec

08010eb8 <_Bfree>:
 8010eb8:	b570      	push	{r4, r5, r6, lr}
 8010eba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010ebc:	4605      	mov	r5, r0
 8010ebe:	460c      	mov	r4, r1
 8010ec0:	b976      	cbnz	r6, 8010ee0 <_Bfree+0x28>
 8010ec2:	2010      	movs	r0, #16
 8010ec4:	f7ff ff9e 	bl	8010e04 <malloc>
 8010ec8:	4602      	mov	r2, r0
 8010eca:	6268      	str	r0, [r5, #36]	; 0x24
 8010ecc:	b920      	cbnz	r0, 8010ed8 <_Bfree+0x20>
 8010ece:	4b09      	ldr	r3, [pc, #36]	; (8010ef4 <_Bfree+0x3c>)
 8010ed0:	4809      	ldr	r0, [pc, #36]	; (8010ef8 <_Bfree+0x40>)
 8010ed2:	218a      	movs	r1, #138	; 0x8a
 8010ed4:	f000 ff3e 	bl	8011d54 <__assert_func>
 8010ed8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010edc:	6006      	str	r6, [r0, #0]
 8010ede:	60c6      	str	r6, [r0, #12]
 8010ee0:	b13c      	cbz	r4, 8010ef2 <_Bfree+0x3a>
 8010ee2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010ee4:	6862      	ldr	r2, [r4, #4]
 8010ee6:	68db      	ldr	r3, [r3, #12]
 8010ee8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010eec:	6021      	str	r1, [r4, #0]
 8010eee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010ef2:	bd70      	pop	{r4, r5, r6, pc}
 8010ef4:	08013fed 	.word	0x08013fed
 8010ef8:	080140ec 	.word	0x080140ec

08010efc <__multadd>:
 8010efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f00:	690d      	ldr	r5, [r1, #16]
 8010f02:	4607      	mov	r7, r0
 8010f04:	460c      	mov	r4, r1
 8010f06:	461e      	mov	r6, r3
 8010f08:	f101 0c14 	add.w	ip, r1, #20
 8010f0c:	2000      	movs	r0, #0
 8010f0e:	f8dc 3000 	ldr.w	r3, [ip]
 8010f12:	b299      	uxth	r1, r3
 8010f14:	fb02 6101 	mla	r1, r2, r1, r6
 8010f18:	0c1e      	lsrs	r6, r3, #16
 8010f1a:	0c0b      	lsrs	r3, r1, #16
 8010f1c:	fb02 3306 	mla	r3, r2, r6, r3
 8010f20:	b289      	uxth	r1, r1
 8010f22:	3001      	adds	r0, #1
 8010f24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010f28:	4285      	cmp	r5, r0
 8010f2a:	f84c 1b04 	str.w	r1, [ip], #4
 8010f2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010f32:	dcec      	bgt.n	8010f0e <__multadd+0x12>
 8010f34:	b30e      	cbz	r6, 8010f7a <__multadd+0x7e>
 8010f36:	68a3      	ldr	r3, [r4, #8]
 8010f38:	42ab      	cmp	r3, r5
 8010f3a:	dc19      	bgt.n	8010f70 <__multadd+0x74>
 8010f3c:	6861      	ldr	r1, [r4, #4]
 8010f3e:	4638      	mov	r0, r7
 8010f40:	3101      	adds	r1, #1
 8010f42:	f7ff ff79 	bl	8010e38 <_Balloc>
 8010f46:	4680      	mov	r8, r0
 8010f48:	b928      	cbnz	r0, 8010f56 <__multadd+0x5a>
 8010f4a:	4602      	mov	r2, r0
 8010f4c:	4b0c      	ldr	r3, [pc, #48]	; (8010f80 <__multadd+0x84>)
 8010f4e:	480d      	ldr	r0, [pc, #52]	; (8010f84 <__multadd+0x88>)
 8010f50:	21b5      	movs	r1, #181	; 0xb5
 8010f52:	f000 feff 	bl	8011d54 <__assert_func>
 8010f56:	6922      	ldr	r2, [r4, #16]
 8010f58:	3202      	adds	r2, #2
 8010f5a:	f104 010c 	add.w	r1, r4, #12
 8010f5e:	0092      	lsls	r2, r2, #2
 8010f60:	300c      	adds	r0, #12
 8010f62:	f7fd f98f 	bl	800e284 <memcpy>
 8010f66:	4621      	mov	r1, r4
 8010f68:	4638      	mov	r0, r7
 8010f6a:	f7ff ffa5 	bl	8010eb8 <_Bfree>
 8010f6e:	4644      	mov	r4, r8
 8010f70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010f74:	3501      	adds	r5, #1
 8010f76:	615e      	str	r6, [r3, #20]
 8010f78:	6125      	str	r5, [r4, #16]
 8010f7a:	4620      	mov	r0, r4
 8010f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f80:	0801405f 	.word	0x0801405f
 8010f84:	080140ec 	.word	0x080140ec

08010f88 <__s2b>:
 8010f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f8c:	460c      	mov	r4, r1
 8010f8e:	4615      	mov	r5, r2
 8010f90:	461f      	mov	r7, r3
 8010f92:	2209      	movs	r2, #9
 8010f94:	3308      	adds	r3, #8
 8010f96:	4606      	mov	r6, r0
 8010f98:	fb93 f3f2 	sdiv	r3, r3, r2
 8010f9c:	2100      	movs	r1, #0
 8010f9e:	2201      	movs	r2, #1
 8010fa0:	429a      	cmp	r2, r3
 8010fa2:	db09      	blt.n	8010fb8 <__s2b+0x30>
 8010fa4:	4630      	mov	r0, r6
 8010fa6:	f7ff ff47 	bl	8010e38 <_Balloc>
 8010faa:	b940      	cbnz	r0, 8010fbe <__s2b+0x36>
 8010fac:	4602      	mov	r2, r0
 8010fae:	4b19      	ldr	r3, [pc, #100]	; (8011014 <__s2b+0x8c>)
 8010fb0:	4819      	ldr	r0, [pc, #100]	; (8011018 <__s2b+0x90>)
 8010fb2:	21ce      	movs	r1, #206	; 0xce
 8010fb4:	f000 fece 	bl	8011d54 <__assert_func>
 8010fb8:	0052      	lsls	r2, r2, #1
 8010fba:	3101      	adds	r1, #1
 8010fbc:	e7f0      	b.n	8010fa0 <__s2b+0x18>
 8010fbe:	9b08      	ldr	r3, [sp, #32]
 8010fc0:	6143      	str	r3, [r0, #20]
 8010fc2:	2d09      	cmp	r5, #9
 8010fc4:	f04f 0301 	mov.w	r3, #1
 8010fc8:	6103      	str	r3, [r0, #16]
 8010fca:	dd16      	ble.n	8010ffa <__s2b+0x72>
 8010fcc:	f104 0909 	add.w	r9, r4, #9
 8010fd0:	46c8      	mov	r8, r9
 8010fd2:	442c      	add	r4, r5
 8010fd4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010fd8:	4601      	mov	r1, r0
 8010fda:	3b30      	subs	r3, #48	; 0x30
 8010fdc:	220a      	movs	r2, #10
 8010fde:	4630      	mov	r0, r6
 8010fe0:	f7ff ff8c 	bl	8010efc <__multadd>
 8010fe4:	45a0      	cmp	r8, r4
 8010fe6:	d1f5      	bne.n	8010fd4 <__s2b+0x4c>
 8010fe8:	f1a5 0408 	sub.w	r4, r5, #8
 8010fec:	444c      	add	r4, r9
 8010fee:	1b2d      	subs	r5, r5, r4
 8010ff0:	1963      	adds	r3, r4, r5
 8010ff2:	42bb      	cmp	r3, r7
 8010ff4:	db04      	blt.n	8011000 <__s2b+0x78>
 8010ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ffa:	340a      	adds	r4, #10
 8010ffc:	2509      	movs	r5, #9
 8010ffe:	e7f6      	b.n	8010fee <__s2b+0x66>
 8011000:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011004:	4601      	mov	r1, r0
 8011006:	3b30      	subs	r3, #48	; 0x30
 8011008:	220a      	movs	r2, #10
 801100a:	4630      	mov	r0, r6
 801100c:	f7ff ff76 	bl	8010efc <__multadd>
 8011010:	e7ee      	b.n	8010ff0 <__s2b+0x68>
 8011012:	bf00      	nop
 8011014:	0801405f 	.word	0x0801405f
 8011018:	080140ec 	.word	0x080140ec

0801101c <__hi0bits>:
 801101c:	0c03      	lsrs	r3, r0, #16
 801101e:	041b      	lsls	r3, r3, #16
 8011020:	b9d3      	cbnz	r3, 8011058 <__hi0bits+0x3c>
 8011022:	0400      	lsls	r0, r0, #16
 8011024:	2310      	movs	r3, #16
 8011026:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801102a:	bf04      	itt	eq
 801102c:	0200      	lsleq	r0, r0, #8
 801102e:	3308      	addeq	r3, #8
 8011030:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011034:	bf04      	itt	eq
 8011036:	0100      	lsleq	r0, r0, #4
 8011038:	3304      	addeq	r3, #4
 801103a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801103e:	bf04      	itt	eq
 8011040:	0080      	lsleq	r0, r0, #2
 8011042:	3302      	addeq	r3, #2
 8011044:	2800      	cmp	r0, #0
 8011046:	db05      	blt.n	8011054 <__hi0bits+0x38>
 8011048:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801104c:	f103 0301 	add.w	r3, r3, #1
 8011050:	bf08      	it	eq
 8011052:	2320      	moveq	r3, #32
 8011054:	4618      	mov	r0, r3
 8011056:	4770      	bx	lr
 8011058:	2300      	movs	r3, #0
 801105a:	e7e4      	b.n	8011026 <__hi0bits+0xa>

0801105c <__lo0bits>:
 801105c:	6803      	ldr	r3, [r0, #0]
 801105e:	f013 0207 	ands.w	r2, r3, #7
 8011062:	4601      	mov	r1, r0
 8011064:	d00b      	beq.n	801107e <__lo0bits+0x22>
 8011066:	07da      	lsls	r2, r3, #31
 8011068:	d423      	bmi.n	80110b2 <__lo0bits+0x56>
 801106a:	0798      	lsls	r0, r3, #30
 801106c:	bf49      	itett	mi
 801106e:	085b      	lsrmi	r3, r3, #1
 8011070:	089b      	lsrpl	r3, r3, #2
 8011072:	2001      	movmi	r0, #1
 8011074:	600b      	strmi	r3, [r1, #0]
 8011076:	bf5c      	itt	pl
 8011078:	600b      	strpl	r3, [r1, #0]
 801107a:	2002      	movpl	r0, #2
 801107c:	4770      	bx	lr
 801107e:	b298      	uxth	r0, r3
 8011080:	b9a8      	cbnz	r0, 80110ae <__lo0bits+0x52>
 8011082:	0c1b      	lsrs	r3, r3, #16
 8011084:	2010      	movs	r0, #16
 8011086:	b2da      	uxtb	r2, r3
 8011088:	b90a      	cbnz	r2, 801108e <__lo0bits+0x32>
 801108a:	3008      	adds	r0, #8
 801108c:	0a1b      	lsrs	r3, r3, #8
 801108e:	071a      	lsls	r2, r3, #28
 8011090:	bf04      	itt	eq
 8011092:	091b      	lsreq	r3, r3, #4
 8011094:	3004      	addeq	r0, #4
 8011096:	079a      	lsls	r2, r3, #30
 8011098:	bf04      	itt	eq
 801109a:	089b      	lsreq	r3, r3, #2
 801109c:	3002      	addeq	r0, #2
 801109e:	07da      	lsls	r2, r3, #31
 80110a0:	d403      	bmi.n	80110aa <__lo0bits+0x4e>
 80110a2:	085b      	lsrs	r3, r3, #1
 80110a4:	f100 0001 	add.w	r0, r0, #1
 80110a8:	d005      	beq.n	80110b6 <__lo0bits+0x5a>
 80110aa:	600b      	str	r3, [r1, #0]
 80110ac:	4770      	bx	lr
 80110ae:	4610      	mov	r0, r2
 80110b0:	e7e9      	b.n	8011086 <__lo0bits+0x2a>
 80110b2:	2000      	movs	r0, #0
 80110b4:	4770      	bx	lr
 80110b6:	2020      	movs	r0, #32
 80110b8:	4770      	bx	lr
	...

080110bc <__i2b>:
 80110bc:	b510      	push	{r4, lr}
 80110be:	460c      	mov	r4, r1
 80110c0:	2101      	movs	r1, #1
 80110c2:	f7ff feb9 	bl	8010e38 <_Balloc>
 80110c6:	4602      	mov	r2, r0
 80110c8:	b928      	cbnz	r0, 80110d6 <__i2b+0x1a>
 80110ca:	4b05      	ldr	r3, [pc, #20]	; (80110e0 <__i2b+0x24>)
 80110cc:	4805      	ldr	r0, [pc, #20]	; (80110e4 <__i2b+0x28>)
 80110ce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80110d2:	f000 fe3f 	bl	8011d54 <__assert_func>
 80110d6:	2301      	movs	r3, #1
 80110d8:	6144      	str	r4, [r0, #20]
 80110da:	6103      	str	r3, [r0, #16]
 80110dc:	bd10      	pop	{r4, pc}
 80110de:	bf00      	nop
 80110e0:	0801405f 	.word	0x0801405f
 80110e4:	080140ec 	.word	0x080140ec

080110e8 <__multiply>:
 80110e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110ec:	4691      	mov	r9, r2
 80110ee:	690a      	ldr	r2, [r1, #16]
 80110f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80110f4:	429a      	cmp	r2, r3
 80110f6:	bfb8      	it	lt
 80110f8:	460b      	movlt	r3, r1
 80110fa:	460c      	mov	r4, r1
 80110fc:	bfbc      	itt	lt
 80110fe:	464c      	movlt	r4, r9
 8011100:	4699      	movlt	r9, r3
 8011102:	6927      	ldr	r7, [r4, #16]
 8011104:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011108:	68a3      	ldr	r3, [r4, #8]
 801110a:	6861      	ldr	r1, [r4, #4]
 801110c:	eb07 060a 	add.w	r6, r7, sl
 8011110:	42b3      	cmp	r3, r6
 8011112:	b085      	sub	sp, #20
 8011114:	bfb8      	it	lt
 8011116:	3101      	addlt	r1, #1
 8011118:	f7ff fe8e 	bl	8010e38 <_Balloc>
 801111c:	b930      	cbnz	r0, 801112c <__multiply+0x44>
 801111e:	4602      	mov	r2, r0
 8011120:	4b44      	ldr	r3, [pc, #272]	; (8011234 <__multiply+0x14c>)
 8011122:	4845      	ldr	r0, [pc, #276]	; (8011238 <__multiply+0x150>)
 8011124:	f240 115d 	movw	r1, #349	; 0x15d
 8011128:	f000 fe14 	bl	8011d54 <__assert_func>
 801112c:	f100 0514 	add.w	r5, r0, #20
 8011130:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011134:	462b      	mov	r3, r5
 8011136:	2200      	movs	r2, #0
 8011138:	4543      	cmp	r3, r8
 801113a:	d321      	bcc.n	8011180 <__multiply+0x98>
 801113c:	f104 0314 	add.w	r3, r4, #20
 8011140:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011144:	f109 0314 	add.w	r3, r9, #20
 8011148:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801114c:	9202      	str	r2, [sp, #8]
 801114e:	1b3a      	subs	r2, r7, r4
 8011150:	3a15      	subs	r2, #21
 8011152:	f022 0203 	bic.w	r2, r2, #3
 8011156:	3204      	adds	r2, #4
 8011158:	f104 0115 	add.w	r1, r4, #21
 801115c:	428f      	cmp	r7, r1
 801115e:	bf38      	it	cc
 8011160:	2204      	movcc	r2, #4
 8011162:	9201      	str	r2, [sp, #4]
 8011164:	9a02      	ldr	r2, [sp, #8]
 8011166:	9303      	str	r3, [sp, #12]
 8011168:	429a      	cmp	r2, r3
 801116a:	d80c      	bhi.n	8011186 <__multiply+0x9e>
 801116c:	2e00      	cmp	r6, #0
 801116e:	dd03      	ble.n	8011178 <__multiply+0x90>
 8011170:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011174:	2b00      	cmp	r3, #0
 8011176:	d05a      	beq.n	801122e <__multiply+0x146>
 8011178:	6106      	str	r6, [r0, #16]
 801117a:	b005      	add	sp, #20
 801117c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011180:	f843 2b04 	str.w	r2, [r3], #4
 8011184:	e7d8      	b.n	8011138 <__multiply+0x50>
 8011186:	f8b3 a000 	ldrh.w	sl, [r3]
 801118a:	f1ba 0f00 	cmp.w	sl, #0
 801118e:	d024      	beq.n	80111da <__multiply+0xf2>
 8011190:	f104 0e14 	add.w	lr, r4, #20
 8011194:	46a9      	mov	r9, r5
 8011196:	f04f 0c00 	mov.w	ip, #0
 801119a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801119e:	f8d9 1000 	ldr.w	r1, [r9]
 80111a2:	fa1f fb82 	uxth.w	fp, r2
 80111a6:	b289      	uxth	r1, r1
 80111a8:	fb0a 110b 	mla	r1, sl, fp, r1
 80111ac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80111b0:	f8d9 2000 	ldr.w	r2, [r9]
 80111b4:	4461      	add	r1, ip
 80111b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80111ba:	fb0a c20b 	mla	r2, sl, fp, ip
 80111be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80111c2:	b289      	uxth	r1, r1
 80111c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80111c8:	4577      	cmp	r7, lr
 80111ca:	f849 1b04 	str.w	r1, [r9], #4
 80111ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80111d2:	d8e2      	bhi.n	801119a <__multiply+0xb2>
 80111d4:	9a01      	ldr	r2, [sp, #4]
 80111d6:	f845 c002 	str.w	ip, [r5, r2]
 80111da:	9a03      	ldr	r2, [sp, #12]
 80111dc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80111e0:	3304      	adds	r3, #4
 80111e2:	f1b9 0f00 	cmp.w	r9, #0
 80111e6:	d020      	beq.n	801122a <__multiply+0x142>
 80111e8:	6829      	ldr	r1, [r5, #0]
 80111ea:	f104 0c14 	add.w	ip, r4, #20
 80111ee:	46ae      	mov	lr, r5
 80111f0:	f04f 0a00 	mov.w	sl, #0
 80111f4:	f8bc b000 	ldrh.w	fp, [ip]
 80111f8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80111fc:	fb09 220b 	mla	r2, r9, fp, r2
 8011200:	4492      	add	sl, r2
 8011202:	b289      	uxth	r1, r1
 8011204:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011208:	f84e 1b04 	str.w	r1, [lr], #4
 801120c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011210:	f8be 1000 	ldrh.w	r1, [lr]
 8011214:	0c12      	lsrs	r2, r2, #16
 8011216:	fb09 1102 	mla	r1, r9, r2, r1
 801121a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801121e:	4567      	cmp	r7, ip
 8011220:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011224:	d8e6      	bhi.n	80111f4 <__multiply+0x10c>
 8011226:	9a01      	ldr	r2, [sp, #4]
 8011228:	50a9      	str	r1, [r5, r2]
 801122a:	3504      	adds	r5, #4
 801122c:	e79a      	b.n	8011164 <__multiply+0x7c>
 801122e:	3e01      	subs	r6, #1
 8011230:	e79c      	b.n	801116c <__multiply+0x84>
 8011232:	bf00      	nop
 8011234:	0801405f 	.word	0x0801405f
 8011238:	080140ec 	.word	0x080140ec

0801123c <__pow5mult>:
 801123c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011240:	4615      	mov	r5, r2
 8011242:	f012 0203 	ands.w	r2, r2, #3
 8011246:	4606      	mov	r6, r0
 8011248:	460f      	mov	r7, r1
 801124a:	d007      	beq.n	801125c <__pow5mult+0x20>
 801124c:	4c25      	ldr	r4, [pc, #148]	; (80112e4 <__pow5mult+0xa8>)
 801124e:	3a01      	subs	r2, #1
 8011250:	2300      	movs	r3, #0
 8011252:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011256:	f7ff fe51 	bl	8010efc <__multadd>
 801125a:	4607      	mov	r7, r0
 801125c:	10ad      	asrs	r5, r5, #2
 801125e:	d03d      	beq.n	80112dc <__pow5mult+0xa0>
 8011260:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011262:	b97c      	cbnz	r4, 8011284 <__pow5mult+0x48>
 8011264:	2010      	movs	r0, #16
 8011266:	f7ff fdcd 	bl	8010e04 <malloc>
 801126a:	4602      	mov	r2, r0
 801126c:	6270      	str	r0, [r6, #36]	; 0x24
 801126e:	b928      	cbnz	r0, 801127c <__pow5mult+0x40>
 8011270:	4b1d      	ldr	r3, [pc, #116]	; (80112e8 <__pow5mult+0xac>)
 8011272:	481e      	ldr	r0, [pc, #120]	; (80112ec <__pow5mult+0xb0>)
 8011274:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011278:	f000 fd6c 	bl	8011d54 <__assert_func>
 801127c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011280:	6004      	str	r4, [r0, #0]
 8011282:	60c4      	str	r4, [r0, #12]
 8011284:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011288:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801128c:	b94c      	cbnz	r4, 80112a2 <__pow5mult+0x66>
 801128e:	f240 2171 	movw	r1, #625	; 0x271
 8011292:	4630      	mov	r0, r6
 8011294:	f7ff ff12 	bl	80110bc <__i2b>
 8011298:	2300      	movs	r3, #0
 801129a:	f8c8 0008 	str.w	r0, [r8, #8]
 801129e:	4604      	mov	r4, r0
 80112a0:	6003      	str	r3, [r0, #0]
 80112a2:	f04f 0900 	mov.w	r9, #0
 80112a6:	07eb      	lsls	r3, r5, #31
 80112a8:	d50a      	bpl.n	80112c0 <__pow5mult+0x84>
 80112aa:	4639      	mov	r1, r7
 80112ac:	4622      	mov	r2, r4
 80112ae:	4630      	mov	r0, r6
 80112b0:	f7ff ff1a 	bl	80110e8 <__multiply>
 80112b4:	4639      	mov	r1, r7
 80112b6:	4680      	mov	r8, r0
 80112b8:	4630      	mov	r0, r6
 80112ba:	f7ff fdfd 	bl	8010eb8 <_Bfree>
 80112be:	4647      	mov	r7, r8
 80112c0:	106d      	asrs	r5, r5, #1
 80112c2:	d00b      	beq.n	80112dc <__pow5mult+0xa0>
 80112c4:	6820      	ldr	r0, [r4, #0]
 80112c6:	b938      	cbnz	r0, 80112d8 <__pow5mult+0x9c>
 80112c8:	4622      	mov	r2, r4
 80112ca:	4621      	mov	r1, r4
 80112cc:	4630      	mov	r0, r6
 80112ce:	f7ff ff0b 	bl	80110e8 <__multiply>
 80112d2:	6020      	str	r0, [r4, #0]
 80112d4:	f8c0 9000 	str.w	r9, [r0]
 80112d8:	4604      	mov	r4, r0
 80112da:	e7e4      	b.n	80112a6 <__pow5mult+0x6a>
 80112dc:	4638      	mov	r0, r7
 80112de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80112e2:	bf00      	nop
 80112e4:	08014238 	.word	0x08014238
 80112e8:	08013fed 	.word	0x08013fed
 80112ec:	080140ec 	.word	0x080140ec

080112f0 <__lshift>:
 80112f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112f4:	460c      	mov	r4, r1
 80112f6:	6849      	ldr	r1, [r1, #4]
 80112f8:	6923      	ldr	r3, [r4, #16]
 80112fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80112fe:	68a3      	ldr	r3, [r4, #8]
 8011300:	4607      	mov	r7, r0
 8011302:	4691      	mov	r9, r2
 8011304:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011308:	f108 0601 	add.w	r6, r8, #1
 801130c:	42b3      	cmp	r3, r6
 801130e:	db0b      	blt.n	8011328 <__lshift+0x38>
 8011310:	4638      	mov	r0, r7
 8011312:	f7ff fd91 	bl	8010e38 <_Balloc>
 8011316:	4605      	mov	r5, r0
 8011318:	b948      	cbnz	r0, 801132e <__lshift+0x3e>
 801131a:	4602      	mov	r2, r0
 801131c:	4b2a      	ldr	r3, [pc, #168]	; (80113c8 <__lshift+0xd8>)
 801131e:	482b      	ldr	r0, [pc, #172]	; (80113cc <__lshift+0xdc>)
 8011320:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011324:	f000 fd16 	bl	8011d54 <__assert_func>
 8011328:	3101      	adds	r1, #1
 801132a:	005b      	lsls	r3, r3, #1
 801132c:	e7ee      	b.n	801130c <__lshift+0x1c>
 801132e:	2300      	movs	r3, #0
 8011330:	f100 0114 	add.w	r1, r0, #20
 8011334:	f100 0210 	add.w	r2, r0, #16
 8011338:	4618      	mov	r0, r3
 801133a:	4553      	cmp	r3, sl
 801133c:	db37      	blt.n	80113ae <__lshift+0xbe>
 801133e:	6920      	ldr	r0, [r4, #16]
 8011340:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011344:	f104 0314 	add.w	r3, r4, #20
 8011348:	f019 091f 	ands.w	r9, r9, #31
 801134c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011350:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011354:	d02f      	beq.n	80113b6 <__lshift+0xc6>
 8011356:	f1c9 0e20 	rsb	lr, r9, #32
 801135a:	468a      	mov	sl, r1
 801135c:	f04f 0c00 	mov.w	ip, #0
 8011360:	681a      	ldr	r2, [r3, #0]
 8011362:	fa02 f209 	lsl.w	r2, r2, r9
 8011366:	ea42 020c 	orr.w	r2, r2, ip
 801136a:	f84a 2b04 	str.w	r2, [sl], #4
 801136e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011372:	4298      	cmp	r0, r3
 8011374:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011378:	d8f2      	bhi.n	8011360 <__lshift+0x70>
 801137a:	1b03      	subs	r3, r0, r4
 801137c:	3b15      	subs	r3, #21
 801137e:	f023 0303 	bic.w	r3, r3, #3
 8011382:	3304      	adds	r3, #4
 8011384:	f104 0215 	add.w	r2, r4, #21
 8011388:	4290      	cmp	r0, r2
 801138a:	bf38      	it	cc
 801138c:	2304      	movcc	r3, #4
 801138e:	f841 c003 	str.w	ip, [r1, r3]
 8011392:	f1bc 0f00 	cmp.w	ip, #0
 8011396:	d001      	beq.n	801139c <__lshift+0xac>
 8011398:	f108 0602 	add.w	r6, r8, #2
 801139c:	3e01      	subs	r6, #1
 801139e:	4638      	mov	r0, r7
 80113a0:	612e      	str	r6, [r5, #16]
 80113a2:	4621      	mov	r1, r4
 80113a4:	f7ff fd88 	bl	8010eb8 <_Bfree>
 80113a8:	4628      	mov	r0, r5
 80113aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80113b2:	3301      	adds	r3, #1
 80113b4:	e7c1      	b.n	801133a <__lshift+0x4a>
 80113b6:	3904      	subs	r1, #4
 80113b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80113bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80113c0:	4298      	cmp	r0, r3
 80113c2:	d8f9      	bhi.n	80113b8 <__lshift+0xc8>
 80113c4:	e7ea      	b.n	801139c <__lshift+0xac>
 80113c6:	bf00      	nop
 80113c8:	0801405f 	.word	0x0801405f
 80113cc:	080140ec 	.word	0x080140ec

080113d0 <__mcmp>:
 80113d0:	b530      	push	{r4, r5, lr}
 80113d2:	6902      	ldr	r2, [r0, #16]
 80113d4:	690c      	ldr	r4, [r1, #16]
 80113d6:	1b12      	subs	r2, r2, r4
 80113d8:	d10e      	bne.n	80113f8 <__mcmp+0x28>
 80113da:	f100 0314 	add.w	r3, r0, #20
 80113de:	3114      	adds	r1, #20
 80113e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80113e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80113e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80113ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80113f0:	42a5      	cmp	r5, r4
 80113f2:	d003      	beq.n	80113fc <__mcmp+0x2c>
 80113f4:	d305      	bcc.n	8011402 <__mcmp+0x32>
 80113f6:	2201      	movs	r2, #1
 80113f8:	4610      	mov	r0, r2
 80113fa:	bd30      	pop	{r4, r5, pc}
 80113fc:	4283      	cmp	r3, r0
 80113fe:	d3f3      	bcc.n	80113e8 <__mcmp+0x18>
 8011400:	e7fa      	b.n	80113f8 <__mcmp+0x28>
 8011402:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011406:	e7f7      	b.n	80113f8 <__mcmp+0x28>

08011408 <__mdiff>:
 8011408:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801140c:	460c      	mov	r4, r1
 801140e:	4606      	mov	r6, r0
 8011410:	4611      	mov	r1, r2
 8011412:	4620      	mov	r0, r4
 8011414:	4690      	mov	r8, r2
 8011416:	f7ff ffdb 	bl	80113d0 <__mcmp>
 801141a:	1e05      	subs	r5, r0, #0
 801141c:	d110      	bne.n	8011440 <__mdiff+0x38>
 801141e:	4629      	mov	r1, r5
 8011420:	4630      	mov	r0, r6
 8011422:	f7ff fd09 	bl	8010e38 <_Balloc>
 8011426:	b930      	cbnz	r0, 8011436 <__mdiff+0x2e>
 8011428:	4b3a      	ldr	r3, [pc, #232]	; (8011514 <__mdiff+0x10c>)
 801142a:	4602      	mov	r2, r0
 801142c:	f240 2132 	movw	r1, #562	; 0x232
 8011430:	4839      	ldr	r0, [pc, #228]	; (8011518 <__mdiff+0x110>)
 8011432:	f000 fc8f 	bl	8011d54 <__assert_func>
 8011436:	2301      	movs	r3, #1
 8011438:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801143c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011440:	bfa4      	itt	ge
 8011442:	4643      	movge	r3, r8
 8011444:	46a0      	movge	r8, r4
 8011446:	4630      	mov	r0, r6
 8011448:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801144c:	bfa6      	itte	ge
 801144e:	461c      	movge	r4, r3
 8011450:	2500      	movge	r5, #0
 8011452:	2501      	movlt	r5, #1
 8011454:	f7ff fcf0 	bl	8010e38 <_Balloc>
 8011458:	b920      	cbnz	r0, 8011464 <__mdiff+0x5c>
 801145a:	4b2e      	ldr	r3, [pc, #184]	; (8011514 <__mdiff+0x10c>)
 801145c:	4602      	mov	r2, r0
 801145e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011462:	e7e5      	b.n	8011430 <__mdiff+0x28>
 8011464:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011468:	6926      	ldr	r6, [r4, #16]
 801146a:	60c5      	str	r5, [r0, #12]
 801146c:	f104 0914 	add.w	r9, r4, #20
 8011470:	f108 0514 	add.w	r5, r8, #20
 8011474:	f100 0e14 	add.w	lr, r0, #20
 8011478:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801147c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011480:	f108 0210 	add.w	r2, r8, #16
 8011484:	46f2      	mov	sl, lr
 8011486:	2100      	movs	r1, #0
 8011488:	f859 3b04 	ldr.w	r3, [r9], #4
 801148c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011490:	fa1f f883 	uxth.w	r8, r3
 8011494:	fa11 f18b 	uxtah	r1, r1, fp
 8011498:	0c1b      	lsrs	r3, r3, #16
 801149a:	eba1 0808 	sub.w	r8, r1, r8
 801149e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80114a2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80114a6:	fa1f f888 	uxth.w	r8, r8
 80114aa:	1419      	asrs	r1, r3, #16
 80114ac:	454e      	cmp	r6, r9
 80114ae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80114b2:	f84a 3b04 	str.w	r3, [sl], #4
 80114b6:	d8e7      	bhi.n	8011488 <__mdiff+0x80>
 80114b8:	1b33      	subs	r3, r6, r4
 80114ba:	3b15      	subs	r3, #21
 80114bc:	f023 0303 	bic.w	r3, r3, #3
 80114c0:	3304      	adds	r3, #4
 80114c2:	3415      	adds	r4, #21
 80114c4:	42a6      	cmp	r6, r4
 80114c6:	bf38      	it	cc
 80114c8:	2304      	movcc	r3, #4
 80114ca:	441d      	add	r5, r3
 80114cc:	4473      	add	r3, lr
 80114ce:	469e      	mov	lr, r3
 80114d0:	462e      	mov	r6, r5
 80114d2:	4566      	cmp	r6, ip
 80114d4:	d30e      	bcc.n	80114f4 <__mdiff+0xec>
 80114d6:	f10c 0203 	add.w	r2, ip, #3
 80114da:	1b52      	subs	r2, r2, r5
 80114dc:	f022 0203 	bic.w	r2, r2, #3
 80114e0:	3d03      	subs	r5, #3
 80114e2:	45ac      	cmp	ip, r5
 80114e4:	bf38      	it	cc
 80114e6:	2200      	movcc	r2, #0
 80114e8:	441a      	add	r2, r3
 80114ea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80114ee:	b17b      	cbz	r3, 8011510 <__mdiff+0x108>
 80114f0:	6107      	str	r7, [r0, #16]
 80114f2:	e7a3      	b.n	801143c <__mdiff+0x34>
 80114f4:	f856 8b04 	ldr.w	r8, [r6], #4
 80114f8:	fa11 f288 	uxtah	r2, r1, r8
 80114fc:	1414      	asrs	r4, r2, #16
 80114fe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011502:	b292      	uxth	r2, r2
 8011504:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011508:	f84e 2b04 	str.w	r2, [lr], #4
 801150c:	1421      	asrs	r1, r4, #16
 801150e:	e7e0      	b.n	80114d2 <__mdiff+0xca>
 8011510:	3f01      	subs	r7, #1
 8011512:	e7ea      	b.n	80114ea <__mdiff+0xe2>
 8011514:	0801405f 	.word	0x0801405f
 8011518:	080140ec 	.word	0x080140ec

0801151c <__ulp>:
 801151c:	b082      	sub	sp, #8
 801151e:	ed8d 0b00 	vstr	d0, [sp]
 8011522:	9b01      	ldr	r3, [sp, #4]
 8011524:	4912      	ldr	r1, [pc, #72]	; (8011570 <__ulp+0x54>)
 8011526:	4019      	ands	r1, r3
 8011528:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801152c:	2900      	cmp	r1, #0
 801152e:	dd05      	ble.n	801153c <__ulp+0x20>
 8011530:	2200      	movs	r2, #0
 8011532:	460b      	mov	r3, r1
 8011534:	ec43 2b10 	vmov	d0, r2, r3
 8011538:	b002      	add	sp, #8
 801153a:	4770      	bx	lr
 801153c:	4249      	negs	r1, r1
 801153e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8011542:	ea4f 5021 	mov.w	r0, r1, asr #20
 8011546:	f04f 0200 	mov.w	r2, #0
 801154a:	f04f 0300 	mov.w	r3, #0
 801154e:	da04      	bge.n	801155a <__ulp+0x3e>
 8011550:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8011554:	fa41 f300 	asr.w	r3, r1, r0
 8011558:	e7ec      	b.n	8011534 <__ulp+0x18>
 801155a:	f1a0 0114 	sub.w	r1, r0, #20
 801155e:	291e      	cmp	r1, #30
 8011560:	bfda      	itte	le
 8011562:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8011566:	fa20 f101 	lsrle.w	r1, r0, r1
 801156a:	2101      	movgt	r1, #1
 801156c:	460a      	mov	r2, r1
 801156e:	e7e1      	b.n	8011534 <__ulp+0x18>
 8011570:	7ff00000 	.word	0x7ff00000

08011574 <__b2d>:
 8011574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011576:	6905      	ldr	r5, [r0, #16]
 8011578:	f100 0714 	add.w	r7, r0, #20
 801157c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011580:	1f2e      	subs	r6, r5, #4
 8011582:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8011586:	4620      	mov	r0, r4
 8011588:	f7ff fd48 	bl	801101c <__hi0bits>
 801158c:	f1c0 0320 	rsb	r3, r0, #32
 8011590:	280a      	cmp	r0, #10
 8011592:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8011610 <__b2d+0x9c>
 8011596:	600b      	str	r3, [r1, #0]
 8011598:	dc14      	bgt.n	80115c4 <__b2d+0x50>
 801159a:	f1c0 0e0b 	rsb	lr, r0, #11
 801159e:	fa24 f10e 	lsr.w	r1, r4, lr
 80115a2:	42b7      	cmp	r7, r6
 80115a4:	ea41 030c 	orr.w	r3, r1, ip
 80115a8:	bf34      	ite	cc
 80115aa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80115ae:	2100      	movcs	r1, #0
 80115b0:	3015      	adds	r0, #21
 80115b2:	fa04 f000 	lsl.w	r0, r4, r0
 80115b6:	fa21 f10e 	lsr.w	r1, r1, lr
 80115ba:	ea40 0201 	orr.w	r2, r0, r1
 80115be:	ec43 2b10 	vmov	d0, r2, r3
 80115c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80115c4:	42b7      	cmp	r7, r6
 80115c6:	bf3a      	itte	cc
 80115c8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80115cc:	f1a5 0608 	subcc.w	r6, r5, #8
 80115d0:	2100      	movcs	r1, #0
 80115d2:	380b      	subs	r0, #11
 80115d4:	d017      	beq.n	8011606 <__b2d+0x92>
 80115d6:	f1c0 0c20 	rsb	ip, r0, #32
 80115da:	fa04 f500 	lsl.w	r5, r4, r0
 80115de:	42be      	cmp	r6, r7
 80115e0:	fa21 f40c 	lsr.w	r4, r1, ip
 80115e4:	ea45 0504 	orr.w	r5, r5, r4
 80115e8:	bf8c      	ite	hi
 80115ea:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80115ee:	2400      	movls	r4, #0
 80115f0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80115f4:	fa01 f000 	lsl.w	r0, r1, r0
 80115f8:	fa24 f40c 	lsr.w	r4, r4, ip
 80115fc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011600:	ea40 0204 	orr.w	r2, r0, r4
 8011604:	e7db      	b.n	80115be <__b2d+0x4a>
 8011606:	ea44 030c 	orr.w	r3, r4, ip
 801160a:	460a      	mov	r2, r1
 801160c:	e7d7      	b.n	80115be <__b2d+0x4a>
 801160e:	bf00      	nop
 8011610:	3ff00000 	.word	0x3ff00000

08011614 <__d2b>:
 8011614:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011618:	4689      	mov	r9, r1
 801161a:	2101      	movs	r1, #1
 801161c:	ec57 6b10 	vmov	r6, r7, d0
 8011620:	4690      	mov	r8, r2
 8011622:	f7ff fc09 	bl	8010e38 <_Balloc>
 8011626:	4604      	mov	r4, r0
 8011628:	b930      	cbnz	r0, 8011638 <__d2b+0x24>
 801162a:	4602      	mov	r2, r0
 801162c:	4b25      	ldr	r3, [pc, #148]	; (80116c4 <__d2b+0xb0>)
 801162e:	4826      	ldr	r0, [pc, #152]	; (80116c8 <__d2b+0xb4>)
 8011630:	f240 310a 	movw	r1, #778	; 0x30a
 8011634:	f000 fb8e 	bl	8011d54 <__assert_func>
 8011638:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801163c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011640:	bb35      	cbnz	r5, 8011690 <__d2b+0x7c>
 8011642:	2e00      	cmp	r6, #0
 8011644:	9301      	str	r3, [sp, #4]
 8011646:	d028      	beq.n	801169a <__d2b+0x86>
 8011648:	4668      	mov	r0, sp
 801164a:	9600      	str	r6, [sp, #0]
 801164c:	f7ff fd06 	bl	801105c <__lo0bits>
 8011650:	9900      	ldr	r1, [sp, #0]
 8011652:	b300      	cbz	r0, 8011696 <__d2b+0x82>
 8011654:	9a01      	ldr	r2, [sp, #4]
 8011656:	f1c0 0320 	rsb	r3, r0, #32
 801165a:	fa02 f303 	lsl.w	r3, r2, r3
 801165e:	430b      	orrs	r3, r1
 8011660:	40c2      	lsrs	r2, r0
 8011662:	6163      	str	r3, [r4, #20]
 8011664:	9201      	str	r2, [sp, #4]
 8011666:	9b01      	ldr	r3, [sp, #4]
 8011668:	61a3      	str	r3, [r4, #24]
 801166a:	2b00      	cmp	r3, #0
 801166c:	bf14      	ite	ne
 801166e:	2202      	movne	r2, #2
 8011670:	2201      	moveq	r2, #1
 8011672:	6122      	str	r2, [r4, #16]
 8011674:	b1d5      	cbz	r5, 80116ac <__d2b+0x98>
 8011676:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801167a:	4405      	add	r5, r0
 801167c:	f8c9 5000 	str.w	r5, [r9]
 8011680:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011684:	f8c8 0000 	str.w	r0, [r8]
 8011688:	4620      	mov	r0, r4
 801168a:	b003      	add	sp, #12
 801168c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011690:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011694:	e7d5      	b.n	8011642 <__d2b+0x2e>
 8011696:	6161      	str	r1, [r4, #20]
 8011698:	e7e5      	b.n	8011666 <__d2b+0x52>
 801169a:	a801      	add	r0, sp, #4
 801169c:	f7ff fcde 	bl	801105c <__lo0bits>
 80116a0:	9b01      	ldr	r3, [sp, #4]
 80116a2:	6163      	str	r3, [r4, #20]
 80116a4:	2201      	movs	r2, #1
 80116a6:	6122      	str	r2, [r4, #16]
 80116a8:	3020      	adds	r0, #32
 80116aa:	e7e3      	b.n	8011674 <__d2b+0x60>
 80116ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80116b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80116b4:	f8c9 0000 	str.w	r0, [r9]
 80116b8:	6918      	ldr	r0, [r3, #16]
 80116ba:	f7ff fcaf 	bl	801101c <__hi0bits>
 80116be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80116c2:	e7df      	b.n	8011684 <__d2b+0x70>
 80116c4:	0801405f 	.word	0x0801405f
 80116c8:	080140ec 	.word	0x080140ec

080116cc <__ratio>:
 80116cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116d0:	4688      	mov	r8, r1
 80116d2:	4669      	mov	r1, sp
 80116d4:	4681      	mov	r9, r0
 80116d6:	f7ff ff4d 	bl	8011574 <__b2d>
 80116da:	a901      	add	r1, sp, #4
 80116dc:	4640      	mov	r0, r8
 80116de:	ec55 4b10 	vmov	r4, r5, d0
 80116e2:	f7ff ff47 	bl	8011574 <__b2d>
 80116e6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80116ea:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80116ee:	eba3 0c02 	sub.w	ip, r3, r2
 80116f2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80116f6:	1a9b      	subs	r3, r3, r2
 80116f8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80116fc:	ec51 0b10 	vmov	r0, r1, d0
 8011700:	2b00      	cmp	r3, #0
 8011702:	bfd6      	itet	le
 8011704:	460a      	movle	r2, r1
 8011706:	462a      	movgt	r2, r5
 8011708:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801170c:	468b      	mov	fp, r1
 801170e:	462f      	mov	r7, r5
 8011710:	bfd4      	ite	le
 8011712:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011716:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801171a:	4620      	mov	r0, r4
 801171c:	ee10 2a10 	vmov	r2, s0
 8011720:	465b      	mov	r3, fp
 8011722:	4639      	mov	r1, r7
 8011724:	f7ef f892 	bl	800084c <__aeabi_ddiv>
 8011728:	ec41 0b10 	vmov	d0, r0, r1
 801172c:	b003      	add	sp, #12
 801172e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011732 <__copybits>:
 8011732:	3901      	subs	r1, #1
 8011734:	b570      	push	{r4, r5, r6, lr}
 8011736:	1149      	asrs	r1, r1, #5
 8011738:	6914      	ldr	r4, [r2, #16]
 801173a:	3101      	adds	r1, #1
 801173c:	f102 0314 	add.w	r3, r2, #20
 8011740:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011744:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011748:	1f05      	subs	r5, r0, #4
 801174a:	42a3      	cmp	r3, r4
 801174c:	d30c      	bcc.n	8011768 <__copybits+0x36>
 801174e:	1aa3      	subs	r3, r4, r2
 8011750:	3b11      	subs	r3, #17
 8011752:	f023 0303 	bic.w	r3, r3, #3
 8011756:	3211      	adds	r2, #17
 8011758:	42a2      	cmp	r2, r4
 801175a:	bf88      	it	hi
 801175c:	2300      	movhi	r3, #0
 801175e:	4418      	add	r0, r3
 8011760:	2300      	movs	r3, #0
 8011762:	4288      	cmp	r0, r1
 8011764:	d305      	bcc.n	8011772 <__copybits+0x40>
 8011766:	bd70      	pop	{r4, r5, r6, pc}
 8011768:	f853 6b04 	ldr.w	r6, [r3], #4
 801176c:	f845 6f04 	str.w	r6, [r5, #4]!
 8011770:	e7eb      	b.n	801174a <__copybits+0x18>
 8011772:	f840 3b04 	str.w	r3, [r0], #4
 8011776:	e7f4      	b.n	8011762 <__copybits+0x30>

08011778 <__any_on>:
 8011778:	f100 0214 	add.w	r2, r0, #20
 801177c:	6900      	ldr	r0, [r0, #16]
 801177e:	114b      	asrs	r3, r1, #5
 8011780:	4298      	cmp	r0, r3
 8011782:	b510      	push	{r4, lr}
 8011784:	db11      	blt.n	80117aa <__any_on+0x32>
 8011786:	dd0a      	ble.n	801179e <__any_on+0x26>
 8011788:	f011 011f 	ands.w	r1, r1, #31
 801178c:	d007      	beq.n	801179e <__any_on+0x26>
 801178e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011792:	fa24 f001 	lsr.w	r0, r4, r1
 8011796:	fa00 f101 	lsl.w	r1, r0, r1
 801179a:	428c      	cmp	r4, r1
 801179c:	d10b      	bne.n	80117b6 <__any_on+0x3e>
 801179e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80117a2:	4293      	cmp	r3, r2
 80117a4:	d803      	bhi.n	80117ae <__any_on+0x36>
 80117a6:	2000      	movs	r0, #0
 80117a8:	bd10      	pop	{r4, pc}
 80117aa:	4603      	mov	r3, r0
 80117ac:	e7f7      	b.n	801179e <__any_on+0x26>
 80117ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80117b2:	2900      	cmp	r1, #0
 80117b4:	d0f5      	beq.n	80117a2 <__any_on+0x2a>
 80117b6:	2001      	movs	r0, #1
 80117b8:	e7f6      	b.n	80117a8 <__any_on+0x30>

080117ba <_calloc_r>:
 80117ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80117bc:	fba1 2402 	umull	r2, r4, r1, r2
 80117c0:	b94c      	cbnz	r4, 80117d6 <_calloc_r+0x1c>
 80117c2:	4611      	mov	r1, r2
 80117c4:	9201      	str	r2, [sp, #4]
 80117c6:	f000 f87b 	bl	80118c0 <_malloc_r>
 80117ca:	9a01      	ldr	r2, [sp, #4]
 80117cc:	4605      	mov	r5, r0
 80117ce:	b930      	cbnz	r0, 80117de <_calloc_r+0x24>
 80117d0:	4628      	mov	r0, r5
 80117d2:	b003      	add	sp, #12
 80117d4:	bd30      	pop	{r4, r5, pc}
 80117d6:	220c      	movs	r2, #12
 80117d8:	6002      	str	r2, [r0, #0]
 80117da:	2500      	movs	r5, #0
 80117dc:	e7f8      	b.n	80117d0 <_calloc_r+0x16>
 80117de:	4621      	mov	r1, r4
 80117e0:	f7fc fd5e 	bl	800e2a0 <memset>
 80117e4:	e7f4      	b.n	80117d0 <_calloc_r+0x16>
	...

080117e8 <_free_r>:
 80117e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80117ea:	2900      	cmp	r1, #0
 80117ec:	d044      	beq.n	8011878 <_free_r+0x90>
 80117ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80117f2:	9001      	str	r0, [sp, #4]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	f1a1 0404 	sub.w	r4, r1, #4
 80117fa:	bfb8      	it	lt
 80117fc:	18e4      	addlt	r4, r4, r3
 80117fe:	f000 fb15 	bl	8011e2c <__malloc_lock>
 8011802:	4a1e      	ldr	r2, [pc, #120]	; (801187c <_free_r+0x94>)
 8011804:	9801      	ldr	r0, [sp, #4]
 8011806:	6813      	ldr	r3, [r2, #0]
 8011808:	b933      	cbnz	r3, 8011818 <_free_r+0x30>
 801180a:	6063      	str	r3, [r4, #4]
 801180c:	6014      	str	r4, [r2, #0]
 801180e:	b003      	add	sp, #12
 8011810:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011814:	f000 bb10 	b.w	8011e38 <__malloc_unlock>
 8011818:	42a3      	cmp	r3, r4
 801181a:	d908      	bls.n	801182e <_free_r+0x46>
 801181c:	6825      	ldr	r5, [r4, #0]
 801181e:	1961      	adds	r1, r4, r5
 8011820:	428b      	cmp	r3, r1
 8011822:	bf01      	itttt	eq
 8011824:	6819      	ldreq	r1, [r3, #0]
 8011826:	685b      	ldreq	r3, [r3, #4]
 8011828:	1949      	addeq	r1, r1, r5
 801182a:	6021      	streq	r1, [r4, #0]
 801182c:	e7ed      	b.n	801180a <_free_r+0x22>
 801182e:	461a      	mov	r2, r3
 8011830:	685b      	ldr	r3, [r3, #4]
 8011832:	b10b      	cbz	r3, 8011838 <_free_r+0x50>
 8011834:	42a3      	cmp	r3, r4
 8011836:	d9fa      	bls.n	801182e <_free_r+0x46>
 8011838:	6811      	ldr	r1, [r2, #0]
 801183a:	1855      	adds	r5, r2, r1
 801183c:	42a5      	cmp	r5, r4
 801183e:	d10b      	bne.n	8011858 <_free_r+0x70>
 8011840:	6824      	ldr	r4, [r4, #0]
 8011842:	4421      	add	r1, r4
 8011844:	1854      	adds	r4, r2, r1
 8011846:	42a3      	cmp	r3, r4
 8011848:	6011      	str	r1, [r2, #0]
 801184a:	d1e0      	bne.n	801180e <_free_r+0x26>
 801184c:	681c      	ldr	r4, [r3, #0]
 801184e:	685b      	ldr	r3, [r3, #4]
 8011850:	6053      	str	r3, [r2, #4]
 8011852:	4421      	add	r1, r4
 8011854:	6011      	str	r1, [r2, #0]
 8011856:	e7da      	b.n	801180e <_free_r+0x26>
 8011858:	d902      	bls.n	8011860 <_free_r+0x78>
 801185a:	230c      	movs	r3, #12
 801185c:	6003      	str	r3, [r0, #0]
 801185e:	e7d6      	b.n	801180e <_free_r+0x26>
 8011860:	6825      	ldr	r5, [r4, #0]
 8011862:	1961      	adds	r1, r4, r5
 8011864:	428b      	cmp	r3, r1
 8011866:	bf04      	itt	eq
 8011868:	6819      	ldreq	r1, [r3, #0]
 801186a:	685b      	ldreq	r3, [r3, #4]
 801186c:	6063      	str	r3, [r4, #4]
 801186e:	bf04      	itt	eq
 8011870:	1949      	addeq	r1, r1, r5
 8011872:	6021      	streq	r1, [r4, #0]
 8011874:	6054      	str	r4, [r2, #4]
 8011876:	e7ca      	b.n	801180e <_free_r+0x26>
 8011878:	b003      	add	sp, #12
 801187a:	bd30      	pop	{r4, r5, pc}
 801187c:	20003198 	.word	0x20003198

08011880 <sbrk_aligned>:
 8011880:	b570      	push	{r4, r5, r6, lr}
 8011882:	4e0e      	ldr	r6, [pc, #56]	; (80118bc <sbrk_aligned+0x3c>)
 8011884:	460c      	mov	r4, r1
 8011886:	6831      	ldr	r1, [r6, #0]
 8011888:	4605      	mov	r5, r0
 801188a:	b911      	cbnz	r1, 8011892 <sbrk_aligned+0x12>
 801188c:	f000 f9f0 	bl	8011c70 <_sbrk_r>
 8011890:	6030      	str	r0, [r6, #0]
 8011892:	4621      	mov	r1, r4
 8011894:	4628      	mov	r0, r5
 8011896:	f000 f9eb 	bl	8011c70 <_sbrk_r>
 801189a:	1c43      	adds	r3, r0, #1
 801189c:	d00a      	beq.n	80118b4 <sbrk_aligned+0x34>
 801189e:	1cc4      	adds	r4, r0, #3
 80118a0:	f024 0403 	bic.w	r4, r4, #3
 80118a4:	42a0      	cmp	r0, r4
 80118a6:	d007      	beq.n	80118b8 <sbrk_aligned+0x38>
 80118a8:	1a21      	subs	r1, r4, r0
 80118aa:	4628      	mov	r0, r5
 80118ac:	f000 f9e0 	bl	8011c70 <_sbrk_r>
 80118b0:	3001      	adds	r0, #1
 80118b2:	d101      	bne.n	80118b8 <sbrk_aligned+0x38>
 80118b4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80118b8:	4620      	mov	r0, r4
 80118ba:	bd70      	pop	{r4, r5, r6, pc}
 80118bc:	2000319c 	.word	0x2000319c

080118c0 <_malloc_r>:
 80118c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118c4:	1ccd      	adds	r5, r1, #3
 80118c6:	f025 0503 	bic.w	r5, r5, #3
 80118ca:	3508      	adds	r5, #8
 80118cc:	2d0c      	cmp	r5, #12
 80118ce:	bf38      	it	cc
 80118d0:	250c      	movcc	r5, #12
 80118d2:	2d00      	cmp	r5, #0
 80118d4:	4607      	mov	r7, r0
 80118d6:	db01      	blt.n	80118dc <_malloc_r+0x1c>
 80118d8:	42a9      	cmp	r1, r5
 80118da:	d905      	bls.n	80118e8 <_malloc_r+0x28>
 80118dc:	230c      	movs	r3, #12
 80118de:	603b      	str	r3, [r7, #0]
 80118e0:	2600      	movs	r6, #0
 80118e2:	4630      	mov	r0, r6
 80118e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118e8:	4e2e      	ldr	r6, [pc, #184]	; (80119a4 <_malloc_r+0xe4>)
 80118ea:	f000 fa9f 	bl	8011e2c <__malloc_lock>
 80118ee:	6833      	ldr	r3, [r6, #0]
 80118f0:	461c      	mov	r4, r3
 80118f2:	bb34      	cbnz	r4, 8011942 <_malloc_r+0x82>
 80118f4:	4629      	mov	r1, r5
 80118f6:	4638      	mov	r0, r7
 80118f8:	f7ff ffc2 	bl	8011880 <sbrk_aligned>
 80118fc:	1c43      	adds	r3, r0, #1
 80118fe:	4604      	mov	r4, r0
 8011900:	d14d      	bne.n	801199e <_malloc_r+0xde>
 8011902:	6834      	ldr	r4, [r6, #0]
 8011904:	4626      	mov	r6, r4
 8011906:	2e00      	cmp	r6, #0
 8011908:	d140      	bne.n	801198c <_malloc_r+0xcc>
 801190a:	6823      	ldr	r3, [r4, #0]
 801190c:	4631      	mov	r1, r6
 801190e:	4638      	mov	r0, r7
 8011910:	eb04 0803 	add.w	r8, r4, r3
 8011914:	f000 f9ac 	bl	8011c70 <_sbrk_r>
 8011918:	4580      	cmp	r8, r0
 801191a:	d13a      	bne.n	8011992 <_malloc_r+0xd2>
 801191c:	6821      	ldr	r1, [r4, #0]
 801191e:	3503      	adds	r5, #3
 8011920:	1a6d      	subs	r5, r5, r1
 8011922:	f025 0503 	bic.w	r5, r5, #3
 8011926:	3508      	adds	r5, #8
 8011928:	2d0c      	cmp	r5, #12
 801192a:	bf38      	it	cc
 801192c:	250c      	movcc	r5, #12
 801192e:	4629      	mov	r1, r5
 8011930:	4638      	mov	r0, r7
 8011932:	f7ff ffa5 	bl	8011880 <sbrk_aligned>
 8011936:	3001      	adds	r0, #1
 8011938:	d02b      	beq.n	8011992 <_malloc_r+0xd2>
 801193a:	6823      	ldr	r3, [r4, #0]
 801193c:	442b      	add	r3, r5
 801193e:	6023      	str	r3, [r4, #0]
 8011940:	e00e      	b.n	8011960 <_malloc_r+0xa0>
 8011942:	6822      	ldr	r2, [r4, #0]
 8011944:	1b52      	subs	r2, r2, r5
 8011946:	d41e      	bmi.n	8011986 <_malloc_r+0xc6>
 8011948:	2a0b      	cmp	r2, #11
 801194a:	d916      	bls.n	801197a <_malloc_r+0xba>
 801194c:	1961      	adds	r1, r4, r5
 801194e:	42a3      	cmp	r3, r4
 8011950:	6025      	str	r5, [r4, #0]
 8011952:	bf18      	it	ne
 8011954:	6059      	strne	r1, [r3, #4]
 8011956:	6863      	ldr	r3, [r4, #4]
 8011958:	bf08      	it	eq
 801195a:	6031      	streq	r1, [r6, #0]
 801195c:	5162      	str	r2, [r4, r5]
 801195e:	604b      	str	r3, [r1, #4]
 8011960:	4638      	mov	r0, r7
 8011962:	f104 060b 	add.w	r6, r4, #11
 8011966:	f000 fa67 	bl	8011e38 <__malloc_unlock>
 801196a:	f026 0607 	bic.w	r6, r6, #7
 801196e:	1d23      	adds	r3, r4, #4
 8011970:	1af2      	subs	r2, r6, r3
 8011972:	d0b6      	beq.n	80118e2 <_malloc_r+0x22>
 8011974:	1b9b      	subs	r3, r3, r6
 8011976:	50a3      	str	r3, [r4, r2]
 8011978:	e7b3      	b.n	80118e2 <_malloc_r+0x22>
 801197a:	6862      	ldr	r2, [r4, #4]
 801197c:	42a3      	cmp	r3, r4
 801197e:	bf0c      	ite	eq
 8011980:	6032      	streq	r2, [r6, #0]
 8011982:	605a      	strne	r2, [r3, #4]
 8011984:	e7ec      	b.n	8011960 <_malloc_r+0xa0>
 8011986:	4623      	mov	r3, r4
 8011988:	6864      	ldr	r4, [r4, #4]
 801198a:	e7b2      	b.n	80118f2 <_malloc_r+0x32>
 801198c:	4634      	mov	r4, r6
 801198e:	6876      	ldr	r6, [r6, #4]
 8011990:	e7b9      	b.n	8011906 <_malloc_r+0x46>
 8011992:	230c      	movs	r3, #12
 8011994:	603b      	str	r3, [r7, #0]
 8011996:	4638      	mov	r0, r7
 8011998:	f000 fa4e 	bl	8011e38 <__malloc_unlock>
 801199c:	e7a1      	b.n	80118e2 <_malloc_r+0x22>
 801199e:	6025      	str	r5, [r4, #0]
 80119a0:	e7de      	b.n	8011960 <_malloc_r+0xa0>
 80119a2:	bf00      	nop
 80119a4:	20003198 	.word	0x20003198

080119a8 <__ssputs_r>:
 80119a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119ac:	688e      	ldr	r6, [r1, #8]
 80119ae:	429e      	cmp	r6, r3
 80119b0:	4682      	mov	sl, r0
 80119b2:	460c      	mov	r4, r1
 80119b4:	4690      	mov	r8, r2
 80119b6:	461f      	mov	r7, r3
 80119b8:	d838      	bhi.n	8011a2c <__ssputs_r+0x84>
 80119ba:	898a      	ldrh	r2, [r1, #12]
 80119bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80119c0:	d032      	beq.n	8011a28 <__ssputs_r+0x80>
 80119c2:	6825      	ldr	r5, [r4, #0]
 80119c4:	6909      	ldr	r1, [r1, #16]
 80119c6:	eba5 0901 	sub.w	r9, r5, r1
 80119ca:	6965      	ldr	r5, [r4, #20]
 80119cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80119d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80119d4:	3301      	adds	r3, #1
 80119d6:	444b      	add	r3, r9
 80119d8:	106d      	asrs	r5, r5, #1
 80119da:	429d      	cmp	r5, r3
 80119dc:	bf38      	it	cc
 80119de:	461d      	movcc	r5, r3
 80119e0:	0553      	lsls	r3, r2, #21
 80119e2:	d531      	bpl.n	8011a48 <__ssputs_r+0xa0>
 80119e4:	4629      	mov	r1, r5
 80119e6:	f7ff ff6b 	bl	80118c0 <_malloc_r>
 80119ea:	4606      	mov	r6, r0
 80119ec:	b950      	cbnz	r0, 8011a04 <__ssputs_r+0x5c>
 80119ee:	230c      	movs	r3, #12
 80119f0:	f8ca 3000 	str.w	r3, [sl]
 80119f4:	89a3      	ldrh	r3, [r4, #12]
 80119f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80119fa:	81a3      	strh	r3, [r4, #12]
 80119fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a04:	6921      	ldr	r1, [r4, #16]
 8011a06:	464a      	mov	r2, r9
 8011a08:	f7fc fc3c 	bl	800e284 <memcpy>
 8011a0c:	89a3      	ldrh	r3, [r4, #12]
 8011a0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a16:	81a3      	strh	r3, [r4, #12]
 8011a18:	6126      	str	r6, [r4, #16]
 8011a1a:	6165      	str	r5, [r4, #20]
 8011a1c:	444e      	add	r6, r9
 8011a1e:	eba5 0509 	sub.w	r5, r5, r9
 8011a22:	6026      	str	r6, [r4, #0]
 8011a24:	60a5      	str	r5, [r4, #8]
 8011a26:	463e      	mov	r6, r7
 8011a28:	42be      	cmp	r6, r7
 8011a2a:	d900      	bls.n	8011a2e <__ssputs_r+0x86>
 8011a2c:	463e      	mov	r6, r7
 8011a2e:	6820      	ldr	r0, [r4, #0]
 8011a30:	4632      	mov	r2, r6
 8011a32:	4641      	mov	r1, r8
 8011a34:	f000 f9e0 	bl	8011df8 <memmove>
 8011a38:	68a3      	ldr	r3, [r4, #8]
 8011a3a:	1b9b      	subs	r3, r3, r6
 8011a3c:	60a3      	str	r3, [r4, #8]
 8011a3e:	6823      	ldr	r3, [r4, #0]
 8011a40:	4433      	add	r3, r6
 8011a42:	6023      	str	r3, [r4, #0]
 8011a44:	2000      	movs	r0, #0
 8011a46:	e7db      	b.n	8011a00 <__ssputs_r+0x58>
 8011a48:	462a      	mov	r2, r5
 8011a4a:	f000 f9fb 	bl	8011e44 <_realloc_r>
 8011a4e:	4606      	mov	r6, r0
 8011a50:	2800      	cmp	r0, #0
 8011a52:	d1e1      	bne.n	8011a18 <__ssputs_r+0x70>
 8011a54:	6921      	ldr	r1, [r4, #16]
 8011a56:	4650      	mov	r0, sl
 8011a58:	f7ff fec6 	bl	80117e8 <_free_r>
 8011a5c:	e7c7      	b.n	80119ee <__ssputs_r+0x46>
	...

08011a60 <_svfiprintf_r>:
 8011a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a64:	4698      	mov	r8, r3
 8011a66:	898b      	ldrh	r3, [r1, #12]
 8011a68:	061b      	lsls	r3, r3, #24
 8011a6a:	b09d      	sub	sp, #116	; 0x74
 8011a6c:	4607      	mov	r7, r0
 8011a6e:	460d      	mov	r5, r1
 8011a70:	4614      	mov	r4, r2
 8011a72:	d50e      	bpl.n	8011a92 <_svfiprintf_r+0x32>
 8011a74:	690b      	ldr	r3, [r1, #16]
 8011a76:	b963      	cbnz	r3, 8011a92 <_svfiprintf_r+0x32>
 8011a78:	2140      	movs	r1, #64	; 0x40
 8011a7a:	f7ff ff21 	bl	80118c0 <_malloc_r>
 8011a7e:	6028      	str	r0, [r5, #0]
 8011a80:	6128      	str	r0, [r5, #16]
 8011a82:	b920      	cbnz	r0, 8011a8e <_svfiprintf_r+0x2e>
 8011a84:	230c      	movs	r3, #12
 8011a86:	603b      	str	r3, [r7, #0]
 8011a88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011a8c:	e0d1      	b.n	8011c32 <_svfiprintf_r+0x1d2>
 8011a8e:	2340      	movs	r3, #64	; 0x40
 8011a90:	616b      	str	r3, [r5, #20]
 8011a92:	2300      	movs	r3, #0
 8011a94:	9309      	str	r3, [sp, #36]	; 0x24
 8011a96:	2320      	movs	r3, #32
 8011a98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011a9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011aa0:	2330      	movs	r3, #48	; 0x30
 8011aa2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011c4c <_svfiprintf_r+0x1ec>
 8011aa6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011aaa:	f04f 0901 	mov.w	r9, #1
 8011aae:	4623      	mov	r3, r4
 8011ab0:	469a      	mov	sl, r3
 8011ab2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011ab6:	b10a      	cbz	r2, 8011abc <_svfiprintf_r+0x5c>
 8011ab8:	2a25      	cmp	r2, #37	; 0x25
 8011aba:	d1f9      	bne.n	8011ab0 <_svfiprintf_r+0x50>
 8011abc:	ebba 0b04 	subs.w	fp, sl, r4
 8011ac0:	d00b      	beq.n	8011ada <_svfiprintf_r+0x7a>
 8011ac2:	465b      	mov	r3, fp
 8011ac4:	4622      	mov	r2, r4
 8011ac6:	4629      	mov	r1, r5
 8011ac8:	4638      	mov	r0, r7
 8011aca:	f7ff ff6d 	bl	80119a8 <__ssputs_r>
 8011ace:	3001      	adds	r0, #1
 8011ad0:	f000 80aa 	beq.w	8011c28 <_svfiprintf_r+0x1c8>
 8011ad4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011ad6:	445a      	add	r2, fp
 8011ad8:	9209      	str	r2, [sp, #36]	; 0x24
 8011ada:	f89a 3000 	ldrb.w	r3, [sl]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	f000 80a2 	beq.w	8011c28 <_svfiprintf_r+0x1c8>
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011aea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011aee:	f10a 0a01 	add.w	sl, sl, #1
 8011af2:	9304      	str	r3, [sp, #16]
 8011af4:	9307      	str	r3, [sp, #28]
 8011af6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011afa:	931a      	str	r3, [sp, #104]	; 0x68
 8011afc:	4654      	mov	r4, sl
 8011afe:	2205      	movs	r2, #5
 8011b00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b04:	4851      	ldr	r0, [pc, #324]	; (8011c4c <_svfiprintf_r+0x1ec>)
 8011b06:	f7ee fb6b 	bl	80001e0 <memchr>
 8011b0a:	9a04      	ldr	r2, [sp, #16]
 8011b0c:	b9d8      	cbnz	r0, 8011b46 <_svfiprintf_r+0xe6>
 8011b0e:	06d0      	lsls	r0, r2, #27
 8011b10:	bf44      	itt	mi
 8011b12:	2320      	movmi	r3, #32
 8011b14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011b18:	0711      	lsls	r1, r2, #28
 8011b1a:	bf44      	itt	mi
 8011b1c:	232b      	movmi	r3, #43	; 0x2b
 8011b1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011b22:	f89a 3000 	ldrb.w	r3, [sl]
 8011b26:	2b2a      	cmp	r3, #42	; 0x2a
 8011b28:	d015      	beq.n	8011b56 <_svfiprintf_r+0xf6>
 8011b2a:	9a07      	ldr	r2, [sp, #28]
 8011b2c:	4654      	mov	r4, sl
 8011b2e:	2000      	movs	r0, #0
 8011b30:	f04f 0c0a 	mov.w	ip, #10
 8011b34:	4621      	mov	r1, r4
 8011b36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011b3a:	3b30      	subs	r3, #48	; 0x30
 8011b3c:	2b09      	cmp	r3, #9
 8011b3e:	d94e      	bls.n	8011bde <_svfiprintf_r+0x17e>
 8011b40:	b1b0      	cbz	r0, 8011b70 <_svfiprintf_r+0x110>
 8011b42:	9207      	str	r2, [sp, #28]
 8011b44:	e014      	b.n	8011b70 <_svfiprintf_r+0x110>
 8011b46:	eba0 0308 	sub.w	r3, r0, r8
 8011b4a:	fa09 f303 	lsl.w	r3, r9, r3
 8011b4e:	4313      	orrs	r3, r2
 8011b50:	9304      	str	r3, [sp, #16]
 8011b52:	46a2      	mov	sl, r4
 8011b54:	e7d2      	b.n	8011afc <_svfiprintf_r+0x9c>
 8011b56:	9b03      	ldr	r3, [sp, #12]
 8011b58:	1d19      	adds	r1, r3, #4
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	9103      	str	r1, [sp, #12]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	bfbb      	ittet	lt
 8011b62:	425b      	neglt	r3, r3
 8011b64:	f042 0202 	orrlt.w	r2, r2, #2
 8011b68:	9307      	strge	r3, [sp, #28]
 8011b6a:	9307      	strlt	r3, [sp, #28]
 8011b6c:	bfb8      	it	lt
 8011b6e:	9204      	strlt	r2, [sp, #16]
 8011b70:	7823      	ldrb	r3, [r4, #0]
 8011b72:	2b2e      	cmp	r3, #46	; 0x2e
 8011b74:	d10c      	bne.n	8011b90 <_svfiprintf_r+0x130>
 8011b76:	7863      	ldrb	r3, [r4, #1]
 8011b78:	2b2a      	cmp	r3, #42	; 0x2a
 8011b7a:	d135      	bne.n	8011be8 <_svfiprintf_r+0x188>
 8011b7c:	9b03      	ldr	r3, [sp, #12]
 8011b7e:	1d1a      	adds	r2, r3, #4
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	9203      	str	r2, [sp, #12]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	bfb8      	it	lt
 8011b88:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011b8c:	3402      	adds	r4, #2
 8011b8e:	9305      	str	r3, [sp, #20]
 8011b90:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011c5c <_svfiprintf_r+0x1fc>
 8011b94:	7821      	ldrb	r1, [r4, #0]
 8011b96:	2203      	movs	r2, #3
 8011b98:	4650      	mov	r0, sl
 8011b9a:	f7ee fb21 	bl	80001e0 <memchr>
 8011b9e:	b140      	cbz	r0, 8011bb2 <_svfiprintf_r+0x152>
 8011ba0:	2340      	movs	r3, #64	; 0x40
 8011ba2:	eba0 000a 	sub.w	r0, r0, sl
 8011ba6:	fa03 f000 	lsl.w	r0, r3, r0
 8011baa:	9b04      	ldr	r3, [sp, #16]
 8011bac:	4303      	orrs	r3, r0
 8011bae:	3401      	adds	r4, #1
 8011bb0:	9304      	str	r3, [sp, #16]
 8011bb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011bb6:	4826      	ldr	r0, [pc, #152]	; (8011c50 <_svfiprintf_r+0x1f0>)
 8011bb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011bbc:	2206      	movs	r2, #6
 8011bbe:	f7ee fb0f 	bl	80001e0 <memchr>
 8011bc2:	2800      	cmp	r0, #0
 8011bc4:	d038      	beq.n	8011c38 <_svfiprintf_r+0x1d8>
 8011bc6:	4b23      	ldr	r3, [pc, #140]	; (8011c54 <_svfiprintf_r+0x1f4>)
 8011bc8:	bb1b      	cbnz	r3, 8011c12 <_svfiprintf_r+0x1b2>
 8011bca:	9b03      	ldr	r3, [sp, #12]
 8011bcc:	3307      	adds	r3, #7
 8011bce:	f023 0307 	bic.w	r3, r3, #7
 8011bd2:	3308      	adds	r3, #8
 8011bd4:	9303      	str	r3, [sp, #12]
 8011bd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bd8:	4433      	add	r3, r6
 8011bda:	9309      	str	r3, [sp, #36]	; 0x24
 8011bdc:	e767      	b.n	8011aae <_svfiprintf_r+0x4e>
 8011bde:	fb0c 3202 	mla	r2, ip, r2, r3
 8011be2:	460c      	mov	r4, r1
 8011be4:	2001      	movs	r0, #1
 8011be6:	e7a5      	b.n	8011b34 <_svfiprintf_r+0xd4>
 8011be8:	2300      	movs	r3, #0
 8011bea:	3401      	adds	r4, #1
 8011bec:	9305      	str	r3, [sp, #20]
 8011bee:	4619      	mov	r1, r3
 8011bf0:	f04f 0c0a 	mov.w	ip, #10
 8011bf4:	4620      	mov	r0, r4
 8011bf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011bfa:	3a30      	subs	r2, #48	; 0x30
 8011bfc:	2a09      	cmp	r2, #9
 8011bfe:	d903      	bls.n	8011c08 <_svfiprintf_r+0x1a8>
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d0c5      	beq.n	8011b90 <_svfiprintf_r+0x130>
 8011c04:	9105      	str	r1, [sp, #20]
 8011c06:	e7c3      	b.n	8011b90 <_svfiprintf_r+0x130>
 8011c08:	fb0c 2101 	mla	r1, ip, r1, r2
 8011c0c:	4604      	mov	r4, r0
 8011c0e:	2301      	movs	r3, #1
 8011c10:	e7f0      	b.n	8011bf4 <_svfiprintf_r+0x194>
 8011c12:	ab03      	add	r3, sp, #12
 8011c14:	9300      	str	r3, [sp, #0]
 8011c16:	462a      	mov	r2, r5
 8011c18:	4b0f      	ldr	r3, [pc, #60]	; (8011c58 <_svfiprintf_r+0x1f8>)
 8011c1a:	a904      	add	r1, sp, #16
 8011c1c:	4638      	mov	r0, r7
 8011c1e:	f7fc fbe7 	bl	800e3f0 <_printf_float>
 8011c22:	1c42      	adds	r2, r0, #1
 8011c24:	4606      	mov	r6, r0
 8011c26:	d1d6      	bne.n	8011bd6 <_svfiprintf_r+0x176>
 8011c28:	89ab      	ldrh	r3, [r5, #12]
 8011c2a:	065b      	lsls	r3, r3, #25
 8011c2c:	f53f af2c 	bmi.w	8011a88 <_svfiprintf_r+0x28>
 8011c30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011c32:	b01d      	add	sp, #116	; 0x74
 8011c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c38:	ab03      	add	r3, sp, #12
 8011c3a:	9300      	str	r3, [sp, #0]
 8011c3c:	462a      	mov	r2, r5
 8011c3e:	4b06      	ldr	r3, [pc, #24]	; (8011c58 <_svfiprintf_r+0x1f8>)
 8011c40:	a904      	add	r1, sp, #16
 8011c42:	4638      	mov	r0, r7
 8011c44:	f7fc fe78 	bl	800e938 <_printf_i>
 8011c48:	e7eb      	b.n	8011c22 <_svfiprintf_r+0x1c2>
 8011c4a:	bf00      	nop
 8011c4c:	08014244 	.word	0x08014244
 8011c50:	0801424e 	.word	0x0801424e
 8011c54:	0800e3f1 	.word	0x0800e3f1
 8011c58:	080119a9 	.word	0x080119a9
 8011c5c:	0801424a 	.word	0x0801424a

08011c60 <nan>:
 8011c60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011c68 <nan+0x8>
 8011c64:	4770      	bx	lr
 8011c66:	bf00      	nop
 8011c68:	00000000 	.word	0x00000000
 8011c6c:	7ff80000 	.word	0x7ff80000

08011c70 <_sbrk_r>:
 8011c70:	b538      	push	{r3, r4, r5, lr}
 8011c72:	4d06      	ldr	r5, [pc, #24]	; (8011c8c <_sbrk_r+0x1c>)
 8011c74:	2300      	movs	r3, #0
 8011c76:	4604      	mov	r4, r0
 8011c78:	4608      	mov	r0, r1
 8011c7a:	602b      	str	r3, [r5, #0]
 8011c7c:	f7f3 fe06 	bl	800588c <_sbrk>
 8011c80:	1c43      	adds	r3, r0, #1
 8011c82:	d102      	bne.n	8011c8a <_sbrk_r+0x1a>
 8011c84:	682b      	ldr	r3, [r5, #0]
 8011c86:	b103      	cbz	r3, 8011c8a <_sbrk_r+0x1a>
 8011c88:	6023      	str	r3, [r4, #0]
 8011c8a:	bd38      	pop	{r3, r4, r5, pc}
 8011c8c:	200031a0 	.word	0x200031a0

08011c90 <__sread>:
 8011c90:	b510      	push	{r4, lr}
 8011c92:	460c      	mov	r4, r1
 8011c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c98:	f000 fa5c 	bl	8012154 <_read_r>
 8011c9c:	2800      	cmp	r0, #0
 8011c9e:	bfab      	itete	ge
 8011ca0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011ca2:	89a3      	ldrhlt	r3, [r4, #12]
 8011ca4:	181b      	addge	r3, r3, r0
 8011ca6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011caa:	bfac      	ite	ge
 8011cac:	6563      	strge	r3, [r4, #84]	; 0x54
 8011cae:	81a3      	strhlt	r3, [r4, #12]
 8011cb0:	bd10      	pop	{r4, pc}

08011cb2 <__swrite>:
 8011cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cb6:	461f      	mov	r7, r3
 8011cb8:	898b      	ldrh	r3, [r1, #12]
 8011cba:	05db      	lsls	r3, r3, #23
 8011cbc:	4605      	mov	r5, r0
 8011cbe:	460c      	mov	r4, r1
 8011cc0:	4616      	mov	r6, r2
 8011cc2:	d505      	bpl.n	8011cd0 <__swrite+0x1e>
 8011cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011cc8:	2302      	movs	r3, #2
 8011cca:	2200      	movs	r2, #0
 8011ccc:	f000 f882 	bl	8011dd4 <_lseek_r>
 8011cd0:	89a3      	ldrh	r3, [r4, #12]
 8011cd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011cd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011cda:	81a3      	strh	r3, [r4, #12]
 8011cdc:	4632      	mov	r2, r6
 8011cde:	463b      	mov	r3, r7
 8011ce0:	4628      	mov	r0, r5
 8011ce2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011ce6:	f000 b823 	b.w	8011d30 <_write_r>

08011cea <__sseek>:
 8011cea:	b510      	push	{r4, lr}
 8011cec:	460c      	mov	r4, r1
 8011cee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011cf2:	f000 f86f 	bl	8011dd4 <_lseek_r>
 8011cf6:	1c43      	adds	r3, r0, #1
 8011cf8:	89a3      	ldrh	r3, [r4, #12]
 8011cfa:	bf15      	itete	ne
 8011cfc:	6560      	strne	r0, [r4, #84]	; 0x54
 8011cfe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011d02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011d06:	81a3      	strheq	r3, [r4, #12]
 8011d08:	bf18      	it	ne
 8011d0a:	81a3      	strhne	r3, [r4, #12]
 8011d0c:	bd10      	pop	{r4, pc}

08011d0e <__sclose>:
 8011d0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d12:	f000 b83d 	b.w	8011d90 <_close_r>

08011d16 <__ascii_wctomb>:
 8011d16:	b149      	cbz	r1, 8011d2c <__ascii_wctomb+0x16>
 8011d18:	2aff      	cmp	r2, #255	; 0xff
 8011d1a:	bf85      	ittet	hi
 8011d1c:	238a      	movhi	r3, #138	; 0x8a
 8011d1e:	6003      	strhi	r3, [r0, #0]
 8011d20:	700a      	strbls	r2, [r1, #0]
 8011d22:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8011d26:	bf98      	it	ls
 8011d28:	2001      	movls	r0, #1
 8011d2a:	4770      	bx	lr
 8011d2c:	4608      	mov	r0, r1
 8011d2e:	4770      	bx	lr

08011d30 <_write_r>:
 8011d30:	b538      	push	{r3, r4, r5, lr}
 8011d32:	4d07      	ldr	r5, [pc, #28]	; (8011d50 <_write_r+0x20>)
 8011d34:	4604      	mov	r4, r0
 8011d36:	4608      	mov	r0, r1
 8011d38:	4611      	mov	r1, r2
 8011d3a:	2200      	movs	r2, #0
 8011d3c:	602a      	str	r2, [r5, #0]
 8011d3e:	461a      	mov	r2, r3
 8011d40:	f7f3 fd53 	bl	80057ea <_write>
 8011d44:	1c43      	adds	r3, r0, #1
 8011d46:	d102      	bne.n	8011d4e <_write_r+0x1e>
 8011d48:	682b      	ldr	r3, [r5, #0]
 8011d4a:	b103      	cbz	r3, 8011d4e <_write_r+0x1e>
 8011d4c:	6023      	str	r3, [r4, #0]
 8011d4e:	bd38      	pop	{r3, r4, r5, pc}
 8011d50:	200031a0 	.word	0x200031a0

08011d54 <__assert_func>:
 8011d54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011d56:	4614      	mov	r4, r2
 8011d58:	461a      	mov	r2, r3
 8011d5a:	4b09      	ldr	r3, [pc, #36]	; (8011d80 <__assert_func+0x2c>)
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	4605      	mov	r5, r0
 8011d60:	68d8      	ldr	r0, [r3, #12]
 8011d62:	b14c      	cbz	r4, 8011d78 <__assert_func+0x24>
 8011d64:	4b07      	ldr	r3, [pc, #28]	; (8011d84 <__assert_func+0x30>)
 8011d66:	9100      	str	r1, [sp, #0]
 8011d68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011d6c:	4906      	ldr	r1, [pc, #24]	; (8011d88 <__assert_func+0x34>)
 8011d6e:	462b      	mov	r3, r5
 8011d70:	f000 f81e 	bl	8011db0 <fiprintf>
 8011d74:	f000 fac0 	bl	80122f8 <abort>
 8011d78:	4b04      	ldr	r3, [pc, #16]	; (8011d8c <__assert_func+0x38>)
 8011d7a:	461c      	mov	r4, r3
 8011d7c:	e7f3      	b.n	8011d66 <__assert_func+0x12>
 8011d7e:	bf00      	nop
 8011d80:	2000022c 	.word	0x2000022c
 8011d84:	08014255 	.word	0x08014255
 8011d88:	08014262 	.word	0x08014262
 8011d8c:	08014290 	.word	0x08014290

08011d90 <_close_r>:
 8011d90:	b538      	push	{r3, r4, r5, lr}
 8011d92:	4d06      	ldr	r5, [pc, #24]	; (8011dac <_close_r+0x1c>)
 8011d94:	2300      	movs	r3, #0
 8011d96:	4604      	mov	r4, r0
 8011d98:	4608      	mov	r0, r1
 8011d9a:	602b      	str	r3, [r5, #0]
 8011d9c:	f7f3 fd41 	bl	8005822 <_close>
 8011da0:	1c43      	adds	r3, r0, #1
 8011da2:	d102      	bne.n	8011daa <_close_r+0x1a>
 8011da4:	682b      	ldr	r3, [r5, #0]
 8011da6:	b103      	cbz	r3, 8011daa <_close_r+0x1a>
 8011da8:	6023      	str	r3, [r4, #0]
 8011daa:	bd38      	pop	{r3, r4, r5, pc}
 8011dac:	200031a0 	.word	0x200031a0

08011db0 <fiprintf>:
 8011db0:	b40e      	push	{r1, r2, r3}
 8011db2:	b503      	push	{r0, r1, lr}
 8011db4:	4601      	mov	r1, r0
 8011db6:	ab03      	add	r3, sp, #12
 8011db8:	4805      	ldr	r0, [pc, #20]	; (8011dd0 <fiprintf+0x20>)
 8011dba:	f853 2b04 	ldr.w	r2, [r3], #4
 8011dbe:	6800      	ldr	r0, [r0, #0]
 8011dc0:	9301      	str	r3, [sp, #4]
 8011dc2:	f000 f897 	bl	8011ef4 <_vfiprintf_r>
 8011dc6:	b002      	add	sp, #8
 8011dc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8011dcc:	b003      	add	sp, #12
 8011dce:	4770      	bx	lr
 8011dd0:	2000022c 	.word	0x2000022c

08011dd4 <_lseek_r>:
 8011dd4:	b538      	push	{r3, r4, r5, lr}
 8011dd6:	4d07      	ldr	r5, [pc, #28]	; (8011df4 <_lseek_r+0x20>)
 8011dd8:	4604      	mov	r4, r0
 8011dda:	4608      	mov	r0, r1
 8011ddc:	4611      	mov	r1, r2
 8011dde:	2200      	movs	r2, #0
 8011de0:	602a      	str	r2, [r5, #0]
 8011de2:	461a      	mov	r2, r3
 8011de4:	f7f3 fd44 	bl	8005870 <_lseek>
 8011de8:	1c43      	adds	r3, r0, #1
 8011dea:	d102      	bne.n	8011df2 <_lseek_r+0x1e>
 8011dec:	682b      	ldr	r3, [r5, #0]
 8011dee:	b103      	cbz	r3, 8011df2 <_lseek_r+0x1e>
 8011df0:	6023      	str	r3, [r4, #0]
 8011df2:	bd38      	pop	{r3, r4, r5, pc}
 8011df4:	200031a0 	.word	0x200031a0

08011df8 <memmove>:
 8011df8:	4288      	cmp	r0, r1
 8011dfa:	b510      	push	{r4, lr}
 8011dfc:	eb01 0402 	add.w	r4, r1, r2
 8011e00:	d902      	bls.n	8011e08 <memmove+0x10>
 8011e02:	4284      	cmp	r4, r0
 8011e04:	4623      	mov	r3, r4
 8011e06:	d807      	bhi.n	8011e18 <memmove+0x20>
 8011e08:	1e43      	subs	r3, r0, #1
 8011e0a:	42a1      	cmp	r1, r4
 8011e0c:	d008      	beq.n	8011e20 <memmove+0x28>
 8011e0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011e12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011e16:	e7f8      	b.n	8011e0a <memmove+0x12>
 8011e18:	4402      	add	r2, r0
 8011e1a:	4601      	mov	r1, r0
 8011e1c:	428a      	cmp	r2, r1
 8011e1e:	d100      	bne.n	8011e22 <memmove+0x2a>
 8011e20:	bd10      	pop	{r4, pc}
 8011e22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011e26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011e2a:	e7f7      	b.n	8011e1c <memmove+0x24>

08011e2c <__malloc_lock>:
 8011e2c:	4801      	ldr	r0, [pc, #4]	; (8011e34 <__malloc_lock+0x8>)
 8011e2e:	f7fe bfe6 	b.w	8010dfe <__retarget_lock_acquire_recursive>
 8011e32:	bf00      	nop
 8011e34:	20003194 	.word	0x20003194

08011e38 <__malloc_unlock>:
 8011e38:	4801      	ldr	r0, [pc, #4]	; (8011e40 <__malloc_unlock+0x8>)
 8011e3a:	f7fe bfe1 	b.w	8010e00 <__retarget_lock_release_recursive>
 8011e3e:	bf00      	nop
 8011e40:	20003194 	.word	0x20003194

08011e44 <_realloc_r>:
 8011e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e48:	4680      	mov	r8, r0
 8011e4a:	4614      	mov	r4, r2
 8011e4c:	460e      	mov	r6, r1
 8011e4e:	b921      	cbnz	r1, 8011e5a <_realloc_r+0x16>
 8011e50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011e54:	4611      	mov	r1, r2
 8011e56:	f7ff bd33 	b.w	80118c0 <_malloc_r>
 8011e5a:	b92a      	cbnz	r2, 8011e68 <_realloc_r+0x24>
 8011e5c:	f7ff fcc4 	bl	80117e8 <_free_r>
 8011e60:	4625      	mov	r5, r4
 8011e62:	4628      	mov	r0, r5
 8011e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e68:	f000 fc6a 	bl	8012740 <_malloc_usable_size_r>
 8011e6c:	4284      	cmp	r4, r0
 8011e6e:	4607      	mov	r7, r0
 8011e70:	d802      	bhi.n	8011e78 <_realloc_r+0x34>
 8011e72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011e76:	d812      	bhi.n	8011e9e <_realloc_r+0x5a>
 8011e78:	4621      	mov	r1, r4
 8011e7a:	4640      	mov	r0, r8
 8011e7c:	f7ff fd20 	bl	80118c0 <_malloc_r>
 8011e80:	4605      	mov	r5, r0
 8011e82:	2800      	cmp	r0, #0
 8011e84:	d0ed      	beq.n	8011e62 <_realloc_r+0x1e>
 8011e86:	42bc      	cmp	r4, r7
 8011e88:	4622      	mov	r2, r4
 8011e8a:	4631      	mov	r1, r6
 8011e8c:	bf28      	it	cs
 8011e8e:	463a      	movcs	r2, r7
 8011e90:	f7fc f9f8 	bl	800e284 <memcpy>
 8011e94:	4631      	mov	r1, r6
 8011e96:	4640      	mov	r0, r8
 8011e98:	f7ff fca6 	bl	80117e8 <_free_r>
 8011e9c:	e7e1      	b.n	8011e62 <_realloc_r+0x1e>
 8011e9e:	4635      	mov	r5, r6
 8011ea0:	e7df      	b.n	8011e62 <_realloc_r+0x1e>

08011ea2 <__sfputc_r>:
 8011ea2:	6893      	ldr	r3, [r2, #8]
 8011ea4:	3b01      	subs	r3, #1
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	b410      	push	{r4}
 8011eaa:	6093      	str	r3, [r2, #8]
 8011eac:	da08      	bge.n	8011ec0 <__sfputc_r+0x1e>
 8011eae:	6994      	ldr	r4, [r2, #24]
 8011eb0:	42a3      	cmp	r3, r4
 8011eb2:	db01      	blt.n	8011eb8 <__sfputc_r+0x16>
 8011eb4:	290a      	cmp	r1, #10
 8011eb6:	d103      	bne.n	8011ec0 <__sfputc_r+0x1e>
 8011eb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ebc:	f000 b95c 	b.w	8012178 <__swbuf_r>
 8011ec0:	6813      	ldr	r3, [r2, #0]
 8011ec2:	1c58      	adds	r0, r3, #1
 8011ec4:	6010      	str	r0, [r2, #0]
 8011ec6:	7019      	strb	r1, [r3, #0]
 8011ec8:	4608      	mov	r0, r1
 8011eca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ece:	4770      	bx	lr

08011ed0 <__sfputs_r>:
 8011ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ed2:	4606      	mov	r6, r0
 8011ed4:	460f      	mov	r7, r1
 8011ed6:	4614      	mov	r4, r2
 8011ed8:	18d5      	adds	r5, r2, r3
 8011eda:	42ac      	cmp	r4, r5
 8011edc:	d101      	bne.n	8011ee2 <__sfputs_r+0x12>
 8011ede:	2000      	movs	r0, #0
 8011ee0:	e007      	b.n	8011ef2 <__sfputs_r+0x22>
 8011ee2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ee6:	463a      	mov	r2, r7
 8011ee8:	4630      	mov	r0, r6
 8011eea:	f7ff ffda 	bl	8011ea2 <__sfputc_r>
 8011eee:	1c43      	adds	r3, r0, #1
 8011ef0:	d1f3      	bne.n	8011eda <__sfputs_r+0xa>
 8011ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011ef4 <_vfiprintf_r>:
 8011ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ef8:	460d      	mov	r5, r1
 8011efa:	b09d      	sub	sp, #116	; 0x74
 8011efc:	4614      	mov	r4, r2
 8011efe:	4698      	mov	r8, r3
 8011f00:	4606      	mov	r6, r0
 8011f02:	b118      	cbz	r0, 8011f0c <_vfiprintf_r+0x18>
 8011f04:	6983      	ldr	r3, [r0, #24]
 8011f06:	b90b      	cbnz	r3, 8011f0c <_vfiprintf_r+0x18>
 8011f08:	f000 fb18 	bl	801253c <__sinit>
 8011f0c:	4b89      	ldr	r3, [pc, #548]	; (8012134 <_vfiprintf_r+0x240>)
 8011f0e:	429d      	cmp	r5, r3
 8011f10:	d11b      	bne.n	8011f4a <_vfiprintf_r+0x56>
 8011f12:	6875      	ldr	r5, [r6, #4]
 8011f14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011f16:	07d9      	lsls	r1, r3, #31
 8011f18:	d405      	bmi.n	8011f26 <_vfiprintf_r+0x32>
 8011f1a:	89ab      	ldrh	r3, [r5, #12]
 8011f1c:	059a      	lsls	r2, r3, #22
 8011f1e:	d402      	bmi.n	8011f26 <_vfiprintf_r+0x32>
 8011f20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011f22:	f7fe ff6c 	bl	8010dfe <__retarget_lock_acquire_recursive>
 8011f26:	89ab      	ldrh	r3, [r5, #12]
 8011f28:	071b      	lsls	r3, r3, #28
 8011f2a:	d501      	bpl.n	8011f30 <_vfiprintf_r+0x3c>
 8011f2c:	692b      	ldr	r3, [r5, #16]
 8011f2e:	b9eb      	cbnz	r3, 8011f6c <_vfiprintf_r+0x78>
 8011f30:	4629      	mov	r1, r5
 8011f32:	4630      	mov	r0, r6
 8011f34:	f000 f972 	bl	801221c <__swsetup_r>
 8011f38:	b1c0      	cbz	r0, 8011f6c <_vfiprintf_r+0x78>
 8011f3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011f3c:	07dc      	lsls	r4, r3, #31
 8011f3e:	d50e      	bpl.n	8011f5e <_vfiprintf_r+0x6a>
 8011f40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011f44:	b01d      	add	sp, #116	; 0x74
 8011f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f4a:	4b7b      	ldr	r3, [pc, #492]	; (8012138 <_vfiprintf_r+0x244>)
 8011f4c:	429d      	cmp	r5, r3
 8011f4e:	d101      	bne.n	8011f54 <_vfiprintf_r+0x60>
 8011f50:	68b5      	ldr	r5, [r6, #8]
 8011f52:	e7df      	b.n	8011f14 <_vfiprintf_r+0x20>
 8011f54:	4b79      	ldr	r3, [pc, #484]	; (801213c <_vfiprintf_r+0x248>)
 8011f56:	429d      	cmp	r5, r3
 8011f58:	bf08      	it	eq
 8011f5a:	68f5      	ldreq	r5, [r6, #12]
 8011f5c:	e7da      	b.n	8011f14 <_vfiprintf_r+0x20>
 8011f5e:	89ab      	ldrh	r3, [r5, #12]
 8011f60:	0598      	lsls	r0, r3, #22
 8011f62:	d4ed      	bmi.n	8011f40 <_vfiprintf_r+0x4c>
 8011f64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011f66:	f7fe ff4b 	bl	8010e00 <__retarget_lock_release_recursive>
 8011f6a:	e7e9      	b.n	8011f40 <_vfiprintf_r+0x4c>
 8011f6c:	2300      	movs	r3, #0
 8011f6e:	9309      	str	r3, [sp, #36]	; 0x24
 8011f70:	2320      	movs	r3, #32
 8011f72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011f76:	f8cd 800c 	str.w	r8, [sp, #12]
 8011f7a:	2330      	movs	r3, #48	; 0x30
 8011f7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012140 <_vfiprintf_r+0x24c>
 8011f80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011f84:	f04f 0901 	mov.w	r9, #1
 8011f88:	4623      	mov	r3, r4
 8011f8a:	469a      	mov	sl, r3
 8011f8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f90:	b10a      	cbz	r2, 8011f96 <_vfiprintf_r+0xa2>
 8011f92:	2a25      	cmp	r2, #37	; 0x25
 8011f94:	d1f9      	bne.n	8011f8a <_vfiprintf_r+0x96>
 8011f96:	ebba 0b04 	subs.w	fp, sl, r4
 8011f9a:	d00b      	beq.n	8011fb4 <_vfiprintf_r+0xc0>
 8011f9c:	465b      	mov	r3, fp
 8011f9e:	4622      	mov	r2, r4
 8011fa0:	4629      	mov	r1, r5
 8011fa2:	4630      	mov	r0, r6
 8011fa4:	f7ff ff94 	bl	8011ed0 <__sfputs_r>
 8011fa8:	3001      	adds	r0, #1
 8011faa:	f000 80aa 	beq.w	8012102 <_vfiprintf_r+0x20e>
 8011fae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011fb0:	445a      	add	r2, fp
 8011fb2:	9209      	str	r2, [sp, #36]	; 0x24
 8011fb4:	f89a 3000 	ldrb.w	r3, [sl]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	f000 80a2 	beq.w	8012102 <_vfiprintf_r+0x20e>
 8011fbe:	2300      	movs	r3, #0
 8011fc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011fc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011fc8:	f10a 0a01 	add.w	sl, sl, #1
 8011fcc:	9304      	str	r3, [sp, #16]
 8011fce:	9307      	str	r3, [sp, #28]
 8011fd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011fd4:	931a      	str	r3, [sp, #104]	; 0x68
 8011fd6:	4654      	mov	r4, sl
 8011fd8:	2205      	movs	r2, #5
 8011fda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fde:	4858      	ldr	r0, [pc, #352]	; (8012140 <_vfiprintf_r+0x24c>)
 8011fe0:	f7ee f8fe 	bl	80001e0 <memchr>
 8011fe4:	9a04      	ldr	r2, [sp, #16]
 8011fe6:	b9d8      	cbnz	r0, 8012020 <_vfiprintf_r+0x12c>
 8011fe8:	06d1      	lsls	r1, r2, #27
 8011fea:	bf44      	itt	mi
 8011fec:	2320      	movmi	r3, #32
 8011fee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011ff2:	0713      	lsls	r3, r2, #28
 8011ff4:	bf44      	itt	mi
 8011ff6:	232b      	movmi	r3, #43	; 0x2b
 8011ff8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011ffc:	f89a 3000 	ldrb.w	r3, [sl]
 8012000:	2b2a      	cmp	r3, #42	; 0x2a
 8012002:	d015      	beq.n	8012030 <_vfiprintf_r+0x13c>
 8012004:	9a07      	ldr	r2, [sp, #28]
 8012006:	4654      	mov	r4, sl
 8012008:	2000      	movs	r0, #0
 801200a:	f04f 0c0a 	mov.w	ip, #10
 801200e:	4621      	mov	r1, r4
 8012010:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012014:	3b30      	subs	r3, #48	; 0x30
 8012016:	2b09      	cmp	r3, #9
 8012018:	d94e      	bls.n	80120b8 <_vfiprintf_r+0x1c4>
 801201a:	b1b0      	cbz	r0, 801204a <_vfiprintf_r+0x156>
 801201c:	9207      	str	r2, [sp, #28]
 801201e:	e014      	b.n	801204a <_vfiprintf_r+0x156>
 8012020:	eba0 0308 	sub.w	r3, r0, r8
 8012024:	fa09 f303 	lsl.w	r3, r9, r3
 8012028:	4313      	orrs	r3, r2
 801202a:	9304      	str	r3, [sp, #16]
 801202c:	46a2      	mov	sl, r4
 801202e:	e7d2      	b.n	8011fd6 <_vfiprintf_r+0xe2>
 8012030:	9b03      	ldr	r3, [sp, #12]
 8012032:	1d19      	adds	r1, r3, #4
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	9103      	str	r1, [sp, #12]
 8012038:	2b00      	cmp	r3, #0
 801203a:	bfbb      	ittet	lt
 801203c:	425b      	neglt	r3, r3
 801203e:	f042 0202 	orrlt.w	r2, r2, #2
 8012042:	9307      	strge	r3, [sp, #28]
 8012044:	9307      	strlt	r3, [sp, #28]
 8012046:	bfb8      	it	lt
 8012048:	9204      	strlt	r2, [sp, #16]
 801204a:	7823      	ldrb	r3, [r4, #0]
 801204c:	2b2e      	cmp	r3, #46	; 0x2e
 801204e:	d10c      	bne.n	801206a <_vfiprintf_r+0x176>
 8012050:	7863      	ldrb	r3, [r4, #1]
 8012052:	2b2a      	cmp	r3, #42	; 0x2a
 8012054:	d135      	bne.n	80120c2 <_vfiprintf_r+0x1ce>
 8012056:	9b03      	ldr	r3, [sp, #12]
 8012058:	1d1a      	adds	r2, r3, #4
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	9203      	str	r2, [sp, #12]
 801205e:	2b00      	cmp	r3, #0
 8012060:	bfb8      	it	lt
 8012062:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012066:	3402      	adds	r4, #2
 8012068:	9305      	str	r3, [sp, #20]
 801206a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012150 <_vfiprintf_r+0x25c>
 801206e:	7821      	ldrb	r1, [r4, #0]
 8012070:	2203      	movs	r2, #3
 8012072:	4650      	mov	r0, sl
 8012074:	f7ee f8b4 	bl	80001e0 <memchr>
 8012078:	b140      	cbz	r0, 801208c <_vfiprintf_r+0x198>
 801207a:	2340      	movs	r3, #64	; 0x40
 801207c:	eba0 000a 	sub.w	r0, r0, sl
 8012080:	fa03 f000 	lsl.w	r0, r3, r0
 8012084:	9b04      	ldr	r3, [sp, #16]
 8012086:	4303      	orrs	r3, r0
 8012088:	3401      	adds	r4, #1
 801208a:	9304      	str	r3, [sp, #16]
 801208c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012090:	482c      	ldr	r0, [pc, #176]	; (8012144 <_vfiprintf_r+0x250>)
 8012092:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012096:	2206      	movs	r2, #6
 8012098:	f7ee f8a2 	bl	80001e0 <memchr>
 801209c:	2800      	cmp	r0, #0
 801209e:	d03f      	beq.n	8012120 <_vfiprintf_r+0x22c>
 80120a0:	4b29      	ldr	r3, [pc, #164]	; (8012148 <_vfiprintf_r+0x254>)
 80120a2:	bb1b      	cbnz	r3, 80120ec <_vfiprintf_r+0x1f8>
 80120a4:	9b03      	ldr	r3, [sp, #12]
 80120a6:	3307      	adds	r3, #7
 80120a8:	f023 0307 	bic.w	r3, r3, #7
 80120ac:	3308      	adds	r3, #8
 80120ae:	9303      	str	r3, [sp, #12]
 80120b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120b2:	443b      	add	r3, r7
 80120b4:	9309      	str	r3, [sp, #36]	; 0x24
 80120b6:	e767      	b.n	8011f88 <_vfiprintf_r+0x94>
 80120b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80120bc:	460c      	mov	r4, r1
 80120be:	2001      	movs	r0, #1
 80120c0:	e7a5      	b.n	801200e <_vfiprintf_r+0x11a>
 80120c2:	2300      	movs	r3, #0
 80120c4:	3401      	adds	r4, #1
 80120c6:	9305      	str	r3, [sp, #20]
 80120c8:	4619      	mov	r1, r3
 80120ca:	f04f 0c0a 	mov.w	ip, #10
 80120ce:	4620      	mov	r0, r4
 80120d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80120d4:	3a30      	subs	r2, #48	; 0x30
 80120d6:	2a09      	cmp	r2, #9
 80120d8:	d903      	bls.n	80120e2 <_vfiprintf_r+0x1ee>
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d0c5      	beq.n	801206a <_vfiprintf_r+0x176>
 80120de:	9105      	str	r1, [sp, #20]
 80120e0:	e7c3      	b.n	801206a <_vfiprintf_r+0x176>
 80120e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80120e6:	4604      	mov	r4, r0
 80120e8:	2301      	movs	r3, #1
 80120ea:	e7f0      	b.n	80120ce <_vfiprintf_r+0x1da>
 80120ec:	ab03      	add	r3, sp, #12
 80120ee:	9300      	str	r3, [sp, #0]
 80120f0:	462a      	mov	r2, r5
 80120f2:	4b16      	ldr	r3, [pc, #88]	; (801214c <_vfiprintf_r+0x258>)
 80120f4:	a904      	add	r1, sp, #16
 80120f6:	4630      	mov	r0, r6
 80120f8:	f7fc f97a 	bl	800e3f0 <_printf_float>
 80120fc:	4607      	mov	r7, r0
 80120fe:	1c78      	adds	r0, r7, #1
 8012100:	d1d6      	bne.n	80120b0 <_vfiprintf_r+0x1bc>
 8012102:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012104:	07d9      	lsls	r1, r3, #31
 8012106:	d405      	bmi.n	8012114 <_vfiprintf_r+0x220>
 8012108:	89ab      	ldrh	r3, [r5, #12]
 801210a:	059a      	lsls	r2, r3, #22
 801210c:	d402      	bmi.n	8012114 <_vfiprintf_r+0x220>
 801210e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012110:	f7fe fe76 	bl	8010e00 <__retarget_lock_release_recursive>
 8012114:	89ab      	ldrh	r3, [r5, #12]
 8012116:	065b      	lsls	r3, r3, #25
 8012118:	f53f af12 	bmi.w	8011f40 <_vfiprintf_r+0x4c>
 801211c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801211e:	e711      	b.n	8011f44 <_vfiprintf_r+0x50>
 8012120:	ab03      	add	r3, sp, #12
 8012122:	9300      	str	r3, [sp, #0]
 8012124:	462a      	mov	r2, r5
 8012126:	4b09      	ldr	r3, [pc, #36]	; (801214c <_vfiprintf_r+0x258>)
 8012128:	a904      	add	r1, sp, #16
 801212a:	4630      	mov	r0, r6
 801212c:	f7fc fc04 	bl	800e938 <_printf_i>
 8012130:	e7e4      	b.n	80120fc <_vfiprintf_r+0x208>
 8012132:	bf00      	nop
 8012134:	080142b4 	.word	0x080142b4
 8012138:	080142d4 	.word	0x080142d4
 801213c:	08014294 	.word	0x08014294
 8012140:	08014244 	.word	0x08014244
 8012144:	0801424e 	.word	0x0801424e
 8012148:	0800e3f1 	.word	0x0800e3f1
 801214c:	08011ed1 	.word	0x08011ed1
 8012150:	0801424a 	.word	0x0801424a

08012154 <_read_r>:
 8012154:	b538      	push	{r3, r4, r5, lr}
 8012156:	4d07      	ldr	r5, [pc, #28]	; (8012174 <_read_r+0x20>)
 8012158:	4604      	mov	r4, r0
 801215a:	4608      	mov	r0, r1
 801215c:	4611      	mov	r1, r2
 801215e:	2200      	movs	r2, #0
 8012160:	602a      	str	r2, [r5, #0]
 8012162:	461a      	mov	r2, r3
 8012164:	f7f3 fb24 	bl	80057b0 <_read>
 8012168:	1c43      	adds	r3, r0, #1
 801216a:	d102      	bne.n	8012172 <_read_r+0x1e>
 801216c:	682b      	ldr	r3, [r5, #0]
 801216e:	b103      	cbz	r3, 8012172 <_read_r+0x1e>
 8012170:	6023      	str	r3, [r4, #0]
 8012172:	bd38      	pop	{r3, r4, r5, pc}
 8012174:	200031a0 	.word	0x200031a0

08012178 <__swbuf_r>:
 8012178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801217a:	460e      	mov	r6, r1
 801217c:	4614      	mov	r4, r2
 801217e:	4605      	mov	r5, r0
 8012180:	b118      	cbz	r0, 801218a <__swbuf_r+0x12>
 8012182:	6983      	ldr	r3, [r0, #24]
 8012184:	b90b      	cbnz	r3, 801218a <__swbuf_r+0x12>
 8012186:	f000 f9d9 	bl	801253c <__sinit>
 801218a:	4b21      	ldr	r3, [pc, #132]	; (8012210 <__swbuf_r+0x98>)
 801218c:	429c      	cmp	r4, r3
 801218e:	d12b      	bne.n	80121e8 <__swbuf_r+0x70>
 8012190:	686c      	ldr	r4, [r5, #4]
 8012192:	69a3      	ldr	r3, [r4, #24]
 8012194:	60a3      	str	r3, [r4, #8]
 8012196:	89a3      	ldrh	r3, [r4, #12]
 8012198:	071a      	lsls	r2, r3, #28
 801219a:	d52f      	bpl.n	80121fc <__swbuf_r+0x84>
 801219c:	6923      	ldr	r3, [r4, #16]
 801219e:	b36b      	cbz	r3, 80121fc <__swbuf_r+0x84>
 80121a0:	6923      	ldr	r3, [r4, #16]
 80121a2:	6820      	ldr	r0, [r4, #0]
 80121a4:	1ac0      	subs	r0, r0, r3
 80121a6:	6963      	ldr	r3, [r4, #20]
 80121a8:	b2f6      	uxtb	r6, r6
 80121aa:	4283      	cmp	r3, r0
 80121ac:	4637      	mov	r7, r6
 80121ae:	dc04      	bgt.n	80121ba <__swbuf_r+0x42>
 80121b0:	4621      	mov	r1, r4
 80121b2:	4628      	mov	r0, r5
 80121b4:	f000 f92e 	bl	8012414 <_fflush_r>
 80121b8:	bb30      	cbnz	r0, 8012208 <__swbuf_r+0x90>
 80121ba:	68a3      	ldr	r3, [r4, #8]
 80121bc:	3b01      	subs	r3, #1
 80121be:	60a3      	str	r3, [r4, #8]
 80121c0:	6823      	ldr	r3, [r4, #0]
 80121c2:	1c5a      	adds	r2, r3, #1
 80121c4:	6022      	str	r2, [r4, #0]
 80121c6:	701e      	strb	r6, [r3, #0]
 80121c8:	6963      	ldr	r3, [r4, #20]
 80121ca:	3001      	adds	r0, #1
 80121cc:	4283      	cmp	r3, r0
 80121ce:	d004      	beq.n	80121da <__swbuf_r+0x62>
 80121d0:	89a3      	ldrh	r3, [r4, #12]
 80121d2:	07db      	lsls	r3, r3, #31
 80121d4:	d506      	bpl.n	80121e4 <__swbuf_r+0x6c>
 80121d6:	2e0a      	cmp	r6, #10
 80121d8:	d104      	bne.n	80121e4 <__swbuf_r+0x6c>
 80121da:	4621      	mov	r1, r4
 80121dc:	4628      	mov	r0, r5
 80121de:	f000 f919 	bl	8012414 <_fflush_r>
 80121e2:	b988      	cbnz	r0, 8012208 <__swbuf_r+0x90>
 80121e4:	4638      	mov	r0, r7
 80121e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121e8:	4b0a      	ldr	r3, [pc, #40]	; (8012214 <__swbuf_r+0x9c>)
 80121ea:	429c      	cmp	r4, r3
 80121ec:	d101      	bne.n	80121f2 <__swbuf_r+0x7a>
 80121ee:	68ac      	ldr	r4, [r5, #8]
 80121f0:	e7cf      	b.n	8012192 <__swbuf_r+0x1a>
 80121f2:	4b09      	ldr	r3, [pc, #36]	; (8012218 <__swbuf_r+0xa0>)
 80121f4:	429c      	cmp	r4, r3
 80121f6:	bf08      	it	eq
 80121f8:	68ec      	ldreq	r4, [r5, #12]
 80121fa:	e7ca      	b.n	8012192 <__swbuf_r+0x1a>
 80121fc:	4621      	mov	r1, r4
 80121fe:	4628      	mov	r0, r5
 8012200:	f000 f80c 	bl	801221c <__swsetup_r>
 8012204:	2800      	cmp	r0, #0
 8012206:	d0cb      	beq.n	80121a0 <__swbuf_r+0x28>
 8012208:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801220c:	e7ea      	b.n	80121e4 <__swbuf_r+0x6c>
 801220e:	bf00      	nop
 8012210:	080142b4 	.word	0x080142b4
 8012214:	080142d4 	.word	0x080142d4
 8012218:	08014294 	.word	0x08014294

0801221c <__swsetup_r>:
 801221c:	4b32      	ldr	r3, [pc, #200]	; (80122e8 <__swsetup_r+0xcc>)
 801221e:	b570      	push	{r4, r5, r6, lr}
 8012220:	681d      	ldr	r5, [r3, #0]
 8012222:	4606      	mov	r6, r0
 8012224:	460c      	mov	r4, r1
 8012226:	b125      	cbz	r5, 8012232 <__swsetup_r+0x16>
 8012228:	69ab      	ldr	r3, [r5, #24]
 801222a:	b913      	cbnz	r3, 8012232 <__swsetup_r+0x16>
 801222c:	4628      	mov	r0, r5
 801222e:	f000 f985 	bl	801253c <__sinit>
 8012232:	4b2e      	ldr	r3, [pc, #184]	; (80122ec <__swsetup_r+0xd0>)
 8012234:	429c      	cmp	r4, r3
 8012236:	d10f      	bne.n	8012258 <__swsetup_r+0x3c>
 8012238:	686c      	ldr	r4, [r5, #4]
 801223a:	89a3      	ldrh	r3, [r4, #12]
 801223c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012240:	0719      	lsls	r1, r3, #28
 8012242:	d42c      	bmi.n	801229e <__swsetup_r+0x82>
 8012244:	06dd      	lsls	r5, r3, #27
 8012246:	d411      	bmi.n	801226c <__swsetup_r+0x50>
 8012248:	2309      	movs	r3, #9
 801224a:	6033      	str	r3, [r6, #0]
 801224c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012250:	81a3      	strh	r3, [r4, #12]
 8012252:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012256:	e03e      	b.n	80122d6 <__swsetup_r+0xba>
 8012258:	4b25      	ldr	r3, [pc, #148]	; (80122f0 <__swsetup_r+0xd4>)
 801225a:	429c      	cmp	r4, r3
 801225c:	d101      	bne.n	8012262 <__swsetup_r+0x46>
 801225e:	68ac      	ldr	r4, [r5, #8]
 8012260:	e7eb      	b.n	801223a <__swsetup_r+0x1e>
 8012262:	4b24      	ldr	r3, [pc, #144]	; (80122f4 <__swsetup_r+0xd8>)
 8012264:	429c      	cmp	r4, r3
 8012266:	bf08      	it	eq
 8012268:	68ec      	ldreq	r4, [r5, #12]
 801226a:	e7e6      	b.n	801223a <__swsetup_r+0x1e>
 801226c:	0758      	lsls	r0, r3, #29
 801226e:	d512      	bpl.n	8012296 <__swsetup_r+0x7a>
 8012270:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012272:	b141      	cbz	r1, 8012286 <__swsetup_r+0x6a>
 8012274:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012278:	4299      	cmp	r1, r3
 801227a:	d002      	beq.n	8012282 <__swsetup_r+0x66>
 801227c:	4630      	mov	r0, r6
 801227e:	f7ff fab3 	bl	80117e8 <_free_r>
 8012282:	2300      	movs	r3, #0
 8012284:	6363      	str	r3, [r4, #52]	; 0x34
 8012286:	89a3      	ldrh	r3, [r4, #12]
 8012288:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801228c:	81a3      	strh	r3, [r4, #12]
 801228e:	2300      	movs	r3, #0
 8012290:	6063      	str	r3, [r4, #4]
 8012292:	6923      	ldr	r3, [r4, #16]
 8012294:	6023      	str	r3, [r4, #0]
 8012296:	89a3      	ldrh	r3, [r4, #12]
 8012298:	f043 0308 	orr.w	r3, r3, #8
 801229c:	81a3      	strh	r3, [r4, #12]
 801229e:	6923      	ldr	r3, [r4, #16]
 80122a0:	b94b      	cbnz	r3, 80122b6 <__swsetup_r+0x9a>
 80122a2:	89a3      	ldrh	r3, [r4, #12]
 80122a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80122a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80122ac:	d003      	beq.n	80122b6 <__swsetup_r+0x9a>
 80122ae:	4621      	mov	r1, r4
 80122b0:	4630      	mov	r0, r6
 80122b2:	f000 fa05 	bl	80126c0 <__smakebuf_r>
 80122b6:	89a0      	ldrh	r0, [r4, #12]
 80122b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80122bc:	f010 0301 	ands.w	r3, r0, #1
 80122c0:	d00a      	beq.n	80122d8 <__swsetup_r+0xbc>
 80122c2:	2300      	movs	r3, #0
 80122c4:	60a3      	str	r3, [r4, #8]
 80122c6:	6963      	ldr	r3, [r4, #20]
 80122c8:	425b      	negs	r3, r3
 80122ca:	61a3      	str	r3, [r4, #24]
 80122cc:	6923      	ldr	r3, [r4, #16]
 80122ce:	b943      	cbnz	r3, 80122e2 <__swsetup_r+0xc6>
 80122d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80122d4:	d1ba      	bne.n	801224c <__swsetup_r+0x30>
 80122d6:	bd70      	pop	{r4, r5, r6, pc}
 80122d8:	0781      	lsls	r1, r0, #30
 80122da:	bf58      	it	pl
 80122dc:	6963      	ldrpl	r3, [r4, #20]
 80122de:	60a3      	str	r3, [r4, #8]
 80122e0:	e7f4      	b.n	80122cc <__swsetup_r+0xb0>
 80122e2:	2000      	movs	r0, #0
 80122e4:	e7f7      	b.n	80122d6 <__swsetup_r+0xba>
 80122e6:	bf00      	nop
 80122e8:	2000022c 	.word	0x2000022c
 80122ec:	080142b4 	.word	0x080142b4
 80122f0:	080142d4 	.word	0x080142d4
 80122f4:	08014294 	.word	0x08014294

080122f8 <abort>:
 80122f8:	b508      	push	{r3, lr}
 80122fa:	2006      	movs	r0, #6
 80122fc:	f000 fa50 	bl	80127a0 <raise>
 8012300:	2001      	movs	r0, #1
 8012302:	f7f3 fa4b 	bl	800579c <_exit>
	...

08012308 <__sflush_r>:
 8012308:	898a      	ldrh	r2, [r1, #12]
 801230a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801230e:	4605      	mov	r5, r0
 8012310:	0710      	lsls	r0, r2, #28
 8012312:	460c      	mov	r4, r1
 8012314:	d458      	bmi.n	80123c8 <__sflush_r+0xc0>
 8012316:	684b      	ldr	r3, [r1, #4]
 8012318:	2b00      	cmp	r3, #0
 801231a:	dc05      	bgt.n	8012328 <__sflush_r+0x20>
 801231c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801231e:	2b00      	cmp	r3, #0
 8012320:	dc02      	bgt.n	8012328 <__sflush_r+0x20>
 8012322:	2000      	movs	r0, #0
 8012324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012328:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801232a:	2e00      	cmp	r6, #0
 801232c:	d0f9      	beq.n	8012322 <__sflush_r+0x1a>
 801232e:	2300      	movs	r3, #0
 8012330:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012334:	682f      	ldr	r7, [r5, #0]
 8012336:	602b      	str	r3, [r5, #0]
 8012338:	d032      	beq.n	80123a0 <__sflush_r+0x98>
 801233a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801233c:	89a3      	ldrh	r3, [r4, #12]
 801233e:	075a      	lsls	r2, r3, #29
 8012340:	d505      	bpl.n	801234e <__sflush_r+0x46>
 8012342:	6863      	ldr	r3, [r4, #4]
 8012344:	1ac0      	subs	r0, r0, r3
 8012346:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012348:	b10b      	cbz	r3, 801234e <__sflush_r+0x46>
 801234a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801234c:	1ac0      	subs	r0, r0, r3
 801234e:	2300      	movs	r3, #0
 8012350:	4602      	mov	r2, r0
 8012352:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012354:	6a21      	ldr	r1, [r4, #32]
 8012356:	4628      	mov	r0, r5
 8012358:	47b0      	blx	r6
 801235a:	1c43      	adds	r3, r0, #1
 801235c:	89a3      	ldrh	r3, [r4, #12]
 801235e:	d106      	bne.n	801236e <__sflush_r+0x66>
 8012360:	6829      	ldr	r1, [r5, #0]
 8012362:	291d      	cmp	r1, #29
 8012364:	d82c      	bhi.n	80123c0 <__sflush_r+0xb8>
 8012366:	4a2a      	ldr	r2, [pc, #168]	; (8012410 <__sflush_r+0x108>)
 8012368:	40ca      	lsrs	r2, r1
 801236a:	07d6      	lsls	r6, r2, #31
 801236c:	d528      	bpl.n	80123c0 <__sflush_r+0xb8>
 801236e:	2200      	movs	r2, #0
 8012370:	6062      	str	r2, [r4, #4]
 8012372:	04d9      	lsls	r1, r3, #19
 8012374:	6922      	ldr	r2, [r4, #16]
 8012376:	6022      	str	r2, [r4, #0]
 8012378:	d504      	bpl.n	8012384 <__sflush_r+0x7c>
 801237a:	1c42      	adds	r2, r0, #1
 801237c:	d101      	bne.n	8012382 <__sflush_r+0x7a>
 801237e:	682b      	ldr	r3, [r5, #0]
 8012380:	b903      	cbnz	r3, 8012384 <__sflush_r+0x7c>
 8012382:	6560      	str	r0, [r4, #84]	; 0x54
 8012384:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012386:	602f      	str	r7, [r5, #0]
 8012388:	2900      	cmp	r1, #0
 801238a:	d0ca      	beq.n	8012322 <__sflush_r+0x1a>
 801238c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012390:	4299      	cmp	r1, r3
 8012392:	d002      	beq.n	801239a <__sflush_r+0x92>
 8012394:	4628      	mov	r0, r5
 8012396:	f7ff fa27 	bl	80117e8 <_free_r>
 801239a:	2000      	movs	r0, #0
 801239c:	6360      	str	r0, [r4, #52]	; 0x34
 801239e:	e7c1      	b.n	8012324 <__sflush_r+0x1c>
 80123a0:	6a21      	ldr	r1, [r4, #32]
 80123a2:	2301      	movs	r3, #1
 80123a4:	4628      	mov	r0, r5
 80123a6:	47b0      	blx	r6
 80123a8:	1c41      	adds	r1, r0, #1
 80123aa:	d1c7      	bne.n	801233c <__sflush_r+0x34>
 80123ac:	682b      	ldr	r3, [r5, #0]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d0c4      	beq.n	801233c <__sflush_r+0x34>
 80123b2:	2b1d      	cmp	r3, #29
 80123b4:	d001      	beq.n	80123ba <__sflush_r+0xb2>
 80123b6:	2b16      	cmp	r3, #22
 80123b8:	d101      	bne.n	80123be <__sflush_r+0xb6>
 80123ba:	602f      	str	r7, [r5, #0]
 80123bc:	e7b1      	b.n	8012322 <__sflush_r+0x1a>
 80123be:	89a3      	ldrh	r3, [r4, #12]
 80123c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80123c4:	81a3      	strh	r3, [r4, #12]
 80123c6:	e7ad      	b.n	8012324 <__sflush_r+0x1c>
 80123c8:	690f      	ldr	r7, [r1, #16]
 80123ca:	2f00      	cmp	r7, #0
 80123cc:	d0a9      	beq.n	8012322 <__sflush_r+0x1a>
 80123ce:	0793      	lsls	r3, r2, #30
 80123d0:	680e      	ldr	r6, [r1, #0]
 80123d2:	bf08      	it	eq
 80123d4:	694b      	ldreq	r3, [r1, #20]
 80123d6:	600f      	str	r7, [r1, #0]
 80123d8:	bf18      	it	ne
 80123da:	2300      	movne	r3, #0
 80123dc:	eba6 0807 	sub.w	r8, r6, r7
 80123e0:	608b      	str	r3, [r1, #8]
 80123e2:	f1b8 0f00 	cmp.w	r8, #0
 80123e6:	dd9c      	ble.n	8012322 <__sflush_r+0x1a>
 80123e8:	6a21      	ldr	r1, [r4, #32]
 80123ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80123ec:	4643      	mov	r3, r8
 80123ee:	463a      	mov	r2, r7
 80123f0:	4628      	mov	r0, r5
 80123f2:	47b0      	blx	r6
 80123f4:	2800      	cmp	r0, #0
 80123f6:	dc06      	bgt.n	8012406 <__sflush_r+0xfe>
 80123f8:	89a3      	ldrh	r3, [r4, #12]
 80123fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80123fe:	81a3      	strh	r3, [r4, #12]
 8012400:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012404:	e78e      	b.n	8012324 <__sflush_r+0x1c>
 8012406:	4407      	add	r7, r0
 8012408:	eba8 0800 	sub.w	r8, r8, r0
 801240c:	e7e9      	b.n	80123e2 <__sflush_r+0xda>
 801240e:	bf00      	nop
 8012410:	20400001 	.word	0x20400001

08012414 <_fflush_r>:
 8012414:	b538      	push	{r3, r4, r5, lr}
 8012416:	690b      	ldr	r3, [r1, #16]
 8012418:	4605      	mov	r5, r0
 801241a:	460c      	mov	r4, r1
 801241c:	b913      	cbnz	r3, 8012424 <_fflush_r+0x10>
 801241e:	2500      	movs	r5, #0
 8012420:	4628      	mov	r0, r5
 8012422:	bd38      	pop	{r3, r4, r5, pc}
 8012424:	b118      	cbz	r0, 801242e <_fflush_r+0x1a>
 8012426:	6983      	ldr	r3, [r0, #24]
 8012428:	b90b      	cbnz	r3, 801242e <_fflush_r+0x1a>
 801242a:	f000 f887 	bl	801253c <__sinit>
 801242e:	4b14      	ldr	r3, [pc, #80]	; (8012480 <_fflush_r+0x6c>)
 8012430:	429c      	cmp	r4, r3
 8012432:	d11b      	bne.n	801246c <_fflush_r+0x58>
 8012434:	686c      	ldr	r4, [r5, #4]
 8012436:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801243a:	2b00      	cmp	r3, #0
 801243c:	d0ef      	beq.n	801241e <_fflush_r+0xa>
 801243e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012440:	07d0      	lsls	r0, r2, #31
 8012442:	d404      	bmi.n	801244e <_fflush_r+0x3a>
 8012444:	0599      	lsls	r1, r3, #22
 8012446:	d402      	bmi.n	801244e <_fflush_r+0x3a>
 8012448:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801244a:	f7fe fcd8 	bl	8010dfe <__retarget_lock_acquire_recursive>
 801244e:	4628      	mov	r0, r5
 8012450:	4621      	mov	r1, r4
 8012452:	f7ff ff59 	bl	8012308 <__sflush_r>
 8012456:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012458:	07da      	lsls	r2, r3, #31
 801245a:	4605      	mov	r5, r0
 801245c:	d4e0      	bmi.n	8012420 <_fflush_r+0xc>
 801245e:	89a3      	ldrh	r3, [r4, #12]
 8012460:	059b      	lsls	r3, r3, #22
 8012462:	d4dd      	bmi.n	8012420 <_fflush_r+0xc>
 8012464:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012466:	f7fe fccb 	bl	8010e00 <__retarget_lock_release_recursive>
 801246a:	e7d9      	b.n	8012420 <_fflush_r+0xc>
 801246c:	4b05      	ldr	r3, [pc, #20]	; (8012484 <_fflush_r+0x70>)
 801246e:	429c      	cmp	r4, r3
 8012470:	d101      	bne.n	8012476 <_fflush_r+0x62>
 8012472:	68ac      	ldr	r4, [r5, #8]
 8012474:	e7df      	b.n	8012436 <_fflush_r+0x22>
 8012476:	4b04      	ldr	r3, [pc, #16]	; (8012488 <_fflush_r+0x74>)
 8012478:	429c      	cmp	r4, r3
 801247a:	bf08      	it	eq
 801247c:	68ec      	ldreq	r4, [r5, #12]
 801247e:	e7da      	b.n	8012436 <_fflush_r+0x22>
 8012480:	080142b4 	.word	0x080142b4
 8012484:	080142d4 	.word	0x080142d4
 8012488:	08014294 	.word	0x08014294

0801248c <std>:
 801248c:	2300      	movs	r3, #0
 801248e:	b510      	push	{r4, lr}
 8012490:	4604      	mov	r4, r0
 8012492:	e9c0 3300 	strd	r3, r3, [r0]
 8012496:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801249a:	6083      	str	r3, [r0, #8]
 801249c:	8181      	strh	r1, [r0, #12]
 801249e:	6643      	str	r3, [r0, #100]	; 0x64
 80124a0:	81c2      	strh	r2, [r0, #14]
 80124a2:	6183      	str	r3, [r0, #24]
 80124a4:	4619      	mov	r1, r3
 80124a6:	2208      	movs	r2, #8
 80124a8:	305c      	adds	r0, #92	; 0x5c
 80124aa:	f7fb fef9 	bl	800e2a0 <memset>
 80124ae:	4b05      	ldr	r3, [pc, #20]	; (80124c4 <std+0x38>)
 80124b0:	6263      	str	r3, [r4, #36]	; 0x24
 80124b2:	4b05      	ldr	r3, [pc, #20]	; (80124c8 <std+0x3c>)
 80124b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80124b6:	4b05      	ldr	r3, [pc, #20]	; (80124cc <std+0x40>)
 80124b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80124ba:	4b05      	ldr	r3, [pc, #20]	; (80124d0 <std+0x44>)
 80124bc:	6224      	str	r4, [r4, #32]
 80124be:	6323      	str	r3, [r4, #48]	; 0x30
 80124c0:	bd10      	pop	{r4, pc}
 80124c2:	bf00      	nop
 80124c4:	08011c91 	.word	0x08011c91
 80124c8:	08011cb3 	.word	0x08011cb3
 80124cc:	08011ceb 	.word	0x08011ceb
 80124d0:	08011d0f 	.word	0x08011d0f

080124d4 <_cleanup_r>:
 80124d4:	4901      	ldr	r1, [pc, #4]	; (80124dc <_cleanup_r+0x8>)
 80124d6:	f000 b8af 	b.w	8012638 <_fwalk_reent>
 80124da:	bf00      	nop
 80124dc:	08012415 	.word	0x08012415

080124e0 <__sfmoreglue>:
 80124e0:	b570      	push	{r4, r5, r6, lr}
 80124e2:	2268      	movs	r2, #104	; 0x68
 80124e4:	1e4d      	subs	r5, r1, #1
 80124e6:	4355      	muls	r5, r2
 80124e8:	460e      	mov	r6, r1
 80124ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80124ee:	f7ff f9e7 	bl	80118c0 <_malloc_r>
 80124f2:	4604      	mov	r4, r0
 80124f4:	b140      	cbz	r0, 8012508 <__sfmoreglue+0x28>
 80124f6:	2100      	movs	r1, #0
 80124f8:	e9c0 1600 	strd	r1, r6, [r0]
 80124fc:	300c      	adds	r0, #12
 80124fe:	60a0      	str	r0, [r4, #8]
 8012500:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012504:	f7fb fecc 	bl	800e2a0 <memset>
 8012508:	4620      	mov	r0, r4
 801250a:	bd70      	pop	{r4, r5, r6, pc}

0801250c <__sfp_lock_acquire>:
 801250c:	4801      	ldr	r0, [pc, #4]	; (8012514 <__sfp_lock_acquire+0x8>)
 801250e:	f7fe bc76 	b.w	8010dfe <__retarget_lock_acquire_recursive>
 8012512:	bf00      	nop
 8012514:	20003195 	.word	0x20003195

08012518 <__sfp_lock_release>:
 8012518:	4801      	ldr	r0, [pc, #4]	; (8012520 <__sfp_lock_release+0x8>)
 801251a:	f7fe bc71 	b.w	8010e00 <__retarget_lock_release_recursive>
 801251e:	bf00      	nop
 8012520:	20003195 	.word	0x20003195

08012524 <__sinit_lock_acquire>:
 8012524:	4801      	ldr	r0, [pc, #4]	; (801252c <__sinit_lock_acquire+0x8>)
 8012526:	f7fe bc6a 	b.w	8010dfe <__retarget_lock_acquire_recursive>
 801252a:	bf00      	nop
 801252c:	20003196 	.word	0x20003196

08012530 <__sinit_lock_release>:
 8012530:	4801      	ldr	r0, [pc, #4]	; (8012538 <__sinit_lock_release+0x8>)
 8012532:	f7fe bc65 	b.w	8010e00 <__retarget_lock_release_recursive>
 8012536:	bf00      	nop
 8012538:	20003196 	.word	0x20003196

0801253c <__sinit>:
 801253c:	b510      	push	{r4, lr}
 801253e:	4604      	mov	r4, r0
 8012540:	f7ff fff0 	bl	8012524 <__sinit_lock_acquire>
 8012544:	69a3      	ldr	r3, [r4, #24]
 8012546:	b11b      	cbz	r3, 8012550 <__sinit+0x14>
 8012548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801254c:	f7ff bff0 	b.w	8012530 <__sinit_lock_release>
 8012550:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012554:	6523      	str	r3, [r4, #80]	; 0x50
 8012556:	4b13      	ldr	r3, [pc, #76]	; (80125a4 <__sinit+0x68>)
 8012558:	4a13      	ldr	r2, [pc, #76]	; (80125a8 <__sinit+0x6c>)
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	62a2      	str	r2, [r4, #40]	; 0x28
 801255e:	42a3      	cmp	r3, r4
 8012560:	bf04      	itt	eq
 8012562:	2301      	moveq	r3, #1
 8012564:	61a3      	streq	r3, [r4, #24]
 8012566:	4620      	mov	r0, r4
 8012568:	f000 f820 	bl	80125ac <__sfp>
 801256c:	6060      	str	r0, [r4, #4]
 801256e:	4620      	mov	r0, r4
 8012570:	f000 f81c 	bl	80125ac <__sfp>
 8012574:	60a0      	str	r0, [r4, #8]
 8012576:	4620      	mov	r0, r4
 8012578:	f000 f818 	bl	80125ac <__sfp>
 801257c:	2200      	movs	r2, #0
 801257e:	60e0      	str	r0, [r4, #12]
 8012580:	2104      	movs	r1, #4
 8012582:	6860      	ldr	r0, [r4, #4]
 8012584:	f7ff ff82 	bl	801248c <std>
 8012588:	68a0      	ldr	r0, [r4, #8]
 801258a:	2201      	movs	r2, #1
 801258c:	2109      	movs	r1, #9
 801258e:	f7ff ff7d 	bl	801248c <std>
 8012592:	68e0      	ldr	r0, [r4, #12]
 8012594:	2202      	movs	r2, #2
 8012596:	2112      	movs	r1, #18
 8012598:	f7ff ff78 	bl	801248c <std>
 801259c:	2301      	movs	r3, #1
 801259e:	61a3      	str	r3, [r4, #24]
 80125a0:	e7d2      	b.n	8012548 <__sinit+0xc>
 80125a2:	bf00      	nop
 80125a4:	08013f54 	.word	0x08013f54
 80125a8:	080124d5 	.word	0x080124d5

080125ac <__sfp>:
 80125ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125ae:	4607      	mov	r7, r0
 80125b0:	f7ff ffac 	bl	801250c <__sfp_lock_acquire>
 80125b4:	4b1e      	ldr	r3, [pc, #120]	; (8012630 <__sfp+0x84>)
 80125b6:	681e      	ldr	r6, [r3, #0]
 80125b8:	69b3      	ldr	r3, [r6, #24]
 80125ba:	b913      	cbnz	r3, 80125c2 <__sfp+0x16>
 80125bc:	4630      	mov	r0, r6
 80125be:	f7ff ffbd 	bl	801253c <__sinit>
 80125c2:	3648      	adds	r6, #72	; 0x48
 80125c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80125c8:	3b01      	subs	r3, #1
 80125ca:	d503      	bpl.n	80125d4 <__sfp+0x28>
 80125cc:	6833      	ldr	r3, [r6, #0]
 80125ce:	b30b      	cbz	r3, 8012614 <__sfp+0x68>
 80125d0:	6836      	ldr	r6, [r6, #0]
 80125d2:	e7f7      	b.n	80125c4 <__sfp+0x18>
 80125d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80125d8:	b9d5      	cbnz	r5, 8012610 <__sfp+0x64>
 80125da:	4b16      	ldr	r3, [pc, #88]	; (8012634 <__sfp+0x88>)
 80125dc:	60e3      	str	r3, [r4, #12]
 80125de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80125e2:	6665      	str	r5, [r4, #100]	; 0x64
 80125e4:	f7fe fc0a 	bl	8010dfc <__retarget_lock_init_recursive>
 80125e8:	f7ff ff96 	bl	8012518 <__sfp_lock_release>
 80125ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80125f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80125f4:	6025      	str	r5, [r4, #0]
 80125f6:	61a5      	str	r5, [r4, #24]
 80125f8:	2208      	movs	r2, #8
 80125fa:	4629      	mov	r1, r5
 80125fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012600:	f7fb fe4e 	bl	800e2a0 <memset>
 8012604:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012608:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801260c:	4620      	mov	r0, r4
 801260e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012610:	3468      	adds	r4, #104	; 0x68
 8012612:	e7d9      	b.n	80125c8 <__sfp+0x1c>
 8012614:	2104      	movs	r1, #4
 8012616:	4638      	mov	r0, r7
 8012618:	f7ff ff62 	bl	80124e0 <__sfmoreglue>
 801261c:	4604      	mov	r4, r0
 801261e:	6030      	str	r0, [r6, #0]
 8012620:	2800      	cmp	r0, #0
 8012622:	d1d5      	bne.n	80125d0 <__sfp+0x24>
 8012624:	f7ff ff78 	bl	8012518 <__sfp_lock_release>
 8012628:	230c      	movs	r3, #12
 801262a:	603b      	str	r3, [r7, #0]
 801262c:	e7ee      	b.n	801260c <__sfp+0x60>
 801262e:	bf00      	nop
 8012630:	08013f54 	.word	0x08013f54
 8012634:	ffff0001 	.word	0xffff0001

08012638 <_fwalk_reent>:
 8012638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801263c:	4606      	mov	r6, r0
 801263e:	4688      	mov	r8, r1
 8012640:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012644:	2700      	movs	r7, #0
 8012646:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801264a:	f1b9 0901 	subs.w	r9, r9, #1
 801264e:	d505      	bpl.n	801265c <_fwalk_reent+0x24>
 8012650:	6824      	ldr	r4, [r4, #0]
 8012652:	2c00      	cmp	r4, #0
 8012654:	d1f7      	bne.n	8012646 <_fwalk_reent+0xe>
 8012656:	4638      	mov	r0, r7
 8012658:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801265c:	89ab      	ldrh	r3, [r5, #12]
 801265e:	2b01      	cmp	r3, #1
 8012660:	d907      	bls.n	8012672 <_fwalk_reent+0x3a>
 8012662:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012666:	3301      	adds	r3, #1
 8012668:	d003      	beq.n	8012672 <_fwalk_reent+0x3a>
 801266a:	4629      	mov	r1, r5
 801266c:	4630      	mov	r0, r6
 801266e:	47c0      	blx	r8
 8012670:	4307      	orrs	r7, r0
 8012672:	3568      	adds	r5, #104	; 0x68
 8012674:	e7e9      	b.n	801264a <_fwalk_reent+0x12>

08012676 <__swhatbuf_r>:
 8012676:	b570      	push	{r4, r5, r6, lr}
 8012678:	460e      	mov	r6, r1
 801267a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801267e:	2900      	cmp	r1, #0
 8012680:	b096      	sub	sp, #88	; 0x58
 8012682:	4614      	mov	r4, r2
 8012684:	461d      	mov	r5, r3
 8012686:	da08      	bge.n	801269a <__swhatbuf_r+0x24>
 8012688:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801268c:	2200      	movs	r2, #0
 801268e:	602a      	str	r2, [r5, #0]
 8012690:	061a      	lsls	r2, r3, #24
 8012692:	d410      	bmi.n	80126b6 <__swhatbuf_r+0x40>
 8012694:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012698:	e00e      	b.n	80126b8 <__swhatbuf_r+0x42>
 801269a:	466a      	mov	r2, sp
 801269c:	f000 f89c 	bl	80127d8 <_fstat_r>
 80126a0:	2800      	cmp	r0, #0
 80126a2:	dbf1      	blt.n	8012688 <__swhatbuf_r+0x12>
 80126a4:	9a01      	ldr	r2, [sp, #4]
 80126a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80126aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80126ae:	425a      	negs	r2, r3
 80126b0:	415a      	adcs	r2, r3
 80126b2:	602a      	str	r2, [r5, #0]
 80126b4:	e7ee      	b.n	8012694 <__swhatbuf_r+0x1e>
 80126b6:	2340      	movs	r3, #64	; 0x40
 80126b8:	2000      	movs	r0, #0
 80126ba:	6023      	str	r3, [r4, #0]
 80126bc:	b016      	add	sp, #88	; 0x58
 80126be:	bd70      	pop	{r4, r5, r6, pc}

080126c0 <__smakebuf_r>:
 80126c0:	898b      	ldrh	r3, [r1, #12]
 80126c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80126c4:	079d      	lsls	r5, r3, #30
 80126c6:	4606      	mov	r6, r0
 80126c8:	460c      	mov	r4, r1
 80126ca:	d507      	bpl.n	80126dc <__smakebuf_r+0x1c>
 80126cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80126d0:	6023      	str	r3, [r4, #0]
 80126d2:	6123      	str	r3, [r4, #16]
 80126d4:	2301      	movs	r3, #1
 80126d6:	6163      	str	r3, [r4, #20]
 80126d8:	b002      	add	sp, #8
 80126da:	bd70      	pop	{r4, r5, r6, pc}
 80126dc:	ab01      	add	r3, sp, #4
 80126de:	466a      	mov	r2, sp
 80126e0:	f7ff ffc9 	bl	8012676 <__swhatbuf_r>
 80126e4:	9900      	ldr	r1, [sp, #0]
 80126e6:	4605      	mov	r5, r0
 80126e8:	4630      	mov	r0, r6
 80126ea:	f7ff f8e9 	bl	80118c0 <_malloc_r>
 80126ee:	b948      	cbnz	r0, 8012704 <__smakebuf_r+0x44>
 80126f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80126f4:	059a      	lsls	r2, r3, #22
 80126f6:	d4ef      	bmi.n	80126d8 <__smakebuf_r+0x18>
 80126f8:	f023 0303 	bic.w	r3, r3, #3
 80126fc:	f043 0302 	orr.w	r3, r3, #2
 8012700:	81a3      	strh	r3, [r4, #12]
 8012702:	e7e3      	b.n	80126cc <__smakebuf_r+0xc>
 8012704:	4b0d      	ldr	r3, [pc, #52]	; (801273c <__smakebuf_r+0x7c>)
 8012706:	62b3      	str	r3, [r6, #40]	; 0x28
 8012708:	89a3      	ldrh	r3, [r4, #12]
 801270a:	6020      	str	r0, [r4, #0]
 801270c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012710:	81a3      	strh	r3, [r4, #12]
 8012712:	9b00      	ldr	r3, [sp, #0]
 8012714:	6163      	str	r3, [r4, #20]
 8012716:	9b01      	ldr	r3, [sp, #4]
 8012718:	6120      	str	r0, [r4, #16]
 801271a:	b15b      	cbz	r3, 8012734 <__smakebuf_r+0x74>
 801271c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012720:	4630      	mov	r0, r6
 8012722:	f000 f86b 	bl	80127fc <_isatty_r>
 8012726:	b128      	cbz	r0, 8012734 <__smakebuf_r+0x74>
 8012728:	89a3      	ldrh	r3, [r4, #12]
 801272a:	f023 0303 	bic.w	r3, r3, #3
 801272e:	f043 0301 	orr.w	r3, r3, #1
 8012732:	81a3      	strh	r3, [r4, #12]
 8012734:	89a0      	ldrh	r0, [r4, #12]
 8012736:	4305      	orrs	r5, r0
 8012738:	81a5      	strh	r5, [r4, #12]
 801273a:	e7cd      	b.n	80126d8 <__smakebuf_r+0x18>
 801273c:	080124d5 	.word	0x080124d5

08012740 <_malloc_usable_size_r>:
 8012740:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012744:	1f18      	subs	r0, r3, #4
 8012746:	2b00      	cmp	r3, #0
 8012748:	bfbc      	itt	lt
 801274a:	580b      	ldrlt	r3, [r1, r0]
 801274c:	18c0      	addlt	r0, r0, r3
 801274e:	4770      	bx	lr

08012750 <_raise_r>:
 8012750:	291f      	cmp	r1, #31
 8012752:	b538      	push	{r3, r4, r5, lr}
 8012754:	4604      	mov	r4, r0
 8012756:	460d      	mov	r5, r1
 8012758:	d904      	bls.n	8012764 <_raise_r+0x14>
 801275a:	2316      	movs	r3, #22
 801275c:	6003      	str	r3, [r0, #0]
 801275e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012762:	bd38      	pop	{r3, r4, r5, pc}
 8012764:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012766:	b112      	cbz	r2, 801276e <_raise_r+0x1e>
 8012768:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801276c:	b94b      	cbnz	r3, 8012782 <_raise_r+0x32>
 801276e:	4620      	mov	r0, r4
 8012770:	f000 f830 	bl	80127d4 <_getpid_r>
 8012774:	462a      	mov	r2, r5
 8012776:	4601      	mov	r1, r0
 8012778:	4620      	mov	r0, r4
 801277a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801277e:	f000 b817 	b.w	80127b0 <_kill_r>
 8012782:	2b01      	cmp	r3, #1
 8012784:	d00a      	beq.n	801279c <_raise_r+0x4c>
 8012786:	1c59      	adds	r1, r3, #1
 8012788:	d103      	bne.n	8012792 <_raise_r+0x42>
 801278a:	2316      	movs	r3, #22
 801278c:	6003      	str	r3, [r0, #0]
 801278e:	2001      	movs	r0, #1
 8012790:	e7e7      	b.n	8012762 <_raise_r+0x12>
 8012792:	2400      	movs	r4, #0
 8012794:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012798:	4628      	mov	r0, r5
 801279a:	4798      	blx	r3
 801279c:	2000      	movs	r0, #0
 801279e:	e7e0      	b.n	8012762 <_raise_r+0x12>

080127a0 <raise>:
 80127a0:	4b02      	ldr	r3, [pc, #8]	; (80127ac <raise+0xc>)
 80127a2:	4601      	mov	r1, r0
 80127a4:	6818      	ldr	r0, [r3, #0]
 80127a6:	f7ff bfd3 	b.w	8012750 <_raise_r>
 80127aa:	bf00      	nop
 80127ac:	2000022c 	.word	0x2000022c

080127b0 <_kill_r>:
 80127b0:	b538      	push	{r3, r4, r5, lr}
 80127b2:	4d07      	ldr	r5, [pc, #28]	; (80127d0 <_kill_r+0x20>)
 80127b4:	2300      	movs	r3, #0
 80127b6:	4604      	mov	r4, r0
 80127b8:	4608      	mov	r0, r1
 80127ba:	4611      	mov	r1, r2
 80127bc:	602b      	str	r3, [r5, #0]
 80127be:	f7f2 ffdd 	bl	800577c <_kill>
 80127c2:	1c43      	adds	r3, r0, #1
 80127c4:	d102      	bne.n	80127cc <_kill_r+0x1c>
 80127c6:	682b      	ldr	r3, [r5, #0]
 80127c8:	b103      	cbz	r3, 80127cc <_kill_r+0x1c>
 80127ca:	6023      	str	r3, [r4, #0]
 80127cc:	bd38      	pop	{r3, r4, r5, pc}
 80127ce:	bf00      	nop
 80127d0:	200031a0 	.word	0x200031a0

080127d4 <_getpid_r>:
 80127d4:	f7f2 bfca 	b.w	800576c <_getpid>

080127d8 <_fstat_r>:
 80127d8:	b538      	push	{r3, r4, r5, lr}
 80127da:	4d07      	ldr	r5, [pc, #28]	; (80127f8 <_fstat_r+0x20>)
 80127dc:	2300      	movs	r3, #0
 80127de:	4604      	mov	r4, r0
 80127e0:	4608      	mov	r0, r1
 80127e2:	4611      	mov	r1, r2
 80127e4:	602b      	str	r3, [r5, #0]
 80127e6:	f7f3 f828 	bl	800583a <_fstat>
 80127ea:	1c43      	adds	r3, r0, #1
 80127ec:	d102      	bne.n	80127f4 <_fstat_r+0x1c>
 80127ee:	682b      	ldr	r3, [r5, #0]
 80127f0:	b103      	cbz	r3, 80127f4 <_fstat_r+0x1c>
 80127f2:	6023      	str	r3, [r4, #0]
 80127f4:	bd38      	pop	{r3, r4, r5, pc}
 80127f6:	bf00      	nop
 80127f8:	200031a0 	.word	0x200031a0

080127fc <_isatty_r>:
 80127fc:	b538      	push	{r3, r4, r5, lr}
 80127fe:	4d06      	ldr	r5, [pc, #24]	; (8012818 <_isatty_r+0x1c>)
 8012800:	2300      	movs	r3, #0
 8012802:	4604      	mov	r4, r0
 8012804:	4608      	mov	r0, r1
 8012806:	602b      	str	r3, [r5, #0]
 8012808:	f7f3 f827 	bl	800585a <_isatty>
 801280c:	1c43      	adds	r3, r0, #1
 801280e:	d102      	bne.n	8012816 <_isatty_r+0x1a>
 8012810:	682b      	ldr	r3, [r5, #0]
 8012812:	b103      	cbz	r3, 8012816 <_isatty_r+0x1a>
 8012814:	6023      	str	r3, [r4, #0]
 8012816:	bd38      	pop	{r3, r4, r5, pc}
 8012818:	200031a0 	.word	0x200031a0

0801281c <_init>:
 801281c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801281e:	bf00      	nop
 8012820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012822:	bc08      	pop	{r3}
 8012824:	469e      	mov	lr, r3
 8012826:	4770      	bx	lr

08012828 <_fini>:
 8012828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801282a:	bf00      	nop
 801282c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801282e:	bc08      	pop	{r3}
 8012830:	469e      	mov	lr, r3
 8012832:	4770      	bx	lr
