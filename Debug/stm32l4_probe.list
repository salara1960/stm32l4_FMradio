
stm32l4_probe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000166a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f0c  08016838  08016838  00026838  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018744  08018744  0003042c  2**0
                  CONTENTS
  4 .ARM          00000008  08018744  08018744  00028744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801874c  0801874c  0003042c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801874c  0801874c  0002874c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018750  08018750  00028750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000042c  20000000  08018754  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003e0c  20000430  08018b80  00030430  2**3
                  ALLOC
 10 ._user_heap_stack 00001004  2000423c  08018b80  0003423c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003042c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022919  00000000  00000000  0003045c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004268  00000000  00000000  00052d75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001da8  00000000  00000000  00056fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c68  00000000  00000000  00058d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d327  00000000  00000000  0005a9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025d77  00000000  00000000  00087d17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103cf7  00000000  00000000  000ada8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b1785  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000094f0  00000000  00000000  001b17d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000430 	.word	0x20000430
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801681c 	.word	0x0801681c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000434 	.word	0x20000434
 80001cc:	0801681c 	.word	0x0801681c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ca6:	f000 b9f5 	b.w	8001094 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f883 	bl	8000dc4 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f876 	bl	8000dc4 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f865 	bl	8000dc4 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f857 	bl	8000dc4 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d3c:	f000 b9aa 	b.w	8001094 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f83c 	bl	8000dc4 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_d2lz>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	460d      	mov	r5, r1
 8000d62:	f7ff febb 	bl	8000adc <__aeabi_dcmplt>
 8000d66:	b928      	cbnz	r0, 8000d74 <__aeabi_d2lz+0x1c>
 8000d68:	4620      	mov	r0, r4
 8000d6a:	4629      	mov	r1, r5
 8000d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d70:	f000 b80a 	b.w	8000d88 <__aeabi_d2ulz>
 8000d74:	4620      	mov	r0, r4
 8000d76:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d7a:	f000 f805 	bl	8000d88 <__aeabi_d2ulz>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
 8000d86:	bf00      	nop

08000d88 <__aeabi_d2ulz>:
 8000d88:	b5d0      	push	{r4, r6, r7, lr}
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__aeabi_d2ulz+0x34>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4606      	mov	r6, r0
 8000d90:	460f      	mov	r7, r1
 8000d92:	f7ff fc31 	bl	80005f8 <__aeabi_dmul>
 8000d96:	f7ff ff07 	bl	8000ba8 <__aeabi_d2uiz>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	f7ff fbb2 	bl	8000504 <__aeabi_ui2d>
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <__aeabi_d2ulz+0x38>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f7ff fc28 	bl	80005f8 <__aeabi_dmul>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4630      	mov	r0, r6
 8000dae:	4639      	mov	r1, r7
 8000db0:	f7ff fa6a 	bl	8000288 <__aeabi_dsub>
 8000db4:	f7ff fef8 	bl	8000ba8 <__aeabi_d2uiz>
 8000db8:	4621      	mov	r1, r4
 8000dba:	bdd0      	pop	{r4, r6, r7, pc}
 8000dbc:	3df00000 	.word	0x3df00000
 8000dc0:	41f00000 	.word	0x41f00000

08000dc4 <__udivmoddi4>:
 8000dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc8:	9d08      	ldr	r5, [sp, #32]
 8000dca:	4604      	mov	r4, r0
 8000dcc:	468e      	mov	lr, r1
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d14d      	bne.n	8000e6e <__udivmoddi4+0xaa>
 8000dd2:	428a      	cmp	r2, r1
 8000dd4:	4694      	mov	ip, r2
 8000dd6:	d969      	bls.n	8000eac <__udivmoddi4+0xe8>
 8000dd8:	fab2 f282 	clz	r2, r2
 8000ddc:	b152      	cbz	r2, 8000df4 <__udivmoddi4+0x30>
 8000dde:	fa01 f302 	lsl.w	r3, r1, r2
 8000de2:	f1c2 0120 	rsb	r1, r2, #32
 8000de6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dea:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dee:	ea41 0e03 	orr.w	lr, r1, r3
 8000df2:	4094      	lsls	r4, r2
 8000df4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df8:	0c21      	lsrs	r1, r4, #16
 8000dfa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dfe:	fa1f f78c 	uxth.w	r7, ip
 8000e02:	fb08 e316 	mls	r3, r8, r6, lr
 8000e06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e0a:	fb06 f107 	mul.w	r1, r6, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x64>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000e1a:	f080 811f 	bcs.w	800105c <__udivmoddi4+0x298>
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	f240 811c 	bls.w	800105c <__udivmoddi4+0x298>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b2a4      	uxth	r4, r4
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e38:	fb00 f707 	mul.w	r7, r0, r7
 8000e3c:	42a7      	cmp	r7, r4
 8000e3e:	d90a      	bls.n	8000e56 <__udivmoddi4+0x92>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e48:	f080 810a 	bcs.w	8001060 <__udivmoddi4+0x29c>
 8000e4c:	42a7      	cmp	r7, r4
 8000e4e:	f240 8107 	bls.w	8001060 <__udivmoddi4+0x29c>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e5a:	1be4      	subs	r4, r4, r7
 8000e5c:	2600      	movs	r6, #0
 8000e5e:	b11d      	cbz	r5, 8000e68 <__udivmoddi4+0xa4>
 8000e60:	40d4      	lsrs	r4, r2
 8000e62:	2300      	movs	r3, #0
 8000e64:	e9c5 4300 	strd	r4, r3, [r5]
 8000e68:	4631      	mov	r1, r6
 8000e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d909      	bls.n	8000e86 <__udivmoddi4+0xc2>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	f000 80ef 	beq.w	8001056 <__udivmoddi4+0x292>
 8000e78:	2600      	movs	r6, #0
 8000e7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7e:	4630      	mov	r0, r6
 8000e80:	4631      	mov	r1, r6
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	fab3 f683 	clz	r6, r3
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d14a      	bne.n	8000f24 <__udivmoddi4+0x160>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d302      	bcc.n	8000e98 <__udivmoddi4+0xd4>
 8000e92:	4282      	cmp	r2, r0
 8000e94:	f200 80f9 	bhi.w	800108a <__udivmoddi4+0x2c6>
 8000e98:	1a84      	subs	r4, r0, r2
 8000e9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	469e      	mov	lr, r3
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d0e0      	beq.n	8000e68 <__udivmoddi4+0xa4>
 8000ea6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eaa:	e7dd      	b.n	8000e68 <__udivmoddi4+0xa4>
 8000eac:	b902      	cbnz	r2, 8000eb0 <__udivmoddi4+0xec>
 8000eae:	deff      	udf	#255	; 0xff
 8000eb0:	fab2 f282 	clz	r2, r2
 8000eb4:	2a00      	cmp	r2, #0
 8000eb6:	f040 8092 	bne.w	8000fde <__udivmoddi4+0x21a>
 8000eba:	eba1 010c 	sub.w	r1, r1, ip
 8000ebe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec2:	fa1f fe8c 	uxth.w	lr, ip
 8000ec6:	2601      	movs	r6, #1
 8000ec8:	0c20      	lsrs	r0, r4, #16
 8000eca:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ece:	fb07 1113 	mls	r1, r7, r3, r1
 8000ed2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed6:	fb0e f003 	mul.w	r0, lr, r3
 8000eda:	4288      	cmp	r0, r1
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x12c>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x12a>
 8000ee8:	4288      	cmp	r0, r1
 8000eea:	f200 80cb 	bhi.w	8001084 <__udivmoddi4+0x2c0>
 8000eee:	4643      	mov	r3, r8
 8000ef0:	1a09      	subs	r1, r1, r0
 8000ef2:	b2a4      	uxth	r4, r4
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1110 	mls	r1, r7, r0, r1
 8000efc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f00:	fb0e fe00 	mul.w	lr, lr, r0
 8000f04:	45a6      	cmp	lr, r4
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x156>
 8000f08:	eb1c 0404 	adds.w	r4, ip, r4
 8000f0c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f10:	d202      	bcs.n	8000f18 <__udivmoddi4+0x154>
 8000f12:	45a6      	cmp	lr, r4
 8000f14:	f200 80bb 	bhi.w	800108e <__udivmoddi4+0x2ca>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	eba4 040e 	sub.w	r4, r4, lr
 8000f1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f22:	e79c      	b.n	8000e5e <__udivmoddi4+0x9a>
 8000f24:	f1c6 0720 	rsb	r7, r6, #32
 8000f28:	40b3      	lsls	r3, r6
 8000f2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f32:	fa20 f407 	lsr.w	r4, r0, r7
 8000f36:	fa01 f306 	lsl.w	r3, r1, r6
 8000f3a:	431c      	orrs	r4, r3
 8000f3c:	40f9      	lsrs	r1, r7
 8000f3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f42:	fa00 f306 	lsl.w	r3, r0, r6
 8000f46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f4a:	0c20      	lsrs	r0, r4, #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fb09 1118 	mls	r1, r9, r8, r1
 8000f54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f58:	fb08 f00e 	mul.w	r0, r8, lr
 8000f5c:	4288      	cmp	r0, r1
 8000f5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f62:	d90b      	bls.n	8000f7c <__udivmoddi4+0x1b8>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f6c:	f080 8088 	bcs.w	8001080 <__udivmoddi4+0x2bc>
 8000f70:	4288      	cmp	r0, r1
 8000f72:	f240 8085 	bls.w	8001080 <__udivmoddi4+0x2bc>
 8000f76:	f1a8 0802 	sub.w	r8, r8, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1a09      	subs	r1, r1, r0
 8000f7e:	b2a4      	uxth	r4, r4
 8000f80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f84:	fb09 1110 	mls	r1, r9, r0, r1
 8000f88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f90:	458e      	cmp	lr, r1
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x1e2>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f9c:	d26c      	bcs.n	8001078 <__udivmoddi4+0x2b4>
 8000f9e:	458e      	cmp	lr, r1
 8000fa0:	d96a      	bls.n	8001078 <__udivmoddi4+0x2b4>
 8000fa2:	3802      	subs	r0, #2
 8000fa4:	4461      	add	r1, ip
 8000fa6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000faa:	fba0 9402 	umull	r9, r4, r0, r2
 8000fae:	eba1 010e 	sub.w	r1, r1, lr
 8000fb2:	42a1      	cmp	r1, r4
 8000fb4:	46c8      	mov	r8, r9
 8000fb6:	46a6      	mov	lr, r4
 8000fb8:	d356      	bcc.n	8001068 <__udivmoddi4+0x2a4>
 8000fba:	d053      	beq.n	8001064 <__udivmoddi4+0x2a0>
 8000fbc:	b15d      	cbz	r5, 8000fd6 <__udivmoddi4+0x212>
 8000fbe:	ebb3 0208 	subs.w	r2, r3, r8
 8000fc2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fc6:	fa01 f707 	lsl.w	r7, r1, r7
 8000fca:	fa22 f306 	lsr.w	r3, r2, r6
 8000fce:	40f1      	lsrs	r1, r6
 8000fd0:	431f      	orrs	r7, r3
 8000fd2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fd6:	2600      	movs	r6, #0
 8000fd8:	4631      	mov	r1, r6
 8000fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fde:	f1c2 0320 	rsb	r3, r2, #32
 8000fe2:	40d8      	lsrs	r0, r3
 8000fe4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fe8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fec:	4091      	lsls	r1, r2
 8000fee:	4301      	orrs	r1, r0
 8000ff0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ff4:	fa1f fe8c 	uxth.w	lr, ip
 8000ff8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ffc:	fb07 3610 	mls	r6, r7, r0, r3
 8001000:	0c0b      	lsrs	r3, r1, #16
 8001002:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001006:	fb00 f60e 	mul.w	r6, r0, lr
 800100a:	429e      	cmp	r6, r3
 800100c:	fa04 f402 	lsl.w	r4, r4, r2
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x260>
 8001012:	eb1c 0303 	adds.w	r3, ip, r3
 8001016:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800101a:	d22f      	bcs.n	800107c <__udivmoddi4+0x2b8>
 800101c:	429e      	cmp	r6, r3
 800101e:	d92d      	bls.n	800107c <__udivmoddi4+0x2b8>
 8001020:	3802      	subs	r0, #2
 8001022:	4463      	add	r3, ip
 8001024:	1b9b      	subs	r3, r3, r6
 8001026:	b289      	uxth	r1, r1
 8001028:	fbb3 f6f7 	udiv	r6, r3, r7
 800102c:	fb07 3316 	mls	r3, r7, r6, r3
 8001030:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001034:	fb06 f30e 	mul.w	r3, r6, lr
 8001038:	428b      	cmp	r3, r1
 800103a:	d908      	bls.n	800104e <__udivmoddi4+0x28a>
 800103c:	eb1c 0101 	adds.w	r1, ip, r1
 8001040:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8001044:	d216      	bcs.n	8001074 <__udivmoddi4+0x2b0>
 8001046:	428b      	cmp	r3, r1
 8001048:	d914      	bls.n	8001074 <__udivmoddi4+0x2b0>
 800104a:	3e02      	subs	r6, #2
 800104c:	4461      	add	r1, ip
 800104e:	1ac9      	subs	r1, r1, r3
 8001050:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001054:	e738      	b.n	8000ec8 <__udivmoddi4+0x104>
 8001056:	462e      	mov	r6, r5
 8001058:	4628      	mov	r0, r5
 800105a:	e705      	b.n	8000e68 <__udivmoddi4+0xa4>
 800105c:	4606      	mov	r6, r0
 800105e:	e6e3      	b.n	8000e28 <__udivmoddi4+0x64>
 8001060:	4618      	mov	r0, r3
 8001062:	e6f8      	b.n	8000e56 <__udivmoddi4+0x92>
 8001064:	454b      	cmp	r3, r9
 8001066:	d2a9      	bcs.n	8000fbc <__udivmoddi4+0x1f8>
 8001068:	ebb9 0802 	subs.w	r8, r9, r2
 800106c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001070:	3801      	subs	r0, #1
 8001072:	e7a3      	b.n	8000fbc <__udivmoddi4+0x1f8>
 8001074:	4646      	mov	r6, r8
 8001076:	e7ea      	b.n	800104e <__udivmoddi4+0x28a>
 8001078:	4620      	mov	r0, r4
 800107a:	e794      	b.n	8000fa6 <__udivmoddi4+0x1e2>
 800107c:	4640      	mov	r0, r8
 800107e:	e7d1      	b.n	8001024 <__udivmoddi4+0x260>
 8001080:	46d0      	mov	r8, sl
 8001082:	e77b      	b.n	8000f7c <__udivmoddi4+0x1b8>
 8001084:	3b02      	subs	r3, #2
 8001086:	4461      	add	r1, ip
 8001088:	e732      	b.n	8000ef0 <__udivmoddi4+0x12c>
 800108a:	4630      	mov	r0, r6
 800108c:	e709      	b.n	8000ea2 <__udivmoddi4+0xde>
 800108e:	4464      	add	r4, ip
 8001090:	3802      	subs	r0, #2
 8001092:	e742      	b.n	8000f1a <__udivmoddi4+0x156>

08001094 <__aeabi_idiv0>:
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <ST7565_Select>:
uint8_t lcdRdy = 1;

//------------------------------------------------------------------------------

inline static void ST7565_Select()
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
#ifdef CS_PORT
	//-- если захотим переделать под HAL ------------------
	#ifdef ST7565_SPI_HAL
		//HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
		CS_GPIO_Port->BSRR = ( CS_Pin << 16 );
 800109c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80010a4:	619a      	str	r2, [r3, #24]
	#ifdef ST7565_SPI_CMSIS
		CS_GPIO_Port->BSRR = ( CS_Pin << 16 );
	#endif
	//-----------------------------------------------------
#endif
}
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <ST7565_Unselect>:

//------------------------------------------------------------------------------

inline static void ST7565_Unselect()
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
#ifdef CS_PORT
	//-- если захотим переделать под HAL ------------------
	#ifdef ST7565_SPI_HAL
		//HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
		CS_GPIO_Port->BSRR = CS_Pin;
 80010b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010b8:	2210      	movs	r2, #16
 80010ba:	619a      	str	r2, [r3, #24]
	#ifdef ST7565_SPI_CMSIS
		CS_GPIO_Port->BSRR = CS_Pin;
	#endif
	//-----------------------------------------------------
#endif
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
	...

080010c8 <ST7565_Reset>:
	* @brief	 ( описание ):  аппарвтный сброс дисплея
	* @param	( параметры ):	
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Reset()
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	RES_GPIO_Port->BSRR = (RES_Pin << 16);//HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_RESET );
 80010cc:	4b07      	ldr	r3, [pc, #28]	; (80010ec <ST7565_Reset+0x24>)
 80010ce:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80010d2:	619a      	str	r2, [r3, #24]
	HAL_Delay(1);
 80010d4:	2001      	movs	r0, #1
 80010d6:	f005 fedf 	bl	8006e98 <HAL_Delay>
	
	RES_GPIO_Port->BSRR = RES_Pin;//HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_SET );
 80010da:	4b04      	ldr	r3, [pc, #16]	; (80010ec <ST7565_Reset+0x24>)
 80010dc:	2204      	movs	r2, #4
 80010de:	619a      	str	r2, [r3, #24]
	HAL_Delay(1);
 80010e0:	2001      	movs	r0, #1
 80010e2:	f005 fed9 	bl	8006e98 <HAL_Delay>
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	48000c00 	.word	0x48000c00

080010f0 <ST7565_w_dats>:
//--------------------------------------------------------------------------------
#ifdef SET_NEW_PROC
inline static void ST7565_w_dats(uint8_t *Data, uint16_t len)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	807b      	strh	r3, [r7, #2]
	DC_GPIO_Port->BSRR = DC_Pin;//HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80010fc:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <ST7565_w_dats+0x84>)
 80010fe:	2220      	movs	r2, #32
 8001100:	619a      	str	r2, [r3, #24]

	if (with_dma) {
 8001102:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <ST7565_w_dats+0x88>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d018      	beq.n	800113c <ST7565_w_dats+0x4c>
		lcdRdy = 0;
 800110a:	4b1c      	ldr	r3, [pc, #112]	; (800117c <ST7565_w_dats+0x8c>)
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]
		if (HAL_SPI_Transmit_DMA(&ST7565_SPI_HAL, Data, len) != HAL_OK) devError |= devLCD;
 8001110:	887b      	ldrh	r3, [r7, #2]
 8001112:	461a      	mov	r2, r3
 8001114:	6879      	ldr	r1, [r7, #4]
 8001116:	481a      	ldr	r0, [pc, #104]	; (8001180 <ST7565_w_dats+0x90>)
 8001118:	f00a fcbe 	bl	800ba98 <HAL_SPI_Transmit_DMA>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d006      	beq.n	8001130 <ST7565_w_dats+0x40>
 8001122:	4b18      	ldr	r3, [pc, #96]	; (8001184 <ST7565_w_dats+0x94>)
 8001124:	881b      	ldrh	r3, [r3, #0]
 8001126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800112a:	b29a      	uxth	r2, r3
 800112c:	4b15      	ldr	r3, [pc, #84]	; (8001184 <ST7565_w_dats+0x94>)
 800112e:	801a      	strh	r2, [r3, #0]
		while (!lcdRdy) {};
 8001130:	bf00      	nop
 8001132:	4b12      	ldr	r3, [pc, #72]	; (800117c <ST7565_w_dats+0x8c>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d0fb      	beq.n	8001132 <ST7565_w_dats+0x42>
	} else {
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Data, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
	}
}
 800113a:	e017      	b.n	800116c <ST7565_w_dats+0x7c>
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Data, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
 800113c:	887a      	ldrh	r2, [r7, #2]
 800113e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	480e      	ldr	r0, [pc, #56]	; (8001180 <ST7565_w_dats+0x90>)
 8001146:	f009 fff6 	bl	800b136 <HAL_SPI_Transmit>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d006      	beq.n	800115e <ST7565_w_dats+0x6e>
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <ST7565_w_dats+0x94>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001158:	b29a      	uxth	r2, r3
 800115a:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <ST7565_w_dats+0x94>)
 800115c:	801a      	strh	r2, [r3, #0]
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
 800115e:	bf00      	nop
 8001160:	4807      	ldr	r0, [pc, #28]	; (8001180 <ST7565_w_dats+0x90>)
 8001162:	f00b f837 	bl	800c1d4 <HAL_SPI_GetState>
 8001166:	4603      	mov	r3, r0
 8001168:	2b01      	cmp	r3, #1
 800116a:	d1f9      	bne.n	8001160 <ST7565_w_dats+0x70>
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	48000400 	.word	0x48000400
 8001178:	2000084c 	.word	0x2000084c
 800117c:	20000000 	.word	0x20000000
 8001180:	20000958 	.word	0x20000958
 8001184:	20001890 	.word	0x20001890

08001188 <ST7565_w_cmds>:
//
inline static void ST7565_w_cmds(uint8_t *Command, uint16_t len)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	807b      	strh	r3, [r7, #2]
	DC_GPIO_Port->BSRR = (DC_Pin << 16);//HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8001194:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <ST7565_w_cmds+0x88>)
 8001196:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800119a:	619a      	str	r2, [r3, #24]

	if (with_dma) {
 800119c:	4b1d      	ldr	r3, [pc, #116]	; (8001214 <ST7565_w_cmds+0x8c>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d018      	beq.n	80011d6 <ST7565_w_cmds+0x4e>
		lcdRdy = 0;
 80011a4:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <ST7565_w_cmds+0x90>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	701a      	strb	r2, [r3, #0]
		if (HAL_SPI_Transmit_DMA(&ST7565_SPI_HAL, Command, len) != HAL_OK) devError |= devLCD;
 80011aa:	887b      	ldrh	r3, [r7, #2]
 80011ac:	461a      	mov	r2, r3
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	481a      	ldr	r0, [pc, #104]	; (800121c <ST7565_w_cmds+0x94>)
 80011b2:	f00a fc71 	bl	800ba98 <HAL_SPI_Transmit_DMA>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d006      	beq.n	80011ca <ST7565_w_cmds+0x42>
 80011bc:	4b18      	ldr	r3, [pc, #96]	; (8001220 <ST7565_w_cmds+0x98>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	4b16      	ldr	r3, [pc, #88]	; (8001220 <ST7565_w_cmds+0x98>)
 80011c8:	801a      	strh	r2, [r3, #0]
		while (!lcdRdy) {};
 80011ca:	bf00      	nop
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <ST7565_w_cmds+0x90>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0fb      	beq.n	80011cc <ST7565_w_cmds+0x44>
	} else {
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Command, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
	}
}
 80011d4:	e017      	b.n	8001206 <ST7565_w_cmds+0x7e>
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Command, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
 80011d6:	887a      	ldrh	r2, [r7, #2]
 80011d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011dc:	6879      	ldr	r1, [r7, #4]
 80011de:	480f      	ldr	r0, [pc, #60]	; (800121c <ST7565_w_cmds+0x94>)
 80011e0:	f009 ffa9 	bl	800b136 <HAL_SPI_Transmit>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d006      	beq.n	80011f8 <ST7565_w_cmds+0x70>
 80011ea:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <ST7565_w_cmds+0x98>)
 80011ec:	881b      	ldrh	r3, [r3, #0]
 80011ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <ST7565_w_cmds+0x98>)
 80011f6:	801a      	strh	r2, [r3, #0]
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
 80011f8:	bf00      	nop
 80011fa:	4808      	ldr	r0, [pc, #32]	; (800121c <ST7565_w_cmds+0x94>)
 80011fc:	f00a ffea 	bl	800c1d4 <HAL_SPI_GetState>
 8001200:	4603      	mov	r3, r0
 8001202:	2b01      	cmp	r3, #1
 8001204:	d1f9      	bne.n	80011fa <ST7565_w_cmds+0x72>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	48000400 	.word	0x48000400
 8001214:	2000084c 	.word	0x2000084c
 8001218:	20000000 	.word	0x20000000
 800121c:	20000958 	.word	0x20000958
 8001220:	20001890 	.word	0x20001890

08001224 <ST7565_SetX>:
inline static void ST7565_SetX(uint8_t x)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
	uint8_t bytes[] = { ((x & 0xf0) >> 4) | 0x10, x & 0x0f };
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	091b      	lsrs	r3, r3, #4
 8001232:	b2db      	uxtb	r3, r3
 8001234:	f043 0310 	orr.w	r3, r3, #16
 8001238:	b2db      	uxtb	r3, r3
 800123a:	733b      	strb	r3, [r7, #12]
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	b2db      	uxtb	r3, r3
 8001244:	737b      	strb	r3, [r7, #13]
	ST7565_w_cmds(bytes, 2);
 8001246:	f107 030c 	add.w	r3, r7, #12
 800124a:	2102      	movs	r1, #2
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff9b 	bl	8001188 <ST7565_w_cmds>
}
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <ST7565_SetY>:
//
inline static void ST7565_SetY(uint8_t y)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b084      	sub	sp, #16
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	71fb      	strb	r3, [r7, #7]
	uint8_t byte = (y & 0x07) | 0xB0;
 8001264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001268:	f003 0307 	and.w	r3, r3, #7
 800126c:	b25b      	sxtb	r3, r3
 800126e:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8001272:	b25b      	sxtb	r3, r3
 8001274:	b2db      	uxtb	r3, r3
 8001276:	73fb      	strb	r3, [r7, #15]
	ST7565_w_cmds(&byte, 1);
 8001278:	f107 030f 	add.w	r3, r7, #15
 800127c:	2101      	movs	r1, #1
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff ff82 	bl	8001188 <ST7565_w_cmds>
}
 8001284:	bf00      	nop
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <ST7565_Display_fill>:
								( данные отправляются сразу на дисплей и записываются в буфер кадра )
								Функцию ST7565_Update() вызывать не нужно
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Display_fill(uint8_t fill)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
uint8_t page;//, column;
	
	memset(ST7565_buffer, fill, (SCREEN_WIDTH * SCREEN_HEIGHT / 8));	// отчистка памяти заполняем массив значением 0x00
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800129c:	4619      	mov	r1, r3
 800129e:	4814      	ldr	r0, [pc, #80]	; (80012f0 <ST7565_Display_fill+0x64>)
 80012a0:	f010 ffde 	bl	8012260 <memset>
	
	ST7565_Select();
 80012a4:	f7ff fef8 	bl	8001098 <ST7565_Select>
#ifdef SET_NEW_PROC
	uint8_t dta[] = {0, 0x10, 0};
 80012a8:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <ST7565_Display_fill+0x68>)
 80012aa:	f107 030c 	add.w	r3, r7, #12
 80012ae:	6812      	ldr	r2, [r2, #0]
 80012b0:	4611      	mov	r1, r2
 80012b2:	8019      	strh	r1, [r3, #0]
 80012b4:	3302      	adds	r3, #2
 80012b6:	0c12      	lsrs	r2, r2, #16
 80012b8:	701a      	strb	r2, [r3, #0]
#endif
	for (page = 0xB7; page >= 0xB0; page-- ) {
 80012ba:	23b7      	movs	r3, #183	; 0xb7
 80012bc:	73fb      	strb	r3, [r7, #15]
 80012be:	e00e      	b.n	80012de <ST7565_Display_fill+0x52>
		ST7565_w_cmd(page);  //set page address
		ST7565_w_cmd(0x10);  //set Column address MSB   
		ST7565_w_cmd(0x00);  //set column address LSB
		for (column = 0; column < 131; column++) ST7565_w_dat(fill);
#else
		dta[0] = page;
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	733b      	strb	r3, [r7, #12]
		ST7565_w_cmds(dta, sizeof(dta));
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	2103      	movs	r1, #3
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff ff5c 	bl	8001188 <ST7565_w_cmds>
		ST7565_w_dats(ST7565_buffer, 131);
 80012d0:	2183      	movs	r1, #131	; 0x83
 80012d2:	4807      	ldr	r0, [pc, #28]	; (80012f0 <ST7565_Display_fill+0x64>)
 80012d4:	f7ff ff0c 	bl	80010f0 <ST7565_w_dats>
	for (page = 0xB7; page >= 0xB0; page-- ) {
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	3b01      	subs	r3, #1
 80012dc:	73fb      	strb	r3, [r7, #15]
 80012de:	7bfb      	ldrb	r3, [r7, #15]
 80012e0:	2baf      	cmp	r3, #175	; 0xaf
 80012e2:	d8ed      	bhi.n	80012c0 <ST7565_Display_fill+0x34>
#endif
    }
		
	ST7565_Unselect();
 80012e4:	f7ff fee4 	bl	80010b0 <ST7565_Unselect>
}
 80012e8:	bf00      	nop
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	2000044c 	.word	0x2000044c
 80012f4:	08016838 	.word	0x08016838

080012f8 <ST7565_Init>:
	* @brief	 ( описание ):  инициализация дисплея ( при другой инициализации можно поменять параметры внутри функции )
	* @param	( параметры ):	
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Init()
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
	ST7565_Select();
 80012fe:	f7ff fecb 	bl	8001098 <ST7565_Select>
	ST7565_w_cmd(CMD_DISPLAY_ON);    		//Display on
	// Инвертирование экрана CMD_SET_DISP_NORMAL - OFF    CMD_SET_DISP_REVERSE - ON
	ST7565_w_cmd(CMD_SET_DISP_NORMAL);
	//HAL_Delay(1);//1
#else
	uint8_t dta[] = {
 8001302:	4a09      	ldr	r2, [pc, #36]	; (8001328 <ST7565_Init+0x30>)
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	ca07      	ldmia	r2, {r0, r1, r2}
 8001308:	c303      	stmia	r3!, {r0, r1}
 800130a:	801a      	strh	r2, [r3, #0]
	};
	#if defined (SCREEN_ORIENTATION_180)
		dta[1] = CMD_SET_ADC_REVERSE;    	//ADC selection(SEG0->SEG128)  CMD_SET_ADC_NORMAL горизонтально «нормальная» (не перевернутая)
		dta[2] = CMD_SET_COM_NORMAL;    		//SHL selection(COM0->COM64)   CMD_SET_COM_REVERSE вертикально «перевернутая» (дополняет команду выше)
	#endif
	ST7565_w_cmds(dta, sizeof(dta));
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	210a      	movs	r1, #10
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff39 	bl	8001188 <ST7565_w_cmds>
#endif
	
	ST7565_Display_fill(0);
 8001316:	2000      	movs	r0, #0
 8001318:	f7ff ffb8 	bl	800128c <ST7565_Display_fill>
	
	ST7565_Unselect();
 800131c:	f7ff fec8 	bl	80010b0 <ST7565_Unselect>
   
}
 8001320:	bf00      	nop
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	0801683c 	.word	0x0801683c

0800132c <ST7565_CMD_DISPLAY>:
//--------------------------------------------------------------------------------
void ST7565_CMD_DISPLAY(uint8_t byte)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
#ifdef SET_NEW_PROC
	ST7565_w_cmds(&byte, 1);
 8001336:	1dfb      	adds	r3, r7, #7
 8001338:	2101      	movs	r1, #1
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff ff24 	bl	8001188 <ST7565_w_cmds>
#else
	ST7565_w_cmd(byte);
#endif
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <ST7565_Draw_pixel>:
	* @param	( параметры ):	координата X(0 - 127) и координата Y(0 - 63)  color 1 or 0
	* @return  ( возвращает ):	
*******************************************************************************/
// X(0 - 127)  Y(0 - 63)
void ST7565_Draw_pixel(int16_t x, int16_t y, uint8_t color)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	80fb      	strh	r3, [r7, #6]
 8001352:	460b      	mov	r3, r1
 8001354:	80bb      	strh	r3, [r7, #4]
 8001356:	4613      	mov	r3, r2
 8001358:	70fb      	strb	r3, [r7, #3]
    if (x >= SCREEN_WIDTH || x < 0 || y >= SCREEN_HEIGHT || y < 0) return;
 800135a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800135e:	2b7f      	cmp	r3, #127	; 0x7f
 8001360:	dc4c      	bgt.n	80013fc <ST7565_Draw_pixel+0xb4>
 8001362:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001366:	2b00      	cmp	r3, #0
 8001368:	db48      	blt.n	80013fc <ST7565_Draw_pixel+0xb4>
 800136a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800136e:	2b3f      	cmp	r3, #63	; 0x3f
 8001370:	dc44      	bgt.n	80013fc <ST7565_Draw_pixel+0xb4>
 8001372:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	db40      	blt.n	80013fc <ST7565_Draw_pixel+0xb4>

    uint16_t array_pos = x + ((y >> 3) * SCREEN_WIDTH );
 800137a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800137e:	10db      	asrs	r3, r3, #3
 8001380:	b21b      	sxth	r3, r3
 8001382:	b29b      	uxth	r3, r3
 8001384:	01db      	lsls	r3, r3, #7
 8001386:	b29a      	uxth	r2, r3
 8001388:	88fb      	ldrh	r3, [r7, #6]
 800138a:	4413      	add	r3, r2
 800138c:	81fb      	strh	r3, [r7, #14]

    if (color) {
 800138e:	78fb      	ldrb	r3, [r7, #3]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d018      	beq.n	80013c6 <ST7565_Draw_pixel+0x7e>
        ST7565_buffer[array_pos] |= 1 << (y % 8);
 8001394:	89fb      	ldrh	r3, [r7, #14]
 8001396:	4a1c      	ldr	r2, [pc, #112]	; (8001408 <ST7565_Draw_pixel+0xc0>)
 8001398:	5cd3      	ldrb	r3, [r2, r3]
 800139a:	b25a      	sxtb	r2, r3
 800139c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013a0:	4259      	negs	r1, r3
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	f001 0107 	and.w	r1, r1, #7
 80013aa:	bf58      	it	pl
 80013ac:	424b      	negpl	r3, r1
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	4619      	mov	r1, r3
 80013b2:	2301      	movs	r3, #1
 80013b4:	408b      	lsls	r3, r1
 80013b6:	b25b      	sxtb	r3, r3
 80013b8:	4313      	orrs	r3, r2
 80013ba:	b25a      	sxtb	r2, r3
 80013bc:	89fb      	ldrh	r3, [r7, #14]
 80013be:	b2d1      	uxtb	r1, r2
 80013c0:	4a11      	ldr	r2, [pc, #68]	; (8001408 <ST7565_Draw_pixel+0xc0>)
 80013c2:	54d1      	strb	r1, [r2, r3]
 80013c4:	e01b      	b.n	80013fe <ST7565_Draw_pixel+0xb6>
    } else {
        ST7565_buffer[array_pos] &= 0xFF ^ 1 << (y % 8);
 80013c6:	89fb      	ldrh	r3, [r7, #14]
 80013c8:	4a0f      	ldr	r2, [pc, #60]	; (8001408 <ST7565_Draw_pixel+0xc0>)
 80013ca:	5cd3      	ldrb	r3, [r2, r3]
 80013cc:	b25a      	sxtb	r2, r3
 80013ce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013d2:	4259      	negs	r1, r3
 80013d4:	f003 0307 	and.w	r3, r3, #7
 80013d8:	f001 0107 	and.w	r1, r1, #7
 80013dc:	bf58      	it	pl
 80013de:	424b      	negpl	r3, r1
 80013e0:	b21b      	sxth	r3, r3
 80013e2:	4619      	mov	r1, r3
 80013e4:	2301      	movs	r3, #1
 80013e6:	408b      	lsls	r3, r1
 80013e8:	b25b      	sxtb	r3, r3
 80013ea:	43db      	mvns	r3, r3
 80013ec:	b25b      	sxtb	r3, r3
 80013ee:	4013      	ands	r3, r2
 80013f0:	b25a      	sxtb	r2, r3
 80013f2:	89fb      	ldrh	r3, [r7, #14]
 80013f4:	b2d1      	uxtb	r1, r2
 80013f6:	4a04      	ldr	r2, [pc, #16]	; (8001408 <ST7565_Draw_pixel+0xc0>)
 80013f8:	54d1      	strb	r1, [r2, r3]
 80013fa:	e000      	b.n	80013fe <ST7565_Draw_pixel+0xb6>
    if (x >= SCREEN_WIDTH || x < 0 || y >= SCREEN_HEIGHT || y < 0) return;
 80013fc:	bf00      	nop
    }
}
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	2000044c 	.word	0x2000044c

0800140c <ST7565_Update>:
	* @brief	 ( описание ):  вывод буффера кадра на дисплей
	* @param	( параметры ):	
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Update()
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
uint8_t x, y;
		
	ST7565_Select();
 8001412:	f7ff fe41 	bl	8001098 <ST7565_Select>

  	for (y = 0; y < 8; y++) {
 8001416:	2300      	movs	r3, #0
 8001418:	71bb      	strb	r3, [r7, #6]
 800141a:	e01d      	b.n	8001458 <ST7565_Update+0x4c>
		ST7565_SetX(0);	
 800141c:	2000      	movs	r0, #0
 800141e:	f7ff ff01 	bl	8001224 <ST7565_SetX>
		ST7565_SetY(y);
 8001422:	79bb      	ldrb	r3, [r7, #6]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff ff18 	bl	800125a <ST7565_SetY>
		for (x = 0; x < 128; x++) {
 800142a:	2300      	movs	r3, #0
 800142c:	71fb      	strb	r3, [r7, #7]
 800142e:	e00c      	b.n	800144a <ST7565_Update+0x3e>
			ST7565_w_dats(&ST7565_buffer[x + 128 * y], 1);
 8001430:	79fa      	ldrb	r2, [r7, #7]
 8001432:	79bb      	ldrb	r3, [r7, #6]
 8001434:	01db      	lsls	r3, r3, #7
 8001436:	4413      	add	r3, r2
 8001438:	4a0d      	ldr	r2, [pc, #52]	; (8001470 <ST7565_Update+0x64>)
 800143a:	4413      	add	r3, r2
 800143c:	2101      	movs	r1, #1
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fe56 	bl	80010f0 <ST7565_w_dats>
		for (x = 0; x < 128; x++) {
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	3301      	adds	r3, #1
 8001448:	71fb      	strb	r3, [r7, #7]
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	2b00      	cmp	r3, #0
 8001450:	daee      	bge.n	8001430 <ST7565_Update+0x24>
  	for (y = 0; y < 8; y++) {
 8001452:	79bb      	ldrb	r3, [r7, #6]
 8001454:	3301      	adds	r3, #1
 8001456:	71bb      	strb	r3, [r7, #6]
 8001458:	79bb      	ldrb	r3, [r7, #6]
 800145a:	2b07      	cmp	r3, #7
 800145c:	d9de      	bls.n	800141c <ST7565_Update+0x10>
		}
	}
	
	ST7565_Unselect();
 800145e:	f7ff fe27 	bl	80010b0 <ST7565_Unselect>
	HAL_Delay(100);
 8001462:	2064      	movs	r0, #100	; 0x64
 8001464:	f005 fd18 	bl	8006e98 <HAL_Delay>
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	2000044c 	.word	0x2000044c

08001474 <ST7565_DrawChar>:
	* @brief	 ( описание ):  функция записывает 1 символ в буфер кадра
	* @param	( параметры ):	координаты X(0 - 127)  Y(0 - 63), символ, шрифт, множитель, цвет 1 или 0
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawChar(int16_t x, int16_t y, unsigned char ch, FontDef_t* Font, uint8_t multiplier, uint8_t color)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b088      	sub	sp, #32
 8001478:	af00      	add	r7, sp, #0
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	4603      	mov	r3, r0
 800147e:	81fb      	strh	r3, [r7, #14]
 8001480:	460b      	mov	r3, r1
 8001482:	81bb      	strh	r3, [r7, #12]
 8001484:	4613      	mov	r3, r2
 8001486:	72fb      	strb	r3, [r7, #11]
uint16_t i, j;
uint16_t b;
int16_t X = x, Y = y;
 8001488:	89fb      	ldrh	r3, [r7, #14]
 800148a:	833b      	strh	r3, [r7, #24]
 800148c:	89bb      	ldrh	r3, [r7, #12]
 800148e:	82fb      	strh	r3, [r7, #22]
int16_t xx, yy;
	
	if (multiplier < 1) multiplier = 1;
 8001490:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001494:	2b00      	cmp	r3, #0
 8001496:	d102      	bne.n	800149e <ST7565_DrawChar+0x2a>
 8001498:	2301      	movs	r3, #1
 800149a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	
	// Check available space in LCD
	if (SCREEN_WIDTH >= ( x + Font->FontWidth) || SCREEN_HEIGHT >= ( y + Font->FontHeight)) {
 800149e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	7812      	ldrb	r2, [r2, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	2b80      	cmp	r3, #128	; 0x80
 80014aa:	dd07      	ble.n	80014bc <ST7565_DrawChar+0x48>
 80014ac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	7852      	ldrb	r2, [r2, #1]
 80014b4:	4413      	add	r3, r2
 80014b6:	2b40      	cmp	r3, #64	; 0x40
 80014b8:	f300 8154 	bgt.w	8001764 <ST7565_DrawChar+0x2f0>
		// Go through font
		for (i = 0; i < Font->FontHeight; i++) {
 80014bc:	2300      	movs	r3, #0
 80014be:	83fb      	strh	r3, [r7, #30]
 80014c0:	e149      	b.n	8001756 <ST7565_DrawChar+0x2e2>
			if (ch < 127) {
 80014c2:	7afb      	ldrb	r3, [r7, #11]
 80014c4:	2b7e      	cmp	r3, #126	; 0x7e
 80014c6:	d80f      	bhi.n	80014e8 <ST7565_DrawChar+0x74>
				b = Font->data[(ch - 32) * Font->FontHeight + i];
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80014ce:	7afb      	ldrb	r3, [r7, #11]
 80014d0:	3b20      	subs	r3, #32
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	7849      	ldrb	r1, [r1, #1]
 80014d6:	fb03 f101 	mul.w	r1, r3, r1
 80014da:	8bfb      	ldrh	r3, [r7, #30]
 80014dc:	440b      	add	r3, r1
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	4413      	add	r3, r2
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	837b      	strh	r3, [r7, #26]
 80014e6:	e0af      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch > 191) {
 80014e8:	7afb      	ldrb	r3, [r7, #11]
 80014ea:	2bbf      	cmp	r3, #191	; 0xbf
 80014ec:	d90f      	bls.n	800150e <ST7565_DrawChar+0x9a>
				// +96 это так как латинские символы и знаки в шрифтах занимают 96 позиций
				// и если в шрифте который содержит сперва латиницу и спец символы и потом 
				// только кирилицу то нужно добавлять 95 если шрифт 
				// содержит только кирилицу то +96 не нужно
				b = Font->data[((ch - 192) + 96) * Font->FontHeight + i];
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80014f4:	7afb      	ldrb	r3, [r7, #11]
 80014f6:	3b60      	subs	r3, #96	; 0x60
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	7849      	ldrb	r1, [r1, #1]
 80014fc:	fb03 f101 	mul.w	r1, r3, r1
 8001500:	8bfb      	ldrh	r3, [r7, #30]
 8001502:	440b      	add	r3, r1
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	4413      	add	r3, r2
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	837b      	strh	r3, [r7, #26]
 800150c:	e09c      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 168) {	// 168 символ по ASCII - Ё
 800150e:	7afb      	ldrb	r3, [r7, #11]
 8001510:	2ba8      	cmp	r3, #168	; 0xa8
 8001512:	d111      	bne.n	8001538 <ST7565_DrawChar+0xc4>
				// 160 эллемент ( символ Ё ) 
				b = Font->data[160 * Font->FontHeight + i];
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f8d3 2002 	ldr.w	r2, [r3, #2]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	785b      	ldrb	r3, [r3, #1]
 800151e:	4619      	mov	r1, r3
 8001520:	460b      	mov	r3, r1
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	440b      	add	r3, r1
 8001526:	015b      	lsls	r3, r3, #5
 8001528:	4619      	mov	r1, r3
 800152a:	8bfb      	ldrh	r3, [r7, #30]
 800152c:	440b      	add	r3, r1
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4413      	add	r3, r2
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	837b      	strh	r3, [r7, #26]
 8001536:	e087      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 184) {	// 184 символ по ASCII - ё
 8001538:	7afb      	ldrb	r3, [r7, #11]
 800153a:	2bb8      	cmp	r3, #184	; 0xb8
 800153c:	d111      	bne.n	8001562 <ST7565_DrawChar+0xee>
				// 161 эллемент  ( символ ё ) 
				b = Font->data[161 * Font->FontHeight + i];
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f8d3 1002 	ldr.w	r1, [r3, #2]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	785b      	ldrb	r3, [r3, #1]
 8001548:	461a      	mov	r2, r3
 800154a:	4613      	mov	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	015b      	lsls	r3, r3, #5
 8001552:	441a      	add	r2, r3
 8001554:	8bfb      	ldrh	r3, [r7, #30]
 8001556:	4413      	add	r3, r2
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	440b      	add	r3, r1
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	837b      	strh	r3, [r7, #26]
 8001560:	e072      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 170) {	// 168 символ по ASCII - Є
 8001562:	7afb      	ldrb	r3, [r7, #11]
 8001564:	2baa      	cmp	r3, #170	; 0xaa
 8001566:	d10f      	bne.n	8001588 <ST7565_DrawChar+0x114>
				// 162 эллемент ( символ Є )
				b = Font->data[162 * Font->FontHeight + i];
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f8d3 2002 	ldr.w	r2, [r3, #2]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	785b      	ldrb	r3, [r3, #1]
 8001572:	4619      	mov	r1, r3
 8001574:	23a2      	movs	r3, #162	; 0xa2
 8001576:	fb03 f101 	mul.w	r1, r3, r1
 800157a:	8bfb      	ldrh	r3, [r7, #30]
 800157c:	440b      	add	r3, r1
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	4413      	add	r3, r2
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	837b      	strh	r3, [r7, #26]
 8001586:	e05f      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 175) {	// 184 символ по ASCII - Ї
 8001588:	7afb      	ldrb	r3, [r7, #11]
 800158a:	2baf      	cmp	r3, #175	; 0xaf
 800158c:	d10f      	bne.n	80015ae <ST7565_DrawChar+0x13a>
				// 163 эллемент  ( символ Ї )
				b = Font->data[163 * Font->FontHeight + i];
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	785b      	ldrb	r3, [r3, #1]
 8001598:	4619      	mov	r1, r3
 800159a:	23a3      	movs	r3, #163	; 0xa3
 800159c:	fb03 f101 	mul.w	r1, r3, r1
 80015a0:	8bfb      	ldrh	r3, [r7, #30]
 80015a2:	440b      	add	r3, r1
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	4413      	add	r3, r2
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	837b      	strh	r3, [r7, #26]
 80015ac:	e04c      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 178) {	// 168 символ по ASCII - І
 80015ae:	7afb      	ldrb	r3, [r7, #11]
 80015b0:	2bb2      	cmp	r3, #178	; 0xb2
 80015b2:	d10f      	bne.n	80015d4 <ST7565_DrawChar+0x160>
				// 164 эллемент ( символ І )
				b = Font->data[164 * Font->FontHeight + i];
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	785b      	ldrb	r3, [r3, #1]
 80015be:	4619      	mov	r1, r3
 80015c0:	23a4      	movs	r3, #164	; 0xa4
 80015c2:	fb03 f101 	mul.w	r1, r3, r1
 80015c6:	8bfb      	ldrh	r3, [r7, #30]
 80015c8:	440b      	add	r3, r1
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	4413      	add	r3, r2
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	837b      	strh	r3, [r7, #26]
 80015d2:	e039      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			}
			else if (ch == 179) {	// 184 символ по ASCII - і
 80015d4:	7afb      	ldrb	r3, [r7, #11]
 80015d6:	2bb3      	cmp	r3, #179	; 0xb3
 80015d8:	d111      	bne.n	80015fe <ST7565_DrawChar+0x18a>
				// 165 эллемент  ( символ і )
				b = Font->data[165 * Font->FontHeight + i];
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	785b      	ldrb	r3, [r3, #1]
 80015e4:	4619      	mov	r1, r3
 80015e6:	460b      	mov	r3, r1
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	440b      	add	r3, r1
 80015ec:	0159      	lsls	r1, r3, #5
 80015ee:	4419      	add	r1, r3
 80015f0:	8bfb      	ldrh	r3, [r7, #30]
 80015f2:	440b      	add	r3, r1
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	4413      	add	r3, r2
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	837b      	strh	r3, [r7, #26]
 80015fc:	e024      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 186) {	// 184 символ по ASCII - є
 80015fe:	7afb      	ldrb	r3, [r7, #11]
 8001600:	2bba      	cmp	r3, #186	; 0xba
 8001602:	d10f      	bne.n	8001624 <ST7565_DrawChar+0x1b0>
				// 166 эллемент  ( символ є )
				b = Font->data[166 * Font->FontHeight + i];
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f8d3 2002 	ldr.w	r2, [r3, #2]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	785b      	ldrb	r3, [r3, #1]
 800160e:	4619      	mov	r1, r3
 8001610:	23a6      	movs	r3, #166	; 0xa6
 8001612:	fb03 f101 	mul.w	r1, r3, r1
 8001616:	8bfb      	ldrh	r3, [r7, #30]
 8001618:	440b      	add	r3, r1
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	4413      	add	r3, r2
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	837b      	strh	r3, [r7, #26]
 8001622:	e011      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 191) {	// 168 символ по ASCII - ї
 8001624:	7afb      	ldrb	r3, [r7, #11]
 8001626:	2bbf      	cmp	r3, #191	; 0xbf
 8001628:	d10e      	bne.n	8001648 <ST7565_DrawChar+0x1d4>
				// 167 эллемент ( символ ї )
				b = Font->data[167 * Font->FontHeight + i];
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	785b      	ldrb	r3, [r3, #1]
 8001634:	4619      	mov	r1, r3
 8001636:	23a7      	movs	r3, #167	; 0xa7
 8001638:	fb03 f101 	mul.w	r1, r3, r1
 800163c:	8bfb      	ldrh	r3, [r7, #30]
 800163e:	440b      	add	r3, r1
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4413      	add	r3, r2
 8001644:	881b      	ldrh	r3, [r3, #0]
 8001646:	837b      	strh	r3, [r7, #26]
			}
			//-----------------------------------------------------------------------------
			
			for (j = 0; j < Font->FontWidth; j++) {
 8001648:	2300      	movs	r3, #0
 800164a:	83bb      	strh	r3, [r7, #28]
 800164c:	e071      	b.n	8001732 <ST7565_DrawChar+0x2be>
				if ((b << j) & 0x8000) {
 800164e:	8b7a      	ldrh	r2, [r7, #26]
 8001650:	8bbb      	ldrh	r3, [r7, #28]
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d02d      	beq.n	80016ba <ST7565_DrawChar+0x246>
					for (yy = 0; yy < multiplier; yy++){
 800165e:	2300      	movs	r3, #0
 8001660:	827b      	strh	r3, [r7, #18]
 8001662:	e023      	b.n	80016ac <ST7565_DrawChar+0x238>
						for (xx = 0; xx < multiplier; xx++){
 8001664:	2300      	movs	r3, #0
 8001666:	82bb      	strh	r3, [r7, #20]
 8001668:	e014      	b.n	8001694 <ST7565_DrawChar+0x220>
							ST7565_Draw_pixel(X + xx, Y + yy, color);
 800166a:	8b3a      	ldrh	r2, [r7, #24]
 800166c:	8abb      	ldrh	r3, [r7, #20]
 800166e:	4413      	add	r3, r2
 8001670:	b29b      	uxth	r3, r3
 8001672:	b218      	sxth	r0, r3
 8001674:	8afa      	ldrh	r2, [r7, #22]
 8001676:	8a7b      	ldrh	r3, [r7, #18]
 8001678:	4413      	add	r3, r2
 800167a:	b29b      	uxth	r3, r3
 800167c:	b21b      	sxth	r3, r3
 800167e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001682:	4619      	mov	r1, r3
 8001684:	f7ff fe60 	bl	8001348 <ST7565_Draw_pixel>
						for (xx = 0; xx < multiplier; xx++){
 8001688:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800168c:	b29b      	uxth	r3, r3
 800168e:	3301      	adds	r3, #1
 8001690:	b29b      	uxth	r3, r3
 8001692:	82bb      	strh	r3, [r7, #20]
 8001694:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001698:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800169c:	429a      	cmp	r2, r3
 800169e:	dbe4      	blt.n	800166a <ST7565_DrawChar+0x1f6>
					for (yy = 0; yy < multiplier; yy++){
 80016a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	3301      	adds	r3, #1
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	827b      	strh	r3, [r7, #18]
 80016ac:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80016b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80016b4:	429a      	cmp	r2, r3
 80016b6:	dbd5      	blt.n	8001664 <ST7565_DrawChar+0x1f0>
 80016b8:	e031      	b.n	800171e <ST7565_DrawChar+0x2aa>
						}
					}
				} else {// если фон очищать то оставляем если чтоб фон оставался старый то коментируем эту часть -------------
					for (yy = 0; yy < multiplier; yy++){
 80016ba:	2300      	movs	r3, #0
 80016bc:	827b      	strh	r3, [r7, #18]
 80016be:	e028      	b.n	8001712 <ST7565_DrawChar+0x29e>
						for (xx = 0; xx < multiplier; xx++){
 80016c0:	2300      	movs	r3, #0
 80016c2:	82bb      	strh	r3, [r7, #20]
 80016c4:	e019      	b.n	80016fa <ST7565_DrawChar+0x286>
							ST7565_Draw_pixel(X + xx, Y + yy, !color);
 80016c6:	8b3a      	ldrh	r2, [r7, #24]
 80016c8:	8abb      	ldrh	r3, [r7, #20]
 80016ca:	4413      	add	r3, r2
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	b218      	sxth	r0, r3
 80016d0:	8afa      	ldrh	r2, [r7, #22]
 80016d2:	8a7b      	ldrh	r3, [r7, #18]
 80016d4:	4413      	add	r3, r2
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	b219      	sxth	r1, r3
 80016da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80016de:	2b00      	cmp	r3, #0
 80016e0:	bf0c      	ite	eq
 80016e2:	2301      	moveq	r3, #1
 80016e4:	2300      	movne	r3, #0
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	461a      	mov	r2, r3
 80016ea:	f7ff fe2d 	bl	8001348 <ST7565_Draw_pixel>
						for (xx = 0; xx < multiplier; xx++){
 80016ee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	3301      	adds	r3, #1
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	82bb      	strh	r3, [r7, #20]
 80016fa:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80016fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001702:	429a      	cmp	r2, r3
 8001704:	dbdf      	blt.n	80016c6 <ST7565_DrawChar+0x252>
					for (yy = 0; yy < multiplier; yy++){
 8001706:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800170a:	b29b      	uxth	r3, r3
 800170c:	3301      	adds	r3, #1
 800170e:	b29b      	uxth	r3, r3
 8001710:	827b      	strh	r3, [r7, #18]
 8001712:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001716:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800171a:	429a      	cmp	r2, r3
 800171c:	dbd0      	blt.n	80016c0 <ST7565_DrawChar+0x24c>
						}
					}
				}
				//----------------------------------------------------------------------------------------------------
				X += multiplier;
 800171e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001722:	b29a      	uxth	r2, r3
 8001724:	8b3b      	ldrh	r3, [r7, #24]
 8001726:	4413      	add	r3, r2
 8001728:	b29b      	uxth	r3, r3
 800172a:	833b      	strh	r3, [r7, #24]
			for (j = 0; j < Font->FontWidth; j++) {
 800172c:	8bbb      	ldrh	r3, [r7, #28]
 800172e:	3301      	adds	r3, #1
 8001730:	83bb      	strh	r3, [r7, #28]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	b29b      	uxth	r3, r3
 8001738:	8bba      	ldrh	r2, [r7, #28]
 800173a:	429a      	cmp	r2, r3
 800173c:	d387      	bcc.n	800164e <ST7565_DrawChar+0x1da>
			}
			X = x;
 800173e:	89fb      	ldrh	r3, [r7, #14]
 8001740:	833b      	strh	r3, [r7, #24]
			Y += multiplier;
 8001742:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001746:	b29a      	uxth	r2, r3
 8001748:	8afb      	ldrh	r3, [r7, #22]
 800174a:	4413      	add	r3, r2
 800174c:	b29b      	uxth	r3, r3
 800174e:	82fb      	strh	r3, [r7, #22]
		for (i = 0; i < Font->FontHeight; i++) {
 8001750:	8bfb      	ldrh	r3, [r7, #30]
 8001752:	3301      	adds	r3, #1
 8001754:	83fb      	strh	r3, [r7, #30]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	785b      	ldrb	r3, [r3, #1]
 800175a:	b29b      	uxth	r3, r3
 800175c:	8bfa      	ldrh	r2, [r7, #30]
 800175e:	429a      	cmp	r2, r3
 8001760:	f4ff aeaf 	bcc.w	80014c2 <ST7565_DrawChar+0x4e>
		}
		
	}
}
 8001764:	bf00      	nop
 8001766:	3720      	adds	r7, #32
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <ST7565_Print>:
 * @brief	 ( описание ):  функция записывает строку в буфер кадра ( поддерживает кириллицу ( в том числе и Укр. язык) и латиницу
 * @param	( параметры ):	координаты X(0 - 127)  Y(0 - 63), символ, шрифт, множитель, цвет 1 или 0
 * @return  ( возвращает ):
*******************************************************************************/
void ST7565_Print(int16_t x, int16_t y, char *str, FontDef_t *Font, uint8_t multiplier, uint8_t color)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af02      	add	r7, sp, #8
 8001772:	60ba      	str	r2, [r7, #8]
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	4603      	mov	r3, r0
 8001778:	81fb      	strh	r3, [r7, #14]
 800177a:	460b      	mov	r3, r1
 800177c:	81bb      	strh	r3, [r7, #12]
unsigned char buff_char;
uint16_t len = strlen(str);
 800177e:	68b8      	ldr	r0, [r7, #8]
 8001780:	f7fe fd26 	bl	80001d0 <strlen>
 8001784:	4603      	mov	r3, r0
 8001786:	82bb      	strh	r3, [r7, #20]

	if (multiplier < 1) multiplier = 1;
 8001788:	f897 3020 	ldrb.w	r3, [r7, #32]
 800178c:	2b00      	cmp	r3, #0
 800178e:	f040 809c 	bne.w	80018ca <ST7565_Print+0x15e>
 8001792:	2301      	movs	r3, #1
 8001794:	f887 3020 	strb.w	r3, [r7, #32]
	
	while (len--) {
 8001798:	e097      	b.n	80018ca <ST7565_Print+0x15e>
		//---------------------------------------------------------------------
		// проверка на кириллицу UTF-8, если латиница то пропускаем if
		// Расширенные символы ASCII Win-1251 кириллица (код символа 128-255)
		// проверяем первый байт из двух ( так как UTF-8 ето два байта )
		// если он больше либо равен 0xC0 ( первый байт в кириллеце будет равен 0xD0 либо 0xD1 именно в алфавите )
		if ( (uint8_t)*str >= 0xC0 ) {	// код 0xC0 соответствует символу кириллица 'A' по ASCII Win-1251
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2bbf      	cmp	r3, #191	; 0xbf
 80017a0:	d974      	bls.n	800188c <ST7565_Print+0x120>
			// проверяем какой именно байт первый 0xD0 либо 0xD1
			switch ((uint8_t)*str) {
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2bd0      	cmp	r3, #208	; 0xd0
 80017a8:	d002      	beq.n	80017b0 <ST7565_Print+0x44>
 80017aa:	2bd1      	cmp	r3, #209	; 0xd1
 80017ac:	d02c      	beq.n	8001808 <ST7565_Print+0x9c>
 80017ae:	e05b      	b.n	8001868 <ST7565_Print+0xfc>
				case 0xD0:
				//{
					// увеличиваем массив так как нам нужен второй байт
					str++;
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	3301      	adds	r3, #1
 80017b4:	60bb      	str	r3, [r7, #8]
					// проверяем второй байт там сам символ
					if ((uint8_t)*str == 0x81) { buff_char = 0xA8; break; }		// байт символа Ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b81      	cmp	r3, #129	; 0x81
 80017bc:	d102      	bne.n	80017c4 <ST7565_Print+0x58>
 80017be:	23a8      	movs	r3, #168	; 0xa8
 80017c0:	75fb      	strb	r3, [r7, #23]
 80017c2:	e051      	b.n	8001868 <ST7565_Print+0xfc>
					else if ((uint8_t)*str >= 0x90 && (uint8_t)*str <= 0xBF) { buff_char = (*str) + 0x30; }	// байт символов А...Я а...п  делаем здвиг на +48
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b8f      	cmp	r3, #143	; 0x8f
 80017ca:	d908      	bls.n	80017de <ST7565_Print+0x72>
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2bbf      	cmp	r3, #191	; 0xbf
 80017d2:	d804      	bhi.n	80017de <ST7565_Print+0x72>
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	3330      	adds	r3, #48	; 0x30
 80017da:	75fb      	strb	r3, [r7, #23]
					else if ((uint8_t)*str == 0x84) { buff_char = 0xAA; break; }		// байт символа Є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x86) { buff_char = 0xB2; break; }		// байт символа І ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x87) { buff_char = 0xAF; break; }		// байт символа Ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
				break;
 80017dc:	e041      	b.n	8001862 <ST7565_Print+0xf6>
					else if ((uint8_t)*str == 0x84) { buff_char = 0xAA; break; }		// байт символа Є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b84      	cmp	r3, #132	; 0x84
 80017e4:	d102      	bne.n	80017ec <ST7565_Print+0x80>
 80017e6:	23aa      	movs	r3, #170	; 0xaa
 80017e8:	75fb      	strb	r3, [r7, #23]
 80017ea:	e03d      	b.n	8001868 <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x86) { buff_char = 0xB2; break; }		// байт символа І ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b86      	cmp	r3, #134	; 0x86
 80017f2:	d102      	bne.n	80017fa <ST7565_Print+0x8e>
 80017f4:	23b2      	movs	r3, #178	; 0xb2
 80017f6:	75fb      	strb	r3, [r7, #23]
 80017f8:	e036      	b.n	8001868 <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x87) { buff_char = 0xAF; break; }		// байт символа Ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b87      	cmp	r3, #135	; 0x87
 8001800:	d12f      	bne.n	8001862 <ST7565_Print+0xf6>
 8001802:	23af      	movs	r3, #175	; 0xaf
 8001804:	75fb      	strb	r3, [r7, #23]
 8001806:	e02f      	b.n	8001868 <ST7565_Print+0xfc>
				//}
				case 0xD1:
				//{
					// увеличиваем массив так как нам нужен второй байт
					str++;
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	3301      	adds	r3, #1
 800180c:	60bb      	str	r3, [r7, #8]
					// проверяем второй байт там сам символ
					if ((uint8_t)*str == 0x91) { buff_char = 0xB8; break; }		// байт символа ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b91      	cmp	r3, #145	; 0x91
 8001814:	d102      	bne.n	800181c <ST7565_Print+0xb0>
 8001816:	23b8      	movs	r3, #184	; 0xb8
 8001818:	75fb      	strb	r3, [r7, #23]
 800181a:	e025      	b.n	8001868 <ST7565_Print+0xfc>
					else if ((uint8_t)*str >= 0x80 && (uint8_t)*str <= 0x8F) { buff_char = (*str) + 0x70; }	// байт символов п...я	елаем здвиг на +112
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	b25b      	sxtb	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	da08      	bge.n	8001838 <ST7565_Print+0xcc>
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b8f      	cmp	r3, #143	; 0x8f
 800182c:	d804      	bhi.n	8001838 <ST7565_Print+0xcc>
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	3370      	adds	r3, #112	; 0x70
 8001834:	75fb      	strb	r3, [r7, #23]
					else if ((uint8_t)*str == 0x94) { buff_char = 0xBA; break; }		// байт символа є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x96) { buff_char = 0xB3; break; }		// байт символа і ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x97) { buff_char = 0xBF; break; }		// байт символа ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
				break;
 8001836:	e016      	b.n	8001866 <ST7565_Print+0xfa>
					else if ((uint8_t)*str == 0x94) { buff_char = 0xBA; break; }		// байт символа є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b94      	cmp	r3, #148	; 0x94
 800183e:	d102      	bne.n	8001846 <ST7565_Print+0xda>
 8001840:	23ba      	movs	r3, #186	; 0xba
 8001842:	75fb      	strb	r3, [r7, #23]
 8001844:	e010      	b.n	8001868 <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x96) { buff_char = 0xB3; break; }		// байт символа і ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b96      	cmp	r3, #150	; 0x96
 800184c:	d102      	bne.n	8001854 <ST7565_Print+0xe8>
 800184e:	23b3      	movs	r3, #179	; 0xb3
 8001850:	75fb      	strb	r3, [r7, #23]
 8001852:	e009      	b.n	8001868 <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x97) { buff_char = 0xBF; break; }		// байт символа ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b97      	cmp	r3, #151	; 0x97
 800185a:	d104      	bne.n	8001866 <ST7565_Print+0xfa>
 800185c:	23bf      	movs	r3, #191	; 0xbf
 800185e:	75fb      	strb	r3, [r7, #23]
 8001860:	e002      	b.n	8001868 <ST7565_Print+0xfc>
				break;
 8001862:	bf00      	nop
 8001864:	e000      	b.n	8001868 <ST7565_Print+0xfc>
				break;
 8001866:	bf00      	nop
				//}
			}
			// уменьшаем еще переменную так как израсходывали 2 байта для кириллицы
			len--;
 8001868:	8abb      	ldrh	r3, [r7, #20]
 800186a:	3b01      	subs	r3, #1
 800186c:	82bb      	strh	r3, [r7, #20]
			ST7565_DrawChar(x, y, buff_char, Font, multiplier, color);
 800186e:	7dfa      	ldrb	r2, [r7, #23]
 8001870:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001874:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001878:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800187c:	9301      	str	r3, [sp, #4]
 800187e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f7ff fdf5 	bl	8001474 <ST7565_DrawChar>
 800188a:	e00e      	b.n	80018aa <ST7565_Print+0x13e>
		} else {
			ST7565_DrawChar(x, y, *str, Font, multiplier, color);
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	781a      	ldrb	r2, [r3, #0]
 8001890:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001894:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001898:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800189c:	9301      	str	r3, [sp, #4]
 800189e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f7ff fde5 	bl	8001474 <ST7565_DrawChar>
		}
		
		x += (Font->FontWidth * multiplier);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	fb12 f303 	smulbb	r3, r2, r3
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	89fb      	ldrh	r3, [r7, #14]
 80018be:	4413      	add	r3, r2
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	81fb      	strh	r3, [r7, #14]
		str++;
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	3301      	adds	r3, #1
 80018c8:	60bb      	str	r3, [r7, #8]
	while (len--) {
 80018ca:	8abb      	ldrh	r3, [r7, #20]
 80018cc:	1e5a      	subs	r2, r3, #1
 80018ce:	82ba      	strh	r2, [r7, #20]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f47f af62 	bne.w	800179a <ST7565_Print+0x2e>
	}
}
 80018d6:	bf00      	nop
 80018d8:	bf00      	nop
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <ST7565_DrawLine>:
	* @param	( параметры ):	координаты начальной точки и конечной и цвет 0 или 1
								X(0 - 127)  Y(0 - 63)
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint8_t c)
{
 80018e0:	b590      	push	{r4, r7, lr}
 80018e2:	b087      	sub	sp, #28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4604      	mov	r4, r0
 80018e8:	4608      	mov	r0, r1
 80018ea:	4611      	mov	r1, r2
 80018ec:	461a      	mov	r2, r3
 80018ee:	4623      	mov	r3, r4
 80018f0:	80fb      	strh	r3, [r7, #6]
 80018f2:	4603      	mov	r3, r0
 80018f4:	80bb      	strh	r3, [r7, #4]
 80018f6:	460b      	mov	r3, r1
 80018f8:	807b      	strh	r3, [r7, #2]
 80018fa:	4613      	mov	r3, r2
 80018fc:	803b      	strh	r3, [r7, #0]
int16_t dx, dy, sx, sy, err, e2, i, tmp;
	
	/* Check for overflow */
	if (x0 >= SCREEN_WIDTH)  x0 = SCREEN_WIDTH  - 1;
 80018fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001902:	2b7f      	cmp	r3, #127	; 0x7f
 8001904:	dd01      	ble.n	800190a <ST7565_DrawLine+0x2a>
 8001906:	237f      	movs	r3, #127	; 0x7f
 8001908:	80fb      	strh	r3, [r7, #6]
	if (x1 >= SCREEN_WIDTH)  x1 = SCREEN_WIDTH  - 1;
 800190a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800190e:	2b7f      	cmp	r3, #127	; 0x7f
 8001910:	dd01      	ble.n	8001916 <ST7565_DrawLine+0x36>
 8001912:	237f      	movs	r3, #127	; 0x7f
 8001914:	807b      	strh	r3, [r7, #2]
	if (y0 >= SCREEN_HEIGHT) y0 = SCREEN_HEIGHT - 1;
 8001916:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800191a:	2b3f      	cmp	r3, #63	; 0x3f
 800191c:	dd01      	ble.n	8001922 <ST7565_DrawLine+0x42>
 800191e:	233f      	movs	r3, #63	; 0x3f
 8001920:	80bb      	strh	r3, [r7, #4]
	if (y1 >= SCREEN_HEIGHT) y1 = SCREEN_HEIGHT - 1;
 8001922:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001926:	2b3f      	cmp	r3, #63	; 0x3f
 8001928:	dd01      	ble.n	800192e <ST7565_DrawLine+0x4e>
 800192a:	233f      	movs	r3, #63	; 0x3f
 800192c:	803b      	strh	r3, [r7, #0]
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 800192e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001932:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001936:	429a      	cmp	r2, r3
 8001938:	da05      	bge.n	8001946 <ST7565_DrawLine+0x66>
 800193a:	887a      	ldrh	r2, [r7, #2]
 800193c:	88fb      	ldrh	r3, [r7, #6]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	b29b      	uxth	r3, r3
 8001942:	b21b      	sxth	r3, r3
 8001944:	e004      	b.n	8001950 <ST7565_DrawLine+0x70>
 8001946:	88fa      	ldrh	r2, [r7, #6]
 8001948:	887b      	ldrh	r3, [r7, #2]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	b29b      	uxth	r3, r3
 800194e:	b21b      	sxth	r3, r3
 8001950:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8001952:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001956:	f9b7 3000 	ldrsh.w	r3, [r7]
 800195a:	429a      	cmp	r2, r3
 800195c:	da05      	bge.n	800196a <ST7565_DrawLine+0x8a>
 800195e:	883a      	ldrh	r2, [r7, #0]
 8001960:	88bb      	ldrh	r3, [r7, #4]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	b29b      	uxth	r3, r3
 8001966:	b21b      	sxth	r3, r3
 8001968:	e004      	b.n	8001974 <ST7565_DrawLine+0x94>
 800196a:	88ba      	ldrh	r2, [r7, #4]
 800196c:	883b      	ldrh	r3, [r7, #0]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	b29b      	uxth	r3, r3
 8001972:	b21b      	sxth	r3, r3
 8001974:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8001976:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800197a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800197e:	429a      	cmp	r2, r3
 8001980:	da01      	bge.n	8001986 <ST7565_DrawLine+0xa6>
 8001982:	2301      	movs	r3, #1
 8001984:	e001      	b.n	800198a <ST7565_DrawLine+0xaa>
 8001986:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800198a:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 800198c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001990:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001994:	429a      	cmp	r2, r3
 8001996:	da01      	bge.n	800199c <ST7565_DrawLine+0xbc>
 8001998:	2301      	movs	r3, #1
 800199a:	e001      	b.n	80019a0 <ST7565_DrawLine+0xc0>
 800199c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019a0:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 80019a2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80019a6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	dd06      	ble.n	80019bc <ST7565_DrawLine+0xdc>
 80019ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80019b2:	0fda      	lsrs	r2, r3, #31
 80019b4:	4413      	add	r3, r2
 80019b6:	105b      	asrs	r3, r3, #1
 80019b8:	b21b      	sxth	r3, r3
 80019ba:	e006      	b.n	80019ca <ST7565_DrawLine+0xea>
 80019bc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80019c0:	0fda      	lsrs	r2, r3, #31
 80019c2:	4413      	add	r3, r2
 80019c4:	105b      	asrs	r3, r3, #1
 80019c6:	425b      	negs	r3, r3
 80019c8:	b21b      	sxth	r3, r3
 80019ca:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 80019cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d130      	bne.n	8001a36 <ST7565_DrawLine+0x156>
		if (y1 < y0) {
 80019d4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80019d8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80019dc:	429a      	cmp	r2, r3
 80019de:	da05      	bge.n	80019ec <ST7565_DrawLine+0x10c>
			tmp = y1;
 80019e0:	883b      	ldrh	r3, [r7, #0]
 80019e2:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80019e4:	88bb      	ldrh	r3, [r7, #4]
 80019e6:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80019e8:	893b      	ldrh	r3, [r7, #8]
 80019ea:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 80019ec:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80019f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	da05      	bge.n	8001a04 <ST7565_DrawLine+0x124>
			tmp = x1;
 80019f8:	887b      	ldrh	r3, [r7, #2]
 80019fa:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80019fc:	88fb      	ldrh	r3, [r7, #6]
 80019fe:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001a00:	893b      	ldrh	r3, [r7, #8]
 8001a02:	80fb      	strh	r3, [r7, #6]
		}
		
		// Vertical line
		for (i = y0; i <= y1; i++) ST7565_Draw_pixel(x0, i, c);
 8001a04:	88bb      	ldrh	r3, [r7, #4]
 8001a06:	82bb      	strh	r3, [r7, #20]
 8001a08:	e00e      	b.n	8001a28 <ST7565_DrawLine+0x148>
 8001a0a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001a0e:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8001a12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff fc96 	bl	8001348 <ST7565_Draw_pixel>
 8001a1c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	3301      	adds	r3, #1
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	82bb      	strh	r3, [r7, #20]
 8001a28:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001a2c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	ddea      	ble.n	8001a0a <ST7565_DrawLine+0x12a>
		
		return;
 8001a34:	e06e      	b.n	8001b14 <ST7565_DrawLine+0x234>
	}
	
	if (dy == 0) {
 8001a36:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d130      	bne.n	8001aa0 <ST7565_DrawLine+0x1c0>
		if (y1 < y0) {
 8001a3e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001a42:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	da05      	bge.n	8001a56 <ST7565_DrawLine+0x176>
			tmp = y1;
 8001a4a:	883b      	ldrh	r3, [r7, #0]
 8001a4c:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001a4e:	88bb      	ldrh	r3, [r7, #4]
 8001a50:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001a52:	893b      	ldrh	r3, [r7, #8]
 8001a54:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001a56:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001a5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	da05      	bge.n	8001a6e <ST7565_DrawLine+0x18e>
			tmp = x1;
 8001a62:	887b      	ldrh	r3, [r7, #2]
 8001a64:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001a66:	88fb      	ldrh	r3, [r7, #6]
 8001a68:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001a6a:	893b      	ldrh	r3, [r7, #8]
 8001a6c:	80fb      	strh	r3, [r7, #6]
		}
		
		// Horizontal line
		for (i = x0; i <= x1; i++) ST7565_Draw_pixel(i, y0, c);
 8001a6e:	88fb      	ldrh	r3, [r7, #6]
 8001a70:	82bb      	strh	r3, [r7, #20]
 8001a72:	e00e      	b.n	8001a92 <ST7565_DrawLine+0x1b2>
 8001a74:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001a78:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001a7c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fc61 	bl	8001348 <ST7565_Draw_pixel>
 8001a86:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	82bb      	strh	r3, [r7, #20]
 8001a92:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001a96:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	ddea      	ble.n	8001a74 <ST7565_DrawLine+0x194>
		
		return;
 8001a9e:	e039      	b.n	8001b14 <ST7565_DrawLine+0x234>
	}
	
	while (1) {
		ST7565_Draw_pixel(x0, y0, c);
 8001aa0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001aa4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001aa8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fc4b 	bl	8001348 <ST7565_Draw_pixel>
		if (x0 == x1 && y0 == y1) break;
 8001ab2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001ab6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d105      	bne.n	8001aca <ST7565_DrawLine+0x1ea>
 8001abe:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001ac2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d023      	beq.n	8001b12 <ST7565_DrawLine+0x232>

		e2 = err; 
 8001aca:	8afb      	ldrh	r3, [r7, #22]
 8001acc:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8001ace:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001ad2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001ad6:	425b      	negs	r3, r3
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	dd09      	ble.n	8001af0 <ST7565_DrawLine+0x210>
			err -= dy;
 8001adc:	8afa      	ldrh	r2, [r7, #22]
 8001ade:	8a3b      	ldrh	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001ae6:	88fa      	ldrh	r2, [r7, #6]
 8001ae8:	89fb      	ldrh	r3, [r7, #14]
 8001aea:	4413      	add	r3, r2
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8001af0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001af4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	dad1      	bge.n	8001aa0 <ST7565_DrawLine+0x1c0>
			err += dx;
 8001afc:	8afa      	ldrh	r2, [r7, #22]
 8001afe:	8a7b      	ldrh	r3, [r7, #18]
 8001b00:	4413      	add	r3, r2
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001b06:	88ba      	ldrh	r2, [r7, #4]
 8001b08:	89bb      	ldrh	r3, [r7, #12]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	80bb      	strh	r3, [r7, #4]
		ST7565_Draw_pixel(x0, y0, c);
 8001b10:	e7c6      	b.n	8001aa0 <ST7565_DrawLine+0x1c0>
		if (x0 == x1 && y0 == y1) break;
 8001b12:	bf00      	nop
		} 
	}
}
 8001b14:	371c      	adds	r7, #28
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd90      	pop	{r4, r7, pc}

08001b1a <ST7565_DrawRectangle>:
	* @param	( параметры ):	координаты верхнего левого и ширина и высота и цвет
								X(0 - 127)  Y(0 - 63)
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawRectangle(int16_t x, int16_t y, int16_t w, int16_t h, uint8_t c)
{
 8001b1a:	b590      	push	{r4, r7, lr}
 8001b1c:	b085      	sub	sp, #20
 8001b1e:	af02      	add	r7, sp, #8
 8001b20:	4604      	mov	r4, r0
 8001b22:	4608      	mov	r0, r1
 8001b24:	4611      	mov	r1, r2
 8001b26:	461a      	mov	r2, r3
 8001b28:	4623      	mov	r3, r4
 8001b2a:	80fb      	strh	r3, [r7, #6]
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	80bb      	strh	r3, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	807b      	strh	r3, [r7, #2]
 8001b34:	4613      	mov	r3, r2
 8001b36:	803b      	strh	r3, [r7, #0]
	// Check input parameters
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001b38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b3c:	2b7f      	cmp	r3, #127	; 0x7f
 8001b3e:	dc6a      	bgt.n	8001c16 <ST7565_DrawRectangle+0xfc>
 8001b40:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001b44:	2b3f      	cmp	r3, #63	; 0x3f
 8001b46:	dc66      	bgt.n	8001c16 <ST7565_DrawRectangle+0xfc>
	
	// Check width and height
	if ((x + w) >= SCREEN_WIDTH)  w = SCREEN_WIDTH  - x;
 8001b48:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b50:	4413      	add	r3, r2
 8001b52:	2b7f      	cmp	r3, #127	; 0x7f
 8001b54:	dd04      	ble.n	8001b60 <ST7565_DrawRectangle+0x46>
 8001b56:	88fb      	ldrh	r3, [r7, #6]
 8001b58:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	807b      	strh	r3, [r7, #2]
	if ((y + h) >= SCREEN_HEIGHT) h = SCREEN_HEIGHT - y;
 8001b60:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001b64:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001b68:	4413      	add	r3, r2
 8001b6a:	2b3f      	cmp	r3, #63	; 0x3f
 8001b6c:	dd04      	ble.n	8001b78 <ST7565_DrawRectangle+0x5e>
 8001b6e:	88bb      	ldrh	r3, [r7, #4]
 8001b70:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	803b      	strh	r3, [r7, #0]
	
	// Draw 4 lines
	ST7565_DrawLine(x, y, x + w, y, c);         // Top line
 8001b78:	88fa      	ldrh	r2, [r7, #6]
 8001b7a:	887b      	ldrh	r3, [r7, #2]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	b21a      	sxth	r2, r3
 8001b82:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8001b86:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001b8a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001b8e:	7e3b      	ldrb	r3, [r7, #24]
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	4623      	mov	r3, r4
 8001b94:	f7ff fea4 	bl	80018e0 <ST7565_DrawLine>
	ST7565_DrawLine(x, y + h, x + w, y + h, c); // Bottom line
 8001b98:	88ba      	ldrh	r2, [r7, #4]
 8001b9a:	883b      	ldrh	r3, [r7, #0]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	b219      	sxth	r1, r3
 8001ba2:	88fa      	ldrh	r2, [r7, #6]
 8001ba4:	887b      	ldrh	r3, [r7, #2]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	b21c      	sxth	r4, r3
 8001bac:	88ba      	ldrh	r2, [r7, #4]
 8001bae:	883b      	ldrh	r3, [r7, #0]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	b21a      	sxth	r2, r3
 8001bb6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001bba:	7e3b      	ldrb	r3, [r7, #24]
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	4622      	mov	r2, r4
 8001bc2:	f7ff fe8d 	bl	80018e0 <ST7565_DrawLine>
	ST7565_DrawLine(x, y, x, y + h, c);         // Left line
 8001bc6:	88ba      	ldrh	r2, [r7, #4]
 8001bc8:	883b      	ldrh	r3, [r7, #0]
 8001bca:	4413      	add	r3, r2
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	b21c      	sxth	r4, r3
 8001bd0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001bd4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001bd8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001bdc:	7e3b      	ldrb	r3, [r7, #24]
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	4623      	mov	r3, r4
 8001be2:	f7ff fe7d 	bl	80018e0 <ST7565_DrawLine>
	ST7565_DrawLine(x + w, y, x + w, y + h, c); // Right line
 8001be6:	88fa      	ldrh	r2, [r7, #6]
 8001be8:	887b      	ldrh	r3, [r7, #2]
 8001bea:	4413      	add	r3, r2
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	b218      	sxth	r0, r3
 8001bf0:	88fa      	ldrh	r2, [r7, #6]
 8001bf2:	887b      	ldrh	r3, [r7, #2]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	b21c      	sxth	r4, r3
 8001bfa:	88ba      	ldrh	r2, [r7, #4]
 8001bfc:	883b      	ldrh	r3, [r7, #0]
 8001bfe:	4413      	add	r3, r2
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	b21a      	sxth	r2, r3
 8001c04:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001c08:	7e3b      	ldrb	r3, [r7, #24]
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	4622      	mov	r2, r4
 8001c10:	f7ff fe66 	bl	80018e0 <ST7565_DrawLine>
 8001c14:	e000      	b.n	8001c18 <ST7565_DrawRectangle+0xfe>
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001c16:	bf00      	nop
}
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd90      	pop	{r4, r7, pc}

08001c1e <ST7565_DrawFilledRectangle>:
	* @param	( параметры ):	координаты верхнего левого и ширина и высота и цвет
								X(0 - 127)  Y(0 - 63)
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawFilledRectangle(int16_t x, int16_t y, int16_t w, int16_t h, uint8_t c)
{
 8001c1e:	b590      	push	{r4, r7, lr}
 8001c20:	b087      	sub	sp, #28
 8001c22:	af02      	add	r7, sp, #8
 8001c24:	4604      	mov	r4, r0
 8001c26:	4608      	mov	r0, r1
 8001c28:	4611      	mov	r1, r2
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	4623      	mov	r3, r4
 8001c2e:	80fb      	strh	r3, [r7, #6]
 8001c30:	4603      	mov	r3, r0
 8001c32:	80bb      	strh	r3, [r7, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	807b      	strh	r3, [r7, #2]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	803b      	strh	r3, [r7, #0]
uint8_t i;
	
	// Check input parameters
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001c3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c40:	2b7f      	cmp	r3, #127	; 0x7f
 8001c42:	dc41      	bgt.n	8001cc8 <ST7565_DrawFilledRectangle+0xaa>
 8001c44:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c48:	2b3f      	cmp	r3, #63	; 0x3f
 8001c4a:	dc3d      	bgt.n	8001cc8 <ST7565_DrawFilledRectangle+0xaa>
	
	// Check width and height
	if ((x + w) >= SCREEN_WIDTH)  w = SCREEN_WIDTH  - x;
 8001c4c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001c50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001c54:	4413      	add	r3, r2
 8001c56:	2b7f      	cmp	r3, #127	; 0x7f
 8001c58:	dd04      	ble.n	8001c64 <ST7565_DrawFilledRectangle+0x46>
 8001c5a:	88fb      	ldrh	r3, [r7, #6]
 8001c5c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	807b      	strh	r3, [r7, #2]
	if ((y + h) >= SCREEN_HEIGHT) h = SCREEN_HEIGHT - y;
 8001c64:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001c68:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	2b3f      	cmp	r3, #63	; 0x3f
 8001c70:	dd04      	ble.n	8001c7c <ST7565_DrawFilledRectangle+0x5e>
 8001c72:	88bb      	ldrh	r3, [r7, #4]
 8001c74:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	803b      	strh	r3, [r7, #0]
	
	for (i = 0; i <= h; i++) ST7565_DrawLine(x, y + i, x + w, y + i, c);
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	73fb      	strb	r3, [r7, #15]
 8001c80:	e01c      	b.n	8001cbc <ST7565_DrawFilledRectangle+0x9e>
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	88bb      	ldrh	r3, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	b219      	sxth	r1, r3
 8001c8e:	88fa      	ldrh	r2, [r7, #6]
 8001c90:	887b      	ldrh	r3, [r7, #2]
 8001c92:	4413      	add	r3, r2
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	b21c      	sxth	r4, r3
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	88bb      	ldrh	r3, [r7, #4]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	b21a      	sxth	r2, r3
 8001ca4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001ca8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	4622      	mov	r2, r4
 8001cb2:	f7ff fe15 	bl	80018e0 <ST7565_DrawLine>
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	73fb      	strb	r3, [r7, #15]
 8001cbc:	7bfa      	ldrb	r2, [r7, #15]
 8001cbe:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	dddd      	ble.n	8001c82 <ST7565_DrawFilledRectangle+0x64>
 8001cc6:	e000      	b.n	8001cca <ST7565_DrawFilledRectangle+0xac>
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001cc8:	bf00      	nop
}
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd90      	pop	{r4, r7, pc}

08001cd0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001cd4:	f3bf 8f4f 	dsb	sy
}
 8001cd8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <__NVIC_SystemReset+0x24>)
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001ce2:	4904      	ldr	r1, [pc, #16]	; (8001cf4 <__NVIC_SystemReset+0x24>)
 8001ce4:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <__NVIC_SystemReset+0x28>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001cea:	f3bf 8f4f 	dsb	sy
}
 8001cee:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001cf0:	bf00      	nop
 8001cf2:	e7fd      	b.n	8001cf0 <__NVIC_SystemReset+0x20>
 8001cf4:	e000ed00 	.word	0xe000ed00
 8001cf8:	05fa0004 	.word	0x05fa0004

08001cfc <fsErrName>:
/* USER CODE BEGIN 0 */
//------------------------------------------------------------------------------------------
#ifdef SET_FAT_FS
//------------------------------------------------------------------------------------------
static char *fsErrName(int fr)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
	switch (fr) {
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b13      	cmp	r3, #19
 8001d08:	d850      	bhi.n	8001dac <fsErrName+0xb0>
 8001d0a:	a201      	add	r2, pc, #4	; (adr r2, 8001d10 <fsErrName+0x14>)
 8001d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d10:	08001d61 	.word	0x08001d61
 8001d14:	08001d65 	.word	0x08001d65
 8001d18:	08001d69 	.word	0x08001d69
 8001d1c:	08001d6d 	.word	0x08001d6d
 8001d20:	08001d71 	.word	0x08001d71
 8001d24:	08001d75 	.word	0x08001d75
 8001d28:	08001d79 	.word	0x08001d79
 8001d2c:	08001d7d 	.word	0x08001d7d
 8001d30:	08001d7d 	.word	0x08001d7d
 8001d34:	08001d81 	.word	0x08001d81
 8001d38:	08001d85 	.word	0x08001d85
 8001d3c:	08001d89 	.word	0x08001d89
 8001d40:	08001d8d 	.word	0x08001d8d
 8001d44:	08001d91 	.word	0x08001d91
 8001d48:	08001d95 	.word	0x08001d95
 8001d4c:	08001d99 	.word	0x08001d99
 8001d50:	08001d9d 	.word	0x08001d9d
 8001d54:	08001da1 	.word	0x08001da1
 8001d58:	08001da5 	.word	0x08001da5
 8001d5c:	08001da9 	.word	0x08001da9
		case FR_OK:				// (0) Succeeded
			return "Succeeded";
 8001d60:	4b16      	ldr	r3, [pc, #88]	; (8001dbc <fsErrName+0xc0>)
 8001d62:	e024      	b.n	8001dae <fsErrName+0xb2>
		case FR_DISK_ERR://			(1) A hard error occurred in the low level disk I/O layer
			return "Error disk I/O";
 8001d64:	4b16      	ldr	r3, [pc, #88]	; (8001dc0 <fsErrName+0xc4>)
 8001d66:	e022      	b.n	8001dae <fsErrName+0xb2>
		case FR_INT_ERR://			(2) Assertion failed
			return "Assertion failed";
 8001d68:	4b16      	ldr	r3, [pc, #88]	; (8001dc4 <fsErrName+0xc8>)
 8001d6a:	e020      	b.n	8001dae <fsErrName+0xb2>
		case FR_NOT_READY://		(3) The physical drive cannot work
			return "Drive not ready";
 8001d6c:	4b16      	ldr	r3, [pc, #88]	; (8001dc8 <fsErrName+0xcc>)
 8001d6e:	e01e      	b.n	8001dae <fsErrName+0xb2>
		case FR_NO_FILE://			(4) Could not find the file
			return "No file";
 8001d70:	4b16      	ldr	r3, [pc, #88]	; (8001dcc <fsErrName+0xd0>)
 8001d72:	e01c      	b.n	8001dae <fsErrName+0xb2>
		case FR_NO_PATH://			(5) Could not find the path
			return "No path";
 8001d74:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <fsErrName+0xd4>)
 8001d76:	e01a      	b.n	8001dae <fsErrName+0xb2>
		case FR_INVALID_NAME://		(6) The path name format is invalid
			return "Path error";
 8001d78:	4b16      	ldr	r3, [pc, #88]	; (8001dd4 <fsErrName+0xd8>)
 8001d7a:	e018      	b.n	8001dae <fsErrName+0xb2>
		case FR_DENIED://			(7) Access denied due to prohibited access or directory full
		case FR_EXIST://			(8) Access denied due to prohibited access
			return "Access denied";
 8001d7c:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <fsErrName+0xdc>)
 8001d7e:	e016      	b.n	8001dae <fsErrName+0xb2>
		case FR_INVALID_OBJECT://	(9) The file/directory object is invalid
			return "Invalid file/dir";
 8001d80:	4b16      	ldr	r3, [pc, #88]	; (8001ddc <fsErrName+0xe0>)
 8001d82:	e014      	b.n	8001dae <fsErrName+0xb2>
		case FR_WRITE_PROTECTED://	(10) The physical drive is write protected
			return "Write protected";
 8001d84:	4b16      	ldr	r3, [pc, #88]	; (8001de0 <fsErrName+0xe4>)
 8001d86:	e012      	b.n	8001dae <fsErrName+0xb2>
		case FR_INVALID_DRIVE://	(11) The logical drive number is invalid
			return "Invalid drive number";
 8001d88:	4b16      	ldr	r3, [pc, #88]	; (8001de4 <fsErrName+0xe8>)
 8001d8a:	e010      	b.n	8001dae <fsErrName+0xb2>
		case FR_NOT_ENABLED://		(12) The volume has no work area
			return "Volume no area";
 8001d8c:	4b16      	ldr	r3, [pc, #88]	; (8001de8 <fsErrName+0xec>)
 8001d8e:	e00e      	b.n	8001dae <fsErrName+0xb2>
		case FR_NO_FILESYSTEM://	(13) There is no valid FAT volume
			return "Volume has't filesystem";
 8001d90:	4b16      	ldr	r3, [pc, #88]	; (8001dec <fsErrName+0xf0>)
 8001d92:	e00c      	b.n	8001dae <fsErrName+0xb2>
		case FR_MKFS_ABORTED://		(14) The f_mkfs() aborted due to any problem
			return "f_mkfs() aborted";
 8001d94:	4b16      	ldr	r3, [pc, #88]	; (8001df0 <fsErrName+0xf4>)
 8001d96:	e00a      	b.n	8001dae <fsErrName+0xb2>
		case FR_TIMEOUT://			(15) Could not get a grant to access the volume within defined period
			return "Timeout access";
 8001d98:	4b16      	ldr	r3, [pc, #88]	; (8001df4 <fsErrName+0xf8>)
 8001d9a:	e008      	b.n	8001dae <fsErrName+0xb2>
		case FR_LOCKED://			(16) The operation is rejected according to the file sharing policy
			return "File locked";
 8001d9c:	4b16      	ldr	r3, [pc, #88]	; (8001df8 <fsErrName+0xfc>)
 8001d9e:	e006      	b.n	8001dae <fsErrName+0xb2>
		case FR_NOT_ENOUGH_CORE://	(17) LFN working buffer could not be allocated
			return "Allocated buf error";
 8001da0:	4b16      	ldr	r3, [pc, #88]	; (8001dfc <fsErrName+0x100>)
 8001da2:	e004      	b.n	8001dae <fsErrName+0xb2>
		case FR_TOO_MANY_OPEN_FILES://	(18) Number of open files > _FS_LOCK
			return "Open file limit";
 8001da4:	4b16      	ldr	r3, [pc, #88]	; (8001e00 <fsErrName+0x104>)
 8001da6:	e002      	b.n	8001dae <fsErrName+0xb2>
		case FR_INVALID_PARAMETER://	(19) Given parameter is invalid
			return "Invalid parameter";
 8001da8:	4b16      	ldr	r3, [pc, #88]	; (8001e04 <fsErrName+0x108>)
 8001daa:	e000      	b.n	8001dae <fsErrName+0xb2>
	}
	return "Unknown error";
 8001dac:	4b16      	ldr	r3, [pc, #88]	; (8001e08 <fsErrName+0x10c>)
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	08016a00 	.word	0x08016a00
 8001dc0:	08016a0c 	.word	0x08016a0c
 8001dc4:	08016a1c 	.word	0x08016a1c
 8001dc8:	08016a30 	.word	0x08016a30
 8001dcc:	08016a40 	.word	0x08016a40
 8001dd0:	08016a48 	.word	0x08016a48
 8001dd4:	08016a50 	.word	0x08016a50
 8001dd8:	08016a5c 	.word	0x08016a5c
 8001ddc:	08016a6c 	.word	0x08016a6c
 8001de0:	08016a80 	.word	0x08016a80
 8001de4:	08016a90 	.word	0x08016a90
 8001de8:	08016aa8 	.word	0x08016aa8
 8001dec:	08016ab8 	.word	0x08016ab8
 8001df0:	08016ad0 	.word	0x08016ad0
 8001df4:	08016ae4 	.word	0x08016ae4
 8001df8:	08016af4 	.word	0x08016af4
 8001dfc:	08016b00 	.word	0x08016b00
 8001e00:	08016b14 	.word	0x08016b14
 8001e04:	08016b24 	.word	0x08016b24
 8001e08:	08016b38 	.word	0x08016b38

08001e0c <attrName>:
//------------------------------------------------------------------------------------------
static char *attrName(uint8_t attr)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	71fb      	strb	r3, [r7, #7]
	switch (attr) {
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	2b1f      	cmp	r3, #31
 8001e1c:	d84c      	bhi.n	8001eb8 <attrName+0xac>
 8001e1e:	a201      	add	r2, pc, #4	; (adr r2, 8001e24 <attrName+0x18>)
 8001e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e24:	08001ea5 	.word	0x08001ea5
 8001e28:	08001ea9 	.word	0x08001ea9
 8001e2c:	08001eb9 	.word	0x08001eb9
 8001e30:	08001ead 	.word	0x08001ead
 8001e34:	08001eb9 	.word	0x08001eb9
 8001e38:	08001eb9 	.word	0x08001eb9
 8001e3c:	08001eb9 	.word	0x08001eb9
 8001e40:	08001eb9 	.word	0x08001eb9
 8001e44:	08001eb9 	.word	0x08001eb9
 8001e48:	08001eb9 	.word	0x08001eb9
 8001e4c:	08001eb9 	.word	0x08001eb9
 8001e50:	08001eb9 	.word	0x08001eb9
 8001e54:	08001eb9 	.word	0x08001eb9
 8001e58:	08001eb9 	.word	0x08001eb9
 8001e5c:	08001eb9 	.word	0x08001eb9
 8001e60:	08001eb1 	.word	0x08001eb1
 8001e64:	08001eb9 	.word	0x08001eb9
 8001e68:	08001eb9 	.word	0x08001eb9
 8001e6c:	08001eb9 	.word	0x08001eb9
 8001e70:	08001eb9 	.word	0x08001eb9
 8001e74:	08001eb9 	.word	0x08001eb9
 8001e78:	08001eb9 	.word	0x08001eb9
 8001e7c:	08001eb9 	.word	0x08001eb9
 8001e80:	08001eb9 	.word	0x08001eb9
 8001e84:	08001eb9 	.word	0x08001eb9
 8001e88:	08001eb9 	.word	0x08001eb9
 8001e8c:	08001eb9 	.word	0x08001eb9
 8001e90:	08001eb9 	.word	0x08001eb9
 8001e94:	08001eb9 	.word	0x08001eb9
 8001e98:	08001eb9 	.word	0x08001eb9
 8001e9c:	08001eb9 	.word	0x08001eb9
 8001ea0:	08001eb5 	.word	0x08001eb5
		case AM_RDO://	0x01	/* Read only */
			return "Read only";
 8001ea4:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <attrName+0xbc>)
 8001ea6:	e008      	b.n	8001eba <attrName+0xae>
		case AM_HID://	0x02	/* Hidden */
			return "Hidden";
 8001ea8:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <attrName+0xc0>)
 8001eaa:	e006      	b.n	8001eba <attrName+0xae>
		case AM_SYS://	0x04	/* System */
			return "System";
 8001eac:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <attrName+0xc4>)
 8001eae:	e004      	b.n	8001eba <attrName+0xae>
		case AM_DIR://	0x10	/* Directory */
			return "Directory";
 8001eb0:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <attrName+0xc8>)
 8001eb2:	e002      	b.n	8001eba <attrName+0xae>
		case AM_ARC://	0x20	/* Archive */
			return "Archive";
 8001eb4:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <attrName+0xcc>)
 8001eb6:	e000      	b.n	8001eba <attrName+0xae>
		default : return "Unknown";
 8001eb8:	4b08      	ldr	r3, [pc, #32]	; (8001edc <attrName+0xd0>)
	}
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	08016b48 	.word	0x08016b48
 8001ecc:	08016b54 	.word	0x08016b54
 8001ed0:	08016b5c 	.word	0x08016b5c
 8001ed4:	08016b64 	.word	0x08016b64
 8001ed8:	08016b70 	.word	0x08016b70
 8001edc:	08016b78 	.word	0x08016b78

08001ee0 <drvMount>:
//------------------------------------------------------------------------------------------
bool drvMount(const char *path)
{
 8001ee0:	b590      	push	{r4, r7, lr}
 8001ee2:	b087      	sub	sp, #28
 8001ee4:	af02      	add	r7, sp, #8
 8001ee6:	6078      	str	r0, [r7, #4]
bool ret = false;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	73fb      	strb	r3, [r7, #15]

	if (!validChipID) return ret;
 8001eec:	4b32      	ldr	r3, [pc, #200]	; (8001fb8 <drvMount+0xd8>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	f083 0301 	eor.w	r3, r3, #1
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <drvMount+0x1e>
 8001efa:	7bfb      	ldrb	r3, [r7, #15]
 8001efc:	e057      	b.n	8001fae <drvMount+0xce>

	FRESULT res = f_mount(&FatFs, path, 1);
 8001efe:	2201      	movs	r2, #1
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	482e      	ldr	r0, [pc, #184]	; (8001fbc <drvMount+0xdc>)
 8001f04:	f00e fc86 	bl	8010814 <f_mount>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	73bb      	strb	r3, [r7, #14]
	if (res == FR_NO_FILESYSTEM) {
 8001f0c:	7bbb      	ldrb	r3, [r7, #14]
 8001f0e:	2b0d      	cmp	r3, #13
 8001f10:	d134      	bne.n	8001f7c <drvMount+0x9c>
		Report(1, "Mount drive '%s' error #%u (%s)\r\n", path, res, fsErrName(res));
 8001f12:	7bbc      	ldrb	r4, [r7, #14]
 8001f14:	7bbb      	ldrb	r3, [r7, #14]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff fef0 	bl	8001cfc <fsErrName>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	4623      	mov	r3, r4
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	4926      	ldr	r1, [pc, #152]	; (8001fc0 <drvMount+0xe0>)
 8001f26:	2001      	movs	r0, #1
 8001f28:	f002 fcea 	bl	8004900 <Report>
		res = f_mkfs(path, FM_FAT, W25qxx_getBlockSize(), fs_work, sizeof(fs_work));
 8001f2c:	f004 fba6 	bl	800667c <W25qxx_getBlockSize>
 8001f30:	4602      	mov	r2, r0
 8001f32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	4b22      	ldr	r3, [pc, #136]	; (8001fc4 <drvMount+0xe4>)
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f00f fb4b 	bl	80115d8 <f_mkfs>
 8001f42:	4603      	mov	r3, r0
 8001f44:	73bb      	strb	r3, [r7, #14]
		if (!res) {
 8001f46:	7bbb      	ldrb	r3, [r7, #14]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d10c      	bne.n	8001f66 <drvMount+0x86>
			Report(1, "Make FAT fs on drive '%s' OK\r\n", path);
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	491e      	ldr	r1, [pc, #120]	; (8001fc8 <drvMount+0xe8>)
 8001f50:	2001      	movs	r0, #1
 8001f52:	f002 fcd5 	bl	8004900 <Report>
			res = f_mount(&FatFs, path, 1);
 8001f56:	2201      	movs	r2, #1
 8001f58:	6879      	ldr	r1, [r7, #4]
 8001f5a:	4818      	ldr	r0, [pc, #96]	; (8001fbc <drvMount+0xdc>)
 8001f5c:	f00e fc5a 	bl	8010814 <f_mount>
 8001f60:	4603      	mov	r3, r0
 8001f62:	73bb      	strb	r3, [r7, #14]
 8001f64:	e00a      	b.n	8001f7c <drvMount+0x9c>
    	} else {
    		Report(1, "Make FAT fs error #%u (%s)\r\n", res, fsErrName(res));
 8001f66:	7bbc      	ldrb	r4, [r7, #14]
 8001f68:	7bbb      	ldrb	r3, [r7, #14]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff fec6 	bl	8001cfc <fsErrName>
 8001f70:	4603      	mov	r3, r0
 8001f72:	4622      	mov	r2, r4
 8001f74:	4915      	ldr	r1, [pc, #84]	; (8001fcc <drvMount+0xec>)
 8001f76:	2001      	movs	r0, #1
 8001f78:	f002 fcc2 	bl	8004900 <Report>
    	}
	}
	if (!res) {
 8001f7c:	7bbb      	ldrb	r3, [r7, #14]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d107      	bne.n	8001f92 <drvMount+0xb2>
		ret = true;
 8001f82:	2301      	movs	r3, #1
 8001f84:	73fb      	strb	r3, [r7, #15]
		Report(1, "Mount drive '%s' OK\r\n", path);
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	4911      	ldr	r1, [pc, #68]	; (8001fd0 <drvMount+0xf0>)
 8001f8a:	2001      	movs	r0, #1
 8001f8c:	f002 fcb8 	bl	8004900 <Report>
 8001f90:	e00c      	b.n	8001fac <drvMount+0xcc>
	} else {
		Report(1, "Mount drive '%s' error #%u (%s)\r\n", path, res, fsErrName(res));
 8001f92:	7bbc      	ldrb	r4, [r7, #14]
 8001f94:	7bbb      	ldrb	r3, [r7, #14]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff feb0 	bl	8001cfc <fsErrName>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	4623      	mov	r3, r4
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	4906      	ldr	r1, [pc, #24]	; (8001fc0 <drvMount+0xe0>)
 8001fa6:	2001      	movs	r0, #1
 8001fa8:	f002 fcaa 	bl	8004900 <Report>
	}

	return ret;
 8001fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd90      	pop	{r4, r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20002cc5 	.word	0x20002cc5
 8001fbc:	20002cd0 	.word	0x20002cd0
 8001fc0:	08016b80 	.word	0x08016b80
 8001fc4:	20001cc4 	.word	0x20001cc4
 8001fc8:	08016ba4 	.word	0x08016ba4
 8001fcc:	08016bc4 	.word	0x08016bc4
 8001fd0:	08016be4 	.word	0x08016be4

08001fd4 <dirList>:
//------------------------------------------------------------------------------------------
void dirList(const char *name_dir)
{
 8001fd4:	b590      	push	{r4, r7, lr}
 8001fd6:	b099      	sub	sp, #100	; 0x64
 8001fd8:	af02      	add	r7, sp, #8
 8001fda:	6078      	str	r0, [r7, #4]
DIR dir;

	FRESULT res = f_opendir(&dir, name_dir);
 8001fdc:	f107 0320 	add.w	r3, r7, #32
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f00f f976 	bl	80112d4 <f_opendir>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	if (!res) {
 8001fee:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d14a      	bne.n	800208c <dirList+0xb8>
		FILINFO fno;
		int cnt = -1;
 8001ff6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ffa:	657b      	str	r3, [r7, #84]	; 0x54
		Report(1, "Read folder '%s':\r\n", name_dir);
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	4925      	ldr	r1, [pc, #148]	; (8002094 <dirList+0xc0>)
 8002000:	2001      	movs	r0, #1
 8002002:	f002 fc7d 	bl	8004900 <Report>
		for (;;) {
			res = f_readdir(&dir, &fno);
 8002006:	f107 0208 	add.w	r2, r7, #8
 800200a:	f107 0320 	add.w	r3, r7, #32
 800200e:	4611      	mov	r1, r2
 8002010:	4618      	mov	r0, r3
 8002012:	f00f f9f8 	bl	8011406 <f_readdir>
 8002016:	4603      	mov	r3, r0
 8002018:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			cnt++;
 800201c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800201e:	3301      	adds	r3, #1
 8002020:	657b      	str	r3, [r7, #84]	; 0x54
			if (res || fno.fname[0] == 0) {
 8002022:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002026:	2b00      	cmp	r3, #0
 8002028:	d102      	bne.n	8002030 <dirList+0x5c>
 800202a:	7c7b      	ldrb	r3, [r7, #17]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d108      	bne.n	8002042 <dirList+0x6e>
				if (!cnt) Report(0, "\tFolder '%s' is empty\r\n", name_dir);
 8002030:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002032:	2b00      	cmp	r3, #0
 8002034:	d124      	bne.n	8002080 <dirList+0xac>
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	4917      	ldr	r1, [pc, #92]	; (8002098 <dirList+0xc4>)
 800203a:	2000      	movs	r0, #0
 800203c:	f002 fc60 	bl	8004900 <Report>
				break;
 8002040:	e01e      	b.n	8002080 <dirList+0xac>
			} else if (fno.fattrib & AM_DIR) {// It is a directory
 8002042:	7c3b      	ldrb	r3, [r7, #16]
 8002044:	f003 0310 	and.w	r3, r3, #16
 8002048:	2b00      	cmp	r3, #0
 800204a:	d008      	beq.n	800205e <dirList+0x8a>
				Report(0, "\tIt is folder -> '%s'\r\n", fno.fname);
 800204c:	f107 0308 	add.w	r3, r7, #8
 8002050:	3309      	adds	r3, #9
 8002052:	461a      	mov	r2, r3
 8002054:	4911      	ldr	r1, [pc, #68]	; (800209c <dirList+0xc8>)
 8002056:	2000      	movs	r0, #0
 8002058:	f002 fc52 	bl	8004900 <Report>
 800205c:	e7d3      	b.n	8002006 <dirList+0x32>
			} else {// It is a file.
				Report(0, "\tname:%s, size:%u bytes, attr:%s\r\n",
 800205e:	68bc      	ldr	r4, [r7, #8]
 8002060:	7c3b      	ldrb	r3, [r7, #16]
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff fed2 	bl	8001e0c <attrName>
 8002068:	4601      	mov	r1, r0
 800206a:	f107 0308 	add.w	r3, r7, #8
 800206e:	f103 0209 	add.w	r2, r3, #9
 8002072:	9100      	str	r1, [sp, #0]
 8002074:	4623      	mov	r3, r4
 8002076:	490a      	ldr	r1, [pc, #40]	; (80020a0 <dirList+0xcc>)
 8002078:	2000      	movs	r0, #0
 800207a:	f002 fc41 	bl	8004900 <Report>
			res = f_readdir(&dir, &fno);
 800207e:	e7c2      	b.n	8002006 <dirList+0x32>
				break;
 8002080:	bf00      	nop
									fno.fname,
									fno.fsize,
									attrName(fno.fattrib));
			}
		}
		f_closedir(&dir);
 8002082:	f107 0320 	add.w	r3, r7, #32
 8002086:	4618      	mov	r0, r3
 8002088:	f00f f997 	bl	80113ba <f_closedir>
	}
}
 800208c:	bf00      	nop
 800208e:	375c      	adds	r7, #92	; 0x5c
 8002090:	46bd      	mov	sp, r7
 8002092:	bd90      	pop	{r4, r7, pc}
 8002094:	08016bfc 	.word	0x08016bfc
 8002098:	08016c10 	.word	0x08016c10
 800209c:	08016c28 	.word	0x08016c28
 80020a0:	08016c40 	.word	0x08016c40

080020a4 <wrFile>:
//------------------------------------------------------------------------------------------
void wrFile(const char *name, const char *text, bool update)
{
 80020a4:	b590      	push	{r4, r7, lr}
 80020a6:	f5ad 5d86 	sub.w	sp, sp, #4288	; 0x10c0
 80020aa:	b085      	sub	sp, #20
 80020ac:	af02      	add	r7, sp, #8
 80020ae:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80020b2:	f843 0cbc 	str.w	r0, [r3, #-188]
 80020b6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80020ba:	f843 1cc0 	str.w	r1, [r3, #-192]
 80020be:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80020c2:	f803 2cc1 	strb.w	r2, [r3, #-193]
char tmp[128];
FIL fp;
FRESULT res = FR_NO_FILE;
 80020c6:	2304      	movs	r3, #4
 80020c8:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 80020cc:	f102 0207 	add.w	r2, r2, #7
 80020d0:	7013      	strb	r3, [r2, #0]

	sprintf(tmp, "/%s", cfg);
 80020d2:	4b63      	ldr	r3, [pc, #396]	; (8002260 <wrFile+0x1bc>)
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80020da:	4962      	ldr	r1, [pc, #392]	; (8002264 <wrFile+0x1c0>)
 80020dc:	4618      	mov	r0, r3
 80020de:	f010 fd31 	bl	8012b44 <siprintf>
	if (update) {
 80020e2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80020e6:	f813 3cc1 	ldrb.w	r3, [r3, #-193]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d059      	beq.n	80021a2 <wrFile+0xfe>
		res = f_open(&fp, tmp, FA_READ);
 80020ee:	f507 5182 	add.w	r1, r7, #4160	; 0x1040
 80020f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020f6:	3b18      	subs	r3, #24
 80020f8:	2201      	movs	r2, #1
 80020fa:	4618      	mov	r0, r3
 80020fc:	f00e fbd0 	bl	80108a0 <f_open>
 8002100:	4603      	mov	r3, r0
 8002102:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 8002106:	f102 0207 	add.w	r2, r2, #7
 800210a:	7013      	strb	r3, [r2, #0]
		if (res == FR_OK) {
 800210c:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 8002110:	f103 0307 	add.w	r3, r3, #7
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d143      	bne.n	80021a2 <wrFile+0xfe>
			res = f_close(&fp);
 800211a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800211e:	3b18      	subs	r3, #24
 8002120:	4618      	mov	r0, r3
 8002122:	f00f f8ad 	bl	8011280 <f_close>
 8002126:	4603      	mov	r3, r0
 8002128:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 800212c:	f102 0207 	add.w	r2, r2, #7
 8002130:	7013      	strb	r3, [r2, #0]
			Report(1, "[%s] File '%s' allready present. Delete file...\r\n", __func__, tmp);
 8002132:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002136:	4a4c      	ldr	r2, [pc, #304]	; (8002268 <wrFile+0x1c4>)
 8002138:	494c      	ldr	r1, [pc, #304]	; (800226c <wrFile+0x1c8>)
 800213a:	2001      	movs	r0, #1
 800213c:	f002 fbe0 	bl	8004900 <Report>
			if ((res = f_unlink(tmp)) == FR_OK) {
 8002140:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002144:	4618      	mov	r0, r3
 8002146:	f00f f99b 	bl	8011480 <f_unlink>
 800214a:	4603      	mov	r3, r0
 800214c:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 8002150:	f102 0207 	add.w	r2, r2, #7
 8002154:	7013      	strb	r3, [r2, #0]
 8002156:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 800215a:	f103 0307 	add.w	r3, r3, #7
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d107      	bne.n	8002174 <wrFile+0xd0>
				Report(1, "[%s] File '%s' delete OK\r\n", __func__, tmp);
 8002164:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002168:	4a3f      	ldr	r2, [pc, #252]	; (8002268 <wrFile+0x1c4>)
 800216a:	4941      	ldr	r1, [pc, #260]	; (8002270 <wrFile+0x1cc>)
 800216c:	2001      	movs	r0, #1
 800216e:	f002 fbc7 	bl	8004900 <Report>
 8002172:	e016      	b.n	80021a2 <wrFile+0xfe>
			} else {
				Report(1, "[%s] File '%s' delete Error:%d(%s)\r\n", __func__, tmp, res, fsErrName(res));
 8002174:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 8002178:	f103 0307 	add.w	r3, r3, #7
 800217c:	781c      	ldrb	r4, [r3, #0]
 800217e:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 8002182:	f103 0307 	add.w	r3, r3, #7
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff fdb7 	bl	8001cfc <fsErrName>
 800218e:	4602      	mov	r2, r0
 8002190:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002194:	9201      	str	r2, [sp, #4]
 8002196:	9400      	str	r4, [sp, #0]
 8002198:	4a33      	ldr	r2, [pc, #204]	; (8002268 <wrFile+0x1c4>)
 800219a:	4936      	ldr	r1, [pc, #216]	; (8002274 <wrFile+0x1d0>)
 800219c:	2001      	movs	r0, #1
 800219e:	f002 fbaf 	bl	8004900 <Report>
			}
			//return;
		}
	}

	res = f_open(&fp, tmp, FA_CREATE_ALWAYS | FA_WRITE);
 80021a2:	f507 5182 	add.w	r1, r7, #4160	; 0x1040
 80021a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021aa:	3b18      	subs	r3, #24
 80021ac:	220a      	movs	r2, #10
 80021ae:	4618      	mov	r0, r3
 80021b0:	f00e fb76 	bl	80108a0 <f_open>
 80021b4:	4603      	mov	r3, r0
 80021b6:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 80021ba:	f102 0207 	add.w	r2, r2, #7
 80021be:	7013      	strb	r3, [r2, #0]
	if (!res) {
 80021c0:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 80021c4:	f103 0307 	add.w	r3, r3, #7
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d12b      	bne.n	8002226 <wrFile+0x182>
		UINT len = strlen(text);
 80021ce:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80021d2:	f853 0cc0 	ldr.w	r0, [r3, #-192]
 80021d6:	f7fd fffb 	bl	80001d0 <strlen>
 80021da:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 80021de:	6018      	str	r0, [r3, #0]
		//UINT wrt = 0;
		//res = f_write(&fp, text, len, &wrt);
		f_puts(text, &fp);
 80021e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021e4:	3b18      	subs	r3, #24
 80021e6:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80021ea:	4619      	mov	r1, r3
 80021ec:	f852 0cc0 	ldr.w	r0, [r2, #-192]
 80021f0:	f00f fec7 	bl	8011f82 <f_puts>
		Report(1, "[%s] File '%s' write OK (len=%lu)\r\n", __func__, tmp, len);
 80021f4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80021f8:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	4613      	mov	r3, r2
 8002202:	4a19      	ldr	r2, [pc, #100]	; (8002268 <wrFile+0x1c4>)
 8002204:	491c      	ldr	r1, [pc, #112]	; (8002278 <wrFile+0x1d4>)
 8002206:	2001      	movs	r0, #1
 8002208:	f002 fb7a 	bl	8004900 <Report>

		res = f_close(&fp);
 800220c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002210:	3b18      	subs	r3, #24
 8002212:	4618      	mov	r0, r3
 8002214:	f00f f834 	bl	8011280 <f_close>
 8002218:	4603      	mov	r3, r0
 800221a:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 800221e:	f102 0207 	add.w	r2, r2, #7
 8002222:	7013      	strb	r3, [r2, #0]
	} else Report(1, "[%s] Create new file '%s' error #%u (%s)\r\n", __func__, tmp, res, fsErrName(res));

}
 8002224:	e016      	b.n	8002254 <wrFile+0x1b0>
	} else Report(1, "[%s] Create new file '%s' error #%u (%s)\r\n", __func__, tmp, res, fsErrName(res));
 8002226:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 800222a:	f103 0307 	add.w	r3, r3, #7
 800222e:	781c      	ldrb	r4, [r3, #0]
 8002230:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 8002234:	f103 0307 	add.w	r3, r3, #7
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff fd5e 	bl	8001cfc <fsErrName>
 8002240:	4602      	mov	r2, r0
 8002242:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002246:	9201      	str	r2, [sp, #4]
 8002248:	9400      	str	r4, [sp, #0]
 800224a:	4a07      	ldr	r2, [pc, #28]	; (8002268 <wrFile+0x1c4>)
 800224c:	490b      	ldr	r1, [pc, #44]	; (800227c <wrFile+0x1d8>)
 800224e:	2001      	movs	r0, #1
 8002250:	f002 fb56 	bl	8004900 <Report>
}
 8002254:	bf00      	nop
 8002256:	f507 5786 	add.w	r7, r7, #4288	; 0x10c0
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	bd90      	pop	{r4, r7, pc}
 8002260:	200001dc 	.word	0x200001dc
 8002264:	08016c64 	.word	0x08016c64
 8002268:	08018180 	.word	0x08018180
 800226c:	08016c68 	.word	0x08016c68
 8002270:	08016c9c 	.word	0x08016c9c
 8002274:	08016cb8 	.word	0x08016cb8
 8002278:	08016ce0 	.word	0x08016ce0
 800227c:	08016d04 	.word	0x08016d04

08002280 <rdFile>:
//------------------------------------------------------------------------------------------
bool rdFile(const char *name, char *txt)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	f5ad 5d86 	sub.w	sp, sp, #4288	; 0x10c0
 8002286:	af00      	add	r7, sp, #0
 8002288:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800228c:	f843 0cbc 	str.w	r0, [r3, #-188]
 8002290:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002294:	f843 1cc0 	str.w	r1, [r3, #-192]
bool ret = false;
 8002298:	2300      	movs	r3, #0
 800229a:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 800229e:	f102 021f 	add.w	r2, r2, #31
 80022a2:	7013      	strb	r3, [r2, #0]
char tmp[128];
FIL fp;

	*txt = '\0';
 80022a4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80022a8:	f853 3cc0 	ldr.w	r3, [r3, #-192]
 80022ac:	2200      	movs	r2, #0
 80022ae:	701a      	strb	r2, [r3, #0]
	if (!f_open(&fp, name, FA_READ)) {
 80022b0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80022b4:	4619      	mov	r1, r3
 80022b6:	f107 0320 	add.w	r3, r7, #32
 80022ba:	3b14      	subs	r3, #20
 80022bc:	2201      	movs	r2, #1
 80022be:	f851 1cbc 	ldr.w	r1, [r1, #-188]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f00e faec 	bl	80108a0 <f_open>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d13e      	bne.n	800234c <rdFile+0xcc>
		Report(1, "File '%s' open for reading OK\r\n", name);
 80022ce:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80022d2:	f853 2cbc 	ldr.w	r2, [r3, #-188]
 80022d6:	4926      	ldr	r1, [pc, #152]	; (8002370 <rdFile+0xf0>)
 80022d8:	2001      	movs	r0, #1
 80022da:	f002 fb11 	bl	8004900 <Report>
		while (f_gets(tmp, sizeof(tmp) - 1, &fp) != NULL) {
 80022de:	e01a      	b.n	8002316 <rdFile+0x96>
			if (txt)
 80022e0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80022e4:	f853 3cc0 	ldr.w	r3, [r3, #-192]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00b      	beq.n	8002304 <rdFile+0x84>
				strcat(txt, tmp);
 80022ec:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80022f0:	f103 031c 	add.w	r3, r3, #28
 80022f4:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80022f8:	4619      	mov	r1, r3
 80022fa:	f852 0cc0 	ldr.w	r0, [r2, #-192]
 80022fe:	f010 fc41 	bl	8012b84 <strcat>
 8002302:	e008      	b.n	8002316 <rdFile+0x96>
			else
				Report(0, "%s", tmp);
 8002304:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002308:	f103 031c 	add.w	r3, r3, #28
 800230c:	461a      	mov	r2, r3
 800230e:	4919      	ldr	r1, [pc, #100]	; (8002374 <rdFile+0xf4>)
 8002310:	2000      	movs	r0, #0
 8002312:	f002 faf5 	bl	8004900 <Report>
		while (f_gets(tmp, sizeof(tmp) - 1, &fp) != NULL) {
 8002316:	f107 0320 	add.w	r3, r7, #32
 800231a:	3b14      	subs	r3, #20
 800231c:	f507 5081 	add.w	r0, r7, #4128	; 0x1020
 8002320:	f100 001c 	add.w	r0, r0, #28
 8002324:	461a      	mov	r2, r3
 8002326:	217f      	movs	r1, #127	; 0x7f
 8002328:	f00f fd82 	bl	8011e30 <f_gets>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1d6      	bne.n	80022e0 <rdFile+0x60>
		}

		f_close(&fp);
 8002332:	f107 0320 	add.w	r3, r7, #32
 8002336:	3b14      	subs	r3, #20
 8002338:	4618      	mov	r0, r3
 800233a:	f00e ffa1 	bl	8011280 <f_close>

		ret = true;
 800233e:	2301      	movs	r3, #1
 8002340:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8002344:	f102 021f 	add.w	r2, r2, #31
 8002348:	7013      	strb	r3, [r2, #0]
 800234a:	e007      	b.n	800235c <rdFile+0xdc>
	} else {
		Report(1, "Error while open for reading file '%s'\r\n", name);
 800234c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002350:	f853 2cbc 	ldr.w	r2, [r3, #-188]
 8002354:	4908      	ldr	r1, [pc, #32]	; (8002378 <rdFile+0xf8>)
 8002356:	2001      	movs	r0, #1
 8002358:	f002 fad2 	bl	8004900 <Report>
	}

	return ret;
 800235c:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8002360:	f103 031f 	add.w	r3, r3, #31
 8002364:	781b      	ldrb	r3, [r3, #0]
}
 8002366:	4618      	mov	r0, r3
 8002368:	f507 5786 	add.w	r7, r7, #4288	; 0x10c0
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	08016d30 	.word	0x08016d30
 8002374:	08016d50 	.word	0x08016d50
 8002378:	08016d54 	.word	0x08016d54

0800237c <showCfg>:
//------------------------------------------------------------------------------------------
#endif
//------------------------------------------------------------------------------------------
void showCfg()
{
 800237c:	b5b0      	push	{r4, r5, r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af04      	add	r7, sp, #16
	*strf = '\0';
 8002382:	4b20      	ldr	r3, [pc, #128]	; (8002404 <showCfg+0x88>)
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_LIST; i++) {
 8002388:	2300      	movs	r3, #0
 800238a:	607b      	str	r3, [r7, #4]
 800238c:	e02d      	b.n	80023ea <showCfg+0x6e>
		sprintf(strf+strlen(strf), "%u:%.1f:%s\r\n", list[i].band, list[i].freq, list[i].name);
 800238e:	481d      	ldr	r0, [pc, #116]	; (8002404 <showCfg+0x88>)
 8002390:	f7fd ff1e 	bl	80001d0 <strlen>
 8002394:	4603      	mov	r3, r0
 8002396:	4a1b      	ldr	r2, [pc, #108]	; (8002404 <showCfg+0x88>)
 8002398:	189c      	adds	r4, r3, r2
 800239a:	491b      	ldr	r1, [pc, #108]	; (8002408 <showCfg+0x8c>)
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	4613      	mov	r3, r2
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	4413      	add	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	440b      	add	r3, r1
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	461d      	mov	r5, r3
 80023ac:	4916      	ldr	r1, [pc, #88]	; (8002408 <showCfg+0x8c>)
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	4613      	mov	r3, r2
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	4413      	add	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fe f8c2 	bl	8000548 <__aeabi_f2d>
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	4613      	mov	r3, r2
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	4413      	add	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4a0e      	ldr	r2, [pc, #56]	; (8002408 <showCfg+0x8c>)
 80023d0:	4413      	add	r3, r2
 80023d2:	3305      	adds	r3, #5
 80023d4:	9302      	str	r3, [sp, #8]
 80023d6:	e9cd 0100 	strd	r0, r1, [sp]
 80023da:	462a      	mov	r2, r5
 80023dc:	490b      	ldr	r1, [pc, #44]	; (800240c <showCfg+0x90>)
 80023de:	4620      	mov	r0, r4
 80023e0:	f010 fbb0 	bl	8012b44 <siprintf>
	for (int i = 0; i < MAX_LIST; i++) {
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3301      	adds	r3, #1
 80023e8:	607b      	str	r3, [r7, #4]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b18      	cmp	r3, #24
 80023ee:	ddce      	ble.n	800238e <showCfg+0x12>
	}
	Report(0, "%s", strf);
 80023f0:	4a04      	ldr	r2, [pc, #16]	; (8002404 <showCfg+0x88>)
 80023f2:	4907      	ldr	r1, [pc, #28]	; (8002410 <showCfg+0x94>)
 80023f4:	2000      	movs	r0, #0
 80023f6:	f002 fa83 	bl	8004900 <Report>
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bdb0      	pop	{r4, r5, r7, pc}
 8002402:	bf00      	nop
 8002404:	20001490 	.word	0x20001490
 8002408:	20003d1c 	.word	0x20003d1c
 800240c:	08016d80 	.word	0x08016d80
 8002410:	08016d50 	.word	0x08016d50

08002414 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002418:	f5ad 6dae 	sub.w	sp, sp, #1392	; 0x570
 800241c:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800241e:	f004 fcc6 	bl	8006dae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002422:	f001 fb5d 	bl	8003ae0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002426:	f001 fd95 	bl	8003f54 <MX_GPIO_Init>
  MX_TIM4_Init();
 800242a:	f001 fcc3 	bl	8003db4 <MX_TIM4_Init>
  MX_DMA_Init();
 800242e:	f001 fd3f 	bl	8003eb0 <MX_DMA_Init>
  MX_RTC_Init();
 8002432:	f001 fbe7 	bl	8003c04 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8002436:	f001 fd0b 	bl	8003e50 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800243a:	f001 fc7d 	bl	8003d38 <MX_SPI2_Init>
  MX_SPI1_Init();
 800243e:	f001 fc3d 	bl	8003cbc <MX_SPI1_Init>
  MX_I2C1_Init();
 8002442:	f001 fb9f 	bl	8003b84 <MX_I2C1_Init>
  MX_FATFS_Init();
 8002446:	f00c fae9 	bl	800ea1c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */


  if (HAL_TIM_Base_Start_IT(tikPort) != HAL_OK) devError |= devTIK;
 800244a:	4b93      	ldr	r3, [pc, #588]	; (8002698 <main+0x284>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f00a fa30 	bl	800c8b4 <HAL_TIM_Base_Start_IT>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d006      	beq.n	8002468 <main+0x54>
 800245a:	4b90      	ldr	r3, [pc, #576]	; (800269c <main+0x288>)
 800245c:	881b      	ldrh	r3, [r3, #0]
 800245e:	f043 0301 	orr.w	r3, r3, #1
 8002462:	b29a      	uxth	r2, r3
 8002464:	4b8d      	ldr	r3, [pc, #564]	; (800269c <main+0x288>)
 8002466:	801a      	strh	r2, [r3, #0]

  for (int8_t i = 0; i < 4; i++) {
 8002468:	2300      	movs	r3, #0
 800246a:	f887 354f 	strb.w	r3, [r7, #1359]	; 0x54f
 800246e:	e012      	b.n	8002496 <main+0x82>
	  errLedOn(true);
 8002470:	2001      	movs	r0, #1
 8002472:	f002 f925 	bl	80046c0 <errLedOn>
	  HAL_Delay(150);
 8002476:	2096      	movs	r0, #150	; 0x96
 8002478:	f004 fd0e 	bl	8006e98 <HAL_Delay>
	  errLedOn(false);
 800247c:	2000      	movs	r0, #0
 800247e:	f002 f91f 	bl	80046c0 <errLedOn>
	  HAL_Delay(150);
 8002482:	2096      	movs	r0, #150	; 0x96
 8002484:	f004 fd08 	bl	8006e98 <HAL_Delay>
  for (int8_t i = 0; i < 4; i++) {
 8002488:	f997 354f 	ldrsb.w	r3, [r7, #1359]	; 0x54f
 800248c:	b2db      	uxtb	r3, r3
 800248e:	3301      	adds	r3, #1
 8002490:	b2db      	uxtb	r3, r3
 8002492:	f887 354f 	strb.w	r3, [r7, #1359]	; 0x54f
 8002496:	f997 354f 	ldrsb.w	r3, [r7, #1359]	; 0x54f
 800249a:	2b03      	cmp	r3, #3
 800249c:	dde8      	ble.n	8002470 <main+0x5c>
  }

  if (HAL_UART_Receive_IT(cmdPort, &rxByte, 1) != HAL_OK) devError |= devUART;
 800249e:	4b80      	ldr	r3, [pc, #512]	; (80026a0 <main+0x28c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2201      	movs	r2, #1
 80024a4:	497f      	ldr	r1, [pc, #508]	; (80026a4 <main+0x290>)
 80024a6:	4618      	mov	r0, r3
 80024a8:	f00a fedc 	bl	800d264 <HAL_UART_Receive_IT>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d006      	beq.n	80024c0 <main+0xac>
 80024b2:	4b7a      	ldr	r3, [pc, #488]	; (800269c <main+0x288>)
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	f043 0302 	orr.w	r3, r3, #2
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	4b77      	ldr	r3, [pc, #476]	; (800269c <main+0x288>)
 80024be:	801a      	strh	r2, [r3, #0]

  set_Date(epoch);
 80024c0:	4b79      	ldr	r3, [pc, #484]	; (80026a8 <main+0x294>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f002 f921 	bl	800470c <set_Date>

  HAL_Delay(250);
 80024ca:	20fa      	movs	r0, #250	; 0xfa
 80024cc:	f004 fce4 	bl	8006e98 <HAL_Delay>

  Report(1, "[que:%u] Start application ver.%s\r\n", cntEvt, ver);
 80024d0:	4b76      	ldr	r3, [pc, #472]	; (80026ac <main+0x298>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	461a      	mov	r2, r3
 80024d8:	4b75      	ldr	r3, [pc, #468]	; (80026b0 <main+0x29c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4975      	ldr	r1, [pc, #468]	; (80026b4 <main+0x2a0>)
 80024de:	2001      	movs	r0, #1
 80024e0:	f002 fa0e 	bl	8004900 <Report>

#ifdef SET_W25FLASH
    chipPresent = W25qxx_Init();
 80024e4:	f003 ffde 	bl	80064a4 <W25qxx_Init>
 80024e8:	4603      	mov	r3, r0
 80024ea:	461a      	mov	r2, r3
 80024ec:	4b72      	ldr	r3, [pc, #456]	; (80026b8 <main+0x2a4>)
 80024ee:	701a      	strb	r2, [r3, #0]
    uint32_t cid = W25qxx_getChipID();
 80024f0:	f004 f892 	bl	8006618 <W25qxx_getChipID>
 80024f4:	f8c7 0520 	str.w	r0, [r7, #1312]	; 0x520
    if ( chipPresent && ((cid >= W25Q10) && (cid <= W25Q128)) ) validChipID = true;
 80024f8:	4b6f      	ldr	r3, [pc, #444]	; (80026b8 <main+0x2a4>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00a      	beq.n	8002516 <main+0x102>
 8002500:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8002504:	2b00      	cmp	r3, #0
 8002506:	d006      	beq.n	8002516 <main+0x102>
 8002508:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800250c:	2b08      	cmp	r3, #8
 800250e:	d802      	bhi.n	8002516 <main+0x102>
 8002510:	4b6a      	ldr	r3, [pc, #424]	; (80026bc <main+0x2a8>)
 8002512:	2201      	movs	r2, #1
 8002514:	701a      	strb	r2, [r3, #0]
    list_sector = W25qxx_getPageSize() << 1;
 8002516:	f004 f8a3 	bl	8006660 <W25qxx_getPageSize>
 800251a:	4603      	mov	r3, r0
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	461a      	mov	r2, r3
 8002520:	4b67      	ldr	r3, [pc, #412]	; (80026c0 <main+0x2ac>)
 8002522:	601a      	str	r2, [r3, #0]
    //
    listSize = sizeof(rec_t) * MAX_LIST;
 8002524:	4b67      	ldr	r3, [pc, #412]	; (80026c4 <main+0x2b0>)
 8002526:	f44f 7261 	mov.w	r2, #900	; 0x384
 800252a:	801a      	strh	r2, [r3, #0]
    memset((uint8_t *)&list[0].band, 0, listSize);
 800252c:	4b65      	ldr	r3, [pc, #404]	; (80026c4 <main+0x2b0>)
 800252e:	881b      	ldrh	r3, [r3, #0]
 8002530:	461a      	mov	r2, r3
 8002532:	2100      	movs	r1, #0
 8002534:	4864      	ldr	r0, [pc, #400]	; (80026c8 <main+0x2b4>)
 8002536:	f00f fe93 	bl	8012260 <memset>
    //
	#ifdef SET_FAT_FS
    	int8_t ix = 0;
 800253a:	2300      	movs	r3, #0
 800253c:	f887 354e 	strb.w	r3, [r7, #1358]	; 0x54e
      	mnt = drvMount(USERPath);
 8002540:	4862      	ldr	r0, [pc, #392]	; (80026cc <main+0x2b8>)
 8002542:	f7ff fccd 	bl	8001ee0 <drvMount>
 8002546:	4603      	mov	r3, r0
 8002548:	461a      	mov	r2, r3
 800254a:	4b61      	ldr	r3, [pc, #388]	; (80026d0 <main+0x2bc>)
 800254c:	701a      	strb	r2, [r3, #0]
      	if (mnt) {
 800254e:	4b60      	ldr	r3, [pc, #384]	; (80026d0 <main+0x2bc>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 8177 	beq.w	8002846 <main+0x432>
      		dirList(dirName);
 8002558:	4b5e      	ldr	r3, [pc, #376]	; (80026d4 <main+0x2c0>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff fd39 	bl	8001fd4 <dirList>
      		//
      		char txt[MAX_UART_BUF] = {0};
 8002562:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8002566:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	3304      	adds	r3, #4
 8002570:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8002574:	2100      	movs	r1, #0
 8002576:	4618      	mov	r0, r3
 8002578:	f00f fe72 	bl	8012260 <memset>
      		cfg_present = rdFile(cfg, txt);
 800257c:	4b56      	ldr	r3, [pc, #344]	; (80026d8 <main+0x2c4>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002584:	4611      	mov	r1, r2
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff fe7a 	bl	8002280 <rdFile>
 800258c:	4603      	mov	r3, r0
 800258e:	461a      	mov	r2, r3
 8002590:	4b52      	ldr	r3, [pc, #328]	; (80026dc <main+0x2c8>)
 8002592:	701a      	strb	r2, [r3, #0]
      		if (!cfg_present) {
 8002594:	4b51      	ldr	r3, [pc, #324]	; (80026dc <main+0x2c8>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	f083 0301 	eor.w	r3, r3, #1
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d051      	beq.n	8002646 <main+0x232>
      			for (int i = 0; i < MAX_LIST; i++) {
 80025a2:	2300      	movs	r3, #0
 80025a4:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
 80025a8:	e035      	b.n	8002616 <main+0x202>
      				sprintf(txt+strlen(txt), "%u:%.1f:%s\r\n", def_list[i].band, def_list[i].freq, def_list[i].name);
 80025aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7fd fe0e 	bl	80001d0 <strlen>
 80025b4:	4602      	mov	r2, r0
 80025b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80025ba:	189c      	adds	r4, r3, r2
 80025bc:	4948      	ldr	r1, [pc, #288]	; (80026e0 <main+0x2cc>)
 80025be:	f8d7 2548 	ldr.w	r2, [r7, #1352]	; 0x548
 80025c2:	4613      	mov	r3, r2
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	4413      	add	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	440b      	add	r3, r1
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	461d      	mov	r5, r3
 80025d0:	4943      	ldr	r1, [pc, #268]	; (80026e0 <main+0x2cc>)
 80025d2:	f8d7 2548 	ldr.w	r2, [r7, #1352]	; 0x548
 80025d6:	4613      	mov	r3, r2
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	4413      	add	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	440b      	add	r3, r1
 80025e0:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fd ffaf 	bl	8000548 <__aeabi_f2d>
 80025ea:	f8d7 2548 	ldr.w	r2, [r7, #1352]	; 0x548
 80025ee:	4613      	mov	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	4413      	add	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4a3a      	ldr	r2, [pc, #232]	; (80026e0 <main+0x2cc>)
 80025f8:	4413      	add	r3, r2
 80025fa:	3305      	adds	r3, #5
 80025fc:	9302      	str	r3, [sp, #8]
 80025fe:	e9cd 0100 	strd	r0, r1, [sp]
 8002602:	462a      	mov	r2, r5
 8002604:	4937      	ldr	r1, [pc, #220]	; (80026e4 <main+0x2d0>)
 8002606:	4620      	mov	r0, r4
 8002608:	f010 fa9c 	bl	8012b44 <siprintf>
      			for (int i = 0; i < MAX_LIST; i++) {
 800260c:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 8002610:	3301      	adds	r3, #1
 8002612:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
 8002616:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 800261a:	2b18      	cmp	r3, #24
 800261c:	ddc5      	ble.n	80025aa <main+0x196>
      			}
      			wrFile(cfg, txt, true);
 800261e:	4b2e      	ldr	r3, [pc, #184]	; (80026d8 <main+0x2c4>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8002626:	2201      	movs	r2, #1
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff fd3b 	bl	80020a4 <wrFile>
      			cfg_present = rdFile(cfg, txt);
 800262e:	4b2a      	ldr	r3, [pc, #168]	; (80026d8 <main+0x2c4>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002636:	4611      	mov	r1, r2
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff fe21 	bl	8002280 <rdFile>
 800263e:	4603      	mov	r3, r0
 8002640:	461a      	mov	r2, r3
 8002642:	4b26      	ldr	r3, [pc, #152]	; (80026dc <main+0x2c8>)
 8002644:	701a      	strb	r2, [r3, #0]
      		}
      		if (cfg_present) {
 8002646:	4b25      	ldr	r3, [pc, #148]	; (80026dc <main+0x2c8>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	f000 80fb 	beq.w	8002846 <main+0x432>
      			char *uks = txt, *us = txt, *uke = NULL, *uend = txt + strlen(txt);
 8002650:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002654:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 8002658:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800265c:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 8002660:	2300      	movs	r3, #0
 8002662:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 8002666:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800266a:	4618      	mov	r0, r3
 800266c:	f7fd fdb0 	bl	80001d0 <strlen>
 8002670:	4602      	mov	r2, r0
 8002672:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002676:	4413      	add	r3, r2
 8002678:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
      			char tmp[80] = {0};
 800267c:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8002680:	f2a3 534c 	subw	r3, r3, #1356	; 0x54c
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	3304      	adds	r3, #4
 800268a:	224c      	movs	r2, #76	; 0x4c
 800268c:	2100      	movs	r1, #0
 800268e:	4618      	mov	r0, r3
 8002690:	f00f fde6 	bl	8012260 <memset>
      			while (uks < uend) {
 8002694:	e0bf      	b.n	8002816 <main+0x402>
 8002696:	bf00      	nop
 8002698:	20000008 	.word	0x20000008
 800269c:	20001890 	.word	0x20001890
 80026a0:	20000010 	.word	0x20000010
 80026a4:	200018a0 	.word	0x200018a0
 80026a8:	20000018 	.word	0x20000018
 80026ac:	20001cac 	.word	0x20001cac
 80026b0:	20000004 	.word	0x20000004
 80026b4:	08016d90 	.word	0x08016d90
 80026b8:	20002cc4 	.word	0x20002cc4
 80026bc:	20002cc5 	.word	0x20002cc5
 80026c0:	20001cb8 	.word	0x20001cb8
 80026c4:	200040a0 	.word	0x200040a0
 80026c8:	20003d1c 	.word	0x20003d1c
 80026cc:	200041f4 	.word	0x200041f4
 80026d0:	20003d01 	.word	0x20003d01
 80026d4:	200001e0 	.word	0x200001e0
 80026d8:	200001dc 	.word	0x200001dc
 80026dc:	20003d00 	.word	0x20003d00
 80026e0:	08017dfc 	.word	0x08017dfc
 80026e4:	08016d80 	.word	0x08016d80
      				uke = strstr(uks, "\r\n");
 80026e8:	4950      	ldr	r1, [pc, #320]	; (800282c <main+0x418>)
 80026ea:	f8d7 0544 	ldr.w	r0, [r7, #1348]	; 0x544
 80026ee:	f010 fa8c 	bl	8012c0a <strstr>
 80026f2:	f8c7 0518 	str.w	r0, [r7, #1304]	; 0x518
      				if (uke) {
 80026f6:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 8093 	beq.w	8002826 <main+0x412>
      					us = uke + 2;
 8002700:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 8002704:	3302      	adds	r3, #2
 8002706:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
      					memset(tmp, 0, sizeof(tmp));
 800270a:	1d3b      	adds	r3, r7, #4
 800270c:	2250      	movs	r2, #80	; 0x50
 800270e:	2100      	movs	r1, #0
 8002710:	4618      	mov	r0, r3
 8002712:	f00f fda5 	bl	8012260 <memset>
      					memcpy(tmp, uks, uke - uks);
 8002716:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 800271a:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	461a      	mov	r2, r3
 8002722:	1d3b      	adds	r3, r7, #4
 8002724:	f8d7 1544 	ldr.w	r1, [r7, #1348]	; 0x544
 8002728:	4618      	mov	r0, r3
 800272a:	f00f fd8b 	bl	8012244 <memcpy>
      					uke = strchr(tmp, ':');
 800272e:	1d3b      	adds	r3, r7, #4
 8002730:	213a      	movs	r1, #58	; 0x3a
 8002732:	4618      	mov	r0, r3
 8002734:	f010 fa35 	bl	8012ba2 <strchr>
 8002738:	f8c7 0518 	str.w	r0, [r7, #1304]	; 0x518
      					if (uke) {
 800273c:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 8002740:	2b00      	cmp	r3, #0
 8002742:	d04a      	beq.n	80027da <main+0x3c6>
      						uks = uke + 1;
 8002744:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 8002748:	3301      	adds	r3, #1
 800274a:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
      						uke = strchr(uks, ':');
 800274e:	213a      	movs	r1, #58	; 0x3a
 8002750:	f8d7 0544 	ldr.w	r0, [r7, #1348]	; 0x544
 8002754:	f010 fa25 	bl	8012ba2 <strchr>
 8002758:	f8c7 0518 	str.w	r0, [r7, #1304]	; 0x518
      						if (uke) {
 800275c:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 8002760:	2b00      	cmp	r3, #0
 8002762:	d013      	beq.n	800278c <main+0x378>
      							strncpy(&list[ix].name[0], uke + 1, MAX_SIZE_NAME - 1);
 8002764:	f997 254e 	ldrsb.w	r2, [r7, #1358]	; 0x54e
 8002768:	4613      	mov	r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	4413      	add	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4a2f      	ldr	r2, [pc, #188]	; (8002830 <main+0x41c>)
 8002772:	4413      	add	r3, r2
 8002774:	1d58      	adds	r0, r3, #5
 8002776:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 800277a:	3301      	adds	r3, #1
 800277c:	221e      	movs	r2, #30
 800277e:	4619      	mov	r1, r3
 8002780:	f010 fa30 	bl	8012be4 <strncpy>
      							*uke = '\0';
 8002784:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 8002788:	2200      	movs	r2, #0
 800278a:	701a      	strb	r2, [r3, #0]
      						}
      						uke = strchr(tmp, ':');
 800278c:	1d3b      	adds	r3, r7, #4
 800278e:	213a      	movs	r1, #58	; 0x3a
 8002790:	4618      	mov	r0, r3
 8002792:	f010 fa06 	bl	8012ba2 <strchr>
 8002796:	f8c7 0518 	str.w	r0, [r7, #1304]	; 0x518
      						if (uke) {
 800279a:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d01b      	beq.n	80027da <main+0x3c6>
      							list[ix].freq = (float)atof(uke + 1);
 80027a2:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 80027a6:	3301      	adds	r3, #1
 80027a8:	4618      	mov	r0, r3
 80027aa:	f00f fc6a 	bl	8012082 <atof>
 80027ae:	ec53 2b10 	vmov	r2, r3, d0
 80027b2:	f997 454e 	ldrsb.w	r4, [r7, #1358]	; 0x54e
 80027b6:	4610      	mov	r0, r2
 80027b8:	4619      	mov	r1, r3
 80027ba:	f7fe fa15 	bl	8000be8 <__aeabi_d2f>
 80027be:	4601      	mov	r1, r0
 80027c0:	4a1b      	ldr	r2, [pc, #108]	; (8002830 <main+0x41c>)
 80027c2:	4623      	mov	r3, r4
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	4423      	add	r3, r4
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	460a      	mov	r2, r1
 80027ce:	f8c3 2001 	str.w	r2, [r3, #1]
      							*uke = '\0';
 80027d2:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 80027d6:	2200      	movs	r2, #0
 80027d8:	701a      	strb	r2, [r3, #0]
      						}
      					}
      					uks = us;
 80027da:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 80027de:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
      					list[ix].band = (uint8_t)atol(tmp);
 80027e2:	1d3b      	adds	r3, r7, #4
 80027e4:	4618      	mov	r0, r3
 80027e6:	f00f fc53 	bl	8012090 <atol>
 80027ea:	4603      	mov	r3, r0
 80027ec:	f997 254e 	ldrsb.w	r2, [r7, #1358]	; 0x54e
 80027f0:	b2d8      	uxtb	r0, r3
 80027f2:	490f      	ldr	r1, [pc, #60]	; (8002830 <main+0x41c>)
 80027f4:	4613      	mov	r3, r2
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	4413      	add	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	4602      	mov	r2, r0
 8002800:	701a      	strb	r2, [r3, #0]
      				} else {
      					break;
      				}
      				if (++ix == MAX_LIST) break;
 8002802:	f897 354e 	ldrb.w	r3, [r7, #1358]	; 0x54e
 8002806:	3301      	adds	r3, #1
 8002808:	b2db      	uxtb	r3, r3
 800280a:	f887 354e 	strb.w	r3, [r7, #1358]	; 0x54e
 800280e:	f997 354e 	ldrsb.w	r3, [r7, #1358]	; 0x54e
 8002812:	2b19      	cmp	r3, #25
 8002814:	d00e      	beq.n	8002834 <main+0x420>
      			while (uks < uend) {
 8002816:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 800281a:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800281e:	429a      	cmp	r2, r3
 8002820:	f4ff af62 	bcc.w	80026e8 <main+0x2d4>
 8002824:	e007      	b.n	8002836 <main+0x422>
      					break;
 8002826:	bf00      	nop
 8002828:	e005      	b.n	8002836 <main+0x422>
 800282a:	bf00      	nop
 800282c:	08016db4 	.word	0x08016db4
 8002830:	20003d1c 	.word	0x20003d1c
      				if (++ix == MAX_LIST) break;
 8002834:	bf00      	nop
      			}
      			Report(1, "Readed %d records from '%s' file\r\n", ix, cfg);
 8002836:	f997 254e 	ldrsb.w	r2, [r7, #1358]	; 0x54e
 800283a:	4bb2      	ldr	r3, [pc, #712]	; (8002b04 <main+0x6f0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	49b2      	ldr	r1, [pc, #712]	; (8002b08 <main+0x6f4>)
 8002840:	2001      	movs	r0, #1
 8002842:	f002 f85d 	bl	8004900 <Report>
      		}
      	}
      	if (!ix) {
 8002846:	f997 354e 	ldrsb.w	r3, [r7, #1358]	; 0x54e
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10d      	bne.n	800286a <main+0x456>
      		memcpy((uint8_t *)&list[0].band, (uint8_t *)&def_list[0].band, listSize);
 800284e:	4baf      	ldr	r3, [pc, #700]	; (8002b0c <main+0x6f8>)
 8002850:	881b      	ldrh	r3, [r3, #0]
 8002852:	461a      	mov	r2, r3
 8002854:	49ae      	ldr	r1, [pc, #696]	; (8002b10 <main+0x6fc>)
 8002856:	48af      	ldr	r0, [pc, #700]	; (8002b14 <main+0x700>)
 8002858:	f00f fcf4 	bl	8012244 <memcpy>
      		devError |= devFS;
 800285c:	4bae      	ldr	r3, [pc, #696]	; (8002b18 <main+0x704>)
 800285e:	881b      	ldrh	r3, [r3, #0]
 8002860:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002864:	b29a      	uxth	r2, r3
 8002866:	4bac      	ldr	r3, [pc, #688]	; (8002b18 <main+0x704>)
 8002868:	801a      	strh	r2, [r3, #0]
#endif


#ifdef SET_RDA_CHIP

    rdaID = rda5807_init(&Freq);
 800286a:	48ac      	ldr	r0, [pc, #688]	; (8002b1c <main+0x708>)
 800286c:	f002 fc44 	bl	80050f8 <rda5807_init>
 8002870:	4603      	mov	r3, r0
 8002872:	461a      	mov	r2, r3
 8002874:	4baa      	ldr	r3, [pc, #680]	; (8002b20 <main+0x70c>)
 8002876:	701a      	strb	r2, [r3, #0]
    RSSI = rda5807_rssi();
 8002878:	f002 fcac 	bl	80051d4 <rda5807_rssi>
 800287c:	4603      	mov	r3, r0
 800287e:	461a      	mov	r2, r3
 8002880:	4ba8      	ldr	r3, [pc, #672]	; (8002b24 <main+0x710>)
 8002882:	801a      	strh	r2, [r3, #0]
    rda5807_SetVolume(Volume);
 8002884:	4ba8      	ldr	r3, [pc, #672]	; (8002b28 <main+0x714>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	4618      	mov	r0, r3
 800288a:	f002 fe81 	bl	8005590 <rda5807_SetVolume>
    rda5807_SetBassBoost(BassBoost);
 800288e:	4ba7      	ldr	r3, [pc, #668]	; (8002b2c <main+0x718>)
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f002 fec4 	bl	8005620 <rda5807_SetBassBoost>
    stereo = rda5807_Get_StereoMonoFlag();
 8002898:	f002 ffd8 	bl	800584c <rda5807_Get_StereoMonoFlag>
 800289c:	4603      	mov	r3, r0
 800289e:	461a      	mov	r2, r3
 80028a0:	4ba3      	ldr	r3, [pc, #652]	; (8002b30 <main+0x71c>)
 80028a2:	701a      	strb	r2, [r3, #0]
    Chan = rda5807_Get_Channel();
 80028a4:	f002 ffea 	bl	800587c <rda5807_Get_Channel>
 80028a8:	4603      	mov	r3, r0
 80028aa:	461a      	mov	r2, r3
 80028ac:	4ba1      	ldr	r3, [pc, #644]	; (8002b34 <main+0x720>)
 80028ae:	801a      	strh	r2, [r3, #0]
#endif

#ifdef SET_DISPLAY

	#ifdef FONT_6x8
  		FontDef_t Font_6x8 = { 6, 8, Font6x8 };
 80028b0:	4aa1      	ldr	r2, [pc, #644]	; (8002b38 <main+0x724>)
 80028b2:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 80028b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80028ba:	6018      	str	r0, [r3, #0]
 80028bc:	3304      	adds	r3, #4
 80028be:	8019      	strh	r1, [r3, #0]
  		lfnt = &Font_6x8;
 80028c0:	4a9e      	ldr	r2, [pc, #632]	; (8002b3c <main+0x728>)
 80028c2:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 80028c6:	6013      	str	r3, [r2, #0]
	#endif


  	uint16_t lin1 = 1;
 80028c8:	2301      	movs	r3, #1
 80028ca:	f8a7 3512 	strh.w	r3, [r7, #1298]	; 0x512
  	uint16_t lin2 = lin1 + Font_6x8.FontHeight;//chipID...
 80028ce:	f897 34e5 	ldrb.w	r3, [r7, #1253]	; 0x4e5
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	f8b7 3512 	ldrh.w	r3, [r7, #1298]	; 0x512
 80028d8:	4413      	add	r3, r2
 80028da:	f8a7 3510 	strh.w	r3, [r7, #1296]	; 0x510
  	uint16_t lin3 = lin2 + Font_6x8.FontHeight + 1;//Band...
 80028de:	f897 34e5 	ldrb.w	r3, [r7, #1253]	; 0x4e5
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	f8b7 3510 	ldrh.w	r3, [r7, #1296]	; 0x510
 80028e8:	4413      	add	r3, r2
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	3301      	adds	r3, #1
 80028ee:	f8a7 350e 	strh.w	r3, [r7, #1294]	; 0x50e
  	uint16_t lin4 = lin3 + Font_6x8.FontHeight + 1;//Volume...//Freq...
 80028f2:	f897 34e5 	ldrb.w	r3, [r7, #1253]	; 0x4e5
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	f8b7 350e 	ldrh.w	r3, [r7, #1294]	; 0x50e
 80028fc:	4413      	add	r3, r2
 80028fe:	b29b      	uxth	r3, r3
 8002900:	3301      	adds	r3, #1
 8002902:	f8a7 350c 	strh.w	r3, [r7, #1292]	; 0x50c
  	uint16_t lin5 = lin4 + Font_6x8.FontHeight + 1;//Freq...//Volume...
 8002906:	f897 34e5 	ldrb.w	r3, [r7, #1253]	; 0x4e5
 800290a:	b29a      	uxth	r2, r3
 800290c:	f8b7 350c 	ldrh.w	r3, [r7, #1292]	; 0x50c
 8002910:	4413      	add	r3, r2
 8002912:	b29b      	uxth	r3, r3
 8002914:	3301      	adds	r3, #1
 8002916:	f8a7 350a 	strh.w	r3, [r7, #1290]	; 0x50a
  	uint16_t lin6 = lin5 + Font_6x8.FontHeight + 1;//Station
 800291a:	f897 34e5 	ldrb.w	r3, [r7, #1253]	; 0x4e5
 800291e:	b29a      	uxth	r2, r3
 8002920:	f8b7 350a 	ldrh.w	r3, [r7, #1290]	; 0x50a
 8002924:	4413      	add	r3, r2
 8002926:	b29b      	uxth	r3, r3
 8002928:	3301      	adds	r3, #1
 800292a:	f8a7 3508 	strh.w	r3, [r7, #1288]	; 0x508
  	char st[64];
  	char sta[32];
  	char stb[32];

  	ST7565_Reset();
 800292e:	f7fe fbcb 	bl	80010c8 <ST7565_Reset>
  	ST7565_Init();
 8002932:	f7fe fce1 	bl	80012f8 <ST7565_Init>

  	ST7565_CMD_DISPLAY(CMD_DISPLAY_ON);
 8002936:	20af      	movs	r0, #175	; 0xaf
 8002938:	f7fe fcf8 	bl	800132c <ST7565_CMD_DISPLAY>

    int dl = sprintf(tmp, "Ver.%s", ver);
 800293c:	4b80      	ldr	r3, [pc, #512]	; (8002b40 <main+0x72c>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	461a      	mov	r2, r3
 8002942:	4980      	ldr	r1, [pc, #512]	; (8002b44 <main+0x730>)
 8002944:	4880      	ldr	r0, [pc, #512]	; (8002b48 <main+0x734>)
 8002946:	f010 f8fd 	bl	8012b44 <siprintf>
 800294a:	f8c7 0540 	str.w	r0, [r7, #1344]	; 0x540
    uint16_t x = ((SCREEN_WIDTH - (Font_6x8.FontWidth * dl)) >> 1) & 0x7f;
 800294e:	f897 34e4 	ldrb.w	r3, [r7, #1252]	; 0x4e4
 8002952:	461a      	mov	r2, r3
 8002954:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8002958:	fb02 f303 	mul.w	r3, r2, r3
 800295c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002960:	105b      	asrs	r3, r3, #1
 8002962:	b29b      	uxth	r3, r3
 8002964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002968:	f8a7 3506 	strh.w	r3, [r7, #1286]	; 0x506
    ST7565_Print(x, SCREEN_HEIGHT - Font_6x8.FontHeight, tmp, &Font_6x8, 1, PIX_ON);//печатаем надпись с указаным шрифтом и цветом(PIX_ON-белый, PIX_OFF-черный)
 800296c:	f9b7 0506 	ldrsh.w	r0, [r7, #1286]	; 0x506
 8002970:	f897 34e5 	ldrb.w	r3, [r7, #1253]	; 0x4e5
 8002974:	b29b      	uxth	r3, r3
 8002976:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800297a:	b29b      	uxth	r3, r3
 800297c:	b219      	sxth	r1, r3
 800297e:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 8002982:	2201      	movs	r2, #1
 8002984:	9201      	str	r2, [sp, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	9200      	str	r2, [sp, #0]
 800298a:	4a6f      	ldr	r2, [pc, #444]	; (8002b48 <main+0x734>)
 800298c:	f7fe feee 	bl	800176c <ST7565_Print>

	#ifdef SET_RDA_CHIP
    	int il = sprintf(st, "RDA5807 chipID:0x%x", rdaID);
 8002990:	4b63      	ldr	r3, [pc, #396]	; (8002b20 <main+0x70c>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	461a      	mov	r2, r3
 8002996:	f207 43a4 	addw	r3, r7, #1188	; 0x4a4
 800299a:	496c      	ldr	r1, [pc, #432]	; (8002b4c <main+0x738>)
 800299c:	4618      	mov	r0, r3
 800299e:	f010 f8d1 	bl	8012b44 <siprintf>
 80029a2:	f8c7 053c 	str.w	r0, [r7, #1340]	; 0x53c
    	uint16_t xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * il)) >> 1) & 0x7f;
 80029a6:	f897 34e4 	ldrb.w	r3, [r7, #1252]	; 0x4e4
 80029aa:	461a      	mov	r2, r3
 80029ac:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 80029b0:	fb02 f303 	mul.w	r3, r2, r3
 80029b4:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80029b8:	105b      	asrs	r3, r3, #1
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029c0:	f8a7 353a 	strh.w	r3, [r7, #1338]	; 0x53a
    	if (!xf) xf = 1;
 80029c4:	f8b7 353a 	ldrh.w	r3, [r7, #1338]	; 0x53a
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d102      	bne.n	80029d2 <main+0x5be>
 80029cc:	2301      	movs	r3, #1
 80029ce:	f8a7 353a 	strh.w	r3, [r7, #1338]	; 0x53a
    	ST7565_Print(xf, lin2, st, &Font_6x8, 1, PIX_ON);
 80029d2:	f9b7 053a 	ldrsh.w	r0, [r7, #1338]	; 0x53a
 80029d6:	f9b7 1510 	ldrsh.w	r1, [r7, #1296]	; 0x510
 80029da:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 80029de:	f207 42a4 	addw	r2, r7, #1188	; 0x4a4
 80029e2:	2401      	movs	r4, #1
 80029e4:	9401      	str	r4, [sp, #4]
 80029e6:	2401      	movs	r4, #1
 80029e8:	9400      	str	r4, [sp, #0]
 80029ea:	f7fe febf 	bl	800176c <ST7565_Print>

    	int it = sprintf(stb, "FM Band:%s", allBands[Band]);//(uint16_t)lBand, (uint16_t)rBand);
 80029ee:	4b58      	ldr	r3, [pc, #352]	; (8002b50 <main+0x73c>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	461a      	mov	r2, r3
 80029f4:	4b57      	ldr	r3, [pc, #348]	; (8002b54 <main+0x740>)
 80029f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80029fa:	f207 4364 	addw	r3, r7, #1124	; 0x464
 80029fe:	4956      	ldr	r1, [pc, #344]	; (8002b58 <main+0x744>)
 8002a00:	4618      	mov	r0, r3
 8002a02:	f010 f89f 	bl	8012b44 <siprintf>
 8002a06:	f8c7 0500 	str.w	r0, [r7, #1280]	; 0x500
    	int lit = it;
 8002a0a:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 8002a0e:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
    	xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * it)) >> 1) & 0x7f;
 8002a12:	f897 34e4 	ldrb.w	r3, [r7, #1252]	; 0x4e4
 8002a16:	461a      	mov	r2, r3
 8002a18:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 8002a1c:	fb02 f303 	mul.w	r3, r2, r3
 8002a20:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002a24:	105b      	asrs	r3, r3, #1
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a2c:	f8a7 353a 	strh.w	r3, [r7, #1338]	; 0x53a
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 8002a30:	f8b7 353a 	ldrh.w	r3, [r7, #1338]	; 0x53a
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <main+0x62c>
 8002a38:	f8b7 353a 	ldrh.w	r3, [r7, #1338]	; 0x53a
 8002a3c:	2b7d      	cmp	r3, #125	; 0x7d
 8002a3e:	d902      	bls.n	8002a46 <main+0x632>
 8002a40:	2301      	movs	r3, #1
 8002a42:	f8a7 353a 	strh.w	r3, [r7, #1338]	; 0x53a
    	ST7565_Print(xf, lin3, stb, &Font_6x8, 1, PIX_ON);
 8002a46:	f9b7 053a 	ldrsh.w	r0, [r7, #1338]	; 0x53a
 8002a4a:	f9b7 150e 	ldrsh.w	r1, [r7, #1294]	; 0x50e
 8002a4e:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 8002a52:	f207 4264 	addw	r2, r7, #1124	; 0x464
 8002a56:	2401      	movs	r4, #1
 8002a58:	9401      	str	r4, [sp, #4]
 8002a5a:	2401      	movs	r4, #1
 8002a5c:	9400      	str	r4, [sp, #0]
 8002a5e:	f7fe fe85 	bl	800176c <ST7565_Print>

    	int im = sprintf(st, "Bass:%u Vol:%u", BassBoost, Volume);
 8002a62:	4b32      	ldr	r3, [pc, #200]	; (8002b2c <main+0x718>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	461a      	mov	r2, r3
 8002a68:	4b2f      	ldr	r3, [pc, #188]	; (8002b28 <main+0x714>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	f207 40a4 	addw	r0, r7, #1188	; 0x4a4
 8002a70:	493a      	ldr	r1, [pc, #232]	; (8002b5c <main+0x748>)
 8002a72:	f010 f867 	bl	8012b44 <siprintf>
 8002a76:	f8c7 04fc 	str.w	r0, [r7, #1276]	; 0x4fc
    	int lim = im;
 8002a7a:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 8002a7e:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
    	xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * im)) >> 1) & 0x7f;
 8002a82:	f897 34e4 	ldrb.w	r3, [r7, #1252]	; 0x4e4
 8002a86:	461a      	mov	r2, r3
 8002a88:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 8002a8c:	fb02 f303 	mul.w	r3, r2, r3
 8002a90:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002a94:	105b      	asrs	r3, r3, #1
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a9c:	f8a7 353a 	strh.w	r3, [r7, #1338]	; 0x53a
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 8002aa0:	f8b7 353a 	ldrh.w	r3, [r7, #1338]	; 0x53a
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <main+0x69c>
 8002aa8:	f8b7 353a 	ldrh.w	r3, [r7, #1338]	; 0x53a
 8002aac:	2b7d      	cmp	r3, #125	; 0x7d
 8002aae:	d902      	bls.n	8002ab6 <main+0x6a2>
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	f8a7 353a 	strh.w	r3, [r7, #1338]	; 0x53a
    	ST7565_Print(xf, lin4, st, &Font_6x8, 1, PIX_ON);
 8002ab6:	f9b7 053a 	ldrsh.w	r0, [r7, #1338]	; 0x53a
 8002aba:	f9b7 150c 	ldrsh.w	r1, [r7, #1292]	; 0x50c
 8002abe:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 8002ac2:	f207 42a4 	addw	r2, r7, #1188	; 0x4a4
 8002ac6:	2401      	movs	r4, #1
 8002ac8:	9401      	str	r4, [sp, #4]
 8002aca:	2401      	movs	r4, #1
 8002acc:	9400      	str	r4, [sp, #0]
 8002ace:	f7fe fe4d 	bl	800176c <ST7565_Print>

    	if (stereo)
 8002ad2:	4b17      	ldr	r3, [pc, #92]	; (8002b30 <main+0x71c>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d044      	beq.n	8002b64 <main+0x750>
    		il = sprintf(st, "Rssi:%u Freq:%.1f S", RSSI, Freq);
 8002ada:	4b12      	ldr	r3, [pc, #72]	; (8002b24 <main+0x710>)
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	461c      	mov	r4, r3
 8002ae0:	4b0e      	ldr	r3, [pc, #56]	; (8002b1c <main+0x708>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7fd fd2f 	bl	8000548 <__aeabi_f2d>
 8002aea:	4602      	mov	r2, r0
 8002aec:	460b      	mov	r3, r1
 8002aee:	f207 40a4 	addw	r0, r7, #1188	; 0x4a4
 8002af2:	e9cd 2300 	strd	r2, r3, [sp]
 8002af6:	4622      	mov	r2, r4
 8002af8:	4919      	ldr	r1, [pc, #100]	; (8002b60 <main+0x74c>)
 8002afa:	f010 f823 	bl	8012b44 <siprintf>
 8002afe:	f8c7 053c 	str.w	r0, [r7, #1340]	; 0x53c
 8002b02:	e043      	b.n	8002b8c <main+0x778>
 8002b04:	200001dc 	.word	0x200001dc
 8002b08:	08016db8 	.word	0x08016db8
 8002b0c:	200040a0 	.word	0x200040a0
 8002b10:	08017dfc 	.word	0x08017dfc
 8002b14:	20003d1c 	.word	0x20003d1c
 8002b18:	20001890 	.word	0x20001890
 8002b1c:	200001e4 	.word	0x200001e4
 8002b20:	20003d14 	.word	0x20003d14
 8002b24:	20003d12 	.word	0x20003d12
 8002b28:	200001ef 	.word	0x200001ef
 8002b2c:	20003d16 	.word	0x20003d16
 8002b30:	20003d18 	.word	0x20003d18
 8002b34:	20003d10 	.word	0x20003d10
 8002b38:	08017170 	.word	0x08017170
 8002b3c:	20003d04 	.word	0x20003d04
 8002b40:	20000004 	.word	0x20000004
 8002b44:	08016ddc 	.word	0x08016ddc
 8002b48:	20001010 	.word	0x20001010
 8002b4c:	08016de4 	.word	0x08016de4
 8002b50:	200001ec 	.word	0x200001ec
 8002b54:	200001f8 	.word	0x200001f8
 8002b58:	08016df8 	.word	0x08016df8
 8002b5c:	08016e04 	.word	0x08016e04
 8002b60:	08016e14 	.word	0x08016e14
    	else
    		il = sprintf(st, "Rssi:%u Freq:%.1f", RSSI, Freq);
 8002b64:	4bb3      	ldr	r3, [pc, #716]	; (8002e34 <main+0xa20>)
 8002b66:	881b      	ldrh	r3, [r3, #0]
 8002b68:	461c      	mov	r4, r3
 8002b6a:	4bb3      	ldr	r3, [pc, #716]	; (8002e38 <main+0xa24>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7fd fcea 	bl	8000548 <__aeabi_f2d>
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	f207 40a4 	addw	r0, r7, #1188	; 0x4a4
 8002b7c:	e9cd 2300 	strd	r2, r3, [sp]
 8002b80:	4622      	mov	r2, r4
 8002b82:	49ae      	ldr	r1, [pc, #696]	; (8002e3c <main+0xa28>)
 8002b84:	f00f ffde 	bl	8012b44 <siprintf>
 8002b88:	f8c7 053c 	str.w	r0, [r7, #1340]	; 0x53c
    	int lil = il;
 8002b8c:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8002b90:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
    	xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * il)) >> 1) & 0x7f;
 8002b94:	f897 34e4 	ldrb.w	r3, [r7, #1252]	; 0x4e4
 8002b98:	461a      	mov	r2, r3
 8002b9a:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8002b9e:	fb02 f303 	mul.w	r3, r2, r3
 8002ba2:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002ba6:	105b      	asrs	r3, r3, #1
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bae:	f8a7 353a 	strh.w	r3, [r7, #1338]	; 0x53a
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 8002bb2:	f8b7 353a 	ldrh.w	r3, [r7, #1338]	; 0x53a
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <main+0x7ae>
 8002bba:	f8b7 353a 	ldrh.w	r3, [r7, #1338]	; 0x53a
 8002bbe:	2b7d      	cmp	r3, #125	; 0x7d
 8002bc0:	d902      	bls.n	8002bc8 <main+0x7b4>
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	f8a7 353a 	strh.w	r3, [r7, #1338]	; 0x53a
    	ST7565_Print(xf, lin5, st, &Font_6x8, 1, PIX_ON);
 8002bc8:	f9b7 053a 	ldrsh.w	r0, [r7, #1338]	; 0x53a
 8002bcc:	f9b7 150a 	ldrsh.w	r1, [r7, #1290]	; 0x50a
 8002bd0:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 8002bd4:	f207 42a4 	addw	r2, r7, #1188	; 0x4a4
 8002bd8:	2401      	movs	r4, #1
 8002bda:	9401      	str	r4, [sp, #4]
 8002bdc:	2401      	movs	r4, #1
 8002bde:	9400      	str	r4, [sp, #0]
 8002be0:	f7fe fdc4 	bl	800176c <ST7565_Print>

    	int ia = sprintf(sta, "%s", nameStation(Freq));
 8002be4:	4b94      	ldr	r3, [pc, #592]	; (8002e38 <main+0xa24>)
 8002be6:	edd3 7a00 	vldr	s15, [r3]
 8002bea:	eeb0 0a67 	vmov.f32	s0, s15
 8002bee:	f001 fbcf 	bl	8004390 <nameStation>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	f207 4384 	addw	r3, r7, #1156	; 0x484
 8002bf8:	4991      	ldr	r1, [pc, #580]	; (8002e40 <main+0xa2c>)
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f00f ffa2 	bl	8012b44 <siprintf>
 8002c00:	f8c7 04f8 	str.w	r0, [r7, #1272]	; 0x4f8
    	int lia = ia;
 8002c04:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	; 0x4f8
 8002c08:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
    	xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * ia)) >> 1) & 0x7f;
 8002c0c:	f897 34e4 	ldrb.w	r3, [r7, #1252]	; 0x4e4
 8002c10:	461a      	mov	r2, r3
 8002c12:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	; 0x4f8
 8002c16:	fb02 f303 	mul.w	r3, r2, r3
 8002c1a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002c1e:	105b      	asrs	r3, r3, #1
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c26:	f8a7 353a 	strh.w	r3, [r7, #1338]	; 0x53a
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 8002c2a:	f8b7 353a 	ldrh.w	r3, [r7, #1338]	; 0x53a
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <main+0x826>
 8002c32:	f8b7 353a 	ldrh.w	r3, [r7, #1338]	; 0x53a
 8002c36:	2b7d      	cmp	r3, #125	; 0x7d
 8002c38:	d902      	bls.n	8002c40 <main+0x82c>
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	f8a7 353a 	strh.w	r3, [r7, #1338]	; 0x53a
    	ST7565_Print(xf, lin6, sta, &Font_6x8, 1, PIX_ON);
 8002c40:	f9b7 053a 	ldrsh.w	r0, [r7, #1338]	; 0x53a
 8002c44:	f9b7 1508 	ldrsh.w	r1, [r7, #1288]	; 0x508
 8002c48:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 8002c4c:	f207 4284 	addw	r2, r7, #1156	; 0x484
 8002c50:	2401      	movs	r4, #1
 8002c52:	9401      	str	r4, [sp, #4]
 8002c54:	2401      	movs	r4, #1
 8002c56:	9400      	str	r4, [sp, #0]
 8002c58:	f7fe fd88 	bl	800176c <ST7565_Print>

    	Report(1, "ChipID:0x%x Chan:%u Freq:%.2f %s RSSI:%u Band:%s Vol:%u BassEn:%u\r\n",
 8002c5c:	4b79      	ldr	r3, [pc, #484]	; (8002e44 <main+0xa30>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	461e      	mov	r6, r3
 8002c62:	4b79      	ldr	r3, [pc, #484]	; (8002e48 <main+0xa34>)
 8002c64:	881b      	ldrh	r3, [r3, #0]
 8002c66:	4698      	mov	r8, r3
 8002c68:	4b73      	ldr	r3, [pc, #460]	; (8002e38 <main+0xa24>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7fd fc6b 	bl	8000548 <__aeabi_f2d>
 8002c72:	4602      	mov	r2, r0
 8002c74:	460b      	mov	r3, r1
 8002c76:	496f      	ldr	r1, [pc, #444]	; (8002e34 <main+0xa20>)
 8002c78:	8809      	ldrh	r1, [r1, #0]
 8002c7a:	460c      	mov	r4, r1
 8002c7c:	4973      	ldr	r1, [pc, #460]	; (8002e4c <main+0xa38>)
 8002c7e:	7809      	ldrb	r1, [r1, #0]
 8002c80:	4608      	mov	r0, r1
 8002c82:	4973      	ldr	r1, [pc, #460]	; (8002e50 <main+0xa3c>)
 8002c84:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8002c88:	4872      	ldr	r0, [pc, #456]	; (8002e54 <main+0xa40>)
 8002c8a:	7800      	ldrb	r0, [r0, #0]
 8002c8c:	4605      	mov	r5, r0
 8002c8e:	4872      	ldr	r0, [pc, #456]	; (8002e58 <main+0xa44>)
 8002c90:	7800      	ldrb	r0, [r0, #0]
 8002c92:	9006      	str	r0, [sp, #24]
 8002c94:	9505      	str	r5, [sp, #20]
 8002c96:	9104      	str	r1, [sp, #16]
 8002c98:	9403      	str	r4, [sp, #12]
 8002c9a:	f207 4184 	addw	r1, r7, #1156	; 0x484
 8002c9e:	9102      	str	r1, [sp, #8]
 8002ca0:	e9cd 2300 	strd	r2, r3, [sp]
 8002ca4:	4643      	mov	r3, r8
 8002ca6:	4632      	mov	r2, r6
 8002ca8:	496c      	ldr	r1, [pc, #432]	; (8002e5c <main+0xa48>)
 8002caa:	2001      	movs	r0, #1
 8002cac:	f001 fe28 	bl	8004900 <Report>
    			rdaID, Chan, Freq, sta, RSSI, allBands[Band], Volume, BassBoost);
	#endif

    ST7565_DrawRectangle(0, Font_6x8.FontHeight, SCREEN_WIDTH - 1, SCREEN_HEIGHT - (Font_6x8.FontHeight << 1) - 2, PIX_ON);
 8002cb0:	f897 34e5 	ldrb.w	r3, [r7, #1253]	; 0x4e5
 8002cb4:	b219      	sxth	r1, r3
 8002cb6:	f897 34e5 	ldrb.w	r3, [r7, #1253]	; 0x4e5
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	f1c3 033e 	rsb	r3, r3, #62	; 0x3e
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	b21b      	sxth	r3, r3
 8002cc8:	2201      	movs	r2, #1
 8002cca:	9200      	str	r2, [sp, #0]
 8002ccc:	227f      	movs	r2, #127	; 0x7f
 8002cce:	2000      	movs	r0, #0
 8002cd0:	f7fe ff23 	bl	8001b1a <ST7565_DrawRectangle>
    ST7565_DrawFilledRectangle(0, 0, SCREEN_WIDTH - 1, Font_6x8.FontHeight, PIX_ON);
 8002cd4:	f897 34e5 	ldrb.w	r3, [r7, #1253]	; 0x4e5
 8002cd8:	b21b      	sxth	r3, r3
 8002cda:	2201      	movs	r2, #1
 8002cdc:	9200      	str	r2, [sp, #0]
 8002cde:	227f      	movs	r2, #127	; 0x7f
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	2000      	movs	r0, #0
 8002ce4:	f7fe ff9b 	bl	8001c1e <ST7565_DrawFilledRectangle>
    ST7565_Update();
 8002ce8:	f7fe fb90 	bl	800140c <ST7565_Update>

    startSec = true;
 8002cec:	4b5c      	ldr	r3, [pc, #368]	; (8002e60 <main+0xa4c>)
 8002cee:	2201      	movs	r2, #1
 8002cf0:	701a      	strb	r2, [r3, #0]

#endif

    uint16_t lastErr = devOK;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	f8a7 3538 	strh.w	r3, [r7, #1336]	; 0x538

    putEvt(evt_Freq);
 8002cf8:	200c      	movs	r0, #12
 8002cfa:	f001 fa97 	bl	800422c <putEvt>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


    while (!restart) {
 8002cfe:	f000 beaf 	b.w	8003a60 <main+0x164c>


#ifdef SET_FIFO_MODE
    	evt = getEvt();
 8002d02:	f001 fb05 	bl	8004310 <getEvt>
 8002d06:	4603      	mov	r3, r0
 8002d08:	4a56      	ldr	r2, [pc, #344]	; (8002e64 <main+0xa50>)
 8002d0a:	6013      	str	r3, [r2, #0]
    	if (evt != evt_None) {
 8002d0c:	4b55      	ldr	r3, [pc, #340]	; (8002e64 <main+0xa50>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d14:	f000 8624 	beq.w	8003960 <main+0x154c>
    		cntEvt = getEvtCount();
 8002d18:	f001 fa7c 	bl	8004214 <getEvtCount>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	461a      	mov	r2, r3
 8002d20:	4b51      	ldr	r3, [pc, #324]	; (8002e68 <main+0xa54>)
 8002d22:	701a      	strb	r2, [r3, #0]
    		if (evt != evt_Sec) {
 8002d24:	4b4f      	ldr	r3, [pc, #316]	; (8002e64 <main+0xa50>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2b08      	cmp	r3, #8
 8002d2a:	d050      	beq.n	8002dce <main+0x9ba>
    			Report(1, "[que:%u] get event '%s'\r\n", cntEvt, str_cmds[evt]);
 8002d2c:	4b4e      	ldr	r3, [pc, #312]	; (8002e68 <main+0xa54>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	4619      	mov	r1, r3
 8002d34:	4b4b      	ldr	r3, [pc, #300]	; (8002e64 <main+0xa50>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a4c      	ldr	r2, [pc, #304]	; (8002e6c <main+0xa58>)
 8002d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d3e:	460a      	mov	r2, r1
 8002d40:	494b      	ldr	r1, [pc, #300]	; (8002e70 <main+0xa5c>)
 8002d42:	2001      	movs	r0, #1
 8002d44:	f001 fddc 	bl	8004900 <Report>
#ifdef SET_DISPLAY
    			ST7565_DrawFilledRectangle(0, SCREEN_HEIGHT - Font_6x8.FontHeight, SCREEN_WIDTH - 1, Font_6x8.FontHeight, PIX_OFF);
 8002d48:	f897 34e5 	ldrb.w	r3, [r7, #1253]	; 0x4e5
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	b219      	sxth	r1, r3
 8002d56:	f897 34e5 	ldrb.w	r3, [r7, #1253]	; 0x4e5
 8002d5a:	b21b      	sxth	r3, r3
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	9200      	str	r2, [sp, #0]
 8002d60:	227f      	movs	r2, #127	; 0x7f
 8002d62:	2000      	movs	r0, #0
 8002d64:	f7fe ff5b 	bl	8001c1e <ST7565_DrawFilledRectangle>
    			dl = sprintf(tmp, "evt(%u) : %s", cntEvt, str_cmds[evt]);
 8002d68:	4b3f      	ldr	r3, [pc, #252]	; (8002e68 <main+0xa54>)
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4b3c      	ldr	r3, [pc, #240]	; (8002e64 <main+0xa50>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a3d      	ldr	r2, [pc, #244]	; (8002e6c <main+0xa58>)
 8002d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d7a:	460a      	mov	r2, r1
 8002d7c:	493d      	ldr	r1, [pc, #244]	; (8002e74 <main+0xa60>)
 8002d7e:	483e      	ldr	r0, [pc, #248]	; (8002e78 <main+0xa64>)
 8002d80:	f00f fee0 	bl	8012b44 <siprintf>
 8002d84:	f8c7 0540 	str.w	r0, [r7, #1344]	; 0x540
    			x = ((SCREEN_WIDTH - (Font_6x8.FontWidth * dl)) >> 1) & 0x7f;
 8002d88:	f897 34e4 	ldrb.w	r3, [r7, #1252]	; 0x4e4
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8002d92:	fb02 f303 	mul.w	r3, r2, r3
 8002d96:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002d9a:	105b      	asrs	r3, r3, #1
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002da2:	f8a7 3506 	strh.w	r3, [r7, #1286]	; 0x506
    			ST7565_Print(x, SCREEN_HEIGHT - Font_6x8.FontHeight, tmp, &Font_6x8, 1, PIX_ON);//печатаем надпись с указаным шрифтом и цветом(PIX_ON-белый, PIX_OFF-черный)
 8002da6:	f9b7 0506 	ldrsh.w	r0, [r7, #1286]	; 0x506
 8002daa:	f897 34e5 	ldrb.w	r3, [r7, #1253]	; 0x4e5
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	b219      	sxth	r1, r3
 8002db8:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	9201      	str	r2, [sp, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	9200      	str	r2, [sp, #0]
 8002dc4:	4a2c      	ldr	r2, [pc, #176]	; (8002e78 <main+0xa64>)
 8002dc6:	f7fe fcd1 	bl	800176c <ST7565_Print>
    			ST7565_Update();
 8002dca:	f7fe fb1f 	bl	800140c <ST7565_Update>
#endif
    		}
    		switch (evt) {
 8002dce:	4b25      	ldr	r3, [pc, #148]	; (8002e64 <main+0xa50>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2b14      	cmp	r3, #20
 8002dd4:	f200 85b4 	bhi.w	8003940 <main+0x152c>
 8002dd8:	a201      	add	r2, pc, #4	; (adr r2, 8002de0 <main+0x9cc>)
 8002dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dde:	bf00      	nop
 8002de0:	0800364b 	.word	0x0800364b
 8002de4:	08003699 	.word	0x08003699
 8002de8:	080036b1 	.word	0x080036b1
 8002dec:	080036d1 	.word	0x080036d1
 8002df0:	08003745 	.word	0x08003745
 8002df4:	080038e9 	.word	0x080038e9
 8002df8:	08003745 	.word	0x08003745
 8002dfc:	08003867 	.word	0x08003867
 8002e00:	080033f1 	.word	0x080033f1
 8002e04:	08003387 	.word	0x08003387
 8002e08:	08003633 	.word	0x08003633
 8002e0c:	08003367 	.word	0x08003367
 8002e10:	08003217 	.word	0x08003217
 8002e14:	080030a3 	.word	0x080030a3
 8002e18:	0800318d 	.word	0x0800318d
 8002e1c:	08003027 	.word	0x08003027
 8002e20:	08002f83 	.word	0x08002f83
 8002e24:	08002e7d 	.word	0x08002e7d
 8002e28:	08002f49 	.word	0x08002f49
 8002e2c:	08002f61 	.word	0x08002f61
 8002e30:	08002f7b 	.word	0x08002f7b
 8002e34:	20003d12 	.word	0x20003d12
 8002e38:	200001e4 	.word	0x200001e4
 8002e3c:	08016e28 	.word	0x08016e28
 8002e40:	08016d50 	.word	0x08016d50
 8002e44:	20003d14 	.word	0x20003d14
 8002e48:	20003d10 	.word	0x20003d10
 8002e4c:	200001ec 	.word	0x200001ec
 8002e50:	200001f8 	.word	0x200001f8
 8002e54:	200001ef 	.word	0x200001ef
 8002e58:	20003d16 	.word	0x20003d16
 8002e5c:	08016e3c 	.word	0x08016e3c
 8002e60:	20003d02 	.word	0x20003d02
 8002e64:	200001c4 	.word	0x200001c4
 8002e68:	20001cac 	.word	0x20001cac
 8002e6c:	20000070 	.word	0x20000070
 8002e70:	08016e80 	.word	0x08016e80
 8002e74:	08016e9c 	.word	0x08016e9c
 8002e78:	20001010 	.word	0x20001010
    			case evt_Band:
    				Band = newBand;
 8002e7c:	4ba8      	ldr	r3, [pc, #672]	; (8003120 <main+0xd0c>)
 8002e7e:	781a      	ldrb	r2, [r3, #0]
 8002e80:	4ba8      	ldr	r3, [pc, #672]	; (8003124 <main+0xd10>)
 8002e82:	701a      	strb	r2, [r3, #0]
    				if (!rda5807_Set_Band(Band)) {
 8002e84:	4ba7      	ldr	r3, [pc, #668]	; (8003124 <main+0xd10>)
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f002 fd09 	bl	80058a0 <rda5807_Set_Band>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f040 8548 	bne.w	8003926 <main+0x1512>
    					sprintf(stb, "FM Band:%s", allBands[Band]);//(uint16_t)lBand, (uint16_t)rBand);
 8002e96:	4ba3      	ldr	r3, [pc, #652]	; (8003124 <main+0xd10>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	4ba2      	ldr	r3, [pc, #648]	; (8003128 <main+0xd14>)
 8002e9e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002ea2:	f207 4364 	addw	r3, r7, #1124	; 0x464
 8002ea6:	49a1      	ldr	r1, [pc, #644]	; (800312c <main+0xd18>)
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f00f fe4b 	bl	8012b44 <siprintf>
    					showLine(stb, lin3, &lit, true);
 8002eae:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 8002eb2:	f8b7 150e 	ldrh.w	r1, [r7, #1294]	; 0x50e
 8002eb6:	f207 4064 	addw	r0, r7, #1124	; 0x464
 8002eba:	2301      	movs	r3, #1
 8002ebc:	f001 fb92 	bl	80045e4 <showLine>
    					Report(1, "[que:%u] set new band=%u '%s'\r\n", cntEvt, Band, allBands[Band]);
 8002ec0:	4b9b      	ldr	r3, [pc, #620]	; (8003130 <main+0xd1c>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	4b96      	ldr	r3, [pc, #600]	; (8003124 <main+0xd10>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	4b95      	ldr	r3, [pc, #596]	; (8003124 <main+0xd10>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	4b94      	ldr	r3, [pc, #592]	; (8003128 <main+0xd14>)
 8002ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	4603      	mov	r3, r0
 8002ede:	460a      	mov	r2, r1
 8002ee0:	4994      	ldr	r1, [pc, #592]	; (8003134 <main+0xd20>)
 8002ee2:	2001      	movs	r0, #1
 8002ee4:	f001 fd0c 	bl	8004900 <Report>
    					if (next_evt == evt) {
 8002ee8:	4b93      	ldr	r3, [pc, #588]	; (8003138 <main+0xd24>)
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	4b93      	ldr	r3, [pc, #588]	; (800313c <main+0xd28>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d120      	bne.n	8002f36 <main+0xb22>
    						if ((Freq < lBand) || (Freq > rBand)) {
 8002ef4:	4b92      	ldr	r3, [pc, #584]	; (8003140 <main+0xd2c>)
 8002ef6:	ed93 7a00 	vldr	s14, [r3]
 8002efa:	4b92      	ldr	r3, [pc, #584]	; (8003144 <main+0xd30>)
 8002efc:	edd3 7a00 	vldr	s15, [r3]
 8002f00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f08:	d40c      	bmi.n	8002f24 <main+0xb10>
 8002f0a:	4b8d      	ldr	r3, [pc, #564]	; (8003140 <main+0xd2c>)
 8002f0c:	ed93 7a00 	vldr	s14, [r3]
 8002f10:	4b8d      	ldr	r3, [pc, #564]	; (8003148 <main+0xd34>)
 8002f12:	edd3 7a00 	vldr	s15, [r3]
 8002f16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f1e:	dc01      	bgt.n	8002f24 <main+0xb10>
    					} else {
    						next_evt = evt;
    						putEvt(evt_Freq);
    					}
    				}
    			break;
 8002f20:	f000 bd01 	b.w	8003926 <main+0x1512>
    							newFreq = lBand;
 8002f24:	4b87      	ldr	r3, [pc, #540]	; (8003144 <main+0xd30>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a88      	ldr	r2, [pc, #544]	; (800314c <main+0xd38>)
 8002f2a:	6013      	str	r3, [r2, #0]
    							putEvt(evt_Freq);
 8002f2c:	200c      	movs	r0, #12
 8002f2e:	f001 f97d 	bl	800422c <putEvt>
    			break;
 8002f32:	f000 bcf8 	b.w	8003926 <main+0x1512>
    						next_evt = evt;
 8002f36:	4b81      	ldr	r3, [pc, #516]	; (800313c <main+0xd28>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a7f      	ldr	r2, [pc, #508]	; (8003138 <main+0xd24>)
 8002f3c:	6013      	str	r3, [r2, #0]
    						putEvt(evt_Freq);
 8002f3e:	200c      	movs	r0, #12
 8002f40:	f001 f974 	bl	800422c <putEvt>
    			break;
 8002f44:	f000 bcef 	b.w	8003926 <main+0x1512>
#ifdef SET_FAT_FS
    			case evt_Dir:
    				if (mnt) dirList(dirName);
 8002f48:	4b81      	ldr	r3, [pc, #516]	; (8003150 <main+0xd3c>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 84ec 	beq.w	800392a <main+0x1516>
 8002f52:	4b80      	ldr	r3, [pc, #512]	; (8003154 <main+0xd40>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff f83c 	bl	8001fd4 <dirList>
    			break;
 8002f5c:	f000 bce5 	b.w	800392a <main+0x1516>
    			case evt_Cat:
    				if (mnt) rdFile(cfg, NULL);
 8002f60:	4b7b      	ldr	r3, [pc, #492]	; (8003150 <main+0xd3c>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f000 84e2 	beq.w	800392e <main+0x151a>
 8002f6a:	4b7b      	ldr	r3, [pc, #492]	; (8003158 <main+0xd44>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2100      	movs	r1, #0
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff f985 	bl	8002280 <rdFile>
    			break;
 8002f76:	f000 bcda 	b.w	800392e <main+0x151a>
#endif
    			case evt_Cfg:
    				showCfg();
 8002f7a:	f7ff f9ff 	bl	800237c <showCfg>
    			break;
 8002f7e:	f000 bcdf 	b.w	8003940 <main+0x152c>
    			case evt_List:
    				next_evt = evt_Freq;
 8002f82:	4b6d      	ldr	r3, [pc, #436]	; (8003138 <main+0xd24>)
 8002f84:	220c      	movs	r2, #12
 8002f86:	601a      	str	r2, [r3, #0]
    				newFreq = getNextList(Freq, seek_up, &newBand);
 8002f88:	4b6d      	ldr	r3, [pc, #436]	; (8003140 <main+0xd2c>)
 8002f8a:	edd3 7a00 	vldr	s15, [r3]
 8002f8e:	4b73      	ldr	r3, [pc, #460]	; (800315c <main+0xd48>)
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	4962      	ldr	r1, [pc, #392]	; (8003120 <main+0xd0c>)
 8002f96:	4618      	mov	r0, r3
 8002f98:	eeb0 0a67 	vmov.f32	s0, s15
 8002f9c:	f001 fa3e 	bl	800441c <getNextList>
 8002fa0:	eef0 7a40 	vmov.f32	s15, s0
 8002fa4:	4b69      	ldr	r3, [pc, #420]	; (800314c <main+0xd38>)
 8002fa6:	edc3 7a00 	vstr	s15, [r3]
					if (newBand == Band) {
 8002faa:	4b5d      	ldr	r3, [pc, #372]	; (8003120 <main+0xd0c>)
 8002fac:	781a      	ldrb	r2, [r3, #0]
 8002fae:	4b5d      	ldr	r3, [pc, #372]	; (8003124 <main+0xd10>)
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d119      	bne.n	8002fea <main+0xbd6>
						//next_evt = evt_Freq;
						Report(1, "Band = newBand = %u -> goto set newFreq to %.1f (up = %u)\r\n", newBand, newFreq, seek_up);
 8002fb6:	4b5a      	ldr	r3, [pc, #360]	; (8003120 <main+0xd0c>)
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	461c      	mov	r4, r3
 8002fbc:	4b63      	ldr	r3, [pc, #396]	; (800314c <main+0xd38>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7fd fac1 	bl	8000548 <__aeabi_f2d>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	4964      	ldr	r1, [pc, #400]	; (800315c <main+0xd48>)
 8002fcc:	7809      	ldrb	r1, [r1, #0]
 8002fce:	b2c9      	uxtb	r1, r1
 8002fd0:	9102      	str	r1, [sp, #8]
 8002fd2:	e9cd 2300 	strd	r2, r3, [sp]
 8002fd6:	4622      	mov	r2, r4
 8002fd8:	4961      	ldr	r1, [pc, #388]	; (8003160 <main+0xd4c>)
 8002fda:	2001      	movs	r0, #1
 8002fdc:	f001 fc90 	bl	8004900 <Report>
    					putEvt(evt_Freq);
 8002fe0:	200c      	movs	r0, #12
 8002fe2:	f001 f923 	bl	800422c <putEvt>
					} else {
						Report(1, "Band = %u -> goto set newBand to %u (newFreq to %.1f up = %u)\r\n", Band, newBand, newFreq, seek_up);
    					putEvt(evt_Band);
					}
    			break;
 8002fe6:	f000 bcab 	b.w	8003940 <main+0x152c>
						Report(1, "Band = %u -> goto set newBand to %u (newFreq to %.1f up = %u)\r\n", Band, newBand, newFreq, seek_up);
 8002fea:	4b4e      	ldr	r3, [pc, #312]	; (8003124 <main+0xd10>)
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	461c      	mov	r4, r3
 8002ff0:	4b4b      	ldr	r3, [pc, #300]	; (8003120 <main+0xd0c>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	461d      	mov	r5, r3
 8002ff6:	4b55      	ldr	r3, [pc, #340]	; (800314c <main+0xd38>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fd faa4 	bl	8000548 <__aeabi_f2d>
 8003000:	4602      	mov	r2, r0
 8003002:	460b      	mov	r3, r1
 8003004:	4955      	ldr	r1, [pc, #340]	; (800315c <main+0xd48>)
 8003006:	7809      	ldrb	r1, [r1, #0]
 8003008:	b2c9      	uxtb	r1, r1
 800300a:	9102      	str	r1, [sp, #8]
 800300c:	e9cd 2300 	strd	r2, r3, [sp]
 8003010:	462b      	mov	r3, r5
 8003012:	4622      	mov	r2, r4
 8003014:	4953      	ldr	r1, [pc, #332]	; (8003164 <main+0xd50>)
 8003016:	2001      	movs	r0, #1
 8003018:	f001 fc72 	bl	8004900 <Report>
    					putEvt(evt_Band);
 800301c:	2011      	movs	r0, #17
 800301e:	f001 f905 	bl	800422c <putEvt>
    			break;
 8003022:	f000 bc8d 	b.w	8003940 <main+0x152c>
    			case evt_Bass:
    				if (newBassBoost != BassBoost) {
 8003026:	4b50      	ldr	r3, [pc, #320]	; (8003168 <main+0xd54>)
 8003028:	781a      	ldrb	r2, [r3, #0]
 800302a:	4b50      	ldr	r3, [pc, #320]	; (800316c <main+0xd58>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	429a      	cmp	r2, r3
 8003030:	f000 847f 	beq.w	8003932 <main+0x151e>
    					BassBoost = newBassBoost;
 8003034:	4b4c      	ldr	r3, [pc, #304]	; (8003168 <main+0xd54>)
 8003036:	781a      	ldrb	r2, [r3, #0]
 8003038:	4b4c      	ldr	r3, [pc, #304]	; (800316c <main+0xd58>)
 800303a:	701a      	strb	r2, [r3, #0]
    					rda5807_SetBassBoost(BassBoost);
 800303c:	4b4b      	ldr	r3, [pc, #300]	; (800316c <main+0xd58>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f002 faed 	bl	8005620 <rda5807_SetBassBoost>
    					//
    					if (noMute)
 8003046:	4b4a      	ldr	r3, [pc, #296]	; (8003170 <main+0xd5c>)
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00a      	beq.n	8003064 <main+0xc50>
    						sprintf(st, "Bass:%u Vol:%u", BassBoost, Volume);
 800304e:	4b47      	ldr	r3, [pc, #284]	; (800316c <main+0xd58>)
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	461a      	mov	r2, r3
 8003054:	4b47      	ldr	r3, [pc, #284]	; (8003174 <main+0xd60>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	f207 40a4 	addw	r0, r7, #1188	; 0x4a4
 800305c:	4946      	ldr	r1, [pc, #280]	; (8003178 <main+0xd64>)
 800305e:	f00f fd71 	bl	8012b44 <siprintf>
 8003062:	e009      	b.n	8003078 <main+0xc64>
    					else
    						sprintf(st, "Bass:%u Vol:%u M", BassBoost, Volume);
 8003064:	4b41      	ldr	r3, [pc, #260]	; (800316c <main+0xd58>)
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	461a      	mov	r2, r3
 800306a:	4b42      	ldr	r3, [pc, #264]	; (8003174 <main+0xd60>)
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	f207 40a4 	addw	r0, r7, #1188	; 0x4a4
 8003072:	4942      	ldr	r1, [pc, #264]	; (800317c <main+0xd68>)
 8003074:	f00f fd66 	bl	8012b44 <siprintf>
    					showLine(st, lin4, &lim, true);
 8003078:	f207 425c 	addw	r2, r7, #1116	; 0x45c
 800307c:	f8b7 150c 	ldrh.w	r1, [r7, #1292]	; 0x50c
 8003080:	f207 40a4 	addw	r0, r7, #1188	; 0x4a4
 8003084:	2301      	movs	r3, #1
 8003086:	f001 faad 	bl	80045e4 <showLine>
    					Report(1, "[que:%u] set new BassBoost to %u\r\n", cntEvt, BassBoost);
 800308a:	4b29      	ldr	r3, [pc, #164]	; (8003130 <main+0xd1c>)
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	b2db      	uxtb	r3, r3
 8003090:	461a      	mov	r2, r3
 8003092:	4b36      	ldr	r3, [pc, #216]	; (800316c <main+0xd58>)
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	493a      	ldr	r1, [pc, #232]	; (8003180 <main+0xd6c>)
 8003098:	2001      	movs	r0, #1
 800309a:	f001 fc31 	bl	8004900 <Report>
    				}
    			break;
 800309e:	f000 bc48 	b.w	8003932 <main+0x151e>
    			case evt_Vol:
    				if (newVolume != Volume) {
 80030a2:	4b38      	ldr	r3, [pc, #224]	; (8003184 <main+0xd70>)
 80030a4:	781a      	ldrb	r2, [r3, #0]
 80030a6:	4b33      	ldr	r3, [pc, #204]	; (8003174 <main+0xd60>)
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	f000 8443 	beq.w	8003936 <main+0x1522>
    					Volume = newVolume;
 80030b0:	4b34      	ldr	r3, [pc, #208]	; (8003184 <main+0xd70>)
 80030b2:	781a      	ldrb	r2, [r3, #0]
 80030b4:	4b2f      	ldr	r3, [pc, #188]	; (8003174 <main+0xd60>)
 80030b6:	701a      	strb	r2, [r3, #0]
    					rda5807_SetVolume(Volume);
 80030b8:	4b2e      	ldr	r3, [pc, #184]	; (8003174 <main+0xd60>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	4618      	mov	r0, r3
 80030be:	f002 fa67 	bl	8005590 <rda5807_SetVolume>
    					//
    					if (noMute)
 80030c2:	4b2b      	ldr	r3, [pc, #172]	; (8003170 <main+0xd5c>)
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00a      	beq.n	80030e0 <main+0xccc>
    						sprintf(st, "Bass:%u Vol:%u", BassBoost, Volume);
 80030ca:	4b28      	ldr	r3, [pc, #160]	; (800316c <main+0xd58>)
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	461a      	mov	r2, r3
 80030d0:	4b28      	ldr	r3, [pc, #160]	; (8003174 <main+0xd60>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	f207 40a4 	addw	r0, r7, #1188	; 0x4a4
 80030d8:	4927      	ldr	r1, [pc, #156]	; (8003178 <main+0xd64>)
 80030da:	f00f fd33 	bl	8012b44 <siprintf>
 80030de:	e009      	b.n	80030f4 <main+0xce0>
    					else
    						sprintf(st, "Bass:%u Vol:%u M", BassBoost, Volume);
 80030e0:	4b22      	ldr	r3, [pc, #136]	; (800316c <main+0xd58>)
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	461a      	mov	r2, r3
 80030e6:	4b23      	ldr	r3, [pc, #140]	; (8003174 <main+0xd60>)
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	f207 40a4 	addw	r0, r7, #1188	; 0x4a4
 80030ee:	4923      	ldr	r1, [pc, #140]	; (800317c <main+0xd68>)
 80030f0:	f00f fd28 	bl	8012b44 <siprintf>
    					showLine(st, lin4, &lim, true);
 80030f4:	f207 425c 	addw	r2, r7, #1116	; 0x45c
 80030f8:	f8b7 150c 	ldrh.w	r1, [r7, #1292]	; 0x50c
 80030fc:	f207 40a4 	addw	r0, r7, #1188	; 0x4a4
 8003100:	2301      	movs	r3, #1
 8003102:	f001 fa6f 	bl	80045e4 <showLine>
    					Report(1, "[que:%u] set new Volume to %u\r\n", cntEvt, Volume);
 8003106:	4b0a      	ldr	r3, [pc, #40]	; (8003130 <main+0xd1c>)
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	b2db      	uxtb	r3, r3
 800310c:	461a      	mov	r2, r3
 800310e:	4b19      	ldr	r3, [pc, #100]	; (8003174 <main+0xd60>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	491d      	ldr	r1, [pc, #116]	; (8003188 <main+0xd74>)
 8003114:	2001      	movs	r0, #1
 8003116:	f001 fbf3 	bl	8004900 <Report>
    				}
    			break;
 800311a:	f000 bc0c 	b.w	8003936 <main+0x1522>
 800311e:	bf00      	nop
 8003120:	200001ed 	.word	0x200001ed
 8003124:	200001ec 	.word	0x200001ec
 8003128:	200001f8 	.word	0x200001f8
 800312c:	08016df8 	.word	0x08016df8
 8003130:	20001cac 	.word	0x20001cac
 8003134:	08016eac 	.word	0x08016eac
 8003138:	200001c8 	.word	0x200001c8
 800313c:	200001c4 	.word	0x200001c4
 8003140:	200001e4 	.word	0x200001e4
 8003144:	20003d08 	.word	0x20003d08
 8003148:	20003d0c 	.word	0x20003d0c
 800314c:	200001e8 	.word	0x200001e8
 8003150:	20003d01 	.word	0x20003d01
 8003154:	200001e0 	.word	0x200001e0
 8003158:	200001dc 	.word	0x200001dc
 800315c:	200001ee 	.word	0x200001ee
 8003160:	08016ecc 	.word	0x08016ecc
 8003164:	08016f08 	.word	0x08016f08
 8003168:	20003d17 	.word	0x20003d17
 800316c:	20003d16 	.word	0x20003d16
 8003170:	200001f1 	.word	0x200001f1
 8003174:	200001ef 	.word	0x200001ef
 8003178:	08016e04 	.word	0x08016e04
 800317c:	08016f48 	.word	0x08016f48
 8003180:	08016f5c 	.word	0x08016f5c
 8003184:	200001f0 	.word	0x200001f0
 8003188:	08016f80 	.word	0x08016f80
    			case evt_Mute:
    				noMute = (~noMute) & 1;
 800318c:	4b82      	ldr	r3, [pc, #520]	; (8003398 <main+0xf84>)
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b00      	cmp	r3, #0
 8003196:	bf0c      	ite	eq
 8003198:	2301      	moveq	r3, #1
 800319a:	2300      	movne	r3, #0
 800319c:	b2db      	uxtb	r3, r3
 800319e:	461a      	mov	r2, r3
 80031a0:	4b7d      	ldr	r3, [pc, #500]	; (8003398 <main+0xf84>)
 80031a2:	701a      	strb	r2, [r3, #0]
    				rda5807_Set_Mute(noMute);
 80031a4:	4b7c      	ldr	r3, [pc, #496]	; (8003398 <main+0xf84>)
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f002 fbe5 	bl	8005978 <rda5807_Set_Mute>
    				//
    				if (noMute)
 80031ae:	4b7a      	ldr	r3, [pc, #488]	; (8003398 <main+0xf84>)
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00a      	beq.n	80031cc <main+0xdb8>
    					sprintf(st, "Bass:%u Vol:%u", BassBoost, Volume);
 80031b6:	4b79      	ldr	r3, [pc, #484]	; (800339c <main+0xf88>)
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	461a      	mov	r2, r3
 80031bc:	4b78      	ldr	r3, [pc, #480]	; (80033a0 <main+0xf8c>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	f207 40a4 	addw	r0, r7, #1188	; 0x4a4
 80031c4:	4977      	ldr	r1, [pc, #476]	; (80033a4 <main+0xf90>)
 80031c6:	f00f fcbd 	bl	8012b44 <siprintf>
 80031ca:	e009      	b.n	80031e0 <main+0xdcc>
    				else
    					sprintf(st, "Bass:%u Vol:%u M", BassBoost, Volume);
 80031cc:	4b73      	ldr	r3, [pc, #460]	; (800339c <main+0xf88>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	461a      	mov	r2, r3
 80031d2:	4b73      	ldr	r3, [pc, #460]	; (80033a0 <main+0xf8c>)
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	f207 40a4 	addw	r0, r7, #1188	; 0x4a4
 80031da:	4973      	ldr	r1, [pc, #460]	; (80033a8 <main+0xf94>)
 80031dc:	f00f fcb2 	bl	8012b44 <siprintf>
    				showLine(st, lin4, &lim, true);
 80031e0:	f207 425c 	addw	r2, r7, #1116	; 0x45c
 80031e4:	f8b7 150c 	ldrh.w	r1, [r7, #1292]	; 0x50c
 80031e8:	f207 40a4 	addw	r0, r7, #1188	; 0x4a4
 80031ec:	2301      	movs	r3, #1
 80031ee:	f001 f9f9 	bl	80045e4 <showLine>
    				Report(1, "[que:%u] set Mute to %u\r\n", cntEvt, (~noMute) & 1);
 80031f2:	4b6e      	ldr	r3, [pc, #440]	; (80033ac <main+0xf98>)
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	461a      	mov	r2, r3
 80031fa:	4b67      	ldr	r3, [pc, #412]	; (8003398 <main+0xf84>)
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	bf0c      	ite	eq
 8003206:	2301      	moveq	r3, #1
 8003208:	2300      	movne	r3, #0
 800320a:	b2db      	uxtb	r3, r3
 800320c:	4968      	ldr	r1, [pc, #416]	; (80033b0 <main+0xf9c>)
 800320e:	2001      	movs	r0, #1
 8003210:	f001 fb76 	bl	8004900 <Report>
    			break;
 8003214:	e394      	b.n	8003940 <main+0x152c>
    			case evt_Freq:
    				if ((newFreq >= lBand) && (newFreq <= rBand)) {
 8003216:	4b67      	ldr	r3, [pc, #412]	; (80033b4 <main+0xfa0>)
 8003218:	ed93 7a00 	vldr	s14, [r3]
 800321c:	4b66      	ldr	r3, [pc, #408]	; (80033b8 <main+0xfa4>)
 800321e:	edd3 7a00 	vldr	s15, [r3]
 8003222:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800322a:	da00      	bge.n	800322e <main+0xe1a>
    						sprintf(sta, "%s", nameStation(Freq));
    						showLine(sta, lin6, &lia, true);
    						Report(1, "[que:%u] set new Freq to %.1f %s (Chan:%u)\r\n", cntEvt, Freq, sta, Chan);
    					}
    				}
				break;
 800322c:	e385      	b.n	800393a <main+0x1526>
    				if ((newFreq >= lBand) && (newFreq <= rBand)) {
 800322e:	4b61      	ldr	r3, [pc, #388]	; (80033b4 <main+0xfa0>)
 8003230:	ed93 7a00 	vldr	s14, [r3]
 8003234:	4b61      	ldr	r3, [pc, #388]	; (80033bc <main+0xfa8>)
 8003236:	edd3 7a00 	vldr	s15, [r3]
 800323a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800323e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003242:	d900      	bls.n	8003246 <main+0xe32>
				break;
 8003244:	e379      	b.n	800393a <main+0x1526>
    					if (newFreq != Freq) {
 8003246:	4b5b      	ldr	r3, [pc, #364]	; (80033b4 <main+0xfa0>)
 8003248:	ed93 7a00 	vldr	s14, [r3]
 800324c:	4b5c      	ldr	r3, [pc, #368]	; (80033c0 <main+0xfac>)
 800324e:	edd3 7a00 	vldr	s15, [r3]
 8003252:	eeb4 7a67 	vcmp.f32	s14, s15
 8003256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800325a:	f000 836e 	beq.w	800393a <main+0x1526>
    						Freq = newFreq;
 800325e:	4b55      	ldr	r3, [pc, #340]	; (80033b4 <main+0xfa0>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a57      	ldr	r2, [pc, #348]	; (80033c0 <main+0xfac>)
 8003264:	6013      	str	r3, [r2, #0]
    						uint16_t fr = (uint16_t)(Freq * 10);
 8003266:	4b56      	ldr	r3, [pc, #344]	; (80033c0 <main+0xfac>)
 8003268:	edd3 7a00 	vldr	s15, [r3]
 800326c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003270:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003274:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003278:	ee17 3a90 	vmov	r3, s15
 800327c:	f8a7 34f6 	strh.w	r3, [r7, #1270]	; 0x4f6
    						rda5807_SetFreq_In100Khz(fr);
 8003280:	f8b7 34f6 	ldrh.w	r3, [r7, #1270]	; 0x4f6
 8003284:	4618      	mov	r0, r3
 8003286:	f002 f9eb 	bl	8005660 <rda5807_SetFreq_In100Khz>
    						stereo = rda5807_Get_StereoMonoFlag();
 800328a:	f002 fadf 	bl	800584c <rda5807_Get_StereoMonoFlag>
 800328e:	4603      	mov	r3, r0
 8003290:	461a      	mov	r2, r3
 8003292:	4b4c      	ldr	r3, [pc, #304]	; (80033c4 <main+0xfb0>)
 8003294:	701a      	strb	r2, [r3, #0]
    						Chan = rda5807_Get_Channel();
 8003296:	f002 faf1 	bl	800587c <rda5807_Get_Channel>
 800329a:	4603      	mov	r3, r0
 800329c:	461a      	mov	r2, r3
 800329e:	4b4a      	ldr	r3, [pc, #296]	; (80033c8 <main+0xfb4>)
 80032a0:	801a      	strh	r2, [r3, #0]
    						if (stereo)
 80032a2:	4b48      	ldr	r3, [pc, #288]	; (80033c4 <main+0xfb0>)
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d012      	beq.n	80032d0 <main+0xebc>
    							sprintf(st, "Rssi:%u Freq:%.1f S", RSSI, Freq);
 80032aa:	4b48      	ldr	r3, [pc, #288]	; (80033cc <main+0xfb8>)
 80032ac:	881b      	ldrh	r3, [r3, #0]
 80032ae:	461c      	mov	r4, r3
 80032b0:	4b43      	ldr	r3, [pc, #268]	; (80033c0 <main+0xfac>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7fd f947 	bl	8000548 <__aeabi_f2d>
 80032ba:	4602      	mov	r2, r0
 80032bc:	460b      	mov	r3, r1
 80032be:	f207 40a4 	addw	r0, r7, #1188	; 0x4a4
 80032c2:	e9cd 2300 	strd	r2, r3, [sp]
 80032c6:	4622      	mov	r2, r4
 80032c8:	4941      	ldr	r1, [pc, #260]	; (80033d0 <main+0xfbc>)
 80032ca:	f00f fc3b 	bl	8012b44 <siprintf>
 80032ce:	e011      	b.n	80032f4 <main+0xee0>
    							sprintf(st, "Rssi:%u Freq:%.1f", RSSI, Freq);
 80032d0:	4b3e      	ldr	r3, [pc, #248]	; (80033cc <main+0xfb8>)
 80032d2:	881b      	ldrh	r3, [r3, #0]
 80032d4:	461c      	mov	r4, r3
 80032d6:	4b3a      	ldr	r3, [pc, #232]	; (80033c0 <main+0xfac>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f7fd f934 	bl	8000548 <__aeabi_f2d>
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	f207 40a4 	addw	r0, r7, #1188	; 0x4a4
 80032e8:	e9cd 2300 	strd	r2, r3, [sp]
 80032ec:	4622      	mov	r2, r4
 80032ee:	4939      	ldr	r1, [pc, #228]	; (80033d4 <main+0xfc0>)
 80032f0:	f00f fc28 	bl	8012b44 <siprintf>
    						showLine(st, lin5, &lil, false);
 80032f4:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 80032f8:	f8b7 150a 	ldrh.w	r1, [r7, #1290]	; 0x50a
 80032fc:	f207 40a4 	addw	r0, r7, #1188	; 0x4a4
 8003300:	2300      	movs	r3, #0
 8003302:	f001 f96f 	bl	80045e4 <showLine>
    						sprintf(sta, "%s", nameStation(Freq));
 8003306:	4b2e      	ldr	r3, [pc, #184]	; (80033c0 <main+0xfac>)
 8003308:	edd3 7a00 	vldr	s15, [r3]
 800330c:	eeb0 0a67 	vmov.f32	s0, s15
 8003310:	f001 f83e 	bl	8004390 <nameStation>
 8003314:	4602      	mov	r2, r0
 8003316:	f207 4384 	addw	r3, r7, #1156	; 0x484
 800331a:	492f      	ldr	r1, [pc, #188]	; (80033d8 <main+0xfc4>)
 800331c:	4618      	mov	r0, r3
 800331e:	f00f fc11 	bl	8012b44 <siprintf>
    						showLine(sta, lin6, &lia, true);
 8003322:	f207 4254 	addw	r2, r7, #1108	; 0x454
 8003326:	f8b7 1508 	ldrh.w	r1, [r7, #1288]	; 0x508
 800332a:	f207 4084 	addw	r0, r7, #1156	; 0x484
 800332e:	2301      	movs	r3, #1
 8003330:	f001 f958 	bl	80045e4 <showLine>
    						Report(1, "[que:%u] set new Freq to %.1f %s (Chan:%u)\r\n", cntEvt, Freq, sta, Chan);
 8003334:	4b1d      	ldr	r3, [pc, #116]	; (80033ac <main+0xf98>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	b2db      	uxtb	r3, r3
 800333a:	461c      	mov	r4, r3
 800333c:	4b20      	ldr	r3, [pc, #128]	; (80033c0 <main+0xfac>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f7fd f901 	bl	8000548 <__aeabi_f2d>
 8003346:	4602      	mov	r2, r0
 8003348:	460b      	mov	r3, r1
 800334a:	491f      	ldr	r1, [pc, #124]	; (80033c8 <main+0xfb4>)
 800334c:	8809      	ldrh	r1, [r1, #0]
 800334e:	9103      	str	r1, [sp, #12]
 8003350:	f207 4184 	addw	r1, r7, #1156	; 0x484
 8003354:	9102      	str	r1, [sp, #8]
 8003356:	e9cd 2300 	strd	r2, r3, [sp]
 800335a:	4622      	mov	r2, r4
 800335c:	491f      	ldr	r1, [pc, #124]	; (80033dc <main+0xfc8>)
 800335e:	2001      	movs	r0, #1
 8003360:	f001 face 	bl	8004900 <Report>
				break;
 8003364:	e2e9      	b.n	800393a <main+0x1526>
    			case evt_Scan:
    				if (!scan) {
 8003366:	4b1e      	ldr	r3, [pc, #120]	; (80033e0 <main+0xfcc>)
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	f040 82e6 	bne.w	800393e <main+0x152a>
    					scan = 1;
 8003372:	4b1b      	ldr	r3, [pc, #108]	; (80033e0 <main+0xfcc>)
 8003374:	2201      	movs	r2, #1
 8003376:	701a      	strb	r2, [r3, #0]
    					rda5807_StartSeek(seek_up);
 8003378:	4b1a      	ldr	r3, [pc, #104]	; (80033e4 <main+0xfd0>)
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	b2db      	uxtb	r3, r3
 800337e:	4618      	mov	r0, r3
 8003380:	f002 fa28 	bl	80057d4 <rda5807_StartSeek>
    				}
    			break;
 8003384:	e2db      	b.n	800393e <main+0x152a>
    			case evt_Ver:
    				Report(1, "Ver.%s\r\n", ver);
 8003386:	4b18      	ldr	r3, [pc, #96]	; (80033e8 <main+0xfd4>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	461a      	mov	r2, r3
 800338c:	4917      	ldr	r1, [pc, #92]	; (80033ec <main+0xfd8>)
 800338e:	2001      	movs	r0, #1
 8003390:	f001 fab6 	bl	8004900 <Report>
    			break;
 8003394:	e2d4      	b.n	8003940 <main+0x152c>
 8003396:	bf00      	nop
 8003398:	200001f1 	.word	0x200001f1
 800339c:	20003d16 	.word	0x20003d16
 80033a0:	200001ef 	.word	0x200001ef
 80033a4:	08016e04 	.word	0x08016e04
 80033a8:	08016f48 	.word	0x08016f48
 80033ac:	20001cac 	.word	0x20001cac
 80033b0:	08016fa0 	.word	0x08016fa0
 80033b4:	200001e8 	.word	0x200001e8
 80033b8:	20003d08 	.word	0x20003d08
 80033bc:	20003d0c 	.word	0x20003d0c
 80033c0:	200001e4 	.word	0x200001e4
 80033c4:	20003d18 	.word	0x20003d18
 80033c8:	20003d10 	.word	0x20003d10
 80033cc:	20003d12 	.word	0x20003d12
 80033d0:	08016e14 	.word	0x08016e14
 80033d4:	08016e28 	.word	0x08016e28
 80033d8:	08016d50 	.word	0x08016d50
 80033dc:	08016fbc 	.word	0x08016fbc
 80033e0:	20003d15 	.word	0x20003d15
 80033e4:	200001ee 	.word	0x200001ee
 80033e8:	20000004 	.word	0x20000004
 80033ec:	08016fec 	.word	0x08016fec
    			case evt_Sec:
    			{
#ifdef SET_DISPLAY
    				dl = sec2str(st);
 80033f0:	f207 43a4 	addw	r3, r7, #1188	; 0x4a4
 80033f4:	4618      	mov	r0, r3
 80033f6:	f001 f9e9 	bl	80047cc <sec2str>
 80033fa:	f8c7 0540 	str.w	r0, [r7, #1344]	; 0x540
    				x = ((SCREEN_WIDTH - (Font_6x8.FontWidth * dl)) >> 1) & 0x7f;
 80033fe:	f897 34e4 	ldrb.w	r3, [r7, #1252]	; 0x4e4
 8003402:	461a      	mov	r2, r3
 8003404:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8003408:	fb02 f303 	mul.w	r3, r2, r3
 800340c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8003410:	105b      	asrs	r3, r3, #1
 8003412:	b29b      	uxth	r3, r3
 8003414:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003418:	f8a7 3506 	strh.w	r3, [r7, #1286]	; 0x506
    				ST7565_Print(x, lin1, st, &Font_6x8, 0, PIX_OFF);
 800341c:	f9b7 0506 	ldrsh.w	r0, [r7, #1286]	; 0x506
 8003420:	f9b7 1512 	ldrsh.w	r1, [r7, #1298]	; 0x512
 8003424:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 8003428:	f207 42a4 	addw	r2, r7, #1188	; 0x4a4
 800342c:	2400      	movs	r4, #0
 800342e:	9401      	str	r4, [sp, #4]
 8003430:	2400      	movs	r4, #0
 8003432:	9400      	str	r4, [sp, #0]
 8003434:	f7fe f99a 	bl	800176c <ST7565_Print>
#endif
    				//
    				if (scan) {
 8003438:	4baa      	ldr	r3, [pc, #680]	; (80036e4 <main+0x12d0>)
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d050      	beq.n	80034e4 <main+0x10d0>
    					if (rda5807_Get_SeekTuneReadyFlag()) {
 8003442:	f002 f9f1 	bl	8005828 <rda5807_Get_SeekTuneReadyFlag>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d04b      	beq.n	80034e4 <main+0x10d0>
    						Freq = (float)rda5807_GetFreq_In100Khz();
 800344c:	f002 f982 	bl	8005754 <rda5807_GetFreq_In100Khz>
 8003450:	4603      	mov	r3, r0
 8003452:	ee07 3a90 	vmov	s15, r3
 8003456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800345a:	4ba3      	ldr	r3, [pc, #652]	; (80036e8 <main+0x12d4>)
 800345c:	edc3 7a00 	vstr	s15, [r3]
    						Freq /= 10;
 8003460:	4ba1      	ldr	r3, [pc, #644]	; (80036e8 <main+0x12d4>)
 8003462:	ed93 7a00 	vldr	s14, [r3]
 8003466:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800346a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800346e:	4b9e      	ldr	r3, [pc, #632]	; (80036e8 <main+0x12d4>)
 8003470:	edc3 7a00 	vstr	s15, [r3]
    						scan = 0;
 8003474:	4b9b      	ldr	r3, [pc, #620]	; (80036e4 <main+0x12d0>)
 8003476:	2200      	movs	r2, #0
 8003478:	701a      	strb	r2, [r3, #0]
    						Chan = rda5807_Get_Channel();
 800347a:	f002 f9ff 	bl	800587c <rda5807_Get_Channel>
 800347e:	4603      	mov	r3, r0
 8003480:	461a      	mov	r2, r3
 8003482:	4b9a      	ldr	r3, [pc, #616]	; (80036ec <main+0x12d8>)
 8003484:	801a      	strh	r2, [r3, #0]
    						sprintf(sta, "%s", nameStation(Freq));
 8003486:	4b98      	ldr	r3, [pc, #608]	; (80036e8 <main+0x12d4>)
 8003488:	edd3 7a00 	vldr	s15, [r3]
 800348c:	eeb0 0a67 	vmov.f32	s0, s15
 8003490:	f000 ff7e 	bl	8004390 <nameStation>
 8003494:	4602      	mov	r2, r0
 8003496:	f207 4384 	addw	r3, r7, #1156	; 0x484
 800349a:	4995      	ldr	r1, [pc, #596]	; (80036f0 <main+0x12dc>)
 800349c:	4618      	mov	r0, r3
 800349e:	f00f fb51 	bl	8012b44 <siprintf>
    						showLine(sta, lin6, &lia, true);
 80034a2:	f207 4254 	addw	r2, r7, #1108	; 0x454
 80034a6:	f8b7 1508 	ldrh.w	r1, [r7, #1288]	; 0x508
 80034aa:	f207 4084 	addw	r0, r7, #1156	; 0x484
 80034ae:	2301      	movs	r3, #1
 80034b0:	f001 f898 	bl	80045e4 <showLine>
    						Report(1, "[que:%u] set new Freq to %.1f %s (Chan:%u)\r\n", cntEvt, Freq, sta, Chan);
 80034b4:	4b8f      	ldr	r3, [pc, #572]	; (80036f4 <main+0x12e0>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	461c      	mov	r4, r3
 80034bc:	4b8a      	ldr	r3, [pc, #552]	; (80036e8 <main+0x12d4>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7fd f841 	bl	8000548 <__aeabi_f2d>
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	4988      	ldr	r1, [pc, #544]	; (80036ec <main+0x12d8>)
 80034cc:	8809      	ldrh	r1, [r1, #0]
 80034ce:	9103      	str	r1, [sp, #12]
 80034d0:	f207 4184 	addw	r1, r7, #1156	; 0x484
 80034d4:	9102      	str	r1, [sp, #8]
 80034d6:	e9cd 2300 	strd	r2, r3, [sp]
 80034da:	4622      	mov	r2, r4
 80034dc:	4986      	ldr	r1, [pc, #536]	; (80036f8 <main+0x12e4>)
 80034de:	2001      	movs	r0, #1
 80034e0:	f001 fa0e 	bl	8004900 <Report>
    					}
    				}
    				//
    				uint16_t rssi = rda5807_rssi();
 80034e4:	f001 fe76 	bl	80051d4 <rda5807_rssi>
 80034e8:	4603      	mov	r3, r0
 80034ea:	f8a7 34f4 	strh.w	r3, [r7, #1268]	; 0x4f4
    				if (rssi != RSSI) {
 80034ee:	4b83      	ldr	r3, [pc, #524]	; (80036fc <main+0x12e8>)
 80034f0:	881b      	ldrh	r3, [r3, #0]
 80034f2:	f8b7 24f4 	ldrh.w	r2, [r7, #1268]	; 0x4f4
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d03b      	beq.n	8003572 <main+0x115e>
    					RSSI = rssi;
 80034fa:	4a80      	ldr	r2, [pc, #512]	; (80036fc <main+0x12e8>)
 80034fc:	f8b7 34f4 	ldrh.w	r3, [r7, #1268]	; 0x4f4
 8003500:	8013      	strh	r3, [r2, #0]
    					stereo = rda5807_Get_StereoMonoFlag();
 8003502:	f002 f9a3 	bl	800584c <rda5807_Get_StereoMonoFlag>
 8003506:	4603      	mov	r3, r0
 8003508:	461a      	mov	r2, r3
 800350a:	4b7d      	ldr	r3, [pc, #500]	; (8003700 <main+0x12ec>)
 800350c:	701a      	strb	r2, [r3, #0]
#ifdef SET_DISPLAY
    					if (stereo)
 800350e:	4b7c      	ldr	r3, [pc, #496]	; (8003700 <main+0x12ec>)
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d012      	beq.n	800353c <main+0x1128>
    						sprintf(st, "Rssi:%u Freq:%.1f S", RSSI, Freq);
 8003516:	4b79      	ldr	r3, [pc, #484]	; (80036fc <main+0x12e8>)
 8003518:	881b      	ldrh	r3, [r3, #0]
 800351a:	461c      	mov	r4, r3
 800351c:	4b72      	ldr	r3, [pc, #456]	; (80036e8 <main+0x12d4>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4618      	mov	r0, r3
 8003522:	f7fd f811 	bl	8000548 <__aeabi_f2d>
 8003526:	4602      	mov	r2, r0
 8003528:	460b      	mov	r3, r1
 800352a:	f207 40a4 	addw	r0, r7, #1188	; 0x4a4
 800352e:	e9cd 2300 	strd	r2, r3, [sp]
 8003532:	4622      	mov	r2, r4
 8003534:	4973      	ldr	r1, [pc, #460]	; (8003704 <main+0x12f0>)
 8003536:	f00f fb05 	bl	8012b44 <siprintf>
 800353a:	e011      	b.n	8003560 <main+0x114c>
    					else
    						sprintf(st, "Rssi:%u Freq:%.1f", RSSI, Freq);
 800353c:	4b6f      	ldr	r3, [pc, #444]	; (80036fc <main+0x12e8>)
 800353e:	881b      	ldrh	r3, [r3, #0]
 8003540:	461c      	mov	r4, r3
 8003542:	4b69      	ldr	r3, [pc, #420]	; (80036e8 <main+0x12d4>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f7fc fffe 	bl	8000548 <__aeabi_f2d>
 800354c:	4602      	mov	r2, r0
 800354e:	460b      	mov	r3, r1
 8003550:	f207 40a4 	addw	r0, r7, #1188	; 0x4a4
 8003554:	e9cd 2300 	strd	r2, r3, [sp]
 8003558:	4622      	mov	r2, r4
 800355a:	496b      	ldr	r1, [pc, #428]	; (8003708 <main+0x12f4>)
 800355c:	f00f faf2 	bl	8012b44 <siprintf>
    					showLine(st, lin5, &lil, false);
 8003560:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 8003564:	f8b7 150a 	ldrh.w	r1, [r7, #1290]	; 0x50a
 8003568:	f207 40a4 	addw	r0, r7, #1188	; 0x4a4
 800356c:	2300      	movs	r3, #0
 800356e:	f001 f839 	bl	80045e4 <showLine>
    					//showLine(sta, lin6, &lia, true);
    					////Report(1, "ChipID:0x%x Chan:%u Freq:%.2f RSSI:%u\r\n", rdaID, Chan, Freq, RSSI);
#endif
    				}
    				//
    				if (devError) {
 8003572:	4b66      	ldr	r3, [pc, #408]	; (800370c <main+0x12f8>)
 8003574:	881b      	ldrh	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00d      	beq.n	8003596 <main+0x1182>
    					dl = sprintf(tmp, "devError : 0x%04X", devError);
 800357a:	4b64      	ldr	r3, [pc, #400]	; (800370c <main+0x12f8>)
 800357c:	881b      	ldrh	r3, [r3, #0]
 800357e:	461a      	mov	r2, r3
 8003580:	4963      	ldr	r1, [pc, #396]	; (8003710 <main+0x12fc>)
 8003582:	4864      	ldr	r0, [pc, #400]	; (8003714 <main+0x1300>)
 8003584:	f00f fade 	bl	8012b44 <siprintf>
 8003588:	f8c7 0540 	str.w	r0, [r7, #1344]	; 0x540
    					lastErr = devError;
 800358c:	4b5f      	ldr	r3, [pc, #380]	; (800370c <main+0x12f8>)
 800358e:	881b      	ldrh	r3, [r3, #0]
 8003590:	f8a7 3538 	strh.w	r3, [r7, #1336]	; 0x538
 8003594:	e013      	b.n	80035be <main+0x11aa>
    				} else {
    					if (lastErr) {
 8003596:	f8b7 3538 	ldrh.w	r3, [r7, #1336]	; 0x538
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00c      	beq.n	80035b8 <main+0x11a4>
    						dl = sprintf(tmp, "Ver.%s", ver);
 800359e:	4b5e      	ldr	r3, [pc, #376]	; (8003718 <main+0x1304>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	461a      	mov	r2, r3
 80035a4:	495d      	ldr	r1, [pc, #372]	; (800371c <main+0x1308>)
 80035a6:	485b      	ldr	r0, [pc, #364]	; (8003714 <main+0x1300>)
 80035a8:	f00f facc 	bl	8012b44 <siprintf>
 80035ac:	f8c7 0540 	str.w	r0, [r7, #1344]	; 0x540
    						lastErr = devOK;
 80035b0:	2300      	movs	r3, #0
 80035b2:	f8a7 3538 	strh.w	r3, [r7, #1336]	; 0x538
 80035b6:	e002      	b.n	80035be <main+0x11aa>
    					} else dl = 0;
 80035b8:	2300      	movs	r3, #0
 80035ba:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
    				}
#ifdef SET_DISPLAY
    				if (dl) {
 80035be:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d032      	beq.n	800362c <main+0x1218>
    					ST7565_DrawFilledRectangle(0, SCREEN_HEIGHT - Font_6x8.FontHeight, SCREEN_WIDTH - 1, Font_6x8.FontHeight, PIX_OFF);
 80035c6:	f897 34e5 	ldrb.w	r3, [r7, #1253]	; 0x4e5
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	b219      	sxth	r1, r3
 80035d4:	f897 34e5 	ldrb.w	r3, [r7, #1253]	; 0x4e5
 80035d8:	b21b      	sxth	r3, r3
 80035da:	2200      	movs	r2, #0
 80035dc:	9200      	str	r2, [sp, #0]
 80035de:	227f      	movs	r2, #127	; 0x7f
 80035e0:	2000      	movs	r0, #0
 80035e2:	f7fe fb1c 	bl	8001c1e <ST7565_DrawFilledRectangle>
    					x = ((SCREEN_WIDTH - (Font_6x8.FontWidth * dl)) >> 1) & 0x7f;
 80035e6:	f897 34e4 	ldrb.w	r3, [r7, #1252]	; 0x4e4
 80035ea:	461a      	mov	r2, r3
 80035ec:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 80035f0:	fb02 f303 	mul.w	r3, r2, r3
 80035f4:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80035f8:	105b      	asrs	r3, r3, #1
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003600:	f8a7 3506 	strh.w	r3, [r7, #1286]	; 0x506
    					ST7565_Print(x, SCREEN_HEIGHT - Font_6x8.FontHeight, tmp, &Font_6x8, 1, PIX_ON);
 8003604:	f9b7 0506 	ldrsh.w	r0, [r7, #1286]	; 0x506
 8003608:	f897 34e5 	ldrb.w	r3, [r7, #1253]	; 0x4e5
 800360c:	b29b      	uxth	r3, r3
 800360e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003612:	b29b      	uxth	r3, r3
 8003614:	b219      	sxth	r1, r3
 8003616:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 800361a:	2201      	movs	r2, #1
 800361c:	9201      	str	r2, [sp, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	9200      	str	r2, [sp, #0]
 8003622:	4a3c      	ldr	r2, [pc, #240]	; (8003714 <main+0x1300>)
 8003624:	f7fe f8a2 	bl	800176c <ST7565_Print>
    					ST7565_Update();
 8003628:	f7fd fef0 	bl	800140c <ST7565_Update>
    				}
    				//
    				ST7565_Update();
 800362c:	f7fd feee 	bl	800140c <ST7565_Update>
#endif
    			}
    			break;
 8003630:	e186      	b.n	8003940 <main+0x152c>
    			case evt_Clr:
    				devError = devOK;
 8003632:	4b36      	ldr	r3, [pc, #216]	; (800370c <main+0x12f8>)
 8003634:	2200      	movs	r2, #0
 8003636:	801a      	strh	r2, [r3, #0]
    				Report(1, "[que:%u] Clear all Errors...\r\n", cntEvt);
 8003638:	4b2e      	ldr	r3, [pc, #184]	; (80036f4 <main+0x12e0>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	b2db      	uxtb	r3, r3
 800363e:	461a      	mov	r2, r3
 8003640:	4937      	ldr	r1, [pc, #220]	; (8003720 <main+0x130c>)
 8003642:	2001      	movs	r0, #1
 8003644:	f001 f95c 	bl	8004900 <Report>
    			break;
 8003648:	e17a      	b.n	8003940 <main+0x152c>
    			case evt_Help:
    				stx[0] = '\0';
 800364a:	4b36      	ldr	r3, [pc, #216]	; (8003724 <main+0x1310>)
 800364c:	2200      	movs	r2, #0
 800364e:	701a      	strb	r2, [r3, #0]
    				for (int8_t i = 0; i < MAX_CMDS; i++) sprintf(stx+strlen(stx), "\t%s\r\n", s_cmds[i]);
 8003650:	2300      	movs	r3, #0
 8003652:	f887 3537 	strb.w	r3, [r7, #1335]	; 0x537
 8003656:	e015      	b.n	8003684 <main+0x1270>
 8003658:	4832      	ldr	r0, [pc, #200]	; (8003724 <main+0x1310>)
 800365a:	f7fc fdb9 	bl	80001d0 <strlen>
 800365e:	4603      	mov	r3, r0
 8003660:	4a30      	ldr	r2, [pc, #192]	; (8003724 <main+0x1310>)
 8003662:	1898      	adds	r0, r3, r2
 8003664:	f997 3537 	ldrsb.w	r3, [r7, #1335]	; 0x537
 8003668:	4a2f      	ldr	r2, [pc, #188]	; (8003728 <main+0x1314>)
 800366a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800366e:	461a      	mov	r2, r3
 8003670:	492e      	ldr	r1, [pc, #184]	; (800372c <main+0x1318>)
 8003672:	f00f fa67 	bl	8012b44 <siprintf>
 8003676:	f997 3537 	ldrsb.w	r3, [r7, #1335]	; 0x537
 800367a:	b2db      	uxtb	r3, r3
 800367c:	3301      	adds	r3, #1
 800367e:	b2db      	uxtb	r3, r3
 8003680:	f887 3537 	strb.w	r3, [r7, #1335]	; 0x537
 8003684:	f997 3537 	ldrsb.w	r3, [r7, #1335]	; 0x537
 8003688:	2b14      	cmp	r3, #20
 800368a:	dde5      	ble.n	8003658 <main+0x1244>
    				Report(0, "%s", stx);
 800368c:	4a25      	ldr	r2, [pc, #148]	; (8003724 <main+0x1310>)
 800368e:	4918      	ldr	r1, [pc, #96]	; (80036f0 <main+0x12dc>)
 8003690:	2000      	movs	r0, #0
 8003692:	f001 f935 	bl	8004900 <Report>
    			break;
 8003696:	e153      	b.n	8003940 <main+0x152c>
    			case evt_Restart:
    				restart = 1;
 8003698:	4b25      	ldr	r3, [pc, #148]	; (8003730 <main+0x131c>)
 800369a:	2201      	movs	r2, #1
 800369c:	701a      	strb	r2, [r3, #0]
    				Report(1, "[que:%u] Restart system...\r\n", cntEvt);
 800369e:	4b15      	ldr	r3, [pc, #84]	; (80036f4 <main+0x12e0>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	461a      	mov	r2, r3
 80036a6:	4923      	ldr	r1, [pc, #140]	; (8003734 <main+0x1320>)
 80036a8:	2001      	movs	r0, #1
 80036aa:	f001 f929 	bl	8004900 <Report>
    			break;
 80036ae:	e147      	b.n	8003940 <main+0x152c>
    			case evt_Epoch:
    				set_Date(epoch);
 80036b0:	4b21      	ldr	r3, [pc, #132]	; (8003738 <main+0x1324>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f001 f829 	bl	800470c <set_Date>
    				Report(1, "[que:%u] Set Unix TimeStamp to %lu\r\n", cntEvt, epoch);
 80036ba:	4b0e      	ldr	r3, [pc, #56]	; (80036f4 <main+0x12e0>)
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	461a      	mov	r2, r3
 80036c2:	4b1d      	ldr	r3, [pc, #116]	; (8003738 <main+0x1324>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	491d      	ldr	r1, [pc, #116]	; (800373c <main+0x1328>)
 80036c8:	2001      	movs	r0, #1
 80036ca:	f001 f919 	bl	8004900 <Report>
    			break;
 80036ce:	e137      	b.n	8003940 <main+0x152c>
    			case evt_Err:
    				Report(1, "[que:%u] Error input from uart\r\n", cntEvt);
 80036d0:	4b08      	ldr	r3, [pc, #32]	; (80036f4 <main+0x12e0>)
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	461a      	mov	r2, r3
 80036d8:	4919      	ldr	r1, [pc, #100]	; (8003740 <main+0x132c>)
 80036da:	2001      	movs	r0, #1
 80036dc:	f001 f910 	bl	8004900 <Report>
    			break;
 80036e0:	e12e      	b.n	8003940 <main+0x152c>
 80036e2:	bf00      	nop
 80036e4:	20003d15 	.word	0x20003d15
 80036e8:	200001e4 	.word	0x200001e4
 80036ec:	20003d10 	.word	0x20003d10
 80036f0:	08016d50 	.word	0x08016d50
 80036f4:	20001cac 	.word	0x20001cac
 80036f8:	08016fbc 	.word	0x08016fbc
 80036fc:	20003d12 	.word	0x20003d12
 8003700:	20003d18 	.word	0x20003d18
 8003704:	08016e14 	.word	0x08016e14
 8003708:	08016e28 	.word	0x08016e28
 800370c:	20001890 	.word	0x20001890
 8003710:	08016ff8 	.word	0x08016ff8
 8003714:	20001010 	.word	0x20001010
 8003718:	20000004 	.word	0x20000004
 800371c:	08016ddc 	.word	0x08016ddc
 8003720:	0801700c 	.word	0x0801700c
 8003724:	20000c10 	.word	0x20000c10
 8003728:	2000001c 	.word	0x2000001c
 800372c:	0801702c 	.word	0x0801702c
 8003730:	20001ca4 	.word	0x20001ca4
 8003734:	08017034 	.word	0x08017034
 8003738:	20000018 	.word	0x20000018
 800373c:	08017054 	.word	0x08017054
 8003740:	0801707c 	.word	0x0801707c
#ifdef SET_W25FLASH
    			case evt_sRead:
    			case evt_sNext:
    			{
    				uint32_t w25_adr = (adr_sector * W25qxx_getSectorSize()) + offset_sector;
 8003744:	f002 ff80 	bl	8006648 <W25qxx_getSectorSize>
 8003748:	4603      	mov	r3, r0
 800374a:	4aa7      	ldr	r2, [pc, #668]	; (80039e8 <main+0x15d4>)
 800374c:	6812      	ldr	r2, [r2, #0]
 800374e:	fb02 f303 	mul.w	r3, r2, r3
 8003752:	4aa6      	ldr	r2, [pc, #664]	; (80039ec <main+0x15d8>)
 8003754:	6812      	ldr	r2, [r2, #0]
 8003756:	4413      	add	r3, r2
 8003758:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
    				uint32_t dlin = list_sector;
 800375c:	4ba4      	ldr	r3, [pc, #656]	; (80039f0 <main+0x15dc>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0
    				int step = 32;
 8003764:	2320      	movs	r3, #32
 8003766:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
    				uint32_t ind = 0;
 800376a:	2300      	movs	r3, #0
 800376c:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
    				W25qxx_ReadSector(fs_work, adr_sector, offset_sector, dlin);
 8003770:	4b9d      	ldr	r3, [pc, #628]	; (80039e8 <main+0x15d4>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4619      	mov	r1, r3
 8003776:	4b9d      	ldr	r3, [pc, #628]	; (80039ec <main+0x15d8>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	461a      	mov	r2, r3
 800377c:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 8003780:	489c      	ldr	r0, [pc, #624]	; (80039f4 <main+0x15e0>)
 8003782:	f003 fa7f 	bl	8006c84 <W25qxx_ReadSector>
    				Report(0, "Read sector:%d offset:%d len:%u\r\n", adr_sector, offset_sector, dlin);
 8003786:	4b98      	ldr	r3, [pc, #608]	; (80039e8 <main+0x15d4>)
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	4b98      	ldr	r3, [pc, #608]	; (80039ec <main+0x15d8>)
 800378c:	6819      	ldr	r1, [r3, #0]
 800378e:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	460b      	mov	r3, r1
 8003796:	4998      	ldr	r1, [pc, #608]	; (80039f8 <main+0x15e4>)
 8003798:	2000      	movs	r0, #0
 800379a:	f001 f8b1 	bl	8004900 <Report>
    				while (ind < dlin) {
 800379e:	e05b      	b.n	8003858 <main+0x1444>
    					strf[0] = '\0';
 80037a0:	4b96      	ldr	r3, [pc, #600]	; (80039fc <main+0x15e8>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	701a      	strb	r2, [r3, #0]
    					while (1) {
    						sprintf(strf+strlen(strf), "%06X ", (unsigned int)w25_adr);
 80037a6:	4895      	ldr	r0, [pc, #596]	; (80039fc <main+0x15e8>)
 80037a8:	f7fc fd12 	bl	80001d0 <strlen>
 80037ac:	4603      	mov	r3, r0
 80037ae:	4a93      	ldr	r2, [pc, #588]	; (80039fc <main+0x15e8>)
 80037b0:	4413      	add	r3, r2
 80037b2:	f8d7 2530 	ldr.w	r2, [r7, #1328]	; 0x530
 80037b6:	4992      	ldr	r1, [pc, #584]	; (8003a00 <main+0x15ec>)
 80037b8:	4618      	mov	r0, r3
 80037ba:	f00f f9c3 	bl	8012b44 <siprintf>
    						for (int i = 0; i < step; i++) sprintf(strf+strlen(strf), " %02X", fs_work[i + ind]);
 80037be:	2300      	movs	r3, #0
 80037c0:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
 80037c4:	e015      	b.n	80037f2 <main+0x13de>
 80037c6:	488d      	ldr	r0, [pc, #564]	; (80039fc <main+0x15e8>)
 80037c8:	f7fc fd02 	bl	80001d0 <strlen>
 80037cc:	4603      	mov	r3, r0
 80037ce:	4a8b      	ldr	r2, [pc, #556]	; (80039fc <main+0x15e8>)
 80037d0:	1898      	adds	r0, r3, r2
 80037d2:	f8d7 2528 	ldr.w	r2, [r7, #1320]	; 0x528
 80037d6:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 80037da:	4413      	add	r3, r2
 80037dc:	4a85      	ldr	r2, [pc, #532]	; (80039f4 <main+0x15e0>)
 80037de:	5cd3      	ldrb	r3, [r2, r3]
 80037e0:	461a      	mov	r2, r3
 80037e2:	4988      	ldr	r1, [pc, #544]	; (8003a04 <main+0x15f0>)
 80037e4:	f00f f9ae 	bl	8012b44 <siprintf>
 80037e8:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 80037ec:	3301      	adds	r3, #1
 80037ee:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
 80037f2:	f8d7 2528 	ldr.w	r2, [r7, #1320]	; 0x528
 80037f6:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 80037fa:	429a      	cmp	r2, r3
 80037fc:	dbe3      	blt.n	80037c6 <main+0x13b2>
    						strcat(strf, "\r\n");
 80037fe:	487f      	ldr	r0, [pc, #508]	; (80039fc <main+0x15e8>)
 8003800:	f7fc fce6 	bl	80001d0 <strlen>
 8003804:	4603      	mov	r3, r0
 8003806:	461a      	mov	r2, r3
 8003808:	4b7c      	ldr	r3, [pc, #496]	; (80039fc <main+0x15e8>)
 800380a:	4413      	add	r3, r2
 800380c:	4a7e      	ldr	r2, [pc, #504]	; (8003a08 <main+0x15f4>)
 800380e:	8811      	ldrh	r1, [r2, #0]
 8003810:	7892      	ldrb	r2, [r2, #2]
 8003812:	8019      	strh	r1, [r3, #0]
 8003814:	709a      	strb	r2, [r3, #2]
    						w25_adr += step;
 8003816:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 800381a:	f8d7 2530 	ldr.w	r2, [r7, #1328]	; 0x530
 800381e:	4413      	add	r3, r2
 8003820:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
    						ind += step;
 8003824:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 8003828:	f8d7 252c 	ldr.w	r2, [r7, #1324]	; 0x52c
 800382c:	4413      	add	r3, r2
 800382e:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
    						if (!(ind % W25qxx_getPageSize())) break;
 8003832:	f002 ff15 	bl	8006660 <W25qxx_getPageSize>
 8003836:	4602      	mov	r2, r0
 8003838:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 800383c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003840:	fb01 f202 	mul.w	r2, r1, r2
 8003844:	1a9b      	subs	r3, r3, r2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d000      	beq.n	800384c <main+0x1438>
    						sprintf(strf+strlen(strf), "%06X ", (unsigned int)w25_adr);
 800384a:	e7ac      	b.n	80037a6 <main+0x1392>
    						if (!(ind % W25qxx_getPageSize())) break;
 800384c:	bf00      	nop
    					}
    					Report(0, "%s", strf);
 800384e:	4a6b      	ldr	r2, [pc, #428]	; (80039fc <main+0x15e8>)
 8003850:	496e      	ldr	r1, [pc, #440]	; (8003a0c <main+0x15f8>)
 8003852:	2000      	movs	r0, #0
 8003854:	f001 f854 	bl	8004900 <Report>
    				while (ind < dlin) {
 8003858:	f8d7 252c 	ldr.w	r2, [r7, #1324]	; 0x52c
 800385c:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 8003860:	429a      	cmp	r2, r3
 8003862:	d39d      	bcc.n	80037a0 <main+0x138c>
    				}
    			}
    			break;
 8003864:	e06c      	b.n	8003940 <main+0x152c>
    			case evt_sWrite:
    			{
    				uint32_t ss = W25qxx_getSectorSize();
 8003866:	f002 feef 	bl	8006648 <W25qxx_getSectorSize>
 800386a:	f8c7 0524 	str.w	r0, [r7, #1316]	; 0x524
    				if (!W25qxx_IsEmptySector(adr_sector, 0, ss)) W25qxx_EraseSector(adr_sector);
 800386e:	4b5e      	ldr	r3, [pc, #376]	; (80039e8 <main+0x15d4>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 8003876:	2100      	movs	r1, #0
 8003878:	4618      	mov	r0, r3
 800387a:	f002 ff67 	bl	800674c <W25qxx_IsEmptySector>
 800387e:	4603      	mov	r3, r0
 8003880:	f083 0301 	eor.w	r3, r3, #1
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d004      	beq.n	8003894 <main+0x1480>
 800388a:	4b57      	ldr	r3, [pc, #348]	; (80039e8 <main+0x15d4>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f002 ff00 	bl	8006694 <W25qxx_EraseSector>
    				memset(fs_work, byte_write, ss);
 8003894:	4b5e      	ldr	r3, [pc, #376]	; (8003a10 <main+0x15fc>)
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 800389c:	4619      	mov	r1, r3
 800389e:	4855      	ldr	r0, [pc, #340]	; (80039f4 <main+0x15e0>)
 80038a0:	f00e fcde 	bl	8012260 <memset>
    				if (len_write != -1) ss = len_write;
 80038a4:	4b5b      	ldr	r3, [pc, #364]	; (8003a14 <main+0x1600>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038ac:	d003      	beq.n	80038b6 <main+0x14a2>
 80038ae:	4b59      	ldr	r3, [pc, #356]	; (8003a14 <main+0x1600>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
    				W25qxx_WriteSector(fs_work, adr_sector, offset_sector, ss);
 80038b6:	4b4c      	ldr	r3, [pc, #304]	; (80039e8 <main+0x15d4>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4619      	mov	r1, r3
 80038bc:	4b4b      	ldr	r3, [pc, #300]	; (80039ec <main+0x15d8>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	461a      	mov	r2, r3
 80038c2:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 80038c6:	484b      	ldr	r0, [pc, #300]	; (80039f4 <main+0x15e0>)
 80038c8:	f003 f8b4 	bl	8006a34 <W25qxx_WriteSector>
    				Report(0, "Fill sector:%d byte:%02X len:%d done\r\n", adr_sector, byte_write, ss);
 80038cc:	4b46      	ldr	r3, [pc, #280]	; (80039e8 <main+0x15d4>)
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	4b4f      	ldr	r3, [pc, #316]	; (8003a10 <main+0x15fc>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	4619      	mov	r1, r3
 80038d6:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	460b      	mov	r3, r1
 80038de:	494e      	ldr	r1, [pc, #312]	; (8003a18 <main+0x1604>)
 80038e0:	2000      	movs	r0, #0
 80038e2:	f001 f80d 	bl	8004900 <Report>
    			}
    			break;
 80038e6:	e02b      	b.n	8003940 <main+0x152c>
    			case evt_sErase:
    				if (adr_sector == -1) {
 80038e8:	4b3f      	ldr	r3, [pc, #252]	; (80039e8 <main+0x15d4>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038f0:	d10c      	bne.n	800390c <main+0x14f8>
    					Report(1, "Erase flash");
 80038f2:	494a      	ldr	r1, [pc, #296]	; (8003a1c <main+0x1608>)
 80038f4:	2001      	movs	r0, #1
 80038f6:	f001 f803 	bl	8004900 <Report>
    					flag_sector = true;
 80038fa:	4b49      	ldr	r3, [pc, #292]	; (8003a20 <main+0x160c>)
 80038fc:	2201      	movs	r2, #1
 80038fe:	701a      	strb	r2, [r3, #0]
    					btime = HAL_GetTick();
 8003900:	f003 fabe 	bl	8006e80 <HAL_GetTick>
 8003904:	4603      	mov	r3, r0
 8003906:	4a47      	ldr	r2, [pc, #284]	; (8003a24 <main+0x1610>)
 8003908:	6013      	str	r3, [r2, #0]
    				} else {
    					W25qxx_EraseSector(adr_sector);
    					Report(1, "Erase sector:%d done\r\n", adr_sector);
    				}
    			break;
 800390a:	e019      	b.n	8003940 <main+0x152c>
    					W25qxx_EraseSector(adr_sector);
 800390c:	4b36      	ldr	r3, [pc, #216]	; (80039e8 <main+0x15d4>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4618      	mov	r0, r3
 8003912:	f002 febf 	bl	8006694 <W25qxx_EraseSector>
    					Report(1, "Erase sector:%d done\r\n", adr_sector);
 8003916:	4b34      	ldr	r3, [pc, #208]	; (80039e8 <main+0x15d4>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	461a      	mov	r2, r3
 800391c:	4942      	ldr	r1, [pc, #264]	; (8003a28 <main+0x1614>)
 800391e:	2001      	movs	r0, #1
 8003920:	f000 ffee 	bl	8004900 <Report>
    			break;
 8003924:	e00c      	b.n	8003940 <main+0x152c>
    			break;
 8003926:	bf00      	nop
 8003928:	e00a      	b.n	8003940 <main+0x152c>
    			break;
 800392a:	bf00      	nop
 800392c:	e008      	b.n	8003940 <main+0x152c>
    			break;
 800392e:	bf00      	nop
 8003930:	e006      	b.n	8003940 <main+0x152c>
    			break;
 8003932:	bf00      	nop
 8003934:	e004      	b.n	8003940 <main+0x152c>
    			break;
 8003936:	bf00      	nop
 8003938:	e002      	b.n	8003940 <main+0x152c>
				break;
 800393a:	bf00      	nop
 800393c:	e000      	b.n	8003940 <main+0x152c>
    			break;
 800393e:	bf00      	nop
#endif
    		}
    		if ((evt >= evt_sRead) && (evt <= evt_sWrite)) {
 8003940:	4b3a      	ldr	r3, [pc, #232]	; (8003a2c <main+0x1618>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2b03      	cmp	r3, #3
 8003946:	dd0b      	ble.n	8003960 <main+0x154c>
 8003948:	4b38      	ldr	r3, [pc, #224]	; (8003a2c <main+0x1618>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2b07      	cmp	r3, #7
 800394e:	dc07      	bgt.n	8003960 <main+0x154c>
    			last_cmd_sector =  evt;//cmd_sector;
 8003950:	4b36      	ldr	r3, [pc, #216]	; (8003a2c <main+0x1618>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a36      	ldr	r2, [pc, #216]	; (8003a30 <main+0x161c>)
 8003956:	6013      	str	r3, [r2, #0]
    			cmd_sector = sNone;
 8003958:	4b36      	ldr	r3, [pc, #216]	; (8003a34 <main+0x1620>)
 800395a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800395e:	601a      	str	r2, [r3, #0]
    		}
    	}
#endif

#ifdef SET_W25FLASH
    	if (flag_sector) {
 8003960:	4b2f      	ldr	r3, [pc, #188]	; (8003a20 <main+0x160c>)
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d031      	beq.n	80039cc <main+0x15b8>
    		adr_sector++;
 8003968:	4b1f      	ldr	r3, [pc, #124]	; (80039e8 <main+0x15d4>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	3301      	adds	r3, #1
 800396e:	4a1e      	ldr	r2, [pc, #120]	; (80039e8 <main+0x15d4>)
 8003970:	6013      	str	r3, [r2, #0]
    		if (adr_sector >= W25qxx_getSectorCount()) {
 8003972:	f002 fe5d 	bl	8006630 <W25qxx_getSectorCount>
 8003976:	4603      	mov	r3, r0
 8003978:	4a1b      	ldr	r2, [pc, #108]	; (80039e8 <main+0x15d4>)
 800397a:	6812      	ldr	r2, [r2, #0]
 800397c:	4293      	cmp	r3, r2
 800397e:	d816      	bhi.n	80039ae <main+0x159a>
    			flag_sector = false;
 8003980:	4b27      	ldr	r3, [pc, #156]	; (8003a20 <main+0x160c>)
 8003982:	2200      	movs	r2, #0
 8003984:	701a      	strb	r2, [r3, #0]
    			etime = HAL_GetTick();
 8003986:	f003 fa7b 	bl	8006e80 <HAL_GetTick>
 800398a:	4603      	mov	r3, r0
 800398c:	4a2a      	ldr	r2, [pc, #168]	; (8003a38 <main+0x1624>)
 800398e:	6013      	str	r3, [r2, #0]
    			Report(0, " done (%lu sec)\r\n", (etime - btime) / 1000);
 8003990:	4b29      	ldr	r3, [pc, #164]	; (8003a38 <main+0x1624>)
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	4b23      	ldr	r3, [pc, #140]	; (8003a24 <main+0x1610>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	4a28      	ldr	r2, [pc, #160]	; (8003a3c <main+0x1628>)
 800399c:	fba2 2303 	umull	r2, r3, r2, r3
 80039a0:	099b      	lsrs	r3, r3, #6
 80039a2:	461a      	mov	r2, r3
 80039a4:	4926      	ldr	r1, [pc, #152]	; (8003a40 <main+0x162c>)
 80039a6:	2000      	movs	r0, #0
 80039a8:	f000 ffaa 	bl	8004900 <Report>
 80039ac:	e00e      	b.n	80039cc <main+0x15b8>
    		} else {
    			//putEvt(evt_sErase);
    			W25qxx_EraseSector(adr_sector);
 80039ae:	4b0e      	ldr	r3, [pc, #56]	; (80039e8 <main+0x15d4>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f002 fe6e 	bl	8006694 <W25qxx_EraseSector>
    			if (!(adr_sector % 8)) Report(0, ".");
 80039b8:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <main+0x15d4>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0307 	and.w	r3, r3, #7
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d103      	bne.n	80039cc <main+0x15b8>
 80039c4:	491f      	ldr	r1, [pc, #124]	; (8003a44 <main+0x1630>)
 80039c6:	2000      	movs	r0, #0
 80039c8:	f000 ff9a 	bl	8004900 <Report>
    		}
    	}
#endif


    	if (devError) {
 80039cc:	4b1e      	ldr	r3, [pc, #120]	; (8003a48 <main+0x1634>)
 80039ce:	881b      	ldrh	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d03b      	beq.n	8003a4c <main+0x1638>
    		errLedOn(true);
 80039d4:	2001      	movs	r0, #1
 80039d6:	f000 fe73 	bl	80046c0 <errLedOn>
    		HAL_Delay(50);
 80039da:	2032      	movs	r0, #50	; 0x32
 80039dc:	f003 fa5c 	bl	8006e98 <HAL_Delay>
    		errLedOn(false);
 80039e0:	2000      	movs	r0, #0
 80039e2:	f000 fe6d 	bl	80046c0 <errLedOn>
 80039e6:	e03b      	b.n	8003a60 <main+0x164c>
 80039e8:	20001cb0 	.word	0x20001cb0
 80039ec:	20001cb4 	.word	0x20001cb4
 80039f0:	20001cb8 	.word	0x20001cb8
 80039f4:	20001cc4 	.word	0x20001cc4
 80039f8:	080170a0 	.word	0x080170a0
 80039fc:	20001490 	.word	0x20001490
 8003a00:	080170c4 	.word	0x080170c4
 8003a04:	080170cc 	.word	0x080170cc
 8003a08:	08016db4 	.word	0x08016db4
 8003a0c:	08016d50 	.word	0x08016d50
 8003a10:	200001d8 	.word	0x200001d8
 8003a14:	20001cbc 	.word	0x20001cbc
 8003a18:	080170d4 	.word	0x080170d4
 8003a1c:	080170fc 	.word	0x080170fc
 8003a20:	20001cc0 	.word	0x20001cc0
 8003a24:	20002cc8 	.word	0x20002cc8
 8003a28:	08017108 	.word	0x08017108
 8003a2c:	200001c4 	.word	0x200001c4
 8003a30:	200001d4 	.word	0x200001d4
 8003a34:	200001d0 	.word	0x200001d0
 8003a38:	20002ccc 	.word	0x20002ccc
 8003a3c:	10624dd3 	.word	0x10624dd3
 8003a40:	08017120 	.word	0x08017120
 8003a44:	08017134 	.word	0x08017134
 8003a48:	20001890 	.word	0x20001890
    	} else {
    		if (HAL_GPIO_ReadPin(ERR_LED_GPIO_Port, ERR_LED_Pin)) errLedOn(false);
 8003a4c:	2108      	movs	r1, #8
 8003a4e:	481c      	ldr	r0, [pc, #112]	; (8003ac0 <main+0x16ac>)
 8003a50:	f003 ffb8 	bl	80079c4 <HAL_GPIO_ReadPin>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d002      	beq.n	8003a60 <main+0x164c>
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	f000 fe30 	bl	80046c0 <errLedOn>
    while (!restart) {
 8003a60:	4b18      	ldr	r3, [pc, #96]	; (8003ac4 <main+0x16b0>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f43f a94b 	beq.w	8002d02 <main+0x8ee>

    /* USER CODE BEGIN 3 */

    }//while (!restart)

    HAL_TIM_Base_Stop_IT(tikPort);
 8003a6c:	4b16      	ldr	r3, [pc, #88]	; (8003ac8 <main+0x16b4>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f008 ff8f 	bl	800c994 <HAL_TIM_Base_Stop_IT>

#ifdef SET_DISPLAY
    ST7565_Reset();
 8003a76:	f7fd fb27 	bl	80010c8 <ST7565_Reset>
    ST7565_CMD_DISPLAY(CMD_DISPLAY_OFF);
 8003a7a:	20ae      	movs	r0, #174	; 0xae
 8003a7c:	f7fd fc56 	bl	800132c <ST7565_CMD_DISPLAY>
#endif

#ifdef SET_FAT_FS
    if (mnt) {
 8003a80:	4b12      	ldr	r3, [pc, #72]	; (8003acc <main+0x16b8>)
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00d      	beq.n	8003aa4 <main+0x1690>
    	f_mount(NULL, USERPath, 1);
 8003a88:	2201      	movs	r2, #1
 8003a8a:	4911      	ldr	r1, [pc, #68]	; (8003ad0 <main+0x16bc>)
 8003a8c:	2000      	movs	r0, #0
 8003a8e:	f00c fec1 	bl	8010814 <f_mount>
    	mnt = false;
 8003a92:	4b0e      	ldr	r3, [pc, #56]	; (8003acc <main+0x16b8>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	701a      	strb	r2, [r3, #0]
    	Report(1, "Umount drive '%.*s'\r\n", sizeof(USERPath), USERPath);
 8003a98:	4b0d      	ldr	r3, [pc, #52]	; (8003ad0 <main+0x16bc>)
 8003a9a:	2204      	movs	r2, #4
 8003a9c:	490d      	ldr	r1, [pc, #52]	; (8003ad4 <main+0x16c0>)
 8003a9e:	2001      	movs	r0, #1
 8003aa0:	f000 ff2e 	bl	8004900 <Report>
    }
#endif

    Report(1, "[que:%u] Stop application...\r\n", cntEvt);
 8003aa4:	4b0c      	ldr	r3, [pc, #48]	; (8003ad8 <main+0x16c4>)
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	461a      	mov	r2, r3
 8003aac:	490b      	ldr	r1, [pc, #44]	; (8003adc <main+0x16c8>)
 8003aae:	2001      	movs	r0, #1
 8003ab0:	f000 ff26 	bl	8004900 <Report>

    HAL_Delay(500);
 8003ab4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003ab8:	f003 f9ee 	bl	8006e98 <HAL_Delay>

    NVIC_SystemReset();
 8003abc:	f7fe f908 	bl	8001cd0 <__NVIC_SystemReset>
 8003ac0:	48000800 	.word	0x48000800
 8003ac4:	20001ca4 	.word	0x20001ca4
 8003ac8:	20000008 	.word	0x20000008
 8003acc:	20003d01 	.word	0x20003d01
 8003ad0:	200041f4 	.word	0x200041f4
 8003ad4:	08017138 	.word	0x08017138
 8003ad8:	20001cac 	.word	0x20001cac
 8003adc:	08017150 	.word	0x08017150

08003ae0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b096      	sub	sp, #88	; 0x58
 8003ae4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ae6:	f107 0314 	add.w	r3, r7, #20
 8003aea:	2244      	movs	r2, #68	; 0x44
 8003aec:	2100      	movs	r1, #0
 8003aee:	4618      	mov	r0, r3
 8003af0:	f00e fbb6 	bl	8012260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003af4:	463b      	mov	r3, r7
 8003af6:	2200      	movs	r2, #0
 8003af8:	601a      	str	r2, [r3, #0]
 8003afa:	605a      	str	r2, [r3, #4]
 8003afc:	609a      	str	r2, [r3, #8]
 8003afe:	60da      	str	r2, [r3, #12]
 8003b00:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003b02:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003b06:	f005 fc47 	bl	8009398 <HAL_PWREx_ControlVoltageScaling>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003b10:	f001 fae0 	bl	80050d4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003b14:	2309      	movs	r3, #9
 8003b16:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003b18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b1c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b22:	2302      	movs	r3, #2
 8003b24:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003b26:	2303      	movs	r3, #3
 8003b28:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8003b2e:	2314      	movs	r3, #20
 8003b30:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003b32:	2307      	movs	r3, #7
 8003b34:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003b36:	2302      	movs	r3, #2
 8003b38:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b3e:	f107 0314 	add.w	r3, r7, #20
 8003b42:	4618      	mov	r0, r3
 8003b44:	f005 fc7e 	bl	8009444 <HAL_RCC_OscConfig>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8003b4e:	f001 fac1 	bl	80050d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b52:	230f      	movs	r3, #15
 8003b54:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b56:	2303      	movs	r3, #3
 8003b58:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b62:	2300      	movs	r3, #0
 8003b64:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003b66:	463b      	mov	r3, r7
 8003b68:	2104      	movs	r1, #4
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f006 f846 	bl	8009bfc <HAL_RCC_ClockConfig>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003b76:	f001 faad 	bl	80050d4 <Error_Handler>
  }
}
 8003b7a:	bf00      	nop
 8003b7c:	3758      	adds	r7, #88	; 0x58
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
	...

08003b84 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003b88:	4b1b      	ldr	r3, [pc, #108]	; (8003bf8 <MX_I2C1_Init+0x74>)
 8003b8a:	4a1c      	ldr	r2, [pc, #112]	; (8003bfc <MX_I2C1_Init+0x78>)
 8003b8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702D95;
 8003b8e:	4b1a      	ldr	r3, [pc, #104]	; (8003bf8 <MX_I2C1_Init+0x74>)
 8003b90:	4a1b      	ldr	r2, [pc, #108]	; (8003c00 <MX_I2C1_Init+0x7c>)
 8003b92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003b94:	4b18      	ldr	r3, [pc, #96]	; (8003bf8 <MX_I2C1_Init+0x74>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b9a:	4b17      	ldr	r3, [pc, #92]	; (8003bf8 <MX_I2C1_Init+0x74>)
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ba0:	4b15      	ldr	r3, [pc, #84]	; (8003bf8 <MX_I2C1_Init+0x74>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003ba6:	4b14      	ldr	r3, [pc, #80]	; (8003bf8 <MX_I2C1_Init+0x74>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003bac:	4b12      	ldr	r3, [pc, #72]	; (8003bf8 <MX_I2C1_Init+0x74>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003bb2:	4b11      	ldr	r3, [pc, #68]	; (8003bf8 <MX_I2C1_Init+0x74>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003bb8:	4b0f      	ldr	r3, [pc, #60]	; (8003bf8 <MX_I2C1_Init+0x74>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003bbe:	480e      	ldr	r0, [pc, #56]	; (8003bf8 <MX_I2C1_Init+0x74>)
 8003bc0:	f003 ff62 	bl	8007a88 <HAL_I2C_Init>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003bca:	f001 fa83 	bl	80050d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8003bce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003bd2:	4809      	ldr	r0, [pc, #36]	; (8003bf8 <MX_I2C1_Init+0x74>)
 8003bd4:	f005 fb1a 	bl	800920c <HAL_I2CEx_ConfigAnalogFilter>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8003bde:	f001 fa79 	bl	80050d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003be2:	2100      	movs	r1, #0
 8003be4:	4804      	ldr	r0, [pc, #16]	; (8003bf8 <MX_I2C1_Init+0x74>)
 8003be6:	f005 fb5c 	bl	80092a2 <HAL_I2CEx_ConfigDigitalFilter>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8003bf0:	f001 fa70 	bl	80050d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003bf4:	bf00      	nop
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	20000850 	.word	0x20000850
 8003bfc:	40005400 	.word	0x40005400
 8003c00:	00702d95 	.word	0x00702d95

08003c04 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003c0a:	1d3b      	adds	r3, r7, #4
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	601a      	str	r2, [r3, #0]
 8003c10:	605a      	str	r2, [r3, #4]
 8003c12:	609a      	str	r2, [r3, #8]
 8003c14:	60da      	str	r2, [r3, #12]
 8003c16:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003c18:	2300      	movs	r3, #0
 8003c1a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003c1c:	4b25      	ldr	r3, [pc, #148]	; (8003cb4 <MX_RTC_Init+0xb0>)
 8003c1e:	4a26      	ldr	r2, [pc, #152]	; (8003cb8 <MX_RTC_Init+0xb4>)
 8003c20:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003c22:	4b24      	ldr	r3, [pc, #144]	; (8003cb4 <MX_RTC_Init+0xb0>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003c28:	4b22      	ldr	r3, [pc, #136]	; (8003cb4 <MX_RTC_Init+0xb0>)
 8003c2a:	227f      	movs	r2, #127	; 0x7f
 8003c2c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003c2e:	4b21      	ldr	r3, [pc, #132]	; (8003cb4 <MX_RTC_Init+0xb0>)
 8003c30:	22ff      	movs	r2, #255	; 0xff
 8003c32:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003c34:	4b1f      	ldr	r3, [pc, #124]	; (8003cb4 <MX_RTC_Init+0xb0>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003c3a:	4b1e      	ldr	r3, [pc, #120]	; (8003cb4 <MX_RTC_Init+0xb0>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003c40:	4b1c      	ldr	r3, [pc, #112]	; (8003cb4 <MX_RTC_Init+0xb0>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003c46:	4b1b      	ldr	r3, [pc, #108]	; (8003cb4 <MX_RTC_Init+0xb0>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003c4c:	4819      	ldr	r0, [pc, #100]	; (8003cb4 <MX_RTC_Init+0xb0>)
 8003c4e:	f006 feb5 	bl	800a9bc <HAL_RTC_Init>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8003c58:	f001 fa3c 	bl	80050d4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8003c60:	2300      	movs	r3, #0
 8003c62:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8003c64:	2300      	movs	r3, #0
 8003c66:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003c70:	1d3b      	adds	r3, r7, #4
 8003c72:	2201      	movs	r2, #1
 8003c74:	4619      	mov	r1, r3
 8003c76:	480f      	ldr	r0, [pc, #60]	; (8003cb4 <MX_RTC_Init+0xb0>)
 8003c78:	f006 ff1b 	bl	800aab2 <HAL_RTC_SetTime>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8003c82:	f001 fa27 	bl	80050d4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8003c86:	2303      	movs	r3, #3
 8003c88:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 8003c8a:	2307      	movs	r3, #7
 8003c8c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x6;
 8003c8e:	2306      	movs	r3, #6
 8003c90:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 8003c92:	2322      	movs	r3, #34	; 0x22
 8003c94:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003c96:	463b      	mov	r3, r7
 8003c98:	2201      	movs	r2, #1
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	4805      	ldr	r0, [pc, #20]	; (8003cb4 <MX_RTC_Init+0xb0>)
 8003c9e:	f007 f801 	bl	800aca4 <HAL_RTC_SetDate>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8003ca8:	f001 fa14 	bl	80050d4 <Error_Handler>

  //set_Date(epoch);

  /* USER CODE END RTC_Init 2 */

}
 8003cac:	bf00      	nop
 8003cae:	3718      	adds	r7, #24
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	20000934 	.word	0x20000934
 8003cb8:	40002800 	.word	0x40002800

08003cbc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003cc0:	4b1b      	ldr	r3, [pc, #108]	; (8003d30 <MX_SPI1_Init+0x74>)
 8003cc2:	4a1c      	ldr	r2, [pc, #112]	; (8003d34 <MX_SPI1_Init+0x78>)
 8003cc4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003cc6:	4b1a      	ldr	r3, [pc, #104]	; (8003d30 <MX_SPI1_Init+0x74>)
 8003cc8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003ccc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003cce:	4b18      	ldr	r3, [pc, #96]	; (8003d30 <MX_SPI1_Init+0x74>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003cd4:	4b16      	ldr	r3, [pc, #88]	; (8003d30 <MX_SPI1_Init+0x74>)
 8003cd6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003cda:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cdc:	4b14      	ldr	r3, [pc, #80]	; (8003d30 <MX_SPI1_Init+0x74>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003ce2:	4b13      	ldr	r3, [pc, #76]	; (8003d30 <MX_SPI1_Init+0x74>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003ce8:	4b11      	ldr	r3, [pc, #68]	; (8003d30 <MX_SPI1_Init+0x74>)
 8003cea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003cf0:	4b0f      	ldr	r3, [pc, #60]	; (8003d30 <MX_SPI1_Init+0x74>)
 8003cf2:	2208      	movs	r2, #8
 8003cf4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003cf6:	4b0e      	ldr	r3, [pc, #56]	; (8003d30 <MX_SPI1_Init+0x74>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003cfc:	4b0c      	ldr	r3, [pc, #48]	; (8003d30 <MX_SPI1_Init+0x74>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d02:	4b0b      	ldr	r3, [pc, #44]	; (8003d30 <MX_SPI1_Init+0x74>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003d08:	4b09      	ldr	r3, [pc, #36]	; (8003d30 <MX_SPI1_Init+0x74>)
 8003d0a:	2207      	movs	r2, #7
 8003d0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003d0e:	4b08      	ldr	r3, [pc, #32]	; (8003d30 <MX_SPI1_Init+0x74>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003d14:	4b06      	ldr	r3, [pc, #24]	; (8003d30 <MX_SPI1_Init+0x74>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003d1a:	4805      	ldr	r0, [pc, #20]	; (8003d30 <MX_SPI1_Init+0x74>)
 8003d1c:	f007 f968 	bl	800aff0 <HAL_SPI_Init>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003d26:	f001 f9d5 	bl	80050d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003d2a:	bf00      	nop
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	20000958 	.word	0x20000958
 8003d34:	40013000 	.word	0x40013000

08003d38 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003d3c:	4b1b      	ldr	r3, [pc, #108]	; (8003dac <MX_SPI2_Init+0x74>)
 8003d3e:	4a1c      	ldr	r2, [pc, #112]	; (8003db0 <MX_SPI2_Init+0x78>)
 8003d40:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003d42:	4b1a      	ldr	r3, [pc, #104]	; (8003dac <MX_SPI2_Init+0x74>)
 8003d44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003d48:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003d4a:	4b18      	ldr	r3, [pc, #96]	; (8003dac <MX_SPI2_Init+0x74>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d50:	4b16      	ldr	r3, [pc, #88]	; (8003dac <MX_SPI2_Init+0x74>)
 8003d52:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003d56:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d58:	4b14      	ldr	r3, [pc, #80]	; (8003dac <MX_SPI2_Init+0x74>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003d5e:	4b13      	ldr	r3, [pc, #76]	; (8003dac <MX_SPI2_Init+0x74>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003d64:	4b11      	ldr	r3, [pc, #68]	; (8003dac <MX_SPI2_Init+0x74>)
 8003d66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d6a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d6c:	4b0f      	ldr	r3, [pc, #60]	; (8003dac <MX_SPI2_Init+0x74>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d72:	4b0e      	ldr	r3, [pc, #56]	; (8003dac <MX_SPI2_Init+0x74>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d78:	4b0c      	ldr	r3, [pc, #48]	; (8003dac <MX_SPI2_Init+0x74>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d7e:	4b0b      	ldr	r3, [pc, #44]	; (8003dac <MX_SPI2_Init+0x74>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003d84:	4b09      	ldr	r3, [pc, #36]	; (8003dac <MX_SPI2_Init+0x74>)
 8003d86:	2207      	movs	r2, #7
 8003d88:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003d8a:	4b08      	ldr	r3, [pc, #32]	; (8003dac <MX_SPI2_Init+0x74>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003d90:	4b06      	ldr	r3, [pc, #24]	; (8003dac <MX_SPI2_Init+0x74>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003d96:	4805      	ldr	r0, [pc, #20]	; (8003dac <MX_SPI2_Init+0x74>)
 8003d98:	f007 f92a 	bl	800aff0 <HAL_SPI_Init>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8003da2:	f001 f997 	bl	80050d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003da6:	bf00      	nop
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	200009bc 	.word	0x200009bc
 8003db0:	40003800 	.word	0x40003800

08003db4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b088      	sub	sp, #32
 8003db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003dba:	f107 0310 	add.w	r3, r7, #16
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	601a      	str	r2, [r3, #0]
 8003dc2:	605a      	str	r2, [r3, #4]
 8003dc4:	609a      	str	r2, [r3, #8]
 8003dc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dc8:	1d3b      	adds	r3, r7, #4
 8003dca:	2200      	movs	r2, #0
 8003dcc:	601a      	str	r2, [r3, #0]
 8003dce:	605a      	str	r2, [r3, #4]
 8003dd0:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN TIM4_Init 1 */

  // interupt every 10 ms

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003dd2:	4b1d      	ldr	r3, [pc, #116]	; (8003e48 <MX_TIM4_Init+0x94>)
 8003dd4:	4a1d      	ldr	r2, [pc, #116]	; (8003e4c <MX_TIM4_Init+0x98>)
 8003dd6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7999;
 8003dd8:	4b1b      	ldr	r3, [pc, #108]	; (8003e48 <MX_TIM4_Init+0x94>)
 8003dda:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8003dde:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003de0:	4b19      	ldr	r3, [pc, #100]	; (8003e48 <MX_TIM4_Init+0x94>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8003de6:	4b18      	ldr	r3, [pc, #96]	; (8003e48 <MX_TIM4_Init+0x94>)
 8003de8:	2263      	movs	r2, #99	; 0x63
 8003dea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003dec:	4b16      	ldr	r3, [pc, #88]	; (8003e48 <MX_TIM4_Init+0x94>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003df2:	4b15      	ldr	r3, [pc, #84]	; (8003e48 <MX_TIM4_Init+0x94>)
 8003df4:	2280      	movs	r2, #128	; 0x80
 8003df6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003df8:	4813      	ldr	r0, [pc, #76]	; (8003e48 <MX_TIM4_Init+0x94>)
 8003dfa:	f008 fd03 	bl	800c804 <HAL_TIM_Base_Init>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d001      	beq.n	8003e08 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8003e04:	f001 f966 	bl	80050d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e0c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003e0e:	f107 0310 	add.w	r3, r7, #16
 8003e12:	4619      	mov	r1, r3
 8003e14:	480c      	ldr	r0, [pc, #48]	; (8003e48 <MX_TIM4_Init+0x94>)
 8003e16:	f008 ff0b 	bl	800cc30 <HAL_TIM_ConfigClockSource>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003e20:	f001 f958 	bl	80050d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e24:	2300      	movs	r3, #0
 8003e26:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003e2c:	1d3b      	adds	r3, r7, #4
 8003e2e:	4619      	mov	r1, r3
 8003e30:	4805      	ldr	r0, [pc, #20]	; (8003e48 <MX_TIM4_Init+0x94>)
 8003e32:	f009 f923 	bl	800d07c <HAL_TIMEx_MasterConfigSynchronization>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003e3c:	f001 f94a 	bl	80050d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003e40:	bf00      	nop
 8003e42:	3720      	adds	r7, #32
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	20000af8 	.word	0x20000af8
 8003e4c:	40000800 	.word	0x40000800

08003e50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003e54:	4b14      	ldr	r3, [pc, #80]	; (8003ea8 <MX_USART2_UART_Init+0x58>)
 8003e56:	4a15      	ldr	r2, [pc, #84]	; (8003eac <MX_USART2_UART_Init+0x5c>)
 8003e58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8003e5a:	4b13      	ldr	r3, [pc, #76]	; (8003ea8 <MX_USART2_UART_Init+0x58>)
 8003e5c:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8003e60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003e62:	4b11      	ldr	r3, [pc, #68]	; (8003ea8 <MX_USART2_UART_Init+0x58>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003e68:	4b0f      	ldr	r3, [pc, #60]	; (8003ea8 <MX_USART2_UART_Init+0x58>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003e6e:	4b0e      	ldr	r3, [pc, #56]	; (8003ea8 <MX_USART2_UART_Init+0x58>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003e74:	4b0c      	ldr	r3, [pc, #48]	; (8003ea8 <MX_USART2_UART_Init+0x58>)
 8003e76:	220c      	movs	r2, #12
 8003e78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e7a:	4b0b      	ldr	r3, [pc, #44]	; (8003ea8 <MX_USART2_UART_Init+0x58>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e80:	4b09      	ldr	r3, [pc, #36]	; (8003ea8 <MX_USART2_UART_Init+0x58>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e86:	4b08      	ldr	r3, [pc, #32]	; (8003ea8 <MX_USART2_UART_Init+0x58>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003e8c:	4b06      	ldr	r3, [pc, #24]	; (8003ea8 <MX_USART2_UART_Init+0x58>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003e92:	4805      	ldr	r0, [pc, #20]	; (8003ea8 <MX_USART2_UART_Init+0x58>)
 8003e94:	f009 f998 	bl	800d1c8 <HAL_UART_Init>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003e9e:	f001 f919 	bl	80050d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003ea2:	bf00      	nop
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	20000b44 	.word	0x20000b44
 8003eac:	40004400 	.word	0x40004400

08003eb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003eb6:	4b26      	ldr	r3, [pc, #152]	; (8003f50 <MX_DMA_Init+0xa0>)
 8003eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eba:	4a25      	ldr	r2, [pc, #148]	; (8003f50 <MX_DMA_Init+0xa0>)
 8003ebc:	f043 0301 	orr.w	r3, r3, #1
 8003ec0:	6493      	str	r3, [r2, #72]	; 0x48
 8003ec2:	4b23      	ldr	r3, [pc, #140]	; (8003f50 <MX_DMA_Init+0xa0>)
 8003ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	607b      	str	r3, [r7, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003ece:	4b20      	ldr	r3, [pc, #128]	; (8003f50 <MX_DMA_Init+0xa0>)
 8003ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ed2:	4a1f      	ldr	r2, [pc, #124]	; (8003f50 <MX_DMA_Init+0xa0>)
 8003ed4:	f043 0302 	orr.w	r3, r3, #2
 8003ed8:	6493      	str	r3, [r2, #72]	; 0x48
 8003eda:	4b1d      	ldr	r3, [pc, #116]	; (8003f50 <MX_DMA_Init+0xa0>)
 8003edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	603b      	str	r3, [r7, #0]
 8003ee4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	2100      	movs	r1, #0
 8003eea:	200d      	movs	r0, #13
 8003eec:	f003 f8f7 	bl	80070de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003ef0:	200d      	movs	r0, #13
 8003ef2:	f003 f910 	bl	8007116 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	2100      	movs	r1, #0
 8003efa:	200e      	movs	r0, #14
 8003efc:	f003 f8ef 	bl	80070de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003f00:	200e      	movs	r0, #14
 8003f02:	f003 f908 	bl	8007116 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8003f06:	2200      	movs	r2, #0
 8003f08:	2100      	movs	r1, #0
 8003f0a:	200f      	movs	r0, #15
 8003f0c:	f003 f8e7 	bl	80070de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003f10:	200f      	movs	r0, #15
 8003f12:	f003 f900 	bl	8007116 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8003f16:	2200      	movs	r2, #0
 8003f18:	2100      	movs	r1, #0
 8003f1a:	2010      	movs	r0, #16
 8003f1c:	f003 f8df 	bl	80070de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8003f20:	2010      	movs	r0, #16
 8003f22:	f003 f8f8 	bl	8007116 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 3, 0);
 8003f26:	2200      	movs	r2, #0
 8003f28:	2103      	movs	r1, #3
 8003f2a:	2011      	movs	r0, #17
 8003f2c:	f003 f8d7 	bl	80070de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8003f30:	2011      	movs	r0, #17
 8003f32:	f003 f8f0 	bl	8007116 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0, 0);
 8003f36:	2200      	movs	r2, #0
 8003f38:	2100      	movs	r1, #0
 8003f3a:	2044      	movs	r0, #68	; 0x44
 8003f3c:	f003 f8cf 	bl	80070de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8003f40:	2044      	movs	r0, #68	; 0x44
 8003f42:	f003 f8e8 	bl	8007116 <HAL_NVIC_EnableIRQ>

}
 8003f46:	bf00      	nop
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	40021000 	.word	0x40021000

08003f54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b08a      	sub	sp, #40	; 0x28
 8003f58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f5a:	f107 0314 	add.w	r3, r7, #20
 8003f5e:	2200      	movs	r2, #0
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	605a      	str	r2, [r3, #4]
 8003f64:	609a      	str	r2, [r3, #8]
 8003f66:	60da      	str	r2, [r3, #12]
 8003f68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f6a:	4b6f      	ldr	r3, [pc, #444]	; (8004128 <MX_GPIO_Init+0x1d4>)
 8003f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f6e:	4a6e      	ldr	r2, [pc, #440]	; (8004128 <MX_GPIO_Init+0x1d4>)
 8003f70:	f043 0304 	orr.w	r3, r3, #4
 8003f74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f76:	4b6c      	ldr	r3, [pc, #432]	; (8004128 <MX_GPIO_Init+0x1d4>)
 8003f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f7a:	f003 0304 	and.w	r3, r3, #4
 8003f7e:	613b      	str	r3, [r7, #16]
 8003f80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003f82:	4b69      	ldr	r3, [pc, #420]	; (8004128 <MX_GPIO_Init+0x1d4>)
 8003f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f86:	4a68      	ldr	r2, [pc, #416]	; (8004128 <MX_GPIO_Init+0x1d4>)
 8003f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f8e:	4b66      	ldr	r3, [pc, #408]	; (8004128 <MX_GPIO_Init+0x1d4>)
 8003f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f9a:	4b63      	ldr	r3, [pc, #396]	; (8004128 <MX_GPIO_Init+0x1d4>)
 8003f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f9e:	4a62      	ldr	r2, [pc, #392]	; (8004128 <MX_GPIO_Init+0x1d4>)
 8003fa0:	f043 0301 	orr.w	r3, r3, #1
 8003fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fa6:	4b60      	ldr	r3, [pc, #384]	; (8004128 <MX_GPIO_Init+0x1d4>)
 8003fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	60bb      	str	r3, [r7, #8]
 8003fb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fb2:	4b5d      	ldr	r3, [pc, #372]	; (8004128 <MX_GPIO_Init+0x1d4>)
 8003fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fb6:	4a5c      	ldr	r2, [pc, #368]	; (8004128 <MX_GPIO_Init+0x1d4>)
 8003fb8:	f043 0302 	orr.w	r3, r3, #2
 8003fbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fbe:	4b5a      	ldr	r3, [pc, #360]	; (8004128 <MX_GPIO_Init+0x1d4>)
 8003fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	607b      	str	r3, [r7, #4]
 8003fc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003fca:	4b57      	ldr	r3, [pc, #348]	; (8004128 <MX_GPIO_Init+0x1d4>)
 8003fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fce:	4a56      	ldr	r2, [pc, #344]	; (8004128 <MX_GPIO_Init+0x1d4>)
 8003fd0:	f043 0308 	orr.w	r3, r3, #8
 8003fd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fd6:	4b54      	ldr	r3, [pc, #336]	; (8004128 <MX_GPIO_Init+0x1d4>)
 8003fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fda:	f003 0308 	and.w	r3, r3, #8
 8003fde:	603b      	str	r3, [r7, #0]
 8003fe0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TIK_LED_Pin|ERR_LED_Pin, GPIO_PIN_RESET);
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	2109      	movs	r1, #9
 8003fe6:	4851      	ldr	r0, [pc, #324]	; (800412c <MX_GPIO_Init+0x1d8>)
 8003fe8:	f003 fd04 	bl	80079f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8003fec:	2201      	movs	r2, #1
 8003fee:	2110      	movs	r1, #16
 8003ff0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ff4:	f003 fcfe 	bl	80079f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|SPI1_DC_Pin, GPIO_PIN_SET);
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8003ffe:	484c      	ldr	r0, [pc, #304]	; (8004130 <MX_GPIO_Init+0x1dc>)
 8004000:	f003 fcf8 	bl	80079f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8004004:	2201      	movs	r2, #1
 8004006:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800400a:	4848      	ldr	r0, [pc, #288]	; (800412c <MX_GPIO_Init+0x1d8>)
 800400c:	f003 fcf2 	bl	80079f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_RST_GPIO_Port, SPI1_RST_Pin, GPIO_PIN_SET);
 8004010:	2201      	movs	r2, #1
 8004012:	2104      	movs	r1, #4
 8004014:	4847      	ldr	r0, [pc, #284]	; (8004134 <MX_GPIO_Init+0x1e0>)
 8004016:	f003 fced 	bl	80079f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TIK_LED_Pin */
  GPIO_InitStruct.Pin = TIK_LED_Pin;
 800401a:	2301      	movs	r3, #1
 800401c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800401e:	2301      	movs	r3, #1
 8004020:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004022:	2302      	movs	r3, #2
 8004024:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004026:	2301      	movs	r3, #1
 8004028:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TIK_LED_GPIO_Port, &GPIO_InitStruct);
 800402a:	f107 0314 	add.w	r3, r7, #20
 800402e:	4619      	mov	r1, r3
 8004030:	483e      	ldr	r0, [pc, #248]	; (800412c <MX_GPIO_Init+0x1d8>)
 8004032:	f003 fb1d 	bl	8007670 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY0_Pin KEY1_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin;
 8004036:	2306      	movs	r3, #6
 8004038:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800403a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800403e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004040:	2301      	movs	r3, #1
 8004042:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004044:	f107 0314 	add.w	r3, r7, #20
 8004048:	4619      	mov	r1, r3
 800404a:	4838      	ldr	r0, [pc, #224]	; (800412c <MX_GPIO_Init+0x1d8>)
 800404c:	f003 fb10 	bl	8007670 <HAL_GPIO_Init>

  /*Configure GPIO pin : ERR_LED_Pin */
  GPIO_InitStruct.Pin = ERR_LED_Pin;
 8004050:	2308      	movs	r3, #8
 8004052:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004054:	2301      	movs	r3, #1
 8004056:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004058:	2300      	movs	r3, #0
 800405a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800405c:	2301      	movs	r3, #1
 800405e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERR_LED_GPIO_Port, &GPIO_InitStruct);
 8004060:	f107 0314 	add.w	r3, r7, #20
 8004064:	4619      	mov	r1, r3
 8004066:	4831      	ldr	r0, [pc, #196]	; (800412c <MX_GPIO_Init+0x1d8>)
 8004068:	f003 fb02 	bl	8007670 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800406c:	2310      	movs	r3, #16
 800406e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004070:	2301      	movs	r3, #1
 8004072:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004074:	2300      	movs	r3, #0
 8004076:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004078:	2302      	movs	r3, #2
 800407a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800407c:	f107 0314 	add.w	r3, r7, #20
 8004080:	4619      	mov	r1, r3
 8004082:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004086:	f003 faf3 	bl	8007670 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 800408a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800408e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004090:	2301      	movs	r3, #1
 8004092:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004094:	2301      	movs	r3, #1
 8004096:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004098:	2302      	movs	r3, #2
 800409a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 800409c:	f107 0314 	add.w	r3, r7, #20
 80040a0:	4619      	mov	r1, r3
 80040a2:	4823      	ldr	r0, [pc, #140]	; (8004130 <MX_GPIO_Init+0x1dc>)
 80040a4:	f003 fae4 	bl	8007670 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 80040a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040ae:	2301      	movs	r3, #1
 80040b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040b2:	2301      	movs	r3, #1
 80040b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80040b6:	2301      	movs	r3, #1
 80040b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 80040ba:	f107 0314 	add.w	r3, r7, #20
 80040be:	4619      	mov	r1, r3
 80040c0:	481a      	ldr	r0, [pc, #104]	; (800412c <MX_GPIO_Init+0x1d8>)
 80040c2:	f003 fad5 	bl	8007670 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_RST_Pin */
  GPIO_InitStruct.Pin = SPI1_RST_Pin;
 80040c6:	2304      	movs	r3, #4
 80040c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040ca:	2301      	movs	r3, #1
 80040cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040ce:	2301      	movs	r3, #1
 80040d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80040d2:	2302      	movs	r3, #2
 80040d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_RST_GPIO_Port, &GPIO_InitStruct);
 80040d6:	f107 0314 	add.w	r3, r7, #20
 80040da:	4619      	mov	r1, r3
 80040dc:	4815      	ldr	r0, [pc, #84]	; (8004134 <MX_GPIO_Init+0x1e0>)
 80040de:	f003 fac7 	bl	8007670 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_DC_Pin */
  GPIO_InitStruct.Pin = SPI1_DC_Pin;
 80040e2:	2320      	movs	r3, #32
 80040e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040e6:	2301      	movs	r3, #1
 80040e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ea:	2300      	movs	r3, #0
 80040ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80040ee:	2302      	movs	r3, #2
 80040f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_DC_GPIO_Port, &GPIO_InitStruct);
 80040f2:	f107 0314 	add.w	r3, r7, #20
 80040f6:	4619      	mov	r1, r3
 80040f8:	480d      	ldr	r0, [pc, #52]	; (8004130 <MX_GPIO_Init+0x1dc>)
 80040fa:	f003 fab9 	bl	8007670 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80040fe:	2200      	movs	r2, #0
 8004100:	2100      	movs	r1, #0
 8004102:	2007      	movs	r0, #7
 8004104:	f002 ffeb 	bl	80070de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8004108:	2007      	movs	r0, #7
 800410a:	f003 f804 	bl	8007116 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800410e:	2200      	movs	r2, #0
 8004110:	2100      	movs	r1, #0
 8004112:	2008      	movs	r0, #8
 8004114:	f002 ffe3 	bl	80070de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8004118:	2008      	movs	r0, #8
 800411a:	f002 fffc 	bl	8007116 <HAL_NVIC_EnableIRQ>

}
 800411e:	bf00      	nop
 8004120:	3728      	adds	r7, #40	; 0x28
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	40021000 	.word	0x40021000
 800412c:	48000800 	.word	0x48000800
 8004130:	48000400 	.word	0x48000400
 8004134:	48000c00 	.word	0x48000c00

08004138 <hexToBin>:

//-------------------------------------------------------------------------------------------
//      Преобразует два символа строки из hex-формата в двоичный
//
uint8_t hexToBin(char *sc)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
char st = 0, ml = 0;
 8004140:	2300      	movs	r3, #0
 8004142:	73fb      	strb	r3, [r7, #15]
 8004144:	2300      	movs	r3, #0
 8004146:	73bb      	strb	r3, [r7, #14]

	if ((sc[0] >= '0') && (sc[0] <= '9')) st = (sc[0] - 0x30);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	2b2f      	cmp	r3, #47	; 0x2f
 800414e:	d908      	bls.n	8004162 <hexToBin+0x2a>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	2b39      	cmp	r3, #57	; 0x39
 8004156:	d804      	bhi.n	8004162 <hexToBin+0x2a>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	3b30      	subs	r3, #48	; 0x30
 800415e:	73fb      	strb	r3, [r7, #15]
 8004160:	e018      	b.n	8004194 <hexToBin+0x5c>
	else
	if ((sc[0] >= 'A') && (sc[0] <= 'F')) st = (sc[0] - 0x37);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	2b40      	cmp	r3, #64	; 0x40
 8004168:	d908      	bls.n	800417c <hexToBin+0x44>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	2b46      	cmp	r3, #70	; 0x46
 8004170:	d804      	bhi.n	800417c <hexToBin+0x44>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	3b37      	subs	r3, #55	; 0x37
 8004178:	73fb      	strb	r3, [r7, #15]
 800417a:	e00b      	b.n	8004194 <hexToBin+0x5c>
	else
	if ((sc[0] >= 'a') && (sc[0] <= 'f')) st = (sc[0] - 0x57);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	2b60      	cmp	r3, #96	; 0x60
 8004182:	d907      	bls.n	8004194 <hexToBin+0x5c>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	2b66      	cmp	r3, #102	; 0x66
 800418a:	d803      	bhi.n	8004194 <hexToBin+0x5c>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	3b57      	subs	r3, #87	; 0x57
 8004192:	73fb      	strb	r3, [r7, #15]

	if ((sc[1] >= '0') && (sc[1] <= '9')) ml = (sc[1] - 0x30);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	3301      	adds	r3, #1
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	2b2f      	cmp	r3, #47	; 0x2f
 800419c:	d90a      	bls.n	80041b4 <hexToBin+0x7c>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	3301      	adds	r3, #1
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	2b39      	cmp	r3, #57	; 0x39
 80041a6:	d805      	bhi.n	80041b4 <hexToBin+0x7c>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3301      	adds	r3, #1
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	3b30      	subs	r3, #48	; 0x30
 80041b0:	73bb      	strb	r3, [r7, #14]
 80041b2:	e01e      	b.n	80041f2 <hexToBin+0xba>
	else
	if ((sc[1] >= 'A') && (sc[1] <= 'F')) ml = (sc[1] - 0x37);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3301      	adds	r3, #1
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	2b40      	cmp	r3, #64	; 0x40
 80041bc:	d90a      	bls.n	80041d4 <hexToBin+0x9c>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	3301      	adds	r3, #1
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	2b46      	cmp	r3, #70	; 0x46
 80041c6:	d805      	bhi.n	80041d4 <hexToBin+0x9c>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3301      	adds	r3, #1
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	3b37      	subs	r3, #55	; 0x37
 80041d0:	73bb      	strb	r3, [r7, #14]
 80041d2:	e00e      	b.n	80041f2 <hexToBin+0xba>
	else
	if ((sc[1] >= 'a') && (sc[1] <= 'f')) ml = (sc[1] - 0x57);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	3301      	adds	r3, #1
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	2b60      	cmp	r3, #96	; 0x60
 80041dc:	d909      	bls.n	80041f2 <hexToBin+0xba>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	3301      	adds	r3, #1
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	2b66      	cmp	r3, #102	; 0x66
 80041e6:	d804      	bhi.n	80041f2 <hexToBin+0xba>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	3301      	adds	r3, #1
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	3b57      	subs	r3, #87	; 0x57
 80041f0:	73bb      	strb	r3, [r7, #14]

	return ((st << 4) | (ml & 0x0f));
 80041f2:	7bfb      	ldrb	r3, [r7, #15]
 80041f4:	011b      	lsls	r3, r3, #4
 80041f6:	b25a      	sxtb	r2, r3
 80041f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80041fc:	f003 030f 	and.w	r3, r3, #15
 8004200:	b25b      	sxtb	r3, r3
 8004202:	4313      	orrs	r3, r2
 8004204:	b25b      	sxtb	r3, r3
 8004206:	b2db      	uxtb	r3, r3

}
 8004208:	4618      	mov	r0, r3
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <getEvtCount>:


#ifdef SET_FIFO_MODE
//-------------------------------------------------------------------------------------------
uint8_t getEvtCount()
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
	return cnt_evt;
 8004218:	4b03      	ldr	r3, [pc, #12]	; (8004228 <getEvtCount+0x14>)
 800421a:	781b      	ldrb	r3, [r3, #0]
}
 800421c:	4618      	mov	r0, r3
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	20001caa 	.word	0x20001caa

0800422c <putEvt>:
//-------------------------------------------------------------------------------------------
void putEvt(int evt)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]

	//while (lock_fifo);
	//lock_fifo = true;

	if (cnt_evt > (MAX_FIFO_SIZE - 3)) {
 8004234:	4b30      	ldr	r3, [pc, #192]	; (80042f8 <putEvt+0xcc>)
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	2b3d      	cmp	r3, #61	; 0x3d
 800423a:	d907      	bls.n	800424c <putEvt+0x20>
		devError |= devFIFO;
 800423c:	4b2f      	ldr	r3, [pc, #188]	; (80042fc <putEvt+0xd0>)
 800423e:	881b      	ldrh	r3, [r3, #0]
 8004240:	f043 0310 	orr.w	r3, r3, #16
 8004244:	b29a      	uxth	r2, r3
 8004246:	4b2d      	ldr	r3, [pc, #180]	; (80042fc <putEvt+0xd0>)
 8004248:	801a      	strh	r2, [r3, #0]
		//lock_fifo = false;
		return;
 800424a:	e051      	b.n	80042f0 <putEvt+0xc4>
	}

	HAL_NVIC_DisableIRQ(USART2_IRQn);
 800424c:	2026      	movs	r0, #38	; 0x26
 800424e:	f002 ff70 	bl	8007132 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(TIM4_IRQn);
 8004252:	201e      	movs	r0, #30
 8004254:	f002 ff6d 	bl	8007132 <HAL_NVIC_DisableIRQ>

	if (cnt_evt >= MAX_FIFO_SIZE) {
 8004258:	4b27      	ldr	r3, [pc, #156]	; (80042f8 <putEvt+0xcc>)
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	2b3f      	cmp	r3, #63	; 0x3f
 800425e:	d906      	bls.n	800426e <putEvt+0x42>
			wr_evt_err++;
 8004260:	4b27      	ldr	r3, [pc, #156]	; (8004300 <putEvt+0xd4>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	3301      	adds	r3, #1
 8004266:	b2da      	uxtb	r2, r3
 8004268:	4b25      	ldr	r3, [pc, #148]	; (8004300 <putEvt+0xd4>)
 800426a:	701a      	strb	r2, [r3, #0]
 800426c:	e027      	b.n	80042be <putEvt+0x92>
		} else {
			evt_fifo[wr_evt_adr] = evt;
 800426e:	4b25      	ldr	r3, [pc, #148]	; (8004304 <putEvt+0xd8>)
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	4619      	mov	r1, r3
 8004274:	4a24      	ldr	r2, [pc, #144]	; (8004308 <putEvt+0xdc>)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			cnt_evt++;
 800427c:	4b1e      	ldr	r3, [pc, #120]	; (80042f8 <putEvt+0xcc>)
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	3301      	adds	r3, #1
 8004282:	b2da      	uxtb	r2, r3
 8004284:	4b1c      	ldr	r3, [pc, #112]	; (80042f8 <putEvt+0xcc>)
 8004286:	701a      	strb	r2, [r3, #0]
			if (wr_evt_adr < (MAX_FIFO_SIZE - 1) ) {
 8004288:	4b1e      	ldr	r3, [pc, #120]	; (8004304 <putEvt+0xd8>)
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	2b3e      	cmp	r3, #62	; 0x3e
 800428e:	d806      	bhi.n	800429e <putEvt+0x72>
				wr_evt_adr++;
 8004290:	4b1c      	ldr	r3, [pc, #112]	; (8004304 <putEvt+0xd8>)
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	3301      	adds	r3, #1
 8004296:	b2da      	uxtb	r2, r3
 8004298:	4b1a      	ldr	r3, [pc, #104]	; (8004304 <putEvt+0xd8>)
 800429a:	701a      	strb	r2, [r3, #0]
 800429c:	e002      	b.n	80042a4 <putEvt+0x78>
			} else  {
				wr_evt_adr = 0;
 800429e:	4b19      	ldr	r3, [pc, #100]	; (8004304 <putEvt+0xd8>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	701a      	strb	r2, [r3, #0]
			}
			wr_evt_err = 0;
 80042a4:	4b16      	ldr	r3, [pc, #88]	; (8004300 <putEvt+0xd4>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	701a      	strb	r2, [r3, #0]
			if (cnt_evt > max_evt) max_evt = cnt_evt;
 80042aa:	4b13      	ldr	r3, [pc, #76]	; (80042f8 <putEvt+0xcc>)
 80042ac:	781a      	ldrb	r2, [r3, #0]
 80042ae:	4b17      	ldr	r3, [pc, #92]	; (800430c <putEvt+0xe0>)
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d903      	bls.n	80042be <putEvt+0x92>
 80042b6:	4b10      	ldr	r3, [pc, #64]	; (80042f8 <putEvt+0xcc>)
 80042b8:	781a      	ldrb	r2, [r3, #0]
 80042ba:	4b14      	ldr	r3, [pc, #80]	; (800430c <putEvt+0xe0>)
 80042bc:	701a      	strb	r2, [r3, #0]
		}

		if (wr_evt_err) devError |= devFIFO;
 80042be:	4b10      	ldr	r3, [pc, #64]	; (8004300 <putEvt+0xd4>)
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d007      	beq.n	80042d6 <putEvt+0xaa>
 80042c6:	4b0d      	ldr	r3, [pc, #52]	; (80042fc <putEvt+0xd0>)
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	f043 0310 	orr.w	r3, r3, #16
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	4b0a      	ldr	r3, [pc, #40]	; (80042fc <putEvt+0xd0>)
 80042d2:	801a      	strh	r2, [r3, #0]
 80042d4:	e006      	b.n	80042e4 <putEvt+0xb8>
				   else devError &= ~devFIFO;
 80042d6:	4b09      	ldr	r3, [pc, #36]	; (80042fc <putEvt+0xd0>)
 80042d8:	881b      	ldrh	r3, [r3, #0]
 80042da:	f023 0310 	bic.w	r3, r3, #16
 80042de:	b29a      	uxth	r2, r3
 80042e0:	4b06      	ldr	r3, [pc, #24]	; (80042fc <putEvt+0xd0>)
 80042e2:	801a      	strh	r2, [r3, #0]

		HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80042e4:	201e      	movs	r0, #30
 80042e6:	f002 ff16 	bl	8007116 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 80042ea:	2026      	movs	r0, #38	; 0x26
 80042ec:	f002 ff13 	bl	8007116 <HAL_NVIC_EnableIRQ>

		//lock_fifo = false;
}
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	20001caa 	.word	0x20001caa
 80042fc:	20001890 	.word	0x20001890
 8004300:	20001ca9 	.word	0x20001ca9
 8004304:	20001ca8 	.word	0x20001ca8
 8004308:	200000c4 	.word	0x200000c4
 800430c:	20001cab 	.word	0x20001cab

08004310 <getEvt>:
//-------------------------------------------------------------------------------------------
int getEvt()
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
int ret = evt_None;
 8004316:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800431a:	607b      	str	r3, [r7, #4]

	//while (lock_fifo);
	//lock_fifo = true;

	HAL_NVIC_DisableIRQ(USART2_IRQn);
 800431c:	2026      	movs	r0, #38	; 0x26
 800431e:	f002 ff08 	bl	8007132 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(TIM4_IRQn);
 8004322:	201e      	movs	r0, #30
 8004324:	f002 ff05 	bl	8007132 <HAL_NVIC_DisableIRQ>
	if (cnt_evt) {
 8004328:	4b16      	ldr	r3, [pc, #88]	; (8004384 <getEvt+0x74>)
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d01e      	beq.n	800436e <getEvt+0x5e>
		ret = evt_fifo[rd_evt_adr];
 8004330:	4b15      	ldr	r3, [pc, #84]	; (8004388 <getEvt+0x78>)
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	461a      	mov	r2, r3
 8004336:	4b15      	ldr	r3, [pc, #84]	; (800438c <getEvt+0x7c>)
 8004338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800433c:	607b      	str	r3, [r7, #4]
		if (cnt_evt) cnt_evt--;
 800433e:	4b11      	ldr	r3, [pc, #68]	; (8004384 <getEvt+0x74>)
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d005      	beq.n	8004352 <getEvt+0x42>
 8004346:	4b0f      	ldr	r3, [pc, #60]	; (8004384 <getEvt+0x74>)
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	3b01      	subs	r3, #1
 800434c:	b2da      	uxtb	r2, r3
 800434e:	4b0d      	ldr	r3, [pc, #52]	; (8004384 <getEvt+0x74>)
 8004350:	701a      	strb	r2, [r3, #0]
		if (rd_evt_adr < (MAX_FIFO_SIZE - 1) ) {
 8004352:	4b0d      	ldr	r3, [pc, #52]	; (8004388 <getEvt+0x78>)
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	2b3e      	cmp	r3, #62	; 0x3e
 8004358:	d806      	bhi.n	8004368 <getEvt+0x58>
			rd_evt_adr++;
 800435a:	4b0b      	ldr	r3, [pc, #44]	; (8004388 <getEvt+0x78>)
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	3301      	adds	r3, #1
 8004360:	b2da      	uxtb	r2, r3
 8004362:	4b09      	ldr	r3, [pc, #36]	; (8004388 <getEvt+0x78>)
 8004364:	701a      	strb	r2, [r3, #0]
 8004366:	e002      	b.n	800436e <getEvt+0x5e>
		} else {
			rd_evt_adr = 0;
 8004368:	4b07      	ldr	r3, [pc, #28]	; (8004388 <getEvt+0x78>)
 800436a:	2200      	movs	r2, #0
 800436c:	701a      	strb	r2, [r3, #0]
		}
	}

	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800436e:	201e      	movs	r0, #30
 8004370:	f002 fed1 	bl	8007116 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004374:	2026      	movs	r0, #38	; 0x26
 8004376:	f002 fece 	bl	8007116 <HAL_NVIC_EnableIRQ>

	//lock_fifo = false;

	return ret;
 800437a:	687b      	ldr	r3, [r7, #4]
}
 800437c:	4618      	mov	r0, r3
 800437e:	3708      	adds	r7, #8
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	20001caa 	.word	0x20001caa
 8004388:	20001ca7 	.word	0x20001ca7
 800438c:	200000c4 	.word	0x200000c4

08004390 <nameStation>:
//-------------------------------------------------------------------------------------------
#ifdef SET_DISPLAY

//-------------------------------------------------------------------------------------------
const char *nameStation(float fr)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	ed87 0a01 	vstr	s0, [r7, #4]
int8_t ik = -1;
 800439a:	23ff      	movs	r3, #255	; 0xff
 800439c:	73fb      	strb	r3, [r7, #15]

	for (int8_t i = 0; i < MAX_LIST; i++) {
 800439e:	2300      	movs	r3, #0
 80043a0:	73bb      	strb	r3, [r7, #14]
 80043a2:	e01b      	b.n	80043dc <nameStation+0x4c>
		if (list[i].freq == fr) {
 80043a4:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80043a8:	491a      	ldr	r1, [pc, #104]	; (8004414 <nameStation+0x84>)
 80043aa:	4613      	mov	r3, r2
 80043ac:	00db      	lsls	r3, r3, #3
 80043ae:	4413      	add	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	440b      	add	r3, r1
 80043b4:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80043b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80043bc:	ee07 3a10 	vmov	s14, r3
 80043c0:	eef4 7a47 	vcmp.f32	s15, s14
 80043c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c8:	d102      	bne.n	80043d0 <nameStation+0x40>
			ik = i;
 80043ca:	7bbb      	ldrb	r3, [r7, #14]
 80043cc:	73fb      	strb	r3, [r7, #15]
			break;
 80043ce:	e009      	b.n	80043e4 <nameStation+0x54>
	for (int8_t i = 0; i < MAX_LIST; i++) {
 80043d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	3301      	adds	r3, #1
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	73bb      	strb	r3, [r7, #14]
 80043dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80043e0:	2b18      	cmp	r3, #24
 80043e2:	dddf      	ble.n	80043a4 <nameStation+0x14>
		}
	}

	if (ik != -1) return list[ik].name;
 80043e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043ec:	d009      	beq.n	8004402 <nameStation+0x72>
 80043ee:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80043f2:	4613      	mov	r3, r2
 80043f4:	00db      	lsls	r3, r3, #3
 80043f6:	4413      	add	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4a06      	ldr	r2, [pc, #24]	; (8004414 <nameStation+0x84>)
 80043fc:	4413      	add	r3, r2
 80043fe:	3305      	adds	r3, #5
 8004400:	e001      	b.n	8004406 <nameStation+0x76>
			 else return noneStation;
 8004402:	4b05      	ldr	r3, [pc, #20]	; (8004418 <nameStation+0x88>)
 8004404:	681b      	ldr	r3, [r3, #0]
}
 8004406:	4618      	mov	r0, r3
 8004408:	3714      	adds	r7, #20
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	20003d1c 	.word	0x20003d1c
 8004418:	200001f4 	.word	0x200001f4

0800441c <getNextList>:
//-------------------------------------------------------------------------------------------
float getNextList(float fr, uint8_t up, uint8_t *band)
{
 800441c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004420:	b08e      	sub	sp, #56	; 0x38
 8004422:	af08      	add	r7, sp, #32
 8004424:	ed87 0a03 	vstr	s0, [r7, #12]
 8004428:	4603      	mov	r3, r0
 800442a:	6079      	str	r1, [r7, #4]
 800442c:	72fb      	strb	r3, [r7, #11]
float ret = fr;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	613b      	str	r3, [r7, #16]
int8_t ik = -1;
 8004432:	23ff      	movs	r3, #255	; 0xff
 8004434:	75fb      	strb	r3, [r7, #23]

	for (int8_t i = 0; i < MAX_LIST; i++) {
 8004436:	2300      	movs	r3, #0
 8004438:	75bb      	strb	r3, [r7, #22]
 800443a:	e01b      	b.n	8004474 <getNextList+0x58>
		if (list[i].freq == fr) {
 800443c:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8004440:	4965      	ldr	r1, [pc, #404]	; (80045d8 <getNextList+0x1bc>)
 8004442:	4613      	mov	r3, r2
 8004444:	00db      	lsls	r3, r3, #3
 8004446:	4413      	add	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	440b      	add	r3, r1
 800444c:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8004450:	edd7 7a03 	vldr	s15, [r7, #12]
 8004454:	ee07 3a10 	vmov	s14, r3
 8004458:	eef4 7a47 	vcmp.f32	s15, s14
 800445c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004460:	d102      	bne.n	8004468 <getNextList+0x4c>
			ik = i;
 8004462:	7dbb      	ldrb	r3, [r7, #22]
 8004464:	75fb      	strb	r3, [r7, #23]
			break;
 8004466:	e009      	b.n	800447c <getNextList+0x60>
	for (int8_t i = 0; i < MAX_LIST; i++) {
 8004468:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800446c:	b2db      	uxtb	r3, r3
 800446e:	3301      	adds	r3, #1
 8004470:	b2db      	uxtb	r3, r3
 8004472:	75bb      	strb	r3, [r7, #22]
 8004474:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004478:	2b18      	cmp	r3, #24
 800447a:	dddf      	ble.n	800443c <getNextList+0x20>
		}
	}
	if (ik != -1) {
 800447c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004480:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004484:	d01b      	beq.n	80044be <getNextList+0xa2>
		if (up) {
 8004486:	7afb      	ldrb	r3, [r7, #11]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00a      	beq.n	80044a2 <getNextList+0x86>
			if (++ik == MAX_LIST) ik = 0;
 800448c:	7dfb      	ldrb	r3, [r7, #23]
 800448e:	3301      	adds	r3, #1
 8004490:	b2db      	uxtb	r3, r3
 8004492:	75fb      	strb	r3, [r7, #23]
 8004494:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004498:	2b19      	cmp	r3, #25
 800449a:	d161      	bne.n	8004560 <getNextList+0x144>
 800449c:	2300      	movs	r3, #0
 800449e:	75fb      	strb	r3, [r7, #23]
 80044a0:	e05e      	b.n	8004560 <getNextList+0x144>
		} else {
			if (ik != 0) ik--; else ik = MAX_LIST - 1;
 80044a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d006      	beq.n	80044b8 <getNextList+0x9c>
 80044aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	3b01      	subs	r3, #1
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	75fb      	strb	r3, [r7, #23]
 80044b6:	e053      	b.n	8004560 <getNextList+0x144>
 80044b8:	2318      	movs	r3, #24
 80044ba:	75fb      	strb	r3, [r7, #23]
 80044bc:	e050      	b.n	8004560 <getNextList+0x144>
		}
	} else {
		if (up) {// seek_up
 80044be:	7afb      	ldrb	r3, [r7, #11]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d023      	beq.n	800450c <getNextList+0xf0>
			for (int8_t i = ik; i < MAX_LIST; i++) {
 80044c4:	7dfb      	ldrb	r3, [r7, #23]
 80044c6:	757b      	strb	r3, [r7, #21]
 80044c8:	e01b      	b.n	8004502 <getNextList+0xe6>
				if (list[i].freq > fr) {
 80044ca:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80044ce:	4942      	ldr	r1, [pc, #264]	; (80045d8 <getNextList+0x1bc>)
 80044d0:	4613      	mov	r3, r2
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	4413      	add	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	440b      	add	r3, r1
 80044da:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80044de:	edd7 7a03 	vldr	s15, [r7, #12]
 80044e2:	ee07 3a10 	vmov	s14, r3
 80044e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ee:	d502      	bpl.n	80044f6 <getNextList+0xda>
					ik = i;
 80044f0:	7d7b      	ldrb	r3, [r7, #21]
 80044f2:	75fb      	strb	r3, [r7, #23]
					break;
 80044f4:	e02d      	b.n	8004552 <getNextList+0x136>
			for (int8_t i = ik; i < MAX_LIST; i++) {
 80044f6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	3301      	adds	r3, #1
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	757b      	strb	r3, [r7, #21]
 8004502:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8004506:	2b18      	cmp	r3, #24
 8004508:	dddf      	ble.n	80044ca <getNextList+0xae>
 800450a:	e022      	b.n	8004552 <getNextList+0x136>
				}
			}
		} else {// seek_down
			for (int8_t i = ik; i <= 0; i--) {
 800450c:	7dfb      	ldrb	r3, [r7, #23]
 800450e:	753b      	strb	r3, [r7, #20]
 8004510:	e01b      	b.n	800454a <getNextList+0x12e>
				if (list[i].freq < fr) {
 8004512:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8004516:	4930      	ldr	r1, [pc, #192]	; (80045d8 <getNextList+0x1bc>)
 8004518:	4613      	mov	r3, r2
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	4413      	add	r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	440b      	add	r3, r1
 8004522:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8004526:	edd7 7a03 	vldr	s15, [r7, #12]
 800452a:	ee07 3a10 	vmov	s14, r3
 800452e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004536:	dd02      	ble.n	800453e <getNextList+0x122>
					ik = i;
 8004538:	7d3b      	ldrb	r3, [r7, #20]
 800453a:	75fb      	strb	r3, [r7, #23]
					break;
 800453c:	e009      	b.n	8004552 <getNextList+0x136>
			for (int8_t i = ik; i <= 0; i--) {
 800453e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8004542:	b2db      	uxtb	r3, r3
 8004544:	3b01      	subs	r3, #1
 8004546:	b2db      	uxtb	r3, r3
 8004548:	753b      	strb	r3, [r7, #20]
 800454a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800454e:	2b00      	cmp	r3, #0
 8004550:	dddf      	ble.n	8004512 <getNextList+0xf6>
				}
			}
		}
		if (ik == -1) ik = 0;
 8004552:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004556:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800455a:	d101      	bne.n	8004560 <getNextList+0x144>
 800455c:	2300      	movs	r3, #0
 800455e:	75fb      	strb	r3, [r7, #23]
	}
	ret = list[ik].freq;
 8004560:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8004564:	491c      	ldr	r1, [pc, #112]	; (80045d8 <getNextList+0x1bc>)
 8004566:	4613      	mov	r3, r2
 8004568:	00db      	lsls	r3, r3, #3
 800456a:	4413      	add	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	440b      	add	r3, r1
 8004570:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8004574:	613b      	str	r3, [r7, #16]
	*band = list[ik].band;
 8004576:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800457a:	4917      	ldr	r1, [pc, #92]	; (80045d8 <getNextList+0x1bc>)
 800457c:	4613      	mov	r3, r2
 800457e:	00db      	lsls	r3, r3, #3
 8004580:	4413      	add	r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	440b      	add	r3, r1
 8004586:	781a      	ldrb	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	701a      	strb	r2, [r3, #0]
	Report(1, "[%s] up=%u ik=%d, fr=%.1f ret=%.1f band=%u\r\n", __func__, up, ik, fr, ret, *band);
 800458c:	f897 800b 	ldrb.w	r8, [r7, #11]
 8004590:	f997 6017 	ldrsb.w	r6, [r7, #23]
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f7fb ffd7 	bl	8000548 <__aeabi_f2d>
 800459a:	4604      	mov	r4, r0
 800459c:	460d      	mov	r5, r1
 800459e:	6938      	ldr	r0, [r7, #16]
 80045a0:	f7fb ffd2 	bl	8000548 <__aeabi_f2d>
 80045a4:	4602      	mov	r2, r0
 80045a6:	460b      	mov	r3, r1
 80045a8:	6879      	ldr	r1, [r7, #4]
 80045aa:	7809      	ldrb	r1, [r1, #0]
 80045ac:	9106      	str	r1, [sp, #24]
 80045ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80045b2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80045b6:	9600      	str	r6, [sp, #0]
 80045b8:	4643      	mov	r3, r8
 80045ba:	4a08      	ldr	r2, [pc, #32]	; (80045dc <getNextList+0x1c0>)
 80045bc:	4908      	ldr	r1, [pc, #32]	; (80045e0 <getNextList+0x1c4>)
 80045be:	2001      	movs	r0, #1
 80045c0:	f000 f99e 	bl	8004900 <Report>

	return ret;
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	ee07 3a90 	vmov	s15, r3
}
 80045ca:	eeb0 0a67 	vmov.f32	s0, s15
 80045ce:	3718      	adds	r7, #24
 80045d0:	46bd      	mov	sp, r7
 80045d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045d6:	bf00      	nop
 80045d8:	20003d1c 	.word	0x20003d1c
 80045dc:	08018188 	.word	0x08018188
 80045e0:	08017178 	.word	0x08017178

080045e4 <showLine>:
//-------------------------------------------------------------------------------------------
void showLine(char *msg, uint16_t lin, int *last_len, bool update)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b08a      	sub	sp, #40	; 0x28
 80045e8:	af02      	add	r7, sp, #8
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	607a      	str	r2, [r7, #4]
 80045ee:	461a      	mov	r2, r3
 80045f0:	460b      	mov	r3, r1
 80045f2:	817b      	strh	r3, [r7, #10]
 80045f4:	4613      	mov	r3, r2
 80045f6:	727b      	strb	r3, [r7, #9]
int il = strlen(msg);
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f7fb fde9 	bl	80001d0 <strlen>
 80045fe:	4603      	mov	r3, r0
 8004600:	617b      	str	r3, [r7, #20]
int xf = ( (SCREEN_WIDTH - (lfnt->FontWidth * il) ) >> 1);// & 0x7f;
 8004602:	4b2e      	ldr	r3, [pc, #184]	; (80046bc <showLine+0xd8>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	461a      	mov	r2, r3
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	fb02 f303 	mul.w	r3, r2, r3
 8004610:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8004614:	105b      	asrs	r3, r3, #1
 8004616:	61fb      	str	r3, [r7, #28]
bool yes = false;
 8004618:	2300      	movs	r3, #0
 800461a:	76fb      	strb	r3, [r7, #27]

	if (*last_len > il) {
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	429a      	cmp	r2, r3
 8004624:	da0d      	bge.n	8004642 <showLine+0x5e>
		ST7565_DrawFilledRectangle(2, lin, SCREEN_WIDTH - 4, lfnt->FontHeight, PIX_OFF);
 8004626:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800462a:	4b24      	ldr	r3, [pc, #144]	; (80046bc <showLine+0xd8>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	785b      	ldrb	r3, [r3, #1]
 8004630:	b21b      	sxth	r3, r3
 8004632:	2200      	movs	r2, #0
 8004634:	9200      	str	r2, [sp, #0]
 8004636:	227c      	movs	r2, #124	; 0x7c
 8004638:	2002      	movs	r0, #2
 800463a:	f7fd faf0 	bl	8001c1e <ST7565_DrawFilledRectangle>
		yes = true;
 800463e:	2301      	movs	r3, #1
 8004640:	76fb      	strb	r3, [r7, #27]
	}
	*last_len = il;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	601a      	str	r2, [r3, #0]
	if (*msg > 0x7f) {
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	b25b      	sxtb	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	da03      	bge.n	800465a <showLine+0x76>
		xf += il;
 8004652:	69fa      	ldr	r2, [r7, #28]
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	4413      	add	r3, r2
 8004658:	61fb      	str	r3, [r7, #28]
	}
	if (!yes) ST7565_DrawFilledRectangle(2, lin, SCREEN_WIDTH - 4, lfnt->FontHeight, PIX_OFF);
 800465a:	7efb      	ldrb	r3, [r7, #27]
 800465c:	f083 0301 	eor.w	r3, r3, #1
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00b      	beq.n	800467e <showLine+0x9a>
 8004666:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800466a:	4b14      	ldr	r3, [pc, #80]	; (80046bc <showLine+0xd8>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	785b      	ldrb	r3, [r3, #1]
 8004670:	b21b      	sxth	r3, r3
 8004672:	2200      	movs	r2, #0
 8004674:	9200      	str	r2, [sp, #0]
 8004676:	227c      	movs	r2, #124	; 0x7c
 8004678:	2002      	movs	r0, #2
 800467a:	f7fd fad0 	bl	8001c1e <ST7565_DrawFilledRectangle>

	if ((!xf) || (xf > (SCREEN_WIDTH - 4))) xf = 1;
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d002      	beq.n	800468a <showLine+0xa6>
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	2b7c      	cmp	r3, #124	; 0x7c
 8004688:	dd01      	ble.n	800468e <showLine+0xaa>
 800468a:	2301      	movs	r3, #1
 800468c:	61fb      	str	r3, [r7, #28]
	ST7565_Print(xf, lin, msg, lfnt, 1, PIX_ON);
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	b218      	sxth	r0, r3
 8004692:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8004696:	4b09      	ldr	r3, [pc, #36]	; (80046bc <showLine+0xd8>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2201      	movs	r2, #1
 800469c:	9201      	str	r2, [sp, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	9200      	str	r2, [sp, #0]
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	f7fd f862 	bl	800176c <ST7565_Print>
	if (update) ST7565_Update();
 80046a8:	7a7b      	ldrb	r3, [r7, #9]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <showLine+0xce>
 80046ae:	f7fc fead 	bl	800140c <ST7565_Update>
}
 80046b2:	bf00      	nop
 80046b4:	3720      	adds	r7, #32
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	20003d04 	.word	0x20003d04

080046c0 <errLedOn>:
#endif
//-------------------------------------------------------------------------------------------
void errLedOn(bool on)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	4603      	mov	r3, r0
 80046c8:	71fb      	strb	r3, [r7, #7]
	if (on)
 80046ca:	79fb      	ldrb	r3, [r7, #7]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d005      	beq.n	80046dc <errLedOn+0x1c>
		HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_SET);//LED ON
 80046d0:	2201      	movs	r2, #1
 80046d2:	2108      	movs	r1, #8
 80046d4:	4806      	ldr	r0, [pc, #24]	; (80046f0 <errLedOn+0x30>)
 80046d6:	f003 f98d 	bl	80079f4 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_RESET);//LED OFF
}
 80046da:	e004      	b.n	80046e6 <errLedOn+0x26>
		HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_RESET);//LED OFF
 80046dc:	2200      	movs	r2, #0
 80046de:	2108      	movs	r1, #8
 80046e0:	4803      	ldr	r0, [pc, #12]	; (80046f0 <errLedOn+0x30>)
 80046e2:	f003 f987 	bl	80079f4 <HAL_GPIO_WritePin>
}
 80046e6:	bf00      	nop
 80046e8:	3708      	adds	r7, #8
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	48000800 	.word	0x48000800

080046f4 <get_secCounter>:
//------------------------------------------------------------------------------------
uint32_t get_secCounter()
{
 80046f4:	b480      	push	{r7}
 80046f6:	af00      	add	r7, sp, #0
	return secCounter;
 80046f8:	4b03      	ldr	r3, [pc, #12]	; (8004708 <get_secCounter+0x14>)
 80046fa:	681b      	ldr	r3, [r3, #0]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	20001894 	.word	0x20001894

0800470c <set_Date>:

    for (i = 0; i < strlen(st); i++) *(st + i) = toupper(*(st + i));
}
//------------------------------------------------------------------------------------------
void set_Date(uint32_t usec)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b094      	sub	sp, #80	; 0x50
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
struct tm ts;
time_t ep = (time_t)usec;
 8004714:	6879      	ldr	r1, [r7, #4]
 8004716:	2000      	movs	r0, #0
 8004718:	460a      	mov	r2, r1
 800471a:	4603      	mov	r3, r0
 800471c:	e9c7 2308 	strd	r2, r3, [r7, #32]

	gmtime_r(&ep, &ts);
 8004720:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004724:	f107 0320 	add.w	r3, r7, #32
 8004728:	4611      	mov	r1, r2
 800472a:	4618      	mov	r0, r3
 800472c:	f00d fcba 	bl	80120a4 <gmtime_r>

	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	sDate.WeekDay = ts.tm_wday;
 8004730:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004732:	b2db      	uxtb	r3, r3
 8004734:	723b      	strb	r3, [r7, #8]
	sDate.Month   = ts.tm_mon + 1;
 8004736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004738:	b2db      	uxtb	r3, r3
 800473a:	3301      	adds	r3, #1
 800473c:	b2db      	uxtb	r3, r3
 800473e:	727b      	strb	r3, [r7, #9]
	sDate.Date    = ts.tm_mday;
 8004740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004742:	b2db      	uxtb	r3, r3
 8004744:	72bb      	strb	r3, [r7, #10]
	sDate.Year    = ts.tm_year;
 8004746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004748:	b2db      	uxtb	r3, r3
 800474a:	72fb      	strb	r3, [r7, #11]
	sTime.Hours   = ts.tm_hour + tZone;
 800474c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800474e:	b2da      	uxtb	r2, r3
 8004750:	4b1a      	ldr	r3, [pc, #104]	; (80047bc <set_Date+0xb0>)
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	4413      	add	r3, r2
 8004756:	b2db      	uxtb	r3, r3
 8004758:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = ts.tm_min;
 800475a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475c:	b2db      	uxtb	r3, r3
 800475e:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = ts.tm_sec;
 8004760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004762:	b2db      	uxtb	r3, r3
 8004764:	73bb      	strb	r3, [r7, #14]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 8004766:	f107 030c 	add.w	r3, r7, #12
 800476a:	2200      	movs	r2, #0
 800476c:	4619      	mov	r1, r3
 800476e:	4814      	ldr	r0, [pc, #80]	; (80047c0 <set_Date+0xb4>)
 8004770:	f006 f99f 	bl	800aab2 <HAL_RTC_SetTime>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d007      	beq.n	800478a <set_Date+0x7e>
 800477a:	4b12      	ldr	r3, [pc, #72]	; (80047c4 <set_Date+0xb8>)
 800477c:	881b      	ldrh	r3, [r3, #0]
 800477e:	f043 0308 	orr.w	r3, r3, #8
 8004782:	b29a      	uxth	r2, r3
 8004784:	4b0f      	ldr	r3, [pc, #60]	; (80047c4 <set_Date+0xb8>)
 8004786:	801a      	strh	r2, [r3, #0]
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
		else {
			setDate = true;
		}
	}
}
 8004788:	e014      	b.n	80047b4 <set_Date+0xa8>
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 800478a:	f107 0308 	add.w	r3, r7, #8
 800478e:	2200      	movs	r2, #0
 8004790:	4619      	mov	r1, r3
 8004792:	480b      	ldr	r0, [pc, #44]	; (80047c0 <set_Date+0xb4>)
 8004794:	f006 fa86 	bl	800aca4 <HAL_RTC_SetDate>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d007      	beq.n	80047ae <set_Date+0xa2>
 800479e:	4b09      	ldr	r3, [pc, #36]	; (80047c4 <set_Date+0xb8>)
 80047a0:	881b      	ldrh	r3, [r3, #0]
 80047a2:	f043 0308 	orr.w	r3, r3, #8
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	4b06      	ldr	r3, [pc, #24]	; (80047c4 <set_Date+0xb8>)
 80047aa:	801a      	strh	r2, [r3, #0]
}
 80047ac:	e002      	b.n	80047b4 <set_Date+0xa8>
			setDate = true;
 80047ae:	4b06      	ldr	r3, [pc, #24]	; (80047c8 <set_Date+0xbc>)
 80047b0:	2201      	movs	r2, #1
 80047b2:	701a      	strb	r2, [r3, #0]
}
 80047b4:	bf00      	nop
 80047b6:	3750      	adds	r7, #80	; 0x50
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	20001ca6 	.word	0x20001ca6
 80047c0:	20000934 	.word	0x20000934
 80047c4:	20001890 	.word	0x20001890
 80047c8:	20001ca5 	.word	0x20001ca5

080047cc <sec2str>:

	return ep;
}
//------------------------------------------------------------------------------------------
int sec2str(char *st)
{
 80047cc:	b590      	push	{r4, r7, lr}
 80047ce:	b093      	sub	sp, #76	; 0x4c
 80047d0:	af04      	add	r7, sp, #16
 80047d2:	6078      	str	r0, [r7, #4]
int ret = 0;
 80047d4:	2300      	movs	r3, #0
 80047d6:	637b      	str	r3, [r7, #52]	; 0x34

	if (!setDate) {
 80047d8:	4b40      	ldr	r3, [pc, #256]	; (80048dc <sec2str+0x110>)
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	f083 0301 	eor.w	r3, r3, #1
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d040      	beq.n	8004868 <sec2str+0x9c>
		uint32_t sec = get_secCounter();
 80047e6:	f7ff ff85 	bl	80046f4 <get_secCounter>
 80047ea:	6338      	str	r0, [r7, #48]	; 0x30

		uint32_t day = sec / (60 * 60 * 24);
 80047ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ee:	4a3c      	ldr	r2, [pc, #240]	; (80048e0 <sec2str+0x114>)
 80047f0:	fba2 2303 	umull	r2, r3, r2, r3
 80047f4:	0c1b      	lsrs	r3, r3, #16
 80047f6:	62fb      	str	r3, [r7, #44]	; 0x2c
		sec %= (60 * 60 * 24);
 80047f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fa:	4a39      	ldr	r2, [pc, #228]	; (80048e0 <sec2str+0x114>)
 80047fc:	fba2 1203 	umull	r1, r2, r2, r3
 8004800:	0c12      	lsrs	r2, r2, #16
 8004802:	4938      	ldr	r1, [pc, #224]	; (80048e4 <sec2str+0x118>)
 8004804:	fb01 f202 	mul.w	r2, r1, r2
 8004808:	1a9b      	subs	r3, r3, r2
 800480a:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t hour = sec / (60 * 60);
 800480c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480e:	4a36      	ldr	r2, [pc, #216]	; (80048e8 <sec2str+0x11c>)
 8004810:	fba2 2303 	umull	r2, r3, r2, r3
 8004814:	0adb      	lsrs	r3, r3, #11
 8004816:	62bb      	str	r3, [r7, #40]	; 0x28
		sec %= (60 * 60);
 8004818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481a:	4a33      	ldr	r2, [pc, #204]	; (80048e8 <sec2str+0x11c>)
 800481c:	fba2 1203 	umull	r1, r2, r2, r3
 8004820:	0ad2      	lsrs	r2, r2, #11
 8004822:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004826:	fb01 f202 	mul.w	r2, r1, r2
 800482a:	1a9b      	subs	r3, r3, r2
 800482c:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t min = sec / (60);
 800482e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004830:	4a2e      	ldr	r2, [pc, #184]	; (80048ec <sec2str+0x120>)
 8004832:	fba2 2303 	umull	r2, r3, r2, r3
 8004836:	095b      	lsrs	r3, r3, #5
 8004838:	627b      	str	r3, [r7, #36]	; 0x24
		sec %= 60;
 800483a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800483c:	4b2b      	ldr	r3, [pc, #172]	; (80048ec <sec2str+0x120>)
 800483e:	fba3 1302 	umull	r1, r3, r3, r2
 8004842:	0959      	lsrs	r1, r3, #5
 8004844:	460b      	mov	r3, r1
 8004846:	011b      	lsls	r3, r3, #4
 8004848:	1a5b      	subs	r3, r3, r1
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	633b      	str	r3, [r7, #48]	; 0x30

		ret = sprintf(st, "%lu.%02lu:%02lu:%02lu", day, hour, min, sec);
 8004850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004852:	9301      	str	r3, [sp, #4]
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	9300      	str	r3, [sp, #0]
 8004858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800485c:	4924      	ldr	r1, [pc, #144]	; (80048f0 <sec2str+0x124>)
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f00e f970 	bl	8012b44 <siprintf>
 8004864:	6378      	str	r0, [r7, #52]	; 0x34
 8004866:	e034      	b.n	80048d2 <sec2str+0x106>
	} else {
		RTC_TimeTypeDef sTime;
		RTC_DateTypeDef sDate;
		if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN)) devError |= devRTC;
 8004868:	f107 030c 	add.w	r3, r7, #12
 800486c:	2200      	movs	r2, #0
 800486e:	4619      	mov	r1, r3
 8004870:	4820      	ldr	r0, [pc, #128]	; (80048f4 <sec2str+0x128>)
 8004872:	f006 fa9e 	bl	800adb2 <HAL_RTC_GetDate>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d007      	beq.n	800488c <sec2str+0xc0>
 800487c:	4b1e      	ldr	r3, [pc, #120]	; (80048f8 <sec2str+0x12c>)
 800487e:	881b      	ldrh	r3, [r3, #0]
 8004880:	f043 0308 	orr.w	r3, r3, #8
 8004884:	b29a      	uxth	r2, r3
 8004886:	4b1c      	ldr	r3, [pc, #112]	; (80048f8 <sec2str+0x12c>)
 8004888:	801a      	strh	r2, [r3, #0]
 800488a:	e022      	b.n	80048d2 <sec2str+0x106>
		else {
			if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN)) devError |= devRTC;
 800488c:	f107 0310 	add.w	r3, r7, #16
 8004890:	2200      	movs	r2, #0
 8004892:	4619      	mov	r1, r3
 8004894:	4817      	ldr	r0, [pc, #92]	; (80048f4 <sec2str+0x128>)
 8004896:	f006 f9a9 	bl	800abec <HAL_RTC_GetTime>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d007      	beq.n	80048b0 <sec2str+0xe4>
 80048a0:	4b15      	ldr	r3, [pc, #84]	; (80048f8 <sec2str+0x12c>)
 80048a2:	881b      	ldrh	r3, [r3, #0]
 80048a4:	f043 0308 	orr.w	r3, r3, #8
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	4b13      	ldr	r3, [pc, #76]	; (80048f8 <sec2str+0x12c>)
 80048ac:	801a      	strh	r2, [r3, #0]
 80048ae:	e010      	b.n	80048d2 <sec2str+0x106>
			else {
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
								sDate.Date, sDate.Month,
 80048b0:	7bbb      	ldrb	r3, [r7, #14]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 80048b2:	4618      	mov	r0, r3
								sDate.Date, sDate.Month,
 80048b4:	7b7b      	ldrb	r3, [r7, #13]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 80048b6:	461c      	mov	r4, r3
								sTime.Hours, sTime.Minutes, sTime.Seconds);
 80048b8:	7c3b      	ldrb	r3, [r7, #16]
 80048ba:	7c7a      	ldrb	r2, [r7, #17]
 80048bc:	7cb9      	ldrb	r1, [r7, #18]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 80048be:	9102      	str	r1, [sp, #8]
 80048c0:	9201      	str	r2, [sp, #4]
 80048c2:	9300      	str	r3, [sp, #0]
 80048c4:	4623      	mov	r3, r4
 80048c6:	4602      	mov	r2, r0
 80048c8:	490c      	ldr	r1, [pc, #48]	; (80048fc <sec2str+0x130>)
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f00e f93a 	bl	8012b44 <siprintf>
 80048d0:	6378      	str	r0, [r7, #52]	; 0x34
			}
		}
	}

	return ret;
 80048d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	373c      	adds	r7, #60	; 0x3c
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd90      	pop	{r4, r7, pc}
 80048dc:	20001ca5 	.word	0x20001ca5
 80048e0:	c22e4507 	.word	0xc22e4507
 80048e4:	00015180 	.word	0x00015180
 80048e8:	91a2b3c5 	.word	0x91a2b3c5
 80048ec:	88888889 	.word	0x88888889
 80048f0:	080171a8 	.word	0x080171a8
 80048f4:	20000934 	.word	0x20000934
 80048f8:	20001890 	.word	0x20001890
 80048fc:	080171c0 	.word	0x080171c0

08004900 <Report>:
//--------------------------------------------------------------------------------------------
void Report(const uint8_t addTime, const char *fmt, ...)
{
 8004900:	b40e      	push	{r1, r2, r3}
 8004902:	b590      	push	{r4, r7, lr}
 8004904:	b088      	sub	sp, #32
 8004906:	af00      	add	r7, sp, #0
 8004908:	4603      	mov	r3, r0
 800490a:	71fb      	strb	r3, [r7, #7]
size_t len = MAX_UART_BUF;
 800490c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004910:	617b      	str	r3, [r7, #20]
char *buf = &cmdBuf[0];
 8004912:	4b32      	ldr	r3, [pc, #200]	; (80049dc <Report+0xdc>)
 8004914:	613b      	str	r3, [r7, #16]
uint32_t cnt = 16;
 8004916:	2310      	movs	r3, #16
 8004918:	61fb      	str	r3, [r7, #28]
uint32_t stim = HAL_GetTick();
 800491a:	f002 fab1 	bl	8006e80 <HAL_GetTick>
 800491e:	60f8      	str	r0, [r7, #12]

	while (!uartRdy && cnt) {
 8004920:	e008      	b.n	8004934 <Report+0x34>
		if (HAL_GetTick() - stim) cnt--;
 8004922:	f002 faad 	bl	8006e80 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	4293      	cmp	r3, r2
 800492c:	d002      	beq.n	8004934 <Report+0x34>
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	3b01      	subs	r3, #1
 8004932:	61fb      	str	r3, [r7, #28]
	while (!uartRdy && cnt) {
 8004934:	4b2a      	ldr	r3, [pc, #168]	; (80049e0 <Report+0xe0>)
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d102      	bne.n	8004942 <Report+0x42>
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1ef      	bne.n	8004922 <Report+0x22>
	}

	//if (buf) {
		*buf = '\0';
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	2200      	movs	r2, #0
 8004946:	701a      	strb	r2, [r3, #0]
		int dl = 0;
 8004948:	2300      	movs	r3, #0
 800494a:	61bb      	str	r3, [r7, #24]
		if (addTime) {
 800494c:	79fb      	ldrb	r3, [r7, #7]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d010      	beq.n	8004974 <Report+0x74>
			dl = sec2str(buf);
 8004952:	6938      	ldr	r0, [r7, #16]
 8004954:	f7ff ff3a 	bl	80047cc <sec2str>
 8004958:	61b8      	str	r0, [r7, #24]
			strcat(buf, " | ");
 800495a:	6938      	ldr	r0, [r7, #16]
 800495c:	f7fb fc38 	bl	80001d0 <strlen>
 8004960:	4603      	mov	r3, r0
 8004962:	461a      	mov	r2, r3
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	4413      	add	r3, r2
 8004968:	4a1e      	ldr	r2, [pc, #120]	; (80049e4 <Report+0xe4>)
 800496a:	6810      	ldr	r0, [r2, #0]
 800496c:	6018      	str	r0, [r3, #0]
			dl += 3;
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	3303      	adds	r3, #3
 8004972:	61bb      	str	r3, [r7, #24]
		}

		va_list args;
		va_start(args, fmt);
 8004974:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004978:	60bb      	str	r3, [r7, #8]
		vsnprintf(buf + dl, len - dl, fmt, args);
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	18d0      	adds	r0, r2, r3
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	1ad1      	subs	r1, r2, r3
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800498a:	f00f f83b 	bl	8013a04 <vsniprintf>

		uartRdy = false;
 800498e:	4b14      	ldr	r3, [pc, #80]	; (80049e0 <Report+0xe0>)
 8004990:	2200      	movs	r2, #0
 8004992:	701a      	strb	r2, [r3, #0]
		if (HAL_UART_Transmit_DMA(cmdPort, (uint8_t *)buf, strlen(buf)) != HAL_OK) devError |= devUART;
 8004994:	4b14      	ldr	r3, [pc, #80]	; (80049e8 <Report+0xe8>)
 8004996:	681c      	ldr	r4, [r3, #0]
 8004998:	6938      	ldr	r0, [r7, #16]
 800499a:	f7fb fc19 	bl	80001d0 <strlen>
 800499e:	4603      	mov	r3, r0
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	461a      	mov	r2, r3
 80049a4:	6939      	ldr	r1, [r7, #16]
 80049a6:	4620      	mov	r0, r4
 80049a8:	f008 fcb2 	bl	800d310 <HAL_UART_Transmit_DMA>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d006      	beq.n	80049c0 <Report+0xc0>
 80049b2:	4b0e      	ldr	r3, [pc, #56]	; (80049ec <Report+0xec>)
 80049b4:	881b      	ldrh	r3, [r3, #0]
 80049b6:	f043 0302 	orr.w	r3, r3, #2
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	4b0b      	ldr	r3, [pc, #44]	; (80049ec <Report+0xec>)
 80049be:	801a      	strh	r2, [r3, #0]
		while (!uartRdy) {} //HAL_Delay(1)
 80049c0:	bf00      	nop
 80049c2:	4b07      	ldr	r3, [pc, #28]	; (80049e0 <Report+0xe0>)
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d0fb      	beq.n	80049c2 <Report+0xc2>
	//	free(buf);
	//} else {
	//	devError |= devMEM;
	//}

}
 80049ca:	bf00      	nop
 80049cc:	bf00      	nop
 80049ce:	3720      	adds	r7, #32
 80049d0:	46bd      	mov	sp, r7
 80049d2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80049d6:	b003      	add	sp, #12
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	20001090 	.word	0x20001090
 80049e0:	20000014 	.word	0x20000014
 80049e4:	080171dc 	.word	0x080171dc
 80049e8:	20000010 	.word	0x20000010
 80049ec:	20001890 	.word	0x20001890

080049f0 <HAL_TIM_PeriodElapsedCallback>:



//------------------------------------------------------------------------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049f0:	b5b0      	push	{r4, r5, r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) {
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a15      	ldr	r2, [pc, #84]	; (8004a54 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d124      	bne.n	8004a4c <HAL_TIM_PeriodElapsedCallback+0x5c>
		msCounter++;//inc_msCounter();
 8004a02:	4b15      	ldr	r3, [pc, #84]	; (8004a58 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8004a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a08:	1c54      	adds	r4, r2, #1
 8004a0a:	f143 0500 	adc.w	r5, r3, #0
 8004a0e:	4b12      	ldr	r3, [pc, #72]	; (8004a58 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8004a10:	e9c3 4500 	strd	r4, r5, [r3]
		if (!(msCounter % _1s)) {// 1 seconda
 8004a14:	4b10      	ldr	r3, [pc, #64]	; (8004a58 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8004a16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a1a:	f04f 0264 	mov.w	r2, #100	; 0x64
 8004a1e:	f04f 0300 	mov.w	r3, #0
 8004a22:	f7fc f981 	bl	8000d28 <__aeabi_uldivmod>
 8004a26:	4313      	orrs	r3, r2
 8004a28:	d110      	bne.n	8004a4c <HAL_TIM_PeriodElapsedCallback+0x5c>
			secCounter++;
 8004a2a:	4b0c      	ldr	r3, [pc, #48]	; (8004a5c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	4a0a      	ldr	r2, [pc, #40]	; (8004a5c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8004a32:	6013      	str	r3, [r2, #0]
		  	HAL_GPIO_TogglePin(TIK_LED_GPIO_Port, TIK_LED_Pin);
 8004a34:	2101      	movs	r1, #1
 8004a36:	480a      	ldr	r0, [pc, #40]	; (8004a60 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8004a38:	f002 fff4 	bl	8007a24 <HAL_GPIO_TogglePin>
#ifdef SET_DISPLAY
		  	if (startSec) putEvt(evt_Sec);
 8004a3c:	4b09      	ldr	r3, [pc, #36]	; (8004a64 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d002      	beq.n	8004a4c <HAL_TIM_PeriodElapsedCallback+0x5c>
 8004a46:	2008      	movs	r0, #8
 8004a48:	f7ff fbf0 	bl	800422c <putEvt>
#endif
	  	}
	}
}
 8004a4c:	bf00      	nop
 8004a4e:	3708      	adds	r7, #8
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bdb0      	pop	{r4, r5, r7, pc}
 8004a54:	40000800 	.word	0x40000800
 8004a58:	20001898 	.word	0x20001898
 8004a5c:	20001894 	.word	0x20001894
 8004a60:	48000800 	.word	0x48000800
 8004a64:	20003d02 	.word	0x20003d02

08004a68 <HAL_UART_TxCpltCallback>:
//--------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a05      	ldr	r2, [pc, #20]	; (8004a8c <HAL_UART_TxCpltCallback+0x24>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d102      	bne.n	8004a80 <HAL_UART_TxCpltCallback+0x18>
		uartRdy = 1;
 8004a7a:	4b05      	ldr	r3, [pc, #20]	; (8004a90 <HAL_UART_TxCpltCallback+0x28>)
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	701a      	strb	r2, [r3, #0]
	}
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr
 8004a8c:	40004400 	.word	0x40004400
 8004a90:	20000014 	.word	0x20000014

08004a94 <HAL_UART_RxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a94:	b590      	push	{r4, r7, lr}
 8004a96:	b08d      	sub	sp, #52	; 0x34
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4aaa      	ldr	r2, [pc, #680]	; (8004d4c <HAL_UART_RxCpltCallback+0x2b8>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	f040 824b 	bne.w	8004f3e <HAL_UART_RxCpltCallback+0x4aa>
		rxBuf[rxInd++] = (char)rxByte;
 8004aa8:	4ba9      	ldr	r3, [pc, #676]	; (8004d50 <HAL_UART_RxCpltCallback+0x2bc>)
 8004aaa:	881b      	ldrh	r3, [r3, #0]
 8004aac:	1c5a      	adds	r2, r3, #1
 8004aae:	b291      	uxth	r1, r2
 8004ab0:	4aa7      	ldr	r2, [pc, #668]	; (8004d50 <HAL_UART_RxCpltCallback+0x2bc>)
 8004ab2:	8011      	strh	r1, [r2, #0]
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	4ba7      	ldr	r3, [pc, #668]	; (8004d54 <HAL_UART_RxCpltCallback+0x2c0>)
 8004ab8:	7819      	ldrb	r1, [r3, #0]
 8004aba:	4ba7      	ldr	r3, [pc, #668]	; (8004d58 <HAL_UART_RxCpltCallback+0x2c4>)
 8004abc:	5499      	strb	r1, [r3, r2]
		if (rxByte == 0x0a) {//end of line
 8004abe:	4ba5      	ldr	r3, [pc, #660]	; (8004d54 <HAL_UART_RxCpltCallback+0x2c0>)
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	2b0a      	cmp	r3, #10
 8004ac4:	f040 822c 	bne.w	8004f20 <HAL_UART_RxCpltCallback+0x48c>
			rxBuf[--rxInd] = '\0';
 8004ac8:	4ba1      	ldr	r3, [pc, #644]	; (8004d50 <HAL_UART_RxCpltCallback+0x2bc>)
 8004aca:	881b      	ldrh	r3, [r3, #0]
 8004acc:	3b01      	subs	r3, #1
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	4b9f      	ldr	r3, [pc, #636]	; (8004d50 <HAL_UART_RxCpltCallback+0x2bc>)
 8004ad2:	801a      	strh	r2, [r3, #0]
 8004ad4:	4b9e      	ldr	r3, [pc, #632]	; (8004d50 <HAL_UART_RxCpltCallback+0x2bc>)
 8004ad6:	881b      	ldrh	r3, [r3, #0]
 8004ad8:	461a      	mov	r2, r3
 8004ada:	4b9f      	ldr	r3, [pc, #636]	; (8004d58 <HAL_UART_RxCpltCallback+0x2c4>)
 8004adc:	2100      	movs	r1, #0
 8004ade:	5499      	strb	r1, [r3, r2]

			int i, ev = -1;
 8004ae0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ae4:	62bb      	str	r3, [r7, #40]	; 0x28
			if (strlen(rxBuf) > 2) {
 8004ae6:	489c      	ldr	r0, [pc, #624]	; (8004d58 <HAL_UART_RxCpltCallback+0x2c4>)
 8004ae8:	f7fb fb72 	bl	80001d0 <strlen>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	f240 8210 	bls.w	8004f14 <HAL_UART_RxCpltCallback+0x480>
				for (i = 0; i < MAX_CMDS; i++) {
 8004af4:	2300      	movs	r3, #0
 8004af6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004af8:	e1fd      	b.n	8004ef6 <HAL_UART_RxCpltCallback+0x462>
					if (!strncmp(rxBuf, s_cmds[i], strlen(s_cmds[i]))) {
 8004afa:	4a98      	ldr	r2, [pc, #608]	; (8004d5c <HAL_UART_RxCpltCallback+0x2c8>)
 8004afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004afe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8004b02:	4a96      	ldr	r2, [pc, #600]	; (8004d5c <HAL_UART_RxCpltCallback+0x2c8>)
 8004b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7fb fb60 	bl	80001d0 <strlen>
 8004b10:	4603      	mov	r3, r0
 8004b12:	461a      	mov	r2, r3
 8004b14:	4621      	mov	r1, r4
 8004b16:	4890      	ldr	r0, [pc, #576]	; (8004d58 <HAL_UART_RxCpltCallback+0x2c4>)
 8004b18:	f00e f850 	bl	8012bbc <strncmp>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f040 81e6 	bne.w	8004ef0 <HAL_UART_RxCpltCallback+0x45c>
						char *uk = rxBuf + strlen(s_cmds[i]);
 8004b24:	4a8d      	ldr	r2, [pc, #564]	; (8004d5c <HAL_UART_RxCpltCallback+0x2c8>)
 8004b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7fb fb4f 	bl	80001d0 <strlen>
 8004b32:	4603      	mov	r3, r0
 8004b34:	4a88      	ldr	r2, [pc, #544]	; (8004d58 <HAL_UART_RxCpltCallback+0x2c4>)
 8004b36:	4413      	add	r3, r2
 8004b38:	623b      	str	r3, [r7, #32]
						ev = -1;
 8004b3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b3e:	62bb      	str	r3, [r7, #40]	; 0x28
						switch (i) {
 8004b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b42:	2b14      	cmp	r3, #20
 8004b44:	f200 81dc 	bhi.w	8004f00 <HAL_UART_RxCpltCallback+0x46c>
 8004b48:	a201      	add	r2, pc, #4	; (adr r2, 8004b50 <HAL_UART_RxCpltCallback+0xbc>)
 8004b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b4e:	bf00      	nop
 8004b50:	08004cdf 	.word	0x08004cdf
 8004b54:	08004ce5 	.word	0x08004ce5
 8004b58:	08004ceb 	.word	0x08004ceb
 8004b5c:	08004f01 	.word	0x08004f01
 8004b60:	08004d3d 	.word	0x08004d3d
 8004b64:	08004d3d 	.word	0x08004d3d
 8004b68:	08004e93 	.word	0x08004e93
 8004b6c:	08004df7 	.word	0x08004df7
 8004b70:	08004f01 	.word	0x08004f01
 8004b74:	08004cdf 	.word	0x08004cdf
 8004b78:	08004cdf 	.word	0x08004cdf
 8004b7c:	08004c9d 	.word	0x08004c9d
 8004b80:	08004c59 	.word	0x08004c59
 8004b84:	08004bd1 	.word	0x08004bd1
 8004b88:	08004cdf 	.word	0x08004cdf
 8004b8c:	08004c3b 	.word	0x08004c3b
 8004b90:	08004c9d 	.word	0x08004c9d
 8004b94:	08004ba5 	.word	0x08004ba5
 8004b98:	08004cdf 	.word	0x08004cdf
 8004b9c:	08004cdf 	.word	0x08004cdf
 8004ba0:	08004cdf 	.word	0x08004cdf
							case cmdBand://"band:2"
								if (strlen(uk) >= 1) {
 8004ba4:	6a3b      	ldr	r3, [r7, #32]
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 818f 	beq.w	8004ecc <HAL_UART_RxCpltCallback+0x438>
									newBand = atol(uk);
 8004bae:	6a38      	ldr	r0, [r7, #32]
 8004bb0:	f00d fa6e 	bl	8012090 <atol>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	b2da      	uxtb	r2, r3
 8004bb8:	4b69      	ldr	r3, [pc, #420]	; (8004d60 <HAL_UART_RxCpltCallback+0x2cc>)
 8004bba:	701a      	strb	r2, [r3, #0]
									if (newBand != Band) {
 8004bbc:	4b68      	ldr	r3, [pc, #416]	; (8004d60 <HAL_UART_RxCpltCallback+0x2cc>)
 8004bbe:	781a      	ldrb	r2, [r3, #0]
 8004bc0:	4b68      	ldr	r3, [pc, #416]	; (8004d64 <HAL_UART_RxCpltCallback+0x2d0>)
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	f000 8181 	beq.w	8004ecc <HAL_UART_RxCpltCallback+0x438>
										ev = i;
 8004bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bcc:	62bb      	str	r3, [r7, #40]	; 0x28
									}
								}
							break;
 8004bce:	e17d      	b.n	8004ecc <HAL_UART_RxCpltCallback+0x438>
							case cmdVol:
								if (strlen(uk) >= 1) {
 8004bd0:	6a3b      	ldr	r3, [r7, #32]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 817b 	beq.w	8004ed0 <HAL_UART_RxCpltCallback+0x43c>
									uint8_t nv = Volume;
 8004bda:	4b63      	ldr	r3, [pc, #396]	; (8004d68 <HAL_UART_RxCpltCallback+0x2d4>)
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									if (strstr(uk, "up")) {
 8004be2:	4962      	ldr	r1, [pc, #392]	; (8004d6c <HAL_UART_RxCpltCallback+0x2d8>)
 8004be4:	6a38      	ldr	r0, [r7, #32]
 8004be6:	f00e f810 	bl	8012c0a <strstr>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d005      	beq.n	8004bfc <HAL_UART_RxCpltCallback+0x168>
										nv++;
 8004bf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004bfa:	e012      	b.n	8004c22 <HAL_UART_RxCpltCallback+0x18e>
									} else if (strstr(uk, "down")) {
 8004bfc:	495c      	ldr	r1, [pc, #368]	; (8004d70 <HAL_UART_RxCpltCallback+0x2dc>)
 8004bfe:	6a38      	ldr	r0, [r7, #32]
 8004c00:	f00e f803 	bl	8012c0a <strstr>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d005      	beq.n	8004c16 <HAL_UART_RxCpltCallback+0x182>
										nv--;
 8004c0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004c14:	e005      	b.n	8004c22 <HAL_UART_RxCpltCallback+0x18e>
									} else {
										nv = (uint8_t)atol(uk);
 8004c16:	6a38      	ldr	r0, [r7, #32]
 8004c18:	f00d fa3a 	bl	8012090 <atol>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									}
									if ((nv >= 0) && (nv <= 15)) {
 8004c22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c26:	2b0f      	cmp	r3, #15
 8004c28:	f200 8152 	bhi.w	8004ed0 <HAL_UART_RxCpltCallback+0x43c>
										newVolume = nv;
 8004c2c:	4a51      	ldr	r2, [pc, #324]	; (8004d74 <HAL_UART_RxCpltCallback+0x2e0>)
 8004c2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c32:	7013      	strb	r3, [r2, #0]
										ev = i;
 8004c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c36:	62bb      	str	r3, [r7, #40]	; 0x28
									}
								}
							break;
 8004c38:	e14a      	b.n	8004ed0 <HAL_UART_RxCpltCallback+0x43c>
							case cmdBass:
								if (strlen(uk) >= 1) {
 8004c3a:	6a3b      	ldr	r3, [r7, #32]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f000 8148 	beq.w	8004ed4 <HAL_UART_RxCpltCallback+0x440>
									newBassBoost = (uint8_t)atol(uk);
 8004c44:	6a38      	ldr	r0, [r7, #32]
 8004c46:	f00d fa23 	bl	8012090 <atol>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	b2da      	uxtb	r2, r3
 8004c4e:	4b4a      	ldr	r3, [pc, #296]	; (8004d78 <HAL_UART_RxCpltCallback+0x2e4>)
 8004c50:	701a      	strb	r2, [r3, #0]
									ev = i;
 8004c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c54:	62bb      	str	r3, [r7, #40]	; 0x28
								}
							break;
 8004c56:	e13d      	b.n	8004ed4 <HAL_UART_RxCpltCallback+0x440>
							case cmdFreq://"freq:95.1"
								if (strlen(uk) >= 2) {
 8004c58:	6a38      	ldr	r0, [r7, #32]
 8004c5a:	f7fb fab9 	bl	80001d0 <strlen>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	f240 8139 	bls.w	8004ed8 <HAL_UART_RxCpltCallback+0x444>
									newFreq = (float)atof(uk);
 8004c66:	6a38      	ldr	r0, [r7, #32]
 8004c68:	f00d fa0b 	bl	8012082 <atof>
 8004c6c:	ec53 2b10 	vmov	r2, r3, d0
 8004c70:	4610      	mov	r0, r2
 8004c72:	4619      	mov	r1, r3
 8004c74:	f7fb ffb8 	bl	8000be8 <__aeabi_d2f>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	4a40      	ldr	r2, [pc, #256]	; (8004d7c <HAL_UART_RxCpltCallback+0x2e8>)
 8004c7c:	6013      	str	r3, [r2, #0]
									if (newFreq != Freq) {
 8004c7e:	4b3f      	ldr	r3, [pc, #252]	; (8004d7c <HAL_UART_RxCpltCallback+0x2e8>)
 8004c80:	ed93 7a00 	vldr	s14, [r3]
 8004c84:	4b3e      	ldr	r3, [pc, #248]	; (8004d80 <HAL_UART_RxCpltCallback+0x2ec>)
 8004c86:	edd3 7a00 	vldr	s15, [r3]
 8004c8a:	eeb4 7a67 	vcmp.f32	s14, s15
 8004c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c92:	f000 8121 	beq.w	8004ed8 <HAL_UART_RxCpltCallback+0x444>
										ev = i;
 8004c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c98:	62bb      	str	r3, [r7, #40]	; 0x28
									}
								}
							break;
 8004c9a:	e11d      	b.n	8004ed8 <HAL_UART_RxCpltCallback+0x444>
							case cmdScan://"scan"
							case cmdList://"list"
								seek_up = 1;
 8004c9c:	4b39      	ldr	r3, [pc, #228]	; (8004d84 <HAL_UART_RxCpltCallback+0x2f0>)
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	701a      	strb	r2, [r3, #0]
								ev = i;
 8004ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca4:	62bb      	str	r3, [r7, #40]	; 0x28
								char *uki = strchr(uk, ':');
 8004ca6:	213a      	movs	r1, #58	; 0x3a
 8004ca8:	6a38      	ldr	r0, [r7, #32]
 8004caa:	f00d ff7a 	bl	8012ba2 <strchr>
 8004cae:	61f8      	str	r0, [r7, #28]
								if (uki) {
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f000 8112 	beq.w	8004edc <HAL_UART_RxCpltCallback+0x448>
									if ((*(char *)(uki + 1) == '0') || strstr(uki + 1, "down")) seek_up = 0;
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	3301      	adds	r3, #1
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	2b30      	cmp	r3, #48	; 0x30
 8004cc0:	d009      	beq.n	8004cd6 <HAL_UART_RxCpltCallback+0x242>
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	492a      	ldr	r1, [pc, #168]	; (8004d70 <HAL_UART_RxCpltCallback+0x2dc>)
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f00d ff9e 	bl	8012c0a <strstr>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f000 8103 	beq.w	8004edc <HAL_UART_RxCpltCallback+0x448>
 8004cd6:	4b2b      	ldr	r3, [pc, #172]	; (8004d84 <HAL_UART_RxCpltCallback+0x2f0>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	701a      	strb	r2, [r3, #0]
								}
							break;
 8004cdc:	e0fe      	b.n	8004edc <HAL_UART_RxCpltCallback+0x448>
							case cmdCfg://"cfg"
#ifdef SET_FAT_FS
							case cmdDir://"dir" | ls -la
							case cmdCat://"cat" | cat cfgFile (radio.cfg)
#endif
								ev = i;
 8004cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce0:	62bb      	str	r3, [r7, #40]	; 0x28
							break;
 8004ce2:	e104      	b.n	8004eee <HAL_UART_RxCpltCallback+0x45a>
							case cmdRestart://"restart" -> restart = 1;
								ev = i;
 8004ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce6:	62bb      	str	r3, [r7, #40]	; 0x28
							break;
 8004ce8:	e101      	b.n	8004eee <HAL_UART_RxCpltCallback+0x45a>
							case cmdEpoch://"epoch:1657191323"
								if (strlen(uk) >= 10) {
 8004cea:	6a38      	ldr	r0, [r7, #32]
 8004cec:	f7fb fa70 	bl	80001d0 <strlen>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b09      	cmp	r3, #9
 8004cf4:	f240 80f4 	bls.w	8004ee0 <HAL_UART_RxCpltCallback+0x44c>
									char *uki = strchr(uk, ':');
 8004cf8:	213a      	movs	r1, #58	; 0x3a
 8004cfa:	6a38      	ldr	r0, [r7, #32]
 8004cfc:	f00d ff51 	bl	8012ba2 <strchr>
 8004d00:	60b8      	str	r0, [r7, #8]
									if (uki) {
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00c      	beq.n	8004d22 <HAL_UART_RxCpltCallback+0x28e>
										tZone = (uint8_t)atol(uki + 1);
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f00d f9bf 	bl	8012090 <atol>
 8004d12:	4603      	mov	r3, r0
 8004d14:	b2da      	uxtb	r2, r3
 8004d16:	4b1c      	ldr	r3, [pc, #112]	; (8004d88 <HAL_UART_RxCpltCallback+0x2f4>)
 8004d18:	701a      	strb	r2, [r3, #0]
										*uki = '\0';
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	701a      	strb	r2, [r3, #0]
 8004d20:	e002      	b.n	8004d28 <HAL_UART_RxCpltCallback+0x294>
									} else {
										tZone = 0;
 8004d22:	4b19      	ldr	r3, [pc, #100]	; (8004d88 <HAL_UART_RxCpltCallback+0x2f4>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	701a      	strb	r2, [r3, #0]
									}
									epoch = (uint32_t)atol(uk);
 8004d28:	6a38      	ldr	r0, [r7, #32]
 8004d2a:	f00d f9b1 	bl	8012090 <atol>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	461a      	mov	r2, r3
 8004d32:	4b16      	ldr	r3, [pc, #88]	; (8004d8c <HAL_UART_RxCpltCallback+0x2f8>)
 8004d34:	601a      	str	r2, [r3, #0]
									ev = i;
 8004d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d38:	62bb      	str	r3, [r7, #40]	; 0x28
								}
							break;
 8004d3a:	e0d1      	b.n	8004ee0 <HAL_UART_RxCpltCallback+0x44c>
							case cmdsRead:// read:0
							case cmdsErase:// erase:0
								if (i == cmdsRead) cmd_sector = cmdsRead;
 8004d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3e:	2b04      	cmp	r3, #4
 8004d40:	d128      	bne.n	8004d94 <HAL_UART_RxCpltCallback+0x300>
 8004d42:	4b13      	ldr	r3, [pc, #76]	; (8004d90 <HAL_UART_RxCpltCallback+0x2fc>)
 8004d44:	2204      	movs	r2, #4
 8004d46:	601a      	str	r2, [r3, #0]
 8004d48:	e027      	b.n	8004d9a <HAL_UART_RxCpltCallback+0x306>
 8004d4a:	bf00      	nop
 8004d4c:	40004400 	.word	0x40004400
 8004d50:	200018a2 	.word	0x200018a2
 8004d54:	200018a0 	.word	0x200018a0
 8004d58:	200018a4 	.word	0x200018a4
 8004d5c:	2000001c 	.word	0x2000001c
 8004d60:	200001ed 	.word	0x200001ed
 8004d64:	200001ec 	.word	0x200001ec
 8004d68:	200001ef 	.word	0x200001ef
 8004d6c:	080171e0 	.word	0x080171e0
 8004d70:	080171e4 	.word	0x080171e4
 8004d74:	200001f0 	.word	0x200001f0
 8004d78:	20003d17 	.word	0x20003d17
 8004d7c:	200001e8 	.word	0x200001e8
 8004d80:	200001e4 	.word	0x200001e4
 8004d84:	200001ee 	.word	0x200001ee
 8004d88:	20001ca6 	.word	0x20001ca6
 8004d8c:	20000018 	.word	0x20000018
 8004d90:	200001d0 	.word	0x200001d0
											  else cmd_sector = cmdsErase;
 8004d94:	4b6c      	ldr	r3, [pc, #432]	; (8004f48 <HAL_UART_RxCpltCallback+0x4b4>)
 8004d96:	2205      	movs	r2, #5
 8004d98:	601a      	str	r2, [r3, #0]
								if (*uk == ':') {
 8004d9a:	6a3b      	ldr	r3, [r7, #32]
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	2b3a      	cmp	r3, #58	; 0x3a
 8004da0:	f040 80a0 	bne.w	8004ee4 <HAL_UART_RxCpltCallback+0x450>
									int sek = atoi(++uk);
 8004da4:	6a3b      	ldr	r3, [r7, #32]
 8004da6:	3301      	adds	r3, #1
 8004da8:	623b      	str	r3, [r7, #32]
 8004daa:	6a38      	ldr	r0, [r7, #32]
 8004dac:	f00d f96c 	bl	8012088 <atoi>
 8004db0:	60f8      	str	r0, [r7, #12]
									if ( ((sek >= 0) && (sek < W25qxx_getSectorCount())) || (sek == -1) ) {
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	db05      	blt.n	8004dc4 <HAL_UART_RxCpltCallback+0x330>
 8004db8:	f001 fc3a 	bl	8006630 <W25qxx_getSectorCount>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d804      	bhi.n	8004dce <HAL_UART_RxCpltCallback+0x33a>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dca:	f040 808b 	bne.w	8004ee4 <HAL_UART_RxCpltCallback+0x450>
										adr_sector = sek;
 8004dce:	4a5f      	ldr	r2, [pc, #380]	; (8004f4c <HAL_UART_RxCpltCallback+0x4b8>)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6013      	str	r3, [r2, #0]
										offset_sector = 0;
 8004dd4:	4b5e      	ldr	r3, [pc, #376]	; (8004f50 <HAL_UART_RxCpltCallback+0x4bc>)
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	601a      	str	r2, [r3, #0]
										if (sek == -1) {
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004de0:	d106      	bne.n	8004df0 <HAL_UART_RxCpltCallback+0x35c>
											if (cmd_sector == cmdsErase) ev = i;
 8004de2:	4b59      	ldr	r3, [pc, #356]	; (8004f48 <HAL_UART_RxCpltCallback+0x4b4>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2b05      	cmp	r3, #5
 8004de8:	d17c      	bne.n	8004ee4 <HAL_UART_RxCpltCallback+0x450>
 8004dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dec:	62bb      	str	r3, [r7, #40]	; 0x28
										} else {
											ev = i;
										}
									}
								}
							break;
 8004dee:	e079      	b.n	8004ee4 <HAL_UART_RxCpltCallback+0x450>
											ev = i;
 8004df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df2:	62bb      	str	r3, [r7, #40]	; 0x28
							break;
 8004df4:	e076      	b.n	8004ee4 <HAL_UART_RxCpltCallback+0x450>
							case cmdsWrite:// write:0:a5 | write:0:a5:256
								if (*uk == ':') {
 8004df6:	6a3b      	ldr	r3, [r7, #32]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	2b3a      	cmp	r3, #58	; 0x3a
 8004dfc:	d174      	bne.n	8004ee8 <HAL_UART_RxCpltCallback+0x454>
									uk++;
 8004dfe:	6a3b      	ldr	r3, [r7, #32]
 8004e00:	3301      	adds	r3, #1
 8004e02:	623b      	str	r3, [r7, #32]
									int sek = atoi(uk);
 8004e04:	6a38      	ldr	r0, [r7, #32]
 8004e06:	f00d f93f 	bl	8012088 <atoi>
 8004e0a:	61b8      	str	r0, [r7, #24]
									if ((sek >= 0) && (sek < W25qxx_getSectorCount())) {
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	db6a      	blt.n	8004ee8 <HAL_UART_RxCpltCallback+0x454>
 8004e12:	f001 fc0d 	bl	8006630 <W25qxx_getSectorCount>
 8004e16:	4602      	mov	r2, r0
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d964      	bls.n	8004ee8 <HAL_UART_RxCpltCallback+0x454>
										char *ukn = strchr(uk, ':');
 8004e1e:	213a      	movs	r1, #58	; 0x3a
 8004e20:	6a38      	ldr	r0, [r7, #32]
 8004e22:	f00d febe 	bl	8012ba2 <strchr>
 8004e26:	6178      	str	r0, [r7, #20]
										if (ukn) {
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d05c      	beq.n	8004ee8 <HAL_UART_RxCpltCallback+0x454>
											len_write = -1;
 8004e2e:	4b49      	ldr	r3, [pc, #292]	; (8004f54 <HAL_UART_RxCpltCallback+0x4c0>)
 8004e30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e34:	601a      	str	r2, [r3, #0]
											ukn++;
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	617b      	str	r3, [r7, #20]
											byte_write = hexToBin(ukn);
 8004e3c:	6978      	ldr	r0, [r7, #20]
 8004e3e:	f7ff f97b 	bl	8004138 <hexToBin>
 8004e42:	4603      	mov	r3, r0
 8004e44:	461a      	mov	r2, r3
 8004e46:	4b44      	ldr	r3, [pc, #272]	; (8004f58 <HAL_UART_RxCpltCallback+0x4c4>)
 8004e48:	701a      	strb	r2, [r3, #0]
											uk = strchr(ukn, ':');
 8004e4a:	213a      	movs	r1, #58	; 0x3a
 8004e4c:	6978      	ldr	r0, [r7, #20]
 8004e4e:	f00d fea8 	bl	8012ba2 <strchr>
 8004e52:	6238      	str	r0, [r7, #32]
											if (uk) {
 8004e54:	6a3b      	ldr	r3, [r7, #32]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d012      	beq.n	8004e80 <HAL_UART_RxCpltCallback+0x3ec>
												int l = atoi(++uk);
 8004e5a:	6a3b      	ldr	r3, [r7, #32]
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	623b      	str	r3, [r7, #32]
 8004e60:	6a38      	ldr	r0, [r7, #32]
 8004e62:	f00d f911 	bl	8012088 <atoi>
 8004e66:	6138      	str	r0, [r7, #16]
												if ((l > 0) && (l < W25qxx_getSectorSize())) len_write = l;
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	dd08      	ble.n	8004e80 <HAL_UART_RxCpltCallback+0x3ec>
 8004e6e:	f001 fbeb 	bl	8006648 <W25qxx_getSectorSize>
 8004e72:	4602      	mov	r2, r0
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d902      	bls.n	8004e80 <HAL_UART_RxCpltCallback+0x3ec>
 8004e7a:	4a36      	ldr	r2, [pc, #216]	; (8004f54 <HAL_UART_RxCpltCallback+0x4c0>)
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	6013      	str	r3, [r2, #0]
											}
											adr_sector = sek;
 8004e80:	4a32      	ldr	r2, [pc, #200]	; (8004f4c <HAL_UART_RxCpltCallback+0x4b8>)
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	6013      	str	r3, [r2, #0]
											offset_sector = 0;
 8004e86:	4b32      	ldr	r3, [pc, #200]	; (8004f50 <HAL_UART_RxCpltCallback+0x4bc>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	601a      	str	r2, [r3, #0]
											ev = i;//flag_sector = true;
 8004e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e8e:	62bb      	str	r3, [r7, #40]	; 0x28
										}
									}
								}
							break;
 8004e90:	e02a      	b.n	8004ee8 <HAL_UART_RxCpltCallback+0x454>
							case cmdsNext:// next
								if ((last_cmd_sector == cmdsRead) || (last_cmd_sector == cmdsNext)) {
 8004e92:	4b32      	ldr	r3, [pc, #200]	; (8004f5c <HAL_UART_RxCpltCallback+0x4c8>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2b04      	cmp	r3, #4
 8004e98:	d003      	beq.n	8004ea2 <HAL_UART_RxCpltCallback+0x40e>
 8004e9a:	4b30      	ldr	r3, [pc, #192]	; (8004f5c <HAL_UART_RxCpltCallback+0x4c8>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2b06      	cmp	r3, #6
 8004ea0:	d124      	bne.n	8004eec <HAL_UART_RxCpltCallback+0x458>
									if ((offset_sector + list_sector) < W25qxx_getSectorSize()) {
 8004ea2:	4b2b      	ldr	r3, [pc, #172]	; (8004f50 <HAL_UART_RxCpltCallback+0x4bc>)
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	4b2e      	ldr	r3, [pc, #184]	; (8004f60 <HAL_UART_RxCpltCallback+0x4cc>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4413      	add	r3, r2
 8004eac:	461c      	mov	r4, r3
 8004eae:	f001 fbcb 	bl	8006648 <W25qxx_getSectorSize>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	429c      	cmp	r4, r3
 8004eb6:	d219      	bcs.n	8004eec <HAL_UART_RxCpltCallback+0x458>
										offset_sector += list_sector;
 8004eb8:	4b25      	ldr	r3, [pc, #148]	; (8004f50 <HAL_UART_RxCpltCallback+0x4bc>)
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	4b28      	ldr	r3, [pc, #160]	; (8004f60 <HAL_UART_RxCpltCallback+0x4cc>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	4a23      	ldr	r2, [pc, #140]	; (8004f50 <HAL_UART_RxCpltCallback+0x4bc>)
 8004ec4:	6013      	str	r3, [r2, #0]
										ev = i;//flag_sector = true;
 8004ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec8:	62bb      	str	r3, [r7, #40]	; 0x28
									}
								}
							break;
 8004eca:	e00f      	b.n	8004eec <HAL_UART_RxCpltCallback+0x458>
							break;
 8004ecc:	bf00      	nop
 8004ece:	e017      	b.n	8004f00 <HAL_UART_RxCpltCallback+0x46c>
							break;
 8004ed0:	bf00      	nop
 8004ed2:	e015      	b.n	8004f00 <HAL_UART_RxCpltCallback+0x46c>
							break;
 8004ed4:	bf00      	nop
 8004ed6:	e013      	b.n	8004f00 <HAL_UART_RxCpltCallback+0x46c>
							break;
 8004ed8:	bf00      	nop
 8004eda:	e011      	b.n	8004f00 <HAL_UART_RxCpltCallback+0x46c>
							break;
 8004edc:	bf00      	nop
 8004ede:	e00f      	b.n	8004f00 <HAL_UART_RxCpltCallback+0x46c>
							break;
 8004ee0:	bf00      	nop
 8004ee2:	e00d      	b.n	8004f00 <HAL_UART_RxCpltCallback+0x46c>
							break;
 8004ee4:	bf00      	nop
 8004ee6:	e00b      	b.n	8004f00 <HAL_UART_RxCpltCallback+0x46c>
							break;
 8004ee8:	bf00      	nop
 8004eea:	e009      	b.n	8004f00 <HAL_UART_RxCpltCallback+0x46c>
							break;
 8004eec:	bf00      	nop
						}
						break;
 8004eee:	e007      	b.n	8004f00 <HAL_UART_RxCpltCallback+0x46c>
				for (i = 0; i < MAX_CMDS; i++) {
 8004ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef8:	2b14      	cmp	r3, #20
 8004efa:	f77f adfe 	ble.w	8004afa <HAL_UART_RxCpltCallback+0x66>
 8004efe:	e000      	b.n	8004f02 <HAL_UART_RxCpltCallback+0x46e>
						break;
 8004f00:	bf00      	nop
					}
				}
				//
				if (ev == -1) ev = cmdErr;
 8004f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f08:	d101      	bne.n	8004f0e <HAL_UART_RxCpltCallback+0x47a>
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	62bb      	str	r3, [r7, #40]	; 0x28
				putEvt(ev);
 8004f0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f10:	f7ff f98c 	bl	800422c <putEvt>
				//
			}

			rxInd = 0;
 8004f14:	4b13      	ldr	r3, [pc, #76]	; (8004f64 <HAL_UART_RxCpltCallback+0x4d0>)
 8004f16:	2200      	movs	r2, #0
 8004f18:	801a      	strh	r2, [r3, #0]
			*rxBuf = '\0';
 8004f1a:	4b13      	ldr	r3, [pc, #76]	; (8004f68 <HAL_UART_RxCpltCallback+0x4d4>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	701a      	strb	r2, [r3, #0]
		}

		if (HAL_UART_Receive_IT(huart, &rxByte, 1) != HAL_OK) devError |= devUART;
 8004f20:	2201      	movs	r2, #1
 8004f22:	4912      	ldr	r1, [pc, #72]	; (8004f6c <HAL_UART_RxCpltCallback+0x4d8>)
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f008 f99d 	bl	800d264 <HAL_UART_Receive_IT>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d006      	beq.n	8004f3e <HAL_UART_RxCpltCallback+0x4aa>
 8004f30:	4b0f      	ldr	r3, [pc, #60]	; (8004f70 <HAL_UART_RxCpltCallback+0x4dc>)
 8004f32:	881b      	ldrh	r3, [r3, #0]
 8004f34:	f043 0302 	orr.w	r3, r3, #2
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	4b0d      	ldr	r3, [pc, #52]	; (8004f70 <HAL_UART_RxCpltCallback+0x4dc>)
 8004f3c:	801a      	strh	r2, [r3, #0]
	}
}
 8004f3e:	bf00      	nop
 8004f40:	3734      	adds	r7, #52	; 0x34
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd90      	pop	{r4, r7, pc}
 8004f46:	bf00      	nop
 8004f48:	200001d0 	.word	0x200001d0
 8004f4c:	20001cb0 	.word	0x20001cb0
 8004f50:	20001cb4 	.word	0x20001cb4
 8004f54:	20001cbc 	.word	0x20001cbc
 8004f58:	200001d8 	.word	0x200001d8
 8004f5c:	200001d4 	.word	0x200001d4
 8004f60:	20001cb8 	.word	0x20001cb8
 8004f64:	200018a2 	.word	0x200018a2
 8004f68:	200018a4 	.word	0x200018a4
 8004f6c:	200018a0 	.word	0x200018a0
 8004f70:	20001890 	.word	0x20001890

08004f74 <HAL_UART_ErrorCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a07      	ldr	r2, [pc, #28]	; (8004fa0 <HAL_UART_ErrorCallback+0x2c>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d106      	bne.n	8004f94 <HAL_UART_ErrorCallback+0x20>
		devError |= devUART;
 8004f86:	4b07      	ldr	r3, [pc, #28]	; (8004fa4 <HAL_UART_ErrorCallback+0x30>)
 8004f88:	881b      	ldrh	r3, [r3, #0]
 8004f8a:	f043 0302 	orr.w	r3, r3, #2
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	4b04      	ldr	r3, [pc, #16]	; (8004fa4 <HAL_UART_ErrorCallback+0x30>)
 8004f92:	801a      	strh	r2, [r3, #0]
	}
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr
 8004fa0:	40004400 	.word	0x40004400
 8004fa4:	20001890 	.word	0x20001890

08004fa8 <spiDone>:
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
//    Функция устанавливает в начальное состояние 'готов' служебные параметры порта SPI1:
//
void spiDone(SPI_HandleTypeDef *hspi)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
#ifdef SET_W25FLASH
	if (hspi->Instance == SPI2) {
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a0a      	ldr	r2, [pc, #40]	; (8004fe0 <spiDone+0x38>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d105      	bne.n	8004fc6 <spiDone+0x1e>
		W25_UNSELECT();
 8004fba:	f001 f97f 	bl	80062bc <W25_UNSELECT>
		spiRdy = 1;
 8004fbe:	4b09      	ldr	r3, [pc, #36]	; (8004fe4 <spiDone+0x3c>)
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	701a      	strb	r2, [r3, #0]
	else
	if (hspi->Instance == SPI1) {
		lcdRdy = 1;
	}
#endif
}
 8004fc4:	e007      	b.n	8004fd6 <spiDone+0x2e>
	if (hspi->Instance == SPI1) {
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a07      	ldr	r2, [pc, #28]	; (8004fe8 <spiDone+0x40>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d102      	bne.n	8004fd6 <spiDone+0x2e>
		lcdRdy = 1;
 8004fd0:	4b06      	ldr	r3, [pc, #24]	; (8004fec <spiDone+0x44>)
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	701a      	strb	r2, [r3, #0]
}
 8004fd6:	bf00      	nop
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	40003800 	.word	0x40003800
 8004fe4:	200001cc 	.word	0x200001cc
 8004fe8:	40013000 	.word	0x40013000
 8004fec:	20000000 	.word	0x20000000

08004ff0 <HAL_SPI_RxCpltCallback>:
//-------------------------------------------------------------------------------------------
//    CallBack функция, вызывается по завершении приема данных от порта SPI
//
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f7ff ffd5 	bl	8004fa8 <spiDone>
}
 8004ffe:	bf00      	nop
 8005000:	3708      	adds	r7, #8
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <HAL_SPI_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
//    CallBack функция, вызывается по завершении передачи данных в порт SPI
//
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b082      	sub	sp, #8
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f7ff ffca 	bl	8004fa8 <spiDone>
}
 8005014:	bf00      	nop
 8005016:	3708      	adds	r7, #8
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <HAL_SPI_TxRxCpltCallback>:
//-------------------------------------------------------------------------------------------
//    CallBack функция, вызывается по завершении приема/передачи данных порта SPI
//
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f7ff ffbf 	bl	8004fa8 <spiDone>
}
 800502a:	bf00      	nop
 800502c:	3708      	adds	r7, #8
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
	...

08005034 <HAL_SPI_ErrorCallback>:
//--------------------------------------------------------------------------------------------
//    CallBack функция, вызывается при возникновении ошибки у модуля SPI
//
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f7ff ffb3 	bl	8004fa8 <spiDone>
	devError |= devSPI;
 8005042:	4b05      	ldr	r3, [pc, #20]	; (8005058 <HAL_SPI_ErrorCallback+0x24>)
 8005044:	881b      	ldrh	r3, [r3, #0]
 8005046:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800504a:	b29a      	uxth	r2, r3
 800504c:	4b02      	ldr	r3, [pc, #8]	; (8005058 <HAL_SPI_ErrorCallback+0x24>)
 800504e:	801a      	strh	r2, [r3, #0]
}
 8005050:	bf00      	nop
 8005052:	3708      	adds	r7, #8
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	20001890 	.word	0x20001890

0800505c <HAL_I2C_ErrorCallback>:
	}
#endif
}
//--------------------------------------------------------------------------------------------
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
#ifdef SET_RDA_CHIP
	if (hi2c->Instance == I2C1) {
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a07      	ldr	r2, [pc, #28]	; (8005088 <HAL_I2C_ErrorCallback+0x2c>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d106      	bne.n	800507c <HAL_I2C_ErrorCallback+0x20>
		devError |= devRDA;
 800506e:	4b07      	ldr	r3, [pc, #28]	; (800508c <HAL_I2C_ErrorCallback+0x30>)
 8005070:	881b      	ldrh	r3, [r3, #0]
 8005072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005076:	b29a      	uxth	r2, r3
 8005078:	4b04      	ldr	r3, [pc, #16]	; (800508c <HAL_I2C_ErrorCallback+0x30>)
 800507a:	801a      	strh	r2, [r3, #0]
	}
#endif
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	40005400 	.word	0x40005400
 800508c:	20001890 	.word	0x20001890

08005090 <HAL_GPIO_EXTI_Callback>:
//--------------------------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	4603      	mov	r3, r0
 8005098:	80fb      	strh	r3, [r7, #6]
	if ((GPIO_Pin != KEY0_Pin) && (GPIO_Pin != KEY1_Pin)) return;
 800509a:	88fb      	ldrh	r3, [r7, #6]
 800509c:	2b02      	cmp	r3, #2
 800509e:	d002      	beq.n	80050a6 <HAL_GPIO_EXTI_Callback+0x16>
 80050a0:	88fb      	ldrh	r3, [r7, #6]
 80050a2:	2b04      	cmp	r3, #4
 80050a4:	d110      	bne.n	80050c8 <HAL_GPIO_EXTI_Callback+0x38>

	if (GPIO_Pin == KEY0_Pin) seek_up = 1;
 80050a6:	88fb      	ldrh	r3, [r7, #6]
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d103      	bne.n	80050b4 <HAL_GPIO_EXTI_Callback+0x24>
 80050ac:	4b08      	ldr	r3, [pc, #32]	; (80050d0 <HAL_GPIO_EXTI_Callback+0x40>)
 80050ae:	2201      	movs	r2, #1
 80050b0:	701a      	strb	r2, [r3, #0]
 80050b2:	e005      	b.n	80050c0 <HAL_GPIO_EXTI_Callback+0x30>
	else
	if (GPIO_Pin == KEY1_Pin) seek_up = 0;
 80050b4:	88fb      	ldrh	r3, [r7, #6]
 80050b6:	2b04      	cmp	r3, #4
 80050b8:	d102      	bne.n	80050c0 <HAL_GPIO_EXTI_Callback+0x30>
 80050ba:	4b05      	ldr	r3, [pc, #20]	; (80050d0 <HAL_GPIO_EXTI_Callback+0x40>)
 80050bc:	2200      	movs	r2, #0
 80050be:	701a      	strb	r2, [r3, #0]

	putEvt(cmdScan);
 80050c0:	200b      	movs	r0, #11
 80050c2:	f7ff f8b3 	bl	800422c <putEvt>
 80050c6:	e000      	b.n	80050ca <HAL_GPIO_EXTI_Callback+0x3a>
	if ((GPIO_Pin != KEY0_Pin) && (GPIO_Pin != KEY1_Pin)) return;
 80050c8:	bf00      	nop
}
 80050ca:	3708      	adds	r7, #8
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	200001ee 	.word	0x200001ee

080050d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80050d8:	b672      	cpsid	i
}
 80050da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  devError |= devSYS;
 80050dc:	4b05      	ldr	r3, [pc, #20]	; (80050f4 <Error_Handler+0x20>)
 80050de:	881b      	ldrh	r3, [r3, #0]
 80050e0:	f043 0320 	orr.w	r3, r3, #32
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	4b03      	ldr	r3, [pc, #12]	; (80050f4 <Error_Handler+0x20>)
 80050e8:	801a      	strh	r2, [r3, #0]
	  errLedOn(true);
 80050ea:	2001      	movs	r0, #1
 80050ec:	f7ff fae8 	bl	80046c0 <errLedOn>
	  devError |= devSYS;
 80050f0:	e7f4      	b.n	80050dc <Error_Handler+0x8>
 80050f2:	bf00      	nop
 80050f4:	20001890 	.word	0x20001890

080050f8 <rda5807_init>:

//==============================================================================
// Инициализация rda5807
//==============================================================================
uint8_t rda5807_init(float *freq)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b088      	sub	sp, #32
 80050fc:	af04      	add	r7, sp, #16
 80050fe:	6078      	str	r0, [r7, #4]
uint8_t buf[2] = {0, 0};
 8005100:	2300      	movs	r3, #0
 8005102:	813b      	strh	r3, [r7, #8]
uint8_t *id = &buf[0];
 8005104:	f107 0308 	add.w	r3, r7, #8
 8005108:	60fb      	str	r3, [r7, #12]

    if (HAL_I2C_Mem_Read(i2cRDA, RDA5807_RandAccess_Addr, 0, I2C_MEMADD_SIZE_8BIT, buf, 2, RDA5807_TO) != HAL_OK) {
 800510a:	4b30      	ldr	r3, [pc, #192]	; (80051cc <rda5807_init+0xd4>)
 800510c:	6818      	ldr	r0, [r3, #0]
 800510e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005112:	9302      	str	r3, [sp, #8]
 8005114:	2302      	movs	r3, #2
 8005116:	9301      	str	r3, [sp, #4]
 8005118:	f107 0308 	add.w	r3, r7, #8
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	2301      	movs	r3, #1
 8005120:	2200      	movs	r2, #0
 8005122:	2122      	movs	r1, #34	; 0x22
 8005124:	f002 ff48 	bl	8007fb8 <HAL_I2C_Mem_Read>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d13c      	bne.n	80051a8 <rda5807_init+0xb0>
    stx[0] = '\0';
    for (int i = 0; i < 64; i++) sprintf(stx+strlen(stx)," %02x", buf11[i]);
    Report(1, "[%s] %s\r\n", __func__, stx);
#endif

    rda5807_SoftReset();
 800512e:	f000 f927 	bl	8005380 <rda5807_SoftReset>
    if (devError & devRDA) goto err_out;
 8005132:	4b27      	ldr	r3, [pc, #156]	; (80051d0 <rda5807_init+0xd8>)
 8005134:	881b      	ldrh	r3, [r3, #0]
 8005136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800513a:	2b00      	cmp	r3, #0
 800513c:	d136      	bne.n	80051ac <rda5807_init+0xb4>

    rda5807_SetupDefault();
 800513e:	f000 f949 	bl	80053d4 <rda5807_SetupDefault>
    if (devError & devRDA) goto err_out;
 8005142:	4b23      	ldr	r3, [pc, #140]	; (80051d0 <rda5807_init+0xd8>)
 8005144:	881b      	ldrh	r3, [r3, #0]
 8005146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800514a:	2b00      	cmp	r3, #0
 800514c:	d130      	bne.n	80051b0 <rda5807_init+0xb8>

    uint16_t fr = (uint16_t)(*freq * 10);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	edd3 7a00 	vldr	s15, [r3]
 8005154:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005158:	ee67 7a87 	vmul.f32	s15, s15, s14
 800515c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005160:	ee17 3a90 	vmov	r3, s15
 8005164:	817b      	strh	r3, [r7, #10]
    rda5807_SetFreq_In100Khz(fr);
 8005166:	897b      	ldrh	r3, [r7, #10]
 8005168:	4618      	mov	r0, r3
 800516a:	f000 fa79 	bl	8005660 <rda5807_SetFreq_In100Khz>
    //
    HAL_Delay(200);
 800516e:	20c8      	movs	r0, #200	; 0xc8
 8005170:	f001 fe92 	bl	8006e98 <HAL_Delay>
    //
    *freq = (float)rda5807_GetFreq_In100Khz();
 8005174:	f000 faee 	bl	8005754 <rda5807_GetFreq_In100Khz>
 8005178:	4603      	mov	r3, r0
 800517a:	ee07 3a90 	vmov	s15, r3
 800517e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	edc3 7a00 	vstr	s15, [r3]
    *freq /= 10;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	ed93 7a00 	vldr	s14, [r3]
 800518e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005192:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	edc3 7a00 	vstr	s15, [r3]
#ifdef SET_RDA_DEBUG
    Report(1, "[%s] Freq: %.2f\r\n", __func__, *freq);//rda5807_GetFreq_In100Khz());
#endif

    HAL_Delay(100);
 800519c:	2064      	movs	r0, #100	; 0x64
 800519e:	f001 fe7b 	bl	8006e98 <HAL_Delay>

    return *id;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	e00d      	b.n	80051c4 <rda5807_init+0xcc>
    	goto err_out;
 80051a8:	bf00      	nop
 80051aa:	e002      	b.n	80051b2 <rda5807_init+0xba>
    if (devError & devRDA) goto err_out;
 80051ac:	bf00      	nop
 80051ae:	e000      	b.n	80051b2 <rda5807_init+0xba>
    if (devError & devRDA) goto err_out;
 80051b0:	bf00      	nop

err_out:
	devError |= devRDA;
 80051b2:	4b07      	ldr	r3, [pc, #28]	; (80051d0 <rda5807_init+0xd8>)
 80051b4:	881b      	ldrh	r3, [r3, #0]
 80051b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	4b04      	ldr	r3, [pc, #16]	; (80051d0 <rda5807_init+0xd8>)
 80051be:	801a      	strh	r2, [r3, #0]
    return *id;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	781b      	ldrb	r3, [r3, #0]
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3710      	adds	r7, #16
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	20000208 	.word	0x20000208
 80051d0:	20001890 	.word	0x20001890

080051d4 <rda5807_rssi>:
//==============================================================================
uint16_t rda5807_rssi()
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
uint16_t word = 0;
 80051da:	2300      	movs	r3, #0
 80051dc:	80fb      	strh	r3, [r7, #6]

    rda5807_read(0x0B, &word, 1);
 80051de:	1dbb      	adds	r3, r7, #6
 80051e0:	2201      	movs	r2, #1
 80051e2:	4619      	mov	r1, r3
 80051e4:	200b      	movs	r0, #11
 80051e6:	f000 f85d 	bl	80052a4 <rda5807_read>

    return (word >> 9);
 80051ea:	88fb      	ldrh	r3, [r7, #6]
 80051ec:	0a5b      	lsrs	r3, r3, #9
 80051ee:	b29b      	uxth	r3, r3
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3708      	adds	r7, #8
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <rda5807_bytes_change>:

//==============================================================================
// Процедура меняет местами байты попарно в буфере pBuff 
//==============================================================================
void rda5807_bytes_change(uint8_t *pBuff, uint8_t count)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	460b      	mov	r3, r1
 8005202:	70fb      	strb	r3, [r7, #3]
    while (count > 1) {    // Если осталась хотя бы пара байт
 8005204:	e010      	b.n	8005228 <rda5807_bytes_change+0x30>
        uint8_t Temp = *(pBuff + 1);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	785b      	ldrb	r3, [r3, #1]
 800520a:	73fb      	strb	r3, [r7, #15]
        *(pBuff + 1) = *pBuff;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	3301      	adds	r3, #1
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	7812      	ldrb	r2, [r2, #0]
 8005214:	701a      	strb	r2, [r3, #0]
        *pBuff = Temp;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	7bfa      	ldrb	r2, [r7, #15]
 800521a:	701a      	strb	r2, [r3, #0]
        pBuff += 2;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	3302      	adds	r3, #2
 8005220:	607b      	str	r3, [r7, #4]
        count -= 2;
 8005222:	78fb      	ldrb	r3, [r7, #3]
 8005224:	3b02      	subs	r3, #2
 8005226:	70fb      	strb	r3, [r7, #3]
    while (count > 1) {    // Если осталась хотя бы пара байт
 8005228:	78fb      	ldrb	r3, [r7, #3]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d8eb      	bhi.n	8005206 <rda5807_bytes_change+0xe>
    }
}
 800522e:	bf00      	nop
 8005230:	bf00      	nop
 8005232:	3714      	adds	r7, #20
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <rda5807_write_regfile>:
//==============================================================================
// Процедура пишет в rda5807 группу регистров (кол-во RegNum) начиная с 0x02
// Используется I2C-адрес RDA5807_SeqAccess_Addr
//==============================================================================
void rda5807_write_regfile(uint16_t *pBuff, uint8_t RegNum)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af02      	add	r7, sp, #8
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	460b      	mov	r3, r1
 8005246:	70fb      	strb	r3, [r7, #3]
    err = i2cm_Start(I2Cx, RDA5807_SeqAccess_Addr, 0, RDA5807_TO);
    if (err) {
        Error_Handler();
    } //*/

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8005248:	78fb      	ldrb	r3, [r7, #3]
 800524a:	005b      	lsls	r3, r3, #1
 800524c:	b2db      	uxtb	r3, r3
 800524e:	4619      	mov	r1, r3
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f7ff ffd1 	bl	80051f8 <rda5807_bytes_change>

//    err = i2cm_WriteBuff(I2Cx, (uint8_t *) pBuff, RegNum << 1, RDA5807_TO);
//    i2cm_Stop(I2Cx, RDA5807_TO);

    if (HAL_I2C_Master_Transmit(i2cRDA, (uint16_t)RDA5807_SeqAccess_Addr, (uint8_t *)pBuff, RegNum << 1, RDA5807_TO) != HAL_OK) {
 8005256:	4b11      	ldr	r3, [pc, #68]	; (800529c <rda5807_write_regfile+0x60>)
 8005258:	6818      	ldr	r0, [r3, #0]
 800525a:	78fb      	ldrb	r3, [r7, #3]
 800525c:	b29b      	uxth	r3, r3
 800525e:	005b      	lsls	r3, r3, #1
 8005260:	b29b      	uxth	r3, r3
 8005262:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005266:	9200      	str	r2, [sp, #0]
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	2120      	movs	r1, #32
 800526c:	f002 fc9c 	bl	8007ba8 <HAL_I2C_Master_Transmit>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d006      	beq.n	8005284 <rda5807_write_regfile+0x48>
    	devError |= devRDA;
 8005276:	4b0a      	ldr	r3, [pc, #40]	; (80052a0 <rda5807_write_regfile+0x64>)
 8005278:	881b      	ldrh	r3, [r3, #0]
 800527a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800527e:	b29a      	uxth	r2, r3
 8005280:	4b07      	ldr	r3, [pc, #28]	; (80052a0 <rda5807_write_regfile+0x64>)
 8005282:	801a      	strh	r2, [r3, #0]
    }

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8005284:	78fb      	ldrb	r3, [r7, #3]
 8005286:	005b      	lsls	r3, r3, #1
 8005288:	b2db      	uxtb	r3, r3
 800528a:	4619      	mov	r1, r3
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f7ff ffb3 	bl	80051f8 <rda5807_bytes_change>
}
 8005292:	bf00      	nop
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	20000208 	.word	0x20000208
 80052a0:	20001890 	.word	0x20001890

080052a4 <rda5807_read>:
//==============================================================================
// Процедура читает из rda5807 группу регистров (кол-во RegNum) начиная с RegAddr
// Используется I2C-адрес RDA5807_RandAccess_Addr (для режима совместимости с rda5800)
//==============================================================================
void rda5807_read(uint8_t RegAddr, uint16_t *pBuff, uint8_t RegNum)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af04      	add	r7, sp, #16
 80052aa:	4603      	mov	r3, r0
 80052ac:	6039      	str	r1, [r7, #0]
 80052ae:	71fb      	strb	r3, [r7, #7]
 80052b0:	4613      	mov	r3, r2
 80052b2:	71bb      	strb	r3, [r7, #6]
        Error_Handler();
    }
    // Читаем
    i2cm_ReadBuffAndStop(I2Cx, (uint8_t *) pBuff, RegNum << 1, RDA5807_TO); //*/

    if (HAL_I2C_Mem_Read(i2cRDA, RDA5807_RandAccess_Addr,
 80052b4:	4b13      	ldr	r3, [pc, #76]	; (8005304 <rda5807_read+0x60>)
 80052b6:	6818      	ldr	r0, [r3, #0]
 80052b8:	79fb      	ldrb	r3, [r7, #7]
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	79bb      	ldrb	r3, [r7, #6]
 80052be:	b29b      	uxth	r3, r3
 80052c0:	005b      	lsls	r3, r3, #1
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80052c8:	9102      	str	r1, [sp, #8]
 80052ca:	9301      	str	r3, [sp, #4]
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	9300      	str	r3, [sp, #0]
 80052d0:	2301      	movs	r3, #1
 80052d2:	2122      	movs	r1, #34	; 0x22
 80052d4:	f002 fe70 	bl	8007fb8 <HAL_I2C_Mem_Read>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d006      	beq.n	80052ec <rda5807_read+0x48>
    				     RegAddr, I2C_MEMADD_SIZE_8BIT,
						 (uint8_t *)pBuff, RegNum << 1,
						 RDA5807_TO) != HAL_OK) {
    	devError |= devRDA;
 80052de:	4b0a      	ldr	r3, [pc, #40]	; (8005308 <rda5807_read+0x64>)
 80052e0:	881b      	ldrh	r3, [r3, #0]
 80052e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	4b07      	ldr	r3, [pc, #28]	; (8005308 <rda5807_read+0x64>)
 80052ea:	801a      	strh	r2, [r3, #0]
    }

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 80052ec:	79bb      	ldrb	r3, [r7, #6]
 80052ee:	005b      	lsls	r3, r3, #1
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	4619      	mov	r1, r3
 80052f4:	6838      	ldr	r0, [r7, #0]
 80052f6:	f7ff ff7f 	bl	80051f8 <rda5807_bytes_change>
}
 80052fa:	bf00      	nop
 80052fc:	3708      	adds	r7, #8
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	20000208 	.word	0x20000208
 8005308:	20001890 	.word	0x20001890

0800530c <rda5807_write>:
//==============================================================================
// Процедура пишет в rda5807 группу регистров (кол-во RegNum) начиная с RegAddr
// Используется I2C-адрес RDA5807_RandAccess_Addr (для режима совместимости с rda5800)
//==============================================================================
void rda5807_write(uint8_t RegAddr, uint16_t *pBuff, uint8_t RegNum)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b086      	sub	sp, #24
 8005310:	af04      	add	r7, sp, #16
 8005312:	4603      	mov	r3, r0
 8005314:	6039      	str	r1, [r7, #0]
 8005316:	71fb      	strb	r3, [r7, #7]
 8005318:	4613      	mov	r3, r2
 800531a:	71bb      	strb	r3, [r7, #6]

    if (i2cm_WriteBuff(I2Cx, &RegAddr, 1, RDA5807_TO)) {
        Error_Handler();
    } //*/

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 800531c:	79bb      	ldrb	r3, [r7, #6]
 800531e:	005b      	lsls	r3, r3, #1
 8005320:	b2db      	uxtb	r3, r3
 8005322:	4619      	mov	r1, r3
 8005324:	6838      	ldr	r0, [r7, #0]
 8005326:	f7ff ff67 	bl	80051f8 <rda5807_bytes_change>

    //err = i2cm_WriteBuff(I2Cx, (uint8_t *) pBuff, RegNum << 1, RDA5807_TO);
    //i2cm_Stop(I2Cx, RDA5807_TO);

    if (HAL_I2C_Mem_Write(i2cRDA,
 800532a:	4b13      	ldr	r3, [pc, #76]	; (8005378 <rda5807_write+0x6c>)
 800532c:	6818      	ldr	r0, [r3, #0]
 800532e:	79fb      	ldrb	r3, [r7, #7]
 8005330:	b29a      	uxth	r2, r3
 8005332:	79bb      	ldrb	r3, [r7, #6]
 8005334:	b29b      	uxth	r3, r3
 8005336:	005b      	lsls	r3, r3, #1
 8005338:	b29b      	uxth	r3, r3
 800533a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800533e:	9102      	str	r1, [sp, #8]
 8005340:	9301      	str	r3, [sp, #4]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	9300      	str	r3, [sp, #0]
 8005346:	2301      	movs	r3, #1
 8005348:	2122      	movs	r1, #34	; 0x22
 800534a:	f002 fd21 	bl	8007d90 <HAL_I2C_Mem_Write>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d006      	beq.n	8005362 <rda5807_write+0x56>
    					  RDA5807_RandAccess_Addr,
						  RegAddr, I2C_MEMADD_SIZE_8BIT,
						  (uint8_t *)pBuff, RegNum << 1,
						  RDA5807_TO) != HAL_OK) {
    	devError |= devRDA;
 8005354:	4b09      	ldr	r3, [pc, #36]	; (800537c <rda5807_write+0x70>)
 8005356:	881b      	ldrh	r3, [r3, #0]
 8005358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800535c:	b29a      	uxth	r2, r3
 800535e:	4b07      	ldr	r3, [pc, #28]	; (800537c <rda5807_write+0x70>)
 8005360:	801a      	strh	r2, [r3, #0]
    }

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8005362:	79bb      	ldrb	r3, [r7, #6]
 8005364:	005b      	lsls	r3, r3, #1
 8005366:	b2db      	uxtb	r3, r3
 8005368:	4619      	mov	r1, r3
 800536a:	6838      	ldr	r0, [r7, #0]
 800536c:	f7ff ff44 	bl	80051f8 <rda5807_bytes_change>
}
 8005370:	bf00      	nop
 8005372:	3708      	adds	r7, #8
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	20000208 	.word	0x20000208
 800537c:	20001890 	.word	0x20001890

08005380 <rda5807_SoftReset>:

//==============================================================================
// Процедура делает программный сброс rda5807
//==============================================================================
void rda5807_SoftReset()
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
tReg02h reg02;

    rda5807_read(2, (uint16_t *)&reg02, 1);
 8005386:	1d3b      	adds	r3, r7, #4
 8005388:	2201      	movs	r2, #1
 800538a:	4619      	mov	r1, r3
 800538c:	2002      	movs	r0, #2
 800538e:	f7ff ff89 	bl	80052a4 <rda5807_read>

	reg02.bENABLE = 1;
 8005392:	793b      	ldrb	r3, [r7, #4]
 8005394:	f043 0301 	orr.w	r3, r3, #1
 8005398:	713b      	strb	r3, [r7, #4]
	reg02.bSOFT_RESET = 1;
 800539a:	793b      	ldrb	r3, [r7, #4]
 800539c:	f043 0302 	orr.w	r3, r3, #2
 80053a0:	713b      	strb	r3, [r7, #4]
    rda5807_write(2, (uint16_t *)&reg02, 1);
 80053a2:	1d3b      	adds	r3, r7, #4
 80053a4:	2201      	movs	r2, #1
 80053a6:	4619      	mov	r1, r3
 80053a8:	2002      	movs	r0, #2
 80053aa:	f7ff ffaf 	bl	800530c <rda5807_write>

    reg02.bENABLE = 1;
 80053ae:	793b      	ldrb	r3, [r7, #4]
 80053b0:	f043 0301 	orr.w	r3, r3, #1
 80053b4:	713b      	strb	r3, [r7, #4]
    reg02.bSOFT_RESET = 0;
 80053b6:	793b      	ldrb	r3, [r7, #4]
 80053b8:	f36f 0341 	bfc	r3, #1, #1
 80053bc:	713b      	strb	r3, [r7, #4]
    rda5807_write(2, (uint16_t *)&reg02, 1);
 80053be:	1d3b      	adds	r3, r7, #4
 80053c0:	2201      	movs	r2, #1
 80053c2:	4619      	mov	r1, r3
 80053c4:	2002      	movs	r0, #2
 80053c6:	f7ff ffa1 	bl	800530c <rda5807_write>
}
 80053ca:	bf00      	nop
 80053cc:	3708      	adds	r7, #8
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
	...

080053d4 <rda5807_SetupDefault>:

//==============================================================================
// Процедура производит начальную настройку rda5807
//==============================================================================
void rda5807_SetupDefault()
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	af00      	add	r7, sp, #0
	tReg06h Reg06;
	tReg07h Reg07;
} Buffs;*/

    // Регистр 0x02
    Buffs.Reg02.bENABLE = 1;
 80053d8:	4a6b      	ldr	r2, [pc, #428]	; (8005588 <rda5807_SetupDefault+0x1b4>)
 80053da:	7813      	ldrb	r3, [r2, #0]
 80053dc:	f043 0301 	orr.w	r3, r3, #1
 80053e0:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSOFT_RESET = 0;
 80053e2:	4a69      	ldr	r2, [pc, #420]	; (8005588 <rda5807_SetupDefault+0x1b4>)
 80053e4:	7813      	ldrb	r3, [r2, #0]
 80053e6:	f36f 0341 	bfc	r3, #1, #1
 80053ea:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bNEW_METHOD = 1;
 80053ec:	4a66      	ldr	r2, [pc, #408]	; (8005588 <rda5807_SetupDefault+0x1b4>)
 80053ee:	7813      	ldrb	r3, [r2, #0]
 80053f0:	f043 0304 	orr.w	r3, r3, #4
 80053f4:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bRDS_EN = 1;
 80053f6:	4a64      	ldr	r2, [pc, #400]	; (8005588 <rda5807_SetupDefault+0x1b4>)
 80053f8:	7813      	ldrb	r3, [r2, #0]
 80053fa:	f043 0308 	orr.w	r3, r3, #8
 80053fe:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bCLK_MODE = 0;        // 32.768
 8005400:	4a61      	ldr	r2, [pc, #388]	; (8005588 <rda5807_SetupDefault+0x1b4>)
 8005402:	7813      	ldrb	r3, [r2, #0]
 8005404:	f36f 1306 	bfc	r3, #4, #3
 8005408:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSKMODE = 0;
 800540a:	4a5f      	ldr	r2, [pc, #380]	; (8005588 <rda5807_SetupDefault+0x1b4>)
 800540c:	7813      	ldrb	r3, [r2, #0]
 800540e:	f36f 13c7 	bfc	r3, #7, #1
 8005412:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSEEK = 0;
 8005414:	4a5c      	ldr	r2, [pc, #368]	; (8005588 <rda5807_SetupDefault+0x1b4>)
 8005416:	7853      	ldrb	r3, [r2, #1]
 8005418:	f36f 0300 	bfc	r3, #0, #1
 800541c:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bSEEKUP = 1;
 800541e:	4a5a      	ldr	r2, [pc, #360]	; (8005588 <rda5807_SetupDefault+0x1b4>)
 8005420:	7853      	ldrb	r3, [r2, #1]
 8005422:	f043 0302 	orr.w	r3, r3, #2
 8005426:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bRCLK_DirectInput = 0;
 8005428:	4a57      	ldr	r2, [pc, #348]	; (8005588 <rda5807_SetupDefault+0x1b4>)
 800542a:	7853      	ldrb	r3, [r2, #1]
 800542c:	f36f 0382 	bfc	r3, #2, #1
 8005430:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bRCLK_NonCalibMode = 0;
 8005432:	4a55      	ldr	r2, [pc, #340]	; (8005588 <rda5807_SetupDefault+0x1b4>)
 8005434:	7853      	ldrb	r3, [r2, #1]
 8005436:	f36f 03c3 	bfc	r3, #3, #1
 800543a:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bBASS = 0;
 800543c:	4a52      	ldr	r2, [pc, #328]	; (8005588 <rda5807_SetupDefault+0x1b4>)
 800543e:	7853      	ldrb	r3, [r2, #1]
 8005440:	f36f 1304 	bfc	r3, #4, #1
 8005444:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bMONO = 0;
 8005446:	4a50      	ldr	r2, [pc, #320]	; (8005588 <rda5807_SetupDefault+0x1b4>)
 8005448:	7853      	ldrb	r3, [r2, #1]
 800544a:	f36f 1345 	bfc	r3, #5, #1
 800544e:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bDMUTE = 1;
 8005450:	4a4d      	ldr	r2, [pc, #308]	; (8005588 <rda5807_SetupDefault+0x1b4>)
 8005452:	7853      	ldrb	r3, [r2, #1]
 8005454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005458:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bDHIZ = 1;
 800545a:	4a4b      	ldr	r2, [pc, #300]	; (8005588 <rda5807_SetupDefault+0x1b4>)
 800545c:	7853      	ldrb	r3, [r2, #1]
 800545e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005462:	7053      	strb	r3, [r2, #1]
    // Регистр 0x03
    Buffs.Reg03.bSPACE = 0;//Step;//0;   // Шаг настройки - 0 = 100 КГц
 8005464:	4a48      	ldr	r2, [pc, #288]	; (8005588 <rda5807_SetupDefault+0x1b4>)
 8005466:	7893      	ldrb	r3, [r2, #2]
 8005468:	f36f 0301 	bfc	r3, #0, #2
 800546c:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bBAND = Band;//2;//0;    // Диапазон 2 - 76–108 MHz
 800546e:	4b47      	ldr	r3, [pc, #284]	; (800558c <rda5807_SetupDefault+0x1b8>)
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	f003 0303 	and.w	r3, r3, #3
 8005476:	b2d9      	uxtb	r1, r3
 8005478:	4a43      	ldr	r2, [pc, #268]	; (8005588 <rda5807_SetupDefault+0x1b4>)
 800547a:	7893      	ldrb	r3, [r2, #2]
 800547c:	f361 0383 	bfi	r3, r1, #2, #2
 8005480:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bTUNE = 1;
 8005482:	4a41      	ldr	r2, [pc, #260]	; (8005588 <rda5807_SetupDefault+0x1b4>)
 8005484:	7893      	ldrb	r3, [r2, #2]
 8005486:	f043 0310 	orr.w	r3, r3, #16
 800548a:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bDIRECT_MODE = 0;
 800548c:	4a3e      	ldr	r2, [pc, #248]	; (8005588 <rda5807_SetupDefault+0x1b4>)
 800548e:	7893      	ldrb	r3, [r2, #2]
 8005490:	f36f 1345 	bfc	r3, #5, #1
 8005494:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bCHAN = 0;
 8005496:	4a3c      	ldr	r2, [pc, #240]	; (8005588 <rda5807_SetupDefault+0x1b4>)
 8005498:	8853      	ldrh	r3, [r2, #2]
 800549a:	f36f 138f 	bfc	r3, #6, #10
 800549e:	8053      	strh	r3, [r2, #2]
    // Регистр 0x04
    Buffs.Reg04.bRSVD1 = 0;
 80054a0:	4b39      	ldr	r3, [pc, #228]	; (8005588 <rda5807_SetupDefault+0x1b4>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	711a      	strb	r2, [r3, #4]
    Buffs.Reg04.bAFCD = 0;
 80054a6:	4a38      	ldr	r2, [pc, #224]	; (8005588 <rda5807_SetupDefault+0x1b4>)
 80054a8:	7953      	ldrb	r3, [r2, #5]
 80054aa:	f36f 0300 	bfc	r3, #0, #1
 80054ae:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bSOFTMUTE_EN = 1;
 80054b0:	4a35      	ldr	r2, [pc, #212]	; (8005588 <rda5807_SetupDefault+0x1b4>)
 80054b2:	7953      	ldrb	r3, [r2, #5]
 80054b4:	f043 0302 	orr.w	r3, r3, #2
 80054b8:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bRSVD2 = 0;
 80054ba:	4a33      	ldr	r2, [pc, #204]	; (8005588 <rda5807_SetupDefault+0x1b4>)
 80054bc:	7953      	ldrb	r3, [r2, #5]
 80054be:	f36f 0382 	bfc	r3, #2, #1
 80054c2:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bDE = 0;
 80054c4:	4a30      	ldr	r2, [pc, #192]	; (8005588 <rda5807_SetupDefault+0x1b4>)
 80054c6:	7953      	ldrb	r3, [r2, #5]
 80054c8:	f36f 03c3 	bfc	r3, #3, #1
 80054cc:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bRSVD3 = 0;
 80054ce:	4a2e      	ldr	r2, [pc, #184]	; (8005588 <rda5807_SetupDefault+0x1b4>)
 80054d0:	7953      	ldrb	r3, [r2, #5]
 80054d2:	f36f 1307 	bfc	r3, #4, #4
 80054d6:	7153      	strb	r3, [r2, #5]
    // Регистр 0x05
    Buffs.Reg05.bVOLUME = 0;
 80054d8:	4a2b      	ldr	r2, [pc, #172]	; (8005588 <rda5807_SetupDefault+0x1b4>)
 80054da:	7993      	ldrb	r3, [r2, #6]
 80054dc:	f36f 0303 	bfc	r3, #0, #4
 80054e0:	7193      	strb	r3, [r2, #6]
    Buffs.Reg05.bANT_GAIN = 0;
 80054e2:	4a29      	ldr	r2, [pc, #164]	; (8005588 <rda5807_SetupDefault+0x1b4>)
 80054e4:	7993      	ldrb	r3, [r2, #6]
 80054e6:	f36f 1305 	bfc	r3, #4, #2
 80054ea:	7193      	strb	r3, [r2, #6]
    Buffs.Reg05.bANT_TYPE = ANT_TYPE_Both;//ANT_TYPE_External;//ANT_TYPE_Headphones;//ANT_TYPE_Both;
 80054ec:	4a26      	ldr	r2, [pc, #152]	; (8005588 <rda5807_SetupDefault+0x1b4>)
 80054ee:	7993      	ldrb	r3, [r2, #6]
 80054f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054f4:	7193      	strb	r3, [r2, #6]
    Buffs.Reg05.bSEEKTH = 8;
 80054f6:	4a24      	ldr	r2, [pc, #144]	; (8005588 <rda5807_SetupDefault+0x1b4>)
 80054f8:	79d3      	ldrb	r3, [r2, #7]
 80054fa:	2108      	movs	r1, #8
 80054fc:	f361 0303 	bfi	r3, r1, #0, #4
 8005500:	71d3      	strb	r3, [r2, #7]
    Buffs.Reg05.bRSVD3 = 0;
 8005502:	4a21      	ldr	r2, [pc, #132]	; (8005588 <rda5807_SetupDefault+0x1b4>)
 8005504:	79d3      	ldrb	r3, [r2, #7]
 8005506:	f36f 1306 	bfc	r3, #4, #3
 800550a:	71d3      	strb	r3, [r2, #7]
    Buffs.Reg05.bINT_MODE = 1;
 800550c:	4a1e      	ldr	r2, [pc, #120]	; (8005588 <rda5807_SetupDefault+0x1b4>)
 800550e:	79d3      	ldrb	r3, [r2, #7]
 8005510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005514:	71d3      	strb	r3, [r2, #7]
    // Регистр 0x06
    Buffs.Reg06.bRSVD1 = 0;
 8005516:	4a1c      	ldr	r2, [pc, #112]	; (8005588 <rda5807_SetupDefault+0x1b4>)
 8005518:	8913      	ldrh	r3, [r2, #8]
 800551a:	f36f 030c 	bfc	r3, #0, #13
 800551e:	8113      	strh	r3, [r2, #8]
    Buffs.Reg06.bOPEN_MODE = 0;
 8005520:	4a19      	ldr	r2, [pc, #100]	; (8005588 <rda5807_SetupDefault+0x1b4>)
 8005522:	7a53      	ldrb	r3, [r2, #9]
 8005524:	f36f 1346 	bfc	r3, #5, #2
 8005528:	7253      	strb	r3, [r2, #9]
    Buffs.Reg06.bRSVD2 = 0;
 800552a:	4a17      	ldr	r2, [pc, #92]	; (8005588 <rda5807_SetupDefault+0x1b4>)
 800552c:	7a53      	ldrb	r3, [r2, #9]
 800552e:	f36f 13c7 	bfc	r3, #7, #1
 8005532:	7253      	strb	r3, [r2, #9]
    // Регистр 0x07
    Buffs.Reg07.bFREQ_MODE = 0;
 8005534:	4a14      	ldr	r2, [pc, #80]	; (8005588 <rda5807_SetupDefault+0x1b4>)
 8005536:	7a93      	ldrb	r3, [r2, #10]
 8005538:	f36f 0300 	bfc	r3, #0, #1
 800553c:	7293      	strb	r3, [r2, #10]
    Buffs.Reg07.bSOFTBLEND_EN = 1;
 800553e:	4a12      	ldr	r2, [pc, #72]	; (8005588 <rda5807_SetupDefault+0x1b4>)
 8005540:	7a93      	ldrb	r3, [r2, #10]
 8005542:	f043 0302 	orr.w	r3, r3, #2
 8005546:	7293      	strb	r3, [r2, #10]
    Buffs.Reg07.bSEEK_TH_OLD = 0;
 8005548:	4a0f      	ldr	r2, [pc, #60]	; (8005588 <rda5807_SetupDefault+0x1b4>)
 800554a:	7a93      	ldrb	r3, [r2, #10]
 800554c:	f36f 0387 	bfc	r3, #2, #6
 8005550:	7293      	strb	r3, [r2, #10]
    Buffs.Reg07.bRSVD1 = 0;
 8005552:	4a0d      	ldr	r2, [pc, #52]	; (8005588 <rda5807_SetupDefault+0x1b4>)
 8005554:	7ad3      	ldrb	r3, [r2, #11]
 8005556:	f36f 0300 	bfc	r3, #0, #1
 800555a:	72d3      	strb	r3, [r2, #11]
    Buffs.Reg07.b65M_50M_MODE = 1;
 800555c:	4a0a      	ldr	r2, [pc, #40]	; (8005588 <rda5807_SetupDefault+0x1b4>)
 800555e:	7ad3      	ldrb	r3, [r2, #11]
 8005560:	f043 0302 	orr.w	r3, r3, #2
 8005564:	72d3      	strb	r3, [r2, #11]
    Buffs.Reg07.bTH_SOFRBLEND = 16;
 8005566:	4a08      	ldr	r2, [pc, #32]	; (8005588 <rda5807_SetupDefault+0x1b4>)
 8005568:	7ad3      	ldrb	r3, [r2, #11]
 800556a:	2110      	movs	r1, #16
 800556c:	f361 0386 	bfi	r3, r1, #2, #5
 8005570:	72d3      	strb	r3, [r2, #11]
    Buffs.Reg07.bRSVD2 = 0;
 8005572:	4a05      	ldr	r2, [pc, #20]	; (8005588 <rda5807_SetupDefault+0x1b4>)
 8005574:	7ad3      	ldrb	r3, [r2, #11]
 8005576:	f36f 13c7 	bfc	r3, #7, #1
 800557a:	72d3      	strb	r3, [r2, #11]

    // Пишем регистры функцией записи регистрового файла
    rda5807_write_regfile((uint16_t *)&(Buffs.Reg02), 6);
 800557c:	2106      	movs	r1, #6
 800557e:	4802      	ldr	r0, [pc, #8]	; (8005588 <rda5807_SetupDefault+0x1b4>)
 8005580:	f7ff fe5c 	bl	800523c <rda5807_write_regfile>
}
 8005584:	bf00      	nop
 8005586:	bd80      	pop	{r7, pc}
 8005588:	200040a4 	.word	0x200040a4
 800558c:	200001ec 	.word	0x200001ec

08005590 <rda5807_SetVolume>:

//==============================================================================
// Процедура устанавливает уровень громкости (0..16) выхода rda5807. При Value=0 включает MUTE
//==============================================================================
void rda5807_SetVolume(uint8_t Value)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	4603      	mov	r3, r0
 8005598:	71fb      	strb	r3, [r7, #7]
//tReg02h Reg02;
//tReg05h Reg05;
uint8_t Mute = Value ? 0 : 1;
 800559a:	79fb      	ldrb	r3, [r7, #7]
 800559c:	2b00      	cmp	r3, #0
 800559e:	bf0c      	ite	eq
 80055a0:	2301      	moveq	r3, #1
 80055a2:	2300      	movne	r3, #0
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	73fb      	strb	r3, [r7, #15]

    if (Value > 16) Value = 16;
 80055a8:	79fb      	ldrb	r3, [r7, #7]
 80055aa:	2b10      	cmp	r3, #16
 80055ac:	d901      	bls.n	80055b2 <rda5807_SetVolume+0x22>
 80055ae:	2310      	movs	r3, #16
 80055b0:	71fb      	strb	r3, [r7, #7]

    Value--;    // Значение для поля Volume на 1 меньше, чем входной параметр функции
 80055b2:	79fb      	ldrb	r3, [r7, #7]
 80055b4:	3b01      	subs	r3, #1
 80055b6:	71fb      	strb	r3, [r7, #7]

    if (!Mute) {
 80055b8:	7bfb      	ldrb	r3, [r7, #15]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d112      	bne.n	80055e4 <rda5807_SetVolume+0x54>
        // Читаем регистр 0x05
        rda5807_read(5, (uint16_t *)&Buffs.Reg05, 1);
 80055be:	2201      	movs	r2, #1
 80055c0:	4915      	ldr	r1, [pc, #84]	; (8005618 <rda5807_SetVolume+0x88>)
 80055c2:	2005      	movs	r0, #5
 80055c4:	f7ff fe6e 	bl	80052a4 <rda5807_read>
        // Меняем значение поля VOLUME
        Buffs.Reg05.bVOLUME = Value;
 80055c8:	79fb      	ldrb	r3, [r7, #7]
 80055ca:	f003 030f 	and.w	r3, r3, #15
 80055ce:	b2d9      	uxtb	r1, r3
 80055d0:	4a12      	ldr	r2, [pc, #72]	; (800561c <rda5807_SetVolume+0x8c>)
 80055d2:	7993      	ldrb	r3, [r2, #6]
 80055d4:	f361 0303 	bfi	r3, r1, #0, #4
 80055d8:	7193      	strb	r3, [r2, #6]
        // Пишем регистр 0x05
        rda5807_write(5, (uint16_t *)&Buffs.Reg05, 1);
 80055da:	2201      	movs	r2, #1
 80055dc:	490e      	ldr	r1, [pc, #56]	; (8005618 <rda5807_SetVolume+0x88>)
 80055de:	2005      	movs	r0, #5
 80055e0:	f7ff fe94 	bl	800530c <rda5807_write>
    }

    // Читаем регистр 0x02
    rda5807_read(2, (uint16_t *)&Buffs.Reg02, 1);
 80055e4:	2201      	movs	r2, #1
 80055e6:	490d      	ldr	r1, [pc, #52]	; (800561c <rda5807_SetVolume+0x8c>)
 80055e8:	2002      	movs	r0, #2
 80055ea:	f7ff fe5b 	bl	80052a4 <rda5807_read>
    // Меняем значение поля VOLUME
    Buffs.Reg02.bDMUTE = Mute ? 0 : 1;
 80055ee:	7bfb      	ldrb	r3, [r7, #15]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	bf0c      	ite	eq
 80055f4:	2301      	moveq	r3, #1
 80055f6:	2300      	movne	r3, #0
 80055f8:	b2d9      	uxtb	r1, r3
 80055fa:	4a08      	ldr	r2, [pc, #32]	; (800561c <rda5807_SetVolume+0x8c>)
 80055fc:	7853      	ldrb	r3, [r2, #1]
 80055fe:	f361 1386 	bfi	r3, r1, #6, #1
 8005602:	7053      	strb	r3, [r2, #1]
    // Пишем регистр 0x02
    rda5807_write(2, (uint16_t *)&Buffs.Reg02, 1);
 8005604:	2201      	movs	r2, #1
 8005606:	4905      	ldr	r1, [pc, #20]	; (800561c <rda5807_SetVolume+0x8c>)
 8005608:	2002      	movs	r0, #2
 800560a:	f7ff fe7f 	bl	800530c <rda5807_write>
}
 800560e:	bf00      	nop
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	200040aa 	.word	0x200040aa
 800561c:	200040a4 	.word	0x200040a4

08005620 <rda5807_SetBassBoost>:

//==============================================================================
// Процедура включает/выключает BassBoost
//==============================================================================
void rda5807_SetBassBoost(uint8_t Value)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	4603      	mov	r3, r0
 8005628:	71fb      	strb	r3, [r7, #7]
//tReg02h Reg02;

    // Читаем регистр 0x02
    rda5807_read(2, (uint16_t *)&Buffs.Reg02, 1);
 800562a:	2201      	movs	r2, #1
 800562c:	490b      	ldr	r1, [pc, #44]	; (800565c <rda5807_SetBassBoost+0x3c>)
 800562e:	2002      	movs	r0, #2
 8005630:	f7ff fe38 	bl	80052a4 <rda5807_read>
    // Меняем значение поля BASS
    Buffs.Reg02.bBASS = (Value) ? 1 : 0;
 8005634:	79fb      	ldrb	r3, [r7, #7]
 8005636:	2b00      	cmp	r3, #0
 8005638:	bf14      	ite	ne
 800563a:	2301      	movne	r3, #1
 800563c:	2300      	moveq	r3, #0
 800563e:	b2d9      	uxtb	r1, r3
 8005640:	4a06      	ldr	r2, [pc, #24]	; (800565c <rda5807_SetBassBoost+0x3c>)
 8005642:	7853      	ldrb	r3, [r2, #1]
 8005644:	f361 1304 	bfi	r3, r1, #4, #1
 8005648:	7053      	strb	r3, [r2, #1]
    // Пишем регистр 0x02
    rda5807_write(2, (uint16_t *)&Buffs.Reg02, 1);
 800564a:	2201      	movs	r2, #1
 800564c:	4903      	ldr	r1, [pc, #12]	; (800565c <rda5807_SetBassBoost+0x3c>)
 800564e:	2002      	movs	r0, #2
 8005650:	f7ff fe5c 	bl	800530c <rda5807_write>
}
 8005654:	bf00      	nop
 8005656:	3708      	adds	r7, #8
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	200040a4 	.word	0x200040a4

08005660 <rda5807_SetFreq_In100Khz>:
//==============================================================================
// Процедура устанавливает текущую частоту Freq100kHz и стартует перенастройку rda5807 на эту частоту.
// Окончание процесса можно установки можно проконтроллировать по обнулению бита STR в регистре 0x0A (функцией rda5807_Get_SeekTuneReadyFlag)
//==============================================================================
void rda5807_SetFreq_In100Khz(uint16_t Freq100kHz)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	4603      	mov	r3, r0
 8005668:	80fb      	strh	r3, [r7, #6]
//tReg03h Reg03;
uint16_t l = 870, r = 1080;
 800566a:	f240 3366 	movw	r3, #870	; 0x366
 800566e:	81fb      	strh	r3, [r7, #14]
 8005670:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8005674:	81bb      	strh	r3, [r7, #12]

    // Проверка входного параметра для диапазона Buffs.Reg03.bBAND
	switch (Buffs.Reg03.bBAND) {    // Диапазон 87–108 MHz
 8005676:	4b33      	ldr	r3, [pc, #204]	; (8005744 <rda5807_SetFreq_In100Khz+0xe4>)
 8005678:	789b      	ldrb	r3, [r3, #2]
 800567a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800567e:	b2db      	uxtb	r3, r3
 8005680:	2b03      	cmp	r3, #3
 8005682:	d011      	beq.n	80056a8 <rda5807_SetFreq_In100Khz+0x48>
 8005684:	2b03      	cmp	r3, #3
 8005686:	dc16      	bgt.n	80056b6 <rda5807_SetFreq_In100Khz+0x56>
 8005688:	2b01      	cmp	r3, #1
 800568a:	d002      	beq.n	8005692 <rda5807_SetFreq_In100Khz+0x32>
 800568c:	2b02      	cmp	r3, #2
 800568e:	d007      	beq.n	80056a0 <rda5807_SetFreq_In100Khz+0x40>
 8005690:	e011      	b.n	80056b6 <rda5807_SetFreq_In100Khz+0x56>
		//case 0:// 00 = 87–108 MHz (US/Europe)
		//break;
		case 1:// 01 = 76–91 MHz (Japan)
			l = 760;
 8005692:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8005696:	81fb      	strh	r3, [r7, #14]
			r = 910;
 8005698:	f240 338e 	movw	r3, #910	; 0x38e
 800569c:	81bb      	strh	r3, [r7, #12]
		break;
 800569e:	e00a      	b.n	80056b6 <rda5807_SetFreq_In100Khz+0x56>
		case 2:// 10 = 76–108 MHz (world wide)
			l = 760;
 80056a0:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 80056a4:	81fb      	strh	r3, [r7, #14]
		break;
 80056a6:	e006      	b.n	80056b6 <rda5807_SetFreq_In100Khz+0x56>
		case 3:// 11 = 65 –76 MHz (East Europe) or 50-65MHz
			l = 650;
 80056a8:	f240 238a 	movw	r3, #650	; 0x28a
 80056ac:	81fb      	strh	r3, [r7, #14]
			r = 760;
 80056ae:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 80056b2:	81bb      	strh	r3, [r7, #12]
		break;
 80056b4:	bf00      	nop
	}
	lBand = ((float)l) / 10;
 80056b6:	89fb      	ldrh	r3, [r7, #14]
 80056b8:	ee07 3a90 	vmov	s15, r3
 80056bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80056c0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80056c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80056c8:	4b1f      	ldr	r3, [pc, #124]	; (8005748 <rda5807_SetFreq_In100Khz+0xe8>)
 80056ca:	edc3 7a00 	vstr	s15, [r3]
	rBand = ((float)r) / 10;
 80056ce:	89bb      	ldrh	r3, [r7, #12]
 80056d0:	ee07 3a90 	vmov	s15, r3
 80056d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80056d8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80056dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80056e0:	4b1a      	ldr	r3, [pc, #104]	; (800574c <rda5807_SetFreq_In100Khz+0xec>)
 80056e2:	edc3 7a00 	vstr	s15, [r3]

    if (Freq100kHz < l)  Freq100kHz = l;
 80056e6:	88fa      	ldrh	r2, [r7, #6]
 80056e8:	89fb      	ldrh	r3, [r7, #14]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d201      	bcs.n	80056f2 <rda5807_SetFreq_In100Khz+0x92>
 80056ee:	89fb      	ldrh	r3, [r7, #14]
 80056f0:	80fb      	strh	r3, [r7, #6]
    if (Freq100kHz > r) Freq100kHz = r;
 80056f2:	88fa      	ldrh	r2, [r7, #6]
 80056f4:	89bb      	ldrh	r3, [r7, #12]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d901      	bls.n	80056fe <rda5807_SetFreq_In100Khz+0x9e>
 80056fa:	89bb      	ldrh	r3, [r7, #12]
 80056fc:	80fb      	strh	r3, [r7, #6]

    // Вычитаем начало диапазона (left)
    Freq100kHz -= l;
 80056fe:	88fa      	ldrh	r2, [r7, #6]
 8005700:	89fb      	ldrh	r3, [r7, #14]
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	80fb      	strh	r3, [r7, #6]

    // Читаем регистр 0x03
    rda5807_read(3, (uint16_t *)&Buffs.Reg03, 1);
 8005706:	2201      	movs	r2, #1
 8005708:	4911      	ldr	r1, [pc, #68]	; (8005750 <rda5807_SetFreq_In100Khz+0xf0>)
 800570a:	2003      	movs	r0, #3
 800570c:	f7ff fdca 	bl	80052a4 <rda5807_read>
    // Меняем значение поля CHAN
    Buffs.Reg03.bCHAN = Freq100kHz;
 8005710:	88fb      	ldrh	r3, [r7, #6]
 8005712:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005716:	b299      	uxth	r1, r3
 8005718:	4a0a      	ldr	r2, [pc, #40]	; (8005744 <rda5807_SetFreq_In100Khz+0xe4>)
 800571a:	8853      	ldrh	r3, [r2, #2]
 800571c:	f361 138f 	bfi	r3, r1, #6, #10
 8005720:	8053      	strh	r3, [r2, #2]
    // Выставляем флаг начала перенастройки на канал
    Buffs.Reg03.bTUNE = 1;
 8005722:	4a08      	ldr	r2, [pc, #32]	; (8005744 <rda5807_SetFreq_In100Khz+0xe4>)
 8005724:	7893      	ldrb	r3, [r2, #2]
 8005726:	f043 0310 	orr.w	r3, r3, #16
 800572a:	7093      	strb	r3, [r2, #2]
    // Пишем регистр 0x03
    rda5807_write(3, (uint16_t *)&Buffs.Reg03, 1);
 800572c:	2201      	movs	r2, #1
 800572e:	4908      	ldr	r1, [pc, #32]	; (8005750 <rda5807_SetFreq_In100Khz+0xf0>)
 8005730:	2003      	movs	r0, #3
 8005732:	f7ff fdeb 	bl	800530c <rda5807_write>

    HAL_Delay(50);
 8005736:	2032      	movs	r0, #50	; 0x32
 8005738:	f001 fbae 	bl	8006e98 <HAL_Delay>
}
 800573c:	bf00      	nop
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	200040a4 	.word	0x200040a4
 8005748:	20003d08 	.word	0x20003d08
 800574c:	20003d0c 	.word	0x20003d0c
 8005750:	200040a6 	.word	0x200040a6

08005754 <rda5807_GetFreq_In100Khz>:

//==============================================================================
// Функция читает текущую частоту, на которую настроен rda5807
//==============================================================================
uint16_t rda5807_GetFreq_In100Khz()
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 800575a:	2201      	movs	r2, #1
 800575c:	491b      	ldr	r1, [pc, #108]	; (80057cc <rda5807_GetFreq_In100Khz+0x78>)
 800575e:	200a      	movs	r0, #10
 8005760:	f7ff fda0 	bl	80052a4 <rda5807_read>

    uint16_t Freq100kHz = Buffs.Reg0A.bREADCHAN;
 8005764:	4b1a      	ldr	r3, [pc, #104]	; (80057d0 <rda5807_GetFreq_In100Khz+0x7c>)
 8005766:	8a1b      	ldrh	r3, [r3, #16]
 8005768:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800576c:	b29b      	uxth	r3, r3
 800576e:	80bb      	strh	r3, [r7, #4]

    if (Freq100kHz == 319) return 0;
 8005770:	88bb      	ldrh	r3, [r7, #4]
 8005772:	f240 123f 	movw	r2, #319	; 0x13f
 8005776:	4293      	cmp	r3, r2
 8005778:	d101      	bne.n	800577e <rda5807_GetFreq_In100Khz+0x2a>
 800577a:	2300      	movs	r3, #0
 800577c:	e021      	b.n	80057c2 <rda5807_GetFreq_In100Khz+0x6e>

    // Прибавляем начало диапазона (87 МГц)
    uint16_t left = 870;
 800577e:	f240 3366 	movw	r3, #870	; 0x366
 8005782:	80fb      	strh	r3, [r7, #6]
    switch (Buffs.Reg03.bBAND) {    // Диапазон 87–108 MHz
 8005784:	4b12      	ldr	r3, [pc, #72]	; (80057d0 <rda5807_GetFreq_In100Khz+0x7c>)
 8005786:	789b      	ldrb	r3, [r3, #2]
 8005788:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b03      	cmp	r3, #3
 8005790:	d00e      	beq.n	80057b0 <rda5807_GetFreq_In100Khz+0x5c>
 8005792:	2b03      	cmp	r3, #3
 8005794:	dc10      	bgt.n	80057b8 <rda5807_GetFreq_In100Khz+0x64>
 8005796:	2b01      	cmp	r3, #1
 8005798:	d002      	beq.n	80057a0 <rda5807_GetFreq_In100Khz+0x4c>
 800579a:	2b02      	cmp	r3, #2
 800579c:	d004      	beq.n	80057a8 <rda5807_GetFreq_In100Khz+0x54>
 800579e:	e00b      	b.n	80057b8 <rda5807_GetFreq_In100Khz+0x64>
    	//case 0:// 00 = 87–108 MHz (US/Europe)
    	//break;
    	case 1:// 01 = 76–91 MHz (Japan)
    		left = 760;
 80057a0:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 80057a4:	80fb      	strh	r3, [r7, #6]
    	break;
 80057a6:	e007      	b.n	80057b8 <rda5807_GetFreq_In100Khz+0x64>
    	case 2:// 10 = 76–108 MHz (world wide)
    		left = 760;
 80057a8:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 80057ac:	80fb      	strh	r3, [r7, #6]
    	break;
 80057ae:	e003      	b.n	80057b8 <rda5807_GetFreq_In100Khz+0x64>
    	case 3:// 11 = 65 –76 MHz (East Europe) or 50-65MHz
    		left = 650;
 80057b0:	f240 238a 	movw	r3, #650	; 0x28a
 80057b4:	80fb      	strh	r3, [r7, #6]
    	break;
 80057b6:	bf00      	nop
    }
    Freq100kHz += left;
 80057b8:	88ba      	ldrh	r2, [r7, #4]
 80057ba:	88fb      	ldrh	r3, [r7, #6]
 80057bc:	4413      	add	r3, r2
 80057be:	80bb      	strh	r3, [r7, #4]

    return Freq100kHz;
 80057c0:	88bb      	ldrh	r3, [r7, #4]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3708      	adds	r7, #8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	200040b4 	.word	0x200040b4
 80057d0:	200040a4 	.word	0x200040a4

080057d4 <rda5807_StartSeek>:

//==============================================================================
// Процедура стартует поиск радиостанции вверх/вниз
//==============================================================================
void rda5807_StartSeek(uint8_t Up)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	4603      	mov	r3, r0
 80057dc:	71fb      	strb	r3, [r7, #7]
//tReg02h Reg02;

    // Читаем регистр 0x02
    rda5807_read(0x02, (uint16_t *)&Buffs.Reg02, 1);
 80057de:	2201      	movs	r2, #1
 80057e0:	4910      	ldr	r1, [pc, #64]	; (8005824 <rda5807_StartSeek+0x50>)
 80057e2:	2002      	movs	r0, #2
 80057e4:	f7ff fd5e 	bl	80052a4 <rda5807_read>

    Buffs.Reg02.bSKMODE = 1;          // 07 Seek Mode (0 = wrap at the upper or lower band limit and continue seeking; 1 = stop seeking at the upper or lower band limit)
 80057e8:	4a0e      	ldr	r2, [pc, #56]	; (8005824 <rda5807_StartSeek+0x50>)
 80057ea:	7813      	ldrb	r3, [r2, #0]
 80057ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057f0:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSEEK = 1;            // 08 Seek (0 = Disable stop seek; 1 = Enable)
 80057f2:	4a0c      	ldr	r2, [pc, #48]	; (8005824 <rda5807_StartSeek+0x50>)
 80057f4:	7853      	ldrb	r3, [r2, #1]
 80057f6:	f043 0301 	orr.w	r3, r3, #1
 80057fa:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bSEEKUP = Up ? 1 : 0; // 09 Seek Up (0 = Seek down; 1 = Seek up)
 80057fc:	79fb      	ldrb	r3, [r7, #7]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	bf14      	ite	ne
 8005802:	2301      	movne	r3, #1
 8005804:	2300      	moveq	r3, #0
 8005806:	b2d9      	uxtb	r1, r3
 8005808:	4a06      	ldr	r2, [pc, #24]	; (8005824 <rda5807_StartSeek+0x50>)
 800580a:	7853      	ldrb	r3, [r2, #1]
 800580c:	f361 0341 	bfi	r3, r1, #1, #1
 8005810:	7053      	strb	r3, [r2, #1]

    // Пишем регистр 0x02
    rda5807_write(0x02, (uint16_t *)&Buffs.Reg02, 1);
 8005812:	2201      	movs	r2, #1
 8005814:	4903      	ldr	r1, [pc, #12]	; (8005824 <rda5807_StartSeek+0x50>)
 8005816:	2002      	movs	r0, #2
 8005818:	f7ff fd78 	bl	800530c <rda5807_write>
}
 800581c:	bf00      	nop
 800581e:	3708      	adds	r7, #8
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	200040a4 	.word	0x200040a4

08005828 <rda5807_Get_SeekTuneReadyFlag>:
//==============================================================================
// Функция возвращает состояние бита STR (SeekTuneReadyFlag)
// SeekTuneReadyFlag=1 пока идёт процесс настройки на частоту или поиск радиостанции.
//==============================================================================
uint8_t rda5807_Get_SeekTuneReadyFlag()
{
 8005828:	b580      	push	{r7, lr}
 800582a:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 800582c:	2201      	movs	r2, #1
 800582e:	4905      	ldr	r1, [pc, #20]	; (8005844 <rda5807_Get_SeekTuneReadyFlag+0x1c>)
 8005830:	200a      	movs	r0, #10
 8005832:	f7ff fd37 	bl	80052a4 <rda5807_read>

    return Buffs.Reg0A.bSTC;
 8005836:	4b04      	ldr	r3, [pc, #16]	; (8005848 <rda5807_Get_SeekTuneReadyFlag+0x20>)
 8005838:	7c5b      	ldrb	r3, [r3, #17]
 800583a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800583e:	b2db      	uxtb	r3, r3
}
 8005840:	4618      	mov	r0, r3
 8005842:	bd80      	pop	{r7, pc}
 8005844:	200040b4 	.word	0x200040b4
 8005848:	200040a4 	.word	0x200040a4

0800584c <rda5807_Get_StereoMonoFlag>:
//==============================================================================
//==============================================================================
bool rda5807_Get_StereoMonoFlag()
{
 800584c:	b580      	push	{r7, lr}
 800584e:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 8005850:	2201      	movs	r2, #1
 8005852:	4908      	ldr	r1, [pc, #32]	; (8005874 <rda5807_Get_StereoMonoFlag+0x28>)
 8005854:	200a      	movs	r0, #10
 8005856:	f7ff fd25 	bl	80052a4 <rda5807_read>

    return Buffs.Reg0A.bST;     // Stereo Indicator (0 = Mono; 1 = Stereo)
 800585a:	4b07      	ldr	r3, [pc, #28]	; (8005878 <rda5807_Get_StereoMonoFlag+0x2c>)
 800585c:	7c5b      	ldrb	r3, [r3, #17]
 800585e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b00      	cmp	r3, #0
 8005866:	bf14      	ite	ne
 8005868:	2301      	movne	r3, #1
 800586a:	2300      	moveq	r3, #0
 800586c:	b2db      	uxtb	r3, r3
}
 800586e:	4618      	mov	r0, r3
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	200040b4 	.word	0x200040b4
 8005878:	200040a4 	.word	0x200040a4

0800587c <rda5807_Get_Channel>:
//==============================================================================
uint16_t rda5807_Get_Channel()
{
 800587c:	b580      	push	{r7, lr}
 800587e:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 8005880:	2201      	movs	r2, #1
 8005882:	4905      	ldr	r1, [pc, #20]	; (8005898 <rda5807_Get_Channel+0x1c>)
 8005884:	200a      	movs	r0, #10
 8005886:	f7ff fd0d 	bl	80052a4 <rda5807_read>

    return Buffs.Reg0A.bREADCHAN;    // 0-9 Read Channel.
 800588a:	4b04      	ldr	r3, [pc, #16]	; (800589c <rda5807_Get_Channel+0x20>)
 800588c:	8a1b      	ldrh	r3, [r3, #16]
 800588e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005892:	b29b      	uxth	r3, r3
}
 8005894:	4618      	mov	r0, r3
 8005896:	bd80      	pop	{r7, pc}
 8005898:	200040b4 	.word	0x200040b4
 800589c:	200040a4 	.word	0x200040a4

080058a0 <rda5807_Set_Band>:
//==============================================================================
uint8_t rda5807_Set_Band(uint8_t band)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	4603      	mov	r3, r0
 80058a8:	71fb      	strb	r3, [r7, #7]
	if (band > 3) return 1;
 80058aa:	79fb      	ldrb	r3, [r7, #7]
 80058ac:	2b03      	cmp	r3, #3
 80058ae:	d901      	bls.n	80058b4 <rda5807_Set_Band+0x14>
 80058b0:	2301      	movs	r3, #1
 80058b2:	e054      	b.n	800595e <rda5807_Set_Band+0xbe>

    // Читаем регистр 3
    rda5807_read(3, (uint16_t *)&Buffs.Reg03, 1);
 80058b4:	2201      	movs	r2, #1
 80058b6:	492c      	ldr	r1, [pc, #176]	; (8005968 <rda5807_Set_Band+0xc8>)
 80058b8:	2003      	movs	r0, #3
 80058ba:	f7ff fcf3 	bl	80052a4 <rda5807_read>

    Buffs.Reg03.bBAND = band;
 80058be:	79fb      	ldrb	r3, [r7, #7]
 80058c0:	f003 0303 	and.w	r3, r3, #3
 80058c4:	b2d9      	uxtb	r1, r3
 80058c6:	4a29      	ldr	r2, [pc, #164]	; (800596c <rda5807_Set_Band+0xcc>)
 80058c8:	7893      	ldrb	r3, [r2, #2]
 80058ca:	f361 0383 	bfi	r3, r1, #2, #2
 80058ce:	7093      	strb	r3, [r2, #2]

    rda5807_write(3, (uint16_t *)&Buffs.Reg03, 1);
 80058d0:	2201      	movs	r2, #1
 80058d2:	4925      	ldr	r1, [pc, #148]	; (8005968 <rda5807_Set_Band+0xc8>)
 80058d4:	2003      	movs	r0, #3
 80058d6:	f7ff fd19 	bl	800530c <rda5807_write>

    uint16_t l = 870, r = 1080;
 80058da:	f240 3366 	movw	r3, #870	; 0x366
 80058de:	81fb      	strh	r3, [r7, #14]
 80058e0:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80058e4:	81bb      	strh	r3, [r7, #12]

    switch (Buffs.Reg03.bBAND) {    // Диапазон 87–108 MHz
 80058e6:	4b21      	ldr	r3, [pc, #132]	; (800596c <rda5807_Set_Band+0xcc>)
 80058e8:	789b      	ldrb	r3, [r3, #2]
 80058ea:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	2b03      	cmp	r3, #3
 80058f2:	d011      	beq.n	8005918 <rda5807_Set_Band+0x78>
 80058f4:	2b03      	cmp	r3, #3
 80058f6:	dc16      	bgt.n	8005926 <rda5807_Set_Band+0x86>
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d002      	beq.n	8005902 <rda5807_Set_Band+0x62>
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d007      	beq.n	8005910 <rda5807_Set_Band+0x70>
 8005900:	e011      	b.n	8005926 <rda5807_Set_Band+0x86>
    	//case 0:// 00 = 87–108 MHz (US/Europe)
    	//break;
    	case 1:// 01 = 76–91 MHz (Japan)
    		l = 760;
 8005902:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8005906:	81fb      	strh	r3, [r7, #14]
    		r = 910;
 8005908:	f240 338e 	movw	r3, #910	; 0x38e
 800590c:	81bb      	strh	r3, [r7, #12]
    	break;
 800590e:	e00a      	b.n	8005926 <rda5807_Set_Band+0x86>
    	case 2:// 10 = 76–108 MHz (world wide)
    		l = 760;
 8005910:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8005914:	81fb      	strh	r3, [r7, #14]
    	break;
 8005916:	e006      	b.n	8005926 <rda5807_Set_Band+0x86>
    	case 3:// 11 = 65 –76 MHz (East Europe) or 50-65MHz
    		l = 650;
 8005918:	f240 238a 	movw	r3, #650	; 0x28a
 800591c:	81fb      	strh	r3, [r7, #14]
    		r = 760;
 800591e:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8005922:	81bb      	strh	r3, [r7, #12]
    	break;
 8005924:	bf00      	nop
    }
    lBand = ((float)l) / 10;
 8005926:	89fb      	ldrh	r3, [r7, #14]
 8005928:	ee07 3a90 	vmov	s15, r3
 800592c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005930:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005934:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005938:	4b0d      	ldr	r3, [pc, #52]	; (8005970 <rda5807_Set_Band+0xd0>)
 800593a:	edc3 7a00 	vstr	s15, [r3]
    rBand = ((float)r) / 10;
 800593e:	89bb      	ldrh	r3, [r7, #12]
 8005940:	ee07 3a90 	vmov	s15, r3
 8005944:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005948:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800594c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005950:	4b08      	ldr	r3, [pc, #32]	; (8005974 <rda5807_Set_Band+0xd4>)
 8005952:	edc3 7a00 	vstr	s15, [r3]

    HAL_Delay(50);
 8005956:	2032      	movs	r0, #50	; 0x32
 8005958:	f001 fa9e 	bl	8006e98 <HAL_Delay>

    return 0;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	200040a6 	.word	0x200040a6
 800596c:	200040a4 	.word	0x200040a4
 8005970:	20003d08 	.word	0x20003d08
 8005974:	20003d0c 	.word	0x20003d0c

08005978 <rda5807_Set_Mute>:
//==============================================================================
void rda5807_Set_Mute(uint8_t mute)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	4603      	mov	r3, r0
 8005980:	71fb      	strb	r3, [r7, #7]
	// Читаем регистр 2
	rda5807_read(2, (uint16_t *)&Buffs.Reg02, 1);
 8005982:	2201      	movs	r2, #1
 8005984:	490a      	ldr	r1, [pc, #40]	; (80059b0 <rda5807_Set_Mute+0x38>)
 8005986:	2002      	movs	r0, #2
 8005988:	f7ff fc8c 	bl	80052a4 <rda5807_read>

	Buffs.Reg02.bDMUTE = mute & 1;
 800598c:	79fb      	ldrb	r3, [r7, #7]
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	b2d9      	uxtb	r1, r3
 8005994:	4a06      	ldr	r2, [pc, #24]	; (80059b0 <rda5807_Set_Mute+0x38>)
 8005996:	7853      	ldrb	r3, [r2, #1]
 8005998:	f361 1386 	bfi	r3, r1, #6, #1
 800599c:	7053      	strb	r3, [r2, #1]

	rda5807_write(2, (uint16_t *)&Buffs.Reg02, 1);
 800599e:	2201      	movs	r2, #1
 80059a0:	4903      	ldr	r1, [pc, #12]	; (80059b0 <rda5807_Set_Mute+0x38>)
 80059a2:	2002      	movs	r0, #2
 80059a4:	f7ff fcb2 	bl	800530c <rda5807_write>
}
 80059a8:	bf00      	nop
 80059aa:	3708      	adds	r7, #8
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	200040a4 	.word	0x200040a4

080059b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059ba:	4b0f      	ldr	r3, [pc, #60]	; (80059f8 <HAL_MspInit+0x44>)
 80059bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059be:	4a0e      	ldr	r2, [pc, #56]	; (80059f8 <HAL_MspInit+0x44>)
 80059c0:	f043 0301 	orr.w	r3, r3, #1
 80059c4:	6613      	str	r3, [r2, #96]	; 0x60
 80059c6:	4b0c      	ldr	r3, [pc, #48]	; (80059f8 <HAL_MspInit+0x44>)
 80059c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	607b      	str	r3, [r7, #4]
 80059d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80059d2:	4b09      	ldr	r3, [pc, #36]	; (80059f8 <HAL_MspInit+0x44>)
 80059d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059d6:	4a08      	ldr	r2, [pc, #32]	; (80059f8 <HAL_MspInit+0x44>)
 80059d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059dc:	6593      	str	r3, [r2, #88]	; 0x58
 80059de:	4b06      	ldr	r3, [pc, #24]	; (80059f8 <HAL_MspInit+0x44>)
 80059e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059e6:	603b      	str	r3, [r7, #0]
 80059e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80059ea:	bf00      	nop
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	40021000 	.word	0x40021000

080059fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b0ac      	sub	sp, #176	; 0xb0
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a04:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005a08:	2200      	movs	r2, #0
 8005a0a:	601a      	str	r2, [r3, #0]
 8005a0c:	605a      	str	r2, [r3, #4]
 8005a0e:	609a      	str	r2, [r3, #8]
 8005a10:	60da      	str	r2, [r3, #12]
 8005a12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005a14:	f107 0314 	add.w	r3, r7, #20
 8005a18:	2288      	movs	r2, #136	; 0x88
 8005a1a:	2100      	movs	r1, #0
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f00c fc1f 	bl	8012260 <memset>
  if(hi2c->Instance==I2C1)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a57      	ldr	r2, [pc, #348]	; (8005b84 <HAL_I2C_MspInit+0x188>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	f040 80a7 	bne.w	8005b7c <HAL_I2C_MspInit+0x180>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005a2e:	2340      	movs	r3, #64	; 0x40
 8005a30:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005a32:	2300      	movs	r3, #0
 8005a34:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005a36:	f107 0314 	add.w	r3, r7, #20
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f004 fb02 	bl	800a044 <HAL_RCCEx_PeriphCLKConfig>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d001      	beq.n	8005a4a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8005a46:	f7ff fb45 	bl	80050d4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a4a:	4b4f      	ldr	r3, [pc, #316]	; (8005b88 <HAL_I2C_MspInit+0x18c>)
 8005a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a4e:	4a4e      	ldr	r2, [pc, #312]	; (8005b88 <HAL_I2C_MspInit+0x18c>)
 8005a50:	f043 0302 	orr.w	r3, r3, #2
 8005a54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a56:	4b4c      	ldr	r3, [pc, #304]	; (8005b88 <HAL_I2C_MspInit+0x18c>)
 8005a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a5a:	f003 0302 	and.w	r3, r3, #2
 8005a5e:	613b      	str	r3, [r7, #16]
 8005a60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005a62:	23c0      	movs	r3, #192	; 0xc0
 8005a64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005a68:	2312      	movs	r3, #18
 8005a6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005a74:	2302      	movs	r3, #2
 8005a76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005a7a:	2304      	movs	r3, #4
 8005a7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a80:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005a84:	4619      	mov	r1, r3
 8005a86:	4841      	ldr	r0, [pc, #260]	; (8005b8c <HAL_I2C_MspInit+0x190>)
 8005a88:	f001 fdf2 	bl	8007670 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB6);
 8005a8c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005a90:	f003 fc54 	bl	800933c <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB7);
 8005a94:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8005a98:	f003 fc50 	bl	800933c <HAL_I2CEx_EnableFastModePlus>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005a9c:	4b3a      	ldr	r3, [pc, #232]	; (8005b88 <HAL_I2C_MspInit+0x18c>)
 8005a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aa0:	4a39      	ldr	r2, [pc, #228]	; (8005b88 <HAL_I2C_MspInit+0x18c>)
 8005aa2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005aa6:	6593      	str	r3, [r2, #88]	; 0x58
 8005aa8:	4b37      	ldr	r3, [pc, #220]	; (8005b88 <HAL_I2C_MspInit+0x18c>)
 8005aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ab0:	60fb      	str	r3, [r7, #12]
 8005ab2:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA2_Channel6;
 8005ab4:	4b36      	ldr	r3, [pc, #216]	; (8005b90 <HAL_I2C_MspInit+0x194>)
 8005ab6:	4a37      	ldr	r2, [pc, #220]	; (8005b94 <HAL_I2C_MspInit+0x198>)
 8005ab8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_5;
 8005aba:	4b35      	ldr	r3, [pc, #212]	; (8005b90 <HAL_I2C_MspInit+0x194>)
 8005abc:	2205      	movs	r2, #5
 8005abe:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005ac0:	4b33      	ldr	r3, [pc, #204]	; (8005b90 <HAL_I2C_MspInit+0x194>)
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ac6:	4b32      	ldr	r3, [pc, #200]	; (8005b90 <HAL_I2C_MspInit+0x194>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005acc:	4b30      	ldr	r3, [pc, #192]	; (8005b90 <HAL_I2C_MspInit+0x194>)
 8005ace:	2280      	movs	r2, #128	; 0x80
 8005ad0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005ad2:	4b2f      	ldr	r3, [pc, #188]	; (8005b90 <HAL_I2C_MspInit+0x194>)
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005ad8:	4b2d      	ldr	r3, [pc, #180]	; (8005b90 <HAL_I2C_MspInit+0x194>)
 8005ada:	2200      	movs	r2, #0
 8005adc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8005ade:	4b2c      	ldr	r3, [pc, #176]	; (8005b90 <HAL_I2C_MspInit+0x194>)
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005ae4:	4b2a      	ldr	r3, [pc, #168]	; (8005b90 <HAL_I2C_MspInit+0x194>)
 8005ae6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005aea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8005aec:	4828      	ldr	r0, [pc, #160]	; (8005b90 <HAL_I2C_MspInit+0x194>)
 8005aee:	f001 fb3b 	bl	8007168 <HAL_DMA_Init>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d001      	beq.n	8005afc <HAL_I2C_MspInit+0x100>
    {
      Error_Handler();
 8005af8:	f7ff faec 	bl	80050d4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a24      	ldr	r2, [pc, #144]	; (8005b90 <HAL_I2C_MspInit+0x194>)
 8005b00:	63da      	str	r2, [r3, #60]	; 0x3c
 8005b02:	4a23      	ldr	r2, [pc, #140]	; (8005b90 <HAL_I2C_MspInit+0x194>)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8005b08:	4b23      	ldr	r3, [pc, #140]	; (8005b98 <HAL_I2C_MspInit+0x19c>)
 8005b0a:	4a24      	ldr	r2, [pc, #144]	; (8005b9c <HAL_I2C_MspInit+0x1a0>)
 8005b0c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 8005b0e:	4b22      	ldr	r3, [pc, #136]	; (8005b98 <HAL_I2C_MspInit+0x19c>)
 8005b10:	2203      	movs	r2, #3
 8005b12:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005b14:	4b20      	ldr	r3, [pc, #128]	; (8005b98 <HAL_I2C_MspInit+0x19c>)
 8005b16:	2210      	movs	r2, #16
 8005b18:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b1a:	4b1f      	ldr	r3, [pc, #124]	; (8005b98 <HAL_I2C_MspInit+0x19c>)
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005b20:	4b1d      	ldr	r3, [pc, #116]	; (8005b98 <HAL_I2C_MspInit+0x19c>)
 8005b22:	2280      	movs	r2, #128	; 0x80
 8005b24:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005b26:	4b1c      	ldr	r3, [pc, #112]	; (8005b98 <HAL_I2C_MspInit+0x19c>)
 8005b28:	2200      	movs	r2, #0
 8005b2a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005b2c:	4b1a      	ldr	r3, [pc, #104]	; (8005b98 <HAL_I2C_MspInit+0x19c>)
 8005b2e:	2200      	movs	r2, #0
 8005b30:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8005b32:	4b19      	ldr	r3, [pc, #100]	; (8005b98 <HAL_I2C_MspInit+0x19c>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005b38:	4b17      	ldr	r3, [pc, #92]	; (8005b98 <HAL_I2C_MspInit+0x19c>)
 8005b3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005b3e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8005b40:	4815      	ldr	r0, [pc, #84]	; (8005b98 <HAL_I2C_MspInit+0x19c>)
 8005b42:	f001 fb11 	bl	8007168 <HAL_DMA_Init>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d001      	beq.n	8005b50 <HAL_I2C_MspInit+0x154>
    {
      Error_Handler();
 8005b4c:	f7ff fac2 	bl	80050d4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a11      	ldr	r2, [pc, #68]	; (8005b98 <HAL_I2C_MspInit+0x19c>)
 8005b54:	639a      	str	r2, [r3, #56]	; 0x38
 8005b56:	4a10      	ldr	r2, [pc, #64]	; (8005b98 <HAL_I2C_MspInit+0x19c>)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	2100      	movs	r1, #0
 8005b60:	201f      	movs	r0, #31
 8005b62:	f001 fabc 	bl	80070de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005b66:	201f      	movs	r0, #31
 8005b68:	f001 fad5 	bl	8007116 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	2100      	movs	r1, #0
 8005b70:	2020      	movs	r0, #32
 8005b72:	f001 fab4 	bl	80070de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8005b76:	2020      	movs	r0, #32
 8005b78:	f001 facd 	bl	8007116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005b7c:	bf00      	nop
 8005b7e:	37b0      	adds	r7, #176	; 0xb0
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	40005400 	.word	0x40005400
 8005b88:	40021000 	.word	0x40021000
 8005b8c:	48000400 	.word	0x48000400
 8005b90:	200008a4 	.word	0x200008a4
 8005b94:	4002046c 	.word	0x4002046c
 8005b98:	200008ec 	.word	0x200008ec
 8005b9c:	4002006c 	.word	0x4002006c

08005ba0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b0a4      	sub	sp, #144	; 0x90
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005ba8:	f107 0308 	add.w	r3, r7, #8
 8005bac:	2288      	movs	r2, #136	; 0x88
 8005bae:	2100      	movs	r1, #0
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f00c fb55 	bl	8012260 <memset>
  if(hrtc->Instance==RTC)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a10      	ldr	r2, [pc, #64]	; (8005bfc <HAL_RTC_MspInit+0x5c>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d118      	bne.n	8005bf2 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005bc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005bc4:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8005bc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005bce:	f107 0308 	add.w	r3, r7, #8
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f004 fa36 	bl	800a044 <HAL_RCCEx_PeriphCLKConfig>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d001      	beq.n	8005be2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8005bde:	f7ff fa79 	bl	80050d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005be2:	4b07      	ldr	r3, [pc, #28]	; (8005c00 <HAL_RTC_MspInit+0x60>)
 8005be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005be8:	4a05      	ldr	r2, [pc, #20]	; (8005c00 <HAL_RTC_MspInit+0x60>)
 8005bea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8005bf2:	bf00      	nop
 8005bf4:	3790      	adds	r7, #144	; 0x90
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	40002800 	.word	0x40002800
 8005c00:	40021000 	.word	0x40021000

08005c04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b08c      	sub	sp, #48	; 0x30
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c0c:	f107 031c 	add.w	r3, r7, #28
 8005c10:	2200      	movs	r2, #0
 8005c12:	601a      	str	r2, [r3, #0]
 8005c14:	605a      	str	r2, [r3, #4]
 8005c16:	609a      	str	r2, [r3, #8]
 8005c18:	60da      	str	r2, [r3, #12]
 8005c1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a76      	ldr	r2, [pc, #472]	; (8005dfc <HAL_SPI_MspInit+0x1f8>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d15b      	bne.n	8005cde <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005c26:	4b76      	ldr	r3, [pc, #472]	; (8005e00 <HAL_SPI_MspInit+0x1fc>)
 8005c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c2a:	4a75      	ldr	r2, [pc, #468]	; (8005e00 <HAL_SPI_MspInit+0x1fc>)
 8005c2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005c30:	6613      	str	r3, [r2, #96]	; 0x60
 8005c32:	4b73      	ldr	r3, [pc, #460]	; (8005e00 <HAL_SPI_MspInit+0x1fc>)
 8005c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c3a:	61bb      	str	r3, [r7, #24]
 8005c3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c3e:	4b70      	ldr	r3, [pc, #448]	; (8005e00 <HAL_SPI_MspInit+0x1fc>)
 8005c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c42:	4a6f      	ldr	r2, [pc, #444]	; (8005e00 <HAL_SPI_MspInit+0x1fc>)
 8005c44:	f043 0301 	orr.w	r3, r3, #1
 8005c48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005c4a:	4b6d      	ldr	r3, [pc, #436]	; (8005e00 <HAL_SPI_MspInit+0x1fc>)
 8005c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c4e:	f003 0301 	and.w	r3, r3, #1
 8005c52:	617b      	str	r3, [r7, #20]
 8005c54:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8005c56:	23a0      	movs	r3, #160	; 0xa0
 8005c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c5a:	2302      	movs	r3, #2
 8005c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c62:	2303      	movs	r3, #3
 8005c64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005c66:	2305      	movs	r3, #5
 8005c68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c6a:	f107 031c 	add.w	r3, r7, #28
 8005c6e:	4619      	mov	r1, r3
 8005c70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005c74:	f001 fcfc 	bl	8007670 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8005c78:	4b62      	ldr	r3, [pc, #392]	; (8005e04 <HAL_SPI_MspInit+0x200>)
 8005c7a:	4a63      	ldr	r2, [pc, #396]	; (8005e08 <HAL_SPI_MspInit+0x204>)
 8005c7c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8005c7e:	4b61      	ldr	r3, [pc, #388]	; (8005e04 <HAL_SPI_MspInit+0x200>)
 8005c80:	2201      	movs	r2, #1
 8005c82:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005c84:	4b5f      	ldr	r3, [pc, #380]	; (8005e04 <HAL_SPI_MspInit+0x200>)
 8005c86:	2210      	movs	r2, #16
 8005c88:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c8a:	4b5e      	ldr	r3, [pc, #376]	; (8005e04 <HAL_SPI_MspInit+0x200>)
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005c90:	4b5c      	ldr	r3, [pc, #368]	; (8005e04 <HAL_SPI_MspInit+0x200>)
 8005c92:	2280      	movs	r2, #128	; 0x80
 8005c94:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005c96:	4b5b      	ldr	r3, [pc, #364]	; (8005e04 <HAL_SPI_MspInit+0x200>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005c9c:	4b59      	ldr	r3, [pc, #356]	; (8005e04 <HAL_SPI_MspInit+0x200>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8005ca2:	4b58      	ldr	r3, [pc, #352]	; (8005e04 <HAL_SPI_MspInit+0x200>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005ca8:	4b56      	ldr	r3, [pc, #344]	; (8005e04 <HAL_SPI_MspInit+0x200>)
 8005caa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005cae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8005cb0:	4854      	ldr	r0, [pc, #336]	; (8005e04 <HAL_SPI_MspInit+0x200>)
 8005cb2:	f001 fa59 	bl	8007168 <HAL_DMA_Init>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d001      	beq.n	8005cc0 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8005cbc:	f7ff fa0a 	bl	80050d4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a50      	ldr	r2, [pc, #320]	; (8005e04 <HAL_SPI_MspInit+0x200>)
 8005cc4:	655a      	str	r2, [r3, #84]	; 0x54
 8005cc6:	4a4f      	ldr	r2, [pc, #316]	; (8005e04 <HAL_SPI_MspInit+0x200>)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8005ccc:	2200      	movs	r2, #0
 8005cce:	2100      	movs	r1, #0
 8005cd0:	2023      	movs	r0, #35	; 0x23
 8005cd2:	f001 fa04 	bl	80070de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8005cd6:	2023      	movs	r0, #35	; 0x23
 8005cd8:	f001 fa1d 	bl	8007116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005cdc:	e08a      	b.n	8005df4 <HAL_SPI_MspInit+0x1f0>
  else if(hspi->Instance==SPI2)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a4a      	ldr	r2, [pc, #296]	; (8005e0c <HAL_SPI_MspInit+0x208>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	f040 8085 	bne.w	8005df4 <HAL_SPI_MspInit+0x1f0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005cea:	4b45      	ldr	r3, [pc, #276]	; (8005e00 <HAL_SPI_MspInit+0x1fc>)
 8005cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cee:	4a44      	ldr	r2, [pc, #272]	; (8005e00 <HAL_SPI_MspInit+0x1fc>)
 8005cf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005cf4:	6593      	str	r3, [r2, #88]	; 0x58
 8005cf6:	4b42      	ldr	r3, [pc, #264]	; (8005e00 <HAL_SPI_MspInit+0x1fc>)
 8005cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cfe:	613b      	str	r3, [r7, #16]
 8005d00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d02:	4b3f      	ldr	r3, [pc, #252]	; (8005e00 <HAL_SPI_MspInit+0x1fc>)
 8005d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d06:	4a3e      	ldr	r2, [pc, #248]	; (8005e00 <HAL_SPI_MspInit+0x1fc>)
 8005d08:	f043 0302 	orr.w	r3, r3, #2
 8005d0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005d0e:	4b3c      	ldr	r3, [pc, #240]	; (8005e00 <HAL_SPI_MspInit+0x1fc>)
 8005d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d12:	f003 0302 	and.w	r3, r3, #2
 8005d16:	60fb      	str	r3, [r7, #12]
 8005d18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005d1a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d20:	2302      	movs	r3, #2
 8005d22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d24:	2300      	movs	r3, #0
 8005d26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005d2c:	2305      	movs	r3, #5
 8005d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d30:	f107 031c 	add.w	r3, r7, #28
 8005d34:	4619      	mov	r1, r3
 8005d36:	4836      	ldr	r0, [pc, #216]	; (8005e10 <HAL_SPI_MspInit+0x20c>)
 8005d38:	f001 fc9a 	bl	8007670 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8005d3c:	4b35      	ldr	r3, [pc, #212]	; (8005e14 <HAL_SPI_MspInit+0x210>)
 8005d3e:	4a36      	ldr	r2, [pc, #216]	; (8005e18 <HAL_SPI_MspInit+0x214>)
 8005d40:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_1;
 8005d42:	4b34      	ldr	r3, [pc, #208]	; (8005e14 <HAL_SPI_MspInit+0x210>)
 8005d44:	2201      	movs	r2, #1
 8005d46:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005d48:	4b32      	ldr	r3, [pc, #200]	; (8005e14 <HAL_SPI_MspInit+0x210>)
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d4e:	4b31      	ldr	r3, [pc, #196]	; (8005e14 <HAL_SPI_MspInit+0x210>)
 8005d50:	2200      	movs	r2, #0
 8005d52:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005d54:	4b2f      	ldr	r3, [pc, #188]	; (8005e14 <HAL_SPI_MspInit+0x210>)
 8005d56:	2280      	movs	r2, #128	; 0x80
 8005d58:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005d5a:	4b2e      	ldr	r3, [pc, #184]	; (8005e14 <HAL_SPI_MspInit+0x210>)
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005d60:	4b2c      	ldr	r3, [pc, #176]	; (8005e14 <HAL_SPI_MspInit+0x210>)
 8005d62:	2200      	movs	r2, #0
 8005d64:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8005d66:	4b2b      	ldr	r3, [pc, #172]	; (8005e14 <HAL_SPI_MspInit+0x210>)
 8005d68:	2200      	movs	r2, #0
 8005d6a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8005d6c:	4b29      	ldr	r3, [pc, #164]	; (8005e14 <HAL_SPI_MspInit+0x210>)
 8005d6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005d72:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8005d74:	4827      	ldr	r0, [pc, #156]	; (8005e14 <HAL_SPI_MspInit+0x210>)
 8005d76:	f001 f9f7 	bl	8007168 <HAL_DMA_Init>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d001      	beq.n	8005d84 <HAL_SPI_MspInit+0x180>
      Error_Handler();
 8005d80:	f7ff f9a8 	bl	80050d4 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a23      	ldr	r2, [pc, #140]	; (8005e14 <HAL_SPI_MspInit+0x210>)
 8005d88:	659a      	str	r2, [r3, #88]	; 0x58
 8005d8a:	4a22      	ldr	r2, [pc, #136]	; (8005e14 <HAL_SPI_MspInit+0x210>)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8005d90:	4b22      	ldr	r3, [pc, #136]	; (8005e1c <HAL_SPI_MspInit+0x218>)
 8005d92:	4a23      	ldr	r2, [pc, #140]	; (8005e20 <HAL_SPI_MspInit+0x21c>)
 8005d94:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8005d96:	4b21      	ldr	r3, [pc, #132]	; (8005e1c <HAL_SPI_MspInit+0x218>)
 8005d98:	2201      	movs	r2, #1
 8005d9a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005d9c:	4b1f      	ldr	r3, [pc, #124]	; (8005e1c <HAL_SPI_MspInit+0x218>)
 8005d9e:	2210      	movs	r2, #16
 8005da0:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005da2:	4b1e      	ldr	r3, [pc, #120]	; (8005e1c <HAL_SPI_MspInit+0x218>)
 8005da4:	2200      	movs	r2, #0
 8005da6:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005da8:	4b1c      	ldr	r3, [pc, #112]	; (8005e1c <HAL_SPI_MspInit+0x218>)
 8005daa:	2280      	movs	r2, #128	; 0x80
 8005dac:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005dae:	4b1b      	ldr	r3, [pc, #108]	; (8005e1c <HAL_SPI_MspInit+0x218>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005db4:	4b19      	ldr	r3, [pc, #100]	; (8005e1c <HAL_SPI_MspInit+0x218>)
 8005db6:	2200      	movs	r2, #0
 8005db8:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8005dba:	4b18      	ldr	r3, [pc, #96]	; (8005e1c <HAL_SPI_MspInit+0x218>)
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005dc0:	4b16      	ldr	r3, [pc, #88]	; (8005e1c <HAL_SPI_MspInit+0x218>)
 8005dc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005dc6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8005dc8:	4814      	ldr	r0, [pc, #80]	; (8005e1c <HAL_SPI_MspInit+0x218>)
 8005dca:	f001 f9cd 	bl	8007168 <HAL_DMA_Init>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d001      	beq.n	8005dd8 <HAL_SPI_MspInit+0x1d4>
      Error_Handler();
 8005dd4:	f7ff f97e 	bl	80050d4 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a10      	ldr	r2, [pc, #64]	; (8005e1c <HAL_SPI_MspInit+0x218>)
 8005ddc:	655a      	str	r2, [r3, #84]	; 0x54
 8005dde:	4a0f      	ldr	r2, [pc, #60]	; (8005e1c <HAL_SPI_MspInit+0x218>)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8005de4:	2200      	movs	r2, #0
 8005de6:	2100      	movs	r1, #0
 8005de8:	2024      	movs	r0, #36	; 0x24
 8005dea:	f001 f978 	bl	80070de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8005dee:	2024      	movs	r0, #36	; 0x24
 8005df0:	f001 f991 	bl	8007116 <HAL_NVIC_EnableIRQ>
}
 8005df4:	bf00      	nop
 8005df6:	3730      	adds	r7, #48	; 0x30
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	40013000 	.word	0x40013000
 8005e00:	40021000 	.word	0x40021000
 8005e04:	20000a20 	.word	0x20000a20
 8005e08:	40020030 	.word	0x40020030
 8005e0c:	40003800 	.word	0x40003800
 8005e10:	48000400 	.word	0x48000400
 8005e14:	20000a68 	.word	0x20000a68
 8005e18:	40020044 	.word	0x40020044
 8005e1c:	20000ab0 	.word	0x20000ab0
 8005e20:	40020058 	.word	0x40020058

08005e24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a0d      	ldr	r2, [pc, #52]	; (8005e68 <HAL_TIM_Base_MspInit+0x44>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d113      	bne.n	8005e5e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005e36:	4b0d      	ldr	r3, [pc, #52]	; (8005e6c <HAL_TIM_Base_MspInit+0x48>)
 8005e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e3a:	4a0c      	ldr	r2, [pc, #48]	; (8005e6c <HAL_TIM_Base_MspInit+0x48>)
 8005e3c:	f043 0304 	orr.w	r3, r3, #4
 8005e40:	6593      	str	r3, [r2, #88]	; 0x58
 8005e42:	4b0a      	ldr	r3, [pc, #40]	; (8005e6c <HAL_TIM_Base_MspInit+0x48>)
 8005e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e46:	f003 0304 	and.w	r3, r3, #4
 8005e4a:	60fb      	str	r3, [r7, #12]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 8005e4e:	2200      	movs	r2, #0
 8005e50:	2102      	movs	r1, #2
 8005e52:	201e      	movs	r0, #30
 8005e54:	f001 f943 	bl	80070de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005e58:	201e      	movs	r0, #30
 8005e5a:	f001 f95c 	bl	8007116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005e5e:	bf00      	nop
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	40000800 	.word	0x40000800
 8005e6c:	40021000 	.word	0x40021000

08005e70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b0ac      	sub	sp, #176	; 0xb0
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e78:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	601a      	str	r2, [r3, #0]
 8005e80:	605a      	str	r2, [r3, #4]
 8005e82:	609a      	str	r2, [r3, #8]
 8005e84:	60da      	str	r2, [r3, #12]
 8005e86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005e88:	f107 0314 	add.w	r3, r7, #20
 8005e8c:	2288      	movs	r2, #136	; 0x88
 8005e8e:	2100      	movs	r1, #0
 8005e90:	4618      	mov	r0, r3
 8005e92:	f00c f9e5 	bl	8012260 <memset>
  if(huart->Instance==USART2)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a3a      	ldr	r2, [pc, #232]	; (8005f84 <HAL_UART_MspInit+0x114>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d16d      	bne.n	8005f7c <HAL_UART_MspInit+0x10c>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005ea8:	f107 0314 	add.w	r3, r7, #20
 8005eac:	4618      	mov	r0, r3
 8005eae:	f004 f8c9 	bl	800a044 <HAL_RCCEx_PeriphCLKConfig>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d001      	beq.n	8005ebc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005eb8:	f7ff f90c 	bl	80050d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005ebc:	4b32      	ldr	r3, [pc, #200]	; (8005f88 <HAL_UART_MspInit+0x118>)
 8005ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ec0:	4a31      	ldr	r2, [pc, #196]	; (8005f88 <HAL_UART_MspInit+0x118>)
 8005ec2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ec6:	6593      	str	r3, [r2, #88]	; 0x58
 8005ec8:	4b2f      	ldr	r3, [pc, #188]	; (8005f88 <HAL_UART_MspInit+0x118>)
 8005eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ed0:	613b      	str	r3, [r7, #16]
 8005ed2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ed4:	4b2c      	ldr	r3, [pc, #176]	; (8005f88 <HAL_UART_MspInit+0x118>)
 8005ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ed8:	4a2b      	ldr	r2, [pc, #172]	; (8005f88 <HAL_UART_MspInit+0x118>)
 8005eda:	f043 0301 	orr.w	r3, r3, #1
 8005ede:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005ee0:	4b29      	ldr	r3, [pc, #164]	; (8005f88 <HAL_UART_MspInit+0x118>)
 8005ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ee4:	f003 0301 	and.w	r3, r3, #1
 8005ee8:	60fb      	str	r3, [r7, #12]
 8005eea:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = LOG_TX_Pin|LOG_RX_Pin;
 8005eec:	230c      	movs	r3, #12
 8005eee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005efe:	2303      	movs	r3, #3
 8005f00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005f04:	2307      	movs	r3, #7
 8005f06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f0a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005f0e:	4619      	mov	r1, r3
 8005f10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005f14:	f001 fbac 	bl	8007670 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8005f18:	4b1c      	ldr	r3, [pc, #112]	; (8005f8c <HAL_UART_MspInit+0x11c>)
 8005f1a:	4a1d      	ldr	r2, [pc, #116]	; (8005f90 <HAL_UART_MspInit+0x120>)
 8005f1c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8005f1e:	4b1b      	ldr	r3, [pc, #108]	; (8005f8c <HAL_UART_MspInit+0x11c>)
 8005f20:	2202      	movs	r2, #2
 8005f22:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005f24:	4b19      	ldr	r3, [pc, #100]	; (8005f8c <HAL_UART_MspInit+0x11c>)
 8005f26:	2210      	movs	r2, #16
 8005f28:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f2a:	4b18      	ldr	r3, [pc, #96]	; (8005f8c <HAL_UART_MspInit+0x11c>)
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005f30:	4b16      	ldr	r3, [pc, #88]	; (8005f8c <HAL_UART_MspInit+0x11c>)
 8005f32:	2280      	movs	r2, #128	; 0x80
 8005f34:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005f36:	4b15      	ldr	r3, [pc, #84]	; (8005f8c <HAL_UART_MspInit+0x11c>)
 8005f38:	2200      	movs	r2, #0
 8005f3a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005f3c:	4b13      	ldr	r3, [pc, #76]	; (8005f8c <HAL_UART_MspInit+0x11c>)
 8005f3e:	2200      	movs	r2, #0
 8005f40:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005f42:	4b12      	ldr	r3, [pc, #72]	; (8005f8c <HAL_UART_MspInit+0x11c>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005f48:	4b10      	ldr	r3, [pc, #64]	; (8005f8c <HAL_UART_MspInit+0x11c>)
 8005f4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005f4e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005f50:	480e      	ldr	r0, [pc, #56]	; (8005f8c <HAL_UART_MspInit+0x11c>)
 8005f52:	f001 f909 	bl	8007168 <HAL_DMA_Init>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d001      	beq.n	8005f60 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8005f5c:	f7ff f8ba 	bl	80050d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a0a      	ldr	r2, [pc, #40]	; (8005f8c <HAL_UART_MspInit+0x11c>)
 8005f64:	66da      	str	r2, [r3, #108]	; 0x6c
 8005f66:	4a09      	ldr	r2, [pc, #36]	; (8005f8c <HAL_UART_MspInit+0x11c>)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	2101      	movs	r1, #1
 8005f70:	2026      	movs	r0, #38	; 0x26
 8005f72:	f001 f8b4 	bl	80070de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005f76:	2026      	movs	r0, #38	; 0x26
 8005f78:	f001 f8cd 	bl	8007116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005f7c:	bf00      	nop
 8005f7e:	37b0      	adds	r7, #176	; 0xb0
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	40004400 	.word	0x40004400
 8005f88:	40021000 	.word	0x40021000
 8005f8c:	20000bc8 	.word	0x20000bc8
 8005f90:	40020080 	.word	0x40020080

08005f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005f94:	b480      	push	{r7}
 8005f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005f98:	e7fe      	b.n	8005f98 <NMI_Handler+0x4>

08005f9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005f9e:	e7fe      	b.n	8005f9e <HardFault_Handler+0x4>

08005fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005fa4:	e7fe      	b.n	8005fa4 <MemManage_Handler+0x4>

08005fa6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005faa:	e7fe      	b.n	8005faa <BusFault_Handler+0x4>

08005fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005fac:	b480      	push	{r7}
 8005fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005fb0:	e7fe      	b.n	8005fb0 <UsageFault_Handler+0x4>

08005fb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005fb6:	bf00      	nop
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005fc4:	bf00      	nop
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr

08005fce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005fce:	b480      	push	{r7}
 8005fd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005fd2:	bf00      	nop
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005fe0:	f000 ff3a 	bl	8006e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005fe4:	bf00      	nop
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY0_Pin);
 8005fec:	2002      	movs	r0, #2
 8005fee:	f001 fd33 	bl	8007a58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8005ff2:	bf00      	nop
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY1_Pin);
 8005ffa:	2004      	movs	r0, #4
 8005ffc:	f001 fd2c 	bl	8007a58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8006000:	bf00      	nop
 8006002:	bd80      	pop	{r7, pc}

08006004 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8006008:	4802      	ldr	r0, [pc, #8]	; (8006014 <DMA1_Channel3_IRQHandler+0x10>)
 800600a:	f001 fa44 	bl	8007496 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800600e:	bf00      	nop
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	20000a20 	.word	0x20000a20

08006018 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800601c:	4802      	ldr	r0, [pc, #8]	; (8006028 <DMA1_Channel4_IRQHandler+0x10>)
 800601e:	f001 fa3a 	bl	8007496 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8006022:	bf00      	nop
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	20000a68 	.word	0x20000a68

0800602c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8006030:	4802      	ldr	r0, [pc, #8]	; (800603c <DMA1_Channel5_IRQHandler+0x10>)
 8006032:	f001 fa30 	bl	8007496 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8006036:	bf00      	nop
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	20000ab0 	.word	0x20000ab0

08006040 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8006044:	4802      	ldr	r0, [pc, #8]	; (8006050 <DMA1_Channel6_IRQHandler+0x10>)
 8006046:	f001 fa26 	bl	8007496 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800604a:	bf00      	nop
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	200008ec 	.word	0x200008ec

08006054 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8006058:	4802      	ldr	r0, [pc, #8]	; (8006064 <DMA1_Channel7_IRQHandler+0x10>)
 800605a:	f001 fa1c 	bl	8007496 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800605e:	bf00      	nop
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	20000bc8 	.word	0x20000bc8

08006068 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800606c:	4802      	ldr	r0, [pc, #8]	; (8006078 <TIM4_IRQHandler+0x10>)
 800606e:	f006 fcc0 	bl	800c9f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8006072:	bf00      	nop
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	20000af8 	.word	0x20000af8

0800607c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8006080:	4802      	ldr	r0, [pc, #8]	; (800608c <I2C1_EV_IRQHandler+0x10>)
 8006082:	f002 f8b3 	bl	80081ec <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8006086:	bf00      	nop
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	20000850 	.word	0x20000850

08006090 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8006094:	4802      	ldr	r0, [pc, #8]	; (80060a0 <I2C1_ER_IRQHandler+0x10>)
 8006096:	f002 f8c3 	bl	8008220 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800609a:	bf00      	nop
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	20000850 	.word	0x20000850

080060a4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80060a8:	4802      	ldr	r0, [pc, #8]	; (80060b4 <SPI1_IRQHandler+0x10>)
 80060aa:	f005 ff75 	bl	800bf98 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80060ae:	bf00      	nop
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	20000958 	.word	0x20000958

080060b8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80060bc:	4802      	ldr	r0, [pc, #8]	; (80060c8 <SPI2_IRQHandler+0x10>)
 80060be:	f005 ff6b 	bl	800bf98 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80060c2:	bf00      	nop
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	200009bc 	.word	0x200009bc

080060cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80060d0:	4802      	ldr	r0, [pc, #8]	; (80060dc <USART2_IRQHandler+0x10>)
 80060d2:	f007 f9ad 	bl	800d430 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80060d6:	bf00      	nop
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	20000b44 	.word	0x20000b44

080060e0 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80060e4:	4802      	ldr	r0, [pc, #8]	; (80060f0 <DMA2_Channel6_IRQHandler+0x10>)
 80060e6:	f001 f9d6 	bl	8007496 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 80060ea:	bf00      	nop
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	200008a4 	.word	0x200008a4

080060f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80060f4:	b480      	push	{r7}
 80060f6:	af00      	add	r7, sp, #0
	return 1;
 80060f8:	2301      	movs	r3, #1
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <_kill>:

int _kill(int pid, int sig)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800610e:	f00b ffc3 	bl	8012098 <__errno>
 8006112:	4603      	mov	r3, r0
 8006114:	2216      	movs	r2, #22
 8006116:	601a      	str	r2, [r3, #0]
	return -1;
 8006118:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800611c:	4618      	mov	r0, r3
 800611e:	3708      	adds	r7, #8
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <_exit>:

void _exit (int status)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800612c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f7ff ffe7 	bl	8006104 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006136:	e7fe      	b.n	8006136 <_exit+0x12>

08006138 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b086      	sub	sp, #24
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006144:	2300      	movs	r3, #0
 8006146:	617b      	str	r3, [r7, #20]
 8006148:	e00a      	b.n	8006160 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800614a:	f3af 8000 	nop.w
 800614e:	4601      	mov	r1, r0
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	1c5a      	adds	r2, r3, #1
 8006154:	60ba      	str	r2, [r7, #8]
 8006156:	b2ca      	uxtb	r2, r1
 8006158:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	3301      	adds	r3, #1
 800615e:	617b      	str	r3, [r7, #20]
 8006160:	697a      	ldr	r2, [r7, #20]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	429a      	cmp	r2, r3
 8006166:	dbf0      	blt.n	800614a <_read+0x12>
	}

return len;
 8006168:	687b      	ldr	r3, [r7, #4]
}
 800616a:	4618      	mov	r0, r3
 800616c:	3718      	adds	r7, #24
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006172:	b580      	push	{r7, lr}
 8006174:	b086      	sub	sp, #24
 8006176:	af00      	add	r7, sp, #0
 8006178:	60f8      	str	r0, [r7, #12]
 800617a:	60b9      	str	r1, [r7, #8]
 800617c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800617e:	2300      	movs	r3, #0
 8006180:	617b      	str	r3, [r7, #20]
 8006182:	e009      	b.n	8006198 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	1c5a      	adds	r2, r3, #1
 8006188:	60ba      	str	r2, [r7, #8]
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	4618      	mov	r0, r3
 800618e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	3301      	adds	r3, #1
 8006196:	617b      	str	r3, [r7, #20]
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	429a      	cmp	r2, r3
 800619e:	dbf1      	blt.n	8006184 <_write+0x12>
	}
	return len;
 80061a0:	687b      	ldr	r3, [r7, #4]
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3718      	adds	r7, #24
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <_close>:

int _close(int file)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b083      	sub	sp, #12
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
	return -1;
 80061b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr

080061c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80061c2:	b480      	push	{r7}
 80061c4:	b083      	sub	sp, #12
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
 80061ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80061d2:	605a      	str	r2, [r3, #4]
	return 0;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	370c      	adds	r7, #12
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr

080061e2 <_isatty>:

int _isatty(int file)
{
 80061e2:	b480      	push	{r7}
 80061e4:	b083      	sub	sp, #12
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
	return 1;
 80061ea:	2301      	movs	r3, #1
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b085      	sub	sp, #20
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	607a      	str	r2, [r7, #4]
	return 0;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3714      	adds	r7, #20
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
	...

08006214 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b086      	sub	sp, #24
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800621c:	4a14      	ldr	r2, [pc, #80]	; (8006270 <_sbrk+0x5c>)
 800621e:	4b15      	ldr	r3, [pc, #84]	; (8006274 <_sbrk+0x60>)
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006228:	4b13      	ldr	r3, [pc, #76]	; (8006278 <_sbrk+0x64>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d102      	bne.n	8006236 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006230:	4b11      	ldr	r3, [pc, #68]	; (8006278 <_sbrk+0x64>)
 8006232:	4a12      	ldr	r2, [pc, #72]	; (800627c <_sbrk+0x68>)
 8006234:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006236:	4b10      	ldr	r3, [pc, #64]	; (8006278 <_sbrk+0x64>)
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4413      	add	r3, r2
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	429a      	cmp	r2, r3
 8006242:	d207      	bcs.n	8006254 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006244:	f00b ff28 	bl	8012098 <__errno>
 8006248:	4603      	mov	r3, r0
 800624a:	220c      	movs	r2, #12
 800624c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800624e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006252:	e009      	b.n	8006268 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006254:	4b08      	ldr	r3, [pc, #32]	; (8006278 <_sbrk+0x64>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800625a:	4b07      	ldr	r3, [pc, #28]	; (8006278 <_sbrk+0x64>)
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4413      	add	r3, r2
 8006262:	4a05      	ldr	r2, [pc, #20]	; (8006278 <_sbrk+0x64>)
 8006264:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006266:	68fb      	ldr	r3, [r7, #12]
}
 8006268:	4618      	mov	r0, r3
 800626a:	3718      	adds	r7, #24
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	20018000 	.word	0x20018000
 8006274:	00000c00 	.word	0x00000c00
 8006278:	200040b8 	.word	0x200040b8
 800627c:	20004240 	.word	0x20004240

08006280 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8006280:	b480      	push	{r7}
 8006282:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8006284:	4b06      	ldr	r3, [pc, #24]	; (80062a0 <SystemInit+0x20>)
 8006286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800628a:	4a05      	ldr	r2, [pc, #20]	; (80062a0 <SystemInit+0x20>)
 800628c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006290:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8006294:	bf00      	nop
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	e000ed00 	.word	0xe000ed00

080062a4 <W25_SELECT>:

extern void Report(const uint8_t addTime, const char *fmt, ...);

//------------------------------------------------------------------------------------------

void W25_SELECT()   { W25_SEL(); } //HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_RESET);//set to 0
 80062a4:	b580      	push	{r7, lr}
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	2200      	movs	r2, #0
 80062aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80062ae:	4802      	ldr	r0, [pc, #8]	; (80062b8 <W25_SELECT+0x14>)
 80062b0:	f001 fba0 	bl	80079f4 <HAL_GPIO_WritePin>
 80062b4:	bf00      	nop
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	48000400 	.word	0x48000400

080062bc <W25_UNSELECT>:
void W25_UNSELECT() { W25_UNSEL(); } //HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_SET);//set to 1
 80062bc:	b580      	push	{r7, lr}
 80062be:	af00      	add	r7, sp, #0
 80062c0:	2201      	movs	r2, #1
 80062c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80062c6:	4802      	ldr	r0, [pc, #8]	; (80062d0 <W25_UNSELECT+0x14>)
 80062c8:	f001 fb94 	bl	80079f4 <HAL_GPIO_WritePin>
 80062cc:	bf00      	nop
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	48000400 	.word	0x48000400

080062d4 <W25qxx_Spi>:
//void W25_SELECT()   { HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_RESET); }//set to 0
//void W25_UNSELECT() { HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_SET); }//set to 1

//------------------------------------------------------------------------------------------
uint8_t W25qxx_Spi(uint8_t Data)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b086      	sub	sp, #24
 80062d8:	af02      	add	r7, sp, #8
 80062da:	4603      	mov	r3, r0
 80062dc:	71fb      	strb	r3, [r7, #7]
uint8_t ret;

    HAL_SPI_TransmitReceive(portFLASH, &Data, &ret, 1, min_wait_ms);//HAL_MAX_DELAY);
 80062de:	4b07      	ldr	r3, [pc, #28]	; (80062fc <W25qxx_Spi+0x28>)
 80062e0:	6818      	ldr	r0, [r3, #0]
 80062e2:	23fa      	movs	r3, #250	; 0xfa
 80062e4:	f107 020f 	add.w	r2, r7, #15
 80062e8:	1df9      	adds	r1, r7, #7
 80062ea:	9300      	str	r3, [sp, #0]
 80062ec:	2301      	movs	r3, #1
 80062ee:	f005 f9c0 	bl	800b672 <HAL_SPI_TransmitReceive>

    return ret;
 80062f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3710      	adds	r7, #16
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	2000000c 	.word	0x2000000c

08006300 <W25qxx_Reset>:
//------------------------------------------------------------------------------------------
void W25qxx_Reset(void)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	af00      	add	r7, sp, #0
	W25qxx_Delay(100);
 8006304:	2064      	movs	r0, #100	; 0x64
 8006306:	f000 fdc7 	bl	8006e98 <HAL_Delay>

	W25_SELECT();
 800630a:	f7ff ffcb 	bl	80062a4 <W25_SELECT>
		W25qxx_Spi(EN_RESET);
 800630e:	2066      	movs	r0, #102	; 0x66
 8006310:	f7ff ffe0 	bl	80062d4 <W25qxx_Spi>
		W25qxx_Spi(CHIP_RESET);
 8006314:	2099      	movs	r0, #153	; 0x99
 8006316:	f7ff ffdd 	bl	80062d4 <W25qxx_Spi>
	W25_UNSELECT();
 800631a:	f7ff ffcf 	bl	80062bc <W25_UNSELECT>

	W25qxx_Delay(100);
 800631e:	2064      	movs	r0, #100	; 0x64
 8006320:	f000 fdba 	bl	8006e98 <HAL_Delay>
}
 8006324:	bf00      	nop
 8006326:	bd80      	pop	{r7, pc}

08006328 <W25qxx_ReadID>:
//------------------------------------------------------------------------------------------
uint32_t W25qxx_ReadID(void)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
uint32_t Temp[3] = {0};
 800632e:	1d3b      	adds	r3, r7, #4
 8006330:	2200      	movs	r2, #0
 8006332:	601a      	str	r2, [r3, #0]
 8006334:	605a      	str	r2, [r3, #4]
 8006336:	609a      	str	r2, [r3, #8]

    W25_SELECT();//set to 0
 8006338:	f7ff ffb4 	bl	80062a4 <W25_SELECT>

    W25qxx_Spi(JEDEC_ID);
 800633c:	209f      	movs	r0, #159	; 0x9f
 800633e:	f7ff ffc9 	bl	80062d4 <W25qxx_Spi>
    Temp[0] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8006342:	20a5      	movs	r0, #165	; 0xa5
 8006344:	f7ff ffc6 	bl	80062d4 <W25qxx_Spi>
 8006348:	4603      	mov	r3, r0
 800634a:	607b      	str	r3, [r7, #4]
    Temp[1] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800634c:	20a5      	movs	r0, #165	; 0xa5
 800634e:	f7ff ffc1 	bl	80062d4 <W25qxx_Spi>
 8006352:	4603      	mov	r3, r0
 8006354:	60bb      	str	r3, [r7, #8]
    Temp[2] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8006356:	20a5      	movs	r0, #165	; 0xa5
 8006358:	f7ff ffbc 	bl	80062d4 <W25qxx_Spi>
 800635c:	4603      	mov	r3, r0
 800635e:	60fb      	str	r3, [r7, #12]

    W25_UNSELECT();//set to 1
 8006360:	f7ff ffac 	bl	80062bc <W25_UNSELECT>

    return ((Temp[0] << 16) | (Temp[1] << 8) | Temp[2]);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	041a      	lsls	r2, r3, #16
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	021b      	lsls	r3, r3, #8
 800636c:	431a      	orrs	r2, r3
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	4313      	orrs	r3, r2
}
 8006372:	4618      	mov	r0, r3
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
	...

0800637c <W25qxx_ReadUniqID>:
//------------------------------------------------------------------------------------------
void W25qxx_ReadUniqID(void)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
	uint8_t dat[] = {READ_UID, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE};
 8006382:	4a0e      	ldr	r2, [pc, #56]	; (80063bc <W25qxx_ReadUniqID+0x40>)
 8006384:	463b      	mov	r3, r7
 8006386:	e892 0003 	ldmia.w	r2, {r0, r1}
 800638a:	6018      	str	r0, [r3, #0]
 800638c:	3304      	adds	r3, #4
 800638e:	7019      	strb	r1, [r3, #0]
    W25_SELECT();
 8006390:	f7ff ff88 	bl	80062a4 <W25_SELECT>

    //W25qxx_Spi(READ_UID);
    //for (uint8_t i = 0; i < 4; i++) W25qxx_Spi(W25QXX_DUMMY_BYTE);
    //for (uint8_t i = 0; i < 8; i++) w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
    HAL_SPI_Transmit(portFLASH, dat, sizeof(dat), min_wait_ms);
 8006394:	4b0a      	ldr	r3, [pc, #40]	; (80063c0 <W25qxx_ReadUniqID+0x44>)
 8006396:	6818      	ldr	r0, [r3, #0]
 8006398:	23fa      	movs	r3, #250	; 0xfa
 800639a:	4639      	mov	r1, r7
 800639c:	2205      	movs	r2, #5
 800639e:	f004 feca 	bl	800b136 <HAL_SPI_Transmit>
    HAL_SPI_Receive(portFLASH, w25qxx.UniqID, 8, min_wait_ms);
 80063a2:	4b07      	ldr	r3, [pc, #28]	; (80063c0 <W25qxx_ReadUniqID+0x44>)
 80063a4:	6818      	ldr	r0, [r3, #0]
 80063a6:	23fa      	movs	r3, #250	; 0xfa
 80063a8:	2208      	movs	r2, #8
 80063aa:	4906      	ldr	r1, [pc, #24]	; (80063c4 <W25qxx_ReadUniqID+0x48>)
 80063ac:	f005 f831 	bl	800b412 <HAL_SPI_Receive>

    W25_UNSELECT();
 80063b0:	f7ff ff84 	bl	80062bc <W25_UNSELECT>
}
 80063b4:	bf00      	nop
 80063b6:	3708      	adds	r7, #8
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	08017240 	.word	0x08017240
 80063c0:	2000000c 	.word	0x2000000c
 80063c4:	200040bd 	.word	0x200040bd

080063c8 <W25qxx_WriteEnable>:
//------------------------------------------------------------------------------------------
void W25qxx_WriteEnable(void)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	af00      	add	r7, sp, #0
    W25_SELECT();
 80063cc:	f7ff ff6a 	bl	80062a4 <W25_SELECT>

    W25qxx_Spi(WRITE_ENABLE);
 80063d0:	2006      	movs	r0, #6
 80063d2:	f7ff ff7f 	bl	80062d4 <W25qxx_Spi>

    W25_UNSELECT();
 80063d6:	f7ff ff71 	bl	80062bc <W25_UNSELECT>

    W25qxx_Delay(1);
 80063da:	2001      	movs	r0, #1
 80063dc:	f000 fd5c 	bl	8006e98 <HAL_Delay>
}
 80063e0:	bf00      	nop
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <W25qxx_ReadStatusRegister>:

    W25qxx_Delay(1);
}
//------------------------------------------------------------------------------------------
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusReg)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	4603      	mov	r3, r0
 80063ec:	71fb      	strb	r3, [r7, #7]
uint8_t status = 0;
 80063ee:	2300      	movs	r3, #0
 80063f0:	73fb      	strb	r3, [r7, #15]

    W25_SELECT();
 80063f2:	f7ff ff57 	bl	80062a4 <W25_SELECT>

    switch (SelectStatusReg) {
 80063f6:	79fb      	ldrb	r3, [r7, #7]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d002      	beq.n	8006402 <W25qxx_ReadStatusRegister+0x1e>
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d00d      	beq.n	800641c <W25qxx_ReadStatusRegister+0x38>
 8006400:	e019      	b.n	8006436 <W25qxx_ReadStatusRegister+0x52>
        case 1:
            W25qxx_Spi(READ_STAT_REG1);
 8006402:	2005      	movs	r0, #5
 8006404:	f7ff ff66 	bl	80062d4 <W25qxx_Spi>
            status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8006408:	20a5      	movs	r0, #165	; 0xa5
 800640a:	f7ff ff63 	bl	80062d4 <W25qxx_Spi>
 800640e:	4603      	mov	r3, r0
 8006410:	73fb      	strb	r3, [r7, #15]
            w25qxx.StatusRegister1 = status;
 8006412:	4a12      	ldr	r2, [pc, #72]	; (800645c <W25qxx_ReadStatusRegister+0x78>)
 8006414:	7bfb      	ldrb	r3, [r7, #15]
 8006416:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
        break;
 800641a:	e018      	b.n	800644e <W25qxx_ReadStatusRegister+0x6a>
        case 2:
            W25qxx_Spi(READ_STAT_REG2);
 800641c:	2035      	movs	r0, #53	; 0x35
 800641e:	f7ff ff59 	bl	80062d4 <W25qxx_Spi>
            status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8006422:	20a5      	movs	r0, #165	; 0xa5
 8006424:	f7ff ff56 	bl	80062d4 <W25qxx_Spi>
 8006428:	4603      	mov	r3, r0
 800642a:	73fb      	strb	r3, [r7, #15]
            w25qxx.StatusRegister2 = status;
 800642c:	4a0b      	ldr	r2, [pc, #44]	; (800645c <W25qxx_ReadStatusRegister+0x78>)
 800642e:	7bfb      	ldrb	r3, [r7, #15]
 8006430:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
        break;
 8006434:	e00b      	b.n	800644e <W25qxx_ReadStatusRegister+0x6a>
        default : {
            W25qxx_Spi(READ_STAT_REG3);
 8006436:	2015      	movs	r0, #21
 8006438:	f7ff ff4c 	bl	80062d4 <W25qxx_Spi>
            status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800643c:	20a5      	movs	r0, #165	; 0xa5
 800643e:	f7ff ff49 	bl	80062d4 <W25qxx_Spi>
 8006442:	4603      	mov	r3, r0
 8006444:	73fb      	strb	r3, [r7, #15]
            w25qxx.StatusRegister3 = status;
 8006446:	4a05      	ldr	r2, [pc, #20]	; (800645c <W25qxx_ReadStatusRegister+0x78>)
 8006448:	7bfb      	ldrb	r3, [r7, #15]
 800644a:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
        }
    }

    W25_UNSELECT();
 800644e:	f7ff ff35 	bl	80062bc <W25_UNSELECT>

    return status;
 8006452:	7bfb      	ldrb	r3, [r7, #15]
}
 8006454:	4618      	mov	r0, r3
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	200040bc 	.word	0x200040bc

08006460 <W25qxx_WaitForWriteEnd>:

    W25_UNSELECT();
}
//------------------------------------------------------------------------------------------
void W25qxx_WaitForWriteEnd(void)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	af00      	add	r7, sp, #0
    W25qxx_Delay(1);
 8006464:	2001      	movs	r0, #1
 8006466:	f000 fd17 	bl	8006e98 <HAL_Delay>

    W25_SELECT();
 800646a:	f7ff ff1b 	bl	80062a4 <W25_SELECT>

    W25qxx_Spi(READ_STAT_REG1);
 800646e:	2005      	movs	r0, #5
 8006470:	f7ff ff30 	bl	80062d4 <W25qxx_Spi>
    do
    {
        w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8006474:	20a5      	movs	r0, #165	; 0xa5
 8006476:	f7ff ff2d 	bl	80062d4 <W25qxx_Spi>
 800647a:	4603      	mov	r3, r0
 800647c:	461a      	mov	r2, r3
 800647e:	4b08      	ldr	r3, [pc, #32]	; (80064a0 <W25qxx_WaitForWriteEnd+0x40>)
 8006480:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        W25qxx_Delay(1);
 8006484:	2001      	movs	r0, #1
 8006486:	f000 fd07 	bl	8006e98 <HAL_Delay>
    } while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 800648a:	4b05      	ldr	r3, [pc, #20]	; (80064a0 <W25qxx_WaitForWriteEnd+0x40>)
 800648c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006490:	f003 0301 	and.w	r3, r3, #1
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1ed      	bne.n	8006474 <W25qxx_WaitForWriteEnd+0x14>

    W25_UNSELECT();
 8006498:	f7ff ff10 	bl	80062bc <W25_UNSELECT>
}
 800649c:	bf00      	nop
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	200040bc 	.word	0x200040bc

080064a4 <W25qxx_Init>:
//------------------------------------------------------------------------------------------
bool W25qxx_Init(void)
{
 80064a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064a6:	b089      	sub	sp, #36	; 0x24
 80064a8:	af06      	add	r7, sp, #24

	W25qxx_Reset();
 80064aa:	f7ff ff29 	bl	8006300 <W25qxx_Reset>


    w25qxx.Lock = 1;
 80064ae:	4b54      	ldr	r3, [pc, #336]	; (8006600 <W25qxx_Init+0x15c>)
 80064b0:	2201      	movs	r2, #1
 80064b2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    bool ret = false;
 80064b6:	2300      	movs	r3, #0
 80064b8:	71fb      	strb	r3, [r7, #7]

    W25_UNSELECT();
 80064ba:	f7ff feff 	bl	80062bc <W25_UNSELECT>

    uint32_t id = W25qxx_ReadID() & 0xffff;
 80064be:	f7ff ff33 	bl	8006328 <W25qxx_ReadID>
 80064c2:	4603      	mov	r3, r0
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	603b      	str	r3, [r7, #0]
//#ifdef W25QXX_DEBUG
    Report(1, "w25qxx Init Begin... Chip ID:0x%X\r\n", id);
 80064c8:	683a      	ldr	r2, [r7, #0]
 80064ca:	494e      	ldr	r1, [pc, #312]	; (8006604 <W25qxx_Init+0x160>)
 80064cc:	2001      	movs	r0, #1
 80064ce:	f7fe fa17 	bl	8004900 <Report>
//#endif
    id &= 0xff;
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	603b      	str	r3, [r7, #0]
    id -= 0x10;//0x4010;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	3b10      	subs	r3, #16
 80064dc:	603b      	str	r3, [r7, #0]
    if (id > 0x0a) id = 0;
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	2b0a      	cmp	r3, #10
 80064e2:	d901      	bls.n	80064e8 <W25qxx_Init+0x44>
 80064e4:	2300      	movs	r3, #0
 80064e6:	603b      	str	r3, [r7, #0]
    w25qxx.ID         = id;              //W25Q10..W25Q512
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	b2da      	uxtb	r2, r3
 80064ec:	4b44      	ldr	r3, [pc, #272]	; (8006600 <W25qxx_Init+0x15c>)
 80064ee:	701a      	strb	r2, [r3, #0]
    w25qxx.BlockCount = all_chipBLK[id]; //0..1024;
 80064f0:	4a45      	ldr	r2, [pc, #276]	; (8006608 <W25qxx_Init+0x164>)
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064f8:	4a41      	ldr	r2, [pc, #260]	; (8006600 <W25qxx_Init+0x15c>)
 80064fa:	f8c2 301b 	str.w	r3, [r2, #27]
//#ifdef W25QXX_DEBUG
    Report(1, "Chip %s\r\n", all_chipID[id]);
 80064fe:	4a43      	ldr	r2, [pc, #268]	; (800660c <W25qxx_Init+0x168>)
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006506:	461a      	mov	r2, r3
 8006508:	4941      	ldr	r1, [pc, #260]	; (8006610 <W25qxx_Init+0x16c>)
 800650a:	2001      	movs	r0, #1
 800650c:	f7fe f9f8 	bl	8004900 <Report>
//#endif

    if (id) {
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d06b      	beq.n	80065ee <W25qxx_Init+0x14a>
    	w25qxx.PageSize = 256;
 8006516:	4b3a      	ldr	r3, [pc, #232]	; (8006600 <W25qxx_Init+0x15c>)
 8006518:	2200      	movs	r2, #0
 800651a:	725a      	strb	r2, [r3, #9]
 800651c:	2200      	movs	r2, #0
 800651e:	f042 0201 	orr.w	r2, r2, #1
 8006522:	729a      	strb	r2, [r3, #10]
    	w25qxx.SectorSize = 0x1000;
 8006524:	4b36      	ldr	r3, [pc, #216]	; (8006600 <W25qxx_Init+0x15c>)
 8006526:	2200      	movs	r2, #0
 8006528:	73da      	strb	r2, [r3, #15]
 800652a:	2200      	movs	r2, #0
 800652c:	f042 0210 	orr.w	r2, r2, #16
 8006530:	741a      	strb	r2, [r3, #16]
 8006532:	2200      	movs	r2, #0
 8006534:	745a      	strb	r2, [r3, #17]
 8006536:	2200      	movs	r2, #0
 8006538:	749a      	strb	r2, [r3, #18]
    	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 800653a:	4b31      	ldr	r3, [pc, #196]	; (8006600 <W25qxx_Init+0x15c>)
 800653c:	f8d3 301b 	ldr.w	r3, [r3, #27]
 8006540:	011b      	lsls	r3, r3, #4
 8006542:	4a2f      	ldr	r2, [pc, #188]	; (8006600 <W25qxx_Init+0x15c>)
 8006544:	f8c2 3013 	str.w	r3, [r2, #19]
    	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8006548:	4b2d      	ldr	r3, [pc, #180]	; (8006600 <W25qxx_Init+0x15c>)
 800654a:	f8d3 3013 	ldr.w	r3, [r3, #19]
 800654e:	4a2c      	ldr	r2, [pc, #176]	; (8006600 <W25qxx_Init+0x15c>)
 8006550:	f8d2 200f 	ldr.w	r2, [r2, #15]
 8006554:	fb02 f303 	mul.w	r3, r2, r3
 8006558:	4a29      	ldr	r2, [pc, #164]	; (8006600 <W25qxx_Init+0x15c>)
 800655a:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 800655e:	b292      	uxth	r2, r2
 8006560:	fbb3 f3f2 	udiv	r3, r3, r2
 8006564:	4a26      	ldr	r2, [pc, #152]	; (8006600 <W25qxx_Init+0x15c>)
 8006566:	f8c2 300b 	str.w	r3, [r2, #11]
    	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 800656a:	4b25      	ldr	r3, [pc, #148]	; (8006600 <W25qxx_Init+0x15c>)
 800656c:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006570:	011b      	lsls	r3, r3, #4
 8006572:	4a23      	ldr	r2, [pc, #140]	; (8006600 <W25qxx_Init+0x15c>)
 8006574:	f8c2 3017 	str.w	r3, [r2, #23]
    	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8006578:	4b21      	ldr	r3, [pc, #132]	; (8006600 <W25qxx_Init+0x15c>)
 800657a:	f8d3 3013 	ldr.w	r3, [r3, #19]
 800657e:	4a20      	ldr	r2, [pc, #128]	; (8006600 <W25qxx_Init+0x15c>)
 8006580:	f8d2 200f 	ldr.w	r2, [r2, #15]
 8006584:	fb02 f303 	mul.w	r3, r2, r3
 8006588:	0a9b      	lsrs	r3, r3, #10
 800658a:	4a1d      	ldr	r2, [pc, #116]	; (8006600 <W25qxx_Init+0x15c>)
 800658c:	f8c2 301f 	str.w	r3, [r2, #31]
    	W25qxx_ReadUniqID();
 8006590:	f7ff fef4 	bl	800637c <W25qxx_ReadUniqID>
    	W25qxx_ReadStatusRegister(1);
 8006594:	2001      	movs	r0, #1
 8006596:	f7ff ff25 	bl	80063e4 <W25qxx_ReadStatusRegister>
    	W25qxx_ReadStatusRegister(2);
 800659a:	2002      	movs	r0, #2
 800659c:	f7ff ff22 	bl	80063e4 <W25qxx_ReadStatusRegister>
    	W25qxx_ReadStatusRegister(3);
 80065a0:	2003      	movs	r0, #3
 80065a2:	f7ff ff1f 	bl	80063e4 <W25qxx_ReadStatusRegister>
    	ret = true;
 80065a6:	2301      	movs	r3, #1
 80065a8:	71fb      	strb	r3, [r7, #7]
                 "\tSector Size:\t%u bytes\r\n"
                 "\tSector Count:\t%u\r\n"
                 "\tBlock Size:\t%u bytes\r\n"
                 "\tBlock Count:\t%u\r\n"
                 "\tCapacity:\t%u KBytes\r\n",
                 w25qxx.PageSize,
 80065aa:	4b15      	ldr	r3, [pc, #84]	; (8006600 <W25qxx_Init+0x15c>)
 80065ac:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80065b0:	b29b      	uxth	r3, r3
    	Report(0,"\tPage Size:\t%u bytes\r\n"
 80065b2:	461e      	mov	r6, r3
 80065b4:	4b12      	ldr	r3, [pc, #72]	; (8006600 <W25qxx_Init+0x15c>)
 80065b6:	f8d3 500b 	ldr.w	r5, [r3, #11]
 80065ba:	4b11      	ldr	r3, [pc, #68]	; (8006600 <W25qxx_Init+0x15c>)
 80065bc:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80065c0:	4a0f      	ldr	r2, [pc, #60]	; (8006600 <W25qxx_Init+0x15c>)
 80065c2:	f8d2 2013 	ldr.w	r2, [r2, #19]
 80065c6:	490e      	ldr	r1, [pc, #56]	; (8006600 <W25qxx_Init+0x15c>)
 80065c8:	f8d1 1017 	ldr.w	r1, [r1, #23]
 80065cc:	480c      	ldr	r0, [pc, #48]	; (8006600 <W25qxx_Init+0x15c>)
 80065ce:	f8d0 001b 	ldr.w	r0, [r0, #27]
 80065d2:	4c0b      	ldr	r4, [pc, #44]	; (8006600 <W25qxx_Init+0x15c>)
 80065d4:	f8d4 401f 	ldr.w	r4, [r4, #31]
 80065d8:	9404      	str	r4, [sp, #16]
 80065da:	9003      	str	r0, [sp, #12]
 80065dc:	9102      	str	r1, [sp, #8]
 80065de:	9201      	str	r2, [sp, #4]
 80065e0:	9300      	str	r3, [sp, #0]
 80065e2:	462b      	mov	r3, r5
 80065e4:	4632      	mov	r2, r6
 80065e6:	490b      	ldr	r1, [pc, #44]	; (8006614 <W25qxx_Init+0x170>)
 80065e8:	2000      	movs	r0, #0
 80065ea:	f7fe f989 	bl	8004900 <Report>
                 w25qxx.BlockCount,
                 w25qxx.CapacityInKiloByte);
//#endif
    }

    w25qxx.Lock = 0;
 80065ee:	4b04      	ldr	r3, [pc, #16]	; (8006600 <W25qxx_Init+0x15c>)
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    return ret;
 80065f6:	79fb      	ldrb	r3, [r7, #7]
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006600:	200040bc 	.word	0x200040bc
 8006604:	08017248 	.word	0x08017248
 8006608:	080181dc 	.word	0x080181dc
 800660c:	20000210 	.word	0x20000210
 8006610:	0801726c 	.word	0x0801726c
 8006614:	08017278 	.word	0x08017278

08006618 <W25qxx_getChipID>:
//------------------------------------------------------------------------------------------
uint32_t W25qxx_getChipID()
{
 8006618:	b480      	push	{r7}
 800661a:	af00      	add	r7, sp, #0
	return (uint32_t)w25qxx.ID;
 800661c:	4b03      	ldr	r3, [pc, #12]	; (800662c <W25qxx_getChipID+0x14>)
 800661e:	781b      	ldrb	r3, [r3, #0]
}
 8006620:	4618      	mov	r0, r3
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop
 800662c:	200040bc 	.word	0x200040bc

08006630 <W25qxx_getSectorCount>:
uint32_t W25qxx_getSectorCount()
{
 8006630:	b480      	push	{r7}
 8006632:	af00      	add	r7, sp, #0
	return w25qxx.SectorCount;
 8006634:	4b03      	ldr	r3, [pc, #12]	; (8006644 <W25qxx_getSectorCount+0x14>)
 8006636:	f8d3 3013 	ldr.w	r3, [r3, #19]
}
 800663a:	4618      	mov	r0, r3
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr
 8006644:	200040bc 	.word	0x200040bc

08006648 <W25qxx_getSectorSize>:
uint32_t W25qxx_getSectorSize()
{
 8006648:	b480      	push	{r7}
 800664a:	af00      	add	r7, sp, #0
	return w25qxx.SectorSize;
 800664c:	4b03      	ldr	r3, [pc, #12]	; (800665c <W25qxx_getSectorSize+0x14>)
 800664e:	f8d3 300f 	ldr.w	r3, [r3, #15]
}
 8006652:	4618      	mov	r0, r3
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr
 800665c:	200040bc 	.word	0x200040bc

08006660 <W25qxx_getPageSize>:
uint32_t W25qxx_getPageCount()
{
	return w25qxx.PageCount;
}
uint32_t W25qxx_getPageSize()
{
 8006660:	b480      	push	{r7}
 8006662:	af00      	add	r7, sp, #0
	return w25qxx.PageSize;
 8006664:	4b04      	ldr	r3, [pc, #16]	; (8006678 <W25qxx_getPageSize+0x18>)
 8006666:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800666a:	b29b      	uxth	r3, r3
}
 800666c:	4618      	mov	r0, r3
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	200040bc 	.word	0x200040bc

0800667c <W25qxx_getBlockSize>:
uint32_t W25qxx_getBlockCount()
{
	return w25qxx.BlockCount;
}
uint32_t W25qxx_getBlockSize()
{
 800667c:	b480      	push	{r7}
 800667e:	af00      	add	r7, sp, #0
	return w25qxx.BlockSize;
 8006680:	4b03      	ldr	r3, [pc, #12]	; (8006690 <W25qxx_getBlockSize+0x14>)
 8006682:	f8d3 3017 	ldr.w	r3, [r3, #23]
}
 8006686:	4618      	mov	r0, r3
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr
 8006690:	200040bc 	.word	0x200040bc

08006694 <W25qxx_EraseSector>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
    while (w25qxx.Lock) W25qxx_Delay(1);
 800669c:	e002      	b.n	80066a4 <W25qxx_EraseSector+0x10>
 800669e:	2001      	movs	r0, #1
 80066a0:	f000 fbfa 	bl	8006e98 <HAL_Delay>
 80066a4:	4b1c      	ldr	r3, [pc, #112]	; (8006718 <W25qxx_EraseSector+0x84>)
 80066a6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1f7      	bne.n	800669e <W25qxx_EraseSector+0xa>

    w25qxx.Lock = 1;
 80066ae:	4b1a      	ldr	r3, [pc, #104]	; (8006718 <W25qxx_EraseSector+0x84>)
 80066b0:	2201      	movs	r2, #1
 80066b2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
#ifdef W25QXX_DEBUG
    uint32_t StartTime = HAL_GetTick();
    Report(1, "%u Begin...", SectorAddr);
#endif

    W25qxx_WaitForWriteEnd();
 80066b6:	f7ff fed3 	bl	8006460 <W25qxx_WaitForWriteEnd>
    SectorAddr = SectorAddr * w25qxx.SectorSize;
 80066ba:	4b17      	ldr	r3, [pc, #92]	; (8006718 <W25qxx_EraseSector+0x84>)
 80066bc:	f8d3 200f 	ldr.w	r2, [r3, #15]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	fb02 f303 	mul.w	r3, r2, r3
 80066c6:	607b      	str	r3, [r7, #4]
    W25qxx_WriteEnable();
 80066c8:	f7ff fe7e 	bl	80063c8 <W25qxx_WriteEnable>

    W25_SELECT();
 80066cc:	f7ff fdea 	bl	80062a4 <W25_SELECT>
    W25qxx_Spi(SECTOR_ERASE);
 80066d0:	2020      	movs	r0, #32
 80066d2:	f7ff fdff 	bl	80062d4 <W25qxx_Spi>
    //if (w25qxx.ID >= W25Q256) W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
    W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	0c1b      	lsrs	r3, r3, #16
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	4618      	mov	r0, r3
 80066de:	f7ff fdf9 	bl	80062d4 <W25qxx_Spi>
    W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	0a1b      	lsrs	r3, r3, #8
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	4618      	mov	r0, r3
 80066ea:	f7ff fdf3 	bl	80062d4 <W25qxx_Spi>
    W25qxx_Spi(SectorAddr & 0xFF);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	4618      	mov	r0, r3
 80066f4:	f7ff fdee 	bl	80062d4 <W25qxx_Spi>
    W25_UNSELECT();
 80066f8:	f7ff fde0 	bl	80062bc <W25_UNSELECT>

    W25qxx_WaitForWriteEnd();
 80066fc:	f7ff feb0 	bl	8006460 <W25qxx_WaitForWriteEnd>

#ifdef W25QXX_DEBUG
    uint32_t dur = HAL_GetTick() - StartTime;
    Report(0, " done after %u ms (%u sec)!\r\n", dur, dur / 1000);
#endif
    W25qxx_Delay(1);
 8006700:	2001      	movs	r0, #1
 8006702:	f000 fbc9 	bl	8006e98 <HAL_Delay>

    w25qxx.Lock = 0;
 8006706:	4b04      	ldr	r3, [pc, #16]	; (8006718 <W25qxx_EraseSector+0x84>)
 8006708:	2200      	movs	r2, #0
 800670a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 800670e:	bf00      	nop
 8006710:	3708      	adds	r7, #8
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	200040bc 	.word	0x200040bc

0800671c <W25qxx_SectorToPage>:
{
    return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//------------------------------------------------------------------------------------------
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
    return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8006724:	4b08      	ldr	r3, [pc, #32]	; (8006748 <W25qxx_SectorToPage+0x2c>)
 8006726:	f8d3 300f 	ldr.w	r3, [r3, #15]
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	fb02 f303 	mul.w	r3, r2, r3
 8006730:	4a05      	ldr	r2, [pc, #20]	; (8006748 <W25qxx_SectorToPage+0x2c>)
 8006732:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8006736:	b292      	uxth	r2, r2
 8006738:	fbb3 f3f2 	udiv	r3, r3, r2
}
 800673c:	4618      	mov	r0, r3
 800673e:	370c      	adds	r7, #12
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr
 8006748:	200040bc 	.word	0x200040bc

0800674c <W25qxx_IsEmptySector>:

    return false;
}
//------------------------------------------------------------------------------------------
bool W25qxx_IsEmptySector(uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToCheck_up_to_SectorSize)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b090      	sub	sp, #64	; 0x40
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	607a      	str	r2, [r7, #4]
    while (w25qxx.Lock) W25qxx_Delay(1);
 8006758:	e002      	b.n	8006760 <W25qxx_IsEmptySector+0x14>
 800675a:	2001      	movs	r0, #1
 800675c:	f000 fb9c 	bl	8006e98 <HAL_Delay>
 8006760:	4b59      	ldr	r3, [pc, #356]	; (80068c8 <W25qxx_IsEmptySector+0x17c>)
 8006762:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1f7      	bne.n	800675a <W25qxx_IsEmptySector+0xe>

    w25qxx.Lock = 1;
 800676a:	4b57      	ldr	r3, [pc, #348]	; (80068c8 <W25qxx_IsEmptySector+0x17c>)
 800676c:	2201      	movs	r2, #1
 800676e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    if ( (NumByteToCheck_up_to_SectorSize > w25qxx.SectorSize) || (!NumByteToCheck_up_to_SectorSize) )
 8006772:	4b55      	ldr	r3, [pc, #340]	; (80068c8 <W25qxx_IsEmptySector+0x17c>)
 8006774:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	429a      	cmp	r2, r3
 800677c:	d802      	bhi.n	8006784 <W25qxx_IsEmptySector+0x38>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d103      	bne.n	800678c <W25qxx_IsEmptySector+0x40>
                NumByteToCheck_up_to_SectorSize = w25qxx.SectorSize;
 8006784:	4b50      	ldr	r3, [pc, #320]	; (80068c8 <W25qxx_IsEmptySector+0x17c>)
 8006786:	f8d3 300f 	ldr.w	r3, [r3, #15]
 800678a:	607b      	str	r3, [r7, #4]
    uint32_t StartTime = HAL_GetTick();
#endif

    uint8_t pBuffer[32];
    uint32_t i, WorkAddress;
    for ( i = OffsetInByte; i < w25qxx.SectorSize; i += sizeof(pBuffer)) {
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006790:	e040      	b.n	8006814 <W25qxx_IsEmptySector+0xc8>

    	W25_SELECT();
 8006792:	f7ff fd87 	bl	80062a4 <W25_SELECT>
        WorkAddress = (i + Sector_Address * w25qxx.SectorSize);
 8006796:	4b4c      	ldr	r3, [pc, #304]	; (80068c8 <W25qxx_IsEmptySector+0x17c>)
 8006798:	f8d3 300f 	ldr.w	r3, [r3, #15]
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	fb02 f303 	mul.w	r3, r2, r3
 80067a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80067a4:	4413      	add	r3, r2
 80067a6:	637b      	str	r3, [r7, #52]	; 0x34
        W25qxx_Spi(DATA_READ);//FAST_READ);
 80067a8:	2003      	movs	r0, #3
 80067aa:	f7ff fd93 	bl	80062d4 <W25qxx_Spi>
        //if (w25qxx.ID >= W25Q256) W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
        W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 80067ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067b0:	0c1b      	lsrs	r3, r3, #16
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7ff fd8d 	bl	80062d4 <W25qxx_Spi>
        W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 80067ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067bc:	0a1b      	lsrs	r3, r3, #8
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	4618      	mov	r0, r3
 80067c2:	f7ff fd87 	bl	80062d4 <W25qxx_Spi>
        W25qxx_Spi(WorkAddress & 0xFF);
 80067c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7ff fd82 	bl	80062d4 <W25qxx_Spi>
        //W25qxx_Spi(0);
        HAL_SPI_Receive(portFLASH, pBuffer, sizeof(pBuffer), min_wait_ms);
 80067d0:	4b3e      	ldr	r3, [pc, #248]	; (80068cc <W25qxx_IsEmptySector+0x180>)
 80067d2:	6818      	ldr	r0, [r3, #0]
 80067d4:	23fa      	movs	r3, #250	; 0xfa
 80067d6:	f107 0114 	add.w	r1, r7, #20
 80067da:	2220      	movs	r2, #32
 80067dc:	f004 fe19 	bl	800b412 <HAL_SPI_Receive>
        W25_UNSELECT();
 80067e0:	f7ff fd6c 	bl	80062bc <W25_UNSELECT>

        for (uint8_t x = 0; x < sizeof(pBuffer); x++) {
 80067e4:	2300      	movs	r3, #0
 80067e6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80067ea:	e00c      	b.n	8006806 <W25qxx_IsEmptySector+0xba>
            if (pBuffer[x] != 0xFF) goto NOT_EMPTY;
 80067ec:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80067f0:	3340      	adds	r3, #64	; 0x40
 80067f2:	443b      	add	r3, r7
 80067f4:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80067f8:	2bff      	cmp	r3, #255	; 0xff
 80067fa:	d159      	bne.n	80068b0 <W25qxx_IsEmptySector+0x164>
        for (uint8_t x = 0; x < sizeof(pBuffer); x++) {
 80067fc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006800:	3301      	adds	r3, #1
 8006802:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006806:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800680a:	2b1f      	cmp	r3, #31
 800680c:	d9ee      	bls.n	80067ec <W25qxx_IsEmptySector+0xa0>
    for ( i = OffsetInByte; i < w25qxx.SectorSize; i += sizeof(pBuffer)) {
 800680e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006810:	3320      	adds	r3, #32
 8006812:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006814:	4b2c      	ldr	r3, [pc, #176]	; (80068c8 <W25qxx_IsEmptySector+0x17c>)
 8006816:	f8d3 300f 	ldr.w	r3, [r3, #15]
 800681a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800681c:	429a      	cmp	r2, r3
 800681e:	d3b8      	bcc.n	8006792 <W25qxx_IsEmptySector+0x46>
        }
    }
    if ((w25qxx.SectorSize + OffsetInByte) % sizeof(pBuffer) != 0) {
 8006820:	4b29      	ldr	r3, [pc, #164]	; (80068c8 <W25qxx_IsEmptySector+0x17c>)
 8006822:	f8d3 200f 	ldr.w	r2, [r3, #15]
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	4413      	add	r3, r2
 800682a:	f003 031f 	and.w	r3, r3, #31
 800682e:	2b00      	cmp	r3, #0
 8006830:	d038      	beq.n	80068a4 <W25qxx_IsEmptySector+0x158>
        i -= sizeof(pBuffer);
 8006832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006834:	3b20      	subs	r3, #32
 8006836:	63fb      	str	r3, [r7, #60]	; 0x3c
        for( ; i < w25qxx.SectorSize; i++) {
 8006838:	e02e      	b.n	8006898 <W25qxx_IsEmptySector+0x14c>

            W25_SELECT();
 800683a:	f7ff fd33 	bl	80062a4 <W25_SELECT>
            WorkAddress = (i + Sector_Address * w25qxx.SectorSize);
 800683e:	4b22      	ldr	r3, [pc, #136]	; (80068c8 <W25qxx_IsEmptySector+0x17c>)
 8006840:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	fb02 f303 	mul.w	r3, r2, r3
 800684a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800684c:	4413      	add	r3, r2
 800684e:	637b      	str	r3, [r7, #52]	; 0x34
            W25qxx_Spi(DATA_READ);//FAST_READ);
 8006850:	2003      	movs	r0, #3
 8006852:	f7ff fd3f 	bl	80062d4 <W25qxx_Spi>
            //if (w25qxx.ID >= W25Q256) W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
            W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 8006856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006858:	0c1b      	lsrs	r3, r3, #16
 800685a:	b2db      	uxtb	r3, r3
 800685c:	4618      	mov	r0, r3
 800685e:	f7ff fd39 	bl	80062d4 <W25qxx_Spi>
            W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 8006862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006864:	0a1b      	lsrs	r3, r3, #8
 8006866:	b2db      	uxtb	r3, r3
 8006868:	4618      	mov	r0, r3
 800686a:	f7ff fd33 	bl	80062d4 <W25qxx_Spi>
            W25qxx_Spi(WorkAddress & 0xFF);
 800686e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006870:	b2db      	uxtb	r3, r3
 8006872:	4618      	mov	r0, r3
 8006874:	f7ff fd2e 	bl	80062d4 <W25qxx_Spi>
            //W25qxx_Spi(0);
            HAL_SPI_Receive(portFLASH, pBuffer, 1, min_wait_ms);
 8006878:	4b14      	ldr	r3, [pc, #80]	; (80068cc <W25qxx_IsEmptySector+0x180>)
 800687a:	6818      	ldr	r0, [r3, #0]
 800687c:	23fa      	movs	r3, #250	; 0xfa
 800687e:	f107 0114 	add.w	r1, r7, #20
 8006882:	2201      	movs	r2, #1
 8006884:	f004 fdc5 	bl	800b412 <HAL_SPI_Receive>
            W25_UNSELECT();
 8006888:	f7ff fd18 	bl	80062bc <W25_UNSELECT>

            if (pBuffer[0] != 0xFF) goto NOT_EMPTY;
 800688c:	7d3b      	ldrb	r3, [r7, #20]
 800688e:	2bff      	cmp	r3, #255	; 0xff
 8006890:	d110      	bne.n	80068b4 <W25qxx_IsEmptySector+0x168>
        for( ; i < w25qxx.SectorSize; i++) {
 8006892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006894:	3301      	adds	r3, #1
 8006896:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006898:	4b0b      	ldr	r3, [pc, #44]	; (80068c8 <W25qxx_IsEmptySector+0x17c>)
 800689a:	f8d3 300f 	ldr.w	r3, [r3, #15]
 800689e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d3ca      	bcc.n	800683a <W25qxx_IsEmptySector+0xee>
#ifdef W25QXX_DEBUG
    Report(1, "w25qxx CheckSector is Empty in %u ms\r\n", HAL_GetTick() - StartTime);
    //W25qxx_Delay(100);
#endif

    w25qxx.Lock = 0;
 80068a4:	4b08      	ldr	r3, [pc, #32]	; (80068c8 <W25qxx_IsEmptySector+0x17c>)
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    return true;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e007      	b.n	80068c0 <W25qxx_IsEmptySector+0x174>
            if (pBuffer[x] != 0xFF) goto NOT_EMPTY;
 80068b0:	bf00      	nop
 80068b2:	e000      	b.n	80068b6 <W25qxx_IsEmptySector+0x16a>
            if (pBuffer[0] != 0xFF) goto NOT_EMPTY;
 80068b4:	bf00      	nop
#ifdef W25QXX_DEBUG
    Report(1, "w25qxx CheckSector is Not Empty in %u ms\r\n", HAL_GetTick() - StartTime);
    //W25qxx_Delay(100);
#endif

    w25qxx.Lock = 0;
 80068b6:	4b04      	ldr	r3, [pc, #16]	; (80068c8 <W25qxx_IsEmptySector+0x17c>)
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    return false;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3740      	adds	r7, #64	; 0x40
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	200040bc 	.word	0x200040bc
 80068cc:	2000000c 	.word	0x2000000c

080068d0 <W25qxx_WritePage>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
 80068dc:	603b      	str	r3, [r7, #0]
    while (w25qxx.Lock) W25qxx_Delay(1);
 80068de:	e002      	b.n	80068e6 <W25qxx_WritePage+0x16>
 80068e0:	2001      	movs	r0, #1
 80068e2:	f000 fad9 	bl	8006e98 <HAL_Delay>
 80068e6:	4b4d      	ldr	r3, [pc, #308]	; (8006a1c <W25qxx_WritePage+0x14c>)
 80068e8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d1f7      	bne.n	80068e0 <W25qxx_WritePage+0x10>

    w25qxx.Lock = 1;
 80068f0:	4b4a      	ldr	r3, [pc, #296]	; (8006a1c <W25qxx_WritePage+0x14c>)
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    if ( ((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || !NumByteToWrite_up_to_PageSize )
 80068f8:	683a      	ldr	r2, [r7, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4413      	add	r3, r2
 80068fe:	4a47      	ldr	r2, [pc, #284]	; (8006a1c <W25qxx_WritePage+0x14c>)
 8006900:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8006904:	b292      	uxth	r2, r2
 8006906:	4293      	cmp	r3, r2
 8006908:	d802      	bhi.n	8006910 <W25qxx_WritePage+0x40>
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d107      	bne.n	8006920 <W25qxx_WritePage+0x50>
                NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8006910:	4b42      	ldr	r3, [pc, #264]	; (8006a1c <W25qxx_WritePage+0x14c>)
 8006912:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006916:	b29b      	uxth	r3, r3
 8006918:	461a      	mov	r2, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	603b      	str	r3, [r7, #0]
    if ( (OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize )
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	4413      	add	r3, r2
 8006926:	4a3d      	ldr	r2, [pc, #244]	; (8006a1c <W25qxx_WritePage+0x14c>)
 8006928:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 800692c:	b292      	uxth	r2, r2
 800692e:	4293      	cmp	r3, r2
 8006930:	d907      	bls.n	8006942 <W25qxx_WritePage+0x72>
                NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8006932:	4b3a      	ldr	r3, [pc, #232]	; (8006a1c <W25qxx_WritePage+0x14c>)
 8006934:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006938:	b29b      	uxth	r3, r3
 800693a:	461a      	mov	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	603b      	str	r3, [r7, #0]
    Report(1, "%s WritePage:0x%X(%u), Offset:%u ,Writes %u Bytes, begin...\r\n",
                 __func__, Page_Address, Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
    uint32_t StartTime = HAL_GetTick();
#endif

    W25qxx_WaitForWriteEnd();
 8006942:	f7ff fd8d 	bl	8006460 <W25qxx_WaitForWriteEnd>
    W25qxx_WriteEnable();
 8006946:	f7ff fd3f 	bl	80063c8 <W25qxx_WriteEnable>

    Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 800694a:	4b34      	ldr	r3, [pc, #208]	; (8006a1c <W25qxx_WritePage+0x14c>)
 800694c:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006950:	b29b      	uxth	r3, r3
 8006952:	461a      	mov	r2, r3
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	fb02 f303 	mul.w	r3, r2, r3
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	4413      	add	r3, r2
 800695e:	60bb      	str	r3, [r7, #8]
    W25qxx_Spi((Page_Address & 0xFF00) >> 8);
    W25qxx_Spi(Page_Address&0xFF);
    HAL_SPI_Transmit(portFLASH, pBuffer, NumByteToWrite_up_to_PageSize, min_wait_ms);
    W25_UNSELECT();*/

    uint16_t lens = NumByteToWrite_up_to_PageSize + PAGE_HDR_BYTES;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	b29b      	uxth	r3, r3
 8006964:	3304      	adds	r3, #4
 8006966:	82fb      	strh	r3, [r7, #22]
    int idx = 0;
 8006968:	2300      	movs	r3, #0
 800696a:	613b      	str	r3, [r7, #16]
    pageTmp[idx++] = PAGE_PROG;
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	1c5a      	adds	r2, r3, #1
 8006970:	613a      	str	r2, [r7, #16]
 8006972:	4a2b      	ldr	r2, [pc, #172]	; (8006a20 <W25qxx_WritePage+0x150>)
 8006974:	2102      	movs	r1, #2
 8006976:	54d1      	strb	r1, [r2, r3]
    //if (w25qxx.ID >= W25Q256) pageTmp[idx++] = (Page_Address & 0xFF000000) >> 24;
    pageTmp[idx++] = (Page_Address & 0xFF0000) >> 16;
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	0c19      	lsrs	r1, r3, #16
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	1c5a      	adds	r2, r3, #1
 8006980:	613a      	str	r2, [r7, #16]
 8006982:	b2c9      	uxtb	r1, r1
 8006984:	4a26      	ldr	r2, [pc, #152]	; (8006a20 <W25qxx_WritePage+0x150>)
 8006986:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = (Page_Address& 0xFF00) >> 8;
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	0a19      	lsrs	r1, r3, #8
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	1c5a      	adds	r2, r3, #1
 8006990:	613a      	str	r2, [r7, #16]
 8006992:	b2c9      	uxtb	r1, r1
 8006994:	4a22      	ldr	r2, [pc, #136]	; (8006a20 <W25qxx_WritePage+0x150>)
 8006996:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = Page_Address & 0xFF;
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	1c5a      	adds	r2, r3, #1
 800699c:	613a      	str	r2, [r7, #16]
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	b2d1      	uxtb	r1, r2
 80069a2:	4a1f      	ldr	r2, [pc, #124]	; (8006a20 <W25qxx_WritePage+0x150>)
 80069a4:	54d1      	strb	r1, [r2, r3]
    memcpy(&pageTmp[PAGE_HDR_BYTES], pBuffer, NumByteToWrite_up_to_PageSize);//w25qxx.PageSize);
 80069a6:	683a      	ldr	r2, [r7, #0]
 80069a8:	68f9      	ldr	r1, [r7, #12]
 80069aa:	481e      	ldr	r0, [pc, #120]	; (8006a24 <W25qxx_WritePage+0x154>)
 80069ac:	f00b fc4a 	bl	8012244 <memcpy>

    spiRdy = 0;
 80069b0:	4b1d      	ldr	r3, [pc, #116]	; (8006a28 <W25qxx_WritePage+0x158>)
 80069b2:	2200      	movs	r2, #0
 80069b4:	701a      	strb	r2, [r3, #0]

w25_withDMA = 1;
 80069b6:	4b1d      	ldr	r3, [pc, #116]	; (8006a2c <W25qxx_WritePage+0x15c>)
 80069b8:	2201      	movs	r2, #1
 80069ba:	701a      	strb	r2, [r3, #0]
    W25_SELECT();
 80069bc:	f7ff fc72 	bl	80062a4 <W25_SELECT>
    if (w25_withDMA) {
 80069c0:	4b1a      	ldr	r3, [pc, #104]	; (8006a2c <W25qxx_WritePage+0x15c>)
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d012      	beq.n	80069ee <W25qxx_WritePage+0x11e>
    	HAL_SPI_Transmit_DMA(portFLASH, pageTmp, lens);
 80069c8:	4b19      	ldr	r3, [pc, #100]	; (8006a30 <W25qxx_WritePage+0x160>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	8afa      	ldrh	r2, [r7, #22]
 80069ce:	4914      	ldr	r1, [pc, #80]	; (8006a20 <W25qxx_WritePage+0x150>)
 80069d0:	4618      	mov	r0, r3
 80069d2:	f005 f861 	bl	800ba98 <HAL_SPI_Transmit_DMA>
    	while (!spiRdy) {
 80069d6:	e002      	b.n	80069de <W25qxx_WritePage+0x10e>
    		W25qxx_Delay(1);
 80069d8:	2001      	movs	r0, #1
 80069da:	f000 fa5d 	bl	8006e98 <HAL_Delay>
    	while (!spiRdy) {
 80069de:	4b12      	ldr	r3, [pc, #72]	; (8006a28 <W25qxx_WritePage+0x158>)
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d0f8      	beq.n	80069d8 <W25qxx_WritePage+0x108>
    	}
w25_withDMA = 0;
 80069e6:	4b11      	ldr	r3, [pc, #68]	; (8006a2c <W25qxx_WritePage+0x15c>)
 80069e8:	2200      	movs	r2, #0
 80069ea:	701a      	strb	r2, [r3, #0]
 80069ec:	e00d      	b.n	8006a0a <W25qxx_WritePage+0x13a>
    } else {
    	HAL_SPI_Transmit(portFLASH, pageTmp, lens, min_wait_ms);
 80069ee:	4b10      	ldr	r3, [pc, #64]	; (8006a30 <W25qxx_WritePage+0x160>)
 80069f0:	6818      	ldr	r0, [r3, #0]
 80069f2:	23fa      	movs	r3, #250	; 0xfa
 80069f4:	8afa      	ldrh	r2, [r7, #22]
 80069f6:	490a      	ldr	r1, [pc, #40]	; (8006a20 <W25qxx_WritePage+0x150>)
 80069f8:	f004 fb9d 	bl	800b136 <HAL_SPI_Transmit>

    	W25_UNSELECT();
 80069fc:	f7ff fc5e 	bl	80062bc <W25_UNSELECT>

    	W25qxx_WaitForWriteEnd();
 8006a00:	f7ff fd2e 	bl	8006460 <W25qxx_WaitForWriteEnd>

    	spiRdy = 1;
 8006a04:	4b08      	ldr	r3, [pc, #32]	; (8006a28 <W25qxx_WritePage+0x158>)
 8006a06:	2201      	movs	r2, #1
 8006a08:	701a      	strb	r2, [r3, #0]
    	Report(0, "\r\n");
    	Report(1, "%s done after %u ms\r\n", __func__, StartTime);
#endif
    }

    w25qxx.Lock = 0;
 8006a0a:	4b04      	ldr	r3, [pc, #16]	; (8006a1c <W25qxx_WritePage+0x14c>)
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8006a12:	bf00      	nop
 8006a14:	3718      	adds	r7, #24
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	200040bc 	.word	0x200040bc
 8006a20:	200040e4 	.word	0x200040e4
 8006a24:	200040e8 	.word	0x200040e8
 8006a28:	200001cc 	.word	0x200001cc
 8006a2c:	200041e9 	.word	0x200041e9
 8006a30:	2000000c 	.word	0x2000000c

08006a34 <W25qxx_WriteSector>:
//------------------------------------------------------------------------------------------
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b088      	sub	sp, #32
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	607a      	str	r2, [r7, #4]
 8006a40:	603b      	str	r3, [r7, #0]
    if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || !NumByteToWrite_up_to_SectorSize)
 8006a42:	4b31      	ldr	r3, [pc, #196]	; (8006b08 <W25qxx_WriteSector+0xd4>)
 8006a44:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006a48:	683a      	ldr	r2, [r7, #0]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d802      	bhi.n	8006a54 <W25qxx_WriteSector+0x20>
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d103      	bne.n	8006a5c <W25qxx_WriteSector+0x28>
                NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8006a54:	4b2c      	ldr	r3, [pc, #176]	; (8006b08 <W25qxx_WriteSector+0xd4>)
 8006a56:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006a5a:	603b      	str	r3, [r7, #0]
    Report(1, "%s WriteSector:0x%X(%u), Offset:%u ,Write %u Bytes, begin...\r\n",
                 __func__, Sector_Address, Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
    //W25qxx_Delay(100);
#endif

    if (OffsetInByte >= w25qxx.SectorSize) {
 8006a5c:	4b2a      	ldr	r3, [pc, #168]	; (8006b08 <W25qxx_WriteSector+0xd4>)
 8006a5e:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d24b      	bcs.n	8006b00 <W25qxx_WriteSector+0xcc>
        return;
    }

    int32_t BytesToWrite;
    uint32_t LocalOffset, StartPage;
    if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	441a      	add	r2, r3
 8006a6e:	4b26      	ldr	r3, [pc, #152]	; (8006b08 <W25qxx_WriteSector+0xd4>)
 8006a70:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d906      	bls.n	8006a86 <W25qxx_WriteSector+0x52>
        BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8006a78:	4b23      	ldr	r3, [pc, #140]	; (8006b08 <W25qxx_WriteSector+0xd4>)
 8006a7a:	f8d3 200f 	ldr.w	r2, [r3, #15]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	61fb      	str	r3, [r7, #28]
 8006a84:	e001      	b.n	8006a8a <W25qxx_WriteSector+0x56>
    else
        BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	61fb      	str	r3, [r7, #28]
    StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8006a8a:	68b8      	ldr	r0, [r7, #8]
 8006a8c:	f7ff fe46 	bl	800671c <W25qxx_SectorToPage>
 8006a90:	4602      	mov	r2, r0
 8006a92:	4b1d      	ldr	r3, [pc, #116]	; (8006b08 <W25qxx_WriteSector+0xd4>)
 8006a94:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006aa2:	4413      	add	r3, r2
 8006aa4:	617b      	str	r3, [r7, #20]
    LocalOffset = OffsetInByte % w25qxx.PageSize;
 8006aa6:	4b18      	ldr	r3, [pc, #96]	; (8006b08 <W25qxx_WriteSector+0xd4>)
 8006aa8:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	461a      	mov	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ab6:	fb01 f202 	mul.w	r2, r1, r2
 8006aba:	1a9b      	subs	r3, r3, r2
 8006abc:	61bb      	str	r3, [r7, #24]

    do
    {
        W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	69ba      	ldr	r2, [r7, #24]
 8006ac2:	6979      	ldr	r1, [r7, #20]
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f7ff ff03 	bl	80068d0 <W25qxx_WritePage>
        StartPage++;
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	3301      	adds	r3, #1
 8006ace:	617b      	str	r3, [r7, #20]
        BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8006ad0:	4b0d      	ldr	r3, [pc, #52]	; (8006b08 <W25qxx_WriteSector+0xd4>)
 8006ad2:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	461a      	mov	r2, r3
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	1a9a      	subs	r2, r3, r2
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	61fb      	str	r3, [r7, #28]
        pBuffer += w25qxx.PageSize;
 8006ae4:	4b08      	ldr	r3, [pc, #32]	; (8006b08 <W25qxx_WriteSector+0xd4>)
 8006ae6:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	461a      	mov	r2, r3
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	4413      	add	r3, r2
 8006af2:	60fb      	str	r3, [r7, #12]
        LocalOffset = 0;
 8006af4:	2300      	movs	r3, #0
 8006af6:	61bb      	str	r3, [r7, #24]
    } while(BytesToWrite > 0);
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	dcdf      	bgt.n	8006abe <W25qxx_WriteSector+0x8a>
 8006afe:	e000      	b.n	8006b02 <W25qxx_WriteSector+0xce>
        return;
 8006b00:	bf00      	nop
#ifdef W25QXX_DEBUG
    Report(1, "%s Done\r\n", __func__);
    //W25qxx_Delay(100);
#endif

}
 8006b02:	3720      	adds	r7, #32
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	200040bc 	.word	0x200040bc

08006b0c <W25qxx_ReadPage>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b088      	sub	sp, #32
 8006b10:	af02      	add	r7, sp, #8
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
 8006b18:	603b      	str	r3, [r7, #0]
    while (w25qxx.Lock) W25qxx_Delay(1);
 8006b1a:	e002      	b.n	8006b22 <W25qxx_ReadPage+0x16>
 8006b1c:	2001      	movs	r0, #1
 8006b1e:	f000 f9bb 	bl	8006e98 <HAL_Delay>
 8006b22:	4b51      	ldr	r3, [pc, #324]	; (8006c68 <W25qxx_ReadPage+0x15c>)
 8006b24:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1f7      	bne.n	8006b1c <W25qxx_ReadPage+0x10>

    w25qxx.Lock = 1;
 8006b2c:	4b4e      	ldr	r3, [pc, #312]	; (8006c68 <W25qxx_ReadPage+0x15c>)
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || !NumByteToRead_up_to_PageSize)
 8006b34:	4b4c      	ldr	r3, [pc, #304]	; (8006c68 <W25qxx_ReadPage+0x15c>)
 8006b36:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d802      	bhi.n	8006b4a <W25qxx_ReadPage+0x3e>
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d104      	bne.n	8006b54 <W25qxx_ReadPage+0x48>
        NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8006b4a:	4b47      	ldr	r3, [pc, #284]	; (8006c68 <W25qxx_ReadPage+0x15c>)
 8006b4c:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	603b      	str	r3, [r7, #0]
    if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	4413      	add	r3, r2
 8006b5a:	4a43      	ldr	r2, [pc, #268]	; (8006c68 <W25qxx_ReadPage+0x15c>)
 8006b5c:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8006b60:	b292      	uxth	r2, r2
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d907      	bls.n	8006b76 <W25qxx_ReadPage+0x6a>
        NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8006b66:	4b40      	ldr	r3, [pc, #256]	; (8006c68 <W25qxx_ReadPage+0x15c>)
 8006b68:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	461a      	mov	r2, r3
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	1ad3      	subs	r3, r2, r3
 8006b74:	603b      	str	r3, [r7, #0]
                 __func__, Page_Address, Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
    //W25qxx_Delay(100);
    uint32_t StartTime = HAL_GetTick();
#endif

    Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8006b76:	4b3c      	ldr	r3, [pc, #240]	; (8006c68 <W25qxx_ReadPage+0x15c>)
 8006b78:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	461a      	mov	r2, r3
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	fb02 f303 	mul.w	r3, r2, r3
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	4413      	add	r3, r2
 8006b8a:	60bb      	str	r3, [r7, #8]
    W25qxx_Spi(Page_Address & 0xFF);
    //W25qxx_Spi(0);
    HAL_SPI_Receive(portFLASH, pBuffer, NumByteToRead_up_to_PageSize, min_wait_ms);
    W25_UNSELECT();
    */
    memset(pageTmp, 0, sizeof(pageTmp));
 8006b8c:	f240 1205 	movw	r2, #261	; 0x105
 8006b90:	2100      	movs	r1, #0
 8006b92:	4836      	ldr	r0, [pc, #216]	; (8006c6c <W25qxx_ReadPage+0x160>)
 8006b94:	f00b fb64 	bl	8012260 <memset>
    uint16_t lens = NumByteToRead_up_to_PageSize + PAGE_HDR_BYTES;// + 1;
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	3304      	adds	r3, #4
 8006b9e:	82fb      	strh	r3, [r7, #22]
    int idx = 0;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	613b      	str	r3, [r7, #16]
    pageTmp[idx++] = DATA_READ;//FAST_READ;
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	1c5a      	adds	r2, r3, #1
 8006ba8:	613a      	str	r2, [r7, #16]
 8006baa:	4a30      	ldr	r2, [pc, #192]	; (8006c6c <W25qxx_ReadPage+0x160>)
 8006bac:	2103      	movs	r1, #3
 8006bae:	54d1      	strb	r1, [r2, r3]
    //if (w25qxx.ID >= W25Q256) pageTmp[idx++] = (Page_Address & 0xFF000000) >> 24;
    pageTmp[idx++] = (Page_Address & 0xFF0000) >> 16;
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	0c19      	lsrs	r1, r3, #16
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	1c5a      	adds	r2, r3, #1
 8006bb8:	613a      	str	r2, [r7, #16]
 8006bba:	b2c9      	uxtb	r1, r1
 8006bbc:	4a2b      	ldr	r2, [pc, #172]	; (8006c6c <W25qxx_ReadPage+0x160>)
 8006bbe:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = (Page_Address& 0xFF00) >> 8;
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	0a19      	lsrs	r1, r3, #8
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	1c5a      	adds	r2, r3, #1
 8006bc8:	613a      	str	r2, [r7, #16]
 8006bca:	b2c9      	uxtb	r1, r1
 8006bcc:	4a27      	ldr	r2, [pc, #156]	; (8006c6c <W25qxx_ReadPage+0x160>)
 8006bce:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = Page_Address & 0xFF;
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	1c5a      	adds	r2, r3, #1
 8006bd4:	613a      	str	r2, [r7, #16]
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	b2d1      	uxtb	r1, r2
 8006bda:	4a24      	ldr	r2, [pc, #144]	; (8006c6c <W25qxx_ReadPage+0x160>)
 8006bdc:	54d1      	strb	r1, [r2, r3]
    //pageTmp[idx++] = 0;
    spiRdy = 0;
 8006bde:	4b24      	ldr	r3, [pc, #144]	; (8006c70 <W25qxx_ReadPage+0x164>)
 8006be0:	2200      	movs	r2, #0
 8006be2:	701a      	strb	r2, [r3, #0]

w25_withDMA = 1;
 8006be4:	4b23      	ldr	r3, [pc, #140]	; (8006c74 <W25qxx_ReadPage+0x168>)
 8006be6:	2201      	movs	r2, #1
 8006be8:	701a      	strb	r2, [r3, #0]
    W25_SELECT();
 8006bea:	f7ff fb5b 	bl	80062a4 <W25_SELECT>
    if (w25_withDMA) {
 8006bee:	4b21      	ldr	r3, [pc, #132]	; (8006c74 <W25qxx_ReadPage+0x168>)
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d012      	beq.n	8006c1c <W25qxx_ReadPage+0x110>
    	HAL_SPI_TransmitReceive_DMA(portFLASH, pageTmp, pageTmp, lens);
 8006bf6:	4b20      	ldr	r3, [pc, #128]	; (8006c78 <W25qxx_ReadPage+0x16c>)
 8006bf8:	6818      	ldr	r0, [r3, #0]
 8006bfa:	8afb      	ldrh	r3, [r7, #22]
 8006bfc:	4a1b      	ldr	r2, [pc, #108]	; (8006c6c <W25qxx_ReadPage+0x160>)
 8006bfe:	491b      	ldr	r1, [pc, #108]	; (8006c6c <W25qxx_ReadPage+0x160>)
 8006c00:	f005 f83e 	bl	800bc80 <HAL_SPI_TransmitReceive_DMA>
    	while (!spiRdy) {
 8006c04:	e002      	b.n	8006c0c <W25qxx_ReadPage+0x100>
    		W25qxx_Delay(1);
 8006c06:	2001      	movs	r0, #1
 8006c08:	f000 f946 	bl	8006e98 <HAL_Delay>
    	while (!spiRdy) {
 8006c0c:	4b18      	ldr	r3, [pc, #96]	; (8006c70 <W25qxx_ReadPage+0x164>)
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d0f8      	beq.n	8006c06 <W25qxx_ReadPage+0xfa>
    	}
w25_withDMA = 0;
 8006c14:	4b17      	ldr	r3, [pc, #92]	; (8006c74 <W25qxx_ReadPage+0x168>)
 8006c16:	2200      	movs	r2, #0
 8006c18:	701a      	strb	r2, [r3, #0]
 8006c1a:	e017      	b.n	8006c4c <W25qxx_ReadPage+0x140>
    } else {
    	if (HAL_SPI_TransmitReceive(portFLASH, pageTmp, pageTmp, lens, min_wait_ms) != HAL_OK) devError |= devSPI;
 8006c1c:	4b16      	ldr	r3, [pc, #88]	; (8006c78 <W25qxx_ReadPage+0x16c>)
 8006c1e:	6818      	ldr	r0, [r3, #0]
 8006c20:	22fa      	movs	r2, #250	; 0xfa
 8006c22:	8afb      	ldrh	r3, [r7, #22]
 8006c24:	9200      	str	r2, [sp, #0]
 8006c26:	4a11      	ldr	r2, [pc, #68]	; (8006c6c <W25qxx_ReadPage+0x160>)
 8006c28:	4910      	ldr	r1, [pc, #64]	; (8006c6c <W25qxx_ReadPage+0x160>)
 8006c2a:	f004 fd22 	bl	800b672 <HAL_SPI_TransmitReceive>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d006      	beq.n	8006c42 <W25qxx_ReadPage+0x136>
 8006c34:	4b11      	ldr	r3, [pc, #68]	; (8006c7c <W25qxx_ReadPage+0x170>)
 8006c36:	881b      	ldrh	r3, [r3, #0]
 8006c38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c3c:	b29a      	uxth	r2, r3
 8006c3e:	4b0f      	ldr	r3, [pc, #60]	; (8006c7c <W25qxx_ReadPage+0x170>)
 8006c40:	801a      	strh	r2, [r3, #0]
    	W25_UNSELECT();
 8006c42:	f7ff fb3b 	bl	80062bc <W25_UNSELECT>

    	spiRdy = 1;
 8006c46:	4b0a      	ldr	r3, [pc, #40]	; (8006c70 <W25qxx_ReadPage+0x164>)
 8006c48:	2201      	movs	r2, #1
 8006c4a:	701a      	strb	r2, [r3, #0]
    }
	memcpy(pBuffer, &pageTmp[PAGE_HDR_BYTES], NumByteToRead_up_to_PageSize);//w25qxx.PageSize);
 8006c4c:	683a      	ldr	r2, [r7, #0]
 8006c4e:	490c      	ldr	r1, [pc, #48]	; (8006c80 <W25qxx_ReadPage+0x174>)
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f00b faf7 	bl	8012244 <memcpy>
    	Report(0, "\r\n");
    	Report(1, "%s done after %u ms\r\n", __func__, StartTime);
#endif


    w25qxx.Lock = 0;
 8006c56:	4b04      	ldr	r3, [pc, #16]	; (8006c68 <W25qxx_ReadPage+0x15c>)
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8006c5e:	bf00      	nop
 8006c60:	3718      	adds	r7, #24
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	200040bc 	.word	0x200040bc
 8006c6c:	200040e4 	.word	0x200040e4
 8006c70:	200001cc 	.word	0x200001cc
 8006c74:	200041e9 	.word	0x200041e9
 8006c78:	2000000c 	.word	0x2000000c
 8006c7c:	20001890 	.word	0x20001890
 8006c80:	200040e8 	.word	0x200040e8

08006c84 <W25qxx_ReadSector>:
//------------------------------------------------------------------------------------------
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b088      	sub	sp, #32
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	607a      	str	r2, [r7, #4]
 8006c90:	603b      	str	r3, [r7, #0]
    if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || !NumByteToRead_up_to_SectorSize)
 8006c92:	4b31      	ldr	r3, [pc, #196]	; (8006d58 <W25qxx_ReadSector+0xd4>)
 8006c94:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006c98:	683a      	ldr	r2, [r7, #0]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d802      	bhi.n	8006ca4 <W25qxx_ReadSector+0x20>
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d103      	bne.n	8006cac <W25qxx_ReadSector+0x28>
                NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8006ca4:	4b2c      	ldr	r3, [pc, #176]	; (8006d58 <W25qxx_ReadSector+0xd4>)
 8006ca6:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006caa:	603b      	str	r3, [r7, #0]
    Report(1, "%s:0x%X(%u), Offset:%u ,Read %u Bytes, begin...\r\n",
                 __func__, Sector_Address, Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
    //W25qxx_Delay(100);
#endif

    if (OffsetInByte >= w25qxx.SectorSize) {
 8006cac:	4b2a      	ldr	r3, [pc, #168]	; (8006d58 <W25qxx_ReadSector+0xd4>)
 8006cae:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d24b      	bcs.n	8006d50 <W25qxx_ReadSector+0xcc>
        return;
    }

    int32_t BytesToRead;
    uint32_t LocalOffset, StartPage;
    if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	441a      	add	r2, r3
 8006cbe:	4b26      	ldr	r3, [pc, #152]	; (8006d58 <W25qxx_ReadSector+0xd4>)
 8006cc0:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d906      	bls.n	8006cd6 <W25qxx_ReadSector+0x52>
        BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8006cc8:	4b23      	ldr	r3, [pc, #140]	; (8006d58 <W25qxx_ReadSector+0xd4>)
 8006cca:	f8d3 200f 	ldr.w	r2, [r3, #15]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	61fb      	str	r3, [r7, #28]
 8006cd4:	e001      	b.n	8006cda <W25qxx_ReadSector+0x56>
    else
        BytesToRead = NumByteToRead_up_to_SectorSize;
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	61fb      	str	r3, [r7, #28]
    StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8006cda:	68b8      	ldr	r0, [r7, #8]
 8006cdc:	f7ff fd1e 	bl	800671c <W25qxx_SectorToPage>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	4b1d      	ldr	r3, [pc, #116]	; (8006d58 <W25qxx_ReadSector+0xd4>)
 8006ce4:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	4619      	mov	r1, r3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	fbb3 f3f1 	udiv	r3, r3, r1
 8006cf2:	4413      	add	r3, r2
 8006cf4:	617b      	str	r3, [r7, #20]
    LocalOffset = OffsetInByte % w25qxx.PageSize;
 8006cf6:	4b18      	ldr	r3, [pc, #96]	; (8006d58 <W25qxx_ReadSector+0xd4>)
 8006cf8:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	461a      	mov	r2, r3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d06:	fb01 f202 	mul.w	r2, r1, r2
 8006d0a:	1a9b      	subs	r3, r3, r2
 8006d0c:	61bb      	str	r3, [r7, #24]
    do {
        W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	69ba      	ldr	r2, [r7, #24]
 8006d12:	6979      	ldr	r1, [r7, #20]
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f7ff fef9 	bl	8006b0c <W25qxx_ReadPage>
        StartPage++;
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	617b      	str	r3, [r7, #20]
        BytesToRead -= w25qxx.PageSize - LocalOffset;
 8006d20:	4b0d      	ldr	r3, [pc, #52]	; (8006d58 <W25qxx_ReadSector+0xd4>)
 8006d22:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	461a      	mov	r2, r3
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	1a9a      	subs	r2, r3, r2
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	4413      	add	r3, r2
 8006d32:	61fb      	str	r3, [r7, #28]
        pBuffer += w25qxx.PageSize;
 8006d34:	4b08      	ldr	r3, [pc, #32]	; (8006d58 <W25qxx_ReadSector+0xd4>)
 8006d36:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	4413      	add	r3, r2
 8006d42:	60fb      	str	r3, [r7, #12]
        LocalOffset = 0;
 8006d44:	2300      	movs	r3, #0
 8006d46:	61bb      	str	r3, [r7, #24]
    } while(BytesToRead > 0);
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	dcdf      	bgt.n	8006d0e <W25qxx_ReadSector+0x8a>
 8006d4e:	e000      	b.n	8006d52 <W25qxx_ReadSector+0xce>
        return;
 8006d50:	bf00      	nop
#ifdef W25QXX_DEBUG
    Report(1, "%s done\r\n", __func__);
    //W25qxx_Delay(100);
#endif

}
 8006d52:	3720      	adds	r7, #32
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	200040bc 	.word	0x200040bc

08006d5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8006d5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006d94 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006d60:	f7ff fa8e 	bl	8006280 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006d64:	480c      	ldr	r0, [pc, #48]	; (8006d98 <LoopForever+0x6>)
  ldr r1, =_edata
 8006d66:	490d      	ldr	r1, [pc, #52]	; (8006d9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8006d68:	4a0d      	ldr	r2, [pc, #52]	; (8006da0 <LoopForever+0xe>)
  movs r3, #0
 8006d6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006d6c:	e002      	b.n	8006d74 <LoopCopyDataInit>

08006d6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006d6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006d70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006d72:	3304      	adds	r3, #4

08006d74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006d74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006d76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006d78:	d3f9      	bcc.n	8006d6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006d7a:	4a0a      	ldr	r2, [pc, #40]	; (8006da4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006d7c:	4c0a      	ldr	r4, [pc, #40]	; (8006da8 <LoopForever+0x16>)
  movs r3, #0
 8006d7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006d80:	e001      	b.n	8006d86 <LoopFillZerobss>

08006d82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006d82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006d84:	3204      	adds	r2, #4

08006d86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006d86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006d88:	d3fb      	bcc.n	8006d82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006d8a:	f00b fa37 	bl	80121fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006d8e:	f7fb fb41 	bl	8002414 <main>

08006d92 <LoopForever>:

LoopForever:
    b LoopForever
 8006d92:	e7fe      	b.n	8006d92 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8006d94:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8006d98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006d9c:	2000042c 	.word	0x2000042c
  ldr r2, =_sidata
 8006da0:	08018754 	.word	0x08018754
  ldr r2, =_sbss
 8006da4:	20000430 	.word	0x20000430
  ldr r4, =_ebss
 8006da8:	2000423c 	.word	0x2000423c

08006dac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006dac:	e7fe      	b.n	8006dac <ADC1_2_IRQHandler>

08006dae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b082      	sub	sp, #8
 8006db2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006db4:	2300      	movs	r3, #0
 8006db6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006db8:	2003      	movs	r0, #3
 8006dba:	f000 f985 	bl	80070c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006dbe:	200f      	movs	r0, #15
 8006dc0:	f000 f80e 	bl	8006de0 <HAL_InitTick>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d002      	beq.n	8006dd0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	71fb      	strb	r3, [r7, #7]
 8006dce:	e001      	b.n	8006dd4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006dd0:	f7fe fdf0 	bl	80059b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006dd4:	79fb      	ldrb	r3, [r7, #7]
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3708      	adds	r7, #8
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
	...

08006de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006de8:	2300      	movs	r3, #0
 8006dea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8006dec:	4b17      	ldr	r3, [pc, #92]	; (8006e4c <HAL_InitTick+0x6c>)
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d023      	beq.n	8006e3c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006df4:	4b16      	ldr	r3, [pc, #88]	; (8006e50 <HAL_InitTick+0x70>)
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	4b14      	ldr	r3, [pc, #80]	; (8006e4c <HAL_InitTick+0x6c>)
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006e02:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f000 f99f 	bl	800714e <HAL_SYSTICK_Config>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d10f      	bne.n	8006e36 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2b0f      	cmp	r3, #15
 8006e1a:	d809      	bhi.n	8006e30 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	6879      	ldr	r1, [r7, #4]
 8006e20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e24:	f000 f95b 	bl	80070de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006e28:	4a0a      	ldr	r2, [pc, #40]	; (8006e54 <HAL_InitTick+0x74>)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6013      	str	r3, [r2, #0]
 8006e2e:	e007      	b.n	8006e40 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	73fb      	strb	r3, [r7, #15]
 8006e34:	e004      	b.n	8006e40 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	73fb      	strb	r3, [r7, #15]
 8006e3a:	e001      	b.n	8006e40 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	20000240 	.word	0x20000240
 8006e50:	2000020c 	.word	0x2000020c
 8006e54:	2000023c 	.word	0x2000023c

08006e58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006e5c:	4b06      	ldr	r3, [pc, #24]	; (8006e78 <HAL_IncTick+0x20>)
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	461a      	mov	r2, r3
 8006e62:	4b06      	ldr	r3, [pc, #24]	; (8006e7c <HAL_IncTick+0x24>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4413      	add	r3, r2
 8006e68:	4a04      	ldr	r2, [pc, #16]	; (8006e7c <HAL_IncTick+0x24>)
 8006e6a:	6013      	str	r3, [r2, #0]
}
 8006e6c:	bf00      	nop
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr
 8006e76:	bf00      	nop
 8006e78:	20000240 	.word	0x20000240
 8006e7c:	200041ec 	.word	0x200041ec

08006e80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006e80:	b480      	push	{r7}
 8006e82:	af00      	add	r7, sp, #0
  return uwTick;
 8006e84:	4b03      	ldr	r3, [pc, #12]	; (8006e94 <HAL_GetTick+0x14>)
 8006e86:	681b      	ldr	r3, [r3, #0]
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	200041ec 	.word	0x200041ec

08006e98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006ea0:	f7ff ffee 	bl	8006e80 <HAL_GetTick>
 8006ea4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006eb0:	d005      	beq.n	8006ebe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8006eb2:	4b0a      	ldr	r3, [pc, #40]	; (8006edc <HAL_Delay+0x44>)
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	4413      	add	r3, r2
 8006ebc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006ebe:	bf00      	nop
 8006ec0:	f7ff ffde 	bl	8006e80 <HAL_GetTick>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d8f7      	bhi.n	8006ec0 <HAL_Delay+0x28>
  {
  }
}
 8006ed0:	bf00      	nop
 8006ed2:	bf00      	nop
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	20000240 	.word	0x20000240

08006ee0 <__NVIC_SetPriorityGrouping>:
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b085      	sub	sp, #20
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f003 0307 	and.w	r3, r3, #7
 8006eee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006ef0:	4b0c      	ldr	r3, [pc, #48]	; (8006f24 <__NVIC_SetPriorityGrouping+0x44>)
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006ef6:	68ba      	ldr	r2, [r7, #8]
 8006ef8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006efc:	4013      	ands	r3, r2
 8006efe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006f08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006f12:	4a04      	ldr	r2, [pc, #16]	; (8006f24 <__NVIC_SetPriorityGrouping+0x44>)
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	60d3      	str	r3, [r2, #12]
}
 8006f18:	bf00      	nop
 8006f1a:	3714      	adds	r7, #20
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr
 8006f24:	e000ed00 	.word	0xe000ed00

08006f28 <__NVIC_GetPriorityGrouping>:
{
 8006f28:	b480      	push	{r7}
 8006f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006f2c:	4b04      	ldr	r3, [pc, #16]	; (8006f40 <__NVIC_GetPriorityGrouping+0x18>)
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	0a1b      	lsrs	r3, r3, #8
 8006f32:	f003 0307 	and.w	r3, r3, #7
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr
 8006f40:	e000ed00 	.word	0xe000ed00

08006f44 <__NVIC_EnableIRQ>:
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	db0b      	blt.n	8006f6e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006f56:	79fb      	ldrb	r3, [r7, #7]
 8006f58:	f003 021f 	and.w	r2, r3, #31
 8006f5c:	4907      	ldr	r1, [pc, #28]	; (8006f7c <__NVIC_EnableIRQ+0x38>)
 8006f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f62:	095b      	lsrs	r3, r3, #5
 8006f64:	2001      	movs	r0, #1
 8006f66:	fa00 f202 	lsl.w	r2, r0, r2
 8006f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006f6e:	bf00      	nop
 8006f70:	370c      	adds	r7, #12
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	e000e100 	.word	0xe000e100

08006f80 <__NVIC_DisableIRQ>:
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	4603      	mov	r3, r0
 8006f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	db12      	blt.n	8006fb8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006f92:	79fb      	ldrb	r3, [r7, #7]
 8006f94:	f003 021f 	and.w	r2, r3, #31
 8006f98:	490a      	ldr	r1, [pc, #40]	; (8006fc4 <__NVIC_DisableIRQ+0x44>)
 8006f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f9e:	095b      	lsrs	r3, r3, #5
 8006fa0:	2001      	movs	r0, #1
 8006fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8006fa6:	3320      	adds	r3, #32
 8006fa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006fac:	f3bf 8f4f 	dsb	sy
}
 8006fb0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006fb2:	f3bf 8f6f 	isb	sy
}
 8006fb6:	bf00      	nop
}
 8006fb8:	bf00      	nop
 8006fba:	370c      	adds	r7, #12
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr
 8006fc4:	e000e100 	.word	0xe000e100

08006fc8 <__NVIC_SetPriority>:
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	4603      	mov	r3, r0
 8006fd0:	6039      	str	r1, [r7, #0]
 8006fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	db0a      	blt.n	8006ff2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	b2da      	uxtb	r2, r3
 8006fe0:	490c      	ldr	r1, [pc, #48]	; (8007014 <__NVIC_SetPriority+0x4c>)
 8006fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fe6:	0112      	lsls	r2, r2, #4
 8006fe8:	b2d2      	uxtb	r2, r2
 8006fea:	440b      	add	r3, r1
 8006fec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006ff0:	e00a      	b.n	8007008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	b2da      	uxtb	r2, r3
 8006ff6:	4908      	ldr	r1, [pc, #32]	; (8007018 <__NVIC_SetPriority+0x50>)
 8006ff8:	79fb      	ldrb	r3, [r7, #7]
 8006ffa:	f003 030f 	and.w	r3, r3, #15
 8006ffe:	3b04      	subs	r3, #4
 8007000:	0112      	lsls	r2, r2, #4
 8007002:	b2d2      	uxtb	r2, r2
 8007004:	440b      	add	r3, r1
 8007006:	761a      	strb	r2, [r3, #24]
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr
 8007014:	e000e100 	.word	0xe000e100
 8007018:	e000ed00 	.word	0xe000ed00

0800701c <NVIC_EncodePriority>:
{
 800701c:	b480      	push	{r7}
 800701e:	b089      	sub	sp, #36	; 0x24
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f003 0307 	and.w	r3, r3, #7
 800702e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007030:	69fb      	ldr	r3, [r7, #28]
 8007032:	f1c3 0307 	rsb	r3, r3, #7
 8007036:	2b04      	cmp	r3, #4
 8007038:	bf28      	it	cs
 800703a:	2304      	movcs	r3, #4
 800703c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	3304      	adds	r3, #4
 8007042:	2b06      	cmp	r3, #6
 8007044:	d902      	bls.n	800704c <NVIC_EncodePriority+0x30>
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	3b03      	subs	r3, #3
 800704a:	e000      	b.n	800704e <NVIC_EncodePriority+0x32>
 800704c:	2300      	movs	r3, #0
 800704e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007050:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	fa02 f303 	lsl.w	r3, r2, r3
 800705a:	43da      	mvns	r2, r3
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	401a      	ands	r2, r3
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007064:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	fa01 f303 	lsl.w	r3, r1, r3
 800706e:	43d9      	mvns	r1, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007074:	4313      	orrs	r3, r2
}
 8007076:	4618      	mov	r0, r3
 8007078:	3724      	adds	r7, #36	; 0x24
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr
	...

08007084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	3b01      	subs	r3, #1
 8007090:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007094:	d301      	bcc.n	800709a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007096:	2301      	movs	r3, #1
 8007098:	e00f      	b.n	80070ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800709a:	4a0a      	ldr	r2, [pc, #40]	; (80070c4 <SysTick_Config+0x40>)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	3b01      	subs	r3, #1
 80070a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80070a2:	210f      	movs	r1, #15
 80070a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070a8:	f7ff ff8e 	bl	8006fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80070ac:	4b05      	ldr	r3, [pc, #20]	; (80070c4 <SysTick_Config+0x40>)
 80070ae:	2200      	movs	r2, #0
 80070b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80070b2:	4b04      	ldr	r3, [pc, #16]	; (80070c4 <SysTick_Config+0x40>)
 80070b4:	2207      	movs	r2, #7
 80070b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3708      	adds	r7, #8
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	e000e010 	.word	0xe000e010

080070c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f7ff ff05 	bl	8006ee0 <__NVIC_SetPriorityGrouping>
}
 80070d6:	bf00      	nop
 80070d8:	3708      	adds	r7, #8
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}

080070de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80070de:	b580      	push	{r7, lr}
 80070e0:	b086      	sub	sp, #24
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	4603      	mov	r3, r0
 80070e6:	60b9      	str	r1, [r7, #8]
 80070e8:	607a      	str	r2, [r7, #4]
 80070ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80070ec:	2300      	movs	r3, #0
 80070ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80070f0:	f7ff ff1a 	bl	8006f28 <__NVIC_GetPriorityGrouping>
 80070f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	68b9      	ldr	r1, [r7, #8]
 80070fa:	6978      	ldr	r0, [r7, #20]
 80070fc:	f7ff ff8e 	bl	800701c <NVIC_EncodePriority>
 8007100:	4602      	mov	r2, r0
 8007102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007106:	4611      	mov	r1, r2
 8007108:	4618      	mov	r0, r3
 800710a:	f7ff ff5d 	bl	8006fc8 <__NVIC_SetPriority>
}
 800710e:	bf00      	nop
 8007110:	3718      	adds	r7, #24
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}

08007116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007116:	b580      	push	{r7, lr}
 8007118:	b082      	sub	sp, #8
 800711a:	af00      	add	r7, sp, #0
 800711c:	4603      	mov	r3, r0
 800711e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007124:	4618      	mov	r0, r3
 8007126:	f7ff ff0d 	bl	8006f44 <__NVIC_EnableIRQ>
}
 800712a:	bf00      	nop
 800712c:	3708      	adds	r7, #8
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b082      	sub	sp, #8
 8007136:	af00      	add	r7, sp, #0
 8007138:	4603      	mov	r3, r0
 800713a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800713c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007140:	4618      	mov	r0, r3
 8007142:	f7ff ff1d 	bl	8006f80 <__NVIC_DisableIRQ>
}
 8007146:	bf00      	nop
 8007148:	3708      	adds	r7, #8
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}

0800714e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b082      	sub	sp, #8
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f7ff ff94 	bl	8007084 <SysTick_Config>
 800715c:	4603      	mov	r3, r0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3708      	adds	r7, #8
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
	...

08007168 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d101      	bne.n	800717a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e098      	b.n	80072ac <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	461a      	mov	r2, r3
 8007180:	4b4d      	ldr	r3, [pc, #308]	; (80072b8 <HAL_DMA_Init+0x150>)
 8007182:	429a      	cmp	r2, r3
 8007184:	d80f      	bhi.n	80071a6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	461a      	mov	r2, r3
 800718c:	4b4b      	ldr	r3, [pc, #300]	; (80072bc <HAL_DMA_Init+0x154>)
 800718e:	4413      	add	r3, r2
 8007190:	4a4b      	ldr	r2, [pc, #300]	; (80072c0 <HAL_DMA_Init+0x158>)
 8007192:	fba2 2303 	umull	r2, r3, r2, r3
 8007196:	091b      	lsrs	r3, r3, #4
 8007198:	009a      	lsls	r2, r3, #2
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4a48      	ldr	r2, [pc, #288]	; (80072c4 <HAL_DMA_Init+0x15c>)
 80071a2:	641a      	str	r2, [r3, #64]	; 0x40
 80071a4:	e00e      	b.n	80071c4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	461a      	mov	r2, r3
 80071ac:	4b46      	ldr	r3, [pc, #280]	; (80072c8 <HAL_DMA_Init+0x160>)
 80071ae:	4413      	add	r3, r2
 80071b0:	4a43      	ldr	r2, [pc, #268]	; (80072c0 <HAL_DMA_Init+0x158>)
 80071b2:	fba2 2303 	umull	r2, r3, r2, r3
 80071b6:	091b      	lsrs	r3, r3, #4
 80071b8:	009a      	lsls	r2, r3, #2
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	4a42      	ldr	r2, [pc, #264]	; (80072cc <HAL_DMA_Init+0x164>)
 80071c2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2202      	movs	r2, #2
 80071c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80071da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80071e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	691b      	ldr	r3, [r3, #16]
 80071ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80071f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	699b      	ldr	r3, [r3, #24]
 80071fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007200:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a1b      	ldr	r3, [r3, #32]
 8007206:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007208:	68fa      	ldr	r2, [r7, #12]
 800720a:	4313      	orrs	r3, r2
 800720c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	68fa      	ldr	r2, [r7, #12]
 8007214:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800721e:	d039      	beq.n	8007294 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007224:	4a27      	ldr	r2, [pc, #156]	; (80072c4 <HAL_DMA_Init+0x15c>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d11a      	bne.n	8007260 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800722a:	4b29      	ldr	r3, [pc, #164]	; (80072d0 <HAL_DMA_Init+0x168>)
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007232:	f003 031c 	and.w	r3, r3, #28
 8007236:	210f      	movs	r1, #15
 8007238:	fa01 f303 	lsl.w	r3, r1, r3
 800723c:	43db      	mvns	r3, r3
 800723e:	4924      	ldr	r1, [pc, #144]	; (80072d0 <HAL_DMA_Init+0x168>)
 8007240:	4013      	ands	r3, r2
 8007242:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8007244:	4b22      	ldr	r3, [pc, #136]	; (80072d0 <HAL_DMA_Init+0x168>)
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6859      	ldr	r1, [r3, #4]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007250:	f003 031c 	and.w	r3, r3, #28
 8007254:	fa01 f303 	lsl.w	r3, r1, r3
 8007258:	491d      	ldr	r1, [pc, #116]	; (80072d0 <HAL_DMA_Init+0x168>)
 800725a:	4313      	orrs	r3, r2
 800725c:	600b      	str	r3, [r1, #0]
 800725e:	e019      	b.n	8007294 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007260:	4b1c      	ldr	r3, [pc, #112]	; (80072d4 <HAL_DMA_Init+0x16c>)
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007268:	f003 031c 	and.w	r3, r3, #28
 800726c:	210f      	movs	r1, #15
 800726e:	fa01 f303 	lsl.w	r3, r1, r3
 8007272:	43db      	mvns	r3, r3
 8007274:	4917      	ldr	r1, [pc, #92]	; (80072d4 <HAL_DMA_Init+0x16c>)
 8007276:	4013      	ands	r3, r2
 8007278:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800727a:	4b16      	ldr	r3, [pc, #88]	; (80072d4 <HAL_DMA_Init+0x16c>)
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6859      	ldr	r1, [r3, #4]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007286:	f003 031c 	and.w	r3, r3, #28
 800728a:	fa01 f303 	lsl.w	r3, r1, r3
 800728e:	4911      	ldr	r1, [pc, #68]	; (80072d4 <HAL_DMA_Init+0x16c>)
 8007290:	4313      	orrs	r3, r2
 8007292:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2201      	movs	r2, #1
 800729e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3714      	adds	r7, #20
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr
 80072b8:	40020407 	.word	0x40020407
 80072bc:	bffdfff8 	.word	0xbffdfff8
 80072c0:	cccccccd 	.word	0xcccccccd
 80072c4:	40020000 	.word	0x40020000
 80072c8:	bffdfbf8 	.word	0xbffdfbf8
 80072cc:	40020400 	.word	0x40020400
 80072d0:	400200a8 	.word	0x400200a8
 80072d4:	400204a8 	.word	0x400204a8

080072d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b086      	sub	sp, #24
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	607a      	str	r2, [r7, #4]
 80072e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072e6:	2300      	movs	r3, #0
 80072e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d101      	bne.n	80072f8 <HAL_DMA_Start_IT+0x20>
 80072f4:	2302      	movs	r3, #2
 80072f6:	e04b      	b.n	8007390 <HAL_DMA_Start_IT+0xb8>
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007306:	b2db      	uxtb	r3, r3
 8007308:	2b01      	cmp	r3, #1
 800730a:	d13a      	bne.n	8007382 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2202      	movs	r2, #2
 8007310:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2200      	movs	r2, #0
 8007318:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f022 0201 	bic.w	r2, r2, #1
 8007328:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	68b9      	ldr	r1, [r7, #8]
 8007330:	68f8      	ldr	r0, [r7, #12]
 8007332:	f000 f96d 	bl	8007610 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800733a:	2b00      	cmp	r3, #0
 800733c:	d008      	beq.n	8007350 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f042 020e 	orr.w	r2, r2, #14
 800734c:	601a      	str	r2, [r3, #0]
 800734e:	e00f      	b.n	8007370 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f022 0204 	bic.w	r2, r2, #4
 800735e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f042 020a 	orr.w	r2, r2, #10
 800736e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f042 0201 	orr.w	r2, r2, #1
 800737e:	601a      	str	r2, [r3, #0]
 8007380:	e005      	b.n	800738e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800738a:	2302      	movs	r3, #2
 800738c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800738e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007390:	4618      	mov	r0, r3
 8007392:	3718      	adds	r7, #24
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007398:	b480      	push	{r7}
 800739a:	b085      	sub	sp, #20
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073a0:	2300      	movs	r3, #0
 80073a2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	d008      	beq.n	80073c2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2204      	movs	r2, #4
 80073b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	e022      	b.n	8007408 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f022 020e 	bic.w	r2, r2, #14
 80073d0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f022 0201 	bic.w	r2, r2, #1
 80073e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073e6:	f003 021c 	and.w	r2, r3, #28
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ee:	2101      	movs	r1, #1
 80073f0:	fa01 f202 	lsl.w	r2, r1, r2
 80073f4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8007406:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8007408:	4618      	mov	r0, r3
 800740a:	3714      	adds	r7, #20
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800741c:	2300      	movs	r3, #0
 800741e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007426:	b2db      	uxtb	r3, r3
 8007428:	2b02      	cmp	r3, #2
 800742a:	d005      	beq.n	8007438 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2204      	movs	r2, #4
 8007430:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	73fb      	strb	r3, [r7, #15]
 8007436:	e029      	b.n	800748c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f022 020e 	bic.w	r2, r2, #14
 8007446:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f022 0201 	bic.w	r2, r2, #1
 8007456:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800745c:	f003 021c 	and.w	r2, r3, #28
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007464:	2101      	movs	r1, #1
 8007466:	fa01 f202 	lsl.w	r2, r1, r2
 800746a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007480:	2b00      	cmp	r3, #0
 8007482:	d003      	beq.n	800748c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	4798      	blx	r3
    }
  }
  return status;
 800748c:	7bfb      	ldrb	r3, [r7, #15]
}
 800748e:	4618      	mov	r0, r3
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}

08007496 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007496:	b580      	push	{r7, lr}
 8007498:	b084      	sub	sp, #16
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074b2:	f003 031c 	and.w	r3, r3, #28
 80074b6:	2204      	movs	r2, #4
 80074b8:	409a      	lsls	r2, r3
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	4013      	ands	r3, r2
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d026      	beq.n	8007510 <HAL_DMA_IRQHandler+0x7a>
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	f003 0304 	and.w	r3, r3, #4
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d021      	beq.n	8007510 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f003 0320 	and.w	r3, r3, #32
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d107      	bne.n	80074ea <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f022 0204 	bic.w	r2, r2, #4
 80074e8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074ee:	f003 021c 	and.w	r2, r3, #28
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f6:	2104      	movs	r1, #4
 80074f8:	fa01 f202 	lsl.w	r2, r1, r2
 80074fc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007502:	2b00      	cmp	r3, #0
 8007504:	d071      	beq.n	80075ea <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800750e:	e06c      	b.n	80075ea <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007514:	f003 031c 	and.w	r3, r3, #28
 8007518:	2202      	movs	r2, #2
 800751a:	409a      	lsls	r2, r3
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	4013      	ands	r3, r2
 8007520:	2b00      	cmp	r3, #0
 8007522:	d02e      	beq.n	8007582 <HAL_DMA_IRQHandler+0xec>
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	f003 0302 	and.w	r3, r3, #2
 800752a:	2b00      	cmp	r3, #0
 800752c:	d029      	beq.n	8007582 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 0320 	and.w	r3, r3, #32
 8007538:	2b00      	cmp	r3, #0
 800753a:	d10b      	bne.n	8007554 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f022 020a 	bic.w	r2, r2, #10
 800754a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007558:	f003 021c 	and.w	r2, r3, #28
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007560:	2102      	movs	r1, #2
 8007562:	fa01 f202 	lsl.w	r2, r1, r2
 8007566:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007574:	2b00      	cmp	r3, #0
 8007576:	d038      	beq.n	80075ea <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8007580:	e033      	b.n	80075ea <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007586:	f003 031c 	and.w	r3, r3, #28
 800758a:	2208      	movs	r2, #8
 800758c:	409a      	lsls	r2, r3
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	4013      	ands	r3, r2
 8007592:	2b00      	cmp	r3, #0
 8007594:	d02a      	beq.n	80075ec <HAL_DMA_IRQHandler+0x156>
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	f003 0308 	and.w	r3, r3, #8
 800759c:	2b00      	cmp	r3, #0
 800759e:	d025      	beq.n	80075ec <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f022 020e 	bic.w	r2, r2, #14
 80075ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075b4:	f003 021c 	and.w	r2, r3, #28
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075bc:	2101      	movs	r1, #1
 80075be:	fa01 f202 	lsl.w	r2, r1, r2
 80075c2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2201      	movs	r2, #1
 80075ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d004      	beq.n	80075ec <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80075ea:	bf00      	nop
 80075ec:	bf00      	nop
}
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007602:	b2db      	uxtb	r3, r3
}
 8007604:	4618      	mov	r0, r3
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	607a      	str	r2, [r7, #4]
 800761c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007622:	f003 021c 	and.w	r2, r3, #28
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762a:	2101      	movs	r1, #1
 800762c:	fa01 f202 	lsl.w	r2, r1, r2
 8007630:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	683a      	ldr	r2, [r7, #0]
 8007638:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	2b10      	cmp	r3, #16
 8007640:	d108      	bne.n	8007654 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	68ba      	ldr	r2, [r7, #8]
 8007650:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007652:	e007      	b.n	8007664 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	68ba      	ldr	r2, [r7, #8]
 800765a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	60da      	str	r2, [r3, #12]
}
 8007664:	bf00      	nop
 8007666:	3714      	adds	r7, #20
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007670:	b480      	push	{r7}
 8007672:	b087      	sub	sp, #28
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800767a:	2300      	movs	r3, #0
 800767c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800767e:	e17f      	b.n	8007980 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	2101      	movs	r1, #1
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	fa01 f303 	lsl.w	r3, r1, r3
 800768c:	4013      	ands	r3, r2
 800768e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2b00      	cmp	r3, #0
 8007694:	f000 8171 	beq.w	800797a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	f003 0303 	and.w	r3, r3, #3
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d005      	beq.n	80076b0 <HAL_GPIO_Init+0x40>
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	f003 0303 	and.w	r3, r3, #3
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	d130      	bne.n	8007712 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	005b      	lsls	r3, r3, #1
 80076ba:	2203      	movs	r2, #3
 80076bc:	fa02 f303 	lsl.w	r3, r2, r3
 80076c0:	43db      	mvns	r3, r3
 80076c2:	693a      	ldr	r2, [r7, #16]
 80076c4:	4013      	ands	r3, r2
 80076c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	68da      	ldr	r2, [r3, #12]
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	005b      	lsls	r3, r3, #1
 80076d0:	fa02 f303 	lsl.w	r3, r2, r3
 80076d4:	693a      	ldr	r2, [r7, #16]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	693a      	ldr	r2, [r7, #16]
 80076de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80076e6:	2201      	movs	r2, #1
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	fa02 f303 	lsl.w	r3, r2, r3
 80076ee:	43db      	mvns	r3, r3
 80076f0:	693a      	ldr	r2, [r7, #16]
 80076f2:	4013      	ands	r3, r2
 80076f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	091b      	lsrs	r3, r3, #4
 80076fc:	f003 0201 	and.w	r2, r3, #1
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	fa02 f303 	lsl.w	r3, r2, r3
 8007706:	693a      	ldr	r2, [r7, #16]
 8007708:	4313      	orrs	r3, r2
 800770a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	693a      	ldr	r2, [r7, #16]
 8007710:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	f003 0303 	and.w	r3, r3, #3
 800771a:	2b03      	cmp	r3, #3
 800771c:	d118      	bne.n	8007750 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007722:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8007724:	2201      	movs	r2, #1
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	fa02 f303 	lsl.w	r3, r2, r3
 800772c:	43db      	mvns	r3, r3
 800772e:	693a      	ldr	r2, [r7, #16]
 8007730:	4013      	ands	r3, r2
 8007732:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	08db      	lsrs	r3, r3, #3
 800773a:	f003 0201 	and.w	r2, r3, #1
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	fa02 f303 	lsl.w	r3, r2, r3
 8007744:	693a      	ldr	r2, [r7, #16]
 8007746:	4313      	orrs	r3, r2
 8007748:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	693a      	ldr	r2, [r7, #16]
 800774e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	f003 0303 	and.w	r3, r3, #3
 8007758:	2b03      	cmp	r3, #3
 800775a:	d017      	beq.n	800778c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	005b      	lsls	r3, r3, #1
 8007766:	2203      	movs	r2, #3
 8007768:	fa02 f303 	lsl.w	r3, r2, r3
 800776c:	43db      	mvns	r3, r3
 800776e:	693a      	ldr	r2, [r7, #16]
 8007770:	4013      	ands	r3, r2
 8007772:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	689a      	ldr	r2, [r3, #8]
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	005b      	lsls	r3, r3, #1
 800777c:	fa02 f303 	lsl.w	r3, r2, r3
 8007780:	693a      	ldr	r2, [r7, #16]
 8007782:	4313      	orrs	r3, r2
 8007784:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	693a      	ldr	r2, [r7, #16]
 800778a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	f003 0303 	and.w	r3, r3, #3
 8007794:	2b02      	cmp	r3, #2
 8007796:	d123      	bne.n	80077e0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	08da      	lsrs	r2, r3, #3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	3208      	adds	r2, #8
 80077a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	f003 0307 	and.w	r3, r3, #7
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	220f      	movs	r2, #15
 80077b0:	fa02 f303 	lsl.w	r3, r2, r3
 80077b4:	43db      	mvns	r3, r3
 80077b6:	693a      	ldr	r2, [r7, #16]
 80077b8:	4013      	ands	r3, r2
 80077ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	691a      	ldr	r2, [r3, #16]
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	f003 0307 	and.w	r3, r3, #7
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	fa02 f303 	lsl.w	r3, r2, r3
 80077cc:	693a      	ldr	r2, [r7, #16]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	08da      	lsrs	r2, r3, #3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	3208      	adds	r2, #8
 80077da:	6939      	ldr	r1, [r7, #16]
 80077dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	005b      	lsls	r3, r3, #1
 80077ea:	2203      	movs	r2, #3
 80077ec:	fa02 f303 	lsl.w	r3, r2, r3
 80077f0:	43db      	mvns	r3, r3
 80077f2:	693a      	ldr	r2, [r7, #16]
 80077f4:	4013      	ands	r3, r2
 80077f6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	f003 0203 	and.w	r2, r3, #3
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	005b      	lsls	r3, r3, #1
 8007804:	fa02 f303 	lsl.w	r3, r2, r3
 8007808:	693a      	ldr	r2, [r7, #16]
 800780a:	4313      	orrs	r3, r2
 800780c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	693a      	ldr	r2, [r7, #16]
 8007812:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800781c:	2b00      	cmp	r3, #0
 800781e:	f000 80ac 	beq.w	800797a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007822:	4b5f      	ldr	r3, [pc, #380]	; (80079a0 <HAL_GPIO_Init+0x330>)
 8007824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007826:	4a5e      	ldr	r2, [pc, #376]	; (80079a0 <HAL_GPIO_Init+0x330>)
 8007828:	f043 0301 	orr.w	r3, r3, #1
 800782c:	6613      	str	r3, [r2, #96]	; 0x60
 800782e:	4b5c      	ldr	r3, [pc, #368]	; (80079a0 <HAL_GPIO_Init+0x330>)
 8007830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007832:	f003 0301 	and.w	r3, r3, #1
 8007836:	60bb      	str	r3, [r7, #8]
 8007838:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800783a:	4a5a      	ldr	r2, [pc, #360]	; (80079a4 <HAL_GPIO_Init+0x334>)
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	089b      	lsrs	r3, r3, #2
 8007840:	3302      	adds	r3, #2
 8007842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007846:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	f003 0303 	and.w	r3, r3, #3
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	220f      	movs	r2, #15
 8007852:	fa02 f303 	lsl.w	r3, r2, r3
 8007856:	43db      	mvns	r3, r3
 8007858:	693a      	ldr	r2, [r7, #16]
 800785a:	4013      	ands	r3, r2
 800785c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007864:	d025      	beq.n	80078b2 <HAL_GPIO_Init+0x242>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4a4f      	ldr	r2, [pc, #316]	; (80079a8 <HAL_GPIO_Init+0x338>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d01f      	beq.n	80078ae <HAL_GPIO_Init+0x23e>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4a4e      	ldr	r2, [pc, #312]	; (80079ac <HAL_GPIO_Init+0x33c>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d019      	beq.n	80078aa <HAL_GPIO_Init+0x23a>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4a4d      	ldr	r2, [pc, #308]	; (80079b0 <HAL_GPIO_Init+0x340>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d013      	beq.n	80078a6 <HAL_GPIO_Init+0x236>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4a4c      	ldr	r2, [pc, #304]	; (80079b4 <HAL_GPIO_Init+0x344>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d00d      	beq.n	80078a2 <HAL_GPIO_Init+0x232>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4a4b      	ldr	r2, [pc, #300]	; (80079b8 <HAL_GPIO_Init+0x348>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d007      	beq.n	800789e <HAL_GPIO_Init+0x22e>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4a4a      	ldr	r2, [pc, #296]	; (80079bc <HAL_GPIO_Init+0x34c>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d101      	bne.n	800789a <HAL_GPIO_Init+0x22a>
 8007896:	2306      	movs	r3, #6
 8007898:	e00c      	b.n	80078b4 <HAL_GPIO_Init+0x244>
 800789a:	2307      	movs	r3, #7
 800789c:	e00a      	b.n	80078b4 <HAL_GPIO_Init+0x244>
 800789e:	2305      	movs	r3, #5
 80078a0:	e008      	b.n	80078b4 <HAL_GPIO_Init+0x244>
 80078a2:	2304      	movs	r3, #4
 80078a4:	e006      	b.n	80078b4 <HAL_GPIO_Init+0x244>
 80078a6:	2303      	movs	r3, #3
 80078a8:	e004      	b.n	80078b4 <HAL_GPIO_Init+0x244>
 80078aa:	2302      	movs	r3, #2
 80078ac:	e002      	b.n	80078b4 <HAL_GPIO_Init+0x244>
 80078ae:	2301      	movs	r3, #1
 80078b0:	e000      	b.n	80078b4 <HAL_GPIO_Init+0x244>
 80078b2:	2300      	movs	r3, #0
 80078b4:	697a      	ldr	r2, [r7, #20]
 80078b6:	f002 0203 	and.w	r2, r2, #3
 80078ba:	0092      	lsls	r2, r2, #2
 80078bc:	4093      	lsls	r3, r2
 80078be:	693a      	ldr	r2, [r7, #16]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80078c4:	4937      	ldr	r1, [pc, #220]	; (80079a4 <HAL_GPIO_Init+0x334>)
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	089b      	lsrs	r3, r3, #2
 80078ca:	3302      	adds	r3, #2
 80078cc:	693a      	ldr	r2, [r7, #16]
 80078ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80078d2:	4b3b      	ldr	r3, [pc, #236]	; (80079c0 <HAL_GPIO_Init+0x350>)
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	43db      	mvns	r3, r3
 80078dc:	693a      	ldr	r2, [r7, #16]
 80078de:	4013      	ands	r3, r2
 80078e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d003      	beq.n	80078f6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80078ee:	693a      	ldr	r2, [r7, #16]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80078f6:	4a32      	ldr	r2, [pc, #200]	; (80079c0 <HAL_GPIO_Init+0x350>)
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80078fc:	4b30      	ldr	r3, [pc, #192]	; (80079c0 <HAL_GPIO_Init+0x350>)
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	43db      	mvns	r3, r3
 8007906:	693a      	ldr	r2, [r7, #16]
 8007908:	4013      	ands	r3, r2
 800790a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007914:	2b00      	cmp	r3, #0
 8007916:	d003      	beq.n	8007920 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8007918:	693a      	ldr	r2, [r7, #16]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	4313      	orrs	r3, r2
 800791e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007920:	4a27      	ldr	r2, [pc, #156]	; (80079c0 <HAL_GPIO_Init+0x350>)
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007926:	4b26      	ldr	r3, [pc, #152]	; (80079c0 <HAL_GPIO_Init+0x350>)
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	43db      	mvns	r3, r3
 8007930:	693a      	ldr	r2, [r7, #16]
 8007932:	4013      	ands	r3, r2
 8007934:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800793e:	2b00      	cmp	r3, #0
 8007940:	d003      	beq.n	800794a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8007942:	693a      	ldr	r2, [r7, #16]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	4313      	orrs	r3, r2
 8007948:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800794a:	4a1d      	ldr	r2, [pc, #116]	; (80079c0 <HAL_GPIO_Init+0x350>)
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8007950:	4b1b      	ldr	r3, [pc, #108]	; (80079c0 <HAL_GPIO_Init+0x350>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	43db      	mvns	r3, r3
 800795a:	693a      	ldr	r2, [r7, #16]
 800795c:	4013      	ands	r3, r2
 800795e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007968:	2b00      	cmp	r3, #0
 800796a:	d003      	beq.n	8007974 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800796c:	693a      	ldr	r2, [r7, #16]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	4313      	orrs	r3, r2
 8007972:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007974:	4a12      	ldr	r2, [pc, #72]	; (80079c0 <HAL_GPIO_Init+0x350>)
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	3301      	adds	r3, #1
 800797e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	fa22 f303 	lsr.w	r3, r2, r3
 800798a:	2b00      	cmp	r3, #0
 800798c:	f47f ae78 	bne.w	8007680 <HAL_GPIO_Init+0x10>
  }
}
 8007990:	bf00      	nop
 8007992:	bf00      	nop
 8007994:	371c      	adds	r7, #28
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop
 80079a0:	40021000 	.word	0x40021000
 80079a4:	40010000 	.word	0x40010000
 80079a8:	48000400 	.word	0x48000400
 80079ac:	48000800 	.word	0x48000800
 80079b0:	48000c00 	.word	0x48000c00
 80079b4:	48001000 	.word	0x48001000
 80079b8:	48001400 	.word	0x48001400
 80079bc:	48001800 	.word	0x48001800
 80079c0:	40010400 	.word	0x40010400

080079c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b085      	sub	sp, #20
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	460b      	mov	r3, r1
 80079ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	691a      	ldr	r2, [r3, #16]
 80079d4:	887b      	ldrh	r3, [r7, #2]
 80079d6:	4013      	ands	r3, r2
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d002      	beq.n	80079e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80079dc:	2301      	movs	r3, #1
 80079de:	73fb      	strb	r3, [r7, #15]
 80079e0:	e001      	b.n	80079e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80079e2:	2300      	movs	r3, #0
 80079e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80079e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3714      	adds	r7, #20
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	460b      	mov	r3, r1
 80079fe:	807b      	strh	r3, [r7, #2]
 8007a00:	4613      	mov	r3, r2
 8007a02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007a04:	787b      	ldrb	r3, [r7, #1]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d003      	beq.n	8007a12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007a0a:	887a      	ldrh	r2, [r7, #2]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007a10:	e002      	b.n	8007a18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007a12:	887a      	ldrh	r2, [r7, #2]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007a18:	bf00      	nop
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b085      	sub	sp, #20
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	695b      	ldr	r3, [r3, #20]
 8007a34:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007a36:	887a      	ldrh	r2, [r7, #2]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	041a      	lsls	r2, r3, #16
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	43d9      	mvns	r1, r3
 8007a42:	887b      	ldrh	r3, [r7, #2]
 8007a44:	400b      	ands	r3, r1
 8007a46:	431a      	orrs	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	619a      	str	r2, [r3, #24]
}
 8007a4c:	bf00      	nop
 8007a4e:	3714      	adds	r7, #20
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	4603      	mov	r3, r0
 8007a60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007a62:	4b08      	ldr	r3, [pc, #32]	; (8007a84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007a64:	695a      	ldr	r2, [r3, #20]
 8007a66:	88fb      	ldrh	r3, [r7, #6]
 8007a68:	4013      	ands	r3, r2
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d006      	beq.n	8007a7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007a6e:	4a05      	ldr	r2, [pc, #20]	; (8007a84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007a70:	88fb      	ldrh	r3, [r7, #6]
 8007a72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007a74:	88fb      	ldrh	r3, [r7, #6]
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7fd fb0a 	bl	8005090 <HAL_GPIO_EXTI_Callback>
  }
}
 8007a7c:	bf00      	nop
 8007a7e:	3708      	adds	r7, #8
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	40010400 	.word	0x40010400

08007a88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d101      	bne.n	8007a9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	e081      	b.n	8007b9e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d106      	bne.n	8007ab4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f7fd ffa4 	bl	80059fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2224      	movs	r2, #36	; 0x24
 8007ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f022 0201 	bic.w	r2, r2, #1
 8007aca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	685a      	ldr	r2, [r3, #4]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007ad8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	689a      	ldr	r2, [r3, #8]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007ae8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	68db      	ldr	r3, [r3, #12]
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d107      	bne.n	8007b02 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	689a      	ldr	r2, [r3, #8]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007afe:	609a      	str	r2, [r3, #8]
 8007b00:	e006      	b.n	8007b10 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	689a      	ldr	r2, [r3, #8]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007b0e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	2b02      	cmp	r3, #2
 8007b16:	d104      	bne.n	8007b22 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b20:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	6812      	ldr	r2, [r2, #0]
 8007b2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007b30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b34:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	68da      	ldr	r2, [r3, #12]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007b44:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	691a      	ldr	r2, [r3, #16]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	695b      	ldr	r3, [r3, #20]
 8007b4e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	699b      	ldr	r3, [r3, #24]
 8007b56:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	430a      	orrs	r2, r1
 8007b5e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	69d9      	ldr	r1, [r3, #28]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6a1a      	ldr	r2, [r3, #32]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	430a      	orrs	r2, r1
 8007b6e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f042 0201 	orr.w	r2, r2, #1
 8007b7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2220      	movs	r2, #32
 8007b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3708      	adds	r7, #8
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
	...

08007ba8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b088      	sub	sp, #32
 8007bac:	af02      	add	r7, sp, #8
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	607a      	str	r2, [r7, #4]
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	817b      	strh	r3, [r7, #10]
 8007bb8:	4613      	mov	r3, r2
 8007bba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	2b20      	cmp	r3, #32
 8007bc6:	f040 80da 	bne.w	8007d7e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d101      	bne.n	8007bd8 <HAL_I2C_Master_Transmit+0x30>
 8007bd4:	2302      	movs	r3, #2
 8007bd6:	e0d3      	b.n	8007d80 <HAL_I2C_Master_Transmit+0x1d8>
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007be0:	f7ff f94e 	bl	8006e80 <HAL_GetTick>
 8007be4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	9300      	str	r3, [sp, #0]
 8007bea:	2319      	movs	r3, #25
 8007bec:	2201      	movs	r2, #1
 8007bee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	f001 f8d1 	bl	8008d9a <I2C_WaitOnFlagUntilTimeout>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d001      	beq.n	8007c02 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e0be      	b.n	8007d80 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2221      	movs	r2, #33	; 0x21
 8007c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2210      	movs	r2, #16
 8007c0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2200      	movs	r2, #0
 8007c16:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	893a      	ldrh	r2, [r7, #8]
 8007c22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2200      	movs	r2, #0
 8007c28:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	2bff      	cmp	r3, #255	; 0xff
 8007c32:	d90e      	bls.n	8007c52 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	22ff      	movs	r2, #255	; 0xff
 8007c38:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c3e:	b2da      	uxtb	r2, r3
 8007c40:	8979      	ldrh	r1, [r7, #10]
 8007c42:	4b51      	ldr	r3, [pc, #324]	; (8007d88 <HAL_I2C_Master_Transmit+0x1e0>)
 8007c44:	9300      	str	r3, [sp, #0]
 8007c46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c4a:	68f8      	ldr	r0, [r7, #12]
 8007c4c:	f001 fa4e 	bl	80090ec <I2C_TransferConfig>
 8007c50:	e06c      	b.n	8007d2c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c56:	b29a      	uxth	r2, r3
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c60:	b2da      	uxtb	r2, r3
 8007c62:	8979      	ldrh	r1, [r7, #10]
 8007c64:	4b48      	ldr	r3, [pc, #288]	; (8007d88 <HAL_I2C_Master_Transmit+0x1e0>)
 8007c66:	9300      	str	r3, [sp, #0]
 8007c68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c6c:	68f8      	ldr	r0, [r7, #12]
 8007c6e:	f001 fa3d 	bl	80090ec <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007c72:	e05b      	b.n	8007d2c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c74:	697a      	ldr	r2, [r7, #20]
 8007c76:	6a39      	ldr	r1, [r7, #32]
 8007c78:	68f8      	ldr	r0, [r7, #12]
 8007c7a:	f001 f8ce 	bl	8008e1a <I2C_WaitOnTXISFlagUntilTimeout>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d001      	beq.n	8007c88 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	e07b      	b.n	8007d80 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8c:	781a      	ldrb	r2, [r3, #0]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c98:	1c5a      	adds	r2, r3, #1
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	3b01      	subs	r3, #1
 8007ca6:	b29a      	uxth	r2, r3
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cb0:	3b01      	subs	r3, #1
 8007cb2:	b29a      	uxth	r2, r3
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d034      	beq.n	8007d2c <HAL_I2C_Master_Transmit+0x184>
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d130      	bne.n	8007d2c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	9300      	str	r3, [sp, #0]
 8007cce:	6a3b      	ldr	r3, [r7, #32]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	2180      	movs	r1, #128	; 0x80
 8007cd4:	68f8      	ldr	r0, [r7, #12]
 8007cd6:	f001 f860 	bl	8008d9a <I2C_WaitOnFlagUntilTimeout>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d001      	beq.n	8007ce4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e04d      	b.n	8007d80 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	2bff      	cmp	r3, #255	; 0xff
 8007cec:	d90e      	bls.n	8007d0c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	22ff      	movs	r2, #255	; 0xff
 8007cf2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cf8:	b2da      	uxtb	r2, r3
 8007cfa:	8979      	ldrh	r1, [r7, #10]
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	9300      	str	r3, [sp, #0]
 8007d00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	f001 f9f1 	bl	80090ec <I2C_TransferConfig>
 8007d0a:	e00f      	b.n	8007d2c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d10:	b29a      	uxth	r2, r3
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d1a:	b2da      	uxtb	r2, r3
 8007d1c:	8979      	ldrh	r1, [r7, #10]
 8007d1e:	2300      	movs	r3, #0
 8007d20:	9300      	str	r3, [sp, #0]
 8007d22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d26:	68f8      	ldr	r0, [r7, #12]
 8007d28:	f001 f9e0 	bl	80090ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d19e      	bne.n	8007c74 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d36:	697a      	ldr	r2, [r7, #20]
 8007d38:	6a39      	ldr	r1, [r7, #32]
 8007d3a:	68f8      	ldr	r0, [r7, #12]
 8007d3c:	f001 f8ad 	bl	8008e9a <I2C_WaitOnSTOPFlagUntilTimeout>
 8007d40:	4603      	mov	r3, r0
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d001      	beq.n	8007d4a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	e01a      	b.n	8007d80 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2220      	movs	r2, #32
 8007d50:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	6859      	ldr	r1, [r3, #4]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	4b0b      	ldr	r3, [pc, #44]	; (8007d8c <HAL_I2C_Master_Transmit+0x1e4>)
 8007d5e:	400b      	ands	r3, r1
 8007d60:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2220      	movs	r2, #32
 8007d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	e000      	b.n	8007d80 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007d7e:	2302      	movs	r3, #2
  }
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3718      	adds	r7, #24
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	80002000 	.word	0x80002000
 8007d8c:	fe00e800 	.word	0xfe00e800

08007d90 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b088      	sub	sp, #32
 8007d94:	af02      	add	r7, sp, #8
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	4608      	mov	r0, r1
 8007d9a:	4611      	mov	r1, r2
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	4603      	mov	r3, r0
 8007da0:	817b      	strh	r3, [r7, #10]
 8007da2:	460b      	mov	r3, r1
 8007da4:	813b      	strh	r3, [r7, #8]
 8007da6:	4613      	mov	r3, r2
 8007da8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	2b20      	cmp	r3, #32
 8007db4:	f040 80f9 	bne.w	8007faa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007db8:	6a3b      	ldr	r3, [r7, #32]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d002      	beq.n	8007dc4 <HAL_I2C_Mem_Write+0x34>
 8007dbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d105      	bne.n	8007dd0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e0ed      	b.n	8007fac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d101      	bne.n	8007dde <HAL_I2C_Mem_Write+0x4e>
 8007dda:	2302      	movs	r3, #2
 8007ddc:	e0e6      	b.n	8007fac <HAL_I2C_Mem_Write+0x21c>
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2201      	movs	r2, #1
 8007de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007de6:	f7ff f84b 	bl	8006e80 <HAL_GetTick>
 8007dea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	9300      	str	r3, [sp, #0]
 8007df0:	2319      	movs	r3, #25
 8007df2:	2201      	movs	r2, #1
 8007df4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f000 ffce 	bl	8008d9a <I2C_WaitOnFlagUntilTimeout>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d001      	beq.n	8007e08 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	e0d1      	b.n	8007fac <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2221      	movs	r2, #33	; 0x21
 8007e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2240      	movs	r2, #64	; 0x40
 8007e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6a3a      	ldr	r2, [r7, #32]
 8007e22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007e28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007e30:	88f8      	ldrh	r0, [r7, #6]
 8007e32:	893a      	ldrh	r2, [r7, #8]
 8007e34:	8979      	ldrh	r1, [r7, #10]
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	9301      	str	r3, [sp, #4]
 8007e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3c:	9300      	str	r3, [sp, #0]
 8007e3e:	4603      	mov	r3, r0
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	f000 fb87 	bl	8008554 <I2C_RequestMemoryWrite>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d005      	beq.n	8007e58 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007e54:	2301      	movs	r3, #1
 8007e56:	e0a9      	b.n	8007fac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	2bff      	cmp	r3, #255	; 0xff
 8007e60:	d90e      	bls.n	8007e80 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	22ff      	movs	r2, #255	; 0xff
 8007e66:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e6c:	b2da      	uxtb	r2, r3
 8007e6e:	8979      	ldrh	r1, [r7, #10]
 8007e70:	2300      	movs	r3, #0
 8007e72:	9300      	str	r3, [sp, #0]
 8007e74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e78:	68f8      	ldr	r0, [r7, #12]
 8007e7a:	f001 f937 	bl	80090ec <I2C_TransferConfig>
 8007e7e:	e00f      	b.n	8007ea0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e84:	b29a      	uxth	r2, r3
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e8e:	b2da      	uxtb	r2, r3
 8007e90:	8979      	ldrh	r1, [r7, #10]
 8007e92:	2300      	movs	r3, #0
 8007e94:	9300      	str	r3, [sp, #0]
 8007e96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	f001 f926 	bl	80090ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ea0:	697a      	ldr	r2, [r7, #20]
 8007ea2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	f000 ffb8 	bl	8008e1a <I2C_WaitOnTXISFlagUntilTimeout>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d001      	beq.n	8007eb4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e07b      	b.n	8007fac <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb8:	781a      	ldrb	r2, [r3, #0]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec4:	1c5a      	adds	r2, r3, #1
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	3b01      	subs	r3, #1
 8007ed2:	b29a      	uxth	r2, r3
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007edc:	3b01      	subs	r3, #1
 8007ede:	b29a      	uxth	r2, r3
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d034      	beq.n	8007f58 <HAL_I2C_Mem_Write+0x1c8>
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d130      	bne.n	8007f58 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	9300      	str	r3, [sp, #0]
 8007efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efc:	2200      	movs	r2, #0
 8007efe:	2180      	movs	r1, #128	; 0x80
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	f000 ff4a 	bl	8008d9a <I2C_WaitOnFlagUntilTimeout>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d001      	beq.n	8007f10 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e04d      	b.n	8007fac <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	2bff      	cmp	r3, #255	; 0xff
 8007f18:	d90e      	bls.n	8007f38 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	22ff      	movs	r2, #255	; 0xff
 8007f1e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f24:	b2da      	uxtb	r2, r3
 8007f26:	8979      	ldrh	r1, [r7, #10]
 8007f28:	2300      	movs	r3, #0
 8007f2a:	9300      	str	r3, [sp, #0]
 8007f2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	f001 f8db 	bl	80090ec <I2C_TransferConfig>
 8007f36:	e00f      	b.n	8007f58 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f3c:	b29a      	uxth	r2, r3
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f46:	b2da      	uxtb	r2, r3
 8007f48:	8979      	ldrh	r1, [r7, #10]
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	9300      	str	r3, [sp, #0]
 8007f4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007f52:	68f8      	ldr	r0, [r7, #12]
 8007f54:	f001 f8ca 	bl	80090ec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d19e      	bne.n	8007ea0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f62:	697a      	ldr	r2, [r7, #20]
 8007f64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f66:	68f8      	ldr	r0, [r7, #12]
 8007f68:	f000 ff97 	bl	8008e9a <I2C_WaitOnSTOPFlagUntilTimeout>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d001      	beq.n	8007f76 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	e01a      	b.n	8007fac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2220      	movs	r2, #32
 8007f7c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	6859      	ldr	r1, [r3, #4]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	4b0a      	ldr	r3, [pc, #40]	; (8007fb4 <HAL_I2C_Mem_Write+0x224>)
 8007f8a:	400b      	ands	r3, r1
 8007f8c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2220      	movs	r2, #32
 8007f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	e000      	b.n	8007fac <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007faa:	2302      	movs	r3, #2
  }
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3718      	adds	r7, #24
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	fe00e800 	.word	0xfe00e800

08007fb8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b088      	sub	sp, #32
 8007fbc:	af02      	add	r7, sp, #8
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	4608      	mov	r0, r1
 8007fc2:	4611      	mov	r1, r2
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	817b      	strh	r3, [r7, #10]
 8007fca:	460b      	mov	r3, r1
 8007fcc:	813b      	strh	r3, [r7, #8]
 8007fce:	4613      	mov	r3, r2
 8007fd0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	2b20      	cmp	r3, #32
 8007fdc:	f040 80fd 	bne.w	80081da <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fe0:	6a3b      	ldr	r3, [r7, #32]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d002      	beq.n	8007fec <HAL_I2C_Mem_Read+0x34>
 8007fe6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d105      	bne.n	8007ff8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ff2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	e0f1      	b.n	80081dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d101      	bne.n	8008006 <HAL_I2C_Mem_Read+0x4e>
 8008002:	2302      	movs	r3, #2
 8008004:	e0ea      	b.n	80081dc <HAL_I2C_Mem_Read+0x224>
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2201      	movs	r2, #1
 800800a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800800e:	f7fe ff37 	bl	8006e80 <HAL_GetTick>
 8008012:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	9300      	str	r3, [sp, #0]
 8008018:	2319      	movs	r3, #25
 800801a:	2201      	movs	r2, #1
 800801c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008020:	68f8      	ldr	r0, [r7, #12]
 8008022:	f000 feba 	bl	8008d9a <I2C_WaitOnFlagUntilTimeout>
 8008026:	4603      	mov	r3, r0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d001      	beq.n	8008030 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	e0d5      	b.n	80081dc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2222      	movs	r2, #34	; 0x22
 8008034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2240      	movs	r2, #64	; 0x40
 800803c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2200      	movs	r2, #0
 8008044:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6a3a      	ldr	r2, [r7, #32]
 800804a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008050:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2200      	movs	r2, #0
 8008056:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008058:	88f8      	ldrh	r0, [r7, #6]
 800805a:	893a      	ldrh	r2, [r7, #8]
 800805c:	8979      	ldrh	r1, [r7, #10]
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	9301      	str	r3, [sp, #4]
 8008062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008064:	9300      	str	r3, [sp, #0]
 8008066:	4603      	mov	r3, r0
 8008068:	68f8      	ldr	r0, [r7, #12]
 800806a:	f000 fac7 	bl	80085fc <I2C_RequestMemoryRead>
 800806e:	4603      	mov	r3, r0
 8008070:	2b00      	cmp	r3, #0
 8008072:	d005      	beq.n	8008080 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2200      	movs	r2, #0
 8008078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800807c:	2301      	movs	r3, #1
 800807e:	e0ad      	b.n	80081dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008084:	b29b      	uxth	r3, r3
 8008086:	2bff      	cmp	r3, #255	; 0xff
 8008088:	d90e      	bls.n	80080a8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	22ff      	movs	r2, #255	; 0xff
 800808e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008094:	b2da      	uxtb	r2, r3
 8008096:	8979      	ldrh	r1, [r7, #10]
 8008098:	4b52      	ldr	r3, [pc, #328]	; (80081e4 <HAL_I2C_Mem_Read+0x22c>)
 800809a:	9300      	str	r3, [sp, #0]
 800809c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f001 f823 	bl	80090ec <I2C_TransferConfig>
 80080a6:	e00f      	b.n	80080c8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080ac:	b29a      	uxth	r2, r3
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080b6:	b2da      	uxtb	r2, r3
 80080b8:	8979      	ldrh	r1, [r7, #10]
 80080ba:	4b4a      	ldr	r3, [pc, #296]	; (80081e4 <HAL_I2C_Mem_Read+0x22c>)
 80080bc:	9300      	str	r3, [sp, #0]
 80080be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80080c2:	68f8      	ldr	r0, [r7, #12]
 80080c4:	f001 f812 	bl	80090ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	9300      	str	r3, [sp, #0]
 80080cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ce:	2200      	movs	r2, #0
 80080d0:	2104      	movs	r1, #4
 80080d2:	68f8      	ldr	r0, [r7, #12]
 80080d4:	f000 fe61 	bl	8008d9a <I2C_WaitOnFlagUntilTimeout>
 80080d8:	4603      	mov	r3, r0
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d001      	beq.n	80080e2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	e07c      	b.n	80081dc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ec:	b2d2      	uxtb	r2, r2
 80080ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f4:	1c5a      	adds	r2, r3, #1
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080fe:	3b01      	subs	r3, #1
 8008100:	b29a      	uxth	r2, r3
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800810a:	b29b      	uxth	r3, r3
 800810c:	3b01      	subs	r3, #1
 800810e:	b29a      	uxth	r2, r3
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008118:	b29b      	uxth	r3, r3
 800811a:	2b00      	cmp	r3, #0
 800811c:	d034      	beq.n	8008188 <HAL_I2C_Mem_Read+0x1d0>
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008122:	2b00      	cmp	r3, #0
 8008124:	d130      	bne.n	8008188 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	9300      	str	r3, [sp, #0]
 800812a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800812c:	2200      	movs	r2, #0
 800812e:	2180      	movs	r1, #128	; 0x80
 8008130:	68f8      	ldr	r0, [r7, #12]
 8008132:	f000 fe32 	bl	8008d9a <I2C_WaitOnFlagUntilTimeout>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d001      	beq.n	8008140 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800813c:	2301      	movs	r3, #1
 800813e:	e04d      	b.n	80081dc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008144:	b29b      	uxth	r3, r3
 8008146:	2bff      	cmp	r3, #255	; 0xff
 8008148:	d90e      	bls.n	8008168 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	22ff      	movs	r2, #255	; 0xff
 800814e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008154:	b2da      	uxtb	r2, r3
 8008156:	8979      	ldrh	r1, [r7, #10]
 8008158:	2300      	movs	r3, #0
 800815a:	9300      	str	r3, [sp, #0]
 800815c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008160:	68f8      	ldr	r0, [r7, #12]
 8008162:	f000 ffc3 	bl	80090ec <I2C_TransferConfig>
 8008166:	e00f      	b.n	8008188 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800816c:	b29a      	uxth	r2, r3
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008176:	b2da      	uxtb	r2, r3
 8008178:	8979      	ldrh	r1, [r7, #10]
 800817a:	2300      	movs	r3, #0
 800817c:	9300      	str	r3, [sp, #0]
 800817e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008182:	68f8      	ldr	r0, [r7, #12]
 8008184:	f000 ffb2 	bl	80090ec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800818c:	b29b      	uxth	r3, r3
 800818e:	2b00      	cmp	r3, #0
 8008190:	d19a      	bne.n	80080c8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008192:	697a      	ldr	r2, [r7, #20]
 8008194:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	f000 fe7f 	bl	8008e9a <I2C_WaitOnSTOPFlagUntilTimeout>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d001      	beq.n	80081a6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	e01a      	b.n	80081dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	2220      	movs	r2, #32
 80081ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	6859      	ldr	r1, [r3, #4]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	4b0b      	ldr	r3, [pc, #44]	; (80081e8 <HAL_I2C_Mem_Read+0x230>)
 80081ba:	400b      	ands	r3, r1
 80081bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2220      	movs	r2, #32
 80081c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80081d6:	2300      	movs	r3, #0
 80081d8:	e000      	b.n	80081dc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80081da:	2302      	movs	r3, #2
  }
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3718      	adds	r7, #24
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	80002400 	.word	0x80002400
 80081e8:	fe00e800 	.word	0xfe00e800

080081ec <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	699b      	ldr	r3, [r3, #24]
 80081fa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008208:	2b00      	cmp	r3, #0
 800820a:	d005      	beq.n	8008218 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008210:	68ba      	ldr	r2, [r7, #8]
 8008212:	68f9      	ldr	r1, [r7, #12]
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	4798      	blx	r3
  }
}
 8008218:	bf00      	nop
 800821a:	3710      	adds	r7, #16
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b086      	sub	sp, #24
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	699b      	ldr	r3, [r3, #24]
 800822e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	0a1b      	lsrs	r3, r3, #8
 800823c:	f003 0301 	and.w	r3, r3, #1
 8008240:	2b00      	cmp	r3, #0
 8008242:	d010      	beq.n	8008266 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	09db      	lsrs	r3, r3, #7
 8008248:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800824c:	2b00      	cmp	r3, #0
 800824e:	d00a      	beq.n	8008266 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008254:	f043 0201 	orr.w	r2, r3, #1
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008264:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	0a9b      	lsrs	r3, r3, #10
 800826a:	f003 0301 	and.w	r3, r3, #1
 800826e:	2b00      	cmp	r3, #0
 8008270:	d010      	beq.n	8008294 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	09db      	lsrs	r3, r3, #7
 8008276:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800827a:	2b00      	cmp	r3, #0
 800827c:	d00a      	beq.n	8008294 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008282:	f043 0208 	orr.w	r2, r3, #8
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008292:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	0a5b      	lsrs	r3, r3, #9
 8008298:	f003 0301 	and.w	r3, r3, #1
 800829c:	2b00      	cmp	r3, #0
 800829e:	d010      	beq.n	80082c2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	09db      	lsrs	r3, r3, #7
 80082a4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d00a      	beq.n	80082c2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082b0:	f043 0202 	orr.w	r2, r3, #2
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082c0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082c6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f003 030b 	and.w	r3, r3, #11
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d003      	beq.n	80082da <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80082d2:	68f9      	ldr	r1, [r7, #12]
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 fc27 	bl	8008b28 <I2C_ITError>
  }
}
 80082da:	bf00      	nop
 80082dc:	3718      	adds	r7, #24
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80082e2:	b480      	push	{r7}
 80082e4:	b083      	sub	sp, #12
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80082ea:	bf00      	nop
 80082ec:	370c      	adds	r7, #12
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr

080082f6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80082f6:	b480      	push	{r7}
 80082f8:	b083      	sub	sp, #12
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80082fe:	bf00      	nop
 8008300:	370c      	adds	r7, #12
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr

0800830a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800830a:	b480      	push	{r7}
 800830c:	b083      	sub	sp, #12
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
 8008312:	460b      	mov	r3, r1
 8008314:	70fb      	strb	r3, [r7, #3]
 8008316:	4613      	mov	r3, r2
 8008318:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800831a:	bf00      	nop
 800831c:	370c      	adds	r7, #12
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr

08008326 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008326:	b480      	push	{r7}
 8008328:	b083      	sub	sp, #12
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800832e:	bf00      	nop
 8008330:	370c      	adds	r7, #12
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr

0800833a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800833a:	b480      	push	{r7}
 800833c:	b083      	sub	sp, #12
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008342:	bf00      	nop
 8008344:	370c      	adds	r7, #12
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr

0800834e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800834e:	b580      	push	{r7, lr}
 8008350:	b086      	sub	sp, #24
 8008352:	af00      	add	r7, sp, #0
 8008354:	60f8      	str	r0, [r7, #12]
 8008356:	60b9      	str	r1, [r7, #8]
 8008358:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800835e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800836a:	2b01      	cmp	r3, #1
 800836c:	d101      	bne.n	8008372 <I2C_Slave_ISR_IT+0x24>
 800836e:	2302      	movs	r3, #2
 8008370:	e0ec      	b.n	800854c <I2C_Slave_ISR_IT+0x1fe>
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2201      	movs	r2, #1
 8008376:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	095b      	lsrs	r3, r3, #5
 800837e:	f003 0301 	and.w	r3, r3, #1
 8008382:	2b00      	cmp	r3, #0
 8008384:	d009      	beq.n	800839a <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	095b      	lsrs	r3, r3, #5
 800838a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800838e:	2b00      	cmp	r3, #0
 8008390:	d003      	beq.n	800839a <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8008392:	6939      	ldr	r1, [r7, #16]
 8008394:	68f8      	ldr	r0, [r7, #12]
 8008396:	f000 fa67 	bl	8008868 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	091b      	lsrs	r3, r3, #4
 800839e:	f003 0301 	and.w	r3, r3, #1
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d04d      	beq.n	8008442 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	091b      	lsrs	r3, r3, #4
 80083aa:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d047      	beq.n	8008442 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d128      	bne.n	800840e <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	2b28      	cmp	r3, #40	; 0x28
 80083c6:	d108      	bne.n	80083da <I2C_Slave_ISR_IT+0x8c>
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80083ce:	d104      	bne.n	80083da <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80083d0:	6939      	ldr	r1, [r7, #16]
 80083d2:	68f8      	ldr	r0, [r7, #12]
 80083d4:	f000 fb52 	bl	8008a7c <I2C_ITListenCplt>
 80083d8:	e032      	b.n	8008440 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	2b29      	cmp	r3, #41	; 0x29
 80083e4:	d10e      	bne.n	8008404 <I2C_Slave_ISR_IT+0xb6>
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80083ec:	d00a      	beq.n	8008404 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	2210      	movs	r2, #16
 80083f4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80083f6:	68f8      	ldr	r0, [r7, #12]
 80083f8:	f000 fc8d 	bl	8008d16 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80083fc:	68f8      	ldr	r0, [r7, #12]
 80083fe:	f000 f9d5 	bl	80087ac <I2C_ITSlaveSeqCplt>
 8008402:	e01d      	b.n	8008440 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2210      	movs	r2, #16
 800840a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800840c:	e096      	b.n	800853c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	2210      	movs	r2, #16
 8008414:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800841a:	f043 0204 	orr.w	r2, r3, #4
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d004      	beq.n	8008432 <I2C_Slave_ISR_IT+0xe4>
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800842e:	f040 8085 	bne.w	800853c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008436:	4619      	mov	r1, r3
 8008438:	68f8      	ldr	r0, [r7, #12]
 800843a:	f000 fb75 	bl	8008b28 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800843e:	e07d      	b.n	800853c <I2C_Slave_ISR_IT+0x1ee>
 8008440:	e07c      	b.n	800853c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	089b      	lsrs	r3, r3, #2
 8008446:	f003 0301 	and.w	r3, r3, #1
 800844a:	2b00      	cmp	r3, #0
 800844c:	d030      	beq.n	80084b0 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	089b      	lsrs	r3, r3, #2
 8008452:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008456:	2b00      	cmp	r3, #0
 8008458:	d02a      	beq.n	80084b0 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800845e:	b29b      	uxth	r3, r3
 8008460:	2b00      	cmp	r3, #0
 8008462:	d018      	beq.n	8008496 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846e:	b2d2      	uxtb	r2, r2
 8008470:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008476:	1c5a      	adds	r2, r3, #1
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008480:	3b01      	subs	r3, #1
 8008482:	b29a      	uxth	r2, r3
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800848c:	b29b      	uxth	r3, r3
 800848e:	3b01      	subs	r3, #1
 8008490:	b29a      	uxth	r2, r3
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800849a:	b29b      	uxth	r3, r3
 800849c:	2b00      	cmp	r3, #0
 800849e:	d14f      	bne.n	8008540 <I2C_Slave_ISR_IT+0x1f2>
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80084a6:	d04b      	beq.n	8008540 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f000 f97f 	bl	80087ac <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80084ae:	e047      	b.n	8008540 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	08db      	lsrs	r3, r3, #3
 80084b4:	f003 0301 	and.w	r3, r3, #1
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d00a      	beq.n	80084d2 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	08db      	lsrs	r3, r3, #3
 80084c0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d004      	beq.n	80084d2 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80084c8:	6939      	ldr	r1, [r7, #16]
 80084ca:	68f8      	ldr	r0, [r7, #12]
 80084cc:	f000 f8ea 	bl	80086a4 <I2C_ITAddrCplt>
 80084d0:	e037      	b.n	8008542 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	085b      	lsrs	r3, r3, #1
 80084d6:	f003 0301 	and.w	r3, r3, #1
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d031      	beq.n	8008542 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	085b      	lsrs	r3, r3, #1
 80084e2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d02b      	beq.n	8008542 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d018      	beq.n	8008526 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f8:	781a      	ldrb	r2, [r3, #0]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008504:	1c5a      	adds	r2, r3, #1
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800850e:	b29b      	uxth	r3, r3
 8008510:	3b01      	subs	r3, #1
 8008512:	b29a      	uxth	r2, r3
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800851c:	3b01      	subs	r3, #1
 800851e:	b29a      	uxth	r2, r3
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	851a      	strh	r2, [r3, #40]	; 0x28
 8008524:	e00d      	b.n	8008542 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800852c:	d002      	beq.n	8008534 <I2C_Slave_ISR_IT+0x1e6>
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d106      	bne.n	8008542 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008534:	68f8      	ldr	r0, [r7, #12]
 8008536:	f000 f939 	bl	80087ac <I2C_ITSlaveSeqCplt>
 800853a:	e002      	b.n	8008542 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800853c:	bf00      	nop
 800853e:	e000      	b.n	8008542 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8008540:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2200      	movs	r2, #0
 8008546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800854a:	2300      	movs	r3, #0
}
 800854c:	4618      	mov	r0, r3
 800854e:	3718      	adds	r7, #24
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b086      	sub	sp, #24
 8008558:	af02      	add	r7, sp, #8
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	4608      	mov	r0, r1
 800855e:	4611      	mov	r1, r2
 8008560:	461a      	mov	r2, r3
 8008562:	4603      	mov	r3, r0
 8008564:	817b      	strh	r3, [r7, #10]
 8008566:	460b      	mov	r3, r1
 8008568:	813b      	strh	r3, [r7, #8]
 800856a:	4613      	mov	r3, r2
 800856c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800856e:	88fb      	ldrh	r3, [r7, #6]
 8008570:	b2da      	uxtb	r2, r3
 8008572:	8979      	ldrh	r1, [r7, #10]
 8008574:	4b20      	ldr	r3, [pc, #128]	; (80085f8 <I2C_RequestMemoryWrite+0xa4>)
 8008576:	9300      	str	r3, [sp, #0]
 8008578:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800857c:	68f8      	ldr	r0, [r7, #12]
 800857e:	f000 fdb5 	bl	80090ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008582:	69fa      	ldr	r2, [r7, #28]
 8008584:	69b9      	ldr	r1, [r7, #24]
 8008586:	68f8      	ldr	r0, [r7, #12]
 8008588:	f000 fc47 	bl	8008e1a <I2C_WaitOnTXISFlagUntilTimeout>
 800858c:	4603      	mov	r3, r0
 800858e:	2b00      	cmp	r3, #0
 8008590:	d001      	beq.n	8008596 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008592:	2301      	movs	r3, #1
 8008594:	e02c      	b.n	80085f0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008596:	88fb      	ldrh	r3, [r7, #6]
 8008598:	2b01      	cmp	r3, #1
 800859a:	d105      	bne.n	80085a8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800859c:	893b      	ldrh	r3, [r7, #8]
 800859e:	b2da      	uxtb	r2, r3
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	629a      	str	r2, [r3, #40]	; 0x28
 80085a6:	e015      	b.n	80085d4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80085a8:	893b      	ldrh	r3, [r7, #8]
 80085aa:	0a1b      	lsrs	r3, r3, #8
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	b2da      	uxtb	r2, r3
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085b6:	69fa      	ldr	r2, [r7, #28]
 80085b8:	69b9      	ldr	r1, [r7, #24]
 80085ba:	68f8      	ldr	r0, [r7, #12]
 80085bc:	f000 fc2d 	bl	8008e1a <I2C_WaitOnTXISFlagUntilTimeout>
 80085c0:	4603      	mov	r3, r0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d001      	beq.n	80085ca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	e012      	b.n	80085f0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80085ca:	893b      	ldrh	r3, [r7, #8]
 80085cc:	b2da      	uxtb	r2, r3
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	9300      	str	r3, [sp, #0]
 80085d8:	69bb      	ldr	r3, [r7, #24]
 80085da:	2200      	movs	r2, #0
 80085dc:	2180      	movs	r1, #128	; 0x80
 80085de:	68f8      	ldr	r0, [r7, #12]
 80085e0:	f000 fbdb 	bl	8008d9a <I2C_WaitOnFlagUntilTimeout>
 80085e4:	4603      	mov	r3, r0
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d001      	beq.n	80085ee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80085ea:	2301      	movs	r3, #1
 80085ec:	e000      	b.n	80085f0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3710      	adds	r7, #16
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}
 80085f8:	80002000 	.word	0x80002000

080085fc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b086      	sub	sp, #24
 8008600:	af02      	add	r7, sp, #8
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	4608      	mov	r0, r1
 8008606:	4611      	mov	r1, r2
 8008608:	461a      	mov	r2, r3
 800860a:	4603      	mov	r3, r0
 800860c:	817b      	strh	r3, [r7, #10]
 800860e:	460b      	mov	r3, r1
 8008610:	813b      	strh	r3, [r7, #8]
 8008612:	4613      	mov	r3, r2
 8008614:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008616:	88fb      	ldrh	r3, [r7, #6]
 8008618:	b2da      	uxtb	r2, r3
 800861a:	8979      	ldrh	r1, [r7, #10]
 800861c:	4b20      	ldr	r3, [pc, #128]	; (80086a0 <I2C_RequestMemoryRead+0xa4>)
 800861e:	9300      	str	r3, [sp, #0]
 8008620:	2300      	movs	r3, #0
 8008622:	68f8      	ldr	r0, [r7, #12]
 8008624:	f000 fd62 	bl	80090ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008628:	69fa      	ldr	r2, [r7, #28]
 800862a:	69b9      	ldr	r1, [r7, #24]
 800862c:	68f8      	ldr	r0, [r7, #12]
 800862e:	f000 fbf4 	bl	8008e1a <I2C_WaitOnTXISFlagUntilTimeout>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d001      	beq.n	800863c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008638:	2301      	movs	r3, #1
 800863a:	e02c      	b.n	8008696 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800863c:	88fb      	ldrh	r3, [r7, #6]
 800863e:	2b01      	cmp	r3, #1
 8008640:	d105      	bne.n	800864e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008642:	893b      	ldrh	r3, [r7, #8]
 8008644:	b2da      	uxtb	r2, r3
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	629a      	str	r2, [r3, #40]	; 0x28
 800864c:	e015      	b.n	800867a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800864e:	893b      	ldrh	r3, [r7, #8]
 8008650:	0a1b      	lsrs	r3, r3, #8
 8008652:	b29b      	uxth	r3, r3
 8008654:	b2da      	uxtb	r2, r3
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800865c:	69fa      	ldr	r2, [r7, #28]
 800865e:	69b9      	ldr	r1, [r7, #24]
 8008660:	68f8      	ldr	r0, [r7, #12]
 8008662:	f000 fbda 	bl	8008e1a <I2C_WaitOnTXISFlagUntilTimeout>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d001      	beq.n	8008670 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800866c:	2301      	movs	r3, #1
 800866e:	e012      	b.n	8008696 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008670:	893b      	ldrh	r3, [r7, #8]
 8008672:	b2da      	uxtb	r2, r3
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800867a:	69fb      	ldr	r3, [r7, #28]
 800867c:	9300      	str	r3, [sp, #0]
 800867e:	69bb      	ldr	r3, [r7, #24]
 8008680:	2200      	movs	r2, #0
 8008682:	2140      	movs	r1, #64	; 0x40
 8008684:	68f8      	ldr	r0, [r7, #12]
 8008686:	f000 fb88 	bl	8008d9a <I2C_WaitOnFlagUntilTimeout>
 800868a:	4603      	mov	r3, r0
 800868c:	2b00      	cmp	r3, #0
 800868e:	d001      	beq.n	8008694 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008690:	2301      	movs	r3, #1
 8008692:	e000      	b.n	8008696 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	3710      	adds	r7, #16
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	80002000 	.word	0x80002000

080086a4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80086ba:	2b28      	cmp	r3, #40	; 0x28
 80086bc:	d16a      	bne.n	8008794 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	699b      	ldr	r3, [r3, #24]
 80086c4:	0c1b      	lsrs	r3, r3, #16
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	f003 0301 	and.w	r3, r3, #1
 80086cc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	699b      	ldr	r3, [r3, #24]
 80086d4:	0c1b      	lsrs	r3, r3, #16
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80086dc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80086ea:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	68db      	ldr	r3, [r3, #12]
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80086f8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	2b02      	cmp	r3, #2
 8008700:	d138      	bne.n	8008774 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8008702:	897b      	ldrh	r3, [r7, #10]
 8008704:	09db      	lsrs	r3, r3, #7
 8008706:	b29a      	uxth	r2, r3
 8008708:	89bb      	ldrh	r3, [r7, #12]
 800870a:	4053      	eors	r3, r2
 800870c:	b29b      	uxth	r3, r3
 800870e:	f003 0306 	and.w	r3, r3, #6
 8008712:	2b00      	cmp	r3, #0
 8008714:	d11c      	bne.n	8008750 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8008716:	897b      	ldrh	r3, [r7, #10]
 8008718:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800871e:	1c5a      	adds	r2, r3, #1
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008728:	2b02      	cmp	r3, #2
 800872a:	d13b      	bne.n	80087a4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2200      	movs	r2, #0
 8008730:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	2208      	movs	r2, #8
 8008738:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008742:	89ba      	ldrh	r2, [r7, #12]
 8008744:	7bfb      	ldrb	r3, [r7, #15]
 8008746:	4619      	mov	r1, r3
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f7ff fdde 	bl	800830a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800874e:	e029      	b.n	80087a4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8008750:	893b      	ldrh	r3, [r7, #8]
 8008752:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008754:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 fcf9 	bl	8009150 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008766:	89ba      	ldrh	r2, [r7, #12]
 8008768:	7bfb      	ldrb	r3, [r7, #15]
 800876a:	4619      	mov	r1, r3
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f7ff fdcc 	bl	800830a <HAL_I2C_AddrCallback>
}
 8008772:	e017      	b.n	80087a4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008774:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 fce9 	bl	8009150 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2200      	movs	r2, #0
 8008782:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008786:	89ba      	ldrh	r2, [r7, #12]
 8008788:	7bfb      	ldrb	r3, [r7, #15]
 800878a:	4619      	mov	r1, r3
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f7ff fdbc 	bl	800830a <HAL_I2C_AddrCallback>
}
 8008792:	e007      	b.n	80087a4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	2208      	movs	r2, #8
 800879a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2200      	movs	r2, #0
 80087a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80087a4:	bf00      	nop
 80087a6:	3710      	adds	r7, #16
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	0b9b      	lsrs	r3, r3, #14
 80087c8:	f003 0301 	and.w	r3, r3, #1
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d008      	beq.n	80087e2 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80087de:	601a      	str	r2, [r3, #0]
 80087e0:	e00d      	b.n	80087fe <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	0bdb      	lsrs	r3, r3, #15
 80087e6:	f003 0301 	and.w	r3, r3, #1
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d007      	beq.n	80087fe <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80087fc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008804:	b2db      	uxtb	r3, r3
 8008806:	2b29      	cmp	r3, #41	; 0x29
 8008808:	d112      	bne.n	8008830 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2228      	movs	r2, #40	; 0x28
 800880e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2221      	movs	r2, #33	; 0x21
 8008816:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008818:	2101      	movs	r1, #1
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 fc98 	bl	8009150 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f7ff fd5a 	bl	80082e2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800882e:	e017      	b.n	8008860 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008836:	b2db      	uxtb	r3, r3
 8008838:	2b2a      	cmp	r3, #42	; 0x2a
 800883a:	d111      	bne.n	8008860 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2228      	movs	r2, #40	; 0x28
 8008840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2222      	movs	r2, #34	; 0x22
 8008848:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800884a:	2102      	movs	r1, #2
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 fc7f 	bl	8009150 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2200      	movs	r2, #0
 8008856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f7ff fd4b 	bl	80082f6 <HAL_I2C_SlaveRxCpltCallback>
}
 8008860:	bf00      	nop
 8008862:	3710      	adds	r7, #16
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b086      	sub	sp, #24
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008884:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2220      	movs	r2, #32
 800888c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800888e:	7bfb      	ldrb	r3, [r7, #15]
 8008890:	2b21      	cmp	r3, #33	; 0x21
 8008892:	d002      	beq.n	800889a <I2C_ITSlaveCplt+0x32>
 8008894:	7bfb      	ldrb	r3, [r7, #15]
 8008896:	2b29      	cmp	r3, #41	; 0x29
 8008898:	d108      	bne.n	80088ac <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800889a:	f248 0101 	movw	r1, #32769	; 0x8001
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 fc56 	bl	8009150 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2221      	movs	r2, #33	; 0x21
 80088a8:	631a      	str	r2, [r3, #48]	; 0x30
 80088aa:	e00d      	b.n	80088c8 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80088ac:	7bfb      	ldrb	r3, [r7, #15]
 80088ae:	2b22      	cmp	r3, #34	; 0x22
 80088b0:	d002      	beq.n	80088b8 <I2C_ITSlaveCplt+0x50>
 80088b2:	7bfb      	ldrb	r3, [r7, #15]
 80088b4:	2b2a      	cmp	r3, #42	; 0x2a
 80088b6:	d107      	bne.n	80088c8 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80088b8:	f248 0102 	movw	r1, #32770	; 0x8002
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 fc47 	bl	8009150 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2222      	movs	r2, #34	; 0x22
 80088c6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	685a      	ldr	r2, [r3, #4]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80088d6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	6859      	ldr	r1, [r3, #4]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	4b64      	ldr	r3, [pc, #400]	; (8008a74 <I2C_ITSlaveCplt+0x20c>)
 80088e4:	400b      	ands	r3, r1
 80088e6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 fa14 	bl	8008d16 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	0b9b      	lsrs	r3, r3, #14
 80088f2:	f003 0301 	and.w	r3, r3, #1
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d013      	beq.n	8008922 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008908:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800890e:	2b00      	cmp	r3, #0
 8008910:	d020      	beq.n	8008954 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	b29a      	uxth	r2, r3
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008920:	e018      	b.n	8008954 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	0bdb      	lsrs	r3, r3, #15
 8008926:	f003 0301 	and.w	r3, r3, #1
 800892a:	2b00      	cmp	r3, #0
 800892c:	d012      	beq.n	8008954 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800893c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008942:	2b00      	cmp	r3, #0
 8008944:	d006      	beq.n	8008954 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	b29a      	uxth	r2, r3
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	089b      	lsrs	r3, r3, #2
 8008958:	f003 0301 	and.w	r3, r3, #1
 800895c:	2b00      	cmp	r3, #0
 800895e:	d020      	beq.n	80089a2 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	f023 0304 	bic.w	r3, r3, #4
 8008966:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008972:	b2d2      	uxtb	r2, r2
 8008974:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800897a:	1c5a      	adds	r2, r3, #1
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008984:	2b00      	cmp	r3, #0
 8008986:	d00c      	beq.n	80089a2 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800898c:	3b01      	subs	r3, #1
 800898e:	b29a      	uxth	r2, r3
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008998:	b29b      	uxth	r3, r3
 800899a:	3b01      	subs	r3, #1
 800899c:	b29a      	uxth	r2, r3
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d005      	beq.n	80089b8 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089b0:	f043 0204 	orr.w	r2, r3, #4
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2200      	movs	r2, #0
 80089bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2200      	movs	r2, #0
 80089c4:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d010      	beq.n	80089f0 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089d2:	4619      	mov	r1, r3
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 f8a7 	bl	8008b28 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	2b28      	cmp	r3, #40	; 0x28
 80089e4:	d141      	bne.n	8008a6a <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80089e6:	6979      	ldr	r1, [r7, #20]
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 f847 	bl	8008a7c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80089ee:	e03c      	b.n	8008a6a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80089f8:	d014      	beq.n	8008a24 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f7ff fed6 	bl	80087ac <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	4a1d      	ldr	r2, [pc, #116]	; (8008a78 <I2C_ITSlaveCplt+0x210>)
 8008a04:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2220      	movs	r2, #32
 8008a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f7ff fc82 	bl	8008326 <HAL_I2C_ListenCpltCallback>
}
 8008a22:	e022      	b.n	8008a6a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	2b22      	cmp	r3, #34	; 0x22
 8008a2e:	d10e      	bne.n	8008a4e <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2220      	movs	r2, #32
 8008a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2200      	movs	r2, #0
 8008a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f7ff fc55 	bl	80082f6 <HAL_I2C_SlaveRxCpltCallback>
}
 8008a4c:	e00d      	b.n	8008a6a <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2220      	movs	r2, #32
 8008a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f7ff fc3c 	bl	80082e2 <HAL_I2C_SlaveTxCpltCallback>
}
 8008a6a:	bf00      	nop
 8008a6c:	3718      	adds	r7, #24
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	fe00e800 	.word	0xfe00e800
 8008a78:	ffff0000 	.word	0xffff0000

08008a7c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	4a26      	ldr	r2, [pc, #152]	; (8008b24 <I2C_ITListenCplt+0xa8>)
 8008a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2220      	movs	r2, #32
 8008a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	089b      	lsrs	r3, r3, #2
 8008aac:	f003 0301 	and.w	r3, r3, #1
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d022      	beq.n	8008afa <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008abe:	b2d2      	uxtb	r2, r2
 8008ac0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac6:	1c5a      	adds	r2, r3, #1
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d012      	beq.n	8008afa <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ad8:	3b01      	subs	r3, #1
 8008ada:	b29a      	uxth	r2, r3
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	b29a      	uxth	r2, r3
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008af2:	f043 0204 	orr.w	r2, r3, #4
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008afa:	f248 0103 	movw	r1, #32771	; 0x8003
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 fb26 	bl	8009150 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	2210      	movs	r2, #16
 8008b0a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f7ff fc06 	bl	8008326 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8008b1a:	bf00      	nop
 8008b1c:	3708      	adds	r7, #8
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	ffff0000 	.word	0xffff0000

08008b28 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	4a5d      	ldr	r2, [pc, #372]	; (8008cbc <I2C_ITError+0x194>)
 8008b46:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	431a      	orrs	r2, r3
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8008b5a:	7bfb      	ldrb	r3, [r7, #15]
 8008b5c:	2b28      	cmp	r3, #40	; 0x28
 8008b5e:	d005      	beq.n	8008b6c <I2C_ITError+0x44>
 8008b60:	7bfb      	ldrb	r3, [r7, #15]
 8008b62:	2b29      	cmp	r3, #41	; 0x29
 8008b64:	d002      	beq.n	8008b6c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8008b66:	7bfb      	ldrb	r3, [r7, #15]
 8008b68:	2b2a      	cmp	r3, #42	; 0x2a
 8008b6a:	d10b      	bne.n	8008b84 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008b6c:	2103      	movs	r1, #3
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 faee 	bl	8009150 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2228      	movs	r2, #40	; 0x28
 8008b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	4a50      	ldr	r2, [pc, #320]	; (8008cc0 <I2C_ITError+0x198>)
 8008b80:	635a      	str	r2, [r3, #52]	; 0x34
 8008b82:	e011      	b.n	8008ba8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008b84:	f248 0103 	movw	r1, #32771	; 0x8003
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 fae1 	bl	8009150 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b94:	b2db      	uxtb	r3, r3
 8008b96:	2b60      	cmp	r3, #96	; 0x60
 8008b98:	d003      	beq.n	8008ba2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2220      	movs	r2, #32
 8008b9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bac:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d039      	beq.n	8008c2a <I2C_ITError+0x102>
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	2b11      	cmp	r3, #17
 8008bba:	d002      	beq.n	8008bc2 <I2C_ITError+0x9a>
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	2b21      	cmp	r3, #33	; 0x21
 8008bc0:	d133      	bne.n	8008c2a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008bd0:	d107      	bne.n	8008be2 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	681a      	ldr	r2, [r3, #0]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008be0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7fe fd04 	bl	80075f4 <HAL_DMA_GetState>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b01      	cmp	r3, #1
 8008bf0:	d017      	beq.n	8008c22 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf6:	4a33      	ldr	r2, [pc, #204]	; (8008cc4 <I2C_ITError+0x19c>)
 8008bf8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7fe fc04 	bl	8007414 <HAL_DMA_Abort_IT>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d04d      	beq.n	8008cae <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008c1c:	4610      	mov	r0, r2
 8008c1e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008c20:	e045      	b.n	8008cae <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 f850 	bl	8008cc8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008c28:	e041      	b.n	8008cae <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d039      	beq.n	8008ca6 <I2C_ITError+0x17e>
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	2b12      	cmp	r3, #18
 8008c36:	d002      	beq.n	8008c3e <I2C_ITError+0x116>
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	2b22      	cmp	r3, #34	; 0x22
 8008c3c:	d133      	bne.n	8008ca6 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c4c:	d107      	bne.n	8008c5e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008c5c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7fe fcc6 	bl	80075f4 <HAL_DMA_GetState>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d017      	beq.n	8008c9e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c72:	4a14      	ldr	r2, [pc, #80]	; (8008cc4 <I2C_ITError+0x19c>)
 8008c74:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7fe fbc6 	bl	8007414 <HAL_DMA_Abort_IT>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d011      	beq.n	8008cb2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008c98:	4610      	mov	r0, r2
 8008c9a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008c9c:	e009      	b.n	8008cb2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 f812 	bl	8008cc8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008ca4:	e005      	b.n	8008cb2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 f80e 	bl	8008cc8 <I2C_TreatErrorCallback>
  }
}
 8008cac:	e002      	b.n	8008cb4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008cae:	bf00      	nop
 8008cb0:	e000      	b.n	8008cb4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008cb2:	bf00      	nop
}
 8008cb4:	bf00      	nop
 8008cb6:	3710      	adds	r7, #16
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	ffff0000 	.word	0xffff0000
 8008cc0:	0800834f 	.word	0x0800834f
 8008cc4:	08008d5f 	.word	0x08008d5f

08008cc8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	2b60      	cmp	r3, #96	; 0x60
 8008cda:	d10e      	bne.n	8008cfa <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2220      	movs	r2, #32
 8008ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2200      	movs	r2, #0
 8008cee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f7ff fb21 	bl	800833a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008cf8:	e009      	b.n	8008d0e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2200      	movs	r2, #0
 8008d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f7fc f9a7 	bl	800505c <HAL_I2C_ErrorCallback>
}
 8008d0e:	bf00      	nop
 8008d10:	3708      	adds	r7, #8
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008d16:	b480      	push	{r7}
 8008d18:	b083      	sub	sp, #12
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	699b      	ldr	r3, [r3, #24]
 8008d24:	f003 0302 	and.w	r3, r3, #2
 8008d28:	2b02      	cmp	r3, #2
 8008d2a:	d103      	bne.n	8008d34 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	2200      	movs	r2, #0
 8008d32:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	699b      	ldr	r3, [r3, #24]
 8008d3a:	f003 0301 	and.w	r3, r3, #1
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d007      	beq.n	8008d52 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	699a      	ldr	r2, [r3, #24]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f042 0201 	orr.w	r2, r2, #1
 8008d50:	619a      	str	r2, [r3, #24]
  }
}
 8008d52:	bf00      	nop
 8008d54:	370c      	adds	r7, #12
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr

08008d5e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b084      	sub	sp, #16
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d6a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d003      	beq.n	8008d7c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d78:	2200      	movs	r2, #0
 8008d7a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d003      	beq.n	8008d8c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d88:	2200      	movs	r2, #0
 8008d8a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8008d8c:	68f8      	ldr	r0, [r7, #12]
 8008d8e:	f7ff ff9b 	bl	8008cc8 <I2C_TreatErrorCallback>
}
 8008d92:	bf00      	nop
 8008d94:	3710      	adds	r7, #16
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}

08008d9a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008d9a:	b580      	push	{r7, lr}
 8008d9c:	b084      	sub	sp, #16
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	60f8      	str	r0, [r7, #12]
 8008da2:	60b9      	str	r1, [r7, #8]
 8008da4:	603b      	str	r3, [r7, #0]
 8008da6:	4613      	mov	r3, r2
 8008da8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008daa:	e022      	b.n	8008df2 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008db2:	d01e      	beq.n	8008df2 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008db4:	f7fe f864 	bl	8006e80 <HAL_GetTick>
 8008db8:	4602      	mov	r2, r0
 8008dba:	69bb      	ldr	r3, [r7, #24]
 8008dbc:	1ad3      	subs	r3, r2, r3
 8008dbe:	683a      	ldr	r2, [r7, #0]
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d302      	bcc.n	8008dca <I2C_WaitOnFlagUntilTimeout+0x30>
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d113      	bne.n	8008df2 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dce:	f043 0220 	orr.w	r2, r3, #32
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2220      	movs	r2, #32
 8008dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2200      	movs	r2, #0
 8008de2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2200      	movs	r2, #0
 8008dea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008dee:	2301      	movs	r3, #1
 8008df0:	e00f      	b.n	8008e12 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	699a      	ldr	r2, [r3, #24]
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	4013      	ands	r3, r2
 8008dfc:	68ba      	ldr	r2, [r7, #8]
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	bf0c      	ite	eq
 8008e02:	2301      	moveq	r3, #1
 8008e04:	2300      	movne	r3, #0
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	461a      	mov	r2, r3
 8008e0a:	79fb      	ldrb	r3, [r7, #7]
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d0cd      	beq.n	8008dac <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008e10:	2300      	movs	r3, #0
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3710      	adds	r7, #16
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}

08008e1a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008e1a:	b580      	push	{r7, lr}
 8008e1c:	b084      	sub	sp, #16
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	60f8      	str	r0, [r7, #12]
 8008e22:	60b9      	str	r1, [r7, #8]
 8008e24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008e26:	e02c      	b.n	8008e82 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	68b9      	ldr	r1, [r7, #8]
 8008e2c:	68f8      	ldr	r0, [r7, #12]
 8008e2e:	f000 f871 	bl	8008f14 <I2C_IsErrorOccurred>
 8008e32:	4603      	mov	r3, r0
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d001      	beq.n	8008e3c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	e02a      	b.n	8008e92 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e42:	d01e      	beq.n	8008e82 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e44:	f7fe f81c 	bl	8006e80 <HAL_GetTick>
 8008e48:	4602      	mov	r2, r0
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	1ad3      	subs	r3, r2, r3
 8008e4e:	68ba      	ldr	r2, [r7, #8]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d302      	bcc.n	8008e5a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d113      	bne.n	8008e82 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e5e:	f043 0220 	orr.w	r2, r3, #32
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2220      	movs	r2, #32
 8008e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2200      	movs	r2, #0
 8008e72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	e007      	b.n	8008e92 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	699b      	ldr	r3, [r3, #24]
 8008e88:	f003 0302 	and.w	r3, r3, #2
 8008e8c:	2b02      	cmp	r3, #2
 8008e8e:	d1cb      	bne.n	8008e28 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008e90:	2300      	movs	r3, #0
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3710      	adds	r7, #16
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}

08008e9a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008e9a:	b580      	push	{r7, lr}
 8008e9c:	b084      	sub	sp, #16
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	60f8      	str	r0, [r7, #12]
 8008ea2:	60b9      	str	r1, [r7, #8]
 8008ea4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008ea6:	e028      	b.n	8008efa <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	68b9      	ldr	r1, [r7, #8]
 8008eac:	68f8      	ldr	r0, [r7, #12]
 8008eae:	f000 f831 	bl	8008f14 <I2C_IsErrorOccurred>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d001      	beq.n	8008ebc <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e026      	b.n	8008f0a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ebc:	f7fd ffe0 	bl	8006e80 <HAL_GetTick>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	1ad3      	subs	r3, r2, r3
 8008ec6:	68ba      	ldr	r2, [r7, #8]
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d302      	bcc.n	8008ed2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d113      	bne.n	8008efa <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ed6:	f043 0220 	orr.w	r2, r3, #32
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2220      	movs	r2, #32
 8008ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e007      	b.n	8008f0a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	699b      	ldr	r3, [r3, #24]
 8008f00:	f003 0320 	and.w	r3, r3, #32
 8008f04:	2b20      	cmp	r3, #32
 8008f06:	d1cf      	bne.n	8008ea8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008f08:	2300      	movs	r3, #0
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3710      	adds	r7, #16
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
	...

08008f14 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b08a      	sub	sp, #40	; 0x28
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	60f8      	str	r0, [r7, #12]
 8008f1c:	60b9      	str	r1, [r7, #8]
 8008f1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f20:	2300      	movs	r3, #0
 8008f22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	699b      	ldr	r3, [r3, #24]
 8008f2c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	f003 0310 	and.w	r3, r3, #16
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d075      	beq.n	800902c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	2210      	movs	r2, #16
 8008f46:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008f48:	e056      	b.n	8008ff8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f50:	d052      	beq.n	8008ff8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008f52:	f7fd ff95 	bl	8006e80 <HAL_GetTick>
 8008f56:	4602      	mov	r2, r0
 8008f58:	69fb      	ldr	r3, [r7, #28]
 8008f5a:	1ad3      	subs	r3, r2, r3
 8008f5c:	68ba      	ldr	r2, [r7, #8]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d302      	bcc.n	8008f68 <I2C_IsErrorOccurred+0x54>
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d147      	bne.n	8008ff8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f72:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008f7a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	699b      	ldr	r3, [r3, #24]
 8008f82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f8a:	d12e      	bne.n	8008fea <I2C_IsErrorOccurred+0xd6>
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f92:	d02a      	beq.n	8008fea <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8008f94:	7cfb      	ldrb	r3, [r7, #19]
 8008f96:	2b20      	cmp	r3, #32
 8008f98:	d027      	beq.n	8008fea <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	685a      	ldr	r2, [r3, #4]
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008fa8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008faa:	f7fd ff69 	bl	8006e80 <HAL_GetTick>
 8008fae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008fb0:	e01b      	b.n	8008fea <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008fb2:	f7fd ff65 	bl	8006e80 <HAL_GetTick>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	1ad3      	subs	r3, r2, r3
 8008fbc:	2b19      	cmp	r3, #25
 8008fbe:	d914      	bls.n	8008fea <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fc4:	f043 0220 	orr.w	r2, r3, #32
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2220      	movs	r2, #32
 8008fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	699b      	ldr	r3, [r3, #24]
 8008ff0:	f003 0320 	and.w	r3, r3, #32
 8008ff4:	2b20      	cmp	r3, #32
 8008ff6:	d1dc      	bne.n	8008fb2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	699b      	ldr	r3, [r3, #24]
 8008ffe:	f003 0320 	and.w	r3, r3, #32
 8009002:	2b20      	cmp	r3, #32
 8009004:	d003      	beq.n	800900e <I2C_IsErrorOccurred+0xfa>
 8009006:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800900a:	2b00      	cmp	r3, #0
 800900c:	d09d      	beq.n	8008f4a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800900e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009012:	2b00      	cmp	r3, #0
 8009014:	d103      	bne.n	800901e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	2220      	movs	r2, #32
 800901c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800901e:	6a3b      	ldr	r3, [r7, #32]
 8009020:	f043 0304 	orr.w	r3, r3, #4
 8009024:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009026:	2301      	movs	r3, #1
 8009028:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	699b      	ldr	r3, [r3, #24]
 8009032:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009034:	69bb      	ldr	r3, [r7, #24]
 8009036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800903a:	2b00      	cmp	r3, #0
 800903c:	d00b      	beq.n	8009056 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800903e:	6a3b      	ldr	r3, [r7, #32]
 8009040:	f043 0301 	orr.w	r3, r3, #1
 8009044:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800904e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009050:	2301      	movs	r3, #1
 8009052:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009056:	69bb      	ldr	r3, [r7, #24]
 8009058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800905c:	2b00      	cmp	r3, #0
 800905e:	d00b      	beq.n	8009078 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009060:	6a3b      	ldr	r3, [r7, #32]
 8009062:	f043 0308 	orr.w	r3, r3, #8
 8009066:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009070:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009072:	2301      	movs	r3, #1
 8009074:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009078:	69bb      	ldr	r3, [r7, #24]
 800907a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800907e:	2b00      	cmp	r3, #0
 8009080:	d00b      	beq.n	800909a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009082:	6a3b      	ldr	r3, [r7, #32]
 8009084:	f043 0302 	orr.w	r3, r3, #2
 8009088:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009092:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009094:	2301      	movs	r3, #1
 8009096:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800909a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d01c      	beq.n	80090dc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80090a2:	68f8      	ldr	r0, [r7, #12]
 80090a4:	f7ff fe37 	bl	8008d16 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	6859      	ldr	r1, [r3, #4]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	4b0d      	ldr	r3, [pc, #52]	; (80090e8 <I2C_IsErrorOccurred+0x1d4>)
 80090b4:	400b      	ands	r3, r1
 80090b6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090bc:	6a3b      	ldr	r3, [r7, #32]
 80090be:	431a      	orrs	r2, r3
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2220      	movs	r2, #32
 80090c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2200      	movs	r2, #0
 80090d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2200      	movs	r2, #0
 80090d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80090dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3728      	adds	r7, #40	; 0x28
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}
 80090e8:	fe00e800 	.word	0xfe00e800

080090ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b087      	sub	sp, #28
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	60f8      	str	r0, [r7, #12]
 80090f4:	607b      	str	r3, [r7, #4]
 80090f6:	460b      	mov	r3, r1
 80090f8:	817b      	strh	r3, [r7, #10]
 80090fa:	4613      	mov	r3, r2
 80090fc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80090fe:	897b      	ldrh	r3, [r7, #10]
 8009100:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009104:	7a7b      	ldrb	r3, [r7, #9]
 8009106:	041b      	lsls	r3, r3, #16
 8009108:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800910c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009112:	6a3b      	ldr	r3, [r7, #32]
 8009114:	4313      	orrs	r3, r2
 8009116:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800911a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	685a      	ldr	r2, [r3, #4]
 8009122:	6a3b      	ldr	r3, [r7, #32]
 8009124:	0d5b      	lsrs	r3, r3, #21
 8009126:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800912a:	4b08      	ldr	r3, [pc, #32]	; (800914c <I2C_TransferConfig+0x60>)
 800912c:	430b      	orrs	r3, r1
 800912e:	43db      	mvns	r3, r3
 8009130:	ea02 0103 	and.w	r1, r2, r3
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	697a      	ldr	r2, [r7, #20]
 800913a:	430a      	orrs	r2, r1
 800913c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800913e:	bf00      	nop
 8009140:	371c      	adds	r7, #28
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr
 800914a:	bf00      	nop
 800914c:	03ff63ff 	.word	0x03ff63ff

08009150 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009150:	b480      	push	{r7}
 8009152:	b085      	sub	sp, #20
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	460b      	mov	r3, r1
 800915a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800915c:	2300      	movs	r3, #0
 800915e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009160:	887b      	ldrh	r3, [r7, #2]
 8009162:	f003 0301 	and.w	r3, r3, #1
 8009166:	2b00      	cmp	r3, #0
 8009168:	d00f      	beq.n	800918a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8009170:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009178:	b2db      	uxtb	r3, r3
 800917a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800917e:	2b28      	cmp	r3, #40	; 0x28
 8009180:	d003      	beq.n	800918a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8009188:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800918a:	887b      	ldrh	r3, [r7, #2]
 800918c:	f003 0302 	and.w	r3, r3, #2
 8009190:	2b00      	cmp	r3, #0
 8009192:	d00f      	beq.n	80091b4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800919a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091a2:	b2db      	uxtb	r3, r3
 80091a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80091a8:	2b28      	cmp	r3, #40	; 0x28
 80091aa:	d003      	beq.n	80091b4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80091b2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80091b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	da03      	bge.n	80091c4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80091c2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80091c4:	887b      	ldrh	r3, [r7, #2]
 80091c6:	2b10      	cmp	r3, #16
 80091c8:	d103      	bne.n	80091d2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80091d0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80091d2:	887b      	ldrh	r3, [r7, #2]
 80091d4:	2b20      	cmp	r3, #32
 80091d6:	d103      	bne.n	80091e0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f043 0320 	orr.w	r3, r3, #32
 80091de:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80091e0:	887b      	ldrh	r3, [r7, #2]
 80091e2:	2b40      	cmp	r3, #64	; 0x40
 80091e4:	d103      	bne.n	80091ee <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091ec:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	6819      	ldr	r1, [r3, #0]
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	43da      	mvns	r2, r3
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	400a      	ands	r2, r1
 80091fe:	601a      	str	r2, [r3, #0]
}
 8009200:	bf00      	nop
 8009202:	3714      	adds	r7, #20
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr

0800920c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800921c:	b2db      	uxtb	r3, r3
 800921e:	2b20      	cmp	r3, #32
 8009220:	d138      	bne.n	8009294 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009228:	2b01      	cmp	r3, #1
 800922a:	d101      	bne.n	8009230 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800922c:	2302      	movs	r3, #2
 800922e:	e032      	b.n	8009296 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2201      	movs	r2, #1
 8009234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2224      	movs	r2, #36	; 0x24
 800923c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f022 0201 	bic.w	r2, r2, #1
 800924e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800925e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	6819      	ldr	r1, [r3, #0]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	683a      	ldr	r2, [r7, #0]
 800926c:	430a      	orrs	r2, r1
 800926e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f042 0201 	orr.w	r2, r2, #1
 800927e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2220      	movs	r2, #32
 8009284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2200      	movs	r2, #0
 800928c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009290:	2300      	movs	r3, #0
 8009292:	e000      	b.n	8009296 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009294:	2302      	movs	r3, #2
  }
}
 8009296:	4618      	mov	r0, r3
 8009298:	370c      	adds	r7, #12
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr

080092a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80092a2:	b480      	push	{r7}
 80092a4:	b085      	sub	sp, #20
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6078      	str	r0, [r7, #4]
 80092aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	2b20      	cmp	r3, #32
 80092b6:	d139      	bne.n	800932c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d101      	bne.n	80092c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80092c2:	2302      	movs	r3, #2
 80092c4:	e033      	b.n	800932e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2201      	movs	r2, #1
 80092ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2224      	movs	r2, #36	; 0x24
 80092d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f022 0201 	bic.w	r2, r2, #1
 80092e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80092f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	021b      	lsls	r3, r3, #8
 80092fa:	68fa      	ldr	r2, [r7, #12]
 80092fc:	4313      	orrs	r3, r2
 80092fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	68fa      	ldr	r2, [r7, #12]
 8009306:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f042 0201 	orr.w	r2, r2, #1
 8009316:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2220      	movs	r2, #32
 800931c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009328:	2300      	movs	r3, #0
 800932a:	e000      	b.n	800932e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800932c:	2302      	movs	r3, #2
  }
}
 800932e:	4618      	mov	r0, r3
 8009330:	3714      	adds	r7, #20
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr
	...

0800933c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800933c:	b480      	push	{r7}
 800933e:	b085      	sub	sp, #20
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009344:	4b0b      	ldr	r3, [pc, #44]	; (8009374 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8009346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009348:	4a0a      	ldr	r2, [pc, #40]	; (8009374 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800934a:	f043 0301 	orr.w	r3, r3, #1
 800934e:	6613      	str	r3, [r2, #96]	; 0x60
 8009350:	4b08      	ldr	r3, [pc, #32]	; (8009374 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8009352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009354:	f003 0301 	and.w	r3, r3, #1
 8009358:	60fb      	str	r3, [r7, #12]
 800935a:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 800935c:	4b06      	ldr	r3, [pc, #24]	; (8009378 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800935e:	685a      	ldr	r2, [r3, #4]
 8009360:	4905      	ldr	r1, [pc, #20]	; (8009378 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	4313      	orrs	r3, r2
 8009366:	604b      	str	r3, [r1, #4]
}
 8009368:	bf00      	nop
 800936a:	3714      	adds	r7, #20
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr
 8009374:	40021000 	.word	0x40021000
 8009378:	40010000 	.word	0x40010000

0800937c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800937c:	b480      	push	{r7}
 800937e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8009380:	4b04      	ldr	r3, [pc, #16]	; (8009394 <HAL_PWREx_GetVoltageRange+0x18>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8009388:	4618      	mov	r0, r3
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr
 8009392:	bf00      	nop
 8009394:	40007000 	.word	0x40007000

08009398 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009398:	b480      	push	{r7}
 800939a:	b085      	sub	sp, #20
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093a6:	d130      	bne.n	800940a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80093a8:	4b23      	ldr	r3, [pc, #140]	; (8009438 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80093b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093b4:	d038      	beq.n	8009428 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80093b6:	4b20      	ldr	r3, [pc, #128]	; (8009438 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80093be:	4a1e      	ldr	r2, [pc, #120]	; (8009438 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80093c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80093c4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80093c6:	4b1d      	ldr	r3, [pc, #116]	; (800943c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	2232      	movs	r2, #50	; 0x32
 80093cc:	fb02 f303 	mul.w	r3, r2, r3
 80093d0:	4a1b      	ldr	r2, [pc, #108]	; (8009440 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80093d2:	fba2 2303 	umull	r2, r3, r2, r3
 80093d6:	0c9b      	lsrs	r3, r3, #18
 80093d8:	3301      	adds	r3, #1
 80093da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80093dc:	e002      	b.n	80093e4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	3b01      	subs	r3, #1
 80093e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80093e4:	4b14      	ldr	r3, [pc, #80]	; (8009438 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80093e6:	695b      	ldr	r3, [r3, #20]
 80093e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80093ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093f0:	d102      	bne.n	80093f8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d1f2      	bne.n	80093de <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80093f8:	4b0f      	ldr	r3, [pc, #60]	; (8009438 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80093fa:	695b      	ldr	r3, [r3, #20]
 80093fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009400:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009404:	d110      	bne.n	8009428 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8009406:	2303      	movs	r3, #3
 8009408:	e00f      	b.n	800942a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800940a:	4b0b      	ldr	r3, [pc, #44]	; (8009438 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009416:	d007      	beq.n	8009428 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009418:	4b07      	ldr	r3, [pc, #28]	; (8009438 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009420:	4a05      	ldr	r2, [pc, #20]	; (8009438 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009422:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009426:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8009428:	2300      	movs	r3, #0
}
 800942a:	4618      	mov	r0, r3
 800942c:	3714      	adds	r7, #20
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr
 8009436:	bf00      	nop
 8009438:	40007000 	.word	0x40007000
 800943c:	2000020c 	.word	0x2000020c
 8009440:	431bde83 	.word	0x431bde83

08009444 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b088      	sub	sp, #32
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d101      	bne.n	8009456 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009452:	2301      	movs	r3, #1
 8009454:	e3ca      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009456:	4b97      	ldr	r3, [pc, #604]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	f003 030c 	and.w	r3, r3, #12
 800945e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009460:	4b94      	ldr	r3, [pc, #592]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 8009462:	68db      	ldr	r3, [r3, #12]
 8009464:	f003 0303 	and.w	r3, r3, #3
 8009468:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f003 0310 	and.w	r3, r3, #16
 8009472:	2b00      	cmp	r3, #0
 8009474:	f000 80e4 	beq.w	8009640 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009478:	69bb      	ldr	r3, [r7, #24]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d007      	beq.n	800948e <HAL_RCC_OscConfig+0x4a>
 800947e:	69bb      	ldr	r3, [r7, #24]
 8009480:	2b0c      	cmp	r3, #12
 8009482:	f040 808b 	bne.w	800959c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	2b01      	cmp	r3, #1
 800948a:	f040 8087 	bne.w	800959c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800948e:	4b89      	ldr	r3, [pc, #548]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f003 0302 	and.w	r3, r3, #2
 8009496:	2b00      	cmp	r3, #0
 8009498:	d005      	beq.n	80094a6 <HAL_RCC_OscConfig+0x62>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	699b      	ldr	r3, [r3, #24]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d101      	bne.n	80094a6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80094a2:	2301      	movs	r3, #1
 80094a4:	e3a2      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6a1a      	ldr	r2, [r3, #32]
 80094aa:	4b82      	ldr	r3, [pc, #520]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f003 0308 	and.w	r3, r3, #8
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d004      	beq.n	80094c0 <HAL_RCC_OscConfig+0x7c>
 80094b6:	4b7f      	ldr	r3, [pc, #508]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094be:	e005      	b.n	80094cc <HAL_RCC_OscConfig+0x88>
 80094c0:	4b7c      	ldr	r3, [pc, #496]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 80094c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80094c6:	091b      	lsrs	r3, r3, #4
 80094c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d223      	bcs.n	8009518 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6a1b      	ldr	r3, [r3, #32]
 80094d4:	4618      	mov	r0, r3
 80094d6:	f000 fd55 	bl	8009f84 <RCC_SetFlashLatencyFromMSIRange>
 80094da:	4603      	mov	r3, r0
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d001      	beq.n	80094e4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80094e0:	2301      	movs	r3, #1
 80094e2:	e383      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80094e4:	4b73      	ldr	r3, [pc, #460]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4a72      	ldr	r2, [pc, #456]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 80094ea:	f043 0308 	orr.w	r3, r3, #8
 80094ee:	6013      	str	r3, [r2, #0]
 80094f0:	4b70      	ldr	r3, [pc, #448]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6a1b      	ldr	r3, [r3, #32]
 80094fc:	496d      	ldr	r1, [pc, #436]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 80094fe:	4313      	orrs	r3, r2
 8009500:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009502:	4b6c      	ldr	r3, [pc, #432]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	69db      	ldr	r3, [r3, #28]
 800950e:	021b      	lsls	r3, r3, #8
 8009510:	4968      	ldr	r1, [pc, #416]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 8009512:	4313      	orrs	r3, r2
 8009514:	604b      	str	r3, [r1, #4]
 8009516:	e025      	b.n	8009564 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009518:	4b66      	ldr	r3, [pc, #408]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a65      	ldr	r2, [pc, #404]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 800951e:	f043 0308 	orr.w	r3, r3, #8
 8009522:	6013      	str	r3, [r2, #0]
 8009524:	4b63      	ldr	r3, [pc, #396]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6a1b      	ldr	r3, [r3, #32]
 8009530:	4960      	ldr	r1, [pc, #384]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 8009532:	4313      	orrs	r3, r2
 8009534:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009536:	4b5f      	ldr	r3, [pc, #380]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	69db      	ldr	r3, [r3, #28]
 8009542:	021b      	lsls	r3, r3, #8
 8009544:	495b      	ldr	r1, [pc, #364]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 8009546:	4313      	orrs	r3, r2
 8009548:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d109      	bne.n	8009564 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6a1b      	ldr	r3, [r3, #32]
 8009554:	4618      	mov	r0, r3
 8009556:	f000 fd15 	bl	8009f84 <RCC_SetFlashLatencyFromMSIRange>
 800955a:	4603      	mov	r3, r0
 800955c:	2b00      	cmp	r3, #0
 800955e:	d001      	beq.n	8009564 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8009560:	2301      	movs	r3, #1
 8009562:	e343      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009564:	f000 fc4a 	bl	8009dfc <HAL_RCC_GetSysClockFreq>
 8009568:	4602      	mov	r2, r0
 800956a:	4b52      	ldr	r3, [pc, #328]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 800956c:	689b      	ldr	r3, [r3, #8]
 800956e:	091b      	lsrs	r3, r3, #4
 8009570:	f003 030f 	and.w	r3, r3, #15
 8009574:	4950      	ldr	r1, [pc, #320]	; (80096b8 <HAL_RCC_OscConfig+0x274>)
 8009576:	5ccb      	ldrb	r3, [r1, r3]
 8009578:	f003 031f 	and.w	r3, r3, #31
 800957c:	fa22 f303 	lsr.w	r3, r2, r3
 8009580:	4a4e      	ldr	r2, [pc, #312]	; (80096bc <HAL_RCC_OscConfig+0x278>)
 8009582:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009584:	4b4e      	ldr	r3, [pc, #312]	; (80096c0 <HAL_RCC_OscConfig+0x27c>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4618      	mov	r0, r3
 800958a:	f7fd fc29 	bl	8006de0 <HAL_InitTick>
 800958e:	4603      	mov	r3, r0
 8009590:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8009592:	7bfb      	ldrb	r3, [r7, #15]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d052      	beq.n	800963e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8009598:	7bfb      	ldrb	r3, [r7, #15]
 800959a:	e327      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	699b      	ldr	r3, [r3, #24]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d032      	beq.n	800960a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80095a4:	4b43      	ldr	r3, [pc, #268]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a42      	ldr	r2, [pc, #264]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 80095aa:	f043 0301 	orr.w	r3, r3, #1
 80095ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80095b0:	f7fd fc66 	bl	8006e80 <HAL_GetTick>
 80095b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80095b6:	e008      	b.n	80095ca <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80095b8:	f7fd fc62 	bl	8006e80 <HAL_GetTick>
 80095bc:	4602      	mov	r2, r0
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	1ad3      	subs	r3, r2, r3
 80095c2:	2b02      	cmp	r3, #2
 80095c4:	d901      	bls.n	80095ca <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80095c6:	2303      	movs	r3, #3
 80095c8:	e310      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80095ca:	4b3a      	ldr	r3, [pc, #232]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f003 0302 	and.w	r3, r3, #2
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d0f0      	beq.n	80095b8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80095d6:	4b37      	ldr	r3, [pc, #220]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a36      	ldr	r2, [pc, #216]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 80095dc:	f043 0308 	orr.w	r3, r3, #8
 80095e0:	6013      	str	r3, [r2, #0]
 80095e2:	4b34      	ldr	r3, [pc, #208]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6a1b      	ldr	r3, [r3, #32]
 80095ee:	4931      	ldr	r1, [pc, #196]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 80095f0:	4313      	orrs	r3, r2
 80095f2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80095f4:	4b2f      	ldr	r3, [pc, #188]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	69db      	ldr	r3, [r3, #28]
 8009600:	021b      	lsls	r3, r3, #8
 8009602:	492c      	ldr	r1, [pc, #176]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 8009604:	4313      	orrs	r3, r2
 8009606:	604b      	str	r3, [r1, #4]
 8009608:	e01a      	b.n	8009640 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800960a:	4b2a      	ldr	r3, [pc, #168]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4a29      	ldr	r2, [pc, #164]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 8009610:	f023 0301 	bic.w	r3, r3, #1
 8009614:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009616:	f7fd fc33 	bl	8006e80 <HAL_GetTick>
 800961a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800961c:	e008      	b.n	8009630 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800961e:	f7fd fc2f 	bl	8006e80 <HAL_GetTick>
 8009622:	4602      	mov	r2, r0
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	1ad3      	subs	r3, r2, r3
 8009628:	2b02      	cmp	r3, #2
 800962a:	d901      	bls.n	8009630 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800962c:	2303      	movs	r3, #3
 800962e:	e2dd      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009630:	4b20      	ldr	r3, [pc, #128]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f003 0302 	and.w	r3, r3, #2
 8009638:	2b00      	cmp	r3, #0
 800963a:	d1f0      	bne.n	800961e <HAL_RCC_OscConfig+0x1da>
 800963c:	e000      	b.n	8009640 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800963e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f003 0301 	and.w	r3, r3, #1
 8009648:	2b00      	cmp	r3, #0
 800964a:	d074      	beq.n	8009736 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800964c:	69bb      	ldr	r3, [r7, #24]
 800964e:	2b08      	cmp	r3, #8
 8009650:	d005      	beq.n	800965e <HAL_RCC_OscConfig+0x21a>
 8009652:	69bb      	ldr	r3, [r7, #24]
 8009654:	2b0c      	cmp	r3, #12
 8009656:	d10e      	bne.n	8009676 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	2b03      	cmp	r3, #3
 800965c:	d10b      	bne.n	8009676 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800965e:	4b15      	ldr	r3, [pc, #84]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009666:	2b00      	cmp	r3, #0
 8009668:	d064      	beq.n	8009734 <HAL_RCC_OscConfig+0x2f0>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d160      	bne.n	8009734 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8009672:	2301      	movs	r3, #1
 8009674:	e2ba      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800967e:	d106      	bne.n	800968e <HAL_RCC_OscConfig+0x24a>
 8009680:	4b0c      	ldr	r3, [pc, #48]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a0b      	ldr	r2, [pc, #44]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 8009686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800968a:	6013      	str	r3, [r2, #0]
 800968c:	e026      	b.n	80096dc <HAL_RCC_OscConfig+0x298>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009696:	d115      	bne.n	80096c4 <HAL_RCC_OscConfig+0x280>
 8009698:	4b06      	ldr	r3, [pc, #24]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a05      	ldr	r2, [pc, #20]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 800969e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80096a2:	6013      	str	r3, [r2, #0]
 80096a4:	4b03      	ldr	r3, [pc, #12]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a02      	ldr	r2, [pc, #8]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 80096aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096ae:	6013      	str	r3, [r2, #0]
 80096b0:	e014      	b.n	80096dc <HAL_RCC_OscConfig+0x298>
 80096b2:	bf00      	nop
 80096b4:	40021000 	.word	0x40021000
 80096b8:	08018194 	.word	0x08018194
 80096bc:	2000020c 	.word	0x2000020c
 80096c0:	2000023c 	.word	0x2000023c
 80096c4:	4ba0      	ldr	r3, [pc, #640]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4a9f      	ldr	r2, [pc, #636]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 80096ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096ce:	6013      	str	r3, [r2, #0]
 80096d0:	4b9d      	ldr	r3, [pc, #628]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4a9c      	ldr	r2, [pc, #624]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 80096d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80096da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d013      	beq.n	800970c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096e4:	f7fd fbcc 	bl	8006e80 <HAL_GetTick>
 80096e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80096ea:	e008      	b.n	80096fe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80096ec:	f7fd fbc8 	bl	8006e80 <HAL_GetTick>
 80096f0:	4602      	mov	r2, r0
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	1ad3      	subs	r3, r2, r3
 80096f6:	2b64      	cmp	r3, #100	; 0x64
 80096f8:	d901      	bls.n	80096fe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80096fa:	2303      	movs	r3, #3
 80096fc:	e276      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80096fe:	4b92      	ldr	r3, [pc, #584]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009706:	2b00      	cmp	r3, #0
 8009708:	d0f0      	beq.n	80096ec <HAL_RCC_OscConfig+0x2a8>
 800970a:	e014      	b.n	8009736 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800970c:	f7fd fbb8 	bl	8006e80 <HAL_GetTick>
 8009710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009712:	e008      	b.n	8009726 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009714:	f7fd fbb4 	bl	8006e80 <HAL_GetTick>
 8009718:	4602      	mov	r2, r0
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	1ad3      	subs	r3, r2, r3
 800971e:	2b64      	cmp	r3, #100	; 0x64
 8009720:	d901      	bls.n	8009726 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009722:	2303      	movs	r3, #3
 8009724:	e262      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009726:	4b88      	ldr	r3, [pc, #544]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800972e:	2b00      	cmp	r3, #0
 8009730:	d1f0      	bne.n	8009714 <HAL_RCC_OscConfig+0x2d0>
 8009732:	e000      	b.n	8009736 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f003 0302 	and.w	r3, r3, #2
 800973e:	2b00      	cmp	r3, #0
 8009740:	d060      	beq.n	8009804 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8009742:	69bb      	ldr	r3, [r7, #24]
 8009744:	2b04      	cmp	r3, #4
 8009746:	d005      	beq.n	8009754 <HAL_RCC_OscConfig+0x310>
 8009748:	69bb      	ldr	r3, [r7, #24]
 800974a:	2b0c      	cmp	r3, #12
 800974c:	d119      	bne.n	8009782 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	2b02      	cmp	r3, #2
 8009752:	d116      	bne.n	8009782 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009754:	4b7c      	ldr	r3, [pc, #496]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800975c:	2b00      	cmp	r3, #0
 800975e:	d005      	beq.n	800976c <HAL_RCC_OscConfig+0x328>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	68db      	ldr	r3, [r3, #12]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d101      	bne.n	800976c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8009768:	2301      	movs	r3, #1
 800976a:	e23f      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800976c:	4b76      	ldr	r3, [pc, #472]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 800976e:	685b      	ldr	r3, [r3, #4]
 8009770:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	691b      	ldr	r3, [r3, #16]
 8009778:	061b      	lsls	r3, r3, #24
 800977a:	4973      	ldr	r1, [pc, #460]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 800977c:	4313      	orrs	r3, r2
 800977e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009780:	e040      	b.n	8009804 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	68db      	ldr	r3, [r3, #12]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d023      	beq.n	80097d2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800978a:	4b6f      	ldr	r3, [pc, #444]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a6e      	ldr	r2, [pc, #440]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 8009790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009794:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009796:	f7fd fb73 	bl	8006e80 <HAL_GetTick>
 800979a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800979c:	e008      	b.n	80097b0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800979e:	f7fd fb6f 	bl	8006e80 <HAL_GetTick>
 80097a2:	4602      	mov	r2, r0
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	1ad3      	subs	r3, r2, r3
 80097a8:	2b02      	cmp	r3, #2
 80097aa:	d901      	bls.n	80097b0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80097ac:	2303      	movs	r3, #3
 80097ae:	e21d      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80097b0:	4b65      	ldr	r3, [pc, #404]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d0f0      	beq.n	800979e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80097bc:	4b62      	ldr	r3, [pc, #392]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	691b      	ldr	r3, [r3, #16]
 80097c8:	061b      	lsls	r3, r3, #24
 80097ca:	495f      	ldr	r1, [pc, #380]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 80097cc:	4313      	orrs	r3, r2
 80097ce:	604b      	str	r3, [r1, #4]
 80097d0:	e018      	b.n	8009804 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80097d2:	4b5d      	ldr	r3, [pc, #372]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4a5c      	ldr	r2, [pc, #368]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 80097d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097de:	f7fd fb4f 	bl	8006e80 <HAL_GetTick>
 80097e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80097e4:	e008      	b.n	80097f8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80097e6:	f7fd fb4b 	bl	8006e80 <HAL_GetTick>
 80097ea:	4602      	mov	r2, r0
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	1ad3      	subs	r3, r2, r3
 80097f0:	2b02      	cmp	r3, #2
 80097f2:	d901      	bls.n	80097f8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80097f4:	2303      	movs	r3, #3
 80097f6:	e1f9      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80097f8:	4b53      	ldr	r3, [pc, #332]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009800:	2b00      	cmp	r3, #0
 8009802:	d1f0      	bne.n	80097e6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f003 0308 	and.w	r3, r3, #8
 800980c:	2b00      	cmp	r3, #0
 800980e:	d03c      	beq.n	800988a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	695b      	ldr	r3, [r3, #20]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d01c      	beq.n	8009852 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009818:	4b4b      	ldr	r3, [pc, #300]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 800981a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800981e:	4a4a      	ldr	r2, [pc, #296]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 8009820:	f043 0301 	orr.w	r3, r3, #1
 8009824:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009828:	f7fd fb2a 	bl	8006e80 <HAL_GetTick>
 800982c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800982e:	e008      	b.n	8009842 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009830:	f7fd fb26 	bl	8006e80 <HAL_GetTick>
 8009834:	4602      	mov	r2, r0
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	1ad3      	subs	r3, r2, r3
 800983a:	2b02      	cmp	r3, #2
 800983c:	d901      	bls.n	8009842 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800983e:	2303      	movs	r3, #3
 8009840:	e1d4      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009842:	4b41      	ldr	r3, [pc, #260]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 8009844:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009848:	f003 0302 	and.w	r3, r3, #2
 800984c:	2b00      	cmp	r3, #0
 800984e:	d0ef      	beq.n	8009830 <HAL_RCC_OscConfig+0x3ec>
 8009850:	e01b      	b.n	800988a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009852:	4b3d      	ldr	r3, [pc, #244]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 8009854:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009858:	4a3b      	ldr	r2, [pc, #236]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 800985a:	f023 0301 	bic.w	r3, r3, #1
 800985e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009862:	f7fd fb0d 	bl	8006e80 <HAL_GetTick>
 8009866:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009868:	e008      	b.n	800987c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800986a:	f7fd fb09 	bl	8006e80 <HAL_GetTick>
 800986e:	4602      	mov	r2, r0
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	1ad3      	subs	r3, r2, r3
 8009874:	2b02      	cmp	r3, #2
 8009876:	d901      	bls.n	800987c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8009878:	2303      	movs	r3, #3
 800987a:	e1b7      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800987c:	4b32      	ldr	r3, [pc, #200]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 800987e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009882:	f003 0302 	and.w	r3, r3, #2
 8009886:	2b00      	cmp	r3, #0
 8009888:	d1ef      	bne.n	800986a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f003 0304 	and.w	r3, r3, #4
 8009892:	2b00      	cmp	r3, #0
 8009894:	f000 80a6 	beq.w	80099e4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009898:	2300      	movs	r3, #0
 800989a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800989c:	4b2a      	ldr	r3, [pc, #168]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 800989e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d10d      	bne.n	80098c4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80098a8:	4b27      	ldr	r3, [pc, #156]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 80098aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098ac:	4a26      	ldr	r2, [pc, #152]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 80098ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098b2:	6593      	str	r3, [r2, #88]	; 0x58
 80098b4:	4b24      	ldr	r3, [pc, #144]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 80098b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098bc:	60bb      	str	r3, [r7, #8]
 80098be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80098c0:	2301      	movs	r3, #1
 80098c2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80098c4:	4b21      	ldr	r3, [pc, #132]	; (800994c <HAL_RCC_OscConfig+0x508>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d118      	bne.n	8009902 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80098d0:	4b1e      	ldr	r3, [pc, #120]	; (800994c <HAL_RCC_OscConfig+0x508>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a1d      	ldr	r2, [pc, #116]	; (800994c <HAL_RCC_OscConfig+0x508>)
 80098d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80098dc:	f7fd fad0 	bl	8006e80 <HAL_GetTick>
 80098e0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80098e2:	e008      	b.n	80098f6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80098e4:	f7fd facc 	bl	8006e80 <HAL_GetTick>
 80098e8:	4602      	mov	r2, r0
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	1ad3      	subs	r3, r2, r3
 80098ee:	2b02      	cmp	r3, #2
 80098f0:	d901      	bls.n	80098f6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80098f2:	2303      	movs	r3, #3
 80098f4:	e17a      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80098f6:	4b15      	ldr	r3, [pc, #84]	; (800994c <HAL_RCC_OscConfig+0x508>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d0f0      	beq.n	80098e4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	689b      	ldr	r3, [r3, #8]
 8009906:	2b01      	cmp	r3, #1
 8009908:	d108      	bne.n	800991c <HAL_RCC_OscConfig+0x4d8>
 800990a:	4b0f      	ldr	r3, [pc, #60]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 800990c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009910:	4a0d      	ldr	r2, [pc, #52]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 8009912:	f043 0301 	orr.w	r3, r3, #1
 8009916:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800991a:	e029      	b.n	8009970 <HAL_RCC_OscConfig+0x52c>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	689b      	ldr	r3, [r3, #8]
 8009920:	2b05      	cmp	r3, #5
 8009922:	d115      	bne.n	8009950 <HAL_RCC_OscConfig+0x50c>
 8009924:	4b08      	ldr	r3, [pc, #32]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 8009926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800992a:	4a07      	ldr	r2, [pc, #28]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 800992c:	f043 0304 	orr.w	r3, r3, #4
 8009930:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009934:	4b04      	ldr	r3, [pc, #16]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 8009936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800993a:	4a03      	ldr	r2, [pc, #12]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 800993c:	f043 0301 	orr.w	r3, r3, #1
 8009940:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009944:	e014      	b.n	8009970 <HAL_RCC_OscConfig+0x52c>
 8009946:	bf00      	nop
 8009948:	40021000 	.word	0x40021000
 800994c:	40007000 	.word	0x40007000
 8009950:	4b9c      	ldr	r3, [pc, #624]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009956:	4a9b      	ldr	r2, [pc, #620]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009958:	f023 0301 	bic.w	r3, r3, #1
 800995c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009960:	4b98      	ldr	r3, [pc, #608]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009966:	4a97      	ldr	r2, [pc, #604]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009968:	f023 0304 	bic.w	r3, r3, #4
 800996c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	689b      	ldr	r3, [r3, #8]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d016      	beq.n	80099a6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009978:	f7fd fa82 	bl	8006e80 <HAL_GetTick>
 800997c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800997e:	e00a      	b.n	8009996 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009980:	f7fd fa7e 	bl	8006e80 <HAL_GetTick>
 8009984:	4602      	mov	r2, r0
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	1ad3      	subs	r3, r2, r3
 800998a:	f241 3288 	movw	r2, #5000	; 0x1388
 800998e:	4293      	cmp	r3, r2
 8009990:	d901      	bls.n	8009996 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8009992:	2303      	movs	r3, #3
 8009994:	e12a      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009996:	4b8b      	ldr	r3, [pc, #556]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800999c:	f003 0302 	and.w	r3, r3, #2
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d0ed      	beq.n	8009980 <HAL_RCC_OscConfig+0x53c>
 80099a4:	e015      	b.n	80099d2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099a6:	f7fd fa6b 	bl	8006e80 <HAL_GetTick>
 80099aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80099ac:	e00a      	b.n	80099c4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80099ae:	f7fd fa67 	bl	8006e80 <HAL_GetTick>
 80099b2:	4602      	mov	r2, r0
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	1ad3      	subs	r3, r2, r3
 80099b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80099bc:	4293      	cmp	r3, r2
 80099be:	d901      	bls.n	80099c4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80099c0:	2303      	movs	r3, #3
 80099c2:	e113      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80099c4:	4b7f      	ldr	r3, [pc, #508]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 80099c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099ca:	f003 0302 	and.w	r3, r3, #2
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d1ed      	bne.n	80099ae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80099d2:	7ffb      	ldrb	r3, [r7, #31]
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	d105      	bne.n	80099e4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80099d8:	4b7a      	ldr	r3, [pc, #488]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 80099da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099dc:	4a79      	ldr	r2, [pc, #484]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 80099de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099e2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	f000 80fe 	beq.w	8009bea <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099f2:	2b02      	cmp	r3, #2
 80099f4:	f040 80d0 	bne.w	8009b98 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80099f8:	4b72      	ldr	r3, [pc, #456]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 80099fa:	68db      	ldr	r3, [r3, #12]
 80099fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	f003 0203 	and.w	r2, r3, #3
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d130      	bne.n	8009a6e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a16:	3b01      	subs	r3, #1
 8009a18:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	d127      	bne.n	8009a6e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a28:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d11f      	bne.n	8009a6e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a34:	687a      	ldr	r2, [r7, #4]
 8009a36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009a38:	2a07      	cmp	r2, #7
 8009a3a:	bf14      	ite	ne
 8009a3c:	2201      	movne	r2, #1
 8009a3e:	2200      	moveq	r2, #0
 8009a40:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d113      	bne.n	8009a6e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a50:	085b      	lsrs	r3, r3, #1
 8009a52:	3b01      	subs	r3, #1
 8009a54:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8009a56:	429a      	cmp	r2, r3
 8009a58:	d109      	bne.n	8009a6e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a64:	085b      	lsrs	r3, r3, #1
 8009a66:	3b01      	subs	r3, #1
 8009a68:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	d06e      	beq.n	8009b4c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	2b0c      	cmp	r3, #12
 8009a72:	d069      	beq.n	8009b48 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8009a74:	4b53      	ldr	r3, [pc, #332]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d105      	bne.n	8009a8c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8009a80:	4b50      	ldr	r3, [pc, #320]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d001      	beq.n	8009a90 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	e0ad      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8009a90:	4b4c      	ldr	r3, [pc, #304]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4a4b      	ldr	r2, [pc, #300]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009a96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009a9a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009a9c:	f7fd f9f0 	bl	8006e80 <HAL_GetTick>
 8009aa0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009aa2:	e008      	b.n	8009ab6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009aa4:	f7fd f9ec 	bl	8006e80 <HAL_GetTick>
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	1ad3      	subs	r3, r2, r3
 8009aae:	2b02      	cmp	r3, #2
 8009ab0:	d901      	bls.n	8009ab6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8009ab2:	2303      	movs	r3, #3
 8009ab4:	e09a      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009ab6:	4b43      	ldr	r3, [pc, #268]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d1f0      	bne.n	8009aa4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009ac2:	4b40      	ldr	r3, [pc, #256]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009ac4:	68da      	ldr	r2, [r3, #12]
 8009ac6:	4b40      	ldr	r3, [pc, #256]	; (8009bc8 <HAL_RCC_OscConfig+0x784>)
 8009ac8:	4013      	ands	r3, r2
 8009aca:	687a      	ldr	r2, [r7, #4]
 8009acc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8009ace:	687a      	ldr	r2, [r7, #4]
 8009ad0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009ad2:	3a01      	subs	r2, #1
 8009ad4:	0112      	lsls	r2, r2, #4
 8009ad6:	4311      	orrs	r1, r2
 8009ad8:	687a      	ldr	r2, [r7, #4]
 8009ada:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009adc:	0212      	lsls	r2, r2, #8
 8009ade:	4311      	orrs	r1, r2
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009ae4:	0852      	lsrs	r2, r2, #1
 8009ae6:	3a01      	subs	r2, #1
 8009ae8:	0552      	lsls	r2, r2, #21
 8009aea:	4311      	orrs	r1, r2
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009af0:	0852      	lsrs	r2, r2, #1
 8009af2:	3a01      	subs	r2, #1
 8009af4:	0652      	lsls	r2, r2, #25
 8009af6:	4311      	orrs	r1, r2
 8009af8:	687a      	ldr	r2, [r7, #4]
 8009afa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009afc:	0912      	lsrs	r2, r2, #4
 8009afe:	0452      	lsls	r2, r2, #17
 8009b00:	430a      	orrs	r2, r1
 8009b02:	4930      	ldr	r1, [pc, #192]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009b04:	4313      	orrs	r3, r2
 8009b06:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8009b08:	4b2e      	ldr	r3, [pc, #184]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4a2d      	ldr	r2, [pc, #180]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009b0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009b12:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009b14:	4b2b      	ldr	r3, [pc, #172]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009b16:	68db      	ldr	r3, [r3, #12]
 8009b18:	4a2a      	ldr	r2, [pc, #168]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009b1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009b1e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009b20:	f7fd f9ae 	bl	8006e80 <HAL_GetTick>
 8009b24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009b26:	e008      	b.n	8009b3a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b28:	f7fd f9aa 	bl	8006e80 <HAL_GetTick>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	1ad3      	subs	r3, r2, r3
 8009b32:	2b02      	cmp	r3, #2
 8009b34:	d901      	bls.n	8009b3a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8009b36:	2303      	movs	r3, #3
 8009b38:	e058      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009b3a:	4b22      	ldr	r3, [pc, #136]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d0f0      	beq.n	8009b28 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009b46:	e050      	b.n	8009bea <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8009b48:	2301      	movs	r3, #1
 8009b4a:	e04f      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009b4c:	4b1d      	ldr	r3, [pc, #116]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d148      	bne.n	8009bea <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009b58:	4b1a      	ldr	r3, [pc, #104]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	4a19      	ldr	r2, [pc, #100]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009b5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009b62:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009b64:	4b17      	ldr	r3, [pc, #92]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009b66:	68db      	ldr	r3, [r3, #12]
 8009b68:	4a16      	ldr	r2, [pc, #88]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009b6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009b6e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009b70:	f7fd f986 	bl	8006e80 <HAL_GetTick>
 8009b74:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009b76:	e008      	b.n	8009b8a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b78:	f7fd f982 	bl	8006e80 <HAL_GetTick>
 8009b7c:	4602      	mov	r2, r0
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	1ad3      	subs	r3, r2, r3
 8009b82:	2b02      	cmp	r3, #2
 8009b84:	d901      	bls.n	8009b8a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8009b86:	2303      	movs	r3, #3
 8009b88:	e030      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009b8a:	4b0e      	ldr	r3, [pc, #56]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d0f0      	beq.n	8009b78 <HAL_RCC_OscConfig+0x734>
 8009b96:	e028      	b.n	8009bea <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009b98:	69bb      	ldr	r3, [r7, #24]
 8009b9a:	2b0c      	cmp	r3, #12
 8009b9c:	d023      	beq.n	8009be6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b9e:	4b09      	ldr	r3, [pc, #36]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a08      	ldr	r2, [pc, #32]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009ba4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009ba8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009baa:	f7fd f969 	bl	8006e80 <HAL_GetTick>
 8009bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009bb0:	e00c      	b.n	8009bcc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009bb2:	f7fd f965 	bl	8006e80 <HAL_GetTick>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	1ad3      	subs	r3, r2, r3
 8009bbc:	2b02      	cmp	r3, #2
 8009bbe:	d905      	bls.n	8009bcc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8009bc0:	2303      	movs	r3, #3
 8009bc2:	e013      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
 8009bc4:	40021000 	.word	0x40021000
 8009bc8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009bcc:	4b09      	ldr	r3, [pc, #36]	; (8009bf4 <HAL_RCC_OscConfig+0x7b0>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d1ec      	bne.n	8009bb2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8009bd8:	4b06      	ldr	r3, [pc, #24]	; (8009bf4 <HAL_RCC_OscConfig+0x7b0>)
 8009bda:	68da      	ldr	r2, [r3, #12]
 8009bdc:	4905      	ldr	r1, [pc, #20]	; (8009bf4 <HAL_RCC_OscConfig+0x7b0>)
 8009bde:	4b06      	ldr	r3, [pc, #24]	; (8009bf8 <HAL_RCC_OscConfig+0x7b4>)
 8009be0:	4013      	ands	r3, r2
 8009be2:	60cb      	str	r3, [r1, #12]
 8009be4:	e001      	b.n	8009bea <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8009be6:	2301      	movs	r3, #1
 8009be8:	e000      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8009bea:	2300      	movs	r3, #0
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3720      	adds	r7, #32
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}
 8009bf4:	40021000 	.word	0x40021000
 8009bf8:	feeefffc 	.word	0xfeeefffc

08009bfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d101      	bne.n	8009c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	e0e7      	b.n	8009de0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009c10:	4b75      	ldr	r3, [pc, #468]	; (8009de8 <HAL_RCC_ClockConfig+0x1ec>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f003 0307 	and.w	r3, r3, #7
 8009c18:	683a      	ldr	r2, [r7, #0]
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d910      	bls.n	8009c40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c1e:	4b72      	ldr	r3, [pc, #456]	; (8009de8 <HAL_RCC_ClockConfig+0x1ec>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f023 0207 	bic.w	r2, r3, #7
 8009c26:	4970      	ldr	r1, [pc, #448]	; (8009de8 <HAL_RCC_ClockConfig+0x1ec>)
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c2e:	4b6e      	ldr	r3, [pc, #440]	; (8009de8 <HAL_RCC_ClockConfig+0x1ec>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f003 0307 	and.w	r3, r3, #7
 8009c36:	683a      	ldr	r2, [r7, #0]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d001      	beq.n	8009c40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	e0cf      	b.n	8009de0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f003 0302 	and.w	r3, r3, #2
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d010      	beq.n	8009c6e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	689a      	ldr	r2, [r3, #8]
 8009c50:	4b66      	ldr	r3, [pc, #408]	; (8009dec <HAL_RCC_ClockConfig+0x1f0>)
 8009c52:	689b      	ldr	r3, [r3, #8]
 8009c54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d908      	bls.n	8009c6e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009c5c:	4b63      	ldr	r3, [pc, #396]	; (8009dec <HAL_RCC_ClockConfig+0x1f0>)
 8009c5e:	689b      	ldr	r3, [r3, #8]
 8009c60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	4960      	ldr	r1, [pc, #384]	; (8009dec <HAL_RCC_ClockConfig+0x1f0>)
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f003 0301 	and.w	r3, r3, #1
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d04c      	beq.n	8009d14 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	2b03      	cmp	r3, #3
 8009c80:	d107      	bne.n	8009c92 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009c82:	4b5a      	ldr	r3, [pc, #360]	; (8009dec <HAL_RCC_ClockConfig+0x1f0>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d121      	bne.n	8009cd2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8009c8e:	2301      	movs	r3, #1
 8009c90:	e0a6      	b.n	8009de0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	2b02      	cmp	r3, #2
 8009c98:	d107      	bne.n	8009caa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009c9a:	4b54      	ldr	r3, [pc, #336]	; (8009dec <HAL_RCC_ClockConfig+0x1f0>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d115      	bne.n	8009cd2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	e09a      	b.n	8009de0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d107      	bne.n	8009cc2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009cb2:	4b4e      	ldr	r3, [pc, #312]	; (8009dec <HAL_RCC_ClockConfig+0x1f0>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f003 0302 	and.w	r3, r3, #2
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d109      	bne.n	8009cd2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	e08e      	b.n	8009de0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009cc2:	4b4a      	ldr	r3, [pc, #296]	; (8009dec <HAL_RCC_ClockConfig+0x1f0>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d101      	bne.n	8009cd2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009cce:	2301      	movs	r3, #1
 8009cd0:	e086      	b.n	8009de0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009cd2:	4b46      	ldr	r3, [pc, #280]	; (8009dec <HAL_RCC_ClockConfig+0x1f0>)
 8009cd4:	689b      	ldr	r3, [r3, #8]
 8009cd6:	f023 0203 	bic.w	r2, r3, #3
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	4943      	ldr	r1, [pc, #268]	; (8009dec <HAL_RCC_ClockConfig+0x1f0>)
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ce4:	f7fd f8cc 	bl	8006e80 <HAL_GetTick>
 8009ce8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009cea:	e00a      	b.n	8009d02 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009cec:	f7fd f8c8 	bl	8006e80 <HAL_GetTick>
 8009cf0:	4602      	mov	r2, r0
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	1ad3      	subs	r3, r2, r3
 8009cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d901      	bls.n	8009d02 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8009cfe:	2303      	movs	r3, #3
 8009d00:	e06e      	b.n	8009de0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d02:	4b3a      	ldr	r3, [pc, #232]	; (8009dec <HAL_RCC_ClockConfig+0x1f0>)
 8009d04:	689b      	ldr	r3, [r3, #8]
 8009d06:	f003 020c 	and.w	r2, r3, #12
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d1eb      	bne.n	8009cec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f003 0302 	and.w	r3, r3, #2
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d010      	beq.n	8009d42 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	689a      	ldr	r2, [r3, #8]
 8009d24:	4b31      	ldr	r3, [pc, #196]	; (8009dec <HAL_RCC_ClockConfig+0x1f0>)
 8009d26:	689b      	ldr	r3, [r3, #8]
 8009d28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d208      	bcs.n	8009d42 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009d30:	4b2e      	ldr	r3, [pc, #184]	; (8009dec <HAL_RCC_ClockConfig+0x1f0>)
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	689b      	ldr	r3, [r3, #8]
 8009d3c:	492b      	ldr	r1, [pc, #172]	; (8009dec <HAL_RCC_ClockConfig+0x1f0>)
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009d42:	4b29      	ldr	r3, [pc, #164]	; (8009de8 <HAL_RCC_ClockConfig+0x1ec>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f003 0307 	and.w	r3, r3, #7
 8009d4a:	683a      	ldr	r2, [r7, #0]
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d210      	bcs.n	8009d72 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d50:	4b25      	ldr	r3, [pc, #148]	; (8009de8 <HAL_RCC_ClockConfig+0x1ec>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f023 0207 	bic.w	r2, r3, #7
 8009d58:	4923      	ldr	r1, [pc, #140]	; (8009de8 <HAL_RCC_ClockConfig+0x1ec>)
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d60:	4b21      	ldr	r3, [pc, #132]	; (8009de8 <HAL_RCC_ClockConfig+0x1ec>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f003 0307 	and.w	r3, r3, #7
 8009d68:	683a      	ldr	r2, [r7, #0]
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d001      	beq.n	8009d72 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8009d6e:	2301      	movs	r3, #1
 8009d70:	e036      	b.n	8009de0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f003 0304 	and.w	r3, r3, #4
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d008      	beq.n	8009d90 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009d7e:	4b1b      	ldr	r3, [pc, #108]	; (8009dec <HAL_RCC_ClockConfig+0x1f0>)
 8009d80:	689b      	ldr	r3, [r3, #8]
 8009d82:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	68db      	ldr	r3, [r3, #12]
 8009d8a:	4918      	ldr	r1, [pc, #96]	; (8009dec <HAL_RCC_ClockConfig+0x1f0>)
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f003 0308 	and.w	r3, r3, #8
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d009      	beq.n	8009db0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009d9c:	4b13      	ldr	r3, [pc, #76]	; (8009dec <HAL_RCC_ClockConfig+0x1f0>)
 8009d9e:	689b      	ldr	r3, [r3, #8]
 8009da0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	691b      	ldr	r3, [r3, #16]
 8009da8:	00db      	lsls	r3, r3, #3
 8009daa:	4910      	ldr	r1, [pc, #64]	; (8009dec <HAL_RCC_ClockConfig+0x1f0>)
 8009dac:	4313      	orrs	r3, r2
 8009dae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009db0:	f000 f824 	bl	8009dfc <HAL_RCC_GetSysClockFreq>
 8009db4:	4602      	mov	r2, r0
 8009db6:	4b0d      	ldr	r3, [pc, #52]	; (8009dec <HAL_RCC_ClockConfig+0x1f0>)
 8009db8:	689b      	ldr	r3, [r3, #8]
 8009dba:	091b      	lsrs	r3, r3, #4
 8009dbc:	f003 030f 	and.w	r3, r3, #15
 8009dc0:	490b      	ldr	r1, [pc, #44]	; (8009df0 <HAL_RCC_ClockConfig+0x1f4>)
 8009dc2:	5ccb      	ldrb	r3, [r1, r3]
 8009dc4:	f003 031f 	and.w	r3, r3, #31
 8009dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8009dcc:	4a09      	ldr	r2, [pc, #36]	; (8009df4 <HAL_RCC_ClockConfig+0x1f8>)
 8009dce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009dd0:	4b09      	ldr	r3, [pc, #36]	; (8009df8 <HAL_RCC_ClockConfig+0x1fc>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f7fd f803 	bl	8006de0 <HAL_InitTick>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	72fb      	strb	r3, [r7, #11]

  return status;
 8009dde:	7afb      	ldrb	r3, [r7, #11]
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3710      	adds	r7, #16
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	40022000 	.word	0x40022000
 8009dec:	40021000 	.word	0x40021000
 8009df0:	08018194 	.word	0x08018194
 8009df4:	2000020c 	.word	0x2000020c
 8009df8:	2000023c 	.word	0x2000023c

08009dfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b089      	sub	sp, #36	; 0x24
 8009e00:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8009e02:	2300      	movs	r3, #0
 8009e04:	61fb      	str	r3, [r7, #28]
 8009e06:	2300      	movs	r3, #0
 8009e08:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009e0a:	4b3e      	ldr	r3, [pc, #248]	; (8009f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8009e0c:	689b      	ldr	r3, [r3, #8]
 8009e0e:	f003 030c 	and.w	r3, r3, #12
 8009e12:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009e14:	4b3b      	ldr	r3, [pc, #236]	; (8009f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8009e16:	68db      	ldr	r3, [r3, #12]
 8009e18:	f003 0303 	and.w	r3, r3, #3
 8009e1c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d005      	beq.n	8009e30 <HAL_RCC_GetSysClockFreq+0x34>
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	2b0c      	cmp	r3, #12
 8009e28:	d121      	bne.n	8009e6e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d11e      	bne.n	8009e6e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009e30:	4b34      	ldr	r3, [pc, #208]	; (8009f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f003 0308 	and.w	r3, r3, #8
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d107      	bne.n	8009e4c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009e3c:	4b31      	ldr	r3, [pc, #196]	; (8009f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8009e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e42:	0a1b      	lsrs	r3, r3, #8
 8009e44:	f003 030f 	and.w	r3, r3, #15
 8009e48:	61fb      	str	r3, [r7, #28]
 8009e4a:	e005      	b.n	8009e58 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009e4c:	4b2d      	ldr	r3, [pc, #180]	; (8009f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	091b      	lsrs	r3, r3, #4
 8009e52:	f003 030f 	and.w	r3, r3, #15
 8009e56:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009e58:	4a2b      	ldr	r2, [pc, #172]	; (8009f08 <HAL_RCC_GetSysClockFreq+0x10c>)
 8009e5a:	69fb      	ldr	r3, [r7, #28]
 8009e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e60:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d10d      	bne.n	8009e84 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009e68:	69fb      	ldr	r3, [r7, #28]
 8009e6a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009e6c:	e00a      	b.n	8009e84 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	2b04      	cmp	r3, #4
 8009e72:	d102      	bne.n	8009e7a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009e74:	4b25      	ldr	r3, [pc, #148]	; (8009f0c <HAL_RCC_GetSysClockFreq+0x110>)
 8009e76:	61bb      	str	r3, [r7, #24]
 8009e78:	e004      	b.n	8009e84 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	2b08      	cmp	r3, #8
 8009e7e:	d101      	bne.n	8009e84 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009e80:	4b23      	ldr	r3, [pc, #140]	; (8009f10 <HAL_RCC_GetSysClockFreq+0x114>)
 8009e82:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	2b0c      	cmp	r3, #12
 8009e88:	d134      	bne.n	8009ef4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009e8a:	4b1e      	ldr	r3, [pc, #120]	; (8009f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8009e8c:	68db      	ldr	r3, [r3, #12]
 8009e8e:	f003 0303 	and.w	r3, r3, #3
 8009e92:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	2b02      	cmp	r3, #2
 8009e98:	d003      	beq.n	8009ea2 <HAL_RCC_GetSysClockFreq+0xa6>
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	2b03      	cmp	r3, #3
 8009e9e:	d003      	beq.n	8009ea8 <HAL_RCC_GetSysClockFreq+0xac>
 8009ea0:	e005      	b.n	8009eae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8009ea2:	4b1a      	ldr	r3, [pc, #104]	; (8009f0c <HAL_RCC_GetSysClockFreq+0x110>)
 8009ea4:	617b      	str	r3, [r7, #20]
      break;
 8009ea6:	e005      	b.n	8009eb4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8009ea8:	4b19      	ldr	r3, [pc, #100]	; (8009f10 <HAL_RCC_GetSysClockFreq+0x114>)
 8009eaa:	617b      	str	r3, [r7, #20]
      break;
 8009eac:	e002      	b.n	8009eb4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8009eae:	69fb      	ldr	r3, [r7, #28]
 8009eb0:	617b      	str	r3, [r7, #20]
      break;
 8009eb2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009eb4:	4b13      	ldr	r3, [pc, #76]	; (8009f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8009eb6:	68db      	ldr	r3, [r3, #12]
 8009eb8:	091b      	lsrs	r3, r3, #4
 8009eba:	f003 0307 	and.w	r3, r3, #7
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009ec2:	4b10      	ldr	r3, [pc, #64]	; (8009f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8009ec4:	68db      	ldr	r3, [r3, #12]
 8009ec6:	0a1b      	lsrs	r3, r3, #8
 8009ec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ecc:	697a      	ldr	r2, [r7, #20]
 8009ece:	fb03 f202 	mul.w	r2, r3, r2
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ed8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009eda:	4b0a      	ldr	r3, [pc, #40]	; (8009f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8009edc:	68db      	ldr	r3, [r3, #12]
 8009ede:	0e5b      	lsrs	r3, r3, #25
 8009ee0:	f003 0303 	and.w	r3, r3, #3
 8009ee4:	3301      	adds	r3, #1
 8009ee6:	005b      	lsls	r3, r3, #1
 8009ee8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8009eea:	697a      	ldr	r2, [r7, #20]
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ef2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8009ef4:	69bb      	ldr	r3, [r7, #24]
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3724      	adds	r7, #36	; 0x24
 8009efa:	46bd      	mov	sp, r7
 8009efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f00:	4770      	bx	lr
 8009f02:	bf00      	nop
 8009f04:	40021000 	.word	0x40021000
 8009f08:	080181ac 	.word	0x080181ac
 8009f0c:	00f42400 	.word	0x00f42400
 8009f10:	007a1200 	.word	0x007a1200

08009f14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009f14:	b480      	push	{r7}
 8009f16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009f18:	4b03      	ldr	r3, [pc, #12]	; (8009f28 <HAL_RCC_GetHCLKFreq+0x14>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr
 8009f26:	bf00      	nop
 8009f28:	2000020c 	.word	0x2000020c

08009f2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009f30:	f7ff fff0 	bl	8009f14 <HAL_RCC_GetHCLKFreq>
 8009f34:	4602      	mov	r2, r0
 8009f36:	4b06      	ldr	r3, [pc, #24]	; (8009f50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009f38:	689b      	ldr	r3, [r3, #8]
 8009f3a:	0a1b      	lsrs	r3, r3, #8
 8009f3c:	f003 0307 	and.w	r3, r3, #7
 8009f40:	4904      	ldr	r1, [pc, #16]	; (8009f54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009f42:	5ccb      	ldrb	r3, [r1, r3]
 8009f44:	f003 031f 	and.w	r3, r3, #31
 8009f48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	bd80      	pop	{r7, pc}
 8009f50:	40021000 	.word	0x40021000
 8009f54:	080181a4 	.word	0x080181a4

08009f58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009f5c:	f7ff ffda 	bl	8009f14 <HAL_RCC_GetHCLKFreq>
 8009f60:	4602      	mov	r2, r0
 8009f62:	4b06      	ldr	r3, [pc, #24]	; (8009f7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009f64:	689b      	ldr	r3, [r3, #8]
 8009f66:	0adb      	lsrs	r3, r3, #11
 8009f68:	f003 0307 	and.w	r3, r3, #7
 8009f6c:	4904      	ldr	r1, [pc, #16]	; (8009f80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009f6e:	5ccb      	ldrb	r3, [r1, r3]
 8009f70:	f003 031f 	and.w	r3, r3, #31
 8009f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	bd80      	pop	{r7, pc}
 8009f7c:	40021000 	.word	0x40021000
 8009f80:	080181a4 	.word	0x080181a4

08009f84 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b086      	sub	sp, #24
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009f90:	4b2a      	ldr	r3, [pc, #168]	; (800a03c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d003      	beq.n	8009fa4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009f9c:	f7ff f9ee 	bl	800937c <HAL_PWREx_GetVoltageRange>
 8009fa0:	6178      	str	r0, [r7, #20]
 8009fa2:	e014      	b.n	8009fce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009fa4:	4b25      	ldr	r3, [pc, #148]	; (800a03c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fa8:	4a24      	ldr	r2, [pc, #144]	; (800a03c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009fae:	6593      	str	r3, [r2, #88]	; 0x58
 8009fb0:	4b22      	ldr	r3, [pc, #136]	; (800a03c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fb8:	60fb      	str	r3, [r7, #12]
 8009fba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009fbc:	f7ff f9de 	bl	800937c <HAL_PWREx_GetVoltageRange>
 8009fc0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009fc2:	4b1e      	ldr	r3, [pc, #120]	; (800a03c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fc6:	4a1d      	ldr	r2, [pc, #116]	; (800a03c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009fc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009fcc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fd4:	d10b      	bne.n	8009fee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2b80      	cmp	r3, #128	; 0x80
 8009fda:	d919      	bls.n	800a010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2ba0      	cmp	r3, #160	; 0xa0
 8009fe0:	d902      	bls.n	8009fe8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009fe2:	2302      	movs	r3, #2
 8009fe4:	613b      	str	r3, [r7, #16]
 8009fe6:	e013      	b.n	800a010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009fe8:	2301      	movs	r3, #1
 8009fea:	613b      	str	r3, [r7, #16]
 8009fec:	e010      	b.n	800a010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2b80      	cmp	r3, #128	; 0x80
 8009ff2:	d902      	bls.n	8009ffa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8009ff4:	2303      	movs	r3, #3
 8009ff6:	613b      	str	r3, [r7, #16]
 8009ff8:	e00a      	b.n	800a010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2b80      	cmp	r3, #128	; 0x80
 8009ffe:	d102      	bne.n	800a006 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a000:	2302      	movs	r3, #2
 800a002:	613b      	str	r3, [r7, #16]
 800a004:	e004      	b.n	800a010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2b70      	cmp	r3, #112	; 0x70
 800a00a:	d101      	bne.n	800a010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a00c:	2301      	movs	r3, #1
 800a00e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a010:	4b0b      	ldr	r3, [pc, #44]	; (800a040 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f023 0207 	bic.w	r2, r3, #7
 800a018:	4909      	ldr	r1, [pc, #36]	; (800a040 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	4313      	orrs	r3, r2
 800a01e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800a020:	4b07      	ldr	r3, [pc, #28]	; (800a040 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f003 0307 	and.w	r3, r3, #7
 800a028:	693a      	ldr	r2, [r7, #16]
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d001      	beq.n	800a032 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800a02e:	2301      	movs	r3, #1
 800a030:	e000      	b.n	800a034 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800a032:	2300      	movs	r3, #0
}
 800a034:	4618      	mov	r0, r3
 800a036:	3718      	adds	r7, #24
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}
 800a03c:	40021000 	.word	0x40021000
 800a040:	40022000 	.word	0x40022000

0800a044 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b086      	sub	sp, #24
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a04c:	2300      	movs	r3, #0
 800a04e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a050:	2300      	movs	r3, #0
 800a052:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d041      	beq.n	800a0e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a064:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a068:	d02a      	beq.n	800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800a06a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a06e:	d824      	bhi.n	800a0ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a070:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a074:	d008      	beq.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a076:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a07a:	d81e      	bhi.n	800a0ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d00a      	beq.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800a080:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a084:	d010      	beq.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a086:	e018      	b.n	800a0ba <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a088:	4b86      	ldr	r3, [pc, #536]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a08a:	68db      	ldr	r3, [r3, #12]
 800a08c:	4a85      	ldr	r2, [pc, #532]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a08e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a092:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a094:	e015      	b.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	3304      	adds	r3, #4
 800a09a:	2100      	movs	r1, #0
 800a09c:	4618      	mov	r0, r3
 800a09e:	f000 fabb 	bl	800a618 <RCCEx_PLLSAI1_Config>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a0a6:	e00c      	b.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	3320      	adds	r3, #32
 800a0ac:	2100      	movs	r1, #0
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f000 fba6 	bl	800a800 <RCCEx_PLLSAI2_Config>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a0b8:	e003      	b.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	74fb      	strb	r3, [r7, #19]
      break;
 800a0be:	e000      	b.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800a0c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0c2:	7cfb      	ldrb	r3, [r7, #19]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d10b      	bne.n	800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a0c8:	4b76      	ldr	r3, [pc, #472]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a0ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0d6:	4973      	ldr	r1, [pc, #460]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800a0de:	e001      	b.n	800a0e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0e0:	7cfb      	ldrb	r3, [r7, #19]
 800a0e2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d041      	beq.n	800a174 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a0f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a0f8:	d02a      	beq.n	800a150 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800a0fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a0fe:	d824      	bhi.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800a100:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a104:	d008      	beq.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800a106:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a10a:	d81e      	bhi.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d00a      	beq.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800a110:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a114:	d010      	beq.n	800a138 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800a116:	e018      	b.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a118:	4b62      	ldr	r3, [pc, #392]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a11a:	68db      	ldr	r3, [r3, #12]
 800a11c:	4a61      	ldr	r2, [pc, #388]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a11e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a122:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a124:	e015      	b.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	3304      	adds	r3, #4
 800a12a:	2100      	movs	r1, #0
 800a12c:	4618      	mov	r0, r3
 800a12e:	f000 fa73 	bl	800a618 <RCCEx_PLLSAI1_Config>
 800a132:	4603      	mov	r3, r0
 800a134:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a136:	e00c      	b.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	3320      	adds	r3, #32
 800a13c:	2100      	movs	r1, #0
 800a13e:	4618      	mov	r0, r3
 800a140:	f000 fb5e 	bl	800a800 <RCCEx_PLLSAI2_Config>
 800a144:	4603      	mov	r3, r0
 800a146:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a148:	e003      	b.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a14a:	2301      	movs	r3, #1
 800a14c:	74fb      	strb	r3, [r7, #19]
      break;
 800a14e:	e000      	b.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800a150:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a152:	7cfb      	ldrb	r3, [r7, #19]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d10b      	bne.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a158:	4b52      	ldr	r3, [pc, #328]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a15a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a15e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a166:	494f      	ldr	r1, [pc, #316]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a168:	4313      	orrs	r3, r2
 800a16a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800a16e:	e001      	b.n	800a174 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a170:	7cfb      	ldrb	r3, [r7, #19]
 800a172:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	f000 80a0 	beq.w	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a182:	2300      	movs	r3, #0
 800a184:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a186:	4b47      	ldr	r3, [pc, #284]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a18a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d101      	bne.n	800a196 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800a192:	2301      	movs	r3, #1
 800a194:	e000      	b.n	800a198 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800a196:	2300      	movs	r3, #0
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d00d      	beq.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a19c:	4b41      	ldr	r3, [pc, #260]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a19e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1a0:	4a40      	ldr	r2, [pc, #256]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a1a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1a6:	6593      	str	r3, [r2, #88]	; 0x58
 800a1a8:	4b3e      	ldr	r3, [pc, #248]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a1aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a1b0:	60bb      	str	r3, [r7, #8]
 800a1b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a1b8:	4b3b      	ldr	r3, [pc, #236]	; (800a2a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4a3a      	ldr	r2, [pc, #232]	; (800a2a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a1be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a1c4:	f7fc fe5c 	bl	8006e80 <HAL_GetTick>
 800a1c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a1ca:	e009      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a1cc:	f7fc fe58 	bl	8006e80 <HAL_GetTick>
 800a1d0:	4602      	mov	r2, r0
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	1ad3      	subs	r3, r2, r3
 800a1d6:	2b02      	cmp	r3, #2
 800a1d8:	d902      	bls.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800a1da:	2303      	movs	r3, #3
 800a1dc:	74fb      	strb	r3, [r7, #19]
        break;
 800a1de:	e005      	b.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a1e0:	4b31      	ldr	r3, [pc, #196]	; (800a2a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d0ef      	beq.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800a1ec:	7cfb      	ldrb	r3, [r7, #19]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d15c      	bne.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a1f2:	4b2c      	ldr	r3, [pc, #176]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a1f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a1fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d01f      	beq.n	800a244 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a20a:	697a      	ldr	r2, [r7, #20]
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d019      	beq.n	800a244 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a210:	4b24      	ldr	r3, [pc, #144]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a21a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a21c:	4b21      	ldr	r3, [pc, #132]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a21e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a222:	4a20      	ldr	r2, [pc, #128]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a22c:	4b1d      	ldr	r3, [pc, #116]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a22e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a232:	4a1c      	ldr	r2, [pc, #112]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a238:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a23c:	4a19      	ldr	r2, [pc, #100]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	f003 0301 	and.w	r3, r3, #1
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d016      	beq.n	800a27c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a24e:	f7fc fe17 	bl	8006e80 <HAL_GetTick>
 800a252:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a254:	e00b      	b.n	800a26e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a256:	f7fc fe13 	bl	8006e80 <HAL_GetTick>
 800a25a:	4602      	mov	r2, r0
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	1ad3      	subs	r3, r2, r3
 800a260:	f241 3288 	movw	r2, #5000	; 0x1388
 800a264:	4293      	cmp	r3, r2
 800a266:	d902      	bls.n	800a26e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800a268:	2303      	movs	r3, #3
 800a26a:	74fb      	strb	r3, [r7, #19]
            break;
 800a26c:	e006      	b.n	800a27c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a26e:	4b0d      	ldr	r3, [pc, #52]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a274:	f003 0302 	and.w	r3, r3, #2
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d0ec      	beq.n	800a256 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800a27c:	7cfb      	ldrb	r3, [r7, #19]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d10c      	bne.n	800a29c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a282:	4b08      	ldr	r3, [pc, #32]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a288:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a292:	4904      	ldr	r1, [pc, #16]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a294:	4313      	orrs	r3, r2
 800a296:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800a29a:	e009      	b.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a29c:	7cfb      	ldrb	r3, [r7, #19]
 800a29e:	74bb      	strb	r3, [r7, #18]
 800a2a0:	e006      	b.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800a2a2:	bf00      	nop
 800a2a4:	40021000 	.word	0x40021000
 800a2a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2ac:	7cfb      	ldrb	r3, [r7, #19]
 800a2ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a2b0:	7c7b      	ldrb	r3, [r7, #17]
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d105      	bne.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a2b6:	4b9e      	ldr	r3, [pc, #632]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a2b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2ba:	4a9d      	ldr	r2, [pc, #628]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a2bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a2c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f003 0301 	and.w	r3, r3, #1
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d00a      	beq.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a2ce:	4b98      	ldr	r3, [pc, #608]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a2d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2d4:	f023 0203 	bic.w	r2, r3, #3
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2dc:	4994      	ldr	r1, [pc, #592]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f003 0302 	and.w	r3, r3, #2
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d00a      	beq.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a2f0:	4b8f      	ldr	r3, [pc, #572]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a2f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2f6:	f023 020c 	bic.w	r2, r3, #12
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2fe:	498c      	ldr	r1, [pc, #560]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a300:	4313      	orrs	r3, r2
 800a302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f003 0304 	and.w	r3, r3, #4
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d00a      	beq.n	800a328 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a312:	4b87      	ldr	r3, [pc, #540]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a318:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a320:	4983      	ldr	r1, [pc, #524]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a322:	4313      	orrs	r3, r2
 800a324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f003 0308 	and.w	r3, r3, #8
 800a330:	2b00      	cmp	r3, #0
 800a332:	d00a      	beq.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a334:	4b7e      	ldr	r3, [pc, #504]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a33a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a342:	497b      	ldr	r1, [pc, #492]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a344:	4313      	orrs	r3, r2
 800a346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f003 0310 	and.w	r3, r3, #16
 800a352:	2b00      	cmp	r3, #0
 800a354:	d00a      	beq.n	800a36c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a356:	4b76      	ldr	r3, [pc, #472]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a35c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a364:	4972      	ldr	r1, [pc, #456]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a366:	4313      	orrs	r3, r2
 800a368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f003 0320 	and.w	r3, r3, #32
 800a374:	2b00      	cmp	r3, #0
 800a376:	d00a      	beq.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a378:	4b6d      	ldr	r3, [pc, #436]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a37a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a37e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a386:	496a      	ldr	r1, [pc, #424]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a388:	4313      	orrs	r3, r2
 800a38a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a396:	2b00      	cmp	r3, #0
 800a398:	d00a      	beq.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a39a:	4b65      	ldr	r3, [pc, #404]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a39c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3a8:	4961      	ldr	r1, [pc, #388]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d00a      	beq.n	800a3d2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a3bc:	4b5c      	ldr	r3, [pc, #368]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a3be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3ca:	4959      	ldr	r1, [pc, #356]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d00a      	beq.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a3de:	4b54      	ldr	r3, [pc, #336]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a3e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3ec:	4950      	ldr	r1, [pc, #320]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d00a      	beq.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a400:	4b4b      	ldr	r3, [pc, #300]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a406:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a40e:	4948      	ldr	r1, [pc, #288]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a410:	4313      	orrs	r3, r2
 800a412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d00a      	beq.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a422:	4b43      	ldr	r3, [pc, #268]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a428:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a430:	493f      	ldr	r1, [pc, #252]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a432:	4313      	orrs	r3, r2
 800a434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a440:	2b00      	cmp	r3, #0
 800a442:	d028      	beq.n	800a496 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a444:	4b3a      	ldr	r3, [pc, #232]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a44a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a452:	4937      	ldr	r1, [pc, #220]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a454:	4313      	orrs	r3, r2
 800a456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a45e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a462:	d106      	bne.n	800a472 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a464:	4b32      	ldr	r3, [pc, #200]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a466:	68db      	ldr	r3, [r3, #12]
 800a468:	4a31      	ldr	r2, [pc, #196]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a46a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a46e:	60d3      	str	r3, [r2, #12]
 800a470:	e011      	b.n	800a496 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a476:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a47a:	d10c      	bne.n	800a496 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	3304      	adds	r3, #4
 800a480:	2101      	movs	r1, #1
 800a482:	4618      	mov	r0, r3
 800a484:	f000 f8c8 	bl	800a618 <RCCEx_PLLSAI1_Config>
 800a488:	4603      	mov	r3, r0
 800a48a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800a48c:	7cfb      	ldrb	r3, [r7, #19]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d001      	beq.n	800a496 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800a492:	7cfb      	ldrb	r3, [r7, #19]
 800a494:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d028      	beq.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a4a2:	4b23      	ldr	r3, [pc, #140]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a4a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4b0:	491f      	ldr	r1, [pc, #124]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a4b2:	4313      	orrs	r3, r2
 800a4b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a4c0:	d106      	bne.n	800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a4c2:	4b1b      	ldr	r3, [pc, #108]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a4c4:	68db      	ldr	r3, [r3, #12]
 800a4c6:	4a1a      	ldr	r2, [pc, #104]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a4c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a4cc:	60d3      	str	r3, [r2, #12]
 800a4ce:	e011      	b.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a4d8:	d10c      	bne.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	3304      	adds	r3, #4
 800a4de:	2101      	movs	r1, #1
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f000 f899 	bl	800a618 <RCCEx_PLLSAI1_Config>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a4ea:	7cfb      	ldrb	r3, [r7, #19]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d001      	beq.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800a4f0:	7cfb      	ldrb	r3, [r7, #19]
 800a4f2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d02b      	beq.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a500:	4b0b      	ldr	r3, [pc, #44]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a506:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a50e:	4908      	ldr	r1, [pc, #32]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a510:	4313      	orrs	r3, r2
 800a512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a51a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a51e:	d109      	bne.n	800a534 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a520:	4b03      	ldr	r3, [pc, #12]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a522:	68db      	ldr	r3, [r3, #12]
 800a524:	4a02      	ldr	r2, [pc, #8]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a526:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a52a:	60d3      	str	r3, [r2, #12]
 800a52c:	e014      	b.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800a52e:	bf00      	nop
 800a530:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a538:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a53c:	d10c      	bne.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	3304      	adds	r3, #4
 800a542:	2101      	movs	r1, #1
 800a544:	4618      	mov	r0, r3
 800a546:	f000 f867 	bl	800a618 <RCCEx_PLLSAI1_Config>
 800a54a:	4603      	mov	r3, r0
 800a54c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a54e:	7cfb      	ldrb	r3, [r7, #19]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d001      	beq.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800a554:	7cfb      	ldrb	r3, [r7, #19]
 800a556:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a560:	2b00      	cmp	r3, #0
 800a562:	d02f      	beq.n	800a5c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a564:	4b2b      	ldr	r3, [pc, #172]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a56a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a572:	4928      	ldr	r1, [pc, #160]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a574:	4313      	orrs	r3, r2
 800a576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a57e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a582:	d10d      	bne.n	800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	3304      	adds	r3, #4
 800a588:	2102      	movs	r1, #2
 800a58a:	4618      	mov	r0, r3
 800a58c:	f000 f844 	bl	800a618 <RCCEx_PLLSAI1_Config>
 800a590:	4603      	mov	r3, r0
 800a592:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a594:	7cfb      	ldrb	r3, [r7, #19]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d014      	beq.n	800a5c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800a59a:	7cfb      	ldrb	r3, [r7, #19]
 800a59c:	74bb      	strb	r3, [r7, #18]
 800a59e:	e011      	b.n	800a5c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a5a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5a8:	d10c      	bne.n	800a5c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	3320      	adds	r3, #32
 800a5ae:	2102      	movs	r1, #2
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f000 f925 	bl	800a800 <RCCEx_PLLSAI2_Config>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a5ba:	7cfb      	ldrb	r3, [r7, #19]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d001      	beq.n	800a5c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800a5c0:	7cfb      	ldrb	r3, [r7, #19]
 800a5c2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d00a      	beq.n	800a5e6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a5d0:	4b10      	ldr	r3, [pc, #64]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a5d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5d6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5de:	490d      	ldr	r1, [pc, #52]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a5e0:	4313      	orrs	r3, r2
 800a5e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d00b      	beq.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a5f2:	4b08      	ldr	r3, [pc, #32]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a5f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a602:	4904      	ldr	r1, [pc, #16]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a604:	4313      	orrs	r3, r2
 800a606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800a60a:	7cbb      	ldrb	r3, [r7, #18]
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3718      	adds	r7, #24
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}
 800a614:	40021000 	.word	0x40021000

0800a618 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b084      	sub	sp, #16
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a622:	2300      	movs	r3, #0
 800a624:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a626:	4b75      	ldr	r3, [pc, #468]	; (800a7fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800a628:	68db      	ldr	r3, [r3, #12]
 800a62a:	f003 0303 	and.w	r3, r3, #3
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d018      	beq.n	800a664 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a632:	4b72      	ldr	r3, [pc, #456]	; (800a7fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800a634:	68db      	ldr	r3, [r3, #12]
 800a636:	f003 0203 	and.w	r2, r3, #3
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	429a      	cmp	r2, r3
 800a640:	d10d      	bne.n	800a65e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
       ||
 800a646:	2b00      	cmp	r3, #0
 800a648:	d009      	beq.n	800a65e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800a64a:	4b6c      	ldr	r3, [pc, #432]	; (800a7fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800a64c:	68db      	ldr	r3, [r3, #12]
 800a64e:	091b      	lsrs	r3, r3, #4
 800a650:	f003 0307 	and.w	r3, r3, #7
 800a654:	1c5a      	adds	r2, r3, #1
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	685b      	ldr	r3, [r3, #4]
       ||
 800a65a:	429a      	cmp	r2, r3
 800a65c:	d047      	beq.n	800a6ee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a65e:	2301      	movs	r3, #1
 800a660:	73fb      	strb	r3, [r7, #15]
 800a662:	e044      	b.n	800a6ee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	2b03      	cmp	r3, #3
 800a66a:	d018      	beq.n	800a69e <RCCEx_PLLSAI1_Config+0x86>
 800a66c:	2b03      	cmp	r3, #3
 800a66e:	d825      	bhi.n	800a6bc <RCCEx_PLLSAI1_Config+0xa4>
 800a670:	2b01      	cmp	r3, #1
 800a672:	d002      	beq.n	800a67a <RCCEx_PLLSAI1_Config+0x62>
 800a674:	2b02      	cmp	r3, #2
 800a676:	d009      	beq.n	800a68c <RCCEx_PLLSAI1_Config+0x74>
 800a678:	e020      	b.n	800a6bc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a67a:	4b60      	ldr	r3, [pc, #384]	; (800a7fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f003 0302 	and.w	r3, r3, #2
 800a682:	2b00      	cmp	r3, #0
 800a684:	d11d      	bne.n	800a6c2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800a686:	2301      	movs	r3, #1
 800a688:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a68a:	e01a      	b.n	800a6c2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a68c:	4b5b      	ldr	r3, [pc, #364]	; (800a7fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a694:	2b00      	cmp	r3, #0
 800a696:	d116      	bne.n	800a6c6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800a698:	2301      	movs	r3, #1
 800a69a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a69c:	e013      	b.n	800a6c6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a69e:	4b57      	ldr	r3, [pc, #348]	; (800a7fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d10f      	bne.n	800a6ca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a6aa:	4b54      	ldr	r3, [pc, #336]	; (800a7fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d109      	bne.n	800a6ca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a6ba:	e006      	b.n	800a6ca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a6bc:	2301      	movs	r3, #1
 800a6be:	73fb      	strb	r3, [r7, #15]
      break;
 800a6c0:	e004      	b.n	800a6cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a6c2:	bf00      	nop
 800a6c4:	e002      	b.n	800a6cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a6c6:	bf00      	nop
 800a6c8:	e000      	b.n	800a6cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a6ca:	bf00      	nop
    }

    if(status == HAL_OK)
 800a6cc:	7bfb      	ldrb	r3, [r7, #15]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d10d      	bne.n	800a6ee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a6d2:	4b4a      	ldr	r3, [pc, #296]	; (800a7fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800a6d4:	68db      	ldr	r3, [r3, #12]
 800a6d6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6819      	ldr	r1, [r3, #0]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	685b      	ldr	r3, [r3, #4]
 800a6e2:	3b01      	subs	r3, #1
 800a6e4:	011b      	lsls	r3, r3, #4
 800a6e6:	430b      	orrs	r3, r1
 800a6e8:	4944      	ldr	r1, [pc, #272]	; (800a7fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a6ee:	7bfb      	ldrb	r3, [r7, #15]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d17d      	bne.n	800a7f0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800a6f4:	4b41      	ldr	r3, [pc, #260]	; (800a7fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4a40      	ldr	r2, [pc, #256]	; (800a7fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800a6fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a6fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a700:	f7fc fbbe 	bl	8006e80 <HAL_GetTick>
 800a704:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a706:	e009      	b.n	800a71c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a708:	f7fc fbba 	bl	8006e80 <HAL_GetTick>
 800a70c:	4602      	mov	r2, r0
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	1ad3      	subs	r3, r2, r3
 800a712:	2b02      	cmp	r3, #2
 800a714:	d902      	bls.n	800a71c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a716:	2303      	movs	r3, #3
 800a718:	73fb      	strb	r3, [r7, #15]
        break;
 800a71a:	e005      	b.n	800a728 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a71c:	4b37      	ldr	r3, [pc, #220]	; (800a7fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a724:	2b00      	cmp	r3, #0
 800a726:	d1ef      	bne.n	800a708 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a728:	7bfb      	ldrb	r3, [r7, #15]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d160      	bne.n	800a7f0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d111      	bne.n	800a758 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a734:	4b31      	ldr	r3, [pc, #196]	; (800a7fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800a736:	691b      	ldr	r3, [r3, #16]
 800a738:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800a73c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a740:	687a      	ldr	r2, [r7, #4]
 800a742:	6892      	ldr	r2, [r2, #8]
 800a744:	0211      	lsls	r1, r2, #8
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	68d2      	ldr	r2, [r2, #12]
 800a74a:	0912      	lsrs	r2, r2, #4
 800a74c:	0452      	lsls	r2, r2, #17
 800a74e:	430a      	orrs	r2, r1
 800a750:	492a      	ldr	r1, [pc, #168]	; (800a7fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800a752:	4313      	orrs	r3, r2
 800a754:	610b      	str	r3, [r1, #16]
 800a756:	e027      	b.n	800a7a8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	d112      	bne.n	800a784 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a75e:	4b27      	ldr	r3, [pc, #156]	; (800a7fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800a760:	691b      	ldr	r3, [r3, #16]
 800a762:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800a766:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a76a:	687a      	ldr	r2, [r7, #4]
 800a76c:	6892      	ldr	r2, [r2, #8]
 800a76e:	0211      	lsls	r1, r2, #8
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	6912      	ldr	r2, [r2, #16]
 800a774:	0852      	lsrs	r2, r2, #1
 800a776:	3a01      	subs	r2, #1
 800a778:	0552      	lsls	r2, r2, #21
 800a77a:	430a      	orrs	r2, r1
 800a77c:	491f      	ldr	r1, [pc, #124]	; (800a7fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800a77e:	4313      	orrs	r3, r2
 800a780:	610b      	str	r3, [r1, #16]
 800a782:	e011      	b.n	800a7a8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a784:	4b1d      	ldr	r3, [pc, #116]	; (800a7fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800a786:	691b      	ldr	r3, [r3, #16]
 800a788:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a78c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a790:	687a      	ldr	r2, [r7, #4]
 800a792:	6892      	ldr	r2, [r2, #8]
 800a794:	0211      	lsls	r1, r2, #8
 800a796:	687a      	ldr	r2, [r7, #4]
 800a798:	6952      	ldr	r2, [r2, #20]
 800a79a:	0852      	lsrs	r2, r2, #1
 800a79c:	3a01      	subs	r2, #1
 800a79e:	0652      	lsls	r2, r2, #25
 800a7a0:	430a      	orrs	r2, r1
 800a7a2:	4916      	ldr	r1, [pc, #88]	; (800a7fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800a7a8:	4b14      	ldr	r3, [pc, #80]	; (800a7fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4a13      	ldr	r2, [pc, #76]	; (800a7fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800a7ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a7b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a7b4:	f7fc fb64 	bl	8006e80 <HAL_GetTick>
 800a7b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a7ba:	e009      	b.n	800a7d0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a7bc:	f7fc fb60 	bl	8006e80 <HAL_GetTick>
 800a7c0:	4602      	mov	r2, r0
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	1ad3      	subs	r3, r2, r3
 800a7c6:	2b02      	cmp	r3, #2
 800a7c8:	d902      	bls.n	800a7d0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800a7ca:	2303      	movs	r3, #3
 800a7cc:	73fb      	strb	r3, [r7, #15]
          break;
 800a7ce:	e005      	b.n	800a7dc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a7d0:	4b0a      	ldr	r3, [pc, #40]	; (800a7fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d0ef      	beq.n	800a7bc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800a7dc:	7bfb      	ldrb	r3, [r7, #15]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d106      	bne.n	800a7f0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a7e2:	4b06      	ldr	r3, [pc, #24]	; (800a7fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800a7e4:	691a      	ldr	r2, [r3, #16]
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	699b      	ldr	r3, [r3, #24]
 800a7ea:	4904      	ldr	r1, [pc, #16]	; (800a7fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800a7ec:	4313      	orrs	r3, r2
 800a7ee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800a7f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3710      	adds	r7, #16
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
 800a7fa:	bf00      	nop
 800a7fc:	40021000 	.word	0x40021000

0800a800 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b084      	sub	sp, #16
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a80a:	2300      	movs	r3, #0
 800a80c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a80e:	4b6a      	ldr	r3, [pc, #424]	; (800a9b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a810:	68db      	ldr	r3, [r3, #12]
 800a812:	f003 0303 	and.w	r3, r3, #3
 800a816:	2b00      	cmp	r3, #0
 800a818:	d018      	beq.n	800a84c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800a81a:	4b67      	ldr	r3, [pc, #412]	; (800a9b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a81c:	68db      	ldr	r3, [r3, #12]
 800a81e:	f003 0203 	and.w	r2, r3, #3
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	429a      	cmp	r2, r3
 800a828:	d10d      	bne.n	800a846 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
       ||
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d009      	beq.n	800a846 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800a832:	4b61      	ldr	r3, [pc, #388]	; (800a9b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	091b      	lsrs	r3, r3, #4
 800a838:	f003 0307 	and.w	r3, r3, #7
 800a83c:	1c5a      	adds	r2, r3, #1
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	685b      	ldr	r3, [r3, #4]
       ||
 800a842:	429a      	cmp	r2, r3
 800a844:	d047      	beq.n	800a8d6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a846:	2301      	movs	r3, #1
 800a848:	73fb      	strb	r3, [r7, #15]
 800a84a:	e044      	b.n	800a8d6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	2b03      	cmp	r3, #3
 800a852:	d018      	beq.n	800a886 <RCCEx_PLLSAI2_Config+0x86>
 800a854:	2b03      	cmp	r3, #3
 800a856:	d825      	bhi.n	800a8a4 <RCCEx_PLLSAI2_Config+0xa4>
 800a858:	2b01      	cmp	r3, #1
 800a85a:	d002      	beq.n	800a862 <RCCEx_PLLSAI2_Config+0x62>
 800a85c:	2b02      	cmp	r3, #2
 800a85e:	d009      	beq.n	800a874 <RCCEx_PLLSAI2_Config+0x74>
 800a860:	e020      	b.n	800a8a4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a862:	4b55      	ldr	r3, [pc, #340]	; (800a9b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f003 0302 	and.w	r3, r3, #2
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d11d      	bne.n	800a8aa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800a86e:	2301      	movs	r3, #1
 800a870:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a872:	e01a      	b.n	800a8aa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a874:	4b50      	ldr	r3, [pc, #320]	; (800a9b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d116      	bne.n	800a8ae <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800a880:	2301      	movs	r3, #1
 800a882:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a884:	e013      	b.n	800a8ae <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a886:	4b4c      	ldr	r3, [pc, #304]	; (800a9b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d10f      	bne.n	800a8b2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a892:	4b49      	ldr	r3, [pc, #292]	; (800a9b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d109      	bne.n	800a8b2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800a89e:	2301      	movs	r3, #1
 800a8a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a8a2:	e006      	b.n	800a8b2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	73fb      	strb	r3, [r7, #15]
      break;
 800a8a8:	e004      	b.n	800a8b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a8aa:	bf00      	nop
 800a8ac:	e002      	b.n	800a8b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a8ae:	bf00      	nop
 800a8b0:	e000      	b.n	800a8b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a8b2:	bf00      	nop
    }

    if(status == HAL_OK)
 800a8b4:	7bfb      	ldrb	r3, [r7, #15]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d10d      	bne.n	800a8d6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a8ba:	4b3f      	ldr	r3, [pc, #252]	; (800a9b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a8bc:	68db      	ldr	r3, [r3, #12]
 800a8be:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6819      	ldr	r1, [r3, #0]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	3b01      	subs	r3, #1
 800a8cc:	011b      	lsls	r3, r3, #4
 800a8ce:	430b      	orrs	r3, r1
 800a8d0:	4939      	ldr	r1, [pc, #228]	; (800a9b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a8d2:	4313      	orrs	r3, r2
 800a8d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a8d6:	7bfb      	ldrb	r3, [r7, #15]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d167      	bne.n	800a9ac <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800a8dc:	4b36      	ldr	r3, [pc, #216]	; (800a9b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	4a35      	ldr	r2, [pc, #212]	; (800a9b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a8e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a8e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a8e8:	f7fc faca 	bl	8006e80 <HAL_GetTick>
 800a8ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a8ee:	e009      	b.n	800a904 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a8f0:	f7fc fac6 	bl	8006e80 <HAL_GetTick>
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	1ad3      	subs	r3, r2, r3
 800a8fa:	2b02      	cmp	r3, #2
 800a8fc:	d902      	bls.n	800a904 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a8fe:	2303      	movs	r3, #3
 800a900:	73fb      	strb	r3, [r7, #15]
        break;
 800a902:	e005      	b.n	800a910 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a904:	4b2c      	ldr	r3, [pc, #176]	; (800a9b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d1ef      	bne.n	800a8f0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a910:	7bfb      	ldrb	r3, [r7, #15]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d14a      	bne.n	800a9ac <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d111      	bne.n	800a940 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a91c:	4b26      	ldr	r3, [pc, #152]	; (800a9b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a91e:	695b      	ldr	r3, [r3, #20]
 800a920:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800a924:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a928:	687a      	ldr	r2, [r7, #4]
 800a92a:	6892      	ldr	r2, [r2, #8]
 800a92c:	0211      	lsls	r1, r2, #8
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	68d2      	ldr	r2, [r2, #12]
 800a932:	0912      	lsrs	r2, r2, #4
 800a934:	0452      	lsls	r2, r2, #17
 800a936:	430a      	orrs	r2, r1
 800a938:	491f      	ldr	r1, [pc, #124]	; (800a9b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a93a:	4313      	orrs	r3, r2
 800a93c:	614b      	str	r3, [r1, #20]
 800a93e:	e011      	b.n	800a964 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a940:	4b1d      	ldr	r3, [pc, #116]	; (800a9b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a942:	695b      	ldr	r3, [r3, #20]
 800a944:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a948:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a94c:	687a      	ldr	r2, [r7, #4]
 800a94e:	6892      	ldr	r2, [r2, #8]
 800a950:	0211      	lsls	r1, r2, #8
 800a952:	687a      	ldr	r2, [r7, #4]
 800a954:	6912      	ldr	r2, [r2, #16]
 800a956:	0852      	lsrs	r2, r2, #1
 800a958:	3a01      	subs	r2, #1
 800a95a:	0652      	lsls	r2, r2, #25
 800a95c:	430a      	orrs	r2, r1
 800a95e:	4916      	ldr	r1, [pc, #88]	; (800a9b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a960:	4313      	orrs	r3, r2
 800a962:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800a964:	4b14      	ldr	r3, [pc, #80]	; (800a9b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4a13      	ldr	r2, [pc, #76]	; (800a9b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a96a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a96e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a970:	f7fc fa86 	bl	8006e80 <HAL_GetTick>
 800a974:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a976:	e009      	b.n	800a98c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a978:	f7fc fa82 	bl	8006e80 <HAL_GetTick>
 800a97c:	4602      	mov	r2, r0
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	1ad3      	subs	r3, r2, r3
 800a982:	2b02      	cmp	r3, #2
 800a984:	d902      	bls.n	800a98c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800a986:	2303      	movs	r3, #3
 800a988:	73fb      	strb	r3, [r7, #15]
          break;
 800a98a:	e005      	b.n	800a998 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a98c:	4b0a      	ldr	r3, [pc, #40]	; (800a9b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a994:	2b00      	cmp	r3, #0
 800a996:	d0ef      	beq.n	800a978 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800a998:	7bfb      	ldrb	r3, [r7, #15]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d106      	bne.n	800a9ac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800a99e:	4b06      	ldr	r3, [pc, #24]	; (800a9b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a9a0:	695a      	ldr	r2, [r3, #20]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	695b      	ldr	r3, [r3, #20]
 800a9a6:	4904      	ldr	r1, [pc, #16]	; (800a9b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a9a8:	4313      	orrs	r3, r2
 800a9aa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800a9ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3710      	adds	r7, #16
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	bf00      	nop
 800a9b8:	40021000 	.word	0x40021000

0800a9bc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b084      	sub	sp, #16
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d06c      	beq.n	800aaa8 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a9d4:	b2db      	uxtb	r3, r3
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d106      	bne.n	800a9e8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f7fb f8dc 	bl	8005ba0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2202      	movs	r2, #2
 800a9ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	22ca      	movs	r2, #202	; 0xca
 800a9f6:	625a      	str	r2, [r3, #36]	; 0x24
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	2253      	movs	r2, #83	; 0x53
 800a9fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 fa49 	bl	800ae98 <RTC_EnterInitMode>
 800aa06:	4603      	mov	r3, r0
 800aa08:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800aa0a:	7bfb      	ldrb	r3, [r7, #15]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d14b      	bne.n	800aaa8 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	689b      	ldr	r3, [r3, #8]
 800aa16:	687a      	ldr	r2, [r7, #4]
 800aa18:	6812      	ldr	r2, [r2, #0]
 800aa1a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800aa1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa22:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	6899      	ldr	r1, [r3, #8]
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	685a      	ldr	r2, [r3, #4]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	691b      	ldr	r3, [r3, #16]
 800aa32:	431a      	orrs	r2, r3
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	699b      	ldr	r3, [r3, #24]
 800aa38:	431a      	orrs	r2, r3
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	430a      	orrs	r2, r1
 800aa40:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	687a      	ldr	r2, [r7, #4]
 800aa48:	68d2      	ldr	r2, [r2, #12]
 800aa4a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	6919      	ldr	r1, [r3, #16]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	689b      	ldr	r3, [r3, #8]
 800aa56:	041a      	lsls	r2, r3, #16
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	430a      	orrs	r2, r1
 800aa5e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f000 fa4d 	bl	800af00 <RTC_ExitInitMode>
 800aa66:	4603      	mov	r3, r0
 800aa68:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800aa6a:	7bfb      	ldrb	r3, [r7, #15]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d11b      	bne.n	800aaa8 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f022 0203 	bic.w	r2, r2, #3
 800aa7e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	69da      	ldr	r2, [r3, #28]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	695b      	ldr	r3, [r3, #20]
 800aa8e:	431a      	orrs	r2, r3
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	430a      	orrs	r2, r1
 800aa96:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	22ff      	movs	r2, #255	; 0xff
 800aa9e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2201      	movs	r2, #1
 800aaa4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800aaa8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3710      	adds	r7, #16
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}

0800aab2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800aab2:	b590      	push	{r4, r7, lr}
 800aab4:	b087      	sub	sp, #28
 800aab6:	af00      	add	r7, sp, #0
 800aab8:	60f8      	str	r0, [r7, #12]
 800aaba:	60b9      	str	r1, [r7, #8]
 800aabc:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aac4:	2b01      	cmp	r3, #1
 800aac6:	d101      	bne.n	800aacc <HAL_RTC_SetTime+0x1a>
 800aac8:	2302      	movs	r3, #2
 800aaca:	e08b      	b.n	800abe4 <HAL_RTC_SetTime+0x132>
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	2201      	movs	r2, #1
 800aad0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	2202      	movs	r2, #2
 800aad8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	22ca      	movs	r2, #202	; 0xca
 800aae2:	625a      	str	r2, [r3, #36]	; 0x24
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	2253      	movs	r2, #83	; 0x53
 800aaea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800aaec:	68f8      	ldr	r0, [r7, #12]
 800aaee:	f000 f9d3 	bl	800ae98 <RTC_EnterInitMode>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800aaf6:	7cfb      	ldrb	r3, [r7, #19]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d163      	bne.n	800abc4 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d126      	bne.n	800ab50 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	689b      	ldr	r3, [r3, #8]
 800ab08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d102      	bne.n	800ab16 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	2200      	movs	r2, #0
 800ab14:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	781b      	ldrb	r3, [r3, #0]
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f000 fa2e 	bl	800af7c <RTC_ByteToBcd2>
 800ab20:	4603      	mov	r3, r0
 800ab22:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	785b      	ldrb	r3, [r3, #1]
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f000 fa27 	bl	800af7c <RTC_ByteToBcd2>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ab32:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	789b      	ldrb	r3, [r3, #2]
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f000 fa1f 	bl	800af7c <RTC_ByteToBcd2>
 800ab3e:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ab40:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	78db      	ldrb	r3, [r3, #3]
 800ab48:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ab4a:	4313      	orrs	r3, r2
 800ab4c:	617b      	str	r3, [r7, #20]
 800ab4e:	e018      	b.n	800ab82 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	689b      	ldr	r3, [r3, #8]
 800ab56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d102      	bne.n	800ab64 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	2200      	movs	r2, #0
 800ab62:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	781b      	ldrb	r3, [r3, #0]
 800ab68:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	785b      	ldrb	r3, [r3, #1]
 800ab6e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ab70:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800ab72:	68ba      	ldr	r2, [r7, #8]
 800ab74:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ab76:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	78db      	ldrb	r3, [r3, #3]
 800ab7c:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ab7e:	4313      	orrs	r3, r2
 800ab80:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681a      	ldr	r2, [r3, #0]
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800ab8c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800ab90:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	689a      	ldr	r2, [r3, #8]
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800aba0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	6899      	ldr	r1, [r3, #8]
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	68da      	ldr	r2, [r3, #12]
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	691b      	ldr	r3, [r3, #16]
 800abb0:	431a      	orrs	r2, r3
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	430a      	orrs	r2, r1
 800abb8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800abba:	68f8      	ldr	r0, [r7, #12]
 800abbc:	f000 f9a0 	bl	800af00 <RTC_ExitInitMode>
 800abc0:	4603      	mov	r3, r0
 800abc2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	22ff      	movs	r2, #255	; 0xff
 800abca:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800abcc:	7cfb      	ldrb	r3, [r7, #19]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d103      	bne.n	800abda <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	2201      	movs	r2, #1
 800abd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	2200      	movs	r2, #0
 800abde:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800abe2:	7cfb      	ldrb	r3, [r7, #19]
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	371c      	adds	r7, #28
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd90      	pop	{r4, r7, pc}

0800abec <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b086      	sub	sp, #24
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	60f8      	str	r0, [r7, #12]
 800abf4:	60b9      	str	r1, [r7, #8]
 800abf6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	691b      	ldr	r3, [r3, #16]
 800ac08:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800ac1a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800ac1e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800ac20:	697b      	ldr	r3, [r7, #20]
 800ac22:	0c1b      	lsrs	r3, r3, #16
 800ac24:	b2db      	uxtb	r3, r3
 800ac26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac2a:	b2da      	uxtb	r2, r3
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	0a1b      	lsrs	r3, r3, #8
 800ac34:	b2db      	uxtb	r3, r3
 800ac36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac3a:	b2da      	uxtb	r2, r3
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	b2db      	uxtb	r3, r3
 800ac44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac48:	b2da      	uxtb	r2, r3
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	0d9b      	lsrs	r3, r3, #22
 800ac52:	b2db      	uxtb	r3, r3
 800ac54:	f003 0301 	and.w	r3, r3, #1
 800ac58:	b2da      	uxtb	r2, r3
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d11a      	bne.n	800ac9a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	781b      	ldrb	r3, [r3, #0]
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f000 f9a7 	bl	800afbc <RTC_Bcd2ToByte>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	461a      	mov	r2, r3
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	785b      	ldrb	r3, [r3, #1]
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f000 f99e 	bl	800afbc <RTC_Bcd2ToByte>
 800ac80:	4603      	mov	r3, r0
 800ac82:	461a      	mov	r2, r3
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	789b      	ldrb	r3, [r3, #2]
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f000 f995 	bl	800afbc <RTC_Bcd2ToByte>
 800ac92:	4603      	mov	r3, r0
 800ac94:	461a      	mov	r2, r3
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800ac9a:	2300      	movs	r3, #0
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3718      	adds	r7, #24
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800aca4:	b590      	push	{r4, r7, lr}
 800aca6:	b087      	sub	sp, #28
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	60f8      	str	r0, [r7, #12]
 800acac:	60b9      	str	r1, [r7, #8]
 800acae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800acb6:	2b01      	cmp	r3, #1
 800acb8:	d101      	bne.n	800acbe <HAL_RTC_SetDate+0x1a>
 800acba:	2302      	movs	r3, #2
 800acbc:	e075      	b.n	800adaa <HAL_RTC_SetDate+0x106>
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	2201      	movs	r2, #1
 800acc2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2202      	movs	r2, #2
 800acca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d10e      	bne.n	800acf2 <HAL_RTC_SetDate+0x4e>
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	785b      	ldrb	r3, [r3, #1]
 800acd8:	f003 0310 	and.w	r3, r3, #16
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d008      	beq.n	800acf2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	785b      	ldrb	r3, [r3, #1]
 800ace4:	f023 0310 	bic.w	r3, r3, #16
 800ace8:	b2db      	uxtb	r3, r3
 800acea:	330a      	adds	r3, #10
 800acec:	b2da      	uxtb	r2, r3
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d11c      	bne.n	800ad32 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	78db      	ldrb	r3, [r3, #3]
 800acfc:	4618      	mov	r0, r3
 800acfe:	f000 f93d 	bl	800af7c <RTC_ByteToBcd2>
 800ad02:	4603      	mov	r3, r0
 800ad04:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	785b      	ldrb	r3, [r3, #1]
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f000 f936 	bl	800af7c <RTC_ByteToBcd2>
 800ad10:	4603      	mov	r3, r0
 800ad12:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800ad14:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	789b      	ldrb	r3, [r3, #2]
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f000 f92e 	bl	800af7c <RTC_ByteToBcd2>
 800ad20:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800ad22:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	781b      	ldrb	r3, [r3, #0]
 800ad2a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800ad2c:	4313      	orrs	r3, r2
 800ad2e:	617b      	str	r3, [r7, #20]
 800ad30:	e00e      	b.n	800ad50 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	78db      	ldrb	r3, [r3, #3]
 800ad36:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	785b      	ldrb	r3, [r3, #1]
 800ad3c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800ad3e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800ad40:	68ba      	ldr	r2, [r7, #8]
 800ad42:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800ad44:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	781b      	ldrb	r3, [r3, #0]
 800ad4a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800ad4c:	4313      	orrs	r3, r2
 800ad4e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	22ca      	movs	r2, #202	; 0xca
 800ad56:	625a      	str	r2, [r3, #36]	; 0x24
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	2253      	movs	r2, #83	; 0x53
 800ad5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ad60:	68f8      	ldr	r0, [r7, #12]
 800ad62:	f000 f899 	bl	800ae98 <RTC_EnterInitMode>
 800ad66:	4603      	mov	r3, r0
 800ad68:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800ad6a:	7cfb      	ldrb	r3, [r7, #19]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d10c      	bne.n	800ad8a <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681a      	ldr	r2, [r3, #0]
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ad7a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ad7e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ad80:	68f8      	ldr	r0, [r7, #12]
 800ad82:	f000 f8bd 	bl	800af00 <RTC_ExitInitMode>
 800ad86:	4603      	mov	r3, r0
 800ad88:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	22ff      	movs	r2, #255	; 0xff
 800ad90:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800ad92:	7cfb      	ldrb	r3, [r7, #19]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d103      	bne.n	800ada0 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	2200      	movs	r2, #0
 800ada4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800ada8:	7cfb      	ldrb	r3, [r7, #19]
}
 800adaa:	4618      	mov	r0, r3
 800adac:	371c      	adds	r7, #28
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd90      	pop	{r4, r7, pc}

0800adb2 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800adb2:	b580      	push	{r7, lr}
 800adb4:	b086      	sub	sp, #24
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	60f8      	str	r0, [r7, #12]
 800adba:	60b9      	str	r1, [r7, #8]
 800adbc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800adc8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800adcc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	0c1b      	lsrs	r3, r3, #16
 800add2:	b2da      	uxtb	r2, r3
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	0a1b      	lsrs	r3, r3, #8
 800addc:	b2db      	uxtb	r3, r3
 800adde:	f003 031f 	and.w	r3, r3, #31
 800ade2:	b2da      	uxtb	r2, r3
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800ade8:	697b      	ldr	r3, [r7, #20]
 800adea:	b2db      	uxtb	r3, r3
 800adec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800adf0:	b2da      	uxtb	r2, r3
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	0b5b      	lsrs	r3, r3, #13
 800adfa:	b2db      	uxtb	r3, r3
 800adfc:	f003 0307 	and.w	r3, r3, #7
 800ae00:	b2da      	uxtb	r2, r3
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d11a      	bne.n	800ae42 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	78db      	ldrb	r3, [r3, #3]
 800ae10:	4618      	mov	r0, r3
 800ae12:	f000 f8d3 	bl	800afbc <RTC_Bcd2ToByte>
 800ae16:	4603      	mov	r3, r0
 800ae18:	461a      	mov	r2, r3
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	785b      	ldrb	r3, [r3, #1]
 800ae22:	4618      	mov	r0, r3
 800ae24:	f000 f8ca 	bl	800afbc <RTC_Bcd2ToByte>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	461a      	mov	r2, r3
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	789b      	ldrb	r3, [r3, #2]
 800ae34:	4618      	mov	r0, r3
 800ae36:	f000 f8c1 	bl	800afbc <RTC_Bcd2ToByte>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	461a      	mov	r2, r3
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800ae42:	2300      	movs	r3, #0
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3718      	adds	r7, #24
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}

0800ae4c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b084      	sub	sp, #16
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	68da      	ldr	r2, [r3, #12]
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800ae62:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800ae64:	f7fc f80c 	bl	8006e80 <HAL_GetTick>
 800ae68:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ae6a:	e009      	b.n	800ae80 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ae6c:	f7fc f808 	bl	8006e80 <HAL_GetTick>
 800ae70:	4602      	mov	r2, r0
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	1ad3      	subs	r3, r2, r3
 800ae76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ae7a:	d901      	bls.n	800ae80 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800ae7c:	2303      	movs	r3, #3
 800ae7e:	e007      	b.n	800ae90 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	68db      	ldr	r3, [r3, #12]
 800ae86:	f003 0320 	and.w	r3, r3, #32
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d0ee      	beq.n	800ae6c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800ae8e:	2300      	movs	r3, #0
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3710      	adds	r7, #16
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b084      	sub	sp, #16
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aea0:	2300      	movs	r3, #0
 800aea2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	68db      	ldr	r3, [r3, #12]
 800aeaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d120      	bne.n	800aef4 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aeba:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800aebc:	f7fb ffe0 	bl	8006e80 <HAL_GetTick>
 800aec0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800aec2:	e00d      	b.n	800aee0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800aec4:	f7fb ffdc 	bl	8006e80 <HAL_GetTick>
 800aec8:	4602      	mov	r2, r0
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	1ad3      	subs	r3, r2, r3
 800aece:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aed2:	d905      	bls.n	800aee0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800aed4:	2303      	movs	r3, #3
 800aed6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2203      	movs	r2, #3
 800aedc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	68db      	ldr	r3, [r3, #12]
 800aee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d102      	bne.n	800aef4 <RTC_EnterInitMode+0x5c>
 800aeee:	7bfb      	ldrb	r3, [r7, #15]
 800aef0:	2b03      	cmp	r3, #3
 800aef2:	d1e7      	bne.n	800aec4 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800aef4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3710      	adds	r7, #16
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}
	...

0800af00 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b084      	sub	sp, #16
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800af08:	2300      	movs	r3, #0
 800af0a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800af0c:	4b1a      	ldr	r3, [pc, #104]	; (800af78 <RTC_ExitInitMode+0x78>)
 800af0e:	68db      	ldr	r3, [r3, #12]
 800af10:	4a19      	ldr	r2, [pc, #100]	; (800af78 <RTC_ExitInitMode+0x78>)
 800af12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af16:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800af18:	4b17      	ldr	r3, [pc, #92]	; (800af78 <RTC_ExitInitMode+0x78>)
 800af1a:	689b      	ldr	r3, [r3, #8]
 800af1c:	f003 0320 	and.w	r3, r3, #32
 800af20:	2b00      	cmp	r3, #0
 800af22:	d10c      	bne.n	800af3e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f7ff ff91 	bl	800ae4c <HAL_RTC_WaitForSynchro>
 800af2a:	4603      	mov	r3, r0
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d01e      	beq.n	800af6e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2203      	movs	r2, #3
 800af34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800af38:	2303      	movs	r3, #3
 800af3a:	73fb      	strb	r3, [r7, #15]
 800af3c:	e017      	b.n	800af6e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800af3e:	4b0e      	ldr	r3, [pc, #56]	; (800af78 <RTC_ExitInitMode+0x78>)
 800af40:	689b      	ldr	r3, [r3, #8]
 800af42:	4a0d      	ldr	r2, [pc, #52]	; (800af78 <RTC_ExitInitMode+0x78>)
 800af44:	f023 0320 	bic.w	r3, r3, #32
 800af48:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f7ff ff7e 	bl	800ae4c <HAL_RTC_WaitForSynchro>
 800af50:	4603      	mov	r3, r0
 800af52:	2b00      	cmp	r3, #0
 800af54:	d005      	beq.n	800af62 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2203      	movs	r2, #3
 800af5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800af5e:	2303      	movs	r3, #3
 800af60:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800af62:	4b05      	ldr	r3, [pc, #20]	; (800af78 <RTC_ExitInitMode+0x78>)
 800af64:	689b      	ldr	r3, [r3, #8]
 800af66:	4a04      	ldr	r2, [pc, #16]	; (800af78 <RTC_ExitInitMode+0x78>)
 800af68:	f043 0320 	orr.w	r3, r3, #32
 800af6c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800af6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af70:	4618      	mov	r0, r3
 800af72:	3710      	adds	r7, #16
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}
 800af78:	40002800 	.word	0x40002800

0800af7c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b085      	sub	sp, #20
 800af80:	af00      	add	r7, sp, #0
 800af82:	4603      	mov	r3, r0
 800af84:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800af86:	2300      	movs	r3, #0
 800af88:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800af8a:	79fb      	ldrb	r3, [r7, #7]
 800af8c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800af8e:	e005      	b.n	800af9c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	3301      	adds	r3, #1
 800af94:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800af96:	7afb      	ldrb	r3, [r7, #11]
 800af98:	3b0a      	subs	r3, #10
 800af9a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800af9c:	7afb      	ldrb	r3, [r7, #11]
 800af9e:	2b09      	cmp	r3, #9
 800afa0:	d8f6      	bhi.n	800af90 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	b2db      	uxtb	r3, r3
 800afa6:	011b      	lsls	r3, r3, #4
 800afa8:	b2da      	uxtb	r2, r3
 800afaa:	7afb      	ldrb	r3, [r7, #11]
 800afac:	4313      	orrs	r3, r2
 800afae:	b2db      	uxtb	r3, r3
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3714      	adds	r7, #20
 800afb4:	46bd      	mov	sp, r7
 800afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afba:	4770      	bx	lr

0800afbc <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800afbc:	b480      	push	{r7}
 800afbe:	b085      	sub	sp, #20
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	4603      	mov	r3, r0
 800afc4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800afc6:	79fb      	ldrb	r3, [r7, #7]
 800afc8:	091b      	lsrs	r3, r3, #4
 800afca:	b2db      	uxtb	r3, r3
 800afcc:	461a      	mov	r2, r3
 800afce:	0092      	lsls	r2, r2, #2
 800afd0:	4413      	add	r3, r2
 800afd2:	005b      	lsls	r3, r3, #1
 800afd4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800afd6:	79fb      	ldrb	r3, [r7, #7]
 800afd8:	f003 030f 	and.w	r3, r3, #15
 800afdc:	b2da      	uxtb	r2, r3
 800afde:	7bfb      	ldrb	r3, [r7, #15]
 800afe0:	4413      	add	r3, r2
 800afe2:	b2db      	uxtb	r3, r3
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3714      	adds	r7, #20
 800afe8:	46bd      	mov	sp, r7
 800afea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afee:	4770      	bx	lr

0800aff0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b084      	sub	sp, #16
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d101      	bne.n	800b002 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800affe:	2301      	movs	r3, #1
 800b000:	e095      	b.n	800b12e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b006:	2b00      	cmp	r3, #0
 800b008:	d108      	bne.n	800b01c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	685b      	ldr	r3, [r3, #4]
 800b00e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b012:	d009      	beq.n	800b028 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2200      	movs	r2, #0
 800b018:	61da      	str	r2, [r3, #28]
 800b01a:	e005      	b.n	800b028 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2200      	movs	r2, #0
 800b020:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2200      	movs	r2, #0
 800b026:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2200      	movs	r2, #0
 800b02c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b034:	b2db      	uxtb	r3, r3
 800b036:	2b00      	cmp	r3, #0
 800b038:	d106      	bne.n	800b048 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2200      	movs	r2, #0
 800b03e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f7fa fdde 	bl	8005c04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2202      	movs	r2, #2
 800b04c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	681a      	ldr	r2, [r3, #0]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b05e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	68db      	ldr	r3, [r3, #12]
 800b064:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b068:	d902      	bls.n	800b070 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b06a:	2300      	movs	r3, #0
 800b06c:	60fb      	str	r3, [r7, #12]
 800b06e:	e002      	b.n	800b076 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b070:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b074:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	68db      	ldr	r3, [r3, #12]
 800b07a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b07e:	d007      	beq.n	800b090 <HAL_SPI_Init+0xa0>
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	68db      	ldr	r3, [r3, #12]
 800b084:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b088:	d002      	beq.n	800b090 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2200      	movs	r2, #0
 800b08e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	685b      	ldr	r3, [r3, #4]
 800b094:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	689b      	ldr	r3, [r3, #8]
 800b09c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b0a0:	431a      	orrs	r2, r3
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	691b      	ldr	r3, [r3, #16]
 800b0a6:	f003 0302 	and.w	r3, r3, #2
 800b0aa:	431a      	orrs	r2, r3
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	695b      	ldr	r3, [r3, #20]
 800b0b0:	f003 0301 	and.w	r3, r3, #1
 800b0b4:	431a      	orrs	r2, r3
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	699b      	ldr	r3, [r3, #24]
 800b0ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b0be:	431a      	orrs	r2, r3
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	69db      	ldr	r3, [r3, #28]
 800b0c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b0c8:	431a      	orrs	r2, r3
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6a1b      	ldr	r3, [r3, #32]
 800b0ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0d2:	ea42 0103 	orr.w	r1, r2, r3
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0da:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	430a      	orrs	r2, r1
 800b0e4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	699b      	ldr	r3, [r3, #24]
 800b0ea:	0c1b      	lsrs	r3, r3, #16
 800b0ec:	f003 0204 	and.w	r2, r3, #4
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0f4:	f003 0310 	and.w	r3, r3, #16
 800b0f8:	431a      	orrs	r2, r3
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0fe:	f003 0308 	and.w	r3, r3, #8
 800b102:	431a      	orrs	r2, r3
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	68db      	ldr	r3, [r3, #12]
 800b108:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b10c:	ea42 0103 	orr.w	r1, r2, r3
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	430a      	orrs	r2, r1
 800b11c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2200      	movs	r2, #0
 800b122:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2201      	movs	r2, #1
 800b128:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800b12c:	2300      	movs	r3, #0
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3710      	adds	r7, #16
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}

0800b136 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b136:	b580      	push	{r7, lr}
 800b138:	b088      	sub	sp, #32
 800b13a:	af00      	add	r7, sp, #0
 800b13c:	60f8      	str	r0, [r7, #12]
 800b13e:	60b9      	str	r1, [r7, #8]
 800b140:	603b      	str	r3, [r7, #0]
 800b142:	4613      	mov	r3, r2
 800b144:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b146:	2300      	movs	r3, #0
 800b148:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b150:	2b01      	cmp	r3, #1
 800b152:	d101      	bne.n	800b158 <HAL_SPI_Transmit+0x22>
 800b154:	2302      	movs	r3, #2
 800b156:	e158      	b.n	800b40a <HAL_SPI_Transmit+0x2d4>
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	2201      	movs	r2, #1
 800b15c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b160:	f7fb fe8e 	bl	8006e80 <HAL_GetTick>
 800b164:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b166:	88fb      	ldrh	r3, [r7, #6]
 800b168:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b170:	b2db      	uxtb	r3, r3
 800b172:	2b01      	cmp	r3, #1
 800b174:	d002      	beq.n	800b17c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b176:	2302      	movs	r3, #2
 800b178:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b17a:	e13d      	b.n	800b3f8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d002      	beq.n	800b188 <HAL_SPI_Transmit+0x52>
 800b182:	88fb      	ldrh	r3, [r7, #6]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d102      	bne.n	800b18e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b188:	2301      	movs	r3, #1
 800b18a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b18c:	e134      	b.n	800b3f8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	2203      	movs	r2, #3
 800b192:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	2200      	movs	r2, #0
 800b19a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	68ba      	ldr	r2, [r7, #8]
 800b1a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	88fa      	ldrh	r2, [r7, #6]
 800b1a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	88fa      	ldrh	r2, [r7, #6]
 800b1ac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	689b      	ldr	r3, [r3, #8]
 800b1d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b1d8:	d10f      	bne.n	800b1fa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	681a      	ldr	r2, [r3, #0]
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b1e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	681a      	ldr	r2, [r3, #0]
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b1f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b204:	2b40      	cmp	r3, #64	; 0x40
 800b206:	d007      	beq.n	800b218 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	681a      	ldr	r2, [r3, #0]
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b216:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	68db      	ldr	r3, [r3, #12]
 800b21c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b220:	d94b      	bls.n	800b2ba <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	685b      	ldr	r3, [r3, #4]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d002      	beq.n	800b230 <HAL_SPI_Transmit+0xfa>
 800b22a:	8afb      	ldrh	r3, [r7, #22]
 800b22c:	2b01      	cmp	r3, #1
 800b22e:	d13e      	bne.n	800b2ae <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b234:	881a      	ldrh	r2, [r3, #0]
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b240:	1c9a      	adds	r2, r3, #2
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b24a:	b29b      	uxth	r3, r3
 800b24c:	3b01      	subs	r3, #1
 800b24e:	b29a      	uxth	r2, r3
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b254:	e02b      	b.n	800b2ae <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	689b      	ldr	r3, [r3, #8]
 800b25c:	f003 0302 	and.w	r3, r3, #2
 800b260:	2b02      	cmp	r3, #2
 800b262:	d112      	bne.n	800b28a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b268:	881a      	ldrh	r2, [r3, #0]
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b274:	1c9a      	adds	r2, r3, #2
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b27e:	b29b      	uxth	r3, r3
 800b280:	3b01      	subs	r3, #1
 800b282:	b29a      	uxth	r2, r3
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b288:	e011      	b.n	800b2ae <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b28a:	f7fb fdf9 	bl	8006e80 <HAL_GetTick>
 800b28e:	4602      	mov	r2, r0
 800b290:	69bb      	ldr	r3, [r7, #24]
 800b292:	1ad3      	subs	r3, r2, r3
 800b294:	683a      	ldr	r2, [r7, #0]
 800b296:	429a      	cmp	r2, r3
 800b298:	d803      	bhi.n	800b2a2 <HAL_SPI_Transmit+0x16c>
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b2a0:	d102      	bne.n	800b2a8 <HAL_SPI_Transmit+0x172>
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d102      	bne.n	800b2ae <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800b2a8:	2303      	movs	r3, #3
 800b2aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b2ac:	e0a4      	b.n	800b3f8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b2b2:	b29b      	uxth	r3, r3
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d1ce      	bne.n	800b256 <HAL_SPI_Transmit+0x120>
 800b2b8:	e07c      	b.n	800b3b4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	685b      	ldr	r3, [r3, #4]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d002      	beq.n	800b2c8 <HAL_SPI_Transmit+0x192>
 800b2c2:	8afb      	ldrh	r3, [r7, #22]
 800b2c4:	2b01      	cmp	r3, #1
 800b2c6:	d170      	bne.n	800b3aa <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b2cc:	b29b      	uxth	r3, r3
 800b2ce:	2b01      	cmp	r3, #1
 800b2d0:	d912      	bls.n	800b2f8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2d6:	881a      	ldrh	r2, [r3, #0]
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2e2:	1c9a      	adds	r2, r3, #2
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b2ec:	b29b      	uxth	r3, r3
 800b2ee:	3b02      	subs	r3, #2
 800b2f0:	b29a      	uxth	r2, r3
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b2f6:	e058      	b.n	800b3aa <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	330c      	adds	r3, #12
 800b302:	7812      	ldrb	r2, [r2, #0]
 800b304:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b30a:	1c5a      	adds	r2, r3, #1
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b314:	b29b      	uxth	r3, r3
 800b316:	3b01      	subs	r3, #1
 800b318:	b29a      	uxth	r2, r3
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800b31e:	e044      	b.n	800b3aa <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	689b      	ldr	r3, [r3, #8]
 800b326:	f003 0302 	and.w	r3, r3, #2
 800b32a:	2b02      	cmp	r3, #2
 800b32c:	d12b      	bne.n	800b386 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b332:	b29b      	uxth	r3, r3
 800b334:	2b01      	cmp	r3, #1
 800b336:	d912      	bls.n	800b35e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b33c:	881a      	ldrh	r2, [r3, #0]
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b348:	1c9a      	adds	r2, r3, #2
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b352:	b29b      	uxth	r3, r3
 800b354:	3b02      	subs	r3, #2
 800b356:	b29a      	uxth	r2, r3
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b35c:	e025      	b.n	800b3aa <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	330c      	adds	r3, #12
 800b368:	7812      	ldrb	r2, [r2, #0]
 800b36a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b370:	1c5a      	adds	r2, r3, #1
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b37a:	b29b      	uxth	r3, r3
 800b37c:	3b01      	subs	r3, #1
 800b37e:	b29a      	uxth	r2, r3
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b384:	e011      	b.n	800b3aa <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b386:	f7fb fd7b 	bl	8006e80 <HAL_GetTick>
 800b38a:	4602      	mov	r2, r0
 800b38c:	69bb      	ldr	r3, [r7, #24]
 800b38e:	1ad3      	subs	r3, r2, r3
 800b390:	683a      	ldr	r2, [r7, #0]
 800b392:	429a      	cmp	r2, r3
 800b394:	d803      	bhi.n	800b39e <HAL_SPI_Transmit+0x268>
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b39c:	d102      	bne.n	800b3a4 <HAL_SPI_Transmit+0x26e>
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d102      	bne.n	800b3aa <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800b3a4:	2303      	movs	r3, #3
 800b3a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b3a8:	e026      	b.n	800b3f8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b3ae:	b29b      	uxth	r3, r3
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d1b5      	bne.n	800b320 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b3b4:	69ba      	ldr	r2, [r7, #24]
 800b3b6:	6839      	ldr	r1, [r7, #0]
 800b3b8:	68f8      	ldr	r0, [r7, #12]
 800b3ba:	f001 f9dd 	bl	800c778 <SPI_EndRxTxTransaction>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d002      	beq.n	800b3ca <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	2220      	movs	r2, #32
 800b3c8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	689b      	ldr	r3, [r3, #8]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d10a      	bne.n	800b3e8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	613b      	str	r3, [r7, #16]
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	68db      	ldr	r3, [r3, #12]
 800b3dc:	613b      	str	r3, [r7, #16]
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	689b      	ldr	r3, [r3, #8]
 800b3e4:	613b      	str	r3, [r7, #16]
 800b3e6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d002      	beq.n	800b3f6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	77fb      	strb	r3, [r7, #31]
 800b3f4:	e000      	b.n	800b3f8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800b3f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	2200      	movs	r2, #0
 800b404:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b408:	7ffb      	ldrb	r3, [r7, #31]
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3720      	adds	r7, #32
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}

0800b412 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b412:	b580      	push	{r7, lr}
 800b414:	b088      	sub	sp, #32
 800b416:	af02      	add	r7, sp, #8
 800b418:	60f8      	str	r0, [r7, #12]
 800b41a:	60b9      	str	r1, [r7, #8]
 800b41c:	603b      	str	r3, [r7, #0]
 800b41e:	4613      	mov	r3, r2
 800b420:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b422:	2300      	movs	r3, #0
 800b424:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	685b      	ldr	r3, [r3, #4]
 800b42a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b42e:	d112      	bne.n	800b456 <HAL_SPI_Receive+0x44>
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	689b      	ldr	r3, [r3, #8]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d10e      	bne.n	800b456 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	2204      	movs	r2, #4
 800b43c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b440:	88fa      	ldrh	r2, [r7, #6]
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	9300      	str	r3, [sp, #0]
 800b446:	4613      	mov	r3, r2
 800b448:	68ba      	ldr	r2, [r7, #8]
 800b44a:	68b9      	ldr	r1, [r7, #8]
 800b44c:	68f8      	ldr	r0, [r7, #12]
 800b44e:	f000 f910 	bl	800b672 <HAL_SPI_TransmitReceive>
 800b452:	4603      	mov	r3, r0
 800b454:	e109      	b.n	800b66a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b45c:	2b01      	cmp	r3, #1
 800b45e:	d101      	bne.n	800b464 <HAL_SPI_Receive+0x52>
 800b460:	2302      	movs	r3, #2
 800b462:	e102      	b.n	800b66a <HAL_SPI_Receive+0x258>
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	2201      	movs	r2, #1
 800b468:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b46c:	f7fb fd08 	bl	8006e80 <HAL_GetTick>
 800b470:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b478:	b2db      	uxtb	r3, r3
 800b47a:	2b01      	cmp	r3, #1
 800b47c:	d002      	beq.n	800b484 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800b47e:	2302      	movs	r3, #2
 800b480:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b482:	e0e9      	b.n	800b658 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d002      	beq.n	800b490 <HAL_SPI_Receive+0x7e>
 800b48a:	88fb      	ldrh	r3, [r7, #6]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d102      	bne.n	800b496 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800b490:	2301      	movs	r3, #1
 800b492:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b494:	e0e0      	b.n	800b658 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	2204      	movs	r2, #4
 800b49a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	68ba      	ldr	r2, [r7, #8]
 800b4a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	88fa      	ldrh	r2, [r7, #6]
 800b4ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	88fa      	ldrh	r2, [r7, #6]
 800b4b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	68db      	ldr	r3, [r3, #12]
 800b4dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b4e0:	d908      	bls.n	800b4f4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	685a      	ldr	r2, [r3, #4]
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b4f0:	605a      	str	r2, [r3, #4]
 800b4f2:	e007      	b.n	800b504 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	685a      	ldr	r2, [r3, #4]
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b502:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	689b      	ldr	r3, [r3, #8]
 800b508:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b50c:	d10f      	bne.n	800b52e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	681a      	ldr	r2, [r3, #0]
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b51c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	681a      	ldr	r2, [r3, #0]
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b52c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b538:	2b40      	cmp	r3, #64	; 0x40
 800b53a:	d007      	beq.n	800b54c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	681a      	ldr	r2, [r3, #0]
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b54a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	68db      	ldr	r3, [r3, #12]
 800b550:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b554:	d867      	bhi.n	800b626 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b556:	e030      	b.n	800b5ba <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	689b      	ldr	r3, [r3, #8]
 800b55e:	f003 0301 	and.w	r3, r3, #1
 800b562:	2b01      	cmp	r3, #1
 800b564:	d117      	bne.n	800b596 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f103 020c 	add.w	r2, r3, #12
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b572:	7812      	ldrb	r2, [r2, #0]
 800b574:	b2d2      	uxtb	r2, r2
 800b576:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b57c:	1c5a      	adds	r2, r3, #1
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b588:	b29b      	uxth	r3, r3
 800b58a:	3b01      	subs	r3, #1
 800b58c:	b29a      	uxth	r2, r3
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800b594:	e011      	b.n	800b5ba <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b596:	f7fb fc73 	bl	8006e80 <HAL_GetTick>
 800b59a:	4602      	mov	r2, r0
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	1ad3      	subs	r3, r2, r3
 800b5a0:	683a      	ldr	r2, [r7, #0]
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d803      	bhi.n	800b5ae <HAL_SPI_Receive+0x19c>
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b5ac:	d102      	bne.n	800b5b4 <HAL_SPI_Receive+0x1a2>
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d102      	bne.n	800b5ba <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800b5b4:	2303      	movs	r3, #3
 800b5b6:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b5b8:	e04e      	b.n	800b658 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b5c0:	b29b      	uxth	r3, r3
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d1c8      	bne.n	800b558 <HAL_SPI_Receive+0x146>
 800b5c6:	e034      	b.n	800b632 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	689b      	ldr	r3, [r3, #8]
 800b5ce:	f003 0301 	and.w	r3, r3, #1
 800b5d2:	2b01      	cmp	r3, #1
 800b5d4:	d115      	bne.n	800b602 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	68da      	ldr	r2, [r3, #12]
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5e0:	b292      	uxth	r2, r2
 800b5e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5e8:	1c9a      	adds	r2, r3, #2
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b5f4:	b29b      	uxth	r3, r3
 800b5f6:	3b01      	subs	r3, #1
 800b5f8:	b29a      	uxth	r2, r3
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800b600:	e011      	b.n	800b626 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b602:	f7fb fc3d 	bl	8006e80 <HAL_GetTick>
 800b606:	4602      	mov	r2, r0
 800b608:	693b      	ldr	r3, [r7, #16]
 800b60a:	1ad3      	subs	r3, r2, r3
 800b60c:	683a      	ldr	r2, [r7, #0]
 800b60e:	429a      	cmp	r2, r3
 800b610:	d803      	bhi.n	800b61a <HAL_SPI_Receive+0x208>
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b618:	d102      	bne.n	800b620 <HAL_SPI_Receive+0x20e>
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d102      	bne.n	800b626 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800b620:	2303      	movs	r3, #3
 800b622:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b624:	e018      	b.n	800b658 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b62c:	b29b      	uxth	r3, r3
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d1ca      	bne.n	800b5c8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b632:	693a      	ldr	r2, [r7, #16]
 800b634:	6839      	ldr	r1, [r7, #0]
 800b636:	68f8      	ldr	r0, [r7, #12]
 800b638:	f001 f846 	bl	800c6c8 <SPI_EndRxTransaction>
 800b63c:	4603      	mov	r3, r0
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d002      	beq.n	800b648 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	2220      	movs	r2, #32
 800b646:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d002      	beq.n	800b656 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800b650:	2301      	movs	r3, #1
 800b652:	75fb      	strb	r3, [r7, #23]
 800b654:	e000      	b.n	800b658 <HAL_SPI_Receive+0x246>
  }

error :
 800b656:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	2201      	movs	r2, #1
 800b65c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	2200      	movs	r2, #0
 800b664:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b668:	7dfb      	ldrb	r3, [r7, #23]
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3718      	adds	r7, #24
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}

0800b672 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b672:	b580      	push	{r7, lr}
 800b674:	b08a      	sub	sp, #40	; 0x28
 800b676:	af00      	add	r7, sp, #0
 800b678:	60f8      	str	r0, [r7, #12]
 800b67a:	60b9      	str	r1, [r7, #8]
 800b67c:	607a      	str	r2, [r7, #4]
 800b67e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b680:	2301      	movs	r3, #1
 800b682:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b684:	2300      	movs	r3, #0
 800b686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b690:	2b01      	cmp	r3, #1
 800b692:	d101      	bne.n	800b698 <HAL_SPI_TransmitReceive+0x26>
 800b694:	2302      	movs	r3, #2
 800b696:	e1fb      	b.n	800ba90 <HAL_SPI_TransmitReceive+0x41e>
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2201      	movs	r2, #1
 800b69c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b6a0:	f7fb fbee 	bl	8006e80 <HAL_GetTick>
 800b6a4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b6ac:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	685b      	ldr	r3, [r3, #4]
 800b6b2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800b6b4:	887b      	ldrh	r3, [r7, #2]
 800b6b6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800b6b8:	887b      	ldrh	r3, [r7, #2]
 800b6ba:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b6bc:	7efb      	ldrb	r3, [r7, #27]
 800b6be:	2b01      	cmp	r3, #1
 800b6c0:	d00e      	beq.n	800b6e0 <HAL_SPI_TransmitReceive+0x6e>
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b6c8:	d106      	bne.n	800b6d8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	689b      	ldr	r3, [r3, #8]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d102      	bne.n	800b6d8 <HAL_SPI_TransmitReceive+0x66>
 800b6d2:	7efb      	ldrb	r3, [r7, #27]
 800b6d4:	2b04      	cmp	r3, #4
 800b6d6:	d003      	beq.n	800b6e0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800b6d8:	2302      	movs	r3, #2
 800b6da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800b6de:	e1cd      	b.n	800ba7c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d005      	beq.n	800b6f2 <HAL_SPI_TransmitReceive+0x80>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d002      	beq.n	800b6f2 <HAL_SPI_TransmitReceive+0x80>
 800b6ec:	887b      	ldrh	r3, [r7, #2]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d103      	bne.n	800b6fa <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800b6f8:	e1c0      	b.n	800ba7c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b700:	b2db      	uxtb	r3, r3
 800b702:	2b04      	cmp	r3, #4
 800b704:	d003      	beq.n	800b70e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	2205      	movs	r2, #5
 800b70a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	2200      	movs	r2, #0
 800b712:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	687a      	ldr	r2, [r7, #4]
 800b718:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	887a      	ldrh	r2, [r7, #2]
 800b71e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	887a      	ldrh	r2, [r7, #2]
 800b726:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	68ba      	ldr	r2, [r7, #8]
 800b72e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	887a      	ldrh	r2, [r7, #2]
 800b734:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	887a      	ldrh	r2, [r7, #2]
 800b73a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	2200      	movs	r2, #0
 800b740:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	2200      	movs	r2, #0
 800b746:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	68db      	ldr	r3, [r3, #12]
 800b74c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b750:	d802      	bhi.n	800b758 <HAL_SPI_TransmitReceive+0xe6>
 800b752:	8a3b      	ldrh	r3, [r7, #16]
 800b754:	2b01      	cmp	r3, #1
 800b756:	d908      	bls.n	800b76a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	685a      	ldr	r2, [r3, #4]
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b766:	605a      	str	r2, [r3, #4]
 800b768:	e007      	b.n	800b77a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	685a      	ldr	r2, [r3, #4]
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b778:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b784:	2b40      	cmp	r3, #64	; 0x40
 800b786:	d007      	beq.n	800b798 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	681a      	ldr	r2, [r3, #0]
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b796:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	68db      	ldr	r3, [r3, #12]
 800b79c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b7a0:	d97c      	bls.n	800b89c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	685b      	ldr	r3, [r3, #4]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d002      	beq.n	800b7b0 <HAL_SPI_TransmitReceive+0x13e>
 800b7aa:	8a7b      	ldrh	r3, [r7, #18]
 800b7ac:	2b01      	cmp	r3, #1
 800b7ae:	d169      	bne.n	800b884 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7b4:	881a      	ldrh	r2, [r3, #0]
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7c0:	1c9a      	adds	r2, r3, #2
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7ca:	b29b      	uxth	r3, r3
 800b7cc:	3b01      	subs	r3, #1
 800b7ce:	b29a      	uxth	r2, r3
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b7d4:	e056      	b.n	800b884 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	689b      	ldr	r3, [r3, #8]
 800b7dc:	f003 0302 	and.w	r3, r3, #2
 800b7e0:	2b02      	cmp	r3, #2
 800b7e2:	d11b      	bne.n	800b81c <HAL_SPI_TransmitReceive+0x1aa>
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7e8:	b29b      	uxth	r3, r3
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d016      	beq.n	800b81c <HAL_SPI_TransmitReceive+0x1aa>
 800b7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d113      	bne.n	800b81c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7f8:	881a      	ldrh	r2, [r3, #0]
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b804:	1c9a      	adds	r2, r3, #2
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b80e:	b29b      	uxth	r3, r3
 800b810:	3b01      	subs	r3, #1
 800b812:	b29a      	uxth	r2, r3
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b818:	2300      	movs	r3, #0
 800b81a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	689b      	ldr	r3, [r3, #8]
 800b822:	f003 0301 	and.w	r3, r3, #1
 800b826:	2b01      	cmp	r3, #1
 800b828:	d11c      	bne.n	800b864 <HAL_SPI_TransmitReceive+0x1f2>
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b830:	b29b      	uxth	r3, r3
 800b832:	2b00      	cmp	r3, #0
 800b834:	d016      	beq.n	800b864 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	68da      	ldr	r2, [r3, #12]
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b840:	b292      	uxth	r2, r2
 800b842:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b848:	1c9a      	adds	r2, r3, #2
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b854:	b29b      	uxth	r3, r3
 800b856:	3b01      	subs	r3, #1
 800b858:	b29a      	uxth	r2, r3
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b860:	2301      	movs	r3, #1
 800b862:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b864:	f7fb fb0c 	bl	8006e80 <HAL_GetTick>
 800b868:	4602      	mov	r2, r0
 800b86a:	69fb      	ldr	r3, [r7, #28]
 800b86c:	1ad3      	subs	r3, r2, r3
 800b86e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b870:	429a      	cmp	r2, r3
 800b872:	d807      	bhi.n	800b884 <HAL_SPI_TransmitReceive+0x212>
 800b874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b876:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b87a:	d003      	beq.n	800b884 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800b87c:	2303      	movs	r3, #3
 800b87e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800b882:	e0fb      	b.n	800ba7c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b888:	b29b      	uxth	r3, r3
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d1a3      	bne.n	800b7d6 <HAL_SPI_TransmitReceive+0x164>
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b894:	b29b      	uxth	r3, r3
 800b896:	2b00      	cmp	r3, #0
 800b898:	d19d      	bne.n	800b7d6 <HAL_SPI_TransmitReceive+0x164>
 800b89a:	e0df      	b.n	800ba5c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d003      	beq.n	800b8ac <HAL_SPI_TransmitReceive+0x23a>
 800b8a4:	8a7b      	ldrh	r3, [r7, #18]
 800b8a6:	2b01      	cmp	r3, #1
 800b8a8:	f040 80cb 	bne.w	800ba42 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b8b0:	b29b      	uxth	r3, r3
 800b8b2:	2b01      	cmp	r3, #1
 800b8b4:	d912      	bls.n	800b8dc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8ba:	881a      	ldrh	r2, [r3, #0]
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8c6:	1c9a      	adds	r2, r3, #2
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b8d0:	b29b      	uxth	r3, r3
 800b8d2:	3b02      	subs	r3, #2
 800b8d4:	b29a      	uxth	r2, r3
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b8da:	e0b2      	b.n	800ba42 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	330c      	adds	r3, #12
 800b8e6:	7812      	ldrb	r2, [r2, #0]
 800b8e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8ee:	1c5a      	adds	r2, r3, #1
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b8f8:	b29b      	uxth	r3, r3
 800b8fa:	3b01      	subs	r3, #1
 800b8fc:	b29a      	uxth	r2, r3
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b902:	e09e      	b.n	800ba42 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	689b      	ldr	r3, [r3, #8]
 800b90a:	f003 0302 	and.w	r3, r3, #2
 800b90e:	2b02      	cmp	r3, #2
 800b910:	d134      	bne.n	800b97c <HAL_SPI_TransmitReceive+0x30a>
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b916:	b29b      	uxth	r3, r3
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d02f      	beq.n	800b97c <HAL_SPI_TransmitReceive+0x30a>
 800b91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b91e:	2b01      	cmp	r3, #1
 800b920:	d12c      	bne.n	800b97c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b926:	b29b      	uxth	r3, r3
 800b928:	2b01      	cmp	r3, #1
 800b92a:	d912      	bls.n	800b952 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b930:	881a      	ldrh	r2, [r3, #0]
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b93c:	1c9a      	adds	r2, r3, #2
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b946:	b29b      	uxth	r3, r3
 800b948:	3b02      	subs	r3, #2
 800b94a:	b29a      	uxth	r2, r3
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b950:	e012      	b.n	800b978 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	330c      	adds	r3, #12
 800b95c:	7812      	ldrb	r2, [r2, #0]
 800b95e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b964:	1c5a      	adds	r2, r3, #1
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b96e:	b29b      	uxth	r3, r3
 800b970:	3b01      	subs	r3, #1
 800b972:	b29a      	uxth	r2, r3
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b978:	2300      	movs	r3, #0
 800b97a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	689b      	ldr	r3, [r3, #8]
 800b982:	f003 0301 	and.w	r3, r3, #1
 800b986:	2b01      	cmp	r3, #1
 800b988:	d148      	bne.n	800ba1c <HAL_SPI_TransmitReceive+0x3aa>
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b990:	b29b      	uxth	r3, r3
 800b992:	2b00      	cmp	r3, #0
 800b994:	d042      	beq.n	800ba1c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b99c:	b29b      	uxth	r3, r3
 800b99e:	2b01      	cmp	r3, #1
 800b9a0:	d923      	bls.n	800b9ea <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	68da      	ldr	r2, [r3, #12]
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ac:	b292      	uxth	r2, r2
 800b9ae:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9b4:	1c9a      	adds	r2, r3, #2
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b9c0:	b29b      	uxth	r3, r3
 800b9c2:	3b02      	subs	r3, #2
 800b9c4:	b29a      	uxth	r2, r3
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b9d2:	b29b      	uxth	r3, r3
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d81f      	bhi.n	800ba18 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	685a      	ldr	r2, [r3, #4]
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b9e6:	605a      	str	r2, [r3, #4]
 800b9e8:	e016      	b.n	800ba18 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f103 020c 	add.w	r2, r3, #12
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9f6:	7812      	ldrb	r2, [r2, #0]
 800b9f8:	b2d2      	uxtb	r2, r2
 800b9fa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba00:	1c5a      	adds	r2, r3, #1
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ba0c:	b29b      	uxth	r3, r3
 800ba0e:	3b01      	subs	r3, #1
 800ba10:	b29a      	uxth	r2, r3
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ba18:	2301      	movs	r3, #1
 800ba1a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ba1c:	f7fb fa30 	bl	8006e80 <HAL_GetTick>
 800ba20:	4602      	mov	r2, r0
 800ba22:	69fb      	ldr	r3, [r7, #28]
 800ba24:	1ad3      	subs	r3, r2, r3
 800ba26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	d803      	bhi.n	800ba34 <HAL_SPI_TransmitReceive+0x3c2>
 800ba2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba32:	d102      	bne.n	800ba3a <HAL_SPI_TransmitReceive+0x3c8>
 800ba34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d103      	bne.n	800ba42 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800ba3a:	2303      	movs	r3, #3
 800ba3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800ba40:	e01c      	b.n	800ba7c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba46:	b29b      	uxth	r3, r3
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	f47f af5b 	bne.w	800b904 <HAL_SPI_TransmitReceive+0x292>
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ba54:	b29b      	uxth	r3, r3
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	f47f af54 	bne.w	800b904 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ba5c:	69fa      	ldr	r2, [r7, #28]
 800ba5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ba60:	68f8      	ldr	r0, [r7, #12]
 800ba62:	f000 fe89 	bl	800c778 <SPI_EndRxTxTransaction>
 800ba66:	4603      	mov	r3, r0
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d006      	beq.n	800ba7a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	2220      	movs	r2, #32
 800ba76:	661a      	str	r2, [r3, #96]	; 0x60
 800ba78:	e000      	b.n	800ba7c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800ba7a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	2201      	movs	r2, #1
 800ba80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	2200      	movs	r2, #0
 800ba88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800ba8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	3728      	adds	r7, #40	; 0x28
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}

0800ba98 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b086      	sub	sp, #24
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	60f8      	str	r0, [r7, #12]
 800baa0:	60b9      	str	r1, [r7, #8]
 800baa2:	4613      	mov	r3, r2
 800baa4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800baa6:	2300      	movs	r3, #0
 800baa8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800bab0:	2b01      	cmp	r3, #1
 800bab2:	d101      	bne.n	800bab8 <HAL_SPI_Transmit_DMA+0x20>
 800bab4:	2302      	movs	r3, #2
 800bab6:	e0d8      	b.n	800bc6a <HAL_SPI_Transmit_DMA+0x1d2>
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	2201      	movs	r2, #1
 800babc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bac6:	b2db      	uxtb	r3, r3
 800bac8:	2b01      	cmp	r3, #1
 800baca:	d002      	beq.n	800bad2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800bacc:	2302      	movs	r3, #2
 800bace:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bad0:	e0c6      	b.n	800bc60 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d002      	beq.n	800bade <HAL_SPI_Transmit_DMA+0x46>
 800bad8:	88fb      	ldrh	r3, [r7, #6]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d102      	bne.n	800bae4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800bade:	2301      	movs	r3, #1
 800bae0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bae2:	e0bd      	b.n	800bc60 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	2203      	movs	r2, #3
 800bae8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2200      	movs	r2, #0
 800baf0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	68ba      	ldr	r2, [r7, #8]
 800baf6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	88fa      	ldrh	r2, [r7, #6]
 800bafc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	88fa      	ldrh	r2, [r7, #6]
 800bb02:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	2200      	movs	r2, #0
 800bb08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	2200      	movs	r2, #0
 800bb14:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	2200      	movs	r2, #0
 800bb1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	2200      	movs	r2, #0
 800bb22:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	689b      	ldr	r3, [r3, #8]
 800bb2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb2e:	d10f      	bne.n	800bb50 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	681a      	ldr	r2, [r3, #0]
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb3e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	681a      	ldr	r2, [r3, #0]
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bb4e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb54:	4a47      	ldr	r2, [pc, #284]	; (800bc74 <HAL_SPI_Transmit_DMA+0x1dc>)
 800bb56:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb5c:	4a46      	ldr	r2, [pc, #280]	; (800bc78 <HAL_SPI_Transmit_DMA+0x1e0>)
 800bb5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb64:	4a45      	ldr	r2, [pc, #276]	; (800bc7c <HAL_SPI_Transmit_DMA+0x1e4>)
 800bb66:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	685a      	ldr	r2, [r3, #4]
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bb7e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	68db      	ldr	r3, [r3, #12]
 800bb84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bb88:	d82d      	bhi.n	800bbe6 <HAL_SPI_Transmit_DMA+0x14e>
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb8e:	699b      	ldr	r3, [r3, #24]
 800bb90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb94:	d127      	bne.n	800bbe6 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb9a:	b29b      	uxth	r3, r3
 800bb9c:	f003 0301 	and.w	r3, r3, #1
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d10f      	bne.n	800bbc4 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	685a      	ldr	r2, [r3, #4]
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bbb2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bbb8:	b29b      	uxth	r3, r3
 800bbba:	085b      	lsrs	r3, r3, #1
 800bbbc:	b29a      	uxth	r2, r3
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bbc2:	e010      	b.n	800bbe6 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	685a      	ldr	r2, [r3, #4]
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bbd2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bbd8:	b29b      	uxth	r3, r3
 800bbda:	085b      	lsrs	r3, r3, #1
 800bbdc:	b29b      	uxth	r3, r3
 800bbde:	3301      	adds	r3, #1
 800bbe0:	b29a      	uxth	r2, r3
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbee:	4619      	mov	r1, r3
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	330c      	adds	r3, #12
 800bbf6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bbfc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800bbfe:	f7fb fb6b 	bl	80072d8 <HAL_DMA_Start_IT>
 800bc02:	4603      	mov	r3, r0
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d00c      	beq.n	800bc22 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc0c:	f043 0210 	orr.w	r2, r3, #16
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800bc14:	2301      	movs	r3, #1
 800bc16:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800bc20:	e01e      	b.n	800bc60 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc2c:	2b40      	cmp	r3, #64	; 0x40
 800bc2e:	d007      	beq.n	800bc40 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	681a      	ldr	r2, [r3, #0]
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bc3e:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	685a      	ldr	r2, [r3, #4]
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	f042 0220 	orr.w	r2, r2, #32
 800bc4e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	685a      	ldr	r2, [r3, #4]
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f042 0202 	orr.w	r2, r2, #2
 800bc5e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	2200      	movs	r2, #0
 800bc64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800bc68:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3718      	adds	r7, #24
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}
 800bc72:	bf00      	nop
 800bc74:	0800c3cf 	.word	0x0800c3cf
 800bc78:	0800c1f1 	.word	0x0800c1f1
 800bc7c:	0800c423 	.word	0x0800c423

0800bc80 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b086      	sub	sp, #24
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	60f8      	str	r0, [r7, #12]
 800bc88:	60b9      	str	r1, [r7, #8]
 800bc8a:	607a      	str	r2, [r7, #4]
 800bc8c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	d101      	bne.n	800bca0 <HAL_SPI_TransmitReceive_DMA+0x20>
 800bc9c:	2302      	movs	r3, #2
 800bc9e:	e16c      	b.n	800bf7a <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	2201      	movs	r2, #1
 800bca4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bcae:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	685b      	ldr	r3, [r3, #4]
 800bcb4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800bcb6:	7dbb      	ldrb	r3, [r7, #22]
 800bcb8:	2b01      	cmp	r3, #1
 800bcba:	d00d      	beq.n	800bcd8 <HAL_SPI_TransmitReceive_DMA+0x58>
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bcc2:	d106      	bne.n	800bcd2 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	689b      	ldr	r3, [r3, #8]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d102      	bne.n	800bcd2 <HAL_SPI_TransmitReceive_DMA+0x52>
 800bccc:	7dbb      	ldrb	r3, [r7, #22]
 800bcce:	2b04      	cmp	r3, #4
 800bcd0:	d002      	beq.n	800bcd8 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800bcd2:	2302      	movs	r3, #2
 800bcd4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bcd6:	e14b      	b.n	800bf70 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d005      	beq.n	800bcea <HAL_SPI_TransmitReceive_DMA+0x6a>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d002      	beq.n	800bcea <HAL_SPI_TransmitReceive_DMA+0x6a>
 800bce4:	887b      	ldrh	r3, [r7, #2]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d102      	bne.n	800bcf0 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800bcea:	2301      	movs	r3, #1
 800bcec:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bcee:	e13f      	b.n	800bf70 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bcf6:	b2db      	uxtb	r3, r3
 800bcf8:	2b04      	cmp	r3, #4
 800bcfa:	d003      	beq.n	800bd04 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	2205      	movs	r2, #5
 800bd00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	2200      	movs	r2, #0
 800bd08:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	68ba      	ldr	r2, [r7, #8]
 800bd0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	887a      	ldrh	r2, [r7, #2]
 800bd14:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	887a      	ldrh	r2, [r7, #2]
 800bd1a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	687a      	ldr	r2, [r7, #4]
 800bd20:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	887a      	ldrh	r2, [r7, #2]
 800bd26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	887a      	ldrh	r2, [r7, #2]
 800bd2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	2200      	movs	r2, #0
 800bd36:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	685a      	ldr	r2, [r3, #4]
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800bd4c:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	68db      	ldr	r3, [r3, #12]
 800bd52:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bd56:	d908      	bls.n	800bd6a <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	685a      	ldr	r2, [r3, #4]
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bd66:	605a      	str	r2, [r3, #4]
 800bd68:	e06f      	b.n	800be4a <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	685a      	ldr	r2, [r3, #4]
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bd78:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd7e:	699b      	ldr	r3, [r3, #24]
 800bd80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd84:	d126      	bne.n	800bdd4 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800bd8a:	f003 0301 	and.w	r3, r3, #1
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d10f      	bne.n	800bdb2 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	685a      	ldr	r2, [r3, #4]
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bda0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bda6:	b29b      	uxth	r3, r3
 800bda8:	085b      	lsrs	r3, r3, #1
 800bdaa:	b29a      	uxth	r2, r3
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bdb0:	e010      	b.n	800bdd4 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	685a      	ldr	r2, [r3, #4]
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bdc0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bdc6:	b29b      	uxth	r3, r3
 800bdc8:	085b      	lsrs	r3, r3, #1
 800bdca:	b29b      	uxth	r3, r3
 800bdcc:	3301      	adds	r3, #1
 800bdce:	b29a      	uxth	r2, r3
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdd8:	699b      	ldr	r3, [r3, #24]
 800bdda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bdde:	d134      	bne.n	800be4a <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	685a      	ldr	r2, [r3, #4]
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bdee:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bdf6:	b29b      	uxth	r3, r3
 800bdf8:	f003 0301 	and.w	r3, r3, #1
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d111      	bne.n	800be24 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	685a      	ldr	r2, [r3, #4]
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800be0e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800be16:	b29b      	uxth	r3, r3
 800be18:	085b      	lsrs	r3, r3, #1
 800be1a:	b29a      	uxth	r2, r3
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800be22:	e012      	b.n	800be4a <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	685a      	ldr	r2, [r3, #4]
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800be32:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800be3a:	b29b      	uxth	r3, r3
 800be3c:	085b      	lsrs	r3, r3, #1
 800be3e:	b29b      	uxth	r3, r3
 800be40:	3301      	adds	r3, #1
 800be42:	b29a      	uxth	r2, r3
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800be50:	b2db      	uxtb	r3, r3
 800be52:	2b04      	cmp	r3, #4
 800be54:	d108      	bne.n	800be68 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be5a:	4a4a      	ldr	r2, [pc, #296]	; (800bf84 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800be5c:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be62:	4a49      	ldr	r2, [pc, #292]	; (800bf88 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800be64:	62da      	str	r2, [r3, #44]	; 0x2c
 800be66:	e007      	b.n	800be78 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be6c:	4a47      	ldr	r2, [pc, #284]	; (800bf8c <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800be6e:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be74:	4a46      	ldr	r2, [pc, #280]	; (800bf90 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800be76:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be7c:	4a45      	ldr	r2, [pc, #276]	; (800bf94 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800be7e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be84:	2200      	movs	r2, #0
 800be86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	330c      	adds	r3, #12
 800be92:	4619      	mov	r1, r3
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be98:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bea0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800bea2:	f7fb fa19 	bl	80072d8 <HAL_DMA_Start_IT>
 800bea6:	4603      	mov	r3, r0
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d00c      	beq.n	800bec6 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800beb0:	f043 0210 	orr.w	r2, r3, #16
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800beb8:	2301      	movs	r3, #1
 800beba:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	2201      	movs	r2, #1
 800bec0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800bec4:	e054      	b.n	800bf70 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	685a      	ldr	r2, [r3, #4]
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f042 0201 	orr.w	r2, r2, #1
 800bed4:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800beda:	2200      	movs	r2, #0
 800bedc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bee2:	2200      	movs	r2, #0
 800bee4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800beea:	2200      	movs	r2, #0
 800beec:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bef2:	2200      	movs	r2, #0
 800bef4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800befe:	4619      	mov	r1, r3
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	330c      	adds	r3, #12
 800bf06:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf0c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800bf0e:	f7fb f9e3 	bl	80072d8 <HAL_DMA_Start_IT>
 800bf12:	4603      	mov	r3, r0
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d00c      	beq.n	800bf32 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bf1c:	f043 0210 	orr.w	r2, r3, #16
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800bf24:	2301      	movs	r3, #1
 800bf26:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800bf30:	e01e      	b.n	800bf70 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf3c:	2b40      	cmp	r3, #64	; 0x40
 800bf3e:	d007      	beq.n	800bf50 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	681a      	ldr	r2, [r3, #0]
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bf4e:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	685a      	ldr	r2, [r3, #4]
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	f042 0220 	orr.w	r2, r2, #32
 800bf5e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	685a      	ldr	r2, [r3, #4]
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f042 0202 	orr.w	r2, r2, #2
 800bf6e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	2200      	movs	r2, #0
 800bf74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800bf78:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3718      	adds	r7, #24
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}
 800bf82:	bf00      	nop
 800bf84:	0800c3eb 	.word	0x0800c3eb
 800bf88:	0800c297 	.word	0x0800c297
 800bf8c:	0800c407 	.word	0x0800c407
 800bf90:	0800c33f 	.word	0x0800c33f
 800bf94:	0800c423 	.word	0x0800c423

0800bf98 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b088      	sub	sp, #32
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	685b      	ldr	r3, [r3, #4]
 800bfa6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	689b      	ldr	r3, [r3, #8]
 800bfae:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800bfb0:	69bb      	ldr	r3, [r7, #24]
 800bfb2:	099b      	lsrs	r3, r3, #6
 800bfb4:	f003 0301 	and.w	r3, r3, #1
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d10f      	bne.n	800bfdc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800bfbc:	69bb      	ldr	r3, [r7, #24]
 800bfbe:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d00a      	beq.n	800bfdc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800bfc6:	69fb      	ldr	r3, [r7, #28]
 800bfc8:	099b      	lsrs	r3, r3, #6
 800bfca:	f003 0301 	and.w	r3, r3, #1
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d004      	beq.n	800bfdc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	4798      	blx	r3
    return;
 800bfda:	e0d7      	b.n	800c18c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800bfdc:	69bb      	ldr	r3, [r7, #24]
 800bfde:	085b      	lsrs	r3, r3, #1
 800bfe0:	f003 0301 	and.w	r3, r3, #1
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d00a      	beq.n	800bffe <HAL_SPI_IRQHandler+0x66>
 800bfe8:	69fb      	ldr	r3, [r7, #28]
 800bfea:	09db      	lsrs	r3, r3, #7
 800bfec:	f003 0301 	and.w	r3, r3, #1
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d004      	beq.n	800bffe <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	4798      	blx	r3
    return;
 800bffc:	e0c6      	b.n	800c18c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800bffe:	69bb      	ldr	r3, [r7, #24]
 800c000:	095b      	lsrs	r3, r3, #5
 800c002:	f003 0301 	and.w	r3, r3, #1
 800c006:	2b00      	cmp	r3, #0
 800c008:	d10c      	bne.n	800c024 <HAL_SPI_IRQHandler+0x8c>
 800c00a:	69bb      	ldr	r3, [r7, #24]
 800c00c:	099b      	lsrs	r3, r3, #6
 800c00e:	f003 0301 	and.w	r3, r3, #1
 800c012:	2b00      	cmp	r3, #0
 800c014:	d106      	bne.n	800c024 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800c016:	69bb      	ldr	r3, [r7, #24]
 800c018:	0a1b      	lsrs	r3, r3, #8
 800c01a:	f003 0301 	and.w	r3, r3, #1
 800c01e:	2b00      	cmp	r3, #0
 800c020:	f000 80b4 	beq.w	800c18c <HAL_SPI_IRQHandler+0x1f4>
 800c024:	69fb      	ldr	r3, [r7, #28]
 800c026:	095b      	lsrs	r3, r3, #5
 800c028:	f003 0301 	and.w	r3, r3, #1
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	f000 80ad 	beq.w	800c18c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800c032:	69bb      	ldr	r3, [r7, #24]
 800c034:	099b      	lsrs	r3, r3, #6
 800c036:	f003 0301 	and.w	r3, r3, #1
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d023      	beq.n	800c086 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c044:	b2db      	uxtb	r3, r3
 800c046:	2b03      	cmp	r3, #3
 800c048:	d011      	beq.n	800c06e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c04e:	f043 0204 	orr.w	r2, r3, #4
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c056:	2300      	movs	r3, #0
 800c058:	617b      	str	r3, [r7, #20]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	68db      	ldr	r3, [r3, #12]
 800c060:	617b      	str	r3, [r7, #20]
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	689b      	ldr	r3, [r3, #8]
 800c068:	617b      	str	r3, [r7, #20]
 800c06a:	697b      	ldr	r3, [r7, #20]
 800c06c:	e00b      	b.n	800c086 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c06e:	2300      	movs	r3, #0
 800c070:	613b      	str	r3, [r7, #16]
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	68db      	ldr	r3, [r3, #12]
 800c078:	613b      	str	r3, [r7, #16]
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	689b      	ldr	r3, [r3, #8]
 800c080:	613b      	str	r3, [r7, #16]
 800c082:	693b      	ldr	r3, [r7, #16]
        return;
 800c084:	e082      	b.n	800c18c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800c086:	69bb      	ldr	r3, [r7, #24]
 800c088:	095b      	lsrs	r3, r3, #5
 800c08a:	f003 0301 	and.w	r3, r3, #1
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d014      	beq.n	800c0bc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c096:	f043 0201 	orr.w	r2, r3, #1
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c09e:	2300      	movs	r3, #0
 800c0a0:	60fb      	str	r3, [r7, #12]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	689b      	ldr	r3, [r3, #8]
 800c0a8:	60fb      	str	r3, [r7, #12]
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	681a      	ldr	r2, [r3, #0]
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c0b8:	601a      	str	r2, [r3, #0]
 800c0ba:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800c0bc:	69bb      	ldr	r3, [r7, #24]
 800c0be:	0a1b      	lsrs	r3, r3, #8
 800c0c0:	f003 0301 	and.w	r3, r3, #1
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d00c      	beq.n	800c0e2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c0cc:	f043 0208 	orr.w	r2, r3, #8
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	60bb      	str	r3, [r7, #8]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	689b      	ldr	r3, [r3, #8]
 800c0de:	60bb      	str	r3, [r7, #8]
 800c0e0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d04f      	beq.n	800c18a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	685a      	ldr	r2, [r3, #4]
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c0f8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2201      	movs	r2, #1
 800c0fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800c102:	69fb      	ldr	r3, [r7, #28]
 800c104:	f003 0302 	and.w	r3, r3, #2
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d104      	bne.n	800c116 <HAL_SPI_IRQHandler+0x17e>
 800c10c:	69fb      	ldr	r3, [r7, #28]
 800c10e:	f003 0301 	and.w	r3, r3, #1
 800c112:	2b00      	cmp	r3, #0
 800c114:	d034      	beq.n	800c180 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	685a      	ldr	r2, [r3, #4]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f022 0203 	bic.w	r2, r2, #3
 800c124:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d011      	beq.n	800c152 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c132:	4a18      	ldr	r2, [pc, #96]	; (800c194 <HAL_SPI_IRQHandler+0x1fc>)
 800c134:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c13a:	4618      	mov	r0, r3
 800c13c:	f7fb f96a 	bl	8007414 <HAL_DMA_Abort_IT>
 800c140:	4603      	mov	r3, r0
 800c142:	2b00      	cmp	r3, #0
 800c144:	d005      	beq.n	800c152 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c14a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c156:	2b00      	cmp	r3, #0
 800c158:	d016      	beq.n	800c188 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c15e:	4a0d      	ldr	r2, [pc, #52]	; (800c194 <HAL_SPI_IRQHandler+0x1fc>)
 800c160:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c166:	4618      	mov	r0, r3
 800c168:	f7fb f954 	bl	8007414 <HAL_DMA_Abort_IT>
 800c16c:	4603      	mov	r3, r0
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d00a      	beq.n	800c188 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c176:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800c17e:	e003      	b.n	800c188 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f7f8 ff57 	bl	8005034 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800c186:	e000      	b.n	800c18a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800c188:	bf00      	nop
    return;
 800c18a:	bf00      	nop
  }
}
 800c18c:	3720      	adds	r7, #32
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}
 800c192:	bf00      	nop
 800c194:	0800c463 	.word	0x0800c463

0800c198 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c198:	b480      	push	{r7}
 800c19a:	b083      	sub	sp, #12
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800c1a0:	bf00      	nop
 800c1a2:	370c      	adds	r7, #12
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1aa:	4770      	bx	lr

0800c1ac <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c1ac:	b480      	push	{r7}
 800c1ae:	b083      	sub	sp, #12
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800c1b4:	bf00      	nop
 800c1b6:	370c      	adds	r7, #12
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1be:	4770      	bx	lr

0800c1c0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c1c0:	b480      	push	{r7}
 800c1c2:	b083      	sub	sp, #12
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800c1c8:	bf00      	nop
 800c1ca:	370c      	adds	r7, #12
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d2:	4770      	bx	lr

0800c1d4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800c1d4:	b480      	push	{r7}
 800c1d6:	b083      	sub	sp, #12
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c1e2:	b2db      	uxtb	r3, r3
}
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	370c      	adds	r7, #12
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ee:	4770      	bx	lr

0800c1f0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b086      	sub	sp, #24
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1fc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c1fe:	f7fa fe3f 	bl	8006e80 <HAL_GetTick>
 800c202:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	f003 0320 	and.w	r3, r3, #32
 800c20e:	2b20      	cmp	r3, #32
 800c210:	d03b      	beq.n	800c28a <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	685a      	ldr	r2, [r3, #4]
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	f022 0220 	bic.w	r2, r2, #32
 800c220:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	685a      	ldr	r2, [r3, #4]
 800c228:	697b      	ldr	r3, [r7, #20]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	f022 0202 	bic.w	r2, r2, #2
 800c230:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c232:	693a      	ldr	r2, [r7, #16]
 800c234:	2164      	movs	r1, #100	; 0x64
 800c236:	6978      	ldr	r0, [r7, #20]
 800c238:	f000 fa9e 	bl	800c778 <SPI_EndRxTxTransaction>
 800c23c:	4603      	mov	r3, r0
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d005      	beq.n	800c24e <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c242:	697b      	ldr	r3, [r7, #20]
 800c244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c246:	f043 0220 	orr.w	r2, r3, #32
 800c24a:	697b      	ldr	r3, [r7, #20]
 800c24c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c24e:	697b      	ldr	r3, [r7, #20]
 800c250:	689b      	ldr	r3, [r3, #8]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d10a      	bne.n	800c26c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c256:	2300      	movs	r3, #0
 800c258:	60fb      	str	r3, [r7, #12]
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	68db      	ldr	r3, [r3, #12]
 800c260:	60fb      	str	r3, [r7, #12]
 800c262:	697b      	ldr	r3, [r7, #20]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	689b      	ldr	r3, [r3, #8]
 800c268:	60fb      	str	r3, [r7, #12]
 800c26a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800c26c:	697b      	ldr	r3, [r7, #20]
 800c26e:	2200      	movs	r2, #0
 800c270:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	2201      	movs	r2, #1
 800c276:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d003      	beq.n	800c28a <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c282:	6978      	ldr	r0, [r7, #20]
 800c284:	f7f8 fed6 	bl	8005034 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c288:	e002      	b.n	800c290 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800c28a:	6978      	ldr	r0, [r7, #20]
 800c28c:	f7f8 febb 	bl	8005006 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c290:	3718      	adds	r7, #24
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}

0800c296 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c296:	b580      	push	{r7, lr}
 800c298:	b084      	sub	sp, #16
 800c29a:	af00      	add	r7, sp, #0
 800c29c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2a2:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c2a4:	f7fa fdec 	bl	8006e80 <HAL_GetTick>
 800c2a8:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f003 0320 	and.w	r3, r3, #32
 800c2b4:	2b20      	cmp	r3, #32
 800c2b6:	d03c      	beq.n	800c332 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	685a      	ldr	r2, [r3, #4]
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f022 0220 	bic.w	r2, r2, #32
 800c2c6:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	689b      	ldr	r3, [r3, #8]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d10d      	bne.n	800c2ec <SPI_DMAReceiveCplt+0x56>
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	685b      	ldr	r3, [r3, #4]
 800c2d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c2d8:	d108      	bne.n	800c2ec <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	685a      	ldr	r2, [r3, #4]
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	f022 0203 	bic.w	r2, r2, #3
 800c2e8:	605a      	str	r2, [r3, #4]
 800c2ea:	e007      	b.n	800c2fc <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	685a      	ldr	r2, [r3, #4]
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f022 0201 	bic.w	r2, r2, #1
 800c2fa:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c2fc:	68ba      	ldr	r2, [r7, #8]
 800c2fe:	2164      	movs	r1, #100	; 0x64
 800c300:	68f8      	ldr	r0, [r7, #12]
 800c302:	f000 f9e1 	bl	800c6c8 <SPI_EndRxTransaction>
 800c306:	4603      	mov	r3, r0
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d002      	beq.n	800c312 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	2220      	movs	r2, #32
 800c310:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	2200      	movs	r2, #0
 800c316:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	2201      	movs	r2, #1
 800c31e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c326:	2b00      	cmp	r3, #0
 800c328:	d003      	beq.n	800c332 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c32a:	68f8      	ldr	r0, [r7, #12]
 800c32c:	f7f8 fe82 	bl	8005034 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c330:	e002      	b.n	800c338 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800c332:	68f8      	ldr	r0, [r7, #12]
 800c334:	f7f8 fe5c 	bl	8004ff0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c338:	3710      	adds	r7, #16
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}

0800c33e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c33e:	b580      	push	{r7, lr}
 800c340:	b084      	sub	sp, #16
 800c342:	af00      	add	r7, sp, #0
 800c344:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c34a:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c34c:	f7fa fd98 	bl	8006e80 <HAL_GetTick>
 800c350:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	f003 0320 	and.w	r3, r3, #32
 800c35c:	2b20      	cmp	r3, #32
 800c35e:	d030      	beq.n	800c3c2 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	685a      	ldr	r2, [r3, #4]
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	f022 0220 	bic.w	r2, r2, #32
 800c36e:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c370:	68ba      	ldr	r2, [r7, #8]
 800c372:	2164      	movs	r1, #100	; 0x64
 800c374:	68f8      	ldr	r0, [r7, #12]
 800c376:	f000 f9ff 	bl	800c778 <SPI_EndRxTxTransaction>
 800c37a:	4603      	mov	r3, r0
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d005      	beq.n	800c38c <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c384:	f043 0220 	orr.w	r2, r3, #32
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	685a      	ldr	r2, [r3, #4]
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	f022 0203 	bic.w	r2, r2, #3
 800c39a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	2201      	movs	r2, #1
 800c3ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d003      	beq.n	800c3c2 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c3ba:	68f8      	ldr	r0, [r7, #12]
 800c3bc:	f7f8 fe3a 	bl	8005034 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c3c0:	e002      	b.n	800c3c8 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800c3c2:	68f8      	ldr	r0, [r7, #12]
 800c3c4:	f7f8 fe2a 	bl	800501c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c3c8:	3710      	adds	r7, #16
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}

0800c3ce <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c3ce:	b580      	push	{r7, lr}
 800c3d0:	b084      	sub	sp, #16
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3da:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800c3dc:	68f8      	ldr	r0, [r7, #12]
 800c3de:	f7ff fedb 	bl	800c198 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c3e2:	bf00      	nop
 800c3e4:	3710      	adds	r7, #16
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}

0800c3ea <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c3ea:	b580      	push	{r7, lr}
 800c3ec:	b084      	sub	sp, #16
 800c3ee:	af00      	add	r7, sp, #0
 800c3f0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3f6:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800c3f8:	68f8      	ldr	r0, [r7, #12]
 800c3fa:	f7ff fed7 	bl	800c1ac <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c3fe:	bf00      	nop
 800c400:	3710      	adds	r7, #16
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}

0800c406 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c406:	b580      	push	{r7, lr}
 800c408:	b084      	sub	sp, #16
 800c40a:	af00      	add	r7, sp, #0
 800c40c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c412:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800c414:	68f8      	ldr	r0, [r7, #12]
 800c416:	f7ff fed3 	bl	800c1c0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c41a:	bf00      	nop
 800c41c:	3710      	adds	r7, #16
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}

0800c422 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800c422:	b580      	push	{r7, lr}
 800c424:	b084      	sub	sp, #16
 800c426:	af00      	add	r7, sp, #0
 800c428:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c42e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	685a      	ldr	r2, [r3, #4]
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f022 0203 	bic.w	r2, r2, #3
 800c43e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c444:	f043 0210 	orr.w	r2, r3, #16
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	2201      	movs	r2, #1
 800c450:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c454:	68f8      	ldr	r0, [r7, #12]
 800c456:	f7f8 fded 	bl	8005034 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c45a:	bf00      	nop
 800c45c:	3710      	adds	r7, #16
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}

0800c462 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c462:	b580      	push	{r7, lr}
 800c464:	b084      	sub	sp, #16
 800c466:	af00      	add	r7, sp, #0
 800c468:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c46e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	2200      	movs	r2, #0
 800c474:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	2200      	movs	r2, #0
 800c47c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c47e:	68f8      	ldr	r0, [r7, #12]
 800c480:	f7f8 fdd8 	bl	8005034 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c484:	bf00      	nop
 800c486:	3710      	adds	r7, #16
 800c488:	46bd      	mov	sp, r7
 800c48a:	bd80      	pop	{r7, pc}

0800c48c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b088      	sub	sp, #32
 800c490:	af00      	add	r7, sp, #0
 800c492:	60f8      	str	r0, [r7, #12]
 800c494:	60b9      	str	r1, [r7, #8]
 800c496:	603b      	str	r3, [r7, #0]
 800c498:	4613      	mov	r3, r2
 800c49a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c49c:	f7fa fcf0 	bl	8006e80 <HAL_GetTick>
 800c4a0:	4602      	mov	r2, r0
 800c4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4a4:	1a9b      	subs	r3, r3, r2
 800c4a6:	683a      	ldr	r2, [r7, #0]
 800c4a8:	4413      	add	r3, r2
 800c4aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c4ac:	f7fa fce8 	bl	8006e80 <HAL_GetTick>
 800c4b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c4b2:	4b39      	ldr	r3, [pc, #228]	; (800c598 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	015b      	lsls	r3, r3, #5
 800c4b8:	0d1b      	lsrs	r3, r3, #20
 800c4ba:	69fa      	ldr	r2, [r7, #28]
 800c4bc:	fb02 f303 	mul.w	r3, r2, r3
 800c4c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c4c2:	e054      	b.n	800c56e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c4ca:	d050      	beq.n	800c56e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c4cc:	f7fa fcd8 	bl	8006e80 <HAL_GetTick>
 800c4d0:	4602      	mov	r2, r0
 800c4d2:	69bb      	ldr	r3, [r7, #24]
 800c4d4:	1ad3      	subs	r3, r2, r3
 800c4d6:	69fa      	ldr	r2, [r7, #28]
 800c4d8:	429a      	cmp	r2, r3
 800c4da:	d902      	bls.n	800c4e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800c4dc:	69fb      	ldr	r3, [r7, #28]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d13d      	bne.n	800c55e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	685a      	ldr	r2, [r3, #4]
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c4f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	685b      	ldr	r3, [r3, #4]
 800c4f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c4fa:	d111      	bne.n	800c520 <SPI_WaitFlagStateUntilTimeout+0x94>
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	689b      	ldr	r3, [r3, #8]
 800c500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c504:	d004      	beq.n	800c510 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	689b      	ldr	r3, [r3, #8]
 800c50a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c50e:	d107      	bne.n	800c520 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	681a      	ldr	r2, [r3, #0]
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c51e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c528:	d10f      	bne.n	800c54a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	681a      	ldr	r2, [r3, #0]
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c538:	601a      	str	r2, [r3, #0]
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	681a      	ldr	r2, [r3, #0]
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c548:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	2201      	movs	r2, #1
 800c54e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	2200      	movs	r2, #0
 800c556:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c55a:	2303      	movs	r3, #3
 800c55c:	e017      	b.n	800c58e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d101      	bne.n	800c568 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c564:	2300      	movs	r3, #0
 800c566:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c568:	697b      	ldr	r3, [r7, #20]
 800c56a:	3b01      	subs	r3, #1
 800c56c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	689a      	ldr	r2, [r3, #8]
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	4013      	ands	r3, r2
 800c578:	68ba      	ldr	r2, [r7, #8]
 800c57a:	429a      	cmp	r2, r3
 800c57c:	bf0c      	ite	eq
 800c57e:	2301      	moveq	r3, #1
 800c580:	2300      	movne	r3, #0
 800c582:	b2db      	uxtb	r3, r3
 800c584:	461a      	mov	r2, r3
 800c586:	79fb      	ldrb	r3, [r7, #7]
 800c588:	429a      	cmp	r2, r3
 800c58a:	d19b      	bne.n	800c4c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c58c:	2300      	movs	r3, #0
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3720      	adds	r7, #32
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}
 800c596:	bf00      	nop
 800c598:	2000020c 	.word	0x2000020c

0800c59c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b08a      	sub	sp, #40	; 0x28
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	60f8      	str	r0, [r7, #12]
 800c5a4:	60b9      	str	r1, [r7, #8]
 800c5a6:	607a      	str	r2, [r7, #4]
 800c5a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800c5ae:	f7fa fc67 	bl	8006e80 <HAL_GetTick>
 800c5b2:	4602      	mov	r2, r0
 800c5b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5b6:	1a9b      	subs	r3, r3, r2
 800c5b8:	683a      	ldr	r2, [r7, #0]
 800c5ba:	4413      	add	r3, r2
 800c5bc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800c5be:	f7fa fc5f 	bl	8006e80 <HAL_GetTick>
 800c5c2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	330c      	adds	r3, #12
 800c5ca:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800c5cc:	4b3d      	ldr	r3, [pc, #244]	; (800c6c4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800c5ce:	681a      	ldr	r2, [r3, #0]
 800c5d0:	4613      	mov	r3, r2
 800c5d2:	009b      	lsls	r3, r3, #2
 800c5d4:	4413      	add	r3, r2
 800c5d6:	00da      	lsls	r2, r3, #3
 800c5d8:	1ad3      	subs	r3, r2, r3
 800c5da:	0d1b      	lsrs	r3, r3, #20
 800c5dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5de:	fb02 f303 	mul.w	r3, r2, r3
 800c5e2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800c5e4:	e060      	b.n	800c6a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c5ec:	d107      	bne.n	800c5fe <SPI_WaitFifoStateUntilTimeout+0x62>
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d104      	bne.n	800c5fe <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800c5f4:	69fb      	ldr	r3, [r7, #28]
 800c5f6:	781b      	ldrb	r3, [r3, #0]
 800c5f8:	b2db      	uxtb	r3, r3
 800c5fa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800c5fc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c604:	d050      	beq.n	800c6a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c606:	f7fa fc3b 	bl	8006e80 <HAL_GetTick>
 800c60a:	4602      	mov	r2, r0
 800c60c:	6a3b      	ldr	r3, [r7, #32]
 800c60e:	1ad3      	subs	r3, r2, r3
 800c610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c612:	429a      	cmp	r2, r3
 800c614:	d902      	bls.n	800c61c <SPI_WaitFifoStateUntilTimeout+0x80>
 800c616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d13d      	bne.n	800c698 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	685a      	ldr	r2, [r3, #4]
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c62a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	685b      	ldr	r3, [r3, #4]
 800c630:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c634:	d111      	bne.n	800c65a <SPI_WaitFifoStateUntilTimeout+0xbe>
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	689b      	ldr	r3, [r3, #8]
 800c63a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c63e:	d004      	beq.n	800c64a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	689b      	ldr	r3, [r3, #8]
 800c644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c648:	d107      	bne.n	800c65a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	681a      	ldr	r2, [r3, #0]
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c658:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c65e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c662:	d10f      	bne.n	800c684 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	681a      	ldr	r2, [r3, #0]
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c672:	601a      	str	r2, [r3, #0]
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	681a      	ldr	r2, [r3, #0]
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c682:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	2201      	movs	r2, #1
 800c688:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	2200      	movs	r2, #0
 800c690:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c694:	2303      	movs	r3, #3
 800c696:	e010      	b.n	800c6ba <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c698:	69bb      	ldr	r3, [r7, #24]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d101      	bne.n	800c6a2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800c6a2:	69bb      	ldr	r3, [r7, #24]
 800c6a4:	3b01      	subs	r3, #1
 800c6a6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	689a      	ldr	r2, [r3, #8]
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	4013      	ands	r3, r2
 800c6b2:	687a      	ldr	r2, [r7, #4]
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d196      	bne.n	800c5e6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800c6b8:	2300      	movs	r3, #0
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3728      	adds	r7, #40	; 0x28
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}
 800c6c2:	bf00      	nop
 800c6c4:	2000020c 	.word	0x2000020c

0800c6c8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b086      	sub	sp, #24
 800c6cc:	af02      	add	r7, sp, #8
 800c6ce:	60f8      	str	r0, [r7, #12]
 800c6d0:	60b9      	str	r1, [r7, #8]
 800c6d2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	685b      	ldr	r3, [r3, #4]
 800c6d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c6dc:	d111      	bne.n	800c702 <SPI_EndRxTransaction+0x3a>
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	689b      	ldr	r3, [r3, #8]
 800c6e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c6e6:	d004      	beq.n	800c6f2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	689b      	ldr	r3, [r3, #8]
 800c6ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c6f0:	d107      	bne.n	800c702 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	681a      	ldr	r2, [r3, #0]
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c700:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	9300      	str	r3, [sp, #0]
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	2200      	movs	r2, #0
 800c70a:	2180      	movs	r1, #128	; 0x80
 800c70c:	68f8      	ldr	r0, [r7, #12]
 800c70e:	f7ff febd 	bl	800c48c <SPI_WaitFlagStateUntilTimeout>
 800c712:	4603      	mov	r3, r0
 800c714:	2b00      	cmp	r3, #0
 800c716:	d007      	beq.n	800c728 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c71c:	f043 0220 	orr.w	r2, r3, #32
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c724:	2303      	movs	r3, #3
 800c726:	e023      	b.n	800c770 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	685b      	ldr	r3, [r3, #4]
 800c72c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c730:	d11d      	bne.n	800c76e <SPI_EndRxTransaction+0xa6>
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	689b      	ldr	r3, [r3, #8]
 800c736:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c73a:	d004      	beq.n	800c746 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	689b      	ldr	r3, [r3, #8]
 800c740:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c744:	d113      	bne.n	800c76e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	9300      	str	r3, [sp, #0]
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	2200      	movs	r2, #0
 800c74e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c752:	68f8      	ldr	r0, [r7, #12]
 800c754:	f7ff ff22 	bl	800c59c <SPI_WaitFifoStateUntilTimeout>
 800c758:	4603      	mov	r3, r0
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d007      	beq.n	800c76e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c762:	f043 0220 	orr.w	r2, r3, #32
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800c76a:	2303      	movs	r3, #3
 800c76c:	e000      	b.n	800c770 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800c76e:	2300      	movs	r3, #0
}
 800c770:	4618      	mov	r0, r3
 800c772:	3710      	adds	r7, #16
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}

0800c778 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b086      	sub	sp, #24
 800c77c:	af02      	add	r7, sp, #8
 800c77e:	60f8      	str	r0, [r7, #12]
 800c780:	60b9      	str	r1, [r7, #8]
 800c782:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	9300      	str	r3, [sp, #0]
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	2200      	movs	r2, #0
 800c78c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800c790:	68f8      	ldr	r0, [r7, #12]
 800c792:	f7ff ff03 	bl	800c59c <SPI_WaitFifoStateUntilTimeout>
 800c796:	4603      	mov	r3, r0
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d007      	beq.n	800c7ac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c7a0:	f043 0220 	orr.w	r2, r3, #32
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c7a8:	2303      	movs	r3, #3
 800c7aa:	e027      	b.n	800c7fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	9300      	str	r3, [sp, #0]
 800c7b0:	68bb      	ldr	r3, [r7, #8]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	2180      	movs	r1, #128	; 0x80
 800c7b6:	68f8      	ldr	r0, [r7, #12]
 800c7b8:	f7ff fe68 	bl	800c48c <SPI_WaitFlagStateUntilTimeout>
 800c7bc:	4603      	mov	r3, r0
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d007      	beq.n	800c7d2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c7c6:	f043 0220 	orr.w	r2, r3, #32
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c7ce:	2303      	movs	r3, #3
 800c7d0:	e014      	b.n	800c7fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	9300      	str	r3, [sp, #0]
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	2200      	movs	r2, #0
 800c7da:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c7de:	68f8      	ldr	r0, [r7, #12]
 800c7e0:	f7ff fedc 	bl	800c59c <SPI_WaitFifoStateUntilTimeout>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d007      	beq.n	800c7fa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c7ee:	f043 0220 	orr.w	r2, r3, #32
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c7f6:	2303      	movs	r3, #3
 800c7f8:	e000      	b.n	800c7fc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800c7fa:	2300      	movs	r3, #0
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	3710      	adds	r7, #16
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}

0800c804 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b082      	sub	sp, #8
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d101      	bne.n	800c816 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c812:	2301      	movs	r3, #1
 800c814:	e049      	b.n	800c8aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c81c:	b2db      	uxtb	r3, r3
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d106      	bne.n	800c830 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2200      	movs	r2, #0
 800c826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f7f9 fafa 	bl	8005e24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2202      	movs	r2, #2
 800c834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681a      	ldr	r2, [r3, #0]
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	3304      	adds	r3, #4
 800c840:	4619      	mov	r1, r3
 800c842:	4610      	mov	r0, r2
 800c844:	f000 fae6 	bl	800ce14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2201      	movs	r2, #1
 800c84c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2201      	movs	r2, #1
 800c854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2201      	movs	r2, #1
 800c85c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2201      	movs	r2, #1
 800c864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2201      	movs	r2, #1
 800c86c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2201      	movs	r2, #1
 800c874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2201      	movs	r2, #1
 800c87c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2201      	movs	r2, #1
 800c884:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2201      	movs	r2, #1
 800c88c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2201      	movs	r2, #1
 800c894:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2201      	movs	r2, #1
 800c89c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c8a8:	2300      	movs	r3, #0
}
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	3708      	adds	r7, #8
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bd80      	pop	{r7, pc}
	...

0800c8b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	b085      	sub	sp, #20
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c8c2:	b2db      	uxtb	r3, r3
 800c8c4:	2b01      	cmp	r3, #1
 800c8c6:	d001      	beq.n	800c8cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	e04f      	b.n	800c96c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2202      	movs	r2, #2
 800c8d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	68da      	ldr	r2, [r3, #12]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	f042 0201 	orr.w	r2, r2, #1
 800c8e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	4a23      	ldr	r2, [pc, #140]	; (800c978 <HAL_TIM_Base_Start_IT+0xc4>)
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	d01d      	beq.n	800c92a <HAL_TIM_Base_Start_IT+0x76>
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c8f6:	d018      	beq.n	800c92a <HAL_TIM_Base_Start_IT+0x76>
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	4a1f      	ldr	r2, [pc, #124]	; (800c97c <HAL_TIM_Base_Start_IT+0xc8>)
 800c8fe:	4293      	cmp	r3, r2
 800c900:	d013      	beq.n	800c92a <HAL_TIM_Base_Start_IT+0x76>
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	4a1e      	ldr	r2, [pc, #120]	; (800c980 <HAL_TIM_Base_Start_IT+0xcc>)
 800c908:	4293      	cmp	r3, r2
 800c90a:	d00e      	beq.n	800c92a <HAL_TIM_Base_Start_IT+0x76>
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	4a1c      	ldr	r2, [pc, #112]	; (800c984 <HAL_TIM_Base_Start_IT+0xd0>)
 800c912:	4293      	cmp	r3, r2
 800c914:	d009      	beq.n	800c92a <HAL_TIM_Base_Start_IT+0x76>
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	4a1b      	ldr	r2, [pc, #108]	; (800c988 <HAL_TIM_Base_Start_IT+0xd4>)
 800c91c:	4293      	cmp	r3, r2
 800c91e:	d004      	beq.n	800c92a <HAL_TIM_Base_Start_IT+0x76>
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	4a19      	ldr	r2, [pc, #100]	; (800c98c <HAL_TIM_Base_Start_IT+0xd8>)
 800c926:	4293      	cmp	r3, r2
 800c928:	d115      	bne.n	800c956 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	689a      	ldr	r2, [r3, #8]
 800c930:	4b17      	ldr	r3, [pc, #92]	; (800c990 <HAL_TIM_Base_Start_IT+0xdc>)
 800c932:	4013      	ands	r3, r2
 800c934:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	2b06      	cmp	r3, #6
 800c93a:	d015      	beq.n	800c968 <HAL_TIM_Base_Start_IT+0xb4>
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c942:	d011      	beq.n	800c968 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	681a      	ldr	r2, [r3, #0]
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	f042 0201 	orr.w	r2, r2, #1
 800c952:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c954:	e008      	b.n	800c968 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	681a      	ldr	r2, [r3, #0]
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	f042 0201 	orr.w	r2, r2, #1
 800c964:	601a      	str	r2, [r3, #0]
 800c966:	e000      	b.n	800c96a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c968:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c96a:	2300      	movs	r3, #0
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	3714      	adds	r7, #20
 800c970:	46bd      	mov	sp, r7
 800c972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c976:	4770      	bx	lr
 800c978:	40012c00 	.word	0x40012c00
 800c97c:	40000400 	.word	0x40000400
 800c980:	40000800 	.word	0x40000800
 800c984:	40000c00 	.word	0x40000c00
 800c988:	40013400 	.word	0x40013400
 800c98c:	40014000 	.word	0x40014000
 800c990:	00010007 	.word	0x00010007

0800c994 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800c994:	b480      	push	{r7}
 800c996:	b083      	sub	sp, #12
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	68da      	ldr	r2, [r3, #12]
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	f022 0201 	bic.w	r2, r2, #1
 800c9aa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	6a1a      	ldr	r2, [r3, #32]
 800c9b2:	f241 1311 	movw	r3, #4369	; 0x1111
 800c9b6:	4013      	ands	r3, r2
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d10f      	bne.n	800c9dc <HAL_TIM_Base_Stop_IT+0x48>
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	6a1a      	ldr	r2, [r3, #32]
 800c9c2:	f240 4344 	movw	r3, #1092	; 0x444
 800c9c6:	4013      	ands	r3, r2
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d107      	bne.n	800c9dc <HAL_TIM_Base_Stop_IT+0x48>
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	681a      	ldr	r2, [r3, #0]
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	f022 0201 	bic.w	r2, r2, #1
 800c9da:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2201      	movs	r2, #1
 800c9e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c9e4:	2300      	movs	r3, #0
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	370c      	adds	r7, #12
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f0:	4770      	bx	lr

0800c9f2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c9f2:	b580      	push	{r7, lr}
 800c9f4:	b082      	sub	sp, #8
 800c9f6:	af00      	add	r7, sp, #0
 800c9f8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	691b      	ldr	r3, [r3, #16]
 800ca00:	f003 0302 	and.w	r3, r3, #2
 800ca04:	2b02      	cmp	r3, #2
 800ca06:	d122      	bne.n	800ca4e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	68db      	ldr	r3, [r3, #12]
 800ca0e:	f003 0302 	and.w	r3, r3, #2
 800ca12:	2b02      	cmp	r3, #2
 800ca14:	d11b      	bne.n	800ca4e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	f06f 0202 	mvn.w	r2, #2
 800ca1e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2201      	movs	r2, #1
 800ca24:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	699b      	ldr	r3, [r3, #24]
 800ca2c:	f003 0303 	and.w	r3, r3, #3
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d003      	beq.n	800ca3c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f000 f9ce 	bl	800cdd6 <HAL_TIM_IC_CaptureCallback>
 800ca3a:	e005      	b.n	800ca48 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	f000 f9c0 	bl	800cdc2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f000 f9d1 	bl	800cdea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	691b      	ldr	r3, [r3, #16]
 800ca54:	f003 0304 	and.w	r3, r3, #4
 800ca58:	2b04      	cmp	r3, #4
 800ca5a:	d122      	bne.n	800caa2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	68db      	ldr	r3, [r3, #12]
 800ca62:	f003 0304 	and.w	r3, r3, #4
 800ca66:	2b04      	cmp	r3, #4
 800ca68:	d11b      	bne.n	800caa2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	f06f 0204 	mvn.w	r2, #4
 800ca72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2202      	movs	r2, #2
 800ca78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	699b      	ldr	r3, [r3, #24]
 800ca80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d003      	beq.n	800ca90 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f000 f9a4 	bl	800cdd6 <HAL_TIM_IC_CaptureCallback>
 800ca8e:	e005      	b.n	800ca9c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	f000 f996 	bl	800cdc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	f000 f9a7 	bl	800cdea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2200      	movs	r2, #0
 800caa0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	691b      	ldr	r3, [r3, #16]
 800caa8:	f003 0308 	and.w	r3, r3, #8
 800caac:	2b08      	cmp	r3, #8
 800caae:	d122      	bne.n	800caf6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	68db      	ldr	r3, [r3, #12]
 800cab6:	f003 0308 	and.w	r3, r3, #8
 800caba:	2b08      	cmp	r3, #8
 800cabc:	d11b      	bne.n	800caf6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	f06f 0208 	mvn.w	r2, #8
 800cac6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2204      	movs	r2, #4
 800cacc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	69db      	ldr	r3, [r3, #28]
 800cad4:	f003 0303 	and.w	r3, r3, #3
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d003      	beq.n	800cae4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f000 f97a 	bl	800cdd6 <HAL_TIM_IC_CaptureCallback>
 800cae2:	e005      	b.n	800caf0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f000 f96c 	bl	800cdc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f000 f97d 	bl	800cdea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2200      	movs	r2, #0
 800caf4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	691b      	ldr	r3, [r3, #16]
 800cafc:	f003 0310 	and.w	r3, r3, #16
 800cb00:	2b10      	cmp	r3, #16
 800cb02:	d122      	bne.n	800cb4a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	68db      	ldr	r3, [r3, #12]
 800cb0a:	f003 0310 	and.w	r3, r3, #16
 800cb0e:	2b10      	cmp	r3, #16
 800cb10:	d11b      	bne.n	800cb4a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	f06f 0210 	mvn.w	r2, #16
 800cb1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2208      	movs	r2, #8
 800cb20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	69db      	ldr	r3, [r3, #28]
 800cb28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d003      	beq.n	800cb38 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	f000 f950 	bl	800cdd6 <HAL_TIM_IC_CaptureCallback>
 800cb36:	e005      	b.n	800cb44 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f000 f942 	bl	800cdc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f000 f953 	bl	800cdea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2200      	movs	r2, #0
 800cb48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	691b      	ldr	r3, [r3, #16]
 800cb50:	f003 0301 	and.w	r3, r3, #1
 800cb54:	2b01      	cmp	r3, #1
 800cb56:	d10e      	bne.n	800cb76 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	68db      	ldr	r3, [r3, #12]
 800cb5e:	f003 0301 	and.w	r3, r3, #1
 800cb62:	2b01      	cmp	r3, #1
 800cb64:	d107      	bne.n	800cb76 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	f06f 0201 	mvn.w	r2, #1
 800cb6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f7f7 ff3d 	bl	80049f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	691b      	ldr	r3, [r3, #16]
 800cb7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb80:	2b80      	cmp	r3, #128	; 0x80
 800cb82:	d10e      	bne.n	800cba2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	68db      	ldr	r3, [r3, #12]
 800cb8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb8e:	2b80      	cmp	r3, #128	; 0x80
 800cb90:	d107      	bne.n	800cba2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cb9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cb9c:	6878      	ldr	r0, [r7, #4]
 800cb9e:	f000 faff 	bl	800d1a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	691b      	ldr	r3, [r3, #16]
 800cba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cbb0:	d10e      	bne.n	800cbd0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	68db      	ldr	r3, [r3, #12]
 800cbb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbbc:	2b80      	cmp	r3, #128	; 0x80
 800cbbe:	d107      	bne.n	800cbd0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cbc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f000 faf2 	bl	800d1b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	691b      	ldr	r3, [r3, #16]
 800cbd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbda:	2b40      	cmp	r3, #64	; 0x40
 800cbdc:	d10e      	bne.n	800cbfc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	68db      	ldr	r3, [r3, #12]
 800cbe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbe8:	2b40      	cmp	r3, #64	; 0x40
 800cbea:	d107      	bne.n	800cbfc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cbf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	f000 f901 	bl	800cdfe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	691b      	ldr	r3, [r3, #16]
 800cc02:	f003 0320 	and.w	r3, r3, #32
 800cc06:	2b20      	cmp	r3, #32
 800cc08:	d10e      	bne.n	800cc28 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	68db      	ldr	r3, [r3, #12]
 800cc10:	f003 0320 	and.w	r3, r3, #32
 800cc14:	2b20      	cmp	r3, #32
 800cc16:	d107      	bne.n	800cc28 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	f06f 0220 	mvn.w	r2, #32
 800cc20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	f000 fab2 	bl	800d18c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cc28:	bf00      	nop
 800cc2a:	3708      	adds	r7, #8
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}

0800cc30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b084      	sub	sp, #16
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
 800cc38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc44:	2b01      	cmp	r3, #1
 800cc46:	d101      	bne.n	800cc4c <HAL_TIM_ConfigClockSource+0x1c>
 800cc48:	2302      	movs	r3, #2
 800cc4a:	e0b6      	b.n	800cdba <HAL_TIM_ConfigClockSource+0x18a>
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2201      	movs	r2, #1
 800cc50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2202      	movs	r2, #2
 800cc58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	689b      	ldr	r3, [r3, #8]
 800cc62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cc6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800cc6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cc76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	68ba      	ldr	r2, [r7, #8]
 800cc7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cc88:	d03e      	beq.n	800cd08 <HAL_TIM_ConfigClockSource+0xd8>
 800cc8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cc8e:	f200 8087 	bhi.w	800cda0 <HAL_TIM_ConfigClockSource+0x170>
 800cc92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc96:	f000 8086 	beq.w	800cda6 <HAL_TIM_ConfigClockSource+0x176>
 800cc9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc9e:	d87f      	bhi.n	800cda0 <HAL_TIM_ConfigClockSource+0x170>
 800cca0:	2b70      	cmp	r3, #112	; 0x70
 800cca2:	d01a      	beq.n	800ccda <HAL_TIM_ConfigClockSource+0xaa>
 800cca4:	2b70      	cmp	r3, #112	; 0x70
 800cca6:	d87b      	bhi.n	800cda0 <HAL_TIM_ConfigClockSource+0x170>
 800cca8:	2b60      	cmp	r3, #96	; 0x60
 800ccaa:	d050      	beq.n	800cd4e <HAL_TIM_ConfigClockSource+0x11e>
 800ccac:	2b60      	cmp	r3, #96	; 0x60
 800ccae:	d877      	bhi.n	800cda0 <HAL_TIM_ConfigClockSource+0x170>
 800ccb0:	2b50      	cmp	r3, #80	; 0x50
 800ccb2:	d03c      	beq.n	800cd2e <HAL_TIM_ConfigClockSource+0xfe>
 800ccb4:	2b50      	cmp	r3, #80	; 0x50
 800ccb6:	d873      	bhi.n	800cda0 <HAL_TIM_ConfigClockSource+0x170>
 800ccb8:	2b40      	cmp	r3, #64	; 0x40
 800ccba:	d058      	beq.n	800cd6e <HAL_TIM_ConfigClockSource+0x13e>
 800ccbc:	2b40      	cmp	r3, #64	; 0x40
 800ccbe:	d86f      	bhi.n	800cda0 <HAL_TIM_ConfigClockSource+0x170>
 800ccc0:	2b30      	cmp	r3, #48	; 0x30
 800ccc2:	d064      	beq.n	800cd8e <HAL_TIM_ConfigClockSource+0x15e>
 800ccc4:	2b30      	cmp	r3, #48	; 0x30
 800ccc6:	d86b      	bhi.n	800cda0 <HAL_TIM_ConfigClockSource+0x170>
 800ccc8:	2b20      	cmp	r3, #32
 800ccca:	d060      	beq.n	800cd8e <HAL_TIM_ConfigClockSource+0x15e>
 800cccc:	2b20      	cmp	r3, #32
 800ccce:	d867      	bhi.n	800cda0 <HAL_TIM_ConfigClockSource+0x170>
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d05c      	beq.n	800cd8e <HAL_TIM_ConfigClockSource+0x15e>
 800ccd4:	2b10      	cmp	r3, #16
 800ccd6:	d05a      	beq.n	800cd8e <HAL_TIM_ConfigClockSource+0x15e>
 800ccd8:	e062      	b.n	800cda0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6818      	ldr	r0, [r3, #0]
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	6899      	ldr	r1, [r3, #8]
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	685a      	ldr	r2, [r3, #4]
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	68db      	ldr	r3, [r3, #12]
 800ccea:	f000 f9a7 	bl	800d03c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	689b      	ldr	r3, [r3, #8]
 800ccf4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ccf6:	68bb      	ldr	r3, [r7, #8]
 800ccf8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ccfc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	68ba      	ldr	r2, [r7, #8]
 800cd04:	609a      	str	r2, [r3, #8]
      break;
 800cd06:	e04f      	b.n	800cda8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	6818      	ldr	r0, [r3, #0]
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	6899      	ldr	r1, [r3, #8]
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	685a      	ldr	r2, [r3, #4]
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	68db      	ldr	r3, [r3, #12]
 800cd18:	f000 f990 	bl	800d03c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	689a      	ldr	r2, [r3, #8]
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cd2a:	609a      	str	r2, [r3, #8]
      break;
 800cd2c:	e03c      	b.n	800cda8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	6818      	ldr	r0, [r3, #0]
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	6859      	ldr	r1, [r3, #4]
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	68db      	ldr	r3, [r3, #12]
 800cd3a:	461a      	mov	r2, r3
 800cd3c:	f000 f904 	bl	800cf48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	2150      	movs	r1, #80	; 0x50
 800cd46:	4618      	mov	r0, r3
 800cd48:	f000 f95d 	bl	800d006 <TIM_ITRx_SetConfig>
      break;
 800cd4c:	e02c      	b.n	800cda8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6818      	ldr	r0, [r3, #0]
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	6859      	ldr	r1, [r3, #4]
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	68db      	ldr	r3, [r3, #12]
 800cd5a:	461a      	mov	r2, r3
 800cd5c:	f000 f923 	bl	800cfa6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	2160      	movs	r1, #96	; 0x60
 800cd66:	4618      	mov	r0, r3
 800cd68:	f000 f94d 	bl	800d006 <TIM_ITRx_SetConfig>
      break;
 800cd6c:	e01c      	b.n	800cda8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6818      	ldr	r0, [r3, #0]
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	6859      	ldr	r1, [r3, #4]
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	68db      	ldr	r3, [r3, #12]
 800cd7a:	461a      	mov	r2, r3
 800cd7c:	f000 f8e4 	bl	800cf48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	2140      	movs	r1, #64	; 0x40
 800cd86:	4618      	mov	r0, r3
 800cd88:	f000 f93d 	bl	800d006 <TIM_ITRx_SetConfig>
      break;
 800cd8c:	e00c      	b.n	800cda8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681a      	ldr	r2, [r3, #0]
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	4619      	mov	r1, r3
 800cd98:	4610      	mov	r0, r2
 800cd9a:	f000 f934 	bl	800d006 <TIM_ITRx_SetConfig>
      break;
 800cd9e:	e003      	b.n	800cda8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800cda0:	2301      	movs	r3, #1
 800cda2:	73fb      	strb	r3, [r7, #15]
      break;
 800cda4:	e000      	b.n	800cda8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800cda6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2201      	movs	r2, #1
 800cdac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cdb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	3710      	adds	r7, #16
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}

0800cdc2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cdc2:	b480      	push	{r7}
 800cdc4:	b083      	sub	sp, #12
 800cdc6:	af00      	add	r7, sp, #0
 800cdc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cdca:	bf00      	nop
 800cdcc:	370c      	adds	r7, #12
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd4:	4770      	bx	lr

0800cdd6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cdd6:	b480      	push	{r7}
 800cdd8:	b083      	sub	sp, #12
 800cdda:	af00      	add	r7, sp, #0
 800cddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cdde:	bf00      	nop
 800cde0:	370c      	adds	r7, #12
 800cde2:	46bd      	mov	sp, r7
 800cde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde8:	4770      	bx	lr

0800cdea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cdea:	b480      	push	{r7}
 800cdec:	b083      	sub	sp, #12
 800cdee:	af00      	add	r7, sp, #0
 800cdf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cdf2:	bf00      	nop
 800cdf4:	370c      	adds	r7, #12
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfc:	4770      	bx	lr

0800cdfe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cdfe:	b480      	push	{r7}
 800ce00:	b083      	sub	sp, #12
 800ce02:	af00      	add	r7, sp, #0
 800ce04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ce06:	bf00      	nop
 800ce08:	370c      	adds	r7, #12
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce10:	4770      	bx	lr
	...

0800ce14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ce14:	b480      	push	{r7}
 800ce16:	b085      	sub	sp, #20
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
 800ce1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	4a40      	ldr	r2, [pc, #256]	; (800cf28 <TIM_Base_SetConfig+0x114>)
 800ce28:	4293      	cmp	r3, r2
 800ce2a:	d013      	beq.n	800ce54 <TIM_Base_SetConfig+0x40>
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce32:	d00f      	beq.n	800ce54 <TIM_Base_SetConfig+0x40>
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	4a3d      	ldr	r2, [pc, #244]	; (800cf2c <TIM_Base_SetConfig+0x118>)
 800ce38:	4293      	cmp	r3, r2
 800ce3a:	d00b      	beq.n	800ce54 <TIM_Base_SetConfig+0x40>
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	4a3c      	ldr	r2, [pc, #240]	; (800cf30 <TIM_Base_SetConfig+0x11c>)
 800ce40:	4293      	cmp	r3, r2
 800ce42:	d007      	beq.n	800ce54 <TIM_Base_SetConfig+0x40>
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	4a3b      	ldr	r2, [pc, #236]	; (800cf34 <TIM_Base_SetConfig+0x120>)
 800ce48:	4293      	cmp	r3, r2
 800ce4a:	d003      	beq.n	800ce54 <TIM_Base_SetConfig+0x40>
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	4a3a      	ldr	r2, [pc, #232]	; (800cf38 <TIM_Base_SetConfig+0x124>)
 800ce50:	4293      	cmp	r3, r2
 800ce52:	d108      	bne.n	800ce66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	685b      	ldr	r3, [r3, #4]
 800ce60:	68fa      	ldr	r2, [r7, #12]
 800ce62:	4313      	orrs	r3, r2
 800ce64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	4a2f      	ldr	r2, [pc, #188]	; (800cf28 <TIM_Base_SetConfig+0x114>)
 800ce6a:	4293      	cmp	r3, r2
 800ce6c:	d01f      	beq.n	800ceae <TIM_Base_SetConfig+0x9a>
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce74:	d01b      	beq.n	800ceae <TIM_Base_SetConfig+0x9a>
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	4a2c      	ldr	r2, [pc, #176]	; (800cf2c <TIM_Base_SetConfig+0x118>)
 800ce7a:	4293      	cmp	r3, r2
 800ce7c:	d017      	beq.n	800ceae <TIM_Base_SetConfig+0x9a>
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	4a2b      	ldr	r2, [pc, #172]	; (800cf30 <TIM_Base_SetConfig+0x11c>)
 800ce82:	4293      	cmp	r3, r2
 800ce84:	d013      	beq.n	800ceae <TIM_Base_SetConfig+0x9a>
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	4a2a      	ldr	r2, [pc, #168]	; (800cf34 <TIM_Base_SetConfig+0x120>)
 800ce8a:	4293      	cmp	r3, r2
 800ce8c:	d00f      	beq.n	800ceae <TIM_Base_SetConfig+0x9a>
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	4a29      	ldr	r2, [pc, #164]	; (800cf38 <TIM_Base_SetConfig+0x124>)
 800ce92:	4293      	cmp	r3, r2
 800ce94:	d00b      	beq.n	800ceae <TIM_Base_SetConfig+0x9a>
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	4a28      	ldr	r2, [pc, #160]	; (800cf3c <TIM_Base_SetConfig+0x128>)
 800ce9a:	4293      	cmp	r3, r2
 800ce9c:	d007      	beq.n	800ceae <TIM_Base_SetConfig+0x9a>
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	4a27      	ldr	r2, [pc, #156]	; (800cf40 <TIM_Base_SetConfig+0x12c>)
 800cea2:	4293      	cmp	r3, r2
 800cea4:	d003      	beq.n	800ceae <TIM_Base_SetConfig+0x9a>
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	4a26      	ldr	r2, [pc, #152]	; (800cf44 <TIM_Base_SetConfig+0x130>)
 800ceaa:	4293      	cmp	r3, r2
 800ceac:	d108      	bne.n	800cec0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ceb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	68db      	ldr	r3, [r3, #12]
 800ceba:	68fa      	ldr	r2, [r7, #12]
 800cebc:	4313      	orrs	r3, r2
 800cebe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	695b      	ldr	r3, [r3, #20]
 800ceca:	4313      	orrs	r3, r2
 800cecc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	68fa      	ldr	r2, [r7, #12]
 800ced2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	689a      	ldr	r2, [r3, #8]
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	681a      	ldr	r2, [r3, #0]
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	4a10      	ldr	r2, [pc, #64]	; (800cf28 <TIM_Base_SetConfig+0x114>)
 800cee8:	4293      	cmp	r3, r2
 800ceea:	d00f      	beq.n	800cf0c <TIM_Base_SetConfig+0xf8>
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	4a12      	ldr	r2, [pc, #72]	; (800cf38 <TIM_Base_SetConfig+0x124>)
 800cef0:	4293      	cmp	r3, r2
 800cef2:	d00b      	beq.n	800cf0c <TIM_Base_SetConfig+0xf8>
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	4a11      	ldr	r2, [pc, #68]	; (800cf3c <TIM_Base_SetConfig+0x128>)
 800cef8:	4293      	cmp	r3, r2
 800cefa:	d007      	beq.n	800cf0c <TIM_Base_SetConfig+0xf8>
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	4a10      	ldr	r2, [pc, #64]	; (800cf40 <TIM_Base_SetConfig+0x12c>)
 800cf00:	4293      	cmp	r3, r2
 800cf02:	d003      	beq.n	800cf0c <TIM_Base_SetConfig+0xf8>
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	4a0f      	ldr	r2, [pc, #60]	; (800cf44 <TIM_Base_SetConfig+0x130>)
 800cf08:	4293      	cmp	r3, r2
 800cf0a:	d103      	bne.n	800cf14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	691a      	ldr	r2, [r3, #16]
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2201      	movs	r2, #1
 800cf18:	615a      	str	r2, [r3, #20]
}
 800cf1a:	bf00      	nop
 800cf1c:	3714      	adds	r7, #20
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf24:	4770      	bx	lr
 800cf26:	bf00      	nop
 800cf28:	40012c00 	.word	0x40012c00
 800cf2c:	40000400 	.word	0x40000400
 800cf30:	40000800 	.word	0x40000800
 800cf34:	40000c00 	.word	0x40000c00
 800cf38:	40013400 	.word	0x40013400
 800cf3c:	40014000 	.word	0x40014000
 800cf40:	40014400 	.word	0x40014400
 800cf44:	40014800 	.word	0x40014800

0800cf48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cf48:	b480      	push	{r7}
 800cf4a:	b087      	sub	sp, #28
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	60f8      	str	r0, [r7, #12]
 800cf50:	60b9      	str	r1, [r7, #8]
 800cf52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	6a1b      	ldr	r3, [r3, #32]
 800cf58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	6a1b      	ldr	r3, [r3, #32]
 800cf5e:	f023 0201 	bic.w	r2, r3, #1
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	699b      	ldr	r3, [r3, #24]
 800cf6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cf6c:	693b      	ldr	r3, [r7, #16]
 800cf6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cf72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	011b      	lsls	r3, r3, #4
 800cf78:	693a      	ldr	r2, [r7, #16]
 800cf7a:	4313      	orrs	r3, r2
 800cf7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	f023 030a 	bic.w	r3, r3, #10
 800cf84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cf86:	697a      	ldr	r2, [r7, #20]
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	4313      	orrs	r3, r2
 800cf8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	693a      	ldr	r2, [r7, #16]
 800cf92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	697a      	ldr	r2, [r7, #20]
 800cf98:	621a      	str	r2, [r3, #32]
}
 800cf9a:	bf00      	nop
 800cf9c:	371c      	adds	r7, #28
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa4:	4770      	bx	lr

0800cfa6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cfa6:	b480      	push	{r7}
 800cfa8:	b087      	sub	sp, #28
 800cfaa:	af00      	add	r7, sp, #0
 800cfac:	60f8      	str	r0, [r7, #12]
 800cfae:	60b9      	str	r1, [r7, #8]
 800cfb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	6a1b      	ldr	r3, [r3, #32]
 800cfb6:	f023 0210 	bic.w	r2, r3, #16
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	699b      	ldr	r3, [r3, #24]
 800cfc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	6a1b      	ldr	r3, [r3, #32]
 800cfc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cfca:	697b      	ldr	r3, [r7, #20]
 800cfcc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cfd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	031b      	lsls	r3, r3, #12
 800cfd6:	697a      	ldr	r2, [r7, #20]
 800cfd8:	4313      	orrs	r3, r2
 800cfda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cfdc:	693b      	ldr	r3, [r7, #16]
 800cfde:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cfe2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cfe4:	68bb      	ldr	r3, [r7, #8]
 800cfe6:	011b      	lsls	r3, r3, #4
 800cfe8:	693a      	ldr	r2, [r7, #16]
 800cfea:	4313      	orrs	r3, r2
 800cfec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	697a      	ldr	r2, [r7, #20]
 800cff2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	693a      	ldr	r2, [r7, #16]
 800cff8:	621a      	str	r2, [r3, #32]
}
 800cffa:	bf00      	nop
 800cffc:	371c      	adds	r7, #28
 800cffe:	46bd      	mov	sp, r7
 800d000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d004:	4770      	bx	lr

0800d006 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d006:	b480      	push	{r7}
 800d008:	b085      	sub	sp, #20
 800d00a:	af00      	add	r7, sp, #0
 800d00c:	6078      	str	r0, [r7, #4]
 800d00e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	689b      	ldr	r3, [r3, #8]
 800d014:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d01c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d01e:	683a      	ldr	r2, [r7, #0]
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	4313      	orrs	r3, r2
 800d024:	f043 0307 	orr.w	r3, r3, #7
 800d028:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	68fa      	ldr	r2, [r7, #12]
 800d02e:	609a      	str	r2, [r3, #8]
}
 800d030:	bf00      	nop
 800d032:	3714      	adds	r7, #20
 800d034:	46bd      	mov	sp, r7
 800d036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03a:	4770      	bx	lr

0800d03c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d03c:	b480      	push	{r7}
 800d03e:	b087      	sub	sp, #28
 800d040:	af00      	add	r7, sp, #0
 800d042:	60f8      	str	r0, [r7, #12]
 800d044:	60b9      	str	r1, [r7, #8]
 800d046:	607a      	str	r2, [r7, #4]
 800d048:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	689b      	ldr	r3, [r3, #8]
 800d04e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d050:	697b      	ldr	r3, [r7, #20]
 800d052:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d056:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d058:	683b      	ldr	r3, [r7, #0]
 800d05a:	021a      	lsls	r2, r3, #8
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	431a      	orrs	r2, r3
 800d060:	68bb      	ldr	r3, [r7, #8]
 800d062:	4313      	orrs	r3, r2
 800d064:	697a      	ldr	r2, [r7, #20]
 800d066:	4313      	orrs	r3, r2
 800d068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	697a      	ldr	r2, [r7, #20]
 800d06e:	609a      	str	r2, [r3, #8]
}
 800d070:	bf00      	nop
 800d072:	371c      	adds	r7, #28
 800d074:	46bd      	mov	sp, r7
 800d076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07a:	4770      	bx	lr

0800d07c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d07c:	b480      	push	{r7}
 800d07e:	b085      	sub	sp, #20
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
 800d084:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d08c:	2b01      	cmp	r3, #1
 800d08e:	d101      	bne.n	800d094 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d090:	2302      	movs	r3, #2
 800d092:	e068      	b.n	800d166 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2201      	movs	r2, #1
 800d098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2202      	movs	r2, #2
 800d0a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	685b      	ldr	r3, [r3, #4]
 800d0aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	689b      	ldr	r3, [r3, #8]
 800d0b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	4a2e      	ldr	r2, [pc, #184]	; (800d174 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800d0ba:	4293      	cmp	r3, r2
 800d0bc:	d004      	beq.n	800d0c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	4a2d      	ldr	r2, [pc, #180]	; (800d178 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800d0c4:	4293      	cmp	r3, r2
 800d0c6:	d108      	bne.n	800d0da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d0ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	685b      	ldr	r3, [r3, #4]
 800d0d4:	68fa      	ldr	r2, [r7, #12]
 800d0d6:	4313      	orrs	r3, r2
 800d0d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d0e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	68fa      	ldr	r2, [r7, #12]
 800d0e8:	4313      	orrs	r3, r2
 800d0ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	68fa      	ldr	r2, [r7, #12]
 800d0f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	4a1e      	ldr	r2, [pc, #120]	; (800d174 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800d0fa:	4293      	cmp	r3, r2
 800d0fc:	d01d      	beq.n	800d13a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d106:	d018      	beq.n	800d13a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	4a1b      	ldr	r2, [pc, #108]	; (800d17c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d10e:	4293      	cmp	r3, r2
 800d110:	d013      	beq.n	800d13a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	4a1a      	ldr	r2, [pc, #104]	; (800d180 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d118:	4293      	cmp	r3, r2
 800d11a:	d00e      	beq.n	800d13a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	4a18      	ldr	r2, [pc, #96]	; (800d184 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d122:	4293      	cmp	r3, r2
 800d124:	d009      	beq.n	800d13a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	4a13      	ldr	r2, [pc, #76]	; (800d178 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800d12c:	4293      	cmp	r3, r2
 800d12e:	d004      	beq.n	800d13a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	4a14      	ldr	r2, [pc, #80]	; (800d188 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d136:	4293      	cmp	r3, r2
 800d138:	d10c      	bne.n	800d154 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d13a:	68bb      	ldr	r3, [r7, #8]
 800d13c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d140:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	689b      	ldr	r3, [r3, #8]
 800d146:	68ba      	ldr	r2, [r7, #8]
 800d148:	4313      	orrs	r3, r2
 800d14a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	68ba      	ldr	r2, [r7, #8]
 800d152:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2201      	movs	r2, #1
 800d158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2200      	movs	r2, #0
 800d160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d164:	2300      	movs	r3, #0
}
 800d166:	4618      	mov	r0, r3
 800d168:	3714      	adds	r7, #20
 800d16a:	46bd      	mov	sp, r7
 800d16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d170:	4770      	bx	lr
 800d172:	bf00      	nop
 800d174:	40012c00 	.word	0x40012c00
 800d178:	40013400 	.word	0x40013400
 800d17c:	40000400 	.word	0x40000400
 800d180:	40000800 	.word	0x40000800
 800d184:	40000c00 	.word	0x40000c00
 800d188:	40014000 	.word	0x40014000

0800d18c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d18c:	b480      	push	{r7}
 800d18e:	b083      	sub	sp, #12
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d194:	bf00      	nop
 800d196:	370c      	adds	r7, #12
 800d198:	46bd      	mov	sp, r7
 800d19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19e:	4770      	bx	lr

0800d1a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d1a0:	b480      	push	{r7}
 800d1a2:	b083      	sub	sp, #12
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d1a8:	bf00      	nop
 800d1aa:	370c      	adds	r7, #12
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b2:	4770      	bx	lr

0800d1b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d1b4:	b480      	push	{r7}
 800d1b6:	b083      	sub	sp, #12
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d1bc:	bf00      	nop
 800d1be:	370c      	adds	r7, #12
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c6:	4770      	bx	lr

0800d1c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b082      	sub	sp, #8
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d101      	bne.n	800d1da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d1d6:	2301      	movs	r3, #1
 800d1d8:	e040      	b.n	800d25c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d106      	bne.n	800d1f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f7f8 fe40 	bl	8005e70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2224      	movs	r2, #36	; 0x24
 800d1f4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	681a      	ldr	r2, [r3, #0]
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	f022 0201 	bic.w	r2, r2, #1
 800d204:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f000 fc0a 	bl	800da20 <UART_SetConfig>
 800d20c:	4603      	mov	r3, r0
 800d20e:	2b01      	cmp	r3, #1
 800d210:	d101      	bne.n	800d216 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800d212:	2301      	movs	r3, #1
 800d214:	e022      	b.n	800d25c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d002      	beq.n	800d224 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800d21e:	6878      	ldr	r0, [r7, #4]
 800d220:	f000 feb6 	bl	800df90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	685a      	ldr	r2, [r3, #4]
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d232:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	689a      	ldr	r2, [r3, #8]
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d242:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	681a      	ldr	r2, [r3, #0]
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	f042 0201 	orr.w	r2, r2, #1
 800d252:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f000 ff3d 	bl	800e0d4 <UART_CheckIdleState>
 800d25a:	4603      	mov	r3, r0
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	3708      	adds	r7, #8
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}

0800d264 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b08a      	sub	sp, #40	; 0x28
 800d268:	af00      	add	r7, sp, #0
 800d26a:	60f8      	str	r0, [r7, #12]
 800d26c:	60b9      	str	r1, [r7, #8]
 800d26e:	4613      	mov	r3, r2
 800d270:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d276:	2b20      	cmp	r3, #32
 800d278:	d142      	bne.n	800d300 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d002      	beq.n	800d286 <HAL_UART_Receive_IT+0x22>
 800d280:	88fb      	ldrh	r3, [r7, #6]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d101      	bne.n	800d28a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800d286:	2301      	movs	r3, #1
 800d288:	e03b      	b.n	800d302 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800d290:	2b01      	cmp	r3, #1
 800d292:	d101      	bne.n	800d298 <HAL_UART_Receive_IT+0x34>
 800d294:	2302      	movs	r3, #2
 800d296:	e034      	b.n	800d302 <HAL_UART_Receive_IT+0x9e>
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	2201      	movs	r2, #1
 800d29c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	4a18      	ldr	r2, [pc, #96]	; (800d30c <HAL_UART_Receive_IT+0xa8>)
 800d2ac:	4293      	cmp	r3, r2
 800d2ae:	d01f      	beq.n	800d2f0 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	685b      	ldr	r3, [r3, #4]
 800d2b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d018      	beq.n	800d2f0 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2c4:	697b      	ldr	r3, [r7, #20]
 800d2c6:	e853 3f00 	ldrex	r3, [r3]
 800d2ca:	613b      	str	r3, [r7, #16]
   return(result);
 800d2cc:	693b      	ldr	r3, [r7, #16]
 800d2ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d2d2:	627b      	str	r3, [r7, #36]	; 0x24
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	461a      	mov	r2, r3
 800d2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2dc:	623b      	str	r3, [r7, #32]
 800d2de:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2e0:	69f9      	ldr	r1, [r7, #28]
 800d2e2:	6a3a      	ldr	r2, [r7, #32]
 800d2e4:	e841 2300 	strex	r3, r2, [r1]
 800d2e8:	61bb      	str	r3, [r7, #24]
   return(result);
 800d2ea:	69bb      	ldr	r3, [r7, #24]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d1e6      	bne.n	800d2be <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d2f0:	88fb      	ldrh	r3, [r7, #6]
 800d2f2:	461a      	mov	r2, r3
 800d2f4:	68b9      	ldr	r1, [r7, #8]
 800d2f6:	68f8      	ldr	r0, [r7, #12]
 800d2f8:	f000 fffa 	bl	800e2f0 <UART_Start_Receive_IT>
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	e000      	b.n	800d302 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800d300:	2302      	movs	r3, #2
  }
}
 800d302:	4618      	mov	r0, r3
 800d304:	3728      	adds	r7, #40	; 0x28
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}
 800d30a:	bf00      	nop
 800d30c:	40008000 	.word	0x40008000

0800d310 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b08a      	sub	sp, #40	; 0x28
 800d314:	af00      	add	r7, sp, #0
 800d316:	60f8      	str	r0, [r7, #12]
 800d318:	60b9      	str	r1, [r7, #8]
 800d31a:	4613      	mov	r3, r2
 800d31c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d322:	2b20      	cmp	r3, #32
 800d324:	d178      	bne.n	800d418 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800d326:	68bb      	ldr	r3, [r7, #8]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d002      	beq.n	800d332 <HAL_UART_Transmit_DMA+0x22>
 800d32c:	88fb      	ldrh	r3, [r7, #6]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d101      	bne.n	800d336 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800d332:	2301      	movs	r3, #1
 800d334:	e071      	b.n	800d41a <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800d33c:	2b01      	cmp	r3, #1
 800d33e:	d101      	bne.n	800d344 <HAL_UART_Transmit_DMA+0x34>
 800d340:	2302      	movs	r3, #2
 800d342:	e06a      	b.n	800d41a <HAL_UART_Transmit_DMA+0x10a>
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	2201      	movs	r2, #1
 800d348:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	68ba      	ldr	r2, [r7, #8]
 800d350:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	88fa      	ldrh	r2, [r7, #6]
 800d356:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	88fa      	ldrh	r2, [r7, #6]
 800d35e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	2200      	movs	r2, #0
 800d366:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	2221      	movs	r2, #33	; 0x21
 800d36e:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d374:	2b00      	cmp	r3, #0
 800d376:	d02b      	beq.n	800d3d0 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d37c:	4a29      	ldr	r2, [pc, #164]	; (800d424 <HAL_UART_Transmit_DMA+0x114>)
 800d37e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d384:	4a28      	ldr	r2, [pc, #160]	; (800d428 <HAL_UART_Transmit_DMA+0x118>)
 800d386:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d38c:	4a27      	ldr	r2, [pc, #156]	; (800d42c <HAL_UART_Transmit_DMA+0x11c>)
 800d38e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d394:	2200      	movs	r2, #0
 800d396:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3a0:	4619      	mov	r1, r3
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	3328      	adds	r3, #40	; 0x28
 800d3a8:	461a      	mov	r2, r3
 800d3aa:	88fb      	ldrh	r3, [r7, #6]
 800d3ac:	f7f9 ff94 	bl	80072d8 <HAL_DMA_Start_IT>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d00c      	beq.n	800d3d0 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	2210      	movs	r2, #16
 800d3ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	2220      	movs	r2, #32
 800d3ca:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	e024      	b.n	800d41a <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	2240      	movs	r2, #64	; 0x40
 800d3d6:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	2200      	movs	r2, #0
 800d3dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	3308      	adds	r3, #8
 800d3e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3e8:	697b      	ldr	r3, [r7, #20]
 800d3ea:	e853 3f00 	ldrex	r3, [r3]
 800d3ee:	613b      	str	r3, [r7, #16]
   return(result);
 800d3f0:	693b      	ldr	r3, [r7, #16]
 800d3f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3f6:	627b      	str	r3, [r7, #36]	; 0x24
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	3308      	adds	r3, #8
 800d3fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d400:	623a      	str	r2, [r7, #32]
 800d402:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d404:	69f9      	ldr	r1, [r7, #28]
 800d406:	6a3a      	ldr	r2, [r7, #32]
 800d408:	e841 2300 	strex	r3, r2, [r1]
 800d40c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d40e:	69bb      	ldr	r3, [r7, #24]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d1e5      	bne.n	800d3e0 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 800d414:	2300      	movs	r3, #0
 800d416:	e000      	b.n	800d41a <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800d418:	2302      	movs	r3, #2
  }
}
 800d41a:	4618      	mov	r0, r3
 800d41c:	3728      	adds	r7, #40	; 0x28
 800d41e:	46bd      	mov	sp, r7
 800d420:	bd80      	pop	{r7, pc}
 800d422:	bf00      	nop
 800d424:	0800e597 	.word	0x0800e597
 800d428:	0800e631 	.word	0x0800e631
 800d42c:	0800e64d 	.word	0x0800e64d

0800d430 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b0ba      	sub	sp, #232	; 0xe8
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	69db      	ldr	r3, [r3, #28]
 800d43e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	689b      	ldr	r3, [r3, #8]
 800d452:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d456:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d45a:	f640 030f 	movw	r3, #2063	; 0x80f
 800d45e:	4013      	ands	r3, r2
 800d460:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d464:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d115      	bne.n	800d498 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800d46c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d470:	f003 0320 	and.w	r3, r3, #32
 800d474:	2b00      	cmp	r3, #0
 800d476:	d00f      	beq.n	800d498 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800d478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d47c:	f003 0320 	and.w	r3, r3, #32
 800d480:	2b00      	cmp	r3, #0
 800d482:	d009      	beq.n	800d498 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d488:	2b00      	cmp	r3, #0
 800d48a:	f000 82a6 	beq.w	800d9da <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d492:	6878      	ldr	r0, [r7, #4]
 800d494:	4798      	blx	r3
      }
      return;
 800d496:	e2a0      	b.n	800d9da <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800d498:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	f000 8117 	beq.w	800d6d0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800d4a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d4a6:	f003 0301 	and.w	r3, r3, #1
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d106      	bne.n	800d4bc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800d4ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d4b2:	4b85      	ldr	r3, [pc, #532]	; (800d6c8 <HAL_UART_IRQHandler+0x298>)
 800d4b4:	4013      	ands	r3, r2
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	f000 810a 	beq.w	800d6d0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d4bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4c0:	f003 0301 	and.w	r3, r3, #1
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d011      	beq.n	800d4ec <HAL_UART_IRQHandler+0xbc>
 800d4c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d4cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d00b      	beq.n	800d4ec <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	2201      	movs	r2, #1
 800d4da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d4e2:	f043 0201 	orr.w	r2, r3, #1
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d4ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4f0:	f003 0302 	and.w	r3, r3, #2
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d011      	beq.n	800d51c <HAL_UART_IRQHandler+0xec>
 800d4f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d4fc:	f003 0301 	and.w	r3, r3, #1
 800d500:	2b00      	cmp	r3, #0
 800d502:	d00b      	beq.n	800d51c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	2202      	movs	r2, #2
 800d50a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d512:	f043 0204 	orr.w	r2, r3, #4
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d51c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d520:	f003 0304 	and.w	r3, r3, #4
 800d524:	2b00      	cmp	r3, #0
 800d526:	d011      	beq.n	800d54c <HAL_UART_IRQHandler+0x11c>
 800d528:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d52c:	f003 0301 	and.w	r3, r3, #1
 800d530:	2b00      	cmp	r3, #0
 800d532:	d00b      	beq.n	800d54c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	2204      	movs	r2, #4
 800d53a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d542:	f043 0202 	orr.w	r2, r3, #2
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d54c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d550:	f003 0308 	and.w	r3, r3, #8
 800d554:	2b00      	cmp	r3, #0
 800d556:	d017      	beq.n	800d588 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800d558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d55c:	f003 0320 	and.w	r3, r3, #32
 800d560:	2b00      	cmp	r3, #0
 800d562:	d105      	bne.n	800d570 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800d564:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d568:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d00b      	beq.n	800d588 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	2208      	movs	r2, #8
 800d576:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d57e:	f043 0208 	orr.w	r2, r3, #8
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d58c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d590:	2b00      	cmp	r3, #0
 800d592:	d012      	beq.n	800d5ba <HAL_UART_IRQHandler+0x18a>
 800d594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d598:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d00c      	beq.n	800d5ba <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d5a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5b0:	f043 0220 	orr.w	r2, r3, #32
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	f000 820c 	beq.w	800d9de <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800d5c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d5ca:	f003 0320 	and.w	r3, r3, #32
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d00d      	beq.n	800d5ee <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800d5d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d5d6:	f003 0320 	and.w	r3, r3, #32
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d007      	beq.n	800d5ee <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d003      	beq.n	800d5ee <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	689b      	ldr	r3, [r3, #8]
 800d5fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d602:	2b40      	cmp	r3, #64	; 0x40
 800d604:	d005      	beq.n	800d612 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d606:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d60a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d04f      	beq.n	800d6b2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d612:	6878      	ldr	r0, [r7, #4]
 800d614:	f000 ff5c 	bl	800e4d0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	689b      	ldr	r3, [r3, #8]
 800d61e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d622:	2b40      	cmp	r3, #64	; 0x40
 800d624:	d141      	bne.n	800d6aa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	3308      	adds	r3, #8
 800d62c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d630:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d634:	e853 3f00 	ldrex	r3, [r3]
 800d638:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d63c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d640:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d644:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	3308      	adds	r3, #8
 800d64e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d652:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d656:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d65a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d65e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d662:	e841 2300 	strex	r3, r2, [r1]
 800d666:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d66a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d1d9      	bne.n	800d626 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d676:	2b00      	cmp	r3, #0
 800d678:	d013      	beq.n	800d6a2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d67e:	4a13      	ldr	r2, [pc, #76]	; (800d6cc <HAL_UART_IRQHandler+0x29c>)
 800d680:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d686:	4618      	mov	r0, r3
 800d688:	f7f9 fec4 	bl	8007414 <HAL_DMA_Abort_IT>
 800d68c:	4603      	mov	r3, r0
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d017      	beq.n	800d6c2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d698:	687a      	ldr	r2, [r7, #4]
 800d69a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800d69c:	4610      	mov	r0, r2
 800d69e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d6a0:	e00f      	b.n	800d6c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d6a2:	6878      	ldr	r0, [r7, #4]
 800d6a4:	f7f7 fc66 	bl	8004f74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d6a8:	e00b      	b.n	800d6c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d6aa:	6878      	ldr	r0, [r7, #4]
 800d6ac:	f7f7 fc62 	bl	8004f74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d6b0:	e007      	b.n	800d6c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f7f7 fc5e 	bl	8004f74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800d6c0:	e18d      	b.n	800d9de <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d6c2:	bf00      	nop
    return;
 800d6c4:	e18b      	b.n	800d9de <HAL_UART_IRQHandler+0x5ae>
 800d6c6:	bf00      	nop
 800d6c8:	04000120 	.word	0x04000120
 800d6cc:	0800e6c9 	.word	0x0800e6c9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d6d4:	2b01      	cmp	r3, #1
 800d6d6:	f040 8146 	bne.w	800d966 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d6da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d6de:	f003 0310 	and.w	r3, r3, #16
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	f000 813f 	beq.w	800d966 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d6e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d6ec:	f003 0310 	and.w	r3, r3, #16
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	f000 8138 	beq.w	800d966 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	2210      	movs	r2, #16
 800d6fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	689b      	ldr	r3, [r3, #8]
 800d704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d708:	2b40      	cmp	r3, #64	; 0x40
 800d70a:	f040 80b4 	bne.w	800d876 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	685b      	ldr	r3, [r3, #4]
 800d716:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d71a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d71e:	2b00      	cmp	r3, #0
 800d720:	f000 815f 	beq.w	800d9e2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d72a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d72e:	429a      	cmp	r2, r3
 800d730:	f080 8157 	bcs.w	800d9e2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d73a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	f003 0320 	and.w	r3, r3, #32
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	f040 8085 	bne.w	800d85a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d758:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d75c:	e853 3f00 	ldrex	r3, [r3]
 800d760:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d764:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d768:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d76c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	461a      	mov	r2, r3
 800d776:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d77a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d77e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d782:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d786:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d78a:	e841 2300 	strex	r3, r2, [r1]
 800d78e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d792:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d796:	2b00      	cmp	r3, #0
 800d798:	d1da      	bne.n	800d750 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	3308      	adds	r3, #8
 800d7a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d7a4:	e853 3f00 	ldrex	r3, [r3]
 800d7a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d7aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d7ac:	f023 0301 	bic.w	r3, r3, #1
 800d7b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	3308      	adds	r3, #8
 800d7ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d7be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d7c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d7c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d7ca:	e841 2300 	strex	r3, r2, [r1]
 800d7ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d7d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d1e1      	bne.n	800d79a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	3308      	adds	r3, #8
 800d7dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d7e0:	e853 3f00 	ldrex	r3, [r3]
 800d7e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d7e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d7e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d7ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	3308      	adds	r3, #8
 800d7f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d7fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d7fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d800:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d802:	e841 2300 	strex	r3, r2, [r1]
 800d806:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d808:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d1e3      	bne.n	800d7d6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2220      	movs	r2, #32
 800d812:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2200      	movs	r2, #0
 800d818:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d822:	e853 3f00 	ldrex	r3, [r3]
 800d826:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d828:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d82a:	f023 0310 	bic.w	r3, r3, #16
 800d82e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	461a      	mov	r2, r3
 800d838:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d83c:	65bb      	str	r3, [r7, #88]	; 0x58
 800d83e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d840:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d842:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d844:	e841 2300 	strex	r3, r2, [r1]
 800d848:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d84a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d1e4      	bne.n	800d81a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d854:	4618      	mov	r0, r3
 800d856:	f7f9 fd9f 	bl	8007398 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d866:	b29b      	uxth	r3, r3
 800d868:	1ad3      	subs	r3, r2, r3
 800d86a:	b29b      	uxth	r3, r3
 800d86c:	4619      	mov	r1, r3
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	f000 f8ca 	bl	800da08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d874:	e0b5      	b.n	800d9e2 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d882:	b29b      	uxth	r3, r3
 800d884:	1ad3      	subs	r3, r2, r3
 800d886:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d890:	b29b      	uxth	r3, r3
 800d892:	2b00      	cmp	r3, #0
 800d894:	f000 80a7 	beq.w	800d9e6 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800d898:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	f000 80a2 	beq.w	800d9e6 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8aa:	e853 3f00 	ldrex	r3, [r3]
 800d8ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d8b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d8b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	461a      	mov	r2, r3
 800d8c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d8c4:	647b      	str	r3, [r7, #68]	; 0x44
 800d8c6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d8ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d8cc:	e841 2300 	strex	r3, r2, [r1]
 800d8d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d8d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d1e4      	bne.n	800d8a2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	3308      	adds	r3, #8
 800d8de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e2:	e853 3f00 	ldrex	r3, [r3]
 800d8e6:	623b      	str	r3, [r7, #32]
   return(result);
 800d8e8:	6a3b      	ldr	r3, [r7, #32]
 800d8ea:	f023 0301 	bic.w	r3, r3, #1
 800d8ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	3308      	adds	r3, #8
 800d8f8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d8fc:	633a      	str	r2, [r7, #48]	; 0x30
 800d8fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d900:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d904:	e841 2300 	strex	r3, r2, [r1]
 800d908:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d1e3      	bne.n	800d8d8 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	2220      	movs	r2, #32
 800d914:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2200      	movs	r2, #0
 800d91a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2200      	movs	r2, #0
 800d920:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d928:	693b      	ldr	r3, [r7, #16]
 800d92a:	e853 3f00 	ldrex	r3, [r3]
 800d92e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	f023 0310 	bic.w	r3, r3, #16
 800d936:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	461a      	mov	r2, r3
 800d940:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d944:	61fb      	str	r3, [r7, #28]
 800d946:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d948:	69b9      	ldr	r1, [r7, #24]
 800d94a:	69fa      	ldr	r2, [r7, #28]
 800d94c:	e841 2300 	strex	r3, r2, [r1]
 800d950:	617b      	str	r3, [r7, #20]
   return(result);
 800d952:	697b      	ldr	r3, [r7, #20]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d1e4      	bne.n	800d922 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d958:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d95c:	4619      	mov	r1, r3
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f000 f852 	bl	800da08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d964:	e03f      	b.n	800d9e6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d96a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d00e      	beq.n	800d990 <HAL_UART_IRQHandler+0x560>
 800d972:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d008      	beq.n	800d990 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d986:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d988:	6878      	ldr	r0, [r7, #4]
 800d98a:	f001 f83d 	bl	800ea08 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d98e:	e02d      	b.n	800d9ec <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800d990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d00e      	beq.n	800d9ba <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800d99c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d9a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d008      	beq.n	800d9ba <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d01c      	beq.n	800d9ea <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9b4:	6878      	ldr	r0, [r7, #4]
 800d9b6:	4798      	blx	r3
    }
    return;
 800d9b8:	e017      	b.n	800d9ea <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d9ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d012      	beq.n	800d9ec <HAL_UART_IRQHandler+0x5bc>
 800d9c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d9ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d00c      	beq.n	800d9ec <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f000 fe8e 	bl	800e6f4 <UART_EndTransmit_IT>
    return;
 800d9d8:	e008      	b.n	800d9ec <HAL_UART_IRQHandler+0x5bc>
      return;
 800d9da:	bf00      	nop
 800d9dc:	e006      	b.n	800d9ec <HAL_UART_IRQHandler+0x5bc>
    return;
 800d9de:	bf00      	nop
 800d9e0:	e004      	b.n	800d9ec <HAL_UART_IRQHandler+0x5bc>
      return;
 800d9e2:	bf00      	nop
 800d9e4:	e002      	b.n	800d9ec <HAL_UART_IRQHandler+0x5bc>
      return;
 800d9e6:	bf00      	nop
 800d9e8:	e000      	b.n	800d9ec <HAL_UART_IRQHandler+0x5bc>
    return;
 800d9ea:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800d9ec:	37e8      	adds	r7, #232	; 0xe8
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	bd80      	pop	{r7, pc}
 800d9f2:	bf00      	nop

0800d9f4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d9f4:	b480      	push	{r7}
 800d9f6:	b083      	sub	sp, #12
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d9fc:	bf00      	nop
 800d9fe:	370c      	adds	r7, #12
 800da00:	46bd      	mov	sp, r7
 800da02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da06:	4770      	bx	lr

0800da08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800da08:	b480      	push	{r7}
 800da0a:	b083      	sub	sp, #12
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
 800da10:	460b      	mov	r3, r1
 800da12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800da14:	bf00      	nop
 800da16:	370c      	adds	r7, #12
 800da18:	46bd      	mov	sp, r7
 800da1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1e:	4770      	bx	lr

0800da20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800da20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800da24:	b08a      	sub	sp, #40	; 0x28
 800da26:	af00      	add	r7, sp, #0
 800da28:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800da2a:	2300      	movs	r3, #0
 800da2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	689a      	ldr	r2, [r3, #8]
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	691b      	ldr	r3, [r3, #16]
 800da38:	431a      	orrs	r2, r3
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	695b      	ldr	r3, [r3, #20]
 800da3e:	431a      	orrs	r2, r3
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	69db      	ldr	r3, [r3, #28]
 800da44:	4313      	orrs	r3, r2
 800da46:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	681a      	ldr	r2, [r3, #0]
 800da4e:	4ba4      	ldr	r3, [pc, #656]	; (800dce0 <UART_SetConfig+0x2c0>)
 800da50:	4013      	ands	r3, r2
 800da52:	68fa      	ldr	r2, [r7, #12]
 800da54:	6812      	ldr	r2, [r2, #0]
 800da56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800da58:	430b      	orrs	r3, r1
 800da5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	685b      	ldr	r3, [r3, #4]
 800da62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	68da      	ldr	r2, [r3, #12]
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	430a      	orrs	r2, r1
 800da70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	699b      	ldr	r3, [r3, #24]
 800da76:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	4a99      	ldr	r2, [pc, #612]	; (800dce4 <UART_SetConfig+0x2c4>)
 800da7e:	4293      	cmp	r3, r2
 800da80:	d004      	beq.n	800da8c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	6a1b      	ldr	r3, [r3, #32]
 800da86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da88:	4313      	orrs	r3, r2
 800da8a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	689b      	ldr	r3, [r3, #8]
 800da92:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da9c:	430a      	orrs	r2, r1
 800da9e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	4a90      	ldr	r2, [pc, #576]	; (800dce8 <UART_SetConfig+0x2c8>)
 800daa6:	4293      	cmp	r3, r2
 800daa8:	d126      	bne.n	800daf8 <UART_SetConfig+0xd8>
 800daaa:	4b90      	ldr	r3, [pc, #576]	; (800dcec <UART_SetConfig+0x2cc>)
 800daac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dab0:	f003 0303 	and.w	r3, r3, #3
 800dab4:	2b03      	cmp	r3, #3
 800dab6:	d81b      	bhi.n	800daf0 <UART_SetConfig+0xd0>
 800dab8:	a201      	add	r2, pc, #4	; (adr r2, 800dac0 <UART_SetConfig+0xa0>)
 800daba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dabe:	bf00      	nop
 800dac0:	0800dad1 	.word	0x0800dad1
 800dac4:	0800dae1 	.word	0x0800dae1
 800dac8:	0800dad9 	.word	0x0800dad9
 800dacc:	0800dae9 	.word	0x0800dae9
 800dad0:	2301      	movs	r3, #1
 800dad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dad6:	e116      	b.n	800dd06 <UART_SetConfig+0x2e6>
 800dad8:	2302      	movs	r3, #2
 800dada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dade:	e112      	b.n	800dd06 <UART_SetConfig+0x2e6>
 800dae0:	2304      	movs	r3, #4
 800dae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dae6:	e10e      	b.n	800dd06 <UART_SetConfig+0x2e6>
 800dae8:	2308      	movs	r3, #8
 800daea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800daee:	e10a      	b.n	800dd06 <UART_SetConfig+0x2e6>
 800daf0:	2310      	movs	r3, #16
 800daf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800daf6:	e106      	b.n	800dd06 <UART_SetConfig+0x2e6>
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	4a7c      	ldr	r2, [pc, #496]	; (800dcf0 <UART_SetConfig+0x2d0>)
 800dafe:	4293      	cmp	r3, r2
 800db00:	d138      	bne.n	800db74 <UART_SetConfig+0x154>
 800db02:	4b7a      	ldr	r3, [pc, #488]	; (800dcec <UART_SetConfig+0x2cc>)
 800db04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db08:	f003 030c 	and.w	r3, r3, #12
 800db0c:	2b0c      	cmp	r3, #12
 800db0e:	d82d      	bhi.n	800db6c <UART_SetConfig+0x14c>
 800db10:	a201      	add	r2, pc, #4	; (adr r2, 800db18 <UART_SetConfig+0xf8>)
 800db12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db16:	bf00      	nop
 800db18:	0800db4d 	.word	0x0800db4d
 800db1c:	0800db6d 	.word	0x0800db6d
 800db20:	0800db6d 	.word	0x0800db6d
 800db24:	0800db6d 	.word	0x0800db6d
 800db28:	0800db5d 	.word	0x0800db5d
 800db2c:	0800db6d 	.word	0x0800db6d
 800db30:	0800db6d 	.word	0x0800db6d
 800db34:	0800db6d 	.word	0x0800db6d
 800db38:	0800db55 	.word	0x0800db55
 800db3c:	0800db6d 	.word	0x0800db6d
 800db40:	0800db6d 	.word	0x0800db6d
 800db44:	0800db6d 	.word	0x0800db6d
 800db48:	0800db65 	.word	0x0800db65
 800db4c:	2300      	movs	r3, #0
 800db4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800db52:	e0d8      	b.n	800dd06 <UART_SetConfig+0x2e6>
 800db54:	2302      	movs	r3, #2
 800db56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800db5a:	e0d4      	b.n	800dd06 <UART_SetConfig+0x2e6>
 800db5c:	2304      	movs	r3, #4
 800db5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800db62:	e0d0      	b.n	800dd06 <UART_SetConfig+0x2e6>
 800db64:	2308      	movs	r3, #8
 800db66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800db6a:	e0cc      	b.n	800dd06 <UART_SetConfig+0x2e6>
 800db6c:	2310      	movs	r3, #16
 800db6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800db72:	e0c8      	b.n	800dd06 <UART_SetConfig+0x2e6>
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	4a5e      	ldr	r2, [pc, #376]	; (800dcf4 <UART_SetConfig+0x2d4>)
 800db7a:	4293      	cmp	r3, r2
 800db7c:	d125      	bne.n	800dbca <UART_SetConfig+0x1aa>
 800db7e:	4b5b      	ldr	r3, [pc, #364]	; (800dcec <UART_SetConfig+0x2cc>)
 800db80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db84:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800db88:	2b30      	cmp	r3, #48	; 0x30
 800db8a:	d016      	beq.n	800dbba <UART_SetConfig+0x19a>
 800db8c:	2b30      	cmp	r3, #48	; 0x30
 800db8e:	d818      	bhi.n	800dbc2 <UART_SetConfig+0x1a2>
 800db90:	2b20      	cmp	r3, #32
 800db92:	d00a      	beq.n	800dbaa <UART_SetConfig+0x18a>
 800db94:	2b20      	cmp	r3, #32
 800db96:	d814      	bhi.n	800dbc2 <UART_SetConfig+0x1a2>
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d002      	beq.n	800dba2 <UART_SetConfig+0x182>
 800db9c:	2b10      	cmp	r3, #16
 800db9e:	d008      	beq.n	800dbb2 <UART_SetConfig+0x192>
 800dba0:	e00f      	b.n	800dbc2 <UART_SetConfig+0x1a2>
 800dba2:	2300      	movs	r3, #0
 800dba4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dba8:	e0ad      	b.n	800dd06 <UART_SetConfig+0x2e6>
 800dbaa:	2302      	movs	r3, #2
 800dbac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dbb0:	e0a9      	b.n	800dd06 <UART_SetConfig+0x2e6>
 800dbb2:	2304      	movs	r3, #4
 800dbb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dbb8:	e0a5      	b.n	800dd06 <UART_SetConfig+0x2e6>
 800dbba:	2308      	movs	r3, #8
 800dbbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dbc0:	e0a1      	b.n	800dd06 <UART_SetConfig+0x2e6>
 800dbc2:	2310      	movs	r3, #16
 800dbc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dbc8:	e09d      	b.n	800dd06 <UART_SetConfig+0x2e6>
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	4a4a      	ldr	r2, [pc, #296]	; (800dcf8 <UART_SetConfig+0x2d8>)
 800dbd0:	4293      	cmp	r3, r2
 800dbd2:	d125      	bne.n	800dc20 <UART_SetConfig+0x200>
 800dbd4:	4b45      	ldr	r3, [pc, #276]	; (800dcec <UART_SetConfig+0x2cc>)
 800dbd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dbda:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800dbde:	2bc0      	cmp	r3, #192	; 0xc0
 800dbe0:	d016      	beq.n	800dc10 <UART_SetConfig+0x1f0>
 800dbe2:	2bc0      	cmp	r3, #192	; 0xc0
 800dbe4:	d818      	bhi.n	800dc18 <UART_SetConfig+0x1f8>
 800dbe6:	2b80      	cmp	r3, #128	; 0x80
 800dbe8:	d00a      	beq.n	800dc00 <UART_SetConfig+0x1e0>
 800dbea:	2b80      	cmp	r3, #128	; 0x80
 800dbec:	d814      	bhi.n	800dc18 <UART_SetConfig+0x1f8>
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d002      	beq.n	800dbf8 <UART_SetConfig+0x1d8>
 800dbf2:	2b40      	cmp	r3, #64	; 0x40
 800dbf4:	d008      	beq.n	800dc08 <UART_SetConfig+0x1e8>
 800dbf6:	e00f      	b.n	800dc18 <UART_SetConfig+0x1f8>
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dbfe:	e082      	b.n	800dd06 <UART_SetConfig+0x2e6>
 800dc00:	2302      	movs	r3, #2
 800dc02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dc06:	e07e      	b.n	800dd06 <UART_SetConfig+0x2e6>
 800dc08:	2304      	movs	r3, #4
 800dc0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dc0e:	e07a      	b.n	800dd06 <UART_SetConfig+0x2e6>
 800dc10:	2308      	movs	r3, #8
 800dc12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dc16:	e076      	b.n	800dd06 <UART_SetConfig+0x2e6>
 800dc18:	2310      	movs	r3, #16
 800dc1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dc1e:	e072      	b.n	800dd06 <UART_SetConfig+0x2e6>
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	4a35      	ldr	r2, [pc, #212]	; (800dcfc <UART_SetConfig+0x2dc>)
 800dc26:	4293      	cmp	r3, r2
 800dc28:	d12a      	bne.n	800dc80 <UART_SetConfig+0x260>
 800dc2a:	4b30      	ldr	r3, [pc, #192]	; (800dcec <UART_SetConfig+0x2cc>)
 800dc2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dc34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dc38:	d01a      	beq.n	800dc70 <UART_SetConfig+0x250>
 800dc3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dc3e:	d81b      	bhi.n	800dc78 <UART_SetConfig+0x258>
 800dc40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc44:	d00c      	beq.n	800dc60 <UART_SetConfig+0x240>
 800dc46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc4a:	d815      	bhi.n	800dc78 <UART_SetConfig+0x258>
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d003      	beq.n	800dc58 <UART_SetConfig+0x238>
 800dc50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc54:	d008      	beq.n	800dc68 <UART_SetConfig+0x248>
 800dc56:	e00f      	b.n	800dc78 <UART_SetConfig+0x258>
 800dc58:	2300      	movs	r3, #0
 800dc5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dc5e:	e052      	b.n	800dd06 <UART_SetConfig+0x2e6>
 800dc60:	2302      	movs	r3, #2
 800dc62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dc66:	e04e      	b.n	800dd06 <UART_SetConfig+0x2e6>
 800dc68:	2304      	movs	r3, #4
 800dc6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dc6e:	e04a      	b.n	800dd06 <UART_SetConfig+0x2e6>
 800dc70:	2308      	movs	r3, #8
 800dc72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dc76:	e046      	b.n	800dd06 <UART_SetConfig+0x2e6>
 800dc78:	2310      	movs	r3, #16
 800dc7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dc7e:	e042      	b.n	800dd06 <UART_SetConfig+0x2e6>
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	4a17      	ldr	r2, [pc, #92]	; (800dce4 <UART_SetConfig+0x2c4>)
 800dc86:	4293      	cmp	r3, r2
 800dc88:	d13a      	bne.n	800dd00 <UART_SetConfig+0x2e0>
 800dc8a:	4b18      	ldr	r3, [pc, #96]	; (800dcec <UART_SetConfig+0x2cc>)
 800dc8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800dc94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800dc98:	d01a      	beq.n	800dcd0 <UART_SetConfig+0x2b0>
 800dc9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800dc9e:	d81b      	bhi.n	800dcd8 <UART_SetConfig+0x2b8>
 800dca0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dca4:	d00c      	beq.n	800dcc0 <UART_SetConfig+0x2a0>
 800dca6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dcaa:	d815      	bhi.n	800dcd8 <UART_SetConfig+0x2b8>
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d003      	beq.n	800dcb8 <UART_SetConfig+0x298>
 800dcb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dcb4:	d008      	beq.n	800dcc8 <UART_SetConfig+0x2a8>
 800dcb6:	e00f      	b.n	800dcd8 <UART_SetConfig+0x2b8>
 800dcb8:	2300      	movs	r3, #0
 800dcba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dcbe:	e022      	b.n	800dd06 <UART_SetConfig+0x2e6>
 800dcc0:	2302      	movs	r3, #2
 800dcc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dcc6:	e01e      	b.n	800dd06 <UART_SetConfig+0x2e6>
 800dcc8:	2304      	movs	r3, #4
 800dcca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dcce:	e01a      	b.n	800dd06 <UART_SetConfig+0x2e6>
 800dcd0:	2308      	movs	r3, #8
 800dcd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dcd6:	e016      	b.n	800dd06 <UART_SetConfig+0x2e6>
 800dcd8:	2310      	movs	r3, #16
 800dcda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dcde:	e012      	b.n	800dd06 <UART_SetConfig+0x2e6>
 800dce0:	efff69f3 	.word	0xefff69f3
 800dce4:	40008000 	.word	0x40008000
 800dce8:	40013800 	.word	0x40013800
 800dcec:	40021000 	.word	0x40021000
 800dcf0:	40004400 	.word	0x40004400
 800dcf4:	40004800 	.word	0x40004800
 800dcf8:	40004c00 	.word	0x40004c00
 800dcfc:	40005000 	.word	0x40005000
 800dd00:	2310      	movs	r3, #16
 800dd02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	4a9f      	ldr	r2, [pc, #636]	; (800df88 <UART_SetConfig+0x568>)
 800dd0c:	4293      	cmp	r3, r2
 800dd0e:	d17a      	bne.n	800de06 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dd10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dd14:	2b08      	cmp	r3, #8
 800dd16:	d824      	bhi.n	800dd62 <UART_SetConfig+0x342>
 800dd18:	a201      	add	r2, pc, #4	; (adr r2, 800dd20 <UART_SetConfig+0x300>)
 800dd1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd1e:	bf00      	nop
 800dd20:	0800dd45 	.word	0x0800dd45
 800dd24:	0800dd63 	.word	0x0800dd63
 800dd28:	0800dd4d 	.word	0x0800dd4d
 800dd2c:	0800dd63 	.word	0x0800dd63
 800dd30:	0800dd53 	.word	0x0800dd53
 800dd34:	0800dd63 	.word	0x0800dd63
 800dd38:	0800dd63 	.word	0x0800dd63
 800dd3c:	0800dd63 	.word	0x0800dd63
 800dd40:	0800dd5b 	.word	0x0800dd5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dd44:	f7fc f8f2 	bl	8009f2c <HAL_RCC_GetPCLK1Freq>
 800dd48:	61f8      	str	r0, [r7, #28]
        break;
 800dd4a:	e010      	b.n	800dd6e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800dd4c:	4b8f      	ldr	r3, [pc, #572]	; (800df8c <UART_SetConfig+0x56c>)
 800dd4e:	61fb      	str	r3, [r7, #28]
        break;
 800dd50:	e00d      	b.n	800dd6e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dd52:	f7fc f853 	bl	8009dfc <HAL_RCC_GetSysClockFreq>
 800dd56:	61f8      	str	r0, [r7, #28]
        break;
 800dd58:	e009      	b.n	800dd6e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dd5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dd5e:	61fb      	str	r3, [r7, #28]
        break;
 800dd60:	e005      	b.n	800dd6e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800dd62:	2300      	movs	r3, #0
 800dd64:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800dd66:	2301      	movs	r3, #1
 800dd68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800dd6c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800dd6e:	69fb      	ldr	r3, [r7, #28]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	f000 80fb 	beq.w	800df6c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	685a      	ldr	r2, [r3, #4]
 800dd7a:	4613      	mov	r3, r2
 800dd7c:	005b      	lsls	r3, r3, #1
 800dd7e:	4413      	add	r3, r2
 800dd80:	69fa      	ldr	r2, [r7, #28]
 800dd82:	429a      	cmp	r2, r3
 800dd84:	d305      	bcc.n	800dd92 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	685b      	ldr	r3, [r3, #4]
 800dd8a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800dd8c:	69fa      	ldr	r2, [r7, #28]
 800dd8e:	429a      	cmp	r2, r3
 800dd90:	d903      	bls.n	800dd9a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800dd92:	2301      	movs	r3, #1
 800dd94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800dd98:	e0e8      	b.n	800df6c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800dd9a:	69fb      	ldr	r3, [r7, #28]
 800dd9c:	2200      	movs	r2, #0
 800dd9e:	461c      	mov	r4, r3
 800dda0:	4615      	mov	r5, r2
 800dda2:	f04f 0200 	mov.w	r2, #0
 800dda6:	f04f 0300 	mov.w	r3, #0
 800ddaa:	022b      	lsls	r3, r5, #8
 800ddac:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800ddb0:	0222      	lsls	r2, r4, #8
 800ddb2:	68f9      	ldr	r1, [r7, #12]
 800ddb4:	6849      	ldr	r1, [r1, #4]
 800ddb6:	0849      	lsrs	r1, r1, #1
 800ddb8:	2000      	movs	r0, #0
 800ddba:	4688      	mov	r8, r1
 800ddbc:	4681      	mov	r9, r0
 800ddbe:	eb12 0a08 	adds.w	sl, r2, r8
 800ddc2:	eb43 0b09 	adc.w	fp, r3, r9
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	685b      	ldr	r3, [r3, #4]
 800ddca:	2200      	movs	r2, #0
 800ddcc:	603b      	str	r3, [r7, #0]
 800ddce:	607a      	str	r2, [r7, #4]
 800ddd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ddd4:	4650      	mov	r0, sl
 800ddd6:	4659      	mov	r1, fp
 800ddd8:	f7f2 ffa6 	bl	8000d28 <__aeabi_uldivmod>
 800dddc:	4602      	mov	r2, r0
 800ddde:	460b      	mov	r3, r1
 800dde0:	4613      	mov	r3, r2
 800dde2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800dde4:	69bb      	ldr	r3, [r7, #24]
 800dde6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ddea:	d308      	bcc.n	800ddfe <UART_SetConfig+0x3de>
 800ddec:	69bb      	ldr	r3, [r7, #24]
 800ddee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ddf2:	d204      	bcs.n	800ddfe <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	69ba      	ldr	r2, [r7, #24]
 800ddfa:	60da      	str	r2, [r3, #12]
 800ddfc:	e0b6      	b.n	800df6c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800ddfe:	2301      	movs	r3, #1
 800de00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800de04:	e0b2      	b.n	800df6c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	69db      	ldr	r3, [r3, #28]
 800de0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de0e:	d15e      	bne.n	800dece <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800de10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800de14:	2b08      	cmp	r3, #8
 800de16:	d828      	bhi.n	800de6a <UART_SetConfig+0x44a>
 800de18:	a201      	add	r2, pc, #4	; (adr r2, 800de20 <UART_SetConfig+0x400>)
 800de1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de1e:	bf00      	nop
 800de20:	0800de45 	.word	0x0800de45
 800de24:	0800de4d 	.word	0x0800de4d
 800de28:	0800de55 	.word	0x0800de55
 800de2c:	0800de6b 	.word	0x0800de6b
 800de30:	0800de5b 	.word	0x0800de5b
 800de34:	0800de6b 	.word	0x0800de6b
 800de38:	0800de6b 	.word	0x0800de6b
 800de3c:	0800de6b 	.word	0x0800de6b
 800de40:	0800de63 	.word	0x0800de63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800de44:	f7fc f872 	bl	8009f2c <HAL_RCC_GetPCLK1Freq>
 800de48:	61f8      	str	r0, [r7, #28]
        break;
 800de4a:	e014      	b.n	800de76 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800de4c:	f7fc f884 	bl	8009f58 <HAL_RCC_GetPCLK2Freq>
 800de50:	61f8      	str	r0, [r7, #28]
        break;
 800de52:	e010      	b.n	800de76 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800de54:	4b4d      	ldr	r3, [pc, #308]	; (800df8c <UART_SetConfig+0x56c>)
 800de56:	61fb      	str	r3, [r7, #28]
        break;
 800de58:	e00d      	b.n	800de76 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800de5a:	f7fb ffcf 	bl	8009dfc <HAL_RCC_GetSysClockFreq>
 800de5e:	61f8      	str	r0, [r7, #28]
        break;
 800de60:	e009      	b.n	800de76 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800de62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800de66:	61fb      	str	r3, [r7, #28]
        break;
 800de68:	e005      	b.n	800de76 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800de6a:	2300      	movs	r3, #0
 800de6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800de6e:	2301      	movs	r3, #1
 800de70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800de74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800de76:	69fb      	ldr	r3, [r7, #28]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d077      	beq.n	800df6c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800de7c:	69fb      	ldr	r3, [r7, #28]
 800de7e:	005a      	lsls	r2, r3, #1
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	685b      	ldr	r3, [r3, #4]
 800de84:	085b      	lsrs	r3, r3, #1
 800de86:	441a      	add	r2, r3
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	685b      	ldr	r3, [r3, #4]
 800de8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800de90:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800de92:	69bb      	ldr	r3, [r7, #24]
 800de94:	2b0f      	cmp	r3, #15
 800de96:	d916      	bls.n	800dec6 <UART_SetConfig+0x4a6>
 800de98:	69bb      	ldr	r3, [r7, #24]
 800de9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de9e:	d212      	bcs.n	800dec6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dea0:	69bb      	ldr	r3, [r7, #24]
 800dea2:	b29b      	uxth	r3, r3
 800dea4:	f023 030f 	bic.w	r3, r3, #15
 800dea8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800deaa:	69bb      	ldr	r3, [r7, #24]
 800deac:	085b      	lsrs	r3, r3, #1
 800deae:	b29b      	uxth	r3, r3
 800deb0:	f003 0307 	and.w	r3, r3, #7
 800deb4:	b29a      	uxth	r2, r3
 800deb6:	8afb      	ldrh	r3, [r7, #22]
 800deb8:	4313      	orrs	r3, r2
 800deba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	8afa      	ldrh	r2, [r7, #22]
 800dec2:	60da      	str	r2, [r3, #12]
 800dec4:	e052      	b.n	800df6c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800dec6:	2301      	movs	r3, #1
 800dec8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800decc:	e04e      	b.n	800df6c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800dece:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ded2:	2b08      	cmp	r3, #8
 800ded4:	d827      	bhi.n	800df26 <UART_SetConfig+0x506>
 800ded6:	a201      	add	r2, pc, #4	; (adr r2, 800dedc <UART_SetConfig+0x4bc>)
 800ded8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dedc:	0800df01 	.word	0x0800df01
 800dee0:	0800df09 	.word	0x0800df09
 800dee4:	0800df11 	.word	0x0800df11
 800dee8:	0800df27 	.word	0x0800df27
 800deec:	0800df17 	.word	0x0800df17
 800def0:	0800df27 	.word	0x0800df27
 800def4:	0800df27 	.word	0x0800df27
 800def8:	0800df27 	.word	0x0800df27
 800defc:	0800df1f 	.word	0x0800df1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800df00:	f7fc f814 	bl	8009f2c <HAL_RCC_GetPCLK1Freq>
 800df04:	61f8      	str	r0, [r7, #28]
        break;
 800df06:	e014      	b.n	800df32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800df08:	f7fc f826 	bl	8009f58 <HAL_RCC_GetPCLK2Freq>
 800df0c:	61f8      	str	r0, [r7, #28]
        break;
 800df0e:	e010      	b.n	800df32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800df10:	4b1e      	ldr	r3, [pc, #120]	; (800df8c <UART_SetConfig+0x56c>)
 800df12:	61fb      	str	r3, [r7, #28]
        break;
 800df14:	e00d      	b.n	800df32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800df16:	f7fb ff71 	bl	8009dfc <HAL_RCC_GetSysClockFreq>
 800df1a:	61f8      	str	r0, [r7, #28]
        break;
 800df1c:	e009      	b.n	800df32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800df1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800df22:	61fb      	str	r3, [r7, #28]
        break;
 800df24:	e005      	b.n	800df32 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800df26:	2300      	movs	r3, #0
 800df28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800df2a:	2301      	movs	r3, #1
 800df2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800df30:	bf00      	nop
    }

    if (pclk != 0U)
 800df32:	69fb      	ldr	r3, [r7, #28]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d019      	beq.n	800df6c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	685b      	ldr	r3, [r3, #4]
 800df3c:	085a      	lsrs	r2, r3, #1
 800df3e:	69fb      	ldr	r3, [r7, #28]
 800df40:	441a      	add	r2, r3
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	685b      	ldr	r3, [r3, #4]
 800df46:	fbb2 f3f3 	udiv	r3, r2, r3
 800df4a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800df4c:	69bb      	ldr	r3, [r7, #24]
 800df4e:	2b0f      	cmp	r3, #15
 800df50:	d909      	bls.n	800df66 <UART_SetConfig+0x546>
 800df52:	69bb      	ldr	r3, [r7, #24]
 800df54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df58:	d205      	bcs.n	800df66 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800df5a:	69bb      	ldr	r3, [r7, #24]
 800df5c:	b29a      	uxth	r2, r3
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	60da      	str	r2, [r3, #12]
 800df64:	e002      	b.n	800df6c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800df66:	2301      	movs	r3, #1
 800df68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	2200      	movs	r2, #0
 800df70:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	2200      	movs	r2, #0
 800df76:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800df78:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800df7c:	4618      	mov	r0, r3
 800df7e:	3728      	adds	r7, #40	; 0x28
 800df80:	46bd      	mov	sp, r7
 800df82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800df86:	bf00      	nop
 800df88:	40008000 	.word	0x40008000
 800df8c:	00f42400 	.word	0x00f42400

0800df90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800df90:	b480      	push	{r7}
 800df92:	b083      	sub	sp, #12
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df9c:	f003 0301 	and.w	r3, r3, #1
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d00a      	beq.n	800dfba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	685b      	ldr	r3, [r3, #4]
 800dfaa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	430a      	orrs	r2, r1
 800dfb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfbe:	f003 0302 	and.w	r3, r3, #2
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d00a      	beq.n	800dfdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	685b      	ldr	r3, [r3, #4]
 800dfcc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	430a      	orrs	r2, r1
 800dfda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfe0:	f003 0304 	and.w	r3, r3, #4
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d00a      	beq.n	800dffe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	685b      	ldr	r3, [r3, #4]
 800dfee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	430a      	orrs	r2, r1
 800dffc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e002:	f003 0308 	and.w	r3, r3, #8
 800e006:	2b00      	cmp	r3, #0
 800e008:	d00a      	beq.n	800e020 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	685b      	ldr	r3, [r3, #4]
 800e010:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	430a      	orrs	r2, r1
 800e01e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e024:	f003 0310 	and.w	r3, r3, #16
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d00a      	beq.n	800e042 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	689b      	ldr	r3, [r3, #8]
 800e032:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	430a      	orrs	r2, r1
 800e040:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e046:	f003 0320 	and.w	r3, r3, #32
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d00a      	beq.n	800e064 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	689b      	ldr	r3, [r3, #8]
 800e054:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	430a      	orrs	r2, r1
 800e062:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d01a      	beq.n	800e0a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	685b      	ldr	r3, [r3, #4]
 800e076:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	430a      	orrs	r2, r1
 800e084:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e08a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e08e:	d10a      	bne.n	800e0a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	685b      	ldr	r3, [r3, #4]
 800e096:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	430a      	orrs	r2, r1
 800e0a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d00a      	beq.n	800e0c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	685b      	ldr	r3, [r3, #4]
 800e0b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	430a      	orrs	r2, r1
 800e0c6:	605a      	str	r2, [r3, #4]
  }
}
 800e0c8:	bf00      	nop
 800e0ca:	370c      	adds	r7, #12
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d2:	4770      	bx	lr

0800e0d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b086      	sub	sp, #24
 800e0d8:	af02      	add	r7, sp, #8
 800e0da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	2200      	movs	r2, #0
 800e0e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e0e4:	f7f8 fecc 	bl	8006e80 <HAL_GetTick>
 800e0e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	f003 0308 	and.w	r3, r3, #8
 800e0f4:	2b08      	cmp	r3, #8
 800e0f6:	d10e      	bne.n	800e116 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e0f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e0fc:	9300      	str	r3, [sp, #0]
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	2200      	movs	r2, #0
 800e102:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e106:	6878      	ldr	r0, [r7, #4]
 800e108:	f000 f82d 	bl	800e166 <UART_WaitOnFlagUntilTimeout>
 800e10c:	4603      	mov	r3, r0
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d001      	beq.n	800e116 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e112:	2303      	movs	r3, #3
 800e114:	e023      	b.n	800e15e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	f003 0304 	and.w	r3, r3, #4
 800e120:	2b04      	cmp	r3, #4
 800e122:	d10e      	bne.n	800e142 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e124:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e128:	9300      	str	r3, [sp, #0]
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	2200      	movs	r2, #0
 800e12e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f000 f817 	bl	800e166 <UART_WaitOnFlagUntilTimeout>
 800e138:	4603      	mov	r3, r0
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d001      	beq.n	800e142 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e13e:	2303      	movs	r3, #3
 800e140:	e00d      	b.n	800e15e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	2220      	movs	r2, #32
 800e146:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	2220      	movs	r2, #32
 800e14c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	2200      	movs	r2, #0
 800e152:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	2200      	movs	r2, #0
 800e158:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800e15c:	2300      	movs	r3, #0
}
 800e15e:	4618      	mov	r0, r3
 800e160:	3710      	adds	r7, #16
 800e162:	46bd      	mov	sp, r7
 800e164:	bd80      	pop	{r7, pc}

0800e166 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e166:	b580      	push	{r7, lr}
 800e168:	b09c      	sub	sp, #112	; 0x70
 800e16a:	af00      	add	r7, sp, #0
 800e16c:	60f8      	str	r0, [r7, #12]
 800e16e:	60b9      	str	r1, [r7, #8]
 800e170:	603b      	str	r3, [r7, #0]
 800e172:	4613      	mov	r3, r2
 800e174:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e176:	e0a5      	b.n	800e2c4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e178:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e17a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e17e:	f000 80a1 	beq.w	800e2c4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e182:	f7f8 fe7d 	bl	8006e80 <HAL_GetTick>
 800e186:	4602      	mov	r2, r0
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	1ad3      	subs	r3, r2, r3
 800e18c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e18e:	429a      	cmp	r2, r3
 800e190:	d302      	bcc.n	800e198 <UART_WaitOnFlagUntilTimeout+0x32>
 800e192:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e194:	2b00      	cmp	r3, #0
 800e196:	d13e      	bne.n	800e216 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e19e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1a0:	e853 3f00 	ldrex	r3, [r3]
 800e1a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e1a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e1ac:	667b      	str	r3, [r7, #100]	; 0x64
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	461a      	mov	r2, r3
 800e1b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e1b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e1b8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e1bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e1be:	e841 2300 	strex	r3, r2, [r1]
 800e1c2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e1c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d1e6      	bne.n	800e198 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	3308      	adds	r3, #8
 800e1d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1d4:	e853 3f00 	ldrex	r3, [r3]
 800e1d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1dc:	f023 0301 	bic.w	r3, r3, #1
 800e1e0:	663b      	str	r3, [r7, #96]	; 0x60
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	3308      	adds	r3, #8
 800e1e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e1ea:	64ba      	str	r2, [r7, #72]	; 0x48
 800e1ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e1f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e1f2:	e841 2300 	strex	r3, r2, [r1]
 800e1f6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e1f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d1e5      	bne.n	800e1ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	2220      	movs	r2, #32
 800e202:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	2220      	movs	r2, #32
 800e208:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	2200      	movs	r2, #0
 800e20e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800e212:	2303      	movs	r3, #3
 800e214:	e067      	b.n	800e2e6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	f003 0304 	and.w	r3, r3, #4
 800e220:	2b00      	cmp	r3, #0
 800e222:	d04f      	beq.n	800e2c4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	69db      	ldr	r3, [r3, #28]
 800e22a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e22e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e232:	d147      	bne.n	800e2c4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e23c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e246:	e853 3f00 	ldrex	r3, [r3]
 800e24a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e24e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e252:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	461a      	mov	r2, r3
 800e25a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e25c:	637b      	str	r3, [r7, #52]	; 0x34
 800e25e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e260:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e262:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e264:	e841 2300 	strex	r3, r2, [r1]
 800e268:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d1e6      	bne.n	800e23e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	3308      	adds	r3, #8
 800e276:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e278:	697b      	ldr	r3, [r7, #20]
 800e27a:	e853 3f00 	ldrex	r3, [r3]
 800e27e:	613b      	str	r3, [r7, #16]
   return(result);
 800e280:	693b      	ldr	r3, [r7, #16]
 800e282:	f023 0301 	bic.w	r3, r3, #1
 800e286:	66bb      	str	r3, [r7, #104]	; 0x68
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	3308      	adds	r3, #8
 800e28e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e290:	623a      	str	r2, [r7, #32]
 800e292:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e294:	69f9      	ldr	r1, [r7, #28]
 800e296:	6a3a      	ldr	r2, [r7, #32]
 800e298:	e841 2300 	strex	r3, r2, [r1]
 800e29c:	61bb      	str	r3, [r7, #24]
   return(result);
 800e29e:	69bb      	ldr	r3, [r7, #24]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d1e5      	bne.n	800e270 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	2220      	movs	r2, #32
 800e2a8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	2220      	movs	r2, #32
 800e2ae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	2220      	movs	r2, #32
 800e2b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800e2c0:	2303      	movs	r3, #3
 800e2c2:	e010      	b.n	800e2e6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	69da      	ldr	r2, [r3, #28]
 800e2ca:	68bb      	ldr	r3, [r7, #8]
 800e2cc:	4013      	ands	r3, r2
 800e2ce:	68ba      	ldr	r2, [r7, #8]
 800e2d0:	429a      	cmp	r2, r3
 800e2d2:	bf0c      	ite	eq
 800e2d4:	2301      	moveq	r3, #1
 800e2d6:	2300      	movne	r3, #0
 800e2d8:	b2db      	uxtb	r3, r3
 800e2da:	461a      	mov	r2, r3
 800e2dc:	79fb      	ldrb	r3, [r7, #7]
 800e2de:	429a      	cmp	r2, r3
 800e2e0:	f43f af4a 	beq.w	800e178 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e2e4:	2300      	movs	r3, #0
}
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	3770      	adds	r7, #112	; 0x70
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bd80      	pop	{r7, pc}
	...

0800e2f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e2f0:	b480      	push	{r7}
 800e2f2:	b097      	sub	sp, #92	; 0x5c
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	60f8      	str	r0, [r7, #12]
 800e2f8:	60b9      	str	r1, [r7, #8]
 800e2fa:	4613      	mov	r3, r2
 800e2fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	68ba      	ldr	r2, [r7, #8]
 800e302:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	88fa      	ldrh	r2, [r7, #6]
 800e308:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	88fa      	ldrh	r2, [r7, #6]
 800e310:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	2200      	movs	r2, #0
 800e318:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	689b      	ldr	r3, [r3, #8]
 800e31e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e322:	d10e      	bne.n	800e342 <UART_Start_Receive_IT+0x52>
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	691b      	ldr	r3, [r3, #16]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d105      	bne.n	800e338 <UART_Start_Receive_IT+0x48>
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800e332:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e336:	e02d      	b.n	800e394 <UART_Start_Receive_IT+0xa4>
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	22ff      	movs	r2, #255	; 0xff
 800e33c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e340:	e028      	b.n	800e394 <UART_Start_Receive_IT+0xa4>
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	689b      	ldr	r3, [r3, #8]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d10d      	bne.n	800e366 <UART_Start_Receive_IT+0x76>
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	691b      	ldr	r3, [r3, #16]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d104      	bne.n	800e35c <UART_Start_Receive_IT+0x6c>
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	22ff      	movs	r2, #255	; 0xff
 800e356:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e35a:	e01b      	b.n	800e394 <UART_Start_Receive_IT+0xa4>
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	227f      	movs	r2, #127	; 0x7f
 800e360:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e364:	e016      	b.n	800e394 <UART_Start_Receive_IT+0xa4>
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	689b      	ldr	r3, [r3, #8]
 800e36a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e36e:	d10d      	bne.n	800e38c <UART_Start_Receive_IT+0x9c>
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	691b      	ldr	r3, [r3, #16]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d104      	bne.n	800e382 <UART_Start_Receive_IT+0x92>
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	227f      	movs	r2, #127	; 0x7f
 800e37c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e380:	e008      	b.n	800e394 <UART_Start_Receive_IT+0xa4>
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	223f      	movs	r2, #63	; 0x3f
 800e386:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e38a:	e003      	b.n	800e394 <UART_Start_Receive_IT+0xa4>
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	2200      	movs	r2, #0
 800e390:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	2200      	movs	r2, #0
 800e398:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	2222      	movs	r2, #34	; 0x22
 800e3a0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	3308      	adds	r3, #8
 800e3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3ac:	e853 3f00 	ldrex	r3, [r3]
 800e3b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3b4:	f043 0301 	orr.w	r3, r3, #1
 800e3b8:	657b      	str	r3, [r7, #84]	; 0x54
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	3308      	adds	r3, #8
 800e3c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e3c2:	64ba      	str	r2, [r7, #72]	; 0x48
 800e3c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e3c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e3ca:	e841 2300 	strex	r3, r2, [r1]
 800e3ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e3d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d1e5      	bne.n	800e3a2 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	689b      	ldr	r3, [r3, #8]
 800e3da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e3de:	d107      	bne.n	800e3f0 <UART_Start_Receive_IT+0x100>
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	691b      	ldr	r3, [r3, #16]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d103      	bne.n	800e3f0 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	4a24      	ldr	r2, [pc, #144]	; (800e47c <UART_Start_Receive_IT+0x18c>)
 800e3ec:	665a      	str	r2, [r3, #100]	; 0x64
 800e3ee:	e002      	b.n	800e3f6 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	4a23      	ldr	r2, [pc, #140]	; (800e480 <UART_Start_Receive_IT+0x190>)
 800e3f4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	691b      	ldr	r3, [r3, #16]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d019      	beq.n	800e43a <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e40e:	e853 3f00 	ldrex	r3, [r3]
 800e412:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e416:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800e41a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	461a      	mov	r2, r3
 800e422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e424:	637b      	str	r3, [r7, #52]	; 0x34
 800e426:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e428:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e42a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e42c:	e841 2300 	strex	r3, r2, [r1]
 800e430:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e434:	2b00      	cmp	r3, #0
 800e436:	d1e6      	bne.n	800e406 <UART_Start_Receive_IT+0x116>
 800e438:	e018      	b.n	800e46c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e440:	697b      	ldr	r3, [r7, #20]
 800e442:	e853 3f00 	ldrex	r3, [r3]
 800e446:	613b      	str	r3, [r7, #16]
   return(result);
 800e448:	693b      	ldr	r3, [r7, #16]
 800e44a:	f043 0320 	orr.w	r3, r3, #32
 800e44e:	653b      	str	r3, [r7, #80]	; 0x50
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	461a      	mov	r2, r3
 800e456:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e458:	623b      	str	r3, [r7, #32]
 800e45a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e45c:	69f9      	ldr	r1, [r7, #28]
 800e45e:	6a3a      	ldr	r2, [r7, #32]
 800e460:	e841 2300 	strex	r3, r2, [r1]
 800e464:	61bb      	str	r3, [r7, #24]
   return(result);
 800e466:	69bb      	ldr	r3, [r7, #24]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d1e6      	bne.n	800e43a <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800e46c:	2300      	movs	r3, #0
}
 800e46e:	4618      	mov	r0, r3
 800e470:	375c      	adds	r7, #92	; 0x5c
 800e472:	46bd      	mov	sp, r7
 800e474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e478:	4770      	bx	lr
 800e47a:	bf00      	nop
 800e47c:	0800e8a9 	.word	0x0800e8a9
 800e480:	0800e749 	.word	0x0800e749

0800e484 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e484:	b480      	push	{r7}
 800e486:	b089      	sub	sp, #36	; 0x24
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	e853 3f00 	ldrex	r3, [r3]
 800e498:	60bb      	str	r3, [r7, #8]
   return(result);
 800e49a:	68bb      	ldr	r3, [r7, #8]
 800e49c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e4a0:	61fb      	str	r3, [r7, #28]
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	461a      	mov	r2, r3
 800e4a8:	69fb      	ldr	r3, [r7, #28]
 800e4aa:	61bb      	str	r3, [r7, #24]
 800e4ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4ae:	6979      	ldr	r1, [r7, #20]
 800e4b0:	69ba      	ldr	r2, [r7, #24]
 800e4b2:	e841 2300 	strex	r3, r2, [r1]
 800e4b6:	613b      	str	r3, [r7, #16]
   return(result);
 800e4b8:	693b      	ldr	r3, [r7, #16]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d1e6      	bne.n	800e48c <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	2220      	movs	r2, #32
 800e4c2:	679a      	str	r2, [r3, #120]	; 0x78
}
 800e4c4:	bf00      	nop
 800e4c6:	3724      	adds	r7, #36	; 0x24
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ce:	4770      	bx	lr

0800e4d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e4d0:	b480      	push	{r7}
 800e4d2:	b095      	sub	sp, #84	; 0x54
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4e0:	e853 3f00 	ldrex	r3, [r3]
 800e4e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e4ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	461a      	mov	r2, r3
 800e4f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4f6:	643b      	str	r3, [r7, #64]	; 0x40
 800e4f8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e4fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e4fe:	e841 2300 	strex	r3, r2, [r1]
 800e502:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e506:	2b00      	cmp	r3, #0
 800e508:	d1e6      	bne.n	800e4d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	3308      	adds	r3, #8
 800e510:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e512:	6a3b      	ldr	r3, [r7, #32]
 800e514:	e853 3f00 	ldrex	r3, [r3]
 800e518:	61fb      	str	r3, [r7, #28]
   return(result);
 800e51a:	69fb      	ldr	r3, [r7, #28]
 800e51c:	f023 0301 	bic.w	r3, r3, #1
 800e520:	64bb      	str	r3, [r7, #72]	; 0x48
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	3308      	adds	r3, #8
 800e528:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e52a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e52c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e52e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e530:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e532:	e841 2300 	strex	r3, r2, [r1]
 800e536:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d1e5      	bne.n	800e50a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e542:	2b01      	cmp	r3, #1
 800e544:	d118      	bne.n	800e578 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	e853 3f00 	ldrex	r3, [r3]
 800e552:	60bb      	str	r3, [r7, #8]
   return(result);
 800e554:	68bb      	ldr	r3, [r7, #8]
 800e556:	f023 0310 	bic.w	r3, r3, #16
 800e55a:	647b      	str	r3, [r7, #68]	; 0x44
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	461a      	mov	r2, r3
 800e562:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e564:	61bb      	str	r3, [r7, #24]
 800e566:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e568:	6979      	ldr	r1, [r7, #20]
 800e56a:	69ba      	ldr	r2, [r7, #24]
 800e56c:	e841 2300 	strex	r3, r2, [r1]
 800e570:	613b      	str	r3, [r7, #16]
   return(result);
 800e572:	693b      	ldr	r3, [r7, #16]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d1e6      	bne.n	800e546 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	2220      	movs	r2, #32
 800e57c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	2200      	movs	r2, #0
 800e582:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2200      	movs	r2, #0
 800e588:	665a      	str	r2, [r3, #100]	; 0x64
}
 800e58a:	bf00      	nop
 800e58c:	3754      	adds	r7, #84	; 0x54
 800e58e:	46bd      	mov	sp, r7
 800e590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e594:	4770      	bx	lr

0800e596 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e596:	b580      	push	{r7, lr}
 800e598:	b090      	sub	sp, #64	; 0x40
 800e59a:	af00      	add	r7, sp, #0
 800e59c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5a2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	f003 0320 	and.w	r3, r3, #32
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d137      	bne.n	800e622 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800e5b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5b4:	2200      	movs	r2, #0
 800e5b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e5ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	3308      	adds	r3, #8
 800e5c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5c4:	e853 3f00 	ldrex	r3, [r3]
 800e5c8:	623b      	str	r3, [r7, #32]
   return(result);
 800e5ca:	6a3b      	ldr	r3, [r7, #32]
 800e5cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e5d0:	63bb      	str	r3, [r7, #56]	; 0x38
 800e5d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	3308      	adds	r3, #8
 800e5d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e5da:	633a      	str	r2, [r7, #48]	; 0x30
 800e5dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e5e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5e2:	e841 2300 	strex	r3, r2, [r1]
 800e5e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d1e5      	bne.n	800e5ba <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e5ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5f4:	693b      	ldr	r3, [r7, #16]
 800e5f6:	e853 3f00 	ldrex	r3, [r3]
 800e5fa:	60fb      	str	r3, [r7, #12]
   return(result);
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e602:	637b      	str	r3, [r7, #52]	; 0x34
 800e604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	461a      	mov	r2, r3
 800e60a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e60c:	61fb      	str	r3, [r7, #28]
 800e60e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e610:	69b9      	ldr	r1, [r7, #24]
 800e612:	69fa      	ldr	r2, [r7, #28]
 800e614:	e841 2300 	strex	r3, r2, [r1]
 800e618:	617b      	str	r3, [r7, #20]
   return(result);
 800e61a:	697b      	ldr	r3, [r7, #20]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d1e6      	bne.n	800e5ee <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e620:	e002      	b.n	800e628 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800e622:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e624:	f7f6 fa20 	bl	8004a68 <HAL_UART_TxCpltCallback>
}
 800e628:	bf00      	nop
 800e62a:	3740      	adds	r7, #64	; 0x40
 800e62c:	46bd      	mov	sp, r7
 800e62e:	bd80      	pop	{r7, pc}

0800e630 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e630:	b580      	push	{r7, lr}
 800e632:	b084      	sub	sp, #16
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e63c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e63e:	68f8      	ldr	r0, [r7, #12]
 800e640:	f7ff f9d8 	bl	800d9f4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e644:	bf00      	nop
 800e646:	3710      	adds	r7, #16
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}

0800e64c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b086      	sub	sp, #24
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e658:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e65a:	697b      	ldr	r3, [r7, #20]
 800e65c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e65e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e660:	697b      	ldr	r3, [r7, #20]
 800e662:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e664:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e666:	697b      	ldr	r3, [r7, #20]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	689b      	ldr	r3, [r3, #8]
 800e66c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e670:	2b80      	cmp	r3, #128	; 0x80
 800e672:	d109      	bne.n	800e688 <UART_DMAError+0x3c>
 800e674:	693b      	ldr	r3, [r7, #16]
 800e676:	2b21      	cmp	r3, #33	; 0x21
 800e678:	d106      	bne.n	800e688 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e67a:	697b      	ldr	r3, [r7, #20]
 800e67c:	2200      	movs	r2, #0
 800e67e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800e682:	6978      	ldr	r0, [r7, #20]
 800e684:	f7ff fefe 	bl	800e484 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e688:	697b      	ldr	r3, [r7, #20]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	689b      	ldr	r3, [r3, #8]
 800e68e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e692:	2b40      	cmp	r3, #64	; 0x40
 800e694:	d109      	bne.n	800e6aa <UART_DMAError+0x5e>
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	2b22      	cmp	r3, #34	; 0x22
 800e69a:	d106      	bne.n	800e6aa <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e69c:	697b      	ldr	r3, [r7, #20]
 800e69e:	2200      	movs	r2, #0
 800e6a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800e6a4:	6978      	ldr	r0, [r7, #20]
 800e6a6:	f7ff ff13 	bl	800e4d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e6aa:	697b      	ldr	r3, [r7, #20]
 800e6ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e6b0:	f043 0210 	orr.w	r2, r3, #16
 800e6b4:	697b      	ldr	r3, [r7, #20]
 800e6b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e6ba:	6978      	ldr	r0, [r7, #20]
 800e6bc:	f7f6 fc5a 	bl	8004f74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e6c0:	bf00      	nop
 800e6c2:	3718      	adds	r7, #24
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	bd80      	pop	{r7, pc}

0800e6c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b084      	sub	sp, #16
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	2200      	movs	r2, #0
 800e6da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e6e6:	68f8      	ldr	r0, [r7, #12]
 800e6e8:	f7f6 fc44 	bl	8004f74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e6ec:	bf00      	nop
 800e6ee:	3710      	adds	r7, #16
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	bd80      	pop	{r7, pc}

0800e6f4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b088      	sub	sp, #32
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	e853 3f00 	ldrex	r3, [r3]
 800e708:	60bb      	str	r3, [r7, #8]
   return(result);
 800e70a:	68bb      	ldr	r3, [r7, #8]
 800e70c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e710:	61fb      	str	r3, [r7, #28]
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	461a      	mov	r2, r3
 800e718:	69fb      	ldr	r3, [r7, #28]
 800e71a:	61bb      	str	r3, [r7, #24]
 800e71c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e71e:	6979      	ldr	r1, [r7, #20]
 800e720:	69ba      	ldr	r2, [r7, #24]
 800e722:	e841 2300 	strex	r3, r2, [r1]
 800e726:	613b      	str	r3, [r7, #16]
   return(result);
 800e728:	693b      	ldr	r3, [r7, #16]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d1e6      	bne.n	800e6fc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	2220      	movs	r2, #32
 800e732:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	2200      	movs	r2, #0
 800e738:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e73a:	6878      	ldr	r0, [r7, #4]
 800e73c:	f7f6 f994 	bl	8004a68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e740:	bf00      	nop
 800e742:	3720      	adds	r7, #32
 800e744:	46bd      	mov	sp, r7
 800e746:	bd80      	pop	{r7, pc}

0800e748 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b096      	sub	sp, #88	; 0x58
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e756:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e75e:	2b22      	cmp	r3, #34	; 0x22
 800e760:	f040 8094 	bne.w	800e88c <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e76a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e76e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800e772:	b2d9      	uxtb	r1, r3
 800e774:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e778:	b2da      	uxtb	r2, r3
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e77e:	400a      	ands	r2, r1
 800e780:	b2d2      	uxtb	r2, r2
 800e782:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e788:	1c5a      	adds	r2, r3, #1
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e794:	b29b      	uxth	r3, r3
 800e796:	3b01      	subs	r3, #1
 800e798:	b29a      	uxth	r2, r3
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e7a6:	b29b      	uxth	r3, r3
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d179      	bne.n	800e8a0 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7b4:	e853 3f00 	ldrex	r3, [r3]
 800e7b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e7ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e7c0:	653b      	str	r3, [r7, #80]	; 0x50
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	461a      	mov	r2, r3
 800e7c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7ca:	647b      	str	r3, [r7, #68]	; 0x44
 800e7cc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e7d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e7d2:	e841 2300 	strex	r3, r2, [r1]
 800e7d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e7d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d1e6      	bne.n	800e7ac <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	3308      	adds	r3, #8
 800e7e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7e8:	e853 3f00 	ldrex	r3, [r3]
 800e7ec:	623b      	str	r3, [r7, #32]
   return(result);
 800e7ee:	6a3b      	ldr	r3, [r7, #32]
 800e7f0:	f023 0301 	bic.w	r3, r3, #1
 800e7f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	3308      	adds	r3, #8
 800e7fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e7fe:	633a      	str	r2, [r7, #48]	; 0x30
 800e800:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e802:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e806:	e841 2300 	strex	r3, r2, [r1]
 800e80a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d1e5      	bne.n	800e7de <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	2220      	movs	r2, #32
 800e816:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	2200      	movs	r2, #0
 800e81c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e822:	2b01      	cmp	r3, #1
 800e824:	d12e      	bne.n	800e884 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	2200      	movs	r2, #0
 800e82a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e832:	693b      	ldr	r3, [r7, #16]
 800e834:	e853 3f00 	ldrex	r3, [r3]
 800e838:	60fb      	str	r3, [r7, #12]
   return(result);
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	f023 0310 	bic.w	r3, r3, #16
 800e840:	64bb      	str	r3, [r7, #72]	; 0x48
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	461a      	mov	r2, r3
 800e848:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e84a:	61fb      	str	r3, [r7, #28]
 800e84c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e84e:	69b9      	ldr	r1, [r7, #24]
 800e850:	69fa      	ldr	r2, [r7, #28]
 800e852:	e841 2300 	strex	r3, r2, [r1]
 800e856:	617b      	str	r3, [r7, #20]
   return(result);
 800e858:	697b      	ldr	r3, [r7, #20]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d1e6      	bne.n	800e82c <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	69db      	ldr	r3, [r3, #28]
 800e864:	f003 0310 	and.w	r3, r3, #16
 800e868:	2b10      	cmp	r3, #16
 800e86a:	d103      	bne.n	800e874 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	2210      	movs	r2, #16
 800e872:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e87a:	4619      	mov	r1, r3
 800e87c:	6878      	ldr	r0, [r7, #4]
 800e87e:	f7ff f8c3 	bl	800da08 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e882:	e00d      	b.n	800e8a0 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800e884:	6878      	ldr	r0, [r7, #4]
 800e886:	f7f6 f905 	bl	8004a94 <HAL_UART_RxCpltCallback>
}
 800e88a:	e009      	b.n	800e8a0 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	8b1b      	ldrh	r3, [r3, #24]
 800e892:	b29a      	uxth	r2, r3
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	f042 0208 	orr.w	r2, r2, #8
 800e89c:	b292      	uxth	r2, r2
 800e89e:	831a      	strh	r2, [r3, #24]
}
 800e8a0:	bf00      	nop
 800e8a2:	3758      	adds	r7, #88	; 0x58
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd80      	pop	{r7, pc}

0800e8a8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b096      	sub	sp, #88	; 0x58
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e8b6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e8be:	2b22      	cmp	r3, #34	; 0x22
 800e8c0:	f040 8094 	bne.w	800e9ec <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e8ca:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8d2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800e8d4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800e8d8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e8dc:	4013      	ands	r3, r2
 800e8de:	b29a      	uxth	r2, r3
 800e8e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8e2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8e8:	1c9a      	adds	r2, r3, #2
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e8f4:	b29b      	uxth	r3, r3
 800e8f6:	3b01      	subs	r3, #1
 800e8f8:	b29a      	uxth	r2, r3
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e906:	b29b      	uxth	r3, r3
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d179      	bne.n	800ea00 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e914:	e853 3f00 	ldrex	r3, [r3]
 800e918:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e91c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e920:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	461a      	mov	r2, r3
 800e928:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e92a:	643b      	str	r3, [r7, #64]	; 0x40
 800e92c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e92e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e930:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e932:	e841 2300 	strex	r3, r2, [r1]
 800e936:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d1e6      	bne.n	800e90c <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	3308      	adds	r3, #8
 800e944:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e946:	6a3b      	ldr	r3, [r7, #32]
 800e948:	e853 3f00 	ldrex	r3, [r3]
 800e94c:	61fb      	str	r3, [r7, #28]
   return(result);
 800e94e:	69fb      	ldr	r3, [r7, #28]
 800e950:	f023 0301 	bic.w	r3, r3, #1
 800e954:	64bb      	str	r3, [r7, #72]	; 0x48
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	3308      	adds	r3, #8
 800e95c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e95e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e960:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e962:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e964:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e966:	e841 2300 	strex	r3, r2, [r1]
 800e96a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d1e5      	bne.n	800e93e <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	2220      	movs	r2, #32
 800e976:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	2200      	movs	r2, #0
 800e97c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e982:	2b01      	cmp	r3, #1
 800e984:	d12e      	bne.n	800e9e4 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2200      	movs	r2, #0
 800e98a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	e853 3f00 	ldrex	r3, [r3]
 800e998:	60bb      	str	r3, [r7, #8]
   return(result);
 800e99a:	68bb      	ldr	r3, [r7, #8]
 800e99c:	f023 0310 	bic.w	r3, r3, #16
 800e9a0:	647b      	str	r3, [r7, #68]	; 0x44
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	461a      	mov	r2, r3
 800e9a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9aa:	61bb      	str	r3, [r7, #24]
 800e9ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9ae:	6979      	ldr	r1, [r7, #20]
 800e9b0:	69ba      	ldr	r2, [r7, #24]
 800e9b2:	e841 2300 	strex	r3, r2, [r1]
 800e9b6:	613b      	str	r3, [r7, #16]
   return(result);
 800e9b8:	693b      	ldr	r3, [r7, #16]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d1e6      	bne.n	800e98c <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	69db      	ldr	r3, [r3, #28]
 800e9c4:	f003 0310 	and.w	r3, r3, #16
 800e9c8:	2b10      	cmp	r3, #16
 800e9ca:	d103      	bne.n	800e9d4 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	2210      	movs	r2, #16
 800e9d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e9da:	4619      	mov	r1, r3
 800e9dc:	6878      	ldr	r0, [r7, #4]
 800e9de:	f7ff f813 	bl	800da08 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e9e2:	e00d      	b.n	800ea00 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800e9e4:	6878      	ldr	r0, [r7, #4]
 800e9e6:	f7f6 f855 	bl	8004a94 <HAL_UART_RxCpltCallback>
}
 800e9ea:	e009      	b.n	800ea00 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	8b1b      	ldrh	r3, [r3, #24]
 800e9f2:	b29a      	uxth	r2, r3
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	f042 0208 	orr.w	r2, r2, #8
 800e9fc:	b292      	uxth	r2, r2
 800e9fe:	831a      	strh	r2, [r3, #24]
}
 800ea00:	bf00      	nop
 800ea02:	3758      	adds	r7, #88	; 0x58
 800ea04:	46bd      	mov	sp, r7
 800ea06:	bd80      	pop	{r7, pc}

0800ea08 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ea08:	b480      	push	{r7}
 800ea0a:	b083      	sub	sp, #12
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ea10:	bf00      	nop
 800ea12:	370c      	adds	r7, #12
 800ea14:	46bd      	mov	sp, r7
 800ea16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1a:	4770      	bx	lr

0800ea1c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800ea20:	4904      	ldr	r1, [pc, #16]	; (800ea34 <MX_FATFS_Init+0x18>)
 800ea22:	4805      	ldr	r0, [pc, #20]	; (800ea38 <MX_FATFS_Init+0x1c>)
 800ea24:	f003 fb1e 	bl	8012064 <FATFS_LinkDriver>
 800ea28:	4603      	mov	r3, r0
 800ea2a:	461a      	mov	r2, r3
 800ea2c:	4b03      	ldr	r3, [pc, #12]	; (800ea3c <MX_FATFS_Init+0x20>)
 800ea2e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ea30:	bf00      	nop
 800ea32:	bd80      	pop	{r7, pc}
 800ea34:	200041f4 	.word	0x200041f4
 800ea38:	20000244 	.word	0x20000244
 800ea3c:	200041f0 	.word	0x200041f0

0800ea40 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ea40:	b480      	push	{r7}
 800ea42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ea44:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ea46:	4618      	mov	r0, r3
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4e:	4770      	bx	lr

0800ea50 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800ea50:	b480      	push	{r7}
 800ea52:	b083      	sub	sp, #12
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	4603      	mov	r3, r0
 800ea58:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800ea5a:	4b0a      	ldr	r3, [pc, #40]	; (800ea84 <USER_initialize+0x34>)
 800ea5c:	2201      	movs	r2, #1
 800ea5e:	701a      	strb	r2, [r3, #0]
    Stat &= ~STA_NOINIT;
 800ea60:	4b08      	ldr	r3, [pc, #32]	; (800ea84 <USER_initialize+0x34>)
 800ea62:	781b      	ldrb	r3, [r3, #0]
 800ea64:	b2db      	uxtb	r3, r3
 800ea66:	f023 0301 	bic.w	r3, r3, #1
 800ea6a:	b2da      	uxtb	r2, r3
 800ea6c:	4b05      	ldr	r3, [pc, #20]	; (800ea84 <USER_initialize+0x34>)
 800ea6e:	701a      	strb	r2, [r3, #0]

    return Stat;
 800ea70:	4b04      	ldr	r3, [pc, #16]	; (800ea84 <USER_initialize+0x34>)
 800ea72:	781b      	ldrb	r3, [r3, #0]
 800ea74:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800ea76:	4618      	mov	r0, r3
 800ea78:	370c      	adds	r7, #12
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea80:	4770      	bx	lr
 800ea82:	bf00      	nop
 800ea84:	20000241 	.word	0x20000241

0800ea88 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800ea88:	b480      	push	{r7}
 800ea8a:	b083      	sub	sp, #12
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	4603      	mov	r3, r0
 800ea90:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	Stat = STA_NOINIT;
 800ea92:	4b0a      	ldr	r3, [pc, #40]	; (800eabc <USER_status+0x34>)
 800ea94:	2201      	movs	r2, #1
 800ea96:	701a      	strb	r2, [r3, #0]
	Stat &= ~STA_NOINIT;
 800ea98:	4b08      	ldr	r3, [pc, #32]	; (800eabc <USER_status+0x34>)
 800ea9a:	781b      	ldrb	r3, [r3, #0]
 800ea9c:	b2db      	uxtb	r3, r3
 800ea9e:	f023 0301 	bic.w	r3, r3, #1
 800eaa2:	b2da      	uxtb	r2, r3
 800eaa4:	4b05      	ldr	r3, [pc, #20]	; (800eabc <USER_status+0x34>)
 800eaa6:	701a      	strb	r2, [r3, #0]

	return Stat;
 800eaa8:	4b04      	ldr	r3, [pc, #16]	; (800eabc <USER_status+0x34>)
 800eaaa:	781b      	ldrb	r3, [r3, #0]
 800eaac:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800eaae:	4618      	mov	r0, r3
 800eab0:	370c      	adds	r7, #12
 800eab2:	46bd      	mov	sp, r7
 800eab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab8:	4770      	bx	lr
 800eaba:	bf00      	nop
 800eabc:	20000241 	.word	0x20000241

0800eac0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b086      	sub	sp, #24
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	60b9      	str	r1, [r7, #8]
 800eac8:	607a      	str	r2, [r7, #4]
 800eaca:	603b      	str	r3, [r7, #0]
 800eacc:	4603      	mov	r3, r0
 800eace:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */

	//
		uint32_t ss = W25qxx_getSectorSize();
 800ead0:	f7f7 fdba 	bl	8006648 <W25qxx_getSectorSize>
 800ead4:	6138      	str	r0, [r7, #16]
		int i = -1;
 800ead6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eada:	617b      	str	r3, [r7, #20]
		while (++i < count) {
 800eadc:	e007      	b.n	800eaee <USER_read+0x2e>
	//		Report(__func__, true, "Dev:%u sector:%u(%u) count:%u\r\n", pdrv, sector, ss, count);
			W25qxx_ReadSector((BYTE *)buff, sector++, 0, ss);
 800eade:	6879      	ldr	r1, [r7, #4]
 800eae0:	1c4b      	adds	r3, r1, #1
 800eae2:	607b      	str	r3, [r7, #4]
 800eae4:	693b      	ldr	r3, [r7, #16]
 800eae6:	2200      	movs	r2, #0
 800eae8:	68b8      	ldr	r0, [r7, #8]
 800eaea:	f7f8 f8cb 	bl	8006c84 <W25qxx_ReadSector>
		while (++i < count) {
 800eaee:	697b      	ldr	r3, [r7, #20]
 800eaf0:	3301      	adds	r3, #1
 800eaf2:	617b      	str	r3, [r7, #20]
 800eaf4:	697b      	ldr	r3, [r7, #20]
 800eaf6:	683a      	ldr	r2, [r7, #0]
 800eaf8:	429a      	cmp	r2, r3
 800eafa:	d8f0      	bhi.n	800eade <USER_read+0x1e>
		}
	//

    return RES_OK;
 800eafc:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800eafe:	4618      	mov	r0, r3
 800eb00:	3718      	adds	r7, #24
 800eb02:	46bd      	mov	sp, r7
 800eb04:	bd80      	pop	{r7, pc}

0800eb06 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800eb06:	b580      	push	{r7, lr}
 800eb08:	b086      	sub	sp, #24
 800eb0a:	af00      	add	r7, sp, #0
 800eb0c:	60b9      	str	r1, [r7, #8]
 800eb0e:	607a      	str	r2, [r7, #4]
 800eb10:	603b      	str	r3, [r7, #0]
 800eb12:	4603      	mov	r3, r0
 800eb14:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */

	//
	uint32_t ss = W25qxx_getSectorSize();
 800eb16:	f7f7 fd97 	bl	8006648 <W25qxx_getSectorSize>
 800eb1a:	6138      	str	r0, [r7, #16]
	int i = -1;
 800eb1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eb20:	617b      	str	r3, [r7, #20]
	while (++i < count) {
 800eb22:	e015      	b.n	800eb50 <USER_write+0x4a>
//		Report(__func__, true, "Dev:%u sector:%u(%u) count:%u\r\n", pdrv, sector, ss, count);
		if (!W25qxx_IsEmptySector(sector, 0, ss)) W25qxx_EraseSector(sector);
 800eb24:	693a      	ldr	r2, [r7, #16]
 800eb26:	2100      	movs	r1, #0
 800eb28:	6878      	ldr	r0, [r7, #4]
 800eb2a:	f7f7 fe0f 	bl	800674c <W25qxx_IsEmptySector>
 800eb2e:	4603      	mov	r3, r0
 800eb30:	f083 0301 	eor.w	r3, r3, #1
 800eb34:	b2db      	uxtb	r3, r3
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d002      	beq.n	800eb40 <USER_write+0x3a>
 800eb3a:	6878      	ldr	r0, [r7, #4]
 800eb3c:	f7f7 fdaa 	bl	8006694 <W25qxx_EraseSector>
		W25qxx_WriteSector((BYTE *)buff, sector++, 0, ss);
 800eb40:	6879      	ldr	r1, [r7, #4]
 800eb42:	1c4b      	adds	r3, r1, #1
 800eb44:	607b      	str	r3, [r7, #4]
 800eb46:	693b      	ldr	r3, [r7, #16]
 800eb48:	2200      	movs	r2, #0
 800eb4a:	68b8      	ldr	r0, [r7, #8]
 800eb4c:	f7f7 ff72 	bl	8006a34 <W25qxx_WriteSector>
	while (++i < count) {
 800eb50:	697b      	ldr	r3, [r7, #20]
 800eb52:	3301      	adds	r3, #1
 800eb54:	617b      	str	r3, [r7, #20]
 800eb56:	697b      	ldr	r3, [r7, #20]
 800eb58:	683a      	ldr	r2, [r7, #0]
 800eb5a:	429a      	cmp	r2, r3
 800eb5c:	d8e2      	bhi.n	800eb24 <USER_write+0x1e>
	}
	//

    return RES_OK;
 800eb5e:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800eb60:	4618      	mov	r0, r3
 800eb62:	3718      	adds	r7, #24
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd80      	pop	{r7, pc}

0800eb68 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b084      	sub	sp, #16
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	4603      	mov	r3, r0
 800eb70:	603a      	str	r2, [r7, #0]
 800eb72:	71fb      	strb	r3, [r7, #7]
 800eb74:	460b      	mov	r3, r1
 800eb76:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

    DRESULT res = RES_ERROR;
 800eb78:	2301      	movs	r3, #1
 800eb7a:	73fb      	strb	r3, [r7, #15]
    //
    switch (cmd) {
 800eb7c:	79bb      	ldrb	r3, [r7, #6]
 800eb7e:	2b03      	cmp	r3, #3
 800eb80:	d825      	bhi.n	800ebce <USER_ioctl+0x66>
 800eb82:	a201      	add	r2, pc, #4	; (adr r2, 800eb88 <USER_ioctl+0x20>)
 800eb84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb88:	0800eb99 	.word	0x0800eb99
 800eb8c:	0800eb9f 	.word	0x0800eb9f
 800eb90:	0800ebaf 	.word	0x0800ebaf
 800eb94:	0800ebbf 	.word	0x0800ebbf
    	case CTRL_SYNC:
    		res = RES_OK;
 800eb98:	2300      	movs	r3, #0
 800eb9a:	73fb      	strb	r3, [r7, #15]
        break;
 800eb9c:	e019      	b.n	800ebd2 <USER_ioctl+0x6a>
    	case GET_SECTOR_COUNT:
    		*(DWORD *)buff = W25qxx_getSectorCount();
 800eb9e:	f7f7 fd47 	bl	8006630 <W25qxx_getSectorCount>
 800eba2:	4602      	mov	r2, r0
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	601a      	str	r2, [r3, #0]
    		res = RES_OK;
 800eba8:	2300      	movs	r3, #0
 800ebaa:	73fb      	strb	r3, [r7, #15]
        break;
 800ebac:	e011      	b.n	800ebd2 <USER_ioctl+0x6a>
    	case GET_SECTOR_SIZE:
    		*(DWORD *)buff = W25qxx_getSectorSize();
 800ebae:	f7f7 fd4b 	bl	8006648 <W25qxx_getSectorSize>
 800ebb2:	4602      	mov	r2, r0
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	601a      	str	r2, [r3, #0]
    		res = RES_OK;
 800ebb8:	2300      	movs	r3, #0
 800ebba:	73fb      	strb	r3, [r7, #15]
        break;
 800ebbc:	e009      	b.n	800ebd2 <USER_ioctl+0x6a>
    	case GET_BLOCK_SIZE:
    		*(DWORD *)buff = W25qxx_getBlockSize();//W25qxx_getSectorSize();//W25qxx_getBlockSize();
 800ebbe:	f7f7 fd5d 	bl	800667c <W25qxx_getBlockSize>
 800ebc2:	4602      	mov	r2, r0
 800ebc4:	683b      	ldr	r3, [r7, #0]
 800ebc6:	601a      	str	r2, [r3, #0]
    		res = RES_OK;
 800ebc8:	2300      	movs	r3, #0
 800ebca:	73fb      	strb	r3, [r7, #15]
        break;
 800ebcc:	e001      	b.n	800ebd2 <USER_ioctl+0x6a>
    		default : res = RES_PARERR;
 800ebce:	2304      	movs	r3, #4
 800ebd0:	73fb      	strb	r3, [r7, #15]
    }
    //

    return res;
 800ebd2:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	3710      	adds	r7, #16
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd80      	pop	{r7, pc}

0800ebdc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b084      	sub	sp, #16
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ebe6:	79fb      	ldrb	r3, [r7, #7]
 800ebe8:	4a08      	ldr	r2, [pc, #32]	; (800ec0c <disk_status+0x30>)
 800ebea:	009b      	lsls	r3, r3, #2
 800ebec:	4413      	add	r3, r2
 800ebee:	685b      	ldr	r3, [r3, #4]
 800ebf0:	685b      	ldr	r3, [r3, #4]
 800ebf2:	79fa      	ldrb	r2, [r7, #7]
 800ebf4:	4905      	ldr	r1, [pc, #20]	; (800ec0c <disk_status+0x30>)
 800ebf6:	440a      	add	r2, r1
 800ebf8:	7a12      	ldrb	r2, [r2, #8]
 800ebfa:	4610      	mov	r0, r2
 800ebfc:	4798      	blx	r3
 800ebfe:	4603      	mov	r3, r0
 800ec00:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ec02:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec04:	4618      	mov	r0, r3
 800ec06:	3710      	adds	r7, #16
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	bd80      	pop	{r7, pc}
 800ec0c:	20004220 	.word	0x20004220

0800ec10 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b084      	sub	sp, #16
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	4603      	mov	r3, r0
 800ec18:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ec1e:	79fb      	ldrb	r3, [r7, #7]
 800ec20:	4a0d      	ldr	r2, [pc, #52]	; (800ec58 <disk_initialize+0x48>)
 800ec22:	5cd3      	ldrb	r3, [r2, r3]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d111      	bne.n	800ec4c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ec28:	79fb      	ldrb	r3, [r7, #7]
 800ec2a:	4a0b      	ldr	r2, [pc, #44]	; (800ec58 <disk_initialize+0x48>)
 800ec2c:	2101      	movs	r1, #1
 800ec2e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ec30:	79fb      	ldrb	r3, [r7, #7]
 800ec32:	4a09      	ldr	r2, [pc, #36]	; (800ec58 <disk_initialize+0x48>)
 800ec34:	009b      	lsls	r3, r3, #2
 800ec36:	4413      	add	r3, r2
 800ec38:	685b      	ldr	r3, [r3, #4]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	79fa      	ldrb	r2, [r7, #7]
 800ec3e:	4906      	ldr	r1, [pc, #24]	; (800ec58 <disk_initialize+0x48>)
 800ec40:	440a      	add	r2, r1
 800ec42:	7a12      	ldrb	r2, [r2, #8]
 800ec44:	4610      	mov	r0, r2
 800ec46:	4798      	blx	r3
 800ec48:	4603      	mov	r3, r0
 800ec4a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800ec4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec4e:	4618      	mov	r0, r3
 800ec50:	3710      	adds	r7, #16
 800ec52:	46bd      	mov	sp, r7
 800ec54:	bd80      	pop	{r7, pc}
 800ec56:	bf00      	nop
 800ec58:	20004220 	.word	0x20004220

0800ec5c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ec5c:	b590      	push	{r4, r7, lr}
 800ec5e:	b087      	sub	sp, #28
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	60b9      	str	r1, [r7, #8]
 800ec64:	607a      	str	r2, [r7, #4]
 800ec66:	603b      	str	r3, [r7, #0]
 800ec68:	4603      	mov	r3, r0
 800ec6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ec6c:	7bfb      	ldrb	r3, [r7, #15]
 800ec6e:	4a0a      	ldr	r2, [pc, #40]	; (800ec98 <disk_read+0x3c>)
 800ec70:	009b      	lsls	r3, r3, #2
 800ec72:	4413      	add	r3, r2
 800ec74:	685b      	ldr	r3, [r3, #4]
 800ec76:	689c      	ldr	r4, [r3, #8]
 800ec78:	7bfb      	ldrb	r3, [r7, #15]
 800ec7a:	4a07      	ldr	r2, [pc, #28]	; (800ec98 <disk_read+0x3c>)
 800ec7c:	4413      	add	r3, r2
 800ec7e:	7a18      	ldrb	r0, [r3, #8]
 800ec80:	683b      	ldr	r3, [r7, #0]
 800ec82:	687a      	ldr	r2, [r7, #4]
 800ec84:	68b9      	ldr	r1, [r7, #8]
 800ec86:	47a0      	blx	r4
 800ec88:	4603      	mov	r3, r0
 800ec8a:	75fb      	strb	r3, [r7, #23]
  return res;
 800ec8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec8e:	4618      	mov	r0, r3
 800ec90:	371c      	adds	r7, #28
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd90      	pop	{r4, r7, pc}
 800ec96:	bf00      	nop
 800ec98:	20004220 	.word	0x20004220

0800ec9c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ec9c:	b590      	push	{r4, r7, lr}
 800ec9e:	b087      	sub	sp, #28
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	60b9      	str	r1, [r7, #8]
 800eca4:	607a      	str	r2, [r7, #4]
 800eca6:	603b      	str	r3, [r7, #0]
 800eca8:	4603      	mov	r3, r0
 800ecaa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ecac:	7bfb      	ldrb	r3, [r7, #15]
 800ecae:	4a0a      	ldr	r2, [pc, #40]	; (800ecd8 <disk_write+0x3c>)
 800ecb0:	009b      	lsls	r3, r3, #2
 800ecb2:	4413      	add	r3, r2
 800ecb4:	685b      	ldr	r3, [r3, #4]
 800ecb6:	68dc      	ldr	r4, [r3, #12]
 800ecb8:	7bfb      	ldrb	r3, [r7, #15]
 800ecba:	4a07      	ldr	r2, [pc, #28]	; (800ecd8 <disk_write+0x3c>)
 800ecbc:	4413      	add	r3, r2
 800ecbe:	7a18      	ldrb	r0, [r3, #8]
 800ecc0:	683b      	ldr	r3, [r7, #0]
 800ecc2:	687a      	ldr	r2, [r7, #4]
 800ecc4:	68b9      	ldr	r1, [r7, #8]
 800ecc6:	47a0      	blx	r4
 800ecc8:	4603      	mov	r3, r0
 800ecca:	75fb      	strb	r3, [r7, #23]
  return res;
 800eccc:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecce:	4618      	mov	r0, r3
 800ecd0:	371c      	adds	r7, #28
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bd90      	pop	{r4, r7, pc}
 800ecd6:	bf00      	nop
 800ecd8:	20004220 	.word	0x20004220

0800ecdc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b084      	sub	sp, #16
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	4603      	mov	r3, r0
 800ece4:	603a      	str	r2, [r7, #0]
 800ece6:	71fb      	strb	r3, [r7, #7]
 800ece8:	460b      	mov	r3, r1
 800ecea:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ecec:	79fb      	ldrb	r3, [r7, #7]
 800ecee:	4a09      	ldr	r2, [pc, #36]	; (800ed14 <disk_ioctl+0x38>)
 800ecf0:	009b      	lsls	r3, r3, #2
 800ecf2:	4413      	add	r3, r2
 800ecf4:	685b      	ldr	r3, [r3, #4]
 800ecf6:	691b      	ldr	r3, [r3, #16]
 800ecf8:	79fa      	ldrb	r2, [r7, #7]
 800ecfa:	4906      	ldr	r1, [pc, #24]	; (800ed14 <disk_ioctl+0x38>)
 800ecfc:	440a      	add	r2, r1
 800ecfe:	7a10      	ldrb	r0, [r2, #8]
 800ed00:	79b9      	ldrb	r1, [r7, #6]
 800ed02:	683a      	ldr	r2, [r7, #0]
 800ed04:	4798      	blx	r3
 800ed06:	4603      	mov	r3, r0
 800ed08:	73fb      	strb	r3, [r7, #15]
  return res;
 800ed0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	3710      	adds	r7, #16
 800ed10:	46bd      	mov	sp, r7
 800ed12:	bd80      	pop	{r7, pc}
 800ed14:	20004220 	.word	0x20004220

0800ed18 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ed18:	b480      	push	{r7}
 800ed1a:	b085      	sub	sp, #20
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	3301      	adds	r3, #1
 800ed24:	781b      	ldrb	r3, [r3, #0]
 800ed26:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ed28:	89fb      	ldrh	r3, [r7, #14]
 800ed2a:	021b      	lsls	r3, r3, #8
 800ed2c:	b21a      	sxth	r2, r3
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	781b      	ldrb	r3, [r3, #0]
 800ed32:	b21b      	sxth	r3, r3
 800ed34:	4313      	orrs	r3, r2
 800ed36:	b21b      	sxth	r3, r3
 800ed38:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ed3a:	89fb      	ldrh	r3, [r7, #14]
}
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	3714      	adds	r7, #20
 800ed40:	46bd      	mov	sp, r7
 800ed42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed46:	4770      	bx	lr

0800ed48 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ed48:	b480      	push	{r7}
 800ed4a:	b085      	sub	sp, #20
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	3303      	adds	r3, #3
 800ed54:	781b      	ldrb	r3, [r3, #0]
 800ed56:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	021b      	lsls	r3, r3, #8
 800ed5c:	687a      	ldr	r2, [r7, #4]
 800ed5e:	3202      	adds	r2, #2
 800ed60:	7812      	ldrb	r2, [r2, #0]
 800ed62:	4313      	orrs	r3, r2
 800ed64:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	021b      	lsls	r3, r3, #8
 800ed6a:	687a      	ldr	r2, [r7, #4]
 800ed6c:	3201      	adds	r2, #1
 800ed6e:	7812      	ldrb	r2, [r2, #0]
 800ed70:	4313      	orrs	r3, r2
 800ed72:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	021b      	lsls	r3, r3, #8
 800ed78:	687a      	ldr	r2, [r7, #4]
 800ed7a:	7812      	ldrb	r2, [r2, #0]
 800ed7c:	4313      	orrs	r3, r2
 800ed7e:	60fb      	str	r3, [r7, #12]
	return rv;
 800ed80:	68fb      	ldr	r3, [r7, #12]
}
 800ed82:	4618      	mov	r0, r3
 800ed84:	3714      	adds	r7, #20
 800ed86:	46bd      	mov	sp, r7
 800ed88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8c:	4770      	bx	lr

0800ed8e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ed8e:	b480      	push	{r7}
 800ed90:	b083      	sub	sp, #12
 800ed92:	af00      	add	r7, sp, #0
 800ed94:	6078      	str	r0, [r7, #4]
 800ed96:	460b      	mov	r3, r1
 800ed98:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	1c5a      	adds	r2, r3, #1
 800ed9e:	607a      	str	r2, [r7, #4]
 800eda0:	887a      	ldrh	r2, [r7, #2]
 800eda2:	b2d2      	uxtb	r2, r2
 800eda4:	701a      	strb	r2, [r3, #0]
 800eda6:	887b      	ldrh	r3, [r7, #2]
 800eda8:	0a1b      	lsrs	r3, r3, #8
 800edaa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	1c5a      	adds	r2, r3, #1
 800edb0:	607a      	str	r2, [r7, #4]
 800edb2:	887a      	ldrh	r2, [r7, #2]
 800edb4:	b2d2      	uxtb	r2, r2
 800edb6:	701a      	strb	r2, [r3, #0]
}
 800edb8:	bf00      	nop
 800edba:	370c      	adds	r7, #12
 800edbc:	46bd      	mov	sp, r7
 800edbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc2:	4770      	bx	lr

0800edc4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800edc4:	b480      	push	{r7}
 800edc6:	b083      	sub	sp, #12
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
 800edcc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	1c5a      	adds	r2, r3, #1
 800edd2:	607a      	str	r2, [r7, #4]
 800edd4:	683a      	ldr	r2, [r7, #0]
 800edd6:	b2d2      	uxtb	r2, r2
 800edd8:	701a      	strb	r2, [r3, #0]
 800edda:	683b      	ldr	r3, [r7, #0]
 800eddc:	0a1b      	lsrs	r3, r3, #8
 800edde:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	1c5a      	adds	r2, r3, #1
 800ede4:	607a      	str	r2, [r7, #4]
 800ede6:	683a      	ldr	r2, [r7, #0]
 800ede8:	b2d2      	uxtb	r2, r2
 800edea:	701a      	strb	r2, [r3, #0]
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	0a1b      	lsrs	r3, r3, #8
 800edf0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	1c5a      	adds	r2, r3, #1
 800edf6:	607a      	str	r2, [r7, #4]
 800edf8:	683a      	ldr	r2, [r7, #0]
 800edfa:	b2d2      	uxtb	r2, r2
 800edfc:	701a      	strb	r2, [r3, #0]
 800edfe:	683b      	ldr	r3, [r7, #0]
 800ee00:	0a1b      	lsrs	r3, r3, #8
 800ee02:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	1c5a      	adds	r2, r3, #1
 800ee08:	607a      	str	r2, [r7, #4]
 800ee0a:	683a      	ldr	r2, [r7, #0]
 800ee0c:	b2d2      	uxtb	r2, r2
 800ee0e:	701a      	strb	r2, [r3, #0]
}
 800ee10:	bf00      	nop
 800ee12:	370c      	adds	r7, #12
 800ee14:	46bd      	mov	sp, r7
 800ee16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1a:	4770      	bx	lr

0800ee1c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ee1c:	b480      	push	{r7}
 800ee1e:	b087      	sub	sp, #28
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	60f8      	str	r0, [r7, #12]
 800ee24:	60b9      	str	r1, [r7, #8]
 800ee26:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ee2c:	68bb      	ldr	r3, [r7, #8]
 800ee2e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d00d      	beq.n	800ee52 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ee36:	693a      	ldr	r2, [r7, #16]
 800ee38:	1c53      	adds	r3, r2, #1
 800ee3a:	613b      	str	r3, [r7, #16]
 800ee3c:	697b      	ldr	r3, [r7, #20]
 800ee3e:	1c59      	adds	r1, r3, #1
 800ee40:	6179      	str	r1, [r7, #20]
 800ee42:	7812      	ldrb	r2, [r2, #0]
 800ee44:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	3b01      	subs	r3, #1
 800ee4a:	607b      	str	r3, [r7, #4]
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d1f1      	bne.n	800ee36 <mem_cpy+0x1a>
	}
}
 800ee52:	bf00      	nop
 800ee54:	371c      	adds	r7, #28
 800ee56:	46bd      	mov	sp, r7
 800ee58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5c:	4770      	bx	lr

0800ee5e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ee5e:	b480      	push	{r7}
 800ee60:	b087      	sub	sp, #28
 800ee62:	af00      	add	r7, sp, #0
 800ee64:	60f8      	str	r0, [r7, #12]
 800ee66:	60b9      	str	r1, [r7, #8]
 800ee68:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ee6e:	697b      	ldr	r3, [r7, #20]
 800ee70:	1c5a      	adds	r2, r3, #1
 800ee72:	617a      	str	r2, [r7, #20]
 800ee74:	68ba      	ldr	r2, [r7, #8]
 800ee76:	b2d2      	uxtb	r2, r2
 800ee78:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	3b01      	subs	r3, #1
 800ee7e:	607b      	str	r3, [r7, #4]
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d1f3      	bne.n	800ee6e <mem_set+0x10>
}
 800ee86:	bf00      	nop
 800ee88:	bf00      	nop
 800ee8a:	371c      	adds	r7, #28
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee92:	4770      	bx	lr

0800ee94 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ee94:	b480      	push	{r7}
 800ee96:	b089      	sub	sp, #36	; 0x24
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	60f8      	str	r0, [r7, #12]
 800ee9c:	60b9      	str	r1, [r7, #8]
 800ee9e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	61fb      	str	r3, [r7, #28]
 800eea4:	68bb      	ldr	r3, [r7, #8]
 800eea6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800eea8:	2300      	movs	r3, #0
 800eeaa:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800eeac:	69fb      	ldr	r3, [r7, #28]
 800eeae:	1c5a      	adds	r2, r3, #1
 800eeb0:	61fa      	str	r2, [r7, #28]
 800eeb2:	781b      	ldrb	r3, [r3, #0]
 800eeb4:	4619      	mov	r1, r3
 800eeb6:	69bb      	ldr	r3, [r7, #24]
 800eeb8:	1c5a      	adds	r2, r3, #1
 800eeba:	61ba      	str	r2, [r7, #24]
 800eebc:	781b      	ldrb	r3, [r3, #0]
 800eebe:	1acb      	subs	r3, r1, r3
 800eec0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	3b01      	subs	r3, #1
 800eec6:	607b      	str	r3, [r7, #4]
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d002      	beq.n	800eed4 <mem_cmp+0x40>
 800eece:	697b      	ldr	r3, [r7, #20]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d0eb      	beq.n	800eeac <mem_cmp+0x18>

	return r;
 800eed4:	697b      	ldr	r3, [r7, #20]
}
 800eed6:	4618      	mov	r0, r3
 800eed8:	3724      	adds	r7, #36	; 0x24
 800eeda:	46bd      	mov	sp, r7
 800eedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee0:	4770      	bx	lr

0800eee2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800eee2:	b480      	push	{r7}
 800eee4:	b083      	sub	sp, #12
 800eee6:	af00      	add	r7, sp, #0
 800eee8:	6078      	str	r0, [r7, #4]
 800eeea:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800eeec:	e002      	b.n	800eef4 <chk_chr+0x12>
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	3301      	adds	r3, #1
 800eef2:	607b      	str	r3, [r7, #4]
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	781b      	ldrb	r3, [r3, #0]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d005      	beq.n	800ef08 <chk_chr+0x26>
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	781b      	ldrb	r3, [r3, #0]
 800ef00:	461a      	mov	r2, r3
 800ef02:	683b      	ldr	r3, [r7, #0]
 800ef04:	4293      	cmp	r3, r2
 800ef06:	d1f2      	bne.n	800eeee <chk_chr+0xc>
	return *str;
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	781b      	ldrb	r3, [r3, #0]
}
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	370c      	adds	r7, #12
 800ef10:	46bd      	mov	sp, r7
 800ef12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef16:	4770      	bx	lr

0800ef18 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ef18:	b480      	push	{r7}
 800ef1a:	b085      	sub	sp, #20
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
 800ef20:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ef22:	2300      	movs	r3, #0
 800ef24:	60bb      	str	r3, [r7, #8]
 800ef26:	68bb      	ldr	r3, [r7, #8]
 800ef28:	60fb      	str	r3, [r7, #12]
 800ef2a:	e029      	b.n	800ef80 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ef2c:	4a27      	ldr	r2, [pc, #156]	; (800efcc <chk_lock+0xb4>)
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	011b      	lsls	r3, r3, #4
 800ef32:	4413      	add	r3, r2
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d01d      	beq.n	800ef76 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ef3a:	4a24      	ldr	r2, [pc, #144]	; (800efcc <chk_lock+0xb4>)
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	011b      	lsls	r3, r3, #4
 800ef40:	4413      	add	r3, r2
 800ef42:	681a      	ldr	r2, [r3, #0]
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	429a      	cmp	r2, r3
 800ef4a:	d116      	bne.n	800ef7a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ef4c:	4a1f      	ldr	r2, [pc, #124]	; (800efcc <chk_lock+0xb4>)
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	011b      	lsls	r3, r3, #4
 800ef52:	4413      	add	r3, r2
 800ef54:	3304      	adds	r3, #4
 800ef56:	681a      	ldr	r2, [r3, #0]
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ef5c:	429a      	cmp	r2, r3
 800ef5e:	d10c      	bne.n	800ef7a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ef60:	4a1a      	ldr	r2, [pc, #104]	; (800efcc <chk_lock+0xb4>)
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	011b      	lsls	r3, r3, #4
 800ef66:	4413      	add	r3, r2
 800ef68:	3308      	adds	r3, #8
 800ef6a:	681a      	ldr	r2, [r3, #0]
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ef70:	429a      	cmp	r2, r3
 800ef72:	d102      	bne.n	800ef7a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ef74:	e007      	b.n	800ef86 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ef76:	2301      	movs	r3, #1
 800ef78:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	3301      	adds	r3, #1
 800ef7e:	60fb      	str	r3, [r7, #12]
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	2b01      	cmp	r3, #1
 800ef84:	d9d2      	bls.n	800ef2c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	2b02      	cmp	r3, #2
 800ef8a:	d109      	bne.n	800efa0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ef8c:	68bb      	ldr	r3, [r7, #8]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d102      	bne.n	800ef98 <chk_lock+0x80>
 800ef92:	683b      	ldr	r3, [r7, #0]
 800ef94:	2b02      	cmp	r3, #2
 800ef96:	d101      	bne.n	800ef9c <chk_lock+0x84>
 800ef98:	2300      	movs	r3, #0
 800ef9a:	e010      	b.n	800efbe <chk_lock+0xa6>
 800ef9c:	2312      	movs	r3, #18
 800ef9e:	e00e      	b.n	800efbe <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d108      	bne.n	800efb8 <chk_lock+0xa0>
 800efa6:	4a09      	ldr	r2, [pc, #36]	; (800efcc <chk_lock+0xb4>)
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	011b      	lsls	r3, r3, #4
 800efac:	4413      	add	r3, r2
 800efae:	330c      	adds	r3, #12
 800efb0:	881b      	ldrh	r3, [r3, #0]
 800efb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800efb6:	d101      	bne.n	800efbc <chk_lock+0xa4>
 800efb8:	2310      	movs	r3, #16
 800efba:	e000      	b.n	800efbe <chk_lock+0xa6>
 800efbc:	2300      	movs	r3, #0
}
 800efbe:	4618      	mov	r0, r3
 800efc0:	3714      	adds	r7, #20
 800efc2:	46bd      	mov	sp, r7
 800efc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc8:	4770      	bx	lr
 800efca:	bf00      	nop
 800efcc:	20004200 	.word	0x20004200

0800efd0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800efd0:	b480      	push	{r7}
 800efd2:	b083      	sub	sp, #12
 800efd4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800efd6:	2300      	movs	r3, #0
 800efd8:	607b      	str	r3, [r7, #4]
 800efda:	e002      	b.n	800efe2 <enq_lock+0x12>
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	3301      	adds	r3, #1
 800efe0:	607b      	str	r3, [r7, #4]
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	2b01      	cmp	r3, #1
 800efe6:	d806      	bhi.n	800eff6 <enq_lock+0x26>
 800efe8:	4a09      	ldr	r2, [pc, #36]	; (800f010 <enq_lock+0x40>)
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	011b      	lsls	r3, r3, #4
 800efee:	4413      	add	r3, r2
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d1f2      	bne.n	800efdc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	2b02      	cmp	r3, #2
 800effa:	bf14      	ite	ne
 800effc:	2301      	movne	r3, #1
 800effe:	2300      	moveq	r3, #0
 800f000:	b2db      	uxtb	r3, r3
}
 800f002:	4618      	mov	r0, r3
 800f004:	370c      	adds	r7, #12
 800f006:	46bd      	mov	sp, r7
 800f008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00c:	4770      	bx	lr
 800f00e:	bf00      	nop
 800f010:	20004200 	.word	0x20004200

0800f014 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f014:	b480      	push	{r7}
 800f016:	b085      	sub	sp, #20
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
 800f01c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f01e:	2300      	movs	r3, #0
 800f020:	60fb      	str	r3, [r7, #12]
 800f022:	e01f      	b.n	800f064 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800f024:	4a41      	ldr	r2, [pc, #260]	; (800f12c <inc_lock+0x118>)
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	011b      	lsls	r3, r3, #4
 800f02a:	4413      	add	r3, r2
 800f02c:	681a      	ldr	r2, [r3, #0]
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	429a      	cmp	r2, r3
 800f034:	d113      	bne.n	800f05e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f036:	4a3d      	ldr	r2, [pc, #244]	; (800f12c <inc_lock+0x118>)
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	011b      	lsls	r3, r3, #4
 800f03c:	4413      	add	r3, r2
 800f03e:	3304      	adds	r3, #4
 800f040:	681a      	ldr	r2, [r3, #0]
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f046:	429a      	cmp	r2, r3
 800f048:	d109      	bne.n	800f05e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f04a:	4a38      	ldr	r2, [pc, #224]	; (800f12c <inc_lock+0x118>)
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	011b      	lsls	r3, r3, #4
 800f050:	4413      	add	r3, r2
 800f052:	3308      	adds	r3, #8
 800f054:	681a      	ldr	r2, [r3, #0]
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f05a:	429a      	cmp	r2, r3
 800f05c:	d006      	beq.n	800f06c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	3301      	adds	r3, #1
 800f062:	60fb      	str	r3, [r7, #12]
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	2b01      	cmp	r3, #1
 800f068:	d9dc      	bls.n	800f024 <inc_lock+0x10>
 800f06a:	e000      	b.n	800f06e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f06c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	2b02      	cmp	r3, #2
 800f072:	d132      	bne.n	800f0da <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f074:	2300      	movs	r3, #0
 800f076:	60fb      	str	r3, [r7, #12]
 800f078:	e002      	b.n	800f080 <inc_lock+0x6c>
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	3301      	adds	r3, #1
 800f07e:	60fb      	str	r3, [r7, #12]
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	2b01      	cmp	r3, #1
 800f084:	d806      	bhi.n	800f094 <inc_lock+0x80>
 800f086:	4a29      	ldr	r2, [pc, #164]	; (800f12c <inc_lock+0x118>)
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	011b      	lsls	r3, r3, #4
 800f08c:	4413      	add	r3, r2
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d1f2      	bne.n	800f07a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	2b02      	cmp	r3, #2
 800f098:	d101      	bne.n	800f09e <inc_lock+0x8a>
 800f09a:	2300      	movs	r3, #0
 800f09c:	e040      	b.n	800f120 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	681a      	ldr	r2, [r3, #0]
 800f0a2:	4922      	ldr	r1, [pc, #136]	; (800f12c <inc_lock+0x118>)
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	011b      	lsls	r3, r3, #4
 800f0a8:	440b      	add	r3, r1
 800f0aa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	689a      	ldr	r2, [r3, #8]
 800f0b0:	491e      	ldr	r1, [pc, #120]	; (800f12c <inc_lock+0x118>)
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	011b      	lsls	r3, r3, #4
 800f0b6:	440b      	add	r3, r1
 800f0b8:	3304      	adds	r3, #4
 800f0ba:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	695a      	ldr	r2, [r3, #20]
 800f0c0:	491a      	ldr	r1, [pc, #104]	; (800f12c <inc_lock+0x118>)
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	011b      	lsls	r3, r3, #4
 800f0c6:	440b      	add	r3, r1
 800f0c8:	3308      	adds	r3, #8
 800f0ca:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f0cc:	4a17      	ldr	r2, [pc, #92]	; (800f12c <inc_lock+0x118>)
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	011b      	lsls	r3, r3, #4
 800f0d2:	4413      	add	r3, r2
 800f0d4:	330c      	adds	r3, #12
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f0da:	683b      	ldr	r3, [r7, #0]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d009      	beq.n	800f0f4 <inc_lock+0xe0>
 800f0e0:	4a12      	ldr	r2, [pc, #72]	; (800f12c <inc_lock+0x118>)
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	011b      	lsls	r3, r3, #4
 800f0e6:	4413      	add	r3, r2
 800f0e8:	330c      	adds	r3, #12
 800f0ea:	881b      	ldrh	r3, [r3, #0]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d001      	beq.n	800f0f4 <inc_lock+0xe0>
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	e015      	b.n	800f120 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f0f4:	683b      	ldr	r3, [r7, #0]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d108      	bne.n	800f10c <inc_lock+0xf8>
 800f0fa:	4a0c      	ldr	r2, [pc, #48]	; (800f12c <inc_lock+0x118>)
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	011b      	lsls	r3, r3, #4
 800f100:	4413      	add	r3, r2
 800f102:	330c      	adds	r3, #12
 800f104:	881b      	ldrh	r3, [r3, #0]
 800f106:	3301      	adds	r3, #1
 800f108:	b29a      	uxth	r2, r3
 800f10a:	e001      	b.n	800f110 <inc_lock+0xfc>
 800f10c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f110:	4906      	ldr	r1, [pc, #24]	; (800f12c <inc_lock+0x118>)
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	011b      	lsls	r3, r3, #4
 800f116:	440b      	add	r3, r1
 800f118:	330c      	adds	r3, #12
 800f11a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	3301      	adds	r3, #1
}
 800f120:	4618      	mov	r0, r3
 800f122:	3714      	adds	r7, #20
 800f124:	46bd      	mov	sp, r7
 800f126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12a:	4770      	bx	lr
 800f12c:	20004200 	.word	0x20004200

0800f130 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800f130:	b480      	push	{r7}
 800f132:	b085      	sub	sp, #20
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	3b01      	subs	r3, #1
 800f13c:	607b      	str	r3, [r7, #4]
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	2b01      	cmp	r3, #1
 800f142:	d825      	bhi.n	800f190 <dec_lock+0x60>
		n = Files[i].ctr;
 800f144:	4a17      	ldr	r2, [pc, #92]	; (800f1a4 <dec_lock+0x74>)
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	011b      	lsls	r3, r3, #4
 800f14a:	4413      	add	r3, r2
 800f14c:	330c      	adds	r3, #12
 800f14e:	881b      	ldrh	r3, [r3, #0]
 800f150:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f152:	89fb      	ldrh	r3, [r7, #14]
 800f154:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f158:	d101      	bne.n	800f15e <dec_lock+0x2e>
 800f15a:	2300      	movs	r3, #0
 800f15c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800f15e:	89fb      	ldrh	r3, [r7, #14]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d002      	beq.n	800f16a <dec_lock+0x3a>
 800f164:	89fb      	ldrh	r3, [r7, #14]
 800f166:	3b01      	subs	r3, #1
 800f168:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800f16a:	4a0e      	ldr	r2, [pc, #56]	; (800f1a4 <dec_lock+0x74>)
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	011b      	lsls	r3, r3, #4
 800f170:	4413      	add	r3, r2
 800f172:	330c      	adds	r3, #12
 800f174:	89fa      	ldrh	r2, [r7, #14]
 800f176:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f178:	89fb      	ldrh	r3, [r7, #14]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d105      	bne.n	800f18a <dec_lock+0x5a>
 800f17e:	4a09      	ldr	r2, [pc, #36]	; (800f1a4 <dec_lock+0x74>)
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	011b      	lsls	r3, r3, #4
 800f184:	4413      	add	r3, r2
 800f186:	2200      	movs	r2, #0
 800f188:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800f18a:	2300      	movs	r3, #0
 800f18c:	737b      	strb	r3, [r7, #13]
 800f18e:	e001      	b.n	800f194 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f190:	2302      	movs	r3, #2
 800f192:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800f194:	7b7b      	ldrb	r3, [r7, #13]
}
 800f196:	4618      	mov	r0, r3
 800f198:	3714      	adds	r7, #20
 800f19a:	46bd      	mov	sp, r7
 800f19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a0:	4770      	bx	lr
 800f1a2:	bf00      	nop
 800f1a4:	20004200 	.word	0x20004200

0800f1a8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f1a8:	b480      	push	{r7}
 800f1aa:	b085      	sub	sp, #20
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	60fb      	str	r3, [r7, #12]
 800f1b4:	e010      	b.n	800f1d8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f1b6:	4a0d      	ldr	r2, [pc, #52]	; (800f1ec <clear_lock+0x44>)
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	011b      	lsls	r3, r3, #4
 800f1bc:	4413      	add	r3, r2
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	687a      	ldr	r2, [r7, #4]
 800f1c2:	429a      	cmp	r2, r3
 800f1c4:	d105      	bne.n	800f1d2 <clear_lock+0x2a>
 800f1c6:	4a09      	ldr	r2, [pc, #36]	; (800f1ec <clear_lock+0x44>)
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	011b      	lsls	r3, r3, #4
 800f1cc:	4413      	add	r3, r2
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	3301      	adds	r3, #1
 800f1d6:	60fb      	str	r3, [r7, #12]
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	2b01      	cmp	r3, #1
 800f1dc:	d9eb      	bls.n	800f1b6 <clear_lock+0xe>
	}
}
 800f1de:	bf00      	nop
 800f1e0:	bf00      	nop
 800f1e2:	3714      	adds	r7, #20
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ea:	4770      	bx	lr
 800f1ec:	20004200 	.word	0x20004200

0800f1f0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b086      	sub	sp, #24
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	78db      	ldrb	r3, [r3, #3]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d034      	beq.n	800f26e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f208:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	7858      	ldrb	r0, [r3, #1]
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f214:	2301      	movs	r3, #1
 800f216:	697a      	ldr	r2, [r7, #20]
 800f218:	f7ff fd40 	bl	800ec9c <disk_write>
 800f21c:	4603      	mov	r3, r0
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d002      	beq.n	800f228 <sync_window+0x38>
			res = FR_DISK_ERR;
 800f222:	2301      	movs	r3, #1
 800f224:	73fb      	strb	r3, [r7, #15]
 800f226:	e022      	b.n	800f26e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	2200      	movs	r2, #0
 800f22c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	6a1b      	ldr	r3, [r3, #32]
 800f232:	697a      	ldr	r2, [r7, #20]
 800f234:	1ad2      	subs	r2, r2, r3
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	699b      	ldr	r3, [r3, #24]
 800f23a:	429a      	cmp	r2, r3
 800f23c:	d217      	bcs.n	800f26e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	789b      	ldrb	r3, [r3, #2]
 800f242:	613b      	str	r3, [r7, #16]
 800f244:	e010      	b.n	800f268 <sync_window+0x78>
					wsect += fs->fsize;
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	699b      	ldr	r3, [r3, #24]
 800f24a:	697a      	ldr	r2, [r7, #20]
 800f24c:	4413      	add	r3, r2
 800f24e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	7858      	ldrb	r0, [r3, #1]
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f25a:	2301      	movs	r3, #1
 800f25c:	697a      	ldr	r2, [r7, #20]
 800f25e:	f7ff fd1d 	bl	800ec9c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f262:	693b      	ldr	r3, [r7, #16]
 800f264:	3b01      	subs	r3, #1
 800f266:	613b      	str	r3, [r7, #16]
 800f268:	693b      	ldr	r3, [r7, #16]
 800f26a:	2b01      	cmp	r3, #1
 800f26c:	d8eb      	bhi.n	800f246 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800f26e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f270:	4618      	mov	r0, r3
 800f272:	3718      	adds	r7, #24
 800f274:	46bd      	mov	sp, r7
 800f276:	bd80      	pop	{r7, pc}

0800f278 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b084      	sub	sp, #16
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]
 800f280:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800f282:	2300      	movs	r3, #0
 800f284:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f28a:	683a      	ldr	r2, [r7, #0]
 800f28c:	429a      	cmp	r2, r3
 800f28e:	d01b      	beq.n	800f2c8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800f290:	6878      	ldr	r0, [r7, #4]
 800f292:	f7ff ffad 	bl	800f1f0 <sync_window>
 800f296:	4603      	mov	r3, r0
 800f298:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800f29a:	7bfb      	ldrb	r3, [r7, #15]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d113      	bne.n	800f2c8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	7858      	ldrb	r0, [r3, #1]
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f2aa:	2301      	movs	r3, #1
 800f2ac:	683a      	ldr	r2, [r7, #0]
 800f2ae:	f7ff fcd5 	bl	800ec5c <disk_read>
 800f2b2:	4603      	mov	r3, r0
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d004      	beq.n	800f2c2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800f2b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f2bc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800f2be:	2301      	movs	r3, #1
 800f2c0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	683a      	ldr	r2, [r7, #0]
 800f2c6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800f2c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	3710      	adds	r7, #16
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	bd80      	pop	{r7, pc}
	...

0800f2d4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	b084      	sub	sp, #16
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800f2dc:	6878      	ldr	r0, [r7, #4]
 800f2de:	f7ff ff87 	bl	800f1f0 <sync_window>
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f2e6:	7bfb      	ldrb	r3, [r7, #15]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d158      	bne.n	800f39e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	781b      	ldrb	r3, [r3, #0]
 800f2f0:	2b03      	cmp	r3, #3
 800f2f2:	d148      	bne.n	800f386 <sync_fs+0xb2>
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	791b      	ldrb	r3, [r3, #4]
 800f2f8:	2b01      	cmp	r3, #1
 800f2fa:	d144      	bne.n	800f386 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	3330      	adds	r3, #48	; 0x30
 800f300:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f304:	2100      	movs	r1, #0
 800f306:	4618      	mov	r0, r3
 800f308:	f7ff fda9 	bl	800ee5e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	3330      	adds	r3, #48	; 0x30
 800f310:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f314:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f318:	4618      	mov	r0, r3
 800f31a:	f7ff fd38 	bl	800ed8e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	3330      	adds	r3, #48	; 0x30
 800f322:	4921      	ldr	r1, [pc, #132]	; (800f3a8 <sync_fs+0xd4>)
 800f324:	4618      	mov	r0, r3
 800f326:	f7ff fd4d 	bl	800edc4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	3330      	adds	r3, #48	; 0x30
 800f32e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f332:	491e      	ldr	r1, [pc, #120]	; (800f3ac <sync_fs+0xd8>)
 800f334:	4618      	mov	r0, r3
 800f336:	f7ff fd45 	bl	800edc4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	3330      	adds	r3, #48	; 0x30
 800f33e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	691b      	ldr	r3, [r3, #16]
 800f346:	4619      	mov	r1, r3
 800f348:	4610      	mov	r0, r2
 800f34a:	f7ff fd3b 	bl	800edc4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	3330      	adds	r3, #48	; 0x30
 800f352:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	68db      	ldr	r3, [r3, #12]
 800f35a:	4619      	mov	r1, r3
 800f35c:	4610      	mov	r0, r2
 800f35e:	f7ff fd31 	bl	800edc4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	69db      	ldr	r3, [r3, #28]
 800f366:	1c5a      	adds	r2, r3, #1
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	7858      	ldrb	r0, [r3, #1]
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f37a:	2301      	movs	r3, #1
 800f37c:	f7ff fc8e 	bl	800ec9c <disk_write>
			fs->fsi_flag = 0;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2200      	movs	r2, #0
 800f384:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	785b      	ldrb	r3, [r3, #1]
 800f38a:	2200      	movs	r2, #0
 800f38c:	2100      	movs	r1, #0
 800f38e:	4618      	mov	r0, r3
 800f390:	f7ff fca4 	bl	800ecdc <disk_ioctl>
 800f394:	4603      	mov	r3, r0
 800f396:	2b00      	cmp	r3, #0
 800f398:	d001      	beq.n	800f39e <sync_fs+0xca>
 800f39a:	2301      	movs	r3, #1
 800f39c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f39e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	3710      	adds	r7, #16
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	bd80      	pop	{r7, pc}
 800f3a8:	41615252 	.word	0x41615252
 800f3ac:	61417272 	.word	0x61417272

0800f3b0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f3b0:	b480      	push	{r7}
 800f3b2:	b083      	sub	sp, #12
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
 800f3b8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f3ba:	683b      	ldr	r3, [r7, #0]
 800f3bc:	3b02      	subs	r3, #2
 800f3be:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	695b      	ldr	r3, [r3, #20]
 800f3c4:	3b02      	subs	r3, #2
 800f3c6:	683a      	ldr	r2, [r7, #0]
 800f3c8:	429a      	cmp	r2, r3
 800f3ca:	d301      	bcc.n	800f3d0 <clust2sect+0x20>
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	e008      	b.n	800f3e2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	895b      	ldrh	r3, [r3, #10]
 800f3d4:	461a      	mov	r2, r3
 800f3d6:	683b      	ldr	r3, [r7, #0]
 800f3d8:	fb03 f202 	mul.w	r2, r3, r2
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3e0:	4413      	add	r3, r2
}
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	370c      	adds	r7, #12
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ec:	4770      	bx	lr

0800f3ee <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800f3ee:	b580      	push	{r7, lr}
 800f3f0:	b086      	sub	sp, #24
 800f3f2:	af00      	add	r7, sp, #0
 800f3f4:	6078      	str	r0, [r7, #4]
 800f3f6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f3fe:	683b      	ldr	r3, [r7, #0]
 800f400:	2b01      	cmp	r3, #1
 800f402:	d904      	bls.n	800f40e <get_fat+0x20>
 800f404:	693b      	ldr	r3, [r7, #16]
 800f406:	695b      	ldr	r3, [r3, #20]
 800f408:	683a      	ldr	r2, [r7, #0]
 800f40a:	429a      	cmp	r2, r3
 800f40c:	d302      	bcc.n	800f414 <get_fat+0x26>
		val = 1;	/* Internal error */
 800f40e:	2301      	movs	r3, #1
 800f410:	617b      	str	r3, [r7, #20]
 800f412:	e091      	b.n	800f538 <get_fat+0x14a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f414:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f418:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f41a:	693b      	ldr	r3, [r7, #16]
 800f41c:	781b      	ldrb	r3, [r3, #0]
 800f41e:	2b03      	cmp	r3, #3
 800f420:	d063      	beq.n	800f4ea <get_fat+0xfc>
 800f422:	2b03      	cmp	r3, #3
 800f424:	dc7e      	bgt.n	800f524 <get_fat+0x136>
 800f426:	2b01      	cmp	r3, #1
 800f428:	d002      	beq.n	800f430 <get_fat+0x42>
 800f42a:	2b02      	cmp	r3, #2
 800f42c:	d042      	beq.n	800f4b4 <get_fat+0xc6>
 800f42e:	e079      	b.n	800f524 <get_fat+0x136>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f430:	683b      	ldr	r3, [r7, #0]
 800f432:	60fb      	str	r3, [r7, #12]
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	085b      	lsrs	r3, r3, #1
 800f438:	68fa      	ldr	r2, [r7, #12]
 800f43a:	4413      	add	r3, r2
 800f43c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f43e:	693b      	ldr	r3, [r7, #16]
 800f440:	6a1a      	ldr	r2, [r3, #32]
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	0b1b      	lsrs	r3, r3, #12
 800f446:	4413      	add	r3, r2
 800f448:	4619      	mov	r1, r3
 800f44a:	6938      	ldr	r0, [r7, #16]
 800f44c:	f7ff ff14 	bl	800f278 <move_window>
 800f450:	4603      	mov	r3, r0
 800f452:	2b00      	cmp	r3, #0
 800f454:	d169      	bne.n	800f52a <get_fat+0x13c>
			wc = fs->win[bc++ % SS(fs)];
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	1c5a      	adds	r2, r3, #1
 800f45a:	60fa      	str	r2, [r7, #12]
 800f45c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f460:	693a      	ldr	r2, [r7, #16]
 800f462:	4413      	add	r3, r2
 800f464:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f468:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f46a:	693b      	ldr	r3, [r7, #16]
 800f46c:	6a1a      	ldr	r2, [r3, #32]
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	0b1b      	lsrs	r3, r3, #12
 800f472:	4413      	add	r3, r2
 800f474:	4619      	mov	r1, r3
 800f476:	6938      	ldr	r0, [r7, #16]
 800f478:	f7ff fefe 	bl	800f278 <move_window>
 800f47c:	4603      	mov	r3, r0
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d155      	bne.n	800f52e <get_fat+0x140>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f488:	693a      	ldr	r2, [r7, #16]
 800f48a:	4413      	add	r3, r2
 800f48c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f490:	021b      	lsls	r3, r3, #8
 800f492:	461a      	mov	r2, r3
 800f494:	68bb      	ldr	r3, [r7, #8]
 800f496:	4313      	orrs	r3, r2
 800f498:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f49a:	683b      	ldr	r3, [r7, #0]
 800f49c:	f003 0301 	and.w	r3, r3, #1
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d002      	beq.n	800f4aa <get_fat+0xbc>
 800f4a4:	68bb      	ldr	r3, [r7, #8]
 800f4a6:	091b      	lsrs	r3, r3, #4
 800f4a8:	e002      	b.n	800f4b0 <get_fat+0xc2>
 800f4aa:	68bb      	ldr	r3, [r7, #8]
 800f4ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f4b0:	617b      	str	r3, [r7, #20]
			break;
 800f4b2:	e041      	b.n	800f538 <get_fat+0x14a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f4b4:	693b      	ldr	r3, [r7, #16]
 800f4b6:	6a1a      	ldr	r2, [r3, #32]
 800f4b8:	683b      	ldr	r3, [r7, #0]
 800f4ba:	0adb      	lsrs	r3, r3, #11
 800f4bc:	4413      	add	r3, r2
 800f4be:	4619      	mov	r1, r3
 800f4c0:	6938      	ldr	r0, [r7, #16]
 800f4c2:	f7ff fed9 	bl	800f278 <move_window>
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d132      	bne.n	800f532 <get_fat+0x144>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f4cc:	693b      	ldr	r3, [r7, #16]
 800f4ce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f4d2:	683b      	ldr	r3, [r7, #0]
 800f4d4:	0059      	lsls	r1, r3, #1
 800f4d6:	f640 73fe 	movw	r3, #4094	; 0xffe
 800f4da:	400b      	ands	r3, r1
 800f4dc:	4413      	add	r3, r2
 800f4de:	4618      	mov	r0, r3
 800f4e0:	f7ff fc1a 	bl	800ed18 <ld_word>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	617b      	str	r3, [r7, #20]
			break;
 800f4e8:	e026      	b.n	800f538 <get_fat+0x14a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f4ea:	693b      	ldr	r3, [r7, #16]
 800f4ec:	6a1a      	ldr	r2, [r3, #32]
 800f4ee:	683b      	ldr	r3, [r7, #0]
 800f4f0:	0a9b      	lsrs	r3, r3, #10
 800f4f2:	4413      	add	r3, r2
 800f4f4:	4619      	mov	r1, r3
 800f4f6:	6938      	ldr	r0, [r7, #16]
 800f4f8:	f7ff febe 	bl	800f278 <move_window>
 800f4fc:	4603      	mov	r3, r0
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d119      	bne.n	800f536 <get_fat+0x148>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f502:	693b      	ldr	r3, [r7, #16]
 800f504:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f508:	683b      	ldr	r3, [r7, #0]
 800f50a:	0099      	lsls	r1, r3, #2
 800f50c:	f640 73fc 	movw	r3, #4092	; 0xffc
 800f510:	400b      	ands	r3, r1
 800f512:	4413      	add	r3, r2
 800f514:	4618      	mov	r0, r3
 800f516:	f7ff fc17 	bl	800ed48 <ld_dword>
 800f51a:	4603      	mov	r3, r0
 800f51c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f520:	617b      	str	r3, [r7, #20]
			break;
 800f522:	e009      	b.n	800f538 <get_fat+0x14a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f524:	2301      	movs	r3, #1
 800f526:	617b      	str	r3, [r7, #20]
 800f528:	e006      	b.n	800f538 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f52a:	bf00      	nop
 800f52c:	e004      	b.n	800f538 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f52e:	bf00      	nop
 800f530:	e002      	b.n	800f538 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f532:	bf00      	nop
 800f534:	e000      	b.n	800f538 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f536:	bf00      	nop
		}
	}

	return val;
 800f538:	697b      	ldr	r3, [r7, #20]
}
 800f53a:	4618      	mov	r0, r3
 800f53c:	3718      	adds	r7, #24
 800f53e:	46bd      	mov	sp, r7
 800f540:	bd80      	pop	{r7, pc}

0800f542 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f542:	b590      	push	{r4, r7, lr}
 800f544:	b089      	sub	sp, #36	; 0x24
 800f546:	af00      	add	r7, sp, #0
 800f548:	60f8      	str	r0, [r7, #12]
 800f54a:	60b9      	str	r1, [r7, #8]
 800f54c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f54e:	2302      	movs	r3, #2
 800f550:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f552:	68bb      	ldr	r3, [r7, #8]
 800f554:	2b01      	cmp	r3, #1
 800f556:	f240 80d5 	bls.w	800f704 <put_fat+0x1c2>
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	695b      	ldr	r3, [r3, #20]
 800f55e:	68ba      	ldr	r2, [r7, #8]
 800f560:	429a      	cmp	r2, r3
 800f562:	f080 80cf 	bcs.w	800f704 <put_fat+0x1c2>
		switch (fs->fs_type) {
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	781b      	ldrb	r3, [r3, #0]
 800f56a:	2b03      	cmp	r3, #3
 800f56c:	f000 8097 	beq.w	800f69e <put_fat+0x15c>
 800f570:	2b03      	cmp	r3, #3
 800f572:	f300 80d0 	bgt.w	800f716 <put_fat+0x1d4>
 800f576:	2b01      	cmp	r3, #1
 800f578:	d002      	beq.n	800f580 <put_fat+0x3e>
 800f57a:	2b02      	cmp	r3, #2
 800f57c:	d06e      	beq.n	800f65c <put_fat+0x11a>
 800f57e:	e0ca      	b.n	800f716 <put_fat+0x1d4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f580:	68bb      	ldr	r3, [r7, #8]
 800f582:	61bb      	str	r3, [r7, #24]
 800f584:	69bb      	ldr	r3, [r7, #24]
 800f586:	085b      	lsrs	r3, r3, #1
 800f588:	69ba      	ldr	r2, [r7, #24]
 800f58a:	4413      	add	r3, r2
 800f58c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	6a1a      	ldr	r2, [r3, #32]
 800f592:	69bb      	ldr	r3, [r7, #24]
 800f594:	0b1b      	lsrs	r3, r3, #12
 800f596:	4413      	add	r3, r2
 800f598:	4619      	mov	r1, r3
 800f59a:	68f8      	ldr	r0, [r7, #12]
 800f59c:	f7ff fe6c 	bl	800f278 <move_window>
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f5a4:	7ffb      	ldrb	r3, [r7, #31]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	f040 80ae 	bne.w	800f708 <put_fat+0x1c6>
			p = fs->win + bc++ % SS(fs);
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f5b2:	69bb      	ldr	r3, [r7, #24]
 800f5b4:	1c59      	adds	r1, r3, #1
 800f5b6:	61b9      	str	r1, [r7, #24]
 800f5b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f5bc:	4413      	add	r3, r2
 800f5be:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f5c0:	68bb      	ldr	r3, [r7, #8]
 800f5c2:	f003 0301 	and.w	r3, r3, #1
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d00d      	beq.n	800f5e6 <put_fat+0xa4>
 800f5ca:	697b      	ldr	r3, [r7, #20]
 800f5cc:	781b      	ldrb	r3, [r3, #0]
 800f5ce:	b25b      	sxtb	r3, r3
 800f5d0:	f003 030f 	and.w	r3, r3, #15
 800f5d4:	b25a      	sxtb	r2, r3
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	b2db      	uxtb	r3, r3
 800f5da:	011b      	lsls	r3, r3, #4
 800f5dc:	b25b      	sxtb	r3, r3
 800f5de:	4313      	orrs	r3, r2
 800f5e0:	b25b      	sxtb	r3, r3
 800f5e2:	b2db      	uxtb	r3, r3
 800f5e4:	e001      	b.n	800f5ea <put_fat+0xa8>
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	b2db      	uxtb	r3, r3
 800f5ea:	697a      	ldr	r2, [r7, #20]
 800f5ec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	2201      	movs	r2, #1
 800f5f2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	6a1a      	ldr	r2, [r3, #32]
 800f5f8:	69bb      	ldr	r3, [r7, #24]
 800f5fa:	0b1b      	lsrs	r3, r3, #12
 800f5fc:	4413      	add	r3, r2
 800f5fe:	4619      	mov	r1, r3
 800f600:	68f8      	ldr	r0, [r7, #12]
 800f602:	f7ff fe39 	bl	800f278 <move_window>
 800f606:	4603      	mov	r3, r0
 800f608:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f60a:	7ffb      	ldrb	r3, [r7, #31]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d17d      	bne.n	800f70c <put_fat+0x1ca>
			p = fs->win + bc % SS(fs);
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f616:	69bb      	ldr	r3, [r7, #24]
 800f618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f61c:	4413      	add	r3, r2
 800f61e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f620:	68bb      	ldr	r3, [r7, #8]
 800f622:	f003 0301 	and.w	r3, r3, #1
 800f626:	2b00      	cmp	r3, #0
 800f628:	d003      	beq.n	800f632 <put_fat+0xf0>
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	091b      	lsrs	r3, r3, #4
 800f62e:	b2db      	uxtb	r3, r3
 800f630:	e00e      	b.n	800f650 <put_fat+0x10e>
 800f632:	697b      	ldr	r3, [r7, #20]
 800f634:	781b      	ldrb	r3, [r3, #0]
 800f636:	b25b      	sxtb	r3, r3
 800f638:	f023 030f 	bic.w	r3, r3, #15
 800f63c:	b25a      	sxtb	r2, r3
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	0a1b      	lsrs	r3, r3, #8
 800f642:	b25b      	sxtb	r3, r3
 800f644:	f003 030f 	and.w	r3, r3, #15
 800f648:	b25b      	sxtb	r3, r3
 800f64a:	4313      	orrs	r3, r2
 800f64c:	b25b      	sxtb	r3, r3
 800f64e:	b2db      	uxtb	r3, r3
 800f650:	697a      	ldr	r2, [r7, #20]
 800f652:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	2201      	movs	r2, #1
 800f658:	70da      	strb	r2, [r3, #3]
			break;
 800f65a:	e05c      	b.n	800f716 <put_fat+0x1d4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	6a1a      	ldr	r2, [r3, #32]
 800f660:	68bb      	ldr	r3, [r7, #8]
 800f662:	0adb      	lsrs	r3, r3, #11
 800f664:	4413      	add	r3, r2
 800f666:	4619      	mov	r1, r3
 800f668:	68f8      	ldr	r0, [r7, #12]
 800f66a:	f7ff fe05 	bl	800f278 <move_window>
 800f66e:	4603      	mov	r3, r0
 800f670:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f672:	7ffb      	ldrb	r3, [r7, #31]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d14b      	bne.n	800f710 <put_fat+0x1ce>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f67e:	68bb      	ldr	r3, [r7, #8]
 800f680:	0059      	lsls	r1, r3, #1
 800f682:	f640 73fe 	movw	r3, #4094	; 0xffe
 800f686:	400b      	ands	r3, r1
 800f688:	4413      	add	r3, r2
 800f68a:	687a      	ldr	r2, [r7, #4]
 800f68c:	b292      	uxth	r2, r2
 800f68e:	4611      	mov	r1, r2
 800f690:	4618      	mov	r0, r3
 800f692:	f7ff fb7c 	bl	800ed8e <st_word>
			fs->wflag = 1;
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	2201      	movs	r2, #1
 800f69a:	70da      	strb	r2, [r3, #3]
			break;
 800f69c:	e03b      	b.n	800f716 <put_fat+0x1d4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	6a1a      	ldr	r2, [r3, #32]
 800f6a2:	68bb      	ldr	r3, [r7, #8]
 800f6a4:	0a9b      	lsrs	r3, r3, #10
 800f6a6:	4413      	add	r3, r2
 800f6a8:	4619      	mov	r1, r3
 800f6aa:	68f8      	ldr	r0, [r7, #12]
 800f6ac:	f7ff fde4 	bl	800f278 <move_window>
 800f6b0:	4603      	mov	r3, r0
 800f6b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f6b4:	7ffb      	ldrb	r3, [r7, #31]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d12c      	bne.n	800f714 <put_fat+0x1d2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f6c6:	68bb      	ldr	r3, [r7, #8]
 800f6c8:	0099      	lsls	r1, r3, #2
 800f6ca:	f640 73fc 	movw	r3, #4092	; 0xffc
 800f6ce:	400b      	ands	r3, r1
 800f6d0:	4413      	add	r3, r2
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	f7ff fb38 	bl	800ed48 <ld_dword>
 800f6d8:	4603      	mov	r3, r0
 800f6da:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f6de:	4323      	orrs	r3, r4
 800f6e0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f6e8:	68bb      	ldr	r3, [r7, #8]
 800f6ea:	0099      	lsls	r1, r3, #2
 800f6ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 800f6f0:	400b      	ands	r3, r1
 800f6f2:	4413      	add	r3, r2
 800f6f4:	6879      	ldr	r1, [r7, #4]
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	f7ff fb64 	bl	800edc4 <st_dword>
			fs->wflag = 1;
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	2201      	movs	r2, #1
 800f700:	70da      	strb	r2, [r3, #3]
			break;
 800f702:	e008      	b.n	800f716 <put_fat+0x1d4>
		}
	}
 800f704:	bf00      	nop
 800f706:	e006      	b.n	800f716 <put_fat+0x1d4>
			if (res != FR_OK) break;
 800f708:	bf00      	nop
 800f70a:	e004      	b.n	800f716 <put_fat+0x1d4>
			if (res != FR_OK) break;
 800f70c:	bf00      	nop
 800f70e:	e002      	b.n	800f716 <put_fat+0x1d4>
			if (res != FR_OK) break;
 800f710:	bf00      	nop
 800f712:	e000      	b.n	800f716 <put_fat+0x1d4>
			if (res != FR_OK) break;
 800f714:	bf00      	nop
	return res;
 800f716:	7ffb      	ldrb	r3, [r7, #31]
}
 800f718:	4618      	mov	r0, r3
 800f71a:	3724      	adds	r7, #36	; 0x24
 800f71c:	46bd      	mov	sp, r7
 800f71e:	bd90      	pop	{r4, r7, pc}

0800f720 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b088      	sub	sp, #32
 800f724:	af00      	add	r7, sp, #0
 800f726:	60f8      	str	r0, [r7, #12]
 800f728:	60b9      	str	r1, [r7, #8]
 800f72a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f72c:	2300      	movs	r3, #0
 800f72e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f736:	68bb      	ldr	r3, [r7, #8]
 800f738:	2b01      	cmp	r3, #1
 800f73a:	d904      	bls.n	800f746 <remove_chain+0x26>
 800f73c:	69bb      	ldr	r3, [r7, #24]
 800f73e:	695b      	ldr	r3, [r3, #20]
 800f740:	68ba      	ldr	r2, [r7, #8]
 800f742:	429a      	cmp	r2, r3
 800f744:	d301      	bcc.n	800f74a <remove_chain+0x2a>
 800f746:	2302      	movs	r3, #2
 800f748:	e04b      	b.n	800f7e2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d00c      	beq.n	800f76a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f750:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f754:	6879      	ldr	r1, [r7, #4]
 800f756:	69b8      	ldr	r0, [r7, #24]
 800f758:	f7ff fef3 	bl	800f542 <put_fat>
 800f75c:	4603      	mov	r3, r0
 800f75e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f760:	7ffb      	ldrb	r3, [r7, #31]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d001      	beq.n	800f76a <remove_chain+0x4a>
 800f766:	7ffb      	ldrb	r3, [r7, #31]
 800f768:	e03b      	b.n	800f7e2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f76a:	68b9      	ldr	r1, [r7, #8]
 800f76c:	68f8      	ldr	r0, [r7, #12]
 800f76e:	f7ff fe3e 	bl	800f3ee <get_fat>
 800f772:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f774:	697b      	ldr	r3, [r7, #20]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d031      	beq.n	800f7de <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f77a:	697b      	ldr	r3, [r7, #20]
 800f77c:	2b01      	cmp	r3, #1
 800f77e:	d101      	bne.n	800f784 <remove_chain+0x64>
 800f780:	2302      	movs	r3, #2
 800f782:	e02e      	b.n	800f7e2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f784:	697b      	ldr	r3, [r7, #20]
 800f786:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f78a:	d101      	bne.n	800f790 <remove_chain+0x70>
 800f78c:	2301      	movs	r3, #1
 800f78e:	e028      	b.n	800f7e2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f790:	2200      	movs	r2, #0
 800f792:	68b9      	ldr	r1, [r7, #8]
 800f794:	69b8      	ldr	r0, [r7, #24]
 800f796:	f7ff fed4 	bl	800f542 <put_fat>
 800f79a:	4603      	mov	r3, r0
 800f79c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f79e:	7ffb      	ldrb	r3, [r7, #31]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d001      	beq.n	800f7a8 <remove_chain+0x88>
 800f7a4:	7ffb      	ldrb	r3, [r7, #31]
 800f7a6:	e01c      	b.n	800f7e2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f7a8:	69bb      	ldr	r3, [r7, #24]
 800f7aa:	691a      	ldr	r2, [r3, #16]
 800f7ac:	69bb      	ldr	r3, [r7, #24]
 800f7ae:	695b      	ldr	r3, [r3, #20]
 800f7b0:	3b02      	subs	r3, #2
 800f7b2:	429a      	cmp	r2, r3
 800f7b4:	d20b      	bcs.n	800f7ce <remove_chain+0xae>
			fs->free_clst++;
 800f7b6:	69bb      	ldr	r3, [r7, #24]
 800f7b8:	691b      	ldr	r3, [r3, #16]
 800f7ba:	1c5a      	adds	r2, r3, #1
 800f7bc:	69bb      	ldr	r3, [r7, #24]
 800f7be:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800f7c0:	69bb      	ldr	r3, [r7, #24]
 800f7c2:	791b      	ldrb	r3, [r3, #4]
 800f7c4:	f043 0301 	orr.w	r3, r3, #1
 800f7c8:	b2da      	uxtb	r2, r3
 800f7ca:	69bb      	ldr	r3, [r7, #24]
 800f7cc:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f7ce:	697b      	ldr	r3, [r7, #20]
 800f7d0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f7d2:	69bb      	ldr	r3, [r7, #24]
 800f7d4:	695b      	ldr	r3, [r3, #20]
 800f7d6:	68ba      	ldr	r2, [r7, #8]
 800f7d8:	429a      	cmp	r2, r3
 800f7da:	d3c6      	bcc.n	800f76a <remove_chain+0x4a>
 800f7dc:	e000      	b.n	800f7e0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f7de:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f7e0:	2300      	movs	r3, #0
}
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	3720      	adds	r7, #32
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	bd80      	pop	{r7, pc}

0800f7ea <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f7ea:	b580      	push	{r7, lr}
 800f7ec:	b088      	sub	sp, #32
 800f7ee:	af00      	add	r7, sp, #0
 800f7f0:	6078      	str	r0, [r7, #4]
 800f7f2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f7fa:	683b      	ldr	r3, [r7, #0]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d10d      	bne.n	800f81c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f800:	693b      	ldr	r3, [r7, #16]
 800f802:	68db      	ldr	r3, [r3, #12]
 800f804:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f806:	69bb      	ldr	r3, [r7, #24]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d004      	beq.n	800f816 <create_chain+0x2c>
 800f80c:	693b      	ldr	r3, [r7, #16]
 800f80e:	695b      	ldr	r3, [r3, #20]
 800f810:	69ba      	ldr	r2, [r7, #24]
 800f812:	429a      	cmp	r2, r3
 800f814:	d31b      	bcc.n	800f84e <create_chain+0x64>
 800f816:	2301      	movs	r3, #1
 800f818:	61bb      	str	r3, [r7, #24]
 800f81a:	e018      	b.n	800f84e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f81c:	6839      	ldr	r1, [r7, #0]
 800f81e:	6878      	ldr	r0, [r7, #4]
 800f820:	f7ff fde5 	bl	800f3ee <get_fat>
 800f824:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	2b01      	cmp	r3, #1
 800f82a:	d801      	bhi.n	800f830 <create_chain+0x46>
 800f82c:	2301      	movs	r3, #1
 800f82e:	e070      	b.n	800f912 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f836:	d101      	bne.n	800f83c <create_chain+0x52>
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	e06a      	b.n	800f912 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f83c:	693b      	ldr	r3, [r7, #16]
 800f83e:	695b      	ldr	r3, [r3, #20]
 800f840:	68fa      	ldr	r2, [r7, #12]
 800f842:	429a      	cmp	r2, r3
 800f844:	d201      	bcs.n	800f84a <create_chain+0x60>
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	e063      	b.n	800f912 <create_chain+0x128>
		scl = clst;
 800f84a:	683b      	ldr	r3, [r7, #0]
 800f84c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f84e:	69bb      	ldr	r3, [r7, #24]
 800f850:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f852:	69fb      	ldr	r3, [r7, #28]
 800f854:	3301      	adds	r3, #1
 800f856:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f858:	693b      	ldr	r3, [r7, #16]
 800f85a:	695b      	ldr	r3, [r3, #20]
 800f85c:	69fa      	ldr	r2, [r7, #28]
 800f85e:	429a      	cmp	r2, r3
 800f860:	d307      	bcc.n	800f872 <create_chain+0x88>
				ncl = 2;
 800f862:	2302      	movs	r3, #2
 800f864:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f866:	69fa      	ldr	r2, [r7, #28]
 800f868:	69bb      	ldr	r3, [r7, #24]
 800f86a:	429a      	cmp	r2, r3
 800f86c:	d901      	bls.n	800f872 <create_chain+0x88>
 800f86e:	2300      	movs	r3, #0
 800f870:	e04f      	b.n	800f912 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f872:	69f9      	ldr	r1, [r7, #28]
 800f874:	6878      	ldr	r0, [r7, #4]
 800f876:	f7ff fdba 	bl	800f3ee <get_fat>
 800f87a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d00e      	beq.n	800f8a0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	2b01      	cmp	r3, #1
 800f886:	d003      	beq.n	800f890 <create_chain+0xa6>
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f88e:	d101      	bne.n	800f894 <create_chain+0xaa>
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	e03e      	b.n	800f912 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f894:	69fa      	ldr	r2, [r7, #28]
 800f896:	69bb      	ldr	r3, [r7, #24]
 800f898:	429a      	cmp	r2, r3
 800f89a:	d1da      	bne.n	800f852 <create_chain+0x68>
 800f89c:	2300      	movs	r3, #0
 800f89e:	e038      	b.n	800f912 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f8a0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f8a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f8a6:	69f9      	ldr	r1, [r7, #28]
 800f8a8:	6938      	ldr	r0, [r7, #16]
 800f8aa:	f7ff fe4a 	bl	800f542 <put_fat>
 800f8ae:	4603      	mov	r3, r0
 800f8b0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f8b2:	7dfb      	ldrb	r3, [r7, #23]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d109      	bne.n	800f8cc <create_chain+0xe2>
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d006      	beq.n	800f8cc <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f8be:	69fa      	ldr	r2, [r7, #28]
 800f8c0:	6839      	ldr	r1, [r7, #0]
 800f8c2:	6938      	ldr	r0, [r7, #16]
 800f8c4:	f7ff fe3d 	bl	800f542 <put_fat>
 800f8c8:	4603      	mov	r3, r0
 800f8ca:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f8cc:	7dfb      	ldrb	r3, [r7, #23]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d116      	bne.n	800f900 <create_chain+0x116>
		fs->last_clst = ncl;
 800f8d2:	693b      	ldr	r3, [r7, #16]
 800f8d4:	69fa      	ldr	r2, [r7, #28]
 800f8d6:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f8d8:	693b      	ldr	r3, [r7, #16]
 800f8da:	691a      	ldr	r2, [r3, #16]
 800f8dc:	693b      	ldr	r3, [r7, #16]
 800f8de:	695b      	ldr	r3, [r3, #20]
 800f8e0:	3b02      	subs	r3, #2
 800f8e2:	429a      	cmp	r2, r3
 800f8e4:	d804      	bhi.n	800f8f0 <create_chain+0x106>
 800f8e6:	693b      	ldr	r3, [r7, #16]
 800f8e8:	691b      	ldr	r3, [r3, #16]
 800f8ea:	1e5a      	subs	r2, r3, #1
 800f8ec:	693b      	ldr	r3, [r7, #16]
 800f8ee:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800f8f0:	693b      	ldr	r3, [r7, #16]
 800f8f2:	791b      	ldrb	r3, [r3, #4]
 800f8f4:	f043 0301 	orr.w	r3, r3, #1
 800f8f8:	b2da      	uxtb	r2, r3
 800f8fa:	693b      	ldr	r3, [r7, #16]
 800f8fc:	711a      	strb	r2, [r3, #4]
 800f8fe:	e007      	b.n	800f910 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f900:	7dfb      	ldrb	r3, [r7, #23]
 800f902:	2b01      	cmp	r3, #1
 800f904:	d102      	bne.n	800f90c <create_chain+0x122>
 800f906:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f90a:	e000      	b.n	800f90e <create_chain+0x124>
 800f90c:	2301      	movs	r3, #1
 800f90e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f910:	69fb      	ldr	r3, [r7, #28]
}
 800f912:	4618      	mov	r0, r3
 800f914:	3720      	adds	r7, #32
 800f916:	46bd      	mov	sp, r7
 800f918:	bd80      	pop	{r7, pc}

0800f91a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f91a:	b480      	push	{r7}
 800f91c:	b087      	sub	sp, #28
 800f91e:	af00      	add	r7, sp, #0
 800f920:	6078      	str	r0, [r7, #4]
 800f922:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f92e:	3304      	adds	r3, #4
 800f930:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f932:	683b      	ldr	r3, [r7, #0]
 800f934:	0b1b      	lsrs	r3, r3, #12
 800f936:	68fa      	ldr	r2, [r7, #12]
 800f938:	8952      	ldrh	r2, [r2, #10]
 800f93a:	fbb3 f3f2 	udiv	r3, r3, r2
 800f93e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f940:	693b      	ldr	r3, [r7, #16]
 800f942:	1d1a      	adds	r2, r3, #4
 800f944:	613a      	str	r2, [r7, #16]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f94a:	68bb      	ldr	r3, [r7, #8]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d101      	bne.n	800f954 <clmt_clust+0x3a>
 800f950:	2300      	movs	r3, #0
 800f952:	e010      	b.n	800f976 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800f954:	697a      	ldr	r2, [r7, #20]
 800f956:	68bb      	ldr	r3, [r7, #8]
 800f958:	429a      	cmp	r2, r3
 800f95a:	d307      	bcc.n	800f96c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800f95c:	697a      	ldr	r2, [r7, #20]
 800f95e:	68bb      	ldr	r3, [r7, #8]
 800f960:	1ad3      	subs	r3, r2, r3
 800f962:	617b      	str	r3, [r7, #20]
 800f964:	693b      	ldr	r3, [r7, #16]
 800f966:	3304      	adds	r3, #4
 800f968:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f96a:	e7e9      	b.n	800f940 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800f96c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f96e:	693b      	ldr	r3, [r7, #16]
 800f970:	681a      	ldr	r2, [r3, #0]
 800f972:	697b      	ldr	r3, [r7, #20]
 800f974:	4413      	add	r3, r2
}
 800f976:	4618      	mov	r0, r3
 800f978:	371c      	adds	r7, #28
 800f97a:	46bd      	mov	sp, r7
 800f97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f980:	4770      	bx	lr

0800f982 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f982:	b580      	push	{r7, lr}
 800f984:	b086      	sub	sp, #24
 800f986:	af00      	add	r7, sp, #0
 800f988:	6078      	str	r0, [r7, #4]
 800f98a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f992:	683b      	ldr	r3, [r7, #0]
 800f994:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f998:	d204      	bcs.n	800f9a4 <dir_sdi+0x22>
 800f99a:	683b      	ldr	r3, [r7, #0]
 800f99c:	f003 031f 	and.w	r3, r3, #31
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d001      	beq.n	800f9a8 <dir_sdi+0x26>
		return FR_INT_ERR;
 800f9a4:	2302      	movs	r3, #2
 800f9a6:	e063      	b.n	800fa70 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	683a      	ldr	r2, [r7, #0]
 800f9ac:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	689b      	ldr	r3, [r3, #8]
 800f9b2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f9b4:	697b      	ldr	r3, [r7, #20]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d106      	bne.n	800f9c8 <dir_sdi+0x46>
 800f9ba:	693b      	ldr	r3, [r7, #16]
 800f9bc:	781b      	ldrb	r3, [r3, #0]
 800f9be:	2b02      	cmp	r3, #2
 800f9c0:	d902      	bls.n	800f9c8 <dir_sdi+0x46>
		clst = fs->dirbase;
 800f9c2:	693b      	ldr	r3, [r7, #16]
 800f9c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9c6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f9c8:	697b      	ldr	r3, [r7, #20]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d10c      	bne.n	800f9e8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f9ce:	683b      	ldr	r3, [r7, #0]
 800f9d0:	095b      	lsrs	r3, r3, #5
 800f9d2:	693a      	ldr	r2, [r7, #16]
 800f9d4:	8912      	ldrh	r2, [r2, #8]
 800f9d6:	4293      	cmp	r3, r2
 800f9d8:	d301      	bcc.n	800f9de <dir_sdi+0x5c>
 800f9da:	2302      	movs	r3, #2
 800f9dc:	e048      	b.n	800fa70 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800f9de:	693b      	ldr	r3, [r7, #16]
 800f9e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	61da      	str	r2, [r3, #28]
 800f9e6:	e029      	b.n	800fa3c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f9e8:	693b      	ldr	r3, [r7, #16]
 800f9ea:	895b      	ldrh	r3, [r3, #10]
 800f9ec:	031b      	lsls	r3, r3, #12
 800f9ee:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f9f0:	e019      	b.n	800fa26 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	6979      	ldr	r1, [r7, #20]
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f7ff fcf9 	bl	800f3ee <get_fat>
 800f9fc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f9fe:	697b      	ldr	r3, [r7, #20]
 800fa00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fa04:	d101      	bne.n	800fa0a <dir_sdi+0x88>
 800fa06:	2301      	movs	r3, #1
 800fa08:	e032      	b.n	800fa70 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800fa0a:	697b      	ldr	r3, [r7, #20]
 800fa0c:	2b01      	cmp	r3, #1
 800fa0e:	d904      	bls.n	800fa1a <dir_sdi+0x98>
 800fa10:	693b      	ldr	r3, [r7, #16]
 800fa12:	695b      	ldr	r3, [r3, #20]
 800fa14:	697a      	ldr	r2, [r7, #20]
 800fa16:	429a      	cmp	r2, r3
 800fa18:	d301      	bcc.n	800fa1e <dir_sdi+0x9c>
 800fa1a:	2302      	movs	r3, #2
 800fa1c:	e028      	b.n	800fa70 <dir_sdi+0xee>
			ofs -= csz;
 800fa1e:	683a      	ldr	r2, [r7, #0]
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	1ad3      	subs	r3, r2, r3
 800fa24:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800fa26:	683a      	ldr	r2, [r7, #0]
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	429a      	cmp	r2, r3
 800fa2c:	d2e1      	bcs.n	800f9f2 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800fa2e:	6979      	ldr	r1, [r7, #20]
 800fa30:	6938      	ldr	r0, [r7, #16]
 800fa32:	f7ff fcbd 	bl	800f3b0 <clust2sect>
 800fa36:	4602      	mov	r2, r0
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	697a      	ldr	r2, [r7, #20]
 800fa40:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	69db      	ldr	r3, [r3, #28]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d101      	bne.n	800fa4e <dir_sdi+0xcc>
 800fa4a:	2302      	movs	r3, #2
 800fa4c:	e010      	b.n	800fa70 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	69da      	ldr	r2, [r3, #28]
 800fa52:	683b      	ldr	r3, [r7, #0]
 800fa54:	0b1b      	lsrs	r3, r3, #12
 800fa56:	441a      	add	r2, r3
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800fa5c:	693b      	ldr	r3, [r7, #16]
 800fa5e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fa62:	683b      	ldr	r3, [r7, #0]
 800fa64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fa68:	441a      	add	r2, r3
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800fa6e:	2300      	movs	r3, #0
}
 800fa70:	4618      	mov	r0, r3
 800fa72:	3718      	adds	r7, #24
 800fa74:	46bd      	mov	sp, r7
 800fa76:	bd80      	pop	{r7, pc}

0800fa78 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b086      	sub	sp, #24
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
 800fa80:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	695b      	ldr	r3, [r3, #20]
 800fa8c:	3320      	adds	r3, #32
 800fa8e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	69db      	ldr	r3, [r3, #28]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d003      	beq.n	800faa0 <dir_next+0x28>
 800fa98:	68bb      	ldr	r3, [r7, #8]
 800fa9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fa9e:	d301      	bcc.n	800faa4 <dir_next+0x2c>
 800faa0:	2304      	movs	r3, #4
 800faa2:	e0aa      	b.n	800fbfa <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800faa4:	68bb      	ldr	r3, [r7, #8]
 800faa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800faaa:	2b00      	cmp	r3, #0
 800faac:	f040 8098 	bne.w	800fbe0 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	69db      	ldr	r3, [r3, #28]
 800fab4:	1c5a      	adds	r2, r3, #1
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	699b      	ldr	r3, [r3, #24]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d10b      	bne.n	800fada <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800fac2:	68bb      	ldr	r3, [r7, #8]
 800fac4:	095b      	lsrs	r3, r3, #5
 800fac6:	68fa      	ldr	r2, [r7, #12]
 800fac8:	8912      	ldrh	r2, [r2, #8]
 800faca:	4293      	cmp	r3, r2
 800facc:	f0c0 8088 	bcc.w	800fbe0 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	2200      	movs	r2, #0
 800fad4:	61da      	str	r2, [r3, #28]
 800fad6:	2304      	movs	r3, #4
 800fad8:	e08f      	b.n	800fbfa <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800fada:	68bb      	ldr	r3, [r7, #8]
 800fadc:	0b1b      	lsrs	r3, r3, #12
 800fade:	68fa      	ldr	r2, [r7, #12]
 800fae0:	8952      	ldrh	r2, [r2, #10]
 800fae2:	3a01      	subs	r2, #1
 800fae4:	4013      	ands	r3, r2
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d17a      	bne.n	800fbe0 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800faea:	687a      	ldr	r2, [r7, #4]
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	699b      	ldr	r3, [r3, #24]
 800faf0:	4619      	mov	r1, r3
 800faf2:	4610      	mov	r0, r2
 800faf4:	f7ff fc7b 	bl	800f3ee <get_fat>
 800faf8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800fafa:	697b      	ldr	r3, [r7, #20]
 800fafc:	2b01      	cmp	r3, #1
 800fafe:	d801      	bhi.n	800fb04 <dir_next+0x8c>
 800fb00:	2302      	movs	r3, #2
 800fb02:	e07a      	b.n	800fbfa <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800fb04:	697b      	ldr	r3, [r7, #20]
 800fb06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fb0a:	d101      	bne.n	800fb10 <dir_next+0x98>
 800fb0c:	2301      	movs	r3, #1
 800fb0e:	e074      	b.n	800fbfa <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	695b      	ldr	r3, [r3, #20]
 800fb14:	697a      	ldr	r2, [r7, #20]
 800fb16:	429a      	cmp	r2, r3
 800fb18:	d358      	bcc.n	800fbcc <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800fb1a:	683b      	ldr	r3, [r7, #0]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d104      	bne.n	800fb2a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	2200      	movs	r2, #0
 800fb24:	61da      	str	r2, [r3, #28]
 800fb26:	2304      	movs	r3, #4
 800fb28:	e067      	b.n	800fbfa <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800fb2a:	687a      	ldr	r2, [r7, #4]
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	699b      	ldr	r3, [r3, #24]
 800fb30:	4619      	mov	r1, r3
 800fb32:	4610      	mov	r0, r2
 800fb34:	f7ff fe59 	bl	800f7ea <create_chain>
 800fb38:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800fb3a:	697b      	ldr	r3, [r7, #20]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d101      	bne.n	800fb44 <dir_next+0xcc>
 800fb40:	2307      	movs	r3, #7
 800fb42:	e05a      	b.n	800fbfa <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800fb44:	697b      	ldr	r3, [r7, #20]
 800fb46:	2b01      	cmp	r3, #1
 800fb48:	d101      	bne.n	800fb4e <dir_next+0xd6>
 800fb4a:	2302      	movs	r3, #2
 800fb4c:	e055      	b.n	800fbfa <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800fb4e:	697b      	ldr	r3, [r7, #20]
 800fb50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fb54:	d101      	bne.n	800fb5a <dir_next+0xe2>
 800fb56:	2301      	movs	r3, #1
 800fb58:	e04f      	b.n	800fbfa <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800fb5a:	68f8      	ldr	r0, [r7, #12]
 800fb5c:	f7ff fb48 	bl	800f1f0 <sync_window>
 800fb60:	4603      	mov	r3, r0
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d001      	beq.n	800fb6a <dir_next+0xf2>
 800fb66:	2301      	movs	r3, #1
 800fb68:	e047      	b.n	800fbfa <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	3330      	adds	r3, #48	; 0x30
 800fb6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fb72:	2100      	movs	r1, #0
 800fb74:	4618      	mov	r0, r3
 800fb76:	f7ff f972 	bl	800ee5e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	613b      	str	r3, [r7, #16]
 800fb7e:	6979      	ldr	r1, [r7, #20]
 800fb80:	68f8      	ldr	r0, [r7, #12]
 800fb82:	f7ff fc15 	bl	800f3b0 <clust2sect>
 800fb86:	4602      	mov	r2, r0
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	62da      	str	r2, [r3, #44]	; 0x2c
 800fb8c:	e012      	b.n	800fbb4 <dir_next+0x13c>
						fs->wflag = 1;
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	2201      	movs	r2, #1
 800fb92:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800fb94:	68f8      	ldr	r0, [r7, #12]
 800fb96:	f7ff fb2b 	bl	800f1f0 <sync_window>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d001      	beq.n	800fba4 <dir_next+0x12c>
 800fba0:	2301      	movs	r3, #1
 800fba2:	e02a      	b.n	800fbfa <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800fba4:	693b      	ldr	r3, [r7, #16]
 800fba6:	3301      	adds	r3, #1
 800fba8:	613b      	str	r3, [r7, #16]
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbae:	1c5a      	adds	r2, r3, #1
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	62da      	str	r2, [r3, #44]	; 0x2c
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	895b      	ldrh	r3, [r3, #10]
 800fbb8:	461a      	mov	r2, r3
 800fbba:	693b      	ldr	r3, [r7, #16]
 800fbbc:	4293      	cmp	r3, r2
 800fbbe:	d3e6      	bcc.n	800fb8e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbc4:	693b      	ldr	r3, [r7, #16]
 800fbc6:	1ad2      	subs	r2, r2, r3
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	697a      	ldr	r2, [r7, #20]
 800fbd0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800fbd2:	6979      	ldr	r1, [r7, #20]
 800fbd4:	68f8      	ldr	r0, [r7, #12]
 800fbd6:	f7ff fbeb 	bl	800f3b0 <clust2sect>
 800fbda:	4602      	mov	r2, r0
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	68ba      	ldr	r2, [r7, #8]
 800fbe4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fbec:	68bb      	ldr	r3, [r7, #8]
 800fbee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fbf2:	441a      	add	r2, r3
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800fbf8:	2300      	movs	r3, #0
}
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	3718      	adds	r7, #24
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	bd80      	pop	{r7, pc}

0800fc02 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800fc02:	b580      	push	{r7, lr}
 800fc04:	b086      	sub	sp, #24
 800fc06:	af00      	add	r7, sp, #0
 800fc08:	6078      	str	r0, [r7, #4]
 800fc0a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800fc12:	2100      	movs	r1, #0
 800fc14:	6878      	ldr	r0, [r7, #4]
 800fc16:	f7ff feb4 	bl	800f982 <dir_sdi>
 800fc1a:	4603      	mov	r3, r0
 800fc1c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fc1e:	7dfb      	ldrb	r3, [r7, #23]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d12b      	bne.n	800fc7c <dir_alloc+0x7a>
		n = 0;
 800fc24:	2300      	movs	r3, #0
 800fc26:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	69db      	ldr	r3, [r3, #28]
 800fc2c:	4619      	mov	r1, r3
 800fc2e:	68f8      	ldr	r0, [r7, #12]
 800fc30:	f7ff fb22 	bl	800f278 <move_window>
 800fc34:	4603      	mov	r3, r0
 800fc36:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fc38:	7dfb      	ldrb	r3, [r7, #23]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d11d      	bne.n	800fc7a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	6a1b      	ldr	r3, [r3, #32]
 800fc42:	781b      	ldrb	r3, [r3, #0]
 800fc44:	2be5      	cmp	r3, #229	; 0xe5
 800fc46:	d004      	beq.n	800fc52 <dir_alloc+0x50>
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	6a1b      	ldr	r3, [r3, #32]
 800fc4c:	781b      	ldrb	r3, [r3, #0]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d107      	bne.n	800fc62 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800fc52:	693b      	ldr	r3, [r7, #16]
 800fc54:	3301      	adds	r3, #1
 800fc56:	613b      	str	r3, [r7, #16]
 800fc58:	693a      	ldr	r2, [r7, #16]
 800fc5a:	683b      	ldr	r3, [r7, #0]
 800fc5c:	429a      	cmp	r2, r3
 800fc5e:	d102      	bne.n	800fc66 <dir_alloc+0x64>
 800fc60:	e00c      	b.n	800fc7c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800fc62:	2300      	movs	r3, #0
 800fc64:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800fc66:	2101      	movs	r1, #1
 800fc68:	6878      	ldr	r0, [r7, #4]
 800fc6a:	f7ff ff05 	bl	800fa78 <dir_next>
 800fc6e:	4603      	mov	r3, r0
 800fc70:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800fc72:	7dfb      	ldrb	r3, [r7, #23]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d0d7      	beq.n	800fc28 <dir_alloc+0x26>
 800fc78:	e000      	b.n	800fc7c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800fc7a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800fc7c:	7dfb      	ldrb	r3, [r7, #23]
 800fc7e:	2b04      	cmp	r3, #4
 800fc80:	d101      	bne.n	800fc86 <dir_alloc+0x84>
 800fc82:	2307      	movs	r3, #7
 800fc84:	75fb      	strb	r3, [r7, #23]
	return res;
 800fc86:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc88:	4618      	mov	r0, r3
 800fc8a:	3718      	adds	r7, #24
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	bd80      	pop	{r7, pc}

0800fc90 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b084      	sub	sp, #16
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
 800fc98:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800fc9a:	683b      	ldr	r3, [r7, #0]
 800fc9c:	331a      	adds	r3, #26
 800fc9e:	4618      	mov	r0, r3
 800fca0:	f7ff f83a 	bl	800ed18 <ld_word>
 800fca4:	4603      	mov	r3, r0
 800fca6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	781b      	ldrb	r3, [r3, #0]
 800fcac:	2b03      	cmp	r3, #3
 800fcae:	d109      	bne.n	800fcc4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800fcb0:	683b      	ldr	r3, [r7, #0]
 800fcb2:	3314      	adds	r3, #20
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	f7ff f82f 	bl	800ed18 <ld_word>
 800fcba:	4603      	mov	r3, r0
 800fcbc:	041b      	lsls	r3, r3, #16
 800fcbe:	68fa      	ldr	r2, [r7, #12]
 800fcc0:	4313      	orrs	r3, r2
 800fcc2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800fcc4:	68fb      	ldr	r3, [r7, #12]
}
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	3710      	adds	r7, #16
 800fcca:	46bd      	mov	sp, r7
 800fccc:	bd80      	pop	{r7, pc}

0800fcce <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800fcce:	b580      	push	{r7, lr}
 800fcd0:	b084      	sub	sp, #16
 800fcd2:	af00      	add	r7, sp, #0
 800fcd4:	60f8      	str	r0, [r7, #12]
 800fcd6:	60b9      	str	r1, [r7, #8]
 800fcd8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800fcda:	68bb      	ldr	r3, [r7, #8]
 800fcdc:	331a      	adds	r3, #26
 800fcde:	687a      	ldr	r2, [r7, #4]
 800fce0:	b292      	uxth	r2, r2
 800fce2:	4611      	mov	r1, r2
 800fce4:	4618      	mov	r0, r3
 800fce6:	f7ff f852 	bl	800ed8e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	781b      	ldrb	r3, [r3, #0]
 800fcee:	2b03      	cmp	r3, #3
 800fcf0:	d109      	bne.n	800fd06 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800fcf2:	68bb      	ldr	r3, [r7, #8]
 800fcf4:	f103 0214 	add.w	r2, r3, #20
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	0c1b      	lsrs	r3, r3, #16
 800fcfc:	b29b      	uxth	r3, r3
 800fcfe:	4619      	mov	r1, r3
 800fd00:	4610      	mov	r0, r2
 800fd02:	f7ff f844 	bl	800ed8e <st_word>
	}
}
 800fd06:	bf00      	nop
 800fd08:	3710      	adds	r7, #16
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	bd80      	pop	{r7, pc}

0800fd0e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800fd0e:	b580      	push	{r7, lr}
 800fd10:	b086      	sub	sp, #24
 800fd12:	af00      	add	r7, sp, #0
 800fd14:	6078      	str	r0, [r7, #4]
 800fd16:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800fd18:	2304      	movs	r3, #4
 800fd1a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800fd22:	e03c      	b.n	800fd9e <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	69db      	ldr	r3, [r3, #28]
 800fd28:	4619      	mov	r1, r3
 800fd2a:	6938      	ldr	r0, [r7, #16]
 800fd2c:	f7ff faa4 	bl	800f278 <move_window>
 800fd30:	4603      	mov	r3, r0
 800fd32:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fd34:	7dfb      	ldrb	r3, [r7, #23]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d136      	bne.n	800fda8 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	6a1b      	ldr	r3, [r3, #32]
 800fd3e:	781b      	ldrb	r3, [r3, #0]
 800fd40:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800fd42:	7bfb      	ldrb	r3, [r7, #15]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d102      	bne.n	800fd4e <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800fd48:	2304      	movs	r3, #4
 800fd4a:	75fb      	strb	r3, [r7, #23]
 800fd4c:	e031      	b.n	800fdb2 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	6a1b      	ldr	r3, [r3, #32]
 800fd52:	330b      	adds	r3, #11
 800fd54:	781b      	ldrb	r3, [r3, #0]
 800fd56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fd5a:	73bb      	strb	r3, [r7, #14]
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	7bba      	ldrb	r2, [r7, #14]
 800fd60:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800fd62:	7bfb      	ldrb	r3, [r7, #15]
 800fd64:	2be5      	cmp	r3, #229	; 0xe5
 800fd66:	d011      	beq.n	800fd8c <dir_read+0x7e>
 800fd68:	7bfb      	ldrb	r3, [r7, #15]
 800fd6a:	2b2e      	cmp	r3, #46	; 0x2e
 800fd6c:	d00e      	beq.n	800fd8c <dir_read+0x7e>
 800fd6e:	7bbb      	ldrb	r3, [r7, #14]
 800fd70:	2b0f      	cmp	r3, #15
 800fd72:	d00b      	beq.n	800fd8c <dir_read+0x7e>
 800fd74:	7bbb      	ldrb	r3, [r7, #14]
 800fd76:	f023 0320 	bic.w	r3, r3, #32
 800fd7a:	2b08      	cmp	r3, #8
 800fd7c:	bf0c      	ite	eq
 800fd7e:	2301      	moveq	r3, #1
 800fd80:	2300      	movne	r3, #0
 800fd82:	b2db      	uxtb	r3, r3
 800fd84:	461a      	mov	r2, r3
 800fd86:	683b      	ldr	r3, [r7, #0]
 800fd88:	4293      	cmp	r3, r2
 800fd8a:	d00f      	beq.n	800fdac <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800fd8c:	2100      	movs	r1, #0
 800fd8e:	6878      	ldr	r0, [r7, #4]
 800fd90:	f7ff fe72 	bl	800fa78 <dir_next>
 800fd94:	4603      	mov	r3, r0
 800fd96:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fd98:	7dfb      	ldrb	r3, [r7, #23]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d108      	bne.n	800fdb0 <dir_read+0xa2>
	while (dp->sect) {
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	69db      	ldr	r3, [r3, #28]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d1be      	bne.n	800fd24 <dir_read+0x16>
 800fda6:	e004      	b.n	800fdb2 <dir_read+0xa4>
		if (res != FR_OK) break;
 800fda8:	bf00      	nop
 800fdaa:	e002      	b.n	800fdb2 <dir_read+0xa4>
				break;
 800fdac:	bf00      	nop
 800fdae:	e000      	b.n	800fdb2 <dir_read+0xa4>
		if (res != FR_OK) break;
 800fdb0:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800fdb2:	7dfb      	ldrb	r3, [r7, #23]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d002      	beq.n	800fdbe <dir_read+0xb0>
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	2200      	movs	r2, #0
 800fdbc:	61da      	str	r2, [r3, #28]
	return res;
 800fdbe:	7dfb      	ldrb	r3, [r7, #23]
}
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	3718      	adds	r7, #24
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	bd80      	pop	{r7, pc}

0800fdc8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b086      	sub	sp, #24
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800fdd6:	2100      	movs	r1, #0
 800fdd8:	6878      	ldr	r0, [r7, #4]
 800fdda:	f7ff fdd2 	bl	800f982 <dir_sdi>
 800fdde:	4603      	mov	r3, r0
 800fde0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800fde2:	7dfb      	ldrb	r3, [r7, #23]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d001      	beq.n	800fdec <dir_find+0x24>
 800fde8:	7dfb      	ldrb	r3, [r7, #23]
 800fdea:	e03e      	b.n	800fe6a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	69db      	ldr	r3, [r3, #28]
 800fdf0:	4619      	mov	r1, r3
 800fdf2:	6938      	ldr	r0, [r7, #16]
 800fdf4:	f7ff fa40 	bl	800f278 <move_window>
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fdfc:	7dfb      	ldrb	r3, [r7, #23]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d12f      	bne.n	800fe62 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	6a1b      	ldr	r3, [r3, #32]
 800fe06:	781b      	ldrb	r3, [r3, #0]
 800fe08:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800fe0a:	7bfb      	ldrb	r3, [r7, #15]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d102      	bne.n	800fe16 <dir_find+0x4e>
 800fe10:	2304      	movs	r3, #4
 800fe12:	75fb      	strb	r3, [r7, #23]
 800fe14:	e028      	b.n	800fe68 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	6a1b      	ldr	r3, [r3, #32]
 800fe1a:	330b      	adds	r3, #11
 800fe1c:	781b      	ldrb	r3, [r3, #0]
 800fe1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fe22:	b2da      	uxtb	r2, r3
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	6a1b      	ldr	r3, [r3, #32]
 800fe2c:	330b      	adds	r3, #11
 800fe2e:	781b      	ldrb	r3, [r3, #0]
 800fe30:	f003 0308 	and.w	r3, r3, #8
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d10a      	bne.n	800fe4e <dir_find+0x86>
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	6a18      	ldr	r0, [r3, #32]
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	3324      	adds	r3, #36	; 0x24
 800fe40:	220b      	movs	r2, #11
 800fe42:	4619      	mov	r1, r3
 800fe44:	f7ff f826 	bl	800ee94 <mem_cmp>
 800fe48:	4603      	mov	r3, r0
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d00b      	beq.n	800fe66 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800fe4e:	2100      	movs	r1, #0
 800fe50:	6878      	ldr	r0, [r7, #4]
 800fe52:	f7ff fe11 	bl	800fa78 <dir_next>
 800fe56:	4603      	mov	r3, r0
 800fe58:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800fe5a:	7dfb      	ldrb	r3, [r7, #23]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d0c5      	beq.n	800fdec <dir_find+0x24>
 800fe60:	e002      	b.n	800fe68 <dir_find+0xa0>
		if (res != FR_OK) break;
 800fe62:	bf00      	nop
 800fe64:	e000      	b.n	800fe68 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800fe66:	bf00      	nop

	return res;
 800fe68:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	3718      	adds	r7, #24
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	bd80      	pop	{r7, pc}

0800fe72 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800fe72:	b580      	push	{r7, lr}
 800fe74:	b084      	sub	sp, #16
 800fe76:	af00      	add	r7, sp, #0
 800fe78:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800fe80:	2101      	movs	r1, #1
 800fe82:	6878      	ldr	r0, [r7, #4]
 800fe84:	f7ff febd 	bl	800fc02 <dir_alloc>
 800fe88:	4603      	mov	r3, r0
 800fe8a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800fe8c:	7bfb      	ldrb	r3, [r7, #15]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d11c      	bne.n	800fecc <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	69db      	ldr	r3, [r3, #28]
 800fe96:	4619      	mov	r1, r3
 800fe98:	68b8      	ldr	r0, [r7, #8]
 800fe9a:	f7ff f9ed 	bl	800f278 <move_window>
 800fe9e:	4603      	mov	r3, r0
 800fea0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fea2:	7bfb      	ldrb	r3, [r7, #15]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d111      	bne.n	800fecc <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	6a1b      	ldr	r3, [r3, #32]
 800feac:	2220      	movs	r2, #32
 800feae:	2100      	movs	r1, #0
 800feb0:	4618      	mov	r0, r3
 800feb2:	f7fe ffd4 	bl	800ee5e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	6a18      	ldr	r0, [r3, #32]
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	3324      	adds	r3, #36	; 0x24
 800febe:	220b      	movs	r2, #11
 800fec0:	4619      	mov	r1, r3
 800fec2:	f7fe ffab 	bl	800ee1c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800fec6:	68bb      	ldr	r3, [r7, #8]
 800fec8:	2201      	movs	r2, #1
 800feca:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800fecc:	7bfb      	ldrb	r3, [r7, #15]
}
 800fece:	4618      	mov	r0, r3
 800fed0:	3710      	adds	r7, #16
 800fed2:	46bd      	mov	sp, r7
 800fed4:	bd80      	pop	{r7, pc}

0800fed6 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800fed6:	b580      	push	{r7, lr}
 800fed8:	b084      	sub	sp, #16
 800feda:	af00      	add	r7, sp, #0
 800fedc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	69db      	ldr	r3, [r3, #28]
 800fee8:	4619      	mov	r1, r3
 800feea:	68f8      	ldr	r0, [r7, #12]
 800feec:	f7ff f9c4 	bl	800f278 <move_window>
 800fef0:	4603      	mov	r3, r0
 800fef2:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800fef4:	7afb      	ldrb	r3, [r7, #11]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d106      	bne.n	800ff08 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	6a1b      	ldr	r3, [r3, #32]
 800fefe:	22e5      	movs	r2, #229	; 0xe5
 800ff00:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	2201      	movs	r2, #1
 800ff06:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800ff08:	7afb      	ldrb	r3, [r7, #11]
}
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	3710      	adds	r7, #16
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	bd80      	pop	{r7, pc}

0800ff12 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800ff12:	b580      	push	{r7, lr}
 800ff14:	b086      	sub	sp, #24
 800ff16:	af00      	add	r7, sp, #0
 800ff18:	6078      	str	r0, [r7, #4]
 800ff1a:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800ff1c:	683b      	ldr	r3, [r7, #0]
 800ff1e:	2200      	movs	r2, #0
 800ff20:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	69db      	ldr	r3, [r3, #28]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d04e      	beq.n	800ffc8 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	613b      	str	r3, [r7, #16]
 800ff2e:	693b      	ldr	r3, [r7, #16]
 800ff30:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800ff32:	e021      	b.n	800ff78 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	6a1a      	ldr	r2, [r3, #32]
 800ff38:	697b      	ldr	r3, [r7, #20]
 800ff3a:	1c59      	adds	r1, r3, #1
 800ff3c:	6179      	str	r1, [r7, #20]
 800ff3e:	4413      	add	r3, r2
 800ff40:	781b      	ldrb	r3, [r3, #0]
 800ff42:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800ff44:	7bfb      	ldrb	r3, [r7, #15]
 800ff46:	2b20      	cmp	r3, #32
 800ff48:	d100      	bne.n	800ff4c <get_fileinfo+0x3a>
 800ff4a:	e015      	b.n	800ff78 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800ff4c:	7bfb      	ldrb	r3, [r7, #15]
 800ff4e:	2b05      	cmp	r3, #5
 800ff50:	d101      	bne.n	800ff56 <get_fileinfo+0x44>
 800ff52:	23e5      	movs	r3, #229	; 0xe5
 800ff54:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800ff56:	697b      	ldr	r3, [r7, #20]
 800ff58:	2b09      	cmp	r3, #9
 800ff5a:	d106      	bne.n	800ff6a <get_fileinfo+0x58>
 800ff5c:	693b      	ldr	r3, [r7, #16]
 800ff5e:	1c5a      	adds	r2, r3, #1
 800ff60:	613a      	str	r2, [r7, #16]
 800ff62:	683a      	ldr	r2, [r7, #0]
 800ff64:	4413      	add	r3, r2
 800ff66:	222e      	movs	r2, #46	; 0x2e
 800ff68:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800ff6a:	693b      	ldr	r3, [r7, #16]
 800ff6c:	1c5a      	adds	r2, r3, #1
 800ff6e:	613a      	str	r2, [r7, #16]
 800ff70:	683a      	ldr	r2, [r7, #0]
 800ff72:	4413      	add	r3, r2
 800ff74:	7bfa      	ldrb	r2, [r7, #15]
 800ff76:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800ff78:	697b      	ldr	r3, [r7, #20]
 800ff7a:	2b0a      	cmp	r3, #10
 800ff7c:	d9da      	bls.n	800ff34 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800ff7e:	683a      	ldr	r2, [r7, #0]
 800ff80:	693b      	ldr	r3, [r7, #16]
 800ff82:	4413      	add	r3, r2
 800ff84:	3309      	adds	r3, #9
 800ff86:	2200      	movs	r2, #0
 800ff88:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	6a1b      	ldr	r3, [r3, #32]
 800ff8e:	7ada      	ldrb	r2, [r3, #11]
 800ff90:	683b      	ldr	r3, [r7, #0]
 800ff92:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	6a1b      	ldr	r3, [r3, #32]
 800ff98:	331c      	adds	r3, #28
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	f7fe fed4 	bl	800ed48 <ld_dword>
 800ffa0:	4602      	mov	r2, r0
 800ffa2:	683b      	ldr	r3, [r7, #0]
 800ffa4:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	6a1b      	ldr	r3, [r3, #32]
 800ffaa:	3316      	adds	r3, #22
 800ffac:	4618      	mov	r0, r3
 800ffae:	f7fe fecb 	bl	800ed48 <ld_dword>
 800ffb2:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800ffb4:	68bb      	ldr	r3, [r7, #8]
 800ffb6:	b29a      	uxth	r2, r3
 800ffb8:	683b      	ldr	r3, [r7, #0]
 800ffba:	80da      	strh	r2, [r3, #6]
 800ffbc:	68bb      	ldr	r3, [r7, #8]
 800ffbe:	0c1b      	lsrs	r3, r3, #16
 800ffc0:	b29a      	uxth	r2, r3
 800ffc2:	683b      	ldr	r3, [r7, #0]
 800ffc4:	809a      	strh	r2, [r3, #4]
 800ffc6:	e000      	b.n	800ffca <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ffc8:	bf00      	nop
}
 800ffca:	3718      	adds	r7, #24
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	bd80      	pop	{r7, pc}

0800ffd0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b088      	sub	sp, #32
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	6078      	str	r0, [r7, #4]
 800ffd8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800ffda:	683b      	ldr	r3, [r7, #0]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	60fb      	str	r3, [r7, #12]
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	3324      	adds	r3, #36	; 0x24
 800ffe4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800ffe6:	220b      	movs	r2, #11
 800ffe8:	2120      	movs	r1, #32
 800ffea:	68b8      	ldr	r0, [r7, #8]
 800ffec:	f7fe ff37 	bl	800ee5e <mem_set>
	si = i = 0; ni = 8;
 800fff0:	2300      	movs	r3, #0
 800fff2:	613b      	str	r3, [r7, #16]
 800fff4:	693b      	ldr	r3, [r7, #16]
 800fff6:	61fb      	str	r3, [r7, #28]
 800fff8:	2308      	movs	r3, #8
 800fffa:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800fffc:	69fb      	ldr	r3, [r7, #28]
 800fffe:	1c5a      	adds	r2, r3, #1
 8010000:	61fa      	str	r2, [r7, #28]
 8010002:	68fa      	ldr	r2, [r7, #12]
 8010004:	4413      	add	r3, r2
 8010006:	781b      	ldrb	r3, [r3, #0]
 8010008:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801000a:	7efb      	ldrb	r3, [r7, #27]
 801000c:	2b20      	cmp	r3, #32
 801000e:	d94e      	bls.n	80100ae <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8010010:	7efb      	ldrb	r3, [r7, #27]
 8010012:	2b2f      	cmp	r3, #47	; 0x2f
 8010014:	d006      	beq.n	8010024 <create_name+0x54>
 8010016:	7efb      	ldrb	r3, [r7, #27]
 8010018:	2b5c      	cmp	r3, #92	; 0x5c
 801001a:	d110      	bne.n	801003e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801001c:	e002      	b.n	8010024 <create_name+0x54>
 801001e:	69fb      	ldr	r3, [r7, #28]
 8010020:	3301      	adds	r3, #1
 8010022:	61fb      	str	r3, [r7, #28]
 8010024:	68fa      	ldr	r2, [r7, #12]
 8010026:	69fb      	ldr	r3, [r7, #28]
 8010028:	4413      	add	r3, r2
 801002a:	781b      	ldrb	r3, [r3, #0]
 801002c:	2b2f      	cmp	r3, #47	; 0x2f
 801002e:	d0f6      	beq.n	801001e <create_name+0x4e>
 8010030:	68fa      	ldr	r2, [r7, #12]
 8010032:	69fb      	ldr	r3, [r7, #28]
 8010034:	4413      	add	r3, r2
 8010036:	781b      	ldrb	r3, [r3, #0]
 8010038:	2b5c      	cmp	r3, #92	; 0x5c
 801003a:	d0f0      	beq.n	801001e <create_name+0x4e>
			break;
 801003c:	e038      	b.n	80100b0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801003e:	7efb      	ldrb	r3, [r7, #27]
 8010040:	2b2e      	cmp	r3, #46	; 0x2e
 8010042:	d003      	beq.n	801004c <create_name+0x7c>
 8010044:	693a      	ldr	r2, [r7, #16]
 8010046:	697b      	ldr	r3, [r7, #20]
 8010048:	429a      	cmp	r2, r3
 801004a:	d30c      	bcc.n	8010066 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 801004c:	697b      	ldr	r3, [r7, #20]
 801004e:	2b0b      	cmp	r3, #11
 8010050:	d002      	beq.n	8010058 <create_name+0x88>
 8010052:	7efb      	ldrb	r3, [r7, #27]
 8010054:	2b2e      	cmp	r3, #46	; 0x2e
 8010056:	d001      	beq.n	801005c <create_name+0x8c>
 8010058:	2306      	movs	r3, #6
 801005a:	e044      	b.n	80100e6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 801005c:	2308      	movs	r3, #8
 801005e:	613b      	str	r3, [r7, #16]
 8010060:	230b      	movs	r3, #11
 8010062:	617b      	str	r3, [r7, #20]
			continue;
 8010064:	e022      	b.n	80100ac <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8010066:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801006a:	2b00      	cmp	r3, #0
 801006c:	da04      	bge.n	8010078 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801006e:	7efb      	ldrb	r3, [r7, #27]
 8010070:	3b80      	subs	r3, #128	; 0x80
 8010072:	4a1f      	ldr	r2, [pc, #124]	; (80100f0 <create_name+0x120>)
 8010074:	5cd3      	ldrb	r3, [r2, r3]
 8010076:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8010078:	7efb      	ldrb	r3, [r7, #27]
 801007a:	4619      	mov	r1, r3
 801007c:	481d      	ldr	r0, [pc, #116]	; (80100f4 <create_name+0x124>)
 801007e:	f7fe ff30 	bl	800eee2 <chk_chr>
 8010082:	4603      	mov	r3, r0
 8010084:	2b00      	cmp	r3, #0
 8010086:	d001      	beq.n	801008c <create_name+0xbc>
 8010088:	2306      	movs	r3, #6
 801008a:	e02c      	b.n	80100e6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 801008c:	7efb      	ldrb	r3, [r7, #27]
 801008e:	2b60      	cmp	r3, #96	; 0x60
 8010090:	d905      	bls.n	801009e <create_name+0xce>
 8010092:	7efb      	ldrb	r3, [r7, #27]
 8010094:	2b7a      	cmp	r3, #122	; 0x7a
 8010096:	d802      	bhi.n	801009e <create_name+0xce>
 8010098:	7efb      	ldrb	r3, [r7, #27]
 801009a:	3b20      	subs	r3, #32
 801009c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 801009e:	693b      	ldr	r3, [r7, #16]
 80100a0:	1c5a      	adds	r2, r3, #1
 80100a2:	613a      	str	r2, [r7, #16]
 80100a4:	68ba      	ldr	r2, [r7, #8]
 80100a6:	4413      	add	r3, r2
 80100a8:	7efa      	ldrb	r2, [r7, #27]
 80100aa:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80100ac:	e7a6      	b.n	800fffc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80100ae:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80100b0:	68fa      	ldr	r2, [r7, #12]
 80100b2:	69fb      	ldr	r3, [r7, #28]
 80100b4:	441a      	add	r2, r3
 80100b6:	683b      	ldr	r3, [r7, #0]
 80100b8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80100ba:	693b      	ldr	r3, [r7, #16]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d101      	bne.n	80100c4 <create_name+0xf4>
 80100c0:	2306      	movs	r3, #6
 80100c2:	e010      	b.n	80100e6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80100c4:	68bb      	ldr	r3, [r7, #8]
 80100c6:	781b      	ldrb	r3, [r3, #0]
 80100c8:	2be5      	cmp	r3, #229	; 0xe5
 80100ca:	d102      	bne.n	80100d2 <create_name+0x102>
 80100cc:	68bb      	ldr	r3, [r7, #8]
 80100ce:	2205      	movs	r2, #5
 80100d0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80100d2:	7efb      	ldrb	r3, [r7, #27]
 80100d4:	2b20      	cmp	r3, #32
 80100d6:	d801      	bhi.n	80100dc <create_name+0x10c>
 80100d8:	2204      	movs	r2, #4
 80100da:	e000      	b.n	80100de <create_name+0x10e>
 80100dc:	2200      	movs	r2, #0
 80100de:	68bb      	ldr	r3, [r7, #8]
 80100e0:	330b      	adds	r3, #11
 80100e2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80100e4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80100e6:	4618      	mov	r0, r3
 80100e8:	3720      	adds	r7, #32
 80100ea:	46bd      	mov	sp, r7
 80100ec:	bd80      	pop	{r7, pc}
 80100ee:	bf00      	nop
 80100f0:	08018208 	.word	0x08018208
 80100f4:	08017338 	.word	0x08017338

080100f8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80100f8:	b580      	push	{r7, lr}
 80100fa:	b086      	sub	sp, #24
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	6078      	str	r0, [r7, #4]
 8010100:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010106:	693b      	ldr	r3, [r7, #16]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801010c:	e002      	b.n	8010114 <follow_path+0x1c>
 801010e:	683b      	ldr	r3, [r7, #0]
 8010110:	3301      	adds	r3, #1
 8010112:	603b      	str	r3, [r7, #0]
 8010114:	683b      	ldr	r3, [r7, #0]
 8010116:	781b      	ldrb	r3, [r3, #0]
 8010118:	2b2f      	cmp	r3, #47	; 0x2f
 801011a:	d0f8      	beq.n	801010e <follow_path+0x16>
 801011c:	683b      	ldr	r3, [r7, #0]
 801011e:	781b      	ldrb	r3, [r3, #0]
 8010120:	2b5c      	cmp	r3, #92	; 0x5c
 8010122:	d0f4      	beq.n	801010e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8010124:	693b      	ldr	r3, [r7, #16]
 8010126:	2200      	movs	r2, #0
 8010128:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801012a:	683b      	ldr	r3, [r7, #0]
 801012c:	781b      	ldrb	r3, [r3, #0]
 801012e:	2b1f      	cmp	r3, #31
 8010130:	d80a      	bhi.n	8010148 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	2280      	movs	r2, #128	; 0x80
 8010136:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801013a:	2100      	movs	r1, #0
 801013c:	6878      	ldr	r0, [r7, #4]
 801013e:	f7ff fc20 	bl	800f982 <dir_sdi>
 8010142:	4603      	mov	r3, r0
 8010144:	75fb      	strb	r3, [r7, #23]
 8010146:	e043      	b.n	80101d0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010148:	463b      	mov	r3, r7
 801014a:	4619      	mov	r1, r3
 801014c:	6878      	ldr	r0, [r7, #4]
 801014e:	f7ff ff3f 	bl	800ffd0 <create_name>
 8010152:	4603      	mov	r3, r0
 8010154:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010156:	7dfb      	ldrb	r3, [r7, #23]
 8010158:	2b00      	cmp	r3, #0
 801015a:	d134      	bne.n	80101c6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801015c:	6878      	ldr	r0, [r7, #4]
 801015e:	f7ff fe33 	bl	800fdc8 <dir_find>
 8010162:	4603      	mov	r3, r0
 8010164:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801016c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801016e:	7dfb      	ldrb	r3, [r7, #23]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d00a      	beq.n	801018a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010174:	7dfb      	ldrb	r3, [r7, #23]
 8010176:	2b04      	cmp	r3, #4
 8010178:	d127      	bne.n	80101ca <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801017a:	7afb      	ldrb	r3, [r7, #11]
 801017c:	f003 0304 	and.w	r3, r3, #4
 8010180:	2b00      	cmp	r3, #0
 8010182:	d122      	bne.n	80101ca <follow_path+0xd2>
 8010184:	2305      	movs	r3, #5
 8010186:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8010188:	e01f      	b.n	80101ca <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801018a:	7afb      	ldrb	r3, [r7, #11]
 801018c:	f003 0304 	and.w	r3, r3, #4
 8010190:	2b00      	cmp	r3, #0
 8010192:	d11c      	bne.n	80101ce <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010194:	693b      	ldr	r3, [r7, #16]
 8010196:	799b      	ldrb	r3, [r3, #6]
 8010198:	f003 0310 	and.w	r3, r3, #16
 801019c:	2b00      	cmp	r3, #0
 801019e:	d102      	bne.n	80101a6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80101a0:	2305      	movs	r3, #5
 80101a2:	75fb      	strb	r3, [r7, #23]
 80101a4:	e014      	b.n	80101d0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	695b      	ldr	r3, [r3, #20]
 80101b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80101b4:	4413      	add	r3, r2
 80101b6:	4619      	mov	r1, r3
 80101b8:	68f8      	ldr	r0, [r7, #12]
 80101ba:	f7ff fd69 	bl	800fc90 <ld_clust>
 80101be:	4602      	mov	r2, r0
 80101c0:	693b      	ldr	r3, [r7, #16]
 80101c2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80101c4:	e7c0      	b.n	8010148 <follow_path+0x50>
			if (res != FR_OK) break;
 80101c6:	bf00      	nop
 80101c8:	e002      	b.n	80101d0 <follow_path+0xd8>
				break;
 80101ca:	bf00      	nop
 80101cc:	e000      	b.n	80101d0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80101ce:	bf00      	nop
			}
		}
	}

	return res;
 80101d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80101d2:	4618      	mov	r0, r3
 80101d4:	3718      	adds	r7, #24
 80101d6:	46bd      	mov	sp, r7
 80101d8:	bd80      	pop	{r7, pc}

080101da <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80101da:	b480      	push	{r7}
 80101dc:	b087      	sub	sp, #28
 80101de:	af00      	add	r7, sp, #0
 80101e0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80101e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80101e6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d031      	beq.n	8010254 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	617b      	str	r3, [r7, #20]
 80101f6:	e002      	b.n	80101fe <get_ldnumber+0x24>
 80101f8:	697b      	ldr	r3, [r7, #20]
 80101fa:	3301      	adds	r3, #1
 80101fc:	617b      	str	r3, [r7, #20]
 80101fe:	697b      	ldr	r3, [r7, #20]
 8010200:	781b      	ldrb	r3, [r3, #0]
 8010202:	2b20      	cmp	r3, #32
 8010204:	d903      	bls.n	801020e <get_ldnumber+0x34>
 8010206:	697b      	ldr	r3, [r7, #20]
 8010208:	781b      	ldrb	r3, [r3, #0]
 801020a:	2b3a      	cmp	r3, #58	; 0x3a
 801020c:	d1f4      	bne.n	80101f8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801020e:	697b      	ldr	r3, [r7, #20]
 8010210:	781b      	ldrb	r3, [r3, #0]
 8010212:	2b3a      	cmp	r3, #58	; 0x3a
 8010214:	d11c      	bne.n	8010250 <get_ldnumber+0x76>
			tp = *path;
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	1c5a      	adds	r2, r3, #1
 8010220:	60fa      	str	r2, [r7, #12]
 8010222:	781b      	ldrb	r3, [r3, #0]
 8010224:	3b30      	subs	r3, #48	; 0x30
 8010226:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010228:	68bb      	ldr	r3, [r7, #8]
 801022a:	2b09      	cmp	r3, #9
 801022c:	d80e      	bhi.n	801024c <get_ldnumber+0x72>
 801022e:	68fa      	ldr	r2, [r7, #12]
 8010230:	697b      	ldr	r3, [r7, #20]
 8010232:	429a      	cmp	r2, r3
 8010234:	d10a      	bne.n	801024c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010236:	68bb      	ldr	r3, [r7, #8]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d107      	bne.n	801024c <get_ldnumber+0x72>
					vol = (int)i;
 801023c:	68bb      	ldr	r3, [r7, #8]
 801023e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010240:	697b      	ldr	r3, [r7, #20]
 8010242:	3301      	adds	r3, #1
 8010244:	617b      	str	r3, [r7, #20]
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	697a      	ldr	r2, [r7, #20]
 801024a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801024c:	693b      	ldr	r3, [r7, #16]
 801024e:	e002      	b.n	8010256 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010250:	2300      	movs	r3, #0
 8010252:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010254:	693b      	ldr	r3, [r7, #16]
}
 8010256:	4618      	mov	r0, r3
 8010258:	371c      	adds	r7, #28
 801025a:	46bd      	mov	sp, r7
 801025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010260:	4770      	bx	lr
	...

08010264 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010264:	b580      	push	{r7, lr}
 8010266:	b082      	sub	sp, #8
 8010268:	af00      	add	r7, sp, #0
 801026a:	6078      	str	r0, [r7, #4]
 801026c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	2200      	movs	r2, #0
 8010272:	70da      	strb	r2, [r3, #3]
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801027a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801027c:	6839      	ldr	r1, [r7, #0]
 801027e:	6878      	ldr	r0, [r7, #4]
 8010280:	f7fe fffa 	bl	800f278 <move_window>
 8010284:	4603      	mov	r3, r0
 8010286:	2b00      	cmp	r3, #0
 8010288:	d001      	beq.n	801028e <check_fs+0x2a>
 801028a:	2304      	movs	r3, #4
 801028c:	e038      	b.n	8010300 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	3330      	adds	r3, #48	; 0x30
 8010292:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010296:	4618      	mov	r0, r3
 8010298:	f7fe fd3e 	bl	800ed18 <ld_word>
 801029c:	4603      	mov	r3, r0
 801029e:	461a      	mov	r2, r3
 80102a0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80102a4:	429a      	cmp	r2, r3
 80102a6:	d001      	beq.n	80102ac <check_fs+0x48>
 80102a8:	2303      	movs	r3, #3
 80102aa:	e029      	b.n	8010300 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80102b2:	2be9      	cmp	r3, #233	; 0xe9
 80102b4:	d009      	beq.n	80102ca <check_fs+0x66>
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80102bc:	2beb      	cmp	r3, #235	; 0xeb
 80102be:	d11e      	bne.n	80102fe <check_fs+0x9a>
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80102c6:	2b90      	cmp	r3, #144	; 0x90
 80102c8:	d119      	bne.n	80102fe <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	3330      	adds	r3, #48	; 0x30
 80102ce:	3336      	adds	r3, #54	; 0x36
 80102d0:	4618      	mov	r0, r3
 80102d2:	f7fe fd39 	bl	800ed48 <ld_dword>
 80102d6:	4603      	mov	r3, r0
 80102d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80102dc:	4a0a      	ldr	r2, [pc, #40]	; (8010308 <check_fs+0xa4>)
 80102de:	4293      	cmp	r3, r2
 80102e0:	d101      	bne.n	80102e6 <check_fs+0x82>
 80102e2:	2300      	movs	r3, #0
 80102e4:	e00c      	b.n	8010300 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	3330      	adds	r3, #48	; 0x30
 80102ea:	3352      	adds	r3, #82	; 0x52
 80102ec:	4618      	mov	r0, r3
 80102ee:	f7fe fd2b 	bl	800ed48 <ld_dword>
 80102f2:	4603      	mov	r3, r0
 80102f4:	4a05      	ldr	r2, [pc, #20]	; (801030c <check_fs+0xa8>)
 80102f6:	4293      	cmp	r3, r2
 80102f8:	d101      	bne.n	80102fe <check_fs+0x9a>
 80102fa:	2300      	movs	r3, #0
 80102fc:	e000      	b.n	8010300 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80102fe:	2302      	movs	r3, #2
}
 8010300:	4618      	mov	r0, r3
 8010302:	3708      	adds	r7, #8
 8010304:	46bd      	mov	sp, r7
 8010306:	bd80      	pop	{r7, pc}
 8010308:	00544146 	.word	0x00544146
 801030c:	33544146 	.word	0x33544146

08010310 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010310:	b580      	push	{r7, lr}
 8010312:	b096      	sub	sp, #88	; 0x58
 8010314:	af00      	add	r7, sp, #0
 8010316:	60f8      	str	r0, [r7, #12]
 8010318:	60b9      	str	r1, [r7, #8]
 801031a:	4613      	mov	r3, r2
 801031c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801031e:	68bb      	ldr	r3, [r7, #8]
 8010320:	2200      	movs	r2, #0
 8010322:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010324:	68f8      	ldr	r0, [r7, #12]
 8010326:	f7ff ff58 	bl	80101da <get_ldnumber>
 801032a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801032c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801032e:	2b00      	cmp	r3, #0
 8010330:	da01      	bge.n	8010336 <find_volume+0x26>
 8010332:	230b      	movs	r3, #11
 8010334:	e22d      	b.n	8010792 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010336:	4aa1      	ldr	r2, [pc, #644]	; (80105bc <find_volume+0x2ac>)
 8010338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801033a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801033e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010342:	2b00      	cmp	r3, #0
 8010344:	d101      	bne.n	801034a <find_volume+0x3a>
 8010346:	230c      	movs	r3, #12
 8010348:	e223      	b.n	8010792 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801034a:	68bb      	ldr	r3, [r7, #8]
 801034c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801034e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010350:	79fb      	ldrb	r3, [r7, #7]
 8010352:	f023 0301 	bic.w	r3, r3, #1
 8010356:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801035a:	781b      	ldrb	r3, [r3, #0]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d01a      	beq.n	8010396 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8010360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010362:	785b      	ldrb	r3, [r3, #1]
 8010364:	4618      	mov	r0, r3
 8010366:	f7fe fc39 	bl	800ebdc <disk_status>
 801036a:	4603      	mov	r3, r0
 801036c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010370:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010374:	f003 0301 	and.w	r3, r3, #1
 8010378:	2b00      	cmp	r3, #0
 801037a:	d10c      	bne.n	8010396 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801037c:	79fb      	ldrb	r3, [r7, #7]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d007      	beq.n	8010392 <find_volume+0x82>
 8010382:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010386:	f003 0304 	and.w	r3, r3, #4
 801038a:	2b00      	cmp	r3, #0
 801038c:	d001      	beq.n	8010392 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801038e:	230a      	movs	r3, #10
 8010390:	e1ff      	b.n	8010792 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8010392:	2300      	movs	r3, #0
 8010394:	e1fd      	b.n	8010792 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010398:	2200      	movs	r2, #0
 801039a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801039c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801039e:	b2da      	uxtb	r2, r3
 80103a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103a2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80103a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103a6:	785b      	ldrb	r3, [r3, #1]
 80103a8:	4618      	mov	r0, r3
 80103aa:	f7fe fc31 	bl	800ec10 <disk_initialize>
 80103ae:	4603      	mov	r3, r0
 80103b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80103b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80103b8:	f003 0301 	and.w	r3, r3, #1
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d001      	beq.n	80103c4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80103c0:	2303      	movs	r3, #3
 80103c2:	e1e6      	b.n	8010792 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80103c4:	79fb      	ldrb	r3, [r7, #7]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d007      	beq.n	80103da <find_volume+0xca>
 80103ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80103ce:	f003 0304 	and.w	r3, r3, #4
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d001      	beq.n	80103da <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80103d6:	230a      	movs	r3, #10
 80103d8:	e1db      	b.n	8010792 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80103da:	2300      	movs	r3, #0
 80103dc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80103de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80103e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80103e2:	f7ff ff3f 	bl	8010264 <check_fs>
 80103e6:	4603      	mov	r3, r0
 80103e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80103ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80103f0:	2b02      	cmp	r3, #2
 80103f2:	d149      	bne.n	8010488 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80103f4:	2300      	movs	r3, #0
 80103f6:	643b      	str	r3, [r7, #64]	; 0x40
 80103f8:	e01e      	b.n	8010438 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80103fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010400:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010402:	011b      	lsls	r3, r3, #4
 8010404:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010408:	4413      	add	r3, r2
 801040a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801040c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801040e:	3304      	adds	r3, #4
 8010410:	781b      	ldrb	r3, [r3, #0]
 8010412:	2b00      	cmp	r3, #0
 8010414:	d006      	beq.n	8010424 <find_volume+0x114>
 8010416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010418:	3308      	adds	r3, #8
 801041a:	4618      	mov	r0, r3
 801041c:	f7fe fc94 	bl	800ed48 <ld_dword>
 8010420:	4602      	mov	r2, r0
 8010422:	e000      	b.n	8010426 <find_volume+0x116>
 8010424:	2200      	movs	r2, #0
 8010426:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010428:	009b      	lsls	r3, r3, #2
 801042a:	3358      	adds	r3, #88	; 0x58
 801042c:	443b      	add	r3, r7
 801042e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010434:	3301      	adds	r3, #1
 8010436:	643b      	str	r3, [r7, #64]	; 0x40
 8010438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801043a:	2b03      	cmp	r3, #3
 801043c:	d9dd      	bls.n	80103fa <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801043e:	2300      	movs	r3, #0
 8010440:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8010442:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010444:	2b00      	cmp	r3, #0
 8010446:	d002      	beq.n	801044e <find_volume+0x13e>
 8010448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801044a:	3b01      	subs	r3, #1
 801044c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801044e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010450:	009b      	lsls	r3, r3, #2
 8010452:	3358      	adds	r3, #88	; 0x58
 8010454:	443b      	add	r3, r7
 8010456:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801045a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801045c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801045e:	2b00      	cmp	r3, #0
 8010460:	d005      	beq.n	801046e <find_volume+0x15e>
 8010462:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010464:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010466:	f7ff fefd 	bl	8010264 <check_fs>
 801046a:	4603      	mov	r3, r0
 801046c:	e000      	b.n	8010470 <find_volume+0x160>
 801046e:	2303      	movs	r3, #3
 8010470:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010474:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010478:	2b01      	cmp	r3, #1
 801047a:	d905      	bls.n	8010488 <find_volume+0x178>
 801047c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801047e:	3301      	adds	r3, #1
 8010480:	643b      	str	r3, [r7, #64]	; 0x40
 8010482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010484:	2b03      	cmp	r3, #3
 8010486:	d9e2      	bls.n	801044e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010488:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801048c:	2b04      	cmp	r3, #4
 801048e:	d101      	bne.n	8010494 <find_volume+0x184>
 8010490:	2301      	movs	r3, #1
 8010492:	e17e      	b.n	8010792 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010494:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010498:	2b01      	cmp	r3, #1
 801049a:	d901      	bls.n	80104a0 <find_volume+0x190>
 801049c:	230d      	movs	r3, #13
 801049e:	e178      	b.n	8010792 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80104a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104a2:	3330      	adds	r3, #48	; 0x30
 80104a4:	330b      	adds	r3, #11
 80104a6:	4618      	mov	r0, r3
 80104a8:	f7fe fc36 	bl	800ed18 <ld_word>
 80104ac:	4603      	mov	r3, r0
 80104ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80104b2:	d001      	beq.n	80104b8 <find_volume+0x1a8>
 80104b4:	230d      	movs	r3, #13
 80104b6:	e16c      	b.n	8010792 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80104b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104ba:	3330      	adds	r3, #48	; 0x30
 80104bc:	3316      	adds	r3, #22
 80104be:	4618      	mov	r0, r3
 80104c0:	f7fe fc2a 	bl	800ed18 <ld_word>
 80104c4:	4603      	mov	r3, r0
 80104c6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80104c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d106      	bne.n	80104dc <find_volume+0x1cc>
 80104ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104d0:	3330      	adds	r3, #48	; 0x30
 80104d2:	3324      	adds	r3, #36	; 0x24
 80104d4:	4618      	mov	r0, r3
 80104d6:	f7fe fc37 	bl	800ed48 <ld_dword>
 80104da:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80104dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80104e0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80104e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104e4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80104e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104ea:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80104ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104ee:	789b      	ldrb	r3, [r3, #2]
 80104f0:	2b01      	cmp	r3, #1
 80104f2:	d005      	beq.n	8010500 <find_volume+0x1f0>
 80104f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104f6:	789b      	ldrb	r3, [r3, #2]
 80104f8:	2b02      	cmp	r3, #2
 80104fa:	d001      	beq.n	8010500 <find_volume+0x1f0>
 80104fc:	230d      	movs	r3, #13
 80104fe:	e148      	b.n	8010792 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010502:	789b      	ldrb	r3, [r3, #2]
 8010504:	461a      	mov	r2, r3
 8010506:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010508:	fb02 f303 	mul.w	r3, r2, r3
 801050c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801050e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010514:	b29a      	uxth	r2, r3
 8010516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010518:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801051a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801051c:	895b      	ldrh	r3, [r3, #10]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d008      	beq.n	8010534 <find_volume+0x224>
 8010522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010524:	895b      	ldrh	r3, [r3, #10]
 8010526:	461a      	mov	r2, r3
 8010528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801052a:	895b      	ldrh	r3, [r3, #10]
 801052c:	3b01      	subs	r3, #1
 801052e:	4013      	ands	r3, r2
 8010530:	2b00      	cmp	r3, #0
 8010532:	d001      	beq.n	8010538 <find_volume+0x228>
 8010534:	230d      	movs	r3, #13
 8010536:	e12c      	b.n	8010792 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801053a:	3330      	adds	r3, #48	; 0x30
 801053c:	3311      	adds	r3, #17
 801053e:	4618      	mov	r0, r3
 8010540:	f7fe fbea 	bl	800ed18 <ld_word>
 8010544:	4603      	mov	r3, r0
 8010546:	461a      	mov	r2, r3
 8010548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801054a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801054c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801054e:	891b      	ldrh	r3, [r3, #8]
 8010550:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010554:	b29b      	uxth	r3, r3
 8010556:	2b00      	cmp	r3, #0
 8010558:	d001      	beq.n	801055e <find_volume+0x24e>
 801055a:	230d      	movs	r3, #13
 801055c:	e119      	b.n	8010792 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801055e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010560:	3330      	adds	r3, #48	; 0x30
 8010562:	3313      	adds	r3, #19
 8010564:	4618      	mov	r0, r3
 8010566:	f7fe fbd7 	bl	800ed18 <ld_word>
 801056a:	4603      	mov	r3, r0
 801056c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801056e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010570:	2b00      	cmp	r3, #0
 8010572:	d106      	bne.n	8010582 <find_volume+0x272>
 8010574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010576:	3330      	adds	r3, #48	; 0x30
 8010578:	3320      	adds	r3, #32
 801057a:	4618      	mov	r0, r3
 801057c:	f7fe fbe4 	bl	800ed48 <ld_dword>
 8010580:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010584:	3330      	adds	r3, #48	; 0x30
 8010586:	330e      	adds	r3, #14
 8010588:	4618      	mov	r0, r3
 801058a:	f7fe fbc5 	bl	800ed18 <ld_word>
 801058e:	4603      	mov	r3, r0
 8010590:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010592:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010594:	2b00      	cmp	r3, #0
 8010596:	d101      	bne.n	801059c <find_volume+0x28c>
 8010598:	230d      	movs	r3, #13
 801059a:	e0fa      	b.n	8010792 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801059c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801059e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105a0:	4413      	add	r3, r2
 80105a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80105a4:	8912      	ldrh	r2, [r2, #8]
 80105a6:	09d2      	lsrs	r2, r2, #7
 80105a8:	b292      	uxth	r2, r2
 80105aa:	4413      	add	r3, r2
 80105ac:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80105ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80105b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105b2:	429a      	cmp	r2, r3
 80105b4:	d204      	bcs.n	80105c0 <find_volume+0x2b0>
 80105b6:	230d      	movs	r3, #13
 80105b8:	e0eb      	b.n	8010792 <find_volume+0x482>
 80105ba:	bf00      	nop
 80105bc:	200041f8 	.word	0x200041f8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80105c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80105c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105c4:	1ad3      	subs	r3, r2, r3
 80105c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80105c8:	8952      	ldrh	r2, [r2, #10]
 80105ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80105ce:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80105d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d101      	bne.n	80105da <find_volume+0x2ca>
 80105d6:	230d      	movs	r3, #13
 80105d8:	e0db      	b.n	8010792 <find_volume+0x482>
		fmt = FS_FAT32;
 80105da:	2303      	movs	r3, #3
 80105dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80105e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105e2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80105e6:	4293      	cmp	r3, r2
 80105e8:	d802      	bhi.n	80105f0 <find_volume+0x2e0>
 80105ea:	2302      	movs	r3, #2
 80105ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80105f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f2:	f640 72f5 	movw	r2, #4085	; 0xff5
 80105f6:	4293      	cmp	r3, r2
 80105f8:	d802      	bhi.n	8010600 <find_volume+0x2f0>
 80105fa:	2301      	movs	r3, #1
 80105fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010602:	1c9a      	adds	r2, r3, #2
 8010604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010606:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8010608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801060a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801060c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801060e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010610:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010612:	441a      	add	r2, r3
 8010614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010616:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8010618:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801061a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801061c:	441a      	add	r2, r3
 801061e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010620:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8010622:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010626:	2b03      	cmp	r3, #3
 8010628:	d11e      	bne.n	8010668 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801062a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801062c:	3330      	adds	r3, #48	; 0x30
 801062e:	332a      	adds	r3, #42	; 0x2a
 8010630:	4618      	mov	r0, r3
 8010632:	f7fe fb71 	bl	800ed18 <ld_word>
 8010636:	4603      	mov	r3, r0
 8010638:	2b00      	cmp	r3, #0
 801063a:	d001      	beq.n	8010640 <find_volume+0x330>
 801063c:	230d      	movs	r3, #13
 801063e:	e0a8      	b.n	8010792 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010642:	891b      	ldrh	r3, [r3, #8]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d001      	beq.n	801064c <find_volume+0x33c>
 8010648:	230d      	movs	r3, #13
 801064a:	e0a2      	b.n	8010792 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801064c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801064e:	3330      	adds	r3, #48	; 0x30
 8010650:	332c      	adds	r3, #44	; 0x2c
 8010652:	4618      	mov	r0, r3
 8010654:	f7fe fb78 	bl	800ed48 <ld_dword>
 8010658:	4602      	mov	r2, r0
 801065a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801065c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801065e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010660:	695b      	ldr	r3, [r3, #20]
 8010662:	009b      	lsls	r3, r3, #2
 8010664:	647b      	str	r3, [r7, #68]	; 0x44
 8010666:	e01f      	b.n	80106a8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801066a:	891b      	ldrh	r3, [r3, #8]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d101      	bne.n	8010674 <find_volume+0x364>
 8010670:	230d      	movs	r3, #13
 8010672:	e08e      	b.n	8010792 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010676:	6a1a      	ldr	r2, [r3, #32]
 8010678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801067a:	441a      	add	r2, r3
 801067c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801067e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010680:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010684:	2b02      	cmp	r3, #2
 8010686:	d103      	bne.n	8010690 <find_volume+0x380>
 8010688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801068a:	695b      	ldr	r3, [r3, #20]
 801068c:	005b      	lsls	r3, r3, #1
 801068e:	e00a      	b.n	80106a6 <find_volume+0x396>
 8010690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010692:	695a      	ldr	r2, [r3, #20]
 8010694:	4613      	mov	r3, r2
 8010696:	005b      	lsls	r3, r3, #1
 8010698:	4413      	add	r3, r2
 801069a:	085a      	lsrs	r2, r3, #1
 801069c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801069e:	695b      	ldr	r3, [r3, #20]
 80106a0:	f003 0301 	and.w	r3, r3, #1
 80106a4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80106a6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80106a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106aa:	699a      	ldr	r2, [r3, #24]
 80106ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80106ae:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80106b2:	0b1b      	lsrs	r3, r3, #12
 80106b4:	429a      	cmp	r2, r3
 80106b6:	d201      	bcs.n	80106bc <find_volume+0x3ac>
 80106b8:	230d      	movs	r3, #13
 80106ba:	e06a      	b.n	8010792 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80106bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80106c2:	611a      	str	r2, [r3, #16]
 80106c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106c6:	691a      	ldr	r2, [r3, #16]
 80106c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ca:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80106cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ce:	2280      	movs	r2, #128	; 0x80
 80106d0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80106d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80106d6:	2b03      	cmp	r3, #3
 80106d8:	d149      	bne.n	801076e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80106da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106dc:	3330      	adds	r3, #48	; 0x30
 80106de:	3330      	adds	r3, #48	; 0x30
 80106e0:	4618      	mov	r0, r3
 80106e2:	f7fe fb19 	bl	800ed18 <ld_word>
 80106e6:	4603      	mov	r3, r0
 80106e8:	2b01      	cmp	r3, #1
 80106ea:	d140      	bne.n	801076e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80106ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106ee:	3301      	adds	r3, #1
 80106f0:	4619      	mov	r1, r3
 80106f2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80106f4:	f7fe fdc0 	bl	800f278 <move_window>
 80106f8:	4603      	mov	r3, r0
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d137      	bne.n	801076e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80106fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010700:	2200      	movs	r2, #0
 8010702:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010706:	3330      	adds	r3, #48	; 0x30
 8010708:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801070c:	4618      	mov	r0, r3
 801070e:	f7fe fb03 	bl	800ed18 <ld_word>
 8010712:	4603      	mov	r3, r0
 8010714:	461a      	mov	r2, r3
 8010716:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801071a:	429a      	cmp	r2, r3
 801071c:	d127      	bne.n	801076e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801071e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010720:	3330      	adds	r3, #48	; 0x30
 8010722:	4618      	mov	r0, r3
 8010724:	f7fe fb10 	bl	800ed48 <ld_dword>
 8010728:	4603      	mov	r3, r0
 801072a:	4a1c      	ldr	r2, [pc, #112]	; (801079c <find_volume+0x48c>)
 801072c:	4293      	cmp	r3, r2
 801072e:	d11e      	bne.n	801076e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010732:	3330      	adds	r3, #48	; 0x30
 8010734:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010738:	4618      	mov	r0, r3
 801073a:	f7fe fb05 	bl	800ed48 <ld_dword>
 801073e:	4603      	mov	r3, r0
 8010740:	4a17      	ldr	r2, [pc, #92]	; (80107a0 <find_volume+0x490>)
 8010742:	4293      	cmp	r3, r2
 8010744:	d113      	bne.n	801076e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010748:	3330      	adds	r3, #48	; 0x30
 801074a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801074e:	4618      	mov	r0, r3
 8010750:	f7fe fafa 	bl	800ed48 <ld_dword>
 8010754:	4602      	mov	r2, r0
 8010756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010758:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801075a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801075c:	3330      	adds	r3, #48	; 0x30
 801075e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010762:	4618      	mov	r0, r3
 8010764:	f7fe faf0 	bl	800ed48 <ld_dword>
 8010768:	4602      	mov	r2, r0
 801076a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801076c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801076e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010770:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8010774:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010776:	4b0b      	ldr	r3, [pc, #44]	; (80107a4 <find_volume+0x494>)
 8010778:	881b      	ldrh	r3, [r3, #0]
 801077a:	3301      	adds	r3, #1
 801077c:	b29a      	uxth	r2, r3
 801077e:	4b09      	ldr	r3, [pc, #36]	; (80107a4 <find_volume+0x494>)
 8010780:	801a      	strh	r2, [r3, #0]
 8010782:	4b08      	ldr	r3, [pc, #32]	; (80107a4 <find_volume+0x494>)
 8010784:	881a      	ldrh	r2, [r3, #0]
 8010786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010788:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801078a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801078c:	f7fe fd0c 	bl	800f1a8 <clear_lock>
#endif
	return FR_OK;
 8010790:	2300      	movs	r3, #0
}
 8010792:	4618      	mov	r0, r3
 8010794:	3758      	adds	r7, #88	; 0x58
 8010796:	46bd      	mov	sp, r7
 8010798:	bd80      	pop	{r7, pc}
 801079a:	bf00      	nop
 801079c:	41615252 	.word	0x41615252
 80107a0:	61417272 	.word	0x61417272
 80107a4:	200041fc 	.word	0x200041fc

080107a8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b084      	sub	sp, #16
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
 80107b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80107b2:	2309      	movs	r3, #9
 80107b4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d01c      	beq.n	80107f6 <validate+0x4e>
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d018      	beq.n	80107f6 <validate+0x4e>
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	781b      	ldrb	r3, [r3, #0]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d013      	beq.n	80107f6 <validate+0x4e>
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	889a      	ldrh	r2, [r3, #4]
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	88db      	ldrh	r3, [r3, #6]
 80107d8:	429a      	cmp	r2, r3
 80107da:	d10c      	bne.n	80107f6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	785b      	ldrb	r3, [r3, #1]
 80107e2:	4618      	mov	r0, r3
 80107e4:	f7fe f9fa 	bl	800ebdc <disk_status>
 80107e8:	4603      	mov	r3, r0
 80107ea:	f003 0301 	and.w	r3, r3, #1
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d101      	bne.n	80107f6 <validate+0x4e>
			res = FR_OK;
 80107f2:	2300      	movs	r3, #0
 80107f4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80107f6:	7bfb      	ldrb	r3, [r7, #15]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d102      	bne.n	8010802 <validate+0x5a>
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	e000      	b.n	8010804 <validate+0x5c>
 8010802:	2300      	movs	r3, #0
 8010804:	683a      	ldr	r2, [r7, #0]
 8010806:	6013      	str	r3, [r2, #0]
	return res;
 8010808:	7bfb      	ldrb	r3, [r7, #15]
}
 801080a:	4618      	mov	r0, r3
 801080c:	3710      	adds	r7, #16
 801080e:	46bd      	mov	sp, r7
 8010810:	bd80      	pop	{r7, pc}
	...

08010814 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010814:	b580      	push	{r7, lr}
 8010816:	b088      	sub	sp, #32
 8010818:	af00      	add	r7, sp, #0
 801081a:	60f8      	str	r0, [r7, #12]
 801081c:	60b9      	str	r1, [r7, #8]
 801081e:	4613      	mov	r3, r2
 8010820:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010822:	68bb      	ldr	r3, [r7, #8]
 8010824:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010826:	f107 0310 	add.w	r3, r7, #16
 801082a:	4618      	mov	r0, r3
 801082c:	f7ff fcd5 	bl	80101da <get_ldnumber>
 8010830:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010832:	69fb      	ldr	r3, [r7, #28]
 8010834:	2b00      	cmp	r3, #0
 8010836:	da01      	bge.n	801083c <f_mount+0x28>
 8010838:	230b      	movs	r3, #11
 801083a:	e02b      	b.n	8010894 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801083c:	4a17      	ldr	r2, [pc, #92]	; (801089c <f_mount+0x88>)
 801083e:	69fb      	ldr	r3, [r7, #28]
 8010840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010844:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010846:	69bb      	ldr	r3, [r7, #24]
 8010848:	2b00      	cmp	r3, #0
 801084a:	d005      	beq.n	8010858 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801084c:	69b8      	ldr	r0, [r7, #24]
 801084e:	f7fe fcab 	bl	800f1a8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010852:	69bb      	ldr	r3, [r7, #24]
 8010854:	2200      	movs	r2, #0
 8010856:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	2b00      	cmp	r3, #0
 801085c:	d002      	beq.n	8010864 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	2200      	movs	r2, #0
 8010862:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010864:	68fa      	ldr	r2, [r7, #12]
 8010866:	490d      	ldr	r1, [pc, #52]	; (801089c <f_mount+0x88>)
 8010868:	69fb      	ldr	r3, [r7, #28]
 801086a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d002      	beq.n	801087a <f_mount+0x66>
 8010874:	79fb      	ldrb	r3, [r7, #7]
 8010876:	2b01      	cmp	r3, #1
 8010878:	d001      	beq.n	801087e <f_mount+0x6a>
 801087a:	2300      	movs	r3, #0
 801087c:	e00a      	b.n	8010894 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801087e:	f107 010c 	add.w	r1, r7, #12
 8010882:	f107 0308 	add.w	r3, r7, #8
 8010886:	2200      	movs	r2, #0
 8010888:	4618      	mov	r0, r3
 801088a:	f7ff fd41 	bl	8010310 <find_volume>
 801088e:	4603      	mov	r3, r0
 8010890:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010892:	7dfb      	ldrb	r3, [r7, #23]
}
 8010894:	4618      	mov	r0, r3
 8010896:	3720      	adds	r7, #32
 8010898:	46bd      	mov	sp, r7
 801089a:	bd80      	pop	{r7, pc}
 801089c:	200041f8 	.word	0x200041f8

080108a0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80108a0:	b580      	push	{r7, lr}
 80108a2:	b098      	sub	sp, #96	; 0x60
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	60f8      	str	r0, [r7, #12]
 80108a8:	60b9      	str	r1, [r7, #8]
 80108aa:	4613      	mov	r3, r2
 80108ac:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d101      	bne.n	80108b8 <f_open+0x18>
 80108b4:	2309      	movs	r3, #9
 80108b6:	e1ad      	b.n	8010c14 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80108b8:	79fb      	ldrb	r3, [r7, #7]
 80108ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80108be:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80108c0:	79fa      	ldrb	r2, [r7, #7]
 80108c2:	f107 0110 	add.w	r1, r7, #16
 80108c6:	f107 0308 	add.w	r3, r7, #8
 80108ca:	4618      	mov	r0, r3
 80108cc:	f7ff fd20 	bl	8010310 <find_volume>
 80108d0:	4603      	mov	r3, r0
 80108d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80108d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80108da:	2b00      	cmp	r3, #0
 80108dc:	f040 8191 	bne.w	8010c02 <f_open+0x362>
		dj.obj.fs = fs;
 80108e0:	693b      	ldr	r3, [r7, #16]
 80108e2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80108e4:	68ba      	ldr	r2, [r7, #8]
 80108e6:	f107 0314 	add.w	r3, r7, #20
 80108ea:	4611      	mov	r1, r2
 80108ec:	4618      	mov	r0, r3
 80108ee:	f7ff fc03 	bl	80100f8 <follow_path>
 80108f2:	4603      	mov	r3, r0
 80108f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80108f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d11a      	bne.n	8010936 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010900:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010904:	b25b      	sxtb	r3, r3
 8010906:	2b00      	cmp	r3, #0
 8010908:	da03      	bge.n	8010912 <f_open+0x72>
				res = FR_INVALID_NAME;
 801090a:	2306      	movs	r3, #6
 801090c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010910:	e011      	b.n	8010936 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010912:	79fb      	ldrb	r3, [r7, #7]
 8010914:	f023 0301 	bic.w	r3, r3, #1
 8010918:	2b00      	cmp	r3, #0
 801091a:	bf14      	ite	ne
 801091c:	2301      	movne	r3, #1
 801091e:	2300      	moveq	r3, #0
 8010920:	b2db      	uxtb	r3, r3
 8010922:	461a      	mov	r2, r3
 8010924:	f107 0314 	add.w	r3, r7, #20
 8010928:	4611      	mov	r1, r2
 801092a:	4618      	mov	r0, r3
 801092c:	f7fe faf4 	bl	800ef18 <chk_lock>
 8010930:	4603      	mov	r3, r0
 8010932:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010936:	79fb      	ldrb	r3, [r7, #7]
 8010938:	f003 031c 	and.w	r3, r3, #28
 801093c:	2b00      	cmp	r3, #0
 801093e:	d07f      	beq.n	8010a40 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8010940:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010944:	2b00      	cmp	r3, #0
 8010946:	d017      	beq.n	8010978 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010948:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801094c:	2b04      	cmp	r3, #4
 801094e:	d10e      	bne.n	801096e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010950:	f7fe fb3e 	bl	800efd0 <enq_lock>
 8010954:	4603      	mov	r3, r0
 8010956:	2b00      	cmp	r3, #0
 8010958:	d006      	beq.n	8010968 <f_open+0xc8>
 801095a:	f107 0314 	add.w	r3, r7, #20
 801095e:	4618      	mov	r0, r3
 8010960:	f7ff fa87 	bl	800fe72 <dir_register>
 8010964:	4603      	mov	r3, r0
 8010966:	e000      	b.n	801096a <f_open+0xca>
 8010968:	2312      	movs	r3, #18
 801096a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801096e:	79fb      	ldrb	r3, [r7, #7]
 8010970:	f043 0308 	orr.w	r3, r3, #8
 8010974:	71fb      	strb	r3, [r7, #7]
 8010976:	e010      	b.n	801099a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010978:	7ebb      	ldrb	r3, [r7, #26]
 801097a:	f003 0311 	and.w	r3, r3, #17
 801097e:	2b00      	cmp	r3, #0
 8010980:	d003      	beq.n	801098a <f_open+0xea>
					res = FR_DENIED;
 8010982:	2307      	movs	r3, #7
 8010984:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010988:	e007      	b.n	801099a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801098a:	79fb      	ldrb	r3, [r7, #7]
 801098c:	f003 0304 	and.w	r3, r3, #4
 8010990:	2b00      	cmp	r3, #0
 8010992:	d002      	beq.n	801099a <f_open+0xfa>
 8010994:	2308      	movs	r3, #8
 8010996:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801099a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d168      	bne.n	8010a74 <f_open+0x1d4>
 80109a2:	79fb      	ldrb	r3, [r7, #7]
 80109a4:	f003 0308 	and.w	r3, r3, #8
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d063      	beq.n	8010a74 <f_open+0x1d4>
				dw = GET_FATTIME();
 80109ac:	f7fe f848 	bl	800ea40 <get_fattime>
 80109b0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80109b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109b4:	330e      	adds	r3, #14
 80109b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80109b8:	4618      	mov	r0, r3
 80109ba:	f7fe fa03 	bl	800edc4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80109be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109c0:	3316      	adds	r3, #22
 80109c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80109c4:	4618      	mov	r0, r3
 80109c6:	f7fe f9fd 	bl	800edc4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80109ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109cc:	330b      	adds	r3, #11
 80109ce:	2220      	movs	r2, #32
 80109d0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80109d2:	693b      	ldr	r3, [r7, #16]
 80109d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80109d6:	4611      	mov	r1, r2
 80109d8:	4618      	mov	r0, r3
 80109da:	f7ff f959 	bl	800fc90 <ld_clust>
 80109de:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80109e0:	693b      	ldr	r3, [r7, #16]
 80109e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80109e4:	2200      	movs	r2, #0
 80109e6:	4618      	mov	r0, r3
 80109e8:	f7ff f971 	bl	800fcce <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80109ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109ee:	331c      	adds	r3, #28
 80109f0:	2100      	movs	r1, #0
 80109f2:	4618      	mov	r0, r3
 80109f4:	f7fe f9e6 	bl	800edc4 <st_dword>
					fs->wflag = 1;
 80109f8:	693b      	ldr	r3, [r7, #16]
 80109fa:	2201      	movs	r2, #1
 80109fc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80109fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d037      	beq.n	8010a74 <f_open+0x1d4>
						dw = fs->winsect;
 8010a04:	693b      	ldr	r3, [r7, #16]
 8010a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a08:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8010a0a:	f107 0314 	add.w	r3, r7, #20
 8010a0e:	2200      	movs	r2, #0
 8010a10:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010a12:	4618      	mov	r0, r3
 8010a14:	f7fe fe84 	bl	800f720 <remove_chain>
 8010a18:	4603      	mov	r3, r0
 8010a1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8010a1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d126      	bne.n	8010a74 <f_open+0x1d4>
							res = move_window(fs, dw);
 8010a26:	693b      	ldr	r3, [r7, #16]
 8010a28:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010a2a:	4618      	mov	r0, r3
 8010a2c:	f7fe fc24 	bl	800f278 <move_window>
 8010a30:	4603      	mov	r3, r0
 8010a32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010a36:	693b      	ldr	r3, [r7, #16]
 8010a38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010a3a:	3a01      	subs	r2, #1
 8010a3c:	60da      	str	r2, [r3, #12]
 8010a3e:	e019      	b.n	8010a74 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010a40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d115      	bne.n	8010a74 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010a48:	7ebb      	ldrb	r3, [r7, #26]
 8010a4a:	f003 0310 	and.w	r3, r3, #16
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d003      	beq.n	8010a5a <f_open+0x1ba>
					res = FR_NO_FILE;
 8010a52:	2304      	movs	r3, #4
 8010a54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010a58:	e00c      	b.n	8010a74 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010a5a:	79fb      	ldrb	r3, [r7, #7]
 8010a5c:	f003 0302 	and.w	r3, r3, #2
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d007      	beq.n	8010a74 <f_open+0x1d4>
 8010a64:	7ebb      	ldrb	r3, [r7, #26]
 8010a66:	f003 0301 	and.w	r3, r3, #1
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d002      	beq.n	8010a74 <f_open+0x1d4>
						res = FR_DENIED;
 8010a6e:	2307      	movs	r3, #7
 8010a70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8010a74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d128      	bne.n	8010ace <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010a7c:	79fb      	ldrb	r3, [r7, #7]
 8010a7e:	f003 0308 	and.w	r3, r3, #8
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d003      	beq.n	8010a8e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8010a86:	79fb      	ldrb	r3, [r7, #7]
 8010a88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a8c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010a8e:	693b      	ldr	r3, [r7, #16]
 8010a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8010a96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010a9c:	79fb      	ldrb	r3, [r7, #7]
 8010a9e:	f023 0301 	bic.w	r3, r3, #1
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	bf14      	ite	ne
 8010aa6:	2301      	movne	r3, #1
 8010aa8:	2300      	moveq	r3, #0
 8010aaa:	b2db      	uxtb	r3, r3
 8010aac:	461a      	mov	r2, r3
 8010aae:	f107 0314 	add.w	r3, r7, #20
 8010ab2:	4611      	mov	r1, r2
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	f7fe faad 	bl	800f014 <inc_lock>
 8010aba:	4602      	mov	r2, r0
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	691b      	ldr	r3, [r3, #16]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d102      	bne.n	8010ace <f_open+0x22e>
 8010ac8:	2302      	movs	r3, #2
 8010aca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010ace:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	f040 8095 	bne.w	8010c02 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010ad8:	693b      	ldr	r3, [r7, #16]
 8010ada:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010adc:	4611      	mov	r1, r2
 8010ade:	4618      	mov	r0, r3
 8010ae0:	f7ff f8d6 	bl	800fc90 <ld_clust>
 8010ae4:	4602      	mov	r2, r0
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010aec:	331c      	adds	r3, #28
 8010aee:	4618      	mov	r0, r3
 8010af0:	f7fe f92a 	bl	800ed48 <ld_dword>
 8010af4:	4602      	mov	r2, r0
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	2200      	movs	r2, #0
 8010afe:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010b00:	693a      	ldr	r2, [r7, #16]
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010b06:	693b      	ldr	r3, [r7, #16]
 8010b08:	88da      	ldrh	r2, [r3, #6]
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	79fa      	ldrb	r2, [r7, #7]
 8010b12:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	2200      	movs	r2, #0
 8010b18:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	2200      	movs	r2, #0
 8010b1e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	2200      	movs	r2, #0
 8010b24:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	3330      	adds	r3, #48	; 0x30
 8010b2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010b2e:	2100      	movs	r1, #0
 8010b30:	4618      	mov	r0, r3
 8010b32:	f7fe f994 	bl	800ee5e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010b36:	79fb      	ldrb	r3, [r7, #7]
 8010b38:	f003 0320 	and.w	r3, r3, #32
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d060      	beq.n	8010c02 <f_open+0x362>
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	68db      	ldr	r3, [r3, #12]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d05c      	beq.n	8010c02 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	68da      	ldr	r2, [r3, #12]
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010b50:	693b      	ldr	r3, [r7, #16]
 8010b52:	895b      	ldrh	r3, [r3, #10]
 8010b54:	031b      	lsls	r3, r3, #12
 8010b56:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	689b      	ldr	r3, [r3, #8]
 8010b5c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	68db      	ldr	r3, [r3, #12]
 8010b62:	657b      	str	r3, [r7, #84]	; 0x54
 8010b64:	e016      	b.n	8010b94 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	f7fe fc3f 	bl	800f3ee <get_fat>
 8010b70:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8010b72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010b74:	2b01      	cmp	r3, #1
 8010b76:	d802      	bhi.n	8010b7e <f_open+0x2de>
 8010b78:	2302      	movs	r3, #2
 8010b7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010b7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010b80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010b84:	d102      	bne.n	8010b8c <f_open+0x2ec>
 8010b86:	2301      	movs	r3, #1
 8010b88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010b8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010b8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b90:	1ad3      	subs	r3, r2, r3
 8010b92:	657b      	str	r3, [r7, #84]	; 0x54
 8010b94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d103      	bne.n	8010ba4 <f_open+0x304>
 8010b9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010b9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ba0:	429a      	cmp	r2, r3
 8010ba2:	d8e0      	bhi.n	8010b66 <f_open+0x2c6>
				}
				fp->clust = clst;
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010ba8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010baa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d127      	bne.n	8010c02 <f_open+0x362>
 8010bb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d022      	beq.n	8010c02 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010bbc:	693b      	ldr	r3, [r7, #16]
 8010bbe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	f7fe fbf5 	bl	800f3b0 <clust2sect>
 8010bc6:	6478      	str	r0, [r7, #68]	; 0x44
 8010bc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d103      	bne.n	8010bd6 <f_open+0x336>
						res = FR_INT_ERR;
 8010bce:	2302      	movs	r3, #2
 8010bd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010bd4:	e015      	b.n	8010c02 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010bd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010bd8:	0b1a      	lsrs	r2, r3, #12
 8010bda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010bdc:	441a      	add	r2, r3
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010be2:	693b      	ldr	r3, [r7, #16]
 8010be4:	7858      	ldrb	r0, [r3, #1]
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	6a1a      	ldr	r2, [r3, #32]
 8010bf0:	2301      	movs	r3, #1
 8010bf2:	f7fe f833 	bl	800ec5c <disk_read>
 8010bf6:	4603      	mov	r3, r0
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d002      	beq.n	8010c02 <f_open+0x362>
 8010bfc:	2301      	movs	r3, #1
 8010bfe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010c02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d002      	beq.n	8010c10 <f_open+0x370>
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	2200      	movs	r2, #0
 8010c0e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010c10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8010c14:	4618      	mov	r0, r3
 8010c16:	3760      	adds	r7, #96	; 0x60
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	bd80      	pop	{r7, pc}

08010c1c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b08e      	sub	sp, #56	; 0x38
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	60f8      	str	r0, [r7, #12]
 8010c24:	60b9      	str	r1, [r7, #8]
 8010c26:	607a      	str	r2, [r7, #4]
 8010c28:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8010c2a:	68bb      	ldr	r3, [r7, #8]
 8010c2c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8010c2e:	683b      	ldr	r3, [r7, #0]
 8010c30:	2200      	movs	r2, #0
 8010c32:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	f107 0214 	add.w	r2, r7, #20
 8010c3a:	4611      	mov	r1, r2
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	f7ff fdb3 	bl	80107a8 <validate>
 8010c42:	4603      	mov	r3, r0
 8010c44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010c48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d107      	bne.n	8010c60 <f_read+0x44>
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	7d5b      	ldrb	r3, [r3, #21]
 8010c54:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010c58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d002      	beq.n	8010c66 <f_read+0x4a>
 8010c60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010c64:	e115      	b.n	8010e92 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	7d1b      	ldrb	r3, [r3, #20]
 8010c6a:	f003 0301 	and.w	r3, r3, #1
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d101      	bne.n	8010c76 <f_read+0x5a>
 8010c72:	2307      	movs	r3, #7
 8010c74:	e10d      	b.n	8010e92 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	68da      	ldr	r2, [r3, #12]
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	699b      	ldr	r3, [r3, #24]
 8010c7e:	1ad3      	subs	r3, r2, r3
 8010c80:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8010c82:	687a      	ldr	r2, [r7, #4]
 8010c84:	6a3b      	ldr	r3, [r7, #32]
 8010c86:	429a      	cmp	r2, r3
 8010c88:	f240 80fe 	bls.w	8010e88 <f_read+0x26c>
 8010c8c:	6a3b      	ldr	r3, [r7, #32]
 8010c8e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8010c90:	e0fa      	b.n	8010e88 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	699b      	ldr	r3, [r3, #24]
 8010c96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	f040 80c6 	bne.w	8010e2c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	699b      	ldr	r3, [r3, #24]
 8010ca4:	0b1b      	lsrs	r3, r3, #12
 8010ca6:	697a      	ldr	r2, [r7, #20]
 8010ca8:	8952      	ldrh	r2, [r2, #10]
 8010caa:	3a01      	subs	r2, #1
 8010cac:	4013      	ands	r3, r2
 8010cae:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8010cb0:	69fb      	ldr	r3, [r7, #28]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d12f      	bne.n	8010d16 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	699b      	ldr	r3, [r3, #24]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d103      	bne.n	8010cc6 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	689b      	ldr	r3, [r3, #8]
 8010cc2:	633b      	str	r3, [r7, #48]	; 0x30
 8010cc4:	e013      	b.n	8010cee <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d007      	beq.n	8010cde <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	699b      	ldr	r3, [r3, #24]
 8010cd2:	4619      	mov	r1, r3
 8010cd4:	68f8      	ldr	r0, [r7, #12]
 8010cd6:	f7fe fe20 	bl	800f91a <clmt_clust>
 8010cda:	6338      	str	r0, [r7, #48]	; 0x30
 8010cdc:	e007      	b.n	8010cee <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8010cde:	68fa      	ldr	r2, [r7, #12]
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	69db      	ldr	r3, [r3, #28]
 8010ce4:	4619      	mov	r1, r3
 8010ce6:	4610      	mov	r0, r2
 8010ce8:	f7fe fb81 	bl	800f3ee <get_fat>
 8010cec:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8010cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cf0:	2b01      	cmp	r3, #1
 8010cf2:	d804      	bhi.n	8010cfe <f_read+0xe2>
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	2202      	movs	r2, #2
 8010cf8:	755a      	strb	r2, [r3, #21]
 8010cfa:	2302      	movs	r3, #2
 8010cfc:	e0c9      	b.n	8010e92 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010d04:	d104      	bne.n	8010d10 <f_read+0xf4>
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	2201      	movs	r2, #1
 8010d0a:	755a      	strb	r2, [r3, #21]
 8010d0c:	2301      	movs	r3, #1
 8010d0e:	e0c0      	b.n	8010e92 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d14:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010d16:	697a      	ldr	r2, [r7, #20]
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	69db      	ldr	r3, [r3, #28]
 8010d1c:	4619      	mov	r1, r3
 8010d1e:	4610      	mov	r0, r2
 8010d20:	f7fe fb46 	bl	800f3b0 <clust2sect>
 8010d24:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010d26:	69bb      	ldr	r3, [r7, #24]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d104      	bne.n	8010d36 <f_read+0x11a>
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	2202      	movs	r2, #2
 8010d30:	755a      	strb	r2, [r3, #21]
 8010d32:	2302      	movs	r3, #2
 8010d34:	e0ad      	b.n	8010e92 <f_read+0x276>
			sect += csect;
 8010d36:	69ba      	ldr	r2, [r7, #24]
 8010d38:	69fb      	ldr	r3, [r7, #28]
 8010d3a:	4413      	add	r3, r2
 8010d3c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	0b1b      	lsrs	r3, r3, #12
 8010d42:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8010d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d039      	beq.n	8010dbe <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010d4a:	69fa      	ldr	r2, [r7, #28]
 8010d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d4e:	4413      	add	r3, r2
 8010d50:	697a      	ldr	r2, [r7, #20]
 8010d52:	8952      	ldrh	r2, [r2, #10]
 8010d54:	4293      	cmp	r3, r2
 8010d56:	d905      	bls.n	8010d64 <f_read+0x148>
					cc = fs->csize - csect;
 8010d58:	697b      	ldr	r3, [r7, #20]
 8010d5a:	895b      	ldrh	r3, [r3, #10]
 8010d5c:	461a      	mov	r2, r3
 8010d5e:	69fb      	ldr	r3, [r7, #28]
 8010d60:	1ad3      	subs	r3, r2, r3
 8010d62:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010d64:	697b      	ldr	r3, [r7, #20]
 8010d66:	7858      	ldrb	r0, [r3, #1]
 8010d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d6a:	69ba      	ldr	r2, [r7, #24]
 8010d6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010d6e:	f7fd ff75 	bl	800ec5c <disk_read>
 8010d72:	4603      	mov	r3, r0
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d004      	beq.n	8010d82 <f_read+0x166>
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	2201      	movs	r2, #1
 8010d7c:	755a      	strb	r2, [r3, #21]
 8010d7e:	2301      	movs	r3, #1
 8010d80:	e087      	b.n	8010e92 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	7d1b      	ldrb	r3, [r3, #20]
 8010d86:	b25b      	sxtb	r3, r3
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	da14      	bge.n	8010db6 <f_read+0x19a>
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	6a1a      	ldr	r2, [r3, #32]
 8010d90:	69bb      	ldr	r3, [r7, #24]
 8010d92:	1ad3      	subs	r3, r2, r3
 8010d94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d96:	429a      	cmp	r2, r3
 8010d98:	d90d      	bls.n	8010db6 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	6a1a      	ldr	r2, [r3, #32]
 8010d9e:	69bb      	ldr	r3, [r7, #24]
 8010da0:	1ad3      	subs	r3, r2, r3
 8010da2:	031b      	lsls	r3, r3, #12
 8010da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010da6:	18d0      	adds	r0, r2, r3
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	3330      	adds	r3, #48	; 0x30
 8010dac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010db0:	4619      	mov	r1, r3
 8010db2:	f7fe f833 	bl	800ee1c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8010db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010db8:	031b      	lsls	r3, r3, #12
 8010dba:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8010dbc:	e050      	b.n	8010e60 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	6a1b      	ldr	r3, [r3, #32]
 8010dc2:	69ba      	ldr	r2, [r7, #24]
 8010dc4:	429a      	cmp	r2, r3
 8010dc6:	d02e      	beq.n	8010e26 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	7d1b      	ldrb	r3, [r3, #20]
 8010dcc:	b25b      	sxtb	r3, r3
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	da18      	bge.n	8010e04 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010dd2:	697b      	ldr	r3, [r7, #20]
 8010dd4:	7858      	ldrb	r0, [r3, #1]
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	6a1a      	ldr	r2, [r3, #32]
 8010de0:	2301      	movs	r3, #1
 8010de2:	f7fd ff5b 	bl	800ec9c <disk_write>
 8010de6:	4603      	mov	r3, r0
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d004      	beq.n	8010df6 <f_read+0x1da>
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	2201      	movs	r2, #1
 8010df0:	755a      	strb	r2, [r3, #21]
 8010df2:	2301      	movs	r3, #1
 8010df4:	e04d      	b.n	8010e92 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	7d1b      	ldrb	r3, [r3, #20]
 8010dfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010dfe:	b2da      	uxtb	r2, r3
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010e04:	697b      	ldr	r3, [r7, #20]
 8010e06:	7858      	ldrb	r0, [r3, #1]
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010e0e:	2301      	movs	r3, #1
 8010e10:	69ba      	ldr	r2, [r7, #24]
 8010e12:	f7fd ff23 	bl	800ec5c <disk_read>
 8010e16:	4603      	mov	r3, r0
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d004      	beq.n	8010e26 <f_read+0x20a>
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	2201      	movs	r2, #1
 8010e20:	755a      	strb	r2, [r3, #21]
 8010e22:	2301      	movs	r3, #1
 8010e24:	e035      	b.n	8010e92 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	69ba      	ldr	r2, [r7, #24]
 8010e2a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	699b      	ldr	r3, [r3, #24]
 8010e30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010e34:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8010e38:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8010e3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	429a      	cmp	r2, r3
 8010e40:	d901      	bls.n	8010e46 <f_read+0x22a>
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	699b      	ldr	r3, [r3, #24]
 8010e50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010e54:	4413      	add	r3, r2
 8010e56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010e58:	4619      	mov	r1, r3
 8010e5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010e5c:	f7fd ffde 	bl	800ee1c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8010e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e64:	4413      	add	r3, r2
 8010e66:	627b      	str	r3, [r7, #36]	; 0x24
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	699a      	ldr	r2, [r3, #24]
 8010e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e6e:	441a      	add	r2, r3
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	619a      	str	r2, [r3, #24]
 8010e74:	683b      	ldr	r3, [r7, #0]
 8010e76:	681a      	ldr	r2, [r3, #0]
 8010e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e7a:	441a      	add	r2, r3
 8010e7c:	683b      	ldr	r3, [r7, #0]
 8010e7e:	601a      	str	r2, [r3, #0]
 8010e80:	687a      	ldr	r2, [r7, #4]
 8010e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e84:	1ad3      	subs	r3, r2, r3
 8010e86:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	f47f af01 	bne.w	8010c92 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8010e90:	2300      	movs	r3, #0
}
 8010e92:	4618      	mov	r0, r3
 8010e94:	3738      	adds	r7, #56	; 0x38
 8010e96:	46bd      	mov	sp, r7
 8010e98:	bd80      	pop	{r7, pc}

08010e9a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010e9a:	b580      	push	{r7, lr}
 8010e9c:	b08c      	sub	sp, #48	; 0x30
 8010e9e:	af00      	add	r7, sp, #0
 8010ea0:	60f8      	str	r0, [r7, #12]
 8010ea2:	60b9      	str	r1, [r7, #8]
 8010ea4:	607a      	str	r2, [r7, #4]
 8010ea6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010ea8:	68bb      	ldr	r3, [r7, #8]
 8010eaa:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010eac:	683b      	ldr	r3, [r7, #0]
 8010eae:	2200      	movs	r2, #0
 8010eb0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	f107 0210 	add.w	r2, r7, #16
 8010eb8:	4611      	mov	r1, r2
 8010eba:	4618      	mov	r0, r3
 8010ebc:	f7ff fc74 	bl	80107a8 <validate>
 8010ec0:	4603      	mov	r3, r0
 8010ec2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010ec6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d107      	bne.n	8010ede <f_write+0x44>
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	7d5b      	ldrb	r3, [r3, #21]
 8010ed2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010ed6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d002      	beq.n	8010ee4 <f_write+0x4a>
 8010ede:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010ee2:	e14b      	b.n	801117c <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	7d1b      	ldrb	r3, [r3, #20]
 8010ee8:	f003 0302 	and.w	r3, r3, #2
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d101      	bne.n	8010ef4 <f_write+0x5a>
 8010ef0:	2307      	movs	r3, #7
 8010ef2:	e143      	b.n	801117c <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	699a      	ldr	r2, [r3, #24]
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	441a      	add	r2, r3
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	699b      	ldr	r3, [r3, #24]
 8010f00:	429a      	cmp	r2, r3
 8010f02:	f080 812d 	bcs.w	8011160 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	699b      	ldr	r3, [r3, #24]
 8010f0a:	43db      	mvns	r3, r3
 8010f0c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010f0e:	e127      	b.n	8011160 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	699b      	ldr	r3, [r3, #24]
 8010f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	f040 80e3 	bne.w	80110e4 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	699b      	ldr	r3, [r3, #24]
 8010f22:	0b1b      	lsrs	r3, r3, #12
 8010f24:	693a      	ldr	r2, [r7, #16]
 8010f26:	8952      	ldrh	r2, [r2, #10]
 8010f28:	3a01      	subs	r2, #1
 8010f2a:	4013      	ands	r3, r2
 8010f2c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010f2e:	69bb      	ldr	r3, [r7, #24]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d143      	bne.n	8010fbc <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	699b      	ldr	r3, [r3, #24]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d10c      	bne.n	8010f56 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	689b      	ldr	r3, [r3, #8]
 8010f40:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d11a      	bne.n	8010f7e <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	2100      	movs	r1, #0
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	f7fe fc4c 	bl	800f7ea <create_chain>
 8010f52:	62b8      	str	r0, [r7, #40]	; 0x28
 8010f54:	e013      	b.n	8010f7e <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d007      	beq.n	8010f6e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	699b      	ldr	r3, [r3, #24]
 8010f62:	4619      	mov	r1, r3
 8010f64:	68f8      	ldr	r0, [r7, #12]
 8010f66:	f7fe fcd8 	bl	800f91a <clmt_clust>
 8010f6a:	62b8      	str	r0, [r7, #40]	; 0x28
 8010f6c:	e007      	b.n	8010f7e <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010f6e:	68fa      	ldr	r2, [r7, #12]
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	69db      	ldr	r3, [r3, #28]
 8010f74:	4619      	mov	r1, r3
 8010f76:	4610      	mov	r0, r2
 8010f78:	f7fe fc37 	bl	800f7ea <create_chain>
 8010f7c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	f000 80f2 	beq.w	801116a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f88:	2b01      	cmp	r3, #1
 8010f8a:	d104      	bne.n	8010f96 <f_write+0xfc>
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	2202      	movs	r2, #2
 8010f90:	755a      	strb	r2, [r3, #21]
 8010f92:	2302      	movs	r3, #2
 8010f94:	e0f2      	b.n	801117c <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010f9c:	d104      	bne.n	8010fa8 <f_write+0x10e>
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	2201      	movs	r2, #1
 8010fa2:	755a      	strb	r2, [r3, #21]
 8010fa4:	2301      	movs	r3, #1
 8010fa6:	e0e9      	b.n	801117c <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010fac:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	689b      	ldr	r3, [r3, #8]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d102      	bne.n	8010fbc <f_write+0x122>
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010fba:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	7d1b      	ldrb	r3, [r3, #20]
 8010fc0:	b25b      	sxtb	r3, r3
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	da18      	bge.n	8010ff8 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010fc6:	693b      	ldr	r3, [r7, #16]
 8010fc8:	7858      	ldrb	r0, [r3, #1]
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	6a1a      	ldr	r2, [r3, #32]
 8010fd4:	2301      	movs	r3, #1
 8010fd6:	f7fd fe61 	bl	800ec9c <disk_write>
 8010fda:	4603      	mov	r3, r0
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d004      	beq.n	8010fea <f_write+0x150>
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	2201      	movs	r2, #1
 8010fe4:	755a      	strb	r2, [r3, #21]
 8010fe6:	2301      	movs	r3, #1
 8010fe8:	e0c8      	b.n	801117c <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	7d1b      	ldrb	r3, [r3, #20]
 8010fee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ff2:	b2da      	uxtb	r2, r3
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010ff8:	693a      	ldr	r2, [r7, #16]
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	69db      	ldr	r3, [r3, #28]
 8010ffe:	4619      	mov	r1, r3
 8011000:	4610      	mov	r0, r2
 8011002:	f7fe f9d5 	bl	800f3b0 <clust2sect>
 8011006:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011008:	697b      	ldr	r3, [r7, #20]
 801100a:	2b00      	cmp	r3, #0
 801100c:	d104      	bne.n	8011018 <f_write+0x17e>
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	2202      	movs	r2, #2
 8011012:	755a      	strb	r2, [r3, #21]
 8011014:	2302      	movs	r3, #2
 8011016:	e0b1      	b.n	801117c <f_write+0x2e2>
			sect += csect;
 8011018:	697a      	ldr	r2, [r7, #20]
 801101a:	69bb      	ldr	r3, [r7, #24]
 801101c:	4413      	add	r3, r2
 801101e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	0b1b      	lsrs	r3, r3, #12
 8011024:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011026:	6a3b      	ldr	r3, [r7, #32]
 8011028:	2b00      	cmp	r3, #0
 801102a:	d03c      	beq.n	80110a6 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801102c:	69ba      	ldr	r2, [r7, #24]
 801102e:	6a3b      	ldr	r3, [r7, #32]
 8011030:	4413      	add	r3, r2
 8011032:	693a      	ldr	r2, [r7, #16]
 8011034:	8952      	ldrh	r2, [r2, #10]
 8011036:	4293      	cmp	r3, r2
 8011038:	d905      	bls.n	8011046 <f_write+0x1ac>
					cc = fs->csize - csect;
 801103a:	693b      	ldr	r3, [r7, #16]
 801103c:	895b      	ldrh	r3, [r3, #10]
 801103e:	461a      	mov	r2, r3
 8011040:	69bb      	ldr	r3, [r7, #24]
 8011042:	1ad3      	subs	r3, r2, r3
 8011044:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011046:	693b      	ldr	r3, [r7, #16]
 8011048:	7858      	ldrb	r0, [r3, #1]
 801104a:	6a3b      	ldr	r3, [r7, #32]
 801104c:	697a      	ldr	r2, [r7, #20]
 801104e:	69f9      	ldr	r1, [r7, #28]
 8011050:	f7fd fe24 	bl	800ec9c <disk_write>
 8011054:	4603      	mov	r3, r0
 8011056:	2b00      	cmp	r3, #0
 8011058:	d004      	beq.n	8011064 <f_write+0x1ca>
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	2201      	movs	r2, #1
 801105e:	755a      	strb	r2, [r3, #21]
 8011060:	2301      	movs	r3, #1
 8011062:	e08b      	b.n	801117c <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	6a1a      	ldr	r2, [r3, #32]
 8011068:	697b      	ldr	r3, [r7, #20]
 801106a:	1ad3      	subs	r3, r2, r3
 801106c:	6a3a      	ldr	r2, [r7, #32]
 801106e:	429a      	cmp	r2, r3
 8011070:	d915      	bls.n	801109e <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	6a1a      	ldr	r2, [r3, #32]
 801107c:	697b      	ldr	r3, [r7, #20]
 801107e:	1ad3      	subs	r3, r2, r3
 8011080:	031b      	lsls	r3, r3, #12
 8011082:	69fa      	ldr	r2, [r7, #28]
 8011084:	4413      	add	r3, r2
 8011086:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801108a:	4619      	mov	r1, r3
 801108c:	f7fd fec6 	bl	800ee1c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	7d1b      	ldrb	r3, [r3, #20]
 8011094:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011098:	b2da      	uxtb	r2, r3
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801109e:	6a3b      	ldr	r3, [r7, #32]
 80110a0:	031b      	lsls	r3, r3, #12
 80110a2:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80110a4:	e03f      	b.n	8011126 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	6a1b      	ldr	r3, [r3, #32]
 80110aa:	697a      	ldr	r2, [r7, #20]
 80110ac:	429a      	cmp	r2, r3
 80110ae:	d016      	beq.n	80110de <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	699a      	ldr	r2, [r3, #24]
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80110b8:	429a      	cmp	r2, r3
 80110ba:	d210      	bcs.n	80110de <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80110bc:	693b      	ldr	r3, [r7, #16]
 80110be:	7858      	ldrb	r0, [r3, #1]
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80110c6:	2301      	movs	r3, #1
 80110c8:	697a      	ldr	r2, [r7, #20]
 80110ca:	f7fd fdc7 	bl	800ec5c <disk_read>
 80110ce:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d004      	beq.n	80110de <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	2201      	movs	r2, #1
 80110d8:	755a      	strb	r2, [r3, #21]
 80110da:	2301      	movs	r3, #1
 80110dc:	e04e      	b.n	801117c <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	697a      	ldr	r2, [r7, #20]
 80110e2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	699b      	ldr	r3, [r3, #24]
 80110e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80110ec:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80110f0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80110f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	429a      	cmp	r2, r3
 80110f8:	d901      	bls.n	80110fe <f_write+0x264>
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	699b      	ldr	r3, [r3, #24]
 8011108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801110c:	4413      	add	r3, r2
 801110e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011110:	69f9      	ldr	r1, [r7, #28]
 8011112:	4618      	mov	r0, r3
 8011114:	f7fd fe82 	bl	800ee1c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	7d1b      	ldrb	r3, [r3, #20]
 801111c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011120:	b2da      	uxtb	r2, r3
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8011126:	69fa      	ldr	r2, [r7, #28]
 8011128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801112a:	4413      	add	r3, r2
 801112c:	61fb      	str	r3, [r7, #28]
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	699a      	ldr	r2, [r3, #24]
 8011132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011134:	441a      	add	r2, r3
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	619a      	str	r2, [r3, #24]
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	68da      	ldr	r2, [r3, #12]
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	699b      	ldr	r3, [r3, #24]
 8011142:	429a      	cmp	r2, r3
 8011144:	bf38      	it	cc
 8011146:	461a      	movcc	r2, r3
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	60da      	str	r2, [r3, #12]
 801114c:	683b      	ldr	r3, [r7, #0]
 801114e:	681a      	ldr	r2, [r3, #0]
 8011150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011152:	441a      	add	r2, r3
 8011154:	683b      	ldr	r3, [r7, #0]
 8011156:	601a      	str	r2, [r3, #0]
 8011158:	687a      	ldr	r2, [r7, #4]
 801115a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801115c:	1ad3      	subs	r3, r2, r3
 801115e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	2b00      	cmp	r3, #0
 8011164:	f47f aed4 	bne.w	8010f10 <f_write+0x76>
 8011168:	e000      	b.n	801116c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801116a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	7d1b      	ldrb	r3, [r3, #20]
 8011170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011174:	b2da      	uxtb	r2, r3
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801117a:	2300      	movs	r3, #0
}
 801117c:	4618      	mov	r0, r3
 801117e:	3730      	adds	r7, #48	; 0x30
 8011180:	46bd      	mov	sp, r7
 8011182:	bd80      	pop	{r7, pc}

08011184 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011184:	b580      	push	{r7, lr}
 8011186:	b086      	sub	sp, #24
 8011188:	af00      	add	r7, sp, #0
 801118a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	f107 0208 	add.w	r2, r7, #8
 8011192:	4611      	mov	r1, r2
 8011194:	4618      	mov	r0, r3
 8011196:	f7ff fb07 	bl	80107a8 <validate>
 801119a:	4603      	mov	r3, r0
 801119c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801119e:	7dfb      	ldrb	r3, [r7, #23]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d168      	bne.n	8011276 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	7d1b      	ldrb	r3, [r3, #20]
 80111a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d062      	beq.n	8011276 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	7d1b      	ldrb	r3, [r3, #20]
 80111b4:	b25b      	sxtb	r3, r3
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	da15      	bge.n	80111e6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80111ba:	68bb      	ldr	r3, [r7, #8]
 80111bc:	7858      	ldrb	r0, [r3, #1]
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	6a1a      	ldr	r2, [r3, #32]
 80111c8:	2301      	movs	r3, #1
 80111ca:	f7fd fd67 	bl	800ec9c <disk_write>
 80111ce:	4603      	mov	r3, r0
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d001      	beq.n	80111d8 <f_sync+0x54>
 80111d4:	2301      	movs	r3, #1
 80111d6:	e04f      	b.n	8011278 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	7d1b      	ldrb	r3, [r3, #20]
 80111dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80111e0:	b2da      	uxtb	r2, r3
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80111e6:	f7fd fc2b 	bl	800ea40 <get_fattime>
 80111ea:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80111ec:	68ba      	ldr	r2, [r7, #8]
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111f2:	4619      	mov	r1, r3
 80111f4:	4610      	mov	r0, r2
 80111f6:	f7fe f83f 	bl	800f278 <move_window>
 80111fa:	4603      	mov	r3, r0
 80111fc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80111fe:	7dfb      	ldrb	r3, [r7, #23]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d138      	bne.n	8011276 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011208:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	330b      	adds	r3, #11
 801120e:	781a      	ldrb	r2, [r3, #0]
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	330b      	adds	r3, #11
 8011214:	f042 0220 	orr.w	r2, r2, #32
 8011218:	b2d2      	uxtb	r2, r2
 801121a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	6818      	ldr	r0, [r3, #0]
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	689b      	ldr	r3, [r3, #8]
 8011224:	461a      	mov	r2, r3
 8011226:	68f9      	ldr	r1, [r7, #12]
 8011228:	f7fe fd51 	bl	800fcce <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	f103 021c 	add.w	r2, r3, #28
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	68db      	ldr	r3, [r3, #12]
 8011236:	4619      	mov	r1, r3
 8011238:	4610      	mov	r0, r2
 801123a:	f7fd fdc3 	bl	800edc4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	3316      	adds	r3, #22
 8011242:	6939      	ldr	r1, [r7, #16]
 8011244:	4618      	mov	r0, r3
 8011246:	f7fd fdbd 	bl	800edc4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	3312      	adds	r3, #18
 801124e:	2100      	movs	r1, #0
 8011250:	4618      	mov	r0, r3
 8011252:	f7fd fd9c 	bl	800ed8e <st_word>
					fs->wflag = 1;
 8011256:	68bb      	ldr	r3, [r7, #8]
 8011258:	2201      	movs	r2, #1
 801125a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801125c:	68bb      	ldr	r3, [r7, #8]
 801125e:	4618      	mov	r0, r3
 8011260:	f7fe f838 	bl	800f2d4 <sync_fs>
 8011264:	4603      	mov	r3, r0
 8011266:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	7d1b      	ldrb	r3, [r3, #20]
 801126c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011270:	b2da      	uxtb	r2, r3
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011276:	7dfb      	ldrb	r3, [r7, #23]
}
 8011278:	4618      	mov	r0, r3
 801127a:	3718      	adds	r7, #24
 801127c:	46bd      	mov	sp, r7
 801127e:	bd80      	pop	{r7, pc}

08011280 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011280:	b580      	push	{r7, lr}
 8011282:	b084      	sub	sp, #16
 8011284:	af00      	add	r7, sp, #0
 8011286:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011288:	6878      	ldr	r0, [r7, #4]
 801128a:	f7ff ff7b 	bl	8011184 <f_sync>
 801128e:	4603      	mov	r3, r0
 8011290:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011292:	7bfb      	ldrb	r3, [r7, #15]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d118      	bne.n	80112ca <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	f107 0208 	add.w	r2, r7, #8
 801129e:	4611      	mov	r1, r2
 80112a0:	4618      	mov	r0, r3
 80112a2:	f7ff fa81 	bl	80107a8 <validate>
 80112a6:	4603      	mov	r3, r0
 80112a8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80112aa:	7bfb      	ldrb	r3, [r7, #15]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d10c      	bne.n	80112ca <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	691b      	ldr	r3, [r3, #16]
 80112b4:	4618      	mov	r0, r3
 80112b6:	f7fd ff3b 	bl	800f130 <dec_lock>
 80112ba:	4603      	mov	r3, r0
 80112bc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80112be:	7bfb      	ldrb	r3, [r7, #15]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d102      	bne.n	80112ca <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	2200      	movs	r2, #0
 80112c8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80112ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80112cc:	4618      	mov	r0, r3
 80112ce:	3710      	adds	r7, #16
 80112d0:	46bd      	mov	sp, r7
 80112d2:	bd80      	pop	{r7, pc}

080112d4 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80112d4:	b580      	push	{r7, lr}
 80112d6:	b086      	sub	sp, #24
 80112d8:	af00      	add	r7, sp, #0
 80112da:	6078      	str	r0, [r7, #4]
 80112dc:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d101      	bne.n	80112e8 <f_opendir+0x14>
 80112e4:	2309      	movs	r3, #9
 80112e6:	e064      	b.n	80113b2 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 80112ec:	f107 010c 	add.w	r1, r7, #12
 80112f0:	463b      	mov	r3, r7
 80112f2:	2200      	movs	r2, #0
 80112f4:	4618      	mov	r0, r3
 80112f6:	f7ff f80b 	bl	8010310 <find_volume>
 80112fa:	4603      	mov	r3, r0
 80112fc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80112fe:	7dfb      	ldrb	r3, [r7, #23]
 8011300:	2b00      	cmp	r3, #0
 8011302:	d14f      	bne.n	80113a4 <f_opendir+0xd0>
		obj->fs = fs;
 8011304:	68fa      	ldr	r2, [r7, #12]
 8011306:	693b      	ldr	r3, [r7, #16]
 8011308:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801130a:	683b      	ldr	r3, [r7, #0]
 801130c:	4619      	mov	r1, r3
 801130e:	6878      	ldr	r0, [r7, #4]
 8011310:	f7fe fef2 	bl	80100f8 <follow_path>
 8011314:	4603      	mov	r3, r0
 8011316:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8011318:	7dfb      	ldrb	r3, [r7, #23]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d13d      	bne.n	801139a <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011324:	b25b      	sxtb	r3, r3
 8011326:	2b00      	cmp	r3, #0
 8011328:	db12      	blt.n	8011350 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 801132a:	693b      	ldr	r3, [r7, #16]
 801132c:	799b      	ldrb	r3, [r3, #6]
 801132e:	f003 0310 	and.w	r3, r3, #16
 8011332:	2b00      	cmp	r3, #0
 8011334:	d00a      	beq.n	801134c <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8011336:	68fa      	ldr	r2, [r7, #12]
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	6a1b      	ldr	r3, [r3, #32]
 801133c:	4619      	mov	r1, r3
 801133e:	4610      	mov	r0, r2
 8011340:	f7fe fca6 	bl	800fc90 <ld_clust>
 8011344:	4602      	mov	r2, r0
 8011346:	693b      	ldr	r3, [r7, #16]
 8011348:	609a      	str	r2, [r3, #8]
 801134a:	e001      	b.n	8011350 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 801134c:	2305      	movs	r3, #5
 801134e:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8011350:	7dfb      	ldrb	r3, [r7, #23]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d121      	bne.n	801139a <f_opendir+0xc6>
				obj->id = fs->id;
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	88da      	ldrh	r2, [r3, #6]
 801135a:	693b      	ldr	r3, [r7, #16]
 801135c:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801135e:	2100      	movs	r1, #0
 8011360:	6878      	ldr	r0, [r7, #4]
 8011362:	f7fe fb0e 	bl	800f982 <dir_sdi>
 8011366:	4603      	mov	r3, r0
 8011368:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 801136a:	7dfb      	ldrb	r3, [r7, #23]
 801136c:	2b00      	cmp	r3, #0
 801136e:	d114      	bne.n	801139a <f_opendir+0xc6>
					if (obj->sclust) {
 8011370:	693b      	ldr	r3, [r7, #16]
 8011372:	689b      	ldr	r3, [r3, #8]
 8011374:	2b00      	cmp	r3, #0
 8011376:	d00d      	beq.n	8011394 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8011378:	2100      	movs	r1, #0
 801137a:	6878      	ldr	r0, [r7, #4]
 801137c:	f7fd fe4a 	bl	800f014 <inc_lock>
 8011380:	4602      	mov	r2, r0
 8011382:	693b      	ldr	r3, [r7, #16]
 8011384:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8011386:	693b      	ldr	r3, [r7, #16]
 8011388:	691b      	ldr	r3, [r3, #16]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d105      	bne.n	801139a <f_opendir+0xc6>
 801138e:	2312      	movs	r3, #18
 8011390:	75fb      	strb	r3, [r7, #23]
 8011392:	e002      	b.n	801139a <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8011394:	693b      	ldr	r3, [r7, #16]
 8011396:	2200      	movs	r2, #0
 8011398:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801139a:	7dfb      	ldrb	r3, [r7, #23]
 801139c:	2b04      	cmp	r3, #4
 801139e:	d101      	bne.n	80113a4 <f_opendir+0xd0>
 80113a0:	2305      	movs	r3, #5
 80113a2:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80113a4:	7dfb      	ldrb	r3, [r7, #23]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d002      	beq.n	80113b0 <f_opendir+0xdc>
 80113aa:	693b      	ldr	r3, [r7, #16]
 80113ac:	2200      	movs	r2, #0
 80113ae:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80113b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80113b2:	4618      	mov	r0, r3
 80113b4:	3718      	adds	r7, #24
 80113b6:	46bd      	mov	sp, r7
 80113b8:	bd80      	pop	{r7, pc}

080113ba <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80113ba:	b580      	push	{r7, lr}
 80113bc:	b084      	sub	sp, #16
 80113be:	af00      	add	r7, sp, #0
 80113c0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	f107 0208 	add.w	r2, r7, #8
 80113c8:	4611      	mov	r1, r2
 80113ca:	4618      	mov	r0, r3
 80113cc:	f7ff f9ec 	bl	80107a8 <validate>
 80113d0:	4603      	mov	r3, r0
 80113d2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80113d4:	7bfb      	ldrb	r3, [r7, #15]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d110      	bne.n	80113fc <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	691b      	ldr	r3, [r3, #16]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d006      	beq.n	80113f0 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	691b      	ldr	r3, [r3, #16]
 80113e6:	4618      	mov	r0, r3
 80113e8:	f7fd fea2 	bl	800f130 <dec_lock>
 80113ec:	4603      	mov	r3, r0
 80113ee:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 80113f0:	7bfb      	ldrb	r3, [r7, #15]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d102      	bne.n	80113fc <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	2200      	movs	r2, #0
 80113fa:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 80113fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80113fe:	4618      	mov	r0, r3
 8011400:	3710      	adds	r7, #16
 8011402:	46bd      	mov	sp, r7
 8011404:	bd80      	pop	{r7, pc}

08011406 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8011406:	b580      	push	{r7, lr}
 8011408:	b084      	sub	sp, #16
 801140a:	af00      	add	r7, sp, #0
 801140c:	6078      	str	r0, [r7, #4]
 801140e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	f107 0208 	add.w	r2, r7, #8
 8011416:	4611      	mov	r1, r2
 8011418:	4618      	mov	r0, r3
 801141a:	f7ff f9c5 	bl	80107a8 <validate>
 801141e:	4603      	mov	r3, r0
 8011420:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011422:	7bfb      	ldrb	r3, [r7, #15]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d126      	bne.n	8011476 <f_readdir+0x70>
		if (!fno) {
 8011428:	683b      	ldr	r3, [r7, #0]
 801142a:	2b00      	cmp	r3, #0
 801142c:	d106      	bne.n	801143c <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801142e:	2100      	movs	r1, #0
 8011430:	6878      	ldr	r0, [r7, #4]
 8011432:	f7fe faa6 	bl	800f982 <dir_sdi>
 8011436:	4603      	mov	r3, r0
 8011438:	73fb      	strb	r3, [r7, #15]
 801143a:	e01c      	b.n	8011476 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 801143c:	2100      	movs	r1, #0
 801143e:	6878      	ldr	r0, [r7, #4]
 8011440:	f7fe fc65 	bl	800fd0e <dir_read>
 8011444:	4603      	mov	r3, r0
 8011446:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8011448:	7bfb      	ldrb	r3, [r7, #15]
 801144a:	2b04      	cmp	r3, #4
 801144c:	d101      	bne.n	8011452 <f_readdir+0x4c>
 801144e:	2300      	movs	r3, #0
 8011450:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8011452:	7bfb      	ldrb	r3, [r7, #15]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d10e      	bne.n	8011476 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8011458:	6839      	ldr	r1, [r7, #0]
 801145a:	6878      	ldr	r0, [r7, #4]
 801145c:	f7fe fd59 	bl	800ff12 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8011460:	2100      	movs	r1, #0
 8011462:	6878      	ldr	r0, [r7, #4]
 8011464:	f7fe fb08 	bl	800fa78 <dir_next>
 8011468:	4603      	mov	r3, r0
 801146a:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801146c:	7bfb      	ldrb	r3, [r7, #15]
 801146e:	2b04      	cmp	r3, #4
 8011470:	d101      	bne.n	8011476 <f_readdir+0x70>
 8011472:	2300      	movs	r3, #0
 8011474:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8011476:	7bfb      	ldrb	r3, [r7, #15]
}
 8011478:	4618      	mov	r0, r3
 801147a:	3710      	adds	r7, #16
 801147c:	46bd      	mov	sp, r7
 801147e:	bd80      	pop	{r7, pc}

08011480 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8011480:	b580      	push	{r7, lr}
 8011482:	b09e      	sub	sp, #120	; 0x78
 8011484:	af00      	add	r7, sp, #0
 8011486:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8011488:	2300      	movs	r3, #0
 801148a:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801148c:	f107 010c 	add.w	r1, r7, #12
 8011490:	1d3b      	adds	r3, r7, #4
 8011492:	2202      	movs	r2, #2
 8011494:	4618      	mov	r0, r3
 8011496:	f7fe ff3b 	bl	8010310 <find_volume>
 801149a:	4603      	mov	r3, r0
 801149c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 80114a4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	f040 808e 	bne.w	80115ca <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 80114ae:	687a      	ldr	r2, [r7, #4]
 80114b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80114b4:	4611      	mov	r1, r2
 80114b6:	4618      	mov	r0, r3
 80114b8:	f7fe fe1e 	bl	80100f8 <follow_path>
 80114bc:	4603      	mov	r3, r0
 80114be:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 80114c2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d108      	bne.n	80114dc <f_unlink+0x5c>
 80114ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80114ce:	2102      	movs	r1, #2
 80114d0:	4618      	mov	r0, r3
 80114d2:	f7fd fd21 	bl	800ef18 <chk_lock>
 80114d6:	4603      	mov	r3, r0
 80114d8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80114dc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d172      	bne.n	80115ca <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80114e4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80114e8:	b25b      	sxtb	r3, r3
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	da03      	bge.n	80114f6 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80114ee:	2306      	movs	r3, #6
 80114f0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80114f4:	e008      	b.n	8011508 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80114f6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80114fa:	f003 0301 	and.w	r3, r3, #1
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d002      	beq.n	8011508 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8011502:	2307      	movs	r3, #7
 8011504:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8011508:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801150c:	2b00      	cmp	r3, #0
 801150e:	d134      	bne.n	801157a <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011514:	4611      	mov	r1, r2
 8011516:	4618      	mov	r0, r3
 8011518:	f7fe fbba 	bl	800fc90 <ld_clust>
 801151c:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 801151e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8011522:	f003 0310 	and.w	r3, r3, #16
 8011526:	2b00      	cmp	r3, #0
 8011528:	d027      	beq.n	801157a <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 801152e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011530:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8011532:	f107 0310 	add.w	r3, r7, #16
 8011536:	2100      	movs	r1, #0
 8011538:	4618      	mov	r0, r3
 801153a:	f7fe fa22 	bl	800f982 <dir_sdi>
 801153e:	4603      	mov	r3, r0
 8011540:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8011544:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011548:	2b00      	cmp	r3, #0
 801154a:	d116      	bne.n	801157a <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 801154c:	f107 0310 	add.w	r3, r7, #16
 8011550:	2100      	movs	r1, #0
 8011552:	4618      	mov	r0, r3
 8011554:	f7fe fbdb 	bl	800fd0e <dir_read>
 8011558:	4603      	mov	r3, r0
 801155a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 801155e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011562:	2b00      	cmp	r3, #0
 8011564:	d102      	bne.n	801156c <f_unlink+0xec>
 8011566:	2307      	movs	r3, #7
 8011568:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 801156c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011570:	2b04      	cmp	r3, #4
 8011572:	d102      	bne.n	801157a <f_unlink+0xfa>
 8011574:	2300      	movs	r3, #0
 8011576:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 801157a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801157e:	2b00      	cmp	r3, #0
 8011580:	d123      	bne.n	80115ca <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8011582:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011586:	4618      	mov	r0, r3
 8011588:	f7fe fca5 	bl	800fed6 <dir_remove>
 801158c:	4603      	mov	r3, r0
 801158e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8011592:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011596:	2b00      	cmp	r3, #0
 8011598:	d10c      	bne.n	80115b4 <f_unlink+0x134>
 801159a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801159c:	2b00      	cmp	r3, #0
 801159e:	d009      	beq.n	80115b4 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 80115a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80115a4:	2200      	movs	r2, #0
 80115a6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80115a8:	4618      	mov	r0, r3
 80115aa:	f7fe f8b9 	bl	800f720 <remove_chain>
 80115ae:	4603      	mov	r3, r0
 80115b0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 80115b4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d106      	bne.n	80115ca <f_unlink+0x14a>
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	4618      	mov	r0, r3
 80115c0:	f7fd fe88 	bl	800f2d4 <sync_fs>
 80115c4:	4603      	mov	r3, r0
 80115c6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80115ca:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80115ce:	4618      	mov	r0, r3
 80115d0:	3778      	adds	r7, #120	; 0x78
 80115d2:	46bd      	mov	sp, r7
 80115d4:	bd80      	pop	{r7, pc}
	...

080115d8 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 80115d8:	b590      	push	{r4, r7, lr}
 80115da:	b09d      	sub	sp, #116	; 0x74
 80115dc:	af00      	add	r7, sp, #0
 80115de:	60f8      	str	r0, [r7, #12]
 80115e0:	607a      	str	r2, [r7, #4]
 80115e2:	603b      	str	r3, [r7, #0]
 80115e4:	460b      	mov	r3, r1
 80115e6:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 80115e8:	2301      	movs	r3, #1
 80115ea:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 80115ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80115f0:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 80115f2:	f107 030c 	add.w	r3, r7, #12
 80115f6:	4618      	mov	r0, r3
 80115f8:	f7fe fdef 	bl	80101da <get_ldnumber>
 80115fc:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80115fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011600:	2b00      	cmp	r3, #0
 8011602:	da02      	bge.n	801160a <f_mkfs+0x32>
 8011604:	230b      	movs	r3, #11
 8011606:	f000 bc0d 	b.w	8011e24 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 801160a:	4a94      	ldr	r2, [pc, #592]	; (801185c <f_mkfs+0x284>)
 801160c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801160e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011612:	2b00      	cmp	r3, #0
 8011614:	d005      	beq.n	8011622 <f_mkfs+0x4a>
 8011616:	4a91      	ldr	r2, [pc, #580]	; (801185c <f_mkfs+0x284>)
 8011618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801161a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801161e:	2200      	movs	r2, #0
 8011620:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8011622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011624:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8011628:	2300      	movs	r3, #0
 801162a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 801162e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8011632:	4618      	mov	r0, r3
 8011634:	f7fd faec 	bl	800ec10 <disk_initialize>
 8011638:	4603      	mov	r3, r0
 801163a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 801163e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8011642:	f003 0301 	and.w	r3, r3, #1
 8011646:	2b00      	cmp	r3, #0
 8011648:	d001      	beq.n	801164e <f_mkfs+0x76>
 801164a:	2303      	movs	r3, #3
 801164c:	e3ea      	b.n	8011e24 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 801164e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8011652:	f003 0304 	and.w	r3, r3, #4
 8011656:	2b00      	cmp	r3, #0
 8011658:	d001      	beq.n	801165e <f_mkfs+0x86>
 801165a:	230a      	movs	r3, #10
 801165c:	e3e2      	b.n	8011e24 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 801165e:	f107 0214 	add.w	r2, r7, #20
 8011662:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8011666:	2103      	movs	r1, #3
 8011668:	4618      	mov	r0, r3
 801166a:	f7fd fb37 	bl	800ecdc <disk_ioctl>
 801166e:	4603      	mov	r3, r0
 8011670:	2b00      	cmp	r3, #0
 8011672:	d10c      	bne.n	801168e <f_mkfs+0xb6>
 8011674:	697b      	ldr	r3, [r7, #20]
 8011676:	2b00      	cmp	r3, #0
 8011678:	d009      	beq.n	801168e <f_mkfs+0xb6>
 801167a:	697b      	ldr	r3, [r7, #20]
 801167c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011680:	d805      	bhi.n	801168e <f_mkfs+0xb6>
 8011682:	697b      	ldr	r3, [r7, #20]
 8011684:	1e5a      	subs	r2, r3, #1
 8011686:	697b      	ldr	r3, [r7, #20]
 8011688:	4013      	ands	r3, r2
 801168a:	2b00      	cmp	r3, #0
 801168c:	d001      	beq.n	8011692 <f_mkfs+0xba>
 801168e:	2301      	movs	r3, #1
 8011690:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8011692:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011696:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	2b00      	cmp	r3, #0
 801169c:	d003      	beq.n	80116a6 <f_mkfs+0xce>
 801169e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80116a0:	687a      	ldr	r2, [r7, #4]
 80116a2:	429a      	cmp	r2, r3
 80116a4:	d309      	bcc.n	80116ba <f_mkfs+0xe2>
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80116ac:	d805      	bhi.n	80116ba <f_mkfs+0xe2>
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	1e5a      	subs	r2, r3, #1
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	4013      	ands	r3, r2
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d001      	beq.n	80116be <f_mkfs+0xe6>
 80116ba:	2313      	movs	r3, #19
 80116bc:	e3b2      	b.n	8011e24 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 80116be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80116c0:	687a      	ldr	r2, [r7, #4]
 80116c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80116c6:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 80116c8:	683b      	ldr	r3, [r7, #0]
 80116ca:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 80116cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80116ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80116d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80116d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 80116d8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80116da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116dc:	fb02 f303 	mul.w	r3, r2, r3
 80116e0:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 80116e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d101      	bne.n	80116ec <f_mkfs+0x114>
 80116e8:	230e      	movs	r3, #14
 80116ea:	e39b      	b.n	8011e24 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 80116ec:	f107 0210 	add.w	r2, r7, #16
 80116f0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80116f4:	2101      	movs	r1, #1
 80116f6:	4618      	mov	r0, r3
 80116f8:	f7fd faf0 	bl	800ecdc <disk_ioctl>
 80116fc:	4603      	mov	r3, r0
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d001      	beq.n	8011706 <f_mkfs+0x12e>
 8011702:	2301      	movs	r3, #1
 8011704:	e38e      	b.n	8011e24 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8011706:	7afb      	ldrb	r3, [r7, #11]
 8011708:	f003 0308 	and.w	r3, r3, #8
 801170c:	2b00      	cmp	r3, #0
 801170e:	d001      	beq.n	8011714 <f_mkfs+0x13c>
 8011710:	2300      	movs	r3, #0
 8011712:	e000      	b.n	8011716 <f_mkfs+0x13e>
 8011714:	233f      	movs	r3, #63	; 0x3f
 8011716:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8011718:	693b      	ldr	r3, [r7, #16]
 801171a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801171c:	429a      	cmp	r2, r3
 801171e:	d901      	bls.n	8011724 <f_mkfs+0x14c>
 8011720:	230e      	movs	r3, #14
 8011722:	e37f      	b.n	8011e24 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8011724:	693a      	ldr	r2, [r7, #16]
 8011726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011728:	1ad3      	subs	r3, r2, r3
 801172a:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 801172c:	693b      	ldr	r3, [r7, #16]
 801172e:	2b7f      	cmp	r3, #127	; 0x7f
 8011730:	d801      	bhi.n	8011736 <f_mkfs+0x15e>
 8011732:	230e      	movs	r3, #14
 8011734:	e376      	b.n	8011e24 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	2b80      	cmp	r3, #128	; 0x80
 801173a:	d901      	bls.n	8011740 <f_mkfs+0x168>
 801173c:	2313      	movs	r3, #19
 801173e:	e371      	b.n	8011e24 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8011740:	7afb      	ldrb	r3, [r7, #11]
 8011742:	f003 0302 	and.w	r3, r3, #2
 8011746:	2b00      	cmp	r3, #0
 8011748:	d00d      	beq.n	8011766 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 801174a:	7afb      	ldrb	r3, [r7, #11]
 801174c:	f003 0307 	and.w	r3, r3, #7
 8011750:	2b02      	cmp	r3, #2
 8011752:	d004      	beq.n	801175e <f_mkfs+0x186>
 8011754:	7afb      	ldrb	r3, [r7, #11]
 8011756:	f003 0301 	and.w	r3, r3, #1
 801175a:	2b00      	cmp	r3, #0
 801175c:	d103      	bne.n	8011766 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 801175e:	2303      	movs	r3, #3
 8011760:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8011764:	e009      	b.n	801177a <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8011766:	7afb      	ldrb	r3, [r7, #11]
 8011768:	f003 0301 	and.w	r3, r3, #1
 801176c:	2b00      	cmp	r3, #0
 801176e:	d101      	bne.n	8011774 <f_mkfs+0x19c>
 8011770:	2313      	movs	r3, #19
 8011772:	e357      	b.n	8011e24 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8011774:	2302      	movs	r3, #2
 8011776:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 801177e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011782:	2b03      	cmp	r3, #3
 8011784:	d13c      	bne.n	8011800 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 8011786:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011788:	2b00      	cmp	r3, #0
 801178a:	d11b      	bne.n	80117c4 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 801178c:	693b      	ldr	r3, [r7, #16]
 801178e:	0c5b      	lsrs	r3, r3, #17
 8011790:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8011792:	2300      	movs	r3, #0
 8011794:	64bb      	str	r3, [r7, #72]	; 0x48
 8011796:	2301      	movs	r3, #1
 8011798:	653b      	str	r3, [r7, #80]	; 0x50
 801179a:	e005      	b.n	80117a8 <f_mkfs+0x1d0>
 801179c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801179e:	3301      	adds	r3, #1
 80117a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80117a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117a4:	005b      	lsls	r3, r3, #1
 80117a6:	653b      	str	r3, [r7, #80]	; 0x50
 80117a8:	4a2d      	ldr	r2, [pc, #180]	; (8011860 <f_mkfs+0x288>)
 80117aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80117ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d007      	beq.n	80117c4 <f_mkfs+0x1ec>
 80117b4:	4a2a      	ldr	r2, [pc, #168]	; (8011860 <f_mkfs+0x288>)
 80117b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80117b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80117bc:	461a      	mov	r2, r3
 80117be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80117c0:	4293      	cmp	r3, r2
 80117c2:	d2eb      	bcs.n	801179c <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 80117c4:	693a      	ldr	r2, [r7, #16]
 80117c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80117cc:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 80117ce:	6a3b      	ldr	r3, [r7, #32]
 80117d0:	3302      	adds	r3, #2
 80117d2:	009a      	lsls	r2, r3, #2
 80117d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80117d6:	4413      	add	r3, r2
 80117d8:	1e5a      	subs	r2, r3, #1
 80117da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80117dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80117e0:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 80117e2:	2320      	movs	r3, #32
 80117e4:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 80117e6:	2300      	movs	r3, #0
 80117e8:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 80117ea:	6a3b      	ldr	r3, [r7, #32]
 80117ec:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80117f0:	4293      	cmp	r3, r2
 80117f2:	d903      	bls.n	80117fc <f_mkfs+0x224>
 80117f4:	6a3b      	ldr	r3, [r7, #32]
 80117f6:	4a1b      	ldr	r2, [pc, #108]	; (8011864 <f_mkfs+0x28c>)
 80117f8:	4293      	cmp	r3, r2
 80117fa:	d952      	bls.n	80118a2 <f_mkfs+0x2ca>
 80117fc:	230e      	movs	r3, #14
 80117fe:	e311      	b.n	8011e24 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8011800:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011802:	2b00      	cmp	r3, #0
 8011804:	d11b      	bne.n	801183e <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8011806:	693b      	ldr	r3, [r7, #16]
 8011808:	0b1b      	lsrs	r3, r3, #12
 801180a:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 801180c:	2300      	movs	r3, #0
 801180e:	64bb      	str	r3, [r7, #72]	; 0x48
 8011810:	2301      	movs	r3, #1
 8011812:	653b      	str	r3, [r7, #80]	; 0x50
 8011814:	e005      	b.n	8011822 <f_mkfs+0x24a>
 8011816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011818:	3301      	adds	r3, #1
 801181a:	64bb      	str	r3, [r7, #72]	; 0x48
 801181c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801181e:	005b      	lsls	r3, r3, #1
 8011820:	653b      	str	r3, [r7, #80]	; 0x50
 8011822:	4a11      	ldr	r2, [pc, #68]	; (8011868 <f_mkfs+0x290>)
 8011824:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011826:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801182a:	2b00      	cmp	r3, #0
 801182c:	d007      	beq.n	801183e <f_mkfs+0x266>
 801182e:	4a0e      	ldr	r2, [pc, #56]	; (8011868 <f_mkfs+0x290>)
 8011830:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011832:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011836:	461a      	mov	r2, r3
 8011838:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801183a:	4293      	cmp	r3, r2
 801183c:	d2eb      	bcs.n	8011816 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 801183e:	693a      	ldr	r2, [r7, #16]
 8011840:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011842:	fbb2 f3f3 	udiv	r3, r2, r3
 8011846:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 8011848:	6a3b      	ldr	r3, [r7, #32]
 801184a:	f640 72f5 	movw	r2, #4085	; 0xff5
 801184e:	4293      	cmp	r3, r2
 8011850:	d90c      	bls.n	801186c <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8011852:	6a3b      	ldr	r3, [r7, #32]
 8011854:	3302      	adds	r3, #2
 8011856:	005b      	lsls	r3, r3, #1
 8011858:	65fb      	str	r3, [r7, #92]	; 0x5c
 801185a:	e012      	b.n	8011882 <f_mkfs+0x2aa>
 801185c:	200041f8 	.word	0x200041f8
 8011860:	08018288 	.word	0x08018288
 8011864:	0ffffff5 	.word	0x0ffffff5
 8011868:	08018298 	.word	0x08018298
				} else {
					fmt = FS_FAT12;
 801186c:	2301      	movs	r3, #1
 801186e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8011872:	6a3a      	ldr	r2, [r7, #32]
 8011874:	4613      	mov	r3, r2
 8011876:	005b      	lsls	r3, r3, #1
 8011878:	4413      	add	r3, r2
 801187a:	3301      	adds	r3, #1
 801187c:	085b      	lsrs	r3, r3, #1
 801187e:	3303      	adds	r3, #3
 8011880:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8011882:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011884:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011886:	4413      	add	r3, r2
 8011888:	1e5a      	subs	r2, r3, #1
 801188a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801188c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011890:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 8011892:	2301      	movs	r3, #1
 8011894:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8011896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011898:	015a      	lsls	r2, r3, #5
 801189a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801189c:	fbb2 f3f3 	udiv	r3, r2, r3
 80118a0:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 80118a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80118a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80118a6:	4413      	add	r3, r2
 80118a8:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 80118aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80118ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80118ae:	fb03 f202 	mul.w	r2, r3, r2
 80118b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80118b4:	4413      	add	r3, r2
 80118b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80118b8:	4413      	add	r3, r2
 80118ba:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 80118bc:	697a      	ldr	r2, [r7, #20]
 80118be:	69fb      	ldr	r3, [r7, #28]
 80118c0:	4413      	add	r3, r2
 80118c2:	1e5a      	subs	r2, r3, #1
 80118c4:	697b      	ldr	r3, [r7, #20]
 80118c6:	425b      	negs	r3, r3
 80118c8:	401a      	ands	r2, r3
 80118ca:	69fb      	ldr	r3, [r7, #28]
 80118cc:	1ad3      	subs	r3, r2, r3
 80118ce:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 80118d0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80118d4:	2b03      	cmp	r3, #3
 80118d6:	d108      	bne.n	80118ea <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 80118d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80118da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80118dc:	4413      	add	r3, r2
 80118de:	657b      	str	r3, [r7, #84]	; 0x54
 80118e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80118e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80118e4:	4413      	add	r3, r2
 80118e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80118e8:	e006      	b.n	80118f8 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 80118ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80118ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80118f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80118f4:	4413      	add	r3, r2
 80118f6:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 80118f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118fa:	011a      	lsls	r2, r3, #4
 80118fc:	69fb      	ldr	r3, [r7, #28]
 80118fe:	441a      	add	r2, r3
 8011900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011902:	1ad2      	subs	r2, r2, r3
 8011904:	693b      	ldr	r3, [r7, #16]
 8011906:	429a      	cmp	r2, r3
 8011908:	d901      	bls.n	801190e <f_mkfs+0x336>
 801190a:	230e      	movs	r3, #14
 801190c:	e28a      	b.n	8011e24 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 801190e:	693a      	ldr	r2, [r7, #16]
 8011910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011912:	1ad2      	subs	r2, r2, r3
 8011914:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011916:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011918:	fb01 f303 	mul.w	r3, r1, r3
 801191c:	1ad2      	subs	r2, r2, r3
 801191e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011920:	1ad2      	subs	r2, r2, r3
 8011922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011924:	fbb2 f3f3 	udiv	r3, r2, r3
 8011928:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 801192a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801192e:	2b03      	cmp	r3, #3
 8011930:	d10f      	bne.n	8011952 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8011932:	6a3b      	ldr	r3, [r7, #32]
 8011934:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8011938:	4293      	cmp	r3, r2
 801193a:	d80a      	bhi.n	8011952 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	2b00      	cmp	r3, #0
 8011940:	d105      	bne.n	801194e <f_mkfs+0x376>
 8011942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011944:	085b      	lsrs	r3, r3, #1
 8011946:	607b      	str	r3, [r7, #4]
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d144      	bne.n	80119d8 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 801194e:	230e      	movs	r3, #14
 8011950:	e268      	b.n	8011e24 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 8011952:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011956:	2b02      	cmp	r3, #2
 8011958:	d133      	bne.n	80119c2 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 801195a:	6a3b      	ldr	r3, [r7, #32]
 801195c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8011960:	4293      	cmp	r3, r2
 8011962:	d91e      	bls.n	80119a2 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	2b00      	cmp	r3, #0
 8011968:	d107      	bne.n	801197a <f_mkfs+0x3a2>
 801196a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801196c:	005b      	lsls	r3, r3, #1
 801196e:	2b40      	cmp	r3, #64	; 0x40
 8011970:	d803      	bhi.n	801197a <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8011972:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011974:	005b      	lsls	r3, r3, #1
 8011976:	607b      	str	r3, [r7, #4]
 8011978:	e033      	b.n	80119e2 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 801197a:	7afb      	ldrb	r3, [r7, #11]
 801197c:	f003 0302 	and.w	r3, r3, #2
 8011980:	2b00      	cmp	r3, #0
 8011982:	d003      	beq.n	801198c <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8011984:	2303      	movs	r3, #3
 8011986:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801198a:	e02a      	b.n	80119e2 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d105      	bne.n	801199e <f_mkfs+0x3c6>
 8011992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011994:	005b      	lsls	r3, r3, #1
 8011996:	607b      	str	r3, [r7, #4]
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	2b80      	cmp	r3, #128	; 0x80
 801199c:	d91e      	bls.n	80119dc <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 801199e:	230e      	movs	r3, #14
 80119a0:	e240      	b.n	8011e24 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 80119a2:	6a3b      	ldr	r3, [r7, #32]
 80119a4:	f640 72f5 	movw	r2, #4085	; 0xff5
 80119a8:	4293      	cmp	r3, r2
 80119aa:	d80a      	bhi.n	80119c2 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d105      	bne.n	80119be <f_mkfs+0x3e6>
 80119b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119b4:	005b      	lsls	r3, r3, #1
 80119b6:	607b      	str	r3, [r7, #4]
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	2b80      	cmp	r3, #128	; 0x80
 80119bc:	d910      	bls.n	80119e0 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 80119be:	230e      	movs	r3, #14
 80119c0:	e230      	b.n	8011e24 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 80119c2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80119c6:	2b01      	cmp	r3, #1
 80119c8:	d10c      	bne.n	80119e4 <f_mkfs+0x40c>
 80119ca:	6a3b      	ldr	r3, [r7, #32]
 80119cc:	f640 72f5 	movw	r2, #4085	; 0xff5
 80119d0:	4293      	cmp	r3, r2
 80119d2:	d907      	bls.n	80119e4 <f_mkfs+0x40c>
 80119d4:	230e      	movs	r3, #14
 80119d6:	e225      	b.n	8011e24 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80119d8:	bf00      	nop
 80119da:	e6ce      	b.n	801177a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80119dc:	bf00      	nop
 80119de:	e6cc      	b.n	801177a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80119e0:	bf00      	nop
			pau = au;
 80119e2:	e6ca      	b.n	801177a <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 80119e4:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 80119e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80119e8:	461a      	mov	r2, r3
 80119ea:	2100      	movs	r1, #0
 80119ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80119ee:	f7fd fa36 	bl	800ee5e <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 80119f2:	220b      	movs	r2, #11
 80119f4:	49b2      	ldr	r1, [pc, #712]	; (8011cc0 <f_mkfs+0x6e8>)
 80119f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80119f8:	f7fd fa10 	bl	800ee1c <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 80119fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119fe:	330b      	adds	r3, #11
 8011a00:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011a02:	4611      	mov	r1, r2
 8011a04:	4618      	mov	r0, r3
 8011a06:	f7fd f9c2 	bl	800ed8e <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8011a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a0c:	330d      	adds	r3, #13
 8011a0e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011a10:	b2d2      	uxtb	r2, r2
 8011a12:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8011a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a16:	330e      	adds	r3, #14
 8011a18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011a1a:	b292      	uxth	r2, r2
 8011a1c:	4611      	mov	r1, r2
 8011a1e:	4618      	mov	r0, r3
 8011a20:	f7fd f9b5 	bl	800ed8e <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8011a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a26:	3310      	adds	r3, #16
 8011a28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011a2a:	b2d2      	uxtb	r2, r2
 8011a2c:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8011a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a30:	f103 0211 	add.w	r2, r3, #17
 8011a34:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011a38:	2b03      	cmp	r3, #3
 8011a3a:	d002      	beq.n	8011a42 <f_mkfs+0x46a>
 8011a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011a3e:	b29b      	uxth	r3, r3
 8011a40:	e000      	b.n	8011a44 <f_mkfs+0x46c>
 8011a42:	2300      	movs	r3, #0
 8011a44:	4619      	mov	r1, r3
 8011a46:	4610      	mov	r0, r2
 8011a48:	f7fd f9a1 	bl	800ed8e <st_word>
		if (sz_vol < 0x10000) {
 8011a4c:	693b      	ldr	r3, [r7, #16]
 8011a4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011a52:	d208      	bcs.n	8011a66 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8011a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a56:	3313      	adds	r3, #19
 8011a58:	693a      	ldr	r2, [r7, #16]
 8011a5a:	b292      	uxth	r2, r2
 8011a5c:	4611      	mov	r1, r2
 8011a5e:	4618      	mov	r0, r3
 8011a60:	f7fd f995 	bl	800ed8e <st_word>
 8011a64:	e006      	b.n	8011a74 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8011a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a68:	3320      	adds	r3, #32
 8011a6a:	693a      	ldr	r2, [r7, #16]
 8011a6c:	4611      	mov	r1, r2
 8011a6e:	4618      	mov	r0, r3
 8011a70:	f7fd f9a8 	bl	800edc4 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8011a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a76:	3315      	adds	r3, #21
 8011a78:	22f8      	movs	r2, #248	; 0xf8
 8011a7a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8011a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a7e:	3318      	adds	r3, #24
 8011a80:	213f      	movs	r1, #63	; 0x3f
 8011a82:	4618      	mov	r0, r3
 8011a84:	f7fd f983 	bl	800ed8e <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8011a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a8a:	331a      	adds	r3, #26
 8011a8c:	21ff      	movs	r1, #255	; 0xff
 8011a8e:	4618      	mov	r0, r3
 8011a90:	f7fd f97d 	bl	800ed8e <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8011a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a96:	331c      	adds	r3, #28
 8011a98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	f7fd f992 	bl	800edc4 <st_dword>
		if (fmt == FS_FAT32) {
 8011aa0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011aa4:	2b03      	cmp	r3, #3
 8011aa6:	d131      	bne.n	8011b0c <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8011aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011aaa:	f103 0443 	add.w	r4, r3, #67	; 0x43
 8011aae:	f7fc ffc7 	bl	800ea40 <get_fattime>
 8011ab2:	4603      	mov	r3, r0
 8011ab4:	4619      	mov	r1, r3
 8011ab6:	4620      	mov	r0, r4
 8011ab8:	f7fd f984 	bl	800edc4 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8011abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011abe:	3324      	adds	r3, #36	; 0x24
 8011ac0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8011ac2:	4618      	mov	r0, r3
 8011ac4:	f7fd f97e 	bl	800edc4 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8011ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011aca:	332c      	adds	r3, #44	; 0x2c
 8011acc:	2102      	movs	r1, #2
 8011ace:	4618      	mov	r0, r3
 8011ad0:	f7fd f978 	bl	800edc4 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8011ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ad6:	3330      	adds	r3, #48	; 0x30
 8011ad8:	2101      	movs	r1, #1
 8011ada:	4618      	mov	r0, r3
 8011adc:	f7fd f957 	bl	800ed8e <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8011ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ae2:	3332      	adds	r3, #50	; 0x32
 8011ae4:	2106      	movs	r1, #6
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	f7fd f951 	bl	800ed8e <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8011aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011aee:	3340      	adds	r3, #64	; 0x40
 8011af0:	2280      	movs	r2, #128	; 0x80
 8011af2:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8011af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011af6:	3342      	adds	r3, #66	; 0x42
 8011af8:	2229      	movs	r2, #41	; 0x29
 8011afa:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8011afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011afe:	3347      	adds	r3, #71	; 0x47
 8011b00:	2213      	movs	r2, #19
 8011b02:	4970      	ldr	r1, [pc, #448]	; (8011cc4 <f_mkfs+0x6ec>)
 8011b04:	4618      	mov	r0, r3
 8011b06:	f7fd f989 	bl	800ee1c <mem_cpy>
 8011b0a:	e020      	b.n	8011b4e <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8011b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b0e:	f103 0427 	add.w	r4, r3, #39	; 0x27
 8011b12:	f7fc ff95 	bl	800ea40 <get_fattime>
 8011b16:	4603      	mov	r3, r0
 8011b18:	4619      	mov	r1, r3
 8011b1a:	4620      	mov	r0, r4
 8011b1c:	f7fd f952 	bl	800edc4 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8011b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b22:	3316      	adds	r3, #22
 8011b24:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011b26:	b292      	uxth	r2, r2
 8011b28:	4611      	mov	r1, r2
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	f7fd f92f 	bl	800ed8e <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8011b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b32:	3324      	adds	r3, #36	; 0x24
 8011b34:	2280      	movs	r2, #128	; 0x80
 8011b36:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8011b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b3a:	3326      	adds	r3, #38	; 0x26
 8011b3c:	2229      	movs	r2, #41	; 0x29
 8011b3e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8011b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b42:	332b      	adds	r3, #43	; 0x2b
 8011b44:	2213      	movs	r2, #19
 8011b46:	4960      	ldr	r1, [pc, #384]	; (8011cc8 <f_mkfs+0x6f0>)
 8011b48:	4618      	mov	r0, r3
 8011b4a:	f7fd f967 	bl	800ee1c <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8011b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b50:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011b54:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011b58:	4618      	mov	r0, r3
 8011b5a:	f7fd f918 	bl	800ed8e <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8011b5e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8011b62:	2301      	movs	r3, #1
 8011b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011b68:	f7fd f898 	bl	800ec9c <disk_write>
 8011b6c:	4603      	mov	r3, r0
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d001      	beq.n	8011b76 <f_mkfs+0x59e>
 8011b72:	2301      	movs	r3, #1
 8011b74:	e156      	b.n	8011e24 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8011b76:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011b7a:	2b03      	cmp	r3, #3
 8011b7c:	d140      	bne.n	8011c00 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8011b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b80:	1d9a      	adds	r2, r3, #6
 8011b82:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8011b86:	2301      	movs	r3, #1
 8011b88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011b8a:	f7fd f887 	bl	800ec9c <disk_write>
			mem_set(buf, 0, ss);
 8011b8e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011b90:	461a      	mov	r2, r3
 8011b92:	2100      	movs	r1, #0
 8011b94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011b96:	f7fd f962 	bl	800ee5e <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8011b9a:	494c      	ldr	r1, [pc, #304]	; (8011ccc <f_mkfs+0x6f4>)
 8011b9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011b9e:	f7fd f911 	bl	800edc4 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8011ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ba4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011ba8:	4949      	ldr	r1, [pc, #292]	; (8011cd0 <f_mkfs+0x6f8>)
 8011baa:	4618      	mov	r0, r3
 8011bac:	f7fd f90a 	bl	800edc4 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8011bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bb2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011bb6:	6a3b      	ldr	r3, [r7, #32]
 8011bb8:	3b01      	subs	r3, #1
 8011bba:	4619      	mov	r1, r3
 8011bbc:	4610      	mov	r0, r2
 8011bbe:	f7fd f901 	bl	800edc4 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8011bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bc4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8011bc8:	2102      	movs	r1, #2
 8011bca:	4618      	mov	r0, r3
 8011bcc:	f7fd f8fa 	bl	800edc4 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8011bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bd2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011bd6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011bda:	4618      	mov	r0, r3
 8011bdc:	f7fd f8d7 	bl	800ed8e <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8011be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011be2:	1dda      	adds	r2, r3, #7
 8011be4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8011be8:	2301      	movs	r3, #1
 8011bea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011bec:	f7fd f856 	bl	800ec9c <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8011bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bf2:	1c5a      	adds	r2, r3, #1
 8011bf4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8011bf8:	2301      	movs	r3, #1
 8011bfa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011bfc:	f7fd f84e 	bl	800ec9c <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8011c00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011c02:	2100      	movs	r1, #0
 8011c04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c06:	f7fd f92a 	bl	800ee5e <mem_set>
		sect = b_fat;		/* FAT start sector */
 8011c0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011c0c:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8011c0e:	2300      	movs	r3, #0
 8011c10:	64bb      	str	r3, [r7, #72]	; 0x48
 8011c12:	e04b      	b.n	8011cac <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8011c14:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011c18:	2b03      	cmp	r3, #3
 8011c1a:	d113      	bne.n	8011c44 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8011c1c:	f06f 0107 	mvn.w	r1, #7
 8011c20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c22:	f7fd f8cf 	bl	800edc4 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8011c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c28:	3304      	adds	r3, #4
 8011c2a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011c2e:	4618      	mov	r0, r3
 8011c30:	f7fd f8c8 	bl	800edc4 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8011c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c36:	3308      	adds	r3, #8
 8011c38:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	f7fd f8c1 	bl	800edc4 <st_dword>
 8011c42:	e00b      	b.n	8011c5c <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8011c44:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011c48:	2b01      	cmp	r3, #1
 8011c4a:	d101      	bne.n	8011c50 <f_mkfs+0x678>
 8011c4c:	4b21      	ldr	r3, [pc, #132]	; (8011cd4 <f_mkfs+0x6fc>)
 8011c4e:	e001      	b.n	8011c54 <f_mkfs+0x67c>
 8011c50:	f06f 0307 	mvn.w	r3, #7
 8011c54:	4619      	mov	r1, r3
 8011c56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c58:	f7fd f8b4 	bl	800edc4 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8011c5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011c5e:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8011c60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c64:	4293      	cmp	r3, r2
 8011c66:	bf28      	it	cs
 8011c68:	4613      	movcs	r3, r2
 8011c6a:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8011c6c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8011c70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011c72:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011c74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011c76:	f7fd f811 	bl	800ec9c <disk_write>
 8011c7a:	4603      	mov	r3, r0
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d001      	beq.n	8011c84 <f_mkfs+0x6ac>
 8011c80:	2301      	movs	r3, #1
 8011c82:	e0cf      	b.n	8011e24 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 8011c84:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011c86:	461a      	mov	r2, r3
 8011c88:	2100      	movs	r1, #0
 8011c8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c8c:	f7fd f8e7 	bl	800ee5e <mem_set>
				sect += n; nsect -= n;
 8011c90:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011c92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011c94:	4413      	add	r3, r2
 8011c96:	667b      	str	r3, [r7, #100]	; 0x64
 8011c98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011c9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011c9c:	1ad3      	subs	r3, r2, r3
 8011c9e:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 8011ca0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d1dc      	bne.n	8011c60 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8011ca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011ca8:	3301      	adds	r3, #1
 8011caa:	64bb      	str	r3, [r7, #72]	; 0x48
 8011cac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011cae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011cb0:	429a      	cmp	r2, r3
 8011cb2:	d3af      	bcc.n	8011c14 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8011cb4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011cb8:	2b03      	cmp	r3, #3
 8011cba:	d10d      	bne.n	8011cd8 <f_mkfs+0x700>
 8011cbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011cbe:	e00c      	b.n	8011cda <f_mkfs+0x702>
 8011cc0:	08017348 	.word	0x08017348
 8011cc4:	08017354 	.word	0x08017354
 8011cc8:	08017368 	.word	0x08017368
 8011ccc:	41615252 	.word	0x41615252
 8011cd0:	61417272 	.word	0x61417272
 8011cd4:	00fffff8 	.word	0x00fffff8
 8011cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011cda:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8011cdc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ce0:	4293      	cmp	r3, r2
 8011ce2:	bf28      	it	cs
 8011ce4:	4613      	movcs	r3, r2
 8011ce6:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8011ce8:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8011cec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011cee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011cf0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011cf2:	f7fc ffd3 	bl	800ec9c <disk_write>
 8011cf6:	4603      	mov	r3, r0
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d001      	beq.n	8011d00 <f_mkfs+0x728>
 8011cfc:	2301      	movs	r3, #1
 8011cfe:	e091      	b.n	8011e24 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 8011d00:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011d02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011d04:	4413      	add	r3, r2
 8011d06:	667b      	str	r3, [r7, #100]	; 0x64
 8011d08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011d0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011d0c:	1ad3      	subs	r3, r2, r3
 8011d0e:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 8011d10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d1e2      	bne.n	8011cdc <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 8011d16:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011d1a:	2b03      	cmp	r3, #3
 8011d1c:	d103      	bne.n	8011d26 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 8011d1e:	230c      	movs	r3, #12
 8011d20:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8011d24:	e010      	b.n	8011d48 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 8011d26:	693b      	ldr	r3, [r7, #16]
 8011d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011d2c:	d303      	bcc.n	8011d36 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8011d2e:	2306      	movs	r3, #6
 8011d30:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8011d34:	e008      	b.n	8011d48 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8011d36:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011d3a:	2b02      	cmp	r3, #2
 8011d3c:	d101      	bne.n	8011d42 <f_mkfs+0x76a>
 8011d3e:	2304      	movs	r3, #4
 8011d40:	e000      	b.n	8011d44 <f_mkfs+0x76c>
 8011d42:	2301      	movs	r3, #1
 8011d44:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8011d48:	7afb      	ldrb	r3, [r7, #11]
 8011d4a:	f003 0308 	and.w	r3, r3, #8
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d15b      	bne.n	8011e0a <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 8011d52:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011d54:	461a      	mov	r2, r3
 8011d56:	2100      	movs	r1, #0
 8011d58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011d5a:	f7fd f880 	bl	800ee5e <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8011d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d60:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011d64:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011d68:	4618      	mov	r0, r3
 8011d6a:	f7fd f810 	bl	800ed8e <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8011d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d70:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8011d74:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8011d76:	69bb      	ldr	r3, [r7, #24]
 8011d78:	2200      	movs	r2, #0
 8011d7a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8011d7c:	69bb      	ldr	r3, [r7, #24]
 8011d7e:	3301      	adds	r3, #1
 8011d80:	2201      	movs	r2, #1
 8011d82:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8011d84:	69bb      	ldr	r3, [r7, #24]
 8011d86:	3302      	adds	r3, #2
 8011d88:	2201      	movs	r2, #1
 8011d8a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8011d8c:	69bb      	ldr	r3, [r7, #24]
 8011d8e:	3303      	adds	r3, #3
 8011d90:	2200      	movs	r2, #0
 8011d92:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8011d94:	69bb      	ldr	r3, [r7, #24]
 8011d96:	3304      	adds	r3, #4
 8011d98:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8011d9c:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8011d9e:	693a      	ldr	r2, [r7, #16]
 8011da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011da2:	441a      	add	r2, r3
 8011da4:	4b21      	ldr	r3, [pc, #132]	; (8011e2c <f_mkfs+0x854>)
 8011da6:	fba3 1302 	umull	r1, r3, r3, r2
 8011daa:	1ad2      	subs	r2, r2, r3
 8011dac:	0852      	lsrs	r2, r2, #1
 8011dae:	4413      	add	r3, r2
 8011db0:	0b5b      	lsrs	r3, r3, #13
 8011db2:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 8011db4:	69bb      	ldr	r3, [r7, #24]
 8011db6:	3305      	adds	r3, #5
 8011db8:	22fe      	movs	r2, #254	; 0xfe
 8011dba:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8011dbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011dbe:	089b      	lsrs	r3, r3, #2
 8011dc0:	b2da      	uxtb	r2, r3
 8011dc2:	69bb      	ldr	r3, [r7, #24]
 8011dc4:	3306      	adds	r3, #6
 8011dc6:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8011dca:	b2d2      	uxtb	r2, r2
 8011dcc:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8011dce:	69bb      	ldr	r3, [r7, #24]
 8011dd0:	3307      	adds	r3, #7
 8011dd2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011dd4:	b2d2      	uxtb	r2, r2
 8011dd6:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8011dd8:	69bb      	ldr	r3, [r7, #24]
 8011dda:	3308      	adds	r3, #8
 8011ddc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011dde:	4618      	mov	r0, r3
 8011de0:	f7fc fff0 	bl	800edc4 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8011de4:	69bb      	ldr	r3, [r7, #24]
 8011de6:	330c      	adds	r3, #12
 8011de8:	693a      	ldr	r2, [r7, #16]
 8011dea:	4611      	mov	r1, r2
 8011dec:	4618      	mov	r0, r3
 8011dee:	f7fc ffe9 	bl	800edc4 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8011df2:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8011df6:	2301      	movs	r3, #1
 8011df8:	2200      	movs	r2, #0
 8011dfa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011dfc:	f7fc ff4e 	bl	800ec9c <disk_write>
 8011e00:	4603      	mov	r3, r0
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d001      	beq.n	8011e0a <f_mkfs+0x832>
 8011e06:	2301      	movs	r3, #1
 8011e08:	e00c      	b.n	8011e24 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 8011e0a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8011e0e:	2200      	movs	r2, #0
 8011e10:	2100      	movs	r1, #0
 8011e12:	4618      	mov	r0, r3
 8011e14:	f7fc ff62 	bl	800ecdc <disk_ioctl>
 8011e18:	4603      	mov	r3, r0
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d001      	beq.n	8011e22 <f_mkfs+0x84a>
 8011e1e:	2301      	movs	r3, #1
 8011e20:	e000      	b.n	8011e24 <f_mkfs+0x84c>

	return FR_OK;
 8011e22:	2300      	movs	r3, #0
}
 8011e24:	4618      	mov	r0, r3
 8011e26:	3774      	adds	r7, #116	; 0x74
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	bd90      	pop	{r4, r7, pc}
 8011e2c:	0515565b 	.word	0x0515565b

08011e30 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8011e30:	b580      	push	{r7, lr}
 8011e32:	b088      	sub	sp, #32
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	60f8      	str	r0, [r7, #12]
 8011e38:	60b9      	str	r1, [r7, #8]
 8011e3a:	607a      	str	r2, [r7, #4]
	int n = 0;
 8011e3c:	2300      	movs	r3, #0
 8011e3e:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8011e44:	e017      	b.n	8011e76 <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8011e46:	f107 0310 	add.w	r3, r7, #16
 8011e4a:	f107 0114 	add.w	r1, r7, #20
 8011e4e:	2201      	movs	r2, #1
 8011e50:	6878      	ldr	r0, [r7, #4]
 8011e52:	f7fe fee3 	bl	8010c1c <f_read>
		if (rc != 1) break;
 8011e56:	693b      	ldr	r3, [r7, #16]
 8011e58:	2b01      	cmp	r3, #1
 8011e5a:	d112      	bne.n	8011e82 <f_gets+0x52>
		c = s[0];
 8011e5c:	7d3b      	ldrb	r3, [r7, #20]
 8011e5e:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 8011e60:	69bb      	ldr	r3, [r7, #24]
 8011e62:	1c5a      	adds	r2, r3, #1
 8011e64:	61ba      	str	r2, [r7, #24]
 8011e66:	7dfa      	ldrb	r2, [r7, #23]
 8011e68:	701a      	strb	r2, [r3, #0]
		n++;
 8011e6a:	69fb      	ldr	r3, [r7, #28]
 8011e6c:	3301      	adds	r3, #1
 8011e6e:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8011e70:	7dfb      	ldrb	r3, [r7, #23]
 8011e72:	2b0a      	cmp	r3, #10
 8011e74:	d007      	beq.n	8011e86 <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8011e76:	68bb      	ldr	r3, [r7, #8]
 8011e78:	3b01      	subs	r3, #1
 8011e7a:	69fa      	ldr	r2, [r7, #28]
 8011e7c:	429a      	cmp	r2, r3
 8011e7e:	dbe2      	blt.n	8011e46 <f_gets+0x16>
 8011e80:	e002      	b.n	8011e88 <f_gets+0x58>
		if (rc != 1) break;
 8011e82:	bf00      	nop
 8011e84:	e000      	b.n	8011e88 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 8011e86:	bf00      	nop
	}
	*p = 0;
 8011e88:	69bb      	ldr	r3, [r7, #24]
 8011e8a:	2200      	movs	r2, #0
 8011e8c:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8011e8e:	69fb      	ldr	r3, [r7, #28]
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d001      	beq.n	8011e98 <f_gets+0x68>
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	e000      	b.n	8011e9a <f_gets+0x6a>
 8011e98:	2300      	movs	r3, #0
}
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	3720      	adds	r7, #32
 8011e9e:	46bd      	mov	sp, r7
 8011ea0:	bd80      	pop	{r7, pc}

08011ea2 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8011ea2:	b580      	push	{r7, lr}
 8011ea4:	b084      	sub	sp, #16
 8011ea6:	af00      	add	r7, sp, #0
 8011ea8:	6078      	str	r0, [r7, #4]
 8011eaa:	460b      	mov	r3, r1
 8011eac:	70fb      	strb	r3, [r7, #3]

	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
		putc_bfd(pb, '\r');
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	685b      	ldr	r3, [r3, #4]
 8011eb2:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	db25      	blt.n	8011f06 <putc_bfd+0x64>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	1c5a      	adds	r2, r3, #1
 8011ebe:	60fa      	str	r2, [r7, #12]
 8011ec0:	687a      	ldr	r2, [r7, #4]
 8011ec2:	4413      	add	r3, r2
 8011ec4:	78fa      	ldrb	r2, [r7, #3]
 8011ec6:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	2b3c      	cmp	r3, #60	; 0x3c
 8011ecc:	dd12      	ble.n	8011ef4 <putc_bfd+0x52>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	6818      	ldr	r0, [r3, #0]
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	f103 010c 	add.w	r1, r3, #12
 8011ed8:	68fa      	ldr	r2, [r7, #12]
 8011eda:	f107 0308 	add.w	r3, r7, #8
 8011ede:	f7fe ffdc 	bl	8010e9a <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8011ee2:	68ba      	ldr	r2, [r7, #8]
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	429a      	cmp	r2, r3
 8011ee8:	d101      	bne.n	8011eee <putc_bfd+0x4c>
 8011eea:	2300      	movs	r3, #0
 8011eec:	e001      	b.n	8011ef2 <putc_bfd+0x50>
 8011eee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011ef2:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	68fa      	ldr	r2, [r7, #12]
 8011ef8:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	689b      	ldr	r3, [r3, #8]
 8011efe:	1c5a      	adds	r2, r3, #1
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	609a      	str	r2, [r3, #8]
 8011f04:	e000      	b.n	8011f08 <putc_bfd+0x66>
	if (i < 0) return;
 8011f06:	bf00      	nop
}
 8011f08:	3710      	adds	r7, #16
 8011f0a:	46bd      	mov	sp, r7
 8011f0c:	bd80      	pop	{r7, pc}

08011f0e <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8011f0e:	b580      	push	{r7, lr}
 8011f10:	b084      	sub	sp, #16
 8011f12:	af00      	add	r7, sp, #0
 8011f14:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	685b      	ldr	r3, [r3, #4]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	db16      	blt.n	8011f4c <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	6818      	ldr	r0, [r3, #0]
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	f103 010c 	add.w	r1, r3, #12
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	685b      	ldr	r3, [r3, #4]
 8011f2c:	461a      	mov	r2, r3
 8011f2e:	f107 030c 	add.w	r3, r7, #12
 8011f32:	f7fe ffb2 	bl	8010e9a <f_write>
 8011f36:	4603      	mov	r3, r0
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d107      	bne.n	8011f4c <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	685b      	ldr	r3, [r3, #4]
 8011f40:	68fa      	ldr	r2, [r7, #12]
 8011f42:	4293      	cmp	r3, r2
 8011f44:	d102      	bne.n	8011f4c <putc_flush+0x3e>
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	689b      	ldr	r3, [r3, #8]
 8011f4a:	e001      	b.n	8011f50 <putc_flush+0x42>
	return EOF;
 8011f4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8011f50:	4618      	mov	r0, r3
 8011f52:	3710      	adds	r7, #16
 8011f54:	46bd      	mov	sp, r7
 8011f56:	bd80      	pop	{r7, pc}

08011f58 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8011f58:	b480      	push	{r7}
 8011f5a:	b083      	sub	sp, #12
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
 8011f60:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	683a      	ldr	r2, [r7, #0]
 8011f66:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	2200      	movs	r2, #0
 8011f6c:	605a      	str	r2, [r3, #4]
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	685a      	ldr	r2, [r3, #4]
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	609a      	str	r2, [r3, #8]
}
 8011f76:	bf00      	nop
 8011f78:	370c      	adds	r7, #12
 8011f7a:	46bd      	mov	sp, r7
 8011f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f80:	4770      	bx	lr

08011f82 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8011f82:	b580      	push	{r7, lr}
 8011f84:	b096      	sub	sp, #88	; 0x58
 8011f86:	af00      	add	r7, sp, #0
 8011f88:	6078      	str	r0, [r7, #4]
 8011f8a:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8011f8c:	f107 030c 	add.w	r3, r7, #12
 8011f90:	6839      	ldr	r1, [r7, #0]
 8011f92:	4618      	mov	r0, r3
 8011f94:	f7ff ffe0 	bl	8011f58 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8011f98:	e009      	b.n	8011fae <f_puts+0x2c>
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	1c5a      	adds	r2, r3, #1
 8011f9e:	607a      	str	r2, [r7, #4]
 8011fa0:	781a      	ldrb	r2, [r3, #0]
 8011fa2:	f107 030c 	add.w	r3, r7, #12
 8011fa6:	4611      	mov	r1, r2
 8011fa8:	4618      	mov	r0, r3
 8011faa:	f7ff ff7a 	bl	8011ea2 <putc_bfd>
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	781b      	ldrb	r3, [r3, #0]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d1f1      	bne.n	8011f9a <f_puts+0x18>
	return putc_flush(&pb);
 8011fb6:	f107 030c 	add.w	r3, r7, #12
 8011fba:	4618      	mov	r0, r3
 8011fbc:	f7ff ffa7 	bl	8011f0e <putc_flush>
 8011fc0:	4603      	mov	r3, r0
}
 8011fc2:	4618      	mov	r0, r3
 8011fc4:	3758      	adds	r7, #88	; 0x58
 8011fc6:	46bd      	mov	sp, r7
 8011fc8:	bd80      	pop	{r7, pc}
	...

08011fcc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011fcc:	b480      	push	{r7}
 8011fce:	b087      	sub	sp, #28
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	60f8      	str	r0, [r7, #12]
 8011fd4:	60b9      	str	r1, [r7, #8]
 8011fd6:	4613      	mov	r3, r2
 8011fd8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011fda:	2301      	movs	r3, #1
 8011fdc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011fde:	2300      	movs	r3, #0
 8011fe0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011fe2:	4b1f      	ldr	r3, [pc, #124]	; (8012060 <FATFS_LinkDriverEx+0x94>)
 8011fe4:	7a5b      	ldrb	r3, [r3, #9]
 8011fe6:	b2db      	uxtb	r3, r3
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d131      	bne.n	8012050 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011fec:	4b1c      	ldr	r3, [pc, #112]	; (8012060 <FATFS_LinkDriverEx+0x94>)
 8011fee:	7a5b      	ldrb	r3, [r3, #9]
 8011ff0:	b2db      	uxtb	r3, r3
 8011ff2:	461a      	mov	r2, r3
 8011ff4:	4b1a      	ldr	r3, [pc, #104]	; (8012060 <FATFS_LinkDriverEx+0x94>)
 8011ff6:	2100      	movs	r1, #0
 8011ff8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011ffa:	4b19      	ldr	r3, [pc, #100]	; (8012060 <FATFS_LinkDriverEx+0x94>)
 8011ffc:	7a5b      	ldrb	r3, [r3, #9]
 8011ffe:	b2db      	uxtb	r3, r3
 8012000:	4a17      	ldr	r2, [pc, #92]	; (8012060 <FATFS_LinkDriverEx+0x94>)
 8012002:	009b      	lsls	r3, r3, #2
 8012004:	4413      	add	r3, r2
 8012006:	68fa      	ldr	r2, [r7, #12]
 8012008:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801200a:	4b15      	ldr	r3, [pc, #84]	; (8012060 <FATFS_LinkDriverEx+0x94>)
 801200c:	7a5b      	ldrb	r3, [r3, #9]
 801200e:	b2db      	uxtb	r3, r3
 8012010:	461a      	mov	r2, r3
 8012012:	4b13      	ldr	r3, [pc, #76]	; (8012060 <FATFS_LinkDriverEx+0x94>)
 8012014:	4413      	add	r3, r2
 8012016:	79fa      	ldrb	r2, [r7, #7]
 8012018:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801201a:	4b11      	ldr	r3, [pc, #68]	; (8012060 <FATFS_LinkDriverEx+0x94>)
 801201c:	7a5b      	ldrb	r3, [r3, #9]
 801201e:	b2db      	uxtb	r3, r3
 8012020:	1c5a      	adds	r2, r3, #1
 8012022:	b2d1      	uxtb	r1, r2
 8012024:	4a0e      	ldr	r2, [pc, #56]	; (8012060 <FATFS_LinkDriverEx+0x94>)
 8012026:	7251      	strb	r1, [r2, #9]
 8012028:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801202a:	7dbb      	ldrb	r3, [r7, #22]
 801202c:	3330      	adds	r3, #48	; 0x30
 801202e:	b2da      	uxtb	r2, r3
 8012030:	68bb      	ldr	r3, [r7, #8]
 8012032:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012034:	68bb      	ldr	r3, [r7, #8]
 8012036:	3301      	adds	r3, #1
 8012038:	223a      	movs	r2, #58	; 0x3a
 801203a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801203c:	68bb      	ldr	r3, [r7, #8]
 801203e:	3302      	adds	r3, #2
 8012040:	222f      	movs	r2, #47	; 0x2f
 8012042:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012044:	68bb      	ldr	r3, [r7, #8]
 8012046:	3303      	adds	r3, #3
 8012048:	2200      	movs	r2, #0
 801204a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801204c:	2300      	movs	r3, #0
 801204e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012050:	7dfb      	ldrb	r3, [r7, #23]
}
 8012052:	4618      	mov	r0, r3
 8012054:	371c      	adds	r7, #28
 8012056:	46bd      	mov	sp, r7
 8012058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801205c:	4770      	bx	lr
 801205e:	bf00      	nop
 8012060:	20004220 	.word	0x20004220

08012064 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012064:	b580      	push	{r7, lr}
 8012066:	b082      	sub	sp, #8
 8012068:	af00      	add	r7, sp, #0
 801206a:	6078      	str	r0, [r7, #4]
 801206c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801206e:	2200      	movs	r2, #0
 8012070:	6839      	ldr	r1, [r7, #0]
 8012072:	6878      	ldr	r0, [r7, #4]
 8012074:	f7ff ffaa 	bl	8011fcc <FATFS_LinkDriverEx>
 8012078:	4603      	mov	r3, r0
}
 801207a:	4618      	mov	r0, r3
 801207c:	3708      	adds	r7, #8
 801207e:	46bd      	mov	sp, r7
 8012080:	bd80      	pop	{r7, pc}

08012082 <atof>:
 8012082:	2100      	movs	r1, #0
 8012084:	f001 bbfa 	b.w	801387c <strtod>

08012088 <atoi>:
 8012088:	220a      	movs	r2, #10
 801208a:	2100      	movs	r1, #0
 801208c:	f001 bc84 	b.w	8013998 <strtol>

08012090 <atol>:
 8012090:	220a      	movs	r2, #10
 8012092:	2100      	movs	r1, #0
 8012094:	f001 bc80 	b.w	8013998 <strtol>

08012098 <__errno>:
 8012098:	4b01      	ldr	r3, [pc, #4]	; (80120a0 <__errno+0x8>)
 801209a:	6818      	ldr	r0, [r3, #0]
 801209c:	4770      	bx	lr
 801209e:	bf00      	nop
 80120a0:	20000258 	.word	0x20000258

080120a4 <gmtime_r>:
 80120a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120a8:	e9d0 6700 	ldrd	r6, r7, [r0]
 80120ac:	460c      	mov	r4, r1
 80120ae:	4a4f      	ldr	r2, [pc, #316]	; (80121ec <gmtime_r+0x148>)
 80120b0:	2300      	movs	r3, #0
 80120b2:	4630      	mov	r0, r6
 80120b4:	4639      	mov	r1, r7
 80120b6:	f7ee fde7 	bl	8000c88 <__aeabi_ldivmod>
 80120ba:	4639      	mov	r1, r7
 80120bc:	4605      	mov	r5, r0
 80120be:	4a4b      	ldr	r2, [pc, #300]	; (80121ec <gmtime_r+0x148>)
 80120c0:	4630      	mov	r0, r6
 80120c2:	2300      	movs	r3, #0
 80120c4:	f7ee fde0 	bl	8000c88 <__aeabi_ldivmod>
 80120c8:	2a00      	cmp	r2, #0
 80120ca:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 80120ce:	bfb7      	itett	lt
 80120d0:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80120d4:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 80120d8:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 80120dc:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80120e0:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80120e4:	fbb2 f1f0 	udiv	r1, r2, r0
 80120e8:	fb00 2211 	mls	r2, r0, r1, r2
 80120ec:	203c      	movs	r0, #60	; 0x3c
 80120ee:	60a1      	str	r1, [r4, #8]
 80120f0:	fbb2 f1f0 	udiv	r1, r2, r0
 80120f4:	fb00 2211 	mls	r2, r0, r1, r2
 80120f8:	6061      	str	r1, [r4, #4]
 80120fa:	6022      	str	r2, [r4, #0]
 80120fc:	2107      	movs	r1, #7
 80120fe:	1cda      	adds	r2, r3, #3
 8012100:	fb92 f1f1 	sdiv	r1, r2, r1
 8012104:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8012108:	1a52      	subs	r2, r2, r1
 801210a:	bf48      	it	mi
 801210c:	3207      	addmi	r2, #7
 801210e:	4d38      	ldr	r5, [pc, #224]	; (80121f0 <gmtime_r+0x14c>)
 8012110:	4838      	ldr	r0, [pc, #224]	; (80121f4 <gmtime_r+0x150>)
 8012112:	61a2      	str	r2, [r4, #24]
 8012114:	2b00      	cmp	r3, #0
 8012116:	bfb7      	itett	lt
 8012118:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 801211c:	fb93 f5f5 	sdivge	r5, r3, r5
 8012120:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 8012124:	fb92 f5f5 	sdivlt	r5, r2, r5
 8012128:	fb00 3005 	mla	r0, r0, r5, r3
 801212c:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8012130:	fbb0 f2f2 	udiv	r2, r0, r2
 8012134:	4402      	add	r2, r0
 8012136:	f240 53b4 	movw	r3, #1460	; 0x5b4
 801213a:	fbb0 f1f3 	udiv	r1, r0, r3
 801213e:	1a52      	subs	r2, r2, r1
 8012140:	f240 1c6d 	movw	ip, #365	; 0x16d
 8012144:	492c      	ldr	r1, [pc, #176]	; (80121f8 <gmtime_r+0x154>)
 8012146:	fbb0 f1f1 	udiv	r1, r0, r1
 801214a:	2764      	movs	r7, #100	; 0x64
 801214c:	1a52      	subs	r2, r2, r1
 801214e:	fbb2 f1fc 	udiv	r1, r2, ip
 8012152:	fbb2 f3f3 	udiv	r3, r2, r3
 8012156:	fbb1 f6f7 	udiv	r6, r1, r7
 801215a:	1af3      	subs	r3, r6, r3
 801215c:	4403      	add	r3, r0
 801215e:	fb0c 3311 	mls	r3, ip, r1, r3
 8012162:	2299      	movs	r2, #153	; 0x99
 8012164:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8012168:	f10e 0e02 	add.w	lr, lr, #2
 801216c:	f103 0c01 	add.w	ip, r3, #1
 8012170:	fbbe f0f2 	udiv	r0, lr, r2
 8012174:	4342      	muls	r2, r0
 8012176:	3202      	adds	r2, #2
 8012178:	f04f 0805 	mov.w	r8, #5
 801217c:	fbb2 f2f8 	udiv	r2, r2, r8
 8012180:	ebac 0c02 	sub.w	ip, ip, r2
 8012184:	f240 52f9 	movw	r2, #1529	; 0x5f9
 8012188:	4596      	cmp	lr, r2
 801218a:	bf94      	ite	ls
 801218c:	2202      	movls	r2, #2
 801218e:	f06f 0209 	mvnhi.w	r2, #9
 8012192:	4410      	add	r0, r2
 8012194:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8012198:	fb02 1505 	mla	r5, r2, r5, r1
 801219c:	2801      	cmp	r0, #1
 801219e:	bf98      	it	ls
 80121a0:	3501      	addls	r5, #1
 80121a2:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80121a6:	d30d      	bcc.n	80121c4 <gmtime_r+0x120>
 80121a8:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80121ac:	61e3      	str	r3, [r4, #28]
 80121ae:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 80121b2:	2300      	movs	r3, #0
 80121b4:	e9c4 0504 	strd	r0, r5, [r4, #16]
 80121b8:	f8c4 c00c 	str.w	ip, [r4, #12]
 80121bc:	6223      	str	r3, [r4, #32]
 80121be:	4620      	mov	r0, r4
 80121c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121c4:	078a      	lsls	r2, r1, #30
 80121c6:	d102      	bne.n	80121ce <gmtime_r+0x12a>
 80121c8:	fb07 1616 	mls	r6, r7, r6, r1
 80121cc:	b95e      	cbnz	r6, 80121e6 <gmtime_r+0x142>
 80121ce:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80121d2:	fbb1 f6f2 	udiv	r6, r1, r2
 80121d6:	fb02 1216 	mls	r2, r2, r6, r1
 80121da:	fab2 f282 	clz	r2, r2
 80121de:	0952      	lsrs	r2, r2, #5
 80121e0:	333b      	adds	r3, #59	; 0x3b
 80121e2:	4413      	add	r3, r2
 80121e4:	e7e2      	b.n	80121ac <gmtime_r+0x108>
 80121e6:	2201      	movs	r2, #1
 80121e8:	e7fa      	b.n	80121e0 <gmtime_r+0x13c>
 80121ea:	bf00      	nop
 80121ec:	00015180 	.word	0x00015180
 80121f0:	00023ab1 	.word	0x00023ab1
 80121f4:	fffdc54f 	.word	0xfffdc54f
 80121f8:	00023ab0 	.word	0x00023ab0

080121fc <__libc_init_array>:
 80121fc:	b570      	push	{r4, r5, r6, lr}
 80121fe:	4d0d      	ldr	r5, [pc, #52]	; (8012234 <__libc_init_array+0x38>)
 8012200:	4c0d      	ldr	r4, [pc, #52]	; (8012238 <__libc_init_array+0x3c>)
 8012202:	1b64      	subs	r4, r4, r5
 8012204:	10a4      	asrs	r4, r4, #2
 8012206:	2600      	movs	r6, #0
 8012208:	42a6      	cmp	r6, r4
 801220a:	d109      	bne.n	8012220 <__libc_init_array+0x24>
 801220c:	4d0b      	ldr	r5, [pc, #44]	; (801223c <__libc_init_array+0x40>)
 801220e:	4c0c      	ldr	r4, [pc, #48]	; (8012240 <__libc_init_array+0x44>)
 8012210:	f004 fb04 	bl	801681c <_init>
 8012214:	1b64      	subs	r4, r4, r5
 8012216:	10a4      	asrs	r4, r4, #2
 8012218:	2600      	movs	r6, #0
 801221a:	42a6      	cmp	r6, r4
 801221c:	d105      	bne.n	801222a <__libc_init_array+0x2e>
 801221e:	bd70      	pop	{r4, r5, r6, pc}
 8012220:	f855 3b04 	ldr.w	r3, [r5], #4
 8012224:	4798      	blx	r3
 8012226:	3601      	adds	r6, #1
 8012228:	e7ee      	b.n	8012208 <__libc_init_array+0xc>
 801222a:	f855 3b04 	ldr.w	r3, [r5], #4
 801222e:	4798      	blx	r3
 8012230:	3601      	adds	r6, #1
 8012232:	e7f2      	b.n	801221a <__libc_init_array+0x1e>
 8012234:	0801874c 	.word	0x0801874c
 8012238:	0801874c 	.word	0x0801874c
 801223c:	0801874c 	.word	0x0801874c
 8012240:	08018750 	.word	0x08018750

08012244 <memcpy>:
 8012244:	440a      	add	r2, r1
 8012246:	4291      	cmp	r1, r2
 8012248:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801224c:	d100      	bne.n	8012250 <memcpy+0xc>
 801224e:	4770      	bx	lr
 8012250:	b510      	push	{r4, lr}
 8012252:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012256:	f803 4f01 	strb.w	r4, [r3, #1]!
 801225a:	4291      	cmp	r1, r2
 801225c:	d1f9      	bne.n	8012252 <memcpy+0xe>
 801225e:	bd10      	pop	{r4, pc}

08012260 <memset>:
 8012260:	4402      	add	r2, r0
 8012262:	4603      	mov	r3, r0
 8012264:	4293      	cmp	r3, r2
 8012266:	d100      	bne.n	801226a <memset+0xa>
 8012268:	4770      	bx	lr
 801226a:	f803 1b01 	strb.w	r1, [r3], #1
 801226e:	e7f9      	b.n	8012264 <memset+0x4>

08012270 <__cvt>:
 8012270:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012274:	ec55 4b10 	vmov	r4, r5, d0
 8012278:	2d00      	cmp	r5, #0
 801227a:	460e      	mov	r6, r1
 801227c:	4619      	mov	r1, r3
 801227e:	462b      	mov	r3, r5
 8012280:	bfbb      	ittet	lt
 8012282:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012286:	461d      	movlt	r5, r3
 8012288:	2300      	movge	r3, #0
 801228a:	232d      	movlt	r3, #45	; 0x2d
 801228c:	700b      	strb	r3, [r1, #0]
 801228e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012290:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012294:	4691      	mov	r9, r2
 8012296:	f023 0820 	bic.w	r8, r3, #32
 801229a:	bfbc      	itt	lt
 801229c:	4622      	movlt	r2, r4
 801229e:	4614      	movlt	r4, r2
 80122a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80122a4:	d005      	beq.n	80122b2 <__cvt+0x42>
 80122a6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80122aa:	d100      	bne.n	80122ae <__cvt+0x3e>
 80122ac:	3601      	adds	r6, #1
 80122ae:	2102      	movs	r1, #2
 80122b0:	e000      	b.n	80122b4 <__cvt+0x44>
 80122b2:	2103      	movs	r1, #3
 80122b4:	ab03      	add	r3, sp, #12
 80122b6:	9301      	str	r3, [sp, #4]
 80122b8:	ab02      	add	r3, sp, #8
 80122ba:	9300      	str	r3, [sp, #0]
 80122bc:	ec45 4b10 	vmov	d0, r4, r5
 80122c0:	4653      	mov	r3, sl
 80122c2:	4632      	mov	r2, r6
 80122c4:	f001 fc38 	bl	8013b38 <_dtoa_r>
 80122c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80122cc:	4607      	mov	r7, r0
 80122ce:	d102      	bne.n	80122d6 <__cvt+0x66>
 80122d0:	f019 0f01 	tst.w	r9, #1
 80122d4:	d022      	beq.n	801231c <__cvt+0xac>
 80122d6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80122da:	eb07 0906 	add.w	r9, r7, r6
 80122de:	d110      	bne.n	8012302 <__cvt+0x92>
 80122e0:	783b      	ldrb	r3, [r7, #0]
 80122e2:	2b30      	cmp	r3, #48	; 0x30
 80122e4:	d10a      	bne.n	80122fc <__cvt+0x8c>
 80122e6:	2200      	movs	r2, #0
 80122e8:	2300      	movs	r3, #0
 80122ea:	4620      	mov	r0, r4
 80122ec:	4629      	mov	r1, r5
 80122ee:	f7ee fbeb 	bl	8000ac8 <__aeabi_dcmpeq>
 80122f2:	b918      	cbnz	r0, 80122fc <__cvt+0x8c>
 80122f4:	f1c6 0601 	rsb	r6, r6, #1
 80122f8:	f8ca 6000 	str.w	r6, [sl]
 80122fc:	f8da 3000 	ldr.w	r3, [sl]
 8012300:	4499      	add	r9, r3
 8012302:	2200      	movs	r2, #0
 8012304:	2300      	movs	r3, #0
 8012306:	4620      	mov	r0, r4
 8012308:	4629      	mov	r1, r5
 801230a:	f7ee fbdd 	bl	8000ac8 <__aeabi_dcmpeq>
 801230e:	b108      	cbz	r0, 8012314 <__cvt+0xa4>
 8012310:	f8cd 900c 	str.w	r9, [sp, #12]
 8012314:	2230      	movs	r2, #48	; 0x30
 8012316:	9b03      	ldr	r3, [sp, #12]
 8012318:	454b      	cmp	r3, r9
 801231a:	d307      	bcc.n	801232c <__cvt+0xbc>
 801231c:	9b03      	ldr	r3, [sp, #12]
 801231e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012320:	1bdb      	subs	r3, r3, r7
 8012322:	4638      	mov	r0, r7
 8012324:	6013      	str	r3, [r2, #0]
 8012326:	b004      	add	sp, #16
 8012328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801232c:	1c59      	adds	r1, r3, #1
 801232e:	9103      	str	r1, [sp, #12]
 8012330:	701a      	strb	r2, [r3, #0]
 8012332:	e7f0      	b.n	8012316 <__cvt+0xa6>

08012334 <__exponent>:
 8012334:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012336:	4603      	mov	r3, r0
 8012338:	2900      	cmp	r1, #0
 801233a:	bfb8      	it	lt
 801233c:	4249      	neglt	r1, r1
 801233e:	f803 2b02 	strb.w	r2, [r3], #2
 8012342:	bfb4      	ite	lt
 8012344:	222d      	movlt	r2, #45	; 0x2d
 8012346:	222b      	movge	r2, #43	; 0x2b
 8012348:	2909      	cmp	r1, #9
 801234a:	7042      	strb	r2, [r0, #1]
 801234c:	dd2a      	ble.n	80123a4 <__exponent+0x70>
 801234e:	f10d 0407 	add.w	r4, sp, #7
 8012352:	46a4      	mov	ip, r4
 8012354:	270a      	movs	r7, #10
 8012356:	46a6      	mov	lr, r4
 8012358:	460a      	mov	r2, r1
 801235a:	fb91 f6f7 	sdiv	r6, r1, r7
 801235e:	fb07 1516 	mls	r5, r7, r6, r1
 8012362:	3530      	adds	r5, #48	; 0x30
 8012364:	2a63      	cmp	r2, #99	; 0x63
 8012366:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801236a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801236e:	4631      	mov	r1, r6
 8012370:	dcf1      	bgt.n	8012356 <__exponent+0x22>
 8012372:	3130      	adds	r1, #48	; 0x30
 8012374:	f1ae 0502 	sub.w	r5, lr, #2
 8012378:	f804 1c01 	strb.w	r1, [r4, #-1]
 801237c:	1c44      	adds	r4, r0, #1
 801237e:	4629      	mov	r1, r5
 8012380:	4561      	cmp	r1, ip
 8012382:	d30a      	bcc.n	801239a <__exponent+0x66>
 8012384:	f10d 0209 	add.w	r2, sp, #9
 8012388:	eba2 020e 	sub.w	r2, r2, lr
 801238c:	4565      	cmp	r5, ip
 801238e:	bf88      	it	hi
 8012390:	2200      	movhi	r2, #0
 8012392:	4413      	add	r3, r2
 8012394:	1a18      	subs	r0, r3, r0
 8012396:	b003      	add	sp, #12
 8012398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801239a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801239e:	f804 2f01 	strb.w	r2, [r4, #1]!
 80123a2:	e7ed      	b.n	8012380 <__exponent+0x4c>
 80123a4:	2330      	movs	r3, #48	; 0x30
 80123a6:	3130      	adds	r1, #48	; 0x30
 80123a8:	7083      	strb	r3, [r0, #2]
 80123aa:	70c1      	strb	r1, [r0, #3]
 80123ac:	1d03      	adds	r3, r0, #4
 80123ae:	e7f1      	b.n	8012394 <__exponent+0x60>

080123b0 <_printf_float>:
 80123b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123b4:	ed2d 8b02 	vpush	{d8}
 80123b8:	b08d      	sub	sp, #52	; 0x34
 80123ba:	460c      	mov	r4, r1
 80123bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80123c0:	4616      	mov	r6, r2
 80123c2:	461f      	mov	r7, r3
 80123c4:	4605      	mov	r5, r0
 80123c6:	f002 fd15 	bl	8014df4 <_localeconv_r>
 80123ca:	f8d0 a000 	ldr.w	sl, [r0]
 80123ce:	4650      	mov	r0, sl
 80123d0:	f7ed fefe 	bl	80001d0 <strlen>
 80123d4:	2300      	movs	r3, #0
 80123d6:	930a      	str	r3, [sp, #40]	; 0x28
 80123d8:	6823      	ldr	r3, [r4, #0]
 80123da:	9305      	str	r3, [sp, #20]
 80123dc:	f8d8 3000 	ldr.w	r3, [r8]
 80123e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80123e4:	3307      	adds	r3, #7
 80123e6:	f023 0307 	bic.w	r3, r3, #7
 80123ea:	f103 0208 	add.w	r2, r3, #8
 80123ee:	f8c8 2000 	str.w	r2, [r8]
 80123f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80123fa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80123fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012402:	9307      	str	r3, [sp, #28]
 8012404:	f8cd 8018 	str.w	r8, [sp, #24]
 8012408:	ee08 0a10 	vmov	s16, r0
 801240c:	4b9f      	ldr	r3, [pc, #636]	; (801268c <_printf_float+0x2dc>)
 801240e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012412:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012416:	f7ee fb89 	bl	8000b2c <__aeabi_dcmpun>
 801241a:	bb88      	cbnz	r0, 8012480 <_printf_float+0xd0>
 801241c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012420:	4b9a      	ldr	r3, [pc, #616]	; (801268c <_printf_float+0x2dc>)
 8012422:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012426:	f7ee fb63 	bl	8000af0 <__aeabi_dcmple>
 801242a:	bb48      	cbnz	r0, 8012480 <_printf_float+0xd0>
 801242c:	2200      	movs	r2, #0
 801242e:	2300      	movs	r3, #0
 8012430:	4640      	mov	r0, r8
 8012432:	4649      	mov	r1, r9
 8012434:	f7ee fb52 	bl	8000adc <__aeabi_dcmplt>
 8012438:	b110      	cbz	r0, 8012440 <_printf_float+0x90>
 801243a:	232d      	movs	r3, #45	; 0x2d
 801243c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012440:	4b93      	ldr	r3, [pc, #588]	; (8012690 <_printf_float+0x2e0>)
 8012442:	4894      	ldr	r0, [pc, #592]	; (8012694 <_printf_float+0x2e4>)
 8012444:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8012448:	bf94      	ite	ls
 801244a:	4698      	movls	r8, r3
 801244c:	4680      	movhi	r8, r0
 801244e:	2303      	movs	r3, #3
 8012450:	6123      	str	r3, [r4, #16]
 8012452:	9b05      	ldr	r3, [sp, #20]
 8012454:	f023 0204 	bic.w	r2, r3, #4
 8012458:	6022      	str	r2, [r4, #0]
 801245a:	f04f 0900 	mov.w	r9, #0
 801245e:	9700      	str	r7, [sp, #0]
 8012460:	4633      	mov	r3, r6
 8012462:	aa0b      	add	r2, sp, #44	; 0x2c
 8012464:	4621      	mov	r1, r4
 8012466:	4628      	mov	r0, r5
 8012468:	f000 f9d8 	bl	801281c <_printf_common>
 801246c:	3001      	adds	r0, #1
 801246e:	f040 8090 	bne.w	8012592 <_printf_float+0x1e2>
 8012472:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012476:	b00d      	add	sp, #52	; 0x34
 8012478:	ecbd 8b02 	vpop	{d8}
 801247c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012480:	4642      	mov	r2, r8
 8012482:	464b      	mov	r3, r9
 8012484:	4640      	mov	r0, r8
 8012486:	4649      	mov	r1, r9
 8012488:	f7ee fb50 	bl	8000b2c <__aeabi_dcmpun>
 801248c:	b140      	cbz	r0, 80124a0 <_printf_float+0xf0>
 801248e:	464b      	mov	r3, r9
 8012490:	2b00      	cmp	r3, #0
 8012492:	bfbc      	itt	lt
 8012494:	232d      	movlt	r3, #45	; 0x2d
 8012496:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801249a:	487f      	ldr	r0, [pc, #508]	; (8012698 <_printf_float+0x2e8>)
 801249c:	4b7f      	ldr	r3, [pc, #508]	; (801269c <_printf_float+0x2ec>)
 801249e:	e7d1      	b.n	8012444 <_printf_float+0x94>
 80124a0:	6863      	ldr	r3, [r4, #4]
 80124a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80124a6:	9206      	str	r2, [sp, #24]
 80124a8:	1c5a      	adds	r2, r3, #1
 80124aa:	d13f      	bne.n	801252c <_printf_float+0x17c>
 80124ac:	2306      	movs	r3, #6
 80124ae:	6063      	str	r3, [r4, #4]
 80124b0:	9b05      	ldr	r3, [sp, #20]
 80124b2:	6861      	ldr	r1, [r4, #4]
 80124b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80124b8:	2300      	movs	r3, #0
 80124ba:	9303      	str	r3, [sp, #12]
 80124bc:	ab0a      	add	r3, sp, #40	; 0x28
 80124be:	e9cd b301 	strd	fp, r3, [sp, #4]
 80124c2:	ab09      	add	r3, sp, #36	; 0x24
 80124c4:	ec49 8b10 	vmov	d0, r8, r9
 80124c8:	9300      	str	r3, [sp, #0]
 80124ca:	6022      	str	r2, [r4, #0]
 80124cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80124d0:	4628      	mov	r0, r5
 80124d2:	f7ff fecd 	bl	8012270 <__cvt>
 80124d6:	9b06      	ldr	r3, [sp, #24]
 80124d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80124da:	2b47      	cmp	r3, #71	; 0x47
 80124dc:	4680      	mov	r8, r0
 80124de:	d108      	bne.n	80124f2 <_printf_float+0x142>
 80124e0:	1cc8      	adds	r0, r1, #3
 80124e2:	db02      	blt.n	80124ea <_printf_float+0x13a>
 80124e4:	6863      	ldr	r3, [r4, #4]
 80124e6:	4299      	cmp	r1, r3
 80124e8:	dd41      	ble.n	801256e <_printf_float+0x1be>
 80124ea:	f1ab 0b02 	sub.w	fp, fp, #2
 80124ee:	fa5f fb8b 	uxtb.w	fp, fp
 80124f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80124f6:	d820      	bhi.n	801253a <_printf_float+0x18a>
 80124f8:	3901      	subs	r1, #1
 80124fa:	465a      	mov	r2, fp
 80124fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012500:	9109      	str	r1, [sp, #36]	; 0x24
 8012502:	f7ff ff17 	bl	8012334 <__exponent>
 8012506:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012508:	1813      	adds	r3, r2, r0
 801250a:	2a01      	cmp	r2, #1
 801250c:	4681      	mov	r9, r0
 801250e:	6123      	str	r3, [r4, #16]
 8012510:	dc02      	bgt.n	8012518 <_printf_float+0x168>
 8012512:	6822      	ldr	r2, [r4, #0]
 8012514:	07d2      	lsls	r2, r2, #31
 8012516:	d501      	bpl.n	801251c <_printf_float+0x16c>
 8012518:	3301      	adds	r3, #1
 801251a:	6123      	str	r3, [r4, #16]
 801251c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012520:	2b00      	cmp	r3, #0
 8012522:	d09c      	beq.n	801245e <_printf_float+0xae>
 8012524:	232d      	movs	r3, #45	; 0x2d
 8012526:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801252a:	e798      	b.n	801245e <_printf_float+0xae>
 801252c:	9a06      	ldr	r2, [sp, #24]
 801252e:	2a47      	cmp	r2, #71	; 0x47
 8012530:	d1be      	bne.n	80124b0 <_printf_float+0x100>
 8012532:	2b00      	cmp	r3, #0
 8012534:	d1bc      	bne.n	80124b0 <_printf_float+0x100>
 8012536:	2301      	movs	r3, #1
 8012538:	e7b9      	b.n	80124ae <_printf_float+0xfe>
 801253a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801253e:	d118      	bne.n	8012572 <_printf_float+0x1c2>
 8012540:	2900      	cmp	r1, #0
 8012542:	6863      	ldr	r3, [r4, #4]
 8012544:	dd0b      	ble.n	801255e <_printf_float+0x1ae>
 8012546:	6121      	str	r1, [r4, #16]
 8012548:	b913      	cbnz	r3, 8012550 <_printf_float+0x1a0>
 801254a:	6822      	ldr	r2, [r4, #0]
 801254c:	07d0      	lsls	r0, r2, #31
 801254e:	d502      	bpl.n	8012556 <_printf_float+0x1a6>
 8012550:	3301      	adds	r3, #1
 8012552:	440b      	add	r3, r1
 8012554:	6123      	str	r3, [r4, #16]
 8012556:	65a1      	str	r1, [r4, #88]	; 0x58
 8012558:	f04f 0900 	mov.w	r9, #0
 801255c:	e7de      	b.n	801251c <_printf_float+0x16c>
 801255e:	b913      	cbnz	r3, 8012566 <_printf_float+0x1b6>
 8012560:	6822      	ldr	r2, [r4, #0]
 8012562:	07d2      	lsls	r2, r2, #31
 8012564:	d501      	bpl.n	801256a <_printf_float+0x1ba>
 8012566:	3302      	adds	r3, #2
 8012568:	e7f4      	b.n	8012554 <_printf_float+0x1a4>
 801256a:	2301      	movs	r3, #1
 801256c:	e7f2      	b.n	8012554 <_printf_float+0x1a4>
 801256e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8012572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012574:	4299      	cmp	r1, r3
 8012576:	db05      	blt.n	8012584 <_printf_float+0x1d4>
 8012578:	6823      	ldr	r3, [r4, #0]
 801257a:	6121      	str	r1, [r4, #16]
 801257c:	07d8      	lsls	r0, r3, #31
 801257e:	d5ea      	bpl.n	8012556 <_printf_float+0x1a6>
 8012580:	1c4b      	adds	r3, r1, #1
 8012582:	e7e7      	b.n	8012554 <_printf_float+0x1a4>
 8012584:	2900      	cmp	r1, #0
 8012586:	bfd4      	ite	le
 8012588:	f1c1 0202 	rsble	r2, r1, #2
 801258c:	2201      	movgt	r2, #1
 801258e:	4413      	add	r3, r2
 8012590:	e7e0      	b.n	8012554 <_printf_float+0x1a4>
 8012592:	6823      	ldr	r3, [r4, #0]
 8012594:	055a      	lsls	r2, r3, #21
 8012596:	d407      	bmi.n	80125a8 <_printf_float+0x1f8>
 8012598:	6923      	ldr	r3, [r4, #16]
 801259a:	4642      	mov	r2, r8
 801259c:	4631      	mov	r1, r6
 801259e:	4628      	mov	r0, r5
 80125a0:	47b8      	blx	r7
 80125a2:	3001      	adds	r0, #1
 80125a4:	d12c      	bne.n	8012600 <_printf_float+0x250>
 80125a6:	e764      	b.n	8012472 <_printf_float+0xc2>
 80125a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80125ac:	f240 80e0 	bls.w	8012770 <_printf_float+0x3c0>
 80125b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80125b4:	2200      	movs	r2, #0
 80125b6:	2300      	movs	r3, #0
 80125b8:	f7ee fa86 	bl	8000ac8 <__aeabi_dcmpeq>
 80125bc:	2800      	cmp	r0, #0
 80125be:	d034      	beq.n	801262a <_printf_float+0x27a>
 80125c0:	4a37      	ldr	r2, [pc, #220]	; (80126a0 <_printf_float+0x2f0>)
 80125c2:	2301      	movs	r3, #1
 80125c4:	4631      	mov	r1, r6
 80125c6:	4628      	mov	r0, r5
 80125c8:	47b8      	blx	r7
 80125ca:	3001      	adds	r0, #1
 80125cc:	f43f af51 	beq.w	8012472 <_printf_float+0xc2>
 80125d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80125d4:	429a      	cmp	r2, r3
 80125d6:	db02      	blt.n	80125de <_printf_float+0x22e>
 80125d8:	6823      	ldr	r3, [r4, #0]
 80125da:	07d8      	lsls	r0, r3, #31
 80125dc:	d510      	bpl.n	8012600 <_printf_float+0x250>
 80125de:	ee18 3a10 	vmov	r3, s16
 80125e2:	4652      	mov	r2, sl
 80125e4:	4631      	mov	r1, r6
 80125e6:	4628      	mov	r0, r5
 80125e8:	47b8      	blx	r7
 80125ea:	3001      	adds	r0, #1
 80125ec:	f43f af41 	beq.w	8012472 <_printf_float+0xc2>
 80125f0:	f04f 0800 	mov.w	r8, #0
 80125f4:	f104 091a 	add.w	r9, r4, #26
 80125f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125fa:	3b01      	subs	r3, #1
 80125fc:	4543      	cmp	r3, r8
 80125fe:	dc09      	bgt.n	8012614 <_printf_float+0x264>
 8012600:	6823      	ldr	r3, [r4, #0]
 8012602:	079b      	lsls	r3, r3, #30
 8012604:	f100 8105 	bmi.w	8012812 <_printf_float+0x462>
 8012608:	68e0      	ldr	r0, [r4, #12]
 801260a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801260c:	4298      	cmp	r0, r3
 801260e:	bfb8      	it	lt
 8012610:	4618      	movlt	r0, r3
 8012612:	e730      	b.n	8012476 <_printf_float+0xc6>
 8012614:	2301      	movs	r3, #1
 8012616:	464a      	mov	r2, r9
 8012618:	4631      	mov	r1, r6
 801261a:	4628      	mov	r0, r5
 801261c:	47b8      	blx	r7
 801261e:	3001      	adds	r0, #1
 8012620:	f43f af27 	beq.w	8012472 <_printf_float+0xc2>
 8012624:	f108 0801 	add.w	r8, r8, #1
 8012628:	e7e6      	b.n	80125f8 <_printf_float+0x248>
 801262a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801262c:	2b00      	cmp	r3, #0
 801262e:	dc39      	bgt.n	80126a4 <_printf_float+0x2f4>
 8012630:	4a1b      	ldr	r2, [pc, #108]	; (80126a0 <_printf_float+0x2f0>)
 8012632:	2301      	movs	r3, #1
 8012634:	4631      	mov	r1, r6
 8012636:	4628      	mov	r0, r5
 8012638:	47b8      	blx	r7
 801263a:	3001      	adds	r0, #1
 801263c:	f43f af19 	beq.w	8012472 <_printf_float+0xc2>
 8012640:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012644:	4313      	orrs	r3, r2
 8012646:	d102      	bne.n	801264e <_printf_float+0x29e>
 8012648:	6823      	ldr	r3, [r4, #0]
 801264a:	07d9      	lsls	r1, r3, #31
 801264c:	d5d8      	bpl.n	8012600 <_printf_float+0x250>
 801264e:	ee18 3a10 	vmov	r3, s16
 8012652:	4652      	mov	r2, sl
 8012654:	4631      	mov	r1, r6
 8012656:	4628      	mov	r0, r5
 8012658:	47b8      	blx	r7
 801265a:	3001      	adds	r0, #1
 801265c:	f43f af09 	beq.w	8012472 <_printf_float+0xc2>
 8012660:	f04f 0900 	mov.w	r9, #0
 8012664:	f104 0a1a 	add.w	sl, r4, #26
 8012668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801266a:	425b      	negs	r3, r3
 801266c:	454b      	cmp	r3, r9
 801266e:	dc01      	bgt.n	8012674 <_printf_float+0x2c4>
 8012670:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012672:	e792      	b.n	801259a <_printf_float+0x1ea>
 8012674:	2301      	movs	r3, #1
 8012676:	4652      	mov	r2, sl
 8012678:	4631      	mov	r1, r6
 801267a:	4628      	mov	r0, r5
 801267c:	47b8      	blx	r7
 801267e:	3001      	adds	r0, #1
 8012680:	f43f aef7 	beq.w	8012472 <_printf_float+0xc2>
 8012684:	f109 0901 	add.w	r9, r9, #1
 8012688:	e7ee      	b.n	8012668 <_printf_float+0x2b8>
 801268a:	bf00      	nop
 801268c:	7fefffff 	.word	0x7fefffff
 8012690:	080183ac 	.word	0x080183ac
 8012694:	080183b0 	.word	0x080183b0
 8012698:	080183b8 	.word	0x080183b8
 801269c:	080183b4 	.word	0x080183b4
 80126a0:	080183bc 	.word	0x080183bc
 80126a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80126a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80126a8:	429a      	cmp	r2, r3
 80126aa:	bfa8      	it	ge
 80126ac:	461a      	movge	r2, r3
 80126ae:	2a00      	cmp	r2, #0
 80126b0:	4691      	mov	r9, r2
 80126b2:	dc37      	bgt.n	8012724 <_printf_float+0x374>
 80126b4:	f04f 0b00 	mov.w	fp, #0
 80126b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80126bc:	f104 021a 	add.w	r2, r4, #26
 80126c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80126c2:	9305      	str	r3, [sp, #20]
 80126c4:	eba3 0309 	sub.w	r3, r3, r9
 80126c8:	455b      	cmp	r3, fp
 80126ca:	dc33      	bgt.n	8012734 <_printf_float+0x384>
 80126cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80126d0:	429a      	cmp	r2, r3
 80126d2:	db3b      	blt.n	801274c <_printf_float+0x39c>
 80126d4:	6823      	ldr	r3, [r4, #0]
 80126d6:	07da      	lsls	r2, r3, #31
 80126d8:	d438      	bmi.n	801274c <_printf_float+0x39c>
 80126da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80126dc:	9a05      	ldr	r2, [sp, #20]
 80126de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80126e0:	1a9a      	subs	r2, r3, r2
 80126e2:	eba3 0901 	sub.w	r9, r3, r1
 80126e6:	4591      	cmp	r9, r2
 80126e8:	bfa8      	it	ge
 80126ea:	4691      	movge	r9, r2
 80126ec:	f1b9 0f00 	cmp.w	r9, #0
 80126f0:	dc35      	bgt.n	801275e <_printf_float+0x3ae>
 80126f2:	f04f 0800 	mov.w	r8, #0
 80126f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80126fa:	f104 0a1a 	add.w	sl, r4, #26
 80126fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012702:	1a9b      	subs	r3, r3, r2
 8012704:	eba3 0309 	sub.w	r3, r3, r9
 8012708:	4543      	cmp	r3, r8
 801270a:	f77f af79 	ble.w	8012600 <_printf_float+0x250>
 801270e:	2301      	movs	r3, #1
 8012710:	4652      	mov	r2, sl
 8012712:	4631      	mov	r1, r6
 8012714:	4628      	mov	r0, r5
 8012716:	47b8      	blx	r7
 8012718:	3001      	adds	r0, #1
 801271a:	f43f aeaa 	beq.w	8012472 <_printf_float+0xc2>
 801271e:	f108 0801 	add.w	r8, r8, #1
 8012722:	e7ec      	b.n	80126fe <_printf_float+0x34e>
 8012724:	4613      	mov	r3, r2
 8012726:	4631      	mov	r1, r6
 8012728:	4642      	mov	r2, r8
 801272a:	4628      	mov	r0, r5
 801272c:	47b8      	blx	r7
 801272e:	3001      	adds	r0, #1
 8012730:	d1c0      	bne.n	80126b4 <_printf_float+0x304>
 8012732:	e69e      	b.n	8012472 <_printf_float+0xc2>
 8012734:	2301      	movs	r3, #1
 8012736:	4631      	mov	r1, r6
 8012738:	4628      	mov	r0, r5
 801273a:	9205      	str	r2, [sp, #20]
 801273c:	47b8      	blx	r7
 801273e:	3001      	adds	r0, #1
 8012740:	f43f ae97 	beq.w	8012472 <_printf_float+0xc2>
 8012744:	9a05      	ldr	r2, [sp, #20]
 8012746:	f10b 0b01 	add.w	fp, fp, #1
 801274a:	e7b9      	b.n	80126c0 <_printf_float+0x310>
 801274c:	ee18 3a10 	vmov	r3, s16
 8012750:	4652      	mov	r2, sl
 8012752:	4631      	mov	r1, r6
 8012754:	4628      	mov	r0, r5
 8012756:	47b8      	blx	r7
 8012758:	3001      	adds	r0, #1
 801275a:	d1be      	bne.n	80126da <_printf_float+0x32a>
 801275c:	e689      	b.n	8012472 <_printf_float+0xc2>
 801275e:	9a05      	ldr	r2, [sp, #20]
 8012760:	464b      	mov	r3, r9
 8012762:	4442      	add	r2, r8
 8012764:	4631      	mov	r1, r6
 8012766:	4628      	mov	r0, r5
 8012768:	47b8      	blx	r7
 801276a:	3001      	adds	r0, #1
 801276c:	d1c1      	bne.n	80126f2 <_printf_float+0x342>
 801276e:	e680      	b.n	8012472 <_printf_float+0xc2>
 8012770:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012772:	2a01      	cmp	r2, #1
 8012774:	dc01      	bgt.n	801277a <_printf_float+0x3ca>
 8012776:	07db      	lsls	r3, r3, #31
 8012778:	d538      	bpl.n	80127ec <_printf_float+0x43c>
 801277a:	2301      	movs	r3, #1
 801277c:	4642      	mov	r2, r8
 801277e:	4631      	mov	r1, r6
 8012780:	4628      	mov	r0, r5
 8012782:	47b8      	blx	r7
 8012784:	3001      	adds	r0, #1
 8012786:	f43f ae74 	beq.w	8012472 <_printf_float+0xc2>
 801278a:	ee18 3a10 	vmov	r3, s16
 801278e:	4652      	mov	r2, sl
 8012790:	4631      	mov	r1, r6
 8012792:	4628      	mov	r0, r5
 8012794:	47b8      	blx	r7
 8012796:	3001      	adds	r0, #1
 8012798:	f43f ae6b 	beq.w	8012472 <_printf_float+0xc2>
 801279c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80127a0:	2200      	movs	r2, #0
 80127a2:	2300      	movs	r3, #0
 80127a4:	f7ee f990 	bl	8000ac8 <__aeabi_dcmpeq>
 80127a8:	b9d8      	cbnz	r0, 80127e2 <_printf_float+0x432>
 80127aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80127ac:	f108 0201 	add.w	r2, r8, #1
 80127b0:	3b01      	subs	r3, #1
 80127b2:	4631      	mov	r1, r6
 80127b4:	4628      	mov	r0, r5
 80127b6:	47b8      	blx	r7
 80127b8:	3001      	adds	r0, #1
 80127ba:	d10e      	bne.n	80127da <_printf_float+0x42a>
 80127bc:	e659      	b.n	8012472 <_printf_float+0xc2>
 80127be:	2301      	movs	r3, #1
 80127c0:	4652      	mov	r2, sl
 80127c2:	4631      	mov	r1, r6
 80127c4:	4628      	mov	r0, r5
 80127c6:	47b8      	blx	r7
 80127c8:	3001      	adds	r0, #1
 80127ca:	f43f ae52 	beq.w	8012472 <_printf_float+0xc2>
 80127ce:	f108 0801 	add.w	r8, r8, #1
 80127d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80127d4:	3b01      	subs	r3, #1
 80127d6:	4543      	cmp	r3, r8
 80127d8:	dcf1      	bgt.n	80127be <_printf_float+0x40e>
 80127da:	464b      	mov	r3, r9
 80127dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80127e0:	e6dc      	b.n	801259c <_printf_float+0x1ec>
 80127e2:	f04f 0800 	mov.w	r8, #0
 80127e6:	f104 0a1a 	add.w	sl, r4, #26
 80127ea:	e7f2      	b.n	80127d2 <_printf_float+0x422>
 80127ec:	2301      	movs	r3, #1
 80127ee:	4642      	mov	r2, r8
 80127f0:	e7df      	b.n	80127b2 <_printf_float+0x402>
 80127f2:	2301      	movs	r3, #1
 80127f4:	464a      	mov	r2, r9
 80127f6:	4631      	mov	r1, r6
 80127f8:	4628      	mov	r0, r5
 80127fa:	47b8      	blx	r7
 80127fc:	3001      	adds	r0, #1
 80127fe:	f43f ae38 	beq.w	8012472 <_printf_float+0xc2>
 8012802:	f108 0801 	add.w	r8, r8, #1
 8012806:	68e3      	ldr	r3, [r4, #12]
 8012808:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801280a:	1a5b      	subs	r3, r3, r1
 801280c:	4543      	cmp	r3, r8
 801280e:	dcf0      	bgt.n	80127f2 <_printf_float+0x442>
 8012810:	e6fa      	b.n	8012608 <_printf_float+0x258>
 8012812:	f04f 0800 	mov.w	r8, #0
 8012816:	f104 0919 	add.w	r9, r4, #25
 801281a:	e7f4      	b.n	8012806 <_printf_float+0x456>

0801281c <_printf_common>:
 801281c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012820:	4616      	mov	r6, r2
 8012822:	4699      	mov	r9, r3
 8012824:	688a      	ldr	r2, [r1, #8]
 8012826:	690b      	ldr	r3, [r1, #16]
 8012828:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801282c:	4293      	cmp	r3, r2
 801282e:	bfb8      	it	lt
 8012830:	4613      	movlt	r3, r2
 8012832:	6033      	str	r3, [r6, #0]
 8012834:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012838:	4607      	mov	r7, r0
 801283a:	460c      	mov	r4, r1
 801283c:	b10a      	cbz	r2, 8012842 <_printf_common+0x26>
 801283e:	3301      	adds	r3, #1
 8012840:	6033      	str	r3, [r6, #0]
 8012842:	6823      	ldr	r3, [r4, #0]
 8012844:	0699      	lsls	r1, r3, #26
 8012846:	bf42      	ittt	mi
 8012848:	6833      	ldrmi	r3, [r6, #0]
 801284a:	3302      	addmi	r3, #2
 801284c:	6033      	strmi	r3, [r6, #0]
 801284e:	6825      	ldr	r5, [r4, #0]
 8012850:	f015 0506 	ands.w	r5, r5, #6
 8012854:	d106      	bne.n	8012864 <_printf_common+0x48>
 8012856:	f104 0a19 	add.w	sl, r4, #25
 801285a:	68e3      	ldr	r3, [r4, #12]
 801285c:	6832      	ldr	r2, [r6, #0]
 801285e:	1a9b      	subs	r3, r3, r2
 8012860:	42ab      	cmp	r3, r5
 8012862:	dc26      	bgt.n	80128b2 <_printf_common+0x96>
 8012864:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012868:	1e13      	subs	r3, r2, #0
 801286a:	6822      	ldr	r2, [r4, #0]
 801286c:	bf18      	it	ne
 801286e:	2301      	movne	r3, #1
 8012870:	0692      	lsls	r2, r2, #26
 8012872:	d42b      	bmi.n	80128cc <_printf_common+0xb0>
 8012874:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012878:	4649      	mov	r1, r9
 801287a:	4638      	mov	r0, r7
 801287c:	47c0      	blx	r8
 801287e:	3001      	adds	r0, #1
 8012880:	d01e      	beq.n	80128c0 <_printf_common+0xa4>
 8012882:	6823      	ldr	r3, [r4, #0]
 8012884:	68e5      	ldr	r5, [r4, #12]
 8012886:	6832      	ldr	r2, [r6, #0]
 8012888:	f003 0306 	and.w	r3, r3, #6
 801288c:	2b04      	cmp	r3, #4
 801288e:	bf08      	it	eq
 8012890:	1aad      	subeq	r5, r5, r2
 8012892:	68a3      	ldr	r3, [r4, #8]
 8012894:	6922      	ldr	r2, [r4, #16]
 8012896:	bf0c      	ite	eq
 8012898:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801289c:	2500      	movne	r5, #0
 801289e:	4293      	cmp	r3, r2
 80128a0:	bfc4      	itt	gt
 80128a2:	1a9b      	subgt	r3, r3, r2
 80128a4:	18ed      	addgt	r5, r5, r3
 80128a6:	2600      	movs	r6, #0
 80128a8:	341a      	adds	r4, #26
 80128aa:	42b5      	cmp	r5, r6
 80128ac:	d11a      	bne.n	80128e4 <_printf_common+0xc8>
 80128ae:	2000      	movs	r0, #0
 80128b0:	e008      	b.n	80128c4 <_printf_common+0xa8>
 80128b2:	2301      	movs	r3, #1
 80128b4:	4652      	mov	r2, sl
 80128b6:	4649      	mov	r1, r9
 80128b8:	4638      	mov	r0, r7
 80128ba:	47c0      	blx	r8
 80128bc:	3001      	adds	r0, #1
 80128be:	d103      	bne.n	80128c8 <_printf_common+0xac>
 80128c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80128c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128c8:	3501      	adds	r5, #1
 80128ca:	e7c6      	b.n	801285a <_printf_common+0x3e>
 80128cc:	18e1      	adds	r1, r4, r3
 80128ce:	1c5a      	adds	r2, r3, #1
 80128d0:	2030      	movs	r0, #48	; 0x30
 80128d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80128d6:	4422      	add	r2, r4
 80128d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80128dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80128e0:	3302      	adds	r3, #2
 80128e2:	e7c7      	b.n	8012874 <_printf_common+0x58>
 80128e4:	2301      	movs	r3, #1
 80128e6:	4622      	mov	r2, r4
 80128e8:	4649      	mov	r1, r9
 80128ea:	4638      	mov	r0, r7
 80128ec:	47c0      	blx	r8
 80128ee:	3001      	adds	r0, #1
 80128f0:	d0e6      	beq.n	80128c0 <_printf_common+0xa4>
 80128f2:	3601      	adds	r6, #1
 80128f4:	e7d9      	b.n	80128aa <_printf_common+0x8e>
	...

080128f8 <_printf_i>:
 80128f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80128fc:	7e0f      	ldrb	r7, [r1, #24]
 80128fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012900:	2f78      	cmp	r7, #120	; 0x78
 8012902:	4691      	mov	r9, r2
 8012904:	4680      	mov	r8, r0
 8012906:	460c      	mov	r4, r1
 8012908:	469a      	mov	sl, r3
 801290a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801290e:	d807      	bhi.n	8012920 <_printf_i+0x28>
 8012910:	2f62      	cmp	r7, #98	; 0x62
 8012912:	d80a      	bhi.n	801292a <_printf_i+0x32>
 8012914:	2f00      	cmp	r7, #0
 8012916:	f000 80d8 	beq.w	8012aca <_printf_i+0x1d2>
 801291a:	2f58      	cmp	r7, #88	; 0x58
 801291c:	f000 80a3 	beq.w	8012a66 <_printf_i+0x16e>
 8012920:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012924:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012928:	e03a      	b.n	80129a0 <_printf_i+0xa8>
 801292a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801292e:	2b15      	cmp	r3, #21
 8012930:	d8f6      	bhi.n	8012920 <_printf_i+0x28>
 8012932:	a101      	add	r1, pc, #4	; (adr r1, 8012938 <_printf_i+0x40>)
 8012934:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012938:	08012991 	.word	0x08012991
 801293c:	080129a5 	.word	0x080129a5
 8012940:	08012921 	.word	0x08012921
 8012944:	08012921 	.word	0x08012921
 8012948:	08012921 	.word	0x08012921
 801294c:	08012921 	.word	0x08012921
 8012950:	080129a5 	.word	0x080129a5
 8012954:	08012921 	.word	0x08012921
 8012958:	08012921 	.word	0x08012921
 801295c:	08012921 	.word	0x08012921
 8012960:	08012921 	.word	0x08012921
 8012964:	08012ab1 	.word	0x08012ab1
 8012968:	080129d5 	.word	0x080129d5
 801296c:	08012a93 	.word	0x08012a93
 8012970:	08012921 	.word	0x08012921
 8012974:	08012921 	.word	0x08012921
 8012978:	08012ad3 	.word	0x08012ad3
 801297c:	08012921 	.word	0x08012921
 8012980:	080129d5 	.word	0x080129d5
 8012984:	08012921 	.word	0x08012921
 8012988:	08012921 	.word	0x08012921
 801298c:	08012a9b 	.word	0x08012a9b
 8012990:	682b      	ldr	r3, [r5, #0]
 8012992:	1d1a      	adds	r2, r3, #4
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	602a      	str	r2, [r5, #0]
 8012998:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801299c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80129a0:	2301      	movs	r3, #1
 80129a2:	e0a3      	b.n	8012aec <_printf_i+0x1f4>
 80129a4:	6820      	ldr	r0, [r4, #0]
 80129a6:	6829      	ldr	r1, [r5, #0]
 80129a8:	0606      	lsls	r6, r0, #24
 80129aa:	f101 0304 	add.w	r3, r1, #4
 80129ae:	d50a      	bpl.n	80129c6 <_printf_i+0xce>
 80129b0:	680e      	ldr	r6, [r1, #0]
 80129b2:	602b      	str	r3, [r5, #0]
 80129b4:	2e00      	cmp	r6, #0
 80129b6:	da03      	bge.n	80129c0 <_printf_i+0xc8>
 80129b8:	232d      	movs	r3, #45	; 0x2d
 80129ba:	4276      	negs	r6, r6
 80129bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80129c0:	485e      	ldr	r0, [pc, #376]	; (8012b3c <_printf_i+0x244>)
 80129c2:	230a      	movs	r3, #10
 80129c4:	e019      	b.n	80129fa <_printf_i+0x102>
 80129c6:	680e      	ldr	r6, [r1, #0]
 80129c8:	602b      	str	r3, [r5, #0]
 80129ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80129ce:	bf18      	it	ne
 80129d0:	b236      	sxthne	r6, r6
 80129d2:	e7ef      	b.n	80129b4 <_printf_i+0xbc>
 80129d4:	682b      	ldr	r3, [r5, #0]
 80129d6:	6820      	ldr	r0, [r4, #0]
 80129d8:	1d19      	adds	r1, r3, #4
 80129da:	6029      	str	r1, [r5, #0]
 80129dc:	0601      	lsls	r1, r0, #24
 80129de:	d501      	bpl.n	80129e4 <_printf_i+0xec>
 80129e0:	681e      	ldr	r6, [r3, #0]
 80129e2:	e002      	b.n	80129ea <_printf_i+0xf2>
 80129e4:	0646      	lsls	r6, r0, #25
 80129e6:	d5fb      	bpl.n	80129e0 <_printf_i+0xe8>
 80129e8:	881e      	ldrh	r6, [r3, #0]
 80129ea:	4854      	ldr	r0, [pc, #336]	; (8012b3c <_printf_i+0x244>)
 80129ec:	2f6f      	cmp	r7, #111	; 0x6f
 80129ee:	bf0c      	ite	eq
 80129f0:	2308      	moveq	r3, #8
 80129f2:	230a      	movne	r3, #10
 80129f4:	2100      	movs	r1, #0
 80129f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80129fa:	6865      	ldr	r5, [r4, #4]
 80129fc:	60a5      	str	r5, [r4, #8]
 80129fe:	2d00      	cmp	r5, #0
 8012a00:	bfa2      	ittt	ge
 8012a02:	6821      	ldrge	r1, [r4, #0]
 8012a04:	f021 0104 	bicge.w	r1, r1, #4
 8012a08:	6021      	strge	r1, [r4, #0]
 8012a0a:	b90e      	cbnz	r6, 8012a10 <_printf_i+0x118>
 8012a0c:	2d00      	cmp	r5, #0
 8012a0e:	d04d      	beq.n	8012aac <_printf_i+0x1b4>
 8012a10:	4615      	mov	r5, r2
 8012a12:	fbb6 f1f3 	udiv	r1, r6, r3
 8012a16:	fb03 6711 	mls	r7, r3, r1, r6
 8012a1a:	5dc7      	ldrb	r7, [r0, r7]
 8012a1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012a20:	4637      	mov	r7, r6
 8012a22:	42bb      	cmp	r3, r7
 8012a24:	460e      	mov	r6, r1
 8012a26:	d9f4      	bls.n	8012a12 <_printf_i+0x11a>
 8012a28:	2b08      	cmp	r3, #8
 8012a2a:	d10b      	bne.n	8012a44 <_printf_i+0x14c>
 8012a2c:	6823      	ldr	r3, [r4, #0]
 8012a2e:	07de      	lsls	r6, r3, #31
 8012a30:	d508      	bpl.n	8012a44 <_printf_i+0x14c>
 8012a32:	6923      	ldr	r3, [r4, #16]
 8012a34:	6861      	ldr	r1, [r4, #4]
 8012a36:	4299      	cmp	r1, r3
 8012a38:	bfde      	ittt	le
 8012a3a:	2330      	movle	r3, #48	; 0x30
 8012a3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012a40:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8012a44:	1b52      	subs	r2, r2, r5
 8012a46:	6122      	str	r2, [r4, #16]
 8012a48:	f8cd a000 	str.w	sl, [sp]
 8012a4c:	464b      	mov	r3, r9
 8012a4e:	aa03      	add	r2, sp, #12
 8012a50:	4621      	mov	r1, r4
 8012a52:	4640      	mov	r0, r8
 8012a54:	f7ff fee2 	bl	801281c <_printf_common>
 8012a58:	3001      	adds	r0, #1
 8012a5a:	d14c      	bne.n	8012af6 <_printf_i+0x1fe>
 8012a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012a60:	b004      	add	sp, #16
 8012a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a66:	4835      	ldr	r0, [pc, #212]	; (8012b3c <_printf_i+0x244>)
 8012a68:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012a6c:	6829      	ldr	r1, [r5, #0]
 8012a6e:	6823      	ldr	r3, [r4, #0]
 8012a70:	f851 6b04 	ldr.w	r6, [r1], #4
 8012a74:	6029      	str	r1, [r5, #0]
 8012a76:	061d      	lsls	r5, r3, #24
 8012a78:	d514      	bpl.n	8012aa4 <_printf_i+0x1ac>
 8012a7a:	07df      	lsls	r7, r3, #31
 8012a7c:	bf44      	itt	mi
 8012a7e:	f043 0320 	orrmi.w	r3, r3, #32
 8012a82:	6023      	strmi	r3, [r4, #0]
 8012a84:	b91e      	cbnz	r6, 8012a8e <_printf_i+0x196>
 8012a86:	6823      	ldr	r3, [r4, #0]
 8012a88:	f023 0320 	bic.w	r3, r3, #32
 8012a8c:	6023      	str	r3, [r4, #0]
 8012a8e:	2310      	movs	r3, #16
 8012a90:	e7b0      	b.n	80129f4 <_printf_i+0xfc>
 8012a92:	6823      	ldr	r3, [r4, #0]
 8012a94:	f043 0320 	orr.w	r3, r3, #32
 8012a98:	6023      	str	r3, [r4, #0]
 8012a9a:	2378      	movs	r3, #120	; 0x78
 8012a9c:	4828      	ldr	r0, [pc, #160]	; (8012b40 <_printf_i+0x248>)
 8012a9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012aa2:	e7e3      	b.n	8012a6c <_printf_i+0x174>
 8012aa4:	0659      	lsls	r1, r3, #25
 8012aa6:	bf48      	it	mi
 8012aa8:	b2b6      	uxthmi	r6, r6
 8012aaa:	e7e6      	b.n	8012a7a <_printf_i+0x182>
 8012aac:	4615      	mov	r5, r2
 8012aae:	e7bb      	b.n	8012a28 <_printf_i+0x130>
 8012ab0:	682b      	ldr	r3, [r5, #0]
 8012ab2:	6826      	ldr	r6, [r4, #0]
 8012ab4:	6961      	ldr	r1, [r4, #20]
 8012ab6:	1d18      	adds	r0, r3, #4
 8012ab8:	6028      	str	r0, [r5, #0]
 8012aba:	0635      	lsls	r5, r6, #24
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	d501      	bpl.n	8012ac4 <_printf_i+0x1cc>
 8012ac0:	6019      	str	r1, [r3, #0]
 8012ac2:	e002      	b.n	8012aca <_printf_i+0x1d2>
 8012ac4:	0670      	lsls	r0, r6, #25
 8012ac6:	d5fb      	bpl.n	8012ac0 <_printf_i+0x1c8>
 8012ac8:	8019      	strh	r1, [r3, #0]
 8012aca:	2300      	movs	r3, #0
 8012acc:	6123      	str	r3, [r4, #16]
 8012ace:	4615      	mov	r5, r2
 8012ad0:	e7ba      	b.n	8012a48 <_printf_i+0x150>
 8012ad2:	682b      	ldr	r3, [r5, #0]
 8012ad4:	1d1a      	adds	r2, r3, #4
 8012ad6:	602a      	str	r2, [r5, #0]
 8012ad8:	681d      	ldr	r5, [r3, #0]
 8012ada:	6862      	ldr	r2, [r4, #4]
 8012adc:	2100      	movs	r1, #0
 8012ade:	4628      	mov	r0, r5
 8012ae0:	f7ed fb7e 	bl	80001e0 <memchr>
 8012ae4:	b108      	cbz	r0, 8012aea <_printf_i+0x1f2>
 8012ae6:	1b40      	subs	r0, r0, r5
 8012ae8:	6060      	str	r0, [r4, #4]
 8012aea:	6863      	ldr	r3, [r4, #4]
 8012aec:	6123      	str	r3, [r4, #16]
 8012aee:	2300      	movs	r3, #0
 8012af0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012af4:	e7a8      	b.n	8012a48 <_printf_i+0x150>
 8012af6:	6923      	ldr	r3, [r4, #16]
 8012af8:	462a      	mov	r2, r5
 8012afa:	4649      	mov	r1, r9
 8012afc:	4640      	mov	r0, r8
 8012afe:	47d0      	blx	sl
 8012b00:	3001      	adds	r0, #1
 8012b02:	d0ab      	beq.n	8012a5c <_printf_i+0x164>
 8012b04:	6823      	ldr	r3, [r4, #0]
 8012b06:	079b      	lsls	r3, r3, #30
 8012b08:	d413      	bmi.n	8012b32 <_printf_i+0x23a>
 8012b0a:	68e0      	ldr	r0, [r4, #12]
 8012b0c:	9b03      	ldr	r3, [sp, #12]
 8012b0e:	4298      	cmp	r0, r3
 8012b10:	bfb8      	it	lt
 8012b12:	4618      	movlt	r0, r3
 8012b14:	e7a4      	b.n	8012a60 <_printf_i+0x168>
 8012b16:	2301      	movs	r3, #1
 8012b18:	4632      	mov	r2, r6
 8012b1a:	4649      	mov	r1, r9
 8012b1c:	4640      	mov	r0, r8
 8012b1e:	47d0      	blx	sl
 8012b20:	3001      	adds	r0, #1
 8012b22:	d09b      	beq.n	8012a5c <_printf_i+0x164>
 8012b24:	3501      	adds	r5, #1
 8012b26:	68e3      	ldr	r3, [r4, #12]
 8012b28:	9903      	ldr	r1, [sp, #12]
 8012b2a:	1a5b      	subs	r3, r3, r1
 8012b2c:	42ab      	cmp	r3, r5
 8012b2e:	dcf2      	bgt.n	8012b16 <_printf_i+0x21e>
 8012b30:	e7eb      	b.n	8012b0a <_printf_i+0x212>
 8012b32:	2500      	movs	r5, #0
 8012b34:	f104 0619 	add.w	r6, r4, #25
 8012b38:	e7f5      	b.n	8012b26 <_printf_i+0x22e>
 8012b3a:	bf00      	nop
 8012b3c:	080183be 	.word	0x080183be
 8012b40:	080183cf 	.word	0x080183cf

08012b44 <siprintf>:
 8012b44:	b40e      	push	{r1, r2, r3}
 8012b46:	b500      	push	{lr}
 8012b48:	b09c      	sub	sp, #112	; 0x70
 8012b4a:	ab1d      	add	r3, sp, #116	; 0x74
 8012b4c:	9002      	str	r0, [sp, #8]
 8012b4e:	9006      	str	r0, [sp, #24]
 8012b50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012b54:	4809      	ldr	r0, [pc, #36]	; (8012b7c <siprintf+0x38>)
 8012b56:	9107      	str	r1, [sp, #28]
 8012b58:	9104      	str	r1, [sp, #16]
 8012b5a:	4909      	ldr	r1, [pc, #36]	; (8012b80 <siprintf+0x3c>)
 8012b5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012b60:	9105      	str	r1, [sp, #20]
 8012b62:	6800      	ldr	r0, [r0, #0]
 8012b64:	9301      	str	r3, [sp, #4]
 8012b66:	a902      	add	r1, sp, #8
 8012b68:	f002 ff7a 	bl	8015a60 <_svfiprintf_r>
 8012b6c:	9b02      	ldr	r3, [sp, #8]
 8012b6e:	2200      	movs	r2, #0
 8012b70:	701a      	strb	r2, [r3, #0]
 8012b72:	b01c      	add	sp, #112	; 0x70
 8012b74:	f85d eb04 	ldr.w	lr, [sp], #4
 8012b78:	b003      	add	sp, #12
 8012b7a:	4770      	bx	lr
 8012b7c:	20000258 	.word	0x20000258
 8012b80:	ffff0208 	.word	0xffff0208

08012b84 <strcat>:
 8012b84:	b510      	push	{r4, lr}
 8012b86:	4602      	mov	r2, r0
 8012b88:	7814      	ldrb	r4, [r2, #0]
 8012b8a:	4613      	mov	r3, r2
 8012b8c:	3201      	adds	r2, #1
 8012b8e:	2c00      	cmp	r4, #0
 8012b90:	d1fa      	bne.n	8012b88 <strcat+0x4>
 8012b92:	3b01      	subs	r3, #1
 8012b94:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012b98:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012b9c:	2a00      	cmp	r2, #0
 8012b9e:	d1f9      	bne.n	8012b94 <strcat+0x10>
 8012ba0:	bd10      	pop	{r4, pc}

08012ba2 <strchr>:
 8012ba2:	b2c9      	uxtb	r1, r1
 8012ba4:	4603      	mov	r3, r0
 8012ba6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012baa:	b11a      	cbz	r2, 8012bb4 <strchr+0x12>
 8012bac:	428a      	cmp	r2, r1
 8012bae:	d1f9      	bne.n	8012ba4 <strchr+0x2>
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	4770      	bx	lr
 8012bb4:	2900      	cmp	r1, #0
 8012bb6:	bf18      	it	ne
 8012bb8:	2300      	movne	r3, #0
 8012bba:	e7f9      	b.n	8012bb0 <strchr+0xe>

08012bbc <strncmp>:
 8012bbc:	b510      	push	{r4, lr}
 8012bbe:	b17a      	cbz	r2, 8012be0 <strncmp+0x24>
 8012bc0:	4603      	mov	r3, r0
 8012bc2:	3901      	subs	r1, #1
 8012bc4:	1884      	adds	r4, r0, r2
 8012bc6:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012bca:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012bce:	4290      	cmp	r0, r2
 8012bd0:	d101      	bne.n	8012bd6 <strncmp+0x1a>
 8012bd2:	42a3      	cmp	r3, r4
 8012bd4:	d101      	bne.n	8012bda <strncmp+0x1e>
 8012bd6:	1a80      	subs	r0, r0, r2
 8012bd8:	bd10      	pop	{r4, pc}
 8012bda:	2800      	cmp	r0, #0
 8012bdc:	d1f3      	bne.n	8012bc6 <strncmp+0xa>
 8012bde:	e7fa      	b.n	8012bd6 <strncmp+0x1a>
 8012be0:	4610      	mov	r0, r2
 8012be2:	e7f9      	b.n	8012bd8 <strncmp+0x1c>

08012be4 <strncpy>:
 8012be4:	b510      	push	{r4, lr}
 8012be6:	3901      	subs	r1, #1
 8012be8:	4603      	mov	r3, r0
 8012bea:	b132      	cbz	r2, 8012bfa <strncpy+0x16>
 8012bec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012bf0:	f803 4b01 	strb.w	r4, [r3], #1
 8012bf4:	3a01      	subs	r2, #1
 8012bf6:	2c00      	cmp	r4, #0
 8012bf8:	d1f7      	bne.n	8012bea <strncpy+0x6>
 8012bfa:	441a      	add	r2, r3
 8012bfc:	2100      	movs	r1, #0
 8012bfe:	4293      	cmp	r3, r2
 8012c00:	d100      	bne.n	8012c04 <strncpy+0x20>
 8012c02:	bd10      	pop	{r4, pc}
 8012c04:	f803 1b01 	strb.w	r1, [r3], #1
 8012c08:	e7f9      	b.n	8012bfe <strncpy+0x1a>

08012c0a <strstr>:
 8012c0a:	780a      	ldrb	r2, [r1, #0]
 8012c0c:	b570      	push	{r4, r5, r6, lr}
 8012c0e:	b96a      	cbnz	r2, 8012c2c <strstr+0x22>
 8012c10:	bd70      	pop	{r4, r5, r6, pc}
 8012c12:	429a      	cmp	r2, r3
 8012c14:	d109      	bne.n	8012c2a <strstr+0x20>
 8012c16:	460c      	mov	r4, r1
 8012c18:	4605      	mov	r5, r0
 8012c1a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d0f6      	beq.n	8012c10 <strstr+0x6>
 8012c22:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8012c26:	429e      	cmp	r6, r3
 8012c28:	d0f7      	beq.n	8012c1a <strstr+0x10>
 8012c2a:	3001      	adds	r0, #1
 8012c2c:	7803      	ldrb	r3, [r0, #0]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d1ef      	bne.n	8012c12 <strstr+0x8>
 8012c32:	4618      	mov	r0, r3
 8012c34:	e7ec      	b.n	8012c10 <strstr+0x6>

08012c36 <sulp>:
 8012c36:	b570      	push	{r4, r5, r6, lr}
 8012c38:	4604      	mov	r4, r0
 8012c3a:	460d      	mov	r5, r1
 8012c3c:	ec45 4b10 	vmov	d0, r4, r5
 8012c40:	4616      	mov	r6, r2
 8012c42:	f002 fc6b 	bl	801551c <__ulp>
 8012c46:	ec51 0b10 	vmov	r0, r1, d0
 8012c4a:	b17e      	cbz	r6, 8012c6c <sulp+0x36>
 8012c4c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012c50:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	dd09      	ble.n	8012c6c <sulp+0x36>
 8012c58:	051b      	lsls	r3, r3, #20
 8012c5a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8012c5e:	2400      	movs	r4, #0
 8012c60:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8012c64:	4622      	mov	r2, r4
 8012c66:	462b      	mov	r3, r5
 8012c68:	f7ed fcc6 	bl	80005f8 <__aeabi_dmul>
 8012c6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08012c70 <_strtod_l>:
 8012c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c74:	ed2d 8b02 	vpush	{d8}
 8012c78:	b09d      	sub	sp, #116	; 0x74
 8012c7a:	461f      	mov	r7, r3
 8012c7c:	2300      	movs	r3, #0
 8012c7e:	9318      	str	r3, [sp, #96]	; 0x60
 8012c80:	4ba2      	ldr	r3, [pc, #648]	; (8012f0c <_strtod_l+0x29c>)
 8012c82:	9213      	str	r2, [sp, #76]	; 0x4c
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	9305      	str	r3, [sp, #20]
 8012c88:	4604      	mov	r4, r0
 8012c8a:	4618      	mov	r0, r3
 8012c8c:	4688      	mov	r8, r1
 8012c8e:	f7ed fa9f 	bl	80001d0 <strlen>
 8012c92:	f04f 0a00 	mov.w	sl, #0
 8012c96:	4605      	mov	r5, r0
 8012c98:	f04f 0b00 	mov.w	fp, #0
 8012c9c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8012ca0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012ca2:	781a      	ldrb	r2, [r3, #0]
 8012ca4:	2a2b      	cmp	r2, #43	; 0x2b
 8012ca6:	d04e      	beq.n	8012d46 <_strtod_l+0xd6>
 8012ca8:	d83b      	bhi.n	8012d22 <_strtod_l+0xb2>
 8012caa:	2a0d      	cmp	r2, #13
 8012cac:	d834      	bhi.n	8012d18 <_strtod_l+0xa8>
 8012cae:	2a08      	cmp	r2, #8
 8012cb0:	d834      	bhi.n	8012d1c <_strtod_l+0xac>
 8012cb2:	2a00      	cmp	r2, #0
 8012cb4:	d03e      	beq.n	8012d34 <_strtod_l+0xc4>
 8012cb6:	2300      	movs	r3, #0
 8012cb8:	930a      	str	r3, [sp, #40]	; 0x28
 8012cba:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8012cbc:	7833      	ldrb	r3, [r6, #0]
 8012cbe:	2b30      	cmp	r3, #48	; 0x30
 8012cc0:	f040 80b0 	bne.w	8012e24 <_strtod_l+0x1b4>
 8012cc4:	7873      	ldrb	r3, [r6, #1]
 8012cc6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012cca:	2b58      	cmp	r3, #88	; 0x58
 8012ccc:	d168      	bne.n	8012da0 <_strtod_l+0x130>
 8012cce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012cd0:	9301      	str	r3, [sp, #4]
 8012cd2:	ab18      	add	r3, sp, #96	; 0x60
 8012cd4:	9702      	str	r7, [sp, #8]
 8012cd6:	9300      	str	r3, [sp, #0]
 8012cd8:	4a8d      	ldr	r2, [pc, #564]	; (8012f10 <_strtod_l+0x2a0>)
 8012cda:	ab19      	add	r3, sp, #100	; 0x64
 8012cdc:	a917      	add	r1, sp, #92	; 0x5c
 8012cde:	4620      	mov	r0, r4
 8012ce0:	f001 fd80 	bl	80147e4 <__gethex>
 8012ce4:	f010 0707 	ands.w	r7, r0, #7
 8012ce8:	4605      	mov	r5, r0
 8012cea:	d005      	beq.n	8012cf8 <_strtod_l+0x88>
 8012cec:	2f06      	cmp	r7, #6
 8012cee:	d12c      	bne.n	8012d4a <_strtod_l+0xda>
 8012cf0:	3601      	adds	r6, #1
 8012cf2:	2300      	movs	r3, #0
 8012cf4:	9617      	str	r6, [sp, #92]	; 0x5c
 8012cf6:	930a      	str	r3, [sp, #40]	; 0x28
 8012cf8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	f040 8590 	bne.w	8013820 <_strtod_l+0xbb0>
 8012d00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d02:	b1eb      	cbz	r3, 8012d40 <_strtod_l+0xd0>
 8012d04:	4652      	mov	r2, sl
 8012d06:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8012d0a:	ec43 2b10 	vmov	d0, r2, r3
 8012d0e:	b01d      	add	sp, #116	; 0x74
 8012d10:	ecbd 8b02 	vpop	{d8}
 8012d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d18:	2a20      	cmp	r2, #32
 8012d1a:	d1cc      	bne.n	8012cb6 <_strtod_l+0x46>
 8012d1c:	3301      	adds	r3, #1
 8012d1e:	9317      	str	r3, [sp, #92]	; 0x5c
 8012d20:	e7be      	b.n	8012ca0 <_strtod_l+0x30>
 8012d22:	2a2d      	cmp	r2, #45	; 0x2d
 8012d24:	d1c7      	bne.n	8012cb6 <_strtod_l+0x46>
 8012d26:	2201      	movs	r2, #1
 8012d28:	920a      	str	r2, [sp, #40]	; 0x28
 8012d2a:	1c5a      	adds	r2, r3, #1
 8012d2c:	9217      	str	r2, [sp, #92]	; 0x5c
 8012d2e:	785b      	ldrb	r3, [r3, #1]
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d1c2      	bne.n	8012cba <_strtod_l+0x4a>
 8012d34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012d36:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	f040 856e 	bne.w	801381c <_strtod_l+0xbac>
 8012d40:	4652      	mov	r2, sl
 8012d42:	465b      	mov	r3, fp
 8012d44:	e7e1      	b.n	8012d0a <_strtod_l+0x9a>
 8012d46:	2200      	movs	r2, #0
 8012d48:	e7ee      	b.n	8012d28 <_strtod_l+0xb8>
 8012d4a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012d4c:	b13a      	cbz	r2, 8012d5e <_strtod_l+0xee>
 8012d4e:	2135      	movs	r1, #53	; 0x35
 8012d50:	a81a      	add	r0, sp, #104	; 0x68
 8012d52:	f002 fcee 	bl	8015732 <__copybits>
 8012d56:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012d58:	4620      	mov	r0, r4
 8012d5a:	f002 f8ad 	bl	8014eb8 <_Bfree>
 8012d5e:	3f01      	subs	r7, #1
 8012d60:	2f04      	cmp	r7, #4
 8012d62:	d806      	bhi.n	8012d72 <_strtod_l+0x102>
 8012d64:	e8df f007 	tbb	[pc, r7]
 8012d68:	1714030a 	.word	0x1714030a
 8012d6c:	0a          	.byte	0x0a
 8012d6d:	00          	.byte	0x00
 8012d6e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8012d72:	0728      	lsls	r0, r5, #28
 8012d74:	d5c0      	bpl.n	8012cf8 <_strtod_l+0x88>
 8012d76:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8012d7a:	e7bd      	b.n	8012cf8 <_strtod_l+0x88>
 8012d7c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8012d80:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8012d82:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012d86:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012d8a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8012d8e:	e7f0      	b.n	8012d72 <_strtod_l+0x102>
 8012d90:	f8df b180 	ldr.w	fp, [pc, #384]	; 8012f14 <_strtod_l+0x2a4>
 8012d94:	e7ed      	b.n	8012d72 <_strtod_l+0x102>
 8012d96:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8012d9a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8012d9e:	e7e8      	b.n	8012d72 <_strtod_l+0x102>
 8012da0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012da2:	1c5a      	adds	r2, r3, #1
 8012da4:	9217      	str	r2, [sp, #92]	; 0x5c
 8012da6:	785b      	ldrb	r3, [r3, #1]
 8012da8:	2b30      	cmp	r3, #48	; 0x30
 8012daa:	d0f9      	beq.n	8012da0 <_strtod_l+0x130>
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d0a3      	beq.n	8012cf8 <_strtod_l+0x88>
 8012db0:	2301      	movs	r3, #1
 8012db2:	f04f 0900 	mov.w	r9, #0
 8012db6:	9304      	str	r3, [sp, #16]
 8012db8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012dba:	9308      	str	r3, [sp, #32]
 8012dbc:	f8cd 901c 	str.w	r9, [sp, #28]
 8012dc0:	464f      	mov	r7, r9
 8012dc2:	220a      	movs	r2, #10
 8012dc4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8012dc6:	7806      	ldrb	r6, [r0, #0]
 8012dc8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8012dcc:	b2d9      	uxtb	r1, r3
 8012dce:	2909      	cmp	r1, #9
 8012dd0:	d92a      	bls.n	8012e28 <_strtod_l+0x1b8>
 8012dd2:	9905      	ldr	r1, [sp, #20]
 8012dd4:	462a      	mov	r2, r5
 8012dd6:	f7ff fef1 	bl	8012bbc <strncmp>
 8012dda:	b398      	cbz	r0, 8012e44 <_strtod_l+0x1d4>
 8012ddc:	2000      	movs	r0, #0
 8012dde:	4632      	mov	r2, r6
 8012de0:	463d      	mov	r5, r7
 8012de2:	9005      	str	r0, [sp, #20]
 8012de4:	4603      	mov	r3, r0
 8012de6:	2a65      	cmp	r2, #101	; 0x65
 8012de8:	d001      	beq.n	8012dee <_strtod_l+0x17e>
 8012dea:	2a45      	cmp	r2, #69	; 0x45
 8012dec:	d118      	bne.n	8012e20 <_strtod_l+0x1b0>
 8012dee:	b91d      	cbnz	r5, 8012df8 <_strtod_l+0x188>
 8012df0:	9a04      	ldr	r2, [sp, #16]
 8012df2:	4302      	orrs	r2, r0
 8012df4:	d09e      	beq.n	8012d34 <_strtod_l+0xc4>
 8012df6:	2500      	movs	r5, #0
 8012df8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8012dfc:	f108 0201 	add.w	r2, r8, #1
 8012e00:	9217      	str	r2, [sp, #92]	; 0x5c
 8012e02:	f898 2001 	ldrb.w	r2, [r8, #1]
 8012e06:	2a2b      	cmp	r2, #43	; 0x2b
 8012e08:	d075      	beq.n	8012ef6 <_strtod_l+0x286>
 8012e0a:	2a2d      	cmp	r2, #45	; 0x2d
 8012e0c:	d07b      	beq.n	8012f06 <_strtod_l+0x296>
 8012e0e:	f04f 0c00 	mov.w	ip, #0
 8012e12:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8012e16:	2909      	cmp	r1, #9
 8012e18:	f240 8082 	bls.w	8012f20 <_strtod_l+0x2b0>
 8012e1c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8012e20:	2600      	movs	r6, #0
 8012e22:	e09d      	b.n	8012f60 <_strtod_l+0x2f0>
 8012e24:	2300      	movs	r3, #0
 8012e26:	e7c4      	b.n	8012db2 <_strtod_l+0x142>
 8012e28:	2f08      	cmp	r7, #8
 8012e2a:	bfd8      	it	le
 8012e2c:	9907      	ldrle	r1, [sp, #28]
 8012e2e:	f100 0001 	add.w	r0, r0, #1
 8012e32:	bfda      	itte	le
 8012e34:	fb02 3301 	mlale	r3, r2, r1, r3
 8012e38:	9307      	strle	r3, [sp, #28]
 8012e3a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8012e3e:	3701      	adds	r7, #1
 8012e40:	9017      	str	r0, [sp, #92]	; 0x5c
 8012e42:	e7bf      	b.n	8012dc4 <_strtod_l+0x154>
 8012e44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012e46:	195a      	adds	r2, r3, r5
 8012e48:	9217      	str	r2, [sp, #92]	; 0x5c
 8012e4a:	5d5a      	ldrb	r2, [r3, r5]
 8012e4c:	2f00      	cmp	r7, #0
 8012e4e:	d037      	beq.n	8012ec0 <_strtod_l+0x250>
 8012e50:	9005      	str	r0, [sp, #20]
 8012e52:	463d      	mov	r5, r7
 8012e54:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8012e58:	2b09      	cmp	r3, #9
 8012e5a:	d912      	bls.n	8012e82 <_strtod_l+0x212>
 8012e5c:	2301      	movs	r3, #1
 8012e5e:	e7c2      	b.n	8012de6 <_strtod_l+0x176>
 8012e60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012e62:	1c5a      	adds	r2, r3, #1
 8012e64:	9217      	str	r2, [sp, #92]	; 0x5c
 8012e66:	785a      	ldrb	r2, [r3, #1]
 8012e68:	3001      	adds	r0, #1
 8012e6a:	2a30      	cmp	r2, #48	; 0x30
 8012e6c:	d0f8      	beq.n	8012e60 <_strtod_l+0x1f0>
 8012e6e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8012e72:	2b08      	cmp	r3, #8
 8012e74:	f200 84d9 	bhi.w	801382a <_strtod_l+0xbba>
 8012e78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012e7a:	9005      	str	r0, [sp, #20]
 8012e7c:	2000      	movs	r0, #0
 8012e7e:	9308      	str	r3, [sp, #32]
 8012e80:	4605      	mov	r5, r0
 8012e82:	3a30      	subs	r2, #48	; 0x30
 8012e84:	f100 0301 	add.w	r3, r0, #1
 8012e88:	d014      	beq.n	8012eb4 <_strtod_l+0x244>
 8012e8a:	9905      	ldr	r1, [sp, #20]
 8012e8c:	4419      	add	r1, r3
 8012e8e:	9105      	str	r1, [sp, #20]
 8012e90:	462b      	mov	r3, r5
 8012e92:	eb00 0e05 	add.w	lr, r0, r5
 8012e96:	210a      	movs	r1, #10
 8012e98:	4573      	cmp	r3, lr
 8012e9a:	d113      	bne.n	8012ec4 <_strtod_l+0x254>
 8012e9c:	182b      	adds	r3, r5, r0
 8012e9e:	2b08      	cmp	r3, #8
 8012ea0:	f105 0501 	add.w	r5, r5, #1
 8012ea4:	4405      	add	r5, r0
 8012ea6:	dc1c      	bgt.n	8012ee2 <_strtod_l+0x272>
 8012ea8:	9907      	ldr	r1, [sp, #28]
 8012eaa:	230a      	movs	r3, #10
 8012eac:	fb03 2301 	mla	r3, r3, r1, r2
 8012eb0:	9307      	str	r3, [sp, #28]
 8012eb2:	2300      	movs	r3, #0
 8012eb4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012eb6:	1c51      	adds	r1, r2, #1
 8012eb8:	9117      	str	r1, [sp, #92]	; 0x5c
 8012eba:	7852      	ldrb	r2, [r2, #1]
 8012ebc:	4618      	mov	r0, r3
 8012ebe:	e7c9      	b.n	8012e54 <_strtod_l+0x1e4>
 8012ec0:	4638      	mov	r0, r7
 8012ec2:	e7d2      	b.n	8012e6a <_strtod_l+0x1fa>
 8012ec4:	2b08      	cmp	r3, #8
 8012ec6:	dc04      	bgt.n	8012ed2 <_strtod_l+0x262>
 8012ec8:	9e07      	ldr	r6, [sp, #28]
 8012eca:	434e      	muls	r6, r1
 8012ecc:	9607      	str	r6, [sp, #28]
 8012ece:	3301      	adds	r3, #1
 8012ed0:	e7e2      	b.n	8012e98 <_strtod_l+0x228>
 8012ed2:	f103 0c01 	add.w	ip, r3, #1
 8012ed6:	f1bc 0f10 	cmp.w	ip, #16
 8012eda:	bfd8      	it	le
 8012edc:	fb01 f909 	mulle.w	r9, r1, r9
 8012ee0:	e7f5      	b.n	8012ece <_strtod_l+0x25e>
 8012ee2:	2d10      	cmp	r5, #16
 8012ee4:	bfdc      	itt	le
 8012ee6:	230a      	movle	r3, #10
 8012ee8:	fb03 2909 	mlale	r9, r3, r9, r2
 8012eec:	e7e1      	b.n	8012eb2 <_strtod_l+0x242>
 8012eee:	2300      	movs	r3, #0
 8012ef0:	9305      	str	r3, [sp, #20]
 8012ef2:	2301      	movs	r3, #1
 8012ef4:	e77c      	b.n	8012df0 <_strtod_l+0x180>
 8012ef6:	f04f 0c00 	mov.w	ip, #0
 8012efa:	f108 0202 	add.w	r2, r8, #2
 8012efe:	9217      	str	r2, [sp, #92]	; 0x5c
 8012f00:	f898 2002 	ldrb.w	r2, [r8, #2]
 8012f04:	e785      	b.n	8012e12 <_strtod_l+0x1a2>
 8012f06:	f04f 0c01 	mov.w	ip, #1
 8012f0a:	e7f6      	b.n	8012efa <_strtod_l+0x28a>
 8012f0c:	08018528 	.word	0x08018528
 8012f10:	080183e0 	.word	0x080183e0
 8012f14:	7ff00000 	.word	0x7ff00000
 8012f18:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012f1a:	1c51      	adds	r1, r2, #1
 8012f1c:	9117      	str	r1, [sp, #92]	; 0x5c
 8012f1e:	7852      	ldrb	r2, [r2, #1]
 8012f20:	2a30      	cmp	r2, #48	; 0x30
 8012f22:	d0f9      	beq.n	8012f18 <_strtod_l+0x2a8>
 8012f24:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8012f28:	2908      	cmp	r1, #8
 8012f2a:	f63f af79 	bhi.w	8012e20 <_strtod_l+0x1b0>
 8012f2e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8012f32:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012f34:	9206      	str	r2, [sp, #24]
 8012f36:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012f38:	1c51      	adds	r1, r2, #1
 8012f3a:	9117      	str	r1, [sp, #92]	; 0x5c
 8012f3c:	7852      	ldrb	r2, [r2, #1]
 8012f3e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8012f42:	2e09      	cmp	r6, #9
 8012f44:	d937      	bls.n	8012fb6 <_strtod_l+0x346>
 8012f46:	9e06      	ldr	r6, [sp, #24]
 8012f48:	1b89      	subs	r1, r1, r6
 8012f4a:	2908      	cmp	r1, #8
 8012f4c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8012f50:	dc02      	bgt.n	8012f58 <_strtod_l+0x2e8>
 8012f52:	4576      	cmp	r6, lr
 8012f54:	bfa8      	it	ge
 8012f56:	4676      	movge	r6, lr
 8012f58:	f1bc 0f00 	cmp.w	ip, #0
 8012f5c:	d000      	beq.n	8012f60 <_strtod_l+0x2f0>
 8012f5e:	4276      	negs	r6, r6
 8012f60:	2d00      	cmp	r5, #0
 8012f62:	d14d      	bne.n	8013000 <_strtod_l+0x390>
 8012f64:	9904      	ldr	r1, [sp, #16]
 8012f66:	4301      	orrs	r1, r0
 8012f68:	f47f aec6 	bne.w	8012cf8 <_strtod_l+0x88>
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	f47f aee1 	bne.w	8012d34 <_strtod_l+0xc4>
 8012f72:	2a69      	cmp	r2, #105	; 0x69
 8012f74:	d027      	beq.n	8012fc6 <_strtod_l+0x356>
 8012f76:	dc24      	bgt.n	8012fc2 <_strtod_l+0x352>
 8012f78:	2a49      	cmp	r2, #73	; 0x49
 8012f7a:	d024      	beq.n	8012fc6 <_strtod_l+0x356>
 8012f7c:	2a4e      	cmp	r2, #78	; 0x4e
 8012f7e:	f47f aed9 	bne.w	8012d34 <_strtod_l+0xc4>
 8012f82:	499f      	ldr	r1, [pc, #636]	; (8013200 <_strtod_l+0x590>)
 8012f84:	a817      	add	r0, sp, #92	; 0x5c
 8012f86:	f001 fe85 	bl	8014c94 <__match>
 8012f8a:	2800      	cmp	r0, #0
 8012f8c:	f43f aed2 	beq.w	8012d34 <_strtod_l+0xc4>
 8012f90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012f92:	781b      	ldrb	r3, [r3, #0]
 8012f94:	2b28      	cmp	r3, #40	; 0x28
 8012f96:	d12d      	bne.n	8012ff4 <_strtod_l+0x384>
 8012f98:	499a      	ldr	r1, [pc, #616]	; (8013204 <_strtod_l+0x594>)
 8012f9a:	aa1a      	add	r2, sp, #104	; 0x68
 8012f9c:	a817      	add	r0, sp, #92	; 0x5c
 8012f9e:	f001 fe8d 	bl	8014cbc <__hexnan>
 8012fa2:	2805      	cmp	r0, #5
 8012fa4:	d126      	bne.n	8012ff4 <_strtod_l+0x384>
 8012fa6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012fa8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8012fac:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8012fb0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8012fb4:	e6a0      	b.n	8012cf8 <_strtod_l+0x88>
 8012fb6:	210a      	movs	r1, #10
 8012fb8:	fb01 2e0e 	mla	lr, r1, lr, r2
 8012fbc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8012fc0:	e7b9      	b.n	8012f36 <_strtod_l+0x2c6>
 8012fc2:	2a6e      	cmp	r2, #110	; 0x6e
 8012fc4:	e7db      	b.n	8012f7e <_strtod_l+0x30e>
 8012fc6:	4990      	ldr	r1, [pc, #576]	; (8013208 <_strtod_l+0x598>)
 8012fc8:	a817      	add	r0, sp, #92	; 0x5c
 8012fca:	f001 fe63 	bl	8014c94 <__match>
 8012fce:	2800      	cmp	r0, #0
 8012fd0:	f43f aeb0 	beq.w	8012d34 <_strtod_l+0xc4>
 8012fd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012fd6:	498d      	ldr	r1, [pc, #564]	; (801320c <_strtod_l+0x59c>)
 8012fd8:	3b01      	subs	r3, #1
 8012fda:	a817      	add	r0, sp, #92	; 0x5c
 8012fdc:	9317      	str	r3, [sp, #92]	; 0x5c
 8012fde:	f001 fe59 	bl	8014c94 <__match>
 8012fe2:	b910      	cbnz	r0, 8012fea <_strtod_l+0x37a>
 8012fe4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012fe6:	3301      	adds	r3, #1
 8012fe8:	9317      	str	r3, [sp, #92]	; 0x5c
 8012fea:	f8df b230 	ldr.w	fp, [pc, #560]	; 801321c <_strtod_l+0x5ac>
 8012fee:	f04f 0a00 	mov.w	sl, #0
 8012ff2:	e681      	b.n	8012cf8 <_strtod_l+0x88>
 8012ff4:	4886      	ldr	r0, [pc, #536]	; (8013210 <_strtod_l+0x5a0>)
 8012ff6:	f002 fe33 	bl	8015c60 <nan>
 8012ffa:	ec5b ab10 	vmov	sl, fp, d0
 8012ffe:	e67b      	b.n	8012cf8 <_strtod_l+0x88>
 8013000:	9b05      	ldr	r3, [sp, #20]
 8013002:	9807      	ldr	r0, [sp, #28]
 8013004:	1af3      	subs	r3, r6, r3
 8013006:	2f00      	cmp	r7, #0
 8013008:	bf08      	it	eq
 801300a:	462f      	moveq	r7, r5
 801300c:	2d10      	cmp	r5, #16
 801300e:	9306      	str	r3, [sp, #24]
 8013010:	46a8      	mov	r8, r5
 8013012:	bfa8      	it	ge
 8013014:	f04f 0810 	movge.w	r8, #16
 8013018:	f7ed fa74 	bl	8000504 <__aeabi_ui2d>
 801301c:	2d09      	cmp	r5, #9
 801301e:	4682      	mov	sl, r0
 8013020:	468b      	mov	fp, r1
 8013022:	dd13      	ble.n	801304c <_strtod_l+0x3dc>
 8013024:	4b7b      	ldr	r3, [pc, #492]	; (8013214 <_strtod_l+0x5a4>)
 8013026:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801302a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801302e:	f7ed fae3 	bl	80005f8 <__aeabi_dmul>
 8013032:	4682      	mov	sl, r0
 8013034:	4648      	mov	r0, r9
 8013036:	468b      	mov	fp, r1
 8013038:	f7ed fa64 	bl	8000504 <__aeabi_ui2d>
 801303c:	4602      	mov	r2, r0
 801303e:	460b      	mov	r3, r1
 8013040:	4650      	mov	r0, sl
 8013042:	4659      	mov	r1, fp
 8013044:	f7ed f922 	bl	800028c <__adddf3>
 8013048:	4682      	mov	sl, r0
 801304a:	468b      	mov	fp, r1
 801304c:	2d0f      	cmp	r5, #15
 801304e:	dc38      	bgt.n	80130c2 <_strtod_l+0x452>
 8013050:	9b06      	ldr	r3, [sp, #24]
 8013052:	2b00      	cmp	r3, #0
 8013054:	f43f ae50 	beq.w	8012cf8 <_strtod_l+0x88>
 8013058:	dd24      	ble.n	80130a4 <_strtod_l+0x434>
 801305a:	2b16      	cmp	r3, #22
 801305c:	dc0b      	bgt.n	8013076 <_strtod_l+0x406>
 801305e:	496d      	ldr	r1, [pc, #436]	; (8013214 <_strtod_l+0x5a4>)
 8013060:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013064:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013068:	4652      	mov	r2, sl
 801306a:	465b      	mov	r3, fp
 801306c:	f7ed fac4 	bl	80005f8 <__aeabi_dmul>
 8013070:	4682      	mov	sl, r0
 8013072:	468b      	mov	fp, r1
 8013074:	e640      	b.n	8012cf8 <_strtod_l+0x88>
 8013076:	9a06      	ldr	r2, [sp, #24]
 8013078:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801307c:	4293      	cmp	r3, r2
 801307e:	db20      	blt.n	80130c2 <_strtod_l+0x452>
 8013080:	4c64      	ldr	r4, [pc, #400]	; (8013214 <_strtod_l+0x5a4>)
 8013082:	f1c5 050f 	rsb	r5, r5, #15
 8013086:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801308a:	4652      	mov	r2, sl
 801308c:	465b      	mov	r3, fp
 801308e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013092:	f7ed fab1 	bl	80005f8 <__aeabi_dmul>
 8013096:	9b06      	ldr	r3, [sp, #24]
 8013098:	1b5d      	subs	r5, r3, r5
 801309a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801309e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80130a2:	e7e3      	b.n	801306c <_strtod_l+0x3fc>
 80130a4:	9b06      	ldr	r3, [sp, #24]
 80130a6:	3316      	adds	r3, #22
 80130a8:	db0b      	blt.n	80130c2 <_strtod_l+0x452>
 80130aa:	9b05      	ldr	r3, [sp, #20]
 80130ac:	1b9e      	subs	r6, r3, r6
 80130ae:	4b59      	ldr	r3, [pc, #356]	; (8013214 <_strtod_l+0x5a4>)
 80130b0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80130b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80130b8:	4650      	mov	r0, sl
 80130ba:	4659      	mov	r1, fp
 80130bc:	f7ed fbc6 	bl	800084c <__aeabi_ddiv>
 80130c0:	e7d6      	b.n	8013070 <_strtod_l+0x400>
 80130c2:	9b06      	ldr	r3, [sp, #24]
 80130c4:	eba5 0808 	sub.w	r8, r5, r8
 80130c8:	4498      	add	r8, r3
 80130ca:	f1b8 0f00 	cmp.w	r8, #0
 80130ce:	dd74      	ble.n	80131ba <_strtod_l+0x54a>
 80130d0:	f018 030f 	ands.w	r3, r8, #15
 80130d4:	d00a      	beq.n	80130ec <_strtod_l+0x47c>
 80130d6:	494f      	ldr	r1, [pc, #316]	; (8013214 <_strtod_l+0x5a4>)
 80130d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80130dc:	4652      	mov	r2, sl
 80130de:	465b      	mov	r3, fp
 80130e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80130e4:	f7ed fa88 	bl	80005f8 <__aeabi_dmul>
 80130e8:	4682      	mov	sl, r0
 80130ea:	468b      	mov	fp, r1
 80130ec:	f038 080f 	bics.w	r8, r8, #15
 80130f0:	d04f      	beq.n	8013192 <_strtod_l+0x522>
 80130f2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80130f6:	dd22      	ble.n	801313e <_strtod_l+0x4ce>
 80130f8:	2500      	movs	r5, #0
 80130fa:	462e      	mov	r6, r5
 80130fc:	9507      	str	r5, [sp, #28]
 80130fe:	9505      	str	r5, [sp, #20]
 8013100:	2322      	movs	r3, #34	; 0x22
 8013102:	f8df b118 	ldr.w	fp, [pc, #280]	; 801321c <_strtod_l+0x5ac>
 8013106:	6023      	str	r3, [r4, #0]
 8013108:	f04f 0a00 	mov.w	sl, #0
 801310c:	9b07      	ldr	r3, [sp, #28]
 801310e:	2b00      	cmp	r3, #0
 8013110:	f43f adf2 	beq.w	8012cf8 <_strtod_l+0x88>
 8013114:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013116:	4620      	mov	r0, r4
 8013118:	f001 fece 	bl	8014eb8 <_Bfree>
 801311c:	9905      	ldr	r1, [sp, #20]
 801311e:	4620      	mov	r0, r4
 8013120:	f001 feca 	bl	8014eb8 <_Bfree>
 8013124:	4631      	mov	r1, r6
 8013126:	4620      	mov	r0, r4
 8013128:	f001 fec6 	bl	8014eb8 <_Bfree>
 801312c:	9907      	ldr	r1, [sp, #28]
 801312e:	4620      	mov	r0, r4
 8013130:	f001 fec2 	bl	8014eb8 <_Bfree>
 8013134:	4629      	mov	r1, r5
 8013136:	4620      	mov	r0, r4
 8013138:	f001 febe 	bl	8014eb8 <_Bfree>
 801313c:	e5dc      	b.n	8012cf8 <_strtod_l+0x88>
 801313e:	4b36      	ldr	r3, [pc, #216]	; (8013218 <_strtod_l+0x5a8>)
 8013140:	9304      	str	r3, [sp, #16]
 8013142:	2300      	movs	r3, #0
 8013144:	ea4f 1828 	mov.w	r8, r8, asr #4
 8013148:	4650      	mov	r0, sl
 801314a:	4659      	mov	r1, fp
 801314c:	4699      	mov	r9, r3
 801314e:	f1b8 0f01 	cmp.w	r8, #1
 8013152:	dc21      	bgt.n	8013198 <_strtod_l+0x528>
 8013154:	b10b      	cbz	r3, 801315a <_strtod_l+0x4ea>
 8013156:	4682      	mov	sl, r0
 8013158:	468b      	mov	fp, r1
 801315a:	4b2f      	ldr	r3, [pc, #188]	; (8013218 <_strtod_l+0x5a8>)
 801315c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8013160:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8013164:	4652      	mov	r2, sl
 8013166:	465b      	mov	r3, fp
 8013168:	e9d9 0100 	ldrd	r0, r1, [r9]
 801316c:	f7ed fa44 	bl	80005f8 <__aeabi_dmul>
 8013170:	4b2a      	ldr	r3, [pc, #168]	; (801321c <_strtod_l+0x5ac>)
 8013172:	460a      	mov	r2, r1
 8013174:	400b      	ands	r3, r1
 8013176:	492a      	ldr	r1, [pc, #168]	; (8013220 <_strtod_l+0x5b0>)
 8013178:	428b      	cmp	r3, r1
 801317a:	4682      	mov	sl, r0
 801317c:	d8bc      	bhi.n	80130f8 <_strtod_l+0x488>
 801317e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8013182:	428b      	cmp	r3, r1
 8013184:	bf86      	itte	hi
 8013186:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8013224 <_strtod_l+0x5b4>
 801318a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 801318e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8013192:	2300      	movs	r3, #0
 8013194:	9304      	str	r3, [sp, #16]
 8013196:	e084      	b.n	80132a2 <_strtod_l+0x632>
 8013198:	f018 0f01 	tst.w	r8, #1
 801319c:	d005      	beq.n	80131aa <_strtod_l+0x53a>
 801319e:	9b04      	ldr	r3, [sp, #16]
 80131a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131a4:	f7ed fa28 	bl	80005f8 <__aeabi_dmul>
 80131a8:	2301      	movs	r3, #1
 80131aa:	9a04      	ldr	r2, [sp, #16]
 80131ac:	3208      	adds	r2, #8
 80131ae:	f109 0901 	add.w	r9, r9, #1
 80131b2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80131b6:	9204      	str	r2, [sp, #16]
 80131b8:	e7c9      	b.n	801314e <_strtod_l+0x4de>
 80131ba:	d0ea      	beq.n	8013192 <_strtod_l+0x522>
 80131bc:	f1c8 0800 	rsb	r8, r8, #0
 80131c0:	f018 020f 	ands.w	r2, r8, #15
 80131c4:	d00a      	beq.n	80131dc <_strtod_l+0x56c>
 80131c6:	4b13      	ldr	r3, [pc, #76]	; (8013214 <_strtod_l+0x5a4>)
 80131c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80131cc:	4650      	mov	r0, sl
 80131ce:	4659      	mov	r1, fp
 80131d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131d4:	f7ed fb3a 	bl	800084c <__aeabi_ddiv>
 80131d8:	4682      	mov	sl, r0
 80131da:	468b      	mov	fp, r1
 80131dc:	ea5f 1828 	movs.w	r8, r8, asr #4
 80131e0:	d0d7      	beq.n	8013192 <_strtod_l+0x522>
 80131e2:	f1b8 0f1f 	cmp.w	r8, #31
 80131e6:	dd1f      	ble.n	8013228 <_strtod_l+0x5b8>
 80131e8:	2500      	movs	r5, #0
 80131ea:	462e      	mov	r6, r5
 80131ec:	9507      	str	r5, [sp, #28]
 80131ee:	9505      	str	r5, [sp, #20]
 80131f0:	2322      	movs	r3, #34	; 0x22
 80131f2:	f04f 0a00 	mov.w	sl, #0
 80131f6:	f04f 0b00 	mov.w	fp, #0
 80131fa:	6023      	str	r3, [r4, #0]
 80131fc:	e786      	b.n	801310c <_strtod_l+0x49c>
 80131fe:	bf00      	nop
 8013200:	080183b9 	.word	0x080183b9
 8013204:	080183f4 	.word	0x080183f4
 8013208:	080183b1 	.word	0x080183b1
 801320c:	08018433 	.word	0x08018433
 8013210:	080186e0 	.word	0x080186e0
 8013214:	080185c0 	.word	0x080185c0
 8013218:	08018598 	.word	0x08018598
 801321c:	7ff00000 	.word	0x7ff00000
 8013220:	7ca00000 	.word	0x7ca00000
 8013224:	7fefffff 	.word	0x7fefffff
 8013228:	f018 0310 	ands.w	r3, r8, #16
 801322c:	bf18      	it	ne
 801322e:	236a      	movne	r3, #106	; 0x6a
 8013230:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80135e0 <_strtod_l+0x970>
 8013234:	9304      	str	r3, [sp, #16]
 8013236:	4650      	mov	r0, sl
 8013238:	4659      	mov	r1, fp
 801323a:	2300      	movs	r3, #0
 801323c:	f018 0f01 	tst.w	r8, #1
 8013240:	d004      	beq.n	801324c <_strtod_l+0x5dc>
 8013242:	e9d9 2300 	ldrd	r2, r3, [r9]
 8013246:	f7ed f9d7 	bl	80005f8 <__aeabi_dmul>
 801324a:	2301      	movs	r3, #1
 801324c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8013250:	f109 0908 	add.w	r9, r9, #8
 8013254:	d1f2      	bne.n	801323c <_strtod_l+0x5cc>
 8013256:	b10b      	cbz	r3, 801325c <_strtod_l+0x5ec>
 8013258:	4682      	mov	sl, r0
 801325a:	468b      	mov	fp, r1
 801325c:	9b04      	ldr	r3, [sp, #16]
 801325e:	b1c3      	cbz	r3, 8013292 <_strtod_l+0x622>
 8013260:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8013264:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013268:	2b00      	cmp	r3, #0
 801326a:	4659      	mov	r1, fp
 801326c:	dd11      	ble.n	8013292 <_strtod_l+0x622>
 801326e:	2b1f      	cmp	r3, #31
 8013270:	f340 8124 	ble.w	80134bc <_strtod_l+0x84c>
 8013274:	2b34      	cmp	r3, #52	; 0x34
 8013276:	bfde      	ittt	le
 8013278:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801327c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8013280:	fa03 f202 	lslle.w	r2, r3, r2
 8013284:	f04f 0a00 	mov.w	sl, #0
 8013288:	bfcc      	ite	gt
 801328a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801328e:	ea02 0b01 	andle.w	fp, r2, r1
 8013292:	2200      	movs	r2, #0
 8013294:	2300      	movs	r3, #0
 8013296:	4650      	mov	r0, sl
 8013298:	4659      	mov	r1, fp
 801329a:	f7ed fc15 	bl	8000ac8 <__aeabi_dcmpeq>
 801329e:	2800      	cmp	r0, #0
 80132a0:	d1a2      	bne.n	80131e8 <_strtod_l+0x578>
 80132a2:	9b07      	ldr	r3, [sp, #28]
 80132a4:	9300      	str	r3, [sp, #0]
 80132a6:	9908      	ldr	r1, [sp, #32]
 80132a8:	462b      	mov	r3, r5
 80132aa:	463a      	mov	r2, r7
 80132ac:	4620      	mov	r0, r4
 80132ae:	f001 fe6b 	bl	8014f88 <__s2b>
 80132b2:	9007      	str	r0, [sp, #28]
 80132b4:	2800      	cmp	r0, #0
 80132b6:	f43f af1f 	beq.w	80130f8 <_strtod_l+0x488>
 80132ba:	9b05      	ldr	r3, [sp, #20]
 80132bc:	1b9e      	subs	r6, r3, r6
 80132be:	9b06      	ldr	r3, [sp, #24]
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	bfb4      	ite	lt
 80132c4:	4633      	movlt	r3, r6
 80132c6:	2300      	movge	r3, #0
 80132c8:	930c      	str	r3, [sp, #48]	; 0x30
 80132ca:	9b06      	ldr	r3, [sp, #24]
 80132cc:	2500      	movs	r5, #0
 80132ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80132d2:	9312      	str	r3, [sp, #72]	; 0x48
 80132d4:	462e      	mov	r6, r5
 80132d6:	9b07      	ldr	r3, [sp, #28]
 80132d8:	4620      	mov	r0, r4
 80132da:	6859      	ldr	r1, [r3, #4]
 80132dc:	f001 fdac 	bl	8014e38 <_Balloc>
 80132e0:	9005      	str	r0, [sp, #20]
 80132e2:	2800      	cmp	r0, #0
 80132e4:	f43f af0c 	beq.w	8013100 <_strtod_l+0x490>
 80132e8:	9b07      	ldr	r3, [sp, #28]
 80132ea:	691a      	ldr	r2, [r3, #16]
 80132ec:	3202      	adds	r2, #2
 80132ee:	f103 010c 	add.w	r1, r3, #12
 80132f2:	0092      	lsls	r2, r2, #2
 80132f4:	300c      	adds	r0, #12
 80132f6:	f7fe ffa5 	bl	8012244 <memcpy>
 80132fa:	ec4b ab10 	vmov	d0, sl, fp
 80132fe:	aa1a      	add	r2, sp, #104	; 0x68
 8013300:	a919      	add	r1, sp, #100	; 0x64
 8013302:	4620      	mov	r0, r4
 8013304:	f002 f986 	bl	8015614 <__d2b>
 8013308:	ec4b ab18 	vmov	d8, sl, fp
 801330c:	9018      	str	r0, [sp, #96]	; 0x60
 801330e:	2800      	cmp	r0, #0
 8013310:	f43f aef6 	beq.w	8013100 <_strtod_l+0x490>
 8013314:	2101      	movs	r1, #1
 8013316:	4620      	mov	r0, r4
 8013318:	f001 fed0 	bl	80150bc <__i2b>
 801331c:	4606      	mov	r6, r0
 801331e:	2800      	cmp	r0, #0
 8013320:	f43f aeee 	beq.w	8013100 <_strtod_l+0x490>
 8013324:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013326:	9904      	ldr	r1, [sp, #16]
 8013328:	2b00      	cmp	r3, #0
 801332a:	bfab      	itete	ge
 801332c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801332e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8013330:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8013332:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8013336:	bfac      	ite	ge
 8013338:	eb03 0902 	addge.w	r9, r3, r2
 801333c:	1ad7      	sublt	r7, r2, r3
 801333e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013340:	eba3 0801 	sub.w	r8, r3, r1
 8013344:	4490      	add	r8, r2
 8013346:	4ba1      	ldr	r3, [pc, #644]	; (80135cc <_strtod_l+0x95c>)
 8013348:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801334c:	4598      	cmp	r8, r3
 801334e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013352:	f280 80c7 	bge.w	80134e4 <_strtod_l+0x874>
 8013356:	eba3 0308 	sub.w	r3, r3, r8
 801335a:	2b1f      	cmp	r3, #31
 801335c:	eba2 0203 	sub.w	r2, r2, r3
 8013360:	f04f 0101 	mov.w	r1, #1
 8013364:	f300 80b1 	bgt.w	80134ca <_strtod_l+0x85a>
 8013368:	fa01 f303 	lsl.w	r3, r1, r3
 801336c:	930d      	str	r3, [sp, #52]	; 0x34
 801336e:	2300      	movs	r3, #0
 8013370:	9308      	str	r3, [sp, #32]
 8013372:	eb09 0802 	add.w	r8, r9, r2
 8013376:	9b04      	ldr	r3, [sp, #16]
 8013378:	45c1      	cmp	r9, r8
 801337a:	4417      	add	r7, r2
 801337c:	441f      	add	r7, r3
 801337e:	464b      	mov	r3, r9
 8013380:	bfa8      	it	ge
 8013382:	4643      	movge	r3, r8
 8013384:	42bb      	cmp	r3, r7
 8013386:	bfa8      	it	ge
 8013388:	463b      	movge	r3, r7
 801338a:	2b00      	cmp	r3, #0
 801338c:	bfc2      	ittt	gt
 801338e:	eba8 0803 	subgt.w	r8, r8, r3
 8013392:	1aff      	subgt	r7, r7, r3
 8013394:	eba9 0903 	subgt.w	r9, r9, r3
 8013398:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801339a:	2b00      	cmp	r3, #0
 801339c:	dd17      	ble.n	80133ce <_strtod_l+0x75e>
 801339e:	4631      	mov	r1, r6
 80133a0:	461a      	mov	r2, r3
 80133a2:	4620      	mov	r0, r4
 80133a4:	f001 ff4a 	bl	801523c <__pow5mult>
 80133a8:	4606      	mov	r6, r0
 80133aa:	2800      	cmp	r0, #0
 80133ac:	f43f aea8 	beq.w	8013100 <_strtod_l+0x490>
 80133b0:	4601      	mov	r1, r0
 80133b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80133b4:	4620      	mov	r0, r4
 80133b6:	f001 fe97 	bl	80150e8 <__multiply>
 80133ba:	900b      	str	r0, [sp, #44]	; 0x2c
 80133bc:	2800      	cmp	r0, #0
 80133be:	f43f ae9f 	beq.w	8013100 <_strtod_l+0x490>
 80133c2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80133c4:	4620      	mov	r0, r4
 80133c6:	f001 fd77 	bl	8014eb8 <_Bfree>
 80133ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80133cc:	9318      	str	r3, [sp, #96]	; 0x60
 80133ce:	f1b8 0f00 	cmp.w	r8, #0
 80133d2:	f300 808c 	bgt.w	80134ee <_strtod_l+0x87e>
 80133d6:	9b06      	ldr	r3, [sp, #24]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	dd08      	ble.n	80133ee <_strtod_l+0x77e>
 80133dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80133de:	9905      	ldr	r1, [sp, #20]
 80133e0:	4620      	mov	r0, r4
 80133e2:	f001 ff2b 	bl	801523c <__pow5mult>
 80133e6:	9005      	str	r0, [sp, #20]
 80133e8:	2800      	cmp	r0, #0
 80133ea:	f43f ae89 	beq.w	8013100 <_strtod_l+0x490>
 80133ee:	2f00      	cmp	r7, #0
 80133f0:	dd08      	ble.n	8013404 <_strtod_l+0x794>
 80133f2:	9905      	ldr	r1, [sp, #20]
 80133f4:	463a      	mov	r2, r7
 80133f6:	4620      	mov	r0, r4
 80133f8:	f001 ff7a 	bl	80152f0 <__lshift>
 80133fc:	9005      	str	r0, [sp, #20]
 80133fe:	2800      	cmp	r0, #0
 8013400:	f43f ae7e 	beq.w	8013100 <_strtod_l+0x490>
 8013404:	f1b9 0f00 	cmp.w	r9, #0
 8013408:	dd08      	ble.n	801341c <_strtod_l+0x7ac>
 801340a:	4631      	mov	r1, r6
 801340c:	464a      	mov	r2, r9
 801340e:	4620      	mov	r0, r4
 8013410:	f001 ff6e 	bl	80152f0 <__lshift>
 8013414:	4606      	mov	r6, r0
 8013416:	2800      	cmp	r0, #0
 8013418:	f43f ae72 	beq.w	8013100 <_strtod_l+0x490>
 801341c:	9a05      	ldr	r2, [sp, #20]
 801341e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013420:	4620      	mov	r0, r4
 8013422:	f001 fff1 	bl	8015408 <__mdiff>
 8013426:	4605      	mov	r5, r0
 8013428:	2800      	cmp	r0, #0
 801342a:	f43f ae69 	beq.w	8013100 <_strtod_l+0x490>
 801342e:	68c3      	ldr	r3, [r0, #12]
 8013430:	930b      	str	r3, [sp, #44]	; 0x2c
 8013432:	2300      	movs	r3, #0
 8013434:	60c3      	str	r3, [r0, #12]
 8013436:	4631      	mov	r1, r6
 8013438:	f001 ffca 	bl	80153d0 <__mcmp>
 801343c:	2800      	cmp	r0, #0
 801343e:	da60      	bge.n	8013502 <_strtod_l+0x892>
 8013440:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013442:	ea53 030a 	orrs.w	r3, r3, sl
 8013446:	f040 8082 	bne.w	801354e <_strtod_l+0x8de>
 801344a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801344e:	2b00      	cmp	r3, #0
 8013450:	d17d      	bne.n	801354e <_strtod_l+0x8de>
 8013452:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013456:	0d1b      	lsrs	r3, r3, #20
 8013458:	051b      	lsls	r3, r3, #20
 801345a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801345e:	d976      	bls.n	801354e <_strtod_l+0x8de>
 8013460:	696b      	ldr	r3, [r5, #20]
 8013462:	b913      	cbnz	r3, 801346a <_strtod_l+0x7fa>
 8013464:	692b      	ldr	r3, [r5, #16]
 8013466:	2b01      	cmp	r3, #1
 8013468:	dd71      	ble.n	801354e <_strtod_l+0x8de>
 801346a:	4629      	mov	r1, r5
 801346c:	2201      	movs	r2, #1
 801346e:	4620      	mov	r0, r4
 8013470:	f001 ff3e 	bl	80152f0 <__lshift>
 8013474:	4631      	mov	r1, r6
 8013476:	4605      	mov	r5, r0
 8013478:	f001 ffaa 	bl	80153d0 <__mcmp>
 801347c:	2800      	cmp	r0, #0
 801347e:	dd66      	ble.n	801354e <_strtod_l+0x8de>
 8013480:	9904      	ldr	r1, [sp, #16]
 8013482:	4a53      	ldr	r2, [pc, #332]	; (80135d0 <_strtod_l+0x960>)
 8013484:	465b      	mov	r3, fp
 8013486:	2900      	cmp	r1, #0
 8013488:	f000 8081 	beq.w	801358e <_strtod_l+0x91e>
 801348c:	ea02 010b 	and.w	r1, r2, fp
 8013490:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013494:	dc7b      	bgt.n	801358e <_strtod_l+0x91e>
 8013496:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801349a:	f77f aea9 	ble.w	80131f0 <_strtod_l+0x580>
 801349e:	4b4d      	ldr	r3, [pc, #308]	; (80135d4 <_strtod_l+0x964>)
 80134a0:	4650      	mov	r0, sl
 80134a2:	4659      	mov	r1, fp
 80134a4:	2200      	movs	r2, #0
 80134a6:	f7ed f8a7 	bl	80005f8 <__aeabi_dmul>
 80134aa:	460b      	mov	r3, r1
 80134ac:	4303      	orrs	r3, r0
 80134ae:	bf08      	it	eq
 80134b0:	2322      	moveq	r3, #34	; 0x22
 80134b2:	4682      	mov	sl, r0
 80134b4:	468b      	mov	fp, r1
 80134b6:	bf08      	it	eq
 80134b8:	6023      	streq	r3, [r4, #0]
 80134ba:	e62b      	b.n	8013114 <_strtod_l+0x4a4>
 80134bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80134c0:	fa02 f303 	lsl.w	r3, r2, r3
 80134c4:	ea03 0a0a 	and.w	sl, r3, sl
 80134c8:	e6e3      	b.n	8013292 <_strtod_l+0x622>
 80134ca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80134ce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80134d2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80134d6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80134da:	fa01 f308 	lsl.w	r3, r1, r8
 80134de:	9308      	str	r3, [sp, #32]
 80134e0:	910d      	str	r1, [sp, #52]	; 0x34
 80134e2:	e746      	b.n	8013372 <_strtod_l+0x702>
 80134e4:	2300      	movs	r3, #0
 80134e6:	9308      	str	r3, [sp, #32]
 80134e8:	2301      	movs	r3, #1
 80134ea:	930d      	str	r3, [sp, #52]	; 0x34
 80134ec:	e741      	b.n	8013372 <_strtod_l+0x702>
 80134ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 80134f0:	4642      	mov	r2, r8
 80134f2:	4620      	mov	r0, r4
 80134f4:	f001 fefc 	bl	80152f0 <__lshift>
 80134f8:	9018      	str	r0, [sp, #96]	; 0x60
 80134fa:	2800      	cmp	r0, #0
 80134fc:	f47f af6b 	bne.w	80133d6 <_strtod_l+0x766>
 8013500:	e5fe      	b.n	8013100 <_strtod_l+0x490>
 8013502:	465f      	mov	r7, fp
 8013504:	d16e      	bne.n	80135e4 <_strtod_l+0x974>
 8013506:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013508:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801350c:	b342      	cbz	r2, 8013560 <_strtod_l+0x8f0>
 801350e:	4a32      	ldr	r2, [pc, #200]	; (80135d8 <_strtod_l+0x968>)
 8013510:	4293      	cmp	r3, r2
 8013512:	d128      	bne.n	8013566 <_strtod_l+0x8f6>
 8013514:	9b04      	ldr	r3, [sp, #16]
 8013516:	4651      	mov	r1, sl
 8013518:	b1eb      	cbz	r3, 8013556 <_strtod_l+0x8e6>
 801351a:	4b2d      	ldr	r3, [pc, #180]	; (80135d0 <_strtod_l+0x960>)
 801351c:	403b      	ands	r3, r7
 801351e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013522:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013526:	d819      	bhi.n	801355c <_strtod_l+0x8ec>
 8013528:	0d1b      	lsrs	r3, r3, #20
 801352a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801352e:	fa02 f303 	lsl.w	r3, r2, r3
 8013532:	4299      	cmp	r1, r3
 8013534:	d117      	bne.n	8013566 <_strtod_l+0x8f6>
 8013536:	4b29      	ldr	r3, [pc, #164]	; (80135dc <_strtod_l+0x96c>)
 8013538:	429f      	cmp	r7, r3
 801353a:	d102      	bne.n	8013542 <_strtod_l+0x8d2>
 801353c:	3101      	adds	r1, #1
 801353e:	f43f addf 	beq.w	8013100 <_strtod_l+0x490>
 8013542:	4b23      	ldr	r3, [pc, #140]	; (80135d0 <_strtod_l+0x960>)
 8013544:	403b      	ands	r3, r7
 8013546:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801354a:	f04f 0a00 	mov.w	sl, #0
 801354e:	9b04      	ldr	r3, [sp, #16]
 8013550:	2b00      	cmp	r3, #0
 8013552:	d1a4      	bne.n	801349e <_strtod_l+0x82e>
 8013554:	e5de      	b.n	8013114 <_strtod_l+0x4a4>
 8013556:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801355a:	e7ea      	b.n	8013532 <_strtod_l+0x8c2>
 801355c:	4613      	mov	r3, r2
 801355e:	e7e8      	b.n	8013532 <_strtod_l+0x8c2>
 8013560:	ea53 030a 	orrs.w	r3, r3, sl
 8013564:	d08c      	beq.n	8013480 <_strtod_l+0x810>
 8013566:	9b08      	ldr	r3, [sp, #32]
 8013568:	b1db      	cbz	r3, 80135a2 <_strtod_l+0x932>
 801356a:	423b      	tst	r3, r7
 801356c:	d0ef      	beq.n	801354e <_strtod_l+0x8de>
 801356e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013570:	9a04      	ldr	r2, [sp, #16]
 8013572:	4650      	mov	r0, sl
 8013574:	4659      	mov	r1, fp
 8013576:	b1c3      	cbz	r3, 80135aa <_strtod_l+0x93a>
 8013578:	f7ff fb5d 	bl	8012c36 <sulp>
 801357c:	4602      	mov	r2, r0
 801357e:	460b      	mov	r3, r1
 8013580:	ec51 0b18 	vmov	r0, r1, d8
 8013584:	f7ec fe82 	bl	800028c <__adddf3>
 8013588:	4682      	mov	sl, r0
 801358a:	468b      	mov	fp, r1
 801358c:	e7df      	b.n	801354e <_strtod_l+0x8de>
 801358e:	4013      	ands	r3, r2
 8013590:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013594:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013598:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801359c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80135a0:	e7d5      	b.n	801354e <_strtod_l+0x8de>
 80135a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80135a4:	ea13 0f0a 	tst.w	r3, sl
 80135a8:	e7e0      	b.n	801356c <_strtod_l+0x8fc>
 80135aa:	f7ff fb44 	bl	8012c36 <sulp>
 80135ae:	4602      	mov	r2, r0
 80135b0:	460b      	mov	r3, r1
 80135b2:	ec51 0b18 	vmov	r0, r1, d8
 80135b6:	f7ec fe67 	bl	8000288 <__aeabi_dsub>
 80135ba:	2200      	movs	r2, #0
 80135bc:	2300      	movs	r3, #0
 80135be:	4682      	mov	sl, r0
 80135c0:	468b      	mov	fp, r1
 80135c2:	f7ed fa81 	bl	8000ac8 <__aeabi_dcmpeq>
 80135c6:	2800      	cmp	r0, #0
 80135c8:	d0c1      	beq.n	801354e <_strtod_l+0x8de>
 80135ca:	e611      	b.n	80131f0 <_strtod_l+0x580>
 80135cc:	fffffc02 	.word	0xfffffc02
 80135d0:	7ff00000 	.word	0x7ff00000
 80135d4:	39500000 	.word	0x39500000
 80135d8:	000fffff 	.word	0x000fffff
 80135dc:	7fefffff 	.word	0x7fefffff
 80135e0:	08018408 	.word	0x08018408
 80135e4:	4631      	mov	r1, r6
 80135e6:	4628      	mov	r0, r5
 80135e8:	f002 f870 	bl	80156cc <__ratio>
 80135ec:	ec59 8b10 	vmov	r8, r9, d0
 80135f0:	ee10 0a10 	vmov	r0, s0
 80135f4:	2200      	movs	r2, #0
 80135f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80135fa:	4649      	mov	r1, r9
 80135fc:	f7ed fa78 	bl	8000af0 <__aeabi_dcmple>
 8013600:	2800      	cmp	r0, #0
 8013602:	d07a      	beq.n	80136fa <_strtod_l+0xa8a>
 8013604:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013606:	2b00      	cmp	r3, #0
 8013608:	d04a      	beq.n	80136a0 <_strtod_l+0xa30>
 801360a:	4b95      	ldr	r3, [pc, #596]	; (8013860 <_strtod_l+0xbf0>)
 801360c:	2200      	movs	r2, #0
 801360e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013612:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8013860 <_strtod_l+0xbf0>
 8013616:	f04f 0800 	mov.w	r8, #0
 801361a:	4b92      	ldr	r3, [pc, #584]	; (8013864 <_strtod_l+0xbf4>)
 801361c:	403b      	ands	r3, r7
 801361e:	930d      	str	r3, [sp, #52]	; 0x34
 8013620:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013622:	4b91      	ldr	r3, [pc, #580]	; (8013868 <_strtod_l+0xbf8>)
 8013624:	429a      	cmp	r2, r3
 8013626:	f040 80b0 	bne.w	801378a <_strtod_l+0xb1a>
 801362a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801362e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8013632:	ec4b ab10 	vmov	d0, sl, fp
 8013636:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801363a:	f001 ff6f 	bl	801551c <__ulp>
 801363e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013642:	ec53 2b10 	vmov	r2, r3, d0
 8013646:	f7ec ffd7 	bl	80005f8 <__aeabi_dmul>
 801364a:	4652      	mov	r2, sl
 801364c:	465b      	mov	r3, fp
 801364e:	f7ec fe1d 	bl	800028c <__adddf3>
 8013652:	460b      	mov	r3, r1
 8013654:	4983      	ldr	r1, [pc, #524]	; (8013864 <_strtod_l+0xbf4>)
 8013656:	4a85      	ldr	r2, [pc, #532]	; (801386c <_strtod_l+0xbfc>)
 8013658:	4019      	ands	r1, r3
 801365a:	4291      	cmp	r1, r2
 801365c:	4682      	mov	sl, r0
 801365e:	d960      	bls.n	8013722 <_strtod_l+0xab2>
 8013660:	ee18 3a90 	vmov	r3, s17
 8013664:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8013668:	4293      	cmp	r3, r2
 801366a:	d104      	bne.n	8013676 <_strtod_l+0xa06>
 801366c:	ee18 3a10 	vmov	r3, s16
 8013670:	3301      	adds	r3, #1
 8013672:	f43f ad45 	beq.w	8013100 <_strtod_l+0x490>
 8013676:	f8df b200 	ldr.w	fp, [pc, #512]	; 8013878 <_strtod_l+0xc08>
 801367a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801367e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013680:	4620      	mov	r0, r4
 8013682:	f001 fc19 	bl	8014eb8 <_Bfree>
 8013686:	9905      	ldr	r1, [sp, #20]
 8013688:	4620      	mov	r0, r4
 801368a:	f001 fc15 	bl	8014eb8 <_Bfree>
 801368e:	4631      	mov	r1, r6
 8013690:	4620      	mov	r0, r4
 8013692:	f001 fc11 	bl	8014eb8 <_Bfree>
 8013696:	4629      	mov	r1, r5
 8013698:	4620      	mov	r0, r4
 801369a:	f001 fc0d 	bl	8014eb8 <_Bfree>
 801369e:	e61a      	b.n	80132d6 <_strtod_l+0x666>
 80136a0:	f1ba 0f00 	cmp.w	sl, #0
 80136a4:	d11b      	bne.n	80136de <_strtod_l+0xa6e>
 80136a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80136aa:	b9f3      	cbnz	r3, 80136ea <_strtod_l+0xa7a>
 80136ac:	4b6c      	ldr	r3, [pc, #432]	; (8013860 <_strtod_l+0xbf0>)
 80136ae:	2200      	movs	r2, #0
 80136b0:	4640      	mov	r0, r8
 80136b2:	4649      	mov	r1, r9
 80136b4:	f7ed fa12 	bl	8000adc <__aeabi_dcmplt>
 80136b8:	b9d0      	cbnz	r0, 80136f0 <_strtod_l+0xa80>
 80136ba:	4640      	mov	r0, r8
 80136bc:	4649      	mov	r1, r9
 80136be:	4b6c      	ldr	r3, [pc, #432]	; (8013870 <_strtod_l+0xc00>)
 80136c0:	2200      	movs	r2, #0
 80136c2:	f7ec ff99 	bl	80005f8 <__aeabi_dmul>
 80136c6:	4680      	mov	r8, r0
 80136c8:	4689      	mov	r9, r1
 80136ca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80136ce:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80136d2:	9315      	str	r3, [sp, #84]	; 0x54
 80136d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80136d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80136dc:	e79d      	b.n	801361a <_strtod_l+0x9aa>
 80136de:	f1ba 0f01 	cmp.w	sl, #1
 80136e2:	d102      	bne.n	80136ea <_strtod_l+0xa7a>
 80136e4:	2f00      	cmp	r7, #0
 80136e6:	f43f ad83 	beq.w	80131f0 <_strtod_l+0x580>
 80136ea:	4b62      	ldr	r3, [pc, #392]	; (8013874 <_strtod_l+0xc04>)
 80136ec:	2200      	movs	r2, #0
 80136ee:	e78e      	b.n	801360e <_strtod_l+0x99e>
 80136f0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8013870 <_strtod_l+0xc00>
 80136f4:	f04f 0800 	mov.w	r8, #0
 80136f8:	e7e7      	b.n	80136ca <_strtod_l+0xa5a>
 80136fa:	4b5d      	ldr	r3, [pc, #372]	; (8013870 <_strtod_l+0xc00>)
 80136fc:	4640      	mov	r0, r8
 80136fe:	4649      	mov	r1, r9
 8013700:	2200      	movs	r2, #0
 8013702:	f7ec ff79 	bl	80005f8 <__aeabi_dmul>
 8013706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013708:	4680      	mov	r8, r0
 801370a:	4689      	mov	r9, r1
 801370c:	b933      	cbnz	r3, 801371c <_strtod_l+0xaac>
 801370e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013712:	900e      	str	r0, [sp, #56]	; 0x38
 8013714:	930f      	str	r3, [sp, #60]	; 0x3c
 8013716:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801371a:	e7dd      	b.n	80136d8 <_strtod_l+0xa68>
 801371c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8013720:	e7f9      	b.n	8013716 <_strtod_l+0xaa6>
 8013722:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8013726:	9b04      	ldr	r3, [sp, #16]
 8013728:	2b00      	cmp	r3, #0
 801372a:	d1a8      	bne.n	801367e <_strtod_l+0xa0e>
 801372c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013730:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013732:	0d1b      	lsrs	r3, r3, #20
 8013734:	051b      	lsls	r3, r3, #20
 8013736:	429a      	cmp	r2, r3
 8013738:	d1a1      	bne.n	801367e <_strtod_l+0xa0e>
 801373a:	4640      	mov	r0, r8
 801373c:	4649      	mov	r1, r9
 801373e:	f7ed fb0b 	bl	8000d58 <__aeabi_d2lz>
 8013742:	f7ec ff2b 	bl	800059c <__aeabi_l2d>
 8013746:	4602      	mov	r2, r0
 8013748:	460b      	mov	r3, r1
 801374a:	4640      	mov	r0, r8
 801374c:	4649      	mov	r1, r9
 801374e:	f7ec fd9b 	bl	8000288 <__aeabi_dsub>
 8013752:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013754:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013758:	ea43 030a 	orr.w	r3, r3, sl
 801375c:	4313      	orrs	r3, r2
 801375e:	4680      	mov	r8, r0
 8013760:	4689      	mov	r9, r1
 8013762:	d055      	beq.n	8013810 <_strtod_l+0xba0>
 8013764:	a336      	add	r3, pc, #216	; (adr r3, 8013840 <_strtod_l+0xbd0>)
 8013766:	e9d3 2300 	ldrd	r2, r3, [r3]
 801376a:	f7ed f9b7 	bl	8000adc <__aeabi_dcmplt>
 801376e:	2800      	cmp	r0, #0
 8013770:	f47f acd0 	bne.w	8013114 <_strtod_l+0x4a4>
 8013774:	a334      	add	r3, pc, #208	; (adr r3, 8013848 <_strtod_l+0xbd8>)
 8013776:	e9d3 2300 	ldrd	r2, r3, [r3]
 801377a:	4640      	mov	r0, r8
 801377c:	4649      	mov	r1, r9
 801377e:	f7ed f9cb 	bl	8000b18 <__aeabi_dcmpgt>
 8013782:	2800      	cmp	r0, #0
 8013784:	f43f af7b 	beq.w	801367e <_strtod_l+0xa0e>
 8013788:	e4c4      	b.n	8013114 <_strtod_l+0x4a4>
 801378a:	9b04      	ldr	r3, [sp, #16]
 801378c:	b333      	cbz	r3, 80137dc <_strtod_l+0xb6c>
 801378e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013790:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013794:	d822      	bhi.n	80137dc <_strtod_l+0xb6c>
 8013796:	a32e      	add	r3, pc, #184	; (adr r3, 8013850 <_strtod_l+0xbe0>)
 8013798:	e9d3 2300 	ldrd	r2, r3, [r3]
 801379c:	4640      	mov	r0, r8
 801379e:	4649      	mov	r1, r9
 80137a0:	f7ed f9a6 	bl	8000af0 <__aeabi_dcmple>
 80137a4:	b1a0      	cbz	r0, 80137d0 <_strtod_l+0xb60>
 80137a6:	4649      	mov	r1, r9
 80137a8:	4640      	mov	r0, r8
 80137aa:	f7ed f9fd 	bl	8000ba8 <__aeabi_d2uiz>
 80137ae:	2801      	cmp	r0, #1
 80137b0:	bf38      	it	cc
 80137b2:	2001      	movcc	r0, #1
 80137b4:	f7ec fea6 	bl	8000504 <__aeabi_ui2d>
 80137b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80137ba:	4680      	mov	r8, r0
 80137bc:	4689      	mov	r9, r1
 80137be:	bb23      	cbnz	r3, 801380a <_strtod_l+0xb9a>
 80137c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80137c4:	9010      	str	r0, [sp, #64]	; 0x40
 80137c6:	9311      	str	r3, [sp, #68]	; 0x44
 80137c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80137cc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80137d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80137d4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80137d8:	1a9b      	subs	r3, r3, r2
 80137da:	9309      	str	r3, [sp, #36]	; 0x24
 80137dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80137e0:	eeb0 0a48 	vmov.f32	s0, s16
 80137e4:	eef0 0a68 	vmov.f32	s1, s17
 80137e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80137ec:	f001 fe96 	bl	801551c <__ulp>
 80137f0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80137f4:	ec53 2b10 	vmov	r2, r3, d0
 80137f8:	f7ec fefe 	bl	80005f8 <__aeabi_dmul>
 80137fc:	ec53 2b18 	vmov	r2, r3, d8
 8013800:	f7ec fd44 	bl	800028c <__adddf3>
 8013804:	4682      	mov	sl, r0
 8013806:	468b      	mov	fp, r1
 8013808:	e78d      	b.n	8013726 <_strtod_l+0xab6>
 801380a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801380e:	e7db      	b.n	80137c8 <_strtod_l+0xb58>
 8013810:	a311      	add	r3, pc, #68	; (adr r3, 8013858 <_strtod_l+0xbe8>)
 8013812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013816:	f7ed f961 	bl	8000adc <__aeabi_dcmplt>
 801381a:	e7b2      	b.n	8013782 <_strtod_l+0xb12>
 801381c:	2300      	movs	r3, #0
 801381e:	930a      	str	r3, [sp, #40]	; 0x28
 8013820:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013822:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013824:	6013      	str	r3, [r2, #0]
 8013826:	f7ff ba6b 	b.w	8012d00 <_strtod_l+0x90>
 801382a:	2a65      	cmp	r2, #101	; 0x65
 801382c:	f43f ab5f 	beq.w	8012eee <_strtod_l+0x27e>
 8013830:	2a45      	cmp	r2, #69	; 0x45
 8013832:	f43f ab5c 	beq.w	8012eee <_strtod_l+0x27e>
 8013836:	2301      	movs	r3, #1
 8013838:	f7ff bb94 	b.w	8012f64 <_strtod_l+0x2f4>
 801383c:	f3af 8000 	nop.w
 8013840:	94a03595 	.word	0x94a03595
 8013844:	3fdfffff 	.word	0x3fdfffff
 8013848:	35afe535 	.word	0x35afe535
 801384c:	3fe00000 	.word	0x3fe00000
 8013850:	ffc00000 	.word	0xffc00000
 8013854:	41dfffff 	.word	0x41dfffff
 8013858:	94a03595 	.word	0x94a03595
 801385c:	3fcfffff 	.word	0x3fcfffff
 8013860:	3ff00000 	.word	0x3ff00000
 8013864:	7ff00000 	.word	0x7ff00000
 8013868:	7fe00000 	.word	0x7fe00000
 801386c:	7c9fffff 	.word	0x7c9fffff
 8013870:	3fe00000 	.word	0x3fe00000
 8013874:	bff00000 	.word	0xbff00000
 8013878:	7fefffff 	.word	0x7fefffff

0801387c <strtod>:
 801387c:	460a      	mov	r2, r1
 801387e:	4601      	mov	r1, r0
 8013880:	4802      	ldr	r0, [pc, #8]	; (801388c <strtod+0x10>)
 8013882:	4b03      	ldr	r3, [pc, #12]	; (8013890 <strtod+0x14>)
 8013884:	6800      	ldr	r0, [r0, #0]
 8013886:	f7ff b9f3 	b.w	8012c70 <_strtod_l>
 801388a:	bf00      	nop
 801388c:	20000258 	.word	0x20000258
 8013890:	200002c0 	.word	0x200002c0

08013894 <_strtol_l.constprop.0>:
 8013894:	2b01      	cmp	r3, #1
 8013896:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801389a:	d001      	beq.n	80138a0 <_strtol_l.constprop.0+0xc>
 801389c:	2b24      	cmp	r3, #36	; 0x24
 801389e:	d906      	bls.n	80138ae <_strtol_l.constprop.0+0x1a>
 80138a0:	f7fe fbfa 	bl	8012098 <__errno>
 80138a4:	2316      	movs	r3, #22
 80138a6:	6003      	str	r3, [r0, #0]
 80138a8:	2000      	movs	r0, #0
 80138aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138ae:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8013994 <_strtol_l.constprop.0+0x100>
 80138b2:	460d      	mov	r5, r1
 80138b4:	462e      	mov	r6, r5
 80138b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80138ba:	f814 700c 	ldrb.w	r7, [r4, ip]
 80138be:	f017 0708 	ands.w	r7, r7, #8
 80138c2:	d1f7      	bne.n	80138b4 <_strtol_l.constprop.0+0x20>
 80138c4:	2c2d      	cmp	r4, #45	; 0x2d
 80138c6:	d132      	bne.n	801392e <_strtol_l.constprop.0+0x9a>
 80138c8:	782c      	ldrb	r4, [r5, #0]
 80138ca:	2701      	movs	r7, #1
 80138cc:	1cb5      	adds	r5, r6, #2
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d05b      	beq.n	801398a <_strtol_l.constprop.0+0xf6>
 80138d2:	2b10      	cmp	r3, #16
 80138d4:	d109      	bne.n	80138ea <_strtol_l.constprop.0+0x56>
 80138d6:	2c30      	cmp	r4, #48	; 0x30
 80138d8:	d107      	bne.n	80138ea <_strtol_l.constprop.0+0x56>
 80138da:	782c      	ldrb	r4, [r5, #0]
 80138dc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80138e0:	2c58      	cmp	r4, #88	; 0x58
 80138e2:	d14d      	bne.n	8013980 <_strtol_l.constprop.0+0xec>
 80138e4:	786c      	ldrb	r4, [r5, #1]
 80138e6:	2310      	movs	r3, #16
 80138e8:	3502      	adds	r5, #2
 80138ea:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80138ee:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80138f2:	f04f 0c00 	mov.w	ip, #0
 80138f6:	fbb8 f9f3 	udiv	r9, r8, r3
 80138fa:	4666      	mov	r6, ip
 80138fc:	fb03 8a19 	mls	sl, r3, r9, r8
 8013900:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8013904:	f1be 0f09 	cmp.w	lr, #9
 8013908:	d816      	bhi.n	8013938 <_strtol_l.constprop.0+0xa4>
 801390a:	4674      	mov	r4, lr
 801390c:	42a3      	cmp	r3, r4
 801390e:	dd24      	ble.n	801395a <_strtol_l.constprop.0+0xc6>
 8013910:	f1bc 0f00 	cmp.w	ip, #0
 8013914:	db1e      	blt.n	8013954 <_strtol_l.constprop.0+0xc0>
 8013916:	45b1      	cmp	r9, r6
 8013918:	d31c      	bcc.n	8013954 <_strtol_l.constprop.0+0xc0>
 801391a:	d101      	bne.n	8013920 <_strtol_l.constprop.0+0x8c>
 801391c:	45a2      	cmp	sl, r4
 801391e:	db19      	blt.n	8013954 <_strtol_l.constprop.0+0xc0>
 8013920:	fb06 4603 	mla	r6, r6, r3, r4
 8013924:	f04f 0c01 	mov.w	ip, #1
 8013928:	f815 4b01 	ldrb.w	r4, [r5], #1
 801392c:	e7e8      	b.n	8013900 <_strtol_l.constprop.0+0x6c>
 801392e:	2c2b      	cmp	r4, #43	; 0x2b
 8013930:	bf04      	itt	eq
 8013932:	782c      	ldrbeq	r4, [r5, #0]
 8013934:	1cb5      	addeq	r5, r6, #2
 8013936:	e7ca      	b.n	80138ce <_strtol_l.constprop.0+0x3a>
 8013938:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801393c:	f1be 0f19 	cmp.w	lr, #25
 8013940:	d801      	bhi.n	8013946 <_strtol_l.constprop.0+0xb2>
 8013942:	3c37      	subs	r4, #55	; 0x37
 8013944:	e7e2      	b.n	801390c <_strtol_l.constprop.0+0x78>
 8013946:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801394a:	f1be 0f19 	cmp.w	lr, #25
 801394e:	d804      	bhi.n	801395a <_strtol_l.constprop.0+0xc6>
 8013950:	3c57      	subs	r4, #87	; 0x57
 8013952:	e7db      	b.n	801390c <_strtol_l.constprop.0+0x78>
 8013954:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8013958:	e7e6      	b.n	8013928 <_strtol_l.constprop.0+0x94>
 801395a:	f1bc 0f00 	cmp.w	ip, #0
 801395e:	da05      	bge.n	801396c <_strtol_l.constprop.0+0xd8>
 8013960:	2322      	movs	r3, #34	; 0x22
 8013962:	6003      	str	r3, [r0, #0]
 8013964:	4646      	mov	r6, r8
 8013966:	b942      	cbnz	r2, 801397a <_strtol_l.constprop.0+0xe6>
 8013968:	4630      	mov	r0, r6
 801396a:	e79e      	b.n	80138aa <_strtol_l.constprop.0+0x16>
 801396c:	b107      	cbz	r7, 8013970 <_strtol_l.constprop.0+0xdc>
 801396e:	4276      	negs	r6, r6
 8013970:	2a00      	cmp	r2, #0
 8013972:	d0f9      	beq.n	8013968 <_strtol_l.constprop.0+0xd4>
 8013974:	f1bc 0f00 	cmp.w	ip, #0
 8013978:	d000      	beq.n	801397c <_strtol_l.constprop.0+0xe8>
 801397a:	1e69      	subs	r1, r5, #1
 801397c:	6011      	str	r1, [r2, #0]
 801397e:	e7f3      	b.n	8013968 <_strtol_l.constprop.0+0xd4>
 8013980:	2430      	movs	r4, #48	; 0x30
 8013982:	2b00      	cmp	r3, #0
 8013984:	d1b1      	bne.n	80138ea <_strtol_l.constprop.0+0x56>
 8013986:	2308      	movs	r3, #8
 8013988:	e7af      	b.n	80138ea <_strtol_l.constprop.0+0x56>
 801398a:	2c30      	cmp	r4, #48	; 0x30
 801398c:	d0a5      	beq.n	80138da <_strtol_l.constprop.0+0x46>
 801398e:	230a      	movs	r3, #10
 8013990:	e7ab      	b.n	80138ea <_strtol_l.constprop.0+0x56>
 8013992:	bf00      	nop
 8013994:	080182a7 	.word	0x080182a7

08013998 <strtol>:
 8013998:	4613      	mov	r3, r2
 801399a:	460a      	mov	r2, r1
 801399c:	4601      	mov	r1, r0
 801399e:	4802      	ldr	r0, [pc, #8]	; (80139a8 <strtol+0x10>)
 80139a0:	6800      	ldr	r0, [r0, #0]
 80139a2:	f7ff bf77 	b.w	8013894 <_strtol_l.constprop.0>
 80139a6:	bf00      	nop
 80139a8:	20000258 	.word	0x20000258

080139ac <_vsniprintf_r>:
 80139ac:	b530      	push	{r4, r5, lr}
 80139ae:	4614      	mov	r4, r2
 80139b0:	2c00      	cmp	r4, #0
 80139b2:	b09b      	sub	sp, #108	; 0x6c
 80139b4:	4605      	mov	r5, r0
 80139b6:	461a      	mov	r2, r3
 80139b8:	da05      	bge.n	80139c6 <_vsniprintf_r+0x1a>
 80139ba:	238b      	movs	r3, #139	; 0x8b
 80139bc:	6003      	str	r3, [r0, #0]
 80139be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80139c2:	b01b      	add	sp, #108	; 0x6c
 80139c4:	bd30      	pop	{r4, r5, pc}
 80139c6:	f44f 7302 	mov.w	r3, #520	; 0x208
 80139ca:	f8ad 300c 	strh.w	r3, [sp, #12]
 80139ce:	bf14      	ite	ne
 80139d0:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80139d4:	4623      	moveq	r3, r4
 80139d6:	9302      	str	r3, [sp, #8]
 80139d8:	9305      	str	r3, [sp, #20]
 80139da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80139de:	9100      	str	r1, [sp, #0]
 80139e0:	9104      	str	r1, [sp, #16]
 80139e2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80139e6:	4669      	mov	r1, sp
 80139e8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80139ea:	f002 f839 	bl	8015a60 <_svfiprintf_r>
 80139ee:	1c43      	adds	r3, r0, #1
 80139f0:	bfbc      	itt	lt
 80139f2:	238b      	movlt	r3, #139	; 0x8b
 80139f4:	602b      	strlt	r3, [r5, #0]
 80139f6:	2c00      	cmp	r4, #0
 80139f8:	d0e3      	beq.n	80139c2 <_vsniprintf_r+0x16>
 80139fa:	9b00      	ldr	r3, [sp, #0]
 80139fc:	2200      	movs	r2, #0
 80139fe:	701a      	strb	r2, [r3, #0]
 8013a00:	e7df      	b.n	80139c2 <_vsniprintf_r+0x16>
	...

08013a04 <vsniprintf>:
 8013a04:	b507      	push	{r0, r1, r2, lr}
 8013a06:	9300      	str	r3, [sp, #0]
 8013a08:	4613      	mov	r3, r2
 8013a0a:	460a      	mov	r2, r1
 8013a0c:	4601      	mov	r1, r0
 8013a0e:	4803      	ldr	r0, [pc, #12]	; (8013a1c <vsniprintf+0x18>)
 8013a10:	6800      	ldr	r0, [r0, #0]
 8013a12:	f7ff ffcb 	bl	80139ac <_vsniprintf_r>
 8013a16:	b003      	add	sp, #12
 8013a18:	f85d fb04 	ldr.w	pc, [sp], #4
 8013a1c:	20000258 	.word	0x20000258

08013a20 <quorem>:
 8013a20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a24:	6903      	ldr	r3, [r0, #16]
 8013a26:	690c      	ldr	r4, [r1, #16]
 8013a28:	42a3      	cmp	r3, r4
 8013a2a:	4607      	mov	r7, r0
 8013a2c:	f2c0 8081 	blt.w	8013b32 <quorem+0x112>
 8013a30:	3c01      	subs	r4, #1
 8013a32:	f101 0814 	add.w	r8, r1, #20
 8013a36:	f100 0514 	add.w	r5, r0, #20
 8013a3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013a3e:	9301      	str	r3, [sp, #4]
 8013a40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013a44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013a48:	3301      	adds	r3, #1
 8013a4a:	429a      	cmp	r2, r3
 8013a4c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013a50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013a54:	fbb2 f6f3 	udiv	r6, r2, r3
 8013a58:	d331      	bcc.n	8013abe <quorem+0x9e>
 8013a5a:	f04f 0e00 	mov.w	lr, #0
 8013a5e:	4640      	mov	r0, r8
 8013a60:	46ac      	mov	ip, r5
 8013a62:	46f2      	mov	sl, lr
 8013a64:	f850 2b04 	ldr.w	r2, [r0], #4
 8013a68:	b293      	uxth	r3, r2
 8013a6a:	fb06 e303 	mla	r3, r6, r3, lr
 8013a6e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8013a72:	b29b      	uxth	r3, r3
 8013a74:	ebaa 0303 	sub.w	r3, sl, r3
 8013a78:	f8dc a000 	ldr.w	sl, [ip]
 8013a7c:	0c12      	lsrs	r2, r2, #16
 8013a7e:	fa13 f38a 	uxtah	r3, r3, sl
 8013a82:	fb06 e202 	mla	r2, r6, r2, lr
 8013a86:	9300      	str	r3, [sp, #0]
 8013a88:	9b00      	ldr	r3, [sp, #0]
 8013a8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013a8e:	b292      	uxth	r2, r2
 8013a90:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8013a94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013a98:	f8bd 3000 	ldrh.w	r3, [sp]
 8013a9c:	4581      	cmp	r9, r0
 8013a9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013aa2:	f84c 3b04 	str.w	r3, [ip], #4
 8013aa6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013aaa:	d2db      	bcs.n	8013a64 <quorem+0x44>
 8013aac:	f855 300b 	ldr.w	r3, [r5, fp]
 8013ab0:	b92b      	cbnz	r3, 8013abe <quorem+0x9e>
 8013ab2:	9b01      	ldr	r3, [sp, #4]
 8013ab4:	3b04      	subs	r3, #4
 8013ab6:	429d      	cmp	r5, r3
 8013ab8:	461a      	mov	r2, r3
 8013aba:	d32e      	bcc.n	8013b1a <quorem+0xfa>
 8013abc:	613c      	str	r4, [r7, #16]
 8013abe:	4638      	mov	r0, r7
 8013ac0:	f001 fc86 	bl	80153d0 <__mcmp>
 8013ac4:	2800      	cmp	r0, #0
 8013ac6:	db24      	blt.n	8013b12 <quorem+0xf2>
 8013ac8:	3601      	adds	r6, #1
 8013aca:	4628      	mov	r0, r5
 8013acc:	f04f 0c00 	mov.w	ip, #0
 8013ad0:	f858 2b04 	ldr.w	r2, [r8], #4
 8013ad4:	f8d0 e000 	ldr.w	lr, [r0]
 8013ad8:	b293      	uxth	r3, r2
 8013ada:	ebac 0303 	sub.w	r3, ip, r3
 8013ade:	0c12      	lsrs	r2, r2, #16
 8013ae0:	fa13 f38e 	uxtah	r3, r3, lr
 8013ae4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013ae8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013aec:	b29b      	uxth	r3, r3
 8013aee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013af2:	45c1      	cmp	r9, r8
 8013af4:	f840 3b04 	str.w	r3, [r0], #4
 8013af8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013afc:	d2e8      	bcs.n	8013ad0 <quorem+0xb0>
 8013afe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013b02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013b06:	b922      	cbnz	r2, 8013b12 <quorem+0xf2>
 8013b08:	3b04      	subs	r3, #4
 8013b0a:	429d      	cmp	r5, r3
 8013b0c:	461a      	mov	r2, r3
 8013b0e:	d30a      	bcc.n	8013b26 <quorem+0x106>
 8013b10:	613c      	str	r4, [r7, #16]
 8013b12:	4630      	mov	r0, r6
 8013b14:	b003      	add	sp, #12
 8013b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b1a:	6812      	ldr	r2, [r2, #0]
 8013b1c:	3b04      	subs	r3, #4
 8013b1e:	2a00      	cmp	r2, #0
 8013b20:	d1cc      	bne.n	8013abc <quorem+0x9c>
 8013b22:	3c01      	subs	r4, #1
 8013b24:	e7c7      	b.n	8013ab6 <quorem+0x96>
 8013b26:	6812      	ldr	r2, [r2, #0]
 8013b28:	3b04      	subs	r3, #4
 8013b2a:	2a00      	cmp	r2, #0
 8013b2c:	d1f0      	bne.n	8013b10 <quorem+0xf0>
 8013b2e:	3c01      	subs	r4, #1
 8013b30:	e7eb      	b.n	8013b0a <quorem+0xea>
 8013b32:	2000      	movs	r0, #0
 8013b34:	e7ee      	b.n	8013b14 <quorem+0xf4>
	...

08013b38 <_dtoa_r>:
 8013b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b3c:	ed2d 8b04 	vpush	{d8-d9}
 8013b40:	ec57 6b10 	vmov	r6, r7, d0
 8013b44:	b093      	sub	sp, #76	; 0x4c
 8013b46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013b48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013b4c:	9106      	str	r1, [sp, #24]
 8013b4e:	ee10 aa10 	vmov	sl, s0
 8013b52:	4604      	mov	r4, r0
 8013b54:	9209      	str	r2, [sp, #36]	; 0x24
 8013b56:	930c      	str	r3, [sp, #48]	; 0x30
 8013b58:	46bb      	mov	fp, r7
 8013b5a:	b975      	cbnz	r5, 8013b7a <_dtoa_r+0x42>
 8013b5c:	2010      	movs	r0, #16
 8013b5e:	f001 f951 	bl	8014e04 <malloc>
 8013b62:	4602      	mov	r2, r0
 8013b64:	6260      	str	r0, [r4, #36]	; 0x24
 8013b66:	b920      	cbnz	r0, 8013b72 <_dtoa_r+0x3a>
 8013b68:	4ba7      	ldr	r3, [pc, #668]	; (8013e08 <_dtoa_r+0x2d0>)
 8013b6a:	21ea      	movs	r1, #234	; 0xea
 8013b6c:	48a7      	ldr	r0, [pc, #668]	; (8013e0c <_dtoa_r+0x2d4>)
 8013b6e:	f002 f8f1 	bl	8015d54 <__assert_func>
 8013b72:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013b76:	6005      	str	r5, [r0, #0]
 8013b78:	60c5      	str	r5, [r0, #12]
 8013b7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013b7c:	6819      	ldr	r1, [r3, #0]
 8013b7e:	b151      	cbz	r1, 8013b96 <_dtoa_r+0x5e>
 8013b80:	685a      	ldr	r2, [r3, #4]
 8013b82:	604a      	str	r2, [r1, #4]
 8013b84:	2301      	movs	r3, #1
 8013b86:	4093      	lsls	r3, r2
 8013b88:	608b      	str	r3, [r1, #8]
 8013b8a:	4620      	mov	r0, r4
 8013b8c:	f001 f994 	bl	8014eb8 <_Bfree>
 8013b90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013b92:	2200      	movs	r2, #0
 8013b94:	601a      	str	r2, [r3, #0]
 8013b96:	1e3b      	subs	r3, r7, #0
 8013b98:	bfaa      	itet	ge
 8013b9a:	2300      	movge	r3, #0
 8013b9c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8013ba0:	f8c8 3000 	strge.w	r3, [r8]
 8013ba4:	4b9a      	ldr	r3, [pc, #616]	; (8013e10 <_dtoa_r+0x2d8>)
 8013ba6:	bfbc      	itt	lt
 8013ba8:	2201      	movlt	r2, #1
 8013baa:	f8c8 2000 	strlt.w	r2, [r8]
 8013bae:	ea33 030b 	bics.w	r3, r3, fp
 8013bb2:	d11b      	bne.n	8013bec <_dtoa_r+0xb4>
 8013bb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013bb6:	f242 730f 	movw	r3, #9999	; 0x270f
 8013bba:	6013      	str	r3, [r2, #0]
 8013bbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013bc0:	4333      	orrs	r3, r6
 8013bc2:	f000 8592 	beq.w	80146ea <_dtoa_r+0xbb2>
 8013bc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013bc8:	b963      	cbnz	r3, 8013be4 <_dtoa_r+0xac>
 8013bca:	4b92      	ldr	r3, [pc, #584]	; (8013e14 <_dtoa_r+0x2dc>)
 8013bcc:	e022      	b.n	8013c14 <_dtoa_r+0xdc>
 8013bce:	4b92      	ldr	r3, [pc, #584]	; (8013e18 <_dtoa_r+0x2e0>)
 8013bd0:	9301      	str	r3, [sp, #4]
 8013bd2:	3308      	adds	r3, #8
 8013bd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013bd6:	6013      	str	r3, [r2, #0]
 8013bd8:	9801      	ldr	r0, [sp, #4]
 8013bda:	b013      	add	sp, #76	; 0x4c
 8013bdc:	ecbd 8b04 	vpop	{d8-d9}
 8013be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013be4:	4b8b      	ldr	r3, [pc, #556]	; (8013e14 <_dtoa_r+0x2dc>)
 8013be6:	9301      	str	r3, [sp, #4]
 8013be8:	3303      	adds	r3, #3
 8013bea:	e7f3      	b.n	8013bd4 <_dtoa_r+0x9c>
 8013bec:	2200      	movs	r2, #0
 8013bee:	2300      	movs	r3, #0
 8013bf0:	4650      	mov	r0, sl
 8013bf2:	4659      	mov	r1, fp
 8013bf4:	f7ec ff68 	bl	8000ac8 <__aeabi_dcmpeq>
 8013bf8:	ec4b ab19 	vmov	d9, sl, fp
 8013bfc:	4680      	mov	r8, r0
 8013bfe:	b158      	cbz	r0, 8013c18 <_dtoa_r+0xe0>
 8013c00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013c02:	2301      	movs	r3, #1
 8013c04:	6013      	str	r3, [r2, #0]
 8013c06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	f000 856b 	beq.w	80146e4 <_dtoa_r+0xbac>
 8013c0e:	4883      	ldr	r0, [pc, #524]	; (8013e1c <_dtoa_r+0x2e4>)
 8013c10:	6018      	str	r0, [r3, #0]
 8013c12:	1e43      	subs	r3, r0, #1
 8013c14:	9301      	str	r3, [sp, #4]
 8013c16:	e7df      	b.n	8013bd8 <_dtoa_r+0xa0>
 8013c18:	ec4b ab10 	vmov	d0, sl, fp
 8013c1c:	aa10      	add	r2, sp, #64	; 0x40
 8013c1e:	a911      	add	r1, sp, #68	; 0x44
 8013c20:	4620      	mov	r0, r4
 8013c22:	f001 fcf7 	bl	8015614 <__d2b>
 8013c26:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8013c2a:	ee08 0a10 	vmov	s16, r0
 8013c2e:	2d00      	cmp	r5, #0
 8013c30:	f000 8084 	beq.w	8013d3c <_dtoa_r+0x204>
 8013c34:	ee19 3a90 	vmov	r3, s19
 8013c38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013c3c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8013c40:	4656      	mov	r6, sl
 8013c42:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8013c46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8013c4a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8013c4e:	4b74      	ldr	r3, [pc, #464]	; (8013e20 <_dtoa_r+0x2e8>)
 8013c50:	2200      	movs	r2, #0
 8013c52:	4630      	mov	r0, r6
 8013c54:	4639      	mov	r1, r7
 8013c56:	f7ec fb17 	bl	8000288 <__aeabi_dsub>
 8013c5a:	a365      	add	r3, pc, #404	; (adr r3, 8013df0 <_dtoa_r+0x2b8>)
 8013c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c60:	f7ec fcca 	bl	80005f8 <__aeabi_dmul>
 8013c64:	a364      	add	r3, pc, #400	; (adr r3, 8013df8 <_dtoa_r+0x2c0>)
 8013c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c6a:	f7ec fb0f 	bl	800028c <__adddf3>
 8013c6e:	4606      	mov	r6, r0
 8013c70:	4628      	mov	r0, r5
 8013c72:	460f      	mov	r7, r1
 8013c74:	f7ec fc56 	bl	8000524 <__aeabi_i2d>
 8013c78:	a361      	add	r3, pc, #388	; (adr r3, 8013e00 <_dtoa_r+0x2c8>)
 8013c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c7e:	f7ec fcbb 	bl	80005f8 <__aeabi_dmul>
 8013c82:	4602      	mov	r2, r0
 8013c84:	460b      	mov	r3, r1
 8013c86:	4630      	mov	r0, r6
 8013c88:	4639      	mov	r1, r7
 8013c8a:	f7ec faff 	bl	800028c <__adddf3>
 8013c8e:	4606      	mov	r6, r0
 8013c90:	460f      	mov	r7, r1
 8013c92:	f7ec ff61 	bl	8000b58 <__aeabi_d2iz>
 8013c96:	2200      	movs	r2, #0
 8013c98:	9000      	str	r0, [sp, #0]
 8013c9a:	2300      	movs	r3, #0
 8013c9c:	4630      	mov	r0, r6
 8013c9e:	4639      	mov	r1, r7
 8013ca0:	f7ec ff1c 	bl	8000adc <__aeabi_dcmplt>
 8013ca4:	b150      	cbz	r0, 8013cbc <_dtoa_r+0x184>
 8013ca6:	9800      	ldr	r0, [sp, #0]
 8013ca8:	f7ec fc3c 	bl	8000524 <__aeabi_i2d>
 8013cac:	4632      	mov	r2, r6
 8013cae:	463b      	mov	r3, r7
 8013cb0:	f7ec ff0a 	bl	8000ac8 <__aeabi_dcmpeq>
 8013cb4:	b910      	cbnz	r0, 8013cbc <_dtoa_r+0x184>
 8013cb6:	9b00      	ldr	r3, [sp, #0]
 8013cb8:	3b01      	subs	r3, #1
 8013cba:	9300      	str	r3, [sp, #0]
 8013cbc:	9b00      	ldr	r3, [sp, #0]
 8013cbe:	2b16      	cmp	r3, #22
 8013cc0:	d85a      	bhi.n	8013d78 <_dtoa_r+0x240>
 8013cc2:	9a00      	ldr	r2, [sp, #0]
 8013cc4:	4b57      	ldr	r3, [pc, #348]	; (8013e24 <_dtoa_r+0x2ec>)
 8013cc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cce:	ec51 0b19 	vmov	r0, r1, d9
 8013cd2:	f7ec ff03 	bl	8000adc <__aeabi_dcmplt>
 8013cd6:	2800      	cmp	r0, #0
 8013cd8:	d050      	beq.n	8013d7c <_dtoa_r+0x244>
 8013cda:	9b00      	ldr	r3, [sp, #0]
 8013cdc:	3b01      	subs	r3, #1
 8013cde:	9300      	str	r3, [sp, #0]
 8013ce0:	2300      	movs	r3, #0
 8013ce2:	930b      	str	r3, [sp, #44]	; 0x2c
 8013ce4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013ce6:	1b5d      	subs	r5, r3, r5
 8013ce8:	1e6b      	subs	r3, r5, #1
 8013cea:	9305      	str	r3, [sp, #20]
 8013cec:	bf45      	ittet	mi
 8013cee:	f1c5 0301 	rsbmi	r3, r5, #1
 8013cf2:	9304      	strmi	r3, [sp, #16]
 8013cf4:	2300      	movpl	r3, #0
 8013cf6:	2300      	movmi	r3, #0
 8013cf8:	bf4c      	ite	mi
 8013cfa:	9305      	strmi	r3, [sp, #20]
 8013cfc:	9304      	strpl	r3, [sp, #16]
 8013cfe:	9b00      	ldr	r3, [sp, #0]
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	db3d      	blt.n	8013d80 <_dtoa_r+0x248>
 8013d04:	9b05      	ldr	r3, [sp, #20]
 8013d06:	9a00      	ldr	r2, [sp, #0]
 8013d08:	920a      	str	r2, [sp, #40]	; 0x28
 8013d0a:	4413      	add	r3, r2
 8013d0c:	9305      	str	r3, [sp, #20]
 8013d0e:	2300      	movs	r3, #0
 8013d10:	9307      	str	r3, [sp, #28]
 8013d12:	9b06      	ldr	r3, [sp, #24]
 8013d14:	2b09      	cmp	r3, #9
 8013d16:	f200 8089 	bhi.w	8013e2c <_dtoa_r+0x2f4>
 8013d1a:	2b05      	cmp	r3, #5
 8013d1c:	bfc4      	itt	gt
 8013d1e:	3b04      	subgt	r3, #4
 8013d20:	9306      	strgt	r3, [sp, #24]
 8013d22:	9b06      	ldr	r3, [sp, #24]
 8013d24:	f1a3 0302 	sub.w	r3, r3, #2
 8013d28:	bfcc      	ite	gt
 8013d2a:	2500      	movgt	r5, #0
 8013d2c:	2501      	movle	r5, #1
 8013d2e:	2b03      	cmp	r3, #3
 8013d30:	f200 8087 	bhi.w	8013e42 <_dtoa_r+0x30a>
 8013d34:	e8df f003 	tbb	[pc, r3]
 8013d38:	59383a2d 	.word	0x59383a2d
 8013d3c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8013d40:	441d      	add	r5, r3
 8013d42:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8013d46:	2b20      	cmp	r3, #32
 8013d48:	bfc1      	itttt	gt
 8013d4a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013d4e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8013d52:	fa0b f303 	lslgt.w	r3, fp, r3
 8013d56:	fa26 f000 	lsrgt.w	r0, r6, r0
 8013d5a:	bfda      	itte	le
 8013d5c:	f1c3 0320 	rsble	r3, r3, #32
 8013d60:	fa06 f003 	lslle.w	r0, r6, r3
 8013d64:	4318      	orrgt	r0, r3
 8013d66:	f7ec fbcd 	bl	8000504 <__aeabi_ui2d>
 8013d6a:	2301      	movs	r3, #1
 8013d6c:	4606      	mov	r6, r0
 8013d6e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8013d72:	3d01      	subs	r5, #1
 8013d74:	930e      	str	r3, [sp, #56]	; 0x38
 8013d76:	e76a      	b.n	8013c4e <_dtoa_r+0x116>
 8013d78:	2301      	movs	r3, #1
 8013d7a:	e7b2      	b.n	8013ce2 <_dtoa_r+0x1aa>
 8013d7c:	900b      	str	r0, [sp, #44]	; 0x2c
 8013d7e:	e7b1      	b.n	8013ce4 <_dtoa_r+0x1ac>
 8013d80:	9b04      	ldr	r3, [sp, #16]
 8013d82:	9a00      	ldr	r2, [sp, #0]
 8013d84:	1a9b      	subs	r3, r3, r2
 8013d86:	9304      	str	r3, [sp, #16]
 8013d88:	4253      	negs	r3, r2
 8013d8a:	9307      	str	r3, [sp, #28]
 8013d8c:	2300      	movs	r3, #0
 8013d8e:	930a      	str	r3, [sp, #40]	; 0x28
 8013d90:	e7bf      	b.n	8013d12 <_dtoa_r+0x1da>
 8013d92:	2300      	movs	r3, #0
 8013d94:	9308      	str	r3, [sp, #32]
 8013d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	dc55      	bgt.n	8013e48 <_dtoa_r+0x310>
 8013d9c:	2301      	movs	r3, #1
 8013d9e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8013da2:	461a      	mov	r2, r3
 8013da4:	9209      	str	r2, [sp, #36]	; 0x24
 8013da6:	e00c      	b.n	8013dc2 <_dtoa_r+0x28a>
 8013da8:	2301      	movs	r3, #1
 8013daa:	e7f3      	b.n	8013d94 <_dtoa_r+0x25c>
 8013dac:	2300      	movs	r3, #0
 8013dae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013db0:	9308      	str	r3, [sp, #32]
 8013db2:	9b00      	ldr	r3, [sp, #0]
 8013db4:	4413      	add	r3, r2
 8013db6:	9302      	str	r3, [sp, #8]
 8013db8:	3301      	adds	r3, #1
 8013dba:	2b01      	cmp	r3, #1
 8013dbc:	9303      	str	r3, [sp, #12]
 8013dbe:	bfb8      	it	lt
 8013dc0:	2301      	movlt	r3, #1
 8013dc2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8013dc4:	2200      	movs	r2, #0
 8013dc6:	6042      	str	r2, [r0, #4]
 8013dc8:	2204      	movs	r2, #4
 8013dca:	f102 0614 	add.w	r6, r2, #20
 8013dce:	429e      	cmp	r6, r3
 8013dd0:	6841      	ldr	r1, [r0, #4]
 8013dd2:	d93d      	bls.n	8013e50 <_dtoa_r+0x318>
 8013dd4:	4620      	mov	r0, r4
 8013dd6:	f001 f82f 	bl	8014e38 <_Balloc>
 8013dda:	9001      	str	r0, [sp, #4]
 8013ddc:	2800      	cmp	r0, #0
 8013dde:	d13b      	bne.n	8013e58 <_dtoa_r+0x320>
 8013de0:	4b11      	ldr	r3, [pc, #68]	; (8013e28 <_dtoa_r+0x2f0>)
 8013de2:	4602      	mov	r2, r0
 8013de4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013de8:	e6c0      	b.n	8013b6c <_dtoa_r+0x34>
 8013dea:	2301      	movs	r3, #1
 8013dec:	e7df      	b.n	8013dae <_dtoa_r+0x276>
 8013dee:	bf00      	nop
 8013df0:	636f4361 	.word	0x636f4361
 8013df4:	3fd287a7 	.word	0x3fd287a7
 8013df8:	8b60c8b3 	.word	0x8b60c8b3
 8013dfc:	3fc68a28 	.word	0x3fc68a28
 8013e00:	509f79fb 	.word	0x509f79fb
 8013e04:	3fd34413 	.word	0x3fd34413
 8013e08:	0801843d 	.word	0x0801843d
 8013e0c:	08018454 	.word	0x08018454
 8013e10:	7ff00000 	.word	0x7ff00000
 8013e14:	08018439 	.word	0x08018439
 8013e18:	08018430 	.word	0x08018430
 8013e1c:	080183bd 	.word	0x080183bd
 8013e20:	3ff80000 	.word	0x3ff80000
 8013e24:	080185c0 	.word	0x080185c0
 8013e28:	080184af 	.word	0x080184af
 8013e2c:	2501      	movs	r5, #1
 8013e2e:	2300      	movs	r3, #0
 8013e30:	9306      	str	r3, [sp, #24]
 8013e32:	9508      	str	r5, [sp, #32]
 8013e34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013e38:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8013e3c:	2200      	movs	r2, #0
 8013e3e:	2312      	movs	r3, #18
 8013e40:	e7b0      	b.n	8013da4 <_dtoa_r+0x26c>
 8013e42:	2301      	movs	r3, #1
 8013e44:	9308      	str	r3, [sp, #32]
 8013e46:	e7f5      	b.n	8013e34 <_dtoa_r+0x2fc>
 8013e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e4a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8013e4e:	e7b8      	b.n	8013dc2 <_dtoa_r+0x28a>
 8013e50:	3101      	adds	r1, #1
 8013e52:	6041      	str	r1, [r0, #4]
 8013e54:	0052      	lsls	r2, r2, #1
 8013e56:	e7b8      	b.n	8013dca <_dtoa_r+0x292>
 8013e58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013e5a:	9a01      	ldr	r2, [sp, #4]
 8013e5c:	601a      	str	r2, [r3, #0]
 8013e5e:	9b03      	ldr	r3, [sp, #12]
 8013e60:	2b0e      	cmp	r3, #14
 8013e62:	f200 809d 	bhi.w	8013fa0 <_dtoa_r+0x468>
 8013e66:	2d00      	cmp	r5, #0
 8013e68:	f000 809a 	beq.w	8013fa0 <_dtoa_r+0x468>
 8013e6c:	9b00      	ldr	r3, [sp, #0]
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	dd32      	ble.n	8013ed8 <_dtoa_r+0x3a0>
 8013e72:	4ab7      	ldr	r2, [pc, #732]	; (8014150 <_dtoa_r+0x618>)
 8013e74:	f003 030f 	and.w	r3, r3, #15
 8013e78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013e7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013e80:	9b00      	ldr	r3, [sp, #0]
 8013e82:	05d8      	lsls	r0, r3, #23
 8013e84:	ea4f 1723 	mov.w	r7, r3, asr #4
 8013e88:	d516      	bpl.n	8013eb8 <_dtoa_r+0x380>
 8013e8a:	4bb2      	ldr	r3, [pc, #712]	; (8014154 <_dtoa_r+0x61c>)
 8013e8c:	ec51 0b19 	vmov	r0, r1, d9
 8013e90:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013e94:	f7ec fcda 	bl	800084c <__aeabi_ddiv>
 8013e98:	f007 070f 	and.w	r7, r7, #15
 8013e9c:	4682      	mov	sl, r0
 8013e9e:	468b      	mov	fp, r1
 8013ea0:	2503      	movs	r5, #3
 8013ea2:	4eac      	ldr	r6, [pc, #688]	; (8014154 <_dtoa_r+0x61c>)
 8013ea4:	b957      	cbnz	r7, 8013ebc <_dtoa_r+0x384>
 8013ea6:	4642      	mov	r2, r8
 8013ea8:	464b      	mov	r3, r9
 8013eaa:	4650      	mov	r0, sl
 8013eac:	4659      	mov	r1, fp
 8013eae:	f7ec fccd 	bl	800084c <__aeabi_ddiv>
 8013eb2:	4682      	mov	sl, r0
 8013eb4:	468b      	mov	fp, r1
 8013eb6:	e028      	b.n	8013f0a <_dtoa_r+0x3d2>
 8013eb8:	2502      	movs	r5, #2
 8013eba:	e7f2      	b.n	8013ea2 <_dtoa_r+0x36a>
 8013ebc:	07f9      	lsls	r1, r7, #31
 8013ebe:	d508      	bpl.n	8013ed2 <_dtoa_r+0x39a>
 8013ec0:	4640      	mov	r0, r8
 8013ec2:	4649      	mov	r1, r9
 8013ec4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013ec8:	f7ec fb96 	bl	80005f8 <__aeabi_dmul>
 8013ecc:	3501      	adds	r5, #1
 8013ece:	4680      	mov	r8, r0
 8013ed0:	4689      	mov	r9, r1
 8013ed2:	107f      	asrs	r7, r7, #1
 8013ed4:	3608      	adds	r6, #8
 8013ed6:	e7e5      	b.n	8013ea4 <_dtoa_r+0x36c>
 8013ed8:	f000 809b 	beq.w	8014012 <_dtoa_r+0x4da>
 8013edc:	9b00      	ldr	r3, [sp, #0]
 8013ede:	4f9d      	ldr	r7, [pc, #628]	; (8014154 <_dtoa_r+0x61c>)
 8013ee0:	425e      	negs	r6, r3
 8013ee2:	4b9b      	ldr	r3, [pc, #620]	; (8014150 <_dtoa_r+0x618>)
 8013ee4:	f006 020f 	and.w	r2, r6, #15
 8013ee8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ef0:	ec51 0b19 	vmov	r0, r1, d9
 8013ef4:	f7ec fb80 	bl	80005f8 <__aeabi_dmul>
 8013ef8:	1136      	asrs	r6, r6, #4
 8013efa:	4682      	mov	sl, r0
 8013efc:	468b      	mov	fp, r1
 8013efe:	2300      	movs	r3, #0
 8013f00:	2502      	movs	r5, #2
 8013f02:	2e00      	cmp	r6, #0
 8013f04:	d17a      	bne.n	8013ffc <_dtoa_r+0x4c4>
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d1d3      	bne.n	8013eb2 <_dtoa_r+0x37a>
 8013f0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	f000 8082 	beq.w	8014016 <_dtoa_r+0x4de>
 8013f12:	4b91      	ldr	r3, [pc, #580]	; (8014158 <_dtoa_r+0x620>)
 8013f14:	2200      	movs	r2, #0
 8013f16:	4650      	mov	r0, sl
 8013f18:	4659      	mov	r1, fp
 8013f1a:	f7ec fddf 	bl	8000adc <__aeabi_dcmplt>
 8013f1e:	2800      	cmp	r0, #0
 8013f20:	d079      	beq.n	8014016 <_dtoa_r+0x4de>
 8013f22:	9b03      	ldr	r3, [sp, #12]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d076      	beq.n	8014016 <_dtoa_r+0x4de>
 8013f28:	9b02      	ldr	r3, [sp, #8]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	dd36      	ble.n	8013f9c <_dtoa_r+0x464>
 8013f2e:	9b00      	ldr	r3, [sp, #0]
 8013f30:	4650      	mov	r0, sl
 8013f32:	4659      	mov	r1, fp
 8013f34:	1e5f      	subs	r7, r3, #1
 8013f36:	2200      	movs	r2, #0
 8013f38:	4b88      	ldr	r3, [pc, #544]	; (801415c <_dtoa_r+0x624>)
 8013f3a:	f7ec fb5d 	bl	80005f8 <__aeabi_dmul>
 8013f3e:	9e02      	ldr	r6, [sp, #8]
 8013f40:	4682      	mov	sl, r0
 8013f42:	468b      	mov	fp, r1
 8013f44:	3501      	adds	r5, #1
 8013f46:	4628      	mov	r0, r5
 8013f48:	f7ec faec 	bl	8000524 <__aeabi_i2d>
 8013f4c:	4652      	mov	r2, sl
 8013f4e:	465b      	mov	r3, fp
 8013f50:	f7ec fb52 	bl	80005f8 <__aeabi_dmul>
 8013f54:	4b82      	ldr	r3, [pc, #520]	; (8014160 <_dtoa_r+0x628>)
 8013f56:	2200      	movs	r2, #0
 8013f58:	f7ec f998 	bl	800028c <__adddf3>
 8013f5c:	46d0      	mov	r8, sl
 8013f5e:	46d9      	mov	r9, fp
 8013f60:	4682      	mov	sl, r0
 8013f62:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8013f66:	2e00      	cmp	r6, #0
 8013f68:	d158      	bne.n	801401c <_dtoa_r+0x4e4>
 8013f6a:	4b7e      	ldr	r3, [pc, #504]	; (8014164 <_dtoa_r+0x62c>)
 8013f6c:	2200      	movs	r2, #0
 8013f6e:	4640      	mov	r0, r8
 8013f70:	4649      	mov	r1, r9
 8013f72:	f7ec f989 	bl	8000288 <__aeabi_dsub>
 8013f76:	4652      	mov	r2, sl
 8013f78:	465b      	mov	r3, fp
 8013f7a:	4680      	mov	r8, r0
 8013f7c:	4689      	mov	r9, r1
 8013f7e:	f7ec fdcb 	bl	8000b18 <__aeabi_dcmpgt>
 8013f82:	2800      	cmp	r0, #0
 8013f84:	f040 8295 	bne.w	80144b2 <_dtoa_r+0x97a>
 8013f88:	4652      	mov	r2, sl
 8013f8a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013f8e:	4640      	mov	r0, r8
 8013f90:	4649      	mov	r1, r9
 8013f92:	f7ec fda3 	bl	8000adc <__aeabi_dcmplt>
 8013f96:	2800      	cmp	r0, #0
 8013f98:	f040 8289 	bne.w	80144ae <_dtoa_r+0x976>
 8013f9c:	ec5b ab19 	vmov	sl, fp, d9
 8013fa0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	f2c0 8148 	blt.w	8014238 <_dtoa_r+0x700>
 8013fa8:	9a00      	ldr	r2, [sp, #0]
 8013faa:	2a0e      	cmp	r2, #14
 8013fac:	f300 8144 	bgt.w	8014238 <_dtoa_r+0x700>
 8013fb0:	4b67      	ldr	r3, [pc, #412]	; (8014150 <_dtoa_r+0x618>)
 8013fb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013fb6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013fba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	f280 80d5 	bge.w	801416c <_dtoa_r+0x634>
 8013fc2:	9b03      	ldr	r3, [sp, #12]
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	f300 80d1 	bgt.w	801416c <_dtoa_r+0x634>
 8013fca:	f040 826f 	bne.w	80144ac <_dtoa_r+0x974>
 8013fce:	4b65      	ldr	r3, [pc, #404]	; (8014164 <_dtoa_r+0x62c>)
 8013fd0:	2200      	movs	r2, #0
 8013fd2:	4640      	mov	r0, r8
 8013fd4:	4649      	mov	r1, r9
 8013fd6:	f7ec fb0f 	bl	80005f8 <__aeabi_dmul>
 8013fda:	4652      	mov	r2, sl
 8013fdc:	465b      	mov	r3, fp
 8013fde:	f7ec fd91 	bl	8000b04 <__aeabi_dcmpge>
 8013fe2:	9e03      	ldr	r6, [sp, #12]
 8013fe4:	4637      	mov	r7, r6
 8013fe6:	2800      	cmp	r0, #0
 8013fe8:	f040 8245 	bne.w	8014476 <_dtoa_r+0x93e>
 8013fec:	9d01      	ldr	r5, [sp, #4]
 8013fee:	2331      	movs	r3, #49	; 0x31
 8013ff0:	f805 3b01 	strb.w	r3, [r5], #1
 8013ff4:	9b00      	ldr	r3, [sp, #0]
 8013ff6:	3301      	adds	r3, #1
 8013ff8:	9300      	str	r3, [sp, #0]
 8013ffa:	e240      	b.n	801447e <_dtoa_r+0x946>
 8013ffc:	07f2      	lsls	r2, r6, #31
 8013ffe:	d505      	bpl.n	801400c <_dtoa_r+0x4d4>
 8014000:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014004:	f7ec faf8 	bl	80005f8 <__aeabi_dmul>
 8014008:	3501      	adds	r5, #1
 801400a:	2301      	movs	r3, #1
 801400c:	1076      	asrs	r6, r6, #1
 801400e:	3708      	adds	r7, #8
 8014010:	e777      	b.n	8013f02 <_dtoa_r+0x3ca>
 8014012:	2502      	movs	r5, #2
 8014014:	e779      	b.n	8013f0a <_dtoa_r+0x3d2>
 8014016:	9f00      	ldr	r7, [sp, #0]
 8014018:	9e03      	ldr	r6, [sp, #12]
 801401a:	e794      	b.n	8013f46 <_dtoa_r+0x40e>
 801401c:	9901      	ldr	r1, [sp, #4]
 801401e:	4b4c      	ldr	r3, [pc, #304]	; (8014150 <_dtoa_r+0x618>)
 8014020:	4431      	add	r1, r6
 8014022:	910d      	str	r1, [sp, #52]	; 0x34
 8014024:	9908      	ldr	r1, [sp, #32]
 8014026:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801402a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801402e:	2900      	cmp	r1, #0
 8014030:	d043      	beq.n	80140ba <_dtoa_r+0x582>
 8014032:	494d      	ldr	r1, [pc, #308]	; (8014168 <_dtoa_r+0x630>)
 8014034:	2000      	movs	r0, #0
 8014036:	f7ec fc09 	bl	800084c <__aeabi_ddiv>
 801403a:	4652      	mov	r2, sl
 801403c:	465b      	mov	r3, fp
 801403e:	f7ec f923 	bl	8000288 <__aeabi_dsub>
 8014042:	9d01      	ldr	r5, [sp, #4]
 8014044:	4682      	mov	sl, r0
 8014046:	468b      	mov	fp, r1
 8014048:	4649      	mov	r1, r9
 801404a:	4640      	mov	r0, r8
 801404c:	f7ec fd84 	bl	8000b58 <__aeabi_d2iz>
 8014050:	4606      	mov	r6, r0
 8014052:	f7ec fa67 	bl	8000524 <__aeabi_i2d>
 8014056:	4602      	mov	r2, r0
 8014058:	460b      	mov	r3, r1
 801405a:	4640      	mov	r0, r8
 801405c:	4649      	mov	r1, r9
 801405e:	f7ec f913 	bl	8000288 <__aeabi_dsub>
 8014062:	3630      	adds	r6, #48	; 0x30
 8014064:	f805 6b01 	strb.w	r6, [r5], #1
 8014068:	4652      	mov	r2, sl
 801406a:	465b      	mov	r3, fp
 801406c:	4680      	mov	r8, r0
 801406e:	4689      	mov	r9, r1
 8014070:	f7ec fd34 	bl	8000adc <__aeabi_dcmplt>
 8014074:	2800      	cmp	r0, #0
 8014076:	d163      	bne.n	8014140 <_dtoa_r+0x608>
 8014078:	4642      	mov	r2, r8
 801407a:	464b      	mov	r3, r9
 801407c:	4936      	ldr	r1, [pc, #216]	; (8014158 <_dtoa_r+0x620>)
 801407e:	2000      	movs	r0, #0
 8014080:	f7ec f902 	bl	8000288 <__aeabi_dsub>
 8014084:	4652      	mov	r2, sl
 8014086:	465b      	mov	r3, fp
 8014088:	f7ec fd28 	bl	8000adc <__aeabi_dcmplt>
 801408c:	2800      	cmp	r0, #0
 801408e:	f040 80b5 	bne.w	80141fc <_dtoa_r+0x6c4>
 8014092:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014094:	429d      	cmp	r5, r3
 8014096:	d081      	beq.n	8013f9c <_dtoa_r+0x464>
 8014098:	4b30      	ldr	r3, [pc, #192]	; (801415c <_dtoa_r+0x624>)
 801409a:	2200      	movs	r2, #0
 801409c:	4650      	mov	r0, sl
 801409e:	4659      	mov	r1, fp
 80140a0:	f7ec faaa 	bl	80005f8 <__aeabi_dmul>
 80140a4:	4b2d      	ldr	r3, [pc, #180]	; (801415c <_dtoa_r+0x624>)
 80140a6:	4682      	mov	sl, r0
 80140a8:	468b      	mov	fp, r1
 80140aa:	4640      	mov	r0, r8
 80140ac:	4649      	mov	r1, r9
 80140ae:	2200      	movs	r2, #0
 80140b0:	f7ec faa2 	bl	80005f8 <__aeabi_dmul>
 80140b4:	4680      	mov	r8, r0
 80140b6:	4689      	mov	r9, r1
 80140b8:	e7c6      	b.n	8014048 <_dtoa_r+0x510>
 80140ba:	4650      	mov	r0, sl
 80140bc:	4659      	mov	r1, fp
 80140be:	f7ec fa9b 	bl	80005f8 <__aeabi_dmul>
 80140c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80140c4:	9d01      	ldr	r5, [sp, #4]
 80140c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80140c8:	4682      	mov	sl, r0
 80140ca:	468b      	mov	fp, r1
 80140cc:	4649      	mov	r1, r9
 80140ce:	4640      	mov	r0, r8
 80140d0:	f7ec fd42 	bl	8000b58 <__aeabi_d2iz>
 80140d4:	4606      	mov	r6, r0
 80140d6:	f7ec fa25 	bl	8000524 <__aeabi_i2d>
 80140da:	3630      	adds	r6, #48	; 0x30
 80140dc:	4602      	mov	r2, r0
 80140de:	460b      	mov	r3, r1
 80140e0:	4640      	mov	r0, r8
 80140e2:	4649      	mov	r1, r9
 80140e4:	f7ec f8d0 	bl	8000288 <__aeabi_dsub>
 80140e8:	f805 6b01 	strb.w	r6, [r5], #1
 80140ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80140ee:	429d      	cmp	r5, r3
 80140f0:	4680      	mov	r8, r0
 80140f2:	4689      	mov	r9, r1
 80140f4:	f04f 0200 	mov.w	r2, #0
 80140f8:	d124      	bne.n	8014144 <_dtoa_r+0x60c>
 80140fa:	4b1b      	ldr	r3, [pc, #108]	; (8014168 <_dtoa_r+0x630>)
 80140fc:	4650      	mov	r0, sl
 80140fe:	4659      	mov	r1, fp
 8014100:	f7ec f8c4 	bl	800028c <__adddf3>
 8014104:	4602      	mov	r2, r0
 8014106:	460b      	mov	r3, r1
 8014108:	4640      	mov	r0, r8
 801410a:	4649      	mov	r1, r9
 801410c:	f7ec fd04 	bl	8000b18 <__aeabi_dcmpgt>
 8014110:	2800      	cmp	r0, #0
 8014112:	d173      	bne.n	80141fc <_dtoa_r+0x6c4>
 8014114:	4652      	mov	r2, sl
 8014116:	465b      	mov	r3, fp
 8014118:	4913      	ldr	r1, [pc, #76]	; (8014168 <_dtoa_r+0x630>)
 801411a:	2000      	movs	r0, #0
 801411c:	f7ec f8b4 	bl	8000288 <__aeabi_dsub>
 8014120:	4602      	mov	r2, r0
 8014122:	460b      	mov	r3, r1
 8014124:	4640      	mov	r0, r8
 8014126:	4649      	mov	r1, r9
 8014128:	f7ec fcd8 	bl	8000adc <__aeabi_dcmplt>
 801412c:	2800      	cmp	r0, #0
 801412e:	f43f af35 	beq.w	8013f9c <_dtoa_r+0x464>
 8014132:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014134:	1e6b      	subs	r3, r5, #1
 8014136:	930f      	str	r3, [sp, #60]	; 0x3c
 8014138:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801413c:	2b30      	cmp	r3, #48	; 0x30
 801413e:	d0f8      	beq.n	8014132 <_dtoa_r+0x5fa>
 8014140:	9700      	str	r7, [sp, #0]
 8014142:	e049      	b.n	80141d8 <_dtoa_r+0x6a0>
 8014144:	4b05      	ldr	r3, [pc, #20]	; (801415c <_dtoa_r+0x624>)
 8014146:	f7ec fa57 	bl	80005f8 <__aeabi_dmul>
 801414a:	4680      	mov	r8, r0
 801414c:	4689      	mov	r9, r1
 801414e:	e7bd      	b.n	80140cc <_dtoa_r+0x594>
 8014150:	080185c0 	.word	0x080185c0
 8014154:	08018598 	.word	0x08018598
 8014158:	3ff00000 	.word	0x3ff00000
 801415c:	40240000 	.word	0x40240000
 8014160:	401c0000 	.word	0x401c0000
 8014164:	40140000 	.word	0x40140000
 8014168:	3fe00000 	.word	0x3fe00000
 801416c:	9d01      	ldr	r5, [sp, #4]
 801416e:	4656      	mov	r6, sl
 8014170:	465f      	mov	r7, fp
 8014172:	4642      	mov	r2, r8
 8014174:	464b      	mov	r3, r9
 8014176:	4630      	mov	r0, r6
 8014178:	4639      	mov	r1, r7
 801417a:	f7ec fb67 	bl	800084c <__aeabi_ddiv>
 801417e:	f7ec fceb 	bl	8000b58 <__aeabi_d2iz>
 8014182:	4682      	mov	sl, r0
 8014184:	f7ec f9ce 	bl	8000524 <__aeabi_i2d>
 8014188:	4642      	mov	r2, r8
 801418a:	464b      	mov	r3, r9
 801418c:	f7ec fa34 	bl	80005f8 <__aeabi_dmul>
 8014190:	4602      	mov	r2, r0
 8014192:	460b      	mov	r3, r1
 8014194:	4630      	mov	r0, r6
 8014196:	4639      	mov	r1, r7
 8014198:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801419c:	f7ec f874 	bl	8000288 <__aeabi_dsub>
 80141a0:	f805 6b01 	strb.w	r6, [r5], #1
 80141a4:	9e01      	ldr	r6, [sp, #4]
 80141a6:	9f03      	ldr	r7, [sp, #12]
 80141a8:	1bae      	subs	r6, r5, r6
 80141aa:	42b7      	cmp	r7, r6
 80141ac:	4602      	mov	r2, r0
 80141ae:	460b      	mov	r3, r1
 80141b0:	d135      	bne.n	801421e <_dtoa_r+0x6e6>
 80141b2:	f7ec f86b 	bl	800028c <__adddf3>
 80141b6:	4642      	mov	r2, r8
 80141b8:	464b      	mov	r3, r9
 80141ba:	4606      	mov	r6, r0
 80141bc:	460f      	mov	r7, r1
 80141be:	f7ec fcab 	bl	8000b18 <__aeabi_dcmpgt>
 80141c2:	b9d0      	cbnz	r0, 80141fa <_dtoa_r+0x6c2>
 80141c4:	4642      	mov	r2, r8
 80141c6:	464b      	mov	r3, r9
 80141c8:	4630      	mov	r0, r6
 80141ca:	4639      	mov	r1, r7
 80141cc:	f7ec fc7c 	bl	8000ac8 <__aeabi_dcmpeq>
 80141d0:	b110      	cbz	r0, 80141d8 <_dtoa_r+0x6a0>
 80141d2:	f01a 0f01 	tst.w	sl, #1
 80141d6:	d110      	bne.n	80141fa <_dtoa_r+0x6c2>
 80141d8:	4620      	mov	r0, r4
 80141da:	ee18 1a10 	vmov	r1, s16
 80141de:	f000 fe6b 	bl	8014eb8 <_Bfree>
 80141e2:	2300      	movs	r3, #0
 80141e4:	9800      	ldr	r0, [sp, #0]
 80141e6:	702b      	strb	r3, [r5, #0]
 80141e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80141ea:	3001      	adds	r0, #1
 80141ec:	6018      	str	r0, [r3, #0]
 80141ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	f43f acf1 	beq.w	8013bd8 <_dtoa_r+0xa0>
 80141f6:	601d      	str	r5, [r3, #0]
 80141f8:	e4ee      	b.n	8013bd8 <_dtoa_r+0xa0>
 80141fa:	9f00      	ldr	r7, [sp, #0]
 80141fc:	462b      	mov	r3, r5
 80141fe:	461d      	mov	r5, r3
 8014200:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014204:	2a39      	cmp	r2, #57	; 0x39
 8014206:	d106      	bne.n	8014216 <_dtoa_r+0x6de>
 8014208:	9a01      	ldr	r2, [sp, #4]
 801420a:	429a      	cmp	r2, r3
 801420c:	d1f7      	bne.n	80141fe <_dtoa_r+0x6c6>
 801420e:	9901      	ldr	r1, [sp, #4]
 8014210:	2230      	movs	r2, #48	; 0x30
 8014212:	3701      	adds	r7, #1
 8014214:	700a      	strb	r2, [r1, #0]
 8014216:	781a      	ldrb	r2, [r3, #0]
 8014218:	3201      	adds	r2, #1
 801421a:	701a      	strb	r2, [r3, #0]
 801421c:	e790      	b.n	8014140 <_dtoa_r+0x608>
 801421e:	4ba6      	ldr	r3, [pc, #664]	; (80144b8 <_dtoa_r+0x980>)
 8014220:	2200      	movs	r2, #0
 8014222:	f7ec f9e9 	bl	80005f8 <__aeabi_dmul>
 8014226:	2200      	movs	r2, #0
 8014228:	2300      	movs	r3, #0
 801422a:	4606      	mov	r6, r0
 801422c:	460f      	mov	r7, r1
 801422e:	f7ec fc4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8014232:	2800      	cmp	r0, #0
 8014234:	d09d      	beq.n	8014172 <_dtoa_r+0x63a>
 8014236:	e7cf      	b.n	80141d8 <_dtoa_r+0x6a0>
 8014238:	9a08      	ldr	r2, [sp, #32]
 801423a:	2a00      	cmp	r2, #0
 801423c:	f000 80d7 	beq.w	80143ee <_dtoa_r+0x8b6>
 8014240:	9a06      	ldr	r2, [sp, #24]
 8014242:	2a01      	cmp	r2, #1
 8014244:	f300 80ba 	bgt.w	80143bc <_dtoa_r+0x884>
 8014248:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801424a:	2a00      	cmp	r2, #0
 801424c:	f000 80b2 	beq.w	80143b4 <_dtoa_r+0x87c>
 8014250:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014254:	9e07      	ldr	r6, [sp, #28]
 8014256:	9d04      	ldr	r5, [sp, #16]
 8014258:	9a04      	ldr	r2, [sp, #16]
 801425a:	441a      	add	r2, r3
 801425c:	9204      	str	r2, [sp, #16]
 801425e:	9a05      	ldr	r2, [sp, #20]
 8014260:	2101      	movs	r1, #1
 8014262:	441a      	add	r2, r3
 8014264:	4620      	mov	r0, r4
 8014266:	9205      	str	r2, [sp, #20]
 8014268:	f000 ff28 	bl	80150bc <__i2b>
 801426c:	4607      	mov	r7, r0
 801426e:	2d00      	cmp	r5, #0
 8014270:	dd0c      	ble.n	801428c <_dtoa_r+0x754>
 8014272:	9b05      	ldr	r3, [sp, #20]
 8014274:	2b00      	cmp	r3, #0
 8014276:	dd09      	ble.n	801428c <_dtoa_r+0x754>
 8014278:	42ab      	cmp	r3, r5
 801427a:	9a04      	ldr	r2, [sp, #16]
 801427c:	bfa8      	it	ge
 801427e:	462b      	movge	r3, r5
 8014280:	1ad2      	subs	r2, r2, r3
 8014282:	9204      	str	r2, [sp, #16]
 8014284:	9a05      	ldr	r2, [sp, #20]
 8014286:	1aed      	subs	r5, r5, r3
 8014288:	1ad3      	subs	r3, r2, r3
 801428a:	9305      	str	r3, [sp, #20]
 801428c:	9b07      	ldr	r3, [sp, #28]
 801428e:	b31b      	cbz	r3, 80142d8 <_dtoa_r+0x7a0>
 8014290:	9b08      	ldr	r3, [sp, #32]
 8014292:	2b00      	cmp	r3, #0
 8014294:	f000 80af 	beq.w	80143f6 <_dtoa_r+0x8be>
 8014298:	2e00      	cmp	r6, #0
 801429a:	dd13      	ble.n	80142c4 <_dtoa_r+0x78c>
 801429c:	4639      	mov	r1, r7
 801429e:	4632      	mov	r2, r6
 80142a0:	4620      	mov	r0, r4
 80142a2:	f000 ffcb 	bl	801523c <__pow5mult>
 80142a6:	ee18 2a10 	vmov	r2, s16
 80142aa:	4601      	mov	r1, r0
 80142ac:	4607      	mov	r7, r0
 80142ae:	4620      	mov	r0, r4
 80142b0:	f000 ff1a 	bl	80150e8 <__multiply>
 80142b4:	ee18 1a10 	vmov	r1, s16
 80142b8:	4680      	mov	r8, r0
 80142ba:	4620      	mov	r0, r4
 80142bc:	f000 fdfc 	bl	8014eb8 <_Bfree>
 80142c0:	ee08 8a10 	vmov	s16, r8
 80142c4:	9b07      	ldr	r3, [sp, #28]
 80142c6:	1b9a      	subs	r2, r3, r6
 80142c8:	d006      	beq.n	80142d8 <_dtoa_r+0x7a0>
 80142ca:	ee18 1a10 	vmov	r1, s16
 80142ce:	4620      	mov	r0, r4
 80142d0:	f000 ffb4 	bl	801523c <__pow5mult>
 80142d4:	ee08 0a10 	vmov	s16, r0
 80142d8:	2101      	movs	r1, #1
 80142da:	4620      	mov	r0, r4
 80142dc:	f000 feee 	bl	80150bc <__i2b>
 80142e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	4606      	mov	r6, r0
 80142e6:	f340 8088 	ble.w	80143fa <_dtoa_r+0x8c2>
 80142ea:	461a      	mov	r2, r3
 80142ec:	4601      	mov	r1, r0
 80142ee:	4620      	mov	r0, r4
 80142f0:	f000 ffa4 	bl	801523c <__pow5mult>
 80142f4:	9b06      	ldr	r3, [sp, #24]
 80142f6:	2b01      	cmp	r3, #1
 80142f8:	4606      	mov	r6, r0
 80142fa:	f340 8081 	ble.w	8014400 <_dtoa_r+0x8c8>
 80142fe:	f04f 0800 	mov.w	r8, #0
 8014302:	6933      	ldr	r3, [r6, #16]
 8014304:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014308:	6918      	ldr	r0, [r3, #16]
 801430a:	f000 fe87 	bl	801501c <__hi0bits>
 801430e:	f1c0 0020 	rsb	r0, r0, #32
 8014312:	9b05      	ldr	r3, [sp, #20]
 8014314:	4418      	add	r0, r3
 8014316:	f010 001f 	ands.w	r0, r0, #31
 801431a:	f000 8092 	beq.w	8014442 <_dtoa_r+0x90a>
 801431e:	f1c0 0320 	rsb	r3, r0, #32
 8014322:	2b04      	cmp	r3, #4
 8014324:	f340 808a 	ble.w	801443c <_dtoa_r+0x904>
 8014328:	f1c0 001c 	rsb	r0, r0, #28
 801432c:	9b04      	ldr	r3, [sp, #16]
 801432e:	4403      	add	r3, r0
 8014330:	9304      	str	r3, [sp, #16]
 8014332:	9b05      	ldr	r3, [sp, #20]
 8014334:	4403      	add	r3, r0
 8014336:	4405      	add	r5, r0
 8014338:	9305      	str	r3, [sp, #20]
 801433a:	9b04      	ldr	r3, [sp, #16]
 801433c:	2b00      	cmp	r3, #0
 801433e:	dd07      	ble.n	8014350 <_dtoa_r+0x818>
 8014340:	ee18 1a10 	vmov	r1, s16
 8014344:	461a      	mov	r2, r3
 8014346:	4620      	mov	r0, r4
 8014348:	f000 ffd2 	bl	80152f0 <__lshift>
 801434c:	ee08 0a10 	vmov	s16, r0
 8014350:	9b05      	ldr	r3, [sp, #20]
 8014352:	2b00      	cmp	r3, #0
 8014354:	dd05      	ble.n	8014362 <_dtoa_r+0x82a>
 8014356:	4631      	mov	r1, r6
 8014358:	461a      	mov	r2, r3
 801435a:	4620      	mov	r0, r4
 801435c:	f000 ffc8 	bl	80152f0 <__lshift>
 8014360:	4606      	mov	r6, r0
 8014362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014364:	2b00      	cmp	r3, #0
 8014366:	d06e      	beq.n	8014446 <_dtoa_r+0x90e>
 8014368:	ee18 0a10 	vmov	r0, s16
 801436c:	4631      	mov	r1, r6
 801436e:	f001 f82f 	bl	80153d0 <__mcmp>
 8014372:	2800      	cmp	r0, #0
 8014374:	da67      	bge.n	8014446 <_dtoa_r+0x90e>
 8014376:	9b00      	ldr	r3, [sp, #0]
 8014378:	3b01      	subs	r3, #1
 801437a:	ee18 1a10 	vmov	r1, s16
 801437e:	9300      	str	r3, [sp, #0]
 8014380:	220a      	movs	r2, #10
 8014382:	2300      	movs	r3, #0
 8014384:	4620      	mov	r0, r4
 8014386:	f000 fdb9 	bl	8014efc <__multadd>
 801438a:	9b08      	ldr	r3, [sp, #32]
 801438c:	ee08 0a10 	vmov	s16, r0
 8014390:	2b00      	cmp	r3, #0
 8014392:	f000 81b1 	beq.w	80146f8 <_dtoa_r+0xbc0>
 8014396:	2300      	movs	r3, #0
 8014398:	4639      	mov	r1, r7
 801439a:	220a      	movs	r2, #10
 801439c:	4620      	mov	r0, r4
 801439e:	f000 fdad 	bl	8014efc <__multadd>
 80143a2:	9b02      	ldr	r3, [sp, #8]
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	4607      	mov	r7, r0
 80143a8:	f300 808e 	bgt.w	80144c8 <_dtoa_r+0x990>
 80143ac:	9b06      	ldr	r3, [sp, #24]
 80143ae:	2b02      	cmp	r3, #2
 80143b0:	dc51      	bgt.n	8014456 <_dtoa_r+0x91e>
 80143b2:	e089      	b.n	80144c8 <_dtoa_r+0x990>
 80143b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80143b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80143ba:	e74b      	b.n	8014254 <_dtoa_r+0x71c>
 80143bc:	9b03      	ldr	r3, [sp, #12]
 80143be:	1e5e      	subs	r6, r3, #1
 80143c0:	9b07      	ldr	r3, [sp, #28]
 80143c2:	42b3      	cmp	r3, r6
 80143c4:	bfbf      	itttt	lt
 80143c6:	9b07      	ldrlt	r3, [sp, #28]
 80143c8:	9607      	strlt	r6, [sp, #28]
 80143ca:	1af2      	sublt	r2, r6, r3
 80143cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80143ce:	bfb6      	itet	lt
 80143d0:	189b      	addlt	r3, r3, r2
 80143d2:	1b9e      	subge	r6, r3, r6
 80143d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80143d6:	9b03      	ldr	r3, [sp, #12]
 80143d8:	bfb8      	it	lt
 80143da:	2600      	movlt	r6, #0
 80143dc:	2b00      	cmp	r3, #0
 80143de:	bfb7      	itett	lt
 80143e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80143e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80143e8:	1a9d      	sublt	r5, r3, r2
 80143ea:	2300      	movlt	r3, #0
 80143ec:	e734      	b.n	8014258 <_dtoa_r+0x720>
 80143ee:	9e07      	ldr	r6, [sp, #28]
 80143f0:	9d04      	ldr	r5, [sp, #16]
 80143f2:	9f08      	ldr	r7, [sp, #32]
 80143f4:	e73b      	b.n	801426e <_dtoa_r+0x736>
 80143f6:	9a07      	ldr	r2, [sp, #28]
 80143f8:	e767      	b.n	80142ca <_dtoa_r+0x792>
 80143fa:	9b06      	ldr	r3, [sp, #24]
 80143fc:	2b01      	cmp	r3, #1
 80143fe:	dc18      	bgt.n	8014432 <_dtoa_r+0x8fa>
 8014400:	f1ba 0f00 	cmp.w	sl, #0
 8014404:	d115      	bne.n	8014432 <_dtoa_r+0x8fa>
 8014406:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801440a:	b993      	cbnz	r3, 8014432 <_dtoa_r+0x8fa>
 801440c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014410:	0d1b      	lsrs	r3, r3, #20
 8014412:	051b      	lsls	r3, r3, #20
 8014414:	b183      	cbz	r3, 8014438 <_dtoa_r+0x900>
 8014416:	9b04      	ldr	r3, [sp, #16]
 8014418:	3301      	adds	r3, #1
 801441a:	9304      	str	r3, [sp, #16]
 801441c:	9b05      	ldr	r3, [sp, #20]
 801441e:	3301      	adds	r3, #1
 8014420:	9305      	str	r3, [sp, #20]
 8014422:	f04f 0801 	mov.w	r8, #1
 8014426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014428:	2b00      	cmp	r3, #0
 801442a:	f47f af6a 	bne.w	8014302 <_dtoa_r+0x7ca>
 801442e:	2001      	movs	r0, #1
 8014430:	e76f      	b.n	8014312 <_dtoa_r+0x7da>
 8014432:	f04f 0800 	mov.w	r8, #0
 8014436:	e7f6      	b.n	8014426 <_dtoa_r+0x8ee>
 8014438:	4698      	mov	r8, r3
 801443a:	e7f4      	b.n	8014426 <_dtoa_r+0x8ee>
 801443c:	f43f af7d 	beq.w	801433a <_dtoa_r+0x802>
 8014440:	4618      	mov	r0, r3
 8014442:	301c      	adds	r0, #28
 8014444:	e772      	b.n	801432c <_dtoa_r+0x7f4>
 8014446:	9b03      	ldr	r3, [sp, #12]
 8014448:	2b00      	cmp	r3, #0
 801444a:	dc37      	bgt.n	80144bc <_dtoa_r+0x984>
 801444c:	9b06      	ldr	r3, [sp, #24]
 801444e:	2b02      	cmp	r3, #2
 8014450:	dd34      	ble.n	80144bc <_dtoa_r+0x984>
 8014452:	9b03      	ldr	r3, [sp, #12]
 8014454:	9302      	str	r3, [sp, #8]
 8014456:	9b02      	ldr	r3, [sp, #8]
 8014458:	b96b      	cbnz	r3, 8014476 <_dtoa_r+0x93e>
 801445a:	4631      	mov	r1, r6
 801445c:	2205      	movs	r2, #5
 801445e:	4620      	mov	r0, r4
 8014460:	f000 fd4c 	bl	8014efc <__multadd>
 8014464:	4601      	mov	r1, r0
 8014466:	4606      	mov	r6, r0
 8014468:	ee18 0a10 	vmov	r0, s16
 801446c:	f000 ffb0 	bl	80153d0 <__mcmp>
 8014470:	2800      	cmp	r0, #0
 8014472:	f73f adbb 	bgt.w	8013fec <_dtoa_r+0x4b4>
 8014476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014478:	9d01      	ldr	r5, [sp, #4]
 801447a:	43db      	mvns	r3, r3
 801447c:	9300      	str	r3, [sp, #0]
 801447e:	f04f 0800 	mov.w	r8, #0
 8014482:	4631      	mov	r1, r6
 8014484:	4620      	mov	r0, r4
 8014486:	f000 fd17 	bl	8014eb8 <_Bfree>
 801448a:	2f00      	cmp	r7, #0
 801448c:	f43f aea4 	beq.w	80141d8 <_dtoa_r+0x6a0>
 8014490:	f1b8 0f00 	cmp.w	r8, #0
 8014494:	d005      	beq.n	80144a2 <_dtoa_r+0x96a>
 8014496:	45b8      	cmp	r8, r7
 8014498:	d003      	beq.n	80144a2 <_dtoa_r+0x96a>
 801449a:	4641      	mov	r1, r8
 801449c:	4620      	mov	r0, r4
 801449e:	f000 fd0b 	bl	8014eb8 <_Bfree>
 80144a2:	4639      	mov	r1, r7
 80144a4:	4620      	mov	r0, r4
 80144a6:	f000 fd07 	bl	8014eb8 <_Bfree>
 80144aa:	e695      	b.n	80141d8 <_dtoa_r+0x6a0>
 80144ac:	2600      	movs	r6, #0
 80144ae:	4637      	mov	r7, r6
 80144b0:	e7e1      	b.n	8014476 <_dtoa_r+0x93e>
 80144b2:	9700      	str	r7, [sp, #0]
 80144b4:	4637      	mov	r7, r6
 80144b6:	e599      	b.n	8013fec <_dtoa_r+0x4b4>
 80144b8:	40240000 	.word	0x40240000
 80144bc:	9b08      	ldr	r3, [sp, #32]
 80144be:	2b00      	cmp	r3, #0
 80144c0:	f000 80ca 	beq.w	8014658 <_dtoa_r+0xb20>
 80144c4:	9b03      	ldr	r3, [sp, #12]
 80144c6:	9302      	str	r3, [sp, #8]
 80144c8:	2d00      	cmp	r5, #0
 80144ca:	dd05      	ble.n	80144d8 <_dtoa_r+0x9a0>
 80144cc:	4639      	mov	r1, r7
 80144ce:	462a      	mov	r2, r5
 80144d0:	4620      	mov	r0, r4
 80144d2:	f000 ff0d 	bl	80152f0 <__lshift>
 80144d6:	4607      	mov	r7, r0
 80144d8:	f1b8 0f00 	cmp.w	r8, #0
 80144dc:	d05b      	beq.n	8014596 <_dtoa_r+0xa5e>
 80144de:	6879      	ldr	r1, [r7, #4]
 80144e0:	4620      	mov	r0, r4
 80144e2:	f000 fca9 	bl	8014e38 <_Balloc>
 80144e6:	4605      	mov	r5, r0
 80144e8:	b928      	cbnz	r0, 80144f6 <_dtoa_r+0x9be>
 80144ea:	4b87      	ldr	r3, [pc, #540]	; (8014708 <_dtoa_r+0xbd0>)
 80144ec:	4602      	mov	r2, r0
 80144ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80144f2:	f7ff bb3b 	b.w	8013b6c <_dtoa_r+0x34>
 80144f6:	693a      	ldr	r2, [r7, #16]
 80144f8:	3202      	adds	r2, #2
 80144fa:	0092      	lsls	r2, r2, #2
 80144fc:	f107 010c 	add.w	r1, r7, #12
 8014500:	300c      	adds	r0, #12
 8014502:	f7fd fe9f 	bl	8012244 <memcpy>
 8014506:	2201      	movs	r2, #1
 8014508:	4629      	mov	r1, r5
 801450a:	4620      	mov	r0, r4
 801450c:	f000 fef0 	bl	80152f0 <__lshift>
 8014510:	9b01      	ldr	r3, [sp, #4]
 8014512:	f103 0901 	add.w	r9, r3, #1
 8014516:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801451a:	4413      	add	r3, r2
 801451c:	9305      	str	r3, [sp, #20]
 801451e:	f00a 0301 	and.w	r3, sl, #1
 8014522:	46b8      	mov	r8, r7
 8014524:	9304      	str	r3, [sp, #16]
 8014526:	4607      	mov	r7, r0
 8014528:	4631      	mov	r1, r6
 801452a:	ee18 0a10 	vmov	r0, s16
 801452e:	f7ff fa77 	bl	8013a20 <quorem>
 8014532:	4641      	mov	r1, r8
 8014534:	9002      	str	r0, [sp, #8]
 8014536:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801453a:	ee18 0a10 	vmov	r0, s16
 801453e:	f000 ff47 	bl	80153d0 <__mcmp>
 8014542:	463a      	mov	r2, r7
 8014544:	9003      	str	r0, [sp, #12]
 8014546:	4631      	mov	r1, r6
 8014548:	4620      	mov	r0, r4
 801454a:	f000 ff5d 	bl	8015408 <__mdiff>
 801454e:	68c2      	ldr	r2, [r0, #12]
 8014550:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8014554:	4605      	mov	r5, r0
 8014556:	bb02      	cbnz	r2, 801459a <_dtoa_r+0xa62>
 8014558:	4601      	mov	r1, r0
 801455a:	ee18 0a10 	vmov	r0, s16
 801455e:	f000 ff37 	bl	80153d0 <__mcmp>
 8014562:	4602      	mov	r2, r0
 8014564:	4629      	mov	r1, r5
 8014566:	4620      	mov	r0, r4
 8014568:	9207      	str	r2, [sp, #28]
 801456a:	f000 fca5 	bl	8014eb8 <_Bfree>
 801456e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8014572:	ea43 0102 	orr.w	r1, r3, r2
 8014576:	9b04      	ldr	r3, [sp, #16]
 8014578:	430b      	orrs	r3, r1
 801457a:	464d      	mov	r5, r9
 801457c:	d10f      	bne.n	801459e <_dtoa_r+0xa66>
 801457e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014582:	d02a      	beq.n	80145da <_dtoa_r+0xaa2>
 8014584:	9b03      	ldr	r3, [sp, #12]
 8014586:	2b00      	cmp	r3, #0
 8014588:	dd02      	ble.n	8014590 <_dtoa_r+0xa58>
 801458a:	9b02      	ldr	r3, [sp, #8]
 801458c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8014590:	f88b a000 	strb.w	sl, [fp]
 8014594:	e775      	b.n	8014482 <_dtoa_r+0x94a>
 8014596:	4638      	mov	r0, r7
 8014598:	e7ba      	b.n	8014510 <_dtoa_r+0x9d8>
 801459a:	2201      	movs	r2, #1
 801459c:	e7e2      	b.n	8014564 <_dtoa_r+0xa2c>
 801459e:	9b03      	ldr	r3, [sp, #12]
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	db04      	blt.n	80145ae <_dtoa_r+0xa76>
 80145a4:	9906      	ldr	r1, [sp, #24]
 80145a6:	430b      	orrs	r3, r1
 80145a8:	9904      	ldr	r1, [sp, #16]
 80145aa:	430b      	orrs	r3, r1
 80145ac:	d122      	bne.n	80145f4 <_dtoa_r+0xabc>
 80145ae:	2a00      	cmp	r2, #0
 80145b0:	ddee      	ble.n	8014590 <_dtoa_r+0xa58>
 80145b2:	ee18 1a10 	vmov	r1, s16
 80145b6:	2201      	movs	r2, #1
 80145b8:	4620      	mov	r0, r4
 80145ba:	f000 fe99 	bl	80152f0 <__lshift>
 80145be:	4631      	mov	r1, r6
 80145c0:	ee08 0a10 	vmov	s16, r0
 80145c4:	f000 ff04 	bl	80153d0 <__mcmp>
 80145c8:	2800      	cmp	r0, #0
 80145ca:	dc03      	bgt.n	80145d4 <_dtoa_r+0xa9c>
 80145cc:	d1e0      	bne.n	8014590 <_dtoa_r+0xa58>
 80145ce:	f01a 0f01 	tst.w	sl, #1
 80145d2:	d0dd      	beq.n	8014590 <_dtoa_r+0xa58>
 80145d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80145d8:	d1d7      	bne.n	801458a <_dtoa_r+0xa52>
 80145da:	2339      	movs	r3, #57	; 0x39
 80145dc:	f88b 3000 	strb.w	r3, [fp]
 80145e0:	462b      	mov	r3, r5
 80145e2:	461d      	mov	r5, r3
 80145e4:	3b01      	subs	r3, #1
 80145e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80145ea:	2a39      	cmp	r2, #57	; 0x39
 80145ec:	d071      	beq.n	80146d2 <_dtoa_r+0xb9a>
 80145ee:	3201      	adds	r2, #1
 80145f0:	701a      	strb	r2, [r3, #0]
 80145f2:	e746      	b.n	8014482 <_dtoa_r+0x94a>
 80145f4:	2a00      	cmp	r2, #0
 80145f6:	dd07      	ble.n	8014608 <_dtoa_r+0xad0>
 80145f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80145fc:	d0ed      	beq.n	80145da <_dtoa_r+0xaa2>
 80145fe:	f10a 0301 	add.w	r3, sl, #1
 8014602:	f88b 3000 	strb.w	r3, [fp]
 8014606:	e73c      	b.n	8014482 <_dtoa_r+0x94a>
 8014608:	9b05      	ldr	r3, [sp, #20]
 801460a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801460e:	4599      	cmp	r9, r3
 8014610:	d047      	beq.n	80146a2 <_dtoa_r+0xb6a>
 8014612:	ee18 1a10 	vmov	r1, s16
 8014616:	2300      	movs	r3, #0
 8014618:	220a      	movs	r2, #10
 801461a:	4620      	mov	r0, r4
 801461c:	f000 fc6e 	bl	8014efc <__multadd>
 8014620:	45b8      	cmp	r8, r7
 8014622:	ee08 0a10 	vmov	s16, r0
 8014626:	f04f 0300 	mov.w	r3, #0
 801462a:	f04f 020a 	mov.w	r2, #10
 801462e:	4641      	mov	r1, r8
 8014630:	4620      	mov	r0, r4
 8014632:	d106      	bne.n	8014642 <_dtoa_r+0xb0a>
 8014634:	f000 fc62 	bl	8014efc <__multadd>
 8014638:	4680      	mov	r8, r0
 801463a:	4607      	mov	r7, r0
 801463c:	f109 0901 	add.w	r9, r9, #1
 8014640:	e772      	b.n	8014528 <_dtoa_r+0x9f0>
 8014642:	f000 fc5b 	bl	8014efc <__multadd>
 8014646:	4639      	mov	r1, r7
 8014648:	4680      	mov	r8, r0
 801464a:	2300      	movs	r3, #0
 801464c:	220a      	movs	r2, #10
 801464e:	4620      	mov	r0, r4
 8014650:	f000 fc54 	bl	8014efc <__multadd>
 8014654:	4607      	mov	r7, r0
 8014656:	e7f1      	b.n	801463c <_dtoa_r+0xb04>
 8014658:	9b03      	ldr	r3, [sp, #12]
 801465a:	9302      	str	r3, [sp, #8]
 801465c:	9d01      	ldr	r5, [sp, #4]
 801465e:	ee18 0a10 	vmov	r0, s16
 8014662:	4631      	mov	r1, r6
 8014664:	f7ff f9dc 	bl	8013a20 <quorem>
 8014668:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801466c:	9b01      	ldr	r3, [sp, #4]
 801466e:	f805 ab01 	strb.w	sl, [r5], #1
 8014672:	1aea      	subs	r2, r5, r3
 8014674:	9b02      	ldr	r3, [sp, #8]
 8014676:	4293      	cmp	r3, r2
 8014678:	dd09      	ble.n	801468e <_dtoa_r+0xb56>
 801467a:	ee18 1a10 	vmov	r1, s16
 801467e:	2300      	movs	r3, #0
 8014680:	220a      	movs	r2, #10
 8014682:	4620      	mov	r0, r4
 8014684:	f000 fc3a 	bl	8014efc <__multadd>
 8014688:	ee08 0a10 	vmov	s16, r0
 801468c:	e7e7      	b.n	801465e <_dtoa_r+0xb26>
 801468e:	9b02      	ldr	r3, [sp, #8]
 8014690:	2b00      	cmp	r3, #0
 8014692:	bfc8      	it	gt
 8014694:	461d      	movgt	r5, r3
 8014696:	9b01      	ldr	r3, [sp, #4]
 8014698:	bfd8      	it	le
 801469a:	2501      	movle	r5, #1
 801469c:	441d      	add	r5, r3
 801469e:	f04f 0800 	mov.w	r8, #0
 80146a2:	ee18 1a10 	vmov	r1, s16
 80146a6:	2201      	movs	r2, #1
 80146a8:	4620      	mov	r0, r4
 80146aa:	f000 fe21 	bl	80152f0 <__lshift>
 80146ae:	4631      	mov	r1, r6
 80146b0:	ee08 0a10 	vmov	s16, r0
 80146b4:	f000 fe8c 	bl	80153d0 <__mcmp>
 80146b8:	2800      	cmp	r0, #0
 80146ba:	dc91      	bgt.n	80145e0 <_dtoa_r+0xaa8>
 80146bc:	d102      	bne.n	80146c4 <_dtoa_r+0xb8c>
 80146be:	f01a 0f01 	tst.w	sl, #1
 80146c2:	d18d      	bne.n	80145e0 <_dtoa_r+0xaa8>
 80146c4:	462b      	mov	r3, r5
 80146c6:	461d      	mov	r5, r3
 80146c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80146cc:	2a30      	cmp	r2, #48	; 0x30
 80146ce:	d0fa      	beq.n	80146c6 <_dtoa_r+0xb8e>
 80146d0:	e6d7      	b.n	8014482 <_dtoa_r+0x94a>
 80146d2:	9a01      	ldr	r2, [sp, #4]
 80146d4:	429a      	cmp	r2, r3
 80146d6:	d184      	bne.n	80145e2 <_dtoa_r+0xaaa>
 80146d8:	9b00      	ldr	r3, [sp, #0]
 80146da:	3301      	adds	r3, #1
 80146dc:	9300      	str	r3, [sp, #0]
 80146de:	2331      	movs	r3, #49	; 0x31
 80146e0:	7013      	strb	r3, [r2, #0]
 80146e2:	e6ce      	b.n	8014482 <_dtoa_r+0x94a>
 80146e4:	4b09      	ldr	r3, [pc, #36]	; (801470c <_dtoa_r+0xbd4>)
 80146e6:	f7ff ba95 	b.w	8013c14 <_dtoa_r+0xdc>
 80146ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	f47f aa6e 	bne.w	8013bce <_dtoa_r+0x96>
 80146f2:	4b07      	ldr	r3, [pc, #28]	; (8014710 <_dtoa_r+0xbd8>)
 80146f4:	f7ff ba8e 	b.w	8013c14 <_dtoa_r+0xdc>
 80146f8:	9b02      	ldr	r3, [sp, #8]
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	dcae      	bgt.n	801465c <_dtoa_r+0xb24>
 80146fe:	9b06      	ldr	r3, [sp, #24]
 8014700:	2b02      	cmp	r3, #2
 8014702:	f73f aea8 	bgt.w	8014456 <_dtoa_r+0x91e>
 8014706:	e7a9      	b.n	801465c <_dtoa_r+0xb24>
 8014708:	080184af 	.word	0x080184af
 801470c:	080183bc 	.word	0x080183bc
 8014710:	08018430 	.word	0x08018430

08014714 <rshift>:
 8014714:	6903      	ldr	r3, [r0, #16]
 8014716:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801471a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801471e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014722:	f100 0414 	add.w	r4, r0, #20
 8014726:	dd45      	ble.n	80147b4 <rshift+0xa0>
 8014728:	f011 011f 	ands.w	r1, r1, #31
 801472c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014730:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014734:	d10c      	bne.n	8014750 <rshift+0x3c>
 8014736:	f100 0710 	add.w	r7, r0, #16
 801473a:	4629      	mov	r1, r5
 801473c:	42b1      	cmp	r1, r6
 801473e:	d334      	bcc.n	80147aa <rshift+0x96>
 8014740:	1a9b      	subs	r3, r3, r2
 8014742:	009b      	lsls	r3, r3, #2
 8014744:	1eea      	subs	r2, r5, #3
 8014746:	4296      	cmp	r6, r2
 8014748:	bf38      	it	cc
 801474a:	2300      	movcc	r3, #0
 801474c:	4423      	add	r3, r4
 801474e:	e015      	b.n	801477c <rshift+0x68>
 8014750:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014754:	f1c1 0820 	rsb	r8, r1, #32
 8014758:	40cf      	lsrs	r7, r1
 801475a:	f105 0e04 	add.w	lr, r5, #4
 801475e:	46a1      	mov	r9, r4
 8014760:	4576      	cmp	r6, lr
 8014762:	46f4      	mov	ip, lr
 8014764:	d815      	bhi.n	8014792 <rshift+0x7e>
 8014766:	1a9a      	subs	r2, r3, r2
 8014768:	0092      	lsls	r2, r2, #2
 801476a:	3a04      	subs	r2, #4
 801476c:	3501      	adds	r5, #1
 801476e:	42ae      	cmp	r6, r5
 8014770:	bf38      	it	cc
 8014772:	2200      	movcc	r2, #0
 8014774:	18a3      	adds	r3, r4, r2
 8014776:	50a7      	str	r7, [r4, r2]
 8014778:	b107      	cbz	r7, 801477c <rshift+0x68>
 801477a:	3304      	adds	r3, #4
 801477c:	1b1a      	subs	r2, r3, r4
 801477e:	42a3      	cmp	r3, r4
 8014780:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014784:	bf08      	it	eq
 8014786:	2300      	moveq	r3, #0
 8014788:	6102      	str	r2, [r0, #16]
 801478a:	bf08      	it	eq
 801478c:	6143      	streq	r3, [r0, #20]
 801478e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014792:	f8dc c000 	ldr.w	ip, [ip]
 8014796:	fa0c fc08 	lsl.w	ip, ip, r8
 801479a:	ea4c 0707 	orr.w	r7, ip, r7
 801479e:	f849 7b04 	str.w	r7, [r9], #4
 80147a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80147a6:	40cf      	lsrs	r7, r1
 80147a8:	e7da      	b.n	8014760 <rshift+0x4c>
 80147aa:	f851 cb04 	ldr.w	ip, [r1], #4
 80147ae:	f847 cf04 	str.w	ip, [r7, #4]!
 80147b2:	e7c3      	b.n	801473c <rshift+0x28>
 80147b4:	4623      	mov	r3, r4
 80147b6:	e7e1      	b.n	801477c <rshift+0x68>

080147b8 <__hexdig_fun>:
 80147b8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80147bc:	2b09      	cmp	r3, #9
 80147be:	d802      	bhi.n	80147c6 <__hexdig_fun+0xe>
 80147c0:	3820      	subs	r0, #32
 80147c2:	b2c0      	uxtb	r0, r0
 80147c4:	4770      	bx	lr
 80147c6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80147ca:	2b05      	cmp	r3, #5
 80147cc:	d801      	bhi.n	80147d2 <__hexdig_fun+0x1a>
 80147ce:	3847      	subs	r0, #71	; 0x47
 80147d0:	e7f7      	b.n	80147c2 <__hexdig_fun+0xa>
 80147d2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80147d6:	2b05      	cmp	r3, #5
 80147d8:	d801      	bhi.n	80147de <__hexdig_fun+0x26>
 80147da:	3827      	subs	r0, #39	; 0x27
 80147dc:	e7f1      	b.n	80147c2 <__hexdig_fun+0xa>
 80147de:	2000      	movs	r0, #0
 80147e0:	4770      	bx	lr
	...

080147e4 <__gethex>:
 80147e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147e8:	ed2d 8b02 	vpush	{d8}
 80147ec:	b089      	sub	sp, #36	; 0x24
 80147ee:	ee08 0a10 	vmov	s16, r0
 80147f2:	9304      	str	r3, [sp, #16]
 80147f4:	4bb4      	ldr	r3, [pc, #720]	; (8014ac8 <__gethex+0x2e4>)
 80147f6:	681b      	ldr	r3, [r3, #0]
 80147f8:	9301      	str	r3, [sp, #4]
 80147fa:	4618      	mov	r0, r3
 80147fc:	468b      	mov	fp, r1
 80147fe:	4690      	mov	r8, r2
 8014800:	f7eb fce6 	bl	80001d0 <strlen>
 8014804:	9b01      	ldr	r3, [sp, #4]
 8014806:	f8db 2000 	ldr.w	r2, [fp]
 801480a:	4403      	add	r3, r0
 801480c:	4682      	mov	sl, r0
 801480e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8014812:	9305      	str	r3, [sp, #20]
 8014814:	1c93      	adds	r3, r2, #2
 8014816:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801481a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801481e:	32fe      	adds	r2, #254	; 0xfe
 8014820:	18d1      	adds	r1, r2, r3
 8014822:	461f      	mov	r7, r3
 8014824:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014828:	9100      	str	r1, [sp, #0]
 801482a:	2830      	cmp	r0, #48	; 0x30
 801482c:	d0f8      	beq.n	8014820 <__gethex+0x3c>
 801482e:	f7ff ffc3 	bl	80147b8 <__hexdig_fun>
 8014832:	4604      	mov	r4, r0
 8014834:	2800      	cmp	r0, #0
 8014836:	d13a      	bne.n	80148ae <__gethex+0xca>
 8014838:	9901      	ldr	r1, [sp, #4]
 801483a:	4652      	mov	r2, sl
 801483c:	4638      	mov	r0, r7
 801483e:	f7fe f9bd 	bl	8012bbc <strncmp>
 8014842:	4605      	mov	r5, r0
 8014844:	2800      	cmp	r0, #0
 8014846:	d168      	bne.n	801491a <__gethex+0x136>
 8014848:	f817 000a 	ldrb.w	r0, [r7, sl]
 801484c:	eb07 060a 	add.w	r6, r7, sl
 8014850:	f7ff ffb2 	bl	80147b8 <__hexdig_fun>
 8014854:	2800      	cmp	r0, #0
 8014856:	d062      	beq.n	801491e <__gethex+0x13a>
 8014858:	4633      	mov	r3, r6
 801485a:	7818      	ldrb	r0, [r3, #0]
 801485c:	2830      	cmp	r0, #48	; 0x30
 801485e:	461f      	mov	r7, r3
 8014860:	f103 0301 	add.w	r3, r3, #1
 8014864:	d0f9      	beq.n	801485a <__gethex+0x76>
 8014866:	f7ff ffa7 	bl	80147b8 <__hexdig_fun>
 801486a:	2301      	movs	r3, #1
 801486c:	fab0 f480 	clz	r4, r0
 8014870:	0964      	lsrs	r4, r4, #5
 8014872:	4635      	mov	r5, r6
 8014874:	9300      	str	r3, [sp, #0]
 8014876:	463a      	mov	r2, r7
 8014878:	4616      	mov	r6, r2
 801487a:	3201      	adds	r2, #1
 801487c:	7830      	ldrb	r0, [r6, #0]
 801487e:	f7ff ff9b 	bl	80147b8 <__hexdig_fun>
 8014882:	2800      	cmp	r0, #0
 8014884:	d1f8      	bne.n	8014878 <__gethex+0x94>
 8014886:	9901      	ldr	r1, [sp, #4]
 8014888:	4652      	mov	r2, sl
 801488a:	4630      	mov	r0, r6
 801488c:	f7fe f996 	bl	8012bbc <strncmp>
 8014890:	b980      	cbnz	r0, 80148b4 <__gethex+0xd0>
 8014892:	b94d      	cbnz	r5, 80148a8 <__gethex+0xc4>
 8014894:	eb06 050a 	add.w	r5, r6, sl
 8014898:	462a      	mov	r2, r5
 801489a:	4616      	mov	r6, r2
 801489c:	3201      	adds	r2, #1
 801489e:	7830      	ldrb	r0, [r6, #0]
 80148a0:	f7ff ff8a 	bl	80147b8 <__hexdig_fun>
 80148a4:	2800      	cmp	r0, #0
 80148a6:	d1f8      	bne.n	801489a <__gethex+0xb6>
 80148a8:	1bad      	subs	r5, r5, r6
 80148aa:	00ad      	lsls	r5, r5, #2
 80148ac:	e004      	b.n	80148b8 <__gethex+0xd4>
 80148ae:	2400      	movs	r4, #0
 80148b0:	4625      	mov	r5, r4
 80148b2:	e7e0      	b.n	8014876 <__gethex+0x92>
 80148b4:	2d00      	cmp	r5, #0
 80148b6:	d1f7      	bne.n	80148a8 <__gethex+0xc4>
 80148b8:	7833      	ldrb	r3, [r6, #0]
 80148ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80148be:	2b50      	cmp	r3, #80	; 0x50
 80148c0:	d13b      	bne.n	801493a <__gethex+0x156>
 80148c2:	7873      	ldrb	r3, [r6, #1]
 80148c4:	2b2b      	cmp	r3, #43	; 0x2b
 80148c6:	d02c      	beq.n	8014922 <__gethex+0x13e>
 80148c8:	2b2d      	cmp	r3, #45	; 0x2d
 80148ca:	d02e      	beq.n	801492a <__gethex+0x146>
 80148cc:	1c71      	adds	r1, r6, #1
 80148ce:	f04f 0900 	mov.w	r9, #0
 80148d2:	7808      	ldrb	r0, [r1, #0]
 80148d4:	f7ff ff70 	bl	80147b8 <__hexdig_fun>
 80148d8:	1e43      	subs	r3, r0, #1
 80148da:	b2db      	uxtb	r3, r3
 80148dc:	2b18      	cmp	r3, #24
 80148de:	d82c      	bhi.n	801493a <__gethex+0x156>
 80148e0:	f1a0 0210 	sub.w	r2, r0, #16
 80148e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80148e8:	f7ff ff66 	bl	80147b8 <__hexdig_fun>
 80148ec:	1e43      	subs	r3, r0, #1
 80148ee:	b2db      	uxtb	r3, r3
 80148f0:	2b18      	cmp	r3, #24
 80148f2:	d91d      	bls.n	8014930 <__gethex+0x14c>
 80148f4:	f1b9 0f00 	cmp.w	r9, #0
 80148f8:	d000      	beq.n	80148fc <__gethex+0x118>
 80148fa:	4252      	negs	r2, r2
 80148fc:	4415      	add	r5, r2
 80148fe:	f8cb 1000 	str.w	r1, [fp]
 8014902:	b1e4      	cbz	r4, 801493e <__gethex+0x15a>
 8014904:	9b00      	ldr	r3, [sp, #0]
 8014906:	2b00      	cmp	r3, #0
 8014908:	bf14      	ite	ne
 801490a:	2700      	movne	r7, #0
 801490c:	2706      	moveq	r7, #6
 801490e:	4638      	mov	r0, r7
 8014910:	b009      	add	sp, #36	; 0x24
 8014912:	ecbd 8b02 	vpop	{d8}
 8014916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801491a:	463e      	mov	r6, r7
 801491c:	4625      	mov	r5, r4
 801491e:	2401      	movs	r4, #1
 8014920:	e7ca      	b.n	80148b8 <__gethex+0xd4>
 8014922:	f04f 0900 	mov.w	r9, #0
 8014926:	1cb1      	adds	r1, r6, #2
 8014928:	e7d3      	b.n	80148d2 <__gethex+0xee>
 801492a:	f04f 0901 	mov.w	r9, #1
 801492e:	e7fa      	b.n	8014926 <__gethex+0x142>
 8014930:	230a      	movs	r3, #10
 8014932:	fb03 0202 	mla	r2, r3, r2, r0
 8014936:	3a10      	subs	r2, #16
 8014938:	e7d4      	b.n	80148e4 <__gethex+0x100>
 801493a:	4631      	mov	r1, r6
 801493c:	e7df      	b.n	80148fe <__gethex+0x11a>
 801493e:	1bf3      	subs	r3, r6, r7
 8014940:	3b01      	subs	r3, #1
 8014942:	4621      	mov	r1, r4
 8014944:	2b07      	cmp	r3, #7
 8014946:	dc0b      	bgt.n	8014960 <__gethex+0x17c>
 8014948:	ee18 0a10 	vmov	r0, s16
 801494c:	f000 fa74 	bl	8014e38 <_Balloc>
 8014950:	4604      	mov	r4, r0
 8014952:	b940      	cbnz	r0, 8014966 <__gethex+0x182>
 8014954:	4b5d      	ldr	r3, [pc, #372]	; (8014acc <__gethex+0x2e8>)
 8014956:	4602      	mov	r2, r0
 8014958:	21de      	movs	r1, #222	; 0xde
 801495a:	485d      	ldr	r0, [pc, #372]	; (8014ad0 <__gethex+0x2ec>)
 801495c:	f001 f9fa 	bl	8015d54 <__assert_func>
 8014960:	3101      	adds	r1, #1
 8014962:	105b      	asrs	r3, r3, #1
 8014964:	e7ee      	b.n	8014944 <__gethex+0x160>
 8014966:	f100 0914 	add.w	r9, r0, #20
 801496a:	f04f 0b00 	mov.w	fp, #0
 801496e:	f1ca 0301 	rsb	r3, sl, #1
 8014972:	f8cd 9008 	str.w	r9, [sp, #8]
 8014976:	f8cd b000 	str.w	fp, [sp]
 801497a:	9306      	str	r3, [sp, #24]
 801497c:	42b7      	cmp	r7, r6
 801497e:	d340      	bcc.n	8014a02 <__gethex+0x21e>
 8014980:	9802      	ldr	r0, [sp, #8]
 8014982:	9b00      	ldr	r3, [sp, #0]
 8014984:	f840 3b04 	str.w	r3, [r0], #4
 8014988:	eba0 0009 	sub.w	r0, r0, r9
 801498c:	1080      	asrs	r0, r0, #2
 801498e:	0146      	lsls	r6, r0, #5
 8014990:	6120      	str	r0, [r4, #16]
 8014992:	4618      	mov	r0, r3
 8014994:	f000 fb42 	bl	801501c <__hi0bits>
 8014998:	1a30      	subs	r0, r6, r0
 801499a:	f8d8 6000 	ldr.w	r6, [r8]
 801499e:	42b0      	cmp	r0, r6
 80149a0:	dd63      	ble.n	8014a6a <__gethex+0x286>
 80149a2:	1b87      	subs	r7, r0, r6
 80149a4:	4639      	mov	r1, r7
 80149a6:	4620      	mov	r0, r4
 80149a8:	f000 fee6 	bl	8015778 <__any_on>
 80149ac:	4682      	mov	sl, r0
 80149ae:	b1a8      	cbz	r0, 80149dc <__gethex+0x1f8>
 80149b0:	1e7b      	subs	r3, r7, #1
 80149b2:	1159      	asrs	r1, r3, #5
 80149b4:	f003 021f 	and.w	r2, r3, #31
 80149b8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80149bc:	f04f 0a01 	mov.w	sl, #1
 80149c0:	fa0a f202 	lsl.w	r2, sl, r2
 80149c4:	420a      	tst	r2, r1
 80149c6:	d009      	beq.n	80149dc <__gethex+0x1f8>
 80149c8:	4553      	cmp	r3, sl
 80149ca:	dd05      	ble.n	80149d8 <__gethex+0x1f4>
 80149cc:	1eb9      	subs	r1, r7, #2
 80149ce:	4620      	mov	r0, r4
 80149d0:	f000 fed2 	bl	8015778 <__any_on>
 80149d4:	2800      	cmp	r0, #0
 80149d6:	d145      	bne.n	8014a64 <__gethex+0x280>
 80149d8:	f04f 0a02 	mov.w	sl, #2
 80149dc:	4639      	mov	r1, r7
 80149de:	4620      	mov	r0, r4
 80149e0:	f7ff fe98 	bl	8014714 <rshift>
 80149e4:	443d      	add	r5, r7
 80149e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80149ea:	42ab      	cmp	r3, r5
 80149ec:	da4c      	bge.n	8014a88 <__gethex+0x2a4>
 80149ee:	ee18 0a10 	vmov	r0, s16
 80149f2:	4621      	mov	r1, r4
 80149f4:	f000 fa60 	bl	8014eb8 <_Bfree>
 80149f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80149fa:	2300      	movs	r3, #0
 80149fc:	6013      	str	r3, [r2, #0]
 80149fe:	27a3      	movs	r7, #163	; 0xa3
 8014a00:	e785      	b.n	801490e <__gethex+0x12a>
 8014a02:	1e73      	subs	r3, r6, #1
 8014a04:	9a05      	ldr	r2, [sp, #20]
 8014a06:	9303      	str	r3, [sp, #12]
 8014a08:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014a0c:	4293      	cmp	r3, r2
 8014a0e:	d019      	beq.n	8014a44 <__gethex+0x260>
 8014a10:	f1bb 0f20 	cmp.w	fp, #32
 8014a14:	d107      	bne.n	8014a26 <__gethex+0x242>
 8014a16:	9b02      	ldr	r3, [sp, #8]
 8014a18:	9a00      	ldr	r2, [sp, #0]
 8014a1a:	f843 2b04 	str.w	r2, [r3], #4
 8014a1e:	9302      	str	r3, [sp, #8]
 8014a20:	2300      	movs	r3, #0
 8014a22:	9300      	str	r3, [sp, #0]
 8014a24:	469b      	mov	fp, r3
 8014a26:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8014a2a:	f7ff fec5 	bl	80147b8 <__hexdig_fun>
 8014a2e:	9b00      	ldr	r3, [sp, #0]
 8014a30:	f000 000f 	and.w	r0, r0, #15
 8014a34:	fa00 f00b 	lsl.w	r0, r0, fp
 8014a38:	4303      	orrs	r3, r0
 8014a3a:	9300      	str	r3, [sp, #0]
 8014a3c:	f10b 0b04 	add.w	fp, fp, #4
 8014a40:	9b03      	ldr	r3, [sp, #12]
 8014a42:	e00d      	b.n	8014a60 <__gethex+0x27c>
 8014a44:	9b03      	ldr	r3, [sp, #12]
 8014a46:	9a06      	ldr	r2, [sp, #24]
 8014a48:	4413      	add	r3, r2
 8014a4a:	42bb      	cmp	r3, r7
 8014a4c:	d3e0      	bcc.n	8014a10 <__gethex+0x22c>
 8014a4e:	4618      	mov	r0, r3
 8014a50:	9901      	ldr	r1, [sp, #4]
 8014a52:	9307      	str	r3, [sp, #28]
 8014a54:	4652      	mov	r2, sl
 8014a56:	f7fe f8b1 	bl	8012bbc <strncmp>
 8014a5a:	9b07      	ldr	r3, [sp, #28]
 8014a5c:	2800      	cmp	r0, #0
 8014a5e:	d1d7      	bne.n	8014a10 <__gethex+0x22c>
 8014a60:	461e      	mov	r6, r3
 8014a62:	e78b      	b.n	801497c <__gethex+0x198>
 8014a64:	f04f 0a03 	mov.w	sl, #3
 8014a68:	e7b8      	b.n	80149dc <__gethex+0x1f8>
 8014a6a:	da0a      	bge.n	8014a82 <__gethex+0x29e>
 8014a6c:	1a37      	subs	r7, r6, r0
 8014a6e:	4621      	mov	r1, r4
 8014a70:	ee18 0a10 	vmov	r0, s16
 8014a74:	463a      	mov	r2, r7
 8014a76:	f000 fc3b 	bl	80152f0 <__lshift>
 8014a7a:	1bed      	subs	r5, r5, r7
 8014a7c:	4604      	mov	r4, r0
 8014a7e:	f100 0914 	add.w	r9, r0, #20
 8014a82:	f04f 0a00 	mov.w	sl, #0
 8014a86:	e7ae      	b.n	80149e6 <__gethex+0x202>
 8014a88:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8014a8c:	42a8      	cmp	r0, r5
 8014a8e:	dd72      	ble.n	8014b76 <__gethex+0x392>
 8014a90:	1b45      	subs	r5, r0, r5
 8014a92:	42ae      	cmp	r6, r5
 8014a94:	dc36      	bgt.n	8014b04 <__gethex+0x320>
 8014a96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014a9a:	2b02      	cmp	r3, #2
 8014a9c:	d02a      	beq.n	8014af4 <__gethex+0x310>
 8014a9e:	2b03      	cmp	r3, #3
 8014aa0:	d02c      	beq.n	8014afc <__gethex+0x318>
 8014aa2:	2b01      	cmp	r3, #1
 8014aa4:	d11c      	bne.n	8014ae0 <__gethex+0x2fc>
 8014aa6:	42ae      	cmp	r6, r5
 8014aa8:	d11a      	bne.n	8014ae0 <__gethex+0x2fc>
 8014aaa:	2e01      	cmp	r6, #1
 8014aac:	d112      	bne.n	8014ad4 <__gethex+0x2f0>
 8014aae:	9a04      	ldr	r2, [sp, #16]
 8014ab0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014ab4:	6013      	str	r3, [r2, #0]
 8014ab6:	2301      	movs	r3, #1
 8014ab8:	6123      	str	r3, [r4, #16]
 8014aba:	f8c9 3000 	str.w	r3, [r9]
 8014abe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014ac0:	2762      	movs	r7, #98	; 0x62
 8014ac2:	601c      	str	r4, [r3, #0]
 8014ac4:	e723      	b.n	801490e <__gethex+0x12a>
 8014ac6:	bf00      	nop
 8014ac8:	08018528 	.word	0x08018528
 8014acc:	080184af 	.word	0x080184af
 8014ad0:	080184c0 	.word	0x080184c0
 8014ad4:	1e71      	subs	r1, r6, #1
 8014ad6:	4620      	mov	r0, r4
 8014ad8:	f000 fe4e 	bl	8015778 <__any_on>
 8014adc:	2800      	cmp	r0, #0
 8014ade:	d1e6      	bne.n	8014aae <__gethex+0x2ca>
 8014ae0:	ee18 0a10 	vmov	r0, s16
 8014ae4:	4621      	mov	r1, r4
 8014ae6:	f000 f9e7 	bl	8014eb8 <_Bfree>
 8014aea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014aec:	2300      	movs	r3, #0
 8014aee:	6013      	str	r3, [r2, #0]
 8014af0:	2750      	movs	r7, #80	; 0x50
 8014af2:	e70c      	b.n	801490e <__gethex+0x12a>
 8014af4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d1f2      	bne.n	8014ae0 <__gethex+0x2fc>
 8014afa:	e7d8      	b.n	8014aae <__gethex+0x2ca>
 8014afc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d1d5      	bne.n	8014aae <__gethex+0x2ca>
 8014b02:	e7ed      	b.n	8014ae0 <__gethex+0x2fc>
 8014b04:	1e6f      	subs	r7, r5, #1
 8014b06:	f1ba 0f00 	cmp.w	sl, #0
 8014b0a:	d131      	bne.n	8014b70 <__gethex+0x38c>
 8014b0c:	b127      	cbz	r7, 8014b18 <__gethex+0x334>
 8014b0e:	4639      	mov	r1, r7
 8014b10:	4620      	mov	r0, r4
 8014b12:	f000 fe31 	bl	8015778 <__any_on>
 8014b16:	4682      	mov	sl, r0
 8014b18:	117b      	asrs	r3, r7, #5
 8014b1a:	2101      	movs	r1, #1
 8014b1c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8014b20:	f007 071f 	and.w	r7, r7, #31
 8014b24:	fa01 f707 	lsl.w	r7, r1, r7
 8014b28:	421f      	tst	r7, r3
 8014b2a:	4629      	mov	r1, r5
 8014b2c:	4620      	mov	r0, r4
 8014b2e:	bf18      	it	ne
 8014b30:	f04a 0a02 	orrne.w	sl, sl, #2
 8014b34:	1b76      	subs	r6, r6, r5
 8014b36:	f7ff fded 	bl	8014714 <rshift>
 8014b3a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8014b3e:	2702      	movs	r7, #2
 8014b40:	f1ba 0f00 	cmp.w	sl, #0
 8014b44:	d048      	beq.n	8014bd8 <__gethex+0x3f4>
 8014b46:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014b4a:	2b02      	cmp	r3, #2
 8014b4c:	d015      	beq.n	8014b7a <__gethex+0x396>
 8014b4e:	2b03      	cmp	r3, #3
 8014b50:	d017      	beq.n	8014b82 <__gethex+0x39e>
 8014b52:	2b01      	cmp	r3, #1
 8014b54:	d109      	bne.n	8014b6a <__gethex+0x386>
 8014b56:	f01a 0f02 	tst.w	sl, #2
 8014b5a:	d006      	beq.n	8014b6a <__gethex+0x386>
 8014b5c:	f8d9 0000 	ldr.w	r0, [r9]
 8014b60:	ea4a 0a00 	orr.w	sl, sl, r0
 8014b64:	f01a 0f01 	tst.w	sl, #1
 8014b68:	d10e      	bne.n	8014b88 <__gethex+0x3a4>
 8014b6a:	f047 0710 	orr.w	r7, r7, #16
 8014b6e:	e033      	b.n	8014bd8 <__gethex+0x3f4>
 8014b70:	f04f 0a01 	mov.w	sl, #1
 8014b74:	e7d0      	b.n	8014b18 <__gethex+0x334>
 8014b76:	2701      	movs	r7, #1
 8014b78:	e7e2      	b.n	8014b40 <__gethex+0x35c>
 8014b7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014b7c:	f1c3 0301 	rsb	r3, r3, #1
 8014b80:	9315      	str	r3, [sp, #84]	; 0x54
 8014b82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d0f0      	beq.n	8014b6a <__gethex+0x386>
 8014b88:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014b8c:	f104 0314 	add.w	r3, r4, #20
 8014b90:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8014b94:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8014b98:	f04f 0c00 	mov.w	ip, #0
 8014b9c:	4618      	mov	r0, r3
 8014b9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014ba2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8014ba6:	d01c      	beq.n	8014be2 <__gethex+0x3fe>
 8014ba8:	3201      	adds	r2, #1
 8014baa:	6002      	str	r2, [r0, #0]
 8014bac:	2f02      	cmp	r7, #2
 8014bae:	f104 0314 	add.w	r3, r4, #20
 8014bb2:	d13f      	bne.n	8014c34 <__gethex+0x450>
 8014bb4:	f8d8 2000 	ldr.w	r2, [r8]
 8014bb8:	3a01      	subs	r2, #1
 8014bba:	42b2      	cmp	r2, r6
 8014bbc:	d10a      	bne.n	8014bd4 <__gethex+0x3f0>
 8014bbe:	1171      	asrs	r1, r6, #5
 8014bc0:	2201      	movs	r2, #1
 8014bc2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014bc6:	f006 061f 	and.w	r6, r6, #31
 8014bca:	fa02 f606 	lsl.w	r6, r2, r6
 8014bce:	421e      	tst	r6, r3
 8014bd0:	bf18      	it	ne
 8014bd2:	4617      	movne	r7, r2
 8014bd4:	f047 0720 	orr.w	r7, r7, #32
 8014bd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014bda:	601c      	str	r4, [r3, #0]
 8014bdc:	9b04      	ldr	r3, [sp, #16]
 8014bde:	601d      	str	r5, [r3, #0]
 8014be0:	e695      	b.n	801490e <__gethex+0x12a>
 8014be2:	4299      	cmp	r1, r3
 8014be4:	f843 cc04 	str.w	ip, [r3, #-4]
 8014be8:	d8d8      	bhi.n	8014b9c <__gethex+0x3b8>
 8014bea:	68a3      	ldr	r3, [r4, #8]
 8014bec:	459b      	cmp	fp, r3
 8014bee:	db19      	blt.n	8014c24 <__gethex+0x440>
 8014bf0:	6861      	ldr	r1, [r4, #4]
 8014bf2:	ee18 0a10 	vmov	r0, s16
 8014bf6:	3101      	adds	r1, #1
 8014bf8:	f000 f91e 	bl	8014e38 <_Balloc>
 8014bfc:	4681      	mov	r9, r0
 8014bfe:	b918      	cbnz	r0, 8014c08 <__gethex+0x424>
 8014c00:	4b1a      	ldr	r3, [pc, #104]	; (8014c6c <__gethex+0x488>)
 8014c02:	4602      	mov	r2, r0
 8014c04:	2184      	movs	r1, #132	; 0x84
 8014c06:	e6a8      	b.n	801495a <__gethex+0x176>
 8014c08:	6922      	ldr	r2, [r4, #16]
 8014c0a:	3202      	adds	r2, #2
 8014c0c:	f104 010c 	add.w	r1, r4, #12
 8014c10:	0092      	lsls	r2, r2, #2
 8014c12:	300c      	adds	r0, #12
 8014c14:	f7fd fb16 	bl	8012244 <memcpy>
 8014c18:	4621      	mov	r1, r4
 8014c1a:	ee18 0a10 	vmov	r0, s16
 8014c1e:	f000 f94b 	bl	8014eb8 <_Bfree>
 8014c22:	464c      	mov	r4, r9
 8014c24:	6923      	ldr	r3, [r4, #16]
 8014c26:	1c5a      	adds	r2, r3, #1
 8014c28:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014c2c:	6122      	str	r2, [r4, #16]
 8014c2e:	2201      	movs	r2, #1
 8014c30:	615a      	str	r2, [r3, #20]
 8014c32:	e7bb      	b.n	8014bac <__gethex+0x3c8>
 8014c34:	6922      	ldr	r2, [r4, #16]
 8014c36:	455a      	cmp	r2, fp
 8014c38:	dd0b      	ble.n	8014c52 <__gethex+0x46e>
 8014c3a:	2101      	movs	r1, #1
 8014c3c:	4620      	mov	r0, r4
 8014c3e:	f7ff fd69 	bl	8014714 <rshift>
 8014c42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014c46:	3501      	adds	r5, #1
 8014c48:	42ab      	cmp	r3, r5
 8014c4a:	f6ff aed0 	blt.w	80149ee <__gethex+0x20a>
 8014c4e:	2701      	movs	r7, #1
 8014c50:	e7c0      	b.n	8014bd4 <__gethex+0x3f0>
 8014c52:	f016 061f 	ands.w	r6, r6, #31
 8014c56:	d0fa      	beq.n	8014c4e <__gethex+0x46a>
 8014c58:	4453      	add	r3, sl
 8014c5a:	f1c6 0620 	rsb	r6, r6, #32
 8014c5e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8014c62:	f000 f9db 	bl	801501c <__hi0bits>
 8014c66:	42b0      	cmp	r0, r6
 8014c68:	dbe7      	blt.n	8014c3a <__gethex+0x456>
 8014c6a:	e7f0      	b.n	8014c4e <__gethex+0x46a>
 8014c6c:	080184af 	.word	0x080184af

08014c70 <L_shift>:
 8014c70:	f1c2 0208 	rsb	r2, r2, #8
 8014c74:	0092      	lsls	r2, r2, #2
 8014c76:	b570      	push	{r4, r5, r6, lr}
 8014c78:	f1c2 0620 	rsb	r6, r2, #32
 8014c7c:	6843      	ldr	r3, [r0, #4]
 8014c7e:	6804      	ldr	r4, [r0, #0]
 8014c80:	fa03 f506 	lsl.w	r5, r3, r6
 8014c84:	432c      	orrs	r4, r5
 8014c86:	40d3      	lsrs	r3, r2
 8014c88:	6004      	str	r4, [r0, #0]
 8014c8a:	f840 3f04 	str.w	r3, [r0, #4]!
 8014c8e:	4288      	cmp	r0, r1
 8014c90:	d3f4      	bcc.n	8014c7c <L_shift+0xc>
 8014c92:	bd70      	pop	{r4, r5, r6, pc}

08014c94 <__match>:
 8014c94:	b530      	push	{r4, r5, lr}
 8014c96:	6803      	ldr	r3, [r0, #0]
 8014c98:	3301      	adds	r3, #1
 8014c9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014c9e:	b914      	cbnz	r4, 8014ca6 <__match+0x12>
 8014ca0:	6003      	str	r3, [r0, #0]
 8014ca2:	2001      	movs	r0, #1
 8014ca4:	bd30      	pop	{r4, r5, pc}
 8014ca6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014caa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8014cae:	2d19      	cmp	r5, #25
 8014cb0:	bf98      	it	ls
 8014cb2:	3220      	addls	r2, #32
 8014cb4:	42a2      	cmp	r2, r4
 8014cb6:	d0f0      	beq.n	8014c9a <__match+0x6>
 8014cb8:	2000      	movs	r0, #0
 8014cba:	e7f3      	b.n	8014ca4 <__match+0x10>

08014cbc <__hexnan>:
 8014cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cc0:	680b      	ldr	r3, [r1, #0]
 8014cc2:	115e      	asrs	r6, r3, #5
 8014cc4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014cc8:	f013 031f 	ands.w	r3, r3, #31
 8014ccc:	b087      	sub	sp, #28
 8014cce:	bf18      	it	ne
 8014cd0:	3604      	addne	r6, #4
 8014cd2:	2500      	movs	r5, #0
 8014cd4:	1f37      	subs	r7, r6, #4
 8014cd6:	4690      	mov	r8, r2
 8014cd8:	6802      	ldr	r2, [r0, #0]
 8014cda:	9301      	str	r3, [sp, #4]
 8014cdc:	4682      	mov	sl, r0
 8014cde:	f846 5c04 	str.w	r5, [r6, #-4]
 8014ce2:	46b9      	mov	r9, r7
 8014ce4:	463c      	mov	r4, r7
 8014ce6:	9502      	str	r5, [sp, #8]
 8014ce8:	46ab      	mov	fp, r5
 8014cea:	7851      	ldrb	r1, [r2, #1]
 8014cec:	1c53      	adds	r3, r2, #1
 8014cee:	9303      	str	r3, [sp, #12]
 8014cf0:	b341      	cbz	r1, 8014d44 <__hexnan+0x88>
 8014cf2:	4608      	mov	r0, r1
 8014cf4:	9205      	str	r2, [sp, #20]
 8014cf6:	9104      	str	r1, [sp, #16]
 8014cf8:	f7ff fd5e 	bl	80147b8 <__hexdig_fun>
 8014cfc:	2800      	cmp	r0, #0
 8014cfe:	d14f      	bne.n	8014da0 <__hexnan+0xe4>
 8014d00:	9904      	ldr	r1, [sp, #16]
 8014d02:	9a05      	ldr	r2, [sp, #20]
 8014d04:	2920      	cmp	r1, #32
 8014d06:	d818      	bhi.n	8014d3a <__hexnan+0x7e>
 8014d08:	9b02      	ldr	r3, [sp, #8]
 8014d0a:	459b      	cmp	fp, r3
 8014d0c:	dd13      	ble.n	8014d36 <__hexnan+0x7a>
 8014d0e:	454c      	cmp	r4, r9
 8014d10:	d206      	bcs.n	8014d20 <__hexnan+0x64>
 8014d12:	2d07      	cmp	r5, #7
 8014d14:	dc04      	bgt.n	8014d20 <__hexnan+0x64>
 8014d16:	462a      	mov	r2, r5
 8014d18:	4649      	mov	r1, r9
 8014d1a:	4620      	mov	r0, r4
 8014d1c:	f7ff ffa8 	bl	8014c70 <L_shift>
 8014d20:	4544      	cmp	r4, r8
 8014d22:	d950      	bls.n	8014dc6 <__hexnan+0x10a>
 8014d24:	2300      	movs	r3, #0
 8014d26:	f1a4 0904 	sub.w	r9, r4, #4
 8014d2a:	f844 3c04 	str.w	r3, [r4, #-4]
 8014d2e:	f8cd b008 	str.w	fp, [sp, #8]
 8014d32:	464c      	mov	r4, r9
 8014d34:	461d      	mov	r5, r3
 8014d36:	9a03      	ldr	r2, [sp, #12]
 8014d38:	e7d7      	b.n	8014cea <__hexnan+0x2e>
 8014d3a:	2929      	cmp	r1, #41	; 0x29
 8014d3c:	d156      	bne.n	8014dec <__hexnan+0x130>
 8014d3e:	3202      	adds	r2, #2
 8014d40:	f8ca 2000 	str.w	r2, [sl]
 8014d44:	f1bb 0f00 	cmp.w	fp, #0
 8014d48:	d050      	beq.n	8014dec <__hexnan+0x130>
 8014d4a:	454c      	cmp	r4, r9
 8014d4c:	d206      	bcs.n	8014d5c <__hexnan+0xa0>
 8014d4e:	2d07      	cmp	r5, #7
 8014d50:	dc04      	bgt.n	8014d5c <__hexnan+0xa0>
 8014d52:	462a      	mov	r2, r5
 8014d54:	4649      	mov	r1, r9
 8014d56:	4620      	mov	r0, r4
 8014d58:	f7ff ff8a 	bl	8014c70 <L_shift>
 8014d5c:	4544      	cmp	r4, r8
 8014d5e:	d934      	bls.n	8014dca <__hexnan+0x10e>
 8014d60:	f1a8 0204 	sub.w	r2, r8, #4
 8014d64:	4623      	mov	r3, r4
 8014d66:	f853 1b04 	ldr.w	r1, [r3], #4
 8014d6a:	f842 1f04 	str.w	r1, [r2, #4]!
 8014d6e:	429f      	cmp	r7, r3
 8014d70:	d2f9      	bcs.n	8014d66 <__hexnan+0xaa>
 8014d72:	1b3b      	subs	r3, r7, r4
 8014d74:	f023 0303 	bic.w	r3, r3, #3
 8014d78:	3304      	adds	r3, #4
 8014d7a:	3401      	adds	r4, #1
 8014d7c:	3e03      	subs	r6, #3
 8014d7e:	42b4      	cmp	r4, r6
 8014d80:	bf88      	it	hi
 8014d82:	2304      	movhi	r3, #4
 8014d84:	4443      	add	r3, r8
 8014d86:	2200      	movs	r2, #0
 8014d88:	f843 2b04 	str.w	r2, [r3], #4
 8014d8c:	429f      	cmp	r7, r3
 8014d8e:	d2fb      	bcs.n	8014d88 <__hexnan+0xcc>
 8014d90:	683b      	ldr	r3, [r7, #0]
 8014d92:	b91b      	cbnz	r3, 8014d9c <__hexnan+0xe0>
 8014d94:	4547      	cmp	r7, r8
 8014d96:	d127      	bne.n	8014de8 <__hexnan+0x12c>
 8014d98:	2301      	movs	r3, #1
 8014d9a:	603b      	str	r3, [r7, #0]
 8014d9c:	2005      	movs	r0, #5
 8014d9e:	e026      	b.n	8014dee <__hexnan+0x132>
 8014da0:	3501      	adds	r5, #1
 8014da2:	2d08      	cmp	r5, #8
 8014da4:	f10b 0b01 	add.w	fp, fp, #1
 8014da8:	dd06      	ble.n	8014db8 <__hexnan+0xfc>
 8014daa:	4544      	cmp	r4, r8
 8014dac:	d9c3      	bls.n	8014d36 <__hexnan+0x7a>
 8014dae:	2300      	movs	r3, #0
 8014db0:	f844 3c04 	str.w	r3, [r4, #-4]
 8014db4:	2501      	movs	r5, #1
 8014db6:	3c04      	subs	r4, #4
 8014db8:	6822      	ldr	r2, [r4, #0]
 8014dba:	f000 000f 	and.w	r0, r0, #15
 8014dbe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8014dc2:	6022      	str	r2, [r4, #0]
 8014dc4:	e7b7      	b.n	8014d36 <__hexnan+0x7a>
 8014dc6:	2508      	movs	r5, #8
 8014dc8:	e7b5      	b.n	8014d36 <__hexnan+0x7a>
 8014dca:	9b01      	ldr	r3, [sp, #4]
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d0df      	beq.n	8014d90 <__hexnan+0xd4>
 8014dd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014dd4:	f1c3 0320 	rsb	r3, r3, #32
 8014dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8014ddc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014de0:	401a      	ands	r2, r3
 8014de2:	f846 2c04 	str.w	r2, [r6, #-4]
 8014de6:	e7d3      	b.n	8014d90 <__hexnan+0xd4>
 8014de8:	3f04      	subs	r7, #4
 8014dea:	e7d1      	b.n	8014d90 <__hexnan+0xd4>
 8014dec:	2004      	movs	r0, #4
 8014dee:	b007      	add	sp, #28
 8014df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014df4 <_localeconv_r>:
 8014df4:	4800      	ldr	r0, [pc, #0]	; (8014df8 <_localeconv_r+0x4>)
 8014df6:	4770      	bx	lr
 8014df8:	200003b0 	.word	0x200003b0

08014dfc <__retarget_lock_init_recursive>:
 8014dfc:	4770      	bx	lr

08014dfe <__retarget_lock_acquire_recursive>:
 8014dfe:	4770      	bx	lr

08014e00 <__retarget_lock_release_recursive>:
 8014e00:	4770      	bx	lr
	...

08014e04 <malloc>:
 8014e04:	4b02      	ldr	r3, [pc, #8]	; (8014e10 <malloc+0xc>)
 8014e06:	4601      	mov	r1, r0
 8014e08:	6818      	ldr	r0, [r3, #0]
 8014e0a:	f000 bd59 	b.w	80158c0 <_malloc_r>
 8014e0e:	bf00      	nop
 8014e10:	20000258 	.word	0x20000258

08014e14 <__ascii_mbtowc>:
 8014e14:	b082      	sub	sp, #8
 8014e16:	b901      	cbnz	r1, 8014e1a <__ascii_mbtowc+0x6>
 8014e18:	a901      	add	r1, sp, #4
 8014e1a:	b142      	cbz	r2, 8014e2e <__ascii_mbtowc+0x1a>
 8014e1c:	b14b      	cbz	r3, 8014e32 <__ascii_mbtowc+0x1e>
 8014e1e:	7813      	ldrb	r3, [r2, #0]
 8014e20:	600b      	str	r3, [r1, #0]
 8014e22:	7812      	ldrb	r2, [r2, #0]
 8014e24:	1e10      	subs	r0, r2, #0
 8014e26:	bf18      	it	ne
 8014e28:	2001      	movne	r0, #1
 8014e2a:	b002      	add	sp, #8
 8014e2c:	4770      	bx	lr
 8014e2e:	4610      	mov	r0, r2
 8014e30:	e7fb      	b.n	8014e2a <__ascii_mbtowc+0x16>
 8014e32:	f06f 0001 	mvn.w	r0, #1
 8014e36:	e7f8      	b.n	8014e2a <__ascii_mbtowc+0x16>

08014e38 <_Balloc>:
 8014e38:	b570      	push	{r4, r5, r6, lr}
 8014e3a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014e3c:	4604      	mov	r4, r0
 8014e3e:	460d      	mov	r5, r1
 8014e40:	b976      	cbnz	r6, 8014e60 <_Balloc+0x28>
 8014e42:	2010      	movs	r0, #16
 8014e44:	f7ff ffde 	bl	8014e04 <malloc>
 8014e48:	4602      	mov	r2, r0
 8014e4a:	6260      	str	r0, [r4, #36]	; 0x24
 8014e4c:	b920      	cbnz	r0, 8014e58 <_Balloc+0x20>
 8014e4e:	4b18      	ldr	r3, [pc, #96]	; (8014eb0 <_Balloc+0x78>)
 8014e50:	4818      	ldr	r0, [pc, #96]	; (8014eb4 <_Balloc+0x7c>)
 8014e52:	2166      	movs	r1, #102	; 0x66
 8014e54:	f000 ff7e 	bl	8015d54 <__assert_func>
 8014e58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014e5c:	6006      	str	r6, [r0, #0]
 8014e5e:	60c6      	str	r6, [r0, #12]
 8014e60:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014e62:	68f3      	ldr	r3, [r6, #12]
 8014e64:	b183      	cbz	r3, 8014e88 <_Balloc+0x50>
 8014e66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014e68:	68db      	ldr	r3, [r3, #12]
 8014e6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014e6e:	b9b8      	cbnz	r0, 8014ea0 <_Balloc+0x68>
 8014e70:	2101      	movs	r1, #1
 8014e72:	fa01 f605 	lsl.w	r6, r1, r5
 8014e76:	1d72      	adds	r2, r6, #5
 8014e78:	0092      	lsls	r2, r2, #2
 8014e7a:	4620      	mov	r0, r4
 8014e7c:	f000 fc9d 	bl	80157ba <_calloc_r>
 8014e80:	b160      	cbz	r0, 8014e9c <_Balloc+0x64>
 8014e82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014e86:	e00e      	b.n	8014ea6 <_Balloc+0x6e>
 8014e88:	2221      	movs	r2, #33	; 0x21
 8014e8a:	2104      	movs	r1, #4
 8014e8c:	4620      	mov	r0, r4
 8014e8e:	f000 fc94 	bl	80157ba <_calloc_r>
 8014e92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014e94:	60f0      	str	r0, [r6, #12]
 8014e96:	68db      	ldr	r3, [r3, #12]
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d1e4      	bne.n	8014e66 <_Balloc+0x2e>
 8014e9c:	2000      	movs	r0, #0
 8014e9e:	bd70      	pop	{r4, r5, r6, pc}
 8014ea0:	6802      	ldr	r2, [r0, #0]
 8014ea2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014ea6:	2300      	movs	r3, #0
 8014ea8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014eac:	e7f7      	b.n	8014e9e <_Balloc+0x66>
 8014eae:	bf00      	nop
 8014eb0:	0801843d 	.word	0x0801843d
 8014eb4:	0801853c 	.word	0x0801853c

08014eb8 <_Bfree>:
 8014eb8:	b570      	push	{r4, r5, r6, lr}
 8014eba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014ebc:	4605      	mov	r5, r0
 8014ebe:	460c      	mov	r4, r1
 8014ec0:	b976      	cbnz	r6, 8014ee0 <_Bfree+0x28>
 8014ec2:	2010      	movs	r0, #16
 8014ec4:	f7ff ff9e 	bl	8014e04 <malloc>
 8014ec8:	4602      	mov	r2, r0
 8014eca:	6268      	str	r0, [r5, #36]	; 0x24
 8014ecc:	b920      	cbnz	r0, 8014ed8 <_Bfree+0x20>
 8014ece:	4b09      	ldr	r3, [pc, #36]	; (8014ef4 <_Bfree+0x3c>)
 8014ed0:	4809      	ldr	r0, [pc, #36]	; (8014ef8 <_Bfree+0x40>)
 8014ed2:	218a      	movs	r1, #138	; 0x8a
 8014ed4:	f000 ff3e 	bl	8015d54 <__assert_func>
 8014ed8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014edc:	6006      	str	r6, [r0, #0]
 8014ede:	60c6      	str	r6, [r0, #12]
 8014ee0:	b13c      	cbz	r4, 8014ef2 <_Bfree+0x3a>
 8014ee2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014ee4:	6862      	ldr	r2, [r4, #4]
 8014ee6:	68db      	ldr	r3, [r3, #12]
 8014ee8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014eec:	6021      	str	r1, [r4, #0]
 8014eee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014ef2:	bd70      	pop	{r4, r5, r6, pc}
 8014ef4:	0801843d 	.word	0x0801843d
 8014ef8:	0801853c 	.word	0x0801853c

08014efc <__multadd>:
 8014efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f00:	690d      	ldr	r5, [r1, #16]
 8014f02:	4607      	mov	r7, r0
 8014f04:	460c      	mov	r4, r1
 8014f06:	461e      	mov	r6, r3
 8014f08:	f101 0c14 	add.w	ip, r1, #20
 8014f0c:	2000      	movs	r0, #0
 8014f0e:	f8dc 3000 	ldr.w	r3, [ip]
 8014f12:	b299      	uxth	r1, r3
 8014f14:	fb02 6101 	mla	r1, r2, r1, r6
 8014f18:	0c1e      	lsrs	r6, r3, #16
 8014f1a:	0c0b      	lsrs	r3, r1, #16
 8014f1c:	fb02 3306 	mla	r3, r2, r6, r3
 8014f20:	b289      	uxth	r1, r1
 8014f22:	3001      	adds	r0, #1
 8014f24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014f28:	4285      	cmp	r5, r0
 8014f2a:	f84c 1b04 	str.w	r1, [ip], #4
 8014f2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014f32:	dcec      	bgt.n	8014f0e <__multadd+0x12>
 8014f34:	b30e      	cbz	r6, 8014f7a <__multadd+0x7e>
 8014f36:	68a3      	ldr	r3, [r4, #8]
 8014f38:	42ab      	cmp	r3, r5
 8014f3a:	dc19      	bgt.n	8014f70 <__multadd+0x74>
 8014f3c:	6861      	ldr	r1, [r4, #4]
 8014f3e:	4638      	mov	r0, r7
 8014f40:	3101      	adds	r1, #1
 8014f42:	f7ff ff79 	bl	8014e38 <_Balloc>
 8014f46:	4680      	mov	r8, r0
 8014f48:	b928      	cbnz	r0, 8014f56 <__multadd+0x5a>
 8014f4a:	4602      	mov	r2, r0
 8014f4c:	4b0c      	ldr	r3, [pc, #48]	; (8014f80 <__multadd+0x84>)
 8014f4e:	480d      	ldr	r0, [pc, #52]	; (8014f84 <__multadd+0x88>)
 8014f50:	21b5      	movs	r1, #181	; 0xb5
 8014f52:	f000 feff 	bl	8015d54 <__assert_func>
 8014f56:	6922      	ldr	r2, [r4, #16]
 8014f58:	3202      	adds	r2, #2
 8014f5a:	f104 010c 	add.w	r1, r4, #12
 8014f5e:	0092      	lsls	r2, r2, #2
 8014f60:	300c      	adds	r0, #12
 8014f62:	f7fd f96f 	bl	8012244 <memcpy>
 8014f66:	4621      	mov	r1, r4
 8014f68:	4638      	mov	r0, r7
 8014f6a:	f7ff ffa5 	bl	8014eb8 <_Bfree>
 8014f6e:	4644      	mov	r4, r8
 8014f70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014f74:	3501      	adds	r5, #1
 8014f76:	615e      	str	r6, [r3, #20]
 8014f78:	6125      	str	r5, [r4, #16]
 8014f7a:	4620      	mov	r0, r4
 8014f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f80:	080184af 	.word	0x080184af
 8014f84:	0801853c 	.word	0x0801853c

08014f88 <__s2b>:
 8014f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014f8c:	460c      	mov	r4, r1
 8014f8e:	4615      	mov	r5, r2
 8014f90:	461f      	mov	r7, r3
 8014f92:	2209      	movs	r2, #9
 8014f94:	3308      	adds	r3, #8
 8014f96:	4606      	mov	r6, r0
 8014f98:	fb93 f3f2 	sdiv	r3, r3, r2
 8014f9c:	2100      	movs	r1, #0
 8014f9e:	2201      	movs	r2, #1
 8014fa0:	429a      	cmp	r2, r3
 8014fa2:	db09      	blt.n	8014fb8 <__s2b+0x30>
 8014fa4:	4630      	mov	r0, r6
 8014fa6:	f7ff ff47 	bl	8014e38 <_Balloc>
 8014faa:	b940      	cbnz	r0, 8014fbe <__s2b+0x36>
 8014fac:	4602      	mov	r2, r0
 8014fae:	4b19      	ldr	r3, [pc, #100]	; (8015014 <__s2b+0x8c>)
 8014fb0:	4819      	ldr	r0, [pc, #100]	; (8015018 <__s2b+0x90>)
 8014fb2:	21ce      	movs	r1, #206	; 0xce
 8014fb4:	f000 fece 	bl	8015d54 <__assert_func>
 8014fb8:	0052      	lsls	r2, r2, #1
 8014fba:	3101      	adds	r1, #1
 8014fbc:	e7f0      	b.n	8014fa0 <__s2b+0x18>
 8014fbe:	9b08      	ldr	r3, [sp, #32]
 8014fc0:	6143      	str	r3, [r0, #20]
 8014fc2:	2d09      	cmp	r5, #9
 8014fc4:	f04f 0301 	mov.w	r3, #1
 8014fc8:	6103      	str	r3, [r0, #16]
 8014fca:	dd16      	ble.n	8014ffa <__s2b+0x72>
 8014fcc:	f104 0909 	add.w	r9, r4, #9
 8014fd0:	46c8      	mov	r8, r9
 8014fd2:	442c      	add	r4, r5
 8014fd4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8014fd8:	4601      	mov	r1, r0
 8014fda:	3b30      	subs	r3, #48	; 0x30
 8014fdc:	220a      	movs	r2, #10
 8014fde:	4630      	mov	r0, r6
 8014fe0:	f7ff ff8c 	bl	8014efc <__multadd>
 8014fe4:	45a0      	cmp	r8, r4
 8014fe6:	d1f5      	bne.n	8014fd4 <__s2b+0x4c>
 8014fe8:	f1a5 0408 	sub.w	r4, r5, #8
 8014fec:	444c      	add	r4, r9
 8014fee:	1b2d      	subs	r5, r5, r4
 8014ff0:	1963      	adds	r3, r4, r5
 8014ff2:	42bb      	cmp	r3, r7
 8014ff4:	db04      	blt.n	8015000 <__s2b+0x78>
 8014ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014ffa:	340a      	adds	r4, #10
 8014ffc:	2509      	movs	r5, #9
 8014ffe:	e7f6      	b.n	8014fee <__s2b+0x66>
 8015000:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015004:	4601      	mov	r1, r0
 8015006:	3b30      	subs	r3, #48	; 0x30
 8015008:	220a      	movs	r2, #10
 801500a:	4630      	mov	r0, r6
 801500c:	f7ff ff76 	bl	8014efc <__multadd>
 8015010:	e7ee      	b.n	8014ff0 <__s2b+0x68>
 8015012:	bf00      	nop
 8015014:	080184af 	.word	0x080184af
 8015018:	0801853c 	.word	0x0801853c

0801501c <__hi0bits>:
 801501c:	0c03      	lsrs	r3, r0, #16
 801501e:	041b      	lsls	r3, r3, #16
 8015020:	b9d3      	cbnz	r3, 8015058 <__hi0bits+0x3c>
 8015022:	0400      	lsls	r0, r0, #16
 8015024:	2310      	movs	r3, #16
 8015026:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801502a:	bf04      	itt	eq
 801502c:	0200      	lsleq	r0, r0, #8
 801502e:	3308      	addeq	r3, #8
 8015030:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015034:	bf04      	itt	eq
 8015036:	0100      	lsleq	r0, r0, #4
 8015038:	3304      	addeq	r3, #4
 801503a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801503e:	bf04      	itt	eq
 8015040:	0080      	lsleq	r0, r0, #2
 8015042:	3302      	addeq	r3, #2
 8015044:	2800      	cmp	r0, #0
 8015046:	db05      	blt.n	8015054 <__hi0bits+0x38>
 8015048:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801504c:	f103 0301 	add.w	r3, r3, #1
 8015050:	bf08      	it	eq
 8015052:	2320      	moveq	r3, #32
 8015054:	4618      	mov	r0, r3
 8015056:	4770      	bx	lr
 8015058:	2300      	movs	r3, #0
 801505a:	e7e4      	b.n	8015026 <__hi0bits+0xa>

0801505c <__lo0bits>:
 801505c:	6803      	ldr	r3, [r0, #0]
 801505e:	f013 0207 	ands.w	r2, r3, #7
 8015062:	4601      	mov	r1, r0
 8015064:	d00b      	beq.n	801507e <__lo0bits+0x22>
 8015066:	07da      	lsls	r2, r3, #31
 8015068:	d423      	bmi.n	80150b2 <__lo0bits+0x56>
 801506a:	0798      	lsls	r0, r3, #30
 801506c:	bf49      	itett	mi
 801506e:	085b      	lsrmi	r3, r3, #1
 8015070:	089b      	lsrpl	r3, r3, #2
 8015072:	2001      	movmi	r0, #1
 8015074:	600b      	strmi	r3, [r1, #0]
 8015076:	bf5c      	itt	pl
 8015078:	600b      	strpl	r3, [r1, #0]
 801507a:	2002      	movpl	r0, #2
 801507c:	4770      	bx	lr
 801507e:	b298      	uxth	r0, r3
 8015080:	b9a8      	cbnz	r0, 80150ae <__lo0bits+0x52>
 8015082:	0c1b      	lsrs	r3, r3, #16
 8015084:	2010      	movs	r0, #16
 8015086:	b2da      	uxtb	r2, r3
 8015088:	b90a      	cbnz	r2, 801508e <__lo0bits+0x32>
 801508a:	3008      	adds	r0, #8
 801508c:	0a1b      	lsrs	r3, r3, #8
 801508e:	071a      	lsls	r2, r3, #28
 8015090:	bf04      	itt	eq
 8015092:	091b      	lsreq	r3, r3, #4
 8015094:	3004      	addeq	r0, #4
 8015096:	079a      	lsls	r2, r3, #30
 8015098:	bf04      	itt	eq
 801509a:	089b      	lsreq	r3, r3, #2
 801509c:	3002      	addeq	r0, #2
 801509e:	07da      	lsls	r2, r3, #31
 80150a0:	d403      	bmi.n	80150aa <__lo0bits+0x4e>
 80150a2:	085b      	lsrs	r3, r3, #1
 80150a4:	f100 0001 	add.w	r0, r0, #1
 80150a8:	d005      	beq.n	80150b6 <__lo0bits+0x5a>
 80150aa:	600b      	str	r3, [r1, #0]
 80150ac:	4770      	bx	lr
 80150ae:	4610      	mov	r0, r2
 80150b0:	e7e9      	b.n	8015086 <__lo0bits+0x2a>
 80150b2:	2000      	movs	r0, #0
 80150b4:	4770      	bx	lr
 80150b6:	2020      	movs	r0, #32
 80150b8:	4770      	bx	lr
	...

080150bc <__i2b>:
 80150bc:	b510      	push	{r4, lr}
 80150be:	460c      	mov	r4, r1
 80150c0:	2101      	movs	r1, #1
 80150c2:	f7ff feb9 	bl	8014e38 <_Balloc>
 80150c6:	4602      	mov	r2, r0
 80150c8:	b928      	cbnz	r0, 80150d6 <__i2b+0x1a>
 80150ca:	4b05      	ldr	r3, [pc, #20]	; (80150e0 <__i2b+0x24>)
 80150cc:	4805      	ldr	r0, [pc, #20]	; (80150e4 <__i2b+0x28>)
 80150ce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80150d2:	f000 fe3f 	bl	8015d54 <__assert_func>
 80150d6:	2301      	movs	r3, #1
 80150d8:	6144      	str	r4, [r0, #20]
 80150da:	6103      	str	r3, [r0, #16]
 80150dc:	bd10      	pop	{r4, pc}
 80150de:	bf00      	nop
 80150e0:	080184af 	.word	0x080184af
 80150e4:	0801853c 	.word	0x0801853c

080150e8 <__multiply>:
 80150e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150ec:	4691      	mov	r9, r2
 80150ee:	690a      	ldr	r2, [r1, #16]
 80150f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80150f4:	429a      	cmp	r2, r3
 80150f6:	bfb8      	it	lt
 80150f8:	460b      	movlt	r3, r1
 80150fa:	460c      	mov	r4, r1
 80150fc:	bfbc      	itt	lt
 80150fe:	464c      	movlt	r4, r9
 8015100:	4699      	movlt	r9, r3
 8015102:	6927      	ldr	r7, [r4, #16]
 8015104:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015108:	68a3      	ldr	r3, [r4, #8]
 801510a:	6861      	ldr	r1, [r4, #4]
 801510c:	eb07 060a 	add.w	r6, r7, sl
 8015110:	42b3      	cmp	r3, r6
 8015112:	b085      	sub	sp, #20
 8015114:	bfb8      	it	lt
 8015116:	3101      	addlt	r1, #1
 8015118:	f7ff fe8e 	bl	8014e38 <_Balloc>
 801511c:	b930      	cbnz	r0, 801512c <__multiply+0x44>
 801511e:	4602      	mov	r2, r0
 8015120:	4b44      	ldr	r3, [pc, #272]	; (8015234 <__multiply+0x14c>)
 8015122:	4845      	ldr	r0, [pc, #276]	; (8015238 <__multiply+0x150>)
 8015124:	f240 115d 	movw	r1, #349	; 0x15d
 8015128:	f000 fe14 	bl	8015d54 <__assert_func>
 801512c:	f100 0514 	add.w	r5, r0, #20
 8015130:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015134:	462b      	mov	r3, r5
 8015136:	2200      	movs	r2, #0
 8015138:	4543      	cmp	r3, r8
 801513a:	d321      	bcc.n	8015180 <__multiply+0x98>
 801513c:	f104 0314 	add.w	r3, r4, #20
 8015140:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8015144:	f109 0314 	add.w	r3, r9, #20
 8015148:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801514c:	9202      	str	r2, [sp, #8]
 801514e:	1b3a      	subs	r2, r7, r4
 8015150:	3a15      	subs	r2, #21
 8015152:	f022 0203 	bic.w	r2, r2, #3
 8015156:	3204      	adds	r2, #4
 8015158:	f104 0115 	add.w	r1, r4, #21
 801515c:	428f      	cmp	r7, r1
 801515e:	bf38      	it	cc
 8015160:	2204      	movcc	r2, #4
 8015162:	9201      	str	r2, [sp, #4]
 8015164:	9a02      	ldr	r2, [sp, #8]
 8015166:	9303      	str	r3, [sp, #12]
 8015168:	429a      	cmp	r2, r3
 801516a:	d80c      	bhi.n	8015186 <__multiply+0x9e>
 801516c:	2e00      	cmp	r6, #0
 801516e:	dd03      	ble.n	8015178 <__multiply+0x90>
 8015170:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015174:	2b00      	cmp	r3, #0
 8015176:	d05a      	beq.n	801522e <__multiply+0x146>
 8015178:	6106      	str	r6, [r0, #16]
 801517a:	b005      	add	sp, #20
 801517c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015180:	f843 2b04 	str.w	r2, [r3], #4
 8015184:	e7d8      	b.n	8015138 <__multiply+0x50>
 8015186:	f8b3 a000 	ldrh.w	sl, [r3]
 801518a:	f1ba 0f00 	cmp.w	sl, #0
 801518e:	d024      	beq.n	80151da <__multiply+0xf2>
 8015190:	f104 0e14 	add.w	lr, r4, #20
 8015194:	46a9      	mov	r9, r5
 8015196:	f04f 0c00 	mov.w	ip, #0
 801519a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801519e:	f8d9 1000 	ldr.w	r1, [r9]
 80151a2:	fa1f fb82 	uxth.w	fp, r2
 80151a6:	b289      	uxth	r1, r1
 80151a8:	fb0a 110b 	mla	r1, sl, fp, r1
 80151ac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80151b0:	f8d9 2000 	ldr.w	r2, [r9]
 80151b4:	4461      	add	r1, ip
 80151b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80151ba:	fb0a c20b 	mla	r2, sl, fp, ip
 80151be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80151c2:	b289      	uxth	r1, r1
 80151c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80151c8:	4577      	cmp	r7, lr
 80151ca:	f849 1b04 	str.w	r1, [r9], #4
 80151ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80151d2:	d8e2      	bhi.n	801519a <__multiply+0xb2>
 80151d4:	9a01      	ldr	r2, [sp, #4]
 80151d6:	f845 c002 	str.w	ip, [r5, r2]
 80151da:	9a03      	ldr	r2, [sp, #12]
 80151dc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80151e0:	3304      	adds	r3, #4
 80151e2:	f1b9 0f00 	cmp.w	r9, #0
 80151e6:	d020      	beq.n	801522a <__multiply+0x142>
 80151e8:	6829      	ldr	r1, [r5, #0]
 80151ea:	f104 0c14 	add.w	ip, r4, #20
 80151ee:	46ae      	mov	lr, r5
 80151f0:	f04f 0a00 	mov.w	sl, #0
 80151f4:	f8bc b000 	ldrh.w	fp, [ip]
 80151f8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80151fc:	fb09 220b 	mla	r2, r9, fp, r2
 8015200:	4492      	add	sl, r2
 8015202:	b289      	uxth	r1, r1
 8015204:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8015208:	f84e 1b04 	str.w	r1, [lr], #4
 801520c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015210:	f8be 1000 	ldrh.w	r1, [lr]
 8015214:	0c12      	lsrs	r2, r2, #16
 8015216:	fb09 1102 	mla	r1, r9, r2, r1
 801521a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801521e:	4567      	cmp	r7, ip
 8015220:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015224:	d8e6      	bhi.n	80151f4 <__multiply+0x10c>
 8015226:	9a01      	ldr	r2, [sp, #4]
 8015228:	50a9      	str	r1, [r5, r2]
 801522a:	3504      	adds	r5, #4
 801522c:	e79a      	b.n	8015164 <__multiply+0x7c>
 801522e:	3e01      	subs	r6, #1
 8015230:	e79c      	b.n	801516c <__multiply+0x84>
 8015232:	bf00      	nop
 8015234:	080184af 	.word	0x080184af
 8015238:	0801853c 	.word	0x0801853c

0801523c <__pow5mult>:
 801523c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015240:	4615      	mov	r5, r2
 8015242:	f012 0203 	ands.w	r2, r2, #3
 8015246:	4606      	mov	r6, r0
 8015248:	460f      	mov	r7, r1
 801524a:	d007      	beq.n	801525c <__pow5mult+0x20>
 801524c:	4c25      	ldr	r4, [pc, #148]	; (80152e4 <__pow5mult+0xa8>)
 801524e:	3a01      	subs	r2, #1
 8015250:	2300      	movs	r3, #0
 8015252:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015256:	f7ff fe51 	bl	8014efc <__multadd>
 801525a:	4607      	mov	r7, r0
 801525c:	10ad      	asrs	r5, r5, #2
 801525e:	d03d      	beq.n	80152dc <__pow5mult+0xa0>
 8015260:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015262:	b97c      	cbnz	r4, 8015284 <__pow5mult+0x48>
 8015264:	2010      	movs	r0, #16
 8015266:	f7ff fdcd 	bl	8014e04 <malloc>
 801526a:	4602      	mov	r2, r0
 801526c:	6270      	str	r0, [r6, #36]	; 0x24
 801526e:	b928      	cbnz	r0, 801527c <__pow5mult+0x40>
 8015270:	4b1d      	ldr	r3, [pc, #116]	; (80152e8 <__pow5mult+0xac>)
 8015272:	481e      	ldr	r0, [pc, #120]	; (80152ec <__pow5mult+0xb0>)
 8015274:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8015278:	f000 fd6c 	bl	8015d54 <__assert_func>
 801527c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015280:	6004      	str	r4, [r0, #0]
 8015282:	60c4      	str	r4, [r0, #12]
 8015284:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015288:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801528c:	b94c      	cbnz	r4, 80152a2 <__pow5mult+0x66>
 801528e:	f240 2171 	movw	r1, #625	; 0x271
 8015292:	4630      	mov	r0, r6
 8015294:	f7ff ff12 	bl	80150bc <__i2b>
 8015298:	2300      	movs	r3, #0
 801529a:	f8c8 0008 	str.w	r0, [r8, #8]
 801529e:	4604      	mov	r4, r0
 80152a0:	6003      	str	r3, [r0, #0]
 80152a2:	f04f 0900 	mov.w	r9, #0
 80152a6:	07eb      	lsls	r3, r5, #31
 80152a8:	d50a      	bpl.n	80152c0 <__pow5mult+0x84>
 80152aa:	4639      	mov	r1, r7
 80152ac:	4622      	mov	r2, r4
 80152ae:	4630      	mov	r0, r6
 80152b0:	f7ff ff1a 	bl	80150e8 <__multiply>
 80152b4:	4639      	mov	r1, r7
 80152b6:	4680      	mov	r8, r0
 80152b8:	4630      	mov	r0, r6
 80152ba:	f7ff fdfd 	bl	8014eb8 <_Bfree>
 80152be:	4647      	mov	r7, r8
 80152c0:	106d      	asrs	r5, r5, #1
 80152c2:	d00b      	beq.n	80152dc <__pow5mult+0xa0>
 80152c4:	6820      	ldr	r0, [r4, #0]
 80152c6:	b938      	cbnz	r0, 80152d8 <__pow5mult+0x9c>
 80152c8:	4622      	mov	r2, r4
 80152ca:	4621      	mov	r1, r4
 80152cc:	4630      	mov	r0, r6
 80152ce:	f7ff ff0b 	bl	80150e8 <__multiply>
 80152d2:	6020      	str	r0, [r4, #0]
 80152d4:	f8c0 9000 	str.w	r9, [r0]
 80152d8:	4604      	mov	r4, r0
 80152da:	e7e4      	b.n	80152a6 <__pow5mult+0x6a>
 80152dc:	4638      	mov	r0, r7
 80152de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80152e2:	bf00      	nop
 80152e4:	08018688 	.word	0x08018688
 80152e8:	0801843d 	.word	0x0801843d
 80152ec:	0801853c 	.word	0x0801853c

080152f0 <__lshift>:
 80152f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80152f4:	460c      	mov	r4, r1
 80152f6:	6849      	ldr	r1, [r1, #4]
 80152f8:	6923      	ldr	r3, [r4, #16]
 80152fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80152fe:	68a3      	ldr	r3, [r4, #8]
 8015300:	4607      	mov	r7, r0
 8015302:	4691      	mov	r9, r2
 8015304:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015308:	f108 0601 	add.w	r6, r8, #1
 801530c:	42b3      	cmp	r3, r6
 801530e:	db0b      	blt.n	8015328 <__lshift+0x38>
 8015310:	4638      	mov	r0, r7
 8015312:	f7ff fd91 	bl	8014e38 <_Balloc>
 8015316:	4605      	mov	r5, r0
 8015318:	b948      	cbnz	r0, 801532e <__lshift+0x3e>
 801531a:	4602      	mov	r2, r0
 801531c:	4b2a      	ldr	r3, [pc, #168]	; (80153c8 <__lshift+0xd8>)
 801531e:	482b      	ldr	r0, [pc, #172]	; (80153cc <__lshift+0xdc>)
 8015320:	f240 11d9 	movw	r1, #473	; 0x1d9
 8015324:	f000 fd16 	bl	8015d54 <__assert_func>
 8015328:	3101      	adds	r1, #1
 801532a:	005b      	lsls	r3, r3, #1
 801532c:	e7ee      	b.n	801530c <__lshift+0x1c>
 801532e:	2300      	movs	r3, #0
 8015330:	f100 0114 	add.w	r1, r0, #20
 8015334:	f100 0210 	add.w	r2, r0, #16
 8015338:	4618      	mov	r0, r3
 801533a:	4553      	cmp	r3, sl
 801533c:	db37      	blt.n	80153ae <__lshift+0xbe>
 801533e:	6920      	ldr	r0, [r4, #16]
 8015340:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015344:	f104 0314 	add.w	r3, r4, #20
 8015348:	f019 091f 	ands.w	r9, r9, #31
 801534c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015350:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8015354:	d02f      	beq.n	80153b6 <__lshift+0xc6>
 8015356:	f1c9 0e20 	rsb	lr, r9, #32
 801535a:	468a      	mov	sl, r1
 801535c:	f04f 0c00 	mov.w	ip, #0
 8015360:	681a      	ldr	r2, [r3, #0]
 8015362:	fa02 f209 	lsl.w	r2, r2, r9
 8015366:	ea42 020c 	orr.w	r2, r2, ip
 801536a:	f84a 2b04 	str.w	r2, [sl], #4
 801536e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015372:	4298      	cmp	r0, r3
 8015374:	fa22 fc0e 	lsr.w	ip, r2, lr
 8015378:	d8f2      	bhi.n	8015360 <__lshift+0x70>
 801537a:	1b03      	subs	r3, r0, r4
 801537c:	3b15      	subs	r3, #21
 801537e:	f023 0303 	bic.w	r3, r3, #3
 8015382:	3304      	adds	r3, #4
 8015384:	f104 0215 	add.w	r2, r4, #21
 8015388:	4290      	cmp	r0, r2
 801538a:	bf38      	it	cc
 801538c:	2304      	movcc	r3, #4
 801538e:	f841 c003 	str.w	ip, [r1, r3]
 8015392:	f1bc 0f00 	cmp.w	ip, #0
 8015396:	d001      	beq.n	801539c <__lshift+0xac>
 8015398:	f108 0602 	add.w	r6, r8, #2
 801539c:	3e01      	subs	r6, #1
 801539e:	4638      	mov	r0, r7
 80153a0:	612e      	str	r6, [r5, #16]
 80153a2:	4621      	mov	r1, r4
 80153a4:	f7ff fd88 	bl	8014eb8 <_Bfree>
 80153a8:	4628      	mov	r0, r5
 80153aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80153b2:	3301      	adds	r3, #1
 80153b4:	e7c1      	b.n	801533a <__lshift+0x4a>
 80153b6:	3904      	subs	r1, #4
 80153b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80153bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80153c0:	4298      	cmp	r0, r3
 80153c2:	d8f9      	bhi.n	80153b8 <__lshift+0xc8>
 80153c4:	e7ea      	b.n	801539c <__lshift+0xac>
 80153c6:	bf00      	nop
 80153c8:	080184af 	.word	0x080184af
 80153cc:	0801853c 	.word	0x0801853c

080153d0 <__mcmp>:
 80153d0:	b530      	push	{r4, r5, lr}
 80153d2:	6902      	ldr	r2, [r0, #16]
 80153d4:	690c      	ldr	r4, [r1, #16]
 80153d6:	1b12      	subs	r2, r2, r4
 80153d8:	d10e      	bne.n	80153f8 <__mcmp+0x28>
 80153da:	f100 0314 	add.w	r3, r0, #20
 80153de:	3114      	adds	r1, #20
 80153e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80153e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80153e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80153ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80153f0:	42a5      	cmp	r5, r4
 80153f2:	d003      	beq.n	80153fc <__mcmp+0x2c>
 80153f4:	d305      	bcc.n	8015402 <__mcmp+0x32>
 80153f6:	2201      	movs	r2, #1
 80153f8:	4610      	mov	r0, r2
 80153fa:	bd30      	pop	{r4, r5, pc}
 80153fc:	4283      	cmp	r3, r0
 80153fe:	d3f3      	bcc.n	80153e8 <__mcmp+0x18>
 8015400:	e7fa      	b.n	80153f8 <__mcmp+0x28>
 8015402:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015406:	e7f7      	b.n	80153f8 <__mcmp+0x28>

08015408 <__mdiff>:
 8015408:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801540c:	460c      	mov	r4, r1
 801540e:	4606      	mov	r6, r0
 8015410:	4611      	mov	r1, r2
 8015412:	4620      	mov	r0, r4
 8015414:	4690      	mov	r8, r2
 8015416:	f7ff ffdb 	bl	80153d0 <__mcmp>
 801541a:	1e05      	subs	r5, r0, #0
 801541c:	d110      	bne.n	8015440 <__mdiff+0x38>
 801541e:	4629      	mov	r1, r5
 8015420:	4630      	mov	r0, r6
 8015422:	f7ff fd09 	bl	8014e38 <_Balloc>
 8015426:	b930      	cbnz	r0, 8015436 <__mdiff+0x2e>
 8015428:	4b3a      	ldr	r3, [pc, #232]	; (8015514 <__mdiff+0x10c>)
 801542a:	4602      	mov	r2, r0
 801542c:	f240 2132 	movw	r1, #562	; 0x232
 8015430:	4839      	ldr	r0, [pc, #228]	; (8015518 <__mdiff+0x110>)
 8015432:	f000 fc8f 	bl	8015d54 <__assert_func>
 8015436:	2301      	movs	r3, #1
 8015438:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801543c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015440:	bfa4      	itt	ge
 8015442:	4643      	movge	r3, r8
 8015444:	46a0      	movge	r8, r4
 8015446:	4630      	mov	r0, r6
 8015448:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801544c:	bfa6      	itte	ge
 801544e:	461c      	movge	r4, r3
 8015450:	2500      	movge	r5, #0
 8015452:	2501      	movlt	r5, #1
 8015454:	f7ff fcf0 	bl	8014e38 <_Balloc>
 8015458:	b920      	cbnz	r0, 8015464 <__mdiff+0x5c>
 801545a:	4b2e      	ldr	r3, [pc, #184]	; (8015514 <__mdiff+0x10c>)
 801545c:	4602      	mov	r2, r0
 801545e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8015462:	e7e5      	b.n	8015430 <__mdiff+0x28>
 8015464:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015468:	6926      	ldr	r6, [r4, #16]
 801546a:	60c5      	str	r5, [r0, #12]
 801546c:	f104 0914 	add.w	r9, r4, #20
 8015470:	f108 0514 	add.w	r5, r8, #20
 8015474:	f100 0e14 	add.w	lr, r0, #20
 8015478:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801547c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015480:	f108 0210 	add.w	r2, r8, #16
 8015484:	46f2      	mov	sl, lr
 8015486:	2100      	movs	r1, #0
 8015488:	f859 3b04 	ldr.w	r3, [r9], #4
 801548c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015490:	fa1f f883 	uxth.w	r8, r3
 8015494:	fa11 f18b 	uxtah	r1, r1, fp
 8015498:	0c1b      	lsrs	r3, r3, #16
 801549a:	eba1 0808 	sub.w	r8, r1, r8
 801549e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80154a2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80154a6:	fa1f f888 	uxth.w	r8, r8
 80154aa:	1419      	asrs	r1, r3, #16
 80154ac:	454e      	cmp	r6, r9
 80154ae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80154b2:	f84a 3b04 	str.w	r3, [sl], #4
 80154b6:	d8e7      	bhi.n	8015488 <__mdiff+0x80>
 80154b8:	1b33      	subs	r3, r6, r4
 80154ba:	3b15      	subs	r3, #21
 80154bc:	f023 0303 	bic.w	r3, r3, #3
 80154c0:	3304      	adds	r3, #4
 80154c2:	3415      	adds	r4, #21
 80154c4:	42a6      	cmp	r6, r4
 80154c6:	bf38      	it	cc
 80154c8:	2304      	movcc	r3, #4
 80154ca:	441d      	add	r5, r3
 80154cc:	4473      	add	r3, lr
 80154ce:	469e      	mov	lr, r3
 80154d0:	462e      	mov	r6, r5
 80154d2:	4566      	cmp	r6, ip
 80154d4:	d30e      	bcc.n	80154f4 <__mdiff+0xec>
 80154d6:	f10c 0203 	add.w	r2, ip, #3
 80154da:	1b52      	subs	r2, r2, r5
 80154dc:	f022 0203 	bic.w	r2, r2, #3
 80154e0:	3d03      	subs	r5, #3
 80154e2:	45ac      	cmp	ip, r5
 80154e4:	bf38      	it	cc
 80154e6:	2200      	movcc	r2, #0
 80154e8:	441a      	add	r2, r3
 80154ea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80154ee:	b17b      	cbz	r3, 8015510 <__mdiff+0x108>
 80154f0:	6107      	str	r7, [r0, #16]
 80154f2:	e7a3      	b.n	801543c <__mdiff+0x34>
 80154f4:	f856 8b04 	ldr.w	r8, [r6], #4
 80154f8:	fa11 f288 	uxtah	r2, r1, r8
 80154fc:	1414      	asrs	r4, r2, #16
 80154fe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8015502:	b292      	uxth	r2, r2
 8015504:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8015508:	f84e 2b04 	str.w	r2, [lr], #4
 801550c:	1421      	asrs	r1, r4, #16
 801550e:	e7e0      	b.n	80154d2 <__mdiff+0xca>
 8015510:	3f01      	subs	r7, #1
 8015512:	e7ea      	b.n	80154ea <__mdiff+0xe2>
 8015514:	080184af 	.word	0x080184af
 8015518:	0801853c 	.word	0x0801853c

0801551c <__ulp>:
 801551c:	b082      	sub	sp, #8
 801551e:	ed8d 0b00 	vstr	d0, [sp]
 8015522:	9b01      	ldr	r3, [sp, #4]
 8015524:	4912      	ldr	r1, [pc, #72]	; (8015570 <__ulp+0x54>)
 8015526:	4019      	ands	r1, r3
 8015528:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801552c:	2900      	cmp	r1, #0
 801552e:	dd05      	ble.n	801553c <__ulp+0x20>
 8015530:	2200      	movs	r2, #0
 8015532:	460b      	mov	r3, r1
 8015534:	ec43 2b10 	vmov	d0, r2, r3
 8015538:	b002      	add	sp, #8
 801553a:	4770      	bx	lr
 801553c:	4249      	negs	r1, r1
 801553e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8015542:	ea4f 5021 	mov.w	r0, r1, asr #20
 8015546:	f04f 0200 	mov.w	r2, #0
 801554a:	f04f 0300 	mov.w	r3, #0
 801554e:	da04      	bge.n	801555a <__ulp+0x3e>
 8015550:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8015554:	fa41 f300 	asr.w	r3, r1, r0
 8015558:	e7ec      	b.n	8015534 <__ulp+0x18>
 801555a:	f1a0 0114 	sub.w	r1, r0, #20
 801555e:	291e      	cmp	r1, #30
 8015560:	bfda      	itte	le
 8015562:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8015566:	fa20 f101 	lsrle.w	r1, r0, r1
 801556a:	2101      	movgt	r1, #1
 801556c:	460a      	mov	r2, r1
 801556e:	e7e1      	b.n	8015534 <__ulp+0x18>
 8015570:	7ff00000 	.word	0x7ff00000

08015574 <__b2d>:
 8015574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015576:	6905      	ldr	r5, [r0, #16]
 8015578:	f100 0714 	add.w	r7, r0, #20
 801557c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8015580:	1f2e      	subs	r6, r5, #4
 8015582:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8015586:	4620      	mov	r0, r4
 8015588:	f7ff fd48 	bl	801501c <__hi0bits>
 801558c:	f1c0 0320 	rsb	r3, r0, #32
 8015590:	280a      	cmp	r0, #10
 8015592:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8015610 <__b2d+0x9c>
 8015596:	600b      	str	r3, [r1, #0]
 8015598:	dc14      	bgt.n	80155c4 <__b2d+0x50>
 801559a:	f1c0 0e0b 	rsb	lr, r0, #11
 801559e:	fa24 f10e 	lsr.w	r1, r4, lr
 80155a2:	42b7      	cmp	r7, r6
 80155a4:	ea41 030c 	orr.w	r3, r1, ip
 80155a8:	bf34      	ite	cc
 80155aa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80155ae:	2100      	movcs	r1, #0
 80155b0:	3015      	adds	r0, #21
 80155b2:	fa04 f000 	lsl.w	r0, r4, r0
 80155b6:	fa21 f10e 	lsr.w	r1, r1, lr
 80155ba:	ea40 0201 	orr.w	r2, r0, r1
 80155be:	ec43 2b10 	vmov	d0, r2, r3
 80155c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80155c4:	42b7      	cmp	r7, r6
 80155c6:	bf3a      	itte	cc
 80155c8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80155cc:	f1a5 0608 	subcc.w	r6, r5, #8
 80155d0:	2100      	movcs	r1, #0
 80155d2:	380b      	subs	r0, #11
 80155d4:	d017      	beq.n	8015606 <__b2d+0x92>
 80155d6:	f1c0 0c20 	rsb	ip, r0, #32
 80155da:	fa04 f500 	lsl.w	r5, r4, r0
 80155de:	42be      	cmp	r6, r7
 80155e0:	fa21 f40c 	lsr.w	r4, r1, ip
 80155e4:	ea45 0504 	orr.w	r5, r5, r4
 80155e8:	bf8c      	ite	hi
 80155ea:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80155ee:	2400      	movls	r4, #0
 80155f0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80155f4:	fa01 f000 	lsl.w	r0, r1, r0
 80155f8:	fa24 f40c 	lsr.w	r4, r4, ip
 80155fc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8015600:	ea40 0204 	orr.w	r2, r0, r4
 8015604:	e7db      	b.n	80155be <__b2d+0x4a>
 8015606:	ea44 030c 	orr.w	r3, r4, ip
 801560a:	460a      	mov	r2, r1
 801560c:	e7d7      	b.n	80155be <__b2d+0x4a>
 801560e:	bf00      	nop
 8015610:	3ff00000 	.word	0x3ff00000

08015614 <__d2b>:
 8015614:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015618:	4689      	mov	r9, r1
 801561a:	2101      	movs	r1, #1
 801561c:	ec57 6b10 	vmov	r6, r7, d0
 8015620:	4690      	mov	r8, r2
 8015622:	f7ff fc09 	bl	8014e38 <_Balloc>
 8015626:	4604      	mov	r4, r0
 8015628:	b930      	cbnz	r0, 8015638 <__d2b+0x24>
 801562a:	4602      	mov	r2, r0
 801562c:	4b25      	ldr	r3, [pc, #148]	; (80156c4 <__d2b+0xb0>)
 801562e:	4826      	ldr	r0, [pc, #152]	; (80156c8 <__d2b+0xb4>)
 8015630:	f240 310a 	movw	r1, #778	; 0x30a
 8015634:	f000 fb8e 	bl	8015d54 <__assert_func>
 8015638:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801563c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015640:	bb35      	cbnz	r5, 8015690 <__d2b+0x7c>
 8015642:	2e00      	cmp	r6, #0
 8015644:	9301      	str	r3, [sp, #4]
 8015646:	d028      	beq.n	801569a <__d2b+0x86>
 8015648:	4668      	mov	r0, sp
 801564a:	9600      	str	r6, [sp, #0]
 801564c:	f7ff fd06 	bl	801505c <__lo0bits>
 8015650:	9900      	ldr	r1, [sp, #0]
 8015652:	b300      	cbz	r0, 8015696 <__d2b+0x82>
 8015654:	9a01      	ldr	r2, [sp, #4]
 8015656:	f1c0 0320 	rsb	r3, r0, #32
 801565a:	fa02 f303 	lsl.w	r3, r2, r3
 801565e:	430b      	orrs	r3, r1
 8015660:	40c2      	lsrs	r2, r0
 8015662:	6163      	str	r3, [r4, #20]
 8015664:	9201      	str	r2, [sp, #4]
 8015666:	9b01      	ldr	r3, [sp, #4]
 8015668:	61a3      	str	r3, [r4, #24]
 801566a:	2b00      	cmp	r3, #0
 801566c:	bf14      	ite	ne
 801566e:	2202      	movne	r2, #2
 8015670:	2201      	moveq	r2, #1
 8015672:	6122      	str	r2, [r4, #16]
 8015674:	b1d5      	cbz	r5, 80156ac <__d2b+0x98>
 8015676:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801567a:	4405      	add	r5, r0
 801567c:	f8c9 5000 	str.w	r5, [r9]
 8015680:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015684:	f8c8 0000 	str.w	r0, [r8]
 8015688:	4620      	mov	r0, r4
 801568a:	b003      	add	sp, #12
 801568c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015690:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015694:	e7d5      	b.n	8015642 <__d2b+0x2e>
 8015696:	6161      	str	r1, [r4, #20]
 8015698:	e7e5      	b.n	8015666 <__d2b+0x52>
 801569a:	a801      	add	r0, sp, #4
 801569c:	f7ff fcde 	bl	801505c <__lo0bits>
 80156a0:	9b01      	ldr	r3, [sp, #4]
 80156a2:	6163      	str	r3, [r4, #20]
 80156a4:	2201      	movs	r2, #1
 80156a6:	6122      	str	r2, [r4, #16]
 80156a8:	3020      	adds	r0, #32
 80156aa:	e7e3      	b.n	8015674 <__d2b+0x60>
 80156ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80156b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80156b4:	f8c9 0000 	str.w	r0, [r9]
 80156b8:	6918      	ldr	r0, [r3, #16]
 80156ba:	f7ff fcaf 	bl	801501c <__hi0bits>
 80156be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80156c2:	e7df      	b.n	8015684 <__d2b+0x70>
 80156c4:	080184af 	.word	0x080184af
 80156c8:	0801853c 	.word	0x0801853c

080156cc <__ratio>:
 80156cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156d0:	4688      	mov	r8, r1
 80156d2:	4669      	mov	r1, sp
 80156d4:	4681      	mov	r9, r0
 80156d6:	f7ff ff4d 	bl	8015574 <__b2d>
 80156da:	a901      	add	r1, sp, #4
 80156dc:	4640      	mov	r0, r8
 80156de:	ec55 4b10 	vmov	r4, r5, d0
 80156e2:	f7ff ff47 	bl	8015574 <__b2d>
 80156e6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80156ea:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80156ee:	eba3 0c02 	sub.w	ip, r3, r2
 80156f2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80156f6:	1a9b      	subs	r3, r3, r2
 80156f8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80156fc:	ec51 0b10 	vmov	r0, r1, d0
 8015700:	2b00      	cmp	r3, #0
 8015702:	bfd6      	itet	le
 8015704:	460a      	movle	r2, r1
 8015706:	462a      	movgt	r2, r5
 8015708:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801570c:	468b      	mov	fp, r1
 801570e:	462f      	mov	r7, r5
 8015710:	bfd4      	ite	le
 8015712:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8015716:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801571a:	4620      	mov	r0, r4
 801571c:	ee10 2a10 	vmov	r2, s0
 8015720:	465b      	mov	r3, fp
 8015722:	4639      	mov	r1, r7
 8015724:	f7eb f892 	bl	800084c <__aeabi_ddiv>
 8015728:	ec41 0b10 	vmov	d0, r0, r1
 801572c:	b003      	add	sp, #12
 801572e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015732 <__copybits>:
 8015732:	3901      	subs	r1, #1
 8015734:	b570      	push	{r4, r5, r6, lr}
 8015736:	1149      	asrs	r1, r1, #5
 8015738:	6914      	ldr	r4, [r2, #16]
 801573a:	3101      	adds	r1, #1
 801573c:	f102 0314 	add.w	r3, r2, #20
 8015740:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015744:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015748:	1f05      	subs	r5, r0, #4
 801574a:	42a3      	cmp	r3, r4
 801574c:	d30c      	bcc.n	8015768 <__copybits+0x36>
 801574e:	1aa3      	subs	r3, r4, r2
 8015750:	3b11      	subs	r3, #17
 8015752:	f023 0303 	bic.w	r3, r3, #3
 8015756:	3211      	adds	r2, #17
 8015758:	42a2      	cmp	r2, r4
 801575a:	bf88      	it	hi
 801575c:	2300      	movhi	r3, #0
 801575e:	4418      	add	r0, r3
 8015760:	2300      	movs	r3, #0
 8015762:	4288      	cmp	r0, r1
 8015764:	d305      	bcc.n	8015772 <__copybits+0x40>
 8015766:	bd70      	pop	{r4, r5, r6, pc}
 8015768:	f853 6b04 	ldr.w	r6, [r3], #4
 801576c:	f845 6f04 	str.w	r6, [r5, #4]!
 8015770:	e7eb      	b.n	801574a <__copybits+0x18>
 8015772:	f840 3b04 	str.w	r3, [r0], #4
 8015776:	e7f4      	b.n	8015762 <__copybits+0x30>

08015778 <__any_on>:
 8015778:	f100 0214 	add.w	r2, r0, #20
 801577c:	6900      	ldr	r0, [r0, #16]
 801577e:	114b      	asrs	r3, r1, #5
 8015780:	4298      	cmp	r0, r3
 8015782:	b510      	push	{r4, lr}
 8015784:	db11      	blt.n	80157aa <__any_on+0x32>
 8015786:	dd0a      	ble.n	801579e <__any_on+0x26>
 8015788:	f011 011f 	ands.w	r1, r1, #31
 801578c:	d007      	beq.n	801579e <__any_on+0x26>
 801578e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015792:	fa24 f001 	lsr.w	r0, r4, r1
 8015796:	fa00 f101 	lsl.w	r1, r0, r1
 801579a:	428c      	cmp	r4, r1
 801579c:	d10b      	bne.n	80157b6 <__any_on+0x3e>
 801579e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80157a2:	4293      	cmp	r3, r2
 80157a4:	d803      	bhi.n	80157ae <__any_on+0x36>
 80157a6:	2000      	movs	r0, #0
 80157a8:	bd10      	pop	{r4, pc}
 80157aa:	4603      	mov	r3, r0
 80157ac:	e7f7      	b.n	801579e <__any_on+0x26>
 80157ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80157b2:	2900      	cmp	r1, #0
 80157b4:	d0f5      	beq.n	80157a2 <__any_on+0x2a>
 80157b6:	2001      	movs	r0, #1
 80157b8:	e7f6      	b.n	80157a8 <__any_on+0x30>

080157ba <_calloc_r>:
 80157ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80157bc:	fba1 2402 	umull	r2, r4, r1, r2
 80157c0:	b94c      	cbnz	r4, 80157d6 <_calloc_r+0x1c>
 80157c2:	4611      	mov	r1, r2
 80157c4:	9201      	str	r2, [sp, #4]
 80157c6:	f000 f87b 	bl	80158c0 <_malloc_r>
 80157ca:	9a01      	ldr	r2, [sp, #4]
 80157cc:	4605      	mov	r5, r0
 80157ce:	b930      	cbnz	r0, 80157de <_calloc_r+0x24>
 80157d0:	4628      	mov	r0, r5
 80157d2:	b003      	add	sp, #12
 80157d4:	bd30      	pop	{r4, r5, pc}
 80157d6:	220c      	movs	r2, #12
 80157d8:	6002      	str	r2, [r0, #0]
 80157da:	2500      	movs	r5, #0
 80157dc:	e7f8      	b.n	80157d0 <_calloc_r+0x16>
 80157de:	4621      	mov	r1, r4
 80157e0:	f7fc fd3e 	bl	8012260 <memset>
 80157e4:	e7f4      	b.n	80157d0 <_calloc_r+0x16>
	...

080157e8 <_free_r>:
 80157e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80157ea:	2900      	cmp	r1, #0
 80157ec:	d044      	beq.n	8015878 <_free_r+0x90>
 80157ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80157f2:	9001      	str	r0, [sp, #4]
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	f1a1 0404 	sub.w	r4, r1, #4
 80157fa:	bfb8      	it	lt
 80157fc:	18e4      	addlt	r4, r4, r3
 80157fe:	f000 fb15 	bl	8015e2c <__malloc_lock>
 8015802:	4a1e      	ldr	r2, [pc, #120]	; (801587c <_free_r+0x94>)
 8015804:	9801      	ldr	r0, [sp, #4]
 8015806:	6813      	ldr	r3, [r2, #0]
 8015808:	b933      	cbnz	r3, 8015818 <_free_r+0x30>
 801580a:	6063      	str	r3, [r4, #4]
 801580c:	6014      	str	r4, [r2, #0]
 801580e:	b003      	add	sp, #12
 8015810:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015814:	f000 bb10 	b.w	8015e38 <__malloc_unlock>
 8015818:	42a3      	cmp	r3, r4
 801581a:	d908      	bls.n	801582e <_free_r+0x46>
 801581c:	6825      	ldr	r5, [r4, #0]
 801581e:	1961      	adds	r1, r4, r5
 8015820:	428b      	cmp	r3, r1
 8015822:	bf01      	itttt	eq
 8015824:	6819      	ldreq	r1, [r3, #0]
 8015826:	685b      	ldreq	r3, [r3, #4]
 8015828:	1949      	addeq	r1, r1, r5
 801582a:	6021      	streq	r1, [r4, #0]
 801582c:	e7ed      	b.n	801580a <_free_r+0x22>
 801582e:	461a      	mov	r2, r3
 8015830:	685b      	ldr	r3, [r3, #4]
 8015832:	b10b      	cbz	r3, 8015838 <_free_r+0x50>
 8015834:	42a3      	cmp	r3, r4
 8015836:	d9fa      	bls.n	801582e <_free_r+0x46>
 8015838:	6811      	ldr	r1, [r2, #0]
 801583a:	1855      	adds	r5, r2, r1
 801583c:	42a5      	cmp	r5, r4
 801583e:	d10b      	bne.n	8015858 <_free_r+0x70>
 8015840:	6824      	ldr	r4, [r4, #0]
 8015842:	4421      	add	r1, r4
 8015844:	1854      	adds	r4, r2, r1
 8015846:	42a3      	cmp	r3, r4
 8015848:	6011      	str	r1, [r2, #0]
 801584a:	d1e0      	bne.n	801580e <_free_r+0x26>
 801584c:	681c      	ldr	r4, [r3, #0]
 801584e:	685b      	ldr	r3, [r3, #4]
 8015850:	6053      	str	r3, [r2, #4]
 8015852:	4421      	add	r1, r4
 8015854:	6011      	str	r1, [r2, #0]
 8015856:	e7da      	b.n	801580e <_free_r+0x26>
 8015858:	d902      	bls.n	8015860 <_free_r+0x78>
 801585a:	230c      	movs	r3, #12
 801585c:	6003      	str	r3, [r0, #0]
 801585e:	e7d6      	b.n	801580e <_free_r+0x26>
 8015860:	6825      	ldr	r5, [r4, #0]
 8015862:	1961      	adds	r1, r4, r5
 8015864:	428b      	cmp	r3, r1
 8015866:	bf04      	itt	eq
 8015868:	6819      	ldreq	r1, [r3, #0]
 801586a:	685b      	ldreq	r3, [r3, #4]
 801586c:	6063      	str	r3, [r4, #4]
 801586e:	bf04      	itt	eq
 8015870:	1949      	addeq	r1, r1, r5
 8015872:	6021      	streq	r1, [r4, #0]
 8015874:	6054      	str	r4, [r2, #4]
 8015876:	e7ca      	b.n	801580e <_free_r+0x26>
 8015878:	b003      	add	sp, #12
 801587a:	bd30      	pop	{r4, r5, pc}
 801587c:	20004230 	.word	0x20004230

08015880 <sbrk_aligned>:
 8015880:	b570      	push	{r4, r5, r6, lr}
 8015882:	4e0e      	ldr	r6, [pc, #56]	; (80158bc <sbrk_aligned+0x3c>)
 8015884:	460c      	mov	r4, r1
 8015886:	6831      	ldr	r1, [r6, #0]
 8015888:	4605      	mov	r5, r0
 801588a:	b911      	cbnz	r1, 8015892 <sbrk_aligned+0x12>
 801588c:	f000 f9f0 	bl	8015c70 <_sbrk_r>
 8015890:	6030      	str	r0, [r6, #0]
 8015892:	4621      	mov	r1, r4
 8015894:	4628      	mov	r0, r5
 8015896:	f000 f9eb 	bl	8015c70 <_sbrk_r>
 801589a:	1c43      	adds	r3, r0, #1
 801589c:	d00a      	beq.n	80158b4 <sbrk_aligned+0x34>
 801589e:	1cc4      	adds	r4, r0, #3
 80158a0:	f024 0403 	bic.w	r4, r4, #3
 80158a4:	42a0      	cmp	r0, r4
 80158a6:	d007      	beq.n	80158b8 <sbrk_aligned+0x38>
 80158a8:	1a21      	subs	r1, r4, r0
 80158aa:	4628      	mov	r0, r5
 80158ac:	f000 f9e0 	bl	8015c70 <_sbrk_r>
 80158b0:	3001      	adds	r0, #1
 80158b2:	d101      	bne.n	80158b8 <sbrk_aligned+0x38>
 80158b4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80158b8:	4620      	mov	r0, r4
 80158ba:	bd70      	pop	{r4, r5, r6, pc}
 80158bc:	20004234 	.word	0x20004234

080158c0 <_malloc_r>:
 80158c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158c4:	1ccd      	adds	r5, r1, #3
 80158c6:	f025 0503 	bic.w	r5, r5, #3
 80158ca:	3508      	adds	r5, #8
 80158cc:	2d0c      	cmp	r5, #12
 80158ce:	bf38      	it	cc
 80158d0:	250c      	movcc	r5, #12
 80158d2:	2d00      	cmp	r5, #0
 80158d4:	4607      	mov	r7, r0
 80158d6:	db01      	blt.n	80158dc <_malloc_r+0x1c>
 80158d8:	42a9      	cmp	r1, r5
 80158da:	d905      	bls.n	80158e8 <_malloc_r+0x28>
 80158dc:	230c      	movs	r3, #12
 80158de:	603b      	str	r3, [r7, #0]
 80158e0:	2600      	movs	r6, #0
 80158e2:	4630      	mov	r0, r6
 80158e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158e8:	4e2e      	ldr	r6, [pc, #184]	; (80159a4 <_malloc_r+0xe4>)
 80158ea:	f000 fa9f 	bl	8015e2c <__malloc_lock>
 80158ee:	6833      	ldr	r3, [r6, #0]
 80158f0:	461c      	mov	r4, r3
 80158f2:	bb34      	cbnz	r4, 8015942 <_malloc_r+0x82>
 80158f4:	4629      	mov	r1, r5
 80158f6:	4638      	mov	r0, r7
 80158f8:	f7ff ffc2 	bl	8015880 <sbrk_aligned>
 80158fc:	1c43      	adds	r3, r0, #1
 80158fe:	4604      	mov	r4, r0
 8015900:	d14d      	bne.n	801599e <_malloc_r+0xde>
 8015902:	6834      	ldr	r4, [r6, #0]
 8015904:	4626      	mov	r6, r4
 8015906:	2e00      	cmp	r6, #0
 8015908:	d140      	bne.n	801598c <_malloc_r+0xcc>
 801590a:	6823      	ldr	r3, [r4, #0]
 801590c:	4631      	mov	r1, r6
 801590e:	4638      	mov	r0, r7
 8015910:	eb04 0803 	add.w	r8, r4, r3
 8015914:	f000 f9ac 	bl	8015c70 <_sbrk_r>
 8015918:	4580      	cmp	r8, r0
 801591a:	d13a      	bne.n	8015992 <_malloc_r+0xd2>
 801591c:	6821      	ldr	r1, [r4, #0]
 801591e:	3503      	adds	r5, #3
 8015920:	1a6d      	subs	r5, r5, r1
 8015922:	f025 0503 	bic.w	r5, r5, #3
 8015926:	3508      	adds	r5, #8
 8015928:	2d0c      	cmp	r5, #12
 801592a:	bf38      	it	cc
 801592c:	250c      	movcc	r5, #12
 801592e:	4629      	mov	r1, r5
 8015930:	4638      	mov	r0, r7
 8015932:	f7ff ffa5 	bl	8015880 <sbrk_aligned>
 8015936:	3001      	adds	r0, #1
 8015938:	d02b      	beq.n	8015992 <_malloc_r+0xd2>
 801593a:	6823      	ldr	r3, [r4, #0]
 801593c:	442b      	add	r3, r5
 801593e:	6023      	str	r3, [r4, #0]
 8015940:	e00e      	b.n	8015960 <_malloc_r+0xa0>
 8015942:	6822      	ldr	r2, [r4, #0]
 8015944:	1b52      	subs	r2, r2, r5
 8015946:	d41e      	bmi.n	8015986 <_malloc_r+0xc6>
 8015948:	2a0b      	cmp	r2, #11
 801594a:	d916      	bls.n	801597a <_malloc_r+0xba>
 801594c:	1961      	adds	r1, r4, r5
 801594e:	42a3      	cmp	r3, r4
 8015950:	6025      	str	r5, [r4, #0]
 8015952:	bf18      	it	ne
 8015954:	6059      	strne	r1, [r3, #4]
 8015956:	6863      	ldr	r3, [r4, #4]
 8015958:	bf08      	it	eq
 801595a:	6031      	streq	r1, [r6, #0]
 801595c:	5162      	str	r2, [r4, r5]
 801595e:	604b      	str	r3, [r1, #4]
 8015960:	4638      	mov	r0, r7
 8015962:	f104 060b 	add.w	r6, r4, #11
 8015966:	f000 fa67 	bl	8015e38 <__malloc_unlock>
 801596a:	f026 0607 	bic.w	r6, r6, #7
 801596e:	1d23      	adds	r3, r4, #4
 8015970:	1af2      	subs	r2, r6, r3
 8015972:	d0b6      	beq.n	80158e2 <_malloc_r+0x22>
 8015974:	1b9b      	subs	r3, r3, r6
 8015976:	50a3      	str	r3, [r4, r2]
 8015978:	e7b3      	b.n	80158e2 <_malloc_r+0x22>
 801597a:	6862      	ldr	r2, [r4, #4]
 801597c:	42a3      	cmp	r3, r4
 801597e:	bf0c      	ite	eq
 8015980:	6032      	streq	r2, [r6, #0]
 8015982:	605a      	strne	r2, [r3, #4]
 8015984:	e7ec      	b.n	8015960 <_malloc_r+0xa0>
 8015986:	4623      	mov	r3, r4
 8015988:	6864      	ldr	r4, [r4, #4]
 801598a:	e7b2      	b.n	80158f2 <_malloc_r+0x32>
 801598c:	4634      	mov	r4, r6
 801598e:	6876      	ldr	r6, [r6, #4]
 8015990:	e7b9      	b.n	8015906 <_malloc_r+0x46>
 8015992:	230c      	movs	r3, #12
 8015994:	603b      	str	r3, [r7, #0]
 8015996:	4638      	mov	r0, r7
 8015998:	f000 fa4e 	bl	8015e38 <__malloc_unlock>
 801599c:	e7a1      	b.n	80158e2 <_malloc_r+0x22>
 801599e:	6025      	str	r5, [r4, #0]
 80159a0:	e7de      	b.n	8015960 <_malloc_r+0xa0>
 80159a2:	bf00      	nop
 80159a4:	20004230 	.word	0x20004230

080159a8 <__ssputs_r>:
 80159a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80159ac:	688e      	ldr	r6, [r1, #8]
 80159ae:	429e      	cmp	r6, r3
 80159b0:	4682      	mov	sl, r0
 80159b2:	460c      	mov	r4, r1
 80159b4:	4690      	mov	r8, r2
 80159b6:	461f      	mov	r7, r3
 80159b8:	d838      	bhi.n	8015a2c <__ssputs_r+0x84>
 80159ba:	898a      	ldrh	r2, [r1, #12]
 80159bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80159c0:	d032      	beq.n	8015a28 <__ssputs_r+0x80>
 80159c2:	6825      	ldr	r5, [r4, #0]
 80159c4:	6909      	ldr	r1, [r1, #16]
 80159c6:	eba5 0901 	sub.w	r9, r5, r1
 80159ca:	6965      	ldr	r5, [r4, #20]
 80159cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80159d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80159d4:	3301      	adds	r3, #1
 80159d6:	444b      	add	r3, r9
 80159d8:	106d      	asrs	r5, r5, #1
 80159da:	429d      	cmp	r5, r3
 80159dc:	bf38      	it	cc
 80159de:	461d      	movcc	r5, r3
 80159e0:	0553      	lsls	r3, r2, #21
 80159e2:	d531      	bpl.n	8015a48 <__ssputs_r+0xa0>
 80159e4:	4629      	mov	r1, r5
 80159e6:	f7ff ff6b 	bl	80158c0 <_malloc_r>
 80159ea:	4606      	mov	r6, r0
 80159ec:	b950      	cbnz	r0, 8015a04 <__ssputs_r+0x5c>
 80159ee:	230c      	movs	r3, #12
 80159f0:	f8ca 3000 	str.w	r3, [sl]
 80159f4:	89a3      	ldrh	r3, [r4, #12]
 80159f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80159fa:	81a3      	strh	r3, [r4, #12]
 80159fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a04:	6921      	ldr	r1, [r4, #16]
 8015a06:	464a      	mov	r2, r9
 8015a08:	f7fc fc1c 	bl	8012244 <memcpy>
 8015a0c:	89a3      	ldrh	r3, [r4, #12]
 8015a0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015a16:	81a3      	strh	r3, [r4, #12]
 8015a18:	6126      	str	r6, [r4, #16]
 8015a1a:	6165      	str	r5, [r4, #20]
 8015a1c:	444e      	add	r6, r9
 8015a1e:	eba5 0509 	sub.w	r5, r5, r9
 8015a22:	6026      	str	r6, [r4, #0]
 8015a24:	60a5      	str	r5, [r4, #8]
 8015a26:	463e      	mov	r6, r7
 8015a28:	42be      	cmp	r6, r7
 8015a2a:	d900      	bls.n	8015a2e <__ssputs_r+0x86>
 8015a2c:	463e      	mov	r6, r7
 8015a2e:	6820      	ldr	r0, [r4, #0]
 8015a30:	4632      	mov	r2, r6
 8015a32:	4641      	mov	r1, r8
 8015a34:	f000 f9e0 	bl	8015df8 <memmove>
 8015a38:	68a3      	ldr	r3, [r4, #8]
 8015a3a:	1b9b      	subs	r3, r3, r6
 8015a3c:	60a3      	str	r3, [r4, #8]
 8015a3e:	6823      	ldr	r3, [r4, #0]
 8015a40:	4433      	add	r3, r6
 8015a42:	6023      	str	r3, [r4, #0]
 8015a44:	2000      	movs	r0, #0
 8015a46:	e7db      	b.n	8015a00 <__ssputs_r+0x58>
 8015a48:	462a      	mov	r2, r5
 8015a4a:	f000 f9fb 	bl	8015e44 <_realloc_r>
 8015a4e:	4606      	mov	r6, r0
 8015a50:	2800      	cmp	r0, #0
 8015a52:	d1e1      	bne.n	8015a18 <__ssputs_r+0x70>
 8015a54:	6921      	ldr	r1, [r4, #16]
 8015a56:	4650      	mov	r0, sl
 8015a58:	f7ff fec6 	bl	80157e8 <_free_r>
 8015a5c:	e7c7      	b.n	80159ee <__ssputs_r+0x46>
	...

08015a60 <_svfiprintf_r>:
 8015a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a64:	4698      	mov	r8, r3
 8015a66:	898b      	ldrh	r3, [r1, #12]
 8015a68:	061b      	lsls	r3, r3, #24
 8015a6a:	b09d      	sub	sp, #116	; 0x74
 8015a6c:	4607      	mov	r7, r0
 8015a6e:	460d      	mov	r5, r1
 8015a70:	4614      	mov	r4, r2
 8015a72:	d50e      	bpl.n	8015a92 <_svfiprintf_r+0x32>
 8015a74:	690b      	ldr	r3, [r1, #16]
 8015a76:	b963      	cbnz	r3, 8015a92 <_svfiprintf_r+0x32>
 8015a78:	2140      	movs	r1, #64	; 0x40
 8015a7a:	f7ff ff21 	bl	80158c0 <_malloc_r>
 8015a7e:	6028      	str	r0, [r5, #0]
 8015a80:	6128      	str	r0, [r5, #16]
 8015a82:	b920      	cbnz	r0, 8015a8e <_svfiprintf_r+0x2e>
 8015a84:	230c      	movs	r3, #12
 8015a86:	603b      	str	r3, [r7, #0]
 8015a88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015a8c:	e0d1      	b.n	8015c32 <_svfiprintf_r+0x1d2>
 8015a8e:	2340      	movs	r3, #64	; 0x40
 8015a90:	616b      	str	r3, [r5, #20]
 8015a92:	2300      	movs	r3, #0
 8015a94:	9309      	str	r3, [sp, #36]	; 0x24
 8015a96:	2320      	movs	r3, #32
 8015a98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015a9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8015aa0:	2330      	movs	r3, #48	; 0x30
 8015aa2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8015c4c <_svfiprintf_r+0x1ec>
 8015aa6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015aaa:	f04f 0901 	mov.w	r9, #1
 8015aae:	4623      	mov	r3, r4
 8015ab0:	469a      	mov	sl, r3
 8015ab2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015ab6:	b10a      	cbz	r2, 8015abc <_svfiprintf_r+0x5c>
 8015ab8:	2a25      	cmp	r2, #37	; 0x25
 8015aba:	d1f9      	bne.n	8015ab0 <_svfiprintf_r+0x50>
 8015abc:	ebba 0b04 	subs.w	fp, sl, r4
 8015ac0:	d00b      	beq.n	8015ada <_svfiprintf_r+0x7a>
 8015ac2:	465b      	mov	r3, fp
 8015ac4:	4622      	mov	r2, r4
 8015ac6:	4629      	mov	r1, r5
 8015ac8:	4638      	mov	r0, r7
 8015aca:	f7ff ff6d 	bl	80159a8 <__ssputs_r>
 8015ace:	3001      	adds	r0, #1
 8015ad0:	f000 80aa 	beq.w	8015c28 <_svfiprintf_r+0x1c8>
 8015ad4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015ad6:	445a      	add	r2, fp
 8015ad8:	9209      	str	r2, [sp, #36]	; 0x24
 8015ada:	f89a 3000 	ldrb.w	r3, [sl]
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	f000 80a2 	beq.w	8015c28 <_svfiprintf_r+0x1c8>
 8015ae4:	2300      	movs	r3, #0
 8015ae6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015aea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015aee:	f10a 0a01 	add.w	sl, sl, #1
 8015af2:	9304      	str	r3, [sp, #16]
 8015af4:	9307      	str	r3, [sp, #28]
 8015af6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015afa:	931a      	str	r3, [sp, #104]	; 0x68
 8015afc:	4654      	mov	r4, sl
 8015afe:	2205      	movs	r2, #5
 8015b00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015b04:	4851      	ldr	r0, [pc, #324]	; (8015c4c <_svfiprintf_r+0x1ec>)
 8015b06:	f7ea fb6b 	bl	80001e0 <memchr>
 8015b0a:	9a04      	ldr	r2, [sp, #16]
 8015b0c:	b9d8      	cbnz	r0, 8015b46 <_svfiprintf_r+0xe6>
 8015b0e:	06d0      	lsls	r0, r2, #27
 8015b10:	bf44      	itt	mi
 8015b12:	2320      	movmi	r3, #32
 8015b14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015b18:	0711      	lsls	r1, r2, #28
 8015b1a:	bf44      	itt	mi
 8015b1c:	232b      	movmi	r3, #43	; 0x2b
 8015b1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015b22:	f89a 3000 	ldrb.w	r3, [sl]
 8015b26:	2b2a      	cmp	r3, #42	; 0x2a
 8015b28:	d015      	beq.n	8015b56 <_svfiprintf_r+0xf6>
 8015b2a:	9a07      	ldr	r2, [sp, #28]
 8015b2c:	4654      	mov	r4, sl
 8015b2e:	2000      	movs	r0, #0
 8015b30:	f04f 0c0a 	mov.w	ip, #10
 8015b34:	4621      	mov	r1, r4
 8015b36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015b3a:	3b30      	subs	r3, #48	; 0x30
 8015b3c:	2b09      	cmp	r3, #9
 8015b3e:	d94e      	bls.n	8015bde <_svfiprintf_r+0x17e>
 8015b40:	b1b0      	cbz	r0, 8015b70 <_svfiprintf_r+0x110>
 8015b42:	9207      	str	r2, [sp, #28]
 8015b44:	e014      	b.n	8015b70 <_svfiprintf_r+0x110>
 8015b46:	eba0 0308 	sub.w	r3, r0, r8
 8015b4a:	fa09 f303 	lsl.w	r3, r9, r3
 8015b4e:	4313      	orrs	r3, r2
 8015b50:	9304      	str	r3, [sp, #16]
 8015b52:	46a2      	mov	sl, r4
 8015b54:	e7d2      	b.n	8015afc <_svfiprintf_r+0x9c>
 8015b56:	9b03      	ldr	r3, [sp, #12]
 8015b58:	1d19      	adds	r1, r3, #4
 8015b5a:	681b      	ldr	r3, [r3, #0]
 8015b5c:	9103      	str	r1, [sp, #12]
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	bfbb      	ittet	lt
 8015b62:	425b      	neglt	r3, r3
 8015b64:	f042 0202 	orrlt.w	r2, r2, #2
 8015b68:	9307      	strge	r3, [sp, #28]
 8015b6a:	9307      	strlt	r3, [sp, #28]
 8015b6c:	bfb8      	it	lt
 8015b6e:	9204      	strlt	r2, [sp, #16]
 8015b70:	7823      	ldrb	r3, [r4, #0]
 8015b72:	2b2e      	cmp	r3, #46	; 0x2e
 8015b74:	d10c      	bne.n	8015b90 <_svfiprintf_r+0x130>
 8015b76:	7863      	ldrb	r3, [r4, #1]
 8015b78:	2b2a      	cmp	r3, #42	; 0x2a
 8015b7a:	d135      	bne.n	8015be8 <_svfiprintf_r+0x188>
 8015b7c:	9b03      	ldr	r3, [sp, #12]
 8015b7e:	1d1a      	adds	r2, r3, #4
 8015b80:	681b      	ldr	r3, [r3, #0]
 8015b82:	9203      	str	r2, [sp, #12]
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	bfb8      	it	lt
 8015b88:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015b8c:	3402      	adds	r4, #2
 8015b8e:	9305      	str	r3, [sp, #20]
 8015b90:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015c5c <_svfiprintf_r+0x1fc>
 8015b94:	7821      	ldrb	r1, [r4, #0]
 8015b96:	2203      	movs	r2, #3
 8015b98:	4650      	mov	r0, sl
 8015b9a:	f7ea fb21 	bl	80001e0 <memchr>
 8015b9e:	b140      	cbz	r0, 8015bb2 <_svfiprintf_r+0x152>
 8015ba0:	2340      	movs	r3, #64	; 0x40
 8015ba2:	eba0 000a 	sub.w	r0, r0, sl
 8015ba6:	fa03 f000 	lsl.w	r0, r3, r0
 8015baa:	9b04      	ldr	r3, [sp, #16]
 8015bac:	4303      	orrs	r3, r0
 8015bae:	3401      	adds	r4, #1
 8015bb0:	9304      	str	r3, [sp, #16]
 8015bb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015bb6:	4826      	ldr	r0, [pc, #152]	; (8015c50 <_svfiprintf_r+0x1f0>)
 8015bb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015bbc:	2206      	movs	r2, #6
 8015bbe:	f7ea fb0f 	bl	80001e0 <memchr>
 8015bc2:	2800      	cmp	r0, #0
 8015bc4:	d038      	beq.n	8015c38 <_svfiprintf_r+0x1d8>
 8015bc6:	4b23      	ldr	r3, [pc, #140]	; (8015c54 <_svfiprintf_r+0x1f4>)
 8015bc8:	bb1b      	cbnz	r3, 8015c12 <_svfiprintf_r+0x1b2>
 8015bca:	9b03      	ldr	r3, [sp, #12]
 8015bcc:	3307      	adds	r3, #7
 8015bce:	f023 0307 	bic.w	r3, r3, #7
 8015bd2:	3308      	adds	r3, #8
 8015bd4:	9303      	str	r3, [sp, #12]
 8015bd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bd8:	4433      	add	r3, r6
 8015bda:	9309      	str	r3, [sp, #36]	; 0x24
 8015bdc:	e767      	b.n	8015aae <_svfiprintf_r+0x4e>
 8015bde:	fb0c 3202 	mla	r2, ip, r2, r3
 8015be2:	460c      	mov	r4, r1
 8015be4:	2001      	movs	r0, #1
 8015be6:	e7a5      	b.n	8015b34 <_svfiprintf_r+0xd4>
 8015be8:	2300      	movs	r3, #0
 8015bea:	3401      	adds	r4, #1
 8015bec:	9305      	str	r3, [sp, #20]
 8015bee:	4619      	mov	r1, r3
 8015bf0:	f04f 0c0a 	mov.w	ip, #10
 8015bf4:	4620      	mov	r0, r4
 8015bf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015bfa:	3a30      	subs	r2, #48	; 0x30
 8015bfc:	2a09      	cmp	r2, #9
 8015bfe:	d903      	bls.n	8015c08 <_svfiprintf_r+0x1a8>
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	d0c5      	beq.n	8015b90 <_svfiprintf_r+0x130>
 8015c04:	9105      	str	r1, [sp, #20]
 8015c06:	e7c3      	b.n	8015b90 <_svfiprintf_r+0x130>
 8015c08:	fb0c 2101 	mla	r1, ip, r1, r2
 8015c0c:	4604      	mov	r4, r0
 8015c0e:	2301      	movs	r3, #1
 8015c10:	e7f0      	b.n	8015bf4 <_svfiprintf_r+0x194>
 8015c12:	ab03      	add	r3, sp, #12
 8015c14:	9300      	str	r3, [sp, #0]
 8015c16:	462a      	mov	r2, r5
 8015c18:	4b0f      	ldr	r3, [pc, #60]	; (8015c58 <_svfiprintf_r+0x1f8>)
 8015c1a:	a904      	add	r1, sp, #16
 8015c1c:	4638      	mov	r0, r7
 8015c1e:	f7fc fbc7 	bl	80123b0 <_printf_float>
 8015c22:	1c42      	adds	r2, r0, #1
 8015c24:	4606      	mov	r6, r0
 8015c26:	d1d6      	bne.n	8015bd6 <_svfiprintf_r+0x176>
 8015c28:	89ab      	ldrh	r3, [r5, #12]
 8015c2a:	065b      	lsls	r3, r3, #25
 8015c2c:	f53f af2c 	bmi.w	8015a88 <_svfiprintf_r+0x28>
 8015c30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015c32:	b01d      	add	sp, #116	; 0x74
 8015c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c38:	ab03      	add	r3, sp, #12
 8015c3a:	9300      	str	r3, [sp, #0]
 8015c3c:	462a      	mov	r2, r5
 8015c3e:	4b06      	ldr	r3, [pc, #24]	; (8015c58 <_svfiprintf_r+0x1f8>)
 8015c40:	a904      	add	r1, sp, #16
 8015c42:	4638      	mov	r0, r7
 8015c44:	f7fc fe58 	bl	80128f8 <_printf_i>
 8015c48:	e7eb      	b.n	8015c22 <_svfiprintf_r+0x1c2>
 8015c4a:	bf00      	nop
 8015c4c:	08018694 	.word	0x08018694
 8015c50:	0801869e 	.word	0x0801869e
 8015c54:	080123b1 	.word	0x080123b1
 8015c58:	080159a9 	.word	0x080159a9
 8015c5c:	0801869a 	.word	0x0801869a

08015c60 <nan>:
 8015c60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8015c68 <nan+0x8>
 8015c64:	4770      	bx	lr
 8015c66:	bf00      	nop
 8015c68:	00000000 	.word	0x00000000
 8015c6c:	7ff80000 	.word	0x7ff80000

08015c70 <_sbrk_r>:
 8015c70:	b538      	push	{r3, r4, r5, lr}
 8015c72:	4d06      	ldr	r5, [pc, #24]	; (8015c8c <_sbrk_r+0x1c>)
 8015c74:	2300      	movs	r3, #0
 8015c76:	4604      	mov	r4, r0
 8015c78:	4608      	mov	r0, r1
 8015c7a:	602b      	str	r3, [r5, #0]
 8015c7c:	f7f0 faca 	bl	8006214 <_sbrk>
 8015c80:	1c43      	adds	r3, r0, #1
 8015c82:	d102      	bne.n	8015c8a <_sbrk_r+0x1a>
 8015c84:	682b      	ldr	r3, [r5, #0]
 8015c86:	b103      	cbz	r3, 8015c8a <_sbrk_r+0x1a>
 8015c88:	6023      	str	r3, [r4, #0]
 8015c8a:	bd38      	pop	{r3, r4, r5, pc}
 8015c8c:	20004238 	.word	0x20004238

08015c90 <__sread>:
 8015c90:	b510      	push	{r4, lr}
 8015c92:	460c      	mov	r4, r1
 8015c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c98:	f000 fa5c 	bl	8016154 <_read_r>
 8015c9c:	2800      	cmp	r0, #0
 8015c9e:	bfab      	itete	ge
 8015ca0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015ca2:	89a3      	ldrhlt	r3, [r4, #12]
 8015ca4:	181b      	addge	r3, r3, r0
 8015ca6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015caa:	bfac      	ite	ge
 8015cac:	6563      	strge	r3, [r4, #84]	; 0x54
 8015cae:	81a3      	strhlt	r3, [r4, #12]
 8015cb0:	bd10      	pop	{r4, pc}

08015cb2 <__swrite>:
 8015cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cb6:	461f      	mov	r7, r3
 8015cb8:	898b      	ldrh	r3, [r1, #12]
 8015cba:	05db      	lsls	r3, r3, #23
 8015cbc:	4605      	mov	r5, r0
 8015cbe:	460c      	mov	r4, r1
 8015cc0:	4616      	mov	r6, r2
 8015cc2:	d505      	bpl.n	8015cd0 <__swrite+0x1e>
 8015cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015cc8:	2302      	movs	r3, #2
 8015cca:	2200      	movs	r2, #0
 8015ccc:	f000 f882 	bl	8015dd4 <_lseek_r>
 8015cd0:	89a3      	ldrh	r3, [r4, #12]
 8015cd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015cd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015cda:	81a3      	strh	r3, [r4, #12]
 8015cdc:	4632      	mov	r2, r6
 8015cde:	463b      	mov	r3, r7
 8015ce0:	4628      	mov	r0, r5
 8015ce2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015ce6:	f000 b823 	b.w	8015d30 <_write_r>

08015cea <__sseek>:
 8015cea:	b510      	push	{r4, lr}
 8015cec:	460c      	mov	r4, r1
 8015cee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015cf2:	f000 f86f 	bl	8015dd4 <_lseek_r>
 8015cf6:	1c43      	adds	r3, r0, #1
 8015cf8:	89a3      	ldrh	r3, [r4, #12]
 8015cfa:	bf15      	itete	ne
 8015cfc:	6560      	strne	r0, [r4, #84]	; 0x54
 8015cfe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015d02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015d06:	81a3      	strheq	r3, [r4, #12]
 8015d08:	bf18      	it	ne
 8015d0a:	81a3      	strhne	r3, [r4, #12]
 8015d0c:	bd10      	pop	{r4, pc}

08015d0e <__sclose>:
 8015d0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d12:	f000 b83d 	b.w	8015d90 <_close_r>

08015d16 <__ascii_wctomb>:
 8015d16:	b149      	cbz	r1, 8015d2c <__ascii_wctomb+0x16>
 8015d18:	2aff      	cmp	r2, #255	; 0xff
 8015d1a:	bf85      	ittet	hi
 8015d1c:	238a      	movhi	r3, #138	; 0x8a
 8015d1e:	6003      	strhi	r3, [r0, #0]
 8015d20:	700a      	strbls	r2, [r1, #0]
 8015d22:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8015d26:	bf98      	it	ls
 8015d28:	2001      	movls	r0, #1
 8015d2a:	4770      	bx	lr
 8015d2c:	4608      	mov	r0, r1
 8015d2e:	4770      	bx	lr

08015d30 <_write_r>:
 8015d30:	b538      	push	{r3, r4, r5, lr}
 8015d32:	4d07      	ldr	r5, [pc, #28]	; (8015d50 <_write_r+0x20>)
 8015d34:	4604      	mov	r4, r0
 8015d36:	4608      	mov	r0, r1
 8015d38:	4611      	mov	r1, r2
 8015d3a:	2200      	movs	r2, #0
 8015d3c:	602a      	str	r2, [r5, #0]
 8015d3e:	461a      	mov	r2, r3
 8015d40:	f7f0 fa17 	bl	8006172 <_write>
 8015d44:	1c43      	adds	r3, r0, #1
 8015d46:	d102      	bne.n	8015d4e <_write_r+0x1e>
 8015d48:	682b      	ldr	r3, [r5, #0]
 8015d4a:	b103      	cbz	r3, 8015d4e <_write_r+0x1e>
 8015d4c:	6023      	str	r3, [r4, #0]
 8015d4e:	bd38      	pop	{r3, r4, r5, pc}
 8015d50:	20004238 	.word	0x20004238

08015d54 <__assert_func>:
 8015d54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015d56:	4614      	mov	r4, r2
 8015d58:	461a      	mov	r2, r3
 8015d5a:	4b09      	ldr	r3, [pc, #36]	; (8015d80 <__assert_func+0x2c>)
 8015d5c:	681b      	ldr	r3, [r3, #0]
 8015d5e:	4605      	mov	r5, r0
 8015d60:	68d8      	ldr	r0, [r3, #12]
 8015d62:	b14c      	cbz	r4, 8015d78 <__assert_func+0x24>
 8015d64:	4b07      	ldr	r3, [pc, #28]	; (8015d84 <__assert_func+0x30>)
 8015d66:	9100      	str	r1, [sp, #0]
 8015d68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015d6c:	4906      	ldr	r1, [pc, #24]	; (8015d88 <__assert_func+0x34>)
 8015d6e:	462b      	mov	r3, r5
 8015d70:	f000 f81e 	bl	8015db0 <fiprintf>
 8015d74:	f000 fac0 	bl	80162f8 <abort>
 8015d78:	4b04      	ldr	r3, [pc, #16]	; (8015d8c <__assert_func+0x38>)
 8015d7a:	461c      	mov	r4, r3
 8015d7c:	e7f3      	b.n	8015d66 <__assert_func+0x12>
 8015d7e:	bf00      	nop
 8015d80:	20000258 	.word	0x20000258
 8015d84:	080186a5 	.word	0x080186a5
 8015d88:	080186b2 	.word	0x080186b2
 8015d8c:	080186e0 	.word	0x080186e0

08015d90 <_close_r>:
 8015d90:	b538      	push	{r3, r4, r5, lr}
 8015d92:	4d06      	ldr	r5, [pc, #24]	; (8015dac <_close_r+0x1c>)
 8015d94:	2300      	movs	r3, #0
 8015d96:	4604      	mov	r4, r0
 8015d98:	4608      	mov	r0, r1
 8015d9a:	602b      	str	r3, [r5, #0]
 8015d9c:	f7f0 fa05 	bl	80061aa <_close>
 8015da0:	1c43      	adds	r3, r0, #1
 8015da2:	d102      	bne.n	8015daa <_close_r+0x1a>
 8015da4:	682b      	ldr	r3, [r5, #0]
 8015da6:	b103      	cbz	r3, 8015daa <_close_r+0x1a>
 8015da8:	6023      	str	r3, [r4, #0]
 8015daa:	bd38      	pop	{r3, r4, r5, pc}
 8015dac:	20004238 	.word	0x20004238

08015db0 <fiprintf>:
 8015db0:	b40e      	push	{r1, r2, r3}
 8015db2:	b503      	push	{r0, r1, lr}
 8015db4:	4601      	mov	r1, r0
 8015db6:	ab03      	add	r3, sp, #12
 8015db8:	4805      	ldr	r0, [pc, #20]	; (8015dd0 <fiprintf+0x20>)
 8015dba:	f853 2b04 	ldr.w	r2, [r3], #4
 8015dbe:	6800      	ldr	r0, [r0, #0]
 8015dc0:	9301      	str	r3, [sp, #4]
 8015dc2:	f000 f897 	bl	8015ef4 <_vfiprintf_r>
 8015dc6:	b002      	add	sp, #8
 8015dc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8015dcc:	b003      	add	sp, #12
 8015dce:	4770      	bx	lr
 8015dd0:	20000258 	.word	0x20000258

08015dd4 <_lseek_r>:
 8015dd4:	b538      	push	{r3, r4, r5, lr}
 8015dd6:	4d07      	ldr	r5, [pc, #28]	; (8015df4 <_lseek_r+0x20>)
 8015dd8:	4604      	mov	r4, r0
 8015dda:	4608      	mov	r0, r1
 8015ddc:	4611      	mov	r1, r2
 8015dde:	2200      	movs	r2, #0
 8015de0:	602a      	str	r2, [r5, #0]
 8015de2:	461a      	mov	r2, r3
 8015de4:	f7f0 fa08 	bl	80061f8 <_lseek>
 8015de8:	1c43      	adds	r3, r0, #1
 8015dea:	d102      	bne.n	8015df2 <_lseek_r+0x1e>
 8015dec:	682b      	ldr	r3, [r5, #0]
 8015dee:	b103      	cbz	r3, 8015df2 <_lseek_r+0x1e>
 8015df0:	6023      	str	r3, [r4, #0]
 8015df2:	bd38      	pop	{r3, r4, r5, pc}
 8015df4:	20004238 	.word	0x20004238

08015df8 <memmove>:
 8015df8:	4288      	cmp	r0, r1
 8015dfa:	b510      	push	{r4, lr}
 8015dfc:	eb01 0402 	add.w	r4, r1, r2
 8015e00:	d902      	bls.n	8015e08 <memmove+0x10>
 8015e02:	4284      	cmp	r4, r0
 8015e04:	4623      	mov	r3, r4
 8015e06:	d807      	bhi.n	8015e18 <memmove+0x20>
 8015e08:	1e43      	subs	r3, r0, #1
 8015e0a:	42a1      	cmp	r1, r4
 8015e0c:	d008      	beq.n	8015e20 <memmove+0x28>
 8015e0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015e12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015e16:	e7f8      	b.n	8015e0a <memmove+0x12>
 8015e18:	4402      	add	r2, r0
 8015e1a:	4601      	mov	r1, r0
 8015e1c:	428a      	cmp	r2, r1
 8015e1e:	d100      	bne.n	8015e22 <memmove+0x2a>
 8015e20:	bd10      	pop	{r4, pc}
 8015e22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015e26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015e2a:	e7f7      	b.n	8015e1c <memmove+0x24>

08015e2c <__malloc_lock>:
 8015e2c:	4801      	ldr	r0, [pc, #4]	; (8015e34 <__malloc_lock+0x8>)
 8015e2e:	f7fe bfe6 	b.w	8014dfe <__retarget_lock_acquire_recursive>
 8015e32:	bf00      	nop
 8015e34:	2000422c 	.word	0x2000422c

08015e38 <__malloc_unlock>:
 8015e38:	4801      	ldr	r0, [pc, #4]	; (8015e40 <__malloc_unlock+0x8>)
 8015e3a:	f7fe bfe1 	b.w	8014e00 <__retarget_lock_release_recursive>
 8015e3e:	bf00      	nop
 8015e40:	2000422c 	.word	0x2000422c

08015e44 <_realloc_r>:
 8015e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e48:	4680      	mov	r8, r0
 8015e4a:	4614      	mov	r4, r2
 8015e4c:	460e      	mov	r6, r1
 8015e4e:	b921      	cbnz	r1, 8015e5a <_realloc_r+0x16>
 8015e50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015e54:	4611      	mov	r1, r2
 8015e56:	f7ff bd33 	b.w	80158c0 <_malloc_r>
 8015e5a:	b92a      	cbnz	r2, 8015e68 <_realloc_r+0x24>
 8015e5c:	f7ff fcc4 	bl	80157e8 <_free_r>
 8015e60:	4625      	mov	r5, r4
 8015e62:	4628      	mov	r0, r5
 8015e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e68:	f000 fc6a 	bl	8016740 <_malloc_usable_size_r>
 8015e6c:	4284      	cmp	r4, r0
 8015e6e:	4607      	mov	r7, r0
 8015e70:	d802      	bhi.n	8015e78 <_realloc_r+0x34>
 8015e72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015e76:	d812      	bhi.n	8015e9e <_realloc_r+0x5a>
 8015e78:	4621      	mov	r1, r4
 8015e7a:	4640      	mov	r0, r8
 8015e7c:	f7ff fd20 	bl	80158c0 <_malloc_r>
 8015e80:	4605      	mov	r5, r0
 8015e82:	2800      	cmp	r0, #0
 8015e84:	d0ed      	beq.n	8015e62 <_realloc_r+0x1e>
 8015e86:	42bc      	cmp	r4, r7
 8015e88:	4622      	mov	r2, r4
 8015e8a:	4631      	mov	r1, r6
 8015e8c:	bf28      	it	cs
 8015e8e:	463a      	movcs	r2, r7
 8015e90:	f7fc f9d8 	bl	8012244 <memcpy>
 8015e94:	4631      	mov	r1, r6
 8015e96:	4640      	mov	r0, r8
 8015e98:	f7ff fca6 	bl	80157e8 <_free_r>
 8015e9c:	e7e1      	b.n	8015e62 <_realloc_r+0x1e>
 8015e9e:	4635      	mov	r5, r6
 8015ea0:	e7df      	b.n	8015e62 <_realloc_r+0x1e>

08015ea2 <__sfputc_r>:
 8015ea2:	6893      	ldr	r3, [r2, #8]
 8015ea4:	3b01      	subs	r3, #1
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	b410      	push	{r4}
 8015eaa:	6093      	str	r3, [r2, #8]
 8015eac:	da08      	bge.n	8015ec0 <__sfputc_r+0x1e>
 8015eae:	6994      	ldr	r4, [r2, #24]
 8015eb0:	42a3      	cmp	r3, r4
 8015eb2:	db01      	blt.n	8015eb8 <__sfputc_r+0x16>
 8015eb4:	290a      	cmp	r1, #10
 8015eb6:	d103      	bne.n	8015ec0 <__sfputc_r+0x1e>
 8015eb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015ebc:	f000 b95c 	b.w	8016178 <__swbuf_r>
 8015ec0:	6813      	ldr	r3, [r2, #0]
 8015ec2:	1c58      	adds	r0, r3, #1
 8015ec4:	6010      	str	r0, [r2, #0]
 8015ec6:	7019      	strb	r1, [r3, #0]
 8015ec8:	4608      	mov	r0, r1
 8015eca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015ece:	4770      	bx	lr

08015ed0 <__sfputs_r>:
 8015ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ed2:	4606      	mov	r6, r0
 8015ed4:	460f      	mov	r7, r1
 8015ed6:	4614      	mov	r4, r2
 8015ed8:	18d5      	adds	r5, r2, r3
 8015eda:	42ac      	cmp	r4, r5
 8015edc:	d101      	bne.n	8015ee2 <__sfputs_r+0x12>
 8015ede:	2000      	movs	r0, #0
 8015ee0:	e007      	b.n	8015ef2 <__sfputs_r+0x22>
 8015ee2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015ee6:	463a      	mov	r2, r7
 8015ee8:	4630      	mov	r0, r6
 8015eea:	f7ff ffda 	bl	8015ea2 <__sfputc_r>
 8015eee:	1c43      	adds	r3, r0, #1
 8015ef0:	d1f3      	bne.n	8015eda <__sfputs_r+0xa>
 8015ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015ef4 <_vfiprintf_r>:
 8015ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ef8:	460d      	mov	r5, r1
 8015efa:	b09d      	sub	sp, #116	; 0x74
 8015efc:	4614      	mov	r4, r2
 8015efe:	4698      	mov	r8, r3
 8015f00:	4606      	mov	r6, r0
 8015f02:	b118      	cbz	r0, 8015f0c <_vfiprintf_r+0x18>
 8015f04:	6983      	ldr	r3, [r0, #24]
 8015f06:	b90b      	cbnz	r3, 8015f0c <_vfiprintf_r+0x18>
 8015f08:	f000 fb18 	bl	801653c <__sinit>
 8015f0c:	4b89      	ldr	r3, [pc, #548]	; (8016134 <_vfiprintf_r+0x240>)
 8015f0e:	429d      	cmp	r5, r3
 8015f10:	d11b      	bne.n	8015f4a <_vfiprintf_r+0x56>
 8015f12:	6875      	ldr	r5, [r6, #4]
 8015f14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015f16:	07d9      	lsls	r1, r3, #31
 8015f18:	d405      	bmi.n	8015f26 <_vfiprintf_r+0x32>
 8015f1a:	89ab      	ldrh	r3, [r5, #12]
 8015f1c:	059a      	lsls	r2, r3, #22
 8015f1e:	d402      	bmi.n	8015f26 <_vfiprintf_r+0x32>
 8015f20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015f22:	f7fe ff6c 	bl	8014dfe <__retarget_lock_acquire_recursive>
 8015f26:	89ab      	ldrh	r3, [r5, #12]
 8015f28:	071b      	lsls	r3, r3, #28
 8015f2a:	d501      	bpl.n	8015f30 <_vfiprintf_r+0x3c>
 8015f2c:	692b      	ldr	r3, [r5, #16]
 8015f2e:	b9eb      	cbnz	r3, 8015f6c <_vfiprintf_r+0x78>
 8015f30:	4629      	mov	r1, r5
 8015f32:	4630      	mov	r0, r6
 8015f34:	f000 f972 	bl	801621c <__swsetup_r>
 8015f38:	b1c0      	cbz	r0, 8015f6c <_vfiprintf_r+0x78>
 8015f3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015f3c:	07dc      	lsls	r4, r3, #31
 8015f3e:	d50e      	bpl.n	8015f5e <_vfiprintf_r+0x6a>
 8015f40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015f44:	b01d      	add	sp, #116	; 0x74
 8015f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f4a:	4b7b      	ldr	r3, [pc, #492]	; (8016138 <_vfiprintf_r+0x244>)
 8015f4c:	429d      	cmp	r5, r3
 8015f4e:	d101      	bne.n	8015f54 <_vfiprintf_r+0x60>
 8015f50:	68b5      	ldr	r5, [r6, #8]
 8015f52:	e7df      	b.n	8015f14 <_vfiprintf_r+0x20>
 8015f54:	4b79      	ldr	r3, [pc, #484]	; (801613c <_vfiprintf_r+0x248>)
 8015f56:	429d      	cmp	r5, r3
 8015f58:	bf08      	it	eq
 8015f5a:	68f5      	ldreq	r5, [r6, #12]
 8015f5c:	e7da      	b.n	8015f14 <_vfiprintf_r+0x20>
 8015f5e:	89ab      	ldrh	r3, [r5, #12]
 8015f60:	0598      	lsls	r0, r3, #22
 8015f62:	d4ed      	bmi.n	8015f40 <_vfiprintf_r+0x4c>
 8015f64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015f66:	f7fe ff4b 	bl	8014e00 <__retarget_lock_release_recursive>
 8015f6a:	e7e9      	b.n	8015f40 <_vfiprintf_r+0x4c>
 8015f6c:	2300      	movs	r3, #0
 8015f6e:	9309      	str	r3, [sp, #36]	; 0x24
 8015f70:	2320      	movs	r3, #32
 8015f72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015f76:	f8cd 800c 	str.w	r8, [sp, #12]
 8015f7a:	2330      	movs	r3, #48	; 0x30
 8015f7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016140 <_vfiprintf_r+0x24c>
 8015f80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015f84:	f04f 0901 	mov.w	r9, #1
 8015f88:	4623      	mov	r3, r4
 8015f8a:	469a      	mov	sl, r3
 8015f8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015f90:	b10a      	cbz	r2, 8015f96 <_vfiprintf_r+0xa2>
 8015f92:	2a25      	cmp	r2, #37	; 0x25
 8015f94:	d1f9      	bne.n	8015f8a <_vfiprintf_r+0x96>
 8015f96:	ebba 0b04 	subs.w	fp, sl, r4
 8015f9a:	d00b      	beq.n	8015fb4 <_vfiprintf_r+0xc0>
 8015f9c:	465b      	mov	r3, fp
 8015f9e:	4622      	mov	r2, r4
 8015fa0:	4629      	mov	r1, r5
 8015fa2:	4630      	mov	r0, r6
 8015fa4:	f7ff ff94 	bl	8015ed0 <__sfputs_r>
 8015fa8:	3001      	adds	r0, #1
 8015faa:	f000 80aa 	beq.w	8016102 <_vfiprintf_r+0x20e>
 8015fae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015fb0:	445a      	add	r2, fp
 8015fb2:	9209      	str	r2, [sp, #36]	; 0x24
 8015fb4:	f89a 3000 	ldrb.w	r3, [sl]
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	f000 80a2 	beq.w	8016102 <_vfiprintf_r+0x20e>
 8015fbe:	2300      	movs	r3, #0
 8015fc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015fc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015fc8:	f10a 0a01 	add.w	sl, sl, #1
 8015fcc:	9304      	str	r3, [sp, #16]
 8015fce:	9307      	str	r3, [sp, #28]
 8015fd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015fd4:	931a      	str	r3, [sp, #104]	; 0x68
 8015fd6:	4654      	mov	r4, sl
 8015fd8:	2205      	movs	r2, #5
 8015fda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015fde:	4858      	ldr	r0, [pc, #352]	; (8016140 <_vfiprintf_r+0x24c>)
 8015fe0:	f7ea f8fe 	bl	80001e0 <memchr>
 8015fe4:	9a04      	ldr	r2, [sp, #16]
 8015fe6:	b9d8      	cbnz	r0, 8016020 <_vfiprintf_r+0x12c>
 8015fe8:	06d1      	lsls	r1, r2, #27
 8015fea:	bf44      	itt	mi
 8015fec:	2320      	movmi	r3, #32
 8015fee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015ff2:	0713      	lsls	r3, r2, #28
 8015ff4:	bf44      	itt	mi
 8015ff6:	232b      	movmi	r3, #43	; 0x2b
 8015ff8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015ffc:	f89a 3000 	ldrb.w	r3, [sl]
 8016000:	2b2a      	cmp	r3, #42	; 0x2a
 8016002:	d015      	beq.n	8016030 <_vfiprintf_r+0x13c>
 8016004:	9a07      	ldr	r2, [sp, #28]
 8016006:	4654      	mov	r4, sl
 8016008:	2000      	movs	r0, #0
 801600a:	f04f 0c0a 	mov.w	ip, #10
 801600e:	4621      	mov	r1, r4
 8016010:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016014:	3b30      	subs	r3, #48	; 0x30
 8016016:	2b09      	cmp	r3, #9
 8016018:	d94e      	bls.n	80160b8 <_vfiprintf_r+0x1c4>
 801601a:	b1b0      	cbz	r0, 801604a <_vfiprintf_r+0x156>
 801601c:	9207      	str	r2, [sp, #28]
 801601e:	e014      	b.n	801604a <_vfiprintf_r+0x156>
 8016020:	eba0 0308 	sub.w	r3, r0, r8
 8016024:	fa09 f303 	lsl.w	r3, r9, r3
 8016028:	4313      	orrs	r3, r2
 801602a:	9304      	str	r3, [sp, #16]
 801602c:	46a2      	mov	sl, r4
 801602e:	e7d2      	b.n	8015fd6 <_vfiprintf_r+0xe2>
 8016030:	9b03      	ldr	r3, [sp, #12]
 8016032:	1d19      	adds	r1, r3, #4
 8016034:	681b      	ldr	r3, [r3, #0]
 8016036:	9103      	str	r1, [sp, #12]
 8016038:	2b00      	cmp	r3, #0
 801603a:	bfbb      	ittet	lt
 801603c:	425b      	neglt	r3, r3
 801603e:	f042 0202 	orrlt.w	r2, r2, #2
 8016042:	9307      	strge	r3, [sp, #28]
 8016044:	9307      	strlt	r3, [sp, #28]
 8016046:	bfb8      	it	lt
 8016048:	9204      	strlt	r2, [sp, #16]
 801604a:	7823      	ldrb	r3, [r4, #0]
 801604c:	2b2e      	cmp	r3, #46	; 0x2e
 801604e:	d10c      	bne.n	801606a <_vfiprintf_r+0x176>
 8016050:	7863      	ldrb	r3, [r4, #1]
 8016052:	2b2a      	cmp	r3, #42	; 0x2a
 8016054:	d135      	bne.n	80160c2 <_vfiprintf_r+0x1ce>
 8016056:	9b03      	ldr	r3, [sp, #12]
 8016058:	1d1a      	adds	r2, r3, #4
 801605a:	681b      	ldr	r3, [r3, #0]
 801605c:	9203      	str	r2, [sp, #12]
 801605e:	2b00      	cmp	r3, #0
 8016060:	bfb8      	it	lt
 8016062:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8016066:	3402      	adds	r4, #2
 8016068:	9305      	str	r3, [sp, #20]
 801606a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016150 <_vfiprintf_r+0x25c>
 801606e:	7821      	ldrb	r1, [r4, #0]
 8016070:	2203      	movs	r2, #3
 8016072:	4650      	mov	r0, sl
 8016074:	f7ea f8b4 	bl	80001e0 <memchr>
 8016078:	b140      	cbz	r0, 801608c <_vfiprintf_r+0x198>
 801607a:	2340      	movs	r3, #64	; 0x40
 801607c:	eba0 000a 	sub.w	r0, r0, sl
 8016080:	fa03 f000 	lsl.w	r0, r3, r0
 8016084:	9b04      	ldr	r3, [sp, #16]
 8016086:	4303      	orrs	r3, r0
 8016088:	3401      	adds	r4, #1
 801608a:	9304      	str	r3, [sp, #16]
 801608c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016090:	482c      	ldr	r0, [pc, #176]	; (8016144 <_vfiprintf_r+0x250>)
 8016092:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016096:	2206      	movs	r2, #6
 8016098:	f7ea f8a2 	bl	80001e0 <memchr>
 801609c:	2800      	cmp	r0, #0
 801609e:	d03f      	beq.n	8016120 <_vfiprintf_r+0x22c>
 80160a0:	4b29      	ldr	r3, [pc, #164]	; (8016148 <_vfiprintf_r+0x254>)
 80160a2:	bb1b      	cbnz	r3, 80160ec <_vfiprintf_r+0x1f8>
 80160a4:	9b03      	ldr	r3, [sp, #12]
 80160a6:	3307      	adds	r3, #7
 80160a8:	f023 0307 	bic.w	r3, r3, #7
 80160ac:	3308      	adds	r3, #8
 80160ae:	9303      	str	r3, [sp, #12]
 80160b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80160b2:	443b      	add	r3, r7
 80160b4:	9309      	str	r3, [sp, #36]	; 0x24
 80160b6:	e767      	b.n	8015f88 <_vfiprintf_r+0x94>
 80160b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80160bc:	460c      	mov	r4, r1
 80160be:	2001      	movs	r0, #1
 80160c0:	e7a5      	b.n	801600e <_vfiprintf_r+0x11a>
 80160c2:	2300      	movs	r3, #0
 80160c4:	3401      	adds	r4, #1
 80160c6:	9305      	str	r3, [sp, #20]
 80160c8:	4619      	mov	r1, r3
 80160ca:	f04f 0c0a 	mov.w	ip, #10
 80160ce:	4620      	mov	r0, r4
 80160d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80160d4:	3a30      	subs	r2, #48	; 0x30
 80160d6:	2a09      	cmp	r2, #9
 80160d8:	d903      	bls.n	80160e2 <_vfiprintf_r+0x1ee>
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d0c5      	beq.n	801606a <_vfiprintf_r+0x176>
 80160de:	9105      	str	r1, [sp, #20]
 80160e0:	e7c3      	b.n	801606a <_vfiprintf_r+0x176>
 80160e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80160e6:	4604      	mov	r4, r0
 80160e8:	2301      	movs	r3, #1
 80160ea:	e7f0      	b.n	80160ce <_vfiprintf_r+0x1da>
 80160ec:	ab03      	add	r3, sp, #12
 80160ee:	9300      	str	r3, [sp, #0]
 80160f0:	462a      	mov	r2, r5
 80160f2:	4b16      	ldr	r3, [pc, #88]	; (801614c <_vfiprintf_r+0x258>)
 80160f4:	a904      	add	r1, sp, #16
 80160f6:	4630      	mov	r0, r6
 80160f8:	f7fc f95a 	bl	80123b0 <_printf_float>
 80160fc:	4607      	mov	r7, r0
 80160fe:	1c78      	adds	r0, r7, #1
 8016100:	d1d6      	bne.n	80160b0 <_vfiprintf_r+0x1bc>
 8016102:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016104:	07d9      	lsls	r1, r3, #31
 8016106:	d405      	bmi.n	8016114 <_vfiprintf_r+0x220>
 8016108:	89ab      	ldrh	r3, [r5, #12]
 801610a:	059a      	lsls	r2, r3, #22
 801610c:	d402      	bmi.n	8016114 <_vfiprintf_r+0x220>
 801610e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016110:	f7fe fe76 	bl	8014e00 <__retarget_lock_release_recursive>
 8016114:	89ab      	ldrh	r3, [r5, #12]
 8016116:	065b      	lsls	r3, r3, #25
 8016118:	f53f af12 	bmi.w	8015f40 <_vfiprintf_r+0x4c>
 801611c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801611e:	e711      	b.n	8015f44 <_vfiprintf_r+0x50>
 8016120:	ab03      	add	r3, sp, #12
 8016122:	9300      	str	r3, [sp, #0]
 8016124:	462a      	mov	r2, r5
 8016126:	4b09      	ldr	r3, [pc, #36]	; (801614c <_vfiprintf_r+0x258>)
 8016128:	a904      	add	r1, sp, #16
 801612a:	4630      	mov	r0, r6
 801612c:	f7fc fbe4 	bl	80128f8 <_printf_i>
 8016130:	e7e4      	b.n	80160fc <_vfiprintf_r+0x208>
 8016132:	bf00      	nop
 8016134:	08018704 	.word	0x08018704
 8016138:	08018724 	.word	0x08018724
 801613c:	080186e4 	.word	0x080186e4
 8016140:	08018694 	.word	0x08018694
 8016144:	0801869e 	.word	0x0801869e
 8016148:	080123b1 	.word	0x080123b1
 801614c:	08015ed1 	.word	0x08015ed1
 8016150:	0801869a 	.word	0x0801869a

08016154 <_read_r>:
 8016154:	b538      	push	{r3, r4, r5, lr}
 8016156:	4d07      	ldr	r5, [pc, #28]	; (8016174 <_read_r+0x20>)
 8016158:	4604      	mov	r4, r0
 801615a:	4608      	mov	r0, r1
 801615c:	4611      	mov	r1, r2
 801615e:	2200      	movs	r2, #0
 8016160:	602a      	str	r2, [r5, #0]
 8016162:	461a      	mov	r2, r3
 8016164:	f7ef ffe8 	bl	8006138 <_read>
 8016168:	1c43      	adds	r3, r0, #1
 801616a:	d102      	bne.n	8016172 <_read_r+0x1e>
 801616c:	682b      	ldr	r3, [r5, #0]
 801616e:	b103      	cbz	r3, 8016172 <_read_r+0x1e>
 8016170:	6023      	str	r3, [r4, #0]
 8016172:	bd38      	pop	{r3, r4, r5, pc}
 8016174:	20004238 	.word	0x20004238

08016178 <__swbuf_r>:
 8016178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801617a:	460e      	mov	r6, r1
 801617c:	4614      	mov	r4, r2
 801617e:	4605      	mov	r5, r0
 8016180:	b118      	cbz	r0, 801618a <__swbuf_r+0x12>
 8016182:	6983      	ldr	r3, [r0, #24]
 8016184:	b90b      	cbnz	r3, 801618a <__swbuf_r+0x12>
 8016186:	f000 f9d9 	bl	801653c <__sinit>
 801618a:	4b21      	ldr	r3, [pc, #132]	; (8016210 <__swbuf_r+0x98>)
 801618c:	429c      	cmp	r4, r3
 801618e:	d12b      	bne.n	80161e8 <__swbuf_r+0x70>
 8016190:	686c      	ldr	r4, [r5, #4]
 8016192:	69a3      	ldr	r3, [r4, #24]
 8016194:	60a3      	str	r3, [r4, #8]
 8016196:	89a3      	ldrh	r3, [r4, #12]
 8016198:	071a      	lsls	r2, r3, #28
 801619a:	d52f      	bpl.n	80161fc <__swbuf_r+0x84>
 801619c:	6923      	ldr	r3, [r4, #16]
 801619e:	b36b      	cbz	r3, 80161fc <__swbuf_r+0x84>
 80161a0:	6923      	ldr	r3, [r4, #16]
 80161a2:	6820      	ldr	r0, [r4, #0]
 80161a4:	1ac0      	subs	r0, r0, r3
 80161a6:	6963      	ldr	r3, [r4, #20]
 80161a8:	b2f6      	uxtb	r6, r6
 80161aa:	4283      	cmp	r3, r0
 80161ac:	4637      	mov	r7, r6
 80161ae:	dc04      	bgt.n	80161ba <__swbuf_r+0x42>
 80161b0:	4621      	mov	r1, r4
 80161b2:	4628      	mov	r0, r5
 80161b4:	f000 f92e 	bl	8016414 <_fflush_r>
 80161b8:	bb30      	cbnz	r0, 8016208 <__swbuf_r+0x90>
 80161ba:	68a3      	ldr	r3, [r4, #8]
 80161bc:	3b01      	subs	r3, #1
 80161be:	60a3      	str	r3, [r4, #8]
 80161c0:	6823      	ldr	r3, [r4, #0]
 80161c2:	1c5a      	adds	r2, r3, #1
 80161c4:	6022      	str	r2, [r4, #0]
 80161c6:	701e      	strb	r6, [r3, #0]
 80161c8:	6963      	ldr	r3, [r4, #20]
 80161ca:	3001      	adds	r0, #1
 80161cc:	4283      	cmp	r3, r0
 80161ce:	d004      	beq.n	80161da <__swbuf_r+0x62>
 80161d0:	89a3      	ldrh	r3, [r4, #12]
 80161d2:	07db      	lsls	r3, r3, #31
 80161d4:	d506      	bpl.n	80161e4 <__swbuf_r+0x6c>
 80161d6:	2e0a      	cmp	r6, #10
 80161d8:	d104      	bne.n	80161e4 <__swbuf_r+0x6c>
 80161da:	4621      	mov	r1, r4
 80161dc:	4628      	mov	r0, r5
 80161de:	f000 f919 	bl	8016414 <_fflush_r>
 80161e2:	b988      	cbnz	r0, 8016208 <__swbuf_r+0x90>
 80161e4:	4638      	mov	r0, r7
 80161e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80161e8:	4b0a      	ldr	r3, [pc, #40]	; (8016214 <__swbuf_r+0x9c>)
 80161ea:	429c      	cmp	r4, r3
 80161ec:	d101      	bne.n	80161f2 <__swbuf_r+0x7a>
 80161ee:	68ac      	ldr	r4, [r5, #8]
 80161f0:	e7cf      	b.n	8016192 <__swbuf_r+0x1a>
 80161f2:	4b09      	ldr	r3, [pc, #36]	; (8016218 <__swbuf_r+0xa0>)
 80161f4:	429c      	cmp	r4, r3
 80161f6:	bf08      	it	eq
 80161f8:	68ec      	ldreq	r4, [r5, #12]
 80161fa:	e7ca      	b.n	8016192 <__swbuf_r+0x1a>
 80161fc:	4621      	mov	r1, r4
 80161fe:	4628      	mov	r0, r5
 8016200:	f000 f80c 	bl	801621c <__swsetup_r>
 8016204:	2800      	cmp	r0, #0
 8016206:	d0cb      	beq.n	80161a0 <__swbuf_r+0x28>
 8016208:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801620c:	e7ea      	b.n	80161e4 <__swbuf_r+0x6c>
 801620e:	bf00      	nop
 8016210:	08018704 	.word	0x08018704
 8016214:	08018724 	.word	0x08018724
 8016218:	080186e4 	.word	0x080186e4

0801621c <__swsetup_r>:
 801621c:	4b32      	ldr	r3, [pc, #200]	; (80162e8 <__swsetup_r+0xcc>)
 801621e:	b570      	push	{r4, r5, r6, lr}
 8016220:	681d      	ldr	r5, [r3, #0]
 8016222:	4606      	mov	r6, r0
 8016224:	460c      	mov	r4, r1
 8016226:	b125      	cbz	r5, 8016232 <__swsetup_r+0x16>
 8016228:	69ab      	ldr	r3, [r5, #24]
 801622a:	b913      	cbnz	r3, 8016232 <__swsetup_r+0x16>
 801622c:	4628      	mov	r0, r5
 801622e:	f000 f985 	bl	801653c <__sinit>
 8016232:	4b2e      	ldr	r3, [pc, #184]	; (80162ec <__swsetup_r+0xd0>)
 8016234:	429c      	cmp	r4, r3
 8016236:	d10f      	bne.n	8016258 <__swsetup_r+0x3c>
 8016238:	686c      	ldr	r4, [r5, #4]
 801623a:	89a3      	ldrh	r3, [r4, #12]
 801623c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016240:	0719      	lsls	r1, r3, #28
 8016242:	d42c      	bmi.n	801629e <__swsetup_r+0x82>
 8016244:	06dd      	lsls	r5, r3, #27
 8016246:	d411      	bmi.n	801626c <__swsetup_r+0x50>
 8016248:	2309      	movs	r3, #9
 801624a:	6033      	str	r3, [r6, #0]
 801624c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016250:	81a3      	strh	r3, [r4, #12]
 8016252:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016256:	e03e      	b.n	80162d6 <__swsetup_r+0xba>
 8016258:	4b25      	ldr	r3, [pc, #148]	; (80162f0 <__swsetup_r+0xd4>)
 801625a:	429c      	cmp	r4, r3
 801625c:	d101      	bne.n	8016262 <__swsetup_r+0x46>
 801625e:	68ac      	ldr	r4, [r5, #8]
 8016260:	e7eb      	b.n	801623a <__swsetup_r+0x1e>
 8016262:	4b24      	ldr	r3, [pc, #144]	; (80162f4 <__swsetup_r+0xd8>)
 8016264:	429c      	cmp	r4, r3
 8016266:	bf08      	it	eq
 8016268:	68ec      	ldreq	r4, [r5, #12]
 801626a:	e7e6      	b.n	801623a <__swsetup_r+0x1e>
 801626c:	0758      	lsls	r0, r3, #29
 801626e:	d512      	bpl.n	8016296 <__swsetup_r+0x7a>
 8016270:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016272:	b141      	cbz	r1, 8016286 <__swsetup_r+0x6a>
 8016274:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016278:	4299      	cmp	r1, r3
 801627a:	d002      	beq.n	8016282 <__swsetup_r+0x66>
 801627c:	4630      	mov	r0, r6
 801627e:	f7ff fab3 	bl	80157e8 <_free_r>
 8016282:	2300      	movs	r3, #0
 8016284:	6363      	str	r3, [r4, #52]	; 0x34
 8016286:	89a3      	ldrh	r3, [r4, #12]
 8016288:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801628c:	81a3      	strh	r3, [r4, #12]
 801628e:	2300      	movs	r3, #0
 8016290:	6063      	str	r3, [r4, #4]
 8016292:	6923      	ldr	r3, [r4, #16]
 8016294:	6023      	str	r3, [r4, #0]
 8016296:	89a3      	ldrh	r3, [r4, #12]
 8016298:	f043 0308 	orr.w	r3, r3, #8
 801629c:	81a3      	strh	r3, [r4, #12]
 801629e:	6923      	ldr	r3, [r4, #16]
 80162a0:	b94b      	cbnz	r3, 80162b6 <__swsetup_r+0x9a>
 80162a2:	89a3      	ldrh	r3, [r4, #12]
 80162a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80162a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80162ac:	d003      	beq.n	80162b6 <__swsetup_r+0x9a>
 80162ae:	4621      	mov	r1, r4
 80162b0:	4630      	mov	r0, r6
 80162b2:	f000 fa05 	bl	80166c0 <__smakebuf_r>
 80162b6:	89a0      	ldrh	r0, [r4, #12]
 80162b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80162bc:	f010 0301 	ands.w	r3, r0, #1
 80162c0:	d00a      	beq.n	80162d8 <__swsetup_r+0xbc>
 80162c2:	2300      	movs	r3, #0
 80162c4:	60a3      	str	r3, [r4, #8]
 80162c6:	6963      	ldr	r3, [r4, #20]
 80162c8:	425b      	negs	r3, r3
 80162ca:	61a3      	str	r3, [r4, #24]
 80162cc:	6923      	ldr	r3, [r4, #16]
 80162ce:	b943      	cbnz	r3, 80162e2 <__swsetup_r+0xc6>
 80162d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80162d4:	d1ba      	bne.n	801624c <__swsetup_r+0x30>
 80162d6:	bd70      	pop	{r4, r5, r6, pc}
 80162d8:	0781      	lsls	r1, r0, #30
 80162da:	bf58      	it	pl
 80162dc:	6963      	ldrpl	r3, [r4, #20]
 80162de:	60a3      	str	r3, [r4, #8]
 80162e0:	e7f4      	b.n	80162cc <__swsetup_r+0xb0>
 80162e2:	2000      	movs	r0, #0
 80162e4:	e7f7      	b.n	80162d6 <__swsetup_r+0xba>
 80162e6:	bf00      	nop
 80162e8:	20000258 	.word	0x20000258
 80162ec:	08018704 	.word	0x08018704
 80162f0:	08018724 	.word	0x08018724
 80162f4:	080186e4 	.word	0x080186e4

080162f8 <abort>:
 80162f8:	b508      	push	{r3, lr}
 80162fa:	2006      	movs	r0, #6
 80162fc:	f000 fa50 	bl	80167a0 <raise>
 8016300:	2001      	movs	r0, #1
 8016302:	f7ef ff0f 	bl	8006124 <_exit>
	...

08016308 <__sflush_r>:
 8016308:	898a      	ldrh	r2, [r1, #12]
 801630a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801630e:	4605      	mov	r5, r0
 8016310:	0710      	lsls	r0, r2, #28
 8016312:	460c      	mov	r4, r1
 8016314:	d458      	bmi.n	80163c8 <__sflush_r+0xc0>
 8016316:	684b      	ldr	r3, [r1, #4]
 8016318:	2b00      	cmp	r3, #0
 801631a:	dc05      	bgt.n	8016328 <__sflush_r+0x20>
 801631c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801631e:	2b00      	cmp	r3, #0
 8016320:	dc02      	bgt.n	8016328 <__sflush_r+0x20>
 8016322:	2000      	movs	r0, #0
 8016324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016328:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801632a:	2e00      	cmp	r6, #0
 801632c:	d0f9      	beq.n	8016322 <__sflush_r+0x1a>
 801632e:	2300      	movs	r3, #0
 8016330:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016334:	682f      	ldr	r7, [r5, #0]
 8016336:	602b      	str	r3, [r5, #0]
 8016338:	d032      	beq.n	80163a0 <__sflush_r+0x98>
 801633a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801633c:	89a3      	ldrh	r3, [r4, #12]
 801633e:	075a      	lsls	r2, r3, #29
 8016340:	d505      	bpl.n	801634e <__sflush_r+0x46>
 8016342:	6863      	ldr	r3, [r4, #4]
 8016344:	1ac0      	subs	r0, r0, r3
 8016346:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016348:	b10b      	cbz	r3, 801634e <__sflush_r+0x46>
 801634a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801634c:	1ac0      	subs	r0, r0, r3
 801634e:	2300      	movs	r3, #0
 8016350:	4602      	mov	r2, r0
 8016352:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016354:	6a21      	ldr	r1, [r4, #32]
 8016356:	4628      	mov	r0, r5
 8016358:	47b0      	blx	r6
 801635a:	1c43      	adds	r3, r0, #1
 801635c:	89a3      	ldrh	r3, [r4, #12]
 801635e:	d106      	bne.n	801636e <__sflush_r+0x66>
 8016360:	6829      	ldr	r1, [r5, #0]
 8016362:	291d      	cmp	r1, #29
 8016364:	d82c      	bhi.n	80163c0 <__sflush_r+0xb8>
 8016366:	4a2a      	ldr	r2, [pc, #168]	; (8016410 <__sflush_r+0x108>)
 8016368:	40ca      	lsrs	r2, r1
 801636a:	07d6      	lsls	r6, r2, #31
 801636c:	d528      	bpl.n	80163c0 <__sflush_r+0xb8>
 801636e:	2200      	movs	r2, #0
 8016370:	6062      	str	r2, [r4, #4]
 8016372:	04d9      	lsls	r1, r3, #19
 8016374:	6922      	ldr	r2, [r4, #16]
 8016376:	6022      	str	r2, [r4, #0]
 8016378:	d504      	bpl.n	8016384 <__sflush_r+0x7c>
 801637a:	1c42      	adds	r2, r0, #1
 801637c:	d101      	bne.n	8016382 <__sflush_r+0x7a>
 801637e:	682b      	ldr	r3, [r5, #0]
 8016380:	b903      	cbnz	r3, 8016384 <__sflush_r+0x7c>
 8016382:	6560      	str	r0, [r4, #84]	; 0x54
 8016384:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016386:	602f      	str	r7, [r5, #0]
 8016388:	2900      	cmp	r1, #0
 801638a:	d0ca      	beq.n	8016322 <__sflush_r+0x1a>
 801638c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016390:	4299      	cmp	r1, r3
 8016392:	d002      	beq.n	801639a <__sflush_r+0x92>
 8016394:	4628      	mov	r0, r5
 8016396:	f7ff fa27 	bl	80157e8 <_free_r>
 801639a:	2000      	movs	r0, #0
 801639c:	6360      	str	r0, [r4, #52]	; 0x34
 801639e:	e7c1      	b.n	8016324 <__sflush_r+0x1c>
 80163a0:	6a21      	ldr	r1, [r4, #32]
 80163a2:	2301      	movs	r3, #1
 80163a4:	4628      	mov	r0, r5
 80163a6:	47b0      	blx	r6
 80163a8:	1c41      	adds	r1, r0, #1
 80163aa:	d1c7      	bne.n	801633c <__sflush_r+0x34>
 80163ac:	682b      	ldr	r3, [r5, #0]
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d0c4      	beq.n	801633c <__sflush_r+0x34>
 80163b2:	2b1d      	cmp	r3, #29
 80163b4:	d001      	beq.n	80163ba <__sflush_r+0xb2>
 80163b6:	2b16      	cmp	r3, #22
 80163b8:	d101      	bne.n	80163be <__sflush_r+0xb6>
 80163ba:	602f      	str	r7, [r5, #0]
 80163bc:	e7b1      	b.n	8016322 <__sflush_r+0x1a>
 80163be:	89a3      	ldrh	r3, [r4, #12]
 80163c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80163c4:	81a3      	strh	r3, [r4, #12]
 80163c6:	e7ad      	b.n	8016324 <__sflush_r+0x1c>
 80163c8:	690f      	ldr	r7, [r1, #16]
 80163ca:	2f00      	cmp	r7, #0
 80163cc:	d0a9      	beq.n	8016322 <__sflush_r+0x1a>
 80163ce:	0793      	lsls	r3, r2, #30
 80163d0:	680e      	ldr	r6, [r1, #0]
 80163d2:	bf08      	it	eq
 80163d4:	694b      	ldreq	r3, [r1, #20]
 80163d6:	600f      	str	r7, [r1, #0]
 80163d8:	bf18      	it	ne
 80163da:	2300      	movne	r3, #0
 80163dc:	eba6 0807 	sub.w	r8, r6, r7
 80163e0:	608b      	str	r3, [r1, #8]
 80163e2:	f1b8 0f00 	cmp.w	r8, #0
 80163e6:	dd9c      	ble.n	8016322 <__sflush_r+0x1a>
 80163e8:	6a21      	ldr	r1, [r4, #32]
 80163ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80163ec:	4643      	mov	r3, r8
 80163ee:	463a      	mov	r2, r7
 80163f0:	4628      	mov	r0, r5
 80163f2:	47b0      	blx	r6
 80163f4:	2800      	cmp	r0, #0
 80163f6:	dc06      	bgt.n	8016406 <__sflush_r+0xfe>
 80163f8:	89a3      	ldrh	r3, [r4, #12]
 80163fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80163fe:	81a3      	strh	r3, [r4, #12]
 8016400:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016404:	e78e      	b.n	8016324 <__sflush_r+0x1c>
 8016406:	4407      	add	r7, r0
 8016408:	eba8 0800 	sub.w	r8, r8, r0
 801640c:	e7e9      	b.n	80163e2 <__sflush_r+0xda>
 801640e:	bf00      	nop
 8016410:	20400001 	.word	0x20400001

08016414 <_fflush_r>:
 8016414:	b538      	push	{r3, r4, r5, lr}
 8016416:	690b      	ldr	r3, [r1, #16]
 8016418:	4605      	mov	r5, r0
 801641a:	460c      	mov	r4, r1
 801641c:	b913      	cbnz	r3, 8016424 <_fflush_r+0x10>
 801641e:	2500      	movs	r5, #0
 8016420:	4628      	mov	r0, r5
 8016422:	bd38      	pop	{r3, r4, r5, pc}
 8016424:	b118      	cbz	r0, 801642e <_fflush_r+0x1a>
 8016426:	6983      	ldr	r3, [r0, #24]
 8016428:	b90b      	cbnz	r3, 801642e <_fflush_r+0x1a>
 801642a:	f000 f887 	bl	801653c <__sinit>
 801642e:	4b14      	ldr	r3, [pc, #80]	; (8016480 <_fflush_r+0x6c>)
 8016430:	429c      	cmp	r4, r3
 8016432:	d11b      	bne.n	801646c <_fflush_r+0x58>
 8016434:	686c      	ldr	r4, [r5, #4]
 8016436:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801643a:	2b00      	cmp	r3, #0
 801643c:	d0ef      	beq.n	801641e <_fflush_r+0xa>
 801643e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016440:	07d0      	lsls	r0, r2, #31
 8016442:	d404      	bmi.n	801644e <_fflush_r+0x3a>
 8016444:	0599      	lsls	r1, r3, #22
 8016446:	d402      	bmi.n	801644e <_fflush_r+0x3a>
 8016448:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801644a:	f7fe fcd8 	bl	8014dfe <__retarget_lock_acquire_recursive>
 801644e:	4628      	mov	r0, r5
 8016450:	4621      	mov	r1, r4
 8016452:	f7ff ff59 	bl	8016308 <__sflush_r>
 8016456:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016458:	07da      	lsls	r2, r3, #31
 801645a:	4605      	mov	r5, r0
 801645c:	d4e0      	bmi.n	8016420 <_fflush_r+0xc>
 801645e:	89a3      	ldrh	r3, [r4, #12]
 8016460:	059b      	lsls	r3, r3, #22
 8016462:	d4dd      	bmi.n	8016420 <_fflush_r+0xc>
 8016464:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016466:	f7fe fccb 	bl	8014e00 <__retarget_lock_release_recursive>
 801646a:	e7d9      	b.n	8016420 <_fflush_r+0xc>
 801646c:	4b05      	ldr	r3, [pc, #20]	; (8016484 <_fflush_r+0x70>)
 801646e:	429c      	cmp	r4, r3
 8016470:	d101      	bne.n	8016476 <_fflush_r+0x62>
 8016472:	68ac      	ldr	r4, [r5, #8]
 8016474:	e7df      	b.n	8016436 <_fflush_r+0x22>
 8016476:	4b04      	ldr	r3, [pc, #16]	; (8016488 <_fflush_r+0x74>)
 8016478:	429c      	cmp	r4, r3
 801647a:	bf08      	it	eq
 801647c:	68ec      	ldreq	r4, [r5, #12]
 801647e:	e7da      	b.n	8016436 <_fflush_r+0x22>
 8016480:	08018704 	.word	0x08018704
 8016484:	08018724 	.word	0x08018724
 8016488:	080186e4 	.word	0x080186e4

0801648c <std>:
 801648c:	2300      	movs	r3, #0
 801648e:	b510      	push	{r4, lr}
 8016490:	4604      	mov	r4, r0
 8016492:	e9c0 3300 	strd	r3, r3, [r0]
 8016496:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801649a:	6083      	str	r3, [r0, #8]
 801649c:	8181      	strh	r1, [r0, #12]
 801649e:	6643      	str	r3, [r0, #100]	; 0x64
 80164a0:	81c2      	strh	r2, [r0, #14]
 80164a2:	6183      	str	r3, [r0, #24]
 80164a4:	4619      	mov	r1, r3
 80164a6:	2208      	movs	r2, #8
 80164a8:	305c      	adds	r0, #92	; 0x5c
 80164aa:	f7fb fed9 	bl	8012260 <memset>
 80164ae:	4b05      	ldr	r3, [pc, #20]	; (80164c4 <std+0x38>)
 80164b0:	6263      	str	r3, [r4, #36]	; 0x24
 80164b2:	4b05      	ldr	r3, [pc, #20]	; (80164c8 <std+0x3c>)
 80164b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80164b6:	4b05      	ldr	r3, [pc, #20]	; (80164cc <std+0x40>)
 80164b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80164ba:	4b05      	ldr	r3, [pc, #20]	; (80164d0 <std+0x44>)
 80164bc:	6224      	str	r4, [r4, #32]
 80164be:	6323      	str	r3, [r4, #48]	; 0x30
 80164c0:	bd10      	pop	{r4, pc}
 80164c2:	bf00      	nop
 80164c4:	08015c91 	.word	0x08015c91
 80164c8:	08015cb3 	.word	0x08015cb3
 80164cc:	08015ceb 	.word	0x08015ceb
 80164d0:	08015d0f 	.word	0x08015d0f

080164d4 <_cleanup_r>:
 80164d4:	4901      	ldr	r1, [pc, #4]	; (80164dc <_cleanup_r+0x8>)
 80164d6:	f000 b8af 	b.w	8016638 <_fwalk_reent>
 80164da:	bf00      	nop
 80164dc:	08016415 	.word	0x08016415

080164e0 <__sfmoreglue>:
 80164e0:	b570      	push	{r4, r5, r6, lr}
 80164e2:	2268      	movs	r2, #104	; 0x68
 80164e4:	1e4d      	subs	r5, r1, #1
 80164e6:	4355      	muls	r5, r2
 80164e8:	460e      	mov	r6, r1
 80164ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80164ee:	f7ff f9e7 	bl	80158c0 <_malloc_r>
 80164f2:	4604      	mov	r4, r0
 80164f4:	b140      	cbz	r0, 8016508 <__sfmoreglue+0x28>
 80164f6:	2100      	movs	r1, #0
 80164f8:	e9c0 1600 	strd	r1, r6, [r0]
 80164fc:	300c      	adds	r0, #12
 80164fe:	60a0      	str	r0, [r4, #8]
 8016500:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016504:	f7fb feac 	bl	8012260 <memset>
 8016508:	4620      	mov	r0, r4
 801650a:	bd70      	pop	{r4, r5, r6, pc}

0801650c <__sfp_lock_acquire>:
 801650c:	4801      	ldr	r0, [pc, #4]	; (8016514 <__sfp_lock_acquire+0x8>)
 801650e:	f7fe bc76 	b.w	8014dfe <__retarget_lock_acquire_recursive>
 8016512:	bf00      	nop
 8016514:	2000422d 	.word	0x2000422d

08016518 <__sfp_lock_release>:
 8016518:	4801      	ldr	r0, [pc, #4]	; (8016520 <__sfp_lock_release+0x8>)
 801651a:	f7fe bc71 	b.w	8014e00 <__retarget_lock_release_recursive>
 801651e:	bf00      	nop
 8016520:	2000422d 	.word	0x2000422d

08016524 <__sinit_lock_acquire>:
 8016524:	4801      	ldr	r0, [pc, #4]	; (801652c <__sinit_lock_acquire+0x8>)
 8016526:	f7fe bc6a 	b.w	8014dfe <__retarget_lock_acquire_recursive>
 801652a:	bf00      	nop
 801652c:	2000422e 	.word	0x2000422e

08016530 <__sinit_lock_release>:
 8016530:	4801      	ldr	r0, [pc, #4]	; (8016538 <__sinit_lock_release+0x8>)
 8016532:	f7fe bc65 	b.w	8014e00 <__retarget_lock_release_recursive>
 8016536:	bf00      	nop
 8016538:	2000422e 	.word	0x2000422e

0801653c <__sinit>:
 801653c:	b510      	push	{r4, lr}
 801653e:	4604      	mov	r4, r0
 8016540:	f7ff fff0 	bl	8016524 <__sinit_lock_acquire>
 8016544:	69a3      	ldr	r3, [r4, #24]
 8016546:	b11b      	cbz	r3, 8016550 <__sinit+0x14>
 8016548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801654c:	f7ff bff0 	b.w	8016530 <__sinit_lock_release>
 8016550:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016554:	6523      	str	r3, [r4, #80]	; 0x50
 8016556:	4b13      	ldr	r3, [pc, #76]	; (80165a4 <__sinit+0x68>)
 8016558:	4a13      	ldr	r2, [pc, #76]	; (80165a8 <__sinit+0x6c>)
 801655a:	681b      	ldr	r3, [r3, #0]
 801655c:	62a2      	str	r2, [r4, #40]	; 0x28
 801655e:	42a3      	cmp	r3, r4
 8016560:	bf04      	itt	eq
 8016562:	2301      	moveq	r3, #1
 8016564:	61a3      	streq	r3, [r4, #24]
 8016566:	4620      	mov	r0, r4
 8016568:	f000 f820 	bl	80165ac <__sfp>
 801656c:	6060      	str	r0, [r4, #4]
 801656e:	4620      	mov	r0, r4
 8016570:	f000 f81c 	bl	80165ac <__sfp>
 8016574:	60a0      	str	r0, [r4, #8]
 8016576:	4620      	mov	r0, r4
 8016578:	f000 f818 	bl	80165ac <__sfp>
 801657c:	2200      	movs	r2, #0
 801657e:	60e0      	str	r0, [r4, #12]
 8016580:	2104      	movs	r1, #4
 8016582:	6860      	ldr	r0, [r4, #4]
 8016584:	f7ff ff82 	bl	801648c <std>
 8016588:	68a0      	ldr	r0, [r4, #8]
 801658a:	2201      	movs	r2, #1
 801658c:	2109      	movs	r1, #9
 801658e:	f7ff ff7d 	bl	801648c <std>
 8016592:	68e0      	ldr	r0, [r4, #12]
 8016594:	2202      	movs	r2, #2
 8016596:	2112      	movs	r1, #18
 8016598:	f7ff ff78 	bl	801648c <std>
 801659c:	2301      	movs	r3, #1
 801659e:	61a3      	str	r3, [r4, #24]
 80165a0:	e7d2      	b.n	8016548 <__sinit+0xc>
 80165a2:	bf00      	nop
 80165a4:	080183a8 	.word	0x080183a8
 80165a8:	080164d5 	.word	0x080164d5

080165ac <__sfp>:
 80165ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165ae:	4607      	mov	r7, r0
 80165b0:	f7ff ffac 	bl	801650c <__sfp_lock_acquire>
 80165b4:	4b1e      	ldr	r3, [pc, #120]	; (8016630 <__sfp+0x84>)
 80165b6:	681e      	ldr	r6, [r3, #0]
 80165b8:	69b3      	ldr	r3, [r6, #24]
 80165ba:	b913      	cbnz	r3, 80165c2 <__sfp+0x16>
 80165bc:	4630      	mov	r0, r6
 80165be:	f7ff ffbd 	bl	801653c <__sinit>
 80165c2:	3648      	adds	r6, #72	; 0x48
 80165c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80165c8:	3b01      	subs	r3, #1
 80165ca:	d503      	bpl.n	80165d4 <__sfp+0x28>
 80165cc:	6833      	ldr	r3, [r6, #0]
 80165ce:	b30b      	cbz	r3, 8016614 <__sfp+0x68>
 80165d0:	6836      	ldr	r6, [r6, #0]
 80165d2:	e7f7      	b.n	80165c4 <__sfp+0x18>
 80165d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80165d8:	b9d5      	cbnz	r5, 8016610 <__sfp+0x64>
 80165da:	4b16      	ldr	r3, [pc, #88]	; (8016634 <__sfp+0x88>)
 80165dc:	60e3      	str	r3, [r4, #12]
 80165de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80165e2:	6665      	str	r5, [r4, #100]	; 0x64
 80165e4:	f7fe fc0a 	bl	8014dfc <__retarget_lock_init_recursive>
 80165e8:	f7ff ff96 	bl	8016518 <__sfp_lock_release>
 80165ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80165f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80165f4:	6025      	str	r5, [r4, #0]
 80165f6:	61a5      	str	r5, [r4, #24]
 80165f8:	2208      	movs	r2, #8
 80165fa:	4629      	mov	r1, r5
 80165fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016600:	f7fb fe2e 	bl	8012260 <memset>
 8016604:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016608:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801660c:	4620      	mov	r0, r4
 801660e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016610:	3468      	adds	r4, #104	; 0x68
 8016612:	e7d9      	b.n	80165c8 <__sfp+0x1c>
 8016614:	2104      	movs	r1, #4
 8016616:	4638      	mov	r0, r7
 8016618:	f7ff ff62 	bl	80164e0 <__sfmoreglue>
 801661c:	4604      	mov	r4, r0
 801661e:	6030      	str	r0, [r6, #0]
 8016620:	2800      	cmp	r0, #0
 8016622:	d1d5      	bne.n	80165d0 <__sfp+0x24>
 8016624:	f7ff ff78 	bl	8016518 <__sfp_lock_release>
 8016628:	230c      	movs	r3, #12
 801662a:	603b      	str	r3, [r7, #0]
 801662c:	e7ee      	b.n	801660c <__sfp+0x60>
 801662e:	bf00      	nop
 8016630:	080183a8 	.word	0x080183a8
 8016634:	ffff0001 	.word	0xffff0001

08016638 <_fwalk_reent>:
 8016638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801663c:	4606      	mov	r6, r0
 801663e:	4688      	mov	r8, r1
 8016640:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016644:	2700      	movs	r7, #0
 8016646:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801664a:	f1b9 0901 	subs.w	r9, r9, #1
 801664e:	d505      	bpl.n	801665c <_fwalk_reent+0x24>
 8016650:	6824      	ldr	r4, [r4, #0]
 8016652:	2c00      	cmp	r4, #0
 8016654:	d1f7      	bne.n	8016646 <_fwalk_reent+0xe>
 8016656:	4638      	mov	r0, r7
 8016658:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801665c:	89ab      	ldrh	r3, [r5, #12]
 801665e:	2b01      	cmp	r3, #1
 8016660:	d907      	bls.n	8016672 <_fwalk_reent+0x3a>
 8016662:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016666:	3301      	adds	r3, #1
 8016668:	d003      	beq.n	8016672 <_fwalk_reent+0x3a>
 801666a:	4629      	mov	r1, r5
 801666c:	4630      	mov	r0, r6
 801666e:	47c0      	blx	r8
 8016670:	4307      	orrs	r7, r0
 8016672:	3568      	adds	r5, #104	; 0x68
 8016674:	e7e9      	b.n	801664a <_fwalk_reent+0x12>

08016676 <__swhatbuf_r>:
 8016676:	b570      	push	{r4, r5, r6, lr}
 8016678:	460e      	mov	r6, r1
 801667a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801667e:	2900      	cmp	r1, #0
 8016680:	b096      	sub	sp, #88	; 0x58
 8016682:	4614      	mov	r4, r2
 8016684:	461d      	mov	r5, r3
 8016686:	da08      	bge.n	801669a <__swhatbuf_r+0x24>
 8016688:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801668c:	2200      	movs	r2, #0
 801668e:	602a      	str	r2, [r5, #0]
 8016690:	061a      	lsls	r2, r3, #24
 8016692:	d410      	bmi.n	80166b6 <__swhatbuf_r+0x40>
 8016694:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016698:	e00e      	b.n	80166b8 <__swhatbuf_r+0x42>
 801669a:	466a      	mov	r2, sp
 801669c:	f000 f89c 	bl	80167d8 <_fstat_r>
 80166a0:	2800      	cmp	r0, #0
 80166a2:	dbf1      	blt.n	8016688 <__swhatbuf_r+0x12>
 80166a4:	9a01      	ldr	r2, [sp, #4]
 80166a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80166aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80166ae:	425a      	negs	r2, r3
 80166b0:	415a      	adcs	r2, r3
 80166b2:	602a      	str	r2, [r5, #0]
 80166b4:	e7ee      	b.n	8016694 <__swhatbuf_r+0x1e>
 80166b6:	2340      	movs	r3, #64	; 0x40
 80166b8:	2000      	movs	r0, #0
 80166ba:	6023      	str	r3, [r4, #0]
 80166bc:	b016      	add	sp, #88	; 0x58
 80166be:	bd70      	pop	{r4, r5, r6, pc}

080166c0 <__smakebuf_r>:
 80166c0:	898b      	ldrh	r3, [r1, #12]
 80166c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80166c4:	079d      	lsls	r5, r3, #30
 80166c6:	4606      	mov	r6, r0
 80166c8:	460c      	mov	r4, r1
 80166ca:	d507      	bpl.n	80166dc <__smakebuf_r+0x1c>
 80166cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80166d0:	6023      	str	r3, [r4, #0]
 80166d2:	6123      	str	r3, [r4, #16]
 80166d4:	2301      	movs	r3, #1
 80166d6:	6163      	str	r3, [r4, #20]
 80166d8:	b002      	add	sp, #8
 80166da:	bd70      	pop	{r4, r5, r6, pc}
 80166dc:	ab01      	add	r3, sp, #4
 80166de:	466a      	mov	r2, sp
 80166e0:	f7ff ffc9 	bl	8016676 <__swhatbuf_r>
 80166e4:	9900      	ldr	r1, [sp, #0]
 80166e6:	4605      	mov	r5, r0
 80166e8:	4630      	mov	r0, r6
 80166ea:	f7ff f8e9 	bl	80158c0 <_malloc_r>
 80166ee:	b948      	cbnz	r0, 8016704 <__smakebuf_r+0x44>
 80166f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80166f4:	059a      	lsls	r2, r3, #22
 80166f6:	d4ef      	bmi.n	80166d8 <__smakebuf_r+0x18>
 80166f8:	f023 0303 	bic.w	r3, r3, #3
 80166fc:	f043 0302 	orr.w	r3, r3, #2
 8016700:	81a3      	strh	r3, [r4, #12]
 8016702:	e7e3      	b.n	80166cc <__smakebuf_r+0xc>
 8016704:	4b0d      	ldr	r3, [pc, #52]	; (801673c <__smakebuf_r+0x7c>)
 8016706:	62b3      	str	r3, [r6, #40]	; 0x28
 8016708:	89a3      	ldrh	r3, [r4, #12]
 801670a:	6020      	str	r0, [r4, #0]
 801670c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016710:	81a3      	strh	r3, [r4, #12]
 8016712:	9b00      	ldr	r3, [sp, #0]
 8016714:	6163      	str	r3, [r4, #20]
 8016716:	9b01      	ldr	r3, [sp, #4]
 8016718:	6120      	str	r0, [r4, #16]
 801671a:	b15b      	cbz	r3, 8016734 <__smakebuf_r+0x74>
 801671c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016720:	4630      	mov	r0, r6
 8016722:	f000 f86b 	bl	80167fc <_isatty_r>
 8016726:	b128      	cbz	r0, 8016734 <__smakebuf_r+0x74>
 8016728:	89a3      	ldrh	r3, [r4, #12]
 801672a:	f023 0303 	bic.w	r3, r3, #3
 801672e:	f043 0301 	orr.w	r3, r3, #1
 8016732:	81a3      	strh	r3, [r4, #12]
 8016734:	89a0      	ldrh	r0, [r4, #12]
 8016736:	4305      	orrs	r5, r0
 8016738:	81a5      	strh	r5, [r4, #12]
 801673a:	e7cd      	b.n	80166d8 <__smakebuf_r+0x18>
 801673c:	080164d5 	.word	0x080164d5

08016740 <_malloc_usable_size_r>:
 8016740:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016744:	1f18      	subs	r0, r3, #4
 8016746:	2b00      	cmp	r3, #0
 8016748:	bfbc      	itt	lt
 801674a:	580b      	ldrlt	r3, [r1, r0]
 801674c:	18c0      	addlt	r0, r0, r3
 801674e:	4770      	bx	lr

08016750 <_raise_r>:
 8016750:	291f      	cmp	r1, #31
 8016752:	b538      	push	{r3, r4, r5, lr}
 8016754:	4604      	mov	r4, r0
 8016756:	460d      	mov	r5, r1
 8016758:	d904      	bls.n	8016764 <_raise_r+0x14>
 801675a:	2316      	movs	r3, #22
 801675c:	6003      	str	r3, [r0, #0]
 801675e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016762:	bd38      	pop	{r3, r4, r5, pc}
 8016764:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016766:	b112      	cbz	r2, 801676e <_raise_r+0x1e>
 8016768:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801676c:	b94b      	cbnz	r3, 8016782 <_raise_r+0x32>
 801676e:	4620      	mov	r0, r4
 8016770:	f000 f830 	bl	80167d4 <_getpid_r>
 8016774:	462a      	mov	r2, r5
 8016776:	4601      	mov	r1, r0
 8016778:	4620      	mov	r0, r4
 801677a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801677e:	f000 b817 	b.w	80167b0 <_kill_r>
 8016782:	2b01      	cmp	r3, #1
 8016784:	d00a      	beq.n	801679c <_raise_r+0x4c>
 8016786:	1c59      	adds	r1, r3, #1
 8016788:	d103      	bne.n	8016792 <_raise_r+0x42>
 801678a:	2316      	movs	r3, #22
 801678c:	6003      	str	r3, [r0, #0]
 801678e:	2001      	movs	r0, #1
 8016790:	e7e7      	b.n	8016762 <_raise_r+0x12>
 8016792:	2400      	movs	r4, #0
 8016794:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016798:	4628      	mov	r0, r5
 801679a:	4798      	blx	r3
 801679c:	2000      	movs	r0, #0
 801679e:	e7e0      	b.n	8016762 <_raise_r+0x12>

080167a0 <raise>:
 80167a0:	4b02      	ldr	r3, [pc, #8]	; (80167ac <raise+0xc>)
 80167a2:	4601      	mov	r1, r0
 80167a4:	6818      	ldr	r0, [r3, #0]
 80167a6:	f7ff bfd3 	b.w	8016750 <_raise_r>
 80167aa:	bf00      	nop
 80167ac:	20000258 	.word	0x20000258

080167b0 <_kill_r>:
 80167b0:	b538      	push	{r3, r4, r5, lr}
 80167b2:	4d07      	ldr	r5, [pc, #28]	; (80167d0 <_kill_r+0x20>)
 80167b4:	2300      	movs	r3, #0
 80167b6:	4604      	mov	r4, r0
 80167b8:	4608      	mov	r0, r1
 80167ba:	4611      	mov	r1, r2
 80167bc:	602b      	str	r3, [r5, #0]
 80167be:	f7ef fca1 	bl	8006104 <_kill>
 80167c2:	1c43      	adds	r3, r0, #1
 80167c4:	d102      	bne.n	80167cc <_kill_r+0x1c>
 80167c6:	682b      	ldr	r3, [r5, #0]
 80167c8:	b103      	cbz	r3, 80167cc <_kill_r+0x1c>
 80167ca:	6023      	str	r3, [r4, #0]
 80167cc:	bd38      	pop	{r3, r4, r5, pc}
 80167ce:	bf00      	nop
 80167d0:	20004238 	.word	0x20004238

080167d4 <_getpid_r>:
 80167d4:	f7ef bc8e 	b.w	80060f4 <_getpid>

080167d8 <_fstat_r>:
 80167d8:	b538      	push	{r3, r4, r5, lr}
 80167da:	4d07      	ldr	r5, [pc, #28]	; (80167f8 <_fstat_r+0x20>)
 80167dc:	2300      	movs	r3, #0
 80167de:	4604      	mov	r4, r0
 80167e0:	4608      	mov	r0, r1
 80167e2:	4611      	mov	r1, r2
 80167e4:	602b      	str	r3, [r5, #0]
 80167e6:	f7ef fcec 	bl	80061c2 <_fstat>
 80167ea:	1c43      	adds	r3, r0, #1
 80167ec:	d102      	bne.n	80167f4 <_fstat_r+0x1c>
 80167ee:	682b      	ldr	r3, [r5, #0]
 80167f0:	b103      	cbz	r3, 80167f4 <_fstat_r+0x1c>
 80167f2:	6023      	str	r3, [r4, #0]
 80167f4:	bd38      	pop	{r3, r4, r5, pc}
 80167f6:	bf00      	nop
 80167f8:	20004238 	.word	0x20004238

080167fc <_isatty_r>:
 80167fc:	b538      	push	{r3, r4, r5, lr}
 80167fe:	4d06      	ldr	r5, [pc, #24]	; (8016818 <_isatty_r+0x1c>)
 8016800:	2300      	movs	r3, #0
 8016802:	4604      	mov	r4, r0
 8016804:	4608      	mov	r0, r1
 8016806:	602b      	str	r3, [r5, #0]
 8016808:	f7ef fceb 	bl	80061e2 <_isatty>
 801680c:	1c43      	adds	r3, r0, #1
 801680e:	d102      	bne.n	8016816 <_isatty_r+0x1a>
 8016810:	682b      	ldr	r3, [r5, #0]
 8016812:	b103      	cbz	r3, 8016816 <_isatty_r+0x1a>
 8016814:	6023      	str	r3, [r4, #0]
 8016816:	bd38      	pop	{r3, r4, r5, pc}
 8016818:	20004238 	.word	0x20004238

0801681c <_init>:
 801681c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801681e:	bf00      	nop
 8016820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016822:	bc08      	pop	{r3}
 8016824:	469e      	mov	lr, r3
 8016826:	4770      	bx	lr

08016828 <_fini>:
 8016828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801682a:	bf00      	nop
 801682c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801682e:	bc08      	pop	{r3}
 8016830:	469e      	mov	lr, r3
 8016832:	4770      	bx	lr
