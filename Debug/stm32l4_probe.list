
stm32l4_probe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015d14  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001cdc  08015ea8  08015ea8  00025ea8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017b84  08017b84  00030408  2**0
                  CONTENTS
  4 .ARM          00000008  08017b84  08017b84  00027b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017b8c  08017b8c  00030408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017b8c  08017b8c  00027b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017b90  08017b90  00027b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000408  20000000  08017b94  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003a78  20000408  08017f9c  00030408  2**3
                  ALLOC
 10 ._user_heap_stack 00001000  20003e80  08017f9c  00033e80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030408  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022659  00000000  00000000  00030438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000420d  00000000  00000000  00052a91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d98  00000000  00000000  00056ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c40  00000000  00000000  00058a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d320  00000000  00000000  0005a678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025aef  00000000  00000000  00087998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103c55  00000000  00000000  000ad487  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b10dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000944c  00000000  00000000  001b112c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000408 	.word	0x20000408
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015e8c 	.word	0x08015e8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000040c 	.word	0x2000040c
 80001cc:	08015e8c 	.word	0x08015e8c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ca6:	f000 b9f5 	b.w	8001094 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f883 	bl	8000dc4 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f876 	bl	8000dc4 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f865 	bl	8000dc4 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f857 	bl	8000dc4 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d3c:	f000 b9aa 	b.w	8001094 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f83c 	bl	8000dc4 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_d2lz>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	460d      	mov	r5, r1
 8000d62:	f7ff febb 	bl	8000adc <__aeabi_dcmplt>
 8000d66:	b928      	cbnz	r0, 8000d74 <__aeabi_d2lz+0x1c>
 8000d68:	4620      	mov	r0, r4
 8000d6a:	4629      	mov	r1, r5
 8000d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d70:	f000 b80a 	b.w	8000d88 <__aeabi_d2ulz>
 8000d74:	4620      	mov	r0, r4
 8000d76:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d7a:	f000 f805 	bl	8000d88 <__aeabi_d2ulz>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
 8000d86:	bf00      	nop

08000d88 <__aeabi_d2ulz>:
 8000d88:	b5d0      	push	{r4, r6, r7, lr}
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__aeabi_d2ulz+0x34>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4606      	mov	r6, r0
 8000d90:	460f      	mov	r7, r1
 8000d92:	f7ff fc31 	bl	80005f8 <__aeabi_dmul>
 8000d96:	f7ff ff07 	bl	8000ba8 <__aeabi_d2uiz>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	f7ff fbb2 	bl	8000504 <__aeabi_ui2d>
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <__aeabi_d2ulz+0x38>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f7ff fc28 	bl	80005f8 <__aeabi_dmul>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4630      	mov	r0, r6
 8000dae:	4639      	mov	r1, r7
 8000db0:	f7ff fa6a 	bl	8000288 <__aeabi_dsub>
 8000db4:	f7ff fef8 	bl	8000ba8 <__aeabi_d2uiz>
 8000db8:	4621      	mov	r1, r4
 8000dba:	bdd0      	pop	{r4, r6, r7, pc}
 8000dbc:	3df00000 	.word	0x3df00000
 8000dc0:	41f00000 	.word	0x41f00000

08000dc4 <__udivmoddi4>:
 8000dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc8:	9d08      	ldr	r5, [sp, #32]
 8000dca:	4604      	mov	r4, r0
 8000dcc:	468e      	mov	lr, r1
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d14d      	bne.n	8000e6e <__udivmoddi4+0xaa>
 8000dd2:	428a      	cmp	r2, r1
 8000dd4:	4694      	mov	ip, r2
 8000dd6:	d969      	bls.n	8000eac <__udivmoddi4+0xe8>
 8000dd8:	fab2 f282 	clz	r2, r2
 8000ddc:	b152      	cbz	r2, 8000df4 <__udivmoddi4+0x30>
 8000dde:	fa01 f302 	lsl.w	r3, r1, r2
 8000de2:	f1c2 0120 	rsb	r1, r2, #32
 8000de6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dea:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dee:	ea41 0e03 	orr.w	lr, r1, r3
 8000df2:	4094      	lsls	r4, r2
 8000df4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df8:	0c21      	lsrs	r1, r4, #16
 8000dfa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dfe:	fa1f f78c 	uxth.w	r7, ip
 8000e02:	fb08 e316 	mls	r3, r8, r6, lr
 8000e06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e0a:	fb06 f107 	mul.w	r1, r6, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x64>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000e1a:	f080 811f 	bcs.w	800105c <__udivmoddi4+0x298>
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	f240 811c 	bls.w	800105c <__udivmoddi4+0x298>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b2a4      	uxth	r4, r4
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e38:	fb00 f707 	mul.w	r7, r0, r7
 8000e3c:	42a7      	cmp	r7, r4
 8000e3e:	d90a      	bls.n	8000e56 <__udivmoddi4+0x92>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e48:	f080 810a 	bcs.w	8001060 <__udivmoddi4+0x29c>
 8000e4c:	42a7      	cmp	r7, r4
 8000e4e:	f240 8107 	bls.w	8001060 <__udivmoddi4+0x29c>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e5a:	1be4      	subs	r4, r4, r7
 8000e5c:	2600      	movs	r6, #0
 8000e5e:	b11d      	cbz	r5, 8000e68 <__udivmoddi4+0xa4>
 8000e60:	40d4      	lsrs	r4, r2
 8000e62:	2300      	movs	r3, #0
 8000e64:	e9c5 4300 	strd	r4, r3, [r5]
 8000e68:	4631      	mov	r1, r6
 8000e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d909      	bls.n	8000e86 <__udivmoddi4+0xc2>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	f000 80ef 	beq.w	8001056 <__udivmoddi4+0x292>
 8000e78:	2600      	movs	r6, #0
 8000e7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7e:	4630      	mov	r0, r6
 8000e80:	4631      	mov	r1, r6
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	fab3 f683 	clz	r6, r3
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d14a      	bne.n	8000f24 <__udivmoddi4+0x160>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d302      	bcc.n	8000e98 <__udivmoddi4+0xd4>
 8000e92:	4282      	cmp	r2, r0
 8000e94:	f200 80f9 	bhi.w	800108a <__udivmoddi4+0x2c6>
 8000e98:	1a84      	subs	r4, r0, r2
 8000e9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	469e      	mov	lr, r3
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d0e0      	beq.n	8000e68 <__udivmoddi4+0xa4>
 8000ea6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eaa:	e7dd      	b.n	8000e68 <__udivmoddi4+0xa4>
 8000eac:	b902      	cbnz	r2, 8000eb0 <__udivmoddi4+0xec>
 8000eae:	deff      	udf	#255	; 0xff
 8000eb0:	fab2 f282 	clz	r2, r2
 8000eb4:	2a00      	cmp	r2, #0
 8000eb6:	f040 8092 	bne.w	8000fde <__udivmoddi4+0x21a>
 8000eba:	eba1 010c 	sub.w	r1, r1, ip
 8000ebe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec2:	fa1f fe8c 	uxth.w	lr, ip
 8000ec6:	2601      	movs	r6, #1
 8000ec8:	0c20      	lsrs	r0, r4, #16
 8000eca:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ece:	fb07 1113 	mls	r1, r7, r3, r1
 8000ed2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed6:	fb0e f003 	mul.w	r0, lr, r3
 8000eda:	4288      	cmp	r0, r1
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x12c>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x12a>
 8000ee8:	4288      	cmp	r0, r1
 8000eea:	f200 80cb 	bhi.w	8001084 <__udivmoddi4+0x2c0>
 8000eee:	4643      	mov	r3, r8
 8000ef0:	1a09      	subs	r1, r1, r0
 8000ef2:	b2a4      	uxth	r4, r4
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1110 	mls	r1, r7, r0, r1
 8000efc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f00:	fb0e fe00 	mul.w	lr, lr, r0
 8000f04:	45a6      	cmp	lr, r4
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x156>
 8000f08:	eb1c 0404 	adds.w	r4, ip, r4
 8000f0c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f10:	d202      	bcs.n	8000f18 <__udivmoddi4+0x154>
 8000f12:	45a6      	cmp	lr, r4
 8000f14:	f200 80bb 	bhi.w	800108e <__udivmoddi4+0x2ca>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	eba4 040e 	sub.w	r4, r4, lr
 8000f1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f22:	e79c      	b.n	8000e5e <__udivmoddi4+0x9a>
 8000f24:	f1c6 0720 	rsb	r7, r6, #32
 8000f28:	40b3      	lsls	r3, r6
 8000f2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f32:	fa20 f407 	lsr.w	r4, r0, r7
 8000f36:	fa01 f306 	lsl.w	r3, r1, r6
 8000f3a:	431c      	orrs	r4, r3
 8000f3c:	40f9      	lsrs	r1, r7
 8000f3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f42:	fa00 f306 	lsl.w	r3, r0, r6
 8000f46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f4a:	0c20      	lsrs	r0, r4, #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fb09 1118 	mls	r1, r9, r8, r1
 8000f54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f58:	fb08 f00e 	mul.w	r0, r8, lr
 8000f5c:	4288      	cmp	r0, r1
 8000f5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f62:	d90b      	bls.n	8000f7c <__udivmoddi4+0x1b8>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f6c:	f080 8088 	bcs.w	8001080 <__udivmoddi4+0x2bc>
 8000f70:	4288      	cmp	r0, r1
 8000f72:	f240 8085 	bls.w	8001080 <__udivmoddi4+0x2bc>
 8000f76:	f1a8 0802 	sub.w	r8, r8, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1a09      	subs	r1, r1, r0
 8000f7e:	b2a4      	uxth	r4, r4
 8000f80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f84:	fb09 1110 	mls	r1, r9, r0, r1
 8000f88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f90:	458e      	cmp	lr, r1
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x1e2>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f9c:	d26c      	bcs.n	8001078 <__udivmoddi4+0x2b4>
 8000f9e:	458e      	cmp	lr, r1
 8000fa0:	d96a      	bls.n	8001078 <__udivmoddi4+0x2b4>
 8000fa2:	3802      	subs	r0, #2
 8000fa4:	4461      	add	r1, ip
 8000fa6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000faa:	fba0 9402 	umull	r9, r4, r0, r2
 8000fae:	eba1 010e 	sub.w	r1, r1, lr
 8000fb2:	42a1      	cmp	r1, r4
 8000fb4:	46c8      	mov	r8, r9
 8000fb6:	46a6      	mov	lr, r4
 8000fb8:	d356      	bcc.n	8001068 <__udivmoddi4+0x2a4>
 8000fba:	d053      	beq.n	8001064 <__udivmoddi4+0x2a0>
 8000fbc:	b15d      	cbz	r5, 8000fd6 <__udivmoddi4+0x212>
 8000fbe:	ebb3 0208 	subs.w	r2, r3, r8
 8000fc2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fc6:	fa01 f707 	lsl.w	r7, r1, r7
 8000fca:	fa22 f306 	lsr.w	r3, r2, r6
 8000fce:	40f1      	lsrs	r1, r6
 8000fd0:	431f      	orrs	r7, r3
 8000fd2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fd6:	2600      	movs	r6, #0
 8000fd8:	4631      	mov	r1, r6
 8000fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fde:	f1c2 0320 	rsb	r3, r2, #32
 8000fe2:	40d8      	lsrs	r0, r3
 8000fe4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fe8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fec:	4091      	lsls	r1, r2
 8000fee:	4301      	orrs	r1, r0
 8000ff0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ff4:	fa1f fe8c 	uxth.w	lr, ip
 8000ff8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ffc:	fb07 3610 	mls	r6, r7, r0, r3
 8001000:	0c0b      	lsrs	r3, r1, #16
 8001002:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001006:	fb00 f60e 	mul.w	r6, r0, lr
 800100a:	429e      	cmp	r6, r3
 800100c:	fa04 f402 	lsl.w	r4, r4, r2
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x260>
 8001012:	eb1c 0303 	adds.w	r3, ip, r3
 8001016:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800101a:	d22f      	bcs.n	800107c <__udivmoddi4+0x2b8>
 800101c:	429e      	cmp	r6, r3
 800101e:	d92d      	bls.n	800107c <__udivmoddi4+0x2b8>
 8001020:	3802      	subs	r0, #2
 8001022:	4463      	add	r3, ip
 8001024:	1b9b      	subs	r3, r3, r6
 8001026:	b289      	uxth	r1, r1
 8001028:	fbb3 f6f7 	udiv	r6, r3, r7
 800102c:	fb07 3316 	mls	r3, r7, r6, r3
 8001030:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001034:	fb06 f30e 	mul.w	r3, r6, lr
 8001038:	428b      	cmp	r3, r1
 800103a:	d908      	bls.n	800104e <__udivmoddi4+0x28a>
 800103c:	eb1c 0101 	adds.w	r1, ip, r1
 8001040:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8001044:	d216      	bcs.n	8001074 <__udivmoddi4+0x2b0>
 8001046:	428b      	cmp	r3, r1
 8001048:	d914      	bls.n	8001074 <__udivmoddi4+0x2b0>
 800104a:	3e02      	subs	r6, #2
 800104c:	4461      	add	r1, ip
 800104e:	1ac9      	subs	r1, r1, r3
 8001050:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001054:	e738      	b.n	8000ec8 <__udivmoddi4+0x104>
 8001056:	462e      	mov	r6, r5
 8001058:	4628      	mov	r0, r5
 800105a:	e705      	b.n	8000e68 <__udivmoddi4+0xa4>
 800105c:	4606      	mov	r6, r0
 800105e:	e6e3      	b.n	8000e28 <__udivmoddi4+0x64>
 8001060:	4618      	mov	r0, r3
 8001062:	e6f8      	b.n	8000e56 <__udivmoddi4+0x92>
 8001064:	454b      	cmp	r3, r9
 8001066:	d2a9      	bcs.n	8000fbc <__udivmoddi4+0x1f8>
 8001068:	ebb9 0802 	subs.w	r8, r9, r2
 800106c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001070:	3801      	subs	r0, #1
 8001072:	e7a3      	b.n	8000fbc <__udivmoddi4+0x1f8>
 8001074:	4646      	mov	r6, r8
 8001076:	e7ea      	b.n	800104e <__udivmoddi4+0x28a>
 8001078:	4620      	mov	r0, r4
 800107a:	e794      	b.n	8000fa6 <__udivmoddi4+0x1e2>
 800107c:	4640      	mov	r0, r8
 800107e:	e7d1      	b.n	8001024 <__udivmoddi4+0x260>
 8001080:	46d0      	mov	r8, sl
 8001082:	e77b      	b.n	8000f7c <__udivmoddi4+0x1b8>
 8001084:	3b02      	subs	r3, #2
 8001086:	4461      	add	r1, ip
 8001088:	e732      	b.n	8000ef0 <__udivmoddi4+0x12c>
 800108a:	4630      	mov	r0, r6
 800108c:	e709      	b.n	8000ea2 <__udivmoddi4+0xde>
 800108e:	4464      	add	r4, ip
 8001090:	3802      	subs	r0, #2
 8001092:	e742      	b.n	8000f1a <__udivmoddi4+0x156>

08001094 <__aeabi_idiv0>:
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <ST7565_Select>:
uint8_t lcdRdy = 1;

//------------------------------------------------------------------------------

inline static void ST7565_Select()
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
#ifdef CS_PORT
	//-- если захотим переделать под HAL ------------------
	#ifdef ST7565_SPI_HAL
		//HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
		CS_GPIO_Port->BSRR = ( CS_Pin << 16 );
 800109c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80010a4:	619a      	str	r2, [r3, #24]
	#ifdef ST7565_SPI_CMSIS
		CS_GPIO_Port->BSRR = ( CS_Pin << 16 );
	#endif
	//-----------------------------------------------------
#endif
}
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <ST7565_Unselect>:

//------------------------------------------------------------------------------

inline static void ST7565_Unselect()
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
#ifdef CS_PORT
	//-- если захотим переделать под HAL ------------------
	#ifdef ST7565_SPI_HAL
		//HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
		CS_GPIO_Port->BSRR = CS_Pin;
 80010b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010b8:	2210      	movs	r2, #16
 80010ba:	619a      	str	r2, [r3, #24]
	#ifdef ST7565_SPI_CMSIS
		CS_GPIO_Port->BSRR = CS_Pin;
	#endif
	//-----------------------------------------------------
#endif
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
	...

080010c8 <ST7565_Reset>:
	* @brief	 ( описание ):  аппарвтный сброс дисплея
	* @param	( параметры ):	
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Reset()
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	RES_GPIO_Port->BSRR = (RES_Pin << 16);//HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_RESET );
 80010cc:	4b07      	ldr	r3, [pc, #28]	; (80010ec <ST7565_Reset+0x24>)
 80010ce:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80010d2:	619a      	str	r2, [r3, #24]
	HAL_Delay(1);
 80010d4:	2001      	movs	r0, #1
 80010d6:	f005 faf9 	bl	80066cc <HAL_Delay>
	
	RES_GPIO_Port->BSRR = RES_Pin;//HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_SET );
 80010da:	4b04      	ldr	r3, [pc, #16]	; (80010ec <ST7565_Reset+0x24>)
 80010dc:	2204      	movs	r2, #4
 80010de:	619a      	str	r2, [r3, #24]
	HAL_Delay(1);
 80010e0:	2001      	movs	r0, #1
 80010e2:	f005 faf3 	bl	80066cc <HAL_Delay>
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	48000c00 	.word	0x48000c00

080010f0 <ST7565_w_dats>:
//--------------------------------------------------------------------------------
#ifdef SET_NEW_PROC
inline static void ST7565_w_dats(uint8_t *Data, uint16_t len)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	807b      	strh	r3, [r7, #2]
	DC_GPIO_Port->BSRR = DC_Pin;//HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80010fc:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <ST7565_w_dats+0x84>)
 80010fe:	2220      	movs	r2, #32
 8001100:	619a      	str	r2, [r3, #24]

	if (with_dma) {
 8001102:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <ST7565_w_dats+0x88>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d018      	beq.n	800113c <ST7565_w_dats+0x4c>
		lcdRdy = 0;
 800110a:	4b1c      	ldr	r3, [pc, #112]	; (800117c <ST7565_w_dats+0x8c>)
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]
		if (HAL_SPI_Transmit_DMA(&ST7565_SPI_HAL, Data, len) != HAL_OK) devError |= devLCD;
 8001110:	887b      	ldrh	r3, [r7, #2]
 8001112:	461a      	mov	r2, r3
 8001114:	6879      	ldr	r1, [r7, #4]
 8001116:	481a      	ldr	r0, [pc, #104]	; (8001180 <ST7565_w_dats+0x90>)
 8001118:	f00a f8d8 	bl	800b2cc <HAL_SPI_Transmit_DMA>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d006      	beq.n	8001130 <ST7565_w_dats+0x40>
 8001122:	4b18      	ldr	r3, [pc, #96]	; (8001184 <ST7565_w_dats+0x94>)
 8001124:	881b      	ldrh	r3, [r3, #0]
 8001126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800112a:	b29a      	uxth	r2, r3
 800112c:	4b15      	ldr	r3, [pc, #84]	; (8001184 <ST7565_w_dats+0x94>)
 800112e:	801a      	strh	r2, [r3, #0]
		while (!lcdRdy) {};
 8001130:	bf00      	nop
 8001132:	4b12      	ldr	r3, [pc, #72]	; (800117c <ST7565_w_dats+0x8c>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d0fb      	beq.n	8001132 <ST7565_w_dats+0x42>
	} else {
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Data, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
	}
}
 800113a:	e017      	b.n	800116c <ST7565_w_dats+0x7c>
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Data, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
 800113c:	887a      	ldrh	r2, [r7, #2]
 800113e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	480e      	ldr	r0, [pc, #56]	; (8001180 <ST7565_w_dats+0x90>)
 8001146:	f009 fc10 	bl	800a96a <HAL_SPI_Transmit>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d006      	beq.n	800115e <ST7565_w_dats+0x6e>
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <ST7565_w_dats+0x94>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001158:	b29a      	uxth	r2, r3
 800115a:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <ST7565_w_dats+0x94>)
 800115c:	801a      	strh	r2, [r3, #0]
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
 800115e:	bf00      	nop
 8001160:	4807      	ldr	r0, [pc, #28]	; (8001180 <ST7565_w_dats+0x90>)
 8001162:	f00a fc51 	bl	800ba08 <HAL_SPI_GetState>
 8001166:	4603      	mov	r3, r0
 8001168:	2b01      	cmp	r3, #1
 800116a:	d1f9      	bne.n	8001160 <ST7565_w_dats+0x70>
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	48000400 	.word	0x48000400
 8001178:	20000824 	.word	0x20000824
 800117c:	20000000 	.word	0x20000000
 8001180:	20000930 	.word	0x20000930
 8001184:	20001468 	.word	0x20001468

08001188 <ST7565_w_cmds>:
//
inline static void ST7565_w_cmds(uint8_t *Command, uint16_t len)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	807b      	strh	r3, [r7, #2]
	DC_GPIO_Port->BSRR = (DC_Pin << 16);//HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8001194:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <ST7565_w_cmds+0x88>)
 8001196:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800119a:	619a      	str	r2, [r3, #24]

	if (with_dma) {
 800119c:	4b1d      	ldr	r3, [pc, #116]	; (8001214 <ST7565_w_cmds+0x8c>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d018      	beq.n	80011d6 <ST7565_w_cmds+0x4e>
		lcdRdy = 0;
 80011a4:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <ST7565_w_cmds+0x90>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	701a      	strb	r2, [r3, #0]
		if (HAL_SPI_Transmit_DMA(&ST7565_SPI_HAL, Command, len) != HAL_OK) devError |= devLCD;
 80011aa:	887b      	ldrh	r3, [r7, #2]
 80011ac:	461a      	mov	r2, r3
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	481a      	ldr	r0, [pc, #104]	; (800121c <ST7565_w_cmds+0x94>)
 80011b2:	f00a f88b 	bl	800b2cc <HAL_SPI_Transmit_DMA>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d006      	beq.n	80011ca <ST7565_w_cmds+0x42>
 80011bc:	4b18      	ldr	r3, [pc, #96]	; (8001220 <ST7565_w_cmds+0x98>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	4b16      	ldr	r3, [pc, #88]	; (8001220 <ST7565_w_cmds+0x98>)
 80011c8:	801a      	strh	r2, [r3, #0]
		while (!lcdRdy) {};
 80011ca:	bf00      	nop
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <ST7565_w_cmds+0x90>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0fb      	beq.n	80011cc <ST7565_w_cmds+0x44>
	} else {
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Command, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
	}
}
 80011d4:	e017      	b.n	8001206 <ST7565_w_cmds+0x7e>
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Command, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
 80011d6:	887a      	ldrh	r2, [r7, #2]
 80011d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011dc:	6879      	ldr	r1, [r7, #4]
 80011de:	480f      	ldr	r0, [pc, #60]	; (800121c <ST7565_w_cmds+0x94>)
 80011e0:	f009 fbc3 	bl	800a96a <HAL_SPI_Transmit>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d006      	beq.n	80011f8 <ST7565_w_cmds+0x70>
 80011ea:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <ST7565_w_cmds+0x98>)
 80011ec:	881b      	ldrh	r3, [r3, #0]
 80011ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <ST7565_w_cmds+0x98>)
 80011f6:	801a      	strh	r2, [r3, #0]
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
 80011f8:	bf00      	nop
 80011fa:	4808      	ldr	r0, [pc, #32]	; (800121c <ST7565_w_cmds+0x94>)
 80011fc:	f00a fc04 	bl	800ba08 <HAL_SPI_GetState>
 8001200:	4603      	mov	r3, r0
 8001202:	2b01      	cmp	r3, #1
 8001204:	d1f9      	bne.n	80011fa <ST7565_w_cmds+0x72>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	48000400 	.word	0x48000400
 8001214:	20000824 	.word	0x20000824
 8001218:	20000000 	.word	0x20000000
 800121c:	20000930 	.word	0x20000930
 8001220:	20001468 	.word	0x20001468

08001224 <ST7565_SetX>:
inline static void ST7565_SetX(uint8_t x)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
	uint8_t bytes[] = { ((x & 0xf0) >> 4) | 0x10, x & 0x0f };
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	091b      	lsrs	r3, r3, #4
 8001232:	b2db      	uxtb	r3, r3
 8001234:	f043 0310 	orr.w	r3, r3, #16
 8001238:	b2db      	uxtb	r3, r3
 800123a:	733b      	strb	r3, [r7, #12]
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	b2db      	uxtb	r3, r3
 8001244:	737b      	strb	r3, [r7, #13]
	ST7565_w_cmds(bytes, 2);
 8001246:	f107 030c 	add.w	r3, r7, #12
 800124a:	2102      	movs	r1, #2
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff9b 	bl	8001188 <ST7565_w_cmds>
}
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <ST7565_SetY>:
//
inline static void ST7565_SetY(uint8_t y)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b084      	sub	sp, #16
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	71fb      	strb	r3, [r7, #7]
	uint8_t byte = (y & 0x07) | 0xB0;
 8001264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001268:	f003 0307 	and.w	r3, r3, #7
 800126c:	b25b      	sxtb	r3, r3
 800126e:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8001272:	b25b      	sxtb	r3, r3
 8001274:	b2db      	uxtb	r3, r3
 8001276:	73fb      	strb	r3, [r7, #15]
	ST7565_w_cmds(&byte, 1);
 8001278:	f107 030f 	add.w	r3, r7, #15
 800127c:	2101      	movs	r1, #1
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff ff82 	bl	8001188 <ST7565_w_cmds>
}
 8001284:	bf00      	nop
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <ST7565_Display_fill>:
								( данные отправляются сразу на дисплей и записываются в буфер кадра )
								Функцию ST7565_Update() вызывать не нужно
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Display_fill(uint8_t fill)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
uint8_t page;//, column;
	
	memset(ST7565_buffer, fill, (SCREEN_WIDTH * SCREEN_HEIGHT / 8));	// отчистка памяти заполняем массив значением 0x00
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800129c:	4619      	mov	r1, r3
 800129e:	4814      	ldr	r0, [pc, #80]	; (80012f0 <ST7565_Display_fill+0x64>)
 80012a0:	f010 fb38 	bl	8011914 <memset>
	
	ST7565_Select();
 80012a4:	f7ff fef8 	bl	8001098 <ST7565_Select>
#ifdef SET_NEW_PROC
	uint8_t dta[] = {0, 0x10, 0};
 80012a8:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <ST7565_Display_fill+0x68>)
 80012aa:	f107 030c 	add.w	r3, r7, #12
 80012ae:	6812      	ldr	r2, [r2, #0]
 80012b0:	4611      	mov	r1, r2
 80012b2:	8019      	strh	r1, [r3, #0]
 80012b4:	3302      	adds	r3, #2
 80012b6:	0c12      	lsrs	r2, r2, #16
 80012b8:	701a      	strb	r2, [r3, #0]
#endif
	for (page = 0xB7; page >= 0xB0; page-- ) {
 80012ba:	23b7      	movs	r3, #183	; 0xb7
 80012bc:	73fb      	strb	r3, [r7, #15]
 80012be:	e00e      	b.n	80012de <ST7565_Display_fill+0x52>
		ST7565_w_cmd(page);  //set page address
		ST7565_w_cmd(0x10);  //set Column address MSB   
		ST7565_w_cmd(0x00);  //set column address LSB
		for (column = 0; column < 131; column++) ST7565_w_dat(fill);
#else
		dta[0] = page;
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	733b      	strb	r3, [r7, #12]
		ST7565_w_cmds(dta, sizeof(dta));
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	2103      	movs	r1, #3
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff ff5c 	bl	8001188 <ST7565_w_cmds>
		ST7565_w_dats(ST7565_buffer, 131);
 80012d0:	2183      	movs	r1, #131	; 0x83
 80012d2:	4807      	ldr	r0, [pc, #28]	; (80012f0 <ST7565_Display_fill+0x64>)
 80012d4:	f7ff ff0c 	bl	80010f0 <ST7565_w_dats>
	for (page = 0xB7; page >= 0xB0; page-- ) {
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	3b01      	subs	r3, #1
 80012dc:	73fb      	strb	r3, [r7, #15]
 80012de:	7bfb      	ldrb	r3, [r7, #15]
 80012e0:	2baf      	cmp	r3, #175	; 0xaf
 80012e2:	d8ed      	bhi.n	80012c0 <ST7565_Display_fill+0x34>
#endif
    }
		
	ST7565_Unselect();
 80012e4:	f7ff fee4 	bl	80010b0 <ST7565_Unselect>
}
 80012e8:	bf00      	nop
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000424 	.word	0x20000424
 80012f4:	08015ea8 	.word	0x08015ea8

080012f8 <ST7565_Init>:
	* @brief	 ( описание ):  инициализация дисплея ( при другой инициализации можно поменять параметры внутри функции )
	* @param	( параметры ):	
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Init()
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
	ST7565_Select();
 80012fe:	f7ff fecb 	bl	8001098 <ST7565_Select>
	ST7565_w_cmd(CMD_DISPLAY_ON);    		//Display on
	// Инвертирование экрана CMD_SET_DISP_NORMAL - OFF    CMD_SET_DISP_REVERSE - ON
	ST7565_w_cmd(CMD_SET_DISP_NORMAL);
	//HAL_Delay(1);//1
#else
	uint8_t dta[] = {
 8001302:	4a09      	ldr	r2, [pc, #36]	; (8001328 <ST7565_Init+0x30>)
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	ca07      	ldmia	r2, {r0, r1, r2}
 8001308:	c303      	stmia	r3!, {r0, r1}
 800130a:	801a      	strh	r2, [r3, #0]
	};
	#if defined (SCREEN_ORIENTATION_180)
		dta[1] = CMD_SET_ADC_REVERSE;    	//ADC selection(SEG0->SEG128)  CMD_SET_ADC_NORMAL горизонтально «нормальная» (не перевернутая)
		dta[2] = CMD_SET_COM_NORMAL;    		//SHL selection(COM0->COM64)   CMD_SET_COM_REVERSE вертикально «перевернутая» (дополняет команду выше)
	#endif
	ST7565_w_cmds(dta, sizeof(dta));
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	210a      	movs	r1, #10
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff39 	bl	8001188 <ST7565_w_cmds>
#endif
	
	ST7565_Display_fill(0);
 8001316:	2000      	movs	r0, #0
 8001318:	f7ff ffb8 	bl	800128c <ST7565_Display_fill>
	
	ST7565_Unselect();
 800131c:	f7ff fec8 	bl	80010b0 <ST7565_Unselect>
   
}
 8001320:	bf00      	nop
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	08015eac 	.word	0x08015eac

0800132c <ST7565_CMD_DISPLAY>:
//--------------------------------------------------------------------------------
void ST7565_CMD_DISPLAY(uint8_t byte)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
#ifdef SET_NEW_PROC
	ST7565_w_cmds(&byte, 1);
 8001336:	1dfb      	adds	r3, r7, #7
 8001338:	2101      	movs	r1, #1
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff ff24 	bl	8001188 <ST7565_w_cmds>
#else
	ST7565_w_cmd(byte);
#endif
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <ST7565_Draw_pixel>:
	* @param	( параметры ):	координата X(0 - 127) и координата Y(0 - 63)  color 1 or 0
	* @return  ( возвращает ):	
*******************************************************************************/
// X(0 - 127)  Y(0 - 63)
void ST7565_Draw_pixel(int16_t x, int16_t y, uint8_t color)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	80fb      	strh	r3, [r7, #6]
 8001352:	460b      	mov	r3, r1
 8001354:	80bb      	strh	r3, [r7, #4]
 8001356:	4613      	mov	r3, r2
 8001358:	70fb      	strb	r3, [r7, #3]
    if (x >= SCREEN_WIDTH || x < 0 || y >= SCREEN_HEIGHT || y < 0) return;
 800135a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800135e:	2b7f      	cmp	r3, #127	; 0x7f
 8001360:	dc4c      	bgt.n	80013fc <ST7565_Draw_pixel+0xb4>
 8001362:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001366:	2b00      	cmp	r3, #0
 8001368:	db48      	blt.n	80013fc <ST7565_Draw_pixel+0xb4>
 800136a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800136e:	2b3f      	cmp	r3, #63	; 0x3f
 8001370:	dc44      	bgt.n	80013fc <ST7565_Draw_pixel+0xb4>
 8001372:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	db40      	blt.n	80013fc <ST7565_Draw_pixel+0xb4>

    uint16_t array_pos = x + ((y >> 3) * SCREEN_WIDTH );
 800137a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800137e:	10db      	asrs	r3, r3, #3
 8001380:	b21b      	sxth	r3, r3
 8001382:	b29b      	uxth	r3, r3
 8001384:	01db      	lsls	r3, r3, #7
 8001386:	b29a      	uxth	r2, r3
 8001388:	88fb      	ldrh	r3, [r7, #6]
 800138a:	4413      	add	r3, r2
 800138c:	81fb      	strh	r3, [r7, #14]

    if (color) {
 800138e:	78fb      	ldrb	r3, [r7, #3]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d018      	beq.n	80013c6 <ST7565_Draw_pixel+0x7e>
        ST7565_buffer[array_pos] |= 1 << (y % 8);
 8001394:	89fb      	ldrh	r3, [r7, #14]
 8001396:	4a1c      	ldr	r2, [pc, #112]	; (8001408 <ST7565_Draw_pixel+0xc0>)
 8001398:	5cd3      	ldrb	r3, [r2, r3]
 800139a:	b25a      	sxtb	r2, r3
 800139c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013a0:	4259      	negs	r1, r3
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	f001 0107 	and.w	r1, r1, #7
 80013aa:	bf58      	it	pl
 80013ac:	424b      	negpl	r3, r1
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	4619      	mov	r1, r3
 80013b2:	2301      	movs	r3, #1
 80013b4:	408b      	lsls	r3, r1
 80013b6:	b25b      	sxtb	r3, r3
 80013b8:	4313      	orrs	r3, r2
 80013ba:	b25a      	sxtb	r2, r3
 80013bc:	89fb      	ldrh	r3, [r7, #14]
 80013be:	b2d1      	uxtb	r1, r2
 80013c0:	4a11      	ldr	r2, [pc, #68]	; (8001408 <ST7565_Draw_pixel+0xc0>)
 80013c2:	54d1      	strb	r1, [r2, r3]
 80013c4:	e01b      	b.n	80013fe <ST7565_Draw_pixel+0xb6>
    } else {
        ST7565_buffer[array_pos] &= 0xFF ^ 1 << (y % 8);
 80013c6:	89fb      	ldrh	r3, [r7, #14]
 80013c8:	4a0f      	ldr	r2, [pc, #60]	; (8001408 <ST7565_Draw_pixel+0xc0>)
 80013ca:	5cd3      	ldrb	r3, [r2, r3]
 80013cc:	b25a      	sxtb	r2, r3
 80013ce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013d2:	4259      	negs	r1, r3
 80013d4:	f003 0307 	and.w	r3, r3, #7
 80013d8:	f001 0107 	and.w	r1, r1, #7
 80013dc:	bf58      	it	pl
 80013de:	424b      	negpl	r3, r1
 80013e0:	b21b      	sxth	r3, r3
 80013e2:	4619      	mov	r1, r3
 80013e4:	2301      	movs	r3, #1
 80013e6:	408b      	lsls	r3, r1
 80013e8:	b25b      	sxtb	r3, r3
 80013ea:	43db      	mvns	r3, r3
 80013ec:	b25b      	sxtb	r3, r3
 80013ee:	4013      	ands	r3, r2
 80013f0:	b25a      	sxtb	r2, r3
 80013f2:	89fb      	ldrh	r3, [r7, #14]
 80013f4:	b2d1      	uxtb	r1, r2
 80013f6:	4a04      	ldr	r2, [pc, #16]	; (8001408 <ST7565_Draw_pixel+0xc0>)
 80013f8:	54d1      	strb	r1, [r2, r3]
 80013fa:	e000      	b.n	80013fe <ST7565_Draw_pixel+0xb6>
    if (x >= SCREEN_WIDTH || x < 0 || y >= SCREEN_HEIGHT || y < 0) return;
 80013fc:	bf00      	nop
    }
}
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	20000424 	.word	0x20000424

0800140c <ST7565_Update>:
	* @brief	 ( описание ):  вывод буффера кадра на дисплей
	* @param	( параметры ):	
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Update()
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
uint8_t x, y;
		
	ST7565_Select();
 8001412:	f7ff fe41 	bl	8001098 <ST7565_Select>

  	for (y = 0; y < 8; y++) {
 8001416:	2300      	movs	r3, #0
 8001418:	71bb      	strb	r3, [r7, #6]
 800141a:	e01d      	b.n	8001458 <ST7565_Update+0x4c>
		ST7565_SetX(0);	
 800141c:	2000      	movs	r0, #0
 800141e:	f7ff ff01 	bl	8001224 <ST7565_SetX>
		ST7565_SetY(y);
 8001422:	79bb      	ldrb	r3, [r7, #6]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff ff18 	bl	800125a <ST7565_SetY>
		for (x = 0; x < 128; x++) {
 800142a:	2300      	movs	r3, #0
 800142c:	71fb      	strb	r3, [r7, #7]
 800142e:	e00c      	b.n	800144a <ST7565_Update+0x3e>
			ST7565_w_dats(&ST7565_buffer[x + 128 * y], 1);
 8001430:	79fa      	ldrb	r2, [r7, #7]
 8001432:	79bb      	ldrb	r3, [r7, #6]
 8001434:	01db      	lsls	r3, r3, #7
 8001436:	4413      	add	r3, r2
 8001438:	4a0d      	ldr	r2, [pc, #52]	; (8001470 <ST7565_Update+0x64>)
 800143a:	4413      	add	r3, r2
 800143c:	2101      	movs	r1, #1
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fe56 	bl	80010f0 <ST7565_w_dats>
		for (x = 0; x < 128; x++) {
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	3301      	adds	r3, #1
 8001448:	71fb      	strb	r3, [r7, #7]
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	2b00      	cmp	r3, #0
 8001450:	daee      	bge.n	8001430 <ST7565_Update+0x24>
  	for (y = 0; y < 8; y++) {
 8001452:	79bb      	ldrb	r3, [r7, #6]
 8001454:	3301      	adds	r3, #1
 8001456:	71bb      	strb	r3, [r7, #6]
 8001458:	79bb      	ldrb	r3, [r7, #6]
 800145a:	2b07      	cmp	r3, #7
 800145c:	d9de      	bls.n	800141c <ST7565_Update+0x10>
		}
	}
	
	ST7565_Unselect();
 800145e:	f7ff fe27 	bl	80010b0 <ST7565_Unselect>
	HAL_Delay(100);
 8001462:	2064      	movs	r0, #100	; 0x64
 8001464:	f005 f932 	bl	80066cc <HAL_Delay>
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000424 	.word	0x20000424

08001474 <ST7565_DrawChar>:
	* @brief	 ( описание ):  функция записывает 1 символ в буфер кадра
	* @param	( параметры ):	координаты X(0 - 127)  Y(0 - 63), символ, шрифт, множитель, цвет 1 или 0
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawChar(int16_t x, int16_t y, unsigned char ch, FontDef_t* Font, uint8_t multiplier, uint8_t color)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b088      	sub	sp, #32
 8001478:	af00      	add	r7, sp, #0
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	4603      	mov	r3, r0
 800147e:	81fb      	strh	r3, [r7, #14]
 8001480:	460b      	mov	r3, r1
 8001482:	81bb      	strh	r3, [r7, #12]
 8001484:	4613      	mov	r3, r2
 8001486:	72fb      	strb	r3, [r7, #11]
uint16_t i, j;
uint16_t b;
int16_t X = x, Y = y;
 8001488:	89fb      	ldrh	r3, [r7, #14]
 800148a:	833b      	strh	r3, [r7, #24]
 800148c:	89bb      	ldrh	r3, [r7, #12]
 800148e:	82fb      	strh	r3, [r7, #22]
int16_t xx, yy;
	
	if (multiplier < 1) multiplier = 1;
 8001490:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001494:	2b00      	cmp	r3, #0
 8001496:	d102      	bne.n	800149e <ST7565_DrawChar+0x2a>
 8001498:	2301      	movs	r3, #1
 800149a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	
	// Check available space in LCD
	if (SCREEN_WIDTH >= ( x + Font->FontWidth) || SCREEN_HEIGHT >= ( y + Font->FontHeight)) {
 800149e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	7812      	ldrb	r2, [r2, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	2b80      	cmp	r3, #128	; 0x80
 80014aa:	dd07      	ble.n	80014bc <ST7565_DrawChar+0x48>
 80014ac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	7852      	ldrb	r2, [r2, #1]
 80014b4:	4413      	add	r3, r2
 80014b6:	2b40      	cmp	r3, #64	; 0x40
 80014b8:	f300 8154 	bgt.w	8001764 <ST7565_DrawChar+0x2f0>
		// Go through font
		for (i = 0; i < Font->FontHeight; i++) {
 80014bc:	2300      	movs	r3, #0
 80014be:	83fb      	strh	r3, [r7, #30]
 80014c0:	e149      	b.n	8001756 <ST7565_DrawChar+0x2e2>
			if (ch < 127) {
 80014c2:	7afb      	ldrb	r3, [r7, #11]
 80014c4:	2b7e      	cmp	r3, #126	; 0x7e
 80014c6:	d80f      	bhi.n	80014e8 <ST7565_DrawChar+0x74>
				b = Font->data[(ch - 32) * Font->FontHeight + i];
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80014ce:	7afb      	ldrb	r3, [r7, #11]
 80014d0:	3b20      	subs	r3, #32
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	7849      	ldrb	r1, [r1, #1]
 80014d6:	fb03 f101 	mul.w	r1, r3, r1
 80014da:	8bfb      	ldrh	r3, [r7, #30]
 80014dc:	440b      	add	r3, r1
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	4413      	add	r3, r2
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	837b      	strh	r3, [r7, #26]
 80014e6:	e0af      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch > 191) {
 80014e8:	7afb      	ldrb	r3, [r7, #11]
 80014ea:	2bbf      	cmp	r3, #191	; 0xbf
 80014ec:	d90f      	bls.n	800150e <ST7565_DrawChar+0x9a>
				// +96 это так как латинские символы и знаки в шрифтах занимают 96 позиций
				// и если в шрифте который содержит сперва латиницу и спец символы и потом 
				// только кирилицу то нужно добавлять 95 если шрифт 
				// содержит только кирилицу то +96 не нужно
				b = Font->data[((ch - 192) + 96) * Font->FontHeight + i];
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80014f4:	7afb      	ldrb	r3, [r7, #11]
 80014f6:	3b60      	subs	r3, #96	; 0x60
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	7849      	ldrb	r1, [r1, #1]
 80014fc:	fb03 f101 	mul.w	r1, r3, r1
 8001500:	8bfb      	ldrh	r3, [r7, #30]
 8001502:	440b      	add	r3, r1
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	4413      	add	r3, r2
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	837b      	strh	r3, [r7, #26]
 800150c:	e09c      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 168) {	// 168 символ по ASCII - Ё
 800150e:	7afb      	ldrb	r3, [r7, #11]
 8001510:	2ba8      	cmp	r3, #168	; 0xa8
 8001512:	d111      	bne.n	8001538 <ST7565_DrawChar+0xc4>
				// 160 эллемент ( символ Ё ) 
				b = Font->data[160 * Font->FontHeight + i];
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f8d3 2002 	ldr.w	r2, [r3, #2]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	785b      	ldrb	r3, [r3, #1]
 800151e:	4619      	mov	r1, r3
 8001520:	460b      	mov	r3, r1
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	440b      	add	r3, r1
 8001526:	015b      	lsls	r3, r3, #5
 8001528:	4619      	mov	r1, r3
 800152a:	8bfb      	ldrh	r3, [r7, #30]
 800152c:	440b      	add	r3, r1
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4413      	add	r3, r2
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	837b      	strh	r3, [r7, #26]
 8001536:	e087      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 184) {	// 184 символ по ASCII - ё
 8001538:	7afb      	ldrb	r3, [r7, #11]
 800153a:	2bb8      	cmp	r3, #184	; 0xb8
 800153c:	d111      	bne.n	8001562 <ST7565_DrawChar+0xee>
				// 161 эллемент  ( символ ё ) 
				b = Font->data[161 * Font->FontHeight + i];
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f8d3 1002 	ldr.w	r1, [r3, #2]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	785b      	ldrb	r3, [r3, #1]
 8001548:	461a      	mov	r2, r3
 800154a:	4613      	mov	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	015b      	lsls	r3, r3, #5
 8001552:	441a      	add	r2, r3
 8001554:	8bfb      	ldrh	r3, [r7, #30]
 8001556:	4413      	add	r3, r2
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	440b      	add	r3, r1
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	837b      	strh	r3, [r7, #26]
 8001560:	e072      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 170) {	// 168 символ по ASCII - Є
 8001562:	7afb      	ldrb	r3, [r7, #11]
 8001564:	2baa      	cmp	r3, #170	; 0xaa
 8001566:	d10f      	bne.n	8001588 <ST7565_DrawChar+0x114>
				// 162 эллемент ( символ Є )
				b = Font->data[162 * Font->FontHeight + i];
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f8d3 2002 	ldr.w	r2, [r3, #2]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	785b      	ldrb	r3, [r3, #1]
 8001572:	4619      	mov	r1, r3
 8001574:	23a2      	movs	r3, #162	; 0xa2
 8001576:	fb03 f101 	mul.w	r1, r3, r1
 800157a:	8bfb      	ldrh	r3, [r7, #30]
 800157c:	440b      	add	r3, r1
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	4413      	add	r3, r2
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	837b      	strh	r3, [r7, #26]
 8001586:	e05f      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 175) {	// 184 символ по ASCII - Ї
 8001588:	7afb      	ldrb	r3, [r7, #11]
 800158a:	2baf      	cmp	r3, #175	; 0xaf
 800158c:	d10f      	bne.n	80015ae <ST7565_DrawChar+0x13a>
				// 163 эллемент  ( символ Ї )
				b = Font->data[163 * Font->FontHeight + i];
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	785b      	ldrb	r3, [r3, #1]
 8001598:	4619      	mov	r1, r3
 800159a:	23a3      	movs	r3, #163	; 0xa3
 800159c:	fb03 f101 	mul.w	r1, r3, r1
 80015a0:	8bfb      	ldrh	r3, [r7, #30]
 80015a2:	440b      	add	r3, r1
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	4413      	add	r3, r2
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	837b      	strh	r3, [r7, #26]
 80015ac:	e04c      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 178) {	// 168 символ по ASCII - І
 80015ae:	7afb      	ldrb	r3, [r7, #11]
 80015b0:	2bb2      	cmp	r3, #178	; 0xb2
 80015b2:	d10f      	bne.n	80015d4 <ST7565_DrawChar+0x160>
				// 164 эллемент ( символ І )
				b = Font->data[164 * Font->FontHeight + i];
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	785b      	ldrb	r3, [r3, #1]
 80015be:	4619      	mov	r1, r3
 80015c0:	23a4      	movs	r3, #164	; 0xa4
 80015c2:	fb03 f101 	mul.w	r1, r3, r1
 80015c6:	8bfb      	ldrh	r3, [r7, #30]
 80015c8:	440b      	add	r3, r1
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	4413      	add	r3, r2
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	837b      	strh	r3, [r7, #26]
 80015d2:	e039      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			}
			else if (ch == 179) {	// 184 символ по ASCII - і
 80015d4:	7afb      	ldrb	r3, [r7, #11]
 80015d6:	2bb3      	cmp	r3, #179	; 0xb3
 80015d8:	d111      	bne.n	80015fe <ST7565_DrawChar+0x18a>
				// 165 эллемент  ( символ і )
				b = Font->data[165 * Font->FontHeight + i];
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	785b      	ldrb	r3, [r3, #1]
 80015e4:	4619      	mov	r1, r3
 80015e6:	460b      	mov	r3, r1
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	440b      	add	r3, r1
 80015ec:	0159      	lsls	r1, r3, #5
 80015ee:	4419      	add	r1, r3
 80015f0:	8bfb      	ldrh	r3, [r7, #30]
 80015f2:	440b      	add	r3, r1
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	4413      	add	r3, r2
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	837b      	strh	r3, [r7, #26]
 80015fc:	e024      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 186) {	// 184 символ по ASCII - є
 80015fe:	7afb      	ldrb	r3, [r7, #11]
 8001600:	2bba      	cmp	r3, #186	; 0xba
 8001602:	d10f      	bne.n	8001624 <ST7565_DrawChar+0x1b0>
				// 166 эллемент  ( символ є )
				b = Font->data[166 * Font->FontHeight + i];
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f8d3 2002 	ldr.w	r2, [r3, #2]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	785b      	ldrb	r3, [r3, #1]
 800160e:	4619      	mov	r1, r3
 8001610:	23a6      	movs	r3, #166	; 0xa6
 8001612:	fb03 f101 	mul.w	r1, r3, r1
 8001616:	8bfb      	ldrh	r3, [r7, #30]
 8001618:	440b      	add	r3, r1
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	4413      	add	r3, r2
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	837b      	strh	r3, [r7, #26]
 8001622:	e011      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 191) {	// 168 символ по ASCII - ї
 8001624:	7afb      	ldrb	r3, [r7, #11]
 8001626:	2bbf      	cmp	r3, #191	; 0xbf
 8001628:	d10e      	bne.n	8001648 <ST7565_DrawChar+0x1d4>
				// 167 эллемент ( символ ї )
				b = Font->data[167 * Font->FontHeight + i];
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	785b      	ldrb	r3, [r3, #1]
 8001634:	4619      	mov	r1, r3
 8001636:	23a7      	movs	r3, #167	; 0xa7
 8001638:	fb03 f101 	mul.w	r1, r3, r1
 800163c:	8bfb      	ldrh	r3, [r7, #30]
 800163e:	440b      	add	r3, r1
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4413      	add	r3, r2
 8001644:	881b      	ldrh	r3, [r3, #0]
 8001646:	837b      	strh	r3, [r7, #26]
			}
			//-----------------------------------------------------------------------------
			
			for (j = 0; j < Font->FontWidth; j++) {
 8001648:	2300      	movs	r3, #0
 800164a:	83bb      	strh	r3, [r7, #28]
 800164c:	e071      	b.n	8001732 <ST7565_DrawChar+0x2be>
				if ((b << j) & 0x8000) {
 800164e:	8b7a      	ldrh	r2, [r7, #26]
 8001650:	8bbb      	ldrh	r3, [r7, #28]
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d02d      	beq.n	80016ba <ST7565_DrawChar+0x246>
					for (yy = 0; yy < multiplier; yy++){
 800165e:	2300      	movs	r3, #0
 8001660:	827b      	strh	r3, [r7, #18]
 8001662:	e023      	b.n	80016ac <ST7565_DrawChar+0x238>
						for (xx = 0; xx < multiplier; xx++){
 8001664:	2300      	movs	r3, #0
 8001666:	82bb      	strh	r3, [r7, #20]
 8001668:	e014      	b.n	8001694 <ST7565_DrawChar+0x220>
							ST7565_Draw_pixel(X + xx, Y + yy, color);
 800166a:	8b3a      	ldrh	r2, [r7, #24]
 800166c:	8abb      	ldrh	r3, [r7, #20]
 800166e:	4413      	add	r3, r2
 8001670:	b29b      	uxth	r3, r3
 8001672:	b218      	sxth	r0, r3
 8001674:	8afa      	ldrh	r2, [r7, #22]
 8001676:	8a7b      	ldrh	r3, [r7, #18]
 8001678:	4413      	add	r3, r2
 800167a:	b29b      	uxth	r3, r3
 800167c:	b21b      	sxth	r3, r3
 800167e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001682:	4619      	mov	r1, r3
 8001684:	f7ff fe60 	bl	8001348 <ST7565_Draw_pixel>
						for (xx = 0; xx < multiplier; xx++){
 8001688:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800168c:	b29b      	uxth	r3, r3
 800168e:	3301      	adds	r3, #1
 8001690:	b29b      	uxth	r3, r3
 8001692:	82bb      	strh	r3, [r7, #20]
 8001694:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001698:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800169c:	429a      	cmp	r2, r3
 800169e:	dbe4      	blt.n	800166a <ST7565_DrawChar+0x1f6>
					for (yy = 0; yy < multiplier; yy++){
 80016a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	3301      	adds	r3, #1
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	827b      	strh	r3, [r7, #18]
 80016ac:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80016b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80016b4:	429a      	cmp	r2, r3
 80016b6:	dbd5      	blt.n	8001664 <ST7565_DrawChar+0x1f0>
 80016b8:	e031      	b.n	800171e <ST7565_DrawChar+0x2aa>
						}
					}
				} else {// если фон очищать то оставляем если чтоб фон оставался старый то коментируем эту часть -------------
					for (yy = 0; yy < multiplier; yy++){
 80016ba:	2300      	movs	r3, #0
 80016bc:	827b      	strh	r3, [r7, #18]
 80016be:	e028      	b.n	8001712 <ST7565_DrawChar+0x29e>
						for (xx = 0; xx < multiplier; xx++){
 80016c0:	2300      	movs	r3, #0
 80016c2:	82bb      	strh	r3, [r7, #20]
 80016c4:	e019      	b.n	80016fa <ST7565_DrawChar+0x286>
							ST7565_Draw_pixel(X + xx, Y + yy, !color);
 80016c6:	8b3a      	ldrh	r2, [r7, #24]
 80016c8:	8abb      	ldrh	r3, [r7, #20]
 80016ca:	4413      	add	r3, r2
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	b218      	sxth	r0, r3
 80016d0:	8afa      	ldrh	r2, [r7, #22]
 80016d2:	8a7b      	ldrh	r3, [r7, #18]
 80016d4:	4413      	add	r3, r2
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	b219      	sxth	r1, r3
 80016da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80016de:	2b00      	cmp	r3, #0
 80016e0:	bf0c      	ite	eq
 80016e2:	2301      	moveq	r3, #1
 80016e4:	2300      	movne	r3, #0
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	461a      	mov	r2, r3
 80016ea:	f7ff fe2d 	bl	8001348 <ST7565_Draw_pixel>
						for (xx = 0; xx < multiplier; xx++){
 80016ee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	3301      	adds	r3, #1
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	82bb      	strh	r3, [r7, #20]
 80016fa:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80016fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001702:	429a      	cmp	r2, r3
 8001704:	dbdf      	blt.n	80016c6 <ST7565_DrawChar+0x252>
					for (yy = 0; yy < multiplier; yy++){
 8001706:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800170a:	b29b      	uxth	r3, r3
 800170c:	3301      	adds	r3, #1
 800170e:	b29b      	uxth	r3, r3
 8001710:	827b      	strh	r3, [r7, #18]
 8001712:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001716:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800171a:	429a      	cmp	r2, r3
 800171c:	dbd0      	blt.n	80016c0 <ST7565_DrawChar+0x24c>
						}
					}
				}
				//----------------------------------------------------------------------------------------------------
				X += multiplier;
 800171e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001722:	b29a      	uxth	r2, r3
 8001724:	8b3b      	ldrh	r3, [r7, #24]
 8001726:	4413      	add	r3, r2
 8001728:	b29b      	uxth	r3, r3
 800172a:	833b      	strh	r3, [r7, #24]
			for (j = 0; j < Font->FontWidth; j++) {
 800172c:	8bbb      	ldrh	r3, [r7, #28]
 800172e:	3301      	adds	r3, #1
 8001730:	83bb      	strh	r3, [r7, #28]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	b29b      	uxth	r3, r3
 8001738:	8bba      	ldrh	r2, [r7, #28]
 800173a:	429a      	cmp	r2, r3
 800173c:	d387      	bcc.n	800164e <ST7565_DrawChar+0x1da>
			}
			X = x;
 800173e:	89fb      	ldrh	r3, [r7, #14]
 8001740:	833b      	strh	r3, [r7, #24]
			Y += multiplier;
 8001742:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001746:	b29a      	uxth	r2, r3
 8001748:	8afb      	ldrh	r3, [r7, #22]
 800174a:	4413      	add	r3, r2
 800174c:	b29b      	uxth	r3, r3
 800174e:	82fb      	strh	r3, [r7, #22]
		for (i = 0; i < Font->FontHeight; i++) {
 8001750:	8bfb      	ldrh	r3, [r7, #30]
 8001752:	3301      	adds	r3, #1
 8001754:	83fb      	strh	r3, [r7, #30]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	785b      	ldrb	r3, [r3, #1]
 800175a:	b29b      	uxth	r3, r3
 800175c:	8bfa      	ldrh	r2, [r7, #30]
 800175e:	429a      	cmp	r2, r3
 8001760:	f4ff aeaf 	bcc.w	80014c2 <ST7565_DrawChar+0x4e>
		}
		
	}
}
 8001764:	bf00      	nop
 8001766:	3720      	adds	r7, #32
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <ST7565_Print>:
 * @brief	 ( описание ):  функция записывает строку в буфер кадра ( поддерживает кириллицу ( в том числе и Укр. язык) и латиницу
 * @param	( параметры ):	координаты X(0 - 127)  Y(0 - 63), символ, шрифт, множитель, цвет 1 или 0
 * @return  ( возвращает ):
*******************************************************************************/
void ST7565_Print(int16_t x, int16_t y, char *str, FontDef_t *Font, uint8_t multiplier, uint8_t color)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af02      	add	r7, sp, #8
 8001772:	60ba      	str	r2, [r7, #8]
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	4603      	mov	r3, r0
 8001778:	81fb      	strh	r3, [r7, #14]
 800177a:	460b      	mov	r3, r1
 800177c:	81bb      	strh	r3, [r7, #12]
unsigned char buff_char;
uint16_t len = strlen(str);
 800177e:	68b8      	ldr	r0, [r7, #8]
 8001780:	f7fe fd26 	bl	80001d0 <strlen>
 8001784:	4603      	mov	r3, r0
 8001786:	82bb      	strh	r3, [r7, #20]

	if (multiplier < 1) multiplier = 1;
 8001788:	f897 3020 	ldrb.w	r3, [r7, #32]
 800178c:	2b00      	cmp	r3, #0
 800178e:	f040 809c 	bne.w	80018ca <ST7565_Print+0x15e>
 8001792:	2301      	movs	r3, #1
 8001794:	f887 3020 	strb.w	r3, [r7, #32]
	
	while (len--) {
 8001798:	e097      	b.n	80018ca <ST7565_Print+0x15e>
		//---------------------------------------------------------------------
		// проверка на кириллицу UTF-8, если латиница то пропускаем if
		// Расширенные символы ASCII Win-1251 кириллица (код символа 128-255)
		// проверяем первый байт из двух ( так как UTF-8 ето два байта )
		// если он больше либо равен 0xC0 ( первый байт в кириллеце будет равен 0xD0 либо 0xD1 именно в алфавите )
		if ( (uint8_t)*str >= 0xC0 ) {	// код 0xC0 соответствует символу кириллица 'A' по ASCII Win-1251
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2bbf      	cmp	r3, #191	; 0xbf
 80017a0:	d974      	bls.n	800188c <ST7565_Print+0x120>
			// проверяем какой именно байт первый 0xD0 либо 0xD1
			switch ((uint8_t)*str) {
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2bd0      	cmp	r3, #208	; 0xd0
 80017a8:	d002      	beq.n	80017b0 <ST7565_Print+0x44>
 80017aa:	2bd1      	cmp	r3, #209	; 0xd1
 80017ac:	d02c      	beq.n	8001808 <ST7565_Print+0x9c>
 80017ae:	e05b      	b.n	8001868 <ST7565_Print+0xfc>
				case 0xD0:
				//{
					// увеличиваем массив так как нам нужен второй байт
					str++;
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	3301      	adds	r3, #1
 80017b4:	60bb      	str	r3, [r7, #8]
					// проверяем второй байт там сам символ
					if ((uint8_t)*str == 0x81) { buff_char = 0xA8; break; }		// байт символа Ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b81      	cmp	r3, #129	; 0x81
 80017bc:	d102      	bne.n	80017c4 <ST7565_Print+0x58>
 80017be:	23a8      	movs	r3, #168	; 0xa8
 80017c0:	75fb      	strb	r3, [r7, #23]
 80017c2:	e051      	b.n	8001868 <ST7565_Print+0xfc>
					else if ((uint8_t)*str >= 0x90 && (uint8_t)*str <= 0xBF) { buff_char = (*str) + 0x30; }	// байт символов А...Я а...п  делаем здвиг на +48
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b8f      	cmp	r3, #143	; 0x8f
 80017ca:	d908      	bls.n	80017de <ST7565_Print+0x72>
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2bbf      	cmp	r3, #191	; 0xbf
 80017d2:	d804      	bhi.n	80017de <ST7565_Print+0x72>
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	3330      	adds	r3, #48	; 0x30
 80017da:	75fb      	strb	r3, [r7, #23]
					else if ((uint8_t)*str == 0x84) { buff_char = 0xAA; break; }		// байт символа Є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x86) { buff_char = 0xB2; break; }		// байт символа І ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x87) { buff_char = 0xAF; break; }		// байт символа Ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
				break;
 80017dc:	e041      	b.n	8001862 <ST7565_Print+0xf6>
					else if ((uint8_t)*str == 0x84) { buff_char = 0xAA; break; }		// байт символа Є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b84      	cmp	r3, #132	; 0x84
 80017e4:	d102      	bne.n	80017ec <ST7565_Print+0x80>
 80017e6:	23aa      	movs	r3, #170	; 0xaa
 80017e8:	75fb      	strb	r3, [r7, #23]
 80017ea:	e03d      	b.n	8001868 <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x86) { buff_char = 0xB2; break; }		// байт символа І ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b86      	cmp	r3, #134	; 0x86
 80017f2:	d102      	bne.n	80017fa <ST7565_Print+0x8e>
 80017f4:	23b2      	movs	r3, #178	; 0xb2
 80017f6:	75fb      	strb	r3, [r7, #23]
 80017f8:	e036      	b.n	8001868 <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x87) { buff_char = 0xAF; break; }		// байт символа Ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b87      	cmp	r3, #135	; 0x87
 8001800:	d12f      	bne.n	8001862 <ST7565_Print+0xf6>
 8001802:	23af      	movs	r3, #175	; 0xaf
 8001804:	75fb      	strb	r3, [r7, #23]
 8001806:	e02f      	b.n	8001868 <ST7565_Print+0xfc>
				//}
				case 0xD1:
				//{
					// увеличиваем массив так как нам нужен второй байт
					str++;
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	3301      	adds	r3, #1
 800180c:	60bb      	str	r3, [r7, #8]
					// проверяем второй байт там сам символ
					if ((uint8_t)*str == 0x91) { buff_char = 0xB8; break; }		// байт символа ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b91      	cmp	r3, #145	; 0x91
 8001814:	d102      	bne.n	800181c <ST7565_Print+0xb0>
 8001816:	23b8      	movs	r3, #184	; 0xb8
 8001818:	75fb      	strb	r3, [r7, #23]
 800181a:	e025      	b.n	8001868 <ST7565_Print+0xfc>
					else if ((uint8_t)*str >= 0x80 && (uint8_t)*str <= 0x8F) { buff_char = (*str) + 0x70; }	// байт символов п...я	елаем здвиг на +112
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	b25b      	sxtb	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	da08      	bge.n	8001838 <ST7565_Print+0xcc>
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b8f      	cmp	r3, #143	; 0x8f
 800182c:	d804      	bhi.n	8001838 <ST7565_Print+0xcc>
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	3370      	adds	r3, #112	; 0x70
 8001834:	75fb      	strb	r3, [r7, #23]
					else if ((uint8_t)*str == 0x94) { buff_char = 0xBA; break; }		// байт символа є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x96) { buff_char = 0xB3; break; }		// байт символа і ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x97) { buff_char = 0xBF; break; }		// байт символа ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
				break;
 8001836:	e016      	b.n	8001866 <ST7565_Print+0xfa>
					else if ((uint8_t)*str == 0x94) { buff_char = 0xBA; break; }		// байт символа є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b94      	cmp	r3, #148	; 0x94
 800183e:	d102      	bne.n	8001846 <ST7565_Print+0xda>
 8001840:	23ba      	movs	r3, #186	; 0xba
 8001842:	75fb      	strb	r3, [r7, #23]
 8001844:	e010      	b.n	8001868 <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x96) { buff_char = 0xB3; break; }		// байт символа і ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b96      	cmp	r3, #150	; 0x96
 800184c:	d102      	bne.n	8001854 <ST7565_Print+0xe8>
 800184e:	23b3      	movs	r3, #179	; 0xb3
 8001850:	75fb      	strb	r3, [r7, #23]
 8001852:	e009      	b.n	8001868 <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x97) { buff_char = 0xBF; break; }		// байт символа ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b97      	cmp	r3, #151	; 0x97
 800185a:	d104      	bne.n	8001866 <ST7565_Print+0xfa>
 800185c:	23bf      	movs	r3, #191	; 0xbf
 800185e:	75fb      	strb	r3, [r7, #23]
 8001860:	e002      	b.n	8001868 <ST7565_Print+0xfc>
				break;
 8001862:	bf00      	nop
 8001864:	e000      	b.n	8001868 <ST7565_Print+0xfc>
				break;
 8001866:	bf00      	nop
				//}
			}
			// уменьшаем еще переменную так как израсходывали 2 байта для кириллицы
			len--;
 8001868:	8abb      	ldrh	r3, [r7, #20]
 800186a:	3b01      	subs	r3, #1
 800186c:	82bb      	strh	r3, [r7, #20]
			ST7565_DrawChar(x, y, buff_char, Font, multiplier, color);
 800186e:	7dfa      	ldrb	r2, [r7, #23]
 8001870:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001874:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001878:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800187c:	9301      	str	r3, [sp, #4]
 800187e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f7ff fdf5 	bl	8001474 <ST7565_DrawChar>
 800188a:	e00e      	b.n	80018aa <ST7565_Print+0x13e>
		} else {
			ST7565_DrawChar(x, y, *str, Font, multiplier, color);
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	781a      	ldrb	r2, [r3, #0]
 8001890:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001894:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001898:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800189c:	9301      	str	r3, [sp, #4]
 800189e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f7ff fde5 	bl	8001474 <ST7565_DrawChar>
		}
		
		x += (Font->FontWidth * multiplier);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	fb12 f303 	smulbb	r3, r2, r3
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	89fb      	ldrh	r3, [r7, #14]
 80018be:	4413      	add	r3, r2
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	81fb      	strh	r3, [r7, #14]
		str++;
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	3301      	adds	r3, #1
 80018c8:	60bb      	str	r3, [r7, #8]
	while (len--) {
 80018ca:	8abb      	ldrh	r3, [r7, #20]
 80018cc:	1e5a      	subs	r2, r3, #1
 80018ce:	82ba      	strh	r2, [r7, #20]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f47f af62 	bne.w	800179a <ST7565_Print+0x2e>
	}
}
 80018d6:	bf00      	nop
 80018d8:	bf00      	nop
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <ST7565_DrawLine>:
	* @param	( параметры ):	координаты начальной точки и конечной и цвет 0 или 1
								X(0 - 127)  Y(0 - 63)
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint8_t c)
{
 80018e0:	b590      	push	{r4, r7, lr}
 80018e2:	b087      	sub	sp, #28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4604      	mov	r4, r0
 80018e8:	4608      	mov	r0, r1
 80018ea:	4611      	mov	r1, r2
 80018ec:	461a      	mov	r2, r3
 80018ee:	4623      	mov	r3, r4
 80018f0:	80fb      	strh	r3, [r7, #6]
 80018f2:	4603      	mov	r3, r0
 80018f4:	80bb      	strh	r3, [r7, #4]
 80018f6:	460b      	mov	r3, r1
 80018f8:	807b      	strh	r3, [r7, #2]
 80018fa:	4613      	mov	r3, r2
 80018fc:	803b      	strh	r3, [r7, #0]
int16_t dx, dy, sx, sy, err, e2, i, tmp;
	
	/* Check for overflow */
	if (x0 >= SCREEN_WIDTH)  x0 = SCREEN_WIDTH  - 1;
 80018fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001902:	2b7f      	cmp	r3, #127	; 0x7f
 8001904:	dd01      	ble.n	800190a <ST7565_DrawLine+0x2a>
 8001906:	237f      	movs	r3, #127	; 0x7f
 8001908:	80fb      	strh	r3, [r7, #6]
	if (x1 >= SCREEN_WIDTH)  x1 = SCREEN_WIDTH  - 1;
 800190a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800190e:	2b7f      	cmp	r3, #127	; 0x7f
 8001910:	dd01      	ble.n	8001916 <ST7565_DrawLine+0x36>
 8001912:	237f      	movs	r3, #127	; 0x7f
 8001914:	807b      	strh	r3, [r7, #2]
	if (y0 >= SCREEN_HEIGHT) y0 = SCREEN_HEIGHT - 1;
 8001916:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800191a:	2b3f      	cmp	r3, #63	; 0x3f
 800191c:	dd01      	ble.n	8001922 <ST7565_DrawLine+0x42>
 800191e:	233f      	movs	r3, #63	; 0x3f
 8001920:	80bb      	strh	r3, [r7, #4]
	if (y1 >= SCREEN_HEIGHT) y1 = SCREEN_HEIGHT - 1;
 8001922:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001926:	2b3f      	cmp	r3, #63	; 0x3f
 8001928:	dd01      	ble.n	800192e <ST7565_DrawLine+0x4e>
 800192a:	233f      	movs	r3, #63	; 0x3f
 800192c:	803b      	strh	r3, [r7, #0]
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 800192e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001932:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001936:	429a      	cmp	r2, r3
 8001938:	da05      	bge.n	8001946 <ST7565_DrawLine+0x66>
 800193a:	887a      	ldrh	r2, [r7, #2]
 800193c:	88fb      	ldrh	r3, [r7, #6]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	b29b      	uxth	r3, r3
 8001942:	b21b      	sxth	r3, r3
 8001944:	e004      	b.n	8001950 <ST7565_DrawLine+0x70>
 8001946:	88fa      	ldrh	r2, [r7, #6]
 8001948:	887b      	ldrh	r3, [r7, #2]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	b29b      	uxth	r3, r3
 800194e:	b21b      	sxth	r3, r3
 8001950:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8001952:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001956:	f9b7 3000 	ldrsh.w	r3, [r7]
 800195a:	429a      	cmp	r2, r3
 800195c:	da05      	bge.n	800196a <ST7565_DrawLine+0x8a>
 800195e:	883a      	ldrh	r2, [r7, #0]
 8001960:	88bb      	ldrh	r3, [r7, #4]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	b29b      	uxth	r3, r3
 8001966:	b21b      	sxth	r3, r3
 8001968:	e004      	b.n	8001974 <ST7565_DrawLine+0x94>
 800196a:	88ba      	ldrh	r2, [r7, #4]
 800196c:	883b      	ldrh	r3, [r7, #0]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	b29b      	uxth	r3, r3
 8001972:	b21b      	sxth	r3, r3
 8001974:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8001976:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800197a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800197e:	429a      	cmp	r2, r3
 8001980:	da01      	bge.n	8001986 <ST7565_DrawLine+0xa6>
 8001982:	2301      	movs	r3, #1
 8001984:	e001      	b.n	800198a <ST7565_DrawLine+0xaa>
 8001986:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800198a:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 800198c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001990:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001994:	429a      	cmp	r2, r3
 8001996:	da01      	bge.n	800199c <ST7565_DrawLine+0xbc>
 8001998:	2301      	movs	r3, #1
 800199a:	e001      	b.n	80019a0 <ST7565_DrawLine+0xc0>
 800199c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019a0:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 80019a2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80019a6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	dd06      	ble.n	80019bc <ST7565_DrawLine+0xdc>
 80019ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80019b2:	0fda      	lsrs	r2, r3, #31
 80019b4:	4413      	add	r3, r2
 80019b6:	105b      	asrs	r3, r3, #1
 80019b8:	b21b      	sxth	r3, r3
 80019ba:	e006      	b.n	80019ca <ST7565_DrawLine+0xea>
 80019bc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80019c0:	0fda      	lsrs	r2, r3, #31
 80019c2:	4413      	add	r3, r2
 80019c4:	105b      	asrs	r3, r3, #1
 80019c6:	425b      	negs	r3, r3
 80019c8:	b21b      	sxth	r3, r3
 80019ca:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 80019cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d130      	bne.n	8001a36 <ST7565_DrawLine+0x156>
		if (y1 < y0) {
 80019d4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80019d8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80019dc:	429a      	cmp	r2, r3
 80019de:	da05      	bge.n	80019ec <ST7565_DrawLine+0x10c>
			tmp = y1;
 80019e0:	883b      	ldrh	r3, [r7, #0]
 80019e2:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80019e4:	88bb      	ldrh	r3, [r7, #4]
 80019e6:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80019e8:	893b      	ldrh	r3, [r7, #8]
 80019ea:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 80019ec:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80019f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	da05      	bge.n	8001a04 <ST7565_DrawLine+0x124>
			tmp = x1;
 80019f8:	887b      	ldrh	r3, [r7, #2]
 80019fa:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80019fc:	88fb      	ldrh	r3, [r7, #6]
 80019fe:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001a00:	893b      	ldrh	r3, [r7, #8]
 8001a02:	80fb      	strh	r3, [r7, #6]
		}
		
		// Vertical line
		for (i = y0; i <= y1; i++) ST7565_Draw_pixel(x0, i, c);
 8001a04:	88bb      	ldrh	r3, [r7, #4]
 8001a06:	82bb      	strh	r3, [r7, #20]
 8001a08:	e00e      	b.n	8001a28 <ST7565_DrawLine+0x148>
 8001a0a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001a0e:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8001a12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff fc96 	bl	8001348 <ST7565_Draw_pixel>
 8001a1c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	3301      	adds	r3, #1
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	82bb      	strh	r3, [r7, #20]
 8001a28:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001a2c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	ddea      	ble.n	8001a0a <ST7565_DrawLine+0x12a>
		
		return;
 8001a34:	e06e      	b.n	8001b14 <ST7565_DrawLine+0x234>
	}
	
	if (dy == 0) {
 8001a36:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d130      	bne.n	8001aa0 <ST7565_DrawLine+0x1c0>
		if (y1 < y0) {
 8001a3e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001a42:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	da05      	bge.n	8001a56 <ST7565_DrawLine+0x176>
			tmp = y1;
 8001a4a:	883b      	ldrh	r3, [r7, #0]
 8001a4c:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001a4e:	88bb      	ldrh	r3, [r7, #4]
 8001a50:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001a52:	893b      	ldrh	r3, [r7, #8]
 8001a54:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001a56:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001a5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	da05      	bge.n	8001a6e <ST7565_DrawLine+0x18e>
			tmp = x1;
 8001a62:	887b      	ldrh	r3, [r7, #2]
 8001a64:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001a66:	88fb      	ldrh	r3, [r7, #6]
 8001a68:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001a6a:	893b      	ldrh	r3, [r7, #8]
 8001a6c:	80fb      	strh	r3, [r7, #6]
		}
		
		// Horizontal line
		for (i = x0; i <= x1; i++) ST7565_Draw_pixel(i, y0, c);
 8001a6e:	88fb      	ldrh	r3, [r7, #6]
 8001a70:	82bb      	strh	r3, [r7, #20]
 8001a72:	e00e      	b.n	8001a92 <ST7565_DrawLine+0x1b2>
 8001a74:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001a78:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001a7c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fc61 	bl	8001348 <ST7565_Draw_pixel>
 8001a86:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	82bb      	strh	r3, [r7, #20]
 8001a92:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001a96:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	ddea      	ble.n	8001a74 <ST7565_DrawLine+0x194>
		
		return;
 8001a9e:	e039      	b.n	8001b14 <ST7565_DrawLine+0x234>
	}
	
	while (1) {
		ST7565_Draw_pixel(x0, y0, c);
 8001aa0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001aa4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001aa8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fc4b 	bl	8001348 <ST7565_Draw_pixel>
		if (x0 == x1 && y0 == y1) break;
 8001ab2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001ab6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d105      	bne.n	8001aca <ST7565_DrawLine+0x1ea>
 8001abe:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001ac2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d023      	beq.n	8001b12 <ST7565_DrawLine+0x232>

		e2 = err; 
 8001aca:	8afb      	ldrh	r3, [r7, #22]
 8001acc:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8001ace:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001ad2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001ad6:	425b      	negs	r3, r3
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	dd09      	ble.n	8001af0 <ST7565_DrawLine+0x210>
			err -= dy;
 8001adc:	8afa      	ldrh	r2, [r7, #22]
 8001ade:	8a3b      	ldrh	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001ae6:	88fa      	ldrh	r2, [r7, #6]
 8001ae8:	89fb      	ldrh	r3, [r7, #14]
 8001aea:	4413      	add	r3, r2
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8001af0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001af4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	dad1      	bge.n	8001aa0 <ST7565_DrawLine+0x1c0>
			err += dx;
 8001afc:	8afa      	ldrh	r2, [r7, #22]
 8001afe:	8a7b      	ldrh	r3, [r7, #18]
 8001b00:	4413      	add	r3, r2
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001b06:	88ba      	ldrh	r2, [r7, #4]
 8001b08:	89bb      	ldrh	r3, [r7, #12]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	80bb      	strh	r3, [r7, #4]
		ST7565_Draw_pixel(x0, y0, c);
 8001b10:	e7c6      	b.n	8001aa0 <ST7565_DrawLine+0x1c0>
		if (x0 == x1 && y0 == y1) break;
 8001b12:	bf00      	nop
		} 
	}
}
 8001b14:	371c      	adds	r7, #28
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd90      	pop	{r4, r7, pc}

08001b1a <ST7565_DrawRectangle>:
	* @param	( параметры ):	координаты верхнего левого и ширина и высота и цвет
								X(0 - 127)  Y(0 - 63)
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawRectangle(int16_t x, int16_t y, int16_t w, int16_t h, uint8_t c)
{
 8001b1a:	b590      	push	{r4, r7, lr}
 8001b1c:	b085      	sub	sp, #20
 8001b1e:	af02      	add	r7, sp, #8
 8001b20:	4604      	mov	r4, r0
 8001b22:	4608      	mov	r0, r1
 8001b24:	4611      	mov	r1, r2
 8001b26:	461a      	mov	r2, r3
 8001b28:	4623      	mov	r3, r4
 8001b2a:	80fb      	strh	r3, [r7, #6]
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	80bb      	strh	r3, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	807b      	strh	r3, [r7, #2]
 8001b34:	4613      	mov	r3, r2
 8001b36:	803b      	strh	r3, [r7, #0]
	// Check input parameters
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001b38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b3c:	2b7f      	cmp	r3, #127	; 0x7f
 8001b3e:	dc6a      	bgt.n	8001c16 <ST7565_DrawRectangle+0xfc>
 8001b40:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001b44:	2b3f      	cmp	r3, #63	; 0x3f
 8001b46:	dc66      	bgt.n	8001c16 <ST7565_DrawRectangle+0xfc>
	
	// Check width and height
	if ((x + w) >= SCREEN_WIDTH)  w = SCREEN_WIDTH  - x;
 8001b48:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b50:	4413      	add	r3, r2
 8001b52:	2b7f      	cmp	r3, #127	; 0x7f
 8001b54:	dd04      	ble.n	8001b60 <ST7565_DrawRectangle+0x46>
 8001b56:	88fb      	ldrh	r3, [r7, #6]
 8001b58:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	807b      	strh	r3, [r7, #2]
	if ((y + h) >= SCREEN_HEIGHT) h = SCREEN_HEIGHT - y;
 8001b60:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001b64:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001b68:	4413      	add	r3, r2
 8001b6a:	2b3f      	cmp	r3, #63	; 0x3f
 8001b6c:	dd04      	ble.n	8001b78 <ST7565_DrawRectangle+0x5e>
 8001b6e:	88bb      	ldrh	r3, [r7, #4]
 8001b70:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	803b      	strh	r3, [r7, #0]
	
	// Draw 4 lines
	ST7565_DrawLine(x, y, x + w, y, c);         // Top line
 8001b78:	88fa      	ldrh	r2, [r7, #6]
 8001b7a:	887b      	ldrh	r3, [r7, #2]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	b21a      	sxth	r2, r3
 8001b82:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8001b86:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001b8a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001b8e:	7e3b      	ldrb	r3, [r7, #24]
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	4623      	mov	r3, r4
 8001b94:	f7ff fea4 	bl	80018e0 <ST7565_DrawLine>
	ST7565_DrawLine(x, y + h, x + w, y + h, c); // Bottom line
 8001b98:	88ba      	ldrh	r2, [r7, #4]
 8001b9a:	883b      	ldrh	r3, [r7, #0]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	b219      	sxth	r1, r3
 8001ba2:	88fa      	ldrh	r2, [r7, #6]
 8001ba4:	887b      	ldrh	r3, [r7, #2]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	b21c      	sxth	r4, r3
 8001bac:	88ba      	ldrh	r2, [r7, #4]
 8001bae:	883b      	ldrh	r3, [r7, #0]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	b21a      	sxth	r2, r3
 8001bb6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001bba:	7e3b      	ldrb	r3, [r7, #24]
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	4622      	mov	r2, r4
 8001bc2:	f7ff fe8d 	bl	80018e0 <ST7565_DrawLine>
	ST7565_DrawLine(x, y, x, y + h, c);         // Left line
 8001bc6:	88ba      	ldrh	r2, [r7, #4]
 8001bc8:	883b      	ldrh	r3, [r7, #0]
 8001bca:	4413      	add	r3, r2
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	b21c      	sxth	r4, r3
 8001bd0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001bd4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001bd8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001bdc:	7e3b      	ldrb	r3, [r7, #24]
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	4623      	mov	r3, r4
 8001be2:	f7ff fe7d 	bl	80018e0 <ST7565_DrawLine>
	ST7565_DrawLine(x + w, y, x + w, y + h, c); // Right line
 8001be6:	88fa      	ldrh	r2, [r7, #6]
 8001be8:	887b      	ldrh	r3, [r7, #2]
 8001bea:	4413      	add	r3, r2
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	b218      	sxth	r0, r3
 8001bf0:	88fa      	ldrh	r2, [r7, #6]
 8001bf2:	887b      	ldrh	r3, [r7, #2]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	b21c      	sxth	r4, r3
 8001bfa:	88ba      	ldrh	r2, [r7, #4]
 8001bfc:	883b      	ldrh	r3, [r7, #0]
 8001bfe:	4413      	add	r3, r2
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	b21a      	sxth	r2, r3
 8001c04:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001c08:	7e3b      	ldrb	r3, [r7, #24]
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	4622      	mov	r2, r4
 8001c10:	f7ff fe66 	bl	80018e0 <ST7565_DrawLine>
 8001c14:	e000      	b.n	8001c18 <ST7565_DrawRectangle+0xfe>
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001c16:	bf00      	nop
}
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd90      	pop	{r4, r7, pc}

08001c1e <ST7565_DrawFilledRectangle>:
	* @param	( параметры ):	координаты верхнего левого и ширина и высота и цвет
								X(0 - 127)  Y(0 - 63)
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawFilledRectangle(int16_t x, int16_t y, int16_t w, int16_t h, uint8_t c)
{
 8001c1e:	b590      	push	{r4, r7, lr}
 8001c20:	b087      	sub	sp, #28
 8001c22:	af02      	add	r7, sp, #8
 8001c24:	4604      	mov	r4, r0
 8001c26:	4608      	mov	r0, r1
 8001c28:	4611      	mov	r1, r2
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	4623      	mov	r3, r4
 8001c2e:	80fb      	strh	r3, [r7, #6]
 8001c30:	4603      	mov	r3, r0
 8001c32:	80bb      	strh	r3, [r7, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	807b      	strh	r3, [r7, #2]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	803b      	strh	r3, [r7, #0]
uint8_t i;
	
	// Check input parameters
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001c3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c40:	2b7f      	cmp	r3, #127	; 0x7f
 8001c42:	dc41      	bgt.n	8001cc8 <ST7565_DrawFilledRectangle+0xaa>
 8001c44:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c48:	2b3f      	cmp	r3, #63	; 0x3f
 8001c4a:	dc3d      	bgt.n	8001cc8 <ST7565_DrawFilledRectangle+0xaa>
	
	// Check width and height
	if ((x + w) >= SCREEN_WIDTH)  w = SCREEN_WIDTH  - x;
 8001c4c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001c50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001c54:	4413      	add	r3, r2
 8001c56:	2b7f      	cmp	r3, #127	; 0x7f
 8001c58:	dd04      	ble.n	8001c64 <ST7565_DrawFilledRectangle+0x46>
 8001c5a:	88fb      	ldrh	r3, [r7, #6]
 8001c5c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	807b      	strh	r3, [r7, #2]
	if ((y + h) >= SCREEN_HEIGHT) h = SCREEN_HEIGHT - y;
 8001c64:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001c68:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	2b3f      	cmp	r3, #63	; 0x3f
 8001c70:	dd04      	ble.n	8001c7c <ST7565_DrawFilledRectangle+0x5e>
 8001c72:	88bb      	ldrh	r3, [r7, #4]
 8001c74:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	803b      	strh	r3, [r7, #0]
	
	for (i = 0; i <= h; i++) ST7565_DrawLine(x, y + i, x + w, y + i, c);
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	73fb      	strb	r3, [r7, #15]
 8001c80:	e01c      	b.n	8001cbc <ST7565_DrawFilledRectangle+0x9e>
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	88bb      	ldrh	r3, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	b219      	sxth	r1, r3
 8001c8e:	88fa      	ldrh	r2, [r7, #6]
 8001c90:	887b      	ldrh	r3, [r7, #2]
 8001c92:	4413      	add	r3, r2
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	b21c      	sxth	r4, r3
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	88bb      	ldrh	r3, [r7, #4]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	b21a      	sxth	r2, r3
 8001ca4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001ca8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	4622      	mov	r2, r4
 8001cb2:	f7ff fe15 	bl	80018e0 <ST7565_DrawLine>
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	73fb      	strb	r3, [r7, #15]
 8001cbc:	7bfa      	ldrb	r2, [r7, #15]
 8001cbe:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	dddd      	ble.n	8001c82 <ST7565_DrawFilledRectangle+0x64>
 8001cc6:	e000      	b.n	8001cca <ST7565_DrawFilledRectangle+0xac>
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001cc8:	bf00      	nop
}
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd90      	pop	{r4, r7, pc}

08001cd0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001cd4:	f3bf 8f4f 	dsb	sy
}
 8001cd8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <__NVIC_SystemReset+0x24>)
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001ce2:	4904      	ldr	r1, [pc, #16]	; (8001cf4 <__NVIC_SystemReset+0x24>)
 8001ce4:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <__NVIC_SystemReset+0x28>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001cea:	f3bf 8f4f 	dsb	sy
}
 8001cee:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001cf0:	bf00      	nop
 8001cf2:	e7fd      	b.n	8001cf0 <__NVIC_SystemReset+0x20>
 8001cf4:	e000ed00 	.word	0xe000ed00
 8001cf8:	05fa0004 	.word	0x05fa0004

08001cfc <fsErrName>:
//------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------
#ifdef SET_FAT_FS
//------------------------------------------------------------------------------------------
static char *fsErrName(int fr)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
	switch (fr) {
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b13      	cmp	r3, #19
 8001d08:	d850      	bhi.n	8001dac <fsErrName+0xb0>
 8001d0a:	a201      	add	r2, pc, #4	; (adr r2, 8001d10 <fsErrName+0x14>)
 8001d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d10:	08001d61 	.word	0x08001d61
 8001d14:	08001d65 	.word	0x08001d65
 8001d18:	08001d69 	.word	0x08001d69
 8001d1c:	08001d6d 	.word	0x08001d6d
 8001d20:	08001d71 	.word	0x08001d71
 8001d24:	08001d75 	.word	0x08001d75
 8001d28:	08001d79 	.word	0x08001d79
 8001d2c:	08001d7d 	.word	0x08001d7d
 8001d30:	08001d7d 	.word	0x08001d7d
 8001d34:	08001d81 	.word	0x08001d81
 8001d38:	08001d85 	.word	0x08001d85
 8001d3c:	08001d89 	.word	0x08001d89
 8001d40:	08001d8d 	.word	0x08001d8d
 8001d44:	08001d91 	.word	0x08001d91
 8001d48:	08001d95 	.word	0x08001d95
 8001d4c:	08001d99 	.word	0x08001d99
 8001d50:	08001d9d 	.word	0x08001d9d
 8001d54:	08001da1 	.word	0x08001da1
 8001d58:	08001da5 	.word	0x08001da5
 8001d5c:	08001da9 	.word	0x08001da9
		case FR_OK:				// (0) Succeeded
			return "Succeeded";
 8001d60:	4b16      	ldr	r3, [pc, #88]	; (8001dbc <fsErrName+0xc0>)
 8001d62:	e024      	b.n	8001dae <fsErrName+0xb2>
		case FR_DISK_ERR://			(1) A hard error occurred in the low level disk I/O layer
			return "Error disk I/O";
 8001d64:	4b16      	ldr	r3, [pc, #88]	; (8001dc0 <fsErrName+0xc4>)
 8001d66:	e022      	b.n	8001dae <fsErrName+0xb2>
		case FR_INT_ERR://			(2) Assertion failed
			return "Assertion failed";
 8001d68:	4b16      	ldr	r3, [pc, #88]	; (8001dc4 <fsErrName+0xc8>)
 8001d6a:	e020      	b.n	8001dae <fsErrName+0xb2>
		case FR_NOT_READY://		(3) The physical drive cannot work
			return "Drive not ready";
 8001d6c:	4b16      	ldr	r3, [pc, #88]	; (8001dc8 <fsErrName+0xcc>)
 8001d6e:	e01e      	b.n	8001dae <fsErrName+0xb2>
		case FR_NO_FILE://			(4) Could not find the file
			return "No file";
 8001d70:	4b16      	ldr	r3, [pc, #88]	; (8001dcc <fsErrName+0xd0>)
 8001d72:	e01c      	b.n	8001dae <fsErrName+0xb2>
		case FR_NO_PATH://			(5) Could not find the path
			return "No path";
 8001d74:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <fsErrName+0xd4>)
 8001d76:	e01a      	b.n	8001dae <fsErrName+0xb2>
		case FR_INVALID_NAME://		(6) The path name format is invalid
			return "Path error";
 8001d78:	4b16      	ldr	r3, [pc, #88]	; (8001dd4 <fsErrName+0xd8>)
 8001d7a:	e018      	b.n	8001dae <fsErrName+0xb2>
		case FR_DENIED://			(7) Access denied due to prohibited access or directory full
		case FR_EXIST://			(8) Access denied due to prohibited access
			return "Access denied";
 8001d7c:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <fsErrName+0xdc>)
 8001d7e:	e016      	b.n	8001dae <fsErrName+0xb2>
		case FR_INVALID_OBJECT://	(9) The file/directory object is invalid
			return "Invalid file/dir";
 8001d80:	4b16      	ldr	r3, [pc, #88]	; (8001ddc <fsErrName+0xe0>)
 8001d82:	e014      	b.n	8001dae <fsErrName+0xb2>
		case FR_WRITE_PROTECTED://	(10) The physical drive is write protected
			return "Write protected";
 8001d84:	4b16      	ldr	r3, [pc, #88]	; (8001de0 <fsErrName+0xe4>)
 8001d86:	e012      	b.n	8001dae <fsErrName+0xb2>
		case FR_INVALID_DRIVE://	(11) The logical drive number is invalid
			return "Invalid drive number";
 8001d88:	4b16      	ldr	r3, [pc, #88]	; (8001de4 <fsErrName+0xe8>)
 8001d8a:	e010      	b.n	8001dae <fsErrName+0xb2>
		case FR_NOT_ENABLED://		(12) The volume has no work area
			return "Volume no area";
 8001d8c:	4b16      	ldr	r3, [pc, #88]	; (8001de8 <fsErrName+0xec>)
 8001d8e:	e00e      	b.n	8001dae <fsErrName+0xb2>
		case FR_NO_FILESYSTEM://	(13) There is no valid FAT volume
			return "Volume has't filesystem";
 8001d90:	4b16      	ldr	r3, [pc, #88]	; (8001dec <fsErrName+0xf0>)
 8001d92:	e00c      	b.n	8001dae <fsErrName+0xb2>
		case FR_MKFS_ABORTED://		(14) The f_mkfs() aborted due to any problem
			return "f_mkfs() aborted";
 8001d94:	4b16      	ldr	r3, [pc, #88]	; (8001df0 <fsErrName+0xf4>)
 8001d96:	e00a      	b.n	8001dae <fsErrName+0xb2>
		case FR_TIMEOUT://			(15) Could not get a grant to access the volume within defined period
			return "Timeout access";
 8001d98:	4b16      	ldr	r3, [pc, #88]	; (8001df4 <fsErrName+0xf8>)
 8001d9a:	e008      	b.n	8001dae <fsErrName+0xb2>
		case FR_LOCKED://			(16) The operation is rejected according to the file sharing policy
			return "File locked";
 8001d9c:	4b16      	ldr	r3, [pc, #88]	; (8001df8 <fsErrName+0xfc>)
 8001d9e:	e006      	b.n	8001dae <fsErrName+0xb2>
		case FR_NOT_ENOUGH_CORE://	(17) LFN working buffer could not be allocated
			return "Allocated buf error";
 8001da0:	4b16      	ldr	r3, [pc, #88]	; (8001dfc <fsErrName+0x100>)
 8001da2:	e004      	b.n	8001dae <fsErrName+0xb2>
		case FR_TOO_MANY_OPEN_FILES://	(18) Number of open files > _FS_LOCK
			return "Open file limit";
 8001da4:	4b16      	ldr	r3, [pc, #88]	; (8001e00 <fsErrName+0x104>)
 8001da6:	e002      	b.n	8001dae <fsErrName+0xb2>
		case FR_INVALID_PARAMETER://	(19) Given parameter is invalid
			return "Invalid parameter";
 8001da8:	4b16      	ldr	r3, [pc, #88]	; (8001e04 <fsErrName+0x108>)
 8001daa:	e000      	b.n	8001dae <fsErrName+0xb2>
	}
	return "Unknown error";
 8001dac:	4b16      	ldr	r3, [pc, #88]	; (8001e08 <fsErrName+0x10c>)
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	08016030 	.word	0x08016030
 8001dc0:	0801603c 	.word	0x0801603c
 8001dc4:	0801604c 	.word	0x0801604c
 8001dc8:	08016060 	.word	0x08016060
 8001dcc:	08016070 	.word	0x08016070
 8001dd0:	08016078 	.word	0x08016078
 8001dd4:	08016080 	.word	0x08016080
 8001dd8:	0801608c 	.word	0x0801608c
 8001ddc:	0801609c 	.word	0x0801609c
 8001de0:	080160b0 	.word	0x080160b0
 8001de4:	080160c0 	.word	0x080160c0
 8001de8:	080160d8 	.word	0x080160d8
 8001dec:	080160e8 	.word	0x080160e8
 8001df0:	08016100 	.word	0x08016100
 8001df4:	08016114 	.word	0x08016114
 8001df8:	08016124 	.word	0x08016124
 8001dfc:	08016130 	.word	0x08016130
 8001e00:	08016144 	.word	0x08016144
 8001e04:	08016154 	.word	0x08016154
 8001e08:	08016168 	.word	0x08016168

08001e0c <attrName>:
//------------------------------------------------------------------------------------------
static char *attrName(uint8_t attr)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	71fb      	strb	r3, [r7, #7]
	switch (attr) {
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	2b1f      	cmp	r3, #31
 8001e1c:	d84c      	bhi.n	8001eb8 <attrName+0xac>
 8001e1e:	a201      	add	r2, pc, #4	; (adr r2, 8001e24 <attrName+0x18>)
 8001e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e24:	08001ea5 	.word	0x08001ea5
 8001e28:	08001ea9 	.word	0x08001ea9
 8001e2c:	08001eb9 	.word	0x08001eb9
 8001e30:	08001ead 	.word	0x08001ead
 8001e34:	08001eb9 	.word	0x08001eb9
 8001e38:	08001eb9 	.word	0x08001eb9
 8001e3c:	08001eb9 	.word	0x08001eb9
 8001e40:	08001eb9 	.word	0x08001eb9
 8001e44:	08001eb9 	.word	0x08001eb9
 8001e48:	08001eb9 	.word	0x08001eb9
 8001e4c:	08001eb9 	.word	0x08001eb9
 8001e50:	08001eb9 	.word	0x08001eb9
 8001e54:	08001eb9 	.word	0x08001eb9
 8001e58:	08001eb9 	.word	0x08001eb9
 8001e5c:	08001eb9 	.word	0x08001eb9
 8001e60:	08001eb1 	.word	0x08001eb1
 8001e64:	08001eb9 	.word	0x08001eb9
 8001e68:	08001eb9 	.word	0x08001eb9
 8001e6c:	08001eb9 	.word	0x08001eb9
 8001e70:	08001eb9 	.word	0x08001eb9
 8001e74:	08001eb9 	.word	0x08001eb9
 8001e78:	08001eb9 	.word	0x08001eb9
 8001e7c:	08001eb9 	.word	0x08001eb9
 8001e80:	08001eb9 	.word	0x08001eb9
 8001e84:	08001eb9 	.word	0x08001eb9
 8001e88:	08001eb9 	.word	0x08001eb9
 8001e8c:	08001eb9 	.word	0x08001eb9
 8001e90:	08001eb9 	.word	0x08001eb9
 8001e94:	08001eb9 	.word	0x08001eb9
 8001e98:	08001eb9 	.word	0x08001eb9
 8001e9c:	08001eb9 	.word	0x08001eb9
 8001ea0:	08001eb5 	.word	0x08001eb5
		case AM_RDO://	0x01	/* Read only */
			return "Read only";
 8001ea4:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <attrName+0xbc>)
 8001ea6:	e008      	b.n	8001eba <attrName+0xae>
		case AM_HID://	0x02	/* Hidden */
			return "Hidden";
 8001ea8:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <attrName+0xc0>)
 8001eaa:	e006      	b.n	8001eba <attrName+0xae>
		case AM_SYS://	0x04	/* System */
			return "System";
 8001eac:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <attrName+0xc4>)
 8001eae:	e004      	b.n	8001eba <attrName+0xae>
		case AM_DIR://	0x10	/* Directory */
			return "Directory";
 8001eb0:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <attrName+0xc8>)
 8001eb2:	e002      	b.n	8001eba <attrName+0xae>
		case AM_ARC://	0x20	/* Archive */
			return "Archive";
 8001eb4:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <attrName+0xcc>)
 8001eb6:	e000      	b.n	8001eba <attrName+0xae>
		default : return "Unknown";
 8001eb8:	4b08      	ldr	r3, [pc, #32]	; (8001edc <attrName+0xd0>)
	}
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	08016178 	.word	0x08016178
 8001ecc:	08016184 	.word	0x08016184
 8001ed0:	0801618c 	.word	0x0801618c
 8001ed4:	08016194 	.word	0x08016194
 8001ed8:	080161a0 	.word	0x080161a0
 8001edc:	080161a8 	.word	0x080161a8

08001ee0 <drvMount>:
//------------------------------------------------------------------------------------------
bool drvMount(const char *path)
{
 8001ee0:	b590      	push	{r4, r7, lr}
 8001ee2:	b087      	sub	sp, #28
 8001ee4:	af02      	add	r7, sp, #8
 8001ee6:	6078      	str	r0, [r7, #4]
bool ret = false;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	73fb      	strb	r3, [r7, #15]

	if (!validChipID) return ret;
 8001eec:	4b32      	ldr	r3, [pc, #200]	; (8001fb8 <drvMount+0xd8>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	f083 0301 	eor.w	r3, r3, #1
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <drvMount+0x1e>
 8001efa:	7bfb      	ldrb	r3, [r7, #15]
 8001efc:	e057      	b.n	8001fae <drvMount+0xce>

	FRESULT res = f_mount(&FatFs, path, 1);
 8001efe:	2201      	movs	r2, #1
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	482e      	ldr	r0, [pc, #184]	; (8001fbc <drvMount+0xdc>)
 8001f04:	f00e f882 	bl	801000c <f_mount>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	73bb      	strb	r3, [r7, #14]
	if (res == FR_NO_FILESYSTEM) {
 8001f0c:	7bbb      	ldrb	r3, [r7, #14]
 8001f0e:	2b0d      	cmp	r3, #13
 8001f10:	d134      	bne.n	8001f7c <drvMount+0x9c>
		Report(1, "Mount drive '%s' error #%u (%s)\r\n", path, res, fsErrName(res));
 8001f12:	7bbc      	ldrb	r4, [r7, #14]
 8001f14:	7bbb      	ldrb	r3, [r7, #14]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff fef0 	bl	8001cfc <fsErrName>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	4623      	mov	r3, r4
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	4926      	ldr	r1, [pc, #152]	; (8001fc0 <drvMount+0xe0>)
 8001f26:	2001      	movs	r0, #1
 8001f28:	f002 f944 	bl	80041b4 <Report>
		res = f_mkfs(path, FM_FAT, W25qxx_getBlockSize(), fs_work, sizeof(fs_work));
 8001f2c:	f003 ffc0 	bl	8005eb0 <W25qxx_getBlockSize>
 8001f30:	4602      	mov	r2, r0
 8001f32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	4b22      	ldr	r3, [pc, #136]	; (8001fc4 <drvMount+0xe4>)
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f00e fe9b 	bl	8010c78 <f_mkfs>
 8001f42:	4603      	mov	r3, r0
 8001f44:	73bb      	strb	r3, [r7, #14]
		if (!res) {
 8001f46:	7bbb      	ldrb	r3, [r7, #14]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d10c      	bne.n	8001f66 <drvMount+0x86>
			Report(1, "Make FAT fs on drive '%s' OK\r\n", path);
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	491e      	ldr	r1, [pc, #120]	; (8001fc8 <drvMount+0xe8>)
 8001f50:	2001      	movs	r0, #1
 8001f52:	f002 f92f 	bl	80041b4 <Report>
			res = f_mount(&FatFs, path, 1);
 8001f56:	2201      	movs	r2, #1
 8001f58:	6879      	ldr	r1, [r7, #4]
 8001f5a:	4818      	ldr	r0, [pc, #96]	; (8001fbc <drvMount+0xdc>)
 8001f5c:	f00e f856 	bl	801000c <f_mount>
 8001f60:	4603      	mov	r3, r0
 8001f62:	73bb      	strb	r3, [r7, #14]
 8001f64:	e00a      	b.n	8001f7c <drvMount+0x9c>
    	} else {
    		Report(1, "Make FAT fs error #%u (%s)\r\n", res, fsErrName(res));
 8001f66:	7bbc      	ldrb	r4, [r7, #14]
 8001f68:	7bbb      	ldrb	r3, [r7, #14]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff fec6 	bl	8001cfc <fsErrName>
 8001f70:	4603      	mov	r3, r0
 8001f72:	4622      	mov	r2, r4
 8001f74:	4915      	ldr	r1, [pc, #84]	; (8001fcc <drvMount+0xec>)
 8001f76:	2001      	movs	r0, #1
 8001f78:	f002 f91c 	bl	80041b4 <Report>
    	}
	}
	if (!res) {
 8001f7c:	7bbb      	ldrb	r3, [r7, #14]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d107      	bne.n	8001f92 <drvMount+0xb2>
		ret = true;
 8001f82:	2301      	movs	r3, #1
 8001f84:	73fb      	strb	r3, [r7, #15]
		Report(1, "Mount drive '%s' OK\r\n", path);
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	4911      	ldr	r1, [pc, #68]	; (8001fd0 <drvMount+0xf0>)
 8001f8a:	2001      	movs	r0, #1
 8001f8c:	f002 f912 	bl	80041b4 <Report>
 8001f90:	e00c      	b.n	8001fac <drvMount+0xcc>
	} else {
		Report(1, "Mount drive '%s' error #%u (%s)\r\n", path, res, fsErrName(res));
 8001f92:	7bbc      	ldrb	r4, [r7, #14]
 8001f94:	7bbb      	ldrb	r3, [r7, #14]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff feb0 	bl	8001cfc <fsErrName>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	4623      	mov	r3, r4
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	4906      	ldr	r1, [pc, #24]	; (8001fc0 <drvMount+0xe0>)
 8001fa6:	2001      	movs	r0, #1
 8001fa8:	f002 f904 	bl	80041b4 <Report>
	}

	return ret;
 8001fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd90      	pop	{r4, r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20002c99 	.word	0x20002c99
 8001fbc:	20002c9c 	.word	0x20002c9c
 8001fc0:	080161b0 	.word	0x080161b0
 8001fc4:	20001898 	.word	0x20001898
 8001fc8:	080161d4 	.word	0x080161d4
 8001fcc:	080161f4 	.word	0x080161f4
 8001fd0:	08016214 	.word	0x08016214

08001fd4 <dirList>:
//------------------------------------------------------------------------------------------
void dirList(const char *name_dir)
{
 8001fd4:	b590      	push	{r4, r7, lr}
 8001fd6:	b099      	sub	sp, #100	; 0x64
 8001fd8:	af02      	add	r7, sp, #8
 8001fda:	6078      	str	r0, [r7, #4]
DIR dir;

	FRESULT res = f_opendir(&dir, name_dir);
 8001fdc:	f107 0320 	add.w	r3, r7, #32
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f00e fd72 	bl	8010acc <f_opendir>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	if (!res) {
 8001fee:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d14a      	bne.n	800208c <dirList+0xb8>
		FILINFO fno;
		int cnt = -1;
 8001ff6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ffa:	657b      	str	r3, [r7, #84]	; 0x54
		Report(1, "Read folder '%s':\r\n", name_dir);
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	4925      	ldr	r1, [pc, #148]	; (8002094 <dirList+0xc0>)
 8002000:	2001      	movs	r0, #1
 8002002:	f002 f8d7 	bl	80041b4 <Report>
		for (;;) {
			res = f_readdir(&dir, &fno);
 8002006:	f107 0208 	add.w	r2, r7, #8
 800200a:	f107 0320 	add.w	r3, r7, #32
 800200e:	4611      	mov	r1, r2
 8002010:	4618      	mov	r0, r3
 8002012:	f00e fdf4 	bl	8010bfe <f_readdir>
 8002016:	4603      	mov	r3, r0
 8002018:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			cnt++;
 800201c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800201e:	3301      	adds	r3, #1
 8002020:	657b      	str	r3, [r7, #84]	; 0x54
			if (res || fno.fname[0] == 0) {
 8002022:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002026:	2b00      	cmp	r3, #0
 8002028:	d102      	bne.n	8002030 <dirList+0x5c>
 800202a:	7c7b      	ldrb	r3, [r7, #17]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d108      	bne.n	8002042 <dirList+0x6e>
				if (!cnt) Report(0, "\tFolder '%s' is empty\r\n", name_dir);
 8002030:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002032:	2b00      	cmp	r3, #0
 8002034:	d124      	bne.n	8002080 <dirList+0xac>
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	4917      	ldr	r1, [pc, #92]	; (8002098 <dirList+0xc4>)
 800203a:	2000      	movs	r0, #0
 800203c:	f002 f8ba 	bl	80041b4 <Report>
				break;
 8002040:	e01e      	b.n	8002080 <dirList+0xac>
			} else if (fno.fattrib & AM_DIR) {// It is a directory
 8002042:	7c3b      	ldrb	r3, [r7, #16]
 8002044:	f003 0310 	and.w	r3, r3, #16
 8002048:	2b00      	cmp	r3, #0
 800204a:	d008      	beq.n	800205e <dirList+0x8a>
				Report(0, "\tIt is folder -> '%s'\r\n", fno.fname);
 800204c:	f107 0308 	add.w	r3, r7, #8
 8002050:	3309      	adds	r3, #9
 8002052:	461a      	mov	r2, r3
 8002054:	4911      	ldr	r1, [pc, #68]	; (800209c <dirList+0xc8>)
 8002056:	2000      	movs	r0, #0
 8002058:	f002 f8ac 	bl	80041b4 <Report>
 800205c:	e7d3      	b.n	8002006 <dirList+0x32>
			} else {// It is a file.
				Report(0, "\tname:%s, size:%u bytes, attr:%s\r\n",
 800205e:	68bc      	ldr	r4, [r7, #8]
 8002060:	7c3b      	ldrb	r3, [r7, #16]
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff fed2 	bl	8001e0c <attrName>
 8002068:	4601      	mov	r1, r0
 800206a:	f107 0308 	add.w	r3, r7, #8
 800206e:	f103 0209 	add.w	r2, r3, #9
 8002072:	9100      	str	r1, [sp, #0]
 8002074:	4623      	mov	r3, r4
 8002076:	490a      	ldr	r1, [pc, #40]	; (80020a0 <dirList+0xcc>)
 8002078:	2000      	movs	r0, #0
 800207a:	f002 f89b 	bl	80041b4 <Report>
			res = f_readdir(&dir, &fno);
 800207e:	e7c2      	b.n	8002006 <dirList+0x32>
				break;
 8002080:	bf00      	nop
									fno.fname,
									fno.fsize,
									attrName(fno.fattrib));
			}
		}
		f_closedir(&dir);
 8002082:	f107 0320 	add.w	r3, r7, #32
 8002086:	4618      	mov	r0, r3
 8002088:	f00e fd93 	bl	8010bb2 <f_closedir>
	}
}
 800208c:	bf00      	nop
 800208e:	375c      	adds	r7, #92	; 0x5c
 8002090:	46bd      	mov	sp, r7
 8002092:	bd90      	pop	{r4, r7, pc}
 8002094:	0801622c 	.word	0x0801622c
 8002098:	08016240 	.word	0x08016240
 800209c:	08016258 	.word	0x08016258
 80020a0:	08016270 	.word	0x08016270

080020a4 <wrFile>:
//------------------------------------------------------------------------------------------
void wrFile(const char *name, const char *text, bool update)
{
 80020a4:	b590      	push	{r4, r7, lr}
 80020a6:	f5ad 5d86 	sub.w	sp, sp, #4288	; 0x10c0
 80020aa:	b085      	sub	sp, #20
 80020ac:	af02      	add	r7, sp, #8
 80020ae:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80020b2:	f843 0cbc 	str.w	r0, [r3, #-188]
 80020b6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80020ba:	f843 1cc0 	str.w	r1, [r3, #-192]
 80020be:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80020c2:	f803 2cc1 	strb.w	r2, [r3, #-193]
char tmp[128];
FIL fp;
FRESULT res = FR_NO_FILE;
 80020c6:	2304      	movs	r3, #4
 80020c8:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 80020cc:	f102 0207 	add.w	r2, r2, #7
 80020d0:	7013      	strb	r3, [r2, #0]

	sprintf(tmp, "/%s", cfg);
 80020d2:	4b4b      	ldr	r3, [pc, #300]	; (8002200 <wrFile+0x15c>)
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80020da:	f103 0304 	add.w	r3, r3, #4
 80020de:	4949      	ldr	r1, [pc, #292]	; (8002204 <wrFile+0x160>)
 80020e0:	4618      	mov	r0, r3
 80020e2:	f010 f889 	bl	80121f8 <siprintf>
	if (!update) {
 80020e6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80020ea:	f813 3cc1 	ldrb.w	r3, [r3, #-193]
 80020ee:	f083 0301 	eor.w	r3, r3, #1
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d02d      	beq.n	8002154 <wrFile+0xb0>
		res = f_open(&fp, tmp, FA_READ);
 80020f8:	f507 5182 	add.w	r1, r7, #4160	; 0x1040
 80020fc:	f101 0104 	add.w	r1, r1, #4
 8002100:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002104:	3b14      	subs	r3, #20
 8002106:	2201      	movs	r2, #1
 8002108:	4618      	mov	r0, r3
 800210a:	f00d ffc5 	bl	8010098 <f_open>
 800210e:	4603      	mov	r3, r0
 8002110:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 8002114:	f102 0207 	add.w	r2, r2, #7
 8002118:	7013      	strb	r3, [r2, #0]
		if (res == FR_OK) {
 800211a:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 800211e:	f103 0307 	add.w	r3, r3, #7
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d115      	bne.n	8002154 <wrFile+0xb0>
			res = f_close(&fp);
 8002128:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800212c:	3b14      	subs	r3, #20
 800212e:	4618      	mov	r0, r3
 8002130:	f00e fca2 	bl	8010a78 <f_close>
 8002134:	4603      	mov	r3, r0
 8002136:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 800213a:	f102 0207 	add.w	r2, r2, #7
 800213e:	7013      	strb	r3, [r2, #0]
			Report(1, "File '%s' allready present and update has't been ordered\r\n", tmp);
 8002140:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002144:	f103 0304 	add.w	r3, r3, #4
 8002148:	461a      	mov	r2, r3
 800214a:	492f      	ldr	r1, [pc, #188]	; (8002208 <wrFile+0x164>)
 800214c:	2001      	movs	r0, #1
 800214e:	f002 f831 	bl	80041b4 <Report>
 8002152:	e04f      	b.n	80021f4 <wrFile+0x150>
			return;
		}
	}

	res = f_open(&fp, tmp, FA_CREATE_ALWAYS | FA_WRITE);
 8002154:	f507 5182 	add.w	r1, r7, #4160	; 0x1040
 8002158:	f101 0104 	add.w	r1, r1, #4
 800215c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002160:	3b14      	subs	r3, #20
 8002162:	220a      	movs	r2, #10
 8002164:	4618      	mov	r0, r3
 8002166:	f00d ff97 	bl	8010098 <f_open>
 800216a:	4603      	mov	r3, r0
 800216c:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 8002170:	f102 0207 	add.w	r2, r2, #7
 8002174:	7013      	strb	r3, [r2, #0]
	if (!res) {
 8002176:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 800217a:	f103 0307 	add.w	r3, r3, #7
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d11f      	bne.n	80021c4 <wrFile+0x120>
		//Report(1, "Create new file '%s' OK\r\n", tmp);
		//int wrt = 0, dl = strlen(text);
		//wrt =
		f_puts(text, &fp);
 8002184:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002188:	3b14      	subs	r3, #20
 800218a:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800218e:	4619      	mov	r1, r3
 8002190:	f852 0cc0 	ldr.w	r0, [r2, #-192]
 8002194:	f00f fa50 	bl	8011638 <f_puts>
		/*if (wrt != dl) {
			devError |= devFS;
			Report(1, "Error while write file '%s'\r\n", tmp);
		} else*/
		Report(1, "File file '%s' write OK\r\n", tmp);
 8002198:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800219c:	f103 0304 	add.w	r3, r3, #4
 80021a0:	461a      	mov	r2, r3
 80021a2:	491a      	ldr	r1, [pc, #104]	; (800220c <wrFile+0x168>)
 80021a4:	2001      	movs	r0, #1
 80021a6:	f002 f805 	bl	80041b4 <Report>

		res = f_close(&fp);
 80021aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021ae:	3b14      	subs	r3, #20
 80021b0:	4618      	mov	r0, r3
 80021b2:	f00e fc61 	bl	8010a78 <f_close>
 80021b6:	4603      	mov	r3, r0
 80021b8:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 80021bc:	f102 0207 	add.w	r2, r2, #7
 80021c0:	7013      	strb	r3, [r2, #0]
 80021c2:	e017      	b.n	80021f4 <wrFile+0x150>
	} else Report(1, "Create new file '%s' error #%u (%s)\r\n", tmp, res, fsErrName(res));
 80021c4:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 80021c8:	f103 0307 	add.w	r3, r3, #7
 80021cc:	781c      	ldrb	r4, [r3, #0]
 80021ce:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 80021d2:	f103 0307 	add.w	r3, r3, #7
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff fd8f 	bl	8001cfc <fsErrName>
 80021de:	4603      	mov	r3, r0
 80021e0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80021e4:	f102 0204 	add.w	r2, r2, #4
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	4623      	mov	r3, r4
 80021ec:	4908      	ldr	r1, [pc, #32]	; (8002210 <wrFile+0x16c>)
 80021ee:	2001      	movs	r0, #1
 80021f0:	f001 ffe0 	bl	80041b4 <Report>

}
 80021f4:	f507 5786 	add.w	r7, r7, #4288	; 0x10c0
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd90      	pop	{r4, r7, pc}
 80021fe:	bf00      	nop
 8002200:	200001b8 	.word	0x200001b8
 8002204:	08016294 	.word	0x08016294
 8002208:	08016298 	.word	0x08016298
 800220c:	080162d4 	.word	0x080162d4
 8002210:	080162f0 	.word	0x080162f0

08002214 <rdFile>:
//------------------------------------------------------------------------------------------
bool rdFile(const char *name)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	f5ad 5d86 	sub.w	sp, sp, #4288	; 0x10c0
 800221a:	af00      	add	r7, sp, #0
 800221c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002220:	f843 0cbc 	str.w	r0, [r3, #-188]
bool ret = false;
 8002224:	2300      	movs	r3, #0
 8002226:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 800222a:	f102 021f 	add.w	r2, r2, #31
 800222e:	7013      	strb	r3, [r2, #0]
char tmp[128];
FIL fp;

	if (!f_open(&fp, name, FA_READ)) {
 8002230:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002234:	4619      	mov	r1, r3
 8002236:	f107 0320 	add.w	r3, r7, #32
 800223a:	3b14      	subs	r3, #20
 800223c:	2201      	movs	r2, #1
 800223e:	f851 1cbc 	ldr.w	r1, [r1, #-188]
 8002242:	4618      	mov	r0, r3
 8002244:	f00d ff28 	bl	8010098 <f_open>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d12c      	bne.n	80022a8 <rdFile+0x94>
		Report(1, "File '%s' open for reading OK\r\n", name);
 800224e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002252:	f853 2cbc 	ldr.w	r2, [r3, #-188]
 8002256:	491d      	ldr	r1, [pc, #116]	; (80022cc <rdFile+0xb8>)
 8002258:	2001      	movs	r0, #1
 800225a:	f001 ffab 	bl	80041b4 <Report>

		while (f_gets(tmp, sizeof(tmp) - 1, &fp) != NULL) Report(0, "%s", tmp);
 800225e:	e008      	b.n	8002272 <rdFile+0x5e>
 8002260:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002264:	f103 031c 	add.w	r3, r3, #28
 8002268:	461a      	mov	r2, r3
 800226a:	4919      	ldr	r1, [pc, #100]	; (80022d0 <rdFile+0xbc>)
 800226c:	2000      	movs	r0, #0
 800226e:	f001 ffa1 	bl	80041b4 <Report>
 8002272:	f107 0320 	add.w	r3, r7, #32
 8002276:	3b14      	subs	r3, #20
 8002278:	f507 5081 	add.w	r0, r7, #4128	; 0x1020
 800227c:	f100 001c 	add.w	r0, r0, #28
 8002280:	461a      	mov	r2, r3
 8002282:	217f      	movs	r1, #127	; 0x7f
 8002284:	f00f f924 	bl	80114d0 <f_gets>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1e8      	bne.n	8002260 <rdFile+0x4c>

		f_close(&fp);
 800228e:	f107 0320 	add.w	r3, r7, #32
 8002292:	3b14      	subs	r3, #20
 8002294:	4618      	mov	r0, r3
 8002296:	f00e fbef 	bl	8010a78 <f_close>

		ret = true;
 800229a:	2301      	movs	r3, #1
 800229c:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 80022a0:	f102 021f 	add.w	r2, r2, #31
 80022a4:	7013      	strb	r3, [r2, #0]
 80022a6:	e007      	b.n	80022b8 <rdFile+0xa4>
	} else {
		Report(1, "Error while open for reading file '%s'\r\n", name);
 80022a8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80022ac:	f853 2cbc 	ldr.w	r2, [r3, #-188]
 80022b0:	4908      	ldr	r1, [pc, #32]	; (80022d4 <rdFile+0xc0>)
 80022b2:	2001      	movs	r0, #1
 80022b4:	f001 ff7e 	bl	80041b4 <Report>
	}

	return ret;
 80022b8:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80022bc:	f103 031f 	add.w	r3, r3, #31
 80022c0:	781b      	ldrb	r3, [r3, #0]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	f507 5786 	add.w	r7, r7, #4288	; 0x10c0
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	08016318 	.word	0x08016318
 80022d0:	08016338 	.word	0x08016338
 80022d4:	0801633c 	.word	0x0801633c

080022d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022dc:	f5ad 6da2 	sub.w	sp, sp, #1296	; 0x510
 80022e0:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022e2:	f004 f97e 	bl	80065e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022e6:	f001 f8d1 	bl	800348c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022ea:	f001 fb09 	bl	8003900 <MX_GPIO_Init>
  MX_TIM4_Init();
 80022ee:	f001 fa37 	bl	8003760 <MX_TIM4_Init>
  MX_DMA_Init();
 80022f2:	f001 fab3 	bl	800385c <MX_DMA_Init>
  MX_RTC_Init();
 80022f6:	f001 f95b 	bl	80035b0 <MX_RTC_Init>
  MX_USART2_UART_Init();
 80022fa:	f001 fa7f 	bl	80037fc <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80022fe:	f001 f9f1 	bl	80036e4 <MX_SPI2_Init>
  MX_SPI1_Init();
 8002302:	f001 f9b1 	bl	8003668 <MX_SPI1_Init>
  MX_I2C1_Init();
 8002306:	f001 f913 	bl	8003530 <MX_I2C1_Init>
  MX_FATFS_Init();
 800230a:	f00b ffa1 	bl	800e250 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */


  if (HAL_TIM_Base_Start_IT(tikPort) != HAL_OK) devError |= devTIK;
 800230e:	4b4f      	ldr	r3, [pc, #316]	; (800244c <main+0x174>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f009 fee8 	bl	800c0e8 <HAL_TIM_Base_Start_IT>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d006      	beq.n	800232c <main+0x54>
 800231e:	4b4c      	ldr	r3, [pc, #304]	; (8002450 <main+0x178>)
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	b29a      	uxth	r2, r3
 8002328:	4b49      	ldr	r3, [pc, #292]	; (8002450 <main+0x178>)
 800232a:	801a      	strh	r2, [r3, #0]

  for (int8_t i = 0; i < 4; i++) {
 800232c:	2300      	movs	r3, #0
 800232e:	f887 34ef 	strb.w	r3, [r7, #1263]	; 0x4ef
 8002332:	e012      	b.n	800235a <main+0x82>
	  errLedOn(true);
 8002334:	2001      	movs	r0, #1
 8002336:	f001 fe1d 	bl	8003f74 <errLedOn>
	  HAL_Delay(150);
 800233a:	2096      	movs	r0, #150	; 0x96
 800233c:	f004 f9c6 	bl	80066cc <HAL_Delay>
	  errLedOn(false);
 8002340:	2000      	movs	r0, #0
 8002342:	f001 fe17 	bl	8003f74 <errLedOn>
	  HAL_Delay(150);
 8002346:	2096      	movs	r0, #150	; 0x96
 8002348:	f004 f9c0 	bl	80066cc <HAL_Delay>
  for (int8_t i = 0; i < 4; i++) {
 800234c:	f997 34ef 	ldrsb.w	r3, [r7, #1263]	; 0x4ef
 8002350:	b2db      	uxtb	r3, r3
 8002352:	3301      	adds	r3, #1
 8002354:	b2db      	uxtb	r3, r3
 8002356:	f887 34ef 	strb.w	r3, [r7, #1263]	; 0x4ef
 800235a:	f997 34ef 	ldrsb.w	r3, [r7, #1263]	; 0x4ef
 800235e:	2b03      	cmp	r3, #3
 8002360:	dde8      	ble.n	8002334 <main+0x5c>
  }

  if (HAL_UART_Receive_IT(cmdPort, &rxByte, 1) != HAL_OK) devError |= devUART;
 8002362:	4b3c      	ldr	r3, [pc, #240]	; (8002454 <main+0x17c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2201      	movs	r2, #1
 8002368:	493b      	ldr	r1, [pc, #236]	; (8002458 <main+0x180>)
 800236a:	4618      	mov	r0, r3
 800236c:	f00a fb94 	bl	800ca98 <HAL_UART_Receive_IT>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d006      	beq.n	8002384 <main+0xac>
 8002376:	4b36      	ldr	r3, [pc, #216]	; (8002450 <main+0x178>)
 8002378:	881b      	ldrh	r3, [r3, #0]
 800237a:	f043 0302 	orr.w	r3, r3, #2
 800237e:	b29a      	uxth	r2, r3
 8002380:	4b33      	ldr	r3, [pc, #204]	; (8002450 <main+0x178>)
 8002382:	801a      	strh	r2, [r3, #0]

  set_Date(epoch);
 8002384:	4b35      	ldr	r3, [pc, #212]	; (800245c <main+0x184>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f001 fe19 	bl	8003fc0 <set_Date>

  HAL_Delay(250);
 800238e:	20fa      	movs	r0, #250	; 0xfa
 8002390:	f004 f99c 	bl	80066cc <HAL_Delay>

  Report(1, "[que:%u] Start application ver.%s\r\n", cntEvt, ver);
 8002394:	4b32      	ldr	r3, [pc, #200]	; (8002460 <main+0x188>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	b2db      	uxtb	r3, r3
 800239a:	461a      	mov	r2, r3
 800239c:	4b31      	ldr	r3, [pc, #196]	; (8002464 <main+0x18c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4931      	ldr	r1, [pc, #196]	; (8002468 <main+0x190>)
 80023a2:	2001      	movs	r0, #1
 80023a4:	f001 ff06 	bl	80041b4 <Report>

#ifdef SET_W25FLASH
    chipPresent = W25qxx_Init();
 80023a8:	f003 fc96 	bl	8005cd8 <W25qxx_Init>
 80023ac:	4603      	mov	r3, r0
 80023ae:	461a      	mov	r2, r3
 80023b0:	4b2e      	ldr	r3, [pc, #184]	; (800246c <main+0x194>)
 80023b2:	701a      	strb	r2, [r3, #0]
    uint32_t cid = W25qxx_getChipID();
 80023b4:	f003 fd4a 	bl	8005e4c <W25qxx_getChipID>
 80023b8:	f8c7 04c4 	str.w	r0, [r7, #1220]	; 0x4c4
    if ( chipPresent && ((cid >= W25Q10) && (cid <= W25Q128)) ) validChipID = true;
 80023bc:	4b2b      	ldr	r3, [pc, #172]	; (800246c <main+0x194>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00a      	beq.n	80023da <main+0x102>
 80023c4:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d006      	beq.n	80023da <main+0x102>
 80023cc:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 80023d0:	2b08      	cmp	r3, #8
 80023d2:	d802      	bhi.n	80023da <main+0x102>
 80023d4:	4b26      	ldr	r3, [pc, #152]	; (8002470 <main+0x198>)
 80023d6:	2201      	movs	r2, #1
 80023d8:	701a      	strb	r2, [r3, #0]
    list_sector = W25qxx_getPageSize() << 1;
 80023da:	f003 fd5b 	bl	8005e94 <W25qxx_getPageSize>
 80023de:	4603      	mov	r3, r0
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	461a      	mov	r2, r3
 80023e4:	4b23      	ldr	r3, [pc, #140]	; (8002474 <main+0x19c>)
 80023e6:	601a      	str	r2, [r3, #0]
    //
	#ifdef SET_FAT_FS
      	mnt = drvMount(USERPath);
 80023e8:	4823      	ldr	r0, [pc, #140]	; (8002478 <main+0x1a0>)
 80023ea:	f7ff fd79 	bl	8001ee0 <drvMount>
 80023ee:	4603      	mov	r3, r0
 80023f0:	461a      	mov	r2, r3
 80023f2:	4b22      	ldr	r3, [pc, #136]	; (800247c <main+0x1a4>)
 80023f4:	701a      	strb	r2, [r3, #0]
      	if (mnt) {
 80023f6:	4b21      	ldr	r3, [pc, #132]	; (800247c <main+0x1a4>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d078      	beq.n	80024f0 <main+0x218>
      		dirList(dirName);
 80023fe:	4b20      	ldr	r3, [pc, #128]	; (8002480 <main+0x1a8>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff fde6 	bl	8001fd4 <dirList>
      		//
      		cfg_present = rdFile(cfg);
 8002408:	4b1e      	ldr	r3, [pc, #120]	; (8002484 <main+0x1ac>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff ff01 	bl	8002214 <rdFile>
 8002412:	4603      	mov	r3, r0
 8002414:	461a      	mov	r2, r3
 8002416:	4b1c      	ldr	r3, [pc, #112]	; (8002488 <main+0x1b0>)
 8002418:	701a      	strb	r2, [r3, #0]
      		if (!cfg_present) {
 800241a:	4b1b      	ldr	r3, [pc, #108]	; (8002488 <main+0x1b0>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	f083 0301 	eor.w	r3, r3, #1
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b00      	cmp	r3, #0
 8002426:	d063      	beq.n	80024f0 <main+0x218>
      			//
      			char txt[MAX_UART_BUF] = {0};
 8002428:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800242c:	f2a3 43ec 	subw	r3, r3, #1260	; 0x4ec
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	3304      	adds	r3, #4
 8002436:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 800243a:	2100      	movs	r1, #0
 800243c:	4618      	mov	r0, r3
 800243e:	f00f fa69 	bl	8011914 <memset>
      			for (int i = 0; i < MAX_LIST; i++) {
 8002442:	2300      	movs	r3, #0
 8002444:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
 8002448:	e042      	b.n	80024d0 <main+0x1f8>
 800244a:	bf00      	nop
 800244c:	20000008 	.word	0x20000008
 8002450:	20001468 	.word	0x20001468
 8002454:	20000010 	.word	0x20000010
 8002458:	20001478 	.word	0x20001478
 800245c:	20000018 	.word	0x20000018
 8002460:	20001884 	.word	0x20001884
 8002464:	20000004 	.word	0x20000004
 8002468:	08016368 	.word	0x08016368
 800246c:	20002c98 	.word	0x20002c98
 8002470:	20002c99 	.word	0x20002c99
 8002474:	20001890 	.word	0x20001890
 8002478:	20003e38 	.word	0x20003e38
 800247c:	20003ccd 	.word	0x20003ccd
 8002480:	200001bc 	.word	0x200001bc
 8002484:	200001b8 	.word	0x200001b8
 8002488:	20003ccc 	.word	0x20003ccc
      				sprintf(txt+strlen(txt), "%.1f:%s\r\n", list[i].freq, list[i].name);
 800248c:	1d3b      	adds	r3, r7, #4
 800248e:	4618      	mov	r0, r3
 8002490:	f7fd fe9e 	bl	80001d0 <strlen>
 8002494:	4602      	mov	r2, r0
 8002496:	1d3b      	adds	r3, r7, #4
 8002498:	189c      	adds	r4, r3, r2
 800249a:	4abc      	ldr	r2, [pc, #752]	; (800278c <main+0x4b4>)
 800249c:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	; 0x4e8
 80024a0:	015b      	lsls	r3, r3, #5
 80024a2:	4413      	add	r3, r2
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fe f84e 	bl	8000548 <__aeabi_f2d>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	f8d7 14e8 	ldr.w	r1, [r7, #1256]	; 0x4e8
 80024b4:	0149      	lsls	r1, r1, #5
 80024b6:	48b5      	ldr	r0, [pc, #724]	; (800278c <main+0x4b4>)
 80024b8:	4401      	add	r1, r0
 80024ba:	3104      	adds	r1, #4
 80024bc:	9100      	str	r1, [sp, #0]
 80024be:	49b4      	ldr	r1, [pc, #720]	; (8002790 <main+0x4b8>)
 80024c0:	4620      	mov	r0, r4
 80024c2:	f00f fe99 	bl	80121f8 <siprintf>
      			for (int i = 0; i < MAX_LIST; i++) {
 80024c6:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	; 0x4e8
 80024ca:	3301      	adds	r3, #1
 80024cc:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
 80024d0:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	; 0x4e8
 80024d4:	2b17      	cmp	r3, #23
 80024d6:	ddd9      	ble.n	800248c <main+0x1b4>
      			}
      			wrFile(cfg, txt, true);
 80024d8:	4bae      	ldr	r3, [pc, #696]	; (8002794 <main+0x4bc>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	1d39      	adds	r1, r7, #4
 80024de:	2201      	movs	r2, #1
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff fddf 	bl	80020a4 <wrFile>
      			//
      			rdFile(cfg);
 80024e6:	4bab      	ldr	r3, [pc, #684]	; (8002794 <main+0x4bc>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff fe92 	bl	8002214 <rdFile>

#endif

#ifdef SET_NEW_RDA

    rdaID = rda5807_init(&Freq);
 80024f0:	48a9      	ldr	r0, [pc, #676]	; (8002798 <main+0x4c0>)
 80024f2:	f002 fa39 	bl	8004968 <rda5807_init>
 80024f6:	4603      	mov	r3, r0
 80024f8:	461a      	mov	r2, r3
 80024fa:	4ba8      	ldr	r3, [pc, #672]	; (800279c <main+0x4c4>)
 80024fc:	701a      	strb	r2, [r3, #0]
    RSSI = rda5807_rssi();
 80024fe:	f002 faa1 	bl	8004a44 <rda5807_rssi>
 8002502:	4603      	mov	r3, r0
 8002504:	461a      	mov	r2, r3
 8002506:	4ba6      	ldr	r3, [pc, #664]	; (80027a0 <main+0x4c8>)
 8002508:	801a      	strh	r2, [r3, #0]
    rda5807_SetVolume(Volume);
 800250a:	4ba6      	ldr	r3, [pc, #664]	; (80027a4 <main+0x4cc>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f002 fc76 	bl	8004e00 <rda5807_SetVolume>
    rda5807_SetBassBoost(BassBoost);
 8002514:	4ba4      	ldr	r3, [pc, #656]	; (80027a8 <main+0x4d0>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f002 fcb9 	bl	8004e90 <rda5807_SetBassBoost>
    stereo = rda5807_Get_StereoMonoFlag();
 800251e:	f002 fdcd 	bl	80050bc <rda5807_Get_StereoMonoFlag>
 8002522:	4603      	mov	r3, r0
 8002524:	461a      	mov	r2, r3
 8002526:	4ba1      	ldr	r3, [pc, #644]	; (80027ac <main+0x4d4>)
 8002528:	701a      	strb	r2, [r3, #0]
    Chan = rda5807_Get_Channel();
 800252a:	f002 fddf 	bl	80050ec <rda5807_Get_Channel>
 800252e:	4603      	mov	r3, r0
 8002530:	461a      	mov	r2, r3
 8002532:	4b9f      	ldr	r3, [pc, #636]	; (80027b0 <main+0x4d8>)
 8002534:	801a      	strh	r2, [r3, #0]
#endif

#ifdef SET_DISPLAY

	#ifdef FONT_6x8
  		FontDef_t Font_6x8 = { 6, 8, Font6x8 };
 8002536:	4a9f      	ldr	r2, [pc, #636]	; (80027b4 <main+0x4dc>)
 8002538:	f207 4394 	addw	r3, r7, #1172	; 0x494
 800253c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002540:	6018      	str	r0, [r3, #0]
 8002542:	3304      	adds	r3, #4
 8002544:	8019      	strh	r1, [r3, #0]
  		lfnt = &Font_6x8;
 8002546:	4a9c      	ldr	r2, [pc, #624]	; (80027b8 <main+0x4e0>)
 8002548:	f207 4394 	addw	r3, r7, #1172	; 0x494
 800254c:	6013      	str	r3, [r2, #0]
	#endif


  	uint16_t lin1 = 1;
 800254e:	2301      	movs	r3, #1
 8002550:	f8a7 34c2 	strh.w	r3, [r7, #1218]	; 0x4c2
  	uint16_t lin2 = lin1 + Font_6x8.FontHeight;//chipID...
 8002554:	f897 3495 	ldrb.w	r3, [r7, #1173]	; 0x495
 8002558:	b29a      	uxth	r2, r3
 800255a:	f8b7 34c2 	ldrh.w	r3, [r7, #1218]	; 0x4c2
 800255e:	4413      	add	r3, r2
 8002560:	f8a7 34c0 	strh.w	r3, [r7, #1216]	; 0x4c0
  	uint16_t lin3 = lin2 + Font_6x8.FontHeight + 1;//Band...
 8002564:	f897 3495 	ldrb.w	r3, [r7, #1173]	; 0x495
 8002568:	b29a      	uxth	r2, r3
 800256a:	f8b7 34c0 	ldrh.w	r3, [r7, #1216]	; 0x4c0
 800256e:	4413      	add	r3, r2
 8002570:	b29b      	uxth	r3, r3
 8002572:	3301      	adds	r3, #1
 8002574:	f8a7 34be 	strh.w	r3, [r7, #1214]	; 0x4be
  	uint16_t lin4 = lin3 + Font_6x8.FontHeight + 1;//Volume...//Freq...
 8002578:	f897 3495 	ldrb.w	r3, [r7, #1173]	; 0x495
 800257c:	b29a      	uxth	r2, r3
 800257e:	f8b7 34be 	ldrh.w	r3, [r7, #1214]	; 0x4be
 8002582:	4413      	add	r3, r2
 8002584:	b29b      	uxth	r3, r3
 8002586:	3301      	adds	r3, #1
 8002588:	f8a7 34bc 	strh.w	r3, [r7, #1212]	; 0x4bc
  	uint16_t lin5 = lin4 + Font_6x8.FontHeight + 1;//Freq...//Volume...
 800258c:	f897 3495 	ldrb.w	r3, [r7, #1173]	; 0x495
 8002590:	b29a      	uxth	r2, r3
 8002592:	f8b7 34bc 	ldrh.w	r3, [r7, #1212]	; 0x4bc
 8002596:	4413      	add	r3, r2
 8002598:	b29b      	uxth	r3, r3
 800259a:	3301      	adds	r3, #1
 800259c:	f8a7 34ba 	strh.w	r3, [r7, #1210]	; 0x4ba
  	uint16_t lin6 = lin5 + Font_6x8.FontHeight + 1;//Station
 80025a0:	f897 3495 	ldrb.w	r3, [r7, #1173]	; 0x495
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	f8b7 34ba 	ldrh.w	r3, [r7, #1210]	; 0x4ba
 80025aa:	4413      	add	r3, r2
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	3301      	adds	r3, #1
 80025b0:	f8a7 34b8 	strh.w	r3, [r7, #1208]	; 0x4b8
  	char st[64];
  	char sta[32];
  	char stb[32];

  	ST7565_Reset();
 80025b4:	f7fe fd88 	bl	80010c8 <ST7565_Reset>
  	ST7565_Init();
 80025b8:	f7fe fe9e 	bl	80012f8 <ST7565_Init>

  	ST7565_CMD_DISPLAY(CMD_DISPLAY_ON);
 80025bc:	20af      	movs	r0, #175	; 0xaf
 80025be:	f7fe feb5 	bl	800132c <ST7565_CMD_DISPLAY>

    int dl = sprintf(tmp, "Ver.%s", ver);
 80025c2:	4b7e      	ldr	r3, [pc, #504]	; (80027bc <main+0x4e4>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	461a      	mov	r2, r3
 80025c8:	497d      	ldr	r1, [pc, #500]	; (80027c0 <main+0x4e8>)
 80025ca:	487e      	ldr	r0, [pc, #504]	; (80027c4 <main+0x4ec>)
 80025cc:	f00f fe14 	bl	80121f8 <siprintf>
 80025d0:	f8c7 04e4 	str.w	r0, [r7, #1252]	; 0x4e4
    uint16_t x = ((SCREEN_WIDTH - (Font_6x8.FontWidth * dl)) >> 1) & 0x7f;
 80025d4:	f897 3494 	ldrb.w	r3, [r7, #1172]	; 0x494
 80025d8:	461a      	mov	r2, r3
 80025da:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	; 0x4e4
 80025de:	fb02 f303 	mul.w	r3, r2, r3
 80025e2:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80025e6:	105b      	asrs	r3, r3, #1
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025ee:	f8a7 34b6 	strh.w	r3, [r7, #1206]	; 0x4b6
    ST7565_Print(x, SCREEN_HEIGHT - Font_6x8.FontHeight, tmp, &Font_6x8, 1, PIX_ON);//печатаем надпись с указаным шрифтом и цветом(PIX_ON-белый, PIX_OFF-черный)
 80025f2:	f9b7 04b6 	ldrsh.w	r0, [r7, #1206]	; 0x4b6
 80025f6:	f897 3495 	ldrb.w	r3, [r7, #1173]	; 0x495
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002600:	b29b      	uxth	r3, r3
 8002602:	b219      	sxth	r1, r3
 8002604:	f207 4394 	addw	r3, r7, #1172	; 0x494
 8002608:	2201      	movs	r2, #1
 800260a:	9201      	str	r2, [sp, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	9200      	str	r2, [sp, #0]
 8002610:	4a6c      	ldr	r2, [pc, #432]	; (80027c4 <main+0x4ec>)
 8002612:	f7ff f8ab 	bl	800176c <ST7565_Print>

	#if defined(SET_RDA_CHIP) || defined(SET_NEW_RDA)
    	int il = sprintf(st, "RDA5807 chipID:0x%x", rdaID);
 8002616:	4b61      	ldr	r3, [pc, #388]	; (800279c <main+0x4c4>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	461a      	mov	r2, r3
 800261c:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8002620:	4969      	ldr	r1, [pc, #420]	; (80027c8 <main+0x4f0>)
 8002622:	4618      	mov	r0, r3
 8002624:	f00f fde8 	bl	80121f8 <siprintf>
 8002628:	f8c7 04e0 	str.w	r0, [r7, #1248]	; 0x4e0
    	uint16_t xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * il)) >> 1) & 0x7f;
 800262c:	f897 3494 	ldrb.w	r3, [r7, #1172]	; 0x494
 8002630:	461a      	mov	r2, r3
 8002632:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	; 0x4e0
 8002636:	fb02 f303 	mul.w	r3, r2, r3
 800263a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800263e:	105b      	asrs	r3, r3, #1
 8002640:	b29b      	uxth	r3, r3
 8002642:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002646:	f8a7 34de 	strh.w	r3, [r7, #1246]	; 0x4de
    	if (!xf) xf = 1;
 800264a:	f8b7 34de 	ldrh.w	r3, [r7, #1246]	; 0x4de
 800264e:	2b00      	cmp	r3, #0
 8002650:	d102      	bne.n	8002658 <main+0x380>
 8002652:	2301      	movs	r3, #1
 8002654:	f8a7 34de 	strh.w	r3, [r7, #1246]	; 0x4de
    	ST7565_Print(xf, lin2, st, &Font_6x8, 1, PIX_ON);
 8002658:	f9b7 04de 	ldrsh.w	r0, [r7, #1246]	; 0x4de
 800265c:	f9b7 14c0 	ldrsh.w	r1, [r7, #1216]	; 0x4c0
 8002660:	f207 4394 	addw	r3, r7, #1172	; 0x494
 8002664:	f207 4254 	addw	r2, r7, #1108	; 0x454
 8002668:	2401      	movs	r4, #1
 800266a:	9401      	str	r4, [sp, #4]
 800266c:	2401      	movs	r4, #1
 800266e:	9400      	str	r4, [sp, #0]
 8002670:	f7ff f87c 	bl	800176c <ST7565_Print>

    	int it = sprintf(stb, "FM Band:%s", allBands[Band]);//(uint16_t)lBand, (uint16_t)rBand);
 8002674:	4b55      	ldr	r3, [pc, #340]	; (80027cc <main+0x4f4>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	461a      	mov	r2, r3
 800267a:	4b55      	ldr	r3, [pc, #340]	; (80027d0 <main+0x4f8>)
 800267c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002680:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8002684:	4953      	ldr	r1, [pc, #332]	; (80027d4 <main+0x4fc>)
 8002686:	4618      	mov	r0, r3
 8002688:	f00f fdb6 	bl	80121f8 <siprintf>
 800268c:	f8c7 04b0 	str.w	r0, [r7, #1200]	; 0x4b0
    	int lit = it;
 8002690:	f8d7 34b0 	ldr.w	r3, [r7, #1200]	; 0x4b0
 8002694:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
    	xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * it)) >> 1) & 0x7f;
 8002698:	f897 3494 	ldrb.w	r3, [r7, #1172]	; 0x494
 800269c:	461a      	mov	r2, r3
 800269e:	f8d7 34b0 	ldr.w	r3, [r7, #1200]	; 0x4b0
 80026a2:	fb02 f303 	mul.w	r3, r2, r3
 80026a6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80026aa:	105b      	asrs	r3, r3, #1
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026b2:	f8a7 34de 	strh.w	r3, [r7, #1246]	; 0x4de
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 80026b6:	f8b7 34de 	ldrh.w	r3, [r7, #1246]	; 0x4de
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <main+0x3ee>
 80026be:	f8b7 34de 	ldrh.w	r3, [r7, #1246]	; 0x4de
 80026c2:	2b7d      	cmp	r3, #125	; 0x7d
 80026c4:	d902      	bls.n	80026cc <main+0x3f4>
 80026c6:	2301      	movs	r3, #1
 80026c8:	f8a7 34de 	strh.w	r3, [r7, #1246]	; 0x4de
    	ST7565_Print(xf, lin3, stb, &Font_6x8, 1, PIX_ON);
 80026cc:	f9b7 04de 	ldrsh.w	r0, [r7, #1246]	; 0x4de
 80026d0:	f9b7 14be 	ldrsh.w	r1, [r7, #1214]	; 0x4be
 80026d4:	f207 4394 	addw	r3, r7, #1172	; 0x494
 80026d8:	f207 4214 	addw	r2, r7, #1044	; 0x414
 80026dc:	2401      	movs	r4, #1
 80026de:	9401      	str	r4, [sp, #4]
 80026e0:	2401      	movs	r4, #1
 80026e2:	9400      	str	r4, [sp, #0]
 80026e4:	f7ff f842 	bl	800176c <ST7565_Print>

    	int im = sprintf(st, "Vol:%u Bass:%u", Volume, BassBoost);
 80026e8:	4b2e      	ldr	r3, [pc, #184]	; (80027a4 <main+0x4cc>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	461a      	mov	r2, r3
 80026ee:	4b2e      	ldr	r3, [pc, #184]	; (80027a8 <main+0x4d0>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	f207 4054 	addw	r0, r7, #1108	; 0x454
 80026f6:	4938      	ldr	r1, [pc, #224]	; (80027d8 <main+0x500>)
 80026f8:	f00f fd7e 	bl	80121f8 <siprintf>
 80026fc:	f8c7 04ac 	str.w	r0, [r7, #1196]	; 0x4ac
    	int lim = im;
 8002700:	f8d7 34ac 	ldr.w	r3, [r7, #1196]	; 0x4ac
 8002704:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
    	xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * im)) >> 1) & 0x7f;
 8002708:	f897 3494 	ldrb.w	r3, [r7, #1172]	; 0x494
 800270c:	461a      	mov	r2, r3
 800270e:	f8d7 34ac 	ldr.w	r3, [r7, #1196]	; 0x4ac
 8002712:	fb02 f303 	mul.w	r3, r2, r3
 8002716:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800271a:	105b      	asrs	r3, r3, #1
 800271c:	b29b      	uxth	r3, r3
 800271e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002722:	f8a7 34de 	strh.w	r3, [r7, #1246]	; 0x4de
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 8002726:	f8b7 34de 	ldrh.w	r3, [r7, #1246]	; 0x4de
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <main+0x45e>
 800272e:	f8b7 34de 	ldrh.w	r3, [r7, #1246]	; 0x4de
 8002732:	2b7d      	cmp	r3, #125	; 0x7d
 8002734:	d902      	bls.n	800273c <main+0x464>
 8002736:	2301      	movs	r3, #1
 8002738:	f8a7 34de 	strh.w	r3, [r7, #1246]	; 0x4de
    	ST7565_Print(xf, lin4, st, &Font_6x8, 1, PIX_ON);
 800273c:	f9b7 04de 	ldrsh.w	r0, [r7, #1246]	; 0x4de
 8002740:	f9b7 14bc 	ldrsh.w	r1, [r7, #1212]	; 0x4bc
 8002744:	f207 4394 	addw	r3, r7, #1172	; 0x494
 8002748:	f207 4254 	addw	r2, r7, #1108	; 0x454
 800274c:	2401      	movs	r4, #1
 800274e:	9401      	str	r4, [sp, #4]
 8002750:	2401      	movs	r4, #1
 8002752:	9400      	str	r4, [sp, #0]
 8002754:	f7ff f80a 	bl	800176c <ST7565_Print>

    	if (stereo)
 8002758:	4b14      	ldr	r3, [pc, #80]	; (80027ac <main+0x4d4>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d03f      	beq.n	80027e0 <main+0x508>
    		il = sprintf(st, "Rssi:%u Freq:%.1f S", RSSI, Freq);
 8002760:	4b0f      	ldr	r3, [pc, #60]	; (80027a0 <main+0x4c8>)
 8002762:	881b      	ldrh	r3, [r3, #0]
 8002764:	461c      	mov	r4, r3
 8002766:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <main+0x4c0>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f7fd feec 	bl	8000548 <__aeabi_f2d>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	f207 4054 	addw	r0, r7, #1108	; 0x454
 8002778:	e9cd 2300 	strd	r2, r3, [sp]
 800277c:	4622      	mov	r2, r4
 800277e:	4917      	ldr	r1, [pc, #92]	; (80027dc <main+0x504>)
 8002780:	f00f fd3a 	bl	80121f8 <siprintf>
 8002784:	f8c7 04e0 	str.w	r0, [r7, #1248]	; 0x4e0
 8002788:	e03e      	b.n	8002808 <main+0x530>
 800278a:	bf00      	nop
 800278c:	080172d0 	.word	0x080172d0
 8002790:	0801638c 	.word	0x0801638c
 8002794:	200001b8 	.word	0x200001b8
 8002798:	200001c0 	.word	0x200001c0
 800279c:	20003ce0 	.word	0x20003ce0
 80027a0:	20003cde 	.word	0x20003cde
 80027a4:	200001cb 	.word	0x200001cb
 80027a8:	20003ce2 	.word	0x20003ce2
 80027ac:	20003ce4 	.word	0x20003ce4
 80027b0:	20003cdc 	.word	0x20003cdc
 80027b4:	08016674 	.word	0x08016674
 80027b8:	20003cd0 	.word	0x20003cd0
 80027bc:	20000004 	.word	0x20000004
 80027c0:	08016398 	.word	0x08016398
 80027c4:	20000fe8 	.word	0x20000fe8
 80027c8:	080163a0 	.word	0x080163a0
 80027cc:	200001c8 	.word	0x200001c8
 80027d0:	200001d4 	.word	0x200001d4
 80027d4:	080163b4 	.word	0x080163b4
 80027d8:	080163c0 	.word	0x080163c0
 80027dc:	080163d0 	.word	0x080163d0
    	else
    		il = sprintf(st, "Rssi:%u Freq:%.1f", RSSI, Freq);
 80027e0:	4baf      	ldr	r3, [pc, #700]	; (8002aa0 <main+0x7c8>)
 80027e2:	881b      	ldrh	r3, [r3, #0]
 80027e4:	461c      	mov	r4, r3
 80027e6:	4baf      	ldr	r3, [pc, #700]	; (8002aa4 <main+0x7cc>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7fd feac 	bl	8000548 <__aeabi_f2d>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	f207 4054 	addw	r0, r7, #1108	; 0x454
 80027f8:	e9cd 2300 	strd	r2, r3, [sp]
 80027fc:	4622      	mov	r2, r4
 80027fe:	49aa      	ldr	r1, [pc, #680]	; (8002aa8 <main+0x7d0>)
 8002800:	f00f fcfa 	bl	80121f8 <siprintf>
 8002804:	f8c7 04e0 	str.w	r0, [r7, #1248]	; 0x4e0
    	int lil = il;
 8002808:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	; 0x4e0
 800280c:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
    	xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * il)) >> 1) & 0x7f;
 8002810:	f897 3494 	ldrb.w	r3, [r7, #1172]	; 0x494
 8002814:	461a      	mov	r2, r3
 8002816:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	; 0x4e0
 800281a:	fb02 f303 	mul.w	r3, r2, r3
 800281e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002822:	105b      	asrs	r3, r3, #1
 8002824:	b29b      	uxth	r3, r3
 8002826:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800282a:	f8a7 34de 	strh.w	r3, [r7, #1246]	; 0x4de
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 800282e:	f8b7 34de 	ldrh.w	r3, [r7, #1246]	; 0x4de
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <main+0x566>
 8002836:	f8b7 34de 	ldrh.w	r3, [r7, #1246]	; 0x4de
 800283a:	2b7d      	cmp	r3, #125	; 0x7d
 800283c:	d902      	bls.n	8002844 <main+0x56c>
 800283e:	2301      	movs	r3, #1
 8002840:	f8a7 34de 	strh.w	r3, [r7, #1246]	; 0x4de
    	ST7565_Print(xf, lin5, st, &Font_6x8, 1, PIX_ON);
 8002844:	f9b7 04de 	ldrsh.w	r0, [r7, #1246]	; 0x4de
 8002848:	f9b7 14ba 	ldrsh.w	r1, [r7, #1210]	; 0x4ba
 800284c:	f207 4394 	addw	r3, r7, #1172	; 0x494
 8002850:	f207 4254 	addw	r2, r7, #1108	; 0x454
 8002854:	2401      	movs	r4, #1
 8002856:	9401      	str	r4, [sp, #4]
 8002858:	2401      	movs	r4, #1
 800285a:	9400      	str	r4, [sp, #0]
 800285c:	f7fe ff86 	bl	800176c <ST7565_Print>

    	int ia = sprintf(sta, "%s", nameStation(Freq));
 8002860:	4b90      	ldr	r3, [pc, #576]	; (8002aa4 <main+0x7cc>)
 8002862:	edd3 7a00 	vldr	s15, [r3]
 8002866:	eeb0 0a67 	vmov.f32	s0, s15
 800286a:	f001 fa67 	bl	8003d3c <nameStation>
 800286e:	4602      	mov	r2, r0
 8002870:	f207 4334 	addw	r3, r7, #1076	; 0x434
 8002874:	498d      	ldr	r1, [pc, #564]	; (8002aac <main+0x7d4>)
 8002876:	4618      	mov	r0, r3
 8002878:	f00f fcbe 	bl	80121f8 <siprintf>
 800287c:	f8c7 04a8 	str.w	r0, [r7, #1192]	; 0x4a8
    	int lia = ia;
 8002880:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
 8002884:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
    	xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * ia)) >> 1) & 0x7f;
 8002888:	f897 3494 	ldrb.w	r3, [r7, #1172]	; 0x494
 800288c:	461a      	mov	r2, r3
 800288e:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
 8002892:	fb02 f303 	mul.w	r3, r2, r3
 8002896:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800289a:	105b      	asrs	r3, r3, #1
 800289c:	b29b      	uxth	r3, r3
 800289e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028a2:	f8a7 34de 	strh.w	r3, [r7, #1246]	; 0x4de
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 80028a6:	f8b7 34de 	ldrh.w	r3, [r7, #1246]	; 0x4de
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <main+0x5de>
 80028ae:	f8b7 34de 	ldrh.w	r3, [r7, #1246]	; 0x4de
 80028b2:	2b7d      	cmp	r3, #125	; 0x7d
 80028b4:	d902      	bls.n	80028bc <main+0x5e4>
 80028b6:	2301      	movs	r3, #1
 80028b8:	f8a7 34de 	strh.w	r3, [r7, #1246]	; 0x4de
    	ST7565_Print(xf, lin6, sta, &Font_6x8, 1, PIX_ON);
 80028bc:	f9b7 04de 	ldrsh.w	r0, [r7, #1246]	; 0x4de
 80028c0:	f9b7 14b8 	ldrsh.w	r1, [r7, #1208]	; 0x4b8
 80028c4:	f207 4394 	addw	r3, r7, #1172	; 0x494
 80028c8:	f207 4234 	addw	r2, r7, #1076	; 0x434
 80028cc:	2401      	movs	r4, #1
 80028ce:	9401      	str	r4, [sp, #4]
 80028d0:	2401      	movs	r4, #1
 80028d2:	9400      	str	r4, [sp, #0]
 80028d4:	f7fe ff4a 	bl	800176c <ST7565_Print>

    	Report(1, "ChipID:0x%x Chan:%u Freq:%.2f %s RSSI:%u Band:%s Vol:%u BassEn:%u\r\n",
 80028d8:	4b75      	ldr	r3, [pc, #468]	; (8002ab0 <main+0x7d8>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	461e      	mov	r6, r3
 80028de:	4b75      	ldr	r3, [pc, #468]	; (8002ab4 <main+0x7dc>)
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	4698      	mov	r8, r3
 80028e4:	4b6f      	ldr	r3, [pc, #444]	; (8002aa4 <main+0x7cc>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7fd fe2d 	bl	8000548 <__aeabi_f2d>
 80028ee:	4602      	mov	r2, r0
 80028f0:	460b      	mov	r3, r1
 80028f2:	496b      	ldr	r1, [pc, #428]	; (8002aa0 <main+0x7c8>)
 80028f4:	8809      	ldrh	r1, [r1, #0]
 80028f6:	460c      	mov	r4, r1
 80028f8:	496f      	ldr	r1, [pc, #444]	; (8002ab8 <main+0x7e0>)
 80028fa:	7809      	ldrb	r1, [r1, #0]
 80028fc:	4608      	mov	r0, r1
 80028fe:	496f      	ldr	r1, [pc, #444]	; (8002abc <main+0x7e4>)
 8002900:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8002904:	486e      	ldr	r0, [pc, #440]	; (8002ac0 <main+0x7e8>)
 8002906:	7800      	ldrb	r0, [r0, #0]
 8002908:	4605      	mov	r5, r0
 800290a:	486e      	ldr	r0, [pc, #440]	; (8002ac4 <main+0x7ec>)
 800290c:	7800      	ldrb	r0, [r0, #0]
 800290e:	9006      	str	r0, [sp, #24]
 8002910:	9505      	str	r5, [sp, #20]
 8002912:	9104      	str	r1, [sp, #16]
 8002914:	9403      	str	r4, [sp, #12]
 8002916:	f207 4134 	addw	r1, r7, #1076	; 0x434
 800291a:	9102      	str	r1, [sp, #8]
 800291c:	e9cd 2300 	strd	r2, r3, [sp]
 8002920:	4643      	mov	r3, r8
 8002922:	4632      	mov	r2, r6
 8002924:	4968      	ldr	r1, [pc, #416]	; (8002ac8 <main+0x7f0>)
 8002926:	2001      	movs	r0, #1
 8002928:	f001 fc44 	bl	80041b4 <Report>
    			rdaID, Chan, Freq, sta, RSSI, allBands[Band], Volume, BassBoost);
	#endif

    ST7565_DrawRectangle(0, Font_6x8.FontHeight, SCREEN_WIDTH - 1, SCREEN_HEIGHT - (Font_6x8.FontHeight << 1) - 2, PIX_ON);
 800292c:	f897 3495 	ldrb.w	r3, [r7, #1173]	; 0x495
 8002930:	b219      	sxth	r1, r3
 8002932:	f897 3495 	ldrb.w	r3, [r7, #1173]	; 0x495
 8002936:	b29b      	uxth	r3, r3
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	b29b      	uxth	r3, r3
 800293c:	f1c3 033e 	rsb	r3, r3, #62	; 0x3e
 8002940:	b29b      	uxth	r3, r3
 8002942:	b21b      	sxth	r3, r3
 8002944:	2201      	movs	r2, #1
 8002946:	9200      	str	r2, [sp, #0]
 8002948:	227f      	movs	r2, #127	; 0x7f
 800294a:	2000      	movs	r0, #0
 800294c:	f7ff f8e5 	bl	8001b1a <ST7565_DrawRectangle>
    ST7565_DrawFilledRectangle(0, 0, SCREEN_WIDTH - 1, Font_6x8.FontHeight, PIX_ON);
 8002950:	f897 3495 	ldrb.w	r3, [r7, #1173]	; 0x495
 8002954:	b21b      	sxth	r3, r3
 8002956:	2201      	movs	r2, #1
 8002958:	9200      	str	r2, [sp, #0]
 800295a:	227f      	movs	r2, #127	; 0x7f
 800295c:	2100      	movs	r1, #0
 800295e:	2000      	movs	r0, #0
 8002960:	f7ff f95d 	bl	8001c1e <ST7565_DrawFilledRectangle>
    ST7565_Update();
 8002964:	f7fe fd52 	bl	800140c <ST7565_Update>

    startSec = true;
 8002968:	4b58      	ldr	r3, [pc, #352]	; (8002acc <main+0x7f4>)
 800296a:	2201      	movs	r2, #1
 800296c:	701a      	strb	r2, [r3, #0]

#endif

    uint16_t lastErr = devOK;
 800296e:	2300      	movs	r3, #0
 8002970:	f8a7 34dc 	strh.w	r3, [r7, #1244]	; 0x4dc

    putEvt(evt_Freq);
 8002974:	200c      	movs	r0, #12
 8002976:	f001 f92f 	bl	8003bd8 <putEvt>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


    while (!restart) {
 800297a:	f000 bd20 	b.w	80033be <main+0x10e6>


#ifdef SET_FIFO_MODE
    	evt = getEvt();
 800297e:	f001 f99d 	bl	8003cbc <getEvt>
 8002982:	4603      	mov	r3, r0
 8002984:	4a52      	ldr	r2, [pc, #328]	; (8002ad0 <main+0x7f8>)
 8002986:	6013      	str	r3, [r2, #0]
    	if (evt != evt_None) {
 8002988:	4b51      	ldr	r3, [pc, #324]	; (8002ad0 <main+0x7f8>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002990:	f000 84fd 	beq.w	800338e <main+0x10b6>
    		cntEvt = getEvtCount();
 8002994:	f001 f914 	bl	8003bc0 <getEvtCount>
 8002998:	4603      	mov	r3, r0
 800299a:	461a      	mov	r2, r3
 800299c:	4b4d      	ldr	r3, [pc, #308]	; (8002ad4 <main+0x7fc>)
 800299e:	701a      	strb	r2, [r3, #0]
    		if (evt != evt_Sec) {
 80029a0:	4b4b      	ldr	r3, [pc, #300]	; (8002ad0 <main+0x7f8>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	d050      	beq.n	8002a4a <main+0x772>
    			Report(1, "[que:%u] get event '%s'\r\n", cntEvt, str_cmds[evt]);
 80029a8:	4b4a      	ldr	r3, [pc, #296]	; (8002ad4 <main+0x7fc>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	4619      	mov	r1, r3
 80029b0:	4b47      	ldr	r3, [pc, #284]	; (8002ad0 <main+0x7f8>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a48      	ldr	r2, [pc, #288]	; (8002ad8 <main+0x800>)
 80029b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ba:	460a      	mov	r2, r1
 80029bc:	4947      	ldr	r1, [pc, #284]	; (8002adc <main+0x804>)
 80029be:	2001      	movs	r0, #1
 80029c0:	f001 fbf8 	bl	80041b4 <Report>
#ifdef SET_DISPLAY
    			ST7565_DrawFilledRectangle(0, SCREEN_HEIGHT - Font_6x8.FontHeight, SCREEN_WIDTH - 1, Font_6x8.FontHeight, PIX_OFF);
 80029c4:	f897 3495 	ldrb.w	r3, [r7, #1173]	; 0x495
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	b219      	sxth	r1, r3
 80029d2:	f897 3495 	ldrb.w	r3, [r7, #1173]	; 0x495
 80029d6:	b21b      	sxth	r3, r3
 80029d8:	2200      	movs	r2, #0
 80029da:	9200      	str	r2, [sp, #0]
 80029dc:	227f      	movs	r2, #127	; 0x7f
 80029de:	2000      	movs	r0, #0
 80029e0:	f7ff f91d 	bl	8001c1e <ST7565_DrawFilledRectangle>
    			dl = sprintf(tmp, "evt(%u) : %s", cntEvt, str_cmds[evt]);
 80029e4:	4b3b      	ldr	r3, [pc, #236]	; (8002ad4 <main+0x7fc>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	4619      	mov	r1, r3
 80029ec:	4b38      	ldr	r3, [pc, #224]	; (8002ad0 <main+0x7f8>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a39      	ldr	r2, [pc, #228]	; (8002ad8 <main+0x800>)
 80029f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f6:	460a      	mov	r2, r1
 80029f8:	4939      	ldr	r1, [pc, #228]	; (8002ae0 <main+0x808>)
 80029fa:	483a      	ldr	r0, [pc, #232]	; (8002ae4 <main+0x80c>)
 80029fc:	f00f fbfc 	bl	80121f8 <siprintf>
 8002a00:	f8c7 04e4 	str.w	r0, [r7, #1252]	; 0x4e4
    			x = ((SCREEN_WIDTH - (Font_6x8.FontWidth * dl)) >> 1) & 0x7f;
 8002a04:	f897 3494 	ldrb.w	r3, [r7, #1172]	; 0x494
 8002a08:	461a      	mov	r2, r3
 8002a0a:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	; 0x4e4
 8002a0e:	fb02 f303 	mul.w	r3, r2, r3
 8002a12:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002a16:	105b      	asrs	r3, r3, #1
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a1e:	f8a7 34b6 	strh.w	r3, [r7, #1206]	; 0x4b6
    			ST7565_Print(x, SCREEN_HEIGHT - Font_6x8.FontHeight, tmp, &Font_6x8, 1, PIX_ON);//печатаем надпись с указаным шрифтом и цветом(PIX_ON-белый, PIX_OFF-черный)
 8002a22:	f9b7 04b6 	ldrsh.w	r0, [r7, #1206]	; 0x4b6
 8002a26:	f897 3495 	ldrb.w	r3, [r7, #1173]	; 0x495
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	b219      	sxth	r1, r3
 8002a34:	f207 4394 	addw	r3, r7, #1172	; 0x494
 8002a38:	2201      	movs	r2, #1
 8002a3a:	9201      	str	r2, [sp, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	9200      	str	r2, [sp, #0]
 8002a40:	4a28      	ldr	r2, [pc, #160]	; (8002ae4 <main+0x80c>)
 8002a42:	f7fe fe93 	bl	800176c <ST7565_Print>
    			ST7565_Update();
 8002a46:	f7fe fce1 	bl	800140c <ST7565_Update>
#endif
    		}
    		switch (evt) {
 8002a4a:	4b21      	ldr	r3, [pc, #132]	; (8002ad0 <main+0x7f8>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2b10      	cmp	r3, #16
 8002a50:	f200 848d 	bhi.w	800336e <main+0x1096>
 8002a54:	a201      	add	r2, pc, #4	; (adr r2, 8002a5c <main+0x784>)
 8002a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a5a:	bf00      	nop
 8002a5c:	080030ab 	.word	0x080030ab
 8002a60:	080030f9 	.word	0x080030f9
 8002a64:	0800316d 	.word	0x0800316d
 8002a68:	0800318d 	.word	0x0800318d
 8002a6c:	0800319f 	.word	0x0800319f
 8002a70:	08003343 	.word	0x08003343
 8002a74:	0800319f 	.word	0x0800319f
 8002a78:	080032c1 	.word	0x080032c1
 8002a7c:	08002e51 	.word	0x08002e51
 8002a80:	08002e41 	.word	0x08002e41
 8002a84:	08003093 	.word	0x08003093
 8002a88:	08002e21 	.word	0x08002e21
 8002a8c:	08002c6b 	.word	0x08002c6b
 8002a90:	08002c0f 	.word	0x08002c0f
 8002a94:	08002bb3 	.word	0x08002bb3
 8002a98:	08002b93 	.word	0x08002b93
 8002a9c:	08002ae9 	.word	0x08002ae9
 8002aa0:	20003cde 	.word	0x20003cde
 8002aa4:	200001c0 	.word	0x200001c0
 8002aa8:	080163e4 	.word	0x080163e4
 8002aac:	08016338 	.word	0x08016338
 8002ab0:	20003ce0 	.word	0x20003ce0
 8002ab4:	20003cdc 	.word	0x20003cdc
 8002ab8:	200001c8 	.word	0x200001c8
 8002abc:	200001d4 	.word	0x200001d4
 8002ac0:	200001cb 	.word	0x200001cb
 8002ac4:	20003ce2 	.word	0x20003ce2
 8002ac8:	080163f8 	.word	0x080163f8
 8002acc:	20003cce 	.word	0x20003cce
 8002ad0:	200001a4 	.word	0x200001a4
 8002ad4:	20001884 	.word	0x20001884
 8002ad8:	20000060 	.word	0x20000060
 8002adc:	0801643c 	.word	0x0801643c
 8002ae0:	08016458 	.word	0x08016458
 8002ae4:	20000fe8 	.word	0x20000fe8
    			case evt_Band:
    				Band = newBand;
 8002ae8:	4bb4      	ldr	r3, [pc, #720]	; (8002dbc <main+0xae4>)
 8002aea:	781a      	ldrb	r2, [r3, #0]
 8002aec:	4bb4      	ldr	r3, [pc, #720]	; (8002dc0 <main+0xae8>)
 8002aee:	701a      	strb	r2, [r3, #0]
    				if (!rda5807_Set_Band(Band)) {
 8002af0:	4bb3      	ldr	r3, [pc, #716]	; (8002dc0 <main+0xae8>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f002 fb0b 	bl	8005110 <rda5807_Set_Band>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f040 842d 	bne.w	800335c <main+0x1084>
    					sprintf(stb, "FM Band:%s", allBands[Band]);//(uint16_t)lBand, (uint16_t)rBand);
 8002b02:	4baf      	ldr	r3, [pc, #700]	; (8002dc0 <main+0xae8>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	461a      	mov	r2, r3
 8002b08:	4bae      	ldr	r3, [pc, #696]	; (8002dc4 <main+0xaec>)
 8002b0a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002b0e:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8002b12:	49ad      	ldr	r1, [pc, #692]	; (8002dc8 <main+0xaf0>)
 8002b14:	4618      	mov	r0, r3
 8002b16:	f00f fb6f 	bl	80121f8 <siprintf>
    					showLine(stb, lin3, &lit, true);
 8002b1a:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8002b1e:	f8b7 14be 	ldrh.w	r1, [r7, #1214]	; 0x4be
 8002b22:	f207 4014 	addw	r0, r7, #1044	; 0x414
 8002b26:	2301      	movs	r3, #1
 8002b28:	f001 f9b6 	bl	8003e98 <showLine>
    					Report(1, "[que:%u] set new band=%u '%s'\r\n", cntEvt, Band, allBands[Band]);
 8002b2c:	4ba7      	ldr	r3, [pc, #668]	; (8002dcc <main+0xaf4>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	4619      	mov	r1, r3
 8002b34:	4ba2      	ldr	r3, [pc, #648]	; (8002dc0 <main+0xae8>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	4ba1      	ldr	r3, [pc, #644]	; (8002dc0 <main+0xae8>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	4ba0      	ldr	r3, [pc, #640]	; (8002dc4 <main+0xaec>)
 8002b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	4603      	mov	r3, r0
 8002b4a:	460a      	mov	r2, r1
 8002b4c:	49a0      	ldr	r1, [pc, #640]	; (8002dd0 <main+0xaf8>)
 8002b4e:	2001      	movs	r0, #1
 8002b50:	f001 fb30 	bl	80041b4 <Report>
    					if ((Freq < lBand) || (Freq > rBand)) {
 8002b54:	4b9f      	ldr	r3, [pc, #636]	; (8002dd4 <main+0xafc>)
 8002b56:	ed93 7a00 	vldr	s14, [r3]
 8002b5a:	4b9f      	ldr	r3, [pc, #636]	; (8002dd8 <main+0xb00>)
 8002b5c:	edd3 7a00 	vldr	s15, [r3]
 8002b60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b68:	d40b      	bmi.n	8002b82 <main+0x8aa>
 8002b6a:	4b9a      	ldr	r3, [pc, #616]	; (8002dd4 <main+0xafc>)
 8002b6c:	ed93 7a00 	vldr	s14, [r3]
 8002b70:	4b9a      	ldr	r3, [pc, #616]	; (8002ddc <main+0xb04>)
 8002b72:	edd3 7a00 	vldr	s15, [r3]
 8002b76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b7e:	dc00      	bgt.n	8002b82 <main+0x8aa>
    						newFreq = lBand;
    						putEvt(evt_Freq);
    					}
    				}
    			break;
 8002b80:	e3ec      	b.n	800335c <main+0x1084>
    						newFreq = lBand;
 8002b82:	4b95      	ldr	r3, [pc, #596]	; (8002dd8 <main+0xb00>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a96      	ldr	r2, [pc, #600]	; (8002de0 <main+0xb08>)
 8002b88:	6013      	str	r3, [r2, #0]
    						putEvt(evt_Freq);
 8002b8a:	200c      	movs	r0, #12
 8002b8c:	f001 f824 	bl	8003bd8 <putEvt>
    			break;
 8002b90:	e3e4      	b.n	800335c <main+0x1084>
    			case evt_List:
    				newFreq = getNextList(Freq);
 8002b92:	4b90      	ldr	r3, [pc, #576]	; (8002dd4 <main+0xafc>)
 8002b94:	edd3 7a00 	vldr	s15, [r3]
 8002b98:	eeb0 0a67 	vmov.f32	s0, s15
 8002b9c:	f001 f90c 	bl	8003db8 <getNextList>
 8002ba0:	eef0 7a40 	vmov.f32	s15, s0
 8002ba4:	4b8e      	ldr	r3, [pc, #568]	; (8002de0 <main+0xb08>)
 8002ba6:	edc3 7a00 	vstr	s15, [r3]
    				putEvt(evt_Freq);
 8002baa:	200c      	movs	r0, #12
 8002bac:	f001 f814 	bl	8003bd8 <putEvt>
    			break;
 8002bb0:	e3dd      	b.n	800336e <main+0x1096>
    			case evt_Bass:
    				if (newBassBoost != BassBoost) {
 8002bb2:	4b8c      	ldr	r3, [pc, #560]	; (8002de4 <main+0xb0c>)
 8002bb4:	781a      	ldrb	r2, [r3, #0]
 8002bb6:	4b8c      	ldr	r3, [pc, #560]	; (8002de8 <main+0xb10>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	f000 83d0 	beq.w	8003360 <main+0x1088>
    					BassBoost = newBassBoost;
 8002bc0:	4b88      	ldr	r3, [pc, #544]	; (8002de4 <main+0xb0c>)
 8002bc2:	781a      	ldrb	r2, [r3, #0]
 8002bc4:	4b88      	ldr	r3, [pc, #544]	; (8002de8 <main+0xb10>)
 8002bc6:	701a      	strb	r2, [r3, #0]
    					rda5807_SetBassBoost(BassBoost);
 8002bc8:	4b87      	ldr	r3, [pc, #540]	; (8002de8 <main+0xb10>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f002 f95f 	bl	8004e90 <rda5807_SetBassBoost>
    					//
    					sprintf(st, "Vol:%u Bass:%u", Volume, BassBoost);
 8002bd2:	4b86      	ldr	r3, [pc, #536]	; (8002dec <main+0xb14>)
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	4b83      	ldr	r3, [pc, #524]	; (8002de8 <main+0xb10>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	f207 4054 	addw	r0, r7, #1108	; 0x454
 8002be0:	4983      	ldr	r1, [pc, #524]	; (8002df0 <main+0xb18>)
 8002be2:	f00f fb09 	bl	80121f8 <siprintf>
    					showLine(st, lin4, &lim, true);
 8002be6:	f207 420c 	addw	r2, r7, #1036	; 0x40c
 8002bea:	f8b7 14bc 	ldrh.w	r1, [r7, #1212]	; 0x4bc
 8002bee:	f207 4054 	addw	r0, r7, #1108	; 0x454
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	f001 f950 	bl	8003e98 <showLine>
    					Report(1, "[que:%u] set new BassBoost to %u\r\n", cntEvt, BassBoost);
 8002bf8:	4b74      	ldr	r3, [pc, #464]	; (8002dcc <main+0xaf4>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	461a      	mov	r2, r3
 8002c00:	4b79      	ldr	r3, [pc, #484]	; (8002de8 <main+0xb10>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	497b      	ldr	r1, [pc, #492]	; (8002df4 <main+0xb1c>)
 8002c06:	2001      	movs	r0, #1
 8002c08:	f001 fad4 	bl	80041b4 <Report>
    				}
    			break;
 8002c0c:	e3a8      	b.n	8003360 <main+0x1088>
    			case evt_Vol:
    				if (newVolume != Volume) {
 8002c0e:	4b7a      	ldr	r3, [pc, #488]	; (8002df8 <main+0xb20>)
 8002c10:	781a      	ldrb	r2, [r3, #0]
 8002c12:	4b76      	ldr	r3, [pc, #472]	; (8002dec <main+0xb14>)
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	f000 83a4 	beq.w	8003364 <main+0x108c>
    					Volume = newVolume;
 8002c1c:	4b76      	ldr	r3, [pc, #472]	; (8002df8 <main+0xb20>)
 8002c1e:	781a      	ldrb	r2, [r3, #0]
 8002c20:	4b72      	ldr	r3, [pc, #456]	; (8002dec <main+0xb14>)
 8002c22:	701a      	strb	r2, [r3, #0]
    					rda5807_SetVolume(Volume);
 8002c24:	4b71      	ldr	r3, [pc, #452]	; (8002dec <main+0xb14>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f002 f8e9 	bl	8004e00 <rda5807_SetVolume>
    					//
    					sprintf(st, "Vol:%u BassEn:%u", Volume, BassBoost);
 8002c2e:	4b6f      	ldr	r3, [pc, #444]	; (8002dec <main+0xb14>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	461a      	mov	r2, r3
 8002c34:	4b6c      	ldr	r3, [pc, #432]	; (8002de8 <main+0xb10>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	f207 4054 	addw	r0, r7, #1108	; 0x454
 8002c3c:	496f      	ldr	r1, [pc, #444]	; (8002dfc <main+0xb24>)
 8002c3e:	f00f fadb 	bl	80121f8 <siprintf>
    					showLine(st, lin4, &lim, true);
 8002c42:	f207 420c 	addw	r2, r7, #1036	; 0x40c
 8002c46:	f8b7 14bc 	ldrh.w	r1, [r7, #1212]	; 0x4bc
 8002c4a:	f207 4054 	addw	r0, r7, #1108	; 0x454
 8002c4e:	2301      	movs	r3, #1
 8002c50:	f001 f922 	bl	8003e98 <showLine>
    					Report(1, "[que:%u] set new Volume to %u\r\n", cntEvt, Volume);
 8002c54:	4b5d      	ldr	r3, [pc, #372]	; (8002dcc <main+0xaf4>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	4b63      	ldr	r3, [pc, #396]	; (8002dec <main+0xb14>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	4967      	ldr	r1, [pc, #412]	; (8002e00 <main+0xb28>)
 8002c62:	2001      	movs	r0, #1
 8002c64:	f001 faa6 	bl	80041b4 <Report>
    				}
    			break;
 8002c68:	e37c      	b.n	8003364 <main+0x108c>
    			case evt_Freq:
    				if ((newFreq >= lBand) && (newFreq <= rBand)) {
 8002c6a:	4b5d      	ldr	r3, [pc, #372]	; (8002de0 <main+0xb08>)
 8002c6c:	ed93 7a00 	vldr	s14, [r3]
 8002c70:	4b59      	ldr	r3, [pc, #356]	; (8002dd8 <main+0xb00>)
 8002c72:	edd3 7a00 	vldr	s15, [r3]
 8002c76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c7e:	da00      	bge.n	8002c82 <main+0x9aa>
    						sprintf(sta, "%s", nameStation(Freq));
    						showLine(sta, lin6, &lia, true);
    						Report(1, "[que:%u] set new Freq to %.1f %s (Chan:%u)\r\n", cntEvt, Freq, sta, Chan);
    					}
    				}
				break;
 8002c80:	e372      	b.n	8003368 <main+0x1090>
    				if ((newFreq >= lBand) && (newFreq <= rBand)) {
 8002c82:	4b57      	ldr	r3, [pc, #348]	; (8002de0 <main+0xb08>)
 8002c84:	ed93 7a00 	vldr	s14, [r3]
 8002c88:	4b54      	ldr	r3, [pc, #336]	; (8002ddc <main+0xb04>)
 8002c8a:	edd3 7a00 	vldr	s15, [r3]
 8002c8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c96:	d900      	bls.n	8002c9a <main+0x9c2>
				break;
 8002c98:	e366      	b.n	8003368 <main+0x1090>
    					if (newFreq != Freq) {
 8002c9a:	4b51      	ldr	r3, [pc, #324]	; (8002de0 <main+0xb08>)
 8002c9c:	ed93 7a00 	vldr	s14, [r3]
 8002ca0:	4b4c      	ldr	r3, [pc, #304]	; (8002dd4 <main+0xafc>)
 8002ca2:	edd3 7a00 	vldr	s15, [r3]
 8002ca6:	eeb4 7a67 	vcmp.f32	s14, s15
 8002caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cae:	f000 835b 	beq.w	8003368 <main+0x1090>
    						Freq = newFreq;
 8002cb2:	4b4b      	ldr	r3, [pc, #300]	; (8002de0 <main+0xb08>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a47      	ldr	r2, [pc, #284]	; (8002dd4 <main+0xafc>)
 8002cb8:	6013      	str	r3, [r2, #0]
    						uint16_t fr = (uint16_t)(Freq * 10);
 8002cba:	4b46      	ldr	r3, [pc, #280]	; (8002dd4 <main+0xafc>)
 8002cbc:	edd3 7a00 	vldr	s15, [r3]
 8002cc0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002cc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ccc:	ee17 3a90 	vmov	r3, s15
 8002cd0:	f8a7 34a6 	strh.w	r3, [r7, #1190]	; 0x4a6
    						rda5807_SetFreq_In100Khz(fr);
 8002cd4:	f8b7 34a6 	ldrh.w	r3, [r7, #1190]	; 0x4a6
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f002 f8f9 	bl	8004ed0 <rda5807_SetFreq_In100Khz>
    						stereo = rda5807_Get_StereoMonoFlag();
 8002cde:	f002 f9ed 	bl	80050bc <rda5807_Get_StereoMonoFlag>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	4b47      	ldr	r3, [pc, #284]	; (8002e04 <main+0xb2c>)
 8002ce8:	701a      	strb	r2, [r3, #0]
    						Chan = rda5807_Get_Channel();
 8002cea:	f002 f9ff 	bl	80050ec <rda5807_Get_Channel>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	4b45      	ldr	r3, [pc, #276]	; (8002e08 <main+0xb30>)
 8002cf4:	801a      	strh	r2, [r3, #0]
    						if (stereo)
 8002cf6:	4b43      	ldr	r3, [pc, #268]	; (8002e04 <main+0xb2c>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d012      	beq.n	8002d24 <main+0xa4c>
    							sprintf(st, "Rssi:%u Freq:%.1f S", RSSI, Freq);
 8002cfe:	4b43      	ldr	r3, [pc, #268]	; (8002e0c <main+0xb34>)
 8002d00:	881b      	ldrh	r3, [r3, #0]
 8002d02:	461c      	mov	r4, r3
 8002d04:	4b33      	ldr	r3, [pc, #204]	; (8002dd4 <main+0xafc>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7fd fc1d 	bl	8000548 <__aeabi_f2d>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	f207 4054 	addw	r0, r7, #1108	; 0x454
 8002d16:	e9cd 2300 	strd	r2, r3, [sp]
 8002d1a:	4622      	mov	r2, r4
 8002d1c:	493c      	ldr	r1, [pc, #240]	; (8002e10 <main+0xb38>)
 8002d1e:	f00f fa6b 	bl	80121f8 <siprintf>
 8002d22:	e011      	b.n	8002d48 <main+0xa70>
    							sprintf(st, "Rssi:%u Freq:%.1f", RSSI, Freq);
 8002d24:	4b39      	ldr	r3, [pc, #228]	; (8002e0c <main+0xb34>)
 8002d26:	881b      	ldrh	r3, [r3, #0]
 8002d28:	461c      	mov	r4, r3
 8002d2a:	4b2a      	ldr	r3, [pc, #168]	; (8002dd4 <main+0xafc>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fd fc0a 	bl	8000548 <__aeabi_f2d>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	f207 4054 	addw	r0, r7, #1108	; 0x454
 8002d3c:	e9cd 2300 	strd	r2, r3, [sp]
 8002d40:	4622      	mov	r2, r4
 8002d42:	4934      	ldr	r1, [pc, #208]	; (8002e14 <main+0xb3c>)
 8002d44:	f00f fa58 	bl	80121f8 <siprintf>
    						showLine(st, lin5, &lil, false);
 8002d48:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 8002d4c:	f8b7 14ba 	ldrh.w	r1, [r7, #1210]	; 0x4ba
 8002d50:	f207 4054 	addw	r0, r7, #1108	; 0x454
 8002d54:	2300      	movs	r3, #0
 8002d56:	f001 f89f 	bl	8003e98 <showLine>
    						sprintf(sta, "%s", nameStation(Freq));
 8002d5a:	4b1e      	ldr	r3, [pc, #120]	; (8002dd4 <main+0xafc>)
 8002d5c:	edd3 7a00 	vldr	s15, [r3]
 8002d60:	eeb0 0a67 	vmov.f32	s0, s15
 8002d64:	f000 ffea 	bl	8003d3c <nameStation>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	f207 4334 	addw	r3, r7, #1076	; 0x434
 8002d6e:	492a      	ldr	r1, [pc, #168]	; (8002e18 <main+0xb40>)
 8002d70:	4618      	mov	r0, r3
 8002d72:	f00f fa41 	bl	80121f8 <siprintf>
    						showLine(sta, lin6, &lia, true);
 8002d76:	f207 4204 	addw	r2, r7, #1028	; 0x404
 8002d7a:	f8b7 14b8 	ldrh.w	r1, [r7, #1208]	; 0x4b8
 8002d7e:	f207 4034 	addw	r0, r7, #1076	; 0x434
 8002d82:	2301      	movs	r3, #1
 8002d84:	f001 f888 	bl	8003e98 <showLine>
    						Report(1, "[que:%u] set new Freq to %.1f %s (Chan:%u)\r\n", cntEvt, Freq, sta, Chan);
 8002d88:	4b10      	ldr	r3, [pc, #64]	; (8002dcc <main+0xaf4>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	461c      	mov	r4, r3
 8002d90:	4b10      	ldr	r3, [pc, #64]	; (8002dd4 <main+0xafc>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7fd fbd7 	bl	8000548 <__aeabi_f2d>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	491a      	ldr	r1, [pc, #104]	; (8002e08 <main+0xb30>)
 8002da0:	8809      	ldrh	r1, [r1, #0]
 8002da2:	9103      	str	r1, [sp, #12]
 8002da4:	f207 4134 	addw	r1, r7, #1076	; 0x434
 8002da8:	9102      	str	r1, [sp, #8]
 8002daa:	e9cd 2300 	strd	r2, r3, [sp]
 8002dae:	4622      	mov	r2, r4
 8002db0:	491a      	ldr	r1, [pc, #104]	; (8002e1c <main+0xb44>)
 8002db2:	2001      	movs	r0, #1
 8002db4:	f001 f9fe 	bl	80041b4 <Report>
				break;
 8002db8:	e2d6      	b.n	8003368 <main+0x1090>
 8002dba:	bf00      	nop
 8002dbc:	200001c9 	.word	0x200001c9
 8002dc0:	200001c8 	.word	0x200001c8
 8002dc4:	200001d4 	.word	0x200001d4
 8002dc8:	080163b4 	.word	0x080163b4
 8002dcc:	20001884 	.word	0x20001884
 8002dd0:	08016468 	.word	0x08016468
 8002dd4:	200001c0 	.word	0x200001c0
 8002dd8:	20003cd4 	.word	0x20003cd4
 8002ddc:	20003cd8 	.word	0x20003cd8
 8002de0:	200001c4 	.word	0x200001c4
 8002de4:	20003ce3 	.word	0x20003ce3
 8002de8:	20003ce2 	.word	0x20003ce2
 8002dec:	200001cb 	.word	0x200001cb
 8002df0:	080163c0 	.word	0x080163c0
 8002df4:	08016488 	.word	0x08016488
 8002df8:	200001cc 	.word	0x200001cc
 8002dfc:	080164ac 	.word	0x080164ac
 8002e00:	080164c0 	.word	0x080164c0
 8002e04:	20003ce4 	.word	0x20003ce4
 8002e08:	20003cdc 	.word	0x20003cdc
 8002e0c:	20003cde 	.word	0x20003cde
 8002e10:	080163d0 	.word	0x080163d0
 8002e14:	080163e4 	.word	0x080163e4
 8002e18:	08016338 	.word	0x08016338
 8002e1c:	080164e0 	.word	0x080164e0
    			case evt_Scan:
    				if (!scan) {
 8002e20:	4bbb      	ldr	r3, [pc, #748]	; (8003110 <main+0xe38>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f040 82a0 	bne.w	800336c <main+0x1094>
    					scan = 1;
 8002e2c:	4bb8      	ldr	r3, [pc, #736]	; (8003110 <main+0xe38>)
 8002e2e:	2201      	movs	r2, #1
 8002e30:	701a      	strb	r2, [r3, #0]
    					rda5807_StartSeek(seek_up);
 8002e32:	4bb8      	ldr	r3, [pc, #736]	; (8003114 <main+0xe3c>)
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f002 f903 	bl	8005044 <rda5807_StartSeek>
    				}
    			break;
 8002e3e:	e295      	b.n	800336c <main+0x1094>
    			case evt_Ver:
    				Report(1, "Ver.%s\r\n", ver);
 8002e40:	4bb5      	ldr	r3, [pc, #724]	; (8003118 <main+0xe40>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	461a      	mov	r2, r3
 8002e46:	49b5      	ldr	r1, [pc, #724]	; (800311c <main+0xe44>)
 8002e48:	2001      	movs	r0, #1
 8002e4a:	f001 f9b3 	bl	80041b4 <Report>
    			break;
 8002e4e:	e28e      	b.n	800336e <main+0x1096>
    			case evt_Sec:
    			{
#ifdef SET_DISPLAY
    				dl = sec2str(st);
 8002e50:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8002e54:	4618      	mov	r0, r3
 8002e56:	f001 f913 	bl	8004080 <sec2str>
 8002e5a:	f8c7 04e4 	str.w	r0, [r7, #1252]	; 0x4e4
    				x = ((SCREEN_WIDTH - (Font_6x8.FontWidth * dl)) >> 1) & 0x7f;
 8002e5e:	f897 3494 	ldrb.w	r3, [r7, #1172]	; 0x494
 8002e62:	461a      	mov	r2, r3
 8002e64:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	; 0x4e4
 8002e68:	fb02 f303 	mul.w	r3, r2, r3
 8002e6c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002e70:	105b      	asrs	r3, r3, #1
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e78:	f8a7 34b6 	strh.w	r3, [r7, #1206]	; 0x4b6
    				ST7565_Print(x, lin1, st, &Font_6x8, 0, PIX_OFF);
 8002e7c:	f9b7 04b6 	ldrsh.w	r0, [r7, #1206]	; 0x4b6
 8002e80:	f9b7 14c2 	ldrsh.w	r1, [r7, #1218]	; 0x4c2
 8002e84:	f207 4394 	addw	r3, r7, #1172	; 0x494
 8002e88:	f207 4254 	addw	r2, r7, #1108	; 0x454
 8002e8c:	2400      	movs	r4, #0
 8002e8e:	9401      	str	r4, [sp, #4]
 8002e90:	2400      	movs	r4, #0
 8002e92:	9400      	str	r4, [sp, #0]
 8002e94:	f7fe fc6a 	bl	800176c <ST7565_Print>
#endif
    				//
    				if (scan) {
 8002e98:	4b9d      	ldr	r3, [pc, #628]	; (8003110 <main+0xe38>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d050      	beq.n	8002f44 <main+0xc6c>
    					if (rda5807_Get_SeekTuneReadyFlag()) {//RadioNewState(Idle, 10);
 8002ea2:	f002 f8f9 	bl	8005098 <rda5807_Get_SeekTuneReadyFlag>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d04b      	beq.n	8002f44 <main+0xc6c>
    						Freq = (float)rda5807_GetFreq_In100Khz();
 8002eac:	f002 f88a 	bl	8004fc4 <rda5807_GetFreq_In100Khz>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	ee07 3a90 	vmov	s15, r3
 8002eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eba:	4b99      	ldr	r3, [pc, #612]	; (8003120 <main+0xe48>)
 8002ebc:	edc3 7a00 	vstr	s15, [r3]
    						Freq /= 10;
 8002ec0:	4b97      	ldr	r3, [pc, #604]	; (8003120 <main+0xe48>)
 8002ec2:	ed93 7a00 	vldr	s14, [r3]
 8002ec6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002eca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ece:	4b94      	ldr	r3, [pc, #592]	; (8003120 <main+0xe48>)
 8002ed0:	edc3 7a00 	vstr	s15, [r3]
    						scan = 0;
 8002ed4:	4b8e      	ldr	r3, [pc, #568]	; (8003110 <main+0xe38>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	701a      	strb	r2, [r3, #0]
    						Chan = rda5807_Get_Channel();
 8002eda:	f002 f907 	bl	80050ec <rda5807_Get_Channel>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	4b90      	ldr	r3, [pc, #576]	; (8003124 <main+0xe4c>)
 8002ee4:	801a      	strh	r2, [r3, #0]
    						sprintf(sta, "%s", nameStation(Freq));
 8002ee6:	4b8e      	ldr	r3, [pc, #568]	; (8003120 <main+0xe48>)
 8002ee8:	edd3 7a00 	vldr	s15, [r3]
 8002eec:	eeb0 0a67 	vmov.f32	s0, s15
 8002ef0:	f000 ff24 	bl	8003d3c <nameStation>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	f207 4334 	addw	r3, r7, #1076	; 0x434
 8002efa:	498b      	ldr	r1, [pc, #556]	; (8003128 <main+0xe50>)
 8002efc:	4618      	mov	r0, r3
 8002efe:	f00f f97b 	bl	80121f8 <siprintf>
    						showLine(sta, lin6, &lia, true);
 8002f02:	f207 4204 	addw	r2, r7, #1028	; 0x404
 8002f06:	f8b7 14b8 	ldrh.w	r1, [r7, #1208]	; 0x4b8
 8002f0a:	f207 4034 	addw	r0, r7, #1076	; 0x434
 8002f0e:	2301      	movs	r3, #1
 8002f10:	f000 ffc2 	bl	8003e98 <showLine>
    						Report(1, "[que:%u] set new Freq to %.1f %s (Chan:%u)\r\n", cntEvt, Freq, sta, Chan);
 8002f14:	4b85      	ldr	r3, [pc, #532]	; (800312c <main+0xe54>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	461c      	mov	r4, r3
 8002f1c:	4b80      	ldr	r3, [pc, #512]	; (8003120 <main+0xe48>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7fd fb11 	bl	8000548 <__aeabi_f2d>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	497e      	ldr	r1, [pc, #504]	; (8003124 <main+0xe4c>)
 8002f2c:	8809      	ldrh	r1, [r1, #0]
 8002f2e:	9103      	str	r1, [sp, #12]
 8002f30:	f207 4134 	addw	r1, r7, #1076	; 0x434
 8002f34:	9102      	str	r1, [sp, #8]
 8002f36:	e9cd 2300 	strd	r2, r3, [sp]
 8002f3a:	4622      	mov	r2, r4
 8002f3c:	497c      	ldr	r1, [pc, #496]	; (8003130 <main+0xe58>)
 8002f3e:	2001      	movs	r0, #1
 8002f40:	f001 f938 	bl	80041b4 <Report>
    					}
    				}
    				//
    				uint16_t rssi = rda5807_rssi();
 8002f44:	f001 fd7e 	bl	8004a44 <rda5807_rssi>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	f8a7 34a4 	strh.w	r3, [r7, #1188]	; 0x4a4
    				if (rssi != RSSI) {
 8002f4e:	4b79      	ldr	r3, [pc, #484]	; (8003134 <main+0xe5c>)
 8002f50:	881b      	ldrh	r3, [r3, #0]
 8002f52:	f8b7 24a4 	ldrh.w	r2, [r7, #1188]	; 0x4a4
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d03b      	beq.n	8002fd2 <main+0xcfa>
    					RSSI = rssi;
 8002f5a:	4a76      	ldr	r2, [pc, #472]	; (8003134 <main+0xe5c>)
 8002f5c:	f8b7 34a4 	ldrh.w	r3, [r7, #1188]	; 0x4a4
 8002f60:	8013      	strh	r3, [r2, #0]
    					stereo = rda5807_Get_StereoMonoFlag();
 8002f62:	f002 f8ab 	bl	80050bc <rda5807_Get_StereoMonoFlag>
 8002f66:	4603      	mov	r3, r0
 8002f68:	461a      	mov	r2, r3
 8002f6a:	4b73      	ldr	r3, [pc, #460]	; (8003138 <main+0xe60>)
 8002f6c:	701a      	strb	r2, [r3, #0]
#ifdef SET_DISPLAY
    					if (stereo)
 8002f6e:	4b72      	ldr	r3, [pc, #456]	; (8003138 <main+0xe60>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d012      	beq.n	8002f9c <main+0xcc4>
    						sprintf(st, "Rssi:%u Freq:%.1f S", RSSI, Freq);
 8002f76:	4b6f      	ldr	r3, [pc, #444]	; (8003134 <main+0xe5c>)
 8002f78:	881b      	ldrh	r3, [r3, #0]
 8002f7a:	461c      	mov	r4, r3
 8002f7c:	4b68      	ldr	r3, [pc, #416]	; (8003120 <main+0xe48>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7fd fae1 	bl	8000548 <__aeabi_f2d>
 8002f86:	4602      	mov	r2, r0
 8002f88:	460b      	mov	r3, r1
 8002f8a:	f207 4054 	addw	r0, r7, #1108	; 0x454
 8002f8e:	e9cd 2300 	strd	r2, r3, [sp]
 8002f92:	4622      	mov	r2, r4
 8002f94:	4969      	ldr	r1, [pc, #420]	; (800313c <main+0xe64>)
 8002f96:	f00f f92f 	bl	80121f8 <siprintf>
 8002f9a:	e011      	b.n	8002fc0 <main+0xce8>
    					else
    						sprintf(st, "Rssi:%u Freq:%.1f", RSSI, Freq);
 8002f9c:	4b65      	ldr	r3, [pc, #404]	; (8003134 <main+0xe5c>)
 8002f9e:	881b      	ldrh	r3, [r3, #0]
 8002fa0:	461c      	mov	r4, r3
 8002fa2:	4b5f      	ldr	r3, [pc, #380]	; (8003120 <main+0xe48>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fd face 	bl	8000548 <__aeabi_f2d>
 8002fac:	4602      	mov	r2, r0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	f207 4054 	addw	r0, r7, #1108	; 0x454
 8002fb4:	e9cd 2300 	strd	r2, r3, [sp]
 8002fb8:	4622      	mov	r2, r4
 8002fba:	4961      	ldr	r1, [pc, #388]	; (8003140 <main+0xe68>)
 8002fbc:	f00f f91c 	bl	80121f8 <siprintf>
    					showLine(st, lin5, &lil, false);
 8002fc0:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 8002fc4:	f8b7 14ba 	ldrh.w	r1, [r7, #1210]	; 0x4ba
 8002fc8:	f207 4054 	addw	r0, r7, #1108	; 0x454
 8002fcc:	2300      	movs	r3, #0
 8002fce:	f000 ff63 	bl	8003e98 <showLine>
    					//showLine(sta, lin6, &lia, true);
    					////Report(1, "ChipID:0x%x Chan:%u Freq:%.2f RSSI:%u\r\n", rdaID, Chan, Freq, RSSI);
#endif
    				}
    				//
    				if (devError) {
 8002fd2:	4b5c      	ldr	r3, [pc, #368]	; (8003144 <main+0xe6c>)
 8002fd4:	881b      	ldrh	r3, [r3, #0]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00d      	beq.n	8002ff6 <main+0xd1e>
    					dl = sprintf(tmp, "devError : 0x%04X", devError);
 8002fda:	4b5a      	ldr	r3, [pc, #360]	; (8003144 <main+0xe6c>)
 8002fdc:	881b      	ldrh	r3, [r3, #0]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	4959      	ldr	r1, [pc, #356]	; (8003148 <main+0xe70>)
 8002fe2:	485a      	ldr	r0, [pc, #360]	; (800314c <main+0xe74>)
 8002fe4:	f00f f908 	bl	80121f8 <siprintf>
 8002fe8:	f8c7 04e4 	str.w	r0, [r7, #1252]	; 0x4e4
    					lastErr = devError;
 8002fec:	4b55      	ldr	r3, [pc, #340]	; (8003144 <main+0xe6c>)
 8002fee:	881b      	ldrh	r3, [r3, #0]
 8002ff0:	f8a7 34dc 	strh.w	r3, [r7, #1244]	; 0x4dc
 8002ff4:	e013      	b.n	800301e <main+0xd46>
    				} else {
    					if (lastErr) {
 8002ff6:	f8b7 34dc 	ldrh.w	r3, [r7, #1244]	; 0x4dc
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00c      	beq.n	8003018 <main+0xd40>
    						dl = sprintf(tmp, "Ver.%s", ver);
 8002ffe:	4b46      	ldr	r3, [pc, #280]	; (8003118 <main+0xe40>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	461a      	mov	r2, r3
 8003004:	4952      	ldr	r1, [pc, #328]	; (8003150 <main+0xe78>)
 8003006:	4851      	ldr	r0, [pc, #324]	; (800314c <main+0xe74>)
 8003008:	f00f f8f6 	bl	80121f8 <siprintf>
 800300c:	f8c7 04e4 	str.w	r0, [r7, #1252]	; 0x4e4
    						lastErr = devOK;
 8003010:	2300      	movs	r3, #0
 8003012:	f8a7 34dc 	strh.w	r3, [r7, #1244]	; 0x4dc
 8003016:	e002      	b.n	800301e <main+0xd46>
    					} else dl = 0;
 8003018:	2300      	movs	r3, #0
 800301a:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
    				}
#ifdef SET_DISPLAY
    				if (dl) {
 800301e:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	; 0x4e4
 8003022:	2b00      	cmp	r3, #0
 8003024:	d032      	beq.n	800308c <main+0xdb4>
    					ST7565_DrawFilledRectangle(0, SCREEN_HEIGHT - Font_6x8.FontHeight, SCREEN_WIDTH - 1, Font_6x8.FontHeight, PIX_OFF);
 8003026:	f897 3495 	ldrb.w	r3, [r7, #1173]	; 0x495
 800302a:	b29b      	uxth	r3, r3
 800302c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003030:	b29b      	uxth	r3, r3
 8003032:	b219      	sxth	r1, r3
 8003034:	f897 3495 	ldrb.w	r3, [r7, #1173]	; 0x495
 8003038:	b21b      	sxth	r3, r3
 800303a:	2200      	movs	r2, #0
 800303c:	9200      	str	r2, [sp, #0]
 800303e:	227f      	movs	r2, #127	; 0x7f
 8003040:	2000      	movs	r0, #0
 8003042:	f7fe fdec 	bl	8001c1e <ST7565_DrawFilledRectangle>
    					x = ((SCREEN_WIDTH - (Font_6x8.FontWidth * dl)) >> 1) & 0x7f;
 8003046:	f897 3494 	ldrb.w	r3, [r7, #1172]	; 0x494
 800304a:	461a      	mov	r2, r3
 800304c:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	; 0x4e4
 8003050:	fb02 f303 	mul.w	r3, r2, r3
 8003054:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8003058:	105b      	asrs	r3, r3, #1
 800305a:	b29b      	uxth	r3, r3
 800305c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003060:	f8a7 34b6 	strh.w	r3, [r7, #1206]	; 0x4b6
    					ST7565_Print(x, SCREEN_HEIGHT - Font_6x8.FontHeight, tmp, &Font_6x8, 1, PIX_ON);
 8003064:	f9b7 04b6 	ldrsh.w	r0, [r7, #1206]	; 0x4b6
 8003068:	f897 3495 	ldrb.w	r3, [r7, #1173]	; 0x495
 800306c:	b29b      	uxth	r3, r3
 800306e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003072:	b29b      	uxth	r3, r3
 8003074:	b219      	sxth	r1, r3
 8003076:	f207 4394 	addw	r3, r7, #1172	; 0x494
 800307a:	2201      	movs	r2, #1
 800307c:	9201      	str	r2, [sp, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	9200      	str	r2, [sp, #0]
 8003082:	4a32      	ldr	r2, [pc, #200]	; (800314c <main+0xe74>)
 8003084:	f7fe fb72 	bl	800176c <ST7565_Print>
    					ST7565_Update();
 8003088:	f7fe f9c0 	bl	800140c <ST7565_Update>
    				}
    				//
    				ST7565_Update();
 800308c:	f7fe f9be 	bl	800140c <ST7565_Update>
#endif
    			}
    			break;
 8003090:	e16d      	b.n	800336e <main+0x1096>
    			case evt_Clr:
    				devError = devOK;
 8003092:	4b2c      	ldr	r3, [pc, #176]	; (8003144 <main+0xe6c>)
 8003094:	2200      	movs	r2, #0
 8003096:	801a      	strh	r2, [r3, #0]
    				Report(1, "[que:%u] Clear all Errors...\r\n", cntEvt);
 8003098:	4b24      	ldr	r3, [pc, #144]	; (800312c <main+0xe54>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	b2db      	uxtb	r3, r3
 800309e:	461a      	mov	r2, r3
 80030a0:	492c      	ldr	r1, [pc, #176]	; (8003154 <main+0xe7c>)
 80030a2:	2001      	movs	r0, #1
 80030a4:	f001 f886 	bl	80041b4 <Report>
    			break;
 80030a8:	e161      	b.n	800336e <main+0x1096>
    			case evt_Help:
    				stx[0] = '\0';
 80030aa:	4b2b      	ldr	r3, [pc, #172]	; (8003158 <main+0xe80>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	701a      	strb	r2, [r3, #0]
    				for (int8_t i = 0; i < MAX_CMDS; i++) sprintf(stx+strlen(stx), "\t%s\r\n", s_cmds[i]);
 80030b0:	2300      	movs	r3, #0
 80030b2:	f887 34db 	strb.w	r3, [r7, #1243]	; 0x4db
 80030b6:	e015      	b.n	80030e4 <main+0xe0c>
 80030b8:	4827      	ldr	r0, [pc, #156]	; (8003158 <main+0xe80>)
 80030ba:	f7fd f889 	bl	80001d0 <strlen>
 80030be:	4603      	mov	r3, r0
 80030c0:	4a25      	ldr	r2, [pc, #148]	; (8003158 <main+0xe80>)
 80030c2:	1898      	adds	r0, r3, r2
 80030c4:	f997 34db 	ldrsb.w	r3, [r7, #1243]	; 0x4db
 80030c8:	4a24      	ldr	r2, [pc, #144]	; (800315c <main+0xe84>)
 80030ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ce:	461a      	mov	r2, r3
 80030d0:	4923      	ldr	r1, [pc, #140]	; (8003160 <main+0xe88>)
 80030d2:	f00f f891 	bl	80121f8 <siprintf>
 80030d6:	f997 34db 	ldrsb.w	r3, [r7, #1243]	; 0x4db
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	3301      	adds	r3, #1
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	f887 34db 	strb.w	r3, [r7, #1243]	; 0x4db
 80030e4:	f997 34db 	ldrsb.w	r3, [r7, #1243]	; 0x4db
 80030e8:	2b10      	cmp	r3, #16
 80030ea:	dde5      	ble.n	80030b8 <main+0xde0>
    				Report(0, "%s", stx);
 80030ec:	4a1a      	ldr	r2, [pc, #104]	; (8003158 <main+0xe80>)
 80030ee:	490e      	ldr	r1, [pc, #56]	; (8003128 <main+0xe50>)
 80030f0:	2000      	movs	r0, #0
 80030f2:	f001 f85f 	bl	80041b4 <Report>
    			break;
 80030f6:	e13a      	b.n	800336e <main+0x1096>
    			case evt_Restart:
    				restart = 1;
 80030f8:	4b1a      	ldr	r3, [pc, #104]	; (8003164 <main+0xe8c>)
 80030fa:	2201      	movs	r2, #1
 80030fc:	701a      	strb	r2, [r3, #0]
    				Report(1, "[que:%u] Restart system...\r\n", cntEvt);
 80030fe:	4b0b      	ldr	r3, [pc, #44]	; (800312c <main+0xe54>)
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	b2db      	uxtb	r3, r3
 8003104:	461a      	mov	r2, r3
 8003106:	4918      	ldr	r1, [pc, #96]	; (8003168 <main+0xe90>)
 8003108:	2001      	movs	r0, #1
 800310a:	f001 f853 	bl	80041b4 <Report>
    			break;
 800310e:	e12e      	b.n	800336e <main+0x1096>
 8003110:	20003ce1 	.word	0x20003ce1
 8003114:	200001ca 	.word	0x200001ca
 8003118:	20000004 	.word	0x20000004
 800311c:	08016510 	.word	0x08016510
 8003120:	200001c0 	.word	0x200001c0
 8003124:	20003cdc 	.word	0x20003cdc
 8003128:	08016338 	.word	0x08016338
 800312c:	20001884 	.word	0x20001884
 8003130:	080164e0 	.word	0x080164e0
 8003134:	20003cde 	.word	0x20003cde
 8003138:	20003ce4 	.word	0x20003ce4
 800313c:	080163d0 	.word	0x080163d0
 8003140:	080163e4 	.word	0x080163e4
 8003144:	20001468 	.word	0x20001468
 8003148:	0801651c 	.word	0x0801651c
 800314c:	20000fe8 	.word	0x20000fe8
 8003150:	08016398 	.word	0x08016398
 8003154:	08016530 	.word	0x08016530
 8003158:	20000be8 	.word	0x20000be8
 800315c:	2000001c 	.word	0x2000001c
 8003160:	08016550 	.word	0x08016550
 8003164:	2000187c 	.word	0x2000187c
 8003168:	08016558 	.word	0x08016558
    			case evt_Epoch:
    				set_Date(epoch);
 800316c:	4baa      	ldr	r3, [pc, #680]	; (8003418 <main+0x1140>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f000 ff25 	bl	8003fc0 <set_Date>
    				Report(1, "[que:%u] Set Unix TimeStamp to %lu\r\n", cntEvt, epoch);
 8003176:	4ba9      	ldr	r3, [pc, #676]	; (800341c <main+0x1144>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	b2db      	uxtb	r3, r3
 800317c:	461a      	mov	r2, r3
 800317e:	4ba6      	ldr	r3, [pc, #664]	; (8003418 <main+0x1140>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	49a7      	ldr	r1, [pc, #668]	; (8003420 <main+0x1148>)
 8003184:	2001      	movs	r0, #1
 8003186:	f001 f815 	bl	80041b4 <Report>
    			break;
 800318a:	e0f0      	b.n	800336e <main+0x1096>
    			case evt_Err:
    				Report(1, "[que:%u] Error input from uart\r\n", cntEvt);
 800318c:	4ba3      	ldr	r3, [pc, #652]	; (800341c <main+0x1144>)
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	b2db      	uxtb	r3, r3
 8003192:	461a      	mov	r2, r3
 8003194:	49a3      	ldr	r1, [pc, #652]	; (8003424 <main+0x114c>)
 8003196:	2001      	movs	r0, #1
 8003198:	f001 f80c 	bl	80041b4 <Report>
    			break;
 800319c:	e0e7      	b.n	800336e <main+0x1096>
#ifdef SET_W25FLASH
    			case evt_sRead:
    			case evt_sNext:
    			{
    				uint32_t w25_adr = (adr_sector * W25qxx_getSectorSize()) + offset_sector;
 800319e:	f002 fe6d 	bl	8005e7c <W25qxx_getSectorSize>
 80031a2:	4603      	mov	r3, r0
 80031a4:	4aa0      	ldr	r2, [pc, #640]	; (8003428 <main+0x1150>)
 80031a6:	6812      	ldr	r2, [r2, #0]
 80031a8:	fb02 f303 	mul.w	r3, r2, r3
 80031ac:	4a9f      	ldr	r2, [pc, #636]	; (800342c <main+0x1154>)
 80031ae:	6812      	ldr	r2, [r2, #0]
 80031b0:	4413      	add	r3, r2
 80031b2:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
    				uint32_t dlin = list_sector;
 80031b6:	4b9e      	ldr	r3, [pc, #632]	; (8003430 <main+0x1158>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
    				int step = 32;
 80031be:	2320      	movs	r3, #32
 80031c0:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
    				uint32_t ind = 0;
 80031c4:	2300      	movs	r3, #0
 80031c6:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
    				W25qxx_ReadSector(fs_work, adr_sector, offset_sector, dlin);
 80031ca:	4b97      	ldr	r3, [pc, #604]	; (8003428 <main+0x1150>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4619      	mov	r1, r3
 80031d0:	4b96      	ldr	r3, [pc, #600]	; (800342c <main+0x1154>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	461a      	mov	r2, r3
 80031d6:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 80031da:	4896      	ldr	r0, [pc, #600]	; (8003434 <main+0x115c>)
 80031dc:	f003 f96c 	bl	80064b8 <W25qxx_ReadSector>
    				Report(0, "Read sector:%d offset:%d len:%u\r\n", adr_sector, offset_sector, dlin);
 80031e0:	4b91      	ldr	r3, [pc, #580]	; (8003428 <main+0x1150>)
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	4b91      	ldr	r3, [pc, #580]	; (800342c <main+0x1154>)
 80031e6:	6819      	ldr	r1, [r3, #0]
 80031e8:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	460b      	mov	r3, r1
 80031f0:	4991      	ldr	r1, [pc, #580]	; (8003438 <main+0x1160>)
 80031f2:	2000      	movs	r0, #0
 80031f4:	f000 ffde 	bl	80041b4 <Report>
    				while (ind < dlin) {
 80031f8:	e05b      	b.n	80032b2 <main+0xfda>
    					strf[0] = '\0';
 80031fa:	4b90      	ldr	r3, [pc, #576]	; (800343c <main+0x1164>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	701a      	strb	r2, [r3, #0]
    					while (1) {
    						sprintf(strf+strlen(strf), "%06X ", (unsigned int)w25_adr);
 8003200:	488e      	ldr	r0, [pc, #568]	; (800343c <main+0x1164>)
 8003202:	f7fc ffe5 	bl	80001d0 <strlen>
 8003206:	4603      	mov	r3, r0
 8003208:	4a8c      	ldr	r2, [pc, #560]	; (800343c <main+0x1164>)
 800320a:	4413      	add	r3, r2
 800320c:	f8d7 24d4 	ldr.w	r2, [r7, #1236]	; 0x4d4
 8003210:	498b      	ldr	r1, [pc, #556]	; (8003440 <main+0x1168>)
 8003212:	4618      	mov	r0, r3
 8003214:	f00e fff0 	bl	80121f8 <siprintf>
    						for (int i = 0; i < step; i++) sprintf(strf+strlen(strf), " %02X", fs_work[i + ind]);
 8003218:	2300      	movs	r3, #0
 800321a:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
 800321e:	e015      	b.n	800324c <main+0xf74>
 8003220:	4886      	ldr	r0, [pc, #536]	; (800343c <main+0x1164>)
 8003222:	f7fc ffd5 	bl	80001d0 <strlen>
 8003226:	4603      	mov	r3, r0
 8003228:	4a84      	ldr	r2, [pc, #528]	; (800343c <main+0x1164>)
 800322a:	1898      	adds	r0, r3, r2
 800322c:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	; 0x4cc
 8003230:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	; 0x4d0
 8003234:	4413      	add	r3, r2
 8003236:	4a7f      	ldr	r2, [pc, #508]	; (8003434 <main+0x115c>)
 8003238:	5cd3      	ldrb	r3, [r2, r3]
 800323a:	461a      	mov	r2, r3
 800323c:	4981      	ldr	r1, [pc, #516]	; (8003444 <main+0x116c>)
 800323e:	f00e ffdb 	bl	80121f8 <siprintf>
 8003242:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	; 0x4cc
 8003246:	3301      	adds	r3, #1
 8003248:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
 800324c:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	; 0x4cc
 8003250:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8003254:	429a      	cmp	r2, r3
 8003256:	dbe3      	blt.n	8003220 <main+0xf48>
    						strcat(strf, "\r\n");
 8003258:	4878      	ldr	r0, [pc, #480]	; (800343c <main+0x1164>)
 800325a:	f7fc ffb9 	bl	80001d0 <strlen>
 800325e:	4603      	mov	r3, r0
 8003260:	461a      	mov	r2, r3
 8003262:	4b76      	ldr	r3, [pc, #472]	; (800343c <main+0x1164>)
 8003264:	4413      	add	r3, r2
 8003266:	4a78      	ldr	r2, [pc, #480]	; (8003448 <main+0x1170>)
 8003268:	8811      	ldrh	r1, [r2, #0]
 800326a:	7892      	ldrb	r2, [r2, #2]
 800326c:	8019      	strh	r1, [r3, #0]
 800326e:	709a      	strb	r2, [r3, #2]
    						w25_adr += step;
 8003270:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8003274:	f8d7 24d4 	ldr.w	r2, [r7, #1236]	; 0x4d4
 8003278:	4413      	add	r3, r2
 800327a:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
    						ind += step;
 800327e:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8003282:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 8003286:	4413      	add	r3, r2
 8003288:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
    						if (!(ind % W25qxx_getPageSize())) break;
 800328c:	f002 fe02 	bl	8005e94 <W25qxx_getPageSize>
 8003290:	4602      	mov	r2, r0
 8003292:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	; 0x4d0
 8003296:	fbb3 f1f2 	udiv	r1, r3, r2
 800329a:	fb01 f202 	mul.w	r2, r1, r2
 800329e:	1a9b      	subs	r3, r3, r2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d000      	beq.n	80032a6 <main+0xfce>
    						sprintf(strf+strlen(strf), "%06X ", (unsigned int)w25_adr);
 80032a4:	e7ac      	b.n	8003200 <main+0xf28>
    						if (!(ind % W25qxx_getPageSize())) break;
 80032a6:	bf00      	nop
    					}
    					Report(0, "%s", strf);
 80032a8:	4a64      	ldr	r2, [pc, #400]	; (800343c <main+0x1164>)
 80032aa:	4968      	ldr	r1, [pc, #416]	; (800344c <main+0x1174>)
 80032ac:	2000      	movs	r0, #0
 80032ae:	f000 ff81 	bl	80041b4 <Report>
    				while (ind < dlin) {
 80032b2:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 80032b6:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d39d      	bcc.n	80031fa <main+0xf22>
    				}
    			}
    			break;
 80032be:	e056      	b.n	800336e <main+0x1096>
    			case evt_sWrite:
    			{
    				uint32_t ss = W25qxx_getSectorSize();
 80032c0:	f002 fddc 	bl	8005e7c <W25qxx_getSectorSize>
 80032c4:	f8c7 04c8 	str.w	r0, [r7, #1224]	; 0x4c8
    				if (!W25qxx_IsEmptySector(adr_sector, 0, ss)) W25qxx_EraseSector(adr_sector);
 80032c8:	4b57      	ldr	r3, [pc, #348]	; (8003428 <main+0x1150>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f8d7 24c8 	ldr.w	r2, [r7, #1224]	; 0x4c8
 80032d0:	2100      	movs	r1, #0
 80032d2:	4618      	mov	r0, r3
 80032d4:	f002 fe54 	bl	8005f80 <W25qxx_IsEmptySector>
 80032d8:	4603      	mov	r3, r0
 80032da:	f083 0301 	eor.w	r3, r3, #1
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d004      	beq.n	80032ee <main+0x1016>
 80032e4:	4b50      	ldr	r3, [pc, #320]	; (8003428 <main+0x1150>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f002 fded 	bl	8005ec8 <W25qxx_EraseSector>
    				memset(fs_work, byte_write, ss);
 80032ee:	4b58      	ldr	r3, [pc, #352]	; (8003450 <main+0x1178>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	f8d7 24c8 	ldr.w	r2, [r7, #1224]	; 0x4c8
 80032f6:	4619      	mov	r1, r3
 80032f8:	484e      	ldr	r0, [pc, #312]	; (8003434 <main+0x115c>)
 80032fa:	f00e fb0b 	bl	8011914 <memset>
    				if (len_write != -1) ss = len_write;
 80032fe:	4b55      	ldr	r3, [pc, #340]	; (8003454 <main+0x117c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003306:	d003      	beq.n	8003310 <main+0x1038>
 8003308:	4b52      	ldr	r3, [pc, #328]	; (8003454 <main+0x117c>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
    				W25qxx_WriteSector(fs_work, adr_sector, offset_sector, ss);
 8003310:	4b45      	ldr	r3, [pc, #276]	; (8003428 <main+0x1150>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4619      	mov	r1, r3
 8003316:	4b45      	ldr	r3, [pc, #276]	; (800342c <main+0x1154>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	461a      	mov	r2, r3
 800331c:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	; 0x4c8
 8003320:	4844      	ldr	r0, [pc, #272]	; (8003434 <main+0x115c>)
 8003322:	f002 ffa1 	bl	8006268 <W25qxx_WriteSector>
    				Report(0, "Fill sector:%d byte:%02X len:%d done\r\n", adr_sector, byte_write, ss);
 8003326:	4b40      	ldr	r3, [pc, #256]	; (8003428 <main+0x1150>)
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	4b49      	ldr	r3, [pc, #292]	; (8003450 <main+0x1178>)
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	4619      	mov	r1, r3
 8003330:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	; 0x4c8
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	460b      	mov	r3, r1
 8003338:	4947      	ldr	r1, [pc, #284]	; (8003458 <main+0x1180>)
 800333a:	2000      	movs	r0, #0
 800333c:	f000 ff3a 	bl	80041b4 <Report>
    			}
    			break;
 8003340:	e015      	b.n	800336e <main+0x1096>
    			case evt_sErase:
    				W25qxx_EraseSector(adr_sector);
 8003342:	4b39      	ldr	r3, [pc, #228]	; (8003428 <main+0x1150>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f002 fdbe 	bl	8005ec8 <W25qxx_EraseSector>
    				Report(0, "Erase sector:%d done\r\n", adr_sector);
 800334c:	4b36      	ldr	r3, [pc, #216]	; (8003428 <main+0x1150>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	461a      	mov	r2, r3
 8003352:	4942      	ldr	r1, [pc, #264]	; (800345c <main+0x1184>)
 8003354:	2000      	movs	r0, #0
 8003356:	f000 ff2d 	bl	80041b4 <Report>
    				break;
 800335a:	e008      	b.n	800336e <main+0x1096>
    			break;
 800335c:	bf00      	nop
 800335e:	e006      	b.n	800336e <main+0x1096>
    			break;
 8003360:	bf00      	nop
 8003362:	e004      	b.n	800336e <main+0x1096>
    			break;
 8003364:	bf00      	nop
 8003366:	e002      	b.n	800336e <main+0x1096>
				break;
 8003368:	bf00      	nop
 800336a:	e000      	b.n	800336e <main+0x1096>
    			break;
 800336c:	bf00      	nop
#endif
    		}
    		if ((evt >= evt_sRead) && (evt <= evt_sWrite)) {
 800336e:	4b3c      	ldr	r3, [pc, #240]	; (8003460 <main+0x1188>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2b03      	cmp	r3, #3
 8003374:	dd0b      	ble.n	800338e <main+0x10b6>
 8003376:	4b3a      	ldr	r3, [pc, #232]	; (8003460 <main+0x1188>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2b07      	cmp	r3, #7
 800337c:	dc07      	bgt.n	800338e <main+0x10b6>
    			last_cmd_sector =  evt;//cmd_sector;
 800337e:	4b38      	ldr	r3, [pc, #224]	; (8003460 <main+0x1188>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a38      	ldr	r2, [pc, #224]	; (8003464 <main+0x118c>)
 8003384:	6013      	str	r3, [r2, #0]
    			cmd_sector = sNone;
 8003386:	4b38      	ldr	r3, [pc, #224]	; (8003468 <main+0x1190>)
 8003388:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800338c:	601a      	str	r2, [r3, #0]
    		}
    	}
#endif

    	if (devError) {
 800338e:	4b37      	ldr	r3, [pc, #220]	; (800346c <main+0x1194>)
 8003390:	881b      	ldrh	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d009      	beq.n	80033aa <main+0x10d2>
    		errLedOn(true);
 8003396:	2001      	movs	r0, #1
 8003398:	f000 fdec 	bl	8003f74 <errLedOn>
    		HAL_Delay(50);
 800339c:	2032      	movs	r0, #50	; 0x32
 800339e:	f003 f995 	bl	80066cc <HAL_Delay>
    		errLedOn(false);
 80033a2:	2000      	movs	r0, #0
 80033a4:	f000 fde6 	bl	8003f74 <errLedOn>
 80033a8:	e009      	b.n	80033be <main+0x10e6>
    	} else {
    		if (HAL_GPIO_ReadPin(ERR_LED_GPIO_Port, ERR_LED_Pin)) errLedOn(false);
 80033aa:	2108      	movs	r1, #8
 80033ac:	4830      	ldr	r0, [pc, #192]	; (8003470 <main+0x1198>)
 80033ae:	f003 ff23 	bl	80071f8 <HAL_GPIO_ReadPin>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d002      	beq.n	80033be <main+0x10e6>
 80033b8:	2000      	movs	r0, #0
 80033ba:	f000 fddb 	bl	8003f74 <errLedOn>
    while (!restart) {
 80033be:	4b2d      	ldr	r3, [pc, #180]	; (8003474 <main+0x119c>)
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f43f aada 	beq.w	800297e <main+0x6a6>

    /* USER CODE BEGIN 3 */

    }

    HAL_TIM_Base_Stop_IT(tikPort);
 80033ca:	4b2b      	ldr	r3, [pc, #172]	; (8003478 <main+0x11a0>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f008 fefa 	bl	800c1c8 <HAL_TIM_Base_Stop_IT>

#ifdef SET_DISPLAY
    ST7565_Reset();
 80033d4:	f7fd fe78 	bl	80010c8 <ST7565_Reset>
    ST7565_CMD_DISPLAY(CMD_DISPLAY_OFF);
 80033d8:	20ae      	movs	r0, #174	; 0xae
 80033da:	f7fd ffa7 	bl	800132c <ST7565_CMD_DISPLAY>
#endif
#if defined(SET_RDA_CHIP) || defined(SET_NEW_RDA)

#endif
#ifdef SET_FAT_FS
    if (mnt) {
 80033de:	4b27      	ldr	r3, [pc, #156]	; (800347c <main+0x11a4>)
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <main+0x1124>
    	f_mount(NULL, USERPath, 1);
 80033e6:	2201      	movs	r2, #1
 80033e8:	4925      	ldr	r1, [pc, #148]	; (8003480 <main+0x11a8>)
 80033ea:	2000      	movs	r0, #0
 80033ec:	f00c fe0e 	bl	801000c <f_mount>
    	//mnt = false;
    	Report(1, "Umount drive '%.*s'\r\n", sizeof(USERPath), USERPath);
 80033f0:	4b23      	ldr	r3, [pc, #140]	; (8003480 <main+0x11a8>)
 80033f2:	2204      	movs	r2, #4
 80033f4:	4923      	ldr	r1, [pc, #140]	; (8003484 <main+0x11ac>)
 80033f6:	2001      	movs	r0, #1
 80033f8:	f000 fedc 	bl	80041b4 <Report>
    }
#endif

    Report(1, "[que:%u] Stop application...\r\n", cntEvt);
 80033fc:	4b07      	ldr	r3, [pc, #28]	; (800341c <main+0x1144>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	b2db      	uxtb	r3, r3
 8003402:	461a      	mov	r2, r3
 8003404:	4920      	ldr	r1, [pc, #128]	; (8003488 <main+0x11b0>)
 8003406:	2001      	movs	r0, #1
 8003408:	f000 fed4 	bl	80041b4 <Report>

    HAL_Delay(500);
 800340c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003410:	f003 f95c 	bl	80066cc <HAL_Delay>

    NVIC_SystemReset();
 8003414:	f7fe fc5c 	bl	8001cd0 <__NVIC_SystemReset>
 8003418:	20000018 	.word	0x20000018
 800341c:	20001884 	.word	0x20001884
 8003420:	08016578 	.word	0x08016578
 8003424:	080165a0 	.word	0x080165a0
 8003428:	20001888 	.word	0x20001888
 800342c:	2000188c 	.word	0x2000188c
 8003430:	20001890 	.word	0x20001890
 8003434:	20001898 	.word	0x20001898
 8003438:	080165c4 	.word	0x080165c4
 800343c:	20002898 	.word	0x20002898
 8003440:	080165e8 	.word	0x080165e8
 8003444:	080165f0 	.word	0x080165f0
 8003448:	080165f8 	.word	0x080165f8
 800344c:	08016338 	.word	0x08016338
 8003450:	200001b4 	.word	0x200001b4
 8003454:	20001894 	.word	0x20001894
 8003458:	080165fc 	.word	0x080165fc
 800345c:	08016624 	.word	0x08016624
 8003460:	200001a4 	.word	0x200001a4
 8003464:	200001b0 	.word	0x200001b0
 8003468:	200001ac 	.word	0x200001ac
 800346c:	20001468 	.word	0x20001468
 8003470:	48000800 	.word	0x48000800
 8003474:	2000187c 	.word	0x2000187c
 8003478:	20000008 	.word	0x20000008
 800347c:	20003ccd 	.word	0x20003ccd
 8003480:	20003e38 	.word	0x20003e38
 8003484:	0801663c 	.word	0x0801663c
 8003488:	08016654 	.word	0x08016654

0800348c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b096      	sub	sp, #88	; 0x58
 8003490:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003492:	f107 0314 	add.w	r3, r7, #20
 8003496:	2244      	movs	r2, #68	; 0x44
 8003498:	2100      	movs	r1, #0
 800349a:	4618      	mov	r0, r3
 800349c:	f00e fa3a 	bl	8011914 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034a0:	463b      	mov	r3, r7
 80034a2:	2200      	movs	r2, #0
 80034a4:	601a      	str	r2, [r3, #0]
 80034a6:	605a      	str	r2, [r3, #4]
 80034a8:	609a      	str	r2, [r3, #8]
 80034aa:	60da      	str	r2, [r3, #12]
 80034ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80034ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80034b2:	f005 fb8b 	bl	8008bcc <HAL_PWREx_ControlVoltageScaling>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80034bc:	f001 fa42 	bl	8004944 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80034c0:	2309      	movs	r3, #9
 80034c2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80034c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80034ca:	2301      	movs	r3, #1
 80034cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80034ce:	2302      	movs	r3, #2
 80034d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80034d2:	2303      	movs	r3, #3
 80034d4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80034d6:	2301      	movs	r3, #1
 80034d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80034da:	2314      	movs	r3, #20
 80034dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80034de:	2307      	movs	r3, #7
 80034e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80034e2:	2302      	movs	r3, #2
 80034e4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80034e6:	2302      	movs	r3, #2
 80034e8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034ea:	f107 0314 	add.w	r3, r7, #20
 80034ee:	4618      	mov	r0, r3
 80034f0:	f005 fbc2 	bl	8008c78 <HAL_RCC_OscConfig>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <SystemClock_Config+0x72>
  {
    Error_Handler();
 80034fa:	f001 fa23 	bl	8004944 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034fe:	230f      	movs	r3, #15
 8003500:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003502:	2303      	movs	r3, #3
 8003504:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003506:	2300      	movs	r3, #0
 8003508:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800350a:	2300      	movs	r3, #0
 800350c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800350e:	2300      	movs	r3, #0
 8003510:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003512:	463b      	mov	r3, r7
 8003514:	2104      	movs	r1, #4
 8003516:	4618      	mov	r0, r3
 8003518:	f005 ff8a 	bl	8009430 <HAL_RCC_ClockConfig>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003522:	f001 fa0f 	bl	8004944 <Error_Handler>
  }
}
 8003526:	bf00      	nop
 8003528:	3758      	adds	r7, #88	; 0x58
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
	...

08003530 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003534:	4b1b      	ldr	r3, [pc, #108]	; (80035a4 <MX_I2C1_Init+0x74>)
 8003536:	4a1c      	ldr	r2, [pc, #112]	; (80035a8 <MX_I2C1_Init+0x78>)
 8003538:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702D95;
 800353a:	4b1a      	ldr	r3, [pc, #104]	; (80035a4 <MX_I2C1_Init+0x74>)
 800353c:	4a1b      	ldr	r2, [pc, #108]	; (80035ac <MX_I2C1_Init+0x7c>)
 800353e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003540:	4b18      	ldr	r3, [pc, #96]	; (80035a4 <MX_I2C1_Init+0x74>)
 8003542:	2200      	movs	r2, #0
 8003544:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003546:	4b17      	ldr	r3, [pc, #92]	; (80035a4 <MX_I2C1_Init+0x74>)
 8003548:	2201      	movs	r2, #1
 800354a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800354c:	4b15      	ldr	r3, [pc, #84]	; (80035a4 <MX_I2C1_Init+0x74>)
 800354e:	2200      	movs	r2, #0
 8003550:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003552:	4b14      	ldr	r3, [pc, #80]	; (80035a4 <MX_I2C1_Init+0x74>)
 8003554:	2200      	movs	r2, #0
 8003556:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003558:	4b12      	ldr	r3, [pc, #72]	; (80035a4 <MX_I2C1_Init+0x74>)
 800355a:	2200      	movs	r2, #0
 800355c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800355e:	4b11      	ldr	r3, [pc, #68]	; (80035a4 <MX_I2C1_Init+0x74>)
 8003560:	2200      	movs	r2, #0
 8003562:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003564:	4b0f      	ldr	r3, [pc, #60]	; (80035a4 <MX_I2C1_Init+0x74>)
 8003566:	2200      	movs	r2, #0
 8003568:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800356a:	480e      	ldr	r0, [pc, #56]	; (80035a4 <MX_I2C1_Init+0x74>)
 800356c:	f003 fea6 	bl	80072bc <HAL_I2C_Init>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003576:	f001 f9e5 	bl	8004944 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 800357a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800357e:	4809      	ldr	r0, [pc, #36]	; (80035a4 <MX_I2C1_Init+0x74>)
 8003580:	f005 fa5e 	bl	8008a40 <HAL_I2CEx_ConfigAnalogFilter>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800358a:	f001 f9db 	bl	8004944 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800358e:	2100      	movs	r1, #0
 8003590:	4804      	ldr	r0, [pc, #16]	; (80035a4 <MX_I2C1_Init+0x74>)
 8003592:	f005 faa0 	bl	8008ad6 <HAL_I2CEx_ConfigDigitalFilter>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d001      	beq.n	80035a0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800359c:	f001 f9d2 	bl	8004944 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80035a0:	bf00      	nop
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	20000828 	.word	0x20000828
 80035a8:	40005400 	.word	0x40005400
 80035ac:	00702d95 	.word	0x00702d95

080035b0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80035b6:	1d3b      	adds	r3, r7, #4
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	605a      	str	r2, [r3, #4]
 80035be:	609a      	str	r2, [r3, #8]
 80035c0:	60da      	str	r2, [r3, #12]
 80035c2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80035c4:	2300      	movs	r3, #0
 80035c6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80035c8:	4b25      	ldr	r3, [pc, #148]	; (8003660 <MX_RTC_Init+0xb0>)
 80035ca:	4a26      	ldr	r2, [pc, #152]	; (8003664 <MX_RTC_Init+0xb4>)
 80035cc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80035ce:	4b24      	ldr	r3, [pc, #144]	; (8003660 <MX_RTC_Init+0xb0>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80035d4:	4b22      	ldr	r3, [pc, #136]	; (8003660 <MX_RTC_Init+0xb0>)
 80035d6:	227f      	movs	r2, #127	; 0x7f
 80035d8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80035da:	4b21      	ldr	r3, [pc, #132]	; (8003660 <MX_RTC_Init+0xb0>)
 80035dc:	22ff      	movs	r2, #255	; 0xff
 80035de:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80035e0:	4b1f      	ldr	r3, [pc, #124]	; (8003660 <MX_RTC_Init+0xb0>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80035e6:	4b1e      	ldr	r3, [pc, #120]	; (8003660 <MX_RTC_Init+0xb0>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80035ec:	4b1c      	ldr	r3, [pc, #112]	; (8003660 <MX_RTC_Init+0xb0>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80035f2:	4b1b      	ldr	r3, [pc, #108]	; (8003660 <MX_RTC_Init+0xb0>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80035f8:	4819      	ldr	r0, [pc, #100]	; (8003660 <MX_RTC_Init+0xb0>)
 80035fa:	f006 fdf9 	bl	800a1f0 <HAL_RTC_Init>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8003604:	f001 f99e 	bl	8004944 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003608:	2300      	movs	r3, #0
 800360a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800360c:	2300      	movs	r3, #0
 800360e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8003610:	2300      	movs	r3, #0
 8003612:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003614:	2300      	movs	r3, #0
 8003616:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003618:	2300      	movs	r3, #0
 800361a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800361c:	1d3b      	adds	r3, r7, #4
 800361e:	2201      	movs	r2, #1
 8003620:	4619      	mov	r1, r3
 8003622:	480f      	ldr	r0, [pc, #60]	; (8003660 <MX_RTC_Init+0xb0>)
 8003624:	f006 fe5f 	bl	800a2e6 <HAL_RTC_SetTime>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800362e:	f001 f989 	bl	8004944 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8003632:	2303      	movs	r3, #3
 8003634:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 8003636:	2307      	movs	r3, #7
 8003638:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x6;
 800363a:	2306      	movs	r3, #6
 800363c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 800363e:	2322      	movs	r3, #34	; 0x22
 8003640:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003642:	463b      	mov	r3, r7
 8003644:	2201      	movs	r2, #1
 8003646:	4619      	mov	r1, r3
 8003648:	4805      	ldr	r0, [pc, #20]	; (8003660 <MX_RTC_Init+0xb0>)
 800364a:	f006 ff45 	bl	800a4d8 <HAL_RTC_SetDate>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8003654:	f001 f976 	bl	8004944 <Error_Handler>

  //set_Date(epoch);

  /* USER CODE END RTC_Init 2 */

}
 8003658:	bf00      	nop
 800365a:	3718      	adds	r7, #24
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	2000090c 	.word	0x2000090c
 8003664:	40002800 	.word	0x40002800

08003668 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800366c:	4b1b      	ldr	r3, [pc, #108]	; (80036dc <MX_SPI1_Init+0x74>)
 800366e:	4a1c      	ldr	r2, [pc, #112]	; (80036e0 <MX_SPI1_Init+0x78>)
 8003670:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003672:	4b1a      	ldr	r3, [pc, #104]	; (80036dc <MX_SPI1_Init+0x74>)
 8003674:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003678:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800367a:	4b18      	ldr	r3, [pc, #96]	; (80036dc <MX_SPI1_Init+0x74>)
 800367c:	2200      	movs	r2, #0
 800367e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003680:	4b16      	ldr	r3, [pc, #88]	; (80036dc <MX_SPI1_Init+0x74>)
 8003682:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003686:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003688:	4b14      	ldr	r3, [pc, #80]	; (80036dc <MX_SPI1_Init+0x74>)
 800368a:	2200      	movs	r2, #0
 800368c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800368e:	4b13      	ldr	r3, [pc, #76]	; (80036dc <MX_SPI1_Init+0x74>)
 8003690:	2200      	movs	r2, #0
 8003692:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003694:	4b11      	ldr	r3, [pc, #68]	; (80036dc <MX_SPI1_Init+0x74>)
 8003696:	f44f 7200 	mov.w	r2, #512	; 0x200
 800369a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800369c:	4b0f      	ldr	r3, [pc, #60]	; (80036dc <MX_SPI1_Init+0x74>)
 800369e:	2208      	movs	r2, #8
 80036a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80036a2:	4b0e      	ldr	r3, [pc, #56]	; (80036dc <MX_SPI1_Init+0x74>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80036a8:	4b0c      	ldr	r3, [pc, #48]	; (80036dc <MX_SPI1_Init+0x74>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036ae:	4b0b      	ldr	r3, [pc, #44]	; (80036dc <MX_SPI1_Init+0x74>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80036b4:	4b09      	ldr	r3, [pc, #36]	; (80036dc <MX_SPI1_Init+0x74>)
 80036b6:	2207      	movs	r2, #7
 80036b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80036ba:	4b08      	ldr	r3, [pc, #32]	; (80036dc <MX_SPI1_Init+0x74>)
 80036bc:	2200      	movs	r2, #0
 80036be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80036c0:	4b06      	ldr	r3, [pc, #24]	; (80036dc <MX_SPI1_Init+0x74>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80036c6:	4805      	ldr	r0, [pc, #20]	; (80036dc <MX_SPI1_Init+0x74>)
 80036c8:	f007 f8ac 	bl	800a824 <HAL_SPI_Init>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80036d2:	f001 f937 	bl	8004944 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80036d6:	bf00      	nop
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	20000930 	.word	0x20000930
 80036e0:	40013000 	.word	0x40013000

080036e4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80036e8:	4b1b      	ldr	r3, [pc, #108]	; (8003758 <MX_SPI2_Init+0x74>)
 80036ea:	4a1c      	ldr	r2, [pc, #112]	; (800375c <MX_SPI2_Init+0x78>)
 80036ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80036ee:	4b1a      	ldr	r3, [pc, #104]	; (8003758 <MX_SPI2_Init+0x74>)
 80036f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80036f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80036f6:	4b18      	ldr	r3, [pc, #96]	; (8003758 <MX_SPI2_Init+0x74>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80036fc:	4b16      	ldr	r3, [pc, #88]	; (8003758 <MX_SPI2_Init+0x74>)
 80036fe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003702:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003704:	4b14      	ldr	r3, [pc, #80]	; (8003758 <MX_SPI2_Init+0x74>)
 8003706:	2200      	movs	r2, #0
 8003708:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800370a:	4b13      	ldr	r3, [pc, #76]	; (8003758 <MX_SPI2_Init+0x74>)
 800370c:	2200      	movs	r2, #0
 800370e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003710:	4b11      	ldr	r3, [pc, #68]	; (8003758 <MX_SPI2_Init+0x74>)
 8003712:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003716:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003718:	4b0f      	ldr	r3, [pc, #60]	; (8003758 <MX_SPI2_Init+0x74>)
 800371a:	2200      	movs	r2, #0
 800371c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800371e:	4b0e      	ldr	r3, [pc, #56]	; (8003758 <MX_SPI2_Init+0x74>)
 8003720:	2200      	movs	r2, #0
 8003722:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003724:	4b0c      	ldr	r3, [pc, #48]	; (8003758 <MX_SPI2_Init+0x74>)
 8003726:	2200      	movs	r2, #0
 8003728:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800372a:	4b0b      	ldr	r3, [pc, #44]	; (8003758 <MX_SPI2_Init+0x74>)
 800372c:	2200      	movs	r2, #0
 800372e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003730:	4b09      	ldr	r3, [pc, #36]	; (8003758 <MX_SPI2_Init+0x74>)
 8003732:	2207      	movs	r2, #7
 8003734:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003736:	4b08      	ldr	r3, [pc, #32]	; (8003758 <MX_SPI2_Init+0x74>)
 8003738:	2200      	movs	r2, #0
 800373a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800373c:	4b06      	ldr	r3, [pc, #24]	; (8003758 <MX_SPI2_Init+0x74>)
 800373e:	2200      	movs	r2, #0
 8003740:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003742:	4805      	ldr	r0, [pc, #20]	; (8003758 <MX_SPI2_Init+0x74>)
 8003744:	f007 f86e 	bl	800a824 <HAL_SPI_Init>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800374e:	f001 f8f9 	bl	8004944 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003752:	bf00      	nop
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	20000994 	.word	0x20000994
 800375c:	40003800 	.word	0x40003800

08003760 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b088      	sub	sp, #32
 8003764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003766:	f107 0310 	add.w	r3, r7, #16
 800376a:	2200      	movs	r2, #0
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	605a      	str	r2, [r3, #4]
 8003770:	609a      	str	r2, [r3, #8]
 8003772:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003774:	1d3b      	adds	r3, r7, #4
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	605a      	str	r2, [r3, #4]
 800377c:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN TIM4_Init 1 */

  // interupt every 10 ms

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800377e:	4b1d      	ldr	r3, [pc, #116]	; (80037f4 <MX_TIM4_Init+0x94>)
 8003780:	4a1d      	ldr	r2, [pc, #116]	; (80037f8 <MX_TIM4_Init+0x98>)
 8003782:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7999;
 8003784:	4b1b      	ldr	r3, [pc, #108]	; (80037f4 <MX_TIM4_Init+0x94>)
 8003786:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800378a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800378c:	4b19      	ldr	r3, [pc, #100]	; (80037f4 <MX_TIM4_Init+0x94>)
 800378e:	2200      	movs	r2, #0
 8003790:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8003792:	4b18      	ldr	r3, [pc, #96]	; (80037f4 <MX_TIM4_Init+0x94>)
 8003794:	2263      	movs	r2, #99	; 0x63
 8003796:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003798:	4b16      	ldr	r3, [pc, #88]	; (80037f4 <MX_TIM4_Init+0x94>)
 800379a:	2200      	movs	r2, #0
 800379c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800379e:	4b15      	ldr	r3, [pc, #84]	; (80037f4 <MX_TIM4_Init+0x94>)
 80037a0:	2280      	movs	r2, #128	; 0x80
 80037a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80037a4:	4813      	ldr	r0, [pc, #76]	; (80037f4 <MX_TIM4_Init+0x94>)
 80037a6:	f008 fc47 	bl	800c038 <HAL_TIM_Base_Init>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80037b0:	f001 f8c8 	bl	8004944 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80037ba:	f107 0310 	add.w	r3, r7, #16
 80037be:	4619      	mov	r1, r3
 80037c0:	480c      	ldr	r0, [pc, #48]	; (80037f4 <MX_TIM4_Init+0x94>)
 80037c2:	f008 fe4f 	bl	800c464 <HAL_TIM_ConfigClockSource>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80037cc:	f001 f8ba 	bl	8004944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037d0:	2300      	movs	r3, #0
 80037d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037d4:	2300      	movs	r3, #0
 80037d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80037d8:	1d3b      	adds	r3, r7, #4
 80037da:	4619      	mov	r1, r3
 80037dc:	4805      	ldr	r0, [pc, #20]	; (80037f4 <MX_TIM4_Init+0x94>)
 80037de:	f009 f867 	bl	800c8b0 <HAL_TIMEx_MasterConfigSynchronization>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80037e8:	f001 f8ac 	bl	8004944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80037ec:	bf00      	nop
 80037ee:	3720      	adds	r7, #32
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	20000ad0 	.word	0x20000ad0
 80037f8:	40000800 	.word	0x40000800

080037fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003800:	4b14      	ldr	r3, [pc, #80]	; (8003854 <MX_USART2_UART_Init+0x58>)
 8003802:	4a15      	ldr	r2, [pc, #84]	; (8003858 <MX_USART2_UART_Init+0x5c>)
 8003804:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8003806:	4b13      	ldr	r3, [pc, #76]	; (8003854 <MX_USART2_UART_Init+0x58>)
 8003808:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 800380c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800380e:	4b11      	ldr	r3, [pc, #68]	; (8003854 <MX_USART2_UART_Init+0x58>)
 8003810:	2200      	movs	r2, #0
 8003812:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003814:	4b0f      	ldr	r3, [pc, #60]	; (8003854 <MX_USART2_UART_Init+0x58>)
 8003816:	2200      	movs	r2, #0
 8003818:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800381a:	4b0e      	ldr	r3, [pc, #56]	; (8003854 <MX_USART2_UART_Init+0x58>)
 800381c:	2200      	movs	r2, #0
 800381e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003820:	4b0c      	ldr	r3, [pc, #48]	; (8003854 <MX_USART2_UART_Init+0x58>)
 8003822:	220c      	movs	r2, #12
 8003824:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003826:	4b0b      	ldr	r3, [pc, #44]	; (8003854 <MX_USART2_UART_Init+0x58>)
 8003828:	2200      	movs	r2, #0
 800382a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800382c:	4b09      	ldr	r3, [pc, #36]	; (8003854 <MX_USART2_UART_Init+0x58>)
 800382e:	2200      	movs	r2, #0
 8003830:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003832:	4b08      	ldr	r3, [pc, #32]	; (8003854 <MX_USART2_UART_Init+0x58>)
 8003834:	2200      	movs	r2, #0
 8003836:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003838:	4b06      	ldr	r3, [pc, #24]	; (8003854 <MX_USART2_UART_Init+0x58>)
 800383a:	2200      	movs	r2, #0
 800383c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800383e:	4805      	ldr	r0, [pc, #20]	; (8003854 <MX_USART2_UART_Init+0x58>)
 8003840:	f009 f8dc 	bl	800c9fc <HAL_UART_Init>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800384a:	f001 f87b 	bl	8004944 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800384e:	bf00      	nop
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	20000b1c 	.word	0x20000b1c
 8003858:	40004400 	.word	0x40004400

0800385c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003862:	4b26      	ldr	r3, [pc, #152]	; (80038fc <MX_DMA_Init+0xa0>)
 8003864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003866:	4a25      	ldr	r2, [pc, #148]	; (80038fc <MX_DMA_Init+0xa0>)
 8003868:	f043 0301 	orr.w	r3, r3, #1
 800386c:	6493      	str	r3, [r2, #72]	; 0x48
 800386e:	4b23      	ldr	r3, [pc, #140]	; (80038fc <MX_DMA_Init+0xa0>)
 8003870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	607b      	str	r3, [r7, #4]
 8003878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800387a:	4b20      	ldr	r3, [pc, #128]	; (80038fc <MX_DMA_Init+0xa0>)
 800387c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800387e:	4a1f      	ldr	r2, [pc, #124]	; (80038fc <MX_DMA_Init+0xa0>)
 8003880:	f043 0302 	orr.w	r3, r3, #2
 8003884:	6493      	str	r3, [r2, #72]	; 0x48
 8003886:	4b1d      	ldr	r3, [pc, #116]	; (80038fc <MX_DMA_Init+0xa0>)
 8003888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	603b      	str	r3, [r7, #0]
 8003890:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003892:	2200      	movs	r2, #0
 8003894:	2100      	movs	r1, #0
 8003896:	200d      	movs	r0, #13
 8003898:	f003 f83b 	bl	8006912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800389c:	200d      	movs	r0, #13
 800389e:	f003 f854 	bl	800694a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80038a2:	2200      	movs	r2, #0
 80038a4:	2100      	movs	r1, #0
 80038a6:	200e      	movs	r0, #14
 80038a8:	f003 f833 	bl	8006912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80038ac:	200e      	movs	r0, #14
 80038ae:	f003 f84c 	bl	800694a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80038b2:	2200      	movs	r2, #0
 80038b4:	2100      	movs	r1, #0
 80038b6:	200f      	movs	r0, #15
 80038b8:	f003 f82b 	bl	8006912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80038bc:	200f      	movs	r0, #15
 80038be:	f003 f844 	bl	800694a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80038c2:	2200      	movs	r2, #0
 80038c4:	2100      	movs	r1, #0
 80038c6:	2010      	movs	r0, #16
 80038c8:	f003 f823 	bl	8006912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80038cc:	2010      	movs	r0, #16
 80038ce:	f003 f83c 	bl	800694a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 3, 0);
 80038d2:	2200      	movs	r2, #0
 80038d4:	2103      	movs	r1, #3
 80038d6:	2011      	movs	r0, #17
 80038d8:	f003 f81b 	bl	8006912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80038dc:	2011      	movs	r0, #17
 80038de:	f003 f834 	bl	800694a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0, 0);
 80038e2:	2200      	movs	r2, #0
 80038e4:	2100      	movs	r1, #0
 80038e6:	2044      	movs	r0, #68	; 0x44
 80038e8:	f003 f813 	bl	8006912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 80038ec:	2044      	movs	r0, #68	; 0x44
 80038ee:	f003 f82c 	bl	800694a <HAL_NVIC_EnableIRQ>

}
 80038f2:	bf00      	nop
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	40021000 	.word	0x40021000

08003900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b08a      	sub	sp, #40	; 0x28
 8003904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003906:	f107 0314 	add.w	r3, r7, #20
 800390a:	2200      	movs	r2, #0
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	605a      	str	r2, [r3, #4]
 8003910:	609a      	str	r2, [r3, #8]
 8003912:	60da      	str	r2, [r3, #12]
 8003914:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003916:	4b6f      	ldr	r3, [pc, #444]	; (8003ad4 <MX_GPIO_Init+0x1d4>)
 8003918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800391a:	4a6e      	ldr	r2, [pc, #440]	; (8003ad4 <MX_GPIO_Init+0x1d4>)
 800391c:	f043 0304 	orr.w	r3, r3, #4
 8003920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003922:	4b6c      	ldr	r3, [pc, #432]	; (8003ad4 <MX_GPIO_Init+0x1d4>)
 8003924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003926:	f003 0304 	and.w	r3, r3, #4
 800392a:	613b      	str	r3, [r7, #16]
 800392c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800392e:	4b69      	ldr	r3, [pc, #420]	; (8003ad4 <MX_GPIO_Init+0x1d4>)
 8003930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003932:	4a68      	ldr	r2, [pc, #416]	; (8003ad4 <MX_GPIO_Init+0x1d4>)
 8003934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800393a:	4b66      	ldr	r3, [pc, #408]	; (8003ad4 <MX_GPIO_Init+0x1d4>)
 800393c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800393e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003946:	4b63      	ldr	r3, [pc, #396]	; (8003ad4 <MX_GPIO_Init+0x1d4>)
 8003948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800394a:	4a62      	ldr	r2, [pc, #392]	; (8003ad4 <MX_GPIO_Init+0x1d4>)
 800394c:	f043 0301 	orr.w	r3, r3, #1
 8003950:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003952:	4b60      	ldr	r3, [pc, #384]	; (8003ad4 <MX_GPIO_Init+0x1d4>)
 8003954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	60bb      	str	r3, [r7, #8]
 800395c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800395e:	4b5d      	ldr	r3, [pc, #372]	; (8003ad4 <MX_GPIO_Init+0x1d4>)
 8003960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003962:	4a5c      	ldr	r2, [pc, #368]	; (8003ad4 <MX_GPIO_Init+0x1d4>)
 8003964:	f043 0302 	orr.w	r3, r3, #2
 8003968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800396a:	4b5a      	ldr	r3, [pc, #360]	; (8003ad4 <MX_GPIO_Init+0x1d4>)
 800396c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	607b      	str	r3, [r7, #4]
 8003974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003976:	4b57      	ldr	r3, [pc, #348]	; (8003ad4 <MX_GPIO_Init+0x1d4>)
 8003978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800397a:	4a56      	ldr	r2, [pc, #344]	; (8003ad4 <MX_GPIO_Init+0x1d4>)
 800397c:	f043 0308 	orr.w	r3, r3, #8
 8003980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003982:	4b54      	ldr	r3, [pc, #336]	; (8003ad4 <MX_GPIO_Init+0x1d4>)
 8003984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	603b      	str	r3, [r7, #0]
 800398c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TIK_LED_Pin|ERR_LED_Pin, GPIO_PIN_RESET);
 800398e:	2200      	movs	r2, #0
 8003990:	2109      	movs	r1, #9
 8003992:	4851      	ldr	r0, [pc, #324]	; (8003ad8 <MX_GPIO_Init+0x1d8>)
 8003994:	f003 fc48 	bl	8007228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8003998:	2201      	movs	r2, #1
 800399a:	2110      	movs	r1, #16
 800399c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039a0:	f003 fc42 	bl	8007228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|SPI1_DC_Pin, GPIO_PIN_SET);
 80039a4:	2201      	movs	r2, #1
 80039a6:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 80039aa:	484c      	ldr	r0, [pc, #304]	; (8003adc <MX_GPIO_Init+0x1dc>)
 80039ac:	f003 fc3c 	bl	8007228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 80039b0:	2201      	movs	r2, #1
 80039b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039b6:	4848      	ldr	r0, [pc, #288]	; (8003ad8 <MX_GPIO_Init+0x1d8>)
 80039b8:	f003 fc36 	bl	8007228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_RST_GPIO_Port, SPI1_RST_Pin, GPIO_PIN_SET);
 80039bc:	2201      	movs	r2, #1
 80039be:	2104      	movs	r1, #4
 80039c0:	4847      	ldr	r0, [pc, #284]	; (8003ae0 <MX_GPIO_Init+0x1e0>)
 80039c2:	f003 fc31 	bl	8007228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TIK_LED_Pin */
  GPIO_InitStruct.Pin = TIK_LED_Pin;
 80039c6:	2301      	movs	r3, #1
 80039c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039ca:	2301      	movs	r3, #1
 80039cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80039ce:	2302      	movs	r3, #2
 80039d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80039d2:	2301      	movs	r3, #1
 80039d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TIK_LED_GPIO_Port, &GPIO_InitStruct);
 80039d6:	f107 0314 	add.w	r3, r7, #20
 80039da:	4619      	mov	r1, r3
 80039dc:	483e      	ldr	r0, [pc, #248]	; (8003ad8 <MX_GPIO_Init+0x1d8>)
 80039de:	f003 fa61 	bl	8006ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY0_Pin KEY1_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin;
 80039e2:	2306      	movs	r3, #6
 80039e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80039e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80039ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039ec:	2301      	movs	r3, #1
 80039ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039f0:	f107 0314 	add.w	r3, r7, #20
 80039f4:	4619      	mov	r1, r3
 80039f6:	4838      	ldr	r0, [pc, #224]	; (8003ad8 <MX_GPIO_Init+0x1d8>)
 80039f8:	f003 fa54 	bl	8006ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ERR_LED_Pin */
  GPIO_InitStruct.Pin = ERR_LED_Pin;
 80039fc:	2308      	movs	r3, #8
 80039fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a00:	2301      	movs	r3, #1
 8003a02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a04:	2300      	movs	r3, #0
 8003a06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERR_LED_GPIO_Port, &GPIO_InitStruct);
 8003a0c:	f107 0314 	add.w	r3, r7, #20
 8003a10:	4619      	mov	r1, r3
 8003a12:	4831      	ldr	r0, [pc, #196]	; (8003ad8 <MX_GPIO_Init+0x1d8>)
 8003a14:	f003 fa46 	bl	8006ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8003a18:	2310      	movs	r3, #16
 8003a1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a20:	2300      	movs	r3, #0
 8003a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a24:	2302      	movs	r3, #2
 8003a26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8003a28:	f107 0314 	add.w	r3, r7, #20
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a32:	f003 fa37 	bl	8006ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8003a36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a40:	2301      	movs	r3, #1
 8003a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a44:	2302      	movs	r3, #2
 8003a46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8003a48:	f107 0314 	add.w	r3, r7, #20
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4823      	ldr	r0, [pc, #140]	; (8003adc <MX_GPIO_Init+0x1dc>)
 8003a50:	f003 fa28 	bl	8006ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8003a54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003a62:	2301      	movs	r3, #1
 8003a64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8003a66:	f107 0314 	add.w	r3, r7, #20
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	481a      	ldr	r0, [pc, #104]	; (8003ad8 <MX_GPIO_Init+0x1d8>)
 8003a6e:	f003 fa19 	bl	8006ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_RST_Pin */
  GPIO_InitStruct.Pin = SPI1_RST_Pin;
 8003a72:	2304      	movs	r3, #4
 8003a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a76:	2301      	movs	r3, #1
 8003a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a7e:	2302      	movs	r3, #2
 8003a80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_RST_GPIO_Port, &GPIO_InitStruct);
 8003a82:	f107 0314 	add.w	r3, r7, #20
 8003a86:	4619      	mov	r1, r3
 8003a88:	4815      	ldr	r0, [pc, #84]	; (8003ae0 <MX_GPIO_Init+0x1e0>)
 8003a8a:	f003 fa0b 	bl	8006ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_DC_Pin */
  GPIO_InitStruct.Pin = SPI1_DC_Pin;
 8003a8e:	2320      	movs	r3, #32
 8003a90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a92:	2301      	movs	r3, #1
 8003a94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a96:	2300      	movs	r3, #0
 8003a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_DC_GPIO_Port, &GPIO_InitStruct);
 8003a9e:	f107 0314 	add.w	r3, r7, #20
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	480d      	ldr	r0, [pc, #52]	; (8003adc <MX_GPIO_Init+0x1dc>)
 8003aa6:	f003 f9fd 	bl	8006ea4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003aaa:	2200      	movs	r2, #0
 8003aac:	2100      	movs	r1, #0
 8003aae:	2007      	movs	r0, #7
 8003ab0:	f002 ff2f 	bl	8006912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003ab4:	2007      	movs	r0, #7
 8003ab6:	f002 ff48 	bl	800694a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8003aba:	2200      	movs	r2, #0
 8003abc:	2100      	movs	r1, #0
 8003abe:	2008      	movs	r0, #8
 8003ac0:	f002 ff27 	bl	8006912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003ac4:	2008      	movs	r0, #8
 8003ac6:	f002 ff40 	bl	800694a <HAL_NVIC_EnableIRQ>

}
 8003aca:	bf00      	nop
 8003acc:	3728      	adds	r7, #40	; 0x28
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	48000800 	.word	0x48000800
 8003adc:	48000400 	.word	0x48000400
 8003ae0:	48000c00 	.word	0x48000c00

08003ae4 <hexToBin>:

//-------------------------------------------------------------------------------------------
//      Преобразует два символа строки из hex-формата в двоичный
//
uint8_t hexToBin(char *sc)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
char st = 0, ml = 0;
 8003aec:	2300      	movs	r3, #0
 8003aee:	73fb      	strb	r3, [r7, #15]
 8003af0:	2300      	movs	r3, #0
 8003af2:	73bb      	strb	r3, [r7, #14]

	if ((sc[0] >= '0') && (sc[0] <= '9')) st = (sc[0] - 0x30);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	2b2f      	cmp	r3, #47	; 0x2f
 8003afa:	d908      	bls.n	8003b0e <hexToBin+0x2a>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	2b39      	cmp	r3, #57	; 0x39
 8003b02:	d804      	bhi.n	8003b0e <hexToBin+0x2a>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	3b30      	subs	r3, #48	; 0x30
 8003b0a:	73fb      	strb	r3, [r7, #15]
 8003b0c:	e018      	b.n	8003b40 <hexToBin+0x5c>
	else
	if ((sc[0] >= 'A') && (sc[0] <= 'F')) st = (sc[0] - 0x37);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	2b40      	cmp	r3, #64	; 0x40
 8003b14:	d908      	bls.n	8003b28 <hexToBin+0x44>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	2b46      	cmp	r3, #70	; 0x46
 8003b1c:	d804      	bhi.n	8003b28 <hexToBin+0x44>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	3b37      	subs	r3, #55	; 0x37
 8003b24:	73fb      	strb	r3, [r7, #15]
 8003b26:	e00b      	b.n	8003b40 <hexToBin+0x5c>
	else
	if ((sc[0] >= 'a') && (sc[0] <= 'f')) st = (sc[0] - 0x57);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	2b60      	cmp	r3, #96	; 0x60
 8003b2e:	d907      	bls.n	8003b40 <hexToBin+0x5c>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	2b66      	cmp	r3, #102	; 0x66
 8003b36:	d803      	bhi.n	8003b40 <hexToBin+0x5c>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	3b57      	subs	r3, #87	; 0x57
 8003b3e:	73fb      	strb	r3, [r7, #15]

	if ((sc[1] >= '0') && (sc[1] <= '9')) ml = (sc[1] - 0x30);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3301      	adds	r3, #1
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	2b2f      	cmp	r3, #47	; 0x2f
 8003b48:	d90a      	bls.n	8003b60 <hexToBin+0x7c>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	2b39      	cmp	r3, #57	; 0x39
 8003b52:	d805      	bhi.n	8003b60 <hexToBin+0x7c>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	3301      	adds	r3, #1
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	3b30      	subs	r3, #48	; 0x30
 8003b5c:	73bb      	strb	r3, [r7, #14]
 8003b5e:	e01e      	b.n	8003b9e <hexToBin+0xba>
	else
	if ((sc[1] >= 'A') && (sc[1] <= 'F')) ml = (sc[1] - 0x37);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	3301      	adds	r3, #1
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	2b40      	cmp	r3, #64	; 0x40
 8003b68:	d90a      	bls.n	8003b80 <hexToBin+0x9c>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	2b46      	cmp	r3, #70	; 0x46
 8003b72:	d805      	bhi.n	8003b80 <hexToBin+0x9c>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	3301      	adds	r3, #1
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	3b37      	subs	r3, #55	; 0x37
 8003b7c:	73bb      	strb	r3, [r7, #14]
 8003b7e:	e00e      	b.n	8003b9e <hexToBin+0xba>
	else
	if ((sc[1] >= 'a') && (sc[1] <= 'f')) ml = (sc[1] - 0x57);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	3301      	adds	r3, #1
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	2b60      	cmp	r3, #96	; 0x60
 8003b88:	d909      	bls.n	8003b9e <hexToBin+0xba>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	2b66      	cmp	r3, #102	; 0x66
 8003b92:	d804      	bhi.n	8003b9e <hexToBin+0xba>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	3301      	adds	r3, #1
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	3b57      	subs	r3, #87	; 0x57
 8003b9c:	73bb      	strb	r3, [r7, #14]

	return ((st << 4) | (ml & 0x0f));
 8003b9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ba0:	011b      	lsls	r3, r3, #4
 8003ba2:	b25a      	sxtb	r2, r3
 8003ba4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ba8:	f003 030f 	and.w	r3, r3, #15
 8003bac:	b25b      	sxtb	r3, r3
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	b25b      	sxtb	r3, r3
 8003bb2:	b2db      	uxtb	r3, r3

}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3714      	adds	r7, #20
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <getEvtCount>:


#ifdef SET_FIFO_MODE
//-------------------------------------------------------------------------------------------
uint8_t getEvtCount()
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
	return cnt_evt;
 8003bc4:	4b03      	ldr	r3, [pc, #12]	; (8003bd4 <getEvtCount+0x14>)
 8003bc6:	781b      	ldrb	r3, [r3, #0]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	20001882 	.word	0x20001882

08003bd8 <putEvt>:
//-------------------------------------------------------------------------------------------
void putEvt(int evt)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]

	//while (lock_fifo);
	//lock_fifo = true;

	if (cnt_evt > (MAX_FIFO_SIZE - 3)) {
 8003be0:	4b30      	ldr	r3, [pc, #192]	; (8003ca4 <putEvt+0xcc>)
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	2b3d      	cmp	r3, #61	; 0x3d
 8003be6:	d907      	bls.n	8003bf8 <putEvt+0x20>
		devError |= devFIFO;
 8003be8:	4b2f      	ldr	r3, [pc, #188]	; (8003ca8 <putEvt+0xd0>)
 8003bea:	881b      	ldrh	r3, [r3, #0]
 8003bec:	f043 0310 	orr.w	r3, r3, #16
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	4b2d      	ldr	r3, [pc, #180]	; (8003ca8 <putEvt+0xd0>)
 8003bf4:	801a      	strh	r2, [r3, #0]
		//lock_fifo = false;
		return;
 8003bf6:	e051      	b.n	8003c9c <putEvt+0xc4>
	}

	HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003bf8:	2026      	movs	r0, #38	; 0x26
 8003bfa:	f002 feb4 	bl	8006966 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(TIM4_IRQn);
 8003bfe:	201e      	movs	r0, #30
 8003c00:	f002 feb1 	bl	8006966 <HAL_NVIC_DisableIRQ>

	if (cnt_evt >= MAX_FIFO_SIZE) {
 8003c04:	4b27      	ldr	r3, [pc, #156]	; (8003ca4 <putEvt+0xcc>)
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	2b3f      	cmp	r3, #63	; 0x3f
 8003c0a:	d906      	bls.n	8003c1a <putEvt+0x42>
			wr_evt_err++;
 8003c0c:	4b27      	ldr	r3, [pc, #156]	; (8003cac <putEvt+0xd4>)
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	3301      	adds	r3, #1
 8003c12:	b2da      	uxtb	r2, r3
 8003c14:	4b25      	ldr	r3, [pc, #148]	; (8003cac <putEvt+0xd4>)
 8003c16:	701a      	strb	r2, [r3, #0]
 8003c18:	e027      	b.n	8003c6a <putEvt+0x92>
		} else {
			evt_fifo[wr_evt_adr] = evt;
 8003c1a:	4b25      	ldr	r3, [pc, #148]	; (8003cb0 <putEvt+0xd8>)
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	4619      	mov	r1, r3
 8003c20:	4a24      	ldr	r2, [pc, #144]	; (8003cb4 <putEvt+0xdc>)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			cnt_evt++;
 8003c28:	4b1e      	ldr	r3, [pc, #120]	; (8003ca4 <putEvt+0xcc>)
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	b2da      	uxtb	r2, r3
 8003c30:	4b1c      	ldr	r3, [pc, #112]	; (8003ca4 <putEvt+0xcc>)
 8003c32:	701a      	strb	r2, [r3, #0]
			if (wr_evt_adr < (MAX_FIFO_SIZE - 1) ) {
 8003c34:	4b1e      	ldr	r3, [pc, #120]	; (8003cb0 <putEvt+0xd8>)
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	2b3e      	cmp	r3, #62	; 0x3e
 8003c3a:	d806      	bhi.n	8003c4a <putEvt+0x72>
				wr_evt_adr++;
 8003c3c:	4b1c      	ldr	r3, [pc, #112]	; (8003cb0 <putEvt+0xd8>)
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	3301      	adds	r3, #1
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	4b1a      	ldr	r3, [pc, #104]	; (8003cb0 <putEvt+0xd8>)
 8003c46:	701a      	strb	r2, [r3, #0]
 8003c48:	e002      	b.n	8003c50 <putEvt+0x78>
			} else  {
				wr_evt_adr = 0;
 8003c4a:	4b19      	ldr	r3, [pc, #100]	; (8003cb0 <putEvt+0xd8>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	701a      	strb	r2, [r3, #0]
			}
			wr_evt_err = 0;
 8003c50:	4b16      	ldr	r3, [pc, #88]	; (8003cac <putEvt+0xd4>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	701a      	strb	r2, [r3, #0]
			if (cnt_evt > max_evt) max_evt = cnt_evt;
 8003c56:	4b13      	ldr	r3, [pc, #76]	; (8003ca4 <putEvt+0xcc>)
 8003c58:	781a      	ldrb	r2, [r3, #0]
 8003c5a:	4b17      	ldr	r3, [pc, #92]	; (8003cb8 <putEvt+0xe0>)
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d903      	bls.n	8003c6a <putEvt+0x92>
 8003c62:	4b10      	ldr	r3, [pc, #64]	; (8003ca4 <putEvt+0xcc>)
 8003c64:	781a      	ldrb	r2, [r3, #0]
 8003c66:	4b14      	ldr	r3, [pc, #80]	; (8003cb8 <putEvt+0xe0>)
 8003c68:	701a      	strb	r2, [r3, #0]
		}

		if (wr_evt_err) devError |= devFIFO;
 8003c6a:	4b10      	ldr	r3, [pc, #64]	; (8003cac <putEvt+0xd4>)
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d007      	beq.n	8003c82 <putEvt+0xaa>
 8003c72:	4b0d      	ldr	r3, [pc, #52]	; (8003ca8 <putEvt+0xd0>)
 8003c74:	881b      	ldrh	r3, [r3, #0]
 8003c76:	f043 0310 	orr.w	r3, r3, #16
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ca8 <putEvt+0xd0>)
 8003c7e:	801a      	strh	r2, [r3, #0]
 8003c80:	e006      	b.n	8003c90 <putEvt+0xb8>
				   else devError &= ~devFIFO;
 8003c82:	4b09      	ldr	r3, [pc, #36]	; (8003ca8 <putEvt+0xd0>)
 8003c84:	881b      	ldrh	r3, [r3, #0]
 8003c86:	f023 0310 	bic.w	r3, r3, #16
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	4b06      	ldr	r3, [pc, #24]	; (8003ca8 <putEvt+0xd0>)
 8003c8e:	801a      	strh	r2, [r3, #0]

		HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003c90:	201e      	movs	r0, #30
 8003c92:	f002 fe5a 	bl	800694a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003c96:	2026      	movs	r0, #38	; 0x26
 8003c98:	f002 fe57 	bl	800694a <HAL_NVIC_EnableIRQ>

		//lock_fifo = false;
}
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	20001882 	.word	0x20001882
 8003ca8:	20001468 	.word	0x20001468
 8003cac:	20001881 	.word	0x20001881
 8003cb0:	20001880 	.word	0x20001880
 8003cb4:	200000a4 	.word	0x200000a4
 8003cb8:	20001883 	.word	0x20001883

08003cbc <getEvt>:
//-------------------------------------------------------------------------------------------
int getEvt()
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
int ret = evt_None;
 8003cc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cc6:	607b      	str	r3, [r7, #4]

	//while (lock_fifo);
	//lock_fifo = true;

	HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003cc8:	2026      	movs	r0, #38	; 0x26
 8003cca:	f002 fe4c 	bl	8006966 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(TIM4_IRQn);
 8003cce:	201e      	movs	r0, #30
 8003cd0:	f002 fe49 	bl	8006966 <HAL_NVIC_DisableIRQ>
	if (cnt_evt) {
 8003cd4:	4b16      	ldr	r3, [pc, #88]	; (8003d30 <getEvt+0x74>)
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d01e      	beq.n	8003d1a <getEvt+0x5e>
		ret = evt_fifo[rd_evt_adr];
 8003cdc:	4b15      	ldr	r3, [pc, #84]	; (8003d34 <getEvt+0x78>)
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	4b15      	ldr	r3, [pc, #84]	; (8003d38 <getEvt+0x7c>)
 8003ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ce8:	607b      	str	r3, [r7, #4]
		if (cnt_evt) cnt_evt--;
 8003cea:	4b11      	ldr	r3, [pc, #68]	; (8003d30 <getEvt+0x74>)
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d005      	beq.n	8003cfe <getEvt+0x42>
 8003cf2:	4b0f      	ldr	r3, [pc, #60]	; (8003d30 <getEvt+0x74>)
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	4b0d      	ldr	r3, [pc, #52]	; (8003d30 <getEvt+0x74>)
 8003cfc:	701a      	strb	r2, [r3, #0]
		if (rd_evt_adr < (MAX_FIFO_SIZE - 1) ) {
 8003cfe:	4b0d      	ldr	r3, [pc, #52]	; (8003d34 <getEvt+0x78>)
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	2b3e      	cmp	r3, #62	; 0x3e
 8003d04:	d806      	bhi.n	8003d14 <getEvt+0x58>
			rd_evt_adr++;
 8003d06:	4b0b      	ldr	r3, [pc, #44]	; (8003d34 <getEvt+0x78>)
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	4b09      	ldr	r3, [pc, #36]	; (8003d34 <getEvt+0x78>)
 8003d10:	701a      	strb	r2, [r3, #0]
 8003d12:	e002      	b.n	8003d1a <getEvt+0x5e>
		} else {
			rd_evt_adr = 0;
 8003d14:	4b07      	ldr	r3, [pc, #28]	; (8003d34 <getEvt+0x78>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	701a      	strb	r2, [r3, #0]
		}
	}

	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003d1a:	201e      	movs	r0, #30
 8003d1c:	f002 fe15 	bl	800694a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003d20:	2026      	movs	r0, #38	; 0x26
 8003d22:	f002 fe12 	bl	800694a <HAL_NVIC_EnableIRQ>

	//lock_fifo = false;

	return ret;
 8003d26:	687b      	ldr	r3, [r7, #4]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3708      	adds	r7, #8
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	20001882 	.word	0x20001882
 8003d34:	2000187f 	.word	0x2000187f
 8003d38:	200000a4 	.word	0x200000a4

08003d3c <nameStation>:
//-------------------------------------------------------------------------------------------
#ifdef SET_DISPLAY

//-------------------------------------------------------------------------------------------
const char *nameStation(float fr)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	ed87 0a01 	vstr	s0, [r7, #4]
int8_t ik = -1;
 8003d46:	23ff      	movs	r3, #255	; 0xff
 8003d48:	73fb      	strb	r3, [r7, #15]

	for (int8_t i = 0; i < MAX_LIST; i++) {
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	73bb      	strb	r3, [r7, #14]
 8003d4e:	e016      	b.n	8003d7e <nameStation+0x42>
		if (list[i].freq == fr) {
 8003d50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d54:	4a16      	ldr	r2, [pc, #88]	; (8003db0 <nameStation+0x74>)
 8003d56:	015b      	lsls	r3, r3, #5
 8003d58:	4413      	add	r3, r2
 8003d5a:	edd3 7a00 	vldr	s15, [r3]
 8003d5e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003d62:	eeb4 7a67 	vcmp.f32	s14, s15
 8003d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d6a:	d102      	bne.n	8003d72 <nameStation+0x36>
			ik = i;
 8003d6c:	7bbb      	ldrb	r3, [r7, #14]
 8003d6e:	73fb      	strb	r3, [r7, #15]
			break;
 8003d70:	e009      	b.n	8003d86 <nameStation+0x4a>
	for (int8_t i = 0; i < MAX_LIST; i++) {
 8003d72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	3301      	adds	r3, #1
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	73bb      	strb	r3, [r7, #14]
 8003d7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d82:	2b17      	cmp	r3, #23
 8003d84:	dde4      	ble.n	8003d50 <nameStation+0x14>
		}
	}

	if (ik != -1) return list[ik].name;
 8003d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d8e:	d006      	beq.n	8003d9e <nameStation+0x62>
 8003d90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d94:	015b      	lsls	r3, r3, #5
 8003d96:	4a06      	ldr	r2, [pc, #24]	; (8003db0 <nameStation+0x74>)
 8003d98:	4413      	add	r3, r2
 8003d9a:	3304      	adds	r3, #4
 8003d9c:	e001      	b.n	8003da2 <nameStation+0x66>
			 else return noneStation;
 8003d9e:	4b05      	ldr	r3, [pc, #20]	; (8003db4 <nameStation+0x78>)
 8003da0:	681b      	ldr	r3, [r3, #0]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	080172d0 	.word	0x080172d0
 8003db4:	200001d0 	.word	0x200001d0

08003db8 <getNextList>:
//-------------------------------------------------------------------------------------------
float getNextList(float fr)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	ed87 0a01 	vstr	s0, [r7, #4]
float ret = fr;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	60bb      	str	r3, [r7, #8]
int8_t ik = -1;
 8003dc6:	23ff      	movs	r3, #255	; 0xff
 8003dc8:	73fb      	strb	r3, [r7, #15]

	for (int8_t i = 0; i < MAX_LIST; i++) {
 8003dca:	2300      	movs	r3, #0
 8003dcc:	73bb      	strb	r3, [r7, #14]
 8003dce:	e016      	b.n	8003dfe <getNextList+0x46>
		if (list[i].freq == fr) {
 8003dd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003dd4:	4a2f      	ldr	r2, [pc, #188]	; (8003e94 <getNextList+0xdc>)
 8003dd6:	015b      	lsls	r3, r3, #5
 8003dd8:	4413      	add	r3, r2
 8003dda:	edd3 7a00 	vldr	s15, [r3]
 8003dde:	ed97 7a01 	vldr	s14, [r7, #4]
 8003de2:	eeb4 7a67 	vcmp.f32	s14, s15
 8003de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dea:	d102      	bne.n	8003df2 <getNextList+0x3a>
			ik = i;
 8003dec:	7bbb      	ldrb	r3, [r7, #14]
 8003dee:	73fb      	strb	r3, [r7, #15]
			break;
 8003df0:	e009      	b.n	8003e06 <getNextList+0x4e>
	for (int8_t i = 0; i < MAX_LIST; i++) {
 8003df2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	3301      	adds	r3, #1
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	73bb      	strb	r3, [r7, #14]
 8003dfe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e02:	2b17      	cmp	r3, #23
 8003e04:	dde4      	ble.n	8003dd0 <getNextList+0x18>
		}
	}
	if (ik != -1) {
 8003e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e0e:	d00a      	beq.n	8003e26 <getNextList+0x6e>
		if (++ik == MAX_LIST) ik = 0;
 8003e10:	7bfb      	ldrb	r3, [r7, #15]
 8003e12:	3301      	adds	r3, #1
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	73fb      	strb	r3, [r7, #15]
 8003e18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e1c:	2b18      	cmp	r3, #24
 8003e1e:	d127      	bne.n	8003e70 <getNextList+0xb8>
 8003e20:	2300      	movs	r3, #0
 8003e22:	73fb      	strb	r3, [r7, #15]
 8003e24:	e024      	b.n	8003e70 <getNextList+0xb8>
	} else {
		for (int8_t i = 0; i < MAX_LIST; i++) {
 8003e26:	2300      	movs	r3, #0
 8003e28:	737b      	strb	r3, [r7, #13]
 8003e2a:	e016      	b.n	8003e5a <getNextList+0xa2>
			if (list[i].freq > fr) {
 8003e2c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003e30:	4a18      	ldr	r2, [pc, #96]	; (8003e94 <getNextList+0xdc>)
 8003e32:	015b      	lsls	r3, r3, #5
 8003e34:	4413      	add	r3, r2
 8003e36:	edd3 7a00 	vldr	s15, [r3]
 8003e3a:	ed97 7a01 	vldr	s14, [r7, #4]
 8003e3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e46:	d502      	bpl.n	8003e4e <getNextList+0x96>
				ik = i;
 8003e48:	7b7b      	ldrb	r3, [r7, #13]
 8003e4a:	73fb      	strb	r3, [r7, #15]
				break;
 8003e4c:	e009      	b.n	8003e62 <getNextList+0xaa>
		for (int8_t i = 0; i < MAX_LIST; i++) {
 8003e4e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	3301      	adds	r3, #1
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	737b      	strb	r3, [r7, #13]
 8003e5a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003e5e:	2b17      	cmp	r3, #23
 8003e60:	dde4      	ble.n	8003e2c <getNextList+0x74>
			}
		}
		if (ik == -1) ik = 0;
 8003e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e6a:	d101      	bne.n	8003e70 <getNextList+0xb8>
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	73fb      	strb	r3, [r7, #15]
	}
	ret = list[ik].freq;
 8003e70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e74:	4a07      	ldr	r2, [pc, #28]	; (8003e94 <getNextList+0xdc>)
 8003e76:	015b      	lsls	r3, r3, #5
 8003e78:	4413      	add	r3, r2
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	60bb      	str	r3, [r7, #8]

	return ret;
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	ee07 3a90 	vmov	s15, r3
}
 8003e84:	eeb0 0a67 	vmov.f32	s0, s15
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	080172d0 	.word	0x080172d0

08003e98 <showLine>:
//-------------------------------------------------------------------------------------------
void showLine(char *msg, uint16_t lin, int *last_len, bool update)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b08a      	sub	sp, #40	; 0x28
 8003e9c:	af02      	add	r7, sp, #8
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	607a      	str	r2, [r7, #4]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	817b      	strh	r3, [r7, #10]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	727b      	strb	r3, [r7, #9]
int il = strlen(msg);
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f7fc f98f 	bl	80001d0 <strlen>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	617b      	str	r3, [r7, #20]
int xf = ( (SCREEN_WIDTH - (lfnt->FontWidth * il) ) >> 1);// & 0x7f;
 8003eb6:	4b2e      	ldr	r3, [pc, #184]	; (8003f70 <showLine+0xd8>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	fb02 f303 	mul.w	r3, r2, r3
 8003ec4:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8003ec8:	105b      	asrs	r3, r3, #1
 8003eca:	61fb      	str	r3, [r7, #28]
bool yes = false;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	76fb      	strb	r3, [r7, #27]

	if (*last_len > il) {
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	da0d      	bge.n	8003ef6 <showLine+0x5e>
		ST7565_DrawFilledRectangle(2, lin, SCREEN_WIDTH - 4, lfnt->FontHeight, PIX_OFF);
 8003eda:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003ede:	4b24      	ldr	r3, [pc, #144]	; (8003f70 <showLine+0xd8>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	785b      	ldrb	r3, [r3, #1]
 8003ee4:	b21b      	sxth	r3, r3
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	9200      	str	r2, [sp, #0]
 8003eea:	227c      	movs	r2, #124	; 0x7c
 8003eec:	2002      	movs	r0, #2
 8003eee:	f7fd fe96 	bl	8001c1e <ST7565_DrawFilledRectangle>
		yes = true;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	76fb      	strb	r3, [r7, #27]
	}
	*last_len = il;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	601a      	str	r2, [r3, #0]
	if (*msg > 0x7f) {
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	b25b      	sxtb	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	da03      	bge.n	8003f0e <showLine+0x76>
		xf += il;
 8003f06:	69fa      	ldr	r2, [r7, #28]
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	61fb      	str	r3, [r7, #28]
	}
	if (!yes) ST7565_DrawFilledRectangle(2, lin, SCREEN_WIDTH - 4, lfnt->FontHeight, PIX_OFF);
 8003f0e:	7efb      	ldrb	r3, [r7, #27]
 8003f10:	f083 0301 	eor.w	r3, r3, #1
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00b      	beq.n	8003f32 <showLine+0x9a>
 8003f1a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003f1e:	4b14      	ldr	r3, [pc, #80]	; (8003f70 <showLine+0xd8>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	785b      	ldrb	r3, [r3, #1]
 8003f24:	b21b      	sxth	r3, r3
 8003f26:	2200      	movs	r2, #0
 8003f28:	9200      	str	r2, [sp, #0]
 8003f2a:	227c      	movs	r2, #124	; 0x7c
 8003f2c:	2002      	movs	r0, #2
 8003f2e:	f7fd fe76 	bl	8001c1e <ST7565_DrawFilledRectangle>

	if ((!xf) || (xf > (SCREEN_WIDTH - 4))) xf = 1;
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d002      	beq.n	8003f3e <showLine+0xa6>
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	2b7c      	cmp	r3, #124	; 0x7c
 8003f3c:	dd01      	ble.n	8003f42 <showLine+0xaa>
 8003f3e:	2301      	movs	r3, #1
 8003f40:	61fb      	str	r3, [r7, #28]
	ST7565_Print(xf, lin, msg, lfnt, 1, PIX_ON);
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	b218      	sxth	r0, r3
 8003f46:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003f4a:	4b09      	ldr	r3, [pc, #36]	; (8003f70 <showLine+0xd8>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	9201      	str	r2, [sp, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	9200      	str	r2, [sp, #0]
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	f7fd fc08 	bl	800176c <ST7565_Print>
	if (update) ST7565_Update();
 8003f5c:	7a7b      	ldrb	r3, [r7, #9]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <showLine+0xce>
 8003f62:	f7fd fa53 	bl	800140c <ST7565_Update>
}
 8003f66:	bf00      	nop
 8003f68:	3720      	adds	r7, #32
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	20003cd0 	.word	0x20003cd0

08003f74 <errLedOn>:
#endif
//-------------------------------------------------------------------------------------------
void errLedOn(bool on)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	71fb      	strb	r3, [r7, #7]
	if (on)
 8003f7e:	79fb      	ldrb	r3, [r7, #7]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d005      	beq.n	8003f90 <errLedOn+0x1c>
		HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_SET);//LED ON
 8003f84:	2201      	movs	r2, #1
 8003f86:	2108      	movs	r1, #8
 8003f88:	4806      	ldr	r0, [pc, #24]	; (8003fa4 <errLedOn+0x30>)
 8003f8a:	f003 f94d 	bl	8007228 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_RESET);//LED OFF
}
 8003f8e:	e004      	b.n	8003f9a <errLedOn+0x26>
		HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_RESET);//LED OFF
 8003f90:	2200      	movs	r2, #0
 8003f92:	2108      	movs	r1, #8
 8003f94:	4803      	ldr	r0, [pc, #12]	; (8003fa4 <errLedOn+0x30>)
 8003f96:	f003 f947 	bl	8007228 <HAL_GPIO_WritePin>
}
 8003f9a:	bf00      	nop
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	48000800 	.word	0x48000800

08003fa8 <get_secCounter>:
//------------------------------------------------------------------------------------
uint32_t get_secCounter()
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
	return secCounter;
 8003fac:	4b03      	ldr	r3, [pc, #12]	; (8003fbc <get_secCounter+0x14>)
 8003fae:	681b      	ldr	r3, [r3, #0]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	2000146c 	.word	0x2000146c

08003fc0 <set_Date>:

    for (i = 0; i < strlen(st); i++) *(st + i) = toupper(*(st + i));
}
//------------------------------------------------------------------------------------------
void set_Date(uint32_t usec)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b094      	sub	sp, #80	; 0x50
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
struct tm ts;
time_t ep = (time_t)usec;
 8003fc8:	6879      	ldr	r1, [r7, #4]
 8003fca:	2000      	movs	r0, #0
 8003fcc:	460a      	mov	r2, r1
 8003fce:	4603      	mov	r3, r0
 8003fd0:	e9c7 2308 	strd	r2, r3, [r7, #32]

	gmtime_r(&ep, &ts);
 8003fd4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003fd8:	f107 0320 	add.w	r3, r7, #32
 8003fdc:	4611      	mov	r1, r2
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f00d fbba 	bl	8011758 <gmtime_r>

	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	sDate.WeekDay = ts.tm_wday;
 8003fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	723b      	strb	r3, [r7, #8]
	sDate.Month   = ts.tm_mon + 1;
 8003fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	3301      	adds	r3, #1
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	727b      	strb	r3, [r7, #9]
	sDate.Date    = ts.tm_mday;
 8003ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	72bb      	strb	r3, [r7, #10]
	sDate.Year    = ts.tm_year;
 8003ffa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	72fb      	strb	r3, [r7, #11]
	sTime.Hours   = ts.tm_hour + tZone;
 8004000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004002:	b2da      	uxtb	r2, r3
 8004004:	4b1a      	ldr	r3, [pc, #104]	; (8004070 <set_Date+0xb0>)
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	4413      	add	r3, r2
 800400a:	b2db      	uxtb	r3, r3
 800400c:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = ts.tm_min;
 800400e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004010:	b2db      	uxtb	r3, r3
 8004012:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = ts.tm_sec;
 8004014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004016:	b2db      	uxtb	r3, r3
 8004018:	73bb      	strb	r3, [r7, #14]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 800401a:	f107 030c 	add.w	r3, r7, #12
 800401e:	2200      	movs	r2, #0
 8004020:	4619      	mov	r1, r3
 8004022:	4814      	ldr	r0, [pc, #80]	; (8004074 <set_Date+0xb4>)
 8004024:	f006 f95f 	bl	800a2e6 <HAL_RTC_SetTime>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d007      	beq.n	800403e <set_Date+0x7e>
 800402e:	4b12      	ldr	r3, [pc, #72]	; (8004078 <set_Date+0xb8>)
 8004030:	881b      	ldrh	r3, [r3, #0]
 8004032:	f043 0308 	orr.w	r3, r3, #8
 8004036:	b29a      	uxth	r2, r3
 8004038:	4b0f      	ldr	r3, [pc, #60]	; (8004078 <set_Date+0xb8>)
 800403a:	801a      	strh	r2, [r3, #0]
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
		else {
			setDate = true;
		}
	}
}
 800403c:	e014      	b.n	8004068 <set_Date+0xa8>
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 800403e:	f107 0308 	add.w	r3, r7, #8
 8004042:	2200      	movs	r2, #0
 8004044:	4619      	mov	r1, r3
 8004046:	480b      	ldr	r0, [pc, #44]	; (8004074 <set_Date+0xb4>)
 8004048:	f006 fa46 	bl	800a4d8 <HAL_RTC_SetDate>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d007      	beq.n	8004062 <set_Date+0xa2>
 8004052:	4b09      	ldr	r3, [pc, #36]	; (8004078 <set_Date+0xb8>)
 8004054:	881b      	ldrh	r3, [r3, #0]
 8004056:	f043 0308 	orr.w	r3, r3, #8
 800405a:	b29a      	uxth	r2, r3
 800405c:	4b06      	ldr	r3, [pc, #24]	; (8004078 <set_Date+0xb8>)
 800405e:	801a      	strh	r2, [r3, #0]
}
 8004060:	e002      	b.n	8004068 <set_Date+0xa8>
			setDate = true;
 8004062:	4b06      	ldr	r3, [pc, #24]	; (800407c <set_Date+0xbc>)
 8004064:	2201      	movs	r2, #1
 8004066:	701a      	strb	r2, [r3, #0]
}
 8004068:	bf00      	nop
 800406a:	3750      	adds	r7, #80	; 0x50
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	2000187e 	.word	0x2000187e
 8004074:	2000090c 	.word	0x2000090c
 8004078:	20001468 	.word	0x20001468
 800407c:	2000187d 	.word	0x2000187d

08004080 <sec2str>:

	return ep;
}
//------------------------------------------------------------------------------------------
int sec2str(char *st)
{
 8004080:	b590      	push	{r4, r7, lr}
 8004082:	b093      	sub	sp, #76	; 0x4c
 8004084:	af04      	add	r7, sp, #16
 8004086:	6078      	str	r0, [r7, #4]
int ret = 0;
 8004088:	2300      	movs	r3, #0
 800408a:	637b      	str	r3, [r7, #52]	; 0x34

	if (!setDate) {
 800408c:	4b40      	ldr	r3, [pc, #256]	; (8004190 <sec2str+0x110>)
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	f083 0301 	eor.w	r3, r3, #1
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d040      	beq.n	800411c <sec2str+0x9c>
		uint32_t sec = get_secCounter();
 800409a:	f7ff ff85 	bl	8003fa8 <get_secCounter>
 800409e:	6338      	str	r0, [r7, #48]	; 0x30

		uint32_t day = sec / (60 * 60 * 24);
 80040a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a2:	4a3c      	ldr	r2, [pc, #240]	; (8004194 <sec2str+0x114>)
 80040a4:	fba2 2303 	umull	r2, r3, r2, r3
 80040a8:	0c1b      	lsrs	r3, r3, #16
 80040aa:	62fb      	str	r3, [r7, #44]	; 0x2c
		sec %= (60 * 60 * 24);
 80040ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ae:	4a39      	ldr	r2, [pc, #228]	; (8004194 <sec2str+0x114>)
 80040b0:	fba2 1203 	umull	r1, r2, r2, r3
 80040b4:	0c12      	lsrs	r2, r2, #16
 80040b6:	4938      	ldr	r1, [pc, #224]	; (8004198 <sec2str+0x118>)
 80040b8:	fb01 f202 	mul.w	r2, r1, r2
 80040bc:	1a9b      	subs	r3, r3, r2
 80040be:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t hour = sec / (60 * 60);
 80040c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c2:	4a36      	ldr	r2, [pc, #216]	; (800419c <sec2str+0x11c>)
 80040c4:	fba2 2303 	umull	r2, r3, r2, r3
 80040c8:	0adb      	lsrs	r3, r3, #11
 80040ca:	62bb      	str	r3, [r7, #40]	; 0x28
		sec %= (60 * 60);
 80040cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ce:	4a33      	ldr	r2, [pc, #204]	; (800419c <sec2str+0x11c>)
 80040d0:	fba2 1203 	umull	r1, r2, r2, r3
 80040d4:	0ad2      	lsrs	r2, r2, #11
 80040d6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80040da:	fb01 f202 	mul.w	r2, r1, r2
 80040de:	1a9b      	subs	r3, r3, r2
 80040e0:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t min = sec / (60);
 80040e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e4:	4a2e      	ldr	r2, [pc, #184]	; (80041a0 <sec2str+0x120>)
 80040e6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ea:	095b      	lsrs	r3, r3, #5
 80040ec:	627b      	str	r3, [r7, #36]	; 0x24
		sec %= 60;
 80040ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040f0:	4b2b      	ldr	r3, [pc, #172]	; (80041a0 <sec2str+0x120>)
 80040f2:	fba3 1302 	umull	r1, r3, r3, r2
 80040f6:	0959      	lsrs	r1, r3, #5
 80040f8:	460b      	mov	r3, r1
 80040fa:	011b      	lsls	r3, r3, #4
 80040fc:	1a5b      	subs	r3, r3, r1
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	633b      	str	r3, [r7, #48]	; 0x30

		ret = sprintf(st, "%lu.%02lu:%02lu:%02lu", day, hour, min, sec);
 8004104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004106:	9301      	str	r3, [sp, #4]
 8004108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004110:	4924      	ldr	r1, [pc, #144]	; (80041a4 <sec2str+0x124>)
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f00e f870 	bl	80121f8 <siprintf>
 8004118:	6378      	str	r0, [r7, #52]	; 0x34
 800411a:	e034      	b.n	8004186 <sec2str+0x106>
	} else {
		RTC_TimeTypeDef sTime;
		RTC_DateTypeDef sDate;
		if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN)) devError |= devRTC;
 800411c:	f107 030c 	add.w	r3, r7, #12
 8004120:	2200      	movs	r2, #0
 8004122:	4619      	mov	r1, r3
 8004124:	4820      	ldr	r0, [pc, #128]	; (80041a8 <sec2str+0x128>)
 8004126:	f006 fa5e 	bl	800a5e6 <HAL_RTC_GetDate>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d007      	beq.n	8004140 <sec2str+0xc0>
 8004130:	4b1e      	ldr	r3, [pc, #120]	; (80041ac <sec2str+0x12c>)
 8004132:	881b      	ldrh	r3, [r3, #0]
 8004134:	f043 0308 	orr.w	r3, r3, #8
 8004138:	b29a      	uxth	r2, r3
 800413a:	4b1c      	ldr	r3, [pc, #112]	; (80041ac <sec2str+0x12c>)
 800413c:	801a      	strh	r2, [r3, #0]
 800413e:	e022      	b.n	8004186 <sec2str+0x106>
		else {
			if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN)) devError |= devRTC;
 8004140:	f107 0310 	add.w	r3, r7, #16
 8004144:	2200      	movs	r2, #0
 8004146:	4619      	mov	r1, r3
 8004148:	4817      	ldr	r0, [pc, #92]	; (80041a8 <sec2str+0x128>)
 800414a:	f006 f969 	bl	800a420 <HAL_RTC_GetTime>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d007      	beq.n	8004164 <sec2str+0xe4>
 8004154:	4b15      	ldr	r3, [pc, #84]	; (80041ac <sec2str+0x12c>)
 8004156:	881b      	ldrh	r3, [r3, #0]
 8004158:	f043 0308 	orr.w	r3, r3, #8
 800415c:	b29a      	uxth	r2, r3
 800415e:	4b13      	ldr	r3, [pc, #76]	; (80041ac <sec2str+0x12c>)
 8004160:	801a      	strh	r2, [r3, #0]
 8004162:	e010      	b.n	8004186 <sec2str+0x106>
			else {
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
								sDate.Date, sDate.Month,
 8004164:	7bbb      	ldrb	r3, [r7, #14]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 8004166:	4618      	mov	r0, r3
								sDate.Date, sDate.Month,
 8004168:	7b7b      	ldrb	r3, [r7, #13]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 800416a:	461c      	mov	r4, r3
								sTime.Hours, sTime.Minutes, sTime.Seconds);
 800416c:	7c3b      	ldrb	r3, [r7, #16]
 800416e:	7c7a      	ldrb	r2, [r7, #17]
 8004170:	7cb9      	ldrb	r1, [r7, #18]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 8004172:	9102      	str	r1, [sp, #8]
 8004174:	9201      	str	r2, [sp, #4]
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	4623      	mov	r3, r4
 800417a:	4602      	mov	r2, r0
 800417c:	490c      	ldr	r1, [pc, #48]	; (80041b0 <sec2str+0x130>)
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f00e f83a 	bl	80121f8 <siprintf>
 8004184:	6378      	str	r0, [r7, #52]	; 0x34
			}
		}
	}

	return ret;
 8004186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004188:	4618      	mov	r0, r3
 800418a:	373c      	adds	r7, #60	; 0x3c
 800418c:	46bd      	mov	sp, r7
 800418e:	bd90      	pop	{r4, r7, pc}
 8004190:	2000187d 	.word	0x2000187d
 8004194:	c22e4507 	.word	0xc22e4507
 8004198:	00015180 	.word	0x00015180
 800419c:	91a2b3c5 	.word	0x91a2b3c5
 80041a0:	88888889 	.word	0x88888889
 80041a4:	0801667c 	.word	0x0801667c
 80041a8:	2000090c 	.word	0x2000090c
 80041ac:	20001468 	.word	0x20001468
 80041b0:	08016694 	.word	0x08016694

080041b4 <Report>:
//--------------------------------------------------------------------------------------------
void Report(const uint8_t addTime, const char *fmt, ...)
{
 80041b4:	b40e      	push	{r1, r2, r3}
 80041b6:	b590      	push	{r4, r7, lr}
 80041b8:	b088      	sub	sp, #32
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	4603      	mov	r3, r0
 80041be:	71fb      	strb	r3, [r7, #7]
size_t len = MAX_UART_BUF;
 80041c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041c4:	617b      	str	r3, [r7, #20]
char *buf = &cmdBuf[0];
 80041c6:	4b32      	ldr	r3, [pc, #200]	; (8004290 <Report+0xdc>)
 80041c8:	613b      	str	r3, [r7, #16]
uint32_t cnt = 16;
 80041ca:	2310      	movs	r3, #16
 80041cc:	61fb      	str	r3, [r7, #28]
uint32_t stim = HAL_GetTick();
 80041ce:	f002 fa71 	bl	80066b4 <HAL_GetTick>
 80041d2:	60f8      	str	r0, [r7, #12]

	while (!uartRdy && cnt) {
 80041d4:	e008      	b.n	80041e8 <Report+0x34>
		if (HAL_GetTick() - stim) cnt--;
 80041d6:	f002 fa6d 	bl	80066b4 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	4293      	cmp	r3, r2
 80041e0:	d002      	beq.n	80041e8 <Report+0x34>
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	3b01      	subs	r3, #1
 80041e6:	61fb      	str	r3, [r7, #28]
	while (!uartRdy && cnt) {
 80041e8:	4b2a      	ldr	r3, [pc, #168]	; (8004294 <Report+0xe0>)
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d102      	bne.n	80041f6 <Report+0x42>
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1ef      	bne.n	80041d6 <Report+0x22>
	}

	//if (buf) {
		*buf = '\0';
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	2200      	movs	r2, #0
 80041fa:	701a      	strb	r2, [r3, #0]
		int dl = 0;
 80041fc:	2300      	movs	r3, #0
 80041fe:	61bb      	str	r3, [r7, #24]
		if (addTime) {
 8004200:	79fb      	ldrb	r3, [r7, #7]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d010      	beq.n	8004228 <Report+0x74>
			dl = sec2str(buf);
 8004206:	6938      	ldr	r0, [r7, #16]
 8004208:	f7ff ff3a 	bl	8004080 <sec2str>
 800420c:	61b8      	str	r0, [r7, #24]
			strcat(buf, " | ");
 800420e:	6938      	ldr	r0, [r7, #16]
 8004210:	f7fb ffde 	bl	80001d0 <strlen>
 8004214:	4603      	mov	r3, r0
 8004216:	461a      	mov	r2, r3
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	4413      	add	r3, r2
 800421c:	4a1e      	ldr	r2, [pc, #120]	; (8004298 <Report+0xe4>)
 800421e:	6810      	ldr	r0, [r2, #0]
 8004220:	6018      	str	r0, [r3, #0]
			dl += 3;
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	3303      	adds	r3, #3
 8004226:	61bb      	str	r3, [r7, #24]
		}

		va_list args;
		va_start(args, fmt);
 8004228:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800422c:	60bb      	str	r3, [r7, #8]
		vsnprintf(buf + dl, len - dl, fmt, args);
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	18d0      	adds	r0, r2, r3
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	1ad1      	subs	r1, r2, r3
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800423e:	f00e ff19 	bl	8013074 <vsniprintf>

		uartRdy = false;
 8004242:	4b14      	ldr	r3, [pc, #80]	; (8004294 <Report+0xe0>)
 8004244:	2200      	movs	r2, #0
 8004246:	701a      	strb	r2, [r3, #0]
		if (HAL_UART_Transmit_DMA(cmdPort, (uint8_t *)buf, strlen(buf)) != HAL_OK) devError |= devUART;
 8004248:	4b14      	ldr	r3, [pc, #80]	; (800429c <Report+0xe8>)
 800424a:	681c      	ldr	r4, [r3, #0]
 800424c:	6938      	ldr	r0, [r7, #16]
 800424e:	f7fb ffbf 	bl	80001d0 <strlen>
 8004252:	4603      	mov	r3, r0
 8004254:	b29b      	uxth	r3, r3
 8004256:	461a      	mov	r2, r3
 8004258:	6939      	ldr	r1, [r7, #16]
 800425a:	4620      	mov	r0, r4
 800425c:	f008 fc72 	bl	800cb44 <HAL_UART_Transmit_DMA>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d006      	beq.n	8004274 <Report+0xc0>
 8004266:	4b0e      	ldr	r3, [pc, #56]	; (80042a0 <Report+0xec>)
 8004268:	881b      	ldrh	r3, [r3, #0]
 800426a:	f043 0302 	orr.w	r3, r3, #2
 800426e:	b29a      	uxth	r2, r3
 8004270:	4b0b      	ldr	r3, [pc, #44]	; (80042a0 <Report+0xec>)
 8004272:	801a      	strh	r2, [r3, #0]
		while (!uartRdy) {} //HAL_Delay(1)
 8004274:	bf00      	nop
 8004276:	4b07      	ldr	r3, [pc, #28]	; (8004294 <Report+0xe0>)
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0fb      	beq.n	8004276 <Report+0xc2>
	//	free(buf);
	//} else {
	//	devError |= devMEM;
	//}

}
 800427e:	bf00      	nop
 8004280:	bf00      	nop
 8004282:	3720      	adds	r7, #32
 8004284:	46bd      	mov	sp, r7
 8004286:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800428a:	b003      	add	sp, #12
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	20001068 	.word	0x20001068
 8004294:	20000014 	.word	0x20000014
 8004298:	080166b0 	.word	0x080166b0
 800429c:	20000010 	.word	0x20000010
 80042a0:	20001468 	.word	0x20001468

080042a4 <HAL_TIM_PeriodElapsedCallback>:



//------------------------------------------------------------------------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042a4:	b5b0      	push	{r4, r5, r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) {
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a15      	ldr	r2, [pc, #84]	; (8004308 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d124      	bne.n	8004300 <HAL_TIM_PeriodElapsedCallback+0x5c>
		msCounter++;//inc_msCounter();
 80042b6:	4b15      	ldr	r3, [pc, #84]	; (800430c <HAL_TIM_PeriodElapsedCallback+0x68>)
 80042b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042bc:	1c54      	adds	r4, r2, #1
 80042be:	f143 0500 	adc.w	r5, r3, #0
 80042c2:	4b12      	ldr	r3, [pc, #72]	; (800430c <HAL_TIM_PeriodElapsedCallback+0x68>)
 80042c4:	e9c3 4500 	strd	r4, r5, [r3]
		if (!(msCounter % _1s)) {// 1 seconda
 80042c8:	4b10      	ldr	r3, [pc, #64]	; (800430c <HAL_TIM_PeriodElapsedCallback+0x68>)
 80042ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80042ce:	f04f 0264 	mov.w	r2, #100	; 0x64
 80042d2:	f04f 0300 	mov.w	r3, #0
 80042d6:	f7fc fd27 	bl	8000d28 <__aeabi_uldivmod>
 80042da:	4313      	orrs	r3, r2
 80042dc:	d110      	bne.n	8004300 <HAL_TIM_PeriodElapsedCallback+0x5c>
			secCounter++;
 80042de:	4b0c      	ldr	r3, [pc, #48]	; (8004310 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	3301      	adds	r3, #1
 80042e4:	4a0a      	ldr	r2, [pc, #40]	; (8004310 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80042e6:	6013      	str	r3, [r2, #0]
		  	HAL_GPIO_TogglePin(TIK_LED_GPIO_Port, TIK_LED_Pin);
 80042e8:	2101      	movs	r1, #1
 80042ea:	480a      	ldr	r0, [pc, #40]	; (8004314 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80042ec:	f002 ffb4 	bl	8007258 <HAL_GPIO_TogglePin>
#ifdef SET_DISPLAY
		  	if (startSec) putEvt(evt_Sec);
 80042f0:	4b09      	ldr	r3, [pc, #36]	; (8004318 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d002      	beq.n	8004300 <HAL_TIM_PeriodElapsedCallback+0x5c>
 80042fa:	2008      	movs	r0, #8
 80042fc:	f7ff fc6c 	bl	8003bd8 <putEvt>
#endif
	  	}
	}
}
 8004300:	bf00      	nop
 8004302:	3708      	adds	r7, #8
 8004304:	46bd      	mov	sp, r7
 8004306:	bdb0      	pop	{r4, r5, r7, pc}
 8004308:	40000800 	.word	0x40000800
 800430c:	20001470 	.word	0x20001470
 8004310:	2000146c 	.word	0x2000146c
 8004314:	48000800 	.word	0x48000800
 8004318:	20003cce 	.word	0x20003cce

0800431c <HAL_UART_TxCpltCallback>:
//--------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a05      	ldr	r2, [pc, #20]	; (8004340 <HAL_UART_TxCpltCallback+0x24>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d102      	bne.n	8004334 <HAL_UART_TxCpltCallback+0x18>
		uartRdy = 1;
 800432e:	4b05      	ldr	r3, [pc, #20]	; (8004344 <HAL_UART_TxCpltCallback+0x28>)
 8004330:	2201      	movs	r2, #1
 8004332:	701a      	strb	r2, [r3, #0]
	}
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr
 8004340:	40004400 	.word	0x40004400
 8004344:	20000014 	.word	0x20000014

08004348 <HAL_UART_RxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004348:	b590      	push	{r4, r7, lr}
 800434a:	b08d      	sub	sp, #52	; 0x34
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4aa1      	ldr	r2, [pc, #644]	; (80045dc <HAL_UART_RxCpltCallback+0x294>)
 8004356:	4293      	cmp	r3, r2
 8004358:	f040 822a 	bne.w	80047b0 <HAL_UART_RxCpltCallback+0x468>
		rxBuf[rxInd++] = (char)rxByte;
 800435c:	4ba0      	ldr	r3, [pc, #640]	; (80045e0 <HAL_UART_RxCpltCallback+0x298>)
 800435e:	881b      	ldrh	r3, [r3, #0]
 8004360:	1c5a      	adds	r2, r3, #1
 8004362:	b291      	uxth	r1, r2
 8004364:	4a9e      	ldr	r2, [pc, #632]	; (80045e0 <HAL_UART_RxCpltCallback+0x298>)
 8004366:	8011      	strh	r1, [r2, #0]
 8004368:	461a      	mov	r2, r3
 800436a:	4b9e      	ldr	r3, [pc, #632]	; (80045e4 <HAL_UART_RxCpltCallback+0x29c>)
 800436c:	7819      	ldrb	r1, [r3, #0]
 800436e:	4b9e      	ldr	r3, [pc, #632]	; (80045e8 <HAL_UART_RxCpltCallback+0x2a0>)
 8004370:	5499      	strb	r1, [r3, r2]
		if (rxByte == 0x0a) {//end of line
 8004372:	4b9c      	ldr	r3, [pc, #624]	; (80045e4 <HAL_UART_RxCpltCallback+0x29c>)
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	2b0a      	cmp	r3, #10
 8004378:	f040 820b 	bne.w	8004792 <HAL_UART_RxCpltCallback+0x44a>
			rxBuf[--rxInd] = '\0';
 800437c:	4b98      	ldr	r3, [pc, #608]	; (80045e0 <HAL_UART_RxCpltCallback+0x298>)
 800437e:	881b      	ldrh	r3, [r3, #0]
 8004380:	3b01      	subs	r3, #1
 8004382:	b29a      	uxth	r2, r3
 8004384:	4b96      	ldr	r3, [pc, #600]	; (80045e0 <HAL_UART_RxCpltCallback+0x298>)
 8004386:	801a      	strh	r2, [r3, #0]
 8004388:	4b95      	ldr	r3, [pc, #596]	; (80045e0 <HAL_UART_RxCpltCallback+0x298>)
 800438a:	881b      	ldrh	r3, [r3, #0]
 800438c:	461a      	mov	r2, r3
 800438e:	4b96      	ldr	r3, [pc, #600]	; (80045e8 <HAL_UART_RxCpltCallback+0x2a0>)
 8004390:	2100      	movs	r1, #0
 8004392:	5499      	strb	r1, [r3, r2]

			int i, ev = -1;
 8004394:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004398:	62bb      	str	r3, [r7, #40]	; 0x28
			if (strlen(rxBuf) > 2) {
 800439a:	4893      	ldr	r0, [pc, #588]	; (80045e8 <HAL_UART_RxCpltCallback+0x2a0>)
 800439c:	f7fb ff18 	bl	80001d0 <strlen>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	f240 81ef 	bls.w	8004786 <HAL_UART_RxCpltCallback+0x43e>
				for (i = 0; i < MAX_CMDS; i++) {
 80043a8:	2300      	movs	r3, #0
 80043aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043ac:	e1dc      	b.n	8004768 <HAL_UART_RxCpltCallback+0x420>
					if (!strncmp(rxBuf, s_cmds[i], strlen(s_cmds[i]))) {
 80043ae:	4a8f      	ldr	r2, [pc, #572]	; (80045ec <HAL_UART_RxCpltCallback+0x2a4>)
 80043b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80043b6:	4a8d      	ldr	r2, [pc, #564]	; (80045ec <HAL_UART_RxCpltCallback+0x2a4>)
 80043b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fb ff06 	bl	80001d0 <strlen>
 80043c4:	4603      	mov	r3, r0
 80043c6:	461a      	mov	r2, r3
 80043c8:	4621      	mov	r1, r4
 80043ca:	4887      	ldr	r0, [pc, #540]	; (80045e8 <HAL_UART_RxCpltCallback+0x2a0>)
 80043cc:	f00d ff41 	bl	8012252 <strncmp>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f040 81c5 	bne.w	8004762 <HAL_UART_RxCpltCallback+0x41a>
						char *uk = rxBuf + strlen(s_cmds[i]);
 80043d8:	4a84      	ldr	r2, [pc, #528]	; (80045ec <HAL_UART_RxCpltCallback+0x2a4>)
 80043da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7fb fef5 	bl	80001d0 <strlen>
 80043e6:	4603      	mov	r3, r0
 80043e8:	4a7f      	ldr	r2, [pc, #508]	; (80045e8 <HAL_UART_RxCpltCallback+0x2a0>)
 80043ea:	4413      	add	r3, r2
 80043ec:	623b      	str	r3, [r7, #32]
						ev = -1;
 80043ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043f2:	62bb      	str	r3, [r7, #40]	; 0x28
						switch (i) {
 80043f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f6:	2b10      	cmp	r3, #16
 80043f8:	f200 81bb 	bhi.w	8004772 <HAL_UART_RxCpltCallback+0x42a>
 80043fc:	a201      	add	r2, pc, #4	; (adr r2, 8004404 <HAL_UART_RxCpltCallback+0xbc>)
 80043fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004402:	bf00      	nop
 8004404:	08004571 	.word	0x08004571
 8004408:	08004577 	.word	0x08004577
 800440c:	0800457d 	.word	0x0800457d
 8004410:	08004773 	.word	0x08004773
 8004414:	080045cf 	.word	0x080045cf
 8004418:	080045cf 	.word	0x080045cf
 800441c:	08004705 	.word	0x08004705
 8004420:	08004669 	.word	0x08004669
 8004424:	08004773 	.word	0x08004773
 8004428:	08004571 	.word	0x08004571
 800442c:	08004571 	.word	0x08004571
 8004430:	08004541 	.word	0x08004541
 8004434:	080044fd 	.word	0x080044fd
 8004438:	08004475 	.word	0x08004475
 800443c:	080044df 	.word	0x080044df
 8004440:	08004571 	.word	0x08004571
 8004444:	08004449 	.word	0x08004449
							case cmdBand://"band:2"
								if (strlen(uk) >= 1) {
 8004448:	6a3b      	ldr	r3, [r7, #32]
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 8176 	beq.w	800473e <HAL_UART_RxCpltCallback+0x3f6>
									newBand = atol(uk);
 8004452:	6a38      	ldr	r0, [r7, #32]
 8004454:	f00d f976 	bl	8011744 <atol>
 8004458:	4603      	mov	r3, r0
 800445a:	b2da      	uxtb	r2, r3
 800445c:	4b64      	ldr	r3, [pc, #400]	; (80045f0 <HAL_UART_RxCpltCallback+0x2a8>)
 800445e:	701a      	strb	r2, [r3, #0]
									if (newBand != Band) {
 8004460:	4b63      	ldr	r3, [pc, #396]	; (80045f0 <HAL_UART_RxCpltCallback+0x2a8>)
 8004462:	781a      	ldrb	r2, [r3, #0]
 8004464:	4b63      	ldr	r3, [pc, #396]	; (80045f4 <HAL_UART_RxCpltCallback+0x2ac>)
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	429a      	cmp	r2, r3
 800446a:	f000 8168 	beq.w	800473e <HAL_UART_RxCpltCallback+0x3f6>
										ev = i;
 800446e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004470:	62bb      	str	r3, [r7, #40]	; 0x28
									}
								}
							break;
 8004472:	e164      	b.n	800473e <HAL_UART_RxCpltCallback+0x3f6>
							case cmdVol:
								if (strlen(uk) >= 1) {
 8004474:	6a3b      	ldr	r3, [r7, #32]
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 8162 	beq.w	8004742 <HAL_UART_RxCpltCallback+0x3fa>
									uint8_t nv = Volume;
 800447e:	4b5e      	ldr	r3, [pc, #376]	; (80045f8 <HAL_UART_RxCpltCallback+0x2b0>)
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									if (strstr(uk, "up")) {
 8004486:	495d      	ldr	r1, [pc, #372]	; (80045fc <HAL_UART_RxCpltCallback+0x2b4>)
 8004488:	6a38      	ldr	r0, [r7, #32]
 800448a:	f00d fef6 	bl	801227a <strstr>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d005      	beq.n	80044a0 <HAL_UART_RxCpltCallback+0x158>
										nv++;
 8004494:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004498:	3301      	adds	r3, #1
 800449a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800449e:	e012      	b.n	80044c6 <HAL_UART_RxCpltCallback+0x17e>
									} else if (strstr(uk, "down")) {
 80044a0:	4957      	ldr	r1, [pc, #348]	; (8004600 <HAL_UART_RxCpltCallback+0x2b8>)
 80044a2:	6a38      	ldr	r0, [r7, #32]
 80044a4:	f00d fee9 	bl	801227a <strstr>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d005      	beq.n	80044ba <HAL_UART_RxCpltCallback+0x172>
										nv--;
 80044ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044b2:	3b01      	subs	r3, #1
 80044b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80044b8:	e005      	b.n	80044c6 <HAL_UART_RxCpltCallback+0x17e>
									} else {
										nv = (uint8_t)atol(uk);
 80044ba:	6a38      	ldr	r0, [r7, #32]
 80044bc:	f00d f942 	bl	8011744 <atol>
 80044c0:	4603      	mov	r3, r0
 80044c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									}
									if ((nv >= 0) && (nv <= 15)) {
 80044c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044ca:	2b0f      	cmp	r3, #15
 80044cc:	f200 8139 	bhi.w	8004742 <HAL_UART_RxCpltCallback+0x3fa>
										newVolume = nv;
 80044d0:	4a4c      	ldr	r2, [pc, #304]	; (8004604 <HAL_UART_RxCpltCallback+0x2bc>)
 80044d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044d6:	7013      	strb	r3, [r2, #0]
										ev = i;
 80044d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044da:	62bb      	str	r3, [r7, #40]	; 0x28
									}
								}
							break;
 80044dc:	e131      	b.n	8004742 <HAL_UART_RxCpltCallback+0x3fa>
							case cmdBass:
								if (strlen(uk) >= 1) {
 80044de:	6a3b      	ldr	r3, [r7, #32]
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f000 812f 	beq.w	8004746 <HAL_UART_RxCpltCallback+0x3fe>
									newBassBoost = (uint8_t)atol(uk);
 80044e8:	6a38      	ldr	r0, [r7, #32]
 80044ea:	f00d f92b 	bl	8011744 <atol>
 80044ee:	4603      	mov	r3, r0
 80044f0:	b2da      	uxtb	r2, r3
 80044f2:	4b45      	ldr	r3, [pc, #276]	; (8004608 <HAL_UART_RxCpltCallback+0x2c0>)
 80044f4:	701a      	strb	r2, [r3, #0]
									ev = i;
 80044f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f8:	62bb      	str	r3, [r7, #40]	; 0x28
								}
							break;
 80044fa:	e124      	b.n	8004746 <HAL_UART_RxCpltCallback+0x3fe>
							case cmdFreq://"freq:95.1"
								if (strlen(uk) >= 2) {
 80044fc:	6a38      	ldr	r0, [r7, #32]
 80044fe:	f7fb fe67 	bl	80001d0 <strlen>
 8004502:	4603      	mov	r3, r0
 8004504:	2b01      	cmp	r3, #1
 8004506:	f240 8120 	bls.w	800474a <HAL_UART_RxCpltCallback+0x402>
									newFreq = (float)atof(uk);
 800450a:	6a38      	ldr	r0, [r7, #32]
 800450c:	f00d f913 	bl	8011736 <atof>
 8004510:	ec53 2b10 	vmov	r2, r3, d0
 8004514:	4610      	mov	r0, r2
 8004516:	4619      	mov	r1, r3
 8004518:	f7fc fb66 	bl	8000be8 <__aeabi_d2f>
 800451c:	4603      	mov	r3, r0
 800451e:	4a3b      	ldr	r2, [pc, #236]	; (800460c <HAL_UART_RxCpltCallback+0x2c4>)
 8004520:	6013      	str	r3, [r2, #0]
									if (newFreq != Freq) {
 8004522:	4b3a      	ldr	r3, [pc, #232]	; (800460c <HAL_UART_RxCpltCallback+0x2c4>)
 8004524:	ed93 7a00 	vldr	s14, [r3]
 8004528:	4b39      	ldr	r3, [pc, #228]	; (8004610 <HAL_UART_RxCpltCallback+0x2c8>)
 800452a:	edd3 7a00 	vldr	s15, [r3]
 800452e:	eeb4 7a67 	vcmp.f32	s14, s15
 8004532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004536:	f000 8108 	beq.w	800474a <HAL_UART_RxCpltCallback+0x402>
										ev = i;
 800453a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800453c:	62bb      	str	r3, [r7, #40]	; 0x28
									}
								}
							break;
 800453e:	e104      	b.n	800474a <HAL_UART_RxCpltCallback+0x402>
							case cmdScan://"scan"
								seek_up = 1;
 8004540:	4b34      	ldr	r3, [pc, #208]	; (8004614 <HAL_UART_RxCpltCallback+0x2cc>)
 8004542:	2201      	movs	r2, #1
 8004544:	701a      	strb	r2, [r3, #0]
								ev = i;
 8004546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004548:	62bb      	str	r3, [r7, #40]	; 0x28
								char *uki = strchr(uk, ':');
 800454a:	213a      	movs	r1, #58	; 0x3a
 800454c:	6a38      	ldr	r0, [r7, #32]
 800454e:	f00d fe73 	bl	8012238 <strchr>
 8004552:	61f8      	str	r0, [r7, #28]
								if (uki) {
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	2b00      	cmp	r3, #0
 8004558:	f000 80f9 	beq.w	800474e <HAL_UART_RxCpltCallback+0x406>
									if (*(char *)(uki + 1) == '0') seek_up = 0;
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	3301      	adds	r3, #1
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	2b30      	cmp	r3, #48	; 0x30
 8004564:	f040 80f3 	bne.w	800474e <HAL_UART_RxCpltCallback+0x406>
 8004568:	4b2a      	ldr	r3, [pc, #168]	; (8004614 <HAL_UART_RxCpltCallback+0x2cc>)
 800456a:	2200      	movs	r2, #0
 800456c:	701a      	strb	r2, [r3, #0]
								}
							break;
 800456e:	e0ee      	b.n	800474e <HAL_UART_RxCpltCallback+0x406>
							case cmdClr://"clr"
							case cmdHelp://"help"
							case cmdVer://"ver"
							case cmdList:
								ev = i;
 8004570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004572:	62bb      	str	r3, [r7, #40]	; 0x28
							break;
 8004574:	e0f4      	b.n	8004760 <HAL_UART_RxCpltCallback+0x418>
							case cmdRestart://"restart" -> restart = 1;
								ev = i;
 8004576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004578:	62bb      	str	r3, [r7, #40]	; 0x28
							break;
 800457a:	e0f1      	b.n	8004760 <HAL_UART_RxCpltCallback+0x418>
							case cmdEpoch://"epoch:1657191323"
								if (strlen(uk) >= 10) {
 800457c:	6a38      	ldr	r0, [r7, #32]
 800457e:	f7fb fe27 	bl	80001d0 <strlen>
 8004582:	4603      	mov	r3, r0
 8004584:	2b09      	cmp	r3, #9
 8004586:	f240 80e4 	bls.w	8004752 <HAL_UART_RxCpltCallback+0x40a>
									char *uki = strchr(uk, ':');
 800458a:	213a      	movs	r1, #58	; 0x3a
 800458c:	6a38      	ldr	r0, [r7, #32]
 800458e:	f00d fe53 	bl	8012238 <strchr>
 8004592:	60b8      	str	r0, [r7, #8]
									if (uki) {
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00c      	beq.n	80045b4 <HAL_UART_RxCpltCallback+0x26c>
										tZone = (uint8_t)atol(uki + 1);
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	3301      	adds	r3, #1
 800459e:	4618      	mov	r0, r3
 80045a0:	f00d f8d0 	bl	8011744 <atol>
 80045a4:	4603      	mov	r3, r0
 80045a6:	b2da      	uxtb	r2, r3
 80045a8:	4b1b      	ldr	r3, [pc, #108]	; (8004618 <HAL_UART_RxCpltCallback+0x2d0>)
 80045aa:	701a      	strb	r2, [r3, #0]
										*uki = '\0';
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2200      	movs	r2, #0
 80045b0:	701a      	strb	r2, [r3, #0]
 80045b2:	e002      	b.n	80045ba <HAL_UART_RxCpltCallback+0x272>
									} else {
										tZone = 0;
 80045b4:	4b18      	ldr	r3, [pc, #96]	; (8004618 <HAL_UART_RxCpltCallback+0x2d0>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	701a      	strb	r2, [r3, #0]
									}
									epoch = (uint32_t)atol(uk);
 80045ba:	6a38      	ldr	r0, [r7, #32]
 80045bc:	f00d f8c2 	bl	8011744 <atol>
 80045c0:	4603      	mov	r3, r0
 80045c2:	461a      	mov	r2, r3
 80045c4:	4b15      	ldr	r3, [pc, #84]	; (800461c <HAL_UART_RxCpltCallback+0x2d4>)
 80045c6:	601a      	str	r2, [r3, #0]
									ev = i;
 80045c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ca:	62bb      	str	r3, [r7, #40]	; 0x28
								}
							break;
 80045cc:	e0c1      	b.n	8004752 <HAL_UART_RxCpltCallback+0x40a>
							case cmdsRead:// read:0
							case cmdsErase:// erase:0
								if (i == cmdsRead) cmd_sector = cmdsRead;
 80045ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d0:	2b04      	cmp	r3, #4
 80045d2:	d127      	bne.n	8004624 <HAL_UART_RxCpltCallback+0x2dc>
 80045d4:	4b12      	ldr	r3, [pc, #72]	; (8004620 <HAL_UART_RxCpltCallback+0x2d8>)
 80045d6:	2204      	movs	r2, #4
 80045d8:	601a      	str	r2, [r3, #0]
 80045da:	e026      	b.n	800462a <HAL_UART_RxCpltCallback+0x2e2>
 80045dc:	40004400 	.word	0x40004400
 80045e0:	2000147a 	.word	0x2000147a
 80045e4:	20001478 	.word	0x20001478
 80045e8:	2000147c 	.word	0x2000147c
 80045ec:	2000001c 	.word	0x2000001c
 80045f0:	200001c9 	.word	0x200001c9
 80045f4:	200001c8 	.word	0x200001c8
 80045f8:	200001cb 	.word	0x200001cb
 80045fc:	080166b4 	.word	0x080166b4
 8004600:	080166b8 	.word	0x080166b8
 8004604:	200001cc 	.word	0x200001cc
 8004608:	20003ce3 	.word	0x20003ce3
 800460c:	200001c4 	.word	0x200001c4
 8004610:	200001c0 	.word	0x200001c0
 8004614:	200001ca 	.word	0x200001ca
 8004618:	2000187e 	.word	0x2000187e
 800461c:	20000018 	.word	0x20000018
 8004620:	200001ac 	.word	0x200001ac
											  else cmd_sector = cmdsErase;
 8004624:	4b64      	ldr	r3, [pc, #400]	; (80047b8 <HAL_UART_RxCpltCallback+0x470>)
 8004626:	2205      	movs	r2, #5
 8004628:	601a      	str	r2, [r3, #0]
								if (*uk == ':') {
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	2b3a      	cmp	r3, #58	; 0x3a
 8004630:	f040 8091 	bne.w	8004756 <HAL_UART_RxCpltCallback+0x40e>
									int sek = atoi(++uk);
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	3301      	adds	r3, #1
 8004638:	623b      	str	r3, [r7, #32]
 800463a:	6a38      	ldr	r0, [r7, #32]
 800463c:	f00d f87e 	bl	801173c <atoi>
 8004640:	60f8      	str	r0, [r7, #12]
									if ((sek >= 0) && (sek < W25qxx_getSectorCount())) {
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2b00      	cmp	r3, #0
 8004646:	f2c0 8086 	blt.w	8004756 <HAL_UART_RxCpltCallback+0x40e>
 800464a:	f001 fc0b 	bl	8005e64 <W25qxx_getSectorCount>
 800464e:	4602      	mov	r2, r0
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	429a      	cmp	r2, r3
 8004654:	d97f      	bls.n	8004756 <HAL_UART_RxCpltCallback+0x40e>
										adr_sector = sek;
 8004656:	4a59      	ldr	r2, [pc, #356]	; (80047bc <HAL_UART_RxCpltCallback+0x474>)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6013      	str	r3, [r2, #0]
										offset_sector = 0;
 800465c:	4b58      	ldr	r3, [pc, #352]	; (80047c0 <HAL_UART_RxCpltCallback+0x478>)
 800465e:	2200      	movs	r2, #0
 8004660:	601a      	str	r2, [r3, #0]
										ev = i;//flag_sector = true;
 8004662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004664:	62bb      	str	r3, [r7, #40]	; 0x28
									}
								}
							break;
 8004666:	e076      	b.n	8004756 <HAL_UART_RxCpltCallback+0x40e>
							case cmdsWrite:// write:0:a5 | write:0:a5:256
								if (*uk == ':') {
 8004668:	6a3b      	ldr	r3, [r7, #32]
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	2b3a      	cmp	r3, #58	; 0x3a
 800466e:	d174      	bne.n	800475a <HAL_UART_RxCpltCallback+0x412>
									uk++;
 8004670:	6a3b      	ldr	r3, [r7, #32]
 8004672:	3301      	adds	r3, #1
 8004674:	623b      	str	r3, [r7, #32]
									int sek = atoi(uk);
 8004676:	6a38      	ldr	r0, [r7, #32]
 8004678:	f00d f860 	bl	801173c <atoi>
 800467c:	61b8      	str	r0, [r7, #24]
									if ((sek >= 0) && (sek < W25qxx_getSectorCount())) {
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	2b00      	cmp	r3, #0
 8004682:	db6a      	blt.n	800475a <HAL_UART_RxCpltCallback+0x412>
 8004684:	f001 fbee 	bl	8005e64 <W25qxx_getSectorCount>
 8004688:	4602      	mov	r2, r0
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	429a      	cmp	r2, r3
 800468e:	d964      	bls.n	800475a <HAL_UART_RxCpltCallback+0x412>
										char *ukn = strchr(uk, ':');
 8004690:	213a      	movs	r1, #58	; 0x3a
 8004692:	6a38      	ldr	r0, [r7, #32]
 8004694:	f00d fdd0 	bl	8012238 <strchr>
 8004698:	6178      	str	r0, [r7, #20]
										if (ukn) {
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d05c      	beq.n	800475a <HAL_UART_RxCpltCallback+0x412>
											len_write = -1;
 80046a0:	4b48      	ldr	r3, [pc, #288]	; (80047c4 <HAL_UART_RxCpltCallback+0x47c>)
 80046a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046a6:	601a      	str	r2, [r3, #0]
											ukn++;
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	3301      	adds	r3, #1
 80046ac:	617b      	str	r3, [r7, #20]
											byte_write = hexToBin(ukn);
 80046ae:	6978      	ldr	r0, [r7, #20]
 80046b0:	f7ff fa18 	bl	8003ae4 <hexToBin>
 80046b4:	4603      	mov	r3, r0
 80046b6:	461a      	mov	r2, r3
 80046b8:	4b43      	ldr	r3, [pc, #268]	; (80047c8 <HAL_UART_RxCpltCallback+0x480>)
 80046ba:	701a      	strb	r2, [r3, #0]
											uk = strchr(ukn, ':');
 80046bc:	213a      	movs	r1, #58	; 0x3a
 80046be:	6978      	ldr	r0, [r7, #20]
 80046c0:	f00d fdba 	bl	8012238 <strchr>
 80046c4:	6238      	str	r0, [r7, #32]
											if (uk) {
 80046c6:	6a3b      	ldr	r3, [r7, #32]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d012      	beq.n	80046f2 <HAL_UART_RxCpltCallback+0x3aa>
												int l = atoi(++uk);
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	3301      	adds	r3, #1
 80046d0:	623b      	str	r3, [r7, #32]
 80046d2:	6a38      	ldr	r0, [r7, #32]
 80046d4:	f00d f832 	bl	801173c <atoi>
 80046d8:	6138      	str	r0, [r7, #16]
												if ((l > 0) && (l < W25qxx_getSectorSize())) len_write = l;
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	dd08      	ble.n	80046f2 <HAL_UART_RxCpltCallback+0x3aa>
 80046e0:	f001 fbcc 	bl	8005e7c <W25qxx_getSectorSize>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d902      	bls.n	80046f2 <HAL_UART_RxCpltCallback+0x3aa>
 80046ec:	4a35      	ldr	r2, [pc, #212]	; (80047c4 <HAL_UART_RxCpltCallback+0x47c>)
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	6013      	str	r3, [r2, #0]
											}
											adr_sector = sek;
 80046f2:	4a32      	ldr	r2, [pc, #200]	; (80047bc <HAL_UART_RxCpltCallback+0x474>)
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	6013      	str	r3, [r2, #0]
											offset_sector = 0;
 80046f8:	4b31      	ldr	r3, [pc, #196]	; (80047c0 <HAL_UART_RxCpltCallback+0x478>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	601a      	str	r2, [r3, #0]
											ev = i;//flag_sector = true;
 80046fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004700:	62bb      	str	r3, [r7, #40]	; 0x28
										}
									}
								}
							break;
 8004702:	e02a      	b.n	800475a <HAL_UART_RxCpltCallback+0x412>
							case cmdsNext:// next
								if ((last_cmd_sector == cmdsRead) || (last_cmd_sector == cmdsNext)) {
 8004704:	4b31      	ldr	r3, [pc, #196]	; (80047cc <HAL_UART_RxCpltCallback+0x484>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2b04      	cmp	r3, #4
 800470a:	d003      	beq.n	8004714 <HAL_UART_RxCpltCallback+0x3cc>
 800470c:	4b2f      	ldr	r3, [pc, #188]	; (80047cc <HAL_UART_RxCpltCallback+0x484>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2b06      	cmp	r3, #6
 8004712:	d124      	bne.n	800475e <HAL_UART_RxCpltCallback+0x416>
									if ((offset_sector + list_sector) < W25qxx_getSectorSize()) {
 8004714:	4b2a      	ldr	r3, [pc, #168]	; (80047c0 <HAL_UART_RxCpltCallback+0x478>)
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	4b2d      	ldr	r3, [pc, #180]	; (80047d0 <HAL_UART_RxCpltCallback+0x488>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4413      	add	r3, r2
 800471e:	461c      	mov	r4, r3
 8004720:	f001 fbac 	bl	8005e7c <W25qxx_getSectorSize>
 8004724:	4603      	mov	r3, r0
 8004726:	429c      	cmp	r4, r3
 8004728:	d219      	bcs.n	800475e <HAL_UART_RxCpltCallback+0x416>
										offset_sector += list_sector;
 800472a:	4b25      	ldr	r3, [pc, #148]	; (80047c0 <HAL_UART_RxCpltCallback+0x478>)
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	4b28      	ldr	r3, [pc, #160]	; (80047d0 <HAL_UART_RxCpltCallback+0x488>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4413      	add	r3, r2
 8004734:	4a22      	ldr	r2, [pc, #136]	; (80047c0 <HAL_UART_RxCpltCallback+0x478>)
 8004736:	6013      	str	r3, [r2, #0]
										ev = i;//flag_sector = true;
 8004738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800473a:	62bb      	str	r3, [r7, #40]	; 0x28
									}
								}
							break;
 800473c:	e00f      	b.n	800475e <HAL_UART_RxCpltCallback+0x416>
							break;
 800473e:	bf00      	nop
 8004740:	e017      	b.n	8004772 <HAL_UART_RxCpltCallback+0x42a>
							break;
 8004742:	bf00      	nop
 8004744:	e015      	b.n	8004772 <HAL_UART_RxCpltCallback+0x42a>
							break;
 8004746:	bf00      	nop
 8004748:	e013      	b.n	8004772 <HAL_UART_RxCpltCallback+0x42a>
							break;
 800474a:	bf00      	nop
 800474c:	e011      	b.n	8004772 <HAL_UART_RxCpltCallback+0x42a>
							break;
 800474e:	bf00      	nop
 8004750:	e00f      	b.n	8004772 <HAL_UART_RxCpltCallback+0x42a>
							break;
 8004752:	bf00      	nop
 8004754:	e00d      	b.n	8004772 <HAL_UART_RxCpltCallback+0x42a>
							break;
 8004756:	bf00      	nop
 8004758:	e00b      	b.n	8004772 <HAL_UART_RxCpltCallback+0x42a>
							break;
 800475a:	bf00      	nop
 800475c:	e009      	b.n	8004772 <HAL_UART_RxCpltCallback+0x42a>
							break;
 800475e:	bf00      	nop
						}
						break;
 8004760:	e007      	b.n	8004772 <HAL_UART_RxCpltCallback+0x42a>
				for (i = 0; i < MAX_CMDS; i++) {
 8004762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004764:	3301      	adds	r3, #1
 8004766:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800476a:	2b10      	cmp	r3, #16
 800476c:	f77f ae1f 	ble.w	80043ae <HAL_UART_RxCpltCallback+0x66>
 8004770:	e000      	b.n	8004774 <HAL_UART_RxCpltCallback+0x42c>
						break;
 8004772:	bf00      	nop
					}
				}
				//
				if (ev == -1) ev = cmdErr;
 8004774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004776:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800477a:	d101      	bne.n	8004780 <HAL_UART_RxCpltCallback+0x438>
 800477c:	2303      	movs	r3, #3
 800477e:	62bb      	str	r3, [r7, #40]	; 0x28
				putEvt(ev);
 8004780:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004782:	f7ff fa29 	bl	8003bd8 <putEvt>
				//
			}

			rxInd = 0;
 8004786:	4b13      	ldr	r3, [pc, #76]	; (80047d4 <HAL_UART_RxCpltCallback+0x48c>)
 8004788:	2200      	movs	r2, #0
 800478a:	801a      	strh	r2, [r3, #0]
			*rxBuf = '\0';
 800478c:	4b12      	ldr	r3, [pc, #72]	; (80047d8 <HAL_UART_RxCpltCallback+0x490>)
 800478e:	2200      	movs	r2, #0
 8004790:	701a      	strb	r2, [r3, #0]
		}

		if (HAL_UART_Receive_IT(huart, &rxByte, 1) != HAL_OK) devError |= devUART;
 8004792:	2201      	movs	r2, #1
 8004794:	4911      	ldr	r1, [pc, #68]	; (80047dc <HAL_UART_RxCpltCallback+0x494>)
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f008 f97e 	bl	800ca98 <HAL_UART_Receive_IT>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d006      	beq.n	80047b0 <HAL_UART_RxCpltCallback+0x468>
 80047a2:	4b0f      	ldr	r3, [pc, #60]	; (80047e0 <HAL_UART_RxCpltCallback+0x498>)
 80047a4:	881b      	ldrh	r3, [r3, #0]
 80047a6:	f043 0302 	orr.w	r3, r3, #2
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	4b0c      	ldr	r3, [pc, #48]	; (80047e0 <HAL_UART_RxCpltCallback+0x498>)
 80047ae:	801a      	strh	r2, [r3, #0]
	}
}
 80047b0:	bf00      	nop
 80047b2:	3734      	adds	r7, #52	; 0x34
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd90      	pop	{r4, r7, pc}
 80047b8:	200001ac 	.word	0x200001ac
 80047bc:	20001888 	.word	0x20001888
 80047c0:	2000188c 	.word	0x2000188c
 80047c4:	20001894 	.word	0x20001894
 80047c8:	200001b4 	.word	0x200001b4
 80047cc:	200001b0 	.word	0x200001b0
 80047d0:	20001890 	.word	0x20001890
 80047d4:	2000147a 	.word	0x2000147a
 80047d8:	2000147c 	.word	0x2000147c
 80047dc:	20001478 	.word	0x20001478
 80047e0:	20001468 	.word	0x20001468

080047e4 <HAL_UART_ErrorCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a07      	ldr	r2, [pc, #28]	; (8004810 <HAL_UART_ErrorCallback+0x2c>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d106      	bne.n	8004804 <HAL_UART_ErrorCallback+0x20>
		devError |= devUART;
 80047f6:	4b07      	ldr	r3, [pc, #28]	; (8004814 <HAL_UART_ErrorCallback+0x30>)
 80047f8:	881b      	ldrh	r3, [r3, #0]
 80047fa:	f043 0302 	orr.w	r3, r3, #2
 80047fe:	b29a      	uxth	r2, r3
 8004800:	4b04      	ldr	r3, [pc, #16]	; (8004814 <HAL_UART_ErrorCallback+0x30>)
 8004802:	801a      	strh	r2, [r3, #0]
	}
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr
 8004810:	40004400 	.word	0x40004400
 8004814:	20001468 	.word	0x20001468

08004818 <spiDone>:
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
//    Функция устанавливает в начальное состояние 'готов' служебные параметры порта SPI1:
//
void spiDone(SPI_HandleTypeDef *hspi)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
#ifdef SET_W25FLASH
	if (hspi->Instance == SPI2) {
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a0a      	ldr	r2, [pc, #40]	; (8004850 <spiDone+0x38>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d105      	bne.n	8004836 <spiDone+0x1e>
		W25_UNSELECT();
 800482a:	f001 f961 	bl	8005af0 <W25_UNSELECT>
		spiRdy = 1;
 800482e:	4b09      	ldr	r3, [pc, #36]	; (8004854 <spiDone+0x3c>)
 8004830:	2201      	movs	r2, #1
 8004832:	701a      	strb	r2, [r3, #0]
	else
	if (hspi->Instance == SPI1) {
		lcdRdy = 1;
	}
#endif
}
 8004834:	e007      	b.n	8004846 <spiDone+0x2e>
	if (hspi->Instance == SPI1) {
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a07      	ldr	r2, [pc, #28]	; (8004858 <spiDone+0x40>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d102      	bne.n	8004846 <spiDone+0x2e>
		lcdRdy = 1;
 8004840:	4b06      	ldr	r3, [pc, #24]	; (800485c <spiDone+0x44>)
 8004842:	2201      	movs	r2, #1
 8004844:	701a      	strb	r2, [r3, #0]
}
 8004846:	bf00      	nop
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	40003800 	.word	0x40003800
 8004854:	200001a8 	.word	0x200001a8
 8004858:	40013000 	.word	0x40013000
 800485c:	20000000 	.word	0x20000000

08004860 <HAL_SPI_RxCpltCallback>:
//-------------------------------------------------------------------------------------------
//    CallBack функция, вызывается по завершении приема данных от порта SPI
//
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f7ff ffd5 	bl	8004818 <spiDone>
}
 800486e:	bf00      	nop
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <HAL_SPI_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
//    CallBack функция, вызывается по завершении передачи данных в порт SPI
//
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b082      	sub	sp, #8
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7ff ffca 	bl	8004818 <spiDone>
}
 8004884:	bf00      	nop
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <HAL_SPI_TxRxCpltCallback>:
//-------------------------------------------------------------------------------------------
//    CallBack функция, вызывается по завершении приема/передачи данных порта SPI
//
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f7ff ffbf 	bl	8004818 <spiDone>
}
 800489a:	bf00      	nop
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
	...

080048a4 <HAL_SPI_ErrorCallback>:
//--------------------------------------------------------------------------------------------
//    CallBack функция, вызывается при возникновении ошибки у модуля SPI
//
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f7ff ffb3 	bl	8004818 <spiDone>
	devError |= devSPI;
 80048b2:	4b05      	ldr	r3, [pc, #20]	; (80048c8 <HAL_SPI_ErrorCallback+0x24>)
 80048b4:	881b      	ldrh	r3, [r3, #0]
 80048b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	4b02      	ldr	r3, [pc, #8]	; (80048c8 <HAL_SPI_ErrorCallback+0x24>)
 80048be:	801a      	strh	r2, [r3, #0]
}
 80048c0:	bf00      	nop
 80048c2:	3708      	adds	r7, #8
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	20001468 	.word	0x20001468

080048cc <HAL_I2C_ErrorCallback>:
	}
#endif
}
//--------------------------------------------------------------------------------------------
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
#if defined(SET_RDA_CHIP) || defined(SET_NEW_RDA)
	if (hi2c->Instance == I2C1) {
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a07      	ldr	r2, [pc, #28]	; (80048f8 <HAL_I2C_ErrorCallback+0x2c>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d106      	bne.n	80048ec <HAL_I2C_ErrorCallback+0x20>
		devError |= devRDA;
 80048de:	4b07      	ldr	r3, [pc, #28]	; (80048fc <HAL_I2C_ErrorCallback+0x30>)
 80048e0:	881b      	ldrh	r3, [r3, #0]
 80048e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	4b04      	ldr	r3, [pc, #16]	; (80048fc <HAL_I2C_ErrorCallback+0x30>)
 80048ea:	801a      	strh	r2, [r3, #0]
	}
#endif
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	40005400 	.word	0x40005400
 80048fc:	20001468 	.word	0x20001468

08004900 <HAL_GPIO_EXTI_Callback>:
//--------------------------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	4603      	mov	r3, r0
 8004908:	80fb      	strh	r3, [r7, #6]
	if ((GPIO_Pin != KEY0_Pin) && (GPIO_Pin != KEY1_Pin)) return;
 800490a:	88fb      	ldrh	r3, [r7, #6]
 800490c:	2b02      	cmp	r3, #2
 800490e:	d002      	beq.n	8004916 <HAL_GPIO_EXTI_Callback+0x16>
 8004910:	88fb      	ldrh	r3, [r7, #6]
 8004912:	2b04      	cmp	r3, #4
 8004914:	d110      	bne.n	8004938 <HAL_GPIO_EXTI_Callback+0x38>

	if (GPIO_Pin == KEY0_Pin) seek_up = 1;
 8004916:	88fb      	ldrh	r3, [r7, #6]
 8004918:	2b02      	cmp	r3, #2
 800491a:	d103      	bne.n	8004924 <HAL_GPIO_EXTI_Callback+0x24>
 800491c:	4b08      	ldr	r3, [pc, #32]	; (8004940 <HAL_GPIO_EXTI_Callback+0x40>)
 800491e:	2201      	movs	r2, #1
 8004920:	701a      	strb	r2, [r3, #0]
 8004922:	e005      	b.n	8004930 <HAL_GPIO_EXTI_Callback+0x30>
	else
	if (GPIO_Pin == KEY1_Pin) seek_up = 0;
 8004924:	88fb      	ldrh	r3, [r7, #6]
 8004926:	2b04      	cmp	r3, #4
 8004928:	d102      	bne.n	8004930 <HAL_GPIO_EXTI_Callback+0x30>
 800492a:	4b05      	ldr	r3, [pc, #20]	; (8004940 <HAL_GPIO_EXTI_Callback+0x40>)
 800492c:	2200      	movs	r2, #0
 800492e:	701a      	strb	r2, [r3, #0]

	putEvt(cmdScan);
 8004930:	200b      	movs	r0, #11
 8004932:	f7ff f951 	bl	8003bd8 <putEvt>
 8004936:	e000      	b.n	800493a <HAL_GPIO_EXTI_Callback+0x3a>
	if ((GPIO_Pin != KEY0_Pin) && (GPIO_Pin != KEY1_Pin)) return;
 8004938:	bf00      	nop
}
 800493a:	3708      	adds	r7, #8
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	200001ca 	.word	0x200001ca

08004944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004948:	b672      	cpsid	i
}
 800494a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  devError |= devSYS;
 800494c:	4b05      	ldr	r3, [pc, #20]	; (8004964 <Error_Handler+0x20>)
 800494e:	881b      	ldrh	r3, [r3, #0]
 8004950:	f043 0320 	orr.w	r3, r3, #32
 8004954:	b29a      	uxth	r2, r3
 8004956:	4b03      	ldr	r3, [pc, #12]	; (8004964 <Error_Handler+0x20>)
 8004958:	801a      	strh	r2, [r3, #0]
	  errLedOn(true);
 800495a:	2001      	movs	r0, #1
 800495c:	f7ff fb0a 	bl	8003f74 <errLedOn>
	  devError |= devSYS;
 8004960:	e7f4      	b.n	800494c <Error_Handler+0x8>
 8004962:	bf00      	nop
 8004964:	20001468 	.word	0x20001468

08004968 <rda5807_init>:

//==============================================================================
// Инициализация rda5807
//==============================================================================
uint8_t rda5807_init(float *freq)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b088      	sub	sp, #32
 800496c:	af04      	add	r7, sp, #16
 800496e:	6078      	str	r0, [r7, #4]
uint8_t buf[2] = {0, 0};
 8004970:	2300      	movs	r3, #0
 8004972:	813b      	strh	r3, [r7, #8]
uint8_t *id = &buf[0];
 8004974:	f107 0308 	add.w	r3, r7, #8
 8004978:	60fb      	str	r3, [r7, #12]

    if (HAL_I2C_Mem_Read(i2cRDA, RDA5807_RandAccess_Addr, 0, I2C_MEMADD_SIZE_8BIT, buf, 2, RDA5807_TO) != HAL_OK) {
 800497a:	4b30      	ldr	r3, [pc, #192]	; (8004a3c <rda5807_init+0xd4>)
 800497c:	6818      	ldr	r0, [r3, #0]
 800497e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004982:	9302      	str	r3, [sp, #8]
 8004984:	2302      	movs	r3, #2
 8004986:	9301      	str	r3, [sp, #4]
 8004988:	f107 0308 	add.w	r3, r7, #8
 800498c:	9300      	str	r3, [sp, #0]
 800498e:	2301      	movs	r3, #1
 8004990:	2200      	movs	r2, #0
 8004992:	2122      	movs	r1, #34	; 0x22
 8004994:	f002 ff2a 	bl	80077ec <HAL_I2C_Mem_Read>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d13c      	bne.n	8004a18 <rda5807_init+0xb0>
    stx[0] = '\0';
    for (int i = 0; i < 64; i++) sprintf(stx+strlen(stx)," %02x", buf11[i]);
    Report(1, "[%s] %s\r\n", __func__, stx);
#endif

    rda5807_SoftReset();
 800499e:	f000 f927 	bl	8004bf0 <rda5807_SoftReset>
    if (devError & devRDA) goto err_out;
 80049a2:	4b27      	ldr	r3, [pc, #156]	; (8004a40 <rda5807_init+0xd8>)
 80049a4:	881b      	ldrh	r3, [r3, #0]
 80049a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d136      	bne.n	8004a1c <rda5807_init+0xb4>

    rda5807_SetupDefault();
 80049ae:	f000 f949 	bl	8004c44 <rda5807_SetupDefault>
    if (devError & devRDA) goto err_out;
 80049b2:	4b23      	ldr	r3, [pc, #140]	; (8004a40 <rda5807_init+0xd8>)
 80049b4:	881b      	ldrh	r3, [r3, #0]
 80049b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d130      	bne.n	8004a20 <rda5807_init+0xb8>

    uint16_t fr = (uint16_t)(*freq * 10);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	edd3 7a00 	vldr	s15, [r3]
 80049c4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80049c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049d0:	ee17 3a90 	vmov	r3, s15
 80049d4:	817b      	strh	r3, [r7, #10]
    rda5807_SetFreq_In100Khz(fr);
 80049d6:	897b      	ldrh	r3, [r7, #10]
 80049d8:	4618      	mov	r0, r3
 80049da:	f000 fa79 	bl	8004ed0 <rda5807_SetFreq_In100Khz>
    //
    HAL_Delay(200);
 80049de:	20c8      	movs	r0, #200	; 0xc8
 80049e0:	f001 fe74 	bl	80066cc <HAL_Delay>
    //
    *freq = (float)rda5807_GetFreq_In100Khz();
 80049e4:	f000 faee 	bl	8004fc4 <rda5807_GetFreq_In100Khz>
 80049e8:	4603      	mov	r3, r0
 80049ea:	ee07 3a90 	vmov	s15, r3
 80049ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	edc3 7a00 	vstr	s15, [r3]
    *freq /= 10;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	ed93 7a00 	vldr	s14, [r3]
 80049fe:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004a02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	edc3 7a00 	vstr	s15, [r3]
#ifdef SET_RDA_DEBUG
    Report(1, "[%s] Freq: %.2f\r\n", __func__, *freq);//rda5807_GetFreq_In100Khz());
#endif

    HAL_Delay(100);
 8004a0c:	2064      	movs	r0, #100	; 0x64
 8004a0e:	f001 fe5d 	bl	80066cc <HAL_Delay>

    return *id;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	e00d      	b.n	8004a34 <rda5807_init+0xcc>
    	goto err_out;
 8004a18:	bf00      	nop
 8004a1a:	e002      	b.n	8004a22 <rda5807_init+0xba>
    if (devError & devRDA) goto err_out;
 8004a1c:	bf00      	nop
 8004a1e:	e000      	b.n	8004a22 <rda5807_init+0xba>
    if (devError & devRDA) goto err_out;
 8004a20:	bf00      	nop

err_out:
	devError |= devRDA;
 8004a22:	4b07      	ldr	r3, [pc, #28]	; (8004a40 <rda5807_init+0xd8>)
 8004a24:	881b      	ldrh	r3, [r3, #0]
 8004a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	4b04      	ldr	r3, [pc, #16]	; (8004a40 <rda5807_init+0xd8>)
 8004a2e:	801a      	strh	r2, [r3, #0]
    return *id;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	781b      	ldrb	r3, [r3, #0]
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	200001e4 	.word	0x200001e4
 8004a40:	20001468 	.word	0x20001468

08004a44 <rda5807_rssi>:
//==============================================================================
uint16_t rda5807_rssi()
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
uint16_t word = 0;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	80fb      	strh	r3, [r7, #6]

    rda5807_read(0x0B, &word, 1);
 8004a4e:	1dbb      	adds	r3, r7, #6
 8004a50:	2201      	movs	r2, #1
 8004a52:	4619      	mov	r1, r3
 8004a54:	200b      	movs	r0, #11
 8004a56:	f000 f85d 	bl	8004b14 <rda5807_read>

    return (word >> 9);
 8004a5a:	88fb      	ldrh	r3, [r7, #6]
 8004a5c:	0a5b      	lsrs	r3, r3, #9
 8004a5e:	b29b      	uxth	r3, r3
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3708      	adds	r7, #8
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <rda5807_bytes_change>:

//==============================================================================
// Процедура меняет местами байты попарно в буфере pBuff 
//==============================================================================
void rda5807_bytes_change(uint8_t *pBuff, uint8_t count)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	460b      	mov	r3, r1
 8004a72:	70fb      	strb	r3, [r7, #3]
    while (count > 1) {    // Если осталась хотя бы пара байт
 8004a74:	e010      	b.n	8004a98 <rda5807_bytes_change+0x30>
        uint8_t Temp = *(pBuff + 1);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	785b      	ldrb	r3, [r3, #1]
 8004a7a:	73fb      	strb	r3, [r7, #15]
        *(pBuff + 1) = *pBuff;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	7812      	ldrb	r2, [r2, #0]
 8004a84:	701a      	strb	r2, [r3, #0]
        *pBuff = Temp;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	7bfa      	ldrb	r2, [r7, #15]
 8004a8a:	701a      	strb	r2, [r3, #0]
        pBuff += 2;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	3302      	adds	r3, #2
 8004a90:	607b      	str	r3, [r7, #4]
        count -= 2;
 8004a92:	78fb      	ldrb	r3, [r7, #3]
 8004a94:	3b02      	subs	r3, #2
 8004a96:	70fb      	strb	r3, [r7, #3]
    while (count > 1) {    // Если осталась хотя бы пара байт
 8004a98:	78fb      	ldrb	r3, [r7, #3]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d8eb      	bhi.n	8004a76 <rda5807_bytes_change+0xe>
    }
}
 8004a9e:	bf00      	nop
 8004aa0:	bf00      	nop
 8004aa2:	3714      	adds	r7, #20
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <rda5807_write_regfile>:
//==============================================================================
// Процедура пишет в rda5807 группу регистров (кол-во RegNum) начиная с 0x02
// Используется I2C-адрес RDA5807_SeqAccess_Addr
//==============================================================================
void rda5807_write_regfile(uint16_t *pBuff, uint8_t RegNum)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af02      	add	r7, sp, #8
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	70fb      	strb	r3, [r7, #3]
    err = i2cm_Start(I2Cx, RDA5807_SeqAccess_Addr, 0, RDA5807_TO);
    if (err) {
        Error_Handler();
    } //*/

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8004ab8:	78fb      	ldrb	r3, [r7, #3]
 8004aba:	005b      	lsls	r3, r3, #1
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	4619      	mov	r1, r3
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f7ff ffd1 	bl	8004a68 <rda5807_bytes_change>

//    err = i2cm_WriteBuff(I2Cx, (uint8_t *) pBuff, RegNum << 1, RDA5807_TO);
//    i2cm_Stop(I2Cx, RDA5807_TO);

    if (HAL_I2C_Master_Transmit(i2cRDA, (uint16_t)RDA5807_SeqAccess_Addr, (uint8_t *)pBuff, RegNum << 1, RDA5807_TO) != HAL_OK) {
 8004ac6:	4b11      	ldr	r3, [pc, #68]	; (8004b0c <rda5807_write_regfile+0x60>)
 8004ac8:	6818      	ldr	r0, [r3, #0]
 8004aca:	78fb      	ldrb	r3, [r7, #3]
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	005b      	lsls	r3, r3, #1
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ad6:	9200      	str	r2, [sp, #0]
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	2120      	movs	r1, #32
 8004adc:	f002 fc7e 	bl	80073dc <HAL_I2C_Master_Transmit>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d006      	beq.n	8004af4 <rda5807_write_regfile+0x48>
    	devError |= devRDA;
 8004ae6:	4b0a      	ldr	r3, [pc, #40]	; (8004b10 <rda5807_write_regfile+0x64>)
 8004ae8:	881b      	ldrh	r3, [r3, #0]
 8004aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	4b07      	ldr	r3, [pc, #28]	; (8004b10 <rda5807_write_regfile+0x64>)
 8004af2:	801a      	strh	r2, [r3, #0]
    }

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8004af4:	78fb      	ldrb	r3, [r7, #3]
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	4619      	mov	r1, r3
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f7ff ffb3 	bl	8004a68 <rda5807_bytes_change>
}
 8004b02:	bf00      	nop
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	200001e4 	.word	0x200001e4
 8004b10:	20001468 	.word	0x20001468

08004b14 <rda5807_read>:
//==============================================================================
// Процедура читает из rda5807 группу регистров (кол-во RegNum) начиная с RegAddr
// Используется I2C-адрес RDA5807_RandAccess_Addr (для режима совместимости с rda5800)
//==============================================================================
void rda5807_read(uint8_t RegAddr, uint16_t *pBuff, uint8_t RegNum)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af04      	add	r7, sp, #16
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	6039      	str	r1, [r7, #0]
 8004b1e:	71fb      	strb	r3, [r7, #7]
 8004b20:	4613      	mov	r3, r2
 8004b22:	71bb      	strb	r3, [r7, #6]
        Error_Handler();
    }
    // Читаем
    i2cm_ReadBuffAndStop(I2Cx, (uint8_t *) pBuff, RegNum << 1, RDA5807_TO); //*/

    if (HAL_I2C_Mem_Read(i2cRDA, RDA5807_RandAccess_Addr,
 8004b24:	4b13      	ldr	r3, [pc, #76]	; (8004b74 <rda5807_read+0x60>)
 8004b26:	6818      	ldr	r0, [r3, #0]
 8004b28:	79fb      	ldrb	r3, [r7, #7]
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	79bb      	ldrb	r3, [r7, #6]
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004b38:	9102      	str	r1, [sp, #8]
 8004b3a:	9301      	str	r3, [sp, #4]
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	9300      	str	r3, [sp, #0]
 8004b40:	2301      	movs	r3, #1
 8004b42:	2122      	movs	r1, #34	; 0x22
 8004b44:	f002 fe52 	bl	80077ec <HAL_I2C_Mem_Read>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d006      	beq.n	8004b5c <rda5807_read+0x48>
    				     RegAddr, I2C_MEMADD_SIZE_8BIT,
						 (uint8_t *)pBuff, RegNum << 1,
						 RDA5807_TO) != HAL_OK) {
    	devError |= devRDA;
 8004b4e:	4b0a      	ldr	r3, [pc, #40]	; (8004b78 <rda5807_read+0x64>)
 8004b50:	881b      	ldrh	r3, [r3, #0]
 8004b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	4b07      	ldr	r3, [pc, #28]	; (8004b78 <rda5807_read+0x64>)
 8004b5a:	801a      	strh	r2, [r3, #0]
    }

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8004b5c:	79bb      	ldrb	r3, [r7, #6]
 8004b5e:	005b      	lsls	r3, r3, #1
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	4619      	mov	r1, r3
 8004b64:	6838      	ldr	r0, [r7, #0]
 8004b66:	f7ff ff7f 	bl	8004a68 <rda5807_bytes_change>
}
 8004b6a:	bf00      	nop
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	200001e4 	.word	0x200001e4
 8004b78:	20001468 	.word	0x20001468

08004b7c <rda5807_write>:
//==============================================================================
// Процедура пишет в rda5807 группу регистров (кол-во RegNum) начиная с RegAddr
// Используется I2C-адрес RDA5807_RandAccess_Addr (для режима совместимости с rda5800)
//==============================================================================
void rda5807_write(uint8_t RegAddr, uint16_t *pBuff, uint8_t RegNum)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af04      	add	r7, sp, #16
 8004b82:	4603      	mov	r3, r0
 8004b84:	6039      	str	r1, [r7, #0]
 8004b86:	71fb      	strb	r3, [r7, #7]
 8004b88:	4613      	mov	r3, r2
 8004b8a:	71bb      	strb	r3, [r7, #6]

    if (i2cm_WriteBuff(I2Cx, &RegAddr, 1, RDA5807_TO)) {
        Error_Handler();
    } //*/

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8004b8c:	79bb      	ldrb	r3, [r7, #6]
 8004b8e:	005b      	lsls	r3, r3, #1
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	4619      	mov	r1, r3
 8004b94:	6838      	ldr	r0, [r7, #0]
 8004b96:	f7ff ff67 	bl	8004a68 <rda5807_bytes_change>

    //err = i2cm_WriteBuff(I2Cx, (uint8_t *) pBuff, RegNum << 1, RDA5807_TO);
    //i2cm_Stop(I2Cx, RDA5807_TO);

    if (HAL_I2C_Mem_Write(i2cRDA,
 8004b9a:	4b13      	ldr	r3, [pc, #76]	; (8004be8 <rda5807_write+0x6c>)
 8004b9c:	6818      	ldr	r0, [r3, #0]
 8004b9e:	79fb      	ldrb	r3, [r7, #7]
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	79bb      	ldrb	r3, [r7, #6]
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004bae:	9102      	str	r1, [sp, #8]
 8004bb0:	9301      	str	r3, [sp, #4]
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	9300      	str	r3, [sp, #0]
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	2122      	movs	r1, #34	; 0x22
 8004bba:	f002 fd03 	bl	80075c4 <HAL_I2C_Mem_Write>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d006      	beq.n	8004bd2 <rda5807_write+0x56>
    					  RDA5807_RandAccess_Addr,
						  RegAddr, I2C_MEMADD_SIZE_8BIT,
						  (uint8_t *)pBuff, RegNum << 1,
						  RDA5807_TO) != HAL_OK) {
    	devError |= devRDA;
 8004bc4:	4b09      	ldr	r3, [pc, #36]	; (8004bec <rda5807_write+0x70>)
 8004bc6:	881b      	ldrh	r3, [r3, #0]
 8004bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	4b07      	ldr	r3, [pc, #28]	; (8004bec <rda5807_write+0x70>)
 8004bd0:	801a      	strh	r2, [r3, #0]
    }

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8004bd2:	79bb      	ldrb	r3, [r7, #6]
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	4619      	mov	r1, r3
 8004bda:	6838      	ldr	r0, [r7, #0]
 8004bdc:	f7ff ff44 	bl	8004a68 <rda5807_bytes_change>
}
 8004be0:	bf00      	nop
 8004be2:	3708      	adds	r7, #8
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	200001e4 	.word	0x200001e4
 8004bec:	20001468 	.word	0x20001468

08004bf0 <rda5807_SoftReset>:

//==============================================================================
// Процедура делает программный сброс rda5807
//==============================================================================
void rda5807_SoftReset()
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
tReg02h reg02;

    rda5807_read(2, (uint16_t *)&reg02, 1);
 8004bf6:	1d3b      	adds	r3, r7, #4
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	2002      	movs	r0, #2
 8004bfe:	f7ff ff89 	bl	8004b14 <rda5807_read>

	reg02.bENABLE = 1;
 8004c02:	793b      	ldrb	r3, [r7, #4]
 8004c04:	f043 0301 	orr.w	r3, r3, #1
 8004c08:	713b      	strb	r3, [r7, #4]
	reg02.bSOFT_RESET = 1;
 8004c0a:	793b      	ldrb	r3, [r7, #4]
 8004c0c:	f043 0302 	orr.w	r3, r3, #2
 8004c10:	713b      	strb	r3, [r7, #4]
    rda5807_write(2, (uint16_t *)&reg02, 1);
 8004c12:	1d3b      	adds	r3, r7, #4
 8004c14:	2201      	movs	r2, #1
 8004c16:	4619      	mov	r1, r3
 8004c18:	2002      	movs	r0, #2
 8004c1a:	f7ff ffaf 	bl	8004b7c <rda5807_write>

    reg02.bENABLE = 1;
 8004c1e:	793b      	ldrb	r3, [r7, #4]
 8004c20:	f043 0301 	orr.w	r3, r3, #1
 8004c24:	713b      	strb	r3, [r7, #4]
    reg02.bSOFT_RESET = 0;
 8004c26:	793b      	ldrb	r3, [r7, #4]
 8004c28:	f36f 0341 	bfc	r3, #1, #1
 8004c2c:	713b      	strb	r3, [r7, #4]
    rda5807_write(2, (uint16_t *)&reg02, 1);
 8004c2e:	1d3b      	adds	r3, r7, #4
 8004c30:	2201      	movs	r2, #1
 8004c32:	4619      	mov	r1, r3
 8004c34:	2002      	movs	r0, #2
 8004c36:	f7ff ffa1 	bl	8004b7c <rda5807_write>
}
 8004c3a:	bf00      	nop
 8004c3c:	3708      	adds	r7, #8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
	...

08004c44 <rda5807_SetupDefault>:

//==============================================================================
// Процедура производит начальную настройку rda5807
//==============================================================================
void rda5807_SetupDefault()
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	af00      	add	r7, sp, #0
	tReg06h Reg06;
	tReg07h Reg07;
} Buffs;*/

    // Регистр 0x02
    Buffs.Reg02.bENABLE = 1;
 8004c48:	4a6b      	ldr	r2, [pc, #428]	; (8004df8 <rda5807_SetupDefault+0x1b4>)
 8004c4a:	7813      	ldrb	r3, [r2, #0]
 8004c4c:	f043 0301 	orr.w	r3, r3, #1
 8004c50:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSOFT_RESET = 0;
 8004c52:	4a69      	ldr	r2, [pc, #420]	; (8004df8 <rda5807_SetupDefault+0x1b4>)
 8004c54:	7813      	ldrb	r3, [r2, #0]
 8004c56:	f36f 0341 	bfc	r3, #1, #1
 8004c5a:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bNEW_METHOD = 1;
 8004c5c:	4a66      	ldr	r2, [pc, #408]	; (8004df8 <rda5807_SetupDefault+0x1b4>)
 8004c5e:	7813      	ldrb	r3, [r2, #0]
 8004c60:	f043 0304 	orr.w	r3, r3, #4
 8004c64:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bRDS_EN = 1;
 8004c66:	4a64      	ldr	r2, [pc, #400]	; (8004df8 <rda5807_SetupDefault+0x1b4>)
 8004c68:	7813      	ldrb	r3, [r2, #0]
 8004c6a:	f043 0308 	orr.w	r3, r3, #8
 8004c6e:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bCLK_MODE = 0;        // 32.768
 8004c70:	4a61      	ldr	r2, [pc, #388]	; (8004df8 <rda5807_SetupDefault+0x1b4>)
 8004c72:	7813      	ldrb	r3, [r2, #0]
 8004c74:	f36f 1306 	bfc	r3, #4, #3
 8004c78:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSKMODE = 0;
 8004c7a:	4a5f      	ldr	r2, [pc, #380]	; (8004df8 <rda5807_SetupDefault+0x1b4>)
 8004c7c:	7813      	ldrb	r3, [r2, #0]
 8004c7e:	f36f 13c7 	bfc	r3, #7, #1
 8004c82:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSEEK = 0;
 8004c84:	4a5c      	ldr	r2, [pc, #368]	; (8004df8 <rda5807_SetupDefault+0x1b4>)
 8004c86:	7853      	ldrb	r3, [r2, #1]
 8004c88:	f36f 0300 	bfc	r3, #0, #1
 8004c8c:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bSEEKUP = 1;
 8004c8e:	4a5a      	ldr	r2, [pc, #360]	; (8004df8 <rda5807_SetupDefault+0x1b4>)
 8004c90:	7853      	ldrb	r3, [r2, #1]
 8004c92:	f043 0302 	orr.w	r3, r3, #2
 8004c96:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bRCLK_DirectInput = 0;
 8004c98:	4a57      	ldr	r2, [pc, #348]	; (8004df8 <rda5807_SetupDefault+0x1b4>)
 8004c9a:	7853      	ldrb	r3, [r2, #1]
 8004c9c:	f36f 0382 	bfc	r3, #2, #1
 8004ca0:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bRCLK_NonCalibMode = 0;
 8004ca2:	4a55      	ldr	r2, [pc, #340]	; (8004df8 <rda5807_SetupDefault+0x1b4>)
 8004ca4:	7853      	ldrb	r3, [r2, #1]
 8004ca6:	f36f 03c3 	bfc	r3, #3, #1
 8004caa:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bBASS = 0;
 8004cac:	4a52      	ldr	r2, [pc, #328]	; (8004df8 <rda5807_SetupDefault+0x1b4>)
 8004cae:	7853      	ldrb	r3, [r2, #1]
 8004cb0:	f36f 1304 	bfc	r3, #4, #1
 8004cb4:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bMONO = 0;
 8004cb6:	4a50      	ldr	r2, [pc, #320]	; (8004df8 <rda5807_SetupDefault+0x1b4>)
 8004cb8:	7853      	ldrb	r3, [r2, #1]
 8004cba:	f36f 1345 	bfc	r3, #5, #1
 8004cbe:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bDMUTE = 1;
 8004cc0:	4a4d      	ldr	r2, [pc, #308]	; (8004df8 <rda5807_SetupDefault+0x1b4>)
 8004cc2:	7853      	ldrb	r3, [r2, #1]
 8004cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cc8:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bDHIZ = 1;
 8004cca:	4a4b      	ldr	r2, [pc, #300]	; (8004df8 <rda5807_SetupDefault+0x1b4>)
 8004ccc:	7853      	ldrb	r3, [r2, #1]
 8004cce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cd2:	7053      	strb	r3, [r2, #1]
    // Регистр 0x03
    Buffs.Reg03.bSPACE = 0;//Step;//0;   // Шаг настройки - 0 = 100 КГц
 8004cd4:	4a48      	ldr	r2, [pc, #288]	; (8004df8 <rda5807_SetupDefault+0x1b4>)
 8004cd6:	7893      	ldrb	r3, [r2, #2]
 8004cd8:	f36f 0301 	bfc	r3, #0, #2
 8004cdc:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bBAND = Band;//2;//0;    // Диапазон 2 - 76–108 MHz
 8004cde:	4b47      	ldr	r3, [pc, #284]	; (8004dfc <rda5807_SetupDefault+0x1b8>)
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	f003 0303 	and.w	r3, r3, #3
 8004ce6:	b2d9      	uxtb	r1, r3
 8004ce8:	4a43      	ldr	r2, [pc, #268]	; (8004df8 <rda5807_SetupDefault+0x1b4>)
 8004cea:	7893      	ldrb	r3, [r2, #2]
 8004cec:	f361 0383 	bfi	r3, r1, #2, #2
 8004cf0:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bTUNE = 1;
 8004cf2:	4a41      	ldr	r2, [pc, #260]	; (8004df8 <rda5807_SetupDefault+0x1b4>)
 8004cf4:	7893      	ldrb	r3, [r2, #2]
 8004cf6:	f043 0310 	orr.w	r3, r3, #16
 8004cfa:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bDIRECT_MODE = 0;
 8004cfc:	4a3e      	ldr	r2, [pc, #248]	; (8004df8 <rda5807_SetupDefault+0x1b4>)
 8004cfe:	7893      	ldrb	r3, [r2, #2]
 8004d00:	f36f 1345 	bfc	r3, #5, #1
 8004d04:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bCHAN = 0;
 8004d06:	4a3c      	ldr	r2, [pc, #240]	; (8004df8 <rda5807_SetupDefault+0x1b4>)
 8004d08:	8853      	ldrh	r3, [r2, #2]
 8004d0a:	f36f 138f 	bfc	r3, #6, #10
 8004d0e:	8053      	strh	r3, [r2, #2]
    // Регистр 0x04
    Buffs.Reg04.bRSVD1 = 0;
 8004d10:	4b39      	ldr	r3, [pc, #228]	; (8004df8 <rda5807_SetupDefault+0x1b4>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	711a      	strb	r2, [r3, #4]
    Buffs.Reg04.bAFCD = 0;
 8004d16:	4a38      	ldr	r2, [pc, #224]	; (8004df8 <rda5807_SetupDefault+0x1b4>)
 8004d18:	7953      	ldrb	r3, [r2, #5]
 8004d1a:	f36f 0300 	bfc	r3, #0, #1
 8004d1e:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bSOFTMUTE_EN = 1;
 8004d20:	4a35      	ldr	r2, [pc, #212]	; (8004df8 <rda5807_SetupDefault+0x1b4>)
 8004d22:	7953      	ldrb	r3, [r2, #5]
 8004d24:	f043 0302 	orr.w	r3, r3, #2
 8004d28:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bRSVD2 = 0;
 8004d2a:	4a33      	ldr	r2, [pc, #204]	; (8004df8 <rda5807_SetupDefault+0x1b4>)
 8004d2c:	7953      	ldrb	r3, [r2, #5]
 8004d2e:	f36f 0382 	bfc	r3, #2, #1
 8004d32:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bDE = 0;
 8004d34:	4a30      	ldr	r2, [pc, #192]	; (8004df8 <rda5807_SetupDefault+0x1b4>)
 8004d36:	7953      	ldrb	r3, [r2, #5]
 8004d38:	f36f 03c3 	bfc	r3, #3, #1
 8004d3c:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bRSVD3 = 0;
 8004d3e:	4a2e      	ldr	r2, [pc, #184]	; (8004df8 <rda5807_SetupDefault+0x1b4>)
 8004d40:	7953      	ldrb	r3, [r2, #5]
 8004d42:	f36f 1307 	bfc	r3, #4, #4
 8004d46:	7153      	strb	r3, [r2, #5]
    // Регистр 0x05
    Buffs.Reg05.bVOLUME = 0;
 8004d48:	4a2b      	ldr	r2, [pc, #172]	; (8004df8 <rda5807_SetupDefault+0x1b4>)
 8004d4a:	7993      	ldrb	r3, [r2, #6]
 8004d4c:	f36f 0303 	bfc	r3, #0, #4
 8004d50:	7193      	strb	r3, [r2, #6]
    Buffs.Reg05.bANT_GAIN = 0;
 8004d52:	4a29      	ldr	r2, [pc, #164]	; (8004df8 <rda5807_SetupDefault+0x1b4>)
 8004d54:	7993      	ldrb	r3, [r2, #6]
 8004d56:	f36f 1305 	bfc	r3, #4, #2
 8004d5a:	7193      	strb	r3, [r2, #6]
    Buffs.Reg05.bANT_TYPE = ANT_TYPE_Both;//ANT_TYPE_External;//ANT_TYPE_Headphones;//ANT_TYPE_Both;
 8004d5c:	4a26      	ldr	r2, [pc, #152]	; (8004df8 <rda5807_SetupDefault+0x1b4>)
 8004d5e:	7993      	ldrb	r3, [r2, #6]
 8004d60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d64:	7193      	strb	r3, [r2, #6]
    Buffs.Reg05.bSEEKTH = 8;
 8004d66:	4a24      	ldr	r2, [pc, #144]	; (8004df8 <rda5807_SetupDefault+0x1b4>)
 8004d68:	79d3      	ldrb	r3, [r2, #7]
 8004d6a:	2108      	movs	r1, #8
 8004d6c:	f361 0303 	bfi	r3, r1, #0, #4
 8004d70:	71d3      	strb	r3, [r2, #7]
    Buffs.Reg05.bRSVD3 = 0;
 8004d72:	4a21      	ldr	r2, [pc, #132]	; (8004df8 <rda5807_SetupDefault+0x1b4>)
 8004d74:	79d3      	ldrb	r3, [r2, #7]
 8004d76:	f36f 1306 	bfc	r3, #4, #3
 8004d7a:	71d3      	strb	r3, [r2, #7]
    Buffs.Reg05.bINT_MODE = 1;
 8004d7c:	4a1e      	ldr	r2, [pc, #120]	; (8004df8 <rda5807_SetupDefault+0x1b4>)
 8004d7e:	79d3      	ldrb	r3, [r2, #7]
 8004d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d84:	71d3      	strb	r3, [r2, #7]
    // Регистр 0x06
    Buffs.Reg06.bRSVD1 = 0;
 8004d86:	4a1c      	ldr	r2, [pc, #112]	; (8004df8 <rda5807_SetupDefault+0x1b4>)
 8004d88:	8913      	ldrh	r3, [r2, #8]
 8004d8a:	f36f 030c 	bfc	r3, #0, #13
 8004d8e:	8113      	strh	r3, [r2, #8]
    Buffs.Reg06.bOPEN_MODE = 0;
 8004d90:	4a19      	ldr	r2, [pc, #100]	; (8004df8 <rda5807_SetupDefault+0x1b4>)
 8004d92:	7a53      	ldrb	r3, [r2, #9]
 8004d94:	f36f 1346 	bfc	r3, #5, #2
 8004d98:	7253      	strb	r3, [r2, #9]
    Buffs.Reg06.bRSVD2 = 0;
 8004d9a:	4a17      	ldr	r2, [pc, #92]	; (8004df8 <rda5807_SetupDefault+0x1b4>)
 8004d9c:	7a53      	ldrb	r3, [r2, #9]
 8004d9e:	f36f 13c7 	bfc	r3, #7, #1
 8004da2:	7253      	strb	r3, [r2, #9]
    // Регистр 0x07
    Buffs.Reg07.bFREQ_MODE = 0;
 8004da4:	4a14      	ldr	r2, [pc, #80]	; (8004df8 <rda5807_SetupDefault+0x1b4>)
 8004da6:	7a93      	ldrb	r3, [r2, #10]
 8004da8:	f36f 0300 	bfc	r3, #0, #1
 8004dac:	7293      	strb	r3, [r2, #10]
    Buffs.Reg07.bSOFTBLEND_EN = 1;
 8004dae:	4a12      	ldr	r2, [pc, #72]	; (8004df8 <rda5807_SetupDefault+0x1b4>)
 8004db0:	7a93      	ldrb	r3, [r2, #10]
 8004db2:	f043 0302 	orr.w	r3, r3, #2
 8004db6:	7293      	strb	r3, [r2, #10]
    Buffs.Reg07.bSEEK_TH_OLD = 0;
 8004db8:	4a0f      	ldr	r2, [pc, #60]	; (8004df8 <rda5807_SetupDefault+0x1b4>)
 8004dba:	7a93      	ldrb	r3, [r2, #10]
 8004dbc:	f36f 0387 	bfc	r3, #2, #6
 8004dc0:	7293      	strb	r3, [r2, #10]
    Buffs.Reg07.bRSVD1 = 0;
 8004dc2:	4a0d      	ldr	r2, [pc, #52]	; (8004df8 <rda5807_SetupDefault+0x1b4>)
 8004dc4:	7ad3      	ldrb	r3, [r2, #11]
 8004dc6:	f36f 0300 	bfc	r3, #0, #1
 8004dca:	72d3      	strb	r3, [r2, #11]
    Buffs.Reg07.b65M_50M_MODE = 1;
 8004dcc:	4a0a      	ldr	r2, [pc, #40]	; (8004df8 <rda5807_SetupDefault+0x1b4>)
 8004dce:	7ad3      	ldrb	r3, [r2, #11]
 8004dd0:	f043 0302 	orr.w	r3, r3, #2
 8004dd4:	72d3      	strb	r3, [r2, #11]
    Buffs.Reg07.bTH_SOFRBLEND = 16;
 8004dd6:	4a08      	ldr	r2, [pc, #32]	; (8004df8 <rda5807_SetupDefault+0x1b4>)
 8004dd8:	7ad3      	ldrb	r3, [r2, #11]
 8004dda:	2110      	movs	r1, #16
 8004ddc:	f361 0386 	bfi	r3, r1, #2, #5
 8004de0:	72d3      	strb	r3, [r2, #11]
    Buffs.Reg07.bRSVD2 = 0;
 8004de2:	4a05      	ldr	r2, [pc, #20]	; (8004df8 <rda5807_SetupDefault+0x1b4>)
 8004de4:	7ad3      	ldrb	r3, [r2, #11]
 8004de6:	f36f 13c7 	bfc	r3, #7, #1
 8004dea:	72d3      	strb	r3, [r2, #11]

    // Пишем регистры функцией записи регистрового файла
    rda5807_write_regfile((uint16_t *)&(Buffs.Reg02), 6);
 8004dec:	2106      	movs	r1, #6
 8004dee:	4802      	ldr	r0, [pc, #8]	; (8004df8 <rda5807_SetupDefault+0x1b4>)
 8004df0:	f7ff fe5c 	bl	8004aac <rda5807_write_regfile>
}
 8004df4:	bf00      	nop
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	20003ce8 	.word	0x20003ce8
 8004dfc:	200001c8 	.word	0x200001c8

08004e00 <rda5807_SetVolume>:

//==============================================================================
// Процедура устанавливает уровень громкости (0..16) выхода rda5807. При Value=0 включает MUTE
//==============================================================================
void rda5807_SetVolume(uint8_t Value)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	4603      	mov	r3, r0
 8004e08:	71fb      	strb	r3, [r7, #7]
//tReg02h Reg02;
//tReg05h Reg05;
uint8_t Mute = Value ? 0 : 1;
 8004e0a:	79fb      	ldrb	r3, [r7, #7]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	bf0c      	ite	eq
 8004e10:	2301      	moveq	r3, #1
 8004e12:	2300      	movne	r3, #0
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	73fb      	strb	r3, [r7, #15]

    if (Value > 16) Value = 16;
 8004e18:	79fb      	ldrb	r3, [r7, #7]
 8004e1a:	2b10      	cmp	r3, #16
 8004e1c:	d901      	bls.n	8004e22 <rda5807_SetVolume+0x22>
 8004e1e:	2310      	movs	r3, #16
 8004e20:	71fb      	strb	r3, [r7, #7]

    Value--;    // Значение для поля Volume на 1 меньше, чем входной параметр функции
 8004e22:	79fb      	ldrb	r3, [r7, #7]
 8004e24:	3b01      	subs	r3, #1
 8004e26:	71fb      	strb	r3, [r7, #7]

    if (!Mute) {
 8004e28:	7bfb      	ldrb	r3, [r7, #15]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d112      	bne.n	8004e54 <rda5807_SetVolume+0x54>
        // Читаем регистр 0x05
        rda5807_read(5, (uint16_t *)&Buffs.Reg05, 1);
 8004e2e:	2201      	movs	r2, #1
 8004e30:	4915      	ldr	r1, [pc, #84]	; (8004e88 <rda5807_SetVolume+0x88>)
 8004e32:	2005      	movs	r0, #5
 8004e34:	f7ff fe6e 	bl	8004b14 <rda5807_read>
        // Меняем значение поля VOLUME
        Buffs.Reg05.bVOLUME = Value;
 8004e38:	79fb      	ldrb	r3, [r7, #7]
 8004e3a:	f003 030f 	and.w	r3, r3, #15
 8004e3e:	b2d9      	uxtb	r1, r3
 8004e40:	4a12      	ldr	r2, [pc, #72]	; (8004e8c <rda5807_SetVolume+0x8c>)
 8004e42:	7993      	ldrb	r3, [r2, #6]
 8004e44:	f361 0303 	bfi	r3, r1, #0, #4
 8004e48:	7193      	strb	r3, [r2, #6]
        // Пишем регистр 0x05
        rda5807_write(5, (uint16_t *)&Buffs.Reg05, 1);
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	490e      	ldr	r1, [pc, #56]	; (8004e88 <rda5807_SetVolume+0x88>)
 8004e4e:	2005      	movs	r0, #5
 8004e50:	f7ff fe94 	bl	8004b7c <rda5807_write>
    }

    // Читаем регистр 0x02
    rda5807_read(2, (uint16_t *)&Buffs.Reg02, 1);
 8004e54:	2201      	movs	r2, #1
 8004e56:	490d      	ldr	r1, [pc, #52]	; (8004e8c <rda5807_SetVolume+0x8c>)
 8004e58:	2002      	movs	r0, #2
 8004e5a:	f7ff fe5b 	bl	8004b14 <rda5807_read>
    // Меняем значение поля VOLUME
    Buffs.Reg02.bDMUTE = Mute ? 0 : 1;
 8004e5e:	7bfb      	ldrb	r3, [r7, #15]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	bf0c      	ite	eq
 8004e64:	2301      	moveq	r3, #1
 8004e66:	2300      	movne	r3, #0
 8004e68:	b2d9      	uxtb	r1, r3
 8004e6a:	4a08      	ldr	r2, [pc, #32]	; (8004e8c <rda5807_SetVolume+0x8c>)
 8004e6c:	7853      	ldrb	r3, [r2, #1]
 8004e6e:	f361 1386 	bfi	r3, r1, #6, #1
 8004e72:	7053      	strb	r3, [r2, #1]
    // Пишем регистр 0x02
    rda5807_write(2, (uint16_t *)&Buffs.Reg02, 1);
 8004e74:	2201      	movs	r2, #1
 8004e76:	4905      	ldr	r1, [pc, #20]	; (8004e8c <rda5807_SetVolume+0x8c>)
 8004e78:	2002      	movs	r0, #2
 8004e7a:	f7ff fe7f 	bl	8004b7c <rda5807_write>
}
 8004e7e:	bf00      	nop
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	20003cee 	.word	0x20003cee
 8004e8c:	20003ce8 	.word	0x20003ce8

08004e90 <rda5807_SetBassBoost>:

//==============================================================================
// Процедура включает/выключает BassBoost
//==============================================================================
void rda5807_SetBassBoost(uint8_t Value)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	4603      	mov	r3, r0
 8004e98:	71fb      	strb	r3, [r7, #7]
//tReg02h Reg02;

    // Читаем регистр 0x02
    rda5807_read(2, (uint16_t *)&Buffs.Reg02, 1);
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	490b      	ldr	r1, [pc, #44]	; (8004ecc <rda5807_SetBassBoost+0x3c>)
 8004e9e:	2002      	movs	r0, #2
 8004ea0:	f7ff fe38 	bl	8004b14 <rda5807_read>
    // Меняем значение поля BASS
    Buffs.Reg02.bBASS = (Value) ? 1 : 0;
 8004ea4:	79fb      	ldrb	r3, [r7, #7]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	bf14      	ite	ne
 8004eaa:	2301      	movne	r3, #1
 8004eac:	2300      	moveq	r3, #0
 8004eae:	b2d9      	uxtb	r1, r3
 8004eb0:	4a06      	ldr	r2, [pc, #24]	; (8004ecc <rda5807_SetBassBoost+0x3c>)
 8004eb2:	7853      	ldrb	r3, [r2, #1]
 8004eb4:	f361 1304 	bfi	r3, r1, #4, #1
 8004eb8:	7053      	strb	r3, [r2, #1]
    // Пишем регистр 0x02
    rda5807_write(2, (uint16_t *)&Buffs.Reg02, 1);
 8004eba:	2201      	movs	r2, #1
 8004ebc:	4903      	ldr	r1, [pc, #12]	; (8004ecc <rda5807_SetBassBoost+0x3c>)
 8004ebe:	2002      	movs	r0, #2
 8004ec0:	f7ff fe5c 	bl	8004b7c <rda5807_write>
}
 8004ec4:	bf00      	nop
 8004ec6:	3708      	adds	r7, #8
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	20003ce8 	.word	0x20003ce8

08004ed0 <rda5807_SetFreq_In100Khz>:
//==============================================================================
// Процедура устанавливает текущую частоту Freq100kHz и стартует перенастройку rda5807 на эту частоту.
// Окончание процесса можно установки можно проконтроллировать по обнулению бита STR в регистре 0x0A (функцией rda5807_Get_SeekTuneReadyFlag)
//==============================================================================
void rda5807_SetFreq_In100Khz(uint16_t Freq100kHz)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	80fb      	strh	r3, [r7, #6]
//tReg03h Reg03;
uint16_t l = 870, r = 1080;
 8004eda:	f240 3366 	movw	r3, #870	; 0x366
 8004ede:	81fb      	strh	r3, [r7, #14]
 8004ee0:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8004ee4:	81bb      	strh	r3, [r7, #12]

    // Проверка входного параметра для диапазона Buffs.Reg03.bBAND
	switch (Buffs.Reg03.bBAND) {    // Диапазон 87–108 MHz
 8004ee6:	4b33      	ldr	r3, [pc, #204]	; (8004fb4 <rda5807_SetFreq_In100Khz+0xe4>)
 8004ee8:	789b      	ldrb	r3, [r3, #2]
 8004eea:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	2b03      	cmp	r3, #3
 8004ef2:	d011      	beq.n	8004f18 <rda5807_SetFreq_In100Khz+0x48>
 8004ef4:	2b03      	cmp	r3, #3
 8004ef6:	dc16      	bgt.n	8004f26 <rda5807_SetFreq_In100Khz+0x56>
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d002      	beq.n	8004f02 <rda5807_SetFreq_In100Khz+0x32>
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d007      	beq.n	8004f10 <rda5807_SetFreq_In100Khz+0x40>
 8004f00:	e011      	b.n	8004f26 <rda5807_SetFreq_In100Khz+0x56>
		//case 0:// 00 = 87–108 MHz (US/Europe)
		//break;
		case 1:// 01 = 76–91 MHz (Japan)
			l = 760;
 8004f02:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8004f06:	81fb      	strh	r3, [r7, #14]
			r = 910;
 8004f08:	f240 338e 	movw	r3, #910	; 0x38e
 8004f0c:	81bb      	strh	r3, [r7, #12]
		break;
 8004f0e:	e00a      	b.n	8004f26 <rda5807_SetFreq_In100Khz+0x56>
		case 2:// 10 = 76–108 MHz (world wide)
			l = 760;
 8004f10:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8004f14:	81fb      	strh	r3, [r7, #14]
		break;
 8004f16:	e006      	b.n	8004f26 <rda5807_SetFreq_In100Khz+0x56>
		case 3:// 11 = 65 –76 MHz (East Europe) or 50-65MHz
			l = 650;
 8004f18:	f240 238a 	movw	r3, #650	; 0x28a
 8004f1c:	81fb      	strh	r3, [r7, #14]
			r = 760;
 8004f1e:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8004f22:	81bb      	strh	r3, [r7, #12]
		break;
 8004f24:	bf00      	nop
	}
	lBand = ((float)l) / 10;
 8004f26:	89fb      	ldrh	r3, [r7, #14]
 8004f28:	ee07 3a90 	vmov	s15, r3
 8004f2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f30:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004f34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f38:	4b1f      	ldr	r3, [pc, #124]	; (8004fb8 <rda5807_SetFreq_In100Khz+0xe8>)
 8004f3a:	edc3 7a00 	vstr	s15, [r3]
	rBand = ((float)r) / 10;
 8004f3e:	89bb      	ldrh	r3, [r7, #12]
 8004f40:	ee07 3a90 	vmov	s15, r3
 8004f44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f48:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004f4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f50:	4b1a      	ldr	r3, [pc, #104]	; (8004fbc <rda5807_SetFreq_In100Khz+0xec>)
 8004f52:	edc3 7a00 	vstr	s15, [r3]

    if (Freq100kHz < l)  Freq100kHz = l;
 8004f56:	88fa      	ldrh	r2, [r7, #6]
 8004f58:	89fb      	ldrh	r3, [r7, #14]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d201      	bcs.n	8004f62 <rda5807_SetFreq_In100Khz+0x92>
 8004f5e:	89fb      	ldrh	r3, [r7, #14]
 8004f60:	80fb      	strh	r3, [r7, #6]
    if (Freq100kHz > r) Freq100kHz = r;
 8004f62:	88fa      	ldrh	r2, [r7, #6]
 8004f64:	89bb      	ldrh	r3, [r7, #12]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d901      	bls.n	8004f6e <rda5807_SetFreq_In100Khz+0x9e>
 8004f6a:	89bb      	ldrh	r3, [r7, #12]
 8004f6c:	80fb      	strh	r3, [r7, #6]

    // Вычитаем начало диапазона (left)
    Freq100kHz -= l;
 8004f6e:	88fa      	ldrh	r2, [r7, #6]
 8004f70:	89fb      	ldrh	r3, [r7, #14]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	80fb      	strh	r3, [r7, #6]

    // Читаем регистр 0x03
    rda5807_read(3, (uint16_t *)&Buffs.Reg03, 1);
 8004f76:	2201      	movs	r2, #1
 8004f78:	4911      	ldr	r1, [pc, #68]	; (8004fc0 <rda5807_SetFreq_In100Khz+0xf0>)
 8004f7a:	2003      	movs	r0, #3
 8004f7c:	f7ff fdca 	bl	8004b14 <rda5807_read>
    // Меняем значение поля CHAN
    Buffs.Reg03.bCHAN = Freq100kHz;
 8004f80:	88fb      	ldrh	r3, [r7, #6]
 8004f82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f86:	b299      	uxth	r1, r3
 8004f88:	4a0a      	ldr	r2, [pc, #40]	; (8004fb4 <rda5807_SetFreq_In100Khz+0xe4>)
 8004f8a:	8853      	ldrh	r3, [r2, #2]
 8004f8c:	f361 138f 	bfi	r3, r1, #6, #10
 8004f90:	8053      	strh	r3, [r2, #2]
    // Выставляем флаг начала перенастройки на канал
    Buffs.Reg03.bTUNE = 1;
 8004f92:	4a08      	ldr	r2, [pc, #32]	; (8004fb4 <rda5807_SetFreq_In100Khz+0xe4>)
 8004f94:	7893      	ldrb	r3, [r2, #2]
 8004f96:	f043 0310 	orr.w	r3, r3, #16
 8004f9a:	7093      	strb	r3, [r2, #2]
    // Пишем регистр 0x03
    rda5807_write(3, (uint16_t *)&Buffs.Reg03, 1);
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	4908      	ldr	r1, [pc, #32]	; (8004fc0 <rda5807_SetFreq_In100Khz+0xf0>)
 8004fa0:	2003      	movs	r0, #3
 8004fa2:	f7ff fdeb 	bl	8004b7c <rda5807_write>

    HAL_Delay(50);
 8004fa6:	2032      	movs	r0, #50	; 0x32
 8004fa8:	f001 fb90 	bl	80066cc <HAL_Delay>
}
 8004fac:	bf00      	nop
 8004fae:	3710      	adds	r7, #16
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	20003ce8 	.word	0x20003ce8
 8004fb8:	20003cd4 	.word	0x20003cd4
 8004fbc:	20003cd8 	.word	0x20003cd8
 8004fc0:	20003cea 	.word	0x20003cea

08004fc4 <rda5807_GetFreq_In100Khz>:

//==============================================================================
// Функция читает текущую частоту, на которую настроен rda5807
//==============================================================================
uint16_t rda5807_GetFreq_In100Khz()
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 8004fca:	2201      	movs	r2, #1
 8004fcc:	491b      	ldr	r1, [pc, #108]	; (800503c <rda5807_GetFreq_In100Khz+0x78>)
 8004fce:	200a      	movs	r0, #10
 8004fd0:	f7ff fda0 	bl	8004b14 <rda5807_read>

    uint16_t Freq100kHz = Buffs.Reg0A.bREADCHAN;
 8004fd4:	4b1a      	ldr	r3, [pc, #104]	; (8005040 <rda5807_GetFreq_In100Khz+0x7c>)
 8004fd6:	8a1b      	ldrh	r3, [r3, #16]
 8004fd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	80bb      	strh	r3, [r7, #4]

    if (Freq100kHz == 319) return 0;
 8004fe0:	88bb      	ldrh	r3, [r7, #4]
 8004fe2:	f240 123f 	movw	r2, #319	; 0x13f
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d101      	bne.n	8004fee <rda5807_GetFreq_In100Khz+0x2a>
 8004fea:	2300      	movs	r3, #0
 8004fec:	e021      	b.n	8005032 <rda5807_GetFreq_In100Khz+0x6e>

    // Прибавляем начало диапазона (87 МГц)
    uint16_t left = 870;
 8004fee:	f240 3366 	movw	r3, #870	; 0x366
 8004ff2:	80fb      	strh	r3, [r7, #6]
    switch (Buffs.Reg03.bBAND) {    // Диапазон 87–108 MHz
 8004ff4:	4b12      	ldr	r3, [pc, #72]	; (8005040 <rda5807_GetFreq_In100Khz+0x7c>)
 8004ff6:	789b      	ldrb	r3, [r3, #2]
 8004ff8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b03      	cmp	r3, #3
 8005000:	d00e      	beq.n	8005020 <rda5807_GetFreq_In100Khz+0x5c>
 8005002:	2b03      	cmp	r3, #3
 8005004:	dc10      	bgt.n	8005028 <rda5807_GetFreq_In100Khz+0x64>
 8005006:	2b01      	cmp	r3, #1
 8005008:	d002      	beq.n	8005010 <rda5807_GetFreq_In100Khz+0x4c>
 800500a:	2b02      	cmp	r3, #2
 800500c:	d004      	beq.n	8005018 <rda5807_GetFreq_In100Khz+0x54>
 800500e:	e00b      	b.n	8005028 <rda5807_GetFreq_In100Khz+0x64>
    	//case 0:// 00 = 87–108 MHz (US/Europe)
    	//break;
    	case 1:// 01 = 76–91 MHz (Japan)
    		left = 760;
 8005010:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8005014:	80fb      	strh	r3, [r7, #6]
    	break;
 8005016:	e007      	b.n	8005028 <rda5807_GetFreq_In100Khz+0x64>
    	case 2:// 10 = 76–108 MHz (world wide)
    		left = 760;
 8005018:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 800501c:	80fb      	strh	r3, [r7, #6]
    	break;
 800501e:	e003      	b.n	8005028 <rda5807_GetFreq_In100Khz+0x64>
    	case 3:// 11 = 65 –76 MHz (East Europe) or 50-65MHz
    		left = 650;
 8005020:	f240 238a 	movw	r3, #650	; 0x28a
 8005024:	80fb      	strh	r3, [r7, #6]
    	break;
 8005026:	bf00      	nop
    }
    Freq100kHz += left;
 8005028:	88ba      	ldrh	r2, [r7, #4]
 800502a:	88fb      	ldrh	r3, [r7, #6]
 800502c:	4413      	add	r3, r2
 800502e:	80bb      	strh	r3, [r7, #4]

    return Freq100kHz;
 8005030:	88bb      	ldrh	r3, [r7, #4]
}
 8005032:	4618      	mov	r0, r3
 8005034:	3708      	adds	r7, #8
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	20003cf8 	.word	0x20003cf8
 8005040:	20003ce8 	.word	0x20003ce8

08005044 <rda5807_StartSeek>:

//==============================================================================
// Процедура стартует поиск радиостанции вверх/вниз
//==============================================================================
void rda5807_StartSeek(uint8_t Up)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	4603      	mov	r3, r0
 800504c:	71fb      	strb	r3, [r7, #7]
//tReg02h Reg02;

    // Читаем регистр 0x02
    rda5807_read(0x02, (uint16_t *)&Buffs.Reg02, 1);
 800504e:	2201      	movs	r2, #1
 8005050:	4910      	ldr	r1, [pc, #64]	; (8005094 <rda5807_StartSeek+0x50>)
 8005052:	2002      	movs	r0, #2
 8005054:	f7ff fd5e 	bl	8004b14 <rda5807_read>

    Buffs.Reg02.bSKMODE = 1;          // 07 Seek Mode (0 = wrap at the upper or lower band limit and continue seeking; 1 = stop seeking at the upper or lower band limit)
 8005058:	4a0e      	ldr	r2, [pc, #56]	; (8005094 <rda5807_StartSeek+0x50>)
 800505a:	7813      	ldrb	r3, [r2, #0]
 800505c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005060:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSEEK = 1;            // 08 Seek (0 = Disable stop seek; 1 = Enable)
 8005062:	4a0c      	ldr	r2, [pc, #48]	; (8005094 <rda5807_StartSeek+0x50>)
 8005064:	7853      	ldrb	r3, [r2, #1]
 8005066:	f043 0301 	orr.w	r3, r3, #1
 800506a:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bSEEKUP = Up ? 1 : 0; // 09 Seek Up (0 = Seek down; 1 = Seek up)
 800506c:	79fb      	ldrb	r3, [r7, #7]
 800506e:	2b00      	cmp	r3, #0
 8005070:	bf14      	ite	ne
 8005072:	2301      	movne	r3, #1
 8005074:	2300      	moveq	r3, #0
 8005076:	b2d9      	uxtb	r1, r3
 8005078:	4a06      	ldr	r2, [pc, #24]	; (8005094 <rda5807_StartSeek+0x50>)
 800507a:	7853      	ldrb	r3, [r2, #1]
 800507c:	f361 0341 	bfi	r3, r1, #1, #1
 8005080:	7053      	strb	r3, [r2, #1]

    // Пишем регистр 0x02
    rda5807_write(0x02, (uint16_t *)&Buffs.Reg02, 1);
 8005082:	2201      	movs	r2, #1
 8005084:	4903      	ldr	r1, [pc, #12]	; (8005094 <rda5807_StartSeek+0x50>)
 8005086:	2002      	movs	r0, #2
 8005088:	f7ff fd78 	bl	8004b7c <rda5807_write>
}
 800508c:	bf00      	nop
 800508e:	3708      	adds	r7, #8
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	20003ce8 	.word	0x20003ce8

08005098 <rda5807_Get_SeekTuneReadyFlag>:
//==============================================================================
// Функция возвращает состояние бита STR (SeekTuneReadyFlag)
// SeekTuneReadyFlag=1 пока идёт процесс настройки на частоту или поиск радиостанции.
//==============================================================================
uint8_t rda5807_Get_SeekTuneReadyFlag()
{
 8005098:	b580      	push	{r7, lr}
 800509a:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 800509c:	2201      	movs	r2, #1
 800509e:	4905      	ldr	r1, [pc, #20]	; (80050b4 <rda5807_Get_SeekTuneReadyFlag+0x1c>)
 80050a0:	200a      	movs	r0, #10
 80050a2:	f7ff fd37 	bl	8004b14 <rda5807_read>

    return Buffs.Reg0A.bSTC;
 80050a6:	4b04      	ldr	r3, [pc, #16]	; (80050b8 <rda5807_Get_SeekTuneReadyFlag+0x20>)
 80050a8:	7c5b      	ldrb	r3, [r3, #17]
 80050aa:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80050ae:	b2db      	uxtb	r3, r3
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	20003cf8 	.word	0x20003cf8
 80050b8:	20003ce8 	.word	0x20003ce8

080050bc <rda5807_Get_StereoMonoFlag>:
//==============================================================================
//==============================================================================
bool rda5807_Get_StereoMonoFlag()
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 80050c0:	2201      	movs	r2, #1
 80050c2:	4908      	ldr	r1, [pc, #32]	; (80050e4 <rda5807_Get_StereoMonoFlag+0x28>)
 80050c4:	200a      	movs	r0, #10
 80050c6:	f7ff fd25 	bl	8004b14 <rda5807_read>

    return Buffs.Reg0A.bST;     // Stereo Indicator (0 = Mono; 1 = Stereo)
 80050ca:	4b07      	ldr	r3, [pc, #28]	; (80050e8 <rda5807_Get_StereoMonoFlag+0x2c>)
 80050cc:	7c5b      	ldrb	r3, [r3, #17]
 80050ce:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	bf14      	ite	ne
 80050d8:	2301      	movne	r3, #1
 80050da:	2300      	moveq	r3, #0
 80050dc:	b2db      	uxtb	r3, r3
}
 80050de:	4618      	mov	r0, r3
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	20003cf8 	.word	0x20003cf8
 80050e8:	20003ce8 	.word	0x20003ce8

080050ec <rda5807_Get_Channel>:
//==============================================================================
uint16_t rda5807_Get_Channel()
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 80050f0:	2201      	movs	r2, #1
 80050f2:	4905      	ldr	r1, [pc, #20]	; (8005108 <rda5807_Get_Channel+0x1c>)
 80050f4:	200a      	movs	r0, #10
 80050f6:	f7ff fd0d 	bl	8004b14 <rda5807_read>

    return Buffs.Reg0A.bREADCHAN;    // 0-9 Read Channel.
 80050fa:	4b04      	ldr	r3, [pc, #16]	; (800510c <rda5807_Get_Channel+0x20>)
 80050fc:	8a1b      	ldrh	r3, [r3, #16]
 80050fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005102:	b29b      	uxth	r3, r3
}
 8005104:	4618      	mov	r0, r3
 8005106:	bd80      	pop	{r7, pc}
 8005108:	20003cf8 	.word	0x20003cf8
 800510c:	20003ce8 	.word	0x20003ce8

08005110 <rda5807_Set_Band>:
//==============================================================================
uint8_t rda5807_Set_Band(uint8_t band)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	4603      	mov	r3, r0
 8005118:	71fb      	strb	r3, [r7, #7]
	if (band > 3) return 1;
 800511a:	79fb      	ldrb	r3, [r7, #7]
 800511c:	2b03      	cmp	r3, #3
 800511e:	d901      	bls.n	8005124 <rda5807_Set_Band+0x14>
 8005120:	2301      	movs	r3, #1
 8005122:	e054      	b.n	80051ce <rda5807_Set_Band+0xbe>

    // Читаем регистр 3
    rda5807_read(3, (uint16_t *)&Buffs.Reg03, 1);
 8005124:	2201      	movs	r2, #1
 8005126:	492c      	ldr	r1, [pc, #176]	; (80051d8 <rda5807_Set_Band+0xc8>)
 8005128:	2003      	movs	r0, #3
 800512a:	f7ff fcf3 	bl	8004b14 <rda5807_read>

    Buffs.Reg03.bBAND = band;
 800512e:	79fb      	ldrb	r3, [r7, #7]
 8005130:	f003 0303 	and.w	r3, r3, #3
 8005134:	b2d9      	uxtb	r1, r3
 8005136:	4a29      	ldr	r2, [pc, #164]	; (80051dc <rda5807_Set_Band+0xcc>)
 8005138:	7893      	ldrb	r3, [r2, #2]
 800513a:	f361 0383 	bfi	r3, r1, #2, #2
 800513e:	7093      	strb	r3, [r2, #2]

    rda5807_write(3, (uint16_t *)&Buffs.Reg03, 1);
 8005140:	2201      	movs	r2, #1
 8005142:	4925      	ldr	r1, [pc, #148]	; (80051d8 <rda5807_Set_Band+0xc8>)
 8005144:	2003      	movs	r0, #3
 8005146:	f7ff fd19 	bl	8004b7c <rda5807_write>

    uint16_t l = 870, r = 1080;
 800514a:	f240 3366 	movw	r3, #870	; 0x366
 800514e:	81fb      	strh	r3, [r7, #14]
 8005150:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8005154:	81bb      	strh	r3, [r7, #12]

    switch (Buffs.Reg03.bBAND) {    // Диапазон 87–108 MHz
 8005156:	4b21      	ldr	r3, [pc, #132]	; (80051dc <rda5807_Set_Band+0xcc>)
 8005158:	789b      	ldrb	r3, [r3, #2]
 800515a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b03      	cmp	r3, #3
 8005162:	d011      	beq.n	8005188 <rda5807_Set_Band+0x78>
 8005164:	2b03      	cmp	r3, #3
 8005166:	dc16      	bgt.n	8005196 <rda5807_Set_Band+0x86>
 8005168:	2b01      	cmp	r3, #1
 800516a:	d002      	beq.n	8005172 <rda5807_Set_Band+0x62>
 800516c:	2b02      	cmp	r3, #2
 800516e:	d007      	beq.n	8005180 <rda5807_Set_Band+0x70>
 8005170:	e011      	b.n	8005196 <rda5807_Set_Band+0x86>
    	//case 0:// 00 = 87–108 MHz (US/Europe)
    	//break;
    	case 1:// 01 = 76–91 MHz (Japan)
    		l = 760;
 8005172:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8005176:	81fb      	strh	r3, [r7, #14]
    		r = 910;
 8005178:	f240 338e 	movw	r3, #910	; 0x38e
 800517c:	81bb      	strh	r3, [r7, #12]
    	break;
 800517e:	e00a      	b.n	8005196 <rda5807_Set_Band+0x86>
    	case 2:// 10 = 76–108 MHz (world wide)
    		l = 760;
 8005180:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8005184:	81fb      	strh	r3, [r7, #14]
    	break;
 8005186:	e006      	b.n	8005196 <rda5807_Set_Band+0x86>
    	case 3:// 11 = 65 –76 MHz (East Europe) or 50-65MHz
    		l = 650;
 8005188:	f240 238a 	movw	r3, #650	; 0x28a
 800518c:	81fb      	strh	r3, [r7, #14]
    		r = 760;
 800518e:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8005192:	81bb      	strh	r3, [r7, #12]
    	break;
 8005194:	bf00      	nop
    }
    lBand = ((float)l) / 10;
 8005196:	89fb      	ldrh	r3, [r7, #14]
 8005198:	ee07 3a90 	vmov	s15, r3
 800519c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80051a0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80051a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80051a8:	4b0d      	ldr	r3, [pc, #52]	; (80051e0 <rda5807_Set_Band+0xd0>)
 80051aa:	edc3 7a00 	vstr	s15, [r3]
    rBand = ((float)r) / 10;
 80051ae:	89bb      	ldrh	r3, [r7, #12]
 80051b0:	ee07 3a90 	vmov	s15, r3
 80051b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80051b8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80051bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80051c0:	4b08      	ldr	r3, [pc, #32]	; (80051e4 <rda5807_Set_Band+0xd4>)
 80051c2:	edc3 7a00 	vstr	s15, [r3]

    HAL_Delay(50);
 80051c6:	2032      	movs	r0, #50	; 0x32
 80051c8:	f001 fa80 	bl	80066cc <HAL_Delay>

    return 0;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	20003cea 	.word	0x20003cea
 80051dc:	20003ce8 	.word	0x20003ce8
 80051e0:	20003cd4 	.word	0x20003cd4
 80051e4:	20003cd8 	.word	0x20003cd8

080051e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051ee:	4b0f      	ldr	r3, [pc, #60]	; (800522c <HAL_MspInit+0x44>)
 80051f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051f2:	4a0e      	ldr	r2, [pc, #56]	; (800522c <HAL_MspInit+0x44>)
 80051f4:	f043 0301 	orr.w	r3, r3, #1
 80051f8:	6613      	str	r3, [r2, #96]	; 0x60
 80051fa:	4b0c      	ldr	r3, [pc, #48]	; (800522c <HAL_MspInit+0x44>)
 80051fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	607b      	str	r3, [r7, #4]
 8005204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005206:	4b09      	ldr	r3, [pc, #36]	; (800522c <HAL_MspInit+0x44>)
 8005208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800520a:	4a08      	ldr	r2, [pc, #32]	; (800522c <HAL_MspInit+0x44>)
 800520c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005210:	6593      	str	r3, [r2, #88]	; 0x58
 8005212:	4b06      	ldr	r3, [pc, #24]	; (800522c <HAL_MspInit+0x44>)
 8005214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800521a:	603b      	str	r3, [r7, #0]
 800521c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800521e:	bf00      	nop
 8005220:	370c      	adds	r7, #12
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	40021000 	.word	0x40021000

08005230 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b0ac      	sub	sp, #176	; 0xb0
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005238:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800523c:	2200      	movs	r2, #0
 800523e:	601a      	str	r2, [r3, #0]
 8005240:	605a      	str	r2, [r3, #4]
 8005242:	609a      	str	r2, [r3, #8]
 8005244:	60da      	str	r2, [r3, #12]
 8005246:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005248:	f107 0314 	add.w	r3, r7, #20
 800524c:	2288      	movs	r2, #136	; 0x88
 800524e:	2100      	movs	r1, #0
 8005250:	4618      	mov	r0, r3
 8005252:	f00c fb5f 	bl	8011914 <memset>
  if(hi2c->Instance==I2C1)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a57      	ldr	r2, [pc, #348]	; (80053b8 <HAL_I2C_MspInit+0x188>)
 800525c:	4293      	cmp	r3, r2
 800525e:	f040 80a7 	bne.w	80053b0 <HAL_I2C_MspInit+0x180>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005262:	2340      	movs	r3, #64	; 0x40
 8005264:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005266:	2300      	movs	r3, #0
 8005268:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800526a:	f107 0314 	add.w	r3, r7, #20
 800526e:	4618      	mov	r0, r3
 8005270:	f004 fb02 	bl	8009878 <HAL_RCCEx_PeriphCLKConfig>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d001      	beq.n	800527e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800527a:	f7ff fb63 	bl	8004944 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800527e:	4b4f      	ldr	r3, [pc, #316]	; (80053bc <HAL_I2C_MspInit+0x18c>)
 8005280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005282:	4a4e      	ldr	r2, [pc, #312]	; (80053bc <HAL_I2C_MspInit+0x18c>)
 8005284:	f043 0302 	orr.w	r3, r3, #2
 8005288:	64d3      	str	r3, [r2, #76]	; 0x4c
 800528a:	4b4c      	ldr	r3, [pc, #304]	; (80053bc <HAL_I2C_MspInit+0x18c>)
 800528c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	613b      	str	r3, [r7, #16]
 8005294:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005296:	23c0      	movs	r3, #192	; 0xc0
 8005298:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800529c:	2312      	movs	r3, #18
 800529e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052a2:	2300      	movs	r3, #0
 80052a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80052a8:	2302      	movs	r3, #2
 80052aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80052ae:	2304      	movs	r3, #4
 80052b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80052b8:	4619      	mov	r1, r3
 80052ba:	4841      	ldr	r0, [pc, #260]	; (80053c0 <HAL_I2C_MspInit+0x190>)
 80052bc:	f001 fdf2 	bl	8006ea4 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB6);
 80052c0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80052c4:	f003 fc54 	bl	8008b70 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB7);
 80052c8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80052cc:	f003 fc50 	bl	8008b70 <HAL_I2CEx_EnableFastModePlus>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80052d0:	4b3a      	ldr	r3, [pc, #232]	; (80053bc <HAL_I2C_MspInit+0x18c>)
 80052d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052d4:	4a39      	ldr	r2, [pc, #228]	; (80053bc <HAL_I2C_MspInit+0x18c>)
 80052d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80052da:	6593      	str	r3, [r2, #88]	; 0x58
 80052dc:	4b37      	ldr	r3, [pc, #220]	; (80053bc <HAL_I2C_MspInit+0x18c>)
 80052de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052e4:	60fb      	str	r3, [r7, #12]
 80052e6:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA2_Channel6;
 80052e8:	4b36      	ldr	r3, [pc, #216]	; (80053c4 <HAL_I2C_MspInit+0x194>)
 80052ea:	4a37      	ldr	r2, [pc, #220]	; (80053c8 <HAL_I2C_MspInit+0x198>)
 80052ec:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_5;
 80052ee:	4b35      	ldr	r3, [pc, #212]	; (80053c4 <HAL_I2C_MspInit+0x194>)
 80052f0:	2205      	movs	r2, #5
 80052f2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80052f4:	4b33      	ldr	r3, [pc, #204]	; (80053c4 <HAL_I2C_MspInit+0x194>)
 80052f6:	2200      	movs	r2, #0
 80052f8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80052fa:	4b32      	ldr	r3, [pc, #200]	; (80053c4 <HAL_I2C_MspInit+0x194>)
 80052fc:	2200      	movs	r2, #0
 80052fe:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005300:	4b30      	ldr	r3, [pc, #192]	; (80053c4 <HAL_I2C_MspInit+0x194>)
 8005302:	2280      	movs	r2, #128	; 0x80
 8005304:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005306:	4b2f      	ldr	r3, [pc, #188]	; (80053c4 <HAL_I2C_MspInit+0x194>)
 8005308:	2200      	movs	r2, #0
 800530a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800530c:	4b2d      	ldr	r3, [pc, #180]	; (80053c4 <HAL_I2C_MspInit+0x194>)
 800530e:	2200      	movs	r2, #0
 8005310:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8005312:	4b2c      	ldr	r3, [pc, #176]	; (80053c4 <HAL_I2C_MspInit+0x194>)
 8005314:	2200      	movs	r2, #0
 8005316:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005318:	4b2a      	ldr	r3, [pc, #168]	; (80053c4 <HAL_I2C_MspInit+0x194>)
 800531a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800531e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8005320:	4828      	ldr	r0, [pc, #160]	; (80053c4 <HAL_I2C_MspInit+0x194>)
 8005322:	f001 fb3b 	bl	800699c <HAL_DMA_Init>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d001      	beq.n	8005330 <HAL_I2C_MspInit+0x100>
    {
      Error_Handler();
 800532c:	f7ff fb0a 	bl	8004944 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a24      	ldr	r2, [pc, #144]	; (80053c4 <HAL_I2C_MspInit+0x194>)
 8005334:	63da      	str	r2, [r3, #60]	; 0x3c
 8005336:	4a23      	ldr	r2, [pc, #140]	; (80053c4 <HAL_I2C_MspInit+0x194>)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 800533c:	4b23      	ldr	r3, [pc, #140]	; (80053cc <HAL_I2C_MspInit+0x19c>)
 800533e:	4a24      	ldr	r2, [pc, #144]	; (80053d0 <HAL_I2C_MspInit+0x1a0>)
 8005340:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 8005342:	4b22      	ldr	r3, [pc, #136]	; (80053cc <HAL_I2C_MspInit+0x19c>)
 8005344:	2203      	movs	r2, #3
 8005346:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005348:	4b20      	ldr	r3, [pc, #128]	; (80053cc <HAL_I2C_MspInit+0x19c>)
 800534a:	2210      	movs	r2, #16
 800534c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800534e:	4b1f      	ldr	r3, [pc, #124]	; (80053cc <HAL_I2C_MspInit+0x19c>)
 8005350:	2200      	movs	r2, #0
 8005352:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005354:	4b1d      	ldr	r3, [pc, #116]	; (80053cc <HAL_I2C_MspInit+0x19c>)
 8005356:	2280      	movs	r2, #128	; 0x80
 8005358:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800535a:	4b1c      	ldr	r3, [pc, #112]	; (80053cc <HAL_I2C_MspInit+0x19c>)
 800535c:	2200      	movs	r2, #0
 800535e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005360:	4b1a      	ldr	r3, [pc, #104]	; (80053cc <HAL_I2C_MspInit+0x19c>)
 8005362:	2200      	movs	r2, #0
 8005364:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8005366:	4b19      	ldr	r3, [pc, #100]	; (80053cc <HAL_I2C_MspInit+0x19c>)
 8005368:	2200      	movs	r2, #0
 800536a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800536c:	4b17      	ldr	r3, [pc, #92]	; (80053cc <HAL_I2C_MspInit+0x19c>)
 800536e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005372:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8005374:	4815      	ldr	r0, [pc, #84]	; (80053cc <HAL_I2C_MspInit+0x19c>)
 8005376:	f001 fb11 	bl	800699c <HAL_DMA_Init>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d001      	beq.n	8005384 <HAL_I2C_MspInit+0x154>
    {
      Error_Handler();
 8005380:	f7ff fae0 	bl	8004944 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a11      	ldr	r2, [pc, #68]	; (80053cc <HAL_I2C_MspInit+0x19c>)
 8005388:	639a      	str	r2, [r3, #56]	; 0x38
 800538a:	4a10      	ldr	r2, [pc, #64]	; (80053cc <HAL_I2C_MspInit+0x19c>)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005390:	2200      	movs	r2, #0
 8005392:	2100      	movs	r1, #0
 8005394:	201f      	movs	r0, #31
 8005396:	f001 fabc 	bl	8006912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800539a:	201f      	movs	r0, #31
 800539c:	f001 fad5 	bl	800694a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80053a0:	2200      	movs	r2, #0
 80053a2:	2100      	movs	r1, #0
 80053a4:	2020      	movs	r0, #32
 80053a6:	f001 fab4 	bl	8006912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80053aa:	2020      	movs	r0, #32
 80053ac:	f001 facd 	bl	800694a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80053b0:	bf00      	nop
 80053b2:	37b0      	adds	r7, #176	; 0xb0
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	40005400 	.word	0x40005400
 80053bc:	40021000 	.word	0x40021000
 80053c0:	48000400 	.word	0x48000400
 80053c4:	2000087c 	.word	0x2000087c
 80053c8:	4002046c 	.word	0x4002046c
 80053cc:	200008c4 	.word	0x200008c4
 80053d0:	4002006c 	.word	0x4002006c

080053d4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b0a4      	sub	sp, #144	; 0x90
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80053dc:	f107 0308 	add.w	r3, r7, #8
 80053e0:	2288      	movs	r2, #136	; 0x88
 80053e2:	2100      	movs	r1, #0
 80053e4:	4618      	mov	r0, r3
 80053e6:	f00c fa95 	bl	8011914 <memset>
  if(hrtc->Instance==RTC)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a10      	ldr	r2, [pc, #64]	; (8005430 <HAL_RTC_MspInit+0x5c>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d118      	bne.n	8005426 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80053f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80053f8:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80053fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005402:	f107 0308 	add.w	r3, r7, #8
 8005406:	4618      	mov	r0, r3
 8005408:	f004 fa36 	bl	8009878 <HAL_RCCEx_PeriphCLKConfig>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d001      	beq.n	8005416 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8005412:	f7ff fa97 	bl	8004944 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005416:	4b07      	ldr	r3, [pc, #28]	; (8005434 <HAL_RTC_MspInit+0x60>)
 8005418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800541c:	4a05      	ldr	r2, [pc, #20]	; (8005434 <HAL_RTC_MspInit+0x60>)
 800541e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005422:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8005426:	bf00      	nop
 8005428:	3790      	adds	r7, #144	; 0x90
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	40002800 	.word	0x40002800
 8005434:	40021000 	.word	0x40021000

08005438 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b08c      	sub	sp, #48	; 0x30
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005440:	f107 031c 	add.w	r3, r7, #28
 8005444:	2200      	movs	r2, #0
 8005446:	601a      	str	r2, [r3, #0]
 8005448:	605a      	str	r2, [r3, #4]
 800544a:	609a      	str	r2, [r3, #8]
 800544c:	60da      	str	r2, [r3, #12]
 800544e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a76      	ldr	r2, [pc, #472]	; (8005630 <HAL_SPI_MspInit+0x1f8>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d15b      	bne.n	8005512 <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800545a:	4b76      	ldr	r3, [pc, #472]	; (8005634 <HAL_SPI_MspInit+0x1fc>)
 800545c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800545e:	4a75      	ldr	r2, [pc, #468]	; (8005634 <HAL_SPI_MspInit+0x1fc>)
 8005460:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005464:	6613      	str	r3, [r2, #96]	; 0x60
 8005466:	4b73      	ldr	r3, [pc, #460]	; (8005634 <HAL_SPI_MspInit+0x1fc>)
 8005468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800546a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800546e:	61bb      	str	r3, [r7, #24]
 8005470:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005472:	4b70      	ldr	r3, [pc, #448]	; (8005634 <HAL_SPI_MspInit+0x1fc>)
 8005474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005476:	4a6f      	ldr	r2, [pc, #444]	; (8005634 <HAL_SPI_MspInit+0x1fc>)
 8005478:	f043 0301 	orr.w	r3, r3, #1
 800547c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800547e:	4b6d      	ldr	r3, [pc, #436]	; (8005634 <HAL_SPI_MspInit+0x1fc>)
 8005480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	617b      	str	r3, [r7, #20]
 8005488:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800548a:	23a0      	movs	r3, #160	; 0xa0
 800548c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800548e:	2302      	movs	r3, #2
 8005490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005492:	2300      	movs	r3, #0
 8005494:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005496:	2303      	movs	r3, #3
 8005498:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800549a:	2305      	movs	r3, #5
 800549c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800549e:	f107 031c 	add.w	r3, r7, #28
 80054a2:	4619      	mov	r1, r3
 80054a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054a8:	f001 fcfc 	bl	8006ea4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80054ac:	4b62      	ldr	r3, [pc, #392]	; (8005638 <HAL_SPI_MspInit+0x200>)
 80054ae:	4a63      	ldr	r2, [pc, #396]	; (800563c <HAL_SPI_MspInit+0x204>)
 80054b0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 80054b2:	4b61      	ldr	r3, [pc, #388]	; (8005638 <HAL_SPI_MspInit+0x200>)
 80054b4:	2201      	movs	r2, #1
 80054b6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80054b8:	4b5f      	ldr	r3, [pc, #380]	; (8005638 <HAL_SPI_MspInit+0x200>)
 80054ba:	2210      	movs	r2, #16
 80054bc:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80054be:	4b5e      	ldr	r3, [pc, #376]	; (8005638 <HAL_SPI_MspInit+0x200>)
 80054c0:	2200      	movs	r2, #0
 80054c2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80054c4:	4b5c      	ldr	r3, [pc, #368]	; (8005638 <HAL_SPI_MspInit+0x200>)
 80054c6:	2280      	movs	r2, #128	; 0x80
 80054c8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80054ca:	4b5b      	ldr	r3, [pc, #364]	; (8005638 <HAL_SPI_MspInit+0x200>)
 80054cc:	2200      	movs	r2, #0
 80054ce:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80054d0:	4b59      	ldr	r3, [pc, #356]	; (8005638 <HAL_SPI_MspInit+0x200>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80054d6:	4b58      	ldr	r3, [pc, #352]	; (8005638 <HAL_SPI_MspInit+0x200>)
 80054d8:	2200      	movs	r2, #0
 80054da:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80054dc:	4b56      	ldr	r3, [pc, #344]	; (8005638 <HAL_SPI_MspInit+0x200>)
 80054de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80054e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80054e4:	4854      	ldr	r0, [pc, #336]	; (8005638 <HAL_SPI_MspInit+0x200>)
 80054e6:	f001 fa59 	bl	800699c <HAL_DMA_Init>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d001      	beq.n	80054f4 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 80054f0:	f7ff fa28 	bl	8004944 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a50      	ldr	r2, [pc, #320]	; (8005638 <HAL_SPI_MspInit+0x200>)
 80054f8:	655a      	str	r2, [r3, #84]	; 0x54
 80054fa:	4a4f      	ldr	r2, [pc, #316]	; (8005638 <HAL_SPI_MspInit+0x200>)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8005500:	2200      	movs	r2, #0
 8005502:	2100      	movs	r1, #0
 8005504:	2023      	movs	r0, #35	; 0x23
 8005506:	f001 fa04 	bl	8006912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800550a:	2023      	movs	r0, #35	; 0x23
 800550c:	f001 fa1d 	bl	800694a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005510:	e08a      	b.n	8005628 <HAL_SPI_MspInit+0x1f0>
  else if(hspi->Instance==SPI2)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a4a      	ldr	r2, [pc, #296]	; (8005640 <HAL_SPI_MspInit+0x208>)
 8005518:	4293      	cmp	r3, r2
 800551a:	f040 8085 	bne.w	8005628 <HAL_SPI_MspInit+0x1f0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800551e:	4b45      	ldr	r3, [pc, #276]	; (8005634 <HAL_SPI_MspInit+0x1fc>)
 8005520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005522:	4a44      	ldr	r2, [pc, #272]	; (8005634 <HAL_SPI_MspInit+0x1fc>)
 8005524:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005528:	6593      	str	r3, [r2, #88]	; 0x58
 800552a:	4b42      	ldr	r3, [pc, #264]	; (8005634 <HAL_SPI_MspInit+0x1fc>)
 800552c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800552e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005532:	613b      	str	r3, [r7, #16]
 8005534:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005536:	4b3f      	ldr	r3, [pc, #252]	; (8005634 <HAL_SPI_MspInit+0x1fc>)
 8005538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800553a:	4a3e      	ldr	r2, [pc, #248]	; (8005634 <HAL_SPI_MspInit+0x1fc>)
 800553c:	f043 0302 	orr.w	r3, r3, #2
 8005540:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005542:	4b3c      	ldr	r3, [pc, #240]	; (8005634 <HAL_SPI_MspInit+0x1fc>)
 8005544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	60fb      	str	r3, [r7, #12]
 800554c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800554e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005552:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005554:	2302      	movs	r3, #2
 8005556:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005558:	2300      	movs	r3, #0
 800555a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800555c:	2303      	movs	r3, #3
 800555e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005560:	2305      	movs	r3, #5
 8005562:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005564:	f107 031c 	add.w	r3, r7, #28
 8005568:	4619      	mov	r1, r3
 800556a:	4836      	ldr	r0, [pc, #216]	; (8005644 <HAL_SPI_MspInit+0x20c>)
 800556c:	f001 fc9a 	bl	8006ea4 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8005570:	4b35      	ldr	r3, [pc, #212]	; (8005648 <HAL_SPI_MspInit+0x210>)
 8005572:	4a36      	ldr	r2, [pc, #216]	; (800564c <HAL_SPI_MspInit+0x214>)
 8005574:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_1;
 8005576:	4b34      	ldr	r3, [pc, #208]	; (8005648 <HAL_SPI_MspInit+0x210>)
 8005578:	2201      	movs	r2, #1
 800557a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800557c:	4b32      	ldr	r3, [pc, #200]	; (8005648 <HAL_SPI_MspInit+0x210>)
 800557e:	2200      	movs	r2, #0
 8005580:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005582:	4b31      	ldr	r3, [pc, #196]	; (8005648 <HAL_SPI_MspInit+0x210>)
 8005584:	2200      	movs	r2, #0
 8005586:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005588:	4b2f      	ldr	r3, [pc, #188]	; (8005648 <HAL_SPI_MspInit+0x210>)
 800558a:	2280      	movs	r2, #128	; 0x80
 800558c:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800558e:	4b2e      	ldr	r3, [pc, #184]	; (8005648 <HAL_SPI_MspInit+0x210>)
 8005590:	2200      	movs	r2, #0
 8005592:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005594:	4b2c      	ldr	r3, [pc, #176]	; (8005648 <HAL_SPI_MspInit+0x210>)
 8005596:	2200      	movs	r2, #0
 8005598:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800559a:	4b2b      	ldr	r3, [pc, #172]	; (8005648 <HAL_SPI_MspInit+0x210>)
 800559c:	2200      	movs	r2, #0
 800559e:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80055a0:	4b29      	ldr	r3, [pc, #164]	; (8005648 <HAL_SPI_MspInit+0x210>)
 80055a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80055a6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80055a8:	4827      	ldr	r0, [pc, #156]	; (8005648 <HAL_SPI_MspInit+0x210>)
 80055aa:	f001 f9f7 	bl	800699c <HAL_DMA_Init>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d001      	beq.n	80055b8 <HAL_SPI_MspInit+0x180>
      Error_Handler();
 80055b4:	f7ff f9c6 	bl	8004944 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a23      	ldr	r2, [pc, #140]	; (8005648 <HAL_SPI_MspInit+0x210>)
 80055bc:	659a      	str	r2, [r3, #88]	; 0x58
 80055be:	4a22      	ldr	r2, [pc, #136]	; (8005648 <HAL_SPI_MspInit+0x210>)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80055c4:	4b22      	ldr	r3, [pc, #136]	; (8005650 <HAL_SPI_MspInit+0x218>)
 80055c6:	4a23      	ldr	r2, [pc, #140]	; (8005654 <HAL_SPI_MspInit+0x21c>)
 80055c8:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 80055ca:	4b21      	ldr	r3, [pc, #132]	; (8005650 <HAL_SPI_MspInit+0x218>)
 80055cc:	2201      	movs	r2, #1
 80055ce:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80055d0:	4b1f      	ldr	r3, [pc, #124]	; (8005650 <HAL_SPI_MspInit+0x218>)
 80055d2:	2210      	movs	r2, #16
 80055d4:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80055d6:	4b1e      	ldr	r3, [pc, #120]	; (8005650 <HAL_SPI_MspInit+0x218>)
 80055d8:	2200      	movs	r2, #0
 80055da:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80055dc:	4b1c      	ldr	r3, [pc, #112]	; (8005650 <HAL_SPI_MspInit+0x218>)
 80055de:	2280      	movs	r2, #128	; 0x80
 80055e0:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80055e2:	4b1b      	ldr	r3, [pc, #108]	; (8005650 <HAL_SPI_MspInit+0x218>)
 80055e4:	2200      	movs	r2, #0
 80055e6:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80055e8:	4b19      	ldr	r3, [pc, #100]	; (8005650 <HAL_SPI_MspInit+0x218>)
 80055ea:	2200      	movs	r2, #0
 80055ec:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80055ee:	4b18      	ldr	r3, [pc, #96]	; (8005650 <HAL_SPI_MspInit+0x218>)
 80055f0:	2200      	movs	r2, #0
 80055f2:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80055f4:	4b16      	ldr	r3, [pc, #88]	; (8005650 <HAL_SPI_MspInit+0x218>)
 80055f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80055fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80055fc:	4814      	ldr	r0, [pc, #80]	; (8005650 <HAL_SPI_MspInit+0x218>)
 80055fe:	f001 f9cd 	bl	800699c <HAL_DMA_Init>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d001      	beq.n	800560c <HAL_SPI_MspInit+0x1d4>
      Error_Handler();
 8005608:	f7ff f99c 	bl	8004944 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a10      	ldr	r2, [pc, #64]	; (8005650 <HAL_SPI_MspInit+0x218>)
 8005610:	655a      	str	r2, [r3, #84]	; 0x54
 8005612:	4a0f      	ldr	r2, [pc, #60]	; (8005650 <HAL_SPI_MspInit+0x218>)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8005618:	2200      	movs	r2, #0
 800561a:	2100      	movs	r1, #0
 800561c:	2024      	movs	r0, #36	; 0x24
 800561e:	f001 f978 	bl	8006912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8005622:	2024      	movs	r0, #36	; 0x24
 8005624:	f001 f991 	bl	800694a <HAL_NVIC_EnableIRQ>
}
 8005628:	bf00      	nop
 800562a:	3730      	adds	r7, #48	; 0x30
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	40013000 	.word	0x40013000
 8005634:	40021000 	.word	0x40021000
 8005638:	200009f8 	.word	0x200009f8
 800563c:	40020030 	.word	0x40020030
 8005640:	40003800 	.word	0x40003800
 8005644:	48000400 	.word	0x48000400
 8005648:	20000a40 	.word	0x20000a40
 800564c:	40020044 	.word	0x40020044
 8005650:	20000a88 	.word	0x20000a88
 8005654:	40020058 	.word	0x40020058

08005658 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a0d      	ldr	r2, [pc, #52]	; (800569c <HAL_TIM_Base_MspInit+0x44>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d113      	bne.n	8005692 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800566a:	4b0d      	ldr	r3, [pc, #52]	; (80056a0 <HAL_TIM_Base_MspInit+0x48>)
 800566c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800566e:	4a0c      	ldr	r2, [pc, #48]	; (80056a0 <HAL_TIM_Base_MspInit+0x48>)
 8005670:	f043 0304 	orr.w	r3, r3, #4
 8005674:	6593      	str	r3, [r2, #88]	; 0x58
 8005676:	4b0a      	ldr	r3, [pc, #40]	; (80056a0 <HAL_TIM_Base_MspInit+0x48>)
 8005678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800567a:	f003 0304 	and.w	r3, r3, #4
 800567e:	60fb      	str	r3, [r7, #12]
 8005680:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 8005682:	2200      	movs	r2, #0
 8005684:	2102      	movs	r1, #2
 8005686:	201e      	movs	r0, #30
 8005688:	f001 f943 	bl	8006912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800568c:	201e      	movs	r0, #30
 800568e:	f001 f95c 	bl	800694a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005692:	bf00      	nop
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	40000800 	.word	0x40000800
 80056a0:	40021000 	.word	0x40021000

080056a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b0ac      	sub	sp, #176	; 0xb0
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80056b0:	2200      	movs	r2, #0
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	605a      	str	r2, [r3, #4]
 80056b6:	609a      	str	r2, [r3, #8]
 80056b8:	60da      	str	r2, [r3, #12]
 80056ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80056bc:	f107 0314 	add.w	r3, r7, #20
 80056c0:	2288      	movs	r2, #136	; 0x88
 80056c2:	2100      	movs	r1, #0
 80056c4:	4618      	mov	r0, r3
 80056c6:	f00c f925 	bl	8011914 <memset>
  if(huart->Instance==USART2)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a3a      	ldr	r2, [pc, #232]	; (80057b8 <HAL_UART_MspInit+0x114>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d16d      	bne.n	80057b0 <HAL_UART_MspInit+0x10c>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80056d4:	2302      	movs	r3, #2
 80056d6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80056d8:	2300      	movs	r3, #0
 80056da:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80056dc:	f107 0314 	add.w	r3, r7, #20
 80056e0:	4618      	mov	r0, r3
 80056e2:	f004 f8c9 	bl	8009878 <HAL_RCCEx_PeriphCLKConfig>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d001      	beq.n	80056f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80056ec:	f7ff f92a 	bl	8004944 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80056f0:	4b32      	ldr	r3, [pc, #200]	; (80057bc <HAL_UART_MspInit+0x118>)
 80056f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f4:	4a31      	ldr	r2, [pc, #196]	; (80057bc <HAL_UART_MspInit+0x118>)
 80056f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056fa:	6593      	str	r3, [r2, #88]	; 0x58
 80056fc:	4b2f      	ldr	r3, [pc, #188]	; (80057bc <HAL_UART_MspInit+0x118>)
 80056fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005704:	613b      	str	r3, [r7, #16]
 8005706:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005708:	4b2c      	ldr	r3, [pc, #176]	; (80057bc <HAL_UART_MspInit+0x118>)
 800570a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800570c:	4a2b      	ldr	r2, [pc, #172]	; (80057bc <HAL_UART_MspInit+0x118>)
 800570e:	f043 0301 	orr.w	r3, r3, #1
 8005712:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005714:	4b29      	ldr	r3, [pc, #164]	; (80057bc <HAL_UART_MspInit+0x118>)
 8005716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	60fb      	str	r3, [r7, #12]
 800571e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = LOG_TX_Pin|LOG_RX_Pin;
 8005720:	230c      	movs	r3, #12
 8005722:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005726:	2302      	movs	r3, #2
 8005728:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800572c:	2300      	movs	r3, #0
 800572e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005732:	2303      	movs	r3, #3
 8005734:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005738:	2307      	movs	r3, #7
 800573a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800573e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005742:	4619      	mov	r1, r3
 8005744:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005748:	f001 fbac 	bl	8006ea4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800574c:	4b1c      	ldr	r3, [pc, #112]	; (80057c0 <HAL_UART_MspInit+0x11c>)
 800574e:	4a1d      	ldr	r2, [pc, #116]	; (80057c4 <HAL_UART_MspInit+0x120>)
 8005750:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8005752:	4b1b      	ldr	r3, [pc, #108]	; (80057c0 <HAL_UART_MspInit+0x11c>)
 8005754:	2202      	movs	r2, #2
 8005756:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005758:	4b19      	ldr	r3, [pc, #100]	; (80057c0 <HAL_UART_MspInit+0x11c>)
 800575a:	2210      	movs	r2, #16
 800575c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800575e:	4b18      	ldr	r3, [pc, #96]	; (80057c0 <HAL_UART_MspInit+0x11c>)
 8005760:	2200      	movs	r2, #0
 8005762:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005764:	4b16      	ldr	r3, [pc, #88]	; (80057c0 <HAL_UART_MspInit+0x11c>)
 8005766:	2280      	movs	r2, #128	; 0x80
 8005768:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800576a:	4b15      	ldr	r3, [pc, #84]	; (80057c0 <HAL_UART_MspInit+0x11c>)
 800576c:	2200      	movs	r2, #0
 800576e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005770:	4b13      	ldr	r3, [pc, #76]	; (80057c0 <HAL_UART_MspInit+0x11c>)
 8005772:	2200      	movs	r2, #0
 8005774:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005776:	4b12      	ldr	r3, [pc, #72]	; (80057c0 <HAL_UART_MspInit+0x11c>)
 8005778:	2200      	movs	r2, #0
 800577a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800577c:	4b10      	ldr	r3, [pc, #64]	; (80057c0 <HAL_UART_MspInit+0x11c>)
 800577e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005782:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005784:	480e      	ldr	r0, [pc, #56]	; (80057c0 <HAL_UART_MspInit+0x11c>)
 8005786:	f001 f909 	bl	800699c <HAL_DMA_Init>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d001      	beq.n	8005794 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8005790:	f7ff f8d8 	bl	8004944 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a0a      	ldr	r2, [pc, #40]	; (80057c0 <HAL_UART_MspInit+0x11c>)
 8005798:	66da      	str	r2, [r3, #108]	; 0x6c
 800579a:	4a09      	ldr	r2, [pc, #36]	; (80057c0 <HAL_UART_MspInit+0x11c>)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80057a0:	2200      	movs	r2, #0
 80057a2:	2101      	movs	r1, #1
 80057a4:	2026      	movs	r0, #38	; 0x26
 80057a6:	f001 f8b4 	bl	8006912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80057aa:	2026      	movs	r0, #38	; 0x26
 80057ac:	f001 f8cd 	bl	800694a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80057b0:	bf00      	nop
 80057b2:	37b0      	adds	r7, #176	; 0xb0
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	40004400 	.word	0x40004400
 80057bc:	40021000 	.word	0x40021000
 80057c0:	20000ba0 	.word	0x20000ba0
 80057c4:	40020080 	.word	0x40020080

080057c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80057c8:	b480      	push	{r7}
 80057ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80057cc:	e7fe      	b.n	80057cc <NMI_Handler+0x4>

080057ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80057ce:	b480      	push	{r7}
 80057d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80057d2:	e7fe      	b.n	80057d2 <HardFault_Handler+0x4>

080057d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80057d4:	b480      	push	{r7}
 80057d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80057d8:	e7fe      	b.n	80057d8 <MemManage_Handler+0x4>

080057da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80057da:	b480      	push	{r7}
 80057dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80057de:	e7fe      	b.n	80057de <BusFault_Handler+0x4>

080057e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80057e0:	b480      	push	{r7}
 80057e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80057e4:	e7fe      	b.n	80057e4 <UsageFault_Handler+0x4>

080057e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80057e6:	b480      	push	{r7}
 80057e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80057ea:	bf00      	nop
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80057f4:	b480      	push	{r7}
 80057f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80057f8:	bf00      	nop
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005802:	b480      	push	{r7}
 8005804:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005806:	bf00      	nop
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005814:	f000 ff3a 	bl	800668c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005818:	bf00      	nop
 800581a:	bd80      	pop	{r7, pc}

0800581c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY0_Pin);
 8005820:	2002      	movs	r0, #2
 8005822:	f001 fd33 	bl	800728c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8005826:	bf00      	nop
 8005828:	bd80      	pop	{r7, pc}

0800582a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY1_Pin);
 800582e:	2004      	movs	r0, #4
 8005830:	f001 fd2c 	bl	800728c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8005834:	bf00      	nop
 8005836:	bd80      	pop	{r7, pc}

08005838 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800583c:	4802      	ldr	r0, [pc, #8]	; (8005848 <DMA1_Channel3_IRQHandler+0x10>)
 800583e:	f001 fa44 	bl	8006cca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005842:	bf00      	nop
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	200009f8 	.word	0x200009f8

0800584c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8005850:	4802      	ldr	r0, [pc, #8]	; (800585c <DMA1_Channel4_IRQHandler+0x10>)
 8005852:	f001 fa3a 	bl	8006cca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8005856:	bf00      	nop
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	20000a40 	.word	0x20000a40

08005860 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8005864:	4802      	ldr	r0, [pc, #8]	; (8005870 <DMA1_Channel5_IRQHandler+0x10>)
 8005866:	f001 fa30 	bl	8006cca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800586a:	bf00      	nop
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	20000a88 	.word	0x20000a88

08005874 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8005878:	4802      	ldr	r0, [pc, #8]	; (8005884 <DMA1_Channel6_IRQHandler+0x10>)
 800587a:	f001 fa26 	bl	8006cca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800587e:	bf00      	nop
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	200008c4 	.word	0x200008c4

08005888 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800588c:	4802      	ldr	r0, [pc, #8]	; (8005898 <DMA1_Channel7_IRQHandler+0x10>)
 800588e:	f001 fa1c 	bl	8006cca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8005892:	bf00      	nop
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	20000ba0 	.word	0x20000ba0

0800589c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80058a0:	4802      	ldr	r0, [pc, #8]	; (80058ac <TIM4_IRQHandler+0x10>)
 80058a2:	f006 fcc0 	bl	800c226 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80058a6:	bf00      	nop
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	20000ad0 	.word	0x20000ad0

080058b0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80058b4:	4802      	ldr	r0, [pc, #8]	; (80058c0 <I2C1_EV_IRQHandler+0x10>)
 80058b6:	f002 f8b3 	bl	8007a20 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80058ba:	bf00      	nop
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	20000828 	.word	0x20000828

080058c4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80058c8:	4802      	ldr	r0, [pc, #8]	; (80058d4 <I2C1_ER_IRQHandler+0x10>)
 80058ca:	f002 f8c3 	bl	8007a54 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80058ce:	bf00      	nop
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	20000828 	.word	0x20000828

080058d8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80058dc:	4802      	ldr	r0, [pc, #8]	; (80058e8 <SPI1_IRQHandler+0x10>)
 80058de:	f005 ff75 	bl	800b7cc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80058e2:	bf00      	nop
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	20000930 	.word	0x20000930

080058ec <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80058f0:	4802      	ldr	r0, [pc, #8]	; (80058fc <SPI2_IRQHandler+0x10>)
 80058f2:	f005 ff6b 	bl	800b7cc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80058f6:	bf00      	nop
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	20000994 	.word	0x20000994

08005900 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005904:	4802      	ldr	r0, [pc, #8]	; (8005910 <USART2_IRQHandler+0x10>)
 8005906:	f007 f9ad 	bl	800cc64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800590a:	bf00      	nop
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	20000b1c 	.word	0x20000b1c

08005914 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8005918:	4802      	ldr	r0, [pc, #8]	; (8005924 <DMA2_Channel6_IRQHandler+0x10>)
 800591a:	f001 f9d6 	bl	8006cca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 800591e:	bf00      	nop
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	2000087c 	.word	0x2000087c

08005928 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005928:	b480      	push	{r7}
 800592a:	af00      	add	r7, sp, #0
	return 1;
 800592c:	2301      	movs	r3, #1
}
 800592e:	4618      	mov	r0, r3
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <_kill>:

int _kill(int pid, int sig)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005942:	f00b ff03 	bl	801174c <__errno>
 8005946:	4603      	mov	r3, r0
 8005948:	2216      	movs	r2, #22
 800594a:	601a      	str	r2, [r3, #0]
	return -1;
 800594c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005950:	4618      	mov	r0, r3
 8005952:	3708      	adds	r7, #8
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <_exit>:

void _exit (int status)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005960:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f7ff ffe7 	bl	8005938 <_kill>
	while (1) {}		/* Make sure we hang here */
 800596a:	e7fe      	b.n	800596a <_exit+0x12>

0800596c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b086      	sub	sp, #24
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005978:	2300      	movs	r3, #0
 800597a:	617b      	str	r3, [r7, #20]
 800597c:	e00a      	b.n	8005994 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800597e:	f3af 8000 	nop.w
 8005982:	4601      	mov	r1, r0
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	1c5a      	adds	r2, r3, #1
 8005988:	60ba      	str	r2, [r7, #8]
 800598a:	b2ca      	uxtb	r2, r1
 800598c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	3301      	adds	r3, #1
 8005992:	617b      	str	r3, [r7, #20]
 8005994:	697a      	ldr	r2, [r7, #20]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	429a      	cmp	r2, r3
 800599a:	dbf0      	blt.n	800597e <_read+0x12>
	}

return len;
 800599c:	687b      	ldr	r3, [r7, #4]
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3718      	adds	r7, #24
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b086      	sub	sp, #24
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	60f8      	str	r0, [r7, #12]
 80059ae:	60b9      	str	r1, [r7, #8]
 80059b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059b2:	2300      	movs	r3, #0
 80059b4:	617b      	str	r3, [r7, #20]
 80059b6:	e009      	b.n	80059cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	1c5a      	adds	r2, r3, #1
 80059bc:	60ba      	str	r2, [r7, #8]
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	4618      	mov	r0, r3
 80059c2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	3301      	adds	r3, #1
 80059ca:	617b      	str	r3, [r7, #20]
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	dbf1      	blt.n	80059b8 <_write+0x12>
	}
	return len;
 80059d4:	687b      	ldr	r3, [r7, #4]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3718      	adds	r7, #24
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <_close>:

int _close(int file)
{
 80059de:	b480      	push	{r7}
 80059e0:	b083      	sub	sp, #12
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
	return -1;
 80059e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80059f6:	b480      	push	{r7}
 80059f8:	b083      	sub	sp, #12
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
 80059fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005a06:	605a      	str	r2, [r3, #4]
	return 0;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	370c      	adds	r7, #12
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr

08005a16 <_isatty>:

int _isatty(int file)
{
 8005a16:	b480      	push	{r7}
 8005a18:	b083      	sub	sp, #12
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
	return 1;
 8005a1e:	2301      	movs	r3, #1
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
	return 0;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3714      	adds	r7, #20
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
	...

08005a48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b086      	sub	sp, #24
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005a50:	4a14      	ldr	r2, [pc, #80]	; (8005aa4 <_sbrk+0x5c>)
 8005a52:	4b15      	ldr	r3, [pc, #84]	; (8005aa8 <_sbrk+0x60>)
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005a5c:	4b13      	ldr	r3, [pc, #76]	; (8005aac <_sbrk+0x64>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d102      	bne.n	8005a6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005a64:	4b11      	ldr	r3, [pc, #68]	; (8005aac <_sbrk+0x64>)
 8005a66:	4a12      	ldr	r2, [pc, #72]	; (8005ab0 <_sbrk+0x68>)
 8005a68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005a6a:	4b10      	ldr	r3, [pc, #64]	; (8005aac <_sbrk+0x64>)
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4413      	add	r3, r2
 8005a72:	693a      	ldr	r2, [r7, #16]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d207      	bcs.n	8005a88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005a78:	f00b fe68 	bl	801174c <__errno>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	220c      	movs	r2, #12
 8005a80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005a82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a86:	e009      	b.n	8005a9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005a88:	4b08      	ldr	r3, [pc, #32]	; (8005aac <_sbrk+0x64>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005a8e:	4b07      	ldr	r3, [pc, #28]	; (8005aac <_sbrk+0x64>)
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4413      	add	r3, r2
 8005a96:	4a05      	ldr	r2, [pc, #20]	; (8005aac <_sbrk+0x64>)
 8005a98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3718      	adds	r7, #24
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	20018000 	.word	0x20018000
 8005aa8:	00000c00 	.word	0x00000c00
 8005aac:	20003cfc 	.word	0x20003cfc
 8005ab0:	20003e80 	.word	0x20003e80

08005ab4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005ab8:	4b06      	ldr	r3, [pc, #24]	; (8005ad4 <SystemInit+0x20>)
 8005aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005abe:	4a05      	ldr	r2, [pc, #20]	; (8005ad4 <SystemInit+0x20>)
 8005ac0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ac4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8005ac8:	bf00      	nop
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	e000ed00 	.word	0xe000ed00

08005ad8 <W25_SELECT>:

extern void Report(const uint8_t addTime, const char *fmt, ...);

//------------------------------------------------------------------------------------------

void W25_SELECT()   { W25_SEL(); } //HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_RESET);//set to 0
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	2200      	movs	r2, #0
 8005ade:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005ae2:	4802      	ldr	r0, [pc, #8]	; (8005aec <W25_SELECT+0x14>)
 8005ae4:	f001 fba0 	bl	8007228 <HAL_GPIO_WritePin>
 8005ae8:	bf00      	nop
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	48000400 	.word	0x48000400

08005af0 <W25_UNSELECT>:
void W25_UNSELECT() { W25_UNSEL(); } //HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_SET);//set to 1
 8005af0:	b580      	push	{r7, lr}
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	2201      	movs	r2, #1
 8005af6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005afa:	4802      	ldr	r0, [pc, #8]	; (8005b04 <W25_UNSELECT+0x14>)
 8005afc:	f001 fb94 	bl	8007228 <HAL_GPIO_WritePin>
 8005b00:	bf00      	nop
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	48000400 	.word	0x48000400

08005b08 <W25qxx_Spi>:
//void W25_SELECT()   { HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_RESET); }//set to 0
//void W25_UNSELECT() { HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_SET); }//set to 1

//------------------------------------------------------------------------------------------
uint8_t W25qxx_Spi(uint8_t Data)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b086      	sub	sp, #24
 8005b0c:	af02      	add	r7, sp, #8
 8005b0e:	4603      	mov	r3, r0
 8005b10:	71fb      	strb	r3, [r7, #7]
uint8_t ret;

    HAL_SPI_TransmitReceive(portFLASH, &Data, &ret, 1, min_wait_ms);//HAL_MAX_DELAY);
 8005b12:	4b07      	ldr	r3, [pc, #28]	; (8005b30 <W25qxx_Spi+0x28>)
 8005b14:	6818      	ldr	r0, [r3, #0]
 8005b16:	23fa      	movs	r3, #250	; 0xfa
 8005b18:	f107 020f 	add.w	r2, r7, #15
 8005b1c:	1df9      	adds	r1, r7, #7
 8005b1e:	9300      	str	r3, [sp, #0]
 8005b20:	2301      	movs	r3, #1
 8005b22:	f005 f9c0 	bl	800aea6 <HAL_SPI_TransmitReceive>

    return ret;
 8005b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	2000000c 	.word	0x2000000c

08005b34 <W25qxx_Reset>:
//------------------------------------------------------------------------------------------
void W25qxx_Reset(void)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	af00      	add	r7, sp, #0
	W25qxx_Delay(100);
 8005b38:	2064      	movs	r0, #100	; 0x64
 8005b3a:	f000 fdc7 	bl	80066cc <HAL_Delay>

	W25_SELECT();
 8005b3e:	f7ff ffcb 	bl	8005ad8 <W25_SELECT>
		W25qxx_Spi(EN_RESET);
 8005b42:	2066      	movs	r0, #102	; 0x66
 8005b44:	f7ff ffe0 	bl	8005b08 <W25qxx_Spi>
		W25qxx_Spi(CHIP_RESET);
 8005b48:	2099      	movs	r0, #153	; 0x99
 8005b4a:	f7ff ffdd 	bl	8005b08 <W25qxx_Spi>
	W25_UNSELECT();
 8005b4e:	f7ff ffcf 	bl	8005af0 <W25_UNSELECT>

	W25qxx_Delay(100);
 8005b52:	2064      	movs	r0, #100	; 0x64
 8005b54:	f000 fdba 	bl	80066cc <HAL_Delay>
}
 8005b58:	bf00      	nop
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <W25qxx_ReadID>:
//------------------------------------------------------------------------------------------
uint32_t W25qxx_ReadID(void)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
uint32_t Temp[3] = {0};
 8005b62:	1d3b      	adds	r3, r7, #4
 8005b64:	2200      	movs	r2, #0
 8005b66:	601a      	str	r2, [r3, #0]
 8005b68:	605a      	str	r2, [r3, #4]
 8005b6a:	609a      	str	r2, [r3, #8]

    W25_SELECT();//set to 0
 8005b6c:	f7ff ffb4 	bl	8005ad8 <W25_SELECT>

    W25qxx_Spi(JEDEC_ID);
 8005b70:	209f      	movs	r0, #159	; 0x9f
 8005b72:	f7ff ffc9 	bl	8005b08 <W25qxx_Spi>
    Temp[0] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005b76:	20a5      	movs	r0, #165	; 0xa5
 8005b78:	f7ff ffc6 	bl	8005b08 <W25qxx_Spi>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	607b      	str	r3, [r7, #4]
    Temp[1] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005b80:	20a5      	movs	r0, #165	; 0xa5
 8005b82:	f7ff ffc1 	bl	8005b08 <W25qxx_Spi>
 8005b86:	4603      	mov	r3, r0
 8005b88:	60bb      	str	r3, [r7, #8]
    Temp[2] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005b8a:	20a5      	movs	r0, #165	; 0xa5
 8005b8c:	f7ff ffbc 	bl	8005b08 <W25qxx_Spi>
 8005b90:	4603      	mov	r3, r0
 8005b92:	60fb      	str	r3, [r7, #12]

    W25_UNSELECT();//set to 1
 8005b94:	f7ff ffac 	bl	8005af0 <W25_UNSELECT>

    return ((Temp[0] << 16) | (Temp[1] << 8) | Temp[2]);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	041a      	lsls	r2, r3, #16
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	021b      	lsls	r3, r3, #8
 8005ba0:	431a      	orrs	r2, r3
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	4313      	orrs	r3, r2
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
	...

08005bb0 <W25qxx_ReadUniqID>:
//------------------------------------------------------------------------------------------
void W25qxx_ReadUniqID(void)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
	uint8_t dat[] = {READ_UID, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE};
 8005bb6:	4a0e      	ldr	r2, [pc, #56]	; (8005bf0 <W25qxx_ReadUniqID+0x40>)
 8005bb8:	463b      	mov	r3, r7
 8005bba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005bbe:	6018      	str	r0, [r3, #0]
 8005bc0:	3304      	adds	r3, #4
 8005bc2:	7019      	strb	r1, [r3, #0]
    W25_SELECT();
 8005bc4:	f7ff ff88 	bl	8005ad8 <W25_SELECT>

    //W25qxx_Spi(READ_UID);
    //for (uint8_t i = 0; i < 4; i++) W25qxx_Spi(W25QXX_DUMMY_BYTE);
    //for (uint8_t i = 0; i < 8; i++) w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
    HAL_SPI_Transmit(portFLASH, dat, sizeof(dat), min_wait_ms);
 8005bc8:	4b0a      	ldr	r3, [pc, #40]	; (8005bf4 <W25qxx_ReadUniqID+0x44>)
 8005bca:	6818      	ldr	r0, [r3, #0]
 8005bcc:	23fa      	movs	r3, #250	; 0xfa
 8005bce:	4639      	mov	r1, r7
 8005bd0:	2205      	movs	r2, #5
 8005bd2:	f004 feca 	bl	800a96a <HAL_SPI_Transmit>
    HAL_SPI_Receive(portFLASH, w25qxx.UniqID, 8, min_wait_ms);
 8005bd6:	4b07      	ldr	r3, [pc, #28]	; (8005bf4 <W25qxx_ReadUniqID+0x44>)
 8005bd8:	6818      	ldr	r0, [r3, #0]
 8005bda:	23fa      	movs	r3, #250	; 0xfa
 8005bdc:	2208      	movs	r2, #8
 8005bde:	4906      	ldr	r1, [pc, #24]	; (8005bf8 <W25qxx_ReadUniqID+0x48>)
 8005be0:	f005 f831 	bl	800ac46 <HAL_SPI_Receive>

    W25_UNSELECT();
 8005be4:	f7ff ff84 	bl	8005af0 <W25_UNSELECT>
}
 8005be8:	bf00      	nop
 8005bea:	3708      	adds	r7, #8
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	08016714 	.word	0x08016714
 8005bf4:	2000000c 	.word	0x2000000c
 8005bf8:	20003d01 	.word	0x20003d01

08005bfc <W25qxx_WriteEnable>:
//------------------------------------------------------------------------------------------
void W25qxx_WriteEnable(void)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	af00      	add	r7, sp, #0
    W25_SELECT();
 8005c00:	f7ff ff6a 	bl	8005ad8 <W25_SELECT>

    W25qxx_Spi(WRITE_ENABLE);
 8005c04:	2006      	movs	r0, #6
 8005c06:	f7ff ff7f 	bl	8005b08 <W25qxx_Spi>

    W25_UNSELECT();
 8005c0a:	f7ff ff71 	bl	8005af0 <W25_UNSELECT>

    W25qxx_Delay(1);
 8005c0e:	2001      	movs	r0, #1
 8005c10:	f000 fd5c 	bl	80066cc <HAL_Delay>
}
 8005c14:	bf00      	nop
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <W25qxx_ReadStatusRegister>:

    W25qxx_Delay(1);
}
//------------------------------------------------------------------------------------------
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusReg)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	4603      	mov	r3, r0
 8005c20:	71fb      	strb	r3, [r7, #7]
uint8_t status = 0;
 8005c22:	2300      	movs	r3, #0
 8005c24:	73fb      	strb	r3, [r7, #15]

    W25_SELECT();
 8005c26:	f7ff ff57 	bl	8005ad8 <W25_SELECT>

    switch (SelectStatusReg) {
 8005c2a:	79fb      	ldrb	r3, [r7, #7]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d002      	beq.n	8005c36 <W25qxx_ReadStatusRegister+0x1e>
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d00d      	beq.n	8005c50 <W25qxx_ReadStatusRegister+0x38>
 8005c34:	e019      	b.n	8005c6a <W25qxx_ReadStatusRegister+0x52>
        case 1:
            W25qxx_Spi(READ_STAT_REG1);
 8005c36:	2005      	movs	r0, #5
 8005c38:	f7ff ff66 	bl	8005b08 <W25qxx_Spi>
            status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005c3c:	20a5      	movs	r0, #165	; 0xa5
 8005c3e:	f7ff ff63 	bl	8005b08 <W25qxx_Spi>
 8005c42:	4603      	mov	r3, r0
 8005c44:	73fb      	strb	r3, [r7, #15]
            w25qxx.StatusRegister1 = status;
 8005c46:	4a12      	ldr	r2, [pc, #72]	; (8005c90 <W25qxx_ReadStatusRegister+0x78>)
 8005c48:	7bfb      	ldrb	r3, [r7, #15]
 8005c4a:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
        break;
 8005c4e:	e018      	b.n	8005c82 <W25qxx_ReadStatusRegister+0x6a>
        case 2:
            W25qxx_Spi(READ_STAT_REG2);
 8005c50:	2035      	movs	r0, #53	; 0x35
 8005c52:	f7ff ff59 	bl	8005b08 <W25qxx_Spi>
            status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005c56:	20a5      	movs	r0, #165	; 0xa5
 8005c58:	f7ff ff56 	bl	8005b08 <W25qxx_Spi>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	73fb      	strb	r3, [r7, #15]
            w25qxx.StatusRegister2 = status;
 8005c60:	4a0b      	ldr	r2, [pc, #44]	; (8005c90 <W25qxx_ReadStatusRegister+0x78>)
 8005c62:	7bfb      	ldrb	r3, [r7, #15]
 8005c64:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
        break;
 8005c68:	e00b      	b.n	8005c82 <W25qxx_ReadStatusRegister+0x6a>
        default : {
            W25qxx_Spi(READ_STAT_REG3);
 8005c6a:	2015      	movs	r0, #21
 8005c6c:	f7ff ff4c 	bl	8005b08 <W25qxx_Spi>
            status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005c70:	20a5      	movs	r0, #165	; 0xa5
 8005c72:	f7ff ff49 	bl	8005b08 <W25qxx_Spi>
 8005c76:	4603      	mov	r3, r0
 8005c78:	73fb      	strb	r3, [r7, #15]
            w25qxx.StatusRegister3 = status;
 8005c7a:	4a05      	ldr	r2, [pc, #20]	; (8005c90 <W25qxx_ReadStatusRegister+0x78>)
 8005c7c:	7bfb      	ldrb	r3, [r7, #15]
 8005c7e:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
        }
    }

    W25_UNSELECT();
 8005c82:	f7ff ff35 	bl	8005af0 <W25_UNSELECT>

    return status;
 8005c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	20003d00 	.word	0x20003d00

08005c94 <W25qxx_WaitForWriteEnd>:

    W25_UNSELECT();
}
//------------------------------------------------------------------------------------------
void W25qxx_WaitForWriteEnd(void)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	af00      	add	r7, sp, #0
    W25qxx_Delay(1);
 8005c98:	2001      	movs	r0, #1
 8005c9a:	f000 fd17 	bl	80066cc <HAL_Delay>

    W25_SELECT();
 8005c9e:	f7ff ff1b 	bl	8005ad8 <W25_SELECT>

    W25qxx_Spi(READ_STAT_REG1);
 8005ca2:	2005      	movs	r0, #5
 8005ca4:	f7ff ff30 	bl	8005b08 <W25qxx_Spi>
    do
    {
        w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005ca8:	20a5      	movs	r0, #165	; 0xa5
 8005caa:	f7ff ff2d 	bl	8005b08 <W25qxx_Spi>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	4b08      	ldr	r3, [pc, #32]	; (8005cd4 <W25qxx_WaitForWriteEnd+0x40>)
 8005cb4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        W25qxx_Delay(1);
 8005cb8:	2001      	movs	r0, #1
 8005cba:	f000 fd07 	bl	80066cc <HAL_Delay>
    } while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8005cbe:	4b05      	ldr	r3, [pc, #20]	; (8005cd4 <W25qxx_WaitForWriteEnd+0x40>)
 8005cc0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d1ed      	bne.n	8005ca8 <W25qxx_WaitForWriteEnd+0x14>

    W25_UNSELECT();
 8005ccc:	f7ff ff10 	bl	8005af0 <W25_UNSELECT>
}
 8005cd0:	bf00      	nop
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	20003d00 	.word	0x20003d00

08005cd8 <W25qxx_Init>:
//------------------------------------------------------------------------------------------
bool W25qxx_Init(void)
{
 8005cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cda:	b089      	sub	sp, #36	; 0x24
 8005cdc:	af06      	add	r7, sp, #24

	W25qxx_Reset();
 8005cde:	f7ff ff29 	bl	8005b34 <W25qxx_Reset>


    w25qxx.Lock = 1;
 8005ce2:	4b54      	ldr	r3, [pc, #336]	; (8005e34 <W25qxx_Init+0x15c>)
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    bool ret = false;
 8005cea:	2300      	movs	r3, #0
 8005cec:	71fb      	strb	r3, [r7, #7]

    W25_UNSELECT();
 8005cee:	f7ff feff 	bl	8005af0 <W25_UNSELECT>

    uint32_t id = W25qxx_ReadID() & 0xffff;
 8005cf2:	f7ff ff33 	bl	8005b5c <W25qxx_ReadID>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	603b      	str	r3, [r7, #0]
//#ifdef W25QXX_DEBUG
    Report(1, "w25qxx Init Begin... Chip ID:0x%X\r\n", id);
 8005cfc:	683a      	ldr	r2, [r7, #0]
 8005cfe:	494e      	ldr	r1, [pc, #312]	; (8005e38 <W25qxx_Init+0x160>)
 8005d00:	2001      	movs	r0, #1
 8005d02:	f7fe fa57 	bl	80041b4 <Report>
//#endif
    id &= 0xff;
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	603b      	str	r3, [r7, #0]
    id -= 0x10;//0x4010;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	3b10      	subs	r3, #16
 8005d10:	603b      	str	r3, [r7, #0]
    if (id > 0x0a) id = 0;
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	2b0a      	cmp	r3, #10
 8005d16:	d901      	bls.n	8005d1c <W25qxx_Init+0x44>
 8005d18:	2300      	movs	r3, #0
 8005d1a:	603b      	str	r3, [r7, #0]
    w25qxx.ID         = id;              //W25Q10..W25Q512
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	4b44      	ldr	r3, [pc, #272]	; (8005e34 <W25qxx_Init+0x15c>)
 8005d22:	701a      	strb	r2, [r3, #0]
    w25qxx.BlockCount = all_chipBLK[id]; //0..1024;
 8005d24:	4a45      	ldr	r2, [pc, #276]	; (8005e3c <W25qxx_Init+0x164>)
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d2c:	4a41      	ldr	r2, [pc, #260]	; (8005e34 <W25qxx_Init+0x15c>)
 8005d2e:	f8c2 301b 	str.w	r3, [r2, #27]
//#ifdef W25QXX_DEBUG
    Report(1, "Chip %s\r\n", all_chipID[id]);
 8005d32:	4a43      	ldr	r2, [pc, #268]	; (8005e40 <W25qxx_Init+0x168>)
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	4941      	ldr	r1, [pc, #260]	; (8005e44 <W25qxx_Init+0x16c>)
 8005d3e:	2001      	movs	r0, #1
 8005d40:	f7fe fa38 	bl	80041b4 <Report>
//#endif

    if (id) {
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d06b      	beq.n	8005e22 <W25qxx_Init+0x14a>
    	w25qxx.PageSize = 256;
 8005d4a:	4b3a      	ldr	r3, [pc, #232]	; (8005e34 <W25qxx_Init+0x15c>)
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	725a      	strb	r2, [r3, #9]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f042 0201 	orr.w	r2, r2, #1
 8005d56:	729a      	strb	r2, [r3, #10]
    	w25qxx.SectorSize = 0x1000;
 8005d58:	4b36      	ldr	r3, [pc, #216]	; (8005e34 <W25qxx_Init+0x15c>)
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	73da      	strb	r2, [r3, #15]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f042 0210 	orr.w	r2, r2, #16
 8005d64:	741a      	strb	r2, [r3, #16]
 8005d66:	2200      	movs	r2, #0
 8005d68:	745a      	strb	r2, [r3, #17]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	749a      	strb	r2, [r3, #18]
    	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8005d6e:	4b31      	ldr	r3, [pc, #196]	; (8005e34 <W25qxx_Init+0x15c>)
 8005d70:	f8d3 301b 	ldr.w	r3, [r3, #27]
 8005d74:	011b      	lsls	r3, r3, #4
 8005d76:	4a2f      	ldr	r2, [pc, #188]	; (8005e34 <W25qxx_Init+0x15c>)
 8005d78:	f8c2 3013 	str.w	r3, [r2, #19]
    	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8005d7c:	4b2d      	ldr	r3, [pc, #180]	; (8005e34 <W25qxx_Init+0x15c>)
 8005d7e:	f8d3 3013 	ldr.w	r3, [r3, #19]
 8005d82:	4a2c      	ldr	r2, [pc, #176]	; (8005e34 <W25qxx_Init+0x15c>)
 8005d84:	f8d2 200f 	ldr.w	r2, [r2, #15]
 8005d88:	fb02 f303 	mul.w	r3, r2, r3
 8005d8c:	4a29      	ldr	r2, [pc, #164]	; (8005e34 <W25qxx_Init+0x15c>)
 8005d8e:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8005d92:	b292      	uxth	r2, r2
 8005d94:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d98:	4a26      	ldr	r2, [pc, #152]	; (8005e34 <W25qxx_Init+0x15c>)
 8005d9a:	f8c2 300b 	str.w	r3, [r2, #11]
    	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8005d9e:	4b25      	ldr	r3, [pc, #148]	; (8005e34 <W25qxx_Init+0x15c>)
 8005da0:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8005da4:	011b      	lsls	r3, r3, #4
 8005da6:	4a23      	ldr	r2, [pc, #140]	; (8005e34 <W25qxx_Init+0x15c>)
 8005da8:	f8c2 3017 	str.w	r3, [r2, #23]
    	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8005dac:	4b21      	ldr	r3, [pc, #132]	; (8005e34 <W25qxx_Init+0x15c>)
 8005dae:	f8d3 3013 	ldr.w	r3, [r3, #19]
 8005db2:	4a20      	ldr	r2, [pc, #128]	; (8005e34 <W25qxx_Init+0x15c>)
 8005db4:	f8d2 200f 	ldr.w	r2, [r2, #15]
 8005db8:	fb02 f303 	mul.w	r3, r2, r3
 8005dbc:	0a9b      	lsrs	r3, r3, #10
 8005dbe:	4a1d      	ldr	r2, [pc, #116]	; (8005e34 <W25qxx_Init+0x15c>)
 8005dc0:	f8c2 301f 	str.w	r3, [r2, #31]
    	W25qxx_ReadUniqID();
 8005dc4:	f7ff fef4 	bl	8005bb0 <W25qxx_ReadUniqID>
    	W25qxx_ReadStatusRegister(1);
 8005dc8:	2001      	movs	r0, #1
 8005dca:	f7ff ff25 	bl	8005c18 <W25qxx_ReadStatusRegister>
    	W25qxx_ReadStatusRegister(2);
 8005dce:	2002      	movs	r0, #2
 8005dd0:	f7ff ff22 	bl	8005c18 <W25qxx_ReadStatusRegister>
    	W25qxx_ReadStatusRegister(3);
 8005dd4:	2003      	movs	r0, #3
 8005dd6:	f7ff ff1f 	bl	8005c18 <W25qxx_ReadStatusRegister>
    	ret = true;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	71fb      	strb	r3, [r7, #7]
                 "\tSector Size:\t%u bytes\r\n"
                 "\tSector Count:\t%u\r\n"
                 "\tBlock Size:\t%u bytes\r\n"
                 "\tBlock Count:\t%u\r\n"
                 "\tCapacity:\t%u KBytes\r\n",
                 w25qxx.PageSize,
 8005dde:	4b15      	ldr	r3, [pc, #84]	; (8005e34 <W25qxx_Init+0x15c>)
 8005de0:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8005de4:	b29b      	uxth	r3, r3
    	Report(0,"\tPage Size:\t%u bytes\r\n"
 8005de6:	461e      	mov	r6, r3
 8005de8:	4b12      	ldr	r3, [pc, #72]	; (8005e34 <W25qxx_Init+0x15c>)
 8005dea:	f8d3 500b 	ldr.w	r5, [r3, #11]
 8005dee:	4b11      	ldr	r3, [pc, #68]	; (8005e34 <W25qxx_Init+0x15c>)
 8005df0:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8005df4:	4a0f      	ldr	r2, [pc, #60]	; (8005e34 <W25qxx_Init+0x15c>)
 8005df6:	f8d2 2013 	ldr.w	r2, [r2, #19]
 8005dfa:	490e      	ldr	r1, [pc, #56]	; (8005e34 <W25qxx_Init+0x15c>)
 8005dfc:	f8d1 1017 	ldr.w	r1, [r1, #23]
 8005e00:	480c      	ldr	r0, [pc, #48]	; (8005e34 <W25qxx_Init+0x15c>)
 8005e02:	f8d0 001b 	ldr.w	r0, [r0, #27]
 8005e06:	4c0b      	ldr	r4, [pc, #44]	; (8005e34 <W25qxx_Init+0x15c>)
 8005e08:	f8d4 401f 	ldr.w	r4, [r4, #31]
 8005e0c:	9404      	str	r4, [sp, #16]
 8005e0e:	9003      	str	r0, [sp, #12]
 8005e10:	9102      	str	r1, [sp, #8]
 8005e12:	9201      	str	r2, [sp, #4]
 8005e14:	9300      	str	r3, [sp, #0]
 8005e16:	462b      	mov	r3, r5
 8005e18:	4632      	mov	r2, r6
 8005e1a:	490b      	ldr	r1, [pc, #44]	; (8005e48 <W25qxx_Init+0x170>)
 8005e1c:	2000      	movs	r0, #0
 8005e1e:	f7fe f9c9 	bl	80041b4 <Report>
                 w25qxx.BlockCount,
                 w25qxx.CapacityInKiloByte);
//#endif
    }

    w25qxx.Lock = 0;
 8005e22:	4b04      	ldr	r3, [pc, #16]	; (8005e34 <W25qxx_Init+0x15c>)
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    return ret;
 8005e2a:	79fb      	ldrb	r3, [r7, #7]
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e34:	20003d00 	.word	0x20003d00
 8005e38:	0801671c 	.word	0x0801671c
 8005e3c:	08017618 	.word	0x08017618
 8005e40:	200001ec 	.word	0x200001ec
 8005e44:	08016740 	.word	0x08016740
 8005e48:	0801674c 	.word	0x0801674c

08005e4c <W25qxx_getChipID>:
//------------------------------------------------------------------------------------------
uint32_t W25qxx_getChipID()
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	af00      	add	r7, sp, #0
	return (uint32_t)w25qxx.ID;
 8005e50:	4b03      	ldr	r3, [pc, #12]	; (8005e60 <W25qxx_getChipID+0x14>)
 8005e52:	781b      	ldrb	r3, [r3, #0]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	20003d00 	.word	0x20003d00

08005e64 <W25qxx_getSectorCount>:
uint32_t W25qxx_getSectorCount()
{
 8005e64:	b480      	push	{r7}
 8005e66:	af00      	add	r7, sp, #0
	return w25qxx.SectorCount;
 8005e68:	4b03      	ldr	r3, [pc, #12]	; (8005e78 <W25qxx_getSectorCount+0x14>)
 8005e6a:	f8d3 3013 	ldr.w	r3, [r3, #19]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr
 8005e78:	20003d00 	.word	0x20003d00

08005e7c <W25qxx_getSectorSize>:
uint32_t W25qxx_getSectorSize()
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	af00      	add	r7, sp, #0
	return w25qxx.SectorSize;
 8005e80:	4b03      	ldr	r3, [pc, #12]	; (8005e90 <W25qxx_getSectorSize+0x14>)
 8005e82:	f8d3 300f 	ldr.w	r3, [r3, #15]
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr
 8005e90:	20003d00 	.word	0x20003d00

08005e94 <W25qxx_getPageSize>:
uint32_t W25qxx_getPageCount()
{
	return w25qxx.PageCount;
}
uint32_t W25qxx_getPageSize()
{
 8005e94:	b480      	push	{r7}
 8005e96:	af00      	add	r7, sp, #0
	return w25qxx.PageSize;
 8005e98:	4b04      	ldr	r3, [pc, #16]	; (8005eac <W25qxx_getPageSize+0x18>)
 8005e9a:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8005e9e:	b29b      	uxth	r3, r3
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	20003d00 	.word	0x20003d00

08005eb0 <W25qxx_getBlockSize>:
uint32_t W25qxx_getBlockCount()
{
	return w25qxx.BlockCount;
}
uint32_t W25qxx_getBlockSize()
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	af00      	add	r7, sp, #0
	return w25qxx.BlockSize;
 8005eb4:	4b03      	ldr	r3, [pc, #12]	; (8005ec4 <W25qxx_getBlockSize+0x14>)
 8005eb6:	f8d3 3017 	ldr.w	r3, [r3, #23]
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr
 8005ec4:	20003d00 	.word	0x20003d00

08005ec8 <W25qxx_EraseSector>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
    while (w25qxx.Lock) W25qxx_Delay(1);
 8005ed0:	e002      	b.n	8005ed8 <W25qxx_EraseSector+0x10>
 8005ed2:	2001      	movs	r0, #1
 8005ed4:	f000 fbfa 	bl	80066cc <HAL_Delay>
 8005ed8:	4b1c      	ldr	r3, [pc, #112]	; (8005f4c <W25qxx_EraseSector+0x84>)
 8005eda:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1f7      	bne.n	8005ed2 <W25qxx_EraseSector+0xa>

    w25qxx.Lock = 1;
 8005ee2:	4b1a      	ldr	r3, [pc, #104]	; (8005f4c <W25qxx_EraseSector+0x84>)
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
#ifdef W25QXX_DEBUG
    uint32_t StartTime = HAL_GetTick();
    Report(1, "%u Begin...", SectorAddr);
#endif

    W25qxx_WaitForWriteEnd();
 8005eea:	f7ff fed3 	bl	8005c94 <W25qxx_WaitForWriteEnd>
    SectorAddr = SectorAddr * w25qxx.SectorSize;
 8005eee:	4b17      	ldr	r3, [pc, #92]	; (8005f4c <W25qxx_EraseSector+0x84>)
 8005ef0:	f8d3 200f 	ldr.w	r2, [r3, #15]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	fb02 f303 	mul.w	r3, r2, r3
 8005efa:	607b      	str	r3, [r7, #4]
    W25qxx_WriteEnable();
 8005efc:	f7ff fe7e 	bl	8005bfc <W25qxx_WriteEnable>

    W25_SELECT();
 8005f00:	f7ff fdea 	bl	8005ad8 <W25_SELECT>
    W25qxx_Spi(SECTOR_ERASE);
 8005f04:	2020      	movs	r0, #32
 8005f06:	f7ff fdff 	bl	8005b08 <W25qxx_Spi>
    //if (w25qxx.ID >= W25Q256) W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
    W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	0c1b      	lsrs	r3, r3, #16
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	4618      	mov	r0, r3
 8005f12:	f7ff fdf9 	bl	8005b08 <W25qxx_Spi>
    W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	0a1b      	lsrs	r3, r3, #8
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7ff fdf3 	bl	8005b08 <W25qxx_Spi>
    W25qxx_Spi(SectorAddr & 0xFF);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7ff fdee 	bl	8005b08 <W25qxx_Spi>
    W25_UNSELECT();
 8005f2c:	f7ff fde0 	bl	8005af0 <W25_UNSELECT>

    W25qxx_WaitForWriteEnd();
 8005f30:	f7ff feb0 	bl	8005c94 <W25qxx_WaitForWriteEnd>

#ifdef W25QXX_DEBUG
    uint32_t dur = HAL_GetTick() - StartTime;
    Report(0, " done after %u ms (%u sec)!\r\n", dur, dur / 1000);
#endif
    W25qxx_Delay(1);
 8005f34:	2001      	movs	r0, #1
 8005f36:	f000 fbc9 	bl	80066cc <HAL_Delay>

    w25qxx.Lock = 0;
 8005f3a:	4b04      	ldr	r3, [pc, #16]	; (8005f4c <W25qxx_EraseSector+0x84>)
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8005f42:	bf00      	nop
 8005f44:	3708      	adds	r7, #8
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	20003d00 	.word	0x20003d00

08005f50 <W25qxx_SectorToPage>:
{
    return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//------------------------------------------------------------------------------------------
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
    return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8005f58:	4b08      	ldr	r3, [pc, #32]	; (8005f7c <W25qxx_SectorToPage+0x2c>)
 8005f5a:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	fb02 f303 	mul.w	r3, r2, r3
 8005f64:	4a05      	ldr	r2, [pc, #20]	; (8005f7c <W25qxx_SectorToPage+0x2c>)
 8005f66:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8005f6a:	b292      	uxth	r2, r2
 8005f6c:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr
 8005f7c:	20003d00 	.word	0x20003d00

08005f80 <W25qxx_IsEmptySector>:

    return false;
}
//------------------------------------------------------------------------------------------
bool W25qxx_IsEmptySector(uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToCheck_up_to_SectorSize)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b090      	sub	sp, #64	; 0x40
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
    while (w25qxx.Lock) W25qxx_Delay(1);
 8005f8c:	e002      	b.n	8005f94 <W25qxx_IsEmptySector+0x14>
 8005f8e:	2001      	movs	r0, #1
 8005f90:	f000 fb9c 	bl	80066cc <HAL_Delay>
 8005f94:	4b59      	ldr	r3, [pc, #356]	; (80060fc <W25qxx_IsEmptySector+0x17c>)
 8005f96:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1f7      	bne.n	8005f8e <W25qxx_IsEmptySector+0xe>

    w25qxx.Lock = 1;
 8005f9e:	4b57      	ldr	r3, [pc, #348]	; (80060fc <W25qxx_IsEmptySector+0x17c>)
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    if ( (NumByteToCheck_up_to_SectorSize > w25qxx.SectorSize) || (!NumByteToCheck_up_to_SectorSize) )
 8005fa6:	4b55      	ldr	r3, [pc, #340]	; (80060fc <W25qxx_IsEmptySector+0x17c>)
 8005fa8:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d802      	bhi.n	8005fb8 <W25qxx_IsEmptySector+0x38>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d103      	bne.n	8005fc0 <W25qxx_IsEmptySector+0x40>
                NumByteToCheck_up_to_SectorSize = w25qxx.SectorSize;
 8005fb8:	4b50      	ldr	r3, [pc, #320]	; (80060fc <W25qxx_IsEmptySector+0x17c>)
 8005fba:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8005fbe:	607b      	str	r3, [r7, #4]
    uint32_t StartTime = HAL_GetTick();
#endif

    uint8_t pBuffer[32];
    uint32_t i, WorkAddress;
    for ( i = OffsetInByte; i < w25qxx.SectorSize; i += sizeof(pBuffer)) {
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fc4:	e040      	b.n	8006048 <W25qxx_IsEmptySector+0xc8>

    	W25_SELECT();
 8005fc6:	f7ff fd87 	bl	8005ad8 <W25_SELECT>
        WorkAddress = (i + Sector_Address * w25qxx.SectorSize);
 8005fca:	4b4c      	ldr	r3, [pc, #304]	; (80060fc <W25qxx_IsEmptySector+0x17c>)
 8005fcc:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	fb02 f303 	mul.w	r3, r2, r3
 8005fd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005fd8:	4413      	add	r3, r2
 8005fda:	637b      	str	r3, [r7, #52]	; 0x34
        W25qxx_Spi(DATA_READ);//FAST_READ);
 8005fdc:	2003      	movs	r0, #3
 8005fde:	f7ff fd93 	bl	8005b08 <W25qxx_Spi>
        //if (w25qxx.ID >= W25Q256) W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
        W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 8005fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fe4:	0c1b      	lsrs	r3, r3, #16
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f7ff fd8d 	bl	8005b08 <W25qxx_Spi>
        W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 8005fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ff0:	0a1b      	lsrs	r3, r3, #8
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f7ff fd87 	bl	8005b08 <W25qxx_Spi>
        W25qxx_Spi(WorkAddress & 0xFF);
 8005ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7ff fd82 	bl	8005b08 <W25qxx_Spi>
        //W25qxx_Spi(0);
        HAL_SPI_Receive(portFLASH, pBuffer, sizeof(pBuffer), min_wait_ms);
 8006004:	4b3e      	ldr	r3, [pc, #248]	; (8006100 <W25qxx_IsEmptySector+0x180>)
 8006006:	6818      	ldr	r0, [r3, #0]
 8006008:	23fa      	movs	r3, #250	; 0xfa
 800600a:	f107 0114 	add.w	r1, r7, #20
 800600e:	2220      	movs	r2, #32
 8006010:	f004 fe19 	bl	800ac46 <HAL_SPI_Receive>
        W25_UNSELECT();
 8006014:	f7ff fd6c 	bl	8005af0 <W25_UNSELECT>

        for (uint8_t x = 0; x < sizeof(pBuffer); x++) {
 8006018:	2300      	movs	r3, #0
 800601a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800601e:	e00c      	b.n	800603a <W25qxx_IsEmptySector+0xba>
            if (pBuffer[x] != 0xFF) goto NOT_EMPTY;
 8006020:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006024:	3340      	adds	r3, #64	; 0x40
 8006026:	443b      	add	r3, r7
 8006028:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800602c:	2bff      	cmp	r3, #255	; 0xff
 800602e:	d159      	bne.n	80060e4 <W25qxx_IsEmptySector+0x164>
        for (uint8_t x = 0; x < sizeof(pBuffer); x++) {
 8006030:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006034:	3301      	adds	r3, #1
 8006036:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800603a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800603e:	2b1f      	cmp	r3, #31
 8006040:	d9ee      	bls.n	8006020 <W25qxx_IsEmptySector+0xa0>
    for ( i = OffsetInByte; i < w25qxx.SectorSize; i += sizeof(pBuffer)) {
 8006042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006044:	3320      	adds	r3, #32
 8006046:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006048:	4b2c      	ldr	r3, [pc, #176]	; (80060fc <W25qxx_IsEmptySector+0x17c>)
 800604a:	f8d3 300f 	ldr.w	r3, [r3, #15]
 800604e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006050:	429a      	cmp	r2, r3
 8006052:	d3b8      	bcc.n	8005fc6 <W25qxx_IsEmptySector+0x46>
        }
    }
    if ((w25qxx.SectorSize + OffsetInByte) % sizeof(pBuffer) != 0) {
 8006054:	4b29      	ldr	r3, [pc, #164]	; (80060fc <W25qxx_IsEmptySector+0x17c>)
 8006056:	f8d3 200f 	ldr.w	r2, [r3, #15]
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	4413      	add	r3, r2
 800605e:	f003 031f 	and.w	r3, r3, #31
 8006062:	2b00      	cmp	r3, #0
 8006064:	d038      	beq.n	80060d8 <W25qxx_IsEmptySector+0x158>
        i -= sizeof(pBuffer);
 8006066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006068:	3b20      	subs	r3, #32
 800606a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for( ; i < w25qxx.SectorSize; i++) {
 800606c:	e02e      	b.n	80060cc <W25qxx_IsEmptySector+0x14c>

            W25_SELECT();
 800606e:	f7ff fd33 	bl	8005ad8 <W25_SELECT>
            WorkAddress = (i + Sector_Address * w25qxx.SectorSize);
 8006072:	4b22      	ldr	r3, [pc, #136]	; (80060fc <W25qxx_IsEmptySector+0x17c>)
 8006074:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	fb02 f303 	mul.w	r3, r2, r3
 800607e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006080:	4413      	add	r3, r2
 8006082:	637b      	str	r3, [r7, #52]	; 0x34
            W25qxx_Spi(DATA_READ);//FAST_READ);
 8006084:	2003      	movs	r0, #3
 8006086:	f7ff fd3f 	bl	8005b08 <W25qxx_Spi>
            //if (w25qxx.ID >= W25Q256) W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
            W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 800608a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800608c:	0c1b      	lsrs	r3, r3, #16
 800608e:	b2db      	uxtb	r3, r3
 8006090:	4618      	mov	r0, r3
 8006092:	f7ff fd39 	bl	8005b08 <W25qxx_Spi>
            W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 8006096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006098:	0a1b      	lsrs	r3, r3, #8
 800609a:	b2db      	uxtb	r3, r3
 800609c:	4618      	mov	r0, r3
 800609e:	f7ff fd33 	bl	8005b08 <W25qxx_Spi>
            W25qxx_Spi(WorkAddress & 0xFF);
 80060a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7ff fd2e 	bl	8005b08 <W25qxx_Spi>
            //W25qxx_Spi(0);
            HAL_SPI_Receive(portFLASH, pBuffer, 1, min_wait_ms);
 80060ac:	4b14      	ldr	r3, [pc, #80]	; (8006100 <W25qxx_IsEmptySector+0x180>)
 80060ae:	6818      	ldr	r0, [r3, #0]
 80060b0:	23fa      	movs	r3, #250	; 0xfa
 80060b2:	f107 0114 	add.w	r1, r7, #20
 80060b6:	2201      	movs	r2, #1
 80060b8:	f004 fdc5 	bl	800ac46 <HAL_SPI_Receive>
            W25_UNSELECT();
 80060bc:	f7ff fd18 	bl	8005af0 <W25_UNSELECT>

            if (pBuffer[0] != 0xFF) goto NOT_EMPTY;
 80060c0:	7d3b      	ldrb	r3, [r7, #20]
 80060c2:	2bff      	cmp	r3, #255	; 0xff
 80060c4:	d110      	bne.n	80060e8 <W25qxx_IsEmptySector+0x168>
        for( ; i < w25qxx.SectorSize; i++) {
 80060c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060c8:	3301      	adds	r3, #1
 80060ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060cc:	4b0b      	ldr	r3, [pc, #44]	; (80060fc <W25qxx_IsEmptySector+0x17c>)
 80060ce:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80060d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d3ca      	bcc.n	800606e <W25qxx_IsEmptySector+0xee>
#ifdef W25QXX_DEBUG
    Report(1, "w25qxx CheckSector is Empty in %u ms\r\n", HAL_GetTick() - StartTime);
    //W25qxx_Delay(100);
#endif

    w25qxx.Lock = 0;
 80060d8:	4b08      	ldr	r3, [pc, #32]	; (80060fc <W25qxx_IsEmptySector+0x17c>)
 80060da:	2200      	movs	r2, #0
 80060dc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    return true;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e007      	b.n	80060f4 <W25qxx_IsEmptySector+0x174>
            if (pBuffer[x] != 0xFF) goto NOT_EMPTY;
 80060e4:	bf00      	nop
 80060e6:	e000      	b.n	80060ea <W25qxx_IsEmptySector+0x16a>
            if (pBuffer[0] != 0xFF) goto NOT_EMPTY;
 80060e8:	bf00      	nop
#ifdef W25QXX_DEBUG
    Report(1, "w25qxx CheckSector is Not Empty in %u ms\r\n", HAL_GetTick() - StartTime);
    //W25qxx_Delay(100);
#endif

    w25qxx.Lock = 0;
 80060ea:	4b04      	ldr	r3, [pc, #16]	; (80060fc <W25qxx_IsEmptySector+0x17c>)
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    return false;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3740      	adds	r7, #64	; 0x40
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	20003d00 	.word	0x20003d00
 8006100:	2000000c 	.word	0x2000000c

08006104 <W25qxx_WritePage>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b086      	sub	sp, #24
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
 8006110:	603b      	str	r3, [r7, #0]
    while (w25qxx.Lock) W25qxx_Delay(1);
 8006112:	e002      	b.n	800611a <W25qxx_WritePage+0x16>
 8006114:	2001      	movs	r0, #1
 8006116:	f000 fad9 	bl	80066cc <HAL_Delay>
 800611a:	4b4d      	ldr	r3, [pc, #308]	; (8006250 <W25qxx_WritePage+0x14c>)
 800611c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006120:	2b00      	cmp	r3, #0
 8006122:	d1f7      	bne.n	8006114 <W25qxx_WritePage+0x10>

    w25qxx.Lock = 1;
 8006124:	4b4a      	ldr	r3, [pc, #296]	; (8006250 <W25qxx_WritePage+0x14c>)
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    if ( ((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || !NumByteToWrite_up_to_PageSize )
 800612c:	683a      	ldr	r2, [r7, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4413      	add	r3, r2
 8006132:	4a47      	ldr	r2, [pc, #284]	; (8006250 <W25qxx_WritePage+0x14c>)
 8006134:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8006138:	b292      	uxth	r2, r2
 800613a:	4293      	cmp	r3, r2
 800613c:	d802      	bhi.n	8006144 <W25qxx_WritePage+0x40>
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d107      	bne.n	8006154 <W25qxx_WritePage+0x50>
                NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8006144:	4b42      	ldr	r3, [pc, #264]	; (8006250 <W25qxx_WritePage+0x14c>)
 8006146:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800614a:	b29b      	uxth	r3, r3
 800614c:	461a      	mov	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	603b      	str	r3, [r7, #0]
    if ( (OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize )
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	4413      	add	r3, r2
 800615a:	4a3d      	ldr	r2, [pc, #244]	; (8006250 <W25qxx_WritePage+0x14c>)
 800615c:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8006160:	b292      	uxth	r2, r2
 8006162:	4293      	cmp	r3, r2
 8006164:	d907      	bls.n	8006176 <W25qxx_WritePage+0x72>
                NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8006166:	4b3a      	ldr	r3, [pc, #232]	; (8006250 <W25qxx_WritePage+0x14c>)
 8006168:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800616c:	b29b      	uxth	r3, r3
 800616e:	461a      	mov	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	603b      	str	r3, [r7, #0]
    Report(1, "%s WritePage:0x%X(%u), Offset:%u ,Writes %u Bytes, begin...\r\n",
                 __func__, Page_Address, Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
    uint32_t StartTime = HAL_GetTick();
#endif

    W25qxx_WaitForWriteEnd();
 8006176:	f7ff fd8d 	bl	8005c94 <W25qxx_WaitForWriteEnd>
    W25qxx_WriteEnable();
 800617a:	f7ff fd3f 	bl	8005bfc <W25qxx_WriteEnable>

    Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 800617e:	4b34      	ldr	r3, [pc, #208]	; (8006250 <W25qxx_WritePage+0x14c>)
 8006180:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006184:	b29b      	uxth	r3, r3
 8006186:	461a      	mov	r2, r3
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	fb02 f303 	mul.w	r3, r2, r3
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	4413      	add	r3, r2
 8006192:	60bb      	str	r3, [r7, #8]
    W25qxx_Spi((Page_Address & 0xFF00) >> 8);
    W25qxx_Spi(Page_Address&0xFF);
    HAL_SPI_Transmit(portFLASH, pBuffer, NumByteToWrite_up_to_PageSize, min_wait_ms);
    W25_UNSELECT();*/

    uint16_t lens = NumByteToWrite_up_to_PageSize + PAGE_HDR_BYTES;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	b29b      	uxth	r3, r3
 8006198:	3304      	adds	r3, #4
 800619a:	82fb      	strh	r3, [r7, #22]
    int idx = 0;
 800619c:	2300      	movs	r3, #0
 800619e:	613b      	str	r3, [r7, #16]
    pageTmp[idx++] = PAGE_PROG;
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	1c5a      	adds	r2, r3, #1
 80061a4:	613a      	str	r2, [r7, #16]
 80061a6:	4a2b      	ldr	r2, [pc, #172]	; (8006254 <W25qxx_WritePage+0x150>)
 80061a8:	2102      	movs	r1, #2
 80061aa:	54d1      	strb	r1, [r2, r3]
    //if (w25qxx.ID >= W25Q256) pageTmp[idx++] = (Page_Address & 0xFF000000) >> 24;
    pageTmp[idx++] = (Page_Address & 0xFF0000) >> 16;
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	0c19      	lsrs	r1, r3, #16
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	1c5a      	adds	r2, r3, #1
 80061b4:	613a      	str	r2, [r7, #16]
 80061b6:	b2c9      	uxtb	r1, r1
 80061b8:	4a26      	ldr	r2, [pc, #152]	; (8006254 <W25qxx_WritePage+0x150>)
 80061ba:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = (Page_Address& 0xFF00) >> 8;
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	0a19      	lsrs	r1, r3, #8
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	1c5a      	adds	r2, r3, #1
 80061c4:	613a      	str	r2, [r7, #16]
 80061c6:	b2c9      	uxtb	r1, r1
 80061c8:	4a22      	ldr	r2, [pc, #136]	; (8006254 <W25qxx_WritePage+0x150>)
 80061ca:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = Page_Address & 0xFF;
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	1c5a      	adds	r2, r3, #1
 80061d0:	613a      	str	r2, [r7, #16]
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	b2d1      	uxtb	r1, r2
 80061d6:	4a1f      	ldr	r2, [pc, #124]	; (8006254 <W25qxx_WritePage+0x150>)
 80061d8:	54d1      	strb	r1, [r2, r3]
    memcpy(&pageTmp[PAGE_HDR_BYTES], pBuffer, NumByteToWrite_up_to_PageSize);//w25qxx.PageSize);
 80061da:	683a      	ldr	r2, [r7, #0]
 80061dc:	68f9      	ldr	r1, [r7, #12]
 80061de:	481e      	ldr	r0, [pc, #120]	; (8006258 <W25qxx_WritePage+0x154>)
 80061e0:	f00b fb8a 	bl	80118f8 <memcpy>

    spiRdy = 0;
 80061e4:	4b1d      	ldr	r3, [pc, #116]	; (800625c <W25qxx_WritePage+0x158>)
 80061e6:	2200      	movs	r2, #0
 80061e8:	701a      	strb	r2, [r3, #0]

w25_withDMA = 1;
 80061ea:	4b1d      	ldr	r3, [pc, #116]	; (8006260 <W25qxx_WritePage+0x15c>)
 80061ec:	2201      	movs	r2, #1
 80061ee:	701a      	strb	r2, [r3, #0]
    W25_SELECT();
 80061f0:	f7ff fc72 	bl	8005ad8 <W25_SELECT>
    if (w25_withDMA) {
 80061f4:	4b1a      	ldr	r3, [pc, #104]	; (8006260 <W25qxx_WritePage+0x15c>)
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d012      	beq.n	8006222 <W25qxx_WritePage+0x11e>
    	HAL_SPI_Transmit_DMA(portFLASH, pageTmp, lens);
 80061fc:	4b19      	ldr	r3, [pc, #100]	; (8006264 <W25qxx_WritePage+0x160>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	8afa      	ldrh	r2, [r7, #22]
 8006202:	4914      	ldr	r1, [pc, #80]	; (8006254 <W25qxx_WritePage+0x150>)
 8006204:	4618      	mov	r0, r3
 8006206:	f005 f861 	bl	800b2cc <HAL_SPI_Transmit_DMA>
    	while (!spiRdy) {
 800620a:	e002      	b.n	8006212 <W25qxx_WritePage+0x10e>
    		W25qxx_Delay(1);
 800620c:	2001      	movs	r0, #1
 800620e:	f000 fa5d 	bl	80066cc <HAL_Delay>
    	while (!spiRdy) {
 8006212:	4b12      	ldr	r3, [pc, #72]	; (800625c <W25qxx_WritePage+0x158>)
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d0f8      	beq.n	800620c <W25qxx_WritePage+0x108>
    	}
w25_withDMA = 0;
 800621a:	4b11      	ldr	r3, [pc, #68]	; (8006260 <W25qxx_WritePage+0x15c>)
 800621c:	2200      	movs	r2, #0
 800621e:	701a      	strb	r2, [r3, #0]
 8006220:	e00d      	b.n	800623e <W25qxx_WritePage+0x13a>
    } else {
    	HAL_SPI_Transmit(portFLASH, pageTmp, lens, min_wait_ms);
 8006222:	4b10      	ldr	r3, [pc, #64]	; (8006264 <W25qxx_WritePage+0x160>)
 8006224:	6818      	ldr	r0, [r3, #0]
 8006226:	23fa      	movs	r3, #250	; 0xfa
 8006228:	8afa      	ldrh	r2, [r7, #22]
 800622a:	490a      	ldr	r1, [pc, #40]	; (8006254 <W25qxx_WritePage+0x150>)
 800622c:	f004 fb9d 	bl	800a96a <HAL_SPI_Transmit>

    	W25_UNSELECT();
 8006230:	f7ff fc5e 	bl	8005af0 <W25_UNSELECT>

    	W25qxx_WaitForWriteEnd();
 8006234:	f7ff fd2e 	bl	8005c94 <W25qxx_WaitForWriteEnd>

    	spiRdy = 1;
 8006238:	4b08      	ldr	r3, [pc, #32]	; (800625c <W25qxx_WritePage+0x158>)
 800623a:	2201      	movs	r2, #1
 800623c:	701a      	strb	r2, [r3, #0]
    	Report(0, "\r\n");
    	Report(1, "%s done after %u ms\r\n", __func__, StartTime);
#endif
    }

    w25qxx.Lock = 0;
 800623e:	4b04      	ldr	r3, [pc, #16]	; (8006250 <W25qxx_WritePage+0x14c>)
 8006240:	2200      	movs	r2, #0
 8006242:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8006246:	bf00      	nop
 8006248:	3718      	adds	r7, #24
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	20003d00 	.word	0x20003d00
 8006254:	20003d28 	.word	0x20003d28
 8006258:	20003d2c 	.word	0x20003d2c
 800625c:	200001a8 	.word	0x200001a8
 8006260:	20003e2d 	.word	0x20003e2d
 8006264:	2000000c 	.word	0x2000000c

08006268 <W25qxx_WriteSector>:
//------------------------------------------------------------------------------------------
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b088      	sub	sp, #32
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]
 8006274:	603b      	str	r3, [r7, #0]
    if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || !NumByteToWrite_up_to_SectorSize)
 8006276:	4b31      	ldr	r3, [pc, #196]	; (800633c <W25qxx_WriteSector+0xd4>)
 8006278:	f8d3 300f 	ldr.w	r3, [r3, #15]
 800627c:	683a      	ldr	r2, [r7, #0]
 800627e:	429a      	cmp	r2, r3
 8006280:	d802      	bhi.n	8006288 <W25qxx_WriteSector+0x20>
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d103      	bne.n	8006290 <W25qxx_WriteSector+0x28>
                NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8006288:	4b2c      	ldr	r3, [pc, #176]	; (800633c <W25qxx_WriteSector+0xd4>)
 800628a:	f8d3 300f 	ldr.w	r3, [r3, #15]
 800628e:	603b      	str	r3, [r7, #0]
    Report(1, "%s WriteSector:0x%X(%u), Offset:%u ,Write %u Bytes, begin...\r\n",
                 __func__, Sector_Address, Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
    //W25qxx_Delay(100);
#endif

    if (OffsetInByte >= w25qxx.SectorSize) {
 8006290:	4b2a      	ldr	r3, [pc, #168]	; (800633c <W25qxx_WriteSector+0xd4>)
 8006292:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	429a      	cmp	r2, r3
 800629a:	d24b      	bcs.n	8006334 <W25qxx_WriteSector+0xcc>
        return;
    }

    int32_t BytesToWrite;
    uint32_t LocalOffset, StartPage;
    if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	441a      	add	r2, r3
 80062a2:	4b26      	ldr	r3, [pc, #152]	; (800633c <W25qxx_WriteSector+0xd4>)
 80062a4:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d906      	bls.n	80062ba <W25qxx_WriteSector+0x52>
        BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 80062ac:	4b23      	ldr	r3, [pc, #140]	; (800633c <W25qxx_WriteSector+0xd4>)
 80062ae:	f8d3 200f 	ldr.w	r2, [r3, #15]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	61fb      	str	r3, [r7, #28]
 80062b8:	e001      	b.n	80062be <W25qxx_WriteSector+0x56>
    else
        BytesToWrite = NumByteToWrite_up_to_SectorSize;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	61fb      	str	r3, [r7, #28]
    StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80062be:	68b8      	ldr	r0, [r7, #8]
 80062c0:	f7ff fe46 	bl	8005f50 <W25qxx_SectorToPage>
 80062c4:	4602      	mov	r2, r0
 80062c6:	4b1d      	ldr	r3, [pc, #116]	; (800633c <W25qxx_WriteSector+0xd4>)
 80062c8:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	4619      	mov	r1, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80062d6:	4413      	add	r3, r2
 80062d8:	617b      	str	r3, [r7, #20]
    LocalOffset = OffsetInByte % w25qxx.PageSize;
 80062da:	4b18      	ldr	r3, [pc, #96]	; (800633c <W25qxx_WriteSector+0xd4>)
 80062dc:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	461a      	mov	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80062ea:	fb01 f202 	mul.w	r2, r1, r2
 80062ee:	1a9b      	subs	r3, r3, r2
 80062f0:	61bb      	str	r3, [r7, #24]

    do
    {
        W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	69ba      	ldr	r2, [r7, #24]
 80062f6:	6979      	ldr	r1, [r7, #20]
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f7ff ff03 	bl	8006104 <W25qxx_WritePage>
        StartPage++;
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	3301      	adds	r3, #1
 8006302:	617b      	str	r3, [r7, #20]
        BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8006304:	4b0d      	ldr	r3, [pc, #52]	; (800633c <W25qxx_WriteSector+0xd4>)
 8006306:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800630a:	b29b      	uxth	r3, r3
 800630c:	461a      	mov	r2, r3
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	1a9a      	subs	r2, r3, r2
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	4413      	add	r3, r2
 8006316:	61fb      	str	r3, [r7, #28]
        pBuffer += w25qxx.PageSize;
 8006318:	4b08      	ldr	r3, [pc, #32]	; (800633c <W25qxx_WriteSector+0xd4>)
 800631a:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800631e:	b29b      	uxth	r3, r3
 8006320:	461a      	mov	r2, r3
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	4413      	add	r3, r2
 8006326:	60fb      	str	r3, [r7, #12]
        LocalOffset = 0;
 8006328:	2300      	movs	r3, #0
 800632a:	61bb      	str	r3, [r7, #24]
    } while(BytesToWrite > 0);
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	2b00      	cmp	r3, #0
 8006330:	dcdf      	bgt.n	80062f2 <W25qxx_WriteSector+0x8a>
 8006332:	e000      	b.n	8006336 <W25qxx_WriteSector+0xce>
        return;
 8006334:	bf00      	nop
#ifdef W25QXX_DEBUG
    Report(1, "%s Done\r\n", __func__);
    //W25qxx_Delay(100);
#endif

}
 8006336:	3720      	adds	r7, #32
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}
 800633c:	20003d00 	.word	0x20003d00

08006340 <W25qxx_ReadPage>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b088      	sub	sp, #32
 8006344:	af02      	add	r7, sp, #8
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
 800634c:	603b      	str	r3, [r7, #0]
    while (w25qxx.Lock) W25qxx_Delay(1);
 800634e:	e002      	b.n	8006356 <W25qxx_ReadPage+0x16>
 8006350:	2001      	movs	r0, #1
 8006352:	f000 f9bb 	bl	80066cc <HAL_Delay>
 8006356:	4b51      	ldr	r3, [pc, #324]	; (800649c <W25qxx_ReadPage+0x15c>)
 8006358:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800635c:	2b00      	cmp	r3, #0
 800635e:	d1f7      	bne.n	8006350 <W25qxx_ReadPage+0x10>

    w25qxx.Lock = 1;
 8006360:	4b4e      	ldr	r3, [pc, #312]	; (800649c <W25qxx_ReadPage+0x15c>)
 8006362:	2201      	movs	r2, #1
 8006364:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || !NumByteToRead_up_to_PageSize)
 8006368:	4b4c      	ldr	r3, [pc, #304]	; (800649c <W25qxx_ReadPage+0x15c>)
 800636a:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800636e:	b29b      	uxth	r3, r3
 8006370:	461a      	mov	r2, r3
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	4293      	cmp	r3, r2
 8006376:	d802      	bhi.n	800637e <W25qxx_ReadPage+0x3e>
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d104      	bne.n	8006388 <W25qxx_ReadPage+0x48>
        NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 800637e:	4b47      	ldr	r3, [pc, #284]	; (800649c <W25qxx_ReadPage+0x15c>)
 8006380:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006384:	b29b      	uxth	r3, r3
 8006386:	603b      	str	r3, [r7, #0]
    if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	4413      	add	r3, r2
 800638e:	4a43      	ldr	r2, [pc, #268]	; (800649c <W25qxx_ReadPage+0x15c>)
 8006390:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8006394:	b292      	uxth	r2, r2
 8006396:	4293      	cmp	r3, r2
 8006398:	d907      	bls.n	80063aa <W25qxx_ReadPage+0x6a>
        NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800639a:	4b40      	ldr	r3, [pc, #256]	; (800649c <W25qxx_ReadPage+0x15c>)
 800639c:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	461a      	mov	r2, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	1ad3      	subs	r3, r2, r3
 80063a8:	603b      	str	r3, [r7, #0]
                 __func__, Page_Address, Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
    //W25qxx_Delay(100);
    uint32_t StartTime = HAL_GetTick();
#endif

    Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 80063aa:	4b3c      	ldr	r3, [pc, #240]	; (800649c <W25qxx_ReadPage+0x15c>)
 80063ac:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	461a      	mov	r2, r3
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	fb02 f303 	mul.w	r3, r2, r3
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	4413      	add	r3, r2
 80063be:	60bb      	str	r3, [r7, #8]
    W25qxx_Spi(Page_Address & 0xFF);
    //W25qxx_Spi(0);
    HAL_SPI_Receive(portFLASH, pBuffer, NumByteToRead_up_to_PageSize, min_wait_ms);
    W25_UNSELECT();
    */
    memset(pageTmp, 0, sizeof(pageTmp));
 80063c0:	f240 1205 	movw	r2, #261	; 0x105
 80063c4:	2100      	movs	r1, #0
 80063c6:	4836      	ldr	r0, [pc, #216]	; (80064a0 <W25qxx_ReadPage+0x160>)
 80063c8:	f00b faa4 	bl	8011914 <memset>
    uint16_t lens = NumByteToRead_up_to_PageSize + PAGE_HDR_BYTES;// + 1;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	3304      	adds	r3, #4
 80063d2:	82fb      	strh	r3, [r7, #22]
    int idx = 0;
 80063d4:	2300      	movs	r3, #0
 80063d6:	613b      	str	r3, [r7, #16]
    pageTmp[idx++] = DATA_READ;//FAST_READ;
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	1c5a      	adds	r2, r3, #1
 80063dc:	613a      	str	r2, [r7, #16]
 80063de:	4a30      	ldr	r2, [pc, #192]	; (80064a0 <W25qxx_ReadPage+0x160>)
 80063e0:	2103      	movs	r1, #3
 80063e2:	54d1      	strb	r1, [r2, r3]
    //if (w25qxx.ID >= W25Q256) pageTmp[idx++] = (Page_Address & 0xFF000000) >> 24;
    pageTmp[idx++] = (Page_Address & 0xFF0000) >> 16;
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	0c19      	lsrs	r1, r3, #16
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	1c5a      	adds	r2, r3, #1
 80063ec:	613a      	str	r2, [r7, #16]
 80063ee:	b2c9      	uxtb	r1, r1
 80063f0:	4a2b      	ldr	r2, [pc, #172]	; (80064a0 <W25qxx_ReadPage+0x160>)
 80063f2:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = (Page_Address& 0xFF00) >> 8;
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	0a19      	lsrs	r1, r3, #8
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	1c5a      	adds	r2, r3, #1
 80063fc:	613a      	str	r2, [r7, #16]
 80063fe:	b2c9      	uxtb	r1, r1
 8006400:	4a27      	ldr	r2, [pc, #156]	; (80064a0 <W25qxx_ReadPage+0x160>)
 8006402:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = Page_Address & 0xFF;
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	1c5a      	adds	r2, r3, #1
 8006408:	613a      	str	r2, [r7, #16]
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	b2d1      	uxtb	r1, r2
 800640e:	4a24      	ldr	r2, [pc, #144]	; (80064a0 <W25qxx_ReadPage+0x160>)
 8006410:	54d1      	strb	r1, [r2, r3]
    //pageTmp[idx++] = 0;
    spiRdy = 0;
 8006412:	4b24      	ldr	r3, [pc, #144]	; (80064a4 <W25qxx_ReadPage+0x164>)
 8006414:	2200      	movs	r2, #0
 8006416:	701a      	strb	r2, [r3, #0]

w25_withDMA = 1;
 8006418:	4b23      	ldr	r3, [pc, #140]	; (80064a8 <W25qxx_ReadPage+0x168>)
 800641a:	2201      	movs	r2, #1
 800641c:	701a      	strb	r2, [r3, #0]
    W25_SELECT();
 800641e:	f7ff fb5b 	bl	8005ad8 <W25_SELECT>
    if (w25_withDMA) {
 8006422:	4b21      	ldr	r3, [pc, #132]	; (80064a8 <W25qxx_ReadPage+0x168>)
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d012      	beq.n	8006450 <W25qxx_ReadPage+0x110>
    	HAL_SPI_TransmitReceive_DMA(portFLASH, pageTmp, pageTmp, lens);
 800642a:	4b20      	ldr	r3, [pc, #128]	; (80064ac <W25qxx_ReadPage+0x16c>)
 800642c:	6818      	ldr	r0, [r3, #0]
 800642e:	8afb      	ldrh	r3, [r7, #22]
 8006430:	4a1b      	ldr	r2, [pc, #108]	; (80064a0 <W25qxx_ReadPage+0x160>)
 8006432:	491b      	ldr	r1, [pc, #108]	; (80064a0 <W25qxx_ReadPage+0x160>)
 8006434:	f005 f83e 	bl	800b4b4 <HAL_SPI_TransmitReceive_DMA>
    	while (!spiRdy) {
 8006438:	e002      	b.n	8006440 <W25qxx_ReadPage+0x100>
    		W25qxx_Delay(1);
 800643a:	2001      	movs	r0, #1
 800643c:	f000 f946 	bl	80066cc <HAL_Delay>
    	while (!spiRdy) {
 8006440:	4b18      	ldr	r3, [pc, #96]	; (80064a4 <W25qxx_ReadPage+0x164>)
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d0f8      	beq.n	800643a <W25qxx_ReadPage+0xfa>
    	}
w25_withDMA = 0;
 8006448:	4b17      	ldr	r3, [pc, #92]	; (80064a8 <W25qxx_ReadPage+0x168>)
 800644a:	2200      	movs	r2, #0
 800644c:	701a      	strb	r2, [r3, #0]
 800644e:	e017      	b.n	8006480 <W25qxx_ReadPage+0x140>
    } else {
    	if (HAL_SPI_TransmitReceive(portFLASH, pageTmp, pageTmp, lens, min_wait_ms) != HAL_OK) devError |= devSPI;
 8006450:	4b16      	ldr	r3, [pc, #88]	; (80064ac <W25qxx_ReadPage+0x16c>)
 8006452:	6818      	ldr	r0, [r3, #0]
 8006454:	22fa      	movs	r2, #250	; 0xfa
 8006456:	8afb      	ldrh	r3, [r7, #22]
 8006458:	9200      	str	r2, [sp, #0]
 800645a:	4a11      	ldr	r2, [pc, #68]	; (80064a0 <W25qxx_ReadPage+0x160>)
 800645c:	4910      	ldr	r1, [pc, #64]	; (80064a0 <W25qxx_ReadPage+0x160>)
 800645e:	f004 fd22 	bl	800aea6 <HAL_SPI_TransmitReceive>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d006      	beq.n	8006476 <W25qxx_ReadPage+0x136>
 8006468:	4b11      	ldr	r3, [pc, #68]	; (80064b0 <W25qxx_ReadPage+0x170>)
 800646a:	881b      	ldrh	r3, [r3, #0]
 800646c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006470:	b29a      	uxth	r2, r3
 8006472:	4b0f      	ldr	r3, [pc, #60]	; (80064b0 <W25qxx_ReadPage+0x170>)
 8006474:	801a      	strh	r2, [r3, #0]
    	W25_UNSELECT();
 8006476:	f7ff fb3b 	bl	8005af0 <W25_UNSELECT>

    	spiRdy = 1;
 800647a:	4b0a      	ldr	r3, [pc, #40]	; (80064a4 <W25qxx_ReadPage+0x164>)
 800647c:	2201      	movs	r2, #1
 800647e:	701a      	strb	r2, [r3, #0]
    }
	memcpy(pBuffer, &pageTmp[PAGE_HDR_BYTES], NumByteToRead_up_to_PageSize);//w25qxx.PageSize);
 8006480:	683a      	ldr	r2, [r7, #0]
 8006482:	490c      	ldr	r1, [pc, #48]	; (80064b4 <W25qxx_ReadPage+0x174>)
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f00b fa37 	bl	80118f8 <memcpy>
    	Report(0, "\r\n");
    	Report(1, "%s done after %u ms\r\n", __func__, StartTime);
#endif


    w25qxx.Lock = 0;
 800648a:	4b04      	ldr	r3, [pc, #16]	; (800649c <W25qxx_ReadPage+0x15c>)
 800648c:	2200      	movs	r2, #0
 800648e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8006492:	bf00      	nop
 8006494:	3718      	adds	r7, #24
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	20003d00 	.word	0x20003d00
 80064a0:	20003d28 	.word	0x20003d28
 80064a4:	200001a8 	.word	0x200001a8
 80064a8:	20003e2d 	.word	0x20003e2d
 80064ac:	2000000c 	.word	0x2000000c
 80064b0:	20001468 	.word	0x20001468
 80064b4:	20003d2c 	.word	0x20003d2c

080064b8 <W25qxx_ReadSector>:
//------------------------------------------------------------------------------------------
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b088      	sub	sp, #32
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	607a      	str	r2, [r7, #4]
 80064c4:	603b      	str	r3, [r7, #0]
    if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || !NumByteToRead_up_to_SectorSize)
 80064c6:	4b31      	ldr	r3, [pc, #196]	; (800658c <W25qxx_ReadSector+0xd4>)
 80064c8:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80064cc:	683a      	ldr	r2, [r7, #0]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d802      	bhi.n	80064d8 <W25qxx_ReadSector+0x20>
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d103      	bne.n	80064e0 <W25qxx_ReadSector+0x28>
                NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 80064d8:	4b2c      	ldr	r3, [pc, #176]	; (800658c <W25qxx_ReadSector+0xd4>)
 80064da:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80064de:	603b      	str	r3, [r7, #0]
    Report(1, "%s:0x%X(%u), Offset:%u ,Read %u Bytes, begin...\r\n",
                 __func__, Sector_Address, Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
    //W25qxx_Delay(100);
#endif

    if (OffsetInByte >= w25qxx.SectorSize) {
 80064e0:	4b2a      	ldr	r3, [pc, #168]	; (800658c <W25qxx_ReadSector+0xd4>)
 80064e2:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d24b      	bcs.n	8006584 <W25qxx_ReadSector+0xcc>
        return;
    }

    int32_t BytesToRead;
    uint32_t LocalOffset, StartPage;
    if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	441a      	add	r2, r3
 80064f2:	4b26      	ldr	r3, [pc, #152]	; (800658c <W25qxx_ReadSector+0xd4>)
 80064f4:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d906      	bls.n	800650a <W25qxx_ReadSector+0x52>
        BytesToRead = w25qxx.SectorSize - OffsetInByte;
 80064fc:	4b23      	ldr	r3, [pc, #140]	; (800658c <W25qxx_ReadSector+0xd4>)
 80064fe:	f8d3 200f 	ldr.w	r2, [r3, #15]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	61fb      	str	r3, [r7, #28]
 8006508:	e001      	b.n	800650e <W25qxx_ReadSector+0x56>
    else
        BytesToRead = NumByteToRead_up_to_SectorSize;
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	61fb      	str	r3, [r7, #28]
    StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 800650e:	68b8      	ldr	r0, [r7, #8]
 8006510:	f7ff fd1e 	bl	8005f50 <W25qxx_SectorToPage>
 8006514:	4602      	mov	r2, r0
 8006516:	4b1d      	ldr	r3, [pc, #116]	; (800658c <W25qxx_ReadSector+0xd4>)
 8006518:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800651c:	b29b      	uxth	r3, r3
 800651e:	4619      	mov	r1, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	fbb3 f3f1 	udiv	r3, r3, r1
 8006526:	4413      	add	r3, r2
 8006528:	617b      	str	r3, [r7, #20]
    LocalOffset = OffsetInByte % w25qxx.PageSize;
 800652a:	4b18      	ldr	r3, [pc, #96]	; (800658c <W25qxx_ReadSector+0xd4>)
 800652c:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006530:	b29b      	uxth	r3, r3
 8006532:	461a      	mov	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	fbb3 f1f2 	udiv	r1, r3, r2
 800653a:	fb01 f202 	mul.w	r2, r1, r2
 800653e:	1a9b      	subs	r3, r3, r2
 8006540:	61bb      	str	r3, [r7, #24]
    do {
        W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	69ba      	ldr	r2, [r7, #24]
 8006546:	6979      	ldr	r1, [r7, #20]
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f7ff fef9 	bl	8006340 <W25qxx_ReadPage>
        StartPage++;
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	3301      	adds	r3, #1
 8006552:	617b      	str	r3, [r7, #20]
        BytesToRead -= w25qxx.PageSize - LocalOffset;
 8006554:	4b0d      	ldr	r3, [pc, #52]	; (800658c <W25qxx_ReadSector+0xd4>)
 8006556:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800655a:	b29b      	uxth	r3, r3
 800655c:	461a      	mov	r2, r3
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	1a9a      	subs	r2, r3, r2
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	4413      	add	r3, r2
 8006566:	61fb      	str	r3, [r7, #28]
        pBuffer += w25qxx.PageSize;
 8006568:	4b08      	ldr	r3, [pc, #32]	; (800658c <W25qxx_ReadSector+0xd4>)
 800656a:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800656e:	b29b      	uxth	r3, r3
 8006570:	461a      	mov	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	4413      	add	r3, r2
 8006576:	60fb      	str	r3, [r7, #12]
        LocalOffset = 0;
 8006578:	2300      	movs	r3, #0
 800657a:	61bb      	str	r3, [r7, #24]
    } while(BytesToRead > 0);
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	2b00      	cmp	r3, #0
 8006580:	dcdf      	bgt.n	8006542 <W25qxx_ReadSector+0x8a>
 8006582:	e000      	b.n	8006586 <W25qxx_ReadSector+0xce>
        return;
 8006584:	bf00      	nop
#ifdef W25QXX_DEBUG
    Report(1, "%s done\r\n", __func__);
    //W25qxx_Delay(100);
#endif

}
 8006586:	3720      	adds	r7, #32
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	20003d00 	.word	0x20003d00

08006590 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8006590:	f8df d034 	ldr.w	sp, [pc, #52]	; 80065c8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006594:	f7ff fa8e 	bl	8005ab4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006598:	480c      	ldr	r0, [pc, #48]	; (80065cc <LoopForever+0x6>)
  ldr r1, =_edata
 800659a:	490d      	ldr	r1, [pc, #52]	; (80065d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800659c:	4a0d      	ldr	r2, [pc, #52]	; (80065d4 <LoopForever+0xe>)
  movs r3, #0
 800659e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80065a0:	e002      	b.n	80065a8 <LoopCopyDataInit>

080065a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80065a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80065a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80065a6:	3304      	adds	r3, #4

080065a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80065a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80065aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80065ac:	d3f9      	bcc.n	80065a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80065ae:	4a0a      	ldr	r2, [pc, #40]	; (80065d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80065b0:	4c0a      	ldr	r4, [pc, #40]	; (80065dc <LoopForever+0x16>)
  movs r3, #0
 80065b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80065b4:	e001      	b.n	80065ba <LoopFillZerobss>

080065b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80065b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80065b8:	3204      	adds	r2, #4

080065ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80065ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80065bc:	d3fb      	bcc.n	80065b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80065be:	f00b f977 	bl	80118b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80065c2:	f7fb fe89 	bl	80022d8 <main>

080065c6 <LoopForever>:

LoopForever:
    b LoopForever
 80065c6:	e7fe      	b.n	80065c6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80065c8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80065cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80065d0:	20000408 	.word	0x20000408
  ldr r2, =_sidata
 80065d4:	08017b94 	.word	0x08017b94
  ldr r2, =_sbss
 80065d8:	20000408 	.word	0x20000408
  ldr r4, =_ebss
 80065dc:	20003e80 	.word	0x20003e80

080065e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80065e0:	e7fe      	b.n	80065e0 <ADC1_2_IRQHandler>

080065e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b082      	sub	sp, #8
 80065e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80065e8:	2300      	movs	r3, #0
 80065ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80065ec:	2003      	movs	r0, #3
 80065ee:	f000 f985 	bl	80068fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80065f2:	200f      	movs	r0, #15
 80065f4:	f000 f80e 	bl	8006614 <HAL_InitTick>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d002      	beq.n	8006604 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	71fb      	strb	r3, [r7, #7]
 8006602:	e001      	b.n	8006608 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006604:	f7fe fdf0 	bl	80051e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006608:	79fb      	ldrb	r3, [r7, #7]
}
 800660a:	4618      	mov	r0, r3
 800660c:	3708      	adds	r7, #8
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
	...

08006614 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800661c:	2300      	movs	r3, #0
 800661e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8006620:	4b17      	ldr	r3, [pc, #92]	; (8006680 <HAL_InitTick+0x6c>)
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d023      	beq.n	8006670 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006628:	4b16      	ldr	r3, [pc, #88]	; (8006684 <HAL_InitTick+0x70>)
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	4b14      	ldr	r3, [pc, #80]	; (8006680 <HAL_InitTick+0x6c>)
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	4619      	mov	r1, r3
 8006632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006636:	fbb3 f3f1 	udiv	r3, r3, r1
 800663a:	fbb2 f3f3 	udiv	r3, r2, r3
 800663e:	4618      	mov	r0, r3
 8006640:	f000 f99f 	bl	8006982 <HAL_SYSTICK_Config>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10f      	bne.n	800666a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2b0f      	cmp	r3, #15
 800664e:	d809      	bhi.n	8006664 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006650:	2200      	movs	r2, #0
 8006652:	6879      	ldr	r1, [r7, #4]
 8006654:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006658:	f000 f95b 	bl	8006912 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800665c:	4a0a      	ldr	r2, [pc, #40]	; (8006688 <HAL_InitTick+0x74>)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6013      	str	r3, [r2, #0]
 8006662:	e007      	b.n	8006674 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	73fb      	strb	r3, [r7, #15]
 8006668:	e004      	b.n	8006674 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	73fb      	strb	r3, [r7, #15]
 800666e:	e001      	b.n	8006674 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006674:	7bfb      	ldrb	r3, [r7, #15]
}
 8006676:	4618      	mov	r0, r3
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	2000021c 	.word	0x2000021c
 8006684:	200001e8 	.word	0x200001e8
 8006688:	20000218 	.word	0x20000218

0800668c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800668c:	b480      	push	{r7}
 800668e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006690:	4b06      	ldr	r3, [pc, #24]	; (80066ac <HAL_IncTick+0x20>)
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	461a      	mov	r2, r3
 8006696:	4b06      	ldr	r3, [pc, #24]	; (80066b0 <HAL_IncTick+0x24>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4413      	add	r3, r2
 800669c:	4a04      	ldr	r2, [pc, #16]	; (80066b0 <HAL_IncTick+0x24>)
 800669e:	6013      	str	r3, [r2, #0]
}
 80066a0:	bf00      	nop
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	2000021c 	.word	0x2000021c
 80066b0:	20003e30 	.word	0x20003e30

080066b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80066b4:	b480      	push	{r7}
 80066b6:	af00      	add	r7, sp, #0
  return uwTick;
 80066b8:	4b03      	ldr	r3, [pc, #12]	; (80066c8 <HAL_GetTick+0x14>)
 80066ba:	681b      	ldr	r3, [r3, #0]
}
 80066bc:	4618      	mov	r0, r3
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	20003e30 	.word	0x20003e30

080066cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80066d4:	f7ff ffee 	bl	80066b4 <HAL_GetTick>
 80066d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066e4:	d005      	beq.n	80066f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80066e6:	4b0a      	ldr	r3, [pc, #40]	; (8006710 <HAL_Delay+0x44>)
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	461a      	mov	r2, r3
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	4413      	add	r3, r2
 80066f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80066f2:	bf00      	nop
 80066f4:	f7ff ffde 	bl	80066b4 <HAL_GetTick>
 80066f8:	4602      	mov	r2, r0
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	429a      	cmp	r2, r3
 8006702:	d8f7      	bhi.n	80066f4 <HAL_Delay+0x28>
  {
  }
}
 8006704:	bf00      	nop
 8006706:	bf00      	nop
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	2000021c 	.word	0x2000021c

08006714 <__NVIC_SetPriorityGrouping>:
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f003 0307 	and.w	r3, r3, #7
 8006722:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006724:	4b0c      	ldr	r3, [pc, #48]	; (8006758 <__NVIC_SetPriorityGrouping+0x44>)
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800672a:	68ba      	ldr	r2, [r7, #8]
 800672c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006730:	4013      	ands	r3, r2
 8006732:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800673c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006746:	4a04      	ldr	r2, [pc, #16]	; (8006758 <__NVIC_SetPriorityGrouping+0x44>)
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	60d3      	str	r3, [r2, #12]
}
 800674c:	bf00      	nop
 800674e:	3714      	adds	r7, #20
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr
 8006758:	e000ed00 	.word	0xe000ed00

0800675c <__NVIC_GetPriorityGrouping>:
{
 800675c:	b480      	push	{r7}
 800675e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006760:	4b04      	ldr	r3, [pc, #16]	; (8006774 <__NVIC_GetPriorityGrouping+0x18>)
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	0a1b      	lsrs	r3, r3, #8
 8006766:	f003 0307 	and.w	r3, r3, #7
}
 800676a:	4618      	mov	r0, r3
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr
 8006774:	e000ed00 	.word	0xe000ed00

08006778 <__NVIC_EnableIRQ>:
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	4603      	mov	r3, r0
 8006780:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006786:	2b00      	cmp	r3, #0
 8006788:	db0b      	blt.n	80067a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800678a:	79fb      	ldrb	r3, [r7, #7]
 800678c:	f003 021f 	and.w	r2, r3, #31
 8006790:	4907      	ldr	r1, [pc, #28]	; (80067b0 <__NVIC_EnableIRQ+0x38>)
 8006792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006796:	095b      	lsrs	r3, r3, #5
 8006798:	2001      	movs	r0, #1
 800679a:	fa00 f202 	lsl.w	r2, r0, r2
 800679e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80067a2:	bf00      	nop
 80067a4:	370c      	adds	r7, #12
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	e000e100 	.word	0xe000e100

080067b4 <__NVIC_DisableIRQ>:
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	4603      	mov	r3, r0
 80067bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	db12      	blt.n	80067ec <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80067c6:	79fb      	ldrb	r3, [r7, #7]
 80067c8:	f003 021f 	and.w	r2, r3, #31
 80067cc:	490a      	ldr	r1, [pc, #40]	; (80067f8 <__NVIC_DisableIRQ+0x44>)
 80067ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067d2:	095b      	lsrs	r3, r3, #5
 80067d4:	2001      	movs	r0, #1
 80067d6:	fa00 f202 	lsl.w	r2, r0, r2
 80067da:	3320      	adds	r3, #32
 80067dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80067e0:	f3bf 8f4f 	dsb	sy
}
 80067e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80067e6:	f3bf 8f6f 	isb	sy
}
 80067ea:	bf00      	nop
}
 80067ec:	bf00      	nop
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr
 80067f8:	e000e100 	.word	0xe000e100

080067fc <__NVIC_SetPriority>:
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	4603      	mov	r3, r0
 8006804:	6039      	str	r1, [r7, #0]
 8006806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800680c:	2b00      	cmp	r3, #0
 800680e:	db0a      	blt.n	8006826 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	b2da      	uxtb	r2, r3
 8006814:	490c      	ldr	r1, [pc, #48]	; (8006848 <__NVIC_SetPriority+0x4c>)
 8006816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800681a:	0112      	lsls	r2, r2, #4
 800681c:	b2d2      	uxtb	r2, r2
 800681e:	440b      	add	r3, r1
 8006820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006824:	e00a      	b.n	800683c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	b2da      	uxtb	r2, r3
 800682a:	4908      	ldr	r1, [pc, #32]	; (800684c <__NVIC_SetPriority+0x50>)
 800682c:	79fb      	ldrb	r3, [r7, #7]
 800682e:	f003 030f 	and.w	r3, r3, #15
 8006832:	3b04      	subs	r3, #4
 8006834:	0112      	lsls	r2, r2, #4
 8006836:	b2d2      	uxtb	r2, r2
 8006838:	440b      	add	r3, r1
 800683a:	761a      	strb	r2, [r3, #24]
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr
 8006848:	e000e100 	.word	0xe000e100
 800684c:	e000ed00 	.word	0xe000ed00

08006850 <NVIC_EncodePriority>:
{
 8006850:	b480      	push	{r7}
 8006852:	b089      	sub	sp, #36	; 0x24
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f003 0307 	and.w	r3, r3, #7
 8006862:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	f1c3 0307 	rsb	r3, r3, #7
 800686a:	2b04      	cmp	r3, #4
 800686c:	bf28      	it	cs
 800686e:	2304      	movcs	r3, #4
 8006870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	3304      	adds	r3, #4
 8006876:	2b06      	cmp	r3, #6
 8006878:	d902      	bls.n	8006880 <NVIC_EncodePriority+0x30>
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	3b03      	subs	r3, #3
 800687e:	e000      	b.n	8006882 <NVIC_EncodePriority+0x32>
 8006880:	2300      	movs	r3, #0
 8006882:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006884:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	fa02 f303 	lsl.w	r3, r2, r3
 800688e:	43da      	mvns	r2, r3
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	401a      	ands	r2, r3
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006898:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	fa01 f303 	lsl.w	r3, r1, r3
 80068a2:	43d9      	mvns	r1, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80068a8:	4313      	orrs	r3, r2
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3724      	adds	r7, #36	; 0x24
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
	...

080068b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	3b01      	subs	r3, #1
 80068c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80068c8:	d301      	bcc.n	80068ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80068ca:	2301      	movs	r3, #1
 80068cc:	e00f      	b.n	80068ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80068ce:	4a0a      	ldr	r2, [pc, #40]	; (80068f8 <SysTick_Config+0x40>)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	3b01      	subs	r3, #1
 80068d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80068d6:	210f      	movs	r1, #15
 80068d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068dc:	f7ff ff8e 	bl	80067fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80068e0:	4b05      	ldr	r3, [pc, #20]	; (80068f8 <SysTick_Config+0x40>)
 80068e2:	2200      	movs	r2, #0
 80068e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80068e6:	4b04      	ldr	r3, [pc, #16]	; (80068f8 <SysTick_Config+0x40>)
 80068e8:	2207      	movs	r2, #7
 80068ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3708      	adds	r7, #8
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	e000e010 	.word	0xe000e010

080068fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f7ff ff05 	bl	8006714 <__NVIC_SetPriorityGrouping>
}
 800690a:	bf00      	nop
 800690c:	3708      	adds	r7, #8
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b086      	sub	sp, #24
 8006916:	af00      	add	r7, sp, #0
 8006918:	4603      	mov	r3, r0
 800691a:	60b9      	str	r1, [r7, #8]
 800691c:	607a      	str	r2, [r7, #4]
 800691e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006920:	2300      	movs	r3, #0
 8006922:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006924:	f7ff ff1a 	bl	800675c <__NVIC_GetPriorityGrouping>
 8006928:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	68b9      	ldr	r1, [r7, #8]
 800692e:	6978      	ldr	r0, [r7, #20]
 8006930:	f7ff ff8e 	bl	8006850 <NVIC_EncodePriority>
 8006934:	4602      	mov	r2, r0
 8006936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800693a:	4611      	mov	r1, r2
 800693c:	4618      	mov	r0, r3
 800693e:	f7ff ff5d 	bl	80067fc <__NVIC_SetPriority>
}
 8006942:	bf00      	nop
 8006944:	3718      	adds	r7, #24
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}

0800694a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800694a:	b580      	push	{r7, lr}
 800694c:	b082      	sub	sp, #8
 800694e:	af00      	add	r7, sp, #0
 8006950:	4603      	mov	r3, r0
 8006952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006958:	4618      	mov	r0, r3
 800695a:	f7ff ff0d 	bl	8006778 <__NVIC_EnableIRQ>
}
 800695e:	bf00      	nop
 8006960:	3708      	adds	r7, #8
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b082      	sub	sp, #8
 800696a:	af00      	add	r7, sp, #0
 800696c:	4603      	mov	r3, r0
 800696e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006974:	4618      	mov	r0, r3
 8006976:	f7ff ff1d 	bl	80067b4 <__NVIC_DisableIRQ>
}
 800697a:	bf00      	nop
 800697c:	3708      	adds	r7, #8
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}

08006982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006982:	b580      	push	{r7, lr}
 8006984:	b082      	sub	sp, #8
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f7ff ff94 	bl	80068b8 <SysTick_Config>
 8006990:	4603      	mov	r3, r0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3708      	adds	r7, #8
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
	...

0800699c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d101      	bne.n	80069ae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e098      	b.n	8006ae0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	461a      	mov	r2, r3
 80069b4:	4b4d      	ldr	r3, [pc, #308]	; (8006aec <HAL_DMA_Init+0x150>)
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d80f      	bhi.n	80069da <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	461a      	mov	r2, r3
 80069c0:	4b4b      	ldr	r3, [pc, #300]	; (8006af0 <HAL_DMA_Init+0x154>)
 80069c2:	4413      	add	r3, r2
 80069c4:	4a4b      	ldr	r2, [pc, #300]	; (8006af4 <HAL_DMA_Init+0x158>)
 80069c6:	fba2 2303 	umull	r2, r3, r2, r3
 80069ca:	091b      	lsrs	r3, r3, #4
 80069cc:	009a      	lsls	r2, r3, #2
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a48      	ldr	r2, [pc, #288]	; (8006af8 <HAL_DMA_Init+0x15c>)
 80069d6:	641a      	str	r2, [r3, #64]	; 0x40
 80069d8:	e00e      	b.n	80069f8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	461a      	mov	r2, r3
 80069e0:	4b46      	ldr	r3, [pc, #280]	; (8006afc <HAL_DMA_Init+0x160>)
 80069e2:	4413      	add	r3, r2
 80069e4:	4a43      	ldr	r2, [pc, #268]	; (8006af4 <HAL_DMA_Init+0x158>)
 80069e6:	fba2 2303 	umull	r2, r3, r2, r3
 80069ea:	091b      	lsrs	r3, r3, #4
 80069ec:	009a      	lsls	r2, r3, #2
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a42      	ldr	r2, [pc, #264]	; (8006b00 <HAL_DMA_Init+0x164>)
 80069f6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2202      	movs	r2, #2
 80069fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a12:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006a1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	699b      	ldr	r3, [r3, #24]
 8006a2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a52:	d039      	beq.n	8006ac8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a58:	4a27      	ldr	r2, [pc, #156]	; (8006af8 <HAL_DMA_Init+0x15c>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d11a      	bne.n	8006a94 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006a5e:	4b29      	ldr	r3, [pc, #164]	; (8006b04 <HAL_DMA_Init+0x168>)
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a66:	f003 031c 	and.w	r3, r3, #28
 8006a6a:	210f      	movs	r1, #15
 8006a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a70:	43db      	mvns	r3, r3
 8006a72:	4924      	ldr	r1, [pc, #144]	; (8006b04 <HAL_DMA_Init+0x168>)
 8006a74:	4013      	ands	r3, r2
 8006a76:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006a78:	4b22      	ldr	r3, [pc, #136]	; (8006b04 <HAL_DMA_Init+0x168>)
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6859      	ldr	r1, [r3, #4]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a84:	f003 031c 	and.w	r3, r3, #28
 8006a88:	fa01 f303 	lsl.w	r3, r1, r3
 8006a8c:	491d      	ldr	r1, [pc, #116]	; (8006b04 <HAL_DMA_Init+0x168>)
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	600b      	str	r3, [r1, #0]
 8006a92:	e019      	b.n	8006ac8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006a94:	4b1c      	ldr	r3, [pc, #112]	; (8006b08 <HAL_DMA_Init+0x16c>)
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a9c:	f003 031c 	and.w	r3, r3, #28
 8006aa0:	210f      	movs	r1, #15
 8006aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8006aa6:	43db      	mvns	r3, r3
 8006aa8:	4917      	ldr	r1, [pc, #92]	; (8006b08 <HAL_DMA_Init+0x16c>)
 8006aaa:	4013      	ands	r3, r2
 8006aac:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006aae:	4b16      	ldr	r3, [pc, #88]	; (8006b08 <HAL_DMA_Init+0x16c>)
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6859      	ldr	r1, [r3, #4]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aba:	f003 031c 	and.w	r3, r3, #28
 8006abe:	fa01 f303 	lsl.w	r3, r1, r3
 8006ac2:	4911      	ldr	r1, [pc, #68]	; (8006b08 <HAL_DMA_Init+0x16c>)
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3714      	adds	r7, #20
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr
 8006aec:	40020407 	.word	0x40020407
 8006af0:	bffdfff8 	.word	0xbffdfff8
 8006af4:	cccccccd 	.word	0xcccccccd
 8006af8:	40020000 	.word	0x40020000
 8006afc:	bffdfbf8 	.word	0xbffdfbf8
 8006b00:	40020400 	.word	0x40020400
 8006b04:	400200a8 	.word	0x400200a8
 8006b08:	400204a8 	.word	0x400204a8

08006b0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b086      	sub	sp, #24
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
 8006b18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d101      	bne.n	8006b2c <HAL_DMA_Start_IT+0x20>
 8006b28:	2302      	movs	r3, #2
 8006b2a:	e04b      	b.n	8006bc4 <HAL_DMA_Start_IT+0xb8>
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d13a      	bne.n	8006bb6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2202      	movs	r2, #2
 8006b44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f022 0201 	bic.w	r2, r2, #1
 8006b5c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	68b9      	ldr	r1, [r7, #8]
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f000 f96d 	bl	8006e44 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d008      	beq.n	8006b84 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f042 020e 	orr.w	r2, r2, #14
 8006b80:	601a      	str	r2, [r3, #0]
 8006b82:	e00f      	b.n	8006ba4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f022 0204 	bic.w	r2, r2, #4
 8006b92:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f042 020a 	orr.w	r2, r2, #10
 8006ba2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f042 0201 	orr.w	r2, r2, #1
 8006bb2:	601a      	str	r2, [r3, #0]
 8006bb4:	e005      	b.n	8006bc2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006bbe:	2302      	movs	r3, #2
 8006bc0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3718      	adds	r7, #24
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b085      	sub	sp, #20
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d008      	beq.n	8006bf6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2204      	movs	r2, #4
 8006be8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e022      	b.n	8006c3c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f022 020e 	bic.w	r2, r2, #14
 8006c04:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f022 0201 	bic.w	r2, r2, #1
 8006c14:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c1a:	f003 021c 	and.w	r2, r3, #28
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c22:	2101      	movs	r1, #1
 8006c24:	fa01 f202 	lsl.w	r2, r1, r2
 8006c28:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8006c3a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3714      	adds	r7, #20
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c50:	2300      	movs	r3, #0
 8006c52:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d005      	beq.n	8006c6c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2204      	movs	r2, #4
 8006c64:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	73fb      	strb	r3, [r7, #15]
 8006c6a:	e029      	b.n	8006cc0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f022 020e 	bic.w	r2, r2, #14
 8006c7a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f022 0201 	bic.w	r2, r2, #1
 8006c8a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c90:	f003 021c 	and.w	r2, r3, #28
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c98:	2101      	movs	r1, #1
 8006c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8006c9e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d003      	beq.n	8006cc0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	4798      	blx	r3
    }
  }
  return status;
 8006cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3710      	adds	r7, #16
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}

08006cca <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006cca:	b580      	push	{r7, lr}
 8006ccc:	b084      	sub	sp, #16
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ce6:	f003 031c 	and.w	r3, r3, #28
 8006cea:	2204      	movs	r2, #4
 8006cec:	409a      	lsls	r2, r3
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d026      	beq.n	8006d44 <HAL_DMA_IRQHandler+0x7a>
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	f003 0304 	and.w	r3, r3, #4
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d021      	beq.n	8006d44 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 0320 	and.w	r3, r3, #32
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d107      	bne.n	8006d1e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f022 0204 	bic.w	r2, r2, #4
 8006d1c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d22:	f003 021c 	and.w	r2, r3, #28
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2a:	2104      	movs	r1, #4
 8006d2c:	fa01 f202 	lsl.w	r2, r1, r2
 8006d30:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d071      	beq.n	8006e1e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8006d42:	e06c      	b.n	8006e1e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d48:	f003 031c 	and.w	r3, r3, #28
 8006d4c:	2202      	movs	r2, #2
 8006d4e:	409a      	lsls	r2, r3
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	4013      	ands	r3, r2
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d02e      	beq.n	8006db6 <HAL_DMA_IRQHandler+0xec>
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	f003 0302 	and.w	r3, r3, #2
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d029      	beq.n	8006db6 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0320 	and.w	r3, r3, #32
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d10b      	bne.n	8006d88 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f022 020a 	bic.w	r2, r2, #10
 8006d7e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d8c:	f003 021c 	and.w	r2, r3, #28
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d94:	2102      	movs	r1, #2
 8006d96:	fa01 f202 	lsl.w	r2, r1, r2
 8006d9a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d038      	beq.n	8006e1e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006db4:	e033      	b.n	8006e1e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dba:	f003 031c 	and.w	r3, r3, #28
 8006dbe:	2208      	movs	r2, #8
 8006dc0:	409a      	lsls	r2, r3
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d02a      	beq.n	8006e20 <HAL_DMA_IRQHandler+0x156>
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	f003 0308 	and.w	r3, r3, #8
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d025      	beq.n	8006e20 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f022 020e 	bic.w	r2, r2, #14
 8006de2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006de8:	f003 021c 	and.w	r2, r3, #28
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df0:	2101      	movs	r1, #1
 8006df2:	fa01 f202 	lsl.w	r2, r1, r2
 8006df6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d004      	beq.n	8006e20 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006e1e:	bf00      	nop
 8006e20:	bf00      	nop
}
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006e36:	b2db      	uxtb	r3, r3
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
 8006e50:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e56:	f003 021c 	and.w	r2, r3, #28
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5e:	2101      	movs	r1, #1
 8006e60:	fa01 f202 	lsl.w	r2, r1, r2
 8006e64:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	683a      	ldr	r2, [r7, #0]
 8006e6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	2b10      	cmp	r3, #16
 8006e74:	d108      	bne.n	8006e88 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	68ba      	ldr	r2, [r7, #8]
 8006e84:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006e86:	e007      	b.n	8006e98 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	68ba      	ldr	r2, [r7, #8]
 8006e8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	60da      	str	r2, [r3, #12]
}
 8006e98:	bf00      	nop
 8006e9a:	3714      	adds	r7, #20
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b087      	sub	sp, #28
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006eb2:	e17f      	b.n	80071b4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	2101      	movs	r1, #1
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f000 8171 	beq.w	80071ae <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	f003 0303 	and.w	r3, r3, #3
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d005      	beq.n	8006ee4 <HAL_GPIO_Init+0x40>
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	f003 0303 	and.w	r3, r3, #3
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	d130      	bne.n	8006f46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	005b      	lsls	r3, r3, #1
 8006eee:	2203      	movs	r2, #3
 8006ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef4:	43db      	mvns	r3, r3
 8006ef6:	693a      	ldr	r2, [r7, #16]
 8006ef8:	4013      	ands	r3, r2
 8006efa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	68da      	ldr	r2, [r3, #12]
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	005b      	lsls	r3, r3, #1
 8006f04:	fa02 f303 	lsl.w	r3, r2, r3
 8006f08:	693a      	ldr	r2, [r7, #16]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	693a      	ldr	r2, [r7, #16]
 8006f12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f22:	43db      	mvns	r3, r3
 8006f24:	693a      	ldr	r2, [r7, #16]
 8006f26:	4013      	ands	r3, r2
 8006f28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	091b      	lsrs	r3, r3, #4
 8006f30:	f003 0201 	and.w	r2, r3, #1
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	fa02 f303 	lsl.w	r3, r2, r3
 8006f3a:	693a      	ldr	r2, [r7, #16]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	693a      	ldr	r2, [r7, #16]
 8006f44:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	f003 0303 	and.w	r3, r3, #3
 8006f4e:	2b03      	cmp	r3, #3
 8006f50:	d118      	bne.n	8006f84 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8006f58:	2201      	movs	r2, #1
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f60:	43db      	mvns	r3, r3
 8006f62:	693a      	ldr	r2, [r7, #16]
 8006f64:	4013      	ands	r3, r2
 8006f66:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	08db      	lsrs	r3, r3, #3
 8006f6e:	f003 0201 	and.w	r2, r3, #1
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	fa02 f303 	lsl.w	r3, r2, r3
 8006f78:	693a      	ldr	r2, [r7, #16]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	693a      	ldr	r2, [r7, #16]
 8006f82:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	f003 0303 	and.w	r3, r3, #3
 8006f8c:	2b03      	cmp	r3, #3
 8006f8e:	d017      	beq.n	8006fc0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	005b      	lsls	r3, r3, #1
 8006f9a:	2203      	movs	r2, #3
 8006f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa0:	43db      	mvns	r3, r3
 8006fa2:	693a      	ldr	r2, [r7, #16]
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	689a      	ldr	r2, [r3, #8]
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	005b      	lsls	r3, r3, #1
 8006fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb4:	693a      	ldr	r2, [r7, #16]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	693a      	ldr	r2, [r7, #16]
 8006fbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	f003 0303 	and.w	r3, r3, #3
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d123      	bne.n	8007014 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	08da      	lsrs	r2, r3, #3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	3208      	adds	r2, #8
 8006fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	f003 0307 	and.w	r3, r3, #7
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	220f      	movs	r2, #15
 8006fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe8:	43db      	mvns	r3, r3
 8006fea:	693a      	ldr	r2, [r7, #16]
 8006fec:	4013      	ands	r3, r2
 8006fee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	691a      	ldr	r2, [r3, #16]
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	f003 0307 	and.w	r3, r3, #7
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8007000:	693a      	ldr	r2, [r7, #16]
 8007002:	4313      	orrs	r3, r2
 8007004:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	08da      	lsrs	r2, r3, #3
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	3208      	adds	r2, #8
 800700e:	6939      	ldr	r1, [r7, #16]
 8007010:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	005b      	lsls	r3, r3, #1
 800701e:	2203      	movs	r2, #3
 8007020:	fa02 f303 	lsl.w	r3, r2, r3
 8007024:	43db      	mvns	r3, r3
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	4013      	ands	r3, r2
 800702a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	f003 0203 	and.w	r2, r3, #3
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	005b      	lsls	r3, r3, #1
 8007038:	fa02 f303 	lsl.w	r3, r2, r3
 800703c:	693a      	ldr	r2, [r7, #16]
 800703e:	4313      	orrs	r3, r2
 8007040:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	693a      	ldr	r2, [r7, #16]
 8007046:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007050:	2b00      	cmp	r3, #0
 8007052:	f000 80ac 	beq.w	80071ae <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007056:	4b5f      	ldr	r3, [pc, #380]	; (80071d4 <HAL_GPIO_Init+0x330>)
 8007058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800705a:	4a5e      	ldr	r2, [pc, #376]	; (80071d4 <HAL_GPIO_Init+0x330>)
 800705c:	f043 0301 	orr.w	r3, r3, #1
 8007060:	6613      	str	r3, [r2, #96]	; 0x60
 8007062:	4b5c      	ldr	r3, [pc, #368]	; (80071d4 <HAL_GPIO_Init+0x330>)
 8007064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007066:	f003 0301 	and.w	r3, r3, #1
 800706a:	60bb      	str	r3, [r7, #8]
 800706c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800706e:	4a5a      	ldr	r2, [pc, #360]	; (80071d8 <HAL_GPIO_Init+0x334>)
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	089b      	lsrs	r3, r3, #2
 8007074:	3302      	adds	r3, #2
 8007076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800707a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	f003 0303 	and.w	r3, r3, #3
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	220f      	movs	r2, #15
 8007086:	fa02 f303 	lsl.w	r3, r2, r3
 800708a:	43db      	mvns	r3, r3
 800708c:	693a      	ldr	r2, [r7, #16]
 800708e:	4013      	ands	r3, r2
 8007090:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007098:	d025      	beq.n	80070e6 <HAL_GPIO_Init+0x242>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a4f      	ldr	r2, [pc, #316]	; (80071dc <HAL_GPIO_Init+0x338>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d01f      	beq.n	80070e2 <HAL_GPIO_Init+0x23e>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a4e      	ldr	r2, [pc, #312]	; (80071e0 <HAL_GPIO_Init+0x33c>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d019      	beq.n	80070de <HAL_GPIO_Init+0x23a>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a4d      	ldr	r2, [pc, #308]	; (80071e4 <HAL_GPIO_Init+0x340>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d013      	beq.n	80070da <HAL_GPIO_Init+0x236>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4a4c      	ldr	r2, [pc, #304]	; (80071e8 <HAL_GPIO_Init+0x344>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d00d      	beq.n	80070d6 <HAL_GPIO_Init+0x232>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a4b      	ldr	r2, [pc, #300]	; (80071ec <HAL_GPIO_Init+0x348>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d007      	beq.n	80070d2 <HAL_GPIO_Init+0x22e>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a4a      	ldr	r2, [pc, #296]	; (80071f0 <HAL_GPIO_Init+0x34c>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d101      	bne.n	80070ce <HAL_GPIO_Init+0x22a>
 80070ca:	2306      	movs	r3, #6
 80070cc:	e00c      	b.n	80070e8 <HAL_GPIO_Init+0x244>
 80070ce:	2307      	movs	r3, #7
 80070d0:	e00a      	b.n	80070e8 <HAL_GPIO_Init+0x244>
 80070d2:	2305      	movs	r3, #5
 80070d4:	e008      	b.n	80070e8 <HAL_GPIO_Init+0x244>
 80070d6:	2304      	movs	r3, #4
 80070d8:	e006      	b.n	80070e8 <HAL_GPIO_Init+0x244>
 80070da:	2303      	movs	r3, #3
 80070dc:	e004      	b.n	80070e8 <HAL_GPIO_Init+0x244>
 80070de:	2302      	movs	r3, #2
 80070e0:	e002      	b.n	80070e8 <HAL_GPIO_Init+0x244>
 80070e2:	2301      	movs	r3, #1
 80070e4:	e000      	b.n	80070e8 <HAL_GPIO_Init+0x244>
 80070e6:	2300      	movs	r3, #0
 80070e8:	697a      	ldr	r2, [r7, #20]
 80070ea:	f002 0203 	and.w	r2, r2, #3
 80070ee:	0092      	lsls	r2, r2, #2
 80070f0:	4093      	lsls	r3, r2
 80070f2:	693a      	ldr	r2, [r7, #16]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80070f8:	4937      	ldr	r1, [pc, #220]	; (80071d8 <HAL_GPIO_Init+0x334>)
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	089b      	lsrs	r3, r3, #2
 80070fe:	3302      	adds	r3, #2
 8007100:	693a      	ldr	r2, [r7, #16]
 8007102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007106:	4b3b      	ldr	r3, [pc, #236]	; (80071f4 <HAL_GPIO_Init+0x350>)
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	43db      	mvns	r3, r3
 8007110:	693a      	ldr	r2, [r7, #16]
 8007112:	4013      	ands	r3, r2
 8007114:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800711e:	2b00      	cmp	r3, #0
 8007120:	d003      	beq.n	800712a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8007122:	693a      	ldr	r2, [r7, #16]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	4313      	orrs	r3, r2
 8007128:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800712a:	4a32      	ldr	r2, [pc, #200]	; (80071f4 <HAL_GPIO_Init+0x350>)
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007130:	4b30      	ldr	r3, [pc, #192]	; (80071f4 <HAL_GPIO_Init+0x350>)
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	43db      	mvns	r3, r3
 800713a:	693a      	ldr	r2, [r7, #16]
 800713c:	4013      	ands	r3, r2
 800713e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007148:	2b00      	cmp	r3, #0
 800714a:	d003      	beq.n	8007154 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800714c:	693a      	ldr	r2, [r7, #16]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	4313      	orrs	r3, r2
 8007152:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007154:	4a27      	ldr	r2, [pc, #156]	; (80071f4 <HAL_GPIO_Init+0x350>)
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800715a:	4b26      	ldr	r3, [pc, #152]	; (80071f4 <HAL_GPIO_Init+0x350>)
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	43db      	mvns	r3, r3
 8007164:	693a      	ldr	r2, [r7, #16]
 8007166:	4013      	ands	r3, r2
 8007168:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007172:	2b00      	cmp	r3, #0
 8007174:	d003      	beq.n	800717e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8007176:	693a      	ldr	r2, [r7, #16]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	4313      	orrs	r3, r2
 800717c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800717e:	4a1d      	ldr	r2, [pc, #116]	; (80071f4 <HAL_GPIO_Init+0x350>)
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8007184:	4b1b      	ldr	r3, [pc, #108]	; (80071f4 <HAL_GPIO_Init+0x350>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	43db      	mvns	r3, r3
 800718e:	693a      	ldr	r2, [r7, #16]
 8007190:	4013      	ands	r3, r2
 8007192:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800719c:	2b00      	cmp	r3, #0
 800719e:	d003      	beq.n	80071a8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80071a0:	693a      	ldr	r2, [r7, #16]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80071a8:	4a12      	ldr	r2, [pc, #72]	; (80071f4 <HAL_GPIO_Init+0x350>)
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	3301      	adds	r3, #1
 80071b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	fa22 f303 	lsr.w	r3, r2, r3
 80071be:	2b00      	cmp	r3, #0
 80071c0:	f47f ae78 	bne.w	8006eb4 <HAL_GPIO_Init+0x10>
  }
}
 80071c4:	bf00      	nop
 80071c6:	bf00      	nop
 80071c8:	371c      	adds	r7, #28
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	40021000 	.word	0x40021000
 80071d8:	40010000 	.word	0x40010000
 80071dc:	48000400 	.word	0x48000400
 80071e0:	48000800 	.word	0x48000800
 80071e4:	48000c00 	.word	0x48000c00
 80071e8:	48001000 	.word	0x48001000
 80071ec:	48001400 	.word	0x48001400
 80071f0:	48001800 	.word	0x48001800
 80071f4:	40010400 	.word	0x40010400

080071f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b085      	sub	sp, #20
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	460b      	mov	r3, r1
 8007202:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	691a      	ldr	r2, [r3, #16]
 8007208:	887b      	ldrh	r3, [r7, #2]
 800720a:	4013      	ands	r3, r2
 800720c:	2b00      	cmp	r3, #0
 800720e:	d002      	beq.n	8007216 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007210:	2301      	movs	r3, #1
 8007212:	73fb      	strb	r3, [r7, #15]
 8007214:	e001      	b.n	800721a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007216:	2300      	movs	r3, #0
 8007218:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800721a:	7bfb      	ldrb	r3, [r7, #15]
}
 800721c:	4618      	mov	r0, r3
 800721e:	3714      	adds	r7, #20
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	460b      	mov	r3, r1
 8007232:	807b      	strh	r3, [r7, #2]
 8007234:	4613      	mov	r3, r2
 8007236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007238:	787b      	ldrb	r3, [r7, #1]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d003      	beq.n	8007246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800723e:	887a      	ldrh	r2, [r7, #2]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007244:	e002      	b.n	800724c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007246:	887a      	ldrh	r2, [r7, #2]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800724c:	bf00      	nop
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007258:	b480      	push	{r7}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	460b      	mov	r3, r1
 8007262:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	695b      	ldr	r3, [r3, #20]
 8007268:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800726a:	887a      	ldrh	r2, [r7, #2]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	4013      	ands	r3, r2
 8007270:	041a      	lsls	r2, r3, #16
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	43d9      	mvns	r1, r3
 8007276:	887b      	ldrh	r3, [r7, #2]
 8007278:	400b      	ands	r3, r1
 800727a:	431a      	orrs	r2, r3
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	619a      	str	r2, [r3, #24]
}
 8007280:	bf00      	nop
 8007282:	3714      	adds	r7, #20
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
 8007292:	4603      	mov	r3, r0
 8007294:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007296:	4b08      	ldr	r3, [pc, #32]	; (80072b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007298:	695a      	ldr	r2, [r3, #20]
 800729a:	88fb      	ldrh	r3, [r7, #6]
 800729c:	4013      	ands	r3, r2
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d006      	beq.n	80072b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80072a2:	4a05      	ldr	r2, [pc, #20]	; (80072b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80072a4:	88fb      	ldrh	r3, [r7, #6]
 80072a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80072a8:	88fb      	ldrh	r3, [r7, #6]
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7fd fb28 	bl	8004900 <HAL_GPIO_EXTI_Callback>
  }
}
 80072b0:	bf00      	nop
 80072b2:	3708      	adds	r7, #8
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	40010400 	.word	0x40010400

080072bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d101      	bne.n	80072ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	e081      	b.n	80073d2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d106      	bne.n	80072e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f7fd ffa4 	bl	8005230 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2224      	movs	r2, #36	; 0x24
 80072ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f022 0201 	bic.w	r2, r2, #1
 80072fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	685a      	ldr	r2, [r3, #4]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800730c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	689a      	ldr	r2, [r3, #8]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800731c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	2b01      	cmp	r3, #1
 8007324:	d107      	bne.n	8007336 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	689a      	ldr	r2, [r3, #8]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007332:	609a      	str	r2, [r3, #8]
 8007334:	e006      	b.n	8007344 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	689a      	ldr	r2, [r3, #8]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007342:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	2b02      	cmp	r3, #2
 800734a:	d104      	bne.n	8007356 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007354:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	6812      	ldr	r2, [r2, #0]
 8007360:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007364:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007368:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	68da      	ldr	r2, [r3, #12]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007378:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	691a      	ldr	r2, [r3, #16]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	695b      	ldr	r3, [r3, #20]
 8007382:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	699b      	ldr	r3, [r3, #24]
 800738a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	430a      	orrs	r2, r1
 8007392:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	69d9      	ldr	r1, [r3, #28]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6a1a      	ldr	r2, [r3, #32]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	430a      	orrs	r2, r1
 80073a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f042 0201 	orr.w	r2, r2, #1
 80073b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2220      	movs	r2, #32
 80073be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3708      	adds	r7, #8
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
	...

080073dc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b088      	sub	sp, #32
 80073e0:	af02      	add	r7, sp, #8
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	607a      	str	r2, [r7, #4]
 80073e6:	461a      	mov	r2, r3
 80073e8:	460b      	mov	r3, r1
 80073ea:	817b      	strh	r3, [r7, #10]
 80073ec:	4613      	mov	r3, r2
 80073ee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	2b20      	cmp	r3, #32
 80073fa:	f040 80da 	bne.w	80075b2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007404:	2b01      	cmp	r3, #1
 8007406:	d101      	bne.n	800740c <HAL_I2C_Master_Transmit+0x30>
 8007408:	2302      	movs	r3, #2
 800740a:	e0d3      	b.n	80075b4 <HAL_I2C_Master_Transmit+0x1d8>
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007414:	f7ff f94e 	bl	80066b4 <HAL_GetTick>
 8007418:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	9300      	str	r3, [sp, #0]
 800741e:	2319      	movs	r3, #25
 8007420:	2201      	movs	r2, #1
 8007422:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f001 f8d1 	bl	80085ce <I2C_WaitOnFlagUntilTimeout>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d001      	beq.n	8007436 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e0be      	b.n	80075b4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2221      	movs	r2, #33	; 0x21
 800743a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2210      	movs	r2, #16
 8007442:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	893a      	ldrh	r2, [r7, #8]
 8007456:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2200      	movs	r2, #0
 800745c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007462:	b29b      	uxth	r3, r3
 8007464:	2bff      	cmp	r3, #255	; 0xff
 8007466:	d90e      	bls.n	8007486 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	22ff      	movs	r2, #255	; 0xff
 800746c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007472:	b2da      	uxtb	r2, r3
 8007474:	8979      	ldrh	r1, [r7, #10]
 8007476:	4b51      	ldr	r3, [pc, #324]	; (80075bc <HAL_I2C_Master_Transmit+0x1e0>)
 8007478:	9300      	str	r3, [sp, #0]
 800747a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800747e:	68f8      	ldr	r0, [r7, #12]
 8007480:	f001 fa4e 	bl	8008920 <I2C_TransferConfig>
 8007484:	e06c      	b.n	8007560 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800748a:	b29a      	uxth	r2, r3
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007494:	b2da      	uxtb	r2, r3
 8007496:	8979      	ldrh	r1, [r7, #10]
 8007498:	4b48      	ldr	r3, [pc, #288]	; (80075bc <HAL_I2C_Master_Transmit+0x1e0>)
 800749a:	9300      	str	r3, [sp, #0]
 800749c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	f001 fa3d 	bl	8008920 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80074a6:	e05b      	b.n	8007560 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074a8:	697a      	ldr	r2, [r7, #20]
 80074aa:	6a39      	ldr	r1, [r7, #32]
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	f001 f8ce 	bl	800864e <I2C_WaitOnTXISFlagUntilTimeout>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d001      	beq.n	80074bc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	e07b      	b.n	80075b4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c0:	781a      	ldrb	r2, [r3, #0]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074cc:	1c5a      	adds	r2, r3, #1
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	3b01      	subs	r3, #1
 80074da:	b29a      	uxth	r2, r3
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074e4:	3b01      	subs	r3, #1
 80074e6:	b29a      	uxth	r2, r3
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d034      	beq.n	8007560 <HAL_I2C_Master_Transmit+0x184>
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d130      	bne.n	8007560 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	9300      	str	r3, [sp, #0]
 8007502:	6a3b      	ldr	r3, [r7, #32]
 8007504:	2200      	movs	r2, #0
 8007506:	2180      	movs	r1, #128	; 0x80
 8007508:	68f8      	ldr	r0, [r7, #12]
 800750a:	f001 f860 	bl	80085ce <I2C_WaitOnFlagUntilTimeout>
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d001      	beq.n	8007518 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	e04d      	b.n	80075b4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800751c:	b29b      	uxth	r3, r3
 800751e:	2bff      	cmp	r3, #255	; 0xff
 8007520:	d90e      	bls.n	8007540 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	22ff      	movs	r2, #255	; 0xff
 8007526:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800752c:	b2da      	uxtb	r2, r3
 800752e:	8979      	ldrh	r1, [r7, #10]
 8007530:	2300      	movs	r3, #0
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007538:	68f8      	ldr	r0, [r7, #12]
 800753a:	f001 f9f1 	bl	8008920 <I2C_TransferConfig>
 800753e:	e00f      	b.n	8007560 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007544:	b29a      	uxth	r2, r3
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800754e:	b2da      	uxtb	r2, r3
 8007550:	8979      	ldrh	r1, [r7, #10]
 8007552:	2300      	movs	r3, #0
 8007554:	9300      	str	r3, [sp, #0]
 8007556:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800755a:	68f8      	ldr	r0, [r7, #12]
 800755c:	f001 f9e0 	bl	8008920 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007564:	b29b      	uxth	r3, r3
 8007566:	2b00      	cmp	r3, #0
 8007568:	d19e      	bne.n	80074a8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800756a:	697a      	ldr	r2, [r7, #20]
 800756c:	6a39      	ldr	r1, [r7, #32]
 800756e:	68f8      	ldr	r0, [r7, #12]
 8007570:	f001 f8ad 	bl	80086ce <I2C_WaitOnSTOPFlagUntilTimeout>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d001      	beq.n	800757e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e01a      	b.n	80075b4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	2220      	movs	r2, #32
 8007584:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	6859      	ldr	r1, [r3, #4]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	4b0b      	ldr	r3, [pc, #44]	; (80075c0 <HAL_I2C_Master_Transmit+0x1e4>)
 8007592:	400b      	ands	r3, r1
 8007594:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2220      	movs	r2, #32
 800759a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80075ae:	2300      	movs	r3, #0
 80075b0:	e000      	b.n	80075b4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80075b2:	2302      	movs	r3, #2
  }
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3718      	adds	r7, #24
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	80002000 	.word	0x80002000
 80075c0:	fe00e800 	.word	0xfe00e800

080075c4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b088      	sub	sp, #32
 80075c8:	af02      	add	r7, sp, #8
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	4608      	mov	r0, r1
 80075ce:	4611      	mov	r1, r2
 80075d0:	461a      	mov	r2, r3
 80075d2:	4603      	mov	r3, r0
 80075d4:	817b      	strh	r3, [r7, #10]
 80075d6:	460b      	mov	r3, r1
 80075d8:	813b      	strh	r3, [r7, #8]
 80075da:	4613      	mov	r3, r2
 80075dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	2b20      	cmp	r3, #32
 80075e8:	f040 80f9 	bne.w	80077de <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80075ec:	6a3b      	ldr	r3, [r7, #32]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d002      	beq.n	80075f8 <HAL_I2C_Mem_Write+0x34>
 80075f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d105      	bne.n	8007604 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075fe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	e0ed      	b.n	80077e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800760a:	2b01      	cmp	r3, #1
 800760c:	d101      	bne.n	8007612 <HAL_I2C_Mem_Write+0x4e>
 800760e:	2302      	movs	r3, #2
 8007610:	e0e6      	b.n	80077e0 <HAL_I2C_Mem_Write+0x21c>
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2201      	movs	r2, #1
 8007616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800761a:	f7ff f84b 	bl	80066b4 <HAL_GetTick>
 800761e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	9300      	str	r3, [sp, #0]
 8007624:	2319      	movs	r3, #25
 8007626:	2201      	movs	r2, #1
 8007628:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800762c:	68f8      	ldr	r0, [r7, #12]
 800762e:	f000 ffce 	bl	80085ce <I2C_WaitOnFlagUntilTimeout>
 8007632:	4603      	mov	r3, r0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d001      	beq.n	800763c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007638:	2301      	movs	r3, #1
 800763a:	e0d1      	b.n	80077e0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2221      	movs	r2, #33	; 0x21
 8007640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2240      	movs	r2, #64	; 0x40
 8007648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2200      	movs	r2, #0
 8007650:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6a3a      	ldr	r2, [r7, #32]
 8007656:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800765c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2200      	movs	r2, #0
 8007662:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007664:	88f8      	ldrh	r0, [r7, #6]
 8007666:	893a      	ldrh	r2, [r7, #8]
 8007668:	8979      	ldrh	r1, [r7, #10]
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	9301      	str	r3, [sp, #4]
 800766e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007670:	9300      	str	r3, [sp, #0]
 8007672:	4603      	mov	r3, r0
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f000 fb87 	bl	8007d88 <I2C_RequestMemoryWrite>
 800767a:	4603      	mov	r3, r0
 800767c:	2b00      	cmp	r3, #0
 800767e:	d005      	beq.n	800768c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2200      	movs	r2, #0
 8007684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	e0a9      	b.n	80077e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007690:	b29b      	uxth	r3, r3
 8007692:	2bff      	cmp	r3, #255	; 0xff
 8007694:	d90e      	bls.n	80076b4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	22ff      	movs	r2, #255	; 0xff
 800769a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076a0:	b2da      	uxtb	r2, r3
 80076a2:	8979      	ldrh	r1, [r7, #10]
 80076a4:	2300      	movs	r3, #0
 80076a6:	9300      	str	r3, [sp, #0]
 80076a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80076ac:	68f8      	ldr	r0, [r7, #12]
 80076ae:	f001 f937 	bl	8008920 <I2C_TransferConfig>
 80076b2:	e00f      	b.n	80076d4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076b8:	b29a      	uxth	r2, r3
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076c2:	b2da      	uxtb	r2, r3
 80076c4:	8979      	ldrh	r1, [r7, #10]
 80076c6:	2300      	movs	r3, #0
 80076c8:	9300      	str	r3, [sp, #0]
 80076ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f001 f926 	bl	8008920 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076d4:	697a      	ldr	r2, [r7, #20]
 80076d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f000 ffb8 	bl	800864e <I2C_WaitOnTXISFlagUntilTimeout>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d001      	beq.n	80076e8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	e07b      	b.n	80077e0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ec:	781a      	ldrb	r2, [r3, #0]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f8:	1c5a      	adds	r2, r3, #1
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007702:	b29b      	uxth	r3, r3
 8007704:	3b01      	subs	r3, #1
 8007706:	b29a      	uxth	r2, r3
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007710:	3b01      	subs	r3, #1
 8007712:	b29a      	uxth	r2, r3
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800771c:	b29b      	uxth	r3, r3
 800771e:	2b00      	cmp	r3, #0
 8007720:	d034      	beq.n	800778c <HAL_I2C_Mem_Write+0x1c8>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007726:	2b00      	cmp	r3, #0
 8007728:	d130      	bne.n	800778c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	9300      	str	r3, [sp, #0]
 800772e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007730:	2200      	movs	r2, #0
 8007732:	2180      	movs	r1, #128	; 0x80
 8007734:	68f8      	ldr	r0, [r7, #12]
 8007736:	f000 ff4a 	bl	80085ce <I2C_WaitOnFlagUntilTimeout>
 800773a:	4603      	mov	r3, r0
 800773c:	2b00      	cmp	r3, #0
 800773e:	d001      	beq.n	8007744 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e04d      	b.n	80077e0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007748:	b29b      	uxth	r3, r3
 800774a:	2bff      	cmp	r3, #255	; 0xff
 800774c:	d90e      	bls.n	800776c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	22ff      	movs	r2, #255	; 0xff
 8007752:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007758:	b2da      	uxtb	r2, r3
 800775a:	8979      	ldrh	r1, [r7, #10]
 800775c:	2300      	movs	r3, #0
 800775e:	9300      	str	r3, [sp, #0]
 8007760:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007764:	68f8      	ldr	r0, [r7, #12]
 8007766:	f001 f8db 	bl	8008920 <I2C_TransferConfig>
 800776a:	e00f      	b.n	800778c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007770:	b29a      	uxth	r2, r3
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800777a:	b2da      	uxtb	r2, r3
 800777c:	8979      	ldrh	r1, [r7, #10]
 800777e:	2300      	movs	r3, #0
 8007780:	9300      	str	r3, [sp, #0]
 8007782:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f001 f8ca 	bl	8008920 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007790:	b29b      	uxth	r3, r3
 8007792:	2b00      	cmp	r3, #0
 8007794:	d19e      	bne.n	80076d4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007796:	697a      	ldr	r2, [r7, #20]
 8007798:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	f000 ff97 	bl	80086ce <I2C_WaitOnSTOPFlagUntilTimeout>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d001      	beq.n	80077aa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e01a      	b.n	80077e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2220      	movs	r2, #32
 80077b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	6859      	ldr	r1, [r3, #4]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	4b0a      	ldr	r3, [pc, #40]	; (80077e8 <HAL_I2C_Mem_Write+0x224>)
 80077be:	400b      	ands	r3, r1
 80077c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2220      	movs	r2, #32
 80077c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80077da:	2300      	movs	r3, #0
 80077dc:	e000      	b.n	80077e0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80077de:	2302      	movs	r3, #2
  }
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3718      	adds	r7, #24
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	fe00e800 	.word	0xfe00e800

080077ec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b088      	sub	sp, #32
 80077f0:	af02      	add	r7, sp, #8
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	4608      	mov	r0, r1
 80077f6:	4611      	mov	r1, r2
 80077f8:	461a      	mov	r2, r3
 80077fa:	4603      	mov	r3, r0
 80077fc:	817b      	strh	r3, [r7, #10]
 80077fe:	460b      	mov	r3, r1
 8007800:	813b      	strh	r3, [r7, #8]
 8007802:	4613      	mov	r3, r2
 8007804:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800780c:	b2db      	uxtb	r3, r3
 800780e:	2b20      	cmp	r3, #32
 8007810:	f040 80fd 	bne.w	8007a0e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007814:	6a3b      	ldr	r3, [r7, #32]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d002      	beq.n	8007820 <HAL_I2C_Mem_Read+0x34>
 800781a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800781c:	2b00      	cmp	r3, #0
 800781e:	d105      	bne.n	800782c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007826:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	e0f1      	b.n	8007a10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007832:	2b01      	cmp	r3, #1
 8007834:	d101      	bne.n	800783a <HAL_I2C_Mem_Read+0x4e>
 8007836:	2302      	movs	r3, #2
 8007838:	e0ea      	b.n	8007a10 <HAL_I2C_Mem_Read+0x224>
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2201      	movs	r2, #1
 800783e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007842:	f7fe ff37 	bl	80066b4 <HAL_GetTick>
 8007846:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	9300      	str	r3, [sp, #0]
 800784c:	2319      	movs	r3, #25
 800784e:	2201      	movs	r2, #1
 8007850:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007854:	68f8      	ldr	r0, [r7, #12]
 8007856:	f000 feba 	bl	80085ce <I2C_WaitOnFlagUntilTimeout>
 800785a:	4603      	mov	r3, r0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d001      	beq.n	8007864 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007860:	2301      	movs	r3, #1
 8007862:	e0d5      	b.n	8007a10 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2222      	movs	r2, #34	; 0x22
 8007868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2240      	movs	r2, #64	; 0x40
 8007870:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2200      	movs	r2, #0
 8007878:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	6a3a      	ldr	r2, [r7, #32]
 800787e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007884:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2200      	movs	r2, #0
 800788a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800788c:	88f8      	ldrh	r0, [r7, #6]
 800788e:	893a      	ldrh	r2, [r7, #8]
 8007890:	8979      	ldrh	r1, [r7, #10]
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	9301      	str	r3, [sp, #4]
 8007896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007898:	9300      	str	r3, [sp, #0]
 800789a:	4603      	mov	r3, r0
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	f000 fac7 	bl	8007e30 <I2C_RequestMemoryRead>
 80078a2:	4603      	mov	r3, r0
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d005      	beq.n	80078b4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	e0ad      	b.n	8007a10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	2bff      	cmp	r3, #255	; 0xff
 80078bc:	d90e      	bls.n	80078dc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	22ff      	movs	r2, #255	; 0xff
 80078c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078c8:	b2da      	uxtb	r2, r3
 80078ca:	8979      	ldrh	r1, [r7, #10]
 80078cc:	4b52      	ldr	r3, [pc, #328]	; (8007a18 <HAL_I2C_Mem_Read+0x22c>)
 80078ce:	9300      	str	r3, [sp, #0]
 80078d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80078d4:	68f8      	ldr	r0, [r7, #12]
 80078d6:	f001 f823 	bl	8008920 <I2C_TransferConfig>
 80078da:	e00f      	b.n	80078fc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078ea:	b2da      	uxtb	r2, r3
 80078ec:	8979      	ldrh	r1, [r7, #10]
 80078ee:	4b4a      	ldr	r3, [pc, #296]	; (8007a18 <HAL_I2C_Mem_Read+0x22c>)
 80078f0:	9300      	str	r3, [sp, #0]
 80078f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80078f6:	68f8      	ldr	r0, [r7, #12]
 80078f8:	f001 f812 	bl	8008920 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	9300      	str	r3, [sp, #0]
 8007900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007902:	2200      	movs	r2, #0
 8007904:	2104      	movs	r1, #4
 8007906:	68f8      	ldr	r0, [r7, #12]
 8007908:	f000 fe61 	bl	80085ce <I2C_WaitOnFlagUntilTimeout>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d001      	beq.n	8007916 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e07c      	b.n	8007a10 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007920:	b2d2      	uxtb	r2, r2
 8007922:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007928:	1c5a      	adds	r2, r3, #1
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007932:	3b01      	subs	r3, #1
 8007934:	b29a      	uxth	r2, r3
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800793e:	b29b      	uxth	r3, r3
 8007940:	3b01      	subs	r3, #1
 8007942:	b29a      	uxth	r2, r3
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800794c:	b29b      	uxth	r3, r3
 800794e:	2b00      	cmp	r3, #0
 8007950:	d034      	beq.n	80079bc <HAL_I2C_Mem_Read+0x1d0>
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007956:	2b00      	cmp	r3, #0
 8007958:	d130      	bne.n	80079bc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	9300      	str	r3, [sp, #0]
 800795e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007960:	2200      	movs	r2, #0
 8007962:	2180      	movs	r1, #128	; 0x80
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f000 fe32 	bl	80085ce <I2C_WaitOnFlagUntilTimeout>
 800796a:	4603      	mov	r3, r0
 800796c:	2b00      	cmp	r3, #0
 800796e:	d001      	beq.n	8007974 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	e04d      	b.n	8007a10 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007978:	b29b      	uxth	r3, r3
 800797a:	2bff      	cmp	r3, #255	; 0xff
 800797c:	d90e      	bls.n	800799c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	22ff      	movs	r2, #255	; 0xff
 8007982:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007988:	b2da      	uxtb	r2, r3
 800798a:	8979      	ldrh	r1, [r7, #10]
 800798c:	2300      	movs	r3, #0
 800798e:	9300      	str	r3, [sp, #0]
 8007990:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	f000 ffc3 	bl	8008920 <I2C_TransferConfig>
 800799a:	e00f      	b.n	80079bc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079a0:	b29a      	uxth	r2, r3
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079aa:	b2da      	uxtb	r2, r3
 80079ac:	8979      	ldrh	r1, [r7, #10]
 80079ae:	2300      	movs	r3, #0
 80079b0:	9300      	str	r3, [sp, #0]
 80079b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80079b6:	68f8      	ldr	r0, [r7, #12]
 80079b8:	f000 ffb2 	bl	8008920 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d19a      	bne.n	80078fc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079c6:	697a      	ldr	r2, [r7, #20]
 80079c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079ca:	68f8      	ldr	r0, [r7, #12]
 80079cc:	f000 fe7f 	bl	80086ce <I2C_WaitOnSTOPFlagUntilTimeout>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d001      	beq.n	80079da <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	e01a      	b.n	8007a10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2220      	movs	r2, #32
 80079e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	6859      	ldr	r1, [r3, #4]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	4b0b      	ldr	r3, [pc, #44]	; (8007a1c <HAL_I2C_Mem_Read+0x230>)
 80079ee:	400b      	ands	r3, r1
 80079f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2220      	movs	r2, #32
 80079f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2200      	movs	r2, #0
 80079fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2200      	movs	r2, #0
 8007a06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	e000      	b.n	8007a10 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007a0e:	2302      	movs	r3, #2
  }
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3718      	adds	r7, #24
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}
 8007a18:	80002400 	.word	0x80002400
 8007a1c:	fe00e800 	.word	0xfe00e800

08007a20 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	699b      	ldr	r3, [r3, #24]
 8007a2e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d005      	beq.n	8007a4c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a44:	68ba      	ldr	r2, [r7, #8]
 8007a46:	68f9      	ldr	r1, [r7, #12]
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	4798      	blx	r3
  }
}
 8007a4c:	bf00      	nop
 8007a4e:	3710      	adds	r7, #16
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b086      	sub	sp, #24
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	699b      	ldr	r3, [r3, #24]
 8007a62:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	0a1b      	lsrs	r3, r3, #8
 8007a70:	f003 0301 	and.w	r3, r3, #1
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d010      	beq.n	8007a9a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	09db      	lsrs	r3, r3, #7
 8007a7c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00a      	beq.n	8007a9a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a88:	f043 0201 	orr.w	r2, r3, #1
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a98:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	0a9b      	lsrs	r3, r3, #10
 8007a9e:	f003 0301 	and.w	r3, r3, #1
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d010      	beq.n	8007ac8 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	09db      	lsrs	r3, r3, #7
 8007aaa:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00a      	beq.n	8007ac8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ab6:	f043 0208 	orr.w	r2, r3, #8
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007ac6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	0a5b      	lsrs	r3, r3, #9
 8007acc:	f003 0301 	and.w	r3, r3, #1
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d010      	beq.n	8007af6 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	09db      	lsrs	r3, r3, #7
 8007ad8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00a      	beq.n	8007af6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ae4:	f043 0202 	orr.w	r2, r3, #2
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007af4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007afa:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f003 030b 	and.w	r3, r3, #11
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d003      	beq.n	8007b0e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8007b06:	68f9      	ldr	r1, [r7, #12]
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 fc27 	bl	800835c <I2C_ITError>
  }
}
 8007b0e:	bf00      	nop
 8007b10:	3718      	adds	r7, #24
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}

08007b16 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007b16:	b480      	push	{r7}
 8007b18:	b083      	sub	sp, #12
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007b1e:	bf00      	nop
 8007b20:	370c      	adds	r7, #12
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr

08007b2a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	b083      	sub	sp, #12
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007b32:	bf00      	nop
 8007b34:	370c      	adds	r7, #12
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr

08007b3e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007b3e:	b480      	push	{r7}
 8007b40:	b083      	sub	sp, #12
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
 8007b46:	460b      	mov	r3, r1
 8007b48:	70fb      	strb	r3, [r7, #3]
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007b4e:	bf00      	nop
 8007b50:	370c      	adds	r7, #12
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr

08007b5a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007b5a:	b480      	push	{r7}
 8007b5c:	b083      	sub	sp, #12
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8007b62:	bf00      	nop
 8007b64:	370c      	adds	r7, #12
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr

08007b6e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007b6e:	b480      	push	{r7}
 8007b70:	b083      	sub	sp, #12
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007b76:	bf00      	nop
 8007b78:	370c      	adds	r7, #12
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr

08007b82 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b086      	sub	sp, #24
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	60f8      	str	r0, [r7, #12]
 8007b8a:	60b9      	str	r1, [r7, #8]
 8007b8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b92:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d101      	bne.n	8007ba6 <I2C_Slave_ISR_IT+0x24>
 8007ba2:	2302      	movs	r3, #2
 8007ba4:	e0ec      	b.n	8007d80 <I2C_Slave_ISR_IT+0x1fe>
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2201      	movs	r2, #1
 8007baa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	095b      	lsrs	r3, r3, #5
 8007bb2:	f003 0301 	and.w	r3, r3, #1
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d009      	beq.n	8007bce <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	095b      	lsrs	r3, r3, #5
 8007bbe:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d003      	beq.n	8007bce <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007bc6:	6939      	ldr	r1, [r7, #16]
 8007bc8:	68f8      	ldr	r0, [r7, #12]
 8007bca:	f000 fa67 	bl	800809c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	091b      	lsrs	r3, r3, #4
 8007bd2:	f003 0301 	and.w	r3, r3, #1
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d04d      	beq.n	8007c76 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	091b      	lsrs	r3, r3, #4
 8007bde:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d047      	beq.n	8007c76 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d128      	bne.n	8007c42 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	2b28      	cmp	r3, #40	; 0x28
 8007bfa:	d108      	bne.n	8007c0e <I2C_Slave_ISR_IT+0x8c>
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c02:	d104      	bne.n	8007c0e <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007c04:	6939      	ldr	r1, [r7, #16]
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f000 fb52 	bl	80082b0 <I2C_ITListenCplt>
 8007c0c:	e032      	b.n	8007c74 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	2b29      	cmp	r3, #41	; 0x29
 8007c18:	d10e      	bne.n	8007c38 <I2C_Slave_ISR_IT+0xb6>
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007c20:	d00a      	beq.n	8007c38 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	2210      	movs	r2, #16
 8007c28:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007c2a:	68f8      	ldr	r0, [r7, #12]
 8007c2c:	f000 fc8d 	bl	800854a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f000 f9d5 	bl	8007fe0 <I2C_ITSlaveSeqCplt>
 8007c36:	e01d      	b.n	8007c74 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	2210      	movs	r2, #16
 8007c3e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007c40:	e096      	b.n	8007d70 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2210      	movs	r2, #16
 8007c48:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c4e:	f043 0204 	orr.w	r2, r3, #4
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d004      	beq.n	8007c66 <I2C_Slave_ISR_IT+0xe4>
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c62:	f040 8085 	bne.w	8007d70 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	68f8      	ldr	r0, [r7, #12]
 8007c6e:	f000 fb75 	bl	800835c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007c72:	e07d      	b.n	8007d70 <I2C_Slave_ISR_IT+0x1ee>
 8007c74:	e07c      	b.n	8007d70 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	089b      	lsrs	r3, r3, #2
 8007c7a:	f003 0301 	and.w	r3, r3, #1
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d030      	beq.n	8007ce4 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	089b      	lsrs	r3, r3, #2
 8007c86:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d02a      	beq.n	8007ce4 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d018      	beq.n	8007cca <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca2:	b2d2      	uxtb	r2, r2
 8007ca4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007caa:	1c5a      	adds	r2, r3, #1
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cb4:	3b01      	subs	r3, #1
 8007cb6:	b29a      	uxth	r2, r3
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	3b01      	subs	r3, #1
 8007cc4:	b29a      	uxth	r2, r3
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d14f      	bne.n	8007d74 <I2C_Slave_ISR_IT+0x1f2>
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007cda:	d04b      	beq.n	8007d74 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007cdc:	68f8      	ldr	r0, [r7, #12]
 8007cde:	f000 f97f 	bl	8007fe0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007ce2:	e047      	b.n	8007d74 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	08db      	lsrs	r3, r3, #3
 8007ce8:	f003 0301 	and.w	r3, r3, #1
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00a      	beq.n	8007d06 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	08db      	lsrs	r3, r3, #3
 8007cf4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d004      	beq.n	8007d06 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007cfc:	6939      	ldr	r1, [r7, #16]
 8007cfe:	68f8      	ldr	r0, [r7, #12]
 8007d00:	f000 f8ea 	bl	8007ed8 <I2C_ITAddrCplt>
 8007d04:	e037      	b.n	8007d76 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	085b      	lsrs	r3, r3, #1
 8007d0a:	f003 0301 	and.w	r3, r3, #1
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d031      	beq.n	8007d76 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	085b      	lsrs	r3, r3, #1
 8007d16:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d02b      	beq.n	8007d76 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d018      	beq.n	8007d5a <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2c:	781a      	ldrb	r2, [r3, #0]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d38:	1c5a      	adds	r2, r3, #1
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	3b01      	subs	r3, #1
 8007d46:	b29a      	uxth	r2, r3
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d50:	3b01      	subs	r3, #1
 8007d52:	b29a      	uxth	r2, r3
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	851a      	strh	r2, [r3, #40]	; 0x28
 8007d58:	e00d      	b.n	8007d76 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007d60:	d002      	beq.n	8007d68 <I2C_Slave_ISR_IT+0x1e6>
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d106      	bne.n	8007d76 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007d68:	68f8      	ldr	r0, [r7, #12]
 8007d6a:	f000 f939 	bl	8007fe0 <I2C_ITSlaveSeqCplt>
 8007d6e:	e002      	b.n	8007d76 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8007d70:	bf00      	nop
 8007d72:	e000      	b.n	8007d76 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8007d74:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007d7e:	2300      	movs	r3, #0
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3718      	adds	r7, #24
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b086      	sub	sp, #24
 8007d8c:	af02      	add	r7, sp, #8
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	4608      	mov	r0, r1
 8007d92:	4611      	mov	r1, r2
 8007d94:	461a      	mov	r2, r3
 8007d96:	4603      	mov	r3, r0
 8007d98:	817b      	strh	r3, [r7, #10]
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	813b      	strh	r3, [r7, #8]
 8007d9e:	4613      	mov	r3, r2
 8007da0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007da2:	88fb      	ldrh	r3, [r7, #6]
 8007da4:	b2da      	uxtb	r2, r3
 8007da6:	8979      	ldrh	r1, [r7, #10]
 8007da8:	4b20      	ldr	r3, [pc, #128]	; (8007e2c <I2C_RequestMemoryWrite+0xa4>)
 8007daa:	9300      	str	r3, [sp, #0]
 8007dac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007db0:	68f8      	ldr	r0, [r7, #12]
 8007db2:	f000 fdb5 	bl	8008920 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007db6:	69fa      	ldr	r2, [r7, #28]
 8007db8:	69b9      	ldr	r1, [r7, #24]
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	f000 fc47 	bl	800864e <I2C_WaitOnTXISFlagUntilTimeout>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d001      	beq.n	8007dca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e02c      	b.n	8007e24 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007dca:	88fb      	ldrh	r3, [r7, #6]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d105      	bne.n	8007ddc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007dd0:	893b      	ldrh	r3, [r7, #8]
 8007dd2:	b2da      	uxtb	r2, r3
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	629a      	str	r2, [r3, #40]	; 0x28
 8007dda:	e015      	b.n	8007e08 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007ddc:	893b      	ldrh	r3, [r7, #8]
 8007dde:	0a1b      	lsrs	r3, r3, #8
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	b2da      	uxtb	r2, r3
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007dea:	69fa      	ldr	r2, [r7, #28]
 8007dec:	69b9      	ldr	r1, [r7, #24]
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	f000 fc2d 	bl	800864e <I2C_WaitOnTXISFlagUntilTimeout>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d001      	beq.n	8007dfe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e012      	b.n	8007e24 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007dfe:	893b      	ldrh	r3, [r7, #8]
 8007e00:	b2da      	uxtb	r2, r3
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	9300      	str	r3, [sp, #0]
 8007e0c:	69bb      	ldr	r3, [r7, #24]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	2180      	movs	r1, #128	; 0x80
 8007e12:	68f8      	ldr	r0, [r7, #12]
 8007e14:	f000 fbdb 	bl	80085ce <I2C_WaitOnFlagUntilTimeout>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d001      	beq.n	8007e22 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e000      	b.n	8007e24 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3710      	adds	r7, #16
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	80002000 	.word	0x80002000

08007e30 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b086      	sub	sp, #24
 8007e34:	af02      	add	r7, sp, #8
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	4608      	mov	r0, r1
 8007e3a:	4611      	mov	r1, r2
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	4603      	mov	r3, r0
 8007e40:	817b      	strh	r3, [r7, #10]
 8007e42:	460b      	mov	r3, r1
 8007e44:	813b      	strh	r3, [r7, #8]
 8007e46:	4613      	mov	r3, r2
 8007e48:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007e4a:	88fb      	ldrh	r3, [r7, #6]
 8007e4c:	b2da      	uxtb	r2, r3
 8007e4e:	8979      	ldrh	r1, [r7, #10]
 8007e50:	4b20      	ldr	r3, [pc, #128]	; (8007ed4 <I2C_RequestMemoryRead+0xa4>)
 8007e52:	9300      	str	r3, [sp, #0]
 8007e54:	2300      	movs	r3, #0
 8007e56:	68f8      	ldr	r0, [r7, #12]
 8007e58:	f000 fd62 	bl	8008920 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e5c:	69fa      	ldr	r2, [r7, #28]
 8007e5e:	69b9      	ldr	r1, [r7, #24]
 8007e60:	68f8      	ldr	r0, [r7, #12]
 8007e62:	f000 fbf4 	bl	800864e <I2C_WaitOnTXISFlagUntilTimeout>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d001      	beq.n	8007e70 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e02c      	b.n	8007eca <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007e70:	88fb      	ldrh	r3, [r7, #6]
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d105      	bne.n	8007e82 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007e76:	893b      	ldrh	r3, [r7, #8]
 8007e78:	b2da      	uxtb	r2, r3
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	629a      	str	r2, [r3, #40]	; 0x28
 8007e80:	e015      	b.n	8007eae <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007e82:	893b      	ldrh	r3, [r7, #8]
 8007e84:	0a1b      	lsrs	r3, r3, #8
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	b2da      	uxtb	r2, r3
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e90:	69fa      	ldr	r2, [r7, #28]
 8007e92:	69b9      	ldr	r1, [r7, #24]
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	f000 fbda 	bl	800864e <I2C_WaitOnTXISFlagUntilTimeout>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d001      	beq.n	8007ea4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e012      	b.n	8007eca <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007ea4:	893b      	ldrh	r3, [r7, #8]
 8007ea6:	b2da      	uxtb	r2, r3
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	9300      	str	r3, [sp, #0]
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	2140      	movs	r1, #64	; 0x40
 8007eb8:	68f8      	ldr	r0, [r7, #12]
 8007eba:	f000 fb88 	bl	80085ce <I2C_WaitOnFlagUntilTimeout>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d001      	beq.n	8007ec8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e000      	b.n	8007eca <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3710      	adds	r7, #16
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	80002000 	.word	0x80002000

08007ed8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007eee:	2b28      	cmp	r3, #40	; 0x28
 8007ef0:	d16a      	bne.n	8007fc8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	699b      	ldr	r3, [r3, #24]
 8007ef8:	0c1b      	lsrs	r3, r3, #16
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	f003 0301 	and.w	r3, r3, #1
 8007f00:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	699b      	ldr	r3, [r3, #24]
 8007f08:	0c1b      	lsrs	r3, r3, #16
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007f10:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f1e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007f2c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	68db      	ldr	r3, [r3, #12]
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	d138      	bne.n	8007fa8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8007f36:	897b      	ldrh	r3, [r7, #10]
 8007f38:	09db      	lsrs	r3, r3, #7
 8007f3a:	b29a      	uxth	r2, r3
 8007f3c:	89bb      	ldrh	r3, [r7, #12]
 8007f3e:	4053      	eors	r3, r2
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	f003 0306 	and.w	r3, r3, #6
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d11c      	bne.n	8007f84 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8007f4a:	897b      	ldrh	r3, [r7, #10]
 8007f4c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f52:	1c5a      	adds	r2, r3, #1
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	d13b      	bne.n	8007fd8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2208      	movs	r2, #8
 8007f6c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007f76:	89ba      	ldrh	r2, [r7, #12]
 8007f78:	7bfb      	ldrb	r3, [r7, #15]
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f7ff fdde 	bl	8007b3e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007f82:	e029      	b.n	8007fd8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8007f84:	893b      	ldrh	r3, [r7, #8]
 8007f86:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007f88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 fcf9 	bl	8008984 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007f9a:	89ba      	ldrh	r2, [r7, #12]
 8007f9c:	7bfb      	ldrb	r3, [r7, #15]
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f7ff fdcc 	bl	8007b3e <HAL_I2C_AddrCallback>
}
 8007fa6:	e017      	b.n	8007fd8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007fa8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 fce9 	bl	8008984 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007fba:	89ba      	ldrh	r2, [r7, #12]
 8007fbc:	7bfb      	ldrb	r3, [r7, #15]
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f7ff fdbc 	bl	8007b3e <HAL_I2C_AddrCallback>
}
 8007fc6:	e007      	b.n	8007fd8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2208      	movs	r2, #8
 8007fce:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8007fd8:	bf00      	nop
 8007fda:	3710      	adds	r7, #16
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	0b9b      	lsrs	r3, r3, #14
 8007ffc:	f003 0301 	and.w	r3, r3, #1
 8008000:	2b00      	cmp	r3, #0
 8008002:	d008      	beq.n	8008016 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008012:	601a      	str	r2, [r3, #0]
 8008014:	e00d      	b.n	8008032 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	0bdb      	lsrs	r3, r3, #15
 800801a:	f003 0301 	and.w	r3, r3, #1
 800801e:	2b00      	cmp	r3, #0
 8008020:	d007      	beq.n	8008032 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008030:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008038:	b2db      	uxtb	r3, r3
 800803a:	2b29      	cmp	r3, #41	; 0x29
 800803c:	d112      	bne.n	8008064 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2228      	movs	r2, #40	; 0x28
 8008042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2221      	movs	r2, #33	; 0x21
 800804a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800804c:	2101      	movs	r1, #1
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 fc98 	bl	8008984 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f7ff fd5a 	bl	8007b16 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008062:	e017      	b.n	8008094 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800806a:	b2db      	uxtb	r3, r3
 800806c:	2b2a      	cmp	r3, #42	; 0x2a
 800806e:	d111      	bne.n	8008094 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2228      	movs	r2, #40	; 0x28
 8008074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2222      	movs	r2, #34	; 0x22
 800807c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800807e:	2102      	movs	r1, #2
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 fc7f 	bl	8008984 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2200      	movs	r2, #0
 800808a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f7ff fd4b 	bl	8007b2a <HAL_I2C_SlaveRxCpltCallback>
}
 8008094:	bf00      	nop
 8008096:	3710      	adds	r7, #16
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b086      	sub	sp, #24
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080b8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	2220      	movs	r2, #32
 80080c0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80080c2:	7bfb      	ldrb	r3, [r7, #15]
 80080c4:	2b21      	cmp	r3, #33	; 0x21
 80080c6:	d002      	beq.n	80080ce <I2C_ITSlaveCplt+0x32>
 80080c8:	7bfb      	ldrb	r3, [r7, #15]
 80080ca:	2b29      	cmp	r3, #41	; 0x29
 80080cc:	d108      	bne.n	80080e0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80080ce:	f248 0101 	movw	r1, #32769	; 0x8001
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 fc56 	bl	8008984 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2221      	movs	r2, #33	; 0x21
 80080dc:	631a      	str	r2, [r3, #48]	; 0x30
 80080de:	e00d      	b.n	80080fc <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80080e0:	7bfb      	ldrb	r3, [r7, #15]
 80080e2:	2b22      	cmp	r3, #34	; 0x22
 80080e4:	d002      	beq.n	80080ec <I2C_ITSlaveCplt+0x50>
 80080e6:	7bfb      	ldrb	r3, [r7, #15]
 80080e8:	2b2a      	cmp	r3, #42	; 0x2a
 80080ea:	d107      	bne.n	80080fc <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80080ec:	f248 0102 	movw	r1, #32770	; 0x8002
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 fc47 	bl	8008984 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2222      	movs	r2, #34	; 0x22
 80080fa:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	685a      	ldr	r2, [r3, #4]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800810a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	6859      	ldr	r1, [r3, #4]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	4b64      	ldr	r3, [pc, #400]	; (80082a8 <I2C_ITSlaveCplt+0x20c>)
 8008118:	400b      	ands	r3, r1
 800811a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 fa14 	bl	800854a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	0b9b      	lsrs	r3, r3, #14
 8008126:	f003 0301 	and.w	r3, r3, #1
 800812a:	2b00      	cmp	r3, #0
 800812c:	d013      	beq.n	8008156 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800813c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008142:	2b00      	cmp	r3, #0
 8008144:	d020      	beq.n	8008188 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	b29a      	uxth	r2, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008154:	e018      	b.n	8008188 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	0bdb      	lsrs	r3, r3, #15
 800815a:	f003 0301 	and.w	r3, r3, #1
 800815e:	2b00      	cmp	r3, #0
 8008160:	d012      	beq.n	8008188 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008170:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008176:	2b00      	cmp	r3, #0
 8008178:	d006      	beq.n	8008188 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	b29a      	uxth	r2, r3
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	089b      	lsrs	r3, r3, #2
 800818c:	f003 0301 	and.w	r3, r3, #1
 8008190:	2b00      	cmp	r3, #0
 8008192:	d020      	beq.n	80081d6 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	f023 0304 	bic.w	r3, r3, #4
 800819a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a6:	b2d2      	uxtb	r2, r2
 80081a8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ae:	1c5a      	adds	r2, r3, #1
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d00c      	beq.n	80081d6 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081c0:	3b01      	subs	r3, #1
 80081c2:	b29a      	uxth	r2, r3
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	3b01      	subs	r3, #1
 80081d0:	b29a      	uxth	r2, r3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081da:	b29b      	uxth	r3, r3
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d005      	beq.n	80081ec <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081e4:	f043 0204 	orr.w	r2, r3, #4
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d010      	beq.n	8008224 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008206:	4619      	mov	r1, r3
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 f8a7 	bl	800835c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008214:	b2db      	uxtb	r3, r3
 8008216:	2b28      	cmp	r3, #40	; 0x28
 8008218:	d141      	bne.n	800829e <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800821a:	6979      	ldr	r1, [r7, #20]
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 f847 	bl	80082b0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008222:	e03c      	b.n	800829e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008228:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800822c:	d014      	beq.n	8008258 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f7ff fed6 	bl	8007fe0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	4a1d      	ldr	r2, [pc, #116]	; (80082ac <I2C_ITSlaveCplt+0x210>)
 8008238:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2220      	movs	r2, #32
 800823e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f7ff fc82 	bl	8007b5a <HAL_I2C_ListenCpltCallback>
}
 8008256:	e022      	b.n	800829e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800825e:	b2db      	uxtb	r3, r3
 8008260:	2b22      	cmp	r3, #34	; 0x22
 8008262:	d10e      	bne.n	8008282 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2220      	movs	r2, #32
 8008268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2200      	movs	r2, #0
 8008270:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f7ff fc55 	bl	8007b2a <HAL_I2C_SlaveRxCpltCallback>
}
 8008280:	e00d      	b.n	800829e <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2220      	movs	r2, #32
 8008286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f7ff fc3c 	bl	8007b16 <HAL_I2C_SlaveTxCpltCallback>
}
 800829e:	bf00      	nop
 80082a0:	3718      	adds	r7, #24
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop
 80082a8:	fe00e800 	.word	0xfe00e800
 80082ac:	ffff0000 	.word	0xffff0000

080082b0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4a26      	ldr	r2, [pc, #152]	; (8008358 <I2C_ITListenCplt+0xa8>)
 80082be:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2220      	movs	r2, #32
 80082ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	089b      	lsrs	r3, r3, #2
 80082e0:	f003 0301 	and.w	r3, r3, #1
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d022      	beq.n	800832e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f2:	b2d2      	uxtb	r2, r2
 80082f4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082fa:	1c5a      	adds	r2, r3, #1
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008304:	2b00      	cmp	r3, #0
 8008306:	d012      	beq.n	800832e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800830c:	3b01      	subs	r3, #1
 800830e:	b29a      	uxth	r2, r3
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008318:	b29b      	uxth	r3, r3
 800831a:	3b01      	subs	r3, #1
 800831c:	b29a      	uxth	r2, r3
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008326:	f043 0204 	orr.w	r2, r3, #4
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800832e:	f248 0103 	movw	r1, #32771	; 0x8003
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 fb26 	bl	8008984 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	2210      	movs	r2, #16
 800833e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f7ff fc06 	bl	8007b5a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800834e:	bf00      	nop
 8008350:	3708      	adds	r7, #8
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	ffff0000 	.word	0xffff0000

0800835c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800836c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2200      	movs	r2, #0
 8008372:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	4a5d      	ldr	r2, [pc, #372]	; (80084f0 <I2C_ITError+0x194>)
 800837a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	431a      	orrs	r2, r3
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800838e:	7bfb      	ldrb	r3, [r7, #15]
 8008390:	2b28      	cmp	r3, #40	; 0x28
 8008392:	d005      	beq.n	80083a0 <I2C_ITError+0x44>
 8008394:	7bfb      	ldrb	r3, [r7, #15]
 8008396:	2b29      	cmp	r3, #41	; 0x29
 8008398:	d002      	beq.n	80083a0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800839a:	7bfb      	ldrb	r3, [r7, #15]
 800839c:	2b2a      	cmp	r3, #42	; 0x2a
 800839e:	d10b      	bne.n	80083b8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80083a0:	2103      	movs	r1, #3
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 faee 	bl	8008984 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2228      	movs	r2, #40	; 0x28
 80083ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a50      	ldr	r2, [pc, #320]	; (80084f4 <I2C_ITError+0x198>)
 80083b4:	635a      	str	r2, [r3, #52]	; 0x34
 80083b6:	e011      	b.n	80083dc <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80083b8:	f248 0103 	movw	r1, #32771	; 0x8003
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 fae1 	bl	8008984 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	2b60      	cmp	r3, #96	; 0x60
 80083cc:	d003      	beq.n	80083d6 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2220      	movs	r2, #32
 80083d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e0:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d039      	beq.n	800845e <I2C_ITError+0x102>
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	2b11      	cmp	r3, #17
 80083ee:	d002      	beq.n	80083f6 <I2C_ITError+0x9a>
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	2b21      	cmp	r3, #33	; 0x21
 80083f4:	d133      	bne.n	800845e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008400:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008404:	d107      	bne.n	8008416 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008414:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800841a:	4618      	mov	r0, r3
 800841c:	f7fe fd04 	bl	8006e28 <HAL_DMA_GetState>
 8008420:	4603      	mov	r3, r0
 8008422:	2b01      	cmp	r3, #1
 8008424:	d017      	beq.n	8008456 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800842a:	4a33      	ldr	r2, [pc, #204]	; (80084f8 <I2C_ITError+0x19c>)
 800842c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2200      	movs	r2, #0
 8008432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800843a:	4618      	mov	r0, r3
 800843c:	f7fe fc04 	bl	8006c48 <HAL_DMA_Abort_IT>
 8008440:	4603      	mov	r3, r0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d04d      	beq.n	80084e2 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008450:	4610      	mov	r0, r2
 8008452:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008454:	e045      	b.n	80084e2 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 f850 	bl	80084fc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800845c:	e041      	b.n	80084e2 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008462:	2b00      	cmp	r3, #0
 8008464:	d039      	beq.n	80084da <I2C_ITError+0x17e>
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	2b12      	cmp	r3, #18
 800846a:	d002      	beq.n	8008472 <I2C_ITError+0x116>
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	2b22      	cmp	r3, #34	; 0x22
 8008470:	d133      	bne.n	80084da <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800847c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008480:	d107      	bne.n	8008492 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008490:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008496:	4618      	mov	r0, r3
 8008498:	f7fe fcc6 	bl	8006e28 <HAL_DMA_GetState>
 800849c:	4603      	mov	r3, r0
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d017      	beq.n	80084d2 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084a6:	4a14      	ldr	r2, [pc, #80]	; (80084f8 <I2C_ITError+0x19c>)
 80084a8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2200      	movs	r2, #0
 80084ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084b6:	4618      	mov	r0, r3
 80084b8:	f7fe fbc6 	bl	8006c48 <HAL_DMA_Abort_IT>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d011      	beq.n	80084e6 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80084cc:	4610      	mov	r0, r2
 80084ce:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80084d0:	e009      	b.n	80084e6 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 f812 	bl	80084fc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80084d8:	e005      	b.n	80084e6 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 f80e 	bl	80084fc <I2C_TreatErrorCallback>
  }
}
 80084e0:	e002      	b.n	80084e8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80084e2:	bf00      	nop
 80084e4:	e000      	b.n	80084e8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80084e6:	bf00      	nop
}
 80084e8:	bf00      	nop
 80084ea:	3710      	adds	r7, #16
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}
 80084f0:	ffff0000 	.word	0xffff0000
 80084f4:	08007b83 	.word	0x08007b83
 80084f8:	08008593 	.word	0x08008593

080084fc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b082      	sub	sp, #8
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800850a:	b2db      	uxtb	r3, r3
 800850c:	2b60      	cmp	r3, #96	; 0x60
 800850e:	d10e      	bne.n	800852e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2220      	movs	r2, #32
 8008514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2200      	movs	r2, #0
 8008522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f7ff fb21 	bl	8007b6e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800852c:	e009      	b.n	8008542 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2200      	movs	r2, #0
 8008538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f7fc f9c5 	bl	80048cc <HAL_I2C_ErrorCallback>
}
 8008542:	bf00      	nop
 8008544:	3708      	adds	r7, #8
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}

0800854a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800854a:	b480      	push	{r7}
 800854c:	b083      	sub	sp, #12
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	699b      	ldr	r3, [r3, #24]
 8008558:	f003 0302 	and.w	r3, r3, #2
 800855c:	2b02      	cmp	r3, #2
 800855e:	d103      	bne.n	8008568 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2200      	movs	r2, #0
 8008566:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	699b      	ldr	r3, [r3, #24]
 800856e:	f003 0301 	and.w	r3, r3, #1
 8008572:	2b01      	cmp	r3, #1
 8008574:	d007      	beq.n	8008586 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	699a      	ldr	r2, [r3, #24]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f042 0201 	orr.w	r2, r2, #1
 8008584:	619a      	str	r2, [r3, #24]
  }
}
 8008586:	bf00      	nop
 8008588:	370c      	adds	r7, #12
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr

08008592 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008592:	b580      	push	{r7, lr}
 8008594:	b084      	sub	sp, #16
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800859e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d003      	beq.n	80085b0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ac:	2200      	movs	r2, #0
 80085ae:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d003      	beq.n	80085c0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085bc:	2200      	movs	r2, #0
 80085be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80085c0:	68f8      	ldr	r0, [r7, #12]
 80085c2:	f7ff ff9b 	bl	80084fc <I2C_TreatErrorCallback>
}
 80085c6:	bf00      	nop
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}

080085ce <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b084      	sub	sp, #16
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	60f8      	str	r0, [r7, #12]
 80085d6:	60b9      	str	r1, [r7, #8]
 80085d8:	603b      	str	r3, [r7, #0]
 80085da:	4613      	mov	r3, r2
 80085dc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80085de:	e022      	b.n	8008626 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085e6:	d01e      	beq.n	8008626 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085e8:	f7fe f864 	bl	80066b4 <HAL_GetTick>
 80085ec:	4602      	mov	r2, r0
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	1ad3      	subs	r3, r2, r3
 80085f2:	683a      	ldr	r2, [r7, #0]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d302      	bcc.n	80085fe <I2C_WaitOnFlagUntilTimeout+0x30>
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d113      	bne.n	8008626 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008602:	f043 0220 	orr.w	r2, r3, #32
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2220      	movs	r2, #32
 800860e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2200      	movs	r2, #0
 8008616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2200      	movs	r2, #0
 800861e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008622:	2301      	movs	r3, #1
 8008624:	e00f      	b.n	8008646 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	699a      	ldr	r2, [r3, #24]
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	4013      	ands	r3, r2
 8008630:	68ba      	ldr	r2, [r7, #8]
 8008632:	429a      	cmp	r2, r3
 8008634:	bf0c      	ite	eq
 8008636:	2301      	moveq	r3, #1
 8008638:	2300      	movne	r3, #0
 800863a:	b2db      	uxtb	r3, r3
 800863c:	461a      	mov	r2, r3
 800863e:	79fb      	ldrb	r3, [r7, #7]
 8008640:	429a      	cmp	r2, r3
 8008642:	d0cd      	beq.n	80085e0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008644:	2300      	movs	r3, #0
}
 8008646:	4618      	mov	r0, r3
 8008648:	3710      	adds	r7, #16
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}

0800864e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800864e:	b580      	push	{r7, lr}
 8008650:	b084      	sub	sp, #16
 8008652:	af00      	add	r7, sp, #0
 8008654:	60f8      	str	r0, [r7, #12]
 8008656:	60b9      	str	r1, [r7, #8]
 8008658:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800865a:	e02c      	b.n	80086b6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	68b9      	ldr	r1, [r7, #8]
 8008660:	68f8      	ldr	r0, [r7, #12]
 8008662:	f000 f871 	bl	8008748 <I2C_IsErrorOccurred>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d001      	beq.n	8008670 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800866c:	2301      	movs	r3, #1
 800866e:	e02a      	b.n	80086c6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008676:	d01e      	beq.n	80086b6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008678:	f7fe f81c 	bl	80066b4 <HAL_GetTick>
 800867c:	4602      	mov	r2, r0
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	1ad3      	subs	r3, r2, r3
 8008682:	68ba      	ldr	r2, [r7, #8]
 8008684:	429a      	cmp	r2, r3
 8008686:	d302      	bcc.n	800868e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d113      	bne.n	80086b6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008692:	f043 0220 	orr.w	r2, r3, #32
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2220      	movs	r2, #32
 800869e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2200      	movs	r2, #0
 80086a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2200      	movs	r2, #0
 80086ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	e007      	b.n	80086c6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	699b      	ldr	r3, [r3, #24]
 80086bc:	f003 0302 	and.w	r3, r3, #2
 80086c0:	2b02      	cmp	r3, #2
 80086c2:	d1cb      	bne.n	800865c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80086c4:	2300      	movs	r3, #0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3710      	adds	r7, #16
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}

080086ce <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80086ce:	b580      	push	{r7, lr}
 80086d0:	b084      	sub	sp, #16
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	60f8      	str	r0, [r7, #12]
 80086d6:	60b9      	str	r1, [r7, #8]
 80086d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80086da:	e028      	b.n	800872e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	68b9      	ldr	r1, [r7, #8]
 80086e0:	68f8      	ldr	r0, [r7, #12]
 80086e2:	f000 f831 	bl	8008748 <I2C_IsErrorOccurred>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d001      	beq.n	80086f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80086ec:	2301      	movs	r3, #1
 80086ee:	e026      	b.n	800873e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086f0:	f7fd ffe0 	bl	80066b4 <HAL_GetTick>
 80086f4:	4602      	mov	r2, r0
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	1ad3      	subs	r3, r2, r3
 80086fa:	68ba      	ldr	r2, [r7, #8]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d302      	bcc.n	8008706 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d113      	bne.n	800872e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800870a:	f043 0220 	orr.w	r2, r3, #32
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2220      	movs	r2, #32
 8008716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2200      	movs	r2, #0
 800871e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2200      	movs	r2, #0
 8008726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	e007      	b.n	800873e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	699b      	ldr	r3, [r3, #24]
 8008734:	f003 0320 	and.w	r3, r3, #32
 8008738:	2b20      	cmp	r3, #32
 800873a:	d1cf      	bne.n	80086dc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800873c:	2300      	movs	r3, #0
}
 800873e:	4618      	mov	r0, r3
 8008740:	3710      	adds	r7, #16
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
	...

08008748 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b08a      	sub	sp, #40	; 0x28
 800874c:	af00      	add	r7, sp, #0
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	60b9      	str	r1, [r7, #8]
 8008752:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008754:	2300      	movs	r3, #0
 8008756:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	699b      	ldr	r3, [r3, #24]
 8008760:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008762:	2300      	movs	r3, #0
 8008764:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800876a:	69bb      	ldr	r3, [r7, #24]
 800876c:	f003 0310 	and.w	r3, r3, #16
 8008770:	2b00      	cmp	r3, #0
 8008772:	d075      	beq.n	8008860 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	2210      	movs	r2, #16
 800877a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800877c:	e056      	b.n	800882c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008784:	d052      	beq.n	800882c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008786:	f7fd ff95 	bl	80066b4 <HAL_GetTick>
 800878a:	4602      	mov	r2, r0
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	1ad3      	subs	r3, r2, r3
 8008790:	68ba      	ldr	r2, [r7, #8]
 8008792:	429a      	cmp	r2, r3
 8008794:	d302      	bcc.n	800879c <I2C_IsErrorOccurred+0x54>
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d147      	bne.n	800882c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087a6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80087ae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	699b      	ldr	r3, [r3, #24]
 80087b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80087ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087be:	d12e      	bne.n	800881e <I2C_IsErrorOccurred+0xd6>
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087c6:	d02a      	beq.n	800881e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80087c8:	7cfb      	ldrb	r3, [r7, #19]
 80087ca:	2b20      	cmp	r3, #32
 80087cc:	d027      	beq.n	800881e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	685a      	ldr	r2, [r3, #4]
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80087dc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80087de:	f7fd ff69 	bl	80066b4 <HAL_GetTick>
 80087e2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80087e4:	e01b      	b.n	800881e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80087e6:	f7fd ff65 	bl	80066b4 <HAL_GetTick>
 80087ea:	4602      	mov	r2, r0
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	1ad3      	subs	r3, r2, r3
 80087f0:	2b19      	cmp	r3, #25
 80087f2:	d914      	bls.n	800881e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087f8:	f043 0220 	orr.w	r2, r3, #32
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2220      	movs	r2, #32
 8008804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2200      	movs	r2, #0
 800880c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2200      	movs	r2, #0
 8008814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8008818:	2301      	movs	r3, #1
 800881a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	699b      	ldr	r3, [r3, #24]
 8008824:	f003 0320 	and.w	r3, r3, #32
 8008828:	2b20      	cmp	r3, #32
 800882a:	d1dc      	bne.n	80087e6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	699b      	ldr	r3, [r3, #24]
 8008832:	f003 0320 	and.w	r3, r3, #32
 8008836:	2b20      	cmp	r3, #32
 8008838:	d003      	beq.n	8008842 <I2C_IsErrorOccurred+0xfa>
 800883a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800883e:	2b00      	cmp	r3, #0
 8008840:	d09d      	beq.n	800877e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008842:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008846:	2b00      	cmp	r3, #0
 8008848:	d103      	bne.n	8008852 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	2220      	movs	r2, #32
 8008850:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008852:	6a3b      	ldr	r3, [r7, #32]
 8008854:	f043 0304 	orr.w	r3, r3, #4
 8008858:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800885a:	2301      	movs	r3, #1
 800885c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	699b      	ldr	r3, [r3, #24]
 8008866:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008868:	69bb      	ldr	r3, [r7, #24]
 800886a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800886e:	2b00      	cmp	r3, #0
 8008870:	d00b      	beq.n	800888a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008872:	6a3b      	ldr	r3, [r7, #32]
 8008874:	f043 0301 	orr.w	r3, r3, #1
 8008878:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008882:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800888a:	69bb      	ldr	r3, [r7, #24]
 800888c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008890:	2b00      	cmp	r3, #0
 8008892:	d00b      	beq.n	80088ac <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008894:	6a3b      	ldr	r3, [r7, #32]
 8008896:	f043 0308 	orr.w	r3, r3, #8
 800889a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80088a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80088ac:	69bb      	ldr	r3, [r7, #24]
 80088ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d00b      	beq.n	80088ce <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80088b6:	6a3b      	ldr	r3, [r7, #32]
 80088b8:	f043 0302 	orr.w	r3, r3, #2
 80088bc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80088ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d01c      	beq.n	8008910 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	f7ff fe37 	bl	800854a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	6859      	ldr	r1, [r3, #4]
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	4b0d      	ldr	r3, [pc, #52]	; (800891c <I2C_IsErrorOccurred+0x1d4>)
 80088e8:	400b      	ands	r3, r1
 80088ea:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088f0:	6a3b      	ldr	r3, [r7, #32]
 80088f2:	431a      	orrs	r2, r3
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2220      	movs	r2, #32
 80088fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2200      	movs	r2, #0
 8008904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2200      	movs	r2, #0
 800890c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008910:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008914:	4618      	mov	r0, r3
 8008916:	3728      	adds	r7, #40	; 0x28
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}
 800891c:	fe00e800 	.word	0xfe00e800

08008920 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008920:	b480      	push	{r7}
 8008922:	b087      	sub	sp, #28
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	607b      	str	r3, [r7, #4]
 800892a:	460b      	mov	r3, r1
 800892c:	817b      	strh	r3, [r7, #10]
 800892e:	4613      	mov	r3, r2
 8008930:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008932:	897b      	ldrh	r3, [r7, #10]
 8008934:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008938:	7a7b      	ldrb	r3, [r7, #9]
 800893a:	041b      	lsls	r3, r3, #16
 800893c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008940:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008946:	6a3b      	ldr	r3, [r7, #32]
 8008948:	4313      	orrs	r3, r2
 800894a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800894e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	685a      	ldr	r2, [r3, #4]
 8008956:	6a3b      	ldr	r3, [r7, #32]
 8008958:	0d5b      	lsrs	r3, r3, #21
 800895a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800895e:	4b08      	ldr	r3, [pc, #32]	; (8008980 <I2C_TransferConfig+0x60>)
 8008960:	430b      	orrs	r3, r1
 8008962:	43db      	mvns	r3, r3
 8008964:	ea02 0103 	and.w	r1, r2, r3
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	697a      	ldr	r2, [r7, #20]
 800896e:	430a      	orrs	r2, r1
 8008970:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008972:	bf00      	nop
 8008974:	371c      	adds	r7, #28
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr
 800897e:	bf00      	nop
 8008980:	03ff63ff 	.word	0x03ff63ff

08008984 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008984:	b480      	push	{r7}
 8008986:	b085      	sub	sp, #20
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	460b      	mov	r3, r1
 800898e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008990:	2300      	movs	r3, #0
 8008992:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008994:	887b      	ldrh	r3, [r7, #2]
 8008996:	f003 0301 	and.w	r3, r3, #1
 800899a:	2b00      	cmp	r3, #0
 800899c:	d00f      	beq.n	80089be <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80089a4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80089b2:	2b28      	cmp	r3, #40	; 0x28
 80089b4:	d003      	beq.n	80089be <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80089bc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80089be:	887b      	ldrh	r3, [r7, #2]
 80089c0:	f003 0302 	and.w	r3, r3, #2
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d00f      	beq.n	80089e8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80089ce:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80089dc:	2b28      	cmp	r3, #40	; 0x28
 80089de:	d003      	beq.n	80089e8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80089e6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80089e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	da03      	bge.n	80089f8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80089f6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80089f8:	887b      	ldrh	r3, [r7, #2]
 80089fa:	2b10      	cmp	r3, #16
 80089fc:	d103      	bne.n	8008a06 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008a04:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008a06:	887b      	ldrh	r3, [r7, #2]
 8008a08:	2b20      	cmp	r3, #32
 8008a0a:	d103      	bne.n	8008a14 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f043 0320 	orr.w	r3, r3, #32
 8008a12:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008a14:	887b      	ldrh	r3, [r7, #2]
 8008a16:	2b40      	cmp	r3, #64	; 0x40
 8008a18:	d103      	bne.n	8008a22 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a20:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	6819      	ldr	r1, [r3, #0]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	43da      	mvns	r2, r3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	400a      	ands	r2, r1
 8008a32:	601a      	str	r2, [r3, #0]
}
 8008a34:	bf00      	nop
 8008a36:	3714      	adds	r7, #20
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b083      	sub	sp, #12
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	2b20      	cmp	r3, #32
 8008a54:	d138      	bne.n	8008ac8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d101      	bne.n	8008a64 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008a60:	2302      	movs	r3, #2
 8008a62:	e032      	b.n	8008aca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2201      	movs	r2, #1
 8008a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2224      	movs	r2, #36	; 0x24
 8008a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f022 0201 	bic.w	r2, r2, #1
 8008a82:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008a92:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	6819      	ldr	r1, [r3, #0]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	683a      	ldr	r2, [r7, #0]
 8008aa0:	430a      	orrs	r2, r1
 8008aa2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f042 0201 	orr.w	r2, r2, #1
 8008ab2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2220      	movs	r2, #32
 8008ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	e000      	b.n	8008aca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008ac8:	2302      	movs	r3, #2
  }
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	370c      	adds	r7, #12
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr

08008ad6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008ad6:	b480      	push	{r7}
 8008ad8:	b085      	sub	sp, #20
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
 8008ade:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	2b20      	cmp	r3, #32
 8008aea:	d139      	bne.n	8008b60 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d101      	bne.n	8008afa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008af6:	2302      	movs	r3, #2
 8008af8:	e033      	b.n	8008b62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2201      	movs	r2, #1
 8008afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2224      	movs	r2, #36	; 0x24
 8008b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f022 0201 	bic.w	r2, r2, #1
 8008b18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008b28:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	021b      	lsls	r3, r3, #8
 8008b2e:	68fa      	ldr	r2, [r7, #12]
 8008b30:	4313      	orrs	r3, r2
 8008b32:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	68fa      	ldr	r2, [r7, #12]
 8008b3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f042 0201 	orr.w	r2, r2, #1
 8008b4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2220      	movs	r2, #32
 8008b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	e000      	b.n	8008b62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008b60:	2302      	movs	r3, #2
  }
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3714      	adds	r7, #20
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr
	...

08008b70 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b085      	sub	sp, #20
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b78:	4b0b      	ldr	r3, [pc, #44]	; (8008ba8 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8008b7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b7c:	4a0a      	ldr	r2, [pc, #40]	; (8008ba8 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8008b7e:	f043 0301 	orr.w	r3, r3, #1
 8008b82:	6613      	str	r3, [r2, #96]	; 0x60
 8008b84:	4b08      	ldr	r3, [pc, #32]	; (8008ba8 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8008b86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b88:	f003 0301 	and.w	r3, r3, #1
 8008b8c:	60fb      	str	r3, [r7, #12]
 8008b8e:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8008b90:	4b06      	ldr	r3, [pc, #24]	; (8008bac <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8008b92:	685a      	ldr	r2, [r3, #4]
 8008b94:	4905      	ldr	r1, [pc, #20]	; (8008bac <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	604b      	str	r3, [r1, #4]
}
 8008b9c:	bf00      	nop
 8008b9e:	3714      	adds	r7, #20
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr
 8008ba8:	40021000 	.word	0x40021000
 8008bac:	40010000 	.word	0x40010000

08008bb0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8008bb4:	4b04      	ldr	r3, [pc, #16]	; (8008bc8 <HAL_PWREx_GetVoltageRange+0x18>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr
 8008bc6:	bf00      	nop
 8008bc8:	40007000 	.word	0x40007000

08008bcc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b085      	sub	sp, #20
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bda:	d130      	bne.n	8008c3e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8008bdc:	4b23      	ldr	r3, [pc, #140]	; (8008c6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008be8:	d038      	beq.n	8008c5c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008bea:	4b20      	ldr	r3, [pc, #128]	; (8008c6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008bf2:	4a1e      	ldr	r2, [pc, #120]	; (8008c6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008bf4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008bf8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008bfa:	4b1d      	ldr	r3, [pc, #116]	; (8008c70 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	2232      	movs	r2, #50	; 0x32
 8008c00:	fb02 f303 	mul.w	r3, r2, r3
 8008c04:	4a1b      	ldr	r2, [pc, #108]	; (8008c74 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8008c06:	fba2 2303 	umull	r2, r3, r2, r3
 8008c0a:	0c9b      	lsrs	r3, r3, #18
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008c10:	e002      	b.n	8008c18 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	3b01      	subs	r3, #1
 8008c16:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008c18:	4b14      	ldr	r3, [pc, #80]	; (8008c6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008c1a:	695b      	ldr	r3, [r3, #20]
 8008c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c24:	d102      	bne.n	8008c2c <HAL_PWREx_ControlVoltageScaling+0x60>
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d1f2      	bne.n	8008c12 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008c2c:	4b0f      	ldr	r3, [pc, #60]	; (8008c6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008c2e:	695b      	ldr	r3, [r3, #20]
 8008c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c38:	d110      	bne.n	8008c5c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8008c3a:	2303      	movs	r3, #3
 8008c3c:	e00f      	b.n	8008c5e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8008c3e:	4b0b      	ldr	r3, [pc, #44]	; (8008c6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008c46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c4a:	d007      	beq.n	8008c5c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008c4c:	4b07      	ldr	r3, [pc, #28]	; (8008c6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008c54:	4a05      	ldr	r2, [pc, #20]	; (8008c6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008c56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008c5a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8008c5c:	2300      	movs	r3, #0
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3714      	adds	r7, #20
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr
 8008c6a:	bf00      	nop
 8008c6c:	40007000 	.word	0x40007000
 8008c70:	200001e8 	.word	0x200001e8
 8008c74:	431bde83 	.word	0x431bde83

08008c78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b088      	sub	sp, #32
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d101      	bne.n	8008c8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	e3ca      	b.n	8009420 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c8a:	4b97      	ldr	r3, [pc, #604]	; (8008ee8 <HAL_RCC_OscConfig+0x270>)
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	f003 030c 	and.w	r3, r3, #12
 8008c92:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008c94:	4b94      	ldr	r3, [pc, #592]	; (8008ee8 <HAL_RCC_OscConfig+0x270>)
 8008c96:	68db      	ldr	r3, [r3, #12]
 8008c98:	f003 0303 	and.w	r3, r3, #3
 8008c9c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f003 0310 	and.w	r3, r3, #16
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	f000 80e4 	beq.w	8008e74 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008cac:	69bb      	ldr	r3, [r7, #24]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d007      	beq.n	8008cc2 <HAL_RCC_OscConfig+0x4a>
 8008cb2:	69bb      	ldr	r3, [r7, #24]
 8008cb4:	2b0c      	cmp	r3, #12
 8008cb6:	f040 808b 	bne.w	8008dd0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	f040 8087 	bne.w	8008dd0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008cc2:	4b89      	ldr	r3, [pc, #548]	; (8008ee8 <HAL_RCC_OscConfig+0x270>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f003 0302 	and.w	r3, r3, #2
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d005      	beq.n	8008cda <HAL_RCC_OscConfig+0x62>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	699b      	ldr	r3, [r3, #24]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d101      	bne.n	8008cda <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e3a2      	b.n	8009420 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6a1a      	ldr	r2, [r3, #32]
 8008cde:	4b82      	ldr	r3, [pc, #520]	; (8008ee8 <HAL_RCC_OscConfig+0x270>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f003 0308 	and.w	r3, r3, #8
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d004      	beq.n	8008cf4 <HAL_RCC_OscConfig+0x7c>
 8008cea:	4b7f      	ldr	r3, [pc, #508]	; (8008ee8 <HAL_RCC_OscConfig+0x270>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008cf2:	e005      	b.n	8008d00 <HAL_RCC_OscConfig+0x88>
 8008cf4:	4b7c      	ldr	r3, [pc, #496]	; (8008ee8 <HAL_RCC_OscConfig+0x270>)
 8008cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008cfa:	091b      	lsrs	r3, r3, #4
 8008cfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d223      	bcs.n	8008d4c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6a1b      	ldr	r3, [r3, #32]
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f000 fd55 	bl	80097b8 <RCC_SetFlashLatencyFromMSIRange>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d001      	beq.n	8008d18 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8008d14:	2301      	movs	r3, #1
 8008d16:	e383      	b.n	8009420 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008d18:	4b73      	ldr	r3, [pc, #460]	; (8008ee8 <HAL_RCC_OscConfig+0x270>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a72      	ldr	r2, [pc, #456]	; (8008ee8 <HAL_RCC_OscConfig+0x270>)
 8008d1e:	f043 0308 	orr.w	r3, r3, #8
 8008d22:	6013      	str	r3, [r2, #0]
 8008d24:	4b70      	ldr	r3, [pc, #448]	; (8008ee8 <HAL_RCC_OscConfig+0x270>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6a1b      	ldr	r3, [r3, #32]
 8008d30:	496d      	ldr	r1, [pc, #436]	; (8008ee8 <HAL_RCC_OscConfig+0x270>)
 8008d32:	4313      	orrs	r3, r2
 8008d34:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008d36:	4b6c      	ldr	r3, [pc, #432]	; (8008ee8 <HAL_RCC_OscConfig+0x270>)
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	69db      	ldr	r3, [r3, #28]
 8008d42:	021b      	lsls	r3, r3, #8
 8008d44:	4968      	ldr	r1, [pc, #416]	; (8008ee8 <HAL_RCC_OscConfig+0x270>)
 8008d46:	4313      	orrs	r3, r2
 8008d48:	604b      	str	r3, [r1, #4]
 8008d4a:	e025      	b.n	8008d98 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008d4c:	4b66      	ldr	r3, [pc, #408]	; (8008ee8 <HAL_RCC_OscConfig+0x270>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a65      	ldr	r2, [pc, #404]	; (8008ee8 <HAL_RCC_OscConfig+0x270>)
 8008d52:	f043 0308 	orr.w	r3, r3, #8
 8008d56:	6013      	str	r3, [r2, #0]
 8008d58:	4b63      	ldr	r3, [pc, #396]	; (8008ee8 <HAL_RCC_OscConfig+0x270>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6a1b      	ldr	r3, [r3, #32]
 8008d64:	4960      	ldr	r1, [pc, #384]	; (8008ee8 <HAL_RCC_OscConfig+0x270>)
 8008d66:	4313      	orrs	r3, r2
 8008d68:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008d6a:	4b5f      	ldr	r3, [pc, #380]	; (8008ee8 <HAL_RCC_OscConfig+0x270>)
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	69db      	ldr	r3, [r3, #28]
 8008d76:	021b      	lsls	r3, r3, #8
 8008d78:	495b      	ldr	r1, [pc, #364]	; (8008ee8 <HAL_RCC_OscConfig+0x270>)
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008d7e:	69bb      	ldr	r3, [r7, #24]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d109      	bne.n	8008d98 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6a1b      	ldr	r3, [r3, #32]
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f000 fd15 	bl	80097b8 <RCC_SetFlashLatencyFromMSIRange>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d001      	beq.n	8008d98 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8008d94:	2301      	movs	r3, #1
 8008d96:	e343      	b.n	8009420 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008d98:	f000 fc4a 	bl	8009630 <HAL_RCC_GetSysClockFreq>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	4b52      	ldr	r3, [pc, #328]	; (8008ee8 <HAL_RCC_OscConfig+0x270>)
 8008da0:	689b      	ldr	r3, [r3, #8]
 8008da2:	091b      	lsrs	r3, r3, #4
 8008da4:	f003 030f 	and.w	r3, r3, #15
 8008da8:	4950      	ldr	r1, [pc, #320]	; (8008eec <HAL_RCC_OscConfig+0x274>)
 8008daa:	5ccb      	ldrb	r3, [r1, r3]
 8008dac:	f003 031f 	and.w	r3, r3, #31
 8008db0:	fa22 f303 	lsr.w	r3, r2, r3
 8008db4:	4a4e      	ldr	r2, [pc, #312]	; (8008ef0 <HAL_RCC_OscConfig+0x278>)
 8008db6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008db8:	4b4e      	ldr	r3, [pc, #312]	; (8008ef4 <HAL_RCC_OscConfig+0x27c>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f7fd fc29 	bl	8006614 <HAL_InitTick>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008dc6:	7bfb      	ldrb	r3, [r7, #15]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d052      	beq.n	8008e72 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8008dcc:	7bfb      	ldrb	r3, [r7, #15]
 8008dce:	e327      	b.n	8009420 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	699b      	ldr	r3, [r3, #24]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d032      	beq.n	8008e3e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008dd8:	4b43      	ldr	r3, [pc, #268]	; (8008ee8 <HAL_RCC_OscConfig+0x270>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a42      	ldr	r2, [pc, #264]	; (8008ee8 <HAL_RCC_OscConfig+0x270>)
 8008dde:	f043 0301 	orr.w	r3, r3, #1
 8008de2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008de4:	f7fd fc66 	bl	80066b4 <HAL_GetTick>
 8008de8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008dea:	e008      	b.n	8008dfe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008dec:	f7fd fc62 	bl	80066b4 <HAL_GetTick>
 8008df0:	4602      	mov	r2, r0
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	1ad3      	subs	r3, r2, r3
 8008df6:	2b02      	cmp	r3, #2
 8008df8:	d901      	bls.n	8008dfe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8008dfa:	2303      	movs	r3, #3
 8008dfc:	e310      	b.n	8009420 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008dfe:	4b3a      	ldr	r3, [pc, #232]	; (8008ee8 <HAL_RCC_OscConfig+0x270>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f003 0302 	and.w	r3, r3, #2
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d0f0      	beq.n	8008dec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008e0a:	4b37      	ldr	r3, [pc, #220]	; (8008ee8 <HAL_RCC_OscConfig+0x270>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a36      	ldr	r2, [pc, #216]	; (8008ee8 <HAL_RCC_OscConfig+0x270>)
 8008e10:	f043 0308 	orr.w	r3, r3, #8
 8008e14:	6013      	str	r3, [r2, #0]
 8008e16:	4b34      	ldr	r3, [pc, #208]	; (8008ee8 <HAL_RCC_OscConfig+0x270>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6a1b      	ldr	r3, [r3, #32]
 8008e22:	4931      	ldr	r1, [pc, #196]	; (8008ee8 <HAL_RCC_OscConfig+0x270>)
 8008e24:	4313      	orrs	r3, r2
 8008e26:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008e28:	4b2f      	ldr	r3, [pc, #188]	; (8008ee8 <HAL_RCC_OscConfig+0x270>)
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	69db      	ldr	r3, [r3, #28]
 8008e34:	021b      	lsls	r3, r3, #8
 8008e36:	492c      	ldr	r1, [pc, #176]	; (8008ee8 <HAL_RCC_OscConfig+0x270>)
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	604b      	str	r3, [r1, #4]
 8008e3c:	e01a      	b.n	8008e74 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008e3e:	4b2a      	ldr	r3, [pc, #168]	; (8008ee8 <HAL_RCC_OscConfig+0x270>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a29      	ldr	r2, [pc, #164]	; (8008ee8 <HAL_RCC_OscConfig+0x270>)
 8008e44:	f023 0301 	bic.w	r3, r3, #1
 8008e48:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008e4a:	f7fd fc33 	bl	80066b4 <HAL_GetTick>
 8008e4e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008e50:	e008      	b.n	8008e64 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008e52:	f7fd fc2f 	bl	80066b4 <HAL_GetTick>
 8008e56:	4602      	mov	r2, r0
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	1ad3      	subs	r3, r2, r3
 8008e5c:	2b02      	cmp	r3, #2
 8008e5e:	d901      	bls.n	8008e64 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8008e60:	2303      	movs	r3, #3
 8008e62:	e2dd      	b.n	8009420 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008e64:	4b20      	ldr	r3, [pc, #128]	; (8008ee8 <HAL_RCC_OscConfig+0x270>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f003 0302 	and.w	r3, r3, #2
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d1f0      	bne.n	8008e52 <HAL_RCC_OscConfig+0x1da>
 8008e70:	e000      	b.n	8008e74 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008e72:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f003 0301 	and.w	r3, r3, #1
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d074      	beq.n	8008f6a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8008e80:	69bb      	ldr	r3, [r7, #24]
 8008e82:	2b08      	cmp	r3, #8
 8008e84:	d005      	beq.n	8008e92 <HAL_RCC_OscConfig+0x21a>
 8008e86:	69bb      	ldr	r3, [r7, #24]
 8008e88:	2b0c      	cmp	r3, #12
 8008e8a:	d10e      	bne.n	8008eaa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	2b03      	cmp	r3, #3
 8008e90:	d10b      	bne.n	8008eaa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e92:	4b15      	ldr	r3, [pc, #84]	; (8008ee8 <HAL_RCC_OscConfig+0x270>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d064      	beq.n	8008f68 <HAL_RCC_OscConfig+0x2f0>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d160      	bne.n	8008f68 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	e2ba      	b.n	8009420 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008eb2:	d106      	bne.n	8008ec2 <HAL_RCC_OscConfig+0x24a>
 8008eb4:	4b0c      	ldr	r3, [pc, #48]	; (8008ee8 <HAL_RCC_OscConfig+0x270>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4a0b      	ldr	r2, [pc, #44]	; (8008ee8 <HAL_RCC_OscConfig+0x270>)
 8008eba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ebe:	6013      	str	r3, [r2, #0]
 8008ec0:	e026      	b.n	8008f10 <HAL_RCC_OscConfig+0x298>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008eca:	d115      	bne.n	8008ef8 <HAL_RCC_OscConfig+0x280>
 8008ecc:	4b06      	ldr	r3, [pc, #24]	; (8008ee8 <HAL_RCC_OscConfig+0x270>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a05      	ldr	r2, [pc, #20]	; (8008ee8 <HAL_RCC_OscConfig+0x270>)
 8008ed2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ed6:	6013      	str	r3, [r2, #0]
 8008ed8:	4b03      	ldr	r3, [pc, #12]	; (8008ee8 <HAL_RCC_OscConfig+0x270>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a02      	ldr	r2, [pc, #8]	; (8008ee8 <HAL_RCC_OscConfig+0x270>)
 8008ede:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ee2:	6013      	str	r3, [r2, #0]
 8008ee4:	e014      	b.n	8008f10 <HAL_RCC_OscConfig+0x298>
 8008ee6:	bf00      	nop
 8008ee8:	40021000 	.word	0x40021000
 8008eec:	080175d0 	.word	0x080175d0
 8008ef0:	200001e8 	.word	0x200001e8
 8008ef4:	20000218 	.word	0x20000218
 8008ef8:	4ba0      	ldr	r3, [pc, #640]	; (800917c <HAL_RCC_OscConfig+0x504>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a9f      	ldr	r2, [pc, #636]	; (800917c <HAL_RCC_OscConfig+0x504>)
 8008efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f02:	6013      	str	r3, [r2, #0]
 8008f04:	4b9d      	ldr	r3, [pc, #628]	; (800917c <HAL_RCC_OscConfig+0x504>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a9c      	ldr	r2, [pc, #624]	; (800917c <HAL_RCC_OscConfig+0x504>)
 8008f0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008f0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d013      	beq.n	8008f40 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f18:	f7fd fbcc 	bl	80066b4 <HAL_GetTick>
 8008f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008f1e:	e008      	b.n	8008f32 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f20:	f7fd fbc8 	bl	80066b4 <HAL_GetTick>
 8008f24:	4602      	mov	r2, r0
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	1ad3      	subs	r3, r2, r3
 8008f2a:	2b64      	cmp	r3, #100	; 0x64
 8008f2c:	d901      	bls.n	8008f32 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8008f2e:	2303      	movs	r3, #3
 8008f30:	e276      	b.n	8009420 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008f32:	4b92      	ldr	r3, [pc, #584]	; (800917c <HAL_RCC_OscConfig+0x504>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d0f0      	beq.n	8008f20 <HAL_RCC_OscConfig+0x2a8>
 8008f3e:	e014      	b.n	8008f6a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f40:	f7fd fbb8 	bl	80066b4 <HAL_GetTick>
 8008f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008f46:	e008      	b.n	8008f5a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f48:	f7fd fbb4 	bl	80066b4 <HAL_GetTick>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	1ad3      	subs	r3, r2, r3
 8008f52:	2b64      	cmp	r3, #100	; 0x64
 8008f54:	d901      	bls.n	8008f5a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008f56:	2303      	movs	r3, #3
 8008f58:	e262      	b.n	8009420 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008f5a:	4b88      	ldr	r3, [pc, #544]	; (800917c <HAL_RCC_OscConfig+0x504>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d1f0      	bne.n	8008f48 <HAL_RCC_OscConfig+0x2d0>
 8008f66:	e000      	b.n	8008f6a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f003 0302 	and.w	r3, r3, #2
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d060      	beq.n	8009038 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8008f76:	69bb      	ldr	r3, [r7, #24]
 8008f78:	2b04      	cmp	r3, #4
 8008f7a:	d005      	beq.n	8008f88 <HAL_RCC_OscConfig+0x310>
 8008f7c:	69bb      	ldr	r3, [r7, #24]
 8008f7e:	2b0c      	cmp	r3, #12
 8008f80:	d119      	bne.n	8008fb6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	2b02      	cmp	r3, #2
 8008f86:	d116      	bne.n	8008fb6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f88:	4b7c      	ldr	r3, [pc, #496]	; (800917c <HAL_RCC_OscConfig+0x504>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d005      	beq.n	8008fa0 <HAL_RCC_OscConfig+0x328>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d101      	bne.n	8008fa0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	e23f      	b.n	8009420 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fa0:	4b76      	ldr	r3, [pc, #472]	; (800917c <HAL_RCC_OscConfig+0x504>)
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	691b      	ldr	r3, [r3, #16]
 8008fac:	061b      	lsls	r3, r3, #24
 8008fae:	4973      	ldr	r1, [pc, #460]	; (800917c <HAL_RCC_OscConfig+0x504>)
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008fb4:	e040      	b.n	8009038 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d023      	beq.n	8009006 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008fbe:	4b6f      	ldr	r3, [pc, #444]	; (800917c <HAL_RCC_OscConfig+0x504>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	4a6e      	ldr	r2, [pc, #440]	; (800917c <HAL_RCC_OscConfig+0x504>)
 8008fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fca:	f7fd fb73 	bl	80066b4 <HAL_GetTick>
 8008fce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008fd0:	e008      	b.n	8008fe4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008fd2:	f7fd fb6f 	bl	80066b4 <HAL_GetTick>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	1ad3      	subs	r3, r2, r3
 8008fdc:	2b02      	cmp	r3, #2
 8008fde:	d901      	bls.n	8008fe4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8008fe0:	2303      	movs	r3, #3
 8008fe2:	e21d      	b.n	8009420 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008fe4:	4b65      	ldr	r3, [pc, #404]	; (800917c <HAL_RCC_OscConfig+0x504>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d0f0      	beq.n	8008fd2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ff0:	4b62      	ldr	r3, [pc, #392]	; (800917c <HAL_RCC_OscConfig+0x504>)
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	691b      	ldr	r3, [r3, #16]
 8008ffc:	061b      	lsls	r3, r3, #24
 8008ffe:	495f      	ldr	r1, [pc, #380]	; (800917c <HAL_RCC_OscConfig+0x504>)
 8009000:	4313      	orrs	r3, r2
 8009002:	604b      	str	r3, [r1, #4]
 8009004:	e018      	b.n	8009038 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009006:	4b5d      	ldr	r3, [pc, #372]	; (800917c <HAL_RCC_OscConfig+0x504>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a5c      	ldr	r2, [pc, #368]	; (800917c <HAL_RCC_OscConfig+0x504>)
 800900c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009010:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009012:	f7fd fb4f 	bl	80066b4 <HAL_GetTick>
 8009016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009018:	e008      	b.n	800902c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800901a:	f7fd fb4b 	bl	80066b4 <HAL_GetTick>
 800901e:	4602      	mov	r2, r0
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	1ad3      	subs	r3, r2, r3
 8009024:	2b02      	cmp	r3, #2
 8009026:	d901      	bls.n	800902c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8009028:	2303      	movs	r3, #3
 800902a:	e1f9      	b.n	8009420 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800902c:	4b53      	ldr	r3, [pc, #332]	; (800917c <HAL_RCC_OscConfig+0x504>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009034:	2b00      	cmp	r3, #0
 8009036:	d1f0      	bne.n	800901a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f003 0308 	and.w	r3, r3, #8
 8009040:	2b00      	cmp	r3, #0
 8009042:	d03c      	beq.n	80090be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	695b      	ldr	r3, [r3, #20]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d01c      	beq.n	8009086 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800904c:	4b4b      	ldr	r3, [pc, #300]	; (800917c <HAL_RCC_OscConfig+0x504>)
 800904e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009052:	4a4a      	ldr	r2, [pc, #296]	; (800917c <HAL_RCC_OscConfig+0x504>)
 8009054:	f043 0301 	orr.w	r3, r3, #1
 8009058:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800905c:	f7fd fb2a 	bl	80066b4 <HAL_GetTick>
 8009060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009062:	e008      	b.n	8009076 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009064:	f7fd fb26 	bl	80066b4 <HAL_GetTick>
 8009068:	4602      	mov	r2, r0
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	1ad3      	subs	r3, r2, r3
 800906e:	2b02      	cmp	r3, #2
 8009070:	d901      	bls.n	8009076 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8009072:	2303      	movs	r3, #3
 8009074:	e1d4      	b.n	8009420 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009076:	4b41      	ldr	r3, [pc, #260]	; (800917c <HAL_RCC_OscConfig+0x504>)
 8009078:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800907c:	f003 0302 	and.w	r3, r3, #2
 8009080:	2b00      	cmp	r3, #0
 8009082:	d0ef      	beq.n	8009064 <HAL_RCC_OscConfig+0x3ec>
 8009084:	e01b      	b.n	80090be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009086:	4b3d      	ldr	r3, [pc, #244]	; (800917c <HAL_RCC_OscConfig+0x504>)
 8009088:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800908c:	4a3b      	ldr	r2, [pc, #236]	; (800917c <HAL_RCC_OscConfig+0x504>)
 800908e:	f023 0301 	bic.w	r3, r3, #1
 8009092:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009096:	f7fd fb0d 	bl	80066b4 <HAL_GetTick>
 800909a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800909c:	e008      	b.n	80090b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800909e:	f7fd fb09 	bl	80066b4 <HAL_GetTick>
 80090a2:	4602      	mov	r2, r0
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	1ad3      	subs	r3, r2, r3
 80090a8:	2b02      	cmp	r3, #2
 80090aa:	d901      	bls.n	80090b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80090ac:	2303      	movs	r3, #3
 80090ae:	e1b7      	b.n	8009420 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80090b0:	4b32      	ldr	r3, [pc, #200]	; (800917c <HAL_RCC_OscConfig+0x504>)
 80090b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80090b6:	f003 0302 	and.w	r3, r3, #2
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d1ef      	bne.n	800909e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f003 0304 	and.w	r3, r3, #4
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	f000 80a6 	beq.w	8009218 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80090cc:	2300      	movs	r3, #0
 80090ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80090d0:	4b2a      	ldr	r3, [pc, #168]	; (800917c <HAL_RCC_OscConfig+0x504>)
 80090d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d10d      	bne.n	80090f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80090dc:	4b27      	ldr	r3, [pc, #156]	; (800917c <HAL_RCC_OscConfig+0x504>)
 80090de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090e0:	4a26      	ldr	r2, [pc, #152]	; (800917c <HAL_RCC_OscConfig+0x504>)
 80090e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090e6:	6593      	str	r3, [r2, #88]	; 0x58
 80090e8:	4b24      	ldr	r3, [pc, #144]	; (800917c <HAL_RCC_OscConfig+0x504>)
 80090ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090f0:	60bb      	str	r3, [r7, #8]
 80090f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80090f4:	2301      	movs	r3, #1
 80090f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80090f8:	4b21      	ldr	r3, [pc, #132]	; (8009180 <HAL_RCC_OscConfig+0x508>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009100:	2b00      	cmp	r3, #0
 8009102:	d118      	bne.n	8009136 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009104:	4b1e      	ldr	r3, [pc, #120]	; (8009180 <HAL_RCC_OscConfig+0x508>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a1d      	ldr	r2, [pc, #116]	; (8009180 <HAL_RCC_OscConfig+0x508>)
 800910a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800910e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009110:	f7fd fad0 	bl	80066b4 <HAL_GetTick>
 8009114:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009116:	e008      	b.n	800912a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009118:	f7fd facc 	bl	80066b4 <HAL_GetTick>
 800911c:	4602      	mov	r2, r0
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	1ad3      	subs	r3, r2, r3
 8009122:	2b02      	cmp	r3, #2
 8009124:	d901      	bls.n	800912a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8009126:	2303      	movs	r3, #3
 8009128:	e17a      	b.n	8009420 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800912a:	4b15      	ldr	r3, [pc, #84]	; (8009180 <HAL_RCC_OscConfig+0x508>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009132:	2b00      	cmp	r3, #0
 8009134:	d0f0      	beq.n	8009118 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	2b01      	cmp	r3, #1
 800913c:	d108      	bne.n	8009150 <HAL_RCC_OscConfig+0x4d8>
 800913e:	4b0f      	ldr	r3, [pc, #60]	; (800917c <HAL_RCC_OscConfig+0x504>)
 8009140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009144:	4a0d      	ldr	r2, [pc, #52]	; (800917c <HAL_RCC_OscConfig+0x504>)
 8009146:	f043 0301 	orr.w	r3, r3, #1
 800914a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800914e:	e029      	b.n	80091a4 <HAL_RCC_OscConfig+0x52c>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	689b      	ldr	r3, [r3, #8]
 8009154:	2b05      	cmp	r3, #5
 8009156:	d115      	bne.n	8009184 <HAL_RCC_OscConfig+0x50c>
 8009158:	4b08      	ldr	r3, [pc, #32]	; (800917c <HAL_RCC_OscConfig+0x504>)
 800915a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800915e:	4a07      	ldr	r2, [pc, #28]	; (800917c <HAL_RCC_OscConfig+0x504>)
 8009160:	f043 0304 	orr.w	r3, r3, #4
 8009164:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009168:	4b04      	ldr	r3, [pc, #16]	; (800917c <HAL_RCC_OscConfig+0x504>)
 800916a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800916e:	4a03      	ldr	r2, [pc, #12]	; (800917c <HAL_RCC_OscConfig+0x504>)
 8009170:	f043 0301 	orr.w	r3, r3, #1
 8009174:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009178:	e014      	b.n	80091a4 <HAL_RCC_OscConfig+0x52c>
 800917a:	bf00      	nop
 800917c:	40021000 	.word	0x40021000
 8009180:	40007000 	.word	0x40007000
 8009184:	4b9c      	ldr	r3, [pc, #624]	; (80093f8 <HAL_RCC_OscConfig+0x780>)
 8009186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800918a:	4a9b      	ldr	r2, [pc, #620]	; (80093f8 <HAL_RCC_OscConfig+0x780>)
 800918c:	f023 0301 	bic.w	r3, r3, #1
 8009190:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009194:	4b98      	ldr	r3, [pc, #608]	; (80093f8 <HAL_RCC_OscConfig+0x780>)
 8009196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800919a:	4a97      	ldr	r2, [pc, #604]	; (80093f8 <HAL_RCC_OscConfig+0x780>)
 800919c:	f023 0304 	bic.w	r3, r3, #4
 80091a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	689b      	ldr	r3, [r3, #8]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d016      	beq.n	80091da <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091ac:	f7fd fa82 	bl	80066b4 <HAL_GetTick>
 80091b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80091b2:	e00a      	b.n	80091ca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091b4:	f7fd fa7e 	bl	80066b4 <HAL_GetTick>
 80091b8:	4602      	mov	r2, r0
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	1ad3      	subs	r3, r2, r3
 80091be:	f241 3288 	movw	r2, #5000	; 0x1388
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d901      	bls.n	80091ca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80091c6:	2303      	movs	r3, #3
 80091c8:	e12a      	b.n	8009420 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80091ca:	4b8b      	ldr	r3, [pc, #556]	; (80093f8 <HAL_RCC_OscConfig+0x780>)
 80091cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091d0:	f003 0302 	and.w	r3, r3, #2
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d0ed      	beq.n	80091b4 <HAL_RCC_OscConfig+0x53c>
 80091d8:	e015      	b.n	8009206 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091da:	f7fd fa6b 	bl	80066b4 <HAL_GetTick>
 80091de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80091e0:	e00a      	b.n	80091f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091e2:	f7fd fa67 	bl	80066b4 <HAL_GetTick>
 80091e6:	4602      	mov	r2, r0
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	1ad3      	subs	r3, r2, r3
 80091ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d901      	bls.n	80091f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80091f4:	2303      	movs	r3, #3
 80091f6:	e113      	b.n	8009420 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80091f8:	4b7f      	ldr	r3, [pc, #508]	; (80093f8 <HAL_RCC_OscConfig+0x780>)
 80091fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091fe:	f003 0302 	and.w	r3, r3, #2
 8009202:	2b00      	cmp	r3, #0
 8009204:	d1ed      	bne.n	80091e2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009206:	7ffb      	ldrb	r3, [r7, #31]
 8009208:	2b01      	cmp	r3, #1
 800920a:	d105      	bne.n	8009218 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800920c:	4b7a      	ldr	r3, [pc, #488]	; (80093f8 <HAL_RCC_OscConfig+0x780>)
 800920e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009210:	4a79      	ldr	r2, [pc, #484]	; (80093f8 <HAL_RCC_OscConfig+0x780>)
 8009212:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009216:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800921c:	2b00      	cmp	r3, #0
 800921e:	f000 80fe 	beq.w	800941e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009226:	2b02      	cmp	r3, #2
 8009228:	f040 80d0 	bne.w	80093cc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800922c:	4b72      	ldr	r3, [pc, #456]	; (80093f8 <HAL_RCC_OscConfig+0x780>)
 800922e:	68db      	ldr	r3, [r3, #12]
 8009230:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	f003 0203 	and.w	r2, r3, #3
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800923c:	429a      	cmp	r2, r3
 800923e:	d130      	bne.n	80092a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800924a:	3b01      	subs	r3, #1
 800924c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800924e:	429a      	cmp	r2, r3
 8009250:	d127      	bne.n	80092a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800925c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800925e:	429a      	cmp	r2, r3
 8009260:	d11f      	bne.n	80092a2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800926c:	2a07      	cmp	r2, #7
 800926e:	bf14      	ite	ne
 8009270:	2201      	movne	r2, #1
 8009272:	2200      	moveq	r2, #0
 8009274:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009276:	4293      	cmp	r3, r2
 8009278:	d113      	bne.n	80092a2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009284:	085b      	lsrs	r3, r3, #1
 8009286:	3b01      	subs	r3, #1
 8009288:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800928a:	429a      	cmp	r2, r3
 800928c:	d109      	bne.n	80092a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009298:	085b      	lsrs	r3, r3, #1
 800929a:	3b01      	subs	r3, #1
 800929c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800929e:	429a      	cmp	r2, r3
 80092a0:	d06e      	beq.n	8009380 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80092a2:	69bb      	ldr	r3, [r7, #24]
 80092a4:	2b0c      	cmp	r3, #12
 80092a6:	d069      	beq.n	800937c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80092a8:	4b53      	ldr	r3, [pc, #332]	; (80093f8 <HAL_RCC_OscConfig+0x780>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d105      	bne.n	80092c0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80092b4:	4b50      	ldr	r3, [pc, #320]	; (80093f8 <HAL_RCC_OscConfig+0x780>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d001      	beq.n	80092c4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80092c0:	2301      	movs	r3, #1
 80092c2:	e0ad      	b.n	8009420 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80092c4:	4b4c      	ldr	r3, [pc, #304]	; (80093f8 <HAL_RCC_OscConfig+0x780>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a4b      	ldr	r2, [pc, #300]	; (80093f8 <HAL_RCC_OscConfig+0x780>)
 80092ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80092ce:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80092d0:	f7fd f9f0 	bl	80066b4 <HAL_GetTick>
 80092d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80092d6:	e008      	b.n	80092ea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80092d8:	f7fd f9ec 	bl	80066b4 <HAL_GetTick>
 80092dc:	4602      	mov	r2, r0
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	1ad3      	subs	r3, r2, r3
 80092e2:	2b02      	cmp	r3, #2
 80092e4:	d901      	bls.n	80092ea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80092e6:	2303      	movs	r3, #3
 80092e8:	e09a      	b.n	8009420 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80092ea:	4b43      	ldr	r3, [pc, #268]	; (80093f8 <HAL_RCC_OscConfig+0x780>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d1f0      	bne.n	80092d8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80092f6:	4b40      	ldr	r3, [pc, #256]	; (80093f8 <HAL_RCC_OscConfig+0x780>)
 80092f8:	68da      	ldr	r2, [r3, #12]
 80092fa:	4b40      	ldr	r3, [pc, #256]	; (80093fc <HAL_RCC_OscConfig+0x784>)
 80092fc:	4013      	ands	r3, r2
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009306:	3a01      	subs	r2, #1
 8009308:	0112      	lsls	r2, r2, #4
 800930a:	4311      	orrs	r1, r2
 800930c:	687a      	ldr	r2, [r7, #4]
 800930e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009310:	0212      	lsls	r2, r2, #8
 8009312:	4311      	orrs	r1, r2
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009318:	0852      	lsrs	r2, r2, #1
 800931a:	3a01      	subs	r2, #1
 800931c:	0552      	lsls	r2, r2, #21
 800931e:	4311      	orrs	r1, r2
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009324:	0852      	lsrs	r2, r2, #1
 8009326:	3a01      	subs	r2, #1
 8009328:	0652      	lsls	r2, r2, #25
 800932a:	4311      	orrs	r1, r2
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009330:	0912      	lsrs	r2, r2, #4
 8009332:	0452      	lsls	r2, r2, #17
 8009334:	430a      	orrs	r2, r1
 8009336:	4930      	ldr	r1, [pc, #192]	; (80093f8 <HAL_RCC_OscConfig+0x780>)
 8009338:	4313      	orrs	r3, r2
 800933a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800933c:	4b2e      	ldr	r3, [pc, #184]	; (80093f8 <HAL_RCC_OscConfig+0x780>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4a2d      	ldr	r2, [pc, #180]	; (80093f8 <HAL_RCC_OscConfig+0x780>)
 8009342:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009346:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009348:	4b2b      	ldr	r3, [pc, #172]	; (80093f8 <HAL_RCC_OscConfig+0x780>)
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	4a2a      	ldr	r2, [pc, #168]	; (80093f8 <HAL_RCC_OscConfig+0x780>)
 800934e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009352:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009354:	f7fd f9ae 	bl	80066b4 <HAL_GetTick>
 8009358:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800935a:	e008      	b.n	800936e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800935c:	f7fd f9aa 	bl	80066b4 <HAL_GetTick>
 8009360:	4602      	mov	r2, r0
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	1ad3      	subs	r3, r2, r3
 8009366:	2b02      	cmp	r3, #2
 8009368:	d901      	bls.n	800936e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800936a:	2303      	movs	r3, #3
 800936c:	e058      	b.n	8009420 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800936e:	4b22      	ldr	r3, [pc, #136]	; (80093f8 <HAL_RCC_OscConfig+0x780>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009376:	2b00      	cmp	r3, #0
 8009378:	d0f0      	beq.n	800935c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800937a:	e050      	b.n	800941e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800937c:	2301      	movs	r3, #1
 800937e:	e04f      	b.n	8009420 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009380:	4b1d      	ldr	r3, [pc, #116]	; (80093f8 <HAL_RCC_OscConfig+0x780>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009388:	2b00      	cmp	r3, #0
 800938a:	d148      	bne.n	800941e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800938c:	4b1a      	ldr	r3, [pc, #104]	; (80093f8 <HAL_RCC_OscConfig+0x780>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a19      	ldr	r2, [pc, #100]	; (80093f8 <HAL_RCC_OscConfig+0x780>)
 8009392:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009396:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009398:	4b17      	ldr	r3, [pc, #92]	; (80093f8 <HAL_RCC_OscConfig+0x780>)
 800939a:	68db      	ldr	r3, [r3, #12]
 800939c:	4a16      	ldr	r2, [pc, #88]	; (80093f8 <HAL_RCC_OscConfig+0x780>)
 800939e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80093a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80093a4:	f7fd f986 	bl	80066b4 <HAL_GetTick>
 80093a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80093aa:	e008      	b.n	80093be <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80093ac:	f7fd f982 	bl	80066b4 <HAL_GetTick>
 80093b0:	4602      	mov	r2, r0
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	1ad3      	subs	r3, r2, r3
 80093b6:	2b02      	cmp	r3, #2
 80093b8:	d901      	bls.n	80093be <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80093ba:	2303      	movs	r3, #3
 80093bc:	e030      	b.n	8009420 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80093be:	4b0e      	ldr	r3, [pc, #56]	; (80093f8 <HAL_RCC_OscConfig+0x780>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d0f0      	beq.n	80093ac <HAL_RCC_OscConfig+0x734>
 80093ca:	e028      	b.n	800941e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80093cc:	69bb      	ldr	r3, [r7, #24]
 80093ce:	2b0c      	cmp	r3, #12
 80093d0:	d023      	beq.n	800941a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093d2:	4b09      	ldr	r3, [pc, #36]	; (80093f8 <HAL_RCC_OscConfig+0x780>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4a08      	ldr	r2, [pc, #32]	; (80093f8 <HAL_RCC_OscConfig+0x780>)
 80093d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80093dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093de:	f7fd f969 	bl	80066b4 <HAL_GetTick>
 80093e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80093e4:	e00c      	b.n	8009400 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80093e6:	f7fd f965 	bl	80066b4 <HAL_GetTick>
 80093ea:	4602      	mov	r2, r0
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	1ad3      	subs	r3, r2, r3
 80093f0:	2b02      	cmp	r3, #2
 80093f2:	d905      	bls.n	8009400 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80093f4:	2303      	movs	r3, #3
 80093f6:	e013      	b.n	8009420 <HAL_RCC_OscConfig+0x7a8>
 80093f8:	40021000 	.word	0x40021000
 80093fc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009400:	4b09      	ldr	r3, [pc, #36]	; (8009428 <HAL_RCC_OscConfig+0x7b0>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009408:	2b00      	cmp	r3, #0
 800940a:	d1ec      	bne.n	80093e6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800940c:	4b06      	ldr	r3, [pc, #24]	; (8009428 <HAL_RCC_OscConfig+0x7b0>)
 800940e:	68da      	ldr	r2, [r3, #12]
 8009410:	4905      	ldr	r1, [pc, #20]	; (8009428 <HAL_RCC_OscConfig+0x7b0>)
 8009412:	4b06      	ldr	r3, [pc, #24]	; (800942c <HAL_RCC_OscConfig+0x7b4>)
 8009414:	4013      	ands	r3, r2
 8009416:	60cb      	str	r3, [r1, #12]
 8009418:	e001      	b.n	800941e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800941a:	2301      	movs	r3, #1
 800941c:	e000      	b.n	8009420 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800941e:	2300      	movs	r3, #0
}
 8009420:	4618      	mov	r0, r3
 8009422:	3720      	adds	r7, #32
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}
 8009428:	40021000 	.word	0x40021000
 800942c:	feeefffc 	.word	0xfeeefffc

08009430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b084      	sub	sp, #16
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d101      	bne.n	8009444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009440:	2301      	movs	r3, #1
 8009442:	e0e7      	b.n	8009614 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009444:	4b75      	ldr	r3, [pc, #468]	; (800961c <HAL_RCC_ClockConfig+0x1ec>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f003 0307 	and.w	r3, r3, #7
 800944c:	683a      	ldr	r2, [r7, #0]
 800944e:	429a      	cmp	r2, r3
 8009450:	d910      	bls.n	8009474 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009452:	4b72      	ldr	r3, [pc, #456]	; (800961c <HAL_RCC_ClockConfig+0x1ec>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f023 0207 	bic.w	r2, r3, #7
 800945a:	4970      	ldr	r1, [pc, #448]	; (800961c <HAL_RCC_ClockConfig+0x1ec>)
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	4313      	orrs	r3, r2
 8009460:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009462:	4b6e      	ldr	r3, [pc, #440]	; (800961c <HAL_RCC_ClockConfig+0x1ec>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f003 0307 	and.w	r3, r3, #7
 800946a:	683a      	ldr	r2, [r7, #0]
 800946c:	429a      	cmp	r2, r3
 800946e:	d001      	beq.n	8009474 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009470:	2301      	movs	r3, #1
 8009472:	e0cf      	b.n	8009614 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f003 0302 	and.w	r3, r3, #2
 800947c:	2b00      	cmp	r3, #0
 800947e:	d010      	beq.n	80094a2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	689a      	ldr	r2, [r3, #8]
 8009484:	4b66      	ldr	r3, [pc, #408]	; (8009620 <HAL_RCC_ClockConfig+0x1f0>)
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800948c:	429a      	cmp	r2, r3
 800948e:	d908      	bls.n	80094a2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009490:	4b63      	ldr	r3, [pc, #396]	; (8009620 <HAL_RCC_ClockConfig+0x1f0>)
 8009492:	689b      	ldr	r3, [r3, #8]
 8009494:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	4960      	ldr	r1, [pc, #384]	; (8009620 <HAL_RCC_ClockConfig+0x1f0>)
 800949e:	4313      	orrs	r3, r2
 80094a0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f003 0301 	and.w	r3, r3, #1
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d04c      	beq.n	8009548 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	2b03      	cmp	r3, #3
 80094b4:	d107      	bne.n	80094c6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80094b6:	4b5a      	ldr	r3, [pc, #360]	; (8009620 <HAL_RCC_ClockConfig+0x1f0>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d121      	bne.n	8009506 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	e0a6      	b.n	8009614 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	2b02      	cmp	r3, #2
 80094cc:	d107      	bne.n	80094de <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80094ce:	4b54      	ldr	r3, [pc, #336]	; (8009620 <HAL_RCC_ClockConfig+0x1f0>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d115      	bne.n	8009506 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80094da:	2301      	movs	r3, #1
 80094dc:	e09a      	b.n	8009614 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d107      	bne.n	80094f6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80094e6:	4b4e      	ldr	r3, [pc, #312]	; (8009620 <HAL_RCC_ClockConfig+0x1f0>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f003 0302 	and.w	r3, r3, #2
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d109      	bne.n	8009506 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80094f2:	2301      	movs	r3, #1
 80094f4:	e08e      	b.n	8009614 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80094f6:	4b4a      	ldr	r3, [pc, #296]	; (8009620 <HAL_RCC_ClockConfig+0x1f0>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d101      	bne.n	8009506 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009502:	2301      	movs	r3, #1
 8009504:	e086      	b.n	8009614 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009506:	4b46      	ldr	r3, [pc, #280]	; (8009620 <HAL_RCC_ClockConfig+0x1f0>)
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	f023 0203 	bic.w	r2, r3, #3
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	4943      	ldr	r1, [pc, #268]	; (8009620 <HAL_RCC_ClockConfig+0x1f0>)
 8009514:	4313      	orrs	r3, r2
 8009516:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009518:	f7fd f8cc 	bl	80066b4 <HAL_GetTick>
 800951c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800951e:	e00a      	b.n	8009536 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009520:	f7fd f8c8 	bl	80066b4 <HAL_GetTick>
 8009524:	4602      	mov	r2, r0
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	1ad3      	subs	r3, r2, r3
 800952a:	f241 3288 	movw	r2, #5000	; 0x1388
 800952e:	4293      	cmp	r3, r2
 8009530:	d901      	bls.n	8009536 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8009532:	2303      	movs	r3, #3
 8009534:	e06e      	b.n	8009614 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009536:	4b3a      	ldr	r3, [pc, #232]	; (8009620 <HAL_RCC_ClockConfig+0x1f0>)
 8009538:	689b      	ldr	r3, [r3, #8]
 800953a:	f003 020c 	and.w	r2, r3, #12
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	009b      	lsls	r3, r3, #2
 8009544:	429a      	cmp	r2, r3
 8009546:	d1eb      	bne.n	8009520 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f003 0302 	and.w	r3, r3, #2
 8009550:	2b00      	cmp	r3, #0
 8009552:	d010      	beq.n	8009576 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	689a      	ldr	r2, [r3, #8]
 8009558:	4b31      	ldr	r3, [pc, #196]	; (8009620 <HAL_RCC_ClockConfig+0x1f0>)
 800955a:	689b      	ldr	r3, [r3, #8]
 800955c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009560:	429a      	cmp	r2, r3
 8009562:	d208      	bcs.n	8009576 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009564:	4b2e      	ldr	r3, [pc, #184]	; (8009620 <HAL_RCC_ClockConfig+0x1f0>)
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	492b      	ldr	r1, [pc, #172]	; (8009620 <HAL_RCC_ClockConfig+0x1f0>)
 8009572:	4313      	orrs	r3, r2
 8009574:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009576:	4b29      	ldr	r3, [pc, #164]	; (800961c <HAL_RCC_ClockConfig+0x1ec>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f003 0307 	and.w	r3, r3, #7
 800957e:	683a      	ldr	r2, [r7, #0]
 8009580:	429a      	cmp	r2, r3
 8009582:	d210      	bcs.n	80095a6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009584:	4b25      	ldr	r3, [pc, #148]	; (800961c <HAL_RCC_ClockConfig+0x1ec>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f023 0207 	bic.w	r2, r3, #7
 800958c:	4923      	ldr	r1, [pc, #140]	; (800961c <HAL_RCC_ClockConfig+0x1ec>)
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	4313      	orrs	r3, r2
 8009592:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009594:	4b21      	ldr	r3, [pc, #132]	; (800961c <HAL_RCC_ClockConfig+0x1ec>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f003 0307 	and.w	r3, r3, #7
 800959c:	683a      	ldr	r2, [r7, #0]
 800959e:	429a      	cmp	r2, r3
 80095a0:	d001      	beq.n	80095a6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80095a2:	2301      	movs	r3, #1
 80095a4:	e036      	b.n	8009614 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f003 0304 	and.w	r3, r3, #4
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d008      	beq.n	80095c4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80095b2:	4b1b      	ldr	r3, [pc, #108]	; (8009620 <HAL_RCC_ClockConfig+0x1f0>)
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	68db      	ldr	r3, [r3, #12]
 80095be:	4918      	ldr	r1, [pc, #96]	; (8009620 <HAL_RCC_ClockConfig+0x1f0>)
 80095c0:	4313      	orrs	r3, r2
 80095c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f003 0308 	and.w	r3, r3, #8
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d009      	beq.n	80095e4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80095d0:	4b13      	ldr	r3, [pc, #76]	; (8009620 <HAL_RCC_ClockConfig+0x1f0>)
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	691b      	ldr	r3, [r3, #16]
 80095dc:	00db      	lsls	r3, r3, #3
 80095de:	4910      	ldr	r1, [pc, #64]	; (8009620 <HAL_RCC_ClockConfig+0x1f0>)
 80095e0:	4313      	orrs	r3, r2
 80095e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80095e4:	f000 f824 	bl	8009630 <HAL_RCC_GetSysClockFreq>
 80095e8:	4602      	mov	r2, r0
 80095ea:	4b0d      	ldr	r3, [pc, #52]	; (8009620 <HAL_RCC_ClockConfig+0x1f0>)
 80095ec:	689b      	ldr	r3, [r3, #8]
 80095ee:	091b      	lsrs	r3, r3, #4
 80095f0:	f003 030f 	and.w	r3, r3, #15
 80095f4:	490b      	ldr	r1, [pc, #44]	; (8009624 <HAL_RCC_ClockConfig+0x1f4>)
 80095f6:	5ccb      	ldrb	r3, [r1, r3]
 80095f8:	f003 031f 	and.w	r3, r3, #31
 80095fc:	fa22 f303 	lsr.w	r3, r2, r3
 8009600:	4a09      	ldr	r2, [pc, #36]	; (8009628 <HAL_RCC_ClockConfig+0x1f8>)
 8009602:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009604:	4b09      	ldr	r3, [pc, #36]	; (800962c <HAL_RCC_ClockConfig+0x1fc>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4618      	mov	r0, r3
 800960a:	f7fd f803 	bl	8006614 <HAL_InitTick>
 800960e:	4603      	mov	r3, r0
 8009610:	72fb      	strb	r3, [r7, #11]

  return status;
 8009612:	7afb      	ldrb	r3, [r7, #11]
}
 8009614:	4618      	mov	r0, r3
 8009616:	3710      	adds	r7, #16
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}
 800961c:	40022000 	.word	0x40022000
 8009620:	40021000 	.word	0x40021000
 8009624:	080175d0 	.word	0x080175d0
 8009628:	200001e8 	.word	0x200001e8
 800962c:	20000218 	.word	0x20000218

08009630 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009630:	b480      	push	{r7}
 8009632:	b089      	sub	sp, #36	; 0x24
 8009634:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8009636:	2300      	movs	r3, #0
 8009638:	61fb      	str	r3, [r7, #28]
 800963a:	2300      	movs	r3, #0
 800963c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800963e:	4b3e      	ldr	r3, [pc, #248]	; (8009738 <HAL_RCC_GetSysClockFreq+0x108>)
 8009640:	689b      	ldr	r3, [r3, #8]
 8009642:	f003 030c 	and.w	r3, r3, #12
 8009646:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009648:	4b3b      	ldr	r3, [pc, #236]	; (8009738 <HAL_RCC_GetSysClockFreq+0x108>)
 800964a:	68db      	ldr	r3, [r3, #12]
 800964c:	f003 0303 	and.w	r3, r3, #3
 8009650:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d005      	beq.n	8009664 <HAL_RCC_GetSysClockFreq+0x34>
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	2b0c      	cmp	r3, #12
 800965c:	d121      	bne.n	80096a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2b01      	cmp	r3, #1
 8009662:	d11e      	bne.n	80096a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009664:	4b34      	ldr	r3, [pc, #208]	; (8009738 <HAL_RCC_GetSysClockFreq+0x108>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f003 0308 	and.w	r3, r3, #8
 800966c:	2b00      	cmp	r3, #0
 800966e:	d107      	bne.n	8009680 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009670:	4b31      	ldr	r3, [pc, #196]	; (8009738 <HAL_RCC_GetSysClockFreq+0x108>)
 8009672:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009676:	0a1b      	lsrs	r3, r3, #8
 8009678:	f003 030f 	and.w	r3, r3, #15
 800967c:	61fb      	str	r3, [r7, #28]
 800967e:	e005      	b.n	800968c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009680:	4b2d      	ldr	r3, [pc, #180]	; (8009738 <HAL_RCC_GetSysClockFreq+0x108>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	091b      	lsrs	r3, r3, #4
 8009686:	f003 030f 	and.w	r3, r3, #15
 800968a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800968c:	4a2b      	ldr	r2, [pc, #172]	; (800973c <HAL_RCC_GetSysClockFreq+0x10c>)
 800968e:	69fb      	ldr	r3, [r7, #28]
 8009690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009694:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d10d      	bne.n	80096b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800969c:	69fb      	ldr	r3, [r7, #28]
 800969e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80096a0:	e00a      	b.n	80096b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	2b04      	cmp	r3, #4
 80096a6:	d102      	bne.n	80096ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80096a8:	4b25      	ldr	r3, [pc, #148]	; (8009740 <HAL_RCC_GetSysClockFreq+0x110>)
 80096aa:	61bb      	str	r3, [r7, #24]
 80096ac:	e004      	b.n	80096b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	2b08      	cmp	r3, #8
 80096b2:	d101      	bne.n	80096b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80096b4:	4b23      	ldr	r3, [pc, #140]	; (8009744 <HAL_RCC_GetSysClockFreq+0x114>)
 80096b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	2b0c      	cmp	r3, #12
 80096bc:	d134      	bne.n	8009728 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80096be:	4b1e      	ldr	r3, [pc, #120]	; (8009738 <HAL_RCC_GetSysClockFreq+0x108>)
 80096c0:	68db      	ldr	r3, [r3, #12]
 80096c2:	f003 0303 	and.w	r3, r3, #3
 80096c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	2b02      	cmp	r3, #2
 80096cc:	d003      	beq.n	80096d6 <HAL_RCC_GetSysClockFreq+0xa6>
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	2b03      	cmp	r3, #3
 80096d2:	d003      	beq.n	80096dc <HAL_RCC_GetSysClockFreq+0xac>
 80096d4:	e005      	b.n	80096e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80096d6:	4b1a      	ldr	r3, [pc, #104]	; (8009740 <HAL_RCC_GetSysClockFreq+0x110>)
 80096d8:	617b      	str	r3, [r7, #20]
      break;
 80096da:	e005      	b.n	80096e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80096dc:	4b19      	ldr	r3, [pc, #100]	; (8009744 <HAL_RCC_GetSysClockFreq+0x114>)
 80096de:	617b      	str	r3, [r7, #20]
      break;
 80096e0:	e002      	b.n	80096e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80096e2:	69fb      	ldr	r3, [r7, #28]
 80096e4:	617b      	str	r3, [r7, #20]
      break;
 80096e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80096e8:	4b13      	ldr	r3, [pc, #76]	; (8009738 <HAL_RCC_GetSysClockFreq+0x108>)
 80096ea:	68db      	ldr	r3, [r3, #12]
 80096ec:	091b      	lsrs	r3, r3, #4
 80096ee:	f003 0307 	and.w	r3, r3, #7
 80096f2:	3301      	adds	r3, #1
 80096f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80096f6:	4b10      	ldr	r3, [pc, #64]	; (8009738 <HAL_RCC_GetSysClockFreq+0x108>)
 80096f8:	68db      	ldr	r3, [r3, #12]
 80096fa:	0a1b      	lsrs	r3, r3, #8
 80096fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009700:	697a      	ldr	r2, [r7, #20]
 8009702:	fb03 f202 	mul.w	r2, r3, r2
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	fbb2 f3f3 	udiv	r3, r2, r3
 800970c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800970e:	4b0a      	ldr	r3, [pc, #40]	; (8009738 <HAL_RCC_GetSysClockFreq+0x108>)
 8009710:	68db      	ldr	r3, [r3, #12]
 8009712:	0e5b      	lsrs	r3, r3, #25
 8009714:	f003 0303 	and.w	r3, r3, #3
 8009718:	3301      	adds	r3, #1
 800971a:	005b      	lsls	r3, r3, #1
 800971c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800971e:	697a      	ldr	r2, [r7, #20]
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	fbb2 f3f3 	udiv	r3, r2, r3
 8009726:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8009728:	69bb      	ldr	r3, [r7, #24]
}
 800972a:	4618      	mov	r0, r3
 800972c:	3724      	adds	r7, #36	; 0x24
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr
 8009736:	bf00      	nop
 8009738:	40021000 	.word	0x40021000
 800973c:	080175e8 	.word	0x080175e8
 8009740:	00f42400 	.word	0x00f42400
 8009744:	007a1200 	.word	0x007a1200

08009748 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009748:	b480      	push	{r7}
 800974a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800974c:	4b03      	ldr	r3, [pc, #12]	; (800975c <HAL_RCC_GetHCLKFreq+0x14>)
 800974e:	681b      	ldr	r3, [r3, #0]
}
 8009750:	4618      	mov	r0, r3
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr
 800975a:	bf00      	nop
 800975c:	200001e8 	.word	0x200001e8

08009760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009764:	f7ff fff0 	bl	8009748 <HAL_RCC_GetHCLKFreq>
 8009768:	4602      	mov	r2, r0
 800976a:	4b06      	ldr	r3, [pc, #24]	; (8009784 <HAL_RCC_GetPCLK1Freq+0x24>)
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	0a1b      	lsrs	r3, r3, #8
 8009770:	f003 0307 	and.w	r3, r3, #7
 8009774:	4904      	ldr	r1, [pc, #16]	; (8009788 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009776:	5ccb      	ldrb	r3, [r1, r3]
 8009778:	f003 031f 	and.w	r3, r3, #31
 800977c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009780:	4618      	mov	r0, r3
 8009782:	bd80      	pop	{r7, pc}
 8009784:	40021000 	.word	0x40021000
 8009788:	080175e0 	.word	0x080175e0

0800978c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009790:	f7ff ffda 	bl	8009748 <HAL_RCC_GetHCLKFreq>
 8009794:	4602      	mov	r2, r0
 8009796:	4b06      	ldr	r3, [pc, #24]	; (80097b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	0adb      	lsrs	r3, r3, #11
 800979c:	f003 0307 	and.w	r3, r3, #7
 80097a0:	4904      	ldr	r1, [pc, #16]	; (80097b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80097a2:	5ccb      	ldrb	r3, [r1, r3]
 80097a4:	f003 031f 	and.w	r3, r3, #31
 80097a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	bd80      	pop	{r7, pc}
 80097b0:	40021000 	.word	0x40021000
 80097b4:	080175e0 	.word	0x080175e0

080097b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b086      	sub	sp, #24
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80097c0:	2300      	movs	r3, #0
 80097c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80097c4:	4b2a      	ldr	r3, [pc, #168]	; (8009870 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80097c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d003      	beq.n	80097d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80097d0:	f7ff f9ee 	bl	8008bb0 <HAL_PWREx_GetVoltageRange>
 80097d4:	6178      	str	r0, [r7, #20]
 80097d6:	e014      	b.n	8009802 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80097d8:	4b25      	ldr	r3, [pc, #148]	; (8009870 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80097da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097dc:	4a24      	ldr	r2, [pc, #144]	; (8009870 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80097de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097e2:	6593      	str	r3, [r2, #88]	; 0x58
 80097e4:	4b22      	ldr	r3, [pc, #136]	; (8009870 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80097e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097ec:	60fb      	str	r3, [r7, #12]
 80097ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80097f0:	f7ff f9de 	bl	8008bb0 <HAL_PWREx_GetVoltageRange>
 80097f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80097f6:	4b1e      	ldr	r3, [pc, #120]	; (8009870 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80097f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097fa:	4a1d      	ldr	r2, [pc, #116]	; (8009870 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80097fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009800:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009808:	d10b      	bne.n	8009822 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2b80      	cmp	r3, #128	; 0x80
 800980e:	d919      	bls.n	8009844 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2ba0      	cmp	r3, #160	; 0xa0
 8009814:	d902      	bls.n	800981c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009816:	2302      	movs	r3, #2
 8009818:	613b      	str	r3, [r7, #16]
 800981a:	e013      	b.n	8009844 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800981c:	2301      	movs	r3, #1
 800981e:	613b      	str	r3, [r7, #16]
 8009820:	e010      	b.n	8009844 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2b80      	cmp	r3, #128	; 0x80
 8009826:	d902      	bls.n	800982e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8009828:	2303      	movs	r3, #3
 800982a:	613b      	str	r3, [r7, #16]
 800982c:	e00a      	b.n	8009844 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2b80      	cmp	r3, #128	; 0x80
 8009832:	d102      	bne.n	800983a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009834:	2302      	movs	r3, #2
 8009836:	613b      	str	r3, [r7, #16]
 8009838:	e004      	b.n	8009844 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2b70      	cmp	r3, #112	; 0x70
 800983e:	d101      	bne.n	8009844 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009840:	2301      	movs	r3, #1
 8009842:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009844:	4b0b      	ldr	r3, [pc, #44]	; (8009874 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f023 0207 	bic.w	r2, r3, #7
 800984c:	4909      	ldr	r1, [pc, #36]	; (8009874 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	4313      	orrs	r3, r2
 8009852:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009854:	4b07      	ldr	r3, [pc, #28]	; (8009874 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f003 0307 	and.w	r3, r3, #7
 800985c:	693a      	ldr	r2, [r7, #16]
 800985e:	429a      	cmp	r2, r3
 8009860:	d001      	beq.n	8009866 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8009862:	2301      	movs	r3, #1
 8009864:	e000      	b.n	8009868 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8009866:	2300      	movs	r3, #0
}
 8009868:	4618      	mov	r0, r3
 800986a:	3718      	adds	r7, #24
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}
 8009870:	40021000 	.word	0x40021000
 8009874:	40022000 	.word	0x40022000

08009878 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b086      	sub	sp, #24
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009880:	2300      	movs	r3, #0
 8009882:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009884:	2300      	movs	r3, #0
 8009886:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009890:	2b00      	cmp	r3, #0
 8009892:	d041      	beq.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009898:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800989c:	d02a      	beq.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800989e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80098a2:	d824      	bhi.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80098a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80098a8:	d008      	beq.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80098aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80098ae:	d81e      	bhi.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d00a      	beq.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x52>
 80098b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80098b8:	d010      	beq.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80098ba:	e018      	b.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80098bc:	4b86      	ldr	r3, [pc, #536]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	4a85      	ldr	r2, [pc, #532]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80098c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098c6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80098c8:	e015      	b.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	3304      	adds	r3, #4
 80098ce:	2100      	movs	r1, #0
 80098d0:	4618      	mov	r0, r3
 80098d2:	f000 fabb 	bl	8009e4c <RCCEx_PLLSAI1_Config>
 80098d6:	4603      	mov	r3, r0
 80098d8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80098da:	e00c      	b.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	3320      	adds	r3, #32
 80098e0:	2100      	movs	r1, #0
 80098e2:	4618      	mov	r0, r3
 80098e4:	f000 fba6 	bl	800a034 <RCCEx_PLLSAI2_Config>
 80098e8:	4603      	mov	r3, r0
 80098ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80098ec:	e003      	b.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80098ee:	2301      	movs	r3, #1
 80098f0:	74fb      	strb	r3, [r7, #19]
      break;
 80098f2:	e000      	b.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80098f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098f6:	7cfb      	ldrb	r3, [r7, #19]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d10b      	bne.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80098fc:	4b76      	ldr	r3, [pc, #472]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80098fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009902:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800990a:	4973      	ldr	r1, [pc, #460]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800990c:	4313      	orrs	r3, r2
 800990e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8009912:	e001      	b.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009914:	7cfb      	ldrb	r3, [r7, #19]
 8009916:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009920:	2b00      	cmp	r3, #0
 8009922:	d041      	beq.n	80099a8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009928:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800992c:	d02a      	beq.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800992e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009932:	d824      	bhi.n	800997e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8009934:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009938:	d008      	beq.n	800994c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800993a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800993e:	d81e      	bhi.n	800997e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8009940:	2b00      	cmp	r3, #0
 8009942:	d00a      	beq.n	800995a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8009944:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009948:	d010      	beq.n	800996c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800994a:	e018      	b.n	800997e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800994c:	4b62      	ldr	r3, [pc, #392]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800994e:	68db      	ldr	r3, [r3, #12]
 8009950:	4a61      	ldr	r2, [pc, #388]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009952:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009956:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009958:	e015      	b.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	3304      	adds	r3, #4
 800995e:	2100      	movs	r1, #0
 8009960:	4618      	mov	r0, r3
 8009962:	f000 fa73 	bl	8009e4c <RCCEx_PLLSAI1_Config>
 8009966:	4603      	mov	r3, r0
 8009968:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800996a:	e00c      	b.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	3320      	adds	r3, #32
 8009970:	2100      	movs	r1, #0
 8009972:	4618      	mov	r0, r3
 8009974:	f000 fb5e 	bl	800a034 <RCCEx_PLLSAI2_Config>
 8009978:	4603      	mov	r3, r0
 800997a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800997c:	e003      	b.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800997e:	2301      	movs	r3, #1
 8009980:	74fb      	strb	r3, [r7, #19]
      break;
 8009982:	e000      	b.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8009984:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009986:	7cfb      	ldrb	r3, [r7, #19]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d10b      	bne.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800998c:	4b52      	ldr	r3, [pc, #328]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800998e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009992:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800999a:	494f      	ldr	r1, [pc, #316]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800999c:	4313      	orrs	r3, r2
 800999e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80099a2:	e001      	b.n	80099a8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099a4:	7cfb      	ldrb	r3, [r7, #19]
 80099a6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	f000 80a0 	beq.w	8009af6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80099b6:	2300      	movs	r3, #0
 80099b8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80099ba:	4b47      	ldr	r3, [pc, #284]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80099bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d101      	bne.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x152>
 80099c6:	2301      	movs	r3, #1
 80099c8:	e000      	b.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80099ca:	2300      	movs	r3, #0
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d00d      	beq.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80099d0:	4b41      	ldr	r3, [pc, #260]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80099d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099d4:	4a40      	ldr	r2, [pc, #256]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80099d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099da:	6593      	str	r3, [r2, #88]	; 0x58
 80099dc:	4b3e      	ldr	r3, [pc, #248]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80099de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099e4:	60bb      	str	r3, [r7, #8]
 80099e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80099e8:	2301      	movs	r3, #1
 80099ea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80099ec:	4b3b      	ldr	r3, [pc, #236]	; (8009adc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a3a      	ldr	r2, [pc, #232]	; (8009adc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80099f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80099f8:	f7fc fe5c 	bl	80066b4 <HAL_GetTick>
 80099fc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80099fe:	e009      	b.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a00:	f7fc fe58 	bl	80066b4 <HAL_GetTick>
 8009a04:	4602      	mov	r2, r0
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	1ad3      	subs	r3, r2, r3
 8009a0a:	2b02      	cmp	r3, #2
 8009a0c:	d902      	bls.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8009a0e:	2303      	movs	r3, #3
 8009a10:	74fb      	strb	r3, [r7, #19]
        break;
 8009a12:	e005      	b.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009a14:	4b31      	ldr	r3, [pc, #196]	; (8009adc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d0ef      	beq.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8009a20:	7cfb      	ldrb	r3, [r7, #19]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d15c      	bne.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009a26:	4b2c      	ldr	r3, [pc, #176]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a30:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d01f      	beq.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a3e:	697a      	ldr	r2, [r7, #20]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d019      	beq.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009a44:	4b24      	ldr	r3, [pc, #144]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a4e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009a50:	4b21      	ldr	r3, [pc, #132]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a56:	4a20      	ldr	r2, [pc, #128]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009a60:	4b1d      	ldr	r3, [pc, #116]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a66:	4a1c      	ldr	r2, [pc, #112]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009a68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009a70:	4a19      	ldr	r2, [pc, #100]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	f003 0301 	and.w	r3, r3, #1
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d016      	beq.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a82:	f7fc fe17 	bl	80066b4 <HAL_GetTick>
 8009a86:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009a88:	e00b      	b.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a8a:	f7fc fe13 	bl	80066b4 <HAL_GetTick>
 8009a8e:	4602      	mov	r2, r0
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	1ad3      	subs	r3, r2, r3
 8009a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d902      	bls.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8009a9c:	2303      	movs	r3, #3
 8009a9e:	74fb      	strb	r3, [r7, #19]
            break;
 8009aa0:	e006      	b.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009aa2:	4b0d      	ldr	r3, [pc, #52]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009aa8:	f003 0302 	and.w	r3, r3, #2
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d0ec      	beq.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8009ab0:	7cfb      	ldrb	r3, [r7, #19]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d10c      	bne.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009ab6:	4b08      	ldr	r3, [pc, #32]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009abc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ac6:	4904      	ldr	r1, [pc, #16]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009ace:	e009      	b.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009ad0:	7cfb      	ldrb	r3, [r7, #19]
 8009ad2:	74bb      	strb	r3, [r7, #18]
 8009ad4:	e006      	b.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8009ad6:	bf00      	nop
 8009ad8:	40021000 	.word	0x40021000
 8009adc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ae0:	7cfb      	ldrb	r3, [r7, #19]
 8009ae2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009ae4:	7c7b      	ldrb	r3, [r7, #17]
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	d105      	bne.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009aea:	4b9e      	ldr	r3, [pc, #632]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009aee:	4a9d      	ldr	r2, [pc, #628]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009af0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009af4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f003 0301 	and.w	r3, r3, #1
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d00a      	beq.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009b02:	4b98      	ldr	r3, [pc, #608]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b08:	f023 0203 	bic.w	r2, r3, #3
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b10:	4994      	ldr	r1, [pc, #592]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009b12:	4313      	orrs	r3, r2
 8009b14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f003 0302 	and.w	r3, r3, #2
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d00a      	beq.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009b24:	4b8f      	ldr	r3, [pc, #572]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b2a:	f023 020c 	bic.w	r2, r3, #12
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b32:	498c      	ldr	r1, [pc, #560]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009b34:	4313      	orrs	r3, r2
 8009b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f003 0304 	and.w	r3, r3, #4
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d00a      	beq.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009b46:	4b87      	ldr	r3, [pc, #540]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b4c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b54:	4983      	ldr	r1, [pc, #524]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009b56:	4313      	orrs	r3, r2
 8009b58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f003 0308 	and.w	r3, r3, #8
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d00a      	beq.n	8009b7e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009b68:	4b7e      	ldr	r3, [pc, #504]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b6e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b76:	497b      	ldr	r1, [pc, #492]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f003 0310 	and.w	r3, r3, #16
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d00a      	beq.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009b8a:	4b76      	ldr	r3, [pc, #472]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b98:	4972      	ldr	r1, [pc, #456]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f003 0320 	and.w	r3, r3, #32
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d00a      	beq.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009bac:	4b6d      	ldr	r3, [pc, #436]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bb2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bba:	496a      	ldr	r1, [pc, #424]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d00a      	beq.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009bce:	4b65      	ldr	r3, [pc, #404]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bd4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bdc:	4961      	ldr	r1, [pc, #388]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009bde:	4313      	orrs	r3, r2
 8009be0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d00a      	beq.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009bf0:	4b5c      	ldr	r3, [pc, #368]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bf6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bfe:	4959      	ldr	r1, [pc, #356]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009c00:	4313      	orrs	r3, r2
 8009c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d00a      	beq.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009c12:	4b54      	ldr	r3, [pc, #336]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c18:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c20:	4950      	ldr	r1, [pc, #320]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009c22:	4313      	orrs	r3, r2
 8009c24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d00a      	beq.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009c34:	4b4b      	ldr	r3, [pc, #300]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c3a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c42:	4948      	ldr	r1, [pc, #288]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009c44:	4313      	orrs	r3, r2
 8009c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d00a      	beq.n	8009c6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009c56:	4b43      	ldr	r3, [pc, #268]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c64:	493f      	ldr	r1, [pc, #252]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009c66:	4313      	orrs	r3, r2
 8009c68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d028      	beq.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009c78:	4b3a      	ldr	r3, [pc, #232]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c7e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c86:	4937      	ldr	r1, [pc, #220]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009c88:	4313      	orrs	r3, r2
 8009c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c96:	d106      	bne.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009c98:	4b32      	ldr	r3, [pc, #200]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009c9a:	68db      	ldr	r3, [r3, #12]
 8009c9c:	4a31      	ldr	r2, [pc, #196]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009c9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ca2:	60d3      	str	r3, [r2, #12]
 8009ca4:	e011      	b.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009caa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009cae:	d10c      	bne.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	3304      	adds	r3, #4
 8009cb4:	2101      	movs	r1, #1
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f000 f8c8 	bl	8009e4c <RCCEx_PLLSAI1_Config>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8009cc0:	7cfb      	ldrb	r3, [r7, #19]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d001      	beq.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8009cc6:	7cfb      	ldrb	r3, [r7, #19]
 8009cc8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d028      	beq.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009cd6:	4b23      	ldr	r3, [pc, #140]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cdc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ce4:	491f      	ldr	r1, [pc, #124]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cf0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009cf4:	d106      	bne.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009cf6:	4b1b      	ldr	r3, [pc, #108]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009cf8:	68db      	ldr	r3, [r3, #12]
 8009cfa:	4a1a      	ldr	r2, [pc, #104]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009cfc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d00:	60d3      	str	r3, [r2, #12]
 8009d02:	e011      	b.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d0c:	d10c      	bne.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	3304      	adds	r3, #4
 8009d12:	2101      	movs	r1, #1
 8009d14:	4618      	mov	r0, r3
 8009d16:	f000 f899 	bl	8009e4c <RCCEx_PLLSAI1_Config>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009d1e:	7cfb      	ldrb	r3, [r7, #19]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d001      	beq.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8009d24:	7cfb      	ldrb	r3, [r7, #19]
 8009d26:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d02b      	beq.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009d34:	4b0b      	ldr	r3, [pc, #44]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d42:	4908      	ldr	r1, [pc, #32]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009d44:	4313      	orrs	r3, r2
 8009d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d52:	d109      	bne.n	8009d68 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009d54:	4b03      	ldr	r3, [pc, #12]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009d56:	68db      	ldr	r3, [r3, #12]
 8009d58:	4a02      	ldr	r2, [pc, #8]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009d5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d5e:	60d3      	str	r3, [r2, #12]
 8009d60:	e014      	b.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8009d62:	bf00      	nop
 8009d64:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d70:	d10c      	bne.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	3304      	adds	r3, #4
 8009d76:	2101      	movs	r1, #1
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f000 f867 	bl	8009e4c <RCCEx_PLLSAI1_Config>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009d82:	7cfb      	ldrb	r3, [r7, #19]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d001      	beq.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8009d88:	7cfb      	ldrb	r3, [r7, #19]
 8009d8a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d02f      	beq.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009d98:	4b2b      	ldr	r3, [pc, #172]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d9e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009da6:	4928      	ldr	r1, [pc, #160]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009da8:	4313      	orrs	r3, r2
 8009daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009db2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009db6:	d10d      	bne.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	3304      	adds	r3, #4
 8009dbc:	2102      	movs	r1, #2
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f000 f844 	bl	8009e4c <RCCEx_PLLSAI1_Config>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009dc8:	7cfb      	ldrb	r3, [r7, #19]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d014      	beq.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8009dce:	7cfb      	ldrb	r3, [r7, #19]
 8009dd0:	74bb      	strb	r3, [r7, #18]
 8009dd2:	e011      	b.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009dd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ddc:	d10c      	bne.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	3320      	adds	r3, #32
 8009de2:	2102      	movs	r1, #2
 8009de4:	4618      	mov	r0, r3
 8009de6:	f000 f925 	bl	800a034 <RCCEx_PLLSAI2_Config>
 8009dea:	4603      	mov	r3, r0
 8009dec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009dee:	7cfb      	ldrb	r3, [r7, #19]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d001      	beq.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8009df4:	7cfb      	ldrb	r3, [r7, #19]
 8009df6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d00a      	beq.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009e04:	4b10      	ldr	r3, [pc, #64]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e0a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e12:	490d      	ldr	r1, [pc, #52]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009e14:	4313      	orrs	r3, r2
 8009e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d00b      	beq.n	8009e3e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009e26:	4b08      	ldr	r3, [pc, #32]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e2c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e36:	4904      	ldr	r1, [pc, #16]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009e3e:	7cbb      	ldrb	r3, [r7, #18]
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3718      	adds	r7, #24
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}
 8009e48:	40021000 	.word	0x40021000

08009e4c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b084      	sub	sp, #16
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009e56:	2300      	movs	r3, #0
 8009e58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009e5a:	4b75      	ldr	r3, [pc, #468]	; (800a030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009e5c:	68db      	ldr	r3, [r3, #12]
 8009e5e:	f003 0303 	and.w	r3, r3, #3
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d018      	beq.n	8009e98 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8009e66:	4b72      	ldr	r3, [pc, #456]	; (800a030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009e68:	68db      	ldr	r3, [r3, #12]
 8009e6a:	f003 0203 	and.w	r2, r3, #3
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d10d      	bne.n	8009e92 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
       ||
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d009      	beq.n	8009e92 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8009e7e:	4b6c      	ldr	r3, [pc, #432]	; (800a030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009e80:	68db      	ldr	r3, [r3, #12]
 8009e82:	091b      	lsrs	r3, r3, #4
 8009e84:	f003 0307 	and.w	r3, r3, #7
 8009e88:	1c5a      	adds	r2, r3, #1
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	685b      	ldr	r3, [r3, #4]
       ||
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d047      	beq.n	8009f22 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8009e92:	2301      	movs	r3, #1
 8009e94:	73fb      	strb	r3, [r7, #15]
 8009e96:	e044      	b.n	8009f22 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	2b03      	cmp	r3, #3
 8009e9e:	d018      	beq.n	8009ed2 <RCCEx_PLLSAI1_Config+0x86>
 8009ea0:	2b03      	cmp	r3, #3
 8009ea2:	d825      	bhi.n	8009ef0 <RCCEx_PLLSAI1_Config+0xa4>
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	d002      	beq.n	8009eae <RCCEx_PLLSAI1_Config+0x62>
 8009ea8:	2b02      	cmp	r3, #2
 8009eaa:	d009      	beq.n	8009ec0 <RCCEx_PLLSAI1_Config+0x74>
 8009eac:	e020      	b.n	8009ef0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009eae:	4b60      	ldr	r3, [pc, #384]	; (800a030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f003 0302 	and.w	r3, r3, #2
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d11d      	bne.n	8009ef6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8009eba:	2301      	movs	r3, #1
 8009ebc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009ebe:	e01a      	b.n	8009ef6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009ec0:	4b5b      	ldr	r3, [pc, #364]	; (800a030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d116      	bne.n	8009efa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009ed0:	e013      	b.n	8009efa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009ed2:	4b57      	ldr	r3, [pc, #348]	; (800a030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d10f      	bne.n	8009efe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009ede:	4b54      	ldr	r3, [pc, #336]	; (800a030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d109      	bne.n	8009efe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8009eea:	2301      	movs	r3, #1
 8009eec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009eee:	e006      	b.n	8009efe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	73fb      	strb	r3, [r7, #15]
      break;
 8009ef4:	e004      	b.n	8009f00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009ef6:	bf00      	nop
 8009ef8:	e002      	b.n	8009f00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009efa:	bf00      	nop
 8009efc:	e000      	b.n	8009f00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009efe:	bf00      	nop
    }

    if(status == HAL_OK)
 8009f00:	7bfb      	ldrb	r3, [r7, #15]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d10d      	bne.n	8009f22 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009f06:	4b4a      	ldr	r3, [pc, #296]	; (800a030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009f08:	68db      	ldr	r3, [r3, #12]
 8009f0a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6819      	ldr	r1, [r3, #0]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	3b01      	subs	r3, #1
 8009f18:	011b      	lsls	r3, r3, #4
 8009f1a:	430b      	orrs	r3, r1
 8009f1c:	4944      	ldr	r1, [pc, #272]	; (800a030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009f22:	7bfb      	ldrb	r3, [r7, #15]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d17d      	bne.n	800a024 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009f28:	4b41      	ldr	r3, [pc, #260]	; (800a030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	4a40      	ldr	r2, [pc, #256]	; (800a030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009f2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009f32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f34:	f7fc fbbe 	bl	80066b4 <HAL_GetTick>
 8009f38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009f3a:	e009      	b.n	8009f50 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009f3c:	f7fc fbba 	bl	80066b4 <HAL_GetTick>
 8009f40:	4602      	mov	r2, r0
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	1ad3      	subs	r3, r2, r3
 8009f46:	2b02      	cmp	r3, #2
 8009f48:	d902      	bls.n	8009f50 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8009f4a:	2303      	movs	r3, #3
 8009f4c:	73fb      	strb	r3, [r7, #15]
        break;
 8009f4e:	e005      	b.n	8009f5c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009f50:	4b37      	ldr	r3, [pc, #220]	; (800a030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d1ef      	bne.n	8009f3c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009f5c:	7bfb      	ldrb	r3, [r7, #15]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d160      	bne.n	800a024 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d111      	bne.n	8009f8c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009f68:	4b31      	ldr	r3, [pc, #196]	; (800a030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009f6a:	691b      	ldr	r3, [r3, #16]
 8009f6c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8009f70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f74:	687a      	ldr	r2, [r7, #4]
 8009f76:	6892      	ldr	r2, [r2, #8]
 8009f78:	0211      	lsls	r1, r2, #8
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	68d2      	ldr	r2, [r2, #12]
 8009f7e:	0912      	lsrs	r2, r2, #4
 8009f80:	0452      	lsls	r2, r2, #17
 8009f82:	430a      	orrs	r2, r1
 8009f84:	492a      	ldr	r1, [pc, #168]	; (800a030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009f86:	4313      	orrs	r3, r2
 8009f88:	610b      	str	r3, [r1, #16]
 8009f8a:	e027      	b.n	8009fdc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	2b01      	cmp	r3, #1
 8009f90:	d112      	bne.n	8009fb8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009f92:	4b27      	ldr	r3, [pc, #156]	; (800a030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009f94:	691b      	ldr	r3, [r3, #16]
 8009f96:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8009f9a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009f9e:	687a      	ldr	r2, [r7, #4]
 8009fa0:	6892      	ldr	r2, [r2, #8]
 8009fa2:	0211      	lsls	r1, r2, #8
 8009fa4:	687a      	ldr	r2, [r7, #4]
 8009fa6:	6912      	ldr	r2, [r2, #16]
 8009fa8:	0852      	lsrs	r2, r2, #1
 8009faa:	3a01      	subs	r2, #1
 8009fac:	0552      	lsls	r2, r2, #21
 8009fae:	430a      	orrs	r2, r1
 8009fb0:	491f      	ldr	r1, [pc, #124]	; (800a030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	610b      	str	r3, [r1, #16]
 8009fb6:	e011      	b.n	8009fdc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009fb8:	4b1d      	ldr	r3, [pc, #116]	; (800a030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009fba:	691b      	ldr	r3, [r3, #16]
 8009fbc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009fc0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009fc4:	687a      	ldr	r2, [r7, #4]
 8009fc6:	6892      	ldr	r2, [r2, #8]
 8009fc8:	0211      	lsls	r1, r2, #8
 8009fca:	687a      	ldr	r2, [r7, #4]
 8009fcc:	6952      	ldr	r2, [r2, #20]
 8009fce:	0852      	lsrs	r2, r2, #1
 8009fd0:	3a01      	subs	r2, #1
 8009fd2:	0652      	lsls	r2, r2, #25
 8009fd4:	430a      	orrs	r2, r1
 8009fd6:	4916      	ldr	r1, [pc, #88]	; (800a030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009fdc:	4b14      	ldr	r3, [pc, #80]	; (800a030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4a13      	ldr	r2, [pc, #76]	; (800a030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009fe2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009fe6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009fe8:	f7fc fb64 	bl	80066b4 <HAL_GetTick>
 8009fec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009fee:	e009      	b.n	800a004 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009ff0:	f7fc fb60 	bl	80066b4 <HAL_GetTick>
 8009ff4:	4602      	mov	r2, r0
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	1ad3      	subs	r3, r2, r3
 8009ffa:	2b02      	cmp	r3, #2
 8009ffc:	d902      	bls.n	800a004 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8009ffe:	2303      	movs	r3, #3
 800a000:	73fb      	strb	r3, [r7, #15]
          break;
 800a002:	e005      	b.n	800a010 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a004:	4b0a      	ldr	r3, [pc, #40]	; (800a030 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d0ef      	beq.n	8009ff0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800a010:	7bfb      	ldrb	r3, [r7, #15]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d106      	bne.n	800a024 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a016:	4b06      	ldr	r3, [pc, #24]	; (800a030 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a018:	691a      	ldr	r2, [r3, #16]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	699b      	ldr	r3, [r3, #24]
 800a01e:	4904      	ldr	r1, [pc, #16]	; (800a030 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a020:	4313      	orrs	r3, r2
 800a022:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800a024:	7bfb      	ldrb	r3, [r7, #15]
}
 800a026:	4618      	mov	r0, r3
 800a028:	3710      	adds	r7, #16
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
 800a02e:	bf00      	nop
 800a030:	40021000 	.word	0x40021000

0800a034 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b084      	sub	sp, #16
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a03e:	2300      	movs	r3, #0
 800a040:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a042:	4b6a      	ldr	r3, [pc, #424]	; (800a1ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800a044:	68db      	ldr	r3, [r3, #12]
 800a046:	f003 0303 	and.w	r3, r3, #3
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d018      	beq.n	800a080 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800a04e:	4b67      	ldr	r3, [pc, #412]	; (800a1ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800a050:	68db      	ldr	r3, [r3, #12]
 800a052:	f003 0203 	and.w	r2, r3, #3
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	429a      	cmp	r2, r3
 800a05c:	d10d      	bne.n	800a07a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
       ||
 800a062:	2b00      	cmp	r3, #0
 800a064:	d009      	beq.n	800a07a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800a066:	4b61      	ldr	r3, [pc, #388]	; (800a1ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800a068:	68db      	ldr	r3, [r3, #12]
 800a06a:	091b      	lsrs	r3, r3, #4
 800a06c:	f003 0307 	and.w	r3, r3, #7
 800a070:	1c5a      	adds	r2, r3, #1
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	685b      	ldr	r3, [r3, #4]
       ||
 800a076:	429a      	cmp	r2, r3
 800a078:	d047      	beq.n	800a10a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a07a:	2301      	movs	r3, #1
 800a07c:	73fb      	strb	r3, [r7, #15]
 800a07e:	e044      	b.n	800a10a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	2b03      	cmp	r3, #3
 800a086:	d018      	beq.n	800a0ba <RCCEx_PLLSAI2_Config+0x86>
 800a088:	2b03      	cmp	r3, #3
 800a08a:	d825      	bhi.n	800a0d8 <RCCEx_PLLSAI2_Config+0xa4>
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	d002      	beq.n	800a096 <RCCEx_PLLSAI2_Config+0x62>
 800a090:	2b02      	cmp	r3, #2
 800a092:	d009      	beq.n	800a0a8 <RCCEx_PLLSAI2_Config+0x74>
 800a094:	e020      	b.n	800a0d8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a096:	4b55      	ldr	r3, [pc, #340]	; (800a1ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f003 0302 	and.w	r3, r3, #2
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d11d      	bne.n	800a0de <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a0a6:	e01a      	b.n	800a0de <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a0a8:	4b50      	ldr	r3, [pc, #320]	; (800a1ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d116      	bne.n	800a0e2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a0b8:	e013      	b.n	800a0e2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a0ba:	4b4c      	ldr	r3, [pc, #304]	; (800a1ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d10f      	bne.n	800a0e6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a0c6:	4b49      	ldr	r3, [pc, #292]	; (800a1ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d109      	bne.n	800a0e6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a0d6:	e006      	b.n	800a0e6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a0d8:	2301      	movs	r3, #1
 800a0da:	73fb      	strb	r3, [r7, #15]
      break;
 800a0dc:	e004      	b.n	800a0e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a0de:	bf00      	nop
 800a0e0:	e002      	b.n	800a0e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a0e2:	bf00      	nop
 800a0e4:	e000      	b.n	800a0e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a0e6:	bf00      	nop
    }

    if(status == HAL_OK)
 800a0e8:	7bfb      	ldrb	r3, [r7, #15]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d10d      	bne.n	800a10a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a0ee:	4b3f      	ldr	r3, [pc, #252]	; (800a1ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6819      	ldr	r1, [r3, #0]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	685b      	ldr	r3, [r3, #4]
 800a0fe:	3b01      	subs	r3, #1
 800a100:	011b      	lsls	r3, r3, #4
 800a102:	430b      	orrs	r3, r1
 800a104:	4939      	ldr	r1, [pc, #228]	; (800a1ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800a106:	4313      	orrs	r3, r2
 800a108:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a10a:	7bfb      	ldrb	r3, [r7, #15]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d167      	bne.n	800a1e0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800a110:	4b36      	ldr	r3, [pc, #216]	; (800a1ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	4a35      	ldr	r2, [pc, #212]	; (800a1ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800a116:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a11a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a11c:	f7fc faca 	bl	80066b4 <HAL_GetTick>
 800a120:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a122:	e009      	b.n	800a138 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a124:	f7fc fac6 	bl	80066b4 <HAL_GetTick>
 800a128:	4602      	mov	r2, r0
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	1ad3      	subs	r3, r2, r3
 800a12e:	2b02      	cmp	r3, #2
 800a130:	d902      	bls.n	800a138 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a132:	2303      	movs	r3, #3
 800a134:	73fb      	strb	r3, [r7, #15]
        break;
 800a136:	e005      	b.n	800a144 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a138:	4b2c      	ldr	r3, [pc, #176]	; (800a1ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a140:	2b00      	cmp	r3, #0
 800a142:	d1ef      	bne.n	800a124 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a144:	7bfb      	ldrb	r3, [r7, #15]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d14a      	bne.n	800a1e0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d111      	bne.n	800a174 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a150:	4b26      	ldr	r3, [pc, #152]	; (800a1ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800a152:	695b      	ldr	r3, [r3, #20]
 800a154:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800a158:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a15c:	687a      	ldr	r2, [r7, #4]
 800a15e:	6892      	ldr	r2, [r2, #8]
 800a160:	0211      	lsls	r1, r2, #8
 800a162:	687a      	ldr	r2, [r7, #4]
 800a164:	68d2      	ldr	r2, [r2, #12]
 800a166:	0912      	lsrs	r2, r2, #4
 800a168:	0452      	lsls	r2, r2, #17
 800a16a:	430a      	orrs	r2, r1
 800a16c:	491f      	ldr	r1, [pc, #124]	; (800a1ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800a16e:	4313      	orrs	r3, r2
 800a170:	614b      	str	r3, [r1, #20]
 800a172:	e011      	b.n	800a198 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a174:	4b1d      	ldr	r3, [pc, #116]	; (800a1ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800a176:	695b      	ldr	r3, [r3, #20]
 800a178:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a17c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a180:	687a      	ldr	r2, [r7, #4]
 800a182:	6892      	ldr	r2, [r2, #8]
 800a184:	0211      	lsls	r1, r2, #8
 800a186:	687a      	ldr	r2, [r7, #4]
 800a188:	6912      	ldr	r2, [r2, #16]
 800a18a:	0852      	lsrs	r2, r2, #1
 800a18c:	3a01      	subs	r2, #1
 800a18e:	0652      	lsls	r2, r2, #25
 800a190:	430a      	orrs	r2, r1
 800a192:	4916      	ldr	r1, [pc, #88]	; (800a1ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800a194:	4313      	orrs	r3, r2
 800a196:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800a198:	4b14      	ldr	r3, [pc, #80]	; (800a1ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	4a13      	ldr	r2, [pc, #76]	; (800a1ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800a19e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1a4:	f7fc fa86 	bl	80066b4 <HAL_GetTick>
 800a1a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a1aa:	e009      	b.n	800a1c0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a1ac:	f7fc fa82 	bl	80066b4 <HAL_GetTick>
 800a1b0:	4602      	mov	r2, r0
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	1ad3      	subs	r3, r2, r3
 800a1b6:	2b02      	cmp	r3, #2
 800a1b8:	d902      	bls.n	800a1c0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800a1ba:	2303      	movs	r3, #3
 800a1bc:	73fb      	strb	r3, [r7, #15]
          break;
 800a1be:	e005      	b.n	800a1cc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a1c0:	4b0a      	ldr	r3, [pc, #40]	; (800a1ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d0ef      	beq.n	800a1ac <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800a1cc:	7bfb      	ldrb	r3, [r7, #15]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d106      	bne.n	800a1e0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800a1d2:	4b06      	ldr	r3, [pc, #24]	; (800a1ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800a1d4:	695a      	ldr	r2, [r3, #20]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	695b      	ldr	r3, [r3, #20]
 800a1da:	4904      	ldr	r1, [pc, #16]	; (800a1ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800a1e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3710      	adds	r7, #16
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}
 800a1ea:	bf00      	nop
 800a1ec:	40021000 	.word	0x40021000

0800a1f0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b084      	sub	sp, #16
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d06c      	beq.n	800a2dc <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a208:	b2db      	uxtb	r3, r3
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d106      	bne.n	800a21c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2200      	movs	r2, #0
 800a212:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f7fb f8dc 	bl	80053d4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2202      	movs	r2, #2
 800a220:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	22ca      	movs	r2, #202	; 0xca
 800a22a:	625a      	str	r2, [r3, #36]	; 0x24
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	2253      	movs	r2, #83	; 0x53
 800a232:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 fa49 	bl	800a6cc <RTC_EnterInitMode>
 800a23a:	4603      	mov	r3, r0
 800a23c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800a23e:	7bfb      	ldrb	r3, [r7, #15]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d14b      	bne.n	800a2dc <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	689b      	ldr	r3, [r3, #8]
 800a24a:	687a      	ldr	r2, [r7, #4]
 800a24c:	6812      	ldr	r2, [r2, #0]
 800a24e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a252:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a256:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	6899      	ldr	r1, [r3, #8]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	685a      	ldr	r2, [r3, #4]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	691b      	ldr	r3, [r3, #16]
 800a266:	431a      	orrs	r2, r3
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	699b      	ldr	r3, [r3, #24]
 800a26c:	431a      	orrs	r2, r3
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	430a      	orrs	r2, r1
 800a274:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	687a      	ldr	r2, [r7, #4]
 800a27c:	68d2      	ldr	r2, [r2, #12]
 800a27e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	6919      	ldr	r1, [r3, #16]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	689b      	ldr	r3, [r3, #8]
 800a28a:	041a      	lsls	r2, r3, #16
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	430a      	orrs	r2, r1
 800a292:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f000 fa4d 	bl	800a734 <RTC_ExitInitMode>
 800a29a:	4603      	mov	r3, r0
 800a29c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800a29e:	7bfb      	ldrb	r3, [r7, #15]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d11b      	bne.n	800a2dc <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f022 0203 	bic.w	r2, r2, #3
 800a2b2:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	69da      	ldr	r2, [r3, #28]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	695b      	ldr	r3, [r3, #20]
 800a2c2:	431a      	orrs	r2, r3
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	430a      	orrs	r2, r1
 800a2ca:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	22ff      	movs	r2, #255	; 0xff
 800a2d2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800a2dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3710      	adds	r7, #16
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}

0800a2e6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a2e6:	b590      	push	{r4, r7, lr}
 800a2e8:	b087      	sub	sp, #28
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	60f8      	str	r0, [r7, #12]
 800a2ee:	60b9      	str	r1, [r7, #8]
 800a2f0:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	d101      	bne.n	800a300 <HAL_RTC_SetTime+0x1a>
 800a2fc:	2302      	movs	r3, #2
 800a2fe:	e08b      	b.n	800a418 <HAL_RTC_SetTime+0x132>
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2201      	movs	r2, #1
 800a304:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2202      	movs	r2, #2
 800a30c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	22ca      	movs	r2, #202	; 0xca
 800a316:	625a      	str	r2, [r3, #36]	; 0x24
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	2253      	movs	r2, #83	; 0x53
 800a31e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a320:	68f8      	ldr	r0, [r7, #12]
 800a322:	f000 f9d3 	bl	800a6cc <RTC_EnterInitMode>
 800a326:	4603      	mov	r3, r0
 800a328:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a32a:	7cfb      	ldrb	r3, [r7, #19]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d163      	bne.n	800a3f8 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d126      	bne.n	800a384 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a340:	2b00      	cmp	r3, #0
 800a342:	d102      	bne.n	800a34a <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	2200      	movs	r2, #0
 800a348:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	4618      	mov	r0, r3
 800a350:	f000 fa2e 	bl	800a7b0 <RTC_ByteToBcd2>
 800a354:	4603      	mov	r3, r0
 800a356:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	785b      	ldrb	r3, [r3, #1]
 800a35c:	4618      	mov	r0, r3
 800a35e:	f000 fa27 	bl	800a7b0 <RTC_ByteToBcd2>
 800a362:	4603      	mov	r3, r0
 800a364:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a366:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	789b      	ldrb	r3, [r3, #2]
 800a36c:	4618      	mov	r0, r3
 800a36e:	f000 fa1f 	bl	800a7b0 <RTC_ByteToBcd2>
 800a372:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a374:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	78db      	ldrb	r3, [r3, #3]
 800a37c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a37e:	4313      	orrs	r3, r2
 800a380:	617b      	str	r3, [r7, #20]
 800a382:	e018      	b.n	800a3b6 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	689b      	ldr	r3, [r3, #8]
 800a38a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d102      	bne.n	800a398 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	2200      	movs	r2, #0
 800a396:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	785b      	ldrb	r3, [r3, #1]
 800a3a2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a3a4:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a3a6:	68ba      	ldr	r2, [r7, #8]
 800a3a8:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a3aa:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	78db      	ldrb	r3, [r3, #3]
 800a3b0:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681a      	ldr	r2, [r3, #0]
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a3c0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a3c4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	689a      	ldr	r2, [r3, #8]
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a3d4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	6899      	ldr	r1, [r3, #8]
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	68da      	ldr	r2, [r3, #12]
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	691b      	ldr	r3, [r3, #16]
 800a3e4:	431a      	orrs	r2, r3
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	430a      	orrs	r2, r1
 800a3ec:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a3ee:	68f8      	ldr	r0, [r7, #12]
 800a3f0:	f000 f9a0 	bl	800a734 <RTC_ExitInitMode>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	22ff      	movs	r2, #255	; 0xff
 800a3fe:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800a400:	7cfb      	ldrb	r3, [r7, #19]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d103      	bne.n	800a40e <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2201      	movs	r2, #1
 800a40a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2200      	movs	r2, #0
 800a412:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800a416:	7cfb      	ldrb	r3, [r7, #19]
}
 800a418:	4618      	mov	r0, r3
 800a41a:	371c      	adds	r7, #28
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd90      	pop	{r4, r7, pc}

0800a420 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b086      	sub	sp, #24
 800a424:	af00      	add	r7, sp, #0
 800a426:	60f8      	str	r0, [r7, #12]
 800a428:	60b9      	str	r1, [r7, #8]
 800a42a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	691b      	ldr	r3, [r3, #16]
 800a43c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a44e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a452:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	0c1b      	lsrs	r3, r3, #16
 800a458:	b2db      	uxtb	r3, r3
 800a45a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a45e:	b2da      	uxtb	r2, r3
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	0a1b      	lsrs	r3, r3, #8
 800a468:	b2db      	uxtb	r3, r3
 800a46a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a46e:	b2da      	uxtb	r2, r3
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	b2db      	uxtb	r3, r3
 800a478:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a47c:	b2da      	uxtb	r2, r3
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	0d9b      	lsrs	r3, r3, #22
 800a486:	b2db      	uxtb	r3, r3
 800a488:	f003 0301 	and.w	r3, r3, #1
 800a48c:	b2da      	uxtb	r2, r3
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d11a      	bne.n	800a4ce <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	781b      	ldrb	r3, [r3, #0]
 800a49c:	4618      	mov	r0, r3
 800a49e:	f000 f9a7 	bl	800a7f0 <RTC_Bcd2ToByte>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	785b      	ldrb	r3, [r3, #1]
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f000 f99e 	bl	800a7f0 <RTC_Bcd2ToByte>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	789b      	ldrb	r3, [r3, #2]
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f000 f995 	bl	800a7f0 <RTC_Bcd2ToByte>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	461a      	mov	r2, r3
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800a4ce:	2300      	movs	r3, #0
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3718      	adds	r7, #24
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a4d8:	b590      	push	{r4, r7, lr}
 800a4da:	b087      	sub	sp, #28
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	60f8      	str	r0, [r7, #12]
 800a4e0:	60b9      	str	r1, [r7, #8]
 800a4e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a4ea:	2b01      	cmp	r3, #1
 800a4ec:	d101      	bne.n	800a4f2 <HAL_RTC_SetDate+0x1a>
 800a4ee:	2302      	movs	r3, #2
 800a4f0:	e075      	b.n	800a5de <HAL_RTC_SetDate+0x106>
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	2201      	movs	r2, #1
 800a4f6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2202      	movs	r2, #2
 800a4fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d10e      	bne.n	800a526 <HAL_RTC_SetDate+0x4e>
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	785b      	ldrb	r3, [r3, #1]
 800a50c:	f003 0310 	and.w	r3, r3, #16
 800a510:	2b00      	cmp	r3, #0
 800a512:	d008      	beq.n	800a526 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	785b      	ldrb	r3, [r3, #1]
 800a518:	f023 0310 	bic.w	r3, r3, #16
 800a51c:	b2db      	uxtb	r3, r3
 800a51e:	330a      	adds	r3, #10
 800a520:	b2da      	uxtb	r2, r3
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d11c      	bne.n	800a566 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	78db      	ldrb	r3, [r3, #3]
 800a530:	4618      	mov	r0, r3
 800a532:	f000 f93d 	bl	800a7b0 <RTC_ByteToBcd2>
 800a536:	4603      	mov	r3, r0
 800a538:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	785b      	ldrb	r3, [r3, #1]
 800a53e:	4618      	mov	r0, r3
 800a540:	f000 f936 	bl	800a7b0 <RTC_ByteToBcd2>
 800a544:	4603      	mov	r3, r0
 800a546:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a548:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	789b      	ldrb	r3, [r3, #2]
 800a54e:	4618      	mov	r0, r3
 800a550:	f000 f92e 	bl	800a7b0 <RTC_ByteToBcd2>
 800a554:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a556:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	781b      	ldrb	r3, [r3, #0]
 800a55e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a560:	4313      	orrs	r3, r2
 800a562:	617b      	str	r3, [r7, #20]
 800a564:	e00e      	b.n	800a584 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	78db      	ldrb	r3, [r3, #3]
 800a56a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	785b      	ldrb	r3, [r3, #1]
 800a570:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a572:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800a574:	68ba      	ldr	r2, [r7, #8]
 800a576:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800a578:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a580:	4313      	orrs	r3, r2
 800a582:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	22ca      	movs	r2, #202	; 0xca
 800a58a:	625a      	str	r2, [r3, #36]	; 0x24
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	2253      	movs	r2, #83	; 0x53
 800a592:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a594:	68f8      	ldr	r0, [r7, #12]
 800a596:	f000 f899 	bl	800a6cc <RTC_EnterInitMode>
 800a59a:	4603      	mov	r3, r0
 800a59c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a59e:	7cfb      	ldrb	r3, [r7, #19]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d10c      	bne.n	800a5be <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681a      	ldr	r2, [r3, #0]
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a5ae:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a5b2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a5b4:	68f8      	ldr	r0, [r7, #12]
 800a5b6:	f000 f8bd 	bl	800a734 <RTC_ExitInitMode>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	22ff      	movs	r2, #255	; 0xff
 800a5c4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800a5c6:	7cfb      	ldrb	r3, [r7, #19]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d103      	bne.n	800a5d4 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800a5dc:	7cfb      	ldrb	r3, [r7, #19]
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	371c      	adds	r7, #28
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd90      	pop	{r4, r7, pc}

0800a5e6 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a5e6:	b580      	push	{r7, lr}
 800a5e8:	b086      	sub	sp, #24
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	60f8      	str	r0, [r7, #12]
 800a5ee:	60b9      	str	r1, [r7, #8]
 800a5f0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	685b      	ldr	r3, [r3, #4]
 800a5f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a5fc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a600:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	0c1b      	lsrs	r3, r3, #16
 800a606:	b2da      	uxtb	r2, r3
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	0a1b      	lsrs	r3, r3, #8
 800a610:	b2db      	uxtb	r3, r3
 800a612:	f003 031f 	and.w	r3, r3, #31
 800a616:	b2da      	uxtb	r2, r3
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	b2db      	uxtb	r3, r3
 800a620:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a624:	b2da      	uxtb	r2, r3
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	0b5b      	lsrs	r3, r3, #13
 800a62e:	b2db      	uxtb	r3, r3
 800a630:	f003 0307 	and.w	r3, r3, #7
 800a634:	b2da      	uxtb	r2, r3
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d11a      	bne.n	800a676 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	78db      	ldrb	r3, [r3, #3]
 800a644:	4618      	mov	r0, r3
 800a646:	f000 f8d3 	bl	800a7f0 <RTC_Bcd2ToByte>
 800a64a:	4603      	mov	r3, r0
 800a64c:	461a      	mov	r2, r3
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	785b      	ldrb	r3, [r3, #1]
 800a656:	4618      	mov	r0, r3
 800a658:	f000 f8ca 	bl	800a7f0 <RTC_Bcd2ToByte>
 800a65c:	4603      	mov	r3, r0
 800a65e:	461a      	mov	r2, r3
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	789b      	ldrb	r3, [r3, #2]
 800a668:	4618      	mov	r0, r3
 800a66a:	f000 f8c1 	bl	800a7f0 <RTC_Bcd2ToByte>
 800a66e:	4603      	mov	r3, r0
 800a670:	461a      	mov	r2, r3
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800a676:	2300      	movs	r3, #0
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3718      	adds	r7, #24
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b084      	sub	sp, #16
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	68da      	ldr	r2, [r3, #12]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a696:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800a698:	f7fc f80c 	bl	80066b4 <HAL_GetTick>
 800a69c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a69e:	e009      	b.n	800a6b4 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a6a0:	f7fc f808 	bl	80066b4 <HAL_GetTick>
 800a6a4:	4602      	mov	r2, r0
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	1ad3      	subs	r3, r2, r3
 800a6aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a6ae:	d901      	bls.n	800a6b4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800a6b0:	2303      	movs	r3, #3
 800a6b2:	e007      	b.n	800a6c4 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	68db      	ldr	r3, [r3, #12]
 800a6ba:	f003 0320 	and.w	r3, r3, #32
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d0ee      	beq.n	800a6a0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800a6c2:	2300      	movs	r3, #0
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3710      	adds	r7, #16
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b084      	sub	sp, #16
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	68db      	ldr	r3, [r3, #12]
 800a6de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d120      	bne.n	800a728 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a6ee:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a6f0:	f7fb ffe0 	bl	80066b4 <HAL_GetTick>
 800a6f4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a6f6:	e00d      	b.n	800a714 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a6f8:	f7fb ffdc 	bl	80066b4 <HAL_GetTick>
 800a6fc:	4602      	mov	r2, r0
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	1ad3      	subs	r3, r2, r3
 800a702:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a706:	d905      	bls.n	800a714 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800a708:	2303      	movs	r3, #3
 800a70a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2203      	movs	r2, #3
 800a710:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	68db      	ldr	r3, [r3, #12]
 800a71a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d102      	bne.n	800a728 <RTC_EnterInitMode+0x5c>
 800a722:	7bfb      	ldrb	r3, [r7, #15]
 800a724:	2b03      	cmp	r3, #3
 800a726:	d1e7      	bne.n	800a6f8 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800a728:	7bfb      	ldrb	r3, [r7, #15]
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3710      	adds	r7, #16
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}
	...

0800a734 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b084      	sub	sp, #16
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a73c:	2300      	movs	r3, #0
 800a73e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800a740:	4b1a      	ldr	r3, [pc, #104]	; (800a7ac <RTC_ExitInitMode+0x78>)
 800a742:	68db      	ldr	r3, [r3, #12]
 800a744:	4a19      	ldr	r2, [pc, #100]	; (800a7ac <RTC_ExitInitMode+0x78>)
 800a746:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a74a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a74c:	4b17      	ldr	r3, [pc, #92]	; (800a7ac <RTC_ExitInitMode+0x78>)
 800a74e:	689b      	ldr	r3, [r3, #8]
 800a750:	f003 0320 	and.w	r3, r3, #32
 800a754:	2b00      	cmp	r3, #0
 800a756:	d10c      	bne.n	800a772 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f7ff ff91 	bl	800a680 <HAL_RTC_WaitForSynchro>
 800a75e:	4603      	mov	r3, r0
 800a760:	2b00      	cmp	r3, #0
 800a762:	d01e      	beq.n	800a7a2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2203      	movs	r2, #3
 800a768:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a76c:	2303      	movs	r3, #3
 800a76e:	73fb      	strb	r3, [r7, #15]
 800a770:	e017      	b.n	800a7a2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a772:	4b0e      	ldr	r3, [pc, #56]	; (800a7ac <RTC_ExitInitMode+0x78>)
 800a774:	689b      	ldr	r3, [r3, #8]
 800a776:	4a0d      	ldr	r2, [pc, #52]	; (800a7ac <RTC_ExitInitMode+0x78>)
 800a778:	f023 0320 	bic.w	r3, r3, #32
 800a77c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f7ff ff7e 	bl	800a680 <HAL_RTC_WaitForSynchro>
 800a784:	4603      	mov	r3, r0
 800a786:	2b00      	cmp	r3, #0
 800a788:	d005      	beq.n	800a796 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2203      	movs	r2, #3
 800a78e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a792:	2303      	movs	r3, #3
 800a794:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a796:	4b05      	ldr	r3, [pc, #20]	; (800a7ac <RTC_ExitInitMode+0x78>)
 800a798:	689b      	ldr	r3, [r3, #8]
 800a79a:	4a04      	ldr	r2, [pc, #16]	; (800a7ac <RTC_ExitInitMode+0x78>)
 800a79c:	f043 0320 	orr.w	r3, r3, #32
 800a7a0:	6093      	str	r3, [r2, #8]
  }

  return status;
 800a7a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3710      	adds	r7, #16
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}
 800a7ac:	40002800 	.word	0x40002800

0800a7b0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b085      	sub	sp, #20
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800a7be:	79fb      	ldrb	r3, [r7, #7]
 800a7c0:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800a7c2:	e005      	b.n	800a7d0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800a7ca:	7afb      	ldrb	r3, [r7, #11]
 800a7cc:	3b0a      	subs	r3, #10
 800a7ce:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800a7d0:	7afb      	ldrb	r3, [r7, #11]
 800a7d2:	2b09      	cmp	r3, #9
 800a7d4:	d8f6      	bhi.n	800a7c4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	b2db      	uxtb	r3, r3
 800a7da:	011b      	lsls	r3, r3, #4
 800a7dc:	b2da      	uxtb	r2, r3
 800a7de:	7afb      	ldrb	r3, [r7, #11]
 800a7e0:	4313      	orrs	r3, r2
 800a7e2:	b2db      	uxtb	r3, r3
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3714      	adds	r7, #20
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr

0800a7f0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b085      	sub	sp, #20
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800a7fa:	79fb      	ldrb	r3, [r7, #7]
 800a7fc:	091b      	lsrs	r3, r3, #4
 800a7fe:	b2db      	uxtb	r3, r3
 800a800:	461a      	mov	r2, r3
 800a802:	0092      	lsls	r2, r2, #2
 800a804:	4413      	add	r3, r2
 800a806:	005b      	lsls	r3, r3, #1
 800a808:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800a80a:	79fb      	ldrb	r3, [r7, #7]
 800a80c:	f003 030f 	and.w	r3, r3, #15
 800a810:	b2da      	uxtb	r2, r3
 800a812:	7bfb      	ldrb	r3, [r7, #15]
 800a814:	4413      	add	r3, r2
 800a816:	b2db      	uxtb	r3, r3
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3714      	adds	r7, #20
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b084      	sub	sp, #16
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d101      	bne.n	800a836 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a832:	2301      	movs	r3, #1
 800a834:	e095      	b.n	800a962 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d108      	bne.n	800a850 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	685b      	ldr	r3, [r3, #4]
 800a842:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a846:	d009      	beq.n	800a85c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2200      	movs	r2, #0
 800a84c:	61da      	str	r2, [r3, #28]
 800a84e:	e005      	b.n	800a85c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2200      	movs	r2, #0
 800a854:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2200      	movs	r2, #0
 800a85a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2200      	movs	r2, #0
 800a860:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a868:	b2db      	uxtb	r3, r3
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d106      	bne.n	800a87c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2200      	movs	r2, #0
 800a872:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f7fa fdde 	bl	8005438 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2202      	movs	r2, #2
 800a880:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	681a      	ldr	r2, [r3, #0]
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a892:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	68db      	ldr	r3, [r3, #12]
 800a898:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a89c:	d902      	bls.n	800a8a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	60fb      	str	r3, [r7, #12]
 800a8a2:	e002      	b.n	800a8aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a8a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a8a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	68db      	ldr	r3, [r3, #12]
 800a8ae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a8b2:	d007      	beq.n	800a8c4 <HAL_SPI_Init+0xa0>
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	68db      	ldr	r3, [r3, #12]
 800a8b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a8bc:	d002      	beq.n	800a8c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	689b      	ldr	r3, [r3, #8]
 800a8d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a8d4:	431a      	orrs	r2, r3
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	691b      	ldr	r3, [r3, #16]
 800a8da:	f003 0302 	and.w	r3, r3, #2
 800a8de:	431a      	orrs	r2, r3
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	695b      	ldr	r3, [r3, #20]
 800a8e4:	f003 0301 	and.w	r3, r3, #1
 800a8e8:	431a      	orrs	r2, r3
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	699b      	ldr	r3, [r3, #24]
 800a8ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a8f2:	431a      	orrs	r2, r3
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	69db      	ldr	r3, [r3, #28]
 800a8f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a8fc:	431a      	orrs	r2, r3
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6a1b      	ldr	r3, [r3, #32]
 800a902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a906:	ea42 0103 	orr.w	r1, r2, r3
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a90e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	430a      	orrs	r2, r1
 800a918:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	699b      	ldr	r3, [r3, #24]
 800a91e:	0c1b      	lsrs	r3, r3, #16
 800a920:	f003 0204 	and.w	r2, r3, #4
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a928:	f003 0310 	and.w	r3, r3, #16
 800a92c:	431a      	orrs	r2, r3
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a932:	f003 0308 	and.w	r3, r3, #8
 800a936:	431a      	orrs	r2, r3
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	68db      	ldr	r3, [r3, #12]
 800a93c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a940:	ea42 0103 	orr.w	r1, r2, r3
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	430a      	orrs	r2, r1
 800a950:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2200      	movs	r2, #0
 800a956:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2201      	movs	r2, #1
 800a95c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a960:	2300      	movs	r3, #0
}
 800a962:	4618      	mov	r0, r3
 800a964:	3710      	adds	r7, #16
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}

0800a96a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a96a:	b580      	push	{r7, lr}
 800a96c:	b088      	sub	sp, #32
 800a96e:	af00      	add	r7, sp, #0
 800a970:	60f8      	str	r0, [r7, #12]
 800a972:	60b9      	str	r1, [r7, #8]
 800a974:	603b      	str	r3, [r7, #0]
 800a976:	4613      	mov	r3, r2
 800a978:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a97a:	2300      	movs	r3, #0
 800a97c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a984:	2b01      	cmp	r3, #1
 800a986:	d101      	bne.n	800a98c <HAL_SPI_Transmit+0x22>
 800a988:	2302      	movs	r3, #2
 800a98a:	e158      	b.n	800ac3e <HAL_SPI_Transmit+0x2d4>
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	2201      	movs	r2, #1
 800a990:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a994:	f7fb fe8e 	bl	80066b4 <HAL_GetTick>
 800a998:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a99a:	88fb      	ldrh	r3, [r7, #6]
 800a99c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a9a4:	b2db      	uxtb	r3, r3
 800a9a6:	2b01      	cmp	r3, #1
 800a9a8:	d002      	beq.n	800a9b0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a9aa:	2302      	movs	r3, #2
 800a9ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a9ae:	e13d      	b.n	800ac2c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d002      	beq.n	800a9bc <HAL_SPI_Transmit+0x52>
 800a9b6:	88fb      	ldrh	r3, [r7, #6]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d102      	bne.n	800a9c2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a9bc:	2301      	movs	r3, #1
 800a9be:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a9c0:	e134      	b.n	800ac2c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	2203      	movs	r2, #3
 800a9c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	68ba      	ldr	r2, [r7, #8]
 800a9d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	88fa      	ldrh	r2, [r7, #6]
 800a9da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	88fa      	ldrh	r2, [r7, #6]
 800a9e0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	2200      	movs	r2, #0
 800aa02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	689b      	ldr	r3, [r3, #8]
 800aa08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa0c:	d10f      	bne.n	800aa2e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	681a      	ldr	r2, [r3, #0]
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	681a      	ldr	r2, [r3, #0]
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aa2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa38:	2b40      	cmp	r3, #64	; 0x40
 800aa3a:	d007      	beq.n	800aa4c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	681a      	ldr	r2, [r3, #0]
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aa4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	68db      	ldr	r3, [r3, #12]
 800aa50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aa54:	d94b      	bls.n	800aaee <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	685b      	ldr	r3, [r3, #4]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d002      	beq.n	800aa64 <HAL_SPI_Transmit+0xfa>
 800aa5e:	8afb      	ldrh	r3, [r7, #22]
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d13e      	bne.n	800aae2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa68:	881a      	ldrh	r2, [r3, #0]
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa74:	1c9a      	adds	r2, r3, #2
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa7e:	b29b      	uxth	r3, r3
 800aa80:	3b01      	subs	r3, #1
 800aa82:	b29a      	uxth	r2, r3
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800aa88:	e02b      	b.n	800aae2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	689b      	ldr	r3, [r3, #8]
 800aa90:	f003 0302 	and.w	r3, r3, #2
 800aa94:	2b02      	cmp	r3, #2
 800aa96:	d112      	bne.n	800aabe <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa9c:	881a      	ldrh	r2, [r3, #0]
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaa8:	1c9a      	adds	r2, r3, #2
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aab2:	b29b      	uxth	r3, r3
 800aab4:	3b01      	subs	r3, #1
 800aab6:	b29a      	uxth	r2, r3
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	87da      	strh	r2, [r3, #62]	; 0x3e
 800aabc:	e011      	b.n	800aae2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aabe:	f7fb fdf9 	bl	80066b4 <HAL_GetTick>
 800aac2:	4602      	mov	r2, r0
 800aac4:	69bb      	ldr	r3, [r7, #24]
 800aac6:	1ad3      	subs	r3, r2, r3
 800aac8:	683a      	ldr	r2, [r7, #0]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d803      	bhi.n	800aad6 <HAL_SPI_Transmit+0x16c>
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aad4:	d102      	bne.n	800aadc <HAL_SPI_Transmit+0x172>
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d102      	bne.n	800aae2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800aadc:	2303      	movs	r3, #3
 800aade:	77fb      	strb	r3, [r7, #31]
          goto error;
 800aae0:	e0a4      	b.n	800ac2c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aae6:	b29b      	uxth	r3, r3
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d1ce      	bne.n	800aa8a <HAL_SPI_Transmit+0x120>
 800aaec:	e07c      	b.n	800abe8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	685b      	ldr	r3, [r3, #4]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d002      	beq.n	800aafc <HAL_SPI_Transmit+0x192>
 800aaf6:	8afb      	ldrh	r3, [r7, #22]
 800aaf8:	2b01      	cmp	r3, #1
 800aafa:	d170      	bne.n	800abde <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab00:	b29b      	uxth	r3, r3
 800ab02:	2b01      	cmp	r3, #1
 800ab04:	d912      	bls.n	800ab2c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab0a:	881a      	ldrh	r2, [r3, #0]
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab16:	1c9a      	adds	r2, r3, #2
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab20:	b29b      	uxth	r3, r3
 800ab22:	3b02      	subs	r3, #2
 800ab24:	b29a      	uxth	r2, r3
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ab2a:	e058      	b.n	800abde <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	330c      	adds	r3, #12
 800ab36:	7812      	ldrb	r2, [r2, #0]
 800ab38:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab3e:	1c5a      	adds	r2, r3, #1
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab48:	b29b      	uxth	r3, r3
 800ab4a:	3b01      	subs	r3, #1
 800ab4c:	b29a      	uxth	r2, r3
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800ab52:	e044      	b.n	800abde <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	689b      	ldr	r3, [r3, #8]
 800ab5a:	f003 0302 	and.w	r3, r3, #2
 800ab5e:	2b02      	cmp	r3, #2
 800ab60:	d12b      	bne.n	800abba <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab66:	b29b      	uxth	r3, r3
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	d912      	bls.n	800ab92 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab70:	881a      	ldrh	r2, [r3, #0]
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab7c:	1c9a      	adds	r2, r3, #2
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab86:	b29b      	uxth	r3, r3
 800ab88:	3b02      	subs	r3, #2
 800ab8a:	b29a      	uxth	r2, r3
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ab90:	e025      	b.n	800abde <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	330c      	adds	r3, #12
 800ab9c:	7812      	ldrb	r2, [r2, #0]
 800ab9e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aba4:	1c5a      	adds	r2, r3, #1
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800abae:	b29b      	uxth	r3, r3
 800abb0:	3b01      	subs	r3, #1
 800abb2:	b29a      	uxth	r2, r3
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800abb8:	e011      	b.n	800abde <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800abba:	f7fb fd7b 	bl	80066b4 <HAL_GetTick>
 800abbe:	4602      	mov	r2, r0
 800abc0:	69bb      	ldr	r3, [r7, #24]
 800abc2:	1ad3      	subs	r3, r2, r3
 800abc4:	683a      	ldr	r2, [r7, #0]
 800abc6:	429a      	cmp	r2, r3
 800abc8:	d803      	bhi.n	800abd2 <HAL_SPI_Transmit+0x268>
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800abd0:	d102      	bne.n	800abd8 <HAL_SPI_Transmit+0x26e>
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d102      	bne.n	800abde <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800abd8:	2303      	movs	r3, #3
 800abda:	77fb      	strb	r3, [r7, #31]
          goto error;
 800abdc:	e026      	b.n	800ac2c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800abe2:	b29b      	uxth	r3, r3
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d1b5      	bne.n	800ab54 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800abe8:	69ba      	ldr	r2, [r7, #24]
 800abea:	6839      	ldr	r1, [r7, #0]
 800abec:	68f8      	ldr	r0, [r7, #12]
 800abee:	f001 f9dd 	bl	800bfac <SPI_EndRxTxTransaction>
 800abf2:	4603      	mov	r3, r0
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d002      	beq.n	800abfe <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	2220      	movs	r2, #32
 800abfc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	689b      	ldr	r3, [r3, #8]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d10a      	bne.n	800ac1c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ac06:	2300      	movs	r3, #0
 800ac08:	613b      	str	r3, [r7, #16]
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	68db      	ldr	r3, [r3, #12]
 800ac10:	613b      	str	r3, [r7, #16]
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	689b      	ldr	r3, [r3, #8]
 800ac18:	613b      	str	r3, [r7, #16]
 800ac1a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d002      	beq.n	800ac2a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800ac24:	2301      	movs	r3, #1
 800ac26:	77fb      	strb	r3, [r7, #31]
 800ac28:	e000      	b.n	800ac2c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800ac2a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2201      	movs	r2, #1
 800ac30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2200      	movs	r2, #0
 800ac38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800ac3c:	7ffb      	ldrb	r3, [r7, #31]
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3720      	adds	r7, #32
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}

0800ac46 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ac46:	b580      	push	{r7, lr}
 800ac48:	b088      	sub	sp, #32
 800ac4a:	af02      	add	r7, sp, #8
 800ac4c:	60f8      	str	r0, [r7, #12]
 800ac4e:	60b9      	str	r1, [r7, #8]
 800ac50:	603b      	str	r3, [r7, #0]
 800ac52:	4613      	mov	r3, r2
 800ac54:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ac56:	2300      	movs	r3, #0
 800ac58:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ac62:	d112      	bne.n	800ac8a <HAL_SPI_Receive+0x44>
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	689b      	ldr	r3, [r3, #8]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d10e      	bne.n	800ac8a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	2204      	movs	r2, #4
 800ac70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ac74:	88fa      	ldrh	r2, [r7, #6]
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	9300      	str	r3, [sp, #0]
 800ac7a:	4613      	mov	r3, r2
 800ac7c:	68ba      	ldr	r2, [r7, #8]
 800ac7e:	68b9      	ldr	r1, [r7, #8]
 800ac80:	68f8      	ldr	r0, [r7, #12]
 800ac82:	f000 f910 	bl	800aea6 <HAL_SPI_TransmitReceive>
 800ac86:	4603      	mov	r3, r0
 800ac88:	e109      	b.n	800ae9e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ac90:	2b01      	cmp	r3, #1
 800ac92:	d101      	bne.n	800ac98 <HAL_SPI_Receive+0x52>
 800ac94:	2302      	movs	r3, #2
 800ac96:	e102      	b.n	800ae9e <HAL_SPI_Receive+0x258>
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aca0:	f7fb fd08 	bl	80066b4 <HAL_GetTick>
 800aca4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800acac:	b2db      	uxtb	r3, r3
 800acae:	2b01      	cmp	r3, #1
 800acb0:	d002      	beq.n	800acb8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800acb2:	2302      	movs	r3, #2
 800acb4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800acb6:	e0e9      	b.n	800ae8c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d002      	beq.n	800acc4 <HAL_SPI_Receive+0x7e>
 800acbe:	88fb      	ldrh	r3, [r7, #6]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d102      	bne.n	800acca <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800acc4:	2301      	movs	r3, #1
 800acc6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800acc8:	e0e0      	b.n	800ae8c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2204      	movs	r2, #4
 800acce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2200      	movs	r2, #0
 800acd6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	68ba      	ldr	r2, [r7, #8]
 800acdc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	88fa      	ldrh	r2, [r7, #6]
 800ace2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	88fa      	ldrh	r2, [r7, #6]
 800acea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	2200      	movs	r2, #0
 800acf2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	2200      	movs	r2, #0
 800acf8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	2200      	movs	r2, #0
 800acfe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2200      	movs	r2, #0
 800ad04:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	68db      	ldr	r3, [r3, #12]
 800ad10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ad14:	d908      	bls.n	800ad28 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	685a      	ldr	r2, [r3, #4]
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ad24:	605a      	str	r2, [r3, #4]
 800ad26:	e007      	b.n	800ad38 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	685a      	ldr	r2, [r3, #4]
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ad36:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	689b      	ldr	r3, [r3, #8]
 800ad3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad40:	d10f      	bne.n	800ad62 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	681a      	ldr	r2, [r3, #0]
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	681a      	ldr	r2, [r3, #0]
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ad60:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad6c:	2b40      	cmp	r3, #64	; 0x40
 800ad6e:	d007      	beq.n	800ad80 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	681a      	ldr	r2, [r3, #0]
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ad7e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	68db      	ldr	r3, [r3, #12]
 800ad84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ad88:	d867      	bhi.n	800ae5a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800ad8a:	e030      	b.n	800adee <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	689b      	ldr	r3, [r3, #8]
 800ad92:	f003 0301 	and.w	r3, r3, #1
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d117      	bne.n	800adca <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f103 020c 	add.w	r2, r3, #12
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ada6:	7812      	ldrb	r2, [r2, #0]
 800ada8:	b2d2      	uxtb	r2, r2
 800adaa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adb0:	1c5a      	adds	r2, r3, #1
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800adbc:	b29b      	uxth	r3, r3
 800adbe:	3b01      	subs	r3, #1
 800adc0:	b29a      	uxth	r2, r3
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800adc8:	e011      	b.n	800adee <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800adca:	f7fb fc73 	bl	80066b4 <HAL_GetTick>
 800adce:	4602      	mov	r2, r0
 800add0:	693b      	ldr	r3, [r7, #16]
 800add2:	1ad3      	subs	r3, r2, r3
 800add4:	683a      	ldr	r2, [r7, #0]
 800add6:	429a      	cmp	r2, r3
 800add8:	d803      	bhi.n	800ade2 <HAL_SPI_Receive+0x19c>
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ade0:	d102      	bne.n	800ade8 <HAL_SPI_Receive+0x1a2>
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d102      	bne.n	800adee <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800ade8:	2303      	movs	r3, #3
 800adea:	75fb      	strb	r3, [r7, #23]
          goto error;
 800adec:	e04e      	b.n	800ae8c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800adf4:	b29b      	uxth	r3, r3
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d1c8      	bne.n	800ad8c <HAL_SPI_Receive+0x146>
 800adfa:	e034      	b.n	800ae66 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	689b      	ldr	r3, [r3, #8]
 800ae02:	f003 0301 	and.w	r3, r3, #1
 800ae06:	2b01      	cmp	r3, #1
 800ae08:	d115      	bne.n	800ae36 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	68da      	ldr	r2, [r3, #12]
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae14:	b292      	uxth	r2, r2
 800ae16:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae1c:	1c9a      	adds	r2, r3, #2
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ae28:	b29b      	uxth	r3, r3
 800ae2a:	3b01      	subs	r3, #1
 800ae2c:	b29a      	uxth	r2, r3
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800ae34:	e011      	b.n	800ae5a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ae36:	f7fb fc3d 	bl	80066b4 <HAL_GetTick>
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	1ad3      	subs	r3, r2, r3
 800ae40:	683a      	ldr	r2, [r7, #0]
 800ae42:	429a      	cmp	r2, r3
 800ae44:	d803      	bhi.n	800ae4e <HAL_SPI_Receive+0x208>
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae4c:	d102      	bne.n	800ae54 <HAL_SPI_Receive+0x20e>
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d102      	bne.n	800ae5a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800ae54:	2303      	movs	r3, #3
 800ae56:	75fb      	strb	r3, [r7, #23]
          goto error;
 800ae58:	e018      	b.n	800ae8c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ae60:	b29b      	uxth	r3, r3
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d1ca      	bne.n	800adfc <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ae66:	693a      	ldr	r2, [r7, #16]
 800ae68:	6839      	ldr	r1, [r7, #0]
 800ae6a:	68f8      	ldr	r0, [r7, #12]
 800ae6c:	f001 f846 	bl	800befc <SPI_EndRxTransaction>
 800ae70:	4603      	mov	r3, r0
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d002      	beq.n	800ae7c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2220      	movs	r2, #32
 800ae7a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d002      	beq.n	800ae8a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800ae84:	2301      	movs	r3, #1
 800ae86:	75fb      	strb	r3, [r7, #23]
 800ae88:	e000      	b.n	800ae8c <HAL_SPI_Receive+0x246>
  }

error :
 800ae8a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	2201      	movs	r2, #1
 800ae90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	2200      	movs	r2, #0
 800ae98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800ae9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3718      	adds	r7, #24
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}

0800aea6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800aea6:	b580      	push	{r7, lr}
 800aea8:	b08a      	sub	sp, #40	; 0x28
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	60f8      	str	r0, [r7, #12]
 800aeae:	60b9      	str	r1, [r7, #8]
 800aeb0:	607a      	str	r2, [r7, #4]
 800aeb2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d101      	bne.n	800aecc <HAL_SPI_TransmitReceive+0x26>
 800aec8:	2302      	movs	r3, #2
 800aeca:	e1fb      	b.n	800b2c4 <HAL_SPI_TransmitReceive+0x41e>
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	2201      	movs	r2, #1
 800aed0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aed4:	f7fb fbee 	bl	80066b4 <HAL_GetTick>
 800aed8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800aee0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	685b      	ldr	r3, [r3, #4]
 800aee6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800aee8:	887b      	ldrh	r3, [r7, #2]
 800aeea:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800aeec:	887b      	ldrh	r3, [r7, #2]
 800aeee:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800aef0:	7efb      	ldrb	r3, [r7, #27]
 800aef2:	2b01      	cmp	r3, #1
 800aef4:	d00e      	beq.n	800af14 <HAL_SPI_TransmitReceive+0x6e>
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aefc:	d106      	bne.n	800af0c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	689b      	ldr	r3, [r3, #8]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d102      	bne.n	800af0c <HAL_SPI_TransmitReceive+0x66>
 800af06:	7efb      	ldrb	r3, [r7, #27]
 800af08:	2b04      	cmp	r3, #4
 800af0a:	d003      	beq.n	800af14 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800af0c:	2302      	movs	r3, #2
 800af0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800af12:	e1cd      	b.n	800b2b0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d005      	beq.n	800af26 <HAL_SPI_TransmitReceive+0x80>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d002      	beq.n	800af26 <HAL_SPI_TransmitReceive+0x80>
 800af20:	887b      	ldrh	r3, [r7, #2]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d103      	bne.n	800af2e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800af26:	2301      	movs	r3, #1
 800af28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800af2c:	e1c0      	b.n	800b2b0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800af34:	b2db      	uxtb	r3, r3
 800af36:	2b04      	cmp	r3, #4
 800af38:	d003      	beq.n	800af42 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2205      	movs	r2, #5
 800af3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	2200      	movs	r2, #0
 800af46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	687a      	ldr	r2, [r7, #4]
 800af4c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	887a      	ldrh	r2, [r7, #2]
 800af52:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	887a      	ldrh	r2, [r7, #2]
 800af5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	68ba      	ldr	r2, [r7, #8]
 800af62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	887a      	ldrh	r2, [r7, #2]
 800af68:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	887a      	ldrh	r2, [r7, #2]
 800af6e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	2200      	movs	r2, #0
 800af74:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2200      	movs	r2, #0
 800af7a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	68db      	ldr	r3, [r3, #12]
 800af80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800af84:	d802      	bhi.n	800af8c <HAL_SPI_TransmitReceive+0xe6>
 800af86:	8a3b      	ldrh	r3, [r7, #16]
 800af88:	2b01      	cmp	r3, #1
 800af8a:	d908      	bls.n	800af9e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	685a      	ldr	r2, [r3, #4]
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800af9a:	605a      	str	r2, [r3, #4]
 800af9c:	e007      	b.n	800afae <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	685a      	ldr	r2, [r3, #4]
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800afac:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afb8:	2b40      	cmp	r3, #64	; 0x40
 800afba:	d007      	beq.n	800afcc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	681a      	ldr	r2, [r3, #0]
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800afca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	68db      	ldr	r3, [r3, #12]
 800afd0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800afd4:	d97c      	bls.n	800b0d0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	685b      	ldr	r3, [r3, #4]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d002      	beq.n	800afe4 <HAL_SPI_TransmitReceive+0x13e>
 800afde:	8a7b      	ldrh	r3, [r7, #18]
 800afe0:	2b01      	cmp	r3, #1
 800afe2:	d169      	bne.n	800b0b8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afe8:	881a      	ldrh	r2, [r3, #0]
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aff4:	1c9a      	adds	r2, r3, #2
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800affe:	b29b      	uxth	r3, r3
 800b000:	3b01      	subs	r3, #1
 800b002:	b29a      	uxth	r2, r3
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b008:	e056      	b.n	800b0b8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	689b      	ldr	r3, [r3, #8]
 800b010:	f003 0302 	and.w	r3, r3, #2
 800b014:	2b02      	cmp	r3, #2
 800b016:	d11b      	bne.n	800b050 <HAL_SPI_TransmitReceive+0x1aa>
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d016      	beq.n	800b050 <HAL_SPI_TransmitReceive+0x1aa>
 800b022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b024:	2b01      	cmp	r3, #1
 800b026:	d113      	bne.n	800b050 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b02c:	881a      	ldrh	r2, [r3, #0]
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b038:	1c9a      	adds	r2, r3, #2
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b042:	b29b      	uxth	r3, r3
 800b044:	3b01      	subs	r3, #1
 800b046:	b29a      	uxth	r2, r3
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b04c:	2300      	movs	r3, #0
 800b04e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	689b      	ldr	r3, [r3, #8]
 800b056:	f003 0301 	and.w	r3, r3, #1
 800b05a:	2b01      	cmp	r3, #1
 800b05c:	d11c      	bne.n	800b098 <HAL_SPI_TransmitReceive+0x1f2>
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b064:	b29b      	uxth	r3, r3
 800b066:	2b00      	cmp	r3, #0
 800b068:	d016      	beq.n	800b098 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	68da      	ldr	r2, [r3, #12]
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b074:	b292      	uxth	r2, r2
 800b076:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b07c:	1c9a      	adds	r2, r3, #2
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b088:	b29b      	uxth	r3, r3
 800b08a:	3b01      	subs	r3, #1
 800b08c:	b29a      	uxth	r2, r3
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b094:	2301      	movs	r3, #1
 800b096:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b098:	f7fb fb0c 	bl	80066b4 <HAL_GetTick>
 800b09c:	4602      	mov	r2, r0
 800b09e:	69fb      	ldr	r3, [r7, #28]
 800b0a0:	1ad3      	subs	r3, r2, r3
 800b0a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d807      	bhi.n	800b0b8 <HAL_SPI_TransmitReceive+0x212>
 800b0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b0ae:	d003      	beq.n	800b0b8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800b0b0:	2303      	movs	r3, #3
 800b0b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800b0b6:	e0fb      	b.n	800b2b0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b0bc:	b29b      	uxth	r3, r3
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d1a3      	bne.n	800b00a <HAL_SPI_TransmitReceive+0x164>
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b0c8:	b29b      	uxth	r3, r3
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d19d      	bne.n	800b00a <HAL_SPI_TransmitReceive+0x164>
 800b0ce:	e0df      	b.n	800b290 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	685b      	ldr	r3, [r3, #4]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d003      	beq.n	800b0e0 <HAL_SPI_TransmitReceive+0x23a>
 800b0d8:	8a7b      	ldrh	r3, [r7, #18]
 800b0da:	2b01      	cmp	r3, #1
 800b0dc:	f040 80cb 	bne.w	800b276 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b0e4:	b29b      	uxth	r3, r3
 800b0e6:	2b01      	cmp	r3, #1
 800b0e8:	d912      	bls.n	800b110 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ee:	881a      	ldrh	r2, [r3, #0]
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0fa:	1c9a      	adds	r2, r3, #2
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b104:	b29b      	uxth	r3, r3
 800b106:	3b02      	subs	r3, #2
 800b108:	b29a      	uxth	r2, r3
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b10e:	e0b2      	b.n	800b276 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	330c      	adds	r3, #12
 800b11a:	7812      	ldrb	r2, [r2, #0]
 800b11c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b122:	1c5a      	adds	r2, r3, #1
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b12c:	b29b      	uxth	r3, r3
 800b12e:	3b01      	subs	r3, #1
 800b130:	b29a      	uxth	r2, r3
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b136:	e09e      	b.n	800b276 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	689b      	ldr	r3, [r3, #8]
 800b13e:	f003 0302 	and.w	r3, r3, #2
 800b142:	2b02      	cmp	r3, #2
 800b144:	d134      	bne.n	800b1b0 <HAL_SPI_TransmitReceive+0x30a>
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b14a:	b29b      	uxth	r3, r3
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d02f      	beq.n	800b1b0 <HAL_SPI_TransmitReceive+0x30a>
 800b150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b152:	2b01      	cmp	r3, #1
 800b154:	d12c      	bne.n	800b1b0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b15a:	b29b      	uxth	r3, r3
 800b15c:	2b01      	cmp	r3, #1
 800b15e:	d912      	bls.n	800b186 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b164:	881a      	ldrh	r2, [r3, #0]
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b170:	1c9a      	adds	r2, r3, #2
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b17a:	b29b      	uxth	r3, r3
 800b17c:	3b02      	subs	r3, #2
 800b17e:	b29a      	uxth	r2, r3
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b184:	e012      	b.n	800b1ac <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	330c      	adds	r3, #12
 800b190:	7812      	ldrb	r2, [r2, #0]
 800b192:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b198:	1c5a      	adds	r2, r3, #1
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	3b01      	subs	r3, #1
 800b1a6:	b29a      	uxth	r2, r3
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	689b      	ldr	r3, [r3, #8]
 800b1b6:	f003 0301 	and.w	r3, r3, #1
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	d148      	bne.n	800b250 <HAL_SPI_TransmitReceive+0x3aa>
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b1c4:	b29b      	uxth	r3, r3
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d042      	beq.n	800b250 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b1d0:	b29b      	uxth	r3, r3
 800b1d2:	2b01      	cmp	r3, #1
 800b1d4:	d923      	bls.n	800b21e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	68da      	ldr	r2, [r3, #12]
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1e0:	b292      	uxth	r2, r2
 800b1e2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1e8:	1c9a      	adds	r2, r3, #2
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b1f4:	b29b      	uxth	r3, r3
 800b1f6:	3b02      	subs	r3, #2
 800b1f8:	b29a      	uxth	r2, r3
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b206:	b29b      	uxth	r3, r3
 800b208:	2b01      	cmp	r3, #1
 800b20a:	d81f      	bhi.n	800b24c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	685a      	ldr	r2, [r3, #4]
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b21a:	605a      	str	r2, [r3, #4]
 800b21c:	e016      	b.n	800b24c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f103 020c 	add.w	r2, r3, #12
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b22a:	7812      	ldrb	r2, [r2, #0]
 800b22c:	b2d2      	uxtb	r2, r2
 800b22e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b234:	1c5a      	adds	r2, r3, #1
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b240:	b29b      	uxth	r3, r3
 800b242:	3b01      	subs	r3, #1
 800b244:	b29a      	uxth	r2, r3
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b24c:	2301      	movs	r3, #1
 800b24e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b250:	f7fb fa30 	bl	80066b4 <HAL_GetTick>
 800b254:	4602      	mov	r2, r0
 800b256:	69fb      	ldr	r3, [r7, #28]
 800b258:	1ad3      	subs	r3, r2, r3
 800b25a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b25c:	429a      	cmp	r2, r3
 800b25e:	d803      	bhi.n	800b268 <HAL_SPI_TransmitReceive+0x3c2>
 800b260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b262:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b266:	d102      	bne.n	800b26e <HAL_SPI_TransmitReceive+0x3c8>
 800b268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d103      	bne.n	800b276 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800b26e:	2303      	movs	r3, #3
 800b270:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800b274:	e01c      	b.n	800b2b0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b27a:	b29b      	uxth	r3, r3
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	f47f af5b 	bne.w	800b138 <HAL_SPI_TransmitReceive+0x292>
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b288:	b29b      	uxth	r3, r3
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	f47f af54 	bne.w	800b138 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b290:	69fa      	ldr	r2, [r7, #28]
 800b292:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b294:	68f8      	ldr	r0, [r7, #12]
 800b296:	f000 fe89 	bl	800bfac <SPI_EndRxTxTransaction>
 800b29a:	4603      	mov	r3, r0
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d006      	beq.n	800b2ae <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	2220      	movs	r2, #32
 800b2aa:	661a      	str	r2, [r3, #96]	; 0x60
 800b2ac:	e000      	b.n	800b2b0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800b2ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	2201      	movs	r2, #1
 800b2b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b2c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	3728      	adds	r7, #40	; 0x28
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}

0800b2cc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b086      	sub	sp, #24
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	60f8      	str	r0, [r7, #12]
 800b2d4:	60b9      	str	r1, [r7, #8]
 800b2d6:	4613      	mov	r3, r2
 800b2d8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b2e4:	2b01      	cmp	r3, #1
 800b2e6:	d101      	bne.n	800b2ec <HAL_SPI_Transmit_DMA+0x20>
 800b2e8:	2302      	movs	r3, #2
 800b2ea:	e0d8      	b.n	800b49e <HAL_SPI_Transmit_DMA+0x1d2>
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	2201      	movs	r2, #1
 800b2f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b2fa:	b2db      	uxtb	r3, r3
 800b2fc:	2b01      	cmp	r3, #1
 800b2fe:	d002      	beq.n	800b306 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800b300:	2302      	movs	r3, #2
 800b302:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b304:	e0c6      	b.n	800b494 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d002      	beq.n	800b312 <HAL_SPI_Transmit_DMA+0x46>
 800b30c:	88fb      	ldrh	r3, [r7, #6]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d102      	bne.n	800b318 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800b312:	2301      	movs	r3, #1
 800b314:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b316:	e0bd      	b.n	800b494 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	2203      	movs	r2, #3
 800b31c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	2200      	movs	r2, #0
 800b324:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	68ba      	ldr	r2, [r7, #8]
 800b32a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	88fa      	ldrh	r2, [r7, #6]
 800b330:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	88fa      	ldrh	r2, [r7, #6]
 800b336:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	2200      	movs	r2, #0
 800b33c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	2200      	movs	r2, #0
 800b342:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	2200      	movs	r2, #0
 800b348:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	2200      	movs	r2, #0
 800b34e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	2200      	movs	r2, #0
 800b356:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	689b      	ldr	r3, [r3, #8]
 800b35e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b362:	d10f      	bne.n	800b384 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	681a      	ldr	r2, [r3, #0]
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b372:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	681a      	ldr	r2, [r3, #0]
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b382:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b388:	4a47      	ldr	r2, [pc, #284]	; (800b4a8 <HAL_SPI_Transmit_DMA+0x1dc>)
 800b38a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b390:	4a46      	ldr	r2, [pc, #280]	; (800b4ac <HAL_SPI_Transmit_DMA+0x1e0>)
 800b392:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b398:	4a45      	ldr	r2, [pc, #276]	; (800b4b0 <HAL_SPI_Transmit_DMA+0x1e4>)
 800b39a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	685a      	ldr	r2, [r3, #4]
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b3b2:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	68db      	ldr	r3, [r3, #12]
 800b3b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b3bc:	d82d      	bhi.n	800b41a <HAL_SPI_Transmit_DMA+0x14e>
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3c2:	699b      	ldr	r3, [r3, #24]
 800b3c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b3c8:	d127      	bne.n	800b41a <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b3ce:	b29b      	uxth	r3, r3
 800b3d0:	f003 0301 	and.w	r3, r3, #1
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d10f      	bne.n	800b3f8 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	685a      	ldr	r2, [r3, #4]
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b3e6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b3ec:	b29b      	uxth	r3, r3
 800b3ee:	085b      	lsrs	r3, r3, #1
 800b3f0:	b29a      	uxth	r2, r3
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b3f6:	e010      	b.n	800b41a <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	685a      	ldr	r2, [r3, #4]
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b406:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b40c:	b29b      	uxth	r3, r3
 800b40e:	085b      	lsrs	r3, r3, #1
 800b410:	b29b      	uxth	r3, r3
 800b412:	3301      	adds	r3, #1
 800b414:	b29a      	uxth	r2, r3
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b422:	4619      	mov	r1, r3
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	330c      	adds	r3, #12
 800b42a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b430:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b432:	f7fb fb6b 	bl	8006b0c <HAL_DMA_Start_IT>
 800b436:	4603      	mov	r3, r0
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d00c      	beq.n	800b456 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b440:	f043 0210 	orr.w	r2, r3, #16
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800b448:	2301      	movs	r3, #1
 800b44a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	2201      	movs	r2, #1
 800b450:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800b454:	e01e      	b.n	800b494 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b460:	2b40      	cmp	r3, #64	; 0x40
 800b462:	d007      	beq.n	800b474 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	681a      	ldr	r2, [r3, #0]
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b472:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	685a      	ldr	r2, [r3, #4]
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f042 0220 	orr.w	r2, r2, #32
 800b482:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	685a      	ldr	r2, [r3, #4]
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f042 0202 	orr.w	r2, r2, #2
 800b492:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	2200      	movs	r2, #0
 800b498:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b49c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3718      	adds	r7, #24
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}
 800b4a6:	bf00      	nop
 800b4a8:	0800bc03 	.word	0x0800bc03
 800b4ac:	0800ba25 	.word	0x0800ba25
 800b4b0:	0800bc57 	.word	0x0800bc57

0800b4b4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b086      	sub	sp, #24
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	60f8      	str	r0, [r7, #12]
 800b4bc:	60b9      	str	r1, [r7, #8]
 800b4be:	607a      	str	r2, [r7, #4]
 800b4c0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b4cc:	2b01      	cmp	r3, #1
 800b4ce:	d101      	bne.n	800b4d4 <HAL_SPI_TransmitReceive_DMA+0x20>
 800b4d0:	2302      	movs	r3, #2
 800b4d2:	e16c      	b.n	800b7ae <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	2201      	movs	r2, #1
 800b4d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b4e2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	685b      	ldr	r3, [r3, #4]
 800b4e8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800b4ea:	7dbb      	ldrb	r3, [r7, #22]
 800b4ec:	2b01      	cmp	r3, #1
 800b4ee:	d00d      	beq.n	800b50c <HAL_SPI_TransmitReceive_DMA+0x58>
 800b4f0:	693b      	ldr	r3, [r7, #16]
 800b4f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b4f6:	d106      	bne.n	800b506 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	689b      	ldr	r3, [r3, #8]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d102      	bne.n	800b506 <HAL_SPI_TransmitReceive_DMA+0x52>
 800b500:	7dbb      	ldrb	r3, [r7, #22]
 800b502:	2b04      	cmp	r3, #4
 800b504:	d002      	beq.n	800b50c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800b506:	2302      	movs	r3, #2
 800b508:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b50a:	e14b      	b.n	800b7a4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d005      	beq.n	800b51e <HAL_SPI_TransmitReceive_DMA+0x6a>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d002      	beq.n	800b51e <HAL_SPI_TransmitReceive_DMA+0x6a>
 800b518:	887b      	ldrh	r3, [r7, #2]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d102      	bne.n	800b524 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800b51e:	2301      	movs	r3, #1
 800b520:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b522:	e13f      	b.n	800b7a4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b52a:	b2db      	uxtb	r3, r3
 800b52c:	2b04      	cmp	r3, #4
 800b52e:	d003      	beq.n	800b538 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	2205      	movs	r2, #5
 800b534:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2200      	movs	r2, #0
 800b53c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	68ba      	ldr	r2, [r7, #8]
 800b542:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	887a      	ldrh	r2, [r7, #2]
 800b548:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	887a      	ldrh	r2, [r7, #2]
 800b54e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	687a      	ldr	r2, [r7, #4]
 800b554:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	887a      	ldrh	r2, [r7, #2]
 800b55a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	887a      	ldrh	r2, [r7, #2]
 800b562:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	2200      	movs	r2, #0
 800b56a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	2200      	movs	r2, #0
 800b570:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	685a      	ldr	r2, [r3, #4]
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800b580:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	68db      	ldr	r3, [r3, #12]
 800b586:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b58a:	d908      	bls.n	800b59e <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	685a      	ldr	r2, [r3, #4]
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b59a:	605a      	str	r2, [r3, #4]
 800b59c:	e06f      	b.n	800b67e <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	685a      	ldr	r2, [r3, #4]
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b5ac:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5b2:	699b      	ldr	r3, [r3, #24]
 800b5b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5b8:	d126      	bne.n	800b608 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800b5be:	f003 0301 	and.w	r3, r3, #1
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d10f      	bne.n	800b5e6 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	685a      	ldr	r2, [r3, #4]
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b5d4:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b5da:	b29b      	uxth	r3, r3
 800b5dc:	085b      	lsrs	r3, r3, #1
 800b5de:	b29a      	uxth	r2, r3
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b5e4:	e010      	b.n	800b608 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	685a      	ldr	r2, [r3, #4]
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b5f4:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b5fa:	b29b      	uxth	r3, r3
 800b5fc:	085b      	lsrs	r3, r3, #1
 800b5fe:	b29b      	uxth	r3, r3
 800b600:	3301      	adds	r3, #1
 800b602:	b29a      	uxth	r2, r3
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b60c:	699b      	ldr	r3, [r3, #24]
 800b60e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b612:	d134      	bne.n	800b67e <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	685a      	ldr	r2, [r3, #4]
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b622:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b62a:	b29b      	uxth	r3, r3
 800b62c:	f003 0301 	and.w	r3, r3, #1
 800b630:	2b00      	cmp	r3, #0
 800b632:	d111      	bne.n	800b658 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	685a      	ldr	r2, [r3, #4]
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b642:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b64a:	b29b      	uxth	r3, r3
 800b64c:	085b      	lsrs	r3, r3, #1
 800b64e:	b29a      	uxth	r2, r3
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800b656:	e012      	b.n	800b67e <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	685a      	ldr	r2, [r3, #4]
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b666:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b66e:	b29b      	uxth	r3, r3
 800b670:	085b      	lsrs	r3, r3, #1
 800b672:	b29b      	uxth	r3, r3
 800b674:	3301      	adds	r3, #1
 800b676:	b29a      	uxth	r2, r3
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b684:	b2db      	uxtb	r3, r3
 800b686:	2b04      	cmp	r3, #4
 800b688:	d108      	bne.n	800b69c <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b68e:	4a4a      	ldr	r2, [pc, #296]	; (800b7b8 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800b690:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b696:	4a49      	ldr	r2, [pc, #292]	; (800b7bc <HAL_SPI_TransmitReceive_DMA+0x308>)
 800b698:	62da      	str	r2, [r3, #44]	; 0x2c
 800b69a:	e007      	b.n	800b6ac <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6a0:	4a47      	ldr	r2, [pc, #284]	; (800b7c0 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800b6a2:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6a8:	4a46      	ldr	r2, [pc, #280]	; (800b7c4 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800b6aa:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6b0:	4a45      	ldr	r2, [pc, #276]	; (800b7c8 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800b6b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	330c      	adds	r3, #12
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6cc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b6d4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800b6d6:	f7fb fa19 	bl	8006b0c <HAL_DMA_Start_IT>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d00c      	beq.n	800b6fa <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b6e4:	f043 0210 	orr.w	r2, r3, #16
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	2201      	movs	r2, #1
 800b6f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800b6f8:	e054      	b.n	800b7a4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	685a      	ldr	r2, [r3, #4]
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f042 0201 	orr.w	r2, r2, #1
 800b708:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b70e:	2200      	movs	r2, #0
 800b710:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b716:	2200      	movs	r2, #0
 800b718:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b71e:	2200      	movs	r2, #0
 800b720:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b726:	2200      	movs	r2, #0
 800b728:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b732:	4619      	mov	r1, r3
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	330c      	adds	r3, #12
 800b73a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b740:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b742:	f7fb f9e3 	bl	8006b0c <HAL_DMA_Start_IT>
 800b746:	4603      	mov	r3, r0
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d00c      	beq.n	800b766 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b750:	f043 0210 	orr.w	r2, r3, #16
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800b758:	2301      	movs	r3, #1
 800b75a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	2201      	movs	r2, #1
 800b760:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800b764:	e01e      	b.n	800b7a4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b770:	2b40      	cmp	r3, #64	; 0x40
 800b772:	d007      	beq.n	800b784 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	681a      	ldr	r2, [r3, #0]
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b782:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	685a      	ldr	r2, [r3, #4]
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f042 0220 	orr.w	r2, r2, #32
 800b792:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	685a      	ldr	r2, [r3, #4]
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f042 0202 	orr.w	r2, r2, #2
 800b7a2:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b7ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3718      	adds	r7, #24
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}
 800b7b6:	bf00      	nop
 800b7b8:	0800bc1f 	.word	0x0800bc1f
 800b7bc:	0800bacb 	.word	0x0800bacb
 800b7c0:	0800bc3b 	.word	0x0800bc3b
 800b7c4:	0800bb73 	.word	0x0800bb73
 800b7c8:	0800bc57 	.word	0x0800bc57

0800b7cc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b088      	sub	sp, #32
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	685b      	ldr	r3, [r3, #4]
 800b7da:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	689b      	ldr	r3, [r3, #8]
 800b7e2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b7e4:	69bb      	ldr	r3, [r7, #24]
 800b7e6:	099b      	lsrs	r3, r3, #6
 800b7e8:	f003 0301 	and.w	r3, r3, #1
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d10f      	bne.n	800b810 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b7f0:	69bb      	ldr	r3, [r7, #24]
 800b7f2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d00a      	beq.n	800b810 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b7fa:	69fb      	ldr	r3, [r7, #28]
 800b7fc:	099b      	lsrs	r3, r3, #6
 800b7fe:	f003 0301 	and.w	r3, r3, #1
 800b802:	2b00      	cmp	r3, #0
 800b804:	d004      	beq.n	800b810 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	4798      	blx	r3
    return;
 800b80e:	e0d7      	b.n	800b9c0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800b810:	69bb      	ldr	r3, [r7, #24]
 800b812:	085b      	lsrs	r3, r3, #1
 800b814:	f003 0301 	and.w	r3, r3, #1
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d00a      	beq.n	800b832 <HAL_SPI_IRQHandler+0x66>
 800b81c:	69fb      	ldr	r3, [r7, #28]
 800b81e:	09db      	lsrs	r3, r3, #7
 800b820:	f003 0301 	and.w	r3, r3, #1
 800b824:	2b00      	cmp	r3, #0
 800b826:	d004      	beq.n	800b832 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	4798      	blx	r3
    return;
 800b830:	e0c6      	b.n	800b9c0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800b832:	69bb      	ldr	r3, [r7, #24]
 800b834:	095b      	lsrs	r3, r3, #5
 800b836:	f003 0301 	and.w	r3, r3, #1
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d10c      	bne.n	800b858 <HAL_SPI_IRQHandler+0x8c>
 800b83e:	69bb      	ldr	r3, [r7, #24]
 800b840:	099b      	lsrs	r3, r3, #6
 800b842:	f003 0301 	and.w	r3, r3, #1
 800b846:	2b00      	cmp	r3, #0
 800b848:	d106      	bne.n	800b858 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800b84a:	69bb      	ldr	r3, [r7, #24]
 800b84c:	0a1b      	lsrs	r3, r3, #8
 800b84e:	f003 0301 	and.w	r3, r3, #1
 800b852:	2b00      	cmp	r3, #0
 800b854:	f000 80b4 	beq.w	800b9c0 <HAL_SPI_IRQHandler+0x1f4>
 800b858:	69fb      	ldr	r3, [r7, #28]
 800b85a:	095b      	lsrs	r3, r3, #5
 800b85c:	f003 0301 	and.w	r3, r3, #1
 800b860:	2b00      	cmp	r3, #0
 800b862:	f000 80ad 	beq.w	800b9c0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800b866:	69bb      	ldr	r3, [r7, #24]
 800b868:	099b      	lsrs	r3, r3, #6
 800b86a:	f003 0301 	and.w	r3, r3, #1
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d023      	beq.n	800b8ba <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b878:	b2db      	uxtb	r3, r3
 800b87a:	2b03      	cmp	r3, #3
 800b87c:	d011      	beq.n	800b8a2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b882:	f043 0204 	orr.w	r2, r3, #4
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b88a:	2300      	movs	r3, #0
 800b88c:	617b      	str	r3, [r7, #20]
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	68db      	ldr	r3, [r3, #12]
 800b894:	617b      	str	r3, [r7, #20]
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	689b      	ldr	r3, [r3, #8]
 800b89c:	617b      	str	r3, [r7, #20]
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	e00b      	b.n	800b8ba <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	613b      	str	r3, [r7, #16]
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	68db      	ldr	r3, [r3, #12]
 800b8ac:	613b      	str	r3, [r7, #16]
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	689b      	ldr	r3, [r3, #8]
 800b8b4:	613b      	str	r3, [r7, #16]
 800b8b6:	693b      	ldr	r3, [r7, #16]
        return;
 800b8b8:	e082      	b.n	800b9c0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800b8ba:	69bb      	ldr	r3, [r7, #24]
 800b8bc:	095b      	lsrs	r3, r3, #5
 800b8be:	f003 0301 	and.w	r3, r3, #1
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d014      	beq.n	800b8f0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b8ca:	f043 0201 	orr.w	r2, r3, #1
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	60fb      	str	r3, [r7, #12]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	689b      	ldr	r3, [r3, #8]
 800b8dc:	60fb      	str	r3, [r7, #12]
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	681a      	ldr	r2, [r3, #0]
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b8ec:	601a      	str	r2, [r3, #0]
 800b8ee:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800b8f0:	69bb      	ldr	r3, [r7, #24]
 800b8f2:	0a1b      	lsrs	r3, r3, #8
 800b8f4:	f003 0301 	and.w	r3, r3, #1
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d00c      	beq.n	800b916 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b900:	f043 0208 	orr.w	r2, r3, #8
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b908:	2300      	movs	r3, #0
 800b90a:	60bb      	str	r3, [r7, #8]
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	689b      	ldr	r3, [r3, #8]
 800b912:	60bb      	str	r3, [r7, #8]
 800b914:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d04f      	beq.n	800b9be <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	685a      	ldr	r2, [r3, #4]
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b92c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2201      	movs	r2, #1
 800b932:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800b936:	69fb      	ldr	r3, [r7, #28]
 800b938:	f003 0302 	and.w	r3, r3, #2
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d104      	bne.n	800b94a <HAL_SPI_IRQHandler+0x17e>
 800b940:	69fb      	ldr	r3, [r7, #28]
 800b942:	f003 0301 	and.w	r3, r3, #1
 800b946:	2b00      	cmp	r3, #0
 800b948:	d034      	beq.n	800b9b4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	685a      	ldr	r2, [r3, #4]
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	f022 0203 	bic.w	r2, r2, #3
 800b958:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d011      	beq.n	800b986 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b966:	4a18      	ldr	r2, [pc, #96]	; (800b9c8 <HAL_SPI_IRQHandler+0x1fc>)
 800b968:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b96e:	4618      	mov	r0, r3
 800b970:	f7fb f96a 	bl	8006c48 <HAL_DMA_Abort_IT>
 800b974:	4603      	mov	r3, r0
 800b976:	2b00      	cmp	r3, #0
 800b978:	d005      	beq.n	800b986 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b97e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d016      	beq.n	800b9bc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b992:	4a0d      	ldr	r2, [pc, #52]	; (800b9c8 <HAL_SPI_IRQHandler+0x1fc>)
 800b994:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b99a:	4618      	mov	r0, r3
 800b99c:	f7fb f954 	bl	8006c48 <HAL_DMA_Abort_IT>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d00a      	beq.n	800b9bc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b9aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800b9b2:	e003      	b.n	800b9bc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800b9b4:	6878      	ldr	r0, [r7, #4]
 800b9b6:	f7f8 ff75 	bl	80048a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800b9ba:	e000      	b.n	800b9be <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800b9bc:	bf00      	nop
    return;
 800b9be:	bf00      	nop
  }
}
 800b9c0:	3720      	adds	r7, #32
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}
 800b9c6:	bf00      	nop
 800b9c8:	0800bc97 	.word	0x0800bc97

0800b9cc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b083      	sub	sp, #12
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800b9d4:	bf00      	nop
 800b9d6:	370c      	adds	r7, #12
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9de:	4770      	bx	lr

0800b9e0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b9e0:	b480      	push	{r7}
 800b9e2:	b083      	sub	sp, #12
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800b9e8:	bf00      	nop
 800b9ea:	370c      	adds	r7, #12
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f2:	4770      	bx	lr

0800b9f4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b083      	sub	sp, #12
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800b9fc:	bf00      	nop
 800b9fe:	370c      	adds	r7, #12
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr

0800ba08 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b083      	sub	sp, #12
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ba16:	b2db      	uxtb	r3, r3
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	370c      	adds	r7, #12
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba22:	4770      	bx	lr

0800ba24 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b086      	sub	sp, #24
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba30:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ba32:	f7fa fe3f 	bl	80066b4 <HAL_GetTick>
 800ba36:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	f003 0320 	and.w	r3, r3, #32
 800ba42:	2b20      	cmp	r3, #32
 800ba44:	d03b      	beq.n	800babe <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ba46:	697b      	ldr	r3, [r7, #20]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	685a      	ldr	r2, [r3, #4]
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f022 0220 	bic.w	r2, r2, #32
 800ba54:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	685a      	ldr	r2, [r3, #4]
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f022 0202 	bic.w	r2, r2, #2
 800ba64:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ba66:	693a      	ldr	r2, [r7, #16]
 800ba68:	2164      	movs	r1, #100	; 0x64
 800ba6a:	6978      	ldr	r0, [r7, #20]
 800ba6c:	f000 fa9e 	bl	800bfac <SPI_EndRxTxTransaction>
 800ba70:	4603      	mov	r3, r0
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d005      	beq.n	800ba82 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba7a:	f043 0220 	orr.w	r2, r3, #32
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	689b      	ldr	r3, [r3, #8]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d10a      	bne.n	800baa0 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	60fb      	str	r3, [r7, #12]
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	68db      	ldr	r3, [r3, #12]
 800ba94:	60fb      	str	r3, [r7, #12]
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	689b      	ldr	r3, [r3, #8]
 800ba9c:	60fb      	str	r3, [r7, #12]
 800ba9e:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	2200      	movs	r2, #0
 800baa4:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800baa6:	697b      	ldr	r3, [r7, #20]
 800baa8:	2201      	movs	r2, #1
 800baaa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d003      	beq.n	800babe <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800bab6:	6978      	ldr	r0, [r7, #20]
 800bab8:	f7f8 fef4 	bl	80048a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800babc:	e002      	b.n	800bac4 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800babe:	6978      	ldr	r0, [r7, #20]
 800bac0:	f7f8 fed9 	bl	8004876 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bac4:	3718      	adds	r7, #24
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}

0800baca <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800baca:	b580      	push	{r7, lr}
 800bacc:	b084      	sub	sp, #16
 800bace:	af00      	add	r7, sp, #0
 800bad0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bad6:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bad8:	f7fa fdec 	bl	80066b4 <HAL_GetTick>
 800badc:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	f003 0320 	and.w	r3, r3, #32
 800bae8:	2b20      	cmp	r3, #32
 800baea:	d03c      	beq.n	800bb66 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	685a      	ldr	r2, [r3, #4]
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f022 0220 	bic.w	r2, r2, #32
 800bafa:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	689b      	ldr	r3, [r3, #8]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d10d      	bne.n	800bb20 <SPI_DMAReceiveCplt+0x56>
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	685b      	ldr	r3, [r3, #4]
 800bb08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bb0c:	d108      	bne.n	800bb20 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	685a      	ldr	r2, [r3, #4]
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f022 0203 	bic.w	r2, r2, #3
 800bb1c:	605a      	str	r2, [r3, #4]
 800bb1e:	e007      	b.n	800bb30 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	685a      	ldr	r2, [r3, #4]
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	f022 0201 	bic.w	r2, r2, #1
 800bb2e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800bb30:	68ba      	ldr	r2, [r7, #8]
 800bb32:	2164      	movs	r1, #100	; 0x64
 800bb34:	68f8      	ldr	r0, [r7, #12]
 800bb36:	f000 f9e1 	bl	800befc <SPI_EndRxTransaction>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d002      	beq.n	800bb46 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	2220      	movs	r2, #32
 800bb44:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	2201      	movs	r2, #1
 800bb52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d003      	beq.n	800bb66 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800bb5e:	68f8      	ldr	r0, [r7, #12]
 800bb60:	f7f8 fea0 	bl	80048a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800bb64:	e002      	b.n	800bb6c <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800bb66:	68f8      	ldr	r0, [r7, #12]
 800bb68:	f7f8 fe7a 	bl	8004860 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bb6c:	3710      	adds	r7, #16
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}

0800bb72 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bb72:	b580      	push	{r7, lr}
 800bb74:	b084      	sub	sp, #16
 800bb76:	af00      	add	r7, sp, #0
 800bb78:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb7e:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bb80:	f7fa fd98 	bl	80066b4 <HAL_GetTick>
 800bb84:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f003 0320 	and.w	r3, r3, #32
 800bb90:	2b20      	cmp	r3, #32
 800bb92:	d030      	beq.n	800bbf6 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	685a      	ldr	r2, [r3, #4]
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f022 0220 	bic.w	r2, r2, #32
 800bba2:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800bba4:	68ba      	ldr	r2, [r7, #8]
 800bba6:	2164      	movs	r1, #100	; 0x64
 800bba8:	68f8      	ldr	r0, [r7, #12]
 800bbaa:	f000 f9ff 	bl	800bfac <SPI_EndRxTxTransaction>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d005      	beq.n	800bbc0 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bbb8:	f043 0220 	orr.w	r2, r3, #32
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	685a      	ldr	r2, [r3, #4]
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f022 0203 	bic.w	r2, r2, #3
 800bbce:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	2201      	movs	r2, #1
 800bbe2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d003      	beq.n	800bbf6 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800bbee:	68f8      	ldr	r0, [r7, #12]
 800bbf0:	f7f8 fe58 	bl	80048a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800bbf4:	e002      	b.n	800bbfc <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800bbf6:	68f8      	ldr	r0, [r7, #12]
 800bbf8:	f7f8 fe48 	bl	800488c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bbfc:	3710      	adds	r7, #16
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}

0800bc02 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bc02:	b580      	push	{r7, lr}
 800bc04:	b084      	sub	sp, #16
 800bc06:	af00      	add	r7, sp, #0
 800bc08:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc0e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800bc10:	68f8      	ldr	r0, [r7, #12]
 800bc12:	f7ff fedb 	bl	800b9cc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bc16:	bf00      	nop
 800bc18:	3710      	adds	r7, #16
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}

0800bc1e <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bc1e:	b580      	push	{r7, lr}
 800bc20:	b084      	sub	sp, #16
 800bc22:	af00      	add	r7, sp, #0
 800bc24:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc2a:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800bc2c:	68f8      	ldr	r0, [r7, #12]
 800bc2e:	f7ff fed7 	bl	800b9e0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bc32:	bf00      	nop
 800bc34:	3710      	adds	r7, #16
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}

0800bc3a <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bc3a:	b580      	push	{r7, lr}
 800bc3c:	b084      	sub	sp, #16
 800bc3e:	af00      	add	r7, sp, #0
 800bc40:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc46:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800bc48:	68f8      	ldr	r0, [r7, #12]
 800bc4a:	f7ff fed3 	bl	800b9f4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bc4e:	bf00      	nop
 800bc50:	3710      	adds	r7, #16
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}

0800bc56 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800bc56:	b580      	push	{r7, lr}
 800bc58:	b084      	sub	sp, #16
 800bc5a:	af00      	add	r7, sp, #0
 800bc5c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc62:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	685a      	ldr	r2, [r3, #4]
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	f022 0203 	bic.w	r2, r2, #3
 800bc72:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc78:	f043 0210 	orr.w	r2, r3, #16
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	2201      	movs	r2, #1
 800bc84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800bc88:	68f8      	ldr	r0, [r7, #12]
 800bc8a:	f7f8 fe0b 	bl	80048a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bc8e:	bf00      	nop
 800bc90:	3710      	adds	r7, #16
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}

0800bc96 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bc96:	b580      	push	{r7, lr}
 800bc98:	b084      	sub	sp, #16
 800bc9a:	af00      	add	r7, sp, #0
 800bc9c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bca2:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	2200      	movs	r2, #0
 800bca8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	2200      	movs	r2, #0
 800bcb0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800bcb2:	68f8      	ldr	r0, [r7, #12]
 800bcb4:	f7f8 fdf6 	bl	80048a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bcb8:	bf00      	nop
 800bcba:	3710      	adds	r7, #16
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}

0800bcc0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b088      	sub	sp, #32
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	60f8      	str	r0, [r7, #12]
 800bcc8:	60b9      	str	r1, [r7, #8]
 800bcca:	603b      	str	r3, [r7, #0]
 800bccc:	4613      	mov	r3, r2
 800bcce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800bcd0:	f7fa fcf0 	bl	80066b4 <HAL_GetTick>
 800bcd4:	4602      	mov	r2, r0
 800bcd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd8:	1a9b      	subs	r3, r3, r2
 800bcda:	683a      	ldr	r2, [r7, #0]
 800bcdc:	4413      	add	r3, r2
 800bcde:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800bce0:	f7fa fce8 	bl	80066b4 <HAL_GetTick>
 800bce4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bce6:	4b39      	ldr	r3, [pc, #228]	; (800bdcc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	015b      	lsls	r3, r3, #5
 800bcec:	0d1b      	lsrs	r3, r3, #20
 800bcee:	69fa      	ldr	r2, [r7, #28]
 800bcf0:	fb02 f303 	mul.w	r3, r2, r3
 800bcf4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bcf6:	e054      	b.n	800bda2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bcfe:	d050      	beq.n	800bda2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bd00:	f7fa fcd8 	bl	80066b4 <HAL_GetTick>
 800bd04:	4602      	mov	r2, r0
 800bd06:	69bb      	ldr	r3, [r7, #24]
 800bd08:	1ad3      	subs	r3, r2, r3
 800bd0a:	69fa      	ldr	r2, [r7, #28]
 800bd0c:	429a      	cmp	r2, r3
 800bd0e:	d902      	bls.n	800bd16 <SPI_WaitFlagStateUntilTimeout+0x56>
 800bd10:	69fb      	ldr	r3, [r7, #28]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d13d      	bne.n	800bd92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	685a      	ldr	r2, [r3, #4]
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bd24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	685b      	ldr	r3, [r3, #4]
 800bd2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bd2e:	d111      	bne.n	800bd54 <SPI_WaitFlagStateUntilTimeout+0x94>
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	689b      	ldr	r3, [r3, #8]
 800bd34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd38:	d004      	beq.n	800bd44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	689b      	ldr	r3, [r3, #8]
 800bd3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd42:	d107      	bne.n	800bd54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	681a      	ldr	r2, [r3, #0]
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd5c:	d10f      	bne.n	800bd7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	681a      	ldr	r2, [r3, #0]
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bd6c:	601a      	str	r2, [r3, #0]
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	681a      	ldr	r2, [r3, #0]
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bd7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	2201      	movs	r2, #1
 800bd82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	2200      	movs	r2, #0
 800bd8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800bd8e:	2303      	movs	r3, #3
 800bd90:	e017      	b.n	800bdc2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d101      	bne.n	800bd9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	3b01      	subs	r3, #1
 800bda0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	689a      	ldr	r2, [r3, #8]
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	4013      	ands	r3, r2
 800bdac:	68ba      	ldr	r2, [r7, #8]
 800bdae:	429a      	cmp	r2, r3
 800bdb0:	bf0c      	ite	eq
 800bdb2:	2301      	moveq	r3, #1
 800bdb4:	2300      	movne	r3, #0
 800bdb6:	b2db      	uxtb	r3, r3
 800bdb8:	461a      	mov	r2, r3
 800bdba:	79fb      	ldrb	r3, [r7, #7]
 800bdbc:	429a      	cmp	r2, r3
 800bdbe:	d19b      	bne.n	800bcf8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bdc0:	2300      	movs	r3, #0
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3720      	adds	r7, #32
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}
 800bdca:	bf00      	nop
 800bdcc:	200001e8 	.word	0x200001e8

0800bdd0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b08a      	sub	sp, #40	; 0x28
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	60f8      	str	r0, [r7, #12]
 800bdd8:	60b9      	str	r1, [r7, #8]
 800bdda:	607a      	str	r2, [r7, #4]
 800bddc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800bdde:	2300      	movs	r3, #0
 800bde0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800bde2:	f7fa fc67 	bl	80066b4 <HAL_GetTick>
 800bde6:	4602      	mov	r2, r0
 800bde8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdea:	1a9b      	subs	r3, r3, r2
 800bdec:	683a      	ldr	r2, [r7, #0]
 800bdee:	4413      	add	r3, r2
 800bdf0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800bdf2:	f7fa fc5f 	bl	80066b4 <HAL_GetTick>
 800bdf6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	330c      	adds	r3, #12
 800bdfe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800be00:	4b3d      	ldr	r3, [pc, #244]	; (800bef8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800be02:	681a      	ldr	r2, [r3, #0]
 800be04:	4613      	mov	r3, r2
 800be06:	009b      	lsls	r3, r3, #2
 800be08:	4413      	add	r3, r2
 800be0a:	00da      	lsls	r2, r3, #3
 800be0c:	1ad3      	subs	r3, r2, r3
 800be0e:	0d1b      	lsrs	r3, r3, #20
 800be10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be12:	fb02 f303 	mul.w	r3, r2, r3
 800be16:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800be18:	e060      	b.n	800bedc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800be20:	d107      	bne.n	800be32 <SPI_WaitFifoStateUntilTimeout+0x62>
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d104      	bne.n	800be32 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800be28:	69fb      	ldr	r3, [r7, #28]
 800be2a:	781b      	ldrb	r3, [r3, #0]
 800be2c:	b2db      	uxtb	r3, r3
 800be2e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800be30:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be38:	d050      	beq.n	800bedc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800be3a:	f7fa fc3b 	bl	80066b4 <HAL_GetTick>
 800be3e:	4602      	mov	r2, r0
 800be40:	6a3b      	ldr	r3, [r7, #32]
 800be42:	1ad3      	subs	r3, r2, r3
 800be44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be46:	429a      	cmp	r2, r3
 800be48:	d902      	bls.n	800be50 <SPI_WaitFifoStateUntilTimeout+0x80>
 800be4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d13d      	bne.n	800becc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	685a      	ldr	r2, [r3, #4]
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800be5e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	685b      	ldr	r3, [r3, #4]
 800be64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800be68:	d111      	bne.n	800be8e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	689b      	ldr	r3, [r3, #8]
 800be6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be72:	d004      	beq.n	800be7e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	689b      	ldr	r3, [r3, #8]
 800be78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be7c:	d107      	bne.n	800be8e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	681a      	ldr	r2, [r3, #0]
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be8c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be96:	d10f      	bne.n	800beb8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	681a      	ldr	r2, [r3, #0]
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bea6:	601a      	str	r2, [r3, #0]
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	681a      	ldr	r2, [r3, #0]
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800beb6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	2201      	movs	r2, #1
 800bebc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	2200      	movs	r2, #0
 800bec4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800bec8:	2303      	movs	r3, #3
 800beca:	e010      	b.n	800beee <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800becc:	69bb      	ldr	r3, [r7, #24]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d101      	bne.n	800bed6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800bed2:	2300      	movs	r3, #0
 800bed4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800bed6:	69bb      	ldr	r3, [r7, #24]
 800bed8:	3b01      	subs	r3, #1
 800beda:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	689a      	ldr	r2, [r3, #8]
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	4013      	ands	r3, r2
 800bee6:	687a      	ldr	r2, [r7, #4]
 800bee8:	429a      	cmp	r2, r3
 800beea:	d196      	bne.n	800be1a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800beec:	2300      	movs	r3, #0
}
 800beee:	4618      	mov	r0, r3
 800bef0:	3728      	adds	r7, #40	; 0x28
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}
 800bef6:	bf00      	nop
 800bef8:	200001e8 	.word	0x200001e8

0800befc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b086      	sub	sp, #24
 800bf00:	af02      	add	r7, sp, #8
 800bf02:	60f8      	str	r0, [r7, #12]
 800bf04:	60b9      	str	r1, [r7, #8]
 800bf06:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	685b      	ldr	r3, [r3, #4]
 800bf0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bf10:	d111      	bne.n	800bf36 <SPI_EndRxTransaction+0x3a>
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	689b      	ldr	r3, [r3, #8]
 800bf16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf1a:	d004      	beq.n	800bf26 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	689b      	ldr	r3, [r3, #8]
 800bf20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf24:	d107      	bne.n	800bf36 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	681a      	ldr	r2, [r3, #0]
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bf34:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	9300      	str	r3, [sp, #0]
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	2180      	movs	r1, #128	; 0x80
 800bf40:	68f8      	ldr	r0, [r7, #12]
 800bf42:	f7ff febd 	bl	800bcc0 <SPI_WaitFlagStateUntilTimeout>
 800bf46:	4603      	mov	r3, r0
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d007      	beq.n	800bf5c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bf50:	f043 0220 	orr.w	r2, r3, #32
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800bf58:	2303      	movs	r3, #3
 800bf5a:	e023      	b.n	800bfa4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	685b      	ldr	r3, [r3, #4]
 800bf60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bf64:	d11d      	bne.n	800bfa2 <SPI_EndRxTransaction+0xa6>
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	689b      	ldr	r3, [r3, #8]
 800bf6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf6e:	d004      	beq.n	800bf7a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	689b      	ldr	r3, [r3, #8]
 800bf74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf78:	d113      	bne.n	800bfa2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	9300      	str	r3, [sp, #0]
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	2200      	movs	r2, #0
 800bf82:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800bf86:	68f8      	ldr	r0, [r7, #12]
 800bf88:	f7ff ff22 	bl	800bdd0 <SPI_WaitFifoStateUntilTimeout>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d007      	beq.n	800bfa2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bf96:	f043 0220 	orr.w	r2, r3, #32
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800bf9e:	2303      	movs	r3, #3
 800bfa0:	e000      	b.n	800bfa4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800bfa2:	2300      	movs	r3, #0
}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	3710      	adds	r7, #16
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}

0800bfac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b086      	sub	sp, #24
 800bfb0:	af02      	add	r7, sp, #8
 800bfb2:	60f8      	str	r0, [r7, #12]
 800bfb4:	60b9      	str	r1, [r7, #8]
 800bfb6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	9300      	str	r3, [sp, #0]
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800bfc4:	68f8      	ldr	r0, [r7, #12]
 800bfc6:	f7ff ff03 	bl	800bdd0 <SPI_WaitFifoStateUntilTimeout>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d007      	beq.n	800bfe0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bfd4:	f043 0220 	orr.w	r2, r3, #32
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800bfdc:	2303      	movs	r3, #3
 800bfde:	e027      	b.n	800c030 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	9300      	str	r3, [sp, #0]
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	2180      	movs	r1, #128	; 0x80
 800bfea:	68f8      	ldr	r0, [r7, #12]
 800bfec:	f7ff fe68 	bl	800bcc0 <SPI_WaitFlagStateUntilTimeout>
 800bff0:	4603      	mov	r3, r0
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d007      	beq.n	800c006 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bffa:	f043 0220 	orr.w	r2, r3, #32
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c002:	2303      	movs	r3, #3
 800c004:	e014      	b.n	800c030 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	9300      	str	r3, [sp, #0]
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	2200      	movs	r2, #0
 800c00e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c012:	68f8      	ldr	r0, [r7, #12]
 800c014:	f7ff fedc 	bl	800bdd0 <SPI_WaitFifoStateUntilTimeout>
 800c018:	4603      	mov	r3, r0
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d007      	beq.n	800c02e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c022:	f043 0220 	orr.w	r2, r3, #32
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c02a:	2303      	movs	r3, #3
 800c02c:	e000      	b.n	800c030 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800c02e:	2300      	movs	r3, #0
}
 800c030:	4618      	mov	r0, r3
 800c032:	3710      	adds	r7, #16
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}

0800c038 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b082      	sub	sp, #8
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d101      	bne.n	800c04a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c046:	2301      	movs	r3, #1
 800c048:	e049      	b.n	800c0de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c050:	b2db      	uxtb	r3, r3
 800c052:	2b00      	cmp	r3, #0
 800c054:	d106      	bne.n	800c064 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2200      	movs	r2, #0
 800c05a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f7f9 fafa 	bl	8005658 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2202      	movs	r2, #2
 800c068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681a      	ldr	r2, [r3, #0]
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	3304      	adds	r3, #4
 800c074:	4619      	mov	r1, r3
 800c076:	4610      	mov	r0, r2
 800c078:	f000 fae6 	bl	800c648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2201      	movs	r2, #1
 800c080:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2201      	movs	r2, #1
 800c088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2201      	movs	r2, #1
 800c090:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2201      	movs	r2, #1
 800c098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2201      	movs	r2, #1
 800c0a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2201      	movs	r2, #1
 800c0a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2201      	movs	r2, #1
 800c0b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2201      	movs	r2, #1
 800c0b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2201      	movs	r2, #1
 800c0c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2201      	movs	r2, #1
 800c0c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2201      	movs	r2, #1
 800c0d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2201      	movs	r2, #1
 800c0d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c0dc:	2300      	movs	r3, #0
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3708      	adds	r7, #8
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
	...

0800c0e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b085      	sub	sp, #20
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c0f6:	b2db      	uxtb	r3, r3
 800c0f8:	2b01      	cmp	r3, #1
 800c0fa:	d001      	beq.n	800c100 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	e04f      	b.n	800c1a0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2202      	movs	r2, #2
 800c104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	68da      	ldr	r2, [r3, #12]
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f042 0201 	orr.w	r2, r2, #1
 800c116:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	4a23      	ldr	r2, [pc, #140]	; (800c1ac <HAL_TIM_Base_Start_IT+0xc4>)
 800c11e:	4293      	cmp	r3, r2
 800c120:	d01d      	beq.n	800c15e <HAL_TIM_Base_Start_IT+0x76>
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c12a:	d018      	beq.n	800c15e <HAL_TIM_Base_Start_IT+0x76>
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	4a1f      	ldr	r2, [pc, #124]	; (800c1b0 <HAL_TIM_Base_Start_IT+0xc8>)
 800c132:	4293      	cmp	r3, r2
 800c134:	d013      	beq.n	800c15e <HAL_TIM_Base_Start_IT+0x76>
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	4a1e      	ldr	r2, [pc, #120]	; (800c1b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800c13c:	4293      	cmp	r3, r2
 800c13e:	d00e      	beq.n	800c15e <HAL_TIM_Base_Start_IT+0x76>
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	4a1c      	ldr	r2, [pc, #112]	; (800c1b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800c146:	4293      	cmp	r3, r2
 800c148:	d009      	beq.n	800c15e <HAL_TIM_Base_Start_IT+0x76>
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	4a1b      	ldr	r2, [pc, #108]	; (800c1bc <HAL_TIM_Base_Start_IT+0xd4>)
 800c150:	4293      	cmp	r3, r2
 800c152:	d004      	beq.n	800c15e <HAL_TIM_Base_Start_IT+0x76>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	4a19      	ldr	r2, [pc, #100]	; (800c1c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d115      	bne.n	800c18a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	689a      	ldr	r2, [r3, #8]
 800c164:	4b17      	ldr	r3, [pc, #92]	; (800c1c4 <HAL_TIM_Base_Start_IT+0xdc>)
 800c166:	4013      	ands	r3, r2
 800c168:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	2b06      	cmp	r3, #6
 800c16e:	d015      	beq.n	800c19c <HAL_TIM_Base_Start_IT+0xb4>
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c176:	d011      	beq.n	800c19c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	681a      	ldr	r2, [r3, #0]
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	f042 0201 	orr.w	r2, r2, #1
 800c186:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c188:	e008      	b.n	800c19c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	681a      	ldr	r2, [r3, #0]
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f042 0201 	orr.w	r2, r2, #1
 800c198:	601a      	str	r2, [r3, #0]
 800c19a:	e000      	b.n	800c19e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c19c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c19e:	2300      	movs	r3, #0
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	3714      	adds	r7, #20
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1aa:	4770      	bx	lr
 800c1ac:	40012c00 	.word	0x40012c00
 800c1b0:	40000400 	.word	0x40000400
 800c1b4:	40000800 	.word	0x40000800
 800c1b8:	40000c00 	.word	0x40000c00
 800c1bc:	40013400 	.word	0x40013400
 800c1c0:	40014000 	.word	0x40014000
 800c1c4:	00010007 	.word	0x00010007

0800c1c8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800c1c8:	b480      	push	{r7}
 800c1ca:	b083      	sub	sp, #12
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	68da      	ldr	r2, [r3, #12]
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	f022 0201 	bic.w	r2, r2, #1
 800c1de:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	6a1a      	ldr	r2, [r3, #32]
 800c1e6:	f241 1311 	movw	r3, #4369	; 0x1111
 800c1ea:	4013      	ands	r3, r2
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d10f      	bne.n	800c210 <HAL_TIM_Base_Stop_IT+0x48>
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	6a1a      	ldr	r2, [r3, #32]
 800c1f6:	f240 4344 	movw	r3, #1092	; 0x444
 800c1fa:	4013      	ands	r3, r2
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d107      	bne.n	800c210 <HAL_TIM_Base_Stop_IT+0x48>
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	681a      	ldr	r2, [r3, #0]
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	f022 0201 	bic.w	r2, r2, #1
 800c20e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2201      	movs	r2, #1
 800c214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c218:	2300      	movs	r3, #0
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	370c      	adds	r7, #12
 800c21e:	46bd      	mov	sp, r7
 800c220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c224:	4770      	bx	lr

0800c226 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c226:	b580      	push	{r7, lr}
 800c228:	b082      	sub	sp, #8
 800c22a:	af00      	add	r7, sp, #0
 800c22c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	691b      	ldr	r3, [r3, #16]
 800c234:	f003 0302 	and.w	r3, r3, #2
 800c238:	2b02      	cmp	r3, #2
 800c23a:	d122      	bne.n	800c282 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	68db      	ldr	r3, [r3, #12]
 800c242:	f003 0302 	and.w	r3, r3, #2
 800c246:	2b02      	cmp	r3, #2
 800c248:	d11b      	bne.n	800c282 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	f06f 0202 	mvn.w	r2, #2
 800c252:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2201      	movs	r2, #1
 800c258:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	699b      	ldr	r3, [r3, #24]
 800c260:	f003 0303 	and.w	r3, r3, #3
 800c264:	2b00      	cmp	r3, #0
 800c266:	d003      	beq.n	800c270 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f000 f9ce 	bl	800c60a <HAL_TIM_IC_CaptureCallback>
 800c26e:	e005      	b.n	800c27c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f000 f9c0 	bl	800c5f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f000 f9d1 	bl	800c61e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2200      	movs	r2, #0
 800c280:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	691b      	ldr	r3, [r3, #16]
 800c288:	f003 0304 	and.w	r3, r3, #4
 800c28c:	2b04      	cmp	r3, #4
 800c28e:	d122      	bne.n	800c2d6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	68db      	ldr	r3, [r3, #12]
 800c296:	f003 0304 	and.w	r3, r3, #4
 800c29a:	2b04      	cmp	r3, #4
 800c29c:	d11b      	bne.n	800c2d6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	f06f 0204 	mvn.w	r2, #4
 800c2a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2202      	movs	r2, #2
 800c2ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	699b      	ldr	r3, [r3, #24]
 800c2b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d003      	beq.n	800c2c4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f000 f9a4 	bl	800c60a <HAL_TIM_IC_CaptureCallback>
 800c2c2:	e005      	b.n	800c2d0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f000 f996 	bl	800c5f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	f000 f9a7 	bl	800c61e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	691b      	ldr	r3, [r3, #16]
 800c2dc:	f003 0308 	and.w	r3, r3, #8
 800c2e0:	2b08      	cmp	r3, #8
 800c2e2:	d122      	bne.n	800c32a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	68db      	ldr	r3, [r3, #12]
 800c2ea:	f003 0308 	and.w	r3, r3, #8
 800c2ee:	2b08      	cmp	r3, #8
 800c2f0:	d11b      	bne.n	800c32a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f06f 0208 	mvn.w	r2, #8
 800c2fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2204      	movs	r2, #4
 800c300:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	69db      	ldr	r3, [r3, #28]
 800c308:	f003 0303 	and.w	r3, r3, #3
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d003      	beq.n	800c318 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f000 f97a 	bl	800c60a <HAL_TIM_IC_CaptureCallback>
 800c316:	e005      	b.n	800c324 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f000 f96c 	bl	800c5f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f000 f97d 	bl	800c61e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2200      	movs	r2, #0
 800c328:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	691b      	ldr	r3, [r3, #16]
 800c330:	f003 0310 	and.w	r3, r3, #16
 800c334:	2b10      	cmp	r3, #16
 800c336:	d122      	bne.n	800c37e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	68db      	ldr	r3, [r3, #12]
 800c33e:	f003 0310 	and.w	r3, r3, #16
 800c342:	2b10      	cmp	r3, #16
 800c344:	d11b      	bne.n	800c37e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f06f 0210 	mvn.w	r2, #16
 800c34e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2208      	movs	r2, #8
 800c354:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	69db      	ldr	r3, [r3, #28]
 800c35c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c360:	2b00      	cmp	r3, #0
 800c362:	d003      	beq.n	800c36c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c364:	6878      	ldr	r0, [r7, #4]
 800c366:	f000 f950 	bl	800c60a <HAL_TIM_IC_CaptureCallback>
 800c36a:	e005      	b.n	800c378 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	f000 f942 	bl	800c5f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f000 f953 	bl	800c61e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2200      	movs	r2, #0
 800c37c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	691b      	ldr	r3, [r3, #16]
 800c384:	f003 0301 	and.w	r3, r3, #1
 800c388:	2b01      	cmp	r3, #1
 800c38a:	d10e      	bne.n	800c3aa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	68db      	ldr	r3, [r3, #12]
 800c392:	f003 0301 	and.w	r3, r3, #1
 800c396:	2b01      	cmp	r3, #1
 800c398:	d107      	bne.n	800c3aa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f06f 0201 	mvn.w	r2, #1
 800c3a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f7f7 ff7d 	bl	80042a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	691b      	ldr	r3, [r3, #16]
 800c3b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3b4:	2b80      	cmp	r3, #128	; 0x80
 800c3b6:	d10e      	bne.n	800c3d6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	68db      	ldr	r3, [r3, #12]
 800c3be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3c2:	2b80      	cmp	r3, #128	; 0x80
 800c3c4:	d107      	bne.n	800c3d6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c3ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f000 faff 	bl	800c9d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	691b      	ldr	r3, [r3, #16]
 800c3dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3e4:	d10e      	bne.n	800c404 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	68db      	ldr	r3, [r3, #12]
 800c3ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3f0:	2b80      	cmp	r3, #128	; 0x80
 800c3f2:	d107      	bne.n	800c404 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c3fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f000 faf2 	bl	800c9e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	691b      	ldr	r3, [r3, #16]
 800c40a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c40e:	2b40      	cmp	r3, #64	; 0x40
 800c410:	d10e      	bne.n	800c430 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	68db      	ldr	r3, [r3, #12]
 800c418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c41c:	2b40      	cmp	r3, #64	; 0x40
 800c41e:	d107      	bne.n	800c430 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	f000 f901 	bl	800c632 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	691b      	ldr	r3, [r3, #16]
 800c436:	f003 0320 	and.w	r3, r3, #32
 800c43a:	2b20      	cmp	r3, #32
 800c43c:	d10e      	bne.n	800c45c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	68db      	ldr	r3, [r3, #12]
 800c444:	f003 0320 	and.w	r3, r3, #32
 800c448:	2b20      	cmp	r3, #32
 800c44a:	d107      	bne.n	800c45c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	f06f 0220 	mvn.w	r2, #32
 800c454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f000 fab2 	bl	800c9c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c45c:	bf00      	nop
 800c45e:	3708      	adds	r7, #8
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}

0800c464 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b084      	sub	sp, #16
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
 800c46c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c46e:	2300      	movs	r3, #0
 800c470:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c478:	2b01      	cmp	r3, #1
 800c47a:	d101      	bne.n	800c480 <HAL_TIM_ConfigClockSource+0x1c>
 800c47c:	2302      	movs	r3, #2
 800c47e:	e0b6      	b.n	800c5ee <HAL_TIM_ConfigClockSource+0x18a>
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2201      	movs	r2, #1
 800c484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2202      	movs	r2, #2
 800c48c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	689b      	ldr	r3, [r3, #8]
 800c496:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c498:	68bb      	ldr	r3, [r7, #8]
 800c49a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c49e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c4a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c4aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	68ba      	ldr	r2, [r7, #8]
 800c4b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c4bc:	d03e      	beq.n	800c53c <HAL_TIM_ConfigClockSource+0xd8>
 800c4be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c4c2:	f200 8087 	bhi.w	800c5d4 <HAL_TIM_ConfigClockSource+0x170>
 800c4c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c4ca:	f000 8086 	beq.w	800c5da <HAL_TIM_ConfigClockSource+0x176>
 800c4ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c4d2:	d87f      	bhi.n	800c5d4 <HAL_TIM_ConfigClockSource+0x170>
 800c4d4:	2b70      	cmp	r3, #112	; 0x70
 800c4d6:	d01a      	beq.n	800c50e <HAL_TIM_ConfigClockSource+0xaa>
 800c4d8:	2b70      	cmp	r3, #112	; 0x70
 800c4da:	d87b      	bhi.n	800c5d4 <HAL_TIM_ConfigClockSource+0x170>
 800c4dc:	2b60      	cmp	r3, #96	; 0x60
 800c4de:	d050      	beq.n	800c582 <HAL_TIM_ConfigClockSource+0x11e>
 800c4e0:	2b60      	cmp	r3, #96	; 0x60
 800c4e2:	d877      	bhi.n	800c5d4 <HAL_TIM_ConfigClockSource+0x170>
 800c4e4:	2b50      	cmp	r3, #80	; 0x50
 800c4e6:	d03c      	beq.n	800c562 <HAL_TIM_ConfigClockSource+0xfe>
 800c4e8:	2b50      	cmp	r3, #80	; 0x50
 800c4ea:	d873      	bhi.n	800c5d4 <HAL_TIM_ConfigClockSource+0x170>
 800c4ec:	2b40      	cmp	r3, #64	; 0x40
 800c4ee:	d058      	beq.n	800c5a2 <HAL_TIM_ConfigClockSource+0x13e>
 800c4f0:	2b40      	cmp	r3, #64	; 0x40
 800c4f2:	d86f      	bhi.n	800c5d4 <HAL_TIM_ConfigClockSource+0x170>
 800c4f4:	2b30      	cmp	r3, #48	; 0x30
 800c4f6:	d064      	beq.n	800c5c2 <HAL_TIM_ConfigClockSource+0x15e>
 800c4f8:	2b30      	cmp	r3, #48	; 0x30
 800c4fa:	d86b      	bhi.n	800c5d4 <HAL_TIM_ConfigClockSource+0x170>
 800c4fc:	2b20      	cmp	r3, #32
 800c4fe:	d060      	beq.n	800c5c2 <HAL_TIM_ConfigClockSource+0x15e>
 800c500:	2b20      	cmp	r3, #32
 800c502:	d867      	bhi.n	800c5d4 <HAL_TIM_ConfigClockSource+0x170>
 800c504:	2b00      	cmp	r3, #0
 800c506:	d05c      	beq.n	800c5c2 <HAL_TIM_ConfigClockSource+0x15e>
 800c508:	2b10      	cmp	r3, #16
 800c50a:	d05a      	beq.n	800c5c2 <HAL_TIM_ConfigClockSource+0x15e>
 800c50c:	e062      	b.n	800c5d4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6818      	ldr	r0, [r3, #0]
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	6899      	ldr	r1, [r3, #8]
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	685a      	ldr	r2, [r3, #4]
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	68db      	ldr	r3, [r3, #12]
 800c51e:	f000 f9a7 	bl	800c870 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	689b      	ldr	r3, [r3, #8]
 800c528:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c530:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	68ba      	ldr	r2, [r7, #8]
 800c538:	609a      	str	r2, [r3, #8]
      break;
 800c53a:	e04f      	b.n	800c5dc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	6818      	ldr	r0, [r3, #0]
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	6899      	ldr	r1, [r3, #8]
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	685a      	ldr	r2, [r3, #4]
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	68db      	ldr	r3, [r3, #12]
 800c54c:	f000 f990 	bl	800c870 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	689a      	ldr	r2, [r3, #8]
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c55e:	609a      	str	r2, [r3, #8]
      break;
 800c560:	e03c      	b.n	800c5dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6818      	ldr	r0, [r3, #0]
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	6859      	ldr	r1, [r3, #4]
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	68db      	ldr	r3, [r3, #12]
 800c56e:	461a      	mov	r2, r3
 800c570:	f000 f904 	bl	800c77c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	2150      	movs	r1, #80	; 0x50
 800c57a:	4618      	mov	r0, r3
 800c57c:	f000 f95d 	bl	800c83a <TIM_ITRx_SetConfig>
      break;
 800c580:	e02c      	b.n	800c5dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	6818      	ldr	r0, [r3, #0]
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	6859      	ldr	r1, [r3, #4]
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	68db      	ldr	r3, [r3, #12]
 800c58e:	461a      	mov	r2, r3
 800c590:	f000 f923 	bl	800c7da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	2160      	movs	r1, #96	; 0x60
 800c59a:	4618      	mov	r0, r3
 800c59c:	f000 f94d 	bl	800c83a <TIM_ITRx_SetConfig>
      break;
 800c5a0:	e01c      	b.n	800c5dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	6818      	ldr	r0, [r3, #0]
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	6859      	ldr	r1, [r3, #4]
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	68db      	ldr	r3, [r3, #12]
 800c5ae:	461a      	mov	r2, r3
 800c5b0:	f000 f8e4 	bl	800c77c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	2140      	movs	r1, #64	; 0x40
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f000 f93d 	bl	800c83a <TIM_ITRx_SetConfig>
      break;
 800c5c0:	e00c      	b.n	800c5dc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681a      	ldr	r2, [r3, #0]
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	4619      	mov	r1, r3
 800c5cc:	4610      	mov	r0, r2
 800c5ce:	f000 f934 	bl	800c83a <TIM_ITRx_SetConfig>
      break;
 800c5d2:	e003      	b.n	800c5dc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	73fb      	strb	r3, [r7, #15]
      break;
 800c5d8:	e000      	b.n	800c5dc <HAL_TIM_ConfigClockSource+0x178>
      break;
 800c5da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2201      	movs	r2, #1
 800c5e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c5ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3710      	adds	r7, #16
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}

0800c5f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c5f6:	b480      	push	{r7}
 800c5f8:	b083      	sub	sp, #12
 800c5fa:	af00      	add	r7, sp, #0
 800c5fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c5fe:	bf00      	nop
 800c600:	370c      	adds	r7, #12
 800c602:	46bd      	mov	sp, r7
 800c604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c608:	4770      	bx	lr

0800c60a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c60a:	b480      	push	{r7}
 800c60c:	b083      	sub	sp, #12
 800c60e:	af00      	add	r7, sp, #0
 800c610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c612:	bf00      	nop
 800c614:	370c      	adds	r7, #12
 800c616:	46bd      	mov	sp, r7
 800c618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61c:	4770      	bx	lr

0800c61e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c61e:	b480      	push	{r7}
 800c620:	b083      	sub	sp, #12
 800c622:	af00      	add	r7, sp, #0
 800c624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c626:	bf00      	nop
 800c628:	370c      	adds	r7, #12
 800c62a:	46bd      	mov	sp, r7
 800c62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c630:	4770      	bx	lr

0800c632 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c632:	b480      	push	{r7}
 800c634:	b083      	sub	sp, #12
 800c636:	af00      	add	r7, sp, #0
 800c638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c63a:	bf00      	nop
 800c63c:	370c      	adds	r7, #12
 800c63e:	46bd      	mov	sp, r7
 800c640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c644:	4770      	bx	lr
	...

0800c648 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c648:	b480      	push	{r7}
 800c64a:	b085      	sub	sp, #20
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	4a40      	ldr	r2, [pc, #256]	; (800c75c <TIM_Base_SetConfig+0x114>)
 800c65c:	4293      	cmp	r3, r2
 800c65e:	d013      	beq.n	800c688 <TIM_Base_SetConfig+0x40>
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c666:	d00f      	beq.n	800c688 <TIM_Base_SetConfig+0x40>
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	4a3d      	ldr	r2, [pc, #244]	; (800c760 <TIM_Base_SetConfig+0x118>)
 800c66c:	4293      	cmp	r3, r2
 800c66e:	d00b      	beq.n	800c688 <TIM_Base_SetConfig+0x40>
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	4a3c      	ldr	r2, [pc, #240]	; (800c764 <TIM_Base_SetConfig+0x11c>)
 800c674:	4293      	cmp	r3, r2
 800c676:	d007      	beq.n	800c688 <TIM_Base_SetConfig+0x40>
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	4a3b      	ldr	r2, [pc, #236]	; (800c768 <TIM_Base_SetConfig+0x120>)
 800c67c:	4293      	cmp	r3, r2
 800c67e:	d003      	beq.n	800c688 <TIM_Base_SetConfig+0x40>
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	4a3a      	ldr	r2, [pc, #232]	; (800c76c <TIM_Base_SetConfig+0x124>)
 800c684:	4293      	cmp	r3, r2
 800c686:	d108      	bne.n	800c69a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c68e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	685b      	ldr	r3, [r3, #4]
 800c694:	68fa      	ldr	r2, [r7, #12]
 800c696:	4313      	orrs	r3, r2
 800c698:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	4a2f      	ldr	r2, [pc, #188]	; (800c75c <TIM_Base_SetConfig+0x114>)
 800c69e:	4293      	cmp	r3, r2
 800c6a0:	d01f      	beq.n	800c6e2 <TIM_Base_SetConfig+0x9a>
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6a8:	d01b      	beq.n	800c6e2 <TIM_Base_SetConfig+0x9a>
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	4a2c      	ldr	r2, [pc, #176]	; (800c760 <TIM_Base_SetConfig+0x118>)
 800c6ae:	4293      	cmp	r3, r2
 800c6b0:	d017      	beq.n	800c6e2 <TIM_Base_SetConfig+0x9a>
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	4a2b      	ldr	r2, [pc, #172]	; (800c764 <TIM_Base_SetConfig+0x11c>)
 800c6b6:	4293      	cmp	r3, r2
 800c6b8:	d013      	beq.n	800c6e2 <TIM_Base_SetConfig+0x9a>
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	4a2a      	ldr	r2, [pc, #168]	; (800c768 <TIM_Base_SetConfig+0x120>)
 800c6be:	4293      	cmp	r3, r2
 800c6c0:	d00f      	beq.n	800c6e2 <TIM_Base_SetConfig+0x9a>
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	4a29      	ldr	r2, [pc, #164]	; (800c76c <TIM_Base_SetConfig+0x124>)
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	d00b      	beq.n	800c6e2 <TIM_Base_SetConfig+0x9a>
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	4a28      	ldr	r2, [pc, #160]	; (800c770 <TIM_Base_SetConfig+0x128>)
 800c6ce:	4293      	cmp	r3, r2
 800c6d0:	d007      	beq.n	800c6e2 <TIM_Base_SetConfig+0x9a>
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	4a27      	ldr	r2, [pc, #156]	; (800c774 <TIM_Base_SetConfig+0x12c>)
 800c6d6:	4293      	cmp	r3, r2
 800c6d8:	d003      	beq.n	800c6e2 <TIM_Base_SetConfig+0x9a>
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	4a26      	ldr	r2, [pc, #152]	; (800c778 <TIM_Base_SetConfig+0x130>)
 800c6de:	4293      	cmp	r3, r2
 800c6e0:	d108      	bne.n	800c6f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c6e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	68db      	ldr	r3, [r3, #12]
 800c6ee:	68fa      	ldr	r2, [r7, #12]
 800c6f0:	4313      	orrs	r3, r2
 800c6f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	695b      	ldr	r3, [r3, #20]
 800c6fe:	4313      	orrs	r3, r2
 800c700:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	68fa      	ldr	r2, [r7, #12]
 800c706:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	689a      	ldr	r2, [r3, #8]
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	681a      	ldr	r2, [r3, #0]
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	4a10      	ldr	r2, [pc, #64]	; (800c75c <TIM_Base_SetConfig+0x114>)
 800c71c:	4293      	cmp	r3, r2
 800c71e:	d00f      	beq.n	800c740 <TIM_Base_SetConfig+0xf8>
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	4a12      	ldr	r2, [pc, #72]	; (800c76c <TIM_Base_SetConfig+0x124>)
 800c724:	4293      	cmp	r3, r2
 800c726:	d00b      	beq.n	800c740 <TIM_Base_SetConfig+0xf8>
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	4a11      	ldr	r2, [pc, #68]	; (800c770 <TIM_Base_SetConfig+0x128>)
 800c72c:	4293      	cmp	r3, r2
 800c72e:	d007      	beq.n	800c740 <TIM_Base_SetConfig+0xf8>
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	4a10      	ldr	r2, [pc, #64]	; (800c774 <TIM_Base_SetConfig+0x12c>)
 800c734:	4293      	cmp	r3, r2
 800c736:	d003      	beq.n	800c740 <TIM_Base_SetConfig+0xf8>
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	4a0f      	ldr	r2, [pc, #60]	; (800c778 <TIM_Base_SetConfig+0x130>)
 800c73c:	4293      	cmp	r3, r2
 800c73e:	d103      	bne.n	800c748 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	691a      	ldr	r2, [r3, #16]
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2201      	movs	r2, #1
 800c74c:	615a      	str	r2, [r3, #20]
}
 800c74e:	bf00      	nop
 800c750:	3714      	adds	r7, #20
 800c752:	46bd      	mov	sp, r7
 800c754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c758:	4770      	bx	lr
 800c75a:	bf00      	nop
 800c75c:	40012c00 	.word	0x40012c00
 800c760:	40000400 	.word	0x40000400
 800c764:	40000800 	.word	0x40000800
 800c768:	40000c00 	.word	0x40000c00
 800c76c:	40013400 	.word	0x40013400
 800c770:	40014000 	.word	0x40014000
 800c774:	40014400 	.word	0x40014400
 800c778:	40014800 	.word	0x40014800

0800c77c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c77c:	b480      	push	{r7}
 800c77e:	b087      	sub	sp, #28
 800c780:	af00      	add	r7, sp, #0
 800c782:	60f8      	str	r0, [r7, #12]
 800c784:	60b9      	str	r1, [r7, #8]
 800c786:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	6a1b      	ldr	r3, [r3, #32]
 800c78c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	6a1b      	ldr	r3, [r3, #32]
 800c792:	f023 0201 	bic.w	r2, r3, #1
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	699b      	ldr	r3, [r3, #24]
 800c79e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c7a0:	693b      	ldr	r3, [r7, #16]
 800c7a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c7a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	011b      	lsls	r3, r3, #4
 800c7ac:	693a      	ldr	r2, [r7, #16]
 800c7ae:	4313      	orrs	r3, r2
 800c7b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	f023 030a 	bic.w	r3, r3, #10
 800c7b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c7ba:	697a      	ldr	r2, [r7, #20]
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	4313      	orrs	r3, r2
 800c7c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	693a      	ldr	r2, [r7, #16]
 800c7c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	697a      	ldr	r2, [r7, #20]
 800c7cc:	621a      	str	r2, [r3, #32]
}
 800c7ce:	bf00      	nop
 800c7d0:	371c      	adds	r7, #28
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d8:	4770      	bx	lr

0800c7da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c7da:	b480      	push	{r7}
 800c7dc:	b087      	sub	sp, #28
 800c7de:	af00      	add	r7, sp, #0
 800c7e0:	60f8      	str	r0, [r7, #12]
 800c7e2:	60b9      	str	r1, [r7, #8]
 800c7e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	6a1b      	ldr	r3, [r3, #32]
 800c7ea:	f023 0210 	bic.w	r2, r3, #16
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	699b      	ldr	r3, [r3, #24]
 800c7f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	6a1b      	ldr	r3, [r3, #32]
 800c7fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c804:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	031b      	lsls	r3, r3, #12
 800c80a:	697a      	ldr	r2, [r7, #20]
 800c80c:	4313      	orrs	r3, r2
 800c80e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c810:	693b      	ldr	r3, [r7, #16]
 800c812:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c816:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	011b      	lsls	r3, r3, #4
 800c81c:	693a      	ldr	r2, [r7, #16]
 800c81e:	4313      	orrs	r3, r2
 800c820:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	697a      	ldr	r2, [r7, #20]
 800c826:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	693a      	ldr	r2, [r7, #16]
 800c82c:	621a      	str	r2, [r3, #32]
}
 800c82e:	bf00      	nop
 800c830:	371c      	adds	r7, #28
 800c832:	46bd      	mov	sp, r7
 800c834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c838:	4770      	bx	lr

0800c83a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c83a:	b480      	push	{r7}
 800c83c:	b085      	sub	sp, #20
 800c83e:	af00      	add	r7, sp, #0
 800c840:	6078      	str	r0, [r7, #4]
 800c842:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	689b      	ldr	r3, [r3, #8]
 800c848:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c850:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c852:	683a      	ldr	r2, [r7, #0]
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	4313      	orrs	r3, r2
 800c858:	f043 0307 	orr.w	r3, r3, #7
 800c85c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	68fa      	ldr	r2, [r7, #12]
 800c862:	609a      	str	r2, [r3, #8]
}
 800c864:	bf00      	nop
 800c866:	3714      	adds	r7, #20
 800c868:	46bd      	mov	sp, r7
 800c86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86e:	4770      	bx	lr

0800c870 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c870:	b480      	push	{r7}
 800c872:	b087      	sub	sp, #28
 800c874:	af00      	add	r7, sp, #0
 800c876:	60f8      	str	r0, [r7, #12]
 800c878:	60b9      	str	r1, [r7, #8]
 800c87a:	607a      	str	r2, [r7, #4]
 800c87c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	689b      	ldr	r3, [r3, #8]
 800c882:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c884:	697b      	ldr	r3, [r7, #20]
 800c886:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c88a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	021a      	lsls	r2, r3, #8
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	431a      	orrs	r2, r3
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	4313      	orrs	r3, r2
 800c898:	697a      	ldr	r2, [r7, #20]
 800c89a:	4313      	orrs	r3, r2
 800c89c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	697a      	ldr	r2, [r7, #20]
 800c8a2:	609a      	str	r2, [r3, #8]
}
 800c8a4:	bf00      	nop
 800c8a6:	371c      	adds	r7, #28
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ae:	4770      	bx	lr

0800c8b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c8b0:	b480      	push	{r7}
 800c8b2:	b085      	sub	sp, #20
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
 800c8b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c8c0:	2b01      	cmp	r3, #1
 800c8c2:	d101      	bne.n	800c8c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c8c4:	2302      	movs	r3, #2
 800c8c6:	e068      	b.n	800c99a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2201      	movs	r2, #1
 800c8cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2202      	movs	r2, #2
 800c8d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	685b      	ldr	r3, [r3, #4]
 800c8de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	689b      	ldr	r3, [r3, #8]
 800c8e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	4a2e      	ldr	r2, [pc, #184]	; (800c9a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c8ee:	4293      	cmp	r3, r2
 800c8f0:	d004      	beq.n	800c8fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	4a2d      	ldr	r2, [pc, #180]	; (800c9ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c8f8:	4293      	cmp	r3, r2
 800c8fa:	d108      	bne.n	800c90e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c902:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	685b      	ldr	r3, [r3, #4]
 800c908:	68fa      	ldr	r2, [r7, #12]
 800c90a:	4313      	orrs	r3, r2
 800c90c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c914:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	68fa      	ldr	r2, [r7, #12]
 800c91c:	4313      	orrs	r3, r2
 800c91e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	68fa      	ldr	r2, [r7, #12]
 800c926:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	4a1e      	ldr	r2, [pc, #120]	; (800c9a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c92e:	4293      	cmp	r3, r2
 800c930:	d01d      	beq.n	800c96e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c93a:	d018      	beq.n	800c96e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	4a1b      	ldr	r2, [pc, #108]	; (800c9b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c942:	4293      	cmp	r3, r2
 800c944:	d013      	beq.n	800c96e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	4a1a      	ldr	r2, [pc, #104]	; (800c9b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c94c:	4293      	cmp	r3, r2
 800c94e:	d00e      	beq.n	800c96e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	4a18      	ldr	r2, [pc, #96]	; (800c9b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c956:	4293      	cmp	r3, r2
 800c958:	d009      	beq.n	800c96e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	4a13      	ldr	r2, [pc, #76]	; (800c9ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c960:	4293      	cmp	r3, r2
 800c962:	d004      	beq.n	800c96e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	4a14      	ldr	r2, [pc, #80]	; (800c9bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c96a:	4293      	cmp	r3, r2
 800c96c:	d10c      	bne.n	800c988 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c96e:	68bb      	ldr	r3, [r7, #8]
 800c970:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c974:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	689b      	ldr	r3, [r3, #8]
 800c97a:	68ba      	ldr	r2, [r7, #8]
 800c97c:	4313      	orrs	r3, r2
 800c97e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	68ba      	ldr	r2, [r7, #8]
 800c986:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2201      	movs	r2, #1
 800c98c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2200      	movs	r2, #0
 800c994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c998:	2300      	movs	r3, #0
}
 800c99a:	4618      	mov	r0, r3
 800c99c:	3714      	adds	r7, #20
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a4:	4770      	bx	lr
 800c9a6:	bf00      	nop
 800c9a8:	40012c00 	.word	0x40012c00
 800c9ac:	40013400 	.word	0x40013400
 800c9b0:	40000400 	.word	0x40000400
 800c9b4:	40000800 	.word	0x40000800
 800c9b8:	40000c00 	.word	0x40000c00
 800c9bc:	40014000 	.word	0x40014000

0800c9c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	b083      	sub	sp, #12
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c9c8:	bf00      	nop
 800c9ca:	370c      	adds	r7, #12
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d2:	4770      	bx	lr

0800c9d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c9d4:	b480      	push	{r7}
 800c9d6:	b083      	sub	sp, #12
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c9dc:	bf00      	nop
 800c9de:	370c      	adds	r7, #12
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e6:	4770      	bx	lr

0800c9e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b083      	sub	sp, #12
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c9f0:	bf00      	nop
 800c9f2:	370c      	adds	r7, #12
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fa:	4770      	bx	lr

0800c9fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b082      	sub	sp, #8
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d101      	bne.n	800ca0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	e040      	b.n	800ca90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d106      	bne.n	800ca24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	2200      	movs	r2, #0
 800ca1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f7f8 fe40 	bl	80056a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2224      	movs	r2, #36	; 0x24
 800ca28:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	681a      	ldr	r2, [r3, #0]
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	f022 0201 	bic.w	r2, r2, #1
 800ca38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f000 fc0a 	bl	800d254 <UART_SetConfig>
 800ca40:	4603      	mov	r3, r0
 800ca42:	2b01      	cmp	r3, #1
 800ca44:	d101      	bne.n	800ca4a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ca46:	2301      	movs	r3, #1
 800ca48:	e022      	b.n	800ca90 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d002      	beq.n	800ca58 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f000 feb6 	bl	800d7c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	685a      	ldr	r2, [r3, #4]
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ca66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	689a      	ldr	r2, [r3, #8]
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ca76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	681a      	ldr	r2, [r3, #0]
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	f042 0201 	orr.w	r2, r2, #1
 800ca86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f000 ff3d 	bl	800d908 <UART_CheckIdleState>
 800ca8e:	4603      	mov	r3, r0
}
 800ca90:	4618      	mov	r0, r3
 800ca92:	3708      	adds	r7, #8
 800ca94:	46bd      	mov	sp, r7
 800ca96:	bd80      	pop	{r7, pc}

0800ca98 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b08a      	sub	sp, #40	; 0x28
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	60f8      	str	r0, [r7, #12]
 800caa0:	60b9      	str	r1, [r7, #8]
 800caa2:	4613      	mov	r3, r2
 800caa4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800caaa:	2b20      	cmp	r3, #32
 800caac:	d142      	bne.n	800cb34 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d002      	beq.n	800caba <HAL_UART_Receive_IT+0x22>
 800cab4:	88fb      	ldrh	r3, [r7, #6]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d101      	bne.n	800cabe <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800caba:	2301      	movs	r3, #1
 800cabc:	e03b      	b.n	800cb36 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800cac4:	2b01      	cmp	r3, #1
 800cac6:	d101      	bne.n	800cacc <HAL_UART_Receive_IT+0x34>
 800cac8:	2302      	movs	r3, #2
 800caca:	e034      	b.n	800cb36 <HAL_UART_Receive_IT+0x9e>
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	2201      	movs	r2, #1
 800cad0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	2200      	movs	r2, #0
 800cad8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	4a18      	ldr	r2, [pc, #96]	; (800cb40 <HAL_UART_Receive_IT+0xa8>)
 800cae0:	4293      	cmp	r3, r2
 800cae2:	d01f      	beq.n	800cb24 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	685b      	ldr	r3, [r3, #4]
 800caea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d018      	beq.n	800cb24 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caf8:	697b      	ldr	r3, [r7, #20]
 800cafa:	e853 3f00 	ldrex	r3, [r3]
 800cafe:	613b      	str	r3, [r7, #16]
   return(result);
 800cb00:	693b      	ldr	r3, [r7, #16]
 800cb02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cb06:	627b      	str	r3, [r7, #36]	; 0x24
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	461a      	mov	r2, r3
 800cb0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb10:	623b      	str	r3, [r7, #32]
 800cb12:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb14:	69f9      	ldr	r1, [r7, #28]
 800cb16:	6a3a      	ldr	r2, [r7, #32]
 800cb18:	e841 2300 	strex	r3, r2, [r1]
 800cb1c:	61bb      	str	r3, [r7, #24]
   return(result);
 800cb1e:	69bb      	ldr	r3, [r7, #24]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d1e6      	bne.n	800caf2 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800cb24:	88fb      	ldrh	r3, [r7, #6]
 800cb26:	461a      	mov	r2, r3
 800cb28:	68b9      	ldr	r1, [r7, #8]
 800cb2a:	68f8      	ldr	r0, [r7, #12]
 800cb2c:	f000 fffa 	bl	800db24 <UART_Start_Receive_IT>
 800cb30:	4603      	mov	r3, r0
 800cb32:	e000      	b.n	800cb36 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800cb34:	2302      	movs	r3, #2
  }
}
 800cb36:	4618      	mov	r0, r3
 800cb38:	3728      	adds	r7, #40	; 0x28
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}
 800cb3e:	bf00      	nop
 800cb40:	40008000 	.word	0x40008000

0800cb44 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b08a      	sub	sp, #40	; 0x28
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	60f8      	str	r0, [r7, #12]
 800cb4c:	60b9      	str	r1, [r7, #8]
 800cb4e:	4613      	mov	r3, r2
 800cb50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cb56:	2b20      	cmp	r3, #32
 800cb58:	d178      	bne.n	800cc4c <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800cb5a:	68bb      	ldr	r3, [r7, #8]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d002      	beq.n	800cb66 <HAL_UART_Transmit_DMA+0x22>
 800cb60:	88fb      	ldrh	r3, [r7, #6]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d101      	bne.n	800cb6a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800cb66:	2301      	movs	r3, #1
 800cb68:	e071      	b.n	800cc4e <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800cb70:	2b01      	cmp	r3, #1
 800cb72:	d101      	bne.n	800cb78 <HAL_UART_Transmit_DMA+0x34>
 800cb74:	2302      	movs	r3, #2
 800cb76:	e06a      	b.n	800cc4e <HAL_UART_Transmit_DMA+0x10a>
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	2201      	movs	r2, #1
 800cb7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	68ba      	ldr	r2, [r7, #8]
 800cb84:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	88fa      	ldrh	r2, [r7, #6]
 800cb8a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	88fa      	ldrh	r2, [r7, #6]
 800cb92:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	2200      	movs	r2, #0
 800cb9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	2221      	movs	r2, #33	; 0x21
 800cba2:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d02b      	beq.n	800cc04 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbb0:	4a29      	ldr	r2, [pc, #164]	; (800cc58 <HAL_UART_Transmit_DMA+0x114>)
 800cbb2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbb8:	4a28      	ldr	r2, [pc, #160]	; (800cc5c <HAL_UART_Transmit_DMA+0x118>)
 800cbba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbc0:	4a27      	ldr	r2, [pc, #156]	; (800cc60 <HAL_UART_Transmit_DMA+0x11c>)
 800cbc2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbc8:	2200      	movs	r2, #0
 800cbca:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbd4:	4619      	mov	r1, r3
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	3328      	adds	r3, #40	; 0x28
 800cbdc:	461a      	mov	r2, r3
 800cbde:	88fb      	ldrh	r3, [r7, #6]
 800cbe0:	f7f9 ff94 	bl	8006b0c <HAL_DMA_Start_IT>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d00c      	beq.n	800cc04 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	2210      	movs	r2, #16
 800cbee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	2220      	movs	r2, #32
 800cbfe:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 800cc00:	2301      	movs	r3, #1
 800cc02:	e024      	b.n	800cc4e <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	2240      	movs	r2, #64	; 0x40
 800cc0a:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	2200      	movs	r2, #0
 800cc10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	3308      	adds	r3, #8
 800cc1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc1c:	697b      	ldr	r3, [r7, #20]
 800cc1e:	e853 3f00 	ldrex	r3, [r3]
 800cc22:	613b      	str	r3, [r7, #16]
   return(result);
 800cc24:	693b      	ldr	r3, [r7, #16]
 800cc26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc2a:	627b      	str	r3, [r7, #36]	; 0x24
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	3308      	adds	r3, #8
 800cc32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc34:	623a      	str	r2, [r7, #32]
 800cc36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc38:	69f9      	ldr	r1, [r7, #28]
 800cc3a:	6a3a      	ldr	r2, [r7, #32]
 800cc3c:	e841 2300 	strex	r3, r2, [r1]
 800cc40:	61bb      	str	r3, [r7, #24]
   return(result);
 800cc42:	69bb      	ldr	r3, [r7, #24]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d1e5      	bne.n	800cc14 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 800cc48:	2300      	movs	r3, #0
 800cc4a:	e000      	b.n	800cc4e <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800cc4c:	2302      	movs	r3, #2
  }
}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	3728      	adds	r7, #40	; 0x28
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}
 800cc56:	bf00      	nop
 800cc58:	0800ddcb 	.word	0x0800ddcb
 800cc5c:	0800de65 	.word	0x0800de65
 800cc60:	0800de81 	.word	0x0800de81

0800cc64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b0ba      	sub	sp, #232	; 0xe8
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	69db      	ldr	r3, [r3, #28]
 800cc72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	689b      	ldr	r3, [r3, #8]
 800cc86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cc8a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800cc8e:	f640 030f 	movw	r3, #2063	; 0x80f
 800cc92:	4013      	ands	r3, r2
 800cc94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800cc98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d115      	bne.n	800cccc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800cca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cca4:	f003 0320 	and.w	r3, r3, #32
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d00f      	beq.n	800cccc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ccac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ccb0:	f003 0320 	and.w	r3, r3, #32
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d009      	beq.n	800cccc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	f000 82a6 	beq.w	800d20e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	4798      	blx	r3
      }
      return;
 800ccca:	e2a0      	b.n	800d20e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800cccc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	f000 8117 	beq.w	800cf04 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800ccd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ccda:	f003 0301 	and.w	r3, r3, #1
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d106      	bne.n	800ccf0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800cce2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800cce6:	4b85      	ldr	r3, [pc, #532]	; (800cefc <HAL_UART_IRQHandler+0x298>)
 800cce8:	4013      	ands	r3, r2
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	f000 810a 	beq.w	800cf04 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ccf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ccf4:	f003 0301 	and.w	r3, r3, #1
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d011      	beq.n	800cd20 <HAL_UART_IRQHandler+0xbc>
 800ccfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cd00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d00b      	beq.n	800cd20 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	2201      	movs	r2, #1
 800cd0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cd16:	f043 0201 	orr.w	r2, r3, #1
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cd20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd24:	f003 0302 	and.w	r3, r3, #2
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d011      	beq.n	800cd50 <HAL_UART_IRQHandler+0xec>
 800cd2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cd30:	f003 0301 	and.w	r3, r3, #1
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d00b      	beq.n	800cd50 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	2202      	movs	r2, #2
 800cd3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cd46:	f043 0204 	orr.w	r2, r3, #4
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cd50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd54:	f003 0304 	and.w	r3, r3, #4
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d011      	beq.n	800cd80 <HAL_UART_IRQHandler+0x11c>
 800cd5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cd60:	f003 0301 	and.w	r3, r3, #1
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d00b      	beq.n	800cd80 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	2204      	movs	r2, #4
 800cd6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cd76:	f043 0202 	orr.w	r2, r3, #2
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cd80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd84:	f003 0308 	and.w	r3, r3, #8
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d017      	beq.n	800cdbc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800cd8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cd90:	f003 0320 	and.w	r3, r3, #32
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d105      	bne.n	800cda4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800cd98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cd9c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d00b      	beq.n	800cdbc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	2208      	movs	r2, #8
 800cdaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cdb2:	f043 0208 	orr.w	r2, r3, #8
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cdbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cdc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d012      	beq.n	800cdee <HAL_UART_IRQHandler+0x18a>
 800cdc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cdcc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d00c      	beq.n	800cdee <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cddc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cde4:	f043 0220 	orr.w	r2, r3, #32
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	f000 820c 	beq.w	800d212 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800cdfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cdfe:	f003 0320 	and.w	r3, r3, #32
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d00d      	beq.n	800ce22 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ce06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce0a:	f003 0320 	and.w	r3, r3, #32
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d007      	beq.n	800ce22 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d003      	beq.n	800ce22 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ce28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	689b      	ldr	r3, [r3, #8]
 800ce32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce36:	2b40      	cmp	r3, #64	; 0x40
 800ce38:	d005      	beq.n	800ce46 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ce3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ce3e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d04f      	beq.n	800cee6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ce46:	6878      	ldr	r0, [r7, #4]
 800ce48:	f000 ff5c 	bl	800dd04 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	689b      	ldr	r3, [r3, #8]
 800ce52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce56:	2b40      	cmp	r3, #64	; 0x40
 800ce58:	d141      	bne.n	800cede <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	3308      	adds	r3, #8
 800ce60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ce68:	e853 3f00 	ldrex	r3, [r3]
 800ce6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ce70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ce74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ce78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	3308      	adds	r3, #8
 800ce82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ce86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ce8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ce92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ce96:	e841 2300 	strex	r3, r2, [r1]
 800ce9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ce9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d1d9      	bne.n	800ce5a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d013      	beq.n	800ced6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ceb2:	4a13      	ldr	r2, [pc, #76]	; (800cf00 <HAL_UART_IRQHandler+0x29c>)
 800ceb4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ceba:	4618      	mov	r0, r3
 800cebc:	f7f9 fec4 	bl	8006c48 <HAL_DMA_Abort_IT>
 800cec0:	4603      	mov	r3, r0
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d017      	beq.n	800cef6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ceca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cecc:	687a      	ldr	r2, [r7, #4]
 800cece:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800ced0:	4610      	mov	r0, r2
 800ced2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ced4:	e00f      	b.n	800cef6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f7f7 fc84 	bl	80047e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cedc:	e00b      	b.n	800cef6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	f7f7 fc80 	bl	80047e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cee4:	e007      	b.n	800cef6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cee6:	6878      	ldr	r0, [r7, #4]
 800cee8:	f7f7 fc7c 	bl	80047e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2200      	movs	r2, #0
 800cef0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800cef4:	e18d      	b.n	800d212 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cef6:	bf00      	nop
    return;
 800cef8:	e18b      	b.n	800d212 <HAL_UART_IRQHandler+0x5ae>
 800cefa:	bf00      	nop
 800cefc:	04000120 	.word	0x04000120
 800cf00:	0800defd 	.word	0x0800defd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf08:	2b01      	cmp	r3, #1
 800cf0a:	f040 8146 	bne.w	800d19a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cf0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf12:	f003 0310 	and.w	r3, r3, #16
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	f000 813f 	beq.w	800d19a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cf1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf20:	f003 0310 	and.w	r3, r3, #16
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	f000 8138 	beq.w	800d19a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	2210      	movs	r2, #16
 800cf30:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	689b      	ldr	r3, [r3, #8]
 800cf38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf3c:	2b40      	cmp	r3, #64	; 0x40
 800cf3e:	f040 80b4 	bne.w	800d0aa <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	685b      	ldr	r3, [r3, #4]
 800cf4a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cf4e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	f000 815f 	beq.w	800d216 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800cf5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cf62:	429a      	cmp	r2, r3
 800cf64:	f080 8157 	bcs.w	800d216 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cf6e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	f003 0320 	and.w	r3, r3, #32
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	f040 8085 	bne.w	800d08e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cf90:	e853 3f00 	ldrex	r3, [r3]
 800cf94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800cf98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cf9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cfa0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	461a      	mov	r2, r3
 800cfaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cfae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cfb2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfb6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800cfba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cfbe:	e841 2300 	strex	r3, r2, [r1]
 800cfc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800cfc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d1da      	bne.n	800cf84 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	3308      	adds	r3, #8
 800cfd4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cfd8:	e853 3f00 	ldrex	r3, [r3]
 800cfdc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800cfde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cfe0:	f023 0301 	bic.w	r3, r3, #1
 800cfe4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	3308      	adds	r3, #8
 800cfee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800cff2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800cff6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cff8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cffa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cffe:	e841 2300 	strex	r3, r2, [r1]
 800d002:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d004:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d006:	2b00      	cmp	r3, #0
 800d008:	d1e1      	bne.n	800cfce <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	3308      	adds	r3, #8
 800d010:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d012:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d014:	e853 3f00 	ldrex	r3, [r3]
 800d018:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d01a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d01c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d020:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	3308      	adds	r3, #8
 800d02a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d02e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d030:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d032:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d034:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d036:	e841 2300 	strex	r3, r2, [r1]
 800d03a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d03c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d1e3      	bne.n	800d00a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2220      	movs	r2, #32
 800d046:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2200      	movs	r2, #0
 800d04c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d056:	e853 3f00 	ldrex	r3, [r3]
 800d05a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d05c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d05e:	f023 0310 	bic.w	r3, r3, #16
 800d062:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	461a      	mov	r2, r3
 800d06c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d070:	65bb      	str	r3, [r7, #88]	; 0x58
 800d072:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d074:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d076:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d078:	e841 2300 	strex	r3, r2, [r1]
 800d07c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d07e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d080:	2b00      	cmp	r3, #0
 800d082:	d1e4      	bne.n	800d04e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d088:	4618      	mov	r0, r3
 800d08a:	f7f9 fd9f 	bl	8006bcc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d09a:	b29b      	uxth	r3, r3
 800d09c:	1ad3      	subs	r3, r2, r3
 800d09e:	b29b      	uxth	r3, r3
 800d0a0:	4619      	mov	r1, r3
 800d0a2:	6878      	ldr	r0, [r7, #4]
 800d0a4:	f000 f8ca 	bl	800d23c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d0a8:	e0b5      	b.n	800d216 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d0b6:	b29b      	uxth	r3, r3
 800d0b8:	1ad3      	subs	r3, r2, r3
 800d0ba:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d0c4:	b29b      	uxth	r3, r3
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	f000 80a7 	beq.w	800d21a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800d0cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	f000 80a2 	beq.w	800d21a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0de:	e853 3f00 	ldrex	r3, [r3]
 800d0e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d0e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d0ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	461a      	mov	r2, r3
 800d0f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d0f8:	647b      	str	r3, [r7, #68]	; 0x44
 800d0fa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d0fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d100:	e841 2300 	strex	r3, r2, [r1]
 800d104:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d1e4      	bne.n	800d0d6 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	3308      	adds	r3, #8
 800d112:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d116:	e853 3f00 	ldrex	r3, [r3]
 800d11a:	623b      	str	r3, [r7, #32]
   return(result);
 800d11c:	6a3b      	ldr	r3, [r7, #32]
 800d11e:	f023 0301 	bic.w	r3, r3, #1
 800d122:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	3308      	adds	r3, #8
 800d12c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d130:	633a      	str	r2, [r7, #48]	; 0x30
 800d132:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d134:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d136:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d138:	e841 2300 	strex	r3, r2, [r1]
 800d13c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d140:	2b00      	cmp	r3, #0
 800d142:	d1e3      	bne.n	800d10c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2220      	movs	r2, #32
 800d148:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2200      	movs	r2, #0
 800d14e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2200      	movs	r2, #0
 800d154:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d15c:	693b      	ldr	r3, [r7, #16]
 800d15e:	e853 3f00 	ldrex	r3, [r3]
 800d162:	60fb      	str	r3, [r7, #12]
   return(result);
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	f023 0310 	bic.w	r3, r3, #16
 800d16a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	461a      	mov	r2, r3
 800d174:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d178:	61fb      	str	r3, [r7, #28]
 800d17a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d17c:	69b9      	ldr	r1, [r7, #24]
 800d17e:	69fa      	ldr	r2, [r7, #28]
 800d180:	e841 2300 	strex	r3, r2, [r1]
 800d184:	617b      	str	r3, [r7, #20]
   return(result);
 800d186:	697b      	ldr	r3, [r7, #20]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d1e4      	bne.n	800d156 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d18c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d190:	4619      	mov	r1, r3
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	f000 f852 	bl	800d23c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d198:	e03f      	b.n	800d21a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d19a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d19e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d00e      	beq.n	800d1c4 <HAL_UART_IRQHandler+0x560>
 800d1a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d1aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d008      	beq.n	800d1c4 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d1ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	f001 f83d 	bl	800e23c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d1c2:	e02d      	b.n	800d220 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800d1c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d1c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d00e      	beq.n	800d1ee <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800d1d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d1d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d008      	beq.n	800d1ee <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d01c      	beq.n	800d21e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	4798      	blx	r3
    }
    return;
 800d1ec:	e017      	b.n	800d21e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d1ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d1f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d012      	beq.n	800d220 <HAL_UART_IRQHandler+0x5bc>
 800d1fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d1fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d202:	2b00      	cmp	r3, #0
 800d204:	d00c      	beq.n	800d220 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f000 fe8e 	bl	800df28 <UART_EndTransmit_IT>
    return;
 800d20c:	e008      	b.n	800d220 <HAL_UART_IRQHandler+0x5bc>
      return;
 800d20e:	bf00      	nop
 800d210:	e006      	b.n	800d220 <HAL_UART_IRQHandler+0x5bc>
    return;
 800d212:	bf00      	nop
 800d214:	e004      	b.n	800d220 <HAL_UART_IRQHandler+0x5bc>
      return;
 800d216:	bf00      	nop
 800d218:	e002      	b.n	800d220 <HAL_UART_IRQHandler+0x5bc>
      return;
 800d21a:	bf00      	nop
 800d21c:	e000      	b.n	800d220 <HAL_UART_IRQHandler+0x5bc>
    return;
 800d21e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800d220:	37e8      	adds	r7, #232	; 0xe8
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}
 800d226:	bf00      	nop

0800d228 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d228:	b480      	push	{r7}
 800d22a:	b083      	sub	sp, #12
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d230:	bf00      	nop
 800d232:	370c      	adds	r7, #12
 800d234:	46bd      	mov	sp, r7
 800d236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23a:	4770      	bx	lr

0800d23c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d23c:	b480      	push	{r7}
 800d23e:	b083      	sub	sp, #12
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
 800d244:	460b      	mov	r3, r1
 800d246:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d248:	bf00      	nop
 800d24a:	370c      	adds	r7, #12
 800d24c:	46bd      	mov	sp, r7
 800d24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d252:	4770      	bx	lr

0800d254 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d258:	b08a      	sub	sp, #40	; 0x28
 800d25a:	af00      	add	r7, sp, #0
 800d25c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d25e:	2300      	movs	r3, #0
 800d260:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	689a      	ldr	r2, [r3, #8]
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	691b      	ldr	r3, [r3, #16]
 800d26c:	431a      	orrs	r2, r3
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	695b      	ldr	r3, [r3, #20]
 800d272:	431a      	orrs	r2, r3
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	69db      	ldr	r3, [r3, #28]
 800d278:	4313      	orrs	r3, r2
 800d27a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	681a      	ldr	r2, [r3, #0]
 800d282:	4ba4      	ldr	r3, [pc, #656]	; (800d514 <UART_SetConfig+0x2c0>)
 800d284:	4013      	ands	r3, r2
 800d286:	68fa      	ldr	r2, [r7, #12]
 800d288:	6812      	ldr	r2, [r2, #0]
 800d28a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d28c:	430b      	orrs	r3, r1
 800d28e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	685b      	ldr	r3, [r3, #4]
 800d296:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	68da      	ldr	r2, [r3, #12]
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	430a      	orrs	r2, r1
 800d2a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	699b      	ldr	r3, [r3, #24]
 800d2aa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	4a99      	ldr	r2, [pc, #612]	; (800d518 <UART_SetConfig+0x2c4>)
 800d2b2:	4293      	cmp	r3, r2
 800d2b4:	d004      	beq.n	800d2c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	6a1b      	ldr	r3, [r3, #32]
 800d2ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2bc:	4313      	orrs	r3, r2
 800d2be:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	689b      	ldr	r3, [r3, #8]
 800d2c6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2d0:	430a      	orrs	r2, r1
 800d2d2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	4a90      	ldr	r2, [pc, #576]	; (800d51c <UART_SetConfig+0x2c8>)
 800d2da:	4293      	cmp	r3, r2
 800d2dc:	d126      	bne.n	800d32c <UART_SetConfig+0xd8>
 800d2de:	4b90      	ldr	r3, [pc, #576]	; (800d520 <UART_SetConfig+0x2cc>)
 800d2e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d2e4:	f003 0303 	and.w	r3, r3, #3
 800d2e8:	2b03      	cmp	r3, #3
 800d2ea:	d81b      	bhi.n	800d324 <UART_SetConfig+0xd0>
 800d2ec:	a201      	add	r2, pc, #4	; (adr r2, 800d2f4 <UART_SetConfig+0xa0>)
 800d2ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2f2:	bf00      	nop
 800d2f4:	0800d305 	.word	0x0800d305
 800d2f8:	0800d315 	.word	0x0800d315
 800d2fc:	0800d30d 	.word	0x0800d30d
 800d300:	0800d31d 	.word	0x0800d31d
 800d304:	2301      	movs	r3, #1
 800d306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d30a:	e116      	b.n	800d53a <UART_SetConfig+0x2e6>
 800d30c:	2302      	movs	r3, #2
 800d30e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d312:	e112      	b.n	800d53a <UART_SetConfig+0x2e6>
 800d314:	2304      	movs	r3, #4
 800d316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d31a:	e10e      	b.n	800d53a <UART_SetConfig+0x2e6>
 800d31c:	2308      	movs	r3, #8
 800d31e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d322:	e10a      	b.n	800d53a <UART_SetConfig+0x2e6>
 800d324:	2310      	movs	r3, #16
 800d326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d32a:	e106      	b.n	800d53a <UART_SetConfig+0x2e6>
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	4a7c      	ldr	r2, [pc, #496]	; (800d524 <UART_SetConfig+0x2d0>)
 800d332:	4293      	cmp	r3, r2
 800d334:	d138      	bne.n	800d3a8 <UART_SetConfig+0x154>
 800d336:	4b7a      	ldr	r3, [pc, #488]	; (800d520 <UART_SetConfig+0x2cc>)
 800d338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d33c:	f003 030c 	and.w	r3, r3, #12
 800d340:	2b0c      	cmp	r3, #12
 800d342:	d82d      	bhi.n	800d3a0 <UART_SetConfig+0x14c>
 800d344:	a201      	add	r2, pc, #4	; (adr r2, 800d34c <UART_SetConfig+0xf8>)
 800d346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d34a:	bf00      	nop
 800d34c:	0800d381 	.word	0x0800d381
 800d350:	0800d3a1 	.word	0x0800d3a1
 800d354:	0800d3a1 	.word	0x0800d3a1
 800d358:	0800d3a1 	.word	0x0800d3a1
 800d35c:	0800d391 	.word	0x0800d391
 800d360:	0800d3a1 	.word	0x0800d3a1
 800d364:	0800d3a1 	.word	0x0800d3a1
 800d368:	0800d3a1 	.word	0x0800d3a1
 800d36c:	0800d389 	.word	0x0800d389
 800d370:	0800d3a1 	.word	0x0800d3a1
 800d374:	0800d3a1 	.word	0x0800d3a1
 800d378:	0800d3a1 	.word	0x0800d3a1
 800d37c:	0800d399 	.word	0x0800d399
 800d380:	2300      	movs	r3, #0
 800d382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d386:	e0d8      	b.n	800d53a <UART_SetConfig+0x2e6>
 800d388:	2302      	movs	r3, #2
 800d38a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d38e:	e0d4      	b.n	800d53a <UART_SetConfig+0x2e6>
 800d390:	2304      	movs	r3, #4
 800d392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d396:	e0d0      	b.n	800d53a <UART_SetConfig+0x2e6>
 800d398:	2308      	movs	r3, #8
 800d39a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d39e:	e0cc      	b.n	800d53a <UART_SetConfig+0x2e6>
 800d3a0:	2310      	movs	r3, #16
 800d3a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d3a6:	e0c8      	b.n	800d53a <UART_SetConfig+0x2e6>
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	4a5e      	ldr	r2, [pc, #376]	; (800d528 <UART_SetConfig+0x2d4>)
 800d3ae:	4293      	cmp	r3, r2
 800d3b0:	d125      	bne.n	800d3fe <UART_SetConfig+0x1aa>
 800d3b2:	4b5b      	ldr	r3, [pc, #364]	; (800d520 <UART_SetConfig+0x2cc>)
 800d3b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d3bc:	2b30      	cmp	r3, #48	; 0x30
 800d3be:	d016      	beq.n	800d3ee <UART_SetConfig+0x19a>
 800d3c0:	2b30      	cmp	r3, #48	; 0x30
 800d3c2:	d818      	bhi.n	800d3f6 <UART_SetConfig+0x1a2>
 800d3c4:	2b20      	cmp	r3, #32
 800d3c6:	d00a      	beq.n	800d3de <UART_SetConfig+0x18a>
 800d3c8:	2b20      	cmp	r3, #32
 800d3ca:	d814      	bhi.n	800d3f6 <UART_SetConfig+0x1a2>
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d002      	beq.n	800d3d6 <UART_SetConfig+0x182>
 800d3d0:	2b10      	cmp	r3, #16
 800d3d2:	d008      	beq.n	800d3e6 <UART_SetConfig+0x192>
 800d3d4:	e00f      	b.n	800d3f6 <UART_SetConfig+0x1a2>
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d3dc:	e0ad      	b.n	800d53a <UART_SetConfig+0x2e6>
 800d3de:	2302      	movs	r3, #2
 800d3e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d3e4:	e0a9      	b.n	800d53a <UART_SetConfig+0x2e6>
 800d3e6:	2304      	movs	r3, #4
 800d3e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d3ec:	e0a5      	b.n	800d53a <UART_SetConfig+0x2e6>
 800d3ee:	2308      	movs	r3, #8
 800d3f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d3f4:	e0a1      	b.n	800d53a <UART_SetConfig+0x2e6>
 800d3f6:	2310      	movs	r3, #16
 800d3f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d3fc:	e09d      	b.n	800d53a <UART_SetConfig+0x2e6>
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	4a4a      	ldr	r2, [pc, #296]	; (800d52c <UART_SetConfig+0x2d8>)
 800d404:	4293      	cmp	r3, r2
 800d406:	d125      	bne.n	800d454 <UART_SetConfig+0x200>
 800d408:	4b45      	ldr	r3, [pc, #276]	; (800d520 <UART_SetConfig+0x2cc>)
 800d40a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d40e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d412:	2bc0      	cmp	r3, #192	; 0xc0
 800d414:	d016      	beq.n	800d444 <UART_SetConfig+0x1f0>
 800d416:	2bc0      	cmp	r3, #192	; 0xc0
 800d418:	d818      	bhi.n	800d44c <UART_SetConfig+0x1f8>
 800d41a:	2b80      	cmp	r3, #128	; 0x80
 800d41c:	d00a      	beq.n	800d434 <UART_SetConfig+0x1e0>
 800d41e:	2b80      	cmp	r3, #128	; 0x80
 800d420:	d814      	bhi.n	800d44c <UART_SetConfig+0x1f8>
 800d422:	2b00      	cmp	r3, #0
 800d424:	d002      	beq.n	800d42c <UART_SetConfig+0x1d8>
 800d426:	2b40      	cmp	r3, #64	; 0x40
 800d428:	d008      	beq.n	800d43c <UART_SetConfig+0x1e8>
 800d42a:	e00f      	b.n	800d44c <UART_SetConfig+0x1f8>
 800d42c:	2300      	movs	r3, #0
 800d42e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d432:	e082      	b.n	800d53a <UART_SetConfig+0x2e6>
 800d434:	2302      	movs	r3, #2
 800d436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d43a:	e07e      	b.n	800d53a <UART_SetConfig+0x2e6>
 800d43c:	2304      	movs	r3, #4
 800d43e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d442:	e07a      	b.n	800d53a <UART_SetConfig+0x2e6>
 800d444:	2308      	movs	r3, #8
 800d446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d44a:	e076      	b.n	800d53a <UART_SetConfig+0x2e6>
 800d44c:	2310      	movs	r3, #16
 800d44e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d452:	e072      	b.n	800d53a <UART_SetConfig+0x2e6>
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	4a35      	ldr	r2, [pc, #212]	; (800d530 <UART_SetConfig+0x2dc>)
 800d45a:	4293      	cmp	r3, r2
 800d45c:	d12a      	bne.n	800d4b4 <UART_SetConfig+0x260>
 800d45e:	4b30      	ldr	r3, [pc, #192]	; (800d520 <UART_SetConfig+0x2cc>)
 800d460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d464:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d468:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d46c:	d01a      	beq.n	800d4a4 <UART_SetConfig+0x250>
 800d46e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d472:	d81b      	bhi.n	800d4ac <UART_SetConfig+0x258>
 800d474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d478:	d00c      	beq.n	800d494 <UART_SetConfig+0x240>
 800d47a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d47e:	d815      	bhi.n	800d4ac <UART_SetConfig+0x258>
 800d480:	2b00      	cmp	r3, #0
 800d482:	d003      	beq.n	800d48c <UART_SetConfig+0x238>
 800d484:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d488:	d008      	beq.n	800d49c <UART_SetConfig+0x248>
 800d48a:	e00f      	b.n	800d4ac <UART_SetConfig+0x258>
 800d48c:	2300      	movs	r3, #0
 800d48e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d492:	e052      	b.n	800d53a <UART_SetConfig+0x2e6>
 800d494:	2302      	movs	r3, #2
 800d496:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d49a:	e04e      	b.n	800d53a <UART_SetConfig+0x2e6>
 800d49c:	2304      	movs	r3, #4
 800d49e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d4a2:	e04a      	b.n	800d53a <UART_SetConfig+0x2e6>
 800d4a4:	2308      	movs	r3, #8
 800d4a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d4aa:	e046      	b.n	800d53a <UART_SetConfig+0x2e6>
 800d4ac:	2310      	movs	r3, #16
 800d4ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d4b2:	e042      	b.n	800d53a <UART_SetConfig+0x2e6>
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	4a17      	ldr	r2, [pc, #92]	; (800d518 <UART_SetConfig+0x2c4>)
 800d4ba:	4293      	cmp	r3, r2
 800d4bc:	d13a      	bne.n	800d534 <UART_SetConfig+0x2e0>
 800d4be:	4b18      	ldr	r3, [pc, #96]	; (800d520 <UART_SetConfig+0x2cc>)
 800d4c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d4c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d4cc:	d01a      	beq.n	800d504 <UART_SetConfig+0x2b0>
 800d4ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d4d2:	d81b      	bhi.n	800d50c <UART_SetConfig+0x2b8>
 800d4d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d4d8:	d00c      	beq.n	800d4f4 <UART_SetConfig+0x2a0>
 800d4da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d4de:	d815      	bhi.n	800d50c <UART_SetConfig+0x2b8>
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d003      	beq.n	800d4ec <UART_SetConfig+0x298>
 800d4e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d4e8:	d008      	beq.n	800d4fc <UART_SetConfig+0x2a8>
 800d4ea:	e00f      	b.n	800d50c <UART_SetConfig+0x2b8>
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d4f2:	e022      	b.n	800d53a <UART_SetConfig+0x2e6>
 800d4f4:	2302      	movs	r3, #2
 800d4f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d4fa:	e01e      	b.n	800d53a <UART_SetConfig+0x2e6>
 800d4fc:	2304      	movs	r3, #4
 800d4fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d502:	e01a      	b.n	800d53a <UART_SetConfig+0x2e6>
 800d504:	2308      	movs	r3, #8
 800d506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d50a:	e016      	b.n	800d53a <UART_SetConfig+0x2e6>
 800d50c:	2310      	movs	r3, #16
 800d50e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d512:	e012      	b.n	800d53a <UART_SetConfig+0x2e6>
 800d514:	efff69f3 	.word	0xefff69f3
 800d518:	40008000 	.word	0x40008000
 800d51c:	40013800 	.word	0x40013800
 800d520:	40021000 	.word	0x40021000
 800d524:	40004400 	.word	0x40004400
 800d528:	40004800 	.word	0x40004800
 800d52c:	40004c00 	.word	0x40004c00
 800d530:	40005000 	.word	0x40005000
 800d534:	2310      	movs	r3, #16
 800d536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	4a9f      	ldr	r2, [pc, #636]	; (800d7bc <UART_SetConfig+0x568>)
 800d540:	4293      	cmp	r3, r2
 800d542:	d17a      	bne.n	800d63a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d544:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d548:	2b08      	cmp	r3, #8
 800d54a:	d824      	bhi.n	800d596 <UART_SetConfig+0x342>
 800d54c:	a201      	add	r2, pc, #4	; (adr r2, 800d554 <UART_SetConfig+0x300>)
 800d54e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d552:	bf00      	nop
 800d554:	0800d579 	.word	0x0800d579
 800d558:	0800d597 	.word	0x0800d597
 800d55c:	0800d581 	.word	0x0800d581
 800d560:	0800d597 	.word	0x0800d597
 800d564:	0800d587 	.word	0x0800d587
 800d568:	0800d597 	.word	0x0800d597
 800d56c:	0800d597 	.word	0x0800d597
 800d570:	0800d597 	.word	0x0800d597
 800d574:	0800d58f 	.word	0x0800d58f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d578:	f7fc f8f2 	bl	8009760 <HAL_RCC_GetPCLK1Freq>
 800d57c:	61f8      	str	r0, [r7, #28]
        break;
 800d57e:	e010      	b.n	800d5a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d580:	4b8f      	ldr	r3, [pc, #572]	; (800d7c0 <UART_SetConfig+0x56c>)
 800d582:	61fb      	str	r3, [r7, #28]
        break;
 800d584:	e00d      	b.n	800d5a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d586:	f7fc f853 	bl	8009630 <HAL_RCC_GetSysClockFreq>
 800d58a:	61f8      	str	r0, [r7, #28]
        break;
 800d58c:	e009      	b.n	800d5a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d58e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d592:	61fb      	str	r3, [r7, #28]
        break;
 800d594:	e005      	b.n	800d5a2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800d596:	2300      	movs	r3, #0
 800d598:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d59a:	2301      	movs	r3, #1
 800d59c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800d5a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d5a2:	69fb      	ldr	r3, [r7, #28]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	f000 80fb 	beq.w	800d7a0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	685a      	ldr	r2, [r3, #4]
 800d5ae:	4613      	mov	r3, r2
 800d5b0:	005b      	lsls	r3, r3, #1
 800d5b2:	4413      	add	r3, r2
 800d5b4:	69fa      	ldr	r2, [r7, #28]
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	d305      	bcc.n	800d5c6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	685b      	ldr	r3, [r3, #4]
 800d5be:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800d5c0:	69fa      	ldr	r2, [r7, #28]
 800d5c2:	429a      	cmp	r2, r3
 800d5c4:	d903      	bls.n	800d5ce <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800d5c6:	2301      	movs	r3, #1
 800d5c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800d5cc:	e0e8      	b.n	800d7a0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800d5ce:	69fb      	ldr	r3, [r7, #28]
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	461c      	mov	r4, r3
 800d5d4:	4615      	mov	r5, r2
 800d5d6:	f04f 0200 	mov.w	r2, #0
 800d5da:	f04f 0300 	mov.w	r3, #0
 800d5de:	022b      	lsls	r3, r5, #8
 800d5e0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800d5e4:	0222      	lsls	r2, r4, #8
 800d5e6:	68f9      	ldr	r1, [r7, #12]
 800d5e8:	6849      	ldr	r1, [r1, #4]
 800d5ea:	0849      	lsrs	r1, r1, #1
 800d5ec:	2000      	movs	r0, #0
 800d5ee:	4688      	mov	r8, r1
 800d5f0:	4681      	mov	r9, r0
 800d5f2:	eb12 0a08 	adds.w	sl, r2, r8
 800d5f6:	eb43 0b09 	adc.w	fp, r3, r9
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	685b      	ldr	r3, [r3, #4]
 800d5fe:	2200      	movs	r2, #0
 800d600:	603b      	str	r3, [r7, #0]
 800d602:	607a      	str	r2, [r7, #4]
 800d604:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d608:	4650      	mov	r0, sl
 800d60a:	4659      	mov	r1, fp
 800d60c:	f7f3 fb8c 	bl	8000d28 <__aeabi_uldivmod>
 800d610:	4602      	mov	r2, r0
 800d612:	460b      	mov	r3, r1
 800d614:	4613      	mov	r3, r2
 800d616:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d618:	69bb      	ldr	r3, [r7, #24]
 800d61a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d61e:	d308      	bcc.n	800d632 <UART_SetConfig+0x3de>
 800d620:	69bb      	ldr	r3, [r7, #24]
 800d622:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d626:	d204      	bcs.n	800d632 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	69ba      	ldr	r2, [r7, #24]
 800d62e:	60da      	str	r2, [r3, #12]
 800d630:	e0b6      	b.n	800d7a0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800d632:	2301      	movs	r3, #1
 800d634:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800d638:	e0b2      	b.n	800d7a0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	69db      	ldr	r3, [r3, #28]
 800d63e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d642:	d15e      	bne.n	800d702 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800d644:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d648:	2b08      	cmp	r3, #8
 800d64a:	d828      	bhi.n	800d69e <UART_SetConfig+0x44a>
 800d64c:	a201      	add	r2, pc, #4	; (adr r2, 800d654 <UART_SetConfig+0x400>)
 800d64e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d652:	bf00      	nop
 800d654:	0800d679 	.word	0x0800d679
 800d658:	0800d681 	.word	0x0800d681
 800d65c:	0800d689 	.word	0x0800d689
 800d660:	0800d69f 	.word	0x0800d69f
 800d664:	0800d68f 	.word	0x0800d68f
 800d668:	0800d69f 	.word	0x0800d69f
 800d66c:	0800d69f 	.word	0x0800d69f
 800d670:	0800d69f 	.word	0x0800d69f
 800d674:	0800d697 	.word	0x0800d697
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d678:	f7fc f872 	bl	8009760 <HAL_RCC_GetPCLK1Freq>
 800d67c:	61f8      	str	r0, [r7, #28]
        break;
 800d67e:	e014      	b.n	800d6aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d680:	f7fc f884 	bl	800978c <HAL_RCC_GetPCLK2Freq>
 800d684:	61f8      	str	r0, [r7, #28]
        break;
 800d686:	e010      	b.n	800d6aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d688:	4b4d      	ldr	r3, [pc, #308]	; (800d7c0 <UART_SetConfig+0x56c>)
 800d68a:	61fb      	str	r3, [r7, #28]
        break;
 800d68c:	e00d      	b.n	800d6aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d68e:	f7fb ffcf 	bl	8009630 <HAL_RCC_GetSysClockFreq>
 800d692:	61f8      	str	r0, [r7, #28]
        break;
 800d694:	e009      	b.n	800d6aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d696:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d69a:	61fb      	str	r3, [r7, #28]
        break;
 800d69c:	e005      	b.n	800d6aa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800d69e:	2300      	movs	r3, #0
 800d6a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800d6a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d6aa:	69fb      	ldr	r3, [r7, #28]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d077      	beq.n	800d7a0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d6b0:	69fb      	ldr	r3, [r7, #28]
 800d6b2:	005a      	lsls	r2, r3, #1
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	685b      	ldr	r3, [r3, #4]
 800d6b8:	085b      	lsrs	r3, r3, #1
 800d6ba:	441a      	add	r2, r3
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	685b      	ldr	r3, [r3, #4]
 800d6c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6c4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d6c6:	69bb      	ldr	r3, [r7, #24]
 800d6c8:	2b0f      	cmp	r3, #15
 800d6ca:	d916      	bls.n	800d6fa <UART_SetConfig+0x4a6>
 800d6cc:	69bb      	ldr	r3, [r7, #24]
 800d6ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d6d2:	d212      	bcs.n	800d6fa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d6d4:	69bb      	ldr	r3, [r7, #24]
 800d6d6:	b29b      	uxth	r3, r3
 800d6d8:	f023 030f 	bic.w	r3, r3, #15
 800d6dc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d6de:	69bb      	ldr	r3, [r7, #24]
 800d6e0:	085b      	lsrs	r3, r3, #1
 800d6e2:	b29b      	uxth	r3, r3
 800d6e4:	f003 0307 	and.w	r3, r3, #7
 800d6e8:	b29a      	uxth	r2, r3
 800d6ea:	8afb      	ldrh	r3, [r7, #22]
 800d6ec:	4313      	orrs	r3, r2
 800d6ee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	8afa      	ldrh	r2, [r7, #22]
 800d6f6:	60da      	str	r2, [r3, #12]
 800d6f8:	e052      	b.n	800d7a0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800d6fa:	2301      	movs	r3, #1
 800d6fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800d700:	e04e      	b.n	800d7a0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d702:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d706:	2b08      	cmp	r3, #8
 800d708:	d827      	bhi.n	800d75a <UART_SetConfig+0x506>
 800d70a:	a201      	add	r2, pc, #4	; (adr r2, 800d710 <UART_SetConfig+0x4bc>)
 800d70c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d710:	0800d735 	.word	0x0800d735
 800d714:	0800d73d 	.word	0x0800d73d
 800d718:	0800d745 	.word	0x0800d745
 800d71c:	0800d75b 	.word	0x0800d75b
 800d720:	0800d74b 	.word	0x0800d74b
 800d724:	0800d75b 	.word	0x0800d75b
 800d728:	0800d75b 	.word	0x0800d75b
 800d72c:	0800d75b 	.word	0x0800d75b
 800d730:	0800d753 	.word	0x0800d753
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d734:	f7fc f814 	bl	8009760 <HAL_RCC_GetPCLK1Freq>
 800d738:	61f8      	str	r0, [r7, #28]
        break;
 800d73a:	e014      	b.n	800d766 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d73c:	f7fc f826 	bl	800978c <HAL_RCC_GetPCLK2Freq>
 800d740:	61f8      	str	r0, [r7, #28]
        break;
 800d742:	e010      	b.n	800d766 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d744:	4b1e      	ldr	r3, [pc, #120]	; (800d7c0 <UART_SetConfig+0x56c>)
 800d746:	61fb      	str	r3, [r7, #28]
        break;
 800d748:	e00d      	b.n	800d766 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d74a:	f7fb ff71 	bl	8009630 <HAL_RCC_GetSysClockFreq>
 800d74e:	61f8      	str	r0, [r7, #28]
        break;
 800d750:	e009      	b.n	800d766 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d752:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d756:	61fb      	str	r3, [r7, #28]
        break;
 800d758:	e005      	b.n	800d766 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800d75a:	2300      	movs	r3, #0
 800d75c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d75e:	2301      	movs	r3, #1
 800d760:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800d764:	bf00      	nop
    }

    if (pclk != 0U)
 800d766:	69fb      	ldr	r3, [r7, #28]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d019      	beq.n	800d7a0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	685b      	ldr	r3, [r3, #4]
 800d770:	085a      	lsrs	r2, r3, #1
 800d772:	69fb      	ldr	r3, [r7, #28]
 800d774:	441a      	add	r2, r3
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	685b      	ldr	r3, [r3, #4]
 800d77a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d77e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d780:	69bb      	ldr	r3, [r7, #24]
 800d782:	2b0f      	cmp	r3, #15
 800d784:	d909      	bls.n	800d79a <UART_SetConfig+0x546>
 800d786:	69bb      	ldr	r3, [r7, #24]
 800d788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d78c:	d205      	bcs.n	800d79a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d78e:	69bb      	ldr	r3, [r7, #24]
 800d790:	b29a      	uxth	r2, r3
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	60da      	str	r2, [r3, #12]
 800d798:	e002      	b.n	800d7a0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800d79a:	2301      	movs	r3, #1
 800d79c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800d7ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	3728      	adds	r7, #40	; 0x28
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d7ba:	bf00      	nop
 800d7bc:	40008000 	.word	0x40008000
 800d7c0:	00f42400 	.word	0x00f42400

0800d7c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d7c4:	b480      	push	{r7}
 800d7c6:	b083      	sub	sp, #12
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7d0:	f003 0301 	and.w	r3, r3, #1
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d00a      	beq.n	800d7ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	685b      	ldr	r3, [r3, #4]
 800d7de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	430a      	orrs	r2, r1
 800d7ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7f2:	f003 0302 	and.w	r3, r3, #2
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d00a      	beq.n	800d810 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	685b      	ldr	r3, [r3, #4]
 800d800:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	430a      	orrs	r2, r1
 800d80e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d814:	f003 0304 	and.w	r3, r3, #4
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d00a      	beq.n	800d832 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	685b      	ldr	r3, [r3, #4]
 800d822:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	430a      	orrs	r2, r1
 800d830:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d836:	f003 0308 	and.w	r3, r3, #8
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d00a      	beq.n	800d854 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	685b      	ldr	r3, [r3, #4]
 800d844:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	430a      	orrs	r2, r1
 800d852:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d858:	f003 0310 	and.w	r3, r3, #16
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d00a      	beq.n	800d876 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	689b      	ldr	r3, [r3, #8]
 800d866:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	430a      	orrs	r2, r1
 800d874:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d87a:	f003 0320 	and.w	r3, r3, #32
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d00a      	beq.n	800d898 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	689b      	ldr	r3, [r3, #8]
 800d888:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	430a      	orrs	r2, r1
 800d896:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d89c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d01a      	beq.n	800d8da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	685b      	ldr	r3, [r3, #4]
 800d8aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	430a      	orrs	r2, r1
 800d8b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d8c2:	d10a      	bne.n	800d8da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	685b      	ldr	r3, [r3, #4]
 800d8ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	430a      	orrs	r2, r1
 800d8d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d00a      	beq.n	800d8fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	685b      	ldr	r3, [r3, #4]
 800d8ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	430a      	orrs	r2, r1
 800d8fa:	605a      	str	r2, [r3, #4]
  }
}
 800d8fc:	bf00      	nop
 800d8fe:	370c      	adds	r7, #12
 800d900:	46bd      	mov	sp, r7
 800d902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d906:	4770      	bx	lr

0800d908 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b086      	sub	sp, #24
 800d90c:	af02      	add	r7, sp, #8
 800d90e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	2200      	movs	r2, #0
 800d914:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d918:	f7f8 fecc 	bl	80066b4 <HAL_GetTick>
 800d91c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	f003 0308 	and.w	r3, r3, #8
 800d928:	2b08      	cmp	r3, #8
 800d92a:	d10e      	bne.n	800d94a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d92c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d930:	9300      	str	r3, [sp, #0]
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	2200      	movs	r2, #0
 800d936:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d93a:	6878      	ldr	r0, [r7, #4]
 800d93c:	f000 f82d 	bl	800d99a <UART_WaitOnFlagUntilTimeout>
 800d940:	4603      	mov	r3, r0
 800d942:	2b00      	cmp	r3, #0
 800d944:	d001      	beq.n	800d94a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d946:	2303      	movs	r3, #3
 800d948:	e023      	b.n	800d992 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	f003 0304 	and.w	r3, r3, #4
 800d954:	2b04      	cmp	r3, #4
 800d956:	d10e      	bne.n	800d976 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d958:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d95c:	9300      	str	r3, [sp, #0]
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	2200      	movs	r2, #0
 800d962:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d966:	6878      	ldr	r0, [r7, #4]
 800d968:	f000 f817 	bl	800d99a <UART_WaitOnFlagUntilTimeout>
 800d96c:	4603      	mov	r3, r0
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d001      	beq.n	800d976 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d972:	2303      	movs	r3, #3
 800d974:	e00d      	b.n	800d992 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2220      	movs	r2, #32
 800d97a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	2220      	movs	r2, #32
 800d980:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2200      	movs	r2, #0
 800d986:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2200      	movs	r2, #0
 800d98c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800d990:	2300      	movs	r3, #0
}
 800d992:	4618      	mov	r0, r3
 800d994:	3710      	adds	r7, #16
 800d996:	46bd      	mov	sp, r7
 800d998:	bd80      	pop	{r7, pc}

0800d99a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d99a:	b580      	push	{r7, lr}
 800d99c:	b09c      	sub	sp, #112	; 0x70
 800d99e:	af00      	add	r7, sp, #0
 800d9a0:	60f8      	str	r0, [r7, #12]
 800d9a2:	60b9      	str	r1, [r7, #8]
 800d9a4:	603b      	str	r3, [r7, #0]
 800d9a6:	4613      	mov	r3, r2
 800d9a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d9aa:	e0a5      	b.n	800daf8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d9ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d9ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d9b2:	f000 80a1 	beq.w	800daf8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d9b6:	f7f8 fe7d 	bl	80066b4 <HAL_GetTick>
 800d9ba:	4602      	mov	r2, r0
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	1ad3      	subs	r3, r2, r3
 800d9c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	d302      	bcc.n	800d9cc <UART_WaitOnFlagUntilTimeout+0x32>
 800d9c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d13e      	bne.n	800da4a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9d4:	e853 3f00 	ldrex	r3, [r3]
 800d9d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d9da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d9e0:	667b      	str	r3, [r7, #100]	; 0x64
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	461a      	mov	r2, r3
 800d9e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d9ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d9ec:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d9f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d9f2:	e841 2300 	strex	r3, r2, [r1]
 800d9f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d9f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d1e6      	bne.n	800d9cc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	3308      	adds	r3, #8
 800da04:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da08:	e853 3f00 	ldrex	r3, [r3]
 800da0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800da0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da10:	f023 0301 	bic.w	r3, r3, #1
 800da14:	663b      	str	r3, [r7, #96]	; 0x60
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	3308      	adds	r3, #8
 800da1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800da1e:	64ba      	str	r2, [r7, #72]	; 0x48
 800da20:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800da24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800da26:	e841 2300 	strex	r3, r2, [r1]
 800da2a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800da2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d1e5      	bne.n	800d9fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	2220      	movs	r2, #32
 800da36:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	2220      	movs	r2, #32
 800da3c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	2200      	movs	r2, #0
 800da42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800da46:	2303      	movs	r3, #3
 800da48:	e067      	b.n	800db1a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	f003 0304 	and.w	r3, r3, #4
 800da54:	2b00      	cmp	r3, #0
 800da56:	d04f      	beq.n	800daf8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	69db      	ldr	r3, [r3, #28]
 800da5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800da62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800da66:	d147      	bne.n	800daf8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800da70:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da7a:	e853 3f00 	ldrex	r3, [r3]
 800da7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800da80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da82:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800da86:	66fb      	str	r3, [r7, #108]	; 0x6c
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	461a      	mov	r2, r3
 800da8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da90:	637b      	str	r3, [r7, #52]	; 0x34
 800da92:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800da96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da98:	e841 2300 	strex	r3, r2, [r1]
 800da9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800da9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d1e6      	bne.n	800da72 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	3308      	adds	r3, #8
 800daaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daac:	697b      	ldr	r3, [r7, #20]
 800daae:	e853 3f00 	ldrex	r3, [r3]
 800dab2:	613b      	str	r3, [r7, #16]
   return(result);
 800dab4:	693b      	ldr	r3, [r7, #16]
 800dab6:	f023 0301 	bic.w	r3, r3, #1
 800daba:	66bb      	str	r3, [r7, #104]	; 0x68
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	3308      	adds	r3, #8
 800dac2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dac4:	623a      	str	r2, [r7, #32]
 800dac6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dac8:	69f9      	ldr	r1, [r7, #28]
 800daca:	6a3a      	ldr	r2, [r7, #32]
 800dacc:	e841 2300 	strex	r3, r2, [r1]
 800dad0:	61bb      	str	r3, [r7, #24]
   return(result);
 800dad2:	69bb      	ldr	r3, [r7, #24]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d1e5      	bne.n	800daa4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	2220      	movs	r2, #32
 800dadc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	2220      	movs	r2, #32
 800dae2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	2220      	movs	r2, #32
 800dae8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	2200      	movs	r2, #0
 800daf0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800daf4:	2303      	movs	r3, #3
 800daf6:	e010      	b.n	800db1a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	69da      	ldr	r2, [r3, #28]
 800dafe:	68bb      	ldr	r3, [r7, #8]
 800db00:	4013      	ands	r3, r2
 800db02:	68ba      	ldr	r2, [r7, #8]
 800db04:	429a      	cmp	r2, r3
 800db06:	bf0c      	ite	eq
 800db08:	2301      	moveq	r3, #1
 800db0a:	2300      	movne	r3, #0
 800db0c:	b2db      	uxtb	r3, r3
 800db0e:	461a      	mov	r2, r3
 800db10:	79fb      	ldrb	r3, [r7, #7]
 800db12:	429a      	cmp	r2, r3
 800db14:	f43f af4a 	beq.w	800d9ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800db18:	2300      	movs	r3, #0
}
 800db1a:	4618      	mov	r0, r3
 800db1c:	3770      	adds	r7, #112	; 0x70
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}
	...

0800db24 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800db24:	b480      	push	{r7}
 800db26:	b097      	sub	sp, #92	; 0x5c
 800db28:	af00      	add	r7, sp, #0
 800db2a:	60f8      	str	r0, [r7, #12]
 800db2c:	60b9      	str	r1, [r7, #8]
 800db2e:	4613      	mov	r3, r2
 800db30:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	68ba      	ldr	r2, [r7, #8]
 800db36:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	88fa      	ldrh	r2, [r7, #6]
 800db3c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	88fa      	ldrh	r2, [r7, #6]
 800db44:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	2200      	movs	r2, #0
 800db4c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	689b      	ldr	r3, [r3, #8]
 800db52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db56:	d10e      	bne.n	800db76 <UART_Start_Receive_IT+0x52>
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	691b      	ldr	r3, [r3, #16]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d105      	bne.n	800db6c <UART_Start_Receive_IT+0x48>
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	f240 12ff 	movw	r2, #511	; 0x1ff
 800db66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800db6a:	e02d      	b.n	800dbc8 <UART_Start_Receive_IT+0xa4>
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	22ff      	movs	r2, #255	; 0xff
 800db70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800db74:	e028      	b.n	800dbc8 <UART_Start_Receive_IT+0xa4>
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	689b      	ldr	r3, [r3, #8]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d10d      	bne.n	800db9a <UART_Start_Receive_IT+0x76>
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	691b      	ldr	r3, [r3, #16]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d104      	bne.n	800db90 <UART_Start_Receive_IT+0x6c>
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	22ff      	movs	r2, #255	; 0xff
 800db8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800db8e:	e01b      	b.n	800dbc8 <UART_Start_Receive_IT+0xa4>
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	227f      	movs	r2, #127	; 0x7f
 800db94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800db98:	e016      	b.n	800dbc8 <UART_Start_Receive_IT+0xa4>
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	689b      	ldr	r3, [r3, #8]
 800db9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dba2:	d10d      	bne.n	800dbc0 <UART_Start_Receive_IT+0x9c>
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	691b      	ldr	r3, [r3, #16]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d104      	bne.n	800dbb6 <UART_Start_Receive_IT+0x92>
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	227f      	movs	r2, #127	; 0x7f
 800dbb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800dbb4:	e008      	b.n	800dbc8 <UART_Start_Receive_IT+0xa4>
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	223f      	movs	r2, #63	; 0x3f
 800dbba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800dbbe:	e003      	b.n	800dbc8 <UART_Start_Receive_IT+0xa4>
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	2200      	movs	r2, #0
 800dbcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	2222      	movs	r2, #34	; 0x22
 800dbd4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	3308      	adds	r3, #8
 800dbdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbe0:	e853 3f00 	ldrex	r3, [r3]
 800dbe4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dbe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbe8:	f043 0301 	orr.w	r3, r3, #1
 800dbec:	657b      	str	r3, [r7, #84]	; 0x54
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	3308      	adds	r3, #8
 800dbf4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dbf6:	64ba      	str	r2, [r7, #72]	; 0x48
 800dbf8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbfa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dbfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dbfe:	e841 2300 	strex	r3, r2, [r1]
 800dc02:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800dc04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d1e5      	bne.n	800dbd6 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	689b      	ldr	r3, [r3, #8]
 800dc0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc12:	d107      	bne.n	800dc24 <UART_Start_Receive_IT+0x100>
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	691b      	ldr	r3, [r3, #16]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d103      	bne.n	800dc24 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	4a24      	ldr	r2, [pc, #144]	; (800dcb0 <UART_Start_Receive_IT+0x18c>)
 800dc20:	665a      	str	r2, [r3, #100]	; 0x64
 800dc22:	e002      	b.n	800dc2a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	4a23      	ldr	r2, [pc, #140]	; (800dcb4 <UART_Start_Receive_IT+0x190>)
 800dc28:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	691b      	ldr	r3, [r3, #16]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d019      	beq.n	800dc6e <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc42:	e853 3f00 	ldrex	r3, [r3]
 800dc46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc4a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800dc4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	461a      	mov	r2, r3
 800dc56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc58:	637b      	str	r3, [r7, #52]	; 0x34
 800dc5a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dc5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc60:	e841 2300 	strex	r3, r2, [r1]
 800dc64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800dc66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d1e6      	bne.n	800dc3a <UART_Start_Receive_IT+0x116>
 800dc6c:	e018      	b.n	800dca0 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc74:	697b      	ldr	r3, [r7, #20]
 800dc76:	e853 3f00 	ldrex	r3, [r3]
 800dc7a:	613b      	str	r3, [r7, #16]
   return(result);
 800dc7c:	693b      	ldr	r3, [r7, #16]
 800dc7e:	f043 0320 	orr.w	r3, r3, #32
 800dc82:	653b      	str	r3, [r7, #80]	; 0x50
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	461a      	mov	r2, r3
 800dc8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc8c:	623b      	str	r3, [r7, #32]
 800dc8e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc90:	69f9      	ldr	r1, [r7, #28]
 800dc92:	6a3a      	ldr	r2, [r7, #32]
 800dc94:	e841 2300 	strex	r3, r2, [r1]
 800dc98:	61bb      	str	r3, [r7, #24]
   return(result);
 800dc9a:	69bb      	ldr	r3, [r7, #24]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d1e6      	bne.n	800dc6e <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800dca0:	2300      	movs	r3, #0
}
 800dca2:	4618      	mov	r0, r3
 800dca4:	375c      	adds	r7, #92	; 0x5c
 800dca6:	46bd      	mov	sp, r7
 800dca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcac:	4770      	bx	lr
 800dcae:	bf00      	nop
 800dcb0:	0800e0dd 	.word	0x0800e0dd
 800dcb4:	0800df7d 	.word	0x0800df7d

0800dcb8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800dcb8:	b480      	push	{r7}
 800dcba:	b089      	sub	sp, #36	; 0x24
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	e853 3f00 	ldrex	r3, [r3]
 800dccc:	60bb      	str	r3, [r7, #8]
   return(result);
 800dcce:	68bb      	ldr	r3, [r7, #8]
 800dcd0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800dcd4:	61fb      	str	r3, [r7, #28]
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	461a      	mov	r2, r3
 800dcdc:	69fb      	ldr	r3, [r7, #28]
 800dcde:	61bb      	str	r3, [r7, #24]
 800dce0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dce2:	6979      	ldr	r1, [r7, #20]
 800dce4:	69ba      	ldr	r2, [r7, #24]
 800dce6:	e841 2300 	strex	r3, r2, [r1]
 800dcea:	613b      	str	r3, [r7, #16]
   return(result);
 800dcec:	693b      	ldr	r3, [r7, #16]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d1e6      	bne.n	800dcc0 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	2220      	movs	r2, #32
 800dcf6:	679a      	str	r2, [r3, #120]	; 0x78
}
 800dcf8:	bf00      	nop
 800dcfa:	3724      	adds	r7, #36	; 0x24
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd02:	4770      	bx	lr

0800dd04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dd04:	b480      	push	{r7}
 800dd06:	b095      	sub	sp, #84	; 0x54
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd14:	e853 3f00 	ldrex	r3, [r3]
 800dd18:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800dd1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dd20:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	461a      	mov	r2, r3
 800dd28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd2a:	643b      	str	r3, [r7, #64]	; 0x40
 800dd2c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dd30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dd32:	e841 2300 	strex	r3, r2, [r1]
 800dd36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dd38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d1e6      	bne.n	800dd0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	3308      	adds	r3, #8
 800dd44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd46:	6a3b      	ldr	r3, [r7, #32]
 800dd48:	e853 3f00 	ldrex	r3, [r3]
 800dd4c:	61fb      	str	r3, [r7, #28]
   return(result);
 800dd4e:	69fb      	ldr	r3, [r7, #28]
 800dd50:	f023 0301 	bic.w	r3, r3, #1
 800dd54:	64bb      	str	r3, [r7, #72]	; 0x48
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	3308      	adds	r3, #8
 800dd5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dd5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dd60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dd64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd66:	e841 2300 	strex	r3, r2, [r1]
 800dd6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dd6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d1e5      	bne.n	800dd3e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd76:	2b01      	cmp	r3, #1
 800dd78:	d118      	bne.n	800ddac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	e853 3f00 	ldrex	r3, [r3]
 800dd86:	60bb      	str	r3, [r7, #8]
   return(result);
 800dd88:	68bb      	ldr	r3, [r7, #8]
 800dd8a:	f023 0310 	bic.w	r3, r3, #16
 800dd8e:	647b      	str	r3, [r7, #68]	; 0x44
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	461a      	mov	r2, r3
 800dd96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd98:	61bb      	str	r3, [r7, #24]
 800dd9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd9c:	6979      	ldr	r1, [r7, #20]
 800dd9e:	69ba      	ldr	r2, [r7, #24]
 800dda0:	e841 2300 	strex	r3, r2, [r1]
 800dda4:	613b      	str	r3, [r7, #16]
   return(result);
 800dda6:	693b      	ldr	r3, [r7, #16]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d1e6      	bne.n	800dd7a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	2220      	movs	r2, #32
 800ddb0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	2200      	movs	r2, #0
 800ddbc:	665a      	str	r2, [r3, #100]	; 0x64
}
 800ddbe:	bf00      	nop
 800ddc0:	3754      	adds	r7, #84	; 0x54
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc8:	4770      	bx	lr

0800ddca <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ddca:	b580      	push	{r7, lr}
 800ddcc:	b090      	sub	sp, #64	; 0x40
 800ddce:	af00      	add	r7, sp, #0
 800ddd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddd6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	f003 0320 	and.w	r3, r3, #32
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d137      	bne.n	800de56 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800dde6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dde8:	2200      	movs	r2, #0
 800ddea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ddee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	3308      	adds	r3, #8
 800ddf4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddf8:	e853 3f00 	ldrex	r3, [r3]
 800ddfc:	623b      	str	r3, [r7, #32]
   return(result);
 800ddfe:	6a3b      	ldr	r3, [r7, #32]
 800de00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800de04:	63bb      	str	r3, [r7, #56]	; 0x38
 800de06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	3308      	adds	r3, #8
 800de0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de0e:	633a      	str	r2, [r7, #48]	; 0x30
 800de10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800de14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de16:	e841 2300 	strex	r3, r2, [r1]
 800de1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800de1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d1e5      	bne.n	800ddee <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800de22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de28:	693b      	ldr	r3, [r7, #16]
 800de2a:	e853 3f00 	ldrex	r3, [r3]
 800de2e:	60fb      	str	r3, [r7, #12]
   return(result);
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de36:	637b      	str	r3, [r7, #52]	; 0x34
 800de38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	461a      	mov	r2, r3
 800de3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de40:	61fb      	str	r3, [r7, #28]
 800de42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de44:	69b9      	ldr	r1, [r7, #24]
 800de46:	69fa      	ldr	r2, [r7, #28]
 800de48:	e841 2300 	strex	r3, r2, [r1]
 800de4c:	617b      	str	r3, [r7, #20]
   return(result);
 800de4e:	697b      	ldr	r3, [r7, #20]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d1e6      	bne.n	800de22 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800de54:	e002      	b.n	800de5c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800de56:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800de58:	f7f6 fa60 	bl	800431c <HAL_UART_TxCpltCallback>
}
 800de5c:	bf00      	nop
 800de5e:	3740      	adds	r7, #64	; 0x40
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}

0800de64 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b084      	sub	sp, #16
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de70:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800de72:	68f8      	ldr	r0, [r7, #12]
 800de74:	f7ff f9d8 	bl	800d228 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800de78:	bf00      	nop
 800de7a:	3710      	adds	r7, #16
 800de7c:	46bd      	mov	sp, r7
 800de7e:	bd80      	pop	{r7, pc}

0800de80 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b086      	sub	sp, #24
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de8c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800de8e:	697b      	ldr	r3, [r7, #20]
 800de90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de92:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800de94:	697b      	ldr	r3, [r7, #20]
 800de96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de98:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800de9a:	697b      	ldr	r3, [r7, #20]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	689b      	ldr	r3, [r3, #8]
 800dea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dea4:	2b80      	cmp	r3, #128	; 0x80
 800dea6:	d109      	bne.n	800debc <UART_DMAError+0x3c>
 800dea8:	693b      	ldr	r3, [r7, #16]
 800deaa:	2b21      	cmp	r3, #33	; 0x21
 800deac:	d106      	bne.n	800debc <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800deae:	697b      	ldr	r3, [r7, #20]
 800deb0:	2200      	movs	r2, #0
 800deb2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800deb6:	6978      	ldr	r0, [r7, #20]
 800deb8:	f7ff fefe 	bl	800dcb8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800debc:	697b      	ldr	r3, [r7, #20]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	689b      	ldr	r3, [r3, #8]
 800dec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dec6:	2b40      	cmp	r3, #64	; 0x40
 800dec8:	d109      	bne.n	800dede <UART_DMAError+0x5e>
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	2b22      	cmp	r3, #34	; 0x22
 800dece:	d106      	bne.n	800dede <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ded0:	697b      	ldr	r3, [r7, #20]
 800ded2:	2200      	movs	r2, #0
 800ded4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800ded8:	6978      	ldr	r0, [r7, #20]
 800deda:	f7ff ff13 	bl	800dd04 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800dede:	697b      	ldr	r3, [r7, #20]
 800dee0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dee4:	f043 0210 	orr.w	r2, r3, #16
 800dee8:	697b      	ldr	r3, [r7, #20]
 800deea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800deee:	6978      	ldr	r0, [r7, #20]
 800def0:	f7f6 fc78 	bl	80047e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800def4:	bf00      	nop
 800def6:	3718      	adds	r7, #24
 800def8:	46bd      	mov	sp, r7
 800defa:	bd80      	pop	{r7, pc}

0800defc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b084      	sub	sp, #16
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	2200      	movs	r2, #0
 800df0e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	2200      	movs	r2, #0
 800df16:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800df1a:	68f8      	ldr	r0, [r7, #12]
 800df1c:	f7f6 fc62 	bl	80047e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800df20:	bf00      	nop
 800df22:	3710      	adds	r7, #16
 800df24:	46bd      	mov	sp, r7
 800df26:	bd80      	pop	{r7, pc}

0800df28 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b088      	sub	sp, #32
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	e853 3f00 	ldrex	r3, [r3]
 800df3c:	60bb      	str	r3, [r7, #8]
   return(result);
 800df3e:	68bb      	ldr	r3, [r7, #8]
 800df40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800df44:	61fb      	str	r3, [r7, #28]
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	461a      	mov	r2, r3
 800df4c:	69fb      	ldr	r3, [r7, #28]
 800df4e:	61bb      	str	r3, [r7, #24]
 800df50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df52:	6979      	ldr	r1, [r7, #20]
 800df54:	69ba      	ldr	r2, [r7, #24]
 800df56:	e841 2300 	strex	r3, r2, [r1]
 800df5a:	613b      	str	r3, [r7, #16]
   return(result);
 800df5c:	693b      	ldr	r3, [r7, #16]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d1e6      	bne.n	800df30 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	2220      	movs	r2, #32
 800df66:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	2200      	movs	r2, #0
 800df6c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800df6e:	6878      	ldr	r0, [r7, #4]
 800df70:	f7f6 f9d4 	bl	800431c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800df74:	bf00      	nop
 800df76:	3720      	adds	r7, #32
 800df78:	46bd      	mov	sp, r7
 800df7a:	bd80      	pop	{r7, pc}

0800df7c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b096      	sub	sp, #88	; 0x58
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800df8a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df92:	2b22      	cmp	r3, #34	; 0x22
 800df94:	f040 8094 	bne.w	800e0c0 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800df9e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800dfa2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800dfa6:	b2d9      	uxtb	r1, r3
 800dfa8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800dfac:	b2da      	uxtb	r2, r3
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfb2:	400a      	ands	r2, r1
 800dfb4:	b2d2      	uxtb	r2, r2
 800dfb6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfbc:	1c5a      	adds	r2, r3, #1
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800dfc8:	b29b      	uxth	r3, r3
 800dfca:	3b01      	subs	r3, #1
 800dfcc:	b29a      	uxth	r2, r3
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800dfda:	b29b      	uxth	r3, r3
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d179      	bne.n	800e0d4 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfe8:	e853 3f00 	ldrex	r3, [r3]
 800dfec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dfee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dff0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dff4:	653b      	str	r3, [r7, #80]	; 0x50
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	461a      	mov	r2, r3
 800dffc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dffe:	647b      	str	r3, [r7, #68]	; 0x44
 800e000:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e002:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e004:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e006:	e841 2300 	strex	r3, r2, [r1]
 800e00a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e00c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d1e6      	bne.n	800dfe0 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	3308      	adds	r3, #8
 800e018:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e01c:	e853 3f00 	ldrex	r3, [r3]
 800e020:	623b      	str	r3, [r7, #32]
   return(result);
 800e022:	6a3b      	ldr	r3, [r7, #32]
 800e024:	f023 0301 	bic.w	r3, r3, #1
 800e028:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	3308      	adds	r3, #8
 800e030:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e032:	633a      	str	r2, [r7, #48]	; 0x30
 800e034:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e036:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e03a:	e841 2300 	strex	r3, r2, [r1]
 800e03e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e042:	2b00      	cmp	r3, #0
 800e044:	d1e5      	bne.n	800e012 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	2220      	movs	r2, #32
 800e04a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	2200      	movs	r2, #0
 800e050:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e056:	2b01      	cmp	r3, #1
 800e058:	d12e      	bne.n	800e0b8 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	2200      	movs	r2, #0
 800e05e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e066:	693b      	ldr	r3, [r7, #16]
 800e068:	e853 3f00 	ldrex	r3, [r3]
 800e06c:	60fb      	str	r3, [r7, #12]
   return(result);
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	f023 0310 	bic.w	r3, r3, #16
 800e074:	64bb      	str	r3, [r7, #72]	; 0x48
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	461a      	mov	r2, r3
 800e07c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e07e:	61fb      	str	r3, [r7, #28]
 800e080:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e082:	69b9      	ldr	r1, [r7, #24]
 800e084:	69fa      	ldr	r2, [r7, #28]
 800e086:	e841 2300 	strex	r3, r2, [r1]
 800e08a:	617b      	str	r3, [r7, #20]
   return(result);
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d1e6      	bne.n	800e060 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	69db      	ldr	r3, [r3, #28]
 800e098:	f003 0310 	and.w	r3, r3, #16
 800e09c:	2b10      	cmp	r3, #16
 800e09e:	d103      	bne.n	800e0a8 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	2210      	movs	r2, #16
 800e0a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e0ae:	4619      	mov	r1, r3
 800e0b0:	6878      	ldr	r0, [r7, #4]
 800e0b2:	f7ff f8c3 	bl	800d23c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e0b6:	e00d      	b.n	800e0d4 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800e0b8:	6878      	ldr	r0, [r7, #4]
 800e0ba:	f7f6 f945 	bl	8004348 <HAL_UART_RxCpltCallback>
}
 800e0be:	e009      	b.n	800e0d4 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	8b1b      	ldrh	r3, [r3, #24]
 800e0c6:	b29a      	uxth	r2, r3
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	f042 0208 	orr.w	r2, r2, #8
 800e0d0:	b292      	uxth	r2, r2
 800e0d2:	831a      	strh	r2, [r3, #24]
}
 800e0d4:	bf00      	nop
 800e0d6:	3758      	adds	r7, #88	; 0x58
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	bd80      	pop	{r7, pc}

0800e0dc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b096      	sub	sp, #88	; 0x58
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e0ea:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0f2:	2b22      	cmp	r3, #34	; 0x22
 800e0f4:	f040 8094 	bne.w	800e220 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e0fe:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e106:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800e108:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800e10c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e110:	4013      	ands	r3, r2
 800e112:	b29a      	uxth	r2, r3
 800e114:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e116:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e11c:	1c9a      	adds	r2, r3, #2
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e128:	b29b      	uxth	r3, r3
 800e12a:	3b01      	subs	r3, #1
 800e12c:	b29a      	uxth	r2, r3
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e13a:	b29b      	uxth	r3, r3
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d179      	bne.n	800e234 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e148:	e853 3f00 	ldrex	r3, [r3]
 800e14c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e150:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e154:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	461a      	mov	r2, r3
 800e15c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e15e:	643b      	str	r3, [r7, #64]	; 0x40
 800e160:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e162:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e164:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e166:	e841 2300 	strex	r3, r2, [r1]
 800e16a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d1e6      	bne.n	800e140 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	3308      	adds	r3, #8
 800e178:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e17a:	6a3b      	ldr	r3, [r7, #32]
 800e17c:	e853 3f00 	ldrex	r3, [r3]
 800e180:	61fb      	str	r3, [r7, #28]
   return(result);
 800e182:	69fb      	ldr	r3, [r7, #28]
 800e184:	f023 0301 	bic.w	r3, r3, #1
 800e188:	64bb      	str	r3, [r7, #72]	; 0x48
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	3308      	adds	r3, #8
 800e190:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e192:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e194:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e196:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e198:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e19a:	e841 2300 	strex	r3, r2, [r1]
 800e19e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d1e5      	bne.n	800e172 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	2220      	movs	r2, #32
 800e1aa:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e1b6:	2b01      	cmp	r3, #1
 800e1b8:	d12e      	bne.n	800e218 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	2200      	movs	r2, #0
 800e1be:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	e853 3f00 	ldrex	r3, [r3]
 800e1cc:	60bb      	str	r3, [r7, #8]
   return(result);
 800e1ce:	68bb      	ldr	r3, [r7, #8]
 800e1d0:	f023 0310 	bic.w	r3, r3, #16
 800e1d4:	647b      	str	r3, [r7, #68]	; 0x44
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	461a      	mov	r2, r3
 800e1dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1de:	61bb      	str	r3, [r7, #24]
 800e1e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1e2:	6979      	ldr	r1, [r7, #20]
 800e1e4:	69ba      	ldr	r2, [r7, #24]
 800e1e6:	e841 2300 	strex	r3, r2, [r1]
 800e1ea:	613b      	str	r3, [r7, #16]
   return(result);
 800e1ec:	693b      	ldr	r3, [r7, #16]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d1e6      	bne.n	800e1c0 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	69db      	ldr	r3, [r3, #28]
 800e1f8:	f003 0310 	and.w	r3, r3, #16
 800e1fc:	2b10      	cmp	r3, #16
 800e1fe:	d103      	bne.n	800e208 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	2210      	movs	r2, #16
 800e206:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e20e:	4619      	mov	r1, r3
 800e210:	6878      	ldr	r0, [r7, #4]
 800e212:	f7ff f813 	bl	800d23c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e216:	e00d      	b.n	800e234 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800e218:	6878      	ldr	r0, [r7, #4]
 800e21a:	f7f6 f895 	bl	8004348 <HAL_UART_RxCpltCallback>
}
 800e21e:	e009      	b.n	800e234 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	8b1b      	ldrh	r3, [r3, #24]
 800e226:	b29a      	uxth	r2, r3
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	f042 0208 	orr.w	r2, r2, #8
 800e230:	b292      	uxth	r2, r2
 800e232:	831a      	strh	r2, [r3, #24]
}
 800e234:	bf00      	nop
 800e236:	3758      	adds	r7, #88	; 0x58
 800e238:	46bd      	mov	sp, r7
 800e23a:	bd80      	pop	{r7, pc}

0800e23c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e23c:	b480      	push	{r7}
 800e23e:	b083      	sub	sp, #12
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e244:	bf00      	nop
 800e246:	370c      	adds	r7, #12
 800e248:	46bd      	mov	sp, r7
 800e24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24e:	4770      	bx	lr

0800e250 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e250:	b580      	push	{r7, lr}
 800e252:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800e254:	4904      	ldr	r1, [pc, #16]	; (800e268 <MX_FATFS_Init+0x18>)
 800e256:	4805      	ldr	r0, [pc, #20]	; (800e26c <MX_FATFS_Init+0x1c>)
 800e258:	f003 fa5e 	bl	8011718 <FATFS_LinkDriver>
 800e25c:	4603      	mov	r3, r0
 800e25e:	461a      	mov	r2, r3
 800e260:	4b03      	ldr	r3, [pc, #12]	; (800e270 <MX_FATFS_Init+0x20>)
 800e262:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e264:	bf00      	nop
 800e266:	bd80      	pop	{r7, pc}
 800e268:	20003e38 	.word	0x20003e38
 800e26c:	20000220 	.word	0x20000220
 800e270:	20003e34 	.word	0x20003e34

0800e274 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800e274:	b480      	push	{r7}
 800e276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800e278:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800e27a:	4618      	mov	r0, r3
 800e27c:	46bd      	mov	sp, r7
 800e27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e282:	4770      	bx	lr

0800e284 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800e284:	b480      	push	{r7}
 800e286:	b083      	sub	sp, #12
 800e288:	af00      	add	r7, sp, #0
 800e28a:	4603      	mov	r3, r0
 800e28c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800e28e:	4b0a      	ldr	r3, [pc, #40]	; (800e2b8 <USER_initialize+0x34>)
 800e290:	2201      	movs	r2, #1
 800e292:	701a      	strb	r2, [r3, #0]
    Stat &= ~STA_NOINIT;
 800e294:	4b08      	ldr	r3, [pc, #32]	; (800e2b8 <USER_initialize+0x34>)
 800e296:	781b      	ldrb	r3, [r3, #0]
 800e298:	b2db      	uxtb	r3, r3
 800e29a:	f023 0301 	bic.w	r3, r3, #1
 800e29e:	b2da      	uxtb	r2, r3
 800e2a0:	4b05      	ldr	r3, [pc, #20]	; (800e2b8 <USER_initialize+0x34>)
 800e2a2:	701a      	strb	r2, [r3, #0]

    return Stat;
 800e2a4:	4b04      	ldr	r3, [pc, #16]	; (800e2b8 <USER_initialize+0x34>)
 800e2a6:	781b      	ldrb	r3, [r3, #0]
 800e2a8:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	370c      	adds	r7, #12
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b4:	4770      	bx	lr
 800e2b6:	bf00      	nop
 800e2b8:	2000021d 	.word	0x2000021d

0800e2bc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800e2bc:	b480      	push	{r7}
 800e2be:	b083      	sub	sp, #12
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	Stat = STA_NOINIT;
 800e2c6:	4b0a      	ldr	r3, [pc, #40]	; (800e2f0 <USER_status+0x34>)
 800e2c8:	2201      	movs	r2, #1
 800e2ca:	701a      	strb	r2, [r3, #0]
	Stat &= ~STA_NOINIT;
 800e2cc:	4b08      	ldr	r3, [pc, #32]	; (800e2f0 <USER_status+0x34>)
 800e2ce:	781b      	ldrb	r3, [r3, #0]
 800e2d0:	b2db      	uxtb	r3, r3
 800e2d2:	f023 0301 	bic.w	r3, r3, #1
 800e2d6:	b2da      	uxtb	r2, r3
 800e2d8:	4b05      	ldr	r3, [pc, #20]	; (800e2f0 <USER_status+0x34>)
 800e2da:	701a      	strb	r2, [r3, #0]

	return Stat;
 800e2dc:	4b04      	ldr	r3, [pc, #16]	; (800e2f0 <USER_status+0x34>)
 800e2de:	781b      	ldrb	r3, [r3, #0]
 800e2e0:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	370c      	adds	r7, #12
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ec:	4770      	bx	lr
 800e2ee:	bf00      	nop
 800e2f0:	2000021d 	.word	0x2000021d

0800e2f4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b086      	sub	sp, #24
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	60b9      	str	r1, [r7, #8]
 800e2fc:	607a      	str	r2, [r7, #4]
 800e2fe:	603b      	str	r3, [r7, #0]
 800e300:	4603      	mov	r3, r0
 800e302:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */

	//
		uint32_t ss = W25qxx_getSectorSize();
 800e304:	f7f7 fdba 	bl	8005e7c <W25qxx_getSectorSize>
 800e308:	6138      	str	r0, [r7, #16]
		int i = -1;
 800e30a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e30e:	617b      	str	r3, [r7, #20]
		while (++i < count) {
 800e310:	e007      	b.n	800e322 <USER_read+0x2e>
	//		Report(__func__, true, "Dev:%u sector:%u(%u) count:%u\r\n", pdrv, sector, ss, count);
			W25qxx_ReadSector((BYTE *)buff, sector++, 0, ss);
 800e312:	6879      	ldr	r1, [r7, #4]
 800e314:	1c4b      	adds	r3, r1, #1
 800e316:	607b      	str	r3, [r7, #4]
 800e318:	693b      	ldr	r3, [r7, #16]
 800e31a:	2200      	movs	r2, #0
 800e31c:	68b8      	ldr	r0, [r7, #8]
 800e31e:	f7f8 f8cb 	bl	80064b8 <W25qxx_ReadSector>
		while (++i < count) {
 800e322:	697b      	ldr	r3, [r7, #20]
 800e324:	3301      	adds	r3, #1
 800e326:	617b      	str	r3, [r7, #20]
 800e328:	697b      	ldr	r3, [r7, #20]
 800e32a:	683a      	ldr	r2, [r7, #0]
 800e32c:	429a      	cmp	r2, r3
 800e32e:	d8f0      	bhi.n	800e312 <USER_read+0x1e>
		}
	//

    return RES_OK;
 800e330:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800e332:	4618      	mov	r0, r3
 800e334:	3718      	adds	r7, #24
 800e336:	46bd      	mov	sp, r7
 800e338:	bd80      	pop	{r7, pc}

0800e33a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800e33a:	b580      	push	{r7, lr}
 800e33c:	b086      	sub	sp, #24
 800e33e:	af00      	add	r7, sp, #0
 800e340:	60b9      	str	r1, [r7, #8]
 800e342:	607a      	str	r2, [r7, #4]
 800e344:	603b      	str	r3, [r7, #0]
 800e346:	4603      	mov	r3, r0
 800e348:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */

	//
	uint32_t ss = W25qxx_getSectorSize();
 800e34a:	f7f7 fd97 	bl	8005e7c <W25qxx_getSectorSize>
 800e34e:	6138      	str	r0, [r7, #16]
	int i = -1;
 800e350:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e354:	617b      	str	r3, [r7, #20]
	while (++i < count) {
 800e356:	e015      	b.n	800e384 <USER_write+0x4a>
//		Report(__func__, true, "Dev:%u sector:%u(%u) count:%u\r\n", pdrv, sector, ss, count);
		if (!W25qxx_IsEmptySector(sector, 0, ss)) W25qxx_EraseSector(sector);
 800e358:	693a      	ldr	r2, [r7, #16]
 800e35a:	2100      	movs	r1, #0
 800e35c:	6878      	ldr	r0, [r7, #4]
 800e35e:	f7f7 fe0f 	bl	8005f80 <W25qxx_IsEmptySector>
 800e362:	4603      	mov	r3, r0
 800e364:	f083 0301 	eor.w	r3, r3, #1
 800e368:	b2db      	uxtb	r3, r3
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d002      	beq.n	800e374 <USER_write+0x3a>
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f7f7 fdaa 	bl	8005ec8 <W25qxx_EraseSector>
		W25qxx_WriteSector((BYTE *)buff, sector++, 0, ss);
 800e374:	6879      	ldr	r1, [r7, #4]
 800e376:	1c4b      	adds	r3, r1, #1
 800e378:	607b      	str	r3, [r7, #4]
 800e37a:	693b      	ldr	r3, [r7, #16]
 800e37c:	2200      	movs	r2, #0
 800e37e:	68b8      	ldr	r0, [r7, #8]
 800e380:	f7f7 ff72 	bl	8006268 <W25qxx_WriteSector>
	while (++i < count) {
 800e384:	697b      	ldr	r3, [r7, #20]
 800e386:	3301      	adds	r3, #1
 800e388:	617b      	str	r3, [r7, #20]
 800e38a:	697b      	ldr	r3, [r7, #20]
 800e38c:	683a      	ldr	r2, [r7, #0]
 800e38e:	429a      	cmp	r2, r3
 800e390:	d8e2      	bhi.n	800e358 <USER_write+0x1e>
	}
	//

    return RES_OK;
 800e392:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800e394:	4618      	mov	r0, r3
 800e396:	3718      	adds	r7, #24
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}

0800e39c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b084      	sub	sp, #16
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	603a      	str	r2, [r7, #0]
 800e3a6:	71fb      	strb	r3, [r7, #7]
 800e3a8:	460b      	mov	r3, r1
 800e3aa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

    DRESULT res = RES_ERROR;
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	73fb      	strb	r3, [r7, #15]
    //
    switch (cmd) {
 800e3b0:	79bb      	ldrb	r3, [r7, #6]
 800e3b2:	2b03      	cmp	r3, #3
 800e3b4:	d825      	bhi.n	800e402 <USER_ioctl+0x66>
 800e3b6:	a201      	add	r2, pc, #4	; (adr r2, 800e3bc <USER_ioctl+0x20>)
 800e3b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3bc:	0800e3cd 	.word	0x0800e3cd
 800e3c0:	0800e3d3 	.word	0x0800e3d3
 800e3c4:	0800e3e3 	.word	0x0800e3e3
 800e3c8:	0800e3f3 	.word	0x0800e3f3
    	case CTRL_SYNC:
    		res = RES_OK;
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	73fb      	strb	r3, [r7, #15]
        break;
 800e3d0:	e019      	b.n	800e406 <USER_ioctl+0x6a>
    	case GET_SECTOR_COUNT:
    		*(DWORD *)buff = W25qxx_getSectorCount();
 800e3d2:	f7f7 fd47 	bl	8005e64 <W25qxx_getSectorCount>
 800e3d6:	4602      	mov	r2, r0
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	601a      	str	r2, [r3, #0]
    		res = RES_OK;
 800e3dc:	2300      	movs	r3, #0
 800e3de:	73fb      	strb	r3, [r7, #15]
        break;
 800e3e0:	e011      	b.n	800e406 <USER_ioctl+0x6a>
    	case GET_SECTOR_SIZE:
    		*(DWORD *)buff = W25qxx_getSectorSize();
 800e3e2:	f7f7 fd4b 	bl	8005e7c <W25qxx_getSectorSize>
 800e3e6:	4602      	mov	r2, r0
 800e3e8:	683b      	ldr	r3, [r7, #0]
 800e3ea:	601a      	str	r2, [r3, #0]
    		res = RES_OK;
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	73fb      	strb	r3, [r7, #15]
        break;
 800e3f0:	e009      	b.n	800e406 <USER_ioctl+0x6a>
    	case GET_BLOCK_SIZE:
    		*(DWORD *)buff = W25qxx_getBlockSize();//W25qxx_getSectorSize();//W25qxx_getBlockSize();
 800e3f2:	f7f7 fd5d 	bl	8005eb0 <W25qxx_getBlockSize>
 800e3f6:	4602      	mov	r2, r0
 800e3f8:	683b      	ldr	r3, [r7, #0]
 800e3fa:	601a      	str	r2, [r3, #0]
    		res = RES_OK;
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	73fb      	strb	r3, [r7, #15]
        break;
 800e400:	e001      	b.n	800e406 <USER_ioctl+0x6a>
    		default : res = RES_PARERR;
 800e402:	2304      	movs	r3, #4
 800e404:	73fb      	strb	r3, [r7, #15]
    }
    //

    return res;
 800e406:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800e408:	4618      	mov	r0, r3
 800e40a:	3710      	adds	r7, #16
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}

0800e410 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b084      	sub	sp, #16
 800e414:	af00      	add	r7, sp, #0
 800e416:	4603      	mov	r3, r0
 800e418:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e41a:	79fb      	ldrb	r3, [r7, #7]
 800e41c:	4a08      	ldr	r2, [pc, #32]	; (800e440 <disk_status+0x30>)
 800e41e:	009b      	lsls	r3, r3, #2
 800e420:	4413      	add	r3, r2
 800e422:	685b      	ldr	r3, [r3, #4]
 800e424:	685b      	ldr	r3, [r3, #4]
 800e426:	79fa      	ldrb	r2, [r7, #7]
 800e428:	4905      	ldr	r1, [pc, #20]	; (800e440 <disk_status+0x30>)
 800e42a:	440a      	add	r2, r1
 800e42c:	7a12      	ldrb	r2, [r2, #8]
 800e42e:	4610      	mov	r0, r2
 800e430:	4798      	blx	r3
 800e432:	4603      	mov	r3, r0
 800e434:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e436:	7bfb      	ldrb	r3, [r7, #15]
}
 800e438:	4618      	mov	r0, r3
 800e43a:	3710      	adds	r7, #16
 800e43c:	46bd      	mov	sp, r7
 800e43e:	bd80      	pop	{r7, pc}
 800e440:	20003e64 	.word	0x20003e64

0800e444 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b084      	sub	sp, #16
 800e448:	af00      	add	r7, sp, #0
 800e44a:	4603      	mov	r3, r0
 800e44c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e44e:	2300      	movs	r3, #0
 800e450:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e452:	79fb      	ldrb	r3, [r7, #7]
 800e454:	4a0d      	ldr	r2, [pc, #52]	; (800e48c <disk_initialize+0x48>)
 800e456:	5cd3      	ldrb	r3, [r2, r3]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d111      	bne.n	800e480 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e45c:	79fb      	ldrb	r3, [r7, #7]
 800e45e:	4a0b      	ldr	r2, [pc, #44]	; (800e48c <disk_initialize+0x48>)
 800e460:	2101      	movs	r1, #1
 800e462:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e464:	79fb      	ldrb	r3, [r7, #7]
 800e466:	4a09      	ldr	r2, [pc, #36]	; (800e48c <disk_initialize+0x48>)
 800e468:	009b      	lsls	r3, r3, #2
 800e46a:	4413      	add	r3, r2
 800e46c:	685b      	ldr	r3, [r3, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	79fa      	ldrb	r2, [r7, #7]
 800e472:	4906      	ldr	r1, [pc, #24]	; (800e48c <disk_initialize+0x48>)
 800e474:	440a      	add	r2, r1
 800e476:	7a12      	ldrb	r2, [r2, #8]
 800e478:	4610      	mov	r0, r2
 800e47a:	4798      	blx	r3
 800e47c:	4603      	mov	r3, r0
 800e47e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e480:	7bfb      	ldrb	r3, [r7, #15]
}
 800e482:	4618      	mov	r0, r3
 800e484:	3710      	adds	r7, #16
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}
 800e48a:	bf00      	nop
 800e48c:	20003e64 	.word	0x20003e64

0800e490 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e490:	b590      	push	{r4, r7, lr}
 800e492:	b087      	sub	sp, #28
 800e494:	af00      	add	r7, sp, #0
 800e496:	60b9      	str	r1, [r7, #8]
 800e498:	607a      	str	r2, [r7, #4]
 800e49a:	603b      	str	r3, [r7, #0]
 800e49c:	4603      	mov	r3, r0
 800e49e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e4a0:	7bfb      	ldrb	r3, [r7, #15]
 800e4a2:	4a0a      	ldr	r2, [pc, #40]	; (800e4cc <disk_read+0x3c>)
 800e4a4:	009b      	lsls	r3, r3, #2
 800e4a6:	4413      	add	r3, r2
 800e4a8:	685b      	ldr	r3, [r3, #4]
 800e4aa:	689c      	ldr	r4, [r3, #8]
 800e4ac:	7bfb      	ldrb	r3, [r7, #15]
 800e4ae:	4a07      	ldr	r2, [pc, #28]	; (800e4cc <disk_read+0x3c>)
 800e4b0:	4413      	add	r3, r2
 800e4b2:	7a18      	ldrb	r0, [r3, #8]
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	687a      	ldr	r2, [r7, #4]
 800e4b8:	68b9      	ldr	r1, [r7, #8]
 800e4ba:	47a0      	blx	r4
 800e4bc:	4603      	mov	r3, r0
 800e4be:	75fb      	strb	r3, [r7, #23]
  return res;
 800e4c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	371c      	adds	r7, #28
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bd90      	pop	{r4, r7, pc}
 800e4ca:	bf00      	nop
 800e4cc:	20003e64 	.word	0x20003e64

0800e4d0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e4d0:	b590      	push	{r4, r7, lr}
 800e4d2:	b087      	sub	sp, #28
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	60b9      	str	r1, [r7, #8]
 800e4d8:	607a      	str	r2, [r7, #4]
 800e4da:	603b      	str	r3, [r7, #0]
 800e4dc:	4603      	mov	r3, r0
 800e4de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e4e0:	7bfb      	ldrb	r3, [r7, #15]
 800e4e2:	4a0a      	ldr	r2, [pc, #40]	; (800e50c <disk_write+0x3c>)
 800e4e4:	009b      	lsls	r3, r3, #2
 800e4e6:	4413      	add	r3, r2
 800e4e8:	685b      	ldr	r3, [r3, #4]
 800e4ea:	68dc      	ldr	r4, [r3, #12]
 800e4ec:	7bfb      	ldrb	r3, [r7, #15]
 800e4ee:	4a07      	ldr	r2, [pc, #28]	; (800e50c <disk_write+0x3c>)
 800e4f0:	4413      	add	r3, r2
 800e4f2:	7a18      	ldrb	r0, [r3, #8]
 800e4f4:	683b      	ldr	r3, [r7, #0]
 800e4f6:	687a      	ldr	r2, [r7, #4]
 800e4f8:	68b9      	ldr	r1, [r7, #8]
 800e4fa:	47a0      	blx	r4
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	75fb      	strb	r3, [r7, #23]
  return res;
 800e500:	7dfb      	ldrb	r3, [r7, #23]
}
 800e502:	4618      	mov	r0, r3
 800e504:	371c      	adds	r7, #28
 800e506:	46bd      	mov	sp, r7
 800e508:	bd90      	pop	{r4, r7, pc}
 800e50a:	bf00      	nop
 800e50c:	20003e64 	.word	0x20003e64

0800e510 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b084      	sub	sp, #16
 800e514:	af00      	add	r7, sp, #0
 800e516:	4603      	mov	r3, r0
 800e518:	603a      	str	r2, [r7, #0]
 800e51a:	71fb      	strb	r3, [r7, #7]
 800e51c:	460b      	mov	r3, r1
 800e51e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e520:	79fb      	ldrb	r3, [r7, #7]
 800e522:	4a09      	ldr	r2, [pc, #36]	; (800e548 <disk_ioctl+0x38>)
 800e524:	009b      	lsls	r3, r3, #2
 800e526:	4413      	add	r3, r2
 800e528:	685b      	ldr	r3, [r3, #4]
 800e52a:	691b      	ldr	r3, [r3, #16]
 800e52c:	79fa      	ldrb	r2, [r7, #7]
 800e52e:	4906      	ldr	r1, [pc, #24]	; (800e548 <disk_ioctl+0x38>)
 800e530:	440a      	add	r2, r1
 800e532:	7a10      	ldrb	r0, [r2, #8]
 800e534:	79b9      	ldrb	r1, [r7, #6]
 800e536:	683a      	ldr	r2, [r7, #0]
 800e538:	4798      	blx	r3
 800e53a:	4603      	mov	r3, r0
 800e53c:	73fb      	strb	r3, [r7, #15]
  return res;
 800e53e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e540:	4618      	mov	r0, r3
 800e542:	3710      	adds	r7, #16
 800e544:	46bd      	mov	sp, r7
 800e546:	bd80      	pop	{r7, pc}
 800e548:	20003e64 	.word	0x20003e64

0800e54c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e54c:	b480      	push	{r7}
 800e54e:	b085      	sub	sp, #20
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	3301      	adds	r3, #1
 800e558:	781b      	ldrb	r3, [r3, #0]
 800e55a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e55c:	89fb      	ldrh	r3, [r7, #14]
 800e55e:	021b      	lsls	r3, r3, #8
 800e560:	b21a      	sxth	r2, r3
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	781b      	ldrb	r3, [r3, #0]
 800e566:	b21b      	sxth	r3, r3
 800e568:	4313      	orrs	r3, r2
 800e56a:	b21b      	sxth	r3, r3
 800e56c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e56e:	89fb      	ldrh	r3, [r7, #14]
}
 800e570:	4618      	mov	r0, r3
 800e572:	3714      	adds	r7, #20
 800e574:	46bd      	mov	sp, r7
 800e576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57a:	4770      	bx	lr

0800e57c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e57c:	b480      	push	{r7}
 800e57e:	b085      	sub	sp, #20
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	3303      	adds	r3, #3
 800e588:	781b      	ldrb	r3, [r3, #0]
 800e58a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	021b      	lsls	r3, r3, #8
 800e590:	687a      	ldr	r2, [r7, #4]
 800e592:	3202      	adds	r2, #2
 800e594:	7812      	ldrb	r2, [r2, #0]
 800e596:	4313      	orrs	r3, r2
 800e598:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	021b      	lsls	r3, r3, #8
 800e59e:	687a      	ldr	r2, [r7, #4]
 800e5a0:	3201      	adds	r2, #1
 800e5a2:	7812      	ldrb	r2, [r2, #0]
 800e5a4:	4313      	orrs	r3, r2
 800e5a6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	021b      	lsls	r3, r3, #8
 800e5ac:	687a      	ldr	r2, [r7, #4]
 800e5ae:	7812      	ldrb	r2, [r2, #0]
 800e5b0:	4313      	orrs	r3, r2
 800e5b2:	60fb      	str	r3, [r7, #12]
	return rv;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
}
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	3714      	adds	r7, #20
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c0:	4770      	bx	lr

0800e5c2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e5c2:	b480      	push	{r7}
 800e5c4:	b083      	sub	sp, #12
 800e5c6:	af00      	add	r7, sp, #0
 800e5c8:	6078      	str	r0, [r7, #4]
 800e5ca:	460b      	mov	r3, r1
 800e5cc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	1c5a      	adds	r2, r3, #1
 800e5d2:	607a      	str	r2, [r7, #4]
 800e5d4:	887a      	ldrh	r2, [r7, #2]
 800e5d6:	b2d2      	uxtb	r2, r2
 800e5d8:	701a      	strb	r2, [r3, #0]
 800e5da:	887b      	ldrh	r3, [r7, #2]
 800e5dc:	0a1b      	lsrs	r3, r3, #8
 800e5de:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	1c5a      	adds	r2, r3, #1
 800e5e4:	607a      	str	r2, [r7, #4]
 800e5e6:	887a      	ldrh	r2, [r7, #2]
 800e5e8:	b2d2      	uxtb	r2, r2
 800e5ea:	701a      	strb	r2, [r3, #0]
}
 800e5ec:	bf00      	nop
 800e5ee:	370c      	adds	r7, #12
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f6:	4770      	bx	lr

0800e5f8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e5f8:	b480      	push	{r7}
 800e5fa:	b083      	sub	sp, #12
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
 800e600:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	1c5a      	adds	r2, r3, #1
 800e606:	607a      	str	r2, [r7, #4]
 800e608:	683a      	ldr	r2, [r7, #0]
 800e60a:	b2d2      	uxtb	r2, r2
 800e60c:	701a      	strb	r2, [r3, #0]
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	0a1b      	lsrs	r3, r3, #8
 800e612:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	1c5a      	adds	r2, r3, #1
 800e618:	607a      	str	r2, [r7, #4]
 800e61a:	683a      	ldr	r2, [r7, #0]
 800e61c:	b2d2      	uxtb	r2, r2
 800e61e:	701a      	strb	r2, [r3, #0]
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	0a1b      	lsrs	r3, r3, #8
 800e624:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	1c5a      	adds	r2, r3, #1
 800e62a:	607a      	str	r2, [r7, #4]
 800e62c:	683a      	ldr	r2, [r7, #0]
 800e62e:	b2d2      	uxtb	r2, r2
 800e630:	701a      	strb	r2, [r3, #0]
 800e632:	683b      	ldr	r3, [r7, #0]
 800e634:	0a1b      	lsrs	r3, r3, #8
 800e636:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	1c5a      	adds	r2, r3, #1
 800e63c:	607a      	str	r2, [r7, #4]
 800e63e:	683a      	ldr	r2, [r7, #0]
 800e640:	b2d2      	uxtb	r2, r2
 800e642:	701a      	strb	r2, [r3, #0]
}
 800e644:	bf00      	nop
 800e646:	370c      	adds	r7, #12
 800e648:	46bd      	mov	sp, r7
 800e64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64e:	4770      	bx	lr

0800e650 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e650:	b480      	push	{r7}
 800e652:	b087      	sub	sp, #28
 800e654:	af00      	add	r7, sp, #0
 800e656:	60f8      	str	r0, [r7, #12]
 800e658:	60b9      	str	r1, [r7, #8]
 800e65a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e660:	68bb      	ldr	r3, [r7, #8]
 800e662:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d00d      	beq.n	800e686 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e66a:	693a      	ldr	r2, [r7, #16]
 800e66c:	1c53      	adds	r3, r2, #1
 800e66e:	613b      	str	r3, [r7, #16]
 800e670:	697b      	ldr	r3, [r7, #20]
 800e672:	1c59      	adds	r1, r3, #1
 800e674:	6179      	str	r1, [r7, #20]
 800e676:	7812      	ldrb	r2, [r2, #0]
 800e678:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	3b01      	subs	r3, #1
 800e67e:	607b      	str	r3, [r7, #4]
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d1f1      	bne.n	800e66a <mem_cpy+0x1a>
	}
}
 800e686:	bf00      	nop
 800e688:	371c      	adds	r7, #28
 800e68a:	46bd      	mov	sp, r7
 800e68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e690:	4770      	bx	lr

0800e692 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e692:	b480      	push	{r7}
 800e694:	b087      	sub	sp, #28
 800e696:	af00      	add	r7, sp, #0
 800e698:	60f8      	str	r0, [r7, #12]
 800e69a:	60b9      	str	r1, [r7, #8]
 800e69c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e6a2:	697b      	ldr	r3, [r7, #20]
 800e6a4:	1c5a      	adds	r2, r3, #1
 800e6a6:	617a      	str	r2, [r7, #20]
 800e6a8:	68ba      	ldr	r2, [r7, #8]
 800e6aa:	b2d2      	uxtb	r2, r2
 800e6ac:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	3b01      	subs	r3, #1
 800e6b2:	607b      	str	r3, [r7, #4]
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d1f3      	bne.n	800e6a2 <mem_set+0x10>
}
 800e6ba:	bf00      	nop
 800e6bc:	bf00      	nop
 800e6be:	371c      	adds	r7, #28
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c6:	4770      	bx	lr

0800e6c8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e6c8:	b480      	push	{r7}
 800e6ca:	b089      	sub	sp, #36	; 0x24
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	60f8      	str	r0, [r7, #12]
 800e6d0:	60b9      	str	r1, [r7, #8]
 800e6d2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	61fb      	str	r3, [r7, #28]
 800e6d8:	68bb      	ldr	r3, [r7, #8]
 800e6da:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e6dc:	2300      	movs	r3, #0
 800e6de:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e6e0:	69fb      	ldr	r3, [r7, #28]
 800e6e2:	1c5a      	adds	r2, r3, #1
 800e6e4:	61fa      	str	r2, [r7, #28]
 800e6e6:	781b      	ldrb	r3, [r3, #0]
 800e6e8:	4619      	mov	r1, r3
 800e6ea:	69bb      	ldr	r3, [r7, #24]
 800e6ec:	1c5a      	adds	r2, r3, #1
 800e6ee:	61ba      	str	r2, [r7, #24]
 800e6f0:	781b      	ldrb	r3, [r3, #0]
 800e6f2:	1acb      	subs	r3, r1, r3
 800e6f4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	3b01      	subs	r3, #1
 800e6fa:	607b      	str	r3, [r7, #4]
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d002      	beq.n	800e708 <mem_cmp+0x40>
 800e702:	697b      	ldr	r3, [r7, #20]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d0eb      	beq.n	800e6e0 <mem_cmp+0x18>

	return r;
 800e708:	697b      	ldr	r3, [r7, #20]
}
 800e70a:	4618      	mov	r0, r3
 800e70c:	3724      	adds	r7, #36	; 0x24
 800e70e:	46bd      	mov	sp, r7
 800e710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e714:	4770      	bx	lr

0800e716 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e716:	b480      	push	{r7}
 800e718:	b083      	sub	sp, #12
 800e71a:	af00      	add	r7, sp, #0
 800e71c:	6078      	str	r0, [r7, #4]
 800e71e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e720:	e002      	b.n	800e728 <chk_chr+0x12>
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	3301      	adds	r3, #1
 800e726:	607b      	str	r3, [r7, #4]
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	781b      	ldrb	r3, [r3, #0]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d005      	beq.n	800e73c <chk_chr+0x26>
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	781b      	ldrb	r3, [r3, #0]
 800e734:	461a      	mov	r2, r3
 800e736:	683b      	ldr	r3, [r7, #0]
 800e738:	4293      	cmp	r3, r2
 800e73a:	d1f2      	bne.n	800e722 <chk_chr+0xc>
	return *str;
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	781b      	ldrb	r3, [r3, #0]
}
 800e740:	4618      	mov	r0, r3
 800e742:	370c      	adds	r7, #12
 800e744:	46bd      	mov	sp, r7
 800e746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74a:	4770      	bx	lr

0800e74c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e74c:	b480      	push	{r7}
 800e74e:	b085      	sub	sp, #20
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
 800e754:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e756:	2300      	movs	r3, #0
 800e758:	60bb      	str	r3, [r7, #8]
 800e75a:	68bb      	ldr	r3, [r7, #8]
 800e75c:	60fb      	str	r3, [r7, #12]
 800e75e:	e029      	b.n	800e7b4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e760:	4a27      	ldr	r2, [pc, #156]	; (800e800 <chk_lock+0xb4>)
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	011b      	lsls	r3, r3, #4
 800e766:	4413      	add	r3, r2
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d01d      	beq.n	800e7aa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e76e:	4a24      	ldr	r2, [pc, #144]	; (800e800 <chk_lock+0xb4>)
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	011b      	lsls	r3, r3, #4
 800e774:	4413      	add	r3, r2
 800e776:	681a      	ldr	r2, [r3, #0]
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	429a      	cmp	r2, r3
 800e77e:	d116      	bne.n	800e7ae <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e780:	4a1f      	ldr	r2, [pc, #124]	; (800e800 <chk_lock+0xb4>)
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	011b      	lsls	r3, r3, #4
 800e786:	4413      	add	r3, r2
 800e788:	3304      	adds	r3, #4
 800e78a:	681a      	ldr	r2, [r3, #0]
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e790:	429a      	cmp	r2, r3
 800e792:	d10c      	bne.n	800e7ae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e794:	4a1a      	ldr	r2, [pc, #104]	; (800e800 <chk_lock+0xb4>)
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	011b      	lsls	r3, r3, #4
 800e79a:	4413      	add	r3, r2
 800e79c:	3308      	adds	r3, #8
 800e79e:	681a      	ldr	r2, [r3, #0]
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e7a4:	429a      	cmp	r2, r3
 800e7a6:	d102      	bne.n	800e7ae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e7a8:	e007      	b.n	800e7ba <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e7aa:	2301      	movs	r3, #1
 800e7ac:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	3301      	adds	r3, #1
 800e7b2:	60fb      	str	r3, [r7, #12]
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	2b01      	cmp	r3, #1
 800e7b8:	d9d2      	bls.n	800e760 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	2b02      	cmp	r3, #2
 800e7be:	d109      	bne.n	800e7d4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e7c0:	68bb      	ldr	r3, [r7, #8]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d102      	bne.n	800e7cc <chk_lock+0x80>
 800e7c6:	683b      	ldr	r3, [r7, #0]
 800e7c8:	2b02      	cmp	r3, #2
 800e7ca:	d101      	bne.n	800e7d0 <chk_lock+0x84>
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	e010      	b.n	800e7f2 <chk_lock+0xa6>
 800e7d0:	2312      	movs	r3, #18
 800e7d2:	e00e      	b.n	800e7f2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e7d4:	683b      	ldr	r3, [r7, #0]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d108      	bne.n	800e7ec <chk_lock+0xa0>
 800e7da:	4a09      	ldr	r2, [pc, #36]	; (800e800 <chk_lock+0xb4>)
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	011b      	lsls	r3, r3, #4
 800e7e0:	4413      	add	r3, r2
 800e7e2:	330c      	adds	r3, #12
 800e7e4:	881b      	ldrh	r3, [r3, #0]
 800e7e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e7ea:	d101      	bne.n	800e7f0 <chk_lock+0xa4>
 800e7ec:	2310      	movs	r3, #16
 800e7ee:	e000      	b.n	800e7f2 <chk_lock+0xa6>
 800e7f0:	2300      	movs	r3, #0
}
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	3714      	adds	r7, #20
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fc:	4770      	bx	lr
 800e7fe:	bf00      	nop
 800e800:	20003e44 	.word	0x20003e44

0800e804 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e804:	b480      	push	{r7}
 800e806:	b083      	sub	sp, #12
 800e808:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e80a:	2300      	movs	r3, #0
 800e80c:	607b      	str	r3, [r7, #4]
 800e80e:	e002      	b.n	800e816 <enq_lock+0x12>
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	3301      	adds	r3, #1
 800e814:	607b      	str	r3, [r7, #4]
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	2b01      	cmp	r3, #1
 800e81a:	d806      	bhi.n	800e82a <enq_lock+0x26>
 800e81c:	4a09      	ldr	r2, [pc, #36]	; (800e844 <enq_lock+0x40>)
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	011b      	lsls	r3, r3, #4
 800e822:	4413      	add	r3, r2
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d1f2      	bne.n	800e810 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	2b02      	cmp	r3, #2
 800e82e:	bf14      	ite	ne
 800e830:	2301      	movne	r3, #1
 800e832:	2300      	moveq	r3, #0
 800e834:	b2db      	uxtb	r3, r3
}
 800e836:	4618      	mov	r0, r3
 800e838:	370c      	adds	r7, #12
 800e83a:	46bd      	mov	sp, r7
 800e83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e840:	4770      	bx	lr
 800e842:	bf00      	nop
 800e844:	20003e44 	.word	0x20003e44

0800e848 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e848:	b480      	push	{r7}
 800e84a:	b085      	sub	sp, #20
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
 800e850:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e852:	2300      	movs	r3, #0
 800e854:	60fb      	str	r3, [r7, #12]
 800e856:	e01f      	b.n	800e898 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e858:	4a41      	ldr	r2, [pc, #260]	; (800e960 <inc_lock+0x118>)
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	011b      	lsls	r3, r3, #4
 800e85e:	4413      	add	r3, r2
 800e860:	681a      	ldr	r2, [r3, #0]
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	429a      	cmp	r2, r3
 800e868:	d113      	bne.n	800e892 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e86a:	4a3d      	ldr	r2, [pc, #244]	; (800e960 <inc_lock+0x118>)
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	011b      	lsls	r3, r3, #4
 800e870:	4413      	add	r3, r2
 800e872:	3304      	adds	r3, #4
 800e874:	681a      	ldr	r2, [r3, #0]
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e87a:	429a      	cmp	r2, r3
 800e87c:	d109      	bne.n	800e892 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e87e:	4a38      	ldr	r2, [pc, #224]	; (800e960 <inc_lock+0x118>)
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	011b      	lsls	r3, r3, #4
 800e884:	4413      	add	r3, r2
 800e886:	3308      	adds	r3, #8
 800e888:	681a      	ldr	r2, [r3, #0]
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e88e:	429a      	cmp	r2, r3
 800e890:	d006      	beq.n	800e8a0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	3301      	adds	r3, #1
 800e896:	60fb      	str	r3, [r7, #12]
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	2b01      	cmp	r3, #1
 800e89c:	d9dc      	bls.n	800e858 <inc_lock+0x10>
 800e89e:	e000      	b.n	800e8a2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e8a0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	2b02      	cmp	r3, #2
 800e8a6:	d132      	bne.n	800e90e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	60fb      	str	r3, [r7, #12]
 800e8ac:	e002      	b.n	800e8b4 <inc_lock+0x6c>
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	3301      	adds	r3, #1
 800e8b2:	60fb      	str	r3, [r7, #12]
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	2b01      	cmp	r3, #1
 800e8b8:	d806      	bhi.n	800e8c8 <inc_lock+0x80>
 800e8ba:	4a29      	ldr	r2, [pc, #164]	; (800e960 <inc_lock+0x118>)
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	011b      	lsls	r3, r3, #4
 800e8c0:	4413      	add	r3, r2
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d1f2      	bne.n	800e8ae <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	2b02      	cmp	r3, #2
 800e8cc:	d101      	bne.n	800e8d2 <inc_lock+0x8a>
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	e040      	b.n	800e954 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681a      	ldr	r2, [r3, #0]
 800e8d6:	4922      	ldr	r1, [pc, #136]	; (800e960 <inc_lock+0x118>)
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	011b      	lsls	r3, r3, #4
 800e8dc:	440b      	add	r3, r1
 800e8de:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	689a      	ldr	r2, [r3, #8]
 800e8e4:	491e      	ldr	r1, [pc, #120]	; (800e960 <inc_lock+0x118>)
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	011b      	lsls	r3, r3, #4
 800e8ea:	440b      	add	r3, r1
 800e8ec:	3304      	adds	r3, #4
 800e8ee:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	695a      	ldr	r2, [r3, #20]
 800e8f4:	491a      	ldr	r1, [pc, #104]	; (800e960 <inc_lock+0x118>)
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	011b      	lsls	r3, r3, #4
 800e8fa:	440b      	add	r3, r1
 800e8fc:	3308      	adds	r3, #8
 800e8fe:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e900:	4a17      	ldr	r2, [pc, #92]	; (800e960 <inc_lock+0x118>)
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	011b      	lsls	r3, r3, #4
 800e906:	4413      	add	r3, r2
 800e908:	330c      	adds	r3, #12
 800e90a:	2200      	movs	r2, #0
 800e90c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e90e:	683b      	ldr	r3, [r7, #0]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d009      	beq.n	800e928 <inc_lock+0xe0>
 800e914:	4a12      	ldr	r2, [pc, #72]	; (800e960 <inc_lock+0x118>)
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	011b      	lsls	r3, r3, #4
 800e91a:	4413      	add	r3, r2
 800e91c:	330c      	adds	r3, #12
 800e91e:	881b      	ldrh	r3, [r3, #0]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d001      	beq.n	800e928 <inc_lock+0xe0>
 800e924:	2300      	movs	r3, #0
 800e926:	e015      	b.n	800e954 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e928:	683b      	ldr	r3, [r7, #0]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d108      	bne.n	800e940 <inc_lock+0xf8>
 800e92e:	4a0c      	ldr	r2, [pc, #48]	; (800e960 <inc_lock+0x118>)
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	011b      	lsls	r3, r3, #4
 800e934:	4413      	add	r3, r2
 800e936:	330c      	adds	r3, #12
 800e938:	881b      	ldrh	r3, [r3, #0]
 800e93a:	3301      	adds	r3, #1
 800e93c:	b29a      	uxth	r2, r3
 800e93e:	e001      	b.n	800e944 <inc_lock+0xfc>
 800e940:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e944:	4906      	ldr	r1, [pc, #24]	; (800e960 <inc_lock+0x118>)
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	011b      	lsls	r3, r3, #4
 800e94a:	440b      	add	r3, r1
 800e94c:	330c      	adds	r3, #12
 800e94e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	3301      	adds	r3, #1
}
 800e954:	4618      	mov	r0, r3
 800e956:	3714      	adds	r7, #20
 800e958:	46bd      	mov	sp, r7
 800e95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95e:	4770      	bx	lr
 800e960:	20003e44 	.word	0x20003e44

0800e964 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e964:	b480      	push	{r7}
 800e966:	b085      	sub	sp, #20
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	3b01      	subs	r3, #1
 800e970:	607b      	str	r3, [r7, #4]
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	2b01      	cmp	r3, #1
 800e976:	d825      	bhi.n	800e9c4 <dec_lock+0x60>
		n = Files[i].ctr;
 800e978:	4a17      	ldr	r2, [pc, #92]	; (800e9d8 <dec_lock+0x74>)
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	011b      	lsls	r3, r3, #4
 800e97e:	4413      	add	r3, r2
 800e980:	330c      	adds	r3, #12
 800e982:	881b      	ldrh	r3, [r3, #0]
 800e984:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e986:	89fb      	ldrh	r3, [r7, #14]
 800e988:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e98c:	d101      	bne.n	800e992 <dec_lock+0x2e>
 800e98e:	2300      	movs	r3, #0
 800e990:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e992:	89fb      	ldrh	r3, [r7, #14]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d002      	beq.n	800e99e <dec_lock+0x3a>
 800e998:	89fb      	ldrh	r3, [r7, #14]
 800e99a:	3b01      	subs	r3, #1
 800e99c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e99e:	4a0e      	ldr	r2, [pc, #56]	; (800e9d8 <dec_lock+0x74>)
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	011b      	lsls	r3, r3, #4
 800e9a4:	4413      	add	r3, r2
 800e9a6:	330c      	adds	r3, #12
 800e9a8:	89fa      	ldrh	r2, [r7, #14]
 800e9aa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e9ac:	89fb      	ldrh	r3, [r7, #14]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d105      	bne.n	800e9be <dec_lock+0x5a>
 800e9b2:	4a09      	ldr	r2, [pc, #36]	; (800e9d8 <dec_lock+0x74>)
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	011b      	lsls	r3, r3, #4
 800e9b8:	4413      	add	r3, r2
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e9be:	2300      	movs	r3, #0
 800e9c0:	737b      	strb	r3, [r7, #13]
 800e9c2:	e001      	b.n	800e9c8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e9c4:	2302      	movs	r3, #2
 800e9c6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e9c8:	7b7b      	ldrb	r3, [r7, #13]
}
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	3714      	adds	r7, #20
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d4:	4770      	bx	lr
 800e9d6:	bf00      	nop
 800e9d8:	20003e44 	.word	0x20003e44

0800e9dc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e9dc:	b480      	push	{r7}
 800e9de:	b085      	sub	sp, #20
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	60fb      	str	r3, [r7, #12]
 800e9e8:	e010      	b.n	800ea0c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e9ea:	4a0d      	ldr	r2, [pc, #52]	; (800ea20 <clear_lock+0x44>)
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	011b      	lsls	r3, r3, #4
 800e9f0:	4413      	add	r3, r2
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	687a      	ldr	r2, [r7, #4]
 800e9f6:	429a      	cmp	r2, r3
 800e9f8:	d105      	bne.n	800ea06 <clear_lock+0x2a>
 800e9fa:	4a09      	ldr	r2, [pc, #36]	; (800ea20 <clear_lock+0x44>)
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	011b      	lsls	r3, r3, #4
 800ea00:	4413      	add	r3, r2
 800ea02:	2200      	movs	r2, #0
 800ea04:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	3301      	adds	r3, #1
 800ea0a:	60fb      	str	r3, [r7, #12]
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	2b01      	cmp	r3, #1
 800ea10:	d9eb      	bls.n	800e9ea <clear_lock+0xe>
	}
}
 800ea12:	bf00      	nop
 800ea14:	bf00      	nop
 800ea16:	3714      	adds	r7, #20
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1e:	4770      	bx	lr
 800ea20:	20003e44 	.word	0x20003e44

0800ea24 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b086      	sub	sp, #24
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	78db      	ldrb	r3, [r3, #3]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d034      	beq.n	800eaa2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea3c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	7858      	ldrb	r0, [r3, #1]
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ea48:	2301      	movs	r3, #1
 800ea4a:	697a      	ldr	r2, [r7, #20]
 800ea4c:	f7ff fd40 	bl	800e4d0 <disk_write>
 800ea50:	4603      	mov	r3, r0
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d002      	beq.n	800ea5c <sync_window+0x38>
			res = FR_DISK_ERR;
 800ea56:	2301      	movs	r3, #1
 800ea58:	73fb      	strb	r3, [r7, #15]
 800ea5a:	e022      	b.n	800eaa2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	2200      	movs	r2, #0
 800ea60:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	6a1b      	ldr	r3, [r3, #32]
 800ea66:	697a      	ldr	r2, [r7, #20]
 800ea68:	1ad2      	subs	r2, r2, r3
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	699b      	ldr	r3, [r3, #24]
 800ea6e:	429a      	cmp	r2, r3
 800ea70:	d217      	bcs.n	800eaa2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	789b      	ldrb	r3, [r3, #2]
 800ea76:	613b      	str	r3, [r7, #16]
 800ea78:	e010      	b.n	800ea9c <sync_window+0x78>
					wsect += fs->fsize;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	699b      	ldr	r3, [r3, #24]
 800ea7e:	697a      	ldr	r2, [r7, #20]
 800ea80:	4413      	add	r3, r2
 800ea82:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	7858      	ldrb	r0, [r3, #1]
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ea8e:	2301      	movs	r3, #1
 800ea90:	697a      	ldr	r2, [r7, #20]
 800ea92:	f7ff fd1d 	bl	800e4d0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ea96:	693b      	ldr	r3, [r7, #16]
 800ea98:	3b01      	subs	r3, #1
 800ea9a:	613b      	str	r3, [r7, #16]
 800ea9c:	693b      	ldr	r3, [r7, #16]
 800ea9e:	2b01      	cmp	r3, #1
 800eaa0:	d8eb      	bhi.n	800ea7a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800eaa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	3718      	adds	r7, #24
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}

0800eaac <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b084      	sub	sp, #16
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
 800eab4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800eab6:	2300      	movs	r3, #0
 800eab8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eabe:	683a      	ldr	r2, [r7, #0]
 800eac0:	429a      	cmp	r2, r3
 800eac2:	d01b      	beq.n	800eafc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800eac4:	6878      	ldr	r0, [r7, #4]
 800eac6:	f7ff ffad 	bl	800ea24 <sync_window>
 800eaca:	4603      	mov	r3, r0
 800eacc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800eace:	7bfb      	ldrb	r3, [r7, #15]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d113      	bne.n	800eafc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	7858      	ldrb	r0, [r3, #1]
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eade:	2301      	movs	r3, #1
 800eae0:	683a      	ldr	r2, [r7, #0]
 800eae2:	f7ff fcd5 	bl	800e490 <disk_read>
 800eae6:	4603      	mov	r3, r0
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d004      	beq.n	800eaf6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800eaec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eaf0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800eaf2:	2301      	movs	r3, #1
 800eaf4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	683a      	ldr	r2, [r7, #0]
 800eafa:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800eafc:	7bfb      	ldrb	r3, [r7, #15]
}
 800eafe:	4618      	mov	r0, r3
 800eb00:	3710      	adds	r7, #16
 800eb02:	46bd      	mov	sp, r7
 800eb04:	bd80      	pop	{r7, pc}
	...

0800eb08 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b084      	sub	sp, #16
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800eb10:	6878      	ldr	r0, [r7, #4]
 800eb12:	f7ff ff87 	bl	800ea24 <sync_window>
 800eb16:	4603      	mov	r3, r0
 800eb18:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800eb1a:	7bfb      	ldrb	r3, [r7, #15]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d158      	bne.n	800ebd2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	781b      	ldrb	r3, [r3, #0]
 800eb24:	2b03      	cmp	r3, #3
 800eb26:	d148      	bne.n	800ebba <sync_fs+0xb2>
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	791b      	ldrb	r3, [r3, #4]
 800eb2c:	2b01      	cmp	r3, #1
 800eb2e:	d144      	bne.n	800ebba <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	3330      	adds	r3, #48	; 0x30
 800eb34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800eb38:	2100      	movs	r1, #0
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	f7ff fda9 	bl	800e692 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	3330      	adds	r3, #48	; 0x30
 800eb44:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800eb48:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	f7ff fd38 	bl	800e5c2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	3330      	adds	r3, #48	; 0x30
 800eb56:	4921      	ldr	r1, [pc, #132]	; (800ebdc <sync_fs+0xd4>)
 800eb58:	4618      	mov	r0, r3
 800eb5a:	f7ff fd4d 	bl	800e5f8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	3330      	adds	r3, #48	; 0x30
 800eb62:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800eb66:	491e      	ldr	r1, [pc, #120]	; (800ebe0 <sync_fs+0xd8>)
 800eb68:	4618      	mov	r0, r3
 800eb6a:	f7ff fd45 	bl	800e5f8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	3330      	adds	r3, #48	; 0x30
 800eb72:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	691b      	ldr	r3, [r3, #16]
 800eb7a:	4619      	mov	r1, r3
 800eb7c:	4610      	mov	r0, r2
 800eb7e:	f7ff fd3b 	bl	800e5f8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	3330      	adds	r3, #48	; 0x30
 800eb86:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	68db      	ldr	r3, [r3, #12]
 800eb8e:	4619      	mov	r1, r3
 800eb90:	4610      	mov	r0, r2
 800eb92:	f7ff fd31 	bl	800e5f8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	69db      	ldr	r3, [r3, #28]
 800eb9a:	1c5a      	adds	r2, r3, #1
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	7858      	ldrb	r0, [r3, #1]
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebae:	2301      	movs	r3, #1
 800ebb0:	f7ff fc8e 	bl	800e4d0 <disk_write>
			fs->fsi_flag = 0;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	785b      	ldrb	r3, [r3, #1]
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	2100      	movs	r1, #0
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	f7ff fca4 	bl	800e510 <disk_ioctl>
 800ebc8:	4603      	mov	r3, r0
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d001      	beq.n	800ebd2 <sync_fs+0xca>
 800ebce:	2301      	movs	r3, #1
 800ebd0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ebd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	3710      	adds	r7, #16
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd80      	pop	{r7, pc}
 800ebdc:	41615252 	.word	0x41615252
 800ebe0:	61417272 	.word	0x61417272

0800ebe4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ebe4:	b480      	push	{r7}
 800ebe6:	b083      	sub	sp, #12
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
 800ebec:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ebee:	683b      	ldr	r3, [r7, #0]
 800ebf0:	3b02      	subs	r3, #2
 800ebf2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	695b      	ldr	r3, [r3, #20]
 800ebf8:	3b02      	subs	r3, #2
 800ebfa:	683a      	ldr	r2, [r7, #0]
 800ebfc:	429a      	cmp	r2, r3
 800ebfe:	d301      	bcc.n	800ec04 <clust2sect+0x20>
 800ec00:	2300      	movs	r3, #0
 800ec02:	e008      	b.n	800ec16 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	895b      	ldrh	r3, [r3, #10]
 800ec08:	461a      	mov	r2, r3
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	fb03 f202 	mul.w	r2, r3, r2
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec14:	4413      	add	r3, r2
}
 800ec16:	4618      	mov	r0, r3
 800ec18:	370c      	adds	r7, #12
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec20:	4770      	bx	lr

0800ec22 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ec22:	b580      	push	{r7, lr}
 800ec24:	b086      	sub	sp, #24
 800ec26:	af00      	add	r7, sp, #0
 800ec28:	6078      	str	r0, [r7, #4]
 800ec2a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	2b01      	cmp	r3, #1
 800ec36:	d904      	bls.n	800ec42 <get_fat+0x20>
 800ec38:	693b      	ldr	r3, [r7, #16]
 800ec3a:	695b      	ldr	r3, [r3, #20]
 800ec3c:	683a      	ldr	r2, [r7, #0]
 800ec3e:	429a      	cmp	r2, r3
 800ec40:	d302      	bcc.n	800ec48 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ec42:	2301      	movs	r3, #1
 800ec44:	617b      	str	r3, [r7, #20]
 800ec46:	e091      	b.n	800ed6c <get_fat+0x14a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ec48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ec4c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ec4e:	693b      	ldr	r3, [r7, #16]
 800ec50:	781b      	ldrb	r3, [r3, #0]
 800ec52:	2b03      	cmp	r3, #3
 800ec54:	d063      	beq.n	800ed1e <get_fat+0xfc>
 800ec56:	2b03      	cmp	r3, #3
 800ec58:	dc7e      	bgt.n	800ed58 <get_fat+0x136>
 800ec5a:	2b01      	cmp	r3, #1
 800ec5c:	d002      	beq.n	800ec64 <get_fat+0x42>
 800ec5e:	2b02      	cmp	r3, #2
 800ec60:	d042      	beq.n	800ece8 <get_fat+0xc6>
 800ec62:	e079      	b.n	800ed58 <get_fat+0x136>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ec64:	683b      	ldr	r3, [r7, #0]
 800ec66:	60fb      	str	r3, [r7, #12]
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	085b      	lsrs	r3, r3, #1
 800ec6c:	68fa      	ldr	r2, [r7, #12]
 800ec6e:	4413      	add	r3, r2
 800ec70:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ec72:	693b      	ldr	r3, [r7, #16]
 800ec74:	6a1a      	ldr	r2, [r3, #32]
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	0b1b      	lsrs	r3, r3, #12
 800ec7a:	4413      	add	r3, r2
 800ec7c:	4619      	mov	r1, r3
 800ec7e:	6938      	ldr	r0, [r7, #16]
 800ec80:	f7ff ff14 	bl	800eaac <move_window>
 800ec84:	4603      	mov	r3, r0
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d169      	bne.n	800ed5e <get_fat+0x13c>
			wc = fs->win[bc++ % SS(fs)];
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	1c5a      	adds	r2, r3, #1
 800ec8e:	60fa      	str	r2, [r7, #12]
 800ec90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ec94:	693a      	ldr	r2, [r7, #16]
 800ec96:	4413      	add	r3, r2
 800ec98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ec9c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ec9e:	693b      	ldr	r3, [r7, #16]
 800eca0:	6a1a      	ldr	r2, [r3, #32]
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	0b1b      	lsrs	r3, r3, #12
 800eca6:	4413      	add	r3, r2
 800eca8:	4619      	mov	r1, r3
 800ecaa:	6938      	ldr	r0, [r7, #16]
 800ecac:	f7ff fefe 	bl	800eaac <move_window>
 800ecb0:	4603      	mov	r3, r0
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d155      	bne.n	800ed62 <get_fat+0x140>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ecbc:	693a      	ldr	r2, [r7, #16]
 800ecbe:	4413      	add	r3, r2
 800ecc0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ecc4:	021b      	lsls	r3, r3, #8
 800ecc6:	461a      	mov	r2, r3
 800ecc8:	68bb      	ldr	r3, [r7, #8]
 800ecca:	4313      	orrs	r3, r2
 800eccc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ecce:	683b      	ldr	r3, [r7, #0]
 800ecd0:	f003 0301 	and.w	r3, r3, #1
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d002      	beq.n	800ecde <get_fat+0xbc>
 800ecd8:	68bb      	ldr	r3, [r7, #8]
 800ecda:	091b      	lsrs	r3, r3, #4
 800ecdc:	e002      	b.n	800ece4 <get_fat+0xc2>
 800ecde:	68bb      	ldr	r3, [r7, #8]
 800ece0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ece4:	617b      	str	r3, [r7, #20]
			break;
 800ece6:	e041      	b.n	800ed6c <get_fat+0x14a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ece8:	693b      	ldr	r3, [r7, #16]
 800ecea:	6a1a      	ldr	r2, [r3, #32]
 800ecec:	683b      	ldr	r3, [r7, #0]
 800ecee:	0adb      	lsrs	r3, r3, #11
 800ecf0:	4413      	add	r3, r2
 800ecf2:	4619      	mov	r1, r3
 800ecf4:	6938      	ldr	r0, [r7, #16]
 800ecf6:	f7ff fed9 	bl	800eaac <move_window>
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d132      	bne.n	800ed66 <get_fat+0x144>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ed00:	693b      	ldr	r3, [r7, #16]
 800ed02:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ed06:	683b      	ldr	r3, [r7, #0]
 800ed08:	0059      	lsls	r1, r3, #1
 800ed0a:	f640 73fe 	movw	r3, #4094	; 0xffe
 800ed0e:	400b      	ands	r3, r1
 800ed10:	4413      	add	r3, r2
 800ed12:	4618      	mov	r0, r3
 800ed14:	f7ff fc1a 	bl	800e54c <ld_word>
 800ed18:	4603      	mov	r3, r0
 800ed1a:	617b      	str	r3, [r7, #20]
			break;
 800ed1c:	e026      	b.n	800ed6c <get_fat+0x14a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ed1e:	693b      	ldr	r3, [r7, #16]
 800ed20:	6a1a      	ldr	r2, [r3, #32]
 800ed22:	683b      	ldr	r3, [r7, #0]
 800ed24:	0a9b      	lsrs	r3, r3, #10
 800ed26:	4413      	add	r3, r2
 800ed28:	4619      	mov	r1, r3
 800ed2a:	6938      	ldr	r0, [r7, #16]
 800ed2c:	f7ff febe 	bl	800eaac <move_window>
 800ed30:	4603      	mov	r3, r0
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d119      	bne.n	800ed6a <get_fat+0x148>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ed36:	693b      	ldr	r3, [r7, #16]
 800ed38:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ed3c:	683b      	ldr	r3, [r7, #0]
 800ed3e:	0099      	lsls	r1, r3, #2
 800ed40:	f640 73fc 	movw	r3, #4092	; 0xffc
 800ed44:	400b      	ands	r3, r1
 800ed46:	4413      	add	r3, r2
 800ed48:	4618      	mov	r0, r3
 800ed4a:	f7ff fc17 	bl	800e57c <ld_dword>
 800ed4e:	4603      	mov	r3, r0
 800ed50:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ed54:	617b      	str	r3, [r7, #20]
			break;
 800ed56:	e009      	b.n	800ed6c <get_fat+0x14a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ed58:	2301      	movs	r3, #1
 800ed5a:	617b      	str	r3, [r7, #20]
 800ed5c:	e006      	b.n	800ed6c <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ed5e:	bf00      	nop
 800ed60:	e004      	b.n	800ed6c <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ed62:	bf00      	nop
 800ed64:	e002      	b.n	800ed6c <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ed66:	bf00      	nop
 800ed68:	e000      	b.n	800ed6c <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ed6a:	bf00      	nop
		}
	}

	return val;
 800ed6c:	697b      	ldr	r3, [r7, #20]
}
 800ed6e:	4618      	mov	r0, r3
 800ed70:	3718      	adds	r7, #24
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd80      	pop	{r7, pc}

0800ed76 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ed76:	b590      	push	{r4, r7, lr}
 800ed78:	b089      	sub	sp, #36	; 0x24
 800ed7a:	af00      	add	r7, sp, #0
 800ed7c:	60f8      	str	r0, [r7, #12]
 800ed7e:	60b9      	str	r1, [r7, #8]
 800ed80:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ed82:	2302      	movs	r3, #2
 800ed84:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ed86:	68bb      	ldr	r3, [r7, #8]
 800ed88:	2b01      	cmp	r3, #1
 800ed8a:	f240 80d5 	bls.w	800ef38 <put_fat+0x1c2>
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	695b      	ldr	r3, [r3, #20]
 800ed92:	68ba      	ldr	r2, [r7, #8]
 800ed94:	429a      	cmp	r2, r3
 800ed96:	f080 80cf 	bcs.w	800ef38 <put_fat+0x1c2>
		switch (fs->fs_type) {
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	781b      	ldrb	r3, [r3, #0]
 800ed9e:	2b03      	cmp	r3, #3
 800eda0:	f000 8097 	beq.w	800eed2 <put_fat+0x15c>
 800eda4:	2b03      	cmp	r3, #3
 800eda6:	f300 80d0 	bgt.w	800ef4a <put_fat+0x1d4>
 800edaa:	2b01      	cmp	r3, #1
 800edac:	d002      	beq.n	800edb4 <put_fat+0x3e>
 800edae:	2b02      	cmp	r3, #2
 800edb0:	d06e      	beq.n	800ee90 <put_fat+0x11a>
 800edb2:	e0ca      	b.n	800ef4a <put_fat+0x1d4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800edb4:	68bb      	ldr	r3, [r7, #8]
 800edb6:	61bb      	str	r3, [r7, #24]
 800edb8:	69bb      	ldr	r3, [r7, #24]
 800edba:	085b      	lsrs	r3, r3, #1
 800edbc:	69ba      	ldr	r2, [r7, #24]
 800edbe:	4413      	add	r3, r2
 800edc0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	6a1a      	ldr	r2, [r3, #32]
 800edc6:	69bb      	ldr	r3, [r7, #24]
 800edc8:	0b1b      	lsrs	r3, r3, #12
 800edca:	4413      	add	r3, r2
 800edcc:	4619      	mov	r1, r3
 800edce:	68f8      	ldr	r0, [r7, #12]
 800edd0:	f7ff fe6c 	bl	800eaac <move_window>
 800edd4:	4603      	mov	r3, r0
 800edd6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800edd8:	7ffb      	ldrb	r3, [r7, #31]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	f040 80ae 	bne.w	800ef3c <put_fat+0x1c6>
			p = fs->win + bc++ % SS(fs);
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ede6:	69bb      	ldr	r3, [r7, #24]
 800ede8:	1c59      	adds	r1, r3, #1
 800edea:	61b9      	str	r1, [r7, #24]
 800edec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800edf0:	4413      	add	r3, r2
 800edf2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800edf4:	68bb      	ldr	r3, [r7, #8]
 800edf6:	f003 0301 	and.w	r3, r3, #1
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d00d      	beq.n	800ee1a <put_fat+0xa4>
 800edfe:	697b      	ldr	r3, [r7, #20]
 800ee00:	781b      	ldrb	r3, [r3, #0]
 800ee02:	b25b      	sxtb	r3, r3
 800ee04:	f003 030f 	and.w	r3, r3, #15
 800ee08:	b25a      	sxtb	r2, r3
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	b2db      	uxtb	r3, r3
 800ee0e:	011b      	lsls	r3, r3, #4
 800ee10:	b25b      	sxtb	r3, r3
 800ee12:	4313      	orrs	r3, r2
 800ee14:	b25b      	sxtb	r3, r3
 800ee16:	b2db      	uxtb	r3, r3
 800ee18:	e001      	b.n	800ee1e <put_fat+0xa8>
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	b2db      	uxtb	r3, r3
 800ee1e:	697a      	ldr	r2, [r7, #20]
 800ee20:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	2201      	movs	r2, #1
 800ee26:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	6a1a      	ldr	r2, [r3, #32]
 800ee2c:	69bb      	ldr	r3, [r7, #24]
 800ee2e:	0b1b      	lsrs	r3, r3, #12
 800ee30:	4413      	add	r3, r2
 800ee32:	4619      	mov	r1, r3
 800ee34:	68f8      	ldr	r0, [r7, #12]
 800ee36:	f7ff fe39 	bl	800eaac <move_window>
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ee3e:	7ffb      	ldrb	r3, [r7, #31]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d17d      	bne.n	800ef40 <put_fat+0x1ca>
			p = fs->win + bc % SS(fs);
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ee4a:	69bb      	ldr	r3, [r7, #24]
 800ee4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ee50:	4413      	add	r3, r2
 800ee52:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ee54:	68bb      	ldr	r3, [r7, #8]
 800ee56:	f003 0301 	and.w	r3, r3, #1
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d003      	beq.n	800ee66 <put_fat+0xf0>
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	091b      	lsrs	r3, r3, #4
 800ee62:	b2db      	uxtb	r3, r3
 800ee64:	e00e      	b.n	800ee84 <put_fat+0x10e>
 800ee66:	697b      	ldr	r3, [r7, #20]
 800ee68:	781b      	ldrb	r3, [r3, #0]
 800ee6a:	b25b      	sxtb	r3, r3
 800ee6c:	f023 030f 	bic.w	r3, r3, #15
 800ee70:	b25a      	sxtb	r2, r3
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	0a1b      	lsrs	r3, r3, #8
 800ee76:	b25b      	sxtb	r3, r3
 800ee78:	f003 030f 	and.w	r3, r3, #15
 800ee7c:	b25b      	sxtb	r3, r3
 800ee7e:	4313      	orrs	r3, r2
 800ee80:	b25b      	sxtb	r3, r3
 800ee82:	b2db      	uxtb	r3, r3
 800ee84:	697a      	ldr	r2, [r7, #20]
 800ee86:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	2201      	movs	r2, #1
 800ee8c:	70da      	strb	r2, [r3, #3]
			break;
 800ee8e:	e05c      	b.n	800ef4a <put_fat+0x1d4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	6a1a      	ldr	r2, [r3, #32]
 800ee94:	68bb      	ldr	r3, [r7, #8]
 800ee96:	0adb      	lsrs	r3, r3, #11
 800ee98:	4413      	add	r3, r2
 800ee9a:	4619      	mov	r1, r3
 800ee9c:	68f8      	ldr	r0, [r7, #12]
 800ee9e:	f7ff fe05 	bl	800eaac <move_window>
 800eea2:	4603      	mov	r3, r0
 800eea4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800eea6:	7ffb      	ldrb	r3, [r7, #31]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d14b      	bne.n	800ef44 <put_fat+0x1ce>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800eeb2:	68bb      	ldr	r3, [r7, #8]
 800eeb4:	0059      	lsls	r1, r3, #1
 800eeb6:	f640 73fe 	movw	r3, #4094	; 0xffe
 800eeba:	400b      	ands	r3, r1
 800eebc:	4413      	add	r3, r2
 800eebe:	687a      	ldr	r2, [r7, #4]
 800eec0:	b292      	uxth	r2, r2
 800eec2:	4611      	mov	r1, r2
 800eec4:	4618      	mov	r0, r3
 800eec6:	f7ff fb7c 	bl	800e5c2 <st_word>
			fs->wflag = 1;
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	2201      	movs	r2, #1
 800eece:	70da      	strb	r2, [r3, #3]
			break;
 800eed0:	e03b      	b.n	800ef4a <put_fat+0x1d4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	6a1a      	ldr	r2, [r3, #32]
 800eed6:	68bb      	ldr	r3, [r7, #8]
 800eed8:	0a9b      	lsrs	r3, r3, #10
 800eeda:	4413      	add	r3, r2
 800eedc:	4619      	mov	r1, r3
 800eede:	68f8      	ldr	r0, [r7, #12]
 800eee0:	f7ff fde4 	bl	800eaac <move_window>
 800eee4:	4603      	mov	r3, r0
 800eee6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800eee8:	7ffb      	ldrb	r3, [r7, #31]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d12c      	bne.n	800ef48 <put_fat+0x1d2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800eefa:	68bb      	ldr	r3, [r7, #8]
 800eefc:	0099      	lsls	r1, r3, #2
 800eefe:	f640 73fc 	movw	r3, #4092	; 0xffc
 800ef02:	400b      	ands	r3, r1
 800ef04:	4413      	add	r3, r2
 800ef06:	4618      	mov	r0, r3
 800ef08:	f7ff fb38 	bl	800e57c <ld_dword>
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ef12:	4323      	orrs	r3, r4
 800ef14:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ef1c:	68bb      	ldr	r3, [r7, #8]
 800ef1e:	0099      	lsls	r1, r3, #2
 800ef20:	f640 73fc 	movw	r3, #4092	; 0xffc
 800ef24:	400b      	ands	r3, r1
 800ef26:	4413      	add	r3, r2
 800ef28:	6879      	ldr	r1, [r7, #4]
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	f7ff fb64 	bl	800e5f8 <st_dword>
			fs->wflag = 1;
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	2201      	movs	r2, #1
 800ef34:	70da      	strb	r2, [r3, #3]
			break;
 800ef36:	e008      	b.n	800ef4a <put_fat+0x1d4>
		}
	}
 800ef38:	bf00      	nop
 800ef3a:	e006      	b.n	800ef4a <put_fat+0x1d4>
			if (res != FR_OK) break;
 800ef3c:	bf00      	nop
 800ef3e:	e004      	b.n	800ef4a <put_fat+0x1d4>
			if (res != FR_OK) break;
 800ef40:	bf00      	nop
 800ef42:	e002      	b.n	800ef4a <put_fat+0x1d4>
			if (res != FR_OK) break;
 800ef44:	bf00      	nop
 800ef46:	e000      	b.n	800ef4a <put_fat+0x1d4>
			if (res != FR_OK) break;
 800ef48:	bf00      	nop
	return res;
 800ef4a:	7ffb      	ldrb	r3, [r7, #31]
}
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	3724      	adds	r7, #36	; 0x24
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bd90      	pop	{r4, r7, pc}

0800ef54 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b088      	sub	sp, #32
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	60f8      	str	r0, [r7, #12]
 800ef5c:	60b9      	str	r1, [r7, #8]
 800ef5e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ef60:	2300      	movs	r3, #0
 800ef62:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ef6a:	68bb      	ldr	r3, [r7, #8]
 800ef6c:	2b01      	cmp	r3, #1
 800ef6e:	d904      	bls.n	800ef7a <remove_chain+0x26>
 800ef70:	69bb      	ldr	r3, [r7, #24]
 800ef72:	695b      	ldr	r3, [r3, #20]
 800ef74:	68ba      	ldr	r2, [r7, #8]
 800ef76:	429a      	cmp	r2, r3
 800ef78:	d301      	bcc.n	800ef7e <remove_chain+0x2a>
 800ef7a:	2302      	movs	r3, #2
 800ef7c:	e04b      	b.n	800f016 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d00c      	beq.n	800ef9e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ef84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ef88:	6879      	ldr	r1, [r7, #4]
 800ef8a:	69b8      	ldr	r0, [r7, #24]
 800ef8c:	f7ff fef3 	bl	800ed76 <put_fat>
 800ef90:	4603      	mov	r3, r0
 800ef92:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ef94:	7ffb      	ldrb	r3, [r7, #31]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d001      	beq.n	800ef9e <remove_chain+0x4a>
 800ef9a:	7ffb      	ldrb	r3, [r7, #31]
 800ef9c:	e03b      	b.n	800f016 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ef9e:	68b9      	ldr	r1, [r7, #8]
 800efa0:	68f8      	ldr	r0, [r7, #12]
 800efa2:	f7ff fe3e 	bl	800ec22 <get_fat>
 800efa6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800efa8:	697b      	ldr	r3, [r7, #20]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d031      	beq.n	800f012 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800efae:	697b      	ldr	r3, [r7, #20]
 800efb0:	2b01      	cmp	r3, #1
 800efb2:	d101      	bne.n	800efb8 <remove_chain+0x64>
 800efb4:	2302      	movs	r3, #2
 800efb6:	e02e      	b.n	800f016 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800efb8:	697b      	ldr	r3, [r7, #20]
 800efba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800efbe:	d101      	bne.n	800efc4 <remove_chain+0x70>
 800efc0:	2301      	movs	r3, #1
 800efc2:	e028      	b.n	800f016 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800efc4:	2200      	movs	r2, #0
 800efc6:	68b9      	ldr	r1, [r7, #8]
 800efc8:	69b8      	ldr	r0, [r7, #24]
 800efca:	f7ff fed4 	bl	800ed76 <put_fat>
 800efce:	4603      	mov	r3, r0
 800efd0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800efd2:	7ffb      	ldrb	r3, [r7, #31]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d001      	beq.n	800efdc <remove_chain+0x88>
 800efd8:	7ffb      	ldrb	r3, [r7, #31]
 800efda:	e01c      	b.n	800f016 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800efdc:	69bb      	ldr	r3, [r7, #24]
 800efde:	691a      	ldr	r2, [r3, #16]
 800efe0:	69bb      	ldr	r3, [r7, #24]
 800efe2:	695b      	ldr	r3, [r3, #20]
 800efe4:	3b02      	subs	r3, #2
 800efe6:	429a      	cmp	r2, r3
 800efe8:	d20b      	bcs.n	800f002 <remove_chain+0xae>
			fs->free_clst++;
 800efea:	69bb      	ldr	r3, [r7, #24]
 800efec:	691b      	ldr	r3, [r3, #16]
 800efee:	1c5a      	adds	r2, r3, #1
 800eff0:	69bb      	ldr	r3, [r7, #24]
 800eff2:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800eff4:	69bb      	ldr	r3, [r7, #24]
 800eff6:	791b      	ldrb	r3, [r3, #4]
 800eff8:	f043 0301 	orr.w	r3, r3, #1
 800effc:	b2da      	uxtb	r2, r3
 800effe:	69bb      	ldr	r3, [r7, #24]
 800f000:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f002:	697b      	ldr	r3, [r7, #20]
 800f004:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f006:	69bb      	ldr	r3, [r7, #24]
 800f008:	695b      	ldr	r3, [r3, #20]
 800f00a:	68ba      	ldr	r2, [r7, #8]
 800f00c:	429a      	cmp	r2, r3
 800f00e:	d3c6      	bcc.n	800ef9e <remove_chain+0x4a>
 800f010:	e000      	b.n	800f014 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f012:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f014:	2300      	movs	r3, #0
}
 800f016:	4618      	mov	r0, r3
 800f018:	3720      	adds	r7, #32
 800f01a:	46bd      	mov	sp, r7
 800f01c:	bd80      	pop	{r7, pc}

0800f01e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f01e:	b580      	push	{r7, lr}
 800f020:	b088      	sub	sp, #32
 800f022:	af00      	add	r7, sp, #0
 800f024:	6078      	str	r0, [r7, #4]
 800f026:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f02e:	683b      	ldr	r3, [r7, #0]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d10d      	bne.n	800f050 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f034:	693b      	ldr	r3, [r7, #16]
 800f036:	68db      	ldr	r3, [r3, #12]
 800f038:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f03a:	69bb      	ldr	r3, [r7, #24]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d004      	beq.n	800f04a <create_chain+0x2c>
 800f040:	693b      	ldr	r3, [r7, #16]
 800f042:	695b      	ldr	r3, [r3, #20]
 800f044:	69ba      	ldr	r2, [r7, #24]
 800f046:	429a      	cmp	r2, r3
 800f048:	d31b      	bcc.n	800f082 <create_chain+0x64>
 800f04a:	2301      	movs	r3, #1
 800f04c:	61bb      	str	r3, [r7, #24]
 800f04e:	e018      	b.n	800f082 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f050:	6839      	ldr	r1, [r7, #0]
 800f052:	6878      	ldr	r0, [r7, #4]
 800f054:	f7ff fde5 	bl	800ec22 <get_fat>
 800f058:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	2b01      	cmp	r3, #1
 800f05e:	d801      	bhi.n	800f064 <create_chain+0x46>
 800f060:	2301      	movs	r3, #1
 800f062:	e070      	b.n	800f146 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f06a:	d101      	bne.n	800f070 <create_chain+0x52>
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	e06a      	b.n	800f146 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f070:	693b      	ldr	r3, [r7, #16]
 800f072:	695b      	ldr	r3, [r3, #20]
 800f074:	68fa      	ldr	r2, [r7, #12]
 800f076:	429a      	cmp	r2, r3
 800f078:	d201      	bcs.n	800f07e <create_chain+0x60>
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	e063      	b.n	800f146 <create_chain+0x128>
		scl = clst;
 800f07e:	683b      	ldr	r3, [r7, #0]
 800f080:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f082:	69bb      	ldr	r3, [r7, #24]
 800f084:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f086:	69fb      	ldr	r3, [r7, #28]
 800f088:	3301      	adds	r3, #1
 800f08a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f08c:	693b      	ldr	r3, [r7, #16]
 800f08e:	695b      	ldr	r3, [r3, #20]
 800f090:	69fa      	ldr	r2, [r7, #28]
 800f092:	429a      	cmp	r2, r3
 800f094:	d307      	bcc.n	800f0a6 <create_chain+0x88>
				ncl = 2;
 800f096:	2302      	movs	r3, #2
 800f098:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f09a:	69fa      	ldr	r2, [r7, #28]
 800f09c:	69bb      	ldr	r3, [r7, #24]
 800f09e:	429a      	cmp	r2, r3
 800f0a0:	d901      	bls.n	800f0a6 <create_chain+0x88>
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	e04f      	b.n	800f146 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f0a6:	69f9      	ldr	r1, [r7, #28]
 800f0a8:	6878      	ldr	r0, [r7, #4]
 800f0aa:	f7ff fdba 	bl	800ec22 <get_fat>
 800f0ae:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d00e      	beq.n	800f0d4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	2b01      	cmp	r3, #1
 800f0ba:	d003      	beq.n	800f0c4 <create_chain+0xa6>
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f0c2:	d101      	bne.n	800f0c8 <create_chain+0xaa>
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	e03e      	b.n	800f146 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f0c8:	69fa      	ldr	r2, [r7, #28]
 800f0ca:	69bb      	ldr	r3, [r7, #24]
 800f0cc:	429a      	cmp	r2, r3
 800f0ce:	d1da      	bne.n	800f086 <create_chain+0x68>
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	e038      	b.n	800f146 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f0d4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f0d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f0da:	69f9      	ldr	r1, [r7, #28]
 800f0dc:	6938      	ldr	r0, [r7, #16]
 800f0de:	f7ff fe4a 	bl	800ed76 <put_fat>
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f0e6:	7dfb      	ldrb	r3, [r7, #23]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d109      	bne.n	800f100 <create_chain+0xe2>
 800f0ec:	683b      	ldr	r3, [r7, #0]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d006      	beq.n	800f100 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f0f2:	69fa      	ldr	r2, [r7, #28]
 800f0f4:	6839      	ldr	r1, [r7, #0]
 800f0f6:	6938      	ldr	r0, [r7, #16]
 800f0f8:	f7ff fe3d 	bl	800ed76 <put_fat>
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f100:	7dfb      	ldrb	r3, [r7, #23]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d116      	bne.n	800f134 <create_chain+0x116>
		fs->last_clst = ncl;
 800f106:	693b      	ldr	r3, [r7, #16]
 800f108:	69fa      	ldr	r2, [r7, #28]
 800f10a:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f10c:	693b      	ldr	r3, [r7, #16]
 800f10e:	691a      	ldr	r2, [r3, #16]
 800f110:	693b      	ldr	r3, [r7, #16]
 800f112:	695b      	ldr	r3, [r3, #20]
 800f114:	3b02      	subs	r3, #2
 800f116:	429a      	cmp	r2, r3
 800f118:	d804      	bhi.n	800f124 <create_chain+0x106>
 800f11a:	693b      	ldr	r3, [r7, #16]
 800f11c:	691b      	ldr	r3, [r3, #16]
 800f11e:	1e5a      	subs	r2, r3, #1
 800f120:	693b      	ldr	r3, [r7, #16]
 800f122:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800f124:	693b      	ldr	r3, [r7, #16]
 800f126:	791b      	ldrb	r3, [r3, #4]
 800f128:	f043 0301 	orr.w	r3, r3, #1
 800f12c:	b2da      	uxtb	r2, r3
 800f12e:	693b      	ldr	r3, [r7, #16]
 800f130:	711a      	strb	r2, [r3, #4]
 800f132:	e007      	b.n	800f144 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f134:	7dfb      	ldrb	r3, [r7, #23]
 800f136:	2b01      	cmp	r3, #1
 800f138:	d102      	bne.n	800f140 <create_chain+0x122>
 800f13a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f13e:	e000      	b.n	800f142 <create_chain+0x124>
 800f140:	2301      	movs	r3, #1
 800f142:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f144:	69fb      	ldr	r3, [r7, #28]
}
 800f146:	4618      	mov	r0, r3
 800f148:	3720      	adds	r7, #32
 800f14a:	46bd      	mov	sp, r7
 800f14c:	bd80      	pop	{r7, pc}

0800f14e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f14e:	b480      	push	{r7}
 800f150:	b087      	sub	sp, #28
 800f152:	af00      	add	r7, sp, #0
 800f154:	6078      	str	r0, [r7, #4]
 800f156:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f162:	3304      	adds	r3, #4
 800f164:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f166:	683b      	ldr	r3, [r7, #0]
 800f168:	0b1b      	lsrs	r3, r3, #12
 800f16a:	68fa      	ldr	r2, [r7, #12]
 800f16c:	8952      	ldrh	r2, [r2, #10]
 800f16e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f172:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f174:	693b      	ldr	r3, [r7, #16]
 800f176:	1d1a      	adds	r2, r3, #4
 800f178:	613a      	str	r2, [r7, #16]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f17e:	68bb      	ldr	r3, [r7, #8]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d101      	bne.n	800f188 <clmt_clust+0x3a>
 800f184:	2300      	movs	r3, #0
 800f186:	e010      	b.n	800f1aa <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800f188:	697a      	ldr	r2, [r7, #20]
 800f18a:	68bb      	ldr	r3, [r7, #8]
 800f18c:	429a      	cmp	r2, r3
 800f18e:	d307      	bcc.n	800f1a0 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800f190:	697a      	ldr	r2, [r7, #20]
 800f192:	68bb      	ldr	r3, [r7, #8]
 800f194:	1ad3      	subs	r3, r2, r3
 800f196:	617b      	str	r3, [r7, #20]
 800f198:	693b      	ldr	r3, [r7, #16]
 800f19a:	3304      	adds	r3, #4
 800f19c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f19e:	e7e9      	b.n	800f174 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800f1a0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f1a2:	693b      	ldr	r3, [r7, #16]
 800f1a4:	681a      	ldr	r2, [r3, #0]
 800f1a6:	697b      	ldr	r3, [r7, #20]
 800f1a8:	4413      	add	r3, r2
}
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	371c      	adds	r7, #28
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b4:	4770      	bx	lr

0800f1b6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f1b6:	b580      	push	{r7, lr}
 800f1b8:	b086      	sub	sp, #24
 800f1ba:	af00      	add	r7, sp, #0
 800f1bc:	6078      	str	r0, [r7, #4]
 800f1be:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f1c6:	683b      	ldr	r3, [r7, #0]
 800f1c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f1cc:	d204      	bcs.n	800f1d8 <dir_sdi+0x22>
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	f003 031f 	and.w	r3, r3, #31
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d001      	beq.n	800f1dc <dir_sdi+0x26>
		return FR_INT_ERR;
 800f1d8:	2302      	movs	r3, #2
 800f1da:	e063      	b.n	800f2a4 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	683a      	ldr	r2, [r7, #0]
 800f1e0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	689b      	ldr	r3, [r3, #8]
 800f1e6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f1e8:	697b      	ldr	r3, [r7, #20]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d106      	bne.n	800f1fc <dir_sdi+0x46>
 800f1ee:	693b      	ldr	r3, [r7, #16]
 800f1f0:	781b      	ldrb	r3, [r3, #0]
 800f1f2:	2b02      	cmp	r3, #2
 800f1f4:	d902      	bls.n	800f1fc <dir_sdi+0x46>
		clst = fs->dirbase;
 800f1f6:	693b      	ldr	r3, [r7, #16]
 800f1f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1fa:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f1fc:	697b      	ldr	r3, [r7, #20]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d10c      	bne.n	800f21c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f202:	683b      	ldr	r3, [r7, #0]
 800f204:	095b      	lsrs	r3, r3, #5
 800f206:	693a      	ldr	r2, [r7, #16]
 800f208:	8912      	ldrh	r2, [r2, #8]
 800f20a:	4293      	cmp	r3, r2
 800f20c:	d301      	bcc.n	800f212 <dir_sdi+0x5c>
 800f20e:	2302      	movs	r3, #2
 800f210:	e048      	b.n	800f2a4 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800f212:	693b      	ldr	r3, [r7, #16]
 800f214:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	61da      	str	r2, [r3, #28]
 800f21a:	e029      	b.n	800f270 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f21c:	693b      	ldr	r3, [r7, #16]
 800f21e:	895b      	ldrh	r3, [r3, #10]
 800f220:	031b      	lsls	r3, r3, #12
 800f222:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f224:	e019      	b.n	800f25a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	6979      	ldr	r1, [r7, #20]
 800f22a:	4618      	mov	r0, r3
 800f22c:	f7ff fcf9 	bl	800ec22 <get_fat>
 800f230:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f232:	697b      	ldr	r3, [r7, #20]
 800f234:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f238:	d101      	bne.n	800f23e <dir_sdi+0x88>
 800f23a:	2301      	movs	r3, #1
 800f23c:	e032      	b.n	800f2a4 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f23e:	697b      	ldr	r3, [r7, #20]
 800f240:	2b01      	cmp	r3, #1
 800f242:	d904      	bls.n	800f24e <dir_sdi+0x98>
 800f244:	693b      	ldr	r3, [r7, #16]
 800f246:	695b      	ldr	r3, [r3, #20]
 800f248:	697a      	ldr	r2, [r7, #20]
 800f24a:	429a      	cmp	r2, r3
 800f24c:	d301      	bcc.n	800f252 <dir_sdi+0x9c>
 800f24e:	2302      	movs	r3, #2
 800f250:	e028      	b.n	800f2a4 <dir_sdi+0xee>
			ofs -= csz;
 800f252:	683a      	ldr	r2, [r7, #0]
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	1ad3      	subs	r3, r2, r3
 800f258:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f25a:	683a      	ldr	r2, [r7, #0]
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	429a      	cmp	r2, r3
 800f260:	d2e1      	bcs.n	800f226 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800f262:	6979      	ldr	r1, [r7, #20]
 800f264:	6938      	ldr	r0, [r7, #16]
 800f266:	f7ff fcbd 	bl	800ebe4 <clust2sect>
 800f26a:	4602      	mov	r2, r0
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	697a      	ldr	r2, [r7, #20]
 800f274:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	69db      	ldr	r3, [r3, #28]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d101      	bne.n	800f282 <dir_sdi+0xcc>
 800f27e:	2302      	movs	r3, #2
 800f280:	e010      	b.n	800f2a4 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	69da      	ldr	r2, [r3, #28]
 800f286:	683b      	ldr	r3, [r7, #0]
 800f288:	0b1b      	lsrs	r3, r3, #12
 800f28a:	441a      	add	r2, r3
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f290:	693b      	ldr	r3, [r7, #16]
 800f292:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f296:	683b      	ldr	r3, [r7, #0]
 800f298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f29c:	441a      	add	r2, r3
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f2a2:	2300      	movs	r3, #0
}
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	3718      	adds	r7, #24
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	bd80      	pop	{r7, pc}

0800f2ac <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b086      	sub	sp, #24
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
 800f2b4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	695b      	ldr	r3, [r3, #20]
 800f2c0:	3320      	adds	r3, #32
 800f2c2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	69db      	ldr	r3, [r3, #28]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d003      	beq.n	800f2d4 <dir_next+0x28>
 800f2cc:	68bb      	ldr	r3, [r7, #8]
 800f2ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f2d2:	d301      	bcc.n	800f2d8 <dir_next+0x2c>
 800f2d4:	2304      	movs	r3, #4
 800f2d6:	e0aa      	b.n	800f42e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f2d8:	68bb      	ldr	r3, [r7, #8]
 800f2da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	f040 8098 	bne.w	800f414 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	69db      	ldr	r3, [r3, #28]
 800f2e8:	1c5a      	adds	r2, r3, #1
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	699b      	ldr	r3, [r3, #24]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d10b      	bne.n	800f30e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f2f6:	68bb      	ldr	r3, [r7, #8]
 800f2f8:	095b      	lsrs	r3, r3, #5
 800f2fa:	68fa      	ldr	r2, [r7, #12]
 800f2fc:	8912      	ldrh	r2, [r2, #8]
 800f2fe:	4293      	cmp	r3, r2
 800f300:	f0c0 8088 	bcc.w	800f414 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	2200      	movs	r2, #0
 800f308:	61da      	str	r2, [r3, #28]
 800f30a:	2304      	movs	r3, #4
 800f30c:	e08f      	b.n	800f42e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f30e:	68bb      	ldr	r3, [r7, #8]
 800f310:	0b1b      	lsrs	r3, r3, #12
 800f312:	68fa      	ldr	r2, [r7, #12]
 800f314:	8952      	ldrh	r2, [r2, #10]
 800f316:	3a01      	subs	r2, #1
 800f318:	4013      	ands	r3, r2
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d17a      	bne.n	800f414 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f31e:	687a      	ldr	r2, [r7, #4]
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	699b      	ldr	r3, [r3, #24]
 800f324:	4619      	mov	r1, r3
 800f326:	4610      	mov	r0, r2
 800f328:	f7ff fc7b 	bl	800ec22 <get_fat>
 800f32c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f32e:	697b      	ldr	r3, [r7, #20]
 800f330:	2b01      	cmp	r3, #1
 800f332:	d801      	bhi.n	800f338 <dir_next+0x8c>
 800f334:	2302      	movs	r3, #2
 800f336:	e07a      	b.n	800f42e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f338:	697b      	ldr	r3, [r7, #20]
 800f33a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f33e:	d101      	bne.n	800f344 <dir_next+0x98>
 800f340:	2301      	movs	r3, #1
 800f342:	e074      	b.n	800f42e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	695b      	ldr	r3, [r3, #20]
 800f348:	697a      	ldr	r2, [r7, #20]
 800f34a:	429a      	cmp	r2, r3
 800f34c:	d358      	bcc.n	800f400 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f34e:	683b      	ldr	r3, [r7, #0]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d104      	bne.n	800f35e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	2200      	movs	r2, #0
 800f358:	61da      	str	r2, [r3, #28]
 800f35a:	2304      	movs	r3, #4
 800f35c:	e067      	b.n	800f42e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f35e:	687a      	ldr	r2, [r7, #4]
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	699b      	ldr	r3, [r3, #24]
 800f364:	4619      	mov	r1, r3
 800f366:	4610      	mov	r0, r2
 800f368:	f7ff fe59 	bl	800f01e <create_chain>
 800f36c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f36e:	697b      	ldr	r3, [r7, #20]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d101      	bne.n	800f378 <dir_next+0xcc>
 800f374:	2307      	movs	r3, #7
 800f376:	e05a      	b.n	800f42e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f378:	697b      	ldr	r3, [r7, #20]
 800f37a:	2b01      	cmp	r3, #1
 800f37c:	d101      	bne.n	800f382 <dir_next+0xd6>
 800f37e:	2302      	movs	r3, #2
 800f380:	e055      	b.n	800f42e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f382:	697b      	ldr	r3, [r7, #20]
 800f384:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f388:	d101      	bne.n	800f38e <dir_next+0xe2>
 800f38a:	2301      	movs	r3, #1
 800f38c:	e04f      	b.n	800f42e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f38e:	68f8      	ldr	r0, [r7, #12]
 800f390:	f7ff fb48 	bl	800ea24 <sync_window>
 800f394:	4603      	mov	r3, r0
 800f396:	2b00      	cmp	r3, #0
 800f398:	d001      	beq.n	800f39e <dir_next+0xf2>
 800f39a:	2301      	movs	r3, #1
 800f39c:	e047      	b.n	800f42e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	3330      	adds	r3, #48	; 0x30
 800f3a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f3a6:	2100      	movs	r1, #0
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f7ff f972 	bl	800e692 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	613b      	str	r3, [r7, #16]
 800f3b2:	6979      	ldr	r1, [r7, #20]
 800f3b4:	68f8      	ldr	r0, [r7, #12]
 800f3b6:	f7ff fc15 	bl	800ebe4 <clust2sect>
 800f3ba:	4602      	mov	r2, r0
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	62da      	str	r2, [r3, #44]	; 0x2c
 800f3c0:	e012      	b.n	800f3e8 <dir_next+0x13c>
						fs->wflag = 1;
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	2201      	movs	r2, #1
 800f3c6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f3c8:	68f8      	ldr	r0, [r7, #12]
 800f3ca:	f7ff fb2b 	bl	800ea24 <sync_window>
 800f3ce:	4603      	mov	r3, r0
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d001      	beq.n	800f3d8 <dir_next+0x12c>
 800f3d4:	2301      	movs	r3, #1
 800f3d6:	e02a      	b.n	800f42e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f3d8:	693b      	ldr	r3, [r7, #16]
 800f3da:	3301      	adds	r3, #1
 800f3dc:	613b      	str	r3, [r7, #16]
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3e2:	1c5a      	adds	r2, r3, #1
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	62da      	str	r2, [r3, #44]	; 0x2c
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	895b      	ldrh	r3, [r3, #10]
 800f3ec:	461a      	mov	r2, r3
 800f3ee:	693b      	ldr	r3, [r7, #16]
 800f3f0:	4293      	cmp	r3, r2
 800f3f2:	d3e6      	bcc.n	800f3c2 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3f8:	693b      	ldr	r3, [r7, #16]
 800f3fa:	1ad2      	subs	r2, r2, r3
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	697a      	ldr	r2, [r7, #20]
 800f404:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f406:	6979      	ldr	r1, [r7, #20]
 800f408:	68f8      	ldr	r0, [r7, #12]
 800f40a:	f7ff fbeb 	bl	800ebe4 <clust2sect>
 800f40e:	4602      	mov	r2, r0
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	68ba      	ldr	r2, [r7, #8]
 800f418:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f420:	68bb      	ldr	r3, [r7, #8]
 800f422:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f426:	441a      	add	r2, r3
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f42c:	2300      	movs	r3, #0
}
 800f42e:	4618      	mov	r0, r3
 800f430:	3718      	adds	r7, #24
 800f432:	46bd      	mov	sp, r7
 800f434:	bd80      	pop	{r7, pc}

0800f436 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f436:	b580      	push	{r7, lr}
 800f438:	b086      	sub	sp, #24
 800f43a:	af00      	add	r7, sp, #0
 800f43c:	6078      	str	r0, [r7, #4]
 800f43e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f446:	2100      	movs	r1, #0
 800f448:	6878      	ldr	r0, [r7, #4]
 800f44a:	f7ff feb4 	bl	800f1b6 <dir_sdi>
 800f44e:	4603      	mov	r3, r0
 800f450:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f452:	7dfb      	ldrb	r3, [r7, #23]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d12b      	bne.n	800f4b0 <dir_alloc+0x7a>
		n = 0;
 800f458:	2300      	movs	r3, #0
 800f45a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	69db      	ldr	r3, [r3, #28]
 800f460:	4619      	mov	r1, r3
 800f462:	68f8      	ldr	r0, [r7, #12]
 800f464:	f7ff fb22 	bl	800eaac <move_window>
 800f468:	4603      	mov	r3, r0
 800f46a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f46c:	7dfb      	ldrb	r3, [r7, #23]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d11d      	bne.n	800f4ae <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	6a1b      	ldr	r3, [r3, #32]
 800f476:	781b      	ldrb	r3, [r3, #0]
 800f478:	2be5      	cmp	r3, #229	; 0xe5
 800f47a:	d004      	beq.n	800f486 <dir_alloc+0x50>
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	6a1b      	ldr	r3, [r3, #32]
 800f480:	781b      	ldrb	r3, [r3, #0]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d107      	bne.n	800f496 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f486:	693b      	ldr	r3, [r7, #16]
 800f488:	3301      	adds	r3, #1
 800f48a:	613b      	str	r3, [r7, #16]
 800f48c:	693a      	ldr	r2, [r7, #16]
 800f48e:	683b      	ldr	r3, [r7, #0]
 800f490:	429a      	cmp	r2, r3
 800f492:	d102      	bne.n	800f49a <dir_alloc+0x64>
 800f494:	e00c      	b.n	800f4b0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f496:	2300      	movs	r3, #0
 800f498:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f49a:	2101      	movs	r1, #1
 800f49c:	6878      	ldr	r0, [r7, #4]
 800f49e:	f7ff ff05 	bl	800f2ac <dir_next>
 800f4a2:	4603      	mov	r3, r0
 800f4a4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f4a6:	7dfb      	ldrb	r3, [r7, #23]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d0d7      	beq.n	800f45c <dir_alloc+0x26>
 800f4ac:	e000      	b.n	800f4b0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f4ae:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f4b0:	7dfb      	ldrb	r3, [r7, #23]
 800f4b2:	2b04      	cmp	r3, #4
 800f4b4:	d101      	bne.n	800f4ba <dir_alloc+0x84>
 800f4b6:	2307      	movs	r3, #7
 800f4b8:	75fb      	strb	r3, [r7, #23]
	return res;
 800f4ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800f4bc:	4618      	mov	r0, r3
 800f4be:	3718      	adds	r7, #24
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	bd80      	pop	{r7, pc}

0800f4c4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b084      	sub	sp, #16
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
 800f4cc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f4ce:	683b      	ldr	r3, [r7, #0]
 800f4d0:	331a      	adds	r3, #26
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	f7ff f83a 	bl	800e54c <ld_word>
 800f4d8:	4603      	mov	r3, r0
 800f4da:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	781b      	ldrb	r3, [r3, #0]
 800f4e0:	2b03      	cmp	r3, #3
 800f4e2:	d109      	bne.n	800f4f8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f4e4:	683b      	ldr	r3, [r7, #0]
 800f4e6:	3314      	adds	r3, #20
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	f7ff f82f 	bl	800e54c <ld_word>
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	041b      	lsls	r3, r3, #16
 800f4f2:	68fa      	ldr	r2, [r7, #12]
 800f4f4:	4313      	orrs	r3, r2
 800f4f6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f4f8:	68fb      	ldr	r3, [r7, #12]
}
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	3710      	adds	r7, #16
 800f4fe:	46bd      	mov	sp, r7
 800f500:	bd80      	pop	{r7, pc}

0800f502 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f502:	b580      	push	{r7, lr}
 800f504:	b084      	sub	sp, #16
 800f506:	af00      	add	r7, sp, #0
 800f508:	60f8      	str	r0, [r7, #12]
 800f50a:	60b9      	str	r1, [r7, #8]
 800f50c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f50e:	68bb      	ldr	r3, [r7, #8]
 800f510:	331a      	adds	r3, #26
 800f512:	687a      	ldr	r2, [r7, #4]
 800f514:	b292      	uxth	r2, r2
 800f516:	4611      	mov	r1, r2
 800f518:	4618      	mov	r0, r3
 800f51a:	f7ff f852 	bl	800e5c2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	781b      	ldrb	r3, [r3, #0]
 800f522:	2b03      	cmp	r3, #3
 800f524:	d109      	bne.n	800f53a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f526:	68bb      	ldr	r3, [r7, #8]
 800f528:	f103 0214 	add.w	r2, r3, #20
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	0c1b      	lsrs	r3, r3, #16
 800f530:	b29b      	uxth	r3, r3
 800f532:	4619      	mov	r1, r3
 800f534:	4610      	mov	r0, r2
 800f536:	f7ff f844 	bl	800e5c2 <st_word>
	}
}
 800f53a:	bf00      	nop
 800f53c:	3710      	adds	r7, #16
 800f53e:	46bd      	mov	sp, r7
 800f540:	bd80      	pop	{r7, pc}

0800f542 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800f542:	b580      	push	{r7, lr}
 800f544:	b086      	sub	sp, #24
 800f546:	af00      	add	r7, sp, #0
 800f548:	6078      	str	r0, [r7, #4]
 800f54a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800f54c:	2304      	movs	r3, #4
 800f54e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800f556:	e03c      	b.n	800f5d2 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	69db      	ldr	r3, [r3, #28]
 800f55c:	4619      	mov	r1, r3
 800f55e:	6938      	ldr	r0, [r7, #16]
 800f560:	f7ff faa4 	bl	800eaac <move_window>
 800f564:	4603      	mov	r3, r0
 800f566:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f568:	7dfb      	ldrb	r3, [r7, #23]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d136      	bne.n	800f5dc <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	6a1b      	ldr	r3, [r3, #32]
 800f572:	781b      	ldrb	r3, [r3, #0]
 800f574:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800f576:	7bfb      	ldrb	r3, [r7, #15]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d102      	bne.n	800f582 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800f57c:	2304      	movs	r3, #4
 800f57e:	75fb      	strb	r3, [r7, #23]
 800f580:	e031      	b.n	800f5e6 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	6a1b      	ldr	r3, [r3, #32]
 800f586:	330b      	adds	r3, #11
 800f588:	781b      	ldrb	r3, [r3, #0]
 800f58a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f58e:	73bb      	strb	r3, [r7, #14]
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	7bba      	ldrb	r2, [r7, #14]
 800f594:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800f596:	7bfb      	ldrb	r3, [r7, #15]
 800f598:	2be5      	cmp	r3, #229	; 0xe5
 800f59a:	d011      	beq.n	800f5c0 <dir_read+0x7e>
 800f59c:	7bfb      	ldrb	r3, [r7, #15]
 800f59e:	2b2e      	cmp	r3, #46	; 0x2e
 800f5a0:	d00e      	beq.n	800f5c0 <dir_read+0x7e>
 800f5a2:	7bbb      	ldrb	r3, [r7, #14]
 800f5a4:	2b0f      	cmp	r3, #15
 800f5a6:	d00b      	beq.n	800f5c0 <dir_read+0x7e>
 800f5a8:	7bbb      	ldrb	r3, [r7, #14]
 800f5aa:	f023 0320 	bic.w	r3, r3, #32
 800f5ae:	2b08      	cmp	r3, #8
 800f5b0:	bf0c      	ite	eq
 800f5b2:	2301      	moveq	r3, #1
 800f5b4:	2300      	movne	r3, #0
 800f5b6:	b2db      	uxtb	r3, r3
 800f5b8:	461a      	mov	r2, r3
 800f5ba:	683b      	ldr	r3, [r7, #0]
 800f5bc:	4293      	cmp	r3, r2
 800f5be:	d00f      	beq.n	800f5e0 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800f5c0:	2100      	movs	r1, #0
 800f5c2:	6878      	ldr	r0, [r7, #4]
 800f5c4:	f7ff fe72 	bl	800f2ac <dir_next>
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f5cc:	7dfb      	ldrb	r3, [r7, #23]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d108      	bne.n	800f5e4 <dir_read+0xa2>
	while (dp->sect) {
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	69db      	ldr	r3, [r3, #28]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d1be      	bne.n	800f558 <dir_read+0x16>
 800f5da:	e004      	b.n	800f5e6 <dir_read+0xa4>
		if (res != FR_OK) break;
 800f5dc:	bf00      	nop
 800f5de:	e002      	b.n	800f5e6 <dir_read+0xa4>
				break;
 800f5e0:	bf00      	nop
 800f5e2:	e000      	b.n	800f5e6 <dir_read+0xa4>
		if (res != FR_OK) break;
 800f5e4:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800f5e6:	7dfb      	ldrb	r3, [r7, #23]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d002      	beq.n	800f5f2 <dir_read+0xb0>
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	61da      	str	r2, [r3, #28]
	return res;
 800f5f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	3718      	adds	r7, #24
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	bd80      	pop	{r7, pc}

0800f5fc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b086      	sub	sp, #24
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f60a:	2100      	movs	r1, #0
 800f60c:	6878      	ldr	r0, [r7, #4]
 800f60e:	f7ff fdd2 	bl	800f1b6 <dir_sdi>
 800f612:	4603      	mov	r3, r0
 800f614:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f616:	7dfb      	ldrb	r3, [r7, #23]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d001      	beq.n	800f620 <dir_find+0x24>
 800f61c:	7dfb      	ldrb	r3, [r7, #23]
 800f61e:	e03e      	b.n	800f69e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	69db      	ldr	r3, [r3, #28]
 800f624:	4619      	mov	r1, r3
 800f626:	6938      	ldr	r0, [r7, #16]
 800f628:	f7ff fa40 	bl	800eaac <move_window>
 800f62c:	4603      	mov	r3, r0
 800f62e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f630:	7dfb      	ldrb	r3, [r7, #23]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d12f      	bne.n	800f696 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	6a1b      	ldr	r3, [r3, #32]
 800f63a:	781b      	ldrb	r3, [r3, #0]
 800f63c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f63e:	7bfb      	ldrb	r3, [r7, #15]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d102      	bne.n	800f64a <dir_find+0x4e>
 800f644:	2304      	movs	r3, #4
 800f646:	75fb      	strb	r3, [r7, #23]
 800f648:	e028      	b.n	800f69c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	6a1b      	ldr	r3, [r3, #32]
 800f64e:	330b      	adds	r3, #11
 800f650:	781b      	ldrb	r3, [r3, #0]
 800f652:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f656:	b2da      	uxtb	r2, r3
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	6a1b      	ldr	r3, [r3, #32]
 800f660:	330b      	adds	r3, #11
 800f662:	781b      	ldrb	r3, [r3, #0]
 800f664:	f003 0308 	and.w	r3, r3, #8
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d10a      	bne.n	800f682 <dir_find+0x86>
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	6a18      	ldr	r0, [r3, #32]
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	3324      	adds	r3, #36	; 0x24
 800f674:	220b      	movs	r2, #11
 800f676:	4619      	mov	r1, r3
 800f678:	f7ff f826 	bl	800e6c8 <mem_cmp>
 800f67c:	4603      	mov	r3, r0
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d00b      	beq.n	800f69a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f682:	2100      	movs	r1, #0
 800f684:	6878      	ldr	r0, [r7, #4]
 800f686:	f7ff fe11 	bl	800f2ac <dir_next>
 800f68a:	4603      	mov	r3, r0
 800f68c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f68e:	7dfb      	ldrb	r3, [r7, #23]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d0c5      	beq.n	800f620 <dir_find+0x24>
 800f694:	e002      	b.n	800f69c <dir_find+0xa0>
		if (res != FR_OK) break;
 800f696:	bf00      	nop
 800f698:	e000      	b.n	800f69c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f69a:	bf00      	nop

	return res;
 800f69c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f69e:	4618      	mov	r0, r3
 800f6a0:	3718      	adds	r7, #24
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	bd80      	pop	{r7, pc}

0800f6a6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f6a6:	b580      	push	{r7, lr}
 800f6a8:	b084      	sub	sp, #16
 800f6aa:	af00      	add	r7, sp, #0
 800f6ac:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f6b4:	2101      	movs	r1, #1
 800f6b6:	6878      	ldr	r0, [r7, #4]
 800f6b8:	f7ff febd 	bl	800f436 <dir_alloc>
 800f6bc:	4603      	mov	r3, r0
 800f6be:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f6c0:	7bfb      	ldrb	r3, [r7, #15]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d11c      	bne.n	800f700 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	69db      	ldr	r3, [r3, #28]
 800f6ca:	4619      	mov	r1, r3
 800f6cc:	68b8      	ldr	r0, [r7, #8]
 800f6ce:	f7ff f9ed 	bl	800eaac <move_window>
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f6d6:	7bfb      	ldrb	r3, [r7, #15]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d111      	bne.n	800f700 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	6a1b      	ldr	r3, [r3, #32]
 800f6e0:	2220      	movs	r2, #32
 800f6e2:	2100      	movs	r1, #0
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	f7fe ffd4 	bl	800e692 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	6a18      	ldr	r0, [r3, #32]
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	3324      	adds	r3, #36	; 0x24
 800f6f2:	220b      	movs	r2, #11
 800f6f4:	4619      	mov	r1, r3
 800f6f6:	f7fe ffab 	bl	800e650 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800f6fa:	68bb      	ldr	r3, [r7, #8]
 800f6fc:	2201      	movs	r2, #1
 800f6fe:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f700:	7bfb      	ldrb	r3, [r7, #15]
}
 800f702:	4618      	mov	r0, r3
 800f704:	3710      	adds	r7, #16
 800f706:	46bd      	mov	sp, r7
 800f708:	bd80      	pop	{r7, pc}

0800f70a <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800f70a:	b580      	push	{r7, lr}
 800f70c:	b086      	sub	sp, #24
 800f70e:	af00      	add	r7, sp, #0
 800f710:	6078      	str	r0, [r7, #4]
 800f712:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800f714:	683b      	ldr	r3, [r7, #0]
 800f716:	2200      	movs	r2, #0
 800f718:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	69db      	ldr	r3, [r3, #28]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d04e      	beq.n	800f7c0 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800f722:	2300      	movs	r3, #0
 800f724:	613b      	str	r3, [r7, #16]
 800f726:	693b      	ldr	r3, [r7, #16]
 800f728:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800f72a:	e021      	b.n	800f770 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	6a1a      	ldr	r2, [r3, #32]
 800f730:	697b      	ldr	r3, [r7, #20]
 800f732:	1c59      	adds	r1, r3, #1
 800f734:	6179      	str	r1, [r7, #20]
 800f736:	4413      	add	r3, r2
 800f738:	781b      	ldrb	r3, [r3, #0]
 800f73a:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800f73c:	7bfb      	ldrb	r3, [r7, #15]
 800f73e:	2b20      	cmp	r3, #32
 800f740:	d100      	bne.n	800f744 <get_fileinfo+0x3a>
 800f742:	e015      	b.n	800f770 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800f744:	7bfb      	ldrb	r3, [r7, #15]
 800f746:	2b05      	cmp	r3, #5
 800f748:	d101      	bne.n	800f74e <get_fileinfo+0x44>
 800f74a:	23e5      	movs	r3, #229	; 0xe5
 800f74c:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800f74e:	697b      	ldr	r3, [r7, #20]
 800f750:	2b09      	cmp	r3, #9
 800f752:	d106      	bne.n	800f762 <get_fileinfo+0x58>
 800f754:	693b      	ldr	r3, [r7, #16]
 800f756:	1c5a      	adds	r2, r3, #1
 800f758:	613a      	str	r2, [r7, #16]
 800f75a:	683a      	ldr	r2, [r7, #0]
 800f75c:	4413      	add	r3, r2
 800f75e:	222e      	movs	r2, #46	; 0x2e
 800f760:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800f762:	693b      	ldr	r3, [r7, #16]
 800f764:	1c5a      	adds	r2, r3, #1
 800f766:	613a      	str	r2, [r7, #16]
 800f768:	683a      	ldr	r2, [r7, #0]
 800f76a:	4413      	add	r3, r2
 800f76c:	7bfa      	ldrb	r2, [r7, #15]
 800f76e:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800f770:	697b      	ldr	r3, [r7, #20]
 800f772:	2b0a      	cmp	r3, #10
 800f774:	d9da      	bls.n	800f72c <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800f776:	683a      	ldr	r2, [r7, #0]
 800f778:	693b      	ldr	r3, [r7, #16]
 800f77a:	4413      	add	r3, r2
 800f77c:	3309      	adds	r3, #9
 800f77e:	2200      	movs	r2, #0
 800f780:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	6a1b      	ldr	r3, [r3, #32]
 800f786:	7ada      	ldrb	r2, [r3, #11]
 800f788:	683b      	ldr	r3, [r7, #0]
 800f78a:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	6a1b      	ldr	r3, [r3, #32]
 800f790:	331c      	adds	r3, #28
 800f792:	4618      	mov	r0, r3
 800f794:	f7fe fef2 	bl	800e57c <ld_dword>
 800f798:	4602      	mov	r2, r0
 800f79a:	683b      	ldr	r3, [r7, #0]
 800f79c:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	6a1b      	ldr	r3, [r3, #32]
 800f7a2:	3316      	adds	r3, #22
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	f7fe fee9 	bl	800e57c <ld_dword>
 800f7aa:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800f7ac:	68bb      	ldr	r3, [r7, #8]
 800f7ae:	b29a      	uxth	r2, r3
 800f7b0:	683b      	ldr	r3, [r7, #0]
 800f7b2:	80da      	strh	r2, [r3, #6]
 800f7b4:	68bb      	ldr	r3, [r7, #8]
 800f7b6:	0c1b      	lsrs	r3, r3, #16
 800f7b8:	b29a      	uxth	r2, r3
 800f7ba:	683b      	ldr	r3, [r7, #0]
 800f7bc:	809a      	strh	r2, [r3, #4]
 800f7be:	e000      	b.n	800f7c2 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800f7c0:	bf00      	nop
}
 800f7c2:	3718      	adds	r7, #24
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	bd80      	pop	{r7, pc}

0800f7c8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b088      	sub	sp, #32
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
 800f7d0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800f7d2:	683b      	ldr	r3, [r7, #0]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	60fb      	str	r3, [r7, #12]
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	3324      	adds	r3, #36	; 0x24
 800f7dc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800f7de:	220b      	movs	r2, #11
 800f7e0:	2120      	movs	r1, #32
 800f7e2:	68b8      	ldr	r0, [r7, #8]
 800f7e4:	f7fe ff55 	bl	800e692 <mem_set>
	si = i = 0; ni = 8;
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	613b      	str	r3, [r7, #16]
 800f7ec:	693b      	ldr	r3, [r7, #16]
 800f7ee:	61fb      	str	r3, [r7, #28]
 800f7f0:	2308      	movs	r3, #8
 800f7f2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800f7f4:	69fb      	ldr	r3, [r7, #28]
 800f7f6:	1c5a      	adds	r2, r3, #1
 800f7f8:	61fa      	str	r2, [r7, #28]
 800f7fa:	68fa      	ldr	r2, [r7, #12]
 800f7fc:	4413      	add	r3, r2
 800f7fe:	781b      	ldrb	r3, [r3, #0]
 800f800:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f802:	7efb      	ldrb	r3, [r7, #27]
 800f804:	2b20      	cmp	r3, #32
 800f806:	d94e      	bls.n	800f8a6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800f808:	7efb      	ldrb	r3, [r7, #27]
 800f80a:	2b2f      	cmp	r3, #47	; 0x2f
 800f80c:	d006      	beq.n	800f81c <create_name+0x54>
 800f80e:	7efb      	ldrb	r3, [r7, #27]
 800f810:	2b5c      	cmp	r3, #92	; 0x5c
 800f812:	d110      	bne.n	800f836 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f814:	e002      	b.n	800f81c <create_name+0x54>
 800f816:	69fb      	ldr	r3, [r7, #28]
 800f818:	3301      	adds	r3, #1
 800f81a:	61fb      	str	r3, [r7, #28]
 800f81c:	68fa      	ldr	r2, [r7, #12]
 800f81e:	69fb      	ldr	r3, [r7, #28]
 800f820:	4413      	add	r3, r2
 800f822:	781b      	ldrb	r3, [r3, #0]
 800f824:	2b2f      	cmp	r3, #47	; 0x2f
 800f826:	d0f6      	beq.n	800f816 <create_name+0x4e>
 800f828:	68fa      	ldr	r2, [r7, #12]
 800f82a:	69fb      	ldr	r3, [r7, #28]
 800f82c:	4413      	add	r3, r2
 800f82e:	781b      	ldrb	r3, [r3, #0]
 800f830:	2b5c      	cmp	r3, #92	; 0x5c
 800f832:	d0f0      	beq.n	800f816 <create_name+0x4e>
			break;
 800f834:	e038      	b.n	800f8a8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800f836:	7efb      	ldrb	r3, [r7, #27]
 800f838:	2b2e      	cmp	r3, #46	; 0x2e
 800f83a:	d003      	beq.n	800f844 <create_name+0x7c>
 800f83c:	693a      	ldr	r2, [r7, #16]
 800f83e:	697b      	ldr	r3, [r7, #20]
 800f840:	429a      	cmp	r2, r3
 800f842:	d30c      	bcc.n	800f85e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800f844:	697b      	ldr	r3, [r7, #20]
 800f846:	2b0b      	cmp	r3, #11
 800f848:	d002      	beq.n	800f850 <create_name+0x88>
 800f84a:	7efb      	ldrb	r3, [r7, #27]
 800f84c:	2b2e      	cmp	r3, #46	; 0x2e
 800f84e:	d001      	beq.n	800f854 <create_name+0x8c>
 800f850:	2306      	movs	r3, #6
 800f852:	e044      	b.n	800f8de <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800f854:	2308      	movs	r3, #8
 800f856:	613b      	str	r3, [r7, #16]
 800f858:	230b      	movs	r3, #11
 800f85a:	617b      	str	r3, [r7, #20]
			continue;
 800f85c:	e022      	b.n	800f8a4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800f85e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f862:	2b00      	cmp	r3, #0
 800f864:	da04      	bge.n	800f870 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800f866:	7efb      	ldrb	r3, [r7, #27]
 800f868:	3b80      	subs	r3, #128	; 0x80
 800f86a:	4a1f      	ldr	r2, [pc, #124]	; (800f8e8 <create_name+0x120>)
 800f86c:	5cd3      	ldrb	r3, [r2, r3]
 800f86e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800f870:	7efb      	ldrb	r3, [r7, #27]
 800f872:	4619      	mov	r1, r3
 800f874:	481d      	ldr	r0, [pc, #116]	; (800f8ec <create_name+0x124>)
 800f876:	f7fe ff4e 	bl	800e716 <chk_chr>
 800f87a:	4603      	mov	r3, r0
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d001      	beq.n	800f884 <create_name+0xbc>
 800f880:	2306      	movs	r3, #6
 800f882:	e02c      	b.n	800f8de <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800f884:	7efb      	ldrb	r3, [r7, #27]
 800f886:	2b60      	cmp	r3, #96	; 0x60
 800f888:	d905      	bls.n	800f896 <create_name+0xce>
 800f88a:	7efb      	ldrb	r3, [r7, #27]
 800f88c:	2b7a      	cmp	r3, #122	; 0x7a
 800f88e:	d802      	bhi.n	800f896 <create_name+0xce>
 800f890:	7efb      	ldrb	r3, [r7, #27]
 800f892:	3b20      	subs	r3, #32
 800f894:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800f896:	693b      	ldr	r3, [r7, #16]
 800f898:	1c5a      	adds	r2, r3, #1
 800f89a:	613a      	str	r2, [r7, #16]
 800f89c:	68ba      	ldr	r2, [r7, #8]
 800f89e:	4413      	add	r3, r2
 800f8a0:	7efa      	ldrb	r2, [r7, #27]
 800f8a2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800f8a4:	e7a6      	b.n	800f7f4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f8a6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800f8a8:	68fa      	ldr	r2, [r7, #12]
 800f8aa:	69fb      	ldr	r3, [r7, #28]
 800f8ac:	441a      	add	r2, r3
 800f8ae:	683b      	ldr	r3, [r7, #0]
 800f8b0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800f8b2:	693b      	ldr	r3, [r7, #16]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d101      	bne.n	800f8bc <create_name+0xf4>
 800f8b8:	2306      	movs	r3, #6
 800f8ba:	e010      	b.n	800f8de <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f8bc:	68bb      	ldr	r3, [r7, #8]
 800f8be:	781b      	ldrb	r3, [r3, #0]
 800f8c0:	2be5      	cmp	r3, #229	; 0xe5
 800f8c2:	d102      	bne.n	800f8ca <create_name+0x102>
 800f8c4:	68bb      	ldr	r3, [r7, #8]
 800f8c6:	2205      	movs	r2, #5
 800f8c8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f8ca:	7efb      	ldrb	r3, [r7, #27]
 800f8cc:	2b20      	cmp	r3, #32
 800f8ce:	d801      	bhi.n	800f8d4 <create_name+0x10c>
 800f8d0:	2204      	movs	r2, #4
 800f8d2:	e000      	b.n	800f8d6 <create_name+0x10e>
 800f8d4:	2200      	movs	r2, #0
 800f8d6:	68bb      	ldr	r3, [r7, #8]
 800f8d8:	330b      	adds	r3, #11
 800f8da:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800f8dc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800f8de:	4618      	mov	r0, r3
 800f8e0:	3720      	adds	r7, #32
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	bd80      	pop	{r7, pc}
 800f8e6:	bf00      	nop
 800f8e8:	08017644 	.word	0x08017644
 800f8ec:	0801680c 	.word	0x0801680c

0800f8f0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b086      	sub	sp, #24
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
 800f8f8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f8fe:	693b      	ldr	r3, [r7, #16]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f904:	e002      	b.n	800f90c <follow_path+0x1c>
 800f906:	683b      	ldr	r3, [r7, #0]
 800f908:	3301      	adds	r3, #1
 800f90a:	603b      	str	r3, [r7, #0]
 800f90c:	683b      	ldr	r3, [r7, #0]
 800f90e:	781b      	ldrb	r3, [r3, #0]
 800f910:	2b2f      	cmp	r3, #47	; 0x2f
 800f912:	d0f8      	beq.n	800f906 <follow_path+0x16>
 800f914:	683b      	ldr	r3, [r7, #0]
 800f916:	781b      	ldrb	r3, [r3, #0]
 800f918:	2b5c      	cmp	r3, #92	; 0x5c
 800f91a:	d0f4      	beq.n	800f906 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f91c:	693b      	ldr	r3, [r7, #16]
 800f91e:	2200      	movs	r2, #0
 800f920:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f922:	683b      	ldr	r3, [r7, #0]
 800f924:	781b      	ldrb	r3, [r3, #0]
 800f926:	2b1f      	cmp	r3, #31
 800f928:	d80a      	bhi.n	800f940 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	2280      	movs	r2, #128	; 0x80
 800f92e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f932:	2100      	movs	r1, #0
 800f934:	6878      	ldr	r0, [r7, #4]
 800f936:	f7ff fc3e 	bl	800f1b6 <dir_sdi>
 800f93a:	4603      	mov	r3, r0
 800f93c:	75fb      	strb	r3, [r7, #23]
 800f93e:	e043      	b.n	800f9c8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f940:	463b      	mov	r3, r7
 800f942:	4619      	mov	r1, r3
 800f944:	6878      	ldr	r0, [r7, #4]
 800f946:	f7ff ff3f 	bl	800f7c8 <create_name>
 800f94a:	4603      	mov	r3, r0
 800f94c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f94e:	7dfb      	ldrb	r3, [r7, #23]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d134      	bne.n	800f9be <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f954:	6878      	ldr	r0, [r7, #4]
 800f956:	f7ff fe51 	bl	800f5fc <dir_find>
 800f95a:	4603      	mov	r3, r0
 800f95c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f964:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f966:	7dfb      	ldrb	r3, [r7, #23]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d00a      	beq.n	800f982 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f96c:	7dfb      	ldrb	r3, [r7, #23]
 800f96e:	2b04      	cmp	r3, #4
 800f970:	d127      	bne.n	800f9c2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f972:	7afb      	ldrb	r3, [r7, #11]
 800f974:	f003 0304 	and.w	r3, r3, #4
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d122      	bne.n	800f9c2 <follow_path+0xd2>
 800f97c:	2305      	movs	r3, #5
 800f97e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f980:	e01f      	b.n	800f9c2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f982:	7afb      	ldrb	r3, [r7, #11]
 800f984:	f003 0304 	and.w	r3, r3, #4
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d11c      	bne.n	800f9c6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f98c:	693b      	ldr	r3, [r7, #16]
 800f98e:	799b      	ldrb	r3, [r3, #6]
 800f990:	f003 0310 	and.w	r3, r3, #16
 800f994:	2b00      	cmp	r3, #0
 800f996:	d102      	bne.n	800f99e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f998:	2305      	movs	r3, #5
 800f99a:	75fb      	strb	r3, [r7, #23]
 800f99c:	e014      	b.n	800f9c8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	695b      	ldr	r3, [r3, #20]
 800f9a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f9ac:	4413      	add	r3, r2
 800f9ae:	4619      	mov	r1, r3
 800f9b0:	68f8      	ldr	r0, [r7, #12]
 800f9b2:	f7ff fd87 	bl	800f4c4 <ld_clust>
 800f9b6:	4602      	mov	r2, r0
 800f9b8:	693b      	ldr	r3, [r7, #16]
 800f9ba:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f9bc:	e7c0      	b.n	800f940 <follow_path+0x50>
			if (res != FR_OK) break;
 800f9be:	bf00      	nop
 800f9c0:	e002      	b.n	800f9c8 <follow_path+0xd8>
				break;
 800f9c2:	bf00      	nop
 800f9c4:	e000      	b.n	800f9c8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f9c6:	bf00      	nop
			}
		}
	}

	return res;
 800f9c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	3718      	adds	r7, #24
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	bd80      	pop	{r7, pc}

0800f9d2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f9d2:	b480      	push	{r7}
 800f9d4:	b087      	sub	sp, #28
 800f9d6:	af00      	add	r7, sp, #0
 800f9d8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f9da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f9de:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d031      	beq.n	800fa4c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	617b      	str	r3, [r7, #20]
 800f9ee:	e002      	b.n	800f9f6 <get_ldnumber+0x24>
 800f9f0:	697b      	ldr	r3, [r7, #20]
 800f9f2:	3301      	adds	r3, #1
 800f9f4:	617b      	str	r3, [r7, #20]
 800f9f6:	697b      	ldr	r3, [r7, #20]
 800f9f8:	781b      	ldrb	r3, [r3, #0]
 800f9fa:	2b20      	cmp	r3, #32
 800f9fc:	d903      	bls.n	800fa06 <get_ldnumber+0x34>
 800f9fe:	697b      	ldr	r3, [r7, #20]
 800fa00:	781b      	ldrb	r3, [r3, #0]
 800fa02:	2b3a      	cmp	r3, #58	; 0x3a
 800fa04:	d1f4      	bne.n	800f9f0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800fa06:	697b      	ldr	r3, [r7, #20]
 800fa08:	781b      	ldrb	r3, [r3, #0]
 800fa0a:	2b3a      	cmp	r3, #58	; 0x3a
 800fa0c:	d11c      	bne.n	800fa48 <get_ldnumber+0x76>
			tp = *path;
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	1c5a      	adds	r2, r3, #1
 800fa18:	60fa      	str	r2, [r7, #12]
 800fa1a:	781b      	ldrb	r3, [r3, #0]
 800fa1c:	3b30      	subs	r3, #48	; 0x30
 800fa1e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800fa20:	68bb      	ldr	r3, [r7, #8]
 800fa22:	2b09      	cmp	r3, #9
 800fa24:	d80e      	bhi.n	800fa44 <get_ldnumber+0x72>
 800fa26:	68fa      	ldr	r2, [r7, #12]
 800fa28:	697b      	ldr	r3, [r7, #20]
 800fa2a:	429a      	cmp	r2, r3
 800fa2c:	d10a      	bne.n	800fa44 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fa2e:	68bb      	ldr	r3, [r7, #8]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d107      	bne.n	800fa44 <get_ldnumber+0x72>
					vol = (int)i;
 800fa34:	68bb      	ldr	r3, [r7, #8]
 800fa36:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800fa38:	697b      	ldr	r3, [r7, #20]
 800fa3a:	3301      	adds	r3, #1
 800fa3c:	617b      	str	r3, [r7, #20]
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	697a      	ldr	r2, [r7, #20]
 800fa42:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800fa44:	693b      	ldr	r3, [r7, #16]
 800fa46:	e002      	b.n	800fa4e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fa48:	2300      	movs	r3, #0
 800fa4a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800fa4c:	693b      	ldr	r3, [r7, #16]
}
 800fa4e:	4618      	mov	r0, r3
 800fa50:	371c      	adds	r7, #28
 800fa52:	46bd      	mov	sp, r7
 800fa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa58:	4770      	bx	lr
	...

0800fa5c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800fa5c:	b580      	push	{r7, lr}
 800fa5e:	b082      	sub	sp, #8
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
 800fa64:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	2200      	movs	r2, #0
 800fa6a:	70da      	strb	r2, [r3, #3]
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fa72:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800fa74:	6839      	ldr	r1, [r7, #0]
 800fa76:	6878      	ldr	r0, [r7, #4]
 800fa78:	f7ff f818 	bl	800eaac <move_window>
 800fa7c:	4603      	mov	r3, r0
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d001      	beq.n	800fa86 <check_fs+0x2a>
 800fa82:	2304      	movs	r3, #4
 800fa84:	e038      	b.n	800faf8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	3330      	adds	r3, #48	; 0x30
 800fa8a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fa8e:	4618      	mov	r0, r3
 800fa90:	f7fe fd5c 	bl	800e54c <ld_word>
 800fa94:	4603      	mov	r3, r0
 800fa96:	461a      	mov	r2, r3
 800fa98:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fa9c:	429a      	cmp	r2, r3
 800fa9e:	d001      	beq.n	800faa4 <check_fs+0x48>
 800faa0:	2303      	movs	r3, #3
 800faa2:	e029      	b.n	800faf8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800faaa:	2be9      	cmp	r3, #233	; 0xe9
 800faac:	d009      	beq.n	800fac2 <check_fs+0x66>
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fab4:	2beb      	cmp	r3, #235	; 0xeb
 800fab6:	d11e      	bne.n	800faf6 <check_fs+0x9a>
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800fabe:	2b90      	cmp	r3, #144	; 0x90
 800fac0:	d119      	bne.n	800faf6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	3330      	adds	r3, #48	; 0x30
 800fac6:	3336      	adds	r3, #54	; 0x36
 800fac8:	4618      	mov	r0, r3
 800faca:	f7fe fd57 	bl	800e57c <ld_dword>
 800face:	4603      	mov	r3, r0
 800fad0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fad4:	4a0a      	ldr	r2, [pc, #40]	; (800fb00 <check_fs+0xa4>)
 800fad6:	4293      	cmp	r3, r2
 800fad8:	d101      	bne.n	800fade <check_fs+0x82>
 800fada:	2300      	movs	r3, #0
 800fadc:	e00c      	b.n	800faf8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	3330      	adds	r3, #48	; 0x30
 800fae2:	3352      	adds	r3, #82	; 0x52
 800fae4:	4618      	mov	r0, r3
 800fae6:	f7fe fd49 	bl	800e57c <ld_dword>
 800faea:	4603      	mov	r3, r0
 800faec:	4a05      	ldr	r2, [pc, #20]	; (800fb04 <check_fs+0xa8>)
 800faee:	4293      	cmp	r3, r2
 800faf0:	d101      	bne.n	800faf6 <check_fs+0x9a>
 800faf2:	2300      	movs	r3, #0
 800faf4:	e000      	b.n	800faf8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800faf6:	2302      	movs	r3, #2
}
 800faf8:	4618      	mov	r0, r3
 800fafa:	3708      	adds	r7, #8
 800fafc:	46bd      	mov	sp, r7
 800fafe:	bd80      	pop	{r7, pc}
 800fb00:	00544146 	.word	0x00544146
 800fb04:	33544146 	.word	0x33544146

0800fb08 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b096      	sub	sp, #88	; 0x58
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	60f8      	str	r0, [r7, #12]
 800fb10:	60b9      	str	r1, [r7, #8]
 800fb12:	4613      	mov	r3, r2
 800fb14:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800fb16:	68bb      	ldr	r3, [r7, #8]
 800fb18:	2200      	movs	r2, #0
 800fb1a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800fb1c:	68f8      	ldr	r0, [r7, #12]
 800fb1e:	f7ff ff58 	bl	800f9d2 <get_ldnumber>
 800fb22:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fb24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	da01      	bge.n	800fb2e <find_volume+0x26>
 800fb2a:	230b      	movs	r3, #11
 800fb2c:	e22d      	b.n	800ff8a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fb2e:	4aa1      	ldr	r2, [pc, #644]	; (800fdb4 <find_volume+0x2ac>)
 800fb30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb36:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fb38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d101      	bne.n	800fb42 <find_volume+0x3a>
 800fb3e:	230c      	movs	r3, #12
 800fb40:	e223      	b.n	800ff8a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800fb42:	68bb      	ldr	r3, [r7, #8]
 800fb44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb46:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800fb48:	79fb      	ldrb	r3, [r7, #7]
 800fb4a:	f023 0301 	bic.w	r3, r3, #1
 800fb4e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800fb50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb52:	781b      	ldrb	r3, [r3, #0]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d01a      	beq.n	800fb8e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800fb58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb5a:	785b      	ldrb	r3, [r3, #1]
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	f7fe fc57 	bl	800e410 <disk_status>
 800fb62:	4603      	mov	r3, r0
 800fb64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fb68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb6c:	f003 0301 	and.w	r3, r3, #1
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d10c      	bne.n	800fb8e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800fb74:	79fb      	ldrb	r3, [r7, #7]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d007      	beq.n	800fb8a <find_volume+0x82>
 800fb7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb7e:	f003 0304 	and.w	r3, r3, #4
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d001      	beq.n	800fb8a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800fb86:	230a      	movs	r3, #10
 800fb88:	e1ff      	b.n	800ff8a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	e1fd      	b.n	800ff8a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800fb8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb90:	2200      	movs	r2, #0
 800fb92:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800fb94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb96:	b2da      	uxtb	r2, r3
 800fb98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb9a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fb9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb9e:	785b      	ldrb	r3, [r3, #1]
 800fba0:	4618      	mov	r0, r3
 800fba2:	f7fe fc4f 	bl	800e444 <disk_initialize>
 800fba6:	4603      	mov	r3, r0
 800fba8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800fbac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fbb0:	f003 0301 	and.w	r3, r3, #1
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d001      	beq.n	800fbbc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800fbb8:	2303      	movs	r3, #3
 800fbba:	e1e6      	b.n	800ff8a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800fbbc:	79fb      	ldrb	r3, [r7, #7]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d007      	beq.n	800fbd2 <find_volume+0xca>
 800fbc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fbc6:	f003 0304 	and.w	r3, r3, #4
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d001      	beq.n	800fbd2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800fbce:	230a      	movs	r3, #10
 800fbd0:	e1db      	b.n	800ff8a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800fbd6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fbd8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fbda:	f7ff ff3f 	bl	800fa5c <check_fs>
 800fbde:	4603      	mov	r3, r0
 800fbe0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800fbe4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fbe8:	2b02      	cmp	r3, #2
 800fbea:	d149      	bne.n	800fc80 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fbec:	2300      	movs	r3, #0
 800fbee:	643b      	str	r3, [r7, #64]	; 0x40
 800fbf0:	e01e      	b.n	800fc30 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800fbf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbf4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fbf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbfa:	011b      	lsls	r3, r3, #4
 800fbfc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800fc00:	4413      	add	r3, r2
 800fc02:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800fc04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc06:	3304      	adds	r3, #4
 800fc08:	781b      	ldrb	r3, [r3, #0]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d006      	beq.n	800fc1c <find_volume+0x114>
 800fc0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc10:	3308      	adds	r3, #8
 800fc12:	4618      	mov	r0, r3
 800fc14:	f7fe fcb2 	bl	800e57c <ld_dword>
 800fc18:	4602      	mov	r2, r0
 800fc1a:	e000      	b.n	800fc1e <find_volume+0x116>
 800fc1c:	2200      	movs	r2, #0
 800fc1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc20:	009b      	lsls	r3, r3, #2
 800fc22:	3358      	adds	r3, #88	; 0x58
 800fc24:	443b      	add	r3, r7
 800fc26:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fc2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc2c:	3301      	adds	r3, #1
 800fc2e:	643b      	str	r3, [r7, #64]	; 0x40
 800fc30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc32:	2b03      	cmp	r3, #3
 800fc34:	d9dd      	bls.n	800fbf2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800fc36:	2300      	movs	r3, #0
 800fc38:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800fc3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d002      	beq.n	800fc46 <find_volume+0x13e>
 800fc40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc42:	3b01      	subs	r3, #1
 800fc44:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800fc46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc48:	009b      	lsls	r3, r3, #2
 800fc4a:	3358      	adds	r3, #88	; 0x58
 800fc4c:	443b      	add	r3, r7
 800fc4e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800fc52:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800fc54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d005      	beq.n	800fc66 <find_volume+0x15e>
 800fc5a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fc5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fc5e:	f7ff fefd 	bl	800fa5c <check_fs>
 800fc62:	4603      	mov	r3, r0
 800fc64:	e000      	b.n	800fc68 <find_volume+0x160>
 800fc66:	2303      	movs	r3, #3
 800fc68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800fc6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fc70:	2b01      	cmp	r3, #1
 800fc72:	d905      	bls.n	800fc80 <find_volume+0x178>
 800fc74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc76:	3301      	adds	r3, #1
 800fc78:	643b      	str	r3, [r7, #64]	; 0x40
 800fc7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc7c:	2b03      	cmp	r3, #3
 800fc7e:	d9e2      	bls.n	800fc46 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800fc80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fc84:	2b04      	cmp	r3, #4
 800fc86:	d101      	bne.n	800fc8c <find_volume+0x184>
 800fc88:	2301      	movs	r3, #1
 800fc8a:	e17e      	b.n	800ff8a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800fc8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fc90:	2b01      	cmp	r3, #1
 800fc92:	d901      	bls.n	800fc98 <find_volume+0x190>
 800fc94:	230d      	movs	r3, #13
 800fc96:	e178      	b.n	800ff8a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800fc98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc9a:	3330      	adds	r3, #48	; 0x30
 800fc9c:	330b      	adds	r3, #11
 800fc9e:	4618      	mov	r0, r3
 800fca0:	f7fe fc54 	bl	800e54c <ld_word>
 800fca4:	4603      	mov	r3, r0
 800fca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fcaa:	d001      	beq.n	800fcb0 <find_volume+0x1a8>
 800fcac:	230d      	movs	r3, #13
 800fcae:	e16c      	b.n	800ff8a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800fcb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcb2:	3330      	adds	r3, #48	; 0x30
 800fcb4:	3316      	adds	r3, #22
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	f7fe fc48 	bl	800e54c <ld_word>
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800fcc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d106      	bne.n	800fcd4 <find_volume+0x1cc>
 800fcc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcc8:	3330      	adds	r3, #48	; 0x30
 800fcca:	3324      	adds	r3, #36	; 0x24
 800fccc:	4618      	mov	r0, r3
 800fcce:	f7fe fc55 	bl	800e57c <ld_dword>
 800fcd2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800fcd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fcd8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800fcda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcdc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800fce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fce2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800fce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fce6:	789b      	ldrb	r3, [r3, #2]
 800fce8:	2b01      	cmp	r3, #1
 800fcea:	d005      	beq.n	800fcf8 <find_volume+0x1f0>
 800fcec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcee:	789b      	ldrb	r3, [r3, #2]
 800fcf0:	2b02      	cmp	r3, #2
 800fcf2:	d001      	beq.n	800fcf8 <find_volume+0x1f0>
 800fcf4:	230d      	movs	r3, #13
 800fcf6:	e148      	b.n	800ff8a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800fcf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcfa:	789b      	ldrb	r3, [r3, #2]
 800fcfc:	461a      	mov	r2, r3
 800fcfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd00:	fb02 f303 	mul.w	r3, r2, r3
 800fd04:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800fd06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fd0c:	b29a      	uxth	r2, r3
 800fd0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd10:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800fd12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd14:	895b      	ldrh	r3, [r3, #10]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d008      	beq.n	800fd2c <find_volume+0x224>
 800fd1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd1c:	895b      	ldrh	r3, [r3, #10]
 800fd1e:	461a      	mov	r2, r3
 800fd20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd22:	895b      	ldrh	r3, [r3, #10]
 800fd24:	3b01      	subs	r3, #1
 800fd26:	4013      	ands	r3, r2
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d001      	beq.n	800fd30 <find_volume+0x228>
 800fd2c:	230d      	movs	r3, #13
 800fd2e:	e12c      	b.n	800ff8a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800fd30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd32:	3330      	adds	r3, #48	; 0x30
 800fd34:	3311      	adds	r3, #17
 800fd36:	4618      	mov	r0, r3
 800fd38:	f7fe fc08 	bl	800e54c <ld_word>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	461a      	mov	r2, r3
 800fd40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd42:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800fd44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd46:	891b      	ldrh	r3, [r3, #8]
 800fd48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fd4c:	b29b      	uxth	r3, r3
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d001      	beq.n	800fd56 <find_volume+0x24e>
 800fd52:	230d      	movs	r3, #13
 800fd54:	e119      	b.n	800ff8a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800fd56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd58:	3330      	adds	r3, #48	; 0x30
 800fd5a:	3313      	adds	r3, #19
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	f7fe fbf5 	bl	800e54c <ld_word>
 800fd62:	4603      	mov	r3, r0
 800fd64:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800fd66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d106      	bne.n	800fd7a <find_volume+0x272>
 800fd6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd6e:	3330      	adds	r3, #48	; 0x30
 800fd70:	3320      	adds	r3, #32
 800fd72:	4618      	mov	r0, r3
 800fd74:	f7fe fc02 	bl	800e57c <ld_dword>
 800fd78:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800fd7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd7c:	3330      	adds	r3, #48	; 0x30
 800fd7e:	330e      	adds	r3, #14
 800fd80:	4618      	mov	r0, r3
 800fd82:	f7fe fbe3 	bl	800e54c <ld_word>
 800fd86:	4603      	mov	r3, r0
 800fd88:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800fd8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d101      	bne.n	800fd94 <find_volume+0x28c>
 800fd90:	230d      	movs	r3, #13
 800fd92:	e0fa      	b.n	800ff8a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800fd94:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fd96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd98:	4413      	add	r3, r2
 800fd9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd9c:	8912      	ldrh	r2, [r2, #8]
 800fd9e:	09d2      	lsrs	r2, r2, #7
 800fda0:	b292      	uxth	r2, r2
 800fda2:	4413      	add	r3, r2
 800fda4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800fda6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdaa:	429a      	cmp	r2, r3
 800fdac:	d204      	bcs.n	800fdb8 <find_volume+0x2b0>
 800fdae:	230d      	movs	r3, #13
 800fdb0:	e0eb      	b.n	800ff8a <find_volume+0x482>
 800fdb2:	bf00      	nop
 800fdb4:	20003e3c 	.word	0x20003e3c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800fdb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fdba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdbc:	1ad3      	subs	r3, r2, r3
 800fdbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fdc0:	8952      	ldrh	r2, [r2, #10]
 800fdc2:	fbb3 f3f2 	udiv	r3, r3, r2
 800fdc6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800fdc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d101      	bne.n	800fdd2 <find_volume+0x2ca>
 800fdce:	230d      	movs	r3, #13
 800fdd0:	e0db      	b.n	800ff8a <find_volume+0x482>
		fmt = FS_FAT32;
 800fdd2:	2303      	movs	r3, #3
 800fdd4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800fdd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdda:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fdde:	4293      	cmp	r3, r2
 800fde0:	d802      	bhi.n	800fde8 <find_volume+0x2e0>
 800fde2:	2302      	movs	r3, #2
 800fde4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800fde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdea:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fdee:	4293      	cmp	r3, r2
 800fdf0:	d802      	bhi.n	800fdf8 <find_volume+0x2f0>
 800fdf2:	2301      	movs	r3, #1
 800fdf4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800fdf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdfa:	1c9a      	adds	r2, r3, #2
 800fdfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdfe:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800fe00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe02:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fe04:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800fe06:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fe08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe0a:	441a      	add	r2, r3
 800fe0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe0e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800fe10:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fe12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe14:	441a      	add	r2, r3
 800fe16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe18:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800fe1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fe1e:	2b03      	cmp	r3, #3
 800fe20:	d11e      	bne.n	800fe60 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800fe22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe24:	3330      	adds	r3, #48	; 0x30
 800fe26:	332a      	adds	r3, #42	; 0x2a
 800fe28:	4618      	mov	r0, r3
 800fe2a:	f7fe fb8f 	bl	800e54c <ld_word>
 800fe2e:	4603      	mov	r3, r0
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d001      	beq.n	800fe38 <find_volume+0x330>
 800fe34:	230d      	movs	r3, #13
 800fe36:	e0a8      	b.n	800ff8a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800fe38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe3a:	891b      	ldrh	r3, [r3, #8]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d001      	beq.n	800fe44 <find_volume+0x33c>
 800fe40:	230d      	movs	r3, #13
 800fe42:	e0a2      	b.n	800ff8a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800fe44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe46:	3330      	adds	r3, #48	; 0x30
 800fe48:	332c      	adds	r3, #44	; 0x2c
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	f7fe fb96 	bl	800e57c <ld_dword>
 800fe50:	4602      	mov	r2, r0
 800fe52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe54:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800fe56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe58:	695b      	ldr	r3, [r3, #20]
 800fe5a:	009b      	lsls	r3, r3, #2
 800fe5c:	647b      	str	r3, [r7, #68]	; 0x44
 800fe5e:	e01f      	b.n	800fea0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800fe60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe62:	891b      	ldrh	r3, [r3, #8]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d101      	bne.n	800fe6c <find_volume+0x364>
 800fe68:	230d      	movs	r3, #13
 800fe6a:	e08e      	b.n	800ff8a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800fe6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe6e:	6a1a      	ldr	r2, [r3, #32]
 800fe70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe72:	441a      	add	r2, r3
 800fe74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe76:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800fe78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fe7c:	2b02      	cmp	r3, #2
 800fe7e:	d103      	bne.n	800fe88 <find_volume+0x380>
 800fe80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe82:	695b      	ldr	r3, [r3, #20]
 800fe84:	005b      	lsls	r3, r3, #1
 800fe86:	e00a      	b.n	800fe9e <find_volume+0x396>
 800fe88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe8a:	695a      	ldr	r2, [r3, #20]
 800fe8c:	4613      	mov	r3, r2
 800fe8e:	005b      	lsls	r3, r3, #1
 800fe90:	4413      	add	r3, r2
 800fe92:	085a      	lsrs	r2, r3, #1
 800fe94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe96:	695b      	ldr	r3, [r3, #20]
 800fe98:	f003 0301 	and.w	r3, r3, #1
 800fe9c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800fe9e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800fea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fea2:	699a      	ldr	r2, [r3, #24]
 800fea4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fea6:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800feaa:	0b1b      	lsrs	r3, r3, #12
 800feac:	429a      	cmp	r2, r3
 800feae:	d201      	bcs.n	800feb4 <find_volume+0x3ac>
 800feb0:	230d      	movs	r3, #13
 800feb2:	e06a      	b.n	800ff8a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800feb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800feba:	611a      	str	r2, [r3, #16]
 800febc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800febe:	691a      	ldr	r2, [r3, #16]
 800fec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fec2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800fec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fec6:	2280      	movs	r2, #128	; 0x80
 800fec8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800feca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fece:	2b03      	cmp	r3, #3
 800fed0:	d149      	bne.n	800ff66 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800fed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fed4:	3330      	adds	r3, #48	; 0x30
 800fed6:	3330      	adds	r3, #48	; 0x30
 800fed8:	4618      	mov	r0, r3
 800feda:	f7fe fb37 	bl	800e54c <ld_word>
 800fede:	4603      	mov	r3, r0
 800fee0:	2b01      	cmp	r3, #1
 800fee2:	d140      	bne.n	800ff66 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800fee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fee6:	3301      	adds	r3, #1
 800fee8:	4619      	mov	r1, r3
 800feea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800feec:	f7fe fdde 	bl	800eaac <move_window>
 800fef0:	4603      	mov	r3, r0
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d137      	bne.n	800ff66 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800fef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fef8:	2200      	movs	r2, #0
 800fefa:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800fefc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fefe:	3330      	adds	r3, #48	; 0x30
 800ff00:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ff04:	4618      	mov	r0, r3
 800ff06:	f7fe fb21 	bl	800e54c <ld_word>
 800ff0a:	4603      	mov	r3, r0
 800ff0c:	461a      	mov	r2, r3
 800ff0e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ff12:	429a      	cmp	r2, r3
 800ff14:	d127      	bne.n	800ff66 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ff16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff18:	3330      	adds	r3, #48	; 0x30
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	f7fe fb2e 	bl	800e57c <ld_dword>
 800ff20:	4603      	mov	r3, r0
 800ff22:	4a1c      	ldr	r2, [pc, #112]	; (800ff94 <find_volume+0x48c>)
 800ff24:	4293      	cmp	r3, r2
 800ff26:	d11e      	bne.n	800ff66 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ff28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff2a:	3330      	adds	r3, #48	; 0x30
 800ff2c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ff30:	4618      	mov	r0, r3
 800ff32:	f7fe fb23 	bl	800e57c <ld_dword>
 800ff36:	4603      	mov	r3, r0
 800ff38:	4a17      	ldr	r2, [pc, #92]	; (800ff98 <find_volume+0x490>)
 800ff3a:	4293      	cmp	r3, r2
 800ff3c:	d113      	bne.n	800ff66 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ff3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff40:	3330      	adds	r3, #48	; 0x30
 800ff42:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ff46:	4618      	mov	r0, r3
 800ff48:	f7fe fb18 	bl	800e57c <ld_dword>
 800ff4c:	4602      	mov	r2, r0
 800ff4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff50:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ff52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff54:	3330      	adds	r3, #48	; 0x30
 800ff56:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	f7fe fb0e 	bl	800e57c <ld_dword>
 800ff60:	4602      	mov	r2, r0
 800ff62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff64:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ff66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff68:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ff6c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ff6e:	4b0b      	ldr	r3, [pc, #44]	; (800ff9c <find_volume+0x494>)
 800ff70:	881b      	ldrh	r3, [r3, #0]
 800ff72:	3301      	adds	r3, #1
 800ff74:	b29a      	uxth	r2, r3
 800ff76:	4b09      	ldr	r3, [pc, #36]	; (800ff9c <find_volume+0x494>)
 800ff78:	801a      	strh	r2, [r3, #0]
 800ff7a:	4b08      	ldr	r3, [pc, #32]	; (800ff9c <find_volume+0x494>)
 800ff7c:	881a      	ldrh	r2, [r3, #0]
 800ff7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff80:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ff82:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ff84:	f7fe fd2a 	bl	800e9dc <clear_lock>
#endif
	return FR_OK;
 800ff88:	2300      	movs	r3, #0
}
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	3758      	adds	r7, #88	; 0x58
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	bd80      	pop	{r7, pc}
 800ff92:	bf00      	nop
 800ff94:	41615252 	.word	0x41615252
 800ff98:	61417272 	.word	0x61417272
 800ff9c:	20003e40 	.word	0x20003e40

0800ffa0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b084      	sub	sp, #16
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
 800ffa8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ffaa:	2309      	movs	r3, #9
 800ffac:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d01c      	beq.n	800ffee <validate+0x4e>
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d018      	beq.n	800ffee <validate+0x4e>
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	781b      	ldrb	r3, [r3, #0]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d013      	beq.n	800ffee <validate+0x4e>
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	889a      	ldrh	r2, [r3, #4]
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	88db      	ldrh	r3, [r3, #6]
 800ffd0:	429a      	cmp	r2, r3
 800ffd2:	d10c      	bne.n	800ffee <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	785b      	ldrb	r3, [r3, #1]
 800ffda:	4618      	mov	r0, r3
 800ffdc:	f7fe fa18 	bl	800e410 <disk_status>
 800ffe0:	4603      	mov	r3, r0
 800ffe2:	f003 0301 	and.w	r3, r3, #1
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d101      	bne.n	800ffee <validate+0x4e>
			res = FR_OK;
 800ffea:	2300      	movs	r3, #0
 800ffec:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ffee:	7bfb      	ldrb	r3, [r7, #15]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d102      	bne.n	800fffa <validate+0x5a>
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	e000      	b.n	800fffc <validate+0x5c>
 800fffa:	2300      	movs	r3, #0
 800fffc:	683a      	ldr	r2, [r7, #0]
 800fffe:	6013      	str	r3, [r2, #0]
	return res;
 8010000:	7bfb      	ldrb	r3, [r7, #15]
}
 8010002:	4618      	mov	r0, r3
 8010004:	3710      	adds	r7, #16
 8010006:	46bd      	mov	sp, r7
 8010008:	bd80      	pop	{r7, pc}
	...

0801000c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801000c:	b580      	push	{r7, lr}
 801000e:	b088      	sub	sp, #32
 8010010:	af00      	add	r7, sp, #0
 8010012:	60f8      	str	r0, [r7, #12]
 8010014:	60b9      	str	r1, [r7, #8]
 8010016:	4613      	mov	r3, r2
 8010018:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801001a:	68bb      	ldr	r3, [r7, #8]
 801001c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801001e:	f107 0310 	add.w	r3, r7, #16
 8010022:	4618      	mov	r0, r3
 8010024:	f7ff fcd5 	bl	800f9d2 <get_ldnumber>
 8010028:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801002a:	69fb      	ldr	r3, [r7, #28]
 801002c:	2b00      	cmp	r3, #0
 801002e:	da01      	bge.n	8010034 <f_mount+0x28>
 8010030:	230b      	movs	r3, #11
 8010032:	e02b      	b.n	801008c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010034:	4a17      	ldr	r2, [pc, #92]	; (8010094 <f_mount+0x88>)
 8010036:	69fb      	ldr	r3, [r7, #28]
 8010038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801003c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801003e:	69bb      	ldr	r3, [r7, #24]
 8010040:	2b00      	cmp	r3, #0
 8010042:	d005      	beq.n	8010050 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010044:	69b8      	ldr	r0, [r7, #24]
 8010046:	f7fe fcc9 	bl	800e9dc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801004a:	69bb      	ldr	r3, [r7, #24]
 801004c:	2200      	movs	r2, #0
 801004e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d002      	beq.n	801005c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	2200      	movs	r2, #0
 801005a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801005c:	68fa      	ldr	r2, [r7, #12]
 801005e:	490d      	ldr	r1, [pc, #52]	; (8010094 <f_mount+0x88>)
 8010060:	69fb      	ldr	r3, [r7, #28]
 8010062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d002      	beq.n	8010072 <f_mount+0x66>
 801006c:	79fb      	ldrb	r3, [r7, #7]
 801006e:	2b01      	cmp	r3, #1
 8010070:	d001      	beq.n	8010076 <f_mount+0x6a>
 8010072:	2300      	movs	r3, #0
 8010074:	e00a      	b.n	801008c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010076:	f107 010c 	add.w	r1, r7, #12
 801007a:	f107 0308 	add.w	r3, r7, #8
 801007e:	2200      	movs	r2, #0
 8010080:	4618      	mov	r0, r3
 8010082:	f7ff fd41 	bl	800fb08 <find_volume>
 8010086:	4603      	mov	r3, r0
 8010088:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801008a:	7dfb      	ldrb	r3, [r7, #23]
}
 801008c:	4618      	mov	r0, r3
 801008e:	3720      	adds	r7, #32
 8010090:	46bd      	mov	sp, r7
 8010092:	bd80      	pop	{r7, pc}
 8010094:	20003e3c 	.word	0x20003e3c

08010098 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b098      	sub	sp, #96	; 0x60
 801009c:	af00      	add	r7, sp, #0
 801009e:	60f8      	str	r0, [r7, #12]
 80100a0:	60b9      	str	r1, [r7, #8]
 80100a2:	4613      	mov	r3, r2
 80100a4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d101      	bne.n	80100b0 <f_open+0x18>
 80100ac:	2309      	movs	r3, #9
 80100ae:	e1ad      	b.n	801040c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80100b0:	79fb      	ldrb	r3, [r7, #7]
 80100b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80100b6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80100b8:	79fa      	ldrb	r2, [r7, #7]
 80100ba:	f107 0110 	add.w	r1, r7, #16
 80100be:	f107 0308 	add.w	r3, r7, #8
 80100c2:	4618      	mov	r0, r3
 80100c4:	f7ff fd20 	bl	800fb08 <find_volume>
 80100c8:	4603      	mov	r3, r0
 80100ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80100ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	f040 8191 	bne.w	80103fa <f_open+0x362>
		dj.obj.fs = fs;
 80100d8:	693b      	ldr	r3, [r7, #16]
 80100da:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80100dc:	68ba      	ldr	r2, [r7, #8]
 80100de:	f107 0314 	add.w	r3, r7, #20
 80100e2:	4611      	mov	r1, r2
 80100e4:	4618      	mov	r0, r3
 80100e6:	f7ff fc03 	bl	800f8f0 <follow_path>
 80100ea:	4603      	mov	r3, r0
 80100ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80100f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d11a      	bne.n	801012e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80100f8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80100fc:	b25b      	sxtb	r3, r3
 80100fe:	2b00      	cmp	r3, #0
 8010100:	da03      	bge.n	801010a <f_open+0x72>
				res = FR_INVALID_NAME;
 8010102:	2306      	movs	r3, #6
 8010104:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010108:	e011      	b.n	801012e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801010a:	79fb      	ldrb	r3, [r7, #7]
 801010c:	f023 0301 	bic.w	r3, r3, #1
 8010110:	2b00      	cmp	r3, #0
 8010112:	bf14      	ite	ne
 8010114:	2301      	movne	r3, #1
 8010116:	2300      	moveq	r3, #0
 8010118:	b2db      	uxtb	r3, r3
 801011a:	461a      	mov	r2, r3
 801011c:	f107 0314 	add.w	r3, r7, #20
 8010120:	4611      	mov	r1, r2
 8010122:	4618      	mov	r0, r3
 8010124:	f7fe fb12 	bl	800e74c <chk_lock>
 8010128:	4603      	mov	r3, r0
 801012a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801012e:	79fb      	ldrb	r3, [r7, #7]
 8010130:	f003 031c 	and.w	r3, r3, #28
 8010134:	2b00      	cmp	r3, #0
 8010136:	d07f      	beq.n	8010238 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8010138:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801013c:	2b00      	cmp	r3, #0
 801013e:	d017      	beq.n	8010170 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010140:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010144:	2b04      	cmp	r3, #4
 8010146:	d10e      	bne.n	8010166 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010148:	f7fe fb5c 	bl	800e804 <enq_lock>
 801014c:	4603      	mov	r3, r0
 801014e:	2b00      	cmp	r3, #0
 8010150:	d006      	beq.n	8010160 <f_open+0xc8>
 8010152:	f107 0314 	add.w	r3, r7, #20
 8010156:	4618      	mov	r0, r3
 8010158:	f7ff faa5 	bl	800f6a6 <dir_register>
 801015c:	4603      	mov	r3, r0
 801015e:	e000      	b.n	8010162 <f_open+0xca>
 8010160:	2312      	movs	r3, #18
 8010162:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010166:	79fb      	ldrb	r3, [r7, #7]
 8010168:	f043 0308 	orr.w	r3, r3, #8
 801016c:	71fb      	strb	r3, [r7, #7]
 801016e:	e010      	b.n	8010192 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010170:	7ebb      	ldrb	r3, [r7, #26]
 8010172:	f003 0311 	and.w	r3, r3, #17
 8010176:	2b00      	cmp	r3, #0
 8010178:	d003      	beq.n	8010182 <f_open+0xea>
					res = FR_DENIED;
 801017a:	2307      	movs	r3, #7
 801017c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010180:	e007      	b.n	8010192 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010182:	79fb      	ldrb	r3, [r7, #7]
 8010184:	f003 0304 	and.w	r3, r3, #4
 8010188:	2b00      	cmp	r3, #0
 801018a:	d002      	beq.n	8010192 <f_open+0xfa>
 801018c:	2308      	movs	r3, #8
 801018e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010192:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010196:	2b00      	cmp	r3, #0
 8010198:	d168      	bne.n	801026c <f_open+0x1d4>
 801019a:	79fb      	ldrb	r3, [r7, #7]
 801019c:	f003 0308 	and.w	r3, r3, #8
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d063      	beq.n	801026c <f_open+0x1d4>
				dw = GET_FATTIME();
 80101a4:	f7fe f866 	bl	800e274 <get_fattime>
 80101a8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80101aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101ac:	330e      	adds	r3, #14
 80101ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80101b0:	4618      	mov	r0, r3
 80101b2:	f7fe fa21 	bl	800e5f8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80101b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101b8:	3316      	adds	r3, #22
 80101ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80101bc:	4618      	mov	r0, r3
 80101be:	f7fe fa1b 	bl	800e5f8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80101c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101c4:	330b      	adds	r3, #11
 80101c6:	2220      	movs	r2, #32
 80101c8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80101ca:	693b      	ldr	r3, [r7, #16]
 80101cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80101ce:	4611      	mov	r1, r2
 80101d0:	4618      	mov	r0, r3
 80101d2:	f7ff f977 	bl	800f4c4 <ld_clust>
 80101d6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80101d8:	693b      	ldr	r3, [r7, #16]
 80101da:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80101dc:	2200      	movs	r2, #0
 80101de:	4618      	mov	r0, r3
 80101e0:	f7ff f98f 	bl	800f502 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80101e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101e6:	331c      	adds	r3, #28
 80101e8:	2100      	movs	r1, #0
 80101ea:	4618      	mov	r0, r3
 80101ec:	f7fe fa04 	bl	800e5f8 <st_dword>
					fs->wflag = 1;
 80101f0:	693b      	ldr	r3, [r7, #16]
 80101f2:	2201      	movs	r2, #1
 80101f4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80101f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d037      	beq.n	801026c <f_open+0x1d4>
						dw = fs->winsect;
 80101fc:	693b      	ldr	r3, [r7, #16]
 80101fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010200:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8010202:	f107 0314 	add.w	r3, r7, #20
 8010206:	2200      	movs	r2, #0
 8010208:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801020a:	4618      	mov	r0, r3
 801020c:	f7fe fea2 	bl	800ef54 <remove_chain>
 8010210:	4603      	mov	r3, r0
 8010212:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8010216:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801021a:	2b00      	cmp	r3, #0
 801021c:	d126      	bne.n	801026c <f_open+0x1d4>
							res = move_window(fs, dw);
 801021e:	693b      	ldr	r3, [r7, #16]
 8010220:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010222:	4618      	mov	r0, r3
 8010224:	f7fe fc42 	bl	800eaac <move_window>
 8010228:	4603      	mov	r3, r0
 801022a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801022e:	693b      	ldr	r3, [r7, #16]
 8010230:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010232:	3a01      	subs	r2, #1
 8010234:	60da      	str	r2, [r3, #12]
 8010236:	e019      	b.n	801026c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010238:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801023c:	2b00      	cmp	r3, #0
 801023e:	d115      	bne.n	801026c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010240:	7ebb      	ldrb	r3, [r7, #26]
 8010242:	f003 0310 	and.w	r3, r3, #16
 8010246:	2b00      	cmp	r3, #0
 8010248:	d003      	beq.n	8010252 <f_open+0x1ba>
					res = FR_NO_FILE;
 801024a:	2304      	movs	r3, #4
 801024c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010250:	e00c      	b.n	801026c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010252:	79fb      	ldrb	r3, [r7, #7]
 8010254:	f003 0302 	and.w	r3, r3, #2
 8010258:	2b00      	cmp	r3, #0
 801025a:	d007      	beq.n	801026c <f_open+0x1d4>
 801025c:	7ebb      	ldrb	r3, [r7, #26]
 801025e:	f003 0301 	and.w	r3, r3, #1
 8010262:	2b00      	cmp	r3, #0
 8010264:	d002      	beq.n	801026c <f_open+0x1d4>
						res = FR_DENIED;
 8010266:	2307      	movs	r3, #7
 8010268:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801026c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010270:	2b00      	cmp	r3, #0
 8010272:	d128      	bne.n	80102c6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010274:	79fb      	ldrb	r3, [r7, #7]
 8010276:	f003 0308 	and.w	r3, r3, #8
 801027a:	2b00      	cmp	r3, #0
 801027c:	d003      	beq.n	8010286 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801027e:	79fb      	ldrb	r3, [r7, #7]
 8010280:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010284:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010286:	693b      	ldr	r3, [r7, #16]
 8010288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801028e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010294:	79fb      	ldrb	r3, [r7, #7]
 8010296:	f023 0301 	bic.w	r3, r3, #1
 801029a:	2b00      	cmp	r3, #0
 801029c:	bf14      	ite	ne
 801029e:	2301      	movne	r3, #1
 80102a0:	2300      	moveq	r3, #0
 80102a2:	b2db      	uxtb	r3, r3
 80102a4:	461a      	mov	r2, r3
 80102a6:	f107 0314 	add.w	r3, r7, #20
 80102aa:	4611      	mov	r1, r2
 80102ac:	4618      	mov	r0, r3
 80102ae:	f7fe facb 	bl	800e848 <inc_lock>
 80102b2:	4602      	mov	r2, r0
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	691b      	ldr	r3, [r3, #16]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d102      	bne.n	80102c6 <f_open+0x22e>
 80102c0:	2302      	movs	r3, #2
 80102c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80102c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	f040 8095 	bne.w	80103fa <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80102d0:	693b      	ldr	r3, [r7, #16]
 80102d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80102d4:	4611      	mov	r1, r2
 80102d6:	4618      	mov	r0, r3
 80102d8:	f7ff f8f4 	bl	800f4c4 <ld_clust>
 80102dc:	4602      	mov	r2, r0
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80102e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102e4:	331c      	adds	r3, #28
 80102e6:	4618      	mov	r0, r3
 80102e8:	f7fe f948 	bl	800e57c <ld_dword>
 80102ec:	4602      	mov	r2, r0
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	2200      	movs	r2, #0
 80102f6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80102f8:	693a      	ldr	r2, [r7, #16]
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80102fe:	693b      	ldr	r3, [r7, #16]
 8010300:	88da      	ldrh	r2, [r3, #6]
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	79fa      	ldrb	r2, [r7, #7]
 801030a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	2200      	movs	r2, #0
 8010310:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	2200      	movs	r2, #0
 8010316:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	2200      	movs	r2, #0
 801031c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	3330      	adds	r3, #48	; 0x30
 8010322:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010326:	2100      	movs	r1, #0
 8010328:	4618      	mov	r0, r3
 801032a:	f7fe f9b2 	bl	800e692 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801032e:	79fb      	ldrb	r3, [r7, #7]
 8010330:	f003 0320 	and.w	r3, r3, #32
 8010334:	2b00      	cmp	r3, #0
 8010336:	d060      	beq.n	80103fa <f_open+0x362>
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	68db      	ldr	r3, [r3, #12]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d05c      	beq.n	80103fa <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	68da      	ldr	r2, [r3, #12]
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010348:	693b      	ldr	r3, [r7, #16]
 801034a:	895b      	ldrh	r3, [r3, #10]
 801034c:	031b      	lsls	r3, r3, #12
 801034e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	689b      	ldr	r3, [r3, #8]
 8010354:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	68db      	ldr	r3, [r3, #12]
 801035a:	657b      	str	r3, [r7, #84]	; 0x54
 801035c:	e016      	b.n	801038c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010362:	4618      	mov	r0, r3
 8010364:	f7fe fc5d 	bl	800ec22 <get_fat>
 8010368:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801036a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801036c:	2b01      	cmp	r3, #1
 801036e:	d802      	bhi.n	8010376 <f_open+0x2de>
 8010370:	2302      	movs	r3, #2
 8010372:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010376:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010378:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801037c:	d102      	bne.n	8010384 <f_open+0x2ec>
 801037e:	2301      	movs	r3, #1
 8010380:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010384:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010388:	1ad3      	subs	r3, r2, r3
 801038a:	657b      	str	r3, [r7, #84]	; 0x54
 801038c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010390:	2b00      	cmp	r3, #0
 8010392:	d103      	bne.n	801039c <f_open+0x304>
 8010394:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010396:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010398:	429a      	cmp	r2, r3
 801039a:	d8e0      	bhi.n	801035e <f_open+0x2c6>
				}
				fp->clust = clst;
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80103a0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80103a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d127      	bne.n	80103fa <f_open+0x362>
 80103aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80103ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d022      	beq.n	80103fa <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80103b4:	693b      	ldr	r3, [r7, #16]
 80103b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80103b8:	4618      	mov	r0, r3
 80103ba:	f7fe fc13 	bl	800ebe4 <clust2sect>
 80103be:	6478      	str	r0, [r7, #68]	; 0x44
 80103c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d103      	bne.n	80103ce <f_open+0x336>
						res = FR_INT_ERR;
 80103c6:	2302      	movs	r3, #2
 80103c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80103cc:	e015      	b.n	80103fa <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80103ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80103d0:	0b1a      	lsrs	r2, r3, #12
 80103d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80103d4:	441a      	add	r2, r3
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80103da:	693b      	ldr	r3, [r7, #16]
 80103dc:	7858      	ldrb	r0, [r3, #1]
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	6a1a      	ldr	r2, [r3, #32]
 80103e8:	2301      	movs	r3, #1
 80103ea:	f7fe f851 	bl	800e490 <disk_read>
 80103ee:	4603      	mov	r3, r0
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d002      	beq.n	80103fa <f_open+0x362>
 80103f4:	2301      	movs	r3, #1
 80103f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80103fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d002      	beq.n	8010408 <f_open+0x370>
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	2200      	movs	r2, #0
 8010406:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010408:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 801040c:	4618      	mov	r0, r3
 801040e:	3760      	adds	r7, #96	; 0x60
 8010410:	46bd      	mov	sp, r7
 8010412:	bd80      	pop	{r7, pc}

08010414 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8010414:	b580      	push	{r7, lr}
 8010416:	b08e      	sub	sp, #56	; 0x38
 8010418:	af00      	add	r7, sp, #0
 801041a:	60f8      	str	r0, [r7, #12]
 801041c:	60b9      	str	r1, [r7, #8]
 801041e:	607a      	str	r2, [r7, #4]
 8010420:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8010422:	68bb      	ldr	r3, [r7, #8]
 8010424:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8010426:	683b      	ldr	r3, [r7, #0]
 8010428:	2200      	movs	r2, #0
 801042a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	f107 0214 	add.w	r2, r7, #20
 8010432:	4611      	mov	r1, r2
 8010434:	4618      	mov	r0, r3
 8010436:	f7ff fdb3 	bl	800ffa0 <validate>
 801043a:	4603      	mov	r3, r0
 801043c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010440:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010444:	2b00      	cmp	r3, #0
 8010446:	d107      	bne.n	8010458 <f_read+0x44>
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	7d5b      	ldrb	r3, [r3, #21]
 801044c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010450:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010454:	2b00      	cmp	r3, #0
 8010456:	d002      	beq.n	801045e <f_read+0x4a>
 8010458:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801045c:	e115      	b.n	801068a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	7d1b      	ldrb	r3, [r3, #20]
 8010462:	f003 0301 	and.w	r3, r3, #1
 8010466:	2b00      	cmp	r3, #0
 8010468:	d101      	bne.n	801046e <f_read+0x5a>
 801046a:	2307      	movs	r3, #7
 801046c:	e10d      	b.n	801068a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	68da      	ldr	r2, [r3, #12]
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	699b      	ldr	r3, [r3, #24]
 8010476:	1ad3      	subs	r3, r2, r3
 8010478:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801047a:	687a      	ldr	r2, [r7, #4]
 801047c:	6a3b      	ldr	r3, [r7, #32]
 801047e:	429a      	cmp	r2, r3
 8010480:	f240 80fe 	bls.w	8010680 <f_read+0x26c>
 8010484:	6a3b      	ldr	r3, [r7, #32]
 8010486:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8010488:	e0fa      	b.n	8010680 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	699b      	ldr	r3, [r3, #24]
 801048e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010492:	2b00      	cmp	r3, #0
 8010494:	f040 80c6 	bne.w	8010624 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	699b      	ldr	r3, [r3, #24]
 801049c:	0b1b      	lsrs	r3, r3, #12
 801049e:	697a      	ldr	r2, [r7, #20]
 80104a0:	8952      	ldrh	r2, [r2, #10]
 80104a2:	3a01      	subs	r2, #1
 80104a4:	4013      	ands	r3, r2
 80104a6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80104a8:	69fb      	ldr	r3, [r7, #28]
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d12f      	bne.n	801050e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	699b      	ldr	r3, [r3, #24]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d103      	bne.n	80104be <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	689b      	ldr	r3, [r3, #8]
 80104ba:	633b      	str	r3, [r7, #48]	; 0x30
 80104bc:	e013      	b.n	80104e6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d007      	beq.n	80104d6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	699b      	ldr	r3, [r3, #24]
 80104ca:	4619      	mov	r1, r3
 80104cc:	68f8      	ldr	r0, [r7, #12]
 80104ce:	f7fe fe3e 	bl	800f14e <clmt_clust>
 80104d2:	6338      	str	r0, [r7, #48]	; 0x30
 80104d4:	e007      	b.n	80104e6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80104d6:	68fa      	ldr	r2, [r7, #12]
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	69db      	ldr	r3, [r3, #28]
 80104dc:	4619      	mov	r1, r3
 80104de:	4610      	mov	r0, r2
 80104e0:	f7fe fb9f 	bl	800ec22 <get_fat>
 80104e4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80104e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104e8:	2b01      	cmp	r3, #1
 80104ea:	d804      	bhi.n	80104f6 <f_read+0xe2>
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	2202      	movs	r2, #2
 80104f0:	755a      	strb	r2, [r3, #21]
 80104f2:	2302      	movs	r3, #2
 80104f4:	e0c9      	b.n	801068a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80104f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80104fc:	d104      	bne.n	8010508 <f_read+0xf4>
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	2201      	movs	r2, #1
 8010502:	755a      	strb	r2, [r3, #21]
 8010504:	2301      	movs	r3, #1
 8010506:	e0c0      	b.n	801068a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801050c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801050e:	697a      	ldr	r2, [r7, #20]
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	69db      	ldr	r3, [r3, #28]
 8010514:	4619      	mov	r1, r3
 8010516:	4610      	mov	r0, r2
 8010518:	f7fe fb64 	bl	800ebe4 <clust2sect>
 801051c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801051e:	69bb      	ldr	r3, [r7, #24]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d104      	bne.n	801052e <f_read+0x11a>
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	2202      	movs	r2, #2
 8010528:	755a      	strb	r2, [r3, #21]
 801052a:	2302      	movs	r3, #2
 801052c:	e0ad      	b.n	801068a <f_read+0x276>
			sect += csect;
 801052e:	69ba      	ldr	r2, [r7, #24]
 8010530:	69fb      	ldr	r3, [r7, #28]
 8010532:	4413      	add	r3, r2
 8010534:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	0b1b      	lsrs	r3, r3, #12
 801053a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 801053c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801053e:	2b00      	cmp	r3, #0
 8010540:	d039      	beq.n	80105b6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010542:	69fa      	ldr	r2, [r7, #28]
 8010544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010546:	4413      	add	r3, r2
 8010548:	697a      	ldr	r2, [r7, #20]
 801054a:	8952      	ldrh	r2, [r2, #10]
 801054c:	4293      	cmp	r3, r2
 801054e:	d905      	bls.n	801055c <f_read+0x148>
					cc = fs->csize - csect;
 8010550:	697b      	ldr	r3, [r7, #20]
 8010552:	895b      	ldrh	r3, [r3, #10]
 8010554:	461a      	mov	r2, r3
 8010556:	69fb      	ldr	r3, [r7, #28]
 8010558:	1ad3      	subs	r3, r2, r3
 801055a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801055c:	697b      	ldr	r3, [r7, #20]
 801055e:	7858      	ldrb	r0, [r3, #1]
 8010560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010562:	69ba      	ldr	r2, [r7, #24]
 8010564:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010566:	f7fd ff93 	bl	800e490 <disk_read>
 801056a:	4603      	mov	r3, r0
 801056c:	2b00      	cmp	r3, #0
 801056e:	d004      	beq.n	801057a <f_read+0x166>
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	2201      	movs	r2, #1
 8010574:	755a      	strb	r2, [r3, #21]
 8010576:	2301      	movs	r3, #1
 8010578:	e087      	b.n	801068a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	7d1b      	ldrb	r3, [r3, #20]
 801057e:	b25b      	sxtb	r3, r3
 8010580:	2b00      	cmp	r3, #0
 8010582:	da14      	bge.n	80105ae <f_read+0x19a>
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	6a1a      	ldr	r2, [r3, #32]
 8010588:	69bb      	ldr	r3, [r7, #24]
 801058a:	1ad3      	subs	r3, r2, r3
 801058c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801058e:	429a      	cmp	r2, r3
 8010590:	d90d      	bls.n	80105ae <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	6a1a      	ldr	r2, [r3, #32]
 8010596:	69bb      	ldr	r3, [r7, #24]
 8010598:	1ad3      	subs	r3, r2, r3
 801059a:	031b      	lsls	r3, r3, #12
 801059c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801059e:	18d0      	adds	r0, r2, r3
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	3330      	adds	r3, #48	; 0x30
 80105a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80105a8:	4619      	mov	r1, r3
 80105aa:	f7fe f851 	bl	800e650 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80105ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105b0:	031b      	lsls	r3, r3, #12
 80105b2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80105b4:	e050      	b.n	8010658 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	6a1b      	ldr	r3, [r3, #32]
 80105ba:	69ba      	ldr	r2, [r7, #24]
 80105bc:	429a      	cmp	r2, r3
 80105be:	d02e      	beq.n	801061e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	7d1b      	ldrb	r3, [r3, #20]
 80105c4:	b25b      	sxtb	r3, r3
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	da18      	bge.n	80105fc <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80105ca:	697b      	ldr	r3, [r7, #20]
 80105cc:	7858      	ldrb	r0, [r3, #1]
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	6a1a      	ldr	r2, [r3, #32]
 80105d8:	2301      	movs	r3, #1
 80105da:	f7fd ff79 	bl	800e4d0 <disk_write>
 80105de:	4603      	mov	r3, r0
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d004      	beq.n	80105ee <f_read+0x1da>
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	2201      	movs	r2, #1
 80105e8:	755a      	strb	r2, [r3, #21]
 80105ea:	2301      	movs	r3, #1
 80105ec:	e04d      	b.n	801068a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	7d1b      	ldrb	r3, [r3, #20]
 80105f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80105f6:	b2da      	uxtb	r2, r3
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80105fc:	697b      	ldr	r3, [r7, #20]
 80105fe:	7858      	ldrb	r0, [r3, #1]
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010606:	2301      	movs	r3, #1
 8010608:	69ba      	ldr	r2, [r7, #24]
 801060a:	f7fd ff41 	bl	800e490 <disk_read>
 801060e:	4603      	mov	r3, r0
 8010610:	2b00      	cmp	r3, #0
 8010612:	d004      	beq.n	801061e <f_read+0x20a>
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	2201      	movs	r2, #1
 8010618:	755a      	strb	r2, [r3, #21]
 801061a:	2301      	movs	r3, #1
 801061c:	e035      	b.n	801068a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	69ba      	ldr	r2, [r7, #24]
 8010622:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	699b      	ldr	r3, [r3, #24]
 8010628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801062c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8010630:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8010632:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	429a      	cmp	r2, r3
 8010638:	d901      	bls.n	801063e <f_read+0x22a>
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	699b      	ldr	r3, [r3, #24]
 8010648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801064c:	4413      	add	r3, r2
 801064e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010650:	4619      	mov	r1, r3
 8010652:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010654:	f7fd fffc 	bl	800e650 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8010658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801065a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801065c:	4413      	add	r3, r2
 801065e:	627b      	str	r3, [r7, #36]	; 0x24
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	699a      	ldr	r2, [r3, #24]
 8010664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010666:	441a      	add	r2, r3
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	619a      	str	r2, [r3, #24]
 801066c:	683b      	ldr	r3, [r7, #0]
 801066e:	681a      	ldr	r2, [r3, #0]
 8010670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010672:	441a      	add	r2, r3
 8010674:	683b      	ldr	r3, [r7, #0]
 8010676:	601a      	str	r2, [r3, #0]
 8010678:	687a      	ldr	r2, [r7, #4]
 801067a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801067c:	1ad3      	subs	r3, r2, r3
 801067e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	2b00      	cmp	r3, #0
 8010684:	f47f af01 	bne.w	801048a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8010688:	2300      	movs	r3, #0
}
 801068a:	4618      	mov	r0, r3
 801068c:	3738      	adds	r7, #56	; 0x38
 801068e:	46bd      	mov	sp, r7
 8010690:	bd80      	pop	{r7, pc}

08010692 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010692:	b580      	push	{r7, lr}
 8010694:	b08c      	sub	sp, #48	; 0x30
 8010696:	af00      	add	r7, sp, #0
 8010698:	60f8      	str	r0, [r7, #12]
 801069a:	60b9      	str	r1, [r7, #8]
 801069c:	607a      	str	r2, [r7, #4]
 801069e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80106a0:	68bb      	ldr	r3, [r7, #8]
 80106a2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80106a4:	683b      	ldr	r3, [r7, #0]
 80106a6:	2200      	movs	r2, #0
 80106a8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	f107 0210 	add.w	r2, r7, #16
 80106b0:	4611      	mov	r1, r2
 80106b2:	4618      	mov	r0, r3
 80106b4:	f7ff fc74 	bl	800ffa0 <validate>
 80106b8:	4603      	mov	r3, r0
 80106ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80106be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d107      	bne.n	80106d6 <f_write+0x44>
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	7d5b      	ldrb	r3, [r3, #21]
 80106ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80106ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d002      	beq.n	80106dc <f_write+0x4a>
 80106d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80106da:	e14b      	b.n	8010974 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	7d1b      	ldrb	r3, [r3, #20]
 80106e0:	f003 0302 	and.w	r3, r3, #2
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d101      	bne.n	80106ec <f_write+0x5a>
 80106e8:	2307      	movs	r3, #7
 80106ea:	e143      	b.n	8010974 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	699a      	ldr	r2, [r3, #24]
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	441a      	add	r2, r3
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	699b      	ldr	r3, [r3, #24]
 80106f8:	429a      	cmp	r2, r3
 80106fa:	f080 812d 	bcs.w	8010958 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	699b      	ldr	r3, [r3, #24]
 8010702:	43db      	mvns	r3, r3
 8010704:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010706:	e127      	b.n	8010958 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	699b      	ldr	r3, [r3, #24]
 801070c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010710:	2b00      	cmp	r3, #0
 8010712:	f040 80e3 	bne.w	80108dc <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	699b      	ldr	r3, [r3, #24]
 801071a:	0b1b      	lsrs	r3, r3, #12
 801071c:	693a      	ldr	r2, [r7, #16]
 801071e:	8952      	ldrh	r2, [r2, #10]
 8010720:	3a01      	subs	r2, #1
 8010722:	4013      	ands	r3, r2
 8010724:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010726:	69bb      	ldr	r3, [r7, #24]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d143      	bne.n	80107b4 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	699b      	ldr	r3, [r3, #24]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d10c      	bne.n	801074e <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	689b      	ldr	r3, [r3, #8]
 8010738:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801073a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801073c:	2b00      	cmp	r3, #0
 801073e:	d11a      	bne.n	8010776 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	2100      	movs	r1, #0
 8010744:	4618      	mov	r0, r3
 8010746:	f7fe fc6a 	bl	800f01e <create_chain>
 801074a:	62b8      	str	r0, [r7, #40]	; 0x28
 801074c:	e013      	b.n	8010776 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010752:	2b00      	cmp	r3, #0
 8010754:	d007      	beq.n	8010766 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	699b      	ldr	r3, [r3, #24]
 801075a:	4619      	mov	r1, r3
 801075c:	68f8      	ldr	r0, [r7, #12]
 801075e:	f7fe fcf6 	bl	800f14e <clmt_clust>
 8010762:	62b8      	str	r0, [r7, #40]	; 0x28
 8010764:	e007      	b.n	8010776 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010766:	68fa      	ldr	r2, [r7, #12]
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	69db      	ldr	r3, [r3, #28]
 801076c:	4619      	mov	r1, r3
 801076e:	4610      	mov	r0, r2
 8010770:	f7fe fc55 	bl	800f01e <create_chain>
 8010774:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010778:	2b00      	cmp	r3, #0
 801077a:	f000 80f2 	beq.w	8010962 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801077e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010780:	2b01      	cmp	r3, #1
 8010782:	d104      	bne.n	801078e <f_write+0xfc>
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	2202      	movs	r2, #2
 8010788:	755a      	strb	r2, [r3, #21]
 801078a:	2302      	movs	r3, #2
 801078c:	e0f2      	b.n	8010974 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801078e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010790:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010794:	d104      	bne.n	80107a0 <f_write+0x10e>
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	2201      	movs	r2, #1
 801079a:	755a      	strb	r2, [r3, #21]
 801079c:	2301      	movs	r3, #1
 801079e:	e0e9      	b.n	8010974 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80107a4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	689b      	ldr	r3, [r3, #8]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d102      	bne.n	80107b4 <f_write+0x122>
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80107b2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	7d1b      	ldrb	r3, [r3, #20]
 80107b8:	b25b      	sxtb	r3, r3
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	da18      	bge.n	80107f0 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80107be:	693b      	ldr	r3, [r7, #16]
 80107c0:	7858      	ldrb	r0, [r3, #1]
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	6a1a      	ldr	r2, [r3, #32]
 80107cc:	2301      	movs	r3, #1
 80107ce:	f7fd fe7f 	bl	800e4d0 <disk_write>
 80107d2:	4603      	mov	r3, r0
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d004      	beq.n	80107e2 <f_write+0x150>
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	2201      	movs	r2, #1
 80107dc:	755a      	strb	r2, [r3, #21]
 80107de:	2301      	movs	r3, #1
 80107e0:	e0c8      	b.n	8010974 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	7d1b      	ldrb	r3, [r3, #20]
 80107e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80107ea:	b2da      	uxtb	r2, r3
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80107f0:	693a      	ldr	r2, [r7, #16]
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	69db      	ldr	r3, [r3, #28]
 80107f6:	4619      	mov	r1, r3
 80107f8:	4610      	mov	r0, r2
 80107fa:	f7fe f9f3 	bl	800ebe4 <clust2sect>
 80107fe:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010800:	697b      	ldr	r3, [r7, #20]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d104      	bne.n	8010810 <f_write+0x17e>
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	2202      	movs	r2, #2
 801080a:	755a      	strb	r2, [r3, #21]
 801080c:	2302      	movs	r3, #2
 801080e:	e0b1      	b.n	8010974 <f_write+0x2e2>
			sect += csect;
 8010810:	697a      	ldr	r2, [r7, #20]
 8010812:	69bb      	ldr	r3, [r7, #24]
 8010814:	4413      	add	r3, r2
 8010816:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	0b1b      	lsrs	r3, r3, #12
 801081c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801081e:	6a3b      	ldr	r3, [r7, #32]
 8010820:	2b00      	cmp	r3, #0
 8010822:	d03c      	beq.n	801089e <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010824:	69ba      	ldr	r2, [r7, #24]
 8010826:	6a3b      	ldr	r3, [r7, #32]
 8010828:	4413      	add	r3, r2
 801082a:	693a      	ldr	r2, [r7, #16]
 801082c:	8952      	ldrh	r2, [r2, #10]
 801082e:	4293      	cmp	r3, r2
 8010830:	d905      	bls.n	801083e <f_write+0x1ac>
					cc = fs->csize - csect;
 8010832:	693b      	ldr	r3, [r7, #16]
 8010834:	895b      	ldrh	r3, [r3, #10]
 8010836:	461a      	mov	r2, r3
 8010838:	69bb      	ldr	r3, [r7, #24]
 801083a:	1ad3      	subs	r3, r2, r3
 801083c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801083e:	693b      	ldr	r3, [r7, #16]
 8010840:	7858      	ldrb	r0, [r3, #1]
 8010842:	6a3b      	ldr	r3, [r7, #32]
 8010844:	697a      	ldr	r2, [r7, #20]
 8010846:	69f9      	ldr	r1, [r7, #28]
 8010848:	f7fd fe42 	bl	800e4d0 <disk_write>
 801084c:	4603      	mov	r3, r0
 801084e:	2b00      	cmp	r3, #0
 8010850:	d004      	beq.n	801085c <f_write+0x1ca>
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	2201      	movs	r2, #1
 8010856:	755a      	strb	r2, [r3, #21]
 8010858:	2301      	movs	r3, #1
 801085a:	e08b      	b.n	8010974 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	6a1a      	ldr	r2, [r3, #32]
 8010860:	697b      	ldr	r3, [r7, #20]
 8010862:	1ad3      	subs	r3, r2, r3
 8010864:	6a3a      	ldr	r2, [r7, #32]
 8010866:	429a      	cmp	r2, r3
 8010868:	d915      	bls.n	8010896 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	6a1a      	ldr	r2, [r3, #32]
 8010874:	697b      	ldr	r3, [r7, #20]
 8010876:	1ad3      	subs	r3, r2, r3
 8010878:	031b      	lsls	r3, r3, #12
 801087a:	69fa      	ldr	r2, [r7, #28]
 801087c:	4413      	add	r3, r2
 801087e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010882:	4619      	mov	r1, r3
 8010884:	f7fd fee4 	bl	800e650 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	7d1b      	ldrb	r3, [r3, #20]
 801088c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010890:	b2da      	uxtb	r2, r3
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010896:	6a3b      	ldr	r3, [r7, #32]
 8010898:	031b      	lsls	r3, r3, #12
 801089a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801089c:	e03f      	b.n	801091e <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	6a1b      	ldr	r3, [r3, #32]
 80108a2:	697a      	ldr	r2, [r7, #20]
 80108a4:	429a      	cmp	r2, r3
 80108a6:	d016      	beq.n	80108d6 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	699a      	ldr	r2, [r3, #24]
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80108b0:	429a      	cmp	r2, r3
 80108b2:	d210      	bcs.n	80108d6 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80108b4:	693b      	ldr	r3, [r7, #16]
 80108b6:	7858      	ldrb	r0, [r3, #1]
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80108be:	2301      	movs	r3, #1
 80108c0:	697a      	ldr	r2, [r7, #20]
 80108c2:	f7fd fde5 	bl	800e490 <disk_read>
 80108c6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d004      	beq.n	80108d6 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	2201      	movs	r2, #1
 80108d0:	755a      	strb	r2, [r3, #21]
 80108d2:	2301      	movs	r3, #1
 80108d4:	e04e      	b.n	8010974 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	697a      	ldr	r2, [r7, #20]
 80108da:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	699b      	ldr	r3, [r3, #24]
 80108e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80108e4:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80108e8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80108ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	429a      	cmp	r2, r3
 80108f0:	d901      	bls.n	80108f6 <f_write+0x264>
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	699b      	ldr	r3, [r3, #24]
 8010900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010904:	4413      	add	r3, r2
 8010906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010908:	69f9      	ldr	r1, [r7, #28]
 801090a:	4618      	mov	r0, r3
 801090c:	f7fd fea0 	bl	800e650 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	7d1b      	ldrb	r3, [r3, #20]
 8010914:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010918:	b2da      	uxtb	r2, r3
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801091e:	69fa      	ldr	r2, [r7, #28]
 8010920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010922:	4413      	add	r3, r2
 8010924:	61fb      	str	r3, [r7, #28]
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	699a      	ldr	r2, [r3, #24]
 801092a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801092c:	441a      	add	r2, r3
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	619a      	str	r2, [r3, #24]
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	68da      	ldr	r2, [r3, #12]
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	699b      	ldr	r3, [r3, #24]
 801093a:	429a      	cmp	r2, r3
 801093c:	bf38      	it	cc
 801093e:	461a      	movcc	r2, r3
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	60da      	str	r2, [r3, #12]
 8010944:	683b      	ldr	r3, [r7, #0]
 8010946:	681a      	ldr	r2, [r3, #0]
 8010948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801094a:	441a      	add	r2, r3
 801094c:	683b      	ldr	r3, [r7, #0]
 801094e:	601a      	str	r2, [r3, #0]
 8010950:	687a      	ldr	r2, [r7, #4]
 8010952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010954:	1ad3      	subs	r3, r2, r3
 8010956:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	2b00      	cmp	r3, #0
 801095c:	f47f aed4 	bne.w	8010708 <f_write+0x76>
 8010960:	e000      	b.n	8010964 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010962:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	7d1b      	ldrb	r3, [r3, #20]
 8010968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801096c:	b2da      	uxtb	r2, r3
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010972:	2300      	movs	r3, #0
}
 8010974:	4618      	mov	r0, r3
 8010976:	3730      	adds	r7, #48	; 0x30
 8010978:	46bd      	mov	sp, r7
 801097a:	bd80      	pop	{r7, pc}

0801097c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801097c:	b580      	push	{r7, lr}
 801097e:	b086      	sub	sp, #24
 8010980:	af00      	add	r7, sp, #0
 8010982:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	f107 0208 	add.w	r2, r7, #8
 801098a:	4611      	mov	r1, r2
 801098c:	4618      	mov	r0, r3
 801098e:	f7ff fb07 	bl	800ffa0 <validate>
 8010992:	4603      	mov	r3, r0
 8010994:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010996:	7dfb      	ldrb	r3, [r7, #23]
 8010998:	2b00      	cmp	r3, #0
 801099a:	d168      	bne.n	8010a6e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	7d1b      	ldrb	r3, [r3, #20]
 80109a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d062      	beq.n	8010a6e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	7d1b      	ldrb	r3, [r3, #20]
 80109ac:	b25b      	sxtb	r3, r3
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	da15      	bge.n	80109de <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80109b2:	68bb      	ldr	r3, [r7, #8]
 80109b4:	7858      	ldrb	r0, [r3, #1]
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	6a1a      	ldr	r2, [r3, #32]
 80109c0:	2301      	movs	r3, #1
 80109c2:	f7fd fd85 	bl	800e4d0 <disk_write>
 80109c6:	4603      	mov	r3, r0
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d001      	beq.n	80109d0 <f_sync+0x54>
 80109cc:	2301      	movs	r3, #1
 80109ce:	e04f      	b.n	8010a70 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	7d1b      	ldrb	r3, [r3, #20]
 80109d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80109d8:	b2da      	uxtb	r2, r3
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80109de:	f7fd fc49 	bl	800e274 <get_fattime>
 80109e2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80109e4:	68ba      	ldr	r2, [r7, #8]
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109ea:	4619      	mov	r1, r3
 80109ec:	4610      	mov	r0, r2
 80109ee:	f7fe f85d 	bl	800eaac <move_window>
 80109f2:	4603      	mov	r3, r0
 80109f4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80109f6:	7dfb      	ldrb	r3, [r7, #23]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d138      	bne.n	8010a6e <f_sync+0xf2>
					dir = fp->dir_ptr;
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a00:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	330b      	adds	r3, #11
 8010a06:	781a      	ldrb	r2, [r3, #0]
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	330b      	adds	r3, #11
 8010a0c:	f042 0220 	orr.w	r2, r2, #32
 8010a10:	b2d2      	uxtb	r2, r2
 8010a12:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	6818      	ldr	r0, [r3, #0]
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	689b      	ldr	r3, [r3, #8]
 8010a1c:	461a      	mov	r2, r3
 8010a1e:	68f9      	ldr	r1, [r7, #12]
 8010a20:	f7fe fd6f 	bl	800f502 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	f103 021c 	add.w	r2, r3, #28
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	68db      	ldr	r3, [r3, #12]
 8010a2e:	4619      	mov	r1, r3
 8010a30:	4610      	mov	r0, r2
 8010a32:	f7fd fde1 	bl	800e5f8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	3316      	adds	r3, #22
 8010a3a:	6939      	ldr	r1, [r7, #16]
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	f7fd fddb 	bl	800e5f8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	3312      	adds	r3, #18
 8010a46:	2100      	movs	r1, #0
 8010a48:	4618      	mov	r0, r3
 8010a4a:	f7fd fdba 	bl	800e5c2 <st_word>
					fs->wflag = 1;
 8010a4e:	68bb      	ldr	r3, [r7, #8]
 8010a50:	2201      	movs	r2, #1
 8010a52:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010a54:	68bb      	ldr	r3, [r7, #8]
 8010a56:	4618      	mov	r0, r3
 8010a58:	f7fe f856 	bl	800eb08 <sync_fs>
 8010a5c:	4603      	mov	r3, r0
 8010a5e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	7d1b      	ldrb	r3, [r3, #20]
 8010a64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a68:	b2da      	uxtb	r2, r3
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010a6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a70:	4618      	mov	r0, r3
 8010a72:	3718      	adds	r7, #24
 8010a74:	46bd      	mov	sp, r7
 8010a76:	bd80      	pop	{r7, pc}

08010a78 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b084      	sub	sp, #16
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010a80:	6878      	ldr	r0, [r7, #4]
 8010a82:	f7ff ff7b 	bl	801097c <f_sync>
 8010a86:	4603      	mov	r3, r0
 8010a88:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010a8a:	7bfb      	ldrb	r3, [r7, #15]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d118      	bne.n	8010ac2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	f107 0208 	add.w	r2, r7, #8
 8010a96:	4611      	mov	r1, r2
 8010a98:	4618      	mov	r0, r3
 8010a9a:	f7ff fa81 	bl	800ffa0 <validate>
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010aa2:	7bfb      	ldrb	r3, [r7, #15]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d10c      	bne.n	8010ac2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	691b      	ldr	r3, [r3, #16]
 8010aac:	4618      	mov	r0, r3
 8010aae:	f7fd ff59 	bl	800e964 <dec_lock>
 8010ab2:	4603      	mov	r3, r0
 8010ab4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010ab6:	7bfb      	ldrb	r3, [r7, #15]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d102      	bne.n	8010ac2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	2200      	movs	r2, #0
 8010ac0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	3710      	adds	r7, #16
 8010ac8:	46bd      	mov	sp, r7
 8010aca:	bd80      	pop	{r7, pc}

08010acc <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8010acc:	b580      	push	{r7, lr}
 8010ace:	b086      	sub	sp, #24
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	6078      	str	r0, [r7, #4]
 8010ad4:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d101      	bne.n	8010ae0 <f_opendir+0x14>
 8010adc:	2309      	movs	r3, #9
 8010ade:	e064      	b.n	8010baa <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8010ae4:	f107 010c 	add.w	r1, r7, #12
 8010ae8:	463b      	mov	r3, r7
 8010aea:	2200      	movs	r2, #0
 8010aec:	4618      	mov	r0, r3
 8010aee:	f7ff f80b 	bl	800fb08 <find_volume>
 8010af2:	4603      	mov	r3, r0
 8010af4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010af6:	7dfb      	ldrb	r3, [r7, #23]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d14f      	bne.n	8010b9c <f_opendir+0xd0>
		obj->fs = fs;
 8010afc:	68fa      	ldr	r2, [r7, #12]
 8010afe:	693b      	ldr	r3, [r7, #16]
 8010b00:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8010b02:	683b      	ldr	r3, [r7, #0]
 8010b04:	4619      	mov	r1, r3
 8010b06:	6878      	ldr	r0, [r7, #4]
 8010b08:	f7fe fef2 	bl	800f8f0 <follow_path>
 8010b0c:	4603      	mov	r3, r0
 8010b0e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8010b10:	7dfb      	ldrb	r3, [r7, #23]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d13d      	bne.n	8010b92 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010b1c:	b25b      	sxtb	r3, r3
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	db12      	blt.n	8010b48 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8010b22:	693b      	ldr	r3, [r7, #16]
 8010b24:	799b      	ldrb	r3, [r3, #6]
 8010b26:	f003 0310 	and.w	r3, r3, #16
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d00a      	beq.n	8010b44 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8010b2e:	68fa      	ldr	r2, [r7, #12]
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	6a1b      	ldr	r3, [r3, #32]
 8010b34:	4619      	mov	r1, r3
 8010b36:	4610      	mov	r0, r2
 8010b38:	f7fe fcc4 	bl	800f4c4 <ld_clust>
 8010b3c:	4602      	mov	r2, r0
 8010b3e:	693b      	ldr	r3, [r7, #16]
 8010b40:	609a      	str	r2, [r3, #8]
 8010b42:	e001      	b.n	8010b48 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8010b44:	2305      	movs	r3, #5
 8010b46:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8010b48:	7dfb      	ldrb	r3, [r7, #23]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d121      	bne.n	8010b92 <f_opendir+0xc6>
				obj->id = fs->id;
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	88da      	ldrh	r2, [r3, #6]
 8010b52:	693b      	ldr	r3, [r7, #16]
 8010b54:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8010b56:	2100      	movs	r1, #0
 8010b58:	6878      	ldr	r0, [r7, #4]
 8010b5a:	f7fe fb2c 	bl	800f1b6 <dir_sdi>
 8010b5e:	4603      	mov	r3, r0
 8010b60:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8010b62:	7dfb      	ldrb	r3, [r7, #23]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d114      	bne.n	8010b92 <f_opendir+0xc6>
					if (obj->sclust) {
 8010b68:	693b      	ldr	r3, [r7, #16]
 8010b6a:	689b      	ldr	r3, [r3, #8]
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d00d      	beq.n	8010b8c <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8010b70:	2100      	movs	r1, #0
 8010b72:	6878      	ldr	r0, [r7, #4]
 8010b74:	f7fd fe68 	bl	800e848 <inc_lock>
 8010b78:	4602      	mov	r2, r0
 8010b7a:	693b      	ldr	r3, [r7, #16]
 8010b7c:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8010b7e:	693b      	ldr	r3, [r7, #16]
 8010b80:	691b      	ldr	r3, [r3, #16]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d105      	bne.n	8010b92 <f_opendir+0xc6>
 8010b86:	2312      	movs	r3, #18
 8010b88:	75fb      	strb	r3, [r7, #23]
 8010b8a:	e002      	b.n	8010b92 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8010b8c:	693b      	ldr	r3, [r7, #16]
 8010b8e:	2200      	movs	r2, #0
 8010b90:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8010b92:	7dfb      	ldrb	r3, [r7, #23]
 8010b94:	2b04      	cmp	r3, #4
 8010b96:	d101      	bne.n	8010b9c <f_opendir+0xd0>
 8010b98:	2305      	movs	r3, #5
 8010b9a:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8010b9c:	7dfb      	ldrb	r3, [r7, #23]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d002      	beq.n	8010ba8 <f_opendir+0xdc>
 8010ba2:	693b      	ldr	r3, [r7, #16]
 8010ba4:	2200      	movs	r2, #0
 8010ba6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010ba8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010baa:	4618      	mov	r0, r3
 8010bac:	3718      	adds	r7, #24
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	bd80      	pop	{r7, pc}

08010bb2 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8010bb2:	b580      	push	{r7, lr}
 8010bb4:	b084      	sub	sp, #16
 8010bb6:	af00      	add	r7, sp, #0
 8010bb8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	f107 0208 	add.w	r2, r7, #8
 8010bc0:	4611      	mov	r1, r2
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	f7ff f9ec 	bl	800ffa0 <validate>
 8010bc8:	4603      	mov	r3, r0
 8010bca:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010bcc:	7bfb      	ldrb	r3, [r7, #15]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d110      	bne.n	8010bf4 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	691b      	ldr	r3, [r3, #16]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d006      	beq.n	8010be8 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	691b      	ldr	r3, [r3, #16]
 8010bde:	4618      	mov	r0, r3
 8010be0:	f7fd fec0 	bl	800e964 <dec_lock>
 8010be4:	4603      	mov	r3, r0
 8010be6:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8010be8:	7bfb      	ldrb	r3, [r7, #15]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d102      	bne.n	8010bf4 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	2200      	movs	r2, #0
 8010bf2:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8010bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	3710      	adds	r7, #16
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	bd80      	pop	{r7, pc}

08010bfe <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8010bfe:	b580      	push	{r7, lr}
 8010c00:	b084      	sub	sp, #16
 8010c02:	af00      	add	r7, sp, #0
 8010c04:	6078      	str	r0, [r7, #4]
 8010c06:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	f107 0208 	add.w	r2, r7, #8
 8010c0e:	4611      	mov	r1, r2
 8010c10:	4618      	mov	r0, r3
 8010c12:	f7ff f9c5 	bl	800ffa0 <validate>
 8010c16:	4603      	mov	r3, r0
 8010c18:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010c1a:	7bfb      	ldrb	r3, [r7, #15]
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d126      	bne.n	8010c6e <f_readdir+0x70>
		if (!fno) {
 8010c20:	683b      	ldr	r3, [r7, #0]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d106      	bne.n	8010c34 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8010c26:	2100      	movs	r1, #0
 8010c28:	6878      	ldr	r0, [r7, #4]
 8010c2a:	f7fe fac4 	bl	800f1b6 <dir_sdi>
 8010c2e:	4603      	mov	r3, r0
 8010c30:	73fb      	strb	r3, [r7, #15]
 8010c32:	e01c      	b.n	8010c6e <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8010c34:	2100      	movs	r1, #0
 8010c36:	6878      	ldr	r0, [r7, #4]
 8010c38:	f7fe fc83 	bl	800f542 <dir_read>
 8010c3c:	4603      	mov	r3, r0
 8010c3e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8010c40:	7bfb      	ldrb	r3, [r7, #15]
 8010c42:	2b04      	cmp	r3, #4
 8010c44:	d101      	bne.n	8010c4a <f_readdir+0x4c>
 8010c46:	2300      	movs	r3, #0
 8010c48:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8010c4a:	7bfb      	ldrb	r3, [r7, #15]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d10e      	bne.n	8010c6e <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8010c50:	6839      	ldr	r1, [r7, #0]
 8010c52:	6878      	ldr	r0, [r7, #4]
 8010c54:	f7fe fd59 	bl	800f70a <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8010c58:	2100      	movs	r1, #0
 8010c5a:	6878      	ldr	r0, [r7, #4]
 8010c5c:	f7fe fb26 	bl	800f2ac <dir_next>
 8010c60:	4603      	mov	r3, r0
 8010c62:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8010c64:	7bfb      	ldrb	r3, [r7, #15]
 8010c66:	2b04      	cmp	r3, #4
 8010c68:	d101      	bne.n	8010c6e <f_readdir+0x70>
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8010c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c70:	4618      	mov	r0, r3
 8010c72:	3710      	adds	r7, #16
 8010c74:	46bd      	mov	sp, r7
 8010c76:	bd80      	pop	{r7, pc}

08010c78 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8010c78:	b590      	push	{r4, r7, lr}
 8010c7a:	b09d      	sub	sp, #116	; 0x74
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	60f8      	str	r0, [r7, #12]
 8010c80:	607a      	str	r2, [r7, #4]
 8010c82:	603b      	str	r3, [r7, #0]
 8010c84:	460b      	mov	r3, r1
 8010c86:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8010c88:	2301      	movs	r3, #1
 8010c8a:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8010c8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010c90:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8010c92:	f107 030c 	add.w	r3, r7, #12
 8010c96:	4618      	mov	r0, r3
 8010c98:	f7fe fe9b 	bl	800f9d2 <get_ldnumber>
 8010c9c:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	da02      	bge.n	8010caa <f_mkfs+0x32>
 8010ca4:	230b      	movs	r3, #11
 8010ca6:	f000 bc0d 	b.w	80114c4 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8010caa:	4a94      	ldr	r2, [pc, #592]	; (8010efc <f_mkfs+0x284>)
 8010cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d005      	beq.n	8010cc2 <f_mkfs+0x4a>
 8010cb6:	4a91      	ldr	r2, [pc, #580]	; (8010efc <f_mkfs+0x284>)
 8010cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010cbe:	2200      	movs	r2, #0
 8010cc0:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8010cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cc4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8010cc8:	2300      	movs	r3, #0
 8010cca:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8010cce:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	f7fd fbb6 	bl	800e444 <disk_initialize>
 8010cd8:	4603      	mov	r3, r0
 8010cda:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8010cde:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8010ce2:	f003 0301 	and.w	r3, r3, #1
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d001      	beq.n	8010cee <f_mkfs+0x76>
 8010cea:	2303      	movs	r3, #3
 8010cec:	e3ea      	b.n	80114c4 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8010cee:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8010cf2:	f003 0304 	and.w	r3, r3, #4
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d001      	beq.n	8010cfe <f_mkfs+0x86>
 8010cfa:	230a      	movs	r3, #10
 8010cfc:	e3e2      	b.n	80114c4 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8010cfe:	f107 0214 	add.w	r2, r7, #20
 8010d02:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010d06:	2103      	movs	r1, #3
 8010d08:	4618      	mov	r0, r3
 8010d0a:	f7fd fc01 	bl	800e510 <disk_ioctl>
 8010d0e:	4603      	mov	r3, r0
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d10c      	bne.n	8010d2e <f_mkfs+0xb6>
 8010d14:	697b      	ldr	r3, [r7, #20]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d009      	beq.n	8010d2e <f_mkfs+0xb6>
 8010d1a:	697b      	ldr	r3, [r7, #20]
 8010d1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010d20:	d805      	bhi.n	8010d2e <f_mkfs+0xb6>
 8010d22:	697b      	ldr	r3, [r7, #20]
 8010d24:	1e5a      	subs	r2, r3, #1
 8010d26:	697b      	ldr	r3, [r7, #20]
 8010d28:	4013      	ands	r3, r2
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d001      	beq.n	8010d32 <f_mkfs+0xba>
 8010d2e:	2301      	movs	r3, #1
 8010d30:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8010d32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010d36:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d003      	beq.n	8010d46 <f_mkfs+0xce>
 8010d3e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010d40:	687a      	ldr	r2, [r7, #4]
 8010d42:	429a      	cmp	r2, r3
 8010d44:	d309      	bcc.n	8010d5a <f_mkfs+0xe2>
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010d4c:	d805      	bhi.n	8010d5a <f_mkfs+0xe2>
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	1e5a      	subs	r2, r3, #1
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	4013      	ands	r3, r2
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d001      	beq.n	8010d5e <f_mkfs+0xe6>
 8010d5a:	2313      	movs	r3, #19
 8010d5c:	e3b2      	b.n	80114c4 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 8010d5e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010d60:	687a      	ldr	r2, [r7, #4]
 8010d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8010d66:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8010d68:	683b      	ldr	r3, [r7, #0]
 8010d6a:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8010d6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010d6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8010d76:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8010d78:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d7c:	fb02 f303 	mul.w	r3, r2, r3
 8010d80:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 8010d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d101      	bne.n	8010d8c <f_mkfs+0x114>
 8010d88:	230e      	movs	r3, #14
 8010d8a:	e39b      	b.n	80114c4 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8010d8c:	f107 0210 	add.w	r2, r7, #16
 8010d90:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010d94:	2101      	movs	r1, #1
 8010d96:	4618      	mov	r0, r3
 8010d98:	f7fd fbba 	bl	800e510 <disk_ioctl>
 8010d9c:	4603      	mov	r3, r0
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d001      	beq.n	8010da6 <f_mkfs+0x12e>
 8010da2:	2301      	movs	r3, #1
 8010da4:	e38e      	b.n	80114c4 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8010da6:	7afb      	ldrb	r3, [r7, #11]
 8010da8:	f003 0308 	and.w	r3, r3, #8
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d001      	beq.n	8010db4 <f_mkfs+0x13c>
 8010db0:	2300      	movs	r3, #0
 8010db2:	e000      	b.n	8010db6 <f_mkfs+0x13e>
 8010db4:	233f      	movs	r3, #63	; 0x3f
 8010db6:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8010db8:	693b      	ldr	r3, [r7, #16]
 8010dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010dbc:	429a      	cmp	r2, r3
 8010dbe:	d901      	bls.n	8010dc4 <f_mkfs+0x14c>
 8010dc0:	230e      	movs	r3, #14
 8010dc2:	e37f      	b.n	80114c4 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8010dc4:	693a      	ldr	r2, [r7, #16]
 8010dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dc8:	1ad3      	subs	r3, r2, r3
 8010dca:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8010dcc:	693b      	ldr	r3, [r7, #16]
 8010dce:	2b7f      	cmp	r3, #127	; 0x7f
 8010dd0:	d801      	bhi.n	8010dd6 <f_mkfs+0x15e>
 8010dd2:	230e      	movs	r3, #14
 8010dd4:	e376      	b.n	80114c4 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	2b80      	cmp	r3, #128	; 0x80
 8010dda:	d901      	bls.n	8010de0 <f_mkfs+0x168>
 8010ddc:	2313      	movs	r3, #19
 8010dde:	e371      	b.n	80114c4 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8010de0:	7afb      	ldrb	r3, [r7, #11]
 8010de2:	f003 0302 	and.w	r3, r3, #2
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d00d      	beq.n	8010e06 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8010dea:	7afb      	ldrb	r3, [r7, #11]
 8010dec:	f003 0307 	and.w	r3, r3, #7
 8010df0:	2b02      	cmp	r3, #2
 8010df2:	d004      	beq.n	8010dfe <f_mkfs+0x186>
 8010df4:	7afb      	ldrb	r3, [r7, #11]
 8010df6:	f003 0301 	and.w	r3, r3, #1
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d103      	bne.n	8010e06 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 8010dfe:	2303      	movs	r3, #3
 8010e00:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8010e04:	e009      	b.n	8010e1a <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8010e06:	7afb      	ldrb	r3, [r7, #11]
 8010e08:	f003 0301 	and.w	r3, r3, #1
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d101      	bne.n	8010e14 <f_mkfs+0x19c>
 8010e10:	2313      	movs	r3, #19
 8010e12:	e357      	b.n	80114c4 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8010e14:	2302      	movs	r3, #2
 8010e16:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8010e1e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010e22:	2b03      	cmp	r3, #3
 8010e24:	d13c      	bne.n	8010ea0 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 8010e26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d11b      	bne.n	8010e64 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8010e2c:	693b      	ldr	r3, [r7, #16]
 8010e2e:	0c5b      	lsrs	r3, r3, #17
 8010e30:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8010e32:	2300      	movs	r3, #0
 8010e34:	64bb      	str	r3, [r7, #72]	; 0x48
 8010e36:	2301      	movs	r3, #1
 8010e38:	653b      	str	r3, [r7, #80]	; 0x50
 8010e3a:	e005      	b.n	8010e48 <f_mkfs+0x1d0>
 8010e3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010e3e:	3301      	adds	r3, #1
 8010e40:	64bb      	str	r3, [r7, #72]	; 0x48
 8010e42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e44:	005b      	lsls	r3, r3, #1
 8010e46:	653b      	str	r3, [r7, #80]	; 0x50
 8010e48:	4a2d      	ldr	r2, [pc, #180]	; (8010f00 <f_mkfs+0x288>)
 8010e4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010e4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d007      	beq.n	8010e64 <f_mkfs+0x1ec>
 8010e54:	4a2a      	ldr	r2, [pc, #168]	; (8010f00 <f_mkfs+0x288>)
 8010e56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010e58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010e5c:	461a      	mov	r2, r3
 8010e5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010e60:	4293      	cmp	r3, r2
 8010e62:	d2eb      	bcs.n	8010e3c <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8010e64:	693a      	ldr	r2, [r7, #16]
 8010e66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8010e6c:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8010e6e:	6a3b      	ldr	r3, [r7, #32]
 8010e70:	3302      	adds	r3, #2
 8010e72:	009a      	lsls	r2, r3, #2
 8010e74:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010e76:	4413      	add	r3, r2
 8010e78:	1e5a      	subs	r2, r3, #1
 8010e7a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010e80:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 8010e82:	2320      	movs	r3, #32
 8010e84:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 8010e86:	2300      	movs	r3, #0
 8010e88:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8010e8a:	6a3b      	ldr	r3, [r7, #32]
 8010e8c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010e90:	4293      	cmp	r3, r2
 8010e92:	d903      	bls.n	8010e9c <f_mkfs+0x224>
 8010e94:	6a3b      	ldr	r3, [r7, #32]
 8010e96:	4a1b      	ldr	r2, [pc, #108]	; (8010f04 <f_mkfs+0x28c>)
 8010e98:	4293      	cmp	r3, r2
 8010e9a:	d952      	bls.n	8010f42 <f_mkfs+0x2ca>
 8010e9c:	230e      	movs	r3, #14
 8010e9e:	e311      	b.n	80114c4 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8010ea0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d11b      	bne.n	8010ede <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8010ea6:	693b      	ldr	r3, [r7, #16]
 8010ea8:	0b1b      	lsrs	r3, r3, #12
 8010eaa:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8010eac:	2300      	movs	r3, #0
 8010eae:	64bb      	str	r3, [r7, #72]	; 0x48
 8010eb0:	2301      	movs	r3, #1
 8010eb2:	653b      	str	r3, [r7, #80]	; 0x50
 8010eb4:	e005      	b.n	8010ec2 <f_mkfs+0x24a>
 8010eb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010eb8:	3301      	adds	r3, #1
 8010eba:	64bb      	str	r3, [r7, #72]	; 0x48
 8010ebc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ebe:	005b      	lsls	r3, r3, #1
 8010ec0:	653b      	str	r3, [r7, #80]	; 0x50
 8010ec2:	4a11      	ldr	r2, [pc, #68]	; (8010f08 <f_mkfs+0x290>)
 8010ec4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ec6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d007      	beq.n	8010ede <f_mkfs+0x266>
 8010ece:	4a0e      	ldr	r2, [pc, #56]	; (8010f08 <f_mkfs+0x290>)
 8010ed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ed2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010ed6:	461a      	mov	r2, r3
 8010ed8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010eda:	4293      	cmp	r3, r2
 8010edc:	d2eb      	bcs.n	8010eb6 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 8010ede:	693a      	ldr	r2, [r7, #16]
 8010ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8010ee6:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 8010ee8:	6a3b      	ldr	r3, [r7, #32]
 8010eea:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010eee:	4293      	cmp	r3, r2
 8010ef0:	d90c      	bls.n	8010f0c <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8010ef2:	6a3b      	ldr	r3, [r7, #32]
 8010ef4:	3302      	adds	r3, #2
 8010ef6:	005b      	lsls	r3, r3, #1
 8010ef8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010efa:	e012      	b.n	8010f22 <f_mkfs+0x2aa>
 8010efc:	20003e3c 	.word	0x20003e3c
 8010f00:	080176c4 	.word	0x080176c4
 8010f04:	0ffffff5 	.word	0x0ffffff5
 8010f08:	080176d4 	.word	0x080176d4
				} else {
					fmt = FS_FAT12;
 8010f0c:	2301      	movs	r3, #1
 8010f0e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8010f12:	6a3a      	ldr	r2, [r7, #32]
 8010f14:	4613      	mov	r3, r2
 8010f16:	005b      	lsls	r3, r3, #1
 8010f18:	4413      	add	r3, r2
 8010f1a:	3301      	adds	r3, #1
 8010f1c:	085b      	lsrs	r3, r3, #1
 8010f1e:	3303      	adds	r3, #3
 8010f20:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8010f22:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010f24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010f26:	4413      	add	r3, r2
 8010f28:	1e5a      	subs	r2, r3, #1
 8010f2a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010f30:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 8010f32:	2301      	movs	r3, #1
 8010f34:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8010f36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f38:	015a      	lsls	r2, r3, #5
 8010f3a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010f40:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8010f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010f46:	4413      	add	r3, r2
 8010f48:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8010f4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010f4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010f4e:	fb03 f202 	mul.w	r2, r3, r2
 8010f52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010f54:	4413      	add	r3, r2
 8010f56:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010f58:	4413      	add	r3, r2
 8010f5a:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8010f5c:	697a      	ldr	r2, [r7, #20]
 8010f5e:	69fb      	ldr	r3, [r7, #28]
 8010f60:	4413      	add	r3, r2
 8010f62:	1e5a      	subs	r2, r3, #1
 8010f64:	697b      	ldr	r3, [r7, #20]
 8010f66:	425b      	negs	r3, r3
 8010f68:	401a      	ands	r2, r3
 8010f6a:	69fb      	ldr	r3, [r7, #28]
 8010f6c:	1ad3      	subs	r3, r2, r3
 8010f6e:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8010f70:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010f74:	2b03      	cmp	r3, #3
 8010f76:	d108      	bne.n	8010f8a <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 8010f78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010f7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010f7c:	4413      	add	r3, r2
 8010f7e:	657b      	str	r3, [r7, #84]	; 0x54
 8010f80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010f82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010f84:	4413      	add	r3, r2
 8010f86:	65bb      	str	r3, [r7, #88]	; 0x58
 8010f88:	e006      	b.n	8010f98 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 8010f8a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010f92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010f94:	4413      	add	r3, r2
 8010f96:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8010f98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f9a:	011a      	lsls	r2, r3, #4
 8010f9c:	69fb      	ldr	r3, [r7, #28]
 8010f9e:	441a      	add	r2, r3
 8010fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fa2:	1ad2      	subs	r2, r2, r3
 8010fa4:	693b      	ldr	r3, [r7, #16]
 8010fa6:	429a      	cmp	r2, r3
 8010fa8:	d901      	bls.n	8010fae <f_mkfs+0x336>
 8010faa:	230e      	movs	r3, #14
 8010fac:	e28a      	b.n	80114c4 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8010fae:	693a      	ldr	r2, [r7, #16]
 8010fb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010fb2:	1ad2      	subs	r2, r2, r3
 8010fb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010fb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010fb8:	fb01 f303 	mul.w	r3, r1, r3
 8010fbc:	1ad2      	subs	r2, r2, r3
 8010fbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010fc0:	1ad2      	subs	r2, r2, r3
 8010fc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8010fc8:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 8010fca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010fce:	2b03      	cmp	r3, #3
 8010fd0:	d10f      	bne.n	8010ff2 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8010fd2:	6a3b      	ldr	r3, [r7, #32]
 8010fd4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010fd8:	4293      	cmp	r3, r2
 8010fda:	d80a      	bhi.n	8010ff2 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d105      	bne.n	8010fee <f_mkfs+0x376>
 8010fe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010fe4:	085b      	lsrs	r3, r3, #1
 8010fe6:	607b      	str	r3, [r7, #4]
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d144      	bne.n	8011078 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 8010fee:	230e      	movs	r3, #14
 8010ff0:	e268      	b.n	80114c4 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 8010ff2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010ff6:	2b02      	cmp	r3, #2
 8010ff8:	d133      	bne.n	8011062 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8010ffa:	6a3b      	ldr	r3, [r7, #32]
 8010ffc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8011000:	4293      	cmp	r3, r2
 8011002:	d91e      	bls.n	8011042 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	2b00      	cmp	r3, #0
 8011008:	d107      	bne.n	801101a <f_mkfs+0x3a2>
 801100a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801100c:	005b      	lsls	r3, r3, #1
 801100e:	2b40      	cmp	r3, #64	; 0x40
 8011010:	d803      	bhi.n	801101a <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8011012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011014:	005b      	lsls	r3, r3, #1
 8011016:	607b      	str	r3, [r7, #4]
 8011018:	e033      	b.n	8011082 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 801101a:	7afb      	ldrb	r3, [r7, #11]
 801101c:	f003 0302 	and.w	r3, r3, #2
 8011020:	2b00      	cmp	r3, #0
 8011022:	d003      	beq.n	801102c <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8011024:	2303      	movs	r3, #3
 8011026:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801102a:	e02a      	b.n	8011082 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d105      	bne.n	801103e <f_mkfs+0x3c6>
 8011032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011034:	005b      	lsls	r3, r3, #1
 8011036:	607b      	str	r3, [r7, #4]
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	2b80      	cmp	r3, #128	; 0x80
 801103c:	d91e      	bls.n	801107c <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 801103e:	230e      	movs	r3, #14
 8011040:	e240      	b.n	80114c4 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8011042:	6a3b      	ldr	r3, [r7, #32]
 8011044:	f640 72f5 	movw	r2, #4085	; 0xff5
 8011048:	4293      	cmp	r3, r2
 801104a:	d80a      	bhi.n	8011062 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	2b00      	cmp	r3, #0
 8011050:	d105      	bne.n	801105e <f_mkfs+0x3e6>
 8011052:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011054:	005b      	lsls	r3, r3, #1
 8011056:	607b      	str	r3, [r7, #4]
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	2b80      	cmp	r3, #128	; 0x80
 801105c:	d910      	bls.n	8011080 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 801105e:	230e      	movs	r3, #14
 8011060:	e230      	b.n	80114c4 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8011062:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011066:	2b01      	cmp	r3, #1
 8011068:	d10c      	bne.n	8011084 <f_mkfs+0x40c>
 801106a:	6a3b      	ldr	r3, [r7, #32]
 801106c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8011070:	4293      	cmp	r3, r2
 8011072:	d907      	bls.n	8011084 <f_mkfs+0x40c>
 8011074:	230e      	movs	r3, #14
 8011076:	e225      	b.n	80114c4 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8011078:	bf00      	nop
 801107a:	e6ce      	b.n	8010e1a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 801107c:	bf00      	nop
 801107e:	e6cc      	b.n	8010e1a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8011080:	bf00      	nop
			pau = au;
 8011082:	e6ca      	b.n	8010e1a <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8011084:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8011086:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011088:	461a      	mov	r2, r3
 801108a:	2100      	movs	r1, #0
 801108c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801108e:	f7fd fb00 	bl	800e692 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8011092:	220b      	movs	r2, #11
 8011094:	49b2      	ldr	r1, [pc, #712]	; (8011360 <f_mkfs+0x6e8>)
 8011096:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011098:	f7fd fada 	bl	800e650 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 801109c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801109e:	330b      	adds	r3, #11
 80110a0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80110a2:	4611      	mov	r1, r2
 80110a4:	4618      	mov	r0, r3
 80110a6:	f7fd fa8c 	bl	800e5c2 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 80110aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110ac:	330d      	adds	r3, #13
 80110ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80110b0:	b2d2      	uxtb	r2, r2
 80110b2:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 80110b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110b6:	330e      	adds	r3, #14
 80110b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80110ba:	b292      	uxth	r2, r2
 80110bc:	4611      	mov	r1, r2
 80110be:	4618      	mov	r0, r3
 80110c0:	f7fd fa7f 	bl	800e5c2 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 80110c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110c6:	3310      	adds	r3, #16
 80110c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80110ca:	b2d2      	uxtb	r2, r2
 80110cc:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 80110ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110d0:	f103 0211 	add.w	r2, r3, #17
 80110d4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80110d8:	2b03      	cmp	r3, #3
 80110da:	d002      	beq.n	80110e2 <f_mkfs+0x46a>
 80110dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110de:	b29b      	uxth	r3, r3
 80110e0:	e000      	b.n	80110e4 <f_mkfs+0x46c>
 80110e2:	2300      	movs	r3, #0
 80110e4:	4619      	mov	r1, r3
 80110e6:	4610      	mov	r0, r2
 80110e8:	f7fd fa6b 	bl	800e5c2 <st_word>
		if (sz_vol < 0x10000) {
 80110ec:	693b      	ldr	r3, [r7, #16]
 80110ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80110f2:	d208      	bcs.n	8011106 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 80110f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110f6:	3313      	adds	r3, #19
 80110f8:	693a      	ldr	r2, [r7, #16]
 80110fa:	b292      	uxth	r2, r2
 80110fc:	4611      	mov	r1, r2
 80110fe:	4618      	mov	r0, r3
 8011100:	f7fd fa5f 	bl	800e5c2 <st_word>
 8011104:	e006      	b.n	8011114 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8011106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011108:	3320      	adds	r3, #32
 801110a:	693a      	ldr	r2, [r7, #16]
 801110c:	4611      	mov	r1, r2
 801110e:	4618      	mov	r0, r3
 8011110:	f7fd fa72 	bl	800e5f8 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8011114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011116:	3315      	adds	r3, #21
 8011118:	22f8      	movs	r2, #248	; 0xf8
 801111a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 801111c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801111e:	3318      	adds	r3, #24
 8011120:	213f      	movs	r1, #63	; 0x3f
 8011122:	4618      	mov	r0, r3
 8011124:	f7fd fa4d 	bl	800e5c2 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8011128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801112a:	331a      	adds	r3, #26
 801112c:	21ff      	movs	r1, #255	; 0xff
 801112e:	4618      	mov	r0, r3
 8011130:	f7fd fa47 	bl	800e5c2 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8011134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011136:	331c      	adds	r3, #28
 8011138:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801113a:	4618      	mov	r0, r3
 801113c:	f7fd fa5c 	bl	800e5f8 <st_dword>
		if (fmt == FS_FAT32) {
 8011140:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011144:	2b03      	cmp	r3, #3
 8011146:	d131      	bne.n	80111ac <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8011148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801114a:	f103 0443 	add.w	r4, r3, #67	; 0x43
 801114e:	f7fd f891 	bl	800e274 <get_fattime>
 8011152:	4603      	mov	r3, r0
 8011154:	4619      	mov	r1, r3
 8011156:	4620      	mov	r0, r4
 8011158:	f7fd fa4e 	bl	800e5f8 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 801115c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801115e:	3324      	adds	r3, #36	; 0x24
 8011160:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8011162:	4618      	mov	r0, r3
 8011164:	f7fd fa48 	bl	800e5f8 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8011168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801116a:	332c      	adds	r3, #44	; 0x2c
 801116c:	2102      	movs	r1, #2
 801116e:	4618      	mov	r0, r3
 8011170:	f7fd fa42 	bl	800e5f8 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8011174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011176:	3330      	adds	r3, #48	; 0x30
 8011178:	2101      	movs	r1, #1
 801117a:	4618      	mov	r0, r3
 801117c:	f7fd fa21 	bl	800e5c2 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8011180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011182:	3332      	adds	r3, #50	; 0x32
 8011184:	2106      	movs	r1, #6
 8011186:	4618      	mov	r0, r3
 8011188:	f7fd fa1b 	bl	800e5c2 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 801118c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801118e:	3340      	adds	r3, #64	; 0x40
 8011190:	2280      	movs	r2, #128	; 0x80
 8011192:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8011194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011196:	3342      	adds	r3, #66	; 0x42
 8011198:	2229      	movs	r2, #41	; 0x29
 801119a:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 801119c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801119e:	3347      	adds	r3, #71	; 0x47
 80111a0:	2213      	movs	r2, #19
 80111a2:	4970      	ldr	r1, [pc, #448]	; (8011364 <f_mkfs+0x6ec>)
 80111a4:	4618      	mov	r0, r3
 80111a6:	f7fd fa53 	bl	800e650 <mem_cpy>
 80111aa:	e020      	b.n	80111ee <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 80111ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111ae:	f103 0427 	add.w	r4, r3, #39	; 0x27
 80111b2:	f7fd f85f 	bl	800e274 <get_fattime>
 80111b6:	4603      	mov	r3, r0
 80111b8:	4619      	mov	r1, r3
 80111ba:	4620      	mov	r0, r4
 80111bc:	f7fd fa1c 	bl	800e5f8 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 80111c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111c2:	3316      	adds	r3, #22
 80111c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80111c6:	b292      	uxth	r2, r2
 80111c8:	4611      	mov	r1, r2
 80111ca:	4618      	mov	r0, r3
 80111cc:	f7fd f9f9 	bl	800e5c2 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 80111d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111d2:	3324      	adds	r3, #36	; 0x24
 80111d4:	2280      	movs	r2, #128	; 0x80
 80111d6:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 80111d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111da:	3326      	adds	r3, #38	; 0x26
 80111dc:	2229      	movs	r2, #41	; 0x29
 80111de:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 80111e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111e2:	332b      	adds	r3, #43	; 0x2b
 80111e4:	2213      	movs	r2, #19
 80111e6:	4960      	ldr	r1, [pc, #384]	; (8011368 <f_mkfs+0x6f0>)
 80111e8:	4618      	mov	r0, r3
 80111ea:	f7fd fa31 	bl	800e650 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 80111ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111f0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80111f4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80111f8:	4618      	mov	r0, r3
 80111fa:	f7fd f9e2 	bl	800e5c2 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 80111fe:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8011202:	2301      	movs	r3, #1
 8011204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011206:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011208:	f7fd f962 	bl	800e4d0 <disk_write>
 801120c:	4603      	mov	r3, r0
 801120e:	2b00      	cmp	r3, #0
 8011210:	d001      	beq.n	8011216 <f_mkfs+0x59e>
 8011212:	2301      	movs	r3, #1
 8011214:	e156      	b.n	80114c4 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8011216:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801121a:	2b03      	cmp	r3, #3
 801121c:	d140      	bne.n	80112a0 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 801121e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011220:	1d9a      	adds	r2, r3, #6
 8011222:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8011226:	2301      	movs	r3, #1
 8011228:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801122a:	f7fd f951 	bl	800e4d0 <disk_write>
			mem_set(buf, 0, ss);
 801122e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011230:	461a      	mov	r2, r3
 8011232:	2100      	movs	r1, #0
 8011234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011236:	f7fd fa2c 	bl	800e692 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 801123a:	494c      	ldr	r1, [pc, #304]	; (801136c <f_mkfs+0x6f4>)
 801123c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801123e:	f7fd f9db 	bl	800e5f8 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8011242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011244:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011248:	4949      	ldr	r1, [pc, #292]	; (8011370 <f_mkfs+0x6f8>)
 801124a:	4618      	mov	r0, r3
 801124c:	f7fd f9d4 	bl	800e5f8 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8011250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011252:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011256:	6a3b      	ldr	r3, [r7, #32]
 8011258:	3b01      	subs	r3, #1
 801125a:	4619      	mov	r1, r3
 801125c:	4610      	mov	r0, r2
 801125e:	f7fd f9cb 	bl	800e5f8 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8011262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011264:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8011268:	2102      	movs	r1, #2
 801126a:	4618      	mov	r0, r3
 801126c:	f7fd f9c4 	bl	800e5f8 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8011270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011272:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011276:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801127a:	4618      	mov	r0, r3
 801127c:	f7fd f9a1 	bl	800e5c2 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8011280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011282:	1dda      	adds	r2, r3, #7
 8011284:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8011288:	2301      	movs	r3, #1
 801128a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801128c:	f7fd f920 	bl	800e4d0 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8011290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011292:	1c5a      	adds	r2, r3, #1
 8011294:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8011298:	2301      	movs	r3, #1
 801129a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801129c:	f7fd f918 	bl	800e4d0 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 80112a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80112a2:	2100      	movs	r1, #0
 80112a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80112a6:	f7fd f9f4 	bl	800e692 <mem_set>
		sect = b_fat;		/* FAT start sector */
 80112aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80112ac:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 80112ae:	2300      	movs	r3, #0
 80112b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80112b2:	e04b      	b.n	801134c <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 80112b4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80112b8:	2b03      	cmp	r3, #3
 80112ba:	d113      	bne.n	80112e4 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 80112bc:	f06f 0107 	mvn.w	r1, #7
 80112c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80112c2:	f7fd f999 	bl	800e5f8 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 80112c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112c8:	3304      	adds	r3, #4
 80112ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80112ce:	4618      	mov	r0, r3
 80112d0:	f7fd f992 	bl	800e5f8 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 80112d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112d6:	3308      	adds	r3, #8
 80112d8:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80112dc:	4618      	mov	r0, r3
 80112de:	f7fd f98b 	bl	800e5f8 <st_dword>
 80112e2:	e00b      	b.n	80112fc <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 80112e4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80112e8:	2b01      	cmp	r3, #1
 80112ea:	d101      	bne.n	80112f0 <f_mkfs+0x678>
 80112ec:	4b21      	ldr	r3, [pc, #132]	; (8011374 <f_mkfs+0x6fc>)
 80112ee:	e001      	b.n	80112f4 <f_mkfs+0x67c>
 80112f0:	f06f 0307 	mvn.w	r3, #7
 80112f4:	4619      	mov	r1, r3
 80112f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80112f8:	f7fd f97e 	bl	800e5f8 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 80112fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80112fe:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8011300:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011304:	4293      	cmp	r3, r2
 8011306:	bf28      	it	cs
 8011308:	4613      	movcs	r3, r2
 801130a:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 801130c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8011310:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011312:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011314:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011316:	f7fd f8db 	bl	800e4d0 <disk_write>
 801131a:	4603      	mov	r3, r0
 801131c:	2b00      	cmp	r3, #0
 801131e:	d001      	beq.n	8011324 <f_mkfs+0x6ac>
 8011320:	2301      	movs	r3, #1
 8011322:	e0cf      	b.n	80114c4 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 8011324:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011326:	461a      	mov	r2, r3
 8011328:	2100      	movs	r1, #0
 801132a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801132c:	f7fd f9b1 	bl	800e692 <mem_set>
				sect += n; nsect -= n;
 8011330:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011332:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011334:	4413      	add	r3, r2
 8011336:	667b      	str	r3, [r7, #100]	; 0x64
 8011338:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801133a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801133c:	1ad3      	subs	r3, r2, r3
 801133e:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 8011340:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011342:	2b00      	cmp	r3, #0
 8011344:	d1dc      	bne.n	8011300 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8011346:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011348:	3301      	adds	r3, #1
 801134a:	64bb      	str	r3, [r7, #72]	; 0x48
 801134c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801134e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011350:	429a      	cmp	r2, r3
 8011352:	d3af      	bcc.n	80112b4 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8011354:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011358:	2b03      	cmp	r3, #3
 801135a:	d10d      	bne.n	8011378 <f_mkfs+0x700>
 801135c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801135e:	e00c      	b.n	801137a <f_mkfs+0x702>
 8011360:	0801681c 	.word	0x0801681c
 8011364:	08016828 	.word	0x08016828
 8011368:	0801683c 	.word	0x0801683c
 801136c:	41615252 	.word	0x41615252
 8011370:	61417272 	.word	0x61417272
 8011374:	00fffff8 	.word	0x00fffff8
 8011378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801137a:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 801137c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801137e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011380:	4293      	cmp	r3, r2
 8011382:	bf28      	it	cs
 8011384:	4613      	movcs	r3, r2
 8011386:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8011388:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801138c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801138e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011390:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011392:	f7fd f89d 	bl	800e4d0 <disk_write>
 8011396:	4603      	mov	r3, r0
 8011398:	2b00      	cmp	r3, #0
 801139a:	d001      	beq.n	80113a0 <f_mkfs+0x728>
 801139c:	2301      	movs	r3, #1
 801139e:	e091      	b.n	80114c4 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 80113a0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80113a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80113a4:	4413      	add	r3, r2
 80113a6:	667b      	str	r3, [r7, #100]	; 0x64
 80113a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80113aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80113ac:	1ad3      	subs	r3, r2, r3
 80113ae:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 80113b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d1e2      	bne.n	801137c <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 80113b6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80113ba:	2b03      	cmp	r3, #3
 80113bc:	d103      	bne.n	80113c6 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 80113be:	230c      	movs	r3, #12
 80113c0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80113c4:	e010      	b.n	80113e8 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 80113c6:	693b      	ldr	r3, [r7, #16]
 80113c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80113cc:	d303      	bcc.n	80113d6 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 80113ce:	2306      	movs	r3, #6
 80113d0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80113d4:	e008      	b.n	80113e8 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 80113d6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80113da:	2b02      	cmp	r3, #2
 80113dc:	d101      	bne.n	80113e2 <f_mkfs+0x76a>
 80113de:	2304      	movs	r3, #4
 80113e0:	e000      	b.n	80113e4 <f_mkfs+0x76c>
 80113e2:	2301      	movs	r3, #1
 80113e4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 80113e8:	7afb      	ldrb	r3, [r7, #11]
 80113ea:	f003 0308 	and.w	r3, r3, #8
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d15b      	bne.n	80114aa <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 80113f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80113f4:	461a      	mov	r2, r3
 80113f6:	2100      	movs	r1, #0
 80113f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80113fa:	f7fd f94a 	bl	800e692 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 80113fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011400:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011404:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011408:	4618      	mov	r0, r3
 801140a:	f7fd f8da 	bl	800e5c2 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 801140e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011410:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8011414:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8011416:	69bb      	ldr	r3, [r7, #24]
 8011418:	2200      	movs	r2, #0
 801141a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 801141c:	69bb      	ldr	r3, [r7, #24]
 801141e:	3301      	adds	r3, #1
 8011420:	2201      	movs	r2, #1
 8011422:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8011424:	69bb      	ldr	r3, [r7, #24]
 8011426:	3302      	adds	r3, #2
 8011428:	2201      	movs	r2, #1
 801142a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 801142c:	69bb      	ldr	r3, [r7, #24]
 801142e:	3303      	adds	r3, #3
 8011430:	2200      	movs	r2, #0
 8011432:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8011434:	69bb      	ldr	r3, [r7, #24]
 8011436:	3304      	adds	r3, #4
 8011438:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 801143c:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 801143e:	693a      	ldr	r2, [r7, #16]
 8011440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011442:	441a      	add	r2, r3
 8011444:	4b21      	ldr	r3, [pc, #132]	; (80114cc <f_mkfs+0x854>)
 8011446:	fba3 1302 	umull	r1, r3, r3, r2
 801144a:	1ad2      	subs	r2, r2, r3
 801144c:	0852      	lsrs	r2, r2, #1
 801144e:	4413      	add	r3, r2
 8011450:	0b5b      	lsrs	r3, r3, #13
 8011452:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 8011454:	69bb      	ldr	r3, [r7, #24]
 8011456:	3305      	adds	r3, #5
 8011458:	22fe      	movs	r2, #254	; 0xfe
 801145a:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 801145c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801145e:	089b      	lsrs	r3, r3, #2
 8011460:	b2da      	uxtb	r2, r3
 8011462:	69bb      	ldr	r3, [r7, #24]
 8011464:	3306      	adds	r3, #6
 8011466:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 801146a:	b2d2      	uxtb	r2, r2
 801146c:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 801146e:	69bb      	ldr	r3, [r7, #24]
 8011470:	3307      	adds	r3, #7
 8011472:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011474:	b2d2      	uxtb	r2, r2
 8011476:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8011478:	69bb      	ldr	r3, [r7, #24]
 801147a:	3308      	adds	r3, #8
 801147c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801147e:	4618      	mov	r0, r3
 8011480:	f7fd f8ba 	bl	800e5f8 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8011484:	69bb      	ldr	r3, [r7, #24]
 8011486:	330c      	adds	r3, #12
 8011488:	693a      	ldr	r2, [r7, #16]
 801148a:	4611      	mov	r1, r2
 801148c:	4618      	mov	r0, r3
 801148e:	f7fd f8b3 	bl	800e5f8 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8011492:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8011496:	2301      	movs	r3, #1
 8011498:	2200      	movs	r2, #0
 801149a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801149c:	f7fd f818 	bl	800e4d0 <disk_write>
 80114a0:	4603      	mov	r3, r0
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d001      	beq.n	80114aa <f_mkfs+0x832>
 80114a6:	2301      	movs	r3, #1
 80114a8:	e00c      	b.n	80114c4 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 80114aa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80114ae:	2200      	movs	r2, #0
 80114b0:	2100      	movs	r1, #0
 80114b2:	4618      	mov	r0, r3
 80114b4:	f7fd f82c 	bl	800e510 <disk_ioctl>
 80114b8:	4603      	mov	r3, r0
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d001      	beq.n	80114c2 <f_mkfs+0x84a>
 80114be:	2301      	movs	r3, #1
 80114c0:	e000      	b.n	80114c4 <f_mkfs+0x84c>

	return FR_OK;
 80114c2:	2300      	movs	r3, #0
}
 80114c4:	4618      	mov	r0, r3
 80114c6:	3774      	adds	r7, #116	; 0x74
 80114c8:	46bd      	mov	sp, r7
 80114ca:	bd90      	pop	{r4, r7, pc}
 80114cc:	0515565b 	.word	0x0515565b

080114d0 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80114d0:	b580      	push	{r7, lr}
 80114d2:	b088      	sub	sp, #32
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	60f8      	str	r0, [r7, #12]
 80114d8:	60b9      	str	r1, [r7, #8]
 80114da:	607a      	str	r2, [r7, #4]
	int n = 0;
 80114dc:	2300      	movs	r3, #0
 80114de:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80114e4:	e01b      	b.n	801151e <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80114e6:	f107 0310 	add.w	r3, r7, #16
 80114ea:	f107 0114 	add.w	r1, r7, #20
 80114ee:	2201      	movs	r2, #1
 80114f0:	6878      	ldr	r0, [r7, #4]
 80114f2:	f7fe ff8f 	bl	8010414 <f_read>
		if (rc != 1) break;
 80114f6:	693b      	ldr	r3, [r7, #16]
 80114f8:	2b01      	cmp	r3, #1
 80114fa:	d116      	bne.n	801152a <f_gets+0x5a>
		c = s[0];
 80114fc:	7d3b      	ldrb	r3, [r7, #20]
 80114fe:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8011500:	7dfb      	ldrb	r3, [r7, #23]
 8011502:	2b0d      	cmp	r3, #13
 8011504:	d100      	bne.n	8011508 <f_gets+0x38>
 8011506:	e00a      	b.n	801151e <f_gets+0x4e>
		*p++ = c;
 8011508:	69bb      	ldr	r3, [r7, #24]
 801150a:	1c5a      	adds	r2, r3, #1
 801150c:	61ba      	str	r2, [r7, #24]
 801150e:	7dfa      	ldrb	r2, [r7, #23]
 8011510:	701a      	strb	r2, [r3, #0]
		n++;
 8011512:	69fb      	ldr	r3, [r7, #28]
 8011514:	3301      	adds	r3, #1
 8011516:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8011518:	7dfb      	ldrb	r3, [r7, #23]
 801151a:	2b0a      	cmp	r3, #10
 801151c:	d007      	beq.n	801152e <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801151e:	68bb      	ldr	r3, [r7, #8]
 8011520:	3b01      	subs	r3, #1
 8011522:	69fa      	ldr	r2, [r7, #28]
 8011524:	429a      	cmp	r2, r3
 8011526:	dbde      	blt.n	80114e6 <f_gets+0x16>
 8011528:	e002      	b.n	8011530 <f_gets+0x60>
		if (rc != 1) break;
 801152a:	bf00      	nop
 801152c:	e000      	b.n	8011530 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 801152e:	bf00      	nop
	}
	*p = 0;
 8011530:	69bb      	ldr	r3, [r7, #24]
 8011532:	2200      	movs	r2, #0
 8011534:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8011536:	69fb      	ldr	r3, [r7, #28]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d001      	beq.n	8011540 <f_gets+0x70>
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	e000      	b.n	8011542 <f_gets+0x72>
 8011540:	2300      	movs	r3, #0
}
 8011542:	4618      	mov	r0, r3
 8011544:	3720      	adds	r7, #32
 8011546:	46bd      	mov	sp, r7
 8011548:	bd80      	pop	{r7, pc}

0801154a <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 801154a:	b580      	push	{r7, lr}
 801154c:	b084      	sub	sp, #16
 801154e:	af00      	add	r7, sp, #0
 8011550:	6078      	str	r0, [r7, #4]
 8011552:	460b      	mov	r3, r1
 8011554:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8011556:	78fb      	ldrb	r3, [r7, #3]
 8011558:	2b0a      	cmp	r3, #10
 801155a:	d103      	bne.n	8011564 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 801155c:	210d      	movs	r1, #13
 801155e:	6878      	ldr	r0, [r7, #4]
 8011560:	f7ff fff3 	bl	801154a <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	685b      	ldr	r3, [r3, #4]
 8011568:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	2b00      	cmp	r3, #0
 801156e:	db25      	blt.n	80115bc <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	1c5a      	adds	r2, r3, #1
 8011574:	60fa      	str	r2, [r7, #12]
 8011576:	687a      	ldr	r2, [r7, #4]
 8011578:	4413      	add	r3, r2
 801157a:	78fa      	ldrb	r2, [r7, #3]
 801157c:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	2b3c      	cmp	r3, #60	; 0x3c
 8011582:	dd12      	ble.n	80115aa <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	6818      	ldr	r0, [r3, #0]
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	f103 010c 	add.w	r1, r3, #12
 801158e:	68fa      	ldr	r2, [r7, #12]
 8011590:	f107 0308 	add.w	r3, r7, #8
 8011594:	f7ff f87d 	bl	8010692 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8011598:	68ba      	ldr	r2, [r7, #8]
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	429a      	cmp	r2, r3
 801159e:	d101      	bne.n	80115a4 <putc_bfd+0x5a>
 80115a0:	2300      	movs	r3, #0
 80115a2:	e001      	b.n	80115a8 <putc_bfd+0x5e>
 80115a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80115a8:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	68fa      	ldr	r2, [r7, #12]
 80115ae:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	689b      	ldr	r3, [r3, #8]
 80115b4:	1c5a      	adds	r2, r3, #1
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	609a      	str	r2, [r3, #8]
 80115ba:	e000      	b.n	80115be <putc_bfd+0x74>
	if (i < 0) return;
 80115bc:	bf00      	nop
}
 80115be:	3710      	adds	r7, #16
 80115c0:	46bd      	mov	sp, r7
 80115c2:	bd80      	pop	{r7, pc}

080115c4 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80115c4:	b580      	push	{r7, lr}
 80115c6:	b084      	sub	sp, #16
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	685b      	ldr	r3, [r3, #4]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	db16      	blt.n	8011602 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	6818      	ldr	r0, [r3, #0]
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	f103 010c 	add.w	r1, r3, #12
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	685b      	ldr	r3, [r3, #4]
 80115e2:	461a      	mov	r2, r3
 80115e4:	f107 030c 	add.w	r3, r7, #12
 80115e8:	f7ff f853 	bl	8010692 <f_write>
 80115ec:	4603      	mov	r3, r0
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d107      	bne.n	8011602 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	685b      	ldr	r3, [r3, #4]
 80115f6:	68fa      	ldr	r2, [r7, #12]
 80115f8:	4293      	cmp	r3, r2
 80115fa:	d102      	bne.n	8011602 <putc_flush+0x3e>
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	689b      	ldr	r3, [r3, #8]
 8011600:	e001      	b.n	8011606 <putc_flush+0x42>
	return EOF;
 8011602:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8011606:	4618      	mov	r0, r3
 8011608:	3710      	adds	r7, #16
 801160a:	46bd      	mov	sp, r7
 801160c:	bd80      	pop	{r7, pc}

0801160e <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 801160e:	b480      	push	{r7}
 8011610:	b083      	sub	sp, #12
 8011612:	af00      	add	r7, sp, #0
 8011614:	6078      	str	r0, [r7, #4]
 8011616:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	683a      	ldr	r2, [r7, #0]
 801161c:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	2200      	movs	r2, #0
 8011622:	605a      	str	r2, [r3, #4]
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	685a      	ldr	r2, [r3, #4]
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	609a      	str	r2, [r3, #8]
}
 801162c:	bf00      	nop
 801162e:	370c      	adds	r7, #12
 8011630:	46bd      	mov	sp, r7
 8011632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011636:	4770      	bx	lr

08011638 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8011638:	b580      	push	{r7, lr}
 801163a:	b096      	sub	sp, #88	; 0x58
 801163c:	af00      	add	r7, sp, #0
 801163e:	6078      	str	r0, [r7, #4]
 8011640:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8011642:	f107 030c 	add.w	r3, r7, #12
 8011646:	6839      	ldr	r1, [r7, #0]
 8011648:	4618      	mov	r0, r3
 801164a:	f7ff ffe0 	bl	801160e <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 801164e:	e009      	b.n	8011664 <f_puts+0x2c>
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	1c5a      	adds	r2, r3, #1
 8011654:	607a      	str	r2, [r7, #4]
 8011656:	781a      	ldrb	r2, [r3, #0]
 8011658:	f107 030c 	add.w	r3, r7, #12
 801165c:	4611      	mov	r1, r2
 801165e:	4618      	mov	r0, r3
 8011660:	f7ff ff73 	bl	801154a <putc_bfd>
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	781b      	ldrb	r3, [r3, #0]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d1f1      	bne.n	8011650 <f_puts+0x18>
	return putc_flush(&pb);
 801166c:	f107 030c 	add.w	r3, r7, #12
 8011670:	4618      	mov	r0, r3
 8011672:	f7ff ffa7 	bl	80115c4 <putc_flush>
 8011676:	4603      	mov	r3, r0
}
 8011678:	4618      	mov	r0, r3
 801167a:	3758      	adds	r7, #88	; 0x58
 801167c:	46bd      	mov	sp, r7
 801167e:	bd80      	pop	{r7, pc}

08011680 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011680:	b480      	push	{r7}
 8011682:	b087      	sub	sp, #28
 8011684:	af00      	add	r7, sp, #0
 8011686:	60f8      	str	r0, [r7, #12]
 8011688:	60b9      	str	r1, [r7, #8]
 801168a:	4613      	mov	r3, r2
 801168c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801168e:	2301      	movs	r3, #1
 8011690:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011692:	2300      	movs	r3, #0
 8011694:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011696:	4b1f      	ldr	r3, [pc, #124]	; (8011714 <FATFS_LinkDriverEx+0x94>)
 8011698:	7a5b      	ldrb	r3, [r3, #9]
 801169a:	b2db      	uxtb	r3, r3
 801169c:	2b00      	cmp	r3, #0
 801169e:	d131      	bne.n	8011704 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80116a0:	4b1c      	ldr	r3, [pc, #112]	; (8011714 <FATFS_LinkDriverEx+0x94>)
 80116a2:	7a5b      	ldrb	r3, [r3, #9]
 80116a4:	b2db      	uxtb	r3, r3
 80116a6:	461a      	mov	r2, r3
 80116a8:	4b1a      	ldr	r3, [pc, #104]	; (8011714 <FATFS_LinkDriverEx+0x94>)
 80116aa:	2100      	movs	r1, #0
 80116ac:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80116ae:	4b19      	ldr	r3, [pc, #100]	; (8011714 <FATFS_LinkDriverEx+0x94>)
 80116b0:	7a5b      	ldrb	r3, [r3, #9]
 80116b2:	b2db      	uxtb	r3, r3
 80116b4:	4a17      	ldr	r2, [pc, #92]	; (8011714 <FATFS_LinkDriverEx+0x94>)
 80116b6:	009b      	lsls	r3, r3, #2
 80116b8:	4413      	add	r3, r2
 80116ba:	68fa      	ldr	r2, [r7, #12]
 80116bc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80116be:	4b15      	ldr	r3, [pc, #84]	; (8011714 <FATFS_LinkDriverEx+0x94>)
 80116c0:	7a5b      	ldrb	r3, [r3, #9]
 80116c2:	b2db      	uxtb	r3, r3
 80116c4:	461a      	mov	r2, r3
 80116c6:	4b13      	ldr	r3, [pc, #76]	; (8011714 <FATFS_LinkDriverEx+0x94>)
 80116c8:	4413      	add	r3, r2
 80116ca:	79fa      	ldrb	r2, [r7, #7]
 80116cc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80116ce:	4b11      	ldr	r3, [pc, #68]	; (8011714 <FATFS_LinkDriverEx+0x94>)
 80116d0:	7a5b      	ldrb	r3, [r3, #9]
 80116d2:	b2db      	uxtb	r3, r3
 80116d4:	1c5a      	adds	r2, r3, #1
 80116d6:	b2d1      	uxtb	r1, r2
 80116d8:	4a0e      	ldr	r2, [pc, #56]	; (8011714 <FATFS_LinkDriverEx+0x94>)
 80116da:	7251      	strb	r1, [r2, #9]
 80116dc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80116de:	7dbb      	ldrb	r3, [r7, #22]
 80116e0:	3330      	adds	r3, #48	; 0x30
 80116e2:	b2da      	uxtb	r2, r3
 80116e4:	68bb      	ldr	r3, [r7, #8]
 80116e6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80116e8:	68bb      	ldr	r3, [r7, #8]
 80116ea:	3301      	adds	r3, #1
 80116ec:	223a      	movs	r2, #58	; 0x3a
 80116ee:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80116f0:	68bb      	ldr	r3, [r7, #8]
 80116f2:	3302      	adds	r3, #2
 80116f4:	222f      	movs	r2, #47	; 0x2f
 80116f6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80116f8:	68bb      	ldr	r3, [r7, #8]
 80116fa:	3303      	adds	r3, #3
 80116fc:	2200      	movs	r2, #0
 80116fe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011700:	2300      	movs	r3, #0
 8011702:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011704:	7dfb      	ldrb	r3, [r7, #23]
}
 8011706:	4618      	mov	r0, r3
 8011708:	371c      	adds	r7, #28
 801170a:	46bd      	mov	sp, r7
 801170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011710:	4770      	bx	lr
 8011712:	bf00      	nop
 8011714:	20003e64 	.word	0x20003e64

08011718 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011718:	b580      	push	{r7, lr}
 801171a:	b082      	sub	sp, #8
 801171c:	af00      	add	r7, sp, #0
 801171e:	6078      	str	r0, [r7, #4]
 8011720:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011722:	2200      	movs	r2, #0
 8011724:	6839      	ldr	r1, [r7, #0]
 8011726:	6878      	ldr	r0, [r7, #4]
 8011728:	f7ff ffaa 	bl	8011680 <FATFS_LinkDriverEx>
 801172c:	4603      	mov	r3, r0
}
 801172e:	4618      	mov	r0, r3
 8011730:	3708      	adds	r7, #8
 8011732:	46bd      	mov	sp, r7
 8011734:	bd80      	pop	{r7, pc}

08011736 <atof>:
 8011736:	2100      	movs	r1, #0
 8011738:	f001 bbd8 	b.w	8012eec <strtod>

0801173c <atoi>:
 801173c:	220a      	movs	r2, #10
 801173e:	2100      	movs	r1, #0
 8011740:	f001 bc62 	b.w	8013008 <strtol>

08011744 <atol>:
 8011744:	220a      	movs	r2, #10
 8011746:	2100      	movs	r1, #0
 8011748:	f001 bc5e 	b.w	8013008 <strtol>

0801174c <__errno>:
 801174c:	4b01      	ldr	r3, [pc, #4]	; (8011754 <__errno+0x8>)
 801174e:	6818      	ldr	r0, [r3, #0]
 8011750:	4770      	bx	lr
 8011752:	bf00      	nop
 8011754:	20000234 	.word	0x20000234

08011758 <gmtime_r>:
 8011758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801175c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8011760:	460c      	mov	r4, r1
 8011762:	4a4f      	ldr	r2, [pc, #316]	; (80118a0 <gmtime_r+0x148>)
 8011764:	2300      	movs	r3, #0
 8011766:	4630      	mov	r0, r6
 8011768:	4639      	mov	r1, r7
 801176a:	f7ef fa8d 	bl	8000c88 <__aeabi_ldivmod>
 801176e:	4639      	mov	r1, r7
 8011770:	4605      	mov	r5, r0
 8011772:	4a4b      	ldr	r2, [pc, #300]	; (80118a0 <gmtime_r+0x148>)
 8011774:	4630      	mov	r0, r6
 8011776:	2300      	movs	r3, #0
 8011778:	f7ef fa86 	bl	8000c88 <__aeabi_ldivmod>
 801177c:	2a00      	cmp	r2, #0
 801177e:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8011782:	bfb7      	itett	lt
 8011784:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8011788:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 801178c:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 8011790:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8011794:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8011798:	fbb2 f1f0 	udiv	r1, r2, r0
 801179c:	fb00 2211 	mls	r2, r0, r1, r2
 80117a0:	203c      	movs	r0, #60	; 0x3c
 80117a2:	60a1      	str	r1, [r4, #8]
 80117a4:	fbb2 f1f0 	udiv	r1, r2, r0
 80117a8:	fb00 2211 	mls	r2, r0, r1, r2
 80117ac:	6061      	str	r1, [r4, #4]
 80117ae:	6022      	str	r2, [r4, #0]
 80117b0:	2107      	movs	r1, #7
 80117b2:	1cda      	adds	r2, r3, #3
 80117b4:	fb92 f1f1 	sdiv	r1, r2, r1
 80117b8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80117bc:	1a52      	subs	r2, r2, r1
 80117be:	bf48      	it	mi
 80117c0:	3207      	addmi	r2, #7
 80117c2:	4d38      	ldr	r5, [pc, #224]	; (80118a4 <gmtime_r+0x14c>)
 80117c4:	4838      	ldr	r0, [pc, #224]	; (80118a8 <gmtime_r+0x150>)
 80117c6:	61a2      	str	r2, [r4, #24]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	bfb7      	itett	lt
 80117cc:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 80117d0:	fb93 f5f5 	sdivge	r5, r3, r5
 80117d4:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 80117d8:	fb92 f5f5 	sdivlt	r5, r2, r5
 80117dc:	fb00 3005 	mla	r0, r0, r5, r3
 80117e0:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80117e4:	fbb0 f2f2 	udiv	r2, r0, r2
 80117e8:	4402      	add	r2, r0
 80117ea:	f240 53b4 	movw	r3, #1460	; 0x5b4
 80117ee:	fbb0 f1f3 	udiv	r1, r0, r3
 80117f2:	1a52      	subs	r2, r2, r1
 80117f4:	f240 1c6d 	movw	ip, #365	; 0x16d
 80117f8:	492c      	ldr	r1, [pc, #176]	; (80118ac <gmtime_r+0x154>)
 80117fa:	fbb0 f1f1 	udiv	r1, r0, r1
 80117fe:	2764      	movs	r7, #100	; 0x64
 8011800:	1a52      	subs	r2, r2, r1
 8011802:	fbb2 f1fc 	udiv	r1, r2, ip
 8011806:	fbb2 f3f3 	udiv	r3, r2, r3
 801180a:	fbb1 f6f7 	udiv	r6, r1, r7
 801180e:	1af3      	subs	r3, r6, r3
 8011810:	4403      	add	r3, r0
 8011812:	fb0c 3311 	mls	r3, ip, r1, r3
 8011816:	2299      	movs	r2, #153	; 0x99
 8011818:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 801181c:	f10e 0e02 	add.w	lr, lr, #2
 8011820:	f103 0c01 	add.w	ip, r3, #1
 8011824:	fbbe f0f2 	udiv	r0, lr, r2
 8011828:	4342      	muls	r2, r0
 801182a:	3202      	adds	r2, #2
 801182c:	f04f 0805 	mov.w	r8, #5
 8011830:	fbb2 f2f8 	udiv	r2, r2, r8
 8011834:	ebac 0c02 	sub.w	ip, ip, r2
 8011838:	f240 52f9 	movw	r2, #1529	; 0x5f9
 801183c:	4596      	cmp	lr, r2
 801183e:	bf94      	ite	ls
 8011840:	2202      	movls	r2, #2
 8011842:	f06f 0209 	mvnhi.w	r2, #9
 8011846:	4410      	add	r0, r2
 8011848:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801184c:	fb02 1505 	mla	r5, r2, r5, r1
 8011850:	2801      	cmp	r0, #1
 8011852:	bf98      	it	ls
 8011854:	3501      	addls	r5, #1
 8011856:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 801185a:	d30d      	bcc.n	8011878 <gmtime_r+0x120>
 801185c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8011860:	61e3      	str	r3, [r4, #28]
 8011862:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8011866:	2300      	movs	r3, #0
 8011868:	e9c4 0504 	strd	r0, r5, [r4, #16]
 801186c:	f8c4 c00c 	str.w	ip, [r4, #12]
 8011870:	6223      	str	r3, [r4, #32]
 8011872:	4620      	mov	r0, r4
 8011874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011878:	078a      	lsls	r2, r1, #30
 801187a:	d102      	bne.n	8011882 <gmtime_r+0x12a>
 801187c:	fb07 1616 	mls	r6, r7, r6, r1
 8011880:	b95e      	cbnz	r6, 801189a <gmtime_r+0x142>
 8011882:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8011886:	fbb1 f6f2 	udiv	r6, r1, r2
 801188a:	fb02 1216 	mls	r2, r2, r6, r1
 801188e:	fab2 f282 	clz	r2, r2
 8011892:	0952      	lsrs	r2, r2, #5
 8011894:	333b      	adds	r3, #59	; 0x3b
 8011896:	4413      	add	r3, r2
 8011898:	e7e2      	b.n	8011860 <gmtime_r+0x108>
 801189a:	2201      	movs	r2, #1
 801189c:	e7fa      	b.n	8011894 <gmtime_r+0x13c>
 801189e:	bf00      	nop
 80118a0:	00015180 	.word	0x00015180
 80118a4:	00023ab1 	.word	0x00023ab1
 80118a8:	fffdc54f 	.word	0xfffdc54f
 80118ac:	00023ab0 	.word	0x00023ab0

080118b0 <__libc_init_array>:
 80118b0:	b570      	push	{r4, r5, r6, lr}
 80118b2:	4d0d      	ldr	r5, [pc, #52]	; (80118e8 <__libc_init_array+0x38>)
 80118b4:	4c0d      	ldr	r4, [pc, #52]	; (80118ec <__libc_init_array+0x3c>)
 80118b6:	1b64      	subs	r4, r4, r5
 80118b8:	10a4      	asrs	r4, r4, #2
 80118ba:	2600      	movs	r6, #0
 80118bc:	42a6      	cmp	r6, r4
 80118be:	d109      	bne.n	80118d4 <__libc_init_array+0x24>
 80118c0:	4d0b      	ldr	r5, [pc, #44]	; (80118f0 <__libc_init_array+0x40>)
 80118c2:	4c0c      	ldr	r4, [pc, #48]	; (80118f4 <__libc_init_array+0x44>)
 80118c4:	f004 fae2 	bl	8015e8c <_init>
 80118c8:	1b64      	subs	r4, r4, r5
 80118ca:	10a4      	asrs	r4, r4, #2
 80118cc:	2600      	movs	r6, #0
 80118ce:	42a6      	cmp	r6, r4
 80118d0:	d105      	bne.n	80118de <__libc_init_array+0x2e>
 80118d2:	bd70      	pop	{r4, r5, r6, pc}
 80118d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80118d8:	4798      	blx	r3
 80118da:	3601      	adds	r6, #1
 80118dc:	e7ee      	b.n	80118bc <__libc_init_array+0xc>
 80118de:	f855 3b04 	ldr.w	r3, [r5], #4
 80118e2:	4798      	blx	r3
 80118e4:	3601      	adds	r6, #1
 80118e6:	e7f2      	b.n	80118ce <__libc_init_array+0x1e>
 80118e8:	08017b8c 	.word	0x08017b8c
 80118ec:	08017b8c 	.word	0x08017b8c
 80118f0:	08017b8c 	.word	0x08017b8c
 80118f4:	08017b90 	.word	0x08017b90

080118f8 <memcpy>:
 80118f8:	440a      	add	r2, r1
 80118fa:	4291      	cmp	r1, r2
 80118fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011900:	d100      	bne.n	8011904 <memcpy+0xc>
 8011902:	4770      	bx	lr
 8011904:	b510      	push	{r4, lr}
 8011906:	f811 4b01 	ldrb.w	r4, [r1], #1
 801190a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801190e:	4291      	cmp	r1, r2
 8011910:	d1f9      	bne.n	8011906 <memcpy+0xe>
 8011912:	bd10      	pop	{r4, pc}

08011914 <memset>:
 8011914:	4402      	add	r2, r0
 8011916:	4603      	mov	r3, r0
 8011918:	4293      	cmp	r3, r2
 801191a:	d100      	bne.n	801191e <memset+0xa>
 801191c:	4770      	bx	lr
 801191e:	f803 1b01 	strb.w	r1, [r3], #1
 8011922:	e7f9      	b.n	8011918 <memset+0x4>

08011924 <__cvt>:
 8011924:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011928:	ec55 4b10 	vmov	r4, r5, d0
 801192c:	2d00      	cmp	r5, #0
 801192e:	460e      	mov	r6, r1
 8011930:	4619      	mov	r1, r3
 8011932:	462b      	mov	r3, r5
 8011934:	bfbb      	ittet	lt
 8011936:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801193a:	461d      	movlt	r5, r3
 801193c:	2300      	movge	r3, #0
 801193e:	232d      	movlt	r3, #45	; 0x2d
 8011940:	700b      	strb	r3, [r1, #0]
 8011942:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011944:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011948:	4691      	mov	r9, r2
 801194a:	f023 0820 	bic.w	r8, r3, #32
 801194e:	bfbc      	itt	lt
 8011950:	4622      	movlt	r2, r4
 8011952:	4614      	movlt	r4, r2
 8011954:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011958:	d005      	beq.n	8011966 <__cvt+0x42>
 801195a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801195e:	d100      	bne.n	8011962 <__cvt+0x3e>
 8011960:	3601      	adds	r6, #1
 8011962:	2102      	movs	r1, #2
 8011964:	e000      	b.n	8011968 <__cvt+0x44>
 8011966:	2103      	movs	r1, #3
 8011968:	ab03      	add	r3, sp, #12
 801196a:	9301      	str	r3, [sp, #4]
 801196c:	ab02      	add	r3, sp, #8
 801196e:	9300      	str	r3, [sp, #0]
 8011970:	ec45 4b10 	vmov	d0, r4, r5
 8011974:	4653      	mov	r3, sl
 8011976:	4632      	mov	r2, r6
 8011978:	f001 fc16 	bl	80131a8 <_dtoa_r>
 801197c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011980:	4607      	mov	r7, r0
 8011982:	d102      	bne.n	801198a <__cvt+0x66>
 8011984:	f019 0f01 	tst.w	r9, #1
 8011988:	d022      	beq.n	80119d0 <__cvt+0xac>
 801198a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801198e:	eb07 0906 	add.w	r9, r7, r6
 8011992:	d110      	bne.n	80119b6 <__cvt+0x92>
 8011994:	783b      	ldrb	r3, [r7, #0]
 8011996:	2b30      	cmp	r3, #48	; 0x30
 8011998:	d10a      	bne.n	80119b0 <__cvt+0x8c>
 801199a:	2200      	movs	r2, #0
 801199c:	2300      	movs	r3, #0
 801199e:	4620      	mov	r0, r4
 80119a0:	4629      	mov	r1, r5
 80119a2:	f7ef f891 	bl	8000ac8 <__aeabi_dcmpeq>
 80119a6:	b918      	cbnz	r0, 80119b0 <__cvt+0x8c>
 80119a8:	f1c6 0601 	rsb	r6, r6, #1
 80119ac:	f8ca 6000 	str.w	r6, [sl]
 80119b0:	f8da 3000 	ldr.w	r3, [sl]
 80119b4:	4499      	add	r9, r3
 80119b6:	2200      	movs	r2, #0
 80119b8:	2300      	movs	r3, #0
 80119ba:	4620      	mov	r0, r4
 80119bc:	4629      	mov	r1, r5
 80119be:	f7ef f883 	bl	8000ac8 <__aeabi_dcmpeq>
 80119c2:	b108      	cbz	r0, 80119c8 <__cvt+0xa4>
 80119c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80119c8:	2230      	movs	r2, #48	; 0x30
 80119ca:	9b03      	ldr	r3, [sp, #12]
 80119cc:	454b      	cmp	r3, r9
 80119ce:	d307      	bcc.n	80119e0 <__cvt+0xbc>
 80119d0:	9b03      	ldr	r3, [sp, #12]
 80119d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80119d4:	1bdb      	subs	r3, r3, r7
 80119d6:	4638      	mov	r0, r7
 80119d8:	6013      	str	r3, [r2, #0]
 80119da:	b004      	add	sp, #16
 80119dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119e0:	1c59      	adds	r1, r3, #1
 80119e2:	9103      	str	r1, [sp, #12]
 80119e4:	701a      	strb	r2, [r3, #0]
 80119e6:	e7f0      	b.n	80119ca <__cvt+0xa6>

080119e8 <__exponent>:
 80119e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80119ea:	4603      	mov	r3, r0
 80119ec:	2900      	cmp	r1, #0
 80119ee:	bfb8      	it	lt
 80119f0:	4249      	neglt	r1, r1
 80119f2:	f803 2b02 	strb.w	r2, [r3], #2
 80119f6:	bfb4      	ite	lt
 80119f8:	222d      	movlt	r2, #45	; 0x2d
 80119fa:	222b      	movge	r2, #43	; 0x2b
 80119fc:	2909      	cmp	r1, #9
 80119fe:	7042      	strb	r2, [r0, #1]
 8011a00:	dd2a      	ble.n	8011a58 <__exponent+0x70>
 8011a02:	f10d 0407 	add.w	r4, sp, #7
 8011a06:	46a4      	mov	ip, r4
 8011a08:	270a      	movs	r7, #10
 8011a0a:	46a6      	mov	lr, r4
 8011a0c:	460a      	mov	r2, r1
 8011a0e:	fb91 f6f7 	sdiv	r6, r1, r7
 8011a12:	fb07 1516 	mls	r5, r7, r6, r1
 8011a16:	3530      	adds	r5, #48	; 0x30
 8011a18:	2a63      	cmp	r2, #99	; 0x63
 8011a1a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8011a1e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011a22:	4631      	mov	r1, r6
 8011a24:	dcf1      	bgt.n	8011a0a <__exponent+0x22>
 8011a26:	3130      	adds	r1, #48	; 0x30
 8011a28:	f1ae 0502 	sub.w	r5, lr, #2
 8011a2c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011a30:	1c44      	adds	r4, r0, #1
 8011a32:	4629      	mov	r1, r5
 8011a34:	4561      	cmp	r1, ip
 8011a36:	d30a      	bcc.n	8011a4e <__exponent+0x66>
 8011a38:	f10d 0209 	add.w	r2, sp, #9
 8011a3c:	eba2 020e 	sub.w	r2, r2, lr
 8011a40:	4565      	cmp	r5, ip
 8011a42:	bf88      	it	hi
 8011a44:	2200      	movhi	r2, #0
 8011a46:	4413      	add	r3, r2
 8011a48:	1a18      	subs	r0, r3, r0
 8011a4a:	b003      	add	sp, #12
 8011a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011a52:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011a56:	e7ed      	b.n	8011a34 <__exponent+0x4c>
 8011a58:	2330      	movs	r3, #48	; 0x30
 8011a5a:	3130      	adds	r1, #48	; 0x30
 8011a5c:	7083      	strb	r3, [r0, #2]
 8011a5e:	70c1      	strb	r1, [r0, #3]
 8011a60:	1d03      	adds	r3, r0, #4
 8011a62:	e7f1      	b.n	8011a48 <__exponent+0x60>

08011a64 <_printf_float>:
 8011a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a68:	ed2d 8b02 	vpush	{d8}
 8011a6c:	b08d      	sub	sp, #52	; 0x34
 8011a6e:	460c      	mov	r4, r1
 8011a70:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011a74:	4616      	mov	r6, r2
 8011a76:	461f      	mov	r7, r3
 8011a78:	4605      	mov	r5, r0
 8011a7a:	f002 fcf3 	bl	8014464 <_localeconv_r>
 8011a7e:	f8d0 a000 	ldr.w	sl, [r0]
 8011a82:	4650      	mov	r0, sl
 8011a84:	f7ee fba4 	bl	80001d0 <strlen>
 8011a88:	2300      	movs	r3, #0
 8011a8a:	930a      	str	r3, [sp, #40]	; 0x28
 8011a8c:	6823      	ldr	r3, [r4, #0]
 8011a8e:	9305      	str	r3, [sp, #20]
 8011a90:	f8d8 3000 	ldr.w	r3, [r8]
 8011a94:	f894 b018 	ldrb.w	fp, [r4, #24]
 8011a98:	3307      	adds	r3, #7
 8011a9a:	f023 0307 	bic.w	r3, r3, #7
 8011a9e:	f103 0208 	add.w	r2, r3, #8
 8011aa2:	f8c8 2000 	str.w	r2, [r8]
 8011aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aaa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011aae:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8011ab2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011ab6:	9307      	str	r3, [sp, #28]
 8011ab8:	f8cd 8018 	str.w	r8, [sp, #24]
 8011abc:	ee08 0a10 	vmov	s16, r0
 8011ac0:	4b9f      	ldr	r3, [pc, #636]	; (8011d40 <_printf_float+0x2dc>)
 8011ac2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011ac6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011aca:	f7ef f82f 	bl	8000b2c <__aeabi_dcmpun>
 8011ace:	bb88      	cbnz	r0, 8011b34 <_printf_float+0xd0>
 8011ad0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011ad4:	4b9a      	ldr	r3, [pc, #616]	; (8011d40 <_printf_float+0x2dc>)
 8011ad6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011ada:	f7ef f809 	bl	8000af0 <__aeabi_dcmple>
 8011ade:	bb48      	cbnz	r0, 8011b34 <_printf_float+0xd0>
 8011ae0:	2200      	movs	r2, #0
 8011ae2:	2300      	movs	r3, #0
 8011ae4:	4640      	mov	r0, r8
 8011ae6:	4649      	mov	r1, r9
 8011ae8:	f7ee fff8 	bl	8000adc <__aeabi_dcmplt>
 8011aec:	b110      	cbz	r0, 8011af4 <_printf_float+0x90>
 8011aee:	232d      	movs	r3, #45	; 0x2d
 8011af0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011af4:	4b93      	ldr	r3, [pc, #588]	; (8011d44 <_printf_float+0x2e0>)
 8011af6:	4894      	ldr	r0, [pc, #592]	; (8011d48 <_printf_float+0x2e4>)
 8011af8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8011afc:	bf94      	ite	ls
 8011afe:	4698      	movls	r8, r3
 8011b00:	4680      	movhi	r8, r0
 8011b02:	2303      	movs	r3, #3
 8011b04:	6123      	str	r3, [r4, #16]
 8011b06:	9b05      	ldr	r3, [sp, #20]
 8011b08:	f023 0204 	bic.w	r2, r3, #4
 8011b0c:	6022      	str	r2, [r4, #0]
 8011b0e:	f04f 0900 	mov.w	r9, #0
 8011b12:	9700      	str	r7, [sp, #0]
 8011b14:	4633      	mov	r3, r6
 8011b16:	aa0b      	add	r2, sp, #44	; 0x2c
 8011b18:	4621      	mov	r1, r4
 8011b1a:	4628      	mov	r0, r5
 8011b1c:	f000 f9d8 	bl	8011ed0 <_printf_common>
 8011b20:	3001      	adds	r0, #1
 8011b22:	f040 8090 	bne.w	8011c46 <_printf_float+0x1e2>
 8011b26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011b2a:	b00d      	add	sp, #52	; 0x34
 8011b2c:	ecbd 8b02 	vpop	{d8}
 8011b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b34:	4642      	mov	r2, r8
 8011b36:	464b      	mov	r3, r9
 8011b38:	4640      	mov	r0, r8
 8011b3a:	4649      	mov	r1, r9
 8011b3c:	f7ee fff6 	bl	8000b2c <__aeabi_dcmpun>
 8011b40:	b140      	cbz	r0, 8011b54 <_printf_float+0xf0>
 8011b42:	464b      	mov	r3, r9
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	bfbc      	itt	lt
 8011b48:	232d      	movlt	r3, #45	; 0x2d
 8011b4a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011b4e:	487f      	ldr	r0, [pc, #508]	; (8011d4c <_printf_float+0x2e8>)
 8011b50:	4b7f      	ldr	r3, [pc, #508]	; (8011d50 <_printf_float+0x2ec>)
 8011b52:	e7d1      	b.n	8011af8 <_printf_float+0x94>
 8011b54:	6863      	ldr	r3, [r4, #4]
 8011b56:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8011b5a:	9206      	str	r2, [sp, #24]
 8011b5c:	1c5a      	adds	r2, r3, #1
 8011b5e:	d13f      	bne.n	8011be0 <_printf_float+0x17c>
 8011b60:	2306      	movs	r3, #6
 8011b62:	6063      	str	r3, [r4, #4]
 8011b64:	9b05      	ldr	r3, [sp, #20]
 8011b66:	6861      	ldr	r1, [r4, #4]
 8011b68:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011b6c:	2300      	movs	r3, #0
 8011b6e:	9303      	str	r3, [sp, #12]
 8011b70:	ab0a      	add	r3, sp, #40	; 0x28
 8011b72:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011b76:	ab09      	add	r3, sp, #36	; 0x24
 8011b78:	ec49 8b10 	vmov	d0, r8, r9
 8011b7c:	9300      	str	r3, [sp, #0]
 8011b7e:	6022      	str	r2, [r4, #0]
 8011b80:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011b84:	4628      	mov	r0, r5
 8011b86:	f7ff fecd 	bl	8011924 <__cvt>
 8011b8a:	9b06      	ldr	r3, [sp, #24]
 8011b8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011b8e:	2b47      	cmp	r3, #71	; 0x47
 8011b90:	4680      	mov	r8, r0
 8011b92:	d108      	bne.n	8011ba6 <_printf_float+0x142>
 8011b94:	1cc8      	adds	r0, r1, #3
 8011b96:	db02      	blt.n	8011b9e <_printf_float+0x13a>
 8011b98:	6863      	ldr	r3, [r4, #4]
 8011b9a:	4299      	cmp	r1, r3
 8011b9c:	dd41      	ble.n	8011c22 <_printf_float+0x1be>
 8011b9e:	f1ab 0b02 	sub.w	fp, fp, #2
 8011ba2:	fa5f fb8b 	uxtb.w	fp, fp
 8011ba6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011baa:	d820      	bhi.n	8011bee <_printf_float+0x18a>
 8011bac:	3901      	subs	r1, #1
 8011bae:	465a      	mov	r2, fp
 8011bb0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011bb4:	9109      	str	r1, [sp, #36]	; 0x24
 8011bb6:	f7ff ff17 	bl	80119e8 <__exponent>
 8011bba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011bbc:	1813      	adds	r3, r2, r0
 8011bbe:	2a01      	cmp	r2, #1
 8011bc0:	4681      	mov	r9, r0
 8011bc2:	6123      	str	r3, [r4, #16]
 8011bc4:	dc02      	bgt.n	8011bcc <_printf_float+0x168>
 8011bc6:	6822      	ldr	r2, [r4, #0]
 8011bc8:	07d2      	lsls	r2, r2, #31
 8011bca:	d501      	bpl.n	8011bd0 <_printf_float+0x16c>
 8011bcc:	3301      	adds	r3, #1
 8011bce:	6123      	str	r3, [r4, #16]
 8011bd0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d09c      	beq.n	8011b12 <_printf_float+0xae>
 8011bd8:	232d      	movs	r3, #45	; 0x2d
 8011bda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011bde:	e798      	b.n	8011b12 <_printf_float+0xae>
 8011be0:	9a06      	ldr	r2, [sp, #24]
 8011be2:	2a47      	cmp	r2, #71	; 0x47
 8011be4:	d1be      	bne.n	8011b64 <_printf_float+0x100>
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d1bc      	bne.n	8011b64 <_printf_float+0x100>
 8011bea:	2301      	movs	r3, #1
 8011bec:	e7b9      	b.n	8011b62 <_printf_float+0xfe>
 8011bee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8011bf2:	d118      	bne.n	8011c26 <_printf_float+0x1c2>
 8011bf4:	2900      	cmp	r1, #0
 8011bf6:	6863      	ldr	r3, [r4, #4]
 8011bf8:	dd0b      	ble.n	8011c12 <_printf_float+0x1ae>
 8011bfa:	6121      	str	r1, [r4, #16]
 8011bfc:	b913      	cbnz	r3, 8011c04 <_printf_float+0x1a0>
 8011bfe:	6822      	ldr	r2, [r4, #0]
 8011c00:	07d0      	lsls	r0, r2, #31
 8011c02:	d502      	bpl.n	8011c0a <_printf_float+0x1a6>
 8011c04:	3301      	adds	r3, #1
 8011c06:	440b      	add	r3, r1
 8011c08:	6123      	str	r3, [r4, #16]
 8011c0a:	65a1      	str	r1, [r4, #88]	; 0x58
 8011c0c:	f04f 0900 	mov.w	r9, #0
 8011c10:	e7de      	b.n	8011bd0 <_printf_float+0x16c>
 8011c12:	b913      	cbnz	r3, 8011c1a <_printf_float+0x1b6>
 8011c14:	6822      	ldr	r2, [r4, #0]
 8011c16:	07d2      	lsls	r2, r2, #31
 8011c18:	d501      	bpl.n	8011c1e <_printf_float+0x1ba>
 8011c1a:	3302      	adds	r3, #2
 8011c1c:	e7f4      	b.n	8011c08 <_printf_float+0x1a4>
 8011c1e:	2301      	movs	r3, #1
 8011c20:	e7f2      	b.n	8011c08 <_printf_float+0x1a4>
 8011c22:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8011c26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c28:	4299      	cmp	r1, r3
 8011c2a:	db05      	blt.n	8011c38 <_printf_float+0x1d4>
 8011c2c:	6823      	ldr	r3, [r4, #0]
 8011c2e:	6121      	str	r1, [r4, #16]
 8011c30:	07d8      	lsls	r0, r3, #31
 8011c32:	d5ea      	bpl.n	8011c0a <_printf_float+0x1a6>
 8011c34:	1c4b      	adds	r3, r1, #1
 8011c36:	e7e7      	b.n	8011c08 <_printf_float+0x1a4>
 8011c38:	2900      	cmp	r1, #0
 8011c3a:	bfd4      	ite	le
 8011c3c:	f1c1 0202 	rsble	r2, r1, #2
 8011c40:	2201      	movgt	r2, #1
 8011c42:	4413      	add	r3, r2
 8011c44:	e7e0      	b.n	8011c08 <_printf_float+0x1a4>
 8011c46:	6823      	ldr	r3, [r4, #0]
 8011c48:	055a      	lsls	r2, r3, #21
 8011c4a:	d407      	bmi.n	8011c5c <_printf_float+0x1f8>
 8011c4c:	6923      	ldr	r3, [r4, #16]
 8011c4e:	4642      	mov	r2, r8
 8011c50:	4631      	mov	r1, r6
 8011c52:	4628      	mov	r0, r5
 8011c54:	47b8      	blx	r7
 8011c56:	3001      	adds	r0, #1
 8011c58:	d12c      	bne.n	8011cb4 <_printf_float+0x250>
 8011c5a:	e764      	b.n	8011b26 <_printf_float+0xc2>
 8011c5c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011c60:	f240 80e0 	bls.w	8011e24 <_printf_float+0x3c0>
 8011c64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011c68:	2200      	movs	r2, #0
 8011c6a:	2300      	movs	r3, #0
 8011c6c:	f7ee ff2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8011c70:	2800      	cmp	r0, #0
 8011c72:	d034      	beq.n	8011cde <_printf_float+0x27a>
 8011c74:	4a37      	ldr	r2, [pc, #220]	; (8011d54 <_printf_float+0x2f0>)
 8011c76:	2301      	movs	r3, #1
 8011c78:	4631      	mov	r1, r6
 8011c7a:	4628      	mov	r0, r5
 8011c7c:	47b8      	blx	r7
 8011c7e:	3001      	adds	r0, #1
 8011c80:	f43f af51 	beq.w	8011b26 <_printf_float+0xc2>
 8011c84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011c88:	429a      	cmp	r2, r3
 8011c8a:	db02      	blt.n	8011c92 <_printf_float+0x22e>
 8011c8c:	6823      	ldr	r3, [r4, #0]
 8011c8e:	07d8      	lsls	r0, r3, #31
 8011c90:	d510      	bpl.n	8011cb4 <_printf_float+0x250>
 8011c92:	ee18 3a10 	vmov	r3, s16
 8011c96:	4652      	mov	r2, sl
 8011c98:	4631      	mov	r1, r6
 8011c9a:	4628      	mov	r0, r5
 8011c9c:	47b8      	blx	r7
 8011c9e:	3001      	adds	r0, #1
 8011ca0:	f43f af41 	beq.w	8011b26 <_printf_float+0xc2>
 8011ca4:	f04f 0800 	mov.w	r8, #0
 8011ca8:	f104 091a 	add.w	r9, r4, #26
 8011cac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011cae:	3b01      	subs	r3, #1
 8011cb0:	4543      	cmp	r3, r8
 8011cb2:	dc09      	bgt.n	8011cc8 <_printf_float+0x264>
 8011cb4:	6823      	ldr	r3, [r4, #0]
 8011cb6:	079b      	lsls	r3, r3, #30
 8011cb8:	f100 8105 	bmi.w	8011ec6 <_printf_float+0x462>
 8011cbc:	68e0      	ldr	r0, [r4, #12]
 8011cbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011cc0:	4298      	cmp	r0, r3
 8011cc2:	bfb8      	it	lt
 8011cc4:	4618      	movlt	r0, r3
 8011cc6:	e730      	b.n	8011b2a <_printf_float+0xc6>
 8011cc8:	2301      	movs	r3, #1
 8011cca:	464a      	mov	r2, r9
 8011ccc:	4631      	mov	r1, r6
 8011cce:	4628      	mov	r0, r5
 8011cd0:	47b8      	blx	r7
 8011cd2:	3001      	adds	r0, #1
 8011cd4:	f43f af27 	beq.w	8011b26 <_printf_float+0xc2>
 8011cd8:	f108 0801 	add.w	r8, r8, #1
 8011cdc:	e7e6      	b.n	8011cac <_printf_float+0x248>
 8011cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	dc39      	bgt.n	8011d58 <_printf_float+0x2f4>
 8011ce4:	4a1b      	ldr	r2, [pc, #108]	; (8011d54 <_printf_float+0x2f0>)
 8011ce6:	2301      	movs	r3, #1
 8011ce8:	4631      	mov	r1, r6
 8011cea:	4628      	mov	r0, r5
 8011cec:	47b8      	blx	r7
 8011cee:	3001      	adds	r0, #1
 8011cf0:	f43f af19 	beq.w	8011b26 <_printf_float+0xc2>
 8011cf4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011cf8:	4313      	orrs	r3, r2
 8011cfa:	d102      	bne.n	8011d02 <_printf_float+0x29e>
 8011cfc:	6823      	ldr	r3, [r4, #0]
 8011cfe:	07d9      	lsls	r1, r3, #31
 8011d00:	d5d8      	bpl.n	8011cb4 <_printf_float+0x250>
 8011d02:	ee18 3a10 	vmov	r3, s16
 8011d06:	4652      	mov	r2, sl
 8011d08:	4631      	mov	r1, r6
 8011d0a:	4628      	mov	r0, r5
 8011d0c:	47b8      	blx	r7
 8011d0e:	3001      	adds	r0, #1
 8011d10:	f43f af09 	beq.w	8011b26 <_printf_float+0xc2>
 8011d14:	f04f 0900 	mov.w	r9, #0
 8011d18:	f104 0a1a 	add.w	sl, r4, #26
 8011d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d1e:	425b      	negs	r3, r3
 8011d20:	454b      	cmp	r3, r9
 8011d22:	dc01      	bgt.n	8011d28 <_printf_float+0x2c4>
 8011d24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d26:	e792      	b.n	8011c4e <_printf_float+0x1ea>
 8011d28:	2301      	movs	r3, #1
 8011d2a:	4652      	mov	r2, sl
 8011d2c:	4631      	mov	r1, r6
 8011d2e:	4628      	mov	r0, r5
 8011d30:	47b8      	blx	r7
 8011d32:	3001      	adds	r0, #1
 8011d34:	f43f aef7 	beq.w	8011b26 <_printf_float+0xc2>
 8011d38:	f109 0901 	add.w	r9, r9, #1
 8011d3c:	e7ee      	b.n	8011d1c <_printf_float+0x2b8>
 8011d3e:	bf00      	nop
 8011d40:	7fefffff 	.word	0x7fefffff
 8011d44:	080177e8 	.word	0x080177e8
 8011d48:	080177ec 	.word	0x080177ec
 8011d4c:	080177f4 	.word	0x080177f4
 8011d50:	080177f0 	.word	0x080177f0
 8011d54:	080177f8 	.word	0x080177f8
 8011d58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011d5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011d5c:	429a      	cmp	r2, r3
 8011d5e:	bfa8      	it	ge
 8011d60:	461a      	movge	r2, r3
 8011d62:	2a00      	cmp	r2, #0
 8011d64:	4691      	mov	r9, r2
 8011d66:	dc37      	bgt.n	8011dd8 <_printf_float+0x374>
 8011d68:	f04f 0b00 	mov.w	fp, #0
 8011d6c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011d70:	f104 021a 	add.w	r2, r4, #26
 8011d74:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011d76:	9305      	str	r3, [sp, #20]
 8011d78:	eba3 0309 	sub.w	r3, r3, r9
 8011d7c:	455b      	cmp	r3, fp
 8011d7e:	dc33      	bgt.n	8011de8 <_printf_float+0x384>
 8011d80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011d84:	429a      	cmp	r2, r3
 8011d86:	db3b      	blt.n	8011e00 <_printf_float+0x39c>
 8011d88:	6823      	ldr	r3, [r4, #0]
 8011d8a:	07da      	lsls	r2, r3, #31
 8011d8c:	d438      	bmi.n	8011e00 <_printf_float+0x39c>
 8011d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d90:	9a05      	ldr	r2, [sp, #20]
 8011d92:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011d94:	1a9a      	subs	r2, r3, r2
 8011d96:	eba3 0901 	sub.w	r9, r3, r1
 8011d9a:	4591      	cmp	r9, r2
 8011d9c:	bfa8      	it	ge
 8011d9e:	4691      	movge	r9, r2
 8011da0:	f1b9 0f00 	cmp.w	r9, #0
 8011da4:	dc35      	bgt.n	8011e12 <_printf_float+0x3ae>
 8011da6:	f04f 0800 	mov.w	r8, #0
 8011daa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011dae:	f104 0a1a 	add.w	sl, r4, #26
 8011db2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011db6:	1a9b      	subs	r3, r3, r2
 8011db8:	eba3 0309 	sub.w	r3, r3, r9
 8011dbc:	4543      	cmp	r3, r8
 8011dbe:	f77f af79 	ble.w	8011cb4 <_printf_float+0x250>
 8011dc2:	2301      	movs	r3, #1
 8011dc4:	4652      	mov	r2, sl
 8011dc6:	4631      	mov	r1, r6
 8011dc8:	4628      	mov	r0, r5
 8011dca:	47b8      	blx	r7
 8011dcc:	3001      	adds	r0, #1
 8011dce:	f43f aeaa 	beq.w	8011b26 <_printf_float+0xc2>
 8011dd2:	f108 0801 	add.w	r8, r8, #1
 8011dd6:	e7ec      	b.n	8011db2 <_printf_float+0x34e>
 8011dd8:	4613      	mov	r3, r2
 8011dda:	4631      	mov	r1, r6
 8011ddc:	4642      	mov	r2, r8
 8011dde:	4628      	mov	r0, r5
 8011de0:	47b8      	blx	r7
 8011de2:	3001      	adds	r0, #1
 8011de4:	d1c0      	bne.n	8011d68 <_printf_float+0x304>
 8011de6:	e69e      	b.n	8011b26 <_printf_float+0xc2>
 8011de8:	2301      	movs	r3, #1
 8011dea:	4631      	mov	r1, r6
 8011dec:	4628      	mov	r0, r5
 8011dee:	9205      	str	r2, [sp, #20]
 8011df0:	47b8      	blx	r7
 8011df2:	3001      	adds	r0, #1
 8011df4:	f43f ae97 	beq.w	8011b26 <_printf_float+0xc2>
 8011df8:	9a05      	ldr	r2, [sp, #20]
 8011dfa:	f10b 0b01 	add.w	fp, fp, #1
 8011dfe:	e7b9      	b.n	8011d74 <_printf_float+0x310>
 8011e00:	ee18 3a10 	vmov	r3, s16
 8011e04:	4652      	mov	r2, sl
 8011e06:	4631      	mov	r1, r6
 8011e08:	4628      	mov	r0, r5
 8011e0a:	47b8      	blx	r7
 8011e0c:	3001      	adds	r0, #1
 8011e0e:	d1be      	bne.n	8011d8e <_printf_float+0x32a>
 8011e10:	e689      	b.n	8011b26 <_printf_float+0xc2>
 8011e12:	9a05      	ldr	r2, [sp, #20]
 8011e14:	464b      	mov	r3, r9
 8011e16:	4442      	add	r2, r8
 8011e18:	4631      	mov	r1, r6
 8011e1a:	4628      	mov	r0, r5
 8011e1c:	47b8      	blx	r7
 8011e1e:	3001      	adds	r0, #1
 8011e20:	d1c1      	bne.n	8011da6 <_printf_float+0x342>
 8011e22:	e680      	b.n	8011b26 <_printf_float+0xc2>
 8011e24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011e26:	2a01      	cmp	r2, #1
 8011e28:	dc01      	bgt.n	8011e2e <_printf_float+0x3ca>
 8011e2a:	07db      	lsls	r3, r3, #31
 8011e2c:	d538      	bpl.n	8011ea0 <_printf_float+0x43c>
 8011e2e:	2301      	movs	r3, #1
 8011e30:	4642      	mov	r2, r8
 8011e32:	4631      	mov	r1, r6
 8011e34:	4628      	mov	r0, r5
 8011e36:	47b8      	blx	r7
 8011e38:	3001      	adds	r0, #1
 8011e3a:	f43f ae74 	beq.w	8011b26 <_printf_float+0xc2>
 8011e3e:	ee18 3a10 	vmov	r3, s16
 8011e42:	4652      	mov	r2, sl
 8011e44:	4631      	mov	r1, r6
 8011e46:	4628      	mov	r0, r5
 8011e48:	47b8      	blx	r7
 8011e4a:	3001      	adds	r0, #1
 8011e4c:	f43f ae6b 	beq.w	8011b26 <_printf_float+0xc2>
 8011e50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011e54:	2200      	movs	r2, #0
 8011e56:	2300      	movs	r3, #0
 8011e58:	f7ee fe36 	bl	8000ac8 <__aeabi_dcmpeq>
 8011e5c:	b9d8      	cbnz	r0, 8011e96 <_printf_float+0x432>
 8011e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e60:	f108 0201 	add.w	r2, r8, #1
 8011e64:	3b01      	subs	r3, #1
 8011e66:	4631      	mov	r1, r6
 8011e68:	4628      	mov	r0, r5
 8011e6a:	47b8      	blx	r7
 8011e6c:	3001      	adds	r0, #1
 8011e6e:	d10e      	bne.n	8011e8e <_printf_float+0x42a>
 8011e70:	e659      	b.n	8011b26 <_printf_float+0xc2>
 8011e72:	2301      	movs	r3, #1
 8011e74:	4652      	mov	r2, sl
 8011e76:	4631      	mov	r1, r6
 8011e78:	4628      	mov	r0, r5
 8011e7a:	47b8      	blx	r7
 8011e7c:	3001      	adds	r0, #1
 8011e7e:	f43f ae52 	beq.w	8011b26 <_printf_float+0xc2>
 8011e82:	f108 0801 	add.w	r8, r8, #1
 8011e86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e88:	3b01      	subs	r3, #1
 8011e8a:	4543      	cmp	r3, r8
 8011e8c:	dcf1      	bgt.n	8011e72 <_printf_float+0x40e>
 8011e8e:	464b      	mov	r3, r9
 8011e90:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011e94:	e6dc      	b.n	8011c50 <_printf_float+0x1ec>
 8011e96:	f04f 0800 	mov.w	r8, #0
 8011e9a:	f104 0a1a 	add.w	sl, r4, #26
 8011e9e:	e7f2      	b.n	8011e86 <_printf_float+0x422>
 8011ea0:	2301      	movs	r3, #1
 8011ea2:	4642      	mov	r2, r8
 8011ea4:	e7df      	b.n	8011e66 <_printf_float+0x402>
 8011ea6:	2301      	movs	r3, #1
 8011ea8:	464a      	mov	r2, r9
 8011eaa:	4631      	mov	r1, r6
 8011eac:	4628      	mov	r0, r5
 8011eae:	47b8      	blx	r7
 8011eb0:	3001      	adds	r0, #1
 8011eb2:	f43f ae38 	beq.w	8011b26 <_printf_float+0xc2>
 8011eb6:	f108 0801 	add.w	r8, r8, #1
 8011eba:	68e3      	ldr	r3, [r4, #12]
 8011ebc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011ebe:	1a5b      	subs	r3, r3, r1
 8011ec0:	4543      	cmp	r3, r8
 8011ec2:	dcf0      	bgt.n	8011ea6 <_printf_float+0x442>
 8011ec4:	e6fa      	b.n	8011cbc <_printf_float+0x258>
 8011ec6:	f04f 0800 	mov.w	r8, #0
 8011eca:	f104 0919 	add.w	r9, r4, #25
 8011ece:	e7f4      	b.n	8011eba <_printf_float+0x456>

08011ed0 <_printf_common>:
 8011ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ed4:	4616      	mov	r6, r2
 8011ed6:	4699      	mov	r9, r3
 8011ed8:	688a      	ldr	r2, [r1, #8]
 8011eda:	690b      	ldr	r3, [r1, #16]
 8011edc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011ee0:	4293      	cmp	r3, r2
 8011ee2:	bfb8      	it	lt
 8011ee4:	4613      	movlt	r3, r2
 8011ee6:	6033      	str	r3, [r6, #0]
 8011ee8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011eec:	4607      	mov	r7, r0
 8011eee:	460c      	mov	r4, r1
 8011ef0:	b10a      	cbz	r2, 8011ef6 <_printf_common+0x26>
 8011ef2:	3301      	adds	r3, #1
 8011ef4:	6033      	str	r3, [r6, #0]
 8011ef6:	6823      	ldr	r3, [r4, #0]
 8011ef8:	0699      	lsls	r1, r3, #26
 8011efa:	bf42      	ittt	mi
 8011efc:	6833      	ldrmi	r3, [r6, #0]
 8011efe:	3302      	addmi	r3, #2
 8011f00:	6033      	strmi	r3, [r6, #0]
 8011f02:	6825      	ldr	r5, [r4, #0]
 8011f04:	f015 0506 	ands.w	r5, r5, #6
 8011f08:	d106      	bne.n	8011f18 <_printf_common+0x48>
 8011f0a:	f104 0a19 	add.w	sl, r4, #25
 8011f0e:	68e3      	ldr	r3, [r4, #12]
 8011f10:	6832      	ldr	r2, [r6, #0]
 8011f12:	1a9b      	subs	r3, r3, r2
 8011f14:	42ab      	cmp	r3, r5
 8011f16:	dc26      	bgt.n	8011f66 <_printf_common+0x96>
 8011f18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011f1c:	1e13      	subs	r3, r2, #0
 8011f1e:	6822      	ldr	r2, [r4, #0]
 8011f20:	bf18      	it	ne
 8011f22:	2301      	movne	r3, #1
 8011f24:	0692      	lsls	r2, r2, #26
 8011f26:	d42b      	bmi.n	8011f80 <_printf_common+0xb0>
 8011f28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011f2c:	4649      	mov	r1, r9
 8011f2e:	4638      	mov	r0, r7
 8011f30:	47c0      	blx	r8
 8011f32:	3001      	adds	r0, #1
 8011f34:	d01e      	beq.n	8011f74 <_printf_common+0xa4>
 8011f36:	6823      	ldr	r3, [r4, #0]
 8011f38:	68e5      	ldr	r5, [r4, #12]
 8011f3a:	6832      	ldr	r2, [r6, #0]
 8011f3c:	f003 0306 	and.w	r3, r3, #6
 8011f40:	2b04      	cmp	r3, #4
 8011f42:	bf08      	it	eq
 8011f44:	1aad      	subeq	r5, r5, r2
 8011f46:	68a3      	ldr	r3, [r4, #8]
 8011f48:	6922      	ldr	r2, [r4, #16]
 8011f4a:	bf0c      	ite	eq
 8011f4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011f50:	2500      	movne	r5, #0
 8011f52:	4293      	cmp	r3, r2
 8011f54:	bfc4      	itt	gt
 8011f56:	1a9b      	subgt	r3, r3, r2
 8011f58:	18ed      	addgt	r5, r5, r3
 8011f5a:	2600      	movs	r6, #0
 8011f5c:	341a      	adds	r4, #26
 8011f5e:	42b5      	cmp	r5, r6
 8011f60:	d11a      	bne.n	8011f98 <_printf_common+0xc8>
 8011f62:	2000      	movs	r0, #0
 8011f64:	e008      	b.n	8011f78 <_printf_common+0xa8>
 8011f66:	2301      	movs	r3, #1
 8011f68:	4652      	mov	r2, sl
 8011f6a:	4649      	mov	r1, r9
 8011f6c:	4638      	mov	r0, r7
 8011f6e:	47c0      	blx	r8
 8011f70:	3001      	adds	r0, #1
 8011f72:	d103      	bne.n	8011f7c <_printf_common+0xac>
 8011f74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f7c:	3501      	adds	r5, #1
 8011f7e:	e7c6      	b.n	8011f0e <_printf_common+0x3e>
 8011f80:	18e1      	adds	r1, r4, r3
 8011f82:	1c5a      	adds	r2, r3, #1
 8011f84:	2030      	movs	r0, #48	; 0x30
 8011f86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011f8a:	4422      	add	r2, r4
 8011f8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011f90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011f94:	3302      	adds	r3, #2
 8011f96:	e7c7      	b.n	8011f28 <_printf_common+0x58>
 8011f98:	2301      	movs	r3, #1
 8011f9a:	4622      	mov	r2, r4
 8011f9c:	4649      	mov	r1, r9
 8011f9e:	4638      	mov	r0, r7
 8011fa0:	47c0      	blx	r8
 8011fa2:	3001      	adds	r0, #1
 8011fa4:	d0e6      	beq.n	8011f74 <_printf_common+0xa4>
 8011fa6:	3601      	adds	r6, #1
 8011fa8:	e7d9      	b.n	8011f5e <_printf_common+0x8e>
	...

08011fac <_printf_i>:
 8011fac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011fb0:	7e0f      	ldrb	r7, [r1, #24]
 8011fb2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011fb4:	2f78      	cmp	r7, #120	; 0x78
 8011fb6:	4691      	mov	r9, r2
 8011fb8:	4680      	mov	r8, r0
 8011fba:	460c      	mov	r4, r1
 8011fbc:	469a      	mov	sl, r3
 8011fbe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011fc2:	d807      	bhi.n	8011fd4 <_printf_i+0x28>
 8011fc4:	2f62      	cmp	r7, #98	; 0x62
 8011fc6:	d80a      	bhi.n	8011fde <_printf_i+0x32>
 8011fc8:	2f00      	cmp	r7, #0
 8011fca:	f000 80d8 	beq.w	801217e <_printf_i+0x1d2>
 8011fce:	2f58      	cmp	r7, #88	; 0x58
 8011fd0:	f000 80a3 	beq.w	801211a <_printf_i+0x16e>
 8011fd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011fd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011fdc:	e03a      	b.n	8012054 <_printf_i+0xa8>
 8011fde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011fe2:	2b15      	cmp	r3, #21
 8011fe4:	d8f6      	bhi.n	8011fd4 <_printf_i+0x28>
 8011fe6:	a101      	add	r1, pc, #4	; (adr r1, 8011fec <_printf_i+0x40>)
 8011fe8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011fec:	08012045 	.word	0x08012045
 8011ff0:	08012059 	.word	0x08012059
 8011ff4:	08011fd5 	.word	0x08011fd5
 8011ff8:	08011fd5 	.word	0x08011fd5
 8011ffc:	08011fd5 	.word	0x08011fd5
 8012000:	08011fd5 	.word	0x08011fd5
 8012004:	08012059 	.word	0x08012059
 8012008:	08011fd5 	.word	0x08011fd5
 801200c:	08011fd5 	.word	0x08011fd5
 8012010:	08011fd5 	.word	0x08011fd5
 8012014:	08011fd5 	.word	0x08011fd5
 8012018:	08012165 	.word	0x08012165
 801201c:	08012089 	.word	0x08012089
 8012020:	08012147 	.word	0x08012147
 8012024:	08011fd5 	.word	0x08011fd5
 8012028:	08011fd5 	.word	0x08011fd5
 801202c:	08012187 	.word	0x08012187
 8012030:	08011fd5 	.word	0x08011fd5
 8012034:	08012089 	.word	0x08012089
 8012038:	08011fd5 	.word	0x08011fd5
 801203c:	08011fd5 	.word	0x08011fd5
 8012040:	0801214f 	.word	0x0801214f
 8012044:	682b      	ldr	r3, [r5, #0]
 8012046:	1d1a      	adds	r2, r3, #4
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	602a      	str	r2, [r5, #0]
 801204c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012050:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012054:	2301      	movs	r3, #1
 8012056:	e0a3      	b.n	80121a0 <_printf_i+0x1f4>
 8012058:	6820      	ldr	r0, [r4, #0]
 801205a:	6829      	ldr	r1, [r5, #0]
 801205c:	0606      	lsls	r6, r0, #24
 801205e:	f101 0304 	add.w	r3, r1, #4
 8012062:	d50a      	bpl.n	801207a <_printf_i+0xce>
 8012064:	680e      	ldr	r6, [r1, #0]
 8012066:	602b      	str	r3, [r5, #0]
 8012068:	2e00      	cmp	r6, #0
 801206a:	da03      	bge.n	8012074 <_printf_i+0xc8>
 801206c:	232d      	movs	r3, #45	; 0x2d
 801206e:	4276      	negs	r6, r6
 8012070:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012074:	485e      	ldr	r0, [pc, #376]	; (80121f0 <_printf_i+0x244>)
 8012076:	230a      	movs	r3, #10
 8012078:	e019      	b.n	80120ae <_printf_i+0x102>
 801207a:	680e      	ldr	r6, [r1, #0]
 801207c:	602b      	str	r3, [r5, #0]
 801207e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012082:	bf18      	it	ne
 8012084:	b236      	sxthne	r6, r6
 8012086:	e7ef      	b.n	8012068 <_printf_i+0xbc>
 8012088:	682b      	ldr	r3, [r5, #0]
 801208a:	6820      	ldr	r0, [r4, #0]
 801208c:	1d19      	adds	r1, r3, #4
 801208e:	6029      	str	r1, [r5, #0]
 8012090:	0601      	lsls	r1, r0, #24
 8012092:	d501      	bpl.n	8012098 <_printf_i+0xec>
 8012094:	681e      	ldr	r6, [r3, #0]
 8012096:	e002      	b.n	801209e <_printf_i+0xf2>
 8012098:	0646      	lsls	r6, r0, #25
 801209a:	d5fb      	bpl.n	8012094 <_printf_i+0xe8>
 801209c:	881e      	ldrh	r6, [r3, #0]
 801209e:	4854      	ldr	r0, [pc, #336]	; (80121f0 <_printf_i+0x244>)
 80120a0:	2f6f      	cmp	r7, #111	; 0x6f
 80120a2:	bf0c      	ite	eq
 80120a4:	2308      	moveq	r3, #8
 80120a6:	230a      	movne	r3, #10
 80120a8:	2100      	movs	r1, #0
 80120aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80120ae:	6865      	ldr	r5, [r4, #4]
 80120b0:	60a5      	str	r5, [r4, #8]
 80120b2:	2d00      	cmp	r5, #0
 80120b4:	bfa2      	ittt	ge
 80120b6:	6821      	ldrge	r1, [r4, #0]
 80120b8:	f021 0104 	bicge.w	r1, r1, #4
 80120bc:	6021      	strge	r1, [r4, #0]
 80120be:	b90e      	cbnz	r6, 80120c4 <_printf_i+0x118>
 80120c0:	2d00      	cmp	r5, #0
 80120c2:	d04d      	beq.n	8012160 <_printf_i+0x1b4>
 80120c4:	4615      	mov	r5, r2
 80120c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80120ca:	fb03 6711 	mls	r7, r3, r1, r6
 80120ce:	5dc7      	ldrb	r7, [r0, r7]
 80120d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80120d4:	4637      	mov	r7, r6
 80120d6:	42bb      	cmp	r3, r7
 80120d8:	460e      	mov	r6, r1
 80120da:	d9f4      	bls.n	80120c6 <_printf_i+0x11a>
 80120dc:	2b08      	cmp	r3, #8
 80120de:	d10b      	bne.n	80120f8 <_printf_i+0x14c>
 80120e0:	6823      	ldr	r3, [r4, #0]
 80120e2:	07de      	lsls	r6, r3, #31
 80120e4:	d508      	bpl.n	80120f8 <_printf_i+0x14c>
 80120e6:	6923      	ldr	r3, [r4, #16]
 80120e8:	6861      	ldr	r1, [r4, #4]
 80120ea:	4299      	cmp	r1, r3
 80120ec:	bfde      	ittt	le
 80120ee:	2330      	movle	r3, #48	; 0x30
 80120f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80120f4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80120f8:	1b52      	subs	r2, r2, r5
 80120fa:	6122      	str	r2, [r4, #16]
 80120fc:	f8cd a000 	str.w	sl, [sp]
 8012100:	464b      	mov	r3, r9
 8012102:	aa03      	add	r2, sp, #12
 8012104:	4621      	mov	r1, r4
 8012106:	4640      	mov	r0, r8
 8012108:	f7ff fee2 	bl	8011ed0 <_printf_common>
 801210c:	3001      	adds	r0, #1
 801210e:	d14c      	bne.n	80121aa <_printf_i+0x1fe>
 8012110:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012114:	b004      	add	sp, #16
 8012116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801211a:	4835      	ldr	r0, [pc, #212]	; (80121f0 <_printf_i+0x244>)
 801211c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012120:	6829      	ldr	r1, [r5, #0]
 8012122:	6823      	ldr	r3, [r4, #0]
 8012124:	f851 6b04 	ldr.w	r6, [r1], #4
 8012128:	6029      	str	r1, [r5, #0]
 801212a:	061d      	lsls	r5, r3, #24
 801212c:	d514      	bpl.n	8012158 <_printf_i+0x1ac>
 801212e:	07df      	lsls	r7, r3, #31
 8012130:	bf44      	itt	mi
 8012132:	f043 0320 	orrmi.w	r3, r3, #32
 8012136:	6023      	strmi	r3, [r4, #0]
 8012138:	b91e      	cbnz	r6, 8012142 <_printf_i+0x196>
 801213a:	6823      	ldr	r3, [r4, #0]
 801213c:	f023 0320 	bic.w	r3, r3, #32
 8012140:	6023      	str	r3, [r4, #0]
 8012142:	2310      	movs	r3, #16
 8012144:	e7b0      	b.n	80120a8 <_printf_i+0xfc>
 8012146:	6823      	ldr	r3, [r4, #0]
 8012148:	f043 0320 	orr.w	r3, r3, #32
 801214c:	6023      	str	r3, [r4, #0]
 801214e:	2378      	movs	r3, #120	; 0x78
 8012150:	4828      	ldr	r0, [pc, #160]	; (80121f4 <_printf_i+0x248>)
 8012152:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012156:	e7e3      	b.n	8012120 <_printf_i+0x174>
 8012158:	0659      	lsls	r1, r3, #25
 801215a:	bf48      	it	mi
 801215c:	b2b6      	uxthmi	r6, r6
 801215e:	e7e6      	b.n	801212e <_printf_i+0x182>
 8012160:	4615      	mov	r5, r2
 8012162:	e7bb      	b.n	80120dc <_printf_i+0x130>
 8012164:	682b      	ldr	r3, [r5, #0]
 8012166:	6826      	ldr	r6, [r4, #0]
 8012168:	6961      	ldr	r1, [r4, #20]
 801216a:	1d18      	adds	r0, r3, #4
 801216c:	6028      	str	r0, [r5, #0]
 801216e:	0635      	lsls	r5, r6, #24
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	d501      	bpl.n	8012178 <_printf_i+0x1cc>
 8012174:	6019      	str	r1, [r3, #0]
 8012176:	e002      	b.n	801217e <_printf_i+0x1d2>
 8012178:	0670      	lsls	r0, r6, #25
 801217a:	d5fb      	bpl.n	8012174 <_printf_i+0x1c8>
 801217c:	8019      	strh	r1, [r3, #0]
 801217e:	2300      	movs	r3, #0
 8012180:	6123      	str	r3, [r4, #16]
 8012182:	4615      	mov	r5, r2
 8012184:	e7ba      	b.n	80120fc <_printf_i+0x150>
 8012186:	682b      	ldr	r3, [r5, #0]
 8012188:	1d1a      	adds	r2, r3, #4
 801218a:	602a      	str	r2, [r5, #0]
 801218c:	681d      	ldr	r5, [r3, #0]
 801218e:	6862      	ldr	r2, [r4, #4]
 8012190:	2100      	movs	r1, #0
 8012192:	4628      	mov	r0, r5
 8012194:	f7ee f824 	bl	80001e0 <memchr>
 8012198:	b108      	cbz	r0, 801219e <_printf_i+0x1f2>
 801219a:	1b40      	subs	r0, r0, r5
 801219c:	6060      	str	r0, [r4, #4]
 801219e:	6863      	ldr	r3, [r4, #4]
 80121a0:	6123      	str	r3, [r4, #16]
 80121a2:	2300      	movs	r3, #0
 80121a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80121a8:	e7a8      	b.n	80120fc <_printf_i+0x150>
 80121aa:	6923      	ldr	r3, [r4, #16]
 80121ac:	462a      	mov	r2, r5
 80121ae:	4649      	mov	r1, r9
 80121b0:	4640      	mov	r0, r8
 80121b2:	47d0      	blx	sl
 80121b4:	3001      	adds	r0, #1
 80121b6:	d0ab      	beq.n	8012110 <_printf_i+0x164>
 80121b8:	6823      	ldr	r3, [r4, #0]
 80121ba:	079b      	lsls	r3, r3, #30
 80121bc:	d413      	bmi.n	80121e6 <_printf_i+0x23a>
 80121be:	68e0      	ldr	r0, [r4, #12]
 80121c0:	9b03      	ldr	r3, [sp, #12]
 80121c2:	4298      	cmp	r0, r3
 80121c4:	bfb8      	it	lt
 80121c6:	4618      	movlt	r0, r3
 80121c8:	e7a4      	b.n	8012114 <_printf_i+0x168>
 80121ca:	2301      	movs	r3, #1
 80121cc:	4632      	mov	r2, r6
 80121ce:	4649      	mov	r1, r9
 80121d0:	4640      	mov	r0, r8
 80121d2:	47d0      	blx	sl
 80121d4:	3001      	adds	r0, #1
 80121d6:	d09b      	beq.n	8012110 <_printf_i+0x164>
 80121d8:	3501      	adds	r5, #1
 80121da:	68e3      	ldr	r3, [r4, #12]
 80121dc:	9903      	ldr	r1, [sp, #12]
 80121de:	1a5b      	subs	r3, r3, r1
 80121e0:	42ab      	cmp	r3, r5
 80121e2:	dcf2      	bgt.n	80121ca <_printf_i+0x21e>
 80121e4:	e7eb      	b.n	80121be <_printf_i+0x212>
 80121e6:	2500      	movs	r5, #0
 80121e8:	f104 0619 	add.w	r6, r4, #25
 80121ec:	e7f5      	b.n	80121da <_printf_i+0x22e>
 80121ee:	bf00      	nop
 80121f0:	080177fa 	.word	0x080177fa
 80121f4:	0801780b 	.word	0x0801780b

080121f8 <siprintf>:
 80121f8:	b40e      	push	{r1, r2, r3}
 80121fa:	b500      	push	{lr}
 80121fc:	b09c      	sub	sp, #112	; 0x70
 80121fe:	ab1d      	add	r3, sp, #116	; 0x74
 8012200:	9002      	str	r0, [sp, #8]
 8012202:	9006      	str	r0, [sp, #24]
 8012204:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012208:	4809      	ldr	r0, [pc, #36]	; (8012230 <siprintf+0x38>)
 801220a:	9107      	str	r1, [sp, #28]
 801220c:	9104      	str	r1, [sp, #16]
 801220e:	4909      	ldr	r1, [pc, #36]	; (8012234 <siprintf+0x3c>)
 8012210:	f853 2b04 	ldr.w	r2, [r3], #4
 8012214:	9105      	str	r1, [sp, #20]
 8012216:	6800      	ldr	r0, [r0, #0]
 8012218:	9301      	str	r3, [sp, #4]
 801221a:	a902      	add	r1, sp, #8
 801221c:	f002 ff58 	bl	80150d0 <_svfiprintf_r>
 8012220:	9b02      	ldr	r3, [sp, #8]
 8012222:	2200      	movs	r2, #0
 8012224:	701a      	strb	r2, [r3, #0]
 8012226:	b01c      	add	sp, #112	; 0x70
 8012228:	f85d eb04 	ldr.w	lr, [sp], #4
 801222c:	b003      	add	sp, #12
 801222e:	4770      	bx	lr
 8012230:	20000234 	.word	0x20000234
 8012234:	ffff0208 	.word	0xffff0208

08012238 <strchr>:
 8012238:	b2c9      	uxtb	r1, r1
 801223a:	4603      	mov	r3, r0
 801223c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012240:	b11a      	cbz	r2, 801224a <strchr+0x12>
 8012242:	428a      	cmp	r2, r1
 8012244:	d1f9      	bne.n	801223a <strchr+0x2>
 8012246:	4618      	mov	r0, r3
 8012248:	4770      	bx	lr
 801224a:	2900      	cmp	r1, #0
 801224c:	bf18      	it	ne
 801224e:	2300      	movne	r3, #0
 8012250:	e7f9      	b.n	8012246 <strchr+0xe>

08012252 <strncmp>:
 8012252:	b510      	push	{r4, lr}
 8012254:	b17a      	cbz	r2, 8012276 <strncmp+0x24>
 8012256:	4603      	mov	r3, r0
 8012258:	3901      	subs	r1, #1
 801225a:	1884      	adds	r4, r0, r2
 801225c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012260:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012264:	4290      	cmp	r0, r2
 8012266:	d101      	bne.n	801226c <strncmp+0x1a>
 8012268:	42a3      	cmp	r3, r4
 801226a:	d101      	bne.n	8012270 <strncmp+0x1e>
 801226c:	1a80      	subs	r0, r0, r2
 801226e:	bd10      	pop	{r4, pc}
 8012270:	2800      	cmp	r0, #0
 8012272:	d1f3      	bne.n	801225c <strncmp+0xa>
 8012274:	e7fa      	b.n	801226c <strncmp+0x1a>
 8012276:	4610      	mov	r0, r2
 8012278:	e7f9      	b.n	801226e <strncmp+0x1c>

0801227a <strstr>:
 801227a:	780a      	ldrb	r2, [r1, #0]
 801227c:	b570      	push	{r4, r5, r6, lr}
 801227e:	b96a      	cbnz	r2, 801229c <strstr+0x22>
 8012280:	bd70      	pop	{r4, r5, r6, pc}
 8012282:	429a      	cmp	r2, r3
 8012284:	d109      	bne.n	801229a <strstr+0x20>
 8012286:	460c      	mov	r4, r1
 8012288:	4605      	mov	r5, r0
 801228a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801228e:	2b00      	cmp	r3, #0
 8012290:	d0f6      	beq.n	8012280 <strstr+0x6>
 8012292:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8012296:	429e      	cmp	r6, r3
 8012298:	d0f7      	beq.n	801228a <strstr+0x10>
 801229a:	3001      	adds	r0, #1
 801229c:	7803      	ldrb	r3, [r0, #0]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d1ef      	bne.n	8012282 <strstr+0x8>
 80122a2:	4618      	mov	r0, r3
 80122a4:	e7ec      	b.n	8012280 <strstr+0x6>

080122a6 <sulp>:
 80122a6:	b570      	push	{r4, r5, r6, lr}
 80122a8:	4604      	mov	r4, r0
 80122aa:	460d      	mov	r5, r1
 80122ac:	ec45 4b10 	vmov	d0, r4, r5
 80122b0:	4616      	mov	r6, r2
 80122b2:	f002 fc6b 	bl	8014b8c <__ulp>
 80122b6:	ec51 0b10 	vmov	r0, r1, d0
 80122ba:	b17e      	cbz	r6, 80122dc <sulp+0x36>
 80122bc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80122c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	dd09      	ble.n	80122dc <sulp+0x36>
 80122c8:	051b      	lsls	r3, r3, #20
 80122ca:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80122ce:	2400      	movs	r4, #0
 80122d0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80122d4:	4622      	mov	r2, r4
 80122d6:	462b      	mov	r3, r5
 80122d8:	f7ee f98e 	bl	80005f8 <__aeabi_dmul>
 80122dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080122e0 <_strtod_l>:
 80122e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122e4:	ed2d 8b02 	vpush	{d8}
 80122e8:	b09d      	sub	sp, #116	; 0x74
 80122ea:	461f      	mov	r7, r3
 80122ec:	2300      	movs	r3, #0
 80122ee:	9318      	str	r3, [sp, #96]	; 0x60
 80122f0:	4ba2      	ldr	r3, [pc, #648]	; (801257c <_strtod_l+0x29c>)
 80122f2:	9213      	str	r2, [sp, #76]	; 0x4c
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	9305      	str	r3, [sp, #20]
 80122f8:	4604      	mov	r4, r0
 80122fa:	4618      	mov	r0, r3
 80122fc:	4688      	mov	r8, r1
 80122fe:	f7ed ff67 	bl	80001d0 <strlen>
 8012302:	f04f 0a00 	mov.w	sl, #0
 8012306:	4605      	mov	r5, r0
 8012308:	f04f 0b00 	mov.w	fp, #0
 801230c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8012310:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012312:	781a      	ldrb	r2, [r3, #0]
 8012314:	2a2b      	cmp	r2, #43	; 0x2b
 8012316:	d04e      	beq.n	80123b6 <_strtod_l+0xd6>
 8012318:	d83b      	bhi.n	8012392 <_strtod_l+0xb2>
 801231a:	2a0d      	cmp	r2, #13
 801231c:	d834      	bhi.n	8012388 <_strtod_l+0xa8>
 801231e:	2a08      	cmp	r2, #8
 8012320:	d834      	bhi.n	801238c <_strtod_l+0xac>
 8012322:	2a00      	cmp	r2, #0
 8012324:	d03e      	beq.n	80123a4 <_strtod_l+0xc4>
 8012326:	2300      	movs	r3, #0
 8012328:	930a      	str	r3, [sp, #40]	; 0x28
 801232a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801232c:	7833      	ldrb	r3, [r6, #0]
 801232e:	2b30      	cmp	r3, #48	; 0x30
 8012330:	f040 80b0 	bne.w	8012494 <_strtod_l+0x1b4>
 8012334:	7873      	ldrb	r3, [r6, #1]
 8012336:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801233a:	2b58      	cmp	r3, #88	; 0x58
 801233c:	d168      	bne.n	8012410 <_strtod_l+0x130>
 801233e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012340:	9301      	str	r3, [sp, #4]
 8012342:	ab18      	add	r3, sp, #96	; 0x60
 8012344:	9702      	str	r7, [sp, #8]
 8012346:	9300      	str	r3, [sp, #0]
 8012348:	4a8d      	ldr	r2, [pc, #564]	; (8012580 <_strtod_l+0x2a0>)
 801234a:	ab19      	add	r3, sp, #100	; 0x64
 801234c:	a917      	add	r1, sp, #92	; 0x5c
 801234e:	4620      	mov	r0, r4
 8012350:	f001 fd80 	bl	8013e54 <__gethex>
 8012354:	f010 0707 	ands.w	r7, r0, #7
 8012358:	4605      	mov	r5, r0
 801235a:	d005      	beq.n	8012368 <_strtod_l+0x88>
 801235c:	2f06      	cmp	r7, #6
 801235e:	d12c      	bne.n	80123ba <_strtod_l+0xda>
 8012360:	3601      	adds	r6, #1
 8012362:	2300      	movs	r3, #0
 8012364:	9617      	str	r6, [sp, #92]	; 0x5c
 8012366:	930a      	str	r3, [sp, #40]	; 0x28
 8012368:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801236a:	2b00      	cmp	r3, #0
 801236c:	f040 8590 	bne.w	8012e90 <_strtod_l+0xbb0>
 8012370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012372:	b1eb      	cbz	r3, 80123b0 <_strtod_l+0xd0>
 8012374:	4652      	mov	r2, sl
 8012376:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801237a:	ec43 2b10 	vmov	d0, r2, r3
 801237e:	b01d      	add	sp, #116	; 0x74
 8012380:	ecbd 8b02 	vpop	{d8}
 8012384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012388:	2a20      	cmp	r2, #32
 801238a:	d1cc      	bne.n	8012326 <_strtod_l+0x46>
 801238c:	3301      	adds	r3, #1
 801238e:	9317      	str	r3, [sp, #92]	; 0x5c
 8012390:	e7be      	b.n	8012310 <_strtod_l+0x30>
 8012392:	2a2d      	cmp	r2, #45	; 0x2d
 8012394:	d1c7      	bne.n	8012326 <_strtod_l+0x46>
 8012396:	2201      	movs	r2, #1
 8012398:	920a      	str	r2, [sp, #40]	; 0x28
 801239a:	1c5a      	adds	r2, r3, #1
 801239c:	9217      	str	r2, [sp, #92]	; 0x5c
 801239e:	785b      	ldrb	r3, [r3, #1]
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d1c2      	bne.n	801232a <_strtod_l+0x4a>
 80123a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80123a6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	f040 856e 	bne.w	8012e8c <_strtod_l+0xbac>
 80123b0:	4652      	mov	r2, sl
 80123b2:	465b      	mov	r3, fp
 80123b4:	e7e1      	b.n	801237a <_strtod_l+0x9a>
 80123b6:	2200      	movs	r2, #0
 80123b8:	e7ee      	b.n	8012398 <_strtod_l+0xb8>
 80123ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80123bc:	b13a      	cbz	r2, 80123ce <_strtod_l+0xee>
 80123be:	2135      	movs	r1, #53	; 0x35
 80123c0:	a81a      	add	r0, sp, #104	; 0x68
 80123c2:	f002 fcee 	bl	8014da2 <__copybits>
 80123c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80123c8:	4620      	mov	r0, r4
 80123ca:	f002 f8ad 	bl	8014528 <_Bfree>
 80123ce:	3f01      	subs	r7, #1
 80123d0:	2f04      	cmp	r7, #4
 80123d2:	d806      	bhi.n	80123e2 <_strtod_l+0x102>
 80123d4:	e8df f007 	tbb	[pc, r7]
 80123d8:	1714030a 	.word	0x1714030a
 80123dc:	0a          	.byte	0x0a
 80123dd:	00          	.byte	0x00
 80123de:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80123e2:	0728      	lsls	r0, r5, #28
 80123e4:	d5c0      	bpl.n	8012368 <_strtod_l+0x88>
 80123e6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80123ea:	e7bd      	b.n	8012368 <_strtod_l+0x88>
 80123ec:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80123f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80123f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80123f6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80123fa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80123fe:	e7f0      	b.n	80123e2 <_strtod_l+0x102>
 8012400:	f8df b180 	ldr.w	fp, [pc, #384]	; 8012584 <_strtod_l+0x2a4>
 8012404:	e7ed      	b.n	80123e2 <_strtod_l+0x102>
 8012406:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801240a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801240e:	e7e8      	b.n	80123e2 <_strtod_l+0x102>
 8012410:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012412:	1c5a      	adds	r2, r3, #1
 8012414:	9217      	str	r2, [sp, #92]	; 0x5c
 8012416:	785b      	ldrb	r3, [r3, #1]
 8012418:	2b30      	cmp	r3, #48	; 0x30
 801241a:	d0f9      	beq.n	8012410 <_strtod_l+0x130>
 801241c:	2b00      	cmp	r3, #0
 801241e:	d0a3      	beq.n	8012368 <_strtod_l+0x88>
 8012420:	2301      	movs	r3, #1
 8012422:	f04f 0900 	mov.w	r9, #0
 8012426:	9304      	str	r3, [sp, #16]
 8012428:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801242a:	9308      	str	r3, [sp, #32]
 801242c:	f8cd 901c 	str.w	r9, [sp, #28]
 8012430:	464f      	mov	r7, r9
 8012432:	220a      	movs	r2, #10
 8012434:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8012436:	7806      	ldrb	r6, [r0, #0]
 8012438:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801243c:	b2d9      	uxtb	r1, r3
 801243e:	2909      	cmp	r1, #9
 8012440:	d92a      	bls.n	8012498 <_strtod_l+0x1b8>
 8012442:	9905      	ldr	r1, [sp, #20]
 8012444:	462a      	mov	r2, r5
 8012446:	f7ff ff04 	bl	8012252 <strncmp>
 801244a:	b398      	cbz	r0, 80124b4 <_strtod_l+0x1d4>
 801244c:	2000      	movs	r0, #0
 801244e:	4632      	mov	r2, r6
 8012450:	463d      	mov	r5, r7
 8012452:	9005      	str	r0, [sp, #20]
 8012454:	4603      	mov	r3, r0
 8012456:	2a65      	cmp	r2, #101	; 0x65
 8012458:	d001      	beq.n	801245e <_strtod_l+0x17e>
 801245a:	2a45      	cmp	r2, #69	; 0x45
 801245c:	d118      	bne.n	8012490 <_strtod_l+0x1b0>
 801245e:	b91d      	cbnz	r5, 8012468 <_strtod_l+0x188>
 8012460:	9a04      	ldr	r2, [sp, #16]
 8012462:	4302      	orrs	r2, r0
 8012464:	d09e      	beq.n	80123a4 <_strtod_l+0xc4>
 8012466:	2500      	movs	r5, #0
 8012468:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801246c:	f108 0201 	add.w	r2, r8, #1
 8012470:	9217      	str	r2, [sp, #92]	; 0x5c
 8012472:	f898 2001 	ldrb.w	r2, [r8, #1]
 8012476:	2a2b      	cmp	r2, #43	; 0x2b
 8012478:	d075      	beq.n	8012566 <_strtod_l+0x286>
 801247a:	2a2d      	cmp	r2, #45	; 0x2d
 801247c:	d07b      	beq.n	8012576 <_strtod_l+0x296>
 801247e:	f04f 0c00 	mov.w	ip, #0
 8012482:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8012486:	2909      	cmp	r1, #9
 8012488:	f240 8082 	bls.w	8012590 <_strtod_l+0x2b0>
 801248c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8012490:	2600      	movs	r6, #0
 8012492:	e09d      	b.n	80125d0 <_strtod_l+0x2f0>
 8012494:	2300      	movs	r3, #0
 8012496:	e7c4      	b.n	8012422 <_strtod_l+0x142>
 8012498:	2f08      	cmp	r7, #8
 801249a:	bfd8      	it	le
 801249c:	9907      	ldrle	r1, [sp, #28]
 801249e:	f100 0001 	add.w	r0, r0, #1
 80124a2:	bfda      	itte	le
 80124a4:	fb02 3301 	mlale	r3, r2, r1, r3
 80124a8:	9307      	strle	r3, [sp, #28]
 80124aa:	fb02 3909 	mlagt	r9, r2, r9, r3
 80124ae:	3701      	adds	r7, #1
 80124b0:	9017      	str	r0, [sp, #92]	; 0x5c
 80124b2:	e7bf      	b.n	8012434 <_strtod_l+0x154>
 80124b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80124b6:	195a      	adds	r2, r3, r5
 80124b8:	9217      	str	r2, [sp, #92]	; 0x5c
 80124ba:	5d5a      	ldrb	r2, [r3, r5]
 80124bc:	2f00      	cmp	r7, #0
 80124be:	d037      	beq.n	8012530 <_strtod_l+0x250>
 80124c0:	9005      	str	r0, [sp, #20]
 80124c2:	463d      	mov	r5, r7
 80124c4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80124c8:	2b09      	cmp	r3, #9
 80124ca:	d912      	bls.n	80124f2 <_strtod_l+0x212>
 80124cc:	2301      	movs	r3, #1
 80124ce:	e7c2      	b.n	8012456 <_strtod_l+0x176>
 80124d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80124d2:	1c5a      	adds	r2, r3, #1
 80124d4:	9217      	str	r2, [sp, #92]	; 0x5c
 80124d6:	785a      	ldrb	r2, [r3, #1]
 80124d8:	3001      	adds	r0, #1
 80124da:	2a30      	cmp	r2, #48	; 0x30
 80124dc:	d0f8      	beq.n	80124d0 <_strtod_l+0x1f0>
 80124de:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80124e2:	2b08      	cmp	r3, #8
 80124e4:	f200 84d9 	bhi.w	8012e9a <_strtod_l+0xbba>
 80124e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80124ea:	9005      	str	r0, [sp, #20]
 80124ec:	2000      	movs	r0, #0
 80124ee:	9308      	str	r3, [sp, #32]
 80124f0:	4605      	mov	r5, r0
 80124f2:	3a30      	subs	r2, #48	; 0x30
 80124f4:	f100 0301 	add.w	r3, r0, #1
 80124f8:	d014      	beq.n	8012524 <_strtod_l+0x244>
 80124fa:	9905      	ldr	r1, [sp, #20]
 80124fc:	4419      	add	r1, r3
 80124fe:	9105      	str	r1, [sp, #20]
 8012500:	462b      	mov	r3, r5
 8012502:	eb00 0e05 	add.w	lr, r0, r5
 8012506:	210a      	movs	r1, #10
 8012508:	4573      	cmp	r3, lr
 801250a:	d113      	bne.n	8012534 <_strtod_l+0x254>
 801250c:	182b      	adds	r3, r5, r0
 801250e:	2b08      	cmp	r3, #8
 8012510:	f105 0501 	add.w	r5, r5, #1
 8012514:	4405      	add	r5, r0
 8012516:	dc1c      	bgt.n	8012552 <_strtod_l+0x272>
 8012518:	9907      	ldr	r1, [sp, #28]
 801251a:	230a      	movs	r3, #10
 801251c:	fb03 2301 	mla	r3, r3, r1, r2
 8012520:	9307      	str	r3, [sp, #28]
 8012522:	2300      	movs	r3, #0
 8012524:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012526:	1c51      	adds	r1, r2, #1
 8012528:	9117      	str	r1, [sp, #92]	; 0x5c
 801252a:	7852      	ldrb	r2, [r2, #1]
 801252c:	4618      	mov	r0, r3
 801252e:	e7c9      	b.n	80124c4 <_strtod_l+0x1e4>
 8012530:	4638      	mov	r0, r7
 8012532:	e7d2      	b.n	80124da <_strtod_l+0x1fa>
 8012534:	2b08      	cmp	r3, #8
 8012536:	dc04      	bgt.n	8012542 <_strtod_l+0x262>
 8012538:	9e07      	ldr	r6, [sp, #28]
 801253a:	434e      	muls	r6, r1
 801253c:	9607      	str	r6, [sp, #28]
 801253e:	3301      	adds	r3, #1
 8012540:	e7e2      	b.n	8012508 <_strtod_l+0x228>
 8012542:	f103 0c01 	add.w	ip, r3, #1
 8012546:	f1bc 0f10 	cmp.w	ip, #16
 801254a:	bfd8      	it	le
 801254c:	fb01 f909 	mulle.w	r9, r1, r9
 8012550:	e7f5      	b.n	801253e <_strtod_l+0x25e>
 8012552:	2d10      	cmp	r5, #16
 8012554:	bfdc      	itt	le
 8012556:	230a      	movle	r3, #10
 8012558:	fb03 2909 	mlale	r9, r3, r9, r2
 801255c:	e7e1      	b.n	8012522 <_strtod_l+0x242>
 801255e:	2300      	movs	r3, #0
 8012560:	9305      	str	r3, [sp, #20]
 8012562:	2301      	movs	r3, #1
 8012564:	e77c      	b.n	8012460 <_strtod_l+0x180>
 8012566:	f04f 0c00 	mov.w	ip, #0
 801256a:	f108 0202 	add.w	r2, r8, #2
 801256e:	9217      	str	r2, [sp, #92]	; 0x5c
 8012570:	f898 2002 	ldrb.w	r2, [r8, #2]
 8012574:	e785      	b.n	8012482 <_strtod_l+0x1a2>
 8012576:	f04f 0c01 	mov.w	ip, #1
 801257a:	e7f6      	b.n	801256a <_strtod_l+0x28a>
 801257c:	08017968 	.word	0x08017968
 8012580:	0801781c 	.word	0x0801781c
 8012584:	7ff00000 	.word	0x7ff00000
 8012588:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801258a:	1c51      	adds	r1, r2, #1
 801258c:	9117      	str	r1, [sp, #92]	; 0x5c
 801258e:	7852      	ldrb	r2, [r2, #1]
 8012590:	2a30      	cmp	r2, #48	; 0x30
 8012592:	d0f9      	beq.n	8012588 <_strtod_l+0x2a8>
 8012594:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8012598:	2908      	cmp	r1, #8
 801259a:	f63f af79 	bhi.w	8012490 <_strtod_l+0x1b0>
 801259e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80125a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80125a4:	9206      	str	r2, [sp, #24]
 80125a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80125a8:	1c51      	adds	r1, r2, #1
 80125aa:	9117      	str	r1, [sp, #92]	; 0x5c
 80125ac:	7852      	ldrb	r2, [r2, #1]
 80125ae:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80125b2:	2e09      	cmp	r6, #9
 80125b4:	d937      	bls.n	8012626 <_strtod_l+0x346>
 80125b6:	9e06      	ldr	r6, [sp, #24]
 80125b8:	1b89      	subs	r1, r1, r6
 80125ba:	2908      	cmp	r1, #8
 80125bc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80125c0:	dc02      	bgt.n	80125c8 <_strtod_l+0x2e8>
 80125c2:	4576      	cmp	r6, lr
 80125c4:	bfa8      	it	ge
 80125c6:	4676      	movge	r6, lr
 80125c8:	f1bc 0f00 	cmp.w	ip, #0
 80125cc:	d000      	beq.n	80125d0 <_strtod_l+0x2f0>
 80125ce:	4276      	negs	r6, r6
 80125d0:	2d00      	cmp	r5, #0
 80125d2:	d14d      	bne.n	8012670 <_strtod_l+0x390>
 80125d4:	9904      	ldr	r1, [sp, #16]
 80125d6:	4301      	orrs	r1, r0
 80125d8:	f47f aec6 	bne.w	8012368 <_strtod_l+0x88>
 80125dc:	2b00      	cmp	r3, #0
 80125de:	f47f aee1 	bne.w	80123a4 <_strtod_l+0xc4>
 80125e2:	2a69      	cmp	r2, #105	; 0x69
 80125e4:	d027      	beq.n	8012636 <_strtod_l+0x356>
 80125e6:	dc24      	bgt.n	8012632 <_strtod_l+0x352>
 80125e8:	2a49      	cmp	r2, #73	; 0x49
 80125ea:	d024      	beq.n	8012636 <_strtod_l+0x356>
 80125ec:	2a4e      	cmp	r2, #78	; 0x4e
 80125ee:	f47f aed9 	bne.w	80123a4 <_strtod_l+0xc4>
 80125f2:	499f      	ldr	r1, [pc, #636]	; (8012870 <_strtod_l+0x590>)
 80125f4:	a817      	add	r0, sp, #92	; 0x5c
 80125f6:	f001 fe85 	bl	8014304 <__match>
 80125fa:	2800      	cmp	r0, #0
 80125fc:	f43f aed2 	beq.w	80123a4 <_strtod_l+0xc4>
 8012600:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012602:	781b      	ldrb	r3, [r3, #0]
 8012604:	2b28      	cmp	r3, #40	; 0x28
 8012606:	d12d      	bne.n	8012664 <_strtod_l+0x384>
 8012608:	499a      	ldr	r1, [pc, #616]	; (8012874 <_strtod_l+0x594>)
 801260a:	aa1a      	add	r2, sp, #104	; 0x68
 801260c:	a817      	add	r0, sp, #92	; 0x5c
 801260e:	f001 fe8d 	bl	801432c <__hexnan>
 8012612:	2805      	cmp	r0, #5
 8012614:	d126      	bne.n	8012664 <_strtod_l+0x384>
 8012616:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012618:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801261c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8012620:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8012624:	e6a0      	b.n	8012368 <_strtod_l+0x88>
 8012626:	210a      	movs	r1, #10
 8012628:	fb01 2e0e 	mla	lr, r1, lr, r2
 801262c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8012630:	e7b9      	b.n	80125a6 <_strtod_l+0x2c6>
 8012632:	2a6e      	cmp	r2, #110	; 0x6e
 8012634:	e7db      	b.n	80125ee <_strtod_l+0x30e>
 8012636:	4990      	ldr	r1, [pc, #576]	; (8012878 <_strtod_l+0x598>)
 8012638:	a817      	add	r0, sp, #92	; 0x5c
 801263a:	f001 fe63 	bl	8014304 <__match>
 801263e:	2800      	cmp	r0, #0
 8012640:	f43f aeb0 	beq.w	80123a4 <_strtod_l+0xc4>
 8012644:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012646:	498d      	ldr	r1, [pc, #564]	; (801287c <_strtod_l+0x59c>)
 8012648:	3b01      	subs	r3, #1
 801264a:	a817      	add	r0, sp, #92	; 0x5c
 801264c:	9317      	str	r3, [sp, #92]	; 0x5c
 801264e:	f001 fe59 	bl	8014304 <__match>
 8012652:	b910      	cbnz	r0, 801265a <_strtod_l+0x37a>
 8012654:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012656:	3301      	adds	r3, #1
 8012658:	9317      	str	r3, [sp, #92]	; 0x5c
 801265a:	f8df b230 	ldr.w	fp, [pc, #560]	; 801288c <_strtod_l+0x5ac>
 801265e:	f04f 0a00 	mov.w	sl, #0
 8012662:	e681      	b.n	8012368 <_strtod_l+0x88>
 8012664:	4886      	ldr	r0, [pc, #536]	; (8012880 <_strtod_l+0x5a0>)
 8012666:	f002 fe33 	bl	80152d0 <nan>
 801266a:	ec5b ab10 	vmov	sl, fp, d0
 801266e:	e67b      	b.n	8012368 <_strtod_l+0x88>
 8012670:	9b05      	ldr	r3, [sp, #20]
 8012672:	9807      	ldr	r0, [sp, #28]
 8012674:	1af3      	subs	r3, r6, r3
 8012676:	2f00      	cmp	r7, #0
 8012678:	bf08      	it	eq
 801267a:	462f      	moveq	r7, r5
 801267c:	2d10      	cmp	r5, #16
 801267e:	9306      	str	r3, [sp, #24]
 8012680:	46a8      	mov	r8, r5
 8012682:	bfa8      	it	ge
 8012684:	f04f 0810 	movge.w	r8, #16
 8012688:	f7ed ff3c 	bl	8000504 <__aeabi_ui2d>
 801268c:	2d09      	cmp	r5, #9
 801268e:	4682      	mov	sl, r0
 8012690:	468b      	mov	fp, r1
 8012692:	dd13      	ble.n	80126bc <_strtod_l+0x3dc>
 8012694:	4b7b      	ldr	r3, [pc, #492]	; (8012884 <_strtod_l+0x5a4>)
 8012696:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801269a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801269e:	f7ed ffab 	bl	80005f8 <__aeabi_dmul>
 80126a2:	4682      	mov	sl, r0
 80126a4:	4648      	mov	r0, r9
 80126a6:	468b      	mov	fp, r1
 80126a8:	f7ed ff2c 	bl	8000504 <__aeabi_ui2d>
 80126ac:	4602      	mov	r2, r0
 80126ae:	460b      	mov	r3, r1
 80126b0:	4650      	mov	r0, sl
 80126b2:	4659      	mov	r1, fp
 80126b4:	f7ed fdea 	bl	800028c <__adddf3>
 80126b8:	4682      	mov	sl, r0
 80126ba:	468b      	mov	fp, r1
 80126bc:	2d0f      	cmp	r5, #15
 80126be:	dc38      	bgt.n	8012732 <_strtod_l+0x452>
 80126c0:	9b06      	ldr	r3, [sp, #24]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	f43f ae50 	beq.w	8012368 <_strtod_l+0x88>
 80126c8:	dd24      	ble.n	8012714 <_strtod_l+0x434>
 80126ca:	2b16      	cmp	r3, #22
 80126cc:	dc0b      	bgt.n	80126e6 <_strtod_l+0x406>
 80126ce:	496d      	ldr	r1, [pc, #436]	; (8012884 <_strtod_l+0x5a4>)
 80126d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80126d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80126d8:	4652      	mov	r2, sl
 80126da:	465b      	mov	r3, fp
 80126dc:	f7ed ff8c 	bl	80005f8 <__aeabi_dmul>
 80126e0:	4682      	mov	sl, r0
 80126e2:	468b      	mov	fp, r1
 80126e4:	e640      	b.n	8012368 <_strtod_l+0x88>
 80126e6:	9a06      	ldr	r2, [sp, #24]
 80126e8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80126ec:	4293      	cmp	r3, r2
 80126ee:	db20      	blt.n	8012732 <_strtod_l+0x452>
 80126f0:	4c64      	ldr	r4, [pc, #400]	; (8012884 <_strtod_l+0x5a4>)
 80126f2:	f1c5 050f 	rsb	r5, r5, #15
 80126f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80126fa:	4652      	mov	r2, sl
 80126fc:	465b      	mov	r3, fp
 80126fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012702:	f7ed ff79 	bl	80005f8 <__aeabi_dmul>
 8012706:	9b06      	ldr	r3, [sp, #24]
 8012708:	1b5d      	subs	r5, r3, r5
 801270a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801270e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012712:	e7e3      	b.n	80126dc <_strtod_l+0x3fc>
 8012714:	9b06      	ldr	r3, [sp, #24]
 8012716:	3316      	adds	r3, #22
 8012718:	db0b      	blt.n	8012732 <_strtod_l+0x452>
 801271a:	9b05      	ldr	r3, [sp, #20]
 801271c:	1b9e      	subs	r6, r3, r6
 801271e:	4b59      	ldr	r3, [pc, #356]	; (8012884 <_strtod_l+0x5a4>)
 8012720:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8012724:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012728:	4650      	mov	r0, sl
 801272a:	4659      	mov	r1, fp
 801272c:	f7ee f88e 	bl	800084c <__aeabi_ddiv>
 8012730:	e7d6      	b.n	80126e0 <_strtod_l+0x400>
 8012732:	9b06      	ldr	r3, [sp, #24]
 8012734:	eba5 0808 	sub.w	r8, r5, r8
 8012738:	4498      	add	r8, r3
 801273a:	f1b8 0f00 	cmp.w	r8, #0
 801273e:	dd74      	ble.n	801282a <_strtod_l+0x54a>
 8012740:	f018 030f 	ands.w	r3, r8, #15
 8012744:	d00a      	beq.n	801275c <_strtod_l+0x47c>
 8012746:	494f      	ldr	r1, [pc, #316]	; (8012884 <_strtod_l+0x5a4>)
 8012748:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801274c:	4652      	mov	r2, sl
 801274e:	465b      	mov	r3, fp
 8012750:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012754:	f7ed ff50 	bl	80005f8 <__aeabi_dmul>
 8012758:	4682      	mov	sl, r0
 801275a:	468b      	mov	fp, r1
 801275c:	f038 080f 	bics.w	r8, r8, #15
 8012760:	d04f      	beq.n	8012802 <_strtod_l+0x522>
 8012762:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8012766:	dd22      	ble.n	80127ae <_strtod_l+0x4ce>
 8012768:	2500      	movs	r5, #0
 801276a:	462e      	mov	r6, r5
 801276c:	9507      	str	r5, [sp, #28]
 801276e:	9505      	str	r5, [sp, #20]
 8012770:	2322      	movs	r3, #34	; 0x22
 8012772:	f8df b118 	ldr.w	fp, [pc, #280]	; 801288c <_strtod_l+0x5ac>
 8012776:	6023      	str	r3, [r4, #0]
 8012778:	f04f 0a00 	mov.w	sl, #0
 801277c:	9b07      	ldr	r3, [sp, #28]
 801277e:	2b00      	cmp	r3, #0
 8012780:	f43f adf2 	beq.w	8012368 <_strtod_l+0x88>
 8012784:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012786:	4620      	mov	r0, r4
 8012788:	f001 fece 	bl	8014528 <_Bfree>
 801278c:	9905      	ldr	r1, [sp, #20]
 801278e:	4620      	mov	r0, r4
 8012790:	f001 feca 	bl	8014528 <_Bfree>
 8012794:	4631      	mov	r1, r6
 8012796:	4620      	mov	r0, r4
 8012798:	f001 fec6 	bl	8014528 <_Bfree>
 801279c:	9907      	ldr	r1, [sp, #28]
 801279e:	4620      	mov	r0, r4
 80127a0:	f001 fec2 	bl	8014528 <_Bfree>
 80127a4:	4629      	mov	r1, r5
 80127a6:	4620      	mov	r0, r4
 80127a8:	f001 febe 	bl	8014528 <_Bfree>
 80127ac:	e5dc      	b.n	8012368 <_strtod_l+0x88>
 80127ae:	4b36      	ldr	r3, [pc, #216]	; (8012888 <_strtod_l+0x5a8>)
 80127b0:	9304      	str	r3, [sp, #16]
 80127b2:	2300      	movs	r3, #0
 80127b4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80127b8:	4650      	mov	r0, sl
 80127ba:	4659      	mov	r1, fp
 80127bc:	4699      	mov	r9, r3
 80127be:	f1b8 0f01 	cmp.w	r8, #1
 80127c2:	dc21      	bgt.n	8012808 <_strtod_l+0x528>
 80127c4:	b10b      	cbz	r3, 80127ca <_strtod_l+0x4ea>
 80127c6:	4682      	mov	sl, r0
 80127c8:	468b      	mov	fp, r1
 80127ca:	4b2f      	ldr	r3, [pc, #188]	; (8012888 <_strtod_l+0x5a8>)
 80127cc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80127d0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80127d4:	4652      	mov	r2, sl
 80127d6:	465b      	mov	r3, fp
 80127d8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80127dc:	f7ed ff0c 	bl	80005f8 <__aeabi_dmul>
 80127e0:	4b2a      	ldr	r3, [pc, #168]	; (801288c <_strtod_l+0x5ac>)
 80127e2:	460a      	mov	r2, r1
 80127e4:	400b      	ands	r3, r1
 80127e6:	492a      	ldr	r1, [pc, #168]	; (8012890 <_strtod_l+0x5b0>)
 80127e8:	428b      	cmp	r3, r1
 80127ea:	4682      	mov	sl, r0
 80127ec:	d8bc      	bhi.n	8012768 <_strtod_l+0x488>
 80127ee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80127f2:	428b      	cmp	r3, r1
 80127f4:	bf86      	itte	hi
 80127f6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8012894 <_strtod_l+0x5b4>
 80127fa:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 80127fe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8012802:	2300      	movs	r3, #0
 8012804:	9304      	str	r3, [sp, #16]
 8012806:	e084      	b.n	8012912 <_strtod_l+0x632>
 8012808:	f018 0f01 	tst.w	r8, #1
 801280c:	d005      	beq.n	801281a <_strtod_l+0x53a>
 801280e:	9b04      	ldr	r3, [sp, #16]
 8012810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012814:	f7ed fef0 	bl	80005f8 <__aeabi_dmul>
 8012818:	2301      	movs	r3, #1
 801281a:	9a04      	ldr	r2, [sp, #16]
 801281c:	3208      	adds	r2, #8
 801281e:	f109 0901 	add.w	r9, r9, #1
 8012822:	ea4f 0868 	mov.w	r8, r8, asr #1
 8012826:	9204      	str	r2, [sp, #16]
 8012828:	e7c9      	b.n	80127be <_strtod_l+0x4de>
 801282a:	d0ea      	beq.n	8012802 <_strtod_l+0x522>
 801282c:	f1c8 0800 	rsb	r8, r8, #0
 8012830:	f018 020f 	ands.w	r2, r8, #15
 8012834:	d00a      	beq.n	801284c <_strtod_l+0x56c>
 8012836:	4b13      	ldr	r3, [pc, #76]	; (8012884 <_strtod_l+0x5a4>)
 8012838:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801283c:	4650      	mov	r0, sl
 801283e:	4659      	mov	r1, fp
 8012840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012844:	f7ee f802 	bl	800084c <__aeabi_ddiv>
 8012848:	4682      	mov	sl, r0
 801284a:	468b      	mov	fp, r1
 801284c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8012850:	d0d7      	beq.n	8012802 <_strtod_l+0x522>
 8012852:	f1b8 0f1f 	cmp.w	r8, #31
 8012856:	dd1f      	ble.n	8012898 <_strtod_l+0x5b8>
 8012858:	2500      	movs	r5, #0
 801285a:	462e      	mov	r6, r5
 801285c:	9507      	str	r5, [sp, #28]
 801285e:	9505      	str	r5, [sp, #20]
 8012860:	2322      	movs	r3, #34	; 0x22
 8012862:	f04f 0a00 	mov.w	sl, #0
 8012866:	f04f 0b00 	mov.w	fp, #0
 801286a:	6023      	str	r3, [r4, #0]
 801286c:	e786      	b.n	801277c <_strtod_l+0x49c>
 801286e:	bf00      	nop
 8012870:	080177f5 	.word	0x080177f5
 8012874:	08017830 	.word	0x08017830
 8012878:	080177ed 	.word	0x080177ed
 801287c:	08017873 	.word	0x08017873
 8012880:	08017b20 	.word	0x08017b20
 8012884:	08017a00 	.word	0x08017a00
 8012888:	080179d8 	.word	0x080179d8
 801288c:	7ff00000 	.word	0x7ff00000
 8012890:	7ca00000 	.word	0x7ca00000
 8012894:	7fefffff 	.word	0x7fefffff
 8012898:	f018 0310 	ands.w	r3, r8, #16
 801289c:	bf18      	it	ne
 801289e:	236a      	movne	r3, #106	; 0x6a
 80128a0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8012c50 <_strtod_l+0x970>
 80128a4:	9304      	str	r3, [sp, #16]
 80128a6:	4650      	mov	r0, sl
 80128a8:	4659      	mov	r1, fp
 80128aa:	2300      	movs	r3, #0
 80128ac:	f018 0f01 	tst.w	r8, #1
 80128b0:	d004      	beq.n	80128bc <_strtod_l+0x5dc>
 80128b2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80128b6:	f7ed fe9f 	bl	80005f8 <__aeabi_dmul>
 80128ba:	2301      	movs	r3, #1
 80128bc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80128c0:	f109 0908 	add.w	r9, r9, #8
 80128c4:	d1f2      	bne.n	80128ac <_strtod_l+0x5cc>
 80128c6:	b10b      	cbz	r3, 80128cc <_strtod_l+0x5ec>
 80128c8:	4682      	mov	sl, r0
 80128ca:	468b      	mov	fp, r1
 80128cc:	9b04      	ldr	r3, [sp, #16]
 80128ce:	b1c3      	cbz	r3, 8012902 <_strtod_l+0x622>
 80128d0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80128d4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80128d8:	2b00      	cmp	r3, #0
 80128da:	4659      	mov	r1, fp
 80128dc:	dd11      	ble.n	8012902 <_strtod_l+0x622>
 80128de:	2b1f      	cmp	r3, #31
 80128e0:	f340 8124 	ble.w	8012b2c <_strtod_l+0x84c>
 80128e4:	2b34      	cmp	r3, #52	; 0x34
 80128e6:	bfde      	ittt	le
 80128e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80128ec:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80128f0:	fa03 f202 	lslle.w	r2, r3, r2
 80128f4:	f04f 0a00 	mov.w	sl, #0
 80128f8:	bfcc      	ite	gt
 80128fa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80128fe:	ea02 0b01 	andle.w	fp, r2, r1
 8012902:	2200      	movs	r2, #0
 8012904:	2300      	movs	r3, #0
 8012906:	4650      	mov	r0, sl
 8012908:	4659      	mov	r1, fp
 801290a:	f7ee f8dd 	bl	8000ac8 <__aeabi_dcmpeq>
 801290e:	2800      	cmp	r0, #0
 8012910:	d1a2      	bne.n	8012858 <_strtod_l+0x578>
 8012912:	9b07      	ldr	r3, [sp, #28]
 8012914:	9300      	str	r3, [sp, #0]
 8012916:	9908      	ldr	r1, [sp, #32]
 8012918:	462b      	mov	r3, r5
 801291a:	463a      	mov	r2, r7
 801291c:	4620      	mov	r0, r4
 801291e:	f001 fe6b 	bl	80145f8 <__s2b>
 8012922:	9007      	str	r0, [sp, #28]
 8012924:	2800      	cmp	r0, #0
 8012926:	f43f af1f 	beq.w	8012768 <_strtod_l+0x488>
 801292a:	9b05      	ldr	r3, [sp, #20]
 801292c:	1b9e      	subs	r6, r3, r6
 801292e:	9b06      	ldr	r3, [sp, #24]
 8012930:	2b00      	cmp	r3, #0
 8012932:	bfb4      	ite	lt
 8012934:	4633      	movlt	r3, r6
 8012936:	2300      	movge	r3, #0
 8012938:	930c      	str	r3, [sp, #48]	; 0x30
 801293a:	9b06      	ldr	r3, [sp, #24]
 801293c:	2500      	movs	r5, #0
 801293e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012942:	9312      	str	r3, [sp, #72]	; 0x48
 8012944:	462e      	mov	r6, r5
 8012946:	9b07      	ldr	r3, [sp, #28]
 8012948:	4620      	mov	r0, r4
 801294a:	6859      	ldr	r1, [r3, #4]
 801294c:	f001 fdac 	bl	80144a8 <_Balloc>
 8012950:	9005      	str	r0, [sp, #20]
 8012952:	2800      	cmp	r0, #0
 8012954:	f43f af0c 	beq.w	8012770 <_strtod_l+0x490>
 8012958:	9b07      	ldr	r3, [sp, #28]
 801295a:	691a      	ldr	r2, [r3, #16]
 801295c:	3202      	adds	r2, #2
 801295e:	f103 010c 	add.w	r1, r3, #12
 8012962:	0092      	lsls	r2, r2, #2
 8012964:	300c      	adds	r0, #12
 8012966:	f7fe ffc7 	bl	80118f8 <memcpy>
 801296a:	ec4b ab10 	vmov	d0, sl, fp
 801296e:	aa1a      	add	r2, sp, #104	; 0x68
 8012970:	a919      	add	r1, sp, #100	; 0x64
 8012972:	4620      	mov	r0, r4
 8012974:	f002 f986 	bl	8014c84 <__d2b>
 8012978:	ec4b ab18 	vmov	d8, sl, fp
 801297c:	9018      	str	r0, [sp, #96]	; 0x60
 801297e:	2800      	cmp	r0, #0
 8012980:	f43f aef6 	beq.w	8012770 <_strtod_l+0x490>
 8012984:	2101      	movs	r1, #1
 8012986:	4620      	mov	r0, r4
 8012988:	f001 fed0 	bl	801472c <__i2b>
 801298c:	4606      	mov	r6, r0
 801298e:	2800      	cmp	r0, #0
 8012990:	f43f aeee 	beq.w	8012770 <_strtod_l+0x490>
 8012994:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012996:	9904      	ldr	r1, [sp, #16]
 8012998:	2b00      	cmp	r3, #0
 801299a:	bfab      	itete	ge
 801299c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801299e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80129a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80129a2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80129a6:	bfac      	ite	ge
 80129a8:	eb03 0902 	addge.w	r9, r3, r2
 80129ac:	1ad7      	sublt	r7, r2, r3
 80129ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80129b0:	eba3 0801 	sub.w	r8, r3, r1
 80129b4:	4490      	add	r8, r2
 80129b6:	4ba1      	ldr	r3, [pc, #644]	; (8012c3c <_strtod_l+0x95c>)
 80129b8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80129bc:	4598      	cmp	r8, r3
 80129be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80129c2:	f280 80c7 	bge.w	8012b54 <_strtod_l+0x874>
 80129c6:	eba3 0308 	sub.w	r3, r3, r8
 80129ca:	2b1f      	cmp	r3, #31
 80129cc:	eba2 0203 	sub.w	r2, r2, r3
 80129d0:	f04f 0101 	mov.w	r1, #1
 80129d4:	f300 80b1 	bgt.w	8012b3a <_strtod_l+0x85a>
 80129d8:	fa01 f303 	lsl.w	r3, r1, r3
 80129dc:	930d      	str	r3, [sp, #52]	; 0x34
 80129de:	2300      	movs	r3, #0
 80129e0:	9308      	str	r3, [sp, #32]
 80129e2:	eb09 0802 	add.w	r8, r9, r2
 80129e6:	9b04      	ldr	r3, [sp, #16]
 80129e8:	45c1      	cmp	r9, r8
 80129ea:	4417      	add	r7, r2
 80129ec:	441f      	add	r7, r3
 80129ee:	464b      	mov	r3, r9
 80129f0:	bfa8      	it	ge
 80129f2:	4643      	movge	r3, r8
 80129f4:	42bb      	cmp	r3, r7
 80129f6:	bfa8      	it	ge
 80129f8:	463b      	movge	r3, r7
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	bfc2      	ittt	gt
 80129fe:	eba8 0803 	subgt.w	r8, r8, r3
 8012a02:	1aff      	subgt	r7, r7, r3
 8012a04:	eba9 0903 	subgt.w	r9, r9, r3
 8012a08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	dd17      	ble.n	8012a3e <_strtod_l+0x75e>
 8012a0e:	4631      	mov	r1, r6
 8012a10:	461a      	mov	r2, r3
 8012a12:	4620      	mov	r0, r4
 8012a14:	f001 ff4a 	bl	80148ac <__pow5mult>
 8012a18:	4606      	mov	r6, r0
 8012a1a:	2800      	cmp	r0, #0
 8012a1c:	f43f aea8 	beq.w	8012770 <_strtod_l+0x490>
 8012a20:	4601      	mov	r1, r0
 8012a22:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012a24:	4620      	mov	r0, r4
 8012a26:	f001 fe97 	bl	8014758 <__multiply>
 8012a2a:	900b      	str	r0, [sp, #44]	; 0x2c
 8012a2c:	2800      	cmp	r0, #0
 8012a2e:	f43f ae9f 	beq.w	8012770 <_strtod_l+0x490>
 8012a32:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012a34:	4620      	mov	r0, r4
 8012a36:	f001 fd77 	bl	8014528 <_Bfree>
 8012a3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012a3c:	9318      	str	r3, [sp, #96]	; 0x60
 8012a3e:	f1b8 0f00 	cmp.w	r8, #0
 8012a42:	f300 808c 	bgt.w	8012b5e <_strtod_l+0x87e>
 8012a46:	9b06      	ldr	r3, [sp, #24]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	dd08      	ble.n	8012a5e <_strtod_l+0x77e>
 8012a4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012a4e:	9905      	ldr	r1, [sp, #20]
 8012a50:	4620      	mov	r0, r4
 8012a52:	f001 ff2b 	bl	80148ac <__pow5mult>
 8012a56:	9005      	str	r0, [sp, #20]
 8012a58:	2800      	cmp	r0, #0
 8012a5a:	f43f ae89 	beq.w	8012770 <_strtod_l+0x490>
 8012a5e:	2f00      	cmp	r7, #0
 8012a60:	dd08      	ble.n	8012a74 <_strtod_l+0x794>
 8012a62:	9905      	ldr	r1, [sp, #20]
 8012a64:	463a      	mov	r2, r7
 8012a66:	4620      	mov	r0, r4
 8012a68:	f001 ff7a 	bl	8014960 <__lshift>
 8012a6c:	9005      	str	r0, [sp, #20]
 8012a6e:	2800      	cmp	r0, #0
 8012a70:	f43f ae7e 	beq.w	8012770 <_strtod_l+0x490>
 8012a74:	f1b9 0f00 	cmp.w	r9, #0
 8012a78:	dd08      	ble.n	8012a8c <_strtod_l+0x7ac>
 8012a7a:	4631      	mov	r1, r6
 8012a7c:	464a      	mov	r2, r9
 8012a7e:	4620      	mov	r0, r4
 8012a80:	f001 ff6e 	bl	8014960 <__lshift>
 8012a84:	4606      	mov	r6, r0
 8012a86:	2800      	cmp	r0, #0
 8012a88:	f43f ae72 	beq.w	8012770 <_strtod_l+0x490>
 8012a8c:	9a05      	ldr	r2, [sp, #20]
 8012a8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012a90:	4620      	mov	r0, r4
 8012a92:	f001 fff1 	bl	8014a78 <__mdiff>
 8012a96:	4605      	mov	r5, r0
 8012a98:	2800      	cmp	r0, #0
 8012a9a:	f43f ae69 	beq.w	8012770 <_strtod_l+0x490>
 8012a9e:	68c3      	ldr	r3, [r0, #12]
 8012aa0:	930b      	str	r3, [sp, #44]	; 0x2c
 8012aa2:	2300      	movs	r3, #0
 8012aa4:	60c3      	str	r3, [r0, #12]
 8012aa6:	4631      	mov	r1, r6
 8012aa8:	f001 ffca 	bl	8014a40 <__mcmp>
 8012aac:	2800      	cmp	r0, #0
 8012aae:	da60      	bge.n	8012b72 <_strtod_l+0x892>
 8012ab0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012ab2:	ea53 030a 	orrs.w	r3, r3, sl
 8012ab6:	f040 8082 	bne.w	8012bbe <_strtod_l+0x8de>
 8012aba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d17d      	bne.n	8012bbe <_strtod_l+0x8de>
 8012ac2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012ac6:	0d1b      	lsrs	r3, r3, #20
 8012ac8:	051b      	lsls	r3, r3, #20
 8012aca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8012ace:	d976      	bls.n	8012bbe <_strtod_l+0x8de>
 8012ad0:	696b      	ldr	r3, [r5, #20]
 8012ad2:	b913      	cbnz	r3, 8012ada <_strtod_l+0x7fa>
 8012ad4:	692b      	ldr	r3, [r5, #16]
 8012ad6:	2b01      	cmp	r3, #1
 8012ad8:	dd71      	ble.n	8012bbe <_strtod_l+0x8de>
 8012ada:	4629      	mov	r1, r5
 8012adc:	2201      	movs	r2, #1
 8012ade:	4620      	mov	r0, r4
 8012ae0:	f001 ff3e 	bl	8014960 <__lshift>
 8012ae4:	4631      	mov	r1, r6
 8012ae6:	4605      	mov	r5, r0
 8012ae8:	f001 ffaa 	bl	8014a40 <__mcmp>
 8012aec:	2800      	cmp	r0, #0
 8012aee:	dd66      	ble.n	8012bbe <_strtod_l+0x8de>
 8012af0:	9904      	ldr	r1, [sp, #16]
 8012af2:	4a53      	ldr	r2, [pc, #332]	; (8012c40 <_strtod_l+0x960>)
 8012af4:	465b      	mov	r3, fp
 8012af6:	2900      	cmp	r1, #0
 8012af8:	f000 8081 	beq.w	8012bfe <_strtod_l+0x91e>
 8012afc:	ea02 010b 	and.w	r1, r2, fp
 8012b00:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8012b04:	dc7b      	bgt.n	8012bfe <_strtod_l+0x91e>
 8012b06:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8012b0a:	f77f aea9 	ble.w	8012860 <_strtod_l+0x580>
 8012b0e:	4b4d      	ldr	r3, [pc, #308]	; (8012c44 <_strtod_l+0x964>)
 8012b10:	4650      	mov	r0, sl
 8012b12:	4659      	mov	r1, fp
 8012b14:	2200      	movs	r2, #0
 8012b16:	f7ed fd6f 	bl	80005f8 <__aeabi_dmul>
 8012b1a:	460b      	mov	r3, r1
 8012b1c:	4303      	orrs	r3, r0
 8012b1e:	bf08      	it	eq
 8012b20:	2322      	moveq	r3, #34	; 0x22
 8012b22:	4682      	mov	sl, r0
 8012b24:	468b      	mov	fp, r1
 8012b26:	bf08      	it	eq
 8012b28:	6023      	streq	r3, [r4, #0]
 8012b2a:	e62b      	b.n	8012784 <_strtod_l+0x4a4>
 8012b2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012b30:	fa02 f303 	lsl.w	r3, r2, r3
 8012b34:	ea03 0a0a 	and.w	sl, r3, sl
 8012b38:	e6e3      	b.n	8012902 <_strtod_l+0x622>
 8012b3a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8012b3e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8012b42:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8012b46:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8012b4a:	fa01 f308 	lsl.w	r3, r1, r8
 8012b4e:	9308      	str	r3, [sp, #32]
 8012b50:	910d      	str	r1, [sp, #52]	; 0x34
 8012b52:	e746      	b.n	80129e2 <_strtod_l+0x702>
 8012b54:	2300      	movs	r3, #0
 8012b56:	9308      	str	r3, [sp, #32]
 8012b58:	2301      	movs	r3, #1
 8012b5a:	930d      	str	r3, [sp, #52]	; 0x34
 8012b5c:	e741      	b.n	80129e2 <_strtod_l+0x702>
 8012b5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012b60:	4642      	mov	r2, r8
 8012b62:	4620      	mov	r0, r4
 8012b64:	f001 fefc 	bl	8014960 <__lshift>
 8012b68:	9018      	str	r0, [sp, #96]	; 0x60
 8012b6a:	2800      	cmp	r0, #0
 8012b6c:	f47f af6b 	bne.w	8012a46 <_strtod_l+0x766>
 8012b70:	e5fe      	b.n	8012770 <_strtod_l+0x490>
 8012b72:	465f      	mov	r7, fp
 8012b74:	d16e      	bne.n	8012c54 <_strtod_l+0x974>
 8012b76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012b78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012b7c:	b342      	cbz	r2, 8012bd0 <_strtod_l+0x8f0>
 8012b7e:	4a32      	ldr	r2, [pc, #200]	; (8012c48 <_strtod_l+0x968>)
 8012b80:	4293      	cmp	r3, r2
 8012b82:	d128      	bne.n	8012bd6 <_strtod_l+0x8f6>
 8012b84:	9b04      	ldr	r3, [sp, #16]
 8012b86:	4651      	mov	r1, sl
 8012b88:	b1eb      	cbz	r3, 8012bc6 <_strtod_l+0x8e6>
 8012b8a:	4b2d      	ldr	r3, [pc, #180]	; (8012c40 <_strtod_l+0x960>)
 8012b8c:	403b      	ands	r3, r7
 8012b8e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012b92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012b96:	d819      	bhi.n	8012bcc <_strtod_l+0x8ec>
 8012b98:	0d1b      	lsrs	r3, r3, #20
 8012b9a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8012ba2:	4299      	cmp	r1, r3
 8012ba4:	d117      	bne.n	8012bd6 <_strtod_l+0x8f6>
 8012ba6:	4b29      	ldr	r3, [pc, #164]	; (8012c4c <_strtod_l+0x96c>)
 8012ba8:	429f      	cmp	r7, r3
 8012baa:	d102      	bne.n	8012bb2 <_strtod_l+0x8d2>
 8012bac:	3101      	adds	r1, #1
 8012bae:	f43f addf 	beq.w	8012770 <_strtod_l+0x490>
 8012bb2:	4b23      	ldr	r3, [pc, #140]	; (8012c40 <_strtod_l+0x960>)
 8012bb4:	403b      	ands	r3, r7
 8012bb6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8012bba:	f04f 0a00 	mov.w	sl, #0
 8012bbe:	9b04      	ldr	r3, [sp, #16]
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d1a4      	bne.n	8012b0e <_strtod_l+0x82e>
 8012bc4:	e5de      	b.n	8012784 <_strtod_l+0x4a4>
 8012bc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012bca:	e7ea      	b.n	8012ba2 <_strtod_l+0x8c2>
 8012bcc:	4613      	mov	r3, r2
 8012bce:	e7e8      	b.n	8012ba2 <_strtod_l+0x8c2>
 8012bd0:	ea53 030a 	orrs.w	r3, r3, sl
 8012bd4:	d08c      	beq.n	8012af0 <_strtod_l+0x810>
 8012bd6:	9b08      	ldr	r3, [sp, #32]
 8012bd8:	b1db      	cbz	r3, 8012c12 <_strtod_l+0x932>
 8012bda:	423b      	tst	r3, r7
 8012bdc:	d0ef      	beq.n	8012bbe <_strtod_l+0x8de>
 8012bde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012be0:	9a04      	ldr	r2, [sp, #16]
 8012be2:	4650      	mov	r0, sl
 8012be4:	4659      	mov	r1, fp
 8012be6:	b1c3      	cbz	r3, 8012c1a <_strtod_l+0x93a>
 8012be8:	f7ff fb5d 	bl	80122a6 <sulp>
 8012bec:	4602      	mov	r2, r0
 8012bee:	460b      	mov	r3, r1
 8012bf0:	ec51 0b18 	vmov	r0, r1, d8
 8012bf4:	f7ed fb4a 	bl	800028c <__adddf3>
 8012bf8:	4682      	mov	sl, r0
 8012bfa:	468b      	mov	fp, r1
 8012bfc:	e7df      	b.n	8012bbe <_strtod_l+0x8de>
 8012bfe:	4013      	ands	r3, r2
 8012c00:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8012c04:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8012c08:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8012c0c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8012c10:	e7d5      	b.n	8012bbe <_strtod_l+0x8de>
 8012c12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012c14:	ea13 0f0a 	tst.w	r3, sl
 8012c18:	e7e0      	b.n	8012bdc <_strtod_l+0x8fc>
 8012c1a:	f7ff fb44 	bl	80122a6 <sulp>
 8012c1e:	4602      	mov	r2, r0
 8012c20:	460b      	mov	r3, r1
 8012c22:	ec51 0b18 	vmov	r0, r1, d8
 8012c26:	f7ed fb2f 	bl	8000288 <__aeabi_dsub>
 8012c2a:	2200      	movs	r2, #0
 8012c2c:	2300      	movs	r3, #0
 8012c2e:	4682      	mov	sl, r0
 8012c30:	468b      	mov	fp, r1
 8012c32:	f7ed ff49 	bl	8000ac8 <__aeabi_dcmpeq>
 8012c36:	2800      	cmp	r0, #0
 8012c38:	d0c1      	beq.n	8012bbe <_strtod_l+0x8de>
 8012c3a:	e611      	b.n	8012860 <_strtod_l+0x580>
 8012c3c:	fffffc02 	.word	0xfffffc02
 8012c40:	7ff00000 	.word	0x7ff00000
 8012c44:	39500000 	.word	0x39500000
 8012c48:	000fffff 	.word	0x000fffff
 8012c4c:	7fefffff 	.word	0x7fefffff
 8012c50:	08017848 	.word	0x08017848
 8012c54:	4631      	mov	r1, r6
 8012c56:	4628      	mov	r0, r5
 8012c58:	f002 f870 	bl	8014d3c <__ratio>
 8012c5c:	ec59 8b10 	vmov	r8, r9, d0
 8012c60:	ee10 0a10 	vmov	r0, s0
 8012c64:	2200      	movs	r2, #0
 8012c66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012c6a:	4649      	mov	r1, r9
 8012c6c:	f7ed ff40 	bl	8000af0 <__aeabi_dcmple>
 8012c70:	2800      	cmp	r0, #0
 8012c72:	d07a      	beq.n	8012d6a <_strtod_l+0xa8a>
 8012c74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d04a      	beq.n	8012d10 <_strtod_l+0xa30>
 8012c7a:	4b95      	ldr	r3, [pc, #596]	; (8012ed0 <_strtod_l+0xbf0>)
 8012c7c:	2200      	movs	r2, #0
 8012c7e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012c82:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8012ed0 <_strtod_l+0xbf0>
 8012c86:	f04f 0800 	mov.w	r8, #0
 8012c8a:	4b92      	ldr	r3, [pc, #584]	; (8012ed4 <_strtod_l+0xbf4>)
 8012c8c:	403b      	ands	r3, r7
 8012c8e:	930d      	str	r3, [sp, #52]	; 0x34
 8012c90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012c92:	4b91      	ldr	r3, [pc, #580]	; (8012ed8 <_strtod_l+0xbf8>)
 8012c94:	429a      	cmp	r2, r3
 8012c96:	f040 80b0 	bne.w	8012dfa <_strtod_l+0xb1a>
 8012c9a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012c9e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8012ca2:	ec4b ab10 	vmov	d0, sl, fp
 8012ca6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012caa:	f001 ff6f 	bl	8014b8c <__ulp>
 8012cae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012cb2:	ec53 2b10 	vmov	r2, r3, d0
 8012cb6:	f7ed fc9f 	bl	80005f8 <__aeabi_dmul>
 8012cba:	4652      	mov	r2, sl
 8012cbc:	465b      	mov	r3, fp
 8012cbe:	f7ed fae5 	bl	800028c <__adddf3>
 8012cc2:	460b      	mov	r3, r1
 8012cc4:	4983      	ldr	r1, [pc, #524]	; (8012ed4 <_strtod_l+0xbf4>)
 8012cc6:	4a85      	ldr	r2, [pc, #532]	; (8012edc <_strtod_l+0xbfc>)
 8012cc8:	4019      	ands	r1, r3
 8012cca:	4291      	cmp	r1, r2
 8012ccc:	4682      	mov	sl, r0
 8012cce:	d960      	bls.n	8012d92 <_strtod_l+0xab2>
 8012cd0:	ee18 3a90 	vmov	r3, s17
 8012cd4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8012cd8:	4293      	cmp	r3, r2
 8012cda:	d104      	bne.n	8012ce6 <_strtod_l+0xa06>
 8012cdc:	ee18 3a10 	vmov	r3, s16
 8012ce0:	3301      	adds	r3, #1
 8012ce2:	f43f ad45 	beq.w	8012770 <_strtod_l+0x490>
 8012ce6:	f8df b200 	ldr.w	fp, [pc, #512]	; 8012ee8 <_strtod_l+0xc08>
 8012cea:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8012cee:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012cf0:	4620      	mov	r0, r4
 8012cf2:	f001 fc19 	bl	8014528 <_Bfree>
 8012cf6:	9905      	ldr	r1, [sp, #20]
 8012cf8:	4620      	mov	r0, r4
 8012cfa:	f001 fc15 	bl	8014528 <_Bfree>
 8012cfe:	4631      	mov	r1, r6
 8012d00:	4620      	mov	r0, r4
 8012d02:	f001 fc11 	bl	8014528 <_Bfree>
 8012d06:	4629      	mov	r1, r5
 8012d08:	4620      	mov	r0, r4
 8012d0a:	f001 fc0d 	bl	8014528 <_Bfree>
 8012d0e:	e61a      	b.n	8012946 <_strtod_l+0x666>
 8012d10:	f1ba 0f00 	cmp.w	sl, #0
 8012d14:	d11b      	bne.n	8012d4e <_strtod_l+0xa6e>
 8012d16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012d1a:	b9f3      	cbnz	r3, 8012d5a <_strtod_l+0xa7a>
 8012d1c:	4b6c      	ldr	r3, [pc, #432]	; (8012ed0 <_strtod_l+0xbf0>)
 8012d1e:	2200      	movs	r2, #0
 8012d20:	4640      	mov	r0, r8
 8012d22:	4649      	mov	r1, r9
 8012d24:	f7ed feda 	bl	8000adc <__aeabi_dcmplt>
 8012d28:	b9d0      	cbnz	r0, 8012d60 <_strtod_l+0xa80>
 8012d2a:	4640      	mov	r0, r8
 8012d2c:	4649      	mov	r1, r9
 8012d2e:	4b6c      	ldr	r3, [pc, #432]	; (8012ee0 <_strtod_l+0xc00>)
 8012d30:	2200      	movs	r2, #0
 8012d32:	f7ed fc61 	bl	80005f8 <__aeabi_dmul>
 8012d36:	4680      	mov	r8, r0
 8012d38:	4689      	mov	r9, r1
 8012d3a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012d3e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8012d42:	9315      	str	r3, [sp, #84]	; 0x54
 8012d44:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8012d48:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012d4c:	e79d      	b.n	8012c8a <_strtod_l+0x9aa>
 8012d4e:	f1ba 0f01 	cmp.w	sl, #1
 8012d52:	d102      	bne.n	8012d5a <_strtod_l+0xa7a>
 8012d54:	2f00      	cmp	r7, #0
 8012d56:	f43f ad83 	beq.w	8012860 <_strtod_l+0x580>
 8012d5a:	4b62      	ldr	r3, [pc, #392]	; (8012ee4 <_strtod_l+0xc04>)
 8012d5c:	2200      	movs	r2, #0
 8012d5e:	e78e      	b.n	8012c7e <_strtod_l+0x99e>
 8012d60:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8012ee0 <_strtod_l+0xc00>
 8012d64:	f04f 0800 	mov.w	r8, #0
 8012d68:	e7e7      	b.n	8012d3a <_strtod_l+0xa5a>
 8012d6a:	4b5d      	ldr	r3, [pc, #372]	; (8012ee0 <_strtod_l+0xc00>)
 8012d6c:	4640      	mov	r0, r8
 8012d6e:	4649      	mov	r1, r9
 8012d70:	2200      	movs	r2, #0
 8012d72:	f7ed fc41 	bl	80005f8 <__aeabi_dmul>
 8012d76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012d78:	4680      	mov	r8, r0
 8012d7a:	4689      	mov	r9, r1
 8012d7c:	b933      	cbnz	r3, 8012d8c <_strtod_l+0xaac>
 8012d7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012d82:	900e      	str	r0, [sp, #56]	; 0x38
 8012d84:	930f      	str	r3, [sp, #60]	; 0x3c
 8012d86:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8012d8a:	e7dd      	b.n	8012d48 <_strtod_l+0xa68>
 8012d8c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8012d90:	e7f9      	b.n	8012d86 <_strtod_l+0xaa6>
 8012d92:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8012d96:	9b04      	ldr	r3, [sp, #16]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d1a8      	bne.n	8012cee <_strtod_l+0xa0e>
 8012d9c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012da0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012da2:	0d1b      	lsrs	r3, r3, #20
 8012da4:	051b      	lsls	r3, r3, #20
 8012da6:	429a      	cmp	r2, r3
 8012da8:	d1a1      	bne.n	8012cee <_strtod_l+0xa0e>
 8012daa:	4640      	mov	r0, r8
 8012dac:	4649      	mov	r1, r9
 8012dae:	f7ed ffd3 	bl	8000d58 <__aeabi_d2lz>
 8012db2:	f7ed fbf3 	bl	800059c <__aeabi_l2d>
 8012db6:	4602      	mov	r2, r0
 8012db8:	460b      	mov	r3, r1
 8012dba:	4640      	mov	r0, r8
 8012dbc:	4649      	mov	r1, r9
 8012dbe:	f7ed fa63 	bl	8000288 <__aeabi_dsub>
 8012dc2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012dc4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012dc8:	ea43 030a 	orr.w	r3, r3, sl
 8012dcc:	4313      	orrs	r3, r2
 8012dce:	4680      	mov	r8, r0
 8012dd0:	4689      	mov	r9, r1
 8012dd2:	d055      	beq.n	8012e80 <_strtod_l+0xba0>
 8012dd4:	a336      	add	r3, pc, #216	; (adr r3, 8012eb0 <_strtod_l+0xbd0>)
 8012dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dda:	f7ed fe7f 	bl	8000adc <__aeabi_dcmplt>
 8012dde:	2800      	cmp	r0, #0
 8012de0:	f47f acd0 	bne.w	8012784 <_strtod_l+0x4a4>
 8012de4:	a334      	add	r3, pc, #208	; (adr r3, 8012eb8 <_strtod_l+0xbd8>)
 8012de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dea:	4640      	mov	r0, r8
 8012dec:	4649      	mov	r1, r9
 8012dee:	f7ed fe93 	bl	8000b18 <__aeabi_dcmpgt>
 8012df2:	2800      	cmp	r0, #0
 8012df4:	f43f af7b 	beq.w	8012cee <_strtod_l+0xa0e>
 8012df8:	e4c4      	b.n	8012784 <_strtod_l+0x4a4>
 8012dfa:	9b04      	ldr	r3, [sp, #16]
 8012dfc:	b333      	cbz	r3, 8012e4c <_strtod_l+0xb6c>
 8012dfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012e00:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012e04:	d822      	bhi.n	8012e4c <_strtod_l+0xb6c>
 8012e06:	a32e      	add	r3, pc, #184	; (adr r3, 8012ec0 <_strtod_l+0xbe0>)
 8012e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e0c:	4640      	mov	r0, r8
 8012e0e:	4649      	mov	r1, r9
 8012e10:	f7ed fe6e 	bl	8000af0 <__aeabi_dcmple>
 8012e14:	b1a0      	cbz	r0, 8012e40 <_strtod_l+0xb60>
 8012e16:	4649      	mov	r1, r9
 8012e18:	4640      	mov	r0, r8
 8012e1a:	f7ed fec5 	bl	8000ba8 <__aeabi_d2uiz>
 8012e1e:	2801      	cmp	r0, #1
 8012e20:	bf38      	it	cc
 8012e22:	2001      	movcc	r0, #1
 8012e24:	f7ed fb6e 	bl	8000504 <__aeabi_ui2d>
 8012e28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012e2a:	4680      	mov	r8, r0
 8012e2c:	4689      	mov	r9, r1
 8012e2e:	bb23      	cbnz	r3, 8012e7a <_strtod_l+0xb9a>
 8012e30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012e34:	9010      	str	r0, [sp, #64]	; 0x40
 8012e36:	9311      	str	r3, [sp, #68]	; 0x44
 8012e38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012e3c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012e44:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8012e48:	1a9b      	subs	r3, r3, r2
 8012e4a:	9309      	str	r3, [sp, #36]	; 0x24
 8012e4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012e50:	eeb0 0a48 	vmov.f32	s0, s16
 8012e54:	eef0 0a68 	vmov.f32	s1, s17
 8012e58:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012e5c:	f001 fe96 	bl	8014b8c <__ulp>
 8012e60:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012e64:	ec53 2b10 	vmov	r2, r3, d0
 8012e68:	f7ed fbc6 	bl	80005f8 <__aeabi_dmul>
 8012e6c:	ec53 2b18 	vmov	r2, r3, d8
 8012e70:	f7ed fa0c 	bl	800028c <__adddf3>
 8012e74:	4682      	mov	sl, r0
 8012e76:	468b      	mov	fp, r1
 8012e78:	e78d      	b.n	8012d96 <_strtod_l+0xab6>
 8012e7a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8012e7e:	e7db      	b.n	8012e38 <_strtod_l+0xb58>
 8012e80:	a311      	add	r3, pc, #68	; (adr r3, 8012ec8 <_strtod_l+0xbe8>)
 8012e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e86:	f7ed fe29 	bl	8000adc <__aeabi_dcmplt>
 8012e8a:	e7b2      	b.n	8012df2 <_strtod_l+0xb12>
 8012e8c:	2300      	movs	r3, #0
 8012e8e:	930a      	str	r3, [sp, #40]	; 0x28
 8012e90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012e92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012e94:	6013      	str	r3, [r2, #0]
 8012e96:	f7ff ba6b 	b.w	8012370 <_strtod_l+0x90>
 8012e9a:	2a65      	cmp	r2, #101	; 0x65
 8012e9c:	f43f ab5f 	beq.w	801255e <_strtod_l+0x27e>
 8012ea0:	2a45      	cmp	r2, #69	; 0x45
 8012ea2:	f43f ab5c 	beq.w	801255e <_strtod_l+0x27e>
 8012ea6:	2301      	movs	r3, #1
 8012ea8:	f7ff bb94 	b.w	80125d4 <_strtod_l+0x2f4>
 8012eac:	f3af 8000 	nop.w
 8012eb0:	94a03595 	.word	0x94a03595
 8012eb4:	3fdfffff 	.word	0x3fdfffff
 8012eb8:	35afe535 	.word	0x35afe535
 8012ebc:	3fe00000 	.word	0x3fe00000
 8012ec0:	ffc00000 	.word	0xffc00000
 8012ec4:	41dfffff 	.word	0x41dfffff
 8012ec8:	94a03595 	.word	0x94a03595
 8012ecc:	3fcfffff 	.word	0x3fcfffff
 8012ed0:	3ff00000 	.word	0x3ff00000
 8012ed4:	7ff00000 	.word	0x7ff00000
 8012ed8:	7fe00000 	.word	0x7fe00000
 8012edc:	7c9fffff 	.word	0x7c9fffff
 8012ee0:	3fe00000 	.word	0x3fe00000
 8012ee4:	bff00000 	.word	0xbff00000
 8012ee8:	7fefffff 	.word	0x7fefffff

08012eec <strtod>:
 8012eec:	460a      	mov	r2, r1
 8012eee:	4601      	mov	r1, r0
 8012ef0:	4802      	ldr	r0, [pc, #8]	; (8012efc <strtod+0x10>)
 8012ef2:	4b03      	ldr	r3, [pc, #12]	; (8012f00 <strtod+0x14>)
 8012ef4:	6800      	ldr	r0, [r0, #0]
 8012ef6:	f7ff b9f3 	b.w	80122e0 <_strtod_l>
 8012efa:	bf00      	nop
 8012efc:	20000234 	.word	0x20000234
 8012f00:	2000029c 	.word	0x2000029c

08012f04 <_strtol_l.constprop.0>:
 8012f04:	2b01      	cmp	r3, #1
 8012f06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f0a:	d001      	beq.n	8012f10 <_strtol_l.constprop.0+0xc>
 8012f0c:	2b24      	cmp	r3, #36	; 0x24
 8012f0e:	d906      	bls.n	8012f1e <_strtol_l.constprop.0+0x1a>
 8012f10:	f7fe fc1c 	bl	801174c <__errno>
 8012f14:	2316      	movs	r3, #22
 8012f16:	6003      	str	r3, [r0, #0]
 8012f18:	2000      	movs	r0, #0
 8012f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f1e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8013004 <_strtol_l.constprop.0+0x100>
 8012f22:	460d      	mov	r5, r1
 8012f24:	462e      	mov	r6, r5
 8012f26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012f2a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8012f2e:	f017 0708 	ands.w	r7, r7, #8
 8012f32:	d1f7      	bne.n	8012f24 <_strtol_l.constprop.0+0x20>
 8012f34:	2c2d      	cmp	r4, #45	; 0x2d
 8012f36:	d132      	bne.n	8012f9e <_strtol_l.constprop.0+0x9a>
 8012f38:	782c      	ldrb	r4, [r5, #0]
 8012f3a:	2701      	movs	r7, #1
 8012f3c:	1cb5      	adds	r5, r6, #2
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d05b      	beq.n	8012ffa <_strtol_l.constprop.0+0xf6>
 8012f42:	2b10      	cmp	r3, #16
 8012f44:	d109      	bne.n	8012f5a <_strtol_l.constprop.0+0x56>
 8012f46:	2c30      	cmp	r4, #48	; 0x30
 8012f48:	d107      	bne.n	8012f5a <_strtol_l.constprop.0+0x56>
 8012f4a:	782c      	ldrb	r4, [r5, #0]
 8012f4c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8012f50:	2c58      	cmp	r4, #88	; 0x58
 8012f52:	d14d      	bne.n	8012ff0 <_strtol_l.constprop.0+0xec>
 8012f54:	786c      	ldrb	r4, [r5, #1]
 8012f56:	2310      	movs	r3, #16
 8012f58:	3502      	adds	r5, #2
 8012f5a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8012f5e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8012f62:	f04f 0c00 	mov.w	ip, #0
 8012f66:	fbb8 f9f3 	udiv	r9, r8, r3
 8012f6a:	4666      	mov	r6, ip
 8012f6c:	fb03 8a19 	mls	sl, r3, r9, r8
 8012f70:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8012f74:	f1be 0f09 	cmp.w	lr, #9
 8012f78:	d816      	bhi.n	8012fa8 <_strtol_l.constprop.0+0xa4>
 8012f7a:	4674      	mov	r4, lr
 8012f7c:	42a3      	cmp	r3, r4
 8012f7e:	dd24      	ble.n	8012fca <_strtol_l.constprop.0+0xc6>
 8012f80:	f1bc 0f00 	cmp.w	ip, #0
 8012f84:	db1e      	blt.n	8012fc4 <_strtol_l.constprop.0+0xc0>
 8012f86:	45b1      	cmp	r9, r6
 8012f88:	d31c      	bcc.n	8012fc4 <_strtol_l.constprop.0+0xc0>
 8012f8a:	d101      	bne.n	8012f90 <_strtol_l.constprop.0+0x8c>
 8012f8c:	45a2      	cmp	sl, r4
 8012f8e:	db19      	blt.n	8012fc4 <_strtol_l.constprop.0+0xc0>
 8012f90:	fb06 4603 	mla	r6, r6, r3, r4
 8012f94:	f04f 0c01 	mov.w	ip, #1
 8012f98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012f9c:	e7e8      	b.n	8012f70 <_strtol_l.constprop.0+0x6c>
 8012f9e:	2c2b      	cmp	r4, #43	; 0x2b
 8012fa0:	bf04      	itt	eq
 8012fa2:	782c      	ldrbeq	r4, [r5, #0]
 8012fa4:	1cb5      	addeq	r5, r6, #2
 8012fa6:	e7ca      	b.n	8012f3e <_strtol_l.constprop.0+0x3a>
 8012fa8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8012fac:	f1be 0f19 	cmp.w	lr, #25
 8012fb0:	d801      	bhi.n	8012fb6 <_strtol_l.constprop.0+0xb2>
 8012fb2:	3c37      	subs	r4, #55	; 0x37
 8012fb4:	e7e2      	b.n	8012f7c <_strtol_l.constprop.0+0x78>
 8012fb6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8012fba:	f1be 0f19 	cmp.w	lr, #25
 8012fbe:	d804      	bhi.n	8012fca <_strtol_l.constprop.0+0xc6>
 8012fc0:	3c57      	subs	r4, #87	; 0x57
 8012fc2:	e7db      	b.n	8012f7c <_strtol_l.constprop.0+0x78>
 8012fc4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8012fc8:	e7e6      	b.n	8012f98 <_strtol_l.constprop.0+0x94>
 8012fca:	f1bc 0f00 	cmp.w	ip, #0
 8012fce:	da05      	bge.n	8012fdc <_strtol_l.constprop.0+0xd8>
 8012fd0:	2322      	movs	r3, #34	; 0x22
 8012fd2:	6003      	str	r3, [r0, #0]
 8012fd4:	4646      	mov	r6, r8
 8012fd6:	b942      	cbnz	r2, 8012fea <_strtol_l.constprop.0+0xe6>
 8012fd8:	4630      	mov	r0, r6
 8012fda:	e79e      	b.n	8012f1a <_strtol_l.constprop.0+0x16>
 8012fdc:	b107      	cbz	r7, 8012fe0 <_strtol_l.constprop.0+0xdc>
 8012fde:	4276      	negs	r6, r6
 8012fe0:	2a00      	cmp	r2, #0
 8012fe2:	d0f9      	beq.n	8012fd8 <_strtol_l.constprop.0+0xd4>
 8012fe4:	f1bc 0f00 	cmp.w	ip, #0
 8012fe8:	d000      	beq.n	8012fec <_strtol_l.constprop.0+0xe8>
 8012fea:	1e69      	subs	r1, r5, #1
 8012fec:	6011      	str	r1, [r2, #0]
 8012fee:	e7f3      	b.n	8012fd8 <_strtol_l.constprop.0+0xd4>
 8012ff0:	2430      	movs	r4, #48	; 0x30
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d1b1      	bne.n	8012f5a <_strtol_l.constprop.0+0x56>
 8012ff6:	2308      	movs	r3, #8
 8012ff8:	e7af      	b.n	8012f5a <_strtol_l.constprop.0+0x56>
 8012ffa:	2c30      	cmp	r4, #48	; 0x30
 8012ffc:	d0a5      	beq.n	8012f4a <_strtol_l.constprop.0+0x46>
 8012ffe:	230a      	movs	r3, #10
 8013000:	e7ab      	b.n	8012f5a <_strtol_l.constprop.0+0x56>
 8013002:	bf00      	nop
 8013004:	080176e3 	.word	0x080176e3

08013008 <strtol>:
 8013008:	4613      	mov	r3, r2
 801300a:	460a      	mov	r2, r1
 801300c:	4601      	mov	r1, r0
 801300e:	4802      	ldr	r0, [pc, #8]	; (8013018 <strtol+0x10>)
 8013010:	6800      	ldr	r0, [r0, #0]
 8013012:	f7ff bf77 	b.w	8012f04 <_strtol_l.constprop.0>
 8013016:	bf00      	nop
 8013018:	20000234 	.word	0x20000234

0801301c <_vsniprintf_r>:
 801301c:	b530      	push	{r4, r5, lr}
 801301e:	4614      	mov	r4, r2
 8013020:	2c00      	cmp	r4, #0
 8013022:	b09b      	sub	sp, #108	; 0x6c
 8013024:	4605      	mov	r5, r0
 8013026:	461a      	mov	r2, r3
 8013028:	da05      	bge.n	8013036 <_vsniprintf_r+0x1a>
 801302a:	238b      	movs	r3, #139	; 0x8b
 801302c:	6003      	str	r3, [r0, #0]
 801302e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013032:	b01b      	add	sp, #108	; 0x6c
 8013034:	bd30      	pop	{r4, r5, pc}
 8013036:	f44f 7302 	mov.w	r3, #520	; 0x208
 801303a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801303e:	bf14      	ite	ne
 8013040:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8013044:	4623      	moveq	r3, r4
 8013046:	9302      	str	r3, [sp, #8]
 8013048:	9305      	str	r3, [sp, #20]
 801304a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801304e:	9100      	str	r1, [sp, #0]
 8013050:	9104      	str	r1, [sp, #16]
 8013052:	f8ad 300e 	strh.w	r3, [sp, #14]
 8013056:	4669      	mov	r1, sp
 8013058:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801305a:	f002 f839 	bl	80150d0 <_svfiprintf_r>
 801305e:	1c43      	adds	r3, r0, #1
 8013060:	bfbc      	itt	lt
 8013062:	238b      	movlt	r3, #139	; 0x8b
 8013064:	602b      	strlt	r3, [r5, #0]
 8013066:	2c00      	cmp	r4, #0
 8013068:	d0e3      	beq.n	8013032 <_vsniprintf_r+0x16>
 801306a:	9b00      	ldr	r3, [sp, #0]
 801306c:	2200      	movs	r2, #0
 801306e:	701a      	strb	r2, [r3, #0]
 8013070:	e7df      	b.n	8013032 <_vsniprintf_r+0x16>
	...

08013074 <vsniprintf>:
 8013074:	b507      	push	{r0, r1, r2, lr}
 8013076:	9300      	str	r3, [sp, #0]
 8013078:	4613      	mov	r3, r2
 801307a:	460a      	mov	r2, r1
 801307c:	4601      	mov	r1, r0
 801307e:	4803      	ldr	r0, [pc, #12]	; (801308c <vsniprintf+0x18>)
 8013080:	6800      	ldr	r0, [r0, #0]
 8013082:	f7ff ffcb 	bl	801301c <_vsniprintf_r>
 8013086:	b003      	add	sp, #12
 8013088:	f85d fb04 	ldr.w	pc, [sp], #4
 801308c:	20000234 	.word	0x20000234

08013090 <quorem>:
 8013090:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013094:	6903      	ldr	r3, [r0, #16]
 8013096:	690c      	ldr	r4, [r1, #16]
 8013098:	42a3      	cmp	r3, r4
 801309a:	4607      	mov	r7, r0
 801309c:	f2c0 8081 	blt.w	80131a2 <quorem+0x112>
 80130a0:	3c01      	subs	r4, #1
 80130a2:	f101 0814 	add.w	r8, r1, #20
 80130a6:	f100 0514 	add.w	r5, r0, #20
 80130aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80130ae:	9301      	str	r3, [sp, #4]
 80130b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80130b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80130b8:	3301      	adds	r3, #1
 80130ba:	429a      	cmp	r2, r3
 80130bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80130c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80130c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80130c8:	d331      	bcc.n	801312e <quorem+0x9e>
 80130ca:	f04f 0e00 	mov.w	lr, #0
 80130ce:	4640      	mov	r0, r8
 80130d0:	46ac      	mov	ip, r5
 80130d2:	46f2      	mov	sl, lr
 80130d4:	f850 2b04 	ldr.w	r2, [r0], #4
 80130d8:	b293      	uxth	r3, r2
 80130da:	fb06 e303 	mla	r3, r6, r3, lr
 80130de:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80130e2:	b29b      	uxth	r3, r3
 80130e4:	ebaa 0303 	sub.w	r3, sl, r3
 80130e8:	f8dc a000 	ldr.w	sl, [ip]
 80130ec:	0c12      	lsrs	r2, r2, #16
 80130ee:	fa13 f38a 	uxtah	r3, r3, sl
 80130f2:	fb06 e202 	mla	r2, r6, r2, lr
 80130f6:	9300      	str	r3, [sp, #0]
 80130f8:	9b00      	ldr	r3, [sp, #0]
 80130fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80130fe:	b292      	uxth	r2, r2
 8013100:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8013104:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013108:	f8bd 3000 	ldrh.w	r3, [sp]
 801310c:	4581      	cmp	r9, r0
 801310e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013112:	f84c 3b04 	str.w	r3, [ip], #4
 8013116:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801311a:	d2db      	bcs.n	80130d4 <quorem+0x44>
 801311c:	f855 300b 	ldr.w	r3, [r5, fp]
 8013120:	b92b      	cbnz	r3, 801312e <quorem+0x9e>
 8013122:	9b01      	ldr	r3, [sp, #4]
 8013124:	3b04      	subs	r3, #4
 8013126:	429d      	cmp	r5, r3
 8013128:	461a      	mov	r2, r3
 801312a:	d32e      	bcc.n	801318a <quorem+0xfa>
 801312c:	613c      	str	r4, [r7, #16]
 801312e:	4638      	mov	r0, r7
 8013130:	f001 fc86 	bl	8014a40 <__mcmp>
 8013134:	2800      	cmp	r0, #0
 8013136:	db24      	blt.n	8013182 <quorem+0xf2>
 8013138:	3601      	adds	r6, #1
 801313a:	4628      	mov	r0, r5
 801313c:	f04f 0c00 	mov.w	ip, #0
 8013140:	f858 2b04 	ldr.w	r2, [r8], #4
 8013144:	f8d0 e000 	ldr.w	lr, [r0]
 8013148:	b293      	uxth	r3, r2
 801314a:	ebac 0303 	sub.w	r3, ip, r3
 801314e:	0c12      	lsrs	r2, r2, #16
 8013150:	fa13 f38e 	uxtah	r3, r3, lr
 8013154:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013158:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801315c:	b29b      	uxth	r3, r3
 801315e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013162:	45c1      	cmp	r9, r8
 8013164:	f840 3b04 	str.w	r3, [r0], #4
 8013168:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801316c:	d2e8      	bcs.n	8013140 <quorem+0xb0>
 801316e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013172:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013176:	b922      	cbnz	r2, 8013182 <quorem+0xf2>
 8013178:	3b04      	subs	r3, #4
 801317a:	429d      	cmp	r5, r3
 801317c:	461a      	mov	r2, r3
 801317e:	d30a      	bcc.n	8013196 <quorem+0x106>
 8013180:	613c      	str	r4, [r7, #16]
 8013182:	4630      	mov	r0, r6
 8013184:	b003      	add	sp, #12
 8013186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801318a:	6812      	ldr	r2, [r2, #0]
 801318c:	3b04      	subs	r3, #4
 801318e:	2a00      	cmp	r2, #0
 8013190:	d1cc      	bne.n	801312c <quorem+0x9c>
 8013192:	3c01      	subs	r4, #1
 8013194:	e7c7      	b.n	8013126 <quorem+0x96>
 8013196:	6812      	ldr	r2, [r2, #0]
 8013198:	3b04      	subs	r3, #4
 801319a:	2a00      	cmp	r2, #0
 801319c:	d1f0      	bne.n	8013180 <quorem+0xf0>
 801319e:	3c01      	subs	r4, #1
 80131a0:	e7eb      	b.n	801317a <quorem+0xea>
 80131a2:	2000      	movs	r0, #0
 80131a4:	e7ee      	b.n	8013184 <quorem+0xf4>
	...

080131a8 <_dtoa_r>:
 80131a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131ac:	ed2d 8b04 	vpush	{d8-d9}
 80131b0:	ec57 6b10 	vmov	r6, r7, d0
 80131b4:	b093      	sub	sp, #76	; 0x4c
 80131b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80131b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80131bc:	9106      	str	r1, [sp, #24]
 80131be:	ee10 aa10 	vmov	sl, s0
 80131c2:	4604      	mov	r4, r0
 80131c4:	9209      	str	r2, [sp, #36]	; 0x24
 80131c6:	930c      	str	r3, [sp, #48]	; 0x30
 80131c8:	46bb      	mov	fp, r7
 80131ca:	b975      	cbnz	r5, 80131ea <_dtoa_r+0x42>
 80131cc:	2010      	movs	r0, #16
 80131ce:	f001 f951 	bl	8014474 <malloc>
 80131d2:	4602      	mov	r2, r0
 80131d4:	6260      	str	r0, [r4, #36]	; 0x24
 80131d6:	b920      	cbnz	r0, 80131e2 <_dtoa_r+0x3a>
 80131d8:	4ba7      	ldr	r3, [pc, #668]	; (8013478 <_dtoa_r+0x2d0>)
 80131da:	21ea      	movs	r1, #234	; 0xea
 80131dc:	48a7      	ldr	r0, [pc, #668]	; (801347c <_dtoa_r+0x2d4>)
 80131de:	f002 f8f1 	bl	80153c4 <__assert_func>
 80131e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80131e6:	6005      	str	r5, [r0, #0]
 80131e8:	60c5      	str	r5, [r0, #12]
 80131ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80131ec:	6819      	ldr	r1, [r3, #0]
 80131ee:	b151      	cbz	r1, 8013206 <_dtoa_r+0x5e>
 80131f0:	685a      	ldr	r2, [r3, #4]
 80131f2:	604a      	str	r2, [r1, #4]
 80131f4:	2301      	movs	r3, #1
 80131f6:	4093      	lsls	r3, r2
 80131f8:	608b      	str	r3, [r1, #8]
 80131fa:	4620      	mov	r0, r4
 80131fc:	f001 f994 	bl	8014528 <_Bfree>
 8013200:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013202:	2200      	movs	r2, #0
 8013204:	601a      	str	r2, [r3, #0]
 8013206:	1e3b      	subs	r3, r7, #0
 8013208:	bfaa      	itet	ge
 801320a:	2300      	movge	r3, #0
 801320c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8013210:	f8c8 3000 	strge.w	r3, [r8]
 8013214:	4b9a      	ldr	r3, [pc, #616]	; (8013480 <_dtoa_r+0x2d8>)
 8013216:	bfbc      	itt	lt
 8013218:	2201      	movlt	r2, #1
 801321a:	f8c8 2000 	strlt.w	r2, [r8]
 801321e:	ea33 030b 	bics.w	r3, r3, fp
 8013222:	d11b      	bne.n	801325c <_dtoa_r+0xb4>
 8013224:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013226:	f242 730f 	movw	r3, #9999	; 0x270f
 801322a:	6013      	str	r3, [r2, #0]
 801322c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013230:	4333      	orrs	r3, r6
 8013232:	f000 8592 	beq.w	8013d5a <_dtoa_r+0xbb2>
 8013236:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013238:	b963      	cbnz	r3, 8013254 <_dtoa_r+0xac>
 801323a:	4b92      	ldr	r3, [pc, #584]	; (8013484 <_dtoa_r+0x2dc>)
 801323c:	e022      	b.n	8013284 <_dtoa_r+0xdc>
 801323e:	4b92      	ldr	r3, [pc, #584]	; (8013488 <_dtoa_r+0x2e0>)
 8013240:	9301      	str	r3, [sp, #4]
 8013242:	3308      	adds	r3, #8
 8013244:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013246:	6013      	str	r3, [r2, #0]
 8013248:	9801      	ldr	r0, [sp, #4]
 801324a:	b013      	add	sp, #76	; 0x4c
 801324c:	ecbd 8b04 	vpop	{d8-d9}
 8013250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013254:	4b8b      	ldr	r3, [pc, #556]	; (8013484 <_dtoa_r+0x2dc>)
 8013256:	9301      	str	r3, [sp, #4]
 8013258:	3303      	adds	r3, #3
 801325a:	e7f3      	b.n	8013244 <_dtoa_r+0x9c>
 801325c:	2200      	movs	r2, #0
 801325e:	2300      	movs	r3, #0
 8013260:	4650      	mov	r0, sl
 8013262:	4659      	mov	r1, fp
 8013264:	f7ed fc30 	bl	8000ac8 <__aeabi_dcmpeq>
 8013268:	ec4b ab19 	vmov	d9, sl, fp
 801326c:	4680      	mov	r8, r0
 801326e:	b158      	cbz	r0, 8013288 <_dtoa_r+0xe0>
 8013270:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013272:	2301      	movs	r3, #1
 8013274:	6013      	str	r3, [r2, #0]
 8013276:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013278:	2b00      	cmp	r3, #0
 801327a:	f000 856b 	beq.w	8013d54 <_dtoa_r+0xbac>
 801327e:	4883      	ldr	r0, [pc, #524]	; (801348c <_dtoa_r+0x2e4>)
 8013280:	6018      	str	r0, [r3, #0]
 8013282:	1e43      	subs	r3, r0, #1
 8013284:	9301      	str	r3, [sp, #4]
 8013286:	e7df      	b.n	8013248 <_dtoa_r+0xa0>
 8013288:	ec4b ab10 	vmov	d0, sl, fp
 801328c:	aa10      	add	r2, sp, #64	; 0x40
 801328e:	a911      	add	r1, sp, #68	; 0x44
 8013290:	4620      	mov	r0, r4
 8013292:	f001 fcf7 	bl	8014c84 <__d2b>
 8013296:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801329a:	ee08 0a10 	vmov	s16, r0
 801329e:	2d00      	cmp	r5, #0
 80132a0:	f000 8084 	beq.w	80133ac <_dtoa_r+0x204>
 80132a4:	ee19 3a90 	vmov	r3, s19
 80132a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80132ac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80132b0:	4656      	mov	r6, sl
 80132b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80132b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80132ba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80132be:	4b74      	ldr	r3, [pc, #464]	; (8013490 <_dtoa_r+0x2e8>)
 80132c0:	2200      	movs	r2, #0
 80132c2:	4630      	mov	r0, r6
 80132c4:	4639      	mov	r1, r7
 80132c6:	f7ec ffdf 	bl	8000288 <__aeabi_dsub>
 80132ca:	a365      	add	r3, pc, #404	; (adr r3, 8013460 <_dtoa_r+0x2b8>)
 80132cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132d0:	f7ed f992 	bl	80005f8 <__aeabi_dmul>
 80132d4:	a364      	add	r3, pc, #400	; (adr r3, 8013468 <_dtoa_r+0x2c0>)
 80132d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132da:	f7ec ffd7 	bl	800028c <__adddf3>
 80132de:	4606      	mov	r6, r0
 80132e0:	4628      	mov	r0, r5
 80132e2:	460f      	mov	r7, r1
 80132e4:	f7ed f91e 	bl	8000524 <__aeabi_i2d>
 80132e8:	a361      	add	r3, pc, #388	; (adr r3, 8013470 <_dtoa_r+0x2c8>)
 80132ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132ee:	f7ed f983 	bl	80005f8 <__aeabi_dmul>
 80132f2:	4602      	mov	r2, r0
 80132f4:	460b      	mov	r3, r1
 80132f6:	4630      	mov	r0, r6
 80132f8:	4639      	mov	r1, r7
 80132fa:	f7ec ffc7 	bl	800028c <__adddf3>
 80132fe:	4606      	mov	r6, r0
 8013300:	460f      	mov	r7, r1
 8013302:	f7ed fc29 	bl	8000b58 <__aeabi_d2iz>
 8013306:	2200      	movs	r2, #0
 8013308:	9000      	str	r0, [sp, #0]
 801330a:	2300      	movs	r3, #0
 801330c:	4630      	mov	r0, r6
 801330e:	4639      	mov	r1, r7
 8013310:	f7ed fbe4 	bl	8000adc <__aeabi_dcmplt>
 8013314:	b150      	cbz	r0, 801332c <_dtoa_r+0x184>
 8013316:	9800      	ldr	r0, [sp, #0]
 8013318:	f7ed f904 	bl	8000524 <__aeabi_i2d>
 801331c:	4632      	mov	r2, r6
 801331e:	463b      	mov	r3, r7
 8013320:	f7ed fbd2 	bl	8000ac8 <__aeabi_dcmpeq>
 8013324:	b910      	cbnz	r0, 801332c <_dtoa_r+0x184>
 8013326:	9b00      	ldr	r3, [sp, #0]
 8013328:	3b01      	subs	r3, #1
 801332a:	9300      	str	r3, [sp, #0]
 801332c:	9b00      	ldr	r3, [sp, #0]
 801332e:	2b16      	cmp	r3, #22
 8013330:	d85a      	bhi.n	80133e8 <_dtoa_r+0x240>
 8013332:	9a00      	ldr	r2, [sp, #0]
 8013334:	4b57      	ldr	r3, [pc, #348]	; (8013494 <_dtoa_r+0x2ec>)
 8013336:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801333a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801333e:	ec51 0b19 	vmov	r0, r1, d9
 8013342:	f7ed fbcb 	bl	8000adc <__aeabi_dcmplt>
 8013346:	2800      	cmp	r0, #0
 8013348:	d050      	beq.n	80133ec <_dtoa_r+0x244>
 801334a:	9b00      	ldr	r3, [sp, #0]
 801334c:	3b01      	subs	r3, #1
 801334e:	9300      	str	r3, [sp, #0]
 8013350:	2300      	movs	r3, #0
 8013352:	930b      	str	r3, [sp, #44]	; 0x2c
 8013354:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013356:	1b5d      	subs	r5, r3, r5
 8013358:	1e6b      	subs	r3, r5, #1
 801335a:	9305      	str	r3, [sp, #20]
 801335c:	bf45      	ittet	mi
 801335e:	f1c5 0301 	rsbmi	r3, r5, #1
 8013362:	9304      	strmi	r3, [sp, #16]
 8013364:	2300      	movpl	r3, #0
 8013366:	2300      	movmi	r3, #0
 8013368:	bf4c      	ite	mi
 801336a:	9305      	strmi	r3, [sp, #20]
 801336c:	9304      	strpl	r3, [sp, #16]
 801336e:	9b00      	ldr	r3, [sp, #0]
 8013370:	2b00      	cmp	r3, #0
 8013372:	db3d      	blt.n	80133f0 <_dtoa_r+0x248>
 8013374:	9b05      	ldr	r3, [sp, #20]
 8013376:	9a00      	ldr	r2, [sp, #0]
 8013378:	920a      	str	r2, [sp, #40]	; 0x28
 801337a:	4413      	add	r3, r2
 801337c:	9305      	str	r3, [sp, #20]
 801337e:	2300      	movs	r3, #0
 8013380:	9307      	str	r3, [sp, #28]
 8013382:	9b06      	ldr	r3, [sp, #24]
 8013384:	2b09      	cmp	r3, #9
 8013386:	f200 8089 	bhi.w	801349c <_dtoa_r+0x2f4>
 801338a:	2b05      	cmp	r3, #5
 801338c:	bfc4      	itt	gt
 801338e:	3b04      	subgt	r3, #4
 8013390:	9306      	strgt	r3, [sp, #24]
 8013392:	9b06      	ldr	r3, [sp, #24]
 8013394:	f1a3 0302 	sub.w	r3, r3, #2
 8013398:	bfcc      	ite	gt
 801339a:	2500      	movgt	r5, #0
 801339c:	2501      	movle	r5, #1
 801339e:	2b03      	cmp	r3, #3
 80133a0:	f200 8087 	bhi.w	80134b2 <_dtoa_r+0x30a>
 80133a4:	e8df f003 	tbb	[pc, r3]
 80133a8:	59383a2d 	.word	0x59383a2d
 80133ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80133b0:	441d      	add	r5, r3
 80133b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80133b6:	2b20      	cmp	r3, #32
 80133b8:	bfc1      	itttt	gt
 80133ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80133be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80133c2:	fa0b f303 	lslgt.w	r3, fp, r3
 80133c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80133ca:	bfda      	itte	le
 80133cc:	f1c3 0320 	rsble	r3, r3, #32
 80133d0:	fa06 f003 	lslle.w	r0, r6, r3
 80133d4:	4318      	orrgt	r0, r3
 80133d6:	f7ed f895 	bl	8000504 <__aeabi_ui2d>
 80133da:	2301      	movs	r3, #1
 80133dc:	4606      	mov	r6, r0
 80133de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80133e2:	3d01      	subs	r5, #1
 80133e4:	930e      	str	r3, [sp, #56]	; 0x38
 80133e6:	e76a      	b.n	80132be <_dtoa_r+0x116>
 80133e8:	2301      	movs	r3, #1
 80133ea:	e7b2      	b.n	8013352 <_dtoa_r+0x1aa>
 80133ec:	900b      	str	r0, [sp, #44]	; 0x2c
 80133ee:	e7b1      	b.n	8013354 <_dtoa_r+0x1ac>
 80133f0:	9b04      	ldr	r3, [sp, #16]
 80133f2:	9a00      	ldr	r2, [sp, #0]
 80133f4:	1a9b      	subs	r3, r3, r2
 80133f6:	9304      	str	r3, [sp, #16]
 80133f8:	4253      	negs	r3, r2
 80133fa:	9307      	str	r3, [sp, #28]
 80133fc:	2300      	movs	r3, #0
 80133fe:	930a      	str	r3, [sp, #40]	; 0x28
 8013400:	e7bf      	b.n	8013382 <_dtoa_r+0x1da>
 8013402:	2300      	movs	r3, #0
 8013404:	9308      	str	r3, [sp, #32]
 8013406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013408:	2b00      	cmp	r3, #0
 801340a:	dc55      	bgt.n	80134b8 <_dtoa_r+0x310>
 801340c:	2301      	movs	r3, #1
 801340e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8013412:	461a      	mov	r2, r3
 8013414:	9209      	str	r2, [sp, #36]	; 0x24
 8013416:	e00c      	b.n	8013432 <_dtoa_r+0x28a>
 8013418:	2301      	movs	r3, #1
 801341a:	e7f3      	b.n	8013404 <_dtoa_r+0x25c>
 801341c:	2300      	movs	r3, #0
 801341e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013420:	9308      	str	r3, [sp, #32]
 8013422:	9b00      	ldr	r3, [sp, #0]
 8013424:	4413      	add	r3, r2
 8013426:	9302      	str	r3, [sp, #8]
 8013428:	3301      	adds	r3, #1
 801342a:	2b01      	cmp	r3, #1
 801342c:	9303      	str	r3, [sp, #12]
 801342e:	bfb8      	it	lt
 8013430:	2301      	movlt	r3, #1
 8013432:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8013434:	2200      	movs	r2, #0
 8013436:	6042      	str	r2, [r0, #4]
 8013438:	2204      	movs	r2, #4
 801343a:	f102 0614 	add.w	r6, r2, #20
 801343e:	429e      	cmp	r6, r3
 8013440:	6841      	ldr	r1, [r0, #4]
 8013442:	d93d      	bls.n	80134c0 <_dtoa_r+0x318>
 8013444:	4620      	mov	r0, r4
 8013446:	f001 f82f 	bl	80144a8 <_Balloc>
 801344a:	9001      	str	r0, [sp, #4]
 801344c:	2800      	cmp	r0, #0
 801344e:	d13b      	bne.n	80134c8 <_dtoa_r+0x320>
 8013450:	4b11      	ldr	r3, [pc, #68]	; (8013498 <_dtoa_r+0x2f0>)
 8013452:	4602      	mov	r2, r0
 8013454:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013458:	e6c0      	b.n	80131dc <_dtoa_r+0x34>
 801345a:	2301      	movs	r3, #1
 801345c:	e7df      	b.n	801341e <_dtoa_r+0x276>
 801345e:	bf00      	nop
 8013460:	636f4361 	.word	0x636f4361
 8013464:	3fd287a7 	.word	0x3fd287a7
 8013468:	8b60c8b3 	.word	0x8b60c8b3
 801346c:	3fc68a28 	.word	0x3fc68a28
 8013470:	509f79fb 	.word	0x509f79fb
 8013474:	3fd34413 	.word	0x3fd34413
 8013478:	0801787d 	.word	0x0801787d
 801347c:	08017894 	.word	0x08017894
 8013480:	7ff00000 	.word	0x7ff00000
 8013484:	08017879 	.word	0x08017879
 8013488:	08017870 	.word	0x08017870
 801348c:	080177f9 	.word	0x080177f9
 8013490:	3ff80000 	.word	0x3ff80000
 8013494:	08017a00 	.word	0x08017a00
 8013498:	080178ef 	.word	0x080178ef
 801349c:	2501      	movs	r5, #1
 801349e:	2300      	movs	r3, #0
 80134a0:	9306      	str	r3, [sp, #24]
 80134a2:	9508      	str	r5, [sp, #32]
 80134a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80134a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80134ac:	2200      	movs	r2, #0
 80134ae:	2312      	movs	r3, #18
 80134b0:	e7b0      	b.n	8013414 <_dtoa_r+0x26c>
 80134b2:	2301      	movs	r3, #1
 80134b4:	9308      	str	r3, [sp, #32]
 80134b6:	e7f5      	b.n	80134a4 <_dtoa_r+0x2fc>
 80134b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80134ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80134be:	e7b8      	b.n	8013432 <_dtoa_r+0x28a>
 80134c0:	3101      	adds	r1, #1
 80134c2:	6041      	str	r1, [r0, #4]
 80134c4:	0052      	lsls	r2, r2, #1
 80134c6:	e7b8      	b.n	801343a <_dtoa_r+0x292>
 80134c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80134ca:	9a01      	ldr	r2, [sp, #4]
 80134cc:	601a      	str	r2, [r3, #0]
 80134ce:	9b03      	ldr	r3, [sp, #12]
 80134d0:	2b0e      	cmp	r3, #14
 80134d2:	f200 809d 	bhi.w	8013610 <_dtoa_r+0x468>
 80134d6:	2d00      	cmp	r5, #0
 80134d8:	f000 809a 	beq.w	8013610 <_dtoa_r+0x468>
 80134dc:	9b00      	ldr	r3, [sp, #0]
 80134de:	2b00      	cmp	r3, #0
 80134e0:	dd32      	ble.n	8013548 <_dtoa_r+0x3a0>
 80134e2:	4ab7      	ldr	r2, [pc, #732]	; (80137c0 <_dtoa_r+0x618>)
 80134e4:	f003 030f 	and.w	r3, r3, #15
 80134e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80134ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80134f0:	9b00      	ldr	r3, [sp, #0]
 80134f2:	05d8      	lsls	r0, r3, #23
 80134f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80134f8:	d516      	bpl.n	8013528 <_dtoa_r+0x380>
 80134fa:	4bb2      	ldr	r3, [pc, #712]	; (80137c4 <_dtoa_r+0x61c>)
 80134fc:	ec51 0b19 	vmov	r0, r1, d9
 8013500:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013504:	f7ed f9a2 	bl	800084c <__aeabi_ddiv>
 8013508:	f007 070f 	and.w	r7, r7, #15
 801350c:	4682      	mov	sl, r0
 801350e:	468b      	mov	fp, r1
 8013510:	2503      	movs	r5, #3
 8013512:	4eac      	ldr	r6, [pc, #688]	; (80137c4 <_dtoa_r+0x61c>)
 8013514:	b957      	cbnz	r7, 801352c <_dtoa_r+0x384>
 8013516:	4642      	mov	r2, r8
 8013518:	464b      	mov	r3, r9
 801351a:	4650      	mov	r0, sl
 801351c:	4659      	mov	r1, fp
 801351e:	f7ed f995 	bl	800084c <__aeabi_ddiv>
 8013522:	4682      	mov	sl, r0
 8013524:	468b      	mov	fp, r1
 8013526:	e028      	b.n	801357a <_dtoa_r+0x3d2>
 8013528:	2502      	movs	r5, #2
 801352a:	e7f2      	b.n	8013512 <_dtoa_r+0x36a>
 801352c:	07f9      	lsls	r1, r7, #31
 801352e:	d508      	bpl.n	8013542 <_dtoa_r+0x39a>
 8013530:	4640      	mov	r0, r8
 8013532:	4649      	mov	r1, r9
 8013534:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013538:	f7ed f85e 	bl	80005f8 <__aeabi_dmul>
 801353c:	3501      	adds	r5, #1
 801353e:	4680      	mov	r8, r0
 8013540:	4689      	mov	r9, r1
 8013542:	107f      	asrs	r7, r7, #1
 8013544:	3608      	adds	r6, #8
 8013546:	e7e5      	b.n	8013514 <_dtoa_r+0x36c>
 8013548:	f000 809b 	beq.w	8013682 <_dtoa_r+0x4da>
 801354c:	9b00      	ldr	r3, [sp, #0]
 801354e:	4f9d      	ldr	r7, [pc, #628]	; (80137c4 <_dtoa_r+0x61c>)
 8013550:	425e      	negs	r6, r3
 8013552:	4b9b      	ldr	r3, [pc, #620]	; (80137c0 <_dtoa_r+0x618>)
 8013554:	f006 020f 	and.w	r2, r6, #15
 8013558:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801355c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013560:	ec51 0b19 	vmov	r0, r1, d9
 8013564:	f7ed f848 	bl	80005f8 <__aeabi_dmul>
 8013568:	1136      	asrs	r6, r6, #4
 801356a:	4682      	mov	sl, r0
 801356c:	468b      	mov	fp, r1
 801356e:	2300      	movs	r3, #0
 8013570:	2502      	movs	r5, #2
 8013572:	2e00      	cmp	r6, #0
 8013574:	d17a      	bne.n	801366c <_dtoa_r+0x4c4>
 8013576:	2b00      	cmp	r3, #0
 8013578:	d1d3      	bne.n	8013522 <_dtoa_r+0x37a>
 801357a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801357c:	2b00      	cmp	r3, #0
 801357e:	f000 8082 	beq.w	8013686 <_dtoa_r+0x4de>
 8013582:	4b91      	ldr	r3, [pc, #580]	; (80137c8 <_dtoa_r+0x620>)
 8013584:	2200      	movs	r2, #0
 8013586:	4650      	mov	r0, sl
 8013588:	4659      	mov	r1, fp
 801358a:	f7ed faa7 	bl	8000adc <__aeabi_dcmplt>
 801358e:	2800      	cmp	r0, #0
 8013590:	d079      	beq.n	8013686 <_dtoa_r+0x4de>
 8013592:	9b03      	ldr	r3, [sp, #12]
 8013594:	2b00      	cmp	r3, #0
 8013596:	d076      	beq.n	8013686 <_dtoa_r+0x4de>
 8013598:	9b02      	ldr	r3, [sp, #8]
 801359a:	2b00      	cmp	r3, #0
 801359c:	dd36      	ble.n	801360c <_dtoa_r+0x464>
 801359e:	9b00      	ldr	r3, [sp, #0]
 80135a0:	4650      	mov	r0, sl
 80135a2:	4659      	mov	r1, fp
 80135a4:	1e5f      	subs	r7, r3, #1
 80135a6:	2200      	movs	r2, #0
 80135a8:	4b88      	ldr	r3, [pc, #544]	; (80137cc <_dtoa_r+0x624>)
 80135aa:	f7ed f825 	bl	80005f8 <__aeabi_dmul>
 80135ae:	9e02      	ldr	r6, [sp, #8]
 80135b0:	4682      	mov	sl, r0
 80135b2:	468b      	mov	fp, r1
 80135b4:	3501      	adds	r5, #1
 80135b6:	4628      	mov	r0, r5
 80135b8:	f7ec ffb4 	bl	8000524 <__aeabi_i2d>
 80135bc:	4652      	mov	r2, sl
 80135be:	465b      	mov	r3, fp
 80135c0:	f7ed f81a 	bl	80005f8 <__aeabi_dmul>
 80135c4:	4b82      	ldr	r3, [pc, #520]	; (80137d0 <_dtoa_r+0x628>)
 80135c6:	2200      	movs	r2, #0
 80135c8:	f7ec fe60 	bl	800028c <__adddf3>
 80135cc:	46d0      	mov	r8, sl
 80135ce:	46d9      	mov	r9, fp
 80135d0:	4682      	mov	sl, r0
 80135d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80135d6:	2e00      	cmp	r6, #0
 80135d8:	d158      	bne.n	801368c <_dtoa_r+0x4e4>
 80135da:	4b7e      	ldr	r3, [pc, #504]	; (80137d4 <_dtoa_r+0x62c>)
 80135dc:	2200      	movs	r2, #0
 80135de:	4640      	mov	r0, r8
 80135e0:	4649      	mov	r1, r9
 80135e2:	f7ec fe51 	bl	8000288 <__aeabi_dsub>
 80135e6:	4652      	mov	r2, sl
 80135e8:	465b      	mov	r3, fp
 80135ea:	4680      	mov	r8, r0
 80135ec:	4689      	mov	r9, r1
 80135ee:	f7ed fa93 	bl	8000b18 <__aeabi_dcmpgt>
 80135f2:	2800      	cmp	r0, #0
 80135f4:	f040 8295 	bne.w	8013b22 <_dtoa_r+0x97a>
 80135f8:	4652      	mov	r2, sl
 80135fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80135fe:	4640      	mov	r0, r8
 8013600:	4649      	mov	r1, r9
 8013602:	f7ed fa6b 	bl	8000adc <__aeabi_dcmplt>
 8013606:	2800      	cmp	r0, #0
 8013608:	f040 8289 	bne.w	8013b1e <_dtoa_r+0x976>
 801360c:	ec5b ab19 	vmov	sl, fp, d9
 8013610:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013612:	2b00      	cmp	r3, #0
 8013614:	f2c0 8148 	blt.w	80138a8 <_dtoa_r+0x700>
 8013618:	9a00      	ldr	r2, [sp, #0]
 801361a:	2a0e      	cmp	r2, #14
 801361c:	f300 8144 	bgt.w	80138a8 <_dtoa_r+0x700>
 8013620:	4b67      	ldr	r3, [pc, #412]	; (80137c0 <_dtoa_r+0x618>)
 8013622:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013626:	e9d3 8900 	ldrd	r8, r9, [r3]
 801362a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801362c:	2b00      	cmp	r3, #0
 801362e:	f280 80d5 	bge.w	80137dc <_dtoa_r+0x634>
 8013632:	9b03      	ldr	r3, [sp, #12]
 8013634:	2b00      	cmp	r3, #0
 8013636:	f300 80d1 	bgt.w	80137dc <_dtoa_r+0x634>
 801363a:	f040 826f 	bne.w	8013b1c <_dtoa_r+0x974>
 801363e:	4b65      	ldr	r3, [pc, #404]	; (80137d4 <_dtoa_r+0x62c>)
 8013640:	2200      	movs	r2, #0
 8013642:	4640      	mov	r0, r8
 8013644:	4649      	mov	r1, r9
 8013646:	f7ec ffd7 	bl	80005f8 <__aeabi_dmul>
 801364a:	4652      	mov	r2, sl
 801364c:	465b      	mov	r3, fp
 801364e:	f7ed fa59 	bl	8000b04 <__aeabi_dcmpge>
 8013652:	9e03      	ldr	r6, [sp, #12]
 8013654:	4637      	mov	r7, r6
 8013656:	2800      	cmp	r0, #0
 8013658:	f040 8245 	bne.w	8013ae6 <_dtoa_r+0x93e>
 801365c:	9d01      	ldr	r5, [sp, #4]
 801365e:	2331      	movs	r3, #49	; 0x31
 8013660:	f805 3b01 	strb.w	r3, [r5], #1
 8013664:	9b00      	ldr	r3, [sp, #0]
 8013666:	3301      	adds	r3, #1
 8013668:	9300      	str	r3, [sp, #0]
 801366a:	e240      	b.n	8013aee <_dtoa_r+0x946>
 801366c:	07f2      	lsls	r2, r6, #31
 801366e:	d505      	bpl.n	801367c <_dtoa_r+0x4d4>
 8013670:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013674:	f7ec ffc0 	bl	80005f8 <__aeabi_dmul>
 8013678:	3501      	adds	r5, #1
 801367a:	2301      	movs	r3, #1
 801367c:	1076      	asrs	r6, r6, #1
 801367e:	3708      	adds	r7, #8
 8013680:	e777      	b.n	8013572 <_dtoa_r+0x3ca>
 8013682:	2502      	movs	r5, #2
 8013684:	e779      	b.n	801357a <_dtoa_r+0x3d2>
 8013686:	9f00      	ldr	r7, [sp, #0]
 8013688:	9e03      	ldr	r6, [sp, #12]
 801368a:	e794      	b.n	80135b6 <_dtoa_r+0x40e>
 801368c:	9901      	ldr	r1, [sp, #4]
 801368e:	4b4c      	ldr	r3, [pc, #304]	; (80137c0 <_dtoa_r+0x618>)
 8013690:	4431      	add	r1, r6
 8013692:	910d      	str	r1, [sp, #52]	; 0x34
 8013694:	9908      	ldr	r1, [sp, #32]
 8013696:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801369a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801369e:	2900      	cmp	r1, #0
 80136a0:	d043      	beq.n	801372a <_dtoa_r+0x582>
 80136a2:	494d      	ldr	r1, [pc, #308]	; (80137d8 <_dtoa_r+0x630>)
 80136a4:	2000      	movs	r0, #0
 80136a6:	f7ed f8d1 	bl	800084c <__aeabi_ddiv>
 80136aa:	4652      	mov	r2, sl
 80136ac:	465b      	mov	r3, fp
 80136ae:	f7ec fdeb 	bl	8000288 <__aeabi_dsub>
 80136b2:	9d01      	ldr	r5, [sp, #4]
 80136b4:	4682      	mov	sl, r0
 80136b6:	468b      	mov	fp, r1
 80136b8:	4649      	mov	r1, r9
 80136ba:	4640      	mov	r0, r8
 80136bc:	f7ed fa4c 	bl	8000b58 <__aeabi_d2iz>
 80136c0:	4606      	mov	r6, r0
 80136c2:	f7ec ff2f 	bl	8000524 <__aeabi_i2d>
 80136c6:	4602      	mov	r2, r0
 80136c8:	460b      	mov	r3, r1
 80136ca:	4640      	mov	r0, r8
 80136cc:	4649      	mov	r1, r9
 80136ce:	f7ec fddb 	bl	8000288 <__aeabi_dsub>
 80136d2:	3630      	adds	r6, #48	; 0x30
 80136d4:	f805 6b01 	strb.w	r6, [r5], #1
 80136d8:	4652      	mov	r2, sl
 80136da:	465b      	mov	r3, fp
 80136dc:	4680      	mov	r8, r0
 80136de:	4689      	mov	r9, r1
 80136e0:	f7ed f9fc 	bl	8000adc <__aeabi_dcmplt>
 80136e4:	2800      	cmp	r0, #0
 80136e6:	d163      	bne.n	80137b0 <_dtoa_r+0x608>
 80136e8:	4642      	mov	r2, r8
 80136ea:	464b      	mov	r3, r9
 80136ec:	4936      	ldr	r1, [pc, #216]	; (80137c8 <_dtoa_r+0x620>)
 80136ee:	2000      	movs	r0, #0
 80136f0:	f7ec fdca 	bl	8000288 <__aeabi_dsub>
 80136f4:	4652      	mov	r2, sl
 80136f6:	465b      	mov	r3, fp
 80136f8:	f7ed f9f0 	bl	8000adc <__aeabi_dcmplt>
 80136fc:	2800      	cmp	r0, #0
 80136fe:	f040 80b5 	bne.w	801386c <_dtoa_r+0x6c4>
 8013702:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013704:	429d      	cmp	r5, r3
 8013706:	d081      	beq.n	801360c <_dtoa_r+0x464>
 8013708:	4b30      	ldr	r3, [pc, #192]	; (80137cc <_dtoa_r+0x624>)
 801370a:	2200      	movs	r2, #0
 801370c:	4650      	mov	r0, sl
 801370e:	4659      	mov	r1, fp
 8013710:	f7ec ff72 	bl	80005f8 <__aeabi_dmul>
 8013714:	4b2d      	ldr	r3, [pc, #180]	; (80137cc <_dtoa_r+0x624>)
 8013716:	4682      	mov	sl, r0
 8013718:	468b      	mov	fp, r1
 801371a:	4640      	mov	r0, r8
 801371c:	4649      	mov	r1, r9
 801371e:	2200      	movs	r2, #0
 8013720:	f7ec ff6a 	bl	80005f8 <__aeabi_dmul>
 8013724:	4680      	mov	r8, r0
 8013726:	4689      	mov	r9, r1
 8013728:	e7c6      	b.n	80136b8 <_dtoa_r+0x510>
 801372a:	4650      	mov	r0, sl
 801372c:	4659      	mov	r1, fp
 801372e:	f7ec ff63 	bl	80005f8 <__aeabi_dmul>
 8013732:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013734:	9d01      	ldr	r5, [sp, #4]
 8013736:	930f      	str	r3, [sp, #60]	; 0x3c
 8013738:	4682      	mov	sl, r0
 801373a:	468b      	mov	fp, r1
 801373c:	4649      	mov	r1, r9
 801373e:	4640      	mov	r0, r8
 8013740:	f7ed fa0a 	bl	8000b58 <__aeabi_d2iz>
 8013744:	4606      	mov	r6, r0
 8013746:	f7ec feed 	bl	8000524 <__aeabi_i2d>
 801374a:	3630      	adds	r6, #48	; 0x30
 801374c:	4602      	mov	r2, r0
 801374e:	460b      	mov	r3, r1
 8013750:	4640      	mov	r0, r8
 8013752:	4649      	mov	r1, r9
 8013754:	f7ec fd98 	bl	8000288 <__aeabi_dsub>
 8013758:	f805 6b01 	strb.w	r6, [r5], #1
 801375c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801375e:	429d      	cmp	r5, r3
 8013760:	4680      	mov	r8, r0
 8013762:	4689      	mov	r9, r1
 8013764:	f04f 0200 	mov.w	r2, #0
 8013768:	d124      	bne.n	80137b4 <_dtoa_r+0x60c>
 801376a:	4b1b      	ldr	r3, [pc, #108]	; (80137d8 <_dtoa_r+0x630>)
 801376c:	4650      	mov	r0, sl
 801376e:	4659      	mov	r1, fp
 8013770:	f7ec fd8c 	bl	800028c <__adddf3>
 8013774:	4602      	mov	r2, r0
 8013776:	460b      	mov	r3, r1
 8013778:	4640      	mov	r0, r8
 801377a:	4649      	mov	r1, r9
 801377c:	f7ed f9cc 	bl	8000b18 <__aeabi_dcmpgt>
 8013780:	2800      	cmp	r0, #0
 8013782:	d173      	bne.n	801386c <_dtoa_r+0x6c4>
 8013784:	4652      	mov	r2, sl
 8013786:	465b      	mov	r3, fp
 8013788:	4913      	ldr	r1, [pc, #76]	; (80137d8 <_dtoa_r+0x630>)
 801378a:	2000      	movs	r0, #0
 801378c:	f7ec fd7c 	bl	8000288 <__aeabi_dsub>
 8013790:	4602      	mov	r2, r0
 8013792:	460b      	mov	r3, r1
 8013794:	4640      	mov	r0, r8
 8013796:	4649      	mov	r1, r9
 8013798:	f7ed f9a0 	bl	8000adc <__aeabi_dcmplt>
 801379c:	2800      	cmp	r0, #0
 801379e:	f43f af35 	beq.w	801360c <_dtoa_r+0x464>
 80137a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80137a4:	1e6b      	subs	r3, r5, #1
 80137a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80137a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80137ac:	2b30      	cmp	r3, #48	; 0x30
 80137ae:	d0f8      	beq.n	80137a2 <_dtoa_r+0x5fa>
 80137b0:	9700      	str	r7, [sp, #0]
 80137b2:	e049      	b.n	8013848 <_dtoa_r+0x6a0>
 80137b4:	4b05      	ldr	r3, [pc, #20]	; (80137cc <_dtoa_r+0x624>)
 80137b6:	f7ec ff1f 	bl	80005f8 <__aeabi_dmul>
 80137ba:	4680      	mov	r8, r0
 80137bc:	4689      	mov	r9, r1
 80137be:	e7bd      	b.n	801373c <_dtoa_r+0x594>
 80137c0:	08017a00 	.word	0x08017a00
 80137c4:	080179d8 	.word	0x080179d8
 80137c8:	3ff00000 	.word	0x3ff00000
 80137cc:	40240000 	.word	0x40240000
 80137d0:	401c0000 	.word	0x401c0000
 80137d4:	40140000 	.word	0x40140000
 80137d8:	3fe00000 	.word	0x3fe00000
 80137dc:	9d01      	ldr	r5, [sp, #4]
 80137de:	4656      	mov	r6, sl
 80137e0:	465f      	mov	r7, fp
 80137e2:	4642      	mov	r2, r8
 80137e4:	464b      	mov	r3, r9
 80137e6:	4630      	mov	r0, r6
 80137e8:	4639      	mov	r1, r7
 80137ea:	f7ed f82f 	bl	800084c <__aeabi_ddiv>
 80137ee:	f7ed f9b3 	bl	8000b58 <__aeabi_d2iz>
 80137f2:	4682      	mov	sl, r0
 80137f4:	f7ec fe96 	bl	8000524 <__aeabi_i2d>
 80137f8:	4642      	mov	r2, r8
 80137fa:	464b      	mov	r3, r9
 80137fc:	f7ec fefc 	bl	80005f8 <__aeabi_dmul>
 8013800:	4602      	mov	r2, r0
 8013802:	460b      	mov	r3, r1
 8013804:	4630      	mov	r0, r6
 8013806:	4639      	mov	r1, r7
 8013808:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801380c:	f7ec fd3c 	bl	8000288 <__aeabi_dsub>
 8013810:	f805 6b01 	strb.w	r6, [r5], #1
 8013814:	9e01      	ldr	r6, [sp, #4]
 8013816:	9f03      	ldr	r7, [sp, #12]
 8013818:	1bae      	subs	r6, r5, r6
 801381a:	42b7      	cmp	r7, r6
 801381c:	4602      	mov	r2, r0
 801381e:	460b      	mov	r3, r1
 8013820:	d135      	bne.n	801388e <_dtoa_r+0x6e6>
 8013822:	f7ec fd33 	bl	800028c <__adddf3>
 8013826:	4642      	mov	r2, r8
 8013828:	464b      	mov	r3, r9
 801382a:	4606      	mov	r6, r0
 801382c:	460f      	mov	r7, r1
 801382e:	f7ed f973 	bl	8000b18 <__aeabi_dcmpgt>
 8013832:	b9d0      	cbnz	r0, 801386a <_dtoa_r+0x6c2>
 8013834:	4642      	mov	r2, r8
 8013836:	464b      	mov	r3, r9
 8013838:	4630      	mov	r0, r6
 801383a:	4639      	mov	r1, r7
 801383c:	f7ed f944 	bl	8000ac8 <__aeabi_dcmpeq>
 8013840:	b110      	cbz	r0, 8013848 <_dtoa_r+0x6a0>
 8013842:	f01a 0f01 	tst.w	sl, #1
 8013846:	d110      	bne.n	801386a <_dtoa_r+0x6c2>
 8013848:	4620      	mov	r0, r4
 801384a:	ee18 1a10 	vmov	r1, s16
 801384e:	f000 fe6b 	bl	8014528 <_Bfree>
 8013852:	2300      	movs	r3, #0
 8013854:	9800      	ldr	r0, [sp, #0]
 8013856:	702b      	strb	r3, [r5, #0]
 8013858:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801385a:	3001      	adds	r0, #1
 801385c:	6018      	str	r0, [r3, #0]
 801385e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013860:	2b00      	cmp	r3, #0
 8013862:	f43f acf1 	beq.w	8013248 <_dtoa_r+0xa0>
 8013866:	601d      	str	r5, [r3, #0]
 8013868:	e4ee      	b.n	8013248 <_dtoa_r+0xa0>
 801386a:	9f00      	ldr	r7, [sp, #0]
 801386c:	462b      	mov	r3, r5
 801386e:	461d      	mov	r5, r3
 8013870:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013874:	2a39      	cmp	r2, #57	; 0x39
 8013876:	d106      	bne.n	8013886 <_dtoa_r+0x6de>
 8013878:	9a01      	ldr	r2, [sp, #4]
 801387a:	429a      	cmp	r2, r3
 801387c:	d1f7      	bne.n	801386e <_dtoa_r+0x6c6>
 801387e:	9901      	ldr	r1, [sp, #4]
 8013880:	2230      	movs	r2, #48	; 0x30
 8013882:	3701      	adds	r7, #1
 8013884:	700a      	strb	r2, [r1, #0]
 8013886:	781a      	ldrb	r2, [r3, #0]
 8013888:	3201      	adds	r2, #1
 801388a:	701a      	strb	r2, [r3, #0]
 801388c:	e790      	b.n	80137b0 <_dtoa_r+0x608>
 801388e:	4ba6      	ldr	r3, [pc, #664]	; (8013b28 <_dtoa_r+0x980>)
 8013890:	2200      	movs	r2, #0
 8013892:	f7ec feb1 	bl	80005f8 <__aeabi_dmul>
 8013896:	2200      	movs	r2, #0
 8013898:	2300      	movs	r3, #0
 801389a:	4606      	mov	r6, r0
 801389c:	460f      	mov	r7, r1
 801389e:	f7ed f913 	bl	8000ac8 <__aeabi_dcmpeq>
 80138a2:	2800      	cmp	r0, #0
 80138a4:	d09d      	beq.n	80137e2 <_dtoa_r+0x63a>
 80138a6:	e7cf      	b.n	8013848 <_dtoa_r+0x6a0>
 80138a8:	9a08      	ldr	r2, [sp, #32]
 80138aa:	2a00      	cmp	r2, #0
 80138ac:	f000 80d7 	beq.w	8013a5e <_dtoa_r+0x8b6>
 80138b0:	9a06      	ldr	r2, [sp, #24]
 80138b2:	2a01      	cmp	r2, #1
 80138b4:	f300 80ba 	bgt.w	8013a2c <_dtoa_r+0x884>
 80138b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80138ba:	2a00      	cmp	r2, #0
 80138bc:	f000 80b2 	beq.w	8013a24 <_dtoa_r+0x87c>
 80138c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80138c4:	9e07      	ldr	r6, [sp, #28]
 80138c6:	9d04      	ldr	r5, [sp, #16]
 80138c8:	9a04      	ldr	r2, [sp, #16]
 80138ca:	441a      	add	r2, r3
 80138cc:	9204      	str	r2, [sp, #16]
 80138ce:	9a05      	ldr	r2, [sp, #20]
 80138d0:	2101      	movs	r1, #1
 80138d2:	441a      	add	r2, r3
 80138d4:	4620      	mov	r0, r4
 80138d6:	9205      	str	r2, [sp, #20]
 80138d8:	f000 ff28 	bl	801472c <__i2b>
 80138dc:	4607      	mov	r7, r0
 80138de:	2d00      	cmp	r5, #0
 80138e0:	dd0c      	ble.n	80138fc <_dtoa_r+0x754>
 80138e2:	9b05      	ldr	r3, [sp, #20]
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	dd09      	ble.n	80138fc <_dtoa_r+0x754>
 80138e8:	42ab      	cmp	r3, r5
 80138ea:	9a04      	ldr	r2, [sp, #16]
 80138ec:	bfa8      	it	ge
 80138ee:	462b      	movge	r3, r5
 80138f0:	1ad2      	subs	r2, r2, r3
 80138f2:	9204      	str	r2, [sp, #16]
 80138f4:	9a05      	ldr	r2, [sp, #20]
 80138f6:	1aed      	subs	r5, r5, r3
 80138f8:	1ad3      	subs	r3, r2, r3
 80138fa:	9305      	str	r3, [sp, #20]
 80138fc:	9b07      	ldr	r3, [sp, #28]
 80138fe:	b31b      	cbz	r3, 8013948 <_dtoa_r+0x7a0>
 8013900:	9b08      	ldr	r3, [sp, #32]
 8013902:	2b00      	cmp	r3, #0
 8013904:	f000 80af 	beq.w	8013a66 <_dtoa_r+0x8be>
 8013908:	2e00      	cmp	r6, #0
 801390a:	dd13      	ble.n	8013934 <_dtoa_r+0x78c>
 801390c:	4639      	mov	r1, r7
 801390e:	4632      	mov	r2, r6
 8013910:	4620      	mov	r0, r4
 8013912:	f000 ffcb 	bl	80148ac <__pow5mult>
 8013916:	ee18 2a10 	vmov	r2, s16
 801391a:	4601      	mov	r1, r0
 801391c:	4607      	mov	r7, r0
 801391e:	4620      	mov	r0, r4
 8013920:	f000 ff1a 	bl	8014758 <__multiply>
 8013924:	ee18 1a10 	vmov	r1, s16
 8013928:	4680      	mov	r8, r0
 801392a:	4620      	mov	r0, r4
 801392c:	f000 fdfc 	bl	8014528 <_Bfree>
 8013930:	ee08 8a10 	vmov	s16, r8
 8013934:	9b07      	ldr	r3, [sp, #28]
 8013936:	1b9a      	subs	r2, r3, r6
 8013938:	d006      	beq.n	8013948 <_dtoa_r+0x7a0>
 801393a:	ee18 1a10 	vmov	r1, s16
 801393e:	4620      	mov	r0, r4
 8013940:	f000 ffb4 	bl	80148ac <__pow5mult>
 8013944:	ee08 0a10 	vmov	s16, r0
 8013948:	2101      	movs	r1, #1
 801394a:	4620      	mov	r0, r4
 801394c:	f000 feee 	bl	801472c <__i2b>
 8013950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013952:	2b00      	cmp	r3, #0
 8013954:	4606      	mov	r6, r0
 8013956:	f340 8088 	ble.w	8013a6a <_dtoa_r+0x8c2>
 801395a:	461a      	mov	r2, r3
 801395c:	4601      	mov	r1, r0
 801395e:	4620      	mov	r0, r4
 8013960:	f000 ffa4 	bl	80148ac <__pow5mult>
 8013964:	9b06      	ldr	r3, [sp, #24]
 8013966:	2b01      	cmp	r3, #1
 8013968:	4606      	mov	r6, r0
 801396a:	f340 8081 	ble.w	8013a70 <_dtoa_r+0x8c8>
 801396e:	f04f 0800 	mov.w	r8, #0
 8013972:	6933      	ldr	r3, [r6, #16]
 8013974:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013978:	6918      	ldr	r0, [r3, #16]
 801397a:	f000 fe87 	bl	801468c <__hi0bits>
 801397e:	f1c0 0020 	rsb	r0, r0, #32
 8013982:	9b05      	ldr	r3, [sp, #20]
 8013984:	4418      	add	r0, r3
 8013986:	f010 001f 	ands.w	r0, r0, #31
 801398a:	f000 8092 	beq.w	8013ab2 <_dtoa_r+0x90a>
 801398e:	f1c0 0320 	rsb	r3, r0, #32
 8013992:	2b04      	cmp	r3, #4
 8013994:	f340 808a 	ble.w	8013aac <_dtoa_r+0x904>
 8013998:	f1c0 001c 	rsb	r0, r0, #28
 801399c:	9b04      	ldr	r3, [sp, #16]
 801399e:	4403      	add	r3, r0
 80139a0:	9304      	str	r3, [sp, #16]
 80139a2:	9b05      	ldr	r3, [sp, #20]
 80139a4:	4403      	add	r3, r0
 80139a6:	4405      	add	r5, r0
 80139a8:	9305      	str	r3, [sp, #20]
 80139aa:	9b04      	ldr	r3, [sp, #16]
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	dd07      	ble.n	80139c0 <_dtoa_r+0x818>
 80139b0:	ee18 1a10 	vmov	r1, s16
 80139b4:	461a      	mov	r2, r3
 80139b6:	4620      	mov	r0, r4
 80139b8:	f000 ffd2 	bl	8014960 <__lshift>
 80139bc:	ee08 0a10 	vmov	s16, r0
 80139c0:	9b05      	ldr	r3, [sp, #20]
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	dd05      	ble.n	80139d2 <_dtoa_r+0x82a>
 80139c6:	4631      	mov	r1, r6
 80139c8:	461a      	mov	r2, r3
 80139ca:	4620      	mov	r0, r4
 80139cc:	f000 ffc8 	bl	8014960 <__lshift>
 80139d0:	4606      	mov	r6, r0
 80139d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d06e      	beq.n	8013ab6 <_dtoa_r+0x90e>
 80139d8:	ee18 0a10 	vmov	r0, s16
 80139dc:	4631      	mov	r1, r6
 80139de:	f001 f82f 	bl	8014a40 <__mcmp>
 80139e2:	2800      	cmp	r0, #0
 80139e4:	da67      	bge.n	8013ab6 <_dtoa_r+0x90e>
 80139e6:	9b00      	ldr	r3, [sp, #0]
 80139e8:	3b01      	subs	r3, #1
 80139ea:	ee18 1a10 	vmov	r1, s16
 80139ee:	9300      	str	r3, [sp, #0]
 80139f0:	220a      	movs	r2, #10
 80139f2:	2300      	movs	r3, #0
 80139f4:	4620      	mov	r0, r4
 80139f6:	f000 fdb9 	bl	801456c <__multadd>
 80139fa:	9b08      	ldr	r3, [sp, #32]
 80139fc:	ee08 0a10 	vmov	s16, r0
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	f000 81b1 	beq.w	8013d68 <_dtoa_r+0xbc0>
 8013a06:	2300      	movs	r3, #0
 8013a08:	4639      	mov	r1, r7
 8013a0a:	220a      	movs	r2, #10
 8013a0c:	4620      	mov	r0, r4
 8013a0e:	f000 fdad 	bl	801456c <__multadd>
 8013a12:	9b02      	ldr	r3, [sp, #8]
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	4607      	mov	r7, r0
 8013a18:	f300 808e 	bgt.w	8013b38 <_dtoa_r+0x990>
 8013a1c:	9b06      	ldr	r3, [sp, #24]
 8013a1e:	2b02      	cmp	r3, #2
 8013a20:	dc51      	bgt.n	8013ac6 <_dtoa_r+0x91e>
 8013a22:	e089      	b.n	8013b38 <_dtoa_r+0x990>
 8013a24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013a26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013a2a:	e74b      	b.n	80138c4 <_dtoa_r+0x71c>
 8013a2c:	9b03      	ldr	r3, [sp, #12]
 8013a2e:	1e5e      	subs	r6, r3, #1
 8013a30:	9b07      	ldr	r3, [sp, #28]
 8013a32:	42b3      	cmp	r3, r6
 8013a34:	bfbf      	itttt	lt
 8013a36:	9b07      	ldrlt	r3, [sp, #28]
 8013a38:	9607      	strlt	r6, [sp, #28]
 8013a3a:	1af2      	sublt	r2, r6, r3
 8013a3c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8013a3e:	bfb6      	itet	lt
 8013a40:	189b      	addlt	r3, r3, r2
 8013a42:	1b9e      	subge	r6, r3, r6
 8013a44:	930a      	strlt	r3, [sp, #40]	; 0x28
 8013a46:	9b03      	ldr	r3, [sp, #12]
 8013a48:	bfb8      	it	lt
 8013a4a:	2600      	movlt	r6, #0
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	bfb7      	itett	lt
 8013a50:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8013a54:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8013a58:	1a9d      	sublt	r5, r3, r2
 8013a5a:	2300      	movlt	r3, #0
 8013a5c:	e734      	b.n	80138c8 <_dtoa_r+0x720>
 8013a5e:	9e07      	ldr	r6, [sp, #28]
 8013a60:	9d04      	ldr	r5, [sp, #16]
 8013a62:	9f08      	ldr	r7, [sp, #32]
 8013a64:	e73b      	b.n	80138de <_dtoa_r+0x736>
 8013a66:	9a07      	ldr	r2, [sp, #28]
 8013a68:	e767      	b.n	801393a <_dtoa_r+0x792>
 8013a6a:	9b06      	ldr	r3, [sp, #24]
 8013a6c:	2b01      	cmp	r3, #1
 8013a6e:	dc18      	bgt.n	8013aa2 <_dtoa_r+0x8fa>
 8013a70:	f1ba 0f00 	cmp.w	sl, #0
 8013a74:	d115      	bne.n	8013aa2 <_dtoa_r+0x8fa>
 8013a76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013a7a:	b993      	cbnz	r3, 8013aa2 <_dtoa_r+0x8fa>
 8013a7c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013a80:	0d1b      	lsrs	r3, r3, #20
 8013a82:	051b      	lsls	r3, r3, #20
 8013a84:	b183      	cbz	r3, 8013aa8 <_dtoa_r+0x900>
 8013a86:	9b04      	ldr	r3, [sp, #16]
 8013a88:	3301      	adds	r3, #1
 8013a8a:	9304      	str	r3, [sp, #16]
 8013a8c:	9b05      	ldr	r3, [sp, #20]
 8013a8e:	3301      	adds	r3, #1
 8013a90:	9305      	str	r3, [sp, #20]
 8013a92:	f04f 0801 	mov.w	r8, #1
 8013a96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	f47f af6a 	bne.w	8013972 <_dtoa_r+0x7ca>
 8013a9e:	2001      	movs	r0, #1
 8013aa0:	e76f      	b.n	8013982 <_dtoa_r+0x7da>
 8013aa2:	f04f 0800 	mov.w	r8, #0
 8013aa6:	e7f6      	b.n	8013a96 <_dtoa_r+0x8ee>
 8013aa8:	4698      	mov	r8, r3
 8013aaa:	e7f4      	b.n	8013a96 <_dtoa_r+0x8ee>
 8013aac:	f43f af7d 	beq.w	80139aa <_dtoa_r+0x802>
 8013ab0:	4618      	mov	r0, r3
 8013ab2:	301c      	adds	r0, #28
 8013ab4:	e772      	b.n	801399c <_dtoa_r+0x7f4>
 8013ab6:	9b03      	ldr	r3, [sp, #12]
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	dc37      	bgt.n	8013b2c <_dtoa_r+0x984>
 8013abc:	9b06      	ldr	r3, [sp, #24]
 8013abe:	2b02      	cmp	r3, #2
 8013ac0:	dd34      	ble.n	8013b2c <_dtoa_r+0x984>
 8013ac2:	9b03      	ldr	r3, [sp, #12]
 8013ac4:	9302      	str	r3, [sp, #8]
 8013ac6:	9b02      	ldr	r3, [sp, #8]
 8013ac8:	b96b      	cbnz	r3, 8013ae6 <_dtoa_r+0x93e>
 8013aca:	4631      	mov	r1, r6
 8013acc:	2205      	movs	r2, #5
 8013ace:	4620      	mov	r0, r4
 8013ad0:	f000 fd4c 	bl	801456c <__multadd>
 8013ad4:	4601      	mov	r1, r0
 8013ad6:	4606      	mov	r6, r0
 8013ad8:	ee18 0a10 	vmov	r0, s16
 8013adc:	f000 ffb0 	bl	8014a40 <__mcmp>
 8013ae0:	2800      	cmp	r0, #0
 8013ae2:	f73f adbb 	bgt.w	801365c <_dtoa_r+0x4b4>
 8013ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ae8:	9d01      	ldr	r5, [sp, #4]
 8013aea:	43db      	mvns	r3, r3
 8013aec:	9300      	str	r3, [sp, #0]
 8013aee:	f04f 0800 	mov.w	r8, #0
 8013af2:	4631      	mov	r1, r6
 8013af4:	4620      	mov	r0, r4
 8013af6:	f000 fd17 	bl	8014528 <_Bfree>
 8013afa:	2f00      	cmp	r7, #0
 8013afc:	f43f aea4 	beq.w	8013848 <_dtoa_r+0x6a0>
 8013b00:	f1b8 0f00 	cmp.w	r8, #0
 8013b04:	d005      	beq.n	8013b12 <_dtoa_r+0x96a>
 8013b06:	45b8      	cmp	r8, r7
 8013b08:	d003      	beq.n	8013b12 <_dtoa_r+0x96a>
 8013b0a:	4641      	mov	r1, r8
 8013b0c:	4620      	mov	r0, r4
 8013b0e:	f000 fd0b 	bl	8014528 <_Bfree>
 8013b12:	4639      	mov	r1, r7
 8013b14:	4620      	mov	r0, r4
 8013b16:	f000 fd07 	bl	8014528 <_Bfree>
 8013b1a:	e695      	b.n	8013848 <_dtoa_r+0x6a0>
 8013b1c:	2600      	movs	r6, #0
 8013b1e:	4637      	mov	r7, r6
 8013b20:	e7e1      	b.n	8013ae6 <_dtoa_r+0x93e>
 8013b22:	9700      	str	r7, [sp, #0]
 8013b24:	4637      	mov	r7, r6
 8013b26:	e599      	b.n	801365c <_dtoa_r+0x4b4>
 8013b28:	40240000 	.word	0x40240000
 8013b2c:	9b08      	ldr	r3, [sp, #32]
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	f000 80ca 	beq.w	8013cc8 <_dtoa_r+0xb20>
 8013b34:	9b03      	ldr	r3, [sp, #12]
 8013b36:	9302      	str	r3, [sp, #8]
 8013b38:	2d00      	cmp	r5, #0
 8013b3a:	dd05      	ble.n	8013b48 <_dtoa_r+0x9a0>
 8013b3c:	4639      	mov	r1, r7
 8013b3e:	462a      	mov	r2, r5
 8013b40:	4620      	mov	r0, r4
 8013b42:	f000 ff0d 	bl	8014960 <__lshift>
 8013b46:	4607      	mov	r7, r0
 8013b48:	f1b8 0f00 	cmp.w	r8, #0
 8013b4c:	d05b      	beq.n	8013c06 <_dtoa_r+0xa5e>
 8013b4e:	6879      	ldr	r1, [r7, #4]
 8013b50:	4620      	mov	r0, r4
 8013b52:	f000 fca9 	bl	80144a8 <_Balloc>
 8013b56:	4605      	mov	r5, r0
 8013b58:	b928      	cbnz	r0, 8013b66 <_dtoa_r+0x9be>
 8013b5a:	4b87      	ldr	r3, [pc, #540]	; (8013d78 <_dtoa_r+0xbd0>)
 8013b5c:	4602      	mov	r2, r0
 8013b5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013b62:	f7ff bb3b 	b.w	80131dc <_dtoa_r+0x34>
 8013b66:	693a      	ldr	r2, [r7, #16]
 8013b68:	3202      	adds	r2, #2
 8013b6a:	0092      	lsls	r2, r2, #2
 8013b6c:	f107 010c 	add.w	r1, r7, #12
 8013b70:	300c      	adds	r0, #12
 8013b72:	f7fd fec1 	bl	80118f8 <memcpy>
 8013b76:	2201      	movs	r2, #1
 8013b78:	4629      	mov	r1, r5
 8013b7a:	4620      	mov	r0, r4
 8013b7c:	f000 fef0 	bl	8014960 <__lshift>
 8013b80:	9b01      	ldr	r3, [sp, #4]
 8013b82:	f103 0901 	add.w	r9, r3, #1
 8013b86:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8013b8a:	4413      	add	r3, r2
 8013b8c:	9305      	str	r3, [sp, #20]
 8013b8e:	f00a 0301 	and.w	r3, sl, #1
 8013b92:	46b8      	mov	r8, r7
 8013b94:	9304      	str	r3, [sp, #16]
 8013b96:	4607      	mov	r7, r0
 8013b98:	4631      	mov	r1, r6
 8013b9a:	ee18 0a10 	vmov	r0, s16
 8013b9e:	f7ff fa77 	bl	8013090 <quorem>
 8013ba2:	4641      	mov	r1, r8
 8013ba4:	9002      	str	r0, [sp, #8]
 8013ba6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8013baa:	ee18 0a10 	vmov	r0, s16
 8013bae:	f000 ff47 	bl	8014a40 <__mcmp>
 8013bb2:	463a      	mov	r2, r7
 8013bb4:	9003      	str	r0, [sp, #12]
 8013bb6:	4631      	mov	r1, r6
 8013bb8:	4620      	mov	r0, r4
 8013bba:	f000 ff5d 	bl	8014a78 <__mdiff>
 8013bbe:	68c2      	ldr	r2, [r0, #12]
 8013bc0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8013bc4:	4605      	mov	r5, r0
 8013bc6:	bb02      	cbnz	r2, 8013c0a <_dtoa_r+0xa62>
 8013bc8:	4601      	mov	r1, r0
 8013bca:	ee18 0a10 	vmov	r0, s16
 8013bce:	f000 ff37 	bl	8014a40 <__mcmp>
 8013bd2:	4602      	mov	r2, r0
 8013bd4:	4629      	mov	r1, r5
 8013bd6:	4620      	mov	r0, r4
 8013bd8:	9207      	str	r2, [sp, #28]
 8013bda:	f000 fca5 	bl	8014528 <_Bfree>
 8013bde:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8013be2:	ea43 0102 	orr.w	r1, r3, r2
 8013be6:	9b04      	ldr	r3, [sp, #16]
 8013be8:	430b      	orrs	r3, r1
 8013bea:	464d      	mov	r5, r9
 8013bec:	d10f      	bne.n	8013c0e <_dtoa_r+0xa66>
 8013bee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8013bf2:	d02a      	beq.n	8013c4a <_dtoa_r+0xaa2>
 8013bf4:	9b03      	ldr	r3, [sp, #12]
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	dd02      	ble.n	8013c00 <_dtoa_r+0xa58>
 8013bfa:	9b02      	ldr	r3, [sp, #8]
 8013bfc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8013c00:	f88b a000 	strb.w	sl, [fp]
 8013c04:	e775      	b.n	8013af2 <_dtoa_r+0x94a>
 8013c06:	4638      	mov	r0, r7
 8013c08:	e7ba      	b.n	8013b80 <_dtoa_r+0x9d8>
 8013c0a:	2201      	movs	r2, #1
 8013c0c:	e7e2      	b.n	8013bd4 <_dtoa_r+0xa2c>
 8013c0e:	9b03      	ldr	r3, [sp, #12]
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	db04      	blt.n	8013c1e <_dtoa_r+0xa76>
 8013c14:	9906      	ldr	r1, [sp, #24]
 8013c16:	430b      	orrs	r3, r1
 8013c18:	9904      	ldr	r1, [sp, #16]
 8013c1a:	430b      	orrs	r3, r1
 8013c1c:	d122      	bne.n	8013c64 <_dtoa_r+0xabc>
 8013c1e:	2a00      	cmp	r2, #0
 8013c20:	ddee      	ble.n	8013c00 <_dtoa_r+0xa58>
 8013c22:	ee18 1a10 	vmov	r1, s16
 8013c26:	2201      	movs	r2, #1
 8013c28:	4620      	mov	r0, r4
 8013c2a:	f000 fe99 	bl	8014960 <__lshift>
 8013c2e:	4631      	mov	r1, r6
 8013c30:	ee08 0a10 	vmov	s16, r0
 8013c34:	f000 ff04 	bl	8014a40 <__mcmp>
 8013c38:	2800      	cmp	r0, #0
 8013c3a:	dc03      	bgt.n	8013c44 <_dtoa_r+0xa9c>
 8013c3c:	d1e0      	bne.n	8013c00 <_dtoa_r+0xa58>
 8013c3e:	f01a 0f01 	tst.w	sl, #1
 8013c42:	d0dd      	beq.n	8013c00 <_dtoa_r+0xa58>
 8013c44:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8013c48:	d1d7      	bne.n	8013bfa <_dtoa_r+0xa52>
 8013c4a:	2339      	movs	r3, #57	; 0x39
 8013c4c:	f88b 3000 	strb.w	r3, [fp]
 8013c50:	462b      	mov	r3, r5
 8013c52:	461d      	mov	r5, r3
 8013c54:	3b01      	subs	r3, #1
 8013c56:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013c5a:	2a39      	cmp	r2, #57	; 0x39
 8013c5c:	d071      	beq.n	8013d42 <_dtoa_r+0xb9a>
 8013c5e:	3201      	adds	r2, #1
 8013c60:	701a      	strb	r2, [r3, #0]
 8013c62:	e746      	b.n	8013af2 <_dtoa_r+0x94a>
 8013c64:	2a00      	cmp	r2, #0
 8013c66:	dd07      	ble.n	8013c78 <_dtoa_r+0xad0>
 8013c68:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8013c6c:	d0ed      	beq.n	8013c4a <_dtoa_r+0xaa2>
 8013c6e:	f10a 0301 	add.w	r3, sl, #1
 8013c72:	f88b 3000 	strb.w	r3, [fp]
 8013c76:	e73c      	b.n	8013af2 <_dtoa_r+0x94a>
 8013c78:	9b05      	ldr	r3, [sp, #20]
 8013c7a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8013c7e:	4599      	cmp	r9, r3
 8013c80:	d047      	beq.n	8013d12 <_dtoa_r+0xb6a>
 8013c82:	ee18 1a10 	vmov	r1, s16
 8013c86:	2300      	movs	r3, #0
 8013c88:	220a      	movs	r2, #10
 8013c8a:	4620      	mov	r0, r4
 8013c8c:	f000 fc6e 	bl	801456c <__multadd>
 8013c90:	45b8      	cmp	r8, r7
 8013c92:	ee08 0a10 	vmov	s16, r0
 8013c96:	f04f 0300 	mov.w	r3, #0
 8013c9a:	f04f 020a 	mov.w	r2, #10
 8013c9e:	4641      	mov	r1, r8
 8013ca0:	4620      	mov	r0, r4
 8013ca2:	d106      	bne.n	8013cb2 <_dtoa_r+0xb0a>
 8013ca4:	f000 fc62 	bl	801456c <__multadd>
 8013ca8:	4680      	mov	r8, r0
 8013caa:	4607      	mov	r7, r0
 8013cac:	f109 0901 	add.w	r9, r9, #1
 8013cb0:	e772      	b.n	8013b98 <_dtoa_r+0x9f0>
 8013cb2:	f000 fc5b 	bl	801456c <__multadd>
 8013cb6:	4639      	mov	r1, r7
 8013cb8:	4680      	mov	r8, r0
 8013cba:	2300      	movs	r3, #0
 8013cbc:	220a      	movs	r2, #10
 8013cbe:	4620      	mov	r0, r4
 8013cc0:	f000 fc54 	bl	801456c <__multadd>
 8013cc4:	4607      	mov	r7, r0
 8013cc6:	e7f1      	b.n	8013cac <_dtoa_r+0xb04>
 8013cc8:	9b03      	ldr	r3, [sp, #12]
 8013cca:	9302      	str	r3, [sp, #8]
 8013ccc:	9d01      	ldr	r5, [sp, #4]
 8013cce:	ee18 0a10 	vmov	r0, s16
 8013cd2:	4631      	mov	r1, r6
 8013cd4:	f7ff f9dc 	bl	8013090 <quorem>
 8013cd8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8013cdc:	9b01      	ldr	r3, [sp, #4]
 8013cde:	f805 ab01 	strb.w	sl, [r5], #1
 8013ce2:	1aea      	subs	r2, r5, r3
 8013ce4:	9b02      	ldr	r3, [sp, #8]
 8013ce6:	4293      	cmp	r3, r2
 8013ce8:	dd09      	ble.n	8013cfe <_dtoa_r+0xb56>
 8013cea:	ee18 1a10 	vmov	r1, s16
 8013cee:	2300      	movs	r3, #0
 8013cf0:	220a      	movs	r2, #10
 8013cf2:	4620      	mov	r0, r4
 8013cf4:	f000 fc3a 	bl	801456c <__multadd>
 8013cf8:	ee08 0a10 	vmov	s16, r0
 8013cfc:	e7e7      	b.n	8013cce <_dtoa_r+0xb26>
 8013cfe:	9b02      	ldr	r3, [sp, #8]
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	bfc8      	it	gt
 8013d04:	461d      	movgt	r5, r3
 8013d06:	9b01      	ldr	r3, [sp, #4]
 8013d08:	bfd8      	it	le
 8013d0a:	2501      	movle	r5, #1
 8013d0c:	441d      	add	r5, r3
 8013d0e:	f04f 0800 	mov.w	r8, #0
 8013d12:	ee18 1a10 	vmov	r1, s16
 8013d16:	2201      	movs	r2, #1
 8013d18:	4620      	mov	r0, r4
 8013d1a:	f000 fe21 	bl	8014960 <__lshift>
 8013d1e:	4631      	mov	r1, r6
 8013d20:	ee08 0a10 	vmov	s16, r0
 8013d24:	f000 fe8c 	bl	8014a40 <__mcmp>
 8013d28:	2800      	cmp	r0, #0
 8013d2a:	dc91      	bgt.n	8013c50 <_dtoa_r+0xaa8>
 8013d2c:	d102      	bne.n	8013d34 <_dtoa_r+0xb8c>
 8013d2e:	f01a 0f01 	tst.w	sl, #1
 8013d32:	d18d      	bne.n	8013c50 <_dtoa_r+0xaa8>
 8013d34:	462b      	mov	r3, r5
 8013d36:	461d      	mov	r5, r3
 8013d38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013d3c:	2a30      	cmp	r2, #48	; 0x30
 8013d3e:	d0fa      	beq.n	8013d36 <_dtoa_r+0xb8e>
 8013d40:	e6d7      	b.n	8013af2 <_dtoa_r+0x94a>
 8013d42:	9a01      	ldr	r2, [sp, #4]
 8013d44:	429a      	cmp	r2, r3
 8013d46:	d184      	bne.n	8013c52 <_dtoa_r+0xaaa>
 8013d48:	9b00      	ldr	r3, [sp, #0]
 8013d4a:	3301      	adds	r3, #1
 8013d4c:	9300      	str	r3, [sp, #0]
 8013d4e:	2331      	movs	r3, #49	; 0x31
 8013d50:	7013      	strb	r3, [r2, #0]
 8013d52:	e6ce      	b.n	8013af2 <_dtoa_r+0x94a>
 8013d54:	4b09      	ldr	r3, [pc, #36]	; (8013d7c <_dtoa_r+0xbd4>)
 8013d56:	f7ff ba95 	b.w	8013284 <_dtoa_r+0xdc>
 8013d5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	f47f aa6e 	bne.w	801323e <_dtoa_r+0x96>
 8013d62:	4b07      	ldr	r3, [pc, #28]	; (8013d80 <_dtoa_r+0xbd8>)
 8013d64:	f7ff ba8e 	b.w	8013284 <_dtoa_r+0xdc>
 8013d68:	9b02      	ldr	r3, [sp, #8]
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	dcae      	bgt.n	8013ccc <_dtoa_r+0xb24>
 8013d6e:	9b06      	ldr	r3, [sp, #24]
 8013d70:	2b02      	cmp	r3, #2
 8013d72:	f73f aea8 	bgt.w	8013ac6 <_dtoa_r+0x91e>
 8013d76:	e7a9      	b.n	8013ccc <_dtoa_r+0xb24>
 8013d78:	080178ef 	.word	0x080178ef
 8013d7c:	080177f8 	.word	0x080177f8
 8013d80:	08017870 	.word	0x08017870

08013d84 <rshift>:
 8013d84:	6903      	ldr	r3, [r0, #16]
 8013d86:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8013d8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013d8e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8013d92:	f100 0414 	add.w	r4, r0, #20
 8013d96:	dd45      	ble.n	8013e24 <rshift+0xa0>
 8013d98:	f011 011f 	ands.w	r1, r1, #31
 8013d9c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013da0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013da4:	d10c      	bne.n	8013dc0 <rshift+0x3c>
 8013da6:	f100 0710 	add.w	r7, r0, #16
 8013daa:	4629      	mov	r1, r5
 8013dac:	42b1      	cmp	r1, r6
 8013dae:	d334      	bcc.n	8013e1a <rshift+0x96>
 8013db0:	1a9b      	subs	r3, r3, r2
 8013db2:	009b      	lsls	r3, r3, #2
 8013db4:	1eea      	subs	r2, r5, #3
 8013db6:	4296      	cmp	r6, r2
 8013db8:	bf38      	it	cc
 8013dba:	2300      	movcc	r3, #0
 8013dbc:	4423      	add	r3, r4
 8013dbe:	e015      	b.n	8013dec <rshift+0x68>
 8013dc0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8013dc4:	f1c1 0820 	rsb	r8, r1, #32
 8013dc8:	40cf      	lsrs	r7, r1
 8013dca:	f105 0e04 	add.w	lr, r5, #4
 8013dce:	46a1      	mov	r9, r4
 8013dd0:	4576      	cmp	r6, lr
 8013dd2:	46f4      	mov	ip, lr
 8013dd4:	d815      	bhi.n	8013e02 <rshift+0x7e>
 8013dd6:	1a9a      	subs	r2, r3, r2
 8013dd8:	0092      	lsls	r2, r2, #2
 8013dda:	3a04      	subs	r2, #4
 8013ddc:	3501      	adds	r5, #1
 8013dde:	42ae      	cmp	r6, r5
 8013de0:	bf38      	it	cc
 8013de2:	2200      	movcc	r2, #0
 8013de4:	18a3      	adds	r3, r4, r2
 8013de6:	50a7      	str	r7, [r4, r2]
 8013de8:	b107      	cbz	r7, 8013dec <rshift+0x68>
 8013dea:	3304      	adds	r3, #4
 8013dec:	1b1a      	subs	r2, r3, r4
 8013dee:	42a3      	cmp	r3, r4
 8013df0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013df4:	bf08      	it	eq
 8013df6:	2300      	moveq	r3, #0
 8013df8:	6102      	str	r2, [r0, #16]
 8013dfa:	bf08      	it	eq
 8013dfc:	6143      	streq	r3, [r0, #20]
 8013dfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013e02:	f8dc c000 	ldr.w	ip, [ip]
 8013e06:	fa0c fc08 	lsl.w	ip, ip, r8
 8013e0a:	ea4c 0707 	orr.w	r7, ip, r7
 8013e0e:	f849 7b04 	str.w	r7, [r9], #4
 8013e12:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013e16:	40cf      	lsrs	r7, r1
 8013e18:	e7da      	b.n	8013dd0 <rshift+0x4c>
 8013e1a:	f851 cb04 	ldr.w	ip, [r1], #4
 8013e1e:	f847 cf04 	str.w	ip, [r7, #4]!
 8013e22:	e7c3      	b.n	8013dac <rshift+0x28>
 8013e24:	4623      	mov	r3, r4
 8013e26:	e7e1      	b.n	8013dec <rshift+0x68>

08013e28 <__hexdig_fun>:
 8013e28:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013e2c:	2b09      	cmp	r3, #9
 8013e2e:	d802      	bhi.n	8013e36 <__hexdig_fun+0xe>
 8013e30:	3820      	subs	r0, #32
 8013e32:	b2c0      	uxtb	r0, r0
 8013e34:	4770      	bx	lr
 8013e36:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8013e3a:	2b05      	cmp	r3, #5
 8013e3c:	d801      	bhi.n	8013e42 <__hexdig_fun+0x1a>
 8013e3e:	3847      	subs	r0, #71	; 0x47
 8013e40:	e7f7      	b.n	8013e32 <__hexdig_fun+0xa>
 8013e42:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8013e46:	2b05      	cmp	r3, #5
 8013e48:	d801      	bhi.n	8013e4e <__hexdig_fun+0x26>
 8013e4a:	3827      	subs	r0, #39	; 0x27
 8013e4c:	e7f1      	b.n	8013e32 <__hexdig_fun+0xa>
 8013e4e:	2000      	movs	r0, #0
 8013e50:	4770      	bx	lr
	...

08013e54 <__gethex>:
 8013e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e58:	ed2d 8b02 	vpush	{d8}
 8013e5c:	b089      	sub	sp, #36	; 0x24
 8013e5e:	ee08 0a10 	vmov	s16, r0
 8013e62:	9304      	str	r3, [sp, #16]
 8013e64:	4bb4      	ldr	r3, [pc, #720]	; (8014138 <__gethex+0x2e4>)
 8013e66:	681b      	ldr	r3, [r3, #0]
 8013e68:	9301      	str	r3, [sp, #4]
 8013e6a:	4618      	mov	r0, r3
 8013e6c:	468b      	mov	fp, r1
 8013e6e:	4690      	mov	r8, r2
 8013e70:	f7ec f9ae 	bl	80001d0 <strlen>
 8013e74:	9b01      	ldr	r3, [sp, #4]
 8013e76:	f8db 2000 	ldr.w	r2, [fp]
 8013e7a:	4403      	add	r3, r0
 8013e7c:	4682      	mov	sl, r0
 8013e7e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8013e82:	9305      	str	r3, [sp, #20]
 8013e84:	1c93      	adds	r3, r2, #2
 8013e86:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8013e8a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8013e8e:	32fe      	adds	r2, #254	; 0xfe
 8013e90:	18d1      	adds	r1, r2, r3
 8013e92:	461f      	mov	r7, r3
 8013e94:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013e98:	9100      	str	r1, [sp, #0]
 8013e9a:	2830      	cmp	r0, #48	; 0x30
 8013e9c:	d0f8      	beq.n	8013e90 <__gethex+0x3c>
 8013e9e:	f7ff ffc3 	bl	8013e28 <__hexdig_fun>
 8013ea2:	4604      	mov	r4, r0
 8013ea4:	2800      	cmp	r0, #0
 8013ea6:	d13a      	bne.n	8013f1e <__gethex+0xca>
 8013ea8:	9901      	ldr	r1, [sp, #4]
 8013eaa:	4652      	mov	r2, sl
 8013eac:	4638      	mov	r0, r7
 8013eae:	f7fe f9d0 	bl	8012252 <strncmp>
 8013eb2:	4605      	mov	r5, r0
 8013eb4:	2800      	cmp	r0, #0
 8013eb6:	d168      	bne.n	8013f8a <__gethex+0x136>
 8013eb8:	f817 000a 	ldrb.w	r0, [r7, sl]
 8013ebc:	eb07 060a 	add.w	r6, r7, sl
 8013ec0:	f7ff ffb2 	bl	8013e28 <__hexdig_fun>
 8013ec4:	2800      	cmp	r0, #0
 8013ec6:	d062      	beq.n	8013f8e <__gethex+0x13a>
 8013ec8:	4633      	mov	r3, r6
 8013eca:	7818      	ldrb	r0, [r3, #0]
 8013ecc:	2830      	cmp	r0, #48	; 0x30
 8013ece:	461f      	mov	r7, r3
 8013ed0:	f103 0301 	add.w	r3, r3, #1
 8013ed4:	d0f9      	beq.n	8013eca <__gethex+0x76>
 8013ed6:	f7ff ffa7 	bl	8013e28 <__hexdig_fun>
 8013eda:	2301      	movs	r3, #1
 8013edc:	fab0 f480 	clz	r4, r0
 8013ee0:	0964      	lsrs	r4, r4, #5
 8013ee2:	4635      	mov	r5, r6
 8013ee4:	9300      	str	r3, [sp, #0]
 8013ee6:	463a      	mov	r2, r7
 8013ee8:	4616      	mov	r6, r2
 8013eea:	3201      	adds	r2, #1
 8013eec:	7830      	ldrb	r0, [r6, #0]
 8013eee:	f7ff ff9b 	bl	8013e28 <__hexdig_fun>
 8013ef2:	2800      	cmp	r0, #0
 8013ef4:	d1f8      	bne.n	8013ee8 <__gethex+0x94>
 8013ef6:	9901      	ldr	r1, [sp, #4]
 8013ef8:	4652      	mov	r2, sl
 8013efa:	4630      	mov	r0, r6
 8013efc:	f7fe f9a9 	bl	8012252 <strncmp>
 8013f00:	b980      	cbnz	r0, 8013f24 <__gethex+0xd0>
 8013f02:	b94d      	cbnz	r5, 8013f18 <__gethex+0xc4>
 8013f04:	eb06 050a 	add.w	r5, r6, sl
 8013f08:	462a      	mov	r2, r5
 8013f0a:	4616      	mov	r6, r2
 8013f0c:	3201      	adds	r2, #1
 8013f0e:	7830      	ldrb	r0, [r6, #0]
 8013f10:	f7ff ff8a 	bl	8013e28 <__hexdig_fun>
 8013f14:	2800      	cmp	r0, #0
 8013f16:	d1f8      	bne.n	8013f0a <__gethex+0xb6>
 8013f18:	1bad      	subs	r5, r5, r6
 8013f1a:	00ad      	lsls	r5, r5, #2
 8013f1c:	e004      	b.n	8013f28 <__gethex+0xd4>
 8013f1e:	2400      	movs	r4, #0
 8013f20:	4625      	mov	r5, r4
 8013f22:	e7e0      	b.n	8013ee6 <__gethex+0x92>
 8013f24:	2d00      	cmp	r5, #0
 8013f26:	d1f7      	bne.n	8013f18 <__gethex+0xc4>
 8013f28:	7833      	ldrb	r3, [r6, #0]
 8013f2a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013f2e:	2b50      	cmp	r3, #80	; 0x50
 8013f30:	d13b      	bne.n	8013faa <__gethex+0x156>
 8013f32:	7873      	ldrb	r3, [r6, #1]
 8013f34:	2b2b      	cmp	r3, #43	; 0x2b
 8013f36:	d02c      	beq.n	8013f92 <__gethex+0x13e>
 8013f38:	2b2d      	cmp	r3, #45	; 0x2d
 8013f3a:	d02e      	beq.n	8013f9a <__gethex+0x146>
 8013f3c:	1c71      	adds	r1, r6, #1
 8013f3e:	f04f 0900 	mov.w	r9, #0
 8013f42:	7808      	ldrb	r0, [r1, #0]
 8013f44:	f7ff ff70 	bl	8013e28 <__hexdig_fun>
 8013f48:	1e43      	subs	r3, r0, #1
 8013f4a:	b2db      	uxtb	r3, r3
 8013f4c:	2b18      	cmp	r3, #24
 8013f4e:	d82c      	bhi.n	8013faa <__gethex+0x156>
 8013f50:	f1a0 0210 	sub.w	r2, r0, #16
 8013f54:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013f58:	f7ff ff66 	bl	8013e28 <__hexdig_fun>
 8013f5c:	1e43      	subs	r3, r0, #1
 8013f5e:	b2db      	uxtb	r3, r3
 8013f60:	2b18      	cmp	r3, #24
 8013f62:	d91d      	bls.n	8013fa0 <__gethex+0x14c>
 8013f64:	f1b9 0f00 	cmp.w	r9, #0
 8013f68:	d000      	beq.n	8013f6c <__gethex+0x118>
 8013f6a:	4252      	negs	r2, r2
 8013f6c:	4415      	add	r5, r2
 8013f6e:	f8cb 1000 	str.w	r1, [fp]
 8013f72:	b1e4      	cbz	r4, 8013fae <__gethex+0x15a>
 8013f74:	9b00      	ldr	r3, [sp, #0]
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	bf14      	ite	ne
 8013f7a:	2700      	movne	r7, #0
 8013f7c:	2706      	moveq	r7, #6
 8013f7e:	4638      	mov	r0, r7
 8013f80:	b009      	add	sp, #36	; 0x24
 8013f82:	ecbd 8b02 	vpop	{d8}
 8013f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f8a:	463e      	mov	r6, r7
 8013f8c:	4625      	mov	r5, r4
 8013f8e:	2401      	movs	r4, #1
 8013f90:	e7ca      	b.n	8013f28 <__gethex+0xd4>
 8013f92:	f04f 0900 	mov.w	r9, #0
 8013f96:	1cb1      	adds	r1, r6, #2
 8013f98:	e7d3      	b.n	8013f42 <__gethex+0xee>
 8013f9a:	f04f 0901 	mov.w	r9, #1
 8013f9e:	e7fa      	b.n	8013f96 <__gethex+0x142>
 8013fa0:	230a      	movs	r3, #10
 8013fa2:	fb03 0202 	mla	r2, r3, r2, r0
 8013fa6:	3a10      	subs	r2, #16
 8013fa8:	e7d4      	b.n	8013f54 <__gethex+0x100>
 8013faa:	4631      	mov	r1, r6
 8013fac:	e7df      	b.n	8013f6e <__gethex+0x11a>
 8013fae:	1bf3      	subs	r3, r6, r7
 8013fb0:	3b01      	subs	r3, #1
 8013fb2:	4621      	mov	r1, r4
 8013fb4:	2b07      	cmp	r3, #7
 8013fb6:	dc0b      	bgt.n	8013fd0 <__gethex+0x17c>
 8013fb8:	ee18 0a10 	vmov	r0, s16
 8013fbc:	f000 fa74 	bl	80144a8 <_Balloc>
 8013fc0:	4604      	mov	r4, r0
 8013fc2:	b940      	cbnz	r0, 8013fd6 <__gethex+0x182>
 8013fc4:	4b5d      	ldr	r3, [pc, #372]	; (801413c <__gethex+0x2e8>)
 8013fc6:	4602      	mov	r2, r0
 8013fc8:	21de      	movs	r1, #222	; 0xde
 8013fca:	485d      	ldr	r0, [pc, #372]	; (8014140 <__gethex+0x2ec>)
 8013fcc:	f001 f9fa 	bl	80153c4 <__assert_func>
 8013fd0:	3101      	adds	r1, #1
 8013fd2:	105b      	asrs	r3, r3, #1
 8013fd4:	e7ee      	b.n	8013fb4 <__gethex+0x160>
 8013fd6:	f100 0914 	add.w	r9, r0, #20
 8013fda:	f04f 0b00 	mov.w	fp, #0
 8013fde:	f1ca 0301 	rsb	r3, sl, #1
 8013fe2:	f8cd 9008 	str.w	r9, [sp, #8]
 8013fe6:	f8cd b000 	str.w	fp, [sp]
 8013fea:	9306      	str	r3, [sp, #24]
 8013fec:	42b7      	cmp	r7, r6
 8013fee:	d340      	bcc.n	8014072 <__gethex+0x21e>
 8013ff0:	9802      	ldr	r0, [sp, #8]
 8013ff2:	9b00      	ldr	r3, [sp, #0]
 8013ff4:	f840 3b04 	str.w	r3, [r0], #4
 8013ff8:	eba0 0009 	sub.w	r0, r0, r9
 8013ffc:	1080      	asrs	r0, r0, #2
 8013ffe:	0146      	lsls	r6, r0, #5
 8014000:	6120      	str	r0, [r4, #16]
 8014002:	4618      	mov	r0, r3
 8014004:	f000 fb42 	bl	801468c <__hi0bits>
 8014008:	1a30      	subs	r0, r6, r0
 801400a:	f8d8 6000 	ldr.w	r6, [r8]
 801400e:	42b0      	cmp	r0, r6
 8014010:	dd63      	ble.n	80140da <__gethex+0x286>
 8014012:	1b87      	subs	r7, r0, r6
 8014014:	4639      	mov	r1, r7
 8014016:	4620      	mov	r0, r4
 8014018:	f000 fee6 	bl	8014de8 <__any_on>
 801401c:	4682      	mov	sl, r0
 801401e:	b1a8      	cbz	r0, 801404c <__gethex+0x1f8>
 8014020:	1e7b      	subs	r3, r7, #1
 8014022:	1159      	asrs	r1, r3, #5
 8014024:	f003 021f 	and.w	r2, r3, #31
 8014028:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801402c:	f04f 0a01 	mov.w	sl, #1
 8014030:	fa0a f202 	lsl.w	r2, sl, r2
 8014034:	420a      	tst	r2, r1
 8014036:	d009      	beq.n	801404c <__gethex+0x1f8>
 8014038:	4553      	cmp	r3, sl
 801403a:	dd05      	ble.n	8014048 <__gethex+0x1f4>
 801403c:	1eb9      	subs	r1, r7, #2
 801403e:	4620      	mov	r0, r4
 8014040:	f000 fed2 	bl	8014de8 <__any_on>
 8014044:	2800      	cmp	r0, #0
 8014046:	d145      	bne.n	80140d4 <__gethex+0x280>
 8014048:	f04f 0a02 	mov.w	sl, #2
 801404c:	4639      	mov	r1, r7
 801404e:	4620      	mov	r0, r4
 8014050:	f7ff fe98 	bl	8013d84 <rshift>
 8014054:	443d      	add	r5, r7
 8014056:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801405a:	42ab      	cmp	r3, r5
 801405c:	da4c      	bge.n	80140f8 <__gethex+0x2a4>
 801405e:	ee18 0a10 	vmov	r0, s16
 8014062:	4621      	mov	r1, r4
 8014064:	f000 fa60 	bl	8014528 <_Bfree>
 8014068:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801406a:	2300      	movs	r3, #0
 801406c:	6013      	str	r3, [r2, #0]
 801406e:	27a3      	movs	r7, #163	; 0xa3
 8014070:	e785      	b.n	8013f7e <__gethex+0x12a>
 8014072:	1e73      	subs	r3, r6, #1
 8014074:	9a05      	ldr	r2, [sp, #20]
 8014076:	9303      	str	r3, [sp, #12]
 8014078:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801407c:	4293      	cmp	r3, r2
 801407e:	d019      	beq.n	80140b4 <__gethex+0x260>
 8014080:	f1bb 0f20 	cmp.w	fp, #32
 8014084:	d107      	bne.n	8014096 <__gethex+0x242>
 8014086:	9b02      	ldr	r3, [sp, #8]
 8014088:	9a00      	ldr	r2, [sp, #0]
 801408a:	f843 2b04 	str.w	r2, [r3], #4
 801408e:	9302      	str	r3, [sp, #8]
 8014090:	2300      	movs	r3, #0
 8014092:	9300      	str	r3, [sp, #0]
 8014094:	469b      	mov	fp, r3
 8014096:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801409a:	f7ff fec5 	bl	8013e28 <__hexdig_fun>
 801409e:	9b00      	ldr	r3, [sp, #0]
 80140a0:	f000 000f 	and.w	r0, r0, #15
 80140a4:	fa00 f00b 	lsl.w	r0, r0, fp
 80140a8:	4303      	orrs	r3, r0
 80140aa:	9300      	str	r3, [sp, #0]
 80140ac:	f10b 0b04 	add.w	fp, fp, #4
 80140b0:	9b03      	ldr	r3, [sp, #12]
 80140b2:	e00d      	b.n	80140d0 <__gethex+0x27c>
 80140b4:	9b03      	ldr	r3, [sp, #12]
 80140b6:	9a06      	ldr	r2, [sp, #24]
 80140b8:	4413      	add	r3, r2
 80140ba:	42bb      	cmp	r3, r7
 80140bc:	d3e0      	bcc.n	8014080 <__gethex+0x22c>
 80140be:	4618      	mov	r0, r3
 80140c0:	9901      	ldr	r1, [sp, #4]
 80140c2:	9307      	str	r3, [sp, #28]
 80140c4:	4652      	mov	r2, sl
 80140c6:	f7fe f8c4 	bl	8012252 <strncmp>
 80140ca:	9b07      	ldr	r3, [sp, #28]
 80140cc:	2800      	cmp	r0, #0
 80140ce:	d1d7      	bne.n	8014080 <__gethex+0x22c>
 80140d0:	461e      	mov	r6, r3
 80140d2:	e78b      	b.n	8013fec <__gethex+0x198>
 80140d4:	f04f 0a03 	mov.w	sl, #3
 80140d8:	e7b8      	b.n	801404c <__gethex+0x1f8>
 80140da:	da0a      	bge.n	80140f2 <__gethex+0x29e>
 80140dc:	1a37      	subs	r7, r6, r0
 80140de:	4621      	mov	r1, r4
 80140e0:	ee18 0a10 	vmov	r0, s16
 80140e4:	463a      	mov	r2, r7
 80140e6:	f000 fc3b 	bl	8014960 <__lshift>
 80140ea:	1bed      	subs	r5, r5, r7
 80140ec:	4604      	mov	r4, r0
 80140ee:	f100 0914 	add.w	r9, r0, #20
 80140f2:	f04f 0a00 	mov.w	sl, #0
 80140f6:	e7ae      	b.n	8014056 <__gethex+0x202>
 80140f8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80140fc:	42a8      	cmp	r0, r5
 80140fe:	dd72      	ble.n	80141e6 <__gethex+0x392>
 8014100:	1b45      	subs	r5, r0, r5
 8014102:	42ae      	cmp	r6, r5
 8014104:	dc36      	bgt.n	8014174 <__gethex+0x320>
 8014106:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801410a:	2b02      	cmp	r3, #2
 801410c:	d02a      	beq.n	8014164 <__gethex+0x310>
 801410e:	2b03      	cmp	r3, #3
 8014110:	d02c      	beq.n	801416c <__gethex+0x318>
 8014112:	2b01      	cmp	r3, #1
 8014114:	d11c      	bne.n	8014150 <__gethex+0x2fc>
 8014116:	42ae      	cmp	r6, r5
 8014118:	d11a      	bne.n	8014150 <__gethex+0x2fc>
 801411a:	2e01      	cmp	r6, #1
 801411c:	d112      	bne.n	8014144 <__gethex+0x2f0>
 801411e:	9a04      	ldr	r2, [sp, #16]
 8014120:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014124:	6013      	str	r3, [r2, #0]
 8014126:	2301      	movs	r3, #1
 8014128:	6123      	str	r3, [r4, #16]
 801412a:	f8c9 3000 	str.w	r3, [r9]
 801412e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014130:	2762      	movs	r7, #98	; 0x62
 8014132:	601c      	str	r4, [r3, #0]
 8014134:	e723      	b.n	8013f7e <__gethex+0x12a>
 8014136:	bf00      	nop
 8014138:	08017968 	.word	0x08017968
 801413c:	080178ef 	.word	0x080178ef
 8014140:	08017900 	.word	0x08017900
 8014144:	1e71      	subs	r1, r6, #1
 8014146:	4620      	mov	r0, r4
 8014148:	f000 fe4e 	bl	8014de8 <__any_on>
 801414c:	2800      	cmp	r0, #0
 801414e:	d1e6      	bne.n	801411e <__gethex+0x2ca>
 8014150:	ee18 0a10 	vmov	r0, s16
 8014154:	4621      	mov	r1, r4
 8014156:	f000 f9e7 	bl	8014528 <_Bfree>
 801415a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801415c:	2300      	movs	r3, #0
 801415e:	6013      	str	r3, [r2, #0]
 8014160:	2750      	movs	r7, #80	; 0x50
 8014162:	e70c      	b.n	8013f7e <__gethex+0x12a>
 8014164:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014166:	2b00      	cmp	r3, #0
 8014168:	d1f2      	bne.n	8014150 <__gethex+0x2fc>
 801416a:	e7d8      	b.n	801411e <__gethex+0x2ca>
 801416c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801416e:	2b00      	cmp	r3, #0
 8014170:	d1d5      	bne.n	801411e <__gethex+0x2ca>
 8014172:	e7ed      	b.n	8014150 <__gethex+0x2fc>
 8014174:	1e6f      	subs	r7, r5, #1
 8014176:	f1ba 0f00 	cmp.w	sl, #0
 801417a:	d131      	bne.n	80141e0 <__gethex+0x38c>
 801417c:	b127      	cbz	r7, 8014188 <__gethex+0x334>
 801417e:	4639      	mov	r1, r7
 8014180:	4620      	mov	r0, r4
 8014182:	f000 fe31 	bl	8014de8 <__any_on>
 8014186:	4682      	mov	sl, r0
 8014188:	117b      	asrs	r3, r7, #5
 801418a:	2101      	movs	r1, #1
 801418c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8014190:	f007 071f 	and.w	r7, r7, #31
 8014194:	fa01 f707 	lsl.w	r7, r1, r7
 8014198:	421f      	tst	r7, r3
 801419a:	4629      	mov	r1, r5
 801419c:	4620      	mov	r0, r4
 801419e:	bf18      	it	ne
 80141a0:	f04a 0a02 	orrne.w	sl, sl, #2
 80141a4:	1b76      	subs	r6, r6, r5
 80141a6:	f7ff fded 	bl	8013d84 <rshift>
 80141aa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80141ae:	2702      	movs	r7, #2
 80141b0:	f1ba 0f00 	cmp.w	sl, #0
 80141b4:	d048      	beq.n	8014248 <__gethex+0x3f4>
 80141b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80141ba:	2b02      	cmp	r3, #2
 80141bc:	d015      	beq.n	80141ea <__gethex+0x396>
 80141be:	2b03      	cmp	r3, #3
 80141c0:	d017      	beq.n	80141f2 <__gethex+0x39e>
 80141c2:	2b01      	cmp	r3, #1
 80141c4:	d109      	bne.n	80141da <__gethex+0x386>
 80141c6:	f01a 0f02 	tst.w	sl, #2
 80141ca:	d006      	beq.n	80141da <__gethex+0x386>
 80141cc:	f8d9 0000 	ldr.w	r0, [r9]
 80141d0:	ea4a 0a00 	orr.w	sl, sl, r0
 80141d4:	f01a 0f01 	tst.w	sl, #1
 80141d8:	d10e      	bne.n	80141f8 <__gethex+0x3a4>
 80141da:	f047 0710 	orr.w	r7, r7, #16
 80141de:	e033      	b.n	8014248 <__gethex+0x3f4>
 80141e0:	f04f 0a01 	mov.w	sl, #1
 80141e4:	e7d0      	b.n	8014188 <__gethex+0x334>
 80141e6:	2701      	movs	r7, #1
 80141e8:	e7e2      	b.n	80141b0 <__gethex+0x35c>
 80141ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80141ec:	f1c3 0301 	rsb	r3, r3, #1
 80141f0:	9315      	str	r3, [sp, #84]	; 0x54
 80141f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d0f0      	beq.n	80141da <__gethex+0x386>
 80141f8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80141fc:	f104 0314 	add.w	r3, r4, #20
 8014200:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8014204:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8014208:	f04f 0c00 	mov.w	ip, #0
 801420c:	4618      	mov	r0, r3
 801420e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014212:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8014216:	d01c      	beq.n	8014252 <__gethex+0x3fe>
 8014218:	3201      	adds	r2, #1
 801421a:	6002      	str	r2, [r0, #0]
 801421c:	2f02      	cmp	r7, #2
 801421e:	f104 0314 	add.w	r3, r4, #20
 8014222:	d13f      	bne.n	80142a4 <__gethex+0x450>
 8014224:	f8d8 2000 	ldr.w	r2, [r8]
 8014228:	3a01      	subs	r2, #1
 801422a:	42b2      	cmp	r2, r6
 801422c:	d10a      	bne.n	8014244 <__gethex+0x3f0>
 801422e:	1171      	asrs	r1, r6, #5
 8014230:	2201      	movs	r2, #1
 8014232:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014236:	f006 061f 	and.w	r6, r6, #31
 801423a:	fa02 f606 	lsl.w	r6, r2, r6
 801423e:	421e      	tst	r6, r3
 8014240:	bf18      	it	ne
 8014242:	4617      	movne	r7, r2
 8014244:	f047 0720 	orr.w	r7, r7, #32
 8014248:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801424a:	601c      	str	r4, [r3, #0]
 801424c:	9b04      	ldr	r3, [sp, #16]
 801424e:	601d      	str	r5, [r3, #0]
 8014250:	e695      	b.n	8013f7e <__gethex+0x12a>
 8014252:	4299      	cmp	r1, r3
 8014254:	f843 cc04 	str.w	ip, [r3, #-4]
 8014258:	d8d8      	bhi.n	801420c <__gethex+0x3b8>
 801425a:	68a3      	ldr	r3, [r4, #8]
 801425c:	459b      	cmp	fp, r3
 801425e:	db19      	blt.n	8014294 <__gethex+0x440>
 8014260:	6861      	ldr	r1, [r4, #4]
 8014262:	ee18 0a10 	vmov	r0, s16
 8014266:	3101      	adds	r1, #1
 8014268:	f000 f91e 	bl	80144a8 <_Balloc>
 801426c:	4681      	mov	r9, r0
 801426e:	b918      	cbnz	r0, 8014278 <__gethex+0x424>
 8014270:	4b1a      	ldr	r3, [pc, #104]	; (80142dc <__gethex+0x488>)
 8014272:	4602      	mov	r2, r0
 8014274:	2184      	movs	r1, #132	; 0x84
 8014276:	e6a8      	b.n	8013fca <__gethex+0x176>
 8014278:	6922      	ldr	r2, [r4, #16]
 801427a:	3202      	adds	r2, #2
 801427c:	f104 010c 	add.w	r1, r4, #12
 8014280:	0092      	lsls	r2, r2, #2
 8014282:	300c      	adds	r0, #12
 8014284:	f7fd fb38 	bl	80118f8 <memcpy>
 8014288:	4621      	mov	r1, r4
 801428a:	ee18 0a10 	vmov	r0, s16
 801428e:	f000 f94b 	bl	8014528 <_Bfree>
 8014292:	464c      	mov	r4, r9
 8014294:	6923      	ldr	r3, [r4, #16]
 8014296:	1c5a      	adds	r2, r3, #1
 8014298:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801429c:	6122      	str	r2, [r4, #16]
 801429e:	2201      	movs	r2, #1
 80142a0:	615a      	str	r2, [r3, #20]
 80142a2:	e7bb      	b.n	801421c <__gethex+0x3c8>
 80142a4:	6922      	ldr	r2, [r4, #16]
 80142a6:	455a      	cmp	r2, fp
 80142a8:	dd0b      	ble.n	80142c2 <__gethex+0x46e>
 80142aa:	2101      	movs	r1, #1
 80142ac:	4620      	mov	r0, r4
 80142ae:	f7ff fd69 	bl	8013d84 <rshift>
 80142b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80142b6:	3501      	adds	r5, #1
 80142b8:	42ab      	cmp	r3, r5
 80142ba:	f6ff aed0 	blt.w	801405e <__gethex+0x20a>
 80142be:	2701      	movs	r7, #1
 80142c0:	e7c0      	b.n	8014244 <__gethex+0x3f0>
 80142c2:	f016 061f 	ands.w	r6, r6, #31
 80142c6:	d0fa      	beq.n	80142be <__gethex+0x46a>
 80142c8:	4453      	add	r3, sl
 80142ca:	f1c6 0620 	rsb	r6, r6, #32
 80142ce:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80142d2:	f000 f9db 	bl	801468c <__hi0bits>
 80142d6:	42b0      	cmp	r0, r6
 80142d8:	dbe7      	blt.n	80142aa <__gethex+0x456>
 80142da:	e7f0      	b.n	80142be <__gethex+0x46a>
 80142dc:	080178ef 	.word	0x080178ef

080142e0 <L_shift>:
 80142e0:	f1c2 0208 	rsb	r2, r2, #8
 80142e4:	0092      	lsls	r2, r2, #2
 80142e6:	b570      	push	{r4, r5, r6, lr}
 80142e8:	f1c2 0620 	rsb	r6, r2, #32
 80142ec:	6843      	ldr	r3, [r0, #4]
 80142ee:	6804      	ldr	r4, [r0, #0]
 80142f0:	fa03 f506 	lsl.w	r5, r3, r6
 80142f4:	432c      	orrs	r4, r5
 80142f6:	40d3      	lsrs	r3, r2
 80142f8:	6004      	str	r4, [r0, #0]
 80142fa:	f840 3f04 	str.w	r3, [r0, #4]!
 80142fe:	4288      	cmp	r0, r1
 8014300:	d3f4      	bcc.n	80142ec <L_shift+0xc>
 8014302:	bd70      	pop	{r4, r5, r6, pc}

08014304 <__match>:
 8014304:	b530      	push	{r4, r5, lr}
 8014306:	6803      	ldr	r3, [r0, #0]
 8014308:	3301      	adds	r3, #1
 801430a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801430e:	b914      	cbnz	r4, 8014316 <__match+0x12>
 8014310:	6003      	str	r3, [r0, #0]
 8014312:	2001      	movs	r0, #1
 8014314:	bd30      	pop	{r4, r5, pc}
 8014316:	f813 2b01 	ldrb.w	r2, [r3], #1
 801431a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801431e:	2d19      	cmp	r5, #25
 8014320:	bf98      	it	ls
 8014322:	3220      	addls	r2, #32
 8014324:	42a2      	cmp	r2, r4
 8014326:	d0f0      	beq.n	801430a <__match+0x6>
 8014328:	2000      	movs	r0, #0
 801432a:	e7f3      	b.n	8014314 <__match+0x10>

0801432c <__hexnan>:
 801432c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014330:	680b      	ldr	r3, [r1, #0]
 8014332:	115e      	asrs	r6, r3, #5
 8014334:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014338:	f013 031f 	ands.w	r3, r3, #31
 801433c:	b087      	sub	sp, #28
 801433e:	bf18      	it	ne
 8014340:	3604      	addne	r6, #4
 8014342:	2500      	movs	r5, #0
 8014344:	1f37      	subs	r7, r6, #4
 8014346:	4690      	mov	r8, r2
 8014348:	6802      	ldr	r2, [r0, #0]
 801434a:	9301      	str	r3, [sp, #4]
 801434c:	4682      	mov	sl, r0
 801434e:	f846 5c04 	str.w	r5, [r6, #-4]
 8014352:	46b9      	mov	r9, r7
 8014354:	463c      	mov	r4, r7
 8014356:	9502      	str	r5, [sp, #8]
 8014358:	46ab      	mov	fp, r5
 801435a:	7851      	ldrb	r1, [r2, #1]
 801435c:	1c53      	adds	r3, r2, #1
 801435e:	9303      	str	r3, [sp, #12]
 8014360:	b341      	cbz	r1, 80143b4 <__hexnan+0x88>
 8014362:	4608      	mov	r0, r1
 8014364:	9205      	str	r2, [sp, #20]
 8014366:	9104      	str	r1, [sp, #16]
 8014368:	f7ff fd5e 	bl	8013e28 <__hexdig_fun>
 801436c:	2800      	cmp	r0, #0
 801436e:	d14f      	bne.n	8014410 <__hexnan+0xe4>
 8014370:	9904      	ldr	r1, [sp, #16]
 8014372:	9a05      	ldr	r2, [sp, #20]
 8014374:	2920      	cmp	r1, #32
 8014376:	d818      	bhi.n	80143aa <__hexnan+0x7e>
 8014378:	9b02      	ldr	r3, [sp, #8]
 801437a:	459b      	cmp	fp, r3
 801437c:	dd13      	ble.n	80143a6 <__hexnan+0x7a>
 801437e:	454c      	cmp	r4, r9
 8014380:	d206      	bcs.n	8014390 <__hexnan+0x64>
 8014382:	2d07      	cmp	r5, #7
 8014384:	dc04      	bgt.n	8014390 <__hexnan+0x64>
 8014386:	462a      	mov	r2, r5
 8014388:	4649      	mov	r1, r9
 801438a:	4620      	mov	r0, r4
 801438c:	f7ff ffa8 	bl	80142e0 <L_shift>
 8014390:	4544      	cmp	r4, r8
 8014392:	d950      	bls.n	8014436 <__hexnan+0x10a>
 8014394:	2300      	movs	r3, #0
 8014396:	f1a4 0904 	sub.w	r9, r4, #4
 801439a:	f844 3c04 	str.w	r3, [r4, #-4]
 801439e:	f8cd b008 	str.w	fp, [sp, #8]
 80143a2:	464c      	mov	r4, r9
 80143a4:	461d      	mov	r5, r3
 80143a6:	9a03      	ldr	r2, [sp, #12]
 80143a8:	e7d7      	b.n	801435a <__hexnan+0x2e>
 80143aa:	2929      	cmp	r1, #41	; 0x29
 80143ac:	d156      	bne.n	801445c <__hexnan+0x130>
 80143ae:	3202      	adds	r2, #2
 80143b0:	f8ca 2000 	str.w	r2, [sl]
 80143b4:	f1bb 0f00 	cmp.w	fp, #0
 80143b8:	d050      	beq.n	801445c <__hexnan+0x130>
 80143ba:	454c      	cmp	r4, r9
 80143bc:	d206      	bcs.n	80143cc <__hexnan+0xa0>
 80143be:	2d07      	cmp	r5, #7
 80143c0:	dc04      	bgt.n	80143cc <__hexnan+0xa0>
 80143c2:	462a      	mov	r2, r5
 80143c4:	4649      	mov	r1, r9
 80143c6:	4620      	mov	r0, r4
 80143c8:	f7ff ff8a 	bl	80142e0 <L_shift>
 80143cc:	4544      	cmp	r4, r8
 80143ce:	d934      	bls.n	801443a <__hexnan+0x10e>
 80143d0:	f1a8 0204 	sub.w	r2, r8, #4
 80143d4:	4623      	mov	r3, r4
 80143d6:	f853 1b04 	ldr.w	r1, [r3], #4
 80143da:	f842 1f04 	str.w	r1, [r2, #4]!
 80143de:	429f      	cmp	r7, r3
 80143e0:	d2f9      	bcs.n	80143d6 <__hexnan+0xaa>
 80143e2:	1b3b      	subs	r3, r7, r4
 80143e4:	f023 0303 	bic.w	r3, r3, #3
 80143e8:	3304      	adds	r3, #4
 80143ea:	3401      	adds	r4, #1
 80143ec:	3e03      	subs	r6, #3
 80143ee:	42b4      	cmp	r4, r6
 80143f0:	bf88      	it	hi
 80143f2:	2304      	movhi	r3, #4
 80143f4:	4443      	add	r3, r8
 80143f6:	2200      	movs	r2, #0
 80143f8:	f843 2b04 	str.w	r2, [r3], #4
 80143fc:	429f      	cmp	r7, r3
 80143fe:	d2fb      	bcs.n	80143f8 <__hexnan+0xcc>
 8014400:	683b      	ldr	r3, [r7, #0]
 8014402:	b91b      	cbnz	r3, 801440c <__hexnan+0xe0>
 8014404:	4547      	cmp	r7, r8
 8014406:	d127      	bne.n	8014458 <__hexnan+0x12c>
 8014408:	2301      	movs	r3, #1
 801440a:	603b      	str	r3, [r7, #0]
 801440c:	2005      	movs	r0, #5
 801440e:	e026      	b.n	801445e <__hexnan+0x132>
 8014410:	3501      	adds	r5, #1
 8014412:	2d08      	cmp	r5, #8
 8014414:	f10b 0b01 	add.w	fp, fp, #1
 8014418:	dd06      	ble.n	8014428 <__hexnan+0xfc>
 801441a:	4544      	cmp	r4, r8
 801441c:	d9c3      	bls.n	80143a6 <__hexnan+0x7a>
 801441e:	2300      	movs	r3, #0
 8014420:	f844 3c04 	str.w	r3, [r4, #-4]
 8014424:	2501      	movs	r5, #1
 8014426:	3c04      	subs	r4, #4
 8014428:	6822      	ldr	r2, [r4, #0]
 801442a:	f000 000f 	and.w	r0, r0, #15
 801442e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8014432:	6022      	str	r2, [r4, #0]
 8014434:	e7b7      	b.n	80143a6 <__hexnan+0x7a>
 8014436:	2508      	movs	r5, #8
 8014438:	e7b5      	b.n	80143a6 <__hexnan+0x7a>
 801443a:	9b01      	ldr	r3, [sp, #4]
 801443c:	2b00      	cmp	r3, #0
 801443e:	d0df      	beq.n	8014400 <__hexnan+0xd4>
 8014440:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014444:	f1c3 0320 	rsb	r3, r3, #32
 8014448:	fa22 f303 	lsr.w	r3, r2, r3
 801444c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014450:	401a      	ands	r2, r3
 8014452:	f846 2c04 	str.w	r2, [r6, #-4]
 8014456:	e7d3      	b.n	8014400 <__hexnan+0xd4>
 8014458:	3f04      	subs	r7, #4
 801445a:	e7d1      	b.n	8014400 <__hexnan+0xd4>
 801445c:	2004      	movs	r0, #4
 801445e:	b007      	add	sp, #28
 8014460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014464 <_localeconv_r>:
 8014464:	4800      	ldr	r0, [pc, #0]	; (8014468 <_localeconv_r+0x4>)
 8014466:	4770      	bx	lr
 8014468:	2000038c 	.word	0x2000038c

0801446c <__retarget_lock_init_recursive>:
 801446c:	4770      	bx	lr

0801446e <__retarget_lock_acquire_recursive>:
 801446e:	4770      	bx	lr

08014470 <__retarget_lock_release_recursive>:
 8014470:	4770      	bx	lr
	...

08014474 <malloc>:
 8014474:	4b02      	ldr	r3, [pc, #8]	; (8014480 <malloc+0xc>)
 8014476:	4601      	mov	r1, r0
 8014478:	6818      	ldr	r0, [r3, #0]
 801447a:	f000 bd59 	b.w	8014f30 <_malloc_r>
 801447e:	bf00      	nop
 8014480:	20000234 	.word	0x20000234

08014484 <__ascii_mbtowc>:
 8014484:	b082      	sub	sp, #8
 8014486:	b901      	cbnz	r1, 801448a <__ascii_mbtowc+0x6>
 8014488:	a901      	add	r1, sp, #4
 801448a:	b142      	cbz	r2, 801449e <__ascii_mbtowc+0x1a>
 801448c:	b14b      	cbz	r3, 80144a2 <__ascii_mbtowc+0x1e>
 801448e:	7813      	ldrb	r3, [r2, #0]
 8014490:	600b      	str	r3, [r1, #0]
 8014492:	7812      	ldrb	r2, [r2, #0]
 8014494:	1e10      	subs	r0, r2, #0
 8014496:	bf18      	it	ne
 8014498:	2001      	movne	r0, #1
 801449a:	b002      	add	sp, #8
 801449c:	4770      	bx	lr
 801449e:	4610      	mov	r0, r2
 80144a0:	e7fb      	b.n	801449a <__ascii_mbtowc+0x16>
 80144a2:	f06f 0001 	mvn.w	r0, #1
 80144a6:	e7f8      	b.n	801449a <__ascii_mbtowc+0x16>

080144a8 <_Balloc>:
 80144a8:	b570      	push	{r4, r5, r6, lr}
 80144aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80144ac:	4604      	mov	r4, r0
 80144ae:	460d      	mov	r5, r1
 80144b0:	b976      	cbnz	r6, 80144d0 <_Balloc+0x28>
 80144b2:	2010      	movs	r0, #16
 80144b4:	f7ff ffde 	bl	8014474 <malloc>
 80144b8:	4602      	mov	r2, r0
 80144ba:	6260      	str	r0, [r4, #36]	; 0x24
 80144bc:	b920      	cbnz	r0, 80144c8 <_Balloc+0x20>
 80144be:	4b18      	ldr	r3, [pc, #96]	; (8014520 <_Balloc+0x78>)
 80144c0:	4818      	ldr	r0, [pc, #96]	; (8014524 <_Balloc+0x7c>)
 80144c2:	2166      	movs	r1, #102	; 0x66
 80144c4:	f000 ff7e 	bl	80153c4 <__assert_func>
 80144c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80144cc:	6006      	str	r6, [r0, #0]
 80144ce:	60c6      	str	r6, [r0, #12]
 80144d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80144d2:	68f3      	ldr	r3, [r6, #12]
 80144d4:	b183      	cbz	r3, 80144f8 <_Balloc+0x50>
 80144d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80144d8:	68db      	ldr	r3, [r3, #12]
 80144da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80144de:	b9b8      	cbnz	r0, 8014510 <_Balloc+0x68>
 80144e0:	2101      	movs	r1, #1
 80144e2:	fa01 f605 	lsl.w	r6, r1, r5
 80144e6:	1d72      	adds	r2, r6, #5
 80144e8:	0092      	lsls	r2, r2, #2
 80144ea:	4620      	mov	r0, r4
 80144ec:	f000 fc9d 	bl	8014e2a <_calloc_r>
 80144f0:	b160      	cbz	r0, 801450c <_Balloc+0x64>
 80144f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80144f6:	e00e      	b.n	8014516 <_Balloc+0x6e>
 80144f8:	2221      	movs	r2, #33	; 0x21
 80144fa:	2104      	movs	r1, #4
 80144fc:	4620      	mov	r0, r4
 80144fe:	f000 fc94 	bl	8014e2a <_calloc_r>
 8014502:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014504:	60f0      	str	r0, [r6, #12]
 8014506:	68db      	ldr	r3, [r3, #12]
 8014508:	2b00      	cmp	r3, #0
 801450a:	d1e4      	bne.n	80144d6 <_Balloc+0x2e>
 801450c:	2000      	movs	r0, #0
 801450e:	bd70      	pop	{r4, r5, r6, pc}
 8014510:	6802      	ldr	r2, [r0, #0]
 8014512:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014516:	2300      	movs	r3, #0
 8014518:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801451c:	e7f7      	b.n	801450e <_Balloc+0x66>
 801451e:	bf00      	nop
 8014520:	0801787d 	.word	0x0801787d
 8014524:	0801797c 	.word	0x0801797c

08014528 <_Bfree>:
 8014528:	b570      	push	{r4, r5, r6, lr}
 801452a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801452c:	4605      	mov	r5, r0
 801452e:	460c      	mov	r4, r1
 8014530:	b976      	cbnz	r6, 8014550 <_Bfree+0x28>
 8014532:	2010      	movs	r0, #16
 8014534:	f7ff ff9e 	bl	8014474 <malloc>
 8014538:	4602      	mov	r2, r0
 801453a:	6268      	str	r0, [r5, #36]	; 0x24
 801453c:	b920      	cbnz	r0, 8014548 <_Bfree+0x20>
 801453e:	4b09      	ldr	r3, [pc, #36]	; (8014564 <_Bfree+0x3c>)
 8014540:	4809      	ldr	r0, [pc, #36]	; (8014568 <_Bfree+0x40>)
 8014542:	218a      	movs	r1, #138	; 0x8a
 8014544:	f000 ff3e 	bl	80153c4 <__assert_func>
 8014548:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801454c:	6006      	str	r6, [r0, #0]
 801454e:	60c6      	str	r6, [r0, #12]
 8014550:	b13c      	cbz	r4, 8014562 <_Bfree+0x3a>
 8014552:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014554:	6862      	ldr	r2, [r4, #4]
 8014556:	68db      	ldr	r3, [r3, #12]
 8014558:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801455c:	6021      	str	r1, [r4, #0]
 801455e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014562:	bd70      	pop	{r4, r5, r6, pc}
 8014564:	0801787d 	.word	0x0801787d
 8014568:	0801797c 	.word	0x0801797c

0801456c <__multadd>:
 801456c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014570:	690d      	ldr	r5, [r1, #16]
 8014572:	4607      	mov	r7, r0
 8014574:	460c      	mov	r4, r1
 8014576:	461e      	mov	r6, r3
 8014578:	f101 0c14 	add.w	ip, r1, #20
 801457c:	2000      	movs	r0, #0
 801457e:	f8dc 3000 	ldr.w	r3, [ip]
 8014582:	b299      	uxth	r1, r3
 8014584:	fb02 6101 	mla	r1, r2, r1, r6
 8014588:	0c1e      	lsrs	r6, r3, #16
 801458a:	0c0b      	lsrs	r3, r1, #16
 801458c:	fb02 3306 	mla	r3, r2, r6, r3
 8014590:	b289      	uxth	r1, r1
 8014592:	3001      	adds	r0, #1
 8014594:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014598:	4285      	cmp	r5, r0
 801459a:	f84c 1b04 	str.w	r1, [ip], #4
 801459e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80145a2:	dcec      	bgt.n	801457e <__multadd+0x12>
 80145a4:	b30e      	cbz	r6, 80145ea <__multadd+0x7e>
 80145a6:	68a3      	ldr	r3, [r4, #8]
 80145a8:	42ab      	cmp	r3, r5
 80145aa:	dc19      	bgt.n	80145e0 <__multadd+0x74>
 80145ac:	6861      	ldr	r1, [r4, #4]
 80145ae:	4638      	mov	r0, r7
 80145b0:	3101      	adds	r1, #1
 80145b2:	f7ff ff79 	bl	80144a8 <_Balloc>
 80145b6:	4680      	mov	r8, r0
 80145b8:	b928      	cbnz	r0, 80145c6 <__multadd+0x5a>
 80145ba:	4602      	mov	r2, r0
 80145bc:	4b0c      	ldr	r3, [pc, #48]	; (80145f0 <__multadd+0x84>)
 80145be:	480d      	ldr	r0, [pc, #52]	; (80145f4 <__multadd+0x88>)
 80145c0:	21b5      	movs	r1, #181	; 0xb5
 80145c2:	f000 feff 	bl	80153c4 <__assert_func>
 80145c6:	6922      	ldr	r2, [r4, #16]
 80145c8:	3202      	adds	r2, #2
 80145ca:	f104 010c 	add.w	r1, r4, #12
 80145ce:	0092      	lsls	r2, r2, #2
 80145d0:	300c      	adds	r0, #12
 80145d2:	f7fd f991 	bl	80118f8 <memcpy>
 80145d6:	4621      	mov	r1, r4
 80145d8:	4638      	mov	r0, r7
 80145da:	f7ff ffa5 	bl	8014528 <_Bfree>
 80145de:	4644      	mov	r4, r8
 80145e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80145e4:	3501      	adds	r5, #1
 80145e6:	615e      	str	r6, [r3, #20]
 80145e8:	6125      	str	r5, [r4, #16]
 80145ea:	4620      	mov	r0, r4
 80145ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145f0:	080178ef 	.word	0x080178ef
 80145f4:	0801797c 	.word	0x0801797c

080145f8 <__s2b>:
 80145f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80145fc:	460c      	mov	r4, r1
 80145fe:	4615      	mov	r5, r2
 8014600:	461f      	mov	r7, r3
 8014602:	2209      	movs	r2, #9
 8014604:	3308      	adds	r3, #8
 8014606:	4606      	mov	r6, r0
 8014608:	fb93 f3f2 	sdiv	r3, r3, r2
 801460c:	2100      	movs	r1, #0
 801460e:	2201      	movs	r2, #1
 8014610:	429a      	cmp	r2, r3
 8014612:	db09      	blt.n	8014628 <__s2b+0x30>
 8014614:	4630      	mov	r0, r6
 8014616:	f7ff ff47 	bl	80144a8 <_Balloc>
 801461a:	b940      	cbnz	r0, 801462e <__s2b+0x36>
 801461c:	4602      	mov	r2, r0
 801461e:	4b19      	ldr	r3, [pc, #100]	; (8014684 <__s2b+0x8c>)
 8014620:	4819      	ldr	r0, [pc, #100]	; (8014688 <__s2b+0x90>)
 8014622:	21ce      	movs	r1, #206	; 0xce
 8014624:	f000 fece 	bl	80153c4 <__assert_func>
 8014628:	0052      	lsls	r2, r2, #1
 801462a:	3101      	adds	r1, #1
 801462c:	e7f0      	b.n	8014610 <__s2b+0x18>
 801462e:	9b08      	ldr	r3, [sp, #32]
 8014630:	6143      	str	r3, [r0, #20]
 8014632:	2d09      	cmp	r5, #9
 8014634:	f04f 0301 	mov.w	r3, #1
 8014638:	6103      	str	r3, [r0, #16]
 801463a:	dd16      	ble.n	801466a <__s2b+0x72>
 801463c:	f104 0909 	add.w	r9, r4, #9
 8014640:	46c8      	mov	r8, r9
 8014642:	442c      	add	r4, r5
 8014644:	f818 3b01 	ldrb.w	r3, [r8], #1
 8014648:	4601      	mov	r1, r0
 801464a:	3b30      	subs	r3, #48	; 0x30
 801464c:	220a      	movs	r2, #10
 801464e:	4630      	mov	r0, r6
 8014650:	f7ff ff8c 	bl	801456c <__multadd>
 8014654:	45a0      	cmp	r8, r4
 8014656:	d1f5      	bne.n	8014644 <__s2b+0x4c>
 8014658:	f1a5 0408 	sub.w	r4, r5, #8
 801465c:	444c      	add	r4, r9
 801465e:	1b2d      	subs	r5, r5, r4
 8014660:	1963      	adds	r3, r4, r5
 8014662:	42bb      	cmp	r3, r7
 8014664:	db04      	blt.n	8014670 <__s2b+0x78>
 8014666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801466a:	340a      	adds	r4, #10
 801466c:	2509      	movs	r5, #9
 801466e:	e7f6      	b.n	801465e <__s2b+0x66>
 8014670:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014674:	4601      	mov	r1, r0
 8014676:	3b30      	subs	r3, #48	; 0x30
 8014678:	220a      	movs	r2, #10
 801467a:	4630      	mov	r0, r6
 801467c:	f7ff ff76 	bl	801456c <__multadd>
 8014680:	e7ee      	b.n	8014660 <__s2b+0x68>
 8014682:	bf00      	nop
 8014684:	080178ef 	.word	0x080178ef
 8014688:	0801797c 	.word	0x0801797c

0801468c <__hi0bits>:
 801468c:	0c03      	lsrs	r3, r0, #16
 801468e:	041b      	lsls	r3, r3, #16
 8014690:	b9d3      	cbnz	r3, 80146c8 <__hi0bits+0x3c>
 8014692:	0400      	lsls	r0, r0, #16
 8014694:	2310      	movs	r3, #16
 8014696:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801469a:	bf04      	itt	eq
 801469c:	0200      	lsleq	r0, r0, #8
 801469e:	3308      	addeq	r3, #8
 80146a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80146a4:	bf04      	itt	eq
 80146a6:	0100      	lsleq	r0, r0, #4
 80146a8:	3304      	addeq	r3, #4
 80146aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80146ae:	bf04      	itt	eq
 80146b0:	0080      	lsleq	r0, r0, #2
 80146b2:	3302      	addeq	r3, #2
 80146b4:	2800      	cmp	r0, #0
 80146b6:	db05      	blt.n	80146c4 <__hi0bits+0x38>
 80146b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80146bc:	f103 0301 	add.w	r3, r3, #1
 80146c0:	bf08      	it	eq
 80146c2:	2320      	moveq	r3, #32
 80146c4:	4618      	mov	r0, r3
 80146c6:	4770      	bx	lr
 80146c8:	2300      	movs	r3, #0
 80146ca:	e7e4      	b.n	8014696 <__hi0bits+0xa>

080146cc <__lo0bits>:
 80146cc:	6803      	ldr	r3, [r0, #0]
 80146ce:	f013 0207 	ands.w	r2, r3, #7
 80146d2:	4601      	mov	r1, r0
 80146d4:	d00b      	beq.n	80146ee <__lo0bits+0x22>
 80146d6:	07da      	lsls	r2, r3, #31
 80146d8:	d423      	bmi.n	8014722 <__lo0bits+0x56>
 80146da:	0798      	lsls	r0, r3, #30
 80146dc:	bf49      	itett	mi
 80146de:	085b      	lsrmi	r3, r3, #1
 80146e0:	089b      	lsrpl	r3, r3, #2
 80146e2:	2001      	movmi	r0, #1
 80146e4:	600b      	strmi	r3, [r1, #0]
 80146e6:	bf5c      	itt	pl
 80146e8:	600b      	strpl	r3, [r1, #0]
 80146ea:	2002      	movpl	r0, #2
 80146ec:	4770      	bx	lr
 80146ee:	b298      	uxth	r0, r3
 80146f0:	b9a8      	cbnz	r0, 801471e <__lo0bits+0x52>
 80146f2:	0c1b      	lsrs	r3, r3, #16
 80146f4:	2010      	movs	r0, #16
 80146f6:	b2da      	uxtb	r2, r3
 80146f8:	b90a      	cbnz	r2, 80146fe <__lo0bits+0x32>
 80146fa:	3008      	adds	r0, #8
 80146fc:	0a1b      	lsrs	r3, r3, #8
 80146fe:	071a      	lsls	r2, r3, #28
 8014700:	bf04      	itt	eq
 8014702:	091b      	lsreq	r3, r3, #4
 8014704:	3004      	addeq	r0, #4
 8014706:	079a      	lsls	r2, r3, #30
 8014708:	bf04      	itt	eq
 801470a:	089b      	lsreq	r3, r3, #2
 801470c:	3002      	addeq	r0, #2
 801470e:	07da      	lsls	r2, r3, #31
 8014710:	d403      	bmi.n	801471a <__lo0bits+0x4e>
 8014712:	085b      	lsrs	r3, r3, #1
 8014714:	f100 0001 	add.w	r0, r0, #1
 8014718:	d005      	beq.n	8014726 <__lo0bits+0x5a>
 801471a:	600b      	str	r3, [r1, #0]
 801471c:	4770      	bx	lr
 801471e:	4610      	mov	r0, r2
 8014720:	e7e9      	b.n	80146f6 <__lo0bits+0x2a>
 8014722:	2000      	movs	r0, #0
 8014724:	4770      	bx	lr
 8014726:	2020      	movs	r0, #32
 8014728:	4770      	bx	lr
	...

0801472c <__i2b>:
 801472c:	b510      	push	{r4, lr}
 801472e:	460c      	mov	r4, r1
 8014730:	2101      	movs	r1, #1
 8014732:	f7ff feb9 	bl	80144a8 <_Balloc>
 8014736:	4602      	mov	r2, r0
 8014738:	b928      	cbnz	r0, 8014746 <__i2b+0x1a>
 801473a:	4b05      	ldr	r3, [pc, #20]	; (8014750 <__i2b+0x24>)
 801473c:	4805      	ldr	r0, [pc, #20]	; (8014754 <__i2b+0x28>)
 801473e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8014742:	f000 fe3f 	bl	80153c4 <__assert_func>
 8014746:	2301      	movs	r3, #1
 8014748:	6144      	str	r4, [r0, #20]
 801474a:	6103      	str	r3, [r0, #16]
 801474c:	bd10      	pop	{r4, pc}
 801474e:	bf00      	nop
 8014750:	080178ef 	.word	0x080178ef
 8014754:	0801797c 	.word	0x0801797c

08014758 <__multiply>:
 8014758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801475c:	4691      	mov	r9, r2
 801475e:	690a      	ldr	r2, [r1, #16]
 8014760:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014764:	429a      	cmp	r2, r3
 8014766:	bfb8      	it	lt
 8014768:	460b      	movlt	r3, r1
 801476a:	460c      	mov	r4, r1
 801476c:	bfbc      	itt	lt
 801476e:	464c      	movlt	r4, r9
 8014770:	4699      	movlt	r9, r3
 8014772:	6927      	ldr	r7, [r4, #16]
 8014774:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014778:	68a3      	ldr	r3, [r4, #8]
 801477a:	6861      	ldr	r1, [r4, #4]
 801477c:	eb07 060a 	add.w	r6, r7, sl
 8014780:	42b3      	cmp	r3, r6
 8014782:	b085      	sub	sp, #20
 8014784:	bfb8      	it	lt
 8014786:	3101      	addlt	r1, #1
 8014788:	f7ff fe8e 	bl	80144a8 <_Balloc>
 801478c:	b930      	cbnz	r0, 801479c <__multiply+0x44>
 801478e:	4602      	mov	r2, r0
 8014790:	4b44      	ldr	r3, [pc, #272]	; (80148a4 <__multiply+0x14c>)
 8014792:	4845      	ldr	r0, [pc, #276]	; (80148a8 <__multiply+0x150>)
 8014794:	f240 115d 	movw	r1, #349	; 0x15d
 8014798:	f000 fe14 	bl	80153c4 <__assert_func>
 801479c:	f100 0514 	add.w	r5, r0, #20
 80147a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80147a4:	462b      	mov	r3, r5
 80147a6:	2200      	movs	r2, #0
 80147a8:	4543      	cmp	r3, r8
 80147aa:	d321      	bcc.n	80147f0 <__multiply+0x98>
 80147ac:	f104 0314 	add.w	r3, r4, #20
 80147b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80147b4:	f109 0314 	add.w	r3, r9, #20
 80147b8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80147bc:	9202      	str	r2, [sp, #8]
 80147be:	1b3a      	subs	r2, r7, r4
 80147c0:	3a15      	subs	r2, #21
 80147c2:	f022 0203 	bic.w	r2, r2, #3
 80147c6:	3204      	adds	r2, #4
 80147c8:	f104 0115 	add.w	r1, r4, #21
 80147cc:	428f      	cmp	r7, r1
 80147ce:	bf38      	it	cc
 80147d0:	2204      	movcc	r2, #4
 80147d2:	9201      	str	r2, [sp, #4]
 80147d4:	9a02      	ldr	r2, [sp, #8]
 80147d6:	9303      	str	r3, [sp, #12]
 80147d8:	429a      	cmp	r2, r3
 80147da:	d80c      	bhi.n	80147f6 <__multiply+0x9e>
 80147dc:	2e00      	cmp	r6, #0
 80147de:	dd03      	ble.n	80147e8 <__multiply+0x90>
 80147e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d05a      	beq.n	801489e <__multiply+0x146>
 80147e8:	6106      	str	r6, [r0, #16]
 80147ea:	b005      	add	sp, #20
 80147ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147f0:	f843 2b04 	str.w	r2, [r3], #4
 80147f4:	e7d8      	b.n	80147a8 <__multiply+0x50>
 80147f6:	f8b3 a000 	ldrh.w	sl, [r3]
 80147fa:	f1ba 0f00 	cmp.w	sl, #0
 80147fe:	d024      	beq.n	801484a <__multiply+0xf2>
 8014800:	f104 0e14 	add.w	lr, r4, #20
 8014804:	46a9      	mov	r9, r5
 8014806:	f04f 0c00 	mov.w	ip, #0
 801480a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801480e:	f8d9 1000 	ldr.w	r1, [r9]
 8014812:	fa1f fb82 	uxth.w	fp, r2
 8014816:	b289      	uxth	r1, r1
 8014818:	fb0a 110b 	mla	r1, sl, fp, r1
 801481c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8014820:	f8d9 2000 	ldr.w	r2, [r9]
 8014824:	4461      	add	r1, ip
 8014826:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801482a:	fb0a c20b 	mla	r2, sl, fp, ip
 801482e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8014832:	b289      	uxth	r1, r1
 8014834:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014838:	4577      	cmp	r7, lr
 801483a:	f849 1b04 	str.w	r1, [r9], #4
 801483e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014842:	d8e2      	bhi.n	801480a <__multiply+0xb2>
 8014844:	9a01      	ldr	r2, [sp, #4]
 8014846:	f845 c002 	str.w	ip, [r5, r2]
 801484a:	9a03      	ldr	r2, [sp, #12]
 801484c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014850:	3304      	adds	r3, #4
 8014852:	f1b9 0f00 	cmp.w	r9, #0
 8014856:	d020      	beq.n	801489a <__multiply+0x142>
 8014858:	6829      	ldr	r1, [r5, #0]
 801485a:	f104 0c14 	add.w	ip, r4, #20
 801485e:	46ae      	mov	lr, r5
 8014860:	f04f 0a00 	mov.w	sl, #0
 8014864:	f8bc b000 	ldrh.w	fp, [ip]
 8014868:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801486c:	fb09 220b 	mla	r2, r9, fp, r2
 8014870:	4492      	add	sl, r2
 8014872:	b289      	uxth	r1, r1
 8014874:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8014878:	f84e 1b04 	str.w	r1, [lr], #4
 801487c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8014880:	f8be 1000 	ldrh.w	r1, [lr]
 8014884:	0c12      	lsrs	r2, r2, #16
 8014886:	fb09 1102 	mla	r1, r9, r2, r1
 801488a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801488e:	4567      	cmp	r7, ip
 8014890:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014894:	d8e6      	bhi.n	8014864 <__multiply+0x10c>
 8014896:	9a01      	ldr	r2, [sp, #4]
 8014898:	50a9      	str	r1, [r5, r2]
 801489a:	3504      	adds	r5, #4
 801489c:	e79a      	b.n	80147d4 <__multiply+0x7c>
 801489e:	3e01      	subs	r6, #1
 80148a0:	e79c      	b.n	80147dc <__multiply+0x84>
 80148a2:	bf00      	nop
 80148a4:	080178ef 	.word	0x080178ef
 80148a8:	0801797c 	.word	0x0801797c

080148ac <__pow5mult>:
 80148ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80148b0:	4615      	mov	r5, r2
 80148b2:	f012 0203 	ands.w	r2, r2, #3
 80148b6:	4606      	mov	r6, r0
 80148b8:	460f      	mov	r7, r1
 80148ba:	d007      	beq.n	80148cc <__pow5mult+0x20>
 80148bc:	4c25      	ldr	r4, [pc, #148]	; (8014954 <__pow5mult+0xa8>)
 80148be:	3a01      	subs	r2, #1
 80148c0:	2300      	movs	r3, #0
 80148c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80148c6:	f7ff fe51 	bl	801456c <__multadd>
 80148ca:	4607      	mov	r7, r0
 80148cc:	10ad      	asrs	r5, r5, #2
 80148ce:	d03d      	beq.n	801494c <__pow5mult+0xa0>
 80148d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80148d2:	b97c      	cbnz	r4, 80148f4 <__pow5mult+0x48>
 80148d4:	2010      	movs	r0, #16
 80148d6:	f7ff fdcd 	bl	8014474 <malloc>
 80148da:	4602      	mov	r2, r0
 80148dc:	6270      	str	r0, [r6, #36]	; 0x24
 80148de:	b928      	cbnz	r0, 80148ec <__pow5mult+0x40>
 80148e0:	4b1d      	ldr	r3, [pc, #116]	; (8014958 <__pow5mult+0xac>)
 80148e2:	481e      	ldr	r0, [pc, #120]	; (801495c <__pow5mult+0xb0>)
 80148e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80148e8:	f000 fd6c 	bl	80153c4 <__assert_func>
 80148ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80148f0:	6004      	str	r4, [r0, #0]
 80148f2:	60c4      	str	r4, [r0, #12]
 80148f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80148f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80148fc:	b94c      	cbnz	r4, 8014912 <__pow5mult+0x66>
 80148fe:	f240 2171 	movw	r1, #625	; 0x271
 8014902:	4630      	mov	r0, r6
 8014904:	f7ff ff12 	bl	801472c <__i2b>
 8014908:	2300      	movs	r3, #0
 801490a:	f8c8 0008 	str.w	r0, [r8, #8]
 801490e:	4604      	mov	r4, r0
 8014910:	6003      	str	r3, [r0, #0]
 8014912:	f04f 0900 	mov.w	r9, #0
 8014916:	07eb      	lsls	r3, r5, #31
 8014918:	d50a      	bpl.n	8014930 <__pow5mult+0x84>
 801491a:	4639      	mov	r1, r7
 801491c:	4622      	mov	r2, r4
 801491e:	4630      	mov	r0, r6
 8014920:	f7ff ff1a 	bl	8014758 <__multiply>
 8014924:	4639      	mov	r1, r7
 8014926:	4680      	mov	r8, r0
 8014928:	4630      	mov	r0, r6
 801492a:	f7ff fdfd 	bl	8014528 <_Bfree>
 801492e:	4647      	mov	r7, r8
 8014930:	106d      	asrs	r5, r5, #1
 8014932:	d00b      	beq.n	801494c <__pow5mult+0xa0>
 8014934:	6820      	ldr	r0, [r4, #0]
 8014936:	b938      	cbnz	r0, 8014948 <__pow5mult+0x9c>
 8014938:	4622      	mov	r2, r4
 801493a:	4621      	mov	r1, r4
 801493c:	4630      	mov	r0, r6
 801493e:	f7ff ff0b 	bl	8014758 <__multiply>
 8014942:	6020      	str	r0, [r4, #0]
 8014944:	f8c0 9000 	str.w	r9, [r0]
 8014948:	4604      	mov	r4, r0
 801494a:	e7e4      	b.n	8014916 <__pow5mult+0x6a>
 801494c:	4638      	mov	r0, r7
 801494e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014952:	bf00      	nop
 8014954:	08017ac8 	.word	0x08017ac8
 8014958:	0801787d 	.word	0x0801787d
 801495c:	0801797c 	.word	0x0801797c

08014960 <__lshift>:
 8014960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014964:	460c      	mov	r4, r1
 8014966:	6849      	ldr	r1, [r1, #4]
 8014968:	6923      	ldr	r3, [r4, #16]
 801496a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801496e:	68a3      	ldr	r3, [r4, #8]
 8014970:	4607      	mov	r7, r0
 8014972:	4691      	mov	r9, r2
 8014974:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014978:	f108 0601 	add.w	r6, r8, #1
 801497c:	42b3      	cmp	r3, r6
 801497e:	db0b      	blt.n	8014998 <__lshift+0x38>
 8014980:	4638      	mov	r0, r7
 8014982:	f7ff fd91 	bl	80144a8 <_Balloc>
 8014986:	4605      	mov	r5, r0
 8014988:	b948      	cbnz	r0, 801499e <__lshift+0x3e>
 801498a:	4602      	mov	r2, r0
 801498c:	4b2a      	ldr	r3, [pc, #168]	; (8014a38 <__lshift+0xd8>)
 801498e:	482b      	ldr	r0, [pc, #172]	; (8014a3c <__lshift+0xdc>)
 8014990:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014994:	f000 fd16 	bl	80153c4 <__assert_func>
 8014998:	3101      	adds	r1, #1
 801499a:	005b      	lsls	r3, r3, #1
 801499c:	e7ee      	b.n	801497c <__lshift+0x1c>
 801499e:	2300      	movs	r3, #0
 80149a0:	f100 0114 	add.w	r1, r0, #20
 80149a4:	f100 0210 	add.w	r2, r0, #16
 80149a8:	4618      	mov	r0, r3
 80149aa:	4553      	cmp	r3, sl
 80149ac:	db37      	blt.n	8014a1e <__lshift+0xbe>
 80149ae:	6920      	ldr	r0, [r4, #16]
 80149b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80149b4:	f104 0314 	add.w	r3, r4, #20
 80149b8:	f019 091f 	ands.w	r9, r9, #31
 80149bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80149c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80149c4:	d02f      	beq.n	8014a26 <__lshift+0xc6>
 80149c6:	f1c9 0e20 	rsb	lr, r9, #32
 80149ca:	468a      	mov	sl, r1
 80149cc:	f04f 0c00 	mov.w	ip, #0
 80149d0:	681a      	ldr	r2, [r3, #0]
 80149d2:	fa02 f209 	lsl.w	r2, r2, r9
 80149d6:	ea42 020c 	orr.w	r2, r2, ip
 80149da:	f84a 2b04 	str.w	r2, [sl], #4
 80149de:	f853 2b04 	ldr.w	r2, [r3], #4
 80149e2:	4298      	cmp	r0, r3
 80149e4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80149e8:	d8f2      	bhi.n	80149d0 <__lshift+0x70>
 80149ea:	1b03      	subs	r3, r0, r4
 80149ec:	3b15      	subs	r3, #21
 80149ee:	f023 0303 	bic.w	r3, r3, #3
 80149f2:	3304      	adds	r3, #4
 80149f4:	f104 0215 	add.w	r2, r4, #21
 80149f8:	4290      	cmp	r0, r2
 80149fa:	bf38      	it	cc
 80149fc:	2304      	movcc	r3, #4
 80149fe:	f841 c003 	str.w	ip, [r1, r3]
 8014a02:	f1bc 0f00 	cmp.w	ip, #0
 8014a06:	d001      	beq.n	8014a0c <__lshift+0xac>
 8014a08:	f108 0602 	add.w	r6, r8, #2
 8014a0c:	3e01      	subs	r6, #1
 8014a0e:	4638      	mov	r0, r7
 8014a10:	612e      	str	r6, [r5, #16]
 8014a12:	4621      	mov	r1, r4
 8014a14:	f7ff fd88 	bl	8014528 <_Bfree>
 8014a18:	4628      	mov	r0, r5
 8014a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a1e:	f842 0f04 	str.w	r0, [r2, #4]!
 8014a22:	3301      	adds	r3, #1
 8014a24:	e7c1      	b.n	80149aa <__lshift+0x4a>
 8014a26:	3904      	subs	r1, #4
 8014a28:	f853 2b04 	ldr.w	r2, [r3], #4
 8014a2c:	f841 2f04 	str.w	r2, [r1, #4]!
 8014a30:	4298      	cmp	r0, r3
 8014a32:	d8f9      	bhi.n	8014a28 <__lshift+0xc8>
 8014a34:	e7ea      	b.n	8014a0c <__lshift+0xac>
 8014a36:	bf00      	nop
 8014a38:	080178ef 	.word	0x080178ef
 8014a3c:	0801797c 	.word	0x0801797c

08014a40 <__mcmp>:
 8014a40:	b530      	push	{r4, r5, lr}
 8014a42:	6902      	ldr	r2, [r0, #16]
 8014a44:	690c      	ldr	r4, [r1, #16]
 8014a46:	1b12      	subs	r2, r2, r4
 8014a48:	d10e      	bne.n	8014a68 <__mcmp+0x28>
 8014a4a:	f100 0314 	add.w	r3, r0, #20
 8014a4e:	3114      	adds	r1, #20
 8014a50:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014a54:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014a58:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014a5c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014a60:	42a5      	cmp	r5, r4
 8014a62:	d003      	beq.n	8014a6c <__mcmp+0x2c>
 8014a64:	d305      	bcc.n	8014a72 <__mcmp+0x32>
 8014a66:	2201      	movs	r2, #1
 8014a68:	4610      	mov	r0, r2
 8014a6a:	bd30      	pop	{r4, r5, pc}
 8014a6c:	4283      	cmp	r3, r0
 8014a6e:	d3f3      	bcc.n	8014a58 <__mcmp+0x18>
 8014a70:	e7fa      	b.n	8014a68 <__mcmp+0x28>
 8014a72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014a76:	e7f7      	b.n	8014a68 <__mcmp+0x28>

08014a78 <__mdiff>:
 8014a78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a7c:	460c      	mov	r4, r1
 8014a7e:	4606      	mov	r6, r0
 8014a80:	4611      	mov	r1, r2
 8014a82:	4620      	mov	r0, r4
 8014a84:	4690      	mov	r8, r2
 8014a86:	f7ff ffdb 	bl	8014a40 <__mcmp>
 8014a8a:	1e05      	subs	r5, r0, #0
 8014a8c:	d110      	bne.n	8014ab0 <__mdiff+0x38>
 8014a8e:	4629      	mov	r1, r5
 8014a90:	4630      	mov	r0, r6
 8014a92:	f7ff fd09 	bl	80144a8 <_Balloc>
 8014a96:	b930      	cbnz	r0, 8014aa6 <__mdiff+0x2e>
 8014a98:	4b3a      	ldr	r3, [pc, #232]	; (8014b84 <__mdiff+0x10c>)
 8014a9a:	4602      	mov	r2, r0
 8014a9c:	f240 2132 	movw	r1, #562	; 0x232
 8014aa0:	4839      	ldr	r0, [pc, #228]	; (8014b88 <__mdiff+0x110>)
 8014aa2:	f000 fc8f 	bl	80153c4 <__assert_func>
 8014aa6:	2301      	movs	r3, #1
 8014aa8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014aac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ab0:	bfa4      	itt	ge
 8014ab2:	4643      	movge	r3, r8
 8014ab4:	46a0      	movge	r8, r4
 8014ab6:	4630      	mov	r0, r6
 8014ab8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014abc:	bfa6      	itte	ge
 8014abe:	461c      	movge	r4, r3
 8014ac0:	2500      	movge	r5, #0
 8014ac2:	2501      	movlt	r5, #1
 8014ac4:	f7ff fcf0 	bl	80144a8 <_Balloc>
 8014ac8:	b920      	cbnz	r0, 8014ad4 <__mdiff+0x5c>
 8014aca:	4b2e      	ldr	r3, [pc, #184]	; (8014b84 <__mdiff+0x10c>)
 8014acc:	4602      	mov	r2, r0
 8014ace:	f44f 7110 	mov.w	r1, #576	; 0x240
 8014ad2:	e7e5      	b.n	8014aa0 <__mdiff+0x28>
 8014ad4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014ad8:	6926      	ldr	r6, [r4, #16]
 8014ada:	60c5      	str	r5, [r0, #12]
 8014adc:	f104 0914 	add.w	r9, r4, #20
 8014ae0:	f108 0514 	add.w	r5, r8, #20
 8014ae4:	f100 0e14 	add.w	lr, r0, #20
 8014ae8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8014aec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014af0:	f108 0210 	add.w	r2, r8, #16
 8014af4:	46f2      	mov	sl, lr
 8014af6:	2100      	movs	r1, #0
 8014af8:	f859 3b04 	ldr.w	r3, [r9], #4
 8014afc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014b00:	fa1f f883 	uxth.w	r8, r3
 8014b04:	fa11 f18b 	uxtah	r1, r1, fp
 8014b08:	0c1b      	lsrs	r3, r3, #16
 8014b0a:	eba1 0808 	sub.w	r8, r1, r8
 8014b0e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014b12:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8014b16:	fa1f f888 	uxth.w	r8, r8
 8014b1a:	1419      	asrs	r1, r3, #16
 8014b1c:	454e      	cmp	r6, r9
 8014b1e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014b22:	f84a 3b04 	str.w	r3, [sl], #4
 8014b26:	d8e7      	bhi.n	8014af8 <__mdiff+0x80>
 8014b28:	1b33      	subs	r3, r6, r4
 8014b2a:	3b15      	subs	r3, #21
 8014b2c:	f023 0303 	bic.w	r3, r3, #3
 8014b30:	3304      	adds	r3, #4
 8014b32:	3415      	adds	r4, #21
 8014b34:	42a6      	cmp	r6, r4
 8014b36:	bf38      	it	cc
 8014b38:	2304      	movcc	r3, #4
 8014b3a:	441d      	add	r5, r3
 8014b3c:	4473      	add	r3, lr
 8014b3e:	469e      	mov	lr, r3
 8014b40:	462e      	mov	r6, r5
 8014b42:	4566      	cmp	r6, ip
 8014b44:	d30e      	bcc.n	8014b64 <__mdiff+0xec>
 8014b46:	f10c 0203 	add.w	r2, ip, #3
 8014b4a:	1b52      	subs	r2, r2, r5
 8014b4c:	f022 0203 	bic.w	r2, r2, #3
 8014b50:	3d03      	subs	r5, #3
 8014b52:	45ac      	cmp	ip, r5
 8014b54:	bf38      	it	cc
 8014b56:	2200      	movcc	r2, #0
 8014b58:	441a      	add	r2, r3
 8014b5a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8014b5e:	b17b      	cbz	r3, 8014b80 <__mdiff+0x108>
 8014b60:	6107      	str	r7, [r0, #16]
 8014b62:	e7a3      	b.n	8014aac <__mdiff+0x34>
 8014b64:	f856 8b04 	ldr.w	r8, [r6], #4
 8014b68:	fa11 f288 	uxtah	r2, r1, r8
 8014b6c:	1414      	asrs	r4, r2, #16
 8014b6e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8014b72:	b292      	uxth	r2, r2
 8014b74:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8014b78:	f84e 2b04 	str.w	r2, [lr], #4
 8014b7c:	1421      	asrs	r1, r4, #16
 8014b7e:	e7e0      	b.n	8014b42 <__mdiff+0xca>
 8014b80:	3f01      	subs	r7, #1
 8014b82:	e7ea      	b.n	8014b5a <__mdiff+0xe2>
 8014b84:	080178ef 	.word	0x080178ef
 8014b88:	0801797c 	.word	0x0801797c

08014b8c <__ulp>:
 8014b8c:	b082      	sub	sp, #8
 8014b8e:	ed8d 0b00 	vstr	d0, [sp]
 8014b92:	9b01      	ldr	r3, [sp, #4]
 8014b94:	4912      	ldr	r1, [pc, #72]	; (8014be0 <__ulp+0x54>)
 8014b96:	4019      	ands	r1, r3
 8014b98:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8014b9c:	2900      	cmp	r1, #0
 8014b9e:	dd05      	ble.n	8014bac <__ulp+0x20>
 8014ba0:	2200      	movs	r2, #0
 8014ba2:	460b      	mov	r3, r1
 8014ba4:	ec43 2b10 	vmov	d0, r2, r3
 8014ba8:	b002      	add	sp, #8
 8014baa:	4770      	bx	lr
 8014bac:	4249      	negs	r1, r1
 8014bae:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8014bb2:	ea4f 5021 	mov.w	r0, r1, asr #20
 8014bb6:	f04f 0200 	mov.w	r2, #0
 8014bba:	f04f 0300 	mov.w	r3, #0
 8014bbe:	da04      	bge.n	8014bca <__ulp+0x3e>
 8014bc0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8014bc4:	fa41 f300 	asr.w	r3, r1, r0
 8014bc8:	e7ec      	b.n	8014ba4 <__ulp+0x18>
 8014bca:	f1a0 0114 	sub.w	r1, r0, #20
 8014bce:	291e      	cmp	r1, #30
 8014bd0:	bfda      	itte	le
 8014bd2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8014bd6:	fa20 f101 	lsrle.w	r1, r0, r1
 8014bda:	2101      	movgt	r1, #1
 8014bdc:	460a      	mov	r2, r1
 8014bde:	e7e1      	b.n	8014ba4 <__ulp+0x18>
 8014be0:	7ff00000 	.word	0x7ff00000

08014be4 <__b2d>:
 8014be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014be6:	6905      	ldr	r5, [r0, #16]
 8014be8:	f100 0714 	add.w	r7, r0, #20
 8014bec:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8014bf0:	1f2e      	subs	r6, r5, #4
 8014bf2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8014bf6:	4620      	mov	r0, r4
 8014bf8:	f7ff fd48 	bl	801468c <__hi0bits>
 8014bfc:	f1c0 0320 	rsb	r3, r0, #32
 8014c00:	280a      	cmp	r0, #10
 8014c02:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8014c80 <__b2d+0x9c>
 8014c06:	600b      	str	r3, [r1, #0]
 8014c08:	dc14      	bgt.n	8014c34 <__b2d+0x50>
 8014c0a:	f1c0 0e0b 	rsb	lr, r0, #11
 8014c0e:	fa24 f10e 	lsr.w	r1, r4, lr
 8014c12:	42b7      	cmp	r7, r6
 8014c14:	ea41 030c 	orr.w	r3, r1, ip
 8014c18:	bf34      	ite	cc
 8014c1a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8014c1e:	2100      	movcs	r1, #0
 8014c20:	3015      	adds	r0, #21
 8014c22:	fa04 f000 	lsl.w	r0, r4, r0
 8014c26:	fa21 f10e 	lsr.w	r1, r1, lr
 8014c2a:	ea40 0201 	orr.w	r2, r0, r1
 8014c2e:	ec43 2b10 	vmov	d0, r2, r3
 8014c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c34:	42b7      	cmp	r7, r6
 8014c36:	bf3a      	itte	cc
 8014c38:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8014c3c:	f1a5 0608 	subcc.w	r6, r5, #8
 8014c40:	2100      	movcs	r1, #0
 8014c42:	380b      	subs	r0, #11
 8014c44:	d017      	beq.n	8014c76 <__b2d+0x92>
 8014c46:	f1c0 0c20 	rsb	ip, r0, #32
 8014c4a:	fa04 f500 	lsl.w	r5, r4, r0
 8014c4e:	42be      	cmp	r6, r7
 8014c50:	fa21 f40c 	lsr.w	r4, r1, ip
 8014c54:	ea45 0504 	orr.w	r5, r5, r4
 8014c58:	bf8c      	ite	hi
 8014c5a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8014c5e:	2400      	movls	r4, #0
 8014c60:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8014c64:	fa01 f000 	lsl.w	r0, r1, r0
 8014c68:	fa24 f40c 	lsr.w	r4, r4, ip
 8014c6c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8014c70:	ea40 0204 	orr.w	r2, r0, r4
 8014c74:	e7db      	b.n	8014c2e <__b2d+0x4a>
 8014c76:	ea44 030c 	orr.w	r3, r4, ip
 8014c7a:	460a      	mov	r2, r1
 8014c7c:	e7d7      	b.n	8014c2e <__b2d+0x4a>
 8014c7e:	bf00      	nop
 8014c80:	3ff00000 	.word	0x3ff00000

08014c84 <__d2b>:
 8014c84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014c88:	4689      	mov	r9, r1
 8014c8a:	2101      	movs	r1, #1
 8014c8c:	ec57 6b10 	vmov	r6, r7, d0
 8014c90:	4690      	mov	r8, r2
 8014c92:	f7ff fc09 	bl	80144a8 <_Balloc>
 8014c96:	4604      	mov	r4, r0
 8014c98:	b930      	cbnz	r0, 8014ca8 <__d2b+0x24>
 8014c9a:	4602      	mov	r2, r0
 8014c9c:	4b25      	ldr	r3, [pc, #148]	; (8014d34 <__d2b+0xb0>)
 8014c9e:	4826      	ldr	r0, [pc, #152]	; (8014d38 <__d2b+0xb4>)
 8014ca0:	f240 310a 	movw	r1, #778	; 0x30a
 8014ca4:	f000 fb8e 	bl	80153c4 <__assert_func>
 8014ca8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8014cac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014cb0:	bb35      	cbnz	r5, 8014d00 <__d2b+0x7c>
 8014cb2:	2e00      	cmp	r6, #0
 8014cb4:	9301      	str	r3, [sp, #4]
 8014cb6:	d028      	beq.n	8014d0a <__d2b+0x86>
 8014cb8:	4668      	mov	r0, sp
 8014cba:	9600      	str	r6, [sp, #0]
 8014cbc:	f7ff fd06 	bl	80146cc <__lo0bits>
 8014cc0:	9900      	ldr	r1, [sp, #0]
 8014cc2:	b300      	cbz	r0, 8014d06 <__d2b+0x82>
 8014cc4:	9a01      	ldr	r2, [sp, #4]
 8014cc6:	f1c0 0320 	rsb	r3, r0, #32
 8014cca:	fa02 f303 	lsl.w	r3, r2, r3
 8014cce:	430b      	orrs	r3, r1
 8014cd0:	40c2      	lsrs	r2, r0
 8014cd2:	6163      	str	r3, [r4, #20]
 8014cd4:	9201      	str	r2, [sp, #4]
 8014cd6:	9b01      	ldr	r3, [sp, #4]
 8014cd8:	61a3      	str	r3, [r4, #24]
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	bf14      	ite	ne
 8014cde:	2202      	movne	r2, #2
 8014ce0:	2201      	moveq	r2, #1
 8014ce2:	6122      	str	r2, [r4, #16]
 8014ce4:	b1d5      	cbz	r5, 8014d1c <__d2b+0x98>
 8014ce6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014cea:	4405      	add	r5, r0
 8014cec:	f8c9 5000 	str.w	r5, [r9]
 8014cf0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014cf4:	f8c8 0000 	str.w	r0, [r8]
 8014cf8:	4620      	mov	r0, r4
 8014cfa:	b003      	add	sp, #12
 8014cfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014d00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014d04:	e7d5      	b.n	8014cb2 <__d2b+0x2e>
 8014d06:	6161      	str	r1, [r4, #20]
 8014d08:	e7e5      	b.n	8014cd6 <__d2b+0x52>
 8014d0a:	a801      	add	r0, sp, #4
 8014d0c:	f7ff fcde 	bl	80146cc <__lo0bits>
 8014d10:	9b01      	ldr	r3, [sp, #4]
 8014d12:	6163      	str	r3, [r4, #20]
 8014d14:	2201      	movs	r2, #1
 8014d16:	6122      	str	r2, [r4, #16]
 8014d18:	3020      	adds	r0, #32
 8014d1a:	e7e3      	b.n	8014ce4 <__d2b+0x60>
 8014d1c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014d20:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014d24:	f8c9 0000 	str.w	r0, [r9]
 8014d28:	6918      	ldr	r0, [r3, #16]
 8014d2a:	f7ff fcaf 	bl	801468c <__hi0bits>
 8014d2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014d32:	e7df      	b.n	8014cf4 <__d2b+0x70>
 8014d34:	080178ef 	.word	0x080178ef
 8014d38:	0801797c 	.word	0x0801797c

08014d3c <__ratio>:
 8014d3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d40:	4688      	mov	r8, r1
 8014d42:	4669      	mov	r1, sp
 8014d44:	4681      	mov	r9, r0
 8014d46:	f7ff ff4d 	bl	8014be4 <__b2d>
 8014d4a:	a901      	add	r1, sp, #4
 8014d4c:	4640      	mov	r0, r8
 8014d4e:	ec55 4b10 	vmov	r4, r5, d0
 8014d52:	f7ff ff47 	bl	8014be4 <__b2d>
 8014d56:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014d5a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8014d5e:	eba3 0c02 	sub.w	ip, r3, r2
 8014d62:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014d66:	1a9b      	subs	r3, r3, r2
 8014d68:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8014d6c:	ec51 0b10 	vmov	r0, r1, d0
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	bfd6      	itet	le
 8014d74:	460a      	movle	r2, r1
 8014d76:	462a      	movgt	r2, r5
 8014d78:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8014d7c:	468b      	mov	fp, r1
 8014d7e:	462f      	mov	r7, r5
 8014d80:	bfd4      	ite	le
 8014d82:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8014d86:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8014d8a:	4620      	mov	r0, r4
 8014d8c:	ee10 2a10 	vmov	r2, s0
 8014d90:	465b      	mov	r3, fp
 8014d92:	4639      	mov	r1, r7
 8014d94:	f7eb fd5a 	bl	800084c <__aeabi_ddiv>
 8014d98:	ec41 0b10 	vmov	d0, r0, r1
 8014d9c:	b003      	add	sp, #12
 8014d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014da2 <__copybits>:
 8014da2:	3901      	subs	r1, #1
 8014da4:	b570      	push	{r4, r5, r6, lr}
 8014da6:	1149      	asrs	r1, r1, #5
 8014da8:	6914      	ldr	r4, [r2, #16]
 8014daa:	3101      	adds	r1, #1
 8014dac:	f102 0314 	add.w	r3, r2, #20
 8014db0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014db4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014db8:	1f05      	subs	r5, r0, #4
 8014dba:	42a3      	cmp	r3, r4
 8014dbc:	d30c      	bcc.n	8014dd8 <__copybits+0x36>
 8014dbe:	1aa3      	subs	r3, r4, r2
 8014dc0:	3b11      	subs	r3, #17
 8014dc2:	f023 0303 	bic.w	r3, r3, #3
 8014dc6:	3211      	adds	r2, #17
 8014dc8:	42a2      	cmp	r2, r4
 8014dca:	bf88      	it	hi
 8014dcc:	2300      	movhi	r3, #0
 8014dce:	4418      	add	r0, r3
 8014dd0:	2300      	movs	r3, #0
 8014dd2:	4288      	cmp	r0, r1
 8014dd4:	d305      	bcc.n	8014de2 <__copybits+0x40>
 8014dd6:	bd70      	pop	{r4, r5, r6, pc}
 8014dd8:	f853 6b04 	ldr.w	r6, [r3], #4
 8014ddc:	f845 6f04 	str.w	r6, [r5, #4]!
 8014de0:	e7eb      	b.n	8014dba <__copybits+0x18>
 8014de2:	f840 3b04 	str.w	r3, [r0], #4
 8014de6:	e7f4      	b.n	8014dd2 <__copybits+0x30>

08014de8 <__any_on>:
 8014de8:	f100 0214 	add.w	r2, r0, #20
 8014dec:	6900      	ldr	r0, [r0, #16]
 8014dee:	114b      	asrs	r3, r1, #5
 8014df0:	4298      	cmp	r0, r3
 8014df2:	b510      	push	{r4, lr}
 8014df4:	db11      	blt.n	8014e1a <__any_on+0x32>
 8014df6:	dd0a      	ble.n	8014e0e <__any_on+0x26>
 8014df8:	f011 011f 	ands.w	r1, r1, #31
 8014dfc:	d007      	beq.n	8014e0e <__any_on+0x26>
 8014dfe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014e02:	fa24 f001 	lsr.w	r0, r4, r1
 8014e06:	fa00 f101 	lsl.w	r1, r0, r1
 8014e0a:	428c      	cmp	r4, r1
 8014e0c:	d10b      	bne.n	8014e26 <__any_on+0x3e>
 8014e0e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014e12:	4293      	cmp	r3, r2
 8014e14:	d803      	bhi.n	8014e1e <__any_on+0x36>
 8014e16:	2000      	movs	r0, #0
 8014e18:	bd10      	pop	{r4, pc}
 8014e1a:	4603      	mov	r3, r0
 8014e1c:	e7f7      	b.n	8014e0e <__any_on+0x26>
 8014e1e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014e22:	2900      	cmp	r1, #0
 8014e24:	d0f5      	beq.n	8014e12 <__any_on+0x2a>
 8014e26:	2001      	movs	r0, #1
 8014e28:	e7f6      	b.n	8014e18 <__any_on+0x30>

08014e2a <_calloc_r>:
 8014e2a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014e2c:	fba1 2402 	umull	r2, r4, r1, r2
 8014e30:	b94c      	cbnz	r4, 8014e46 <_calloc_r+0x1c>
 8014e32:	4611      	mov	r1, r2
 8014e34:	9201      	str	r2, [sp, #4]
 8014e36:	f000 f87b 	bl	8014f30 <_malloc_r>
 8014e3a:	9a01      	ldr	r2, [sp, #4]
 8014e3c:	4605      	mov	r5, r0
 8014e3e:	b930      	cbnz	r0, 8014e4e <_calloc_r+0x24>
 8014e40:	4628      	mov	r0, r5
 8014e42:	b003      	add	sp, #12
 8014e44:	bd30      	pop	{r4, r5, pc}
 8014e46:	220c      	movs	r2, #12
 8014e48:	6002      	str	r2, [r0, #0]
 8014e4a:	2500      	movs	r5, #0
 8014e4c:	e7f8      	b.n	8014e40 <_calloc_r+0x16>
 8014e4e:	4621      	mov	r1, r4
 8014e50:	f7fc fd60 	bl	8011914 <memset>
 8014e54:	e7f4      	b.n	8014e40 <_calloc_r+0x16>
	...

08014e58 <_free_r>:
 8014e58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014e5a:	2900      	cmp	r1, #0
 8014e5c:	d044      	beq.n	8014ee8 <_free_r+0x90>
 8014e5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014e62:	9001      	str	r0, [sp, #4]
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	f1a1 0404 	sub.w	r4, r1, #4
 8014e6a:	bfb8      	it	lt
 8014e6c:	18e4      	addlt	r4, r4, r3
 8014e6e:	f000 fb15 	bl	801549c <__malloc_lock>
 8014e72:	4a1e      	ldr	r2, [pc, #120]	; (8014eec <_free_r+0x94>)
 8014e74:	9801      	ldr	r0, [sp, #4]
 8014e76:	6813      	ldr	r3, [r2, #0]
 8014e78:	b933      	cbnz	r3, 8014e88 <_free_r+0x30>
 8014e7a:	6063      	str	r3, [r4, #4]
 8014e7c:	6014      	str	r4, [r2, #0]
 8014e7e:	b003      	add	sp, #12
 8014e80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014e84:	f000 bb10 	b.w	80154a8 <__malloc_unlock>
 8014e88:	42a3      	cmp	r3, r4
 8014e8a:	d908      	bls.n	8014e9e <_free_r+0x46>
 8014e8c:	6825      	ldr	r5, [r4, #0]
 8014e8e:	1961      	adds	r1, r4, r5
 8014e90:	428b      	cmp	r3, r1
 8014e92:	bf01      	itttt	eq
 8014e94:	6819      	ldreq	r1, [r3, #0]
 8014e96:	685b      	ldreq	r3, [r3, #4]
 8014e98:	1949      	addeq	r1, r1, r5
 8014e9a:	6021      	streq	r1, [r4, #0]
 8014e9c:	e7ed      	b.n	8014e7a <_free_r+0x22>
 8014e9e:	461a      	mov	r2, r3
 8014ea0:	685b      	ldr	r3, [r3, #4]
 8014ea2:	b10b      	cbz	r3, 8014ea8 <_free_r+0x50>
 8014ea4:	42a3      	cmp	r3, r4
 8014ea6:	d9fa      	bls.n	8014e9e <_free_r+0x46>
 8014ea8:	6811      	ldr	r1, [r2, #0]
 8014eaa:	1855      	adds	r5, r2, r1
 8014eac:	42a5      	cmp	r5, r4
 8014eae:	d10b      	bne.n	8014ec8 <_free_r+0x70>
 8014eb0:	6824      	ldr	r4, [r4, #0]
 8014eb2:	4421      	add	r1, r4
 8014eb4:	1854      	adds	r4, r2, r1
 8014eb6:	42a3      	cmp	r3, r4
 8014eb8:	6011      	str	r1, [r2, #0]
 8014eba:	d1e0      	bne.n	8014e7e <_free_r+0x26>
 8014ebc:	681c      	ldr	r4, [r3, #0]
 8014ebe:	685b      	ldr	r3, [r3, #4]
 8014ec0:	6053      	str	r3, [r2, #4]
 8014ec2:	4421      	add	r1, r4
 8014ec4:	6011      	str	r1, [r2, #0]
 8014ec6:	e7da      	b.n	8014e7e <_free_r+0x26>
 8014ec8:	d902      	bls.n	8014ed0 <_free_r+0x78>
 8014eca:	230c      	movs	r3, #12
 8014ecc:	6003      	str	r3, [r0, #0]
 8014ece:	e7d6      	b.n	8014e7e <_free_r+0x26>
 8014ed0:	6825      	ldr	r5, [r4, #0]
 8014ed2:	1961      	adds	r1, r4, r5
 8014ed4:	428b      	cmp	r3, r1
 8014ed6:	bf04      	itt	eq
 8014ed8:	6819      	ldreq	r1, [r3, #0]
 8014eda:	685b      	ldreq	r3, [r3, #4]
 8014edc:	6063      	str	r3, [r4, #4]
 8014ede:	bf04      	itt	eq
 8014ee0:	1949      	addeq	r1, r1, r5
 8014ee2:	6021      	streq	r1, [r4, #0]
 8014ee4:	6054      	str	r4, [r2, #4]
 8014ee6:	e7ca      	b.n	8014e7e <_free_r+0x26>
 8014ee8:	b003      	add	sp, #12
 8014eea:	bd30      	pop	{r4, r5, pc}
 8014eec:	20003e74 	.word	0x20003e74

08014ef0 <sbrk_aligned>:
 8014ef0:	b570      	push	{r4, r5, r6, lr}
 8014ef2:	4e0e      	ldr	r6, [pc, #56]	; (8014f2c <sbrk_aligned+0x3c>)
 8014ef4:	460c      	mov	r4, r1
 8014ef6:	6831      	ldr	r1, [r6, #0]
 8014ef8:	4605      	mov	r5, r0
 8014efa:	b911      	cbnz	r1, 8014f02 <sbrk_aligned+0x12>
 8014efc:	f000 f9f0 	bl	80152e0 <_sbrk_r>
 8014f00:	6030      	str	r0, [r6, #0]
 8014f02:	4621      	mov	r1, r4
 8014f04:	4628      	mov	r0, r5
 8014f06:	f000 f9eb 	bl	80152e0 <_sbrk_r>
 8014f0a:	1c43      	adds	r3, r0, #1
 8014f0c:	d00a      	beq.n	8014f24 <sbrk_aligned+0x34>
 8014f0e:	1cc4      	adds	r4, r0, #3
 8014f10:	f024 0403 	bic.w	r4, r4, #3
 8014f14:	42a0      	cmp	r0, r4
 8014f16:	d007      	beq.n	8014f28 <sbrk_aligned+0x38>
 8014f18:	1a21      	subs	r1, r4, r0
 8014f1a:	4628      	mov	r0, r5
 8014f1c:	f000 f9e0 	bl	80152e0 <_sbrk_r>
 8014f20:	3001      	adds	r0, #1
 8014f22:	d101      	bne.n	8014f28 <sbrk_aligned+0x38>
 8014f24:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8014f28:	4620      	mov	r0, r4
 8014f2a:	bd70      	pop	{r4, r5, r6, pc}
 8014f2c:	20003e78 	.word	0x20003e78

08014f30 <_malloc_r>:
 8014f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f34:	1ccd      	adds	r5, r1, #3
 8014f36:	f025 0503 	bic.w	r5, r5, #3
 8014f3a:	3508      	adds	r5, #8
 8014f3c:	2d0c      	cmp	r5, #12
 8014f3e:	bf38      	it	cc
 8014f40:	250c      	movcc	r5, #12
 8014f42:	2d00      	cmp	r5, #0
 8014f44:	4607      	mov	r7, r0
 8014f46:	db01      	blt.n	8014f4c <_malloc_r+0x1c>
 8014f48:	42a9      	cmp	r1, r5
 8014f4a:	d905      	bls.n	8014f58 <_malloc_r+0x28>
 8014f4c:	230c      	movs	r3, #12
 8014f4e:	603b      	str	r3, [r7, #0]
 8014f50:	2600      	movs	r6, #0
 8014f52:	4630      	mov	r0, r6
 8014f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f58:	4e2e      	ldr	r6, [pc, #184]	; (8015014 <_malloc_r+0xe4>)
 8014f5a:	f000 fa9f 	bl	801549c <__malloc_lock>
 8014f5e:	6833      	ldr	r3, [r6, #0]
 8014f60:	461c      	mov	r4, r3
 8014f62:	bb34      	cbnz	r4, 8014fb2 <_malloc_r+0x82>
 8014f64:	4629      	mov	r1, r5
 8014f66:	4638      	mov	r0, r7
 8014f68:	f7ff ffc2 	bl	8014ef0 <sbrk_aligned>
 8014f6c:	1c43      	adds	r3, r0, #1
 8014f6e:	4604      	mov	r4, r0
 8014f70:	d14d      	bne.n	801500e <_malloc_r+0xde>
 8014f72:	6834      	ldr	r4, [r6, #0]
 8014f74:	4626      	mov	r6, r4
 8014f76:	2e00      	cmp	r6, #0
 8014f78:	d140      	bne.n	8014ffc <_malloc_r+0xcc>
 8014f7a:	6823      	ldr	r3, [r4, #0]
 8014f7c:	4631      	mov	r1, r6
 8014f7e:	4638      	mov	r0, r7
 8014f80:	eb04 0803 	add.w	r8, r4, r3
 8014f84:	f000 f9ac 	bl	80152e0 <_sbrk_r>
 8014f88:	4580      	cmp	r8, r0
 8014f8a:	d13a      	bne.n	8015002 <_malloc_r+0xd2>
 8014f8c:	6821      	ldr	r1, [r4, #0]
 8014f8e:	3503      	adds	r5, #3
 8014f90:	1a6d      	subs	r5, r5, r1
 8014f92:	f025 0503 	bic.w	r5, r5, #3
 8014f96:	3508      	adds	r5, #8
 8014f98:	2d0c      	cmp	r5, #12
 8014f9a:	bf38      	it	cc
 8014f9c:	250c      	movcc	r5, #12
 8014f9e:	4629      	mov	r1, r5
 8014fa0:	4638      	mov	r0, r7
 8014fa2:	f7ff ffa5 	bl	8014ef0 <sbrk_aligned>
 8014fa6:	3001      	adds	r0, #1
 8014fa8:	d02b      	beq.n	8015002 <_malloc_r+0xd2>
 8014faa:	6823      	ldr	r3, [r4, #0]
 8014fac:	442b      	add	r3, r5
 8014fae:	6023      	str	r3, [r4, #0]
 8014fb0:	e00e      	b.n	8014fd0 <_malloc_r+0xa0>
 8014fb2:	6822      	ldr	r2, [r4, #0]
 8014fb4:	1b52      	subs	r2, r2, r5
 8014fb6:	d41e      	bmi.n	8014ff6 <_malloc_r+0xc6>
 8014fb8:	2a0b      	cmp	r2, #11
 8014fba:	d916      	bls.n	8014fea <_malloc_r+0xba>
 8014fbc:	1961      	adds	r1, r4, r5
 8014fbe:	42a3      	cmp	r3, r4
 8014fc0:	6025      	str	r5, [r4, #0]
 8014fc2:	bf18      	it	ne
 8014fc4:	6059      	strne	r1, [r3, #4]
 8014fc6:	6863      	ldr	r3, [r4, #4]
 8014fc8:	bf08      	it	eq
 8014fca:	6031      	streq	r1, [r6, #0]
 8014fcc:	5162      	str	r2, [r4, r5]
 8014fce:	604b      	str	r3, [r1, #4]
 8014fd0:	4638      	mov	r0, r7
 8014fd2:	f104 060b 	add.w	r6, r4, #11
 8014fd6:	f000 fa67 	bl	80154a8 <__malloc_unlock>
 8014fda:	f026 0607 	bic.w	r6, r6, #7
 8014fde:	1d23      	adds	r3, r4, #4
 8014fe0:	1af2      	subs	r2, r6, r3
 8014fe2:	d0b6      	beq.n	8014f52 <_malloc_r+0x22>
 8014fe4:	1b9b      	subs	r3, r3, r6
 8014fe6:	50a3      	str	r3, [r4, r2]
 8014fe8:	e7b3      	b.n	8014f52 <_malloc_r+0x22>
 8014fea:	6862      	ldr	r2, [r4, #4]
 8014fec:	42a3      	cmp	r3, r4
 8014fee:	bf0c      	ite	eq
 8014ff0:	6032      	streq	r2, [r6, #0]
 8014ff2:	605a      	strne	r2, [r3, #4]
 8014ff4:	e7ec      	b.n	8014fd0 <_malloc_r+0xa0>
 8014ff6:	4623      	mov	r3, r4
 8014ff8:	6864      	ldr	r4, [r4, #4]
 8014ffa:	e7b2      	b.n	8014f62 <_malloc_r+0x32>
 8014ffc:	4634      	mov	r4, r6
 8014ffe:	6876      	ldr	r6, [r6, #4]
 8015000:	e7b9      	b.n	8014f76 <_malloc_r+0x46>
 8015002:	230c      	movs	r3, #12
 8015004:	603b      	str	r3, [r7, #0]
 8015006:	4638      	mov	r0, r7
 8015008:	f000 fa4e 	bl	80154a8 <__malloc_unlock>
 801500c:	e7a1      	b.n	8014f52 <_malloc_r+0x22>
 801500e:	6025      	str	r5, [r4, #0]
 8015010:	e7de      	b.n	8014fd0 <_malloc_r+0xa0>
 8015012:	bf00      	nop
 8015014:	20003e74 	.word	0x20003e74

08015018 <__ssputs_r>:
 8015018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801501c:	688e      	ldr	r6, [r1, #8]
 801501e:	429e      	cmp	r6, r3
 8015020:	4682      	mov	sl, r0
 8015022:	460c      	mov	r4, r1
 8015024:	4690      	mov	r8, r2
 8015026:	461f      	mov	r7, r3
 8015028:	d838      	bhi.n	801509c <__ssputs_r+0x84>
 801502a:	898a      	ldrh	r2, [r1, #12]
 801502c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015030:	d032      	beq.n	8015098 <__ssputs_r+0x80>
 8015032:	6825      	ldr	r5, [r4, #0]
 8015034:	6909      	ldr	r1, [r1, #16]
 8015036:	eba5 0901 	sub.w	r9, r5, r1
 801503a:	6965      	ldr	r5, [r4, #20]
 801503c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015040:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015044:	3301      	adds	r3, #1
 8015046:	444b      	add	r3, r9
 8015048:	106d      	asrs	r5, r5, #1
 801504a:	429d      	cmp	r5, r3
 801504c:	bf38      	it	cc
 801504e:	461d      	movcc	r5, r3
 8015050:	0553      	lsls	r3, r2, #21
 8015052:	d531      	bpl.n	80150b8 <__ssputs_r+0xa0>
 8015054:	4629      	mov	r1, r5
 8015056:	f7ff ff6b 	bl	8014f30 <_malloc_r>
 801505a:	4606      	mov	r6, r0
 801505c:	b950      	cbnz	r0, 8015074 <__ssputs_r+0x5c>
 801505e:	230c      	movs	r3, #12
 8015060:	f8ca 3000 	str.w	r3, [sl]
 8015064:	89a3      	ldrh	r3, [r4, #12]
 8015066:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801506a:	81a3      	strh	r3, [r4, #12]
 801506c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015074:	6921      	ldr	r1, [r4, #16]
 8015076:	464a      	mov	r2, r9
 8015078:	f7fc fc3e 	bl	80118f8 <memcpy>
 801507c:	89a3      	ldrh	r3, [r4, #12]
 801507e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015086:	81a3      	strh	r3, [r4, #12]
 8015088:	6126      	str	r6, [r4, #16]
 801508a:	6165      	str	r5, [r4, #20]
 801508c:	444e      	add	r6, r9
 801508e:	eba5 0509 	sub.w	r5, r5, r9
 8015092:	6026      	str	r6, [r4, #0]
 8015094:	60a5      	str	r5, [r4, #8]
 8015096:	463e      	mov	r6, r7
 8015098:	42be      	cmp	r6, r7
 801509a:	d900      	bls.n	801509e <__ssputs_r+0x86>
 801509c:	463e      	mov	r6, r7
 801509e:	6820      	ldr	r0, [r4, #0]
 80150a0:	4632      	mov	r2, r6
 80150a2:	4641      	mov	r1, r8
 80150a4:	f000 f9e0 	bl	8015468 <memmove>
 80150a8:	68a3      	ldr	r3, [r4, #8]
 80150aa:	1b9b      	subs	r3, r3, r6
 80150ac:	60a3      	str	r3, [r4, #8]
 80150ae:	6823      	ldr	r3, [r4, #0]
 80150b0:	4433      	add	r3, r6
 80150b2:	6023      	str	r3, [r4, #0]
 80150b4:	2000      	movs	r0, #0
 80150b6:	e7db      	b.n	8015070 <__ssputs_r+0x58>
 80150b8:	462a      	mov	r2, r5
 80150ba:	f000 f9fb 	bl	80154b4 <_realloc_r>
 80150be:	4606      	mov	r6, r0
 80150c0:	2800      	cmp	r0, #0
 80150c2:	d1e1      	bne.n	8015088 <__ssputs_r+0x70>
 80150c4:	6921      	ldr	r1, [r4, #16]
 80150c6:	4650      	mov	r0, sl
 80150c8:	f7ff fec6 	bl	8014e58 <_free_r>
 80150cc:	e7c7      	b.n	801505e <__ssputs_r+0x46>
	...

080150d0 <_svfiprintf_r>:
 80150d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150d4:	4698      	mov	r8, r3
 80150d6:	898b      	ldrh	r3, [r1, #12]
 80150d8:	061b      	lsls	r3, r3, #24
 80150da:	b09d      	sub	sp, #116	; 0x74
 80150dc:	4607      	mov	r7, r0
 80150de:	460d      	mov	r5, r1
 80150e0:	4614      	mov	r4, r2
 80150e2:	d50e      	bpl.n	8015102 <_svfiprintf_r+0x32>
 80150e4:	690b      	ldr	r3, [r1, #16]
 80150e6:	b963      	cbnz	r3, 8015102 <_svfiprintf_r+0x32>
 80150e8:	2140      	movs	r1, #64	; 0x40
 80150ea:	f7ff ff21 	bl	8014f30 <_malloc_r>
 80150ee:	6028      	str	r0, [r5, #0]
 80150f0:	6128      	str	r0, [r5, #16]
 80150f2:	b920      	cbnz	r0, 80150fe <_svfiprintf_r+0x2e>
 80150f4:	230c      	movs	r3, #12
 80150f6:	603b      	str	r3, [r7, #0]
 80150f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80150fc:	e0d1      	b.n	80152a2 <_svfiprintf_r+0x1d2>
 80150fe:	2340      	movs	r3, #64	; 0x40
 8015100:	616b      	str	r3, [r5, #20]
 8015102:	2300      	movs	r3, #0
 8015104:	9309      	str	r3, [sp, #36]	; 0x24
 8015106:	2320      	movs	r3, #32
 8015108:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801510c:	f8cd 800c 	str.w	r8, [sp, #12]
 8015110:	2330      	movs	r3, #48	; 0x30
 8015112:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80152bc <_svfiprintf_r+0x1ec>
 8015116:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801511a:	f04f 0901 	mov.w	r9, #1
 801511e:	4623      	mov	r3, r4
 8015120:	469a      	mov	sl, r3
 8015122:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015126:	b10a      	cbz	r2, 801512c <_svfiprintf_r+0x5c>
 8015128:	2a25      	cmp	r2, #37	; 0x25
 801512a:	d1f9      	bne.n	8015120 <_svfiprintf_r+0x50>
 801512c:	ebba 0b04 	subs.w	fp, sl, r4
 8015130:	d00b      	beq.n	801514a <_svfiprintf_r+0x7a>
 8015132:	465b      	mov	r3, fp
 8015134:	4622      	mov	r2, r4
 8015136:	4629      	mov	r1, r5
 8015138:	4638      	mov	r0, r7
 801513a:	f7ff ff6d 	bl	8015018 <__ssputs_r>
 801513e:	3001      	adds	r0, #1
 8015140:	f000 80aa 	beq.w	8015298 <_svfiprintf_r+0x1c8>
 8015144:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015146:	445a      	add	r2, fp
 8015148:	9209      	str	r2, [sp, #36]	; 0x24
 801514a:	f89a 3000 	ldrb.w	r3, [sl]
 801514e:	2b00      	cmp	r3, #0
 8015150:	f000 80a2 	beq.w	8015298 <_svfiprintf_r+0x1c8>
 8015154:	2300      	movs	r3, #0
 8015156:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801515a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801515e:	f10a 0a01 	add.w	sl, sl, #1
 8015162:	9304      	str	r3, [sp, #16]
 8015164:	9307      	str	r3, [sp, #28]
 8015166:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801516a:	931a      	str	r3, [sp, #104]	; 0x68
 801516c:	4654      	mov	r4, sl
 801516e:	2205      	movs	r2, #5
 8015170:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015174:	4851      	ldr	r0, [pc, #324]	; (80152bc <_svfiprintf_r+0x1ec>)
 8015176:	f7eb f833 	bl	80001e0 <memchr>
 801517a:	9a04      	ldr	r2, [sp, #16]
 801517c:	b9d8      	cbnz	r0, 80151b6 <_svfiprintf_r+0xe6>
 801517e:	06d0      	lsls	r0, r2, #27
 8015180:	bf44      	itt	mi
 8015182:	2320      	movmi	r3, #32
 8015184:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015188:	0711      	lsls	r1, r2, #28
 801518a:	bf44      	itt	mi
 801518c:	232b      	movmi	r3, #43	; 0x2b
 801518e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015192:	f89a 3000 	ldrb.w	r3, [sl]
 8015196:	2b2a      	cmp	r3, #42	; 0x2a
 8015198:	d015      	beq.n	80151c6 <_svfiprintf_r+0xf6>
 801519a:	9a07      	ldr	r2, [sp, #28]
 801519c:	4654      	mov	r4, sl
 801519e:	2000      	movs	r0, #0
 80151a0:	f04f 0c0a 	mov.w	ip, #10
 80151a4:	4621      	mov	r1, r4
 80151a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80151aa:	3b30      	subs	r3, #48	; 0x30
 80151ac:	2b09      	cmp	r3, #9
 80151ae:	d94e      	bls.n	801524e <_svfiprintf_r+0x17e>
 80151b0:	b1b0      	cbz	r0, 80151e0 <_svfiprintf_r+0x110>
 80151b2:	9207      	str	r2, [sp, #28]
 80151b4:	e014      	b.n	80151e0 <_svfiprintf_r+0x110>
 80151b6:	eba0 0308 	sub.w	r3, r0, r8
 80151ba:	fa09 f303 	lsl.w	r3, r9, r3
 80151be:	4313      	orrs	r3, r2
 80151c0:	9304      	str	r3, [sp, #16]
 80151c2:	46a2      	mov	sl, r4
 80151c4:	e7d2      	b.n	801516c <_svfiprintf_r+0x9c>
 80151c6:	9b03      	ldr	r3, [sp, #12]
 80151c8:	1d19      	adds	r1, r3, #4
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	9103      	str	r1, [sp, #12]
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	bfbb      	ittet	lt
 80151d2:	425b      	neglt	r3, r3
 80151d4:	f042 0202 	orrlt.w	r2, r2, #2
 80151d8:	9307      	strge	r3, [sp, #28]
 80151da:	9307      	strlt	r3, [sp, #28]
 80151dc:	bfb8      	it	lt
 80151de:	9204      	strlt	r2, [sp, #16]
 80151e0:	7823      	ldrb	r3, [r4, #0]
 80151e2:	2b2e      	cmp	r3, #46	; 0x2e
 80151e4:	d10c      	bne.n	8015200 <_svfiprintf_r+0x130>
 80151e6:	7863      	ldrb	r3, [r4, #1]
 80151e8:	2b2a      	cmp	r3, #42	; 0x2a
 80151ea:	d135      	bne.n	8015258 <_svfiprintf_r+0x188>
 80151ec:	9b03      	ldr	r3, [sp, #12]
 80151ee:	1d1a      	adds	r2, r3, #4
 80151f0:	681b      	ldr	r3, [r3, #0]
 80151f2:	9203      	str	r2, [sp, #12]
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	bfb8      	it	lt
 80151f8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80151fc:	3402      	adds	r4, #2
 80151fe:	9305      	str	r3, [sp, #20]
 8015200:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80152cc <_svfiprintf_r+0x1fc>
 8015204:	7821      	ldrb	r1, [r4, #0]
 8015206:	2203      	movs	r2, #3
 8015208:	4650      	mov	r0, sl
 801520a:	f7ea ffe9 	bl	80001e0 <memchr>
 801520e:	b140      	cbz	r0, 8015222 <_svfiprintf_r+0x152>
 8015210:	2340      	movs	r3, #64	; 0x40
 8015212:	eba0 000a 	sub.w	r0, r0, sl
 8015216:	fa03 f000 	lsl.w	r0, r3, r0
 801521a:	9b04      	ldr	r3, [sp, #16]
 801521c:	4303      	orrs	r3, r0
 801521e:	3401      	adds	r4, #1
 8015220:	9304      	str	r3, [sp, #16]
 8015222:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015226:	4826      	ldr	r0, [pc, #152]	; (80152c0 <_svfiprintf_r+0x1f0>)
 8015228:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801522c:	2206      	movs	r2, #6
 801522e:	f7ea ffd7 	bl	80001e0 <memchr>
 8015232:	2800      	cmp	r0, #0
 8015234:	d038      	beq.n	80152a8 <_svfiprintf_r+0x1d8>
 8015236:	4b23      	ldr	r3, [pc, #140]	; (80152c4 <_svfiprintf_r+0x1f4>)
 8015238:	bb1b      	cbnz	r3, 8015282 <_svfiprintf_r+0x1b2>
 801523a:	9b03      	ldr	r3, [sp, #12]
 801523c:	3307      	adds	r3, #7
 801523e:	f023 0307 	bic.w	r3, r3, #7
 8015242:	3308      	adds	r3, #8
 8015244:	9303      	str	r3, [sp, #12]
 8015246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015248:	4433      	add	r3, r6
 801524a:	9309      	str	r3, [sp, #36]	; 0x24
 801524c:	e767      	b.n	801511e <_svfiprintf_r+0x4e>
 801524e:	fb0c 3202 	mla	r2, ip, r2, r3
 8015252:	460c      	mov	r4, r1
 8015254:	2001      	movs	r0, #1
 8015256:	e7a5      	b.n	80151a4 <_svfiprintf_r+0xd4>
 8015258:	2300      	movs	r3, #0
 801525a:	3401      	adds	r4, #1
 801525c:	9305      	str	r3, [sp, #20]
 801525e:	4619      	mov	r1, r3
 8015260:	f04f 0c0a 	mov.w	ip, #10
 8015264:	4620      	mov	r0, r4
 8015266:	f810 2b01 	ldrb.w	r2, [r0], #1
 801526a:	3a30      	subs	r2, #48	; 0x30
 801526c:	2a09      	cmp	r2, #9
 801526e:	d903      	bls.n	8015278 <_svfiprintf_r+0x1a8>
 8015270:	2b00      	cmp	r3, #0
 8015272:	d0c5      	beq.n	8015200 <_svfiprintf_r+0x130>
 8015274:	9105      	str	r1, [sp, #20]
 8015276:	e7c3      	b.n	8015200 <_svfiprintf_r+0x130>
 8015278:	fb0c 2101 	mla	r1, ip, r1, r2
 801527c:	4604      	mov	r4, r0
 801527e:	2301      	movs	r3, #1
 8015280:	e7f0      	b.n	8015264 <_svfiprintf_r+0x194>
 8015282:	ab03      	add	r3, sp, #12
 8015284:	9300      	str	r3, [sp, #0]
 8015286:	462a      	mov	r2, r5
 8015288:	4b0f      	ldr	r3, [pc, #60]	; (80152c8 <_svfiprintf_r+0x1f8>)
 801528a:	a904      	add	r1, sp, #16
 801528c:	4638      	mov	r0, r7
 801528e:	f7fc fbe9 	bl	8011a64 <_printf_float>
 8015292:	1c42      	adds	r2, r0, #1
 8015294:	4606      	mov	r6, r0
 8015296:	d1d6      	bne.n	8015246 <_svfiprintf_r+0x176>
 8015298:	89ab      	ldrh	r3, [r5, #12]
 801529a:	065b      	lsls	r3, r3, #25
 801529c:	f53f af2c 	bmi.w	80150f8 <_svfiprintf_r+0x28>
 80152a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80152a2:	b01d      	add	sp, #116	; 0x74
 80152a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152a8:	ab03      	add	r3, sp, #12
 80152aa:	9300      	str	r3, [sp, #0]
 80152ac:	462a      	mov	r2, r5
 80152ae:	4b06      	ldr	r3, [pc, #24]	; (80152c8 <_svfiprintf_r+0x1f8>)
 80152b0:	a904      	add	r1, sp, #16
 80152b2:	4638      	mov	r0, r7
 80152b4:	f7fc fe7a 	bl	8011fac <_printf_i>
 80152b8:	e7eb      	b.n	8015292 <_svfiprintf_r+0x1c2>
 80152ba:	bf00      	nop
 80152bc:	08017ad4 	.word	0x08017ad4
 80152c0:	08017ade 	.word	0x08017ade
 80152c4:	08011a65 	.word	0x08011a65
 80152c8:	08015019 	.word	0x08015019
 80152cc:	08017ada 	.word	0x08017ada

080152d0 <nan>:
 80152d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80152d8 <nan+0x8>
 80152d4:	4770      	bx	lr
 80152d6:	bf00      	nop
 80152d8:	00000000 	.word	0x00000000
 80152dc:	7ff80000 	.word	0x7ff80000

080152e0 <_sbrk_r>:
 80152e0:	b538      	push	{r3, r4, r5, lr}
 80152e2:	4d06      	ldr	r5, [pc, #24]	; (80152fc <_sbrk_r+0x1c>)
 80152e4:	2300      	movs	r3, #0
 80152e6:	4604      	mov	r4, r0
 80152e8:	4608      	mov	r0, r1
 80152ea:	602b      	str	r3, [r5, #0]
 80152ec:	f7f0 fbac 	bl	8005a48 <_sbrk>
 80152f0:	1c43      	adds	r3, r0, #1
 80152f2:	d102      	bne.n	80152fa <_sbrk_r+0x1a>
 80152f4:	682b      	ldr	r3, [r5, #0]
 80152f6:	b103      	cbz	r3, 80152fa <_sbrk_r+0x1a>
 80152f8:	6023      	str	r3, [r4, #0]
 80152fa:	bd38      	pop	{r3, r4, r5, pc}
 80152fc:	20003e7c 	.word	0x20003e7c

08015300 <__sread>:
 8015300:	b510      	push	{r4, lr}
 8015302:	460c      	mov	r4, r1
 8015304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015308:	f000 fa5c 	bl	80157c4 <_read_r>
 801530c:	2800      	cmp	r0, #0
 801530e:	bfab      	itete	ge
 8015310:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015312:	89a3      	ldrhlt	r3, [r4, #12]
 8015314:	181b      	addge	r3, r3, r0
 8015316:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801531a:	bfac      	ite	ge
 801531c:	6563      	strge	r3, [r4, #84]	; 0x54
 801531e:	81a3      	strhlt	r3, [r4, #12]
 8015320:	bd10      	pop	{r4, pc}

08015322 <__swrite>:
 8015322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015326:	461f      	mov	r7, r3
 8015328:	898b      	ldrh	r3, [r1, #12]
 801532a:	05db      	lsls	r3, r3, #23
 801532c:	4605      	mov	r5, r0
 801532e:	460c      	mov	r4, r1
 8015330:	4616      	mov	r6, r2
 8015332:	d505      	bpl.n	8015340 <__swrite+0x1e>
 8015334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015338:	2302      	movs	r3, #2
 801533a:	2200      	movs	r2, #0
 801533c:	f000 f882 	bl	8015444 <_lseek_r>
 8015340:	89a3      	ldrh	r3, [r4, #12]
 8015342:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015346:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801534a:	81a3      	strh	r3, [r4, #12]
 801534c:	4632      	mov	r2, r6
 801534e:	463b      	mov	r3, r7
 8015350:	4628      	mov	r0, r5
 8015352:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015356:	f000 b823 	b.w	80153a0 <_write_r>

0801535a <__sseek>:
 801535a:	b510      	push	{r4, lr}
 801535c:	460c      	mov	r4, r1
 801535e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015362:	f000 f86f 	bl	8015444 <_lseek_r>
 8015366:	1c43      	adds	r3, r0, #1
 8015368:	89a3      	ldrh	r3, [r4, #12]
 801536a:	bf15      	itete	ne
 801536c:	6560      	strne	r0, [r4, #84]	; 0x54
 801536e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015372:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015376:	81a3      	strheq	r3, [r4, #12]
 8015378:	bf18      	it	ne
 801537a:	81a3      	strhne	r3, [r4, #12]
 801537c:	bd10      	pop	{r4, pc}

0801537e <__sclose>:
 801537e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015382:	f000 b83d 	b.w	8015400 <_close_r>

08015386 <__ascii_wctomb>:
 8015386:	b149      	cbz	r1, 801539c <__ascii_wctomb+0x16>
 8015388:	2aff      	cmp	r2, #255	; 0xff
 801538a:	bf85      	ittet	hi
 801538c:	238a      	movhi	r3, #138	; 0x8a
 801538e:	6003      	strhi	r3, [r0, #0]
 8015390:	700a      	strbls	r2, [r1, #0]
 8015392:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8015396:	bf98      	it	ls
 8015398:	2001      	movls	r0, #1
 801539a:	4770      	bx	lr
 801539c:	4608      	mov	r0, r1
 801539e:	4770      	bx	lr

080153a0 <_write_r>:
 80153a0:	b538      	push	{r3, r4, r5, lr}
 80153a2:	4d07      	ldr	r5, [pc, #28]	; (80153c0 <_write_r+0x20>)
 80153a4:	4604      	mov	r4, r0
 80153a6:	4608      	mov	r0, r1
 80153a8:	4611      	mov	r1, r2
 80153aa:	2200      	movs	r2, #0
 80153ac:	602a      	str	r2, [r5, #0]
 80153ae:	461a      	mov	r2, r3
 80153b0:	f7f0 faf9 	bl	80059a6 <_write>
 80153b4:	1c43      	adds	r3, r0, #1
 80153b6:	d102      	bne.n	80153be <_write_r+0x1e>
 80153b8:	682b      	ldr	r3, [r5, #0]
 80153ba:	b103      	cbz	r3, 80153be <_write_r+0x1e>
 80153bc:	6023      	str	r3, [r4, #0]
 80153be:	bd38      	pop	{r3, r4, r5, pc}
 80153c0:	20003e7c 	.word	0x20003e7c

080153c4 <__assert_func>:
 80153c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80153c6:	4614      	mov	r4, r2
 80153c8:	461a      	mov	r2, r3
 80153ca:	4b09      	ldr	r3, [pc, #36]	; (80153f0 <__assert_func+0x2c>)
 80153cc:	681b      	ldr	r3, [r3, #0]
 80153ce:	4605      	mov	r5, r0
 80153d0:	68d8      	ldr	r0, [r3, #12]
 80153d2:	b14c      	cbz	r4, 80153e8 <__assert_func+0x24>
 80153d4:	4b07      	ldr	r3, [pc, #28]	; (80153f4 <__assert_func+0x30>)
 80153d6:	9100      	str	r1, [sp, #0]
 80153d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80153dc:	4906      	ldr	r1, [pc, #24]	; (80153f8 <__assert_func+0x34>)
 80153de:	462b      	mov	r3, r5
 80153e0:	f000 f81e 	bl	8015420 <fiprintf>
 80153e4:	f000 fac0 	bl	8015968 <abort>
 80153e8:	4b04      	ldr	r3, [pc, #16]	; (80153fc <__assert_func+0x38>)
 80153ea:	461c      	mov	r4, r3
 80153ec:	e7f3      	b.n	80153d6 <__assert_func+0x12>
 80153ee:	bf00      	nop
 80153f0:	20000234 	.word	0x20000234
 80153f4:	08017ae5 	.word	0x08017ae5
 80153f8:	08017af2 	.word	0x08017af2
 80153fc:	08017b20 	.word	0x08017b20

08015400 <_close_r>:
 8015400:	b538      	push	{r3, r4, r5, lr}
 8015402:	4d06      	ldr	r5, [pc, #24]	; (801541c <_close_r+0x1c>)
 8015404:	2300      	movs	r3, #0
 8015406:	4604      	mov	r4, r0
 8015408:	4608      	mov	r0, r1
 801540a:	602b      	str	r3, [r5, #0]
 801540c:	f7f0 fae7 	bl	80059de <_close>
 8015410:	1c43      	adds	r3, r0, #1
 8015412:	d102      	bne.n	801541a <_close_r+0x1a>
 8015414:	682b      	ldr	r3, [r5, #0]
 8015416:	b103      	cbz	r3, 801541a <_close_r+0x1a>
 8015418:	6023      	str	r3, [r4, #0]
 801541a:	bd38      	pop	{r3, r4, r5, pc}
 801541c:	20003e7c 	.word	0x20003e7c

08015420 <fiprintf>:
 8015420:	b40e      	push	{r1, r2, r3}
 8015422:	b503      	push	{r0, r1, lr}
 8015424:	4601      	mov	r1, r0
 8015426:	ab03      	add	r3, sp, #12
 8015428:	4805      	ldr	r0, [pc, #20]	; (8015440 <fiprintf+0x20>)
 801542a:	f853 2b04 	ldr.w	r2, [r3], #4
 801542e:	6800      	ldr	r0, [r0, #0]
 8015430:	9301      	str	r3, [sp, #4]
 8015432:	f000 f897 	bl	8015564 <_vfiprintf_r>
 8015436:	b002      	add	sp, #8
 8015438:	f85d eb04 	ldr.w	lr, [sp], #4
 801543c:	b003      	add	sp, #12
 801543e:	4770      	bx	lr
 8015440:	20000234 	.word	0x20000234

08015444 <_lseek_r>:
 8015444:	b538      	push	{r3, r4, r5, lr}
 8015446:	4d07      	ldr	r5, [pc, #28]	; (8015464 <_lseek_r+0x20>)
 8015448:	4604      	mov	r4, r0
 801544a:	4608      	mov	r0, r1
 801544c:	4611      	mov	r1, r2
 801544e:	2200      	movs	r2, #0
 8015450:	602a      	str	r2, [r5, #0]
 8015452:	461a      	mov	r2, r3
 8015454:	f7f0 faea 	bl	8005a2c <_lseek>
 8015458:	1c43      	adds	r3, r0, #1
 801545a:	d102      	bne.n	8015462 <_lseek_r+0x1e>
 801545c:	682b      	ldr	r3, [r5, #0]
 801545e:	b103      	cbz	r3, 8015462 <_lseek_r+0x1e>
 8015460:	6023      	str	r3, [r4, #0]
 8015462:	bd38      	pop	{r3, r4, r5, pc}
 8015464:	20003e7c 	.word	0x20003e7c

08015468 <memmove>:
 8015468:	4288      	cmp	r0, r1
 801546a:	b510      	push	{r4, lr}
 801546c:	eb01 0402 	add.w	r4, r1, r2
 8015470:	d902      	bls.n	8015478 <memmove+0x10>
 8015472:	4284      	cmp	r4, r0
 8015474:	4623      	mov	r3, r4
 8015476:	d807      	bhi.n	8015488 <memmove+0x20>
 8015478:	1e43      	subs	r3, r0, #1
 801547a:	42a1      	cmp	r1, r4
 801547c:	d008      	beq.n	8015490 <memmove+0x28>
 801547e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015482:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015486:	e7f8      	b.n	801547a <memmove+0x12>
 8015488:	4402      	add	r2, r0
 801548a:	4601      	mov	r1, r0
 801548c:	428a      	cmp	r2, r1
 801548e:	d100      	bne.n	8015492 <memmove+0x2a>
 8015490:	bd10      	pop	{r4, pc}
 8015492:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015496:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801549a:	e7f7      	b.n	801548c <memmove+0x24>

0801549c <__malloc_lock>:
 801549c:	4801      	ldr	r0, [pc, #4]	; (80154a4 <__malloc_lock+0x8>)
 801549e:	f7fe bfe6 	b.w	801446e <__retarget_lock_acquire_recursive>
 80154a2:	bf00      	nop
 80154a4:	20003e70 	.word	0x20003e70

080154a8 <__malloc_unlock>:
 80154a8:	4801      	ldr	r0, [pc, #4]	; (80154b0 <__malloc_unlock+0x8>)
 80154aa:	f7fe bfe1 	b.w	8014470 <__retarget_lock_release_recursive>
 80154ae:	bf00      	nop
 80154b0:	20003e70 	.word	0x20003e70

080154b4 <_realloc_r>:
 80154b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154b8:	4680      	mov	r8, r0
 80154ba:	4614      	mov	r4, r2
 80154bc:	460e      	mov	r6, r1
 80154be:	b921      	cbnz	r1, 80154ca <_realloc_r+0x16>
 80154c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80154c4:	4611      	mov	r1, r2
 80154c6:	f7ff bd33 	b.w	8014f30 <_malloc_r>
 80154ca:	b92a      	cbnz	r2, 80154d8 <_realloc_r+0x24>
 80154cc:	f7ff fcc4 	bl	8014e58 <_free_r>
 80154d0:	4625      	mov	r5, r4
 80154d2:	4628      	mov	r0, r5
 80154d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80154d8:	f000 fc6a 	bl	8015db0 <_malloc_usable_size_r>
 80154dc:	4284      	cmp	r4, r0
 80154de:	4607      	mov	r7, r0
 80154e0:	d802      	bhi.n	80154e8 <_realloc_r+0x34>
 80154e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80154e6:	d812      	bhi.n	801550e <_realloc_r+0x5a>
 80154e8:	4621      	mov	r1, r4
 80154ea:	4640      	mov	r0, r8
 80154ec:	f7ff fd20 	bl	8014f30 <_malloc_r>
 80154f0:	4605      	mov	r5, r0
 80154f2:	2800      	cmp	r0, #0
 80154f4:	d0ed      	beq.n	80154d2 <_realloc_r+0x1e>
 80154f6:	42bc      	cmp	r4, r7
 80154f8:	4622      	mov	r2, r4
 80154fa:	4631      	mov	r1, r6
 80154fc:	bf28      	it	cs
 80154fe:	463a      	movcs	r2, r7
 8015500:	f7fc f9fa 	bl	80118f8 <memcpy>
 8015504:	4631      	mov	r1, r6
 8015506:	4640      	mov	r0, r8
 8015508:	f7ff fca6 	bl	8014e58 <_free_r>
 801550c:	e7e1      	b.n	80154d2 <_realloc_r+0x1e>
 801550e:	4635      	mov	r5, r6
 8015510:	e7df      	b.n	80154d2 <_realloc_r+0x1e>

08015512 <__sfputc_r>:
 8015512:	6893      	ldr	r3, [r2, #8]
 8015514:	3b01      	subs	r3, #1
 8015516:	2b00      	cmp	r3, #0
 8015518:	b410      	push	{r4}
 801551a:	6093      	str	r3, [r2, #8]
 801551c:	da08      	bge.n	8015530 <__sfputc_r+0x1e>
 801551e:	6994      	ldr	r4, [r2, #24]
 8015520:	42a3      	cmp	r3, r4
 8015522:	db01      	blt.n	8015528 <__sfputc_r+0x16>
 8015524:	290a      	cmp	r1, #10
 8015526:	d103      	bne.n	8015530 <__sfputc_r+0x1e>
 8015528:	f85d 4b04 	ldr.w	r4, [sp], #4
 801552c:	f000 b95c 	b.w	80157e8 <__swbuf_r>
 8015530:	6813      	ldr	r3, [r2, #0]
 8015532:	1c58      	adds	r0, r3, #1
 8015534:	6010      	str	r0, [r2, #0]
 8015536:	7019      	strb	r1, [r3, #0]
 8015538:	4608      	mov	r0, r1
 801553a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801553e:	4770      	bx	lr

08015540 <__sfputs_r>:
 8015540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015542:	4606      	mov	r6, r0
 8015544:	460f      	mov	r7, r1
 8015546:	4614      	mov	r4, r2
 8015548:	18d5      	adds	r5, r2, r3
 801554a:	42ac      	cmp	r4, r5
 801554c:	d101      	bne.n	8015552 <__sfputs_r+0x12>
 801554e:	2000      	movs	r0, #0
 8015550:	e007      	b.n	8015562 <__sfputs_r+0x22>
 8015552:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015556:	463a      	mov	r2, r7
 8015558:	4630      	mov	r0, r6
 801555a:	f7ff ffda 	bl	8015512 <__sfputc_r>
 801555e:	1c43      	adds	r3, r0, #1
 8015560:	d1f3      	bne.n	801554a <__sfputs_r+0xa>
 8015562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015564 <_vfiprintf_r>:
 8015564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015568:	460d      	mov	r5, r1
 801556a:	b09d      	sub	sp, #116	; 0x74
 801556c:	4614      	mov	r4, r2
 801556e:	4698      	mov	r8, r3
 8015570:	4606      	mov	r6, r0
 8015572:	b118      	cbz	r0, 801557c <_vfiprintf_r+0x18>
 8015574:	6983      	ldr	r3, [r0, #24]
 8015576:	b90b      	cbnz	r3, 801557c <_vfiprintf_r+0x18>
 8015578:	f000 fb18 	bl	8015bac <__sinit>
 801557c:	4b89      	ldr	r3, [pc, #548]	; (80157a4 <_vfiprintf_r+0x240>)
 801557e:	429d      	cmp	r5, r3
 8015580:	d11b      	bne.n	80155ba <_vfiprintf_r+0x56>
 8015582:	6875      	ldr	r5, [r6, #4]
 8015584:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015586:	07d9      	lsls	r1, r3, #31
 8015588:	d405      	bmi.n	8015596 <_vfiprintf_r+0x32>
 801558a:	89ab      	ldrh	r3, [r5, #12]
 801558c:	059a      	lsls	r2, r3, #22
 801558e:	d402      	bmi.n	8015596 <_vfiprintf_r+0x32>
 8015590:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015592:	f7fe ff6c 	bl	801446e <__retarget_lock_acquire_recursive>
 8015596:	89ab      	ldrh	r3, [r5, #12]
 8015598:	071b      	lsls	r3, r3, #28
 801559a:	d501      	bpl.n	80155a0 <_vfiprintf_r+0x3c>
 801559c:	692b      	ldr	r3, [r5, #16]
 801559e:	b9eb      	cbnz	r3, 80155dc <_vfiprintf_r+0x78>
 80155a0:	4629      	mov	r1, r5
 80155a2:	4630      	mov	r0, r6
 80155a4:	f000 f972 	bl	801588c <__swsetup_r>
 80155a8:	b1c0      	cbz	r0, 80155dc <_vfiprintf_r+0x78>
 80155aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80155ac:	07dc      	lsls	r4, r3, #31
 80155ae:	d50e      	bpl.n	80155ce <_vfiprintf_r+0x6a>
 80155b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80155b4:	b01d      	add	sp, #116	; 0x74
 80155b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155ba:	4b7b      	ldr	r3, [pc, #492]	; (80157a8 <_vfiprintf_r+0x244>)
 80155bc:	429d      	cmp	r5, r3
 80155be:	d101      	bne.n	80155c4 <_vfiprintf_r+0x60>
 80155c0:	68b5      	ldr	r5, [r6, #8]
 80155c2:	e7df      	b.n	8015584 <_vfiprintf_r+0x20>
 80155c4:	4b79      	ldr	r3, [pc, #484]	; (80157ac <_vfiprintf_r+0x248>)
 80155c6:	429d      	cmp	r5, r3
 80155c8:	bf08      	it	eq
 80155ca:	68f5      	ldreq	r5, [r6, #12]
 80155cc:	e7da      	b.n	8015584 <_vfiprintf_r+0x20>
 80155ce:	89ab      	ldrh	r3, [r5, #12]
 80155d0:	0598      	lsls	r0, r3, #22
 80155d2:	d4ed      	bmi.n	80155b0 <_vfiprintf_r+0x4c>
 80155d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80155d6:	f7fe ff4b 	bl	8014470 <__retarget_lock_release_recursive>
 80155da:	e7e9      	b.n	80155b0 <_vfiprintf_r+0x4c>
 80155dc:	2300      	movs	r3, #0
 80155de:	9309      	str	r3, [sp, #36]	; 0x24
 80155e0:	2320      	movs	r3, #32
 80155e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80155e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80155ea:	2330      	movs	r3, #48	; 0x30
 80155ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80157b0 <_vfiprintf_r+0x24c>
 80155f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80155f4:	f04f 0901 	mov.w	r9, #1
 80155f8:	4623      	mov	r3, r4
 80155fa:	469a      	mov	sl, r3
 80155fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015600:	b10a      	cbz	r2, 8015606 <_vfiprintf_r+0xa2>
 8015602:	2a25      	cmp	r2, #37	; 0x25
 8015604:	d1f9      	bne.n	80155fa <_vfiprintf_r+0x96>
 8015606:	ebba 0b04 	subs.w	fp, sl, r4
 801560a:	d00b      	beq.n	8015624 <_vfiprintf_r+0xc0>
 801560c:	465b      	mov	r3, fp
 801560e:	4622      	mov	r2, r4
 8015610:	4629      	mov	r1, r5
 8015612:	4630      	mov	r0, r6
 8015614:	f7ff ff94 	bl	8015540 <__sfputs_r>
 8015618:	3001      	adds	r0, #1
 801561a:	f000 80aa 	beq.w	8015772 <_vfiprintf_r+0x20e>
 801561e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015620:	445a      	add	r2, fp
 8015622:	9209      	str	r2, [sp, #36]	; 0x24
 8015624:	f89a 3000 	ldrb.w	r3, [sl]
 8015628:	2b00      	cmp	r3, #0
 801562a:	f000 80a2 	beq.w	8015772 <_vfiprintf_r+0x20e>
 801562e:	2300      	movs	r3, #0
 8015630:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015634:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015638:	f10a 0a01 	add.w	sl, sl, #1
 801563c:	9304      	str	r3, [sp, #16]
 801563e:	9307      	str	r3, [sp, #28]
 8015640:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015644:	931a      	str	r3, [sp, #104]	; 0x68
 8015646:	4654      	mov	r4, sl
 8015648:	2205      	movs	r2, #5
 801564a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801564e:	4858      	ldr	r0, [pc, #352]	; (80157b0 <_vfiprintf_r+0x24c>)
 8015650:	f7ea fdc6 	bl	80001e0 <memchr>
 8015654:	9a04      	ldr	r2, [sp, #16]
 8015656:	b9d8      	cbnz	r0, 8015690 <_vfiprintf_r+0x12c>
 8015658:	06d1      	lsls	r1, r2, #27
 801565a:	bf44      	itt	mi
 801565c:	2320      	movmi	r3, #32
 801565e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015662:	0713      	lsls	r3, r2, #28
 8015664:	bf44      	itt	mi
 8015666:	232b      	movmi	r3, #43	; 0x2b
 8015668:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801566c:	f89a 3000 	ldrb.w	r3, [sl]
 8015670:	2b2a      	cmp	r3, #42	; 0x2a
 8015672:	d015      	beq.n	80156a0 <_vfiprintf_r+0x13c>
 8015674:	9a07      	ldr	r2, [sp, #28]
 8015676:	4654      	mov	r4, sl
 8015678:	2000      	movs	r0, #0
 801567a:	f04f 0c0a 	mov.w	ip, #10
 801567e:	4621      	mov	r1, r4
 8015680:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015684:	3b30      	subs	r3, #48	; 0x30
 8015686:	2b09      	cmp	r3, #9
 8015688:	d94e      	bls.n	8015728 <_vfiprintf_r+0x1c4>
 801568a:	b1b0      	cbz	r0, 80156ba <_vfiprintf_r+0x156>
 801568c:	9207      	str	r2, [sp, #28]
 801568e:	e014      	b.n	80156ba <_vfiprintf_r+0x156>
 8015690:	eba0 0308 	sub.w	r3, r0, r8
 8015694:	fa09 f303 	lsl.w	r3, r9, r3
 8015698:	4313      	orrs	r3, r2
 801569a:	9304      	str	r3, [sp, #16]
 801569c:	46a2      	mov	sl, r4
 801569e:	e7d2      	b.n	8015646 <_vfiprintf_r+0xe2>
 80156a0:	9b03      	ldr	r3, [sp, #12]
 80156a2:	1d19      	adds	r1, r3, #4
 80156a4:	681b      	ldr	r3, [r3, #0]
 80156a6:	9103      	str	r1, [sp, #12]
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	bfbb      	ittet	lt
 80156ac:	425b      	neglt	r3, r3
 80156ae:	f042 0202 	orrlt.w	r2, r2, #2
 80156b2:	9307      	strge	r3, [sp, #28]
 80156b4:	9307      	strlt	r3, [sp, #28]
 80156b6:	bfb8      	it	lt
 80156b8:	9204      	strlt	r2, [sp, #16]
 80156ba:	7823      	ldrb	r3, [r4, #0]
 80156bc:	2b2e      	cmp	r3, #46	; 0x2e
 80156be:	d10c      	bne.n	80156da <_vfiprintf_r+0x176>
 80156c0:	7863      	ldrb	r3, [r4, #1]
 80156c2:	2b2a      	cmp	r3, #42	; 0x2a
 80156c4:	d135      	bne.n	8015732 <_vfiprintf_r+0x1ce>
 80156c6:	9b03      	ldr	r3, [sp, #12]
 80156c8:	1d1a      	adds	r2, r3, #4
 80156ca:	681b      	ldr	r3, [r3, #0]
 80156cc:	9203      	str	r2, [sp, #12]
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	bfb8      	it	lt
 80156d2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80156d6:	3402      	adds	r4, #2
 80156d8:	9305      	str	r3, [sp, #20]
 80156da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80157c0 <_vfiprintf_r+0x25c>
 80156de:	7821      	ldrb	r1, [r4, #0]
 80156e0:	2203      	movs	r2, #3
 80156e2:	4650      	mov	r0, sl
 80156e4:	f7ea fd7c 	bl	80001e0 <memchr>
 80156e8:	b140      	cbz	r0, 80156fc <_vfiprintf_r+0x198>
 80156ea:	2340      	movs	r3, #64	; 0x40
 80156ec:	eba0 000a 	sub.w	r0, r0, sl
 80156f0:	fa03 f000 	lsl.w	r0, r3, r0
 80156f4:	9b04      	ldr	r3, [sp, #16]
 80156f6:	4303      	orrs	r3, r0
 80156f8:	3401      	adds	r4, #1
 80156fa:	9304      	str	r3, [sp, #16]
 80156fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015700:	482c      	ldr	r0, [pc, #176]	; (80157b4 <_vfiprintf_r+0x250>)
 8015702:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015706:	2206      	movs	r2, #6
 8015708:	f7ea fd6a 	bl	80001e0 <memchr>
 801570c:	2800      	cmp	r0, #0
 801570e:	d03f      	beq.n	8015790 <_vfiprintf_r+0x22c>
 8015710:	4b29      	ldr	r3, [pc, #164]	; (80157b8 <_vfiprintf_r+0x254>)
 8015712:	bb1b      	cbnz	r3, 801575c <_vfiprintf_r+0x1f8>
 8015714:	9b03      	ldr	r3, [sp, #12]
 8015716:	3307      	adds	r3, #7
 8015718:	f023 0307 	bic.w	r3, r3, #7
 801571c:	3308      	adds	r3, #8
 801571e:	9303      	str	r3, [sp, #12]
 8015720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015722:	443b      	add	r3, r7
 8015724:	9309      	str	r3, [sp, #36]	; 0x24
 8015726:	e767      	b.n	80155f8 <_vfiprintf_r+0x94>
 8015728:	fb0c 3202 	mla	r2, ip, r2, r3
 801572c:	460c      	mov	r4, r1
 801572e:	2001      	movs	r0, #1
 8015730:	e7a5      	b.n	801567e <_vfiprintf_r+0x11a>
 8015732:	2300      	movs	r3, #0
 8015734:	3401      	adds	r4, #1
 8015736:	9305      	str	r3, [sp, #20]
 8015738:	4619      	mov	r1, r3
 801573a:	f04f 0c0a 	mov.w	ip, #10
 801573e:	4620      	mov	r0, r4
 8015740:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015744:	3a30      	subs	r2, #48	; 0x30
 8015746:	2a09      	cmp	r2, #9
 8015748:	d903      	bls.n	8015752 <_vfiprintf_r+0x1ee>
 801574a:	2b00      	cmp	r3, #0
 801574c:	d0c5      	beq.n	80156da <_vfiprintf_r+0x176>
 801574e:	9105      	str	r1, [sp, #20]
 8015750:	e7c3      	b.n	80156da <_vfiprintf_r+0x176>
 8015752:	fb0c 2101 	mla	r1, ip, r1, r2
 8015756:	4604      	mov	r4, r0
 8015758:	2301      	movs	r3, #1
 801575a:	e7f0      	b.n	801573e <_vfiprintf_r+0x1da>
 801575c:	ab03      	add	r3, sp, #12
 801575e:	9300      	str	r3, [sp, #0]
 8015760:	462a      	mov	r2, r5
 8015762:	4b16      	ldr	r3, [pc, #88]	; (80157bc <_vfiprintf_r+0x258>)
 8015764:	a904      	add	r1, sp, #16
 8015766:	4630      	mov	r0, r6
 8015768:	f7fc f97c 	bl	8011a64 <_printf_float>
 801576c:	4607      	mov	r7, r0
 801576e:	1c78      	adds	r0, r7, #1
 8015770:	d1d6      	bne.n	8015720 <_vfiprintf_r+0x1bc>
 8015772:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015774:	07d9      	lsls	r1, r3, #31
 8015776:	d405      	bmi.n	8015784 <_vfiprintf_r+0x220>
 8015778:	89ab      	ldrh	r3, [r5, #12]
 801577a:	059a      	lsls	r2, r3, #22
 801577c:	d402      	bmi.n	8015784 <_vfiprintf_r+0x220>
 801577e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015780:	f7fe fe76 	bl	8014470 <__retarget_lock_release_recursive>
 8015784:	89ab      	ldrh	r3, [r5, #12]
 8015786:	065b      	lsls	r3, r3, #25
 8015788:	f53f af12 	bmi.w	80155b0 <_vfiprintf_r+0x4c>
 801578c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801578e:	e711      	b.n	80155b4 <_vfiprintf_r+0x50>
 8015790:	ab03      	add	r3, sp, #12
 8015792:	9300      	str	r3, [sp, #0]
 8015794:	462a      	mov	r2, r5
 8015796:	4b09      	ldr	r3, [pc, #36]	; (80157bc <_vfiprintf_r+0x258>)
 8015798:	a904      	add	r1, sp, #16
 801579a:	4630      	mov	r0, r6
 801579c:	f7fc fc06 	bl	8011fac <_printf_i>
 80157a0:	e7e4      	b.n	801576c <_vfiprintf_r+0x208>
 80157a2:	bf00      	nop
 80157a4:	08017b44 	.word	0x08017b44
 80157a8:	08017b64 	.word	0x08017b64
 80157ac:	08017b24 	.word	0x08017b24
 80157b0:	08017ad4 	.word	0x08017ad4
 80157b4:	08017ade 	.word	0x08017ade
 80157b8:	08011a65 	.word	0x08011a65
 80157bc:	08015541 	.word	0x08015541
 80157c0:	08017ada 	.word	0x08017ada

080157c4 <_read_r>:
 80157c4:	b538      	push	{r3, r4, r5, lr}
 80157c6:	4d07      	ldr	r5, [pc, #28]	; (80157e4 <_read_r+0x20>)
 80157c8:	4604      	mov	r4, r0
 80157ca:	4608      	mov	r0, r1
 80157cc:	4611      	mov	r1, r2
 80157ce:	2200      	movs	r2, #0
 80157d0:	602a      	str	r2, [r5, #0]
 80157d2:	461a      	mov	r2, r3
 80157d4:	f7f0 f8ca 	bl	800596c <_read>
 80157d8:	1c43      	adds	r3, r0, #1
 80157da:	d102      	bne.n	80157e2 <_read_r+0x1e>
 80157dc:	682b      	ldr	r3, [r5, #0]
 80157de:	b103      	cbz	r3, 80157e2 <_read_r+0x1e>
 80157e0:	6023      	str	r3, [r4, #0]
 80157e2:	bd38      	pop	{r3, r4, r5, pc}
 80157e4:	20003e7c 	.word	0x20003e7c

080157e8 <__swbuf_r>:
 80157e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80157ea:	460e      	mov	r6, r1
 80157ec:	4614      	mov	r4, r2
 80157ee:	4605      	mov	r5, r0
 80157f0:	b118      	cbz	r0, 80157fa <__swbuf_r+0x12>
 80157f2:	6983      	ldr	r3, [r0, #24]
 80157f4:	b90b      	cbnz	r3, 80157fa <__swbuf_r+0x12>
 80157f6:	f000 f9d9 	bl	8015bac <__sinit>
 80157fa:	4b21      	ldr	r3, [pc, #132]	; (8015880 <__swbuf_r+0x98>)
 80157fc:	429c      	cmp	r4, r3
 80157fe:	d12b      	bne.n	8015858 <__swbuf_r+0x70>
 8015800:	686c      	ldr	r4, [r5, #4]
 8015802:	69a3      	ldr	r3, [r4, #24]
 8015804:	60a3      	str	r3, [r4, #8]
 8015806:	89a3      	ldrh	r3, [r4, #12]
 8015808:	071a      	lsls	r2, r3, #28
 801580a:	d52f      	bpl.n	801586c <__swbuf_r+0x84>
 801580c:	6923      	ldr	r3, [r4, #16]
 801580e:	b36b      	cbz	r3, 801586c <__swbuf_r+0x84>
 8015810:	6923      	ldr	r3, [r4, #16]
 8015812:	6820      	ldr	r0, [r4, #0]
 8015814:	1ac0      	subs	r0, r0, r3
 8015816:	6963      	ldr	r3, [r4, #20]
 8015818:	b2f6      	uxtb	r6, r6
 801581a:	4283      	cmp	r3, r0
 801581c:	4637      	mov	r7, r6
 801581e:	dc04      	bgt.n	801582a <__swbuf_r+0x42>
 8015820:	4621      	mov	r1, r4
 8015822:	4628      	mov	r0, r5
 8015824:	f000 f92e 	bl	8015a84 <_fflush_r>
 8015828:	bb30      	cbnz	r0, 8015878 <__swbuf_r+0x90>
 801582a:	68a3      	ldr	r3, [r4, #8]
 801582c:	3b01      	subs	r3, #1
 801582e:	60a3      	str	r3, [r4, #8]
 8015830:	6823      	ldr	r3, [r4, #0]
 8015832:	1c5a      	adds	r2, r3, #1
 8015834:	6022      	str	r2, [r4, #0]
 8015836:	701e      	strb	r6, [r3, #0]
 8015838:	6963      	ldr	r3, [r4, #20]
 801583a:	3001      	adds	r0, #1
 801583c:	4283      	cmp	r3, r0
 801583e:	d004      	beq.n	801584a <__swbuf_r+0x62>
 8015840:	89a3      	ldrh	r3, [r4, #12]
 8015842:	07db      	lsls	r3, r3, #31
 8015844:	d506      	bpl.n	8015854 <__swbuf_r+0x6c>
 8015846:	2e0a      	cmp	r6, #10
 8015848:	d104      	bne.n	8015854 <__swbuf_r+0x6c>
 801584a:	4621      	mov	r1, r4
 801584c:	4628      	mov	r0, r5
 801584e:	f000 f919 	bl	8015a84 <_fflush_r>
 8015852:	b988      	cbnz	r0, 8015878 <__swbuf_r+0x90>
 8015854:	4638      	mov	r0, r7
 8015856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015858:	4b0a      	ldr	r3, [pc, #40]	; (8015884 <__swbuf_r+0x9c>)
 801585a:	429c      	cmp	r4, r3
 801585c:	d101      	bne.n	8015862 <__swbuf_r+0x7a>
 801585e:	68ac      	ldr	r4, [r5, #8]
 8015860:	e7cf      	b.n	8015802 <__swbuf_r+0x1a>
 8015862:	4b09      	ldr	r3, [pc, #36]	; (8015888 <__swbuf_r+0xa0>)
 8015864:	429c      	cmp	r4, r3
 8015866:	bf08      	it	eq
 8015868:	68ec      	ldreq	r4, [r5, #12]
 801586a:	e7ca      	b.n	8015802 <__swbuf_r+0x1a>
 801586c:	4621      	mov	r1, r4
 801586e:	4628      	mov	r0, r5
 8015870:	f000 f80c 	bl	801588c <__swsetup_r>
 8015874:	2800      	cmp	r0, #0
 8015876:	d0cb      	beq.n	8015810 <__swbuf_r+0x28>
 8015878:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801587c:	e7ea      	b.n	8015854 <__swbuf_r+0x6c>
 801587e:	bf00      	nop
 8015880:	08017b44 	.word	0x08017b44
 8015884:	08017b64 	.word	0x08017b64
 8015888:	08017b24 	.word	0x08017b24

0801588c <__swsetup_r>:
 801588c:	4b32      	ldr	r3, [pc, #200]	; (8015958 <__swsetup_r+0xcc>)
 801588e:	b570      	push	{r4, r5, r6, lr}
 8015890:	681d      	ldr	r5, [r3, #0]
 8015892:	4606      	mov	r6, r0
 8015894:	460c      	mov	r4, r1
 8015896:	b125      	cbz	r5, 80158a2 <__swsetup_r+0x16>
 8015898:	69ab      	ldr	r3, [r5, #24]
 801589a:	b913      	cbnz	r3, 80158a2 <__swsetup_r+0x16>
 801589c:	4628      	mov	r0, r5
 801589e:	f000 f985 	bl	8015bac <__sinit>
 80158a2:	4b2e      	ldr	r3, [pc, #184]	; (801595c <__swsetup_r+0xd0>)
 80158a4:	429c      	cmp	r4, r3
 80158a6:	d10f      	bne.n	80158c8 <__swsetup_r+0x3c>
 80158a8:	686c      	ldr	r4, [r5, #4]
 80158aa:	89a3      	ldrh	r3, [r4, #12]
 80158ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80158b0:	0719      	lsls	r1, r3, #28
 80158b2:	d42c      	bmi.n	801590e <__swsetup_r+0x82>
 80158b4:	06dd      	lsls	r5, r3, #27
 80158b6:	d411      	bmi.n	80158dc <__swsetup_r+0x50>
 80158b8:	2309      	movs	r3, #9
 80158ba:	6033      	str	r3, [r6, #0]
 80158bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80158c0:	81a3      	strh	r3, [r4, #12]
 80158c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80158c6:	e03e      	b.n	8015946 <__swsetup_r+0xba>
 80158c8:	4b25      	ldr	r3, [pc, #148]	; (8015960 <__swsetup_r+0xd4>)
 80158ca:	429c      	cmp	r4, r3
 80158cc:	d101      	bne.n	80158d2 <__swsetup_r+0x46>
 80158ce:	68ac      	ldr	r4, [r5, #8]
 80158d0:	e7eb      	b.n	80158aa <__swsetup_r+0x1e>
 80158d2:	4b24      	ldr	r3, [pc, #144]	; (8015964 <__swsetup_r+0xd8>)
 80158d4:	429c      	cmp	r4, r3
 80158d6:	bf08      	it	eq
 80158d8:	68ec      	ldreq	r4, [r5, #12]
 80158da:	e7e6      	b.n	80158aa <__swsetup_r+0x1e>
 80158dc:	0758      	lsls	r0, r3, #29
 80158de:	d512      	bpl.n	8015906 <__swsetup_r+0x7a>
 80158e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80158e2:	b141      	cbz	r1, 80158f6 <__swsetup_r+0x6a>
 80158e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80158e8:	4299      	cmp	r1, r3
 80158ea:	d002      	beq.n	80158f2 <__swsetup_r+0x66>
 80158ec:	4630      	mov	r0, r6
 80158ee:	f7ff fab3 	bl	8014e58 <_free_r>
 80158f2:	2300      	movs	r3, #0
 80158f4:	6363      	str	r3, [r4, #52]	; 0x34
 80158f6:	89a3      	ldrh	r3, [r4, #12]
 80158f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80158fc:	81a3      	strh	r3, [r4, #12]
 80158fe:	2300      	movs	r3, #0
 8015900:	6063      	str	r3, [r4, #4]
 8015902:	6923      	ldr	r3, [r4, #16]
 8015904:	6023      	str	r3, [r4, #0]
 8015906:	89a3      	ldrh	r3, [r4, #12]
 8015908:	f043 0308 	orr.w	r3, r3, #8
 801590c:	81a3      	strh	r3, [r4, #12]
 801590e:	6923      	ldr	r3, [r4, #16]
 8015910:	b94b      	cbnz	r3, 8015926 <__swsetup_r+0x9a>
 8015912:	89a3      	ldrh	r3, [r4, #12]
 8015914:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801591c:	d003      	beq.n	8015926 <__swsetup_r+0x9a>
 801591e:	4621      	mov	r1, r4
 8015920:	4630      	mov	r0, r6
 8015922:	f000 fa05 	bl	8015d30 <__smakebuf_r>
 8015926:	89a0      	ldrh	r0, [r4, #12]
 8015928:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801592c:	f010 0301 	ands.w	r3, r0, #1
 8015930:	d00a      	beq.n	8015948 <__swsetup_r+0xbc>
 8015932:	2300      	movs	r3, #0
 8015934:	60a3      	str	r3, [r4, #8]
 8015936:	6963      	ldr	r3, [r4, #20]
 8015938:	425b      	negs	r3, r3
 801593a:	61a3      	str	r3, [r4, #24]
 801593c:	6923      	ldr	r3, [r4, #16]
 801593e:	b943      	cbnz	r3, 8015952 <__swsetup_r+0xc6>
 8015940:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015944:	d1ba      	bne.n	80158bc <__swsetup_r+0x30>
 8015946:	bd70      	pop	{r4, r5, r6, pc}
 8015948:	0781      	lsls	r1, r0, #30
 801594a:	bf58      	it	pl
 801594c:	6963      	ldrpl	r3, [r4, #20]
 801594e:	60a3      	str	r3, [r4, #8]
 8015950:	e7f4      	b.n	801593c <__swsetup_r+0xb0>
 8015952:	2000      	movs	r0, #0
 8015954:	e7f7      	b.n	8015946 <__swsetup_r+0xba>
 8015956:	bf00      	nop
 8015958:	20000234 	.word	0x20000234
 801595c:	08017b44 	.word	0x08017b44
 8015960:	08017b64 	.word	0x08017b64
 8015964:	08017b24 	.word	0x08017b24

08015968 <abort>:
 8015968:	b508      	push	{r3, lr}
 801596a:	2006      	movs	r0, #6
 801596c:	f000 fa50 	bl	8015e10 <raise>
 8015970:	2001      	movs	r0, #1
 8015972:	f7ef fff1 	bl	8005958 <_exit>
	...

08015978 <__sflush_r>:
 8015978:	898a      	ldrh	r2, [r1, #12]
 801597a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801597e:	4605      	mov	r5, r0
 8015980:	0710      	lsls	r0, r2, #28
 8015982:	460c      	mov	r4, r1
 8015984:	d458      	bmi.n	8015a38 <__sflush_r+0xc0>
 8015986:	684b      	ldr	r3, [r1, #4]
 8015988:	2b00      	cmp	r3, #0
 801598a:	dc05      	bgt.n	8015998 <__sflush_r+0x20>
 801598c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801598e:	2b00      	cmp	r3, #0
 8015990:	dc02      	bgt.n	8015998 <__sflush_r+0x20>
 8015992:	2000      	movs	r0, #0
 8015994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015998:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801599a:	2e00      	cmp	r6, #0
 801599c:	d0f9      	beq.n	8015992 <__sflush_r+0x1a>
 801599e:	2300      	movs	r3, #0
 80159a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80159a4:	682f      	ldr	r7, [r5, #0]
 80159a6:	602b      	str	r3, [r5, #0]
 80159a8:	d032      	beq.n	8015a10 <__sflush_r+0x98>
 80159aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80159ac:	89a3      	ldrh	r3, [r4, #12]
 80159ae:	075a      	lsls	r2, r3, #29
 80159b0:	d505      	bpl.n	80159be <__sflush_r+0x46>
 80159b2:	6863      	ldr	r3, [r4, #4]
 80159b4:	1ac0      	subs	r0, r0, r3
 80159b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80159b8:	b10b      	cbz	r3, 80159be <__sflush_r+0x46>
 80159ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80159bc:	1ac0      	subs	r0, r0, r3
 80159be:	2300      	movs	r3, #0
 80159c0:	4602      	mov	r2, r0
 80159c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80159c4:	6a21      	ldr	r1, [r4, #32]
 80159c6:	4628      	mov	r0, r5
 80159c8:	47b0      	blx	r6
 80159ca:	1c43      	adds	r3, r0, #1
 80159cc:	89a3      	ldrh	r3, [r4, #12]
 80159ce:	d106      	bne.n	80159de <__sflush_r+0x66>
 80159d0:	6829      	ldr	r1, [r5, #0]
 80159d2:	291d      	cmp	r1, #29
 80159d4:	d82c      	bhi.n	8015a30 <__sflush_r+0xb8>
 80159d6:	4a2a      	ldr	r2, [pc, #168]	; (8015a80 <__sflush_r+0x108>)
 80159d8:	40ca      	lsrs	r2, r1
 80159da:	07d6      	lsls	r6, r2, #31
 80159dc:	d528      	bpl.n	8015a30 <__sflush_r+0xb8>
 80159de:	2200      	movs	r2, #0
 80159e0:	6062      	str	r2, [r4, #4]
 80159e2:	04d9      	lsls	r1, r3, #19
 80159e4:	6922      	ldr	r2, [r4, #16]
 80159e6:	6022      	str	r2, [r4, #0]
 80159e8:	d504      	bpl.n	80159f4 <__sflush_r+0x7c>
 80159ea:	1c42      	adds	r2, r0, #1
 80159ec:	d101      	bne.n	80159f2 <__sflush_r+0x7a>
 80159ee:	682b      	ldr	r3, [r5, #0]
 80159f0:	b903      	cbnz	r3, 80159f4 <__sflush_r+0x7c>
 80159f2:	6560      	str	r0, [r4, #84]	; 0x54
 80159f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80159f6:	602f      	str	r7, [r5, #0]
 80159f8:	2900      	cmp	r1, #0
 80159fa:	d0ca      	beq.n	8015992 <__sflush_r+0x1a>
 80159fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015a00:	4299      	cmp	r1, r3
 8015a02:	d002      	beq.n	8015a0a <__sflush_r+0x92>
 8015a04:	4628      	mov	r0, r5
 8015a06:	f7ff fa27 	bl	8014e58 <_free_r>
 8015a0a:	2000      	movs	r0, #0
 8015a0c:	6360      	str	r0, [r4, #52]	; 0x34
 8015a0e:	e7c1      	b.n	8015994 <__sflush_r+0x1c>
 8015a10:	6a21      	ldr	r1, [r4, #32]
 8015a12:	2301      	movs	r3, #1
 8015a14:	4628      	mov	r0, r5
 8015a16:	47b0      	blx	r6
 8015a18:	1c41      	adds	r1, r0, #1
 8015a1a:	d1c7      	bne.n	80159ac <__sflush_r+0x34>
 8015a1c:	682b      	ldr	r3, [r5, #0]
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d0c4      	beq.n	80159ac <__sflush_r+0x34>
 8015a22:	2b1d      	cmp	r3, #29
 8015a24:	d001      	beq.n	8015a2a <__sflush_r+0xb2>
 8015a26:	2b16      	cmp	r3, #22
 8015a28:	d101      	bne.n	8015a2e <__sflush_r+0xb6>
 8015a2a:	602f      	str	r7, [r5, #0]
 8015a2c:	e7b1      	b.n	8015992 <__sflush_r+0x1a>
 8015a2e:	89a3      	ldrh	r3, [r4, #12]
 8015a30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015a34:	81a3      	strh	r3, [r4, #12]
 8015a36:	e7ad      	b.n	8015994 <__sflush_r+0x1c>
 8015a38:	690f      	ldr	r7, [r1, #16]
 8015a3a:	2f00      	cmp	r7, #0
 8015a3c:	d0a9      	beq.n	8015992 <__sflush_r+0x1a>
 8015a3e:	0793      	lsls	r3, r2, #30
 8015a40:	680e      	ldr	r6, [r1, #0]
 8015a42:	bf08      	it	eq
 8015a44:	694b      	ldreq	r3, [r1, #20]
 8015a46:	600f      	str	r7, [r1, #0]
 8015a48:	bf18      	it	ne
 8015a4a:	2300      	movne	r3, #0
 8015a4c:	eba6 0807 	sub.w	r8, r6, r7
 8015a50:	608b      	str	r3, [r1, #8]
 8015a52:	f1b8 0f00 	cmp.w	r8, #0
 8015a56:	dd9c      	ble.n	8015992 <__sflush_r+0x1a>
 8015a58:	6a21      	ldr	r1, [r4, #32]
 8015a5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015a5c:	4643      	mov	r3, r8
 8015a5e:	463a      	mov	r2, r7
 8015a60:	4628      	mov	r0, r5
 8015a62:	47b0      	blx	r6
 8015a64:	2800      	cmp	r0, #0
 8015a66:	dc06      	bgt.n	8015a76 <__sflush_r+0xfe>
 8015a68:	89a3      	ldrh	r3, [r4, #12]
 8015a6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015a6e:	81a3      	strh	r3, [r4, #12]
 8015a70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015a74:	e78e      	b.n	8015994 <__sflush_r+0x1c>
 8015a76:	4407      	add	r7, r0
 8015a78:	eba8 0800 	sub.w	r8, r8, r0
 8015a7c:	e7e9      	b.n	8015a52 <__sflush_r+0xda>
 8015a7e:	bf00      	nop
 8015a80:	20400001 	.word	0x20400001

08015a84 <_fflush_r>:
 8015a84:	b538      	push	{r3, r4, r5, lr}
 8015a86:	690b      	ldr	r3, [r1, #16]
 8015a88:	4605      	mov	r5, r0
 8015a8a:	460c      	mov	r4, r1
 8015a8c:	b913      	cbnz	r3, 8015a94 <_fflush_r+0x10>
 8015a8e:	2500      	movs	r5, #0
 8015a90:	4628      	mov	r0, r5
 8015a92:	bd38      	pop	{r3, r4, r5, pc}
 8015a94:	b118      	cbz	r0, 8015a9e <_fflush_r+0x1a>
 8015a96:	6983      	ldr	r3, [r0, #24]
 8015a98:	b90b      	cbnz	r3, 8015a9e <_fflush_r+0x1a>
 8015a9a:	f000 f887 	bl	8015bac <__sinit>
 8015a9e:	4b14      	ldr	r3, [pc, #80]	; (8015af0 <_fflush_r+0x6c>)
 8015aa0:	429c      	cmp	r4, r3
 8015aa2:	d11b      	bne.n	8015adc <_fflush_r+0x58>
 8015aa4:	686c      	ldr	r4, [r5, #4]
 8015aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d0ef      	beq.n	8015a8e <_fflush_r+0xa>
 8015aae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015ab0:	07d0      	lsls	r0, r2, #31
 8015ab2:	d404      	bmi.n	8015abe <_fflush_r+0x3a>
 8015ab4:	0599      	lsls	r1, r3, #22
 8015ab6:	d402      	bmi.n	8015abe <_fflush_r+0x3a>
 8015ab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015aba:	f7fe fcd8 	bl	801446e <__retarget_lock_acquire_recursive>
 8015abe:	4628      	mov	r0, r5
 8015ac0:	4621      	mov	r1, r4
 8015ac2:	f7ff ff59 	bl	8015978 <__sflush_r>
 8015ac6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015ac8:	07da      	lsls	r2, r3, #31
 8015aca:	4605      	mov	r5, r0
 8015acc:	d4e0      	bmi.n	8015a90 <_fflush_r+0xc>
 8015ace:	89a3      	ldrh	r3, [r4, #12]
 8015ad0:	059b      	lsls	r3, r3, #22
 8015ad2:	d4dd      	bmi.n	8015a90 <_fflush_r+0xc>
 8015ad4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015ad6:	f7fe fccb 	bl	8014470 <__retarget_lock_release_recursive>
 8015ada:	e7d9      	b.n	8015a90 <_fflush_r+0xc>
 8015adc:	4b05      	ldr	r3, [pc, #20]	; (8015af4 <_fflush_r+0x70>)
 8015ade:	429c      	cmp	r4, r3
 8015ae0:	d101      	bne.n	8015ae6 <_fflush_r+0x62>
 8015ae2:	68ac      	ldr	r4, [r5, #8]
 8015ae4:	e7df      	b.n	8015aa6 <_fflush_r+0x22>
 8015ae6:	4b04      	ldr	r3, [pc, #16]	; (8015af8 <_fflush_r+0x74>)
 8015ae8:	429c      	cmp	r4, r3
 8015aea:	bf08      	it	eq
 8015aec:	68ec      	ldreq	r4, [r5, #12]
 8015aee:	e7da      	b.n	8015aa6 <_fflush_r+0x22>
 8015af0:	08017b44 	.word	0x08017b44
 8015af4:	08017b64 	.word	0x08017b64
 8015af8:	08017b24 	.word	0x08017b24

08015afc <std>:
 8015afc:	2300      	movs	r3, #0
 8015afe:	b510      	push	{r4, lr}
 8015b00:	4604      	mov	r4, r0
 8015b02:	e9c0 3300 	strd	r3, r3, [r0]
 8015b06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015b0a:	6083      	str	r3, [r0, #8]
 8015b0c:	8181      	strh	r1, [r0, #12]
 8015b0e:	6643      	str	r3, [r0, #100]	; 0x64
 8015b10:	81c2      	strh	r2, [r0, #14]
 8015b12:	6183      	str	r3, [r0, #24]
 8015b14:	4619      	mov	r1, r3
 8015b16:	2208      	movs	r2, #8
 8015b18:	305c      	adds	r0, #92	; 0x5c
 8015b1a:	f7fb fefb 	bl	8011914 <memset>
 8015b1e:	4b05      	ldr	r3, [pc, #20]	; (8015b34 <std+0x38>)
 8015b20:	6263      	str	r3, [r4, #36]	; 0x24
 8015b22:	4b05      	ldr	r3, [pc, #20]	; (8015b38 <std+0x3c>)
 8015b24:	62a3      	str	r3, [r4, #40]	; 0x28
 8015b26:	4b05      	ldr	r3, [pc, #20]	; (8015b3c <std+0x40>)
 8015b28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015b2a:	4b05      	ldr	r3, [pc, #20]	; (8015b40 <std+0x44>)
 8015b2c:	6224      	str	r4, [r4, #32]
 8015b2e:	6323      	str	r3, [r4, #48]	; 0x30
 8015b30:	bd10      	pop	{r4, pc}
 8015b32:	bf00      	nop
 8015b34:	08015301 	.word	0x08015301
 8015b38:	08015323 	.word	0x08015323
 8015b3c:	0801535b 	.word	0x0801535b
 8015b40:	0801537f 	.word	0x0801537f

08015b44 <_cleanup_r>:
 8015b44:	4901      	ldr	r1, [pc, #4]	; (8015b4c <_cleanup_r+0x8>)
 8015b46:	f000 b8af 	b.w	8015ca8 <_fwalk_reent>
 8015b4a:	bf00      	nop
 8015b4c:	08015a85 	.word	0x08015a85

08015b50 <__sfmoreglue>:
 8015b50:	b570      	push	{r4, r5, r6, lr}
 8015b52:	2268      	movs	r2, #104	; 0x68
 8015b54:	1e4d      	subs	r5, r1, #1
 8015b56:	4355      	muls	r5, r2
 8015b58:	460e      	mov	r6, r1
 8015b5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015b5e:	f7ff f9e7 	bl	8014f30 <_malloc_r>
 8015b62:	4604      	mov	r4, r0
 8015b64:	b140      	cbz	r0, 8015b78 <__sfmoreglue+0x28>
 8015b66:	2100      	movs	r1, #0
 8015b68:	e9c0 1600 	strd	r1, r6, [r0]
 8015b6c:	300c      	adds	r0, #12
 8015b6e:	60a0      	str	r0, [r4, #8]
 8015b70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015b74:	f7fb fece 	bl	8011914 <memset>
 8015b78:	4620      	mov	r0, r4
 8015b7a:	bd70      	pop	{r4, r5, r6, pc}

08015b7c <__sfp_lock_acquire>:
 8015b7c:	4801      	ldr	r0, [pc, #4]	; (8015b84 <__sfp_lock_acquire+0x8>)
 8015b7e:	f7fe bc76 	b.w	801446e <__retarget_lock_acquire_recursive>
 8015b82:	bf00      	nop
 8015b84:	20003e71 	.word	0x20003e71

08015b88 <__sfp_lock_release>:
 8015b88:	4801      	ldr	r0, [pc, #4]	; (8015b90 <__sfp_lock_release+0x8>)
 8015b8a:	f7fe bc71 	b.w	8014470 <__retarget_lock_release_recursive>
 8015b8e:	bf00      	nop
 8015b90:	20003e71 	.word	0x20003e71

08015b94 <__sinit_lock_acquire>:
 8015b94:	4801      	ldr	r0, [pc, #4]	; (8015b9c <__sinit_lock_acquire+0x8>)
 8015b96:	f7fe bc6a 	b.w	801446e <__retarget_lock_acquire_recursive>
 8015b9a:	bf00      	nop
 8015b9c:	20003e72 	.word	0x20003e72

08015ba0 <__sinit_lock_release>:
 8015ba0:	4801      	ldr	r0, [pc, #4]	; (8015ba8 <__sinit_lock_release+0x8>)
 8015ba2:	f7fe bc65 	b.w	8014470 <__retarget_lock_release_recursive>
 8015ba6:	bf00      	nop
 8015ba8:	20003e72 	.word	0x20003e72

08015bac <__sinit>:
 8015bac:	b510      	push	{r4, lr}
 8015bae:	4604      	mov	r4, r0
 8015bb0:	f7ff fff0 	bl	8015b94 <__sinit_lock_acquire>
 8015bb4:	69a3      	ldr	r3, [r4, #24]
 8015bb6:	b11b      	cbz	r3, 8015bc0 <__sinit+0x14>
 8015bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015bbc:	f7ff bff0 	b.w	8015ba0 <__sinit_lock_release>
 8015bc0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015bc4:	6523      	str	r3, [r4, #80]	; 0x50
 8015bc6:	4b13      	ldr	r3, [pc, #76]	; (8015c14 <__sinit+0x68>)
 8015bc8:	4a13      	ldr	r2, [pc, #76]	; (8015c18 <__sinit+0x6c>)
 8015bca:	681b      	ldr	r3, [r3, #0]
 8015bcc:	62a2      	str	r2, [r4, #40]	; 0x28
 8015bce:	42a3      	cmp	r3, r4
 8015bd0:	bf04      	itt	eq
 8015bd2:	2301      	moveq	r3, #1
 8015bd4:	61a3      	streq	r3, [r4, #24]
 8015bd6:	4620      	mov	r0, r4
 8015bd8:	f000 f820 	bl	8015c1c <__sfp>
 8015bdc:	6060      	str	r0, [r4, #4]
 8015bde:	4620      	mov	r0, r4
 8015be0:	f000 f81c 	bl	8015c1c <__sfp>
 8015be4:	60a0      	str	r0, [r4, #8]
 8015be6:	4620      	mov	r0, r4
 8015be8:	f000 f818 	bl	8015c1c <__sfp>
 8015bec:	2200      	movs	r2, #0
 8015bee:	60e0      	str	r0, [r4, #12]
 8015bf0:	2104      	movs	r1, #4
 8015bf2:	6860      	ldr	r0, [r4, #4]
 8015bf4:	f7ff ff82 	bl	8015afc <std>
 8015bf8:	68a0      	ldr	r0, [r4, #8]
 8015bfa:	2201      	movs	r2, #1
 8015bfc:	2109      	movs	r1, #9
 8015bfe:	f7ff ff7d 	bl	8015afc <std>
 8015c02:	68e0      	ldr	r0, [r4, #12]
 8015c04:	2202      	movs	r2, #2
 8015c06:	2112      	movs	r1, #18
 8015c08:	f7ff ff78 	bl	8015afc <std>
 8015c0c:	2301      	movs	r3, #1
 8015c0e:	61a3      	str	r3, [r4, #24]
 8015c10:	e7d2      	b.n	8015bb8 <__sinit+0xc>
 8015c12:	bf00      	nop
 8015c14:	080177e4 	.word	0x080177e4
 8015c18:	08015b45 	.word	0x08015b45

08015c1c <__sfp>:
 8015c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c1e:	4607      	mov	r7, r0
 8015c20:	f7ff ffac 	bl	8015b7c <__sfp_lock_acquire>
 8015c24:	4b1e      	ldr	r3, [pc, #120]	; (8015ca0 <__sfp+0x84>)
 8015c26:	681e      	ldr	r6, [r3, #0]
 8015c28:	69b3      	ldr	r3, [r6, #24]
 8015c2a:	b913      	cbnz	r3, 8015c32 <__sfp+0x16>
 8015c2c:	4630      	mov	r0, r6
 8015c2e:	f7ff ffbd 	bl	8015bac <__sinit>
 8015c32:	3648      	adds	r6, #72	; 0x48
 8015c34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015c38:	3b01      	subs	r3, #1
 8015c3a:	d503      	bpl.n	8015c44 <__sfp+0x28>
 8015c3c:	6833      	ldr	r3, [r6, #0]
 8015c3e:	b30b      	cbz	r3, 8015c84 <__sfp+0x68>
 8015c40:	6836      	ldr	r6, [r6, #0]
 8015c42:	e7f7      	b.n	8015c34 <__sfp+0x18>
 8015c44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015c48:	b9d5      	cbnz	r5, 8015c80 <__sfp+0x64>
 8015c4a:	4b16      	ldr	r3, [pc, #88]	; (8015ca4 <__sfp+0x88>)
 8015c4c:	60e3      	str	r3, [r4, #12]
 8015c4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015c52:	6665      	str	r5, [r4, #100]	; 0x64
 8015c54:	f7fe fc0a 	bl	801446c <__retarget_lock_init_recursive>
 8015c58:	f7ff ff96 	bl	8015b88 <__sfp_lock_release>
 8015c5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015c60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015c64:	6025      	str	r5, [r4, #0]
 8015c66:	61a5      	str	r5, [r4, #24]
 8015c68:	2208      	movs	r2, #8
 8015c6a:	4629      	mov	r1, r5
 8015c6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015c70:	f7fb fe50 	bl	8011914 <memset>
 8015c74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015c78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015c7c:	4620      	mov	r0, r4
 8015c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c80:	3468      	adds	r4, #104	; 0x68
 8015c82:	e7d9      	b.n	8015c38 <__sfp+0x1c>
 8015c84:	2104      	movs	r1, #4
 8015c86:	4638      	mov	r0, r7
 8015c88:	f7ff ff62 	bl	8015b50 <__sfmoreglue>
 8015c8c:	4604      	mov	r4, r0
 8015c8e:	6030      	str	r0, [r6, #0]
 8015c90:	2800      	cmp	r0, #0
 8015c92:	d1d5      	bne.n	8015c40 <__sfp+0x24>
 8015c94:	f7ff ff78 	bl	8015b88 <__sfp_lock_release>
 8015c98:	230c      	movs	r3, #12
 8015c9a:	603b      	str	r3, [r7, #0]
 8015c9c:	e7ee      	b.n	8015c7c <__sfp+0x60>
 8015c9e:	bf00      	nop
 8015ca0:	080177e4 	.word	0x080177e4
 8015ca4:	ffff0001 	.word	0xffff0001

08015ca8 <_fwalk_reent>:
 8015ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015cac:	4606      	mov	r6, r0
 8015cae:	4688      	mov	r8, r1
 8015cb0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015cb4:	2700      	movs	r7, #0
 8015cb6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015cba:	f1b9 0901 	subs.w	r9, r9, #1
 8015cbe:	d505      	bpl.n	8015ccc <_fwalk_reent+0x24>
 8015cc0:	6824      	ldr	r4, [r4, #0]
 8015cc2:	2c00      	cmp	r4, #0
 8015cc4:	d1f7      	bne.n	8015cb6 <_fwalk_reent+0xe>
 8015cc6:	4638      	mov	r0, r7
 8015cc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015ccc:	89ab      	ldrh	r3, [r5, #12]
 8015cce:	2b01      	cmp	r3, #1
 8015cd0:	d907      	bls.n	8015ce2 <_fwalk_reent+0x3a>
 8015cd2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015cd6:	3301      	adds	r3, #1
 8015cd8:	d003      	beq.n	8015ce2 <_fwalk_reent+0x3a>
 8015cda:	4629      	mov	r1, r5
 8015cdc:	4630      	mov	r0, r6
 8015cde:	47c0      	blx	r8
 8015ce0:	4307      	orrs	r7, r0
 8015ce2:	3568      	adds	r5, #104	; 0x68
 8015ce4:	e7e9      	b.n	8015cba <_fwalk_reent+0x12>

08015ce6 <__swhatbuf_r>:
 8015ce6:	b570      	push	{r4, r5, r6, lr}
 8015ce8:	460e      	mov	r6, r1
 8015cea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015cee:	2900      	cmp	r1, #0
 8015cf0:	b096      	sub	sp, #88	; 0x58
 8015cf2:	4614      	mov	r4, r2
 8015cf4:	461d      	mov	r5, r3
 8015cf6:	da08      	bge.n	8015d0a <__swhatbuf_r+0x24>
 8015cf8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015cfc:	2200      	movs	r2, #0
 8015cfe:	602a      	str	r2, [r5, #0]
 8015d00:	061a      	lsls	r2, r3, #24
 8015d02:	d410      	bmi.n	8015d26 <__swhatbuf_r+0x40>
 8015d04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015d08:	e00e      	b.n	8015d28 <__swhatbuf_r+0x42>
 8015d0a:	466a      	mov	r2, sp
 8015d0c:	f000 f89c 	bl	8015e48 <_fstat_r>
 8015d10:	2800      	cmp	r0, #0
 8015d12:	dbf1      	blt.n	8015cf8 <__swhatbuf_r+0x12>
 8015d14:	9a01      	ldr	r2, [sp, #4]
 8015d16:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015d1a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015d1e:	425a      	negs	r2, r3
 8015d20:	415a      	adcs	r2, r3
 8015d22:	602a      	str	r2, [r5, #0]
 8015d24:	e7ee      	b.n	8015d04 <__swhatbuf_r+0x1e>
 8015d26:	2340      	movs	r3, #64	; 0x40
 8015d28:	2000      	movs	r0, #0
 8015d2a:	6023      	str	r3, [r4, #0]
 8015d2c:	b016      	add	sp, #88	; 0x58
 8015d2e:	bd70      	pop	{r4, r5, r6, pc}

08015d30 <__smakebuf_r>:
 8015d30:	898b      	ldrh	r3, [r1, #12]
 8015d32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015d34:	079d      	lsls	r5, r3, #30
 8015d36:	4606      	mov	r6, r0
 8015d38:	460c      	mov	r4, r1
 8015d3a:	d507      	bpl.n	8015d4c <__smakebuf_r+0x1c>
 8015d3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015d40:	6023      	str	r3, [r4, #0]
 8015d42:	6123      	str	r3, [r4, #16]
 8015d44:	2301      	movs	r3, #1
 8015d46:	6163      	str	r3, [r4, #20]
 8015d48:	b002      	add	sp, #8
 8015d4a:	bd70      	pop	{r4, r5, r6, pc}
 8015d4c:	ab01      	add	r3, sp, #4
 8015d4e:	466a      	mov	r2, sp
 8015d50:	f7ff ffc9 	bl	8015ce6 <__swhatbuf_r>
 8015d54:	9900      	ldr	r1, [sp, #0]
 8015d56:	4605      	mov	r5, r0
 8015d58:	4630      	mov	r0, r6
 8015d5a:	f7ff f8e9 	bl	8014f30 <_malloc_r>
 8015d5e:	b948      	cbnz	r0, 8015d74 <__smakebuf_r+0x44>
 8015d60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015d64:	059a      	lsls	r2, r3, #22
 8015d66:	d4ef      	bmi.n	8015d48 <__smakebuf_r+0x18>
 8015d68:	f023 0303 	bic.w	r3, r3, #3
 8015d6c:	f043 0302 	orr.w	r3, r3, #2
 8015d70:	81a3      	strh	r3, [r4, #12]
 8015d72:	e7e3      	b.n	8015d3c <__smakebuf_r+0xc>
 8015d74:	4b0d      	ldr	r3, [pc, #52]	; (8015dac <__smakebuf_r+0x7c>)
 8015d76:	62b3      	str	r3, [r6, #40]	; 0x28
 8015d78:	89a3      	ldrh	r3, [r4, #12]
 8015d7a:	6020      	str	r0, [r4, #0]
 8015d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015d80:	81a3      	strh	r3, [r4, #12]
 8015d82:	9b00      	ldr	r3, [sp, #0]
 8015d84:	6163      	str	r3, [r4, #20]
 8015d86:	9b01      	ldr	r3, [sp, #4]
 8015d88:	6120      	str	r0, [r4, #16]
 8015d8a:	b15b      	cbz	r3, 8015da4 <__smakebuf_r+0x74>
 8015d8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015d90:	4630      	mov	r0, r6
 8015d92:	f000 f86b 	bl	8015e6c <_isatty_r>
 8015d96:	b128      	cbz	r0, 8015da4 <__smakebuf_r+0x74>
 8015d98:	89a3      	ldrh	r3, [r4, #12]
 8015d9a:	f023 0303 	bic.w	r3, r3, #3
 8015d9e:	f043 0301 	orr.w	r3, r3, #1
 8015da2:	81a3      	strh	r3, [r4, #12]
 8015da4:	89a0      	ldrh	r0, [r4, #12]
 8015da6:	4305      	orrs	r5, r0
 8015da8:	81a5      	strh	r5, [r4, #12]
 8015daa:	e7cd      	b.n	8015d48 <__smakebuf_r+0x18>
 8015dac:	08015b45 	.word	0x08015b45

08015db0 <_malloc_usable_size_r>:
 8015db0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015db4:	1f18      	subs	r0, r3, #4
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	bfbc      	itt	lt
 8015dba:	580b      	ldrlt	r3, [r1, r0]
 8015dbc:	18c0      	addlt	r0, r0, r3
 8015dbe:	4770      	bx	lr

08015dc0 <_raise_r>:
 8015dc0:	291f      	cmp	r1, #31
 8015dc2:	b538      	push	{r3, r4, r5, lr}
 8015dc4:	4604      	mov	r4, r0
 8015dc6:	460d      	mov	r5, r1
 8015dc8:	d904      	bls.n	8015dd4 <_raise_r+0x14>
 8015dca:	2316      	movs	r3, #22
 8015dcc:	6003      	str	r3, [r0, #0]
 8015dce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015dd2:	bd38      	pop	{r3, r4, r5, pc}
 8015dd4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015dd6:	b112      	cbz	r2, 8015dde <_raise_r+0x1e>
 8015dd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015ddc:	b94b      	cbnz	r3, 8015df2 <_raise_r+0x32>
 8015dde:	4620      	mov	r0, r4
 8015de0:	f000 f830 	bl	8015e44 <_getpid_r>
 8015de4:	462a      	mov	r2, r5
 8015de6:	4601      	mov	r1, r0
 8015de8:	4620      	mov	r0, r4
 8015dea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015dee:	f000 b817 	b.w	8015e20 <_kill_r>
 8015df2:	2b01      	cmp	r3, #1
 8015df4:	d00a      	beq.n	8015e0c <_raise_r+0x4c>
 8015df6:	1c59      	adds	r1, r3, #1
 8015df8:	d103      	bne.n	8015e02 <_raise_r+0x42>
 8015dfa:	2316      	movs	r3, #22
 8015dfc:	6003      	str	r3, [r0, #0]
 8015dfe:	2001      	movs	r0, #1
 8015e00:	e7e7      	b.n	8015dd2 <_raise_r+0x12>
 8015e02:	2400      	movs	r4, #0
 8015e04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015e08:	4628      	mov	r0, r5
 8015e0a:	4798      	blx	r3
 8015e0c:	2000      	movs	r0, #0
 8015e0e:	e7e0      	b.n	8015dd2 <_raise_r+0x12>

08015e10 <raise>:
 8015e10:	4b02      	ldr	r3, [pc, #8]	; (8015e1c <raise+0xc>)
 8015e12:	4601      	mov	r1, r0
 8015e14:	6818      	ldr	r0, [r3, #0]
 8015e16:	f7ff bfd3 	b.w	8015dc0 <_raise_r>
 8015e1a:	bf00      	nop
 8015e1c:	20000234 	.word	0x20000234

08015e20 <_kill_r>:
 8015e20:	b538      	push	{r3, r4, r5, lr}
 8015e22:	4d07      	ldr	r5, [pc, #28]	; (8015e40 <_kill_r+0x20>)
 8015e24:	2300      	movs	r3, #0
 8015e26:	4604      	mov	r4, r0
 8015e28:	4608      	mov	r0, r1
 8015e2a:	4611      	mov	r1, r2
 8015e2c:	602b      	str	r3, [r5, #0]
 8015e2e:	f7ef fd83 	bl	8005938 <_kill>
 8015e32:	1c43      	adds	r3, r0, #1
 8015e34:	d102      	bne.n	8015e3c <_kill_r+0x1c>
 8015e36:	682b      	ldr	r3, [r5, #0]
 8015e38:	b103      	cbz	r3, 8015e3c <_kill_r+0x1c>
 8015e3a:	6023      	str	r3, [r4, #0]
 8015e3c:	bd38      	pop	{r3, r4, r5, pc}
 8015e3e:	bf00      	nop
 8015e40:	20003e7c 	.word	0x20003e7c

08015e44 <_getpid_r>:
 8015e44:	f7ef bd70 	b.w	8005928 <_getpid>

08015e48 <_fstat_r>:
 8015e48:	b538      	push	{r3, r4, r5, lr}
 8015e4a:	4d07      	ldr	r5, [pc, #28]	; (8015e68 <_fstat_r+0x20>)
 8015e4c:	2300      	movs	r3, #0
 8015e4e:	4604      	mov	r4, r0
 8015e50:	4608      	mov	r0, r1
 8015e52:	4611      	mov	r1, r2
 8015e54:	602b      	str	r3, [r5, #0]
 8015e56:	f7ef fdce 	bl	80059f6 <_fstat>
 8015e5a:	1c43      	adds	r3, r0, #1
 8015e5c:	d102      	bne.n	8015e64 <_fstat_r+0x1c>
 8015e5e:	682b      	ldr	r3, [r5, #0]
 8015e60:	b103      	cbz	r3, 8015e64 <_fstat_r+0x1c>
 8015e62:	6023      	str	r3, [r4, #0]
 8015e64:	bd38      	pop	{r3, r4, r5, pc}
 8015e66:	bf00      	nop
 8015e68:	20003e7c 	.word	0x20003e7c

08015e6c <_isatty_r>:
 8015e6c:	b538      	push	{r3, r4, r5, lr}
 8015e6e:	4d06      	ldr	r5, [pc, #24]	; (8015e88 <_isatty_r+0x1c>)
 8015e70:	2300      	movs	r3, #0
 8015e72:	4604      	mov	r4, r0
 8015e74:	4608      	mov	r0, r1
 8015e76:	602b      	str	r3, [r5, #0]
 8015e78:	f7ef fdcd 	bl	8005a16 <_isatty>
 8015e7c:	1c43      	adds	r3, r0, #1
 8015e7e:	d102      	bne.n	8015e86 <_isatty_r+0x1a>
 8015e80:	682b      	ldr	r3, [r5, #0]
 8015e82:	b103      	cbz	r3, 8015e86 <_isatty_r+0x1a>
 8015e84:	6023      	str	r3, [r4, #0]
 8015e86:	bd38      	pop	{r3, r4, r5, pc}
 8015e88:	20003e7c 	.word	0x20003e7c

08015e8c <_init>:
 8015e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e8e:	bf00      	nop
 8015e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015e92:	bc08      	pop	{r3}
 8015e94:	469e      	mov	lr, r3
 8015e96:	4770      	bx	lr

08015e98 <_fini>:
 8015e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e9a:	bf00      	nop
 8015e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015e9e:	bc08      	pop	{r3}
 8015ea0:	469e      	mov	lr, r3
 8015ea2:	4770      	bx	lr
