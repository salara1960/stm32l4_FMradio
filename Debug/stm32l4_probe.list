
stm32l4_probe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001720c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e74  080173a0  080173a0  000273a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019214  08019214  00030354  2**0
                  CONTENTS
  4 .ARM          00000008  08019214  08019214  00029214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801921c  0801921c  00030354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801921c  0801921c  0002921c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019220  08019220  00029220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  08019224  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007f90  20000358  08019578  00030358  2**3
                  ALLOC
 10 ._user_heap_stack 00001000  200082e8  08019578  000382e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030354  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cc69  00000000  00000000  00030384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005545  00000000  00000000  0005cfed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023d0  00000000  00000000  00062538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002240  00000000  00000000  00064908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d533  00000000  00000000  00066b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029ade  00000000  00000000  0009407b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d5b5  00000000  00000000  000bdb59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001cb10e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ae20  00000000  00000000  001cb160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000358 	.word	0x20000358
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08017384 	.word	0x08017384

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000035c 	.word	0x2000035c
 80001cc:	08017384 	.word	0x08017384

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ca6:	f000 b9f5 	b.w	8001094 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f883 	bl	8000dc4 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f876 	bl	8000dc4 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f865 	bl	8000dc4 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f857 	bl	8000dc4 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d3c:	f000 b9aa 	b.w	8001094 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f83c 	bl	8000dc4 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_d2lz>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	460d      	mov	r5, r1
 8000d62:	f7ff febb 	bl	8000adc <__aeabi_dcmplt>
 8000d66:	b928      	cbnz	r0, 8000d74 <__aeabi_d2lz+0x1c>
 8000d68:	4620      	mov	r0, r4
 8000d6a:	4629      	mov	r1, r5
 8000d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d70:	f000 b80a 	b.w	8000d88 <__aeabi_d2ulz>
 8000d74:	4620      	mov	r0, r4
 8000d76:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d7a:	f000 f805 	bl	8000d88 <__aeabi_d2ulz>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
 8000d86:	bf00      	nop

08000d88 <__aeabi_d2ulz>:
 8000d88:	b5d0      	push	{r4, r6, r7, lr}
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__aeabi_d2ulz+0x34>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4606      	mov	r6, r0
 8000d90:	460f      	mov	r7, r1
 8000d92:	f7ff fc31 	bl	80005f8 <__aeabi_dmul>
 8000d96:	f7ff ff07 	bl	8000ba8 <__aeabi_d2uiz>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	f7ff fbb2 	bl	8000504 <__aeabi_ui2d>
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <__aeabi_d2ulz+0x38>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f7ff fc28 	bl	80005f8 <__aeabi_dmul>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4630      	mov	r0, r6
 8000dae:	4639      	mov	r1, r7
 8000db0:	f7ff fa6a 	bl	8000288 <__aeabi_dsub>
 8000db4:	f7ff fef8 	bl	8000ba8 <__aeabi_d2uiz>
 8000db8:	4621      	mov	r1, r4
 8000dba:	bdd0      	pop	{r4, r6, r7, pc}
 8000dbc:	3df00000 	.word	0x3df00000
 8000dc0:	41f00000 	.word	0x41f00000

08000dc4 <__udivmoddi4>:
 8000dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc8:	9d08      	ldr	r5, [sp, #32]
 8000dca:	4604      	mov	r4, r0
 8000dcc:	468e      	mov	lr, r1
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d14d      	bne.n	8000e6e <__udivmoddi4+0xaa>
 8000dd2:	428a      	cmp	r2, r1
 8000dd4:	4694      	mov	ip, r2
 8000dd6:	d969      	bls.n	8000eac <__udivmoddi4+0xe8>
 8000dd8:	fab2 f282 	clz	r2, r2
 8000ddc:	b152      	cbz	r2, 8000df4 <__udivmoddi4+0x30>
 8000dde:	fa01 f302 	lsl.w	r3, r1, r2
 8000de2:	f1c2 0120 	rsb	r1, r2, #32
 8000de6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dea:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dee:	ea41 0e03 	orr.w	lr, r1, r3
 8000df2:	4094      	lsls	r4, r2
 8000df4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df8:	0c21      	lsrs	r1, r4, #16
 8000dfa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dfe:	fa1f f78c 	uxth.w	r7, ip
 8000e02:	fb08 e316 	mls	r3, r8, r6, lr
 8000e06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e0a:	fb06 f107 	mul.w	r1, r6, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x64>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000e1a:	f080 811f 	bcs.w	800105c <__udivmoddi4+0x298>
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	f240 811c 	bls.w	800105c <__udivmoddi4+0x298>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b2a4      	uxth	r4, r4
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e38:	fb00 f707 	mul.w	r7, r0, r7
 8000e3c:	42a7      	cmp	r7, r4
 8000e3e:	d90a      	bls.n	8000e56 <__udivmoddi4+0x92>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e48:	f080 810a 	bcs.w	8001060 <__udivmoddi4+0x29c>
 8000e4c:	42a7      	cmp	r7, r4
 8000e4e:	f240 8107 	bls.w	8001060 <__udivmoddi4+0x29c>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e5a:	1be4      	subs	r4, r4, r7
 8000e5c:	2600      	movs	r6, #0
 8000e5e:	b11d      	cbz	r5, 8000e68 <__udivmoddi4+0xa4>
 8000e60:	40d4      	lsrs	r4, r2
 8000e62:	2300      	movs	r3, #0
 8000e64:	e9c5 4300 	strd	r4, r3, [r5]
 8000e68:	4631      	mov	r1, r6
 8000e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d909      	bls.n	8000e86 <__udivmoddi4+0xc2>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	f000 80ef 	beq.w	8001056 <__udivmoddi4+0x292>
 8000e78:	2600      	movs	r6, #0
 8000e7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7e:	4630      	mov	r0, r6
 8000e80:	4631      	mov	r1, r6
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	fab3 f683 	clz	r6, r3
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d14a      	bne.n	8000f24 <__udivmoddi4+0x160>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d302      	bcc.n	8000e98 <__udivmoddi4+0xd4>
 8000e92:	4282      	cmp	r2, r0
 8000e94:	f200 80f9 	bhi.w	800108a <__udivmoddi4+0x2c6>
 8000e98:	1a84      	subs	r4, r0, r2
 8000e9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	469e      	mov	lr, r3
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d0e0      	beq.n	8000e68 <__udivmoddi4+0xa4>
 8000ea6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eaa:	e7dd      	b.n	8000e68 <__udivmoddi4+0xa4>
 8000eac:	b902      	cbnz	r2, 8000eb0 <__udivmoddi4+0xec>
 8000eae:	deff      	udf	#255	; 0xff
 8000eb0:	fab2 f282 	clz	r2, r2
 8000eb4:	2a00      	cmp	r2, #0
 8000eb6:	f040 8092 	bne.w	8000fde <__udivmoddi4+0x21a>
 8000eba:	eba1 010c 	sub.w	r1, r1, ip
 8000ebe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec2:	fa1f fe8c 	uxth.w	lr, ip
 8000ec6:	2601      	movs	r6, #1
 8000ec8:	0c20      	lsrs	r0, r4, #16
 8000eca:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ece:	fb07 1113 	mls	r1, r7, r3, r1
 8000ed2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed6:	fb0e f003 	mul.w	r0, lr, r3
 8000eda:	4288      	cmp	r0, r1
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x12c>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x12a>
 8000ee8:	4288      	cmp	r0, r1
 8000eea:	f200 80cb 	bhi.w	8001084 <__udivmoddi4+0x2c0>
 8000eee:	4643      	mov	r3, r8
 8000ef0:	1a09      	subs	r1, r1, r0
 8000ef2:	b2a4      	uxth	r4, r4
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1110 	mls	r1, r7, r0, r1
 8000efc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f00:	fb0e fe00 	mul.w	lr, lr, r0
 8000f04:	45a6      	cmp	lr, r4
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x156>
 8000f08:	eb1c 0404 	adds.w	r4, ip, r4
 8000f0c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f10:	d202      	bcs.n	8000f18 <__udivmoddi4+0x154>
 8000f12:	45a6      	cmp	lr, r4
 8000f14:	f200 80bb 	bhi.w	800108e <__udivmoddi4+0x2ca>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	eba4 040e 	sub.w	r4, r4, lr
 8000f1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f22:	e79c      	b.n	8000e5e <__udivmoddi4+0x9a>
 8000f24:	f1c6 0720 	rsb	r7, r6, #32
 8000f28:	40b3      	lsls	r3, r6
 8000f2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f32:	fa20 f407 	lsr.w	r4, r0, r7
 8000f36:	fa01 f306 	lsl.w	r3, r1, r6
 8000f3a:	431c      	orrs	r4, r3
 8000f3c:	40f9      	lsrs	r1, r7
 8000f3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f42:	fa00 f306 	lsl.w	r3, r0, r6
 8000f46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f4a:	0c20      	lsrs	r0, r4, #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fb09 1118 	mls	r1, r9, r8, r1
 8000f54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f58:	fb08 f00e 	mul.w	r0, r8, lr
 8000f5c:	4288      	cmp	r0, r1
 8000f5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f62:	d90b      	bls.n	8000f7c <__udivmoddi4+0x1b8>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f6c:	f080 8088 	bcs.w	8001080 <__udivmoddi4+0x2bc>
 8000f70:	4288      	cmp	r0, r1
 8000f72:	f240 8085 	bls.w	8001080 <__udivmoddi4+0x2bc>
 8000f76:	f1a8 0802 	sub.w	r8, r8, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1a09      	subs	r1, r1, r0
 8000f7e:	b2a4      	uxth	r4, r4
 8000f80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f84:	fb09 1110 	mls	r1, r9, r0, r1
 8000f88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f90:	458e      	cmp	lr, r1
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x1e2>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f9c:	d26c      	bcs.n	8001078 <__udivmoddi4+0x2b4>
 8000f9e:	458e      	cmp	lr, r1
 8000fa0:	d96a      	bls.n	8001078 <__udivmoddi4+0x2b4>
 8000fa2:	3802      	subs	r0, #2
 8000fa4:	4461      	add	r1, ip
 8000fa6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000faa:	fba0 9402 	umull	r9, r4, r0, r2
 8000fae:	eba1 010e 	sub.w	r1, r1, lr
 8000fb2:	42a1      	cmp	r1, r4
 8000fb4:	46c8      	mov	r8, r9
 8000fb6:	46a6      	mov	lr, r4
 8000fb8:	d356      	bcc.n	8001068 <__udivmoddi4+0x2a4>
 8000fba:	d053      	beq.n	8001064 <__udivmoddi4+0x2a0>
 8000fbc:	b15d      	cbz	r5, 8000fd6 <__udivmoddi4+0x212>
 8000fbe:	ebb3 0208 	subs.w	r2, r3, r8
 8000fc2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fc6:	fa01 f707 	lsl.w	r7, r1, r7
 8000fca:	fa22 f306 	lsr.w	r3, r2, r6
 8000fce:	40f1      	lsrs	r1, r6
 8000fd0:	431f      	orrs	r7, r3
 8000fd2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fd6:	2600      	movs	r6, #0
 8000fd8:	4631      	mov	r1, r6
 8000fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fde:	f1c2 0320 	rsb	r3, r2, #32
 8000fe2:	40d8      	lsrs	r0, r3
 8000fe4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fe8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fec:	4091      	lsls	r1, r2
 8000fee:	4301      	orrs	r1, r0
 8000ff0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ff4:	fa1f fe8c 	uxth.w	lr, ip
 8000ff8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ffc:	fb07 3610 	mls	r6, r7, r0, r3
 8001000:	0c0b      	lsrs	r3, r1, #16
 8001002:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001006:	fb00 f60e 	mul.w	r6, r0, lr
 800100a:	429e      	cmp	r6, r3
 800100c:	fa04 f402 	lsl.w	r4, r4, r2
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x260>
 8001012:	eb1c 0303 	adds.w	r3, ip, r3
 8001016:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800101a:	d22f      	bcs.n	800107c <__udivmoddi4+0x2b8>
 800101c:	429e      	cmp	r6, r3
 800101e:	d92d      	bls.n	800107c <__udivmoddi4+0x2b8>
 8001020:	3802      	subs	r0, #2
 8001022:	4463      	add	r3, ip
 8001024:	1b9b      	subs	r3, r3, r6
 8001026:	b289      	uxth	r1, r1
 8001028:	fbb3 f6f7 	udiv	r6, r3, r7
 800102c:	fb07 3316 	mls	r3, r7, r6, r3
 8001030:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001034:	fb06 f30e 	mul.w	r3, r6, lr
 8001038:	428b      	cmp	r3, r1
 800103a:	d908      	bls.n	800104e <__udivmoddi4+0x28a>
 800103c:	eb1c 0101 	adds.w	r1, ip, r1
 8001040:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8001044:	d216      	bcs.n	8001074 <__udivmoddi4+0x2b0>
 8001046:	428b      	cmp	r3, r1
 8001048:	d914      	bls.n	8001074 <__udivmoddi4+0x2b0>
 800104a:	3e02      	subs	r6, #2
 800104c:	4461      	add	r1, ip
 800104e:	1ac9      	subs	r1, r1, r3
 8001050:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001054:	e738      	b.n	8000ec8 <__udivmoddi4+0x104>
 8001056:	462e      	mov	r6, r5
 8001058:	4628      	mov	r0, r5
 800105a:	e705      	b.n	8000e68 <__udivmoddi4+0xa4>
 800105c:	4606      	mov	r6, r0
 800105e:	e6e3      	b.n	8000e28 <__udivmoddi4+0x64>
 8001060:	4618      	mov	r0, r3
 8001062:	e6f8      	b.n	8000e56 <__udivmoddi4+0x92>
 8001064:	454b      	cmp	r3, r9
 8001066:	d2a9      	bcs.n	8000fbc <__udivmoddi4+0x1f8>
 8001068:	ebb9 0802 	subs.w	r8, r9, r2
 800106c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001070:	3801      	subs	r0, #1
 8001072:	e7a3      	b.n	8000fbc <__udivmoddi4+0x1f8>
 8001074:	4646      	mov	r6, r8
 8001076:	e7ea      	b.n	800104e <__udivmoddi4+0x28a>
 8001078:	4620      	mov	r0, r4
 800107a:	e794      	b.n	8000fa6 <__udivmoddi4+0x1e2>
 800107c:	4640      	mov	r0, r8
 800107e:	e7d1      	b.n	8001024 <__udivmoddi4+0x260>
 8001080:	46d0      	mov	r8, sl
 8001082:	e77b      	b.n	8000f7c <__udivmoddi4+0x1b8>
 8001084:	3b02      	subs	r3, #2
 8001086:	4461      	add	r1, ip
 8001088:	e732      	b.n	8000ef0 <__udivmoddi4+0x12c>
 800108a:	4630      	mov	r0, r6
 800108c:	e709      	b.n	8000ea2 <__udivmoddi4+0xde>
 800108e:	4464      	add	r4, ip
 8001090:	3802      	subs	r0, #2
 8001092:	e742      	b.n	8000f1a <__udivmoddi4+0x156>

08001094 <__aeabi_idiv0>:
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <decodeIRED>:
volatile irparams_t irparams;
decode_results results;

//-----------------------------------------------------------------------------
int16_t decodeIRED(decode_results *results)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	if (irparams.rcvstate != STATE_STOP) return 0;
 80010a0:	4b16      	ldr	r3, [pc, #88]	; (80010fc <decodeIRED+0x64>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b05      	cmp	r3, #5
 80010a8:	d001      	beq.n	80010ae <decodeIRED+0x16>
 80010aa:	2300      	movs	r3, #0
 80010ac:	e021      	b.n	80010f2 <decodeIRED+0x5a>

	results->rawbuf = irparams.rawbuf;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a13      	ldr	r2, [pc, #76]	; (8001100 <decodeIRED+0x68>)
 80010b2:	609a      	str	r2, [r3, #8]
	results->rawlen = irparams.rawlen;
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <decodeIRED+0x64>)
 80010b6:	785b      	ldrb	r3, [r3, #1]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	819a      	strh	r2, [r3, #12]
	results->overflow = irparams.overflow;
 80010c0:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <decodeIRED+0x64>)
 80010c2:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	b21a      	sxth	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	81da      	strh	r2, [r3, #14]

	if(irparams.rcvstate != STATE_STOP) return false;
 80010ce:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <decodeIRED+0x64>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	2b05      	cmp	r3, #5
 80010d6:	d001      	beq.n	80010dc <decodeIRED+0x44>
 80010d8:	2300      	movs	r3, #0
 80010da:	e00a      	b.n	80010f2 <decodeIRED+0x5a>

	if (decodeHashIRED(results)) return 1;
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f000 f883 	bl	80011e8 <decodeHashIRED>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <decodeIRED+0x54>
 80010e8:	2301      	movs	r3, #1
 80010ea:	e002      	b.n	80010f2 <decodeIRED+0x5a>

	enIntIRED();
 80010ec:	f000 f80a 	bl	8001104 <enIntIRED>

	return 0;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000374 	.word	0x20000374
 8001100:	20000378 	.word	0x20000378

08001104 <enIntIRED>:
//-----------------------------------------------------------------------------
void enIntIRED()
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
	irparams.rcvstate = STATE_IDLE;
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <enIntIRED+0x28>)
 800110a:	2202      	movs	r2, #2
 800110c:	701a      	strb	r2, [r3, #0]
	irparams.rawlen = 0;
 800110e:	4b07      	ldr	r3, [pc, #28]	; (800112c <enIntIRED+0x28>)
 8001110:	2200      	movs	r2, #0
 8001112:	705a      	strb	r2, [r3, #1]

	__HAL_TIM_SET_COUNTER(portIRED, 0x0000);
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <enIntIRED+0x2c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2200      	movs	r2, #0
 800111c:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Base_Start_IT(portIRED);
 800111e:	4b04      	ldr	r3, [pc, #16]	; (8001130 <enIntIRED+0x2c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4618      	mov	r0, r3
 8001124:	f00b ff9a 	bl	800d05c <HAL_TIM_Base_Start_IT>
}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000374 	.word	0x20000374
 8001130:	20000128 	.word	0x20000128

08001134 <resumeIRED>:
//-----------------------------------------------------------------------------
void resumeIRED() // Restart the ISR state machine
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
	irparams.rcvstate = STATE_IDLE;
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <resumeIRED+0x1c>)
 800113a:	2202      	movs	r2, #2
 800113c:	701a      	strb	r2, [r3, #0]
	irparams.rawlen = 0;
 800113e:	4b04      	ldr	r3, [pc, #16]	; (8001150 <resumeIRED+0x1c>)
 8001140:	2200      	movs	r2, #0
 8001142:	705a      	strb	r2, [r3, #1]
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	20000374 	.word	0x20000374
 8001154:	00000000 	.word	0x00000000

08001158 <compareIRED>:
//-----------------------------------------------------------------------------
int16_t compareIRED(uint16_t oldval, uint16_t newval)
{
 8001158:	b5b0      	push	{r4, r5, r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	460a      	mov	r2, r1
 8001162:	80fb      	strh	r3, [r7, #6]
 8001164:	4613      	mov	r3, r2
 8001166:	80bb      	strh	r3, [r7, #4]
	     if (newval < oldval * .8) return 0;
 8001168:	88bb      	ldrh	r3, [r7, #4]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff f9da 	bl	8000524 <__aeabi_i2d>
 8001170:	4604      	mov	r4, r0
 8001172:	460d      	mov	r5, r1
 8001174:	88fb      	ldrh	r3, [r7, #6]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff f9d4 	bl	8000524 <__aeabi_i2d>
 800117c:	a318      	add	r3, pc, #96	; (adr r3, 80011e0 <compareIRED+0x88>)
 800117e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001182:	f7ff fa39 	bl	80005f8 <__aeabi_dmul>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4620      	mov	r0, r4
 800118c:	4629      	mov	r1, r5
 800118e:	f7ff fca5 	bl	8000adc <__aeabi_dcmplt>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <compareIRED+0x44>
 8001198:	2300      	movs	r3, #0
 800119a:	e01a      	b.n	80011d2 <compareIRED+0x7a>
	else if (oldval < newval * .8) return 2;
 800119c:	88fb      	ldrh	r3, [r7, #6]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f9c0 	bl	8000524 <__aeabi_i2d>
 80011a4:	4604      	mov	r4, r0
 80011a6:	460d      	mov	r5, r1
 80011a8:	88bb      	ldrh	r3, [r7, #4]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff f9ba 	bl	8000524 <__aeabi_i2d>
 80011b0:	a30b      	add	r3, pc, #44	; (adr r3, 80011e0 <compareIRED+0x88>)
 80011b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b6:	f7ff fa1f 	bl	80005f8 <__aeabi_dmul>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	4620      	mov	r0, r4
 80011c0:	4629      	mov	r1, r5
 80011c2:	f7ff fc8b 	bl	8000adc <__aeabi_dcmplt>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <compareIRED+0x78>
 80011cc:	2302      	movs	r3, #2
 80011ce:	e000      	b.n	80011d2 <compareIRED+0x7a>
	else return 1;
 80011d0:	2301      	movs	r3, #1
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bdb0      	pop	{r4, r5, r7, pc}
 80011da:	bf00      	nop
 80011dc:	f3af 8000 	nop.w
 80011e0:	9999999a 	.word	0x9999999a
 80011e4:	3fe99999 	.word	0x3fe99999

080011e8 <decodeHashIRED>:
//-----------------------------------------------------------------------------
int32_t decodeHashIRED(decode_results *results)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	int32_t hash = FNV_BASIS_32;
 80011f0:	4b21      	ldr	r3, [pc, #132]	; (8001278 <decodeHashIRED+0x90>)
 80011f2:	60fb      	str	r3, [r7, #12]

	if (results->rawlen < 6) return 0;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80011fa:	2b05      	cmp	r3, #5
 80011fc:	dc01      	bgt.n	8001202 <decodeHashIRED+0x1a>
 80011fe:	2300      	movs	r3, #0
 8001200:	e035      	b.n	800126e <decodeHashIRED+0x86>

	for (int16_t i = 1; (i + 2) < results->rawlen; i++) {
 8001202:	2301      	movs	r3, #1
 8001204:	817b      	strh	r3, [r7, #10]
 8001206:	e023      	b.n	8001250 <decodeHashIRED+0x68>
		int16_t value = compareIRED(results->rawbuf[i], results->rawbuf[i + 2]);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	4413      	add	r3, r2
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	b298      	uxth	r0, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001220:	3302      	adds	r3, #2
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	4413      	add	r3, r2
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	b29b      	uxth	r3, r3
 800122a:	4619      	mov	r1, r3
 800122c:	f7ff ff94 	bl	8001158 <compareIRED>
 8001230:	4603      	mov	r3, r0
 8001232:	813b      	strh	r3, [r7, #8]
		hash = (hash * FNV_PRIME_32) ^ value;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4a11      	ldr	r2, [pc, #68]	; (800127c <decodeHashIRED+0x94>)
 8001238:	fb03 f202 	mul.w	r2, r3, r2
 800123c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001240:	4053      	eors	r3, r2
 8001242:	60fb      	str	r3, [r7, #12]
	for (int16_t i = 1; (i + 2) < results->rawlen; i++) {
 8001244:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001248:	b29b      	uxth	r3, r3
 800124a:	3301      	adds	r3, #1
 800124c:	b29b      	uxth	r3, r3
 800124e:	817b      	strh	r3, [r7, #10]
 8001250:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001254:	3302      	adds	r3, #2
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800125c:	4293      	cmp	r3, r2
 800125e:	dbd3      	blt.n	8001208 <decodeHashIRED+0x20>
	}

	results->value = hash;
 8001260:	68fa      	ldr	r2, [r7, #12]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	601a      	str	r2, [r3, #0]
	results->bits = 32;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2220      	movs	r2, #32
 800126a:	809a      	strh	r2, [r3, #4]

	return 1;
 800126c:	2301      	movs	r3, #1
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	811c9dc5 	.word	0x811c9dc5
 800127c:	01000193 	.word	0x01000193

08001280 <ST7565_Select>:
volatile uint8_t lcdRdy = 1;

//------------------------------------------------------------------------------

inline static void ST7565_Select()
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
#ifdef CS_PORT
	//-- если захотим переделать под HAL ------------------
	#ifdef ST7565_SPI_HAL
		//HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
		CS_GPIO_Port->BSRR = ( CS_Pin << 16 );
 8001284:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001288:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800128c:	619a      	str	r2, [r3, #24]
	#ifdef ST7565_SPI_CMSIS
		CS_GPIO_Port->BSRR = ( CS_Pin << 16 );
	#endif
	//-----------------------------------------------------
#endif
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <ST7565_Unselect>:

//------------------------------------------------------------------------------

inline static void ST7565_Unselect()
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
#ifdef CS_PORT
	//-- если захотим переделать под HAL ------------------
	#ifdef ST7565_SPI_HAL
		//HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
		CS_GPIO_Port->BSRR = CS_Pin;
 800129c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012a0:	2210      	movs	r2, #16
 80012a2:	619a      	str	r2, [r3, #24]
	#ifdef ST7565_SPI_CMSIS
		CS_GPIO_Port->BSRR = CS_Pin;
	#endif
	//-----------------------------------------------------
#endif
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
	...

080012b0 <ST7565_Reset>:
	* @brief	 ( описание ):  аппарвтный сброс дисплея
	* @param	( параметры ):	
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Reset()
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
	RES_GPIO_Port->BSRR = (RES_Pin << 16);//HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_RESET );
 80012b4:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <ST7565_Reset+0x24>)
 80012b6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012ba:	619a      	str	r2, [r3, #24]
	HAL_Delay(1);
 80012bc:	2001      	movs	r0, #1
 80012be:	f006 f953 	bl	8007568 <HAL_Delay>
	
	RES_GPIO_Port->BSRR = RES_Pin;//HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_SET );
 80012c2:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <ST7565_Reset+0x24>)
 80012c4:	2204      	movs	r2, #4
 80012c6:	619a      	str	r2, [r3, #24]
	HAL_Delay(1);
 80012c8:	2001      	movs	r0, #1
 80012ca:	f006 f94d 	bl	8007568 <HAL_Delay>
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	48000c00 	.word	0x48000c00

080012d8 <ST7565_w_dats>:
//--------------------------------------------------------------------------------
#ifdef SET_NEW_PROC
inline static void ST7565_w_dats(uint8_t *Data, uint16_t len)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	807b      	strh	r3, [r7, #2]
	DC_GPIO_Port->BSRR = DC_Pin;//HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80012e4:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <ST7565_w_dats+0x88>)
 80012e6:	2220      	movs	r2, #32
 80012e8:	619a      	str	r2, [r3, #24]

	if (with_dma) {
 80012ea:	4b1e      	ldr	r3, [pc, #120]	; (8001364 <ST7565_w_dats+0x8c>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d019      	beq.n	8001326 <ST7565_w_dats+0x4e>
		lcdRdy = 0;
 80012f2:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <ST7565_w_dats+0x90>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	701a      	strb	r2, [r3, #0]
		if (HAL_SPI_Transmit_DMA(&ST7565_SPI_HAL, Data, len) != HAL_OK) devError |= devLCD;
 80012f8:	887b      	ldrh	r3, [r7, #2]
 80012fa:	461a      	mov	r2, r3
 80012fc:	6879      	ldr	r1, [r7, #4]
 80012fe:	481b      	ldr	r0, [pc, #108]	; (800136c <ST7565_w_dats+0x94>)
 8001300:	f00a ff9e 	bl	800c240 <HAL_SPI_Transmit_DMA>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d006      	beq.n	8001318 <ST7565_w_dats+0x40>
 800130a:	4b19      	ldr	r3, [pc, #100]	; (8001370 <ST7565_w_dats+0x98>)
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001312:	b29a      	uxth	r2, r3
 8001314:	4b16      	ldr	r3, [pc, #88]	; (8001370 <ST7565_w_dats+0x98>)
 8001316:	801a      	strh	r2, [r3, #0]
		while (!lcdRdy) {};
 8001318:	bf00      	nop
 800131a:	4b13      	ldr	r3, [pc, #76]	; (8001368 <ST7565_w_dats+0x90>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	b2db      	uxtb	r3, r3
 8001320:	2b00      	cmp	r3, #0
 8001322:	d0fa      	beq.n	800131a <ST7565_w_dats+0x42>
	} else {
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Data, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
	}
}
 8001324:	e017      	b.n	8001356 <ST7565_w_dats+0x7e>
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Data, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
 8001326:	887a      	ldrh	r2, [r7, #2]
 8001328:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800132c:	6879      	ldr	r1, [r7, #4]
 800132e:	480f      	ldr	r0, [pc, #60]	; (800136c <ST7565_w_dats+0x94>)
 8001330:	f00a fad5 	bl	800b8de <HAL_SPI_Transmit>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d006      	beq.n	8001348 <ST7565_w_dats+0x70>
 800133a:	4b0d      	ldr	r3, [pc, #52]	; (8001370 <ST7565_w_dats+0x98>)
 800133c:	881b      	ldrh	r3, [r3, #0]
 800133e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001342:	b29a      	uxth	r2, r3
 8001344:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <ST7565_w_dats+0x98>)
 8001346:	801a      	strh	r2, [r3, #0]
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
 8001348:	bf00      	nop
 800134a:	4808      	ldr	r0, [pc, #32]	; (800136c <ST7565_w_dats+0x94>)
 800134c:	f00b fb16 	bl	800c97c <HAL_SPI_GetState>
 8001350:	4603      	mov	r3, r0
 8001352:	2b01      	cmp	r3, #1
 8001354:	d1f9      	bne.n	800134a <ST7565_w_dats+0x72>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	48000400 	.word	0x48000400
 8001364:	2000098c 	.word	0x2000098c
 8001368:	20000000 	.word	0x20000000
 800136c:	20000a98 	.word	0x20000a98
 8001370:	20001b00 	.word	0x20001b00

08001374 <ST7565_w_cmds>:
//
inline static void ST7565_w_cmds(uint8_t *Command, uint16_t len)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	807b      	strh	r3, [r7, #2]
	DC_GPIO_Port->BSRR = (DC_Pin << 16);//HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8001380:	4b1e      	ldr	r3, [pc, #120]	; (80013fc <ST7565_w_cmds+0x88>)
 8001382:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001386:	619a      	str	r2, [r3, #24]

	if (with_dma) {
 8001388:	4b1d      	ldr	r3, [pc, #116]	; (8001400 <ST7565_w_cmds+0x8c>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d019      	beq.n	80013c4 <ST7565_w_cmds+0x50>
		lcdRdy = 0;
 8001390:	4b1c      	ldr	r3, [pc, #112]	; (8001404 <ST7565_w_cmds+0x90>)
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]
		if (HAL_SPI_Transmit_DMA(&ST7565_SPI_HAL, Command, len) != HAL_OK) devError |= devLCD;
 8001396:	887b      	ldrh	r3, [r7, #2]
 8001398:	461a      	mov	r2, r3
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	481a      	ldr	r0, [pc, #104]	; (8001408 <ST7565_w_cmds+0x94>)
 800139e:	f00a ff4f 	bl	800c240 <HAL_SPI_Transmit_DMA>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d006      	beq.n	80013b6 <ST7565_w_cmds+0x42>
 80013a8:	4b18      	ldr	r3, [pc, #96]	; (800140c <ST7565_w_cmds+0x98>)
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	4b16      	ldr	r3, [pc, #88]	; (800140c <ST7565_w_cmds+0x98>)
 80013b4:	801a      	strh	r2, [r3, #0]
		while (!lcdRdy) {};
 80013b6:	bf00      	nop
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <ST7565_w_cmds+0x90>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0fa      	beq.n	80013b8 <ST7565_w_cmds+0x44>
	} else {
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Command, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
	}
}
 80013c2:	e017      	b.n	80013f4 <ST7565_w_cmds+0x80>
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Command, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
 80013c4:	887a      	ldrh	r2, [r7, #2]
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	480e      	ldr	r0, [pc, #56]	; (8001408 <ST7565_w_cmds+0x94>)
 80013ce:	f00a fa86 	bl	800b8de <HAL_SPI_Transmit>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d006      	beq.n	80013e6 <ST7565_w_cmds+0x72>
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <ST7565_w_cmds+0x98>)
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	4b0a      	ldr	r3, [pc, #40]	; (800140c <ST7565_w_cmds+0x98>)
 80013e4:	801a      	strh	r2, [r3, #0]
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
 80013e6:	bf00      	nop
 80013e8:	4807      	ldr	r0, [pc, #28]	; (8001408 <ST7565_w_cmds+0x94>)
 80013ea:	f00b fac7 	bl	800c97c <HAL_SPI_GetState>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d1f9      	bne.n	80013e8 <ST7565_w_cmds+0x74>
}
 80013f4:	bf00      	nop
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	48000400 	.word	0x48000400
 8001400:	2000098c 	.word	0x2000098c
 8001404:	20000000 	.word	0x20000000
 8001408:	20000a98 	.word	0x20000a98
 800140c:	20001b00 	.word	0x20001b00

08001410 <ST7565_SetX>:
inline static void ST7565_SetX(uint8_t x)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
	uint8_t bytes[] = { ((x & 0xf0) >> 4) | 0x10, x & 0x0f };
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	091b      	lsrs	r3, r3, #4
 800141e:	b2db      	uxtb	r3, r3
 8001420:	f043 0310 	orr.w	r3, r3, #16
 8001424:	b2db      	uxtb	r3, r3
 8001426:	733b      	strb	r3, [r7, #12]
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	f003 030f 	and.w	r3, r3, #15
 800142e:	b2db      	uxtb	r3, r3
 8001430:	737b      	strb	r3, [r7, #13]
	ST7565_w_cmds(bytes, 2);
 8001432:	f107 030c 	add.w	r3, r7, #12
 8001436:	2102      	movs	r1, #2
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff9b 	bl	8001374 <ST7565_w_cmds>
}
 800143e:	bf00      	nop
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <ST7565_SetY>:
//
inline static void ST7565_SetY(uint8_t y)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b084      	sub	sp, #16
 800144a:	af00      	add	r7, sp, #0
 800144c:	4603      	mov	r3, r0
 800144e:	71fb      	strb	r3, [r7, #7]
	uint8_t byte = (y & 0x07) | 0xB0;
 8001450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001454:	f003 0307 	and.w	r3, r3, #7
 8001458:	b25b      	sxtb	r3, r3
 800145a:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800145e:	b25b      	sxtb	r3, r3
 8001460:	b2db      	uxtb	r3, r3
 8001462:	73fb      	strb	r3, [r7, #15]
	ST7565_w_cmds(&byte, 1);
 8001464:	f107 030f 	add.w	r3, r7, #15
 8001468:	2101      	movs	r1, #1
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff ff82 	bl	8001374 <ST7565_w_cmds>
}
 8001470:	bf00      	nop
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <ST7565_Display_fill>:
								( данные отправляются сразу на дисплей и записываются в буфер кадра )
								Функцию ST7565_Update() вызывать не нужно
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Display_fill(uint8_t fill)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
uint8_t page;//, column;
	
	memset(ST7565_buffer, fill, (SCREEN_WIDTH * SCREEN_HEIGHT / 8));	// отчистка памяти заполняем массив значением 0x00
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001488:	4619      	mov	r1, r3
 800148a:	4814      	ldr	r0, [pc, #80]	; (80014dc <ST7565_Display_fill+0x64>)
 800148c:	f011 fd47 	bl	8012f1e <memset>
	
	ST7565_Select();
 8001490:	f7ff fef6 	bl	8001280 <ST7565_Select>
#ifdef SET_NEW_PROC
	uint8_t dta[] = {0, 0x10, 0};
 8001494:	4a12      	ldr	r2, [pc, #72]	; (80014e0 <ST7565_Display_fill+0x68>)
 8001496:	f107 030c 	add.w	r3, r7, #12
 800149a:	6812      	ldr	r2, [r2, #0]
 800149c:	4611      	mov	r1, r2
 800149e:	8019      	strh	r1, [r3, #0]
 80014a0:	3302      	adds	r3, #2
 80014a2:	0c12      	lsrs	r2, r2, #16
 80014a4:	701a      	strb	r2, [r3, #0]
#endif
	for (page = 0xB7; page >= 0xB0; page-- ) {
 80014a6:	23b7      	movs	r3, #183	; 0xb7
 80014a8:	73fb      	strb	r3, [r7, #15]
 80014aa:	e00e      	b.n	80014ca <ST7565_Display_fill+0x52>
		ST7565_w_cmd(page);  //set page address
		ST7565_w_cmd(0x10);  //set Column address MSB   
		ST7565_w_cmd(0x00);  //set column address LSB
		for (column = 0; column < 131; column++) ST7565_w_dat(fill);
#else
		dta[0] = page;
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
 80014ae:	733b      	strb	r3, [r7, #12]
		ST7565_w_cmds(dta, sizeof(dta));
 80014b0:	f107 030c 	add.w	r3, r7, #12
 80014b4:	2103      	movs	r1, #3
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff ff5c 	bl	8001374 <ST7565_w_cmds>
		ST7565_w_dats(ST7565_buffer, 131);
 80014bc:	2183      	movs	r1, #131	; 0x83
 80014be:	4807      	ldr	r0, [pc, #28]	; (80014dc <ST7565_Display_fill+0x64>)
 80014c0:	f7ff ff0a 	bl	80012d8 <ST7565_w_dats>
	for (page = 0xB7; page >= 0xB0; page-- ) {
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	73fb      	strb	r3, [r7, #15]
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
 80014cc:	2baf      	cmp	r3, #175	; 0xaf
 80014ce:	d8ed      	bhi.n	80014ac <ST7565_Display_fill+0x34>
#endif
    }
		
	ST7565_Unselect();
 80014d0:	f7ff fee2 	bl	8001298 <ST7565_Unselect>
}
 80014d4:	bf00      	nop
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	2000058c 	.word	0x2000058c
 80014e0:	080173a0 	.word	0x080173a0

080014e4 <ST7565_Init>:
	* @brief	 ( описание ):  инициализация дисплея ( при другой инициализации можно поменять параметры внутри функции )
	* @param	( параметры ):	
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Init()
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
	ST7565_Select();
 80014ea:	f7ff fec9 	bl	8001280 <ST7565_Select>
	ST7565_w_cmd(CMD_DISPLAY_ON);    		//Display on
	// Инвертирование экрана CMD_SET_DISP_NORMAL - OFF    CMD_SET_DISP_REVERSE - ON
	ST7565_w_cmd(CMD_SET_DISP_NORMAL);
	//HAL_Delay(1);//1
#else
	uint8_t dta[] = {
 80014ee:	4a09      	ldr	r2, [pc, #36]	; (8001514 <ST7565_Init+0x30>)
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80014f4:	c303      	stmia	r3!, {r0, r1}
 80014f6:	801a      	strh	r2, [r3, #0]
	};
	#if defined (SCREEN_ORIENTATION_180)
		dta[1] = CMD_SET_ADC_REVERSE;    	//ADC selection(SEG0->SEG128)  CMD_SET_ADC_NORMAL горизонтально «нормальная» (не перевернутая)
		dta[2] = CMD_SET_COM_NORMAL;    		//SHL selection(COM0->COM64)   CMD_SET_COM_REVERSE вертикально «перевернутая» (дополняет команду выше)
	#endif
	ST7565_w_cmds(dta, sizeof(dta));
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	210a      	movs	r1, #10
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff39 	bl	8001374 <ST7565_w_cmds>
#endif
	
	ST7565_Display_fill(0);
 8001502:	2000      	movs	r0, #0
 8001504:	f7ff ffb8 	bl	8001478 <ST7565_Display_fill>
	
	ST7565_Unselect();
 8001508:	f7ff fec6 	bl	8001298 <ST7565_Unselect>
   
}
 800150c:	bf00      	nop
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	080173a4 	.word	0x080173a4

08001518 <ST7565_CMD_DISPLAY>:
//--------------------------------------------------------------------------------
void ST7565_CMD_DISPLAY(uint8_t byte)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]
#ifdef SET_NEW_PROC
	ST7565_w_cmds(&byte, 1);
 8001522:	1dfb      	adds	r3, r7, #7
 8001524:	2101      	movs	r1, #1
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff ff24 	bl	8001374 <ST7565_w_cmds>

	if (byte == CMD_DISPLAY_OFF) OFF_DISPLAY();
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	2bae      	cmp	r3, #174	; 0xae
 8001530:	d103      	bne.n	800153a <ST7565_CMD_DISPLAY+0x22>
 8001532:	4b06      	ldr	r3, [pc, #24]	; (800154c <ST7565_CMD_DISPLAY+0x34>)
 8001534:	2201      	movs	r2, #1
 8001536:	619a      	str	r2, [r3, #24]
							else ON_DISPLAY();
#else
	ST7565_w_cmd(byte);
#endif
}
 8001538:	e003      	b.n	8001542 <ST7565_CMD_DISPLAY+0x2a>
							else ON_DISPLAY();
 800153a:	4b04      	ldr	r3, [pc, #16]	; (800154c <ST7565_CMD_DISPLAY+0x34>)
 800153c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001540:	619a      	str	r2, [r3, #24]
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	48000800 	.word	0x48000800

08001550 <ST7565_Draw_pixel>:
	* @param	( параметры ):	координата X(0 - 127) и координата Y(0 - 63)  color 1 or 0
	* @return  ( возвращает ):	
*******************************************************************************/
// X(0 - 127)  Y(0 - 63)
void ST7565_Draw_pixel(int16_t x, int16_t y, uint8_t color)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	80fb      	strh	r3, [r7, #6]
 800155a:	460b      	mov	r3, r1
 800155c:	80bb      	strh	r3, [r7, #4]
 800155e:	4613      	mov	r3, r2
 8001560:	70fb      	strb	r3, [r7, #3]
    if (x >= SCREEN_WIDTH || x < 0 || y >= SCREEN_HEIGHT || y < 0) return;
 8001562:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001566:	2b7f      	cmp	r3, #127	; 0x7f
 8001568:	dc4c      	bgt.n	8001604 <ST7565_Draw_pixel+0xb4>
 800156a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800156e:	2b00      	cmp	r3, #0
 8001570:	db48      	blt.n	8001604 <ST7565_Draw_pixel+0xb4>
 8001572:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001576:	2b3f      	cmp	r3, #63	; 0x3f
 8001578:	dc44      	bgt.n	8001604 <ST7565_Draw_pixel+0xb4>
 800157a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	db40      	blt.n	8001604 <ST7565_Draw_pixel+0xb4>

    uint16_t array_pos = x + ((y >> 3) * SCREEN_WIDTH );
 8001582:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001586:	10db      	asrs	r3, r3, #3
 8001588:	b21b      	sxth	r3, r3
 800158a:	b29b      	uxth	r3, r3
 800158c:	01db      	lsls	r3, r3, #7
 800158e:	b29a      	uxth	r2, r3
 8001590:	88fb      	ldrh	r3, [r7, #6]
 8001592:	4413      	add	r3, r2
 8001594:	81fb      	strh	r3, [r7, #14]

    if (color) {
 8001596:	78fb      	ldrb	r3, [r7, #3]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d018      	beq.n	80015ce <ST7565_Draw_pixel+0x7e>
        ST7565_buffer[array_pos] |= 1 << (y % 8);
 800159c:	89fb      	ldrh	r3, [r7, #14]
 800159e:	4a1c      	ldr	r2, [pc, #112]	; (8001610 <ST7565_Draw_pixel+0xc0>)
 80015a0:	5cd3      	ldrb	r3, [r2, r3]
 80015a2:	b25a      	sxtb	r2, r3
 80015a4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015a8:	4259      	negs	r1, r3
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	f001 0107 	and.w	r1, r1, #7
 80015b2:	bf58      	it	pl
 80015b4:	424b      	negpl	r3, r1
 80015b6:	b21b      	sxth	r3, r3
 80015b8:	4619      	mov	r1, r3
 80015ba:	2301      	movs	r3, #1
 80015bc:	408b      	lsls	r3, r1
 80015be:	b25b      	sxtb	r3, r3
 80015c0:	4313      	orrs	r3, r2
 80015c2:	b25a      	sxtb	r2, r3
 80015c4:	89fb      	ldrh	r3, [r7, #14]
 80015c6:	b2d1      	uxtb	r1, r2
 80015c8:	4a11      	ldr	r2, [pc, #68]	; (8001610 <ST7565_Draw_pixel+0xc0>)
 80015ca:	54d1      	strb	r1, [r2, r3]
 80015cc:	e01b      	b.n	8001606 <ST7565_Draw_pixel+0xb6>
    } else {
        ST7565_buffer[array_pos] &= 0xFF ^ 1 << (y % 8);
 80015ce:	89fb      	ldrh	r3, [r7, #14]
 80015d0:	4a0f      	ldr	r2, [pc, #60]	; (8001610 <ST7565_Draw_pixel+0xc0>)
 80015d2:	5cd3      	ldrb	r3, [r2, r3]
 80015d4:	b25a      	sxtb	r2, r3
 80015d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015da:	4259      	negs	r1, r3
 80015dc:	f003 0307 	and.w	r3, r3, #7
 80015e0:	f001 0107 	and.w	r1, r1, #7
 80015e4:	bf58      	it	pl
 80015e6:	424b      	negpl	r3, r1
 80015e8:	b21b      	sxth	r3, r3
 80015ea:	4619      	mov	r1, r3
 80015ec:	2301      	movs	r3, #1
 80015ee:	408b      	lsls	r3, r1
 80015f0:	b25b      	sxtb	r3, r3
 80015f2:	43db      	mvns	r3, r3
 80015f4:	b25b      	sxtb	r3, r3
 80015f6:	4013      	ands	r3, r2
 80015f8:	b25a      	sxtb	r2, r3
 80015fa:	89fb      	ldrh	r3, [r7, #14]
 80015fc:	b2d1      	uxtb	r1, r2
 80015fe:	4a04      	ldr	r2, [pc, #16]	; (8001610 <ST7565_Draw_pixel+0xc0>)
 8001600:	54d1      	strb	r1, [r2, r3]
 8001602:	e000      	b.n	8001606 <ST7565_Draw_pixel+0xb6>
    if (x >= SCREEN_WIDTH || x < 0 || y >= SCREEN_HEIGHT || y < 0) return;
 8001604:	bf00      	nop
    }
}
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	2000058c 	.word	0x2000058c

08001614 <ST7565_Update>:
	* @brief	 ( описание ):  вывод буффера кадра на дисплей
	* @param	( параметры ):	
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Update()
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
uint8_t x, y;
		
	ST7565_Select();
 800161a:	f7ff fe31 	bl	8001280 <ST7565_Select>

  	for (y = 0; y < 8; y++) {
 800161e:	2300      	movs	r3, #0
 8001620:	71bb      	strb	r3, [r7, #6]
 8001622:	e01d      	b.n	8001660 <ST7565_Update+0x4c>
		ST7565_SetX(0);	
 8001624:	2000      	movs	r0, #0
 8001626:	f7ff fef3 	bl	8001410 <ST7565_SetX>
		ST7565_SetY(y);
 800162a:	79bb      	ldrb	r3, [r7, #6]
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff0a 	bl	8001446 <ST7565_SetY>
		for (x = 0; x < 128; x++) {
 8001632:	2300      	movs	r3, #0
 8001634:	71fb      	strb	r3, [r7, #7]
 8001636:	e00c      	b.n	8001652 <ST7565_Update+0x3e>
			ST7565_w_dats(&ST7565_buffer[x + 128 * y], 1);
 8001638:	79fa      	ldrb	r2, [r7, #7]
 800163a:	79bb      	ldrb	r3, [r7, #6]
 800163c:	01db      	lsls	r3, r3, #7
 800163e:	4413      	add	r3, r2
 8001640:	4a0d      	ldr	r2, [pc, #52]	; (8001678 <ST7565_Update+0x64>)
 8001642:	4413      	add	r3, r2
 8001644:	2101      	movs	r1, #1
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fe46 	bl	80012d8 <ST7565_w_dats>
		for (x = 0; x < 128; x++) {
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	3301      	adds	r3, #1
 8001650:	71fb      	strb	r3, [r7, #7]
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	2b00      	cmp	r3, #0
 8001658:	daee      	bge.n	8001638 <ST7565_Update+0x24>
  	for (y = 0; y < 8; y++) {
 800165a:	79bb      	ldrb	r3, [r7, #6]
 800165c:	3301      	adds	r3, #1
 800165e:	71bb      	strb	r3, [r7, #6]
 8001660:	79bb      	ldrb	r3, [r7, #6]
 8001662:	2b07      	cmp	r3, #7
 8001664:	d9de      	bls.n	8001624 <ST7565_Update+0x10>
		}
	}
	
	ST7565_Unselect();
 8001666:	f7ff fe17 	bl	8001298 <ST7565_Unselect>
	HAL_Delay(50);//(100);
 800166a:	2032      	movs	r0, #50	; 0x32
 800166c:	f005 ff7c 	bl	8007568 <HAL_Delay>
}
 8001670:	bf00      	nop
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	2000058c 	.word	0x2000058c

0800167c <ST7565_DrawChar>:
	* @brief	 ( описание ):  функция записывает 1 символ в буфер кадра
	* @param	( параметры ):	координаты X(0 - 127)  Y(0 - 63), символ, шрифт, множитель, цвет 1 или 0
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawChar(int16_t x, int16_t y, unsigned char ch, FontDef_t* Font, uint8_t multiplier, uint8_t color)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b088      	sub	sp, #32
 8001680:	af00      	add	r7, sp, #0
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	4603      	mov	r3, r0
 8001686:	81fb      	strh	r3, [r7, #14]
 8001688:	460b      	mov	r3, r1
 800168a:	81bb      	strh	r3, [r7, #12]
 800168c:	4613      	mov	r3, r2
 800168e:	72fb      	strb	r3, [r7, #11]
uint16_t i, j;
uint16_t b;
int16_t X = x, Y = y;
 8001690:	89fb      	ldrh	r3, [r7, #14]
 8001692:	833b      	strh	r3, [r7, #24]
 8001694:	89bb      	ldrh	r3, [r7, #12]
 8001696:	82fb      	strh	r3, [r7, #22]
int16_t xx, yy;
	
	if (multiplier < 1) multiplier = 1;
 8001698:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800169c:	2b00      	cmp	r3, #0
 800169e:	d102      	bne.n	80016a6 <ST7565_DrawChar+0x2a>
 80016a0:	2301      	movs	r3, #1
 80016a2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	
	// Check available space in LCD
	if (SCREEN_WIDTH >= ( x + Font->FontWidth) || SCREEN_HEIGHT >= ( y + Font->FontHeight)) {
 80016a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	7812      	ldrb	r2, [r2, #0]
 80016ae:	4413      	add	r3, r2
 80016b0:	2b80      	cmp	r3, #128	; 0x80
 80016b2:	dd07      	ble.n	80016c4 <ST7565_DrawChar+0x48>
 80016b4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	7852      	ldrb	r2, [r2, #1]
 80016bc:	4413      	add	r3, r2
 80016be:	2b40      	cmp	r3, #64	; 0x40
 80016c0:	f300 8154 	bgt.w	800196c <ST7565_DrawChar+0x2f0>
		// Go through font
		for (i = 0; i < Font->FontHeight; i++) {
 80016c4:	2300      	movs	r3, #0
 80016c6:	83fb      	strh	r3, [r7, #30]
 80016c8:	e149      	b.n	800195e <ST7565_DrawChar+0x2e2>
			if (ch < 127) {
 80016ca:	7afb      	ldrb	r3, [r7, #11]
 80016cc:	2b7e      	cmp	r3, #126	; 0x7e
 80016ce:	d80f      	bhi.n	80016f0 <ST7565_DrawChar+0x74>
				b = Font->data[(ch - 32) * Font->FontHeight + i];
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80016d6:	7afb      	ldrb	r3, [r7, #11]
 80016d8:	3b20      	subs	r3, #32
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	7849      	ldrb	r1, [r1, #1]
 80016de:	fb03 f101 	mul.w	r1, r3, r1
 80016e2:	8bfb      	ldrh	r3, [r7, #30]
 80016e4:	440b      	add	r3, r1
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	4413      	add	r3, r2
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	837b      	strh	r3, [r7, #26]
 80016ee:	e0af      	b.n	8001850 <ST7565_DrawChar+0x1d4>
			} else if (ch > 191) {
 80016f0:	7afb      	ldrb	r3, [r7, #11]
 80016f2:	2bbf      	cmp	r3, #191	; 0xbf
 80016f4:	d90f      	bls.n	8001716 <ST7565_DrawChar+0x9a>
				// +96 это так как латинские символы и знаки в шрифтах занимают 96 позиций
				// и если в шрифте который содержит сперва латиницу и спец символы и потом 
				// только кирилицу то нужно добавлять 95 если шрифт 
				// содержит только кирилицу то +96 не нужно
				b = Font->data[((ch - 192) + 96) * Font->FontHeight + i];
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80016fc:	7afb      	ldrb	r3, [r7, #11]
 80016fe:	3b60      	subs	r3, #96	; 0x60
 8001700:	6879      	ldr	r1, [r7, #4]
 8001702:	7849      	ldrb	r1, [r1, #1]
 8001704:	fb03 f101 	mul.w	r1, r3, r1
 8001708:	8bfb      	ldrh	r3, [r7, #30]
 800170a:	440b      	add	r3, r1
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	4413      	add	r3, r2
 8001710:	881b      	ldrh	r3, [r3, #0]
 8001712:	837b      	strh	r3, [r7, #26]
 8001714:	e09c      	b.n	8001850 <ST7565_DrawChar+0x1d4>
			} else if (ch == 168) {	// 168 символ по ASCII - Ё
 8001716:	7afb      	ldrb	r3, [r7, #11]
 8001718:	2ba8      	cmp	r3, #168	; 0xa8
 800171a:	d111      	bne.n	8001740 <ST7565_DrawChar+0xc4>
				// 160 эллемент ( символ Ё ) 
				b = Font->data[160 * Font->FontHeight + i];
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	785b      	ldrb	r3, [r3, #1]
 8001726:	4619      	mov	r1, r3
 8001728:	460b      	mov	r3, r1
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	440b      	add	r3, r1
 800172e:	015b      	lsls	r3, r3, #5
 8001730:	4619      	mov	r1, r3
 8001732:	8bfb      	ldrh	r3, [r7, #30]
 8001734:	440b      	add	r3, r1
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	4413      	add	r3, r2
 800173a:	881b      	ldrh	r3, [r3, #0]
 800173c:	837b      	strh	r3, [r7, #26]
 800173e:	e087      	b.n	8001850 <ST7565_DrawChar+0x1d4>
			} else if (ch == 184) {	// 184 символ по ASCII - ё
 8001740:	7afb      	ldrb	r3, [r7, #11]
 8001742:	2bb8      	cmp	r3, #184	; 0xb8
 8001744:	d111      	bne.n	800176a <ST7565_DrawChar+0xee>
				// 161 эллемент  ( символ ё ) 
				b = Font->data[161 * Font->FontHeight + i];
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f8d3 1002 	ldr.w	r1, [r3, #2]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	785b      	ldrb	r3, [r3, #1]
 8001750:	461a      	mov	r2, r3
 8001752:	4613      	mov	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	015b      	lsls	r3, r3, #5
 800175a:	441a      	add	r2, r3
 800175c:	8bfb      	ldrh	r3, [r7, #30]
 800175e:	4413      	add	r3, r2
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	440b      	add	r3, r1
 8001764:	881b      	ldrh	r3, [r3, #0]
 8001766:	837b      	strh	r3, [r7, #26]
 8001768:	e072      	b.n	8001850 <ST7565_DrawChar+0x1d4>
			} else if (ch == 170) {	// 168 символ по ASCII - Є
 800176a:	7afb      	ldrb	r3, [r7, #11]
 800176c:	2baa      	cmp	r3, #170	; 0xaa
 800176e:	d10f      	bne.n	8001790 <ST7565_DrawChar+0x114>
				// 162 эллемент ( символ Є )
				b = Font->data[162 * Font->FontHeight + i];
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	785b      	ldrb	r3, [r3, #1]
 800177a:	4619      	mov	r1, r3
 800177c:	23a2      	movs	r3, #162	; 0xa2
 800177e:	fb03 f101 	mul.w	r1, r3, r1
 8001782:	8bfb      	ldrh	r3, [r7, #30]
 8001784:	440b      	add	r3, r1
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	4413      	add	r3, r2
 800178a:	881b      	ldrh	r3, [r3, #0]
 800178c:	837b      	strh	r3, [r7, #26]
 800178e:	e05f      	b.n	8001850 <ST7565_DrawChar+0x1d4>
			} else if (ch == 175) {	// 184 символ по ASCII - Ї
 8001790:	7afb      	ldrb	r3, [r7, #11]
 8001792:	2baf      	cmp	r3, #175	; 0xaf
 8001794:	d10f      	bne.n	80017b6 <ST7565_DrawChar+0x13a>
				// 163 эллемент  ( символ Ї )
				b = Font->data[163 * Font->FontHeight + i];
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f8d3 2002 	ldr.w	r2, [r3, #2]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	785b      	ldrb	r3, [r3, #1]
 80017a0:	4619      	mov	r1, r3
 80017a2:	23a3      	movs	r3, #163	; 0xa3
 80017a4:	fb03 f101 	mul.w	r1, r3, r1
 80017a8:	8bfb      	ldrh	r3, [r7, #30]
 80017aa:	440b      	add	r3, r1
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	4413      	add	r3, r2
 80017b0:	881b      	ldrh	r3, [r3, #0]
 80017b2:	837b      	strh	r3, [r7, #26]
 80017b4:	e04c      	b.n	8001850 <ST7565_DrawChar+0x1d4>
			} else if (ch == 178) {	// 168 символ по ASCII - І
 80017b6:	7afb      	ldrb	r3, [r7, #11]
 80017b8:	2bb2      	cmp	r3, #178	; 0xb2
 80017ba:	d10f      	bne.n	80017dc <ST7565_DrawChar+0x160>
				// 164 эллемент ( символ І )
				b = Font->data[164 * Font->FontHeight + i];
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	785b      	ldrb	r3, [r3, #1]
 80017c6:	4619      	mov	r1, r3
 80017c8:	23a4      	movs	r3, #164	; 0xa4
 80017ca:	fb03 f101 	mul.w	r1, r3, r1
 80017ce:	8bfb      	ldrh	r3, [r7, #30]
 80017d0:	440b      	add	r3, r1
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	4413      	add	r3, r2
 80017d6:	881b      	ldrh	r3, [r3, #0]
 80017d8:	837b      	strh	r3, [r7, #26]
 80017da:	e039      	b.n	8001850 <ST7565_DrawChar+0x1d4>
			}
			else if (ch == 179) {	// 184 символ по ASCII - і
 80017dc:	7afb      	ldrb	r3, [r7, #11]
 80017de:	2bb3      	cmp	r3, #179	; 0xb3
 80017e0:	d111      	bne.n	8001806 <ST7565_DrawChar+0x18a>
				// 165 эллемент  ( символ і )
				b = Font->data[165 * Font->FontHeight + i];
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	785b      	ldrb	r3, [r3, #1]
 80017ec:	4619      	mov	r1, r3
 80017ee:	460b      	mov	r3, r1
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	440b      	add	r3, r1
 80017f4:	0159      	lsls	r1, r3, #5
 80017f6:	4419      	add	r1, r3
 80017f8:	8bfb      	ldrh	r3, [r7, #30]
 80017fa:	440b      	add	r3, r1
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	4413      	add	r3, r2
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	837b      	strh	r3, [r7, #26]
 8001804:	e024      	b.n	8001850 <ST7565_DrawChar+0x1d4>
			} else if (ch == 186) {	// 184 символ по ASCII - є
 8001806:	7afb      	ldrb	r3, [r7, #11]
 8001808:	2bba      	cmp	r3, #186	; 0xba
 800180a:	d10f      	bne.n	800182c <ST7565_DrawChar+0x1b0>
				// 166 эллемент  ( символ є )
				b = Font->data[166 * Font->FontHeight + i];
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	785b      	ldrb	r3, [r3, #1]
 8001816:	4619      	mov	r1, r3
 8001818:	23a6      	movs	r3, #166	; 0xa6
 800181a:	fb03 f101 	mul.w	r1, r3, r1
 800181e:	8bfb      	ldrh	r3, [r7, #30]
 8001820:	440b      	add	r3, r1
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	4413      	add	r3, r2
 8001826:	881b      	ldrh	r3, [r3, #0]
 8001828:	837b      	strh	r3, [r7, #26]
 800182a:	e011      	b.n	8001850 <ST7565_DrawChar+0x1d4>
			} else if (ch == 191) {	// 168 символ по ASCII - ї
 800182c:	7afb      	ldrb	r3, [r7, #11]
 800182e:	2bbf      	cmp	r3, #191	; 0xbf
 8001830:	d10e      	bne.n	8001850 <ST7565_DrawChar+0x1d4>
				// 167 эллемент ( символ ї )
				b = Font->data[167 * Font->FontHeight + i];
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	785b      	ldrb	r3, [r3, #1]
 800183c:	4619      	mov	r1, r3
 800183e:	23a7      	movs	r3, #167	; 0xa7
 8001840:	fb03 f101 	mul.w	r1, r3, r1
 8001844:	8bfb      	ldrh	r3, [r7, #30]
 8001846:	440b      	add	r3, r1
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	4413      	add	r3, r2
 800184c:	881b      	ldrh	r3, [r3, #0]
 800184e:	837b      	strh	r3, [r7, #26]
			}
			//-----------------------------------------------------------------------------
			
			for (j = 0; j < Font->FontWidth; j++) {
 8001850:	2300      	movs	r3, #0
 8001852:	83bb      	strh	r3, [r7, #28]
 8001854:	e071      	b.n	800193a <ST7565_DrawChar+0x2be>
				if ((b << j) & 0x8000) {
 8001856:	8b7a      	ldrh	r2, [r7, #26]
 8001858:	8bbb      	ldrh	r3, [r7, #28]
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d02d      	beq.n	80018c2 <ST7565_DrawChar+0x246>
					for (yy = 0; yy < multiplier; yy++){
 8001866:	2300      	movs	r3, #0
 8001868:	827b      	strh	r3, [r7, #18]
 800186a:	e023      	b.n	80018b4 <ST7565_DrawChar+0x238>
						for (xx = 0; xx < multiplier; xx++){
 800186c:	2300      	movs	r3, #0
 800186e:	82bb      	strh	r3, [r7, #20]
 8001870:	e014      	b.n	800189c <ST7565_DrawChar+0x220>
							ST7565_Draw_pixel(X + xx, Y + yy, color);
 8001872:	8b3a      	ldrh	r2, [r7, #24]
 8001874:	8abb      	ldrh	r3, [r7, #20]
 8001876:	4413      	add	r3, r2
 8001878:	b29b      	uxth	r3, r3
 800187a:	b218      	sxth	r0, r3
 800187c:	8afa      	ldrh	r2, [r7, #22]
 800187e:	8a7b      	ldrh	r3, [r7, #18]
 8001880:	4413      	add	r3, r2
 8001882:	b29b      	uxth	r3, r3
 8001884:	b21b      	sxth	r3, r3
 8001886:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800188a:	4619      	mov	r1, r3
 800188c:	f7ff fe60 	bl	8001550 <ST7565_Draw_pixel>
						for (xx = 0; xx < multiplier; xx++){
 8001890:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001894:	b29b      	uxth	r3, r3
 8001896:	3301      	adds	r3, #1
 8001898:	b29b      	uxth	r3, r3
 800189a:	82bb      	strh	r3, [r7, #20]
 800189c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80018a0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80018a4:	429a      	cmp	r2, r3
 80018a6:	dbe4      	blt.n	8001872 <ST7565_DrawChar+0x1f6>
					for (yy = 0; yy < multiplier; yy++){
 80018a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	3301      	adds	r3, #1
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	827b      	strh	r3, [r7, #18]
 80018b4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80018b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80018bc:	429a      	cmp	r2, r3
 80018be:	dbd5      	blt.n	800186c <ST7565_DrawChar+0x1f0>
 80018c0:	e031      	b.n	8001926 <ST7565_DrawChar+0x2aa>
						}
					}
				} else {// если фон очищать то оставляем если чтоб фон оставался старый то коментируем эту часть -------------
					for (yy = 0; yy < multiplier; yy++){
 80018c2:	2300      	movs	r3, #0
 80018c4:	827b      	strh	r3, [r7, #18]
 80018c6:	e028      	b.n	800191a <ST7565_DrawChar+0x29e>
						for (xx = 0; xx < multiplier; xx++){
 80018c8:	2300      	movs	r3, #0
 80018ca:	82bb      	strh	r3, [r7, #20]
 80018cc:	e019      	b.n	8001902 <ST7565_DrawChar+0x286>
							ST7565_Draw_pixel(X + xx, Y + yy, !color);
 80018ce:	8b3a      	ldrh	r2, [r7, #24]
 80018d0:	8abb      	ldrh	r3, [r7, #20]
 80018d2:	4413      	add	r3, r2
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	b218      	sxth	r0, r3
 80018d8:	8afa      	ldrh	r2, [r7, #22]
 80018da:	8a7b      	ldrh	r3, [r7, #18]
 80018dc:	4413      	add	r3, r2
 80018de:	b29b      	uxth	r3, r3
 80018e0:	b219      	sxth	r1, r3
 80018e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	bf0c      	ite	eq
 80018ea:	2301      	moveq	r3, #1
 80018ec:	2300      	movne	r3, #0
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	461a      	mov	r2, r3
 80018f2:	f7ff fe2d 	bl	8001550 <ST7565_Draw_pixel>
						for (xx = 0; xx < multiplier; xx++){
 80018f6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	3301      	adds	r3, #1
 80018fe:	b29b      	uxth	r3, r3
 8001900:	82bb      	strh	r3, [r7, #20]
 8001902:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001906:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800190a:	429a      	cmp	r2, r3
 800190c:	dbdf      	blt.n	80018ce <ST7565_DrawChar+0x252>
					for (yy = 0; yy < multiplier; yy++){
 800190e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001912:	b29b      	uxth	r3, r3
 8001914:	3301      	adds	r3, #1
 8001916:	b29b      	uxth	r3, r3
 8001918:	827b      	strh	r3, [r7, #18]
 800191a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800191e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001922:	429a      	cmp	r2, r3
 8001924:	dbd0      	blt.n	80018c8 <ST7565_DrawChar+0x24c>
						}
					}
				}
				//----------------------------------------------------------------------------------------------------
				X += multiplier;
 8001926:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800192a:	b29a      	uxth	r2, r3
 800192c:	8b3b      	ldrh	r3, [r7, #24]
 800192e:	4413      	add	r3, r2
 8001930:	b29b      	uxth	r3, r3
 8001932:	833b      	strh	r3, [r7, #24]
			for (j = 0; j < Font->FontWidth; j++) {
 8001934:	8bbb      	ldrh	r3, [r7, #28]
 8001936:	3301      	adds	r3, #1
 8001938:	83bb      	strh	r3, [r7, #28]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	b29b      	uxth	r3, r3
 8001940:	8bba      	ldrh	r2, [r7, #28]
 8001942:	429a      	cmp	r2, r3
 8001944:	d387      	bcc.n	8001856 <ST7565_DrawChar+0x1da>
			}
			X = x;
 8001946:	89fb      	ldrh	r3, [r7, #14]
 8001948:	833b      	strh	r3, [r7, #24]
			Y += multiplier;
 800194a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800194e:	b29a      	uxth	r2, r3
 8001950:	8afb      	ldrh	r3, [r7, #22]
 8001952:	4413      	add	r3, r2
 8001954:	b29b      	uxth	r3, r3
 8001956:	82fb      	strh	r3, [r7, #22]
		for (i = 0; i < Font->FontHeight; i++) {
 8001958:	8bfb      	ldrh	r3, [r7, #30]
 800195a:	3301      	adds	r3, #1
 800195c:	83fb      	strh	r3, [r7, #30]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	785b      	ldrb	r3, [r3, #1]
 8001962:	b29b      	uxth	r3, r3
 8001964:	8bfa      	ldrh	r2, [r7, #30]
 8001966:	429a      	cmp	r2, r3
 8001968:	f4ff aeaf 	bcc.w	80016ca <ST7565_DrawChar+0x4e>
		}
		
	}
}
 800196c:	bf00      	nop
 800196e:	3720      	adds	r7, #32
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <ST7565_Print>:
 * @brief	 ( описание ):  функция записывает строку в буфер кадра ( поддерживает кириллицу ( в том числе и Укр. язык) и латиницу
 * @param	( параметры ):	координаты X(0 - 127)  Y(0 - 63), символ, шрифт, множитель, цвет 1 или 0
 * @return  ( возвращает ):
*******************************************************************************/
void ST7565_Print(int16_t x, int16_t y, char *str, FontDef_t *Font, uint8_t multiplier, uint8_t color)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b088      	sub	sp, #32
 8001978:	af02      	add	r7, sp, #8
 800197a:	60ba      	str	r2, [r7, #8]
 800197c:	607b      	str	r3, [r7, #4]
 800197e:	4603      	mov	r3, r0
 8001980:	81fb      	strh	r3, [r7, #14]
 8001982:	460b      	mov	r3, r1
 8001984:	81bb      	strh	r3, [r7, #12]
unsigned char buff_char;
uint16_t len = strlen(str);
 8001986:	68b8      	ldr	r0, [r7, #8]
 8001988:	f7fe fc22 	bl	80001d0 <strlen>
 800198c:	4603      	mov	r3, r0
 800198e:	82bb      	strh	r3, [r7, #20]

	if (multiplier < 1) multiplier = 1;
 8001990:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001994:	2b00      	cmp	r3, #0
 8001996:	f040 809c 	bne.w	8001ad2 <ST7565_Print+0x15e>
 800199a:	2301      	movs	r3, #1
 800199c:	f887 3020 	strb.w	r3, [r7, #32]
	
	while (len--) {
 80019a0:	e097      	b.n	8001ad2 <ST7565_Print+0x15e>
		//---------------------------------------------------------------------
		// проверка на кириллицу UTF-8, если латиница то пропускаем if
		// Расширенные символы ASCII Win-1251 кириллица (код символа 128-255)
		// проверяем первый байт из двух ( так как UTF-8 ето два байта )
		// если он больше либо равен 0xC0 ( первый байт в кириллеце будет равен 0xD0 либо 0xD1 именно в алфавите )
		if ( (uint8_t)*str >= 0xC0 ) {	// код 0xC0 соответствует символу кириллица 'A' по ASCII Win-1251
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2bbf      	cmp	r3, #191	; 0xbf
 80019a8:	d974      	bls.n	8001a94 <ST7565_Print+0x120>
			// проверяем какой именно байт первый 0xD0 либо 0xD1
			switch ((uint8_t)*str) {
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2bd0      	cmp	r3, #208	; 0xd0
 80019b0:	d002      	beq.n	80019b8 <ST7565_Print+0x44>
 80019b2:	2bd1      	cmp	r3, #209	; 0xd1
 80019b4:	d02c      	beq.n	8001a10 <ST7565_Print+0x9c>
 80019b6:	e05b      	b.n	8001a70 <ST7565_Print+0xfc>
				case 0xD0:
				//{
					// увеличиваем массив так как нам нужен второй байт
					str++;
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	3301      	adds	r3, #1
 80019bc:	60bb      	str	r3, [r7, #8]
					// проверяем второй байт там сам символ
					if ((uint8_t)*str == 0x81) { buff_char = 0xA8; break; }		// байт символа Ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b81      	cmp	r3, #129	; 0x81
 80019c4:	d102      	bne.n	80019cc <ST7565_Print+0x58>
 80019c6:	23a8      	movs	r3, #168	; 0xa8
 80019c8:	75fb      	strb	r3, [r7, #23]
 80019ca:	e051      	b.n	8001a70 <ST7565_Print+0xfc>
					else if ((uint8_t)*str >= 0x90 && (uint8_t)*str <= 0xBF) { buff_char = (*str) + 0x30; }	// байт символов А...Я а...п  делаем здвиг на +48
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b8f      	cmp	r3, #143	; 0x8f
 80019d2:	d908      	bls.n	80019e6 <ST7565_Print+0x72>
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2bbf      	cmp	r3, #191	; 0xbf
 80019da:	d804      	bhi.n	80019e6 <ST7565_Print+0x72>
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	3330      	adds	r3, #48	; 0x30
 80019e2:	75fb      	strb	r3, [r7, #23]
					else if ((uint8_t)*str == 0x84) { buff_char = 0xAA; break; }		// байт символа Є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x86) { buff_char = 0xB2; break; }		// байт символа І ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x87) { buff_char = 0xAF; break; }		// байт символа Ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
				break;
 80019e4:	e041      	b.n	8001a6a <ST7565_Print+0xf6>
					else if ((uint8_t)*str == 0x84) { buff_char = 0xAA; break; }		// байт символа Є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b84      	cmp	r3, #132	; 0x84
 80019ec:	d102      	bne.n	80019f4 <ST7565_Print+0x80>
 80019ee:	23aa      	movs	r3, #170	; 0xaa
 80019f0:	75fb      	strb	r3, [r7, #23]
 80019f2:	e03d      	b.n	8001a70 <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x86) { buff_char = 0xB2; break; }		// байт символа І ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b86      	cmp	r3, #134	; 0x86
 80019fa:	d102      	bne.n	8001a02 <ST7565_Print+0x8e>
 80019fc:	23b2      	movs	r3, #178	; 0xb2
 80019fe:	75fb      	strb	r3, [r7, #23]
 8001a00:	e036      	b.n	8001a70 <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x87) { buff_char = 0xAF; break; }		// байт символа Ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b87      	cmp	r3, #135	; 0x87
 8001a08:	d12f      	bne.n	8001a6a <ST7565_Print+0xf6>
 8001a0a:	23af      	movs	r3, #175	; 0xaf
 8001a0c:	75fb      	strb	r3, [r7, #23]
 8001a0e:	e02f      	b.n	8001a70 <ST7565_Print+0xfc>
				//}
				case 0xD1:
				//{
					// увеличиваем массив так как нам нужен второй байт
					str++;
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	3301      	adds	r3, #1
 8001a14:	60bb      	str	r3, [r7, #8]
					// проверяем второй байт там сам символ
					if ((uint8_t)*str == 0x91) { buff_char = 0xB8; break; }		// байт символа ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b91      	cmp	r3, #145	; 0x91
 8001a1c:	d102      	bne.n	8001a24 <ST7565_Print+0xb0>
 8001a1e:	23b8      	movs	r3, #184	; 0xb8
 8001a20:	75fb      	strb	r3, [r7, #23]
 8001a22:	e025      	b.n	8001a70 <ST7565_Print+0xfc>
					else if ((uint8_t)*str >= 0x80 && (uint8_t)*str <= 0x8F) { buff_char = (*str) + 0x70; }	// байт символов п...я	елаем здвиг на +112
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	b25b      	sxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	da08      	bge.n	8001a40 <ST7565_Print+0xcc>
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b8f      	cmp	r3, #143	; 0x8f
 8001a34:	d804      	bhi.n	8001a40 <ST7565_Print+0xcc>
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	3370      	adds	r3, #112	; 0x70
 8001a3c:	75fb      	strb	r3, [r7, #23]
					else if ((uint8_t)*str == 0x94) { buff_char = 0xBA; break; }		// байт символа є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x96) { buff_char = 0xB3; break; }		// байт символа і ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x97) { buff_char = 0xBF; break; }		// байт символа ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
				break;
 8001a3e:	e016      	b.n	8001a6e <ST7565_Print+0xfa>
					else if ((uint8_t)*str == 0x94) { buff_char = 0xBA; break; }		// байт символа є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b94      	cmp	r3, #148	; 0x94
 8001a46:	d102      	bne.n	8001a4e <ST7565_Print+0xda>
 8001a48:	23ba      	movs	r3, #186	; 0xba
 8001a4a:	75fb      	strb	r3, [r7, #23]
 8001a4c:	e010      	b.n	8001a70 <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x96) { buff_char = 0xB3; break; }		// байт символа і ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b96      	cmp	r3, #150	; 0x96
 8001a54:	d102      	bne.n	8001a5c <ST7565_Print+0xe8>
 8001a56:	23b3      	movs	r3, #179	; 0xb3
 8001a58:	75fb      	strb	r3, [r7, #23]
 8001a5a:	e009      	b.n	8001a70 <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x97) { buff_char = 0xBF; break; }		// байт символа ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b97      	cmp	r3, #151	; 0x97
 8001a62:	d104      	bne.n	8001a6e <ST7565_Print+0xfa>
 8001a64:	23bf      	movs	r3, #191	; 0xbf
 8001a66:	75fb      	strb	r3, [r7, #23]
 8001a68:	e002      	b.n	8001a70 <ST7565_Print+0xfc>
				break;
 8001a6a:	bf00      	nop
 8001a6c:	e000      	b.n	8001a70 <ST7565_Print+0xfc>
				break;
 8001a6e:	bf00      	nop
				//}
			}
			// уменьшаем еще переменную так как израсходывали 2 байта для кириллицы
			len--;
 8001a70:	8abb      	ldrh	r3, [r7, #20]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	82bb      	strh	r3, [r7, #20]
			ST7565_DrawChar(x, y, buff_char, Font, multiplier, color);
 8001a76:	7dfa      	ldrb	r2, [r7, #23]
 8001a78:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001a7c:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001a80:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a84:	9301      	str	r3, [sp, #4]
 8001a86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f7ff fdf5 	bl	800167c <ST7565_DrawChar>
 8001a92:	e00e      	b.n	8001ab2 <ST7565_Print+0x13e>
		} else {
			ST7565_DrawChar(x, y, *str, Font, multiplier, color);
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	781a      	ldrb	r2, [r3, #0]
 8001a98:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001a9c:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001aa0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001aa4:	9301      	str	r3, [sp, #4]
 8001aa6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f7ff fde5 	bl	800167c <ST7565_DrawChar>
		}
		
		x += (Font->FontWidth * multiplier);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	fb12 f303 	smulbb	r3, r2, r3
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	89fb      	ldrh	r3, [r7, #14]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	81fb      	strh	r3, [r7, #14]
		str++;
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	60bb      	str	r3, [r7, #8]
	while (len--) {
 8001ad2:	8abb      	ldrh	r3, [r7, #20]
 8001ad4:	1e5a      	subs	r2, r3, #1
 8001ad6:	82ba      	strh	r2, [r7, #20]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f47f af62 	bne.w	80019a2 <ST7565_Print+0x2e>
	}
}
 8001ade:	bf00      	nop
 8001ae0:	bf00      	nop
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <ST7565_DrawLine>:
	* @param	( параметры ):	координаты начальной точки и конечной и цвет 0 или 1
								X(0 - 127)  Y(0 - 63)
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint8_t c)
{
 8001ae8:	b590      	push	{r4, r7, lr}
 8001aea:	b087      	sub	sp, #28
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4604      	mov	r4, r0
 8001af0:	4608      	mov	r0, r1
 8001af2:	4611      	mov	r1, r2
 8001af4:	461a      	mov	r2, r3
 8001af6:	4623      	mov	r3, r4
 8001af8:	80fb      	strh	r3, [r7, #6]
 8001afa:	4603      	mov	r3, r0
 8001afc:	80bb      	strh	r3, [r7, #4]
 8001afe:	460b      	mov	r3, r1
 8001b00:	807b      	strh	r3, [r7, #2]
 8001b02:	4613      	mov	r3, r2
 8001b04:	803b      	strh	r3, [r7, #0]
int16_t dx, dy, sx, sy, err, e2, i, tmp;
	
	/* Check for overflow */
	if (x0 >= SCREEN_WIDTH)  x0 = SCREEN_WIDTH  - 1;
 8001b06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b0a:	2b7f      	cmp	r3, #127	; 0x7f
 8001b0c:	dd01      	ble.n	8001b12 <ST7565_DrawLine+0x2a>
 8001b0e:	237f      	movs	r3, #127	; 0x7f
 8001b10:	80fb      	strh	r3, [r7, #6]
	if (x1 >= SCREEN_WIDTH)  x1 = SCREEN_WIDTH  - 1;
 8001b12:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b16:	2b7f      	cmp	r3, #127	; 0x7f
 8001b18:	dd01      	ble.n	8001b1e <ST7565_DrawLine+0x36>
 8001b1a:	237f      	movs	r3, #127	; 0x7f
 8001b1c:	807b      	strh	r3, [r7, #2]
	if (y0 >= SCREEN_HEIGHT) y0 = SCREEN_HEIGHT - 1;
 8001b1e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001b22:	2b3f      	cmp	r3, #63	; 0x3f
 8001b24:	dd01      	ble.n	8001b2a <ST7565_DrawLine+0x42>
 8001b26:	233f      	movs	r3, #63	; 0x3f
 8001b28:	80bb      	strh	r3, [r7, #4]
	if (y1 >= SCREEN_HEIGHT) y1 = SCREEN_HEIGHT - 1;
 8001b2a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001b2e:	2b3f      	cmp	r3, #63	; 0x3f
 8001b30:	dd01      	ble.n	8001b36 <ST7565_DrawLine+0x4e>
 8001b32:	233f      	movs	r3, #63	; 0x3f
 8001b34:	803b      	strh	r3, [r7, #0]
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8001b36:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b3a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	da05      	bge.n	8001b4e <ST7565_DrawLine+0x66>
 8001b42:	887a      	ldrh	r2, [r7, #2]
 8001b44:	88fb      	ldrh	r3, [r7, #6]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	b21b      	sxth	r3, r3
 8001b4c:	e004      	b.n	8001b58 <ST7565_DrawLine+0x70>
 8001b4e:	88fa      	ldrh	r2, [r7, #6]
 8001b50:	887b      	ldrh	r3, [r7, #2]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	b21b      	sxth	r3, r3
 8001b58:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8001b5a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001b5e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	da05      	bge.n	8001b72 <ST7565_DrawLine+0x8a>
 8001b66:	883a      	ldrh	r2, [r7, #0]
 8001b68:	88bb      	ldrh	r3, [r7, #4]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	b21b      	sxth	r3, r3
 8001b70:	e004      	b.n	8001b7c <ST7565_DrawLine+0x94>
 8001b72:	88ba      	ldrh	r2, [r7, #4]
 8001b74:	883b      	ldrh	r3, [r7, #0]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	b21b      	sxth	r3, r3
 8001b7c:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8001b7e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b82:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	da01      	bge.n	8001b8e <ST7565_DrawLine+0xa6>
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e001      	b.n	8001b92 <ST7565_DrawLine+0xaa>
 8001b8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b92:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8001b94:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001b98:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	da01      	bge.n	8001ba4 <ST7565_DrawLine+0xbc>
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e001      	b.n	8001ba8 <ST7565_DrawLine+0xc0>
 8001ba4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ba8:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8001baa:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001bae:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	dd06      	ble.n	8001bc4 <ST7565_DrawLine+0xdc>
 8001bb6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001bba:	0fda      	lsrs	r2, r3, #31
 8001bbc:	4413      	add	r3, r2
 8001bbe:	105b      	asrs	r3, r3, #1
 8001bc0:	b21b      	sxth	r3, r3
 8001bc2:	e006      	b.n	8001bd2 <ST7565_DrawLine+0xea>
 8001bc4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001bc8:	0fda      	lsrs	r2, r3, #31
 8001bca:	4413      	add	r3, r2
 8001bcc:	105b      	asrs	r3, r3, #1
 8001bce:	425b      	negs	r3, r3
 8001bd0:	b21b      	sxth	r3, r3
 8001bd2:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8001bd4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d130      	bne.n	8001c3e <ST7565_DrawLine+0x156>
		if (y1 < y0) {
 8001bdc:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001be0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	da05      	bge.n	8001bf4 <ST7565_DrawLine+0x10c>
			tmp = y1;
 8001be8:	883b      	ldrh	r3, [r7, #0]
 8001bea:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001bec:	88bb      	ldrh	r3, [r7, #4]
 8001bee:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001bf0:	893b      	ldrh	r3, [r7, #8]
 8001bf2:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001bf4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001bf8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	da05      	bge.n	8001c0c <ST7565_DrawLine+0x124>
			tmp = x1;
 8001c00:	887b      	ldrh	r3, [r7, #2]
 8001c02:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001c04:	88fb      	ldrh	r3, [r7, #6]
 8001c06:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001c08:	893b      	ldrh	r3, [r7, #8]
 8001c0a:	80fb      	strh	r3, [r7, #6]
		}
		
		// Vertical line
		for (i = y0; i <= y1; i++) ST7565_Draw_pixel(x0, i, c);
 8001c0c:	88bb      	ldrh	r3, [r7, #4]
 8001c0e:	82bb      	strh	r3, [r7, #20]
 8001c10:	e00e      	b.n	8001c30 <ST7565_DrawLine+0x148>
 8001c12:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001c16:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8001c1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fc96 	bl	8001550 <ST7565_Draw_pixel>
 8001c24:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	82bb      	strh	r3, [r7, #20]
 8001c30:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001c34:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	ddea      	ble.n	8001c12 <ST7565_DrawLine+0x12a>
		
		return;
 8001c3c:	e06e      	b.n	8001d1c <ST7565_DrawLine+0x234>
	}
	
	if (dy == 0) {
 8001c3e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d130      	bne.n	8001ca8 <ST7565_DrawLine+0x1c0>
		if (y1 < y0) {
 8001c46:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001c4a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	da05      	bge.n	8001c5e <ST7565_DrawLine+0x176>
			tmp = y1;
 8001c52:	883b      	ldrh	r3, [r7, #0]
 8001c54:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001c56:	88bb      	ldrh	r3, [r7, #4]
 8001c58:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001c5a:	893b      	ldrh	r3, [r7, #8]
 8001c5c:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001c5e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001c62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	da05      	bge.n	8001c76 <ST7565_DrawLine+0x18e>
			tmp = x1;
 8001c6a:	887b      	ldrh	r3, [r7, #2]
 8001c6c:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001c6e:	88fb      	ldrh	r3, [r7, #6]
 8001c70:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001c72:	893b      	ldrh	r3, [r7, #8]
 8001c74:	80fb      	strh	r3, [r7, #6]
		}
		
		// Horizontal line
		for (i = x0; i <= x1; i++) ST7565_Draw_pixel(i, y0, c);
 8001c76:	88fb      	ldrh	r3, [r7, #6]
 8001c78:	82bb      	strh	r3, [r7, #20]
 8001c7a:	e00e      	b.n	8001c9a <ST7565_DrawLine+0x1b2>
 8001c7c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001c80:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001c84:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff fc61 	bl	8001550 <ST7565_Draw_pixel>
 8001c8e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	3301      	adds	r3, #1
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	82bb      	strh	r3, [r7, #20]
 8001c9a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001c9e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	ddea      	ble.n	8001c7c <ST7565_DrawLine+0x194>
		
		return;
 8001ca6:	e039      	b.n	8001d1c <ST7565_DrawLine+0x234>
	}
	
	while (1) {
		ST7565_Draw_pixel(x0, y0, c);
 8001ca8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001cac:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001cb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff fc4b 	bl	8001550 <ST7565_Draw_pixel>
		if (x0 == x1 && y0 == y1) break;
 8001cba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001cbe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d105      	bne.n	8001cd2 <ST7565_DrawLine+0x1ea>
 8001cc6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001cca:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d023      	beq.n	8001d1a <ST7565_DrawLine+0x232>

		e2 = err; 
 8001cd2:	8afb      	ldrh	r3, [r7, #22]
 8001cd4:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8001cd6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001cda:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001cde:	425b      	negs	r3, r3
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	dd09      	ble.n	8001cf8 <ST7565_DrawLine+0x210>
			err -= dy;
 8001ce4:	8afa      	ldrh	r2, [r7, #22]
 8001ce6:	8a3b      	ldrh	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001cee:	88fa      	ldrh	r2, [r7, #6]
 8001cf0:	89fb      	ldrh	r3, [r7, #14]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8001cf8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001cfc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	dad1      	bge.n	8001ca8 <ST7565_DrawLine+0x1c0>
			err += dx;
 8001d04:	8afa      	ldrh	r2, [r7, #22]
 8001d06:	8a7b      	ldrh	r3, [r7, #18]
 8001d08:	4413      	add	r3, r2
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001d0e:	88ba      	ldrh	r2, [r7, #4]
 8001d10:	89bb      	ldrh	r3, [r7, #12]
 8001d12:	4413      	add	r3, r2
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	80bb      	strh	r3, [r7, #4]
		ST7565_Draw_pixel(x0, y0, c);
 8001d18:	e7c6      	b.n	8001ca8 <ST7565_DrawLine+0x1c0>
		if (x0 == x1 && y0 == y1) break;
 8001d1a:	bf00      	nop
		} 
	}
}
 8001d1c:	371c      	adds	r7, #28
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd90      	pop	{r4, r7, pc}

08001d22 <ST7565_DrawRectangle>:
	* @param	( параметры ):	координаты верхнего левого и ширина и высота и цвет
								X(0 - 127)  Y(0 - 63)
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawRectangle(int16_t x, int16_t y, int16_t w, int16_t h, uint8_t c)
{
 8001d22:	b590      	push	{r4, r7, lr}
 8001d24:	b085      	sub	sp, #20
 8001d26:	af02      	add	r7, sp, #8
 8001d28:	4604      	mov	r4, r0
 8001d2a:	4608      	mov	r0, r1
 8001d2c:	4611      	mov	r1, r2
 8001d2e:	461a      	mov	r2, r3
 8001d30:	4623      	mov	r3, r4
 8001d32:	80fb      	strh	r3, [r7, #6]
 8001d34:	4603      	mov	r3, r0
 8001d36:	80bb      	strh	r3, [r7, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	807b      	strh	r3, [r7, #2]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	803b      	strh	r3, [r7, #0]
	// Check input parameters
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001d40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d44:	2b7f      	cmp	r3, #127	; 0x7f
 8001d46:	dc6a      	bgt.n	8001e1e <ST7565_DrawRectangle+0xfc>
 8001d48:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001d4c:	2b3f      	cmp	r3, #63	; 0x3f
 8001d4e:	dc66      	bgt.n	8001e1e <ST7565_DrawRectangle+0xfc>
	
	// Check width and height
	if ((x + w) >= SCREEN_WIDTH)  w = SCREEN_WIDTH  - x;
 8001d50:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001d54:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001d58:	4413      	add	r3, r2
 8001d5a:	2b7f      	cmp	r3, #127	; 0x7f
 8001d5c:	dd04      	ble.n	8001d68 <ST7565_DrawRectangle+0x46>
 8001d5e:	88fb      	ldrh	r3, [r7, #6]
 8001d60:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	807b      	strh	r3, [r7, #2]
	if ((y + h) >= SCREEN_HEIGHT) h = SCREEN_HEIGHT - y;
 8001d68:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001d6c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001d70:	4413      	add	r3, r2
 8001d72:	2b3f      	cmp	r3, #63	; 0x3f
 8001d74:	dd04      	ble.n	8001d80 <ST7565_DrawRectangle+0x5e>
 8001d76:	88bb      	ldrh	r3, [r7, #4]
 8001d78:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	803b      	strh	r3, [r7, #0]
	
	// Draw 4 lines
	ST7565_DrawLine(x, y, x + w, y, c);         // Top line
 8001d80:	88fa      	ldrh	r2, [r7, #6]
 8001d82:	887b      	ldrh	r3, [r7, #2]
 8001d84:	4413      	add	r3, r2
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	b21a      	sxth	r2, r3
 8001d8a:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8001d8e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001d92:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001d96:	7e3b      	ldrb	r3, [r7, #24]
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	4623      	mov	r3, r4
 8001d9c:	f7ff fea4 	bl	8001ae8 <ST7565_DrawLine>
	ST7565_DrawLine(x, y + h, x + w, y + h, c); // Bottom line
 8001da0:	88ba      	ldrh	r2, [r7, #4]
 8001da2:	883b      	ldrh	r3, [r7, #0]
 8001da4:	4413      	add	r3, r2
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	b219      	sxth	r1, r3
 8001daa:	88fa      	ldrh	r2, [r7, #6]
 8001dac:	887b      	ldrh	r3, [r7, #2]
 8001dae:	4413      	add	r3, r2
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	b21c      	sxth	r4, r3
 8001db4:	88ba      	ldrh	r2, [r7, #4]
 8001db6:	883b      	ldrh	r3, [r7, #0]
 8001db8:	4413      	add	r3, r2
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	b21a      	sxth	r2, r3
 8001dbe:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001dc2:	7e3b      	ldrb	r3, [r7, #24]
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	4622      	mov	r2, r4
 8001dca:	f7ff fe8d 	bl	8001ae8 <ST7565_DrawLine>
	ST7565_DrawLine(x, y, x, y + h, c);         // Left line
 8001dce:	88ba      	ldrh	r2, [r7, #4]
 8001dd0:	883b      	ldrh	r3, [r7, #0]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	b21c      	sxth	r4, r3
 8001dd8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001ddc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001de0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001de4:	7e3b      	ldrb	r3, [r7, #24]
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	4623      	mov	r3, r4
 8001dea:	f7ff fe7d 	bl	8001ae8 <ST7565_DrawLine>
	ST7565_DrawLine(x + w, y, x + w, y + h, c); // Right line
 8001dee:	88fa      	ldrh	r2, [r7, #6]
 8001df0:	887b      	ldrh	r3, [r7, #2]
 8001df2:	4413      	add	r3, r2
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	b218      	sxth	r0, r3
 8001df8:	88fa      	ldrh	r2, [r7, #6]
 8001dfa:	887b      	ldrh	r3, [r7, #2]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	b21c      	sxth	r4, r3
 8001e02:	88ba      	ldrh	r2, [r7, #4]
 8001e04:	883b      	ldrh	r3, [r7, #0]
 8001e06:	4413      	add	r3, r2
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	b21a      	sxth	r2, r3
 8001e0c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001e10:	7e3b      	ldrb	r3, [r7, #24]
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	4613      	mov	r3, r2
 8001e16:	4622      	mov	r2, r4
 8001e18:	f7ff fe66 	bl	8001ae8 <ST7565_DrawLine>
 8001e1c:	e000      	b.n	8001e20 <ST7565_DrawRectangle+0xfe>
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001e1e:	bf00      	nop
}
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd90      	pop	{r4, r7, pc}

08001e26 <ST7565_DrawFilledRectangle>:
	* @param	( параметры ):	координаты верхнего левого и ширина и высота и цвет
								X(0 - 127)  Y(0 - 63)
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawFilledRectangle(int16_t x, int16_t y, int16_t w, int16_t h, uint8_t c)
{
 8001e26:	b590      	push	{r4, r7, lr}
 8001e28:	b087      	sub	sp, #28
 8001e2a:	af02      	add	r7, sp, #8
 8001e2c:	4604      	mov	r4, r0
 8001e2e:	4608      	mov	r0, r1
 8001e30:	4611      	mov	r1, r2
 8001e32:	461a      	mov	r2, r3
 8001e34:	4623      	mov	r3, r4
 8001e36:	80fb      	strh	r3, [r7, #6]
 8001e38:	4603      	mov	r3, r0
 8001e3a:	80bb      	strh	r3, [r7, #4]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	807b      	strh	r3, [r7, #2]
 8001e40:	4613      	mov	r3, r2
 8001e42:	803b      	strh	r3, [r7, #0]
uint8_t i;
	
	// Check input parameters
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001e44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e48:	2b7f      	cmp	r3, #127	; 0x7f
 8001e4a:	dc41      	bgt.n	8001ed0 <ST7565_DrawFilledRectangle+0xaa>
 8001e4c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e50:	2b3f      	cmp	r3, #63	; 0x3f
 8001e52:	dc3d      	bgt.n	8001ed0 <ST7565_DrawFilledRectangle+0xaa>
	
	// Check width and height
	if ((x + w) >= SCREEN_WIDTH)  w = SCREEN_WIDTH  - x;
 8001e54:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001e58:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	2b7f      	cmp	r3, #127	; 0x7f
 8001e60:	dd04      	ble.n	8001e6c <ST7565_DrawFilledRectangle+0x46>
 8001e62:	88fb      	ldrh	r3, [r7, #6]
 8001e64:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	807b      	strh	r3, [r7, #2]
	if ((y + h) >= SCREEN_HEIGHT) h = SCREEN_HEIGHT - y;
 8001e6c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001e70:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001e74:	4413      	add	r3, r2
 8001e76:	2b3f      	cmp	r3, #63	; 0x3f
 8001e78:	dd04      	ble.n	8001e84 <ST7565_DrawFilledRectangle+0x5e>
 8001e7a:	88bb      	ldrh	r3, [r7, #4]
 8001e7c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	803b      	strh	r3, [r7, #0]
	
	for (i = 0; i <= h; i++) ST7565_DrawLine(x, y + i, x + w, y + i, c);
 8001e84:	2300      	movs	r3, #0
 8001e86:	73fb      	strb	r3, [r7, #15]
 8001e88:	e01c      	b.n	8001ec4 <ST7565_DrawFilledRectangle+0x9e>
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	88bb      	ldrh	r3, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	b219      	sxth	r1, r3
 8001e96:	88fa      	ldrh	r2, [r7, #6]
 8001e98:	887b      	ldrh	r3, [r7, #2]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	b21c      	sxth	r4, r3
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	88bb      	ldrh	r3, [r7, #4]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	b21a      	sxth	r2, r3
 8001eac:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001eb0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	4622      	mov	r2, r4
 8001eba:	f7ff fe15 	bl	8001ae8 <ST7565_DrawLine>
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	73fb      	strb	r3, [r7, #15]
 8001ec4:	7bfa      	ldrb	r2, [r7, #15]
 8001ec6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	dddd      	ble.n	8001e8a <ST7565_DrawFilledRectangle+0x64>
 8001ece:	e000      	b.n	8001ed2 <ST7565_DrawFilledRectangle+0xac>
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001ed0:	bf00      	nop
}
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd90      	pop	{r4, r7, pc}

08001ed8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001edc:	f3bf 8f4f 	dsb	sy
}
 8001ee0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001ee2:	4b06      	ldr	r3, [pc, #24]	; (8001efc <__NVIC_SystemReset+0x24>)
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001eea:	4904      	ldr	r1, [pc, #16]	; (8001efc <__NVIC_SystemReset+0x24>)
 8001eec:	4b04      	ldr	r3, [pc, #16]	; (8001f00 <__NVIC_SystemReset+0x28>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001ef2:	f3bf 8f4f 	dsb	sy
}
 8001ef6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001ef8:	bf00      	nop
 8001efa:	e7fd      	b.n	8001ef8 <__NVIC_SystemReset+0x20>
 8001efc:	e000ed00 	.word	0xe000ed00
 8001f00:	05fa0004 	.word	0x05fa0004

08001f04 <showCfg>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//------------------------------------------------------------------------------------------
void showCfg()
{
 8001f04:	b5b0      	push	{r4, r5, r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af04      	add	r7, sp, #16
	*strf = '\0';
 8001f0a:	4b20      	ldr	r3, [pc, #128]	; (8001f8c <showCfg+0x88>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_LIST; i++) {
 8001f10:	2300      	movs	r3, #0
 8001f12:	607b      	str	r3, [r7, #4]
 8001f14:	e02d      	b.n	8001f72 <showCfg+0x6e>
		sprintf(strf+strlen(strf), "%u:%.1f:%s\r\n", list[i].band, list[i].freq, list[i].name);
 8001f16:	481d      	ldr	r0, [pc, #116]	; (8001f8c <showCfg+0x88>)
 8001f18:	f7fe f95a 	bl	80001d0 <strlen>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	4a1b      	ldr	r2, [pc, #108]	; (8001f8c <showCfg+0x88>)
 8001f20:	189c      	adds	r4, r3, r2
 8001f22:	491b      	ldr	r1, [pc, #108]	; (8001f90 <showCfg+0x8c>)
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	4613      	mov	r3, r2
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	4413      	add	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	440b      	add	r3, r1
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	461d      	mov	r5, r3
 8001f34:	4916      	ldr	r1, [pc, #88]	; (8001f90 <showCfg+0x8c>)
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	4413      	add	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe fafe 	bl	8000548 <__aeabi_f2d>
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	4413      	add	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4a0e      	ldr	r2, [pc, #56]	; (8001f90 <showCfg+0x8c>)
 8001f58:	4413      	add	r3, r2
 8001f5a:	3305      	adds	r3, #5
 8001f5c:	9302      	str	r3, [sp, #8]
 8001f5e:	e9cd 0100 	strd	r0, r1, [sp]
 8001f62:	462a      	mov	r2, r5
 8001f64:	490b      	ldr	r1, [pc, #44]	; (8001f94 <showCfg+0x90>)
 8001f66:	4620      	mov	r0, r4
 8001f68:	f011 fd5a 	bl	8013a20 <siprintf>
	for (int i = 0; i < MAX_LIST; i++) {
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	607b      	str	r3, [r7, #4]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b19      	cmp	r3, #25
 8001f76:	ddce      	ble.n	8001f16 <showCfg+0x12>
	}
	Report(0, "%s", strf);
 8001f78:	4a04      	ldr	r2, [pc, #16]	; (8001f8c <showCfg+0x88>)
 8001f7a:	4907      	ldr	r1, [pc, #28]	; (8001f98 <showCfg+0x94>)
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	f001 f883 	bl	8003088 <Report>
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bdb0      	pop	{r4, r5, r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20001700 	.word	0x20001700
 8001f90:	20002f58 	.word	0x20002f58
 8001f94:	080175f0 	.word	0x080175f0
 8001f98:	08017600 	.word	0x08017600

08001f9c <errName>:
//------------------------------------------------------------------------------------------


//-------------------------------------------------------------------------------------------
static char *errName(uint16_t err)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	80fb      	strh	r3, [r7, #6]

	switch (err) {
 8001fa6:	88fb      	ldrh	r3, [r7, #6]
 8001fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fac:	d06b      	beq.n	8002086 <errName+0xea>
 8001fae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fb2:	dc6a      	bgt.n	800208a <errName+0xee>
 8001fb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fb8:	d063      	beq.n	8002082 <errName+0xe6>
 8001fba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fbe:	dc64      	bgt.n	800208a <errName+0xee>
 8001fc0:	2b80      	cmp	r3, #128	; 0x80
 8001fc2:	d05c      	beq.n	800207e <errName+0xe2>
 8001fc4:	2b80      	cmp	r3, #128	; 0x80
 8001fc6:	dc60      	bgt.n	800208a <errName+0xee>
 8001fc8:	2b20      	cmp	r3, #32
 8001fca:	dc47      	bgt.n	800205c <errName+0xc0>
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	dd5c      	ble.n	800208a <errName+0xee>
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	2b1f      	cmp	r3, #31
 8001fd4:	d859      	bhi.n	800208a <errName+0xee>
 8001fd6:	a201      	add	r2, pc, #4	; (adr r2, 8001fdc <errName+0x40>)
 8001fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fdc:	08002063 	.word	0x08002063
 8001fe0:	08002067 	.word	0x08002067
 8001fe4:	0800208b 	.word	0x0800208b
 8001fe8:	0800206b 	.word	0x0800206b
 8001fec:	0800208b 	.word	0x0800208b
 8001ff0:	0800208b 	.word	0x0800208b
 8001ff4:	0800208b 	.word	0x0800208b
 8001ff8:	0800206f 	.word	0x0800206f
 8001ffc:	0800208b 	.word	0x0800208b
 8002000:	0800208b 	.word	0x0800208b
 8002004:	0800208b 	.word	0x0800208b
 8002008:	0800208b 	.word	0x0800208b
 800200c:	0800208b 	.word	0x0800208b
 8002010:	0800208b 	.word	0x0800208b
 8002014:	0800208b 	.word	0x0800208b
 8002018:	08002073 	.word	0x08002073
 800201c:	0800208b 	.word	0x0800208b
 8002020:	0800208b 	.word	0x0800208b
 8002024:	0800208b 	.word	0x0800208b
 8002028:	0800208b 	.word	0x0800208b
 800202c:	0800208b 	.word	0x0800208b
 8002030:	0800208b 	.word	0x0800208b
 8002034:	0800208b 	.word	0x0800208b
 8002038:	0800208b 	.word	0x0800208b
 800203c:	0800208b 	.word	0x0800208b
 8002040:	0800208b 	.word	0x0800208b
 8002044:	0800208b 	.word	0x0800208b
 8002048:	0800208b 	.word	0x0800208b
 800204c:	0800208b 	.word	0x0800208b
 8002050:	0800208b 	.word	0x0800208b
 8002054:	0800208b 	.word	0x0800208b
 8002058:	08002077 	.word	0x08002077
 800205c:	2b40      	cmp	r3, #64	; 0x40
 800205e:	d00c      	beq.n	800207a <errName+0xde>
 8002060:	e013      	b.n	800208a <errName+0xee>
		case devTIK:// = 1,
			return "devTIK";
 8002062:	4b0d      	ldr	r3, [pc, #52]	; (8002098 <errName+0xfc>)
 8002064:	e012      	b.n	800208c <errName+0xf0>
		case devUART:// = 2,
			return "devUART";
 8002066:	4b0d      	ldr	r3, [pc, #52]	; (800209c <errName+0x100>)
 8002068:	e010      	b.n	800208c <errName+0xf0>
		case devMEM://= 4,
			return "devMEM";
 800206a:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <errName+0x104>)
 800206c:	e00e      	b.n	800208c <errName+0xf0>
		case devRTC:// = 8,
			return "devRTC";
 800206e:	4b0d      	ldr	r3, [pc, #52]	; (80020a4 <errName+0x108>)
 8002070:	e00c      	b.n	800208c <errName+0xf0>
		case devEVT:// = 0x10,
			return "devEVT";
 8002072:	4b0d      	ldr	r3, [pc, #52]	; (80020a8 <errName+0x10c>)
 8002074:	e00a      	b.n	800208c <errName+0xf0>
		case devSYS:// = 0x20,
			return "devSYS";
 8002076:	4b0d      	ldr	r3, [pc, #52]	; (80020ac <errName+0x110>)
 8002078:	e008      	b.n	800208c <errName+0xf0>
		case devSPI:// = 0x40,
			return "devSPI";
 800207a:	4b0d      	ldr	r3, [pc, #52]	; (80020b0 <errName+0x114>)
 800207c:	e006      	b.n	800208c <errName+0xf0>
		case devLCD:// = 0x80,
			return "devLCD";
 800207e:	4b0d      	ldr	r3, [pc, #52]	; (80020b4 <errName+0x118>)
 8002080:	e004      	b.n	800208c <errName+0xf0>
		case devRDA:// = 0x100,
			return "devRDA";
 8002082:	4b0d      	ldr	r3, [pc, #52]	; (80020b8 <errName+0x11c>)
 8002084:	e002      	b.n	800208c <errName+0xf0>
		case devFS:// = 0x200
			return "devFS";
 8002086:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <errName+0x120>)
 8002088:	e000      	b.n	800208c <errName+0xf0>
		case devQUE:// = 0x800
			return "devQUE";
#endif
	}

	return "???";
 800208a:	4b0d      	ldr	r3, [pc, #52]	; (80020c0 <errName+0x124>)
}
 800208c:	4618      	mov	r0, r3
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	08017604 	.word	0x08017604
 800209c:	0801760c 	.word	0x0801760c
 80020a0:	08017614 	.word	0x08017614
 80020a4:	0801761c 	.word	0x0801761c
 80020a8:	08017624 	.word	0x08017624
 80020ac:	0801762c 	.word	0x0801762c
 80020b0:	08017634 	.word	0x08017634
 80020b4:	0801763c 	.word	0x0801763c
 80020b8:	08017644 	.word	0x08017644
 80020bc:	0801764c 	.word	0x0801764c
 80020c0:	080175bc 	.word	0x080175bc

080020c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020ca:	f005 fa14 	bl	80074f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020ce:	f000 f899 	bl	8002204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020d2:	f000 fb3f 	bl	8002754 <MX_GPIO_Init>
  MX_TIM4_Init();
 80020d6:	f000 f9ff 	bl	80024d8 <MX_TIM4_Init>
  MX_DMA_Init();
 80020da:	f000 fae1 	bl	80026a0 <MX_DMA_Init>
  MX_RTC_Init();
 80020de:	f000 f923 	bl	8002328 <MX_RTC_Init>
  MX_USART2_UART_Init();
 80020e2:	f000 fa7d 	bl	80025e0 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80020e6:	f000 f9b9 	bl	800245c <MX_SPI2_Init>
  MX_SPI1_Init();
 80020ea:	f000 f979 	bl	80023e0 <MX_SPI1_Init>
  MX_I2C1_Init();
 80020ee:	f000 f8db 	bl	80022a8 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80020f2:	f000 faa5 	bl	8002640 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 80020f6:	f000 fa3d 	bl	8002574 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */


    if (HAL_TIM_Base_Start_IT(tikPort) != HAL_OK) devError |= devTIK;
 80020fa:	4b33      	ldr	r3, [pc, #204]	; (80021c8 <main+0x104>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f00a ffac 	bl	800d05c <HAL_TIM_Base_Start_IT>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d006      	beq.n	8002118 <main+0x54>
 800210a:	4b30      	ldr	r3, [pc, #192]	; (80021cc <main+0x108>)
 800210c:	881b      	ldrh	r3, [r3, #0]
 800210e:	f043 0301 	orr.w	r3, r3, #1
 8002112:	b29a      	uxth	r2, r3
 8002114:	4b2d      	ldr	r3, [pc, #180]	; (80021cc <main+0x108>)
 8002116:	801a      	strh	r2, [r3, #0]

    if (HAL_UART_Receive_IT(cmdPort, &rxByte, 1) != HAL_OK) devError |= devUART;
 8002118:	4b2d      	ldr	r3, [pc, #180]	; (80021d0 <main+0x10c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2201      	movs	r2, #1
 800211e:	492d      	ldr	r1, [pc, #180]	; (80021d4 <main+0x110>)
 8002120:	4618      	mov	r0, r3
 8002122:	f00b fc43 	bl	800d9ac <HAL_UART_Receive_IT>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d006      	beq.n	800213a <main+0x76>
 800212c:	4b27      	ldr	r3, [pc, #156]	; (80021cc <main+0x108>)
 800212e:	881b      	ldrh	r3, [r3, #0]
 8002130:	f043 0302 	orr.w	r3, r3, #2
 8002134:	b29a      	uxth	r2, r3
 8002136:	4b25      	ldr	r3, [pc, #148]	; (80021cc <main+0x108>)
 8002138:	801a      	strh	r2, [r3, #0]
#if defined(SET_BLE) || defined(SET_AUDIO)
    if (HAL_UART_Receive_IT(blePort, &rxbByte, 1) != HAL_OK) devError |= devBLE;
#endif

    for (int8_t i = 0; i < 4; i++) {
 800213a:	2300      	movs	r3, #0
 800213c:	71fb      	strb	r3, [r7, #7]
 800213e:	e011      	b.n	8002164 <main+0xa0>
    	errLedOn(true);
 8002140:	2001      	movs	r0, #1
 8002142:	f000 fe2d 	bl	8002da0 <errLedOn>
    	HAL_Delay(100);
 8002146:	2064      	movs	r0, #100	; 0x64
 8002148:	f005 fa0e 	bl	8007568 <HAL_Delay>
    	errLedOn(false);
 800214c:	2000      	movs	r0, #0
 800214e:	f000 fe27 	bl	8002da0 <errLedOn>
    	HAL_Delay(100);
 8002152:	2064      	movs	r0, #100	; 0x64
 8002154:	f005 fa08 	bl	8007568 <HAL_Delay>
    for (int8_t i = 0; i < 4; i++) {
 8002158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215c:	b2db      	uxtb	r3, r3
 800215e:	3301      	adds	r3, #1
 8002160:	b2db      	uxtb	r3, r3
 8002162:	71fb      	strb	r3, [r7, #7]
 8002164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002168:	2b03      	cmp	r3, #3
 800216a:	dde9      	ble.n	8002140 <main+0x7c>
    }

    set_Date(epoch);
 800216c:	4b1a      	ldr	r3, [pc, #104]	; (80021d8 <main+0x114>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f000 fe8f 	bl	8002e94 <set_Date>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002176:	f00d f839 	bl	800f1ec <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of itSem */
  itSemHandle = osSemaphoreNew(1, 1, &itSem_attributes);
 800217a:	4a18      	ldr	r2, [pc, #96]	; (80021dc <main+0x118>)
 800217c:	2101      	movs	r1, #1
 800217e:	2001      	movs	r0, #1
 8002180:	f00d f912 	bl	800f3a8 <osSemaphoreNew>
 8002184:	4603      	mov	r3, r0
 8002186:	4a16      	ldr	r2, [pc, #88]	; (80021e0 <main+0x11c>)
 8002188:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of evtQue */
  evtQueHandle = osMessageQueueNew (8, sizeof(rec_evt_t), &evtQue_attributes);
 800218a:	4a16      	ldr	r2, [pc, #88]	; (80021e4 <main+0x120>)
 800218c:	2108      	movs	r1, #8
 800218e:	2008      	movs	r0, #8
 8002190:	f00d fa2a 	bl	800f5e8 <osMessageQueueNew>
 8002194:	4603      	mov	r3, r0
 8002196:	4a14      	ldr	r2, [pc, #80]	; (80021e8 <main+0x124>)
 8002198:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defTask */
  defTaskHandle = osThreadNew(StartTask, NULL, &defTask_attributes);
 800219a:	4a14      	ldr	r2, [pc, #80]	; (80021ec <main+0x128>)
 800219c:	2100      	movs	r1, #0
 800219e:	4814      	ldr	r0, [pc, #80]	; (80021f0 <main+0x12c>)
 80021a0:	f00d f870 	bl	800f284 <osThreadNew>
 80021a4:	4603      	mov	r3, r0
 80021a6:	4a13      	ldr	r2, [pc, #76]	; (80021f4 <main+0x130>)
 80021a8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  HAL_Delay(250);
 80021aa:	20fa      	movs	r0, #250	; 0xfa
 80021ac:	f005 f9dc 	bl	8007568 <HAL_Delay>
  irdTaskHandle = osThreadNew(irdTask, NULL, &irdTask_attributes);
 80021b0:	4a11      	ldr	r2, [pc, #68]	; (80021f8 <main+0x134>)
 80021b2:	2100      	movs	r1, #0
 80021b4:	4811      	ldr	r0, [pc, #68]	; (80021fc <main+0x138>)
 80021b6:	f00d f865 	bl	800f284 <osThreadNew>
 80021ba:	4603      	mov	r3, r0
 80021bc:	4a10      	ldr	r2, [pc, #64]	; (8002200 <main+0x13c>)
 80021be:	6013      	str	r3, [r2, #0]
  /* add events, ... */
  //osStat = osKernelStart();
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80021c0:	f00d f83a 	bl	800f238 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80021c4:	e7fe      	b.n	80021c4 <main+0x100>
 80021c6:	bf00      	nop
 80021c8:	2000000c 	.word	0x2000000c
 80021cc:	20001b00 	.word	0x20001b00
 80021d0:	20000014 	.word	0x20000014
 80021d4:	20001b10 	.word	0x20001b10
 80021d8:	2000001c 	.word	0x2000001c
 80021dc:	08018804 	.word	0x08018804
 80021e0:	20000e78 	.word	0x20000e78
 80021e4:	080187ec 	.word	0x080187ec
 80021e8:	20000e6c 	.word	0x20000e6c
 80021ec:	080187c8 	.word	0x080187c8
 80021f0:	08003d19 	.word	0x08003d19
 80021f4:	20000e68 	.word	0x20000e68
 80021f8:	08018814 	.word	0x08018814
 80021fc:	08003899 	.word	0x08003899
 8002200:	20000e7c 	.word	0x20000e7c

08002204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b096      	sub	sp, #88	; 0x58
 8002208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800220a:	f107 0314 	add.w	r3, r7, #20
 800220e:	2244      	movs	r2, #68	; 0x44
 8002210:	2100      	movs	r1, #0
 8002212:	4618      	mov	r0, r3
 8002214:	f010 fe83 	bl	8012f1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002218:	463b      	mov	r3, r7
 800221a:	2200      	movs	r2, #0
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	605a      	str	r2, [r3, #4]
 8002220:	609a      	str	r2, [r3, #8]
 8002222:	60da      	str	r2, [r3, #12]
 8002224:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002226:	f44f 7000 	mov.w	r0, #512	; 0x200
 800222a:	f007 fc0f 	bl	8009a4c <HAL_PWREx_ControlVoltageScaling>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002234:	f003 f9b0 	bl	8005598 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002238:	2309      	movs	r3, #9
 800223a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800223c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002240:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002242:	2301      	movs	r3, #1
 8002244:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002246:	2302      	movs	r3, #2
 8002248:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800224a:	2303      	movs	r3, #3
 800224c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800224e:	2301      	movs	r3, #1
 8002250:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8002252:	2314      	movs	r3, #20
 8002254:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002256:	2307      	movs	r3, #7
 8002258:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800225a:	2302      	movs	r3, #2
 800225c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800225e:	2302      	movs	r3, #2
 8002260:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002262:	f107 0314 	add.w	r3, r7, #20
 8002266:	4618      	mov	r0, r3
 8002268:	f007 fc8e 	bl	8009b88 <HAL_RCC_OscConfig>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002272:	f003 f991 	bl	8005598 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002276:	230f      	movs	r3, #15
 8002278:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800227a:	2303      	movs	r3, #3
 800227c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800227e:	2300      	movs	r3, #0
 8002280:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002286:	2300      	movs	r3, #0
 8002288:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800228a:	463b      	mov	r3, r7
 800228c:	2104      	movs	r1, #4
 800228e:	4618      	mov	r0, r3
 8002290:	f008 f856 	bl	800a340 <HAL_RCC_ClockConfig>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800229a:	f003 f97d 	bl	8005598 <Error_Handler>
  }
}
 800229e:	bf00      	nop
 80022a0:	3758      	adds	r7, #88	; 0x58
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
	...

080022a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80022ac:	4b1b      	ldr	r3, [pc, #108]	; (800231c <MX_I2C1_Init+0x74>)
 80022ae:	4a1c      	ldr	r2, [pc, #112]	; (8002320 <MX_I2C1_Init+0x78>)
 80022b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702D95;
 80022b2:	4b1a      	ldr	r3, [pc, #104]	; (800231c <MX_I2C1_Init+0x74>)
 80022b4:	4a1b      	ldr	r2, [pc, #108]	; (8002324 <MX_I2C1_Init+0x7c>)
 80022b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80022b8:	4b18      	ldr	r3, [pc, #96]	; (800231c <MX_I2C1_Init+0x74>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022be:	4b17      	ldr	r3, [pc, #92]	; (800231c <MX_I2C1_Init+0x74>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022c4:	4b15      	ldr	r3, [pc, #84]	; (800231c <MX_I2C1_Init+0x74>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80022ca:	4b14      	ldr	r3, [pc, #80]	; (800231c <MX_I2C1_Init+0x74>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80022d0:	4b12      	ldr	r3, [pc, #72]	; (800231c <MX_I2C1_Init+0x74>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022d6:	4b11      	ldr	r3, [pc, #68]	; (800231c <MX_I2C1_Init+0x74>)
 80022d8:	2200      	movs	r2, #0
 80022da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022dc:	4b0f      	ldr	r3, [pc, #60]	; (800231c <MX_I2C1_Init+0x74>)
 80022de:	2200      	movs	r2, #0
 80022e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022e2:	480e      	ldr	r0, [pc, #56]	; (800231c <MX_I2C1_Init+0x74>)
 80022e4:	f005 fed6 	bl	8008094 <HAL_I2C_Init>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80022ee:	f003 f953 	bl	8005598 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80022f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022f6:	4809      	ldr	r0, [pc, #36]	; (800231c <MX_I2C1_Init+0x74>)
 80022f8:	f007 fa8e 	bl	8009818 <HAL_I2CEx_ConfigAnalogFilter>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8002302:	f003 f949 	bl	8005598 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002306:	2100      	movs	r1, #0
 8002308:	4804      	ldr	r0, [pc, #16]	; (800231c <MX_I2C1_Init+0x74>)
 800230a:	f007 fad0 	bl	80098ae <HAL_I2CEx_ConfigDigitalFilter>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002314:	f003 f940 	bl	8005598 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002318:	bf00      	nop
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20000990 	.word	0x20000990
 8002320:	40005400 	.word	0x40005400
 8002324:	00702d95 	.word	0x00702d95

08002328 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800232e:	1d3b      	adds	r3, r7, #4
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	60da      	str	r2, [r3, #12]
 800233a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800233c:	2300      	movs	r3, #0
 800233e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002340:	4b25      	ldr	r3, [pc, #148]	; (80023d8 <MX_RTC_Init+0xb0>)
 8002342:	4a26      	ldr	r2, [pc, #152]	; (80023dc <MX_RTC_Init+0xb4>)
 8002344:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002346:	4b24      	ldr	r3, [pc, #144]	; (80023d8 <MX_RTC_Init+0xb0>)
 8002348:	2200      	movs	r2, #0
 800234a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800234c:	4b22      	ldr	r3, [pc, #136]	; (80023d8 <MX_RTC_Init+0xb0>)
 800234e:	227f      	movs	r2, #127	; 0x7f
 8002350:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002352:	4b21      	ldr	r3, [pc, #132]	; (80023d8 <MX_RTC_Init+0xb0>)
 8002354:	22ff      	movs	r2, #255	; 0xff
 8002356:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002358:	4b1f      	ldr	r3, [pc, #124]	; (80023d8 <MX_RTC_Init+0xb0>)
 800235a:	2200      	movs	r2, #0
 800235c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800235e:	4b1e      	ldr	r3, [pc, #120]	; (80023d8 <MX_RTC_Init+0xb0>)
 8002360:	2200      	movs	r2, #0
 8002362:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002364:	4b1c      	ldr	r3, [pc, #112]	; (80023d8 <MX_RTC_Init+0xb0>)
 8002366:	2200      	movs	r2, #0
 8002368:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800236a:	4b1b      	ldr	r3, [pc, #108]	; (80023d8 <MX_RTC_Init+0xb0>)
 800236c:	2200      	movs	r2, #0
 800236e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002370:	4819      	ldr	r0, [pc, #100]	; (80023d8 <MX_RTC_Init+0xb0>)
 8002372:	f008 fef7 	bl	800b164 <HAL_RTC_Init>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 800237c:	f003 f90c 	bl	8005598 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002380:	2300      	movs	r3, #0
 8002382:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002384:	2300      	movs	r3, #0
 8002386:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002388:	2300      	movs	r3, #0
 800238a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800238c:	2300      	movs	r3, #0
 800238e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002394:	1d3b      	adds	r3, r7, #4
 8002396:	2201      	movs	r2, #1
 8002398:	4619      	mov	r1, r3
 800239a:	480f      	ldr	r0, [pc, #60]	; (80023d8 <MX_RTC_Init+0xb0>)
 800239c:	f008 ff5d 	bl	800b25a <HAL_RTC_SetTime>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80023a6:	f003 f8f7 	bl	8005598 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 80023aa:	2303      	movs	r3, #3
 80023ac:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 80023ae:	2307      	movs	r3, #7
 80023b0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x6;
 80023b2:	2306      	movs	r3, #6
 80023b4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 80023b6:	2322      	movs	r3, #34	; 0x22
 80023b8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80023ba:	463b      	mov	r3, r7
 80023bc:	2201      	movs	r2, #1
 80023be:	4619      	mov	r1, r3
 80023c0:	4805      	ldr	r0, [pc, #20]	; (80023d8 <MX_RTC_Init+0xb0>)
 80023c2:	f009 f843 	bl	800b44c <HAL_RTC_SetDate>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80023cc:	f003 f8e4 	bl	8005598 <Error_Handler>

  //set_Date(epoch);

  /* USER CODE END RTC_Init 2 */

}
 80023d0:	bf00      	nop
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20000a74 	.word	0x20000a74
 80023dc:	40002800 	.word	0x40002800

080023e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80023e4:	4b1b      	ldr	r3, [pc, #108]	; (8002454 <MX_SPI1_Init+0x74>)
 80023e6:	4a1c      	ldr	r2, [pc, #112]	; (8002458 <MX_SPI1_Init+0x78>)
 80023e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80023ea:	4b1a      	ldr	r3, [pc, #104]	; (8002454 <MX_SPI1_Init+0x74>)
 80023ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80023f2:	4b18      	ldr	r3, [pc, #96]	; (8002454 <MX_SPI1_Init+0x74>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80023f8:	4b16      	ldr	r3, [pc, #88]	; (8002454 <MX_SPI1_Init+0x74>)
 80023fa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80023fe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002400:	4b14      	ldr	r3, [pc, #80]	; (8002454 <MX_SPI1_Init+0x74>)
 8002402:	2200      	movs	r2, #0
 8002404:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002406:	4b13      	ldr	r3, [pc, #76]	; (8002454 <MX_SPI1_Init+0x74>)
 8002408:	2200      	movs	r2, #0
 800240a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800240c:	4b11      	ldr	r3, [pc, #68]	; (8002454 <MX_SPI1_Init+0x74>)
 800240e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002412:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002414:	4b0f      	ldr	r3, [pc, #60]	; (8002454 <MX_SPI1_Init+0x74>)
 8002416:	2208      	movs	r2, #8
 8002418:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800241a:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <MX_SPI1_Init+0x74>)
 800241c:	2200      	movs	r2, #0
 800241e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002420:	4b0c      	ldr	r3, [pc, #48]	; (8002454 <MX_SPI1_Init+0x74>)
 8002422:	2200      	movs	r2, #0
 8002424:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002426:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <MX_SPI1_Init+0x74>)
 8002428:	2200      	movs	r2, #0
 800242a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800242c:	4b09      	ldr	r3, [pc, #36]	; (8002454 <MX_SPI1_Init+0x74>)
 800242e:	2207      	movs	r2, #7
 8002430:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002432:	4b08      	ldr	r3, [pc, #32]	; (8002454 <MX_SPI1_Init+0x74>)
 8002434:	2200      	movs	r2, #0
 8002436:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002438:	4b06      	ldr	r3, [pc, #24]	; (8002454 <MX_SPI1_Init+0x74>)
 800243a:	2200      	movs	r2, #0
 800243c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800243e:	4805      	ldr	r0, [pc, #20]	; (8002454 <MX_SPI1_Init+0x74>)
 8002440:	f009 f9aa 	bl	800b798 <HAL_SPI_Init>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800244a:	f003 f8a5 	bl	8005598 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20000a98 	.word	0x20000a98
 8002458:	40013000 	.word	0x40013000

0800245c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002460:	4b1b      	ldr	r3, [pc, #108]	; (80024d0 <MX_SPI2_Init+0x74>)
 8002462:	4a1c      	ldr	r2, [pc, #112]	; (80024d4 <MX_SPI2_Init+0x78>)
 8002464:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002466:	4b1a      	ldr	r3, [pc, #104]	; (80024d0 <MX_SPI2_Init+0x74>)
 8002468:	f44f 7282 	mov.w	r2, #260	; 0x104
 800246c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800246e:	4b18      	ldr	r3, [pc, #96]	; (80024d0 <MX_SPI2_Init+0x74>)
 8002470:	2200      	movs	r2, #0
 8002472:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002474:	4b16      	ldr	r3, [pc, #88]	; (80024d0 <MX_SPI2_Init+0x74>)
 8002476:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800247a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800247c:	4b14      	ldr	r3, [pc, #80]	; (80024d0 <MX_SPI2_Init+0x74>)
 800247e:	2200      	movs	r2, #0
 8002480:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002482:	4b13      	ldr	r3, [pc, #76]	; (80024d0 <MX_SPI2_Init+0x74>)
 8002484:	2200      	movs	r2, #0
 8002486:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002488:	4b11      	ldr	r3, [pc, #68]	; (80024d0 <MX_SPI2_Init+0x74>)
 800248a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800248e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002490:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <MX_SPI2_Init+0x74>)
 8002492:	2200      	movs	r2, #0
 8002494:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002496:	4b0e      	ldr	r3, [pc, #56]	; (80024d0 <MX_SPI2_Init+0x74>)
 8002498:	2200      	movs	r2, #0
 800249a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800249c:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <MX_SPI2_Init+0x74>)
 800249e:	2200      	movs	r2, #0
 80024a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024a2:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <MX_SPI2_Init+0x74>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80024a8:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <MX_SPI2_Init+0x74>)
 80024aa:	2207      	movs	r2, #7
 80024ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80024ae:	4b08      	ldr	r3, [pc, #32]	; (80024d0 <MX_SPI2_Init+0x74>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80024b4:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <MX_SPI2_Init+0x74>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80024ba:	4805      	ldr	r0, [pc, #20]	; (80024d0 <MX_SPI2_Init+0x74>)
 80024bc:	f009 f96c 	bl	800b798 <HAL_SPI_Init>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80024c6:	f003 f867 	bl	8005598 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	20000afc 	.word	0x20000afc
 80024d4:	40003800 	.word	0x40003800

080024d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b088      	sub	sp, #32
 80024dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024de:	f107 0310 	add.w	r3, r7, #16
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	605a      	str	r2, [r3, #4]
 80024e8:	609a      	str	r2, [r3, #8]
 80024ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024ec:	1d3b      	adds	r3, r7, #4
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	605a      	str	r2, [r3, #4]
 80024f4:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN TIM4_Init 1 */

  // interupt every 10 ms

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80024f6:	4b1d      	ldr	r3, [pc, #116]	; (800256c <MX_TIM4_Init+0x94>)
 80024f8:	4a1d      	ldr	r2, [pc, #116]	; (8002570 <MX_TIM4_Init+0x98>)
 80024fa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7999;
 80024fc:	4b1b      	ldr	r3, [pc, #108]	; (800256c <MX_TIM4_Init+0x94>)
 80024fe:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002502:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002504:	4b19      	ldr	r3, [pc, #100]	; (800256c <MX_TIM4_Init+0x94>)
 8002506:	2200      	movs	r2, #0
 8002508:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 800250a:	4b18      	ldr	r3, [pc, #96]	; (800256c <MX_TIM4_Init+0x94>)
 800250c:	2263      	movs	r2, #99	; 0x63
 800250e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002510:	4b16      	ldr	r3, [pc, #88]	; (800256c <MX_TIM4_Init+0x94>)
 8002512:	2200      	movs	r2, #0
 8002514:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002516:	4b15      	ldr	r3, [pc, #84]	; (800256c <MX_TIM4_Init+0x94>)
 8002518:	2280      	movs	r2, #128	; 0x80
 800251a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800251c:	4813      	ldr	r0, [pc, #76]	; (800256c <MX_TIM4_Init+0x94>)
 800251e:	f00a fd45 	bl	800cfac <HAL_TIM_Base_Init>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002528:	f003 f836 	bl	8005598 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800252c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002530:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002532:	f107 0310 	add.w	r3, r7, #16
 8002536:	4619      	mov	r1, r3
 8002538:	480c      	ldr	r0, [pc, #48]	; (800256c <MX_TIM4_Init+0x94>)
 800253a:	f00a ff1e 	bl	800d37a <HAL_TIM_ConfigClockSource>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002544:	f003 f828 	bl	8005598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002548:	2300      	movs	r3, #0
 800254a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800254c:	2300      	movs	r3, #0
 800254e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002550:	1d3b      	adds	r3, r7, #4
 8002552:	4619      	mov	r1, r3
 8002554:	4805      	ldr	r0, [pc, #20]	; (800256c <MX_TIM4_Init+0x94>)
 8002556:	f00b f935 	bl	800d7c4 <HAL_TIMEx_MasterConfigSynchronization>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002560:	f003 f81a 	bl	8005598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002564:	bf00      	nop
 8002566:	3720      	adds	r7, #32
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	20000c38 	.word	0x20000c38
 8002570:	40000800 	.word	0x40000800

08002574 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800257a:	1d3b      	adds	r3, r7, #4
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	605a      	str	r2, [r3, #4]
 8002582:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002584:	4b14      	ldr	r3, [pc, #80]	; (80025d8 <MX_TIM6_Init+0x64>)
 8002586:	4a15      	ldr	r2, [pc, #84]	; (80025dc <MX_TIM6_Init+0x68>)
 8002588:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 399;
 800258a:	4b13      	ldr	r3, [pc, #76]	; (80025d8 <MX_TIM6_Init+0x64>)
 800258c:	f240 128f 	movw	r2, #399	; 0x18f
 8002590:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002592:	4b11      	ldr	r3, [pc, #68]	; (80025d8 <MX_TIM6_Init+0x64>)
 8002594:	2200      	movs	r2, #0
 8002596:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4;
 8002598:	4b0f      	ldr	r3, [pc, #60]	; (80025d8 <MX_TIM6_Init+0x64>)
 800259a:	2204      	movs	r2, #4
 800259c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800259e:	4b0e      	ldr	r3, [pc, #56]	; (80025d8 <MX_TIM6_Init+0x64>)
 80025a0:	2280      	movs	r2, #128	; 0x80
 80025a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80025a4:	480c      	ldr	r0, [pc, #48]	; (80025d8 <MX_TIM6_Init+0x64>)
 80025a6:	f00a fd01 	bl	800cfac <HAL_TIM_Base_Init>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80025b0:	f002 fff2 	bl	8005598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025b4:	2300      	movs	r3, #0
 80025b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025b8:	2300      	movs	r3, #0
 80025ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80025bc:	1d3b      	adds	r3, r7, #4
 80025be:	4619      	mov	r1, r3
 80025c0:	4805      	ldr	r0, [pc, #20]	; (80025d8 <MX_TIM6_Init+0x64>)
 80025c2:	f00b f8ff 	bl	800d7c4 <HAL_TIMEx_MasterConfigSynchronization>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80025cc:	f002 ffe4 	bl	8005598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80025d0:	bf00      	nop
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	20000c84 	.word	0x20000c84
 80025dc:	40001000 	.word	0x40001000

080025e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80025e4:	4b14      	ldr	r3, [pc, #80]	; (8002638 <MX_USART2_UART_Init+0x58>)
 80025e6:	4a15      	ldr	r2, [pc, #84]	; (800263c <MX_USART2_UART_Init+0x5c>)
 80025e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 80025ea:	4b13      	ldr	r3, [pc, #76]	; (8002638 <MX_USART2_UART_Init+0x58>)
 80025ec:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80025f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025f2:	4b11      	ldr	r3, [pc, #68]	; (8002638 <MX_USART2_UART_Init+0x58>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025f8:	4b0f      	ldr	r3, [pc, #60]	; (8002638 <MX_USART2_UART_Init+0x58>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025fe:	4b0e      	ldr	r3, [pc, #56]	; (8002638 <MX_USART2_UART_Init+0x58>)
 8002600:	2200      	movs	r2, #0
 8002602:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002604:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <MX_USART2_UART_Init+0x58>)
 8002606:	220c      	movs	r2, #12
 8002608:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800260a:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <MX_USART2_UART_Init+0x58>)
 800260c:	2200      	movs	r2, #0
 800260e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002610:	4b09      	ldr	r3, [pc, #36]	; (8002638 <MX_USART2_UART_Init+0x58>)
 8002612:	2200      	movs	r2, #0
 8002614:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002616:	4b08      	ldr	r3, [pc, #32]	; (8002638 <MX_USART2_UART_Init+0x58>)
 8002618:	2200      	movs	r2, #0
 800261a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800261c:	4b06      	ldr	r3, [pc, #24]	; (8002638 <MX_USART2_UART_Init+0x58>)
 800261e:	2200      	movs	r2, #0
 8002620:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002622:	4805      	ldr	r0, [pc, #20]	; (8002638 <MX_USART2_UART_Init+0x58>)
 8002624:	f00b f974 	bl	800d910 <HAL_UART_Init>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800262e:	f002 ffb3 	bl	8005598 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	20000cd0 	.word	0x20000cd0
 800263c:	40004400 	.word	0x40004400

08002640 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002644:	4b14      	ldr	r3, [pc, #80]	; (8002698 <MX_USART3_UART_Init+0x58>)
 8002646:	4a15      	ldr	r2, [pc, #84]	; (800269c <MX_USART3_UART_Init+0x5c>)
 8002648:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800264a:	4b13      	ldr	r3, [pc, #76]	; (8002698 <MX_USART3_UART_Init+0x58>)
 800264c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002650:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002652:	4b11      	ldr	r3, [pc, #68]	; (8002698 <MX_USART3_UART_Init+0x58>)
 8002654:	2200      	movs	r2, #0
 8002656:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002658:	4b0f      	ldr	r3, [pc, #60]	; (8002698 <MX_USART3_UART_Init+0x58>)
 800265a:	2200      	movs	r2, #0
 800265c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800265e:	4b0e      	ldr	r3, [pc, #56]	; (8002698 <MX_USART3_UART_Init+0x58>)
 8002660:	2200      	movs	r2, #0
 8002662:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002664:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <MX_USART3_UART_Init+0x58>)
 8002666:	220c      	movs	r2, #12
 8002668:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800266a:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <MX_USART3_UART_Init+0x58>)
 800266c:	2200      	movs	r2, #0
 800266e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002670:	4b09      	ldr	r3, [pc, #36]	; (8002698 <MX_USART3_UART_Init+0x58>)
 8002672:	2200      	movs	r2, #0
 8002674:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002676:	4b08      	ldr	r3, [pc, #32]	; (8002698 <MX_USART3_UART_Init+0x58>)
 8002678:	2200      	movs	r2, #0
 800267a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800267c:	4b06      	ldr	r3, [pc, #24]	; (8002698 <MX_USART3_UART_Init+0x58>)
 800267e:	2200      	movs	r2, #0
 8002680:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002682:	4805      	ldr	r0, [pc, #20]	; (8002698 <MX_USART3_UART_Init+0x58>)
 8002684:	f00b f944 	bl	800d910 <HAL_UART_Init>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800268e:	f002 ff83 	bl	8005598 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	20000d54 	.word	0x20000d54
 800269c:	40004800 	.word	0x40004800

080026a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026a6:	4b2a      	ldr	r3, [pc, #168]	; (8002750 <MX_DMA_Init+0xb0>)
 80026a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026aa:	4a29      	ldr	r2, [pc, #164]	; (8002750 <MX_DMA_Init+0xb0>)
 80026ac:	f043 0301 	orr.w	r3, r3, #1
 80026b0:	6493      	str	r3, [r2, #72]	; 0x48
 80026b2:	4b27      	ldr	r3, [pc, #156]	; (8002750 <MX_DMA_Init+0xb0>)
 80026b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	607b      	str	r3, [r7, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80026be:	4b24      	ldr	r3, [pc, #144]	; (8002750 <MX_DMA_Init+0xb0>)
 80026c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026c2:	4a23      	ldr	r2, [pc, #140]	; (8002750 <MX_DMA_Init+0xb0>)
 80026c4:	f043 0302 	orr.w	r3, r3, #2
 80026c8:	6493      	str	r3, [r2, #72]	; 0x48
 80026ca:	4b21      	ldr	r3, [pc, #132]	; (8002750 <MX_DMA_Init+0xb0>)
 80026cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	603b      	str	r3, [r7, #0]
 80026d4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80026d6:	2200      	movs	r2, #0
 80026d8:	2105      	movs	r1, #5
 80026da:	200c      	movs	r0, #12
 80026dc:	f005 f820 	bl	8007720 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80026e0:	200c      	movs	r0, #12
 80026e2:	f005 f839 	bl	8007758 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80026e6:	2200      	movs	r2, #0
 80026e8:	2105      	movs	r1, #5
 80026ea:	200e      	movs	r0, #14
 80026ec:	f005 f818 	bl	8007720 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80026f0:	200e      	movs	r0, #14
 80026f2:	f005 f831 	bl	8007758 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80026f6:	2200      	movs	r2, #0
 80026f8:	2105      	movs	r1, #5
 80026fa:	200f      	movs	r0, #15
 80026fc:	f005 f810 	bl	8007720 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002700:	200f      	movs	r0, #15
 8002702:	f005 f829 	bl	8007758 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8002706:	2200      	movs	r2, #0
 8002708:	2105      	movs	r1, #5
 800270a:	2010      	movs	r0, #16
 800270c:	f005 f808 	bl	8007720 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002710:	2010      	movs	r0, #16
 8002712:	f005 f821 	bl	8007758 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8002716:	2200      	movs	r2, #0
 8002718:	2105      	movs	r1, #5
 800271a:	2011      	movs	r0, #17
 800271c:	f005 f800 	bl	8007720 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002720:	2011      	movs	r0, #17
 8002722:	f005 f819 	bl	8007758 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 8002726:	2200      	movs	r2, #0
 8002728:	2105      	movs	r1, #5
 800272a:	203b      	movs	r0, #59	; 0x3b
 800272c:	f004 fff8 	bl	8007720 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8002730:	203b      	movs	r0, #59	; 0x3b
 8002732:	f005 f811 	bl	8007758 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 5, 0);
 8002736:	2200      	movs	r2, #0
 8002738:	2105      	movs	r1, #5
 800273a:	2044      	movs	r0, #68	; 0x44
 800273c:	f004 fff0 	bl	8007720 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8002740:	2044      	movs	r0, #68	; 0x44
 8002742:	f005 f809 	bl	8007758 <HAL_NVIC_EnableIRQ>

}
 8002746:	bf00      	nop
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40021000 	.word	0x40021000

08002754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b08a      	sub	sp, #40	; 0x28
 8002758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800275a:	f107 0314 	add.w	r3, r7, #20
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	605a      	str	r2, [r3, #4]
 8002764:	609a      	str	r2, [r3, #8]
 8002766:	60da      	str	r2, [r3, #12]
 8002768:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800276a:	4b80      	ldr	r3, [pc, #512]	; (800296c <MX_GPIO_Init+0x218>)
 800276c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800276e:	4a7f      	ldr	r2, [pc, #508]	; (800296c <MX_GPIO_Init+0x218>)
 8002770:	f043 0304 	orr.w	r3, r3, #4
 8002774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002776:	4b7d      	ldr	r3, [pc, #500]	; (800296c <MX_GPIO_Init+0x218>)
 8002778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800277a:	f003 0304 	and.w	r3, r3, #4
 800277e:	613b      	str	r3, [r7, #16]
 8002780:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002782:	4b7a      	ldr	r3, [pc, #488]	; (800296c <MX_GPIO_Init+0x218>)
 8002784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002786:	4a79      	ldr	r2, [pc, #484]	; (800296c <MX_GPIO_Init+0x218>)
 8002788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800278c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800278e:	4b77      	ldr	r3, [pc, #476]	; (800296c <MX_GPIO_Init+0x218>)
 8002790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800279a:	4b74      	ldr	r3, [pc, #464]	; (800296c <MX_GPIO_Init+0x218>)
 800279c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800279e:	4a73      	ldr	r2, [pc, #460]	; (800296c <MX_GPIO_Init+0x218>)
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027a6:	4b71      	ldr	r3, [pc, #452]	; (800296c <MX_GPIO_Init+0x218>)
 80027a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	60bb      	str	r3, [r7, #8]
 80027b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027b2:	4b6e      	ldr	r3, [pc, #440]	; (800296c <MX_GPIO_Init+0x218>)
 80027b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b6:	4a6d      	ldr	r2, [pc, #436]	; (800296c <MX_GPIO_Init+0x218>)
 80027b8:	f043 0302 	orr.w	r3, r3, #2
 80027bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027be:	4b6b      	ldr	r3, [pc, #428]	; (800296c <MX_GPIO_Init+0x218>)
 80027c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	607b      	str	r3, [r7, #4]
 80027c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027ca:	4b68      	ldr	r3, [pc, #416]	; (800296c <MX_GPIO_Init+0x218>)
 80027cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ce:	4a67      	ldr	r2, [pc, #412]	; (800296c <MX_GPIO_Init+0x218>)
 80027d0:	f043 0308 	orr.w	r3, r3, #8
 80027d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027d6:	4b65      	ldr	r3, [pc, #404]	; (800296c <MX_GPIO_Init+0x218>)
 80027d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	603b      	str	r3, [r7, #0]
 80027e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DISPLAY_ON_Pin|ERR_LED_Pin, GPIO_PIN_RESET);
 80027e2:	2200      	movs	r2, #0
 80027e4:	2109      	movs	r1, #9
 80027e6:	4862      	ldr	r0, [pc, #392]	; (8002970 <MX_GPIO_Init+0x21c>)
 80027e8:	f005 fc0a 	bl	8008000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TIK_LED_GPIO_Port, TIK_LED_Pin, GPIO_PIN_RESET);
 80027ec:	2200      	movs	r2, #0
 80027ee:	2102      	movs	r1, #2
 80027f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027f4:	f005 fc04 	bl	8008000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80027f8:	2201      	movs	r2, #1
 80027fa:	2110      	movs	r1, #16
 80027fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002800:	f005 fbfe 	bl	8008000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|SPI1_DC_Pin, GPIO_PIN_SET);
 8002804:	2201      	movs	r2, #1
 8002806:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 800280a:	485a      	ldr	r0, [pc, #360]	; (8002974 <MX_GPIO_Init+0x220>)
 800280c:	f005 fbf8 	bl	8008000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8002810:	2201      	movs	r2, #1
 8002812:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002816:	4856      	ldr	r0, [pc, #344]	; (8002970 <MX_GPIO_Init+0x21c>)
 8002818:	f005 fbf2 	bl	8008000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_RST_GPIO_Port, SPI1_RST_Pin, GPIO_PIN_SET);
 800281c:	2201      	movs	r2, #1
 800281e:	2104      	movs	r1, #4
 8002820:	4855      	ldr	r0, [pc, #340]	; (8002978 <MX_GPIO_Init+0x224>)
 8002822:	f005 fbed 	bl	8008000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DISPLAY_ON_Pin */
  GPIO_InitStruct.Pin = DISPLAY_ON_Pin;
 8002826:	2301      	movs	r3, #1
 8002828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800282a:	2301      	movs	r3, #1
 800282c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800282e:	2302      	movs	r3, #2
 8002830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002832:	2300      	movs	r3, #0
 8002834:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPLAY_ON_GPIO_Port, &GPIO_InitStruct);
 8002836:	f107 0314 	add.w	r3, r7, #20
 800283a:	4619      	mov	r1, r3
 800283c:	484c      	ldr	r0, [pc, #304]	; (8002970 <MX_GPIO_Init+0x21c>)
 800283e:	f005 fa1d 	bl	8007c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY0_Pin KEY1_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin;
 8002842:	2306      	movs	r3, #6
 8002844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002846:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800284a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800284c:	2301      	movs	r3, #1
 800284e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002850:	f107 0314 	add.w	r3, r7, #20
 8002854:	4619      	mov	r1, r3
 8002856:	4846      	ldr	r0, [pc, #280]	; (8002970 <MX_GPIO_Init+0x21c>)
 8002858:	f005 fa10 	bl	8007c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : ERR_LED_Pin */
  GPIO_InitStruct.Pin = ERR_LED_Pin;
 800285c:	2308      	movs	r3, #8
 800285e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002860:	2301      	movs	r3, #1
 8002862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002864:	2300      	movs	r3, #0
 8002866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002868:	2301      	movs	r3, #1
 800286a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERR_LED_GPIO_Port, &GPIO_InitStruct);
 800286c:	f107 0314 	add.w	r3, r7, #20
 8002870:	4619      	mov	r1, r3
 8002872:	483f      	ldr	r0, [pc, #252]	; (8002970 <MX_GPIO_Init+0x21c>)
 8002874:	f005 fa02 	bl	8007c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : TIK_LED_Pin */
  GPIO_InitStruct.Pin = TIK_LED_Pin;
 8002878:	2302      	movs	r3, #2
 800287a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800287c:	2301      	movs	r3, #1
 800287e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002880:	2300      	movs	r3, #0
 8002882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002884:	2300      	movs	r3, #0
 8002886:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TIK_LED_GPIO_Port, &GPIO_InitStruct);
 8002888:	f107 0314 	add.w	r3, r7, #20
 800288c:	4619      	mov	r1, r3
 800288e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002892:	f005 f9f3 	bl	8007c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8002896:	2310      	movs	r3, #16
 8002898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800289a:	2301      	movs	r3, #1
 800289c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028a2:	2302      	movs	r3, #2
 80028a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80028a6:	f107 0314 	add.w	r3, r7, #20
 80028aa:	4619      	mov	r1, r3
 80028ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028b0:	f005 f9e4 	bl	8007c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 80028b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ba:	2301      	movs	r3, #1
 80028bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028be:	2301      	movs	r3, #1
 80028c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028c2:	2302      	movs	r3, #2
 80028c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 80028c6:	f107 0314 	add.w	r3, r7, #20
 80028ca:	4619      	mov	r1, r3
 80028cc:	4829      	ldr	r0, [pc, #164]	; (8002974 <MX_GPIO_Init+0x220>)
 80028ce:	f005 f9d5 	bl	8007c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : IRED_Pin */
  GPIO_InitStruct.Pin = IRED_Pin;
 80028d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028d8:	2300      	movs	r3, #0
 80028da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028dc:	2301      	movs	r3, #1
 80028de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRED_GPIO_Port, &GPIO_InitStruct);
 80028e0:	f107 0314 	add.w	r3, r7, #20
 80028e4:	4619      	mov	r1, r3
 80028e6:	4822      	ldr	r0, [pc, #136]	; (8002970 <MX_GPIO_Init+0x21c>)
 80028e8:	f005 f9c8 	bl	8007c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 80028ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028f2:	2301      	movs	r3, #1
 80028f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028f6:	2301      	movs	r3, #1
 80028f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80028fa:	2301      	movs	r3, #1
 80028fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 80028fe:	f107 0314 	add.w	r3, r7, #20
 8002902:	4619      	mov	r1, r3
 8002904:	481a      	ldr	r0, [pc, #104]	; (8002970 <MX_GPIO_Init+0x21c>)
 8002906:	f005 f9b9 	bl	8007c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_RST_Pin */
  GPIO_InitStruct.Pin = SPI1_RST_Pin;
 800290a:	2304      	movs	r3, #4
 800290c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800290e:	2301      	movs	r3, #1
 8002910:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002912:	2301      	movs	r3, #1
 8002914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002916:	2302      	movs	r3, #2
 8002918:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_RST_GPIO_Port, &GPIO_InitStruct);
 800291a:	f107 0314 	add.w	r3, r7, #20
 800291e:	4619      	mov	r1, r3
 8002920:	4815      	ldr	r0, [pc, #84]	; (8002978 <MX_GPIO_Init+0x224>)
 8002922:	f005 f9ab 	bl	8007c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_DC_Pin */
  GPIO_InitStruct.Pin = SPI1_DC_Pin;
 8002926:	2320      	movs	r3, #32
 8002928:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800292a:	2301      	movs	r3, #1
 800292c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292e:	2300      	movs	r3, #0
 8002930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002932:	2302      	movs	r3, #2
 8002934:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_DC_GPIO_Port, &GPIO_InitStruct);
 8002936:	f107 0314 	add.w	r3, r7, #20
 800293a:	4619      	mov	r1, r3
 800293c:	480d      	ldr	r0, [pc, #52]	; (8002974 <MX_GPIO_Init+0x220>)
 800293e:	f005 f99d 	bl	8007c7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002942:	2200      	movs	r2, #0
 8002944:	2105      	movs	r1, #5
 8002946:	2007      	movs	r0, #7
 8002948:	f004 feea 	bl	8007720 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800294c:	2007      	movs	r0, #7
 800294e:	f004 ff03 	bl	8007758 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002952:	2200      	movs	r2, #0
 8002954:	2105      	movs	r1, #5
 8002956:	2008      	movs	r0, #8
 8002958:	f004 fee2 	bl	8007720 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800295c:	2008      	movs	r0, #8
 800295e:	f004 fefb 	bl	8007758 <HAL_NVIC_EnableIRQ>

}
 8002962:	bf00      	nop
 8002964:	3728      	adds	r7, #40	; 0x28
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40021000 	.word	0x40021000
 8002970:	48000800 	.word	0x48000800
 8002974:	48000400 	.word	0x48000400
 8002978:	48000c00 	.word	0x48000c00

0800297c <hexToBin>:

//-------------------------------------------------------------------------------------------
//      Преобразует два символа строки из hex-формата в двоичный
//
uint8_t hexToBin(char *sc)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
char st = 0, ml = 0;
 8002984:	2300      	movs	r3, #0
 8002986:	73fb      	strb	r3, [r7, #15]
 8002988:	2300      	movs	r3, #0
 800298a:	73bb      	strb	r3, [r7, #14]

	if ((sc[0] >= '0') && (sc[0] <= '9')) st = (sc[0] - 0x30);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	2b2f      	cmp	r3, #47	; 0x2f
 8002992:	d908      	bls.n	80029a6 <hexToBin+0x2a>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b39      	cmp	r3, #57	; 0x39
 800299a:	d804      	bhi.n	80029a6 <hexToBin+0x2a>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	3b30      	subs	r3, #48	; 0x30
 80029a2:	73fb      	strb	r3, [r7, #15]
 80029a4:	e018      	b.n	80029d8 <hexToBin+0x5c>
	else
	if ((sc[0] >= 'A') && (sc[0] <= 'F')) st = (sc[0] - 0x37);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	2b40      	cmp	r3, #64	; 0x40
 80029ac:	d908      	bls.n	80029c0 <hexToBin+0x44>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2b46      	cmp	r3, #70	; 0x46
 80029b4:	d804      	bhi.n	80029c0 <hexToBin+0x44>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	3b37      	subs	r3, #55	; 0x37
 80029bc:	73fb      	strb	r3, [r7, #15]
 80029be:	e00b      	b.n	80029d8 <hexToBin+0x5c>
	else
	if ((sc[0] >= 'a') && (sc[0] <= 'f')) st = (sc[0] - 0x57);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	2b60      	cmp	r3, #96	; 0x60
 80029c6:	d907      	bls.n	80029d8 <hexToBin+0x5c>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b66      	cmp	r3, #102	; 0x66
 80029ce:	d803      	bhi.n	80029d8 <hexToBin+0x5c>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	3b57      	subs	r3, #87	; 0x57
 80029d6:	73fb      	strb	r3, [r7, #15]

	if ((sc[1] >= '0') && (sc[1] <= '9')) ml = (sc[1] - 0x30);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3301      	adds	r3, #1
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b2f      	cmp	r3, #47	; 0x2f
 80029e0:	d90a      	bls.n	80029f8 <hexToBin+0x7c>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	3301      	adds	r3, #1
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b39      	cmp	r3, #57	; 0x39
 80029ea:	d805      	bhi.n	80029f8 <hexToBin+0x7c>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3301      	adds	r3, #1
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	3b30      	subs	r3, #48	; 0x30
 80029f4:	73bb      	strb	r3, [r7, #14]
 80029f6:	e01e      	b.n	8002a36 <hexToBin+0xba>
	else
	if ((sc[1] >= 'A') && (sc[1] <= 'F')) ml = (sc[1] - 0x37);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3301      	adds	r3, #1
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2b40      	cmp	r3, #64	; 0x40
 8002a00:	d90a      	bls.n	8002a18 <hexToBin+0x9c>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	3301      	adds	r3, #1
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	2b46      	cmp	r3, #70	; 0x46
 8002a0a:	d805      	bhi.n	8002a18 <hexToBin+0x9c>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	3b37      	subs	r3, #55	; 0x37
 8002a14:	73bb      	strb	r3, [r7, #14]
 8002a16:	e00e      	b.n	8002a36 <hexToBin+0xba>
	else
	if ((sc[1] >= 'a') && (sc[1] <= 'f')) ml = (sc[1] - 0x57);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	2b60      	cmp	r3, #96	; 0x60
 8002a20:	d909      	bls.n	8002a36 <hexToBin+0xba>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	3301      	adds	r3, #1
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b66      	cmp	r3, #102	; 0x66
 8002a2a:	d804      	bhi.n	8002a36 <hexToBin+0xba>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3301      	adds	r3, #1
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	3b57      	subs	r3, #87	; 0x57
 8002a34:	73bb      	strb	r3, [r7, #14]

	return ((st << 4) | (ml & 0x0f));
 8002a36:	7bfb      	ldrb	r3, [r7, #15]
 8002a38:	011b      	lsls	r3, r3, #4
 8002a3a:	b25a      	sxtb	r2, r3
 8002a3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a40:	f003 030f 	and.w	r3, r3, #15
 8002a44:	b25b      	sxtb	r3, r3
 8002a46:	4313      	orrs	r3, r2
 8002a48:	b25b      	sxtb	r3, r3
 8002a4a:	b2db      	uxtb	r3, r3

}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <getQueCount>:
//-------------------------------------------------------------------------------------------


//-------------------------------------------------------------------------------------------
uint32_t getQueCount(osMessageQueueId_t que)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
	return osMessageQueueGetCount(que);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f00c fef3 	bl	800f84c <osMessageQueueGetCount>
 8002a66:	4603      	mov	r3, r0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <nameStation>:
//-------------------------------------------------------------------------------------------
#ifdef SET_DISPLAY

//-------------------------------------------------------------------------------------------
const char *nameStation(float fr)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	ed87 0a01 	vstr	s0, [r7, #4]
int8_t ik = -1;
 8002a7a:	23ff      	movs	r3, #255	; 0xff
 8002a7c:	73fb      	strb	r3, [r7, #15]

	for (int8_t i = 0; i < MAX_LIST; i++) {
 8002a7e:	2300      	movs	r3, #0
 8002a80:	73bb      	strb	r3, [r7, #14]
 8002a82:	e01b      	b.n	8002abc <nameStation+0x4c>
		if (list[i].freq == fr) {
 8002a84:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8002a88:	491a      	ldr	r1, [pc, #104]	; (8002af4 <nameStation+0x84>)
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	4413      	add	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	440b      	add	r3, r1
 8002a94:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8002a98:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a9c:	ee07 3a10 	vmov	s14, r3
 8002aa0:	eef4 7a47 	vcmp.f32	s15, s14
 8002aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aa8:	d102      	bne.n	8002ab0 <nameStation+0x40>
			ik = i;
 8002aaa:	7bbb      	ldrb	r3, [r7, #14]
 8002aac:	73fb      	strb	r3, [r7, #15]
			break;
 8002aae:	e009      	b.n	8002ac4 <nameStation+0x54>
	for (int8_t i = 0; i < MAX_LIST; i++) {
 8002ab0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	73bb      	strb	r3, [r7, #14]
 8002abc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ac0:	2b19      	cmp	r3, #25
 8002ac2:	dddf      	ble.n	8002a84 <nameStation+0x14>
		}
	}

	if (ik != -1) return list[ik].name;
 8002ac4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002acc:	d009      	beq.n	8002ae2 <nameStation+0x72>
 8002ace:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	4413      	add	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4a06      	ldr	r2, [pc, #24]	; (8002af4 <nameStation+0x84>)
 8002adc:	4413      	add	r3, r2
 8002ade:	3305      	adds	r3, #5
 8002ae0:	e001      	b.n	8002ae6 <nameStation+0x76>
			 else return noneStation;
 8002ae2:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <nameStation+0x88>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	20002f58 	.word	0x20002f58
 8002af8:	20000114 	.word	0x20000114

08002afc <getNextList>:
//-------------------------------------------------------------------------------------------
float getNextList(float fr, uint8_t up, uint8_t *band)
{
 8002afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b00:	b08e      	sub	sp, #56	; 0x38
 8002b02:	af08      	add	r7, sp, #32
 8002b04:	ed87 0a03 	vstr	s0, [r7, #12]
 8002b08:	4603      	mov	r3, r0
 8002b0a:	6079      	str	r1, [r7, #4]
 8002b0c:	72fb      	strb	r3, [r7, #11]
float ret = fr;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	613b      	str	r3, [r7, #16]
int8_t ik = -1;
 8002b12:	23ff      	movs	r3, #255	; 0xff
 8002b14:	75fb      	strb	r3, [r7, #23]

	for (int8_t i = 0; i < MAX_LIST; i++) {
 8002b16:	2300      	movs	r3, #0
 8002b18:	75bb      	strb	r3, [r7, #22]
 8002b1a:	e01b      	b.n	8002b54 <getNextList+0x58>
		if (list[i].freq == fr) {
 8002b1c:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8002b20:	4965      	ldr	r1, [pc, #404]	; (8002cb8 <getNextList+0x1bc>)
 8002b22:	4613      	mov	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	4413      	add	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	440b      	add	r3, r1
 8002b2c:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8002b30:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b34:	ee07 3a10 	vmov	s14, r3
 8002b38:	eef4 7a47 	vcmp.f32	s15, s14
 8002b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b40:	d102      	bne.n	8002b48 <getNextList+0x4c>
			ik = i;
 8002b42:	7dbb      	ldrb	r3, [r7, #22]
 8002b44:	75fb      	strb	r3, [r7, #23]
			break;
 8002b46:	e009      	b.n	8002b5c <getNextList+0x60>
	for (int8_t i = 0; i < MAX_LIST; i++) {
 8002b48:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	3301      	adds	r3, #1
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	75bb      	strb	r3, [r7, #22]
 8002b54:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002b58:	2b19      	cmp	r3, #25
 8002b5a:	dddf      	ble.n	8002b1c <getNextList+0x20>
		}
	}
	if (ik != -1) {
 8002b5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b64:	d01b      	beq.n	8002b9e <getNextList+0xa2>
		if (up) {
 8002b66:	7afb      	ldrb	r3, [r7, #11]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00a      	beq.n	8002b82 <getNextList+0x86>
			if (++ik == MAX_LIST) ik = 0;
 8002b6c:	7dfb      	ldrb	r3, [r7, #23]
 8002b6e:	3301      	adds	r3, #1
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	75fb      	strb	r3, [r7, #23]
 8002b74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b78:	2b1a      	cmp	r3, #26
 8002b7a:	d161      	bne.n	8002c40 <getNextList+0x144>
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	75fb      	strb	r3, [r7, #23]
 8002b80:	e05e      	b.n	8002c40 <getNextList+0x144>
		} else {
			if (ik != 0) ik--; else ik = MAX_LIST - 1;
 8002b82:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d006      	beq.n	8002b98 <getNextList+0x9c>
 8002b8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	3b01      	subs	r3, #1
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	75fb      	strb	r3, [r7, #23]
 8002b96:	e053      	b.n	8002c40 <getNextList+0x144>
 8002b98:	2319      	movs	r3, #25
 8002b9a:	75fb      	strb	r3, [r7, #23]
 8002b9c:	e050      	b.n	8002c40 <getNextList+0x144>
		}
	} else {
		if (up) {// seek_up
 8002b9e:	7afb      	ldrb	r3, [r7, #11]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d023      	beq.n	8002bec <getNextList+0xf0>
			for (int8_t i = ik; i < MAX_LIST; i++) {
 8002ba4:	7dfb      	ldrb	r3, [r7, #23]
 8002ba6:	757b      	strb	r3, [r7, #21]
 8002ba8:	e01b      	b.n	8002be2 <getNextList+0xe6>
				if (list[i].freq > fr) {
 8002baa:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8002bae:	4942      	ldr	r1, [pc, #264]	; (8002cb8 <getNextList+0x1bc>)
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	440b      	add	r3, r1
 8002bba:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8002bbe:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bc2:	ee07 3a10 	vmov	s14, r3
 8002bc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bce:	d502      	bpl.n	8002bd6 <getNextList+0xda>
					ik = i;
 8002bd0:	7d7b      	ldrb	r3, [r7, #21]
 8002bd2:	75fb      	strb	r3, [r7, #23]
					break;
 8002bd4:	e02d      	b.n	8002c32 <getNextList+0x136>
			for (int8_t i = ik; i < MAX_LIST; i++) {
 8002bd6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	3301      	adds	r3, #1
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	757b      	strb	r3, [r7, #21]
 8002be2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002be6:	2b19      	cmp	r3, #25
 8002be8:	dddf      	ble.n	8002baa <getNextList+0xae>
 8002bea:	e022      	b.n	8002c32 <getNextList+0x136>
				}
			}
		} else {// seek_down
			for (int8_t i = ik; i <= 0; i--) {
 8002bec:	7dfb      	ldrb	r3, [r7, #23]
 8002bee:	753b      	strb	r3, [r7, #20]
 8002bf0:	e01b      	b.n	8002c2a <getNextList+0x12e>
				if (list[i].freq < fr) {
 8002bf2:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8002bf6:	4930      	ldr	r1, [pc, #192]	; (8002cb8 <getNextList+0x1bc>)
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8002c06:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c0a:	ee07 3a10 	vmov	s14, r3
 8002c0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c16:	dd02      	ble.n	8002c1e <getNextList+0x122>
					ik = i;
 8002c18:	7d3b      	ldrb	r3, [r7, #20]
 8002c1a:	75fb      	strb	r3, [r7, #23]
					break;
 8002c1c:	e009      	b.n	8002c32 <getNextList+0x136>
			for (int8_t i = ik; i <= 0; i--) {
 8002c1e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	3b01      	subs	r3, #1
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	753b      	strb	r3, [r7, #20]
 8002c2a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	dddf      	ble.n	8002bf2 <getNextList+0xf6>
				}
			}
		}
		if (ik == -1) ik = 0;
 8002c32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c3a:	d101      	bne.n	8002c40 <getNextList+0x144>
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	75fb      	strb	r3, [r7, #23]
	}
	ret = list[ik].freq;
 8002c40:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002c44:	491c      	ldr	r1, [pc, #112]	; (8002cb8 <getNextList+0x1bc>)
 8002c46:	4613      	mov	r3, r2
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	440b      	add	r3, r1
 8002c50:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8002c54:	613b      	str	r3, [r7, #16]
	*band = list[ik].band;
 8002c56:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002c5a:	4917      	ldr	r1, [pc, #92]	; (8002cb8 <getNextList+0x1bc>)
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	4413      	add	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	781a      	ldrb	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	701a      	strb	r2, [r3, #0]
	Report(1, "[%s] up=%u ik=%d, fr=%.1f ret=%.1f band=%u\r\n", __func__, up, ik, fr, ret, *band);
 8002c6c:	f897 800b 	ldrb.w	r8, [r7, #11]
 8002c70:	f997 6017 	ldrsb.w	r6, [r7, #23]
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f7fd fc67 	bl	8000548 <__aeabi_f2d>
 8002c7a:	4604      	mov	r4, r0
 8002c7c:	460d      	mov	r5, r1
 8002c7e:	6938      	ldr	r0, [r7, #16]
 8002c80:	f7fd fc62 	bl	8000548 <__aeabi_f2d>
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	7809      	ldrb	r1, [r1, #0]
 8002c8c:	9106      	str	r1, [sp, #24]
 8002c8e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002c92:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002c96:	9600      	str	r6, [sp, #0]
 8002c98:	4643      	mov	r3, r8
 8002c9a:	4a08      	ldr	r2, [pc, #32]	; (8002cbc <getNextList+0x1c0>)
 8002c9c:	4908      	ldr	r1, [pc, #32]	; (8002cc0 <getNextList+0x1c4>)
 8002c9e:	2001      	movs	r0, #1
 8002ca0:	f000 f9f2 	bl	8003088 <Report>

	return ret;
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	ee07 3a90 	vmov	s15, r3
}
 8002caa:	eeb0 0a67 	vmov.f32	s0, s15
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002cb6:	bf00      	nop
 8002cb8:	20002f58 	.word	0x20002f58
 8002cbc:	08018cf0 	.word	0x08018cf0
 8002cc0:	08017654 	.word	0x08017654

08002cc4 <showLine>:
//-------------------------------------------------------------------------------------------
void showLine(char *msg, uint16_t lin, int *last_len, bool update)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08a      	sub	sp, #40	; 0x28
 8002cc8:	af02      	add	r7, sp, #8
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	607a      	str	r2, [r7, #4]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	817b      	strh	r3, [r7, #10]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	727b      	strb	r3, [r7, #9]
int il = strlen(msg);
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f7fd fa79 	bl	80001d0 <strlen>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	617b      	str	r3, [r7, #20]
int xf = ( (SCREEN_WIDTH - (lfnt->FontWidth * il) ) >> 1);// & 0x7f;
 8002ce2:	4b2e      	ldr	r3, [pc, #184]	; (8002d9c <showLine+0xd8>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	461a      	mov	r2, r3
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	fb02 f303 	mul.w	r3, r2, r3
 8002cf0:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002cf4:	105b      	asrs	r3, r3, #1
 8002cf6:	61fb      	str	r3, [r7, #28]
bool yes = false;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	76fb      	strb	r3, [r7, #27]

	if (*last_len > il) {
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	da0d      	bge.n	8002d22 <showLine+0x5e>
		ST7565_DrawFilledRectangle(2, lin, SCREEN_WIDTH - 4, lfnt->FontHeight, PIX_OFF);
 8002d06:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002d0a:	4b24      	ldr	r3, [pc, #144]	; (8002d9c <showLine+0xd8>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	785b      	ldrb	r3, [r3, #1]
 8002d10:	b21b      	sxth	r3, r3
 8002d12:	2200      	movs	r2, #0
 8002d14:	9200      	str	r2, [sp, #0]
 8002d16:	227c      	movs	r2, #124	; 0x7c
 8002d18:	2002      	movs	r0, #2
 8002d1a:	f7ff f884 	bl	8001e26 <ST7565_DrawFilledRectangle>
		yes = true;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	76fb      	strb	r3, [r7, #27]
	}
	*last_len = il;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	601a      	str	r2, [r3, #0]
	if (*msg > 0x7f) {
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	b25b      	sxtb	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	da03      	bge.n	8002d3a <showLine+0x76>
		xf += il;
 8002d32:	69fa      	ldr	r2, [r7, #28]
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	4413      	add	r3, r2
 8002d38:	61fb      	str	r3, [r7, #28]
	}
	if (!yes) ST7565_DrawFilledRectangle(2, lin, SCREEN_WIDTH - 4, lfnt->FontHeight, PIX_OFF);
 8002d3a:	7efb      	ldrb	r3, [r7, #27]
 8002d3c:	f083 0301 	eor.w	r3, r3, #1
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00b      	beq.n	8002d5e <showLine+0x9a>
 8002d46:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002d4a:	4b14      	ldr	r3, [pc, #80]	; (8002d9c <showLine+0xd8>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	785b      	ldrb	r3, [r3, #1]
 8002d50:	b21b      	sxth	r3, r3
 8002d52:	2200      	movs	r2, #0
 8002d54:	9200      	str	r2, [sp, #0]
 8002d56:	227c      	movs	r2, #124	; 0x7c
 8002d58:	2002      	movs	r0, #2
 8002d5a:	f7ff f864 	bl	8001e26 <ST7565_DrawFilledRectangle>

	if ((!xf) || (xf > (SCREEN_WIDTH - 4))) xf = 1;
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d002      	beq.n	8002d6a <showLine+0xa6>
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	2b7c      	cmp	r3, #124	; 0x7c
 8002d68:	dd01      	ble.n	8002d6e <showLine+0xaa>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	61fb      	str	r3, [r7, #28]
	ST7565_Print(xf, lin, msg, lfnt, 1, PIX_ON);
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	b218      	sxth	r0, r3
 8002d72:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002d76:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <showLine+0xd8>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	9201      	str	r2, [sp, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	9200      	str	r2, [sp, #0]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	f7fe fdf6 	bl	8001974 <ST7565_Print>
	if (update) ST7565_Update();
 8002d88:	7a7b      	ldrb	r3, [r7, #9]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <showLine+0xce>
 8002d8e:	f7fe fc41 	bl	8001614 <ST7565_Update>
}
 8002d92:	bf00      	nop
 8002d94:	3720      	adds	r7, #32
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	20002f40 	.word	0x20002f40

08002da0 <errLedOn>:
#endif
//-------------------------------------------------------------------------------------------
void errLedOn(bool on)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	71fb      	strb	r3, [r7, #7]
	if (on)
 8002daa:	79fb      	ldrb	r3, [r7, #7]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d005      	beq.n	8002dbc <errLedOn+0x1c>
		HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_SET);//LED ON
 8002db0:	2201      	movs	r2, #1
 8002db2:	2108      	movs	r1, #8
 8002db4:	4806      	ldr	r0, [pc, #24]	; (8002dd0 <errLedOn+0x30>)
 8002db6:	f005 f923 	bl	8008000 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_RESET);//LED OFF
}
 8002dba:	e004      	b.n	8002dc6 <errLedOn+0x26>
		HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_RESET);//LED OFF
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	2108      	movs	r1, #8
 8002dc0:	4803      	ldr	r0, [pc, #12]	; (8002dd0 <errLedOn+0x30>)
 8002dc2:	f005 f91d 	bl	8008000 <HAL_GPIO_WritePin>
}
 8002dc6:	bf00      	nop
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	48000800 	.word	0x48000800

08002dd4 <get_secCounter>:
//------------------------------------------------------------------------------------
uint32_t get_secCounter()
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
	return secCounter;
 8002dd8:	4b03      	ldr	r3, [pc, #12]	; (8002de8 <get_secCounter+0x14>)
 8002dda:	681b      	ldr	r3, [r3, #0]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	20001b04 	.word	0x20001b04

08002dec <get_msCounter>:
{
	secCounter++;
}
//-----------------------------------------------------------------------------
uint64_t get_msCounter()
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
	return msCounter;
 8002df0:	4b04      	ldr	r3, [pc, #16]	; (8002e04 <get_msCounter+0x18>)
 8002df2:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8002df6:	4610      	mov	r0, r2
 8002df8:	4619      	mov	r1, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	20001b08 	.word	0x20001b08

08002e08 <get_tmr>:
{
	msCounter++;
}
//------------------------------------------------------------------------------------------
uint32_t get_tmr(uint32_t sec)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
	return (get_secCounter() + sec);
 8002e10:	f7ff ffe0 	bl	8002dd4 <get_secCounter>
 8002e14:	4602      	mov	r2, r0
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4413      	add	r3, r2
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <check_tmr>:
//------------------------------------------------------------------------------------------
bool check_tmr(uint32_t sec)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b082      	sub	sp, #8
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
	return (get_secCounter() >= sec ? true : false);
 8002e2a:	f7ff ffd3 	bl	8002dd4 <get_secCounter>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4293      	cmp	r3, r2
 8002e34:	bf94      	ite	ls
 8002e36:	2301      	movls	r3, #1
 8002e38:	2300      	movhi	r3, #0
 8002e3a:	b2db      	uxtb	r3, r3
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <get_mstmr>:
//------------------------------------------------------------------------------------------
uint64_t get_mstmr(uint64_t hs)
{
 8002e44:	b5b0      	push	{r4, r5, r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	e9c7 0100 	strd	r0, r1, [r7]
	return (get_msCounter() + hs);
 8002e4e:	f7ff ffcd 	bl	8002dec <get_msCounter>
 8002e52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e56:	1884      	adds	r4, r0, r2
 8002e58:	eb41 0503 	adc.w	r5, r1, r3
 8002e5c:	4622      	mov	r2, r4
 8002e5e:	462b      	mov	r3, r5
}
 8002e60:	4610      	mov	r0, r2
 8002e62:	4619      	mov	r1, r3
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bdb0      	pop	{r4, r5, r7, pc}

08002e6a <check_mstmr>:
//------------------------------------------------------------------------------------------
bool check_mstmr(uint64_t hs)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b082      	sub	sp, #8
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	e9c7 0100 	strd	r0, r1, [r7]
	return (get_msCounter() >= hs ? true : false);
 8002e74:	f7ff ffba 	bl	8002dec <get_msCounter>
 8002e78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e7c:	4290      	cmp	r0, r2
 8002e7e:	eb71 0303 	sbcs.w	r3, r1, r3
 8002e82:	bf2c      	ite	cs
 8002e84:	2301      	movcs	r3, #1
 8002e86:	2300      	movcc	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
	...

08002e94 <set_Date>:

    for (i = 0; i < strlen(st); i++) *(st + i) = toupper(*(st + i));
}
//------------------------------------------------------------------------------------------
void set_Date(uint32_t usec)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b094      	sub	sp, #80	; 0x50
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
struct tm ts;
time_t ep = (time_t)usec;
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	460a      	mov	r2, r1
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	e9c7 2308 	strd	r2, r3, [r7, #32]

	gmtime_r(&ep, &ts);
 8002ea8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002eac:	f107 0320 	add.w	r3, r7, #32
 8002eb0:	4611      	mov	r1, r2
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f00f ff52 	bl	8012d5c <gmtime_r>

	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	sDate.WeekDay = ts.tm_wday;
 8002eb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	723b      	strb	r3, [r7, #8]
	sDate.Month   = ts.tm_mon + 1;
 8002ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	727b      	strb	r3, [r7, #9]
	sDate.Date    = ts.tm_mday;
 8002ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	72bb      	strb	r3, [r7, #10]
	sDate.Year    = ts.tm_year;
 8002ece:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	72fb      	strb	r3, [r7, #11]
	sTime.Hours   = ts.tm_hour + tZone;
 8002ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ed6:	b2da      	uxtb	r2, r3
 8002ed8:	4b1a      	ldr	r3, [pc, #104]	; (8002f44 <set_Date+0xb0>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	4413      	add	r3, r2
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = ts.tm_min;
 8002ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = ts.tm_sec;
 8002ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	73bb      	strb	r3, [r7, #14]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 8002eee:	f107 030c 	add.w	r3, r7, #12
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4814      	ldr	r0, [pc, #80]	; (8002f48 <set_Date+0xb4>)
 8002ef8:	f008 f9af 	bl	800b25a <HAL_RTC_SetTime>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d007      	beq.n	8002f12 <set_Date+0x7e>
 8002f02:	4b12      	ldr	r3, [pc, #72]	; (8002f4c <set_Date+0xb8>)
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	f043 0308 	orr.w	r3, r3, #8
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	4b0f      	ldr	r3, [pc, #60]	; (8002f4c <set_Date+0xb8>)
 8002f0e:	801a      	strh	r2, [r3, #0]
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
		else {
			setDate = true;
		}
	}
}
 8002f10:	e014      	b.n	8002f3c <set_Date+0xa8>
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 8002f12:	f107 0308 	add.w	r3, r7, #8
 8002f16:	2200      	movs	r2, #0
 8002f18:	4619      	mov	r1, r3
 8002f1a:	480b      	ldr	r0, [pc, #44]	; (8002f48 <set_Date+0xb4>)
 8002f1c:	f008 fa96 	bl	800b44c <HAL_RTC_SetDate>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d007      	beq.n	8002f36 <set_Date+0xa2>
 8002f26:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <set_Date+0xb8>)
 8002f28:	881b      	ldrh	r3, [r3, #0]
 8002f2a:	f043 0308 	orr.w	r3, r3, #8
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <set_Date+0xb8>)
 8002f32:	801a      	strh	r2, [r3, #0]
}
 8002f34:	e002      	b.n	8002f3c <set_Date+0xa8>
			setDate = true;
 8002f36:	4b06      	ldr	r3, [pc, #24]	; (8002f50 <set_Date+0xbc>)
 8002f38:	2201      	movs	r2, #1
 8002f3a:	701a      	strb	r2, [r3, #0]
}
 8002f3c:	bf00      	nop
 8002f3e:	3750      	adds	r7, #80	; 0x50
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	20001f16 	.word	0x20001f16
 8002f48:	20000a74 	.word	0x20000a74
 8002f4c:	20001b00 	.word	0x20001b00
 8002f50:	20001f15 	.word	0x20001f15

08002f54 <sec2str>:

	return ep;
}
//------------------------------------------------------------------------------------------
int sec2str(char *st)
{
 8002f54:	b590      	push	{r4, r7, lr}
 8002f56:	b093      	sub	sp, #76	; 0x4c
 8002f58:	af04      	add	r7, sp, #16
 8002f5a:	6078      	str	r0, [r7, #4]
int ret = 0;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	637b      	str	r3, [r7, #52]	; 0x34

	if (!setDate) {
 8002f60:	4b40      	ldr	r3, [pc, #256]	; (8003064 <sec2str+0x110>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	f083 0301 	eor.w	r3, r3, #1
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d040      	beq.n	8002ff0 <sec2str+0x9c>
		uint32_t sec = get_secCounter();
 8002f6e:	f7ff ff31 	bl	8002dd4 <get_secCounter>
 8002f72:	6338      	str	r0, [r7, #48]	; 0x30

		uint32_t day = sec / (60 * 60 * 24);
 8002f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f76:	4a3c      	ldr	r2, [pc, #240]	; (8003068 <sec2str+0x114>)
 8002f78:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7c:	0c1b      	lsrs	r3, r3, #16
 8002f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
		sec %= (60 * 60 * 24);
 8002f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f82:	4a39      	ldr	r2, [pc, #228]	; (8003068 <sec2str+0x114>)
 8002f84:	fba2 1203 	umull	r1, r2, r2, r3
 8002f88:	0c12      	lsrs	r2, r2, #16
 8002f8a:	4938      	ldr	r1, [pc, #224]	; (800306c <sec2str+0x118>)
 8002f8c:	fb01 f202 	mul.w	r2, r1, r2
 8002f90:	1a9b      	subs	r3, r3, r2
 8002f92:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t hour = sec / (60 * 60);
 8002f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f96:	4a36      	ldr	r2, [pc, #216]	; (8003070 <sec2str+0x11c>)
 8002f98:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9c:	0adb      	lsrs	r3, r3, #11
 8002f9e:	62bb      	str	r3, [r7, #40]	; 0x28
		sec %= (60 * 60);
 8002fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa2:	4a33      	ldr	r2, [pc, #204]	; (8003070 <sec2str+0x11c>)
 8002fa4:	fba2 1203 	umull	r1, r2, r2, r3
 8002fa8:	0ad2      	lsrs	r2, r2, #11
 8002faa:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002fae:	fb01 f202 	mul.w	r2, r1, r2
 8002fb2:	1a9b      	subs	r3, r3, r2
 8002fb4:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t min = sec / (60);
 8002fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb8:	4a2e      	ldr	r2, [pc, #184]	; (8003074 <sec2str+0x120>)
 8002fba:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbe:	095b      	lsrs	r3, r3, #5
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24
		sec %= 60;
 8002fc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fc4:	4b2b      	ldr	r3, [pc, #172]	; (8003074 <sec2str+0x120>)
 8002fc6:	fba3 1302 	umull	r1, r3, r3, r2
 8002fca:	0959      	lsrs	r1, r3, #5
 8002fcc:	460b      	mov	r3, r1
 8002fce:	011b      	lsls	r3, r3, #4
 8002fd0:	1a5b      	subs	r3, r3, r1
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	633b      	str	r3, [r7, #48]	; 0x30

		ret = sprintf(st, "%lu.%02lu:%02lu:%02lu", day, hour, min, sec);
 8002fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fda:	9301      	str	r3, [sp, #4]
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fe4:	4924      	ldr	r1, [pc, #144]	; (8003078 <sec2str+0x124>)
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f010 fd1a 	bl	8013a20 <siprintf>
 8002fec:	6378      	str	r0, [r7, #52]	; 0x34
 8002fee:	e034      	b.n	800305a <sec2str+0x106>
	} else {
		RTC_TimeTypeDef sTime;
		RTC_DateTypeDef sDate;
		if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN)) devError |= devRTC;
 8002ff0:	f107 030c 	add.w	r3, r7, #12
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4820      	ldr	r0, [pc, #128]	; (800307c <sec2str+0x128>)
 8002ffa:	f008 faae 	bl	800b55a <HAL_RTC_GetDate>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d007      	beq.n	8003014 <sec2str+0xc0>
 8003004:	4b1e      	ldr	r3, [pc, #120]	; (8003080 <sec2str+0x12c>)
 8003006:	881b      	ldrh	r3, [r3, #0]
 8003008:	f043 0308 	orr.w	r3, r3, #8
 800300c:	b29a      	uxth	r2, r3
 800300e:	4b1c      	ldr	r3, [pc, #112]	; (8003080 <sec2str+0x12c>)
 8003010:	801a      	strh	r2, [r3, #0]
 8003012:	e022      	b.n	800305a <sec2str+0x106>
		else {
			if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN)) devError |= devRTC;
 8003014:	f107 0310 	add.w	r3, r7, #16
 8003018:	2200      	movs	r2, #0
 800301a:	4619      	mov	r1, r3
 800301c:	4817      	ldr	r0, [pc, #92]	; (800307c <sec2str+0x128>)
 800301e:	f008 f9b9 	bl	800b394 <HAL_RTC_GetTime>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d007      	beq.n	8003038 <sec2str+0xe4>
 8003028:	4b15      	ldr	r3, [pc, #84]	; (8003080 <sec2str+0x12c>)
 800302a:	881b      	ldrh	r3, [r3, #0]
 800302c:	f043 0308 	orr.w	r3, r3, #8
 8003030:	b29a      	uxth	r2, r3
 8003032:	4b13      	ldr	r3, [pc, #76]	; (8003080 <sec2str+0x12c>)
 8003034:	801a      	strh	r2, [r3, #0]
 8003036:	e010      	b.n	800305a <sec2str+0x106>
			else {
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
								sDate.Date, sDate.Month,
 8003038:	7bbb      	ldrb	r3, [r7, #14]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 800303a:	4618      	mov	r0, r3
								sDate.Date, sDate.Month,
 800303c:	7b7b      	ldrb	r3, [r7, #13]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 800303e:	461c      	mov	r4, r3
								sTime.Hours, sTime.Minutes, sTime.Seconds);
 8003040:	7c3b      	ldrb	r3, [r7, #16]
 8003042:	7c7a      	ldrb	r2, [r7, #17]
 8003044:	7cb9      	ldrb	r1, [r7, #18]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 8003046:	9102      	str	r1, [sp, #8]
 8003048:	9201      	str	r2, [sp, #4]
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	4623      	mov	r3, r4
 800304e:	4602      	mov	r2, r0
 8003050:	490c      	ldr	r1, [pc, #48]	; (8003084 <sec2str+0x130>)
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f010 fce4 	bl	8013a20 <siprintf>
 8003058:	6378      	str	r0, [r7, #52]	; 0x34
			}
		}
	}

	return ret;
 800305a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800305c:	4618      	mov	r0, r3
 800305e:	373c      	adds	r7, #60	; 0x3c
 8003060:	46bd      	mov	sp, r7
 8003062:	bd90      	pop	{r4, r7, pc}
 8003064:	20001f15 	.word	0x20001f15
 8003068:	c22e4507 	.word	0xc22e4507
 800306c:	00015180 	.word	0x00015180
 8003070:	91a2b3c5 	.word	0x91a2b3c5
 8003074:	88888889 	.word	0x88888889
 8003078:	08017684 	.word	0x08017684
 800307c:	20000a74 	.word	0x20000a74
 8003080:	20001b00 	.word	0x20001b00
 8003084:	0801769c 	.word	0x0801769c

08003088 <Report>:
//--------------------------------------------------------------------------------------------
void Report(const uint8_t addTime, const char *fmt, ...)
{
 8003088:	b40e      	push	{r1, r2, r3}
 800308a:	b590      	push	{r4, r7, lr}
 800308c:	b086      	sub	sp, #24
 800308e:	af00      	add	r7, sp, #0
 8003090:	4603      	mov	r3, r0
 8003092:	71fb      	strb	r3, [r7, #7]
#if defined(SET_BLE) || defined(SET_AUDIO)
	if(sleep_mode) return;
#endif


	size_t len = MAX_UART_BUF;
 8003094:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003098:	613b      	str	r3, [r7, #16]
	char *buf = &cmdBuf[0];
 800309a:	4b2e      	ldr	r3, [pc, #184]	; (8003154 <Report+0xcc>)
 800309c:	60fb      	str	r3, [r7, #12]
			cnt--;
		}
	}
*/
	//if (buf) {
		*buf = '\0';
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	701a      	strb	r2, [r3, #0]
		int dl = 0;
 80030a4:	2300      	movs	r3, #0
 80030a6:	617b      	str	r3, [r7, #20]
		if (addTime) {
 80030a8:	79fb      	ldrb	r3, [r7, #7]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d010      	beq.n	80030d0 <Report+0x48>
			dl = sec2str(buf);
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f7ff ff50 	bl	8002f54 <sec2str>
 80030b4:	6178      	str	r0, [r7, #20]
			strcat(buf, " | ");
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f7fd f88a 	bl	80001d0 <strlen>
 80030bc:	4603      	mov	r3, r0
 80030be:	461a      	mov	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4413      	add	r3, r2
 80030c4:	4a24      	ldr	r2, [pc, #144]	; (8003158 <Report+0xd0>)
 80030c6:	6810      	ldr	r0, [r2, #0]
 80030c8:	6018      	str	r0, [r3, #0]
			dl += 3;
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	3303      	adds	r3, #3
 80030ce:	617b      	str	r3, [r7, #20]
		}

		va_list args;
		va_start(args, fmt);
 80030d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030d4:	60bb      	str	r3, [r7, #8]
		vsnprintf(buf + dl, len - dl, fmt, args);
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	18d0      	adds	r0, r2, r3
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	1ad1      	subs	r1, r2, r3
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e6:	f011 fc1d 	bl	8014924 <vsniprintf>

		uartRdy = false;
 80030ea:	4b1c      	ldr	r3, [pc, #112]	; (800315c <Report+0xd4>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	701a      	strb	r2, [r3, #0]
		if (osSemaphoreAcquire(itSemHandle, 2000) == osOK) {
 80030f0:	4b1b      	ldr	r3, [pc, #108]	; (8003160 <Report+0xd8>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80030f8:	4618      	mov	r0, r3
 80030fa:	f00c f9df 	bl	800f4bc <osSemaphoreAcquire>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d120      	bne.n	8003146 <Report+0xbe>
			if (HAL_UART_Transmit_DMA(cmdPort, (uint8_t *)buf, strlen(buf)) != HAL_OK) devError |= devUART;
 8003104:	4b17      	ldr	r3, [pc, #92]	; (8003164 <Report+0xdc>)
 8003106:	681c      	ldr	r4, [r3, #0]
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f7fd f861 	bl	80001d0 <strlen>
 800310e:	4603      	mov	r3, r0
 8003110:	b29b      	uxth	r3, r3
 8003112:	461a      	mov	r2, r3
 8003114:	68f9      	ldr	r1, [r7, #12]
 8003116:	4620      	mov	r0, r4
 8003118:	f00a fc9e 	bl	800da58 <HAL_UART_Transmit_DMA>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d006      	beq.n	8003130 <Report+0xa8>
 8003122:	4b11      	ldr	r3, [pc, #68]	; (8003168 <Report+0xe0>)
 8003124:	881b      	ldrh	r3, [r3, #0]
 8003126:	f043 0302 	orr.w	r3, r3, #2
 800312a:	b29a      	uxth	r2, r3
 800312c:	4b0e      	ldr	r3, [pc, #56]	; (8003168 <Report+0xe0>)
 800312e:	801a      	strh	r2, [r3, #0]
			while (!uartRdy) {} //HAL_Delay(1)
 8003130:	bf00      	nop
 8003132:	4b0a      	ldr	r3, [pc, #40]	; (800315c <Report+0xd4>)
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	d0fa      	beq.n	8003132 <Report+0xaa>
			osSemaphoreRelease(itSemHandle);
 800313c:	4b08      	ldr	r3, [pc, #32]	; (8003160 <Report+0xd8>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4618      	mov	r0, r3
 8003142:	f00c fa0d 	bl	800f560 <osSemaphoreRelease>
	//	free(buf);
	//} else {
	//	devError |= devMEM;
	//}

}
 8003146:	bf00      	nop
 8003148:	3718      	adds	r7, #24
 800314a:	46bd      	mov	sp, r7
 800314c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003150:	b003      	add	sp, #12
 8003152:	4770      	bx	lr
 8003154:	20001300 	.word	0x20001300
 8003158:	080176b8 	.word	0x080176b8
 800315c:	20000018 	.word	0x20000018
 8003160:	20000e78 	.word	0x20000e78
 8003164:	20000014 	.word	0x20000014
 8003168:	20001b00 	.word	0x20001b00

0800316c <HAL_UART_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a05      	ldr	r2, [pc, #20]	; (8003190 <HAL_UART_TxCpltCallback+0x24>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d102      	bne.n	8003184 <HAL_UART_TxCpltCallback+0x18>
		uartRdy = 1;
 800317e:	4b05      	ldr	r3, [pc, #20]	; (8003194 <HAL_UART_TxCpltCallback+0x28>)
 8003180:	2201      	movs	r2, #1
 8003182:	701a      	strb	r2, [r3, #0]
	else
	if (huart->Instance == USART3) {
		bleRdy = 1;
	}
#endif
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	40004400 	.word	0x40004400
 8003194:	20000018 	.word	0x20000018

08003198 <HAL_UART_ErrorCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a07      	ldr	r2, [pc, #28]	; (80031c4 <HAL_UART_ErrorCallback+0x2c>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d106      	bne.n	80031b8 <HAL_UART_ErrorCallback+0x20>
		devError |= devUART;
 80031aa:	4b07      	ldr	r3, [pc, #28]	; (80031c8 <HAL_UART_ErrorCallback+0x30>)
 80031ac:	881b      	ldrh	r3, [r3, #0]
 80031ae:	f043 0302 	orr.w	r3, r3, #2
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	4b04      	ldr	r3, [pc, #16]	; (80031c8 <HAL_UART_ErrorCallback+0x30>)
 80031b6:	801a      	strh	r2, [r3, #0]
	else
	if (huart->Instance == USART3) {
		devError |= devBLE;
	}
#endif
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	40004400 	.word	0x40004400
 80031c8:	20001b00 	.word	0x20001b00

080031cc <HAL_UART_RxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80031cc:	b590      	push	{r4, r7, lr}
 80031ce:	b08d      	sub	sp, #52	; 0x34
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
		//
		if (HAL_UART_Receive_IT(huart, &rxbByte, 1) != HAL_OK) devError |= devBLE;
	}
	else
#endif
	if (huart->Instance == USART2) {
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4aad      	ldr	r2, [pc, #692]	; (8003490 <HAL_UART_RxCpltCallback+0x2c4>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	f040 8264 	bne.w	80036a8 <HAL_UART_RxCpltCallback+0x4dc>
		rxBuf[rxInd++] = (char)rxByte;
 80031e0:	4bac      	ldr	r3, [pc, #688]	; (8003494 <HAL_UART_RxCpltCallback+0x2c8>)
 80031e2:	881b      	ldrh	r3, [r3, #0]
 80031e4:	1c5a      	adds	r2, r3, #1
 80031e6:	b291      	uxth	r1, r2
 80031e8:	4aaa      	ldr	r2, [pc, #680]	; (8003494 <HAL_UART_RxCpltCallback+0x2c8>)
 80031ea:	8011      	strh	r1, [r2, #0]
 80031ec:	461a      	mov	r2, r3
 80031ee:	4baa      	ldr	r3, [pc, #680]	; (8003498 <HAL_UART_RxCpltCallback+0x2cc>)
 80031f0:	7819      	ldrb	r1, [r3, #0]
 80031f2:	4baa      	ldr	r3, [pc, #680]	; (800349c <HAL_UART_RxCpltCallback+0x2d0>)
 80031f4:	5499      	strb	r1, [r3, r2]
		if (rxByte == 0x0a) {//end of line
 80031f6:	4ba8      	ldr	r3, [pc, #672]	; (8003498 <HAL_UART_RxCpltCallback+0x2cc>)
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	2b0a      	cmp	r3, #10
 80031fc:	f040 8245 	bne.w	800368a <HAL_UART_RxCpltCallback+0x4be>
			rxBuf[--rxInd] = '\0';
 8003200:	4ba4      	ldr	r3, [pc, #656]	; (8003494 <HAL_UART_RxCpltCallback+0x2c8>)
 8003202:	881b      	ldrh	r3, [r3, #0]
 8003204:	3b01      	subs	r3, #1
 8003206:	b29a      	uxth	r2, r3
 8003208:	4ba2      	ldr	r3, [pc, #648]	; (8003494 <HAL_UART_RxCpltCallback+0x2c8>)
 800320a:	801a      	strh	r2, [r3, #0]
 800320c:	4ba1      	ldr	r3, [pc, #644]	; (8003494 <HAL_UART_RxCpltCallback+0x2c8>)
 800320e:	881b      	ldrh	r3, [r3, #0]
 8003210:	461a      	mov	r2, r3
 8003212:	4ba2      	ldr	r3, [pc, #648]	; (800349c <HAL_UART_RxCpltCallback+0x2d0>)
 8003214:	2100      	movs	r1, #0
 8003216:	5499      	strb	r1, [r3, r2]

			int i, ev = -1;
 8003218:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800321c:	60bb      	str	r3, [r7, #8]
			if (strlen(rxBuf) > 2) {
 800321e:	489f      	ldr	r0, [pc, #636]	; (800349c <HAL_UART_RxCpltCallback+0x2d0>)
 8003220:	f7fc ffd6 	bl	80001d0 <strlen>
 8003224:	4603      	mov	r3, r0
 8003226:	2b02      	cmp	r3, #2
 8003228:	f240 8229 	bls.w	800367e <HAL_UART_RxCpltCallback+0x4b2>
						devError |= devMEM;
					}
					ev = -2;
				} else {
#endif
					for (i = 0; i < MAX_CMDS; i++) {
 800322c:	2300      	movs	r3, #0
 800322e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003230:	e203      	b.n	800363a <HAL_UART_RxCpltCallback+0x46e>
						if (!strncmp(rxBuf, s_cmds[i], strlen(s_cmds[i]))) {
 8003232:	4a9b      	ldr	r2, [pc, #620]	; (80034a0 <HAL_UART_RxCpltCallback+0x2d4>)
 8003234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003236:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800323a:	4a99      	ldr	r2, [pc, #612]	; (80034a0 <HAL_UART_RxCpltCallback+0x2d4>)
 800323c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003242:	4618      	mov	r0, r3
 8003244:	f7fc ffc4 	bl	80001d0 <strlen>
 8003248:	4603      	mov	r3, r0
 800324a:	461a      	mov	r2, r3
 800324c:	4621      	mov	r1, r4
 800324e:	4893      	ldr	r0, [pc, #588]	; (800349c <HAL_UART_RxCpltCallback+0x2d0>)
 8003250:	f010 fc56 	bl	8013b00 <strncmp>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	f040 81ec 	bne.w	8003634 <HAL_UART_RxCpltCallback+0x468>
							char *uk = rxBuf + strlen(s_cmds[i]);
 800325c:	4a90      	ldr	r2, [pc, #576]	; (80034a0 <HAL_UART_RxCpltCallback+0x2d4>)
 800325e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003264:	4618      	mov	r0, r3
 8003266:	f7fc ffb3 	bl	80001d0 <strlen>
 800326a:	4603      	mov	r3, r0
 800326c:	4a8b      	ldr	r2, [pc, #556]	; (800349c <HAL_UART_RxCpltCallback+0x2d0>)
 800326e:	4413      	add	r3, r2
 8003270:	627b      	str	r3, [r7, #36]	; 0x24
							ev = -1;
 8003272:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003276:	60bb      	str	r3, [r7, #8]
							switch (i) {
 8003278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327a:	2b19      	cmp	r3, #25
 800327c:	f200 81e2 	bhi.w	8003644 <HAL_UART_RxCpltCallback+0x478>
 8003280:	a201      	add	r2, pc, #4	; (adr r2, 8003288 <HAL_UART_RxCpltCallback+0xbc>)
 8003282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003286:	bf00      	nop
 8003288:	0800342b 	.word	0x0800342b
 800328c:	0800342b 	.word	0x0800342b
 8003290:	08003431 	.word	0x08003431
 8003294:	08003645 	.word	0x08003645
 8003298:	08003483 	.word	0x08003483
 800329c:	08003483 	.word	0x08003483
 80032a0:	080035d7 	.word	0x080035d7
 80032a4:	0800353b 	.word	0x0800353b
 80032a8:	08003645 	.word	0x08003645
 80032ac:	0800342b 	.word	0x0800342b
 80032b0:	0800342b 	.word	0x0800342b
 80032b4:	080033e9 	.word	0x080033e9
 80032b8:	080033a5 	.word	0x080033a5
 80032bc:	0800331d 	.word	0x0800331d
 80032c0:	0800342b 	.word	0x0800342b
 80032c4:	08003387 	.word	0x08003387
 80032c8:	080033e9 	.word	0x080033e9
 80032cc:	080032f1 	.word	0x080032f1
 80032d0:	0800342b 	.word	0x0800342b
 80032d4:	08003645 	.word	0x08003645
 80032d8:	0800342b 	.word	0x0800342b
 80032dc:	08003645 	.word	0x08003645
 80032e0:	0800342b 	.word	0x0800342b
 80032e4:	0800342b 	.word	0x0800342b
 80032e8:	0800342b 	.word	0x0800342b
 80032ec:	0800342b 	.word	0x0800342b
								case cmdBand://"band:2"
									if (strlen(uk) >= 1) {
 80032f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 818b 	beq.w	8003610 <HAL_UART_RxCpltCallback+0x444>
										newBand = atol(uk);
 80032fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032fc:	f00f fc2d 	bl	8012b5a <atol>
 8003300:	4603      	mov	r3, r0
 8003302:	b2da      	uxtb	r2, r3
 8003304:	4b67      	ldr	r3, [pc, #412]	; (80034a4 <HAL_UART_RxCpltCallback+0x2d8>)
 8003306:	701a      	strb	r2, [r3, #0]
										if (newBand != Band) {
 8003308:	4b66      	ldr	r3, [pc, #408]	; (80034a4 <HAL_UART_RxCpltCallback+0x2d8>)
 800330a:	781a      	ldrb	r2, [r3, #0]
 800330c:	4b66      	ldr	r3, [pc, #408]	; (80034a8 <HAL_UART_RxCpltCallback+0x2dc>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	429a      	cmp	r2, r3
 8003312:	f000 817d 	beq.w	8003610 <HAL_UART_RxCpltCallback+0x444>
											ev = i;
 8003316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003318:	60bb      	str	r3, [r7, #8]
										}
									}
								break;
 800331a:	e179      	b.n	8003610 <HAL_UART_RxCpltCallback+0x444>
								case cmdVol:
									if (strlen(uk) >= 1) {
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 8177 	beq.w	8003614 <HAL_UART_RxCpltCallback+0x448>
										uint8_t nv = Volume;
 8003326:	4b61      	ldr	r3, [pc, #388]	; (80034ac <HAL_UART_RxCpltCallback+0x2e0>)
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
										if (strstr(uk, "up")) {
 800332e:	4960      	ldr	r1, [pc, #384]	; (80034b0 <HAL_UART_RxCpltCallback+0x2e4>)
 8003330:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003332:	f010 fbf9 	bl	8013b28 <strstr>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d005      	beq.n	8003348 <HAL_UART_RxCpltCallback+0x17c>
											nv++;
 800333c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003340:	3301      	adds	r3, #1
 8003342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003346:	e012      	b.n	800336e <HAL_UART_RxCpltCallback+0x1a2>
										} else if (strstr(uk, "down")) {
 8003348:	495a      	ldr	r1, [pc, #360]	; (80034b4 <HAL_UART_RxCpltCallback+0x2e8>)
 800334a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800334c:	f010 fbec 	bl	8013b28 <strstr>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d005      	beq.n	8003362 <HAL_UART_RxCpltCallback+0x196>
											nv--;
 8003356:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800335a:	3b01      	subs	r3, #1
 800335c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003360:	e005      	b.n	800336e <HAL_UART_RxCpltCallback+0x1a2>
										} else {
											nv = (uint8_t)atol(uk);
 8003362:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003364:	f00f fbf9 	bl	8012b5a <atol>
 8003368:	4603      	mov	r3, r0
 800336a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
										}
										if ((nv >= 0) && (nv <= 15)) {
 800336e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003372:	2b0f      	cmp	r3, #15
 8003374:	f200 814e 	bhi.w	8003614 <HAL_UART_RxCpltCallback+0x448>
											newVolume = nv;
 8003378:	4a4f      	ldr	r2, [pc, #316]	; (80034b8 <HAL_UART_RxCpltCallback+0x2ec>)
 800337a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800337e:	7013      	strb	r3, [r2, #0]
											ev = i;
 8003380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003382:	60bb      	str	r3, [r7, #8]
										}
									}
								break;
 8003384:	e146      	b.n	8003614 <HAL_UART_RxCpltCallback+0x448>
								case cmdBass:
									if (strlen(uk) >= 1) {
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	f000 8144 	beq.w	8003618 <HAL_UART_RxCpltCallback+0x44c>
										newBassBoost = (uint8_t)atol(uk);
 8003390:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003392:	f00f fbe2 	bl	8012b5a <atol>
 8003396:	4603      	mov	r3, r0
 8003398:	b2da      	uxtb	r2, r3
 800339a:	4b48      	ldr	r3, [pc, #288]	; (80034bc <HAL_UART_RxCpltCallback+0x2f0>)
 800339c:	701a      	strb	r2, [r3, #0]
										ev = i;
 800339e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a0:	60bb      	str	r3, [r7, #8]
									}
								break;
 80033a2:	e139      	b.n	8003618 <HAL_UART_RxCpltCallback+0x44c>
								case cmdFreq://"freq:95.1"
									if (strlen(uk) >= 2) {
 80033a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033a6:	f7fc ff13 	bl	80001d0 <strlen>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	f240 8135 	bls.w	800361c <HAL_UART_RxCpltCallback+0x450>
										newFreq = (float)atof(uk);
 80033b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033b4:	f00f fbca 	bl	8012b4c <atof>
 80033b8:	ec53 2b10 	vmov	r2, r3, d0
 80033bc:	4610      	mov	r0, r2
 80033be:	4619      	mov	r1, r3
 80033c0:	f7fd fc12 	bl	8000be8 <__aeabi_d2f>
 80033c4:	4603      	mov	r3, r0
 80033c6:	4a3e      	ldr	r2, [pc, #248]	; (80034c0 <HAL_UART_RxCpltCallback+0x2f4>)
 80033c8:	6013      	str	r3, [r2, #0]
										if (newFreq != Freq) {
 80033ca:	4b3d      	ldr	r3, [pc, #244]	; (80034c0 <HAL_UART_RxCpltCallback+0x2f4>)
 80033cc:	ed93 7a00 	vldr	s14, [r3]
 80033d0:	4b3c      	ldr	r3, [pc, #240]	; (80034c4 <HAL_UART_RxCpltCallback+0x2f8>)
 80033d2:	edd3 7a00 	vldr	s15, [r3]
 80033d6:	eeb4 7a67 	vcmp.f32	s14, s15
 80033da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033de:	f000 811d 	beq.w	800361c <HAL_UART_RxCpltCallback+0x450>
											ev = i;
 80033e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e4:	60bb      	str	r3, [r7, #8]
										}
									}
								break;
 80033e6:	e119      	b.n	800361c <HAL_UART_RxCpltCallback+0x450>
								case cmdScan://"scan"
								case cmdList://"list"
									seek_up = 1;
 80033e8:	4b37      	ldr	r3, [pc, #220]	; (80034c8 <HAL_UART_RxCpltCallback+0x2fc>)
 80033ea:	2201      	movs	r2, #1
 80033ec:	701a      	strb	r2, [r3, #0]
									ev = i;
 80033ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f0:	60bb      	str	r3, [r7, #8]
									char *uki = strchr(uk, ':');
 80033f2:	213a      	movs	r1, #58	; 0x3a
 80033f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033f6:	f010 fb76 	bl	8013ae6 <strchr>
 80033fa:	6238      	str	r0, [r7, #32]
									if (uki) {
 80033fc:	6a3b      	ldr	r3, [r7, #32]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f000 810e 	beq.w	8003620 <HAL_UART_RxCpltCallback+0x454>
										if ((*(char *)(uki + 1) == '0') || strstr(uki + 1, "down")) seek_up = 0;
 8003404:	6a3b      	ldr	r3, [r7, #32]
 8003406:	3301      	adds	r3, #1
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	2b30      	cmp	r3, #48	; 0x30
 800340c:	d009      	beq.n	8003422 <HAL_UART_RxCpltCallback+0x256>
 800340e:	6a3b      	ldr	r3, [r7, #32]
 8003410:	3301      	adds	r3, #1
 8003412:	4928      	ldr	r1, [pc, #160]	; (80034b4 <HAL_UART_RxCpltCallback+0x2e8>)
 8003414:	4618      	mov	r0, r3
 8003416:	f010 fb87 	bl	8013b28 <strstr>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 80ff 	beq.w	8003620 <HAL_UART_RxCpltCallback+0x454>
 8003422:	4b29      	ldr	r3, [pc, #164]	; (80034c8 <HAL_UART_RxCpltCallback+0x2fc>)
 8003424:	2200      	movs	r2, #0
 8003426:	701a      	strb	r2, [r3, #0]
									}
								break;
 8003428:	e0fa      	b.n	8003620 <HAL_UART_RxCpltCallback+0x454>
								case cmdAck://"qack"
								case cmdCmd://"qcmd"
#ifdef SET_IRED
								case cmdiRed://"ired"
#endif
									ev = i;
 800342a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342c:	60bb      	str	r3, [r7, #8]
								break;
 800342e:	e100      	b.n	8003632 <HAL_UART_RxCpltCallback+0x466>
								case cmdEpoch://"epoch:1657191323"
									if (strlen(uk) >= 10) {
 8003430:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003432:	f7fc fecd 	bl	80001d0 <strlen>
 8003436:	4603      	mov	r3, r0
 8003438:	2b09      	cmp	r3, #9
 800343a:	f240 80f3 	bls.w	8003624 <HAL_UART_RxCpltCallback+0x458>
										char *uki = strchr(uk, ':');
 800343e:	213a      	movs	r1, #58	; 0x3a
 8003440:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003442:	f010 fb50 	bl	8013ae6 <strchr>
 8003446:	60f8      	str	r0, [r7, #12]
										if (uki) {
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00c      	beq.n	8003468 <HAL_UART_RxCpltCallback+0x29c>
											tZone = (uint8_t)atol(uki + 1);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	3301      	adds	r3, #1
 8003452:	4618      	mov	r0, r3
 8003454:	f00f fb81 	bl	8012b5a <atol>
 8003458:	4603      	mov	r3, r0
 800345a:	b2da      	uxtb	r2, r3
 800345c:	4b1b      	ldr	r3, [pc, #108]	; (80034cc <HAL_UART_RxCpltCallback+0x300>)
 800345e:	701a      	strb	r2, [r3, #0]
											*uki = '\0';
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	701a      	strb	r2, [r3, #0]
 8003466:	e002      	b.n	800346e <HAL_UART_RxCpltCallback+0x2a2>
										} else {
											tZone = 0;
 8003468:	4b18      	ldr	r3, [pc, #96]	; (80034cc <HAL_UART_RxCpltCallback+0x300>)
 800346a:	2200      	movs	r2, #0
 800346c:	701a      	strb	r2, [r3, #0]
										}
										epoch = (uint32_t)atol(uk);
 800346e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003470:	f00f fb73 	bl	8012b5a <atol>
 8003474:	4603      	mov	r3, r0
 8003476:	461a      	mov	r2, r3
 8003478:	4b15      	ldr	r3, [pc, #84]	; (80034d0 <HAL_UART_RxCpltCallback+0x304>)
 800347a:	601a      	str	r2, [r3, #0]
										ev = i;
 800347c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800347e:	60bb      	str	r3, [r7, #8]
									}
								break;
 8003480:	e0d0      	b.n	8003624 <HAL_UART_RxCpltCallback+0x458>
								case cmdsRead:// read:0
								case cmdsErase:// erase:0
									if (i == cmdsRead) cmd_sector = cmdsRead;
 8003482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003484:	2b04      	cmp	r3, #4
 8003486:	d127      	bne.n	80034d8 <HAL_UART_RxCpltCallback+0x30c>
 8003488:	4b12      	ldr	r3, [pc, #72]	; (80034d4 <HAL_UART_RxCpltCallback+0x308>)
 800348a:	2204      	movs	r2, #4
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	e026      	b.n	80034de <HAL_UART_RxCpltCallback+0x312>
 8003490:	40004400 	.word	0x40004400
 8003494:	20001b12 	.word	0x20001b12
 8003498:	20001b10 	.word	0x20001b10
 800349c:	20001b14 	.word	0x20001b14
 80034a0:	20000020 	.word	0x20000020
 80034a4:	2000010d 	.word	0x2000010d
 80034a8:	2000010c 	.word	0x2000010c
 80034ac:	2000010f 	.word	0x2000010f
 80034b0:	080176bc 	.word	0x080176bc
 80034b4:	080176c0 	.word	0x080176c0
 80034b8:	20000110 	.word	0x20000110
 80034bc:	20002f53 	.word	0x20002f53
 80034c0:	20000108 	.word	0x20000108
 80034c4:	20000104 	.word	0x20000104
 80034c8:	2000010e 	.word	0x2000010e
 80034cc:	20001f16 	.word	0x20001f16
 80034d0:	2000001c 	.word	0x2000001c
 80034d4:	200000f8 	.word	0x200000f8
												  else cmd_sector = cmdsErase;
 80034d8:	4b75      	ldr	r3, [pc, #468]	; (80036b0 <HAL_UART_RxCpltCallback+0x4e4>)
 80034da:	2205      	movs	r2, #5
 80034dc:	601a      	str	r2, [r3, #0]
									if (*uk == ':') {
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	2b3a      	cmp	r3, #58	; 0x3a
 80034e4:	f040 80a0 	bne.w	8003628 <HAL_UART_RxCpltCallback+0x45c>
										int sek = atoi(++uk);
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	3301      	adds	r3, #1
 80034ec:	627b      	str	r3, [r7, #36]	; 0x24
 80034ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80034f0:	f00f fb2f 	bl	8012b52 <atoi>
 80034f4:	6138      	str	r0, [r7, #16]
										if ( ((sek >= 0) && (sek < W25qxx_getSectorCount())) || (sek == -1) ) {
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	db05      	blt.n	8003508 <HAL_UART_RxCpltCallback+0x33c>
 80034fc:	f003 fc48 	bl	8006d90 <W25qxx_getSectorCount>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	429a      	cmp	r2, r3
 8003506:	d804      	bhi.n	8003512 <HAL_UART_RxCpltCallback+0x346>
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800350e:	f040 808b 	bne.w	8003628 <HAL_UART_RxCpltCallback+0x45c>
											adr_sector = sek;
 8003512:	4a68      	ldr	r2, [pc, #416]	; (80036b4 <HAL_UART_RxCpltCallback+0x4e8>)
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	6013      	str	r3, [r2, #0]
											offset_sector = 0;
 8003518:	4b67      	ldr	r3, [pc, #412]	; (80036b8 <HAL_UART_RxCpltCallback+0x4ec>)
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]
											if (sek == -1) {
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003524:	d106      	bne.n	8003534 <HAL_UART_RxCpltCallback+0x368>
												if (cmd_sector == cmdsErase) ev = i;
 8003526:	4b62      	ldr	r3, [pc, #392]	; (80036b0 <HAL_UART_RxCpltCallback+0x4e4>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2b05      	cmp	r3, #5
 800352c:	d17c      	bne.n	8003628 <HAL_UART_RxCpltCallback+0x45c>
 800352e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003530:	60bb      	str	r3, [r7, #8]
											} else {
												ev = i;
											}
										}
									}
								break;
 8003532:	e079      	b.n	8003628 <HAL_UART_RxCpltCallback+0x45c>
												ev = i;
 8003534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003536:	60bb      	str	r3, [r7, #8]
								break;
 8003538:	e076      	b.n	8003628 <HAL_UART_RxCpltCallback+0x45c>
								case cmdsWrite:// write:0:a5 | write:0:a5:256
									if (*uk == ':') {
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	2b3a      	cmp	r3, #58	; 0x3a
 8003540:	d174      	bne.n	800362c <HAL_UART_RxCpltCallback+0x460>
										uk++;
 8003542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003544:	3301      	adds	r3, #1
 8003546:	627b      	str	r3, [r7, #36]	; 0x24
										int sek = atoi(uk);
 8003548:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800354a:	f00f fb02 	bl	8012b52 <atoi>
 800354e:	61f8      	str	r0, [r7, #28]
										if ((sek >= 0) && (sek < W25qxx_getSectorCount())) {
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	2b00      	cmp	r3, #0
 8003554:	db6a      	blt.n	800362c <HAL_UART_RxCpltCallback+0x460>
 8003556:	f003 fc1b 	bl	8006d90 <W25qxx_getSectorCount>
 800355a:	4602      	mov	r2, r0
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	429a      	cmp	r2, r3
 8003560:	d964      	bls.n	800362c <HAL_UART_RxCpltCallback+0x460>
											char *ukn = strchr(uk, ':');
 8003562:	213a      	movs	r1, #58	; 0x3a
 8003564:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003566:	f010 fabe 	bl	8013ae6 <strchr>
 800356a:	61b8      	str	r0, [r7, #24]
											if (ukn) {
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d05c      	beq.n	800362c <HAL_UART_RxCpltCallback+0x460>
												len_write = -1;
 8003572:	4b52      	ldr	r3, [pc, #328]	; (80036bc <HAL_UART_RxCpltCallback+0x4f0>)
 8003574:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003578:	601a      	str	r2, [r3, #0]
												ukn++;
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	3301      	adds	r3, #1
 800357e:	61bb      	str	r3, [r7, #24]
												byte_write = hexToBin(ukn);
 8003580:	69b8      	ldr	r0, [r7, #24]
 8003582:	f7ff f9fb 	bl	800297c <hexToBin>
 8003586:	4603      	mov	r3, r0
 8003588:	461a      	mov	r2, r3
 800358a:	4b4d      	ldr	r3, [pc, #308]	; (80036c0 <HAL_UART_RxCpltCallback+0x4f4>)
 800358c:	701a      	strb	r2, [r3, #0]
												uk = strchr(ukn, ':');
 800358e:	213a      	movs	r1, #58	; 0x3a
 8003590:	69b8      	ldr	r0, [r7, #24]
 8003592:	f010 faa8 	bl	8013ae6 <strchr>
 8003596:	6278      	str	r0, [r7, #36]	; 0x24
												if (uk) {
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	2b00      	cmp	r3, #0
 800359c:	d012      	beq.n	80035c4 <HAL_UART_RxCpltCallback+0x3f8>
													int l = atoi(++uk);
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	3301      	adds	r3, #1
 80035a2:	627b      	str	r3, [r7, #36]	; 0x24
 80035a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80035a6:	f00f fad4 	bl	8012b52 <atoi>
 80035aa:	6178      	str	r0, [r7, #20]
													if ((l > 0) && (l < W25qxx_getSectorSize())) len_write = l;
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	dd08      	ble.n	80035c4 <HAL_UART_RxCpltCallback+0x3f8>
 80035b2:	f003 fbf9 	bl	8006da8 <W25qxx_getSectorSize>
 80035b6:	4602      	mov	r2, r0
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d902      	bls.n	80035c4 <HAL_UART_RxCpltCallback+0x3f8>
 80035be:	4a3f      	ldr	r2, [pc, #252]	; (80036bc <HAL_UART_RxCpltCallback+0x4f0>)
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	6013      	str	r3, [r2, #0]
												}
												adr_sector = sek;
 80035c4:	4a3b      	ldr	r2, [pc, #236]	; (80036b4 <HAL_UART_RxCpltCallback+0x4e8>)
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	6013      	str	r3, [r2, #0]
												offset_sector = 0;
 80035ca:	4b3b      	ldr	r3, [pc, #236]	; (80036b8 <HAL_UART_RxCpltCallback+0x4ec>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]
												ev = i;//flag_sector = true;
 80035d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d2:	60bb      	str	r3, [r7, #8]
											}
										}
									}
								break;
 80035d4:	e02a      	b.n	800362c <HAL_UART_RxCpltCallback+0x460>
								case cmdsNext:// next
									if ((last_cmd_sector == cmdsRead) || (last_cmd_sector == cmdsNext)) {
 80035d6:	4b3b      	ldr	r3, [pc, #236]	; (80036c4 <HAL_UART_RxCpltCallback+0x4f8>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2b04      	cmp	r3, #4
 80035dc:	d003      	beq.n	80035e6 <HAL_UART_RxCpltCallback+0x41a>
 80035de:	4b39      	ldr	r3, [pc, #228]	; (80036c4 <HAL_UART_RxCpltCallback+0x4f8>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2b06      	cmp	r3, #6
 80035e4:	d124      	bne.n	8003630 <HAL_UART_RxCpltCallback+0x464>
										if ((offset_sector + list_sector) < W25qxx_getSectorSize()) {
 80035e6:	4b34      	ldr	r3, [pc, #208]	; (80036b8 <HAL_UART_RxCpltCallback+0x4ec>)
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	4b37      	ldr	r3, [pc, #220]	; (80036c8 <HAL_UART_RxCpltCallback+0x4fc>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4413      	add	r3, r2
 80035f0:	461c      	mov	r4, r3
 80035f2:	f003 fbd9 	bl	8006da8 <W25qxx_getSectorSize>
 80035f6:	4603      	mov	r3, r0
 80035f8:	429c      	cmp	r4, r3
 80035fa:	d219      	bcs.n	8003630 <HAL_UART_RxCpltCallback+0x464>
											offset_sector += list_sector;
 80035fc:	4b2e      	ldr	r3, [pc, #184]	; (80036b8 <HAL_UART_RxCpltCallback+0x4ec>)
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	4b31      	ldr	r3, [pc, #196]	; (80036c8 <HAL_UART_RxCpltCallback+0x4fc>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4413      	add	r3, r2
 8003606:	4a2c      	ldr	r2, [pc, #176]	; (80036b8 <HAL_UART_RxCpltCallback+0x4ec>)
 8003608:	6013      	str	r3, [r2, #0]
											ev = i;//flag_sector = true;
 800360a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360c:	60bb      	str	r3, [r7, #8]
										}
									}
								break;
 800360e:	e00f      	b.n	8003630 <HAL_UART_RxCpltCallback+0x464>
								break;
 8003610:	bf00      	nop
 8003612:	e017      	b.n	8003644 <HAL_UART_RxCpltCallback+0x478>
								break;
 8003614:	bf00      	nop
 8003616:	e015      	b.n	8003644 <HAL_UART_RxCpltCallback+0x478>
								break;
 8003618:	bf00      	nop
 800361a:	e013      	b.n	8003644 <HAL_UART_RxCpltCallback+0x478>
								break;
 800361c:	bf00      	nop
 800361e:	e011      	b.n	8003644 <HAL_UART_RxCpltCallback+0x478>
								break;
 8003620:	bf00      	nop
 8003622:	e00f      	b.n	8003644 <HAL_UART_RxCpltCallback+0x478>
								break;
 8003624:	bf00      	nop
 8003626:	e00d      	b.n	8003644 <HAL_UART_RxCpltCallback+0x478>
								break;
 8003628:	bf00      	nop
 800362a:	e00b      	b.n	8003644 <HAL_UART_RxCpltCallback+0x478>
								break;
 800362c:	bf00      	nop
 800362e:	e009      	b.n	8003644 <HAL_UART_RxCpltCallback+0x478>
								break;
 8003630:	bf00      	nop
							}
							break;
 8003632:	e007      	b.n	8003644 <HAL_UART_RxCpltCallback+0x478>
					for (i = 0; i < MAX_CMDS; i++) {
 8003634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003636:	3301      	adds	r3, #1
 8003638:	62fb      	str	r3, [r7, #44]	; 0x2c
 800363a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363c:	2b19      	cmp	r3, #25
 800363e:	f77f adf8 	ble.w	8003232 <HAL_UART_RxCpltCallback+0x66>
 8003642:	e000      	b.n	8003646 <HAL_UART_RxCpltCallback+0x47a>
							break;
 8003644:	bf00      	nop
					}
#if defined(SET_BLE) || defined(SET_AUDIO)
				}
#endif
				//
				if (ev != -2) {
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	f113 0f02 	cmn.w	r3, #2
 800364c:	d017      	beq.n	800367e <HAL_UART_RxCpltCallback+0x4b2>
					if (ev == -1) ev = cmdErr;
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003654:	d101      	bne.n	800365a <HAL_UART_RxCpltCallback+0x48e>
 8003656:	2303      	movs	r3, #3
 8003658:	60bb      	str	r3, [r7, #8]
					if (osMessageQueuePut(evtQueHandle, (const void *)&ev, 0, 0) != osOK) devError |= devEVT;
 800365a:	4b1c      	ldr	r3, [pc, #112]	; (80036cc <HAL_UART_RxCpltCallback+0x500>)
 800365c:	6818      	ldr	r0, [r3, #0]
 800365e:	f107 0108 	add.w	r1, r7, #8
 8003662:	2300      	movs	r3, #0
 8003664:	2200      	movs	r2, #0
 8003666:	f00c f833 	bl	800f6d0 <osMessageQueuePut>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d006      	beq.n	800367e <HAL_UART_RxCpltCallback+0x4b2>
 8003670:	4b17      	ldr	r3, [pc, #92]	; (80036d0 <HAL_UART_RxCpltCallback+0x504>)
 8003672:	881b      	ldrh	r3, [r3, #0]
 8003674:	f043 0310 	orr.w	r3, r3, #16
 8003678:	b29a      	uxth	r2, r3
 800367a:	4b15      	ldr	r3, [pc, #84]	; (80036d0 <HAL_UART_RxCpltCallback+0x504>)
 800367c:	801a      	strh	r2, [r3, #0]
				}
				//
			}

			rxInd = 0;
 800367e:	4b15      	ldr	r3, [pc, #84]	; (80036d4 <HAL_UART_RxCpltCallback+0x508>)
 8003680:	2200      	movs	r2, #0
 8003682:	801a      	strh	r2, [r3, #0]
			*rxBuf = '\0';
 8003684:	4b14      	ldr	r3, [pc, #80]	; (80036d8 <HAL_UART_RxCpltCallback+0x50c>)
 8003686:	2200      	movs	r2, #0
 8003688:	701a      	strb	r2, [r3, #0]
		}

		if (HAL_UART_Receive_IT(huart, &rxByte, 1) != HAL_OK) devError |= devUART;
 800368a:	2201      	movs	r2, #1
 800368c:	4913      	ldr	r1, [pc, #76]	; (80036dc <HAL_UART_RxCpltCallback+0x510>)
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f00a f98c 	bl	800d9ac <HAL_UART_Receive_IT>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d006      	beq.n	80036a8 <HAL_UART_RxCpltCallback+0x4dc>
 800369a:	4b0d      	ldr	r3, [pc, #52]	; (80036d0 <HAL_UART_RxCpltCallback+0x504>)
 800369c:	881b      	ldrh	r3, [r3, #0]
 800369e:	f043 0302 	orr.w	r3, r3, #2
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	4b0a      	ldr	r3, [pc, #40]	; (80036d0 <HAL_UART_RxCpltCallback+0x504>)
 80036a6:	801a      	strh	r2, [r3, #0]
	}
}
 80036a8:	bf00      	nop
 80036aa:	3734      	adds	r7, #52	; 0x34
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd90      	pop	{r4, r7, pc}
 80036b0:	200000f8 	.word	0x200000f8
 80036b4:	20001f18 	.word	0x20001f18
 80036b8:	20001f1c 	.word	0x20001f1c
 80036bc:	20001f24 	.word	0x20001f24
 80036c0:	20000100 	.word	0x20000100
 80036c4:	200000fc 	.word	0x200000fc
 80036c8:	20001f20 	.word	0x20001f20
 80036cc:	20000e6c 	.word	0x20000e6c
 80036d0:	20001b00 	.word	0x20001b00
 80036d4:	20001b12 	.word	0x20001b12
 80036d8:	20001b14 	.word	0x20001b14
 80036dc:	20001b10 	.word	0x20001b10

080036e0 <spiDone>:
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
//    Функция устанавливает в начальное состояние 'готов' служебные параметры порта SPI1:
//
void spiDone(SPI_HandleTypeDef *hspi)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
#ifdef SET_W25FLASH
	if (hspi->Instance == SPI2) {
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a0a      	ldr	r2, [pc, #40]	; (8003718 <spiDone+0x38>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d105      	bne.n	80036fe <spiDone+0x1e>
		W25_UNSELECT();
 80036f2:	f003 f971 	bl	80069d8 <W25_UNSELECT>
		spiRdy = 1;
 80036f6:	4b09      	ldr	r3, [pc, #36]	; (800371c <spiDone+0x3c>)
 80036f8:	2201      	movs	r2, #1
 80036fa:	701a      	strb	r2, [r3, #0]
	else
	if (hspi->Instance == SPI1) {
		lcdRdy = 1;
	}
#endif
}
 80036fc:	e007      	b.n	800370e <spiDone+0x2e>
	if (hspi->Instance == SPI1) {
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a07      	ldr	r2, [pc, #28]	; (8003720 <spiDone+0x40>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d102      	bne.n	800370e <spiDone+0x2e>
		lcdRdy = 1;
 8003708:	4b06      	ldr	r3, [pc, #24]	; (8003724 <spiDone+0x44>)
 800370a:	2201      	movs	r2, #1
 800370c:	701a      	strb	r2, [r3, #0]
}
 800370e:	bf00      	nop
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	40003800 	.word	0x40003800
 800371c:	200000f4 	.word	0x200000f4
 8003720:	40013000 	.word	0x40013000
 8003724:	20000000 	.word	0x20000000

08003728 <HAL_SPI_RxCpltCallback>:
//-------------------------------------------------------------------------------------------
//    CallBack функция, вызывается по завершении приема данных от порта SPI
//
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f7ff ffd5 	bl	80036e0 <spiDone>
}
 8003736:	bf00      	nop
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <HAL_SPI_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
//    CallBack функция, вызывается по завершении передачи данных в порт SPI
//
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b082      	sub	sp, #8
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7ff ffca 	bl	80036e0 <spiDone>
}
 800374c:	bf00      	nop
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <HAL_SPI_TxRxCpltCallback>:
//-------------------------------------------------------------------------------------------
//    CallBack функция, вызывается по завершении приема/передачи данных порта SPI
//
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f7ff ffbf 	bl	80036e0 <spiDone>
}
 8003762:	bf00      	nop
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
	...

0800376c <HAL_SPI_ErrorCallback>:
//--------------------------------------------------------------------------------------------
//    CallBack функция, вызывается при возникновении ошибки у модуля SPI
//
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f7ff ffb3 	bl	80036e0 <spiDone>
	devError |= devSPI;
 800377a:	4b05      	ldr	r3, [pc, #20]	; (8003790 <HAL_SPI_ErrorCallback+0x24>)
 800377c:	881b      	ldrh	r3, [r3, #0]
 800377e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003782:	b29a      	uxth	r2, r3
 8003784:	4b02      	ldr	r3, [pc, #8]	; (8003790 <HAL_SPI_ErrorCallback+0x24>)
 8003786:	801a      	strh	r2, [r3, #0]
}
 8003788:	bf00      	nop
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	20001b00 	.word	0x20001b00

08003794 <HAL_I2C_ErrorCallback>:
{
	if (hi2c->Instance == I2C1) i2cRdy = 1;
}
//--------------------------------------------------------------------------------------------
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) devError |= devRDA;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a07      	ldr	r2, [pc, #28]	; (80037c0 <HAL_I2C_ErrorCallback+0x2c>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d106      	bne.n	80037b4 <HAL_I2C_ErrorCallback+0x20>
 80037a6:	4b07      	ldr	r3, [pc, #28]	; (80037c4 <HAL_I2C_ErrorCallback+0x30>)
 80037a8:	881b      	ldrh	r3, [r3, #0]
 80037aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	4b04      	ldr	r3, [pc, #16]	; (80037c4 <HAL_I2C_ErrorCallback+0x30>)
 80037b2:	801a      	strh	r2, [r3, #0]
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr
 80037c0:	40005400 	.word	0x40005400
 80037c4:	20001b00 	.word	0x20001b00

080037c8 <HAL_GPIO_EXTI_Callback>:
//--------------------------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	4603      	mov	r3, r0
 80037d0:	80fb      	strh	r3, [r7, #6]
#ifdef SET_SLEEP
	if (sleep_mode) {
 80037d2:	4b2c      	ldr	r3, [pc, #176]	; (8003884 <HAL_GPIO_EXTI_Callback+0xbc>)
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d027      	beq.n	800382a <HAL_GPIO_EXTI_Callback+0x62>
		if ((HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_SET) ||
 80037da:	2102      	movs	r1, #2
 80037dc:	482a      	ldr	r0, [pc, #168]	; (8003888 <HAL_GPIO_EXTI_Callback+0xc0>)
 80037de:	f004 fbf7 	bl	8007fd0 <HAL_GPIO_ReadPin>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d006      	beq.n	80037f6 <HAL_GPIO_EXTI_Callback+0x2e>
				(HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_SET)) {
 80037e8:	2104      	movs	r1, #4
 80037ea:	4827      	ldr	r0, [pc, #156]	; (8003888 <HAL_GPIO_EXTI_Callback+0xc0>)
 80037ec:	f004 fbf0 	bl	8007fd0 <HAL_GPIO_ReadPin>
 80037f0:	4603      	mov	r3, r0
		if ((HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_SET) ||
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d141      	bne.n	800387a <HAL_GPIO_EXTI_Callback+0xb2>
			sleep_mode = false;
 80037f6:	4b23      	ldr	r3, [pc, #140]	; (8003884 <HAL_GPIO_EXTI_Callback+0xbc>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	701a      	strb	r2, [r3, #0]
			HAL_PWR_DisableSleepOnExit();
 80037fc:	f006 f908 	bl	8009a10 <HAL_PWR_DisableSleepOnExit>
			int ev = cmdExitSleep;
 8003800:	2313      	movs	r3, #19
 8003802:	60fb      	str	r3, [r7, #12]
			if (osMessageQueuePut(evtQueHandle, (const void *)&ev, 0, 0)) devError |= devEVT;
 8003804:	4b21      	ldr	r3, [pc, #132]	; (800388c <HAL_GPIO_EXTI_Callback+0xc4>)
 8003806:	6818      	ldr	r0, [r3, #0]
 8003808:	f107 010c 	add.w	r1, r7, #12
 800380c:	2300      	movs	r3, #0
 800380e:	2200      	movs	r2, #0
 8003810:	f00b ff5e 	bl	800f6d0 <osMessageQueuePut>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d02f      	beq.n	800387a <HAL_GPIO_EXTI_Callback+0xb2>
 800381a:	4b1d      	ldr	r3, [pc, #116]	; (8003890 <HAL_GPIO_EXTI_Callback+0xc8>)
 800381c:	881b      	ldrh	r3, [r3, #0]
 800381e:	f043 0310 	orr.w	r3, r3, #16
 8003822:	b29a      	uxth	r2, r3
 8003824:	4b1a      	ldr	r3, [pc, #104]	; (8003890 <HAL_GPIO_EXTI_Callback+0xc8>)
 8003826:	801a      	strh	r2, [r3, #0]
		}
		return;
 8003828:	e027      	b.n	800387a <HAL_GPIO_EXTI_Callback+0xb2>
	}
#endif
	if ((GPIO_Pin == KEY0_Pin) || (GPIO_Pin == KEY1_Pin)) {
 800382a:	88fb      	ldrh	r3, [r7, #6]
 800382c:	2b02      	cmp	r3, #2
 800382e:	d002      	beq.n	8003836 <HAL_GPIO_EXTI_Callback+0x6e>
 8003830:	88fb      	ldrh	r3, [r7, #6]
 8003832:	2b04      	cmp	r3, #4
 8003834:	d122      	bne.n	800387c <HAL_GPIO_EXTI_Callback+0xb4>
		if (GPIO_Pin == KEY0_Pin) seek_up = 1;
 8003836:	88fb      	ldrh	r3, [r7, #6]
 8003838:	2b02      	cmp	r3, #2
 800383a:	d103      	bne.n	8003844 <HAL_GPIO_EXTI_Callback+0x7c>
 800383c:	4b15      	ldr	r3, [pc, #84]	; (8003894 <HAL_GPIO_EXTI_Callback+0xcc>)
 800383e:	2201      	movs	r2, #1
 8003840:	701a      	strb	r2, [r3, #0]
 8003842:	e005      	b.n	8003850 <HAL_GPIO_EXTI_Callback+0x88>
		else
		if (GPIO_Pin == KEY1_Pin) seek_up = 0;
 8003844:	88fb      	ldrh	r3, [r7, #6]
 8003846:	2b04      	cmp	r3, #4
 8003848:	d102      	bne.n	8003850 <HAL_GPIO_EXTI_Callback+0x88>
 800384a:	4b12      	ldr	r3, [pc, #72]	; (8003894 <HAL_GPIO_EXTI_Callback+0xcc>)
 800384c:	2200      	movs	r2, #0
 800384e:	701a      	strb	r2, [r3, #0]
		int ev = cmdScan;
 8003850:	230b      	movs	r3, #11
 8003852:	60bb      	str	r3, [r7, #8]
		if (osMessageQueuePut(evtQueHandle, (const void *)&ev, 0, 0)) devError |= devEVT;
 8003854:	4b0d      	ldr	r3, [pc, #52]	; (800388c <HAL_GPIO_EXTI_Callback+0xc4>)
 8003856:	6818      	ldr	r0, [r3, #0]
 8003858:	f107 0108 	add.w	r1, r7, #8
 800385c:	2300      	movs	r3, #0
 800385e:	2200      	movs	r2, #0
 8003860:	f00b ff36 	bl	800f6d0 <osMessageQueuePut>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d008      	beq.n	800387c <HAL_GPIO_EXTI_Callback+0xb4>
 800386a:	4b09      	ldr	r3, [pc, #36]	; (8003890 <HAL_GPIO_EXTI_Callback+0xc8>)
 800386c:	881b      	ldrh	r3, [r3, #0]
 800386e:	f043 0310 	orr.w	r3, r3, #16
 8003872:	b29a      	uxth	r2, r3
 8003874:	4b06      	ldr	r3, [pc, #24]	; (8003890 <HAL_GPIO_EXTI_Callback+0xc8>)
 8003876:	801a      	strh	r2, [r3, #0]
 8003878:	e000      	b.n	800387c <HAL_GPIO_EXTI_Callback+0xb4>
		return;
 800387a:	bf00      	nop
	}
}
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	20003302 	.word	0x20003302
 8003888:	48000800 	.word	0x48000800
 800388c:	20000e6c 	.word	0x20000e6c
 8003890:	20001b00 	.word	0x20001b00
 8003894:	2000010e 	.word	0x2000010e

08003898 <irdTask>:
//--------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------
void irdTask(void *argument)
{
 8003898:	b5b0      	push	{r4, r5, r7, lr}
 800389a:	b08e      	sub	sp, #56	; 0x38
 800389c:	af02      	add	r7, sp, #8
 800389e:	6078      	str	r0, [r7, #4]
#ifdef SET_IRED

	ird_exit = false;
 80038a0:	4bb1      	ldr	r3, [pc, #708]	; (8003b68 <irdTask+0x2d0>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	701a      	strb	r2, [r3, #0]

	bool ep_start = false;
 80038a6:	2300      	movs	r3, #0
 80038a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	char ep_str[16] = {0};
 80038ac:	2300      	movs	r3, #0
 80038ae:	613b      	str	r3, [r7, #16]
 80038b0:	f107 0314 	add.w	r3, r7, #20
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	605a      	str	r2, [r3, #4]
 80038ba:	609a      	str	r2, [r3, #8]
	uint32_t ep_tmr = 0;
 80038bc:	2300      	movs	r3, #0
 80038be:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t tmr_ired = 0;
 80038c0:	2300      	movs	r3, #0
 80038c2:	627b      	str	r3, [r7, #36]	; 0x24


	if (waitBit);

	enIntIRED();
 80038c4:	f7fd fc1e 	bl	8001104 <enIntIRED>


  while (!restart) {
 80038c8:	e204      	b.n	8003cd4 <irdTask+0x43c>

	if (!tmr_ired) {
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f040 81db 	bne.w	8003c88 <irdTask+0x3f0>
		if (decodeIRED(&results)) {
 80038d2:	48a6      	ldr	r0, [pc, #664]	; (8003b6c <irdTask+0x2d4>)
 80038d4:	f7fd fbe0 	bl	8001098 <decodeIRED>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 81d4 	beq.w	8003c88 <irdTask+0x3f0>

			tmr_ired = get_mstmr(_300ms);
 80038e0:	f04f 001e 	mov.w	r0, #30
 80038e4:	f04f 0100 	mov.w	r1, #0
 80038e8:	f7ff faac 	bl	8002e44 <get_mstmr>
 80038ec:	4602      	mov	r2, r0
 80038ee:	460b      	mov	r3, r1
 80038f0:	4613      	mov	r3, r2
 80038f2:	627b      	str	r3, [r7, #36]	; 0x24
			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 80038f4:	2200      	movs	r2, #0
 80038f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80038fa:	489d      	ldr	r0, [pc, #628]	; (8003b70 <irdTask+0x2d8>)
 80038fc:	f004 fb80 	bl	8008000 <HAL_GPIO_WritePin>
			int8_t kid = -1;
 8003900:	23ff      	movs	r3, #255	; 0xff
 8003902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			for (int8_t i = 0; i < MAX_IRED_KEY; i++) {
 8003906:	2300      	movs	r3, #0
 8003908:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800390c:	e019      	b.n	8003942 <irdTask+0xaa>
				if (results.value == keyAll[i].code) {
 800390e:	4b97      	ldr	r3, [pc, #604]	; (8003b6c <irdTask+0x2d4>)
 8003910:	6819      	ldr	r1, [r3, #0]
 8003912:	f997 2022 	ldrsb.w	r2, [r7, #34]	; 0x22
 8003916:	4897      	ldr	r0, [pc, #604]	; (8003b74 <irdTask+0x2dc>)
 8003918:	4613      	mov	r3, r2
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	4413      	add	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4403      	add	r3, r0
 8003922:	3308      	adds	r3, #8
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4299      	cmp	r1, r3
 8003928:	d104      	bne.n	8003934 <irdTask+0x9c>
					kid = i;
 800392a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800392e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					break;
 8003932:	e00a      	b.n	800394a <irdTask+0xb2>
			for (int8_t i = 0; i < MAX_IRED_KEY; i++) {
 8003934:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8003938:	b2db      	uxtb	r3, r3
 800393a:	3301      	adds	r3, #1
 800393c:	b2db      	uxtb	r3, r3
 800393e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003942:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8003946:	2b14      	cmp	r3, #20
 8003948:	dde1      	ble.n	800390e <irdTask+0x76>
				}
			}
			//
			stline[0] = '\0';
 800394a:	4b8b      	ldr	r3, [pc, #556]	; (8003b78 <irdTask+0x2e0>)
 800394c:	2200      	movs	r2, #0
 800394e:	701a      	strb	r2, [r3, #0]
			if (kid == -1) {
 8003950:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8003954:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003958:	d10b      	bne.n	8003972 <irdTask+0xda>
				if (ired_show) sprintf(stline, "CODE:%08lX", results.value);
 800395a:	4b88      	ldr	r3, [pc, #544]	; (8003b7c <irdTask+0x2e4>)
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d014      	beq.n	800398c <irdTask+0xf4>
 8003962:	4b82      	ldr	r3, [pc, #520]	; (8003b6c <irdTask+0x2d4>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	461a      	mov	r2, r3
 8003968:	4985      	ldr	r1, [pc, #532]	; (8003b80 <irdTask+0x2e8>)
 800396a:	4883      	ldr	r0, [pc, #524]	; (8003b78 <irdTask+0x2e0>)
 800396c:	f010 f858 	bl	8013a20 <siprintf>
 8003970:	e00c      	b.n	800398c <irdTask+0xf4>
			} else {
				sprintf(stline, "irKEY: %s", keyAll[kid].name);
 8003972:	f997 2023 	ldrsb.w	r2, [r7, #35]	; 0x23
 8003976:	4613      	mov	r3, r2
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	4413      	add	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4a7d      	ldr	r2, [pc, #500]	; (8003b74 <irdTask+0x2dc>)
 8003980:	4413      	add	r3, r2
 8003982:	461a      	mov	r2, r3
 8003984:	497f      	ldr	r1, [pc, #508]	; (8003b84 <irdTask+0x2ec>)
 8003986:	487c      	ldr	r0, [pc, #496]	; (8003b78 <irdTask+0x2e0>)
 8003988:	f010 f84a 	bl	8013a20 <siprintf>
			}
			if (strlen(stline)) Report(1, "[que:%u] %s\r\n", cntEvt, stline);
 800398c:	4b7a      	ldr	r3, [pc, #488]	; (8003b78 <irdTask+0x2e0>)
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d008      	beq.n	80039a6 <irdTask+0x10e>
 8003994:	4b7c      	ldr	r3, [pc, #496]	; (8003b88 <irdTask+0x2f0>)
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	b2db      	uxtb	r3, r3
 800399a:	461a      	mov	r2, r3
 800399c:	4b76      	ldr	r3, [pc, #472]	; (8003b78 <irdTask+0x2e0>)
 800399e:	497b      	ldr	r1, [pc, #492]	; (8003b8c <irdTask+0x2f4>)
 80039a0:	2001      	movs	r0, #1
 80039a2:	f7ff fb71 	bl	8003088 <Report>
			//
			if (kid != -1) {
 80039a6:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80039aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039ae:	f000 816b 	beq.w	8003c88 <irdTask+0x3f0>
				int ird = evt_None;
 80039b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039b6:	60fb      	str	r3, [r7, #12]
				switch (kid) {
 80039b8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80039bc:	2b14      	cmp	r3, #20
 80039be:	f200 814d 	bhi.w	8003c5c <irdTask+0x3c4>
 80039c2:	a201      	add	r2, pc, #4	; (adr r2, 80039c8 <irdTask+0x130>)
 80039c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c8:	08003a2f 	.word	0x08003a2f
 80039cc:	08003a1d 	.word	0x08003a1d
 80039d0:	08003a23 	.word	0x08003a23
 80039d4:	08003a73 	.word	0x08003a73
 80039d8:	08003a7f 	.word	0x08003a7f
 80039dc:	08003a91 	.word	0x08003a91
 80039e0:	08003a3b 	.word	0x08003a3b
 80039e4:	08003a57 	.word	0x08003a57
 80039e8:	08003a8b 	.word	0x08003a8b
 80039ec:	08003b33 	.word	0x08003b33
 80039f0:	08003b4f 	.word	0x08003b4f
 80039f4:	08003bb5 	.word	0x08003bb5
 80039f8:	08003bb5 	.word	0x08003bb5
 80039fc:	08003bb5 	.word	0x08003bb5
 8003a00:	08003bb5 	.word	0x08003bb5
 8003a04:	08003bb5 	.word	0x08003bb5
 8003a08:	08003bb5 	.word	0x08003bb5
 8003a0c:	08003bb5 	.word	0x08003bb5
 8003a10:	08003bb5 	.word	0x08003bb5
 8003a14:	08003bb5 	.word	0x08003bb5
 8003a18:	08003bb5 	.word	0x08003bb5
					case key_ch:
						ird = evt_Restart;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	60fb      	str	r3, [r7, #12]
					break;
 8003a20:	e11c      	b.n	8003c5c <irdTask+0x3c4>
					case key_ch_plus:
						seek_up = 1;
 8003a22:	4b5b      	ldr	r3, [pc, #364]	; (8003b90 <irdTask+0x2f8>)
 8003a24:	2201      	movs	r2, #1
 8003a26:	701a      	strb	r2, [r3, #0]
						ird = evt_Scan;
 8003a28:	230b      	movs	r3, #11
 8003a2a:	60fb      	str	r3, [r7, #12]
					break;
 8003a2c:	e116      	b.n	8003c5c <irdTask+0x3c4>
					case key_ch_minus:
						seek_up = 0;
 8003a2e:	4b58      	ldr	r3, [pc, #352]	; (8003b90 <irdTask+0x2f8>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	701a      	strb	r2, [r3, #0]
						ird = evt_Scan;
 8003a34:	230b      	movs	r3, #11
 8003a36:	60fb      	str	r3, [r7, #12]
					break;
 8003a38:	e110      	b.n	8003c5c <irdTask+0x3c4>
					case key_minus:
						if (Volume) {
 8003a3a:	4b56      	ldr	r3, [pc, #344]	; (8003b94 <irdTask+0x2fc>)
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 8103 	beq.w	8003c4a <irdTask+0x3b2>
							newVolume = Volume - 1;
 8003a44:	4b53      	ldr	r3, [pc, #332]	; (8003b94 <irdTask+0x2fc>)
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	4b52      	ldr	r3, [pc, #328]	; (8003b98 <irdTask+0x300>)
 8003a4e:	701a      	strb	r2, [r3, #0]
							ird = evt_Vol;
 8003a50:	230d      	movs	r3, #13
 8003a52:	60fb      	str	r3, [r7, #12]
						}
					break;
 8003a54:	e0f9      	b.n	8003c4a <irdTask+0x3b2>
					case key_plus:
						if (Volume < 15) {
 8003a56:	4b4f      	ldr	r3, [pc, #316]	; (8003b94 <irdTask+0x2fc>)
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	2b0e      	cmp	r3, #14
 8003a5c:	f200 80f7 	bhi.w	8003c4e <irdTask+0x3b6>
							newVolume = Volume + 1;
 8003a60:	4b4c      	ldr	r3, [pc, #304]	; (8003b94 <irdTask+0x2fc>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	3301      	adds	r3, #1
 8003a66:	b2da      	uxtb	r2, r3
 8003a68:	4b4b      	ldr	r3, [pc, #300]	; (8003b98 <irdTask+0x300>)
 8003a6a:	701a      	strb	r2, [r3, #0]
							ird = evt_Vol;
 8003a6c:	230d      	movs	r3, #13
 8003a6e:	60fb      	str	r3, [r7, #12]
						}
					break;
 8003a70:	e0ed      	b.n	8003c4e <irdTask+0x3b6>
					case key_left:
						seek_up = 0;
 8003a72:	4b47      	ldr	r3, [pc, #284]	; (8003b90 <irdTask+0x2f8>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	701a      	strb	r2, [r3, #0]
						ird = evt_List;
 8003a78:	2310      	movs	r3, #16
 8003a7a:	60fb      	str	r3, [r7, #12]
					break;
 8003a7c:	e0ee      	b.n	8003c5c <irdTask+0x3c4>
					case key_right:
						seek_up = 1;
 8003a7e:	4b44      	ldr	r3, [pc, #272]	; (8003b90 <irdTask+0x2f8>)
 8003a80:	2201      	movs	r2, #1
 8003a82:	701a      	strb	r2, [r3, #0]
						ird = evt_List;
 8003a84:	2310      	movs	r3, #16
 8003a86:	60fb      	str	r3, [r7, #12]
					break;
 8003a88:	e0e8      	b.n	8003c5c <irdTask+0x3c4>
					case key_eq:// enable/disable print via uart
						ird = evt_Mute;//evt_Sleep);
 8003a8a:	230e      	movs	r3, #14
 8003a8c:	60fb      	str	r3, [r7, #12]
					break;
 8003a8e:	e0e5      	b.n	8003c5c <irdTask+0x3c4>
					case key_sp:
						if (!ep_start) {
 8003a90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a94:	f083 0301 	eor.w	r3, r3, #1
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d038      	beq.n	8003b10 <irdTask+0x278>
							ep_start = true;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
							memset(ep_str, 0, sizeof(ep_str));
 8003aa4:	f107 0310 	add.w	r3, r7, #16
 8003aa8:	2210      	movs	r2, #16
 8003aaa:	2100      	movs	r1, #0
 8003aac:	4618      	mov	r0, r3
 8003aae:	f00f fa36 	bl	8012f1e <memset>
							ST7565_DrawFilledRectangle(0, SCREEN_HEIGHT - lfnt->FontHeight, SCREEN_WIDTH - 1, lfnt->FontHeight, PIX_OFF);
 8003ab2:	4b3a      	ldr	r3, [pc, #232]	; (8003b9c <irdTask+0x304>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	785b      	ldrb	r3, [r3, #1]
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	b219      	sxth	r1, r3
 8003ac2:	4b36      	ldr	r3, [pc, #216]	; (8003b9c <irdTask+0x304>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	785b      	ldrb	r3, [r3, #1]
 8003ac8:	b21b      	sxth	r3, r3
 8003aca:	2200      	movs	r2, #0
 8003acc:	9200      	str	r2, [sp, #0]
 8003ace:	227f      	movs	r2, #127	; 0x7f
 8003ad0:	2000      	movs	r0, #0
 8003ad2:	f7fe f9a8 	bl	8001e26 <ST7565_DrawFilledRectangle>
							sprintf(tmp, "Time:");
 8003ad6:	4932      	ldr	r1, [pc, #200]	; (8003ba0 <irdTask+0x308>)
 8003ad8:	4832      	ldr	r0, [pc, #200]	; (8003ba4 <irdTask+0x30c>)
 8003ada:	f00f ffa1 	bl	8013a20 <siprintf>
							ST7565_Print(0, SCREEN_HEIGHT - lfnt->FontHeight, tmp, lfnt, 1, PIX_ON);//печатаем надпись с указаным шрифтом и цветом(PIX_ON-белый, PIX_OFF-черный)
 8003ade:	4b2f      	ldr	r3, [pc, #188]	; (8003b9c <irdTask+0x304>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	785b      	ldrb	r3, [r3, #1]
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	b219      	sxth	r1, r3
 8003aee:	4b2b      	ldr	r3, [pc, #172]	; (8003b9c <irdTask+0x304>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2201      	movs	r2, #1
 8003af4:	9201      	str	r2, [sp, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	9200      	str	r2, [sp, #0]
 8003afa:	4a2a      	ldr	r2, [pc, #168]	; (8003ba4 <irdTask+0x30c>)
 8003afc:	2000      	movs	r0, #0
 8003afe:	f7fd ff39 	bl	8001974 <ST7565_Print>
							ST7565_Update();
 8003b02:	f7fd fd87 	bl	8001614 <ST7565_Update>
							ep_tmr = get_tmr(20);
 8003b06:	2014      	movs	r0, #20
 8003b08:	f7ff f97e 	bl	8002e08 <get_tmr>
 8003b0c:	62b8      	str	r0, [r7, #40]	; 0x28
							ep_start = false;
							ep_tmr = 0;
							epoch = atoi(ep_str);
							ird = evt_Epoch;
						}
					break;
 8003b0e:	e0a5      	b.n	8003c5c <irdTask+0x3c4>
							ep_start = false;
 8003b10:	2300      	movs	r3, #0
 8003b12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
							ep_tmr = 0;
 8003b16:	2300      	movs	r3, #0
 8003b18:	62bb      	str	r3, [r7, #40]	; 0x28
							epoch = atoi(ep_str);
 8003b1a:	f107 0310 	add.w	r3, r7, #16
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f00f f817 	bl	8012b52 <atoi>
 8003b24:	4603      	mov	r3, r0
 8003b26:	461a      	mov	r2, r3
 8003b28:	4b1f      	ldr	r3, [pc, #124]	; (8003ba8 <irdTask+0x310>)
 8003b2a:	601a      	str	r2, [r3, #0]
							ird = evt_Epoch;
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	60fb      	str	r3, [r7, #12]
					break;
 8003b30:	e094      	b.n	8003c5c <irdTask+0x3c4>
					case key_100://bandUp();
						if (Band < MAX_BAND) {
 8003b32:	4b1e      	ldr	r3, [pc, #120]	; (8003bac <irdTask+0x314>)
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	2b03      	cmp	r3, #3
 8003b38:	f200 808b 	bhi.w	8003c52 <irdTask+0x3ba>
							newBand = Band + 1;
 8003b3c:	4b1b      	ldr	r3, [pc, #108]	; (8003bac <irdTask+0x314>)
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	3301      	adds	r3, #1
 8003b42:	b2da      	uxtb	r2, r3
 8003b44:	4b1a      	ldr	r3, [pc, #104]	; (8003bb0 <irdTask+0x318>)
 8003b46:	701a      	strb	r2, [r3, #0]
							ird = evt_Band;
 8003b48:	2311      	movs	r3, #17
 8003b4a:	60fb      	str	r3, [r7, #12]
						}
					break;
 8003b4c:	e081      	b.n	8003c52 <irdTask+0x3ba>
					case key_200://bandDown();
						if (Band) {
 8003b4e:	4b17      	ldr	r3, [pc, #92]	; (8003bac <irdTask+0x314>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d07f      	beq.n	8003c56 <irdTask+0x3be>
							newBand = Band - 1;
 8003b56:	4b15      	ldr	r3, [pc, #84]	; (8003bac <irdTask+0x314>)
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	4b14      	ldr	r3, [pc, #80]	; (8003bb0 <irdTask+0x318>)
 8003b60:	701a      	strb	r2, [r3, #0]
							ird = evt_Band;
 8003b62:	2311      	movs	r3, #17
 8003b64:	60fb      	str	r3, [r7, #12]
						}
					break;
 8003b66:	e076      	b.n	8003c56 <irdTask+0x3be>
 8003b68:	2000012d 	.word	0x2000012d
 8003b6c:	2000057c 	.word	0x2000057c
 8003b70:	48000800 	.word	0x48000800
 8003b74:	08018bf4 	.word	0x08018bf4
 8003b78:	20003304 	.word	0x20003304
 8003b7c:	2000012c 	.word	0x2000012c
 8003b80:	080176c8 	.word	0x080176c8
 8003b84:	080176d4 	.word	0x080176d4
 8003b88:	20001f17 	.word	0x20001f17
 8003b8c:	080176e0 	.word	0x080176e0
 8003b90:	2000010e 	.word	0x2000010e
 8003b94:	2000010f 	.word	0x2000010f
 8003b98:	20000110 	.word	0x20000110
 8003b9c:	20002f40 	.word	0x20002f40
 8003ba0:	080176f0 	.word	0x080176f0
 8003ba4:	20001280 	.word	0x20001280
 8003ba8:	2000001c 	.word	0x2000001c
 8003bac:	2000010c 	.word	0x2000010c
 8003bb0:	2000010d 	.word	0x2000010d
					case key_5:
					case key_6:
					case key_7:
					case key_8:
					case key_9:
						if (ep_start) {
 8003bb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d035      	beq.n	8003c28 <irdTask+0x390>
							if (strlen(ep_str) < 10) {
 8003bbc:	f107 0310 	add.w	r3, r7, #16
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7fc fb05 	bl	80001d0 <strlen>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b09      	cmp	r3, #9
 8003bca:	d846      	bhi.n	8003c5a <irdTask+0x3c2>
								char ch = (kid - key_0) + 0x30;
 8003bcc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bd0:	3325      	adds	r3, #37	; 0x25
 8003bd2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
								sprintf(ep_str+strlen(ep_str), "%c", ch);
 8003bd6:	f107 0310 	add.w	r3, r7, #16
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7fc faf8 	bl	80001d0 <strlen>
 8003be0:	4602      	mov	r2, r0
 8003be2:	f107 0310 	add.w	r3, r7, #16
 8003be6:	4413      	add	r3, r2
 8003be8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8003bec:	4941      	ldr	r1, [pc, #260]	; (8003cf4 <irdTask+0x45c>)
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f00f ff16 	bl	8013a20 <siprintf>
								ST7565_Print(32, SCREEN_HEIGHT - lfnt->FontHeight, ep_str, lfnt, 1, PIX_ON);//печатаем надпись с указаным шрифтом и цветом(PIX_ON-белый, PIX_OFF-черный)
 8003bf4:	4b40      	ldr	r3, [pc, #256]	; (8003cf8 <irdTask+0x460>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	785b      	ldrb	r3, [r3, #1]
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	b219      	sxth	r1, r3
 8003c04:	4b3c      	ldr	r3, [pc, #240]	; (8003cf8 <irdTask+0x460>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f107 0210 	add.w	r2, r7, #16
 8003c0c:	2001      	movs	r0, #1
 8003c0e:	9001      	str	r0, [sp, #4]
 8003c10:	2001      	movs	r0, #1
 8003c12:	9000      	str	r0, [sp, #0]
 8003c14:	2020      	movs	r0, #32
 8003c16:	f7fd fead 	bl	8001974 <ST7565_Print>
								ST7565_Update();
 8003c1a:	f7fd fcfb 	bl	8001614 <ST7565_Update>
								ep_tmr = get_tmr(20);
 8003c1e:	2014      	movs	r0, #20
 8003c20:	f7ff f8f2 	bl	8002e08 <get_tmr>
 8003c24:	62b8      	str	r0, [r7, #40]	; 0x28
							}
						} else {
							newFreq = list[kid - key_0 + 2].freq;//for band=2 only !!!
							ird = evt_Freq;
						}
					break;
 8003c26:	e018      	b.n	8003c5a <irdTask+0x3c2>
							newFreq = list[kid - key_0 + 2].freq;//for band=2 only !!!
 8003c28:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8003c2c:	f1a3 0209 	sub.w	r2, r3, #9
 8003c30:	4932      	ldr	r1, [pc, #200]	; (8003cfc <irdTask+0x464>)
 8003c32:	4613      	mov	r3, r2
 8003c34:	00db      	lsls	r3, r3, #3
 8003c36:	4413      	add	r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	440b      	add	r3, r1
 8003c3c:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8003c40:	4a2f      	ldr	r2, [pc, #188]	; (8003d00 <irdTask+0x468>)
 8003c42:	6013      	str	r3, [r2, #0]
							ird = evt_Freq;
 8003c44:	230c      	movs	r3, #12
 8003c46:	60fb      	str	r3, [r7, #12]
					break;
 8003c48:	e007      	b.n	8003c5a <irdTask+0x3c2>
					break;
 8003c4a:	bf00      	nop
 8003c4c:	e006      	b.n	8003c5c <irdTask+0x3c4>
					break;
 8003c4e:	bf00      	nop
 8003c50:	e004      	b.n	8003c5c <irdTask+0x3c4>
					break;
 8003c52:	bf00      	nop
 8003c54:	e002      	b.n	8003c5c <irdTask+0x3c4>
					break;
 8003c56:	bf00      	nop
 8003c58:	e000      	b.n	8003c5c <irdTask+0x3c4>
					break;
 8003c5a:	bf00      	nop
				}//switch (kid)
				if (ird != evt_None) {
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c62:	d011      	beq.n	8003c88 <irdTask+0x3f0>
					if (osMessageQueuePut(evtQueHandle, (const void *)&ird, 0, 0) != osOK) devError |= devEVT;
 8003c64:	4b27      	ldr	r3, [pc, #156]	; (8003d04 <irdTask+0x46c>)
 8003c66:	6818      	ldr	r0, [r3, #0]
 8003c68:	f107 010c 	add.w	r1, r7, #12
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f00b fd2e 	bl	800f6d0 <osMessageQueuePut>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d006      	beq.n	8003c88 <irdTask+0x3f0>
 8003c7a:	4b23      	ldr	r3, [pc, #140]	; (8003d08 <irdTask+0x470>)
 8003c7c:	881b      	ldrh	r3, [r3, #0]
 8003c7e:	f043 0310 	orr.w	r3, r3, #16
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	4b20      	ldr	r3, [pc, #128]	; (8003d08 <irdTask+0x470>)
 8003c86:	801a      	strh	r2, [r3, #0]
				}
			}//if (kid != -1)
		}//if (decodeIRED(&results))
	}

	if (ep_tmr) {
 8003c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00a      	beq.n	8003ca4 <irdTask+0x40c>
		if (check_tmr(ep_tmr)) {
 8003c8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c90:	f7ff f8c7 	bl	8002e22 <check_tmr>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d004      	beq.n	8003ca4 <irdTask+0x40c>
			ep_tmr = 0;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	62bb      	str	r3, [r7, #40]	; 0x28
			ep_start = false;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
	}
	if (tmr_ired) {
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d014      	beq.n	8003cd4 <irdTask+0x43c>
		if (check_mstmr(tmr_ired)) {
 8003caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cac:	2200      	movs	r2, #0
 8003cae:	461c      	mov	r4, r3
 8003cb0:	4615      	mov	r5, r2
 8003cb2:	4620      	mov	r0, r4
 8003cb4:	4629      	mov	r1, r5
 8003cb6:	f7ff f8d8 	bl	8002e6a <check_mstmr>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d009      	beq.n	8003cd4 <irdTask+0x43c>
			tmr_ired = 0;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	627b      	str	r3, [r7, #36]	; 0x24
			resumeIRED();
 8003cc4:	f7fd fa36 	bl	8001134 <resumeIRED>
			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003cce:	480f      	ldr	r0, [pc, #60]	; (8003d0c <irdTask+0x474>)
 8003cd0:	f004 f996 	bl	8008000 <HAL_GPIO_WritePin>
  while (!restart) {
 8003cd4:	4b0e      	ldr	r3, [pc, #56]	; (8003d10 <irdTask+0x478>)
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f43f adf5 	beq.w	80038ca <irdTask+0x32>
		}
	}

  }//while

  ird_exit = true;
 8003ce0:	4b0c      	ldr	r3, [pc, #48]	; (8003d14 <irdTask+0x47c>)
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	701a      	strb	r2, [r3, #0]

  vTaskDelete(NULL);//osThreadExit();
 8003ce6:	2000      	movs	r0, #0
 8003ce8:	f00d f8ba 	bl	8010e60 <vTaskDelete>

#endif
}
 8003cec:	bf00      	nop
 8003cee:	3730      	adds	r7, #48	; 0x30
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bdb0      	pop	{r4, r5, r7, pc}
 8003cf4:	080176f8 	.word	0x080176f8
 8003cf8:	20002f40 	.word	0x20002f40
 8003cfc:	20002f58 	.word	0x20002f58
 8003d00:	20000108 	.word	0x20000108
 8003d04:	20000e6c 	.word	0x20000e6c
 8003d08:	20001b00 	.word	0x20001b00
 8003d0c:	48000800 	.word	0x48000800
 8003d10:	20001f14 	.word	0x20001f14
 8003d14:	2000012d 	.word	0x2000012d

08003d18 <StartTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask */
void StartTask(void *argument)
{
 8003d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d1c:	b0ca      	sub	sp, #296	; 0x128
 8003d1e:	af08      	add	r7, sp, #32
 8003d20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003d28:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */


    Report(1, "[que:%u] Start application ver.%s\r\n", getQueCount(evtQueHandle), ver);
 8003d2a:	4b47      	ldr	r3, [pc, #284]	; (8003e48 <StartTask+0x130>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fe fe92 	bl	8002a58 <getQueCount>
 8003d34:	4602      	mov	r2, r0
 8003d36:	4b45      	ldr	r3, [pc, #276]	; (8003e4c <StartTask+0x134>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4945      	ldr	r1, [pc, #276]	; (8003e50 <StartTask+0x138>)
 8003d3c:	2001      	movs	r0, #1
 8003d3e:	f7ff f9a3 	bl	8003088 <Report>

    uint16_t lastErr = devOK;
 8003d42:	2300      	movs	r3, #0
 8003d44:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
    int evt;
    rec_evt_t evts = {cmdNone, 0};
 8003d48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d4c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d50:	2300      	movs	r3, #0
 8003d52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

#ifdef SET_W25FLASH
    chipPresent = W25qxx_Init();
 8003d56:	f002 ff55 	bl	8006c04 <W25qxx_Init>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	4b3d      	ldr	r3, [pc, #244]	; (8003e54 <StartTask+0x13c>)
 8003d60:	701a      	strb	r2, [r3, #0]
    uint32_t cid = W25qxx_getChipID();
 8003d62:	f003 f809 	bl	8006d78 <W25qxx_getChipID>
 8003d66:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
    if ( chipPresent && ((cid >= W25Q10) && (cid <= W25Q128)) ) validChipID = true;
 8003d6a:	4b3a      	ldr	r3, [pc, #232]	; (8003e54 <StartTask+0x13c>)
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00a      	beq.n	8003d88 <StartTask+0x70>
 8003d72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d006      	beq.n	8003d88 <StartTask+0x70>
 8003d7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d7e:	2b08      	cmp	r3, #8
 8003d80:	d802      	bhi.n	8003d88 <StartTask+0x70>
 8003d82:	4b35      	ldr	r3, [pc, #212]	; (8003e58 <StartTask+0x140>)
 8003d84:	2201      	movs	r2, #1
 8003d86:	701a      	strb	r2, [r3, #0]
    list_sector = W25qxx_getPageSize() << 1;
 8003d88:	f003 f81a 	bl	8006dc0 <W25qxx_getPageSize>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	461a      	mov	r2, r3
 8003d92:	4b32      	ldr	r3, [pc, #200]	; (8003e5c <StartTask+0x144>)
 8003d94:	601a      	str	r2, [r3, #0]
    //
    listSize = sizeof(rec_t) * MAX_LIST;
 8003d96:	4b32      	ldr	r3, [pc, #200]	; (8003e60 <StartTask+0x148>)
 8003d98:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8003d9c:	801a      	strh	r2, [r3, #0]
    memset((uint8_t *)&list[0].band, 0, listSize);
 8003d9e:	4b30      	ldr	r3, [pc, #192]	; (8003e60 <StartTask+0x148>)
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	461a      	mov	r2, r3
 8003da4:	2100      	movs	r1, #0
 8003da6:	482f      	ldr	r0, [pc, #188]	; (8003e64 <StartTask+0x14c>)
 8003da8:	f00f f8b9 	bl	8012f1e <memset>
    //
    cfgSector = W25qxx_getSectorCount() - 1;
 8003dac:	f002 fff0 	bl	8006d90 <W25qxx_getSectorCount>
 8003db0:	4603      	mov	r3, r0
 8003db2:	3b01      	subs	r3, #1
 8003db4:	4a2c      	ldr	r2, [pc, #176]	; (8003e68 <StartTask+0x150>)
 8003db6:	6013      	str	r3, [r2, #0]
    if (W25qxx_IsEmptySector(cfgSector, 0, listSize)) {//sector is empty -> need write data to sector
 8003db8:	4b2b      	ldr	r3, [pc, #172]	; (8003e68 <StartTask+0x150>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a28      	ldr	r2, [pc, #160]	; (8003e60 <StartTask+0x148>)
 8003dbe:	8812      	ldrh	r2, [r2, #0]
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f003 f866 	bl	8006e94 <W25qxx_IsEmptySector>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d016      	beq.n	8003dfc <StartTask+0xe4>
    	if (!(devError & devSPI)) {
 8003dce:	4b27      	ldr	r3, [pc, #156]	; (8003e6c <StartTask+0x154>)
 8003dd0:	881b      	ldrh	r3, [r3, #0]
 8003dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d110      	bne.n	8003dfc <StartTask+0xe4>
    		W25qxx_WriteSector((uint8_t *)&def_list[0].band, cfgSector, 0, listSize);
 8003dda:	4b23      	ldr	r3, [pc, #140]	; (8003e68 <StartTask+0x150>)
 8003ddc:	6819      	ldr	r1, [r3, #0]
 8003dde:	4b20      	ldr	r3, [pc, #128]	; (8003e60 <StartTask+0x148>)
 8003de0:	881b      	ldrh	r3, [r3, #0]
 8003de2:	2200      	movs	r2, #0
 8003de4:	4822      	ldr	r0, [pc, #136]	; (8003e70 <StartTask+0x158>)
 8003de6:	f003 f9c9 	bl	800717c <W25qxx_WriteSector>
    		Report(1, "Writen cfg_stations_data (%lu bytes) to cfgSector #%lu\r\n", listSize, cfgSector);
 8003dea:	4b1d      	ldr	r3, [pc, #116]	; (8003e60 <StartTask+0x148>)
 8003dec:	881b      	ldrh	r3, [r3, #0]
 8003dee:	461a      	mov	r2, r3
 8003df0:	4b1d      	ldr	r3, [pc, #116]	; (8003e68 <StartTask+0x150>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	491f      	ldr	r1, [pc, #124]	; (8003e74 <StartTask+0x15c>)
 8003df6:	2001      	movs	r0, #1
 8003df8:	f7ff f946 	bl	8003088 <Report>
      	}
    }
    if (!W25qxx_IsEmptySector(cfgSector, 0, listSize)) {//in sector	present any data
 8003dfc:	4b1a      	ldr	r3, [pc, #104]	; (8003e68 <StartTask+0x150>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a17      	ldr	r2, [pc, #92]	; (8003e60 <StartTask+0x148>)
 8003e02:	8812      	ldrh	r2, [r2, #0]
 8003e04:	2100      	movs	r1, #0
 8003e06:	4618      	mov	r0, r3
 8003e08:	f003 f844 	bl	8006e94 <W25qxx_IsEmptySector>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	f083 0301 	eor.w	r3, r3, #1
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d038      	beq.n	8003e8a <StartTask+0x172>
    	if (!(devError & devSPI)) {
 8003e18:	4b14      	ldr	r3, [pc, #80]	; (8003e6c <StartTask+0x154>)
 8003e1a:	881b      	ldrh	r3, [r3, #0]
 8003e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d12b      	bne.n	8003e7c <StartTask+0x164>
    		W25qxx_ReadSector((uint8_t *)&list[0].band, cfgSector, 0, listSize);
 8003e24:	4b10      	ldr	r3, [pc, #64]	; (8003e68 <StartTask+0x150>)
 8003e26:	6819      	ldr	r1, [r3, #0]
 8003e28:	4b0d      	ldr	r3, [pc, #52]	; (8003e60 <StartTask+0x148>)
 8003e2a:	881b      	ldrh	r3, [r3, #0]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	480d      	ldr	r0, [pc, #52]	; (8003e64 <StartTask+0x14c>)
 8003e30:	f003 facc 	bl	80073cc <W25qxx_ReadSector>
    		Report(1, "Readed cfg_stations_data (%lu bytes) from cfgSector #%lu\r\n", listSize, cfgSector);
 8003e34:	4b0a      	ldr	r3, [pc, #40]	; (8003e60 <StartTask+0x148>)
 8003e36:	881b      	ldrh	r3, [r3, #0]
 8003e38:	461a      	mov	r2, r3
 8003e3a:	4b0b      	ldr	r3, [pc, #44]	; (8003e68 <StartTask+0x150>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	490e      	ldr	r1, [pc, #56]	; (8003e78 <StartTask+0x160>)
 8003e40:	2001      	movs	r0, #1
 8003e42:	f7ff f921 	bl	8003088 <Report>
 8003e46:	e020      	b.n	8003e8a <StartTask+0x172>
 8003e48:	20000e6c 	.word	0x20000e6c
 8003e4c:	20000004 	.word	0x20000004
 8003e50:	080176fc 	.word	0x080176fc
 8003e54:	20002f2c 	.word	0x20002f2c
 8003e58:	20002f2d 	.word	0x20002f2d
 8003e5c:	20001f20 	.word	0x20001f20
 8003e60:	20003300 	.word	0x20003300
 8003e64:	20002f58 	.word	0x20002f58
 8003e68:	20002f38 	.word	0x20002f38
 8003e6c:	20001b00 	.word	0x20001b00
 8003e70:	0801884c 	.word	0x0801884c
 8003e74:	08017720 	.word	0x08017720
 8003e78:	0801775c 	.word	0x0801775c
    	} else {
    		memcpy((uint8_t *)&list[0].band, (uint8_t *)&def_list[0].band, listSize);
 8003e7c:	4ba9      	ldr	r3, [pc, #676]	; (8004124 <StartTask+0x40c>)
 8003e7e:	881b      	ldrh	r3, [r3, #0]
 8003e80:	461a      	mov	r2, r3
 8003e82:	49a9      	ldr	r1, [pc, #676]	; (8004128 <StartTask+0x410>)
 8003e84:	48a9      	ldr	r0, [pc, #676]	; (800412c <StartTask+0x414>)
 8003e86:	f00f f83c 	bl	8012f02 <memcpy>
    	}
    }
#endif


rdaID = rda5807_init(&Freq);
 8003e8a:	48a9      	ldr	r0, [pc, #676]	; (8004130 <StartTask+0x418>)
 8003e8c:	f001 fb96 	bl	80055bc <rda5807_init>
 8003e90:	4603      	mov	r3, r0
 8003e92:	461a      	mov	r2, r3
 8003e94:	4ba7      	ldr	r3, [pc, #668]	; (8004134 <StartTask+0x41c>)
 8003e96:	701a      	strb	r2, [r3, #0]
RSSI = rda5807_rssi();
 8003e98:	f001 fbfe 	bl	8005698 <rda5807_rssi>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	4ba5      	ldr	r3, [pc, #660]	; (8004138 <StartTask+0x420>)
 8003ea2:	801a      	strh	r2, [r3, #0]
rda5807_SetVolume(Volume);
 8003ea4:	4ba5      	ldr	r3, [pc, #660]	; (800413c <StartTask+0x424>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f001 fdd5 	bl	8005a58 <rda5807_SetVolume>
rda5807_SetBassBoost(BassBoost);
 8003eae:	4ba4      	ldr	r3, [pc, #656]	; (8004140 <StartTask+0x428>)
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f001 fe18 	bl	8005ae8 <rda5807_SetBassBoost>
stereo = rda5807_Get_StereoMonoFlag();
 8003eb8:	f001 ff2c 	bl	8005d14 <rda5807_Get_StereoMonoFlag>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	4ba0      	ldr	r3, [pc, #640]	; (8004144 <StartTask+0x42c>)
 8003ec2:	701a      	strb	r2, [r3, #0]
Chan = rda5807_Get_Channel();
 8003ec4:	f001 ff3e 	bl	8005d44 <rda5807_Get_Channel>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	461a      	mov	r2, r3
 8003ecc:	4b9e      	ldr	r3, [pc, #632]	; (8004148 <StartTask+0x430>)
 8003ece:	801a      	strh	r2, [r3, #0]


#ifdef SET_DISPLAY

	#ifdef FONT_6x8
  		FontDef_t Font_6x8 = { 6, 8, Font6x8 };
 8003ed0:	4a9e      	ldr	r2, [pc, #632]	; (800414c <StartTask+0x434>)
 8003ed2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003ed6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003eda:	6018      	str	r0, [r3, #0]
 8003edc:	3304      	adds	r3, #4
 8003ede:	8019      	strh	r1, [r3, #0]
  		lfnt = &Font_6x8;
 8003ee0:	4a9b      	ldr	r2, [pc, #620]	; (8004150 <StartTask+0x438>)
 8003ee2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003ee6:	6013      	str	r3, [r2, #0]
	#endif

  	uint16_t lin1 = 1;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
  	uint16_t lin2 = lin1 + Font_6x8.FontHeight;//chipID...
 8003eee:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 8003ef8:	4413      	add	r3, r2
 8003efa:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
  	uint16_t lin3 = lin2 + Font_6x8.FontHeight + 1;//Band...
 8003efe:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 8003f08:	4413      	add	r3, r2
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
  	uint16_t lin4 = lin3 + Font_6x8.FontHeight + 1;//Volume...//Freq...
 8003f12:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 8003f1c:	4413      	add	r3, r2
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	3301      	adds	r3, #1
 8003f22:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
  	uint16_t lin5 = lin4 + Font_6x8.FontHeight + 1;//Freq...//Volume...
 8003f26:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8003f30:	4413      	add	r3, r2
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	3301      	adds	r3, #1
 8003f36:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
  	uint16_t lin6 = lin5 + Font_6x8.FontHeight + 1;//Station
 8003f3a:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8003f44:	4413      	add	r3, r2
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	3301      	adds	r3, #1
 8003f4a:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
  	char st[64];
  	char sta[32];
  	char stb[32];

  	ST7565_Reset();
 8003f4e:	f7fd f9af 	bl	80012b0 <ST7565_Reset>
  	ST7565_Init();
 8003f52:	f7fd fac7 	bl	80014e4 <ST7565_Init>

    int dl = sprintf(tmp, "Ver.%s", ver);
 8003f56:	4b7f      	ldr	r3, [pc, #508]	; (8004154 <StartTask+0x43c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	497e      	ldr	r1, [pc, #504]	; (8004158 <StartTask+0x440>)
 8003f5e:	487f      	ldr	r0, [pc, #508]	; (800415c <StartTask+0x444>)
 8003f60:	f00f fd5e 	bl	8013a20 <siprintf>
 8003f64:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
    uint16_t x = ((SCREEN_WIDTH - (lfnt->FontWidth * dl)) >> 1) & 0x7f;
 8003f68:	4b79      	ldr	r3, [pc, #484]	; (8004150 <StartTask+0x438>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003f74:	fb02 f303 	mul.w	r3, r2, r3
 8003f78:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8003f7c:	105b      	asrs	r3, r3, #1
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f84:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
    ST7565_Print(x, SCREEN_HEIGHT - lfnt->FontHeight, tmp, lfnt, 1, PIX_ON);//печатаем надпись с указаным шрифтом и цветом(PIX_ON-белый, PIX_OFF-черный)
 8003f88:	f9b7 00d2 	ldrsh.w	r0, [r7, #210]	; 0xd2
 8003f8c:	4b70      	ldr	r3, [pc, #448]	; (8004150 <StartTask+0x438>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	785b      	ldrb	r3, [r3, #1]
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	b219      	sxth	r1, r3
 8003f9c:	4b6c      	ldr	r3, [pc, #432]	; (8004150 <StartTask+0x438>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	9201      	str	r2, [sp, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	9200      	str	r2, [sp, #0]
 8003fa8:	4a6c      	ldr	r2, [pc, #432]	; (800415c <StartTask+0x444>)
 8003faa:	f7fd fce3 	bl	8001974 <ST7565_Print>

    int il = sprintf(st, "RDA5807 chipID:0x%x", rdaID);
 8003fae:	4b61      	ldr	r3, [pc, #388]	; (8004134 <StartTask+0x41c>)
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003fb8:	4969      	ldr	r1, [pc, #420]	; (8004160 <StartTask+0x448>)
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f00f fd30 	bl	8013a20 <siprintf>
 8003fc0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    uint16_t xf = ((SCREEN_WIDTH - (lfnt->FontWidth * il)) >> 1) & 0x7f;
 8003fc4:	4b62      	ldr	r3, [pc, #392]	; (8004150 <StartTask+0x438>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fd0:	fb02 f303 	mul.w	r3, r2, r3
 8003fd4:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8003fd8:	105b      	asrs	r3, r3, #1
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fe0:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
    if (!xf) xf = 1;
 8003fe4:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d102      	bne.n	8003ff2 <StartTask+0x2da>
 8003fec:	2301      	movs	r3, #1
 8003fee:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
    ST7565_Print(xf, lin2, st, lfnt, 1, PIX_ON);
 8003ff2:	f9b7 00fa 	ldrsh.w	r0, [r7, #250]	; 0xfa
 8003ff6:	f9b7 10dc 	ldrsh.w	r1, [r7, #220]	; 0xdc
 8003ffa:	4b55      	ldr	r3, [pc, #340]	; (8004150 <StartTask+0x438>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8004002:	2401      	movs	r4, #1
 8004004:	9401      	str	r4, [sp, #4]
 8004006:	2401      	movs	r4, #1
 8004008:	9400      	str	r4, [sp, #0]
 800400a:	f7fd fcb3 	bl	8001974 <ST7565_Print>

    int it = sprintf(stb, "FM Band:%s", allBands[Band]);//(uint16_t)lBand, (uint16_t)rBand);
 800400e:	4b55      	ldr	r3, [pc, #340]	; (8004164 <StartTask+0x44c>)
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	461a      	mov	r2, r3
 8004014:	4b54      	ldr	r3, [pc, #336]	; (8004168 <StartTask+0x450>)
 8004016:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800401a:	f107 0318 	add.w	r3, r7, #24
 800401e:	4953      	ldr	r1, [pc, #332]	; (800416c <StartTask+0x454>)
 8004020:	4618      	mov	r0, r3
 8004022:	f00f fcfd 	bl	8013a20 <siprintf>
 8004026:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    int lit = it;
 800402a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800402e:	617b      	str	r3, [r7, #20]
    xf = ((SCREEN_WIDTH - (lfnt->FontWidth * it)) >> 1) & 0x7f;
 8004030:	4b47      	ldr	r3, [pc, #284]	; (8004150 <StartTask+0x438>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	461a      	mov	r2, r3
 8004038:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800403c:	fb02 f303 	mul.w	r3, r2, r3
 8004040:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8004044:	105b      	asrs	r3, r3, #1
 8004046:	b29b      	uxth	r3, r3
 8004048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800404c:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
    if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 8004050:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 8004054:	2b00      	cmp	r3, #0
 8004056:	d003      	beq.n	8004060 <StartTask+0x348>
 8004058:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 800405c:	2b7d      	cmp	r3, #125	; 0x7d
 800405e:	d902      	bls.n	8004066 <StartTask+0x34e>
 8004060:	2301      	movs	r3, #1
 8004062:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
    ST7565_Print(xf, lin3, stb, lfnt, 1, PIX_ON);
 8004066:	f9b7 00fa 	ldrsh.w	r0, [r7, #250]	; 0xfa
 800406a:	f9b7 10da 	ldrsh.w	r1, [r7, #218]	; 0xda
 800406e:	4b38      	ldr	r3, [pc, #224]	; (8004150 <StartTask+0x438>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f107 0218 	add.w	r2, r7, #24
 8004076:	2401      	movs	r4, #1
 8004078:	9401      	str	r4, [sp, #4]
 800407a:	2401      	movs	r4, #1
 800407c:	9400      	str	r4, [sp, #0]
 800407e:	f7fd fc79 	bl	8001974 <ST7565_Print>

    int im = sprintf(st, "Bass:%u Vol:%u", BassBoost, Volume);
 8004082:	4b2f      	ldr	r3, [pc, #188]	; (8004140 <StartTask+0x428>)
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	461a      	mov	r2, r3
 8004088:	4b2c      	ldr	r3, [pc, #176]	; (800413c <StartTask+0x424>)
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8004090:	4937      	ldr	r1, [pc, #220]	; (8004170 <StartTask+0x458>)
 8004092:	f00f fcc5 	bl	8013a20 <siprintf>
 8004096:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    int lim = im;
 800409a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800409e:	613b      	str	r3, [r7, #16]
    xf = ((SCREEN_WIDTH - (lfnt->FontWidth * im)) >> 1) & 0x7f;
 80040a0:	4b2b      	ldr	r3, [pc, #172]	; (8004150 <StartTask+0x438>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	461a      	mov	r2, r3
 80040a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80040ac:	fb02 f303 	mul.w	r3, r2, r3
 80040b0:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80040b4:	105b      	asrs	r3, r3, #1
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040bc:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
    if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 80040c0:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d003      	beq.n	80040d0 <StartTask+0x3b8>
 80040c8:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 80040cc:	2b7d      	cmp	r3, #125	; 0x7d
 80040ce:	d902      	bls.n	80040d6 <StartTask+0x3be>
 80040d0:	2301      	movs	r3, #1
 80040d2:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
    ST7565_Print(xf, lin4, st, lfnt, 1, PIX_ON);
 80040d6:	f9b7 00fa 	ldrsh.w	r0, [r7, #250]	; 0xfa
 80040da:	f9b7 10d8 	ldrsh.w	r1, [r7, #216]	; 0xd8
 80040de:	4b1c      	ldr	r3, [pc, #112]	; (8004150 <StartTask+0x438>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80040e6:	2401      	movs	r4, #1
 80040e8:	9401      	str	r4, [sp, #4]
 80040ea:	2401      	movs	r4, #1
 80040ec:	9400      	str	r4, [sp, #0]
 80040ee:	f7fd fc41 	bl	8001974 <ST7565_Print>

    if (stereo)
 80040f2:	4b14      	ldr	r3, [pc, #80]	; (8004144 <StartTask+0x42c>)
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d03e      	beq.n	8004178 <StartTask+0x460>
    	il = sprintf(st, "Rssi:%u Freq:%.1f S", RSSI, Freq);
 80040fa:	4b0f      	ldr	r3, [pc, #60]	; (8004138 <StartTask+0x420>)
 80040fc:	881b      	ldrh	r3, [r3, #0]
 80040fe:	461c      	mov	r4, r3
 8004100:	4b0b      	ldr	r3, [pc, #44]	; (8004130 <StartTask+0x418>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4618      	mov	r0, r3
 8004106:	f7fc fa1f 	bl	8000548 <__aeabi_f2d>
 800410a:	4602      	mov	r2, r0
 800410c:	460b      	mov	r3, r1
 800410e:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8004112:	e9cd 2300 	strd	r2, r3, [sp]
 8004116:	4622      	mov	r2, r4
 8004118:	4916      	ldr	r1, [pc, #88]	; (8004174 <StartTask+0x45c>)
 800411a:	f00f fc81 	bl	8013a20 <siprintf>
 800411e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004122:	e03d      	b.n	80041a0 <StartTask+0x488>
 8004124:	20003300 	.word	0x20003300
 8004128:	0801884c 	.word	0x0801884c
 800412c:	20002f58 	.word	0x20002f58
 8004130:	20000104 	.word	0x20000104
 8004134:	20002f50 	.word	0x20002f50
 8004138:	20002f4e 	.word	0x20002f4e
 800413c:	2000010f 	.word	0x2000010f
 8004140:	20002f52 	.word	0x20002f52
 8004144:	20002f54 	.word	0x20002f54
 8004148:	20002f4c 	.word	0x20002f4c
 800414c:	08017bdc 	.word	0x08017bdc
 8004150:	20002f40 	.word	0x20002f40
 8004154:	20000004 	.word	0x20000004
 8004158:	08017798 	.word	0x08017798
 800415c:	20001280 	.word	0x20001280
 8004160:	080177a0 	.word	0x080177a0
 8004164:	2000010c 	.word	0x2000010c
 8004168:	20000118 	.word	0x20000118
 800416c:	080177b4 	.word	0x080177b4
 8004170:	080177c0 	.word	0x080177c0
 8004174:	080177d0 	.word	0x080177d0
    else
    	il = sprintf(st, "Rssi:%u Freq:%.1f", RSSI, Freq);
 8004178:	4b74      	ldr	r3, [pc, #464]	; (800434c <StartTask+0x634>)
 800417a:	881b      	ldrh	r3, [r3, #0]
 800417c:	461c      	mov	r4, r3
 800417e:	4b74      	ldr	r3, [pc, #464]	; (8004350 <StartTask+0x638>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4618      	mov	r0, r3
 8004184:	f7fc f9e0 	bl	8000548 <__aeabi_f2d>
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8004190:	e9cd 2300 	strd	r2, r3, [sp]
 8004194:	4622      	mov	r2, r4
 8004196:	496f      	ldr	r1, [pc, #444]	; (8004354 <StartTask+0x63c>)
 8004198:	f00f fc42 	bl	8013a20 <siprintf>
 800419c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    int lil = il;
 80041a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041a4:	60fb      	str	r3, [r7, #12]
    xf = ((SCREEN_WIDTH - (lfnt->FontWidth * il)) >> 1) & 0x7f;
 80041a6:	4b6c      	ldr	r3, [pc, #432]	; (8004358 <StartTask+0x640>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	461a      	mov	r2, r3
 80041ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041b2:	fb02 f303 	mul.w	r3, r2, r3
 80041b6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80041ba:	105b      	asrs	r3, r3, #1
 80041bc:	b29b      	uxth	r3, r3
 80041be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041c2:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
    if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 80041c6:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <StartTask+0x4be>
 80041ce:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 80041d2:	2b7d      	cmp	r3, #125	; 0x7d
 80041d4:	d902      	bls.n	80041dc <StartTask+0x4c4>
 80041d6:	2301      	movs	r3, #1
 80041d8:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
    ST7565_Print(xf, lin5, st, lfnt, 1, PIX_ON);
 80041dc:	f9b7 00fa 	ldrsh.w	r0, [r7, #250]	; 0xfa
 80041e0:	f9b7 10d6 	ldrsh.w	r1, [r7, #214]	; 0xd6
 80041e4:	4b5c      	ldr	r3, [pc, #368]	; (8004358 <StartTask+0x640>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80041ec:	2401      	movs	r4, #1
 80041ee:	9401      	str	r4, [sp, #4]
 80041f0:	2401      	movs	r4, #1
 80041f2:	9400      	str	r4, [sp, #0]
 80041f4:	f7fd fbbe 	bl	8001974 <ST7565_Print>

    int ia = sprintf(sta, "%s", nameStation(Freq));
 80041f8:	4b55      	ldr	r3, [pc, #340]	; (8004350 <StartTask+0x638>)
 80041fa:	edd3 7a00 	vldr	s15, [r3]
 80041fe:	eeb0 0a67 	vmov.f32	s0, s15
 8004202:	f7fe fc35 	bl	8002a70 <nameStation>
 8004206:	4602      	mov	r2, r0
 8004208:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800420c:	4953      	ldr	r1, [pc, #332]	; (800435c <StartTask+0x644>)
 800420e:	4618      	mov	r0, r3
 8004210:	f00f fc06 	bl	8013a20 <siprintf>
 8004214:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
    int lia = ia;
 8004218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800421c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004220:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004224:	601a      	str	r2, [r3, #0]
    xf = ((SCREEN_WIDTH - (lfnt->FontWidth * ia)) >> 1) & 0x7f;
 8004226:	4b4c      	ldr	r3, [pc, #304]	; (8004358 <StartTask+0x640>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	461a      	mov	r2, r3
 800422e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004232:	fb02 f303 	mul.w	r3, r2, r3
 8004236:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800423a:	105b      	asrs	r3, r3, #1
 800423c:	b29b      	uxth	r3, r3
 800423e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004242:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
    if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 8004246:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <StartTask+0x53e>
 800424e:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 8004252:	2b7d      	cmp	r3, #125	; 0x7d
 8004254:	d902      	bls.n	800425c <StartTask+0x544>
 8004256:	2301      	movs	r3, #1
 8004258:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
    ST7565_Print(xf, lin6, sta, lfnt, 1, PIX_ON);
 800425c:	f9b7 00fa 	ldrsh.w	r0, [r7, #250]	; 0xfa
 8004260:	f9b7 10d4 	ldrsh.w	r1, [r7, #212]	; 0xd4
 8004264:	4b3c      	ldr	r3, [pc, #240]	; (8004358 <StartTask+0x640>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800426c:	2401      	movs	r4, #1
 800426e:	9401      	str	r4, [sp, #4]
 8004270:	2401      	movs	r4, #1
 8004272:	9400      	str	r4, [sp, #0]
 8004274:	f7fd fb7e 	bl	8001974 <ST7565_Print>

    Report(1, "ChipID:0x%x Chan:%u Freq:%.2f %s RSSI:%u Band:%s Vol:%u BassEn:%u\r\n",
 8004278:	4b39      	ldr	r3, [pc, #228]	; (8004360 <StartTask+0x648>)
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	461e      	mov	r6, r3
 800427e:	4b39      	ldr	r3, [pc, #228]	; (8004364 <StartTask+0x64c>)
 8004280:	881b      	ldrh	r3, [r3, #0]
 8004282:	4698      	mov	r8, r3
 8004284:	4b32      	ldr	r3, [pc, #200]	; (8004350 <StartTask+0x638>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4618      	mov	r0, r3
 800428a:	f7fc f95d 	bl	8000548 <__aeabi_f2d>
 800428e:	4602      	mov	r2, r0
 8004290:	460b      	mov	r3, r1
 8004292:	492e      	ldr	r1, [pc, #184]	; (800434c <StartTask+0x634>)
 8004294:	8809      	ldrh	r1, [r1, #0]
 8004296:	460c      	mov	r4, r1
 8004298:	4933      	ldr	r1, [pc, #204]	; (8004368 <StartTask+0x650>)
 800429a:	7809      	ldrb	r1, [r1, #0]
 800429c:	4608      	mov	r0, r1
 800429e:	4933      	ldr	r1, [pc, #204]	; (800436c <StartTask+0x654>)
 80042a0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80042a4:	4832      	ldr	r0, [pc, #200]	; (8004370 <StartTask+0x658>)
 80042a6:	7800      	ldrb	r0, [r0, #0]
 80042a8:	4605      	mov	r5, r0
 80042aa:	4832      	ldr	r0, [pc, #200]	; (8004374 <StartTask+0x65c>)
 80042ac:	7800      	ldrb	r0, [r0, #0]
 80042ae:	9006      	str	r0, [sp, #24]
 80042b0:	9505      	str	r5, [sp, #20]
 80042b2:	9104      	str	r1, [sp, #16]
 80042b4:	9403      	str	r4, [sp, #12]
 80042b6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80042ba:	9102      	str	r1, [sp, #8]
 80042bc:	e9cd 2300 	strd	r2, r3, [sp]
 80042c0:	4643      	mov	r3, r8
 80042c2:	4632      	mov	r2, r6
 80042c4:	492c      	ldr	r1, [pc, #176]	; (8004378 <StartTask+0x660>)
 80042c6:	2001      	movs	r0, #1
 80042c8:	f7fe fede 	bl	8003088 <Report>
    			rdaID, Chan, Freq, sta, RSSI, allBands[Band], Volume, BassBoost);

    ST7565_DrawRectangle(0, lfnt->FontHeight, SCREEN_WIDTH - 1, SCREEN_HEIGHT - (lfnt->FontHeight << 1) - 2, PIX_ON);
 80042cc:	4b22      	ldr	r3, [pc, #136]	; (8004358 <StartTask+0x640>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	785b      	ldrb	r3, [r3, #1]
 80042d2:	b219      	sxth	r1, r3
 80042d4:	4b20      	ldr	r3, [pc, #128]	; (8004358 <StartTask+0x640>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	785b      	ldrb	r3, [r3, #1]
 80042da:	b29b      	uxth	r3, r3
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	b29b      	uxth	r3, r3
 80042e0:	f1c3 033e 	rsb	r3, r3, #62	; 0x3e
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	b21b      	sxth	r3, r3
 80042e8:	2201      	movs	r2, #1
 80042ea:	9200      	str	r2, [sp, #0]
 80042ec:	227f      	movs	r2, #127	; 0x7f
 80042ee:	2000      	movs	r0, #0
 80042f0:	f7fd fd17 	bl	8001d22 <ST7565_DrawRectangle>
    ST7565_DrawFilledRectangle(0, 0, SCREEN_WIDTH - 1, lfnt->FontHeight, PIX_ON);
 80042f4:	4b18      	ldr	r3, [pc, #96]	; (8004358 <StartTask+0x640>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	785b      	ldrb	r3, [r3, #1]
 80042fa:	b21b      	sxth	r3, r3
 80042fc:	2201      	movs	r2, #1
 80042fe:	9200      	str	r2, [sp, #0]
 8004300:	227f      	movs	r2, #127	; 0x7f
 8004302:	2100      	movs	r1, #0
 8004304:	2000      	movs	r0, #0
 8004306:	f7fd fd8e 	bl	8001e26 <ST7565_DrawFilledRectangle>
    ST7565_Update();
 800430a:	f7fd f983 	bl	8001614 <ST7565_Update>

    startSec = true;
 800430e:	4b1b      	ldr	r3, [pc, #108]	; (800437c <StartTask+0x664>)
 8004310:	2201      	movs	r2, #1
 8004312:	701a      	strb	r2, [r3, #0]

#endif


#ifdef SET_IRED
    waitBit = false;
 8004314:	4b1a      	ldr	r3, [pc, #104]	; (8004380 <StartTask+0x668>)
 8004316:	2200      	movs	r2, #0
 8004318:	701a      	strb	r2, [r3, #0]
    uint8_t IDRepeatCounter = 0; // Счетчик повторений ID
    const uint8_t REPEATS_TO_BE_REAL_ID = 3;
    uint8_t errLevelB, groupType, groupVer;
#endif

	evts.evt = evt_Freq;
 800431a:	230c      	movs	r3, #12
 800431c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	if (osMessageQueuePut(evtQueHandle, (const void *)&evts, prio, 20) != osOK) devError |= devEVT;
 8004320:	4b18      	ldr	r3, [pc, #96]	; (8004384 <StartTask+0x66c>)
 8004322:	6818      	ldr	r0, [r3, #0]
 8004324:	4b18      	ldr	r3, [pc, #96]	; (8004388 <StartTask+0x670>)
 8004326:	781a      	ldrb	r2, [r3, #0]
 8004328:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800432c:	2314      	movs	r3, #20
 800432e:	f00b f9cf 	bl	800f6d0 <osMessageQueuePut>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	f000 87b5 	beq.w	80052a4 <StartTask+0x158c>
 800433a:	4b14      	ldr	r3, [pc, #80]	; (800438c <StartTask+0x674>)
 800433c:	881b      	ldrh	r3, [r3, #0]
 800433e:	f043 0310 	orr.w	r3, r3, #16
 8004342:	b29a      	uxth	r2, r3
 8004344:	4b11      	ldr	r3, [pc, #68]	; (800438c <StartTask+0x674>)
 8004346:	801a      	strh	r2, [r3, #0]


    while (!restart) {
 8004348:	f000 bfac 	b.w	80052a4 <StartTask+0x158c>
 800434c:	20002f4e 	.word	0x20002f4e
 8004350:	20000104 	.word	0x20000104
 8004354:	080177e4 	.word	0x080177e4
 8004358:	20002f40 	.word	0x20002f40
 800435c:	08017600 	.word	0x08017600
 8004360:	20002f50 	.word	0x20002f50
 8004364:	20002f4c 	.word	0x20002f4c
 8004368:	2000010c 	.word	0x2000010c
 800436c:	20000118 	.word	0x20000118
 8004370:	2000010f 	.word	0x2000010f
 8004374:	20002f52 	.word	0x20002f52
 8004378:	080177f8 	.word	0x080177f8
 800437c:	20002f3c 	.word	0x20002f3c
 8004380:	20000008 	.word	0x20000008
 8004384:	20000e6c 	.word	0x20000e6c
 8004388:	2000332c 	.word	0x2000332c
 800438c:	20001b00 	.word	0x20001b00

		evts.evt = evt_None;
 8004390:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004394:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		if (osMessageQueueGet(evtQueHandle, &evts, NULL, 1) == osOK) {
 8004398:	4bba      	ldr	r3, [pc, #744]	; (8004684 <StartTask+0x96c>)
 800439a:	6818      	ldr	r0, [r3, #0]
 800439c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80043a0:	2301      	movs	r3, #1
 80043a2:	2200      	movs	r2, #0
 80043a4:	f00b f9f4 	bl	800f790 <osMessageQueueGet>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f040 86e6 	bne.w	800517c <StartTask+0x1464>
			evt = evts.evt;
 80043b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    		cntEvt = getQueCount(evtQueHandle);
 80043b8:	4bb2      	ldr	r3, [pc, #712]	; (8004684 <StartTask+0x96c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4618      	mov	r0, r3
 80043be:	f7fe fb4b 	bl	8002a58 <getQueCount>
 80043c2:	4603      	mov	r3, r0
 80043c4:	b2da      	uxtb	r2, r3
 80043c6:	4bb0      	ldr	r3, [pc, #704]	; (8004688 <StartTask+0x970>)
 80043c8:	701a      	strb	r2, [r3, #0]
    		if (evt != evt_Sec) {
 80043ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80043ce:	2b08      	cmp	r3, #8
 80043d0:	d046      	beq.n	8004460 <StartTask+0x748>
    			//Report(1, "[que:%u] get event '%s'\r\n", cntEvt, str_cmds[evt]);
	#ifdef SET_DISPLAY
    			ST7565_DrawFilledRectangle(0, SCREEN_HEIGHT - lfnt->FontHeight, SCREEN_WIDTH - 1, lfnt->FontHeight, PIX_OFF);
 80043d2:	4bae      	ldr	r3, [pc, #696]	; (800468c <StartTask+0x974>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	785b      	ldrb	r3, [r3, #1]
 80043d8:	b29b      	uxth	r3, r3
 80043da:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80043de:	b29b      	uxth	r3, r3
 80043e0:	b219      	sxth	r1, r3
 80043e2:	4baa      	ldr	r3, [pc, #680]	; (800468c <StartTask+0x974>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	785b      	ldrb	r3, [r3, #1]
 80043e8:	b21b      	sxth	r3, r3
 80043ea:	2200      	movs	r2, #0
 80043ec:	9200      	str	r2, [sp, #0]
 80043ee:	227f      	movs	r2, #127	; 0x7f
 80043f0:	2000      	movs	r0, #0
 80043f2:	f7fd fd18 	bl	8001e26 <ST7565_DrawFilledRectangle>
    			int dl = sprintf(tmp, "evt(%u) : %s", cntEvt, str_cmds[evt]);
 80043f6:	4ba4      	ldr	r3, [pc, #656]	; (8004688 <StartTask+0x970>)
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	4619      	mov	r1, r3
 80043fe:	4aa4      	ldr	r2, [pc, #656]	; (8004690 <StartTask+0x978>)
 8004400:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004408:	460a      	mov	r2, r1
 800440a:	49a2      	ldr	r1, [pc, #648]	; (8004694 <StartTask+0x97c>)
 800440c:	48a2      	ldr	r0, [pc, #648]	; (8004698 <StartTask+0x980>)
 800440e:	f00f fb07 	bl	8013a20 <siprintf>
 8004412:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
    			int x = ((SCREEN_WIDTH - (lfnt->FontWidth * dl)) >> 1) & 0x7f;
 8004416:	4b9d      	ldr	r3, [pc, #628]	; (800468c <StartTask+0x974>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	461a      	mov	r2, r3
 800441e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004422:	fb02 f303 	mul.w	r3, r2, r3
 8004426:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800442a:	105b      	asrs	r3, r3, #1
 800442c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004430:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    			ST7565_Print(x, SCREEN_HEIGHT - lfnt->FontHeight, tmp, lfnt, 1, PIX_ON);//печатаем надпись с указаным шрифтом и цветом(PIX_ON-белый, PIX_OFF-черный)
 8004434:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004438:	b218      	sxth	r0, r3
 800443a:	4b94      	ldr	r3, [pc, #592]	; (800468c <StartTask+0x974>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	785b      	ldrb	r3, [r3, #1]
 8004440:	b29b      	uxth	r3, r3
 8004442:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8004446:	b29b      	uxth	r3, r3
 8004448:	b219      	sxth	r1, r3
 800444a:	4b90      	ldr	r3, [pc, #576]	; (800468c <StartTask+0x974>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2201      	movs	r2, #1
 8004450:	9201      	str	r2, [sp, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	9200      	str	r2, [sp, #0]
 8004456:	4a90      	ldr	r2, [pc, #576]	; (8004698 <StartTask+0x980>)
 8004458:	f7fd fa8c 	bl	8001974 <ST7565_Print>
    			ST7565_Update();
 800445c:	f7fd f8da 	bl	8001614 <ST7565_Update>
	#endif
    		}
    		switch (evt) {
 8004460:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004464:	2b19      	cmp	r3, #25
 8004466:	f200 8679 	bhi.w	800515c <StartTask+0x1444>
 800446a:	a201      	add	r2, pc, #4	; (adr r2, 8004470 <StartTask+0x758>)
 800446c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004470:	08004e43 	.word	0x08004e43
 8004474:	08004e91 	.word	0x08004e91
 8004478:	08004ea9 	.word	0x08004ea9
 800447c:	08004ec9 	.word	0x08004ec9
 8004480:	08004edb 	.word	0x08004edb
 8004484:	08005105 	.word	0x08005105
 8004488:	08004edb 	.word	0x08004edb
 800448c:	08005083 	.word	0x08005083
 8004490:	08004b55 	.word	0x08004b55
 8004494:	08004b45 	.word	0x08004b45
 8004498:	08004e2b 	.word	0x08004e2b
 800449c:	08004b25 	.word	0x08004b25
 80044a0:	08004977 	.word	0x08004977
 80044a4:	08004871 	.word	0x08004871
 80044a8:	080048ed 	.word	0x080048ed
 80044ac:	080047f5 	.word	0x080047f5
 80044b0:	0800472b 	.word	0x0800472b
 80044b4:	080045a3 	.word	0x080045a3
 80044b8:	08004723 	.word	0x08004723
 80044bc:	08004585 	.word	0x08004585
 80044c0:	08004533 	.word	0x08004533
 80044c4:	08004515 	.word	0x08004515
 80044c8:	08004de3 	.word	0x08004de3
 80044cc:	08004dfb 	.word	0x08004dfb
 80044d0:	08004e13 	.word	0x08004e13
 80044d4:	080044d9 	.word	0x080044d9
#ifdef SET_IRED
    			case evt_iRed:
    				if (ired_show) {
 80044d8:	4b70      	ldr	r3, [pc, #448]	; (800469c <StartTask+0x984>)
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00c      	beq.n	80044fa <StartTask+0x7e2>
    					ired_show = false;
 80044e0:	4b6e      	ldr	r3, [pc, #440]	; (800469c <StartTask+0x984>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	701a      	strb	r2, [r3, #0]
    					Report(1, "[que:%u] iRed Show code is hide\r\n", cntEvt);
 80044e6:	4b68      	ldr	r3, [pc, #416]	; (8004688 <StartTask+0x970>)
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	461a      	mov	r2, r3
 80044ee:	496c      	ldr	r1, [pc, #432]	; (80046a0 <StartTask+0x988>)
 80044f0:	2001      	movs	r0, #1
 80044f2:	f7fe fdc9 	bl	8003088 <Report>
    				} else {
    					ired_show = true;
    					Report(1, "[que:%u] iRed Show code is show\r\n", cntEvt);
    				}
    			break;
 80044f6:	f000 be31 	b.w	800515c <StartTask+0x1444>
    					ired_show = true;
 80044fa:	4b68      	ldr	r3, [pc, #416]	; (800469c <StartTask+0x984>)
 80044fc:	2201      	movs	r2, #1
 80044fe:	701a      	strb	r2, [r3, #0]
    					Report(1, "[que:%u] iRed Show code is show\r\n", cntEvt);
 8004500:	4b61      	ldr	r3, [pc, #388]	; (8004688 <StartTask+0x970>)
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	b2db      	uxtb	r3, r3
 8004506:	461a      	mov	r2, r3
 8004508:	4966      	ldr	r1, [pc, #408]	; (80046a4 <StartTask+0x98c>)
 800450a:	2001      	movs	r0, #1
 800450c:	f7fe fdbc 	bl	8003088 <Report>
    			break;
 8004510:	f000 be24 	b.w	800515c <StartTask+0x1444>
    					IDRepeatCounter = 0;
    				}
    			break;
#endif
    			case evt_SleepCont:
    				sleep_mode = true;
 8004514:	4b64      	ldr	r3, [pc, #400]	; (80046a8 <StartTask+0x990>)
 8004516:	2201      	movs	r2, #1
 8004518:	701a      	strb	r2, [r3, #0]
    				//
    				HAL_SuspendTick();
 800451a:	f002 f891 	bl	8006640 <HAL_SuspendTick>
    				HAL_PWR_EnableSleepOnExit();
 800451e:	f005 fa67 	bl	80099f0 <HAL_PWR_EnableSleepOnExit>
    				HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8004522:	2101      	movs	r1, #1
 8004524:	2000      	movs	r0, #0
 8004526:	f005 fa2f 	bl	8009988 <HAL_PWR_EnterSLEEPMode>
    				HAL_ResumeTick();
 800452a:	f002 f89b 	bl	8006664 <HAL_ResumeTick>
    			break;
 800452e:	f000 be15 	b.w	800515c <StartTask+0x1444>
    			case evt_Sleep:
    				Report(1, "Going into SLEEP MODE...\r\n");// in 1 second\r\n");
 8004532:	495e      	ldr	r1, [pc, #376]	; (80046ac <StartTask+0x994>)
 8004534:	2001      	movs	r0, #1
 8004536:	f7fe fda7 	bl	8003088 <Report>
	#ifdef SET_BLE
    				bleWrite("AT+SLEEP1\r\n", 1);
	#endif
	#ifdef SET_DISPLAY
    				ST7565_CMD_DISPLAY(CMD_DISPLAY_OFF);
 800453a:	20ae      	movs	r0, #174	; 0xae
 800453c:	f7fc ffec 	bl	8001518 <ST7565_CMD_DISPLAY>
	#endif
    				HAL_Delay(250);
 8004540:	20fa      	movs	r0, #250	; 0xfa
 8004542:	f003 f811 	bl	8007568 <HAL_Delay>
    				HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8004546:	2200      	movs	r2, #0
 8004548:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800454c:	4858      	ldr	r0, [pc, #352]	; (80046b0 <StartTask+0x998>)
 800454e:	f003 fd57 	bl	8008000 <HAL_GPIO_WritePin>
    				evts.evt = evt_SleepCont;
 8004552:	2315      	movs	r3, #21
 8004554:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    				if (osMessageQueuePut(evtQueHandle, (const void *)&evts, prio, 10) != osOK) devError |= devEVT;
 8004558:	4b4a      	ldr	r3, [pc, #296]	; (8004684 <StartTask+0x96c>)
 800455a:	6818      	ldr	r0, [r3, #0]
 800455c:	4b55      	ldr	r3, [pc, #340]	; (80046b4 <StartTask+0x99c>)
 800455e:	781a      	ldrb	r2, [r3, #0]
 8004560:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8004564:	230a      	movs	r3, #10
 8004566:	f00b f8b3 	bl	800f6d0 <osMessageQueuePut>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 85e8 	beq.w	8005142 <StartTask+0x142a>
 8004572:	4b51      	ldr	r3, [pc, #324]	; (80046b8 <StartTask+0x9a0>)
 8004574:	881b      	ldrh	r3, [r3, #0]
 8004576:	f043 0310 	orr.w	r3, r3, #16
 800457a:	b29a      	uxth	r2, r3
 800457c:	4b4e      	ldr	r3, [pc, #312]	; (80046b8 <StartTask+0x9a0>)
 800457e:	801a      	strh	r2, [r3, #0]
    			break;
 8004580:	f000 bddf 	b.w	8005142 <StartTask+0x142a>
    			case evt_ExitSleep:
    				HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8004584:	2201      	movs	r2, #1
 8004586:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800458a:	4849      	ldr	r0, [pc, #292]	; (80046b0 <StartTask+0x998>)
 800458c:	f003 fd38 	bl	8008000 <HAL_GPIO_WritePin>
	#ifdef SET_DISPLAY
    				ST7565_CMD_DISPLAY(CMD_DISPLAY_ON);
 8004590:	20af      	movs	r0, #175	; 0xaf
 8004592:	f7fc ffc1 	bl	8001518 <ST7565_CMD_DISPLAY>
	#endif
	#ifdef SET_BLE
    				bleWakeUp();
	#endif
    				Report(1, "Exit from SLEEP MODE\r\n");
 8004596:	4949      	ldr	r1, [pc, #292]	; (80046bc <StartTask+0x9a4>)
 8004598:	2001      	movs	r0, #1
 800459a:	f7fe fd75 	bl	8003088 <Report>
    			break;
 800459e:	f000 bddd 	b.w	800515c <StartTask+0x1444>
    			case evt_WakeUp:
    				bleWakeUp();
    			break;
	#endif
    			case evt_Band:
    				Band = newBand;
 80045a2:	4b47      	ldr	r3, [pc, #284]	; (80046c0 <StartTask+0x9a8>)
 80045a4:	781a      	ldrb	r2, [r3, #0]
 80045a6:	4b47      	ldr	r3, [pc, #284]	; (80046c4 <StartTask+0x9ac>)
 80045a8:	701a      	strb	r2, [r3, #0]
    				if (!rda5807_Set_Band(Band)) {
 80045aa:	4b46      	ldr	r3, [pc, #280]	; (80046c4 <StartTask+0x9ac>)
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f001 fbda 	bl	8005d68 <rda5807_Set_Band>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f040 85c5 	bne.w	8005146 <StartTask+0x142e>
    					sprintf(stb, "FM Band:%s", allBands[Band]);//(uint16_t)lBand, (uint16_t)rBand);
 80045bc:	4b41      	ldr	r3, [pc, #260]	; (80046c4 <StartTask+0x9ac>)
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	461a      	mov	r2, r3
 80045c2:	4b41      	ldr	r3, [pc, #260]	; (80046c8 <StartTask+0x9b0>)
 80045c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80045c8:	f107 0318 	add.w	r3, r7, #24
 80045cc:	493f      	ldr	r1, [pc, #252]	; (80046cc <StartTask+0x9b4>)
 80045ce:	4618      	mov	r0, r3
 80045d0:	f00f fa26 	bl	8013a20 <siprintf>
    					showLine(stb, lin3, &lit, true);
 80045d4:	f107 0214 	add.w	r2, r7, #20
 80045d8:	f8b7 10da 	ldrh.w	r1, [r7, #218]	; 0xda
 80045dc:	f107 0018 	add.w	r0, r7, #24
 80045e0:	2301      	movs	r3, #1
 80045e2:	f7fe fb6f 	bl	8002cc4 <showLine>
    					Report(1, "[que:%u] set new band=%u '%s'\r\n", cntEvt, Band, allBands[Band]);
 80045e6:	4b28      	ldr	r3, [pc, #160]	; (8004688 <StartTask+0x970>)
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	4619      	mov	r1, r3
 80045ee:	4b35      	ldr	r3, [pc, #212]	; (80046c4 <StartTask+0x9ac>)
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	4618      	mov	r0, r3
 80045f4:	4b33      	ldr	r3, [pc, #204]	; (80046c4 <StartTask+0x9ac>)
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	461a      	mov	r2, r3
 80045fa:	4b33      	ldr	r3, [pc, #204]	; (80046c8 <StartTask+0x9b0>)
 80045fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004600:	9300      	str	r3, [sp, #0]
 8004602:	4603      	mov	r3, r0
 8004604:	460a      	mov	r2, r1
 8004606:	4932      	ldr	r1, [pc, #200]	; (80046d0 <StartTask+0x9b8>)
 8004608:	2001      	movs	r0, #1
 800460a:	f7fe fd3d 	bl	8003088 <Report>
    					if (next_evt == evt) {
 800460e:	4b31      	ldr	r3, [pc, #196]	; (80046d4 <StartTask+0x9bc>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004616:	429a      	cmp	r2, r3
 8004618:	d166      	bne.n	80046e8 <StartTask+0x9d0>
    						if ((Freq < lBand) || (Freq > rBand)) {
 800461a:	4b2f      	ldr	r3, [pc, #188]	; (80046d8 <StartTask+0x9c0>)
 800461c:	ed93 7a00 	vldr	s14, [r3]
 8004620:	4b2e      	ldr	r3, [pc, #184]	; (80046dc <StartTask+0x9c4>)
 8004622:	edd3 7a00 	vldr	s15, [r3]
 8004626:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800462a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800462e:	d40c      	bmi.n	800464a <StartTask+0x932>
 8004630:	4b29      	ldr	r3, [pc, #164]	; (80046d8 <StartTask+0x9c0>)
 8004632:	ed93 7a00 	vldr	s14, [r3]
 8004636:	4b2a      	ldr	r3, [pc, #168]	; (80046e0 <StartTask+0x9c8>)
 8004638:	edd3 7a00 	vldr	s15, [r3]
 800463c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004644:	dc01      	bgt.n	800464a <StartTask+0x932>
    						next_evt = evt;
    						evts.evt = evt_Freq;
    						if (osMessageQueuePut(evtQueHandle, (const void *)&evts, prio, 10) != osOK) devError |= devEVT;
    					}
    				}
    			break;
 8004646:	f000 bd7e 	b.w	8005146 <StartTask+0x142e>
    							newFreq = lBand;
 800464a:	4b24      	ldr	r3, [pc, #144]	; (80046dc <StartTask+0x9c4>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a25      	ldr	r2, [pc, #148]	; (80046e4 <StartTask+0x9cc>)
 8004650:	6013      	str	r3, [r2, #0]
    							evts.evt = evt_Freq;
 8004652:	230c      	movs	r3, #12
 8004654:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    							if (osMessageQueuePut(evtQueHandle, (const void *)&evts, prio, 10) != osOK) devError |= devEVT;
 8004658:	4b0a      	ldr	r3, [pc, #40]	; (8004684 <StartTask+0x96c>)
 800465a:	6818      	ldr	r0, [r3, #0]
 800465c:	4b15      	ldr	r3, [pc, #84]	; (80046b4 <StartTask+0x99c>)
 800465e:	781a      	ldrb	r2, [r3, #0]
 8004660:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8004664:	230a      	movs	r3, #10
 8004666:	f00b f833 	bl	800f6d0 <osMessageQueuePut>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 856a 	beq.w	8005146 <StartTask+0x142e>
 8004672:	4b11      	ldr	r3, [pc, #68]	; (80046b8 <StartTask+0x9a0>)
 8004674:	881b      	ldrh	r3, [r3, #0]
 8004676:	f043 0310 	orr.w	r3, r3, #16
 800467a:	b29a      	uxth	r2, r3
 800467c:	4b0e      	ldr	r3, [pc, #56]	; (80046b8 <StartTask+0x9a0>)
 800467e:	801a      	strh	r2, [r3, #0]
    			break;
 8004680:	f000 bd61 	b.w	8005146 <StartTask+0x142e>
 8004684:	20000e6c 	.word	0x20000e6c
 8004688:	20001f17 	.word	0x20001f17
 800468c:	20002f40 	.word	0x20002f40
 8004690:	20000088 	.word	0x20000088
 8004694:	0801783c 	.word	0x0801783c
 8004698:	20001280 	.word	0x20001280
 800469c:	2000012c 	.word	0x2000012c
 80046a0:	0801784c 	.word	0x0801784c
 80046a4:	08017870 	.word	0x08017870
 80046a8:	20003302 	.word	0x20003302
 80046ac:	08017894 	.word	0x08017894
 80046b0:	48000800 	.word	0x48000800
 80046b4:	2000332c 	.word	0x2000332c
 80046b8:	20001b00 	.word	0x20001b00
 80046bc:	080178b0 	.word	0x080178b0
 80046c0:	2000010d 	.word	0x2000010d
 80046c4:	2000010c 	.word	0x2000010c
 80046c8:	20000118 	.word	0x20000118
 80046cc:	080177b4 	.word	0x080177b4
 80046d0:	080178c8 	.word	0x080178c8
 80046d4:	200000f0 	.word	0x200000f0
 80046d8:	20000104 	.word	0x20000104
 80046dc:	20002f44 	.word	0x20002f44
 80046e0:	20002f48 	.word	0x20002f48
 80046e4:	20000108 	.word	0x20000108
    						next_evt = evt;
 80046e8:	4aa9      	ldr	r2, [pc, #676]	; (8004990 <StartTask+0xc78>)
 80046ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80046ee:	6013      	str	r3, [r2, #0]
    						evts.evt = evt_Freq;
 80046f0:	230c      	movs	r3, #12
 80046f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    						if (osMessageQueuePut(evtQueHandle, (const void *)&evts, prio, 10) != osOK) devError |= devEVT;
 80046f6:	4ba7      	ldr	r3, [pc, #668]	; (8004994 <StartTask+0xc7c>)
 80046f8:	6818      	ldr	r0, [r3, #0]
 80046fa:	4ba7      	ldr	r3, [pc, #668]	; (8004998 <StartTask+0xc80>)
 80046fc:	781a      	ldrb	r2, [r3, #0]
 80046fe:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8004702:	230a      	movs	r3, #10
 8004704:	f00a ffe4 	bl	800f6d0 <osMessageQueuePut>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	f000 851b 	beq.w	8005146 <StartTask+0x142e>
 8004710:	4ba2      	ldr	r3, [pc, #648]	; (800499c <StartTask+0xc84>)
 8004712:	881b      	ldrh	r3, [r3, #0]
 8004714:	f043 0310 	orr.w	r3, r3, #16
 8004718:	b29a      	uxth	r2, r3
 800471a:	4ba0      	ldr	r3, [pc, #640]	; (800499c <StartTask+0xc84>)
 800471c:	801a      	strh	r2, [r3, #0]
    			break;
 800471e:	f000 bd12 	b.w	8005146 <StartTask+0x142e>
    			case evt_Cfg:
    				showCfg();
 8004722:	f7fd fbef 	bl	8001f04 <showCfg>
    			break;
 8004726:	f000 bd19 	b.w	800515c <StartTask+0x1444>
    			case evt_List:
    				next_evt = evt_Freq;
 800472a:	4b99      	ldr	r3, [pc, #612]	; (8004990 <StartTask+0xc78>)
 800472c:	220c      	movs	r2, #12
 800472e:	601a      	str	r2, [r3, #0]
    				newFreq = getNextList(Freq, seek_up, &newBand);
 8004730:	4b9b      	ldr	r3, [pc, #620]	; (80049a0 <StartTask+0xc88>)
 8004732:	edd3 7a00 	vldr	s15, [r3]
 8004736:	4b9b      	ldr	r3, [pc, #620]	; (80049a4 <StartTask+0xc8c>)
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	b2db      	uxtb	r3, r3
 800473c:	499a      	ldr	r1, [pc, #616]	; (80049a8 <StartTask+0xc90>)
 800473e:	4618      	mov	r0, r3
 8004740:	eeb0 0a67 	vmov.f32	s0, s15
 8004744:	f7fe f9da 	bl	8002afc <getNextList>
 8004748:	eef0 7a40 	vmov.f32	s15, s0
 800474c:	4b97      	ldr	r3, [pc, #604]	; (80049ac <StartTask+0xc94>)
 800474e:	edc3 7a00 	vstr	s15, [r3]
					if (newBand == Band) {
 8004752:	4b95      	ldr	r3, [pc, #596]	; (80049a8 <StartTask+0xc90>)
 8004754:	781a      	ldrb	r2, [r3, #0]
 8004756:	4b96      	ldr	r3, [pc, #600]	; (80049b0 <StartTask+0xc98>)
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	429a      	cmp	r2, r3
 800475c:	d118      	bne.n	8004790 <StartTask+0xa78>
						Report(1, "Band = newBand = %u -> goto set newFreq to %.1f (up = %u)\r\n", newBand, newFreq, seek_up);
 800475e:	4b92      	ldr	r3, [pc, #584]	; (80049a8 <StartTask+0xc90>)
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	461c      	mov	r4, r3
 8004764:	4b91      	ldr	r3, [pc, #580]	; (80049ac <StartTask+0xc94>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4618      	mov	r0, r3
 800476a:	f7fb feed 	bl	8000548 <__aeabi_f2d>
 800476e:	4602      	mov	r2, r0
 8004770:	460b      	mov	r3, r1
 8004772:	498c      	ldr	r1, [pc, #560]	; (80049a4 <StartTask+0xc8c>)
 8004774:	7809      	ldrb	r1, [r1, #0]
 8004776:	b2c9      	uxtb	r1, r1
 8004778:	9102      	str	r1, [sp, #8]
 800477a:	e9cd 2300 	strd	r2, r3, [sp]
 800477e:	4622      	mov	r2, r4
 8004780:	498c      	ldr	r1, [pc, #560]	; (80049b4 <StartTask+0xc9c>)
 8004782:	2001      	movs	r0, #1
 8004784:	f7fe fc80 	bl	8003088 <Report>
						evts.evt = evt_Freq;
 8004788:	230c      	movs	r3, #12
 800478a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800478e:	e01b      	b.n	80047c8 <StartTask+0xab0>
					} else {
						Report(1, "Band = %u -> goto set newBand to %u (newFreq to %.1f up = %u)\r\n", Band, newBand, newFreq, seek_up);
 8004790:	4b87      	ldr	r3, [pc, #540]	; (80049b0 <StartTask+0xc98>)
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	461c      	mov	r4, r3
 8004796:	4b84      	ldr	r3, [pc, #528]	; (80049a8 <StartTask+0xc90>)
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	461d      	mov	r5, r3
 800479c:	4b83      	ldr	r3, [pc, #524]	; (80049ac <StartTask+0xc94>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7fb fed1 	bl	8000548 <__aeabi_f2d>
 80047a6:	4602      	mov	r2, r0
 80047a8:	460b      	mov	r3, r1
 80047aa:	497e      	ldr	r1, [pc, #504]	; (80049a4 <StartTask+0xc8c>)
 80047ac:	7809      	ldrb	r1, [r1, #0]
 80047ae:	b2c9      	uxtb	r1, r1
 80047b0:	9102      	str	r1, [sp, #8]
 80047b2:	e9cd 2300 	strd	r2, r3, [sp]
 80047b6:	462b      	mov	r3, r5
 80047b8:	4622      	mov	r2, r4
 80047ba:	497f      	ldr	r1, [pc, #508]	; (80049b8 <StartTask+0xca0>)
 80047bc:	2001      	movs	r0, #1
 80047be:	f7fe fc63 	bl	8003088 <Report>
						evts.evt = evt_Band;
 80047c2:	2311      	movs	r3, #17
 80047c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
					}
					if (osMessageQueuePut(evtQueHandle, (const void *)&evts, prio, 10) != osOK) devError |= devEVT;
 80047c8:	4b72      	ldr	r3, [pc, #456]	; (8004994 <StartTask+0xc7c>)
 80047ca:	6818      	ldr	r0, [r3, #0]
 80047cc:	4b72      	ldr	r3, [pc, #456]	; (8004998 <StartTask+0xc80>)
 80047ce:	781a      	ldrb	r2, [r3, #0]
 80047d0:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80047d4:	230a      	movs	r3, #10
 80047d6:	f00a ff7b 	bl	800f6d0 <osMessageQueuePut>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 84b4 	beq.w	800514a <StartTask+0x1432>
 80047e2:	4b6e      	ldr	r3, [pc, #440]	; (800499c <StartTask+0xc84>)
 80047e4:	881b      	ldrh	r3, [r3, #0]
 80047e6:	f043 0310 	orr.w	r3, r3, #16
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	4b6b      	ldr	r3, [pc, #428]	; (800499c <StartTask+0xc84>)
 80047ee:	801a      	strh	r2, [r3, #0]
    			break;
 80047f0:	f000 bcab 	b.w	800514a <StartTask+0x1432>
    			case evt_Bass:
    				if (newBassBoost != BassBoost) {
 80047f4:	4b71      	ldr	r3, [pc, #452]	; (80049bc <StartTask+0xca4>)
 80047f6:	781a      	ldrb	r2, [r3, #0]
 80047f8:	4b71      	ldr	r3, [pc, #452]	; (80049c0 <StartTask+0xca8>)
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	f000 84a6 	beq.w	800514e <StartTask+0x1436>
    					BassBoost = newBassBoost;
 8004802:	4b6e      	ldr	r3, [pc, #440]	; (80049bc <StartTask+0xca4>)
 8004804:	781a      	ldrb	r2, [r3, #0]
 8004806:	4b6e      	ldr	r3, [pc, #440]	; (80049c0 <StartTask+0xca8>)
 8004808:	701a      	strb	r2, [r3, #0]
    					rda5807_SetBassBoost(BassBoost);
 800480a:	4b6d      	ldr	r3, [pc, #436]	; (80049c0 <StartTask+0xca8>)
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	4618      	mov	r0, r3
 8004810:	f001 f96a 	bl	8005ae8 <rda5807_SetBassBoost>
    					//
    					if (noMute)
 8004814:	4b6b      	ldr	r3, [pc, #428]	; (80049c4 <StartTask+0xcac>)
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00a      	beq.n	8004832 <StartTask+0xb1a>
    						sprintf(st, "Bass:%u Vol:%u", BassBoost, Volume);
 800481c:	4b68      	ldr	r3, [pc, #416]	; (80049c0 <StartTask+0xca8>)
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	461a      	mov	r2, r3
 8004822:	4b69      	ldr	r3, [pc, #420]	; (80049c8 <StartTask+0xcb0>)
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	f107 0058 	add.w	r0, r7, #88	; 0x58
 800482a:	4968      	ldr	r1, [pc, #416]	; (80049cc <StartTask+0xcb4>)
 800482c:	f00f f8f8 	bl	8013a20 <siprintf>
 8004830:	e009      	b.n	8004846 <StartTask+0xb2e>
    					else
    						sprintf(st, "Bass:%u Vol:%u M", BassBoost, Volume);
 8004832:	4b63      	ldr	r3, [pc, #396]	; (80049c0 <StartTask+0xca8>)
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	461a      	mov	r2, r3
 8004838:	4b63      	ldr	r3, [pc, #396]	; (80049c8 <StartTask+0xcb0>)
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8004840:	4963      	ldr	r1, [pc, #396]	; (80049d0 <StartTask+0xcb8>)
 8004842:	f00f f8ed 	bl	8013a20 <siprintf>
    					showLine(st, lin4, &lim, true);
 8004846:	f107 0210 	add.w	r2, r7, #16
 800484a:	f8b7 10d8 	ldrh.w	r1, [r7, #216]	; 0xd8
 800484e:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8004852:	2301      	movs	r3, #1
 8004854:	f7fe fa36 	bl	8002cc4 <showLine>
    					Report(1, "[que:%u] set new BassBoost to %u\r\n", cntEvt, BassBoost);
 8004858:	4b5e      	ldr	r3, [pc, #376]	; (80049d4 <StartTask+0xcbc>)
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	b2db      	uxtb	r3, r3
 800485e:	461a      	mov	r2, r3
 8004860:	4b57      	ldr	r3, [pc, #348]	; (80049c0 <StartTask+0xca8>)
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	495c      	ldr	r1, [pc, #368]	; (80049d8 <StartTask+0xcc0>)
 8004866:	2001      	movs	r0, #1
 8004868:	f7fe fc0e 	bl	8003088 <Report>
    				}
    			break;
 800486c:	f000 bc6f 	b.w	800514e <StartTask+0x1436>
    			case evt_Vol:
    				if (newVolume != Volume) {
 8004870:	4b5a      	ldr	r3, [pc, #360]	; (80049dc <StartTask+0xcc4>)
 8004872:	781a      	ldrb	r2, [r3, #0]
 8004874:	4b54      	ldr	r3, [pc, #336]	; (80049c8 <StartTask+0xcb0>)
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	429a      	cmp	r2, r3
 800487a:	f000 846a 	beq.w	8005152 <StartTask+0x143a>
    					Volume = newVolume;
 800487e:	4b57      	ldr	r3, [pc, #348]	; (80049dc <StartTask+0xcc4>)
 8004880:	781a      	ldrb	r2, [r3, #0]
 8004882:	4b51      	ldr	r3, [pc, #324]	; (80049c8 <StartTask+0xcb0>)
 8004884:	701a      	strb	r2, [r3, #0]
    					rda5807_SetVolume(Volume);
 8004886:	4b50      	ldr	r3, [pc, #320]	; (80049c8 <StartTask+0xcb0>)
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	4618      	mov	r0, r3
 800488c:	f001 f8e4 	bl	8005a58 <rda5807_SetVolume>
    					//
    					if (noMute)
 8004890:	4b4c      	ldr	r3, [pc, #304]	; (80049c4 <StartTask+0xcac>)
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00a      	beq.n	80048ae <StartTask+0xb96>
    						sprintf(st, "Bass:%u Vol:%u", BassBoost, Volume);
 8004898:	4b49      	ldr	r3, [pc, #292]	; (80049c0 <StartTask+0xca8>)
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	461a      	mov	r2, r3
 800489e:	4b4a      	ldr	r3, [pc, #296]	; (80049c8 <StartTask+0xcb0>)
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80048a6:	4949      	ldr	r1, [pc, #292]	; (80049cc <StartTask+0xcb4>)
 80048a8:	f00f f8ba 	bl	8013a20 <siprintf>
 80048ac:	e009      	b.n	80048c2 <StartTask+0xbaa>
    					else
    						sprintf(st, "Bass:%u Vol:%u M", BassBoost, Volume);
 80048ae:	4b44      	ldr	r3, [pc, #272]	; (80049c0 <StartTask+0xca8>)
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	461a      	mov	r2, r3
 80048b4:	4b44      	ldr	r3, [pc, #272]	; (80049c8 <StartTask+0xcb0>)
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80048bc:	4944      	ldr	r1, [pc, #272]	; (80049d0 <StartTask+0xcb8>)
 80048be:	f00f f8af 	bl	8013a20 <siprintf>
    					showLine(st, lin4, &lim, true);
 80048c2:	f107 0210 	add.w	r2, r7, #16
 80048c6:	f8b7 10d8 	ldrh.w	r1, [r7, #216]	; 0xd8
 80048ca:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80048ce:	2301      	movs	r3, #1
 80048d0:	f7fe f9f8 	bl	8002cc4 <showLine>
    					Report(1, "[que:%u] set new Volume to %u\r\n", cntEvt, Volume);
 80048d4:	4b3f      	ldr	r3, [pc, #252]	; (80049d4 <StartTask+0xcbc>)
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	461a      	mov	r2, r3
 80048dc:	4b3a      	ldr	r3, [pc, #232]	; (80049c8 <StartTask+0xcb0>)
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	493f      	ldr	r1, [pc, #252]	; (80049e0 <StartTask+0xcc8>)
 80048e2:	2001      	movs	r0, #1
 80048e4:	f7fe fbd0 	bl	8003088 <Report>
    				}
    			break;
 80048e8:	f000 bc33 	b.w	8005152 <StartTask+0x143a>
    			case evt_Mute:
    				noMute = (~noMute) & 1;
 80048ec:	4b35      	ldr	r3, [pc, #212]	; (80049c4 <StartTask+0xcac>)
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	bf0c      	ite	eq
 80048f8:	2301      	moveq	r3, #1
 80048fa:	2300      	movne	r3, #0
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	461a      	mov	r2, r3
 8004900:	4b30      	ldr	r3, [pc, #192]	; (80049c4 <StartTask+0xcac>)
 8004902:	701a      	strb	r2, [r3, #0]
    				rda5807_Set_Mute(noMute);
 8004904:	4b2f      	ldr	r3, [pc, #188]	; (80049c4 <StartTask+0xcac>)
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	4618      	mov	r0, r3
 800490a:	f001 fa99 	bl	8005e40 <rda5807_Set_Mute>
    				//
    				if (noMute)
 800490e:	4b2d      	ldr	r3, [pc, #180]	; (80049c4 <StartTask+0xcac>)
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00a      	beq.n	800492c <StartTask+0xc14>
    					sprintf(st, "Bass:%u Vol:%u", BassBoost, Volume);
 8004916:	4b2a      	ldr	r3, [pc, #168]	; (80049c0 <StartTask+0xca8>)
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	461a      	mov	r2, r3
 800491c:	4b2a      	ldr	r3, [pc, #168]	; (80049c8 <StartTask+0xcb0>)
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8004924:	4929      	ldr	r1, [pc, #164]	; (80049cc <StartTask+0xcb4>)
 8004926:	f00f f87b 	bl	8013a20 <siprintf>
 800492a:	e009      	b.n	8004940 <StartTask+0xc28>
    				else
    					sprintf(st, "Bass:%u Vol:%u M", BassBoost, Volume);
 800492c:	4b24      	ldr	r3, [pc, #144]	; (80049c0 <StartTask+0xca8>)
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	461a      	mov	r2, r3
 8004932:	4b25      	ldr	r3, [pc, #148]	; (80049c8 <StartTask+0xcb0>)
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	f107 0058 	add.w	r0, r7, #88	; 0x58
 800493a:	4925      	ldr	r1, [pc, #148]	; (80049d0 <StartTask+0xcb8>)
 800493c:	f00f f870 	bl	8013a20 <siprintf>
    				showLine(st, lin4, &lim, true);
 8004940:	f107 0210 	add.w	r2, r7, #16
 8004944:	f8b7 10d8 	ldrh.w	r1, [r7, #216]	; 0xd8
 8004948:	f107 0058 	add.w	r0, r7, #88	; 0x58
 800494c:	2301      	movs	r3, #1
 800494e:	f7fe f9b9 	bl	8002cc4 <showLine>
    				Report(1, "[que:%u] set Mute to %u\r\n", cntEvt, (~noMute) & 1);
 8004952:	4b20      	ldr	r3, [pc, #128]	; (80049d4 <StartTask+0xcbc>)
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	b2db      	uxtb	r3, r3
 8004958:	461a      	mov	r2, r3
 800495a:	4b1a      	ldr	r3, [pc, #104]	; (80049c4 <StartTask+0xcac>)
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b00      	cmp	r3, #0
 8004964:	bf0c      	ite	eq
 8004966:	2301      	moveq	r3, #1
 8004968:	2300      	movne	r3, #0
 800496a:	b2db      	uxtb	r3, r3
 800496c:	491d      	ldr	r1, [pc, #116]	; (80049e4 <StartTask+0xccc>)
 800496e:	2001      	movs	r0, #1
 8004970:	f7fe fb8a 	bl	8003088 <Report>
    			break;
 8004974:	e3f2      	b.n	800515c <StartTask+0x1444>
    			case evt_Freq:
    				if ((newFreq >= lBand) && (newFreq <= rBand)) {
 8004976:	4b0d      	ldr	r3, [pc, #52]	; (80049ac <StartTask+0xc94>)
 8004978:	ed93 7a00 	vldr	s14, [r3]
 800497c:	4b1a      	ldr	r3, [pc, #104]	; (80049e8 <StartTask+0xcd0>)
 800497e:	edd3 7a00 	vldr	s15, [r3]
 8004982:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800498a:	da2f      	bge.n	80049ec <StartTask+0xcd4>
    						IDRepeatCounter = 0;
    						errLevelB = 0;
#endif
    					}
    				}
				break;
 800498c:	e3e3      	b.n	8005156 <StartTask+0x143e>
 800498e:	bf00      	nop
 8004990:	200000f0 	.word	0x200000f0
 8004994:	20000e6c 	.word	0x20000e6c
 8004998:	2000332c 	.word	0x2000332c
 800499c:	20001b00 	.word	0x20001b00
 80049a0:	20000104 	.word	0x20000104
 80049a4:	2000010e 	.word	0x2000010e
 80049a8:	2000010d 	.word	0x2000010d
 80049ac:	20000108 	.word	0x20000108
 80049b0:	2000010c 	.word	0x2000010c
 80049b4:	080178e8 	.word	0x080178e8
 80049b8:	08017924 	.word	0x08017924
 80049bc:	20002f53 	.word	0x20002f53
 80049c0:	20002f52 	.word	0x20002f52
 80049c4:	20000111 	.word	0x20000111
 80049c8:	2000010f 	.word	0x2000010f
 80049cc:	080177c0 	.word	0x080177c0
 80049d0:	08017964 	.word	0x08017964
 80049d4:	20001f17 	.word	0x20001f17
 80049d8:	08017978 	.word	0x08017978
 80049dc:	20000110 	.word	0x20000110
 80049e0:	0801799c 	.word	0x0801799c
 80049e4:	080179bc 	.word	0x080179bc
 80049e8:	20002f44 	.word	0x20002f44
    				if ((newFreq >= lBand) && (newFreq <= rBand)) {
 80049ec:	4bad      	ldr	r3, [pc, #692]	; (8004ca4 <StartTask+0xf8c>)
 80049ee:	ed93 7a00 	vldr	s14, [r3]
 80049f2:	4bad      	ldr	r3, [pc, #692]	; (8004ca8 <StartTask+0xf90>)
 80049f4:	edd3 7a00 	vldr	s15, [r3]
 80049f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80049fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a00:	d900      	bls.n	8004a04 <StartTask+0xcec>
				break;
 8004a02:	e3a8      	b.n	8005156 <StartTask+0x143e>
    					if (newFreq != Freq) {
 8004a04:	4ba7      	ldr	r3, [pc, #668]	; (8004ca4 <StartTask+0xf8c>)
 8004a06:	ed93 7a00 	vldr	s14, [r3]
 8004a0a:	4ba8      	ldr	r3, [pc, #672]	; (8004cac <StartTask+0xf94>)
 8004a0c:	edd3 7a00 	vldr	s15, [r3]
 8004a10:	eeb4 7a67 	vcmp.f32	s14, s15
 8004a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a18:	f000 839d 	beq.w	8005156 <StartTask+0x143e>
    						Freq = newFreq;
 8004a1c:	4ba1      	ldr	r3, [pc, #644]	; (8004ca4 <StartTask+0xf8c>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4aa2      	ldr	r2, [pc, #648]	; (8004cac <StartTask+0xf94>)
 8004a22:	6013      	str	r3, [r2, #0]
    						uint16_t fr = (uint16_t)(Freq * 10);
 8004a24:	4ba1      	ldr	r3, [pc, #644]	; (8004cac <StartTask+0xf94>)
 8004a26:	edd3 7a00 	vldr	s15, [r3]
 8004a2a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004a2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a36:	ee17 3a90 	vmov	r3, s15
 8004a3a:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
    						rda5807_SetFreq_In100Khz(fr);
 8004a3e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004a42:	4618      	mov	r0, r3
 8004a44:	f001 f870 	bl	8005b28 <rda5807_SetFreq_In100Khz>
    						stereo = rda5807_Get_StereoMonoFlag();
 8004a48:	f001 f964 	bl	8005d14 <rda5807_Get_StereoMonoFlag>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	461a      	mov	r2, r3
 8004a50:	4b97      	ldr	r3, [pc, #604]	; (8004cb0 <StartTask+0xf98>)
 8004a52:	701a      	strb	r2, [r3, #0]
    						Chan = rda5807_Get_Channel();
 8004a54:	f001 f976 	bl	8005d44 <rda5807_Get_Channel>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	4b95      	ldr	r3, [pc, #596]	; (8004cb4 <StartTask+0xf9c>)
 8004a5e:	801a      	strh	r2, [r3, #0]
    						if (stereo)
 8004a60:	4b93      	ldr	r3, [pc, #588]	; (8004cb0 <StartTask+0xf98>)
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d012      	beq.n	8004a8e <StartTask+0xd76>
    							sprintf(st, "Rssi:%u Freq:%.1f S", RSSI, Freq);
 8004a68:	4b93      	ldr	r3, [pc, #588]	; (8004cb8 <StartTask+0xfa0>)
 8004a6a:	881b      	ldrh	r3, [r3, #0]
 8004a6c:	461c      	mov	r4, r3
 8004a6e:	4b8f      	ldr	r3, [pc, #572]	; (8004cac <StartTask+0xf94>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7fb fd68 	bl	8000548 <__aeabi_f2d>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8004a80:	e9cd 2300 	strd	r2, r3, [sp]
 8004a84:	4622      	mov	r2, r4
 8004a86:	498d      	ldr	r1, [pc, #564]	; (8004cbc <StartTask+0xfa4>)
 8004a88:	f00e ffca 	bl	8013a20 <siprintf>
 8004a8c:	e011      	b.n	8004ab2 <StartTask+0xd9a>
    							sprintf(st, "Rssi:%u Freq:%.1f", RSSI, Freq);
 8004a8e:	4b8a      	ldr	r3, [pc, #552]	; (8004cb8 <StartTask+0xfa0>)
 8004a90:	881b      	ldrh	r3, [r3, #0]
 8004a92:	461c      	mov	r4, r3
 8004a94:	4b85      	ldr	r3, [pc, #532]	; (8004cac <StartTask+0xf94>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7fb fd55 	bl	8000548 <__aeabi_f2d>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8004aa6:	e9cd 2300 	strd	r2, r3, [sp]
 8004aaa:	4622      	mov	r2, r4
 8004aac:	4984      	ldr	r1, [pc, #528]	; (8004cc0 <StartTask+0xfa8>)
 8004aae:	f00e ffb7 	bl	8013a20 <siprintf>
    						showLine(st, lin5, &lil, false);
 8004ab2:	f107 020c 	add.w	r2, r7, #12
 8004ab6:	f8b7 10d6 	ldrh.w	r1, [r7, #214]	; 0xd6
 8004aba:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8004abe:	2300      	movs	r3, #0
 8004ac0:	f7fe f900 	bl	8002cc4 <showLine>
    						sprintf(sta, "%s", nameStation(Freq));
 8004ac4:	4b79      	ldr	r3, [pc, #484]	; (8004cac <StartTask+0xf94>)
 8004ac6:	edd3 7a00 	vldr	s15, [r3]
 8004aca:	eeb0 0a67 	vmov.f32	s0, s15
 8004ace:	f7fd ffcf 	bl	8002a70 <nameStation>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004ad8:	497a      	ldr	r1, [pc, #488]	; (8004cc4 <StartTask+0xfac>)
 8004ada:	4618      	mov	r0, r3
 8004adc:	f00e ffa0 	bl	8013a20 <siprintf>
    						showLine(sta, lin6, &lia, true);
 8004ae0:	f107 0208 	add.w	r2, r7, #8
 8004ae4:	f8b7 10d4 	ldrh.w	r1, [r7, #212]	; 0xd4
 8004ae8:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8004aec:	2301      	movs	r3, #1
 8004aee:	f7fe f8e9 	bl	8002cc4 <showLine>
    						Report(1, "[que:%u] set new Freq to %.1f %s (Chan:%u)\r\n", cntEvt, Freq, sta, Chan);
 8004af2:	4b75      	ldr	r3, [pc, #468]	; (8004cc8 <StartTask+0xfb0>)
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	461c      	mov	r4, r3
 8004afa:	4b6c      	ldr	r3, [pc, #432]	; (8004cac <StartTask+0xf94>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7fb fd22 	bl	8000548 <__aeabi_f2d>
 8004b04:	4602      	mov	r2, r0
 8004b06:	460b      	mov	r3, r1
 8004b08:	496a      	ldr	r1, [pc, #424]	; (8004cb4 <StartTask+0xf9c>)
 8004b0a:	8809      	ldrh	r1, [r1, #0]
 8004b0c:	9103      	str	r1, [sp, #12]
 8004b0e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004b12:	9102      	str	r1, [sp, #8]
 8004b14:	e9cd 2300 	strd	r2, r3, [sp]
 8004b18:	4622      	mov	r2, r4
 8004b1a:	496c      	ldr	r1, [pc, #432]	; (8004ccc <StartTask+0xfb4>)
 8004b1c:	2001      	movs	r0, #1
 8004b1e:	f7fe fab3 	bl	8003088 <Report>
				break;
 8004b22:	e318      	b.n	8005156 <StartTask+0x143e>
    			case evt_Scan:
    				if (!scan) {
 8004b24:	4b6a      	ldr	r3, [pc, #424]	; (8004cd0 <StartTask+0xfb8>)
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f040 8315 	bne.w	800515a <StartTask+0x1442>
    					scan = 1;
 8004b30:	4b67      	ldr	r3, [pc, #412]	; (8004cd0 <StartTask+0xfb8>)
 8004b32:	2201      	movs	r2, #1
 8004b34:	701a      	strb	r2, [r3, #0]
    					rda5807_StartSeek(seek_up);
 8004b36:	4b67      	ldr	r3, [pc, #412]	; (8004cd4 <StartTask+0xfbc>)
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f001 f8ad 	bl	8005c9c <rda5807_StartSeek>
    				}
    			break;
 8004b42:	e30a      	b.n	800515a <StartTask+0x1442>
    			case evt_Ver:
    				Report(1, "Ver.%s\r\n", ver);
 8004b44:	4b64      	ldr	r3, [pc, #400]	; (8004cd8 <StartTask+0xfc0>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	461a      	mov	r2, r3
 8004b4a:	4964      	ldr	r1, [pc, #400]	; (8004cdc <StartTask+0xfc4>)
 8004b4c:	2001      	movs	r0, #1
 8004b4e:	f7fe fa9b 	bl	8003088 <Report>
    			break;
 8004b52:	e303      	b.n	800515c <StartTask+0x1444>
    			case evt_Sec:
    			{
	#ifdef SET_DISPLAY
    				dl = sec2str(st);
 8004b54:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7fe f9fb 	bl	8002f54 <sec2str>
 8004b5e:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
    				x = ((SCREEN_WIDTH - (lfnt->FontWidth * dl)) >> 1) & 0x7f;
 8004b62:	4b5f      	ldr	r3, [pc, #380]	; (8004ce0 <StartTask+0xfc8>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	461a      	mov	r2, r3
 8004b6a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004b6e:	fb02 f303 	mul.w	r3, r2, r3
 8004b72:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8004b76:	105b      	asrs	r3, r3, #1
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b7e:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
    				ST7565_Print(x, lin1, st, lfnt, 0, PIX_OFF);
 8004b82:	f9b7 00d2 	ldrsh.w	r0, [r7, #210]	; 0xd2
 8004b86:	f9b7 10de 	ldrsh.w	r1, [r7, #222]	; 0xde
 8004b8a:	4b55      	ldr	r3, [pc, #340]	; (8004ce0 <StartTask+0xfc8>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8004b92:	2400      	movs	r4, #0
 8004b94:	9401      	str	r4, [sp, #4]
 8004b96:	2400      	movs	r4, #0
 8004b98:	9400      	str	r4, [sp, #0]
 8004b9a:	f7fc feeb 	bl	8001974 <ST7565_Print>
	#endif
    				//
    				if (scan) {
 8004b9e:	4b4c      	ldr	r3, [pc, #304]	; (8004cd0 <StartTask+0xfb8>)
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d050      	beq.n	8004c4a <StartTask+0xf32>
    					if (rda5807_Get_SeekTuneReadyFlag()) {
 8004ba8:	f001 f8a2 	bl	8005cf0 <rda5807_Get_SeekTuneReadyFlag>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d04b      	beq.n	8004c4a <StartTask+0xf32>
    						Freq = (float)rda5807_GetFreq_In100Khz();
 8004bb2:	f001 f833 	bl	8005c1c <rda5807_GetFreq_In100Khz>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	ee07 3a90 	vmov	s15, r3
 8004bbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bc0:	4b3a      	ldr	r3, [pc, #232]	; (8004cac <StartTask+0xf94>)
 8004bc2:	edc3 7a00 	vstr	s15, [r3]
    						Freq /= 10;
 8004bc6:	4b39      	ldr	r3, [pc, #228]	; (8004cac <StartTask+0xf94>)
 8004bc8:	ed93 7a00 	vldr	s14, [r3]
 8004bcc:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004bd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004bd4:	4b35      	ldr	r3, [pc, #212]	; (8004cac <StartTask+0xf94>)
 8004bd6:	edc3 7a00 	vstr	s15, [r3]
    						scan = 0;
 8004bda:	4b3d      	ldr	r3, [pc, #244]	; (8004cd0 <StartTask+0xfb8>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	701a      	strb	r2, [r3, #0]
    						Chan = rda5807_Get_Channel();
 8004be0:	f001 f8b0 	bl	8005d44 <rda5807_Get_Channel>
 8004be4:	4603      	mov	r3, r0
 8004be6:	461a      	mov	r2, r3
 8004be8:	4b32      	ldr	r3, [pc, #200]	; (8004cb4 <StartTask+0xf9c>)
 8004bea:	801a      	strh	r2, [r3, #0]
    						sprintf(sta, "%s", nameStation(Freq));
 8004bec:	4b2f      	ldr	r3, [pc, #188]	; (8004cac <StartTask+0xf94>)
 8004bee:	edd3 7a00 	vldr	s15, [r3]
 8004bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8004bf6:	f7fd ff3b 	bl	8002a70 <nameStation>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004c00:	4930      	ldr	r1, [pc, #192]	; (8004cc4 <StartTask+0xfac>)
 8004c02:	4618      	mov	r0, r3
 8004c04:	f00e ff0c 	bl	8013a20 <siprintf>
    						showLine(sta, lin6, &lia, true);
 8004c08:	f107 0208 	add.w	r2, r7, #8
 8004c0c:	f8b7 10d4 	ldrh.w	r1, [r7, #212]	; 0xd4
 8004c10:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8004c14:	2301      	movs	r3, #1
 8004c16:	f7fe f855 	bl	8002cc4 <showLine>
    						Report(1, "[que:%u] set new Freq to %.1f %s (Chan:%u)\r\n", cntEvt, Freq, sta, Chan);
 8004c1a:	4b2b      	ldr	r3, [pc, #172]	; (8004cc8 <StartTask+0xfb0>)
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	461c      	mov	r4, r3
 8004c22:	4b22      	ldr	r3, [pc, #136]	; (8004cac <StartTask+0xf94>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7fb fc8e 	bl	8000548 <__aeabi_f2d>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	4920      	ldr	r1, [pc, #128]	; (8004cb4 <StartTask+0xf9c>)
 8004c32:	8809      	ldrh	r1, [r1, #0]
 8004c34:	9103      	str	r1, [sp, #12]
 8004c36:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004c3a:	9102      	str	r1, [sp, #8]
 8004c3c:	e9cd 2300 	strd	r2, r3, [sp]
 8004c40:	4622      	mov	r2, r4
 8004c42:	4922      	ldr	r1, [pc, #136]	; (8004ccc <StartTask+0xfb4>)
 8004c44:	2001      	movs	r0, #1
 8004c46:	f7fe fa1f 	bl	8003088 <Report>
    					}
    				}
    				//
    				uint16_t rssi = rda5807_rssi();
 8004c4a:	f000 fd25 	bl	8005698 <rda5807_rssi>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
    				if (rssi != RSSI) {
 8004c54:	4b18      	ldr	r3, [pc, #96]	; (8004cb8 <StartTask+0xfa0>)
 8004c56:	881b      	ldrh	r3, [r3, #0]
 8004c58:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d05c      	beq.n	8004d1a <StartTask+0x1002>
    					RSSI = rssi;
 8004c60:	4a15      	ldr	r2, [pc, #84]	; (8004cb8 <StartTask+0xfa0>)
 8004c62:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8004c66:	8013      	strh	r3, [r2, #0]
    					stereo = rda5807_Get_StereoMonoFlag();
 8004c68:	f001 f854 	bl	8005d14 <rda5807_Get_StereoMonoFlag>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	461a      	mov	r2, r3
 8004c70:	4b0f      	ldr	r3, [pc, #60]	; (8004cb0 <StartTask+0xf98>)
 8004c72:	701a      	strb	r2, [r3, #0]
	#ifdef SET_DISPLAY
    					if (stereo)
 8004c74:	4b0e      	ldr	r3, [pc, #56]	; (8004cb0 <StartTask+0xf98>)
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d033      	beq.n	8004ce4 <StartTask+0xfcc>
    						sprintf(st, "Rssi:%u Freq:%.1f S", RSSI, Freq);
 8004c7c:	4b0e      	ldr	r3, [pc, #56]	; (8004cb8 <StartTask+0xfa0>)
 8004c7e:	881b      	ldrh	r3, [r3, #0]
 8004c80:	461c      	mov	r4, r3
 8004c82:	4b0a      	ldr	r3, [pc, #40]	; (8004cac <StartTask+0xf94>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7fb fc5e 	bl	8000548 <__aeabi_f2d>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	460b      	mov	r3, r1
 8004c90:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8004c94:	e9cd 2300 	strd	r2, r3, [sp]
 8004c98:	4622      	mov	r2, r4
 8004c9a:	4908      	ldr	r1, [pc, #32]	; (8004cbc <StartTask+0xfa4>)
 8004c9c:	f00e fec0 	bl	8013a20 <siprintf>
 8004ca0:	e032      	b.n	8004d08 <StartTask+0xff0>
 8004ca2:	bf00      	nop
 8004ca4:	20000108 	.word	0x20000108
 8004ca8:	20002f48 	.word	0x20002f48
 8004cac:	20000104 	.word	0x20000104
 8004cb0:	20002f54 	.word	0x20002f54
 8004cb4:	20002f4c 	.word	0x20002f4c
 8004cb8:	20002f4e 	.word	0x20002f4e
 8004cbc:	080177d0 	.word	0x080177d0
 8004cc0:	080177e4 	.word	0x080177e4
 8004cc4:	08017600 	.word	0x08017600
 8004cc8:	20001f17 	.word	0x20001f17
 8004ccc:	080179d8 	.word	0x080179d8
 8004cd0:	20002f51 	.word	0x20002f51
 8004cd4:	2000010e 	.word	0x2000010e
 8004cd8:	20000004 	.word	0x20000004
 8004cdc:	08017a08 	.word	0x08017a08
 8004ce0:	20002f40 	.word	0x20002f40
    					else
    						sprintf(st, "Rssi:%u Freq:%.1f", RSSI, Freq);
 8004ce4:	4b9d      	ldr	r3, [pc, #628]	; (8004f5c <StartTask+0x1244>)
 8004ce6:	881b      	ldrh	r3, [r3, #0]
 8004ce8:	461c      	mov	r4, r3
 8004cea:	4b9d      	ldr	r3, [pc, #628]	; (8004f60 <StartTask+0x1248>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fb fc2a 	bl	8000548 <__aeabi_f2d>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8004cfc:	e9cd 2300 	strd	r2, r3, [sp]
 8004d00:	4622      	mov	r2, r4
 8004d02:	4998      	ldr	r1, [pc, #608]	; (8004f64 <StartTask+0x124c>)
 8004d04:	f00e fe8c 	bl	8013a20 <siprintf>
    					showLine(st, lin5, &lil, false);
 8004d08:	f107 020c 	add.w	r2, r7, #12
 8004d0c:	f8b7 10d6 	ldrh.w	r1, [r7, #214]	; 0xd6
 8004d10:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8004d14:	2300      	movs	r3, #0
 8004d16:	f7fd ffd5 	bl	8002cc4 <showLine>
    					//showLine(sta, lin6, &lia, true);
    					////Report(1, "ChipID:0x%x Chan:%u Freq:%.2f RSSI:%u\r\n", rdaID, Chan, Freq, RSSI);
	#endif
    				}
    				//
    				if (devError) {
 8004d1a:	4b93      	ldr	r3, [pc, #588]	; (8004f68 <StartTask+0x1250>)
 8004d1c:	881b      	ldrh	r3, [r3, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00d      	beq.n	8004d3e <StartTask+0x1026>
    					dl = sprintf(tmp, "devError : 0x%04X", devError);
 8004d22:	4b91      	ldr	r3, [pc, #580]	; (8004f68 <StartTask+0x1250>)
 8004d24:	881b      	ldrh	r3, [r3, #0]
 8004d26:	461a      	mov	r2, r3
 8004d28:	4990      	ldr	r1, [pc, #576]	; (8004f6c <StartTask+0x1254>)
 8004d2a:	4891      	ldr	r0, [pc, #580]	; (8004f70 <StartTask+0x1258>)
 8004d2c:	f00e fe78 	bl	8013a20 <siprintf>
 8004d30:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
    					lastErr = devError;
 8004d34:	4b8c      	ldr	r3, [pc, #560]	; (8004f68 <StartTask+0x1250>)
 8004d36:	881b      	ldrh	r3, [r3, #0]
 8004d38:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
 8004d3c:	e013      	b.n	8004d66 <StartTask+0x104e>
    				} else {
    					if (lastErr) {
 8004d3e:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00c      	beq.n	8004d60 <StartTask+0x1048>
    						dl = sprintf(tmp, "Ver.%s", ver);
 8004d46:	4b8b      	ldr	r3, [pc, #556]	; (8004f74 <StartTask+0x125c>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	498a      	ldr	r1, [pc, #552]	; (8004f78 <StartTask+0x1260>)
 8004d4e:	4888      	ldr	r0, [pc, #544]	; (8004f70 <StartTask+0x1258>)
 8004d50:	f00e fe66 	bl	8013a20 <siprintf>
 8004d54:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
    						lastErr = devOK;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
 8004d5e:	e002      	b.n	8004d66 <StartTask+0x104e>
    					} else dl = 0;
 8004d60:	2300      	movs	r3, #0
 8004d62:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    				}
	#ifdef SET_DISPLAY
    				if (dl) {
 8004d66:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d036      	beq.n	8004ddc <StartTask+0x10c4>
    					ST7565_DrawFilledRectangle(0, SCREEN_HEIGHT - lfnt->FontHeight, SCREEN_WIDTH - 1, lfnt->FontHeight, PIX_OFF);
 8004d6e:	4b83      	ldr	r3, [pc, #524]	; (8004f7c <StartTask+0x1264>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	785b      	ldrb	r3, [r3, #1]
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	b219      	sxth	r1, r3
 8004d7e:	4b7f      	ldr	r3, [pc, #508]	; (8004f7c <StartTask+0x1264>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	785b      	ldrb	r3, [r3, #1]
 8004d84:	b21b      	sxth	r3, r3
 8004d86:	2200      	movs	r2, #0
 8004d88:	9200      	str	r2, [sp, #0]
 8004d8a:	227f      	movs	r2, #127	; 0x7f
 8004d8c:	2000      	movs	r0, #0
 8004d8e:	f7fd f84a 	bl	8001e26 <ST7565_DrawFilledRectangle>
    					x = ((SCREEN_WIDTH - (lfnt->FontWidth * dl)) >> 1) & 0x7f;
 8004d92:	4b7a      	ldr	r3, [pc, #488]	; (8004f7c <StartTask+0x1264>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	461a      	mov	r2, r3
 8004d9a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004d9e:	fb02 f303 	mul.w	r3, r2, r3
 8004da2:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8004da6:	105b      	asrs	r3, r3, #1
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dae:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
    					ST7565_Print(x, SCREEN_HEIGHT - lfnt->FontHeight, tmp, lfnt, 1, PIX_ON);
 8004db2:	f9b7 00d2 	ldrsh.w	r0, [r7, #210]	; 0xd2
 8004db6:	4b71      	ldr	r3, [pc, #452]	; (8004f7c <StartTask+0x1264>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	785b      	ldrb	r3, [r3, #1]
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	b219      	sxth	r1, r3
 8004dc6:	4b6d      	ldr	r3, [pc, #436]	; (8004f7c <StartTask+0x1264>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	9201      	str	r2, [sp, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	9200      	str	r2, [sp, #0]
 8004dd2:	4a67      	ldr	r2, [pc, #412]	; (8004f70 <StartTask+0x1258>)
 8004dd4:	f7fc fdce 	bl	8001974 <ST7565_Print>
    					ST7565_Update();
 8004dd8:	f7fc fc1c 	bl	8001614 <ST7565_Update>
    				}
    				//
    				ST7565_Update();
 8004ddc:	f7fc fc1a 	bl	8001614 <ST7565_Update>
	#endif
    			}
    			break;
 8004de0:	e1bc      	b.n	800515c <StartTask+0x1444>
    			case evt_Evt:
    				Report(1, "evtQueue counter : %u\r\n", getQueCount(evtQueHandle));
 8004de2:	4b67      	ldr	r3, [pc, #412]	; (8004f80 <StartTask+0x1268>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7fd fe36 	bl	8002a58 <getQueCount>
 8004dec:	4603      	mov	r3, r0
 8004dee:	461a      	mov	r2, r3
 8004df0:	4964      	ldr	r1, [pc, #400]	; (8004f84 <StartTask+0x126c>)
 8004df2:	2001      	movs	r0, #1
 8004df4:	f7fe f948 	bl	8003088 <Report>
    			break;
 8004df8:	e1b0      	b.n	800515c <StartTask+0x1444>
    			case evt_Ack:
    				Report(1, "ackQueue counter : %u\r\n", getQueCount(ackQueHandle));
 8004dfa:	4b63      	ldr	r3, [pc, #396]	; (8004f88 <StartTask+0x1270>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7fd fe2a 	bl	8002a58 <getQueCount>
 8004e04:	4603      	mov	r3, r0
 8004e06:	461a      	mov	r2, r3
 8004e08:	4960      	ldr	r1, [pc, #384]	; (8004f8c <StartTask+0x1274>)
 8004e0a:	2001      	movs	r0, #1
 8004e0c:	f7fe f93c 	bl	8003088 <Report>
    			break;
 8004e10:	e1a4      	b.n	800515c <StartTask+0x1444>
    			case evt_Cmd:
    				Report(1, "cmdQueue counter : %u\r\n", getQueCount(cmdQueHandle));
 8004e12:	4b5f      	ldr	r3, [pc, #380]	; (8004f90 <StartTask+0x1278>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7fd fe1e 	bl	8002a58 <getQueCount>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	461a      	mov	r2, r3
 8004e20:	495c      	ldr	r1, [pc, #368]	; (8004f94 <StartTask+0x127c>)
 8004e22:	2001      	movs	r0, #1
 8004e24:	f7fe f930 	bl	8003088 <Report>
    			break;
 8004e28:	e198      	b.n	800515c <StartTask+0x1444>
    			case evt_Clr:
    				devError = devOK;
 8004e2a:	4b4f      	ldr	r3, [pc, #316]	; (8004f68 <StartTask+0x1250>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	801a      	strh	r2, [r3, #0]
    				Report(1, "[que:%u] Clear all Errors...\r\n", cntEvt);
 8004e30:	4b59      	ldr	r3, [pc, #356]	; (8004f98 <StartTask+0x1280>)
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	461a      	mov	r2, r3
 8004e38:	4958      	ldr	r1, [pc, #352]	; (8004f9c <StartTask+0x1284>)
 8004e3a:	2001      	movs	r0, #1
 8004e3c:	f7fe f924 	bl	8003088 <Report>
    			break;
 8004e40:	e18c      	b.n	800515c <StartTask+0x1444>
    			case evt_Help:
    				stx[0] = '\0';
 8004e42:	4b57      	ldr	r3, [pc, #348]	; (8004fa0 <StartTask+0x1288>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	701a      	strb	r2, [r3, #0]
    				for (int8_t i = 0; i < MAX_CMDS; i++) sprintf(stx+strlen(stx), "\t%s\r\n", s_cmds[i]);
 8004e48:	2300      	movs	r3, #0
 8004e4a:	f887 30f9 	strb.w	r3, [r7, #249]	; 0xf9
 8004e4e:	e015      	b.n	8004e7c <StartTask+0x1164>
 8004e50:	4853      	ldr	r0, [pc, #332]	; (8004fa0 <StartTask+0x1288>)
 8004e52:	f7fb f9bd 	bl	80001d0 <strlen>
 8004e56:	4603      	mov	r3, r0
 8004e58:	4a51      	ldr	r2, [pc, #324]	; (8004fa0 <StartTask+0x1288>)
 8004e5a:	1898      	adds	r0, r3, r2
 8004e5c:	f997 30f9 	ldrsb.w	r3, [r7, #249]	; 0xf9
 8004e60:	4a50      	ldr	r2, [pc, #320]	; (8004fa4 <StartTask+0x128c>)
 8004e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e66:	461a      	mov	r2, r3
 8004e68:	494f      	ldr	r1, [pc, #316]	; (8004fa8 <StartTask+0x1290>)
 8004e6a:	f00e fdd9 	bl	8013a20 <siprintf>
 8004e6e:	f997 30f9 	ldrsb.w	r3, [r7, #249]	; 0xf9
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	3301      	adds	r3, #1
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	f887 30f9 	strb.w	r3, [r7, #249]	; 0xf9
 8004e7c:	f997 30f9 	ldrsb.w	r3, [r7, #249]	; 0xf9
 8004e80:	2b19      	cmp	r3, #25
 8004e82:	dde5      	ble.n	8004e50 <StartTask+0x1138>
    				Report(0, "%s", stx);
 8004e84:	4a46      	ldr	r2, [pc, #280]	; (8004fa0 <StartTask+0x1288>)
 8004e86:	4949      	ldr	r1, [pc, #292]	; (8004fac <StartTask+0x1294>)
 8004e88:	2000      	movs	r0, #0
 8004e8a:	f7fe f8fd 	bl	8003088 <Report>
    			break;
 8004e8e:	e165      	b.n	800515c <StartTask+0x1444>
    			case evt_Restart:
    				restart = 1;
 8004e90:	4b47      	ldr	r3, [pc, #284]	; (8004fb0 <StartTask+0x1298>)
 8004e92:	2201      	movs	r2, #1
 8004e94:	701a      	strb	r2, [r3, #0]
    				Report(1, "[que:%u] Restart system...\r\n", cntEvt);
 8004e96:	4b40      	ldr	r3, [pc, #256]	; (8004f98 <StartTask+0x1280>)
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	4945      	ldr	r1, [pc, #276]	; (8004fb4 <StartTask+0x129c>)
 8004ea0:	2001      	movs	r0, #1
 8004ea2:	f7fe f8f1 	bl	8003088 <Report>
    			break;
 8004ea6:	e159      	b.n	800515c <StartTask+0x1444>
    			case evt_Epoch:
    				set_Date(epoch);
 8004ea8:	4b43      	ldr	r3, [pc, #268]	; (8004fb8 <StartTask+0x12a0>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7fd fff1 	bl	8002e94 <set_Date>
    				Report(1, "[que:%u] Set Unix TimeStamp to %lu\r\n", cntEvt, epoch);
 8004eb2:	4b39      	ldr	r3, [pc, #228]	; (8004f98 <StartTask+0x1280>)
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	461a      	mov	r2, r3
 8004eba:	4b3f      	ldr	r3, [pc, #252]	; (8004fb8 <StartTask+0x12a0>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	493f      	ldr	r1, [pc, #252]	; (8004fbc <StartTask+0x12a4>)
 8004ec0:	2001      	movs	r0, #1
 8004ec2:	f7fe f8e1 	bl	8003088 <Report>
    			break;
 8004ec6:	e149      	b.n	800515c <StartTask+0x1444>
    			case evt_Err:
    				Report(1, "[que:%u] Error input from uart\r\n", cntEvt);
 8004ec8:	4b33      	ldr	r3, [pc, #204]	; (8004f98 <StartTask+0x1280>)
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	461a      	mov	r2, r3
 8004ed0:	493b      	ldr	r1, [pc, #236]	; (8004fc0 <StartTask+0x12a8>)
 8004ed2:	2001      	movs	r0, #1
 8004ed4:	f7fe f8d8 	bl	8003088 <Report>
    			break;
 8004ed8:	e140      	b.n	800515c <StartTask+0x1444>
	#ifdef SET_W25FLASH
    			case evt_sRead:
    			case evt_sNext:
    			{
    				uint32_t w25_adr = (adr_sector * W25qxx_getSectorSize()) + offset_sector;
 8004eda:	f001 ff65 	bl	8006da8 <W25qxx_getSectorSize>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	4a38      	ldr	r2, [pc, #224]	; (8004fc4 <StartTask+0x12ac>)
 8004ee2:	6812      	ldr	r2, [r2, #0]
 8004ee4:	fb02 f303 	mul.w	r3, r2, r3
 8004ee8:	4a37      	ldr	r2, [pc, #220]	; (8004fc8 <StartTask+0x12b0>)
 8004eea:	6812      	ldr	r2, [r2, #0]
 8004eec:	4413      	add	r3, r2
 8004eee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    				uint32_t dlin = list_sector;
 8004ef2:	4b36      	ldr	r3, [pc, #216]	; (8004fcc <StartTask+0x12b4>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    				int step = 32;
 8004efa:	2320      	movs	r3, #32
 8004efc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    				uint32_t ind = 0;
 8004f00:	2300      	movs	r3, #0
 8004f02:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    				W25qxx_ReadSector(fs_work, adr_sector, offset_sector, dlin);
 8004f06:	4b2f      	ldr	r3, [pc, #188]	; (8004fc4 <StartTask+0x12ac>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	4b2e      	ldr	r3, [pc, #184]	; (8004fc8 <StartTask+0x12b0>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	461a      	mov	r2, r3
 8004f12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004f16:	482e      	ldr	r0, [pc, #184]	; (8004fd0 <StartTask+0x12b8>)
 8004f18:	f002 fa58 	bl	80073cc <W25qxx_ReadSector>
    				Report(0, "Read sector:%d offset:%d len:%u\r\n", adr_sector, offset_sector, dlin);
 8004f1c:	4b29      	ldr	r3, [pc, #164]	; (8004fc4 <StartTask+0x12ac>)
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	4b29      	ldr	r3, [pc, #164]	; (8004fc8 <StartTask+0x12b0>)
 8004f22:	6819      	ldr	r1, [r3, #0]
 8004f24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	4929      	ldr	r1, [pc, #164]	; (8004fd4 <StartTask+0x12bc>)
 8004f2e:	2000      	movs	r0, #0
 8004f30:	f7fe f8aa 	bl	8003088 <Report>
    				while (ind < dlin) {
 8004f34:	e09d      	b.n	8005072 <StartTask+0x135a>
    					strf[0] = '\0';
 8004f36:	4b28      	ldr	r3, [pc, #160]	; (8004fd8 <StartTask+0x12c0>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	701a      	strb	r2, [r3, #0]
    					while (1) {
    						sprintf(strf+strlen(strf), "%06X ", (unsigned int)w25_adr);
 8004f3c:	4826      	ldr	r0, [pc, #152]	; (8004fd8 <StartTask+0x12c0>)
 8004f3e:	f7fb f947 	bl	80001d0 <strlen>
 8004f42:	4603      	mov	r3, r0
 8004f44:	4a24      	ldr	r2, [pc, #144]	; (8004fd8 <StartTask+0x12c0>)
 8004f46:	4413      	add	r3, r2
 8004f48:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004f4c:	4923      	ldr	r1, [pc, #140]	; (8004fdc <StartTask+0x12c4>)
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f00e fd66 	bl	8013a20 <siprintf>
    						for (int i = 0; i < step; i++) sprintf(strf+strlen(strf), " %02X", fs_work[i + ind]);
 8004f54:	2300      	movs	r3, #0
 8004f56:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004f5a:	e057      	b.n	800500c <StartTask+0x12f4>
 8004f5c:	20002f4e 	.word	0x20002f4e
 8004f60:	20000104 	.word	0x20000104
 8004f64:	080177e4 	.word	0x080177e4
 8004f68:	20001b00 	.word	0x20001b00
 8004f6c:	08017a14 	.word	0x08017a14
 8004f70:	20001280 	.word	0x20001280
 8004f74:	20000004 	.word	0x20000004
 8004f78:	08017798 	.word	0x08017798
 8004f7c:	20002f40 	.word	0x20002f40
 8004f80:	20000e6c 	.word	0x20000e6c
 8004f84:	08017a28 	.word	0x08017a28
 8004f88:	20000e74 	.word	0x20000e74
 8004f8c:	08017a40 	.word	0x08017a40
 8004f90:	20000e70 	.word	0x20000e70
 8004f94:	08017a58 	.word	0x08017a58
 8004f98:	20001f17 	.word	0x20001f17
 8004f9c:	08017a70 	.word	0x08017a70
 8004fa0:	20000e80 	.word	0x20000e80
 8004fa4:	20000020 	.word	0x20000020
 8004fa8:	08017a90 	.word	0x08017a90
 8004fac:	08017600 	.word	0x08017600
 8004fb0:	20001f14 	.word	0x20001f14
 8004fb4:	08017a98 	.word	0x08017a98
 8004fb8:	2000001c 	.word	0x2000001c
 8004fbc:	08017ab8 	.word	0x08017ab8
 8004fc0:	08017ae0 	.word	0x08017ae0
 8004fc4:	20001f18 	.word	0x20001f18
 8004fc8:	20001f1c 	.word	0x20001f1c
 8004fcc:	20001f20 	.word	0x20001f20
 8004fd0:	20001f2c 	.word	0x20001f2c
 8004fd4:	08017b04 	.word	0x08017b04
 8004fd8:	20001700 	.word	0x20001700
 8004fdc:	08017b28 	.word	0x08017b28
 8004fe0:	48b5      	ldr	r0, [pc, #724]	; (80052b8 <StartTask+0x15a0>)
 8004fe2:	f7fb f8f5 	bl	80001d0 <strlen>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	4ab3      	ldr	r2, [pc, #716]	; (80052b8 <StartTask+0x15a0>)
 8004fea:	1898      	adds	r0, r3, r2
 8004fec:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004ff0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004ff4:	4413      	add	r3, r2
 8004ff6:	4ab1      	ldr	r2, [pc, #708]	; (80052bc <StartTask+0x15a4>)
 8004ff8:	5cd3      	ldrb	r3, [r2, r3]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	49b0      	ldr	r1, [pc, #704]	; (80052c0 <StartTask+0x15a8>)
 8004ffe:	f00e fd0f 	bl	8013a20 <siprintf>
 8005002:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005006:	3301      	adds	r3, #1
 8005008:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800500c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8005010:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005014:	429a      	cmp	r2, r3
 8005016:	dbe3      	blt.n	8004fe0 <StartTask+0x12c8>
    						strcat(strf, "\r\n");
 8005018:	48a7      	ldr	r0, [pc, #668]	; (80052b8 <StartTask+0x15a0>)
 800501a:	f7fb f8d9 	bl	80001d0 <strlen>
 800501e:	4603      	mov	r3, r0
 8005020:	461a      	mov	r2, r3
 8005022:	4ba5      	ldr	r3, [pc, #660]	; (80052b8 <StartTask+0x15a0>)
 8005024:	4413      	add	r3, r2
 8005026:	4aa7      	ldr	r2, [pc, #668]	; (80052c4 <StartTask+0x15ac>)
 8005028:	8811      	ldrh	r1, [r2, #0]
 800502a:	7892      	ldrb	r2, [r2, #2]
 800502c:	8019      	strh	r1, [r3, #0]
 800502e:	709a      	strb	r2, [r3, #2]
    						w25_adr += step;
 8005030:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005034:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8005038:	4413      	add	r3, r2
 800503a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    						ind += step;
 800503e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005042:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8005046:	4413      	add	r3, r2
 8005048:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    						if (!(ind % W25qxx_getPageSize())) break;
 800504c:	f001 feb8 	bl	8006dc0 <W25qxx_getPageSize>
 8005050:	4602      	mov	r2, r0
 8005052:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005056:	fbb3 f1f2 	udiv	r1, r3, r2
 800505a:	fb01 f202 	mul.w	r2, r1, r2
 800505e:	1a9b      	subs	r3, r3, r2
 8005060:	2b00      	cmp	r3, #0
 8005062:	d000      	beq.n	8005066 <StartTask+0x134e>
    						sprintf(strf+strlen(strf), "%06X ", (unsigned int)w25_adr);
 8005064:	e76a      	b.n	8004f3c <StartTask+0x1224>
    						if (!(ind % W25qxx_getPageSize())) break;
 8005066:	bf00      	nop
    					}
    					Report(0, "%s", strf);
 8005068:	4a93      	ldr	r2, [pc, #588]	; (80052b8 <StartTask+0x15a0>)
 800506a:	4997      	ldr	r1, [pc, #604]	; (80052c8 <StartTask+0x15b0>)
 800506c:	2000      	movs	r0, #0
 800506e:	f7fe f80b 	bl	8003088 <Report>
    				while (ind < dlin) {
 8005072:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8005076:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800507a:	429a      	cmp	r2, r3
 800507c:	f4ff af5b 	bcc.w	8004f36 <StartTask+0x121e>
    				}
    			}
    			break;
 8005080:	e06c      	b.n	800515c <StartTask+0x1444>
    			case evt_sWrite:
    			{
    				uint32_t ss = W25qxx_getSectorSize();
 8005082:	f001 fe91 	bl	8006da8 <W25qxx_getSectorSize>
 8005086:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
    				if (!W25qxx_IsEmptySector(adr_sector, 0, ss)) W25qxx_EraseSector(adr_sector);
 800508a:	4b90      	ldr	r3, [pc, #576]	; (80052cc <StartTask+0x15b4>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8005092:	2100      	movs	r1, #0
 8005094:	4618      	mov	r0, r3
 8005096:	f001 fefd 	bl	8006e94 <W25qxx_IsEmptySector>
 800509a:	4603      	mov	r3, r0
 800509c:	f083 0301 	eor.w	r3, r3, #1
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d004      	beq.n	80050b0 <StartTask+0x1398>
 80050a6:	4b89      	ldr	r3, [pc, #548]	; (80052cc <StartTask+0x15b4>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f001 fe96 	bl	8006ddc <W25qxx_EraseSector>
    				memset(fs_work, byte_write, ss);
 80050b0:	4b87      	ldr	r3, [pc, #540]	; (80052d0 <StartTask+0x15b8>)
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80050b8:	4619      	mov	r1, r3
 80050ba:	4880      	ldr	r0, [pc, #512]	; (80052bc <StartTask+0x15a4>)
 80050bc:	f00d ff2f 	bl	8012f1e <memset>
    				if (len_write != -1) ss = len_write;
 80050c0:	4b84      	ldr	r3, [pc, #528]	; (80052d4 <StartTask+0x15bc>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050c8:	d003      	beq.n	80050d2 <StartTask+0x13ba>
 80050ca:	4b82      	ldr	r3, [pc, #520]	; (80052d4 <StartTask+0x15bc>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    				W25qxx_WriteSector(fs_work, adr_sector, offset_sector, ss);
 80050d2:	4b7e      	ldr	r3, [pc, #504]	; (80052cc <StartTask+0x15b4>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4619      	mov	r1, r3
 80050d8:	4b7f      	ldr	r3, [pc, #508]	; (80052d8 <StartTask+0x15c0>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	461a      	mov	r2, r3
 80050de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80050e2:	4876      	ldr	r0, [pc, #472]	; (80052bc <StartTask+0x15a4>)
 80050e4:	f002 f84a 	bl	800717c <W25qxx_WriteSector>
    				Report(0, "Fill sector:%d byte:%02X len:%d done\r\n", adr_sector, byte_write, ss);
 80050e8:	4b78      	ldr	r3, [pc, #480]	; (80052cc <StartTask+0x15b4>)
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	4b78      	ldr	r3, [pc, #480]	; (80052d0 <StartTask+0x15b8>)
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	4619      	mov	r1, r3
 80050f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	460b      	mov	r3, r1
 80050fa:	4978      	ldr	r1, [pc, #480]	; (80052dc <StartTask+0x15c4>)
 80050fc:	2000      	movs	r0, #0
 80050fe:	f7fd ffc3 	bl	8003088 <Report>
    			}
    			break;
 8005102:	e02b      	b.n	800515c <StartTask+0x1444>
    			case evt_sErase:
    				if (adr_sector == -1) {
 8005104:	4b71      	ldr	r3, [pc, #452]	; (80052cc <StartTask+0x15b4>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800510c:	d10c      	bne.n	8005128 <StartTask+0x1410>
    					Report(1, "Erase flash");
 800510e:	4974      	ldr	r1, [pc, #464]	; (80052e0 <StartTask+0x15c8>)
 8005110:	2001      	movs	r0, #1
 8005112:	f7fd ffb9 	bl	8003088 <Report>
    					flag_sector = true;
 8005116:	4b73      	ldr	r3, [pc, #460]	; (80052e4 <StartTask+0x15cc>)
 8005118:	2201      	movs	r2, #1
 800511a:	701a      	strb	r2, [r3, #0]
    					btime = HAL_GetTick();
 800511c:	f002 fa18 	bl	8007550 <HAL_GetTick>
 8005120:	4603      	mov	r3, r0
 8005122:	4a71      	ldr	r2, [pc, #452]	; (80052e8 <StartTask+0x15d0>)
 8005124:	6013      	str	r3, [r2, #0]
    				} else {
    					W25qxx_EraseSector(adr_sector);
    					Report(1, "Erase sector:%d done\r\n", adr_sector);
    				}
    			break;
 8005126:	e019      	b.n	800515c <StartTask+0x1444>
    					W25qxx_EraseSector(adr_sector);
 8005128:	4b68      	ldr	r3, [pc, #416]	; (80052cc <StartTask+0x15b4>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4618      	mov	r0, r3
 800512e:	f001 fe55 	bl	8006ddc <W25qxx_EraseSector>
    					Report(1, "Erase sector:%d done\r\n", adr_sector);
 8005132:	4b66      	ldr	r3, [pc, #408]	; (80052cc <StartTask+0x15b4>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	461a      	mov	r2, r3
 8005138:	496c      	ldr	r1, [pc, #432]	; (80052ec <StartTask+0x15d4>)
 800513a:	2001      	movs	r0, #1
 800513c:	f7fd ffa4 	bl	8003088 <Report>
    			break;
 8005140:	e00c      	b.n	800515c <StartTask+0x1444>
    			break;
 8005142:	bf00      	nop
 8005144:	e00a      	b.n	800515c <StartTask+0x1444>
    			break;
 8005146:	bf00      	nop
 8005148:	e008      	b.n	800515c <StartTask+0x1444>
    			break;
 800514a:	bf00      	nop
 800514c:	e006      	b.n	800515c <StartTask+0x1444>
    			break;
 800514e:	bf00      	nop
 8005150:	e004      	b.n	800515c <StartTask+0x1444>
    			break;
 8005152:	bf00      	nop
 8005154:	e002      	b.n	800515c <StartTask+0x1444>
				break;
 8005156:	bf00      	nop
 8005158:	e000      	b.n	800515c <StartTask+0x1444>
    			break;
 800515a:	bf00      	nop
	#endif
    		}
    		if ((evt >= evt_sRead) && (evt <= evt_sWrite)) {
 800515c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005160:	2b03      	cmp	r3, #3
 8005162:	dd0b      	ble.n	800517c <StartTask+0x1464>
 8005164:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005168:	2b07      	cmp	r3, #7
 800516a:	dc07      	bgt.n	800517c <StartTask+0x1464>
    			last_cmd_sector =  evt;//cmd_sector;
 800516c:	4a60      	ldr	r2, [pc, #384]	; (80052f0 <StartTask+0x15d8>)
 800516e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005172:	6013      	str	r3, [r2, #0]
    			cmd_sector = sNone;
 8005174:	4b5f      	ldr	r3, [pc, #380]	; (80052f4 <StartTask+0x15dc>)
 8005176:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800517a:	601a      	str	r2, [r3, #0]
    		}
    	}//evtQueueGet(....)


#ifdef SET_W25FLASH
    	if (flag_sector) {
 800517c:	4b59      	ldr	r3, [pc, #356]	; (80052e4 <StartTask+0x15cc>)
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d031      	beq.n	80051e8 <StartTask+0x14d0>
    		adr_sector++;
 8005184:	4b51      	ldr	r3, [pc, #324]	; (80052cc <StartTask+0x15b4>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	3301      	adds	r3, #1
 800518a:	4a50      	ldr	r2, [pc, #320]	; (80052cc <StartTask+0x15b4>)
 800518c:	6013      	str	r3, [r2, #0]
    		if (adr_sector >= W25qxx_getSectorCount()) {
 800518e:	f001 fdff 	bl	8006d90 <W25qxx_getSectorCount>
 8005192:	4603      	mov	r3, r0
 8005194:	4a4d      	ldr	r2, [pc, #308]	; (80052cc <StartTask+0x15b4>)
 8005196:	6812      	ldr	r2, [r2, #0]
 8005198:	4293      	cmp	r3, r2
 800519a:	d816      	bhi.n	80051ca <StartTask+0x14b2>
    			flag_sector = false;
 800519c:	4b51      	ldr	r3, [pc, #324]	; (80052e4 <StartTask+0x15cc>)
 800519e:	2200      	movs	r2, #0
 80051a0:	701a      	strb	r2, [r3, #0]
    			etime = HAL_GetTick();
 80051a2:	f002 f9d5 	bl	8007550 <HAL_GetTick>
 80051a6:	4603      	mov	r3, r0
 80051a8:	4a53      	ldr	r2, [pc, #332]	; (80052f8 <StartTask+0x15e0>)
 80051aa:	6013      	str	r3, [r2, #0]
    			Report(0, " done (%lu sec)\r\n", (etime - btime) / 1000);
 80051ac:	4b52      	ldr	r3, [pc, #328]	; (80052f8 <StartTask+0x15e0>)
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	4b4d      	ldr	r3, [pc, #308]	; (80052e8 <StartTask+0x15d0>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	4a51      	ldr	r2, [pc, #324]	; (80052fc <StartTask+0x15e4>)
 80051b8:	fba2 2303 	umull	r2, r3, r2, r3
 80051bc:	099b      	lsrs	r3, r3, #6
 80051be:	461a      	mov	r2, r3
 80051c0:	494f      	ldr	r1, [pc, #316]	; (8005300 <StartTask+0x15e8>)
 80051c2:	2000      	movs	r0, #0
 80051c4:	f7fd ff60 	bl	8003088 <Report>
 80051c8:	e00e      	b.n	80051e8 <StartTask+0x14d0>
    		} else {
    			W25qxx_EraseSector(adr_sector);
 80051ca:	4b40      	ldr	r3, [pc, #256]	; (80052cc <StartTask+0x15b4>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f001 fe04 	bl	8006ddc <W25qxx_EraseSector>
    			if (!(adr_sector % 8)) Report(0, ".");
 80051d4:	4b3d      	ldr	r3, [pc, #244]	; (80052cc <StartTask+0x15b4>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0307 	and.w	r3, r3, #7
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d103      	bne.n	80051e8 <StartTask+0x14d0>
 80051e0:	4948      	ldr	r1, [pc, #288]	; (8005304 <StartTask+0x15ec>)
 80051e2:	2000      	movs	r0, #0
 80051e4:	f7fd ff50 	bl	8003088 <Report>
    	}
#endif
    	//
    	//
    	//
    	if (devError) {
 80051e8:	4b47      	ldr	r3, [pc, #284]	; (8005308 <StartTask+0x15f0>)
 80051ea:	881b      	ldrh	r3, [r3, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d04f      	beq.n	8005290 <StartTask+0x1578>
    		errLedOn(true);
 80051f0:	2001      	movs	r0, #1
 80051f2:	f7fd fdd5 	bl	8002da0 <errLedOn>
    		HAL_Delay(50);
 80051f6:	2032      	movs	r0, #50	; 0x32
 80051f8:	f002 f9b6 	bl	8007568 <HAL_Delay>
    		errLedOn(false);
 80051fc:	2000      	movs	r0, #0
 80051fe:	f7fd fdcf 	bl	8002da0 <errLedOn>
    		if (last_devError != devError) {
 8005202:	4b42      	ldr	r3, [pc, #264]	; (800530c <StartTask+0x15f4>)
 8005204:	881a      	ldrh	r2, [r3, #0]
 8005206:	4b40      	ldr	r3, [pc, #256]	; (8005308 <StartTask+0x15f0>)
 8005208:	881b      	ldrh	r3, [r3, #0]
 800520a:	429a      	cmp	r2, r3
 800520c:	d04a      	beq.n	80052a4 <StartTask+0x158c>
    			last_devError = devError;
 800520e:	4b3e      	ldr	r3, [pc, #248]	; (8005308 <StartTask+0x15f0>)
 8005210:	881a      	ldrh	r2, [r3, #0]
 8005212:	4b3e      	ldr	r3, [pc, #248]	; (800530c <StartTask+0x15f4>)
 8005214:	801a      	strh	r2, [r3, #0]
    			tmp[0] = '\0';
 8005216:	4b3e      	ldr	r3, [pc, #248]	; (8005310 <StartTask+0x15f8>)
 8005218:	2200      	movs	r2, #0
 800521a:	701a      	strb	r2, [r3, #0]
    			uint16_t er = 0;
 800521c:	2300      	movs	r3, #0
 800521e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
    			for (int8_t i = 0; i < MAX_ERR_CODE; i++) {
 8005222:	2300      	movs	r3, #0
 8005224:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8005228:	e025      	b.n	8005276 <StartTask+0x155e>
    				er = devError & all_devErr[i];
 800522a:	f997 30e7 	ldrsb.w	r3, [r7, #231]	; 0xe7
 800522e:	4a39      	ldr	r2, [pc, #228]	; (8005314 <StartTask+0x15fc>)
 8005230:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005234:	4b34      	ldr	r3, [pc, #208]	; (8005308 <StartTask+0x15f0>)
 8005236:	881b      	ldrh	r3, [r3, #0]
 8005238:	4013      	ands	r3, r2
 800523a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
    				if (er) sprintf(tmp+strlen(tmp), " '%s'", errName(er));
 800523e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005242:	2b00      	cmp	r3, #0
 8005244:	d010      	beq.n	8005268 <StartTask+0x1550>
 8005246:	4832      	ldr	r0, [pc, #200]	; (8005310 <StartTask+0x15f8>)
 8005248:	f7fa ffc2 	bl	80001d0 <strlen>
 800524c:	4603      	mov	r3, r0
 800524e:	4a30      	ldr	r2, [pc, #192]	; (8005310 <StartTask+0x15f8>)
 8005250:	189c      	adds	r4, r3, r2
 8005252:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005256:	4618      	mov	r0, r3
 8005258:	f7fc fea0 	bl	8001f9c <errName>
 800525c:	4603      	mov	r3, r0
 800525e:	461a      	mov	r2, r3
 8005260:	492d      	ldr	r1, [pc, #180]	; (8005318 <StartTask+0x1600>)
 8005262:	4620      	mov	r0, r4
 8005264:	f00e fbdc 	bl	8013a20 <siprintf>
    			for (int8_t i = 0; i < MAX_ERR_CODE; i++) {
 8005268:	f997 30e7 	ldrsb.w	r3, [r7, #231]	; 0xe7
 800526c:	b2db      	uxtb	r3, r3
 800526e:	3301      	adds	r3, #1
 8005270:	b2db      	uxtb	r3, r3
 8005272:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8005276:	f997 30e7 	ldrsb.w	r3, [r7, #231]	; 0xe7
 800527a:	2b09      	cmp	r3, #9
 800527c:	ddd5      	ble.n	800522a <StartTask+0x1512>
    			}
    			Report(1, "Error 0x%04X %s\r\n", devError, tmp);
 800527e:	4b22      	ldr	r3, [pc, #136]	; (8005308 <StartTask+0x15f0>)
 8005280:	881b      	ldrh	r3, [r3, #0]
 8005282:	461a      	mov	r2, r3
 8005284:	4b22      	ldr	r3, [pc, #136]	; (8005310 <StartTask+0x15f8>)
 8005286:	4925      	ldr	r1, [pc, #148]	; (800531c <StartTask+0x1604>)
 8005288:	2001      	movs	r0, #1
 800528a:	f7fd fefd 	bl	8003088 <Report>
 800528e:	e009      	b.n	80052a4 <StartTask+0x158c>
    		}
    	} else {
    		if (HAL_GPIO_ReadPin(ERR_LED_GPIO_Port, ERR_LED_Pin)) errLedOn(false);
 8005290:	2108      	movs	r1, #8
 8005292:	4823      	ldr	r0, [pc, #140]	; (8005320 <StartTask+0x1608>)
 8005294:	f002 fe9c 	bl	8007fd0 <HAL_GPIO_ReadPin>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d002      	beq.n	80052a4 <StartTask+0x158c>
 800529e:	2000      	movs	r0, #0
 80052a0:	f7fd fd7e 	bl	8002da0 <errLedOn>
    while (!restart) {
 80052a4:	4b1f      	ldr	r3, [pc, #124]	; (8005324 <StartTask+0x160c>)
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	f43f a870 	beq.w	8004390 <StartTask+0x678>
    	//
    	//
    	//
    }//while (!restart)

    uint8_t sch = 3;
 80052b0:	2303      	movs	r3, #3
 80052b2:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
    while (!ird_exit && sch) {
 80052b6:	e040      	b.n	800533a <StartTask+0x1622>
 80052b8:	20001700 	.word	0x20001700
 80052bc:	20001f2c 	.word	0x20001f2c
 80052c0:	08017b30 	.word	0x08017b30
 80052c4:	08017b38 	.word	0x08017b38
 80052c8:	08017600 	.word	0x08017600
 80052cc:	20001f18 	.word	0x20001f18
 80052d0:	20000100 	.word	0x20000100
 80052d4:	20001f24 	.word	0x20001f24
 80052d8:	20001f1c 	.word	0x20001f1c
 80052dc:	08017b3c 	.word	0x08017b3c
 80052e0:	08017b64 	.word	0x08017b64
 80052e4:	20001f28 	.word	0x20001f28
 80052e8:	20002f30 	.word	0x20002f30
 80052ec:	08017b70 	.word	0x08017b70
 80052f0:	200000fc 	.word	0x200000fc
 80052f4:	200000f8 	.word	0x200000f8
 80052f8:	20002f34 	.word	0x20002f34
 80052fc:	10624dd3 	.word	0x10624dd3
 8005300:	08017b88 	.word	0x08017b88
 8005304:	08017b9c 	.word	0x08017b9c
 8005308:	20001b00 	.word	0x20001b00
 800530c:	20001b02 	.word	0x20001b02
 8005310:	20001280 	.word	0x20001280
 8005314:	08018838 	.word	0x08018838
 8005318:	08017ba0 	.word	0x08017ba0
 800531c:	08017ba8 	.word	0x08017ba8
 8005320:	48000800 	.word	0x48000800
 8005324:	20001f14 	.word	0x20001f14
    	HAL_Delay(1000);
 8005328:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800532c:	f002 f91c 	bl	8007568 <HAL_Delay>
    	sch--;
 8005330:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8005334:	3b01      	subs	r3, #1
 8005336:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
    while (!ird_exit && sch) {
 800533a:	4b0d      	ldr	r3, [pc, #52]	; (8005370 <StartTask+0x1658>)
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	b2db      	uxtb	r3, r3
 8005340:	f083 0301 	eor.w	r3, r3, #1
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <StartTask+0x163a>
 800534a:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1ea      	bne.n	8005328 <StartTask+0x1610>
    }

    Report(1, "[que:%u] Stop application...\r\n", cntEvt);
 8005352:	4b08      	ldr	r3, [pc, #32]	; (8005374 <StartTask+0x165c>)
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	b2db      	uxtb	r3, r3
 8005358:	461a      	mov	r2, r3
 800535a:	4907      	ldr	r1, [pc, #28]	; (8005378 <StartTask+0x1660>)
 800535c:	2001      	movs	r0, #1
 800535e:	f7fd fe93 	bl	8003088 <Report>

    HAL_Delay(350);
 8005362:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8005366:	f002 f8ff 	bl	8007568 <HAL_Delay>


    NVIC_SystemReset();
 800536a:	f7fc fdb5 	bl	8001ed8 <__NVIC_SystemReset>
 800536e:	bf00      	nop
 8005370:	2000012d 	.word	0x2000012d
 8005374:	20001f17 	.word	0x20001f17
 8005378:	08017bbc 	.word	0x08017bbc

0800537c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800537c:	b5b0      	push	{r4, r5, r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a79      	ldr	r2, [pc, #484]	; (8005570 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d102      	bne.n	8005394 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 800538e:	f002 f8cb 	bl	8007528 <HAL_IncTick>
		}
		//
	}
#endif
  /* USER CODE END Callback 1 */
}
 8005392:	e0e8      	b.n	8005566 <HAL_TIM_PeriodElapsedCallback+0x1ea>
	if (htim->Instance == TIM4) {
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a76      	ldr	r2, [pc, #472]	; (8005574 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d13a      	bne.n	8005414 <HAL_TIM_PeriodElapsedCallback+0x98>
		msCounter++;//inc_msCounter();
 800539e:	4b76      	ldr	r3, [pc, #472]	; (8005578 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80053a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a4:	1c54      	adds	r4, r2, #1
 80053a6:	f143 0500 	adc.w	r5, r3, #0
 80053aa:	4b73      	ldr	r3, [pc, #460]	; (8005578 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80053ac:	e9c3 4500 	strd	r4, r5, [r3]
		if (!(msCounter % _1s)) {// 1 seconda
 80053b0:	4b71      	ldr	r3, [pc, #452]	; (8005578 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80053b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80053b6:	f04f 0264 	mov.w	r2, #100	; 0x64
 80053ba:	f04f 0300 	mov.w	r3, #0
 80053be:	f7fb fcb3 	bl	8000d28 <__aeabi_uldivmod>
 80053c2:	4313      	orrs	r3, r2
 80053c4:	f040 80cf 	bne.w	8005566 <HAL_TIM_PeriodElapsedCallback+0x1ea>
			secCounter++;
 80053c8:	4b6c      	ldr	r3, [pc, #432]	; (800557c <HAL_TIM_PeriodElapsedCallback+0x200>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	3301      	adds	r3, #1
 80053ce:	4a6b      	ldr	r2, [pc, #428]	; (800557c <HAL_TIM_PeriodElapsedCallback+0x200>)
 80053d0:	6013      	str	r3, [r2, #0]
		  	HAL_GPIO_TogglePin(TIK_LED_GPIO_Port, TIK_LED_Pin);
 80053d2:	2102      	movs	r1, #2
 80053d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80053d8:	f002 fe2a 	bl	8008030 <HAL_GPIO_TogglePin>
		  	if (startSec) {
 80053dc:	4b68      	ldr	r3, [pc, #416]	; (8005580 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f000 80bf 	beq.w	8005566 <HAL_TIM_PeriodElapsedCallback+0x1ea>
		  		int ev = evt_Sec;
 80053e8:	2308      	movs	r3, #8
 80053ea:	60bb      	str	r3, [r7, #8]
		  		if (osMessageQueuePut(evtQueHandle, (const void *)&ev, 0, 0) != osOK) devError |= devEVT;
 80053ec:	4b65      	ldr	r3, [pc, #404]	; (8005584 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80053ee:	6818      	ldr	r0, [r3, #0]
 80053f0:	f107 0108 	add.w	r1, r7, #8
 80053f4:	2300      	movs	r3, #0
 80053f6:	2200      	movs	r2, #0
 80053f8:	f00a f96a 	bl	800f6d0 <osMessageQueuePut>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	f000 80b1 	beq.w	8005566 <HAL_TIM_PeriodElapsedCallback+0x1ea>
 8005404:	4b60      	ldr	r3, [pc, #384]	; (8005588 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8005406:	881b      	ldrh	r3, [r3, #0]
 8005408:	f043 0310 	orr.w	r3, r3, #16
 800540c:	b29a      	uxth	r2, r3
 800540e:	4b5e      	ldr	r3, [pc, #376]	; (8005588 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8005410:	801a      	strh	r2, [r3, #0]
}
 8005412:	e0a8      	b.n	8005566 <HAL_TIM_PeriodElapsedCallback+0x1ea>
	if (htim->Instance == TIM6) {
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a5c      	ldr	r2, [pc, #368]	; (800558c <HAL_TIM_PeriodElapsedCallback+0x210>)
 800541a:	4293      	cmp	r3, r2
 800541c:	f040 809a 	bne.w	8005554 <HAL_TIM_PeriodElapsedCallback+0x1d8>
		uint8_t irdata = RECIV_PIN; // пин для приёма
 8005420:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005424:	485a      	ldr	r0, [pc, #360]	; (8005590 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8005426:	f002 fdd3 	bl	8007fd0 <HAL_GPIO_ReadPin>
 800542a:	4603      	mov	r3, r0
 800542c:	73fb      	strb	r3, [r7, #15]
		irparams.timer++;  // One more 50uS tick
 800542e:	4b59      	ldr	r3, [pc, #356]	; (8005594 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005430:	885b      	ldrh	r3, [r3, #2]
 8005432:	b29b      	uxth	r3, r3
 8005434:	3301      	adds	r3, #1
 8005436:	b29a      	uxth	r2, r3
 8005438:	4b56      	ldr	r3, [pc, #344]	; (8005594 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800543a:	805a      	strh	r2, [r3, #2]
		if (irparams.rawlen >= RAWBUF) irparams.rcvstate = STATE_OVERFLOW;  // Buffer overflow
 800543c:	4b55      	ldr	r3, [pc, #340]	; (8005594 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800543e:	785b      	ldrb	r3, [r3, #1]
		switch (irparams.rcvstate) {
 8005440:	4b54      	ldr	r3, [pc, #336]	; (8005594 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	b2db      	uxtb	r3, r3
 8005446:	3b02      	subs	r3, #2
 8005448:	2b04      	cmp	r3, #4
 800544a:	f200 808c 	bhi.w	8005566 <HAL_TIM_PeriodElapsedCallback+0x1ea>
 800544e:	a201      	add	r2, pc, #4	; (adr r2, 8005454 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8005450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005454:	08005469 	.word	0x08005469
 8005458:	080054bd 	.word	0x080054bd
 800545c:	080054f1 	.word	0x080054f1
 8005460:	08005537 	.word	0x08005537
 8005464:	08005545 	.word	0x08005545
				if (irdata == MARK) {
 8005468:	7bfb      	ldrb	r3, [r7, #15]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d174      	bne.n	8005558 <HAL_TIM_PeriodElapsedCallback+0x1dc>
					if (irparams.timer < GAP_TICKS) { // Not big enough to be a gap.
 800546e:	4b49      	ldr	r3, [pc, #292]	; (8005594 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005470:	885b      	ldrh	r3, [r3, #2]
 8005472:	b29b      	uxth	r3, r3
 8005474:	2b63      	cmp	r3, #99	; 0x63
 8005476:	d803      	bhi.n	8005480 <HAL_TIM_PeriodElapsedCallback+0x104>
						irparams.timer = 0;
 8005478:	4b46      	ldr	r3, [pc, #280]	; (8005594 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800547a:	2200      	movs	r2, #0
 800547c:	805a      	strh	r2, [r3, #2]
			break;
 800547e:	e06b      	b.n	8005558 <HAL_TIM_PeriodElapsedCallback+0x1dc>
						irparams.overflow = 0;
 8005480:	4b44      	ldr	r3, [pc, #272]	; (8005594 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005482:	2200      	movs	r2, #0
 8005484:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						irparams.rawlen  = 0;
 8005488:	4b42      	ldr	r3, [pc, #264]	; (8005594 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800548a:	2200      	movs	r2, #0
 800548c:	705a      	strb	r2, [r3, #1]
						irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 800548e:	4b41      	ldr	r3, [pc, #260]	; (8005594 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005490:	785b      	ldrb	r3, [r3, #1]
 8005492:	b2db      	uxtb	r3, r3
 8005494:	1c5a      	adds	r2, r3, #1
 8005496:	b2d1      	uxtb	r1, r2
 8005498:	4a3e      	ldr	r2, [pc, #248]	; (8005594 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800549a:	7051      	strb	r1, [r2, #1]
 800549c:	4618      	mov	r0, r3
 800549e:	4b3d      	ldr	r3, [pc, #244]	; (8005594 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80054a0:	885b      	ldrh	r3, [r3, #2]
 80054a2:	b299      	uxth	r1, r3
 80054a4:	4a3b      	ldr	r2, [pc, #236]	; (8005594 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80054a6:	0043      	lsls	r3, r0, #1
 80054a8:	4413      	add	r3, r2
 80054aa:	460a      	mov	r2, r1
 80054ac:	809a      	strh	r2, [r3, #4]
						irparams.timer = 0;
 80054ae:	4b39      	ldr	r3, [pc, #228]	; (8005594 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80054b0:	2200      	movs	r2, #0
 80054b2:	805a      	strh	r2, [r3, #2]
						irparams.rcvstate = STATE_MARK;
 80054b4:	4b37      	ldr	r3, [pc, #220]	; (8005594 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80054b6:	2203      	movs	r2, #3
 80054b8:	701a      	strb	r2, [r3, #0]
			break;
 80054ba:	e04d      	b.n	8005558 <HAL_TIM_PeriodElapsedCallback+0x1dc>
				if (irdata == SPACE) {// Mark ended; Record time
 80054bc:	7bfb      	ldrb	r3, [r7, #15]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d14c      	bne.n	800555c <HAL_TIM_PeriodElapsedCallback+0x1e0>
					irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 80054c2:	4b34      	ldr	r3, [pc, #208]	; (8005594 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80054c4:	785b      	ldrb	r3, [r3, #1]
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	1c5a      	adds	r2, r3, #1
 80054ca:	b2d1      	uxtb	r1, r2
 80054cc:	4a31      	ldr	r2, [pc, #196]	; (8005594 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80054ce:	7051      	strb	r1, [r2, #1]
 80054d0:	4618      	mov	r0, r3
 80054d2:	4b30      	ldr	r3, [pc, #192]	; (8005594 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80054d4:	885b      	ldrh	r3, [r3, #2]
 80054d6:	b299      	uxth	r1, r3
 80054d8:	4a2e      	ldr	r2, [pc, #184]	; (8005594 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80054da:	0043      	lsls	r3, r0, #1
 80054dc:	4413      	add	r3, r2
 80054de:	460a      	mov	r2, r1
 80054e0:	809a      	strh	r2, [r3, #4]
					irparams.timer = 0;
 80054e2:	4b2c      	ldr	r3, [pc, #176]	; (8005594 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	805a      	strh	r2, [r3, #2]
					irparams.rcvstate = STATE_SPACE;
 80054e8:	4b2a      	ldr	r3, [pc, #168]	; (8005594 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80054ea:	2204      	movs	r2, #4
 80054ec:	701a      	strb	r2, [r3, #0]
			break;
 80054ee:	e035      	b.n	800555c <HAL_TIM_PeriodElapsedCallback+0x1e0>
				if (irdata == MARK) {// Space just ended; Record time
 80054f0:	7bfb      	ldrb	r3, [r7, #15]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d116      	bne.n	8005524 <HAL_TIM_PeriodElapsedCallback+0x1a8>
					irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 80054f6:	4b27      	ldr	r3, [pc, #156]	; (8005594 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80054f8:	785b      	ldrb	r3, [r3, #1]
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	1c5a      	adds	r2, r3, #1
 80054fe:	b2d1      	uxtb	r1, r2
 8005500:	4a24      	ldr	r2, [pc, #144]	; (8005594 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005502:	7051      	strb	r1, [r2, #1]
 8005504:	4618      	mov	r0, r3
 8005506:	4b23      	ldr	r3, [pc, #140]	; (8005594 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005508:	885b      	ldrh	r3, [r3, #2]
 800550a:	b299      	uxth	r1, r3
 800550c:	4a21      	ldr	r2, [pc, #132]	; (8005594 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800550e:	0043      	lsls	r3, r0, #1
 8005510:	4413      	add	r3, r2
 8005512:	460a      	mov	r2, r1
 8005514:	809a      	strh	r2, [r3, #4]
					irparams.timer = 0;
 8005516:	4b1f      	ldr	r3, [pc, #124]	; (8005594 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005518:	2200      	movs	r2, #0
 800551a:	805a      	strh	r2, [r3, #2]
					irparams.rcvstate = STATE_MARK;
 800551c:	4b1d      	ldr	r3, [pc, #116]	; (8005594 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800551e:	2203      	movs	r2, #3
 8005520:	701a      	strb	r2, [r3, #0]
			break;
 8005522:	e01d      	b.n	8005560 <HAL_TIM_PeriodElapsedCallback+0x1e4>
				} else if (irparams.timer > GAP_TICKS) {// Space
 8005524:	4b1b      	ldr	r3, [pc, #108]	; (8005594 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005526:	885b      	ldrh	r3, [r3, #2]
 8005528:	b29b      	uxth	r3, r3
 800552a:	2b64      	cmp	r3, #100	; 0x64
 800552c:	d918      	bls.n	8005560 <HAL_TIM_PeriodElapsedCallback+0x1e4>
					irparams.rcvstate = STATE_STOP;
 800552e:	4b19      	ldr	r3, [pc, #100]	; (8005594 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005530:	2205      	movs	r2, #5
 8005532:	701a      	strb	r2, [r3, #0]
			break;
 8005534:	e014      	b.n	8005560 <HAL_TIM_PeriodElapsedCallback+0x1e4>
			 	if (irdata == MARK) irparams.timer = 0;  // Reset gap timer
 8005536:	7bfb      	ldrb	r3, [r7, #15]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d113      	bne.n	8005564 <HAL_TIM_PeriodElapsedCallback+0x1e8>
 800553c:	4b15      	ldr	r3, [pc, #84]	; (8005594 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800553e:	2200      	movs	r2, #0
 8005540:	805a      	strh	r2, [r3, #2]
			break;
 8005542:	e00f      	b.n	8005564 <HAL_TIM_PeriodElapsedCallback+0x1e8>
				irparams.overflow = 1;
 8005544:	4b13      	ldr	r3, [pc, #76]	; (8005594 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				irparams.rcvstate = STATE_STOP;
 800554c:	4b11      	ldr	r3, [pc, #68]	; (8005594 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800554e:	2205      	movs	r2, #5
 8005550:	701a      	strb	r2, [r3, #0]
			break;
 8005552:	e008      	b.n	8005566 <HAL_TIM_PeriodElapsedCallback+0x1ea>
	}
 8005554:	bf00      	nop
 8005556:	e006      	b.n	8005566 <HAL_TIM_PeriodElapsedCallback+0x1ea>
			break;
 8005558:	bf00      	nop
 800555a:	e004      	b.n	8005566 <HAL_TIM_PeriodElapsedCallback+0x1ea>
			break;
 800555c:	bf00      	nop
 800555e:	e002      	b.n	8005566 <HAL_TIM_PeriodElapsedCallback+0x1ea>
			break;
 8005560:	bf00      	nop
 8005562:	e000      	b.n	8005566 <HAL_TIM_PeriodElapsedCallback+0x1ea>
			break;
 8005564:	bf00      	nop
}
 8005566:	bf00      	nop
 8005568:	3710      	adds	r7, #16
 800556a:	46bd      	mov	sp, r7
 800556c:	bdb0      	pop	{r4, r5, r7, pc}
 800556e:	bf00      	nop
 8005570:	40012c00 	.word	0x40012c00
 8005574:	40000800 	.word	0x40000800
 8005578:	20001b08 	.word	0x20001b08
 800557c:	20001b04 	.word	0x20001b04
 8005580:	20002f3c 	.word	0x20002f3c
 8005584:	20000e6c 	.word	0x20000e6c
 8005588:	20001b00 	.word	0x20001b00
 800558c:	40001000 	.word	0x40001000
 8005590:	48000800 	.word	0x48000800
 8005594:	20000374 	.word	0x20000374

08005598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800559c:	b672      	cpsid	i
}
 800559e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  devError |= devSYS;
 80055a0:	4b05      	ldr	r3, [pc, #20]	; (80055b8 <Error_Handler+0x20>)
 80055a2:	881b      	ldrh	r3, [r3, #0]
 80055a4:	f043 0320 	orr.w	r3, r3, #32
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	4b03      	ldr	r3, [pc, #12]	; (80055b8 <Error_Handler+0x20>)
 80055ac:	801a      	strh	r2, [r3, #0]
	  errLedOn(true);
 80055ae:	2001      	movs	r0, #1
 80055b0:	f7fd fbf6 	bl	8002da0 <errLedOn>
	  devError |= devSYS;
 80055b4:	e7f4      	b.n	80055a0 <Error_Handler+0x8>
 80055b6:	bf00      	nop
 80055b8:	20001b00 	.word	0x20001b00

080055bc <rda5807_init>:

//==============================================================================
// Инициализация rda5807
//==============================================================================
uint8_t rda5807_init(float *freq)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b088      	sub	sp, #32
 80055c0:	af04      	add	r7, sp, #16
 80055c2:	6078      	str	r0, [r7, #4]
uint8_t buf[2] = {0, 0};
 80055c4:	2300      	movs	r3, #0
 80055c6:	813b      	strh	r3, [r7, #8]
uint8_t *id = &buf[0];
 80055c8:	f107 0308 	add.w	r3, r7, #8
 80055cc:	60fb      	str	r3, [r7, #12]

    if (HAL_I2C_Mem_Read(i2cRDA, RDA5807_RandAccess_Addr, 0, I2C_MEMADD_SIZE_8BIT, buf, 2, RDA5807_TO) != HAL_OK) {
 80055ce:	4b30      	ldr	r3, [pc, #192]	; (8005690 <rda5807_init+0xd4>)
 80055d0:	6818      	ldr	r0, [r3, #0]
 80055d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80055d6:	9302      	str	r3, [sp, #8]
 80055d8:	2302      	movs	r3, #2
 80055da:	9301      	str	r3, [sp, #4]
 80055dc:	f107 0308 	add.w	r3, r7, #8
 80055e0:	9300      	str	r3, [sp, #0]
 80055e2:	2301      	movs	r3, #1
 80055e4:	2200      	movs	r2, #0
 80055e6:	2122      	movs	r1, #34	; 0x22
 80055e8:	f002 ffec 	bl	80085c4 <HAL_I2C_Mem_Read>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d13c      	bne.n	800566c <rda5807_init+0xb0>
    stx[0] = '\0';
    for (int i = 0; i < 64; i++) sprintf(stx+strlen(stx)," %02x", buf11[i]);
    Report(1, "[%s] %s\r\n", __func__, stx);
#endif

    rda5807_SoftReset();
 80055f2:	f000 f927 	bl	8005844 <rda5807_SoftReset>
    if (devError & devRDA) goto err_out;
 80055f6:	4b27      	ldr	r3, [pc, #156]	; (8005694 <rda5807_init+0xd8>)
 80055f8:	881b      	ldrh	r3, [r3, #0]
 80055fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d136      	bne.n	8005670 <rda5807_init+0xb4>

    rda5807_SetupDefault();
 8005602:	f000 f949 	bl	8005898 <rda5807_SetupDefault>
    if (devError & devRDA) goto err_out;
 8005606:	4b23      	ldr	r3, [pc, #140]	; (8005694 <rda5807_init+0xd8>)
 8005608:	881b      	ldrh	r3, [r3, #0]
 800560a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800560e:	2b00      	cmp	r3, #0
 8005610:	d130      	bne.n	8005674 <rda5807_init+0xb8>

    uint16_t fr = (uint16_t)(*freq * 10);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	edd3 7a00 	vldr	s15, [r3]
 8005618:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800561c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005620:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005624:	ee17 3a90 	vmov	r3, s15
 8005628:	817b      	strh	r3, [r7, #10]
    rda5807_SetFreq_In100Khz(fr);
 800562a:	897b      	ldrh	r3, [r7, #10]
 800562c:	4618      	mov	r0, r3
 800562e:	f000 fa7b 	bl	8005b28 <rda5807_SetFreq_In100Khz>
    //
    HAL_Delay(200);
 8005632:	20c8      	movs	r0, #200	; 0xc8
 8005634:	f001 ff98 	bl	8007568 <HAL_Delay>
    //
    *freq = (float)rda5807_GetFreq_In100Khz();
 8005638:	f000 faf0 	bl	8005c1c <rda5807_GetFreq_In100Khz>
 800563c:	4603      	mov	r3, r0
 800563e:	ee07 3a90 	vmov	s15, r3
 8005642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	edc3 7a00 	vstr	s15, [r3]
    *freq /= 10;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	ed93 7a00 	vldr	s14, [r3]
 8005652:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005656:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	edc3 7a00 	vstr	s15, [r3]
#ifdef SET_RDA_DEBUG
    Report(1, "[%s] Freq: %.2f\r\n", __func__, *freq);//rda5807_GetFreq_In100Khz());
#endif

    HAL_Delay(100);
 8005660:	2064      	movs	r0, #100	; 0x64
 8005662:	f001 ff81 	bl	8007568 <HAL_Delay>

    return *id;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	e00d      	b.n	8005688 <rda5807_init+0xcc>
    	goto err_out;
 800566c:	bf00      	nop
 800566e:	e002      	b.n	8005676 <rda5807_init+0xba>
    if (devError & devRDA) goto err_out;
 8005670:	bf00      	nop
 8005672:	e000      	b.n	8005676 <rda5807_init+0xba>
    if (devError & devRDA) goto err_out;
 8005674:	bf00      	nop

err_out:
	devError |= devRDA;
 8005676:	4b07      	ldr	r3, [pc, #28]	; (8005694 <rda5807_init+0xd8>)
 8005678:	881b      	ldrh	r3, [r3, #0]
 800567a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800567e:	b29a      	uxth	r2, r3
 8005680:	4b04      	ldr	r3, [pc, #16]	; (8005694 <rda5807_init+0xd8>)
 8005682:	801a      	strh	r2, [r3, #0]
    return *id;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	781b      	ldrb	r3, [r3, #0]
}
 8005688:	4618      	mov	r0, r3
 800568a:	3710      	adds	r7, #16
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	20000130 	.word	0x20000130
 8005694:	20001b00 	.word	0x20001b00

08005698 <rda5807_rssi>:
//==============================================================================
uint16_t rda5807_rssi()
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
uint16_t word = 0;
 800569e:	2300      	movs	r3, #0
 80056a0:	80fb      	strh	r3, [r7, #6]

    rda5807_read(0x0B, &word, 1);
 80056a2:	1dbb      	adds	r3, r7, #6
 80056a4:	2201      	movs	r2, #1
 80056a6:	4619      	mov	r1, r3
 80056a8:	200b      	movs	r0, #11
 80056aa:	f000 f85d 	bl	8005768 <rda5807_read>

    return (word >> 9);
 80056ae:	88fb      	ldrh	r3, [r7, #6]
 80056b0:	0a5b      	lsrs	r3, r3, #9
 80056b2:	b29b      	uxth	r3, r3
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3708      	adds	r7, #8
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <rda5807_bytes_change>:

//==============================================================================
// Процедура меняет местами байты попарно в буфере pBuff 
//==============================================================================
void rda5807_bytes_change(uint8_t *pBuff, uint8_t count)
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	460b      	mov	r3, r1
 80056c6:	70fb      	strb	r3, [r7, #3]
    while (count > 1) {    // Если осталась хотя бы пара байт
 80056c8:	e010      	b.n	80056ec <rda5807_bytes_change+0x30>
        uint8_t Temp = *(pBuff + 1);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	785b      	ldrb	r3, [r3, #1]
 80056ce:	73fb      	strb	r3, [r7, #15]
        *(pBuff + 1) = *pBuff;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	3301      	adds	r3, #1
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	7812      	ldrb	r2, [r2, #0]
 80056d8:	701a      	strb	r2, [r3, #0]
        *pBuff = Temp;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	7bfa      	ldrb	r2, [r7, #15]
 80056de:	701a      	strb	r2, [r3, #0]
        pBuff += 2;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	3302      	adds	r3, #2
 80056e4:	607b      	str	r3, [r7, #4]
        count -= 2;
 80056e6:	78fb      	ldrb	r3, [r7, #3]
 80056e8:	3b02      	subs	r3, #2
 80056ea:	70fb      	strb	r3, [r7, #3]
    while (count > 1) {    // Если осталась хотя бы пара байт
 80056ec:	78fb      	ldrb	r3, [r7, #3]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d8eb      	bhi.n	80056ca <rda5807_bytes_change+0xe>
    }
}
 80056f2:	bf00      	nop
 80056f4:	bf00      	nop
 80056f6:	3714      	adds	r7, #20
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <rda5807_write_regfile>:
//==============================================================================
// Процедура пишет в rda5807 группу регистров (кол-во RegNum) начиная с 0x02
// Используется I2C-адрес RDA5807_SeqAccess_Addr
//==============================================================================
void rda5807_write_regfile(uint16_t *pBuff, uint8_t RegNum)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af02      	add	r7, sp, #8
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	460b      	mov	r3, r1
 800570a:	70fb      	strb	r3, [r7, #3]
    err = i2cm_Start(I2Cx, RDA5807_SeqAccess_Addr, 0, RDA5807_TO);
    if (err) {
        Error_Handler();
    } //*/

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 800570c:	78fb      	ldrb	r3, [r7, #3]
 800570e:	005b      	lsls	r3, r3, #1
 8005710:	b2db      	uxtb	r3, r3
 8005712:	4619      	mov	r1, r3
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f7ff ffd1 	bl	80056bc <rda5807_bytes_change>

//    err = i2cm_WriteBuff(I2Cx, (uint8_t *) pBuff, RegNum << 1, RDA5807_TO);
//    i2cm_Stop(I2Cx, RDA5807_TO);

    if (HAL_I2C_Master_Transmit(i2cRDA, (uint16_t)RDA5807_SeqAccess_Addr, (uint8_t *)pBuff, RegNum << 1, RDA5807_TO) != HAL_OK) {
 800571a:	4b11      	ldr	r3, [pc, #68]	; (8005760 <rda5807_write_regfile+0x60>)
 800571c:	6818      	ldr	r0, [r3, #0]
 800571e:	78fb      	ldrb	r3, [r7, #3]
 8005720:	b29b      	uxth	r3, r3
 8005722:	005b      	lsls	r3, r3, #1
 8005724:	b29b      	uxth	r3, r3
 8005726:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800572a:	9200      	str	r2, [sp, #0]
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	2120      	movs	r1, #32
 8005730:	f002 fd40 	bl	80081b4 <HAL_I2C_Master_Transmit>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d006      	beq.n	8005748 <rda5807_write_regfile+0x48>
    	devError |= devRDA;
 800573a:	4b0a      	ldr	r3, [pc, #40]	; (8005764 <rda5807_write_regfile+0x64>)
 800573c:	881b      	ldrh	r3, [r3, #0]
 800573e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005742:	b29a      	uxth	r2, r3
 8005744:	4b07      	ldr	r3, [pc, #28]	; (8005764 <rda5807_write_regfile+0x64>)
 8005746:	801a      	strh	r2, [r3, #0]
    }

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8005748:	78fb      	ldrb	r3, [r7, #3]
 800574a:	005b      	lsls	r3, r3, #1
 800574c:	b2db      	uxtb	r3, r3
 800574e:	4619      	mov	r1, r3
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f7ff ffb3 	bl	80056bc <rda5807_bytes_change>
}
 8005756:	bf00      	nop
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	20000130 	.word	0x20000130
 8005764:	20001b00 	.word	0x20001b00

08005768 <rda5807_read>:
//==============================================================================
// Процедура читает из rda5807 группу регистров (кол-во RegNum) начиная с RegAddr
// Используется I2C-адрес RDA5807_RandAccess_Addr (для режима совместимости с rda5800)
//==============================================================================
void rda5807_read(uint8_t RegAddr, uint16_t *pBuff, uint8_t RegNum)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b086      	sub	sp, #24
 800576c:	af04      	add	r7, sp, #16
 800576e:	4603      	mov	r3, r0
 8005770:	6039      	str	r1, [r7, #0]
 8005772:	71fb      	strb	r3, [r7, #7]
 8005774:	4613      	mov	r3, r2
 8005776:	71bb      	strb	r3, [r7, #6]
        Error_Handler();
    }
    // Читаем
    i2cm_ReadBuffAndStop(I2Cx, (uint8_t *) pBuff, RegNum << 1, RDA5807_TO); //*/

    if (HAL_I2C_Mem_Read(i2cRDA, RDA5807_RandAccess_Addr,
 8005778:	4b13      	ldr	r3, [pc, #76]	; (80057c8 <rda5807_read+0x60>)
 800577a:	6818      	ldr	r0, [r3, #0]
 800577c:	79fb      	ldrb	r3, [r7, #7]
 800577e:	b29a      	uxth	r2, r3
 8005780:	79bb      	ldrb	r3, [r7, #6]
 8005782:	b29b      	uxth	r3, r3
 8005784:	005b      	lsls	r3, r3, #1
 8005786:	b29b      	uxth	r3, r3
 8005788:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800578c:	9102      	str	r1, [sp, #8]
 800578e:	9301      	str	r3, [sp, #4]
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	9300      	str	r3, [sp, #0]
 8005794:	2301      	movs	r3, #1
 8005796:	2122      	movs	r1, #34	; 0x22
 8005798:	f002 ff14 	bl	80085c4 <HAL_I2C_Mem_Read>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d006      	beq.n	80057b0 <rda5807_read+0x48>
    				     RegAddr, I2C_MEMADD_SIZE_8BIT,
						 (uint8_t *)pBuff, RegNum << 1,
						 RDA5807_TO) != HAL_OK) {
    	devError |= devRDA;
 80057a2:	4b0a      	ldr	r3, [pc, #40]	; (80057cc <rda5807_read+0x64>)
 80057a4:	881b      	ldrh	r3, [r3, #0]
 80057a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	4b07      	ldr	r3, [pc, #28]	; (80057cc <rda5807_read+0x64>)
 80057ae:	801a      	strh	r2, [r3, #0]
    }

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 80057b0:	79bb      	ldrb	r3, [r7, #6]
 80057b2:	005b      	lsls	r3, r3, #1
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	4619      	mov	r1, r3
 80057b8:	6838      	ldr	r0, [r7, #0]
 80057ba:	f7ff ff7f 	bl	80056bc <rda5807_bytes_change>
}
 80057be:	bf00      	nop
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	20000130 	.word	0x20000130
 80057cc:	20001b00 	.word	0x20001b00

080057d0 <rda5807_write>:
//==============================================================================
// Процедура пишет в rda5807 группу регистров (кол-во RegNum) начиная с RegAddr
// Используется I2C-адрес RDA5807_RandAccess_Addr (для режима совместимости с rda5800)
//==============================================================================
void rda5807_write(uint8_t RegAddr, uint16_t *pBuff, uint8_t RegNum)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b086      	sub	sp, #24
 80057d4:	af04      	add	r7, sp, #16
 80057d6:	4603      	mov	r3, r0
 80057d8:	6039      	str	r1, [r7, #0]
 80057da:	71fb      	strb	r3, [r7, #7]
 80057dc:	4613      	mov	r3, r2
 80057de:	71bb      	strb	r3, [r7, #6]

    if (i2cm_WriteBuff(I2Cx, &RegAddr, 1, RDA5807_TO)) {
        Error_Handler();
    } //*/

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 80057e0:	79bb      	ldrb	r3, [r7, #6]
 80057e2:	005b      	lsls	r3, r3, #1
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	4619      	mov	r1, r3
 80057e8:	6838      	ldr	r0, [r7, #0]
 80057ea:	f7ff ff67 	bl	80056bc <rda5807_bytes_change>

    //err = i2cm_WriteBuff(I2Cx, (uint8_t *) pBuff, RegNum << 1, RDA5807_TO);
    //i2cm_Stop(I2Cx, RDA5807_TO);

    if (HAL_I2C_Mem_Write(i2cRDA,
 80057ee:	4b13      	ldr	r3, [pc, #76]	; (800583c <rda5807_write+0x6c>)
 80057f0:	6818      	ldr	r0, [r3, #0]
 80057f2:	79fb      	ldrb	r3, [r7, #7]
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	79bb      	ldrb	r3, [r7, #6]
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	005b      	lsls	r3, r3, #1
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005802:	9102      	str	r1, [sp, #8]
 8005804:	9301      	str	r3, [sp, #4]
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	9300      	str	r3, [sp, #0]
 800580a:	2301      	movs	r3, #1
 800580c:	2122      	movs	r1, #34	; 0x22
 800580e:	f002 fdc5 	bl	800839c <HAL_I2C_Mem_Write>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d006      	beq.n	8005826 <rda5807_write+0x56>
    					  RDA5807_RandAccess_Addr,
						  RegAddr, I2C_MEMADD_SIZE_8BIT,
						  (uint8_t *)pBuff, RegNum << 1,
						  RDA5807_TO) != HAL_OK) {
    	devError |= devRDA;
 8005818:	4b09      	ldr	r3, [pc, #36]	; (8005840 <rda5807_write+0x70>)
 800581a:	881b      	ldrh	r3, [r3, #0]
 800581c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005820:	b29a      	uxth	r2, r3
 8005822:	4b07      	ldr	r3, [pc, #28]	; (8005840 <rda5807_write+0x70>)
 8005824:	801a      	strh	r2, [r3, #0]
    }

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8005826:	79bb      	ldrb	r3, [r7, #6]
 8005828:	005b      	lsls	r3, r3, #1
 800582a:	b2db      	uxtb	r3, r3
 800582c:	4619      	mov	r1, r3
 800582e:	6838      	ldr	r0, [r7, #0]
 8005830:	f7ff ff44 	bl	80056bc <rda5807_bytes_change>
}
 8005834:	bf00      	nop
 8005836:	3708      	adds	r7, #8
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	20000130 	.word	0x20000130
 8005840:	20001b00 	.word	0x20001b00

08005844 <rda5807_SoftReset>:

//==============================================================================
// Процедура делает программный сброс rda5807
//==============================================================================
void rda5807_SoftReset()
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
tReg02h reg02;

    rda5807_read(2, (uint16_t *)&reg02, 1);
 800584a:	1d3b      	adds	r3, r7, #4
 800584c:	2201      	movs	r2, #1
 800584e:	4619      	mov	r1, r3
 8005850:	2002      	movs	r0, #2
 8005852:	f7ff ff89 	bl	8005768 <rda5807_read>

	reg02.bENABLE = 1;
 8005856:	793b      	ldrb	r3, [r7, #4]
 8005858:	f043 0301 	orr.w	r3, r3, #1
 800585c:	713b      	strb	r3, [r7, #4]
	reg02.bSOFT_RESET = 1;
 800585e:	793b      	ldrb	r3, [r7, #4]
 8005860:	f043 0302 	orr.w	r3, r3, #2
 8005864:	713b      	strb	r3, [r7, #4]
    rda5807_write(2, (uint16_t *)&reg02, 1);
 8005866:	1d3b      	adds	r3, r7, #4
 8005868:	2201      	movs	r2, #1
 800586a:	4619      	mov	r1, r3
 800586c:	2002      	movs	r0, #2
 800586e:	f7ff ffaf 	bl	80057d0 <rda5807_write>

    reg02.bENABLE = 1;
 8005872:	793b      	ldrb	r3, [r7, #4]
 8005874:	f043 0301 	orr.w	r3, r3, #1
 8005878:	713b      	strb	r3, [r7, #4]
    reg02.bSOFT_RESET = 0;
 800587a:	793b      	ldrb	r3, [r7, #4]
 800587c:	f36f 0341 	bfc	r3, #1, #1
 8005880:	713b      	strb	r3, [r7, #4]
    rda5807_write(2, (uint16_t *)&reg02, 1);
 8005882:	1d3b      	adds	r3, r7, #4
 8005884:	2201      	movs	r2, #1
 8005886:	4619      	mov	r1, r3
 8005888:	2002      	movs	r0, #2
 800588a:	f7ff ffa1 	bl	80057d0 <rda5807_write>
}
 800588e:	bf00      	nop
 8005890:	3708      	adds	r7, #8
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
	...

08005898 <rda5807_SetupDefault>:

//==============================================================================
// Процедура производит начальную настройку rda5807
//==============================================================================
void rda5807_SetupDefault()
{
 8005898:	b580      	push	{r7, lr}
 800589a:	af00      	add	r7, sp, #0
	tReg06h Reg06;
	tReg07h Reg07;
} Buffs;*/

    // Регистр 0x02
    Buffs.Reg02.bENABLE = 1;
 800589c:	4a6c      	ldr	r2, [pc, #432]	; (8005a50 <rda5807_SetupDefault+0x1b8>)
 800589e:	7813      	ldrb	r3, [r2, #0]
 80058a0:	f043 0301 	orr.w	r3, r3, #1
 80058a4:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSOFT_RESET = 0;
 80058a6:	4a6a      	ldr	r2, [pc, #424]	; (8005a50 <rda5807_SetupDefault+0x1b8>)
 80058a8:	7813      	ldrb	r3, [r2, #0]
 80058aa:	f36f 0341 	bfc	r3, #1, #1
 80058ae:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bNEW_METHOD = 1;
 80058b0:	4a67      	ldr	r2, [pc, #412]	; (8005a50 <rda5807_SetupDefault+0x1b8>)
 80058b2:	7813      	ldrb	r3, [r2, #0]
 80058b4:	f043 0304 	orr.w	r3, r3, #4
 80058b8:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bRDS_EN = 1;
 80058ba:	4a65      	ldr	r2, [pc, #404]	; (8005a50 <rda5807_SetupDefault+0x1b8>)
 80058bc:	7813      	ldrb	r3, [r2, #0]
 80058be:	f043 0308 	orr.w	r3, r3, #8
 80058c2:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bCLK_MODE = 0;        // 32.768
 80058c4:	4a62      	ldr	r2, [pc, #392]	; (8005a50 <rda5807_SetupDefault+0x1b8>)
 80058c6:	7813      	ldrb	r3, [r2, #0]
 80058c8:	f36f 1306 	bfc	r3, #4, #3
 80058cc:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSKMODE = 0;
 80058ce:	4a60      	ldr	r2, [pc, #384]	; (8005a50 <rda5807_SetupDefault+0x1b8>)
 80058d0:	7813      	ldrb	r3, [r2, #0]
 80058d2:	f36f 13c7 	bfc	r3, #7, #1
 80058d6:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSEEK = 0;
 80058d8:	4a5d      	ldr	r2, [pc, #372]	; (8005a50 <rda5807_SetupDefault+0x1b8>)
 80058da:	7853      	ldrb	r3, [r2, #1]
 80058dc:	f36f 0300 	bfc	r3, #0, #1
 80058e0:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bSEEKUP = 1;
 80058e2:	4a5b      	ldr	r2, [pc, #364]	; (8005a50 <rda5807_SetupDefault+0x1b8>)
 80058e4:	7853      	ldrb	r3, [r2, #1]
 80058e6:	f043 0302 	orr.w	r3, r3, #2
 80058ea:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bRCLK_DirectInput = 0;
 80058ec:	4a58      	ldr	r2, [pc, #352]	; (8005a50 <rda5807_SetupDefault+0x1b8>)
 80058ee:	7853      	ldrb	r3, [r2, #1]
 80058f0:	f36f 0382 	bfc	r3, #2, #1
 80058f4:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bRCLK_NonCalibMode = 0;
 80058f6:	4a56      	ldr	r2, [pc, #344]	; (8005a50 <rda5807_SetupDefault+0x1b8>)
 80058f8:	7853      	ldrb	r3, [r2, #1]
 80058fa:	f36f 03c3 	bfc	r3, #3, #1
 80058fe:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bBASS = 0;
 8005900:	4a53      	ldr	r2, [pc, #332]	; (8005a50 <rda5807_SetupDefault+0x1b8>)
 8005902:	7853      	ldrb	r3, [r2, #1]
 8005904:	f36f 1304 	bfc	r3, #4, #1
 8005908:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bMONO = 0;
 800590a:	4a51      	ldr	r2, [pc, #324]	; (8005a50 <rda5807_SetupDefault+0x1b8>)
 800590c:	7853      	ldrb	r3, [r2, #1]
 800590e:	f36f 1345 	bfc	r3, #5, #1
 8005912:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bDMUTE = 1;
 8005914:	4a4e      	ldr	r2, [pc, #312]	; (8005a50 <rda5807_SetupDefault+0x1b8>)
 8005916:	7853      	ldrb	r3, [r2, #1]
 8005918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800591c:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bDHIZ = 1;
 800591e:	4a4c      	ldr	r2, [pc, #304]	; (8005a50 <rda5807_SetupDefault+0x1b8>)
 8005920:	7853      	ldrb	r3, [r2, #1]
 8005922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005926:	7053      	strb	r3, [r2, #1]
    // Регистр 0x03
    Buffs.Reg03.bSPACE = 0;//Step;//0;   // Шаг настройки - 0 = 100 КГц
 8005928:	4a49      	ldr	r2, [pc, #292]	; (8005a50 <rda5807_SetupDefault+0x1b8>)
 800592a:	7893      	ldrb	r3, [r2, #2]
 800592c:	f36f 0301 	bfc	r3, #0, #2
 8005930:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bBAND = Band;//2;//0;    // Диапазон 2 - 76–108 MHz
 8005932:	4b48      	ldr	r3, [pc, #288]	; (8005a54 <rda5807_SetupDefault+0x1bc>)
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	f003 0303 	and.w	r3, r3, #3
 800593a:	b2d9      	uxtb	r1, r3
 800593c:	4a44      	ldr	r2, [pc, #272]	; (8005a50 <rda5807_SetupDefault+0x1b8>)
 800593e:	7893      	ldrb	r3, [r2, #2]
 8005940:	f361 0383 	bfi	r3, r1, #2, #2
 8005944:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bTUNE = 1;
 8005946:	4a42      	ldr	r2, [pc, #264]	; (8005a50 <rda5807_SetupDefault+0x1b8>)
 8005948:	7893      	ldrb	r3, [r2, #2]
 800594a:	f043 0310 	orr.w	r3, r3, #16
 800594e:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bDIRECT_MODE = 0;
 8005950:	4a3f      	ldr	r2, [pc, #252]	; (8005a50 <rda5807_SetupDefault+0x1b8>)
 8005952:	7893      	ldrb	r3, [r2, #2]
 8005954:	f36f 1345 	bfc	r3, #5, #1
 8005958:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bCHAN = 0;
 800595a:	4a3d      	ldr	r2, [pc, #244]	; (8005a50 <rda5807_SetupDefault+0x1b8>)
 800595c:	8853      	ldrh	r3, [r2, #2]
 800595e:	f36f 138f 	bfc	r3, #6, #10
 8005962:	8053      	strh	r3, [r2, #2]
    // Регистр 0x04
    Buffs.Reg04.bRSVD1 = 0;
 8005964:	4b3a      	ldr	r3, [pc, #232]	; (8005a50 <rda5807_SetupDefault+0x1b8>)
 8005966:	2200      	movs	r2, #0
 8005968:	711a      	strb	r2, [r3, #4]
    Buffs.Reg04.bAFCD = 0;
 800596a:	4a39      	ldr	r2, [pc, #228]	; (8005a50 <rda5807_SetupDefault+0x1b8>)
 800596c:	7953      	ldrb	r3, [r2, #5]
 800596e:	f36f 0300 	bfc	r3, #0, #1
 8005972:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bSOFTMUTE_EN = 1;
 8005974:	4a36      	ldr	r2, [pc, #216]	; (8005a50 <rda5807_SetupDefault+0x1b8>)
 8005976:	7953      	ldrb	r3, [r2, #5]
 8005978:	f043 0302 	orr.w	r3, r3, #2
 800597c:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bRSVD2 = 0;
 800597e:	4a34      	ldr	r2, [pc, #208]	; (8005a50 <rda5807_SetupDefault+0x1b8>)
 8005980:	7953      	ldrb	r3, [r2, #5]
 8005982:	f36f 0382 	bfc	r3, #2, #1
 8005986:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bDE = 0;
 8005988:	4a31      	ldr	r2, [pc, #196]	; (8005a50 <rda5807_SetupDefault+0x1b8>)
 800598a:	7953      	ldrb	r3, [r2, #5]
 800598c:	f36f 03c3 	bfc	r3, #3, #1
 8005990:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bRSVD3 = 0;
 8005992:	4a2f      	ldr	r2, [pc, #188]	; (8005a50 <rda5807_SetupDefault+0x1b8>)
 8005994:	7953      	ldrb	r3, [r2, #5]
 8005996:	f36f 1307 	bfc	r3, #4, #4
 800599a:	7153      	strb	r3, [r2, #5]
    // Регистр 0x05
    Buffs.Reg05.bVOLUME = 0;
 800599c:	4a2c      	ldr	r2, [pc, #176]	; (8005a50 <rda5807_SetupDefault+0x1b8>)
 800599e:	7993      	ldrb	r3, [r2, #6]
 80059a0:	f36f 0303 	bfc	r3, #0, #4
 80059a4:	7193      	strb	r3, [r2, #6]
    Buffs.Reg05.bANT_GAIN = 1;//0;
 80059a6:	4a2a      	ldr	r2, [pc, #168]	; (8005a50 <rda5807_SetupDefault+0x1b8>)
 80059a8:	7993      	ldrb	r3, [r2, #6]
 80059aa:	2101      	movs	r1, #1
 80059ac:	f361 1305 	bfi	r3, r1, #4, #2
 80059b0:	7193      	strb	r3, [r2, #6]
    Buffs.Reg05.bANT_TYPE = ANT_TYPE_External;//ANT_TYPE_Headphones;//ANT_TYPE_Both;
 80059b2:	4a27      	ldr	r2, [pc, #156]	; (8005a50 <rda5807_SetupDefault+0x1b8>)
 80059b4:	7993      	ldrb	r3, [r2, #6]
 80059b6:	2102      	movs	r1, #2
 80059b8:	f361 1387 	bfi	r3, r1, #6, #2
 80059bc:	7193      	strb	r3, [r2, #6]
    Buffs.Reg05.bSEEKTH = 6;//8;
 80059be:	4a24      	ldr	r2, [pc, #144]	; (8005a50 <rda5807_SetupDefault+0x1b8>)
 80059c0:	79d3      	ldrb	r3, [r2, #7]
 80059c2:	2106      	movs	r1, #6
 80059c4:	f361 0303 	bfi	r3, r1, #0, #4
 80059c8:	71d3      	strb	r3, [r2, #7]
    Buffs.Reg05.bRSVD3 = 0;
 80059ca:	4a21      	ldr	r2, [pc, #132]	; (8005a50 <rda5807_SetupDefault+0x1b8>)
 80059cc:	79d3      	ldrb	r3, [r2, #7]
 80059ce:	f36f 1306 	bfc	r3, #4, #3
 80059d2:	71d3      	strb	r3, [r2, #7]
    Buffs.Reg05.bINT_MODE = 0;//1;
 80059d4:	4a1e      	ldr	r2, [pc, #120]	; (8005a50 <rda5807_SetupDefault+0x1b8>)
 80059d6:	79d3      	ldrb	r3, [r2, #7]
 80059d8:	f36f 13c7 	bfc	r3, #7, #1
 80059dc:	71d3      	strb	r3, [r2, #7]
    // Регистр 0x06
    Buffs.Reg06.bRSVD1 = 0;
 80059de:	4a1c      	ldr	r2, [pc, #112]	; (8005a50 <rda5807_SetupDefault+0x1b8>)
 80059e0:	8913      	ldrh	r3, [r2, #8]
 80059e2:	f36f 030c 	bfc	r3, #0, #13
 80059e6:	8113      	strh	r3, [r2, #8]
    Buffs.Reg06.bOPEN_MODE = 0;
 80059e8:	4a19      	ldr	r2, [pc, #100]	; (8005a50 <rda5807_SetupDefault+0x1b8>)
 80059ea:	7a53      	ldrb	r3, [r2, #9]
 80059ec:	f36f 1346 	bfc	r3, #5, #2
 80059f0:	7253      	strb	r3, [r2, #9]
    Buffs.Reg06.bRSVD2 = 0;
 80059f2:	4a17      	ldr	r2, [pc, #92]	; (8005a50 <rda5807_SetupDefault+0x1b8>)
 80059f4:	7a53      	ldrb	r3, [r2, #9]
 80059f6:	f36f 13c7 	bfc	r3, #7, #1
 80059fa:	7253      	strb	r3, [r2, #9]
    // Регистр 0x07
    Buffs.Reg07.bFREQ_MODE = 0;
 80059fc:	4a14      	ldr	r2, [pc, #80]	; (8005a50 <rda5807_SetupDefault+0x1b8>)
 80059fe:	7a93      	ldrb	r3, [r2, #10]
 8005a00:	f36f 0300 	bfc	r3, #0, #1
 8005a04:	7293      	strb	r3, [r2, #10]
    Buffs.Reg07.bSOFTBLEND_EN = 1;
 8005a06:	4a12      	ldr	r2, [pc, #72]	; (8005a50 <rda5807_SetupDefault+0x1b8>)
 8005a08:	7a93      	ldrb	r3, [r2, #10]
 8005a0a:	f043 0302 	orr.w	r3, r3, #2
 8005a0e:	7293      	strb	r3, [r2, #10]
    Buffs.Reg07.bSEEK_TH_OLD = 0;
 8005a10:	4a0f      	ldr	r2, [pc, #60]	; (8005a50 <rda5807_SetupDefault+0x1b8>)
 8005a12:	7a93      	ldrb	r3, [r2, #10]
 8005a14:	f36f 0387 	bfc	r3, #2, #6
 8005a18:	7293      	strb	r3, [r2, #10]
    Buffs.Reg07.bRSVD1 = 0;
 8005a1a:	4a0d      	ldr	r2, [pc, #52]	; (8005a50 <rda5807_SetupDefault+0x1b8>)
 8005a1c:	7ad3      	ldrb	r3, [r2, #11]
 8005a1e:	f36f 0300 	bfc	r3, #0, #1
 8005a22:	72d3      	strb	r3, [r2, #11]
    Buffs.Reg07.b65M_50M_MODE = 1;
 8005a24:	4a0a      	ldr	r2, [pc, #40]	; (8005a50 <rda5807_SetupDefault+0x1b8>)
 8005a26:	7ad3      	ldrb	r3, [r2, #11]
 8005a28:	f043 0302 	orr.w	r3, r3, #2
 8005a2c:	72d3      	strb	r3, [r2, #11]
    Buffs.Reg07.bTH_SOFRBLEND = 16;
 8005a2e:	4a08      	ldr	r2, [pc, #32]	; (8005a50 <rda5807_SetupDefault+0x1b8>)
 8005a30:	7ad3      	ldrb	r3, [r2, #11]
 8005a32:	2110      	movs	r1, #16
 8005a34:	f361 0386 	bfi	r3, r1, #2, #5
 8005a38:	72d3      	strb	r3, [r2, #11]
    Buffs.Reg07.bRSVD2 = 0;
 8005a3a:	4a05      	ldr	r2, [pc, #20]	; (8005a50 <rda5807_SetupDefault+0x1b8>)
 8005a3c:	7ad3      	ldrb	r3, [r2, #11]
 8005a3e:	f36f 13c7 	bfc	r3, #7, #1
 8005a42:	72d3      	strb	r3, [r2, #11]

    // Пишем регистры функцией записи регистрового файла
    rda5807_write_regfile((uint16_t *)&(Buffs.Reg02), 6);
 8005a44:	2106      	movs	r1, #6
 8005a46:	4802      	ldr	r0, [pc, #8]	; (8005a50 <rda5807_SetupDefault+0x1b8>)
 8005a48:	f7ff fe5a 	bl	8005700 <rda5807_write_regfile>
}
 8005a4c:	bf00      	nop
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	20003330 	.word	0x20003330
 8005a54:	2000010c 	.word	0x2000010c

08005a58 <rda5807_SetVolume>:

//==============================================================================
// Процедура устанавливает уровень громкости (0..16) выхода rda5807. При Value=0 включает MUTE
//==============================================================================
void rda5807_SetVolume(uint8_t Value)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	4603      	mov	r3, r0
 8005a60:	71fb      	strb	r3, [r7, #7]
//tReg02h Reg02;
//tReg05h Reg05;
uint8_t Mute = Value ? 0 : 1;
 8005a62:	79fb      	ldrb	r3, [r7, #7]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	bf0c      	ite	eq
 8005a68:	2301      	moveq	r3, #1
 8005a6a:	2300      	movne	r3, #0
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	73fb      	strb	r3, [r7, #15]

    if (Value > 16) Value = 16;
 8005a70:	79fb      	ldrb	r3, [r7, #7]
 8005a72:	2b10      	cmp	r3, #16
 8005a74:	d901      	bls.n	8005a7a <rda5807_SetVolume+0x22>
 8005a76:	2310      	movs	r3, #16
 8005a78:	71fb      	strb	r3, [r7, #7]

    Value--;    // Значение для поля Volume на 1 меньше, чем входной параметр функции
 8005a7a:	79fb      	ldrb	r3, [r7, #7]
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	71fb      	strb	r3, [r7, #7]

    if (!Mute) {
 8005a80:	7bfb      	ldrb	r3, [r7, #15]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d112      	bne.n	8005aac <rda5807_SetVolume+0x54>
        // Читаем регистр 0x05
        rda5807_read(5, (uint16_t *)&Buffs.Reg05, 1);
 8005a86:	2201      	movs	r2, #1
 8005a88:	4915      	ldr	r1, [pc, #84]	; (8005ae0 <rda5807_SetVolume+0x88>)
 8005a8a:	2005      	movs	r0, #5
 8005a8c:	f7ff fe6c 	bl	8005768 <rda5807_read>
        // Меняем значение поля VOLUME
        Buffs.Reg05.bVOLUME = Value;
 8005a90:	79fb      	ldrb	r3, [r7, #7]
 8005a92:	f003 030f 	and.w	r3, r3, #15
 8005a96:	b2d9      	uxtb	r1, r3
 8005a98:	4a12      	ldr	r2, [pc, #72]	; (8005ae4 <rda5807_SetVolume+0x8c>)
 8005a9a:	7993      	ldrb	r3, [r2, #6]
 8005a9c:	f361 0303 	bfi	r3, r1, #0, #4
 8005aa0:	7193      	strb	r3, [r2, #6]
        // Пишем регистр 0x05
        rda5807_write(5, (uint16_t *)&Buffs.Reg05, 1);
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	490e      	ldr	r1, [pc, #56]	; (8005ae0 <rda5807_SetVolume+0x88>)
 8005aa6:	2005      	movs	r0, #5
 8005aa8:	f7ff fe92 	bl	80057d0 <rda5807_write>
    }

    // Читаем регистр 0x02
    rda5807_read(2, (uint16_t *)&Buffs.Reg02, 1);
 8005aac:	2201      	movs	r2, #1
 8005aae:	490d      	ldr	r1, [pc, #52]	; (8005ae4 <rda5807_SetVolume+0x8c>)
 8005ab0:	2002      	movs	r0, #2
 8005ab2:	f7ff fe59 	bl	8005768 <rda5807_read>
    // Меняем значение поля VOLUME
    Buffs.Reg02.bDMUTE = Mute ? 0 : 1;
 8005ab6:	7bfb      	ldrb	r3, [r7, #15]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	bf0c      	ite	eq
 8005abc:	2301      	moveq	r3, #1
 8005abe:	2300      	movne	r3, #0
 8005ac0:	b2d9      	uxtb	r1, r3
 8005ac2:	4a08      	ldr	r2, [pc, #32]	; (8005ae4 <rda5807_SetVolume+0x8c>)
 8005ac4:	7853      	ldrb	r3, [r2, #1]
 8005ac6:	f361 1386 	bfi	r3, r1, #6, #1
 8005aca:	7053      	strb	r3, [r2, #1]
    // Пишем регистр 0x02
    rda5807_write(2, (uint16_t *)&Buffs.Reg02, 1);
 8005acc:	2201      	movs	r2, #1
 8005ace:	4905      	ldr	r1, [pc, #20]	; (8005ae4 <rda5807_SetVolume+0x8c>)
 8005ad0:	2002      	movs	r0, #2
 8005ad2:	f7ff fe7d 	bl	80057d0 <rda5807_write>
}
 8005ad6:	bf00      	nop
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	20003336 	.word	0x20003336
 8005ae4:	20003330 	.word	0x20003330

08005ae8 <rda5807_SetBassBoost>:

//==============================================================================
// Процедура включает/выключает BassBoost
//==============================================================================
void rda5807_SetBassBoost(uint8_t Value)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	4603      	mov	r3, r0
 8005af0:	71fb      	strb	r3, [r7, #7]
//tReg02h Reg02;

    // Читаем регистр 0x02
    rda5807_read(2, (uint16_t *)&Buffs.Reg02, 1);
 8005af2:	2201      	movs	r2, #1
 8005af4:	490b      	ldr	r1, [pc, #44]	; (8005b24 <rda5807_SetBassBoost+0x3c>)
 8005af6:	2002      	movs	r0, #2
 8005af8:	f7ff fe36 	bl	8005768 <rda5807_read>
    // Меняем значение поля BASS
    Buffs.Reg02.bBASS = (Value) ? 1 : 0;
 8005afc:	79fb      	ldrb	r3, [r7, #7]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	bf14      	ite	ne
 8005b02:	2301      	movne	r3, #1
 8005b04:	2300      	moveq	r3, #0
 8005b06:	b2d9      	uxtb	r1, r3
 8005b08:	4a06      	ldr	r2, [pc, #24]	; (8005b24 <rda5807_SetBassBoost+0x3c>)
 8005b0a:	7853      	ldrb	r3, [r2, #1]
 8005b0c:	f361 1304 	bfi	r3, r1, #4, #1
 8005b10:	7053      	strb	r3, [r2, #1]
    // Пишем регистр 0x02
    rda5807_write(2, (uint16_t *)&Buffs.Reg02, 1);
 8005b12:	2201      	movs	r2, #1
 8005b14:	4903      	ldr	r1, [pc, #12]	; (8005b24 <rda5807_SetBassBoost+0x3c>)
 8005b16:	2002      	movs	r0, #2
 8005b18:	f7ff fe5a 	bl	80057d0 <rda5807_write>
}
 8005b1c:	bf00      	nop
 8005b1e:	3708      	adds	r7, #8
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	20003330 	.word	0x20003330

08005b28 <rda5807_SetFreq_In100Khz>:
//==============================================================================
// Процедура устанавливает текущую частоту Freq100kHz и стартует перенастройку rda5807 на эту частоту.
// Окончание процесса можно установки можно проконтроллировать по обнулению бита STR в регистре 0x0A (функцией rda5807_Get_SeekTuneReadyFlag)
//==============================================================================
void rda5807_SetFreq_In100Khz(uint16_t Freq100kHz)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	4603      	mov	r3, r0
 8005b30:	80fb      	strh	r3, [r7, #6]
//tReg03h Reg03;
uint16_t l = 870, r = 1080;
 8005b32:	f240 3366 	movw	r3, #870	; 0x366
 8005b36:	81fb      	strh	r3, [r7, #14]
 8005b38:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8005b3c:	81bb      	strh	r3, [r7, #12]

    // Проверка входного параметра для диапазона Buffs.Reg03.bBAND
	switch (Buffs.Reg03.bBAND) {    // Диапазон 87–108 MHz
 8005b3e:	4b33      	ldr	r3, [pc, #204]	; (8005c0c <rda5807_SetFreq_In100Khz+0xe4>)
 8005b40:	789b      	ldrb	r3, [r3, #2]
 8005b42:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	2b03      	cmp	r3, #3
 8005b4a:	d011      	beq.n	8005b70 <rda5807_SetFreq_In100Khz+0x48>
 8005b4c:	2b03      	cmp	r3, #3
 8005b4e:	dc16      	bgt.n	8005b7e <rda5807_SetFreq_In100Khz+0x56>
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d002      	beq.n	8005b5a <rda5807_SetFreq_In100Khz+0x32>
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d007      	beq.n	8005b68 <rda5807_SetFreq_In100Khz+0x40>
 8005b58:	e011      	b.n	8005b7e <rda5807_SetFreq_In100Khz+0x56>
		//case 0:// 00 = 87–108 MHz (US/Europe)
		//break;
		case 1:// 01 = 76–91 MHz (Japan)
			l = 760;
 8005b5a:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8005b5e:	81fb      	strh	r3, [r7, #14]
			r = 910;
 8005b60:	f240 338e 	movw	r3, #910	; 0x38e
 8005b64:	81bb      	strh	r3, [r7, #12]
		break;
 8005b66:	e00a      	b.n	8005b7e <rda5807_SetFreq_In100Khz+0x56>
		case 2:// 10 = 76–108 MHz (world wide)
			l = 760;
 8005b68:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8005b6c:	81fb      	strh	r3, [r7, #14]
		break;
 8005b6e:	e006      	b.n	8005b7e <rda5807_SetFreq_In100Khz+0x56>
		case 3:// 11 = 65 –76 MHz (East Europe) or 50-65MHz
			l = 650;
 8005b70:	f240 238a 	movw	r3, #650	; 0x28a
 8005b74:	81fb      	strh	r3, [r7, #14]
			r = 760;
 8005b76:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8005b7a:	81bb      	strh	r3, [r7, #12]
		break;
 8005b7c:	bf00      	nop
	}
	lBand = ((float)l) / 10;
 8005b7e:	89fb      	ldrh	r3, [r7, #14]
 8005b80:	ee07 3a90 	vmov	s15, r3
 8005b84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b88:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005b8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b90:	4b1f      	ldr	r3, [pc, #124]	; (8005c10 <rda5807_SetFreq_In100Khz+0xe8>)
 8005b92:	edc3 7a00 	vstr	s15, [r3]
	rBand = ((float)r) / 10;
 8005b96:	89bb      	ldrh	r3, [r7, #12]
 8005b98:	ee07 3a90 	vmov	s15, r3
 8005b9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005ba0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005ba4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ba8:	4b1a      	ldr	r3, [pc, #104]	; (8005c14 <rda5807_SetFreq_In100Khz+0xec>)
 8005baa:	edc3 7a00 	vstr	s15, [r3]

    if (Freq100kHz < l)  Freq100kHz = l;
 8005bae:	88fa      	ldrh	r2, [r7, #6]
 8005bb0:	89fb      	ldrh	r3, [r7, #14]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d201      	bcs.n	8005bba <rda5807_SetFreq_In100Khz+0x92>
 8005bb6:	89fb      	ldrh	r3, [r7, #14]
 8005bb8:	80fb      	strh	r3, [r7, #6]
    if (Freq100kHz > r) Freq100kHz = r;
 8005bba:	88fa      	ldrh	r2, [r7, #6]
 8005bbc:	89bb      	ldrh	r3, [r7, #12]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d901      	bls.n	8005bc6 <rda5807_SetFreq_In100Khz+0x9e>
 8005bc2:	89bb      	ldrh	r3, [r7, #12]
 8005bc4:	80fb      	strh	r3, [r7, #6]

    // Вычитаем начало диапазона (left)
    Freq100kHz -= l;
 8005bc6:	88fa      	ldrh	r2, [r7, #6]
 8005bc8:	89fb      	ldrh	r3, [r7, #14]
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	80fb      	strh	r3, [r7, #6]

    // Читаем регистр 0x03
    rda5807_read(3, (uint16_t *)&Buffs.Reg03, 1);
 8005bce:	2201      	movs	r2, #1
 8005bd0:	4911      	ldr	r1, [pc, #68]	; (8005c18 <rda5807_SetFreq_In100Khz+0xf0>)
 8005bd2:	2003      	movs	r0, #3
 8005bd4:	f7ff fdc8 	bl	8005768 <rda5807_read>
    // Меняем значение поля CHAN
    Buffs.Reg03.bCHAN = Freq100kHz;
 8005bd8:	88fb      	ldrh	r3, [r7, #6]
 8005bda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bde:	b299      	uxth	r1, r3
 8005be0:	4a0a      	ldr	r2, [pc, #40]	; (8005c0c <rda5807_SetFreq_In100Khz+0xe4>)
 8005be2:	8853      	ldrh	r3, [r2, #2]
 8005be4:	f361 138f 	bfi	r3, r1, #6, #10
 8005be8:	8053      	strh	r3, [r2, #2]
    // Выставляем флаг начала перенастройки на канал
    Buffs.Reg03.bTUNE = 1;
 8005bea:	4a08      	ldr	r2, [pc, #32]	; (8005c0c <rda5807_SetFreq_In100Khz+0xe4>)
 8005bec:	7893      	ldrb	r3, [r2, #2]
 8005bee:	f043 0310 	orr.w	r3, r3, #16
 8005bf2:	7093      	strb	r3, [r2, #2]
    // Пишем регистр 0x03
    rda5807_write(3, (uint16_t *)&Buffs.Reg03, 1);
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	4908      	ldr	r1, [pc, #32]	; (8005c18 <rda5807_SetFreq_In100Khz+0xf0>)
 8005bf8:	2003      	movs	r0, #3
 8005bfa:	f7ff fde9 	bl	80057d0 <rda5807_write>

    HAL_Delay(50);
 8005bfe:	2032      	movs	r0, #50	; 0x32
 8005c00:	f001 fcb2 	bl	8007568 <HAL_Delay>
}
 8005c04:	bf00      	nop
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	20003330 	.word	0x20003330
 8005c10:	20002f44 	.word	0x20002f44
 8005c14:	20002f48 	.word	0x20002f48
 8005c18:	20003332 	.word	0x20003332

08005c1c <rda5807_GetFreq_In100Khz>:

//==============================================================================
// Функция читает текущую частоту, на которую настроен rda5807
//==============================================================================
uint16_t rda5807_GetFreq_In100Khz()
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 8005c22:	2201      	movs	r2, #1
 8005c24:	491b      	ldr	r1, [pc, #108]	; (8005c94 <rda5807_GetFreq_In100Khz+0x78>)
 8005c26:	200a      	movs	r0, #10
 8005c28:	f7ff fd9e 	bl	8005768 <rda5807_read>

    uint16_t Freq100kHz = Buffs.Reg0A.bREADCHAN;
 8005c2c:	4b1a      	ldr	r3, [pc, #104]	; (8005c98 <rda5807_GetFreq_In100Khz+0x7c>)
 8005c2e:	8a1b      	ldrh	r3, [r3, #16]
 8005c30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	80bb      	strh	r3, [r7, #4]

    if (Freq100kHz == 319) return 0;
 8005c38:	88bb      	ldrh	r3, [r7, #4]
 8005c3a:	f240 123f 	movw	r2, #319	; 0x13f
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d101      	bne.n	8005c46 <rda5807_GetFreq_In100Khz+0x2a>
 8005c42:	2300      	movs	r3, #0
 8005c44:	e021      	b.n	8005c8a <rda5807_GetFreq_In100Khz+0x6e>

    // Прибавляем начало диапазона (87 МГц)
    uint16_t left = 870;
 8005c46:	f240 3366 	movw	r3, #870	; 0x366
 8005c4a:	80fb      	strh	r3, [r7, #6]
    switch (Buffs.Reg03.bBAND) {    // Диапазон 87–108 MHz
 8005c4c:	4b12      	ldr	r3, [pc, #72]	; (8005c98 <rda5807_GetFreq_In100Khz+0x7c>)
 8005c4e:	789b      	ldrb	r3, [r3, #2]
 8005c50:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	2b03      	cmp	r3, #3
 8005c58:	d00e      	beq.n	8005c78 <rda5807_GetFreq_In100Khz+0x5c>
 8005c5a:	2b03      	cmp	r3, #3
 8005c5c:	dc10      	bgt.n	8005c80 <rda5807_GetFreq_In100Khz+0x64>
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d002      	beq.n	8005c68 <rda5807_GetFreq_In100Khz+0x4c>
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d004      	beq.n	8005c70 <rda5807_GetFreq_In100Khz+0x54>
 8005c66:	e00b      	b.n	8005c80 <rda5807_GetFreq_In100Khz+0x64>
    	//case 0:// 00 = 87–108 MHz (US/Europe)
    	//break;
    	case 1:// 01 = 76–91 MHz (Japan)
    		left = 760;
 8005c68:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8005c6c:	80fb      	strh	r3, [r7, #6]
    	break;
 8005c6e:	e007      	b.n	8005c80 <rda5807_GetFreq_In100Khz+0x64>
    	case 2:// 10 = 76–108 MHz (world wide)
    		left = 760;
 8005c70:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8005c74:	80fb      	strh	r3, [r7, #6]
    	break;
 8005c76:	e003      	b.n	8005c80 <rda5807_GetFreq_In100Khz+0x64>
    	case 3:// 11 = 65 –76 MHz (East Europe) or 50-65MHz
    		left = 650;
 8005c78:	f240 238a 	movw	r3, #650	; 0x28a
 8005c7c:	80fb      	strh	r3, [r7, #6]
    	break;
 8005c7e:	bf00      	nop
    }
    Freq100kHz += left;
 8005c80:	88ba      	ldrh	r2, [r7, #4]
 8005c82:	88fb      	ldrh	r3, [r7, #6]
 8005c84:	4413      	add	r3, r2
 8005c86:	80bb      	strh	r3, [r7, #4]

    return Freq100kHz;
 8005c88:	88bb      	ldrh	r3, [r7, #4]
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3708      	adds	r7, #8
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	20003340 	.word	0x20003340
 8005c98:	20003330 	.word	0x20003330

08005c9c <rda5807_StartSeek>:

//==============================================================================
// Процедура стартует поиск радиостанции вверх/вниз
//==============================================================================
void rda5807_StartSeek(uint8_t Up)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	71fb      	strb	r3, [r7, #7]
//tReg02h Reg02;

    // Читаем регистр 0x02
    rda5807_read(2, (uint16_t *)&Buffs.Reg02, 1);
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	4910      	ldr	r1, [pc, #64]	; (8005cec <rda5807_StartSeek+0x50>)
 8005caa:	2002      	movs	r0, #2
 8005cac:	f7ff fd5c 	bl	8005768 <rda5807_read>

    Buffs.Reg02.bSKMODE = 1;          // 07 Seek Mode (0 = wrap at the upper or lower band limit and continue seeking; 1 = stop seeking at the upper or lower band limit)
 8005cb0:	4a0e      	ldr	r2, [pc, #56]	; (8005cec <rda5807_StartSeek+0x50>)
 8005cb2:	7813      	ldrb	r3, [r2, #0]
 8005cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cb8:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSEEK = 1;            // 08 Seek (0 = Disable stop seek; 1 = Enable)
 8005cba:	4a0c      	ldr	r2, [pc, #48]	; (8005cec <rda5807_StartSeek+0x50>)
 8005cbc:	7853      	ldrb	r3, [r2, #1]
 8005cbe:	f043 0301 	orr.w	r3, r3, #1
 8005cc2:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bSEEKUP = Up ? 1 : 0; // 09 Seek Up (0 = Seek down; 1 = Seek up)
 8005cc4:	79fb      	ldrb	r3, [r7, #7]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	bf14      	ite	ne
 8005cca:	2301      	movne	r3, #1
 8005ccc:	2300      	moveq	r3, #0
 8005cce:	b2d9      	uxtb	r1, r3
 8005cd0:	4a06      	ldr	r2, [pc, #24]	; (8005cec <rda5807_StartSeek+0x50>)
 8005cd2:	7853      	ldrb	r3, [r2, #1]
 8005cd4:	f361 0341 	bfi	r3, r1, #1, #1
 8005cd8:	7053      	strb	r3, [r2, #1]

    // Пишем регистр 0x02
    rda5807_write(2, (uint16_t *)&Buffs.Reg02, 1);
 8005cda:	2201      	movs	r2, #1
 8005cdc:	4903      	ldr	r1, [pc, #12]	; (8005cec <rda5807_StartSeek+0x50>)
 8005cde:	2002      	movs	r0, #2
 8005ce0:	f7ff fd76 	bl	80057d0 <rda5807_write>
}
 8005ce4:	bf00      	nop
 8005ce6:	3708      	adds	r7, #8
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	20003330 	.word	0x20003330

08005cf0 <rda5807_Get_SeekTuneReadyFlag>:
//==============================================================================
// Функция возвращает состояние бита STR (SeekTuneReadyFlag)
// SeekTuneReadyFlag=1 пока идёт процесс настройки на частоту или поиск радиостанции.
//==============================================================================
uint8_t rda5807_Get_SeekTuneReadyFlag()
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	4905      	ldr	r1, [pc, #20]	; (8005d0c <rda5807_Get_SeekTuneReadyFlag+0x1c>)
 8005cf8:	200a      	movs	r0, #10
 8005cfa:	f7ff fd35 	bl	8005768 <rda5807_read>

    return Buffs.Reg0A.bSTC;
 8005cfe:	4b04      	ldr	r3, [pc, #16]	; (8005d10 <rda5807_Get_SeekTuneReadyFlag+0x20>)
 8005d00:	7c5b      	ldrb	r3, [r3, #17]
 8005d02:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005d06:	b2db      	uxtb	r3, r3
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	20003340 	.word	0x20003340
 8005d10:	20003330 	.word	0x20003330

08005d14 <rda5807_Get_StereoMonoFlag>:
//==============================================================================
//==============================================================================
bool rda5807_Get_StereoMonoFlag()
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 8005d18:	2201      	movs	r2, #1
 8005d1a:	4908      	ldr	r1, [pc, #32]	; (8005d3c <rda5807_Get_StereoMonoFlag+0x28>)
 8005d1c:	200a      	movs	r0, #10
 8005d1e:	f7ff fd23 	bl	8005768 <rda5807_read>

    return Buffs.Reg0A.bST;     // Stereo Indicator (0 = Mono; 1 = Stereo)
 8005d22:	4b07      	ldr	r3, [pc, #28]	; (8005d40 <rda5807_Get_StereoMonoFlag+0x2c>)
 8005d24:	7c5b      	ldrb	r3, [r3, #17]
 8005d26:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	bf14      	ite	ne
 8005d30:	2301      	movne	r3, #1
 8005d32:	2300      	moveq	r3, #0
 8005d34:	b2db      	uxtb	r3, r3
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	20003340 	.word	0x20003340
 8005d40:	20003330 	.word	0x20003330

08005d44 <rda5807_Get_Channel>:
//==============================================================================
uint16_t rda5807_Get_Channel()
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 8005d48:	2201      	movs	r2, #1
 8005d4a:	4905      	ldr	r1, [pc, #20]	; (8005d60 <rda5807_Get_Channel+0x1c>)
 8005d4c:	200a      	movs	r0, #10
 8005d4e:	f7ff fd0b 	bl	8005768 <rda5807_read>

    return Buffs.Reg0A.bREADCHAN;    // 0-9 Read Channel.
 8005d52:	4b04      	ldr	r3, [pc, #16]	; (8005d64 <rda5807_Get_Channel+0x20>)
 8005d54:	8a1b      	ldrh	r3, [r3, #16]
 8005d56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d5a:	b29b      	uxth	r3, r3
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	20003340 	.word	0x20003340
 8005d64:	20003330 	.word	0x20003330

08005d68 <rda5807_Set_Band>:
//==============================================================================
uint8_t rda5807_Set_Band(uint8_t band)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	4603      	mov	r3, r0
 8005d70:	71fb      	strb	r3, [r7, #7]
	if (band > 3) return 1;
 8005d72:	79fb      	ldrb	r3, [r7, #7]
 8005d74:	2b03      	cmp	r3, #3
 8005d76:	d901      	bls.n	8005d7c <rda5807_Set_Band+0x14>
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e054      	b.n	8005e26 <rda5807_Set_Band+0xbe>

    // Читаем регистр 3
    rda5807_read(3, (uint16_t *)&Buffs.Reg03, 1);
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	492c      	ldr	r1, [pc, #176]	; (8005e30 <rda5807_Set_Band+0xc8>)
 8005d80:	2003      	movs	r0, #3
 8005d82:	f7ff fcf1 	bl	8005768 <rda5807_read>

    Buffs.Reg03.bBAND = band;
 8005d86:	79fb      	ldrb	r3, [r7, #7]
 8005d88:	f003 0303 	and.w	r3, r3, #3
 8005d8c:	b2d9      	uxtb	r1, r3
 8005d8e:	4a29      	ldr	r2, [pc, #164]	; (8005e34 <rda5807_Set_Band+0xcc>)
 8005d90:	7893      	ldrb	r3, [r2, #2]
 8005d92:	f361 0383 	bfi	r3, r1, #2, #2
 8005d96:	7093      	strb	r3, [r2, #2]

    rda5807_write(3, (uint16_t *)&Buffs.Reg03, 1);
 8005d98:	2201      	movs	r2, #1
 8005d9a:	4925      	ldr	r1, [pc, #148]	; (8005e30 <rda5807_Set_Band+0xc8>)
 8005d9c:	2003      	movs	r0, #3
 8005d9e:	f7ff fd17 	bl	80057d0 <rda5807_write>

    uint16_t l = 870, r = 1080;
 8005da2:	f240 3366 	movw	r3, #870	; 0x366
 8005da6:	81fb      	strh	r3, [r7, #14]
 8005da8:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8005dac:	81bb      	strh	r3, [r7, #12]

    switch (Buffs.Reg03.bBAND) {    // Диапазон 87–108 MHz
 8005dae:	4b21      	ldr	r3, [pc, #132]	; (8005e34 <rda5807_Set_Band+0xcc>)
 8005db0:	789b      	ldrb	r3, [r3, #2]
 8005db2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	2b03      	cmp	r3, #3
 8005dba:	d011      	beq.n	8005de0 <rda5807_Set_Band+0x78>
 8005dbc:	2b03      	cmp	r3, #3
 8005dbe:	dc16      	bgt.n	8005dee <rda5807_Set_Band+0x86>
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d002      	beq.n	8005dca <rda5807_Set_Band+0x62>
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d007      	beq.n	8005dd8 <rda5807_Set_Band+0x70>
 8005dc8:	e011      	b.n	8005dee <rda5807_Set_Band+0x86>
    	//case 0:// 00 = 87–108 MHz (US/Europe)
    	//break;
    	case 1:// 01 = 76–91 MHz (Japan)
    		l = 760;
 8005dca:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8005dce:	81fb      	strh	r3, [r7, #14]
    		r = 910;
 8005dd0:	f240 338e 	movw	r3, #910	; 0x38e
 8005dd4:	81bb      	strh	r3, [r7, #12]
    	break;
 8005dd6:	e00a      	b.n	8005dee <rda5807_Set_Band+0x86>
    	case 2:// 10 = 76–108 MHz (world wide)
    		l = 760;
 8005dd8:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8005ddc:	81fb      	strh	r3, [r7, #14]
    	break;
 8005dde:	e006      	b.n	8005dee <rda5807_Set_Band+0x86>
    	case 3:// 11 = 65 –76 MHz (East Europe) or 50-65MHz
    		l = 650;
 8005de0:	f240 238a 	movw	r3, #650	; 0x28a
 8005de4:	81fb      	strh	r3, [r7, #14]
    		r = 760;
 8005de6:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8005dea:	81bb      	strh	r3, [r7, #12]
    	break;
 8005dec:	bf00      	nop
    }
    lBand = ((float)l) / 10;
 8005dee:	89fb      	ldrh	r3, [r7, #14]
 8005df0:	ee07 3a90 	vmov	s15, r3
 8005df4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005df8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005dfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e00:	4b0d      	ldr	r3, [pc, #52]	; (8005e38 <rda5807_Set_Band+0xd0>)
 8005e02:	edc3 7a00 	vstr	s15, [r3]
    rBand = ((float)r) / 10;
 8005e06:	89bb      	ldrh	r3, [r7, #12]
 8005e08:	ee07 3a90 	vmov	s15, r3
 8005e0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005e10:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005e14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e18:	4b08      	ldr	r3, [pc, #32]	; (8005e3c <rda5807_Set_Band+0xd4>)
 8005e1a:	edc3 7a00 	vstr	s15, [r3]

    HAL_Delay(50);
 8005e1e:	2032      	movs	r0, #50	; 0x32
 8005e20:	f001 fba2 	bl	8007568 <HAL_Delay>

    return 0;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3710      	adds	r7, #16
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	20003332 	.word	0x20003332
 8005e34:	20003330 	.word	0x20003330
 8005e38:	20002f44 	.word	0x20002f44
 8005e3c:	20002f48 	.word	0x20002f48

08005e40 <rda5807_Set_Mute>:
//==============================================================================
void rda5807_Set_Mute(uint8_t mute)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	4603      	mov	r3, r0
 8005e48:	71fb      	strb	r3, [r7, #7]
	// Читаем регистр 2
	rda5807_read(2, (uint16_t *)&Buffs.Reg02, 1);
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	490a      	ldr	r1, [pc, #40]	; (8005e78 <rda5807_Set_Mute+0x38>)
 8005e4e:	2002      	movs	r0, #2
 8005e50:	f7ff fc8a 	bl	8005768 <rda5807_read>

	Buffs.Reg02.bDMUTE = mute & 1;
 8005e54:	79fb      	ldrb	r3, [r7, #7]
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	b2d9      	uxtb	r1, r3
 8005e5c:	4a06      	ldr	r2, [pc, #24]	; (8005e78 <rda5807_Set_Mute+0x38>)
 8005e5e:	7853      	ldrb	r3, [r2, #1]
 8005e60:	f361 1386 	bfi	r3, r1, #6, #1
 8005e64:	7053      	strb	r3, [r2, #1]

	rda5807_write(2, (uint16_t *)&Buffs.Reg02, 1);
 8005e66:	2201      	movs	r2, #1
 8005e68:	4903      	ldr	r1, [pc, #12]	; (8005e78 <rda5807_Set_Mute+0x38>)
 8005e6a:	2002      	movs	r0, #2
 8005e6c:	f7ff fcb0 	bl	80057d0 <rda5807_write>
}
 8005e70:	bf00      	nop
 8005e72:	3708      	adds	r7, #8
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	20003330 	.word	0x20003330

08005e7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e82:	4b11      	ldr	r3, [pc, #68]	; (8005ec8 <HAL_MspInit+0x4c>)
 8005e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e86:	4a10      	ldr	r2, [pc, #64]	; (8005ec8 <HAL_MspInit+0x4c>)
 8005e88:	f043 0301 	orr.w	r3, r3, #1
 8005e8c:	6613      	str	r3, [r2, #96]	; 0x60
 8005e8e:	4b0e      	ldr	r3, [pc, #56]	; (8005ec8 <HAL_MspInit+0x4c>)
 8005e90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e92:	f003 0301 	and.w	r3, r3, #1
 8005e96:	607b      	str	r3, [r7, #4]
 8005e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e9a:	4b0b      	ldr	r3, [pc, #44]	; (8005ec8 <HAL_MspInit+0x4c>)
 8005e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e9e:	4a0a      	ldr	r2, [pc, #40]	; (8005ec8 <HAL_MspInit+0x4c>)
 8005ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ea4:	6593      	str	r3, [r2, #88]	; 0x58
 8005ea6:	4b08      	ldr	r3, [pc, #32]	; (8005ec8 <HAL_MspInit+0x4c>)
 8005ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eae:	603b      	str	r3, [r7, #0]
 8005eb0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	210f      	movs	r1, #15
 8005eb6:	f06f 0001 	mvn.w	r0, #1
 8005eba:	f001 fc31 	bl	8007720 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005ebe:	bf00      	nop
 8005ec0:	3708      	adds	r7, #8
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	40021000 	.word	0x40021000

08005ecc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b0ac      	sub	sp, #176	; 0xb0
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ed4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005ed8:	2200      	movs	r2, #0
 8005eda:	601a      	str	r2, [r3, #0]
 8005edc:	605a      	str	r2, [r3, #4]
 8005ede:	609a      	str	r2, [r3, #8]
 8005ee0:	60da      	str	r2, [r3, #12]
 8005ee2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005ee4:	f107 0314 	add.w	r3, r7, #20
 8005ee8:	2288      	movs	r2, #136	; 0x88
 8005eea:	2100      	movs	r1, #0
 8005eec:	4618      	mov	r0, r3
 8005eee:	f00d f816 	bl	8012f1e <memset>
  if(hi2c->Instance==I2C1)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a57      	ldr	r2, [pc, #348]	; (8006054 <HAL_I2C_MspInit+0x188>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	f040 80a7 	bne.w	800604c <HAL_I2C_MspInit+0x180>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005efe:	2340      	movs	r3, #64	; 0x40
 8005f00:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005f02:	2300      	movs	r3, #0
 8005f04:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005f06:	f107 0314 	add.w	r3, r7, #20
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f004 fc6e 	bl	800a7ec <HAL_RCCEx_PeriphCLKConfig>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d001      	beq.n	8005f1a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8005f16:	f7ff fb3f 	bl	8005598 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f1a:	4b4f      	ldr	r3, [pc, #316]	; (8006058 <HAL_I2C_MspInit+0x18c>)
 8005f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f1e:	4a4e      	ldr	r2, [pc, #312]	; (8006058 <HAL_I2C_MspInit+0x18c>)
 8005f20:	f043 0302 	orr.w	r3, r3, #2
 8005f24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f26:	4b4c      	ldr	r3, [pc, #304]	; (8006058 <HAL_I2C_MspInit+0x18c>)
 8005f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f2a:	f003 0302 	and.w	r3, r3, #2
 8005f2e:	613b      	str	r3, [r7, #16]
 8005f30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005f32:	23c0      	movs	r3, #192	; 0xc0
 8005f34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005f38:	2312      	movs	r3, #18
 8005f3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005f44:	2302      	movs	r3, #2
 8005f46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005f4a:	2304      	movs	r3, #4
 8005f4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f50:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005f54:	4619      	mov	r1, r3
 8005f56:	4841      	ldr	r0, [pc, #260]	; (800605c <HAL_I2C_MspInit+0x190>)
 8005f58:	f001 fe90 	bl	8007c7c <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB6);
 8005f5c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005f60:	f003 fcf2 	bl	8009948 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB7);
 8005f64:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8005f68:	f003 fcee 	bl	8009948 <HAL_I2CEx_EnableFastModePlus>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005f6c:	4b3a      	ldr	r3, [pc, #232]	; (8006058 <HAL_I2C_MspInit+0x18c>)
 8005f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f70:	4a39      	ldr	r2, [pc, #228]	; (8006058 <HAL_I2C_MspInit+0x18c>)
 8005f72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f76:	6593      	str	r3, [r2, #88]	; 0x58
 8005f78:	4b37      	ldr	r3, [pc, #220]	; (8006058 <HAL_I2C_MspInit+0x18c>)
 8005f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f80:	60fb      	str	r3, [r7, #12]
 8005f82:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA2_Channel6;
 8005f84:	4b36      	ldr	r3, [pc, #216]	; (8006060 <HAL_I2C_MspInit+0x194>)
 8005f86:	4a37      	ldr	r2, [pc, #220]	; (8006064 <HAL_I2C_MspInit+0x198>)
 8005f88:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_5;
 8005f8a:	4b35      	ldr	r3, [pc, #212]	; (8006060 <HAL_I2C_MspInit+0x194>)
 8005f8c:	2205      	movs	r2, #5
 8005f8e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005f90:	4b33      	ldr	r3, [pc, #204]	; (8006060 <HAL_I2C_MspInit+0x194>)
 8005f92:	2200      	movs	r2, #0
 8005f94:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f96:	4b32      	ldr	r3, [pc, #200]	; (8006060 <HAL_I2C_MspInit+0x194>)
 8005f98:	2200      	movs	r2, #0
 8005f9a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005f9c:	4b30      	ldr	r3, [pc, #192]	; (8006060 <HAL_I2C_MspInit+0x194>)
 8005f9e:	2280      	movs	r2, #128	; 0x80
 8005fa0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005fa2:	4b2f      	ldr	r3, [pc, #188]	; (8006060 <HAL_I2C_MspInit+0x194>)
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005fa8:	4b2d      	ldr	r3, [pc, #180]	; (8006060 <HAL_I2C_MspInit+0x194>)
 8005faa:	2200      	movs	r2, #0
 8005fac:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8005fae:	4b2c      	ldr	r3, [pc, #176]	; (8006060 <HAL_I2C_MspInit+0x194>)
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005fb4:	4b2a      	ldr	r3, [pc, #168]	; (8006060 <HAL_I2C_MspInit+0x194>)
 8005fb6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005fba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8005fbc:	4828      	ldr	r0, [pc, #160]	; (8006060 <HAL_I2C_MspInit+0x194>)
 8005fbe:	f001 fbd9 	bl	8007774 <HAL_DMA_Init>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d001      	beq.n	8005fcc <HAL_I2C_MspInit+0x100>
    {
      Error_Handler();
 8005fc8:	f7ff fae6 	bl	8005598 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a24      	ldr	r2, [pc, #144]	; (8006060 <HAL_I2C_MspInit+0x194>)
 8005fd0:	63da      	str	r2, [r3, #60]	; 0x3c
 8005fd2:	4a23      	ldr	r2, [pc, #140]	; (8006060 <HAL_I2C_MspInit+0x194>)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8005fd8:	4b23      	ldr	r3, [pc, #140]	; (8006068 <HAL_I2C_MspInit+0x19c>)
 8005fda:	4a24      	ldr	r2, [pc, #144]	; (800606c <HAL_I2C_MspInit+0x1a0>)
 8005fdc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 8005fde:	4b22      	ldr	r3, [pc, #136]	; (8006068 <HAL_I2C_MspInit+0x19c>)
 8005fe0:	2203      	movs	r2, #3
 8005fe2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005fe4:	4b20      	ldr	r3, [pc, #128]	; (8006068 <HAL_I2C_MspInit+0x19c>)
 8005fe6:	2210      	movs	r2, #16
 8005fe8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005fea:	4b1f      	ldr	r3, [pc, #124]	; (8006068 <HAL_I2C_MspInit+0x19c>)
 8005fec:	2200      	movs	r2, #0
 8005fee:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005ff0:	4b1d      	ldr	r3, [pc, #116]	; (8006068 <HAL_I2C_MspInit+0x19c>)
 8005ff2:	2280      	movs	r2, #128	; 0x80
 8005ff4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005ff6:	4b1c      	ldr	r3, [pc, #112]	; (8006068 <HAL_I2C_MspInit+0x19c>)
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005ffc:	4b1a      	ldr	r3, [pc, #104]	; (8006068 <HAL_I2C_MspInit+0x19c>)
 8005ffe:	2200      	movs	r2, #0
 8006000:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8006002:	4b19      	ldr	r3, [pc, #100]	; (8006068 <HAL_I2C_MspInit+0x19c>)
 8006004:	2200      	movs	r2, #0
 8006006:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006008:	4b17      	ldr	r3, [pc, #92]	; (8006068 <HAL_I2C_MspInit+0x19c>)
 800600a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800600e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8006010:	4815      	ldr	r0, [pc, #84]	; (8006068 <HAL_I2C_MspInit+0x19c>)
 8006012:	f001 fbaf 	bl	8007774 <HAL_DMA_Init>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d001      	beq.n	8006020 <HAL_I2C_MspInit+0x154>
    {
      Error_Handler();
 800601c:	f7ff fabc 	bl	8005598 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a11      	ldr	r2, [pc, #68]	; (8006068 <HAL_I2C_MspInit+0x19c>)
 8006024:	639a      	str	r2, [r3, #56]	; 0x38
 8006026:	4a10      	ldr	r2, [pc, #64]	; (8006068 <HAL_I2C_MspInit+0x19c>)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800602c:	2200      	movs	r2, #0
 800602e:	2105      	movs	r1, #5
 8006030:	201f      	movs	r0, #31
 8006032:	f001 fb75 	bl	8007720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8006036:	201f      	movs	r0, #31
 8006038:	f001 fb8e 	bl	8007758 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800603c:	2200      	movs	r2, #0
 800603e:	2105      	movs	r1, #5
 8006040:	2020      	movs	r0, #32
 8006042:	f001 fb6d 	bl	8007720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8006046:	2020      	movs	r0, #32
 8006048:	f001 fb86 	bl	8007758 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800604c:	bf00      	nop
 800604e:	37b0      	adds	r7, #176	; 0xb0
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}
 8006054:	40005400 	.word	0x40005400
 8006058:	40021000 	.word	0x40021000
 800605c:	48000400 	.word	0x48000400
 8006060:	200009e4 	.word	0x200009e4
 8006064:	4002046c 	.word	0x4002046c
 8006068:	20000a2c 	.word	0x20000a2c
 800606c:	4002006c 	.word	0x4002006c

08006070 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b0a4      	sub	sp, #144	; 0x90
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006078:	f107 0308 	add.w	r3, r7, #8
 800607c:	2288      	movs	r2, #136	; 0x88
 800607e:	2100      	movs	r1, #0
 8006080:	4618      	mov	r0, r3
 8006082:	f00c ff4c 	bl	8012f1e <memset>
  if(hrtc->Instance==RTC)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a10      	ldr	r2, [pc, #64]	; (80060cc <HAL_RTC_MspInit+0x5c>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d118      	bne.n	80060c2 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006090:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006094:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8006096:	f44f 7300 	mov.w	r3, #512	; 0x200
 800609a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800609e:	f107 0308 	add.w	r3, r7, #8
 80060a2:	4618      	mov	r0, r3
 80060a4:	f004 fba2 	bl	800a7ec <HAL_RCCEx_PeriphCLKConfig>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d001      	beq.n	80060b2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80060ae:	f7ff fa73 	bl	8005598 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80060b2:	4b07      	ldr	r3, [pc, #28]	; (80060d0 <HAL_RTC_MspInit+0x60>)
 80060b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060b8:	4a05      	ldr	r2, [pc, #20]	; (80060d0 <HAL_RTC_MspInit+0x60>)
 80060ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80060c2:	bf00      	nop
 80060c4:	3790      	adds	r7, #144	; 0x90
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	40002800 	.word	0x40002800
 80060d0:	40021000 	.word	0x40021000

080060d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b08c      	sub	sp, #48	; 0x30
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060dc:	f107 031c 	add.w	r3, r7, #28
 80060e0:	2200      	movs	r2, #0
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	605a      	str	r2, [r3, #4]
 80060e6:	609a      	str	r2, [r3, #8]
 80060e8:	60da      	str	r2, [r3, #12]
 80060ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a76      	ldr	r2, [pc, #472]	; (80062cc <HAL_SPI_MspInit+0x1f8>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d15b      	bne.n	80061ae <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80060f6:	4b76      	ldr	r3, [pc, #472]	; (80062d0 <HAL_SPI_MspInit+0x1fc>)
 80060f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060fa:	4a75      	ldr	r2, [pc, #468]	; (80062d0 <HAL_SPI_MspInit+0x1fc>)
 80060fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006100:	6613      	str	r3, [r2, #96]	; 0x60
 8006102:	4b73      	ldr	r3, [pc, #460]	; (80062d0 <HAL_SPI_MspInit+0x1fc>)
 8006104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006106:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800610a:	61bb      	str	r3, [r7, #24]
 800610c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800610e:	4b70      	ldr	r3, [pc, #448]	; (80062d0 <HAL_SPI_MspInit+0x1fc>)
 8006110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006112:	4a6f      	ldr	r2, [pc, #444]	; (80062d0 <HAL_SPI_MspInit+0x1fc>)
 8006114:	f043 0301 	orr.w	r3, r3, #1
 8006118:	64d3      	str	r3, [r2, #76]	; 0x4c
 800611a:	4b6d      	ldr	r3, [pc, #436]	; (80062d0 <HAL_SPI_MspInit+0x1fc>)
 800611c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800611e:	f003 0301 	and.w	r3, r3, #1
 8006122:	617b      	str	r3, [r7, #20]
 8006124:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8006126:	23a0      	movs	r3, #160	; 0xa0
 8006128:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800612a:	2302      	movs	r3, #2
 800612c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800612e:	2300      	movs	r3, #0
 8006130:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006132:	2303      	movs	r3, #3
 8006134:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006136:	2305      	movs	r3, #5
 8006138:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800613a:	f107 031c 	add.w	r3, r7, #28
 800613e:	4619      	mov	r1, r3
 8006140:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006144:	f001 fd9a 	bl	8007c7c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Channel4;
 8006148:	4b62      	ldr	r3, [pc, #392]	; (80062d4 <HAL_SPI_MspInit+0x200>)
 800614a:	4a63      	ldr	r2, [pc, #396]	; (80062d8 <HAL_SPI_MspInit+0x204>)
 800614c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_4;
 800614e:	4b61      	ldr	r3, [pc, #388]	; (80062d4 <HAL_SPI_MspInit+0x200>)
 8006150:	2204      	movs	r2, #4
 8006152:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006154:	4b5f      	ldr	r3, [pc, #380]	; (80062d4 <HAL_SPI_MspInit+0x200>)
 8006156:	2210      	movs	r2, #16
 8006158:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800615a:	4b5e      	ldr	r3, [pc, #376]	; (80062d4 <HAL_SPI_MspInit+0x200>)
 800615c:	2200      	movs	r2, #0
 800615e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006160:	4b5c      	ldr	r3, [pc, #368]	; (80062d4 <HAL_SPI_MspInit+0x200>)
 8006162:	2280      	movs	r2, #128	; 0x80
 8006164:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006166:	4b5b      	ldr	r3, [pc, #364]	; (80062d4 <HAL_SPI_MspInit+0x200>)
 8006168:	2200      	movs	r2, #0
 800616a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800616c:	4b59      	ldr	r3, [pc, #356]	; (80062d4 <HAL_SPI_MspInit+0x200>)
 800616e:	2200      	movs	r2, #0
 8006170:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8006172:	4b58      	ldr	r3, [pc, #352]	; (80062d4 <HAL_SPI_MspInit+0x200>)
 8006174:	2200      	movs	r2, #0
 8006176:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8006178:	4b56      	ldr	r3, [pc, #344]	; (80062d4 <HAL_SPI_MspInit+0x200>)
 800617a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800617e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8006180:	4854      	ldr	r0, [pc, #336]	; (80062d4 <HAL_SPI_MspInit+0x200>)
 8006182:	f001 faf7 	bl	8007774 <HAL_DMA_Init>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d001      	beq.n	8006190 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 800618c:	f7ff fa04 	bl	8005598 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a50      	ldr	r2, [pc, #320]	; (80062d4 <HAL_SPI_MspInit+0x200>)
 8006194:	655a      	str	r2, [r3, #84]	; 0x54
 8006196:	4a4f      	ldr	r2, [pc, #316]	; (80062d4 <HAL_SPI_MspInit+0x200>)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 800619c:	2200      	movs	r2, #0
 800619e:	2105      	movs	r1, #5
 80061a0:	2023      	movs	r0, #35	; 0x23
 80061a2:	f001 fabd 	bl	8007720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80061a6:	2023      	movs	r0, #35	; 0x23
 80061a8:	f001 fad6 	bl	8007758 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80061ac:	e08a      	b.n	80062c4 <HAL_SPI_MspInit+0x1f0>
  else if(hspi->Instance==SPI2)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a4a      	ldr	r2, [pc, #296]	; (80062dc <HAL_SPI_MspInit+0x208>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	f040 8085 	bne.w	80062c4 <HAL_SPI_MspInit+0x1f0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80061ba:	4b45      	ldr	r3, [pc, #276]	; (80062d0 <HAL_SPI_MspInit+0x1fc>)
 80061bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061be:	4a44      	ldr	r2, [pc, #272]	; (80062d0 <HAL_SPI_MspInit+0x1fc>)
 80061c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061c4:	6593      	str	r3, [r2, #88]	; 0x58
 80061c6:	4b42      	ldr	r3, [pc, #264]	; (80062d0 <HAL_SPI_MspInit+0x1fc>)
 80061c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061ce:	613b      	str	r3, [r7, #16]
 80061d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80061d2:	4b3f      	ldr	r3, [pc, #252]	; (80062d0 <HAL_SPI_MspInit+0x1fc>)
 80061d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061d6:	4a3e      	ldr	r2, [pc, #248]	; (80062d0 <HAL_SPI_MspInit+0x1fc>)
 80061d8:	f043 0302 	orr.w	r3, r3, #2
 80061dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80061de:	4b3c      	ldr	r3, [pc, #240]	; (80062d0 <HAL_SPI_MspInit+0x1fc>)
 80061e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061e2:	f003 0302 	and.w	r3, r3, #2
 80061e6:	60fb      	str	r3, [r7, #12]
 80061e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80061ea:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80061ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061f0:	2302      	movs	r3, #2
 80061f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061f4:	2300      	movs	r3, #0
 80061f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061f8:	2303      	movs	r3, #3
 80061fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80061fc:	2305      	movs	r3, #5
 80061fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006200:	f107 031c 	add.w	r3, r7, #28
 8006204:	4619      	mov	r1, r3
 8006206:	4836      	ldr	r0, [pc, #216]	; (80062e0 <HAL_SPI_MspInit+0x20c>)
 8006208:	f001 fd38 	bl	8007c7c <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800620c:	4b35      	ldr	r3, [pc, #212]	; (80062e4 <HAL_SPI_MspInit+0x210>)
 800620e:	4a36      	ldr	r2, [pc, #216]	; (80062e8 <HAL_SPI_MspInit+0x214>)
 8006210:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_1;
 8006212:	4b34      	ldr	r3, [pc, #208]	; (80062e4 <HAL_SPI_MspInit+0x210>)
 8006214:	2201      	movs	r2, #1
 8006216:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006218:	4b32      	ldr	r3, [pc, #200]	; (80062e4 <HAL_SPI_MspInit+0x210>)
 800621a:	2200      	movs	r2, #0
 800621c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800621e:	4b31      	ldr	r3, [pc, #196]	; (80062e4 <HAL_SPI_MspInit+0x210>)
 8006220:	2200      	movs	r2, #0
 8006222:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006224:	4b2f      	ldr	r3, [pc, #188]	; (80062e4 <HAL_SPI_MspInit+0x210>)
 8006226:	2280      	movs	r2, #128	; 0x80
 8006228:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800622a:	4b2e      	ldr	r3, [pc, #184]	; (80062e4 <HAL_SPI_MspInit+0x210>)
 800622c:	2200      	movs	r2, #0
 800622e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006230:	4b2c      	ldr	r3, [pc, #176]	; (80062e4 <HAL_SPI_MspInit+0x210>)
 8006232:	2200      	movs	r2, #0
 8006234:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8006236:	4b2b      	ldr	r3, [pc, #172]	; (80062e4 <HAL_SPI_MspInit+0x210>)
 8006238:	2200      	movs	r2, #0
 800623a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800623c:	4b29      	ldr	r3, [pc, #164]	; (80062e4 <HAL_SPI_MspInit+0x210>)
 800623e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006242:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8006244:	4827      	ldr	r0, [pc, #156]	; (80062e4 <HAL_SPI_MspInit+0x210>)
 8006246:	f001 fa95 	bl	8007774 <HAL_DMA_Init>
 800624a:	4603      	mov	r3, r0
 800624c:	2b00      	cmp	r3, #0
 800624e:	d001      	beq.n	8006254 <HAL_SPI_MspInit+0x180>
      Error_Handler();
 8006250:	f7ff f9a2 	bl	8005598 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a23      	ldr	r2, [pc, #140]	; (80062e4 <HAL_SPI_MspInit+0x210>)
 8006258:	659a      	str	r2, [r3, #88]	; 0x58
 800625a:	4a22      	ldr	r2, [pc, #136]	; (80062e4 <HAL_SPI_MspInit+0x210>)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8006260:	4b22      	ldr	r3, [pc, #136]	; (80062ec <HAL_SPI_MspInit+0x218>)
 8006262:	4a23      	ldr	r2, [pc, #140]	; (80062f0 <HAL_SPI_MspInit+0x21c>)
 8006264:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8006266:	4b21      	ldr	r3, [pc, #132]	; (80062ec <HAL_SPI_MspInit+0x218>)
 8006268:	2201      	movs	r2, #1
 800626a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800626c:	4b1f      	ldr	r3, [pc, #124]	; (80062ec <HAL_SPI_MspInit+0x218>)
 800626e:	2210      	movs	r2, #16
 8006270:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006272:	4b1e      	ldr	r3, [pc, #120]	; (80062ec <HAL_SPI_MspInit+0x218>)
 8006274:	2200      	movs	r2, #0
 8006276:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006278:	4b1c      	ldr	r3, [pc, #112]	; (80062ec <HAL_SPI_MspInit+0x218>)
 800627a:	2280      	movs	r2, #128	; 0x80
 800627c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800627e:	4b1b      	ldr	r3, [pc, #108]	; (80062ec <HAL_SPI_MspInit+0x218>)
 8006280:	2200      	movs	r2, #0
 8006282:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006284:	4b19      	ldr	r3, [pc, #100]	; (80062ec <HAL_SPI_MspInit+0x218>)
 8006286:	2200      	movs	r2, #0
 8006288:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800628a:	4b18      	ldr	r3, [pc, #96]	; (80062ec <HAL_SPI_MspInit+0x218>)
 800628c:	2200      	movs	r2, #0
 800628e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8006290:	4b16      	ldr	r3, [pc, #88]	; (80062ec <HAL_SPI_MspInit+0x218>)
 8006292:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006296:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8006298:	4814      	ldr	r0, [pc, #80]	; (80062ec <HAL_SPI_MspInit+0x218>)
 800629a:	f001 fa6b 	bl	8007774 <HAL_DMA_Init>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <HAL_SPI_MspInit+0x1d4>
      Error_Handler();
 80062a4:	f7ff f978 	bl	8005598 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a10      	ldr	r2, [pc, #64]	; (80062ec <HAL_SPI_MspInit+0x218>)
 80062ac:	655a      	str	r2, [r3, #84]	; 0x54
 80062ae:	4a0f      	ldr	r2, [pc, #60]	; (80062ec <HAL_SPI_MspInit+0x218>)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80062b4:	2200      	movs	r2, #0
 80062b6:	2105      	movs	r1, #5
 80062b8:	2024      	movs	r0, #36	; 0x24
 80062ba:	f001 fa31 	bl	8007720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80062be:	2024      	movs	r0, #36	; 0x24
 80062c0:	f001 fa4a 	bl	8007758 <HAL_NVIC_EnableIRQ>
}
 80062c4:	bf00      	nop
 80062c6:	3730      	adds	r7, #48	; 0x30
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	40013000 	.word	0x40013000
 80062d0:	40021000 	.word	0x40021000
 80062d4:	20000b60 	.word	0x20000b60
 80062d8:	40020444 	.word	0x40020444
 80062dc:	40003800 	.word	0x40003800
 80062e0:	48000400 	.word	0x48000400
 80062e4:	20000ba8 	.word	0x20000ba8
 80062e8:	40020044 	.word	0x40020044
 80062ec:	20000bf0 	.word	0x20000bf0
 80062f0:	40020058 	.word	0x40020058

080062f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a1a      	ldr	r2, [pc, #104]	; (800636c <HAL_TIM_Base_MspInit+0x78>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d114      	bne.n	8006330 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006306:	4b1a      	ldr	r3, [pc, #104]	; (8006370 <HAL_TIM_Base_MspInit+0x7c>)
 8006308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800630a:	4a19      	ldr	r2, [pc, #100]	; (8006370 <HAL_TIM_Base_MspInit+0x7c>)
 800630c:	f043 0304 	orr.w	r3, r3, #4
 8006310:	6593      	str	r3, [r2, #88]	; 0x58
 8006312:	4b17      	ldr	r3, [pc, #92]	; (8006370 <HAL_TIM_Base_MspInit+0x7c>)
 8006314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006316:	f003 0304 	and.w	r3, r3, #4
 800631a:	60fb      	str	r3, [r7, #12]
 800631c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800631e:	2200      	movs	r2, #0
 8006320:	2105      	movs	r1, #5
 8006322:	201e      	movs	r0, #30
 8006324:	f001 f9fc 	bl	8007720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8006328:	201e      	movs	r0, #30
 800632a:	f001 fa15 	bl	8007758 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800632e:	e018      	b.n	8006362 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM6)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a0f      	ldr	r2, [pc, #60]	; (8006374 <HAL_TIM_Base_MspInit+0x80>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d113      	bne.n	8006362 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800633a:	4b0d      	ldr	r3, [pc, #52]	; (8006370 <HAL_TIM_Base_MspInit+0x7c>)
 800633c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800633e:	4a0c      	ldr	r2, [pc, #48]	; (8006370 <HAL_TIM_Base_MspInit+0x7c>)
 8006340:	f043 0310 	orr.w	r3, r3, #16
 8006344:	6593      	str	r3, [r2, #88]	; 0x58
 8006346:	4b0a      	ldr	r3, [pc, #40]	; (8006370 <HAL_TIM_Base_MspInit+0x7c>)
 8006348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800634a:	f003 0310 	and.w	r3, r3, #16
 800634e:	60bb      	str	r3, [r7, #8]
 8006350:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 7, 0);
 8006352:	2200      	movs	r2, #0
 8006354:	2107      	movs	r1, #7
 8006356:	2036      	movs	r0, #54	; 0x36
 8006358:	f001 f9e2 	bl	8007720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800635c:	2036      	movs	r0, #54	; 0x36
 800635e:	f001 f9fb 	bl	8007758 <HAL_NVIC_EnableIRQ>
}
 8006362:	bf00      	nop
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	40000800 	.word	0x40000800
 8006370:	40021000 	.word	0x40021000
 8006374:	40001000 	.word	0x40001000

08006378 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b0ae      	sub	sp, #184	; 0xb8
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006380:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006384:	2200      	movs	r2, #0
 8006386:	601a      	str	r2, [r3, #0]
 8006388:	605a      	str	r2, [r3, #4]
 800638a:	609a      	str	r2, [r3, #8]
 800638c:	60da      	str	r2, [r3, #12]
 800638e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006390:	f107 031c 	add.w	r3, r7, #28
 8006394:	2288      	movs	r2, #136	; 0x88
 8006396:	2100      	movs	r1, #0
 8006398:	4618      	mov	r0, r3
 800639a:	f00c fdc0 	bl	8012f1e <memset>
  if(huart->Instance==USART2)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a74      	ldr	r2, [pc, #464]	; (8006574 <HAL_UART_MspInit+0x1fc>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d16e      	bne.n	8006486 <HAL_UART_MspInit+0x10e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80063a8:	2302      	movs	r3, #2
 80063aa:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80063ac:	2300      	movs	r3, #0
 80063ae:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80063b0:	f107 031c 	add.w	r3, r7, #28
 80063b4:	4618      	mov	r0, r3
 80063b6:	f004 fa19 	bl	800a7ec <HAL_RCCEx_PeriphCLKConfig>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d001      	beq.n	80063c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80063c0:	f7ff f8ea 	bl	8005598 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80063c4:	4b6c      	ldr	r3, [pc, #432]	; (8006578 <HAL_UART_MspInit+0x200>)
 80063c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063c8:	4a6b      	ldr	r2, [pc, #428]	; (8006578 <HAL_UART_MspInit+0x200>)
 80063ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063ce:	6593      	str	r3, [r2, #88]	; 0x58
 80063d0:	4b69      	ldr	r3, [pc, #420]	; (8006578 <HAL_UART_MspInit+0x200>)
 80063d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063d8:	61bb      	str	r3, [r7, #24]
 80063da:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063dc:	4b66      	ldr	r3, [pc, #408]	; (8006578 <HAL_UART_MspInit+0x200>)
 80063de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063e0:	4a65      	ldr	r2, [pc, #404]	; (8006578 <HAL_UART_MspInit+0x200>)
 80063e2:	f043 0301 	orr.w	r3, r3, #1
 80063e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80063e8:	4b63      	ldr	r3, [pc, #396]	; (8006578 <HAL_UART_MspInit+0x200>)
 80063ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063ec:	f003 0301 	and.w	r3, r3, #1
 80063f0:	617b      	str	r3, [r7, #20]
 80063f2:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = LOG_TX_Pin|LOG_RX_Pin;
 80063f4:	230c      	movs	r3, #12
 80063f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063fa:	2302      	movs	r3, #2
 80063fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006400:	2300      	movs	r3, #0
 8006402:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006406:	2303      	movs	r3, #3
 8006408:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800640c:	2307      	movs	r3, #7
 800640e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006412:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006416:	4619      	mov	r1, r3
 8006418:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800641c:	f001 fc2e 	bl	8007c7c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8006420:	4b56      	ldr	r3, [pc, #344]	; (800657c <HAL_UART_MspInit+0x204>)
 8006422:	4a57      	ldr	r2, [pc, #348]	; (8006580 <HAL_UART_MspInit+0x208>)
 8006424:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8006426:	4b55      	ldr	r3, [pc, #340]	; (800657c <HAL_UART_MspInit+0x204>)
 8006428:	2202      	movs	r2, #2
 800642a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800642c:	4b53      	ldr	r3, [pc, #332]	; (800657c <HAL_UART_MspInit+0x204>)
 800642e:	2210      	movs	r2, #16
 8006430:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006432:	4b52      	ldr	r3, [pc, #328]	; (800657c <HAL_UART_MspInit+0x204>)
 8006434:	2200      	movs	r2, #0
 8006436:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006438:	4b50      	ldr	r3, [pc, #320]	; (800657c <HAL_UART_MspInit+0x204>)
 800643a:	2280      	movs	r2, #128	; 0x80
 800643c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800643e:	4b4f      	ldr	r3, [pc, #316]	; (800657c <HAL_UART_MspInit+0x204>)
 8006440:	2200      	movs	r2, #0
 8006442:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006444:	4b4d      	ldr	r3, [pc, #308]	; (800657c <HAL_UART_MspInit+0x204>)
 8006446:	2200      	movs	r2, #0
 8006448:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800644a:	4b4c      	ldr	r3, [pc, #304]	; (800657c <HAL_UART_MspInit+0x204>)
 800644c:	2200      	movs	r2, #0
 800644e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006450:	4b4a      	ldr	r3, [pc, #296]	; (800657c <HAL_UART_MspInit+0x204>)
 8006452:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006456:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006458:	4848      	ldr	r0, [pc, #288]	; (800657c <HAL_UART_MspInit+0x204>)
 800645a:	f001 f98b 	bl	8007774 <HAL_DMA_Init>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d001      	beq.n	8006468 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8006464:	f7ff f898 	bl	8005598 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a44      	ldr	r2, [pc, #272]	; (800657c <HAL_UART_MspInit+0x204>)
 800646c:	66da      	str	r2, [r3, #108]	; 0x6c
 800646e:	4a43      	ldr	r2, [pc, #268]	; (800657c <HAL_UART_MspInit+0x204>)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8006474:	2200      	movs	r2, #0
 8006476:	2105      	movs	r1, #5
 8006478:	2026      	movs	r0, #38	; 0x26
 800647a:	f001 f951 	bl	8007720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800647e:	2026      	movs	r0, #38	; 0x26
 8006480:	f001 f96a 	bl	8007758 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006484:	e071      	b.n	800656a <HAL_UART_MspInit+0x1f2>
  else if(huart->Instance==USART3)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a3e      	ldr	r2, [pc, #248]	; (8006584 <HAL_UART_MspInit+0x20c>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d16c      	bne.n	800656a <HAL_UART_MspInit+0x1f2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006490:	2304      	movs	r3, #4
 8006492:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8006494:	2300      	movs	r3, #0
 8006496:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006498:	f107 031c 	add.w	r3, r7, #28
 800649c:	4618      	mov	r0, r3
 800649e:	f004 f9a5 	bl	800a7ec <HAL_RCCEx_PeriphCLKConfig>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d001      	beq.n	80064ac <HAL_UART_MspInit+0x134>
      Error_Handler();
 80064a8:	f7ff f876 	bl	8005598 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80064ac:	4b32      	ldr	r3, [pc, #200]	; (8006578 <HAL_UART_MspInit+0x200>)
 80064ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b0:	4a31      	ldr	r2, [pc, #196]	; (8006578 <HAL_UART_MspInit+0x200>)
 80064b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064b6:	6593      	str	r3, [r2, #88]	; 0x58
 80064b8:	4b2f      	ldr	r3, [pc, #188]	; (8006578 <HAL_UART_MspInit+0x200>)
 80064ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064c0:	613b      	str	r3, [r7, #16]
 80064c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80064c4:	4b2c      	ldr	r3, [pc, #176]	; (8006578 <HAL_UART_MspInit+0x200>)
 80064c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064c8:	4a2b      	ldr	r2, [pc, #172]	; (8006578 <HAL_UART_MspInit+0x200>)
 80064ca:	f043 0304 	orr.w	r3, r3, #4
 80064ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80064d0:	4b29      	ldr	r3, [pc, #164]	; (8006578 <HAL_UART_MspInit+0x200>)
 80064d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064d4:	f003 0304 	and.w	r3, r3, #4
 80064d8:	60fb      	str	r3, [r7, #12]
 80064da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80064dc:	2330      	movs	r3, #48	; 0x30
 80064de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064e2:	2302      	movs	r3, #2
 80064e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064e8:	2300      	movs	r3, #0
 80064ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064ee:	2303      	movs	r3, #3
 80064f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80064f4:	2307      	movs	r3, #7
 80064f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80064fa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80064fe:	4619      	mov	r1, r3
 8006500:	4821      	ldr	r0, [pc, #132]	; (8006588 <HAL_UART_MspInit+0x210>)
 8006502:	f001 fbbb 	bl	8007c7c <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8006506:	4b21      	ldr	r3, [pc, #132]	; (800658c <HAL_UART_MspInit+0x214>)
 8006508:	4a21      	ldr	r2, [pc, #132]	; (8006590 <HAL_UART_MspInit+0x218>)
 800650a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_2;
 800650c:	4b1f      	ldr	r3, [pc, #124]	; (800658c <HAL_UART_MspInit+0x214>)
 800650e:	2202      	movs	r2, #2
 8006510:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006512:	4b1e      	ldr	r3, [pc, #120]	; (800658c <HAL_UART_MspInit+0x214>)
 8006514:	2210      	movs	r2, #16
 8006516:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006518:	4b1c      	ldr	r3, [pc, #112]	; (800658c <HAL_UART_MspInit+0x214>)
 800651a:	2200      	movs	r2, #0
 800651c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800651e:	4b1b      	ldr	r3, [pc, #108]	; (800658c <HAL_UART_MspInit+0x214>)
 8006520:	2280      	movs	r2, #128	; 0x80
 8006522:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006524:	4b19      	ldr	r3, [pc, #100]	; (800658c <HAL_UART_MspInit+0x214>)
 8006526:	2200      	movs	r2, #0
 8006528:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800652a:	4b18      	ldr	r3, [pc, #96]	; (800658c <HAL_UART_MspInit+0x214>)
 800652c:	2200      	movs	r2, #0
 800652e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8006530:	4b16      	ldr	r3, [pc, #88]	; (800658c <HAL_UART_MspInit+0x214>)
 8006532:	2200      	movs	r2, #0
 8006534:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006536:	4b15      	ldr	r3, [pc, #84]	; (800658c <HAL_UART_MspInit+0x214>)
 8006538:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800653c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800653e:	4813      	ldr	r0, [pc, #76]	; (800658c <HAL_UART_MspInit+0x214>)
 8006540:	f001 f918 	bl	8007774 <HAL_DMA_Init>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d001      	beq.n	800654e <HAL_UART_MspInit+0x1d6>
      Error_Handler();
 800654a:	f7ff f825 	bl	8005598 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a0e      	ldr	r2, [pc, #56]	; (800658c <HAL_UART_MspInit+0x214>)
 8006552:	66da      	str	r2, [r3, #108]	; 0x6c
 8006554:	4a0d      	ldr	r2, [pc, #52]	; (800658c <HAL_UART_MspInit+0x214>)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800655a:	2200      	movs	r2, #0
 800655c:	2105      	movs	r1, #5
 800655e:	2027      	movs	r0, #39	; 0x27
 8006560:	f001 f8de 	bl	8007720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006564:	2027      	movs	r0, #39	; 0x27
 8006566:	f001 f8f7 	bl	8007758 <HAL_NVIC_EnableIRQ>
}
 800656a:	bf00      	nop
 800656c:	37b8      	adds	r7, #184	; 0xb8
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	40004400 	.word	0x40004400
 8006578:	40021000 	.word	0x40021000
 800657c:	20000dd8 	.word	0x20000dd8
 8006580:	40020080 	.word	0x40020080
 8006584:	40004800 	.word	0x40004800
 8006588:	48000800 	.word	0x48000800
 800658c:	20000e20 	.word	0x20000e20
 8006590:	4002001c 	.word	0x4002001c

08006594 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b08c      	sub	sp, #48	; 0x30
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800659c:	2300      	movs	r3, #0
 800659e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80065a0:	2300      	movs	r3, #0
 80065a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80065a4:	2200      	movs	r2, #0
 80065a6:	6879      	ldr	r1, [r7, #4]
 80065a8:	2019      	movs	r0, #25
 80065aa:	f001 f8b9 	bl	8007720 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80065ae:	2019      	movs	r0, #25
 80065b0:	f001 f8d2 	bl	8007758 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80065b4:	4b1e      	ldr	r3, [pc, #120]	; (8006630 <HAL_InitTick+0x9c>)
 80065b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065b8:	4a1d      	ldr	r2, [pc, #116]	; (8006630 <HAL_InitTick+0x9c>)
 80065ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80065be:	6613      	str	r3, [r2, #96]	; 0x60
 80065c0:	4b1b      	ldr	r3, [pc, #108]	; (8006630 <HAL_InitTick+0x9c>)
 80065c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065c8:	60fb      	str	r3, [r7, #12]
 80065ca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80065cc:	f107 0210 	add.w	r2, r7, #16
 80065d0:	f107 0314 	add.w	r3, r7, #20
 80065d4:	4611      	mov	r1, r2
 80065d6:	4618      	mov	r0, r3
 80065d8:	f004 f876 	bl	800a6c8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80065dc:	f004 f85e 	bl	800a69c <HAL_RCC_GetPCLK2Freq>
 80065e0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80065e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e4:	4a13      	ldr	r2, [pc, #76]	; (8006634 <HAL_InitTick+0xa0>)
 80065e6:	fba2 2303 	umull	r2, r3, r2, r3
 80065ea:	0c9b      	lsrs	r3, r3, #18
 80065ec:	3b01      	subs	r3, #1
 80065ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80065f0:	4b11      	ldr	r3, [pc, #68]	; (8006638 <HAL_InitTick+0xa4>)
 80065f2:	4a12      	ldr	r2, [pc, #72]	; (800663c <HAL_InitTick+0xa8>)
 80065f4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80065f6:	4b10      	ldr	r3, [pc, #64]	; (8006638 <HAL_InitTick+0xa4>)
 80065f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80065fc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80065fe:	4a0e      	ldr	r2, [pc, #56]	; (8006638 <HAL_InitTick+0xa4>)
 8006600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006602:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8006604:	4b0c      	ldr	r3, [pc, #48]	; (8006638 <HAL_InitTick+0xa4>)
 8006606:	2200      	movs	r2, #0
 8006608:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800660a:	4b0b      	ldr	r3, [pc, #44]	; (8006638 <HAL_InitTick+0xa4>)
 800660c:	2200      	movs	r2, #0
 800660e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8006610:	4809      	ldr	r0, [pc, #36]	; (8006638 <HAL_InitTick+0xa4>)
 8006612:	f006 fccb 	bl	800cfac <HAL_TIM_Base_Init>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d104      	bne.n	8006626 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800661c:	4806      	ldr	r0, [pc, #24]	; (8006638 <HAL_InitTick+0xa4>)
 800661e:	f006 fd1d 	bl	800d05c <HAL_TIM_Base_Start_IT>
 8006622:	4603      	mov	r3, r0
 8006624:	e000      	b.n	8006628 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
}
 8006628:	4618      	mov	r0, r3
 800662a:	3730      	adds	r7, #48	; 0x30
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}
 8006630:	40021000 	.word	0x40021000
 8006634:	431bde83 	.word	0x431bde83
 8006638:	20003344 	.word	0x20003344
 800663c:	40012c00 	.word	0x40012c00

08006640 <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM1 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 8006640:	b480      	push	{r7}
 8006642:	af00      	add	r7, sp, #0
  /* Disable TIM1 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim1, TIM_IT_UPDATE);
 8006644:	4b06      	ldr	r3, [pc, #24]	; (8006660 <HAL_SuspendTick+0x20>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68da      	ldr	r2, [r3, #12]
 800664a:	4b05      	ldr	r3, [pc, #20]	; (8006660 <HAL_SuspendTick+0x20>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f022 0201 	bic.w	r2, r2, #1
 8006652:	60da      	str	r2, [r3, #12]
}
 8006654:	bf00      	nop
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	20003344 	.word	0x20003344

08006664 <HAL_ResumeTick>:
  * @note   Enable the tick increment by Enabling TIM1 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_ResumeTick(void)
{
 8006664:	b480      	push	{r7}
 8006666:	af00      	add	r7, sp, #0
  /* Enable TIM1 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
 8006668:	4b06      	ldr	r3, [pc, #24]	; (8006684 <HAL_ResumeTick+0x20>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68da      	ldr	r2, [r3, #12]
 800666e:	4b05      	ldr	r3, [pc, #20]	; (8006684 <HAL_ResumeTick+0x20>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f042 0201 	orr.w	r2, r2, #1
 8006676:	60da      	str	r2, [r3, #12]
}
 8006678:	bf00      	nop
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	20003344 	.word	0x20003344

08006688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006688:	b480      	push	{r7}
 800668a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800668c:	e7fe      	b.n	800668c <NMI_Handler+0x4>

0800668e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800668e:	b480      	push	{r7}
 8006690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006692:	e7fe      	b.n	8006692 <HardFault_Handler+0x4>

08006694 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006694:	b480      	push	{r7}
 8006696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006698:	e7fe      	b.n	8006698 <MemManage_Handler+0x4>

0800669a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800669a:	b480      	push	{r7}
 800669c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800669e:	e7fe      	b.n	800669e <BusFault_Handler+0x4>

080066a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80066a0:	b480      	push	{r7}
 80066a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80066a4:	e7fe      	b.n	80066a4 <UsageFault_Handler+0x4>

080066a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80066a6:	b480      	push	{r7}
 80066a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80066aa:	bf00      	nop
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY0_Pin);
 80066b8:	2002      	movs	r0, #2
 80066ba:	f001 fcd3 	bl	8008064 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80066be:	bf00      	nop
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80066c2:	b580      	push	{r7, lr}
 80066c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY1_Pin);
 80066c6:	2004      	movs	r0, #4
 80066c8:	f001 fccc 	bl	8008064 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80066cc:	bf00      	nop
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80066d4:	4802      	ldr	r0, [pc, #8]	; (80066e0 <DMA1_Channel2_IRQHandler+0x10>)
 80066d6:	f001 f9e4 	bl	8007aa2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80066da:	bf00      	nop
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	20000e20 	.word	0x20000e20

080066e4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80066e8:	4802      	ldr	r0, [pc, #8]	; (80066f4 <DMA1_Channel4_IRQHandler+0x10>)
 80066ea:	f001 f9da 	bl	8007aa2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80066ee:	bf00      	nop
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	20000ba8 	.word	0x20000ba8

080066f8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80066fc:	4802      	ldr	r0, [pc, #8]	; (8006708 <DMA1_Channel5_IRQHandler+0x10>)
 80066fe:	f001 f9d0 	bl	8007aa2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8006702:	bf00      	nop
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	20000bf0 	.word	0x20000bf0

0800670c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8006710:	4802      	ldr	r0, [pc, #8]	; (800671c <DMA1_Channel6_IRQHandler+0x10>)
 8006712:	f001 f9c6 	bl	8007aa2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8006716:	bf00      	nop
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	20000a2c 	.word	0x20000a2c

08006720 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8006724:	4802      	ldr	r0, [pc, #8]	; (8006730 <DMA1_Channel7_IRQHandler+0x10>)
 8006726:	f001 f9bc 	bl	8007aa2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800672a:	bf00      	nop
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	20000dd8 	.word	0x20000dd8

08006734 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006738:	4802      	ldr	r0, [pc, #8]	; (8006744 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800673a:	f006 fcff 	bl	800d13c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800673e:	bf00      	nop
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	20003344 	.word	0x20003344

08006748 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800674c:	4802      	ldr	r0, [pc, #8]	; (8006758 <TIM4_IRQHandler+0x10>)
 800674e:	f006 fcf5 	bl	800d13c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8006752:	bf00      	nop
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	20000c38 	.word	0x20000c38

0800675c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8006760:	4802      	ldr	r0, [pc, #8]	; (800676c <I2C1_EV_IRQHandler+0x10>)
 8006762:	f002 f849 	bl	80087f8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8006766:	bf00      	nop
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	20000990 	.word	0x20000990

08006770 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8006774:	4802      	ldr	r0, [pc, #8]	; (8006780 <I2C1_ER_IRQHandler+0x10>)
 8006776:	f002 f859 	bl	800882c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800677a:	bf00      	nop
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	20000990 	.word	0x20000990

08006784 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8006788:	4802      	ldr	r0, [pc, #8]	; (8006794 <SPI1_IRQHandler+0x10>)
 800678a:	f005 ffd9 	bl	800c740 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800678e:	bf00      	nop
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	20000a98 	.word	0x20000a98

08006798 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800679c:	4802      	ldr	r0, [pc, #8]	; (80067a8 <SPI2_IRQHandler+0x10>)
 800679e:	f005 ffcf 	bl	800c740 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80067a2:	bf00      	nop
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	20000afc 	.word	0x20000afc

080067ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80067b0:	4802      	ldr	r0, [pc, #8]	; (80067bc <USART2_IRQHandler+0x10>)
 80067b2:	f007 f9e1 	bl	800db78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80067b6:	bf00      	nop
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	20000cd0 	.word	0x20000cd0

080067c0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80067c4:	4802      	ldr	r0, [pc, #8]	; (80067d0 <USART3_IRQHandler+0x10>)
 80067c6:	f007 f9d7 	bl	800db78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80067ca:	bf00      	nop
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	20000d54 	.word	0x20000d54

080067d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80067d8:	4802      	ldr	r0, [pc, #8]	; (80067e4 <TIM6_DAC_IRQHandler+0x10>)
 80067da:	f006 fcaf 	bl	800d13c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80067de:	bf00      	nop
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	20000c84 	.word	0x20000c84

080067e8 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80067ec:	4802      	ldr	r0, [pc, #8]	; (80067f8 <DMA2_Channel4_IRQHandler+0x10>)
 80067ee:	f001 f958 	bl	8007aa2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 80067f2:	bf00      	nop
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	20000b60 	.word	0x20000b60

080067fc <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8006800:	4802      	ldr	r0, [pc, #8]	; (800680c <DMA2_Channel6_IRQHandler+0x10>)
 8006802:	f001 f94e 	bl	8007aa2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 8006806:	bf00      	nop
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	200009e4 	.word	0x200009e4

08006810 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006810:	b480      	push	{r7}
 8006812:	af00      	add	r7, sp, #0
	return 1;
 8006814:	2301      	movs	r3, #1
}
 8006816:	4618      	mov	r0, r3
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <_kill>:

int _kill(int pid, int sig)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800682a:	f00c f99b 	bl	8012b64 <__errno>
 800682e:	4603      	mov	r3, r0
 8006830:	2216      	movs	r2, #22
 8006832:	601a      	str	r2, [r3, #0]
	return -1;
 8006834:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006838:	4618      	mov	r0, r3
 800683a:	3708      	adds	r7, #8
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <_exit>:

void _exit (int status)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006848:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f7ff ffe7 	bl	8006820 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006852:	e7fe      	b.n	8006852 <_exit+0x12>

08006854 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b086      	sub	sp, #24
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006860:	2300      	movs	r3, #0
 8006862:	617b      	str	r3, [r7, #20]
 8006864:	e00a      	b.n	800687c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006866:	f3af 8000 	nop.w
 800686a:	4601      	mov	r1, r0
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	1c5a      	adds	r2, r3, #1
 8006870:	60ba      	str	r2, [r7, #8]
 8006872:	b2ca      	uxtb	r2, r1
 8006874:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	3301      	adds	r3, #1
 800687a:	617b      	str	r3, [r7, #20]
 800687c:	697a      	ldr	r2, [r7, #20]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	429a      	cmp	r2, r3
 8006882:	dbf0      	blt.n	8006866 <_read+0x12>
	}

return len;
 8006884:	687b      	ldr	r3, [r7, #4]
}
 8006886:	4618      	mov	r0, r3
 8006888:	3718      	adds	r7, #24
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}

0800688e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800688e:	b580      	push	{r7, lr}
 8006890:	b086      	sub	sp, #24
 8006892:	af00      	add	r7, sp, #0
 8006894:	60f8      	str	r0, [r7, #12]
 8006896:	60b9      	str	r1, [r7, #8]
 8006898:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800689a:	2300      	movs	r3, #0
 800689c:	617b      	str	r3, [r7, #20]
 800689e:	e009      	b.n	80068b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	1c5a      	adds	r2, r3, #1
 80068a4:	60ba      	str	r2, [r7, #8]
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	4618      	mov	r0, r3
 80068aa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	3301      	adds	r3, #1
 80068b2:	617b      	str	r3, [r7, #20]
 80068b4:	697a      	ldr	r2, [r7, #20]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	dbf1      	blt.n	80068a0 <_write+0x12>
	}
	return len;
 80068bc:	687b      	ldr	r3, [r7, #4]
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3718      	adds	r7, #24
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <_close>:

int _close(int file)
{
 80068c6:	b480      	push	{r7}
 80068c8:	b083      	sub	sp, #12
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
	return -1;
 80068ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	370c      	adds	r7, #12
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr

080068de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80068de:	b480      	push	{r7}
 80068e0:	b083      	sub	sp, #12
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
 80068e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80068ee:	605a      	str	r2, [r3, #4]
	return 0;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	370c      	adds	r7, #12
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr

080068fe <_isatty>:

int _isatty(int file)
{
 80068fe:	b480      	push	{r7}
 8006900:	b083      	sub	sp, #12
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
	return 1;
 8006906:	2301      	movs	r3, #1
}
 8006908:	4618      	mov	r0, r3
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	607a      	str	r2, [r7, #4]
	return 0;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3714      	adds	r7, #20
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr
	...

08006930 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b086      	sub	sp, #24
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006938:	4a14      	ldr	r2, [pc, #80]	; (800698c <_sbrk+0x5c>)
 800693a:	4b15      	ldr	r3, [pc, #84]	; (8006990 <_sbrk+0x60>)
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006944:	4b13      	ldr	r3, [pc, #76]	; (8006994 <_sbrk+0x64>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d102      	bne.n	8006952 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800694c:	4b11      	ldr	r3, [pc, #68]	; (8006994 <_sbrk+0x64>)
 800694e:	4a12      	ldr	r2, [pc, #72]	; (8006998 <_sbrk+0x68>)
 8006950:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006952:	4b10      	ldr	r3, [pc, #64]	; (8006994 <_sbrk+0x64>)
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4413      	add	r3, r2
 800695a:	693a      	ldr	r2, [r7, #16]
 800695c:	429a      	cmp	r2, r3
 800695e:	d207      	bcs.n	8006970 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006960:	f00c f900 	bl	8012b64 <__errno>
 8006964:	4603      	mov	r3, r0
 8006966:	220c      	movs	r2, #12
 8006968:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800696a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800696e:	e009      	b.n	8006984 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006970:	4b08      	ldr	r3, [pc, #32]	; (8006994 <_sbrk+0x64>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006976:	4b07      	ldr	r3, [pc, #28]	; (8006994 <_sbrk+0x64>)
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4413      	add	r3, r2
 800697e:	4a05      	ldr	r2, [pc, #20]	; (8006994 <_sbrk+0x64>)
 8006980:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006982:	68fb      	ldr	r3, [r7, #12]
}
 8006984:	4618      	mov	r0, r3
 8006986:	3718      	adds	r7, #24
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	20018000 	.word	0x20018000
 8006990:	00000c00 	.word	0x00000c00
 8006994:	20003390 	.word	0x20003390
 8006998:	200082e8 	.word	0x200082e8

0800699c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800699c:	b480      	push	{r7}
 800699e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80069a0:	4b06      	ldr	r3, [pc, #24]	; (80069bc <SystemInit+0x20>)
 80069a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069a6:	4a05      	ldr	r2, [pc, #20]	; (80069bc <SystemInit+0x20>)
 80069a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80069ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80069b0:	bf00      	nop
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop
 80069bc:	e000ed00 	.word	0xe000ed00

080069c0 <W25_SELECT>:

extern void Report(const uint8_t addTime, const char *fmt, ...);

//------------------------------------------------------------------------------------------

void W25_SELECT()   { W25_SEL(); } //HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_RESET);//set to 0
 80069c0:	b580      	push	{r7, lr}
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	2200      	movs	r2, #0
 80069c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80069ca:	4802      	ldr	r0, [pc, #8]	; (80069d4 <W25_SELECT+0x14>)
 80069cc:	f001 fb18 	bl	8008000 <HAL_GPIO_WritePin>
 80069d0:	bf00      	nop
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	48000400 	.word	0x48000400

080069d8 <W25_UNSELECT>:
void W25_UNSELECT() { W25_UNSEL(); } //HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_SET);//set to 1
 80069d8:	b580      	push	{r7, lr}
 80069da:	af00      	add	r7, sp, #0
 80069dc:	2201      	movs	r2, #1
 80069de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80069e2:	4802      	ldr	r0, [pc, #8]	; (80069ec <W25_UNSELECT+0x14>)
 80069e4:	f001 fb0c 	bl	8008000 <HAL_GPIO_WritePin>
 80069e8:	bf00      	nop
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	48000400 	.word	0x48000400

080069f0 <W25qxx_Spi>:
//void W25_SELECT()   { HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_RESET); }//set to 0
//void W25_UNSELECT() { HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_SET); }//set to 1

//------------------------------------------------------------------------------------------
uint8_t W25qxx_Spi(uint8_t Data)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b086      	sub	sp, #24
 80069f4:	af02      	add	r7, sp, #8
 80069f6:	4603      	mov	r3, r0
 80069f8:	71fb      	strb	r3, [r7, #7]
uint8_t ret;

    if (HAL_SPI_TransmitReceive(portFLASH, &Data, &ret, 1, min_wait_ms) != HAL_OK) devError |= devSPI;
 80069fa:	4b0c      	ldr	r3, [pc, #48]	; (8006a2c <W25qxx_Spi+0x3c>)
 80069fc:	6818      	ldr	r0, [r3, #0]
 80069fe:	23fa      	movs	r3, #250	; 0xfa
 8006a00:	f107 020f 	add.w	r2, r7, #15
 8006a04:	1df9      	adds	r1, r7, #7
 8006a06:	9300      	str	r3, [sp, #0]
 8006a08:	2301      	movs	r3, #1
 8006a0a:	f005 fa06 	bl	800be1a <HAL_SPI_TransmitReceive>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d006      	beq.n	8006a22 <W25qxx_Spi+0x32>
 8006a14:	4b06      	ldr	r3, [pc, #24]	; (8006a30 <W25qxx_Spi+0x40>)
 8006a16:	881b      	ldrh	r3, [r3, #0]
 8006a18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	4b04      	ldr	r3, [pc, #16]	; (8006a30 <W25qxx_Spi+0x40>)
 8006a20:	801a      	strh	r2, [r3, #0]

    return ret;
 8006a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3710      	adds	r7, #16
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	20000010 	.word	0x20000010
 8006a30:	20001b00 	.word	0x20001b00

08006a34 <W25qxx_Reset>:
//------------------------------------------------------------------------------------------
void W25qxx_Reset(void)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	af00      	add	r7, sp, #0
	W25qxx_Delay(100);
 8006a38:	2064      	movs	r0, #100	; 0x64
 8006a3a:	f000 fd95 	bl	8007568 <HAL_Delay>

	W25_SELECT();
 8006a3e:	f7ff ffbf 	bl	80069c0 <W25_SELECT>
		W25qxx_Spi(EN_RESET);
 8006a42:	2066      	movs	r0, #102	; 0x66
 8006a44:	f7ff ffd4 	bl	80069f0 <W25qxx_Spi>
		W25qxx_Spi(CHIP_RESET);
 8006a48:	2099      	movs	r0, #153	; 0x99
 8006a4a:	f7ff ffd1 	bl	80069f0 <W25qxx_Spi>
	W25_UNSELECT();
 8006a4e:	f7ff ffc3 	bl	80069d8 <W25_UNSELECT>

	W25qxx_Delay(100);
 8006a52:	2064      	movs	r0, #100	; 0x64
 8006a54:	f000 fd88 	bl	8007568 <HAL_Delay>
}
 8006a58:	bf00      	nop
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <W25qxx_ReadID>:
//------------------------------------------------------------------------------------------
uint32_t W25qxx_ReadID(void)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
uint32_t Temp[3] = {0};
 8006a62:	1d3b      	adds	r3, r7, #4
 8006a64:	2200      	movs	r2, #0
 8006a66:	601a      	str	r2, [r3, #0]
 8006a68:	605a      	str	r2, [r3, #4]
 8006a6a:	609a      	str	r2, [r3, #8]

    W25_SELECT();//set to 0
 8006a6c:	f7ff ffa8 	bl	80069c0 <W25_SELECT>

    W25qxx_Spi(JEDEC_ID);
 8006a70:	209f      	movs	r0, #159	; 0x9f
 8006a72:	f7ff ffbd 	bl	80069f0 <W25qxx_Spi>
    Temp[0] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8006a76:	20a5      	movs	r0, #165	; 0xa5
 8006a78:	f7ff ffba 	bl	80069f0 <W25qxx_Spi>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	607b      	str	r3, [r7, #4]
    Temp[1] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8006a80:	20a5      	movs	r0, #165	; 0xa5
 8006a82:	f7ff ffb5 	bl	80069f0 <W25qxx_Spi>
 8006a86:	4603      	mov	r3, r0
 8006a88:	60bb      	str	r3, [r7, #8]
    Temp[2] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8006a8a:	20a5      	movs	r0, #165	; 0xa5
 8006a8c:	f7ff ffb0 	bl	80069f0 <W25qxx_Spi>
 8006a90:	4603      	mov	r3, r0
 8006a92:	60fb      	str	r3, [r7, #12]

    W25_UNSELECT();//set to 1
 8006a94:	f7ff ffa0 	bl	80069d8 <W25_UNSELECT>

    return ((Temp[0] << 16) | (Temp[1] << 8) | Temp[2]);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	041a      	lsls	r2, r3, #16
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	021b      	lsls	r3, r3, #8
 8006aa0:	431a      	orrs	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	4313      	orrs	r3, r2
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
	...

08006ab0 <W25qxx_ReadUniqID>:
//------------------------------------------------------------------------------------------
void W25qxx_ReadUniqID(void)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
	uint8_t dat[] = {READ_UID, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE};
 8006ab6:	4a18      	ldr	r2, [pc, #96]	; (8006b18 <W25qxx_ReadUniqID+0x68>)
 8006ab8:	463b      	mov	r3, r7
 8006aba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006abe:	6018      	str	r0, [r3, #0]
 8006ac0:	3304      	adds	r3, #4
 8006ac2:	7019      	strb	r1, [r3, #0]
    W25_SELECT();
 8006ac4:	f7ff ff7c 	bl	80069c0 <W25_SELECT>

    //W25qxx_Spi(READ_UID);
    //for (uint8_t i = 0; i < 4; i++) W25qxx_Spi(W25QXX_DUMMY_BYTE);
    //for (uint8_t i = 0; i < 8; i++) w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
    if (HAL_SPI_Transmit(portFLASH, dat, sizeof(dat), min_wait_ms) != HAL_OK) devError |= devSPI;
 8006ac8:	4b14      	ldr	r3, [pc, #80]	; (8006b1c <W25qxx_ReadUniqID+0x6c>)
 8006aca:	6818      	ldr	r0, [r3, #0]
 8006acc:	23fa      	movs	r3, #250	; 0xfa
 8006ace:	4639      	mov	r1, r7
 8006ad0:	2205      	movs	r2, #5
 8006ad2:	f004 ff04 	bl	800b8de <HAL_SPI_Transmit>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d006      	beq.n	8006aea <W25qxx_ReadUniqID+0x3a>
 8006adc:	4b10      	ldr	r3, [pc, #64]	; (8006b20 <W25qxx_ReadUniqID+0x70>)
 8006ade:	881b      	ldrh	r3, [r3, #0]
 8006ae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	4b0e      	ldr	r3, [pc, #56]	; (8006b20 <W25qxx_ReadUniqID+0x70>)
 8006ae8:	801a      	strh	r2, [r3, #0]
    if (HAL_SPI_Receive(portFLASH, w25qxx.UniqID, 8, min_wait_ms) != HAL_OK) devError |= devSPI;
 8006aea:	4b0c      	ldr	r3, [pc, #48]	; (8006b1c <W25qxx_ReadUniqID+0x6c>)
 8006aec:	6818      	ldr	r0, [r3, #0]
 8006aee:	23fa      	movs	r3, #250	; 0xfa
 8006af0:	2208      	movs	r2, #8
 8006af2:	490c      	ldr	r1, [pc, #48]	; (8006b24 <W25qxx_ReadUniqID+0x74>)
 8006af4:	f005 f861 	bl	800bbba <HAL_SPI_Receive>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d006      	beq.n	8006b0c <W25qxx_ReadUniqID+0x5c>
 8006afe:	4b08      	ldr	r3, [pc, #32]	; (8006b20 <W25qxx_ReadUniqID+0x70>)
 8006b00:	881b      	ldrh	r3, [r3, #0]
 8006b02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b06:	b29a      	uxth	r2, r3
 8006b08:	4b05      	ldr	r3, [pc, #20]	; (8006b20 <W25qxx_ReadUniqID+0x70>)
 8006b0a:	801a      	strh	r2, [r3, #0]

    W25_UNSELECT();
 8006b0c:	f7ff ff64 	bl	80069d8 <W25_UNSELECT>
}
 8006b10:	bf00      	nop
 8006b12:	3708      	adds	r7, #8
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	08017c38 	.word	0x08017c38
 8006b1c:	20000010 	.word	0x20000010
 8006b20:	20001b00 	.word	0x20001b00
 8006b24:	20003395 	.word	0x20003395

08006b28 <W25qxx_WriteEnable>:
//------------------------------------------------------------------------------------------
void W25qxx_WriteEnable(void)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	af00      	add	r7, sp, #0
    W25_SELECT();
 8006b2c:	f7ff ff48 	bl	80069c0 <W25_SELECT>

    W25qxx_Spi(WRITE_ENABLE);
 8006b30:	2006      	movs	r0, #6
 8006b32:	f7ff ff5d 	bl	80069f0 <W25qxx_Spi>

    W25_UNSELECT();
 8006b36:	f7ff ff4f 	bl	80069d8 <W25_UNSELECT>

    W25qxx_Delay(1);
 8006b3a:	2001      	movs	r0, #1
 8006b3c:	f000 fd14 	bl	8007568 <HAL_Delay>
}
 8006b40:	bf00      	nop
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <W25qxx_ReadStatusRegister>:

    W25qxx_Delay(1);
}
//------------------------------------------------------------------------------------------
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusReg)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	71fb      	strb	r3, [r7, #7]
uint8_t status = 0;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	73fb      	strb	r3, [r7, #15]

    W25_SELECT();
 8006b52:	f7ff ff35 	bl	80069c0 <W25_SELECT>

    switch (SelectStatusReg) {
 8006b56:	79fb      	ldrb	r3, [r7, #7]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d002      	beq.n	8006b62 <W25qxx_ReadStatusRegister+0x1e>
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d00d      	beq.n	8006b7c <W25qxx_ReadStatusRegister+0x38>
 8006b60:	e019      	b.n	8006b96 <W25qxx_ReadStatusRegister+0x52>
        case 1:
            W25qxx_Spi(READ_STAT_REG1);
 8006b62:	2005      	movs	r0, #5
 8006b64:	f7ff ff44 	bl	80069f0 <W25qxx_Spi>
            status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8006b68:	20a5      	movs	r0, #165	; 0xa5
 8006b6a:	f7ff ff41 	bl	80069f0 <W25qxx_Spi>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	73fb      	strb	r3, [r7, #15]
            w25qxx.StatusRegister1 = status;
 8006b72:	4a12      	ldr	r2, [pc, #72]	; (8006bbc <W25qxx_ReadStatusRegister+0x78>)
 8006b74:	7bfb      	ldrb	r3, [r7, #15]
 8006b76:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
        break;
 8006b7a:	e018      	b.n	8006bae <W25qxx_ReadStatusRegister+0x6a>
        case 2:
            W25qxx_Spi(READ_STAT_REG2);
 8006b7c:	2035      	movs	r0, #53	; 0x35
 8006b7e:	f7ff ff37 	bl	80069f0 <W25qxx_Spi>
            status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8006b82:	20a5      	movs	r0, #165	; 0xa5
 8006b84:	f7ff ff34 	bl	80069f0 <W25qxx_Spi>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	73fb      	strb	r3, [r7, #15]
            w25qxx.StatusRegister2 = status;
 8006b8c:	4a0b      	ldr	r2, [pc, #44]	; (8006bbc <W25qxx_ReadStatusRegister+0x78>)
 8006b8e:	7bfb      	ldrb	r3, [r7, #15]
 8006b90:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
        break;
 8006b94:	e00b      	b.n	8006bae <W25qxx_ReadStatusRegister+0x6a>
        default : {
            W25qxx_Spi(READ_STAT_REG3);
 8006b96:	2015      	movs	r0, #21
 8006b98:	f7ff ff2a 	bl	80069f0 <W25qxx_Spi>
            status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8006b9c:	20a5      	movs	r0, #165	; 0xa5
 8006b9e:	f7ff ff27 	bl	80069f0 <W25qxx_Spi>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	73fb      	strb	r3, [r7, #15]
            w25qxx.StatusRegister3 = status;
 8006ba6:	4a05      	ldr	r2, [pc, #20]	; (8006bbc <W25qxx_ReadStatusRegister+0x78>)
 8006ba8:	7bfb      	ldrb	r3, [r7, #15]
 8006baa:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
        }
    }

    W25_UNSELECT();
 8006bae:	f7ff ff13 	bl	80069d8 <W25_UNSELECT>

    return status;
 8006bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3710      	adds	r7, #16
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	20003394 	.word	0x20003394

08006bc0 <W25qxx_WaitForWriteEnd>:

    W25_UNSELECT();
}
//------------------------------------------------------------------------------------------
void W25qxx_WaitForWriteEnd(void)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	af00      	add	r7, sp, #0
    W25qxx_Delay(1);
 8006bc4:	2001      	movs	r0, #1
 8006bc6:	f000 fccf 	bl	8007568 <HAL_Delay>

    W25_SELECT();
 8006bca:	f7ff fef9 	bl	80069c0 <W25_SELECT>

    W25qxx_Spi(READ_STAT_REG1);
 8006bce:	2005      	movs	r0, #5
 8006bd0:	f7ff ff0e 	bl	80069f0 <W25qxx_Spi>
    do
    {
        w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8006bd4:	20a5      	movs	r0, #165	; 0xa5
 8006bd6:	f7ff ff0b 	bl	80069f0 <W25qxx_Spi>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	461a      	mov	r2, r3
 8006bde:	4b08      	ldr	r3, [pc, #32]	; (8006c00 <W25qxx_WaitForWriteEnd+0x40>)
 8006be0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        W25qxx_Delay(1);
 8006be4:	2001      	movs	r0, #1
 8006be6:	f000 fcbf 	bl	8007568 <HAL_Delay>
    } while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8006bea:	4b05      	ldr	r3, [pc, #20]	; (8006c00 <W25qxx_WaitForWriteEnd+0x40>)
 8006bec:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006bf0:	f003 0301 	and.w	r3, r3, #1
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1ed      	bne.n	8006bd4 <W25qxx_WaitForWriteEnd+0x14>

    W25_UNSELECT();
 8006bf8:	f7ff feee 	bl	80069d8 <W25_UNSELECT>
}
 8006bfc:	bf00      	nop
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	20003394 	.word	0x20003394

08006c04 <W25qxx_Init>:
//------------------------------------------------------------------------------------------
bool W25qxx_Init(void)
{
 8006c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c06:	b089      	sub	sp, #36	; 0x24
 8006c08:	af06      	add	r7, sp, #24

	W25qxx_Reset();
 8006c0a:	f7ff ff13 	bl	8006a34 <W25qxx_Reset>


    w25qxx.Lock = 1;
 8006c0e:	4b54      	ldr	r3, [pc, #336]	; (8006d60 <W25qxx_Init+0x15c>)
 8006c10:	2201      	movs	r2, #1
 8006c12:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    bool ret = false;
 8006c16:	2300      	movs	r3, #0
 8006c18:	71fb      	strb	r3, [r7, #7]

    W25_UNSELECT();
 8006c1a:	f7ff fedd 	bl	80069d8 <W25_UNSELECT>

    uint32_t id = W25qxx_ReadID() & 0xffff;
 8006c1e:	f7ff ff1d 	bl	8006a5c <W25qxx_ReadID>
 8006c22:	4603      	mov	r3, r0
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	603b      	str	r3, [r7, #0]
//#ifdef W25QXX_DEBUG
    Report(1, "w25qxx Init Begin... Chip ID:0x%X\r\n", id);
 8006c28:	683a      	ldr	r2, [r7, #0]
 8006c2a:	494e      	ldr	r1, [pc, #312]	; (8006d64 <W25qxx_Init+0x160>)
 8006c2c:	2001      	movs	r0, #1
 8006c2e:	f7fc fa2b 	bl	8003088 <Report>
//#endif
    id &= 0xff;
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	603b      	str	r3, [r7, #0]
    id -= 0x10;//0x4010;
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	3b10      	subs	r3, #16
 8006c3c:	603b      	str	r3, [r7, #0]
    if (id > 0x0a) id = 0;
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	2b0a      	cmp	r3, #10
 8006c42:	d901      	bls.n	8006c48 <W25qxx_Init+0x44>
 8006c44:	2300      	movs	r3, #0
 8006c46:	603b      	str	r3, [r7, #0]
    w25qxx.ID         = id;              //W25Q10..W25Q512
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	b2da      	uxtb	r2, r3
 8006c4c:	4b44      	ldr	r3, [pc, #272]	; (8006d60 <W25qxx_Init+0x15c>)
 8006c4e:	701a      	strb	r2, [r3, #0]
    w25qxx.BlockCount = all_chipBLK[id]; //0..1024;
 8006c50:	4a45      	ldr	r2, [pc, #276]	; (8006d68 <W25qxx_Init+0x164>)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c58:	4a41      	ldr	r2, [pc, #260]	; (8006d60 <W25qxx_Init+0x15c>)
 8006c5a:	f8c2 301b 	str.w	r3, [r2, #27]
//#ifdef W25QXX_DEBUG
    Report(1, "Chip %s\r\n", all_chipID[id]);
 8006c5e:	4a43      	ldr	r2, [pc, #268]	; (8006d6c <W25qxx_Init+0x168>)
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c66:	461a      	mov	r2, r3
 8006c68:	4941      	ldr	r1, [pc, #260]	; (8006d70 <W25qxx_Init+0x16c>)
 8006c6a:	2001      	movs	r0, #1
 8006c6c:	f7fc fa0c 	bl	8003088 <Report>
//#endif

    if (id) {
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d06b      	beq.n	8006d4e <W25qxx_Init+0x14a>
    	w25qxx.PageSize = 256;
 8006c76:	4b3a      	ldr	r3, [pc, #232]	; (8006d60 <W25qxx_Init+0x15c>)
 8006c78:	2200      	movs	r2, #0
 8006c7a:	725a      	strb	r2, [r3, #9]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f042 0201 	orr.w	r2, r2, #1
 8006c82:	729a      	strb	r2, [r3, #10]
    	w25qxx.SectorSize = 0x1000;
 8006c84:	4b36      	ldr	r3, [pc, #216]	; (8006d60 <W25qxx_Init+0x15c>)
 8006c86:	2200      	movs	r2, #0
 8006c88:	73da      	strb	r2, [r3, #15]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f042 0210 	orr.w	r2, r2, #16
 8006c90:	741a      	strb	r2, [r3, #16]
 8006c92:	2200      	movs	r2, #0
 8006c94:	745a      	strb	r2, [r3, #17]
 8006c96:	2200      	movs	r2, #0
 8006c98:	749a      	strb	r2, [r3, #18]
    	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8006c9a:	4b31      	ldr	r3, [pc, #196]	; (8006d60 <W25qxx_Init+0x15c>)
 8006c9c:	f8d3 301b 	ldr.w	r3, [r3, #27]
 8006ca0:	011b      	lsls	r3, r3, #4
 8006ca2:	4a2f      	ldr	r2, [pc, #188]	; (8006d60 <W25qxx_Init+0x15c>)
 8006ca4:	f8c2 3013 	str.w	r3, [r2, #19]
    	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8006ca8:	4b2d      	ldr	r3, [pc, #180]	; (8006d60 <W25qxx_Init+0x15c>)
 8006caa:	f8d3 3013 	ldr.w	r3, [r3, #19]
 8006cae:	4a2c      	ldr	r2, [pc, #176]	; (8006d60 <W25qxx_Init+0x15c>)
 8006cb0:	f8d2 200f 	ldr.w	r2, [r2, #15]
 8006cb4:	fb02 f303 	mul.w	r3, r2, r3
 8006cb8:	4a29      	ldr	r2, [pc, #164]	; (8006d60 <W25qxx_Init+0x15c>)
 8006cba:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8006cbe:	b292      	uxth	r2, r2
 8006cc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cc4:	4a26      	ldr	r2, [pc, #152]	; (8006d60 <W25qxx_Init+0x15c>)
 8006cc6:	f8c2 300b 	str.w	r3, [r2, #11]
    	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8006cca:	4b25      	ldr	r3, [pc, #148]	; (8006d60 <W25qxx_Init+0x15c>)
 8006ccc:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006cd0:	011b      	lsls	r3, r3, #4
 8006cd2:	4a23      	ldr	r2, [pc, #140]	; (8006d60 <W25qxx_Init+0x15c>)
 8006cd4:	f8c2 3017 	str.w	r3, [r2, #23]
    	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8006cd8:	4b21      	ldr	r3, [pc, #132]	; (8006d60 <W25qxx_Init+0x15c>)
 8006cda:	f8d3 3013 	ldr.w	r3, [r3, #19]
 8006cde:	4a20      	ldr	r2, [pc, #128]	; (8006d60 <W25qxx_Init+0x15c>)
 8006ce0:	f8d2 200f 	ldr.w	r2, [r2, #15]
 8006ce4:	fb02 f303 	mul.w	r3, r2, r3
 8006ce8:	0a9b      	lsrs	r3, r3, #10
 8006cea:	4a1d      	ldr	r2, [pc, #116]	; (8006d60 <W25qxx_Init+0x15c>)
 8006cec:	f8c2 301f 	str.w	r3, [r2, #31]
    	W25qxx_ReadUniqID();
 8006cf0:	f7ff fede 	bl	8006ab0 <W25qxx_ReadUniqID>
    	W25qxx_ReadStatusRegister(1);
 8006cf4:	2001      	movs	r0, #1
 8006cf6:	f7ff ff25 	bl	8006b44 <W25qxx_ReadStatusRegister>
    	W25qxx_ReadStatusRegister(2);
 8006cfa:	2002      	movs	r0, #2
 8006cfc:	f7ff ff22 	bl	8006b44 <W25qxx_ReadStatusRegister>
    	W25qxx_ReadStatusRegister(3);
 8006d00:	2003      	movs	r0, #3
 8006d02:	f7ff ff1f 	bl	8006b44 <W25qxx_ReadStatusRegister>
    	ret = true;
 8006d06:	2301      	movs	r3, #1
 8006d08:	71fb      	strb	r3, [r7, #7]
                 "\tSector Size:\t%u bytes\r\n"
                 "\tSector Count:\t%u\r\n"
                 "\tBlock Size:\t%u bytes\r\n"
                 "\tBlock Count:\t%u\r\n"
                 "\tCapacity:\t%u KBytes\r\n",
                 w25qxx.PageSize,
 8006d0a:	4b15      	ldr	r3, [pc, #84]	; (8006d60 <W25qxx_Init+0x15c>)
 8006d0c:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006d10:	b29b      	uxth	r3, r3
    	Report(0,"\tPage Size:\t%u bytes\r\n"
 8006d12:	461e      	mov	r6, r3
 8006d14:	4b12      	ldr	r3, [pc, #72]	; (8006d60 <W25qxx_Init+0x15c>)
 8006d16:	f8d3 500b 	ldr.w	r5, [r3, #11]
 8006d1a:	4b11      	ldr	r3, [pc, #68]	; (8006d60 <W25qxx_Init+0x15c>)
 8006d1c:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006d20:	4a0f      	ldr	r2, [pc, #60]	; (8006d60 <W25qxx_Init+0x15c>)
 8006d22:	f8d2 2013 	ldr.w	r2, [r2, #19]
 8006d26:	490e      	ldr	r1, [pc, #56]	; (8006d60 <W25qxx_Init+0x15c>)
 8006d28:	f8d1 1017 	ldr.w	r1, [r1, #23]
 8006d2c:	480c      	ldr	r0, [pc, #48]	; (8006d60 <W25qxx_Init+0x15c>)
 8006d2e:	f8d0 001b 	ldr.w	r0, [r0, #27]
 8006d32:	4c0b      	ldr	r4, [pc, #44]	; (8006d60 <W25qxx_Init+0x15c>)
 8006d34:	f8d4 401f 	ldr.w	r4, [r4, #31]
 8006d38:	9404      	str	r4, [sp, #16]
 8006d3a:	9003      	str	r0, [sp, #12]
 8006d3c:	9102      	str	r1, [sp, #8]
 8006d3e:	9201      	str	r2, [sp, #4]
 8006d40:	9300      	str	r3, [sp, #0]
 8006d42:	462b      	mov	r3, r5
 8006d44:	4632      	mov	r2, r6
 8006d46:	490b      	ldr	r1, [pc, #44]	; (8006d74 <W25qxx_Init+0x170>)
 8006d48:	2000      	movs	r0, #0
 8006d4a:	f7fc f99d 	bl	8003088 <Report>
                 w25qxx.BlockCount,
                 w25qxx.CapacityInKiloByte);
//#endif
    }

    w25qxx.Lock = 0;
 8006d4e:	4b04      	ldr	r3, [pc, #16]	; (8006d60 <W25qxx_Init+0x15c>)
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    return ret;
 8006d56:	79fb      	ldrb	r3, [r7, #7]
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d60:	20003394 	.word	0x20003394
 8006d64:	08017c40 	.word	0x08017c40
 8006d68:	08018d44 	.word	0x08018d44
 8006d6c:	20000138 	.word	0x20000138
 8006d70:	08017c64 	.word	0x08017c64
 8006d74:	08017c70 	.word	0x08017c70

08006d78 <W25qxx_getChipID>:
//------------------------------------------------------------------------------------------
uint32_t W25qxx_getChipID()
{
 8006d78:	b480      	push	{r7}
 8006d7a:	af00      	add	r7, sp, #0
	return (uint32_t)w25qxx.ID;
 8006d7c:	4b03      	ldr	r3, [pc, #12]	; (8006d8c <W25qxx_getChipID+0x14>)
 8006d7e:	781b      	ldrb	r3, [r3, #0]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	20003394 	.word	0x20003394

08006d90 <W25qxx_getSectorCount>:
uint32_t W25qxx_getSectorCount()
{
 8006d90:	b480      	push	{r7}
 8006d92:	af00      	add	r7, sp, #0
	return w25qxx.SectorCount;
 8006d94:	4b03      	ldr	r3, [pc, #12]	; (8006da4 <W25qxx_getSectorCount+0x14>)
 8006d96:	f8d3 3013 	ldr.w	r3, [r3, #19]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr
 8006da4:	20003394 	.word	0x20003394

08006da8 <W25qxx_getSectorSize>:
uint32_t W25qxx_getSectorSize()
{
 8006da8:	b480      	push	{r7}
 8006daa:	af00      	add	r7, sp, #0
	return w25qxx.SectorSize;
 8006dac:	4b03      	ldr	r3, [pc, #12]	; (8006dbc <W25qxx_getSectorSize+0x14>)
 8006dae:	f8d3 300f 	ldr.w	r3, [r3, #15]
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr
 8006dbc:	20003394 	.word	0x20003394

08006dc0 <W25qxx_getPageSize>:
uint32_t W25qxx_getPageCount()
{
	return w25qxx.PageCount;
}
uint32_t W25qxx_getPageSize()
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	af00      	add	r7, sp, #0
	return w25qxx.PageSize;
 8006dc4:	4b04      	ldr	r3, [pc, #16]	; (8006dd8 <W25qxx_getPageSize+0x18>)
 8006dc6:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006dca:	b29b      	uxth	r3, r3
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	20003394 	.word	0x20003394

08006ddc <W25qxx_EraseSector>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
    while (w25qxx.Lock) W25qxx_Delay(1);
 8006de4:	e002      	b.n	8006dec <W25qxx_EraseSector+0x10>
 8006de6:	2001      	movs	r0, #1
 8006de8:	f000 fbbe 	bl	8007568 <HAL_Delay>
 8006dec:	4b1c      	ldr	r3, [pc, #112]	; (8006e60 <W25qxx_EraseSector+0x84>)
 8006dee:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d1f7      	bne.n	8006de6 <W25qxx_EraseSector+0xa>

    w25qxx.Lock = 1;
 8006df6:	4b1a      	ldr	r3, [pc, #104]	; (8006e60 <W25qxx_EraseSector+0x84>)
 8006df8:	2201      	movs	r2, #1
 8006dfa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
#ifdef W25QXX_DEBUG
    uint32_t StartTime = HAL_GetTick();
    Report(1, "%u Begin...", SectorAddr);
#endif

    W25qxx_WaitForWriteEnd();
 8006dfe:	f7ff fedf 	bl	8006bc0 <W25qxx_WaitForWriteEnd>
    SectorAddr = SectorAddr * w25qxx.SectorSize;
 8006e02:	4b17      	ldr	r3, [pc, #92]	; (8006e60 <W25qxx_EraseSector+0x84>)
 8006e04:	f8d3 200f 	ldr.w	r2, [r3, #15]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	fb02 f303 	mul.w	r3, r2, r3
 8006e0e:	607b      	str	r3, [r7, #4]
    W25qxx_WriteEnable();
 8006e10:	f7ff fe8a 	bl	8006b28 <W25qxx_WriteEnable>

    W25_SELECT();
 8006e14:	f7ff fdd4 	bl	80069c0 <W25_SELECT>
    W25qxx_Spi(SECTOR_ERASE);
 8006e18:	2020      	movs	r0, #32
 8006e1a:	f7ff fde9 	bl	80069f0 <W25qxx_Spi>
    //if (w25qxx.ID >= W25Q256) W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
    W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	0c1b      	lsrs	r3, r3, #16
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	4618      	mov	r0, r3
 8006e26:	f7ff fde3 	bl	80069f0 <W25qxx_Spi>
    W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	0a1b      	lsrs	r3, r3, #8
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	4618      	mov	r0, r3
 8006e32:	f7ff fddd 	bl	80069f0 <W25qxx_Spi>
    W25qxx_Spi(SectorAddr & 0xFF);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7ff fdd8 	bl	80069f0 <W25qxx_Spi>
    W25_UNSELECT();
 8006e40:	f7ff fdca 	bl	80069d8 <W25_UNSELECT>

    W25qxx_WaitForWriteEnd();
 8006e44:	f7ff febc 	bl	8006bc0 <W25qxx_WaitForWriteEnd>

#ifdef W25QXX_DEBUG
    uint32_t dur = HAL_GetTick() - StartTime;
    Report(0, " done after %u ms (%u sec)!\r\n", dur, dur / 1000);
#endif
    W25qxx_Delay(1);
 8006e48:	2001      	movs	r0, #1
 8006e4a:	f000 fb8d 	bl	8007568 <HAL_Delay>

    w25qxx.Lock = 0;
 8006e4e:	4b04      	ldr	r3, [pc, #16]	; (8006e60 <W25qxx_EraseSector+0x84>)
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8006e56:	bf00      	nop
 8006e58:	3708      	adds	r7, #8
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	20003394 	.word	0x20003394

08006e64 <W25qxx_SectorToPage>:
{
    return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//------------------------------------------------------------------------------------------
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
    return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8006e6c:	4b08      	ldr	r3, [pc, #32]	; (8006e90 <W25qxx_SectorToPage+0x2c>)
 8006e6e:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	fb02 f303 	mul.w	r3, r2, r3
 8006e78:	4a05      	ldr	r2, [pc, #20]	; (8006e90 <W25qxx_SectorToPage+0x2c>)
 8006e7a:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8006e7e:	b292      	uxth	r2, r2
 8006e80:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr
 8006e90:	20003394 	.word	0x20003394

08006e94 <W25qxx_IsEmptySector>:

    return false;
}
//------------------------------------------------------------------------------------------
bool W25qxx_IsEmptySector(uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToCheck_up_to_SectorSize)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b090      	sub	sp, #64	; 0x40
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
    while (w25qxx.Lock) W25qxx_Delay(1);
 8006ea0:	e002      	b.n	8006ea8 <W25qxx_IsEmptySector+0x14>
 8006ea2:	2001      	movs	r0, #1
 8006ea4:	f000 fb60 	bl	8007568 <HAL_Delay>
 8006ea8:	4b59      	ldr	r3, [pc, #356]	; (8007010 <W25qxx_IsEmptySector+0x17c>)
 8006eaa:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1f7      	bne.n	8006ea2 <W25qxx_IsEmptySector+0xe>

    w25qxx.Lock = 1;
 8006eb2:	4b57      	ldr	r3, [pc, #348]	; (8007010 <W25qxx_IsEmptySector+0x17c>)
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    if ( (NumByteToCheck_up_to_SectorSize > w25qxx.SectorSize) || (!NumByteToCheck_up_to_SectorSize) )
 8006eba:	4b55      	ldr	r3, [pc, #340]	; (8007010 <W25qxx_IsEmptySector+0x17c>)
 8006ebc:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d802      	bhi.n	8006ecc <W25qxx_IsEmptySector+0x38>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d103      	bne.n	8006ed4 <W25qxx_IsEmptySector+0x40>
                NumByteToCheck_up_to_SectorSize = w25qxx.SectorSize;
 8006ecc:	4b50      	ldr	r3, [pc, #320]	; (8007010 <W25qxx_IsEmptySector+0x17c>)
 8006ece:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006ed2:	607b      	str	r3, [r7, #4]
    uint32_t StartTime = HAL_GetTick();
#endif

    uint8_t pBuffer[32];
    uint32_t i, WorkAddress;
    for ( i = OffsetInByte; i < w25qxx.SectorSize; i += sizeof(pBuffer)) {
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ed8:	e040      	b.n	8006f5c <W25qxx_IsEmptySector+0xc8>

    	W25_SELECT();
 8006eda:	f7ff fd71 	bl	80069c0 <W25_SELECT>
        WorkAddress = (i + Sector_Address * w25qxx.SectorSize);
 8006ede:	4b4c      	ldr	r3, [pc, #304]	; (8007010 <W25qxx_IsEmptySector+0x17c>)
 8006ee0:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	fb02 f303 	mul.w	r3, r2, r3
 8006eea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006eec:	4413      	add	r3, r2
 8006eee:	637b      	str	r3, [r7, #52]	; 0x34
        W25qxx_Spi(DATA_READ);//FAST_READ);
 8006ef0:	2003      	movs	r0, #3
 8006ef2:	f7ff fd7d 	bl	80069f0 <W25qxx_Spi>
        //if (w25qxx.ID >= W25Q256) W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
        W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 8006ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ef8:	0c1b      	lsrs	r3, r3, #16
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7ff fd77 	bl	80069f0 <W25qxx_Spi>
        W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 8006f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f04:	0a1b      	lsrs	r3, r3, #8
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f7ff fd71 	bl	80069f0 <W25qxx_Spi>
        W25qxx_Spi(WorkAddress & 0xFF);
 8006f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7ff fd6c 	bl	80069f0 <W25qxx_Spi>
        //W25qxx_Spi(0);
        HAL_SPI_Receive(portFLASH, pBuffer, sizeof(pBuffer), min_wait_ms);
 8006f18:	4b3e      	ldr	r3, [pc, #248]	; (8007014 <W25qxx_IsEmptySector+0x180>)
 8006f1a:	6818      	ldr	r0, [r3, #0]
 8006f1c:	23fa      	movs	r3, #250	; 0xfa
 8006f1e:	f107 0114 	add.w	r1, r7, #20
 8006f22:	2220      	movs	r2, #32
 8006f24:	f004 fe49 	bl	800bbba <HAL_SPI_Receive>
        W25_UNSELECT();
 8006f28:	f7ff fd56 	bl	80069d8 <W25_UNSELECT>

        for (uint8_t x = 0; x < sizeof(pBuffer); x++) {
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f32:	e00c      	b.n	8006f4e <W25qxx_IsEmptySector+0xba>
            if (pBuffer[x] != 0xFF) goto NOT_EMPTY;
 8006f34:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006f38:	3340      	adds	r3, #64	; 0x40
 8006f3a:	443b      	add	r3, r7
 8006f3c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8006f40:	2bff      	cmp	r3, #255	; 0xff
 8006f42:	d159      	bne.n	8006ff8 <W25qxx_IsEmptySector+0x164>
        for (uint8_t x = 0; x < sizeof(pBuffer); x++) {
 8006f44:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006f48:	3301      	adds	r3, #1
 8006f4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f4e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006f52:	2b1f      	cmp	r3, #31
 8006f54:	d9ee      	bls.n	8006f34 <W25qxx_IsEmptySector+0xa0>
    for ( i = OffsetInByte; i < w25qxx.SectorSize; i += sizeof(pBuffer)) {
 8006f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f58:	3320      	adds	r3, #32
 8006f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f5c:	4b2c      	ldr	r3, [pc, #176]	; (8007010 <W25qxx_IsEmptySector+0x17c>)
 8006f5e:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006f62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d3b8      	bcc.n	8006eda <W25qxx_IsEmptySector+0x46>
        }
    }
    if ((w25qxx.SectorSize + OffsetInByte) % sizeof(pBuffer) != 0) {
 8006f68:	4b29      	ldr	r3, [pc, #164]	; (8007010 <W25qxx_IsEmptySector+0x17c>)
 8006f6a:	f8d3 200f 	ldr.w	r2, [r3, #15]
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	4413      	add	r3, r2
 8006f72:	f003 031f 	and.w	r3, r3, #31
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d038      	beq.n	8006fec <W25qxx_IsEmptySector+0x158>
        i -= sizeof(pBuffer);
 8006f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f7c:	3b20      	subs	r3, #32
 8006f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for( ; i < w25qxx.SectorSize; i++) {
 8006f80:	e02e      	b.n	8006fe0 <W25qxx_IsEmptySector+0x14c>

            W25_SELECT();
 8006f82:	f7ff fd1d 	bl	80069c0 <W25_SELECT>
            WorkAddress = (i + Sector_Address * w25qxx.SectorSize);
 8006f86:	4b22      	ldr	r3, [pc, #136]	; (8007010 <W25qxx_IsEmptySector+0x17c>)
 8006f88:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	fb02 f303 	mul.w	r3, r2, r3
 8006f92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006f94:	4413      	add	r3, r2
 8006f96:	637b      	str	r3, [r7, #52]	; 0x34
            W25qxx_Spi(DATA_READ);//FAST_READ);
 8006f98:	2003      	movs	r0, #3
 8006f9a:	f7ff fd29 	bl	80069f0 <W25qxx_Spi>
            //if (w25qxx.ID >= W25Q256) W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
            W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 8006f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fa0:	0c1b      	lsrs	r3, r3, #16
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7ff fd23 	bl	80069f0 <W25qxx_Spi>
            W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 8006faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fac:	0a1b      	lsrs	r3, r3, #8
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f7ff fd1d 	bl	80069f0 <W25qxx_Spi>
            W25qxx_Spi(WorkAddress & 0xFF);
 8006fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7ff fd18 	bl	80069f0 <W25qxx_Spi>
            //W25qxx_Spi(0);
            HAL_SPI_Receive(portFLASH, pBuffer, 1, min_wait_ms);
 8006fc0:	4b14      	ldr	r3, [pc, #80]	; (8007014 <W25qxx_IsEmptySector+0x180>)
 8006fc2:	6818      	ldr	r0, [r3, #0]
 8006fc4:	23fa      	movs	r3, #250	; 0xfa
 8006fc6:	f107 0114 	add.w	r1, r7, #20
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f004 fdf5 	bl	800bbba <HAL_SPI_Receive>
            W25_UNSELECT();
 8006fd0:	f7ff fd02 	bl	80069d8 <W25_UNSELECT>

            if (pBuffer[0] != 0xFF) goto NOT_EMPTY;
 8006fd4:	7d3b      	ldrb	r3, [r7, #20]
 8006fd6:	2bff      	cmp	r3, #255	; 0xff
 8006fd8:	d110      	bne.n	8006ffc <W25qxx_IsEmptySector+0x168>
        for( ; i < w25qxx.SectorSize; i++) {
 8006fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fdc:	3301      	adds	r3, #1
 8006fde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fe0:	4b0b      	ldr	r3, [pc, #44]	; (8007010 <W25qxx_IsEmptySector+0x17c>)
 8006fe2:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006fe6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d3ca      	bcc.n	8006f82 <W25qxx_IsEmptySector+0xee>
#ifdef W25QXX_DEBUG
    Report(1, "w25qxx CheckSector is Empty in %u ms\r\n", HAL_GetTick() - StartTime);
    //W25qxx_Delay(100);
#endif

    w25qxx.Lock = 0;
 8006fec:	4b08      	ldr	r3, [pc, #32]	; (8007010 <W25qxx_IsEmptySector+0x17c>)
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    return true;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e007      	b.n	8007008 <W25qxx_IsEmptySector+0x174>
            if (pBuffer[x] != 0xFF) goto NOT_EMPTY;
 8006ff8:	bf00      	nop
 8006ffa:	e000      	b.n	8006ffe <W25qxx_IsEmptySector+0x16a>
            if (pBuffer[0] != 0xFF) goto NOT_EMPTY;
 8006ffc:	bf00      	nop
#ifdef W25QXX_DEBUG
    Report(1, "w25qxx CheckSector is Not Empty in %u ms\r\n", HAL_GetTick() - StartTime);
    //W25qxx_Delay(100);
#endif

    w25qxx.Lock = 0;
 8006ffe:	4b04      	ldr	r3, [pc, #16]	; (8007010 <W25qxx_IsEmptySector+0x17c>)
 8007000:	2200      	movs	r2, #0
 8007002:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    return false;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	3740      	adds	r7, #64	; 0x40
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}
 8007010:	20003394 	.word	0x20003394
 8007014:	20000010 	.word	0x20000010

08007018 <W25qxx_WritePage>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b086      	sub	sp, #24
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
 8007024:	603b      	str	r3, [r7, #0]
    while (w25qxx.Lock) W25qxx_Delay(1);
 8007026:	e002      	b.n	800702e <W25qxx_WritePage+0x16>
 8007028:	2001      	movs	r0, #1
 800702a:	f000 fa9d 	bl	8007568 <HAL_Delay>
 800702e:	4b4d      	ldr	r3, [pc, #308]	; (8007164 <W25qxx_WritePage+0x14c>)
 8007030:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1f7      	bne.n	8007028 <W25qxx_WritePage+0x10>

    w25qxx.Lock = 1;
 8007038:	4b4a      	ldr	r3, [pc, #296]	; (8007164 <W25qxx_WritePage+0x14c>)
 800703a:	2201      	movs	r2, #1
 800703c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    if ( ((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || !NumByteToWrite_up_to_PageSize )
 8007040:	683a      	ldr	r2, [r7, #0]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4413      	add	r3, r2
 8007046:	4a47      	ldr	r2, [pc, #284]	; (8007164 <W25qxx_WritePage+0x14c>)
 8007048:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 800704c:	b292      	uxth	r2, r2
 800704e:	4293      	cmp	r3, r2
 8007050:	d802      	bhi.n	8007058 <W25qxx_WritePage+0x40>
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d107      	bne.n	8007068 <W25qxx_WritePage+0x50>
                NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8007058:	4b42      	ldr	r3, [pc, #264]	; (8007164 <W25qxx_WritePage+0x14c>)
 800705a:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800705e:	b29b      	uxth	r3, r3
 8007060:	461a      	mov	r2, r3
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	603b      	str	r3, [r7, #0]
    if ( (OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize )
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	4413      	add	r3, r2
 800706e:	4a3d      	ldr	r2, [pc, #244]	; (8007164 <W25qxx_WritePage+0x14c>)
 8007070:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8007074:	b292      	uxth	r2, r2
 8007076:	4293      	cmp	r3, r2
 8007078:	d907      	bls.n	800708a <W25qxx_WritePage+0x72>
                NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800707a:	4b3a      	ldr	r3, [pc, #232]	; (8007164 <W25qxx_WritePage+0x14c>)
 800707c:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8007080:	b29b      	uxth	r3, r3
 8007082:	461a      	mov	r2, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	603b      	str	r3, [r7, #0]
    Report(1, "%s WritePage:0x%X(%u), Offset:%u ,Writes %u Bytes, begin...\r\n",
                 __func__, Page_Address, Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
    uint32_t StartTime = HAL_GetTick();
#endif

    W25qxx_WaitForWriteEnd();
 800708a:	f7ff fd99 	bl	8006bc0 <W25qxx_WaitForWriteEnd>
    W25qxx_WriteEnable();
 800708e:	f7ff fd4b 	bl	8006b28 <W25qxx_WriteEnable>

    Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8007092:	4b34      	ldr	r3, [pc, #208]	; (8007164 <W25qxx_WritePage+0x14c>)
 8007094:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8007098:	b29b      	uxth	r3, r3
 800709a:	461a      	mov	r2, r3
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	fb02 f303 	mul.w	r3, r2, r3
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	4413      	add	r3, r2
 80070a6:	60bb      	str	r3, [r7, #8]
    W25qxx_Spi((Page_Address & 0xFF00) >> 8);
    W25qxx_Spi(Page_Address&0xFF);
    HAL_SPI_Transmit(portFLASH, pBuffer, NumByteToWrite_up_to_PageSize, min_wait_ms);
    W25_UNSELECT();*/

    uint16_t lens = NumByteToWrite_up_to_PageSize + PAGE_HDR_BYTES;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	3304      	adds	r3, #4
 80070ae:	82fb      	strh	r3, [r7, #22]
    int idx = 0;
 80070b0:	2300      	movs	r3, #0
 80070b2:	613b      	str	r3, [r7, #16]
    pageTmp[idx++] = PAGE_PROG;
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	1c5a      	adds	r2, r3, #1
 80070b8:	613a      	str	r2, [r7, #16]
 80070ba:	4a2b      	ldr	r2, [pc, #172]	; (8007168 <W25qxx_WritePage+0x150>)
 80070bc:	2102      	movs	r1, #2
 80070be:	54d1      	strb	r1, [r2, r3]
    //if (w25qxx.ID >= W25Q256) pageTmp[idx++] = (Page_Address & 0xFF000000) >> 24;
    pageTmp[idx++] = (Page_Address & 0xFF0000) >> 16;
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	0c19      	lsrs	r1, r3, #16
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	1c5a      	adds	r2, r3, #1
 80070c8:	613a      	str	r2, [r7, #16]
 80070ca:	b2c9      	uxtb	r1, r1
 80070cc:	4a26      	ldr	r2, [pc, #152]	; (8007168 <W25qxx_WritePage+0x150>)
 80070ce:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = (Page_Address& 0xFF00) >> 8;
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	0a19      	lsrs	r1, r3, #8
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	1c5a      	adds	r2, r3, #1
 80070d8:	613a      	str	r2, [r7, #16]
 80070da:	b2c9      	uxtb	r1, r1
 80070dc:	4a22      	ldr	r2, [pc, #136]	; (8007168 <W25qxx_WritePage+0x150>)
 80070de:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = Page_Address & 0xFF;
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	1c5a      	adds	r2, r3, #1
 80070e4:	613a      	str	r2, [r7, #16]
 80070e6:	68ba      	ldr	r2, [r7, #8]
 80070e8:	b2d1      	uxtb	r1, r2
 80070ea:	4a1f      	ldr	r2, [pc, #124]	; (8007168 <W25qxx_WritePage+0x150>)
 80070ec:	54d1      	strb	r1, [r2, r3]
    memcpy(&pageTmp[PAGE_HDR_BYTES], pBuffer, NumByteToWrite_up_to_PageSize);//w25qxx.PageSize);
 80070ee:	683a      	ldr	r2, [r7, #0]
 80070f0:	68f9      	ldr	r1, [r7, #12]
 80070f2:	481e      	ldr	r0, [pc, #120]	; (800716c <W25qxx_WritePage+0x154>)
 80070f4:	f00b ff05 	bl	8012f02 <memcpy>

    spiRdy = 0;
 80070f8:	4b1d      	ldr	r3, [pc, #116]	; (8007170 <W25qxx_WritePage+0x158>)
 80070fa:	2200      	movs	r2, #0
 80070fc:	701a      	strb	r2, [r3, #0]

w25_withDMA = 1;
 80070fe:	4b1d      	ldr	r3, [pc, #116]	; (8007174 <W25qxx_WritePage+0x15c>)
 8007100:	2201      	movs	r2, #1
 8007102:	701a      	strb	r2, [r3, #0]
    W25_SELECT();
 8007104:	f7ff fc5c 	bl	80069c0 <W25_SELECT>
    if (w25_withDMA) {
 8007108:	4b1a      	ldr	r3, [pc, #104]	; (8007174 <W25qxx_WritePage+0x15c>)
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d013      	beq.n	8007138 <W25qxx_WritePage+0x120>
    	HAL_SPI_Transmit_DMA(portFLASH, pageTmp, lens);
 8007110:	4b19      	ldr	r3, [pc, #100]	; (8007178 <W25qxx_WritePage+0x160>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	8afa      	ldrh	r2, [r7, #22]
 8007116:	4914      	ldr	r1, [pc, #80]	; (8007168 <W25qxx_WritePage+0x150>)
 8007118:	4618      	mov	r0, r3
 800711a:	f005 f891 	bl	800c240 <HAL_SPI_Transmit_DMA>
    	while (!spiRdy) {
 800711e:	e002      	b.n	8007126 <W25qxx_WritePage+0x10e>
    		W25qxx_Delay(1);
 8007120:	2001      	movs	r0, #1
 8007122:	f000 fa21 	bl	8007568 <HAL_Delay>
    	while (!spiRdy) {
 8007126:	4b12      	ldr	r3, [pc, #72]	; (8007170 <W25qxx_WritePage+0x158>)
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	b2db      	uxtb	r3, r3
 800712c:	2b00      	cmp	r3, #0
 800712e:	d0f7      	beq.n	8007120 <W25qxx_WritePage+0x108>
    	}
w25_withDMA = 0;
 8007130:	4b10      	ldr	r3, [pc, #64]	; (8007174 <W25qxx_WritePage+0x15c>)
 8007132:	2200      	movs	r2, #0
 8007134:	701a      	strb	r2, [r3, #0]
 8007136:	e00d      	b.n	8007154 <W25qxx_WritePage+0x13c>
    } else {
    	HAL_SPI_Transmit(portFLASH, pageTmp, lens, min_wait_ms);
 8007138:	4b0f      	ldr	r3, [pc, #60]	; (8007178 <W25qxx_WritePage+0x160>)
 800713a:	6818      	ldr	r0, [r3, #0]
 800713c:	23fa      	movs	r3, #250	; 0xfa
 800713e:	8afa      	ldrh	r2, [r7, #22]
 8007140:	4909      	ldr	r1, [pc, #36]	; (8007168 <W25qxx_WritePage+0x150>)
 8007142:	f004 fbcc 	bl	800b8de <HAL_SPI_Transmit>

    	W25_UNSELECT();
 8007146:	f7ff fc47 	bl	80069d8 <W25_UNSELECT>

    	W25qxx_WaitForWriteEnd();
 800714a:	f7ff fd39 	bl	8006bc0 <W25qxx_WaitForWriteEnd>

    	spiRdy = 1;
 800714e:	4b08      	ldr	r3, [pc, #32]	; (8007170 <W25qxx_WritePage+0x158>)
 8007150:	2201      	movs	r2, #1
 8007152:	701a      	strb	r2, [r3, #0]
    	Report(0, "\r\n");
    	Report(1, "%s done after %u ms\r\n", __func__, StartTime);
#endif
    }

    w25qxx.Lock = 0;
 8007154:	4b03      	ldr	r3, [pc, #12]	; (8007164 <W25qxx_WritePage+0x14c>)
 8007156:	2200      	movs	r2, #0
 8007158:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 800715c:	bf00      	nop
 800715e:	3718      	adds	r7, #24
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}
 8007164:	20003394 	.word	0x20003394
 8007168:	200033bc 	.word	0x200033bc
 800716c:	200033c0 	.word	0x200033c0
 8007170:	200000f4 	.word	0x200000f4
 8007174:	200034c1 	.word	0x200034c1
 8007178:	20000010 	.word	0x20000010

0800717c <W25qxx_WriteSector>:
//------------------------------------------------------------------------------------------
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b088      	sub	sp, #32
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	607a      	str	r2, [r7, #4]
 8007188:	603b      	str	r3, [r7, #0]
    if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || !NumByteToWrite_up_to_SectorSize)
 800718a:	4b31      	ldr	r3, [pc, #196]	; (8007250 <W25qxx_WriteSector+0xd4>)
 800718c:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8007190:	683a      	ldr	r2, [r7, #0]
 8007192:	429a      	cmp	r2, r3
 8007194:	d802      	bhi.n	800719c <W25qxx_WriteSector+0x20>
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d103      	bne.n	80071a4 <W25qxx_WriteSector+0x28>
                NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 800719c:	4b2c      	ldr	r3, [pc, #176]	; (8007250 <W25qxx_WriteSector+0xd4>)
 800719e:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80071a2:	603b      	str	r3, [r7, #0]
    Report(1, "%s WriteSector:0x%X(%u), Offset:%u ,Write %u Bytes, begin...\r\n",
                 __func__, Sector_Address, Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
    //W25qxx_Delay(100);
#endif

    if (OffsetInByte >= w25qxx.SectorSize) {
 80071a4:	4b2a      	ldr	r3, [pc, #168]	; (8007250 <W25qxx_WriteSector+0xd4>)
 80071a6:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d24b      	bcs.n	8007248 <W25qxx_WriteSector+0xcc>
        return;
    }

    int32_t BytesToWrite;
    uint32_t LocalOffset, StartPage;
    if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	441a      	add	r2, r3
 80071b6:	4b26      	ldr	r3, [pc, #152]	; (8007250 <W25qxx_WriteSector+0xd4>)
 80071b8:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d906      	bls.n	80071ce <W25qxx_WriteSector+0x52>
        BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 80071c0:	4b23      	ldr	r3, [pc, #140]	; (8007250 <W25qxx_WriteSector+0xd4>)
 80071c2:	f8d3 200f 	ldr.w	r2, [r3, #15]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	61fb      	str	r3, [r7, #28]
 80071cc:	e001      	b.n	80071d2 <W25qxx_WriteSector+0x56>
    else
        BytesToWrite = NumByteToWrite_up_to_SectorSize;
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	61fb      	str	r3, [r7, #28]
    StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80071d2:	68b8      	ldr	r0, [r7, #8]
 80071d4:	f7ff fe46 	bl	8006e64 <W25qxx_SectorToPage>
 80071d8:	4602      	mov	r2, r0
 80071da:	4b1d      	ldr	r3, [pc, #116]	; (8007250 <W25qxx_WriteSector+0xd4>)
 80071dc:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	4619      	mov	r1, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80071ea:	4413      	add	r3, r2
 80071ec:	617b      	str	r3, [r7, #20]
    LocalOffset = OffsetInByte % w25qxx.PageSize;
 80071ee:	4b18      	ldr	r3, [pc, #96]	; (8007250 <W25qxx_WriteSector+0xd4>)
 80071f0:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	461a      	mov	r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80071fe:	fb01 f202 	mul.w	r2, r1, r2
 8007202:	1a9b      	subs	r3, r3, r2
 8007204:	61bb      	str	r3, [r7, #24]

    do
    {
        W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	69ba      	ldr	r2, [r7, #24]
 800720a:	6979      	ldr	r1, [r7, #20]
 800720c:	68f8      	ldr	r0, [r7, #12]
 800720e:	f7ff ff03 	bl	8007018 <W25qxx_WritePage>
        StartPage++;
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	3301      	adds	r3, #1
 8007216:	617b      	str	r3, [r7, #20]
        BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8007218:	4b0d      	ldr	r3, [pc, #52]	; (8007250 <W25qxx_WriteSector+0xd4>)
 800721a:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800721e:	b29b      	uxth	r3, r3
 8007220:	461a      	mov	r2, r3
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	1a9a      	subs	r2, r3, r2
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	4413      	add	r3, r2
 800722a:	61fb      	str	r3, [r7, #28]
        pBuffer += w25qxx.PageSize;
 800722c:	4b08      	ldr	r3, [pc, #32]	; (8007250 <W25qxx_WriteSector+0xd4>)
 800722e:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8007232:	b29b      	uxth	r3, r3
 8007234:	461a      	mov	r2, r3
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	4413      	add	r3, r2
 800723a:	60fb      	str	r3, [r7, #12]
        LocalOffset = 0;
 800723c:	2300      	movs	r3, #0
 800723e:	61bb      	str	r3, [r7, #24]
    } while(BytesToWrite > 0);
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	2b00      	cmp	r3, #0
 8007244:	dcdf      	bgt.n	8007206 <W25qxx_WriteSector+0x8a>
 8007246:	e000      	b.n	800724a <W25qxx_WriteSector+0xce>
        return;
 8007248:	bf00      	nop
#ifdef W25QXX_DEBUG
    Report(1, "%s Done\r\n", __func__);
    //W25qxx_Delay(100);
#endif

}
 800724a:	3720      	adds	r7, #32
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	20003394 	.word	0x20003394

08007254 <W25qxx_ReadPage>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b088      	sub	sp, #32
 8007258:	af02      	add	r7, sp, #8
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	607a      	str	r2, [r7, #4]
 8007260:	603b      	str	r3, [r7, #0]
    while (w25qxx.Lock) W25qxx_Delay(1);
 8007262:	e002      	b.n	800726a <W25qxx_ReadPage+0x16>
 8007264:	2001      	movs	r0, #1
 8007266:	f000 f97f 	bl	8007568 <HAL_Delay>
 800726a:	4b51      	ldr	r3, [pc, #324]	; (80073b0 <W25qxx_ReadPage+0x15c>)
 800726c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007270:	2b00      	cmp	r3, #0
 8007272:	d1f7      	bne.n	8007264 <W25qxx_ReadPage+0x10>

    w25qxx.Lock = 1;
 8007274:	4b4e      	ldr	r3, [pc, #312]	; (80073b0 <W25qxx_ReadPage+0x15c>)
 8007276:	2201      	movs	r2, #1
 8007278:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || !NumByteToRead_up_to_PageSize)
 800727c:	4b4c      	ldr	r3, [pc, #304]	; (80073b0 <W25qxx_ReadPage+0x15c>)
 800727e:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8007282:	b29b      	uxth	r3, r3
 8007284:	461a      	mov	r2, r3
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	4293      	cmp	r3, r2
 800728a:	d802      	bhi.n	8007292 <W25qxx_ReadPage+0x3e>
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d104      	bne.n	800729c <W25qxx_ReadPage+0x48>
        NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8007292:	4b47      	ldr	r3, [pc, #284]	; (80073b0 <W25qxx_ReadPage+0x15c>)
 8007294:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8007298:	b29b      	uxth	r3, r3
 800729a:	603b      	str	r3, [r7, #0]
    if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	4413      	add	r3, r2
 80072a2:	4a43      	ldr	r2, [pc, #268]	; (80073b0 <W25qxx_ReadPage+0x15c>)
 80072a4:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 80072a8:	b292      	uxth	r2, r2
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d907      	bls.n	80072be <W25qxx_ReadPage+0x6a>
        NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80072ae:	4b40      	ldr	r3, [pc, #256]	; (80073b0 <W25qxx_ReadPage+0x15c>)
 80072b0:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	461a      	mov	r2, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	603b      	str	r3, [r7, #0]
                 __func__, Page_Address, Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
    //W25qxx_Delay(100);
    uint32_t StartTime = HAL_GetTick();
#endif

    Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 80072be:	4b3c      	ldr	r3, [pc, #240]	; (80073b0 <W25qxx_ReadPage+0x15c>)
 80072c0:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	461a      	mov	r2, r3
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	fb02 f303 	mul.w	r3, r2, r3
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	4413      	add	r3, r2
 80072d2:	60bb      	str	r3, [r7, #8]
    W25qxx_Spi(Page_Address & 0xFF);
    //W25qxx_Spi(0);
    HAL_SPI_Receive(portFLASH, pBuffer, NumByteToRead_up_to_PageSize, min_wait_ms);
    W25_UNSELECT();
    */
    memset(pageTmp, 0, sizeof(pageTmp));
 80072d4:	f240 1205 	movw	r2, #261	; 0x105
 80072d8:	2100      	movs	r1, #0
 80072da:	4836      	ldr	r0, [pc, #216]	; (80073b4 <W25qxx_ReadPage+0x160>)
 80072dc:	f00b fe1f 	bl	8012f1e <memset>
    uint16_t lens = NumByteToRead_up_to_PageSize + PAGE_HDR_BYTES;// + 1;
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	3304      	adds	r3, #4
 80072e6:	82fb      	strh	r3, [r7, #22]
    int idx = 0;
 80072e8:	2300      	movs	r3, #0
 80072ea:	613b      	str	r3, [r7, #16]
    pageTmp[idx++] = DATA_READ;//FAST_READ;
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	1c5a      	adds	r2, r3, #1
 80072f0:	613a      	str	r2, [r7, #16]
 80072f2:	4a30      	ldr	r2, [pc, #192]	; (80073b4 <W25qxx_ReadPage+0x160>)
 80072f4:	2103      	movs	r1, #3
 80072f6:	54d1      	strb	r1, [r2, r3]
    //if (w25qxx.ID >= W25Q256) pageTmp[idx++] = (Page_Address & 0xFF000000) >> 24;
    pageTmp[idx++] = (Page_Address & 0xFF0000) >> 16;
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	0c19      	lsrs	r1, r3, #16
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	1c5a      	adds	r2, r3, #1
 8007300:	613a      	str	r2, [r7, #16]
 8007302:	b2c9      	uxtb	r1, r1
 8007304:	4a2b      	ldr	r2, [pc, #172]	; (80073b4 <W25qxx_ReadPage+0x160>)
 8007306:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = (Page_Address& 0xFF00) >> 8;
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	0a19      	lsrs	r1, r3, #8
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	1c5a      	adds	r2, r3, #1
 8007310:	613a      	str	r2, [r7, #16]
 8007312:	b2c9      	uxtb	r1, r1
 8007314:	4a27      	ldr	r2, [pc, #156]	; (80073b4 <W25qxx_ReadPage+0x160>)
 8007316:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = Page_Address & 0xFF;
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	1c5a      	adds	r2, r3, #1
 800731c:	613a      	str	r2, [r7, #16]
 800731e:	68ba      	ldr	r2, [r7, #8]
 8007320:	b2d1      	uxtb	r1, r2
 8007322:	4a24      	ldr	r2, [pc, #144]	; (80073b4 <W25qxx_ReadPage+0x160>)
 8007324:	54d1      	strb	r1, [r2, r3]
    //pageTmp[idx++] = 0;
    spiRdy = 0;
 8007326:	4b24      	ldr	r3, [pc, #144]	; (80073b8 <W25qxx_ReadPage+0x164>)
 8007328:	2200      	movs	r2, #0
 800732a:	701a      	strb	r2, [r3, #0]

w25_withDMA = 1;
 800732c:	4b23      	ldr	r3, [pc, #140]	; (80073bc <W25qxx_ReadPage+0x168>)
 800732e:	2201      	movs	r2, #1
 8007330:	701a      	strb	r2, [r3, #0]
    W25_SELECT();
 8007332:	f7ff fb45 	bl	80069c0 <W25_SELECT>
    if (w25_withDMA) {
 8007336:	4b21      	ldr	r3, [pc, #132]	; (80073bc <W25qxx_ReadPage+0x168>)
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d013      	beq.n	8007366 <W25qxx_ReadPage+0x112>
    	HAL_SPI_TransmitReceive_DMA(portFLASH, pageTmp, pageTmp, lens);
 800733e:	4b20      	ldr	r3, [pc, #128]	; (80073c0 <W25qxx_ReadPage+0x16c>)
 8007340:	6818      	ldr	r0, [r3, #0]
 8007342:	8afb      	ldrh	r3, [r7, #22]
 8007344:	4a1b      	ldr	r2, [pc, #108]	; (80073b4 <W25qxx_ReadPage+0x160>)
 8007346:	491b      	ldr	r1, [pc, #108]	; (80073b4 <W25qxx_ReadPage+0x160>)
 8007348:	f005 f86e 	bl	800c428 <HAL_SPI_TransmitReceive_DMA>
    	while (!spiRdy) {
 800734c:	e002      	b.n	8007354 <W25qxx_ReadPage+0x100>
    		W25qxx_Delay(1);
 800734e:	2001      	movs	r0, #1
 8007350:	f000 f90a 	bl	8007568 <HAL_Delay>
    	while (!spiRdy) {
 8007354:	4b18      	ldr	r3, [pc, #96]	; (80073b8 <W25qxx_ReadPage+0x164>)
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	b2db      	uxtb	r3, r3
 800735a:	2b00      	cmp	r3, #0
 800735c:	d0f7      	beq.n	800734e <W25qxx_ReadPage+0xfa>
    	}
w25_withDMA = 0;
 800735e:	4b17      	ldr	r3, [pc, #92]	; (80073bc <W25qxx_ReadPage+0x168>)
 8007360:	2200      	movs	r2, #0
 8007362:	701a      	strb	r2, [r3, #0]
 8007364:	e017      	b.n	8007396 <W25qxx_ReadPage+0x142>
    } else {
    	if (HAL_SPI_TransmitReceive(portFLASH, pageTmp, pageTmp, lens, min_wait_ms) != HAL_OK) devError |= devSPI;
 8007366:	4b16      	ldr	r3, [pc, #88]	; (80073c0 <W25qxx_ReadPage+0x16c>)
 8007368:	6818      	ldr	r0, [r3, #0]
 800736a:	22fa      	movs	r2, #250	; 0xfa
 800736c:	8afb      	ldrh	r3, [r7, #22]
 800736e:	9200      	str	r2, [sp, #0]
 8007370:	4a10      	ldr	r2, [pc, #64]	; (80073b4 <W25qxx_ReadPage+0x160>)
 8007372:	4910      	ldr	r1, [pc, #64]	; (80073b4 <W25qxx_ReadPage+0x160>)
 8007374:	f004 fd51 	bl	800be1a <HAL_SPI_TransmitReceive>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d006      	beq.n	800738c <W25qxx_ReadPage+0x138>
 800737e:	4b11      	ldr	r3, [pc, #68]	; (80073c4 <W25qxx_ReadPage+0x170>)
 8007380:	881b      	ldrh	r3, [r3, #0]
 8007382:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007386:	b29a      	uxth	r2, r3
 8007388:	4b0e      	ldr	r3, [pc, #56]	; (80073c4 <W25qxx_ReadPage+0x170>)
 800738a:	801a      	strh	r2, [r3, #0]
    	W25_UNSELECT();
 800738c:	f7ff fb24 	bl	80069d8 <W25_UNSELECT>

    	spiRdy = 1;
 8007390:	4b09      	ldr	r3, [pc, #36]	; (80073b8 <W25qxx_ReadPage+0x164>)
 8007392:	2201      	movs	r2, #1
 8007394:	701a      	strb	r2, [r3, #0]
    }
	memcpy(pBuffer, &pageTmp[PAGE_HDR_BYTES], NumByteToRead_up_to_PageSize);//w25qxx.PageSize);
 8007396:	683a      	ldr	r2, [r7, #0]
 8007398:	490b      	ldr	r1, [pc, #44]	; (80073c8 <W25qxx_ReadPage+0x174>)
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	f00b fdb1 	bl	8012f02 <memcpy>
    	Report(0, "\r\n");
    	Report(1, "%s done after %u ms\r\n", __func__, StartTime);
#endif


    w25qxx.Lock = 0;
 80073a0:	4b03      	ldr	r3, [pc, #12]	; (80073b0 <W25qxx_ReadPage+0x15c>)
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 80073a8:	bf00      	nop
 80073aa:	3718      	adds	r7, #24
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}
 80073b0:	20003394 	.word	0x20003394
 80073b4:	200033bc 	.word	0x200033bc
 80073b8:	200000f4 	.word	0x200000f4
 80073bc:	200034c1 	.word	0x200034c1
 80073c0:	20000010 	.word	0x20000010
 80073c4:	20001b00 	.word	0x20001b00
 80073c8:	200033c0 	.word	0x200033c0

080073cc <W25qxx_ReadSector>:
//------------------------------------------------------------------------------------------
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b088      	sub	sp, #32
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	607a      	str	r2, [r7, #4]
 80073d8:	603b      	str	r3, [r7, #0]
    if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || !NumByteToRead_up_to_SectorSize)
 80073da:	4b31      	ldr	r3, [pc, #196]	; (80074a0 <W25qxx_ReadSector+0xd4>)
 80073dc:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80073e0:	683a      	ldr	r2, [r7, #0]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d802      	bhi.n	80073ec <W25qxx_ReadSector+0x20>
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d103      	bne.n	80073f4 <W25qxx_ReadSector+0x28>
                NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 80073ec:	4b2c      	ldr	r3, [pc, #176]	; (80074a0 <W25qxx_ReadSector+0xd4>)
 80073ee:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80073f2:	603b      	str	r3, [r7, #0]
    Report(1, "%s:0x%X(%u), Offset:%u ,Read %u Bytes, begin...\r\n",
                 __func__, Sector_Address, Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
    //W25qxx_Delay(100);
#endif

    if (OffsetInByte >= w25qxx.SectorSize) {
 80073f4:	4b2a      	ldr	r3, [pc, #168]	; (80074a0 <W25qxx_ReadSector+0xd4>)
 80073f6:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d24b      	bcs.n	8007498 <W25qxx_ReadSector+0xcc>
        return;
    }

    int32_t BytesToRead;
    uint32_t LocalOffset, StartPage;
    if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	441a      	add	r2, r3
 8007406:	4b26      	ldr	r3, [pc, #152]	; (80074a0 <W25qxx_ReadSector+0xd4>)
 8007408:	f8d3 300f 	ldr.w	r3, [r3, #15]
 800740c:	429a      	cmp	r2, r3
 800740e:	d906      	bls.n	800741e <W25qxx_ReadSector+0x52>
        BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8007410:	4b23      	ldr	r3, [pc, #140]	; (80074a0 <W25qxx_ReadSector+0xd4>)
 8007412:	f8d3 200f 	ldr.w	r2, [r3, #15]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	1ad3      	subs	r3, r2, r3
 800741a:	61fb      	str	r3, [r7, #28]
 800741c:	e001      	b.n	8007422 <W25qxx_ReadSector+0x56>
    else
        BytesToRead = NumByteToRead_up_to_SectorSize;
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	61fb      	str	r3, [r7, #28]
    StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8007422:	68b8      	ldr	r0, [r7, #8]
 8007424:	f7ff fd1e 	bl	8006e64 <W25qxx_SectorToPage>
 8007428:	4602      	mov	r2, r0
 800742a:	4b1d      	ldr	r3, [pc, #116]	; (80074a0 <W25qxx_ReadSector+0xd4>)
 800742c:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8007430:	b29b      	uxth	r3, r3
 8007432:	4619      	mov	r1, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	fbb3 f3f1 	udiv	r3, r3, r1
 800743a:	4413      	add	r3, r2
 800743c:	617b      	str	r3, [r7, #20]
    LocalOffset = OffsetInByte % w25qxx.PageSize;
 800743e:	4b18      	ldr	r3, [pc, #96]	; (80074a0 <W25qxx_ReadSector+0xd4>)
 8007440:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8007444:	b29b      	uxth	r3, r3
 8007446:	461a      	mov	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	fbb3 f1f2 	udiv	r1, r3, r2
 800744e:	fb01 f202 	mul.w	r2, r1, r2
 8007452:	1a9b      	subs	r3, r3, r2
 8007454:	61bb      	str	r3, [r7, #24]
    do {
        W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8007456:	69fb      	ldr	r3, [r7, #28]
 8007458:	69ba      	ldr	r2, [r7, #24]
 800745a:	6979      	ldr	r1, [r7, #20]
 800745c:	68f8      	ldr	r0, [r7, #12]
 800745e:	f7ff fef9 	bl	8007254 <W25qxx_ReadPage>
        StartPage++;
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	3301      	adds	r3, #1
 8007466:	617b      	str	r3, [r7, #20]
        BytesToRead -= w25qxx.PageSize - LocalOffset;
 8007468:	4b0d      	ldr	r3, [pc, #52]	; (80074a0 <W25qxx_ReadSector+0xd4>)
 800746a:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800746e:	b29b      	uxth	r3, r3
 8007470:	461a      	mov	r2, r3
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	1a9a      	subs	r2, r3, r2
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	4413      	add	r3, r2
 800747a:	61fb      	str	r3, [r7, #28]
        pBuffer += w25qxx.PageSize;
 800747c:	4b08      	ldr	r3, [pc, #32]	; (80074a0 <W25qxx_ReadSector+0xd4>)
 800747e:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8007482:	b29b      	uxth	r3, r3
 8007484:	461a      	mov	r2, r3
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	4413      	add	r3, r2
 800748a:	60fb      	str	r3, [r7, #12]
        LocalOffset = 0;
 800748c:	2300      	movs	r3, #0
 800748e:	61bb      	str	r3, [r7, #24]
    } while(BytesToRead > 0);
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	2b00      	cmp	r3, #0
 8007494:	dcdf      	bgt.n	8007456 <W25qxx_ReadSector+0x8a>
 8007496:	e000      	b.n	800749a <W25qxx_ReadSector+0xce>
        return;
 8007498:	bf00      	nop
#ifdef W25QXX_DEBUG
    Report(1, "%s done\r\n", __func__);
    //W25qxx_Delay(100);
#endif

}
 800749a:	3720      	adds	r7, #32
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	20003394 	.word	0x20003394

080074a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80074a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80074dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80074a8:	f7ff fa78 	bl	800699c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80074ac:	480c      	ldr	r0, [pc, #48]	; (80074e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80074ae:	490d      	ldr	r1, [pc, #52]	; (80074e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80074b0:	4a0d      	ldr	r2, [pc, #52]	; (80074e8 <LoopForever+0xe>)
  movs r3, #0
 80074b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80074b4:	e002      	b.n	80074bc <LoopCopyDataInit>

080074b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80074b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80074b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80074ba:	3304      	adds	r3, #4

080074bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80074bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80074be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80074c0:	d3f9      	bcc.n	80074b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80074c2:	4a0a      	ldr	r2, [pc, #40]	; (80074ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80074c4:	4c0a      	ldr	r4, [pc, #40]	; (80074f0 <LoopForever+0x16>)
  movs r3, #0
 80074c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80074c8:	e001      	b.n	80074ce <LoopFillZerobss>

080074ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80074ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80074cc:	3204      	adds	r2, #4

080074ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80074ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80074d0:	d3fb      	bcc.n	80074ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80074d2:	f00b fcef 	bl	8012eb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80074d6:	f7fa fdf5 	bl	80020c4 <main>

080074da <LoopForever>:

LoopForever:
    b LoopForever
 80074da:	e7fe      	b.n	80074da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80074dc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80074e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80074e4:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 80074e8:	08019224 	.word	0x08019224
  ldr r2, =_sbss
 80074ec:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 80074f0:	200082e8 	.word	0x200082e8

080074f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80074f4:	e7fe      	b.n	80074f4 <ADC1_2_IRQHandler>

080074f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80074f6:	b580      	push	{r7, lr}
 80074f8:	b082      	sub	sp, #8
 80074fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80074fc:	2300      	movs	r3, #0
 80074fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007500:	2003      	movs	r0, #3
 8007502:	f000 f902 	bl	800770a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007506:	200f      	movs	r0, #15
 8007508:	f7ff f844 	bl	8006594 <HAL_InitTick>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d002      	beq.n	8007518 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	71fb      	strb	r3, [r7, #7]
 8007516:	e001      	b.n	800751c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007518:	f7fe fcb0 	bl	8005e7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800751c:	79fb      	ldrb	r3, [r7, #7]
}
 800751e:	4618      	mov	r0, r3
 8007520:	3708      	adds	r7, #8
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
	...

08007528 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007528:	b480      	push	{r7}
 800752a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800752c:	4b06      	ldr	r3, [pc, #24]	; (8007548 <HAL_IncTick+0x20>)
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	461a      	mov	r2, r3
 8007532:	4b06      	ldr	r3, [pc, #24]	; (800754c <HAL_IncTick+0x24>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4413      	add	r3, r2
 8007538:	4a04      	ldr	r2, [pc, #16]	; (800754c <HAL_IncTick+0x24>)
 800753a:	6013      	str	r3, [r2, #0]
}
 800753c:	bf00      	nop
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop
 8007548:	20000168 	.word	0x20000168
 800754c:	200034c4 	.word	0x200034c4

08007550 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007550:	b480      	push	{r7}
 8007552:	af00      	add	r7, sp, #0
  return uwTick;
 8007554:	4b03      	ldr	r3, [pc, #12]	; (8007564 <HAL_GetTick+0x14>)
 8007556:	681b      	ldr	r3, [r3, #0]
}
 8007558:	4618      	mov	r0, r3
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr
 8007562:	bf00      	nop
 8007564:	200034c4 	.word	0x200034c4

08007568 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b084      	sub	sp, #16
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007570:	f7ff ffee 	bl	8007550 <HAL_GetTick>
 8007574:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007580:	d005      	beq.n	800758e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8007582:	4b0a      	ldr	r3, [pc, #40]	; (80075ac <HAL_Delay+0x44>)
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	461a      	mov	r2, r3
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	4413      	add	r3, r2
 800758c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800758e:	bf00      	nop
 8007590:	f7ff ffde 	bl	8007550 <HAL_GetTick>
 8007594:	4602      	mov	r2, r0
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	68fa      	ldr	r2, [r7, #12]
 800759c:	429a      	cmp	r2, r3
 800759e:	d8f7      	bhi.n	8007590 <HAL_Delay+0x28>
  {
  }
}
 80075a0:	bf00      	nop
 80075a2:	bf00      	nop
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	20000168 	.word	0x20000168

080075b0 <__NVIC_SetPriorityGrouping>:
{
 80075b0:	b480      	push	{r7}
 80075b2:	b085      	sub	sp, #20
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f003 0307 	and.w	r3, r3, #7
 80075be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80075c0:	4b0c      	ldr	r3, [pc, #48]	; (80075f4 <__NVIC_SetPriorityGrouping+0x44>)
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80075c6:	68ba      	ldr	r2, [r7, #8]
 80075c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80075cc:	4013      	ands	r3, r2
 80075ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80075d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80075dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80075e2:	4a04      	ldr	r2, [pc, #16]	; (80075f4 <__NVIC_SetPriorityGrouping+0x44>)
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	60d3      	str	r3, [r2, #12]
}
 80075e8:	bf00      	nop
 80075ea:	3714      	adds	r7, #20
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr
 80075f4:	e000ed00 	.word	0xe000ed00

080075f8 <__NVIC_GetPriorityGrouping>:
{
 80075f8:	b480      	push	{r7}
 80075fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80075fc:	4b04      	ldr	r3, [pc, #16]	; (8007610 <__NVIC_GetPriorityGrouping+0x18>)
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	0a1b      	lsrs	r3, r3, #8
 8007602:	f003 0307 	and.w	r3, r3, #7
}
 8007606:	4618      	mov	r0, r3
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr
 8007610:	e000ed00 	.word	0xe000ed00

08007614 <__NVIC_EnableIRQ>:
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	4603      	mov	r3, r0
 800761c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800761e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007622:	2b00      	cmp	r3, #0
 8007624:	db0b      	blt.n	800763e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007626:	79fb      	ldrb	r3, [r7, #7]
 8007628:	f003 021f 	and.w	r2, r3, #31
 800762c:	4907      	ldr	r1, [pc, #28]	; (800764c <__NVIC_EnableIRQ+0x38>)
 800762e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007632:	095b      	lsrs	r3, r3, #5
 8007634:	2001      	movs	r0, #1
 8007636:	fa00 f202 	lsl.w	r2, r0, r2
 800763a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800763e:	bf00      	nop
 8007640:	370c      	adds	r7, #12
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	e000e100 	.word	0xe000e100

08007650 <__NVIC_SetPriority>:
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	4603      	mov	r3, r0
 8007658:	6039      	str	r1, [r7, #0]
 800765a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800765c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007660:	2b00      	cmp	r3, #0
 8007662:	db0a      	blt.n	800767a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	b2da      	uxtb	r2, r3
 8007668:	490c      	ldr	r1, [pc, #48]	; (800769c <__NVIC_SetPriority+0x4c>)
 800766a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800766e:	0112      	lsls	r2, r2, #4
 8007670:	b2d2      	uxtb	r2, r2
 8007672:	440b      	add	r3, r1
 8007674:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007678:	e00a      	b.n	8007690 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	b2da      	uxtb	r2, r3
 800767e:	4908      	ldr	r1, [pc, #32]	; (80076a0 <__NVIC_SetPriority+0x50>)
 8007680:	79fb      	ldrb	r3, [r7, #7]
 8007682:	f003 030f 	and.w	r3, r3, #15
 8007686:	3b04      	subs	r3, #4
 8007688:	0112      	lsls	r2, r2, #4
 800768a:	b2d2      	uxtb	r2, r2
 800768c:	440b      	add	r3, r1
 800768e:	761a      	strb	r2, [r3, #24]
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr
 800769c:	e000e100 	.word	0xe000e100
 80076a0:	e000ed00 	.word	0xe000ed00

080076a4 <NVIC_EncodePriority>:
{
 80076a4:	b480      	push	{r7}
 80076a6:	b089      	sub	sp, #36	; 0x24
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f003 0307 	and.w	r3, r3, #7
 80076b6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	f1c3 0307 	rsb	r3, r3, #7
 80076be:	2b04      	cmp	r3, #4
 80076c0:	bf28      	it	cs
 80076c2:	2304      	movcs	r3, #4
 80076c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	3304      	adds	r3, #4
 80076ca:	2b06      	cmp	r3, #6
 80076cc:	d902      	bls.n	80076d4 <NVIC_EncodePriority+0x30>
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	3b03      	subs	r3, #3
 80076d2:	e000      	b.n	80076d6 <NVIC_EncodePriority+0x32>
 80076d4:	2300      	movs	r3, #0
 80076d6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80076d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	fa02 f303 	lsl.w	r3, r2, r3
 80076e2:	43da      	mvns	r2, r3
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	401a      	ands	r2, r3
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80076ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	fa01 f303 	lsl.w	r3, r1, r3
 80076f6:	43d9      	mvns	r1, r3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80076fc:	4313      	orrs	r3, r2
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3724      	adds	r7, #36	; 0x24
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr

0800770a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b082      	sub	sp, #8
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f7ff ff4c 	bl	80075b0 <__NVIC_SetPriorityGrouping>
}
 8007718:	bf00      	nop
 800771a:	3708      	adds	r7, #8
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b086      	sub	sp, #24
 8007724:	af00      	add	r7, sp, #0
 8007726:	4603      	mov	r3, r0
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	607a      	str	r2, [r7, #4]
 800772c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800772e:	2300      	movs	r3, #0
 8007730:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007732:	f7ff ff61 	bl	80075f8 <__NVIC_GetPriorityGrouping>
 8007736:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	68b9      	ldr	r1, [r7, #8]
 800773c:	6978      	ldr	r0, [r7, #20]
 800773e:	f7ff ffb1 	bl	80076a4 <NVIC_EncodePriority>
 8007742:	4602      	mov	r2, r0
 8007744:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007748:	4611      	mov	r1, r2
 800774a:	4618      	mov	r0, r3
 800774c:	f7ff ff80 	bl	8007650 <__NVIC_SetPriority>
}
 8007750:	bf00      	nop
 8007752:	3718      	adds	r7, #24
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	4603      	mov	r3, r0
 8007760:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007766:	4618      	mov	r0, r3
 8007768:	f7ff ff54 	bl	8007614 <__NVIC_EnableIRQ>
}
 800776c:	bf00      	nop
 800776e:	3708      	adds	r7, #8
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007774:	b480      	push	{r7}
 8007776:	b085      	sub	sp, #20
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d101      	bne.n	8007786 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	e098      	b.n	80078b8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	461a      	mov	r2, r3
 800778c:	4b4d      	ldr	r3, [pc, #308]	; (80078c4 <HAL_DMA_Init+0x150>)
 800778e:	429a      	cmp	r2, r3
 8007790:	d80f      	bhi.n	80077b2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	461a      	mov	r2, r3
 8007798:	4b4b      	ldr	r3, [pc, #300]	; (80078c8 <HAL_DMA_Init+0x154>)
 800779a:	4413      	add	r3, r2
 800779c:	4a4b      	ldr	r2, [pc, #300]	; (80078cc <HAL_DMA_Init+0x158>)
 800779e:	fba2 2303 	umull	r2, r3, r2, r3
 80077a2:	091b      	lsrs	r3, r3, #4
 80077a4:	009a      	lsls	r2, r3, #2
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4a48      	ldr	r2, [pc, #288]	; (80078d0 <HAL_DMA_Init+0x15c>)
 80077ae:	641a      	str	r2, [r3, #64]	; 0x40
 80077b0:	e00e      	b.n	80077d0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	461a      	mov	r2, r3
 80077b8:	4b46      	ldr	r3, [pc, #280]	; (80078d4 <HAL_DMA_Init+0x160>)
 80077ba:	4413      	add	r3, r2
 80077bc:	4a43      	ldr	r2, [pc, #268]	; (80078cc <HAL_DMA_Init+0x158>)
 80077be:	fba2 2303 	umull	r2, r3, r2, r3
 80077c2:	091b      	lsrs	r3, r3, #4
 80077c4:	009a      	lsls	r2, r3, #2
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4a42      	ldr	r2, [pc, #264]	; (80078d8 <HAL_DMA_Init+0x164>)
 80077ce:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2202      	movs	r2, #2
 80077d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80077e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80077f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007800:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	699b      	ldr	r3, [r3, #24]
 8007806:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800780c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a1b      	ldr	r3, [r3, #32]
 8007812:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	4313      	orrs	r3, r2
 8007818:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	68fa      	ldr	r2, [r7, #12]
 8007820:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800782a:	d039      	beq.n	80078a0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007830:	4a27      	ldr	r2, [pc, #156]	; (80078d0 <HAL_DMA_Init+0x15c>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d11a      	bne.n	800786c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007836:	4b29      	ldr	r3, [pc, #164]	; (80078dc <HAL_DMA_Init+0x168>)
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800783e:	f003 031c 	and.w	r3, r3, #28
 8007842:	210f      	movs	r1, #15
 8007844:	fa01 f303 	lsl.w	r3, r1, r3
 8007848:	43db      	mvns	r3, r3
 800784a:	4924      	ldr	r1, [pc, #144]	; (80078dc <HAL_DMA_Init+0x168>)
 800784c:	4013      	ands	r3, r2
 800784e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8007850:	4b22      	ldr	r3, [pc, #136]	; (80078dc <HAL_DMA_Init+0x168>)
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6859      	ldr	r1, [r3, #4]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800785c:	f003 031c 	and.w	r3, r3, #28
 8007860:	fa01 f303 	lsl.w	r3, r1, r3
 8007864:	491d      	ldr	r1, [pc, #116]	; (80078dc <HAL_DMA_Init+0x168>)
 8007866:	4313      	orrs	r3, r2
 8007868:	600b      	str	r3, [r1, #0]
 800786a:	e019      	b.n	80078a0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800786c:	4b1c      	ldr	r3, [pc, #112]	; (80078e0 <HAL_DMA_Init+0x16c>)
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007874:	f003 031c 	and.w	r3, r3, #28
 8007878:	210f      	movs	r1, #15
 800787a:	fa01 f303 	lsl.w	r3, r1, r3
 800787e:	43db      	mvns	r3, r3
 8007880:	4917      	ldr	r1, [pc, #92]	; (80078e0 <HAL_DMA_Init+0x16c>)
 8007882:	4013      	ands	r3, r2
 8007884:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8007886:	4b16      	ldr	r3, [pc, #88]	; (80078e0 <HAL_DMA_Init+0x16c>)
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6859      	ldr	r1, [r3, #4]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007892:	f003 031c 	and.w	r3, r3, #28
 8007896:	fa01 f303 	lsl.w	r3, r1, r3
 800789a:	4911      	ldr	r1, [pc, #68]	; (80078e0 <HAL_DMA_Init+0x16c>)
 800789c:	4313      	orrs	r3, r2
 800789e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2201      	movs	r2, #1
 80078aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80078b6:	2300      	movs	r3, #0
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3714      	adds	r7, #20
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr
 80078c4:	40020407 	.word	0x40020407
 80078c8:	bffdfff8 	.word	0xbffdfff8
 80078cc:	cccccccd 	.word	0xcccccccd
 80078d0:	40020000 	.word	0x40020000
 80078d4:	bffdfbf8 	.word	0xbffdfbf8
 80078d8:	40020400 	.word	0x40020400
 80078dc:	400200a8 	.word	0x400200a8
 80078e0:	400204a8 	.word	0x400204a8

080078e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b086      	sub	sp, #24
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	607a      	str	r2, [r7, #4]
 80078f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078f2:	2300      	movs	r3, #0
 80078f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d101      	bne.n	8007904 <HAL_DMA_Start_IT+0x20>
 8007900:	2302      	movs	r3, #2
 8007902:	e04b      	b.n	800799c <HAL_DMA_Start_IT+0xb8>
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007912:	b2db      	uxtb	r3, r3
 8007914:	2b01      	cmp	r3, #1
 8007916:	d13a      	bne.n	800798e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2202      	movs	r2, #2
 800791c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2200      	movs	r2, #0
 8007924:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f022 0201 	bic.w	r2, r2, #1
 8007934:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	68b9      	ldr	r1, [r7, #8]
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f000 f96d 	bl	8007c1c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007946:	2b00      	cmp	r3, #0
 8007948:	d008      	beq.n	800795c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f042 020e 	orr.w	r2, r2, #14
 8007958:	601a      	str	r2, [r3, #0]
 800795a:	e00f      	b.n	800797c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f022 0204 	bic.w	r2, r2, #4
 800796a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f042 020a 	orr.w	r2, r2, #10
 800797a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f042 0201 	orr.w	r2, r2, #1
 800798a:	601a      	str	r2, [r3, #0]
 800798c:	e005      	b.n	800799a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2200      	movs	r2, #0
 8007992:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007996:	2302      	movs	r3, #2
 8007998:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800799a:	7dfb      	ldrb	r3, [r7, #23]
}
 800799c:	4618      	mov	r0, r3
 800799e:	3718      	adds	r7, #24
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079ac:	2300      	movs	r3, #0
 80079ae:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	2b02      	cmp	r3, #2
 80079ba:	d008      	beq.n	80079ce <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2204      	movs	r2, #4
 80079c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	e022      	b.n	8007a14 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f022 020e 	bic.w	r2, r2, #14
 80079dc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f022 0201 	bic.w	r2, r2, #1
 80079ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079f2:	f003 021c 	and.w	r2, r3, #28
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fa:	2101      	movs	r1, #1
 80079fc:	fa01 f202 	lsl.w	r2, r1, r2
 8007a00:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2201      	movs	r2, #1
 8007a06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8007a12:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3714      	adds	r7, #20
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d005      	beq.n	8007a44 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2204      	movs	r2, #4
 8007a3c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	73fb      	strb	r3, [r7, #15]
 8007a42:	e029      	b.n	8007a98 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f022 020e 	bic.w	r2, r2, #14
 8007a52:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f022 0201 	bic.w	r2, r2, #1
 8007a62:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a68:	f003 021c 	and.w	r2, r3, #28
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a70:	2101      	movs	r1, #1
 8007a72:	fa01 f202 	lsl.w	r2, r1, r2
 8007a76:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d003      	beq.n	8007a98 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	4798      	blx	r3
    }
  }
  return status;
 8007a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3710      	adds	r7, #16
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}

08007aa2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007aa2:	b580      	push	{r7, lr}
 8007aa4:	b084      	sub	sp, #16
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007abe:	f003 031c 	and.w	r3, r3, #28
 8007ac2:	2204      	movs	r2, #4
 8007ac4:	409a      	lsls	r2, r3
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	4013      	ands	r3, r2
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d026      	beq.n	8007b1c <HAL_DMA_IRQHandler+0x7a>
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	f003 0304 	and.w	r3, r3, #4
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d021      	beq.n	8007b1c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f003 0320 	and.w	r3, r3, #32
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d107      	bne.n	8007af6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f022 0204 	bic.w	r2, r2, #4
 8007af4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007afa:	f003 021c 	and.w	r2, r3, #28
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b02:	2104      	movs	r1, #4
 8007b04:	fa01 f202 	lsl.w	r2, r1, r2
 8007b08:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d071      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8007b1a:	e06c      	b.n	8007bf6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b20:	f003 031c 	and.w	r3, r3, #28
 8007b24:	2202      	movs	r2, #2
 8007b26:	409a      	lsls	r2, r3
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	4013      	ands	r3, r2
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d02e      	beq.n	8007b8e <HAL_DMA_IRQHandler+0xec>
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	f003 0302 	and.w	r3, r3, #2
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d029      	beq.n	8007b8e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 0320 	and.w	r3, r3, #32
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d10b      	bne.n	8007b60 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f022 020a 	bic.w	r2, r2, #10
 8007b56:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b64:	f003 021c 	and.w	r2, r3, #28
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b6c:	2102      	movs	r1, #2
 8007b6e:	fa01 f202 	lsl.w	r2, r1, r2
 8007b72:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d038      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8007b8c:	e033      	b.n	8007bf6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b92:	f003 031c 	and.w	r3, r3, #28
 8007b96:	2208      	movs	r2, #8
 8007b98:	409a      	lsls	r2, r3
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d02a      	beq.n	8007bf8 <HAL_DMA_IRQHandler+0x156>
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	f003 0308 	and.w	r3, r3, #8
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d025      	beq.n	8007bf8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f022 020e 	bic.w	r2, r2, #14
 8007bba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bc0:	f003 021c 	and.w	r2, r3, #28
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc8:	2101      	movs	r1, #1
 8007bca:	fa01 f202 	lsl.w	r2, r1, r2
 8007bce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2201      	movs	r2, #1
 8007bda:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d004      	beq.n	8007bf8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007bf6:	bf00      	nop
 8007bf8:	bf00      	nop
}
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007c0e:	b2db      	uxtb	r3, r3
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	607a      	str	r2, [r7, #4]
 8007c28:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c2e:	f003 021c 	and.w	r2, r3, #28
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c36:	2101      	movs	r1, #1
 8007c38:	fa01 f202 	lsl.w	r2, r1, r2
 8007c3c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	683a      	ldr	r2, [r7, #0]
 8007c44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	2b10      	cmp	r3, #16
 8007c4c:	d108      	bne.n	8007c60 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	68ba      	ldr	r2, [r7, #8]
 8007c5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007c5e:	e007      	b.n	8007c70 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	68ba      	ldr	r2, [r7, #8]
 8007c66:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	60da      	str	r2, [r3, #12]
}
 8007c70:	bf00      	nop
 8007c72:	3714      	adds	r7, #20
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b087      	sub	sp, #28
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007c86:	2300      	movs	r3, #0
 8007c88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007c8a:	e17f      	b.n	8007f8c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	2101      	movs	r1, #1
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	fa01 f303 	lsl.w	r3, r1, r3
 8007c98:	4013      	ands	r3, r2
 8007c9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	f000 8171 	beq.w	8007f86 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	f003 0303 	and.w	r3, r3, #3
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d005      	beq.n	8007cbc <HAL_GPIO_Init+0x40>
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	f003 0303 	and.w	r3, r3, #3
 8007cb8:	2b02      	cmp	r3, #2
 8007cba:	d130      	bne.n	8007d1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	005b      	lsls	r3, r3, #1
 8007cc6:	2203      	movs	r2, #3
 8007cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8007ccc:	43db      	mvns	r3, r3
 8007cce:	693a      	ldr	r2, [r7, #16]
 8007cd0:	4013      	ands	r3, r2
 8007cd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	68da      	ldr	r2, [r3, #12]
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	005b      	lsls	r3, r3, #1
 8007cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ce0:	693a      	ldr	r2, [r7, #16]
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	693a      	ldr	r2, [r7, #16]
 8007cea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8007cfa:	43db      	mvns	r3, r3
 8007cfc:	693a      	ldr	r2, [r7, #16]
 8007cfe:	4013      	ands	r3, r2
 8007d00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	091b      	lsrs	r3, r3, #4
 8007d08:	f003 0201 	and.w	r2, r3, #1
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d12:	693a      	ldr	r2, [r7, #16]
 8007d14:	4313      	orrs	r3, r2
 8007d16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	693a      	ldr	r2, [r7, #16]
 8007d1c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	f003 0303 	and.w	r3, r3, #3
 8007d26:	2b03      	cmp	r3, #3
 8007d28:	d118      	bne.n	8007d5c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8007d30:	2201      	movs	r2, #1
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	fa02 f303 	lsl.w	r3, r2, r3
 8007d38:	43db      	mvns	r3, r3
 8007d3a:	693a      	ldr	r2, [r7, #16]
 8007d3c:	4013      	ands	r3, r2
 8007d3e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	08db      	lsrs	r3, r3, #3
 8007d46:	f003 0201 	and.w	r2, r3, #1
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d50:	693a      	ldr	r2, [r7, #16]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	693a      	ldr	r2, [r7, #16]
 8007d5a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	f003 0303 	and.w	r3, r3, #3
 8007d64:	2b03      	cmp	r3, #3
 8007d66:	d017      	beq.n	8007d98 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	005b      	lsls	r3, r3, #1
 8007d72:	2203      	movs	r2, #3
 8007d74:	fa02 f303 	lsl.w	r3, r2, r3
 8007d78:	43db      	mvns	r3, r3
 8007d7a:	693a      	ldr	r2, [r7, #16]
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	689a      	ldr	r2, [r3, #8]
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	005b      	lsls	r3, r3, #1
 8007d88:	fa02 f303 	lsl.w	r3, r2, r3
 8007d8c:	693a      	ldr	r2, [r7, #16]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	693a      	ldr	r2, [r7, #16]
 8007d96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	f003 0303 	and.w	r3, r3, #3
 8007da0:	2b02      	cmp	r3, #2
 8007da2:	d123      	bne.n	8007dec <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	08da      	lsrs	r2, r3, #3
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	3208      	adds	r2, #8
 8007dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007db0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	f003 0307 	and.w	r3, r3, #7
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	220f      	movs	r2, #15
 8007dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8007dc0:	43db      	mvns	r3, r3
 8007dc2:	693a      	ldr	r2, [r7, #16]
 8007dc4:	4013      	ands	r3, r2
 8007dc6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	691a      	ldr	r2, [r3, #16]
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	f003 0307 	and.w	r3, r3, #7
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd8:	693a      	ldr	r2, [r7, #16]
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	08da      	lsrs	r2, r3, #3
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	3208      	adds	r2, #8
 8007de6:	6939      	ldr	r1, [r7, #16]
 8007de8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	005b      	lsls	r3, r3, #1
 8007df6:	2203      	movs	r2, #3
 8007df8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dfc:	43db      	mvns	r3, r3
 8007dfe:	693a      	ldr	r2, [r7, #16]
 8007e00:	4013      	ands	r3, r2
 8007e02:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	f003 0203 	and.w	r2, r3, #3
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	005b      	lsls	r3, r3, #1
 8007e10:	fa02 f303 	lsl.w	r3, r2, r3
 8007e14:	693a      	ldr	r2, [r7, #16]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	693a      	ldr	r2, [r7, #16]
 8007e1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f000 80ac 	beq.w	8007f86 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e2e:	4b5f      	ldr	r3, [pc, #380]	; (8007fac <HAL_GPIO_Init+0x330>)
 8007e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e32:	4a5e      	ldr	r2, [pc, #376]	; (8007fac <HAL_GPIO_Init+0x330>)
 8007e34:	f043 0301 	orr.w	r3, r3, #1
 8007e38:	6613      	str	r3, [r2, #96]	; 0x60
 8007e3a:	4b5c      	ldr	r3, [pc, #368]	; (8007fac <HAL_GPIO_Init+0x330>)
 8007e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e3e:	f003 0301 	and.w	r3, r3, #1
 8007e42:	60bb      	str	r3, [r7, #8]
 8007e44:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007e46:	4a5a      	ldr	r2, [pc, #360]	; (8007fb0 <HAL_GPIO_Init+0x334>)
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	089b      	lsrs	r3, r3, #2
 8007e4c:	3302      	adds	r3, #2
 8007e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e52:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	f003 0303 	and.w	r3, r3, #3
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	220f      	movs	r2, #15
 8007e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e62:	43db      	mvns	r3, r3
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	4013      	ands	r3, r2
 8007e68:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007e70:	d025      	beq.n	8007ebe <HAL_GPIO_Init+0x242>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a4f      	ldr	r2, [pc, #316]	; (8007fb4 <HAL_GPIO_Init+0x338>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d01f      	beq.n	8007eba <HAL_GPIO_Init+0x23e>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a4e      	ldr	r2, [pc, #312]	; (8007fb8 <HAL_GPIO_Init+0x33c>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d019      	beq.n	8007eb6 <HAL_GPIO_Init+0x23a>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a4d      	ldr	r2, [pc, #308]	; (8007fbc <HAL_GPIO_Init+0x340>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d013      	beq.n	8007eb2 <HAL_GPIO_Init+0x236>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a4c      	ldr	r2, [pc, #304]	; (8007fc0 <HAL_GPIO_Init+0x344>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d00d      	beq.n	8007eae <HAL_GPIO_Init+0x232>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4a4b      	ldr	r2, [pc, #300]	; (8007fc4 <HAL_GPIO_Init+0x348>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d007      	beq.n	8007eaa <HAL_GPIO_Init+0x22e>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a4a      	ldr	r2, [pc, #296]	; (8007fc8 <HAL_GPIO_Init+0x34c>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d101      	bne.n	8007ea6 <HAL_GPIO_Init+0x22a>
 8007ea2:	2306      	movs	r3, #6
 8007ea4:	e00c      	b.n	8007ec0 <HAL_GPIO_Init+0x244>
 8007ea6:	2307      	movs	r3, #7
 8007ea8:	e00a      	b.n	8007ec0 <HAL_GPIO_Init+0x244>
 8007eaa:	2305      	movs	r3, #5
 8007eac:	e008      	b.n	8007ec0 <HAL_GPIO_Init+0x244>
 8007eae:	2304      	movs	r3, #4
 8007eb0:	e006      	b.n	8007ec0 <HAL_GPIO_Init+0x244>
 8007eb2:	2303      	movs	r3, #3
 8007eb4:	e004      	b.n	8007ec0 <HAL_GPIO_Init+0x244>
 8007eb6:	2302      	movs	r3, #2
 8007eb8:	e002      	b.n	8007ec0 <HAL_GPIO_Init+0x244>
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e000      	b.n	8007ec0 <HAL_GPIO_Init+0x244>
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	697a      	ldr	r2, [r7, #20]
 8007ec2:	f002 0203 	and.w	r2, r2, #3
 8007ec6:	0092      	lsls	r2, r2, #2
 8007ec8:	4093      	lsls	r3, r2
 8007eca:	693a      	ldr	r2, [r7, #16]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007ed0:	4937      	ldr	r1, [pc, #220]	; (8007fb0 <HAL_GPIO_Init+0x334>)
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	089b      	lsrs	r3, r3, #2
 8007ed6:	3302      	adds	r3, #2
 8007ed8:	693a      	ldr	r2, [r7, #16]
 8007eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007ede:	4b3b      	ldr	r3, [pc, #236]	; (8007fcc <HAL_GPIO_Init+0x350>)
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	43db      	mvns	r3, r3
 8007ee8:	693a      	ldr	r2, [r7, #16]
 8007eea:	4013      	ands	r3, r2
 8007eec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d003      	beq.n	8007f02 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8007efa:	693a      	ldr	r2, [r7, #16]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007f02:	4a32      	ldr	r2, [pc, #200]	; (8007fcc <HAL_GPIO_Init+0x350>)
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007f08:	4b30      	ldr	r3, [pc, #192]	; (8007fcc <HAL_GPIO_Init+0x350>)
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	43db      	mvns	r3, r3
 8007f12:	693a      	ldr	r2, [r7, #16]
 8007f14:	4013      	ands	r3, r2
 8007f16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d003      	beq.n	8007f2c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8007f24:	693a      	ldr	r2, [r7, #16]
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007f2c:	4a27      	ldr	r2, [pc, #156]	; (8007fcc <HAL_GPIO_Init+0x350>)
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007f32:	4b26      	ldr	r3, [pc, #152]	; (8007fcc <HAL_GPIO_Init+0x350>)
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	43db      	mvns	r3, r3
 8007f3c:	693a      	ldr	r2, [r7, #16]
 8007f3e:	4013      	ands	r3, r2
 8007f40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d003      	beq.n	8007f56 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8007f4e:	693a      	ldr	r2, [r7, #16]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	4313      	orrs	r3, r2
 8007f54:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007f56:	4a1d      	ldr	r2, [pc, #116]	; (8007fcc <HAL_GPIO_Init+0x350>)
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8007f5c:	4b1b      	ldr	r3, [pc, #108]	; (8007fcc <HAL_GPIO_Init+0x350>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	43db      	mvns	r3, r3
 8007f66:	693a      	ldr	r2, [r7, #16]
 8007f68:	4013      	ands	r3, r2
 8007f6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d003      	beq.n	8007f80 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8007f78:	693a      	ldr	r2, [r7, #16]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007f80:	4a12      	ldr	r2, [pc, #72]	; (8007fcc <HAL_GPIO_Init+0x350>)
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	3301      	adds	r3, #1
 8007f8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	fa22 f303 	lsr.w	r3, r2, r3
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	f47f ae78 	bne.w	8007c8c <HAL_GPIO_Init+0x10>
  }
}
 8007f9c:	bf00      	nop
 8007f9e:	bf00      	nop
 8007fa0:	371c      	adds	r7, #28
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr
 8007faa:	bf00      	nop
 8007fac:	40021000 	.word	0x40021000
 8007fb0:	40010000 	.word	0x40010000
 8007fb4:	48000400 	.word	0x48000400
 8007fb8:	48000800 	.word	0x48000800
 8007fbc:	48000c00 	.word	0x48000c00
 8007fc0:	48001000 	.word	0x48001000
 8007fc4:	48001400 	.word	0x48001400
 8007fc8:	48001800 	.word	0x48001800
 8007fcc:	40010400 	.word	0x40010400

08007fd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b085      	sub	sp, #20
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	460b      	mov	r3, r1
 8007fda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	691a      	ldr	r2, [r3, #16]
 8007fe0:	887b      	ldrh	r3, [r7, #2]
 8007fe2:	4013      	ands	r3, r2
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d002      	beq.n	8007fee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	73fb      	strb	r3, [r7, #15]
 8007fec:	e001      	b.n	8007ff2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3714      	adds	r7, #20
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	460b      	mov	r3, r1
 800800a:	807b      	strh	r3, [r7, #2]
 800800c:	4613      	mov	r3, r2
 800800e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008010:	787b      	ldrb	r3, [r7, #1]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d003      	beq.n	800801e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008016:	887a      	ldrh	r2, [r7, #2]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800801c:	e002      	b.n	8008024 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800801e:	887a      	ldrh	r2, [r7, #2]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008024:	bf00      	nop
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008030:	b480      	push	{r7}
 8008032:	b085      	sub	sp, #20
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	460b      	mov	r3, r1
 800803a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	695b      	ldr	r3, [r3, #20]
 8008040:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008042:	887a      	ldrh	r2, [r7, #2]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	4013      	ands	r3, r2
 8008048:	041a      	lsls	r2, r3, #16
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	43d9      	mvns	r1, r3
 800804e:	887b      	ldrh	r3, [r7, #2]
 8008050:	400b      	ands	r3, r1
 8008052:	431a      	orrs	r2, r3
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	619a      	str	r2, [r3, #24]
}
 8008058:	bf00      	nop
 800805a:	3714      	adds	r7, #20
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b082      	sub	sp, #8
 8008068:	af00      	add	r7, sp, #0
 800806a:	4603      	mov	r3, r0
 800806c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800806e:	4b08      	ldr	r3, [pc, #32]	; (8008090 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008070:	695a      	ldr	r2, [r3, #20]
 8008072:	88fb      	ldrh	r3, [r7, #6]
 8008074:	4013      	ands	r3, r2
 8008076:	2b00      	cmp	r3, #0
 8008078:	d006      	beq.n	8008088 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800807a:	4a05      	ldr	r2, [pc, #20]	; (8008090 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800807c:	88fb      	ldrh	r3, [r7, #6]
 800807e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008080:	88fb      	ldrh	r3, [r7, #6]
 8008082:	4618      	mov	r0, r3
 8008084:	f7fb fba0 	bl	80037c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8008088:	bf00      	nop
 800808a:	3708      	adds	r7, #8
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}
 8008090:	40010400 	.word	0x40010400

08008094 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d101      	bne.n	80080a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e081      	b.n	80081aa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d106      	bne.n	80080c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f7fd ff06 	bl	8005ecc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2224      	movs	r2, #36	; 0x24
 80080c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f022 0201 	bic.w	r2, r2, #1
 80080d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	685a      	ldr	r2, [r3, #4]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80080e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	689a      	ldr	r2, [r3, #8]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80080f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d107      	bne.n	800810e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	689a      	ldr	r2, [r3, #8]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800810a:	609a      	str	r2, [r3, #8]
 800810c:	e006      	b.n	800811c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	689a      	ldr	r2, [r3, #8]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800811a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	2b02      	cmp	r3, #2
 8008122:	d104      	bne.n	800812e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800812c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	6812      	ldr	r2, [r2, #0]
 8008138:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800813c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008140:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	68da      	ldr	r2, [r3, #12]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008150:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	691a      	ldr	r2, [r3, #16]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	695b      	ldr	r3, [r3, #20]
 800815a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	699b      	ldr	r3, [r3, #24]
 8008162:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	430a      	orrs	r2, r1
 800816a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	69d9      	ldr	r1, [r3, #28]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6a1a      	ldr	r2, [r3, #32]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	430a      	orrs	r2, r1
 800817a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f042 0201 	orr.w	r2, r2, #1
 800818a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2200      	movs	r2, #0
 8008190:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2220      	movs	r2, #32
 8008196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3708      	adds	r7, #8
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
	...

080081b4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b088      	sub	sp, #32
 80081b8:	af02      	add	r7, sp, #8
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	607a      	str	r2, [r7, #4]
 80081be:	461a      	mov	r2, r3
 80081c0:	460b      	mov	r3, r1
 80081c2:	817b      	strh	r3, [r7, #10]
 80081c4:	4613      	mov	r3, r2
 80081c6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	2b20      	cmp	r3, #32
 80081d2:	f040 80da 	bne.w	800838a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d101      	bne.n	80081e4 <HAL_I2C_Master_Transmit+0x30>
 80081e0:	2302      	movs	r3, #2
 80081e2:	e0d3      	b.n	800838c <HAL_I2C_Master_Transmit+0x1d8>
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2201      	movs	r2, #1
 80081e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80081ec:	f7ff f9b0 	bl	8007550 <HAL_GetTick>
 80081f0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	9300      	str	r3, [sp, #0]
 80081f6:	2319      	movs	r3, #25
 80081f8:	2201      	movs	r2, #1
 80081fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80081fe:	68f8      	ldr	r0, [r7, #12]
 8008200:	f001 f8d1 	bl	80093a6 <I2C_WaitOnFlagUntilTimeout>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d001      	beq.n	800820e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	e0be      	b.n	800838c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2221      	movs	r2, #33	; 0x21
 8008212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2210      	movs	r2, #16
 800821a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2200      	movs	r2, #0
 8008222:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	893a      	ldrh	r2, [r7, #8]
 800822e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2200      	movs	r2, #0
 8008234:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800823a:	b29b      	uxth	r3, r3
 800823c:	2bff      	cmp	r3, #255	; 0xff
 800823e:	d90e      	bls.n	800825e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	22ff      	movs	r2, #255	; 0xff
 8008244:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800824a:	b2da      	uxtb	r2, r3
 800824c:	8979      	ldrh	r1, [r7, #10]
 800824e:	4b51      	ldr	r3, [pc, #324]	; (8008394 <HAL_I2C_Master_Transmit+0x1e0>)
 8008250:	9300      	str	r3, [sp, #0]
 8008252:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008256:	68f8      	ldr	r0, [r7, #12]
 8008258:	f001 fa4e 	bl	80096f8 <I2C_TransferConfig>
 800825c:	e06c      	b.n	8008338 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008262:	b29a      	uxth	r2, r3
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800826c:	b2da      	uxtb	r2, r3
 800826e:	8979      	ldrh	r1, [r7, #10]
 8008270:	4b48      	ldr	r3, [pc, #288]	; (8008394 <HAL_I2C_Master_Transmit+0x1e0>)
 8008272:	9300      	str	r3, [sp, #0]
 8008274:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008278:	68f8      	ldr	r0, [r7, #12]
 800827a:	f001 fa3d 	bl	80096f8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800827e:	e05b      	b.n	8008338 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008280:	697a      	ldr	r2, [r7, #20]
 8008282:	6a39      	ldr	r1, [r7, #32]
 8008284:	68f8      	ldr	r0, [r7, #12]
 8008286:	f001 f8ce 	bl	8009426 <I2C_WaitOnTXISFlagUntilTimeout>
 800828a:	4603      	mov	r3, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d001      	beq.n	8008294 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	e07b      	b.n	800838c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008298:	781a      	ldrb	r2, [r3, #0]
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a4:	1c5a      	adds	r2, r3, #1
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	3b01      	subs	r3, #1
 80082b2:	b29a      	uxth	r2, r3
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082bc:	3b01      	subs	r3, #1
 80082be:	b29a      	uxth	r2, r3
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d034      	beq.n	8008338 <HAL_I2C_Master_Transmit+0x184>
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d130      	bne.n	8008338 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	9300      	str	r3, [sp, #0]
 80082da:	6a3b      	ldr	r3, [r7, #32]
 80082dc:	2200      	movs	r2, #0
 80082de:	2180      	movs	r1, #128	; 0x80
 80082e0:	68f8      	ldr	r0, [r7, #12]
 80082e2:	f001 f860 	bl	80093a6 <I2C_WaitOnFlagUntilTimeout>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d001      	beq.n	80082f0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	e04d      	b.n	800838c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	2bff      	cmp	r3, #255	; 0xff
 80082f8:	d90e      	bls.n	8008318 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	22ff      	movs	r2, #255	; 0xff
 80082fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008304:	b2da      	uxtb	r2, r3
 8008306:	8979      	ldrh	r1, [r7, #10]
 8008308:	2300      	movs	r3, #0
 800830a:	9300      	str	r3, [sp, #0]
 800830c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f001 f9f1 	bl	80096f8 <I2C_TransferConfig>
 8008316:	e00f      	b.n	8008338 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800831c:	b29a      	uxth	r2, r3
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008326:	b2da      	uxtb	r2, r3
 8008328:	8979      	ldrh	r1, [r7, #10]
 800832a:	2300      	movs	r3, #0
 800832c:	9300      	str	r3, [sp, #0]
 800832e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008332:	68f8      	ldr	r0, [r7, #12]
 8008334:	f001 f9e0 	bl	80096f8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800833c:	b29b      	uxth	r3, r3
 800833e:	2b00      	cmp	r3, #0
 8008340:	d19e      	bne.n	8008280 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008342:	697a      	ldr	r2, [r7, #20]
 8008344:	6a39      	ldr	r1, [r7, #32]
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	f001 f8ad 	bl	80094a6 <I2C_WaitOnSTOPFlagUntilTimeout>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d001      	beq.n	8008356 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	e01a      	b.n	800838c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2220      	movs	r2, #32
 800835c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	6859      	ldr	r1, [r3, #4]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	4b0b      	ldr	r3, [pc, #44]	; (8008398 <HAL_I2C_Master_Transmit+0x1e4>)
 800836a:	400b      	ands	r3, r1
 800836c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2220      	movs	r2, #32
 8008372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2200      	movs	r2, #0
 800837a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2200      	movs	r2, #0
 8008382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008386:	2300      	movs	r3, #0
 8008388:	e000      	b.n	800838c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800838a:	2302      	movs	r3, #2
  }
}
 800838c:	4618      	mov	r0, r3
 800838e:	3718      	adds	r7, #24
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}
 8008394:	80002000 	.word	0x80002000
 8008398:	fe00e800 	.word	0xfe00e800

0800839c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b088      	sub	sp, #32
 80083a0:	af02      	add	r7, sp, #8
 80083a2:	60f8      	str	r0, [r7, #12]
 80083a4:	4608      	mov	r0, r1
 80083a6:	4611      	mov	r1, r2
 80083a8:	461a      	mov	r2, r3
 80083aa:	4603      	mov	r3, r0
 80083ac:	817b      	strh	r3, [r7, #10]
 80083ae:	460b      	mov	r3, r1
 80083b0:	813b      	strh	r3, [r7, #8]
 80083b2:	4613      	mov	r3, r2
 80083b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	2b20      	cmp	r3, #32
 80083c0:	f040 80f9 	bne.w	80085b6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80083c4:	6a3b      	ldr	r3, [r7, #32]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d002      	beq.n	80083d0 <HAL_I2C_Mem_Write+0x34>
 80083ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d105      	bne.n	80083dc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083d6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	e0ed      	b.n	80085b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d101      	bne.n	80083ea <HAL_I2C_Mem_Write+0x4e>
 80083e6:	2302      	movs	r3, #2
 80083e8:	e0e6      	b.n	80085b8 <HAL_I2C_Mem_Write+0x21c>
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2201      	movs	r2, #1
 80083ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80083f2:	f7ff f8ad 	bl	8007550 <HAL_GetTick>
 80083f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	9300      	str	r3, [sp, #0]
 80083fc:	2319      	movs	r3, #25
 80083fe:	2201      	movs	r2, #1
 8008400:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008404:	68f8      	ldr	r0, [r7, #12]
 8008406:	f000 ffce 	bl	80093a6 <I2C_WaitOnFlagUntilTimeout>
 800840a:	4603      	mov	r3, r0
 800840c:	2b00      	cmp	r3, #0
 800840e:	d001      	beq.n	8008414 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008410:	2301      	movs	r3, #1
 8008412:	e0d1      	b.n	80085b8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2221      	movs	r2, #33	; 0x21
 8008418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2240      	movs	r2, #64	; 0x40
 8008420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2200      	movs	r2, #0
 8008428:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	6a3a      	ldr	r2, [r7, #32]
 800842e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008434:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2200      	movs	r2, #0
 800843a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800843c:	88f8      	ldrh	r0, [r7, #6]
 800843e:	893a      	ldrh	r2, [r7, #8]
 8008440:	8979      	ldrh	r1, [r7, #10]
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	9301      	str	r3, [sp, #4]
 8008446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008448:	9300      	str	r3, [sp, #0]
 800844a:	4603      	mov	r3, r0
 800844c:	68f8      	ldr	r0, [r7, #12]
 800844e:	f000 fb87 	bl	8008b60 <I2C_RequestMemoryWrite>
 8008452:	4603      	mov	r3, r0
 8008454:	2b00      	cmp	r3, #0
 8008456:	d005      	beq.n	8008464 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2200      	movs	r2, #0
 800845c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008460:	2301      	movs	r3, #1
 8008462:	e0a9      	b.n	80085b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008468:	b29b      	uxth	r3, r3
 800846a:	2bff      	cmp	r3, #255	; 0xff
 800846c:	d90e      	bls.n	800848c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	22ff      	movs	r2, #255	; 0xff
 8008472:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008478:	b2da      	uxtb	r2, r3
 800847a:	8979      	ldrh	r1, [r7, #10]
 800847c:	2300      	movs	r3, #0
 800847e:	9300      	str	r3, [sp, #0]
 8008480:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008484:	68f8      	ldr	r0, [r7, #12]
 8008486:	f001 f937 	bl	80096f8 <I2C_TransferConfig>
 800848a:	e00f      	b.n	80084ac <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008490:	b29a      	uxth	r2, r3
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800849a:	b2da      	uxtb	r2, r3
 800849c:	8979      	ldrh	r1, [r7, #10]
 800849e:	2300      	movs	r3, #0
 80084a0:	9300      	str	r3, [sp, #0]
 80084a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80084a6:	68f8      	ldr	r0, [r7, #12]
 80084a8:	f001 f926 	bl	80096f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80084ac:	697a      	ldr	r2, [r7, #20]
 80084ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084b0:	68f8      	ldr	r0, [r7, #12]
 80084b2:	f000 ffb8 	bl	8009426 <I2C_WaitOnTXISFlagUntilTimeout>
 80084b6:	4603      	mov	r3, r0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d001      	beq.n	80084c0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80084bc:	2301      	movs	r3, #1
 80084be:	e07b      	b.n	80085b8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c4:	781a      	ldrb	r2, [r3, #0]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d0:	1c5a      	adds	r2, r3, #1
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084da:	b29b      	uxth	r3, r3
 80084dc:	3b01      	subs	r3, #1
 80084de:	b29a      	uxth	r2, r3
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084e8:	3b01      	subs	r3, #1
 80084ea:	b29a      	uxth	r2, r3
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d034      	beq.n	8008564 <HAL_I2C_Mem_Write+0x1c8>
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d130      	bne.n	8008564 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	9300      	str	r3, [sp, #0]
 8008506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008508:	2200      	movs	r2, #0
 800850a:	2180      	movs	r1, #128	; 0x80
 800850c:	68f8      	ldr	r0, [r7, #12]
 800850e:	f000 ff4a 	bl	80093a6 <I2C_WaitOnFlagUntilTimeout>
 8008512:	4603      	mov	r3, r0
 8008514:	2b00      	cmp	r3, #0
 8008516:	d001      	beq.n	800851c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	e04d      	b.n	80085b8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008520:	b29b      	uxth	r3, r3
 8008522:	2bff      	cmp	r3, #255	; 0xff
 8008524:	d90e      	bls.n	8008544 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	22ff      	movs	r2, #255	; 0xff
 800852a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008530:	b2da      	uxtb	r2, r3
 8008532:	8979      	ldrh	r1, [r7, #10]
 8008534:	2300      	movs	r3, #0
 8008536:	9300      	str	r3, [sp, #0]
 8008538:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800853c:	68f8      	ldr	r0, [r7, #12]
 800853e:	f001 f8db 	bl	80096f8 <I2C_TransferConfig>
 8008542:	e00f      	b.n	8008564 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008548:	b29a      	uxth	r2, r3
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008552:	b2da      	uxtb	r2, r3
 8008554:	8979      	ldrh	r1, [r7, #10]
 8008556:	2300      	movs	r3, #0
 8008558:	9300      	str	r3, [sp, #0]
 800855a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800855e:	68f8      	ldr	r0, [r7, #12]
 8008560:	f001 f8ca 	bl	80096f8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008568:	b29b      	uxth	r3, r3
 800856a:	2b00      	cmp	r3, #0
 800856c:	d19e      	bne.n	80084ac <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800856e:	697a      	ldr	r2, [r7, #20]
 8008570:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f000 ff97 	bl	80094a6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008578:	4603      	mov	r3, r0
 800857a:	2b00      	cmp	r3, #0
 800857c:	d001      	beq.n	8008582 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	e01a      	b.n	80085b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	2220      	movs	r2, #32
 8008588:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	6859      	ldr	r1, [r3, #4]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	4b0a      	ldr	r3, [pc, #40]	; (80085c0 <HAL_I2C_Mem_Write+0x224>)
 8008596:	400b      	ands	r3, r1
 8008598:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2220      	movs	r2, #32
 800859e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2200      	movs	r2, #0
 80085a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80085b2:	2300      	movs	r3, #0
 80085b4:	e000      	b.n	80085b8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80085b6:	2302      	movs	r3, #2
  }
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3718      	adds	r7, #24
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	fe00e800 	.word	0xfe00e800

080085c4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b088      	sub	sp, #32
 80085c8:	af02      	add	r7, sp, #8
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	4608      	mov	r0, r1
 80085ce:	4611      	mov	r1, r2
 80085d0:	461a      	mov	r2, r3
 80085d2:	4603      	mov	r3, r0
 80085d4:	817b      	strh	r3, [r7, #10]
 80085d6:	460b      	mov	r3, r1
 80085d8:	813b      	strh	r3, [r7, #8]
 80085da:	4613      	mov	r3, r2
 80085dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085e4:	b2db      	uxtb	r3, r3
 80085e6:	2b20      	cmp	r3, #32
 80085e8:	f040 80fd 	bne.w	80087e6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80085ec:	6a3b      	ldr	r3, [r7, #32]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d002      	beq.n	80085f8 <HAL_I2C_Mem_Read+0x34>
 80085f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d105      	bne.n	8008604 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085fe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008600:	2301      	movs	r3, #1
 8008602:	e0f1      	b.n	80087e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800860a:	2b01      	cmp	r3, #1
 800860c:	d101      	bne.n	8008612 <HAL_I2C_Mem_Read+0x4e>
 800860e:	2302      	movs	r3, #2
 8008610:	e0ea      	b.n	80087e8 <HAL_I2C_Mem_Read+0x224>
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2201      	movs	r2, #1
 8008616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800861a:	f7fe ff99 	bl	8007550 <HAL_GetTick>
 800861e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	9300      	str	r3, [sp, #0]
 8008624:	2319      	movs	r3, #25
 8008626:	2201      	movs	r2, #1
 8008628:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800862c:	68f8      	ldr	r0, [r7, #12]
 800862e:	f000 feba 	bl	80093a6 <I2C_WaitOnFlagUntilTimeout>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d001      	beq.n	800863c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008638:	2301      	movs	r3, #1
 800863a:	e0d5      	b.n	80087e8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2222      	movs	r2, #34	; 0x22
 8008640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2240      	movs	r2, #64	; 0x40
 8008648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2200      	movs	r2, #0
 8008650:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	6a3a      	ldr	r2, [r7, #32]
 8008656:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800865c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2200      	movs	r2, #0
 8008662:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008664:	88f8      	ldrh	r0, [r7, #6]
 8008666:	893a      	ldrh	r2, [r7, #8]
 8008668:	8979      	ldrh	r1, [r7, #10]
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	9301      	str	r3, [sp, #4]
 800866e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008670:	9300      	str	r3, [sp, #0]
 8008672:	4603      	mov	r3, r0
 8008674:	68f8      	ldr	r0, [r7, #12]
 8008676:	f000 fac7 	bl	8008c08 <I2C_RequestMemoryRead>
 800867a:	4603      	mov	r3, r0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d005      	beq.n	800868c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2200      	movs	r2, #0
 8008684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008688:	2301      	movs	r3, #1
 800868a:	e0ad      	b.n	80087e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008690:	b29b      	uxth	r3, r3
 8008692:	2bff      	cmp	r3, #255	; 0xff
 8008694:	d90e      	bls.n	80086b4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	22ff      	movs	r2, #255	; 0xff
 800869a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086a0:	b2da      	uxtb	r2, r3
 80086a2:	8979      	ldrh	r1, [r7, #10]
 80086a4:	4b52      	ldr	r3, [pc, #328]	; (80087f0 <HAL_I2C_Mem_Read+0x22c>)
 80086a6:	9300      	str	r3, [sp, #0]
 80086a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f001 f823 	bl	80096f8 <I2C_TransferConfig>
 80086b2:	e00f      	b.n	80086d4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086b8:	b29a      	uxth	r2, r3
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086c2:	b2da      	uxtb	r2, r3
 80086c4:	8979      	ldrh	r1, [r7, #10]
 80086c6:	4b4a      	ldr	r3, [pc, #296]	; (80087f0 <HAL_I2C_Mem_Read+0x22c>)
 80086c8:	9300      	str	r3, [sp, #0]
 80086ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80086ce:	68f8      	ldr	r0, [r7, #12]
 80086d0:	f001 f812 	bl	80096f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	9300      	str	r3, [sp, #0]
 80086d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086da:	2200      	movs	r2, #0
 80086dc:	2104      	movs	r1, #4
 80086de:	68f8      	ldr	r0, [r7, #12]
 80086e0:	f000 fe61 	bl	80093a6 <I2C_WaitOnFlagUntilTimeout>
 80086e4:	4603      	mov	r3, r0
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d001      	beq.n	80086ee <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80086ea:	2301      	movs	r3, #1
 80086ec:	e07c      	b.n	80087e8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f8:	b2d2      	uxtb	r2, r2
 80086fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008700:	1c5a      	adds	r2, r3, #1
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800870a:	3b01      	subs	r3, #1
 800870c:	b29a      	uxth	r2, r3
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008716:	b29b      	uxth	r3, r3
 8008718:	3b01      	subs	r3, #1
 800871a:	b29a      	uxth	r2, r3
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008724:	b29b      	uxth	r3, r3
 8008726:	2b00      	cmp	r3, #0
 8008728:	d034      	beq.n	8008794 <HAL_I2C_Mem_Read+0x1d0>
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800872e:	2b00      	cmp	r3, #0
 8008730:	d130      	bne.n	8008794 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	9300      	str	r3, [sp, #0]
 8008736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008738:	2200      	movs	r2, #0
 800873a:	2180      	movs	r1, #128	; 0x80
 800873c:	68f8      	ldr	r0, [r7, #12]
 800873e:	f000 fe32 	bl	80093a6 <I2C_WaitOnFlagUntilTimeout>
 8008742:	4603      	mov	r3, r0
 8008744:	2b00      	cmp	r3, #0
 8008746:	d001      	beq.n	800874c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008748:	2301      	movs	r3, #1
 800874a:	e04d      	b.n	80087e8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008750:	b29b      	uxth	r3, r3
 8008752:	2bff      	cmp	r3, #255	; 0xff
 8008754:	d90e      	bls.n	8008774 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	22ff      	movs	r2, #255	; 0xff
 800875a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008760:	b2da      	uxtb	r2, r3
 8008762:	8979      	ldrh	r1, [r7, #10]
 8008764:	2300      	movs	r3, #0
 8008766:	9300      	str	r3, [sp, #0]
 8008768:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800876c:	68f8      	ldr	r0, [r7, #12]
 800876e:	f000 ffc3 	bl	80096f8 <I2C_TransferConfig>
 8008772:	e00f      	b.n	8008794 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008778:	b29a      	uxth	r2, r3
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008782:	b2da      	uxtb	r2, r3
 8008784:	8979      	ldrh	r1, [r7, #10]
 8008786:	2300      	movs	r3, #0
 8008788:	9300      	str	r3, [sp, #0]
 800878a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800878e:	68f8      	ldr	r0, [r7, #12]
 8008790:	f000 ffb2 	bl	80096f8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008798:	b29b      	uxth	r3, r3
 800879a:	2b00      	cmp	r3, #0
 800879c:	d19a      	bne.n	80086d4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800879e:	697a      	ldr	r2, [r7, #20]
 80087a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087a2:	68f8      	ldr	r0, [r7, #12]
 80087a4:	f000 fe7f 	bl	80094a6 <I2C_WaitOnSTOPFlagUntilTimeout>
 80087a8:	4603      	mov	r3, r0
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d001      	beq.n	80087b2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	e01a      	b.n	80087e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	2220      	movs	r2, #32
 80087b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	6859      	ldr	r1, [r3, #4]
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	4b0b      	ldr	r3, [pc, #44]	; (80087f4 <HAL_I2C_Mem_Read+0x230>)
 80087c6:	400b      	ands	r3, r1
 80087c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2220      	movs	r2, #32
 80087ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2200      	movs	r2, #0
 80087d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2200      	movs	r2, #0
 80087de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80087e2:	2300      	movs	r3, #0
 80087e4:	e000      	b.n	80087e8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80087e6:	2302      	movs	r3, #2
  }
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3718      	adds	r7, #24
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}
 80087f0:	80002400 	.word	0x80002400
 80087f4:	fe00e800 	.word	0xfe00e800

080087f8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	699b      	ldr	r3, [r3, #24]
 8008806:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008814:	2b00      	cmp	r3, #0
 8008816:	d005      	beq.n	8008824 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800881c:	68ba      	ldr	r2, [r7, #8]
 800881e:	68f9      	ldr	r1, [r7, #12]
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	4798      	blx	r3
  }
}
 8008824:	bf00      	nop
 8008826:	3710      	adds	r7, #16
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b086      	sub	sp, #24
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	699b      	ldr	r3, [r3, #24]
 800883a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	0a1b      	lsrs	r3, r3, #8
 8008848:	f003 0301 	and.w	r3, r3, #1
 800884c:	2b00      	cmp	r3, #0
 800884e:	d010      	beq.n	8008872 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	09db      	lsrs	r3, r3, #7
 8008854:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00a      	beq.n	8008872 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008860:	f043 0201 	orr.w	r2, r3, #1
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008870:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	0a9b      	lsrs	r3, r3, #10
 8008876:	f003 0301 	and.w	r3, r3, #1
 800887a:	2b00      	cmp	r3, #0
 800887c:	d010      	beq.n	80088a0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	09db      	lsrs	r3, r3, #7
 8008882:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008886:	2b00      	cmp	r3, #0
 8008888:	d00a      	beq.n	80088a0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800888e:	f043 0208 	orr.w	r2, r3, #8
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800889e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	0a5b      	lsrs	r3, r3, #9
 80088a4:	f003 0301 	and.w	r3, r3, #1
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d010      	beq.n	80088ce <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	09db      	lsrs	r3, r3, #7
 80088b0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d00a      	beq.n	80088ce <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088bc:	f043 0202 	orr.w	r2, r3, #2
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088cc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088d2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f003 030b 	and.w	r3, r3, #11
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d003      	beq.n	80088e6 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80088de:	68f9      	ldr	r1, [r7, #12]
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 fc27 	bl	8009134 <I2C_ITError>
  }
}
 80088e6:	bf00      	nop
 80088e8:	3718      	adds	r7, #24
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80088ee:	b480      	push	{r7}
 80088f0:	b083      	sub	sp, #12
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80088f6:	bf00      	nop
 80088f8:	370c      	adds	r7, #12
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr

08008902 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008902:	b480      	push	{r7}
 8008904:	b083      	sub	sp, #12
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800890a:	bf00      	nop
 800890c:	370c      	adds	r7, #12
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr

08008916 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008916:	b480      	push	{r7}
 8008918:	b083      	sub	sp, #12
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
 800891e:	460b      	mov	r3, r1
 8008920:	70fb      	strb	r3, [r7, #3]
 8008922:	4613      	mov	r3, r2
 8008924:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008926:	bf00      	nop
 8008928:	370c      	adds	r7, #12
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr

08008932 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008932:	b480      	push	{r7}
 8008934:	b083      	sub	sp, #12
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800893a:	bf00      	nop
 800893c:	370c      	adds	r7, #12
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr

08008946 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008946:	b480      	push	{r7}
 8008948:	b083      	sub	sp, #12
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800894e:	bf00      	nop
 8008950:	370c      	adds	r7, #12
 8008952:	46bd      	mov	sp, r7
 8008954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008958:	4770      	bx	lr

0800895a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800895a:	b580      	push	{r7, lr}
 800895c:	b086      	sub	sp, #24
 800895e:	af00      	add	r7, sp, #0
 8008960:	60f8      	str	r0, [r7, #12]
 8008962:	60b9      	str	r1, [r7, #8]
 8008964:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800896a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008976:	2b01      	cmp	r3, #1
 8008978:	d101      	bne.n	800897e <I2C_Slave_ISR_IT+0x24>
 800897a:	2302      	movs	r3, #2
 800897c:	e0ec      	b.n	8008b58 <I2C_Slave_ISR_IT+0x1fe>
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2201      	movs	r2, #1
 8008982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	095b      	lsrs	r3, r3, #5
 800898a:	f003 0301 	and.w	r3, r3, #1
 800898e:	2b00      	cmp	r3, #0
 8008990:	d009      	beq.n	80089a6 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	095b      	lsrs	r3, r3, #5
 8008996:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800899a:	2b00      	cmp	r3, #0
 800899c:	d003      	beq.n	80089a6 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800899e:	6939      	ldr	r1, [r7, #16]
 80089a0:	68f8      	ldr	r0, [r7, #12]
 80089a2:	f000 fa67 	bl	8008e74 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	091b      	lsrs	r3, r3, #4
 80089aa:	f003 0301 	and.w	r3, r3, #1
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d04d      	beq.n	8008a4e <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	091b      	lsrs	r3, r3, #4
 80089b6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d047      	beq.n	8008a4e <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d128      	bne.n	8008a1a <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	2b28      	cmp	r3, #40	; 0x28
 80089d2:	d108      	bne.n	80089e6 <I2C_Slave_ISR_IT+0x8c>
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80089da:	d104      	bne.n	80089e6 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80089dc:	6939      	ldr	r1, [r7, #16]
 80089de:	68f8      	ldr	r0, [r7, #12]
 80089e0:	f000 fb52 	bl	8009088 <I2C_ITListenCplt>
 80089e4:	e032      	b.n	8008a4c <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089ec:	b2db      	uxtb	r3, r3
 80089ee:	2b29      	cmp	r3, #41	; 0x29
 80089f0:	d10e      	bne.n	8008a10 <I2C_Slave_ISR_IT+0xb6>
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80089f8:	d00a      	beq.n	8008a10 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	2210      	movs	r2, #16
 8008a00:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008a02:	68f8      	ldr	r0, [r7, #12]
 8008a04:	f000 fc8d 	bl	8009322 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008a08:	68f8      	ldr	r0, [r7, #12]
 8008a0a:	f000 f9d5 	bl	8008db8 <I2C_ITSlaveSeqCplt>
 8008a0e:	e01d      	b.n	8008a4c <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2210      	movs	r2, #16
 8008a16:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8008a18:	e096      	b.n	8008b48 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	2210      	movs	r2, #16
 8008a20:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a26:	f043 0204 	orr.w	r2, r3, #4
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d004      	beq.n	8008a3e <I2C_Slave_ISR_IT+0xe4>
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008a3a:	f040 8085 	bne.w	8008b48 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a42:	4619      	mov	r1, r3
 8008a44:	68f8      	ldr	r0, [r7, #12]
 8008a46:	f000 fb75 	bl	8009134 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008a4a:	e07d      	b.n	8008b48 <I2C_Slave_ISR_IT+0x1ee>
 8008a4c:	e07c      	b.n	8008b48 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	089b      	lsrs	r3, r3, #2
 8008a52:	f003 0301 	and.w	r3, r3, #1
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d030      	beq.n	8008abc <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	089b      	lsrs	r3, r3, #2
 8008a5e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d02a      	beq.n	8008abc <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d018      	beq.n	8008aa2 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a7a:	b2d2      	uxtb	r2, r2
 8008a7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a82:	1c5a      	adds	r2, r3, #1
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a8c:	3b01      	subs	r3, #1
 8008a8e:	b29a      	uxth	r2, r3
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	3b01      	subs	r3, #1
 8008a9c:	b29a      	uxth	r2, r3
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d14f      	bne.n	8008b4c <I2C_Slave_ISR_IT+0x1f2>
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008ab2:	d04b      	beq.n	8008b4c <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8008ab4:	68f8      	ldr	r0, [r7, #12]
 8008ab6:	f000 f97f 	bl	8008db8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8008aba:	e047      	b.n	8008b4c <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	08db      	lsrs	r3, r3, #3
 8008ac0:	f003 0301 	and.w	r3, r3, #1
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d00a      	beq.n	8008ade <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	08db      	lsrs	r3, r3, #3
 8008acc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d004      	beq.n	8008ade <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008ad4:	6939      	ldr	r1, [r7, #16]
 8008ad6:	68f8      	ldr	r0, [r7, #12]
 8008ad8:	f000 f8ea 	bl	8008cb0 <I2C_ITAddrCplt>
 8008adc:	e037      	b.n	8008b4e <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	085b      	lsrs	r3, r3, #1
 8008ae2:	f003 0301 	and.w	r3, r3, #1
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d031      	beq.n	8008b4e <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	085b      	lsrs	r3, r3, #1
 8008aee:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d02b      	beq.n	8008b4e <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d018      	beq.n	8008b32 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b04:	781a      	ldrb	r2, [r3, #0]
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b10:	1c5a      	adds	r2, r3, #1
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	3b01      	subs	r3, #1
 8008b1e:	b29a      	uxth	r2, r3
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b28:	3b01      	subs	r3, #1
 8008b2a:	b29a      	uxth	r2, r3
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	851a      	strh	r2, [r3, #40]	; 0x28
 8008b30:	e00d      	b.n	8008b4e <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008b38:	d002      	beq.n	8008b40 <I2C_Slave_ISR_IT+0x1e6>
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d106      	bne.n	8008b4e <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008b40:	68f8      	ldr	r0, [r7, #12]
 8008b42:	f000 f939 	bl	8008db8 <I2C_ITSlaveSeqCplt>
 8008b46:	e002      	b.n	8008b4e <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8008b48:	bf00      	nop
 8008b4a:	e000      	b.n	8008b4e <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8008b4c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008b56:	2300      	movs	r3, #0
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3718      	adds	r7, #24
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b086      	sub	sp, #24
 8008b64:	af02      	add	r7, sp, #8
 8008b66:	60f8      	str	r0, [r7, #12]
 8008b68:	4608      	mov	r0, r1
 8008b6a:	4611      	mov	r1, r2
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	4603      	mov	r3, r0
 8008b70:	817b      	strh	r3, [r7, #10]
 8008b72:	460b      	mov	r3, r1
 8008b74:	813b      	strh	r3, [r7, #8]
 8008b76:	4613      	mov	r3, r2
 8008b78:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008b7a:	88fb      	ldrh	r3, [r7, #6]
 8008b7c:	b2da      	uxtb	r2, r3
 8008b7e:	8979      	ldrh	r1, [r7, #10]
 8008b80:	4b20      	ldr	r3, [pc, #128]	; (8008c04 <I2C_RequestMemoryWrite+0xa4>)
 8008b82:	9300      	str	r3, [sp, #0]
 8008b84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b88:	68f8      	ldr	r0, [r7, #12]
 8008b8a:	f000 fdb5 	bl	80096f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b8e:	69fa      	ldr	r2, [r7, #28]
 8008b90:	69b9      	ldr	r1, [r7, #24]
 8008b92:	68f8      	ldr	r0, [r7, #12]
 8008b94:	f000 fc47 	bl	8009426 <I2C_WaitOnTXISFlagUntilTimeout>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d001      	beq.n	8008ba2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e02c      	b.n	8008bfc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008ba2:	88fb      	ldrh	r3, [r7, #6]
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d105      	bne.n	8008bb4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008ba8:	893b      	ldrh	r3, [r7, #8]
 8008baa:	b2da      	uxtb	r2, r3
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	629a      	str	r2, [r3, #40]	; 0x28
 8008bb2:	e015      	b.n	8008be0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008bb4:	893b      	ldrh	r3, [r7, #8]
 8008bb6:	0a1b      	lsrs	r3, r3, #8
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	b2da      	uxtb	r2, r3
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008bc2:	69fa      	ldr	r2, [r7, #28]
 8008bc4:	69b9      	ldr	r1, [r7, #24]
 8008bc6:	68f8      	ldr	r0, [r7, #12]
 8008bc8:	f000 fc2d 	bl	8009426 <I2C_WaitOnTXISFlagUntilTimeout>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d001      	beq.n	8008bd6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e012      	b.n	8008bfc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008bd6:	893b      	ldrh	r3, [r7, #8]
 8008bd8:	b2da      	uxtb	r2, r3
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	9300      	str	r3, [sp, #0]
 8008be4:	69bb      	ldr	r3, [r7, #24]
 8008be6:	2200      	movs	r2, #0
 8008be8:	2180      	movs	r1, #128	; 0x80
 8008bea:	68f8      	ldr	r0, [r7, #12]
 8008bec:	f000 fbdb 	bl	80093a6 <I2C_WaitOnFlagUntilTimeout>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d001      	beq.n	8008bfa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e000      	b.n	8008bfc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008bfa:	2300      	movs	r3, #0
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3710      	adds	r7, #16
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}
 8008c04:	80002000 	.word	0x80002000

08008c08 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b086      	sub	sp, #24
 8008c0c:	af02      	add	r7, sp, #8
 8008c0e:	60f8      	str	r0, [r7, #12]
 8008c10:	4608      	mov	r0, r1
 8008c12:	4611      	mov	r1, r2
 8008c14:	461a      	mov	r2, r3
 8008c16:	4603      	mov	r3, r0
 8008c18:	817b      	strh	r3, [r7, #10]
 8008c1a:	460b      	mov	r3, r1
 8008c1c:	813b      	strh	r3, [r7, #8]
 8008c1e:	4613      	mov	r3, r2
 8008c20:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008c22:	88fb      	ldrh	r3, [r7, #6]
 8008c24:	b2da      	uxtb	r2, r3
 8008c26:	8979      	ldrh	r1, [r7, #10]
 8008c28:	4b20      	ldr	r3, [pc, #128]	; (8008cac <I2C_RequestMemoryRead+0xa4>)
 8008c2a:	9300      	str	r3, [sp, #0]
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	68f8      	ldr	r0, [r7, #12]
 8008c30:	f000 fd62 	bl	80096f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c34:	69fa      	ldr	r2, [r7, #28]
 8008c36:	69b9      	ldr	r1, [r7, #24]
 8008c38:	68f8      	ldr	r0, [r7, #12]
 8008c3a:	f000 fbf4 	bl	8009426 <I2C_WaitOnTXISFlagUntilTimeout>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d001      	beq.n	8008c48 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008c44:	2301      	movs	r3, #1
 8008c46:	e02c      	b.n	8008ca2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008c48:	88fb      	ldrh	r3, [r7, #6]
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	d105      	bne.n	8008c5a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008c4e:	893b      	ldrh	r3, [r7, #8]
 8008c50:	b2da      	uxtb	r2, r3
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	629a      	str	r2, [r3, #40]	; 0x28
 8008c58:	e015      	b.n	8008c86 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008c5a:	893b      	ldrh	r3, [r7, #8]
 8008c5c:	0a1b      	lsrs	r3, r3, #8
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	b2da      	uxtb	r2, r3
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c68:	69fa      	ldr	r2, [r7, #28]
 8008c6a:	69b9      	ldr	r1, [r7, #24]
 8008c6c:	68f8      	ldr	r0, [r7, #12]
 8008c6e:	f000 fbda 	bl	8009426 <I2C_WaitOnTXISFlagUntilTimeout>
 8008c72:	4603      	mov	r3, r0
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d001      	beq.n	8008c7c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	e012      	b.n	8008ca2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008c7c:	893b      	ldrh	r3, [r7, #8]
 8008c7e:	b2da      	uxtb	r2, r3
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	9300      	str	r3, [sp, #0]
 8008c8a:	69bb      	ldr	r3, [r7, #24]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	2140      	movs	r1, #64	; 0x40
 8008c90:	68f8      	ldr	r0, [r7, #12]
 8008c92:	f000 fb88 	bl	80093a6 <I2C_WaitOnFlagUntilTimeout>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d001      	beq.n	8008ca0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	e000      	b.n	8008ca2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3710      	adds	r7, #16
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	80002000 	.word	0x80002000

08008cb0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008cc6:	2b28      	cmp	r3, #40	; 0x28
 8008cc8:	d16a      	bne.n	8008da0 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	699b      	ldr	r3, [r3, #24]
 8008cd0:	0c1b      	lsrs	r3, r3, #16
 8008cd2:	b2db      	uxtb	r3, r3
 8008cd4:	f003 0301 	and.w	r3, r3, #1
 8008cd8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	699b      	ldr	r3, [r3, #24]
 8008ce0:	0c1b      	lsrs	r3, r3, #16
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008ce8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	689b      	ldr	r3, [r3, #8]
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008cf6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	68db      	ldr	r3, [r3, #12]
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008d04:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	68db      	ldr	r3, [r3, #12]
 8008d0a:	2b02      	cmp	r3, #2
 8008d0c:	d138      	bne.n	8008d80 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8008d0e:	897b      	ldrh	r3, [r7, #10]
 8008d10:	09db      	lsrs	r3, r3, #7
 8008d12:	b29a      	uxth	r2, r3
 8008d14:	89bb      	ldrh	r3, [r7, #12]
 8008d16:	4053      	eors	r3, r2
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	f003 0306 	and.w	r3, r3, #6
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d11c      	bne.n	8008d5c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8008d22:	897b      	ldrh	r3, [r7, #10]
 8008d24:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d2a:	1c5a      	adds	r2, r3, #1
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d34:	2b02      	cmp	r3, #2
 8008d36:	d13b      	bne.n	8008db0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	2208      	movs	r2, #8
 8008d44:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008d4e:	89ba      	ldrh	r2, [r7, #12]
 8008d50:	7bfb      	ldrb	r3, [r7, #15]
 8008d52:	4619      	mov	r1, r3
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f7ff fdde 	bl	8008916 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008d5a:	e029      	b.n	8008db0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8008d5c:	893b      	ldrh	r3, [r7, #8]
 8008d5e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008d60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 fcf9 	bl	800975c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008d72:	89ba      	ldrh	r2, [r7, #12]
 8008d74:	7bfb      	ldrb	r3, [r7, #15]
 8008d76:	4619      	mov	r1, r3
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f7ff fdcc 	bl	8008916 <HAL_I2C_AddrCallback>
}
 8008d7e:	e017      	b.n	8008db0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008d80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 fce9 	bl	800975c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008d92:	89ba      	ldrh	r2, [r7, #12]
 8008d94:	7bfb      	ldrb	r3, [r7, #15]
 8008d96:	4619      	mov	r1, r3
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f7ff fdbc 	bl	8008916 <HAL_I2C_AddrCallback>
}
 8008d9e:	e007      	b.n	8008db0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2208      	movs	r2, #8
 8008da6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8008db0:	bf00      	nop
 8008db2:	3710      	adds	r7, #16
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	0b9b      	lsrs	r3, r3, #14
 8008dd4:	f003 0301 	and.w	r3, r3, #1
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d008      	beq.n	8008dee <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008dea:	601a      	str	r2, [r3, #0]
 8008dec:	e00d      	b.n	8008e0a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	0bdb      	lsrs	r3, r3, #15
 8008df2:	f003 0301 	and.w	r3, r3, #1
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d007      	beq.n	8008e0a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008e08:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	2b29      	cmp	r3, #41	; 0x29
 8008e14:	d112      	bne.n	8008e3c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2228      	movs	r2, #40	; 0x28
 8008e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2221      	movs	r2, #33	; 0x21
 8008e22:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008e24:	2101      	movs	r1, #1
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 fc98 	bl	800975c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f7ff fd5a 	bl	80088ee <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008e3a:	e017      	b.n	8008e6c <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	2b2a      	cmp	r3, #42	; 0x2a
 8008e46:	d111      	bne.n	8008e6c <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2228      	movs	r2, #40	; 0x28
 8008e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2222      	movs	r2, #34	; 0x22
 8008e54:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008e56:	2102      	movs	r1, #2
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 fc7f 	bl	800975c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f7ff fd4b 	bl	8008902 <HAL_I2C_SlaveRxCpltCallback>
}
 8008e6c:	bf00      	nop
 8008e6e:	3710      	adds	r7, #16
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b086      	sub	sp, #24
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e90:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	2220      	movs	r2, #32
 8008e98:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008e9a:	7bfb      	ldrb	r3, [r7, #15]
 8008e9c:	2b21      	cmp	r3, #33	; 0x21
 8008e9e:	d002      	beq.n	8008ea6 <I2C_ITSlaveCplt+0x32>
 8008ea0:	7bfb      	ldrb	r3, [r7, #15]
 8008ea2:	2b29      	cmp	r3, #41	; 0x29
 8008ea4:	d108      	bne.n	8008eb8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8008ea6:	f248 0101 	movw	r1, #32769	; 0x8001
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 fc56 	bl	800975c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2221      	movs	r2, #33	; 0x21
 8008eb4:	631a      	str	r2, [r3, #48]	; 0x30
 8008eb6:	e00d      	b.n	8008ed4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008eb8:	7bfb      	ldrb	r3, [r7, #15]
 8008eba:	2b22      	cmp	r3, #34	; 0x22
 8008ebc:	d002      	beq.n	8008ec4 <I2C_ITSlaveCplt+0x50>
 8008ebe:	7bfb      	ldrb	r3, [r7, #15]
 8008ec0:	2b2a      	cmp	r3, #42	; 0x2a
 8008ec2:	d107      	bne.n	8008ed4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8008ec4:	f248 0102 	movw	r1, #32770	; 0x8002
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 fc47 	bl	800975c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2222      	movs	r2, #34	; 0x22
 8008ed2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	685a      	ldr	r2, [r3, #4]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ee2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	6859      	ldr	r1, [r3, #4]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	4b64      	ldr	r3, [pc, #400]	; (8009080 <I2C_ITSlaveCplt+0x20c>)
 8008ef0:	400b      	ands	r3, r1
 8008ef2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 fa14 	bl	8009322 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	0b9b      	lsrs	r3, r3, #14
 8008efe:	f003 0301 	and.w	r3, r3, #1
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d013      	beq.n	8008f2e <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008f14:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d020      	beq.n	8008f60 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	b29a      	uxth	r2, r3
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008f2c:	e018      	b.n	8008f60 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	0bdb      	lsrs	r3, r3, #15
 8008f32:	f003 0301 	and.w	r3, r3, #1
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d012      	beq.n	8008f60 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008f48:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d006      	beq.n	8008f60 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	b29a      	uxth	r2, r3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	089b      	lsrs	r3, r3, #2
 8008f64:	f003 0301 	and.w	r3, r3, #1
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d020      	beq.n	8008fae <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	f023 0304 	bic.w	r3, r3, #4
 8008f72:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7e:	b2d2      	uxtb	r2, r2
 8008f80:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f86:	1c5a      	adds	r2, r3, #1
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d00c      	beq.n	8008fae <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f98:	3b01      	subs	r3, #1
 8008f9a:	b29a      	uxth	r2, r3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	3b01      	subs	r3, #1
 8008fa8:	b29a      	uxth	r2, r3
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d005      	beq.n	8008fc4 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fbc:	f043 0204 	orr.w	r2, r3, #4
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d010      	beq.n	8008ffc <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fde:	4619      	mov	r1, r3
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f000 f8a7 	bl	8009134 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fec:	b2db      	uxtb	r3, r3
 8008fee:	2b28      	cmp	r3, #40	; 0x28
 8008ff0:	d141      	bne.n	8009076 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8008ff2:	6979      	ldr	r1, [r7, #20]
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f000 f847 	bl	8009088 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008ffa:	e03c      	b.n	8009076 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009000:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009004:	d014      	beq.n	8009030 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f7ff fed6 	bl	8008db8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	4a1d      	ldr	r2, [pc, #116]	; (8009084 <I2C_ITSlaveCplt+0x210>)
 8009010:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2220      	movs	r2, #32
 8009016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2200      	movs	r2, #0
 800901e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2200      	movs	r2, #0
 8009024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f7ff fc82 	bl	8008932 <HAL_I2C_ListenCpltCallback>
}
 800902e:	e022      	b.n	8009076 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009036:	b2db      	uxtb	r3, r3
 8009038:	2b22      	cmp	r3, #34	; 0x22
 800903a:	d10e      	bne.n	800905a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2220      	movs	r2, #32
 8009040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2200      	movs	r2, #0
 8009048:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2200      	movs	r2, #0
 800904e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f7ff fc55 	bl	8008902 <HAL_I2C_SlaveRxCpltCallback>
}
 8009058:	e00d      	b.n	8009076 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2220      	movs	r2, #32
 800905e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f7ff fc3c 	bl	80088ee <HAL_I2C_SlaveTxCpltCallback>
}
 8009076:	bf00      	nop
 8009078:	3718      	adds	r7, #24
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
 800907e:	bf00      	nop
 8009080:	fe00e800 	.word	0xfe00e800
 8009084:	ffff0000 	.word	0xffff0000

08009088 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b082      	sub	sp, #8
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	4a26      	ldr	r2, [pc, #152]	; (8009130 <I2C_ITListenCplt+0xa8>)
 8009096:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2220      	movs	r2, #32
 80090a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	089b      	lsrs	r3, r3, #2
 80090b8:	f003 0301 	and.w	r3, r3, #1
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d022      	beq.n	8009106 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ca:	b2d2      	uxtb	r2, r2
 80090cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d2:	1c5a      	adds	r2, r3, #1
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d012      	beq.n	8009106 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090e4:	3b01      	subs	r3, #1
 80090e6:	b29a      	uxth	r2, r3
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	3b01      	subs	r3, #1
 80090f4:	b29a      	uxth	r2, r3
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090fe:	f043 0204 	orr.w	r2, r3, #4
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009106:	f248 0103 	movw	r1, #32771	; 0x8003
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 fb26 	bl	800975c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	2210      	movs	r2, #16
 8009116:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2200      	movs	r2, #0
 800911c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f7ff fc06 	bl	8008932 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8009126:	bf00      	nop
 8009128:	3708      	adds	r7, #8
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}
 800912e:	bf00      	nop
 8009130:	ffff0000 	.word	0xffff0000

08009134 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b084      	sub	sp, #16
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009144:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2200      	movs	r2, #0
 800914a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	4a5d      	ldr	r2, [pc, #372]	; (80092c8 <I2C_ITError+0x194>)
 8009152:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	431a      	orrs	r2, r3
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8009166:	7bfb      	ldrb	r3, [r7, #15]
 8009168:	2b28      	cmp	r3, #40	; 0x28
 800916a:	d005      	beq.n	8009178 <I2C_ITError+0x44>
 800916c:	7bfb      	ldrb	r3, [r7, #15]
 800916e:	2b29      	cmp	r3, #41	; 0x29
 8009170:	d002      	beq.n	8009178 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8009172:	7bfb      	ldrb	r3, [r7, #15]
 8009174:	2b2a      	cmp	r3, #42	; 0x2a
 8009176:	d10b      	bne.n	8009190 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009178:	2103      	movs	r1, #3
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 faee 	bl	800975c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2228      	movs	r2, #40	; 0x28
 8009184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	4a50      	ldr	r2, [pc, #320]	; (80092cc <I2C_ITError+0x198>)
 800918c:	635a      	str	r2, [r3, #52]	; 0x34
 800918e:	e011      	b.n	80091b4 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009190:	f248 0103 	movw	r1, #32771	; 0x8003
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 fae1 	bl	800975c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	2b60      	cmp	r3, #96	; 0x60
 80091a4:	d003      	beq.n	80091ae <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2220      	movs	r2, #32
 80091aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2200      	movs	r2, #0
 80091b2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091b8:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d039      	beq.n	8009236 <I2C_ITError+0x102>
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	2b11      	cmp	r3, #17
 80091c6:	d002      	beq.n	80091ce <I2C_ITError+0x9a>
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	2b21      	cmp	r3, #33	; 0x21
 80091cc:	d133      	bne.n	8009236 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091dc:	d107      	bne.n	80091ee <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80091ec:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f2:	4618      	mov	r0, r3
 80091f4:	f7fe fd04 	bl	8007c00 <HAL_DMA_GetState>
 80091f8:	4603      	mov	r3, r0
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d017      	beq.n	800922e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009202:	4a33      	ldr	r2, [pc, #204]	; (80092d0 <I2C_ITError+0x19c>)
 8009204:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009212:	4618      	mov	r0, r3
 8009214:	f7fe fc04 	bl	8007a20 <HAL_DMA_Abort_IT>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d04d      	beq.n	80092ba <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009228:	4610      	mov	r0, r2
 800922a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800922c:	e045      	b.n	80092ba <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 f850 	bl	80092d4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009234:	e041      	b.n	80092ba <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800923a:	2b00      	cmp	r3, #0
 800923c:	d039      	beq.n	80092b2 <I2C_ITError+0x17e>
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	2b12      	cmp	r3, #18
 8009242:	d002      	beq.n	800924a <I2C_ITError+0x116>
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	2b22      	cmp	r3, #34	; 0x22
 8009248:	d133      	bne.n	80092b2 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009254:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009258:	d107      	bne.n	800926a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009268:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800926e:	4618      	mov	r0, r3
 8009270:	f7fe fcc6 	bl	8007c00 <HAL_DMA_GetState>
 8009274:	4603      	mov	r3, r0
 8009276:	2b01      	cmp	r3, #1
 8009278:	d017      	beq.n	80092aa <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800927e:	4a14      	ldr	r2, [pc, #80]	; (80092d0 <I2C_ITError+0x19c>)
 8009280:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2200      	movs	r2, #0
 8009286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800928e:	4618      	mov	r0, r3
 8009290:	f7fe fbc6 	bl	8007a20 <HAL_DMA_Abort_IT>
 8009294:	4603      	mov	r3, r0
 8009296:	2b00      	cmp	r3, #0
 8009298:	d011      	beq.n	80092be <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800929e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80092a4:	4610      	mov	r0, r2
 80092a6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80092a8:	e009      	b.n	80092be <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 f812 	bl	80092d4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80092b0:	e005      	b.n	80092be <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 f80e 	bl	80092d4 <I2C_TreatErrorCallback>
  }
}
 80092b8:	e002      	b.n	80092c0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80092ba:	bf00      	nop
 80092bc:	e000      	b.n	80092c0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80092be:	bf00      	nop
}
 80092c0:	bf00      	nop
 80092c2:	3710      	adds	r7, #16
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	ffff0000 	.word	0xffff0000
 80092cc:	0800895b 	.word	0x0800895b
 80092d0:	0800936b 	.word	0x0800936b

080092d4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b082      	sub	sp, #8
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	2b60      	cmp	r3, #96	; 0x60
 80092e6:	d10e      	bne.n	8009306 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2220      	movs	r2, #32
 80092ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2200      	movs	r2, #0
 80092f4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2200      	movs	r2, #0
 80092fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f7ff fb21 	bl	8008946 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009304:	e009      	b.n	800931a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f7fa fa3d 	bl	8003794 <HAL_I2C_ErrorCallback>
}
 800931a:	bf00      	nop
 800931c:	3708      	adds	r7, #8
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}

08009322 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009322:	b480      	push	{r7}
 8009324:	b083      	sub	sp, #12
 8009326:	af00      	add	r7, sp, #0
 8009328:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	699b      	ldr	r3, [r3, #24]
 8009330:	f003 0302 	and.w	r3, r3, #2
 8009334:	2b02      	cmp	r3, #2
 8009336:	d103      	bne.n	8009340 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	2200      	movs	r2, #0
 800933e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	699b      	ldr	r3, [r3, #24]
 8009346:	f003 0301 	and.w	r3, r3, #1
 800934a:	2b01      	cmp	r3, #1
 800934c:	d007      	beq.n	800935e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	699a      	ldr	r2, [r3, #24]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f042 0201 	orr.w	r2, r2, #1
 800935c:	619a      	str	r2, [r3, #24]
  }
}
 800935e:	bf00      	nop
 8009360:	370c      	adds	r7, #12
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr

0800936a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800936a:	b580      	push	{r7, lr}
 800936c:	b084      	sub	sp, #16
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009376:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800937c:	2b00      	cmp	r3, #0
 800937e:	d003      	beq.n	8009388 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009384:	2200      	movs	r2, #0
 8009386:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800938c:	2b00      	cmp	r3, #0
 800938e:	d003      	beq.n	8009398 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009394:	2200      	movs	r2, #0
 8009396:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8009398:	68f8      	ldr	r0, [r7, #12]
 800939a:	f7ff ff9b 	bl	80092d4 <I2C_TreatErrorCallback>
}
 800939e:	bf00      	nop
 80093a0:	3710      	adds	r7, #16
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}

080093a6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b084      	sub	sp, #16
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	60f8      	str	r0, [r7, #12]
 80093ae:	60b9      	str	r1, [r7, #8]
 80093b0:	603b      	str	r3, [r7, #0]
 80093b2:	4613      	mov	r3, r2
 80093b4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80093b6:	e022      	b.n	80093fe <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093be:	d01e      	beq.n	80093fe <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093c0:	f7fe f8c6 	bl	8007550 <HAL_GetTick>
 80093c4:	4602      	mov	r2, r0
 80093c6:	69bb      	ldr	r3, [r7, #24]
 80093c8:	1ad3      	subs	r3, r2, r3
 80093ca:	683a      	ldr	r2, [r7, #0]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d302      	bcc.n	80093d6 <I2C_WaitOnFlagUntilTimeout+0x30>
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d113      	bne.n	80093fe <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093da:	f043 0220 	orr.w	r2, r3, #32
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2220      	movs	r2, #32
 80093e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2200      	movs	r2, #0
 80093ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2200      	movs	r2, #0
 80093f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80093fa:	2301      	movs	r3, #1
 80093fc:	e00f      	b.n	800941e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	699a      	ldr	r2, [r3, #24]
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	4013      	ands	r3, r2
 8009408:	68ba      	ldr	r2, [r7, #8]
 800940a:	429a      	cmp	r2, r3
 800940c:	bf0c      	ite	eq
 800940e:	2301      	moveq	r3, #1
 8009410:	2300      	movne	r3, #0
 8009412:	b2db      	uxtb	r3, r3
 8009414:	461a      	mov	r2, r3
 8009416:	79fb      	ldrb	r3, [r7, #7]
 8009418:	429a      	cmp	r2, r3
 800941a:	d0cd      	beq.n	80093b8 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800941c:	2300      	movs	r3, #0
}
 800941e:	4618      	mov	r0, r3
 8009420:	3710      	adds	r7, #16
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}

08009426 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009426:	b580      	push	{r7, lr}
 8009428:	b084      	sub	sp, #16
 800942a:	af00      	add	r7, sp, #0
 800942c:	60f8      	str	r0, [r7, #12]
 800942e:	60b9      	str	r1, [r7, #8]
 8009430:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009432:	e02c      	b.n	800948e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009434:	687a      	ldr	r2, [r7, #4]
 8009436:	68b9      	ldr	r1, [r7, #8]
 8009438:	68f8      	ldr	r0, [r7, #12]
 800943a:	f000 f871 	bl	8009520 <I2C_IsErrorOccurred>
 800943e:	4603      	mov	r3, r0
 8009440:	2b00      	cmp	r3, #0
 8009442:	d001      	beq.n	8009448 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009444:	2301      	movs	r3, #1
 8009446:	e02a      	b.n	800949e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800944e:	d01e      	beq.n	800948e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009450:	f7fe f87e 	bl	8007550 <HAL_GetTick>
 8009454:	4602      	mov	r2, r0
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	1ad3      	subs	r3, r2, r3
 800945a:	68ba      	ldr	r2, [r7, #8]
 800945c:	429a      	cmp	r2, r3
 800945e:	d302      	bcc.n	8009466 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d113      	bne.n	800948e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800946a:	f043 0220 	orr.w	r2, r3, #32
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2220      	movs	r2, #32
 8009476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2200      	movs	r2, #0
 800947e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2200      	movs	r2, #0
 8009486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800948a:	2301      	movs	r3, #1
 800948c:	e007      	b.n	800949e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	699b      	ldr	r3, [r3, #24]
 8009494:	f003 0302 	and.w	r3, r3, #2
 8009498:	2b02      	cmp	r3, #2
 800949a:	d1cb      	bne.n	8009434 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800949c:	2300      	movs	r3, #0
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3710      	adds	r7, #16
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}

080094a6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80094a6:	b580      	push	{r7, lr}
 80094a8:	b084      	sub	sp, #16
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	60f8      	str	r0, [r7, #12]
 80094ae:	60b9      	str	r1, [r7, #8]
 80094b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80094b2:	e028      	b.n	8009506 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	68b9      	ldr	r1, [r7, #8]
 80094b8:	68f8      	ldr	r0, [r7, #12]
 80094ba:	f000 f831 	bl	8009520 <I2C_IsErrorOccurred>
 80094be:	4603      	mov	r3, r0
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d001      	beq.n	80094c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80094c4:	2301      	movs	r3, #1
 80094c6:	e026      	b.n	8009516 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094c8:	f7fe f842 	bl	8007550 <HAL_GetTick>
 80094cc:	4602      	mov	r2, r0
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	1ad3      	subs	r3, r2, r3
 80094d2:	68ba      	ldr	r2, [r7, #8]
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d302      	bcc.n	80094de <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d113      	bne.n	8009506 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094e2:	f043 0220 	orr.w	r2, r3, #32
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2220      	movs	r2, #32
 80094ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2200      	movs	r2, #0
 80094f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2200      	movs	r2, #0
 80094fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009502:	2301      	movs	r3, #1
 8009504:	e007      	b.n	8009516 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	699b      	ldr	r3, [r3, #24]
 800950c:	f003 0320 	and.w	r3, r3, #32
 8009510:	2b20      	cmp	r3, #32
 8009512:	d1cf      	bne.n	80094b4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
	...

08009520 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b08a      	sub	sp, #40	; 0x28
 8009524:	af00      	add	r7, sp, #0
 8009526:	60f8      	str	r0, [r7, #12]
 8009528:	60b9      	str	r1, [r7, #8]
 800952a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800952c:	2300      	movs	r3, #0
 800952e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	699b      	ldr	r3, [r3, #24]
 8009538:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800953a:	2300      	movs	r3, #0
 800953c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009542:	69bb      	ldr	r3, [r7, #24]
 8009544:	f003 0310 	and.w	r3, r3, #16
 8009548:	2b00      	cmp	r3, #0
 800954a:	d075      	beq.n	8009638 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	2210      	movs	r2, #16
 8009552:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009554:	e056      	b.n	8009604 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800955c:	d052      	beq.n	8009604 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800955e:	f7fd fff7 	bl	8007550 <HAL_GetTick>
 8009562:	4602      	mov	r2, r0
 8009564:	69fb      	ldr	r3, [r7, #28]
 8009566:	1ad3      	subs	r3, r2, r3
 8009568:	68ba      	ldr	r2, [r7, #8]
 800956a:	429a      	cmp	r2, r3
 800956c:	d302      	bcc.n	8009574 <I2C_IsErrorOccurred+0x54>
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d147      	bne.n	8009604 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800957e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009586:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	699b      	ldr	r3, [r3, #24]
 800958e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009592:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009596:	d12e      	bne.n	80095f6 <I2C_IsErrorOccurred+0xd6>
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800959e:	d02a      	beq.n	80095f6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80095a0:	7cfb      	ldrb	r3, [r7, #19]
 80095a2:	2b20      	cmp	r3, #32
 80095a4:	d027      	beq.n	80095f6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	685a      	ldr	r2, [r3, #4]
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80095b4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80095b6:	f7fd ffcb 	bl	8007550 <HAL_GetTick>
 80095ba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80095bc:	e01b      	b.n	80095f6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80095be:	f7fd ffc7 	bl	8007550 <HAL_GetTick>
 80095c2:	4602      	mov	r2, r0
 80095c4:	69fb      	ldr	r3, [r7, #28]
 80095c6:	1ad3      	subs	r3, r2, r3
 80095c8:	2b19      	cmp	r3, #25
 80095ca:	d914      	bls.n	80095f6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095d0:	f043 0220 	orr.w	r2, r3, #32
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	2220      	movs	r2, #32
 80095dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	2200      	movs	r2, #0
 80095e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2200      	movs	r2, #0
 80095ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80095f0:	2301      	movs	r3, #1
 80095f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	699b      	ldr	r3, [r3, #24]
 80095fc:	f003 0320 	and.w	r3, r3, #32
 8009600:	2b20      	cmp	r3, #32
 8009602:	d1dc      	bne.n	80095be <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	699b      	ldr	r3, [r3, #24]
 800960a:	f003 0320 	and.w	r3, r3, #32
 800960e:	2b20      	cmp	r3, #32
 8009610:	d003      	beq.n	800961a <I2C_IsErrorOccurred+0xfa>
 8009612:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009616:	2b00      	cmp	r3, #0
 8009618:	d09d      	beq.n	8009556 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800961a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800961e:	2b00      	cmp	r3, #0
 8009620:	d103      	bne.n	800962a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	2220      	movs	r2, #32
 8009628:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800962a:	6a3b      	ldr	r3, [r7, #32]
 800962c:	f043 0304 	orr.w	r3, r3, #4
 8009630:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009632:	2301      	movs	r3, #1
 8009634:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	699b      	ldr	r3, [r3, #24]
 800963e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009640:	69bb      	ldr	r3, [r7, #24]
 8009642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009646:	2b00      	cmp	r3, #0
 8009648:	d00b      	beq.n	8009662 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800964a:	6a3b      	ldr	r3, [r7, #32]
 800964c:	f043 0301 	orr.w	r3, r3, #1
 8009650:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f44f 7280 	mov.w	r2, #256	; 0x100
 800965a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800965c:	2301      	movs	r3, #1
 800965e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009662:	69bb      	ldr	r3, [r7, #24]
 8009664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009668:	2b00      	cmp	r3, #0
 800966a:	d00b      	beq.n	8009684 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800966c:	6a3b      	ldr	r3, [r7, #32]
 800966e:	f043 0308 	orr.w	r3, r3, #8
 8009672:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800967c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800967e:	2301      	movs	r3, #1
 8009680:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009684:	69bb      	ldr	r3, [r7, #24]
 8009686:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800968a:	2b00      	cmp	r3, #0
 800968c:	d00b      	beq.n	80096a6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800968e:	6a3b      	ldr	r3, [r7, #32]
 8009690:	f043 0302 	orr.w	r3, r3, #2
 8009694:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800969e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80096a0:	2301      	movs	r3, #1
 80096a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80096a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d01c      	beq.n	80096e8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80096ae:	68f8      	ldr	r0, [r7, #12]
 80096b0:	f7ff fe37 	bl	8009322 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	6859      	ldr	r1, [r3, #4]
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	4b0d      	ldr	r3, [pc, #52]	; (80096f4 <I2C_IsErrorOccurred+0x1d4>)
 80096c0:	400b      	ands	r3, r1
 80096c2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80096c8:	6a3b      	ldr	r3, [r7, #32]
 80096ca:	431a      	orrs	r2, r3
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	2220      	movs	r2, #32
 80096d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2200      	movs	r2, #0
 80096dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2200      	movs	r2, #0
 80096e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80096e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3728      	adds	r7, #40	; 0x28
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}
 80096f4:	fe00e800 	.word	0xfe00e800

080096f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b087      	sub	sp, #28
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	60f8      	str	r0, [r7, #12]
 8009700:	607b      	str	r3, [r7, #4]
 8009702:	460b      	mov	r3, r1
 8009704:	817b      	strh	r3, [r7, #10]
 8009706:	4613      	mov	r3, r2
 8009708:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800970a:	897b      	ldrh	r3, [r7, #10]
 800970c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009710:	7a7b      	ldrb	r3, [r7, #9]
 8009712:	041b      	lsls	r3, r3, #16
 8009714:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009718:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800971e:	6a3b      	ldr	r3, [r7, #32]
 8009720:	4313      	orrs	r3, r2
 8009722:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009726:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	685a      	ldr	r2, [r3, #4]
 800972e:	6a3b      	ldr	r3, [r7, #32]
 8009730:	0d5b      	lsrs	r3, r3, #21
 8009732:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009736:	4b08      	ldr	r3, [pc, #32]	; (8009758 <I2C_TransferConfig+0x60>)
 8009738:	430b      	orrs	r3, r1
 800973a:	43db      	mvns	r3, r3
 800973c:	ea02 0103 	and.w	r1, r2, r3
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	697a      	ldr	r2, [r7, #20]
 8009746:	430a      	orrs	r2, r1
 8009748:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800974a:	bf00      	nop
 800974c:	371c      	adds	r7, #28
 800974e:	46bd      	mov	sp, r7
 8009750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009754:	4770      	bx	lr
 8009756:	bf00      	nop
 8009758:	03ff63ff 	.word	0x03ff63ff

0800975c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800975c:	b480      	push	{r7}
 800975e:	b085      	sub	sp, #20
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	460b      	mov	r3, r1
 8009766:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009768:	2300      	movs	r3, #0
 800976a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800976c:	887b      	ldrh	r3, [r7, #2]
 800976e:	f003 0301 	and.w	r3, r3, #1
 8009772:	2b00      	cmp	r3, #0
 8009774:	d00f      	beq.n	8009796 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800977c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009784:	b2db      	uxtb	r3, r3
 8009786:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800978a:	2b28      	cmp	r3, #40	; 0x28
 800978c:	d003      	beq.n	8009796 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8009794:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009796:	887b      	ldrh	r3, [r7, #2]
 8009798:	f003 0302 	and.w	r3, r3, #2
 800979c:	2b00      	cmp	r3, #0
 800979e:	d00f      	beq.n	80097c0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80097a6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80097b4:	2b28      	cmp	r3, #40	; 0x28
 80097b6:	d003      	beq.n	80097c0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80097be:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80097c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	da03      	bge.n	80097d0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80097ce:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80097d0:	887b      	ldrh	r3, [r7, #2]
 80097d2:	2b10      	cmp	r3, #16
 80097d4:	d103      	bne.n	80097de <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80097dc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80097de:	887b      	ldrh	r3, [r7, #2]
 80097e0:	2b20      	cmp	r3, #32
 80097e2:	d103      	bne.n	80097ec <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f043 0320 	orr.w	r3, r3, #32
 80097ea:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80097ec:	887b      	ldrh	r3, [r7, #2]
 80097ee:	2b40      	cmp	r3, #64	; 0x40
 80097f0:	d103      	bne.n	80097fa <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097f8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	6819      	ldr	r1, [r3, #0]
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	43da      	mvns	r2, r3
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	400a      	ands	r2, r1
 800980a:	601a      	str	r2, [r3, #0]
}
 800980c:	bf00      	nop
 800980e:	3714      	adds	r7, #20
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr

08009818 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009818:	b480      	push	{r7}
 800981a:	b083      	sub	sp, #12
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009828:	b2db      	uxtb	r3, r3
 800982a:	2b20      	cmp	r3, #32
 800982c:	d138      	bne.n	80098a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009834:	2b01      	cmp	r3, #1
 8009836:	d101      	bne.n	800983c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009838:	2302      	movs	r3, #2
 800983a:	e032      	b.n	80098a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2201      	movs	r2, #1
 8009840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2224      	movs	r2, #36	; 0x24
 8009848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f022 0201 	bic.w	r2, r2, #1
 800985a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800986a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	6819      	ldr	r1, [r3, #0]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	683a      	ldr	r2, [r7, #0]
 8009878:	430a      	orrs	r2, r1
 800987a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f042 0201 	orr.w	r2, r2, #1
 800988a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2220      	movs	r2, #32
 8009890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2200      	movs	r2, #0
 8009898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800989c:	2300      	movs	r3, #0
 800989e:	e000      	b.n	80098a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80098a0:	2302      	movs	r3, #2
  }
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	370c      	adds	r7, #12
 80098a6:	46bd      	mov	sp, r7
 80098a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ac:	4770      	bx	lr

080098ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80098ae:	b480      	push	{r7}
 80098b0:	b085      	sub	sp, #20
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]
 80098b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098be:	b2db      	uxtb	r3, r3
 80098c0:	2b20      	cmp	r3, #32
 80098c2:	d139      	bne.n	8009938 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d101      	bne.n	80098d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80098ce:	2302      	movs	r3, #2
 80098d0:	e033      	b.n	800993a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2201      	movs	r2, #1
 80098d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2224      	movs	r2, #36	; 0x24
 80098de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	681a      	ldr	r2, [r3, #0]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f022 0201 	bic.w	r2, r2, #1
 80098f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009900:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	021b      	lsls	r3, r3, #8
 8009906:	68fa      	ldr	r2, [r7, #12]
 8009908:	4313      	orrs	r3, r2
 800990a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	68fa      	ldr	r2, [r7, #12]
 8009912:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	681a      	ldr	r2, [r3, #0]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f042 0201 	orr.w	r2, r2, #1
 8009922:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2220      	movs	r2, #32
 8009928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2200      	movs	r2, #0
 8009930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009934:	2300      	movs	r3, #0
 8009936:	e000      	b.n	800993a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009938:	2302      	movs	r3, #2
  }
}
 800993a:	4618      	mov	r0, r3
 800993c:	3714      	adds	r7, #20
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr
	...

08009948 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009948:	b480      	push	{r7}
 800994a:	b085      	sub	sp, #20
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009950:	4b0b      	ldr	r3, [pc, #44]	; (8009980 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8009952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009954:	4a0a      	ldr	r2, [pc, #40]	; (8009980 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8009956:	f043 0301 	orr.w	r3, r3, #1
 800995a:	6613      	str	r3, [r2, #96]	; 0x60
 800995c:	4b08      	ldr	r3, [pc, #32]	; (8009980 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800995e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009960:	f003 0301 	and.w	r3, r3, #1
 8009964:	60fb      	str	r3, [r7, #12]
 8009966:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8009968:	4b06      	ldr	r3, [pc, #24]	; (8009984 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800996a:	685a      	ldr	r2, [r3, #4]
 800996c:	4905      	ldr	r1, [pc, #20]	; (8009984 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	4313      	orrs	r3, r2
 8009972:	604b      	str	r3, [r1, #4]
}
 8009974:	bf00      	nop
 8009976:	3714      	adds	r7, #20
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr
 8009980:	40021000 	.word	0x40021000
 8009984:	40010000 	.word	0x40010000

08009988 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	460b      	mov	r3, r1
 8009992:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d10c      	bne.n	80099b4 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800999a:	4b13      	ldr	r3, [pc, #76]	; (80099e8 <HAL_PWR_EnterSLEEPMode+0x60>)
 800999c:	695b      	ldr	r3, [r3, #20]
 800999e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80099a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099a6:	d10e      	bne.n	80099c6 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80099a8:	f000 f8b6 	bl	8009b18 <HAL_PWREx_DisableLowPowerRunMode>
 80099ac:	4603      	mov	r3, r0
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d009      	beq.n	80099c6 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 80099b2:	e016      	b.n	80099e2 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 80099b4:	4b0c      	ldr	r3, [pc, #48]	; (80099e8 <HAL_PWR_EnterSLEEPMode+0x60>)
 80099b6:	695b      	ldr	r3, [r3, #20]
 80099b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80099bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099c0:	d001      	beq.n	80099c6 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 80099c2:	f000 f899 	bl	8009af8 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80099c6:	4b09      	ldr	r3, [pc, #36]	; (80099ec <HAL_PWR_EnterSLEEPMode+0x64>)
 80099c8:	691b      	ldr	r3, [r3, #16]
 80099ca:	4a08      	ldr	r2, [pc, #32]	; (80099ec <HAL_PWR_EnterSLEEPMode+0x64>)
 80099cc:	f023 0304 	bic.w	r3, r3, #4
 80099d0:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80099d2:	78fb      	ldrb	r3, [r7, #3]
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	d101      	bne.n	80099dc <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80099d8:	bf30      	wfi
 80099da:	e002      	b.n	80099e2 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80099dc:	bf40      	sev
    __WFE();
 80099de:	bf20      	wfe
    __WFE();
 80099e0:	bf20      	wfe
  }

}
 80099e2:	3708      	adds	r7, #8
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}
 80099e8:	40007000 	.word	0x40007000
 80099ec:	e000ed00 	.word	0xe000ed00

080099f0 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 80099f0:	b480      	push	{r7}
 80099f2:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 80099f4:	4b05      	ldr	r3, [pc, #20]	; (8009a0c <HAL_PWR_EnableSleepOnExit+0x1c>)
 80099f6:	691b      	ldr	r3, [r3, #16]
 80099f8:	4a04      	ldr	r2, [pc, #16]	; (8009a0c <HAL_PWR_EnableSleepOnExit+0x1c>)
 80099fa:	f043 0302 	orr.w	r3, r3, #2
 80099fe:	6113      	str	r3, [r2, #16]
}
 8009a00:	bf00      	nop
 8009a02:	46bd      	mov	sp, r7
 8009a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a08:	4770      	bx	lr
 8009a0a:	bf00      	nop
 8009a0c:	e000ed00 	.word	0xe000ed00

08009a10 <HAL_PWR_DisableSleepOnExit>:
  * @note Clear SLEEPONEXIT bit of SCR register. When this bit is set, the processor
  *       re-enters SLEEP mode when an interruption handling is over.
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 8009a10:	b480      	push	{r7}
 8009a12:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8009a14:	4b05      	ldr	r3, [pc, #20]	; (8009a2c <HAL_PWR_DisableSleepOnExit+0x1c>)
 8009a16:	691b      	ldr	r3, [r3, #16]
 8009a18:	4a04      	ldr	r2, [pc, #16]	; (8009a2c <HAL_PWR_DisableSleepOnExit+0x1c>)
 8009a1a:	f023 0302 	bic.w	r3, r3, #2
 8009a1e:	6113      	str	r3, [r2, #16]
}
 8009a20:	bf00      	nop
 8009a22:	46bd      	mov	sp, r7
 8009a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a28:	4770      	bx	lr
 8009a2a:	bf00      	nop
 8009a2c:	e000ed00 	.word	0xe000ed00

08009a30 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009a30:	b480      	push	{r7}
 8009a32:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8009a34:	4b04      	ldr	r3, [pc, #16]	; (8009a48 <HAL_PWREx_GetVoltageRange+0x18>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a44:	4770      	bx	lr
 8009a46:	bf00      	nop
 8009a48:	40007000 	.word	0x40007000

08009a4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b085      	sub	sp, #20
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a5a:	d130      	bne.n	8009abe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8009a5c:	4b23      	ldr	r3, [pc, #140]	; (8009aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009a64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a68:	d038      	beq.n	8009adc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009a6a:	4b20      	ldr	r3, [pc, #128]	; (8009aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009a72:	4a1e      	ldr	r2, [pc, #120]	; (8009aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009a74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009a78:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009a7a:	4b1d      	ldr	r3, [pc, #116]	; (8009af0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	2232      	movs	r2, #50	; 0x32
 8009a80:	fb02 f303 	mul.w	r3, r2, r3
 8009a84:	4a1b      	ldr	r2, [pc, #108]	; (8009af4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8009a86:	fba2 2303 	umull	r2, r3, r2, r3
 8009a8a:	0c9b      	lsrs	r3, r3, #18
 8009a8c:	3301      	adds	r3, #1
 8009a8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009a90:	e002      	b.n	8009a98 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	3b01      	subs	r3, #1
 8009a96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009a98:	4b14      	ldr	r3, [pc, #80]	; (8009aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009a9a:	695b      	ldr	r3, [r3, #20]
 8009a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009aa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009aa4:	d102      	bne.n	8009aac <HAL_PWREx_ControlVoltageScaling+0x60>
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d1f2      	bne.n	8009a92 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009aac:	4b0f      	ldr	r3, [pc, #60]	; (8009aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009aae:	695b      	ldr	r3, [r3, #20]
 8009ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ab4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ab8:	d110      	bne.n	8009adc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8009aba:	2303      	movs	r3, #3
 8009abc:	e00f      	b.n	8009ade <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8009abe:	4b0b      	ldr	r3, [pc, #44]	; (8009aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009ac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009aca:	d007      	beq.n	8009adc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009acc:	4b07      	ldr	r3, [pc, #28]	; (8009aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009ad4:	4a05      	ldr	r2, [pc, #20]	; (8009aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009ad6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009ada:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8009adc:	2300      	movs	r3, #0
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3714      	adds	r7, #20
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae8:	4770      	bx	lr
 8009aea:	bf00      	nop
 8009aec:	40007000 	.word	0x40007000
 8009af0:	20000134 	.word	0x20000134
 8009af4:	431bde83 	.word	0x431bde83

08009af8 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8009af8:	b480      	push	{r7}
 8009afa:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8009afc:	4b05      	ldr	r3, [pc, #20]	; (8009b14 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a04      	ldr	r2, [pc, #16]	; (8009b14 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8009b02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009b06:	6013      	str	r3, [r2, #0]
}
 8009b08:	bf00      	nop
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b10:	4770      	bx	lr
 8009b12:	bf00      	nop
 8009b14:	40007000 	.word	0x40007000

08009b18 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b083      	sub	sp, #12
 8009b1c:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8009b1e:	4b17      	ldr	r3, [pc, #92]	; (8009b7c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a16      	ldr	r2, [pc, #88]	; (8009b7c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8009b24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b28:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009b2a:	4b15      	ldr	r3, [pc, #84]	; (8009b80 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	2232      	movs	r2, #50	; 0x32
 8009b30:	fb02 f303 	mul.w	r3, r2, r3
 8009b34:	4a13      	ldr	r2, [pc, #76]	; (8009b84 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8009b36:	fba2 2303 	umull	r2, r3, r2, r3
 8009b3a:	0c9b      	lsrs	r3, r3, #18
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8009b40:	e002      	b.n	8009b48 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	3b01      	subs	r3, #1
 8009b46:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8009b48:	4b0c      	ldr	r3, [pc, #48]	; (8009b7c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8009b4a:	695b      	ldr	r3, [r3, #20]
 8009b4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b54:	d102      	bne.n	8009b5c <HAL_PWREx_DisableLowPowerRunMode+0x44>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d1f2      	bne.n	8009b42 <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8009b5c:	4b07      	ldr	r3, [pc, #28]	; (8009b7c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8009b5e:	695b      	ldr	r3, [r3, #20]
 8009b60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b68:	d101      	bne.n	8009b6e <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 8009b6a:	2303      	movs	r3, #3
 8009b6c:	e000      	b.n	8009b70 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 8009b6e:	2300      	movs	r3, #0
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	370c      	adds	r7, #12
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr
 8009b7c:	40007000 	.word	0x40007000
 8009b80:	20000134 	.word	0x20000134
 8009b84:	431bde83 	.word	0x431bde83

08009b88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b088      	sub	sp, #32
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d101      	bne.n	8009b9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009b96:	2301      	movs	r3, #1
 8009b98:	e3ca      	b.n	800a330 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009b9a:	4b97      	ldr	r3, [pc, #604]	; (8009df8 <HAL_RCC_OscConfig+0x270>)
 8009b9c:	689b      	ldr	r3, [r3, #8]
 8009b9e:	f003 030c 	and.w	r3, r3, #12
 8009ba2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009ba4:	4b94      	ldr	r3, [pc, #592]	; (8009df8 <HAL_RCC_OscConfig+0x270>)
 8009ba6:	68db      	ldr	r3, [r3, #12]
 8009ba8:	f003 0303 	and.w	r3, r3, #3
 8009bac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f003 0310 	and.w	r3, r3, #16
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	f000 80e4 	beq.w	8009d84 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009bbc:	69bb      	ldr	r3, [r7, #24]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d007      	beq.n	8009bd2 <HAL_RCC_OscConfig+0x4a>
 8009bc2:	69bb      	ldr	r3, [r7, #24]
 8009bc4:	2b0c      	cmp	r3, #12
 8009bc6:	f040 808b 	bne.w	8009ce0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	f040 8087 	bne.w	8009ce0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009bd2:	4b89      	ldr	r3, [pc, #548]	; (8009df8 <HAL_RCC_OscConfig+0x270>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f003 0302 	and.w	r3, r3, #2
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d005      	beq.n	8009bea <HAL_RCC_OscConfig+0x62>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	699b      	ldr	r3, [r3, #24]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d101      	bne.n	8009bea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8009be6:	2301      	movs	r3, #1
 8009be8:	e3a2      	b.n	800a330 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6a1a      	ldr	r2, [r3, #32]
 8009bee:	4b82      	ldr	r3, [pc, #520]	; (8009df8 <HAL_RCC_OscConfig+0x270>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f003 0308 	and.w	r3, r3, #8
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d004      	beq.n	8009c04 <HAL_RCC_OscConfig+0x7c>
 8009bfa:	4b7f      	ldr	r3, [pc, #508]	; (8009df8 <HAL_RCC_OscConfig+0x270>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c02:	e005      	b.n	8009c10 <HAL_RCC_OscConfig+0x88>
 8009c04:	4b7c      	ldr	r3, [pc, #496]	; (8009df8 <HAL_RCC_OscConfig+0x270>)
 8009c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009c0a:	091b      	lsrs	r3, r3, #4
 8009c0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d223      	bcs.n	8009c5c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6a1b      	ldr	r3, [r3, #32]
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f000 fd87 	bl	800a72c <RCC_SetFlashLatencyFromMSIRange>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d001      	beq.n	8009c28 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8009c24:	2301      	movs	r3, #1
 8009c26:	e383      	b.n	800a330 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009c28:	4b73      	ldr	r3, [pc, #460]	; (8009df8 <HAL_RCC_OscConfig+0x270>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4a72      	ldr	r2, [pc, #456]	; (8009df8 <HAL_RCC_OscConfig+0x270>)
 8009c2e:	f043 0308 	orr.w	r3, r3, #8
 8009c32:	6013      	str	r3, [r2, #0]
 8009c34:	4b70      	ldr	r3, [pc, #448]	; (8009df8 <HAL_RCC_OscConfig+0x270>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6a1b      	ldr	r3, [r3, #32]
 8009c40:	496d      	ldr	r1, [pc, #436]	; (8009df8 <HAL_RCC_OscConfig+0x270>)
 8009c42:	4313      	orrs	r3, r2
 8009c44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009c46:	4b6c      	ldr	r3, [pc, #432]	; (8009df8 <HAL_RCC_OscConfig+0x270>)
 8009c48:	685b      	ldr	r3, [r3, #4]
 8009c4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	69db      	ldr	r3, [r3, #28]
 8009c52:	021b      	lsls	r3, r3, #8
 8009c54:	4968      	ldr	r1, [pc, #416]	; (8009df8 <HAL_RCC_OscConfig+0x270>)
 8009c56:	4313      	orrs	r3, r2
 8009c58:	604b      	str	r3, [r1, #4]
 8009c5a:	e025      	b.n	8009ca8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009c5c:	4b66      	ldr	r3, [pc, #408]	; (8009df8 <HAL_RCC_OscConfig+0x270>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4a65      	ldr	r2, [pc, #404]	; (8009df8 <HAL_RCC_OscConfig+0x270>)
 8009c62:	f043 0308 	orr.w	r3, r3, #8
 8009c66:	6013      	str	r3, [r2, #0]
 8009c68:	4b63      	ldr	r3, [pc, #396]	; (8009df8 <HAL_RCC_OscConfig+0x270>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6a1b      	ldr	r3, [r3, #32]
 8009c74:	4960      	ldr	r1, [pc, #384]	; (8009df8 <HAL_RCC_OscConfig+0x270>)
 8009c76:	4313      	orrs	r3, r2
 8009c78:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009c7a:	4b5f      	ldr	r3, [pc, #380]	; (8009df8 <HAL_RCC_OscConfig+0x270>)
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	69db      	ldr	r3, [r3, #28]
 8009c86:	021b      	lsls	r3, r3, #8
 8009c88:	495b      	ldr	r1, [pc, #364]	; (8009df8 <HAL_RCC_OscConfig+0x270>)
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009c8e:	69bb      	ldr	r3, [r7, #24]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d109      	bne.n	8009ca8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6a1b      	ldr	r3, [r3, #32]
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f000 fd47 	bl	800a72c <RCC_SetFlashLatencyFromMSIRange>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d001      	beq.n	8009ca8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	e343      	b.n	800a330 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009ca8:	f000 fc4a 	bl	800a540 <HAL_RCC_GetSysClockFreq>
 8009cac:	4602      	mov	r2, r0
 8009cae:	4b52      	ldr	r3, [pc, #328]	; (8009df8 <HAL_RCC_OscConfig+0x270>)
 8009cb0:	689b      	ldr	r3, [r3, #8]
 8009cb2:	091b      	lsrs	r3, r3, #4
 8009cb4:	f003 030f 	and.w	r3, r3, #15
 8009cb8:	4950      	ldr	r1, [pc, #320]	; (8009dfc <HAL_RCC_OscConfig+0x274>)
 8009cba:	5ccb      	ldrb	r3, [r1, r3]
 8009cbc:	f003 031f 	and.w	r3, r3, #31
 8009cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8009cc4:	4a4e      	ldr	r2, [pc, #312]	; (8009e00 <HAL_RCC_OscConfig+0x278>)
 8009cc6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009cc8:	4b4e      	ldr	r3, [pc, #312]	; (8009e04 <HAL_RCC_OscConfig+0x27c>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f7fc fc61 	bl	8006594 <HAL_InitTick>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8009cd6:	7bfb      	ldrb	r3, [r7, #15]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d052      	beq.n	8009d82 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8009cdc:	7bfb      	ldrb	r3, [r7, #15]
 8009cde:	e327      	b.n	800a330 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	699b      	ldr	r3, [r3, #24]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d032      	beq.n	8009d4e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8009ce8:	4b43      	ldr	r3, [pc, #268]	; (8009df8 <HAL_RCC_OscConfig+0x270>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4a42      	ldr	r2, [pc, #264]	; (8009df8 <HAL_RCC_OscConfig+0x270>)
 8009cee:	f043 0301 	orr.w	r3, r3, #1
 8009cf2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009cf4:	f7fd fc2c 	bl	8007550 <HAL_GetTick>
 8009cf8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009cfa:	e008      	b.n	8009d0e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009cfc:	f7fd fc28 	bl	8007550 <HAL_GetTick>
 8009d00:	4602      	mov	r2, r0
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	1ad3      	subs	r3, r2, r3
 8009d06:	2b02      	cmp	r3, #2
 8009d08:	d901      	bls.n	8009d0e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8009d0a:	2303      	movs	r3, #3
 8009d0c:	e310      	b.n	800a330 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009d0e:	4b3a      	ldr	r3, [pc, #232]	; (8009df8 <HAL_RCC_OscConfig+0x270>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f003 0302 	and.w	r3, r3, #2
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d0f0      	beq.n	8009cfc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009d1a:	4b37      	ldr	r3, [pc, #220]	; (8009df8 <HAL_RCC_OscConfig+0x270>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a36      	ldr	r2, [pc, #216]	; (8009df8 <HAL_RCC_OscConfig+0x270>)
 8009d20:	f043 0308 	orr.w	r3, r3, #8
 8009d24:	6013      	str	r3, [r2, #0]
 8009d26:	4b34      	ldr	r3, [pc, #208]	; (8009df8 <HAL_RCC_OscConfig+0x270>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6a1b      	ldr	r3, [r3, #32]
 8009d32:	4931      	ldr	r1, [pc, #196]	; (8009df8 <HAL_RCC_OscConfig+0x270>)
 8009d34:	4313      	orrs	r3, r2
 8009d36:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009d38:	4b2f      	ldr	r3, [pc, #188]	; (8009df8 <HAL_RCC_OscConfig+0x270>)
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	69db      	ldr	r3, [r3, #28]
 8009d44:	021b      	lsls	r3, r3, #8
 8009d46:	492c      	ldr	r1, [pc, #176]	; (8009df8 <HAL_RCC_OscConfig+0x270>)
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	604b      	str	r3, [r1, #4]
 8009d4c:	e01a      	b.n	8009d84 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009d4e:	4b2a      	ldr	r3, [pc, #168]	; (8009df8 <HAL_RCC_OscConfig+0x270>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4a29      	ldr	r2, [pc, #164]	; (8009df8 <HAL_RCC_OscConfig+0x270>)
 8009d54:	f023 0301 	bic.w	r3, r3, #1
 8009d58:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009d5a:	f7fd fbf9 	bl	8007550 <HAL_GetTick>
 8009d5e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009d60:	e008      	b.n	8009d74 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009d62:	f7fd fbf5 	bl	8007550 <HAL_GetTick>
 8009d66:	4602      	mov	r2, r0
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	1ad3      	subs	r3, r2, r3
 8009d6c:	2b02      	cmp	r3, #2
 8009d6e:	d901      	bls.n	8009d74 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8009d70:	2303      	movs	r3, #3
 8009d72:	e2dd      	b.n	800a330 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009d74:	4b20      	ldr	r3, [pc, #128]	; (8009df8 <HAL_RCC_OscConfig+0x270>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f003 0302 	and.w	r3, r3, #2
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d1f0      	bne.n	8009d62 <HAL_RCC_OscConfig+0x1da>
 8009d80:	e000      	b.n	8009d84 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009d82:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f003 0301 	and.w	r3, r3, #1
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d074      	beq.n	8009e7a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8009d90:	69bb      	ldr	r3, [r7, #24]
 8009d92:	2b08      	cmp	r3, #8
 8009d94:	d005      	beq.n	8009da2 <HAL_RCC_OscConfig+0x21a>
 8009d96:	69bb      	ldr	r3, [r7, #24]
 8009d98:	2b0c      	cmp	r3, #12
 8009d9a:	d10e      	bne.n	8009dba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	2b03      	cmp	r3, #3
 8009da0:	d10b      	bne.n	8009dba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009da2:	4b15      	ldr	r3, [pc, #84]	; (8009df8 <HAL_RCC_OscConfig+0x270>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d064      	beq.n	8009e78 <HAL_RCC_OscConfig+0x2f0>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	685b      	ldr	r3, [r3, #4]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d160      	bne.n	8009e78 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8009db6:	2301      	movs	r3, #1
 8009db8:	e2ba      	b.n	800a330 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009dc2:	d106      	bne.n	8009dd2 <HAL_RCC_OscConfig+0x24a>
 8009dc4:	4b0c      	ldr	r3, [pc, #48]	; (8009df8 <HAL_RCC_OscConfig+0x270>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4a0b      	ldr	r2, [pc, #44]	; (8009df8 <HAL_RCC_OscConfig+0x270>)
 8009dca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009dce:	6013      	str	r3, [r2, #0]
 8009dd0:	e026      	b.n	8009e20 <HAL_RCC_OscConfig+0x298>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009dda:	d115      	bne.n	8009e08 <HAL_RCC_OscConfig+0x280>
 8009ddc:	4b06      	ldr	r3, [pc, #24]	; (8009df8 <HAL_RCC_OscConfig+0x270>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4a05      	ldr	r2, [pc, #20]	; (8009df8 <HAL_RCC_OscConfig+0x270>)
 8009de2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009de6:	6013      	str	r3, [r2, #0]
 8009de8:	4b03      	ldr	r3, [pc, #12]	; (8009df8 <HAL_RCC_OscConfig+0x270>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4a02      	ldr	r2, [pc, #8]	; (8009df8 <HAL_RCC_OscConfig+0x270>)
 8009dee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009df2:	6013      	str	r3, [r2, #0]
 8009df4:	e014      	b.n	8009e20 <HAL_RCC_OscConfig+0x298>
 8009df6:	bf00      	nop
 8009df8:	40021000 	.word	0x40021000
 8009dfc:	08018cfc 	.word	0x08018cfc
 8009e00:	20000134 	.word	0x20000134
 8009e04:	20000164 	.word	0x20000164
 8009e08:	4ba0      	ldr	r3, [pc, #640]	; (800a08c <HAL_RCC_OscConfig+0x504>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a9f      	ldr	r2, [pc, #636]	; (800a08c <HAL_RCC_OscConfig+0x504>)
 8009e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e12:	6013      	str	r3, [r2, #0]
 8009e14:	4b9d      	ldr	r3, [pc, #628]	; (800a08c <HAL_RCC_OscConfig+0x504>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4a9c      	ldr	r2, [pc, #624]	; (800a08c <HAL_RCC_OscConfig+0x504>)
 8009e1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d013      	beq.n	8009e50 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e28:	f7fd fb92 	bl	8007550 <HAL_GetTick>
 8009e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009e2e:	e008      	b.n	8009e42 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009e30:	f7fd fb8e 	bl	8007550 <HAL_GetTick>
 8009e34:	4602      	mov	r2, r0
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	1ad3      	subs	r3, r2, r3
 8009e3a:	2b64      	cmp	r3, #100	; 0x64
 8009e3c:	d901      	bls.n	8009e42 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8009e3e:	2303      	movs	r3, #3
 8009e40:	e276      	b.n	800a330 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009e42:	4b92      	ldr	r3, [pc, #584]	; (800a08c <HAL_RCC_OscConfig+0x504>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d0f0      	beq.n	8009e30 <HAL_RCC_OscConfig+0x2a8>
 8009e4e:	e014      	b.n	8009e7a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e50:	f7fd fb7e 	bl	8007550 <HAL_GetTick>
 8009e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009e56:	e008      	b.n	8009e6a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009e58:	f7fd fb7a 	bl	8007550 <HAL_GetTick>
 8009e5c:	4602      	mov	r2, r0
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	1ad3      	subs	r3, r2, r3
 8009e62:	2b64      	cmp	r3, #100	; 0x64
 8009e64:	d901      	bls.n	8009e6a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009e66:	2303      	movs	r3, #3
 8009e68:	e262      	b.n	800a330 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009e6a:	4b88      	ldr	r3, [pc, #544]	; (800a08c <HAL_RCC_OscConfig+0x504>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d1f0      	bne.n	8009e58 <HAL_RCC_OscConfig+0x2d0>
 8009e76:	e000      	b.n	8009e7a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f003 0302 	and.w	r3, r3, #2
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d060      	beq.n	8009f48 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8009e86:	69bb      	ldr	r3, [r7, #24]
 8009e88:	2b04      	cmp	r3, #4
 8009e8a:	d005      	beq.n	8009e98 <HAL_RCC_OscConfig+0x310>
 8009e8c:	69bb      	ldr	r3, [r7, #24]
 8009e8e:	2b0c      	cmp	r3, #12
 8009e90:	d119      	bne.n	8009ec6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	2b02      	cmp	r3, #2
 8009e96:	d116      	bne.n	8009ec6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009e98:	4b7c      	ldr	r3, [pc, #496]	; (800a08c <HAL_RCC_OscConfig+0x504>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d005      	beq.n	8009eb0 <HAL_RCC_OscConfig+0x328>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	68db      	ldr	r3, [r3, #12]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d101      	bne.n	8009eb0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8009eac:	2301      	movs	r3, #1
 8009eae:	e23f      	b.n	800a330 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009eb0:	4b76      	ldr	r3, [pc, #472]	; (800a08c <HAL_RCC_OscConfig+0x504>)
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	691b      	ldr	r3, [r3, #16]
 8009ebc:	061b      	lsls	r3, r3, #24
 8009ebe:	4973      	ldr	r1, [pc, #460]	; (800a08c <HAL_RCC_OscConfig+0x504>)
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009ec4:	e040      	b.n	8009f48 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	68db      	ldr	r3, [r3, #12]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d023      	beq.n	8009f16 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009ece:	4b6f      	ldr	r3, [pc, #444]	; (800a08c <HAL_RCC_OscConfig+0x504>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	4a6e      	ldr	r2, [pc, #440]	; (800a08c <HAL_RCC_OscConfig+0x504>)
 8009ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ed8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009eda:	f7fd fb39 	bl	8007550 <HAL_GetTick>
 8009ede:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009ee0:	e008      	b.n	8009ef4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009ee2:	f7fd fb35 	bl	8007550 <HAL_GetTick>
 8009ee6:	4602      	mov	r2, r0
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	1ad3      	subs	r3, r2, r3
 8009eec:	2b02      	cmp	r3, #2
 8009eee:	d901      	bls.n	8009ef4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8009ef0:	2303      	movs	r3, #3
 8009ef2:	e21d      	b.n	800a330 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009ef4:	4b65      	ldr	r3, [pc, #404]	; (800a08c <HAL_RCC_OscConfig+0x504>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d0f0      	beq.n	8009ee2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f00:	4b62      	ldr	r3, [pc, #392]	; (800a08c <HAL_RCC_OscConfig+0x504>)
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	691b      	ldr	r3, [r3, #16]
 8009f0c:	061b      	lsls	r3, r3, #24
 8009f0e:	495f      	ldr	r1, [pc, #380]	; (800a08c <HAL_RCC_OscConfig+0x504>)
 8009f10:	4313      	orrs	r3, r2
 8009f12:	604b      	str	r3, [r1, #4]
 8009f14:	e018      	b.n	8009f48 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009f16:	4b5d      	ldr	r3, [pc, #372]	; (800a08c <HAL_RCC_OscConfig+0x504>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4a5c      	ldr	r2, [pc, #368]	; (800a08c <HAL_RCC_OscConfig+0x504>)
 8009f1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f22:	f7fd fb15 	bl	8007550 <HAL_GetTick>
 8009f26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009f28:	e008      	b.n	8009f3c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f2a:	f7fd fb11 	bl	8007550 <HAL_GetTick>
 8009f2e:	4602      	mov	r2, r0
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	1ad3      	subs	r3, r2, r3
 8009f34:	2b02      	cmp	r3, #2
 8009f36:	d901      	bls.n	8009f3c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8009f38:	2303      	movs	r3, #3
 8009f3a:	e1f9      	b.n	800a330 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009f3c:	4b53      	ldr	r3, [pc, #332]	; (800a08c <HAL_RCC_OscConfig+0x504>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d1f0      	bne.n	8009f2a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f003 0308 	and.w	r3, r3, #8
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d03c      	beq.n	8009fce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	695b      	ldr	r3, [r3, #20]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d01c      	beq.n	8009f96 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009f5c:	4b4b      	ldr	r3, [pc, #300]	; (800a08c <HAL_RCC_OscConfig+0x504>)
 8009f5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009f62:	4a4a      	ldr	r2, [pc, #296]	; (800a08c <HAL_RCC_OscConfig+0x504>)
 8009f64:	f043 0301 	orr.w	r3, r3, #1
 8009f68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f6c:	f7fd faf0 	bl	8007550 <HAL_GetTick>
 8009f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009f72:	e008      	b.n	8009f86 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009f74:	f7fd faec 	bl	8007550 <HAL_GetTick>
 8009f78:	4602      	mov	r2, r0
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	1ad3      	subs	r3, r2, r3
 8009f7e:	2b02      	cmp	r3, #2
 8009f80:	d901      	bls.n	8009f86 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8009f82:	2303      	movs	r3, #3
 8009f84:	e1d4      	b.n	800a330 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009f86:	4b41      	ldr	r3, [pc, #260]	; (800a08c <HAL_RCC_OscConfig+0x504>)
 8009f88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009f8c:	f003 0302 	and.w	r3, r3, #2
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d0ef      	beq.n	8009f74 <HAL_RCC_OscConfig+0x3ec>
 8009f94:	e01b      	b.n	8009fce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009f96:	4b3d      	ldr	r3, [pc, #244]	; (800a08c <HAL_RCC_OscConfig+0x504>)
 8009f98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009f9c:	4a3b      	ldr	r2, [pc, #236]	; (800a08c <HAL_RCC_OscConfig+0x504>)
 8009f9e:	f023 0301 	bic.w	r3, r3, #1
 8009fa2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009fa6:	f7fd fad3 	bl	8007550 <HAL_GetTick>
 8009faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009fac:	e008      	b.n	8009fc0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009fae:	f7fd facf 	bl	8007550 <HAL_GetTick>
 8009fb2:	4602      	mov	r2, r0
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	1ad3      	subs	r3, r2, r3
 8009fb8:	2b02      	cmp	r3, #2
 8009fba:	d901      	bls.n	8009fc0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8009fbc:	2303      	movs	r3, #3
 8009fbe:	e1b7      	b.n	800a330 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009fc0:	4b32      	ldr	r3, [pc, #200]	; (800a08c <HAL_RCC_OscConfig+0x504>)
 8009fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009fc6:	f003 0302 	and.w	r3, r3, #2
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d1ef      	bne.n	8009fae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f003 0304 	and.w	r3, r3, #4
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	f000 80a6 	beq.w	800a128 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8009fe0:	4b2a      	ldr	r3, [pc, #168]	; (800a08c <HAL_RCC_OscConfig+0x504>)
 8009fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d10d      	bne.n	800a008 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009fec:	4b27      	ldr	r3, [pc, #156]	; (800a08c <HAL_RCC_OscConfig+0x504>)
 8009fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ff0:	4a26      	ldr	r2, [pc, #152]	; (800a08c <HAL_RCC_OscConfig+0x504>)
 8009ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ff6:	6593      	str	r3, [r2, #88]	; 0x58
 8009ff8:	4b24      	ldr	r3, [pc, #144]	; (800a08c <HAL_RCC_OscConfig+0x504>)
 8009ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a000:	60bb      	str	r3, [r7, #8]
 800a002:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a004:	2301      	movs	r3, #1
 800a006:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a008:	4b21      	ldr	r3, [pc, #132]	; (800a090 <HAL_RCC_OscConfig+0x508>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a010:	2b00      	cmp	r3, #0
 800a012:	d118      	bne.n	800a046 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a014:	4b1e      	ldr	r3, [pc, #120]	; (800a090 <HAL_RCC_OscConfig+0x508>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	4a1d      	ldr	r2, [pc, #116]	; (800a090 <HAL_RCC_OscConfig+0x508>)
 800a01a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a01e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a020:	f7fd fa96 	bl	8007550 <HAL_GetTick>
 800a024:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a026:	e008      	b.n	800a03a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a028:	f7fd fa92 	bl	8007550 <HAL_GetTick>
 800a02c:	4602      	mov	r2, r0
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	1ad3      	subs	r3, r2, r3
 800a032:	2b02      	cmp	r3, #2
 800a034:	d901      	bls.n	800a03a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800a036:	2303      	movs	r3, #3
 800a038:	e17a      	b.n	800a330 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a03a:	4b15      	ldr	r3, [pc, #84]	; (800a090 <HAL_RCC_OscConfig+0x508>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a042:	2b00      	cmp	r3, #0
 800a044:	d0f0      	beq.n	800a028 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	689b      	ldr	r3, [r3, #8]
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d108      	bne.n	800a060 <HAL_RCC_OscConfig+0x4d8>
 800a04e:	4b0f      	ldr	r3, [pc, #60]	; (800a08c <HAL_RCC_OscConfig+0x504>)
 800a050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a054:	4a0d      	ldr	r2, [pc, #52]	; (800a08c <HAL_RCC_OscConfig+0x504>)
 800a056:	f043 0301 	orr.w	r3, r3, #1
 800a05a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a05e:	e029      	b.n	800a0b4 <HAL_RCC_OscConfig+0x52c>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	689b      	ldr	r3, [r3, #8]
 800a064:	2b05      	cmp	r3, #5
 800a066:	d115      	bne.n	800a094 <HAL_RCC_OscConfig+0x50c>
 800a068:	4b08      	ldr	r3, [pc, #32]	; (800a08c <HAL_RCC_OscConfig+0x504>)
 800a06a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a06e:	4a07      	ldr	r2, [pc, #28]	; (800a08c <HAL_RCC_OscConfig+0x504>)
 800a070:	f043 0304 	orr.w	r3, r3, #4
 800a074:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a078:	4b04      	ldr	r3, [pc, #16]	; (800a08c <HAL_RCC_OscConfig+0x504>)
 800a07a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a07e:	4a03      	ldr	r2, [pc, #12]	; (800a08c <HAL_RCC_OscConfig+0x504>)
 800a080:	f043 0301 	orr.w	r3, r3, #1
 800a084:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a088:	e014      	b.n	800a0b4 <HAL_RCC_OscConfig+0x52c>
 800a08a:	bf00      	nop
 800a08c:	40021000 	.word	0x40021000
 800a090:	40007000 	.word	0x40007000
 800a094:	4b9c      	ldr	r3, [pc, #624]	; (800a308 <HAL_RCC_OscConfig+0x780>)
 800a096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a09a:	4a9b      	ldr	r2, [pc, #620]	; (800a308 <HAL_RCC_OscConfig+0x780>)
 800a09c:	f023 0301 	bic.w	r3, r3, #1
 800a0a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a0a4:	4b98      	ldr	r3, [pc, #608]	; (800a308 <HAL_RCC_OscConfig+0x780>)
 800a0a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0aa:	4a97      	ldr	r2, [pc, #604]	; (800a308 <HAL_RCC_OscConfig+0x780>)
 800a0ac:	f023 0304 	bic.w	r3, r3, #4
 800a0b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	689b      	ldr	r3, [r3, #8]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d016      	beq.n	800a0ea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a0bc:	f7fd fa48 	bl	8007550 <HAL_GetTick>
 800a0c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a0c2:	e00a      	b.n	800a0da <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0c4:	f7fd fa44 	bl	8007550 <HAL_GetTick>
 800a0c8:	4602      	mov	r2, r0
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	1ad3      	subs	r3, r2, r3
 800a0ce:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d901      	bls.n	800a0da <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800a0d6:	2303      	movs	r3, #3
 800a0d8:	e12a      	b.n	800a330 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a0da:	4b8b      	ldr	r3, [pc, #556]	; (800a308 <HAL_RCC_OscConfig+0x780>)
 800a0dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0e0:	f003 0302 	and.w	r3, r3, #2
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d0ed      	beq.n	800a0c4 <HAL_RCC_OscConfig+0x53c>
 800a0e8:	e015      	b.n	800a116 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a0ea:	f7fd fa31 	bl	8007550 <HAL_GetTick>
 800a0ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a0f0:	e00a      	b.n	800a108 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0f2:	f7fd fa2d 	bl	8007550 <HAL_GetTick>
 800a0f6:	4602      	mov	r2, r0
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	1ad3      	subs	r3, r2, r3
 800a0fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a100:	4293      	cmp	r3, r2
 800a102:	d901      	bls.n	800a108 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800a104:	2303      	movs	r3, #3
 800a106:	e113      	b.n	800a330 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a108:	4b7f      	ldr	r3, [pc, #508]	; (800a308 <HAL_RCC_OscConfig+0x780>)
 800a10a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a10e:	f003 0302 	and.w	r3, r3, #2
 800a112:	2b00      	cmp	r3, #0
 800a114:	d1ed      	bne.n	800a0f2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a116:	7ffb      	ldrb	r3, [r7, #31]
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d105      	bne.n	800a128 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a11c:	4b7a      	ldr	r3, [pc, #488]	; (800a308 <HAL_RCC_OscConfig+0x780>)
 800a11e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a120:	4a79      	ldr	r2, [pc, #484]	; (800a308 <HAL_RCC_OscConfig+0x780>)
 800a122:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a126:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	f000 80fe 	beq.w	800a32e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a136:	2b02      	cmp	r3, #2
 800a138:	f040 80d0 	bne.w	800a2dc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800a13c:	4b72      	ldr	r3, [pc, #456]	; (800a308 <HAL_RCC_OscConfig+0x780>)
 800a13e:	68db      	ldr	r3, [r3, #12]
 800a140:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	f003 0203 	and.w	r2, r3, #3
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d130      	bne.n	800a1b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a15a:	3b01      	subs	r3, #1
 800a15c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a15e:	429a      	cmp	r2, r3
 800a160:	d127      	bne.n	800a1b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a16c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a16e:	429a      	cmp	r2, r3
 800a170:	d11f      	bne.n	800a1b2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a178:	687a      	ldr	r2, [r7, #4]
 800a17a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a17c:	2a07      	cmp	r2, #7
 800a17e:	bf14      	ite	ne
 800a180:	2201      	movne	r2, #1
 800a182:	2200      	moveq	r2, #0
 800a184:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a186:	4293      	cmp	r3, r2
 800a188:	d113      	bne.n	800a1b2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a194:	085b      	lsrs	r3, r3, #1
 800a196:	3b01      	subs	r3, #1
 800a198:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d109      	bne.n	800a1b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1a8:	085b      	lsrs	r3, r3, #1
 800a1aa:	3b01      	subs	r3, #1
 800a1ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	d06e      	beq.n	800a290 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a1b2:	69bb      	ldr	r3, [r7, #24]
 800a1b4:	2b0c      	cmp	r3, #12
 800a1b6:	d069      	beq.n	800a28c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800a1b8:	4b53      	ldr	r3, [pc, #332]	; (800a308 <HAL_RCC_OscConfig+0x780>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d105      	bne.n	800a1d0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800a1c4:	4b50      	ldr	r3, [pc, #320]	; (800a308 <HAL_RCC_OscConfig+0x780>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d001      	beq.n	800a1d4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	e0ad      	b.n	800a330 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800a1d4:	4b4c      	ldr	r3, [pc, #304]	; (800a308 <HAL_RCC_OscConfig+0x780>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a4b      	ldr	r2, [pc, #300]	; (800a308 <HAL_RCC_OscConfig+0x780>)
 800a1da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a1de:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a1e0:	f7fd f9b6 	bl	8007550 <HAL_GetTick>
 800a1e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a1e6:	e008      	b.n	800a1fa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a1e8:	f7fd f9b2 	bl	8007550 <HAL_GetTick>
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	1ad3      	subs	r3, r2, r3
 800a1f2:	2b02      	cmp	r3, #2
 800a1f4:	d901      	bls.n	800a1fa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800a1f6:	2303      	movs	r3, #3
 800a1f8:	e09a      	b.n	800a330 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a1fa:	4b43      	ldr	r3, [pc, #268]	; (800a308 <HAL_RCC_OscConfig+0x780>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a202:	2b00      	cmp	r3, #0
 800a204:	d1f0      	bne.n	800a1e8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a206:	4b40      	ldr	r3, [pc, #256]	; (800a308 <HAL_RCC_OscConfig+0x780>)
 800a208:	68da      	ldr	r2, [r3, #12]
 800a20a:	4b40      	ldr	r3, [pc, #256]	; (800a30c <HAL_RCC_OscConfig+0x784>)
 800a20c:	4013      	ands	r3, r2
 800a20e:	687a      	ldr	r2, [r7, #4]
 800a210:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a216:	3a01      	subs	r2, #1
 800a218:	0112      	lsls	r2, r2, #4
 800a21a:	4311      	orrs	r1, r2
 800a21c:	687a      	ldr	r2, [r7, #4]
 800a21e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a220:	0212      	lsls	r2, r2, #8
 800a222:	4311      	orrs	r1, r2
 800a224:	687a      	ldr	r2, [r7, #4]
 800a226:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a228:	0852      	lsrs	r2, r2, #1
 800a22a:	3a01      	subs	r2, #1
 800a22c:	0552      	lsls	r2, r2, #21
 800a22e:	4311      	orrs	r1, r2
 800a230:	687a      	ldr	r2, [r7, #4]
 800a232:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a234:	0852      	lsrs	r2, r2, #1
 800a236:	3a01      	subs	r2, #1
 800a238:	0652      	lsls	r2, r2, #25
 800a23a:	4311      	orrs	r1, r2
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a240:	0912      	lsrs	r2, r2, #4
 800a242:	0452      	lsls	r2, r2, #17
 800a244:	430a      	orrs	r2, r1
 800a246:	4930      	ldr	r1, [pc, #192]	; (800a308 <HAL_RCC_OscConfig+0x780>)
 800a248:	4313      	orrs	r3, r2
 800a24a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800a24c:	4b2e      	ldr	r3, [pc, #184]	; (800a308 <HAL_RCC_OscConfig+0x780>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a2d      	ldr	r2, [pc, #180]	; (800a308 <HAL_RCC_OscConfig+0x780>)
 800a252:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a256:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a258:	4b2b      	ldr	r3, [pc, #172]	; (800a308 <HAL_RCC_OscConfig+0x780>)
 800a25a:	68db      	ldr	r3, [r3, #12]
 800a25c:	4a2a      	ldr	r2, [pc, #168]	; (800a308 <HAL_RCC_OscConfig+0x780>)
 800a25e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a262:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a264:	f7fd f974 	bl	8007550 <HAL_GetTick>
 800a268:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a26a:	e008      	b.n	800a27e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a26c:	f7fd f970 	bl	8007550 <HAL_GetTick>
 800a270:	4602      	mov	r2, r0
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	1ad3      	subs	r3, r2, r3
 800a276:	2b02      	cmp	r3, #2
 800a278:	d901      	bls.n	800a27e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800a27a:	2303      	movs	r3, #3
 800a27c:	e058      	b.n	800a330 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a27e:	4b22      	ldr	r3, [pc, #136]	; (800a308 <HAL_RCC_OscConfig+0x780>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a286:	2b00      	cmp	r3, #0
 800a288:	d0f0      	beq.n	800a26c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a28a:	e050      	b.n	800a32e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800a28c:	2301      	movs	r3, #1
 800a28e:	e04f      	b.n	800a330 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a290:	4b1d      	ldr	r3, [pc, #116]	; (800a308 <HAL_RCC_OscConfig+0x780>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d148      	bne.n	800a32e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800a29c:	4b1a      	ldr	r3, [pc, #104]	; (800a308 <HAL_RCC_OscConfig+0x780>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4a19      	ldr	r2, [pc, #100]	; (800a308 <HAL_RCC_OscConfig+0x780>)
 800a2a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a2a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a2a8:	4b17      	ldr	r3, [pc, #92]	; (800a308 <HAL_RCC_OscConfig+0x780>)
 800a2aa:	68db      	ldr	r3, [r3, #12]
 800a2ac:	4a16      	ldr	r2, [pc, #88]	; (800a308 <HAL_RCC_OscConfig+0x780>)
 800a2ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a2b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a2b4:	f7fd f94c 	bl	8007550 <HAL_GetTick>
 800a2b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a2ba:	e008      	b.n	800a2ce <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a2bc:	f7fd f948 	bl	8007550 <HAL_GetTick>
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	1ad3      	subs	r3, r2, r3
 800a2c6:	2b02      	cmp	r3, #2
 800a2c8:	d901      	bls.n	800a2ce <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800a2ca:	2303      	movs	r3, #3
 800a2cc:	e030      	b.n	800a330 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a2ce:	4b0e      	ldr	r3, [pc, #56]	; (800a308 <HAL_RCC_OscConfig+0x780>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d0f0      	beq.n	800a2bc <HAL_RCC_OscConfig+0x734>
 800a2da:	e028      	b.n	800a32e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a2dc:	69bb      	ldr	r3, [r7, #24]
 800a2de:	2b0c      	cmp	r3, #12
 800a2e0:	d023      	beq.n	800a32a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a2e2:	4b09      	ldr	r3, [pc, #36]	; (800a308 <HAL_RCC_OscConfig+0x780>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4a08      	ldr	r2, [pc, #32]	; (800a308 <HAL_RCC_OscConfig+0x780>)
 800a2e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a2ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2ee:	f7fd f92f 	bl	8007550 <HAL_GetTick>
 800a2f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a2f4:	e00c      	b.n	800a310 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a2f6:	f7fd f92b 	bl	8007550 <HAL_GetTick>
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	1ad3      	subs	r3, r2, r3
 800a300:	2b02      	cmp	r3, #2
 800a302:	d905      	bls.n	800a310 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800a304:	2303      	movs	r3, #3
 800a306:	e013      	b.n	800a330 <HAL_RCC_OscConfig+0x7a8>
 800a308:	40021000 	.word	0x40021000
 800a30c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a310:	4b09      	ldr	r3, [pc, #36]	; (800a338 <HAL_RCC_OscConfig+0x7b0>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d1ec      	bne.n	800a2f6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800a31c:	4b06      	ldr	r3, [pc, #24]	; (800a338 <HAL_RCC_OscConfig+0x7b0>)
 800a31e:	68da      	ldr	r2, [r3, #12]
 800a320:	4905      	ldr	r1, [pc, #20]	; (800a338 <HAL_RCC_OscConfig+0x7b0>)
 800a322:	4b06      	ldr	r3, [pc, #24]	; (800a33c <HAL_RCC_OscConfig+0x7b4>)
 800a324:	4013      	ands	r3, r2
 800a326:	60cb      	str	r3, [r1, #12]
 800a328:	e001      	b.n	800a32e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800a32a:	2301      	movs	r3, #1
 800a32c:	e000      	b.n	800a330 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800a32e:	2300      	movs	r3, #0
}
 800a330:	4618      	mov	r0, r3
 800a332:	3720      	adds	r7, #32
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}
 800a338:	40021000 	.word	0x40021000
 800a33c:	feeefffc 	.word	0xfeeefffc

0800a340 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b084      	sub	sp, #16
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d101      	bne.n	800a354 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a350:	2301      	movs	r3, #1
 800a352:	e0e7      	b.n	800a524 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a354:	4b75      	ldr	r3, [pc, #468]	; (800a52c <HAL_RCC_ClockConfig+0x1ec>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f003 0307 	and.w	r3, r3, #7
 800a35c:	683a      	ldr	r2, [r7, #0]
 800a35e:	429a      	cmp	r2, r3
 800a360:	d910      	bls.n	800a384 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a362:	4b72      	ldr	r3, [pc, #456]	; (800a52c <HAL_RCC_ClockConfig+0x1ec>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f023 0207 	bic.w	r2, r3, #7
 800a36a:	4970      	ldr	r1, [pc, #448]	; (800a52c <HAL_RCC_ClockConfig+0x1ec>)
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	4313      	orrs	r3, r2
 800a370:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a372:	4b6e      	ldr	r3, [pc, #440]	; (800a52c <HAL_RCC_ClockConfig+0x1ec>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f003 0307 	and.w	r3, r3, #7
 800a37a:	683a      	ldr	r2, [r7, #0]
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d001      	beq.n	800a384 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a380:	2301      	movs	r3, #1
 800a382:	e0cf      	b.n	800a524 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f003 0302 	and.w	r3, r3, #2
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d010      	beq.n	800a3b2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	689a      	ldr	r2, [r3, #8]
 800a394:	4b66      	ldr	r3, [pc, #408]	; (800a530 <HAL_RCC_ClockConfig+0x1f0>)
 800a396:	689b      	ldr	r3, [r3, #8]
 800a398:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d908      	bls.n	800a3b2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a3a0:	4b63      	ldr	r3, [pc, #396]	; (800a530 <HAL_RCC_ClockConfig+0x1f0>)
 800a3a2:	689b      	ldr	r3, [r3, #8]
 800a3a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	689b      	ldr	r3, [r3, #8]
 800a3ac:	4960      	ldr	r1, [pc, #384]	; (800a530 <HAL_RCC_ClockConfig+0x1f0>)
 800a3ae:	4313      	orrs	r3, r2
 800a3b0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f003 0301 	and.w	r3, r3, #1
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d04c      	beq.n	800a458 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	2b03      	cmp	r3, #3
 800a3c4:	d107      	bne.n	800a3d6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a3c6:	4b5a      	ldr	r3, [pc, #360]	; (800a530 <HAL_RCC_ClockConfig+0x1f0>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d121      	bne.n	800a416 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	e0a6      	b.n	800a524 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	685b      	ldr	r3, [r3, #4]
 800a3da:	2b02      	cmp	r3, #2
 800a3dc:	d107      	bne.n	800a3ee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a3de:	4b54      	ldr	r3, [pc, #336]	; (800a530 <HAL_RCC_ClockConfig+0x1f0>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d115      	bne.n	800a416 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	e09a      	b.n	800a524 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	685b      	ldr	r3, [r3, #4]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d107      	bne.n	800a406 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a3f6:	4b4e      	ldr	r3, [pc, #312]	; (800a530 <HAL_RCC_ClockConfig+0x1f0>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f003 0302 	and.w	r3, r3, #2
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d109      	bne.n	800a416 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800a402:	2301      	movs	r3, #1
 800a404:	e08e      	b.n	800a524 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a406:	4b4a      	ldr	r3, [pc, #296]	; (800a530 <HAL_RCC_ClockConfig+0x1f0>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d101      	bne.n	800a416 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800a412:	2301      	movs	r3, #1
 800a414:	e086      	b.n	800a524 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a416:	4b46      	ldr	r3, [pc, #280]	; (800a530 <HAL_RCC_ClockConfig+0x1f0>)
 800a418:	689b      	ldr	r3, [r3, #8]
 800a41a:	f023 0203 	bic.w	r2, r3, #3
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	685b      	ldr	r3, [r3, #4]
 800a422:	4943      	ldr	r1, [pc, #268]	; (800a530 <HAL_RCC_ClockConfig+0x1f0>)
 800a424:	4313      	orrs	r3, r2
 800a426:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a428:	f7fd f892 	bl	8007550 <HAL_GetTick>
 800a42c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a42e:	e00a      	b.n	800a446 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a430:	f7fd f88e 	bl	8007550 <HAL_GetTick>
 800a434:	4602      	mov	r2, r0
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	1ad3      	subs	r3, r2, r3
 800a43a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a43e:	4293      	cmp	r3, r2
 800a440:	d901      	bls.n	800a446 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800a442:	2303      	movs	r3, #3
 800a444:	e06e      	b.n	800a524 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a446:	4b3a      	ldr	r3, [pc, #232]	; (800a530 <HAL_RCC_ClockConfig+0x1f0>)
 800a448:	689b      	ldr	r3, [r3, #8]
 800a44a:	f003 020c 	and.w	r2, r3, #12
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	685b      	ldr	r3, [r3, #4]
 800a452:	009b      	lsls	r3, r3, #2
 800a454:	429a      	cmp	r2, r3
 800a456:	d1eb      	bne.n	800a430 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f003 0302 	and.w	r3, r3, #2
 800a460:	2b00      	cmp	r3, #0
 800a462:	d010      	beq.n	800a486 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	689a      	ldr	r2, [r3, #8]
 800a468:	4b31      	ldr	r3, [pc, #196]	; (800a530 <HAL_RCC_ClockConfig+0x1f0>)
 800a46a:	689b      	ldr	r3, [r3, #8]
 800a46c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a470:	429a      	cmp	r2, r3
 800a472:	d208      	bcs.n	800a486 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a474:	4b2e      	ldr	r3, [pc, #184]	; (800a530 <HAL_RCC_ClockConfig+0x1f0>)
 800a476:	689b      	ldr	r3, [r3, #8]
 800a478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	689b      	ldr	r3, [r3, #8]
 800a480:	492b      	ldr	r1, [pc, #172]	; (800a530 <HAL_RCC_ClockConfig+0x1f0>)
 800a482:	4313      	orrs	r3, r2
 800a484:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a486:	4b29      	ldr	r3, [pc, #164]	; (800a52c <HAL_RCC_ClockConfig+0x1ec>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f003 0307 	and.w	r3, r3, #7
 800a48e:	683a      	ldr	r2, [r7, #0]
 800a490:	429a      	cmp	r2, r3
 800a492:	d210      	bcs.n	800a4b6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a494:	4b25      	ldr	r3, [pc, #148]	; (800a52c <HAL_RCC_ClockConfig+0x1ec>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f023 0207 	bic.w	r2, r3, #7
 800a49c:	4923      	ldr	r1, [pc, #140]	; (800a52c <HAL_RCC_ClockConfig+0x1ec>)
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a4a4:	4b21      	ldr	r3, [pc, #132]	; (800a52c <HAL_RCC_ClockConfig+0x1ec>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f003 0307 	and.w	r3, r3, #7
 800a4ac:	683a      	ldr	r2, [r7, #0]
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d001      	beq.n	800a4b6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	e036      	b.n	800a524 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f003 0304 	and.w	r3, r3, #4
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d008      	beq.n	800a4d4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a4c2:	4b1b      	ldr	r3, [pc, #108]	; (800a530 <HAL_RCC_ClockConfig+0x1f0>)
 800a4c4:	689b      	ldr	r3, [r3, #8]
 800a4c6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	68db      	ldr	r3, [r3, #12]
 800a4ce:	4918      	ldr	r1, [pc, #96]	; (800a530 <HAL_RCC_ClockConfig+0x1f0>)
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f003 0308 	and.w	r3, r3, #8
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d009      	beq.n	800a4f4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a4e0:	4b13      	ldr	r3, [pc, #76]	; (800a530 <HAL_RCC_ClockConfig+0x1f0>)
 800a4e2:	689b      	ldr	r3, [r3, #8]
 800a4e4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	691b      	ldr	r3, [r3, #16]
 800a4ec:	00db      	lsls	r3, r3, #3
 800a4ee:	4910      	ldr	r1, [pc, #64]	; (800a530 <HAL_RCC_ClockConfig+0x1f0>)
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a4f4:	f000 f824 	bl	800a540 <HAL_RCC_GetSysClockFreq>
 800a4f8:	4602      	mov	r2, r0
 800a4fa:	4b0d      	ldr	r3, [pc, #52]	; (800a530 <HAL_RCC_ClockConfig+0x1f0>)
 800a4fc:	689b      	ldr	r3, [r3, #8]
 800a4fe:	091b      	lsrs	r3, r3, #4
 800a500:	f003 030f 	and.w	r3, r3, #15
 800a504:	490b      	ldr	r1, [pc, #44]	; (800a534 <HAL_RCC_ClockConfig+0x1f4>)
 800a506:	5ccb      	ldrb	r3, [r1, r3]
 800a508:	f003 031f 	and.w	r3, r3, #31
 800a50c:	fa22 f303 	lsr.w	r3, r2, r3
 800a510:	4a09      	ldr	r2, [pc, #36]	; (800a538 <HAL_RCC_ClockConfig+0x1f8>)
 800a512:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800a514:	4b09      	ldr	r3, [pc, #36]	; (800a53c <HAL_RCC_ClockConfig+0x1fc>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4618      	mov	r0, r3
 800a51a:	f7fc f83b 	bl	8006594 <HAL_InitTick>
 800a51e:	4603      	mov	r3, r0
 800a520:	72fb      	strb	r3, [r7, #11]

  return status;
 800a522:	7afb      	ldrb	r3, [r7, #11]
}
 800a524:	4618      	mov	r0, r3
 800a526:	3710      	adds	r7, #16
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}
 800a52c:	40022000 	.word	0x40022000
 800a530:	40021000 	.word	0x40021000
 800a534:	08018cfc 	.word	0x08018cfc
 800a538:	20000134 	.word	0x20000134
 800a53c:	20000164 	.word	0x20000164

0800a540 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a540:	b480      	push	{r7}
 800a542:	b089      	sub	sp, #36	; 0x24
 800a544:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800a546:	2300      	movs	r3, #0
 800a548:	61fb      	str	r3, [r7, #28]
 800a54a:	2300      	movs	r3, #0
 800a54c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a54e:	4b3e      	ldr	r3, [pc, #248]	; (800a648 <HAL_RCC_GetSysClockFreq+0x108>)
 800a550:	689b      	ldr	r3, [r3, #8]
 800a552:	f003 030c 	and.w	r3, r3, #12
 800a556:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a558:	4b3b      	ldr	r3, [pc, #236]	; (800a648 <HAL_RCC_GetSysClockFreq+0x108>)
 800a55a:	68db      	ldr	r3, [r3, #12]
 800a55c:	f003 0303 	and.w	r3, r3, #3
 800a560:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d005      	beq.n	800a574 <HAL_RCC_GetSysClockFreq+0x34>
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	2b0c      	cmp	r3, #12
 800a56c:	d121      	bne.n	800a5b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	2b01      	cmp	r3, #1
 800a572:	d11e      	bne.n	800a5b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800a574:	4b34      	ldr	r3, [pc, #208]	; (800a648 <HAL_RCC_GetSysClockFreq+0x108>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f003 0308 	and.w	r3, r3, #8
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d107      	bne.n	800a590 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800a580:	4b31      	ldr	r3, [pc, #196]	; (800a648 <HAL_RCC_GetSysClockFreq+0x108>)
 800a582:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a586:	0a1b      	lsrs	r3, r3, #8
 800a588:	f003 030f 	and.w	r3, r3, #15
 800a58c:	61fb      	str	r3, [r7, #28]
 800a58e:	e005      	b.n	800a59c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800a590:	4b2d      	ldr	r3, [pc, #180]	; (800a648 <HAL_RCC_GetSysClockFreq+0x108>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	091b      	lsrs	r3, r3, #4
 800a596:	f003 030f 	and.w	r3, r3, #15
 800a59a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800a59c:	4a2b      	ldr	r2, [pc, #172]	; (800a64c <HAL_RCC_GetSysClockFreq+0x10c>)
 800a59e:	69fb      	ldr	r3, [r7, #28]
 800a5a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d10d      	bne.n	800a5c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800a5ac:	69fb      	ldr	r3, [r7, #28]
 800a5ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a5b0:	e00a      	b.n	800a5c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	2b04      	cmp	r3, #4
 800a5b6:	d102      	bne.n	800a5be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a5b8:	4b25      	ldr	r3, [pc, #148]	; (800a650 <HAL_RCC_GetSysClockFreq+0x110>)
 800a5ba:	61bb      	str	r3, [r7, #24]
 800a5bc:	e004      	b.n	800a5c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	2b08      	cmp	r3, #8
 800a5c2:	d101      	bne.n	800a5c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a5c4:	4b23      	ldr	r3, [pc, #140]	; (800a654 <HAL_RCC_GetSysClockFreq+0x114>)
 800a5c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	2b0c      	cmp	r3, #12
 800a5cc:	d134      	bne.n	800a638 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a5ce:	4b1e      	ldr	r3, [pc, #120]	; (800a648 <HAL_RCC_GetSysClockFreq+0x108>)
 800a5d0:	68db      	ldr	r3, [r3, #12]
 800a5d2:	f003 0303 	and.w	r3, r3, #3
 800a5d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	2b02      	cmp	r3, #2
 800a5dc:	d003      	beq.n	800a5e6 <HAL_RCC_GetSysClockFreq+0xa6>
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	2b03      	cmp	r3, #3
 800a5e2:	d003      	beq.n	800a5ec <HAL_RCC_GetSysClockFreq+0xac>
 800a5e4:	e005      	b.n	800a5f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800a5e6:	4b1a      	ldr	r3, [pc, #104]	; (800a650 <HAL_RCC_GetSysClockFreq+0x110>)
 800a5e8:	617b      	str	r3, [r7, #20]
      break;
 800a5ea:	e005      	b.n	800a5f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800a5ec:	4b19      	ldr	r3, [pc, #100]	; (800a654 <HAL_RCC_GetSysClockFreq+0x114>)
 800a5ee:	617b      	str	r3, [r7, #20]
      break;
 800a5f0:	e002      	b.n	800a5f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800a5f2:	69fb      	ldr	r3, [r7, #28]
 800a5f4:	617b      	str	r3, [r7, #20]
      break;
 800a5f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a5f8:	4b13      	ldr	r3, [pc, #76]	; (800a648 <HAL_RCC_GetSysClockFreq+0x108>)
 800a5fa:	68db      	ldr	r3, [r3, #12]
 800a5fc:	091b      	lsrs	r3, r3, #4
 800a5fe:	f003 0307 	and.w	r3, r3, #7
 800a602:	3301      	adds	r3, #1
 800a604:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800a606:	4b10      	ldr	r3, [pc, #64]	; (800a648 <HAL_RCC_GetSysClockFreq+0x108>)
 800a608:	68db      	ldr	r3, [r3, #12]
 800a60a:	0a1b      	lsrs	r3, r3, #8
 800a60c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a610:	697a      	ldr	r2, [r7, #20]
 800a612:	fb03 f202 	mul.w	r2, r3, r2
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	fbb2 f3f3 	udiv	r3, r2, r3
 800a61c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a61e:	4b0a      	ldr	r3, [pc, #40]	; (800a648 <HAL_RCC_GetSysClockFreq+0x108>)
 800a620:	68db      	ldr	r3, [r3, #12]
 800a622:	0e5b      	lsrs	r3, r3, #25
 800a624:	f003 0303 	and.w	r3, r3, #3
 800a628:	3301      	adds	r3, #1
 800a62a:	005b      	lsls	r3, r3, #1
 800a62c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800a62e:	697a      	ldr	r2, [r7, #20]
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	fbb2 f3f3 	udiv	r3, r2, r3
 800a636:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800a638:	69bb      	ldr	r3, [r7, #24]
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3724      	adds	r7, #36	; 0x24
 800a63e:	46bd      	mov	sp, r7
 800a640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a644:	4770      	bx	lr
 800a646:	bf00      	nop
 800a648:	40021000 	.word	0x40021000
 800a64c:	08018d14 	.word	0x08018d14
 800a650:	00f42400 	.word	0x00f42400
 800a654:	007a1200 	.word	0x007a1200

0800a658 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a658:	b480      	push	{r7}
 800a65a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a65c:	4b03      	ldr	r3, [pc, #12]	; (800a66c <HAL_RCC_GetHCLKFreq+0x14>)
 800a65e:	681b      	ldr	r3, [r3, #0]
}
 800a660:	4618      	mov	r0, r3
 800a662:	46bd      	mov	sp, r7
 800a664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a668:	4770      	bx	lr
 800a66a:	bf00      	nop
 800a66c:	20000134 	.word	0x20000134

0800a670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a674:	f7ff fff0 	bl	800a658 <HAL_RCC_GetHCLKFreq>
 800a678:	4602      	mov	r2, r0
 800a67a:	4b06      	ldr	r3, [pc, #24]	; (800a694 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a67c:	689b      	ldr	r3, [r3, #8]
 800a67e:	0a1b      	lsrs	r3, r3, #8
 800a680:	f003 0307 	and.w	r3, r3, #7
 800a684:	4904      	ldr	r1, [pc, #16]	; (800a698 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a686:	5ccb      	ldrb	r3, [r1, r3]
 800a688:	f003 031f 	and.w	r3, r3, #31
 800a68c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a690:	4618      	mov	r0, r3
 800a692:	bd80      	pop	{r7, pc}
 800a694:	40021000 	.word	0x40021000
 800a698:	08018d0c 	.word	0x08018d0c

0800a69c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a6a0:	f7ff ffda 	bl	800a658 <HAL_RCC_GetHCLKFreq>
 800a6a4:	4602      	mov	r2, r0
 800a6a6:	4b06      	ldr	r3, [pc, #24]	; (800a6c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a6a8:	689b      	ldr	r3, [r3, #8]
 800a6aa:	0adb      	lsrs	r3, r3, #11
 800a6ac:	f003 0307 	and.w	r3, r3, #7
 800a6b0:	4904      	ldr	r1, [pc, #16]	; (800a6c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a6b2:	5ccb      	ldrb	r3, [r1, r3]
 800a6b4:	f003 031f 	and.w	r3, r3, #31
 800a6b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	bd80      	pop	{r7, pc}
 800a6c0:	40021000 	.word	0x40021000
 800a6c4:	08018d0c 	.word	0x08018d0c

0800a6c8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b083      	sub	sp, #12
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	220f      	movs	r2, #15
 800a6d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800a6d8:	4b12      	ldr	r3, [pc, #72]	; (800a724 <HAL_RCC_GetClockConfig+0x5c>)
 800a6da:	689b      	ldr	r3, [r3, #8]
 800a6dc:	f003 0203 	and.w	r2, r3, #3
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800a6e4:	4b0f      	ldr	r3, [pc, #60]	; (800a724 <HAL_RCC_GetClockConfig+0x5c>)
 800a6e6:	689b      	ldr	r3, [r3, #8]
 800a6e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800a6f0:	4b0c      	ldr	r3, [pc, #48]	; (800a724 <HAL_RCC_GetClockConfig+0x5c>)
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800a6fc:	4b09      	ldr	r3, [pc, #36]	; (800a724 <HAL_RCC_GetClockConfig+0x5c>)
 800a6fe:	689b      	ldr	r3, [r3, #8]
 800a700:	08db      	lsrs	r3, r3, #3
 800a702:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800a70a:	4b07      	ldr	r3, [pc, #28]	; (800a728 <HAL_RCC_GetClockConfig+0x60>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f003 0207 	and.w	r2, r3, #7
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	601a      	str	r2, [r3, #0]
}
 800a716:	bf00      	nop
 800a718:	370c      	adds	r7, #12
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr
 800a722:	bf00      	nop
 800a724:	40021000 	.word	0x40021000
 800a728:	40022000 	.word	0x40022000

0800a72c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b086      	sub	sp, #24
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800a734:	2300      	movs	r3, #0
 800a736:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a738:	4b2a      	ldr	r3, [pc, #168]	; (800a7e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a73a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a73c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a740:	2b00      	cmp	r3, #0
 800a742:	d003      	beq.n	800a74c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800a744:	f7ff f974 	bl	8009a30 <HAL_PWREx_GetVoltageRange>
 800a748:	6178      	str	r0, [r7, #20]
 800a74a:	e014      	b.n	800a776 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800a74c:	4b25      	ldr	r3, [pc, #148]	; (800a7e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a74e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a750:	4a24      	ldr	r2, [pc, #144]	; (800a7e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a756:	6593      	str	r3, [r2, #88]	; 0x58
 800a758:	4b22      	ldr	r3, [pc, #136]	; (800a7e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a75a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a75c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a760:	60fb      	str	r3, [r7, #12]
 800a762:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800a764:	f7ff f964 	bl	8009a30 <HAL_PWREx_GetVoltageRange>
 800a768:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800a76a:	4b1e      	ldr	r3, [pc, #120]	; (800a7e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a76c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a76e:	4a1d      	ldr	r2, [pc, #116]	; (800a7e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a770:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a774:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a77c:	d10b      	bne.n	800a796 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2b80      	cmp	r3, #128	; 0x80
 800a782:	d919      	bls.n	800a7b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2ba0      	cmp	r3, #160	; 0xa0
 800a788:	d902      	bls.n	800a790 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a78a:	2302      	movs	r3, #2
 800a78c:	613b      	str	r3, [r7, #16]
 800a78e:	e013      	b.n	800a7b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a790:	2301      	movs	r3, #1
 800a792:	613b      	str	r3, [r7, #16]
 800a794:	e010      	b.n	800a7b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2b80      	cmp	r3, #128	; 0x80
 800a79a:	d902      	bls.n	800a7a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800a79c:	2303      	movs	r3, #3
 800a79e:	613b      	str	r3, [r7, #16]
 800a7a0:	e00a      	b.n	800a7b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2b80      	cmp	r3, #128	; 0x80
 800a7a6:	d102      	bne.n	800a7ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a7a8:	2302      	movs	r3, #2
 800a7aa:	613b      	str	r3, [r7, #16]
 800a7ac:	e004      	b.n	800a7b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2b70      	cmp	r3, #112	; 0x70
 800a7b2:	d101      	bne.n	800a7b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a7b8:	4b0b      	ldr	r3, [pc, #44]	; (800a7e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f023 0207 	bic.w	r2, r3, #7
 800a7c0:	4909      	ldr	r1, [pc, #36]	; (800a7e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800a7c8:	4b07      	ldr	r3, [pc, #28]	; (800a7e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f003 0307 	and.w	r3, r3, #7
 800a7d0:	693a      	ldr	r2, [r7, #16]
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d001      	beq.n	800a7da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	e000      	b.n	800a7dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800a7da:	2300      	movs	r3, #0
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3718      	adds	r7, #24
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}
 800a7e4:	40021000 	.word	0x40021000
 800a7e8:	40022000 	.word	0x40022000

0800a7ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b086      	sub	sp, #24
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a804:	2b00      	cmp	r3, #0
 800a806:	d041      	beq.n	800a88c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a80c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a810:	d02a      	beq.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800a812:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a816:	d824      	bhi.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a818:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a81c:	d008      	beq.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a81e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a822:	d81e      	bhi.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a824:	2b00      	cmp	r3, #0
 800a826:	d00a      	beq.n	800a83e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800a828:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a82c:	d010      	beq.n	800a850 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a82e:	e018      	b.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a830:	4b86      	ldr	r3, [pc, #536]	; (800aa4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a832:	68db      	ldr	r3, [r3, #12]
 800a834:	4a85      	ldr	r2, [pc, #532]	; (800aa4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a836:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a83a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a83c:	e015      	b.n	800a86a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	3304      	adds	r3, #4
 800a842:	2100      	movs	r1, #0
 800a844:	4618      	mov	r0, r3
 800a846:	f000 fabb 	bl	800adc0 <RCCEx_PLLSAI1_Config>
 800a84a:	4603      	mov	r3, r0
 800a84c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a84e:	e00c      	b.n	800a86a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	3320      	adds	r3, #32
 800a854:	2100      	movs	r1, #0
 800a856:	4618      	mov	r0, r3
 800a858:	f000 fba6 	bl	800afa8 <RCCEx_PLLSAI2_Config>
 800a85c:	4603      	mov	r3, r0
 800a85e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a860:	e003      	b.n	800a86a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a862:	2301      	movs	r3, #1
 800a864:	74fb      	strb	r3, [r7, #19]
      break;
 800a866:	e000      	b.n	800a86a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800a868:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a86a:	7cfb      	ldrb	r3, [r7, #19]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d10b      	bne.n	800a888 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a870:	4b76      	ldr	r3, [pc, #472]	; (800aa4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a876:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a87e:	4973      	ldr	r1, [pc, #460]	; (800aa4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a880:	4313      	orrs	r3, r2
 800a882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800a886:	e001      	b.n	800a88c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a888:	7cfb      	ldrb	r3, [r7, #19]
 800a88a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a894:	2b00      	cmp	r3, #0
 800a896:	d041      	beq.n	800a91c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a89c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a8a0:	d02a      	beq.n	800a8f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800a8a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a8a6:	d824      	bhi.n	800a8f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800a8a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a8ac:	d008      	beq.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800a8ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a8b2:	d81e      	bhi.n	800a8f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d00a      	beq.n	800a8ce <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800a8b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a8bc:	d010      	beq.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800a8be:	e018      	b.n	800a8f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a8c0:	4b62      	ldr	r3, [pc, #392]	; (800aa4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a8c2:	68db      	ldr	r3, [r3, #12]
 800a8c4:	4a61      	ldr	r2, [pc, #388]	; (800aa4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a8c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8ca:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a8cc:	e015      	b.n	800a8fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	3304      	adds	r3, #4
 800a8d2:	2100      	movs	r1, #0
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f000 fa73 	bl	800adc0 <RCCEx_PLLSAI1_Config>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a8de:	e00c      	b.n	800a8fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	3320      	adds	r3, #32
 800a8e4:	2100      	movs	r1, #0
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f000 fb5e 	bl	800afa8 <RCCEx_PLLSAI2_Config>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a8f0:	e003      	b.n	800a8fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	74fb      	strb	r3, [r7, #19]
      break;
 800a8f6:	e000      	b.n	800a8fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800a8f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a8fa:	7cfb      	ldrb	r3, [r7, #19]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d10b      	bne.n	800a918 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a900:	4b52      	ldr	r3, [pc, #328]	; (800aa4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a906:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a90e:	494f      	ldr	r1, [pc, #316]	; (800aa4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a910:	4313      	orrs	r3, r2
 800a912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800a916:	e001      	b.n	800a91c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a918:	7cfb      	ldrb	r3, [r7, #19]
 800a91a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a924:	2b00      	cmp	r3, #0
 800a926:	f000 80a0 	beq.w	800aa6a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a92a:	2300      	movs	r3, #0
 800a92c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a92e:	4b47      	ldr	r3, [pc, #284]	; (800aa4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a936:	2b00      	cmp	r3, #0
 800a938:	d101      	bne.n	800a93e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800a93a:	2301      	movs	r3, #1
 800a93c:	e000      	b.n	800a940 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800a93e:	2300      	movs	r3, #0
 800a940:	2b00      	cmp	r3, #0
 800a942:	d00d      	beq.n	800a960 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a944:	4b41      	ldr	r3, [pc, #260]	; (800aa4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a948:	4a40      	ldr	r2, [pc, #256]	; (800aa4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a94a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a94e:	6593      	str	r3, [r2, #88]	; 0x58
 800a950:	4b3e      	ldr	r3, [pc, #248]	; (800aa4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a958:	60bb      	str	r3, [r7, #8]
 800a95a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a95c:	2301      	movs	r3, #1
 800a95e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a960:	4b3b      	ldr	r3, [pc, #236]	; (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4a3a      	ldr	r2, [pc, #232]	; (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a966:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a96a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a96c:	f7fc fdf0 	bl	8007550 <HAL_GetTick>
 800a970:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a972:	e009      	b.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a974:	f7fc fdec 	bl	8007550 <HAL_GetTick>
 800a978:	4602      	mov	r2, r0
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	1ad3      	subs	r3, r2, r3
 800a97e:	2b02      	cmp	r3, #2
 800a980:	d902      	bls.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800a982:	2303      	movs	r3, #3
 800a984:	74fb      	strb	r3, [r7, #19]
        break;
 800a986:	e005      	b.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a988:	4b31      	ldr	r3, [pc, #196]	; (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a990:	2b00      	cmp	r3, #0
 800a992:	d0ef      	beq.n	800a974 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800a994:	7cfb      	ldrb	r3, [r7, #19]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d15c      	bne.n	800aa54 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a99a:	4b2c      	ldr	r3, [pc, #176]	; (800aa4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a99c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d01f      	beq.n	800a9ec <HAL_RCCEx_PeriphCLKConfig+0x200>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9b2:	697a      	ldr	r2, [r7, #20]
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d019      	beq.n	800a9ec <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a9b8:	4b24      	ldr	r3, [pc, #144]	; (800aa4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a9ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a9c4:	4b21      	ldr	r3, [pc, #132]	; (800aa4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a9c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9ca:	4a20      	ldr	r2, [pc, #128]	; (800aa4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a9cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a9d4:	4b1d      	ldr	r3, [pc, #116]	; (800aa4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a9d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9da:	4a1c      	ldr	r2, [pc, #112]	; (800aa4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a9dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a9e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a9e4:	4a19      	ldr	r2, [pc, #100]	; (800aa4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	f003 0301 	and.w	r3, r3, #1
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d016      	beq.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9f6:	f7fc fdab 	bl	8007550 <HAL_GetTick>
 800a9fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a9fc:	e00b      	b.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a9fe:	f7fc fda7 	bl	8007550 <HAL_GetTick>
 800aa02:	4602      	mov	r2, r0
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	1ad3      	subs	r3, r2, r3
 800aa08:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d902      	bls.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800aa10:	2303      	movs	r3, #3
 800aa12:	74fb      	strb	r3, [r7, #19]
            break;
 800aa14:	e006      	b.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aa16:	4b0d      	ldr	r3, [pc, #52]	; (800aa4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800aa18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa1c:	f003 0302 	and.w	r3, r3, #2
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d0ec      	beq.n	800a9fe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800aa24:	7cfb      	ldrb	r3, [r7, #19]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d10c      	bne.n	800aa44 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aa2a:	4b08      	ldr	r3, [pc, #32]	; (800aa4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800aa2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa3a:	4904      	ldr	r1, [pc, #16]	; (800aa4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800aa3c:	4313      	orrs	r3, r2
 800aa3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800aa42:	e009      	b.n	800aa58 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800aa44:	7cfb      	ldrb	r3, [r7, #19]
 800aa46:	74bb      	strb	r3, [r7, #18]
 800aa48:	e006      	b.n	800aa58 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800aa4a:	bf00      	nop
 800aa4c:	40021000 	.word	0x40021000
 800aa50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa54:	7cfb      	ldrb	r3, [r7, #19]
 800aa56:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800aa58:	7c7b      	ldrb	r3, [r7, #17]
 800aa5a:	2b01      	cmp	r3, #1
 800aa5c:	d105      	bne.n	800aa6a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aa5e:	4b9e      	ldr	r3, [pc, #632]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800aa60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa62:	4a9d      	ldr	r2, [pc, #628]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800aa64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aa68:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f003 0301 	and.w	r3, r3, #1
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d00a      	beq.n	800aa8c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800aa76:	4b98      	ldr	r3, [pc, #608]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800aa78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa7c:	f023 0203 	bic.w	r2, r3, #3
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa84:	4994      	ldr	r1, [pc, #592]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800aa86:	4313      	orrs	r3, r2
 800aa88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f003 0302 	and.w	r3, r3, #2
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d00a      	beq.n	800aaae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800aa98:	4b8f      	ldr	r3, [pc, #572]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800aa9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa9e:	f023 020c 	bic.w	r2, r3, #12
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaa6:	498c      	ldr	r1, [pc, #560]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800aaa8:	4313      	orrs	r3, r2
 800aaaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f003 0304 	and.w	r3, r3, #4
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d00a      	beq.n	800aad0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800aaba:	4b87      	ldr	r3, [pc, #540]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800aabc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aac0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aac8:	4983      	ldr	r1, [pc, #524]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800aaca:	4313      	orrs	r3, r2
 800aacc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f003 0308 	and.w	r3, r3, #8
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d00a      	beq.n	800aaf2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800aadc:	4b7e      	ldr	r3, [pc, #504]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800aade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aae2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaea:	497b      	ldr	r1, [pc, #492]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800aaec:	4313      	orrs	r3, r2
 800aaee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f003 0310 	and.w	r3, r3, #16
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d00a      	beq.n	800ab14 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800aafe:	4b76      	ldr	r3, [pc, #472]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ab00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab0c:	4972      	ldr	r1, [pc, #456]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ab0e:	4313      	orrs	r3, r2
 800ab10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f003 0320 	and.w	r3, r3, #32
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d00a      	beq.n	800ab36 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ab20:	4b6d      	ldr	r3, [pc, #436]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ab22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab26:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab2e:	496a      	ldr	r1, [pc, #424]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ab30:	4313      	orrs	r3, r2
 800ab32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d00a      	beq.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ab42:	4b65      	ldr	r3, [pc, #404]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ab44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab50:	4961      	ldr	r1, [pc, #388]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ab52:	4313      	orrs	r3, r2
 800ab54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d00a      	beq.n	800ab7a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ab64:	4b5c      	ldr	r3, [pc, #368]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ab66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab72:	4959      	ldr	r1, [pc, #356]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ab74:	4313      	orrs	r3, r2
 800ab76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d00a      	beq.n	800ab9c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ab86:	4b54      	ldr	r3, [pc, #336]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ab88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab8c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab94:	4950      	ldr	r1, [pc, #320]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ab96:	4313      	orrs	r3, r2
 800ab98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d00a      	beq.n	800abbe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800aba8:	4b4b      	ldr	r3, [pc, #300]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800abaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abb6:	4948      	ldr	r1, [pc, #288]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800abb8:	4313      	orrs	r3, r2
 800abba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d00a      	beq.n	800abe0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800abca:	4b43      	ldr	r3, [pc, #268]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800abcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abd8:	493f      	ldr	r1, [pc, #252]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800abda:	4313      	orrs	r3, r2
 800abdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d028      	beq.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800abec:	4b3a      	ldr	r3, [pc, #232]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800abee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abf2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abfa:	4937      	ldr	r1, [pc, #220]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800abfc:	4313      	orrs	r3, r2
 800abfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ac0a:	d106      	bne.n	800ac1a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ac0c:	4b32      	ldr	r3, [pc, #200]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ac0e:	68db      	ldr	r3, [r3, #12]
 800ac10:	4a31      	ldr	r2, [pc, #196]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ac12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac16:	60d3      	str	r3, [r2, #12]
 800ac18:	e011      	b.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ac22:	d10c      	bne.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	3304      	adds	r3, #4
 800ac28:	2101      	movs	r1, #1
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f000 f8c8 	bl	800adc0 <RCCEx_PLLSAI1_Config>
 800ac30:	4603      	mov	r3, r0
 800ac32:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800ac34:	7cfb      	ldrb	r3, [r7, #19]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d001      	beq.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800ac3a:	7cfb      	ldrb	r3, [r7, #19]
 800ac3c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d028      	beq.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800ac4a:	4b23      	ldr	r3, [pc, #140]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ac4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac50:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac58:	491f      	ldr	r1, [pc, #124]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ac5a:	4313      	orrs	r3, r2
 800ac5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ac68:	d106      	bne.n	800ac78 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ac6a:	4b1b      	ldr	r3, [pc, #108]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ac6c:	68db      	ldr	r3, [r3, #12]
 800ac6e:	4a1a      	ldr	r2, [pc, #104]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ac70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac74:	60d3      	str	r3, [r2, #12]
 800ac76:	e011      	b.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ac80:	d10c      	bne.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	3304      	adds	r3, #4
 800ac86:	2101      	movs	r1, #1
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f000 f899 	bl	800adc0 <RCCEx_PLLSAI1_Config>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ac92:	7cfb      	ldrb	r3, [r7, #19]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d001      	beq.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800ac98:	7cfb      	ldrb	r3, [r7, #19]
 800ac9a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d02b      	beq.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800aca8:	4b0b      	ldr	r3, [pc, #44]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800acaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acb6:	4908      	ldr	r1, [pc, #32]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800acb8:	4313      	orrs	r3, r2
 800acba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800acc6:	d109      	bne.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800acc8:	4b03      	ldr	r3, [pc, #12]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800acca:	68db      	ldr	r3, [r3, #12]
 800accc:	4a02      	ldr	r2, [pc, #8]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800acce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800acd2:	60d3      	str	r3, [r2, #12]
 800acd4:	e014      	b.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800acd6:	bf00      	nop
 800acd8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ace0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ace4:	d10c      	bne.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	3304      	adds	r3, #4
 800acea:	2101      	movs	r1, #1
 800acec:	4618      	mov	r0, r3
 800acee:	f000 f867 	bl	800adc0 <RCCEx_PLLSAI1_Config>
 800acf2:	4603      	mov	r3, r0
 800acf4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800acf6:	7cfb      	ldrb	r3, [r7, #19]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d001      	beq.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800acfc:	7cfb      	ldrb	r3, [r7, #19]
 800acfe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d02f      	beq.n	800ad6c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ad0c:	4b2b      	ldr	r3, [pc, #172]	; (800adbc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800ad0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad12:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad1a:	4928      	ldr	r1, [pc, #160]	; (800adbc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad2a:	d10d      	bne.n	800ad48 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	3304      	adds	r3, #4
 800ad30:	2102      	movs	r1, #2
 800ad32:	4618      	mov	r0, r3
 800ad34:	f000 f844 	bl	800adc0 <RCCEx_PLLSAI1_Config>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ad3c:	7cfb      	ldrb	r3, [r7, #19]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d014      	beq.n	800ad6c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800ad42:	7cfb      	ldrb	r3, [r7, #19]
 800ad44:	74bb      	strb	r3, [r7, #18]
 800ad46:	e011      	b.n	800ad6c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad50:	d10c      	bne.n	800ad6c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	3320      	adds	r3, #32
 800ad56:	2102      	movs	r1, #2
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f000 f925 	bl	800afa8 <RCCEx_PLLSAI2_Config>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ad62:	7cfb      	ldrb	r3, [r7, #19]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d001      	beq.n	800ad6c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800ad68:	7cfb      	ldrb	r3, [r7, #19]
 800ad6a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d00a      	beq.n	800ad8e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ad78:	4b10      	ldr	r3, [pc, #64]	; (800adbc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800ad7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad7e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad86:	490d      	ldr	r1, [pc, #52]	; (800adbc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800ad88:	4313      	orrs	r3, r2
 800ad8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d00b      	beq.n	800adb2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ad9a:	4b08      	ldr	r3, [pc, #32]	; (800adbc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800ad9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ada0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800adaa:	4904      	ldr	r1, [pc, #16]	; (800adbc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800adac:	4313      	orrs	r3, r2
 800adae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800adb2:	7cbb      	ldrb	r3, [r7, #18]
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3718      	adds	r7, #24
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}
 800adbc:	40021000 	.word	0x40021000

0800adc0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b084      	sub	sp, #16
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
 800adc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800adca:	2300      	movs	r3, #0
 800adcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800adce:	4b75      	ldr	r3, [pc, #468]	; (800afa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800add0:	68db      	ldr	r3, [r3, #12]
 800add2:	f003 0303 	and.w	r3, r3, #3
 800add6:	2b00      	cmp	r3, #0
 800add8:	d018      	beq.n	800ae0c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800adda:	4b72      	ldr	r3, [pc, #456]	; (800afa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800addc:	68db      	ldr	r3, [r3, #12]
 800adde:	f003 0203 	and.w	r2, r3, #3
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	429a      	cmp	r2, r3
 800ade8:	d10d      	bne.n	800ae06 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
       ||
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d009      	beq.n	800ae06 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800adf2:	4b6c      	ldr	r3, [pc, #432]	; (800afa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800adf4:	68db      	ldr	r3, [r3, #12]
 800adf6:	091b      	lsrs	r3, r3, #4
 800adf8:	f003 0307 	and.w	r3, r3, #7
 800adfc:	1c5a      	adds	r2, r3, #1
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	685b      	ldr	r3, [r3, #4]
       ||
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d047      	beq.n	800ae96 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800ae06:	2301      	movs	r3, #1
 800ae08:	73fb      	strb	r3, [r7, #15]
 800ae0a:	e044      	b.n	800ae96 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	2b03      	cmp	r3, #3
 800ae12:	d018      	beq.n	800ae46 <RCCEx_PLLSAI1_Config+0x86>
 800ae14:	2b03      	cmp	r3, #3
 800ae16:	d825      	bhi.n	800ae64 <RCCEx_PLLSAI1_Config+0xa4>
 800ae18:	2b01      	cmp	r3, #1
 800ae1a:	d002      	beq.n	800ae22 <RCCEx_PLLSAI1_Config+0x62>
 800ae1c:	2b02      	cmp	r3, #2
 800ae1e:	d009      	beq.n	800ae34 <RCCEx_PLLSAI1_Config+0x74>
 800ae20:	e020      	b.n	800ae64 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800ae22:	4b60      	ldr	r3, [pc, #384]	; (800afa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f003 0302 	and.w	r3, r3, #2
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d11d      	bne.n	800ae6a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800ae2e:	2301      	movs	r3, #1
 800ae30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ae32:	e01a      	b.n	800ae6a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800ae34:	4b5b      	ldr	r3, [pc, #364]	; (800afa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d116      	bne.n	800ae6e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800ae40:	2301      	movs	r3, #1
 800ae42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ae44:	e013      	b.n	800ae6e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800ae46:	4b57      	ldr	r3, [pc, #348]	; (800afa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d10f      	bne.n	800ae72 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800ae52:	4b54      	ldr	r3, [pc, #336]	; (800afa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d109      	bne.n	800ae72 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800ae5e:	2301      	movs	r3, #1
 800ae60:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ae62:	e006      	b.n	800ae72 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800ae64:	2301      	movs	r3, #1
 800ae66:	73fb      	strb	r3, [r7, #15]
      break;
 800ae68:	e004      	b.n	800ae74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800ae6a:	bf00      	nop
 800ae6c:	e002      	b.n	800ae74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800ae6e:	bf00      	nop
 800ae70:	e000      	b.n	800ae74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800ae72:	bf00      	nop
    }

    if(status == HAL_OK)
 800ae74:	7bfb      	ldrb	r3, [r7, #15]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d10d      	bne.n	800ae96 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800ae7a:	4b4a      	ldr	r3, [pc, #296]	; (800afa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ae7c:	68db      	ldr	r3, [r3, #12]
 800ae7e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6819      	ldr	r1, [r3, #0]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	3b01      	subs	r3, #1
 800ae8c:	011b      	lsls	r3, r3, #4
 800ae8e:	430b      	orrs	r3, r1
 800ae90:	4944      	ldr	r1, [pc, #272]	; (800afa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ae92:	4313      	orrs	r3, r2
 800ae94:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800ae96:	7bfb      	ldrb	r3, [r7, #15]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d17d      	bne.n	800af98 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800ae9c:	4b41      	ldr	r3, [pc, #260]	; (800afa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	4a40      	ldr	r2, [pc, #256]	; (800afa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800aea2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800aea6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aea8:	f7fc fb52 	bl	8007550 <HAL_GetTick>
 800aeac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800aeae:	e009      	b.n	800aec4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800aeb0:	f7fc fb4e 	bl	8007550 <HAL_GetTick>
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	1ad3      	subs	r3, r2, r3
 800aeba:	2b02      	cmp	r3, #2
 800aebc:	d902      	bls.n	800aec4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800aebe:	2303      	movs	r3, #3
 800aec0:	73fb      	strb	r3, [r7, #15]
        break;
 800aec2:	e005      	b.n	800aed0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800aec4:	4b37      	ldr	r3, [pc, #220]	; (800afa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d1ef      	bne.n	800aeb0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800aed0:	7bfb      	ldrb	r3, [r7, #15]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d160      	bne.n	800af98 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d111      	bne.n	800af00 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800aedc:	4b31      	ldr	r3, [pc, #196]	; (800afa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800aede:	691b      	ldr	r3, [r3, #16]
 800aee0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800aee4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aee8:	687a      	ldr	r2, [r7, #4]
 800aeea:	6892      	ldr	r2, [r2, #8]
 800aeec:	0211      	lsls	r1, r2, #8
 800aeee:	687a      	ldr	r2, [r7, #4]
 800aef0:	68d2      	ldr	r2, [r2, #12]
 800aef2:	0912      	lsrs	r2, r2, #4
 800aef4:	0452      	lsls	r2, r2, #17
 800aef6:	430a      	orrs	r2, r1
 800aef8:	492a      	ldr	r1, [pc, #168]	; (800afa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800aefa:	4313      	orrs	r3, r2
 800aefc:	610b      	str	r3, [r1, #16]
 800aefe:	e027      	b.n	800af50 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	2b01      	cmp	r3, #1
 800af04:	d112      	bne.n	800af2c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800af06:	4b27      	ldr	r3, [pc, #156]	; (800afa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800af08:	691b      	ldr	r3, [r3, #16]
 800af0a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800af0e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800af12:	687a      	ldr	r2, [r7, #4]
 800af14:	6892      	ldr	r2, [r2, #8]
 800af16:	0211      	lsls	r1, r2, #8
 800af18:	687a      	ldr	r2, [r7, #4]
 800af1a:	6912      	ldr	r2, [r2, #16]
 800af1c:	0852      	lsrs	r2, r2, #1
 800af1e:	3a01      	subs	r2, #1
 800af20:	0552      	lsls	r2, r2, #21
 800af22:	430a      	orrs	r2, r1
 800af24:	491f      	ldr	r1, [pc, #124]	; (800afa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800af26:	4313      	orrs	r3, r2
 800af28:	610b      	str	r3, [r1, #16]
 800af2a:	e011      	b.n	800af50 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800af2c:	4b1d      	ldr	r3, [pc, #116]	; (800afa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800af2e:	691b      	ldr	r3, [r3, #16]
 800af30:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800af34:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800af38:	687a      	ldr	r2, [r7, #4]
 800af3a:	6892      	ldr	r2, [r2, #8]
 800af3c:	0211      	lsls	r1, r2, #8
 800af3e:	687a      	ldr	r2, [r7, #4]
 800af40:	6952      	ldr	r2, [r2, #20]
 800af42:	0852      	lsrs	r2, r2, #1
 800af44:	3a01      	subs	r2, #1
 800af46:	0652      	lsls	r2, r2, #25
 800af48:	430a      	orrs	r2, r1
 800af4a:	4916      	ldr	r1, [pc, #88]	; (800afa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800af4c:	4313      	orrs	r3, r2
 800af4e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800af50:	4b14      	ldr	r3, [pc, #80]	; (800afa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	4a13      	ldr	r2, [pc, #76]	; (800afa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800af56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800af5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af5c:	f7fc faf8 	bl	8007550 <HAL_GetTick>
 800af60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800af62:	e009      	b.n	800af78 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800af64:	f7fc faf4 	bl	8007550 <HAL_GetTick>
 800af68:	4602      	mov	r2, r0
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	1ad3      	subs	r3, r2, r3
 800af6e:	2b02      	cmp	r3, #2
 800af70:	d902      	bls.n	800af78 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800af72:	2303      	movs	r3, #3
 800af74:	73fb      	strb	r3, [r7, #15]
          break;
 800af76:	e005      	b.n	800af84 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800af78:	4b0a      	ldr	r3, [pc, #40]	; (800afa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af80:	2b00      	cmp	r3, #0
 800af82:	d0ef      	beq.n	800af64 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800af84:	7bfb      	ldrb	r3, [r7, #15]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d106      	bne.n	800af98 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800af8a:	4b06      	ldr	r3, [pc, #24]	; (800afa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800af8c:	691a      	ldr	r2, [r3, #16]
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	699b      	ldr	r3, [r3, #24]
 800af92:	4904      	ldr	r1, [pc, #16]	; (800afa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800af94:	4313      	orrs	r3, r2
 800af96:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800af98:	7bfb      	ldrb	r3, [r7, #15]
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3710      	adds	r7, #16
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}
 800afa2:	bf00      	nop
 800afa4:	40021000 	.word	0x40021000

0800afa8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b084      	sub	sp, #16
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800afb2:	2300      	movs	r3, #0
 800afb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800afb6:	4b6a      	ldr	r3, [pc, #424]	; (800b160 <RCCEx_PLLSAI2_Config+0x1b8>)
 800afb8:	68db      	ldr	r3, [r3, #12]
 800afba:	f003 0303 	and.w	r3, r3, #3
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d018      	beq.n	800aff4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800afc2:	4b67      	ldr	r3, [pc, #412]	; (800b160 <RCCEx_PLLSAI2_Config+0x1b8>)
 800afc4:	68db      	ldr	r3, [r3, #12]
 800afc6:	f003 0203 	and.w	r2, r3, #3
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	429a      	cmp	r2, r3
 800afd0:	d10d      	bne.n	800afee <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
       ||
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d009      	beq.n	800afee <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800afda:	4b61      	ldr	r3, [pc, #388]	; (800b160 <RCCEx_PLLSAI2_Config+0x1b8>)
 800afdc:	68db      	ldr	r3, [r3, #12]
 800afde:	091b      	lsrs	r3, r3, #4
 800afe0:	f003 0307 	and.w	r3, r3, #7
 800afe4:	1c5a      	adds	r2, r3, #1
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	685b      	ldr	r3, [r3, #4]
       ||
 800afea:	429a      	cmp	r2, r3
 800afec:	d047      	beq.n	800b07e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800afee:	2301      	movs	r3, #1
 800aff0:	73fb      	strb	r3, [r7, #15]
 800aff2:	e044      	b.n	800b07e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	2b03      	cmp	r3, #3
 800affa:	d018      	beq.n	800b02e <RCCEx_PLLSAI2_Config+0x86>
 800affc:	2b03      	cmp	r3, #3
 800affe:	d825      	bhi.n	800b04c <RCCEx_PLLSAI2_Config+0xa4>
 800b000:	2b01      	cmp	r3, #1
 800b002:	d002      	beq.n	800b00a <RCCEx_PLLSAI2_Config+0x62>
 800b004:	2b02      	cmp	r3, #2
 800b006:	d009      	beq.n	800b01c <RCCEx_PLLSAI2_Config+0x74>
 800b008:	e020      	b.n	800b04c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b00a:	4b55      	ldr	r3, [pc, #340]	; (800b160 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f003 0302 	and.w	r3, r3, #2
 800b012:	2b00      	cmp	r3, #0
 800b014:	d11d      	bne.n	800b052 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800b016:	2301      	movs	r3, #1
 800b018:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b01a:	e01a      	b.n	800b052 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b01c:	4b50      	ldr	r3, [pc, #320]	; (800b160 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b024:	2b00      	cmp	r3, #0
 800b026:	d116      	bne.n	800b056 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800b028:	2301      	movs	r3, #1
 800b02a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b02c:	e013      	b.n	800b056 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b02e:	4b4c      	ldr	r3, [pc, #304]	; (800b160 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b036:	2b00      	cmp	r3, #0
 800b038:	d10f      	bne.n	800b05a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b03a:	4b49      	ldr	r3, [pc, #292]	; (800b160 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b042:	2b00      	cmp	r3, #0
 800b044:	d109      	bne.n	800b05a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800b046:	2301      	movs	r3, #1
 800b048:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b04a:	e006      	b.n	800b05a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800b04c:	2301      	movs	r3, #1
 800b04e:	73fb      	strb	r3, [r7, #15]
      break;
 800b050:	e004      	b.n	800b05c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800b052:	bf00      	nop
 800b054:	e002      	b.n	800b05c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800b056:	bf00      	nop
 800b058:	e000      	b.n	800b05c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800b05a:	bf00      	nop
    }

    if(status == HAL_OK)
 800b05c:	7bfb      	ldrb	r3, [r7, #15]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d10d      	bne.n	800b07e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800b062:	4b3f      	ldr	r3, [pc, #252]	; (800b160 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b064:	68db      	ldr	r3, [r3, #12]
 800b066:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6819      	ldr	r1, [r3, #0]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	685b      	ldr	r3, [r3, #4]
 800b072:	3b01      	subs	r3, #1
 800b074:	011b      	lsls	r3, r3, #4
 800b076:	430b      	orrs	r3, r1
 800b078:	4939      	ldr	r1, [pc, #228]	; (800b160 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b07a:	4313      	orrs	r3, r2
 800b07c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800b07e:	7bfb      	ldrb	r3, [r7, #15]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d167      	bne.n	800b154 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800b084:	4b36      	ldr	r3, [pc, #216]	; (800b160 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	4a35      	ldr	r2, [pc, #212]	; (800b160 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b08a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b08e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b090:	f7fc fa5e 	bl	8007550 <HAL_GetTick>
 800b094:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b096:	e009      	b.n	800b0ac <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b098:	f7fc fa5a 	bl	8007550 <HAL_GetTick>
 800b09c:	4602      	mov	r2, r0
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	1ad3      	subs	r3, r2, r3
 800b0a2:	2b02      	cmp	r3, #2
 800b0a4:	d902      	bls.n	800b0ac <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800b0a6:	2303      	movs	r3, #3
 800b0a8:	73fb      	strb	r3, [r7, #15]
        break;
 800b0aa:	e005      	b.n	800b0b8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b0ac:	4b2c      	ldr	r3, [pc, #176]	; (800b160 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d1ef      	bne.n	800b098 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800b0b8:	7bfb      	ldrb	r3, [r7, #15]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d14a      	bne.n	800b154 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d111      	bne.n	800b0e8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b0c4:	4b26      	ldr	r3, [pc, #152]	; (800b160 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b0c6:	695b      	ldr	r3, [r3, #20]
 800b0c8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800b0cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b0d0:	687a      	ldr	r2, [r7, #4]
 800b0d2:	6892      	ldr	r2, [r2, #8]
 800b0d4:	0211      	lsls	r1, r2, #8
 800b0d6:	687a      	ldr	r2, [r7, #4]
 800b0d8:	68d2      	ldr	r2, [r2, #12]
 800b0da:	0912      	lsrs	r2, r2, #4
 800b0dc:	0452      	lsls	r2, r2, #17
 800b0de:	430a      	orrs	r2, r1
 800b0e0:	491f      	ldr	r1, [pc, #124]	; (800b160 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b0e2:	4313      	orrs	r3, r2
 800b0e4:	614b      	str	r3, [r1, #20]
 800b0e6:	e011      	b.n	800b10c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b0e8:	4b1d      	ldr	r3, [pc, #116]	; (800b160 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b0ea:	695b      	ldr	r3, [r3, #20]
 800b0ec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800b0f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b0f4:	687a      	ldr	r2, [r7, #4]
 800b0f6:	6892      	ldr	r2, [r2, #8]
 800b0f8:	0211      	lsls	r1, r2, #8
 800b0fa:	687a      	ldr	r2, [r7, #4]
 800b0fc:	6912      	ldr	r2, [r2, #16]
 800b0fe:	0852      	lsrs	r2, r2, #1
 800b100:	3a01      	subs	r2, #1
 800b102:	0652      	lsls	r2, r2, #25
 800b104:	430a      	orrs	r2, r1
 800b106:	4916      	ldr	r1, [pc, #88]	; (800b160 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b108:	4313      	orrs	r3, r2
 800b10a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800b10c:	4b14      	ldr	r3, [pc, #80]	; (800b160 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4a13      	ldr	r2, [pc, #76]	; (800b160 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b112:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b116:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b118:	f7fc fa1a 	bl	8007550 <HAL_GetTick>
 800b11c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b11e:	e009      	b.n	800b134 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b120:	f7fc fa16 	bl	8007550 <HAL_GetTick>
 800b124:	4602      	mov	r2, r0
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	1ad3      	subs	r3, r2, r3
 800b12a:	2b02      	cmp	r3, #2
 800b12c:	d902      	bls.n	800b134 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800b12e:	2303      	movs	r3, #3
 800b130:	73fb      	strb	r3, [r7, #15]
          break;
 800b132:	e005      	b.n	800b140 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b134:	4b0a      	ldr	r3, [pc, #40]	; (800b160 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d0ef      	beq.n	800b120 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800b140:	7bfb      	ldrb	r3, [r7, #15]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d106      	bne.n	800b154 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800b146:	4b06      	ldr	r3, [pc, #24]	; (800b160 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b148:	695a      	ldr	r2, [r3, #20]
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	695b      	ldr	r3, [r3, #20]
 800b14e:	4904      	ldr	r1, [pc, #16]	; (800b160 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b150:	4313      	orrs	r3, r2
 800b152:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800b154:	7bfb      	ldrb	r3, [r7, #15]
}
 800b156:	4618      	mov	r0, r3
 800b158:	3710      	adds	r7, #16
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
 800b15e:	bf00      	nop
 800b160:	40021000 	.word	0x40021000

0800b164 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b084      	sub	sp, #16
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b16c:	2301      	movs	r3, #1
 800b16e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d06c      	beq.n	800b250 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800b17c:	b2db      	uxtb	r3, r3
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d106      	bne.n	800b190 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2200      	movs	r2, #0
 800b186:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f7fa ff70 	bl	8006070 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2202      	movs	r2, #2
 800b194:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	22ca      	movs	r2, #202	; 0xca
 800b19e:	625a      	str	r2, [r3, #36]	; 0x24
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	2253      	movs	r2, #83	; 0x53
 800b1a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f000 fa49 	bl	800b640 <RTC_EnterInitMode>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800b1b2:	7bfb      	ldrb	r3, [r7, #15]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d14b      	bne.n	800b250 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	689b      	ldr	r3, [r3, #8]
 800b1be:	687a      	ldr	r2, [r7, #4]
 800b1c0:	6812      	ldr	r2, [r2, #0]
 800b1c2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b1c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1ca:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	6899      	ldr	r1, [r3, #8]
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	685a      	ldr	r2, [r3, #4]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	691b      	ldr	r3, [r3, #16]
 800b1da:	431a      	orrs	r2, r3
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	699b      	ldr	r3, [r3, #24]
 800b1e0:	431a      	orrs	r2, r3
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	430a      	orrs	r2, r1
 800b1e8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	687a      	ldr	r2, [r7, #4]
 800b1f0:	68d2      	ldr	r2, [r2, #12]
 800b1f2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	6919      	ldr	r1, [r3, #16]
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	689b      	ldr	r3, [r3, #8]
 800b1fe:	041a      	lsls	r2, r3, #16
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	430a      	orrs	r2, r1
 800b206:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f000 fa4d 	bl	800b6a8 <RTC_ExitInitMode>
 800b20e:	4603      	mov	r3, r0
 800b210:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800b212:	7bfb      	ldrb	r3, [r7, #15]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d11b      	bne.n	800b250 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f022 0203 	bic.w	r2, r2, #3
 800b226:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	69da      	ldr	r2, [r3, #28]
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	695b      	ldr	r3, [r3, #20]
 800b236:	431a      	orrs	r2, r3
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	430a      	orrs	r2, r1
 800b23e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	22ff      	movs	r2, #255	; 0xff
 800b246:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2201      	movs	r2, #1
 800b24c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800b250:	7bfb      	ldrb	r3, [r7, #15]
}
 800b252:	4618      	mov	r0, r3
 800b254:	3710      	adds	r7, #16
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}

0800b25a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b25a:	b590      	push	{r4, r7, lr}
 800b25c:	b087      	sub	sp, #28
 800b25e:	af00      	add	r7, sp, #0
 800b260:	60f8      	str	r0, [r7, #12]
 800b262:	60b9      	str	r1, [r7, #8]
 800b264:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b26c:	2b01      	cmp	r3, #1
 800b26e:	d101      	bne.n	800b274 <HAL_RTC_SetTime+0x1a>
 800b270:	2302      	movs	r3, #2
 800b272:	e08b      	b.n	800b38c <HAL_RTC_SetTime+0x132>
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	2201      	movs	r2, #1
 800b278:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	2202      	movs	r2, #2
 800b280:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	22ca      	movs	r2, #202	; 0xca
 800b28a:	625a      	str	r2, [r3, #36]	; 0x24
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	2253      	movs	r2, #83	; 0x53
 800b292:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b294:	68f8      	ldr	r0, [r7, #12]
 800b296:	f000 f9d3 	bl	800b640 <RTC_EnterInitMode>
 800b29a:	4603      	mov	r3, r0
 800b29c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b29e:	7cfb      	ldrb	r3, [r7, #19]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d163      	bne.n	800b36c <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d126      	bne.n	800b2f8 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	689b      	ldr	r3, [r3, #8]
 800b2b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d102      	bne.n	800b2be <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	781b      	ldrb	r3, [r3, #0]
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f000 fa2e 	bl	800b724 <RTC_ByteToBcd2>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	785b      	ldrb	r3, [r3, #1]
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f000 fa27 	bl	800b724 <RTC_ByteToBcd2>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b2da:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	789b      	ldrb	r3, [r3, #2]
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f000 fa1f 	bl	800b724 <RTC_ByteToBcd2>
 800b2e6:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b2e8:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	78db      	ldrb	r3, [r3, #3]
 800b2f0:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b2f2:	4313      	orrs	r3, r2
 800b2f4:	617b      	str	r3, [r7, #20]
 800b2f6:	e018      	b.n	800b32a <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	689b      	ldr	r3, [r3, #8]
 800b2fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b302:	2b00      	cmp	r3, #0
 800b304:	d102      	bne.n	800b30c <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	2200      	movs	r2, #0
 800b30a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	781b      	ldrb	r3, [r3, #0]
 800b310:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	785b      	ldrb	r3, [r3, #1]
 800b316:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b318:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800b31a:	68ba      	ldr	r2, [r7, #8]
 800b31c:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b31e:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	78db      	ldrb	r3, [r3, #3]
 800b324:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b326:	4313      	orrs	r3, r2
 800b328:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681a      	ldr	r2, [r3, #0]
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800b334:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b338:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	689a      	ldr	r2, [r3, #8]
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b348:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	6899      	ldr	r1, [r3, #8]
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	68da      	ldr	r2, [r3, #12]
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	691b      	ldr	r3, [r3, #16]
 800b358:	431a      	orrs	r2, r3
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	430a      	orrs	r2, r1
 800b360:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b362:	68f8      	ldr	r0, [r7, #12]
 800b364:	f000 f9a0 	bl	800b6a8 <RTC_ExitInitMode>
 800b368:	4603      	mov	r3, r0
 800b36a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	22ff      	movs	r2, #255	; 0xff
 800b372:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800b374:	7cfb      	ldrb	r3, [r7, #19]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d103      	bne.n	800b382 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	2201      	movs	r2, #1
 800b37e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	2200      	movs	r2, #0
 800b386:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800b38a:	7cfb      	ldrb	r3, [r7, #19]
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	371c      	adds	r7, #28
 800b390:	46bd      	mov	sp, r7
 800b392:	bd90      	pop	{r4, r7, pc}

0800b394 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b086      	sub	sp, #24
 800b398:	af00      	add	r7, sp, #0
 800b39a:	60f8      	str	r0, [r7, #12]
 800b39c:	60b9      	str	r1, [r7, #8]
 800b39e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	691b      	ldr	r3, [r3, #16]
 800b3b0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800b3c2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b3c6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	0c1b      	lsrs	r3, r3, #16
 800b3cc:	b2db      	uxtb	r3, r3
 800b3ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b3d2:	b2da      	uxtb	r2, r3
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800b3d8:	697b      	ldr	r3, [r7, #20]
 800b3da:	0a1b      	lsrs	r3, r3, #8
 800b3dc:	b2db      	uxtb	r3, r3
 800b3de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3e2:	b2da      	uxtb	r2, r3
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	b2db      	uxtb	r3, r3
 800b3ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3f0:	b2da      	uxtb	r2, r3
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	0d9b      	lsrs	r3, r3, #22
 800b3fa:	b2db      	uxtb	r3, r3
 800b3fc:	f003 0301 	and.w	r3, r3, #1
 800b400:	b2da      	uxtb	r2, r3
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d11a      	bne.n	800b442 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	781b      	ldrb	r3, [r3, #0]
 800b410:	4618      	mov	r0, r3
 800b412:	f000 f9a7 	bl	800b764 <RTC_Bcd2ToByte>
 800b416:	4603      	mov	r3, r0
 800b418:	461a      	mov	r2, r3
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	785b      	ldrb	r3, [r3, #1]
 800b422:	4618      	mov	r0, r3
 800b424:	f000 f99e 	bl	800b764 <RTC_Bcd2ToByte>
 800b428:	4603      	mov	r3, r0
 800b42a:	461a      	mov	r2, r3
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	789b      	ldrb	r3, [r3, #2]
 800b434:	4618      	mov	r0, r3
 800b436:	f000 f995 	bl	800b764 <RTC_Bcd2ToByte>
 800b43a:	4603      	mov	r3, r0
 800b43c:	461a      	mov	r2, r3
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800b442:	2300      	movs	r3, #0
}
 800b444:	4618      	mov	r0, r3
 800b446:	3718      	adds	r7, #24
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}

0800b44c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b44c:	b590      	push	{r4, r7, lr}
 800b44e:	b087      	sub	sp, #28
 800b450:	af00      	add	r7, sp, #0
 800b452:	60f8      	str	r0, [r7, #12]
 800b454:	60b9      	str	r1, [r7, #8]
 800b456:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b45e:	2b01      	cmp	r3, #1
 800b460:	d101      	bne.n	800b466 <HAL_RTC_SetDate+0x1a>
 800b462:	2302      	movs	r3, #2
 800b464:	e075      	b.n	800b552 <HAL_RTC_SetDate+0x106>
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	2201      	movs	r2, #1
 800b46a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	2202      	movs	r2, #2
 800b472:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d10e      	bne.n	800b49a <HAL_RTC_SetDate+0x4e>
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	785b      	ldrb	r3, [r3, #1]
 800b480:	f003 0310 	and.w	r3, r3, #16
 800b484:	2b00      	cmp	r3, #0
 800b486:	d008      	beq.n	800b49a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	785b      	ldrb	r3, [r3, #1]
 800b48c:	f023 0310 	bic.w	r3, r3, #16
 800b490:	b2db      	uxtb	r3, r3
 800b492:	330a      	adds	r3, #10
 800b494:	b2da      	uxtb	r2, r3
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d11c      	bne.n	800b4da <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	78db      	ldrb	r3, [r3, #3]
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f000 f93d 	bl	800b724 <RTC_ByteToBcd2>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	785b      	ldrb	r3, [r3, #1]
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f000 f936 	bl	800b724 <RTC_ByteToBcd2>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800b4bc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	789b      	ldrb	r3, [r3, #2]
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f000 f92e 	bl	800b724 <RTC_ByteToBcd2>
 800b4c8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b4ca:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	781b      	ldrb	r3, [r3, #0]
 800b4d2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800b4d4:	4313      	orrs	r3, r2
 800b4d6:	617b      	str	r3, [r7, #20]
 800b4d8:	e00e      	b.n	800b4f8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	78db      	ldrb	r3, [r3, #3]
 800b4de:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	785b      	ldrb	r3, [r3, #1]
 800b4e4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b4e6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800b4e8:	68ba      	ldr	r2, [r7, #8]
 800b4ea:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800b4ec:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	781b      	ldrb	r3, [r3, #0]
 800b4f2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b4f4:	4313      	orrs	r3, r2
 800b4f6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	22ca      	movs	r2, #202	; 0xca
 800b4fe:	625a      	str	r2, [r3, #36]	; 0x24
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	2253      	movs	r2, #83	; 0x53
 800b506:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b508:	68f8      	ldr	r0, [r7, #12]
 800b50a:	f000 f899 	bl	800b640 <RTC_EnterInitMode>
 800b50e:	4603      	mov	r3, r0
 800b510:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b512:	7cfb      	ldrb	r3, [r7, #19]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d10c      	bne.n	800b532 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	681a      	ldr	r2, [r3, #0]
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b522:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b526:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b528:	68f8      	ldr	r0, [r7, #12]
 800b52a:	f000 f8bd 	bl	800b6a8 <RTC_ExitInitMode>
 800b52e:	4603      	mov	r3, r0
 800b530:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	22ff      	movs	r2, #255	; 0xff
 800b538:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800b53a:	7cfb      	ldrb	r3, [r7, #19]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d103      	bne.n	800b548 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	2201      	movs	r2, #1
 800b544:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	2200      	movs	r2, #0
 800b54c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800b550:	7cfb      	ldrb	r3, [r7, #19]
}
 800b552:	4618      	mov	r0, r3
 800b554:	371c      	adds	r7, #28
 800b556:	46bd      	mov	sp, r7
 800b558:	bd90      	pop	{r4, r7, pc}

0800b55a <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b55a:	b580      	push	{r7, lr}
 800b55c:	b086      	sub	sp, #24
 800b55e:	af00      	add	r7, sp, #0
 800b560:	60f8      	str	r0, [r7, #12]
 800b562:	60b9      	str	r1, [r7, #8]
 800b564:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b570:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b574:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	0c1b      	lsrs	r3, r3, #16
 800b57a:	b2da      	uxtb	r2, r3
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800b580:	697b      	ldr	r3, [r7, #20]
 800b582:	0a1b      	lsrs	r3, r3, #8
 800b584:	b2db      	uxtb	r3, r3
 800b586:	f003 031f 	and.w	r3, r3, #31
 800b58a:	b2da      	uxtb	r2, r3
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	b2db      	uxtb	r3, r3
 800b594:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b598:	b2da      	uxtb	r2, r3
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800b59e:	697b      	ldr	r3, [r7, #20]
 800b5a0:	0b5b      	lsrs	r3, r3, #13
 800b5a2:	b2db      	uxtb	r3, r3
 800b5a4:	f003 0307 	and.w	r3, r3, #7
 800b5a8:	b2da      	uxtb	r2, r3
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d11a      	bne.n	800b5ea <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	78db      	ldrb	r3, [r3, #3]
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f000 f8d3 	bl	800b764 <RTC_Bcd2ToByte>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	785b      	ldrb	r3, [r3, #1]
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f000 f8ca 	bl	800b764 <RTC_Bcd2ToByte>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	461a      	mov	r2, r3
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	789b      	ldrb	r3, [r3, #2]
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f000 f8c1 	bl	800b764 <RTC_Bcd2ToByte>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800b5ea:	2300      	movs	r3, #0
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3718      	adds	r7, #24
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}

0800b5f4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b084      	sub	sp, #16
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	68da      	ldr	r2, [r3, #12]
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b60a:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800b60c:	f7fb ffa0 	bl	8007550 <HAL_GetTick>
 800b610:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b612:	e009      	b.n	800b628 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b614:	f7fb ff9c 	bl	8007550 <HAL_GetTick>
 800b618:	4602      	mov	r2, r0
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	1ad3      	subs	r3, r2, r3
 800b61e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b622:	d901      	bls.n	800b628 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800b624:	2303      	movs	r3, #3
 800b626:	e007      	b.n	800b638 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	68db      	ldr	r3, [r3, #12]
 800b62e:	f003 0320 	and.w	r3, r3, #32
 800b632:	2b00      	cmp	r3, #0
 800b634:	d0ee      	beq.n	800b614 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800b636:	2300      	movs	r3, #0
}
 800b638:	4618      	mov	r0, r3
 800b63a:	3710      	adds	r7, #16
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}

0800b640 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b084      	sub	sp, #16
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b648:	2300      	movs	r3, #0
 800b64a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	68db      	ldr	r3, [r3, #12]
 800b652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b656:	2b00      	cmp	r3, #0
 800b658:	d120      	bne.n	800b69c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b662:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800b664:	f7fb ff74 	bl	8007550 <HAL_GetTick>
 800b668:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b66a:	e00d      	b.n	800b688 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800b66c:	f7fb ff70 	bl	8007550 <HAL_GetTick>
 800b670:	4602      	mov	r2, r0
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	1ad3      	subs	r3, r2, r3
 800b676:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b67a:	d905      	bls.n	800b688 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800b67c:	2303      	movs	r3, #3
 800b67e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2203      	movs	r2, #3
 800b684:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	68db      	ldr	r3, [r3, #12]
 800b68e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b692:	2b00      	cmp	r3, #0
 800b694:	d102      	bne.n	800b69c <RTC_EnterInitMode+0x5c>
 800b696:	7bfb      	ldrb	r3, [r7, #15]
 800b698:	2b03      	cmp	r3, #3
 800b69a:	d1e7      	bne.n	800b66c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800b69c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3710      	adds	r7, #16
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}
	...

0800b6a8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b084      	sub	sp, #16
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800b6b4:	4b1a      	ldr	r3, [pc, #104]	; (800b720 <RTC_ExitInitMode+0x78>)
 800b6b6:	68db      	ldr	r3, [r3, #12]
 800b6b8:	4a19      	ldr	r2, [pc, #100]	; (800b720 <RTC_ExitInitMode+0x78>)
 800b6ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b6be:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800b6c0:	4b17      	ldr	r3, [pc, #92]	; (800b720 <RTC_ExitInitMode+0x78>)
 800b6c2:	689b      	ldr	r3, [r3, #8]
 800b6c4:	f003 0320 	and.w	r3, r3, #32
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d10c      	bne.n	800b6e6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f7ff ff91 	bl	800b5f4 <HAL_RTC_WaitForSynchro>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d01e      	beq.n	800b716 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2203      	movs	r2, #3
 800b6dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800b6e0:	2303      	movs	r3, #3
 800b6e2:	73fb      	strb	r3, [r7, #15]
 800b6e4:	e017      	b.n	800b716 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b6e6:	4b0e      	ldr	r3, [pc, #56]	; (800b720 <RTC_ExitInitMode+0x78>)
 800b6e8:	689b      	ldr	r3, [r3, #8]
 800b6ea:	4a0d      	ldr	r2, [pc, #52]	; (800b720 <RTC_ExitInitMode+0x78>)
 800b6ec:	f023 0320 	bic.w	r3, r3, #32
 800b6f0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f7ff ff7e 	bl	800b5f4 <HAL_RTC_WaitForSynchro>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d005      	beq.n	800b70a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	2203      	movs	r2, #3
 800b702:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800b706:	2303      	movs	r3, #3
 800b708:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b70a:	4b05      	ldr	r3, [pc, #20]	; (800b720 <RTC_ExitInitMode+0x78>)
 800b70c:	689b      	ldr	r3, [r3, #8]
 800b70e:	4a04      	ldr	r2, [pc, #16]	; (800b720 <RTC_ExitInitMode+0x78>)
 800b710:	f043 0320 	orr.w	r3, r3, #32
 800b714:	6093      	str	r3, [r2, #8]
  }

  return status;
 800b716:	7bfb      	ldrb	r3, [r7, #15]
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3710      	adds	r7, #16
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}
 800b720:	40002800 	.word	0x40002800

0800b724 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800b724:	b480      	push	{r7}
 800b726:	b085      	sub	sp, #20
 800b728:	af00      	add	r7, sp, #0
 800b72a:	4603      	mov	r3, r0
 800b72c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800b72e:	2300      	movs	r3, #0
 800b730:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800b732:	79fb      	ldrb	r3, [r7, #7]
 800b734:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800b736:	e005      	b.n	800b744 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	3301      	adds	r3, #1
 800b73c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800b73e:	7afb      	ldrb	r3, [r7, #11]
 800b740:	3b0a      	subs	r3, #10
 800b742:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800b744:	7afb      	ldrb	r3, [r7, #11]
 800b746:	2b09      	cmp	r3, #9
 800b748:	d8f6      	bhi.n	800b738 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	b2db      	uxtb	r3, r3
 800b74e:	011b      	lsls	r3, r3, #4
 800b750:	b2da      	uxtb	r2, r3
 800b752:	7afb      	ldrb	r3, [r7, #11]
 800b754:	4313      	orrs	r3, r2
 800b756:	b2db      	uxtb	r3, r3
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3714      	adds	r7, #20
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr

0800b764 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800b764:	b480      	push	{r7}
 800b766:	b085      	sub	sp, #20
 800b768:	af00      	add	r7, sp, #0
 800b76a:	4603      	mov	r3, r0
 800b76c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800b76e:	79fb      	ldrb	r3, [r7, #7]
 800b770:	091b      	lsrs	r3, r3, #4
 800b772:	b2db      	uxtb	r3, r3
 800b774:	461a      	mov	r2, r3
 800b776:	0092      	lsls	r2, r2, #2
 800b778:	4413      	add	r3, r2
 800b77a:	005b      	lsls	r3, r3, #1
 800b77c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800b77e:	79fb      	ldrb	r3, [r7, #7]
 800b780:	f003 030f 	and.w	r3, r3, #15
 800b784:	b2da      	uxtb	r2, r3
 800b786:	7bfb      	ldrb	r3, [r7, #15]
 800b788:	4413      	add	r3, r2
 800b78a:	b2db      	uxtb	r3, r3
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	3714      	adds	r7, #20
 800b790:	46bd      	mov	sp, r7
 800b792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b796:	4770      	bx	lr

0800b798 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b084      	sub	sp, #16
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d101      	bne.n	800b7aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	e095      	b.n	800b8d6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d108      	bne.n	800b7c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	685b      	ldr	r3, [r3, #4]
 800b7b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b7ba:	d009      	beq.n	800b7d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	61da      	str	r2, [r3, #28]
 800b7c2:	e005      	b.n	800b7d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b7dc:	b2db      	uxtb	r3, r3
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d106      	bne.n	800b7f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f7fa fc72 	bl	80060d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2202      	movs	r2, #2
 800b7f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	681a      	ldr	r2, [r3, #0]
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b806:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	68db      	ldr	r3, [r3, #12]
 800b80c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b810:	d902      	bls.n	800b818 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b812:	2300      	movs	r3, #0
 800b814:	60fb      	str	r3, [r7, #12]
 800b816:	e002      	b.n	800b81e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b818:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b81c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	68db      	ldr	r3, [r3, #12]
 800b822:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b826:	d007      	beq.n	800b838 <HAL_SPI_Init+0xa0>
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	68db      	ldr	r3, [r3, #12]
 800b82c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b830:	d002      	beq.n	800b838 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2200      	movs	r2, #0
 800b836:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	685b      	ldr	r3, [r3, #4]
 800b83c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	689b      	ldr	r3, [r3, #8]
 800b844:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b848:	431a      	orrs	r2, r3
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	691b      	ldr	r3, [r3, #16]
 800b84e:	f003 0302 	and.w	r3, r3, #2
 800b852:	431a      	orrs	r2, r3
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	695b      	ldr	r3, [r3, #20]
 800b858:	f003 0301 	and.w	r3, r3, #1
 800b85c:	431a      	orrs	r2, r3
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	699b      	ldr	r3, [r3, #24]
 800b862:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b866:	431a      	orrs	r2, r3
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	69db      	ldr	r3, [r3, #28]
 800b86c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b870:	431a      	orrs	r2, r3
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6a1b      	ldr	r3, [r3, #32]
 800b876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b87a:	ea42 0103 	orr.w	r1, r2, r3
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b882:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	430a      	orrs	r2, r1
 800b88c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	699b      	ldr	r3, [r3, #24]
 800b892:	0c1b      	lsrs	r3, r3, #16
 800b894:	f003 0204 	and.w	r2, r3, #4
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b89c:	f003 0310 	and.w	r3, r3, #16
 800b8a0:	431a      	orrs	r2, r3
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8a6:	f003 0308 	and.w	r3, r3, #8
 800b8aa:	431a      	orrs	r2, r3
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	68db      	ldr	r3, [r3, #12]
 800b8b0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b8b4:	ea42 0103 	orr.w	r1, r2, r3
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	430a      	orrs	r2, r1
 800b8c4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2201      	movs	r2, #1
 800b8d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800b8d4:	2300      	movs	r3, #0
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	3710      	adds	r7, #16
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}

0800b8de <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b8de:	b580      	push	{r7, lr}
 800b8e0:	b088      	sub	sp, #32
 800b8e2:	af00      	add	r7, sp, #0
 800b8e4:	60f8      	str	r0, [r7, #12]
 800b8e6:	60b9      	str	r1, [r7, #8]
 800b8e8:	603b      	str	r3, [r7, #0]
 800b8ea:	4613      	mov	r3, r2
 800b8ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d101      	bne.n	800b900 <HAL_SPI_Transmit+0x22>
 800b8fc:	2302      	movs	r3, #2
 800b8fe:	e158      	b.n	800bbb2 <HAL_SPI_Transmit+0x2d4>
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	2201      	movs	r2, #1
 800b904:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b908:	f7fb fe22 	bl	8007550 <HAL_GetTick>
 800b90c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b90e:	88fb      	ldrh	r3, [r7, #6]
 800b910:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b918:	b2db      	uxtb	r3, r3
 800b91a:	2b01      	cmp	r3, #1
 800b91c:	d002      	beq.n	800b924 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b91e:	2302      	movs	r3, #2
 800b920:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b922:	e13d      	b.n	800bba0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d002      	beq.n	800b930 <HAL_SPI_Transmit+0x52>
 800b92a:	88fb      	ldrh	r3, [r7, #6]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d102      	bne.n	800b936 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b930:	2301      	movs	r3, #1
 800b932:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b934:	e134      	b.n	800bba0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	2203      	movs	r2, #3
 800b93a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	2200      	movs	r2, #0
 800b942:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	68ba      	ldr	r2, [r7, #8]
 800b948:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	88fa      	ldrh	r2, [r7, #6]
 800b94e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	88fa      	ldrh	r2, [r7, #6]
 800b954:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	2200      	movs	r2, #0
 800b95a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	2200      	movs	r2, #0
 800b960:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	2200      	movs	r2, #0
 800b968:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	2200      	movs	r2, #0
 800b970:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	2200      	movs	r2, #0
 800b976:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	689b      	ldr	r3, [r3, #8]
 800b97c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b980:	d10f      	bne.n	800b9a2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	681a      	ldr	r2, [r3, #0]
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b990:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	681a      	ldr	r2, [r3, #0]
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b9a0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9ac:	2b40      	cmp	r3, #64	; 0x40
 800b9ae:	d007      	beq.n	800b9c0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	681a      	ldr	r2, [r3, #0]
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b9be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	68db      	ldr	r3, [r3, #12]
 800b9c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b9c8:	d94b      	bls.n	800ba62 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	685b      	ldr	r3, [r3, #4]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d002      	beq.n	800b9d8 <HAL_SPI_Transmit+0xfa>
 800b9d2:	8afb      	ldrh	r3, [r7, #22]
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d13e      	bne.n	800ba56 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9dc:	881a      	ldrh	r2, [r3, #0]
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9e8:	1c9a      	adds	r2, r3, #2
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b9f2:	b29b      	uxth	r3, r3
 800b9f4:	3b01      	subs	r3, #1
 800b9f6:	b29a      	uxth	r2, r3
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b9fc:	e02b      	b.n	800ba56 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	689b      	ldr	r3, [r3, #8]
 800ba04:	f003 0302 	and.w	r3, r3, #2
 800ba08:	2b02      	cmp	r3, #2
 800ba0a:	d112      	bne.n	800ba32 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba10:	881a      	ldrh	r2, [r3, #0]
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba1c:	1c9a      	adds	r2, r3, #2
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba26:	b29b      	uxth	r3, r3
 800ba28:	3b01      	subs	r3, #1
 800ba2a:	b29a      	uxth	r2, r3
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ba30:	e011      	b.n	800ba56 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ba32:	f7fb fd8d 	bl	8007550 <HAL_GetTick>
 800ba36:	4602      	mov	r2, r0
 800ba38:	69bb      	ldr	r3, [r7, #24]
 800ba3a:	1ad3      	subs	r3, r2, r3
 800ba3c:	683a      	ldr	r2, [r7, #0]
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d803      	bhi.n	800ba4a <HAL_SPI_Transmit+0x16c>
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba48:	d102      	bne.n	800ba50 <HAL_SPI_Transmit+0x172>
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d102      	bne.n	800ba56 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800ba50:	2303      	movs	r3, #3
 800ba52:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ba54:	e0a4      	b.n	800bba0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba5a:	b29b      	uxth	r3, r3
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d1ce      	bne.n	800b9fe <HAL_SPI_Transmit+0x120>
 800ba60:	e07c      	b.n	800bb5c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	685b      	ldr	r3, [r3, #4]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d002      	beq.n	800ba70 <HAL_SPI_Transmit+0x192>
 800ba6a:	8afb      	ldrh	r3, [r7, #22]
 800ba6c:	2b01      	cmp	r3, #1
 800ba6e:	d170      	bne.n	800bb52 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba74:	b29b      	uxth	r3, r3
 800ba76:	2b01      	cmp	r3, #1
 800ba78:	d912      	bls.n	800baa0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba7e:	881a      	ldrh	r2, [r3, #0]
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba8a:	1c9a      	adds	r2, r3, #2
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba94:	b29b      	uxth	r3, r3
 800ba96:	3b02      	subs	r3, #2
 800ba98:	b29a      	uxth	r2, r3
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ba9e:	e058      	b.n	800bb52 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	330c      	adds	r3, #12
 800baaa:	7812      	ldrb	r2, [r2, #0]
 800baac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bab2:	1c5a      	adds	r2, r3, #1
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800babc:	b29b      	uxth	r3, r3
 800babe:	3b01      	subs	r3, #1
 800bac0:	b29a      	uxth	r2, r3
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800bac6:	e044      	b.n	800bb52 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	689b      	ldr	r3, [r3, #8]
 800bace:	f003 0302 	and.w	r3, r3, #2
 800bad2:	2b02      	cmp	r3, #2
 800bad4:	d12b      	bne.n	800bb2e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bada:	b29b      	uxth	r3, r3
 800badc:	2b01      	cmp	r3, #1
 800bade:	d912      	bls.n	800bb06 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bae4:	881a      	ldrh	r2, [r3, #0]
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baf0:	1c9a      	adds	r2, r3, #2
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bafa:	b29b      	uxth	r3, r3
 800bafc:	3b02      	subs	r3, #2
 800bafe:	b29a      	uxth	r2, r3
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bb04:	e025      	b.n	800bb52 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	330c      	adds	r3, #12
 800bb10:	7812      	ldrb	r2, [r2, #0]
 800bb12:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb18:	1c5a      	adds	r2, r3, #1
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb22:	b29b      	uxth	r3, r3
 800bb24:	3b01      	subs	r3, #1
 800bb26:	b29a      	uxth	r2, r3
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bb2c:	e011      	b.n	800bb52 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bb2e:	f7fb fd0f 	bl	8007550 <HAL_GetTick>
 800bb32:	4602      	mov	r2, r0
 800bb34:	69bb      	ldr	r3, [r7, #24]
 800bb36:	1ad3      	subs	r3, r2, r3
 800bb38:	683a      	ldr	r2, [r7, #0]
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	d803      	bhi.n	800bb46 <HAL_SPI_Transmit+0x268>
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb44:	d102      	bne.n	800bb4c <HAL_SPI_Transmit+0x26e>
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d102      	bne.n	800bb52 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800bb4c:	2303      	movs	r3, #3
 800bb4e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bb50:	e026      	b.n	800bba0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb56:	b29b      	uxth	r3, r3
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d1b5      	bne.n	800bac8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bb5c:	69ba      	ldr	r2, [r7, #24]
 800bb5e:	6839      	ldr	r1, [r7, #0]
 800bb60:	68f8      	ldr	r0, [r7, #12]
 800bb62:	f001 f9dd 	bl	800cf20 <SPI_EndRxTxTransaction>
 800bb66:	4603      	mov	r3, r0
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d002      	beq.n	800bb72 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	2220      	movs	r2, #32
 800bb70:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	689b      	ldr	r3, [r3, #8]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d10a      	bne.n	800bb90 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	613b      	str	r3, [r7, #16]
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	68db      	ldr	r3, [r3, #12]
 800bb84:	613b      	str	r3, [r7, #16]
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	689b      	ldr	r3, [r3, #8]
 800bb8c:	613b      	str	r3, [r7, #16]
 800bb8e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d002      	beq.n	800bb9e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800bb98:	2301      	movs	r3, #1
 800bb9a:	77fb      	strb	r3, [r7, #31]
 800bb9c:	e000      	b.n	800bba0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800bb9e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	2201      	movs	r2, #1
 800bba4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800bbb0:	7ffb      	ldrb	r3, [r7, #31]
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3720      	adds	r7, #32
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}

0800bbba <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bbba:	b580      	push	{r7, lr}
 800bbbc:	b088      	sub	sp, #32
 800bbbe:	af02      	add	r7, sp, #8
 800bbc0:	60f8      	str	r0, [r7, #12]
 800bbc2:	60b9      	str	r1, [r7, #8]
 800bbc4:	603b      	str	r3, [r7, #0]
 800bbc6:	4613      	mov	r3, r2
 800bbc8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	685b      	ldr	r3, [r3, #4]
 800bbd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bbd6:	d112      	bne.n	800bbfe <HAL_SPI_Receive+0x44>
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	689b      	ldr	r3, [r3, #8]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d10e      	bne.n	800bbfe <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	2204      	movs	r2, #4
 800bbe4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800bbe8:	88fa      	ldrh	r2, [r7, #6]
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	9300      	str	r3, [sp, #0]
 800bbee:	4613      	mov	r3, r2
 800bbf0:	68ba      	ldr	r2, [r7, #8]
 800bbf2:	68b9      	ldr	r1, [r7, #8]
 800bbf4:	68f8      	ldr	r0, [r7, #12]
 800bbf6:	f000 f910 	bl	800be1a <HAL_SPI_TransmitReceive>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	e109      	b.n	800be12 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	d101      	bne.n	800bc0c <HAL_SPI_Receive+0x52>
 800bc08:	2302      	movs	r3, #2
 800bc0a:	e102      	b.n	800be12 <HAL_SPI_Receive+0x258>
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	2201      	movs	r2, #1
 800bc10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bc14:	f7fb fc9c 	bl	8007550 <HAL_GetTick>
 800bc18:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bc20:	b2db      	uxtb	r3, r3
 800bc22:	2b01      	cmp	r3, #1
 800bc24:	d002      	beq.n	800bc2c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800bc26:	2302      	movs	r3, #2
 800bc28:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bc2a:	e0e9      	b.n	800be00 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d002      	beq.n	800bc38 <HAL_SPI_Receive+0x7e>
 800bc32:	88fb      	ldrh	r3, [r7, #6]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d102      	bne.n	800bc3e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800bc38:	2301      	movs	r3, #1
 800bc3a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bc3c:	e0e0      	b.n	800be00 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	2204      	movs	r2, #4
 800bc42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	68ba      	ldr	r2, [r7, #8]
 800bc50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	88fa      	ldrh	r2, [r7, #6]
 800bc56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	88fa      	ldrh	r2, [r7, #6]
 800bc5e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	2200      	movs	r2, #0
 800bc66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2200      	movs	r2, #0
 800bc72:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	2200      	movs	r2, #0
 800bc78:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	68db      	ldr	r3, [r3, #12]
 800bc84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bc88:	d908      	bls.n	800bc9c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	685a      	ldr	r2, [r3, #4]
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bc98:	605a      	str	r2, [r3, #4]
 800bc9a:	e007      	b.n	800bcac <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	685a      	ldr	r2, [r3, #4]
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bcaa:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	689b      	ldr	r3, [r3, #8]
 800bcb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bcb4:	d10f      	bne.n	800bcd6 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	681a      	ldr	r2, [r3, #0]
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bcc4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	681a      	ldr	r2, [r3, #0]
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bcd4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bce0:	2b40      	cmp	r3, #64	; 0x40
 800bce2:	d007      	beq.n	800bcf4 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	681a      	ldr	r2, [r3, #0]
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bcf2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	68db      	ldr	r3, [r3, #12]
 800bcf8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bcfc:	d867      	bhi.n	800bdce <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800bcfe:	e030      	b.n	800bd62 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	689b      	ldr	r3, [r3, #8]
 800bd06:	f003 0301 	and.w	r3, r3, #1
 800bd0a:	2b01      	cmp	r3, #1
 800bd0c:	d117      	bne.n	800bd3e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f103 020c 	add.w	r2, r3, #12
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd1a:	7812      	ldrb	r2, [r2, #0]
 800bd1c:	b2d2      	uxtb	r2, r2
 800bd1e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd24:	1c5a      	adds	r2, r3, #1
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bd30:	b29b      	uxth	r3, r3
 800bd32:	3b01      	subs	r3, #1
 800bd34:	b29a      	uxth	r2, r3
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800bd3c:	e011      	b.n	800bd62 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd3e:	f7fb fc07 	bl	8007550 <HAL_GetTick>
 800bd42:	4602      	mov	r2, r0
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	1ad3      	subs	r3, r2, r3
 800bd48:	683a      	ldr	r2, [r7, #0]
 800bd4a:	429a      	cmp	r2, r3
 800bd4c:	d803      	bhi.n	800bd56 <HAL_SPI_Receive+0x19c>
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd54:	d102      	bne.n	800bd5c <HAL_SPI_Receive+0x1a2>
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d102      	bne.n	800bd62 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800bd5c:	2303      	movs	r3, #3
 800bd5e:	75fb      	strb	r3, [r7, #23]
          goto error;
 800bd60:	e04e      	b.n	800be00 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bd68:	b29b      	uxth	r3, r3
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d1c8      	bne.n	800bd00 <HAL_SPI_Receive+0x146>
 800bd6e:	e034      	b.n	800bdda <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	689b      	ldr	r3, [r3, #8]
 800bd76:	f003 0301 	and.w	r3, r3, #1
 800bd7a:	2b01      	cmp	r3, #1
 800bd7c:	d115      	bne.n	800bdaa <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	68da      	ldr	r2, [r3, #12]
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd88:	b292      	uxth	r2, r2
 800bd8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd90:	1c9a      	adds	r2, r3, #2
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bd9c:	b29b      	uxth	r3, r3
 800bd9e:	3b01      	subs	r3, #1
 800bda0:	b29a      	uxth	r2, r3
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800bda8:	e011      	b.n	800bdce <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bdaa:	f7fb fbd1 	bl	8007550 <HAL_GetTick>
 800bdae:	4602      	mov	r2, r0
 800bdb0:	693b      	ldr	r3, [r7, #16]
 800bdb2:	1ad3      	subs	r3, r2, r3
 800bdb4:	683a      	ldr	r2, [r7, #0]
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d803      	bhi.n	800bdc2 <HAL_SPI_Receive+0x208>
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bdc0:	d102      	bne.n	800bdc8 <HAL_SPI_Receive+0x20e>
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d102      	bne.n	800bdce <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800bdc8:	2303      	movs	r3, #3
 800bdca:	75fb      	strb	r3, [r7, #23]
          goto error;
 800bdcc:	e018      	b.n	800be00 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bdd4:	b29b      	uxth	r3, r3
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d1ca      	bne.n	800bd70 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bdda:	693a      	ldr	r2, [r7, #16]
 800bddc:	6839      	ldr	r1, [r7, #0]
 800bdde:	68f8      	ldr	r0, [r7, #12]
 800bde0:	f001 f846 	bl	800ce70 <SPI_EndRxTransaction>
 800bde4:	4603      	mov	r3, r0
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d002      	beq.n	800bdf0 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	2220      	movs	r2, #32
 800bdee:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d002      	beq.n	800bdfe <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	75fb      	strb	r3, [r7, #23]
 800bdfc:	e000      	b.n	800be00 <HAL_SPI_Receive+0x246>
  }

error :
 800bdfe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	2201      	movs	r2, #1
 800be04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	2200      	movs	r2, #0
 800be0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800be10:	7dfb      	ldrb	r3, [r7, #23]
}
 800be12:	4618      	mov	r0, r3
 800be14:	3718      	adds	r7, #24
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}

0800be1a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800be1a:	b580      	push	{r7, lr}
 800be1c:	b08a      	sub	sp, #40	; 0x28
 800be1e:	af00      	add	r7, sp, #0
 800be20:	60f8      	str	r0, [r7, #12]
 800be22:	60b9      	str	r1, [r7, #8]
 800be24:	607a      	str	r2, [r7, #4]
 800be26:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800be28:	2301      	movs	r3, #1
 800be2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800be2c:	2300      	movs	r3, #0
 800be2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800be38:	2b01      	cmp	r3, #1
 800be3a:	d101      	bne.n	800be40 <HAL_SPI_TransmitReceive+0x26>
 800be3c:	2302      	movs	r3, #2
 800be3e:	e1fb      	b.n	800c238 <HAL_SPI_TransmitReceive+0x41e>
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	2201      	movs	r2, #1
 800be44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800be48:	f7fb fb82 	bl	8007550 <HAL_GetTick>
 800be4c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800be54:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	685b      	ldr	r3, [r3, #4]
 800be5a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800be5c:	887b      	ldrh	r3, [r7, #2]
 800be5e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800be60:	887b      	ldrh	r3, [r7, #2]
 800be62:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800be64:	7efb      	ldrb	r3, [r7, #27]
 800be66:	2b01      	cmp	r3, #1
 800be68:	d00e      	beq.n	800be88 <HAL_SPI_TransmitReceive+0x6e>
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800be70:	d106      	bne.n	800be80 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	689b      	ldr	r3, [r3, #8]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d102      	bne.n	800be80 <HAL_SPI_TransmitReceive+0x66>
 800be7a:	7efb      	ldrb	r3, [r7, #27]
 800be7c:	2b04      	cmp	r3, #4
 800be7e:	d003      	beq.n	800be88 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800be80:	2302      	movs	r3, #2
 800be82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800be86:	e1cd      	b.n	800c224 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d005      	beq.n	800be9a <HAL_SPI_TransmitReceive+0x80>
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d002      	beq.n	800be9a <HAL_SPI_TransmitReceive+0x80>
 800be94:	887b      	ldrh	r3, [r7, #2]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d103      	bne.n	800bea2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800be9a:	2301      	movs	r3, #1
 800be9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800bea0:	e1c0      	b.n	800c224 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bea8:	b2db      	uxtb	r3, r3
 800beaa:	2b04      	cmp	r3, #4
 800beac:	d003      	beq.n	800beb6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	2205      	movs	r2, #5
 800beb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	2200      	movs	r2, #0
 800beba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	687a      	ldr	r2, [r7, #4]
 800bec0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	887a      	ldrh	r2, [r7, #2]
 800bec6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	887a      	ldrh	r2, [r7, #2]
 800bece:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	68ba      	ldr	r2, [r7, #8]
 800bed6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	887a      	ldrh	r2, [r7, #2]
 800bedc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	887a      	ldrh	r2, [r7, #2]
 800bee2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	2200      	movs	r2, #0
 800bee8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	2200      	movs	r2, #0
 800beee:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	68db      	ldr	r3, [r3, #12]
 800bef4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bef8:	d802      	bhi.n	800bf00 <HAL_SPI_TransmitReceive+0xe6>
 800befa:	8a3b      	ldrh	r3, [r7, #16]
 800befc:	2b01      	cmp	r3, #1
 800befe:	d908      	bls.n	800bf12 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	685a      	ldr	r2, [r3, #4]
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bf0e:	605a      	str	r2, [r3, #4]
 800bf10:	e007      	b.n	800bf22 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	685a      	ldr	r2, [r3, #4]
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bf20:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf2c:	2b40      	cmp	r3, #64	; 0x40
 800bf2e:	d007      	beq.n	800bf40 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	681a      	ldr	r2, [r3, #0]
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bf3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	68db      	ldr	r3, [r3, #12]
 800bf44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bf48:	d97c      	bls.n	800c044 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	685b      	ldr	r3, [r3, #4]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d002      	beq.n	800bf58 <HAL_SPI_TransmitReceive+0x13e>
 800bf52:	8a7b      	ldrh	r3, [r7, #18]
 800bf54:	2b01      	cmp	r3, #1
 800bf56:	d169      	bne.n	800c02c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf5c:	881a      	ldrh	r2, [r3, #0]
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf68:	1c9a      	adds	r2, r3, #2
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf72:	b29b      	uxth	r3, r3
 800bf74:	3b01      	subs	r3, #1
 800bf76:	b29a      	uxth	r2, r3
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bf7c:	e056      	b.n	800c02c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	689b      	ldr	r3, [r3, #8]
 800bf84:	f003 0302 	and.w	r3, r3, #2
 800bf88:	2b02      	cmp	r3, #2
 800bf8a:	d11b      	bne.n	800bfc4 <HAL_SPI_TransmitReceive+0x1aa>
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf90:	b29b      	uxth	r3, r3
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d016      	beq.n	800bfc4 <HAL_SPI_TransmitReceive+0x1aa>
 800bf96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf98:	2b01      	cmp	r3, #1
 800bf9a:	d113      	bne.n	800bfc4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfa0:	881a      	ldrh	r2, [r3, #0]
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfac:	1c9a      	adds	r2, r3, #2
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bfb6:	b29b      	uxth	r3, r3
 800bfb8:	3b01      	subs	r3, #1
 800bfba:	b29a      	uxth	r2, r3
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	689b      	ldr	r3, [r3, #8]
 800bfca:	f003 0301 	and.w	r3, r3, #1
 800bfce:	2b01      	cmp	r3, #1
 800bfd0:	d11c      	bne.n	800c00c <HAL_SPI_TransmitReceive+0x1f2>
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bfd8:	b29b      	uxth	r3, r3
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d016      	beq.n	800c00c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	68da      	ldr	r2, [r3, #12]
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfe8:	b292      	uxth	r2, r2
 800bfea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bff0:	1c9a      	adds	r2, r3, #2
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bffc:	b29b      	uxth	r3, r3
 800bffe:	3b01      	subs	r3, #1
 800c000:	b29a      	uxth	r2, r3
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c008:	2301      	movs	r3, #1
 800c00a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c00c:	f7fb faa0 	bl	8007550 <HAL_GetTick>
 800c010:	4602      	mov	r2, r0
 800c012:	69fb      	ldr	r3, [r7, #28]
 800c014:	1ad3      	subs	r3, r2, r3
 800c016:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c018:	429a      	cmp	r2, r3
 800c01a:	d807      	bhi.n	800c02c <HAL_SPI_TransmitReceive+0x212>
 800c01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c01e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c022:	d003      	beq.n	800c02c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800c024:	2303      	movs	r3, #3
 800c026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800c02a:	e0fb      	b.n	800c224 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c030:	b29b      	uxth	r3, r3
 800c032:	2b00      	cmp	r3, #0
 800c034:	d1a3      	bne.n	800bf7e <HAL_SPI_TransmitReceive+0x164>
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c03c:	b29b      	uxth	r3, r3
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d19d      	bne.n	800bf7e <HAL_SPI_TransmitReceive+0x164>
 800c042:	e0df      	b.n	800c204 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	685b      	ldr	r3, [r3, #4]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d003      	beq.n	800c054 <HAL_SPI_TransmitReceive+0x23a>
 800c04c:	8a7b      	ldrh	r3, [r7, #18]
 800c04e:	2b01      	cmp	r3, #1
 800c050:	f040 80cb 	bne.w	800c1ea <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c058:	b29b      	uxth	r3, r3
 800c05a:	2b01      	cmp	r3, #1
 800c05c:	d912      	bls.n	800c084 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c062:	881a      	ldrh	r2, [r3, #0]
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c06e:	1c9a      	adds	r2, r3, #2
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c078:	b29b      	uxth	r3, r3
 800c07a:	3b02      	subs	r3, #2
 800c07c:	b29a      	uxth	r2, r3
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c082:	e0b2      	b.n	800c1ea <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	330c      	adds	r3, #12
 800c08e:	7812      	ldrb	r2, [r2, #0]
 800c090:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c096:	1c5a      	adds	r2, r3, #1
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c0a0:	b29b      	uxth	r3, r3
 800c0a2:	3b01      	subs	r3, #1
 800c0a4:	b29a      	uxth	r2, r3
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c0aa:	e09e      	b.n	800c1ea <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	689b      	ldr	r3, [r3, #8]
 800c0b2:	f003 0302 	and.w	r3, r3, #2
 800c0b6:	2b02      	cmp	r3, #2
 800c0b8:	d134      	bne.n	800c124 <HAL_SPI_TransmitReceive+0x30a>
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c0be:	b29b      	uxth	r3, r3
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d02f      	beq.n	800c124 <HAL_SPI_TransmitReceive+0x30a>
 800c0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c6:	2b01      	cmp	r3, #1
 800c0c8:	d12c      	bne.n	800c124 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c0ce:	b29b      	uxth	r3, r3
 800c0d0:	2b01      	cmp	r3, #1
 800c0d2:	d912      	bls.n	800c0fa <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0d8:	881a      	ldrh	r2, [r3, #0]
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0e4:	1c9a      	adds	r2, r3, #2
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c0ee:	b29b      	uxth	r3, r3
 800c0f0:	3b02      	subs	r3, #2
 800c0f2:	b29a      	uxth	r2, r3
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c0f8:	e012      	b.n	800c120 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	330c      	adds	r3, #12
 800c104:	7812      	ldrb	r2, [r2, #0]
 800c106:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c10c:	1c5a      	adds	r2, r3, #1
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c116:	b29b      	uxth	r3, r3
 800c118:	3b01      	subs	r3, #1
 800c11a:	b29a      	uxth	r2, r3
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c120:	2300      	movs	r3, #0
 800c122:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	689b      	ldr	r3, [r3, #8]
 800c12a:	f003 0301 	and.w	r3, r3, #1
 800c12e:	2b01      	cmp	r3, #1
 800c130:	d148      	bne.n	800c1c4 <HAL_SPI_TransmitReceive+0x3aa>
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c138:	b29b      	uxth	r3, r3
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d042      	beq.n	800c1c4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c144:	b29b      	uxth	r3, r3
 800c146:	2b01      	cmp	r3, #1
 800c148:	d923      	bls.n	800c192 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	68da      	ldr	r2, [r3, #12]
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c154:	b292      	uxth	r2, r2
 800c156:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c15c:	1c9a      	adds	r2, r3, #2
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c168:	b29b      	uxth	r3, r3
 800c16a:	3b02      	subs	r3, #2
 800c16c:	b29a      	uxth	r2, r3
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c17a:	b29b      	uxth	r3, r3
 800c17c:	2b01      	cmp	r3, #1
 800c17e:	d81f      	bhi.n	800c1c0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	685a      	ldr	r2, [r3, #4]
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c18e:	605a      	str	r2, [r3, #4]
 800c190:	e016      	b.n	800c1c0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	f103 020c 	add.w	r2, r3, #12
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c19e:	7812      	ldrb	r2, [r2, #0]
 800c1a0:	b2d2      	uxtb	r2, r2
 800c1a2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1a8:	1c5a      	adds	r2, r3, #1
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c1b4:	b29b      	uxth	r3, r3
 800c1b6:	3b01      	subs	r3, #1
 800c1b8:	b29a      	uxth	r2, r3
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c1c4:	f7fb f9c4 	bl	8007550 <HAL_GetTick>
 800c1c8:	4602      	mov	r2, r0
 800c1ca:	69fb      	ldr	r3, [r7, #28]
 800c1cc:	1ad3      	subs	r3, r2, r3
 800c1ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	d803      	bhi.n	800c1dc <HAL_SPI_TransmitReceive+0x3c2>
 800c1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1da:	d102      	bne.n	800c1e2 <HAL_SPI_TransmitReceive+0x3c8>
 800c1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d103      	bne.n	800c1ea <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800c1e2:	2303      	movs	r3, #3
 800c1e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800c1e8:	e01c      	b.n	800c224 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c1ee:	b29b      	uxth	r3, r3
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	f47f af5b 	bne.w	800c0ac <HAL_SPI_TransmitReceive+0x292>
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c1fc:	b29b      	uxth	r3, r3
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	f47f af54 	bne.w	800c0ac <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c204:	69fa      	ldr	r2, [r7, #28]
 800c206:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c208:	68f8      	ldr	r0, [r7, #12]
 800c20a:	f000 fe89 	bl	800cf20 <SPI_EndRxTxTransaction>
 800c20e:	4603      	mov	r3, r0
 800c210:	2b00      	cmp	r3, #0
 800c212:	d006      	beq.n	800c222 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800c214:	2301      	movs	r3, #1
 800c216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	2220      	movs	r2, #32
 800c21e:	661a      	str	r2, [r3, #96]	; 0x60
 800c220:	e000      	b.n	800c224 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800c222:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	2201      	movs	r2, #1
 800c228:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	2200      	movs	r2, #0
 800c230:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c234:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800c238:	4618      	mov	r0, r3
 800c23a:	3728      	adds	r7, #40	; 0x28
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}

0800c240 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b086      	sub	sp, #24
 800c244:	af00      	add	r7, sp, #0
 800c246:	60f8      	str	r0, [r7, #12]
 800c248:	60b9      	str	r1, [r7, #8]
 800c24a:	4613      	mov	r3, r2
 800c24c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c24e:	2300      	movs	r3, #0
 800c250:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c258:	2b01      	cmp	r3, #1
 800c25a:	d101      	bne.n	800c260 <HAL_SPI_Transmit_DMA+0x20>
 800c25c:	2302      	movs	r3, #2
 800c25e:	e0d8      	b.n	800c412 <HAL_SPI_Transmit_DMA+0x1d2>
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	2201      	movs	r2, #1
 800c264:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c26e:	b2db      	uxtb	r3, r3
 800c270:	2b01      	cmp	r3, #1
 800c272:	d002      	beq.n	800c27a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800c274:	2302      	movs	r3, #2
 800c276:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c278:	e0c6      	b.n	800c408 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d002      	beq.n	800c286 <HAL_SPI_Transmit_DMA+0x46>
 800c280:	88fb      	ldrh	r3, [r7, #6]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d102      	bne.n	800c28c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800c286:	2301      	movs	r3, #1
 800c288:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c28a:	e0bd      	b.n	800c408 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	2203      	movs	r2, #3
 800c290:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	2200      	movs	r2, #0
 800c298:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	68ba      	ldr	r2, [r7, #8]
 800c29e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	88fa      	ldrh	r2, [r7, #6]
 800c2a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	88fa      	ldrh	r2, [r7, #6]
 800c2aa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	689b      	ldr	r3, [r3, #8]
 800c2d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c2d6:	d10f      	bne.n	800c2f8 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	681a      	ldr	r2, [r3, #0]
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c2e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	681a      	ldr	r2, [r3, #0]
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c2f6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2fc:	4a47      	ldr	r2, [pc, #284]	; (800c41c <HAL_SPI_Transmit_DMA+0x1dc>)
 800c2fe:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c304:	4a46      	ldr	r2, [pc, #280]	; (800c420 <HAL_SPI_Transmit_DMA+0x1e0>)
 800c306:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c30c:	4a45      	ldr	r2, [pc, #276]	; (800c424 <HAL_SPI_Transmit_DMA+0x1e4>)
 800c30e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c314:	2200      	movs	r2, #0
 800c316:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	685a      	ldr	r2, [r3, #4]
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c326:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	68db      	ldr	r3, [r3, #12]
 800c32c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c330:	d82d      	bhi.n	800c38e <HAL_SPI_Transmit_DMA+0x14e>
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c336:	699b      	ldr	r3, [r3, #24]
 800c338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c33c:	d127      	bne.n	800c38e <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c342:	b29b      	uxth	r3, r3
 800c344:	f003 0301 	and.w	r3, r3, #1
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d10f      	bne.n	800c36c <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	685a      	ldr	r2, [r3, #4]
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c35a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c360:	b29b      	uxth	r3, r3
 800c362:	085b      	lsrs	r3, r3, #1
 800c364:	b29a      	uxth	r2, r3
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c36a:	e010      	b.n	800c38e <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	685a      	ldr	r2, [r3, #4]
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c37a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c380:	b29b      	uxth	r3, r3
 800c382:	085b      	lsrs	r3, r3, #1
 800c384:	b29b      	uxth	r3, r3
 800c386:	3301      	adds	r3, #1
 800c388:	b29a      	uxth	r2, r3
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c396:	4619      	mov	r1, r3
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	330c      	adds	r3, #12
 800c39e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c3a4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c3a6:	f7fb fa9d 	bl	80078e4 <HAL_DMA_Start_IT>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d00c      	beq.n	800c3ca <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c3b4:	f043 0210 	orr.w	r2, r3, #16
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800c3bc:	2301      	movs	r3, #1
 800c3be:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	2201      	movs	r2, #1
 800c3c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800c3c8:	e01e      	b.n	800c408 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3d4:	2b40      	cmp	r3, #64	; 0x40
 800c3d6:	d007      	beq.n	800c3e8 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	681a      	ldr	r2, [r3, #0]
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c3e6:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	685a      	ldr	r2, [r3, #4]
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	f042 0220 	orr.w	r2, r2, #32
 800c3f6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	685a      	ldr	r2, [r3, #4]
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	f042 0202 	orr.w	r2, r2, #2
 800c406:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	2200      	movs	r2, #0
 800c40c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c410:	7dfb      	ldrb	r3, [r7, #23]
}
 800c412:	4618      	mov	r0, r3
 800c414:	3718      	adds	r7, #24
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}
 800c41a:	bf00      	nop
 800c41c:	0800cb77 	.word	0x0800cb77
 800c420:	0800c999 	.word	0x0800c999
 800c424:	0800cbcb 	.word	0x0800cbcb

0800c428 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b086      	sub	sp, #24
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	60f8      	str	r0, [r7, #12]
 800c430:	60b9      	str	r1, [r7, #8]
 800c432:	607a      	str	r2, [r7, #4]
 800c434:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c436:	2300      	movs	r3, #0
 800c438:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c440:	2b01      	cmp	r3, #1
 800c442:	d101      	bne.n	800c448 <HAL_SPI_TransmitReceive_DMA+0x20>
 800c444:	2302      	movs	r3, #2
 800c446:	e16c      	b.n	800c722 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	2201      	movs	r2, #1
 800c44c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c456:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	685b      	ldr	r3, [r3, #4]
 800c45c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800c45e:	7dbb      	ldrb	r3, [r7, #22]
 800c460:	2b01      	cmp	r3, #1
 800c462:	d00d      	beq.n	800c480 <HAL_SPI_TransmitReceive_DMA+0x58>
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c46a:	d106      	bne.n	800c47a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	689b      	ldr	r3, [r3, #8]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d102      	bne.n	800c47a <HAL_SPI_TransmitReceive_DMA+0x52>
 800c474:	7dbb      	ldrb	r3, [r7, #22]
 800c476:	2b04      	cmp	r3, #4
 800c478:	d002      	beq.n	800c480 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800c47a:	2302      	movs	r3, #2
 800c47c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c47e:	e14b      	b.n	800c718 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d005      	beq.n	800c492 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d002      	beq.n	800c492 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800c48c:	887b      	ldrh	r3, [r7, #2]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d102      	bne.n	800c498 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800c492:	2301      	movs	r3, #1
 800c494:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c496:	e13f      	b.n	800c718 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c49e:	b2db      	uxtb	r3, r3
 800c4a0:	2b04      	cmp	r3, #4
 800c4a2:	d003      	beq.n	800c4ac <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	2205      	movs	r2, #5
 800c4a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	68ba      	ldr	r2, [r7, #8]
 800c4b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	887a      	ldrh	r2, [r7, #2]
 800c4bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	887a      	ldrh	r2, [r7, #2]
 800c4c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	687a      	ldr	r2, [r7, #4]
 800c4c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	887a      	ldrh	r2, [r7, #2]
 800c4ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	887a      	ldrh	r2, [r7, #2]
 800c4d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	685a      	ldr	r2, [r3, #4]
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800c4f4:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	68db      	ldr	r3, [r3, #12]
 800c4fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c4fe:	d908      	bls.n	800c512 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	685a      	ldr	r2, [r3, #4]
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c50e:	605a      	str	r2, [r3, #4]
 800c510:	e06f      	b.n	800c5f2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	685a      	ldr	r2, [r3, #4]
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c520:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c526:	699b      	ldr	r3, [r3, #24]
 800c528:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c52c:	d126      	bne.n	800c57c <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c532:	f003 0301 	and.w	r3, r3, #1
 800c536:	2b00      	cmp	r3, #0
 800c538:	d10f      	bne.n	800c55a <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	685a      	ldr	r2, [r3, #4]
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c548:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c54e:	b29b      	uxth	r3, r3
 800c550:	085b      	lsrs	r3, r3, #1
 800c552:	b29a      	uxth	r2, r3
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c558:	e010      	b.n	800c57c <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	685a      	ldr	r2, [r3, #4]
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c568:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c56e:	b29b      	uxth	r3, r3
 800c570:	085b      	lsrs	r3, r3, #1
 800c572:	b29b      	uxth	r3, r3
 800c574:	3301      	adds	r3, #1
 800c576:	b29a      	uxth	r2, r3
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c580:	699b      	ldr	r3, [r3, #24]
 800c582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c586:	d134      	bne.n	800c5f2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	685a      	ldr	r2, [r3, #4]
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c596:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c59e:	b29b      	uxth	r3, r3
 800c5a0:	f003 0301 	and.w	r3, r3, #1
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d111      	bne.n	800c5cc <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	685a      	ldr	r2, [r3, #4]
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c5b6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c5be:	b29b      	uxth	r3, r3
 800c5c0:	085b      	lsrs	r3, r3, #1
 800c5c2:	b29a      	uxth	r2, r3
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800c5ca:	e012      	b.n	800c5f2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	685a      	ldr	r2, [r3, #4]
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c5da:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c5e2:	b29b      	uxth	r3, r3
 800c5e4:	085b      	lsrs	r3, r3, #1
 800c5e6:	b29b      	uxth	r3, r3
 800c5e8:	3301      	adds	r3, #1
 800c5ea:	b29a      	uxth	r2, r3
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c5f8:	b2db      	uxtb	r3, r3
 800c5fa:	2b04      	cmp	r3, #4
 800c5fc:	d108      	bne.n	800c610 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c602:	4a4a      	ldr	r2, [pc, #296]	; (800c72c <HAL_SPI_TransmitReceive_DMA+0x304>)
 800c604:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c60a:	4a49      	ldr	r2, [pc, #292]	; (800c730 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800c60c:	62da      	str	r2, [r3, #44]	; 0x2c
 800c60e:	e007      	b.n	800c620 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c614:	4a47      	ldr	r2, [pc, #284]	; (800c734 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800c616:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c61c:	4a46      	ldr	r2, [pc, #280]	; (800c738 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800c61e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c624:	4a45      	ldr	r2, [pc, #276]	; (800c73c <HAL_SPI_TransmitReceive_DMA+0x314>)
 800c626:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c62c:	2200      	movs	r2, #0
 800c62e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	330c      	adds	r3, #12
 800c63a:	4619      	mov	r1, r3
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c640:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c648:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800c64a:	f7fb f94b 	bl	80078e4 <HAL_DMA_Start_IT>
 800c64e:	4603      	mov	r3, r0
 800c650:	2b00      	cmp	r3, #0
 800c652:	d00c      	beq.n	800c66e <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c658:	f043 0210 	orr.w	r2, r3, #16
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800c660:	2301      	movs	r3, #1
 800c662:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	2201      	movs	r2, #1
 800c668:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800c66c:	e054      	b.n	800c718 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	685a      	ldr	r2, [r3, #4]
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	f042 0201 	orr.w	r2, r2, #1
 800c67c:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c682:	2200      	movs	r2, #0
 800c684:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c68a:	2200      	movs	r2, #0
 800c68c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c692:	2200      	movs	r2, #0
 800c694:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c69a:	2200      	movs	r2, #0
 800c69c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6a6:	4619      	mov	r1, r3
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	330c      	adds	r3, #12
 800c6ae:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c6b4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c6b6:	f7fb f915 	bl	80078e4 <HAL_DMA_Start_IT>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d00c      	beq.n	800c6da <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c6c4:	f043 0210 	orr.w	r2, r3, #16
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	2201      	movs	r2, #1
 800c6d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800c6d8:	e01e      	b.n	800c718 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6e4:	2b40      	cmp	r3, #64	; 0x40
 800c6e6:	d007      	beq.n	800c6f8 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	681a      	ldr	r2, [r3, #0]
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c6f6:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	685a      	ldr	r2, [r3, #4]
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	f042 0220 	orr.w	r2, r2, #32
 800c706:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	685a      	ldr	r2, [r3, #4]
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f042 0202 	orr.w	r2, r2, #2
 800c716:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	2200      	movs	r2, #0
 800c71c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c720:	7dfb      	ldrb	r3, [r7, #23]
}
 800c722:	4618      	mov	r0, r3
 800c724:	3718      	adds	r7, #24
 800c726:	46bd      	mov	sp, r7
 800c728:	bd80      	pop	{r7, pc}
 800c72a:	bf00      	nop
 800c72c:	0800cb93 	.word	0x0800cb93
 800c730:	0800ca3f 	.word	0x0800ca3f
 800c734:	0800cbaf 	.word	0x0800cbaf
 800c738:	0800cae7 	.word	0x0800cae7
 800c73c:	0800cbcb 	.word	0x0800cbcb

0800c740 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b088      	sub	sp, #32
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	685b      	ldr	r3, [r3, #4]
 800c74e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	689b      	ldr	r3, [r3, #8]
 800c756:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c758:	69bb      	ldr	r3, [r7, #24]
 800c75a:	099b      	lsrs	r3, r3, #6
 800c75c:	f003 0301 	and.w	r3, r3, #1
 800c760:	2b00      	cmp	r3, #0
 800c762:	d10f      	bne.n	800c784 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c764:	69bb      	ldr	r3, [r7, #24]
 800c766:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d00a      	beq.n	800c784 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c76e:	69fb      	ldr	r3, [r7, #28]
 800c770:	099b      	lsrs	r3, r3, #6
 800c772:	f003 0301 	and.w	r3, r3, #1
 800c776:	2b00      	cmp	r3, #0
 800c778:	d004      	beq.n	800c784 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	4798      	blx	r3
    return;
 800c782:	e0d7      	b.n	800c934 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800c784:	69bb      	ldr	r3, [r7, #24]
 800c786:	085b      	lsrs	r3, r3, #1
 800c788:	f003 0301 	and.w	r3, r3, #1
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d00a      	beq.n	800c7a6 <HAL_SPI_IRQHandler+0x66>
 800c790:	69fb      	ldr	r3, [r7, #28]
 800c792:	09db      	lsrs	r3, r3, #7
 800c794:	f003 0301 	and.w	r3, r3, #1
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d004      	beq.n	800c7a6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	4798      	blx	r3
    return;
 800c7a4:	e0c6      	b.n	800c934 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800c7a6:	69bb      	ldr	r3, [r7, #24]
 800c7a8:	095b      	lsrs	r3, r3, #5
 800c7aa:	f003 0301 	and.w	r3, r3, #1
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d10c      	bne.n	800c7cc <HAL_SPI_IRQHandler+0x8c>
 800c7b2:	69bb      	ldr	r3, [r7, #24]
 800c7b4:	099b      	lsrs	r3, r3, #6
 800c7b6:	f003 0301 	and.w	r3, r3, #1
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d106      	bne.n	800c7cc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800c7be:	69bb      	ldr	r3, [r7, #24]
 800c7c0:	0a1b      	lsrs	r3, r3, #8
 800c7c2:	f003 0301 	and.w	r3, r3, #1
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	f000 80b4 	beq.w	800c934 <HAL_SPI_IRQHandler+0x1f4>
 800c7cc:	69fb      	ldr	r3, [r7, #28]
 800c7ce:	095b      	lsrs	r3, r3, #5
 800c7d0:	f003 0301 	and.w	r3, r3, #1
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	f000 80ad 	beq.w	800c934 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800c7da:	69bb      	ldr	r3, [r7, #24]
 800c7dc:	099b      	lsrs	r3, r3, #6
 800c7de:	f003 0301 	and.w	r3, r3, #1
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d023      	beq.n	800c82e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c7ec:	b2db      	uxtb	r3, r3
 800c7ee:	2b03      	cmp	r3, #3
 800c7f0:	d011      	beq.n	800c816 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c7f6:	f043 0204 	orr.w	r2, r3, #4
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c7fe:	2300      	movs	r3, #0
 800c800:	617b      	str	r3, [r7, #20]
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	68db      	ldr	r3, [r3, #12]
 800c808:	617b      	str	r3, [r7, #20]
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	689b      	ldr	r3, [r3, #8]
 800c810:	617b      	str	r3, [r7, #20]
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	e00b      	b.n	800c82e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c816:	2300      	movs	r3, #0
 800c818:	613b      	str	r3, [r7, #16]
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	68db      	ldr	r3, [r3, #12]
 800c820:	613b      	str	r3, [r7, #16]
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	689b      	ldr	r3, [r3, #8]
 800c828:	613b      	str	r3, [r7, #16]
 800c82a:	693b      	ldr	r3, [r7, #16]
        return;
 800c82c:	e082      	b.n	800c934 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800c82e:	69bb      	ldr	r3, [r7, #24]
 800c830:	095b      	lsrs	r3, r3, #5
 800c832:	f003 0301 	and.w	r3, r3, #1
 800c836:	2b00      	cmp	r3, #0
 800c838:	d014      	beq.n	800c864 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c83e:	f043 0201 	orr.w	r2, r3, #1
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c846:	2300      	movs	r3, #0
 800c848:	60fb      	str	r3, [r7, #12]
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	689b      	ldr	r3, [r3, #8]
 800c850:	60fb      	str	r3, [r7, #12]
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	681a      	ldr	r2, [r3, #0]
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c860:	601a      	str	r2, [r3, #0]
 800c862:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800c864:	69bb      	ldr	r3, [r7, #24]
 800c866:	0a1b      	lsrs	r3, r3, #8
 800c868:	f003 0301 	and.w	r3, r3, #1
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d00c      	beq.n	800c88a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c874:	f043 0208 	orr.w	r2, r3, #8
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c87c:	2300      	movs	r3, #0
 800c87e:	60bb      	str	r3, [r7, #8]
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	689b      	ldr	r3, [r3, #8]
 800c886:	60bb      	str	r3, [r7, #8]
 800c888:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d04f      	beq.n	800c932 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	685a      	ldr	r2, [r3, #4]
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c8a0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2201      	movs	r2, #1
 800c8a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800c8aa:	69fb      	ldr	r3, [r7, #28]
 800c8ac:	f003 0302 	and.w	r3, r3, #2
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d104      	bne.n	800c8be <HAL_SPI_IRQHandler+0x17e>
 800c8b4:	69fb      	ldr	r3, [r7, #28]
 800c8b6:	f003 0301 	and.w	r3, r3, #1
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d034      	beq.n	800c928 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	685a      	ldr	r2, [r3, #4]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	f022 0203 	bic.w	r2, r2, #3
 800c8cc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d011      	beq.n	800c8fa <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8da:	4a18      	ldr	r2, [pc, #96]	; (800c93c <HAL_SPI_IRQHandler+0x1fc>)
 800c8dc:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f7fb f89c 	bl	8007a20 <HAL_DMA_Abort_IT>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d005      	beq.n	800c8fa <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c8f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d016      	beq.n	800c930 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c906:	4a0d      	ldr	r2, [pc, #52]	; (800c93c <HAL_SPI_IRQHandler+0x1fc>)
 800c908:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c90e:	4618      	mov	r0, r3
 800c910:	f7fb f886 	bl	8007a20 <HAL_DMA_Abort_IT>
 800c914:	4603      	mov	r3, r0
 800c916:	2b00      	cmp	r3, #0
 800c918:	d00a      	beq.n	800c930 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c91e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800c926:	e003      	b.n	800c930 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800c928:	6878      	ldr	r0, [r7, #4]
 800c92a:	f7f6 ff1f 	bl	800376c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800c92e:	e000      	b.n	800c932 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800c930:	bf00      	nop
    return;
 800c932:	bf00      	nop
  }
}
 800c934:	3720      	adds	r7, #32
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}
 800c93a:	bf00      	nop
 800c93c:	0800cc0b 	.word	0x0800cc0b

0800c940 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c940:	b480      	push	{r7}
 800c942:	b083      	sub	sp, #12
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800c948:	bf00      	nop
 800c94a:	370c      	adds	r7, #12
 800c94c:	46bd      	mov	sp, r7
 800c94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c952:	4770      	bx	lr

0800c954 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c954:	b480      	push	{r7}
 800c956:	b083      	sub	sp, #12
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800c95c:	bf00      	nop
 800c95e:	370c      	adds	r7, #12
 800c960:	46bd      	mov	sp, r7
 800c962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c966:	4770      	bx	lr

0800c968 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c968:	b480      	push	{r7}
 800c96a:	b083      	sub	sp, #12
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800c970:	bf00      	nop
 800c972:	370c      	adds	r7, #12
 800c974:	46bd      	mov	sp, r7
 800c976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97a:	4770      	bx	lr

0800c97c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800c97c:	b480      	push	{r7}
 800c97e:	b083      	sub	sp, #12
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c98a:	b2db      	uxtb	r3, r3
}
 800c98c:	4618      	mov	r0, r3
 800c98e:	370c      	adds	r7, #12
 800c990:	46bd      	mov	sp, r7
 800c992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c996:	4770      	bx	lr

0800c998 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b086      	sub	sp, #24
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9a4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c9a6:	f7fa fdd3 	bl	8007550 <HAL_GetTick>
 800c9aa:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	f003 0320 	and.w	r3, r3, #32
 800c9b6:	2b20      	cmp	r3, #32
 800c9b8:	d03b      	beq.n	800ca32 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	685a      	ldr	r2, [r3, #4]
 800c9c0:	697b      	ldr	r3, [r7, #20]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	f022 0220 	bic.w	r2, r2, #32
 800c9c8:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	685a      	ldr	r2, [r3, #4]
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f022 0202 	bic.w	r2, r2, #2
 800c9d8:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c9da:	693a      	ldr	r2, [r7, #16]
 800c9dc:	2164      	movs	r1, #100	; 0x64
 800c9de:	6978      	ldr	r0, [r7, #20]
 800c9e0:	f000 fa9e 	bl	800cf20 <SPI_EndRxTxTransaction>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d005      	beq.n	800c9f6 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c9ee:	f043 0220 	orr.w	r2, r3, #32
 800c9f2:	697b      	ldr	r3, [r7, #20]
 800c9f4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c9f6:	697b      	ldr	r3, [r7, #20]
 800c9f8:	689b      	ldr	r3, [r3, #8]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d10a      	bne.n	800ca14 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c9fe:	2300      	movs	r3, #0
 800ca00:	60fb      	str	r3, [r7, #12]
 800ca02:	697b      	ldr	r3, [r7, #20]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	68db      	ldr	r3, [r3, #12]
 800ca08:	60fb      	str	r3, [r7, #12]
 800ca0a:	697b      	ldr	r3, [r7, #20]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	689b      	ldr	r3, [r3, #8]
 800ca10:	60fb      	str	r3, [r7, #12]
 800ca12:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800ca14:	697b      	ldr	r3, [r7, #20]
 800ca16:	2200      	movs	r2, #0
 800ca18:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800ca1a:	697b      	ldr	r3, [r7, #20]
 800ca1c:	2201      	movs	r2, #1
 800ca1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d003      	beq.n	800ca32 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ca2a:	6978      	ldr	r0, [r7, #20]
 800ca2c:	f7f6 fe9e 	bl	800376c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ca30:	e002      	b.n	800ca38 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800ca32:	6978      	ldr	r0, [r7, #20]
 800ca34:	f7f6 fe83 	bl	800373e <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ca38:	3718      	adds	r7, #24
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}

0800ca3e <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ca3e:	b580      	push	{r7, lr}
 800ca40:	b084      	sub	sp, #16
 800ca42:	af00      	add	r7, sp, #0
 800ca44:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca4a:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ca4c:	f7fa fd80 	bl	8007550 <HAL_GetTick>
 800ca50:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	f003 0320 	and.w	r3, r3, #32
 800ca5c:	2b20      	cmp	r3, #32
 800ca5e:	d03c      	beq.n	800cada <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	685a      	ldr	r2, [r3, #4]
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	f022 0220 	bic.w	r2, r2, #32
 800ca6e:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	689b      	ldr	r3, [r3, #8]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d10d      	bne.n	800ca94 <SPI_DMAReceiveCplt+0x56>
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	685b      	ldr	r3, [r3, #4]
 800ca7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ca80:	d108      	bne.n	800ca94 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	685a      	ldr	r2, [r3, #4]
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	f022 0203 	bic.w	r2, r2, #3
 800ca90:	605a      	str	r2, [r3, #4]
 800ca92:	e007      	b.n	800caa4 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	685a      	ldr	r2, [r3, #4]
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f022 0201 	bic.w	r2, r2, #1
 800caa2:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800caa4:	68ba      	ldr	r2, [r7, #8]
 800caa6:	2164      	movs	r1, #100	; 0x64
 800caa8:	68f8      	ldr	r0, [r7, #12]
 800caaa:	f000 f9e1 	bl	800ce70 <SPI_EndRxTransaction>
 800caae:	4603      	mov	r3, r0
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d002      	beq.n	800caba <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	2220      	movs	r2, #32
 800cab8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	2200      	movs	r2, #0
 800cabe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	2201      	movs	r2, #1
 800cac6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d003      	beq.n	800cada <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800cad2:	68f8      	ldr	r0, [r7, #12]
 800cad4:	f7f6 fe4a 	bl	800376c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800cad8:	e002      	b.n	800cae0 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800cada:	68f8      	ldr	r0, [r7, #12]
 800cadc:	f7f6 fe24 	bl	8003728 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cae0:	3710      	adds	r7, #16
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}

0800cae6 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cae6:	b580      	push	{r7, lr}
 800cae8:	b084      	sub	sp, #16
 800caea:	af00      	add	r7, sp, #0
 800caec:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caf2:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800caf4:	f7fa fd2c 	bl	8007550 <HAL_GetTick>
 800caf8:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	f003 0320 	and.w	r3, r3, #32
 800cb04:	2b20      	cmp	r3, #32
 800cb06:	d030      	beq.n	800cb6a <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	685a      	ldr	r2, [r3, #4]
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	f022 0220 	bic.w	r2, r2, #32
 800cb16:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800cb18:	68ba      	ldr	r2, [r7, #8]
 800cb1a:	2164      	movs	r1, #100	; 0x64
 800cb1c:	68f8      	ldr	r0, [r7, #12]
 800cb1e:	f000 f9ff 	bl	800cf20 <SPI_EndRxTxTransaction>
 800cb22:	4603      	mov	r3, r0
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d005      	beq.n	800cb34 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cb2c:	f043 0220 	orr.w	r2, r3, #32
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	685a      	ldr	r2, [r3, #4]
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	f022 0203 	bic.w	r2, r2, #3
 800cb42:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	2200      	movs	r2, #0
 800cb48:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	2201      	movs	r2, #1
 800cb56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d003      	beq.n	800cb6a <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800cb62:	68f8      	ldr	r0, [r7, #12]
 800cb64:	f7f6 fe02 	bl	800376c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800cb68:	e002      	b.n	800cb70 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800cb6a:	68f8      	ldr	r0, [r7, #12]
 800cb6c:	f7f6 fdf2 	bl	8003754 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cb70:	3710      	adds	r7, #16
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}

0800cb76 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cb76:	b580      	push	{r7, lr}
 800cb78:	b084      	sub	sp, #16
 800cb7a:	af00      	add	r7, sp, #0
 800cb7c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb82:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800cb84:	68f8      	ldr	r0, [r7, #12]
 800cb86:	f7ff fedb 	bl	800c940 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cb8a:	bf00      	nop
 800cb8c:	3710      	adds	r7, #16
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}

0800cb92 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cb92:	b580      	push	{r7, lr}
 800cb94:	b084      	sub	sp, #16
 800cb96:	af00      	add	r7, sp, #0
 800cb98:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb9e:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800cba0:	68f8      	ldr	r0, [r7, #12]
 800cba2:	f7ff fed7 	bl	800c954 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cba6:	bf00      	nop
 800cba8:	3710      	adds	r7, #16
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}

0800cbae <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cbae:	b580      	push	{r7, lr}
 800cbb0:	b084      	sub	sp, #16
 800cbb2:	af00      	add	r7, sp, #0
 800cbb4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbba:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800cbbc:	68f8      	ldr	r0, [r7, #12]
 800cbbe:	f7ff fed3 	bl	800c968 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cbc2:	bf00      	nop
 800cbc4:	3710      	adds	r7, #16
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}

0800cbca <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800cbca:	b580      	push	{r7, lr}
 800cbcc:	b084      	sub	sp, #16
 800cbce:	af00      	add	r7, sp, #0
 800cbd0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbd6:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	685a      	ldr	r2, [r3, #4]
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	f022 0203 	bic.w	r2, r2, #3
 800cbe6:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cbec:	f043 0210 	orr.w	r2, r3, #16
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	2201      	movs	r2, #1
 800cbf8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800cbfc:	68f8      	ldr	r0, [r7, #12]
 800cbfe:	f7f6 fdb5 	bl	800376c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cc02:	bf00      	nop
 800cc04:	3710      	adds	r7, #16
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}

0800cc0a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cc0a:	b580      	push	{r7, lr}
 800cc0c:	b084      	sub	sp, #16
 800cc0e:	af00      	add	r7, sp, #0
 800cc10:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc16:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	2200      	movs	r2, #0
 800cc24:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800cc26:	68f8      	ldr	r0, [r7, #12]
 800cc28:	f7f6 fda0 	bl	800376c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cc2c:	bf00      	nop
 800cc2e:	3710      	adds	r7, #16
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}

0800cc34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b088      	sub	sp, #32
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	60f8      	str	r0, [r7, #12]
 800cc3c:	60b9      	str	r1, [r7, #8]
 800cc3e:	603b      	str	r3, [r7, #0]
 800cc40:	4613      	mov	r3, r2
 800cc42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800cc44:	f7fa fc84 	bl	8007550 <HAL_GetTick>
 800cc48:	4602      	mov	r2, r0
 800cc4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc4c:	1a9b      	subs	r3, r3, r2
 800cc4e:	683a      	ldr	r2, [r7, #0]
 800cc50:	4413      	add	r3, r2
 800cc52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800cc54:	f7fa fc7c 	bl	8007550 <HAL_GetTick>
 800cc58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800cc5a:	4b39      	ldr	r3, [pc, #228]	; (800cd40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	015b      	lsls	r3, r3, #5
 800cc60:	0d1b      	lsrs	r3, r3, #20
 800cc62:	69fa      	ldr	r2, [r7, #28]
 800cc64:	fb02 f303 	mul.w	r3, r2, r3
 800cc68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cc6a:	e054      	b.n	800cd16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc72:	d050      	beq.n	800cd16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800cc74:	f7fa fc6c 	bl	8007550 <HAL_GetTick>
 800cc78:	4602      	mov	r2, r0
 800cc7a:	69bb      	ldr	r3, [r7, #24]
 800cc7c:	1ad3      	subs	r3, r2, r3
 800cc7e:	69fa      	ldr	r2, [r7, #28]
 800cc80:	429a      	cmp	r2, r3
 800cc82:	d902      	bls.n	800cc8a <SPI_WaitFlagStateUntilTimeout+0x56>
 800cc84:	69fb      	ldr	r3, [r7, #28]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d13d      	bne.n	800cd06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	685a      	ldr	r2, [r3, #4]
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800cc98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	685b      	ldr	r3, [r3, #4]
 800cc9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cca2:	d111      	bne.n	800ccc8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	689b      	ldr	r3, [r3, #8]
 800cca8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ccac:	d004      	beq.n	800ccb8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	689b      	ldr	r3, [r3, #8]
 800ccb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ccb6:	d107      	bne.n	800ccc8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	681a      	ldr	r2, [r3, #0]
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ccc6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cccc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ccd0:	d10f      	bne.n	800ccf2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	681a      	ldr	r2, [r3, #0]
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cce0:	601a      	str	r2, [r3, #0]
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	681a      	ldr	r2, [r3, #0]
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ccf0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	2201      	movs	r2, #1
 800ccf6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800cd02:	2303      	movs	r3, #3
 800cd04:	e017      	b.n	800cd36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800cd06:	697b      	ldr	r3, [r7, #20]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d101      	bne.n	800cd10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800cd10:	697b      	ldr	r3, [r7, #20]
 800cd12:	3b01      	subs	r3, #1
 800cd14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	689a      	ldr	r2, [r3, #8]
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	4013      	ands	r3, r2
 800cd20:	68ba      	ldr	r2, [r7, #8]
 800cd22:	429a      	cmp	r2, r3
 800cd24:	bf0c      	ite	eq
 800cd26:	2301      	moveq	r3, #1
 800cd28:	2300      	movne	r3, #0
 800cd2a:	b2db      	uxtb	r3, r3
 800cd2c:	461a      	mov	r2, r3
 800cd2e:	79fb      	ldrb	r3, [r7, #7]
 800cd30:	429a      	cmp	r2, r3
 800cd32:	d19b      	bne.n	800cc6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800cd34:	2300      	movs	r3, #0
}
 800cd36:	4618      	mov	r0, r3
 800cd38:	3720      	adds	r7, #32
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}
 800cd3e:	bf00      	nop
 800cd40:	20000134 	.word	0x20000134

0800cd44 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b08a      	sub	sp, #40	; 0x28
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	60f8      	str	r0, [r7, #12]
 800cd4c:	60b9      	str	r1, [r7, #8]
 800cd4e:	607a      	str	r2, [r7, #4]
 800cd50:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800cd52:	2300      	movs	r3, #0
 800cd54:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800cd56:	f7fa fbfb 	bl	8007550 <HAL_GetTick>
 800cd5a:	4602      	mov	r2, r0
 800cd5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd5e:	1a9b      	subs	r3, r3, r2
 800cd60:	683a      	ldr	r2, [r7, #0]
 800cd62:	4413      	add	r3, r2
 800cd64:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800cd66:	f7fa fbf3 	bl	8007550 <HAL_GetTick>
 800cd6a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	330c      	adds	r3, #12
 800cd72:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800cd74:	4b3d      	ldr	r3, [pc, #244]	; (800ce6c <SPI_WaitFifoStateUntilTimeout+0x128>)
 800cd76:	681a      	ldr	r2, [r3, #0]
 800cd78:	4613      	mov	r3, r2
 800cd7a:	009b      	lsls	r3, r3, #2
 800cd7c:	4413      	add	r3, r2
 800cd7e:	00da      	lsls	r2, r3, #3
 800cd80:	1ad3      	subs	r3, r2, r3
 800cd82:	0d1b      	lsrs	r3, r3, #20
 800cd84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd86:	fb02 f303 	mul.w	r3, r2, r3
 800cd8a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800cd8c:	e060      	b.n	800ce50 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800cd8e:	68bb      	ldr	r3, [r7, #8]
 800cd90:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800cd94:	d107      	bne.n	800cda6 <SPI_WaitFifoStateUntilTimeout+0x62>
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d104      	bne.n	800cda6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800cd9c:	69fb      	ldr	r3, [r7, #28]
 800cd9e:	781b      	ldrb	r3, [r3, #0]
 800cda0:	b2db      	uxtb	r3, r3
 800cda2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800cda4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cdac:	d050      	beq.n	800ce50 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800cdae:	f7fa fbcf 	bl	8007550 <HAL_GetTick>
 800cdb2:	4602      	mov	r2, r0
 800cdb4:	6a3b      	ldr	r3, [r7, #32]
 800cdb6:	1ad3      	subs	r3, r2, r3
 800cdb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdba:	429a      	cmp	r2, r3
 800cdbc:	d902      	bls.n	800cdc4 <SPI_WaitFifoStateUntilTimeout+0x80>
 800cdbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d13d      	bne.n	800ce40 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	685a      	ldr	r2, [r3, #4]
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800cdd2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	685b      	ldr	r3, [r3, #4]
 800cdd8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cddc:	d111      	bne.n	800ce02 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	689b      	ldr	r3, [r3, #8]
 800cde2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cde6:	d004      	beq.n	800cdf2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	689b      	ldr	r3, [r3, #8]
 800cdec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cdf0:	d107      	bne.n	800ce02 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	681a      	ldr	r2, [r3, #0]
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ce00:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ce0a:	d10f      	bne.n	800ce2c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	681a      	ldr	r2, [r3, #0]
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ce1a:	601a      	str	r2, [r3, #0]
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	681a      	ldr	r2, [r3, #0]
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ce2a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	2201      	movs	r2, #1
 800ce30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	2200      	movs	r2, #0
 800ce38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800ce3c:	2303      	movs	r3, #3
 800ce3e:	e010      	b.n	800ce62 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ce40:	69bb      	ldr	r3, [r7, #24]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d101      	bne.n	800ce4a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800ce46:	2300      	movs	r3, #0
 800ce48:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800ce4a:	69bb      	ldr	r3, [r7, #24]
 800ce4c:	3b01      	subs	r3, #1
 800ce4e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	689a      	ldr	r2, [r3, #8]
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	4013      	ands	r3, r2
 800ce5a:	687a      	ldr	r2, [r7, #4]
 800ce5c:	429a      	cmp	r2, r3
 800ce5e:	d196      	bne.n	800cd8e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800ce60:	2300      	movs	r3, #0
}
 800ce62:	4618      	mov	r0, r3
 800ce64:	3728      	adds	r7, #40	; 0x28
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}
 800ce6a:	bf00      	nop
 800ce6c:	20000134 	.word	0x20000134

0800ce70 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b086      	sub	sp, #24
 800ce74:	af02      	add	r7, sp, #8
 800ce76:	60f8      	str	r0, [r7, #12]
 800ce78:	60b9      	str	r1, [r7, #8]
 800ce7a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	685b      	ldr	r3, [r3, #4]
 800ce80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ce84:	d111      	bne.n	800ceaa <SPI_EndRxTransaction+0x3a>
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	689b      	ldr	r3, [r3, #8]
 800ce8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce8e:	d004      	beq.n	800ce9a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	689b      	ldr	r3, [r3, #8]
 800ce94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ce98:	d107      	bne.n	800ceaa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	681a      	ldr	r2, [r3, #0]
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cea8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	9300      	str	r3, [sp, #0]
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	2180      	movs	r1, #128	; 0x80
 800ceb4:	68f8      	ldr	r0, [r7, #12]
 800ceb6:	f7ff febd 	bl	800cc34 <SPI_WaitFlagStateUntilTimeout>
 800ceba:	4603      	mov	r3, r0
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d007      	beq.n	800ced0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cec4:	f043 0220 	orr.w	r2, r3, #32
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800cecc:	2303      	movs	r3, #3
 800cece:	e023      	b.n	800cf18 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	685b      	ldr	r3, [r3, #4]
 800ced4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ced8:	d11d      	bne.n	800cf16 <SPI_EndRxTransaction+0xa6>
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	689b      	ldr	r3, [r3, #8]
 800cede:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cee2:	d004      	beq.n	800ceee <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	689b      	ldr	r3, [r3, #8]
 800cee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ceec:	d113      	bne.n	800cf16 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	9300      	str	r3, [sp, #0]
 800cef2:	68bb      	ldr	r3, [r7, #8]
 800cef4:	2200      	movs	r2, #0
 800cef6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800cefa:	68f8      	ldr	r0, [r7, #12]
 800cefc:	f7ff ff22 	bl	800cd44 <SPI_WaitFifoStateUntilTimeout>
 800cf00:	4603      	mov	r3, r0
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d007      	beq.n	800cf16 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf0a:	f043 0220 	orr.w	r2, r3, #32
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800cf12:	2303      	movs	r3, #3
 800cf14:	e000      	b.n	800cf18 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800cf16:	2300      	movs	r3, #0
}
 800cf18:	4618      	mov	r0, r3
 800cf1a:	3710      	adds	r7, #16
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bd80      	pop	{r7, pc}

0800cf20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b086      	sub	sp, #24
 800cf24:	af02      	add	r7, sp, #8
 800cf26:	60f8      	str	r0, [r7, #12]
 800cf28:	60b9      	str	r1, [r7, #8]
 800cf2a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	9300      	str	r3, [sp, #0]
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	2200      	movs	r2, #0
 800cf34:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800cf38:	68f8      	ldr	r0, [r7, #12]
 800cf3a:	f7ff ff03 	bl	800cd44 <SPI_WaitFifoStateUntilTimeout>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d007      	beq.n	800cf54 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf48:	f043 0220 	orr.w	r2, r3, #32
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800cf50:	2303      	movs	r3, #3
 800cf52:	e027      	b.n	800cfa4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	9300      	str	r3, [sp, #0]
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	2180      	movs	r1, #128	; 0x80
 800cf5e:	68f8      	ldr	r0, [r7, #12]
 800cf60:	f7ff fe68 	bl	800cc34 <SPI_WaitFlagStateUntilTimeout>
 800cf64:	4603      	mov	r3, r0
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d007      	beq.n	800cf7a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf6e:	f043 0220 	orr.w	r2, r3, #32
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800cf76:	2303      	movs	r3, #3
 800cf78:	e014      	b.n	800cfa4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	9300      	str	r3, [sp, #0]
 800cf7e:	68bb      	ldr	r3, [r7, #8]
 800cf80:	2200      	movs	r2, #0
 800cf82:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800cf86:	68f8      	ldr	r0, [r7, #12]
 800cf88:	f7ff fedc 	bl	800cd44 <SPI_WaitFifoStateUntilTimeout>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d007      	beq.n	800cfa2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf96:	f043 0220 	orr.w	r2, r3, #32
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800cf9e:	2303      	movs	r3, #3
 800cfa0:	e000      	b.n	800cfa4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800cfa2:	2300      	movs	r3, #0
}
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	3710      	adds	r7, #16
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	bd80      	pop	{r7, pc}

0800cfac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b082      	sub	sp, #8
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d101      	bne.n	800cfbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cfba:	2301      	movs	r3, #1
 800cfbc:	e049      	b.n	800d052 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cfc4:	b2db      	uxtb	r3, r3
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d106      	bne.n	800cfd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2200      	movs	r2, #0
 800cfce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	f7f9 f98e 	bl	80062f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2202      	movs	r2, #2
 800cfdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681a      	ldr	r2, [r3, #0]
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	3304      	adds	r3, #4
 800cfe8:	4619      	mov	r1, r3
 800cfea:	4610      	mov	r0, r2
 800cfec:	f000 fab6 	bl	800d55c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2201      	movs	r2, #1
 800cff4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2201      	movs	r2, #1
 800cffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2201      	movs	r2, #1
 800d004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2201      	movs	r2, #1
 800d00c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2201      	movs	r2, #1
 800d014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2201      	movs	r2, #1
 800d01c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2201      	movs	r2, #1
 800d024:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2201      	movs	r2, #1
 800d02c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2201      	movs	r2, #1
 800d034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2201      	movs	r2, #1
 800d03c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2201      	movs	r2, #1
 800d044:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2201      	movs	r2, #1
 800d04c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d050:	2300      	movs	r3, #0
}
 800d052:	4618      	mov	r0, r3
 800d054:	3708      	adds	r7, #8
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}
	...

0800d05c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d05c:	b480      	push	{r7}
 800d05e:	b085      	sub	sp, #20
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d06a:	b2db      	uxtb	r3, r3
 800d06c:	2b01      	cmp	r3, #1
 800d06e:	d001      	beq.n	800d074 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d070:	2301      	movs	r3, #1
 800d072:	e04f      	b.n	800d114 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2202      	movs	r2, #2
 800d078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	68da      	ldr	r2, [r3, #12]
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	f042 0201 	orr.w	r2, r2, #1
 800d08a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	4a23      	ldr	r2, [pc, #140]	; (800d120 <HAL_TIM_Base_Start_IT+0xc4>)
 800d092:	4293      	cmp	r3, r2
 800d094:	d01d      	beq.n	800d0d2 <HAL_TIM_Base_Start_IT+0x76>
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d09e:	d018      	beq.n	800d0d2 <HAL_TIM_Base_Start_IT+0x76>
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	4a1f      	ldr	r2, [pc, #124]	; (800d124 <HAL_TIM_Base_Start_IT+0xc8>)
 800d0a6:	4293      	cmp	r3, r2
 800d0a8:	d013      	beq.n	800d0d2 <HAL_TIM_Base_Start_IT+0x76>
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	4a1e      	ldr	r2, [pc, #120]	; (800d128 <HAL_TIM_Base_Start_IT+0xcc>)
 800d0b0:	4293      	cmp	r3, r2
 800d0b2:	d00e      	beq.n	800d0d2 <HAL_TIM_Base_Start_IT+0x76>
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	4a1c      	ldr	r2, [pc, #112]	; (800d12c <HAL_TIM_Base_Start_IT+0xd0>)
 800d0ba:	4293      	cmp	r3, r2
 800d0bc:	d009      	beq.n	800d0d2 <HAL_TIM_Base_Start_IT+0x76>
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	4a1b      	ldr	r2, [pc, #108]	; (800d130 <HAL_TIM_Base_Start_IT+0xd4>)
 800d0c4:	4293      	cmp	r3, r2
 800d0c6:	d004      	beq.n	800d0d2 <HAL_TIM_Base_Start_IT+0x76>
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	4a19      	ldr	r2, [pc, #100]	; (800d134 <HAL_TIM_Base_Start_IT+0xd8>)
 800d0ce:	4293      	cmp	r3, r2
 800d0d0:	d115      	bne.n	800d0fe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	689a      	ldr	r2, [r3, #8]
 800d0d8:	4b17      	ldr	r3, [pc, #92]	; (800d138 <HAL_TIM_Base_Start_IT+0xdc>)
 800d0da:	4013      	ands	r3, r2
 800d0dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	2b06      	cmp	r3, #6
 800d0e2:	d015      	beq.n	800d110 <HAL_TIM_Base_Start_IT+0xb4>
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0ea:	d011      	beq.n	800d110 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	681a      	ldr	r2, [r3, #0]
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	f042 0201 	orr.w	r2, r2, #1
 800d0fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d0fc:	e008      	b.n	800d110 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	681a      	ldr	r2, [r3, #0]
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	f042 0201 	orr.w	r2, r2, #1
 800d10c:	601a      	str	r2, [r3, #0]
 800d10e:	e000      	b.n	800d112 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d110:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d112:	2300      	movs	r3, #0
}
 800d114:	4618      	mov	r0, r3
 800d116:	3714      	adds	r7, #20
 800d118:	46bd      	mov	sp, r7
 800d11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11e:	4770      	bx	lr
 800d120:	40012c00 	.word	0x40012c00
 800d124:	40000400 	.word	0x40000400
 800d128:	40000800 	.word	0x40000800
 800d12c:	40000c00 	.word	0x40000c00
 800d130:	40013400 	.word	0x40013400
 800d134:	40014000 	.word	0x40014000
 800d138:	00010007 	.word	0x00010007

0800d13c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b082      	sub	sp, #8
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	691b      	ldr	r3, [r3, #16]
 800d14a:	f003 0302 	and.w	r3, r3, #2
 800d14e:	2b02      	cmp	r3, #2
 800d150:	d122      	bne.n	800d198 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	68db      	ldr	r3, [r3, #12]
 800d158:	f003 0302 	and.w	r3, r3, #2
 800d15c:	2b02      	cmp	r3, #2
 800d15e:	d11b      	bne.n	800d198 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	f06f 0202 	mvn.w	r2, #2
 800d168:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2201      	movs	r2, #1
 800d16e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	699b      	ldr	r3, [r3, #24]
 800d176:	f003 0303 	and.w	r3, r3, #3
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d003      	beq.n	800d186 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f000 f9ce 	bl	800d520 <HAL_TIM_IC_CaptureCallback>
 800d184:	e005      	b.n	800d192 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d186:	6878      	ldr	r0, [r7, #4]
 800d188:	f000 f9c0 	bl	800d50c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f000 f9d1 	bl	800d534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	2200      	movs	r2, #0
 800d196:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	691b      	ldr	r3, [r3, #16]
 800d19e:	f003 0304 	and.w	r3, r3, #4
 800d1a2:	2b04      	cmp	r3, #4
 800d1a4:	d122      	bne.n	800d1ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	68db      	ldr	r3, [r3, #12]
 800d1ac:	f003 0304 	and.w	r3, r3, #4
 800d1b0:	2b04      	cmp	r3, #4
 800d1b2:	d11b      	bne.n	800d1ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	f06f 0204 	mvn.w	r2, #4
 800d1bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	2202      	movs	r2, #2
 800d1c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	699b      	ldr	r3, [r3, #24]
 800d1ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d003      	beq.n	800d1da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f000 f9a4 	bl	800d520 <HAL_TIM_IC_CaptureCallback>
 800d1d8:	e005      	b.n	800d1e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d1da:	6878      	ldr	r0, [r7, #4]
 800d1dc:	f000 f996 	bl	800d50c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f000 f9a7 	bl	800d534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	691b      	ldr	r3, [r3, #16]
 800d1f2:	f003 0308 	and.w	r3, r3, #8
 800d1f6:	2b08      	cmp	r3, #8
 800d1f8:	d122      	bne.n	800d240 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	68db      	ldr	r3, [r3, #12]
 800d200:	f003 0308 	and.w	r3, r3, #8
 800d204:	2b08      	cmp	r3, #8
 800d206:	d11b      	bne.n	800d240 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	f06f 0208 	mvn.w	r2, #8
 800d210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	2204      	movs	r2, #4
 800d216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	69db      	ldr	r3, [r3, #28]
 800d21e:	f003 0303 	and.w	r3, r3, #3
 800d222:	2b00      	cmp	r3, #0
 800d224:	d003      	beq.n	800d22e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d226:	6878      	ldr	r0, [r7, #4]
 800d228:	f000 f97a 	bl	800d520 <HAL_TIM_IC_CaptureCallback>
 800d22c:	e005      	b.n	800d23a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d22e:	6878      	ldr	r0, [r7, #4]
 800d230:	f000 f96c 	bl	800d50c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d234:	6878      	ldr	r0, [r7, #4]
 800d236:	f000 f97d 	bl	800d534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	2200      	movs	r2, #0
 800d23e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	691b      	ldr	r3, [r3, #16]
 800d246:	f003 0310 	and.w	r3, r3, #16
 800d24a:	2b10      	cmp	r3, #16
 800d24c:	d122      	bne.n	800d294 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	68db      	ldr	r3, [r3, #12]
 800d254:	f003 0310 	and.w	r3, r3, #16
 800d258:	2b10      	cmp	r3, #16
 800d25a:	d11b      	bne.n	800d294 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	f06f 0210 	mvn.w	r2, #16
 800d264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2208      	movs	r2, #8
 800d26a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	69db      	ldr	r3, [r3, #28]
 800d272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d276:	2b00      	cmp	r3, #0
 800d278:	d003      	beq.n	800d282 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f000 f950 	bl	800d520 <HAL_TIM_IC_CaptureCallback>
 800d280:	e005      	b.n	800d28e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d282:	6878      	ldr	r0, [r7, #4]
 800d284:	f000 f942 	bl	800d50c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f000 f953 	bl	800d534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	2200      	movs	r2, #0
 800d292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	691b      	ldr	r3, [r3, #16]
 800d29a:	f003 0301 	and.w	r3, r3, #1
 800d29e:	2b01      	cmp	r3, #1
 800d2a0:	d10e      	bne.n	800d2c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	68db      	ldr	r3, [r3, #12]
 800d2a8:	f003 0301 	and.w	r3, r3, #1
 800d2ac:	2b01      	cmp	r3, #1
 800d2ae:	d107      	bne.n	800d2c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	f06f 0201 	mvn.w	r2, #1
 800d2b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	f7f8 f85e 	bl	800537c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	691b      	ldr	r3, [r3, #16]
 800d2c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2ca:	2b80      	cmp	r3, #128	; 0x80
 800d2cc:	d10e      	bne.n	800d2ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	68db      	ldr	r3, [r3, #12]
 800d2d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2d8:	2b80      	cmp	r3, #128	; 0x80
 800d2da:	d107      	bne.n	800d2ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d2e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	f000 fafe 	bl	800d8e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	691b      	ldr	r3, [r3, #16]
 800d2f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d2fa:	d10e      	bne.n	800d31a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	68db      	ldr	r3, [r3, #12]
 800d302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d306:	2b80      	cmp	r3, #128	; 0x80
 800d308:	d107      	bne.n	800d31a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	f000 faf1 	bl	800d8fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	691b      	ldr	r3, [r3, #16]
 800d320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d324:	2b40      	cmp	r3, #64	; 0x40
 800d326:	d10e      	bne.n	800d346 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	68db      	ldr	r3, [r3, #12]
 800d32e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d332:	2b40      	cmp	r3, #64	; 0x40
 800d334:	d107      	bne.n	800d346 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d33e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f000 f901 	bl	800d548 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	691b      	ldr	r3, [r3, #16]
 800d34c:	f003 0320 	and.w	r3, r3, #32
 800d350:	2b20      	cmp	r3, #32
 800d352:	d10e      	bne.n	800d372 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	68db      	ldr	r3, [r3, #12]
 800d35a:	f003 0320 	and.w	r3, r3, #32
 800d35e:	2b20      	cmp	r3, #32
 800d360:	d107      	bne.n	800d372 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	f06f 0220 	mvn.w	r2, #32
 800d36a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f000 fab1 	bl	800d8d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d372:	bf00      	nop
 800d374:	3708      	adds	r7, #8
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}

0800d37a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d37a:	b580      	push	{r7, lr}
 800d37c:	b084      	sub	sp, #16
 800d37e:	af00      	add	r7, sp, #0
 800d380:	6078      	str	r0, [r7, #4]
 800d382:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d384:	2300      	movs	r3, #0
 800d386:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d38e:	2b01      	cmp	r3, #1
 800d390:	d101      	bne.n	800d396 <HAL_TIM_ConfigClockSource+0x1c>
 800d392:	2302      	movs	r3, #2
 800d394:	e0b6      	b.n	800d504 <HAL_TIM_ConfigClockSource+0x18a>
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	2201      	movs	r2, #1
 800d39a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	2202      	movs	r2, #2
 800d3a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	689b      	ldr	r3, [r3, #8]
 800d3ac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d3b4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d3b8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d3c0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	68ba      	ldr	r2, [r7, #8]
 800d3c8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d3d2:	d03e      	beq.n	800d452 <HAL_TIM_ConfigClockSource+0xd8>
 800d3d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d3d8:	f200 8087 	bhi.w	800d4ea <HAL_TIM_ConfigClockSource+0x170>
 800d3dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d3e0:	f000 8086 	beq.w	800d4f0 <HAL_TIM_ConfigClockSource+0x176>
 800d3e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d3e8:	d87f      	bhi.n	800d4ea <HAL_TIM_ConfigClockSource+0x170>
 800d3ea:	2b70      	cmp	r3, #112	; 0x70
 800d3ec:	d01a      	beq.n	800d424 <HAL_TIM_ConfigClockSource+0xaa>
 800d3ee:	2b70      	cmp	r3, #112	; 0x70
 800d3f0:	d87b      	bhi.n	800d4ea <HAL_TIM_ConfigClockSource+0x170>
 800d3f2:	2b60      	cmp	r3, #96	; 0x60
 800d3f4:	d050      	beq.n	800d498 <HAL_TIM_ConfigClockSource+0x11e>
 800d3f6:	2b60      	cmp	r3, #96	; 0x60
 800d3f8:	d877      	bhi.n	800d4ea <HAL_TIM_ConfigClockSource+0x170>
 800d3fa:	2b50      	cmp	r3, #80	; 0x50
 800d3fc:	d03c      	beq.n	800d478 <HAL_TIM_ConfigClockSource+0xfe>
 800d3fe:	2b50      	cmp	r3, #80	; 0x50
 800d400:	d873      	bhi.n	800d4ea <HAL_TIM_ConfigClockSource+0x170>
 800d402:	2b40      	cmp	r3, #64	; 0x40
 800d404:	d058      	beq.n	800d4b8 <HAL_TIM_ConfigClockSource+0x13e>
 800d406:	2b40      	cmp	r3, #64	; 0x40
 800d408:	d86f      	bhi.n	800d4ea <HAL_TIM_ConfigClockSource+0x170>
 800d40a:	2b30      	cmp	r3, #48	; 0x30
 800d40c:	d064      	beq.n	800d4d8 <HAL_TIM_ConfigClockSource+0x15e>
 800d40e:	2b30      	cmp	r3, #48	; 0x30
 800d410:	d86b      	bhi.n	800d4ea <HAL_TIM_ConfigClockSource+0x170>
 800d412:	2b20      	cmp	r3, #32
 800d414:	d060      	beq.n	800d4d8 <HAL_TIM_ConfigClockSource+0x15e>
 800d416:	2b20      	cmp	r3, #32
 800d418:	d867      	bhi.n	800d4ea <HAL_TIM_ConfigClockSource+0x170>
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d05c      	beq.n	800d4d8 <HAL_TIM_ConfigClockSource+0x15e>
 800d41e:	2b10      	cmp	r3, #16
 800d420:	d05a      	beq.n	800d4d8 <HAL_TIM_ConfigClockSource+0x15e>
 800d422:	e062      	b.n	800d4ea <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	6818      	ldr	r0, [r3, #0]
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	6899      	ldr	r1, [r3, #8]
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	685a      	ldr	r2, [r3, #4]
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	68db      	ldr	r3, [r3, #12]
 800d434:	f000 f9a6 	bl	800d784 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	689b      	ldr	r3, [r3, #8]
 800d43e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d446:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	68ba      	ldr	r2, [r7, #8]
 800d44e:	609a      	str	r2, [r3, #8]
      break;
 800d450:	e04f      	b.n	800d4f2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	6818      	ldr	r0, [r3, #0]
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	6899      	ldr	r1, [r3, #8]
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	685a      	ldr	r2, [r3, #4]
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	68db      	ldr	r3, [r3, #12]
 800d462:	f000 f98f 	bl	800d784 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	689a      	ldr	r2, [r3, #8]
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d474:	609a      	str	r2, [r3, #8]
      break;
 800d476:	e03c      	b.n	800d4f2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	6818      	ldr	r0, [r3, #0]
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	6859      	ldr	r1, [r3, #4]
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	68db      	ldr	r3, [r3, #12]
 800d484:	461a      	mov	r2, r3
 800d486:	f000 f903 	bl	800d690 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	2150      	movs	r1, #80	; 0x50
 800d490:	4618      	mov	r0, r3
 800d492:	f000 f95c 	bl	800d74e <TIM_ITRx_SetConfig>
      break;
 800d496:	e02c      	b.n	800d4f2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	6818      	ldr	r0, [r3, #0]
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	6859      	ldr	r1, [r3, #4]
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	68db      	ldr	r3, [r3, #12]
 800d4a4:	461a      	mov	r2, r3
 800d4a6:	f000 f922 	bl	800d6ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	2160      	movs	r1, #96	; 0x60
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	f000 f94c 	bl	800d74e <TIM_ITRx_SetConfig>
      break;
 800d4b6:	e01c      	b.n	800d4f2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	6818      	ldr	r0, [r3, #0]
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	6859      	ldr	r1, [r3, #4]
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	68db      	ldr	r3, [r3, #12]
 800d4c4:	461a      	mov	r2, r3
 800d4c6:	f000 f8e3 	bl	800d690 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	2140      	movs	r1, #64	; 0x40
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f000 f93c 	bl	800d74e <TIM_ITRx_SetConfig>
      break;
 800d4d6:	e00c      	b.n	800d4f2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681a      	ldr	r2, [r3, #0]
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	4619      	mov	r1, r3
 800d4e2:	4610      	mov	r0, r2
 800d4e4:	f000 f933 	bl	800d74e <TIM_ITRx_SetConfig>
      break;
 800d4e8:	e003      	b.n	800d4f2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800d4ea:	2301      	movs	r3, #1
 800d4ec:	73fb      	strb	r3, [r7, #15]
      break;
 800d4ee:	e000      	b.n	800d4f2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800d4f0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2201      	movs	r2, #1
 800d4f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d502:	7bfb      	ldrb	r3, [r7, #15]
}
 800d504:	4618      	mov	r0, r3
 800d506:	3710      	adds	r7, #16
 800d508:	46bd      	mov	sp, r7
 800d50a:	bd80      	pop	{r7, pc}

0800d50c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d50c:	b480      	push	{r7}
 800d50e:	b083      	sub	sp, #12
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d514:	bf00      	nop
 800d516:	370c      	adds	r7, #12
 800d518:	46bd      	mov	sp, r7
 800d51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51e:	4770      	bx	lr

0800d520 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d520:	b480      	push	{r7}
 800d522:	b083      	sub	sp, #12
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d528:	bf00      	nop
 800d52a:	370c      	adds	r7, #12
 800d52c:	46bd      	mov	sp, r7
 800d52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d532:	4770      	bx	lr

0800d534 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d534:	b480      	push	{r7}
 800d536:	b083      	sub	sp, #12
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d53c:	bf00      	nop
 800d53e:	370c      	adds	r7, #12
 800d540:	46bd      	mov	sp, r7
 800d542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d546:	4770      	bx	lr

0800d548 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d548:	b480      	push	{r7}
 800d54a:	b083      	sub	sp, #12
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d550:	bf00      	nop
 800d552:	370c      	adds	r7, #12
 800d554:	46bd      	mov	sp, r7
 800d556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55a:	4770      	bx	lr

0800d55c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d55c:	b480      	push	{r7}
 800d55e:	b085      	sub	sp, #20
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
 800d564:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	4a40      	ldr	r2, [pc, #256]	; (800d670 <TIM_Base_SetConfig+0x114>)
 800d570:	4293      	cmp	r3, r2
 800d572:	d013      	beq.n	800d59c <TIM_Base_SetConfig+0x40>
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d57a:	d00f      	beq.n	800d59c <TIM_Base_SetConfig+0x40>
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	4a3d      	ldr	r2, [pc, #244]	; (800d674 <TIM_Base_SetConfig+0x118>)
 800d580:	4293      	cmp	r3, r2
 800d582:	d00b      	beq.n	800d59c <TIM_Base_SetConfig+0x40>
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	4a3c      	ldr	r2, [pc, #240]	; (800d678 <TIM_Base_SetConfig+0x11c>)
 800d588:	4293      	cmp	r3, r2
 800d58a:	d007      	beq.n	800d59c <TIM_Base_SetConfig+0x40>
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	4a3b      	ldr	r2, [pc, #236]	; (800d67c <TIM_Base_SetConfig+0x120>)
 800d590:	4293      	cmp	r3, r2
 800d592:	d003      	beq.n	800d59c <TIM_Base_SetConfig+0x40>
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	4a3a      	ldr	r2, [pc, #232]	; (800d680 <TIM_Base_SetConfig+0x124>)
 800d598:	4293      	cmp	r3, r2
 800d59a:	d108      	bne.n	800d5ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d5a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	685b      	ldr	r3, [r3, #4]
 800d5a8:	68fa      	ldr	r2, [r7, #12]
 800d5aa:	4313      	orrs	r3, r2
 800d5ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	4a2f      	ldr	r2, [pc, #188]	; (800d670 <TIM_Base_SetConfig+0x114>)
 800d5b2:	4293      	cmp	r3, r2
 800d5b4:	d01f      	beq.n	800d5f6 <TIM_Base_SetConfig+0x9a>
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d5bc:	d01b      	beq.n	800d5f6 <TIM_Base_SetConfig+0x9a>
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	4a2c      	ldr	r2, [pc, #176]	; (800d674 <TIM_Base_SetConfig+0x118>)
 800d5c2:	4293      	cmp	r3, r2
 800d5c4:	d017      	beq.n	800d5f6 <TIM_Base_SetConfig+0x9a>
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	4a2b      	ldr	r2, [pc, #172]	; (800d678 <TIM_Base_SetConfig+0x11c>)
 800d5ca:	4293      	cmp	r3, r2
 800d5cc:	d013      	beq.n	800d5f6 <TIM_Base_SetConfig+0x9a>
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	4a2a      	ldr	r2, [pc, #168]	; (800d67c <TIM_Base_SetConfig+0x120>)
 800d5d2:	4293      	cmp	r3, r2
 800d5d4:	d00f      	beq.n	800d5f6 <TIM_Base_SetConfig+0x9a>
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	4a29      	ldr	r2, [pc, #164]	; (800d680 <TIM_Base_SetConfig+0x124>)
 800d5da:	4293      	cmp	r3, r2
 800d5dc:	d00b      	beq.n	800d5f6 <TIM_Base_SetConfig+0x9a>
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	4a28      	ldr	r2, [pc, #160]	; (800d684 <TIM_Base_SetConfig+0x128>)
 800d5e2:	4293      	cmp	r3, r2
 800d5e4:	d007      	beq.n	800d5f6 <TIM_Base_SetConfig+0x9a>
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	4a27      	ldr	r2, [pc, #156]	; (800d688 <TIM_Base_SetConfig+0x12c>)
 800d5ea:	4293      	cmp	r3, r2
 800d5ec:	d003      	beq.n	800d5f6 <TIM_Base_SetConfig+0x9a>
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	4a26      	ldr	r2, [pc, #152]	; (800d68c <TIM_Base_SetConfig+0x130>)
 800d5f2:	4293      	cmp	r3, r2
 800d5f4:	d108      	bne.n	800d608 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d5fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	68db      	ldr	r3, [r3, #12]
 800d602:	68fa      	ldr	r2, [r7, #12]
 800d604:	4313      	orrs	r3, r2
 800d606:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	695b      	ldr	r3, [r3, #20]
 800d612:	4313      	orrs	r3, r2
 800d614:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	68fa      	ldr	r2, [r7, #12]
 800d61a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	689a      	ldr	r2, [r3, #8]
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	681a      	ldr	r2, [r3, #0]
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	4a10      	ldr	r2, [pc, #64]	; (800d670 <TIM_Base_SetConfig+0x114>)
 800d630:	4293      	cmp	r3, r2
 800d632:	d00f      	beq.n	800d654 <TIM_Base_SetConfig+0xf8>
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	4a12      	ldr	r2, [pc, #72]	; (800d680 <TIM_Base_SetConfig+0x124>)
 800d638:	4293      	cmp	r3, r2
 800d63a:	d00b      	beq.n	800d654 <TIM_Base_SetConfig+0xf8>
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	4a11      	ldr	r2, [pc, #68]	; (800d684 <TIM_Base_SetConfig+0x128>)
 800d640:	4293      	cmp	r3, r2
 800d642:	d007      	beq.n	800d654 <TIM_Base_SetConfig+0xf8>
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	4a10      	ldr	r2, [pc, #64]	; (800d688 <TIM_Base_SetConfig+0x12c>)
 800d648:	4293      	cmp	r3, r2
 800d64a:	d003      	beq.n	800d654 <TIM_Base_SetConfig+0xf8>
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	4a0f      	ldr	r2, [pc, #60]	; (800d68c <TIM_Base_SetConfig+0x130>)
 800d650:	4293      	cmp	r3, r2
 800d652:	d103      	bne.n	800d65c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	691a      	ldr	r2, [r3, #16]
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2201      	movs	r2, #1
 800d660:	615a      	str	r2, [r3, #20]
}
 800d662:	bf00      	nop
 800d664:	3714      	adds	r7, #20
 800d666:	46bd      	mov	sp, r7
 800d668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66c:	4770      	bx	lr
 800d66e:	bf00      	nop
 800d670:	40012c00 	.word	0x40012c00
 800d674:	40000400 	.word	0x40000400
 800d678:	40000800 	.word	0x40000800
 800d67c:	40000c00 	.word	0x40000c00
 800d680:	40013400 	.word	0x40013400
 800d684:	40014000 	.word	0x40014000
 800d688:	40014400 	.word	0x40014400
 800d68c:	40014800 	.word	0x40014800

0800d690 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d690:	b480      	push	{r7}
 800d692:	b087      	sub	sp, #28
 800d694:	af00      	add	r7, sp, #0
 800d696:	60f8      	str	r0, [r7, #12]
 800d698:	60b9      	str	r1, [r7, #8]
 800d69a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	6a1b      	ldr	r3, [r3, #32]
 800d6a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	6a1b      	ldr	r3, [r3, #32]
 800d6a6:	f023 0201 	bic.w	r2, r3, #1
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	699b      	ldr	r3, [r3, #24]
 800d6b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d6b4:	693b      	ldr	r3, [r7, #16]
 800d6b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d6ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	011b      	lsls	r3, r3, #4
 800d6c0:	693a      	ldr	r2, [r7, #16]
 800d6c2:	4313      	orrs	r3, r2
 800d6c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d6c6:	697b      	ldr	r3, [r7, #20]
 800d6c8:	f023 030a 	bic.w	r3, r3, #10
 800d6cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d6ce:	697a      	ldr	r2, [r7, #20]
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	4313      	orrs	r3, r2
 800d6d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	693a      	ldr	r2, [r7, #16]
 800d6da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	697a      	ldr	r2, [r7, #20]
 800d6e0:	621a      	str	r2, [r3, #32]
}
 800d6e2:	bf00      	nop
 800d6e4:	371c      	adds	r7, #28
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ec:	4770      	bx	lr

0800d6ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d6ee:	b480      	push	{r7}
 800d6f0:	b087      	sub	sp, #28
 800d6f2:	af00      	add	r7, sp, #0
 800d6f4:	60f8      	str	r0, [r7, #12]
 800d6f6:	60b9      	str	r1, [r7, #8]
 800d6f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	6a1b      	ldr	r3, [r3, #32]
 800d6fe:	f023 0210 	bic.w	r2, r3, #16
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	699b      	ldr	r3, [r3, #24]
 800d70a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	6a1b      	ldr	r3, [r3, #32]
 800d710:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d712:	697b      	ldr	r3, [r7, #20]
 800d714:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d718:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	031b      	lsls	r3, r3, #12
 800d71e:	697a      	ldr	r2, [r7, #20]
 800d720:	4313      	orrs	r3, r2
 800d722:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d724:	693b      	ldr	r3, [r7, #16]
 800d726:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d72a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	011b      	lsls	r3, r3, #4
 800d730:	693a      	ldr	r2, [r7, #16]
 800d732:	4313      	orrs	r3, r2
 800d734:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	697a      	ldr	r2, [r7, #20]
 800d73a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	693a      	ldr	r2, [r7, #16]
 800d740:	621a      	str	r2, [r3, #32]
}
 800d742:	bf00      	nop
 800d744:	371c      	adds	r7, #28
 800d746:	46bd      	mov	sp, r7
 800d748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74c:	4770      	bx	lr

0800d74e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d74e:	b480      	push	{r7}
 800d750:	b085      	sub	sp, #20
 800d752:	af00      	add	r7, sp, #0
 800d754:	6078      	str	r0, [r7, #4]
 800d756:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	689b      	ldr	r3, [r3, #8]
 800d75c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d764:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d766:	683a      	ldr	r2, [r7, #0]
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	4313      	orrs	r3, r2
 800d76c:	f043 0307 	orr.w	r3, r3, #7
 800d770:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	68fa      	ldr	r2, [r7, #12]
 800d776:	609a      	str	r2, [r3, #8]
}
 800d778:	bf00      	nop
 800d77a:	3714      	adds	r7, #20
 800d77c:	46bd      	mov	sp, r7
 800d77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d782:	4770      	bx	lr

0800d784 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d784:	b480      	push	{r7}
 800d786:	b087      	sub	sp, #28
 800d788:	af00      	add	r7, sp, #0
 800d78a:	60f8      	str	r0, [r7, #12]
 800d78c:	60b9      	str	r1, [r7, #8]
 800d78e:	607a      	str	r2, [r7, #4]
 800d790:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	689b      	ldr	r3, [r3, #8]
 800d796:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d798:	697b      	ldr	r3, [r7, #20]
 800d79a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d79e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	021a      	lsls	r2, r3, #8
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	431a      	orrs	r2, r3
 800d7a8:	68bb      	ldr	r3, [r7, #8]
 800d7aa:	4313      	orrs	r3, r2
 800d7ac:	697a      	ldr	r2, [r7, #20]
 800d7ae:	4313      	orrs	r3, r2
 800d7b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	697a      	ldr	r2, [r7, #20]
 800d7b6:	609a      	str	r2, [r3, #8]
}
 800d7b8:	bf00      	nop
 800d7ba:	371c      	adds	r7, #28
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c2:	4770      	bx	lr

0800d7c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d7c4:	b480      	push	{r7}
 800d7c6:	b085      	sub	sp, #20
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
 800d7cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d7d4:	2b01      	cmp	r3, #1
 800d7d6:	d101      	bne.n	800d7dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d7d8:	2302      	movs	r3, #2
 800d7da:	e068      	b.n	800d8ae <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2201      	movs	r2, #1
 800d7e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2202      	movs	r2, #2
 800d7e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	685b      	ldr	r3, [r3, #4]
 800d7f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	689b      	ldr	r3, [r3, #8]
 800d7fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	4a2e      	ldr	r2, [pc, #184]	; (800d8bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800d802:	4293      	cmp	r3, r2
 800d804:	d004      	beq.n	800d810 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	4a2d      	ldr	r2, [pc, #180]	; (800d8c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800d80c:	4293      	cmp	r3, r2
 800d80e:	d108      	bne.n	800d822 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d816:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d818:	683b      	ldr	r3, [r7, #0]
 800d81a:	685b      	ldr	r3, [r3, #4]
 800d81c:	68fa      	ldr	r2, [r7, #12]
 800d81e:	4313      	orrs	r3, r2
 800d820:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d828:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	68fa      	ldr	r2, [r7, #12]
 800d830:	4313      	orrs	r3, r2
 800d832:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	68fa      	ldr	r2, [r7, #12]
 800d83a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	4a1e      	ldr	r2, [pc, #120]	; (800d8bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800d842:	4293      	cmp	r3, r2
 800d844:	d01d      	beq.n	800d882 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d84e:	d018      	beq.n	800d882 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	4a1b      	ldr	r2, [pc, #108]	; (800d8c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d856:	4293      	cmp	r3, r2
 800d858:	d013      	beq.n	800d882 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	4a1a      	ldr	r2, [pc, #104]	; (800d8c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d860:	4293      	cmp	r3, r2
 800d862:	d00e      	beq.n	800d882 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	4a18      	ldr	r2, [pc, #96]	; (800d8cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d86a:	4293      	cmp	r3, r2
 800d86c:	d009      	beq.n	800d882 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	4a13      	ldr	r2, [pc, #76]	; (800d8c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800d874:	4293      	cmp	r3, r2
 800d876:	d004      	beq.n	800d882 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	4a14      	ldr	r2, [pc, #80]	; (800d8d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d87e:	4293      	cmp	r3, r2
 800d880:	d10c      	bne.n	800d89c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d882:	68bb      	ldr	r3, [r7, #8]
 800d884:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d888:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	689b      	ldr	r3, [r3, #8]
 800d88e:	68ba      	ldr	r2, [r7, #8]
 800d890:	4313      	orrs	r3, r2
 800d892:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	68ba      	ldr	r2, [r7, #8]
 800d89a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2201      	movs	r2, #1
 800d8a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d8ac:	2300      	movs	r3, #0
}
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	3714      	adds	r7, #20
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b8:	4770      	bx	lr
 800d8ba:	bf00      	nop
 800d8bc:	40012c00 	.word	0x40012c00
 800d8c0:	40013400 	.word	0x40013400
 800d8c4:	40000400 	.word	0x40000400
 800d8c8:	40000800 	.word	0x40000800
 800d8cc:	40000c00 	.word	0x40000c00
 800d8d0:	40014000 	.word	0x40014000

0800d8d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d8d4:	b480      	push	{r7}
 800d8d6:	b083      	sub	sp, #12
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d8dc:	bf00      	nop
 800d8de:	370c      	adds	r7, #12
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e6:	4770      	bx	lr

0800d8e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d8e8:	b480      	push	{r7}
 800d8ea:	b083      	sub	sp, #12
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d8f0:	bf00      	nop
 800d8f2:	370c      	adds	r7, #12
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fa:	4770      	bx	lr

0800d8fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	b083      	sub	sp, #12
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d904:	bf00      	nop
 800d906:	370c      	adds	r7, #12
 800d908:	46bd      	mov	sp, r7
 800d90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90e:	4770      	bx	lr

0800d910 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b082      	sub	sp, #8
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d101      	bne.n	800d922 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d91e:	2301      	movs	r3, #1
 800d920:	e040      	b.n	800d9a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d926:	2b00      	cmp	r3, #0
 800d928:	d106      	bne.n	800d938 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	2200      	movs	r2, #0
 800d92e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d932:	6878      	ldr	r0, [r7, #4]
 800d934:	f7f8 fd20 	bl	8006378 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2224      	movs	r2, #36	; 0x24
 800d93c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	681a      	ldr	r2, [r3, #0]
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	f022 0201 	bic.w	r2, r2, #1
 800d94c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d94e:	6878      	ldr	r0, [r7, #4]
 800d950:	f000 fc0a 	bl	800e168 <UART_SetConfig>
 800d954:	4603      	mov	r3, r0
 800d956:	2b01      	cmp	r3, #1
 800d958:	d101      	bne.n	800d95e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800d95a:	2301      	movs	r3, #1
 800d95c:	e022      	b.n	800d9a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d962:	2b00      	cmp	r3, #0
 800d964:	d002      	beq.n	800d96c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800d966:	6878      	ldr	r0, [r7, #4]
 800d968:	f000 feb6 	bl	800e6d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	685a      	ldr	r2, [r3, #4]
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d97a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	689a      	ldr	r2, [r3, #8]
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d98a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	681a      	ldr	r2, [r3, #0]
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	f042 0201 	orr.w	r2, r2, #1
 800d99a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	f000 ff3d 	bl	800e81c <UART_CheckIdleState>
 800d9a2:	4603      	mov	r3, r0
}
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	3708      	adds	r7, #8
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	bd80      	pop	{r7, pc}

0800d9ac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b08a      	sub	sp, #40	; 0x28
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	60f8      	str	r0, [r7, #12]
 800d9b4:	60b9      	str	r1, [r7, #8]
 800d9b6:	4613      	mov	r3, r2
 800d9b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9be:	2b20      	cmp	r3, #32
 800d9c0:	d142      	bne.n	800da48 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800d9c2:	68bb      	ldr	r3, [r7, #8]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d002      	beq.n	800d9ce <HAL_UART_Receive_IT+0x22>
 800d9c8:	88fb      	ldrh	r3, [r7, #6]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d101      	bne.n	800d9d2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	e03b      	b.n	800da4a <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800d9d8:	2b01      	cmp	r3, #1
 800d9da:	d101      	bne.n	800d9e0 <HAL_UART_Receive_IT+0x34>
 800d9dc:	2302      	movs	r3, #2
 800d9de:	e034      	b.n	800da4a <HAL_UART_Receive_IT+0x9e>
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	2201      	movs	r2, #1
 800d9e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	4a18      	ldr	r2, [pc, #96]	; (800da54 <HAL_UART_Receive_IT+0xa8>)
 800d9f4:	4293      	cmp	r3, r2
 800d9f6:	d01f      	beq.n	800da38 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	685b      	ldr	r3, [r3, #4]
 800d9fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800da02:	2b00      	cmp	r3, #0
 800da04:	d018      	beq.n	800da38 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	e853 3f00 	ldrex	r3, [r3]
 800da12:	613b      	str	r3, [r7, #16]
   return(result);
 800da14:	693b      	ldr	r3, [r7, #16]
 800da16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800da1a:	627b      	str	r3, [r7, #36]	; 0x24
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	461a      	mov	r2, r3
 800da22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da24:	623b      	str	r3, [r7, #32]
 800da26:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da28:	69f9      	ldr	r1, [r7, #28]
 800da2a:	6a3a      	ldr	r2, [r7, #32]
 800da2c:	e841 2300 	strex	r3, r2, [r1]
 800da30:	61bb      	str	r3, [r7, #24]
   return(result);
 800da32:	69bb      	ldr	r3, [r7, #24]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d1e6      	bne.n	800da06 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800da38:	88fb      	ldrh	r3, [r7, #6]
 800da3a:	461a      	mov	r2, r3
 800da3c:	68b9      	ldr	r1, [r7, #8]
 800da3e:	68f8      	ldr	r0, [r7, #12]
 800da40:	f000 fffa 	bl	800ea38 <UART_Start_Receive_IT>
 800da44:	4603      	mov	r3, r0
 800da46:	e000      	b.n	800da4a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800da48:	2302      	movs	r3, #2
  }
}
 800da4a:	4618      	mov	r0, r3
 800da4c:	3728      	adds	r7, #40	; 0x28
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd80      	pop	{r7, pc}
 800da52:	bf00      	nop
 800da54:	40008000 	.word	0x40008000

0800da58 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b08a      	sub	sp, #40	; 0x28
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	60f8      	str	r0, [r7, #12]
 800da60:	60b9      	str	r1, [r7, #8]
 800da62:	4613      	mov	r3, r2
 800da64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800da6a:	2b20      	cmp	r3, #32
 800da6c:	d178      	bne.n	800db60 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800da6e:	68bb      	ldr	r3, [r7, #8]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d002      	beq.n	800da7a <HAL_UART_Transmit_DMA+0x22>
 800da74:	88fb      	ldrh	r3, [r7, #6]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d101      	bne.n	800da7e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800da7a:	2301      	movs	r3, #1
 800da7c:	e071      	b.n	800db62 <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800da84:	2b01      	cmp	r3, #1
 800da86:	d101      	bne.n	800da8c <HAL_UART_Transmit_DMA+0x34>
 800da88:	2302      	movs	r3, #2
 800da8a:	e06a      	b.n	800db62 <HAL_UART_Transmit_DMA+0x10a>
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	2201      	movs	r2, #1
 800da90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	68ba      	ldr	r2, [r7, #8]
 800da98:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	88fa      	ldrh	r2, [r7, #6]
 800da9e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	88fa      	ldrh	r2, [r7, #6]
 800daa6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	2200      	movs	r2, #0
 800daae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	2221      	movs	r2, #33	; 0x21
 800dab6:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d02b      	beq.n	800db18 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dac4:	4a29      	ldr	r2, [pc, #164]	; (800db6c <HAL_UART_Transmit_DMA+0x114>)
 800dac6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dacc:	4a28      	ldr	r2, [pc, #160]	; (800db70 <HAL_UART_Transmit_DMA+0x118>)
 800dace:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dad4:	4a27      	ldr	r2, [pc, #156]	; (800db74 <HAL_UART_Transmit_DMA+0x11c>)
 800dad6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dadc:	2200      	movs	r2, #0
 800dade:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dae8:	4619      	mov	r1, r3
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	3328      	adds	r3, #40	; 0x28
 800daf0:	461a      	mov	r2, r3
 800daf2:	88fb      	ldrh	r3, [r7, #6]
 800daf4:	f7f9 fef6 	bl	80078e4 <HAL_DMA_Start_IT>
 800daf8:	4603      	mov	r3, r0
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d00c      	beq.n	800db18 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	2210      	movs	r2, #16
 800db02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	2200      	movs	r2, #0
 800db0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	2220      	movs	r2, #32
 800db12:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 800db14:	2301      	movs	r3, #1
 800db16:	e024      	b.n	800db62 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	2240      	movs	r2, #64	; 0x40
 800db1e:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	2200      	movs	r2, #0
 800db24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	3308      	adds	r3, #8
 800db2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db30:	697b      	ldr	r3, [r7, #20]
 800db32:	e853 3f00 	ldrex	r3, [r3]
 800db36:	613b      	str	r3, [r7, #16]
   return(result);
 800db38:	693b      	ldr	r3, [r7, #16]
 800db3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db3e:	627b      	str	r3, [r7, #36]	; 0x24
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	3308      	adds	r3, #8
 800db46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db48:	623a      	str	r2, [r7, #32]
 800db4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db4c:	69f9      	ldr	r1, [r7, #28]
 800db4e:	6a3a      	ldr	r2, [r7, #32]
 800db50:	e841 2300 	strex	r3, r2, [r1]
 800db54:	61bb      	str	r3, [r7, #24]
   return(result);
 800db56:	69bb      	ldr	r3, [r7, #24]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d1e5      	bne.n	800db28 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 800db5c:	2300      	movs	r3, #0
 800db5e:	e000      	b.n	800db62 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800db60:	2302      	movs	r3, #2
  }
}
 800db62:	4618      	mov	r0, r3
 800db64:	3728      	adds	r7, #40	; 0x28
 800db66:	46bd      	mov	sp, r7
 800db68:	bd80      	pop	{r7, pc}
 800db6a:	bf00      	nop
 800db6c:	0800ecdf 	.word	0x0800ecdf
 800db70:	0800ed79 	.word	0x0800ed79
 800db74:	0800ed95 	.word	0x0800ed95

0800db78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b0ba      	sub	sp, #232	; 0xe8
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	69db      	ldr	r3, [r3, #28]
 800db86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	689b      	ldr	r3, [r3, #8]
 800db9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800db9e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800dba2:	f640 030f 	movw	r3, #2063	; 0x80f
 800dba6:	4013      	ands	r3, r2
 800dba8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800dbac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d115      	bne.n	800dbe0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800dbb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dbb8:	f003 0320 	and.w	r3, r3, #32
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d00f      	beq.n	800dbe0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800dbc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dbc4:	f003 0320 	and.w	r3, r3, #32
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d009      	beq.n	800dbe0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	f000 82a6 	beq.w	800e122 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dbda:	6878      	ldr	r0, [r7, #4]
 800dbdc:	4798      	blx	r3
      }
      return;
 800dbde:	e2a0      	b.n	800e122 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800dbe0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	f000 8117 	beq.w	800de18 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800dbea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dbee:	f003 0301 	and.w	r3, r3, #1
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d106      	bne.n	800dc04 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800dbf6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800dbfa:	4b85      	ldr	r3, [pc, #532]	; (800de10 <HAL_UART_IRQHandler+0x298>)
 800dbfc:	4013      	ands	r3, r2
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	f000 810a 	beq.w	800de18 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dc04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc08:	f003 0301 	and.w	r3, r3, #1
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d011      	beq.n	800dc34 <HAL_UART_IRQHandler+0xbc>
 800dc10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dc14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d00b      	beq.n	800dc34 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	2201      	movs	r2, #1
 800dc22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc2a:	f043 0201 	orr.w	r2, r3, #1
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dc34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc38:	f003 0302 	and.w	r3, r3, #2
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d011      	beq.n	800dc64 <HAL_UART_IRQHandler+0xec>
 800dc40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dc44:	f003 0301 	and.w	r3, r3, #1
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d00b      	beq.n	800dc64 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	2202      	movs	r2, #2
 800dc52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc5a:	f043 0204 	orr.w	r2, r3, #4
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dc64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc68:	f003 0304 	and.w	r3, r3, #4
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d011      	beq.n	800dc94 <HAL_UART_IRQHandler+0x11c>
 800dc70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dc74:	f003 0301 	and.w	r3, r3, #1
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d00b      	beq.n	800dc94 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	2204      	movs	r2, #4
 800dc82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc8a:	f043 0202 	orr.w	r2, r3, #2
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800dc94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc98:	f003 0308 	and.w	r3, r3, #8
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d017      	beq.n	800dcd0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800dca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dca4:	f003 0320 	and.w	r3, r3, #32
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d105      	bne.n	800dcb8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800dcac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dcb0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d00b      	beq.n	800dcd0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	2208      	movs	r2, #8
 800dcbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dcc6:	f043 0208 	orr.w	r2, r3, #8
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800dcd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dcd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d012      	beq.n	800dd02 <HAL_UART_IRQHandler+0x18a>
 800dcdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dce0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d00c      	beq.n	800dd02 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dcf0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dcf8:	f043 0220 	orr.w	r2, r3, #32
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	f000 820c 	beq.w	800e126 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800dd0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd12:	f003 0320 	and.w	r3, r3, #32
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d00d      	beq.n	800dd36 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800dd1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dd1e:	f003 0320 	and.w	r3, r3, #32
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d007      	beq.n	800dd36 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d003      	beq.n	800dd36 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	689b      	ldr	r3, [r3, #8]
 800dd46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd4a:	2b40      	cmp	r3, #64	; 0x40
 800dd4c:	d005      	beq.n	800dd5a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800dd4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dd52:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d04f      	beq.n	800ddfa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800dd5a:	6878      	ldr	r0, [r7, #4]
 800dd5c:	f000 ff5c 	bl	800ec18 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	689b      	ldr	r3, [r3, #8]
 800dd66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd6a:	2b40      	cmp	r3, #64	; 0x40
 800dd6c:	d141      	bne.n	800ddf2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	3308      	adds	r3, #8
 800dd74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dd7c:	e853 3f00 	ldrex	r3, [r3]
 800dd80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800dd84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dd88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dd8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	3308      	adds	r3, #8
 800dd96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800dd9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800dd9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dda2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800dda6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ddaa:	e841 2300 	strex	r3, r2, [r1]
 800ddae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ddb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d1d9      	bne.n	800dd6e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d013      	beq.n	800ddea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddc6:	4a13      	ldr	r2, [pc, #76]	; (800de14 <HAL_UART_IRQHandler+0x29c>)
 800ddc8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddce:	4618      	mov	r0, r3
 800ddd0:	f7f9 fe26 	bl	8007a20 <HAL_DMA_Abort_IT>
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d017      	beq.n	800de0a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dde0:	687a      	ldr	r2, [r7, #4]
 800dde2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800dde4:	4610      	mov	r0, r2
 800dde6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dde8:	e00f      	b.n	800de0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ddea:	6878      	ldr	r0, [r7, #4]
 800ddec:	f7f5 f9d4 	bl	8003198 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ddf0:	e00b      	b.n	800de0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ddf2:	6878      	ldr	r0, [r7, #4]
 800ddf4:	f7f5 f9d0 	bl	8003198 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ddf8:	e007      	b.n	800de0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ddfa:	6878      	ldr	r0, [r7, #4]
 800ddfc:	f7f5 f9cc 	bl	8003198 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	2200      	movs	r2, #0
 800de04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800de08:	e18d      	b.n	800e126 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de0a:	bf00      	nop
    return;
 800de0c:	e18b      	b.n	800e126 <HAL_UART_IRQHandler+0x5ae>
 800de0e:	bf00      	nop
 800de10:	04000120 	.word	0x04000120
 800de14:	0800ee11 	.word	0x0800ee11

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de1c:	2b01      	cmp	r3, #1
 800de1e:	f040 8146 	bne.w	800e0ae <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800de22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de26:	f003 0310 	and.w	r3, r3, #16
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	f000 813f 	beq.w	800e0ae <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800de30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de34:	f003 0310 	and.w	r3, r3, #16
 800de38:	2b00      	cmp	r3, #0
 800de3a:	f000 8138 	beq.w	800e0ae <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	2210      	movs	r2, #16
 800de44:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	689b      	ldr	r3, [r3, #8]
 800de4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de50:	2b40      	cmp	r3, #64	; 0x40
 800de52:	f040 80b4 	bne.w	800dfbe <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	685b      	ldr	r3, [r3, #4]
 800de5e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800de62:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800de66:	2b00      	cmp	r3, #0
 800de68:	f000 815f 	beq.w	800e12a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800de72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800de76:	429a      	cmp	r2, r3
 800de78:	f080 8157 	bcs.w	800e12a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800de82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	f003 0320 	and.w	r3, r3, #32
 800de92:	2b00      	cmp	r3, #0
 800de94:	f040 8085 	bne.w	800dfa2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dea0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dea4:	e853 3f00 	ldrex	r3, [r3]
 800dea8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800deac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800deb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800deb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	461a      	mov	r2, r3
 800debe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dec2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800dec6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800dece:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ded2:	e841 2300 	strex	r3, r2, [r1]
 800ded6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800deda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d1da      	bne.n	800de98 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	3308      	adds	r3, #8
 800dee8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800deea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800deec:	e853 3f00 	ldrex	r3, [r3]
 800def0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800def2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800def4:	f023 0301 	bic.w	r3, r3, #1
 800def8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	3308      	adds	r3, #8
 800df02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800df06:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800df0a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df0c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800df0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800df12:	e841 2300 	strex	r3, r2, [r1]
 800df16:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800df18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d1e1      	bne.n	800dee2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	3308      	adds	r3, #8
 800df24:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800df28:	e853 3f00 	ldrex	r3, [r3]
 800df2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800df2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800df34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	3308      	adds	r3, #8
 800df3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800df42:	66fa      	str	r2, [r7, #108]	; 0x6c
 800df44:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df46:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800df48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800df4a:	e841 2300 	strex	r3, r2, [r1]
 800df4e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800df50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800df52:	2b00      	cmp	r3, #0
 800df54:	d1e3      	bne.n	800df1e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	2220      	movs	r2, #32
 800df5a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	2200      	movs	r2, #0
 800df60:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df6a:	e853 3f00 	ldrex	r3, [r3]
 800df6e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800df70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df72:	f023 0310 	bic.w	r3, r3, #16
 800df76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	461a      	mov	r2, r3
 800df80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800df84:	65bb      	str	r3, [r7, #88]	; 0x58
 800df86:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800df8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800df8c:	e841 2300 	strex	r3, r2, [r1]
 800df90:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800df92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df94:	2b00      	cmp	r3, #0
 800df96:	d1e4      	bne.n	800df62 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df9c:	4618      	mov	r0, r3
 800df9e:	f7f9 fd01 	bl	80079a4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800dfae:	b29b      	uxth	r3, r3
 800dfb0:	1ad3      	subs	r3, r2, r3
 800dfb2:	b29b      	uxth	r3, r3
 800dfb4:	4619      	mov	r1, r3
 800dfb6:	6878      	ldr	r0, [r7, #4]
 800dfb8:	f000 f8ca 	bl	800e150 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dfbc:	e0b5      	b.n	800e12a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800dfca:	b29b      	uxth	r3, r3
 800dfcc:	1ad3      	subs	r3, r2, r3
 800dfce:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800dfd8:	b29b      	uxth	r3, r3
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	f000 80a7 	beq.w	800e12e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800dfe0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	f000 80a2 	beq.w	800e12e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dff2:	e853 3f00 	ldrex	r3, [r3]
 800dff6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dffa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dffe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	461a      	mov	r2, r3
 800e008:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e00c:	647b      	str	r3, [r7, #68]	; 0x44
 800e00e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e010:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e012:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e014:	e841 2300 	strex	r3, r2, [r1]
 800e018:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e01a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d1e4      	bne.n	800dfea <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	3308      	adds	r3, #8
 800e026:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e02a:	e853 3f00 	ldrex	r3, [r3]
 800e02e:	623b      	str	r3, [r7, #32]
   return(result);
 800e030:	6a3b      	ldr	r3, [r7, #32]
 800e032:	f023 0301 	bic.w	r3, r3, #1
 800e036:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	3308      	adds	r3, #8
 800e040:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e044:	633a      	str	r2, [r7, #48]	; 0x30
 800e046:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e048:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e04a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e04c:	e841 2300 	strex	r3, r2, [r1]
 800e050:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e054:	2b00      	cmp	r3, #0
 800e056:	d1e3      	bne.n	800e020 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2220      	movs	r2, #32
 800e05c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	2200      	movs	r2, #0
 800e062:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	2200      	movs	r2, #0
 800e068:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e070:	693b      	ldr	r3, [r7, #16]
 800e072:	e853 3f00 	ldrex	r3, [r3]
 800e076:	60fb      	str	r3, [r7, #12]
   return(result);
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	f023 0310 	bic.w	r3, r3, #16
 800e07e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	461a      	mov	r2, r3
 800e088:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e08c:	61fb      	str	r3, [r7, #28]
 800e08e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e090:	69b9      	ldr	r1, [r7, #24]
 800e092:	69fa      	ldr	r2, [r7, #28]
 800e094:	e841 2300 	strex	r3, r2, [r1]
 800e098:	617b      	str	r3, [r7, #20]
   return(result);
 800e09a:	697b      	ldr	r3, [r7, #20]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d1e4      	bne.n	800e06a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e0a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e0a4:	4619      	mov	r1, r3
 800e0a6:	6878      	ldr	r0, [r7, #4]
 800e0a8:	f000 f852 	bl	800e150 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e0ac:	e03f      	b.n	800e12e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e0ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e0b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d00e      	beq.n	800e0d8 <HAL_UART_IRQHandler+0x560>
 800e0ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e0be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d008      	beq.n	800e0d8 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e0ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e0d0:	6878      	ldr	r0, [r7, #4]
 800e0d2:	f001 f83d 	bl	800f150 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e0d6:	e02d      	b.n	800e134 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800e0d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e0dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d00e      	beq.n	800e102 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800e0e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e0e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d008      	beq.n	800e102 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d01c      	beq.n	800e132 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0fc:	6878      	ldr	r0, [r7, #4]
 800e0fe:	4798      	blx	r3
    }
    return;
 800e100:	e017      	b.n	800e132 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d012      	beq.n	800e134 <HAL_UART_IRQHandler+0x5bc>
 800e10e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e116:	2b00      	cmp	r3, #0
 800e118:	d00c      	beq.n	800e134 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800e11a:	6878      	ldr	r0, [r7, #4]
 800e11c:	f000 fe8e 	bl	800ee3c <UART_EndTransmit_IT>
    return;
 800e120:	e008      	b.n	800e134 <HAL_UART_IRQHandler+0x5bc>
      return;
 800e122:	bf00      	nop
 800e124:	e006      	b.n	800e134 <HAL_UART_IRQHandler+0x5bc>
    return;
 800e126:	bf00      	nop
 800e128:	e004      	b.n	800e134 <HAL_UART_IRQHandler+0x5bc>
      return;
 800e12a:	bf00      	nop
 800e12c:	e002      	b.n	800e134 <HAL_UART_IRQHandler+0x5bc>
      return;
 800e12e:	bf00      	nop
 800e130:	e000      	b.n	800e134 <HAL_UART_IRQHandler+0x5bc>
    return;
 800e132:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800e134:	37e8      	adds	r7, #232	; 0xe8
 800e136:	46bd      	mov	sp, r7
 800e138:	bd80      	pop	{r7, pc}
 800e13a:	bf00      	nop

0800e13c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e13c:	b480      	push	{r7}
 800e13e:	b083      	sub	sp, #12
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800e144:	bf00      	nop
 800e146:	370c      	adds	r7, #12
 800e148:	46bd      	mov	sp, r7
 800e14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14e:	4770      	bx	lr

0800e150 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e150:	b480      	push	{r7}
 800e152:	b083      	sub	sp, #12
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
 800e158:	460b      	mov	r3, r1
 800e15a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e15c:	bf00      	nop
 800e15e:	370c      	adds	r7, #12
 800e160:	46bd      	mov	sp, r7
 800e162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e166:	4770      	bx	lr

0800e168 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e16c:	b08a      	sub	sp, #40	; 0x28
 800e16e:	af00      	add	r7, sp, #0
 800e170:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e172:	2300      	movs	r3, #0
 800e174:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	689a      	ldr	r2, [r3, #8]
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	691b      	ldr	r3, [r3, #16]
 800e180:	431a      	orrs	r2, r3
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	695b      	ldr	r3, [r3, #20]
 800e186:	431a      	orrs	r2, r3
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	69db      	ldr	r3, [r3, #28]
 800e18c:	4313      	orrs	r3, r2
 800e18e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	681a      	ldr	r2, [r3, #0]
 800e196:	4ba4      	ldr	r3, [pc, #656]	; (800e428 <UART_SetConfig+0x2c0>)
 800e198:	4013      	ands	r3, r2
 800e19a:	68fa      	ldr	r2, [r7, #12]
 800e19c:	6812      	ldr	r2, [r2, #0]
 800e19e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e1a0:	430b      	orrs	r3, r1
 800e1a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	685b      	ldr	r3, [r3, #4]
 800e1aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	68da      	ldr	r2, [r3, #12]
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	430a      	orrs	r2, r1
 800e1b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	699b      	ldr	r3, [r3, #24]
 800e1be:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	4a99      	ldr	r2, [pc, #612]	; (800e42c <UART_SetConfig+0x2c4>)
 800e1c6:	4293      	cmp	r3, r2
 800e1c8:	d004      	beq.n	800e1d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	6a1b      	ldr	r3, [r3, #32]
 800e1ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1d0:	4313      	orrs	r3, r2
 800e1d2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	689b      	ldr	r3, [r3, #8]
 800e1da:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1e4:	430a      	orrs	r2, r1
 800e1e6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	4a90      	ldr	r2, [pc, #576]	; (800e430 <UART_SetConfig+0x2c8>)
 800e1ee:	4293      	cmp	r3, r2
 800e1f0:	d126      	bne.n	800e240 <UART_SetConfig+0xd8>
 800e1f2:	4b90      	ldr	r3, [pc, #576]	; (800e434 <UART_SetConfig+0x2cc>)
 800e1f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e1f8:	f003 0303 	and.w	r3, r3, #3
 800e1fc:	2b03      	cmp	r3, #3
 800e1fe:	d81b      	bhi.n	800e238 <UART_SetConfig+0xd0>
 800e200:	a201      	add	r2, pc, #4	; (adr r2, 800e208 <UART_SetConfig+0xa0>)
 800e202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e206:	bf00      	nop
 800e208:	0800e219 	.word	0x0800e219
 800e20c:	0800e229 	.word	0x0800e229
 800e210:	0800e221 	.word	0x0800e221
 800e214:	0800e231 	.word	0x0800e231
 800e218:	2301      	movs	r3, #1
 800e21a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e21e:	e116      	b.n	800e44e <UART_SetConfig+0x2e6>
 800e220:	2302      	movs	r3, #2
 800e222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e226:	e112      	b.n	800e44e <UART_SetConfig+0x2e6>
 800e228:	2304      	movs	r3, #4
 800e22a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e22e:	e10e      	b.n	800e44e <UART_SetConfig+0x2e6>
 800e230:	2308      	movs	r3, #8
 800e232:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e236:	e10a      	b.n	800e44e <UART_SetConfig+0x2e6>
 800e238:	2310      	movs	r3, #16
 800e23a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e23e:	e106      	b.n	800e44e <UART_SetConfig+0x2e6>
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	4a7c      	ldr	r2, [pc, #496]	; (800e438 <UART_SetConfig+0x2d0>)
 800e246:	4293      	cmp	r3, r2
 800e248:	d138      	bne.n	800e2bc <UART_SetConfig+0x154>
 800e24a:	4b7a      	ldr	r3, [pc, #488]	; (800e434 <UART_SetConfig+0x2cc>)
 800e24c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e250:	f003 030c 	and.w	r3, r3, #12
 800e254:	2b0c      	cmp	r3, #12
 800e256:	d82d      	bhi.n	800e2b4 <UART_SetConfig+0x14c>
 800e258:	a201      	add	r2, pc, #4	; (adr r2, 800e260 <UART_SetConfig+0xf8>)
 800e25a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e25e:	bf00      	nop
 800e260:	0800e295 	.word	0x0800e295
 800e264:	0800e2b5 	.word	0x0800e2b5
 800e268:	0800e2b5 	.word	0x0800e2b5
 800e26c:	0800e2b5 	.word	0x0800e2b5
 800e270:	0800e2a5 	.word	0x0800e2a5
 800e274:	0800e2b5 	.word	0x0800e2b5
 800e278:	0800e2b5 	.word	0x0800e2b5
 800e27c:	0800e2b5 	.word	0x0800e2b5
 800e280:	0800e29d 	.word	0x0800e29d
 800e284:	0800e2b5 	.word	0x0800e2b5
 800e288:	0800e2b5 	.word	0x0800e2b5
 800e28c:	0800e2b5 	.word	0x0800e2b5
 800e290:	0800e2ad 	.word	0x0800e2ad
 800e294:	2300      	movs	r3, #0
 800e296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e29a:	e0d8      	b.n	800e44e <UART_SetConfig+0x2e6>
 800e29c:	2302      	movs	r3, #2
 800e29e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e2a2:	e0d4      	b.n	800e44e <UART_SetConfig+0x2e6>
 800e2a4:	2304      	movs	r3, #4
 800e2a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e2aa:	e0d0      	b.n	800e44e <UART_SetConfig+0x2e6>
 800e2ac:	2308      	movs	r3, #8
 800e2ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e2b2:	e0cc      	b.n	800e44e <UART_SetConfig+0x2e6>
 800e2b4:	2310      	movs	r3, #16
 800e2b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e2ba:	e0c8      	b.n	800e44e <UART_SetConfig+0x2e6>
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	4a5e      	ldr	r2, [pc, #376]	; (800e43c <UART_SetConfig+0x2d4>)
 800e2c2:	4293      	cmp	r3, r2
 800e2c4:	d125      	bne.n	800e312 <UART_SetConfig+0x1aa>
 800e2c6:	4b5b      	ldr	r3, [pc, #364]	; (800e434 <UART_SetConfig+0x2cc>)
 800e2c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e2cc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e2d0:	2b30      	cmp	r3, #48	; 0x30
 800e2d2:	d016      	beq.n	800e302 <UART_SetConfig+0x19a>
 800e2d4:	2b30      	cmp	r3, #48	; 0x30
 800e2d6:	d818      	bhi.n	800e30a <UART_SetConfig+0x1a2>
 800e2d8:	2b20      	cmp	r3, #32
 800e2da:	d00a      	beq.n	800e2f2 <UART_SetConfig+0x18a>
 800e2dc:	2b20      	cmp	r3, #32
 800e2de:	d814      	bhi.n	800e30a <UART_SetConfig+0x1a2>
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d002      	beq.n	800e2ea <UART_SetConfig+0x182>
 800e2e4:	2b10      	cmp	r3, #16
 800e2e6:	d008      	beq.n	800e2fa <UART_SetConfig+0x192>
 800e2e8:	e00f      	b.n	800e30a <UART_SetConfig+0x1a2>
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e2f0:	e0ad      	b.n	800e44e <UART_SetConfig+0x2e6>
 800e2f2:	2302      	movs	r3, #2
 800e2f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e2f8:	e0a9      	b.n	800e44e <UART_SetConfig+0x2e6>
 800e2fa:	2304      	movs	r3, #4
 800e2fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e300:	e0a5      	b.n	800e44e <UART_SetConfig+0x2e6>
 800e302:	2308      	movs	r3, #8
 800e304:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e308:	e0a1      	b.n	800e44e <UART_SetConfig+0x2e6>
 800e30a:	2310      	movs	r3, #16
 800e30c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e310:	e09d      	b.n	800e44e <UART_SetConfig+0x2e6>
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	4a4a      	ldr	r2, [pc, #296]	; (800e440 <UART_SetConfig+0x2d8>)
 800e318:	4293      	cmp	r3, r2
 800e31a:	d125      	bne.n	800e368 <UART_SetConfig+0x200>
 800e31c:	4b45      	ldr	r3, [pc, #276]	; (800e434 <UART_SetConfig+0x2cc>)
 800e31e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e322:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e326:	2bc0      	cmp	r3, #192	; 0xc0
 800e328:	d016      	beq.n	800e358 <UART_SetConfig+0x1f0>
 800e32a:	2bc0      	cmp	r3, #192	; 0xc0
 800e32c:	d818      	bhi.n	800e360 <UART_SetConfig+0x1f8>
 800e32e:	2b80      	cmp	r3, #128	; 0x80
 800e330:	d00a      	beq.n	800e348 <UART_SetConfig+0x1e0>
 800e332:	2b80      	cmp	r3, #128	; 0x80
 800e334:	d814      	bhi.n	800e360 <UART_SetConfig+0x1f8>
 800e336:	2b00      	cmp	r3, #0
 800e338:	d002      	beq.n	800e340 <UART_SetConfig+0x1d8>
 800e33a:	2b40      	cmp	r3, #64	; 0x40
 800e33c:	d008      	beq.n	800e350 <UART_SetConfig+0x1e8>
 800e33e:	e00f      	b.n	800e360 <UART_SetConfig+0x1f8>
 800e340:	2300      	movs	r3, #0
 800e342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e346:	e082      	b.n	800e44e <UART_SetConfig+0x2e6>
 800e348:	2302      	movs	r3, #2
 800e34a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e34e:	e07e      	b.n	800e44e <UART_SetConfig+0x2e6>
 800e350:	2304      	movs	r3, #4
 800e352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e356:	e07a      	b.n	800e44e <UART_SetConfig+0x2e6>
 800e358:	2308      	movs	r3, #8
 800e35a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e35e:	e076      	b.n	800e44e <UART_SetConfig+0x2e6>
 800e360:	2310      	movs	r3, #16
 800e362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e366:	e072      	b.n	800e44e <UART_SetConfig+0x2e6>
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	4a35      	ldr	r2, [pc, #212]	; (800e444 <UART_SetConfig+0x2dc>)
 800e36e:	4293      	cmp	r3, r2
 800e370:	d12a      	bne.n	800e3c8 <UART_SetConfig+0x260>
 800e372:	4b30      	ldr	r3, [pc, #192]	; (800e434 <UART_SetConfig+0x2cc>)
 800e374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e378:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e37c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e380:	d01a      	beq.n	800e3b8 <UART_SetConfig+0x250>
 800e382:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e386:	d81b      	bhi.n	800e3c0 <UART_SetConfig+0x258>
 800e388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e38c:	d00c      	beq.n	800e3a8 <UART_SetConfig+0x240>
 800e38e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e392:	d815      	bhi.n	800e3c0 <UART_SetConfig+0x258>
 800e394:	2b00      	cmp	r3, #0
 800e396:	d003      	beq.n	800e3a0 <UART_SetConfig+0x238>
 800e398:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e39c:	d008      	beq.n	800e3b0 <UART_SetConfig+0x248>
 800e39e:	e00f      	b.n	800e3c0 <UART_SetConfig+0x258>
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e3a6:	e052      	b.n	800e44e <UART_SetConfig+0x2e6>
 800e3a8:	2302      	movs	r3, #2
 800e3aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e3ae:	e04e      	b.n	800e44e <UART_SetConfig+0x2e6>
 800e3b0:	2304      	movs	r3, #4
 800e3b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e3b6:	e04a      	b.n	800e44e <UART_SetConfig+0x2e6>
 800e3b8:	2308      	movs	r3, #8
 800e3ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e3be:	e046      	b.n	800e44e <UART_SetConfig+0x2e6>
 800e3c0:	2310      	movs	r3, #16
 800e3c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e3c6:	e042      	b.n	800e44e <UART_SetConfig+0x2e6>
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	4a17      	ldr	r2, [pc, #92]	; (800e42c <UART_SetConfig+0x2c4>)
 800e3ce:	4293      	cmp	r3, r2
 800e3d0:	d13a      	bne.n	800e448 <UART_SetConfig+0x2e0>
 800e3d2:	4b18      	ldr	r3, [pc, #96]	; (800e434 <UART_SetConfig+0x2cc>)
 800e3d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e3d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e3dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e3e0:	d01a      	beq.n	800e418 <UART_SetConfig+0x2b0>
 800e3e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e3e6:	d81b      	bhi.n	800e420 <UART_SetConfig+0x2b8>
 800e3e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e3ec:	d00c      	beq.n	800e408 <UART_SetConfig+0x2a0>
 800e3ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e3f2:	d815      	bhi.n	800e420 <UART_SetConfig+0x2b8>
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d003      	beq.n	800e400 <UART_SetConfig+0x298>
 800e3f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e3fc:	d008      	beq.n	800e410 <UART_SetConfig+0x2a8>
 800e3fe:	e00f      	b.n	800e420 <UART_SetConfig+0x2b8>
 800e400:	2300      	movs	r3, #0
 800e402:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e406:	e022      	b.n	800e44e <UART_SetConfig+0x2e6>
 800e408:	2302      	movs	r3, #2
 800e40a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e40e:	e01e      	b.n	800e44e <UART_SetConfig+0x2e6>
 800e410:	2304      	movs	r3, #4
 800e412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e416:	e01a      	b.n	800e44e <UART_SetConfig+0x2e6>
 800e418:	2308      	movs	r3, #8
 800e41a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e41e:	e016      	b.n	800e44e <UART_SetConfig+0x2e6>
 800e420:	2310      	movs	r3, #16
 800e422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e426:	e012      	b.n	800e44e <UART_SetConfig+0x2e6>
 800e428:	efff69f3 	.word	0xefff69f3
 800e42c:	40008000 	.word	0x40008000
 800e430:	40013800 	.word	0x40013800
 800e434:	40021000 	.word	0x40021000
 800e438:	40004400 	.word	0x40004400
 800e43c:	40004800 	.word	0x40004800
 800e440:	40004c00 	.word	0x40004c00
 800e444:	40005000 	.word	0x40005000
 800e448:	2310      	movs	r3, #16
 800e44a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	4a9f      	ldr	r2, [pc, #636]	; (800e6d0 <UART_SetConfig+0x568>)
 800e454:	4293      	cmp	r3, r2
 800e456:	d17a      	bne.n	800e54e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e458:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e45c:	2b08      	cmp	r3, #8
 800e45e:	d824      	bhi.n	800e4aa <UART_SetConfig+0x342>
 800e460:	a201      	add	r2, pc, #4	; (adr r2, 800e468 <UART_SetConfig+0x300>)
 800e462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e466:	bf00      	nop
 800e468:	0800e48d 	.word	0x0800e48d
 800e46c:	0800e4ab 	.word	0x0800e4ab
 800e470:	0800e495 	.word	0x0800e495
 800e474:	0800e4ab 	.word	0x0800e4ab
 800e478:	0800e49b 	.word	0x0800e49b
 800e47c:	0800e4ab 	.word	0x0800e4ab
 800e480:	0800e4ab 	.word	0x0800e4ab
 800e484:	0800e4ab 	.word	0x0800e4ab
 800e488:	0800e4a3 	.word	0x0800e4a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e48c:	f7fc f8f0 	bl	800a670 <HAL_RCC_GetPCLK1Freq>
 800e490:	61f8      	str	r0, [r7, #28]
        break;
 800e492:	e010      	b.n	800e4b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e494:	4b8f      	ldr	r3, [pc, #572]	; (800e6d4 <UART_SetConfig+0x56c>)
 800e496:	61fb      	str	r3, [r7, #28]
        break;
 800e498:	e00d      	b.n	800e4b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e49a:	f7fc f851 	bl	800a540 <HAL_RCC_GetSysClockFreq>
 800e49e:	61f8      	str	r0, [r7, #28]
        break;
 800e4a0:	e009      	b.n	800e4b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e4a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e4a6:	61fb      	str	r3, [r7, #28]
        break;
 800e4a8:	e005      	b.n	800e4b6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e4ae:	2301      	movs	r3, #1
 800e4b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800e4b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e4b6:	69fb      	ldr	r3, [r7, #28]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	f000 80fb 	beq.w	800e6b4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	685a      	ldr	r2, [r3, #4]
 800e4c2:	4613      	mov	r3, r2
 800e4c4:	005b      	lsls	r3, r3, #1
 800e4c6:	4413      	add	r3, r2
 800e4c8:	69fa      	ldr	r2, [r7, #28]
 800e4ca:	429a      	cmp	r2, r3
 800e4cc:	d305      	bcc.n	800e4da <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	685b      	ldr	r3, [r3, #4]
 800e4d2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e4d4:	69fa      	ldr	r2, [r7, #28]
 800e4d6:	429a      	cmp	r2, r3
 800e4d8:	d903      	bls.n	800e4e2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800e4da:	2301      	movs	r3, #1
 800e4dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800e4e0:	e0e8      	b.n	800e6b4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800e4e2:	69fb      	ldr	r3, [r7, #28]
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	461c      	mov	r4, r3
 800e4e8:	4615      	mov	r5, r2
 800e4ea:	f04f 0200 	mov.w	r2, #0
 800e4ee:	f04f 0300 	mov.w	r3, #0
 800e4f2:	022b      	lsls	r3, r5, #8
 800e4f4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800e4f8:	0222      	lsls	r2, r4, #8
 800e4fa:	68f9      	ldr	r1, [r7, #12]
 800e4fc:	6849      	ldr	r1, [r1, #4]
 800e4fe:	0849      	lsrs	r1, r1, #1
 800e500:	2000      	movs	r0, #0
 800e502:	4688      	mov	r8, r1
 800e504:	4681      	mov	r9, r0
 800e506:	eb12 0a08 	adds.w	sl, r2, r8
 800e50a:	eb43 0b09 	adc.w	fp, r3, r9
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	685b      	ldr	r3, [r3, #4]
 800e512:	2200      	movs	r2, #0
 800e514:	603b      	str	r3, [r7, #0]
 800e516:	607a      	str	r2, [r7, #4]
 800e518:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e51c:	4650      	mov	r0, sl
 800e51e:	4659      	mov	r1, fp
 800e520:	f7f2 fc02 	bl	8000d28 <__aeabi_uldivmod>
 800e524:	4602      	mov	r2, r0
 800e526:	460b      	mov	r3, r1
 800e528:	4613      	mov	r3, r2
 800e52a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e52c:	69bb      	ldr	r3, [r7, #24]
 800e52e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e532:	d308      	bcc.n	800e546 <UART_SetConfig+0x3de>
 800e534:	69bb      	ldr	r3, [r7, #24]
 800e536:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e53a:	d204      	bcs.n	800e546 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	69ba      	ldr	r2, [r7, #24]
 800e542:	60da      	str	r2, [r3, #12]
 800e544:	e0b6      	b.n	800e6b4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800e546:	2301      	movs	r3, #1
 800e548:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800e54c:	e0b2      	b.n	800e6b4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	69db      	ldr	r3, [r3, #28]
 800e552:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e556:	d15e      	bne.n	800e616 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800e558:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e55c:	2b08      	cmp	r3, #8
 800e55e:	d828      	bhi.n	800e5b2 <UART_SetConfig+0x44a>
 800e560:	a201      	add	r2, pc, #4	; (adr r2, 800e568 <UART_SetConfig+0x400>)
 800e562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e566:	bf00      	nop
 800e568:	0800e58d 	.word	0x0800e58d
 800e56c:	0800e595 	.word	0x0800e595
 800e570:	0800e59d 	.word	0x0800e59d
 800e574:	0800e5b3 	.word	0x0800e5b3
 800e578:	0800e5a3 	.word	0x0800e5a3
 800e57c:	0800e5b3 	.word	0x0800e5b3
 800e580:	0800e5b3 	.word	0x0800e5b3
 800e584:	0800e5b3 	.word	0x0800e5b3
 800e588:	0800e5ab 	.word	0x0800e5ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e58c:	f7fc f870 	bl	800a670 <HAL_RCC_GetPCLK1Freq>
 800e590:	61f8      	str	r0, [r7, #28]
        break;
 800e592:	e014      	b.n	800e5be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e594:	f7fc f882 	bl	800a69c <HAL_RCC_GetPCLK2Freq>
 800e598:	61f8      	str	r0, [r7, #28]
        break;
 800e59a:	e010      	b.n	800e5be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e59c:	4b4d      	ldr	r3, [pc, #308]	; (800e6d4 <UART_SetConfig+0x56c>)
 800e59e:	61fb      	str	r3, [r7, #28]
        break;
 800e5a0:	e00d      	b.n	800e5be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e5a2:	f7fb ffcd 	bl	800a540 <HAL_RCC_GetSysClockFreq>
 800e5a6:	61f8      	str	r0, [r7, #28]
        break;
 800e5a8:	e009      	b.n	800e5be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e5aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e5ae:	61fb      	str	r3, [r7, #28]
        break;
 800e5b0:	e005      	b.n	800e5be <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e5b6:	2301      	movs	r3, #1
 800e5b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800e5bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e5be:	69fb      	ldr	r3, [r7, #28]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d077      	beq.n	800e6b4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e5c4:	69fb      	ldr	r3, [r7, #28]
 800e5c6:	005a      	lsls	r2, r3, #1
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	685b      	ldr	r3, [r3, #4]
 800e5cc:	085b      	lsrs	r3, r3, #1
 800e5ce:	441a      	add	r2, r3
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	685b      	ldr	r3, [r3, #4]
 800e5d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5d8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e5da:	69bb      	ldr	r3, [r7, #24]
 800e5dc:	2b0f      	cmp	r3, #15
 800e5de:	d916      	bls.n	800e60e <UART_SetConfig+0x4a6>
 800e5e0:	69bb      	ldr	r3, [r7, #24]
 800e5e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e5e6:	d212      	bcs.n	800e60e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e5e8:	69bb      	ldr	r3, [r7, #24]
 800e5ea:	b29b      	uxth	r3, r3
 800e5ec:	f023 030f 	bic.w	r3, r3, #15
 800e5f0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e5f2:	69bb      	ldr	r3, [r7, #24]
 800e5f4:	085b      	lsrs	r3, r3, #1
 800e5f6:	b29b      	uxth	r3, r3
 800e5f8:	f003 0307 	and.w	r3, r3, #7
 800e5fc:	b29a      	uxth	r2, r3
 800e5fe:	8afb      	ldrh	r3, [r7, #22]
 800e600:	4313      	orrs	r3, r2
 800e602:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	8afa      	ldrh	r2, [r7, #22]
 800e60a:	60da      	str	r2, [r3, #12]
 800e60c:	e052      	b.n	800e6b4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800e60e:	2301      	movs	r3, #1
 800e610:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800e614:	e04e      	b.n	800e6b4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e616:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e61a:	2b08      	cmp	r3, #8
 800e61c:	d827      	bhi.n	800e66e <UART_SetConfig+0x506>
 800e61e:	a201      	add	r2, pc, #4	; (adr r2, 800e624 <UART_SetConfig+0x4bc>)
 800e620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e624:	0800e649 	.word	0x0800e649
 800e628:	0800e651 	.word	0x0800e651
 800e62c:	0800e659 	.word	0x0800e659
 800e630:	0800e66f 	.word	0x0800e66f
 800e634:	0800e65f 	.word	0x0800e65f
 800e638:	0800e66f 	.word	0x0800e66f
 800e63c:	0800e66f 	.word	0x0800e66f
 800e640:	0800e66f 	.word	0x0800e66f
 800e644:	0800e667 	.word	0x0800e667
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e648:	f7fc f812 	bl	800a670 <HAL_RCC_GetPCLK1Freq>
 800e64c:	61f8      	str	r0, [r7, #28]
        break;
 800e64e:	e014      	b.n	800e67a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e650:	f7fc f824 	bl	800a69c <HAL_RCC_GetPCLK2Freq>
 800e654:	61f8      	str	r0, [r7, #28]
        break;
 800e656:	e010      	b.n	800e67a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e658:	4b1e      	ldr	r3, [pc, #120]	; (800e6d4 <UART_SetConfig+0x56c>)
 800e65a:	61fb      	str	r3, [r7, #28]
        break;
 800e65c:	e00d      	b.n	800e67a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e65e:	f7fb ff6f 	bl	800a540 <HAL_RCC_GetSysClockFreq>
 800e662:	61f8      	str	r0, [r7, #28]
        break;
 800e664:	e009      	b.n	800e67a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e666:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e66a:	61fb      	str	r3, [r7, #28]
        break;
 800e66c:	e005      	b.n	800e67a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800e66e:	2300      	movs	r3, #0
 800e670:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e672:	2301      	movs	r3, #1
 800e674:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800e678:	bf00      	nop
    }

    if (pclk != 0U)
 800e67a:	69fb      	ldr	r3, [r7, #28]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d019      	beq.n	800e6b4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	685b      	ldr	r3, [r3, #4]
 800e684:	085a      	lsrs	r2, r3, #1
 800e686:	69fb      	ldr	r3, [r7, #28]
 800e688:	441a      	add	r2, r3
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	685b      	ldr	r3, [r3, #4]
 800e68e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e692:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e694:	69bb      	ldr	r3, [r7, #24]
 800e696:	2b0f      	cmp	r3, #15
 800e698:	d909      	bls.n	800e6ae <UART_SetConfig+0x546>
 800e69a:	69bb      	ldr	r3, [r7, #24]
 800e69c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e6a0:	d205      	bcs.n	800e6ae <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e6a2:	69bb      	ldr	r3, [r7, #24]
 800e6a4:	b29a      	uxth	r2, r3
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	60da      	str	r2, [r3, #12]
 800e6ac:	e002      	b.n	800e6b4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800e6ae:	2301      	movs	r3, #1
 800e6b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	2200      	movs	r2, #0
 800e6be:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800e6c0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	3728      	adds	r7, #40	; 0x28
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e6ce:	bf00      	nop
 800e6d0:	40008000 	.word	0x40008000
 800e6d4:	00f42400 	.word	0x00f42400

0800e6d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e6d8:	b480      	push	{r7}
 800e6da:	b083      	sub	sp, #12
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6e4:	f003 0301 	and.w	r3, r3, #1
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d00a      	beq.n	800e702 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	685b      	ldr	r3, [r3, #4]
 800e6f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	430a      	orrs	r2, r1
 800e700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e706:	f003 0302 	and.w	r3, r3, #2
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d00a      	beq.n	800e724 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	685b      	ldr	r3, [r3, #4]
 800e714:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	430a      	orrs	r2, r1
 800e722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e728:	f003 0304 	and.w	r3, r3, #4
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d00a      	beq.n	800e746 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	685b      	ldr	r3, [r3, #4]
 800e736:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	430a      	orrs	r2, r1
 800e744:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e74a:	f003 0308 	and.w	r3, r3, #8
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d00a      	beq.n	800e768 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	685b      	ldr	r3, [r3, #4]
 800e758:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	430a      	orrs	r2, r1
 800e766:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e76c:	f003 0310 	and.w	r3, r3, #16
 800e770:	2b00      	cmp	r3, #0
 800e772:	d00a      	beq.n	800e78a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	689b      	ldr	r3, [r3, #8]
 800e77a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	430a      	orrs	r2, r1
 800e788:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e78e:	f003 0320 	and.w	r3, r3, #32
 800e792:	2b00      	cmp	r3, #0
 800e794:	d00a      	beq.n	800e7ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	689b      	ldr	r3, [r3, #8]
 800e79c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	430a      	orrs	r2, r1
 800e7aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d01a      	beq.n	800e7ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	685b      	ldr	r3, [r3, #4]
 800e7be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	430a      	orrs	r2, r1
 800e7cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e7d6:	d10a      	bne.n	800e7ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	685b      	ldr	r3, [r3, #4]
 800e7de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	430a      	orrs	r2, r1
 800e7ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d00a      	beq.n	800e810 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	685b      	ldr	r3, [r3, #4]
 800e800:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	430a      	orrs	r2, r1
 800e80e:	605a      	str	r2, [r3, #4]
  }
}
 800e810:	bf00      	nop
 800e812:	370c      	adds	r7, #12
 800e814:	46bd      	mov	sp, r7
 800e816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81a:	4770      	bx	lr

0800e81c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b086      	sub	sp, #24
 800e820:	af02      	add	r7, sp, #8
 800e822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	2200      	movs	r2, #0
 800e828:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e82c:	f7f8 fe90 	bl	8007550 <HAL_GetTick>
 800e830:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	f003 0308 	and.w	r3, r3, #8
 800e83c:	2b08      	cmp	r3, #8
 800e83e:	d10e      	bne.n	800e85e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e840:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e844:	9300      	str	r3, [sp, #0]
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	2200      	movs	r2, #0
 800e84a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e84e:	6878      	ldr	r0, [r7, #4]
 800e850:	f000 f82d 	bl	800e8ae <UART_WaitOnFlagUntilTimeout>
 800e854:	4603      	mov	r3, r0
 800e856:	2b00      	cmp	r3, #0
 800e858:	d001      	beq.n	800e85e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e85a:	2303      	movs	r3, #3
 800e85c:	e023      	b.n	800e8a6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	f003 0304 	and.w	r3, r3, #4
 800e868:	2b04      	cmp	r3, #4
 800e86a:	d10e      	bne.n	800e88a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e86c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e870:	9300      	str	r3, [sp, #0]
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	2200      	movs	r2, #0
 800e876:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e87a:	6878      	ldr	r0, [r7, #4]
 800e87c:	f000 f817 	bl	800e8ae <UART_WaitOnFlagUntilTimeout>
 800e880:	4603      	mov	r3, r0
 800e882:	2b00      	cmp	r3, #0
 800e884:	d001      	beq.n	800e88a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e886:	2303      	movs	r3, #3
 800e888:	e00d      	b.n	800e8a6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	2220      	movs	r2, #32
 800e88e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2220      	movs	r2, #32
 800e894:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	2200      	movs	r2, #0
 800e89a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	2200      	movs	r2, #0
 800e8a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800e8a4:	2300      	movs	r3, #0
}
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	3710      	adds	r7, #16
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	bd80      	pop	{r7, pc}

0800e8ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e8ae:	b580      	push	{r7, lr}
 800e8b0:	b09c      	sub	sp, #112	; 0x70
 800e8b2:	af00      	add	r7, sp, #0
 800e8b4:	60f8      	str	r0, [r7, #12]
 800e8b6:	60b9      	str	r1, [r7, #8]
 800e8b8:	603b      	str	r3, [r7, #0]
 800e8ba:	4613      	mov	r3, r2
 800e8bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e8be:	e0a5      	b.n	800ea0c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e8c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e8c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e8c6:	f000 80a1 	beq.w	800ea0c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e8ca:	f7f8 fe41 	bl	8007550 <HAL_GetTick>
 800e8ce:	4602      	mov	r2, r0
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	1ad3      	subs	r3, r2, r3
 800e8d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e8d6:	429a      	cmp	r2, r3
 800e8d8:	d302      	bcc.n	800e8e0 <UART_WaitOnFlagUntilTimeout+0x32>
 800e8da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d13e      	bne.n	800e95e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8e8:	e853 3f00 	ldrex	r3, [r3]
 800e8ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e8ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e8f4:	667b      	str	r3, [r7, #100]	; 0x64
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	461a      	mov	r2, r3
 800e8fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e8fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e900:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e902:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e904:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e906:	e841 2300 	strex	r3, r2, [r1]
 800e90a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e90c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d1e6      	bne.n	800e8e0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	3308      	adds	r3, #8
 800e918:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e91a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e91c:	e853 3f00 	ldrex	r3, [r3]
 800e920:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e924:	f023 0301 	bic.w	r3, r3, #1
 800e928:	663b      	str	r3, [r7, #96]	; 0x60
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	3308      	adds	r3, #8
 800e930:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e932:	64ba      	str	r2, [r7, #72]	; 0x48
 800e934:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e936:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e938:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e93a:	e841 2300 	strex	r3, r2, [r1]
 800e93e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e942:	2b00      	cmp	r3, #0
 800e944:	d1e5      	bne.n	800e912 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	2220      	movs	r2, #32
 800e94a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	2220      	movs	r2, #32
 800e950:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	2200      	movs	r2, #0
 800e956:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800e95a:	2303      	movs	r3, #3
 800e95c:	e067      	b.n	800ea2e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	f003 0304 	and.w	r3, r3, #4
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d04f      	beq.n	800ea0c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	69db      	ldr	r3, [r3, #28]
 800e972:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e976:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e97a:	d147      	bne.n	800ea0c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e984:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e98e:	e853 3f00 	ldrex	r3, [r3]
 800e992:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e996:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e99a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	461a      	mov	r2, r3
 800e9a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9a4:	637b      	str	r3, [r7, #52]	; 0x34
 800e9a6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e9aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e9ac:	e841 2300 	strex	r3, r2, [r1]
 800e9b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d1e6      	bne.n	800e986 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	3308      	adds	r3, #8
 800e9be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9c0:	697b      	ldr	r3, [r7, #20]
 800e9c2:	e853 3f00 	ldrex	r3, [r3]
 800e9c6:	613b      	str	r3, [r7, #16]
   return(result);
 800e9c8:	693b      	ldr	r3, [r7, #16]
 800e9ca:	f023 0301 	bic.w	r3, r3, #1
 800e9ce:	66bb      	str	r3, [r7, #104]	; 0x68
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	3308      	adds	r3, #8
 800e9d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e9d8:	623a      	str	r2, [r7, #32]
 800e9da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9dc:	69f9      	ldr	r1, [r7, #28]
 800e9de:	6a3a      	ldr	r2, [r7, #32]
 800e9e0:	e841 2300 	strex	r3, r2, [r1]
 800e9e4:	61bb      	str	r3, [r7, #24]
   return(result);
 800e9e6:	69bb      	ldr	r3, [r7, #24]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d1e5      	bne.n	800e9b8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	2220      	movs	r2, #32
 800e9f0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	2220      	movs	r2, #32
 800e9f6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	2220      	movs	r2, #32
 800e9fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	2200      	movs	r2, #0
 800ea04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800ea08:	2303      	movs	r3, #3
 800ea0a:	e010      	b.n	800ea2e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	69da      	ldr	r2, [r3, #28]
 800ea12:	68bb      	ldr	r3, [r7, #8]
 800ea14:	4013      	ands	r3, r2
 800ea16:	68ba      	ldr	r2, [r7, #8]
 800ea18:	429a      	cmp	r2, r3
 800ea1a:	bf0c      	ite	eq
 800ea1c:	2301      	moveq	r3, #1
 800ea1e:	2300      	movne	r3, #0
 800ea20:	b2db      	uxtb	r3, r3
 800ea22:	461a      	mov	r2, r3
 800ea24:	79fb      	ldrb	r3, [r7, #7]
 800ea26:	429a      	cmp	r2, r3
 800ea28:	f43f af4a 	beq.w	800e8c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ea2c:	2300      	movs	r3, #0
}
 800ea2e:	4618      	mov	r0, r3
 800ea30:	3770      	adds	r7, #112	; 0x70
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}
	...

0800ea38 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ea38:	b480      	push	{r7}
 800ea3a:	b097      	sub	sp, #92	; 0x5c
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	60f8      	str	r0, [r7, #12]
 800ea40:	60b9      	str	r1, [r7, #8]
 800ea42:	4613      	mov	r3, r2
 800ea44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	68ba      	ldr	r2, [r7, #8]
 800ea4a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	88fa      	ldrh	r2, [r7, #6]
 800ea50:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	88fa      	ldrh	r2, [r7, #6]
 800ea58:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	2200      	movs	r2, #0
 800ea60:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	689b      	ldr	r3, [r3, #8]
 800ea66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ea6a:	d10e      	bne.n	800ea8a <UART_Start_Receive_IT+0x52>
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	691b      	ldr	r3, [r3, #16]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d105      	bne.n	800ea80 <UART_Start_Receive_IT+0x48>
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ea7a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ea7e:	e02d      	b.n	800eadc <UART_Start_Receive_IT+0xa4>
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	22ff      	movs	r2, #255	; 0xff
 800ea84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ea88:	e028      	b.n	800eadc <UART_Start_Receive_IT+0xa4>
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	689b      	ldr	r3, [r3, #8]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d10d      	bne.n	800eaae <UART_Start_Receive_IT+0x76>
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	691b      	ldr	r3, [r3, #16]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d104      	bne.n	800eaa4 <UART_Start_Receive_IT+0x6c>
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	22ff      	movs	r2, #255	; 0xff
 800ea9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800eaa2:	e01b      	b.n	800eadc <UART_Start_Receive_IT+0xa4>
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	227f      	movs	r2, #127	; 0x7f
 800eaa8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800eaac:	e016      	b.n	800eadc <UART_Start_Receive_IT+0xa4>
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	689b      	ldr	r3, [r3, #8]
 800eab2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800eab6:	d10d      	bne.n	800ead4 <UART_Start_Receive_IT+0x9c>
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	691b      	ldr	r3, [r3, #16]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d104      	bne.n	800eaca <UART_Start_Receive_IT+0x92>
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	227f      	movs	r2, #127	; 0x7f
 800eac4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800eac8:	e008      	b.n	800eadc <UART_Start_Receive_IT+0xa4>
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	223f      	movs	r2, #63	; 0x3f
 800eace:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ead2:	e003      	b.n	800eadc <UART_Start_Receive_IT+0xa4>
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	2200      	movs	r2, #0
 800ead8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	2200      	movs	r2, #0
 800eae0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	2222      	movs	r2, #34	; 0x22
 800eae8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	3308      	adds	r3, #8
 800eaf0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eaf4:	e853 3f00 	ldrex	r3, [r3]
 800eaf8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800eafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eafc:	f043 0301 	orr.w	r3, r3, #1
 800eb00:	657b      	str	r3, [r7, #84]	; 0x54
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	3308      	adds	r3, #8
 800eb08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800eb0a:	64ba      	str	r2, [r7, #72]	; 0x48
 800eb0c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eb10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eb12:	e841 2300 	strex	r3, r2, [r1]
 800eb16:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800eb18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d1e5      	bne.n	800eaea <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	689b      	ldr	r3, [r3, #8]
 800eb22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eb26:	d107      	bne.n	800eb38 <UART_Start_Receive_IT+0x100>
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	691b      	ldr	r3, [r3, #16]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d103      	bne.n	800eb38 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	4a24      	ldr	r2, [pc, #144]	; (800ebc4 <UART_Start_Receive_IT+0x18c>)
 800eb34:	665a      	str	r2, [r3, #100]	; 0x64
 800eb36:	e002      	b.n	800eb3e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	4a23      	ldr	r2, [pc, #140]	; (800ebc8 <UART_Start_Receive_IT+0x190>)
 800eb3c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	2200      	movs	r2, #0
 800eb42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	691b      	ldr	r3, [r3, #16]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d019      	beq.n	800eb82 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb56:	e853 3f00 	ldrex	r3, [r3]
 800eb5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb5e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800eb62:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	461a      	mov	r2, r3
 800eb6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb6c:	637b      	str	r3, [r7, #52]	; 0x34
 800eb6e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eb72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eb74:	e841 2300 	strex	r3, r2, [r1]
 800eb78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800eb7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d1e6      	bne.n	800eb4e <UART_Start_Receive_IT+0x116>
 800eb80:	e018      	b.n	800ebb4 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb88:	697b      	ldr	r3, [r7, #20]
 800eb8a:	e853 3f00 	ldrex	r3, [r3]
 800eb8e:	613b      	str	r3, [r7, #16]
   return(result);
 800eb90:	693b      	ldr	r3, [r7, #16]
 800eb92:	f043 0320 	orr.w	r3, r3, #32
 800eb96:	653b      	str	r3, [r7, #80]	; 0x50
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	461a      	mov	r2, r3
 800eb9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eba0:	623b      	str	r3, [r7, #32]
 800eba2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eba4:	69f9      	ldr	r1, [r7, #28]
 800eba6:	6a3a      	ldr	r2, [r7, #32]
 800eba8:	e841 2300 	strex	r3, r2, [r1]
 800ebac:	61bb      	str	r3, [r7, #24]
   return(result);
 800ebae:	69bb      	ldr	r3, [r7, #24]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d1e6      	bne.n	800eb82 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800ebb4:	2300      	movs	r3, #0
}
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	375c      	adds	r7, #92	; 0x5c
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc0:	4770      	bx	lr
 800ebc2:	bf00      	nop
 800ebc4:	0800eff1 	.word	0x0800eff1
 800ebc8:	0800ee91 	.word	0x0800ee91

0800ebcc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ebcc:	b480      	push	{r7}
 800ebce:	b089      	sub	sp, #36	; 0x24
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	e853 3f00 	ldrex	r3, [r3]
 800ebe0:	60bb      	str	r3, [r7, #8]
   return(result);
 800ebe2:	68bb      	ldr	r3, [r7, #8]
 800ebe4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ebe8:	61fb      	str	r3, [r7, #28]
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	461a      	mov	r2, r3
 800ebf0:	69fb      	ldr	r3, [r7, #28]
 800ebf2:	61bb      	str	r3, [r7, #24]
 800ebf4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebf6:	6979      	ldr	r1, [r7, #20]
 800ebf8:	69ba      	ldr	r2, [r7, #24]
 800ebfa:	e841 2300 	strex	r3, r2, [r1]
 800ebfe:	613b      	str	r3, [r7, #16]
   return(result);
 800ec00:	693b      	ldr	r3, [r7, #16]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d1e6      	bne.n	800ebd4 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	2220      	movs	r2, #32
 800ec0a:	679a      	str	r2, [r3, #120]	; 0x78
}
 800ec0c:	bf00      	nop
 800ec0e:	3724      	adds	r7, #36	; 0x24
 800ec10:	46bd      	mov	sp, r7
 800ec12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec16:	4770      	bx	lr

0800ec18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ec18:	b480      	push	{r7}
 800ec1a:	b095      	sub	sp, #84	; 0x54
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec28:	e853 3f00 	ldrex	r3, [r3]
 800ec2c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ec2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ec34:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	461a      	mov	r2, r3
 800ec3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec3e:	643b      	str	r3, [r7, #64]	; 0x40
 800ec40:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ec44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ec46:	e841 2300 	strex	r3, r2, [r1]
 800ec4a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ec4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d1e6      	bne.n	800ec20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	3308      	adds	r3, #8
 800ec58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec5a:	6a3b      	ldr	r3, [r7, #32]
 800ec5c:	e853 3f00 	ldrex	r3, [r3]
 800ec60:	61fb      	str	r3, [r7, #28]
   return(result);
 800ec62:	69fb      	ldr	r3, [r7, #28]
 800ec64:	f023 0301 	bic.w	r3, r3, #1
 800ec68:	64bb      	str	r3, [r7, #72]	; 0x48
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	3308      	adds	r3, #8
 800ec70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ec72:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ec74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ec78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec7a:	e841 2300 	strex	r3, r2, [r1]
 800ec7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ec80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d1e5      	bne.n	800ec52 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ec8a:	2b01      	cmp	r3, #1
 800ec8c:	d118      	bne.n	800ecc0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	e853 3f00 	ldrex	r3, [r3]
 800ec9a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ec9c:	68bb      	ldr	r3, [r7, #8]
 800ec9e:	f023 0310 	bic.w	r3, r3, #16
 800eca2:	647b      	str	r3, [r7, #68]	; 0x44
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	461a      	mov	r2, r3
 800ecaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ecac:	61bb      	str	r3, [r7, #24]
 800ecae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecb0:	6979      	ldr	r1, [r7, #20]
 800ecb2:	69ba      	ldr	r2, [r7, #24]
 800ecb4:	e841 2300 	strex	r3, r2, [r1]
 800ecb8:	613b      	str	r3, [r7, #16]
   return(result);
 800ecba:	693b      	ldr	r3, [r7, #16]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d1e6      	bne.n	800ec8e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	2220      	movs	r2, #32
 800ecc4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	2200      	movs	r2, #0
 800ecca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	2200      	movs	r2, #0
 800ecd0:	665a      	str	r2, [r3, #100]	; 0x64
}
 800ecd2:	bf00      	nop
 800ecd4:	3754      	adds	r7, #84	; 0x54
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecdc:	4770      	bx	lr

0800ecde <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ecde:	b580      	push	{r7, lr}
 800ece0:	b090      	sub	sp, #64	; 0x40
 800ece2:	af00      	add	r7, sp, #0
 800ece4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecea:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	f003 0320 	and.w	r3, r3, #32
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d137      	bne.n	800ed6a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800ecfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ed02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	3308      	adds	r3, #8
 800ed08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed0c:	e853 3f00 	ldrex	r3, [r3]
 800ed10:	623b      	str	r3, [r7, #32]
   return(result);
 800ed12:	6a3b      	ldr	r3, [r7, #32]
 800ed14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ed18:	63bb      	str	r3, [r7, #56]	; 0x38
 800ed1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	3308      	adds	r3, #8
 800ed20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ed22:	633a      	str	r2, [r7, #48]	; 0x30
 800ed24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ed28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed2a:	e841 2300 	strex	r3, r2, [r1]
 800ed2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ed30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d1e5      	bne.n	800ed02 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ed36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed3c:	693b      	ldr	r3, [r7, #16]
 800ed3e:	e853 3f00 	ldrex	r3, [r3]
 800ed42:	60fb      	str	r3, [r7, #12]
   return(result);
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed4a:	637b      	str	r3, [r7, #52]	; 0x34
 800ed4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	461a      	mov	r2, r3
 800ed52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed54:	61fb      	str	r3, [r7, #28]
 800ed56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed58:	69b9      	ldr	r1, [r7, #24]
 800ed5a:	69fa      	ldr	r2, [r7, #28]
 800ed5c:	e841 2300 	strex	r3, r2, [r1]
 800ed60:	617b      	str	r3, [r7, #20]
   return(result);
 800ed62:	697b      	ldr	r3, [r7, #20]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d1e6      	bne.n	800ed36 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ed68:	e002      	b.n	800ed70 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800ed6a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ed6c:	f7f4 f9fe 	bl	800316c <HAL_UART_TxCpltCallback>
}
 800ed70:	bf00      	nop
 800ed72:	3740      	adds	r7, #64	; 0x40
 800ed74:	46bd      	mov	sp, r7
 800ed76:	bd80      	pop	{r7, pc}

0800ed78 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b084      	sub	sp, #16
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed84:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ed86:	68f8      	ldr	r0, [r7, #12]
 800ed88:	f7ff f9d8 	bl	800e13c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ed8c:	bf00      	nop
 800ed8e:	3710      	adds	r7, #16
 800ed90:	46bd      	mov	sp, r7
 800ed92:	bd80      	pop	{r7, pc}

0800ed94 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b086      	sub	sp, #24
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eda0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800eda2:	697b      	ldr	r3, [r7, #20]
 800eda4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eda6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800eda8:	697b      	ldr	r3, [r7, #20]
 800edaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800edac:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800edae:	697b      	ldr	r3, [r7, #20]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	689b      	ldr	r3, [r3, #8]
 800edb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800edb8:	2b80      	cmp	r3, #128	; 0x80
 800edba:	d109      	bne.n	800edd0 <UART_DMAError+0x3c>
 800edbc:	693b      	ldr	r3, [r7, #16]
 800edbe:	2b21      	cmp	r3, #33	; 0x21
 800edc0:	d106      	bne.n	800edd0 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800edc2:	697b      	ldr	r3, [r7, #20]
 800edc4:	2200      	movs	r2, #0
 800edc6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800edca:	6978      	ldr	r0, [r7, #20]
 800edcc:	f7ff fefe 	bl	800ebcc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800edd0:	697b      	ldr	r3, [r7, #20]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	689b      	ldr	r3, [r3, #8]
 800edd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800edda:	2b40      	cmp	r3, #64	; 0x40
 800eddc:	d109      	bne.n	800edf2 <UART_DMAError+0x5e>
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	2b22      	cmp	r3, #34	; 0x22
 800ede2:	d106      	bne.n	800edf2 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ede4:	697b      	ldr	r3, [r7, #20]
 800ede6:	2200      	movs	r2, #0
 800ede8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800edec:	6978      	ldr	r0, [r7, #20]
 800edee:	f7ff ff13 	bl	800ec18 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800edf2:	697b      	ldr	r3, [r7, #20]
 800edf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800edf8:	f043 0210 	orr.w	r2, r3, #16
 800edfc:	697b      	ldr	r3, [r7, #20]
 800edfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ee02:	6978      	ldr	r0, [r7, #20]
 800ee04:	f7f4 f9c8 	bl	8003198 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ee08:	bf00      	nop
 800ee0a:	3718      	adds	r7, #24
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	bd80      	pop	{r7, pc}

0800ee10 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b084      	sub	sp, #16
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	2200      	movs	r2, #0
 800ee22:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	2200      	movs	r2, #0
 800ee2a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ee2e:	68f8      	ldr	r0, [r7, #12]
 800ee30:	f7f4 f9b2 	bl	8003198 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ee34:	bf00      	nop
 800ee36:	3710      	adds	r7, #16
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	bd80      	pop	{r7, pc}

0800ee3c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	b088      	sub	sp, #32
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	e853 3f00 	ldrex	r3, [r3]
 800ee50:	60bb      	str	r3, [r7, #8]
   return(result);
 800ee52:	68bb      	ldr	r3, [r7, #8]
 800ee54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ee58:	61fb      	str	r3, [r7, #28]
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	461a      	mov	r2, r3
 800ee60:	69fb      	ldr	r3, [r7, #28]
 800ee62:	61bb      	str	r3, [r7, #24]
 800ee64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee66:	6979      	ldr	r1, [r7, #20]
 800ee68:	69ba      	ldr	r2, [r7, #24]
 800ee6a:	e841 2300 	strex	r3, r2, [r1]
 800ee6e:	613b      	str	r3, [r7, #16]
   return(result);
 800ee70:	693b      	ldr	r3, [r7, #16]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d1e6      	bne.n	800ee44 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	2220      	movs	r2, #32
 800ee7a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2200      	movs	r2, #0
 800ee80:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ee82:	6878      	ldr	r0, [r7, #4]
 800ee84:	f7f4 f972 	bl	800316c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ee88:	bf00      	nop
 800ee8a:	3720      	adds	r7, #32
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	bd80      	pop	{r7, pc}

0800ee90 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b096      	sub	sp, #88	; 0x58
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ee9e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eea6:	2b22      	cmp	r3, #34	; 0x22
 800eea8:	f040 8094 	bne.w	800efd4 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800eeb2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800eeb6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800eeba:	b2d9      	uxtb	r1, r3
 800eebc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800eec0:	b2da      	uxtb	r2, r3
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eec6:	400a      	ands	r2, r1
 800eec8:	b2d2      	uxtb	r2, r2
 800eeca:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eed0:	1c5a      	adds	r2, r3, #1
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800eedc:	b29b      	uxth	r3, r3
 800eede:	3b01      	subs	r3, #1
 800eee0:	b29a      	uxth	r2, r3
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800eeee:	b29b      	uxth	r3, r3
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d179      	bne.n	800efe8 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eefa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eefc:	e853 3f00 	ldrex	r3, [r3]
 800ef00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ef02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ef08:	653b      	str	r3, [r7, #80]	; 0x50
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	461a      	mov	r2, r3
 800ef10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef12:	647b      	str	r3, [r7, #68]	; 0x44
 800ef14:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ef18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ef1a:	e841 2300 	strex	r3, r2, [r1]
 800ef1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ef20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d1e6      	bne.n	800eef4 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	3308      	adds	r3, #8
 800ef2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef30:	e853 3f00 	ldrex	r3, [r3]
 800ef34:	623b      	str	r3, [r7, #32]
   return(result);
 800ef36:	6a3b      	ldr	r3, [r7, #32]
 800ef38:	f023 0301 	bic.w	r3, r3, #1
 800ef3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	3308      	adds	r3, #8
 800ef44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ef46:	633a      	str	r2, [r7, #48]	; 0x30
 800ef48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ef4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef4e:	e841 2300 	strex	r3, r2, [r1]
 800ef52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ef54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d1e5      	bne.n	800ef26 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	2220      	movs	r2, #32
 800ef5e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	2200      	movs	r2, #0
 800ef64:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ef6a:	2b01      	cmp	r3, #1
 800ef6c:	d12e      	bne.n	800efcc <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	2200      	movs	r2, #0
 800ef72:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef7a:	693b      	ldr	r3, [r7, #16]
 800ef7c:	e853 3f00 	ldrex	r3, [r3]
 800ef80:	60fb      	str	r3, [r7, #12]
   return(result);
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	f023 0310 	bic.w	r3, r3, #16
 800ef88:	64bb      	str	r3, [r7, #72]	; 0x48
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	461a      	mov	r2, r3
 800ef90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef92:	61fb      	str	r3, [r7, #28]
 800ef94:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef96:	69b9      	ldr	r1, [r7, #24]
 800ef98:	69fa      	ldr	r2, [r7, #28]
 800ef9a:	e841 2300 	strex	r3, r2, [r1]
 800ef9e:	617b      	str	r3, [r7, #20]
   return(result);
 800efa0:	697b      	ldr	r3, [r7, #20]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d1e6      	bne.n	800ef74 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	69db      	ldr	r3, [r3, #28]
 800efac:	f003 0310 	and.w	r3, r3, #16
 800efb0:	2b10      	cmp	r3, #16
 800efb2:	d103      	bne.n	800efbc <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	2210      	movs	r2, #16
 800efba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800efc2:	4619      	mov	r1, r3
 800efc4:	6878      	ldr	r0, [r7, #4]
 800efc6:	f7ff f8c3 	bl	800e150 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800efca:	e00d      	b.n	800efe8 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800efcc:	6878      	ldr	r0, [r7, #4]
 800efce:	f7f4 f8fd 	bl	80031cc <HAL_UART_RxCpltCallback>
}
 800efd2:	e009      	b.n	800efe8 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	8b1b      	ldrh	r3, [r3, #24]
 800efda:	b29a      	uxth	r2, r3
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	f042 0208 	orr.w	r2, r2, #8
 800efe4:	b292      	uxth	r2, r2
 800efe6:	831a      	strh	r2, [r3, #24]
}
 800efe8:	bf00      	nop
 800efea:	3758      	adds	r7, #88	; 0x58
 800efec:	46bd      	mov	sp, r7
 800efee:	bd80      	pop	{r7, pc}

0800eff0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b096      	sub	sp, #88	; 0x58
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800effe:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f006:	2b22      	cmp	r3, #34	; 0x22
 800f008:	f040 8094 	bne.w	800f134 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f012:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f01a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800f01c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800f020:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f024:	4013      	ands	r3, r2
 800f026:	b29a      	uxth	r2, r3
 800f028:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f02a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f030:	1c9a      	adds	r2, r3, #2
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f03c:	b29b      	uxth	r3, r3
 800f03e:	3b01      	subs	r3, #1
 800f040:	b29a      	uxth	r2, r3
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f04e:	b29b      	uxth	r3, r3
 800f050:	2b00      	cmp	r3, #0
 800f052:	d179      	bne.n	800f148 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f05a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f05c:	e853 3f00 	ldrex	r3, [r3]
 800f060:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f064:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f068:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	461a      	mov	r2, r3
 800f070:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f072:	643b      	str	r3, [r7, #64]	; 0x40
 800f074:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f076:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f078:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f07a:	e841 2300 	strex	r3, r2, [r1]
 800f07e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f082:	2b00      	cmp	r3, #0
 800f084:	d1e6      	bne.n	800f054 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	3308      	adds	r3, #8
 800f08c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f08e:	6a3b      	ldr	r3, [r7, #32]
 800f090:	e853 3f00 	ldrex	r3, [r3]
 800f094:	61fb      	str	r3, [r7, #28]
   return(result);
 800f096:	69fb      	ldr	r3, [r7, #28]
 800f098:	f023 0301 	bic.w	r3, r3, #1
 800f09c:	64bb      	str	r3, [r7, #72]	; 0x48
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	3308      	adds	r3, #8
 800f0a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f0a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f0a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f0ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f0ae:	e841 2300 	strex	r3, r2, [r1]
 800f0b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d1e5      	bne.n	800f086 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	2220      	movs	r2, #32
 800f0be:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f0ca:	2b01      	cmp	r3, #1
 800f0cc:	d12e      	bne.n	800f12c <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	e853 3f00 	ldrex	r3, [r3]
 800f0e0:	60bb      	str	r3, [r7, #8]
   return(result);
 800f0e2:	68bb      	ldr	r3, [r7, #8]
 800f0e4:	f023 0310 	bic.w	r3, r3, #16
 800f0e8:	647b      	str	r3, [r7, #68]	; 0x44
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	461a      	mov	r2, r3
 800f0f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0f2:	61bb      	str	r3, [r7, #24]
 800f0f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0f6:	6979      	ldr	r1, [r7, #20]
 800f0f8:	69ba      	ldr	r2, [r7, #24]
 800f0fa:	e841 2300 	strex	r3, r2, [r1]
 800f0fe:	613b      	str	r3, [r7, #16]
   return(result);
 800f100:	693b      	ldr	r3, [r7, #16]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d1e6      	bne.n	800f0d4 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	69db      	ldr	r3, [r3, #28]
 800f10c:	f003 0310 	and.w	r3, r3, #16
 800f110:	2b10      	cmp	r3, #16
 800f112:	d103      	bne.n	800f11c <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	2210      	movs	r2, #16
 800f11a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f122:	4619      	mov	r1, r3
 800f124:	6878      	ldr	r0, [r7, #4]
 800f126:	f7ff f813 	bl	800e150 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f12a:	e00d      	b.n	800f148 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f12c:	6878      	ldr	r0, [r7, #4]
 800f12e:	f7f4 f84d 	bl	80031cc <HAL_UART_RxCpltCallback>
}
 800f132:	e009      	b.n	800f148 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	8b1b      	ldrh	r3, [r3, #24]
 800f13a:	b29a      	uxth	r2, r3
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	f042 0208 	orr.w	r2, r2, #8
 800f144:	b292      	uxth	r2, r2
 800f146:	831a      	strh	r2, [r3, #24]
}
 800f148:	bf00      	nop
 800f14a:	3758      	adds	r7, #88	; 0x58
 800f14c:	46bd      	mov	sp, r7
 800f14e:	bd80      	pop	{r7, pc}

0800f150 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f150:	b480      	push	{r7}
 800f152:	b083      	sub	sp, #12
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f158:	bf00      	nop
 800f15a:	370c      	adds	r7, #12
 800f15c:	46bd      	mov	sp, r7
 800f15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f162:	4770      	bx	lr

0800f164 <__NVIC_SetPriority>:
{
 800f164:	b480      	push	{r7}
 800f166:	b083      	sub	sp, #12
 800f168:	af00      	add	r7, sp, #0
 800f16a:	4603      	mov	r3, r0
 800f16c:	6039      	str	r1, [r7, #0]
 800f16e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f174:	2b00      	cmp	r3, #0
 800f176:	db0a      	blt.n	800f18e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f178:	683b      	ldr	r3, [r7, #0]
 800f17a:	b2da      	uxtb	r2, r3
 800f17c:	490c      	ldr	r1, [pc, #48]	; (800f1b0 <__NVIC_SetPriority+0x4c>)
 800f17e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f182:	0112      	lsls	r2, r2, #4
 800f184:	b2d2      	uxtb	r2, r2
 800f186:	440b      	add	r3, r1
 800f188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800f18c:	e00a      	b.n	800f1a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	b2da      	uxtb	r2, r3
 800f192:	4908      	ldr	r1, [pc, #32]	; (800f1b4 <__NVIC_SetPriority+0x50>)
 800f194:	79fb      	ldrb	r3, [r7, #7]
 800f196:	f003 030f 	and.w	r3, r3, #15
 800f19a:	3b04      	subs	r3, #4
 800f19c:	0112      	lsls	r2, r2, #4
 800f19e:	b2d2      	uxtb	r2, r2
 800f1a0:	440b      	add	r3, r1
 800f1a2:	761a      	strb	r2, [r3, #24]
}
 800f1a4:	bf00      	nop
 800f1a6:	370c      	adds	r7, #12
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ae:	4770      	bx	lr
 800f1b0:	e000e100 	.word	0xe000e100
 800f1b4:	e000ed00 	.word	0xe000ed00

0800f1b8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800f1bc:	4b05      	ldr	r3, [pc, #20]	; (800f1d4 <SysTick_Handler+0x1c>)
 800f1be:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800f1c0:	f002 fb1c 	bl	80117fc <xTaskGetSchedulerState>
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	2b01      	cmp	r3, #1
 800f1c8:	d001      	beq.n	800f1ce <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800f1ca:	f003 fa05 	bl	80125d8 <xPortSysTickHandler>
  }
}
 800f1ce:	bf00      	nop
 800f1d0:	bd80      	pop	{r7, pc}
 800f1d2:	bf00      	nop
 800f1d4:	e000e010 	.word	0xe000e010

0800f1d8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800f1dc:	2100      	movs	r1, #0
 800f1de:	f06f 0004 	mvn.w	r0, #4
 800f1e2:	f7ff ffbf 	bl	800f164 <__NVIC_SetPriority>
#endif
}
 800f1e6:	bf00      	nop
 800f1e8:	bd80      	pop	{r7, pc}
	...

0800f1ec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b082      	sub	sp, #8
 800f1f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f1f2:	f3ef 8305 	mrs	r3, IPSR
 800f1f6:	603b      	str	r3, [r7, #0]
  return(result);
 800f1f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d003      	beq.n	800f206 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800f1fe:	f06f 0305 	mvn.w	r3, #5
 800f202:	607b      	str	r3, [r7, #4]
 800f204:	e00f      	b.n	800f226 <osKernelInitialize+0x3a>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f206:	4b0a      	ldr	r3, [pc, #40]	; (800f230 <osKernelInitialize+0x44>)
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d108      	bne.n	800f220 <osKernelInitialize+0x34>
      #if defined(USE_TRACE_EVENT_RECORDER)
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
 800f20e:	4809      	ldr	r0, [pc, #36]	; (800f234 <osKernelInitialize+0x48>)
 800f210:	f003 fbd2 	bl	80129b8 <vPortDefineHeapRegions>
      #endif
      KernelState = osKernelReady;
 800f214:	4b06      	ldr	r3, [pc, #24]	; (800f230 <osKernelInitialize+0x44>)
 800f216:	2201      	movs	r2, #1
 800f218:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f21a:	2300      	movs	r3, #0
 800f21c:	607b      	str	r3, [r7, #4]
 800f21e:	e002      	b.n	800f226 <osKernelInitialize+0x3a>
    } else {
      stat = osError;
 800f220:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f224:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f226:	687b      	ldr	r3, [r7, #4]
}
 800f228:	4618      	mov	r0, r3
 800f22a:	3708      	adds	r7, #8
 800f22c:	46bd      	mov	sp, r7
 800f22e:	bd80      	pop	{r7, pc}
 800f230:	200034c8 	.word	0x200034c8
 800f234:	2000016c 	.word	0x2000016c

0800f238 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f238:	b580      	push	{r7, lr}
 800f23a:	b082      	sub	sp, #8
 800f23c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f23e:	f3ef 8305 	mrs	r3, IPSR
 800f242:	603b      	str	r3, [r7, #0]
  return(result);
 800f244:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f246:	2b00      	cmp	r3, #0
 800f248:	d003      	beq.n	800f252 <osKernelStart+0x1a>
    stat = osErrorISR;
 800f24a:	f06f 0305 	mvn.w	r3, #5
 800f24e:	607b      	str	r3, [r7, #4]
 800f250:	e010      	b.n	800f274 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f252:	4b0b      	ldr	r3, [pc, #44]	; (800f280 <osKernelStart+0x48>)
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	2b01      	cmp	r3, #1
 800f258:	d109      	bne.n	800f26e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f25a:	f7ff ffbd 	bl	800f1d8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f25e:	4b08      	ldr	r3, [pc, #32]	; (800f280 <osKernelStart+0x48>)
 800f260:	2202      	movs	r2, #2
 800f262:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f264:	f001 fe6e 	bl	8010f44 <vTaskStartScheduler>
      stat = osOK;
 800f268:	2300      	movs	r3, #0
 800f26a:	607b      	str	r3, [r7, #4]
 800f26c:	e002      	b.n	800f274 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800f26e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f272:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f274:	687b      	ldr	r3, [r7, #4]
}
 800f276:	4618      	mov	r0, r3
 800f278:	3708      	adds	r7, #8
 800f27a:	46bd      	mov	sp, r7
 800f27c:	bd80      	pop	{r7, pc}
 800f27e:	bf00      	nop
 800f280:	200034c8 	.word	0x200034c8

0800f284 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f284:	b580      	push	{r7, lr}
 800f286:	b08e      	sub	sp, #56	; 0x38
 800f288:	af04      	add	r7, sp, #16
 800f28a:	60f8      	str	r0, [r7, #12]
 800f28c:	60b9      	str	r1, [r7, #8]
 800f28e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f290:	2300      	movs	r3, #0
 800f292:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f294:	f3ef 8305 	mrs	r3, IPSR
 800f298:	617b      	str	r3, [r7, #20]
  return(result);
 800f29a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d17e      	bne.n	800f39e <osThreadNew+0x11a>
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d07b      	beq.n	800f39e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800f2a6:	2380      	movs	r3, #128	; 0x80
 800f2a8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800f2aa:	2318      	movs	r3, #24
 800f2ac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800f2b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f2b6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d045      	beq.n	800f34a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d002      	beq.n	800f2cc <osThreadNew+0x48>
        name = attr->name;
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	699b      	ldr	r3, [r3, #24]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d002      	beq.n	800f2da <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	699b      	ldr	r3, [r3, #24]
 800f2d8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f2da:	69fb      	ldr	r3, [r7, #28]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d008      	beq.n	800f2f2 <osThreadNew+0x6e>
 800f2e0:	69fb      	ldr	r3, [r7, #28]
 800f2e2:	2b38      	cmp	r3, #56	; 0x38
 800f2e4:	d805      	bhi.n	800f2f2 <osThreadNew+0x6e>
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	685b      	ldr	r3, [r3, #4]
 800f2ea:	f003 0301 	and.w	r3, r3, #1
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d001      	beq.n	800f2f6 <osThreadNew+0x72>
        return (NULL);
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	e054      	b.n	800f3a0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	695b      	ldr	r3, [r3, #20]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d003      	beq.n	800f306 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	695b      	ldr	r3, [r3, #20]
 800f302:	089b      	lsrs	r3, r3, #2
 800f304:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	689b      	ldr	r3, [r3, #8]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d00e      	beq.n	800f32c <osThreadNew+0xa8>
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	68db      	ldr	r3, [r3, #12]
 800f312:	2bbb      	cmp	r3, #187	; 0xbb
 800f314:	d90a      	bls.n	800f32c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d006      	beq.n	800f32c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	695b      	ldr	r3, [r3, #20]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d002      	beq.n	800f32c <osThreadNew+0xa8>
        mem = 1;
 800f326:	2301      	movs	r3, #1
 800f328:	61bb      	str	r3, [r7, #24]
 800f32a:	e010      	b.n	800f34e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	689b      	ldr	r3, [r3, #8]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d10c      	bne.n	800f34e <osThreadNew+0xca>
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	68db      	ldr	r3, [r3, #12]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d108      	bne.n	800f34e <osThreadNew+0xca>
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	691b      	ldr	r3, [r3, #16]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d104      	bne.n	800f34e <osThreadNew+0xca>
          mem = 0;
 800f344:	2300      	movs	r3, #0
 800f346:	61bb      	str	r3, [r7, #24]
 800f348:	e001      	b.n	800f34e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800f34a:	2300      	movs	r3, #0
 800f34c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f34e:	69bb      	ldr	r3, [r7, #24]
 800f350:	2b01      	cmp	r3, #1
 800f352:	d110      	bne.n	800f376 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800f358:	687a      	ldr	r2, [r7, #4]
 800f35a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f35c:	9202      	str	r2, [sp, #8]
 800f35e:	9301      	str	r3, [sp, #4]
 800f360:	69fb      	ldr	r3, [r7, #28]
 800f362:	9300      	str	r3, [sp, #0]
 800f364:	68bb      	ldr	r3, [r7, #8]
 800f366:	6a3a      	ldr	r2, [r7, #32]
 800f368:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f36a:	68f8      	ldr	r0, [r7, #12]
 800f36c:	f001 fbc0 	bl	8010af0 <xTaskCreateStatic>
 800f370:	4603      	mov	r3, r0
 800f372:	613b      	str	r3, [r7, #16]
 800f374:	e013      	b.n	800f39e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800f376:	69bb      	ldr	r3, [r7, #24]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d110      	bne.n	800f39e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f37c:	6a3b      	ldr	r3, [r7, #32]
 800f37e:	b29a      	uxth	r2, r3
 800f380:	f107 0310 	add.w	r3, r7, #16
 800f384:	9301      	str	r3, [sp, #4]
 800f386:	69fb      	ldr	r3, [r7, #28]
 800f388:	9300      	str	r3, [sp, #0]
 800f38a:	68bb      	ldr	r3, [r7, #8]
 800f38c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f38e:	68f8      	ldr	r0, [r7, #12]
 800f390:	f001 fc0b 	bl	8010baa <xTaskCreate>
 800f394:	4603      	mov	r3, r0
 800f396:	2b01      	cmp	r3, #1
 800f398:	d001      	beq.n	800f39e <osThreadNew+0x11a>
            hTask = NULL;
 800f39a:	2300      	movs	r3, #0
 800f39c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f39e:	693b      	ldr	r3, [r7, #16]
}
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	3728      	adds	r7, #40	; 0x28
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	bd80      	pop	{r7, pc}

0800f3a8 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b08a      	sub	sp, #40	; 0x28
 800f3ac:	af02      	add	r7, sp, #8
 800f3ae:	60f8      	str	r0, [r7, #12]
 800f3b0:	60b9      	str	r1, [r7, #8]
 800f3b2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f3b8:	f3ef 8305 	mrs	r3, IPSR
 800f3bc:	613b      	str	r3, [r7, #16]
  return(result);
 800f3be:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d175      	bne.n	800f4b0 <osSemaphoreNew+0x108>
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d072      	beq.n	800f4b0 <osSemaphoreNew+0x108>
 800f3ca:	68ba      	ldr	r2, [r7, #8]
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	429a      	cmp	r2, r3
 800f3d0:	d86e      	bhi.n	800f4b0 <osSemaphoreNew+0x108>
    mem = -1;
 800f3d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f3d6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d015      	beq.n	800f40a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	689b      	ldr	r3, [r3, #8]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d006      	beq.n	800f3f4 <osSemaphoreNew+0x4c>
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	68db      	ldr	r3, [r3, #12]
 800f3ea:	2b4f      	cmp	r3, #79	; 0x4f
 800f3ec:	d902      	bls.n	800f3f4 <osSemaphoreNew+0x4c>
        mem = 1;
 800f3ee:	2301      	movs	r3, #1
 800f3f0:	61bb      	str	r3, [r7, #24]
 800f3f2:	e00c      	b.n	800f40e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	689b      	ldr	r3, [r3, #8]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d108      	bne.n	800f40e <osSemaphoreNew+0x66>
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	68db      	ldr	r3, [r3, #12]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d104      	bne.n	800f40e <osSemaphoreNew+0x66>
          mem = 0;
 800f404:	2300      	movs	r3, #0
 800f406:	61bb      	str	r3, [r7, #24]
 800f408:	e001      	b.n	800f40e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800f40a:	2300      	movs	r3, #0
 800f40c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800f40e:	69bb      	ldr	r3, [r7, #24]
 800f410:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f414:	d04c      	beq.n	800f4b0 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	2b01      	cmp	r3, #1
 800f41a:	d128      	bne.n	800f46e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800f41c:	69bb      	ldr	r3, [r7, #24]
 800f41e:	2b01      	cmp	r3, #1
 800f420:	d10a      	bne.n	800f438 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	689b      	ldr	r3, [r3, #8]
 800f426:	2203      	movs	r2, #3
 800f428:	9200      	str	r2, [sp, #0]
 800f42a:	2200      	movs	r2, #0
 800f42c:	2100      	movs	r1, #0
 800f42e:	2001      	movs	r0, #1
 800f430:	f000 fb7c 	bl	800fb2c <xQueueGenericCreateStatic>
 800f434:	61f8      	str	r0, [r7, #28]
 800f436:	e005      	b.n	800f444 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800f438:	2203      	movs	r2, #3
 800f43a:	2100      	movs	r1, #0
 800f43c:	2001      	movs	r0, #1
 800f43e:	f000 fbed 	bl	800fc1c <xQueueGenericCreate>
 800f442:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800f444:	69fb      	ldr	r3, [r7, #28]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d022      	beq.n	800f490 <osSemaphoreNew+0xe8>
 800f44a:	68bb      	ldr	r3, [r7, #8]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d01f      	beq.n	800f490 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f450:	2300      	movs	r3, #0
 800f452:	2200      	movs	r2, #0
 800f454:	2100      	movs	r1, #0
 800f456:	69f8      	ldr	r0, [r7, #28]
 800f458:	f000 fca8 	bl	800fdac <xQueueGenericSend>
 800f45c:	4603      	mov	r3, r0
 800f45e:	2b01      	cmp	r3, #1
 800f460:	d016      	beq.n	800f490 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800f462:	69f8      	ldr	r0, [r7, #28]
 800f464:	f001 f970 	bl	8010748 <vQueueDelete>
            hSemaphore = NULL;
 800f468:	2300      	movs	r3, #0
 800f46a:	61fb      	str	r3, [r7, #28]
 800f46c:	e010      	b.n	800f490 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800f46e:	69bb      	ldr	r3, [r7, #24]
 800f470:	2b01      	cmp	r3, #1
 800f472:	d108      	bne.n	800f486 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	689b      	ldr	r3, [r3, #8]
 800f478:	461a      	mov	r2, r3
 800f47a:	68b9      	ldr	r1, [r7, #8]
 800f47c:	68f8      	ldr	r0, [r7, #12]
 800f47e:	f000 fc2a 	bl	800fcd6 <xQueueCreateCountingSemaphoreStatic>
 800f482:	61f8      	str	r0, [r7, #28]
 800f484:	e004      	b.n	800f490 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800f486:	68b9      	ldr	r1, [r7, #8]
 800f488:	68f8      	ldr	r0, [r7, #12]
 800f48a:	f000 fc5b 	bl	800fd44 <xQueueCreateCountingSemaphore>
 800f48e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800f490:	69fb      	ldr	r3, [r7, #28]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d00c      	beq.n	800f4b0 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d003      	beq.n	800f4a4 <osSemaphoreNew+0xfc>
          name = attr->name;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	617b      	str	r3, [r7, #20]
 800f4a2:	e001      	b.n	800f4a8 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800f4a8:	6979      	ldr	r1, [r7, #20]
 800f4aa:	69f8      	ldr	r0, [r7, #28]
 800f4ac:	f001 fa98 	bl	80109e0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800f4b0:	69fb      	ldr	r3, [r7, #28]
}
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	3720      	adds	r7, #32
 800f4b6:	46bd      	mov	sp, r7
 800f4b8:	bd80      	pop	{r7, pc}
	...

0800f4bc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b086      	sub	sp, #24
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	6078      	str	r0, [r7, #4]
 800f4c4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800f4ce:	693b      	ldr	r3, [r7, #16]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d103      	bne.n	800f4dc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800f4d4:	f06f 0303 	mvn.w	r3, #3
 800f4d8:	617b      	str	r3, [r7, #20]
 800f4da:	e039      	b.n	800f550 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f4dc:	f3ef 8305 	mrs	r3, IPSR
 800f4e0:	60fb      	str	r3, [r7, #12]
  return(result);
 800f4e2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d022      	beq.n	800f52e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d003      	beq.n	800f4f6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800f4ee:	f06f 0303 	mvn.w	r3, #3
 800f4f2:	617b      	str	r3, [r7, #20]
 800f4f4:	e02c      	b.n	800f550 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800f4fa:	f107 0308 	add.w	r3, r7, #8
 800f4fe:	461a      	mov	r2, r3
 800f500:	2100      	movs	r1, #0
 800f502:	6938      	ldr	r0, [r7, #16]
 800f504:	f001 f864 	bl	80105d0 <xQueueReceiveFromISR>
 800f508:	4603      	mov	r3, r0
 800f50a:	2b01      	cmp	r3, #1
 800f50c:	d003      	beq.n	800f516 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800f50e:	f06f 0302 	mvn.w	r3, #2
 800f512:	617b      	str	r3, [r7, #20]
 800f514:	e01c      	b.n	800f550 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d019      	beq.n	800f550 <osSemaphoreAcquire+0x94>
 800f51c:	4b0f      	ldr	r3, [pc, #60]	; (800f55c <osSemaphoreAcquire+0xa0>)
 800f51e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f522:	601a      	str	r2, [r3, #0]
 800f524:	f3bf 8f4f 	dsb	sy
 800f528:	f3bf 8f6f 	isb	sy
 800f52c:	e010      	b.n	800f550 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800f52e:	6839      	ldr	r1, [r7, #0]
 800f530:	6938      	ldr	r0, [r7, #16]
 800f532:	f000 ff41 	bl	80103b8 <xQueueSemaphoreTake>
 800f536:	4603      	mov	r3, r0
 800f538:	2b01      	cmp	r3, #1
 800f53a:	d009      	beq.n	800f550 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800f53c:	683b      	ldr	r3, [r7, #0]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d003      	beq.n	800f54a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800f542:	f06f 0301 	mvn.w	r3, #1
 800f546:	617b      	str	r3, [r7, #20]
 800f548:	e002      	b.n	800f550 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800f54a:	f06f 0302 	mvn.w	r3, #2
 800f54e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800f550:	697b      	ldr	r3, [r7, #20]
}
 800f552:	4618      	mov	r0, r3
 800f554:	3718      	adds	r7, #24
 800f556:	46bd      	mov	sp, r7
 800f558:	bd80      	pop	{r7, pc}
 800f55a:	bf00      	nop
 800f55c:	e000ed04 	.word	0xe000ed04

0800f560 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800f560:	b580      	push	{r7, lr}
 800f562:	b086      	sub	sp, #24
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f56c:	2300      	movs	r3, #0
 800f56e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800f570:	693b      	ldr	r3, [r7, #16]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d103      	bne.n	800f57e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800f576:	f06f 0303 	mvn.w	r3, #3
 800f57a:	617b      	str	r3, [r7, #20]
 800f57c:	e02c      	b.n	800f5d8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f57e:	f3ef 8305 	mrs	r3, IPSR
 800f582:	60fb      	str	r3, [r7, #12]
  return(result);
 800f584:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800f586:	2b00      	cmp	r3, #0
 800f588:	d01a      	beq.n	800f5c0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800f58a:	2300      	movs	r3, #0
 800f58c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f58e:	f107 0308 	add.w	r3, r7, #8
 800f592:	4619      	mov	r1, r3
 800f594:	6938      	ldr	r0, [r7, #16]
 800f596:	f000 fda2 	bl	80100de <xQueueGiveFromISR>
 800f59a:	4603      	mov	r3, r0
 800f59c:	2b01      	cmp	r3, #1
 800f59e:	d003      	beq.n	800f5a8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800f5a0:	f06f 0302 	mvn.w	r3, #2
 800f5a4:	617b      	str	r3, [r7, #20]
 800f5a6:	e017      	b.n	800f5d8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800f5a8:	68bb      	ldr	r3, [r7, #8]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d014      	beq.n	800f5d8 <osSemaphoreRelease+0x78>
 800f5ae:	4b0d      	ldr	r3, [pc, #52]	; (800f5e4 <osSemaphoreRelease+0x84>)
 800f5b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5b4:	601a      	str	r2, [r3, #0]
 800f5b6:	f3bf 8f4f 	dsb	sy
 800f5ba:	f3bf 8f6f 	isb	sy
 800f5be:	e00b      	b.n	800f5d8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	2100      	movs	r1, #0
 800f5c6:	6938      	ldr	r0, [r7, #16]
 800f5c8:	f000 fbf0 	bl	800fdac <xQueueGenericSend>
 800f5cc:	4603      	mov	r3, r0
 800f5ce:	2b01      	cmp	r3, #1
 800f5d0:	d002      	beq.n	800f5d8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800f5d2:	f06f 0302 	mvn.w	r3, #2
 800f5d6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800f5d8:	697b      	ldr	r3, [r7, #20]
}
 800f5da:	4618      	mov	r0, r3
 800f5dc:	3718      	adds	r7, #24
 800f5de:	46bd      	mov	sp, r7
 800f5e0:	bd80      	pop	{r7, pc}
 800f5e2:	bf00      	nop
 800f5e4:	e000ed04 	.word	0xe000ed04

0800f5e8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	b08a      	sub	sp, #40	; 0x28
 800f5ec:	af02      	add	r7, sp, #8
 800f5ee:	60f8      	str	r0, [r7, #12]
 800f5f0:	60b9      	str	r1, [r7, #8]
 800f5f2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f5f8:	f3ef 8305 	mrs	r3, IPSR
 800f5fc:	613b      	str	r3, [r7, #16]
  return(result);
 800f5fe:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f600:	2b00      	cmp	r3, #0
 800f602:	d15f      	bne.n	800f6c4 <osMessageQueueNew+0xdc>
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d05c      	beq.n	800f6c4 <osMessageQueueNew+0xdc>
 800f60a:	68bb      	ldr	r3, [r7, #8]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d059      	beq.n	800f6c4 <osMessageQueueNew+0xdc>
    mem = -1;
 800f610:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f614:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d029      	beq.n	800f670 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	689b      	ldr	r3, [r3, #8]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d012      	beq.n	800f64a <osMessageQueueNew+0x62>
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	68db      	ldr	r3, [r3, #12]
 800f628:	2b4f      	cmp	r3, #79	; 0x4f
 800f62a:	d90e      	bls.n	800f64a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f630:	2b00      	cmp	r3, #0
 800f632:	d00a      	beq.n	800f64a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	695a      	ldr	r2, [r3, #20]
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	68b9      	ldr	r1, [r7, #8]
 800f63c:	fb01 f303 	mul.w	r3, r1, r3
 800f640:	429a      	cmp	r2, r3
 800f642:	d302      	bcc.n	800f64a <osMessageQueueNew+0x62>
        mem = 1;
 800f644:	2301      	movs	r3, #1
 800f646:	61bb      	str	r3, [r7, #24]
 800f648:	e014      	b.n	800f674 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	689b      	ldr	r3, [r3, #8]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d110      	bne.n	800f674 <osMessageQueueNew+0x8c>
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	68db      	ldr	r3, [r3, #12]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d10c      	bne.n	800f674 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d108      	bne.n	800f674 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	695b      	ldr	r3, [r3, #20]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d104      	bne.n	800f674 <osMessageQueueNew+0x8c>
          mem = 0;
 800f66a:	2300      	movs	r3, #0
 800f66c:	61bb      	str	r3, [r7, #24]
 800f66e:	e001      	b.n	800f674 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800f670:	2300      	movs	r3, #0
 800f672:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f674:	69bb      	ldr	r3, [r7, #24]
 800f676:	2b01      	cmp	r3, #1
 800f678:	d10b      	bne.n	800f692 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	691a      	ldr	r2, [r3, #16]
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	689b      	ldr	r3, [r3, #8]
 800f682:	2100      	movs	r1, #0
 800f684:	9100      	str	r1, [sp, #0]
 800f686:	68b9      	ldr	r1, [r7, #8]
 800f688:	68f8      	ldr	r0, [r7, #12]
 800f68a:	f000 fa4f 	bl	800fb2c <xQueueGenericCreateStatic>
 800f68e:	61f8      	str	r0, [r7, #28]
 800f690:	e008      	b.n	800f6a4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800f692:	69bb      	ldr	r3, [r7, #24]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d105      	bne.n	800f6a4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800f698:	2200      	movs	r2, #0
 800f69a:	68b9      	ldr	r1, [r7, #8]
 800f69c:	68f8      	ldr	r0, [r7, #12]
 800f69e:	f000 fabd 	bl	800fc1c <xQueueGenericCreate>
 800f6a2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800f6a4:	69fb      	ldr	r3, [r7, #28]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d00c      	beq.n	800f6c4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d003      	beq.n	800f6b8 <osMessageQueueNew+0xd0>
        name = attr->name;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	617b      	str	r3, [r7, #20]
 800f6b6:	e001      	b.n	800f6bc <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800f6bc:	6979      	ldr	r1, [r7, #20]
 800f6be:	69f8      	ldr	r0, [r7, #28]
 800f6c0:	f001 f98e 	bl	80109e0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800f6c4:	69fb      	ldr	r3, [r7, #28]
}
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	3720      	adds	r7, #32
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	bd80      	pop	{r7, pc}
	...

0800f6d0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b088      	sub	sp, #32
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	60f8      	str	r0, [r7, #12]
 800f6d8:	60b9      	str	r1, [r7, #8]
 800f6da:	603b      	str	r3, [r7, #0]
 800f6dc:	4613      	mov	r3, r2
 800f6de:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f6e8:	f3ef 8305 	mrs	r3, IPSR
 800f6ec:	617b      	str	r3, [r7, #20]
  return(result);
 800f6ee:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d028      	beq.n	800f746 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f6f4:	69bb      	ldr	r3, [r7, #24]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d005      	beq.n	800f706 <osMessageQueuePut+0x36>
 800f6fa:	68bb      	ldr	r3, [r7, #8]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d002      	beq.n	800f706 <osMessageQueuePut+0x36>
 800f700:	683b      	ldr	r3, [r7, #0]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d003      	beq.n	800f70e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800f706:	f06f 0303 	mvn.w	r3, #3
 800f70a:	61fb      	str	r3, [r7, #28]
 800f70c:	e038      	b.n	800f780 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800f70e:	2300      	movs	r3, #0
 800f710:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800f712:	f107 0210 	add.w	r2, r7, #16
 800f716:	2300      	movs	r3, #0
 800f718:	68b9      	ldr	r1, [r7, #8]
 800f71a:	69b8      	ldr	r0, [r7, #24]
 800f71c:	f000 fc44 	bl	800ffa8 <xQueueGenericSendFromISR>
 800f720:	4603      	mov	r3, r0
 800f722:	2b01      	cmp	r3, #1
 800f724:	d003      	beq.n	800f72e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800f726:	f06f 0302 	mvn.w	r3, #2
 800f72a:	61fb      	str	r3, [r7, #28]
 800f72c:	e028      	b.n	800f780 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800f72e:	693b      	ldr	r3, [r7, #16]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d025      	beq.n	800f780 <osMessageQueuePut+0xb0>
 800f734:	4b15      	ldr	r3, [pc, #84]	; (800f78c <osMessageQueuePut+0xbc>)
 800f736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f73a:	601a      	str	r2, [r3, #0]
 800f73c:	f3bf 8f4f 	dsb	sy
 800f740:	f3bf 8f6f 	isb	sy
 800f744:	e01c      	b.n	800f780 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f746:	69bb      	ldr	r3, [r7, #24]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d002      	beq.n	800f752 <osMessageQueuePut+0x82>
 800f74c:	68bb      	ldr	r3, [r7, #8]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d103      	bne.n	800f75a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800f752:	f06f 0303 	mvn.w	r3, #3
 800f756:	61fb      	str	r3, [r7, #28]
 800f758:	e012      	b.n	800f780 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f75a:	2300      	movs	r3, #0
 800f75c:	683a      	ldr	r2, [r7, #0]
 800f75e:	68b9      	ldr	r1, [r7, #8]
 800f760:	69b8      	ldr	r0, [r7, #24]
 800f762:	f000 fb23 	bl	800fdac <xQueueGenericSend>
 800f766:	4603      	mov	r3, r0
 800f768:	2b01      	cmp	r3, #1
 800f76a:	d009      	beq.n	800f780 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800f76c:	683b      	ldr	r3, [r7, #0]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d003      	beq.n	800f77a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800f772:	f06f 0301 	mvn.w	r3, #1
 800f776:	61fb      	str	r3, [r7, #28]
 800f778:	e002      	b.n	800f780 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800f77a:	f06f 0302 	mvn.w	r3, #2
 800f77e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800f780:	69fb      	ldr	r3, [r7, #28]
}
 800f782:	4618      	mov	r0, r3
 800f784:	3720      	adds	r7, #32
 800f786:	46bd      	mov	sp, r7
 800f788:	bd80      	pop	{r7, pc}
 800f78a:	bf00      	nop
 800f78c:	e000ed04 	.word	0xe000ed04

0800f790 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800f790:	b580      	push	{r7, lr}
 800f792:	b088      	sub	sp, #32
 800f794:	af00      	add	r7, sp, #0
 800f796:	60f8      	str	r0, [r7, #12]
 800f798:	60b9      	str	r1, [r7, #8]
 800f79a:	607a      	str	r2, [r7, #4]
 800f79c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f7a6:	f3ef 8305 	mrs	r3, IPSR
 800f7aa:	617b      	str	r3, [r7, #20]
  return(result);
 800f7ac:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d028      	beq.n	800f804 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f7b2:	69bb      	ldr	r3, [r7, #24]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d005      	beq.n	800f7c4 <osMessageQueueGet+0x34>
 800f7b8:	68bb      	ldr	r3, [r7, #8]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d002      	beq.n	800f7c4 <osMessageQueueGet+0x34>
 800f7be:	683b      	ldr	r3, [r7, #0]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d003      	beq.n	800f7cc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800f7c4:	f06f 0303 	mvn.w	r3, #3
 800f7c8:	61fb      	str	r3, [r7, #28]
 800f7ca:	e037      	b.n	800f83c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800f7d0:	f107 0310 	add.w	r3, r7, #16
 800f7d4:	461a      	mov	r2, r3
 800f7d6:	68b9      	ldr	r1, [r7, #8]
 800f7d8:	69b8      	ldr	r0, [r7, #24]
 800f7da:	f000 fef9 	bl	80105d0 <xQueueReceiveFromISR>
 800f7de:	4603      	mov	r3, r0
 800f7e0:	2b01      	cmp	r3, #1
 800f7e2:	d003      	beq.n	800f7ec <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800f7e4:	f06f 0302 	mvn.w	r3, #2
 800f7e8:	61fb      	str	r3, [r7, #28]
 800f7ea:	e027      	b.n	800f83c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800f7ec:	693b      	ldr	r3, [r7, #16]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d024      	beq.n	800f83c <osMessageQueueGet+0xac>
 800f7f2:	4b15      	ldr	r3, [pc, #84]	; (800f848 <osMessageQueueGet+0xb8>)
 800f7f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7f8:	601a      	str	r2, [r3, #0]
 800f7fa:	f3bf 8f4f 	dsb	sy
 800f7fe:	f3bf 8f6f 	isb	sy
 800f802:	e01b      	b.n	800f83c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f804:	69bb      	ldr	r3, [r7, #24]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d002      	beq.n	800f810 <osMessageQueueGet+0x80>
 800f80a:	68bb      	ldr	r3, [r7, #8]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d103      	bne.n	800f818 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800f810:	f06f 0303 	mvn.w	r3, #3
 800f814:	61fb      	str	r3, [r7, #28]
 800f816:	e011      	b.n	800f83c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f818:	683a      	ldr	r2, [r7, #0]
 800f81a:	68b9      	ldr	r1, [r7, #8]
 800f81c:	69b8      	ldr	r0, [r7, #24]
 800f81e:	f000 fceb 	bl	80101f8 <xQueueReceive>
 800f822:	4603      	mov	r3, r0
 800f824:	2b01      	cmp	r3, #1
 800f826:	d009      	beq.n	800f83c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800f828:	683b      	ldr	r3, [r7, #0]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d003      	beq.n	800f836 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800f82e:	f06f 0301 	mvn.w	r3, #1
 800f832:	61fb      	str	r3, [r7, #28]
 800f834:	e002      	b.n	800f83c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800f836:	f06f 0302 	mvn.w	r3, #2
 800f83a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800f83c:	69fb      	ldr	r3, [r7, #28]
}
 800f83e:	4618      	mov	r0, r3
 800f840:	3720      	adds	r7, #32
 800f842:	46bd      	mov	sp, r7
 800f844:	bd80      	pop	{r7, pc}
 800f846:	bf00      	nop
 800f848:	e000ed04 	.word	0xe000ed04

0800f84c <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b086      	sub	sp, #24
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800f858:	693b      	ldr	r3, [r7, #16]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d102      	bne.n	800f864 <osMessageQueueGetCount+0x18>
    count = 0U;
 800f85e:	2300      	movs	r3, #0
 800f860:	617b      	str	r3, [r7, #20]
 800f862:	e00e      	b.n	800f882 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f864:	f3ef 8305 	mrs	r3, IPSR
 800f868:	60fb      	str	r3, [r7, #12]
  return(result);
 800f86a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d004      	beq.n	800f87a <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800f870:	6938      	ldr	r0, [r7, #16]
 800f872:	f000 ff4b 	bl	801070c <uxQueueMessagesWaitingFromISR>
 800f876:	6178      	str	r0, [r7, #20]
 800f878:	e003      	b.n	800f882 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800f87a:	6938      	ldr	r0, [r7, #16]
 800f87c:	f000 ff28 	bl	80106d0 <uxQueueMessagesWaiting>
 800f880:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800f882:	697b      	ldr	r3, [r7, #20]
}
 800f884:	4618      	mov	r0, r3
 800f886:	3718      	adds	r7, #24
 800f888:	46bd      	mov	sp, r7
 800f88a:	bd80      	pop	{r7, pc}

0800f88c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f88c:	b480      	push	{r7}
 800f88e:	b085      	sub	sp, #20
 800f890:	af00      	add	r7, sp, #0
 800f892:	60f8      	str	r0, [r7, #12]
 800f894:	60b9      	str	r1, [r7, #8]
 800f896:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	4a07      	ldr	r2, [pc, #28]	; (800f8b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800f89c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f89e:	68bb      	ldr	r3, [r7, #8]
 800f8a0:	4a06      	ldr	r2, [pc, #24]	; (800f8bc <vApplicationGetIdleTaskMemory+0x30>)
 800f8a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	2280      	movs	r2, #128	; 0x80
 800f8a8:	601a      	str	r2, [r3, #0]
}
 800f8aa:	bf00      	nop
 800f8ac:	3714      	adds	r7, #20
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b4:	4770      	bx	lr
 800f8b6:	bf00      	nop
 800f8b8:	200074cc 	.word	0x200074cc
 800f8bc:	20007588 	.word	0x20007588

0800f8c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f8c0:	b480      	push	{r7}
 800f8c2:	b085      	sub	sp, #20
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	60f8      	str	r0, [r7, #12]
 800f8c8:	60b9      	str	r1, [r7, #8]
 800f8ca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	4a07      	ldr	r2, [pc, #28]	; (800f8ec <vApplicationGetTimerTaskMemory+0x2c>)
 800f8d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f8d2:	68bb      	ldr	r3, [r7, #8]
 800f8d4:	4a06      	ldr	r2, [pc, #24]	; (800f8f0 <vApplicationGetTimerTaskMemory+0x30>)
 800f8d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f8de:	601a      	str	r2, [r3, #0]
}
 800f8e0:	bf00      	nop
 800f8e2:	3714      	adds	r7, #20
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ea:	4770      	bx	lr
 800f8ec:	20007788 	.word	0x20007788
 800f8f0:	20007844 	.word	0x20007844

0800f8f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f8f4:	b480      	push	{r7}
 800f8f6:	b083      	sub	sp, #12
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	f103 0208 	add.w	r2, r3, #8
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f90c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	f103 0208 	add.w	r2, r3, #8
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	f103 0208 	add.w	r2, r3, #8
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	2200      	movs	r2, #0
 800f926:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f928:	bf00      	nop
 800f92a:	370c      	adds	r7, #12
 800f92c:	46bd      	mov	sp, r7
 800f92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f932:	4770      	bx	lr

0800f934 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f934:	b480      	push	{r7}
 800f936:	b083      	sub	sp, #12
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	2200      	movs	r2, #0
 800f940:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f942:	bf00      	nop
 800f944:	370c      	adds	r7, #12
 800f946:	46bd      	mov	sp, r7
 800f948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94c:	4770      	bx	lr

0800f94e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f94e:	b480      	push	{r7}
 800f950:	b085      	sub	sp, #20
 800f952:	af00      	add	r7, sp, #0
 800f954:	6078      	str	r0, [r7, #4]
 800f956:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	685b      	ldr	r3, [r3, #4]
 800f95c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f95e:	683b      	ldr	r3, [r7, #0]
 800f960:	68fa      	ldr	r2, [r7, #12]
 800f962:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	689a      	ldr	r2, [r3, #8]
 800f968:	683b      	ldr	r3, [r7, #0]
 800f96a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	689b      	ldr	r3, [r3, #8]
 800f970:	683a      	ldr	r2, [r7, #0]
 800f972:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	683a      	ldr	r2, [r7, #0]
 800f978:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f97a:	683b      	ldr	r3, [r7, #0]
 800f97c:	687a      	ldr	r2, [r7, #4]
 800f97e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	1c5a      	adds	r2, r3, #1
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	601a      	str	r2, [r3, #0]
}
 800f98a:	bf00      	nop
 800f98c:	3714      	adds	r7, #20
 800f98e:	46bd      	mov	sp, r7
 800f990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f994:	4770      	bx	lr

0800f996 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f996:	b480      	push	{r7}
 800f998:	b085      	sub	sp, #20
 800f99a:	af00      	add	r7, sp, #0
 800f99c:	6078      	str	r0, [r7, #4]
 800f99e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f9a0:	683b      	ldr	r3, [r7, #0]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f9a6:	68bb      	ldr	r3, [r7, #8]
 800f9a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f9ac:	d103      	bne.n	800f9b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	691b      	ldr	r3, [r3, #16]
 800f9b2:	60fb      	str	r3, [r7, #12]
 800f9b4:	e00c      	b.n	800f9d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	3308      	adds	r3, #8
 800f9ba:	60fb      	str	r3, [r7, #12]
 800f9bc:	e002      	b.n	800f9c4 <vListInsert+0x2e>
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	685b      	ldr	r3, [r3, #4]
 800f9c2:	60fb      	str	r3, [r7, #12]
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	685b      	ldr	r3, [r3, #4]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	68ba      	ldr	r2, [r7, #8]
 800f9cc:	429a      	cmp	r2, r3
 800f9ce:	d2f6      	bcs.n	800f9be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	685a      	ldr	r2, [r3, #4]
 800f9d4:	683b      	ldr	r3, [r7, #0]
 800f9d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f9d8:	683b      	ldr	r3, [r7, #0]
 800f9da:	685b      	ldr	r3, [r3, #4]
 800f9dc:	683a      	ldr	r2, [r7, #0]
 800f9de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f9e0:	683b      	ldr	r3, [r7, #0]
 800f9e2:	68fa      	ldr	r2, [r7, #12]
 800f9e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	683a      	ldr	r2, [r7, #0]
 800f9ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f9ec:	683b      	ldr	r3, [r7, #0]
 800f9ee:	687a      	ldr	r2, [r7, #4]
 800f9f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	1c5a      	adds	r2, r3, #1
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	601a      	str	r2, [r3, #0]
}
 800f9fc:	bf00      	nop
 800f9fe:	3714      	adds	r7, #20
 800fa00:	46bd      	mov	sp, r7
 800fa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa06:	4770      	bx	lr

0800fa08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800fa08:	b480      	push	{r7}
 800fa0a:	b085      	sub	sp, #20
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	691b      	ldr	r3, [r3, #16]
 800fa14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	685b      	ldr	r3, [r3, #4]
 800fa1a:	687a      	ldr	r2, [r7, #4]
 800fa1c:	6892      	ldr	r2, [r2, #8]
 800fa1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	689b      	ldr	r3, [r3, #8]
 800fa24:	687a      	ldr	r2, [r7, #4]
 800fa26:	6852      	ldr	r2, [r2, #4]
 800fa28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	685b      	ldr	r3, [r3, #4]
 800fa2e:	687a      	ldr	r2, [r7, #4]
 800fa30:	429a      	cmp	r2, r3
 800fa32:	d103      	bne.n	800fa3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	689a      	ldr	r2, [r3, #8]
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	2200      	movs	r2, #0
 800fa40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	1e5a      	subs	r2, r3, #1
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	681b      	ldr	r3, [r3, #0]
}
 800fa50:	4618      	mov	r0, r3
 800fa52:	3714      	adds	r7, #20
 800fa54:	46bd      	mov	sp, r7
 800fa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5a:	4770      	bx	lr

0800fa5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800fa5c:	b580      	push	{r7, lr}
 800fa5e:	b084      	sub	sp, #16
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
 800fa64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d10a      	bne.n	800fa86 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fa70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa74:	f383 8811 	msr	BASEPRI, r3
 800fa78:	f3bf 8f6f 	isb	sy
 800fa7c:	f3bf 8f4f 	dsb	sy
 800fa80:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800fa82:	bf00      	nop
 800fa84:	e7fe      	b.n	800fa84 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800fa86:	f002 fd15 	bl	80124b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	681a      	ldr	r2, [r3, #0]
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa92:	68f9      	ldr	r1, [r7, #12]
 800fa94:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fa96:	fb01 f303 	mul.w	r3, r1, r3
 800fa9a:	441a      	add	r2, r3
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	2200      	movs	r2, #0
 800faa4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	681a      	ldr	r2, [r3, #0]
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	681a      	ldr	r2, [r3, #0]
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fab6:	3b01      	subs	r3, #1
 800fab8:	68f9      	ldr	r1, [r7, #12]
 800faba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fabc:	fb01 f303 	mul.w	r3, r1, r3
 800fac0:	441a      	add	r2, r3
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	22ff      	movs	r2, #255	; 0xff
 800faca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	22ff      	movs	r2, #255	; 0xff
 800fad2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800fad6:	683b      	ldr	r3, [r7, #0]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d114      	bne.n	800fb06 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	691b      	ldr	r3, [r3, #16]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d01a      	beq.n	800fb1a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	3310      	adds	r3, #16
 800fae8:	4618      	mov	r0, r3
 800faea:	f001 fcc5 	bl	8011478 <xTaskRemoveFromEventList>
 800faee:	4603      	mov	r3, r0
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d012      	beq.n	800fb1a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800faf4:	4b0c      	ldr	r3, [pc, #48]	; (800fb28 <xQueueGenericReset+0xcc>)
 800faf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fafa:	601a      	str	r2, [r3, #0]
 800fafc:	f3bf 8f4f 	dsb	sy
 800fb00:	f3bf 8f6f 	isb	sy
 800fb04:	e009      	b.n	800fb1a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	3310      	adds	r3, #16
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	f7ff fef2 	bl	800f8f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	3324      	adds	r3, #36	; 0x24
 800fb14:	4618      	mov	r0, r3
 800fb16:	f7ff feed 	bl	800f8f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800fb1a:	f002 fcfb 	bl	8012514 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800fb1e:	2301      	movs	r3, #1
}
 800fb20:	4618      	mov	r0, r3
 800fb22:	3710      	adds	r7, #16
 800fb24:	46bd      	mov	sp, r7
 800fb26:	bd80      	pop	{r7, pc}
 800fb28:	e000ed04 	.word	0xe000ed04

0800fb2c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b08e      	sub	sp, #56	; 0x38
 800fb30:	af02      	add	r7, sp, #8
 800fb32:	60f8      	str	r0, [r7, #12]
 800fb34:	60b9      	str	r1, [r7, #8]
 800fb36:	607a      	str	r2, [r7, #4]
 800fb38:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d10a      	bne.n	800fb56 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800fb40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb44:	f383 8811 	msr	BASEPRI, r3
 800fb48:	f3bf 8f6f 	isb	sy
 800fb4c:	f3bf 8f4f 	dsb	sy
 800fb50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fb52:	bf00      	nop
 800fb54:	e7fe      	b.n	800fb54 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800fb56:	683b      	ldr	r3, [r7, #0]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d10a      	bne.n	800fb72 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800fb5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb60:	f383 8811 	msr	BASEPRI, r3
 800fb64:	f3bf 8f6f 	isb	sy
 800fb68:	f3bf 8f4f 	dsb	sy
 800fb6c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fb6e:	bf00      	nop
 800fb70:	e7fe      	b.n	800fb70 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d002      	beq.n	800fb7e <xQueueGenericCreateStatic+0x52>
 800fb78:	68bb      	ldr	r3, [r7, #8]
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d001      	beq.n	800fb82 <xQueueGenericCreateStatic+0x56>
 800fb7e:	2301      	movs	r3, #1
 800fb80:	e000      	b.n	800fb84 <xQueueGenericCreateStatic+0x58>
 800fb82:	2300      	movs	r3, #0
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d10a      	bne.n	800fb9e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800fb88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb8c:	f383 8811 	msr	BASEPRI, r3
 800fb90:	f3bf 8f6f 	isb	sy
 800fb94:	f3bf 8f4f 	dsb	sy
 800fb98:	623b      	str	r3, [r7, #32]
}
 800fb9a:	bf00      	nop
 800fb9c:	e7fe      	b.n	800fb9c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d102      	bne.n	800fbaa <xQueueGenericCreateStatic+0x7e>
 800fba4:	68bb      	ldr	r3, [r7, #8]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d101      	bne.n	800fbae <xQueueGenericCreateStatic+0x82>
 800fbaa:	2301      	movs	r3, #1
 800fbac:	e000      	b.n	800fbb0 <xQueueGenericCreateStatic+0x84>
 800fbae:	2300      	movs	r3, #0
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d10a      	bne.n	800fbca <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800fbb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbb8:	f383 8811 	msr	BASEPRI, r3
 800fbbc:	f3bf 8f6f 	isb	sy
 800fbc0:	f3bf 8f4f 	dsb	sy
 800fbc4:	61fb      	str	r3, [r7, #28]
}
 800fbc6:	bf00      	nop
 800fbc8:	e7fe      	b.n	800fbc8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800fbca:	2350      	movs	r3, #80	; 0x50
 800fbcc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800fbce:	697b      	ldr	r3, [r7, #20]
 800fbd0:	2b50      	cmp	r3, #80	; 0x50
 800fbd2:	d00a      	beq.n	800fbea <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800fbd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbd8:	f383 8811 	msr	BASEPRI, r3
 800fbdc:	f3bf 8f6f 	isb	sy
 800fbe0:	f3bf 8f4f 	dsb	sy
 800fbe4:	61bb      	str	r3, [r7, #24]
}
 800fbe6:	bf00      	nop
 800fbe8:	e7fe      	b.n	800fbe8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800fbea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fbec:	683b      	ldr	r3, [r7, #0]
 800fbee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800fbf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d00d      	beq.n	800fc12 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800fbf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbf8:	2201      	movs	r2, #1
 800fbfa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fbfe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800fc02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc04:	9300      	str	r3, [sp, #0]
 800fc06:	4613      	mov	r3, r2
 800fc08:	687a      	ldr	r2, [r7, #4]
 800fc0a:	68b9      	ldr	r1, [r7, #8]
 800fc0c:	68f8      	ldr	r0, [r7, #12]
 800fc0e:	f000 f83f 	bl	800fc90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fc12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800fc14:	4618      	mov	r0, r3
 800fc16:	3730      	adds	r7, #48	; 0x30
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	bd80      	pop	{r7, pc}

0800fc1c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b08a      	sub	sp, #40	; 0x28
 800fc20:	af02      	add	r7, sp, #8
 800fc22:	60f8      	str	r0, [r7, #12]
 800fc24:	60b9      	str	r1, [r7, #8]
 800fc26:	4613      	mov	r3, r2
 800fc28:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d10a      	bne.n	800fc46 <xQueueGenericCreate+0x2a>
	__asm volatile
 800fc30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc34:	f383 8811 	msr	BASEPRI, r3
 800fc38:	f3bf 8f6f 	isb	sy
 800fc3c:	f3bf 8f4f 	dsb	sy
 800fc40:	613b      	str	r3, [r7, #16]
}
 800fc42:	bf00      	nop
 800fc44:	e7fe      	b.n	800fc44 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	68ba      	ldr	r2, [r7, #8]
 800fc4a:	fb02 f303 	mul.w	r3, r2, r3
 800fc4e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800fc50:	69fb      	ldr	r3, [r7, #28]
 800fc52:	3350      	adds	r3, #80	; 0x50
 800fc54:	4618      	mov	r0, r3
 800fc56:	f002 fd4f 	bl	80126f8 <pvPortMalloc>
 800fc5a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800fc5c:	69bb      	ldr	r3, [r7, #24]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d011      	beq.n	800fc86 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800fc62:	69bb      	ldr	r3, [r7, #24]
 800fc64:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fc66:	697b      	ldr	r3, [r7, #20]
 800fc68:	3350      	adds	r3, #80	; 0x50
 800fc6a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800fc6c:	69bb      	ldr	r3, [r7, #24]
 800fc6e:	2200      	movs	r2, #0
 800fc70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fc74:	79fa      	ldrb	r2, [r7, #7]
 800fc76:	69bb      	ldr	r3, [r7, #24]
 800fc78:	9300      	str	r3, [sp, #0]
 800fc7a:	4613      	mov	r3, r2
 800fc7c:	697a      	ldr	r2, [r7, #20]
 800fc7e:	68b9      	ldr	r1, [r7, #8]
 800fc80:	68f8      	ldr	r0, [r7, #12]
 800fc82:	f000 f805 	bl	800fc90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fc86:	69bb      	ldr	r3, [r7, #24]
	}
 800fc88:	4618      	mov	r0, r3
 800fc8a:	3720      	adds	r7, #32
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	bd80      	pop	{r7, pc}

0800fc90 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b084      	sub	sp, #16
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	60f8      	str	r0, [r7, #12]
 800fc98:	60b9      	str	r1, [r7, #8]
 800fc9a:	607a      	str	r2, [r7, #4]
 800fc9c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800fc9e:	68bb      	ldr	r3, [r7, #8]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d103      	bne.n	800fcac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fca4:	69bb      	ldr	r3, [r7, #24]
 800fca6:	69ba      	ldr	r2, [r7, #24]
 800fca8:	601a      	str	r2, [r3, #0]
 800fcaa:	e002      	b.n	800fcb2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fcac:	69bb      	ldr	r3, [r7, #24]
 800fcae:	687a      	ldr	r2, [r7, #4]
 800fcb0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800fcb2:	69bb      	ldr	r3, [r7, #24]
 800fcb4:	68fa      	ldr	r2, [r7, #12]
 800fcb6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800fcb8:	69bb      	ldr	r3, [r7, #24]
 800fcba:	68ba      	ldr	r2, [r7, #8]
 800fcbc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fcbe:	2101      	movs	r1, #1
 800fcc0:	69b8      	ldr	r0, [r7, #24]
 800fcc2:	f7ff fecb 	bl	800fa5c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800fcc6:	69bb      	ldr	r3, [r7, #24]
 800fcc8:	78fa      	ldrb	r2, [r7, #3]
 800fcca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800fcce:	bf00      	nop
 800fcd0:	3710      	adds	r7, #16
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	bd80      	pop	{r7, pc}

0800fcd6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800fcd6:	b580      	push	{r7, lr}
 800fcd8:	b08a      	sub	sp, #40	; 0x28
 800fcda:	af02      	add	r7, sp, #8
 800fcdc:	60f8      	str	r0, [r7, #12]
 800fcde:	60b9      	str	r1, [r7, #8]
 800fce0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d10a      	bne.n	800fcfe <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800fce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcec:	f383 8811 	msr	BASEPRI, r3
 800fcf0:	f3bf 8f6f 	isb	sy
 800fcf4:	f3bf 8f4f 	dsb	sy
 800fcf8:	61bb      	str	r3, [r7, #24]
}
 800fcfa:	bf00      	nop
 800fcfc:	e7fe      	b.n	800fcfc <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800fcfe:	68ba      	ldr	r2, [r7, #8]
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	429a      	cmp	r2, r3
 800fd04:	d90a      	bls.n	800fd1c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800fd06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd0a:	f383 8811 	msr	BASEPRI, r3
 800fd0e:	f3bf 8f6f 	isb	sy
 800fd12:	f3bf 8f4f 	dsb	sy
 800fd16:	617b      	str	r3, [r7, #20]
}
 800fd18:	bf00      	nop
 800fd1a:	e7fe      	b.n	800fd1a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800fd1c:	2302      	movs	r3, #2
 800fd1e:	9300      	str	r3, [sp, #0]
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	2200      	movs	r2, #0
 800fd24:	2100      	movs	r1, #0
 800fd26:	68f8      	ldr	r0, [r7, #12]
 800fd28:	f7ff ff00 	bl	800fb2c <xQueueGenericCreateStatic>
 800fd2c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800fd2e:	69fb      	ldr	r3, [r7, #28]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d002      	beq.n	800fd3a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800fd34:	69fb      	ldr	r3, [r7, #28]
 800fd36:	68ba      	ldr	r2, [r7, #8]
 800fd38:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800fd3a:	69fb      	ldr	r3, [r7, #28]
	}
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	3720      	adds	r7, #32
 800fd40:	46bd      	mov	sp, r7
 800fd42:	bd80      	pop	{r7, pc}

0800fd44 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b086      	sub	sp, #24
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
 800fd4c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d10a      	bne.n	800fd6a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800fd54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd58:	f383 8811 	msr	BASEPRI, r3
 800fd5c:	f3bf 8f6f 	isb	sy
 800fd60:	f3bf 8f4f 	dsb	sy
 800fd64:	613b      	str	r3, [r7, #16]
}
 800fd66:	bf00      	nop
 800fd68:	e7fe      	b.n	800fd68 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800fd6a:	683a      	ldr	r2, [r7, #0]
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	429a      	cmp	r2, r3
 800fd70:	d90a      	bls.n	800fd88 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800fd72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd76:	f383 8811 	msr	BASEPRI, r3
 800fd7a:	f3bf 8f6f 	isb	sy
 800fd7e:	f3bf 8f4f 	dsb	sy
 800fd82:	60fb      	str	r3, [r7, #12]
}
 800fd84:	bf00      	nop
 800fd86:	e7fe      	b.n	800fd86 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800fd88:	2202      	movs	r2, #2
 800fd8a:	2100      	movs	r1, #0
 800fd8c:	6878      	ldr	r0, [r7, #4]
 800fd8e:	f7ff ff45 	bl	800fc1c <xQueueGenericCreate>
 800fd92:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800fd94:	697b      	ldr	r3, [r7, #20]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d002      	beq.n	800fda0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800fd9a:	697b      	ldr	r3, [r7, #20]
 800fd9c:	683a      	ldr	r2, [r7, #0]
 800fd9e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800fda0:	697b      	ldr	r3, [r7, #20]
	}
 800fda2:	4618      	mov	r0, r3
 800fda4:	3718      	adds	r7, #24
 800fda6:	46bd      	mov	sp, r7
 800fda8:	bd80      	pop	{r7, pc}
	...

0800fdac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b08e      	sub	sp, #56	; 0x38
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	60f8      	str	r0, [r7, #12]
 800fdb4:	60b9      	str	r1, [r7, #8]
 800fdb6:	607a      	str	r2, [r7, #4]
 800fdb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800fdba:	2300      	movs	r3, #0
 800fdbc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fdc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d10a      	bne.n	800fdde <xQueueGenericSend+0x32>
	__asm volatile
 800fdc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdcc:	f383 8811 	msr	BASEPRI, r3
 800fdd0:	f3bf 8f6f 	isb	sy
 800fdd4:	f3bf 8f4f 	dsb	sy
 800fdd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fdda:	bf00      	nop
 800fddc:	e7fe      	b.n	800fddc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fdde:	68bb      	ldr	r3, [r7, #8]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d103      	bne.n	800fdec <xQueueGenericSend+0x40>
 800fde4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fde6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d101      	bne.n	800fdf0 <xQueueGenericSend+0x44>
 800fdec:	2301      	movs	r3, #1
 800fdee:	e000      	b.n	800fdf2 <xQueueGenericSend+0x46>
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d10a      	bne.n	800fe0c <xQueueGenericSend+0x60>
	__asm volatile
 800fdf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdfa:	f383 8811 	msr	BASEPRI, r3
 800fdfe:	f3bf 8f6f 	isb	sy
 800fe02:	f3bf 8f4f 	dsb	sy
 800fe06:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fe08:	bf00      	nop
 800fe0a:	e7fe      	b.n	800fe0a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fe0c:	683b      	ldr	r3, [r7, #0]
 800fe0e:	2b02      	cmp	r3, #2
 800fe10:	d103      	bne.n	800fe1a <xQueueGenericSend+0x6e>
 800fe12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe16:	2b01      	cmp	r3, #1
 800fe18:	d101      	bne.n	800fe1e <xQueueGenericSend+0x72>
 800fe1a:	2301      	movs	r3, #1
 800fe1c:	e000      	b.n	800fe20 <xQueueGenericSend+0x74>
 800fe1e:	2300      	movs	r3, #0
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d10a      	bne.n	800fe3a <xQueueGenericSend+0x8e>
	__asm volatile
 800fe24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe28:	f383 8811 	msr	BASEPRI, r3
 800fe2c:	f3bf 8f6f 	isb	sy
 800fe30:	f3bf 8f4f 	dsb	sy
 800fe34:	623b      	str	r3, [r7, #32]
}
 800fe36:	bf00      	nop
 800fe38:	e7fe      	b.n	800fe38 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fe3a:	f001 fcdf 	bl	80117fc <xTaskGetSchedulerState>
 800fe3e:	4603      	mov	r3, r0
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d102      	bne.n	800fe4a <xQueueGenericSend+0x9e>
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d101      	bne.n	800fe4e <xQueueGenericSend+0xa2>
 800fe4a:	2301      	movs	r3, #1
 800fe4c:	e000      	b.n	800fe50 <xQueueGenericSend+0xa4>
 800fe4e:	2300      	movs	r3, #0
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d10a      	bne.n	800fe6a <xQueueGenericSend+0xbe>
	__asm volatile
 800fe54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe58:	f383 8811 	msr	BASEPRI, r3
 800fe5c:	f3bf 8f6f 	isb	sy
 800fe60:	f3bf 8f4f 	dsb	sy
 800fe64:	61fb      	str	r3, [r7, #28]
}
 800fe66:	bf00      	nop
 800fe68:	e7fe      	b.n	800fe68 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fe6a:	f002 fb23 	bl	80124b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fe6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fe72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe76:	429a      	cmp	r2, r3
 800fe78:	d302      	bcc.n	800fe80 <xQueueGenericSend+0xd4>
 800fe7a:	683b      	ldr	r3, [r7, #0]
 800fe7c:	2b02      	cmp	r3, #2
 800fe7e:	d129      	bne.n	800fed4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fe80:	683a      	ldr	r2, [r7, #0]
 800fe82:	68b9      	ldr	r1, [r7, #8]
 800fe84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe86:	f000 fc9a 	bl	80107be <prvCopyDataToQueue>
 800fe8a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fe8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d010      	beq.n	800feb6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fe94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe96:	3324      	adds	r3, #36	; 0x24
 800fe98:	4618      	mov	r0, r3
 800fe9a:	f001 faed 	bl	8011478 <xTaskRemoveFromEventList>
 800fe9e:	4603      	mov	r3, r0
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d013      	beq.n	800fecc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800fea4:	4b3f      	ldr	r3, [pc, #252]	; (800ffa4 <xQueueGenericSend+0x1f8>)
 800fea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800feaa:	601a      	str	r2, [r3, #0]
 800feac:	f3bf 8f4f 	dsb	sy
 800feb0:	f3bf 8f6f 	isb	sy
 800feb4:	e00a      	b.n	800fecc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800feb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d007      	beq.n	800fecc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800febc:	4b39      	ldr	r3, [pc, #228]	; (800ffa4 <xQueueGenericSend+0x1f8>)
 800febe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fec2:	601a      	str	r2, [r3, #0]
 800fec4:	f3bf 8f4f 	dsb	sy
 800fec8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800fecc:	f002 fb22 	bl	8012514 <vPortExitCritical>
				return pdPASS;
 800fed0:	2301      	movs	r3, #1
 800fed2:	e063      	b.n	800ff9c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d103      	bne.n	800fee2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800feda:	f002 fb1b 	bl	8012514 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800fede:	2300      	movs	r3, #0
 800fee0:	e05c      	b.n	800ff9c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d106      	bne.n	800fef6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fee8:	f107 0314 	add.w	r3, r7, #20
 800feec:	4618      	mov	r0, r3
 800feee:	f001 fb27 	bl	8011540 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fef2:	2301      	movs	r3, #1
 800fef4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fef6:	f002 fb0d 	bl	8012514 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fefa:	f001 f893 	bl	8011024 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fefe:	f002 fad9 	bl	80124b4 <vPortEnterCritical>
 800ff02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ff08:	b25b      	sxtb	r3, r3
 800ff0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ff0e:	d103      	bne.n	800ff18 <xQueueGenericSend+0x16c>
 800ff10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff12:	2200      	movs	r2, #0
 800ff14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ff18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ff1e:	b25b      	sxtb	r3, r3
 800ff20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ff24:	d103      	bne.n	800ff2e <xQueueGenericSend+0x182>
 800ff26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff28:	2200      	movs	r2, #0
 800ff2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ff2e:	f002 faf1 	bl	8012514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ff32:	1d3a      	adds	r2, r7, #4
 800ff34:	f107 0314 	add.w	r3, r7, #20
 800ff38:	4611      	mov	r1, r2
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	f001 fb16 	bl	801156c <xTaskCheckForTimeOut>
 800ff40:	4603      	mov	r3, r0
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d124      	bne.n	800ff90 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ff46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff48:	f000 fd31 	bl	80109ae <prvIsQueueFull>
 800ff4c:	4603      	mov	r3, r0
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d018      	beq.n	800ff84 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ff52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff54:	3310      	adds	r3, #16
 800ff56:	687a      	ldr	r2, [r7, #4]
 800ff58:	4611      	mov	r1, r2
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	f001 fa3c 	bl	80113d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ff60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff62:	f000 fcbc 	bl	80108de <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ff66:	f001 f86b 	bl	8011040 <xTaskResumeAll>
 800ff6a:	4603      	mov	r3, r0
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	f47f af7c 	bne.w	800fe6a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ff72:	4b0c      	ldr	r3, [pc, #48]	; (800ffa4 <xQueueGenericSend+0x1f8>)
 800ff74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff78:	601a      	str	r2, [r3, #0]
 800ff7a:	f3bf 8f4f 	dsb	sy
 800ff7e:	f3bf 8f6f 	isb	sy
 800ff82:	e772      	b.n	800fe6a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ff84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff86:	f000 fcaa 	bl	80108de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ff8a:	f001 f859 	bl	8011040 <xTaskResumeAll>
 800ff8e:	e76c      	b.n	800fe6a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ff90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff92:	f000 fca4 	bl	80108de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ff96:	f001 f853 	bl	8011040 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ff9a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	3738      	adds	r7, #56	; 0x38
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	bd80      	pop	{r7, pc}
 800ffa4:	e000ed04 	.word	0xe000ed04

0800ffa8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b090      	sub	sp, #64	; 0x40
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	60f8      	str	r0, [r7, #12]
 800ffb0:	60b9      	str	r1, [r7, #8]
 800ffb2:	607a      	str	r2, [r7, #4]
 800ffb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ffba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d10a      	bne.n	800ffd6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ffc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffc4:	f383 8811 	msr	BASEPRI, r3
 800ffc8:	f3bf 8f6f 	isb	sy
 800ffcc:	f3bf 8f4f 	dsb	sy
 800ffd0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ffd2:	bf00      	nop
 800ffd4:	e7fe      	b.n	800ffd4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ffd6:	68bb      	ldr	r3, [r7, #8]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d103      	bne.n	800ffe4 <xQueueGenericSendFromISR+0x3c>
 800ffdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d101      	bne.n	800ffe8 <xQueueGenericSendFromISR+0x40>
 800ffe4:	2301      	movs	r3, #1
 800ffe6:	e000      	b.n	800ffea <xQueueGenericSendFromISR+0x42>
 800ffe8:	2300      	movs	r3, #0
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d10a      	bne.n	8010004 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ffee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fff2:	f383 8811 	msr	BASEPRI, r3
 800fff6:	f3bf 8f6f 	isb	sy
 800fffa:	f3bf 8f4f 	dsb	sy
 800fffe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010000:	bf00      	nop
 8010002:	e7fe      	b.n	8010002 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010004:	683b      	ldr	r3, [r7, #0]
 8010006:	2b02      	cmp	r3, #2
 8010008:	d103      	bne.n	8010012 <xQueueGenericSendFromISR+0x6a>
 801000a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801000c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801000e:	2b01      	cmp	r3, #1
 8010010:	d101      	bne.n	8010016 <xQueueGenericSendFromISR+0x6e>
 8010012:	2301      	movs	r3, #1
 8010014:	e000      	b.n	8010018 <xQueueGenericSendFromISR+0x70>
 8010016:	2300      	movs	r3, #0
 8010018:	2b00      	cmp	r3, #0
 801001a:	d10a      	bne.n	8010032 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801001c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010020:	f383 8811 	msr	BASEPRI, r3
 8010024:	f3bf 8f6f 	isb	sy
 8010028:	f3bf 8f4f 	dsb	sy
 801002c:	623b      	str	r3, [r7, #32]
}
 801002e:	bf00      	nop
 8010030:	e7fe      	b.n	8010030 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010032:	f002 fb21 	bl	8012678 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010036:	f3ef 8211 	mrs	r2, BASEPRI
 801003a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801003e:	f383 8811 	msr	BASEPRI, r3
 8010042:	f3bf 8f6f 	isb	sy
 8010046:	f3bf 8f4f 	dsb	sy
 801004a:	61fa      	str	r2, [r7, #28]
 801004c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801004e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010050:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010054:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801005a:	429a      	cmp	r2, r3
 801005c:	d302      	bcc.n	8010064 <xQueueGenericSendFromISR+0xbc>
 801005e:	683b      	ldr	r3, [r7, #0]
 8010060:	2b02      	cmp	r3, #2
 8010062:	d12f      	bne.n	80100c4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010066:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801006a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801006e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010072:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010074:	683a      	ldr	r2, [r7, #0]
 8010076:	68b9      	ldr	r1, [r7, #8]
 8010078:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801007a:	f000 fba0 	bl	80107be <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801007e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8010082:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010086:	d112      	bne.n	80100ae <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801008a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801008c:	2b00      	cmp	r3, #0
 801008e:	d016      	beq.n	80100be <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010092:	3324      	adds	r3, #36	; 0x24
 8010094:	4618      	mov	r0, r3
 8010096:	f001 f9ef 	bl	8011478 <xTaskRemoveFromEventList>
 801009a:	4603      	mov	r3, r0
 801009c:	2b00      	cmp	r3, #0
 801009e:	d00e      	beq.n	80100be <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d00b      	beq.n	80100be <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	2201      	movs	r2, #1
 80100aa:	601a      	str	r2, [r3, #0]
 80100ac:	e007      	b.n	80100be <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80100ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80100b2:	3301      	adds	r3, #1
 80100b4:	b2db      	uxtb	r3, r3
 80100b6:	b25a      	sxtb	r2, r3
 80100b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80100be:	2301      	movs	r3, #1
 80100c0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80100c2:	e001      	b.n	80100c8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80100c4:	2300      	movs	r3, #0
 80100c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80100c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100ca:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80100cc:	697b      	ldr	r3, [r7, #20]
 80100ce:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80100d2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80100d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80100d6:	4618      	mov	r0, r3
 80100d8:	3740      	adds	r7, #64	; 0x40
 80100da:	46bd      	mov	sp, r7
 80100dc:	bd80      	pop	{r7, pc}

080100de <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80100de:	b580      	push	{r7, lr}
 80100e0:	b08e      	sub	sp, #56	; 0x38
 80100e2:	af00      	add	r7, sp, #0
 80100e4:	6078      	str	r0, [r7, #4]
 80100e6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80100ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d10a      	bne.n	8010108 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80100f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100f6:	f383 8811 	msr	BASEPRI, r3
 80100fa:	f3bf 8f6f 	isb	sy
 80100fe:	f3bf 8f4f 	dsb	sy
 8010102:	623b      	str	r3, [r7, #32]
}
 8010104:	bf00      	nop
 8010106:	e7fe      	b.n	8010106 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801010a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801010c:	2b00      	cmp	r3, #0
 801010e:	d00a      	beq.n	8010126 <xQueueGiveFromISR+0x48>
	__asm volatile
 8010110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010114:	f383 8811 	msr	BASEPRI, r3
 8010118:	f3bf 8f6f 	isb	sy
 801011c:	f3bf 8f4f 	dsb	sy
 8010120:	61fb      	str	r3, [r7, #28]
}
 8010122:	bf00      	nop
 8010124:	e7fe      	b.n	8010124 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d103      	bne.n	8010136 <xQueueGiveFromISR+0x58>
 801012e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010130:	689b      	ldr	r3, [r3, #8]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d101      	bne.n	801013a <xQueueGiveFromISR+0x5c>
 8010136:	2301      	movs	r3, #1
 8010138:	e000      	b.n	801013c <xQueueGiveFromISR+0x5e>
 801013a:	2300      	movs	r3, #0
 801013c:	2b00      	cmp	r3, #0
 801013e:	d10a      	bne.n	8010156 <xQueueGiveFromISR+0x78>
	__asm volatile
 8010140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010144:	f383 8811 	msr	BASEPRI, r3
 8010148:	f3bf 8f6f 	isb	sy
 801014c:	f3bf 8f4f 	dsb	sy
 8010150:	61bb      	str	r3, [r7, #24]
}
 8010152:	bf00      	nop
 8010154:	e7fe      	b.n	8010154 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010156:	f002 fa8f 	bl	8012678 <vPortValidateInterruptPriority>
	__asm volatile
 801015a:	f3ef 8211 	mrs	r2, BASEPRI
 801015e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010162:	f383 8811 	msr	BASEPRI, r3
 8010166:	f3bf 8f6f 	isb	sy
 801016a:	f3bf 8f4f 	dsb	sy
 801016e:	617a      	str	r2, [r7, #20]
 8010170:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8010172:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010174:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801017a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801017c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801017e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010180:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010182:	429a      	cmp	r2, r3
 8010184:	d22b      	bcs.n	80101de <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010188:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801018c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010192:	1c5a      	adds	r2, r3, #1
 8010194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010196:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010198:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801019c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80101a0:	d112      	bne.n	80101c8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80101a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d016      	beq.n	80101d8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80101aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101ac:	3324      	adds	r3, #36	; 0x24
 80101ae:	4618      	mov	r0, r3
 80101b0:	f001 f962 	bl	8011478 <xTaskRemoveFromEventList>
 80101b4:	4603      	mov	r3, r0
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d00e      	beq.n	80101d8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80101ba:	683b      	ldr	r3, [r7, #0]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d00b      	beq.n	80101d8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80101c0:	683b      	ldr	r3, [r7, #0]
 80101c2:	2201      	movs	r2, #1
 80101c4:	601a      	str	r2, [r3, #0]
 80101c6:	e007      	b.n	80101d8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80101c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80101cc:	3301      	adds	r3, #1
 80101ce:	b2db      	uxtb	r3, r3
 80101d0:	b25a      	sxtb	r2, r3
 80101d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80101d8:	2301      	movs	r3, #1
 80101da:	637b      	str	r3, [r7, #52]	; 0x34
 80101dc:	e001      	b.n	80101e2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80101de:	2300      	movs	r3, #0
 80101e0:	637b      	str	r3, [r7, #52]	; 0x34
 80101e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101e4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	f383 8811 	msr	BASEPRI, r3
}
 80101ec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80101ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80101f0:	4618      	mov	r0, r3
 80101f2:	3738      	adds	r7, #56	; 0x38
 80101f4:	46bd      	mov	sp, r7
 80101f6:	bd80      	pop	{r7, pc}

080101f8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b08c      	sub	sp, #48	; 0x30
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	60f8      	str	r0, [r7, #12]
 8010200:	60b9      	str	r1, [r7, #8]
 8010202:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010204:	2300      	movs	r3, #0
 8010206:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801020c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801020e:	2b00      	cmp	r3, #0
 8010210:	d10a      	bne.n	8010228 <xQueueReceive+0x30>
	__asm volatile
 8010212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010216:	f383 8811 	msr	BASEPRI, r3
 801021a:	f3bf 8f6f 	isb	sy
 801021e:	f3bf 8f4f 	dsb	sy
 8010222:	623b      	str	r3, [r7, #32]
}
 8010224:	bf00      	nop
 8010226:	e7fe      	b.n	8010226 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010228:	68bb      	ldr	r3, [r7, #8]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d103      	bne.n	8010236 <xQueueReceive+0x3e>
 801022e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010232:	2b00      	cmp	r3, #0
 8010234:	d101      	bne.n	801023a <xQueueReceive+0x42>
 8010236:	2301      	movs	r3, #1
 8010238:	e000      	b.n	801023c <xQueueReceive+0x44>
 801023a:	2300      	movs	r3, #0
 801023c:	2b00      	cmp	r3, #0
 801023e:	d10a      	bne.n	8010256 <xQueueReceive+0x5e>
	__asm volatile
 8010240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010244:	f383 8811 	msr	BASEPRI, r3
 8010248:	f3bf 8f6f 	isb	sy
 801024c:	f3bf 8f4f 	dsb	sy
 8010250:	61fb      	str	r3, [r7, #28]
}
 8010252:	bf00      	nop
 8010254:	e7fe      	b.n	8010254 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010256:	f001 fad1 	bl	80117fc <xTaskGetSchedulerState>
 801025a:	4603      	mov	r3, r0
 801025c:	2b00      	cmp	r3, #0
 801025e:	d102      	bne.n	8010266 <xQueueReceive+0x6e>
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d101      	bne.n	801026a <xQueueReceive+0x72>
 8010266:	2301      	movs	r3, #1
 8010268:	e000      	b.n	801026c <xQueueReceive+0x74>
 801026a:	2300      	movs	r3, #0
 801026c:	2b00      	cmp	r3, #0
 801026e:	d10a      	bne.n	8010286 <xQueueReceive+0x8e>
	__asm volatile
 8010270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010274:	f383 8811 	msr	BASEPRI, r3
 8010278:	f3bf 8f6f 	isb	sy
 801027c:	f3bf 8f4f 	dsb	sy
 8010280:	61bb      	str	r3, [r7, #24]
}
 8010282:	bf00      	nop
 8010284:	e7fe      	b.n	8010284 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010286:	f002 f915 	bl	80124b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801028a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801028c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801028e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010292:	2b00      	cmp	r3, #0
 8010294:	d01f      	beq.n	80102d6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010296:	68b9      	ldr	r1, [r7, #8]
 8010298:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801029a:	f000 fafa 	bl	8010892 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801029e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102a0:	1e5a      	subs	r2, r3, #1
 80102a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102a4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80102a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102a8:	691b      	ldr	r3, [r3, #16]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d00f      	beq.n	80102ce <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80102ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102b0:	3310      	adds	r3, #16
 80102b2:	4618      	mov	r0, r3
 80102b4:	f001 f8e0 	bl	8011478 <xTaskRemoveFromEventList>
 80102b8:	4603      	mov	r3, r0
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d007      	beq.n	80102ce <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80102be:	4b3d      	ldr	r3, [pc, #244]	; (80103b4 <xQueueReceive+0x1bc>)
 80102c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80102c4:	601a      	str	r2, [r3, #0]
 80102c6:	f3bf 8f4f 	dsb	sy
 80102ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80102ce:	f002 f921 	bl	8012514 <vPortExitCritical>
				return pdPASS;
 80102d2:	2301      	movs	r3, #1
 80102d4:	e069      	b.n	80103aa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d103      	bne.n	80102e4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80102dc:	f002 f91a 	bl	8012514 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80102e0:	2300      	movs	r3, #0
 80102e2:	e062      	b.n	80103aa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80102e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d106      	bne.n	80102f8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80102ea:	f107 0310 	add.w	r3, r7, #16
 80102ee:	4618      	mov	r0, r3
 80102f0:	f001 f926 	bl	8011540 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80102f4:	2301      	movs	r3, #1
 80102f6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80102f8:	f002 f90c 	bl	8012514 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80102fc:	f000 fe92 	bl	8011024 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010300:	f002 f8d8 	bl	80124b4 <vPortEnterCritical>
 8010304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010306:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801030a:	b25b      	sxtb	r3, r3
 801030c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010310:	d103      	bne.n	801031a <xQueueReceive+0x122>
 8010312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010314:	2200      	movs	r2, #0
 8010316:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801031a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801031c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010320:	b25b      	sxtb	r3, r3
 8010322:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010326:	d103      	bne.n	8010330 <xQueueReceive+0x138>
 8010328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801032a:	2200      	movs	r2, #0
 801032c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010330:	f002 f8f0 	bl	8012514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010334:	1d3a      	adds	r2, r7, #4
 8010336:	f107 0310 	add.w	r3, r7, #16
 801033a:	4611      	mov	r1, r2
 801033c:	4618      	mov	r0, r3
 801033e:	f001 f915 	bl	801156c <xTaskCheckForTimeOut>
 8010342:	4603      	mov	r3, r0
 8010344:	2b00      	cmp	r3, #0
 8010346:	d123      	bne.n	8010390 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010348:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801034a:	f000 fb1a 	bl	8010982 <prvIsQueueEmpty>
 801034e:	4603      	mov	r3, r0
 8010350:	2b00      	cmp	r3, #0
 8010352:	d017      	beq.n	8010384 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010356:	3324      	adds	r3, #36	; 0x24
 8010358:	687a      	ldr	r2, [r7, #4]
 801035a:	4611      	mov	r1, r2
 801035c:	4618      	mov	r0, r3
 801035e:	f001 f83b 	bl	80113d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010362:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010364:	f000 fabb 	bl	80108de <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010368:	f000 fe6a 	bl	8011040 <xTaskResumeAll>
 801036c:	4603      	mov	r3, r0
 801036e:	2b00      	cmp	r3, #0
 8010370:	d189      	bne.n	8010286 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8010372:	4b10      	ldr	r3, [pc, #64]	; (80103b4 <xQueueReceive+0x1bc>)
 8010374:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010378:	601a      	str	r2, [r3, #0]
 801037a:	f3bf 8f4f 	dsb	sy
 801037e:	f3bf 8f6f 	isb	sy
 8010382:	e780      	b.n	8010286 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010384:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010386:	f000 faaa 	bl	80108de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801038a:	f000 fe59 	bl	8011040 <xTaskResumeAll>
 801038e:	e77a      	b.n	8010286 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010390:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010392:	f000 faa4 	bl	80108de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010396:	f000 fe53 	bl	8011040 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801039a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801039c:	f000 faf1 	bl	8010982 <prvIsQueueEmpty>
 80103a0:	4603      	mov	r3, r0
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	f43f af6f 	beq.w	8010286 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80103a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80103aa:	4618      	mov	r0, r3
 80103ac:	3730      	adds	r7, #48	; 0x30
 80103ae:	46bd      	mov	sp, r7
 80103b0:	bd80      	pop	{r7, pc}
 80103b2:	bf00      	nop
 80103b4:	e000ed04 	.word	0xe000ed04

080103b8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b08e      	sub	sp, #56	; 0x38
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
 80103c0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80103c2:	2300      	movs	r3, #0
 80103c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80103ca:	2300      	movs	r3, #0
 80103cc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80103ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d10a      	bne.n	80103ea <xQueueSemaphoreTake+0x32>
	__asm volatile
 80103d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103d8:	f383 8811 	msr	BASEPRI, r3
 80103dc:	f3bf 8f6f 	isb	sy
 80103e0:	f3bf 8f4f 	dsb	sy
 80103e4:	623b      	str	r3, [r7, #32]
}
 80103e6:	bf00      	nop
 80103e8:	e7fe      	b.n	80103e8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80103ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d00a      	beq.n	8010408 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80103f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103f6:	f383 8811 	msr	BASEPRI, r3
 80103fa:	f3bf 8f6f 	isb	sy
 80103fe:	f3bf 8f4f 	dsb	sy
 8010402:	61fb      	str	r3, [r7, #28]
}
 8010404:	bf00      	nop
 8010406:	e7fe      	b.n	8010406 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010408:	f001 f9f8 	bl	80117fc <xTaskGetSchedulerState>
 801040c:	4603      	mov	r3, r0
 801040e:	2b00      	cmp	r3, #0
 8010410:	d102      	bne.n	8010418 <xQueueSemaphoreTake+0x60>
 8010412:	683b      	ldr	r3, [r7, #0]
 8010414:	2b00      	cmp	r3, #0
 8010416:	d101      	bne.n	801041c <xQueueSemaphoreTake+0x64>
 8010418:	2301      	movs	r3, #1
 801041a:	e000      	b.n	801041e <xQueueSemaphoreTake+0x66>
 801041c:	2300      	movs	r3, #0
 801041e:	2b00      	cmp	r3, #0
 8010420:	d10a      	bne.n	8010438 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8010422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010426:	f383 8811 	msr	BASEPRI, r3
 801042a:	f3bf 8f6f 	isb	sy
 801042e:	f3bf 8f4f 	dsb	sy
 8010432:	61bb      	str	r3, [r7, #24]
}
 8010434:	bf00      	nop
 8010436:	e7fe      	b.n	8010436 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010438:	f002 f83c 	bl	80124b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801043c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801043e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010440:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010444:	2b00      	cmp	r3, #0
 8010446:	d024      	beq.n	8010492 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801044a:	1e5a      	subs	r2, r3, #1
 801044c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801044e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d104      	bne.n	8010462 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010458:	f001 fb46 	bl	8011ae8 <pvTaskIncrementMutexHeldCount>
 801045c:	4602      	mov	r2, r0
 801045e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010460:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010464:	691b      	ldr	r3, [r3, #16]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d00f      	beq.n	801048a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801046a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801046c:	3310      	adds	r3, #16
 801046e:	4618      	mov	r0, r3
 8010470:	f001 f802 	bl	8011478 <xTaskRemoveFromEventList>
 8010474:	4603      	mov	r3, r0
 8010476:	2b00      	cmp	r3, #0
 8010478:	d007      	beq.n	801048a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801047a:	4b54      	ldr	r3, [pc, #336]	; (80105cc <xQueueSemaphoreTake+0x214>)
 801047c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010480:	601a      	str	r2, [r3, #0]
 8010482:	f3bf 8f4f 	dsb	sy
 8010486:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801048a:	f002 f843 	bl	8012514 <vPortExitCritical>
				return pdPASS;
 801048e:	2301      	movs	r3, #1
 8010490:	e097      	b.n	80105c2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010492:	683b      	ldr	r3, [r7, #0]
 8010494:	2b00      	cmp	r3, #0
 8010496:	d111      	bne.n	80104bc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801049a:	2b00      	cmp	r3, #0
 801049c:	d00a      	beq.n	80104b4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 801049e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104a2:	f383 8811 	msr	BASEPRI, r3
 80104a6:	f3bf 8f6f 	isb	sy
 80104aa:	f3bf 8f4f 	dsb	sy
 80104ae:	617b      	str	r3, [r7, #20]
}
 80104b0:	bf00      	nop
 80104b2:	e7fe      	b.n	80104b2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80104b4:	f002 f82e 	bl	8012514 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80104b8:	2300      	movs	r3, #0
 80104ba:	e082      	b.n	80105c2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80104bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d106      	bne.n	80104d0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80104c2:	f107 030c 	add.w	r3, r7, #12
 80104c6:	4618      	mov	r0, r3
 80104c8:	f001 f83a 	bl	8011540 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80104cc:	2301      	movs	r3, #1
 80104ce:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80104d0:	f002 f820 	bl	8012514 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80104d4:	f000 fda6 	bl	8011024 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80104d8:	f001 ffec 	bl	80124b4 <vPortEnterCritical>
 80104dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80104e2:	b25b      	sxtb	r3, r3
 80104e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80104e8:	d103      	bne.n	80104f2 <xQueueSemaphoreTake+0x13a>
 80104ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104ec:	2200      	movs	r2, #0
 80104ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80104f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80104f8:	b25b      	sxtb	r3, r3
 80104fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80104fe:	d103      	bne.n	8010508 <xQueueSemaphoreTake+0x150>
 8010500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010502:	2200      	movs	r2, #0
 8010504:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010508:	f002 f804 	bl	8012514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801050c:	463a      	mov	r2, r7
 801050e:	f107 030c 	add.w	r3, r7, #12
 8010512:	4611      	mov	r1, r2
 8010514:	4618      	mov	r0, r3
 8010516:	f001 f829 	bl	801156c <xTaskCheckForTimeOut>
 801051a:	4603      	mov	r3, r0
 801051c:	2b00      	cmp	r3, #0
 801051e:	d132      	bne.n	8010586 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010520:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010522:	f000 fa2e 	bl	8010982 <prvIsQueueEmpty>
 8010526:	4603      	mov	r3, r0
 8010528:	2b00      	cmp	r3, #0
 801052a:	d026      	beq.n	801057a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801052c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d109      	bne.n	8010548 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8010534:	f001 ffbe 	bl	80124b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801053a:	689b      	ldr	r3, [r3, #8]
 801053c:	4618      	mov	r0, r3
 801053e:	f001 f97b 	bl	8011838 <xTaskPriorityInherit>
 8010542:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8010544:	f001 ffe6 	bl	8012514 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801054a:	3324      	adds	r3, #36	; 0x24
 801054c:	683a      	ldr	r2, [r7, #0]
 801054e:	4611      	mov	r1, r2
 8010550:	4618      	mov	r0, r3
 8010552:	f000 ff41 	bl	80113d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010556:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010558:	f000 f9c1 	bl	80108de <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801055c:	f000 fd70 	bl	8011040 <xTaskResumeAll>
 8010560:	4603      	mov	r3, r0
 8010562:	2b00      	cmp	r3, #0
 8010564:	f47f af68 	bne.w	8010438 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8010568:	4b18      	ldr	r3, [pc, #96]	; (80105cc <xQueueSemaphoreTake+0x214>)
 801056a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801056e:	601a      	str	r2, [r3, #0]
 8010570:	f3bf 8f4f 	dsb	sy
 8010574:	f3bf 8f6f 	isb	sy
 8010578:	e75e      	b.n	8010438 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801057a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801057c:	f000 f9af 	bl	80108de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010580:	f000 fd5e 	bl	8011040 <xTaskResumeAll>
 8010584:	e758      	b.n	8010438 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010586:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010588:	f000 f9a9 	bl	80108de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801058c:	f000 fd58 	bl	8011040 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010590:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010592:	f000 f9f6 	bl	8010982 <prvIsQueueEmpty>
 8010596:	4603      	mov	r3, r0
 8010598:	2b00      	cmp	r3, #0
 801059a:	f43f af4d 	beq.w	8010438 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801059e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d00d      	beq.n	80105c0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80105a4:	f001 ff86 	bl	80124b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80105a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80105aa:	f000 f8f0 	bl	801078e <prvGetDisinheritPriorityAfterTimeout>
 80105ae:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80105b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105b2:	689b      	ldr	r3, [r3, #8]
 80105b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80105b6:	4618      	mov	r0, r3
 80105b8:	f001 fa14 	bl	80119e4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80105bc:	f001 ffaa 	bl	8012514 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80105c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80105c2:	4618      	mov	r0, r3
 80105c4:	3738      	adds	r7, #56	; 0x38
 80105c6:	46bd      	mov	sp, r7
 80105c8:	bd80      	pop	{r7, pc}
 80105ca:	bf00      	nop
 80105cc:	e000ed04 	.word	0xe000ed04

080105d0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b08e      	sub	sp, #56	; 0x38
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	60f8      	str	r0, [r7, #12]
 80105d8:	60b9      	str	r1, [r7, #8]
 80105da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80105e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d10a      	bne.n	80105fc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80105e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105ea:	f383 8811 	msr	BASEPRI, r3
 80105ee:	f3bf 8f6f 	isb	sy
 80105f2:	f3bf 8f4f 	dsb	sy
 80105f6:	623b      	str	r3, [r7, #32]
}
 80105f8:	bf00      	nop
 80105fa:	e7fe      	b.n	80105fa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80105fc:	68bb      	ldr	r3, [r7, #8]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d103      	bne.n	801060a <xQueueReceiveFromISR+0x3a>
 8010602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010606:	2b00      	cmp	r3, #0
 8010608:	d101      	bne.n	801060e <xQueueReceiveFromISR+0x3e>
 801060a:	2301      	movs	r3, #1
 801060c:	e000      	b.n	8010610 <xQueueReceiveFromISR+0x40>
 801060e:	2300      	movs	r3, #0
 8010610:	2b00      	cmp	r3, #0
 8010612:	d10a      	bne.n	801062a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8010614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010618:	f383 8811 	msr	BASEPRI, r3
 801061c:	f3bf 8f6f 	isb	sy
 8010620:	f3bf 8f4f 	dsb	sy
 8010624:	61fb      	str	r3, [r7, #28]
}
 8010626:	bf00      	nop
 8010628:	e7fe      	b.n	8010628 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801062a:	f002 f825 	bl	8012678 <vPortValidateInterruptPriority>
	__asm volatile
 801062e:	f3ef 8211 	mrs	r2, BASEPRI
 8010632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010636:	f383 8811 	msr	BASEPRI, r3
 801063a:	f3bf 8f6f 	isb	sy
 801063e:	f3bf 8f4f 	dsb	sy
 8010642:	61ba      	str	r2, [r7, #24]
 8010644:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010646:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010648:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801064a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801064c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801064e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010652:	2b00      	cmp	r3, #0
 8010654:	d02f      	beq.n	80106b6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010658:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801065c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010660:	68b9      	ldr	r1, [r7, #8]
 8010662:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010664:	f000 f915 	bl	8010892 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801066a:	1e5a      	subs	r2, r3, #1
 801066c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801066e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010670:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010674:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010678:	d112      	bne.n	80106a0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801067a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801067c:	691b      	ldr	r3, [r3, #16]
 801067e:	2b00      	cmp	r3, #0
 8010680:	d016      	beq.n	80106b0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010684:	3310      	adds	r3, #16
 8010686:	4618      	mov	r0, r3
 8010688:	f000 fef6 	bl	8011478 <xTaskRemoveFromEventList>
 801068c:	4603      	mov	r3, r0
 801068e:	2b00      	cmp	r3, #0
 8010690:	d00e      	beq.n	80106b0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d00b      	beq.n	80106b0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	2201      	movs	r2, #1
 801069c:	601a      	str	r2, [r3, #0]
 801069e:	e007      	b.n	80106b0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80106a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80106a4:	3301      	adds	r3, #1
 80106a6:	b2db      	uxtb	r3, r3
 80106a8:	b25a      	sxtb	r2, r3
 80106aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80106b0:	2301      	movs	r3, #1
 80106b2:	637b      	str	r3, [r7, #52]	; 0x34
 80106b4:	e001      	b.n	80106ba <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80106b6:	2300      	movs	r3, #0
 80106b8:	637b      	str	r3, [r7, #52]	; 0x34
 80106ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80106be:	693b      	ldr	r3, [r7, #16]
 80106c0:	f383 8811 	msr	BASEPRI, r3
}
 80106c4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80106c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80106c8:	4618      	mov	r0, r3
 80106ca:	3738      	adds	r7, #56	; 0x38
 80106cc:	46bd      	mov	sp, r7
 80106ce:	bd80      	pop	{r7, pc}

080106d0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b084      	sub	sp, #16
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d10a      	bne.n	80106f4 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80106de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106e2:	f383 8811 	msr	BASEPRI, r3
 80106e6:	f3bf 8f6f 	isb	sy
 80106ea:	f3bf 8f4f 	dsb	sy
 80106ee:	60bb      	str	r3, [r7, #8]
}
 80106f0:	bf00      	nop
 80106f2:	e7fe      	b.n	80106f2 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80106f4:	f001 fede 	bl	80124b4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106fc:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80106fe:	f001 ff09 	bl	8012514 <vPortExitCritical>

	return uxReturn;
 8010702:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8010704:	4618      	mov	r0, r3
 8010706:	3710      	adds	r7, #16
 8010708:	46bd      	mov	sp, r7
 801070a:	bd80      	pop	{r7, pc}

0801070c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 801070c:	b480      	push	{r7}
 801070e:	b087      	sub	sp, #28
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8010718:	697b      	ldr	r3, [r7, #20]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d10a      	bne.n	8010734 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 801071e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010722:	f383 8811 	msr	BASEPRI, r3
 8010726:	f3bf 8f6f 	isb	sy
 801072a:	f3bf 8f4f 	dsb	sy
 801072e:	60fb      	str	r3, [r7, #12]
}
 8010730:	bf00      	nop
 8010732:	e7fe      	b.n	8010732 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8010734:	697b      	ldr	r3, [r7, #20]
 8010736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010738:	613b      	str	r3, [r7, #16]

	return uxReturn;
 801073a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801073c:	4618      	mov	r0, r3
 801073e:	371c      	adds	r7, #28
 8010740:	46bd      	mov	sp, r7
 8010742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010746:	4770      	bx	lr

08010748 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010748:	b580      	push	{r7, lr}
 801074a:	b084      	sub	sp, #16
 801074c:	af00      	add	r7, sp, #0
 801074e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	2b00      	cmp	r3, #0
 8010758:	d10a      	bne.n	8010770 <vQueueDelete+0x28>
	__asm volatile
 801075a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801075e:	f383 8811 	msr	BASEPRI, r3
 8010762:	f3bf 8f6f 	isb	sy
 8010766:	f3bf 8f4f 	dsb	sy
 801076a:	60bb      	str	r3, [r7, #8]
}
 801076c:	bf00      	nop
 801076e:	e7fe      	b.n	801076e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010770:	68f8      	ldr	r0, [r7, #12]
 8010772:	f000 f95f 	bl	8010a34 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801077c:	2b00      	cmp	r3, #0
 801077e:	d102      	bne.n	8010786 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8010780:	68f8      	ldr	r0, [r7, #12]
 8010782:	f002 f85d 	bl	8012840 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8010786:	bf00      	nop
 8010788:	3710      	adds	r7, #16
 801078a:	46bd      	mov	sp, r7
 801078c:	bd80      	pop	{r7, pc}

0801078e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801078e:	b480      	push	{r7}
 8010790:	b085      	sub	sp, #20
 8010792:	af00      	add	r7, sp, #0
 8010794:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801079a:	2b00      	cmp	r3, #0
 801079c:	d006      	beq.n	80107ac <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80107a8:	60fb      	str	r3, [r7, #12]
 80107aa:	e001      	b.n	80107b0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80107ac:	2300      	movs	r3, #0
 80107ae:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80107b0:	68fb      	ldr	r3, [r7, #12]
	}
 80107b2:	4618      	mov	r0, r3
 80107b4:	3714      	adds	r7, #20
 80107b6:	46bd      	mov	sp, r7
 80107b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107bc:	4770      	bx	lr

080107be <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80107be:	b580      	push	{r7, lr}
 80107c0:	b086      	sub	sp, #24
 80107c2:	af00      	add	r7, sp, #0
 80107c4:	60f8      	str	r0, [r7, #12]
 80107c6:	60b9      	str	r1, [r7, #8]
 80107c8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80107ca:	2300      	movs	r3, #0
 80107cc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107d2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d10d      	bne.n	80107f8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d14d      	bne.n	8010880 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	689b      	ldr	r3, [r3, #8]
 80107e8:	4618      	mov	r0, r3
 80107ea:	f001 f88d 	bl	8011908 <xTaskPriorityDisinherit>
 80107ee:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	2200      	movs	r2, #0
 80107f4:	609a      	str	r2, [r3, #8]
 80107f6:	e043      	b.n	8010880 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d119      	bne.n	8010832 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	6858      	ldr	r0, [r3, #4]
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010806:	461a      	mov	r2, r3
 8010808:	68b9      	ldr	r1, [r7, #8]
 801080a:	f002 fb7a 	bl	8012f02 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	685a      	ldr	r2, [r3, #4]
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010816:	441a      	add	r2, r3
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	685a      	ldr	r2, [r3, #4]
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	689b      	ldr	r3, [r3, #8]
 8010824:	429a      	cmp	r2, r3
 8010826:	d32b      	bcc.n	8010880 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	681a      	ldr	r2, [r3, #0]
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	605a      	str	r2, [r3, #4]
 8010830:	e026      	b.n	8010880 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	68d8      	ldr	r0, [r3, #12]
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801083a:	461a      	mov	r2, r3
 801083c:	68b9      	ldr	r1, [r7, #8]
 801083e:	f002 fb60 	bl	8012f02 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	68da      	ldr	r2, [r3, #12]
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801084a:	425b      	negs	r3, r3
 801084c:	441a      	add	r2, r3
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	68da      	ldr	r2, [r3, #12]
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	429a      	cmp	r2, r3
 801085c:	d207      	bcs.n	801086e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	689a      	ldr	r2, [r3, #8]
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010866:	425b      	negs	r3, r3
 8010868:	441a      	add	r2, r3
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	2b02      	cmp	r3, #2
 8010872:	d105      	bne.n	8010880 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010874:	693b      	ldr	r3, [r7, #16]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d002      	beq.n	8010880 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801087a:	693b      	ldr	r3, [r7, #16]
 801087c:	3b01      	subs	r3, #1
 801087e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010880:	693b      	ldr	r3, [r7, #16]
 8010882:	1c5a      	adds	r2, r3, #1
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010888:	697b      	ldr	r3, [r7, #20]
}
 801088a:	4618      	mov	r0, r3
 801088c:	3718      	adds	r7, #24
 801088e:	46bd      	mov	sp, r7
 8010890:	bd80      	pop	{r7, pc}

08010892 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010892:	b580      	push	{r7, lr}
 8010894:	b082      	sub	sp, #8
 8010896:	af00      	add	r7, sp, #0
 8010898:	6078      	str	r0, [r7, #4]
 801089a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d018      	beq.n	80108d6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	68da      	ldr	r2, [r3, #12]
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108ac:	441a      	add	r2, r3
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	68da      	ldr	r2, [r3, #12]
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	689b      	ldr	r3, [r3, #8]
 80108ba:	429a      	cmp	r2, r3
 80108bc:	d303      	bcc.n	80108c6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	681a      	ldr	r2, [r3, #0]
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	68d9      	ldr	r1, [r3, #12]
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108ce:	461a      	mov	r2, r3
 80108d0:	6838      	ldr	r0, [r7, #0]
 80108d2:	f002 fb16 	bl	8012f02 <memcpy>
	}
}
 80108d6:	bf00      	nop
 80108d8:	3708      	adds	r7, #8
 80108da:	46bd      	mov	sp, r7
 80108dc:	bd80      	pop	{r7, pc}

080108de <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80108de:	b580      	push	{r7, lr}
 80108e0:	b084      	sub	sp, #16
 80108e2:	af00      	add	r7, sp, #0
 80108e4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80108e6:	f001 fde5 	bl	80124b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80108f0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80108f2:	e011      	b.n	8010918 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d012      	beq.n	8010922 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	3324      	adds	r3, #36	; 0x24
 8010900:	4618      	mov	r0, r3
 8010902:	f000 fdb9 	bl	8011478 <xTaskRemoveFromEventList>
 8010906:	4603      	mov	r3, r0
 8010908:	2b00      	cmp	r3, #0
 801090a:	d001      	beq.n	8010910 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801090c:	f000 fe90 	bl	8011630 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010910:	7bfb      	ldrb	r3, [r7, #15]
 8010912:	3b01      	subs	r3, #1
 8010914:	b2db      	uxtb	r3, r3
 8010916:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010918:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801091c:	2b00      	cmp	r3, #0
 801091e:	dce9      	bgt.n	80108f4 <prvUnlockQueue+0x16>
 8010920:	e000      	b.n	8010924 <prvUnlockQueue+0x46>
					break;
 8010922:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	22ff      	movs	r2, #255	; 0xff
 8010928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801092c:	f001 fdf2 	bl	8012514 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010930:	f001 fdc0 	bl	80124b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801093a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801093c:	e011      	b.n	8010962 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	691b      	ldr	r3, [r3, #16]
 8010942:	2b00      	cmp	r3, #0
 8010944:	d012      	beq.n	801096c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	3310      	adds	r3, #16
 801094a:	4618      	mov	r0, r3
 801094c:	f000 fd94 	bl	8011478 <xTaskRemoveFromEventList>
 8010950:	4603      	mov	r3, r0
 8010952:	2b00      	cmp	r3, #0
 8010954:	d001      	beq.n	801095a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010956:	f000 fe6b 	bl	8011630 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801095a:	7bbb      	ldrb	r3, [r7, #14]
 801095c:	3b01      	subs	r3, #1
 801095e:	b2db      	uxtb	r3, r3
 8010960:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010962:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010966:	2b00      	cmp	r3, #0
 8010968:	dce9      	bgt.n	801093e <prvUnlockQueue+0x60>
 801096a:	e000      	b.n	801096e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801096c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	22ff      	movs	r2, #255	; 0xff
 8010972:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010976:	f001 fdcd 	bl	8012514 <vPortExitCritical>
}
 801097a:	bf00      	nop
 801097c:	3710      	adds	r7, #16
 801097e:	46bd      	mov	sp, r7
 8010980:	bd80      	pop	{r7, pc}

08010982 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010982:	b580      	push	{r7, lr}
 8010984:	b084      	sub	sp, #16
 8010986:	af00      	add	r7, sp, #0
 8010988:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801098a:	f001 fd93 	bl	80124b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010992:	2b00      	cmp	r3, #0
 8010994:	d102      	bne.n	801099c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010996:	2301      	movs	r3, #1
 8010998:	60fb      	str	r3, [r7, #12]
 801099a:	e001      	b.n	80109a0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801099c:	2300      	movs	r3, #0
 801099e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80109a0:	f001 fdb8 	bl	8012514 <vPortExitCritical>

	return xReturn;
 80109a4:	68fb      	ldr	r3, [r7, #12]
}
 80109a6:	4618      	mov	r0, r3
 80109a8:	3710      	adds	r7, #16
 80109aa:	46bd      	mov	sp, r7
 80109ac:	bd80      	pop	{r7, pc}

080109ae <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80109ae:	b580      	push	{r7, lr}
 80109b0:	b084      	sub	sp, #16
 80109b2:	af00      	add	r7, sp, #0
 80109b4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80109b6:	f001 fd7d 	bl	80124b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80109c2:	429a      	cmp	r2, r3
 80109c4:	d102      	bne.n	80109cc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80109c6:	2301      	movs	r3, #1
 80109c8:	60fb      	str	r3, [r7, #12]
 80109ca:	e001      	b.n	80109d0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80109cc:	2300      	movs	r3, #0
 80109ce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80109d0:	f001 fda0 	bl	8012514 <vPortExitCritical>

	return xReturn;
 80109d4:	68fb      	ldr	r3, [r7, #12]
}
 80109d6:	4618      	mov	r0, r3
 80109d8:	3710      	adds	r7, #16
 80109da:	46bd      	mov	sp, r7
 80109dc:	bd80      	pop	{r7, pc}
	...

080109e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80109e0:	b480      	push	{r7}
 80109e2:	b085      	sub	sp, #20
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
 80109e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80109ea:	2300      	movs	r3, #0
 80109ec:	60fb      	str	r3, [r7, #12]
 80109ee:	e014      	b.n	8010a1a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80109f0:	4a0f      	ldr	r2, [pc, #60]	; (8010a30 <vQueueAddToRegistry+0x50>)
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d10b      	bne.n	8010a14 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80109fc:	490c      	ldr	r1, [pc, #48]	; (8010a30 <vQueueAddToRegistry+0x50>)
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	683a      	ldr	r2, [r7, #0]
 8010a02:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010a06:	4a0a      	ldr	r2, [pc, #40]	; (8010a30 <vQueueAddToRegistry+0x50>)
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	00db      	lsls	r3, r3, #3
 8010a0c:	4413      	add	r3, r2
 8010a0e:	687a      	ldr	r2, [r7, #4]
 8010a10:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010a12:	e006      	b.n	8010a22 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	3301      	adds	r3, #1
 8010a18:	60fb      	str	r3, [r7, #12]
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	2b07      	cmp	r3, #7
 8010a1e:	d9e7      	bls.n	80109f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010a20:	bf00      	nop
 8010a22:	bf00      	nop
 8010a24:	3714      	adds	r7, #20
 8010a26:	46bd      	mov	sp, r7
 8010a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a2c:	4770      	bx	lr
 8010a2e:	bf00      	nop
 8010a30:	20007c44 	.word	0x20007c44

08010a34 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010a34:	b480      	push	{r7}
 8010a36:	b085      	sub	sp, #20
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	60fb      	str	r3, [r7, #12]
 8010a40:	e016      	b.n	8010a70 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010a42:	4a10      	ldr	r2, [pc, #64]	; (8010a84 <vQueueUnregisterQueue+0x50>)
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	00db      	lsls	r3, r3, #3
 8010a48:	4413      	add	r3, r2
 8010a4a:	685b      	ldr	r3, [r3, #4]
 8010a4c:	687a      	ldr	r2, [r7, #4]
 8010a4e:	429a      	cmp	r2, r3
 8010a50:	d10b      	bne.n	8010a6a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010a52:	4a0c      	ldr	r2, [pc, #48]	; (8010a84 <vQueueUnregisterQueue+0x50>)
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	2100      	movs	r1, #0
 8010a58:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010a5c:	4a09      	ldr	r2, [pc, #36]	; (8010a84 <vQueueUnregisterQueue+0x50>)
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	00db      	lsls	r3, r3, #3
 8010a62:	4413      	add	r3, r2
 8010a64:	2200      	movs	r2, #0
 8010a66:	605a      	str	r2, [r3, #4]
				break;
 8010a68:	e006      	b.n	8010a78 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	3301      	adds	r3, #1
 8010a6e:	60fb      	str	r3, [r7, #12]
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	2b07      	cmp	r3, #7
 8010a74:	d9e5      	bls.n	8010a42 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8010a76:	bf00      	nop
 8010a78:	bf00      	nop
 8010a7a:	3714      	adds	r7, #20
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a82:	4770      	bx	lr
 8010a84:	20007c44 	.word	0x20007c44

08010a88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010a88:	b580      	push	{r7, lr}
 8010a8a:	b086      	sub	sp, #24
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	60f8      	str	r0, [r7, #12]
 8010a90:	60b9      	str	r1, [r7, #8]
 8010a92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010a98:	f001 fd0c 	bl	80124b4 <vPortEnterCritical>
 8010a9c:	697b      	ldr	r3, [r7, #20]
 8010a9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010aa2:	b25b      	sxtb	r3, r3
 8010aa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010aa8:	d103      	bne.n	8010ab2 <vQueueWaitForMessageRestricted+0x2a>
 8010aaa:	697b      	ldr	r3, [r7, #20]
 8010aac:	2200      	movs	r2, #0
 8010aae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010ab2:	697b      	ldr	r3, [r7, #20]
 8010ab4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010ab8:	b25b      	sxtb	r3, r3
 8010aba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010abe:	d103      	bne.n	8010ac8 <vQueueWaitForMessageRestricted+0x40>
 8010ac0:	697b      	ldr	r3, [r7, #20]
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010ac8:	f001 fd24 	bl	8012514 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010acc:	697b      	ldr	r3, [r7, #20]
 8010ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d106      	bne.n	8010ae2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010ad4:	697b      	ldr	r3, [r7, #20]
 8010ad6:	3324      	adds	r3, #36	; 0x24
 8010ad8:	687a      	ldr	r2, [r7, #4]
 8010ada:	68b9      	ldr	r1, [r7, #8]
 8010adc:	4618      	mov	r0, r3
 8010ade:	f000 fc9f 	bl	8011420 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010ae2:	6978      	ldr	r0, [r7, #20]
 8010ae4:	f7ff fefb 	bl	80108de <prvUnlockQueue>
	}
 8010ae8:	bf00      	nop
 8010aea:	3718      	adds	r7, #24
 8010aec:	46bd      	mov	sp, r7
 8010aee:	bd80      	pop	{r7, pc}

08010af0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b08e      	sub	sp, #56	; 0x38
 8010af4:	af04      	add	r7, sp, #16
 8010af6:	60f8      	str	r0, [r7, #12]
 8010af8:	60b9      	str	r1, [r7, #8]
 8010afa:	607a      	str	r2, [r7, #4]
 8010afc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d10a      	bne.n	8010b1a <xTaskCreateStatic+0x2a>
	__asm volatile
 8010b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b08:	f383 8811 	msr	BASEPRI, r3
 8010b0c:	f3bf 8f6f 	isb	sy
 8010b10:	f3bf 8f4f 	dsb	sy
 8010b14:	623b      	str	r3, [r7, #32]
}
 8010b16:	bf00      	nop
 8010b18:	e7fe      	b.n	8010b18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d10a      	bne.n	8010b36 <xTaskCreateStatic+0x46>
	__asm volatile
 8010b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b24:	f383 8811 	msr	BASEPRI, r3
 8010b28:	f3bf 8f6f 	isb	sy
 8010b2c:	f3bf 8f4f 	dsb	sy
 8010b30:	61fb      	str	r3, [r7, #28]
}
 8010b32:	bf00      	nop
 8010b34:	e7fe      	b.n	8010b34 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010b36:	23bc      	movs	r3, #188	; 0xbc
 8010b38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010b3a:	693b      	ldr	r3, [r7, #16]
 8010b3c:	2bbc      	cmp	r3, #188	; 0xbc
 8010b3e:	d00a      	beq.n	8010b56 <xTaskCreateStatic+0x66>
	__asm volatile
 8010b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b44:	f383 8811 	msr	BASEPRI, r3
 8010b48:	f3bf 8f6f 	isb	sy
 8010b4c:	f3bf 8f4f 	dsb	sy
 8010b50:	61bb      	str	r3, [r7, #24]
}
 8010b52:	bf00      	nop
 8010b54:	e7fe      	b.n	8010b54 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010b56:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d01e      	beq.n	8010b9c <xTaskCreateStatic+0xac>
 8010b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d01b      	beq.n	8010b9c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b66:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010b6c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b70:	2202      	movs	r2, #2
 8010b72:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010b76:	2300      	movs	r3, #0
 8010b78:	9303      	str	r3, [sp, #12]
 8010b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b7c:	9302      	str	r3, [sp, #8]
 8010b7e:	f107 0314 	add.w	r3, r7, #20
 8010b82:	9301      	str	r3, [sp, #4]
 8010b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b86:	9300      	str	r3, [sp, #0]
 8010b88:	683b      	ldr	r3, [r7, #0]
 8010b8a:	687a      	ldr	r2, [r7, #4]
 8010b8c:	68b9      	ldr	r1, [r7, #8]
 8010b8e:	68f8      	ldr	r0, [r7, #12]
 8010b90:	f000 f850 	bl	8010c34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010b94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010b96:	f000 f8f3 	bl	8010d80 <prvAddNewTaskToReadyList>
 8010b9a:	e001      	b.n	8010ba0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010ba0:	697b      	ldr	r3, [r7, #20]
	}
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	3728      	adds	r7, #40	; 0x28
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	bd80      	pop	{r7, pc}

08010baa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010baa:	b580      	push	{r7, lr}
 8010bac:	b08c      	sub	sp, #48	; 0x30
 8010bae:	af04      	add	r7, sp, #16
 8010bb0:	60f8      	str	r0, [r7, #12]
 8010bb2:	60b9      	str	r1, [r7, #8]
 8010bb4:	603b      	str	r3, [r7, #0]
 8010bb6:	4613      	mov	r3, r2
 8010bb8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010bba:	88fb      	ldrh	r3, [r7, #6]
 8010bbc:	009b      	lsls	r3, r3, #2
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	f001 fd9a 	bl	80126f8 <pvPortMalloc>
 8010bc4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010bc6:	697b      	ldr	r3, [r7, #20]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d00e      	beq.n	8010bea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010bcc:	20bc      	movs	r0, #188	; 0xbc
 8010bce:	f001 fd93 	bl	80126f8 <pvPortMalloc>
 8010bd2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010bd4:	69fb      	ldr	r3, [r7, #28]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d003      	beq.n	8010be2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010bda:	69fb      	ldr	r3, [r7, #28]
 8010bdc:	697a      	ldr	r2, [r7, #20]
 8010bde:	631a      	str	r2, [r3, #48]	; 0x30
 8010be0:	e005      	b.n	8010bee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010be2:	6978      	ldr	r0, [r7, #20]
 8010be4:	f001 fe2c 	bl	8012840 <vPortFree>
 8010be8:	e001      	b.n	8010bee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010bea:	2300      	movs	r3, #0
 8010bec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010bee:	69fb      	ldr	r3, [r7, #28]
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d017      	beq.n	8010c24 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010bf4:	69fb      	ldr	r3, [r7, #28]
 8010bf6:	2200      	movs	r2, #0
 8010bf8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010bfc:	88fa      	ldrh	r2, [r7, #6]
 8010bfe:	2300      	movs	r3, #0
 8010c00:	9303      	str	r3, [sp, #12]
 8010c02:	69fb      	ldr	r3, [r7, #28]
 8010c04:	9302      	str	r3, [sp, #8]
 8010c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c08:	9301      	str	r3, [sp, #4]
 8010c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c0c:	9300      	str	r3, [sp, #0]
 8010c0e:	683b      	ldr	r3, [r7, #0]
 8010c10:	68b9      	ldr	r1, [r7, #8]
 8010c12:	68f8      	ldr	r0, [r7, #12]
 8010c14:	f000 f80e 	bl	8010c34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010c18:	69f8      	ldr	r0, [r7, #28]
 8010c1a:	f000 f8b1 	bl	8010d80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010c1e:	2301      	movs	r3, #1
 8010c20:	61bb      	str	r3, [r7, #24]
 8010c22:	e002      	b.n	8010c2a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010c24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010c28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010c2a:	69bb      	ldr	r3, [r7, #24]
	}
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	3720      	adds	r7, #32
 8010c30:	46bd      	mov	sp, r7
 8010c32:	bd80      	pop	{r7, pc}

08010c34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010c34:	b580      	push	{r7, lr}
 8010c36:	b088      	sub	sp, #32
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	60f8      	str	r0, [r7, #12]
 8010c3c:	60b9      	str	r1, [r7, #8]
 8010c3e:	607a      	str	r2, [r7, #4]
 8010c40:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c44:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	009b      	lsls	r3, r3, #2
 8010c4a:	461a      	mov	r2, r3
 8010c4c:	21a5      	movs	r1, #165	; 0xa5
 8010c4e:	f002 f966 	bl	8012f1e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010c5c:	3b01      	subs	r3, #1
 8010c5e:	009b      	lsls	r3, r3, #2
 8010c60:	4413      	add	r3, r2
 8010c62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010c64:	69bb      	ldr	r3, [r7, #24]
 8010c66:	f023 0307 	bic.w	r3, r3, #7
 8010c6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010c6c:	69bb      	ldr	r3, [r7, #24]
 8010c6e:	f003 0307 	and.w	r3, r3, #7
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d00a      	beq.n	8010c8c <prvInitialiseNewTask+0x58>
	__asm volatile
 8010c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c7a:	f383 8811 	msr	BASEPRI, r3
 8010c7e:	f3bf 8f6f 	isb	sy
 8010c82:	f3bf 8f4f 	dsb	sy
 8010c86:	617b      	str	r3, [r7, #20]
}
 8010c88:	bf00      	nop
 8010c8a:	e7fe      	b.n	8010c8a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010c8c:	68bb      	ldr	r3, [r7, #8]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d01f      	beq.n	8010cd2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010c92:	2300      	movs	r3, #0
 8010c94:	61fb      	str	r3, [r7, #28]
 8010c96:	e012      	b.n	8010cbe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010c98:	68ba      	ldr	r2, [r7, #8]
 8010c9a:	69fb      	ldr	r3, [r7, #28]
 8010c9c:	4413      	add	r3, r2
 8010c9e:	7819      	ldrb	r1, [r3, #0]
 8010ca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ca2:	69fb      	ldr	r3, [r7, #28]
 8010ca4:	4413      	add	r3, r2
 8010ca6:	3334      	adds	r3, #52	; 0x34
 8010ca8:	460a      	mov	r2, r1
 8010caa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010cac:	68ba      	ldr	r2, [r7, #8]
 8010cae:	69fb      	ldr	r3, [r7, #28]
 8010cb0:	4413      	add	r3, r2
 8010cb2:	781b      	ldrb	r3, [r3, #0]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d006      	beq.n	8010cc6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010cb8:	69fb      	ldr	r3, [r7, #28]
 8010cba:	3301      	adds	r3, #1
 8010cbc:	61fb      	str	r3, [r7, #28]
 8010cbe:	69fb      	ldr	r3, [r7, #28]
 8010cc0:	2b0f      	cmp	r3, #15
 8010cc2:	d9e9      	bls.n	8010c98 <prvInitialiseNewTask+0x64>
 8010cc4:	e000      	b.n	8010cc8 <prvInitialiseNewTask+0x94>
			{
				break;
 8010cc6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cca:	2200      	movs	r2, #0
 8010ccc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010cd0:	e003      	b.n	8010cda <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cd4:	2200      	movs	r2, #0
 8010cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cdc:	2b37      	cmp	r3, #55	; 0x37
 8010cde:	d901      	bls.n	8010ce4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010ce0:	2337      	movs	r3, #55	; 0x37
 8010ce2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ce6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010ce8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010cee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8010cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cf8:	3304      	adds	r3, #4
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	f7fe fe1a 	bl	800f934 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d02:	3318      	adds	r3, #24
 8010d04:	4618      	mov	r0, r3
 8010d06:	f7fe fe15 	bl	800f934 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d12:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d1e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d22:	2200      	movs	r2, #0
 8010d24:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d2a:	2200      	movs	r2, #0
 8010d2c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d32:	3354      	adds	r3, #84	; 0x54
 8010d34:	2260      	movs	r2, #96	; 0x60
 8010d36:	2100      	movs	r1, #0
 8010d38:	4618      	mov	r0, r3
 8010d3a:	f002 f8f0 	bl	8012f1e <memset>
 8010d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d40:	4a0c      	ldr	r2, [pc, #48]	; (8010d74 <prvInitialiseNewTask+0x140>)
 8010d42:	659a      	str	r2, [r3, #88]	; 0x58
 8010d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d46:	4a0c      	ldr	r2, [pc, #48]	; (8010d78 <prvInitialiseNewTask+0x144>)
 8010d48:	65da      	str	r2, [r3, #92]	; 0x5c
 8010d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d4c:	4a0b      	ldr	r2, [pc, #44]	; (8010d7c <prvInitialiseNewTask+0x148>)
 8010d4e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010d50:	683a      	ldr	r2, [r7, #0]
 8010d52:	68f9      	ldr	r1, [r7, #12]
 8010d54:	69b8      	ldr	r0, [r7, #24]
 8010d56:	f001 fa7d 	bl	8012254 <pxPortInitialiseStack>
 8010d5a:	4602      	mov	r2, r0
 8010d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d5e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d002      	beq.n	8010d6c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d6a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010d6c:	bf00      	nop
 8010d6e:	3720      	adds	r7, #32
 8010d70:	46bd      	mov	sp, r7
 8010d72:	bd80      	pop	{r7, pc}
 8010d74:	08018e94 	.word	0x08018e94
 8010d78:	08018eb4 	.word	0x08018eb4
 8010d7c:	08018e74 	.word	0x08018e74

08010d80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b082      	sub	sp, #8
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010d88:	f001 fb94 	bl	80124b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010d8c:	4b2d      	ldr	r3, [pc, #180]	; (8010e44 <prvAddNewTaskToReadyList+0xc4>)
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	3301      	adds	r3, #1
 8010d92:	4a2c      	ldr	r2, [pc, #176]	; (8010e44 <prvAddNewTaskToReadyList+0xc4>)
 8010d94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010d96:	4b2c      	ldr	r3, [pc, #176]	; (8010e48 <prvAddNewTaskToReadyList+0xc8>)
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d109      	bne.n	8010db2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010d9e:	4a2a      	ldr	r2, [pc, #168]	; (8010e48 <prvAddNewTaskToReadyList+0xc8>)
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010da4:	4b27      	ldr	r3, [pc, #156]	; (8010e44 <prvAddNewTaskToReadyList+0xc4>)
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	2b01      	cmp	r3, #1
 8010daa:	d110      	bne.n	8010dce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010dac:	f000 fc64 	bl	8011678 <prvInitialiseTaskLists>
 8010db0:	e00d      	b.n	8010dce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010db2:	4b26      	ldr	r3, [pc, #152]	; (8010e4c <prvAddNewTaskToReadyList+0xcc>)
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d109      	bne.n	8010dce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010dba:	4b23      	ldr	r3, [pc, #140]	; (8010e48 <prvAddNewTaskToReadyList+0xc8>)
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dc4:	429a      	cmp	r2, r3
 8010dc6:	d802      	bhi.n	8010dce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010dc8:	4a1f      	ldr	r2, [pc, #124]	; (8010e48 <prvAddNewTaskToReadyList+0xc8>)
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010dce:	4b20      	ldr	r3, [pc, #128]	; (8010e50 <prvAddNewTaskToReadyList+0xd0>)
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	3301      	adds	r3, #1
 8010dd4:	4a1e      	ldr	r2, [pc, #120]	; (8010e50 <prvAddNewTaskToReadyList+0xd0>)
 8010dd6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010dd8:	4b1d      	ldr	r3, [pc, #116]	; (8010e50 <prvAddNewTaskToReadyList+0xd0>)
 8010dda:	681a      	ldr	r2, [r3, #0]
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010de4:	4b1b      	ldr	r3, [pc, #108]	; (8010e54 <prvAddNewTaskToReadyList+0xd4>)
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	429a      	cmp	r2, r3
 8010dea:	d903      	bls.n	8010df4 <prvAddNewTaskToReadyList+0x74>
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010df0:	4a18      	ldr	r2, [pc, #96]	; (8010e54 <prvAddNewTaskToReadyList+0xd4>)
 8010df2:	6013      	str	r3, [r2, #0]
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010df8:	4613      	mov	r3, r2
 8010dfa:	009b      	lsls	r3, r3, #2
 8010dfc:	4413      	add	r3, r2
 8010dfe:	009b      	lsls	r3, r3, #2
 8010e00:	4a15      	ldr	r2, [pc, #84]	; (8010e58 <prvAddNewTaskToReadyList+0xd8>)
 8010e02:	441a      	add	r2, r3
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	3304      	adds	r3, #4
 8010e08:	4619      	mov	r1, r3
 8010e0a:	4610      	mov	r0, r2
 8010e0c:	f7fe fd9f 	bl	800f94e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010e10:	f001 fb80 	bl	8012514 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010e14:	4b0d      	ldr	r3, [pc, #52]	; (8010e4c <prvAddNewTaskToReadyList+0xcc>)
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d00e      	beq.n	8010e3a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010e1c:	4b0a      	ldr	r3, [pc, #40]	; (8010e48 <prvAddNewTaskToReadyList+0xc8>)
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e26:	429a      	cmp	r2, r3
 8010e28:	d207      	bcs.n	8010e3a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010e2a:	4b0c      	ldr	r3, [pc, #48]	; (8010e5c <prvAddNewTaskToReadyList+0xdc>)
 8010e2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e30:	601a      	str	r2, [r3, #0]
 8010e32:	f3bf 8f4f 	dsb	sy
 8010e36:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010e3a:	bf00      	nop
 8010e3c:	3708      	adds	r7, #8
 8010e3e:	46bd      	mov	sp, r7
 8010e40:	bd80      	pop	{r7, pc}
 8010e42:	bf00      	nop
 8010e44:	20008158 	.word	0x20008158
 8010e48:	20007c84 	.word	0x20007c84
 8010e4c:	20008164 	.word	0x20008164
 8010e50:	20008174 	.word	0x20008174
 8010e54:	20008160 	.word	0x20008160
 8010e58:	20007c88 	.word	0x20007c88
 8010e5c:	e000ed04 	.word	0xe000ed04

08010e60 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8010e60:	b580      	push	{r7, lr}
 8010e62:	b084      	sub	sp, #16
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8010e68:	f001 fb24 	bl	80124b4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d102      	bne.n	8010e78 <vTaskDelete+0x18>
 8010e72:	4b2c      	ldr	r3, [pc, #176]	; (8010f24 <vTaskDelete+0xc4>)
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	e000      	b.n	8010e7a <vTaskDelete+0x1a>
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	3304      	adds	r3, #4
 8010e80:	4618      	mov	r0, r3
 8010e82:	f7fe fdc1 	bl	800fa08 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d004      	beq.n	8010e98 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	3318      	adds	r3, #24
 8010e92:	4618      	mov	r0, r3
 8010e94:	f7fe fdb8 	bl	800fa08 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8010e98:	4b23      	ldr	r3, [pc, #140]	; (8010f28 <vTaskDelete+0xc8>)
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	3301      	adds	r3, #1
 8010e9e:	4a22      	ldr	r2, [pc, #136]	; (8010f28 <vTaskDelete+0xc8>)
 8010ea0:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8010ea2:	4b20      	ldr	r3, [pc, #128]	; (8010f24 <vTaskDelete+0xc4>)
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	68fa      	ldr	r2, [r7, #12]
 8010ea8:	429a      	cmp	r2, r3
 8010eaa:	d10b      	bne.n	8010ec4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	3304      	adds	r3, #4
 8010eb0:	4619      	mov	r1, r3
 8010eb2:	481e      	ldr	r0, [pc, #120]	; (8010f2c <vTaskDelete+0xcc>)
 8010eb4:	f7fe fd4b 	bl	800f94e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8010eb8:	4b1d      	ldr	r3, [pc, #116]	; (8010f30 <vTaskDelete+0xd0>)
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	3301      	adds	r3, #1
 8010ebe:	4a1c      	ldr	r2, [pc, #112]	; (8010f30 <vTaskDelete+0xd0>)
 8010ec0:	6013      	str	r3, [r2, #0]
 8010ec2:	e009      	b.n	8010ed8 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8010ec4:	4b1b      	ldr	r3, [pc, #108]	; (8010f34 <vTaskDelete+0xd4>)
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	3b01      	subs	r3, #1
 8010eca:	4a1a      	ldr	r2, [pc, #104]	; (8010f34 <vTaskDelete+0xd4>)
 8010ecc:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8010ece:	68f8      	ldr	r0, [r7, #12]
 8010ed0:	f000 fc40 	bl	8011754 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8010ed4:	f000 fc72 	bl	80117bc <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8010ed8:	f001 fb1c 	bl	8012514 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8010edc:	4b16      	ldr	r3, [pc, #88]	; (8010f38 <vTaskDelete+0xd8>)
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d01b      	beq.n	8010f1c <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8010ee4:	4b0f      	ldr	r3, [pc, #60]	; (8010f24 <vTaskDelete+0xc4>)
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	68fa      	ldr	r2, [r7, #12]
 8010eea:	429a      	cmp	r2, r3
 8010eec:	d116      	bne.n	8010f1c <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8010eee:	4b13      	ldr	r3, [pc, #76]	; (8010f3c <vTaskDelete+0xdc>)
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d00a      	beq.n	8010f0c <vTaskDelete+0xac>
	__asm volatile
 8010ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010efa:	f383 8811 	msr	BASEPRI, r3
 8010efe:	f3bf 8f6f 	isb	sy
 8010f02:	f3bf 8f4f 	dsb	sy
 8010f06:	60bb      	str	r3, [r7, #8]
}
 8010f08:	bf00      	nop
 8010f0a:	e7fe      	b.n	8010f0a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8010f0c:	4b0c      	ldr	r3, [pc, #48]	; (8010f40 <vTaskDelete+0xe0>)
 8010f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f12:	601a      	str	r2, [r3, #0]
 8010f14:	f3bf 8f4f 	dsb	sy
 8010f18:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010f1c:	bf00      	nop
 8010f1e:	3710      	adds	r7, #16
 8010f20:	46bd      	mov	sp, r7
 8010f22:	bd80      	pop	{r7, pc}
 8010f24:	20007c84 	.word	0x20007c84
 8010f28:	20008174 	.word	0x20008174
 8010f2c:	2000812c 	.word	0x2000812c
 8010f30:	20008140 	.word	0x20008140
 8010f34:	20008158 	.word	0x20008158
 8010f38:	20008164 	.word	0x20008164
 8010f3c:	20008180 	.word	0x20008180
 8010f40:	e000ed04 	.word	0xe000ed04

08010f44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010f44:	b580      	push	{r7, lr}
 8010f46:	b08a      	sub	sp, #40	; 0x28
 8010f48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010f4e:	2300      	movs	r3, #0
 8010f50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010f52:	463a      	mov	r2, r7
 8010f54:	1d39      	adds	r1, r7, #4
 8010f56:	f107 0308 	add.w	r3, r7, #8
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	f7fe fc96 	bl	800f88c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010f60:	6839      	ldr	r1, [r7, #0]
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	68ba      	ldr	r2, [r7, #8]
 8010f66:	9202      	str	r2, [sp, #8]
 8010f68:	9301      	str	r3, [sp, #4]
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	9300      	str	r3, [sp, #0]
 8010f6e:	2300      	movs	r3, #0
 8010f70:	460a      	mov	r2, r1
 8010f72:	4924      	ldr	r1, [pc, #144]	; (8011004 <vTaskStartScheduler+0xc0>)
 8010f74:	4824      	ldr	r0, [pc, #144]	; (8011008 <vTaskStartScheduler+0xc4>)
 8010f76:	f7ff fdbb 	bl	8010af0 <xTaskCreateStatic>
 8010f7a:	4603      	mov	r3, r0
 8010f7c:	4a23      	ldr	r2, [pc, #140]	; (801100c <vTaskStartScheduler+0xc8>)
 8010f7e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010f80:	4b22      	ldr	r3, [pc, #136]	; (801100c <vTaskStartScheduler+0xc8>)
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d002      	beq.n	8010f8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010f88:	2301      	movs	r3, #1
 8010f8a:	617b      	str	r3, [r7, #20]
 8010f8c:	e001      	b.n	8010f92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010f8e:	2300      	movs	r3, #0
 8010f90:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010f92:	697b      	ldr	r3, [r7, #20]
 8010f94:	2b01      	cmp	r3, #1
 8010f96:	d102      	bne.n	8010f9e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8010f98:	f000 fe0e 	bl	8011bb8 <xTimerCreateTimerTask>
 8010f9c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010f9e:	697b      	ldr	r3, [r7, #20]
 8010fa0:	2b01      	cmp	r3, #1
 8010fa2:	d11b      	bne.n	8010fdc <vTaskStartScheduler+0x98>
	__asm volatile
 8010fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fa8:	f383 8811 	msr	BASEPRI, r3
 8010fac:	f3bf 8f6f 	isb	sy
 8010fb0:	f3bf 8f4f 	dsb	sy
 8010fb4:	613b      	str	r3, [r7, #16]
}
 8010fb6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010fb8:	4b15      	ldr	r3, [pc, #84]	; (8011010 <vTaskStartScheduler+0xcc>)
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	3354      	adds	r3, #84	; 0x54
 8010fbe:	4a15      	ldr	r2, [pc, #84]	; (8011014 <vTaskStartScheduler+0xd0>)
 8010fc0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010fc2:	4b15      	ldr	r3, [pc, #84]	; (8011018 <vTaskStartScheduler+0xd4>)
 8010fc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010fc8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010fca:	4b14      	ldr	r3, [pc, #80]	; (801101c <vTaskStartScheduler+0xd8>)
 8010fcc:	2201      	movs	r2, #1
 8010fce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010fd0:	4b13      	ldr	r3, [pc, #76]	; (8011020 <vTaskStartScheduler+0xdc>)
 8010fd2:	2200      	movs	r2, #0
 8010fd4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010fd6:	f001 f9cb 	bl	8012370 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010fda:	e00e      	b.n	8010ffa <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010fdc:	697b      	ldr	r3, [r7, #20]
 8010fde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010fe2:	d10a      	bne.n	8010ffa <vTaskStartScheduler+0xb6>
	__asm volatile
 8010fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fe8:	f383 8811 	msr	BASEPRI, r3
 8010fec:	f3bf 8f6f 	isb	sy
 8010ff0:	f3bf 8f4f 	dsb	sy
 8010ff4:	60fb      	str	r3, [r7, #12]
}
 8010ff6:	bf00      	nop
 8010ff8:	e7fe      	b.n	8010ff8 <vTaskStartScheduler+0xb4>
}
 8010ffa:	bf00      	nop
 8010ffc:	3718      	adds	r7, #24
 8010ffe:	46bd      	mov	sp, r7
 8011000:	bd80      	pop	{r7, pc}
 8011002:	bf00      	nop
 8011004:	08017d30 	.word	0x08017d30
 8011008:	08011649 	.word	0x08011649
 801100c:	2000817c 	.word	0x2000817c
 8011010:	20007c84 	.word	0x20007c84
 8011014:	20000180 	.word	0x20000180
 8011018:	20008178 	.word	0x20008178
 801101c:	20008164 	.word	0x20008164
 8011020:	2000815c 	.word	0x2000815c

08011024 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011024:	b480      	push	{r7}
 8011026:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011028:	4b04      	ldr	r3, [pc, #16]	; (801103c <vTaskSuspendAll+0x18>)
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	3301      	adds	r3, #1
 801102e:	4a03      	ldr	r2, [pc, #12]	; (801103c <vTaskSuspendAll+0x18>)
 8011030:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8011032:	bf00      	nop
 8011034:	46bd      	mov	sp, r7
 8011036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801103a:	4770      	bx	lr
 801103c:	20008180 	.word	0x20008180

08011040 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011040:	b580      	push	{r7, lr}
 8011042:	b084      	sub	sp, #16
 8011044:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011046:	2300      	movs	r3, #0
 8011048:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801104a:	2300      	movs	r3, #0
 801104c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801104e:	4b42      	ldr	r3, [pc, #264]	; (8011158 <xTaskResumeAll+0x118>)
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	2b00      	cmp	r3, #0
 8011054:	d10a      	bne.n	801106c <xTaskResumeAll+0x2c>
	__asm volatile
 8011056:	f04f 0350 	mov.w	r3, #80	; 0x50
 801105a:	f383 8811 	msr	BASEPRI, r3
 801105e:	f3bf 8f6f 	isb	sy
 8011062:	f3bf 8f4f 	dsb	sy
 8011066:	603b      	str	r3, [r7, #0]
}
 8011068:	bf00      	nop
 801106a:	e7fe      	b.n	801106a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801106c:	f001 fa22 	bl	80124b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011070:	4b39      	ldr	r3, [pc, #228]	; (8011158 <xTaskResumeAll+0x118>)
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	3b01      	subs	r3, #1
 8011076:	4a38      	ldr	r2, [pc, #224]	; (8011158 <xTaskResumeAll+0x118>)
 8011078:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801107a:	4b37      	ldr	r3, [pc, #220]	; (8011158 <xTaskResumeAll+0x118>)
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	2b00      	cmp	r3, #0
 8011080:	d162      	bne.n	8011148 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011082:	4b36      	ldr	r3, [pc, #216]	; (801115c <xTaskResumeAll+0x11c>)
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	2b00      	cmp	r3, #0
 8011088:	d05e      	beq.n	8011148 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801108a:	e02f      	b.n	80110ec <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801108c:	4b34      	ldr	r3, [pc, #208]	; (8011160 <xTaskResumeAll+0x120>)
 801108e:	68db      	ldr	r3, [r3, #12]
 8011090:	68db      	ldr	r3, [r3, #12]
 8011092:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	3318      	adds	r3, #24
 8011098:	4618      	mov	r0, r3
 801109a:	f7fe fcb5 	bl	800fa08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	3304      	adds	r3, #4
 80110a2:	4618      	mov	r0, r3
 80110a4:	f7fe fcb0 	bl	800fa08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110ac:	4b2d      	ldr	r3, [pc, #180]	; (8011164 <xTaskResumeAll+0x124>)
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	429a      	cmp	r2, r3
 80110b2:	d903      	bls.n	80110bc <xTaskResumeAll+0x7c>
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110b8:	4a2a      	ldr	r2, [pc, #168]	; (8011164 <xTaskResumeAll+0x124>)
 80110ba:	6013      	str	r3, [r2, #0]
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110c0:	4613      	mov	r3, r2
 80110c2:	009b      	lsls	r3, r3, #2
 80110c4:	4413      	add	r3, r2
 80110c6:	009b      	lsls	r3, r3, #2
 80110c8:	4a27      	ldr	r2, [pc, #156]	; (8011168 <xTaskResumeAll+0x128>)
 80110ca:	441a      	add	r2, r3
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	3304      	adds	r3, #4
 80110d0:	4619      	mov	r1, r3
 80110d2:	4610      	mov	r0, r2
 80110d4:	f7fe fc3b 	bl	800f94e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110dc:	4b23      	ldr	r3, [pc, #140]	; (801116c <xTaskResumeAll+0x12c>)
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110e2:	429a      	cmp	r2, r3
 80110e4:	d302      	bcc.n	80110ec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80110e6:	4b22      	ldr	r3, [pc, #136]	; (8011170 <xTaskResumeAll+0x130>)
 80110e8:	2201      	movs	r2, #1
 80110ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80110ec:	4b1c      	ldr	r3, [pc, #112]	; (8011160 <xTaskResumeAll+0x120>)
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d1cb      	bne.n	801108c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d001      	beq.n	80110fe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80110fa:	f000 fb5f 	bl	80117bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80110fe:	4b1d      	ldr	r3, [pc, #116]	; (8011174 <xTaskResumeAll+0x134>)
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	2b00      	cmp	r3, #0
 8011108:	d010      	beq.n	801112c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801110a:	f000 f847 	bl	801119c <xTaskIncrementTick>
 801110e:	4603      	mov	r3, r0
 8011110:	2b00      	cmp	r3, #0
 8011112:	d002      	beq.n	801111a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8011114:	4b16      	ldr	r3, [pc, #88]	; (8011170 <xTaskResumeAll+0x130>)
 8011116:	2201      	movs	r2, #1
 8011118:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	3b01      	subs	r3, #1
 801111e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d1f1      	bne.n	801110a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8011126:	4b13      	ldr	r3, [pc, #76]	; (8011174 <xTaskResumeAll+0x134>)
 8011128:	2200      	movs	r2, #0
 801112a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801112c:	4b10      	ldr	r3, [pc, #64]	; (8011170 <xTaskResumeAll+0x130>)
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d009      	beq.n	8011148 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011134:	2301      	movs	r3, #1
 8011136:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011138:	4b0f      	ldr	r3, [pc, #60]	; (8011178 <xTaskResumeAll+0x138>)
 801113a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801113e:	601a      	str	r2, [r3, #0]
 8011140:	f3bf 8f4f 	dsb	sy
 8011144:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011148:	f001 f9e4 	bl	8012514 <vPortExitCritical>

	return xAlreadyYielded;
 801114c:	68bb      	ldr	r3, [r7, #8]
}
 801114e:	4618      	mov	r0, r3
 8011150:	3710      	adds	r7, #16
 8011152:	46bd      	mov	sp, r7
 8011154:	bd80      	pop	{r7, pc}
 8011156:	bf00      	nop
 8011158:	20008180 	.word	0x20008180
 801115c:	20008158 	.word	0x20008158
 8011160:	20008118 	.word	0x20008118
 8011164:	20008160 	.word	0x20008160
 8011168:	20007c88 	.word	0x20007c88
 801116c:	20007c84 	.word	0x20007c84
 8011170:	2000816c 	.word	0x2000816c
 8011174:	20008168 	.word	0x20008168
 8011178:	e000ed04 	.word	0xe000ed04

0801117c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801117c:	b480      	push	{r7}
 801117e:	b083      	sub	sp, #12
 8011180:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011182:	4b05      	ldr	r3, [pc, #20]	; (8011198 <xTaskGetTickCount+0x1c>)
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011188:	687b      	ldr	r3, [r7, #4]
}
 801118a:	4618      	mov	r0, r3
 801118c:	370c      	adds	r7, #12
 801118e:	46bd      	mov	sp, r7
 8011190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011194:	4770      	bx	lr
 8011196:	bf00      	nop
 8011198:	2000815c 	.word	0x2000815c

0801119c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801119c:	b580      	push	{r7, lr}
 801119e:	b086      	sub	sp, #24
 80111a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80111a2:	2300      	movs	r3, #0
 80111a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80111a6:	4b4f      	ldr	r3, [pc, #316]	; (80112e4 <xTaskIncrementTick+0x148>)
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	f040 808f 	bne.w	80112ce <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80111b0:	4b4d      	ldr	r3, [pc, #308]	; (80112e8 <xTaskIncrementTick+0x14c>)
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	3301      	adds	r3, #1
 80111b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80111b8:	4a4b      	ldr	r2, [pc, #300]	; (80112e8 <xTaskIncrementTick+0x14c>)
 80111ba:	693b      	ldr	r3, [r7, #16]
 80111bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80111be:	693b      	ldr	r3, [r7, #16]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d120      	bne.n	8011206 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80111c4:	4b49      	ldr	r3, [pc, #292]	; (80112ec <xTaskIncrementTick+0x150>)
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d00a      	beq.n	80111e4 <xTaskIncrementTick+0x48>
	__asm volatile
 80111ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111d2:	f383 8811 	msr	BASEPRI, r3
 80111d6:	f3bf 8f6f 	isb	sy
 80111da:	f3bf 8f4f 	dsb	sy
 80111de:	603b      	str	r3, [r7, #0]
}
 80111e0:	bf00      	nop
 80111e2:	e7fe      	b.n	80111e2 <xTaskIncrementTick+0x46>
 80111e4:	4b41      	ldr	r3, [pc, #260]	; (80112ec <xTaskIncrementTick+0x150>)
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	60fb      	str	r3, [r7, #12]
 80111ea:	4b41      	ldr	r3, [pc, #260]	; (80112f0 <xTaskIncrementTick+0x154>)
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	4a3f      	ldr	r2, [pc, #252]	; (80112ec <xTaskIncrementTick+0x150>)
 80111f0:	6013      	str	r3, [r2, #0]
 80111f2:	4a3f      	ldr	r2, [pc, #252]	; (80112f0 <xTaskIncrementTick+0x154>)
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	6013      	str	r3, [r2, #0]
 80111f8:	4b3e      	ldr	r3, [pc, #248]	; (80112f4 <xTaskIncrementTick+0x158>)
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	3301      	adds	r3, #1
 80111fe:	4a3d      	ldr	r2, [pc, #244]	; (80112f4 <xTaskIncrementTick+0x158>)
 8011200:	6013      	str	r3, [r2, #0]
 8011202:	f000 fadb 	bl	80117bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011206:	4b3c      	ldr	r3, [pc, #240]	; (80112f8 <xTaskIncrementTick+0x15c>)
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	693a      	ldr	r2, [r7, #16]
 801120c:	429a      	cmp	r2, r3
 801120e:	d349      	bcc.n	80112a4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011210:	4b36      	ldr	r3, [pc, #216]	; (80112ec <xTaskIncrementTick+0x150>)
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d104      	bne.n	8011224 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801121a:	4b37      	ldr	r3, [pc, #220]	; (80112f8 <xTaskIncrementTick+0x15c>)
 801121c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011220:	601a      	str	r2, [r3, #0]
					break;
 8011222:	e03f      	b.n	80112a4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011224:	4b31      	ldr	r3, [pc, #196]	; (80112ec <xTaskIncrementTick+0x150>)
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	68db      	ldr	r3, [r3, #12]
 801122a:	68db      	ldr	r3, [r3, #12]
 801122c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801122e:	68bb      	ldr	r3, [r7, #8]
 8011230:	685b      	ldr	r3, [r3, #4]
 8011232:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011234:	693a      	ldr	r2, [r7, #16]
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	429a      	cmp	r2, r3
 801123a:	d203      	bcs.n	8011244 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801123c:	4a2e      	ldr	r2, [pc, #184]	; (80112f8 <xTaskIncrementTick+0x15c>)
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011242:	e02f      	b.n	80112a4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011244:	68bb      	ldr	r3, [r7, #8]
 8011246:	3304      	adds	r3, #4
 8011248:	4618      	mov	r0, r3
 801124a:	f7fe fbdd 	bl	800fa08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801124e:	68bb      	ldr	r3, [r7, #8]
 8011250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011252:	2b00      	cmp	r3, #0
 8011254:	d004      	beq.n	8011260 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011256:	68bb      	ldr	r3, [r7, #8]
 8011258:	3318      	adds	r3, #24
 801125a:	4618      	mov	r0, r3
 801125c:	f7fe fbd4 	bl	800fa08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011260:	68bb      	ldr	r3, [r7, #8]
 8011262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011264:	4b25      	ldr	r3, [pc, #148]	; (80112fc <xTaskIncrementTick+0x160>)
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	429a      	cmp	r2, r3
 801126a:	d903      	bls.n	8011274 <xTaskIncrementTick+0xd8>
 801126c:	68bb      	ldr	r3, [r7, #8]
 801126e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011270:	4a22      	ldr	r2, [pc, #136]	; (80112fc <xTaskIncrementTick+0x160>)
 8011272:	6013      	str	r3, [r2, #0]
 8011274:	68bb      	ldr	r3, [r7, #8]
 8011276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011278:	4613      	mov	r3, r2
 801127a:	009b      	lsls	r3, r3, #2
 801127c:	4413      	add	r3, r2
 801127e:	009b      	lsls	r3, r3, #2
 8011280:	4a1f      	ldr	r2, [pc, #124]	; (8011300 <xTaskIncrementTick+0x164>)
 8011282:	441a      	add	r2, r3
 8011284:	68bb      	ldr	r3, [r7, #8]
 8011286:	3304      	adds	r3, #4
 8011288:	4619      	mov	r1, r3
 801128a:	4610      	mov	r0, r2
 801128c:	f7fe fb5f 	bl	800f94e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011290:	68bb      	ldr	r3, [r7, #8]
 8011292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011294:	4b1b      	ldr	r3, [pc, #108]	; (8011304 <xTaskIncrementTick+0x168>)
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801129a:	429a      	cmp	r2, r3
 801129c:	d3b8      	bcc.n	8011210 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801129e:	2301      	movs	r3, #1
 80112a0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80112a2:	e7b5      	b.n	8011210 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80112a4:	4b17      	ldr	r3, [pc, #92]	; (8011304 <xTaskIncrementTick+0x168>)
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112aa:	4915      	ldr	r1, [pc, #84]	; (8011300 <xTaskIncrementTick+0x164>)
 80112ac:	4613      	mov	r3, r2
 80112ae:	009b      	lsls	r3, r3, #2
 80112b0:	4413      	add	r3, r2
 80112b2:	009b      	lsls	r3, r3, #2
 80112b4:	440b      	add	r3, r1
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	2b01      	cmp	r3, #1
 80112ba:	d901      	bls.n	80112c0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80112bc:	2301      	movs	r3, #1
 80112be:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80112c0:	4b11      	ldr	r3, [pc, #68]	; (8011308 <xTaskIncrementTick+0x16c>)
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d007      	beq.n	80112d8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80112c8:	2301      	movs	r3, #1
 80112ca:	617b      	str	r3, [r7, #20]
 80112cc:	e004      	b.n	80112d8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80112ce:	4b0f      	ldr	r3, [pc, #60]	; (801130c <xTaskIncrementTick+0x170>)
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	3301      	adds	r3, #1
 80112d4:	4a0d      	ldr	r2, [pc, #52]	; (801130c <xTaskIncrementTick+0x170>)
 80112d6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80112d8:	697b      	ldr	r3, [r7, #20]
}
 80112da:	4618      	mov	r0, r3
 80112dc:	3718      	adds	r7, #24
 80112de:	46bd      	mov	sp, r7
 80112e0:	bd80      	pop	{r7, pc}
 80112e2:	bf00      	nop
 80112e4:	20008180 	.word	0x20008180
 80112e8:	2000815c 	.word	0x2000815c
 80112ec:	20008110 	.word	0x20008110
 80112f0:	20008114 	.word	0x20008114
 80112f4:	20008170 	.word	0x20008170
 80112f8:	20008178 	.word	0x20008178
 80112fc:	20008160 	.word	0x20008160
 8011300:	20007c88 	.word	0x20007c88
 8011304:	20007c84 	.word	0x20007c84
 8011308:	2000816c 	.word	0x2000816c
 801130c:	20008168 	.word	0x20008168

08011310 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011310:	b480      	push	{r7}
 8011312:	b085      	sub	sp, #20
 8011314:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011316:	4b2a      	ldr	r3, [pc, #168]	; (80113c0 <vTaskSwitchContext+0xb0>)
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d003      	beq.n	8011326 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801131e:	4b29      	ldr	r3, [pc, #164]	; (80113c4 <vTaskSwitchContext+0xb4>)
 8011320:	2201      	movs	r2, #1
 8011322:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011324:	e046      	b.n	80113b4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8011326:	4b27      	ldr	r3, [pc, #156]	; (80113c4 <vTaskSwitchContext+0xb4>)
 8011328:	2200      	movs	r2, #0
 801132a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801132c:	4b26      	ldr	r3, [pc, #152]	; (80113c8 <vTaskSwitchContext+0xb8>)
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	60fb      	str	r3, [r7, #12]
 8011332:	e010      	b.n	8011356 <vTaskSwitchContext+0x46>
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	2b00      	cmp	r3, #0
 8011338:	d10a      	bne.n	8011350 <vTaskSwitchContext+0x40>
	__asm volatile
 801133a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801133e:	f383 8811 	msr	BASEPRI, r3
 8011342:	f3bf 8f6f 	isb	sy
 8011346:	f3bf 8f4f 	dsb	sy
 801134a:	607b      	str	r3, [r7, #4]
}
 801134c:	bf00      	nop
 801134e:	e7fe      	b.n	801134e <vTaskSwitchContext+0x3e>
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	3b01      	subs	r3, #1
 8011354:	60fb      	str	r3, [r7, #12]
 8011356:	491d      	ldr	r1, [pc, #116]	; (80113cc <vTaskSwitchContext+0xbc>)
 8011358:	68fa      	ldr	r2, [r7, #12]
 801135a:	4613      	mov	r3, r2
 801135c:	009b      	lsls	r3, r3, #2
 801135e:	4413      	add	r3, r2
 8011360:	009b      	lsls	r3, r3, #2
 8011362:	440b      	add	r3, r1
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	2b00      	cmp	r3, #0
 8011368:	d0e4      	beq.n	8011334 <vTaskSwitchContext+0x24>
 801136a:	68fa      	ldr	r2, [r7, #12]
 801136c:	4613      	mov	r3, r2
 801136e:	009b      	lsls	r3, r3, #2
 8011370:	4413      	add	r3, r2
 8011372:	009b      	lsls	r3, r3, #2
 8011374:	4a15      	ldr	r2, [pc, #84]	; (80113cc <vTaskSwitchContext+0xbc>)
 8011376:	4413      	add	r3, r2
 8011378:	60bb      	str	r3, [r7, #8]
 801137a:	68bb      	ldr	r3, [r7, #8]
 801137c:	685b      	ldr	r3, [r3, #4]
 801137e:	685a      	ldr	r2, [r3, #4]
 8011380:	68bb      	ldr	r3, [r7, #8]
 8011382:	605a      	str	r2, [r3, #4]
 8011384:	68bb      	ldr	r3, [r7, #8]
 8011386:	685a      	ldr	r2, [r3, #4]
 8011388:	68bb      	ldr	r3, [r7, #8]
 801138a:	3308      	adds	r3, #8
 801138c:	429a      	cmp	r2, r3
 801138e:	d104      	bne.n	801139a <vTaskSwitchContext+0x8a>
 8011390:	68bb      	ldr	r3, [r7, #8]
 8011392:	685b      	ldr	r3, [r3, #4]
 8011394:	685a      	ldr	r2, [r3, #4]
 8011396:	68bb      	ldr	r3, [r7, #8]
 8011398:	605a      	str	r2, [r3, #4]
 801139a:	68bb      	ldr	r3, [r7, #8]
 801139c:	685b      	ldr	r3, [r3, #4]
 801139e:	68db      	ldr	r3, [r3, #12]
 80113a0:	4a0b      	ldr	r2, [pc, #44]	; (80113d0 <vTaskSwitchContext+0xc0>)
 80113a2:	6013      	str	r3, [r2, #0]
 80113a4:	4a08      	ldr	r2, [pc, #32]	; (80113c8 <vTaskSwitchContext+0xb8>)
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80113aa:	4b09      	ldr	r3, [pc, #36]	; (80113d0 <vTaskSwitchContext+0xc0>)
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	3354      	adds	r3, #84	; 0x54
 80113b0:	4a08      	ldr	r2, [pc, #32]	; (80113d4 <vTaskSwitchContext+0xc4>)
 80113b2:	6013      	str	r3, [r2, #0]
}
 80113b4:	bf00      	nop
 80113b6:	3714      	adds	r7, #20
 80113b8:	46bd      	mov	sp, r7
 80113ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113be:	4770      	bx	lr
 80113c0:	20008180 	.word	0x20008180
 80113c4:	2000816c 	.word	0x2000816c
 80113c8:	20008160 	.word	0x20008160
 80113cc:	20007c88 	.word	0x20007c88
 80113d0:	20007c84 	.word	0x20007c84
 80113d4:	20000180 	.word	0x20000180

080113d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80113d8:	b580      	push	{r7, lr}
 80113da:	b084      	sub	sp, #16
 80113dc:	af00      	add	r7, sp, #0
 80113de:	6078      	str	r0, [r7, #4]
 80113e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d10a      	bne.n	80113fe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80113e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113ec:	f383 8811 	msr	BASEPRI, r3
 80113f0:	f3bf 8f6f 	isb	sy
 80113f4:	f3bf 8f4f 	dsb	sy
 80113f8:	60fb      	str	r3, [r7, #12]
}
 80113fa:	bf00      	nop
 80113fc:	e7fe      	b.n	80113fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80113fe:	4b07      	ldr	r3, [pc, #28]	; (801141c <vTaskPlaceOnEventList+0x44>)
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	3318      	adds	r3, #24
 8011404:	4619      	mov	r1, r3
 8011406:	6878      	ldr	r0, [r7, #4]
 8011408:	f7fe fac5 	bl	800f996 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801140c:	2101      	movs	r1, #1
 801140e:	6838      	ldr	r0, [r7, #0]
 8011410:	f000 fb7e 	bl	8011b10 <prvAddCurrentTaskToDelayedList>
}
 8011414:	bf00      	nop
 8011416:	3710      	adds	r7, #16
 8011418:	46bd      	mov	sp, r7
 801141a:	bd80      	pop	{r7, pc}
 801141c:	20007c84 	.word	0x20007c84

08011420 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011420:	b580      	push	{r7, lr}
 8011422:	b086      	sub	sp, #24
 8011424:	af00      	add	r7, sp, #0
 8011426:	60f8      	str	r0, [r7, #12]
 8011428:	60b9      	str	r1, [r7, #8]
 801142a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	2b00      	cmp	r3, #0
 8011430:	d10a      	bne.n	8011448 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8011432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011436:	f383 8811 	msr	BASEPRI, r3
 801143a:	f3bf 8f6f 	isb	sy
 801143e:	f3bf 8f4f 	dsb	sy
 8011442:	617b      	str	r3, [r7, #20]
}
 8011444:	bf00      	nop
 8011446:	e7fe      	b.n	8011446 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011448:	4b0a      	ldr	r3, [pc, #40]	; (8011474 <vTaskPlaceOnEventListRestricted+0x54>)
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	3318      	adds	r3, #24
 801144e:	4619      	mov	r1, r3
 8011450:	68f8      	ldr	r0, [r7, #12]
 8011452:	f7fe fa7c 	bl	800f94e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d002      	beq.n	8011462 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801145c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011460:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011462:	6879      	ldr	r1, [r7, #4]
 8011464:	68b8      	ldr	r0, [r7, #8]
 8011466:	f000 fb53 	bl	8011b10 <prvAddCurrentTaskToDelayedList>
	}
 801146a:	bf00      	nop
 801146c:	3718      	adds	r7, #24
 801146e:	46bd      	mov	sp, r7
 8011470:	bd80      	pop	{r7, pc}
 8011472:	bf00      	nop
 8011474:	20007c84 	.word	0x20007c84

08011478 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011478:	b580      	push	{r7, lr}
 801147a:	b086      	sub	sp, #24
 801147c:	af00      	add	r7, sp, #0
 801147e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	68db      	ldr	r3, [r3, #12]
 8011484:	68db      	ldr	r3, [r3, #12]
 8011486:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011488:	693b      	ldr	r3, [r7, #16]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d10a      	bne.n	80114a4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801148e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011492:	f383 8811 	msr	BASEPRI, r3
 8011496:	f3bf 8f6f 	isb	sy
 801149a:	f3bf 8f4f 	dsb	sy
 801149e:	60fb      	str	r3, [r7, #12]
}
 80114a0:	bf00      	nop
 80114a2:	e7fe      	b.n	80114a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80114a4:	693b      	ldr	r3, [r7, #16]
 80114a6:	3318      	adds	r3, #24
 80114a8:	4618      	mov	r0, r3
 80114aa:	f7fe faad 	bl	800fa08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80114ae:	4b1e      	ldr	r3, [pc, #120]	; (8011528 <xTaskRemoveFromEventList+0xb0>)
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d11d      	bne.n	80114f2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80114b6:	693b      	ldr	r3, [r7, #16]
 80114b8:	3304      	adds	r3, #4
 80114ba:	4618      	mov	r0, r3
 80114bc:	f7fe faa4 	bl	800fa08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80114c0:	693b      	ldr	r3, [r7, #16]
 80114c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114c4:	4b19      	ldr	r3, [pc, #100]	; (801152c <xTaskRemoveFromEventList+0xb4>)
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	429a      	cmp	r2, r3
 80114ca:	d903      	bls.n	80114d4 <xTaskRemoveFromEventList+0x5c>
 80114cc:	693b      	ldr	r3, [r7, #16]
 80114ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114d0:	4a16      	ldr	r2, [pc, #88]	; (801152c <xTaskRemoveFromEventList+0xb4>)
 80114d2:	6013      	str	r3, [r2, #0]
 80114d4:	693b      	ldr	r3, [r7, #16]
 80114d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114d8:	4613      	mov	r3, r2
 80114da:	009b      	lsls	r3, r3, #2
 80114dc:	4413      	add	r3, r2
 80114de:	009b      	lsls	r3, r3, #2
 80114e0:	4a13      	ldr	r2, [pc, #76]	; (8011530 <xTaskRemoveFromEventList+0xb8>)
 80114e2:	441a      	add	r2, r3
 80114e4:	693b      	ldr	r3, [r7, #16]
 80114e6:	3304      	adds	r3, #4
 80114e8:	4619      	mov	r1, r3
 80114ea:	4610      	mov	r0, r2
 80114ec:	f7fe fa2f 	bl	800f94e <vListInsertEnd>
 80114f0:	e005      	b.n	80114fe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80114f2:	693b      	ldr	r3, [r7, #16]
 80114f4:	3318      	adds	r3, #24
 80114f6:	4619      	mov	r1, r3
 80114f8:	480e      	ldr	r0, [pc, #56]	; (8011534 <xTaskRemoveFromEventList+0xbc>)
 80114fa:	f7fe fa28 	bl	800f94e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80114fe:	693b      	ldr	r3, [r7, #16]
 8011500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011502:	4b0d      	ldr	r3, [pc, #52]	; (8011538 <xTaskRemoveFromEventList+0xc0>)
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011508:	429a      	cmp	r2, r3
 801150a:	d905      	bls.n	8011518 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801150c:	2301      	movs	r3, #1
 801150e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011510:	4b0a      	ldr	r3, [pc, #40]	; (801153c <xTaskRemoveFromEventList+0xc4>)
 8011512:	2201      	movs	r2, #1
 8011514:	601a      	str	r2, [r3, #0]
 8011516:	e001      	b.n	801151c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8011518:	2300      	movs	r3, #0
 801151a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801151c:	697b      	ldr	r3, [r7, #20]
}
 801151e:	4618      	mov	r0, r3
 8011520:	3718      	adds	r7, #24
 8011522:	46bd      	mov	sp, r7
 8011524:	bd80      	pop	{r7, pc}
 8011526:	bf00      	nop
 8011528:	20008180 	.word	0x20008180
 801152c:	20008160 	.word	0x20008160
 8011530:	20007c88 	.word	0x20007c88
 8011534:	20008118 	.word	0x20008118
 8011538:	20007c84 	.word	0x20007c84
 801153c:	2000816c 	.word	0x2000816c

08011540 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011540:	b480      	push	{r7}
 8011542:	b083      	sub	sp, #12
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011548:	4b06      	ldr	r3, [pc, #24]	; (8011564 <vTaskInternalSetTimeOutState+0x24>)
 801154a:	681a      	ldr	r2, [r3, #0]
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011550:	4b05      	ldr	r3, [pc, #20]	; (8011568 <vTaskInternalSetTimeOutState+0x28>)
 8011552:	681a      	ldr	r2, [r3, #0]
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	605a      	str	r2, [r3, #4]
}
 8011558:	bf00      	nop
 801155a:	370c      	adds	r7, #12
 801155c:	46bd      	mov	sp, r7
 801155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011562:	4770      	bx	lr
 8011564:	20008170 	.word	0x20008170
 8011568:	2000815c 	.word	0x2000815c

0801156c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801156c:	b580      	push	{r7, lr}
 801156e:	b088      	sub	sp, #32
 8011570:	af00      	add	r7, sp, #0
 8011572:	6078      	str	r0, [r7, #4]
 8011574:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d10a      	bne.n	8011592 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801157c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011580:	f383 8811 	msr	BASEPRI, r3
 8011584:	f3bf 8f6f 	isb	sy
 8011588:	f3bf 8f4f 	dsb	sy
 801158c:	613b      	str	r3, [r7, #16]
}
 801158e:	bf00      	nop
 8011590:	e7fe      	b.n	8011590 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011592:	683b      	ldr	r3, [r7, #0]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d10a      	bne.n	80115ae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011598:	f04f 0350 	mov.w	r3, #80	; 0x50
 801159c:	f383 8811 	msr	BASEPRI, r3
 80115a0:	f3bf 8f6f 	isb	sy
 80115a4:	f3bf 8f4f 	dsb	sy
 80115a8:	60fb      	str	r3, [r7, #12]
}
 80115aa:	bf00      	nop
 80115ac:	e7fe      	b.n	80115ac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80115ae:	f000 ff81 	bl	80124b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80115b2:	4b1d      	ldr	r3, [pc, #116]	; (8011628 <xTaskCheckForTimeOut+0xbc>)
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	685b      	ldr	r3, [r3, #4]
 80115bc:	69ba      	ldr	r2, [r7, #24]
 80115be:	1ad3      	subs	r3, r2, r3
 80115c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80115c2:	683b      	ldr	r3, [r7, #0]
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80115ca:	d102      	bne.n	80115d2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80115cc:	2300      	movs	r3, #0
 80115ce:	61fb      	str	r3, [r7, #28]
 80115d0:	e023      	b.n	801161a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	681a      	ldr	r2, [r3, #0]
 80115d6:	4b15      	ldr	r3, [pc, #84]	; (801162c <xTaskCheckForTimeOut+0xc0>)
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	429a      	cmp	r2, r3
 80115dc:	d007      	beq.n	80115ee <xTaskCheckForTimeOut+0x82>
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	685b      	ldr	r3, [r3, #4]
 80115e2:	69ba      	ldr	r2, [r7, #24]
 80115e4:	429a      	cmp	r2, r3
 80115e6:	d302      	bcc.n	80115ee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80115e8:	2301      	movs	r3, #1
 80115ea:	61fb      	str	r3, [r7, #28]
 80115ec:	e015      	b.n	801161a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80115ee:	683b      	ldr	r3, [r7, #0]
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	697a      	ldr	r2, [r7, #20]
 80115f4:	429a      	cmp	r2, r3
 80115f6:	d20b      	bcs.n	8011610 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80115f8:	683b      	ldr	r3, [r7, #0]
 80115fa:	681a      	ldr	r2, [r3, #0]
 80115fc:	697b      	ldr	r3, [r7, #20]
 80115fe:	1ad2      	subs	r2, r2, r3
 8011600:	683b      	ldr	r3, [r7, #0]
 8011602:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011604:	6878      	ldr	r0, [r7, #4]
 8011606:	f7ff ff9b 	bl	8011540 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801160a:	2300      	movs	r3, #0
 801160c:	61fb      	str	r3, [r7, #28]
 801160e:	e004      	b.n	801161a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011610:	683b      	ldr	r3, [r7, #0]
 8011612:	2200      	movs	r2, #0
 8011614:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011616:	2301      	movs	r3, #1
 8011618:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801161a:	f000 ff7b 	bl	8012514 <vPortExitCritical>

	return xReturn;
 801161e:	69fb      	ldr	r3, [r7, #28]
}
 8011620:	4618      	mov	r0, r3
 8011622:	3720      	adds	r7, #32
 8011624:	46bd      	mov	sp, r7
 8011626:	bd80      	pop	{r7, pc}
 8011628:	2000815c 	.word	0x2000815c
 801162c:	20008170 	.word	0x20008170

08011630 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011630:	b480      	push	{r7}
 8011632:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011634:	4b03      	ldr	r3, [pc, #12]	; (8011644 <vTaskMissedYield+0x14>)
 8011636:	2201      	movs	r2, #1
 8011638:	601a      	str	r2, [r3, #0]
}
 801163a:	bf00      	nop
 801163c:	46bd      	mov	sp, r7
 801163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011642:	4770      	bx	lr
 8011644:	2000816c 	.word	0x2000816c

08011648 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011648:	b580      	push	{r7, lr}
 801164a:	b082      	sub	sp, #8
 801164c:	af00      	add	r7, sp, #0
 801164e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011650:	f000 f852 	bl	80116f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011654:	4b06      	ldr	r3, [pc, #24]	; (8011670 <prvIdleTask+0x28>)
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	2b01      	cmp	r3, #1
 801165a:	d9f9      	bls.n	8011650 <prvIdleTask+0x8>
			{
				taskYIELD();
 801165c:	4b05      	ldr	r3, [pc, #20]	; (8011674 <prvIdleTask+0x2c>)
 801165e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011662:	601a      	str	r2, [r3, #0]
 8011664:	f3bf 8f4f 	dsb	sy
 8011668:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801166c:	e7f0      	b.n	8011650 <prvIdleTask+0x8>
 801166e:	bf00      	nop
 8011670:	20007c88 	.word	0x20007c88
 8011674:	e000ed04 	.word	0xe000ed04

08011678 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011678:	b580      	push	{r7, lr}
 801167a:	b082      	sub	sp, #8
 801167c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801167e:	2300      	movs	r3, #0
 8011680:	607b      	str	r3, [r7, #4]
 8011682:	e00c      	b.n	801169e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011684:	687a      	ldr	r2, [r7, #4]
 8011686:	4613      	mov	r3, r2
 8011688:	009b      	lsls	r3, r3, #2
 801168a:	4413      	add	r3, r2
 801168c:	009b      	lsls	r3, r3, #2
 801168e:	4a12      	ldr	r2, [pc, #72]	; (80116d8 <prvInitialiseTaskLists+0x60>)
 8011690:	4413      	add	r3, r2
 8011692:	4618      	mov	r0, r3
 8011694:	f7fe f92e 	bl	800f8f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	3301      	adds	r3, #1
 801169c:	607b      	str	r3, [r7, #4]
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	2b37      	cmp	r3, #55	; 0x37
 80116a2:	d9ef      	bls.n	8011684 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80116a4:	480d      	ldr	r0, [pc, #52]	; (80116dc <prvInitialiseTaskLists+0x64>)
 80116a6:	f7fe f925 	bl	800f8f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80116aa:	480d      	ldr	r0, [pc, #52]	; (80116e0 <prvInitialiseTaskLists+0x68>)
 80116ac:	f7fe f922 	bl	800f8f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80116b0:	480c      	ldr	r0, [pc, #48]	; (80116e4 <prvInitialiseTaskLists+0x6c>)
 80116b2:	f7fe f91f 	bl	800f8f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80116b6:	480c      	ldr	r0, [pc, #48]	; (80116e8 <prvInitialiseTaskLists+0x70>)
 80116b8:	f7fe f91c 	bl	800f8f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80116bc:	480b      	ldr	r0, [pc, #44]	; (80116ec <prvInitialiseTaskLists+0x74>)
 80116be:	f7fe f919 	bl	800f8f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80116c2:	4b0b      	ldr	r3, [pc, #44]	; (80116f0 <prvInitialiseTaskLists+0x78>)
 80116c4:	4a05      	ldr	r2, [pc, #20]	; (80116dc <prvInitialiseTaskLists+0x64>)
 80116c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80116c8:	4b0a      	ldr	r3, [pc, #40]	; (80116f4 <prvInitialiseTaskLists+0x7c>)
 80116ca:	4a05      	ldr	r2, [pc, #20]	; (80116e0 <prvInitialiseTaskLists+0x68>)
 80116cc:	601a      	str	r2, [r3, #0]
}
 80116ce:	bf00      	nop
 80116d0:	3708      	adds	r7, #8
 80116d2:	46bd      	mov	sp, r7
 80116d4:	bd80      	pop	{r7, pc}
 80116d6:	bf00      	nop
 80116d8:	20007c88 	.word	0x20007c88
 80116dc:	200080e8 	.word	0x200080e8
 80116e0:	200080fc 	.word	0x200080fc
 80116e4:	20008118 	.word	0x20008118
 80116e8:	2000812c 	.word	0x2000812c
 80116ec:	20008144 	.word	0x20008144
 80116f0:	20008110 	.word	0x20008110
 80116f4:	20008114 	.word	0x20008114

080116f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80116f8:	b580      	push	{r7, lr}
 80116fa:	b082      	sub	sp, #8
 80116fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80116fe:	e019      	b.n	8011734 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011700:	f000 fed8 	bl	80124b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011704:	4b10      	ldr	r3, [pc, #64]	; (8011748 <prvCheckTasksWaitingTermination+0x50>)
 8011706:	68db      	ldr	r3, [r3, #12]
 8011708:	68db      	ldr	r3, [r3, #12]
 801170a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	3304      	adds	r3, #4
 8011710:	4618      	mov	r0, r3
 8011712:	f7fe f979 	bl	800fa08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011716:	4b0d      	ldr	r3, [pc, #52]	; (801174c <prvCheckTasksWaitingTermination+0x54>)
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	3b01      	subs	r3, #1
 801171c:	4a0b      	ldr	r2, [pc, #44]	; (801174c <prvCheckTasksWaitingTermination+0x54>)
 801171e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011720:	4b0b      	ldr	r3, [pc, #44]	; (8011750 <prvCheckTasksWaitingTermination+0x58>)
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	3b01      	subs	r3, #1
 8011726:	4a0a      	ldr	r2, [pc, #40]	; (8011750 <prvCheckTasksWaitingTermination+0x58>)
 8011728:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801172a:	f000 fef3 	bl	8012514 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801172e:	6878      	ldr	r0, [r7, #4]
 8011730:	f000 f810 	bl	8011754 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011734:	4b06      	ldr	r3, [pc, #24]	; (8011750 <prvCheckTasksWaitingTermination+0x58>)
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d1e1      	bne.n	8011700 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801173c:	bf00      	nop
 801173e:	bf00      	nop
 8011740:	3708      	adds	r7, #8
 8011742:	46bd      	mov	sp, r7
 8011744:	bd80      	pop	{r7, pc}
 8011746:	bf00      	nop
 8011748:	2000812c 	.word	0x2000812c
 801174c:	20008158 	.word	0x20008158
 8011750:	20008140 	.word	0x20008140

08011754 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011754:	b580      	push	{r7, lr}
 8011756:	b084      	sub	sp, #16
 8011758:	af00      	add	r7, sp, #0
 801175a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	3354      	adds	r3, #84	; 0x54
 8011760:	4618      	mov	r0, r3
 8011762:	f002 f8f1 	bl	8013948 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801176c:	2b00      	cmp	r3, #0
 801176e:	d108      	bne.n	8011782 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011774:	4618      	mov	r0, r3
 8011776:	f001 f863 	bl	8012840 <vPortFree>
				vPortFree( pxTCB );
 801177a:	6878      	ldr	r0, [r7, #4]
 801177c:	f001 f860 	bl	8012840 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011780:	e018      	b.n	80117b4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8011788:	2b01      	cmp	r3, #1
 801178a:	d103      	bne.n	8011794 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801178c:	6878      	ldr	r0, [r7, #4]
 801178e:	f001 f857 	bl	8012840 <vPortFree>
	}
 8011792:	e00f      	b.n	80117b4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801179a:	2b02      	cmp	r3, #2
 801179c:	d00a      	beq.n	80117b4 <prvDeleteTCB+0x60>
	__asm volatile
 801179e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117a2:	f383 8811 	msr	BASEPRI, r3
 80117a6:	f3bf 8f6f 	isb	sy
 80117aa:	f3bf 8f4f 	dsb	sy
 80117ae:	60fb      	str	r3, [r7, #12]
}
 80117b0:	bf00      	nop
 80117b2:	e7fe      	b.n	80117b2 <prvDeleteTCB+0x5e>
	}
 80117b4:	bf00      	nop
 80117b6:	3710      	adds	r7, #16
 80117b8:	46bd      	mov	sp, r7
 80117ba:	bd80      	pop	{r7, pc}

080117bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80117bc:	b480      	push	{r7}
 80117be:	b083      	sub	sp, #12
 80117c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80117c2:	4b0c      	ldr	r3, [pc, #48]	; (80117f4 <prvResetNextTaskUnblockTime+0x38>)
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d104      	bne.n	80117d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80117cc:	4b0a      	ldr	r3, [pc, #40]	; (80117f8 <prvResetNextTaskUnblockTime+0x3c>)
 80117ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80117d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80117d4:	e008      	b.n	80117e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80117d6:	4b07      	ldr	r3, [pc, #28]	; (80117f4 <prvResetNextTaskUnblockTime+0x38>)
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	68db      	ldr	r3, [r3, #12]
 80117dc:	68db      	ldr	r3, [r3, #12]
 80117de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	685b      	ldr	r3, [r3, #4]
 80117e4:	4a04      	ldr	r2, [pc, #16]	; (80117f8 <prvResetNextTaskUnblockTime+0x3c>)
 80117e6:	6013      	str	r3, [r2, #0]
}
 80117e8:	bf00      	nop
 80117ea:	370c      	adds	r7, #12
 80117ec:	46bd      	mov	sp, r7
 80117ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f2:	4770      	bx	lr
 80117f4:	20008110 	.word	0x20008110
 80117f8:	20008178 	.word	0x20008178

080117fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80117fc:	b480      	push	{r7}
 80117fe:	b083      	sub	sp, #12
 8011800:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011802:	4b0b      	ldr	r3, [pc, #44]	; (8011830 <xTaskGetSchedulerState+0x34>)
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	2b00      	cmp	r3, #0
 8011808:	d102      	bne.n	8011810 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801180a:	2301      	movs	r3, #1
 801180c:	607b      	str	r3, [r7, #4]
 801180e:	e008      	b.n	8011822 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011810:	4b08      	ldr	r3, [pc, #32]	; (8011834 <xTaskGetSchedulerState+0x38>)
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	2b00      	cmp	r3, #0
 8011816:	d102      	bne.n	801181e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011818:	2302      	movs	r3, #2
 801181a:	607b      	str	r3, [r7, #4]
 801181c:	e001      	b.n	8011822 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801181e:	2300      	movs	r3, #0
 8011820:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011822:	687b      	ldr	r3, [r7, #4]
	}
 8011824:	4618      	mov	r0, r3
 8011826:	370c      	adds	r7, #12
 8011828:	46bd      	mov	sp, r7
 801182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801182e:	4770      	bx	lr
 8011830:	20008164 	.word	0x20008164
 8011834:	20008180 	.word	0x20008180

08011838 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011838:	b580      	push	{r7, lr}
 801183a:	b084      	sub	sp, #16
 801183c:	af00      	add	r7, sp, #0
 801183e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011844:	2300      	movs	r3, #0
 8011846:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d051      	beq.n	80118f2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801184e:	68bb      	ldr	r3, [r7, #8]
 8011850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011852:	4b2a      	ldr	r3, [pc, #168]	; (80118fc <xTaskPriorityInherit+0xc4>)
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011858:	429a      	cmp	r2, r3
 801185a:	d241      	bcs.n	80118e0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801185c:	68bb      	ldr	r3, [r7, #8]
 801185e:	699b      	ldr	r3, [r3, #24]
 8011860:	2b00      	cmp	r3, #0
 8011862:	db06      	blt.n	8011872 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011864:	4b25      	ldr	r3, [pc, #148]	; (80118fc <xTaskPriorityInherit+0xc4>)
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801186a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801186e:	68bb      	ldr	r3, [r7, #8]
 8011870:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011872:	68bb      	ldr	r3, [r7, #8]
 8011874:	6959      	ldr	r1, [r3, #20]
 8011876:	68bb      	ldr	r3, [r7, #8]
 8011878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801187a:	4613      	mov	r3, r2
 801187c:	009b      	lsls	r3, r3, #2
 801187e:	4413      	add	r3, r2
 8011880:	009b      	lsls	r3, r3, #2
 8011882:	4a1f      	ldr	r2, [pc, #124]	; (8011900 <xTaskPriorityInherit+0xc8>)
 8011884:	4413      	add	r3, r2
 8011886:	4299      	cmp	r1, r3
 8011888:	d122      	bne.n	80118d0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801188a:	68bb      	ldr	r3, [r7, #8]
 801188c:	3304      	adds	r3, #4
 801188e:	4618      	mov	r0, r3
 8011890:	f7fe f8ba 	bl	800fa08 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011894:	4b19      	ldr	r3, [pc, #100]	; (80118fc <xTaskPriorityInherit+0xc4>)
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801189a:	68bb      	ldr	r3, [r7, #8]
 801189c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801189e:	68bb      	ldr	r3, [r7, #8]
 80118a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118a2:	4b18      	ldr	r3, [pc, #96]	; (8011904 <xTaskPriorityInherit+0xcc>)
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	429a      	cmp	r2, r3
 80118a8:	d903      	bls.n	80118b2 <xTaskPriorityInherit+0x7a>
 80118aa:	68bb      	ldr	r3, [r7, #8]
 80118ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118ae:	4a15      	ldr	r2, [pc, #84]	; (8011904 <xTaskPriorityInherit+0xcc>)
 80118b0:	6013      	str	r3, [r2, #0]
 80118b2:	68bb      	ldr	r3, [r7, #8]
 80118b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118b6:	4613      	mov	r3, r2
 80118b8:	009b      	lsls	r3, r3, #2
 80118ba:	4413      	add	r3, r2
 80118bc:	009b      	lsls	r3, r3, #2
 80118be:	4a10      	ldr	r2, [pc, #64]	; (8011900 <xTaskPriorityInherit+0xc8>)
 80118c0:	441a      	add	r2, r3
 80118c2:	68bb      	ldr	r3, [r7, #8]
 80118c4:	3304      	adds	r3, #4
 80118c6:	4619      	mov	r1, r3
 80118c8:	4610      	mov	r0, r2
 80118ca:	f7fe f840 	bl	800f94e <vListInsertEnd>
 80118ce:	e004      	b.n	80118da <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80118d0:	4b0a      	ldr	r3, [pc, #40]	; (80118fc <xTaskPriorityInherit+0xc4>)
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118d6:	68bb      	ldr	r3, [r7, #8]
 80118d8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80118da:	2301      	movs	r3, #1
 80118dc:	60fb      	str	r3, [r7, #12]
 80118de:	e008      	b.n	80118f2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80118e0:	68bb      	ldr	r3, [r7, #8]
 80118e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80118e4:	4b05      	ldr	r3, [pc, #20]	; (80118fc <xTaskPriorityInherit+0xc4>)
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118ea:	429a      	cmp	r2, r3
 80118ec:	d201      	bcs.n	80118f2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80118ee:	2301      	movs	r3, #1
 80118f0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80118f2:	68fb      	ldr	r3, [r7, #12]
	}
 80118f4:	4618      	mov	r0, r3
 80118f6:	3710      	adds	r7, #16
 80118f8:	46bd      	mov	sp, r7
 80118fa:	bd80      	pop	{r7, pc}
 80118fc:	20007c84 	.word	0x20007c84
 8011900:	20007c88 	.word	0x20007c88
 8011904:	20008160 	.word	0x20008160

08011908 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011908:	b580      	push	{r7, lr}
 801190a:	b086      	sub	sp, #24
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011914:	2300      	movs	r3, #0
 8011916:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d056      	beq.n	80119cc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801191e:	4b2e      	ldr	r3, [pc, #184]	; (80119d8 <xTaskPriorityDisinherit+0xd0>)
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	693a      	ldr	r2, [r7, #16]
 8011924:	429a      	cmp	r2, r3
 8011926:	d00a      	beq.n	801193e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011928:	f04f 0350 	mov.w	r3, #80	; 0x50
 801192c:	f383 8811 	msr	BASEPRI, r3
 8011930:	f3bf 8f6f 	isb	sy
 8011934:	f3bf 8f4f 	dsb	sy
 8011938:	60fb      	str	r3, [r7, #12]
}
 801193a:	bf00      	nop
 801193c:	e7fe      	b.n	801193c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801193e:	693b      	ldr	r3, [r7, #16]
 8011940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011942:	2b00      	cmp	r3, #0
 8011944:	d10a      	bne.n	801195c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8011946:	f04f 0350 	mov.w	r3, #80	; 0x50
 801194a:	f383 8811 	msr	BASEPRI, r3
 801194e:	f3bf 8f6f 	isb	sy
 8011952:	f3bf 8f4f 	dsb	sy
 8011956:	60bb      	str	r3, [r7, #8]
}
 8011958:	bf00      	nop
 801195a:	e7fe      	b.n	801195a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801195c:	693b      	ldr	r3, [r7, #16]
 801195e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011960:	1e5a      	subs	r2, r3, #1
 8011962:	693b      	ldr	r3, [r7, #16]
 8011964:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011966:	693b      	ldr	r3, [r7, #16]
 8011968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801196a:	693b      	ldr	r3, [r7, #16]
 801196c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801196e:	429a      	cmp	r2, r3
 8011970:	d02c      	beq.n	80119cc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011972:	693b      	ldr	r3, [r7, #16]
 8011974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011976:	2b00      	cmp	r3, #0
 8011978:	d128      	bne.n	80119cc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801197a:	693b      	ldr	r3, [r7, #16]
 801197c:	3304      	adds	r3, #4
 801197e:	4618      	mov	r0, r3
 8011980:	f7fe f842 	bl	800fa08 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011984:	693b      	ldr	r3, [r7, #16]
 8011986:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011988:	693b      	ldr	r3, [r7, #16]
 801198a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801198c:	693b      	ldr	r3, [r7, #16]
 801198e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011990:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011994:	693b      	ldr	r3, [r7, #16]
 8011996:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011998:	693b      	ldr	r3, [r7, #16]
 801199a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801199c:	4b0f      	ldr	r3, [pc, #60]	; (80119dc <xTaskPriorityDisinherit+0xd4>)
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	429a      	cmp	r2, r3
 80119a2:	d903      	bls.n	80119ac <xTaskPriorityDisinherit+0xa4>
 80119a4:	693b      	ldr	r3, [r7, #16]
 80119a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119a8:	4a0c      	ldr	r2, [pc, #48]	; (80119dc <xTaskPriorityDisinherit+0xd4>)
 80119aa:	6013      	str	r3, [r2, #0]
 80119ac:	693b      	ldr	r3, [r7, #16]
 80119ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119b0:	4613      	mov	r3, r2
 80119b2:	009b      	lsls	r3, r3, #2
 80119b4:	4413      	add	r3, r2
 80119b6:	009b      	lsls	r3, r3, #2
 80119b8:	4a09      	ldr	r2, [pc, #36]	; (80119e0 <xTaskPriorityDisinherit+0xd8>)
 80119ba:	441a      	add	r2, r3
 80119bc:	693b      	ldr	r3, [r7, #16]
 80119be:	3304      	adds	r3, #4
 80119c0:	4619      	mov	r1, r3
 80119c2:	4610      	mov	r0, r2
 80119c4:	f7fd ffc3 	bl	800f94e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80119c8:	2301      	movs	r3, #1
 80119ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80119cc:	697b      	ldr	r3, [r7, #20]
	}
 80119ce:	4618      	mov	r0, r3
 80119d0:	3718      	adds	r7, #24
 80119d2:	46bd      	mov	sp, r7
 80119d4:	bd80      	pop	{r7, pc}
 80119d6:	bf00      	nop
 80119d8:	20007c84 	.word	0x20007c84
 80119dc:	20008160 	.word	0x20008160
 80119e0:	20007c88 	.word	0x20007c88

080119e4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80119e4:	b580      	push	{r7, lr}
 80119e6:	b088      	sub	sp, #32
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	6078      	str	r0, [r7, #4]
 80119ec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80119f2:	2301      	movs	r3, #1
 80119f4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d06a      	beq.n	8011ad2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80119fc:	69bb      	ldr	r3, [r7, #24]
 80119fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d10a      	bne.n	8011a1a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8011a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a08:	f383 8811 	msr	BASEPRI, r3
 8011a0c:	f3bf 8f6f 	isb	sy
 8011a10:	f3bf 8f4f 	dsb	sy
 8011a14:	60fb      	str	r3, [r7, #12]
}
 8011a16:	bf00      	nop
 8011a18:	e7fe      	b.n	8011a18 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011a1a:	69bb      	ldr	r3, [r7, #24]
 8011a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011a1e:	683a      	ldr	r2, [r7, #0]
 8011a20:	429a      	cmp	r2, r3
 8011a22:	d902      	bls.n	8011a2a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011a24:	683b      	ldr	r3, [r7, #0]
 8011a26:	61fb      	str	r3, [r7, #28]
 8011a28:	e002      	b.n	8011a30 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011a2a:	69bb      	ldr	r3, [r7, #24]
 8011a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011a2e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011a30:	69bb      	ldr	r3, [r7, #24]
 8011a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a34:	69fa      	ldr	r2, [r7, #28]
 8011a36:	429a      	cmp	r2, r3
 8011a38:	d04b      	beq.n	8011ad2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011a3a:	69bb      	ldr	r3, [r7, #24]
 8011a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011a3e:	697a      	ldr	r2, [r7, #20]
 8011a40:	429a      	cmp	r2, r3
 8011a42:	d146      	bne.n	8011ad2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011a44:	4b25      	ldr	r3, [pc, #148]	; (8011adc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	69ba      	ldr	r2, [r7, #24]
 8011a4a:	429a      	cmp	r2, r3
 8011a4c:	d10a      	bne.n	8011a64 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8011a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a52:	f383 8811 	msr	BASEPRI, r3
 8011a56:	f3bf 8f6f 	isb	sy
 8011a5a:	f3bf 8f4f 	dsb	sy
 8011a5e:	60bb      	str	r3, [r7, #8]
}
 8011a60:	bf00      	nop
 8011a62:	e7fe      	b.n	8011a62 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011a64:	69bb      	ldr	r3, [r7, #24]
 8011a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a68:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011a6a:	69bb      	ldr	r3, [r7, #24]
 8011a6c:	69fa      	ldr	r2, [r7, #28]
 8011a6e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011a70:	69bb      	ldr	r3, [r7, #24]
 8011a72:	699b      	ldr	r3, [r3, #24]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	db04      	blt.n	8011a82 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a78:	69fb      	ldr	r3, [r7, #28]
 8011a7a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011a7e:	69bb      	ldr	r3, [r7, #24]
 8011a80:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011a82:	69bb      	ldr	r3, [r7, #24]
 8011a84:	6959      	ldr	r1, [r3, #20]
 8011a86:	693a      	ldr	r2, [r7, #16]
 8011a88:	4613      	mov	r3, r2
 8011a8a:	009b      	lsls	r3, r3, #2
 8011a8c:	4413      	add	r3, r2
 8011a8e:	009b      	lsls	r3, r3, #2
 8011a90:	4a13      	ldr	r2, [pc, #76]	; (8011ae0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011a92:	4413      	add	r3, r2
 8011a94:	4299      	cmp	r1, r3
 8011a96:	d11c      	bne.n	8011ad2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011a98:	69bb      	ldr	r3, [r7, #24]
 8011a9a:	3304      	adds	r3, #4
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	f7fd ffb3 	bl	800fa08 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011aa2:	69bb      	ldr	r3, [r7, #24]
 8011aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011aa6:	4b0f      	ldr	r3, [pc, #60]	; (8011ae4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	429a      	cmp	r2, r3
 8011aac:	d903      	bls.n	8011ab6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8011aae:	69bb      	ldr	r3, [r7, #24]
 8011ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ab2:	4a0c      	ldr	r2, [pc, #48]	; (8011ae4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011ab4:	6013      	str	r3, [r2, #0]
 8011ab6:	69bb      	ldr	r3, [r7, #24]
 8011ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011aba:	4613      	mov	r3, r2
 8011abc:	009b      	lsls	r3, r3, #2
 8011abe:	4413      	add	r3, r2
 8011ac0:	009b      	lsls	r3, r3, #2
 8011ac2:	4a07      	ldr	r2, [pc, #28]	; (8011ae0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011ac4:	441a      	add	r2, r3
 8011ac6:	69bb      	ldr	r3, [r7, #24]
 8011ac8:	3304      	adds	r3, #4
 8011aca:	4619      	mov	r1, r3
 8011acc:	4610      	mov	r0, r2
 8011ace:	f7fd ff3e 	bl	800f94e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011ad2:	bf00      	nop
 8011ad4:	3720      	adds	r7, #32
 8011ad6:	46bd      	mov	sp, r7
 8011ad8:	bd80      	pop	{r7, pc}
 8011ada:	bf00      	nop
 8011adc:	20007c84 	.word	0x20007c84
 8011ae0:	20007c88 	.word	0x20007c88
 8011ae4:	20008160 	.word	0x20008160

08011ae8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011ae8:	b480      	push	{r7}
 8011aea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011aec:	4b07      	ldr	r3, [pc, #28]	; (8011b0c <pvTaskIncrementMutexHeldCount+0x24>)
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d004      	beq.n	8011afe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011af4:	4b05      	ldr	r3, [pc, #20]	; (8011b0c <pvTaskIncrementMutexHeldCount+0x24>)
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011afa:	3201      	adds	r2, #1
 8011afc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8011afe:	4b03      	ldr	r3, [pc, #12]	; (8011b0c <pvTaskIncrementMutexHeldCount+0x24>)
 8011b00:	681b      	ldr	r3, [r3, #0]
	}
 8011b02:	4618      	mov	r0, r3
 8011b04:	46bd      	mov	sp, r7
 8011b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b0a:	4770      	bx	lr
 8011b0c:	20007c84 	.word	0x20007c84

08011b10 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011b10:	b580      	push	{r7, lr}
 8011b12:	b084      	sub	sp, #16
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	6078      	str	r0, [r7, #4]
 8011b18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011b1a:	4b21      	ldr	r3, [pc, #132]	; (8011ba0 <prvAddCurrentTaskToDelayedList+0x90>)
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011b20:	4b20      	ldr	r3, [pc, #128]	; (8011ba4 <prvAddCurrentTaskToDelayedList+0x94>)
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	3304      	adds	r3, #4
 8011b26:	4618      	mov	r0, r3
 8011b28:	f7fd ff6e 	bl	800fa08 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011b32:	d10a      	bne.n	8011b4a <prvAddCurrentTaskToDelayedList+0x3a>
 8011b34:	683b      	ldr	r3, [r7, #0]
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d007      	beq.n	8011b4a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011b3a:	4b1a      	ldr	r3, [pc, #104]	; (8011ba4 <prvAddCurrentTaskToDelayedList+0x94>)
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	3304      	adds	r3, #4
 8011b40:	4619      	mov	r1, r3
 8011b42:	4819      	ldr	r0, [pc, #100]	; (8011ba8 <prvAddCurrentTaskToDelayedList+0x98>)
 8011b44:	f7fd ff03 	bl	800f94e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011b48:	e026      	b.n	8011b98 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011b4a:	68fa      	ldr	r2, [r7, #12]
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	4413      	add	r3, r2
 8011b50:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011b52:	4b14      	ldr	r3, [pc, #80]	; (8011ba4 <prvAddCurrentTaskToDelayedList+0x94>)
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	68ba      	ldr	r2, [r7, #8]
 8011b58:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011b5a:	68ba      	ldr	r2, [r7, #8]
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	429a      	cmp	r2, r3
 8011b60:	d209      	bcs.n	8011b76 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011b62:	4b12      	ldr	r3, [pc, #72]	; (8011bac <prvAddCurrentTaskToDelayedList+0x9c>)
 8011b64:	681a      	ldr	r2, [r3, #0]
 8011b66:	4b0f      	ldr	r3, [pc, #60]	; (8011ba4 <prvAddCurrentTaskToDelayedList+0x94>)
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	3304      	adds	r3, #4
 8011b6c:	4619      	mov	r1, r3
 8011b6e:	4610      	mov	r0, r2
 8011b70:	f7fd ff11 	bl	800f996 <vListInsert>
}
 8011b74:	e010      	b.n	8011b98 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011b76:	4b0e      	ldr	r3, [pc, #56]	; (8011bb0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011b78:	681a      	ldr	r2, [r3, #0]
 8011b7a:	4b0a      	ldr	r3, [pc, #40]	; (8011ba4 <prvAddCurrentTaskToDelayedList+0x94>)
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	3304      	adds	r3, #4
 8011b80:	4619      	mov	r1, r3
 8011b82:	4610      	mov	r0, r2
 8011b84:	f7fd ff07 	bl	800f996 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011b88:	4b0a      	ldr	r3, [pc, #40]	; (8011bb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	68ba      	ldr	r2, [r7, #8]
 8011b8e:	429a      	cmp	r2, r3
 8011b90:	d202      	bcs.n	8011b98 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011b92:	4a08      	ldr	r2, [pc, #32]	; (8011bb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011b94:	68bb      	ldr	r3, [r7, #8]
 8011b96:	6013      	str	r3, [r2, #0]
}
 8011b98:	bf00      	nop
 8011b9a:	3710      	adds	r7, #16
 8011b9c:	46bd      	mov	sp, r7
 8011b9e:	bd80      	pop	{r7, pc}
 8011ba0:	2000815c 	.word	0x2000815c
 8011ba4:	20007c84 	.word	0x20007c84
 8011ba8:	20008144 	.word	0x20008144
 8011bac:	20008114 	.word	0x20008114
 8011bb0:	20008110 	.word	0x20008110
 8011bb4:	20008178 	.word	0x20008178

08011bb8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011bb8:	b580      	push	{r7, lr}
 8011bba:	b08a      	sub	sp, #40	; 0x28
 8011bbc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011bc2:	f000 fb07 	bl	80121d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011bc6:	4b1c      	ldr	r3, [pc, #112]	; (8011c38 <xTimerCreateTimerTask+0x80>)
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d021      	beq.n	8011c12 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011bce:	2300      	movs	r3, #0
 8011bd0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011bd2:	2300      	movs	r3, #0
 8011bd4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011bd6:	1d3a      	adds	r2, r7, #4
 8011bd8:	f107 0108 	add.w	r1, r7, #8
 8011bdc:	f107 030c 	add.w	r3, r7, #12
 8011be0:	4618      	mov	r0, r3
 8011be2:	f7fd fe6d 	bl	800f8c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011be6:	6879      	ldr	r1, [r7, #4]
 8011be8:	68bb      	ldr	r3, [r7, #8]
 8011bea:	68fa      	ldr	r2, [r7, #12]
 8011bec:	9202      	str	r2, [sp, #8]
 8011bee:	9301      	str	r3, [sp, #4]
 8011bf0:	2302      	movs	r3, #2
 8011bf2:	9300      	str	r3, [sp, #0]
 8011bf4:	2300      	movs	r3, #0
 8011bf6:	460a      	mov	r2, r1
 8011bf8:	4910      	ldr	r1, [pc, #64]	; (8011c3c <xTimerCreateTimerTask+0x84>)
 8011bfa:	4811      	ldr	r0, [pc, #68]	; (8011c40 <xTimerCreateTimerTask+0x88>)
 8011bfc:	f7fe ff78 	bl	8010af0 <xTaskCreateStatic>
 8011c00:	4603      	mov	r3, r0
 8011c02:	4a10      	ldr	r2, [pc, #64]	; (8011c44 <xTimerCreateTimerTask+0x8c>)
 8011c04:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011c06:	4b0f      	ldr	r3, [pc, #60]	; (8011c44 <xTimerCreateTimerTask+0x8c>)
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d001      	beq.n	8011c12 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011c0e:	2301      	movs	r3, #1
 8011c10:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011c12:	697b      	ldr	r3, [r7, #20]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d10a      	bne.n	8011c2e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8011c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c1c:	f383 8811 	msr	BASEPRI, r3
 8011c20:	f3bf 8f6f 	isb	sy
 8011c24:	f3bf 8f4f 	dsb	sy
 8011c28:	613b      	str	r3, [r7, #16]
}
 8011c2a:	bf00      	nop
 8011c2c:	e7fe      	b.n	8011c2c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8011c2e:	697b      	ldr	r3, [r7, #20]
}
 8011c30:	4618      	mov	r0, r3
 8011c32:	3718      	adds	r7, #24
 8011c34:	46bd      	mov	sp, r7
 8011c36:	bd80      	pop	{r7, pc}
 8011c38:	200081b4 	.word	0x200081b4
 8011c3c:	08017d38 	.word	0x08017d38
 8011c40:	08011d7d 	.word	0x08011d7d
 8011c44:	200081b8 	.word	0x200081b8

08011c48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011c48:	b580      	push	{r7, lr}
 8011c4a:	b08a      	sub	sp, #40	; 0x28
 8011c4c:	af00      	add	r7, sp, #0
 8011c4e:	60f8      	str	r0, [r7, #12]
 8011c50:	60b9      	str	r1, [r7, #8]
 8011c52:	607a      	str	r2, [r7, #4]
 8011c54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011c56:	2300      	movs	r3, #0
 8011c58:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d10a      	bne.n	8011c76 <xTimerGenericCommand+0x2e>
	__asm volatile
 8011c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c64:	f383 8811 	msr	BASEPRI, r3
 8011c68:	f3bf 8f6f 	isb	sy
 8011c6c:	f3bf 8f4f 	dsb	sy
 8011c70:	623b      	str	r3, [r7, #32]
}
 8011c72:	bf00      	nop
 8011c74:	e7fe      	b.n	8011c74 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8011c76:	4b1a      	ldr	r3, [pc, #104]	; (8011ce0 <xTimerGenericCommand+0x98>)
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d02a      	beq.n	8011cd4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8011c7e:	68bb      	ldr	r3, [r7, #8]
 8011c80:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011c8a:	68bb      	ldr	r3, [r7, #8]
 8011c8c:	2b05      	cmp	r3, #5
 8011c8e:	dc18      	bgt.n	8011cc2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011c90:	f7ff fdb4 	bl	80117fc <xTaskGetSchedulerState>
 8011c94:	4603      	mov	r3, r0
 8011c96:	2b02      	cmp	r3, #2
 8011c98:	d109      	bne.n	8011cae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011c9a:	4b11      	ldr	r3, [pc, #68]	; (8011ce0 <xTimerGenericCommand+0x98>)
 8011c9c:	6818      	ldr	r0, [r3, #0]
 8011c9e:	f107 0110 	add.w	r1, r7, #16
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011ca6:	f7fe f881 	bl	800fdac <xQueueGenericSend>
 8011caa:	6278      	str	r0, [r7, #36]	; 0x24
 8011cac:	e012      	b.n	8011cd4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011cae:	4b0c      	ldr	r3, [pc, #48]	; (8011ce0 <xTimerGenericCommand+0x98>)
 8011cb0:	6818      	ldr	r0, [r3, #0]
 8011cb2:	f107 0110 	add.w	r1, r7, #16
 8011cb6:	2300      	movs	r3, #0
 8011cb8:	2200      	movs	r2, #0
 8011cba:	f7fe f877 	bl	800fdac <xQueueGenericSend>
 8011cbe:	6278      	str	r0, [r7, #36]	; 0x24
 8011cc0:	e008      	b.n	8011cd4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011cc2:	4b07      	ldr	r3, [pc, #28]	; (8011ce0 <xTimerGenericCommand+0x98>)
 8011cc4:	6818      	ldr	r0, [r3, #0]
 8011cc6:	f107 0110 	add.w	r1, r7, #16
 8011cca:	2300      	movs	r3, #0
 8011ccc:	683a      	ldr	r2, [r7, #0]
 8011cce:	f7fe f96b 	bl	800ffa8 <xQueueGenericSendFromISR>
 8011cd2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011cd6:	4618      	mov	r0, r3
 8011cd8:	3728      	adds	r7, #40	; 0x28
 8011cda:	46bd      	mov	sp, r7
 8011cdc:	bd80      	pop	{r7, pc}
 8011cde:	bf00      	nop
 8011ce0:	200081b4 	.word	0x200081b4

08011ce4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011ce4:	b580      	push	{r7, lr}
 8011ce6:	b088      	sub	sp, #32
 8011ce8:	af02      	add	r7, sp, #8
 8011cea:	6078      	str	r0, [r7, #4]
 8011cec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011cee:	4b22      	ldr	r3, [pc, #136]	; (8011d78 <prvProcessExpiredTimer+0x94>)
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	68db      	ldr	r3, [r3, #12]
 8011cf4:	68db      	ldr	r3, [r3, #12]
 8011cf6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011cf8:	697b      	ldr	r3, [r7, #20]
 8011cfa:	3304      	adds	r3, #4
 8011cfc:	4618      	mov	r0, r3
 8011cfe:	f7fd fe83 	bl	800fa08 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011d02:	697b      	ldr	r3, [r7, #20]
 8011d04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011d08:	f003 0304 	and.w	r3, r3, #4
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d022      	beq.n	8011d56 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011d10:	697b      	ldr	r3, [r7, #20]
 8011d12:	699a      	ldr	r2, [r3, #24]
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	18d1      	adds	r1, r2, r3
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	683a      	ldr	r2, [r7, #0]
 8011d1c:	6978      	ldr	r0, [r7, #20]
 8011d1e:	f000 f8d1 	bl	8011ec4 <prvInsertTimerInActiveList>
 8011d22:	4603      	mov	r3, r0
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d01f      	beq.n	8011d68 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011d28:	2300      	movs	r3, #0
 8011d2a:	9300      	str	r3, [sp, #0]
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	687a      	ldr	r2, [r7, #4]
 8011d30:	2100      	movs	r1, #0
 8011d32:	6978      	ldr	r0, [r7, #20]
 8011d34:	f7ff ff88 	bl	8011c48 <xTimerGenericCommand>
 8011d38:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011d3a:	693b      	ldr	r3, [r7, #16]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d113      	bne.n	8011d68 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8011d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d44:	f383 8811 	msr	BASEPRI, r3
 8011d48:	f3bf 8f6f 	isb	sy
 8011d4c:	f3bf 8f4f 	dsb	sy
 8011d50:	60fb      	str	r3, [r7, #12]
}
 8011d52:	bf00      	nop
 8011d54:	e7fe      	b.n	8011d54 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011d56:	697b      	ldr	r3, [r7, #20]
 8011d58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011d5c:	f023 0301 	bic.w	r3, r3, #1
 8011d60:	b2da      	uxtb	r2, r3
 8011d62:	697b      	ldr	r3, [r7, #20]
 8011d64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011d68:	697b      	ldr	r3, [r7, #20]
 8011d6a:	6a1b      	ldr	r3, [r3, #32]
 8011d6c:	6978      	ldr	r0, [r7, #20]
 8011d6e:	4798      	blx	r3
}
 8011d70:	bf00      	nop
 8011d72:	3718      	adds	r7, #24
 8011d74:	46bd      	mov	sp, r7
 8011d76:	bd80      	pop	{r7, pc}
 8011d78:	200081ac 	.word	0x200081ac

08011d7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011d7c:	b580      	push	{r7, lr}
 8011d7e:	b084      	sub	sp, #16
 8011d80:	af00      	add	r7, sp, #0
 8011d82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011d84:	f107 0308 	add.w	r3, r7, #8
 8011d88:	4618      	mov	r0, r3
 8011d8a:	f000 f857 	bl	8011e3c <prvGetNextExpireTime>
 8011d8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011d90:	68bb      	ldr	r3, [r7, #8]
 8011d92:	4619      	mov	r1, r3
 8011d94:	68f8      	ldr	r0, [r7, #12]
 8011d96:	f000 f803 	bl	8011da0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011d9a:	f000 f8d5 	bl	8011f48 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011d9e:	e7f1      	b.n	8011d84 <prvTimerTask+0x8>

08011da0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011da0:	b580      	push	{r7, lr}
 8011da2:	b084      	sub	sp, #16
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	6078      	str	r0, [r7, #4]
 8011da8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011daa:	f7ff f93b 	bl	8011024 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011dae:	f107 0308 	add.w	r3, r7, #8
 8011db2:	4618      	mov	r0, r3
 8011db4:	f000 f866 	bl	8011e84 <prvSampleTimeNow>
 8011db8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011dba:	68bb      	ldr	r3, [r7, #8]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d130      	bne.n	8011e22 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011dc0:	683b      	ldr	r3, [r7, #0]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d10a      	bne.n	8011ddc <prvProcessTimerOrBlockTask+0x3c>
 8011dc6:	687a      	ldr	r2, [r7, #4]
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	429a      	cmp	r2, r3
 8011dcc:	d806      	bhi.n	8011ddc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011dce:	f7ff f937 	bl	8011040 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011dd2:	68f9      	ldr	r1, [r7, #12]
 8011dd4:	6878      	ldr	r0, [r7, #4]
 8011dd6:	f7ff ff85 	bl	8011ce4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011dda:	e024      	b.n	8011e26 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011ddc:	683b      	ldr	r3, [r7, #0]
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d008      	beq.n	8011df4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011de2:	4b13      	ldr	r3, [pc, #76]	; (8011e30 <prvProcessTimerOrBlockTask+0x90>)
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d101      	bne.n	8011df0 <prvProcessTimerOrBlockTask+0x50>
 8011dec:	2301      	movs	r3, #1
 8011dee:	e000      	b.n	8011df2 <prvProcessTimerOrBlockTask+0x52>
 8011df0:	2300      	movs	r3, #0
 8011df2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011df4:	4b0f      	ldr	r3, [pc, #60]	; (8011e34 <prvProcessTimerOrBlockTask+0x94>)
 8011df6:	6818      	ldr	r0, [r3, #0]
 8011df8:	687a      	ldr	r2, [r7, #4]
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	1ad3      	subs	r3, r2, r3
 8011dfe:	683a      	ldr	r2, [r7, #0]
 8011e00:	4619      	mov	r1, r3
 8011e02:	f7fe fe41 	bl	8010a88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011e06:	f7ff f91b 	bl	8011040 <xTaskResumeAll>
 8011e0a:	4603      	mov	r3, r0
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d10a      	bne.n	8011e26 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011e10:	4b09      	ldr	r3, [pc, #36]	; (8011e38 <prvProcessTimerOrBlockTask+0x98>)
 8011e12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e16:	601a      	str	r2, [r3, #0]
 8011e18:	f3bf 8f4f 	dsb	sy
 8011e1c:	f3bf 8f6f 	isb	sy
}
 8011e20:	e001      	b.n	8011e26 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011e22:	f7ff f90d 	bl	8011040 <xTaskResumeAll>
}
 8011e26:	bf00      	nop
 8011e28:	3710      	adds	r7, #16
 8011e2a:	46bd      	mov	sp, r7
 8011e2c:	bd80      	pop	{r7, pc}
 8011e2e:	bf00      	nop
 8011e30:	200081b0 	.word	0x200081b0
 8011e34:	200081b4 	.word	0x200081b4
 8011e38:	e000ed04 	.word	0xe000ed04

08011e3c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011e3c:	b480      	push	{r7}
 8011e3e:	b085      	sub	sp, #20
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011e44:	4b0e      	ldr	r3, [pc, #56]	; (8011e80 <prvGetNextExpireTime+0x44>)
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d101      	bne.n	8011e52 <prvGetNextExpireTime+0x16>
 8011e4e:	2201      	movs	r2, #1
 8011e50:	e000      	b.n	8011e54 <prvGetNextExpireTime+0x18>
 8011e52:	2200      	movs	r2, #0
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d105      	bne.n	8011e6c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011e60:	4b07      	ldr	r3, [pc, #28]	; (8011e80 <prvGetNextExpireTime+0x44>)
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	68db      	ldr	r3, [r3, #12]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	60fb      	str	r3, [r7, #12]
 8011e6a:	e001      	b.n	8011e70 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011e6c:	2300      	movs	r3, #0
 8011e6e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011e70:	68fb      	ldr	r3, [r7, #12]
}
 8011e72:	4618      	mov	r0, r3
 8011e74:	3714      	adds	r7, #20
 8011e76:	46bd      	mov	sp, r7
 8011e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e7c:	4770      	bx	lr
 8011e7e:	bf00      	nop
 8011e80:	200081ac 	.word	0x200081ac

08011e84 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011e84:	b580      	push	{r7, lr}
 8011e86:	b084      	sub	sp, #16
 8011e88:	af00      	add	r7, sp, #0
 8011e8a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011e8c:	f7ff f976 	bl	801117c <xTaskGetTickCount>
 8011e90:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011e92:	4b0b      	ldr	r3, [pc, #44]	; (8011ec0 <prvSampleTimeNow+0x3c>)
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	68fa      	ldr	r2, [r7, #12]
 8011e98:	429a      	cmp	r2, r3
 8011e9a:	d205      	bcs.n	8011ea8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011e9c:	f000 f936 	bl	801210c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	2201      	movs	r2, #1
 8011ea4:	601a      	str	r2, [r3, #0]
 8011ea6:	e002      	b.n	8011eae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	2200      	movs	r2, #0
 8011eac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8011eae:	4a04      	ldr	r2, [pc, #16]	; (8011ec0 <prvSampleTimeNow+0x3c>)
 8011eb0:	68fb      	ldr	r3, [r7, #12]
 8011eb2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011eb4:	68fb      	ldr	r3, [r7, #12]
}
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	3710      	adds	r7, #16
 8011eba:	46bd      	mov	sp, r7
 8011ebc:	bd80      	pop	{r7, pc}
 8011ebe:	bf00      	nop
 8011ec0:	200081bc 	.word	0x200081bc

08011ec4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011ec4:	b580      	push	{r7, lr}
 8011ec6:	b086      	sub	sp, #24
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	60f8      	str	r0, [r7, #12]
 8011ecc:	60b9      	str	r1, [r7, #8]
 8011ece:	607a      	str	r2, [r7, #4]
 8011ed0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011ed2:	2300      	movs	r3, #0
 8011ed4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	68ba      	ldr	r2, [r7, #8]
 8011eda:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	68fa      	ldr	r2, [r7, #12]
 8011ee0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011ee2:	68ba      	ldr	r2, [r7, #8]
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	429a      	cmp	r2, r3
 8011ee8:	d812      	bhi.n	8011f10 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011eea:	687a      	ldr	r2, [r7, #4]
 8011eec:	683b      	ldr	r3, [r7, #0]
 8011eee:	1ad2      	subs	r2, r2, r3
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	699b      	ldr	r3, [r3, #24]
 8011ef4:	429a      	cmp	r2, r3
 8011ef6:	d302      	bcc.n	8011efe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011ef8:	2301      	movs	r3, #1
 8011efa:	617b      	str	r3, [r7, #20]
 8011efc:	e01b      	b.n	8011f36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011efe:	4b10      	ldr	r3, [pc, #64]	; (8011f40 <prvInsertTimerInActiveList+0x7c>)
 8011f00:	681a      	ldr	r2, [r3, #0]
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	3304      	adds	r3, #4
 8011f06:	4619      	mov	r1, r3
 8011f08:	4610      	mov	r0, r2
 8011f0a:	f7fd fd44 	bl	800f996 <vListInsert>
 8011f0e:	e012      	b.n	8011f36 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011f10:	687a      	ldr	r2, [r7, #4]
 8011f12:	683b      	ldr	r3, [r7, #0]
 8011f14:	429a      	cmp	r2, r3
 8011f16:	d206      	bcs.n	8011f26 <prvInsertTimerInActiveList+0x62>
 8011f18:	68ba      	ldr	r2, [r7, #8]
 8011f1a:	683b      	ldr	r3, [r7, #0]
 8011f1c:	429a      	cmp	r2, r3
 8011f1e:	d302      	bcc.n	8011f26 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011f20:	2301      	movs	r3, #1
 8011f22:	617b      	str	r3, [r7, #20]
 8011f24:	e007      	b.n	8011f36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011f26:	4b07      	ldr	r3, [pc, #28]	; (8011f44 <prvInsertTimerInActiveList+0x80>)
 8011f28:	681a      	ldr	r2, [r3, #0]
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	3304      	adds	r3, #4
 8011f2e:	4619      	mov	r1, r3
 8011f30:	4610      	mov	r0, r2
 8011f32:	f7fd fd30 	bl	800f996 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011f36:	697b      	ldr	r3, [r7, #20]
}
 8011f38:	4618      	mov	r0, r3
 8011f3a:	3718      	adds	r7, #24
 8011f3c:	46bd      	mov	sp, r7
 8011f3e:	bd80      	pop	{r7, pc}
 8011f40:	200081b0 	.word	0x200081b0
 8011f44:	200081ac 	.word	0x200081ac

08011f48 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011f48:	b580      	push	{r7, lr}
 8011f4a:	b08e      	sub	sp, #56	; 0x38
 8011f4c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011f4e:	e0ca      	b.n	80120e6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	da18      	bge.n	8011f88 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8011f56:	1d3b      	adds	r3, r7, #4
 8011f58:	3304      	adds	r3, #4
 8011f5a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d10a      	bne.n	8011f78 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8011f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f66:	f383 8811 	msr	BASEPRI, r3
 8011f6a:	f3bf 8f6f 	isb	sy
 8011f6e:	f3bf 8f4f 	dsb	sy
 8011f72:	61fb      	str	r3, [r7, #28]
}
 8011f74:	bf00      	nop
 8011f76:	e7fe      	b.n	8011f76 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011f7e:	6850      	ldr	r0, [r2, #4]
 8011f80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011f82:	6892      	ldr	r2, [r2, #8]
 8011f84:	4611      	mov	r1, r2
 8011f86:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	f2c0 80aa 	blt.w	80120e4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f96:	695b      	ldr	r3, [r3, #20]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d004      	beq.n	8011fa6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f9e:	3304      	adds	r3, #4
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	f7fd fd31 	bl	800fa08 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011fa6:	463b      	mov	r3, r7
 8011fa8:	4618      	mov	r0, r3
 8011faa:	f7ff ff6b 	bl	8011e84 <prvSampleTimeNow>
 8011fae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	2b09      	cmp	r3, #9
 8011fb4:	f200 8097 	bhi.w	80120e6 <prvProcessReceivedCommands+0x19e>
 8011fb8:	a201      	add	r2, pc, #4	; (adr r2, 8011fc0 <prvProcessReceivedCommands+0x78>)
 8011fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fbe:	bf00      	nop
 8011fc0:	08011fe9 	.word	0x08011fe9
 8011fc4:	08011fe9 	.word	0x08011fe9
 8011fc8:	08011fe9 	.word	0x08011fe9
 8011fcc:	0801205d 	.word	0x0801205d
 8011fd0:	08012071 	.word	0x08012071
 8011fd4:	080120bb 	.word	0x080120bb
 8011fd8:	08011fe9 	.word	0x08011fe9
 8011fdc:	08011fe9 	.word	0x08011fe9
 8011fe0:	0801205d 	.word	0x0801205d
 8011fe4:	08012071 	.word	0x08012071
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011fee:	f043 0301 	orr.w	r3, r3, #1
 8011ff2:	b2da      	uxtb	r2, r3
 8011ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ff6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011ffa:	68ba      	ldr	r2, [r7, #8]
 8011ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ffe:	699b      	ldr	r3, [r3, #24]
 8012000:	18d1      	adds	r1, r2, r3
 8012002:	68bb      	ldr	r3, [r7, #8]
 8012004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012006:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012008:	f7ff ff5c 	bl	8011ec4 <prvInsertTimerInActiveList>
 801200c:	4603      	mov	r3, r0
 801200e:	2b00      	cmp	r3, #0
 8012010:	d069      	beq.n	80120e6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012014:	6a1b      	ldr	r3, [r3, #32]
 8012016:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012018:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801201a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801201c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012020:	f003 0304 	and.w	r3, r3, #4
 8012024:	2b00      	cmp	r3, #0
 8012026:	d05e      	beq.n	80120e6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012028:	68ba      	ldr	r2, [r7, #8]
 801202a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801202c:	699b      	ldr	r3, [r3, #24]
 801202e:	441a      	add	r2, r3
 8012030:	2300      	movs	r3, #0
 8012032:	9300      	str	r3, [sp, #0]
 8012034:	2300      	movs	r3, #0
 8012036:	2100      	movs	r1, #0
 8012038:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801203a:	f7ff fe05 	bl	8011c48 <xTimerGenericCommand>
 801203e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8012040:	6a3b      	ldr	r3, [r7, #32]
 8012042:	2b00      	cmp	r3, #0
 8012044:	d14f      	bne.n	80120e6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8012046:	f04f 0350 	mov.w	r3, #80	; 0x50
 801204a:	f383 8811 	msr	BASEPRI, r3
 801204e:	f3bf 8f6f 	isb	sy
 8012052:	f3bf 8f4f 	dsb	sy
 8012056:	61bb      	str	r3, [r7, #24]
}
 8012058:	bf00      	nop
 801205a:	e7fe      	b.n	801205a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801205c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801205e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012062:	f023 0301 	bic.w	r3, r3, #1
 8012066:	b2da      	uxtb	r2, r3
 8012068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801206a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801206e:	e03a      	b.n	80120e6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012072:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012076:	f043 0301 	orr.w	r3, r3, #1
 801207a:	b2da      	uxtb	r2, r3
 801207c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801207e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012082:	68ba      	ldr	r2, [r7, #8]
 8012084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012086:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801208a:	699b      	ldr	r3, [r3, #24]
 801208c:	2b00      	cmp	r3, #0
 801208e:	d10a      	bne.n	80120a6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8012090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012094:	f383 8811 	msr	BASEPRI, r3
 8012098:	f3bf 8f6f 	isb	sy
 801209c:	f3bf 8f4f 	dsb	sy
 80120a0:	617b      	str	r3, [r7, #20]
}
 80120a2:	bf00      	nop
 80120a4:	e7fe      	b.n	80120a4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80120a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120a8:	699a      	ldr	r2, [r3, #24]
 80120aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ac:	18d1      	adds	r1, r2, r3
 80120ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80120b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80120b4:	f7ff ff06 	bl	8011ec4 <prvInsertTimerInActiveList>
					break;
 80120b8:	e015      	b.n	80120e6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80120ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80120c0:	f003 0302 	and.w	r3, r3, #2
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d103      	bne.n	80120d0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80120c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80120ca:	f000 fbb9 	bl	8012840 <vPortFree>
 80120ce:	e00a      	b.n	80120e6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80120d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80120d6:	f023 0301 	bic.w	r3, r3, #1
 80120da:	b2da      	uxtb	r2, r3
 80120dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80120e2:	e000      	b.n	80120e6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80120e4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80120e6:	4b08      	ldr	r3, [pc, #32]	; (8012108 <prvProcessReceivedCommands+0x1c0>)
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	1d39      	adds	r1, r7, #4
 80120ec:	2200      	movs	r2, #0
 80120ee:	4618      	mov	r0, r3
 80120f0:	f7fe f882 	bl	80101f8 <xQueueReceive>
 80120f4:	4603      	mov	r3, r0
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	f47f af2a 	bne.w	8011f50 <prvProcessReceivedCommands+0x8>
	}
}
 80120fc:	bf00      	nop
 80120fe:	bf00      	nop
 8012100:	3730      	adds	r7, #48	; 0x30
 8012102:	46bd      	mov	sp, r7
 8012104:	bd80      	pop	{r7, pc}
 8012106:	bf00      	nop
 8012108:	200081b4 	.word	0x200081b4

0801210c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801210c:	b580      	push	{r7, lr}
 801210e:	b088      	sub	sp, #32
 8012110:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012112:	e048      	b.n	80121a6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012114:	4b2d      	ldr	r3, [pc, #180]	; (80121cc <prvSwitchTimerLists+0xc0>)
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	68db      	ldr	r3, [r3, #12]
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801211e:	4b2b      	ldr	r3, [pc, #172]	; (80121cc <prvSwitchTimerLists+0xc0>)
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	68db      	ldr	r3, [r3, #12]
 8012124:	68db      	ldr	r3, [r3, #12]
 8012126:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	3304      	adds	r3, #4
 801212c:	4618      	mov	r0, r3
 801212e:	f7fd fc6b 	bl	800fa08 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	6a1b      	ldr	r3, [r3, #32]
 8012136:	68f8      	ldr	r0, [r7, #12]
 8012138:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012140:	f003 0304 	and.w	r3, r3, #4
 8012144:	2b00      	cmp	r3, #0
 8012146:	d02e      	beq.n	80121a6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	699b      	ldr	r3, [r3, #24]
 801214c:	693a      	ldr	r2, [r7, #16]
 801214e:	4413      	add	r3, r2
 8012150:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8012152:	68ba      	ldr	r2, [r7, #8]
 8012154:	693b      	ldr	r3, [r7, #16]
 8012156:	429a      	cmp	r2, r3
 8012158:	d90e      	bls.n	8012178 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	68ba      	ldr	r2, [r7, #8]
 801215e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	68fa      	ldr	r2, [r7, #12]
 8012164:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012166:	4b19      	ldr	r3, [pc, #100]	; (80121cc <prvSwitchTimerLists+0xc0>)
 8012168:	681a      	ldr	r2, [r3, #0]
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	3304      	adds	r3, #4
 801216e:	4619      	mov	r1, r3
 8012170:	4610      	mov	r0, r2
 8012172:	f7fd fc10 	bl	800f996 <vListInsert>
 8012176:	e016      	b.n	80121a6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012178:	2300      	movs	r3, #0
 801217a:	9300      	str	r3, [sp, #0]
 801217c:	2300      	movs	r3, #0
 801217e:	693a      	ldr	r2, [r7, #16]
 8012180:	2100      	movs	r1, #0
 8012182:	68f8      	ldr	r0, [r7, #12]
 8012184:	f7ff fd60 	bl	8011c48 <xTimerGenericCommand>
 8012188:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d10a      	bne.n	80121a6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8012190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012194:	f383 8811 	msr	BASEPRI, r3
 8012198:	f3bf 8f6f 	isb	sy
 801219c:	f3bf 8f4f 	dsb	sy
 80121a0:	603b      	str	r3, [r7, #0]
}
 80121a2:	bf00      	nop
 80121a4:	e7fe      	b.n	80121a4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80121a6:	4b09      	ldr	r3, [pc, #36]	; (80121cc <prvSwitchTimerLists+0xc0>)
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d1b1      	bne.n	8012114 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80121b0:	4b06      	ldr	r3, [pc, #24]	; (80121cc <prvSwitchTimerLists+0xc0>)
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80121b6:	4b06      	ldr	r3, [pc, #24]	; (80121d0 <prvSwitchTimerLists+0xc4>)
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	4a04      	ldr	r2, [pc, #16]	; (80121cc <prvSwitchTimerLists+0xc0>)
 80121bc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80121be:	4a04      	ldr	r2, [pc, #16]	; (80121d0 <prvSwitchTimerLists+0xc4>)
 80121c0:	697b      	ldr	r3, [r7, #20]
 80121c2:	6013      	str	r3, [r2, #0]
}
 80121c4:	bf00      	nop
 80121c6:	3718      	adds	r7, #24
 80121c8:	46bd      	mov	sp, r7
 80121ca:	bd80      	pop	{r7, pc}
 80121cc:	200081ac 	.word	0x200081ac
 80121d0:	200081b0 	.word	0x200081b0

080121d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b082      	sub	sp, #8
 80121d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80121da:	f000 f96b 	bl	80124b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80121de:	4b15      	ldr	r3, [pc, #84]	; (8012234 <prvCheckForValidListAndQueue+0x60>)
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d120      	bne.n	8012228 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80121e6:	4814      	ldr	r0, [pc, #80]	; (8012238 <prvCheckForValidListAndQueue+0x64>)
 80121e8:	f7fd fb84 	bl	800f8f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80121ec:	4813      	ldr	r0, [pc, #76]	; (801223c <prvCheckForValidListAndQueue+0x68>)
 80121ee:	f7fd fb81 	bl	800f8f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80121f2:	4b13      	ldr	r3, [pc, #76]	; (8012240 <prvCheckForValidListAndQueue+0x6c>)
 80121f4:	4a10      	ldr	r2, [pc, #64]	; (8012238 <prvCheckForValidListAndQueue+0x64>)
 80121f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80121f8:	4b12      	ldr	r3, [pc, #72]	; (8012244 <prvCheckForValidListAndQueue+0x70>)
 80121fa:	4a10      	ldr	r2, [pc, #64]	; (801223c <prvCheckForValidListAndQueue+0x68>)
 80121fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80121fe:	2300      	movs	r3, #0
 8012200:	9300      	str	r3, [sp, #0]
 8012202:	4b11      	ldr	r3, [pc, #68]	; (8012248 <prvCheckForValidListAndQueue+0x74>)
 8012204:	4a11      	ldr	r2, [pc, #68]	; (801224c <prvCheckForValidListAndQueue+0x78>)
 8012206:	2110      	movs	r1, #16
 8012208:	200a      	movs	r0, #10
 801220a:	f7fd fc8f 	bl	800fb2c <xQueueGenericCreateStatic>
 801220e:	4603      	mov	r3, r0
 8012210:	4a08      	ldr	r2, [pc, #32]	; (8012234 <prvCheckForValidListAndQueue+0x60>)
 8012212:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012214:	4b07      	ldr	r3, [pc, #28]	; (8012234 <prvCheckForValidListAndQueue+0x60>)
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	2b00      	cmp	r3, #0
 801221a:	d005      	beq.n	8012228 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801221c:	4b05      	ldr	r3, [pc, #20]	; (8012234 <prvCheckForValidListAndQueue+0x60>)
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	490b      	ldr	r1, [pc, #44]	; (8012250 <prvCheckForValidListAndQueue+0x7c>)
 8012222:	4618      	mov	r0, r3
 8012224:	f7fe fbdc 	bl	80109e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012228:	f000 f974 	bl	8012514 <vPortExitCritical>
}
 801222c:	bf00      	nop
 801222e:	46bd      	mov	sp, r7
 8012230:	bd80      	pop	{r7, pc}
 8012232:	bf00      	nop
 8012234:	200081b4 	.word	0x200081b4
 8012238:	20008184 	.word	0x20008184
 801223c:	20008198 	.word	0x20008198
 8012240:	200081ac 	.word	0x200081ac
 8012244:	200081b0 	.word	0x200081b0
 8012248:	20008260 	.word	0x20008260
 801224c:	200081c0 	.word	0x200081c0
 8012250:	08017d40 	.word	0x08017d40

08012254 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012254:	b480      	push	{r7}
 8012256:	b085      	sub	sp, #20
 8012258:	af00      	add	r7, sp, #0
 801225a:	60f8      	str	r0, [r7, #12]
 801225c:	60b9      	str	r1, [r7, #8]
 801225e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	3b04      	subs	r3, #4
 8012264:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801226c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	3b04      	subs	r3, #4
 8012272:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012274:	68bb      	ldr	r3, [r7, #8]
 8012276:	f023 0201 	bic.w	r2, r3, #1
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	3b04      	subs	r3, #4
 8012282:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012284:	4a0c      	ldr	r2, [pc, #48]	; (80122b8 <pxPortInitialiseStack+0x64>)
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	3b14      	subs	r3, #20
 801228e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012290:	687a      	ldr	r2, [r7, #4]
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	3b04      	subs	r3, #4
 801229a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	f06f 0202 	mvn.w	r2, #2
 80122a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	3b20      	subs	r3, #32
 80122a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80122aa:	68fb      	ldr	r3, [r7, #12]
}
 80122ac:	4618      	mov	r0, r3
 80122ae:	3714      	adds	r7, #20
 80122b0:	46bd      	mov	sp, r7
 80122b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b6:	4770      	bx	lr
 80122b8:	080122bd 	.word	0x080122bd

080122bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80122bc:	b480      	push	{r7}
 80122be:	b085      	sub	sp, #20
 80122c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80122c2:	2300      	movs	r3, #0
 80122c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80122c6:	4b12      	ldr	r3, [pc, #72]	; (8012310 <prvTaskExitError+0x54>)
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80122ce:	d00a      	beq.n	80122e6 <prvTaskExitError+0x2a>
	__asm volatile
 80122d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122d4:	f383 8811 	msr	BASEPRI, r3
 80122d8:	f3bf 8f6f 	isb	sy
 80122dc:	f3bf 8f4f 	dsb	sy
 80122e0:	60fb      	str	r3, [r7, #12]
}
 80122e2:	bf00      	nop
 80122e4:	e7fe      	b.n	80122e4 <prvTaskExitError+0x28>
	__asm volatile
 80122e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122ea:	f383 8811 	msr	BASEPRI, r3
 80122ee:	f3bf 8f6f 	isb	sy
 80122f2:	f3bf 8f4f 	dsb	sy
 80122f6:	60bb      	str	r3, [r7, #8]
}
 80122f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80122fa:	bf00      	nop
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d0fc      	beq.n	80122fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012302:	bf00      	nop
 8012304:	bf00      	nop
 8012306:	3714      	adds	r7, #20
 8012308:	46bd      	mov	sp, r7
 801230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801230e:	4770      	bx	lr
 8012310:	2000017c 	.word	0x2000017c
	...

08012320 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012320:	4b07      	ldr	r3, [pc, #28]	; (8012340 <pxCurrentTCBConst2>)
 8012322:	6819      	ldr	r1, [r3, #0]
 8012324:	6808      	ldr	r0, [r1, #0]
 8012326:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801232a:	f380 8809 	msr	PSP, r0
 801232e:	f3bf 8f6f 	isb	sy
 8012332:	f04f 0000 	mov.w	r0, #0
 8012336:	f380 8811 	msr	BASEPRI, r0
 801233a:	4770      	bx	lr
 801233c:	f3af 8000 	nop.w

08012340 <pxCurrentTCBConst2>:
 8012340:	20007c84 	.word	0x20007c84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012344:	bf00      	nop
 8012346:	bf00      	nop

08012348 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012348:	4808      	ldr	r0, [pc, #32]	; (801236c <prvPortStartFirstTask+0x24>)
 801234a:	6800      	ldr	r0, [r0, #0]
 801234c:	6800      	ldr	r0, [r0, #0]
 801234e:	f380 8808 	msr	MSP, r0
 8012352:	f04f 0000 	mov.w	r0, #0
 8012356:	f380 8814 	msr	CONTROL, r0
 801235a:	b662      	cpsie	i
 801235c:	b661      	cpsie	f
 801235e:	f3bf 8f4f 	dsb	sy
 8012362:	f3bf 8f6f 	isb	sy
 8012366:	df00      	svc	0
 8012368:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801236a:	bf00      	nop
 801236c:	e000ed08 	.word	0xe000ed08

08012370 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012370:	b580      	push	{r7, lr}
 8012372:	b086      	sub	sp, #24
 8012374:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012376:	4b46      	ldr	r3, [pc, #280]	; (8012490 <xPortStartScheduler+0x120>)
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	4a46      	ldr	r2, [pc, #280]	; (8012494 <xPortStartScheduler+0x124>)
 801237c:	4293      	cmp	r3, r2
 801237e:	d10a      	bne.n	8012396 <xPortStartScheduler+0x26>
	__asm volatile
 8012380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012384:	f383 8811 	msr	BASEPRI, r3
 8012388:	f3bf 8f6f 	isb	sy
 801238c:	f3bf 8f4f 	dsb	sy
 8012390:	613b      	str	r3, [r7, #16]
}
 8012392:	bf00      	nop
 8012394:	e7fe      	b.n	8012394 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012396:	4b3e      	ldr	r3, [pc, #248]	; (8012490 <xPortStartScheduler+0x120>)
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	4a3f      	ldr	r2, [pc, #252]	; (8012498 <xPortStartScheduler+0x128>)
 801239c:	4293      	cmp	r3, r2
 801239e:	d10a      	bne.n	80123b6 <xPortStartScheduler+0x46>
	__asm volatile
 80123a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123a4:	f383 8811 	msr	BASEPRI, r3
 80123a8:	f3bf 8f6f 	isb	sy
 80123ac:	f3bf 8f4f 	dsb	sy
 80123b0:	60fb      	str	r3, [r7, #12]
}
 80123b2:	bf00      	nop
 80123b4:	e7fe      	b.n	80123b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80123b6:	4b39      	ldr	r3, [pc, #228]	; (801249c <xPortStartScheduler+0x12c>)
 80123b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80123ba:	697b      	ldr	r3, [r7, #20]
 80123bc:	781b      	ldrb	r3, [r3, #0]
 80123be:	b2db      	uxtb	r3, r3
 80123c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80123c2:	697b      	ldr	r3, [r7, #20]
 80123c4:	22ff      	movs	r2, #255	; 0xff
 80123c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80123c8:	697b      	ldr	r3, [r7, #20]
 80123ca:	781b      	ldrb	r3, [r3, #0]
 80123cc:	b2db      	uxtb	r3, r3
 80123ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80123d0:	78fb      	ldrb	r3, [r7, #3]
 80123d2:	b2db      	uxtb	r3, r3
 80123d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80123d8:	b2da      	uxtb	r2, r3
 80123da:	4b31      	ldr	r3, [pc, #196]	; (80124a0 <xPortStartScheduler+0x130>)
 80123dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80123de:	4b31      	ldr	r3, [pc, #196]	; (80124a4 <xPortStartScheduler+0x134>)
 80123e0:	2207      	movs	r2, #7
 80123e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80123e4:	e009      	b.n	80123fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80123e6:	4b2f      	ldr	r3, [pc, #188]	; (80124a4 <xPortStartScheduler+0x134>)
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	3b01      	subs	r3, #1
 80123ec:	4a2d      	ldr	r2, [pc, #180]	; (80124a4 <xPortStartScheduler+0x134>)
 80123ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80123f0:	78fb      	ldrb	r3, [r7, #3]
 80123f2:	b2db      	uxtb	r3, r3
 80123f4:	005b      	lsls	r3, r3, #1
 80123f6:	b2db      	uxtb	r3, r3
 80123f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80123fa:	78fb      	ldrb	r3, [r7, #3]
 80123fc:	b2db      	uxtb	r3, r3
 80123fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012402:	2b80      	cmp	r3, #128	; 0x80
 8012404:	d0ef      	beq.n	80123e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012406:	4b27      	ldr	r3, [pc, #156]	; (80124a4 <xPortStartScheduler+0x134>)
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	f1c3 0307 	rsb	r3, r3, #7
 801240e:	2b04      	cmp	r3, #4
 8012410:	d00a      	beq.n	8012428 <xPortStartScheduler+0xb8>
	__asm volatile
 8012412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012416:	f383 8811 	msr	BASEPRI, r3
 801241a:	f3bf 8f6f 	isb	sy
 801241e:	f3bf 8f4f 	dsb	sy
 8012422:	60bb      	str	r3, [r7, #8]
}
 8012424:	bf00      	nop
 8012426:	e7fe      	b.n	8012426 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012428:	4b1e      	ldr	r3, [pc, #120]	; (80124a4 <xPortStartScheduler+0x134>)
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	021b      	lsls	r3, r3, #8
 801242e:	4a1d      	ldr	r2, [pc, #116]	; (80124a4 <xPortStartScheduler+0x134>)
 8012430:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012432:	4b1c      	ldr	r3, [pc, #112]	; (80124a4 <xPortStartScheduler+0x134>)
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801243a:	4a1a      	ldr	r2, [pc, #104]	; (80124a4 <xPortStartScheduler+0x134>)
 801243c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	b2da      	uxtb	r2, r3
 8012442:	697b      	ldr	r3, [r7, #20]
 8012444:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012446:	4b18      	ldr	r3, [pc, #96]	; (80124a8 <xPortStartScheduler+0x138>)
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	4a17      	ldr	r2, [pc, #92]	; (80124a8 <xPortStartScheduler+0x138>)
 801244c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012450:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012452:	4b15      	ldr	r3, [pc, #84]	; (80124a8 <xPortStartScheduler+0x138>)
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	4a14      	ldr	r2, [pc, #80]	; (80124a8 <xPortStartScheduler+0x138>)
 8012458:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801245c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801245e:	f000 f8dd 	bl	801261c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012462:	4b12      	ldr	r3, [pc, #72]	; (80124ac <xPortStartScheduler+0x13c>)
 8012464:	2200      	movs	r2, #0
 8012466:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012468:	f000 f8fc 	bl	8012664 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801246c:	4b10      	ldr	r3, [pc, #64]	; (80124b0 <xPortStartScheduler+0x140>)
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	4a0f      	ldr	r2, [pc, #60]	; (80124b0 <xPortStartScheduler+0x140>)
 8012472:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012476:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012478:	f7ff ff66 	bl	8012348 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801247c:	f7fe ff48 	bl	8011310 <vTaskSwitchContext>
	prvTaskExitError();
 8012480:	f7ff ff1c 	bl	80122bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012484:	2300      	movs	r3, #0
}
 8012486:	4618      	mov	r0, r3
 8012488:	3718      	adds	r7, #24
 801248a:	46bd      	mov	sp, r7
 801248c:	bd80      	pop	{r7, pc}
 801248e:	bf00      	nop
 8012490:	e000ed00 	.word	0xe000ed00
 8012494:	410fc271 	.word	0x410fc271
 8012498:	410fc270 	.word	0x410fc270
 801249c:	e000e400 	.word	0xe000e400
 80124a0:	200082b0 	.word	0x200082b0
 80124a4:	200082b4 	.word	0x200082b4
 80124a8:	e000ed20 	.word	0xe000ed20
 80124ac:	2000017c 	.word	0x2000017c
 80124b0:	e000ef34 	.word	0xe000ef34

080124b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80124b4:	b480      	push	{r7}
 80124b6:	b083      	sub	sp, #12
 80124b8:	af00      	add	r7, sp, #0
	__asm volatile
 80124ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124be:	f383 8811 	msr	BASEPRI, r3
 80124c2:	f3bf 8f6f 	isb	sy
 80124c6:	f3bf 8f4f 	dsb	sy
 80124ca:	607b      	str	r3, [r7, #4]
}
 80124cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80124ce:	4b0f      	ldr	r3, [pc, #60]	; (801250c <vPortEnterCritical+0x58>)
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	3301      	adds	r3, #1
 80124d4:	4a0d      	ldr	r2, [pc, #52]	; (801250c <vPortEnterCritical+0x58>)
 80124d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80124d8:	4b0c      	ldr	r3, [pc, #48]	; (801250c <vPortEnterCritical+0x58>)
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	2b01      	cmp	r3, #1
 80124de:	d10f      	bne.n	8012500 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80124e0:	4b0b      	ldr	r3, [pc, #44]	; (8012510 <vPortEnterCritical+0x5c>)
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	b2db      	uxtb	r3, r3
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d00a      	beq.n	8012500 <vPortEnterCritical+0x4c>
	__asm volatile
 80124ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124ee:	f383 8811 	msr	BASEPRI, r3
 80124f2:	f3bf 8f6f 	isb	sy
 80124f6:	f3bf 8f4f 	dsb	sy
 80124fa:	603b      	str	r3, [r7, #0]
}
 80124fc:	bf00      	nop
 80124fe:	e7fe      	b.n	80124fe <vPortEnterCritical+0x4a>
	}
}
 8012500:	bf00      	nop
 8012502:	370c      	adds	r7, #12
 8012504:	46bd      	mov	sp, r7
 8012506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801250a:	4770      	bx	lr
 801250c:	2000017c 	.word	0x2000017c
 8012510:	e000ed04 	.word	0xe000ed04

08012514 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012514:	b480      	push	{r7}
 8012516:	b083      	sub	sp, #12
 8012518:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801251a:	4b12      	ldr	r3, [pc, #72]	; (8012564 <vPortExitCritical+0x50>)
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	2b00      	cmp	r3, #0
 8012520:	d10a      	bne.n	8012538 <vPortExitCritical+0x24>
	__asm volatile
 8012522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012526:	f383 8811 	msr	BASEPRI, r3
 801252a:	f3bf 8f6f 	isb	sy
 801252e:	f3bf 8f4f 	dsb	sy
 8012532:	607b      	str	r3, [r7, #4]
}
 8012534:	bf00      	nop
 8012536:	e7fe      	b.n	8012536 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012538:	4b0a      	ldr	r3, [pc, #40]	; (8012564 <vPortExitCritical+0x50>)
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	3b01      	subs	r3, #1
 801253e:	4a09      	ldr	r2, [pc, #36]	; (8012564 <vPortExitCritical+0x50>)
 8012540:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012542:	4b08      	ldr	r3, [pc, #32]	; (8012564 <vPortExitCritical+0x50>)
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	2b00      	cmp	r3, #0
 8012548:	d105      	bne.n	8012556 <vPortExitCritical+0x42>
 801254a:	2300      	movs	r3, #0
 801254c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801254e:	683b      	ldr	r3, [r7, #0]
 8012550:	f383 8811 	msr	BASEPRI, r3
}
 8012554:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012556:	bf00      	nop
 8012558:	370c      	adds	r7, #12
 801255a:	46bd      	mov	sp, r7
 801255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012560:	4770      	bx	lr
 8012562:	bf00      	nop
 8012564:	2000017c 	.word	0x2000017c
	...

08012570 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012570:	f3ef 8009 	mrs	r0, PSP
 8012574:	f3bf 8f6f 	isb	sy
 8012578:	4b15      	ldr	r3, [pc, #84]	; (80125d0 <pxCurrentTCBConst>)
 801257a:	681a      	ldr	r2, [r3, #0]
 801257c:	f01e 0f10 	tst.w	lr, #16
 8012580:	bf08      	it	eq
 8012582:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012586:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801258a:	6010      	str	r0, [r2, #0]
 801258c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012590:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012594:	f380 8811 	msr	BASEPRI, r0
 8012598:	f3bf 8f4f 	dsb	sy
 801259c:	f3bf 8f6f 	isb	sy
 80125a0:	f7fe feb6 	bl	8011310 <vTaskSwitchContext>
 80125a4:	f04f 0000 	mov.w	r0, #0
 80125a8:	f380 8811 	msr	BASEPRI, r0
 80125ac:	bc09      	pop	{r0, r3}
 80125ae:	6819      	ldr	r1, [r3, #0]
 80125b0:	6808      	ldr	r0, [r1, #0]
 80125b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125b6:	f01e 0f10 	tst.w	lr, #16
 80125ba:	bf08      	it	eq
 80125bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80125c0:	f380 8809 	msr	PSP, r0
 80125c4:	f3bf 8f6f 	isb	sy
 80125c8:	4770      	bx	lr
 80125ca:	bf00      	nop
 80125cc:	f3af 8000 	nop.w

080125d0 <pxCurrentTCBConst>:
 80125d0:	20007c84 	.word	0x20007c84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80125d4:	bf00      	nop
 80125d6:	bf00      	nop

080125d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80125d8:	b580      	push	{r7, lr}
 80125da:	b082      	sub	sp, #8
 80125dc:	af00      	add	r7, sp, #0
	__asm volatile
 80125de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125e2:	f383 8811 	msr	BASEPRI, r3
 80125e6:	f3bf 8f6f 	isb	sy
 80125ea:	f3bf 8f4f 	dsb	sy
 80125ee:	607b      	str	r3, [r7, #4]
}
 80125f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80125f2:	f7fe fdd3 	bl	801119c <xTaskIncrementTick>
 80125f6:	4603      	mov	r3, r0
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d003      	beq.n	8012604 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80125fc:	4b06      	ldr	r3, [pc, #24]	; (8012618 <xPortSysTickHandler+0x40>)
 80125fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012602:	601a      	str	r2, [r3, #0]
 8012604:	2300      	movs	r3, #0
 8012606:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012608:	683b      	ldr	r3, [r7, #0]
 801260a:	f383 8811 	msr	BASEPRI, r3
}
 801260e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012610:	bf00      	nop
 8012612:	3708      	adds	r7, #8
 8012614:	46bd      	mov	sp, r7
 8012616:	bd80      	pop	{r7, pc}
 8012618:	e000ed04 	.word	0xe000ed04

0801261c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801261c:	b480      	push	{r7}
 801261e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012620:	4b0b      	ldr	r3, [pc, #44]	; (8012650 <vPortSetupTimerInterrupt+0x34>)
 8012622:	2200      	movs	r2, #0
 8012624:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012626:	4b0b      	ldr	r3, [pc, #44]	; (8012654 <vPortSetupTimerInterrupt+0x38>)
 8012628:	2200      	movs	r2, #0
 801262a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801262c:	4b0a      	ldr	r3, [pc, #40]	; (8012658 <vPortSetupTimerInterrupt+0x3c>)
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	4a0a      	ldr	r2, [pc, #40]	; (801265c <vPortSetupTimerInterrupt+0x40>)
 8012632:	fba2 2303 	umull	r2, r3, r2, r3
 8012636:	099b      	lsrs	r3, r3, #6
 8012638:	4a09      	ldr	r2, [pc, #36]	; (8012660 <vPortSetupTimerInterrupt+0x44>)
 801263a:	3b01      	subs	r3, #1
 801263c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801263e:	4b04      	ldr	r3, [pc, #16]	; (8012650 <vPortSetupTimerInterrupt+0x34>)
 8012640:	2207      	movs	r2, #7
 8012642:	601a      	str	r2, [r3, #0]
}
 8012644:	bf00      	nop
 8012646:	46bd      	mov	sp, r7
 8012648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264c:	4770      	bx	lr
 801264e:	bf00      	nop
 8012650:	e000e010 	.word	0xe000e010
 8012654:	e000e018 	.word	0xe000e018
 8012658:	20000134 	.word	0x20000134
 801265c:	10624dd3 	.word	0x10624dd3
 8012660:	e000e014 	.word	0xe000e014

08012664 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012664:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012674 <vPortEnableVFP+0x10>
 8012668:	6801      	ldr	r1, [r0, #0]
 801266a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801266e:	6001      	str	r1, [r0, #0]
 8012670:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012672:	bf00      	nop
 8012674:	e000ed88 	.word	0xe000ed88

08012678 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012678:	b480      	push	{r7}
 801267a:	b085      	sub	sp, #20
 801267c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801267e:	f3ef 8305 	mrs	r3, IPSR
 8012682:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	2b0f      	cmp	r3, #15
 8012688:	d914      	bls.n	80126b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801268a:	4a17      	ldr	r2, [pc, #92]	; (80126e8 <vPortValidateInterruptPriority+0x70>)
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	4413      	add	r3, r2
 8012690:	781b      	ldrb	r3, [r3, #0]
 8012692:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012694:	4b15      	ldr	r3, [pc, #84]	; (80126ec <vPortValidateInterruptPriority+0x74>)
 8012696:	781b      	ldrb	r3, [r3, #0]
 8012698:	7afa      	ldrb	r2, [r7, #11]
 801269a:	429a      	cmp	r2, r3
 801269c:	d20a      	bcs.n	80126b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801269e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126a2:	f383 8811 	msr	BASEPRI, r3
 80126a6:	f3bf 8f6f 	isb	sy
 80126aa:	f3bf 8f4f 	dsb	sy
 80126ae:	607b      	str	r3, [r7, #4]
}
 80126b0:	bf00      	nop
 80126b2:	e7fe      	b.n	80126b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80126b4:	4b0e      	ldr	r3, [pc, #56]	; (80126f0 <vPortValidateInterruptPriority+0x78>)
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80126bc:	4b0d      	ldr	r3, [pc, #52]	; (80126f4 <vPortValidateInterruptPriority+0x7c>)
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	429a      	cmp	r2, r3
 80126c2:	d90a      	bls.n	80126da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80126c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126c8:	f383 8811 	msr	BASEPRI, r3
 80126cc:	f3bf 8f6f 	isb	sy
 80126d0:	f3bf 8f4f 	dsb	sy
 80126d4:	603b      	str	r3, [r7, #0]
}
 80126d6:	bf00      	nop
 80126d8:	e7fe      	b.n	80126d8 <vPortValidateInterruptPriority+0x60>
	}
 80126da:	bf00      	nop
 80126dc:	3714      	adds	r7, #20
 80126de:	46bd      	mov	sp, r7
 80126e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e4:	4770      	bx	lr
 80126e6:	bf00      	nop
 80126e8:	e000e3f0 	.word	0xe000e3f0
 80126ec:	200082b0 	.word	0x200082b0
 80126f0:	e000ed0c 	.word	0xe000ed0c
 80126f4:	200082b4 	.word	0x200082b4

080126f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80126f8:	b580      	push	{r7, lr}
 80126fa:	b088      	sub	sp, #32
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012700:	2300      	movs	r3, #0
 8012702:	617b      	str	r3, [r7, #20]

	/* The heap must be initialised before the first call to
	prvPortMalloc(). */
	configASSERT( pxEnd );
 8012704:	4b48      	ldr	r3, [pc, #288]	; (8012828 <pvPortMalloc+0x130>)
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	2b00      	cmp	r3, #0
 801270a:	d10a      	bne.n	8012722 <pvPortMalloc+0x2a>
	__asm volatile
 801270c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012710:	f383 8811 	msr	BASEPRI, r3
 8012714:	f3bf 8f6f 	isb	sy
 8012718:	f3bf 8f4f 	dsb	sy
 801271c:	60fb      	str	r3, [r7, #12]
}
 801271e:	bf00      	nop
 8012720:	e7fe      	b.n	8012720 <pvPortMalloc+0x28>

	vTaskSuspendAll();
 8012722:	f7fe fc7f 	bl	8011024 <vTaskSuspendAll>
	{
		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012726:	4b41      	ldr	r3, [pc, #260]	; (801282c <pvPortMalloc+0x134>)
 8012728:	681a      	ldr	r2, [r3, #0]
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	4013      	ands	r3, r2
 801272e:	2b00      	cmp	r3, #0
 8012730:	d172      	bne.n	8012818 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	2b00      	cmp	r3, #0
 8012736:	d00d      	beq.n	8012754 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 8012738:	2208      	movs	r2, #8
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	4413      	add	r3, r2
 801273e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	f003 0307 	and.w	r3, r3, #7
 8012746:	2b00      	cmp	r3, #0
 8012748:	d004      	beq.n	8012754 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	f023 0307 	bic.w	r3, r3, #7
 8012750:	3308      	adds	r3, #8
 8012752:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	2b00      	cmp	r3, #0
 8012758:	d05e      	beq.n	8012818 <pvPortMalloc+0x120>
 801275a:	4b35      	ldr	r3, [pc, #212]	; (8012830 <pvPortMalloc+0x138>)
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	687a      	ldr	r2, [r7, #4]
 8012760:	429a      	cmp	r2, r3
 8012762:	d859      	bhi.n	8012818 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012764:	4b33      	ldr	r3, [pc, #204]	; (8012834 <pvPortMalloc+0x13c>)
 8012766:	61bb      	str	r3, [r7, #24]
				pxBlock = xStart.pxNextFreeBlock;
 8012768:	4b32      	ldr	r3, [pc, #200]	; (8012834 <pvPortMalloc+0x13c>)
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801276e:	e004      	b.n	801277a <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 8012770:	69fb      	ldr	r3, [r7, #28]
 8012772:	61bb      	str	r3, [r7, #24]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012774:	69fb      	ldr	r3, [r7, #28]
 8012776:	681b      	ldr	r3, [r3, #0]
 8012778:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801277a:	69fb      	ldr	r3, [r7, #28]
 801277c:	685b      	ldr	r3, [r3, #4]
 801277e:	687a      	ldr	r2, [r7, #4]
 8012780:	429a      	cmp	r2, r3
 8012782:	d903      	bls.n	801278c <pvPortMalloc+0x94>
 8012784:	69fb      	ldr	r3, [r7, #28]
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d1f1      	bne.n	8012770 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801278c:	4b26      	ldr	r3, [pc, #152]	; (8012828 <pvPortMalloc+0x130>)
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	69fa      	ldr	r2, [r7, #28]
 8012792:	429a      	cmp	r2, r3
 8012794:	d040      	beq.n	8012818 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012796:	69bb      	ldr	r3, [r7, #24]
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	2208      	movs	r2, #8
 801279c:	4413      	add	r3, r2
 801279e:	617b      	str	r3, [r7, #20]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80127a0:	69fb      	ldr	r3, [r7, #28]
 80127a2:	681a      	ldr	r2, [r3, #0]
 80127a4:	69bb      	ldr	r3, [r7, #24]
 80127a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80127a8:	69fb      	ldr	r3, [r7, #28]
 80127aa:	685a      	ldr	r2, [r3, #4]
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	1ad2      	subs	r2, r2, r3
 80127b0:	2308      	movs	r3, #8
 80127b2:	005b      	lsls	r3, r3, #1
 80127b4:	429a      	cmp	r2, r3
 80127b6:	d90f      	bls.n	80127d8 <pvPortMalloc+0xe0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80127b8:	69fa      	ldr	r2, [r7, #28]
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	4413      	add	r3, r2
 80127be:	613b      	str	r3, [r7, #16]

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80127c0:	69fb      	ldr	r3, [r7, #28]
 80127c2:	685a      	ldr	r2, [r3, #4]
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	1ad2      	subs	r2, r2, r3
 80127c8:	693b      	ldr	r3, [r7, #16]
 80127ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80127cc:	69fb      	ldr	r3, [r7, #28]
 80127ce:	687a      	ldr	r2, [r7, #4]
 80127d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 80127d2:	6938      	ldr	r0, [r7, #16]
 80127d4:	f000 f896 	bl	8012904 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80127d8:	4b15      	ldr	r3, [pc, #84]	; (8012830 <pvPortMalloc+0x138>)
 80127da:	681a      	ldr	r2, [r3, #0]
 80127dc:	69fb      	ldr	r3, [r7, #28]
 80127de:	685b      	ldr	r3, [r3, #4]
 80127e0:	1ad3      	subs	r3, r2, r3
 80127e2:	4a13      	ldr	r2, [pc, #76]	; (8012830 <pvPortMalloc+0x138>)
 80127e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80127e6:	4b12      	ldr	r3, [pc, #72]	; (8012830 <pvPortMalloc+0x138>)
 80127e8:	681a      	ldr	r2, [r3, #0]
 80127ea:	4b13      	ldr	r3, [pc, #76]	; (8012838 <pvPortMalloc+0x140>)
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	429a      	cmp	r2, r3
 80127f0:	d203      	bcs.n	80127fa <pvPortMalloc+0x102>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80127f2:	4b0f      	ldr	r3, [pc, #60]	; (8012830 <pvPortMalloc+0x138>)
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	4a10      	ldr	r2, [pc, #64]	; (8012838 <pvPortMalloc+0x140>)
 80127f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80127fa:	69fb      	ldr	r3, [r7, #28]
 80127fc:	685a      	ldr	r2, [r3, #4]
 80127fe:	4b0b      	ldr	r3, [pc, #44]	; (801282c <pvPortMalloc+0x134>)
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	431a      	orrs	r2, r3
 8012804:	69fb      	ldr	r3, [r7, #28]
 8012806:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012808:	69fb      	ldr	r3, [r7, #28]
 801280a:	2200      	movs	r2, #0
 801280c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801280e:	4b0b      	ldr	r3, [pc, #44]	; (801283c <pvPortMalloc+0x144>)
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	3301      	adds	r3, #1
 8012814:	4a09      	ldr	r2, [pc, #36]	; (801283c <pvPortMalloc+0x144>)
 8012816:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012818:	f7fe fc12 	bl	8011040 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	return pvReturn;
 801281c:	697b      	ldr	r3, [r7, #20]
}
 801281e:	4618      	mov	r0, r3
 8012820:	3720      	adds	r7, #32
 8012822:	46bd      	mov	sp, r7
 8012824:	bd80      	pop	{r7, pc}
 8012826:	bf00      	nop
 8012828:	200082c0 	.word	0x200082c0
 801282c:	200082d4 	.word	0x200082d4
 8012830:	200082c4 	.word	0x200082c4
 8012834:	200082b8 	.word	0x200082b8
 8012838:	200082c8 	.word	0x200082c8
 801283c:	200082cc 	.word	0x200082cc

08012840 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012840:	b580      	push	{r7, lr}
 8012842:	b086      	sub	sp, #24
 8012844:	af00      	add	r7, sp, #0
 8012846:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	2b00      	cmp	r3, #0
 8012850:	d04d      	beq.n	80128ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012852:	2308      	movs	r3, #8
 8012854:	425b      	negs	r3, r3
 8012856:	697a      	ldr	r2, [r7, #20]
 8012858:	4413      	add	r3, r2
 801285a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801285c:	697b      	ldr	r3, [r7, #20]
 801285e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012860:	693b      	ldr	r3, [r7, #16]
 8012862:	685a      	ldr	r2, [r3, #4]
 8012864:	4b24      	ldr	r3, [pc, #144]	; (80128f8 <vPortFree+0xb8>)
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	4013      	ands	r3, r2
 801286a:	2b00      	cmp	r3, #0
 801286c:	d10a      	bne.n	8012884 <vPortFree+0x44>
	__asm volatile
 801286e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012872:	f383 8811 	msr	BASEPRI, r3
 8012876:	f3bf 8f6f 	isb	sy
 801287a:	f3bf 8f4f 	dsb	sy
 801287e:	60fb      	str	r3, [r7, #12]
}
 8012880:	bf00      	nop
 8012882:	e7fe      	b.n	8012882 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012884:	693b      	ldr	r3, [r7, #16]
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	2b00      	cmp	r3, #0
 801288a:	d00a      	beq.n	80128a2 <vPortFree+0x62>
	__asm volatile
 801288c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012890:	f383 8811 	msr	BASEPRI, r3
 8012894:	f3bf 8f6f 	isb	sy
 8012898:	f3bf 8f4f 	dsb	sy
 801289c:	60bb      	str	r3, [r7, #8]
}
 801289e:	bf00      	nop
 80128a0:	e7fe      	b.n	80128a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80128a2:	693b      	ldr	r3, [r7, #16]
 80128a4:	685a      	ldr	r2, [r3, #4]
 80128a6:	4b14      	ldr	r3, [pc, #80]	; (80128f8 <vPortFree+0xb8>)
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	4013      	ands	r3, r2
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d01e      	beq.n	80128ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80128b0:	693b      	ldr	r3, [r7, #16]
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d11a      	bne.n	80128ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80128b8:	693b      	ldr	r3, [r7, #16]
 80128ba:	685a      	ldr	r2, [r3, #4]
 80128bc:	4b0e      	ldr	r3, [pc, #56]	; (80128f8 <vPortFree+0xb8>)
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	43db      	mvns	r3, r3
 80128c2:	401a      	ands	r2, r3
 80128c4:	693b      	ldr	r3, [r7, #16]
 80128c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80128c8:	f7fe fbac 	bl	8011024 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80128cc:	693b      	ldr	r3, [r7, #16]
 80128ce:	685a      	ldr	r2, [r3, #4]
 80128d0:	4b0a      	ldr	r3, [pc, #40]	; (80128fc <vPortFree+0xbc>)
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	4413      	add	r3, r2
 80128d6:	4a09      	ldr	r2, [pc, #36]	; (80128fc <vPortFree+0xbc>)
 80128d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80128da:	6938      	ldr	r0, [r7, #16]
 80128dc:	f000 f812 	bl	8012904 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80128e0:	4b07      	ldr	r3, [pc, #28]	; (8012900 <vPortFree+0xc0>)
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	3301      	adds	r3, #1
 80128e6:	4a06      	ldr	r2, [pc, #24]	; (8012900 <vPortFree+0xc0>)
 80128e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80128ea:	f7fe fba9 	bl	8011040 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80128ee:	bf00      	nop
 80128f0:	3718      	adds	r7, #24
 80128f2:	46bd      	mov	sp, r7
 80128f4:	bd80      	pop	{r7, pc}
 80128f6:	bf00      	nop
 80128f8:	200082d4 	.word	0x200082d4
 80128fc:	200082c4 	.word	0x200082c4
 8012900:	200082d0 	.word	0x200082d0

08012904 <prvInsertBlockIntoFreeList>:
	return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012904:	b480      	push	{r7}
 8012906:	b085      	sub	sp, #20
 8012908:	af00      	add	r7, sp, #0
 801290a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801290c:	4b28      	ldr	r3, [pc, #160]	; (80129b0 <prvInsertBlockIntoFreeList+0xac>)
 801290e:	60fb      	str	r3, [r7, #12]
 8012910:	e002      	b.n	8012918 <prvInsertBlockIntoFreeList+0x14>
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	60fb      	str	r3, [r7, #12]
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	687a      	ldr	r2, [r7, #4]
 801291e:	429a      	cmp	r2, r3
 8012920:	d8f7      	bhi.n	8012912 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	685b      	ldr	r3, [r3, #4]
 801292a:	68ba      	ldr	r2, [r7, #8]
 801292c:	4413      	add	r3, r2
 801292e:	687a      	ldr	r2, [r7, #4]
 8012930:	429a      	cmp	r2, r3
 8012932:	d108      	bne.n	8012946 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	685a      	ldr	r2, [r3, #4]
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	685b      	ldr	r3, [r3, #4]
 801293c:	441a      	add	r2, r3
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	685b      	ldr	r3, [r3, #4]
 801294e:	68ba      	ldr	r2, [r7, #8]
 8012950:	441a      	add	r2, r3
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	429a      	cmp	r2, r3
 8012958:	d118      	bne.n	801298c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	681a      	ldr	r2, [r3, #0]
 801295e:	4b15      	ldr	r3, [pc, #84]	; (80129b4 <prvInsertBlockIntoFreeList+0xb0>)
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	429a      	cmp	r2, r3
 8012964:	d00d      	beq.n	8012982 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	685a      	ldr	r2, [r3, #4]
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	685b      	ldr	r3, [r3, #4]
 8012970:	441a      	add	r2, r3
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	681a      	ldr	r2, [r3, #0]
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	601a      	str	r2, [r3, #0]
 8012980:	e008      	b.n	8012994 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012982:	4b0c      	ldr	r3, [pc, #48]	; (80129b4 <prvInsertBlockIntoFreeList+0xb0>)
 8012984:	681a      	ldr	r2, [r3, #0]
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	601a      	str	r2, [r3, #0]
 801298a:	e003      	b.n	8012994 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	681a      	ldr	r2, [r3, #0]
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012994:	68fa      	ldr	r2, [r7, #12]
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	429a      	cmp	r2, r3
 801299a:	d002      	beq.n	80129a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801299c:	68fb      	ldr	r3, [r7, #12]
 801299e:	687a      	ldr	r2, [r7, #4]
 80129a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80129a2:	bf00      	nop
 80129a4:	3714      	adds	r7, #20
 80129a6:	46bd      	mov	sp, r7
 80129a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ac:	4770      	bx	lr
 80129ae:	bf00      	nop
 80129b0:	200082b8 	.word	0x200082b8
 80129b4:	200082c0 	.word	0x200082c0

080129b8 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
 80129b8:	b480      	push	{r7}
 80129ba:	b08f      	sub	sp, #60	; 0x3c
 80129bc:	af00      	add	r7, sp, #0
 80129be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxFirstFreeBlockInRegion = NULL, *pxPreviousFreeBlock;
 80129c0:	2300      	movs	r3, #0
 80129c2:	623b      	str	r3, [r7, #32]
size_t xAlignedHeap;
size_t xTotalRegionSize, xTotalHeapSize = 0;
 80129c4:	2300      	movs	r3, #0
 80129c6:	633b      	str	r3, [r7, #48]	; 0x30
BaseType_t xDefinedRegions = 0;
 80129c8:	2300      	movs	r3, #0
 80129ca:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xAddress;
const HeapRegion_t *pxHeapRegion;

	/* Can only call once! */
	configASSERT( pxEnd == NULL );
 80129cc:	4b5a      	ldr	r3, [pc, #360]	; (8012b38 <vPortDefineHeapRegions+0x180>)
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d00a      	beq.n	80129ea <vPortDefineHeapRegions+0x32>
	__asm volatile
 80129d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129d8:	f383 8811 	msr	BASEPRI, r3
 80129dc:	f3bf 8f6f 	isb	sy
 80129e0:	f3bf 8f4f 	dsb	sy
 80129e4:	617b      	str	r3, [r7, #20]
}
 80129e6:	bf00      	nop
 80129e8:	e7fe      	b.n	80129e8 <vPortDefineHeapRegions+0x30>

	pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 80129ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129ec:	00db      	lsls	r3, r3, #3
 80129ee:	687a      	ldr	r2, [r7, #4]
 80129f0:	4413      	add	r3, r2
 80129f2:	627b      	str	r3, [r7, #36]	; 0x24

	while( pxHeapRegion->xSizeInBytes > 0 )
 80129f4:	e07d      	b.n	8012af2 <vPortDefineHeapRegions+0x13a>
	{
		xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 80129f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129f8:	685b      	ldr	r3, [r3, #4]
 80129fa:	637b      	str	r3, [r7, #52]	; 0x34

		/* Ensure the heap region starts on a correctly aligned boundary. */
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
 80129fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	62bb      	str	r3, [r7, #40]	; 0x28
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a04:	f003 0307 	and.w	r3, r3, #7
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d00e      	beq.n	8012a2a <vPortDefineHeapRegions+0x72>
		{
			xAddress += ( portBYTE_ALIGNMENT - 1 );
 8012a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a0e:	3307      	adds	r3, #7
 8012a10:	62bb      	str	r3, [r7, #40]	; 0x28
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
 8012a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a14:	f023 0307 	bic.w	r3, r3, #7
 8012a18:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Adjust the size for the bytes lost to alignment. */
			xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
 8012a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	461a      	mov	r2, r3
 8012a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a22:	1ad3      	subs	r3, r2, r3
 8012a24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012a26:	4413      	add	r3, r2
 8012a28:	637b      	str	r3, [r7, #52]	; 0x34
		}

		xAlignedHeap = xAddress;
 8012a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a2c:	61fb      	str	r3, [r7, #28]

		/* Set xStart if it has not already been set. */
		if( xDefinedRegions == 0 )
 8012a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d106      	bne.n	8012a42 <vPortDefineHeapRegions+0x8a>
		{
			/* xStart is used to hold a pointer to the first item in the list of
			free blocks.  The void cast is used to prevent compiler warnings. */
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
 8012a34:	69fb      	ldr	r3, [r7, #28]
 8012a36:	4a41      	ldr	r2, [pc, #260]	; (8012b3c <vPortDefineHeapRegions+0x184>)
 8012a38:	6013      	str	r3, [r2, #0]
			xStart.xBlockSize = ( size_t ) 0;
 8012a3a:	4b40      	ldr	r3, [pc, #256]	; (8012b3c <vPortDefineHeapRegions+0x184>)
 8012a3c:	2200      	movs	r2, #0
 8012a3e:	605a      	str	r2, [r3, #4]
 8012a40:	e01f      	b.n	8012a82 <vPortDefineHeapRegions+0xca>
		}
		else
		{
			/* Should only get here if one region has already been added to the
			heap. */
			configASSERT( pxEnd != NULL );
 8012a42:	4b3d      	ldr	r3, [pc, #244]	; (8012b38 <vPortDefineHeapRegions+0x180>)
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d10a      	bne.n	8012a60 <vPortDefineHeapRegions+0xa8>
	__asm volatile
 8012a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a4e:	f383 8811 	msr	BASEPRI, r3
 8012a52:	f3bf 8f6f 	isb	sy
 8012a56:	f3bf 8f4f 	dsb	sy
 8012a5a:	613b      	str	r3, [r7, #16]
}
 8012a5c:	bf00      	nop
 8012a5e:	e7fe      	b.n	8012a5e <vPortDefineHeapRegions+0xa6>

			/* Check blocks are passed in with increasing start addresses. */
			configASSERT( xAddress > ( size_t ) pxEnd );
 8012a60:	4b35      	ldr	r3, [pc, #212]	; (8012b38 <vPortDefineHeapRegions+0x180>)
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	461a      	mov	r2, r3
 8012a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a68:	4293      	cmp	r3, r2
 8012a6a:	d80a      	bhi.n	8012a82 <vPortDefineHeapRegions+0xca>
	__asm volatile
 8012a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a70:	f383 8811 	msr	BASEPRI, r3
 8012a74:	f3bf 8f6f 	isb	sy
 8012a78:	f3bf 8f4f 	dsb	sy
 8012a7c:	60fb      	str	r3, [r7, #12]
}
 8012a7e:	bf00      	nop
 8012a80:	e7fe      	b.n	8012a80 <vPortDefineHeapRegions+0xc8>
		}

		/* Remember the location of the end marker in the previous region, if
		any. */
		pxPreviousFreeBlock = pxEnd;
 8012a82:	4b2d      	ldr	r3, [pc, #180]	; (8012b38 <vPortDefineHeapRegions+0x180>)
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	61bb      	str	r3, [r7, #24]

		/* pxEnd is used to mark the end of the list of free blocks and is
		inserted at the end of the region space. */
		xAddress = xAlignedHeap + xTotalRegionSize;
 8012a88:	69fa      	ldr	r2, [r7, #28]
 8012a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a8c:	4413      	add	r3, r2
 8012a8e:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress -= xHeapStructSize;
 8012a90:	2208      	movs	r2, #8
 8012a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a94:	1a9b      	subs	r3, r3, r2
 8012a96:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
 8012a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a9a:	f023 0307 	bic.w	r3, r3, #7
 8012a9e:	62bb      	str	r3, [r7, #40]	; 0x28
		pxEnd = ( BlockLink_t * ) xAddress;
 8012aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012aa2:	4a25      	ldr	r2, [pc, #148]	; (8012b38 <vPortDefineHeapRegions+0x180>)
 8012aa4:	6013      	str	r3, [r2, #0]
		pxEnd->xBlockSize = 0;
 8012aa6:	4b24      	ldr	r3, [pc, #144]	; (8012b38 <vPortDefineHeapRegions+0x180>)
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	2200      	movs	r2, #0
 8012aac:	605a      	str	r2, [r3, #4]
		pxEnd->pxNextFreeBlock = NULL;
 8012aae:	4b22      	ldr	r3, [pc, #136]	; (8012b38 <vPortDefineHeapRegions+0x180>)
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	2200      	movs	r2, #0
 8012ab4:	601a      	str	r2, [r3, #0]

		/* To start with there is a single free block in this region that is
		sized to take up the entire heap region minus the space taken by the
		free block structure. */
		pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 8012ab6:	69fb      	ldr	r3, [r7, #28]
 8012ab8:	623b      	str	r3, [r7, #32]
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
 8012aba:	6a3b      	ldr	r3, [r7, #32]
 8012abc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012abe:	1ad2      	subs	r2, r2, r3
 8012ac0:	6a3b      	ldr	r3, [r7, #32]
 8012ac2:	605a      	str	r2, [r3, #4]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
 8012ac4:	4b1c      	ldr	r3, [pc, #112]	; (8012b38 <vPortDefineHeapRegions+0x180>)
 8012ac6:	681a      	ldr	r2, [r3, #0]
 8012ac8:	6a3b      	ldr	r3, [r7, #32]
 8012aca:	601a      	str	r2, [r3, #0]

		/* If this is not the first region that makes up the entire heap space
		then link the previous region to this region. */
		if( pxPreviousFreeBlock != NULL )
 8012acc:	69bb      	ldr	r3, [r7, #24]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d002      	beq.n	8012ad8 <vPortDefineHeapRegions+0x120>
		{
			pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
 8012ad2:	69bb      	ldr	r3, [r7, #24]
 8012ad4:	6a3a      	ldr	r2, [r7, #32]
 8012ad6:	601a      	str	r2, [r3, #0]
		}

		xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 8012ad8:	6a3b      	ldr	r3, [r7, #32]
 8012ada:	685b      	ldr	r3, [r3, #4]
 8012adc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012ade:	4413      	add	r3, r2
 8012ae0:	633b      	str	r3, [r7, #48]	; 0x30

		/* Move onto the next HeapRegion_t structure. */
		xDefinedRegions++;
 8012ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ae4:	3301      	adds	r3, #1
 8012ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 8012ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aea:	00db      	lsls	r3, r3, #3
 8012aec:	687a      	ldr	r2, [r7, #4]
 8012aee:	4413      	add	r3, r2
 8012af0:	627b      	str	r3, [r7, #36]	; 0x24
	while( pxHeapRegion->xSizeInBytes > 0 )
 8012af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012af4:	685b      	ldr	r3, [r3, #4]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	f47f af7d 	bne.w	80129f6 <vPortDefineHeapRegions+0x3e>
	}

	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 8012afc:	4a10      	ldr	r2, [pc, #64]	; (8012b40 <vPortDefineHeapRegions+0x188>)
 8012afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b00:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = xTotalHeapSize;
 8012b02:	4a10      	ldr	r2, [pc, #64]	; (8012b44 <vPortDefineHeapRegions+0x18c>)
 8012b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b06:	6013      	str	r3, [r2, #0]

	/* Check something was actually defined before it is accessed. */
	configASSERT( xTotalHeapSize );
 8012b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d10a      	bne.n	8012b24 <vPortDefineHeapRegions+0x16c>
	__asm volatile
 8012b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b12:	f383 8811 	msr	BASEPRI, r3
 8012b16:	f3bf 8f6f 	isb	sy
 8012b1a:	f3bf 8f4f 	dsb	sy
 8012b1e:	60bb      	str	r3, [r7, #8]
}
 8012b20:	bf00      	nop
 8012b22:	e7fe      	b.n	8012b22 <vPortDefineHeapRegions+0x16a>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012b24:	4b08      	ldr	r3, [pc, #32]	; (8012b48 <vPortDefineHeapRegions+0x190>)
 8012b26:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012b2a:	601a      	str	r2, [r3, #0]
}
 8012b2c:	bf00      	nop
 8012b2e:	373c      	adds	r7, #60	; 0x3c
 8012b30:	46bd      	mov	sp, r7
 8012b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b36:	4770      	bx	lr
 8012b38:	200082c0 	.word	0x200082c0
 8012b3c:	200082b8 	.word	0x200082b8
 8012b40:	200082c8 	.word	0x200082c8
 8012b44:	200082c4 	.word	0x200082c4
 8012b48:	200082d4 	.word	0x200082d4

08012b4c <atof>:
 8012b4c:	2100      	movs	r1, #0
 8012b4e:	f001 be25 	b.w	801479c <strtod>

08012b52 <atoi>:
 8012b52:	220a      	movs	r2, #10
 8012b54:	2100      	movs	r1, #0
 8012b56:	f001 beaf 	b.w	80148b8 <strtol>

08012b5a <atol>:
 8012b5a:	220a      	movs	r2, #10
 8012b5c:	2100      	movs	r1, #0
 8012b5e:	f001 beab 	b.w	80148b8 <strtol>
	...

08012b64 <__errno>:
 8012b64:	4b01      	ldr	r3, [pc, #4]	; (8012b6c <__errno+0x8>)
 8012b66:	6818      	ldr	r0, [r3, #0]
 8012b68:	4770      	bx	lr
 8012b6a:	bf00      	nop
 8012b6c:	20000180 	.word	0x20000180

08012b70 <std>:
 8012b70:	2300      	movs	r3, #0
 8012b72:	b510      	push	{r4, lr}
 8012b74:	4604      	mov	r4, r0
 8012b76:	e9c0 3300 	strd	r3, r3, [r0]
 8012b7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012b7e:	6083      	str	r3, [r0, #8]
 8012b80:	8181      	strh	r1, [r0, #12]
 8012b82:	6643      	str	r3, [r0, #100]	; 0x64
 8012b84:	81c2      	strh	r2, [r0, #14]
 8012b86:	6183      	str	r3, [r0, #24]
 8012b88:	4619      	mov	r1, r3
 8012b8a:	2208      	movs	r2, #8
 8012b8c:	305c      	adds	r0, #92	; 0x5c
 8012b8e:	f000 f9c6 	bl	8012f1e <memset>
 8012b92:	4b05      	ldr	r3, [pc, #20]	; (8012ba8 <std+0x38>)
 8012b94:	6263      	str	r3, [r4, #36]	; 0x24
 8012b96:	4b05      	ldr	r3, [pc, #20]	; (8012bac <std+0x3c>)
 8012b98:	62a3      	str	r3, [r4, #40]	; 0x28
 8012b9a:	4b05      	ldr	r3, [pc, #20]	; (8012bb0 <std+0x40>)
 8012b9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012b9e:	4b05      	ldr	r3, [pc, #20]	; (8012bb4 <std+0x44>)
 8012ba0:	6224      	str	r4, [r4, #32]
 8012ba2:	6323      	str	r3, [r4, #48]	; 0x30
 8012ba4:	bd10      	pop	{r4, pc}
 8012ba6:	bf00      	nop
 8012ba8:	08013a61 	.word	0x08013a61
 8012bac:	08013a83 	.word	0x08013a83
 8012bb0:	08013abb 	.word	0x08013abb
 8012bb4:	08013adf 	.word	0x08013adf

08012bb8 <_cleanup_r>:
 8012bb8:	4901      	ldr	r1, [pc, #4]	; (8012bc0 <_cleanup_r+0x8>)
 8012bba:	f000 b8af 	b.w	8012d1c <_fwalk_reent>
 8012bbe:	bf00      	nop
 8012bc0:	08015789 	.word	0x08015789

08012bc4 <__sfmoreglue>:
 8012bc4:	b570      	push	{r4, r5, r6, lr}
 8012bc6:	2268      	movs	r2, #104	; 0x68
 8012bc8:	1e4d      	subs	r5, r1, #1
 8012bca:	4355      	muls	r5, r2
 8012bcc:	460e      	mov	r6, r1
 8012bce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012bd2:	f000 f9cd 	bl	8012f70 <_malloc_r>
 8012bd6:	4604      	mov	r4, r0
 8012bd8:	b140      	cbz	r0, 8012bec <__sfmoreglue+0x28>
 8012bda:	2100      	movs	r1, #0
 8012bdc:	e9c0 1600 	strd	r1, r6, [r0]
 8012be0:	300c      	adds	r0, #12
 8012be2:	60a0      	str	r0, [r4, #8]
 8012be4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012be8:	f000 f999 	bl	8012f1e <memset>
 8012bec:	4620      	mov	r0, r4
 8012bee:	bd70      	pop	{r4, r5, r6, pc}

08012bf0 <__sfp_lock_acquire>:
 8012bf0:	4801      	ldr	r0, [pc, #4]	; (8012bf8 <__sfp_lock_acquire+0x8>)
 8012bf2:	f000 b984 	b.w	8012efe <__retarget_lock_acquire_recursive>
 8012bf6:	bf00      	nop
 8012bf8:	200082d9 	.word	0x200082d9

08012bfc <__sfp_lock_release>:
 8012bfc:	4801      	ldr	r0, [pc, #4]	; (8012c04 <__sfp_lock_release+0x8>)
 8012bfe:	f000 b97f 	b.w	8012f00 <__retarget_lock_release_recursive>
 8012c02:	bf00      	nop
 8012c04:	200082d9 	.word	0x200082d9

08012c08 <__sinit_lock_acquire>:
 8012c08:	4801      	ldr	r0, [pc, #4]	; (8012c10 <__sinit_lock_acquire+0x8>)
 8012c0a:	f000 b978 	b.w	8012efe <__retarget_lock_acquire_recursive>
 8012c0e:	bf00      	nop
 8012c10:	200082da 	.word	0x200082da

08012c14 <__sinit_lock_release>:
 8012c14:	4801      	ldr	r0, [pc, #4]	; (8012c1c <__sinit_lock_release+0x8>)
 8012c16:	f000 b973 	b.w	8012f00 <__retarget_lock_release_recursive>
 8012c1a:	bf00      	nop
 8012c1c:	200082da 	.word	0x200082da

08012c20 <__sinit>:
 8012c20:	b510      	push	{r4, lr}
 8012c22:	4604      	mov	r4, r0
 8012c24:	f7ff fff0 	bl	8012c08 <__sinit_lock_acquire>
 8012c28:	69a3      	ldr	r3, [r4, #24]
 8012c2a:	b11b      	cbz	r3, 8012c34 <__sinit+0x14>
 8012c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c30:	f7ff bff0 	b.w	8012c14 <__sinit_lock_release>
 8012c34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012c38:	6523      	str	r3, [r4, #80]	; 0x50
 8012c3a:	4b13      	ldr	r3, [pc, #76]	; (8012c88 <__sinit+0x68>)
 8012c3c:	4a13      	ldr	r2, [pc, #76]	; (8012c8c <__sinit+0x6c>)
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	62a2      	str	r2, [r4, #40]	; 0x28
 8012c42:	42a3      	cmp	r3, r4
 8012c44:	bf04      	itt	eq
 8012c46:	2301      	moveq	r3, #1
 8012c48:	61a3      	streq	r3, [r4, #24]
 8012c4a:	4620      	mov	r0, r4
 8012c4c:	f000 f820 	bl	8012c90 <__sfp>
 8012c50:	6060      	str	r0, [r4, #4]
 8012c52:	4620      	mov	r0, r4
 8012c54:	f000 f81c 	bl	8012c90 <__sfp>
 8012c58:	60a0      	str	r0, [r4, #8]
 8012c5a:	4620      	mov	r0, r4
 8012c5c:	f000 f818 	bl	8012c90 <__sfp>
 8012c60:	2200      	movs	r2, #0
 8012c62:	60e0      	str	r0, [r4, #12]
 8012c64:	2104      	movs	r1, #4
 8012c66:	6860      	ldr	r0, [r4, #4]
 8012c68:	f7ff ff82 	bl	8012b70 <std>
 8012c6c:	68a0      	ldr	r0, [r4, #8]
 8012c6e:	2201      	movs	r2, #1
 8012c70:	2109      	movs	r1, #9
 8012c72:	f7ff ff7d 	bl	8012b70 <std>
 8012c76:	68e0      	ldr	r0, [r4, #12]
 8012c78:	2202      	movs	r2, #2
 8012c7a:	2112      	movs	r1, #18
 8012c7c:	f7ff ff78 	bl	8012b70 <std>
 8012c80:	2301      	movs	r3, #1
 8012c82:	61a3      	str	r3, [r4, #24]
 8012c84:	e7d2      	b.n	8012c2c <__sinit+0xc>
 8012c86:	bf00      	nop
 8012c88:	08018ed4 	.word	0x08018ed4
 8012c8c:	08012bb9 	.word	0x08012bb9

08012c90 <__sfp>:
 8012c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c92:	4607      	mov	r7, r0
 8012c94:	f7ff ffac 	bl	8012bf0 <__sfp_lock_acquire>
 8012c98:	4b1e      	ldr	r3, [pc, #120]	; (8012d14 <__sfp+0x84>)
 8012c9a:	681e      	ldr	r6, [r3, #0]
 8012c9c:	69b3      	ldr	r3, [r6, #24]
 8012c9e:	b913      	cbnz	r3, 8012ca6 <__sfp+0x16>
 8012ca0:	4630      	mov	r0, r6
 8012ca2:	f7ff ffbd 	bl	8012c20 <__sinit>
 8012ca6:	3648      	adds	r6, #72	; 0x48
 8012ca8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012cac:	3b01      	subs	r3, #1
 8012cae:	d503      	bpl.n	8012cb8 <__sfp+0x28>
 8012cb0:	6833      	ldr	r3, [r6, #0]
 8012cb2:	b30b      	cbz	r3, 8012cf8 <__sfp+0x68>
 8012cb4:	6836      	ldr	r6, [r6, #0]
 8012cb6:	e7f7      	b.n	8012ca8 <__sfp+0x18>
 8012cb8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012cbc:	b9d5      	cbnz	r5, 8012cf4 <__sfp+0x64>
 8012cbe:	4b16      	ldr	r3, [pc, #88]	; (8012d18 <__sfp+0x88>)
 8012cc0:	60e3      	str	r3, [r4, #12]
 8012cc2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012cc6:	6665      	str	r5, [r4, #100]	; 0x64
 8012cc8:	f000 f918 	bl	8012efc <__retarget_lock_init_recursive>
 8012ccc:	f7ff ff96 	bl	8012bfc <__sfp_lock_release>
 8012cd0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012cd4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012cd8:	6025      	str	r5, [r4, #0]
 8012cda:	61a5      	str	r5, [r4, #24]
 8012cdc:	2208      	movs	r2, #8
 8012cde:	4629      	mov	r1, r5
 8012ce0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012ce4:	f000 f91b 	bl	8012f1e <memset>
 8012ce8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012cec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012cf0:	4620      	mov	r0, r4
 8012cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012cf4:	3468      	adds	r4, #104	; 0x68
 8012cf6:	e7d9      	b.n	8012cac <__sfp+0x1c>
 8012cf8:	2104      	movs	r1, #4
 8012cfa:	4638      	mov	r0, r7
 8012cfc:	f7ff ff62 	bl	8012bc4 <__sfmoreglue>
 8012d00:	4604      	mov	r4, r0
 8012d02:	6030      	str	r0, [r6, #0]
 8012d04:	2800      	cmp	r0, #0
 8012d06:	d1d5      	bne.n	8012cb4 <__sfp+0x24>
 8012d08:	f7ff ff78 	bl	8012bfc <__sfp_lock_release>
 8012d0c:	230c      	movs	r3, #12
 8012d0e:	603b      	str	r3, [r7, #0]
 8012d10:	e7ee      	b.n	8012cf0 <__sfp+0x60>
 8012d12:	bf00      	nop
 8012d14:	08018ed4 	.word	0x08018ed4
 8012d18:	ffff0001 	.word	0xffff0001

08012d1c <_fwalk_reent>:
 8012d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d20:	4606      	mov	r6, r0
 8012d22:	4688      	mov	r8, r1
 8012d24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012d28:	2700      	movs	r7, #0
 8012d2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012d2e:	f1b9 0901 	subs.w	r9, r9, #1
 8012d32:	d505      	bpl.n	8012d40 <_fwalk_reent+0x24>
 8012d34:	6824      	ldr	r4, [r4, #0]
 8012d36:	2c00      	cmp	r4, #0
 8012d38:	d1f7      	bne.n	8012d2a <_fwalk_reent+0xe>
 8012d3a:	4638      	mov	r0, r7
 8012d3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d40:	89ab      	ldrh	r3, [r5, #12]
 8012d42:	2b01      	cmp	r3, #1
 8012d44:	d907      	bls.n	8012d56 <_fwalk_reent+0x3a>
 8012d46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012d4a:	3301      	adds	r3, #1
 8012d4c:	d003      	beq.n	8012d56 <_fwalk_reent+0x3a>
 8012d4e:	4629      	mov	r1, r5
 8012d50:	4630      	mov	r0, r6
 8012d52:	47c0      	blx	r8
 8012d54:	4307      	orrs	r7, r0
 8012d56:	3568      	adds	r5, #104	; 0x68
 8012d58:	e7e9      	b.n	8012d2e <_fwalk_reent+0x12>
	...

08012d5c <gmtime_r>:
 8012d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d60:	e9d0 6700 	ldrd	r6, r7, [r0]
 8012d64:	460c      	mov	r4, r1
 8012d66:	4a4f      	ldr	r2, [pc, #316]	; (8012ea4 <gmtime_r+0x148>)
 8012d68:	2300      	movs	r3, #0
 8012d6a:	4630      	mov	r0, r6
 8012d6c:	4639      	mov	r1, r7
 8012d6e:	f7ed ff8b 	bl	8000c88 <__aeabi_ldivmod>
 8012d72:	4639      	mov	r1, r7
 8012d74:	4605      	mov	r5, r0
 8012d76:	4a4b      	ldr	r2, [pc, #300]	; (8012ea4 <gmtime_r+0x148>)
 8012d78:	4630      	mov	r0, r6
 8012d7a:	2300      	movs	r3, #0
 8012d7c:	f7ed ff84 	bl	8000c88 <__aeabi_ldivmod>
 8012d80:	2a00      	cmp	r2, #0
 8012d82:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8012d86:	bfb7      	itett	lt
 8012d88:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8012d8c:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 8012d90:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 8012d94:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8012d98:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8012d9c:	fbb2 f1f0 	udiv	r1, r2, r0
 8012da0:	fb00 2211 	mls	r2, r0, r1, r2
 8012da4:	203c      	movs	r0, #60	; 0x3c
 8012da6:	60a1      	str	r1, [r4, #8]
 8012da8:	fbb2 f1f0 	udiv	r1, r2, r0
 8012dac:	fb00 2211 	mls	r2, r0, r1, r2
 8012db0:	6061      	str	r1, [r4, #4]
 8012db2:	6022      	str	r2, [r4, #0]
 8012db4:	2107      	movs	r1, #7
 8012db6:	1cda      	adds	r2, r3, #3
 8012db8:	fb92 f1f1 	sdiv	r1, r2, r1
 8012dbc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8012dc0:	1a52      	subs	r2, r2, r1
 8012dc2:	bf48      	it	mi
 8012dc4:	3207      	addmi	r2, #7
 8012dc6:	4d38      	ldr	r5, [pc, #224]	; (8012ea8 <gmtime_r+0x14c>)
 8012dc8:	4838      	ldr	r0, [pc, #224]	; (8012eac <gmtime_r+0x150>)
 8012dca:	61a2      	str	r2, [r4, #24]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	bfb7      	itett	lt
 8012dd0:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 8012dd4:	fb93 f5f5 	sdivge	r5, r3, r5
 8012dd8:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 8012ddc:	fb92 f5f5 	sdivlt	r5, r2, r5
 8012de0:	fb00 3005 	mla	r0, r0, r5, r3
 8012de4:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8012de8:	fbb0 f2f2 	udiv	r2, r0, r2
 8012dec:	4402      	add	r2, r0
 8012dee:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8012df2:	fbb0 f1f3 	udiv	r1, r0, r3
 8012df6:	1a52      	subs	r2, r2, r1
 8012df8:	f240 1c6d 	movw	ip, #365	; 0x16d
 8012dfc:	492c      	ldr	r1, [pc, #176]	; (8012eb0 <gmtime_r+0x154>)
 8012dfe:	fbb0 f1f1 	udiv	r1, r0, r1
 8012e02:	2764      	movs	r7, #100	; 0x64
 8012e04:	1a52      	subs	r2, r2, r1
 8012e06:	fbb2 f1fc 	udiv	r1, r2, ip
 8012e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8012e0e:	fbb1 f6f7 	udiv	r6, r1, r7
 8012e12:	1af3      	subs	r3, r6, r3
 8012e14:	4403      	add	r3, r0
 8012e16:	fb0c 3311 	mls	r3, ip, r1, r3
 8012e1a:	2299      	movs	r2, #153	; 0x99
 8012e1c:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8012e20:	f10e 0e02 	add.w	lr, lr, #2
 8012e24:	f103 0c01 	add.w	ip, r3, #1
 8012e28:	fbbe f0f2 	udiv	r0, lr, r2
 8012e2c:	4342      	muls	r2, r0
 8012e2e:	3202      	adds	r2, #2
 8012e30:	f04f 0805 	mov.w	r8, #5
 8012e34:	fbb2 f2f8 	udiv	r2, r2, r8
 8012e38:	ebac 0c02 	sub.w	ip, ip, r2
 8012e3c:	f240 52f9 	movw	r2, #1529	; 0x5f9
 8012e40:	4596      	cmp	lr, r2
 8012e42:	bf94      	ite	ls
 8012e44:	2202      	movls	r2, #2
 8012e46:	f06f 0209 	mvnhi.w	r2, #9
 8012e4a:	4410      	add	r0, r2
 8012e4c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8012e50:	fb02 1505 	mla	r5, r2, r5, r1
 8012e54:	2801      	cmp	r0, #1
 8012e56:	bf98      	it	ls
 8012e58:	3501      	addls	r5, #1
 8012e5a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8012e5e:	d30d      	bcc.n	8012e7c <gmtime_r+0x120>
 8012e60:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8012e64:	61e3      	str	r3, [r4, #28]
 8012e66:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8012e6a:	2300      	movs	r3, #0
 8012e6c:	e9c4 0504 	strd	r0, r5, [r4, #16]
 8012e70:	f8c4 c00c 	str.w	ip, [r4, #12]
 8012e74:	6223      	str	r3, [r4, #32]
 8012e76:	4620      	mov	r0, r4
 8012e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e7c:	078a      	lsls	r2, r1, #30
 8012e7e:	d102      	bne.n	8012e86 <gmtime_r+0x12a>
 8012e80:	fb07 1616 	mls	r6, r7, r6, r1
 8012e84:	b95e      	cbnz	r6, 8012e9e <gmtime_r+0x142>
 8012e86:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8012e8a:	fbb1 f6f2 	udiv	r6, r1, r2
 8012e8e:	fb02 1216 	mls	r2, r2, r6, r1
 8012e92:	fab2 f282 	clz	r2, r2
 8012e96:	0952      	lsrs	r2, r2, #5
 8012e98:	333b      	adds	r3, #59	; 0x3b
 8012e9a:	4413      	add	r3, r2
 8012e9c:	e7e2      	b.n	8012e64 <gmtime_r+0x108>
 8012e9e:	2201      	movs	r2, #1
 8012ea0:	e7fa      	b.n	8012e98 <gmtime_r+0x13c>
 8012ea2:	bf00      	nop
 8012ea4:	00015180 	.word	0x00015180
 8012ea8:	00023ab1 	.word	0x00023ab1
 8012eac:	fffdc54f 	.word	0xfffdc54f
 8012eb0:	00023ab0 	.word	0x00023ab0

08012eb4 <__libc_init_array>:
 8012eb4:	b570      	push	{r4, r5, r6, lr}
 8012eb6:	4d0d      	ldr	r5, [pc, #52]	; (8012eec <__libc_init_array+0x38>)
 8012eb8:	4c0d      	ldr	r4, [pc, #52]	; (8012ef0 <__libc_init_array+0x3c>)
 8012eba:	1b64      	subs	r4, r4, r5
 8012ebc:	10a4      	asrs	r4, r4, #2
 8012ebe:	2600      	movs	r6, #0
 8012ec0:	42a6      	cmp	r6, r4
 8012ec2:	d109      	bne.n	8012ed8 <__libc_init_array+0x24>
 8012ec4:	4d0b      	ldr	r5, [pc, #44]	; (8012ef4 <__libc_init_array+0x40>)
 8012ec6:	4c0c      	ldr	r4, [pc, #48]	; (8012ef8 <__libc_init_array+0x44>)
 8012ec8:	f004 fa5c 	bl	8017384 <_init>
 8012ecc:	1b64      	subs	r4, r4, r5
 8012ece:	10a4      	asrs	r4, r4, #2
 8012ed0:	2600      	movs	r6, #0
 8012ed2:	42a6      	cmp	r6, r4
 8012ed4:	d105      	bne.n	8012ee2 <__libc_init_array+0x2e>
 8012ed6:	bd70      	pop	{r4, r5, r6, pc}
 8012ed8:	f855 3b04 	ldr.w	r3, [r5], #4
 8012edc:	4798      	blx	r3
 8012ede:	3601      	adds	r6, #1
 8012ee0:	e7ee      	b.n	8012ec0 <__libc_init_array+0xc>
 8012ee2:	f855 3b04 	ldr.w	r3, [r5], #4
 8012ee6:	4798      	blx	r3
 8012ee8:	3601      	adds	r6, #1
 8012eea:	e7f2      	b.n	8012ed2 <__libc_init_array+0x1e>
 8012eec:	0801921c 	.word	0x0801921c
 8012ef0:	0801921c 	.word	0x0801921c
 8012ef4:	0801921c 	.word	0x0801921c
 8012ef8:	08019220 	.word	0x08019220

08012efc <__retarget_lock_init_recursive>:
 8012efc:	4770      	bx	lr

08012efe <__retarget_lock_acquire_recursive>:
 8012efe:	4770      	bx	lr

08012f00 <__retarget_lock_release_recursive>:
 8012f00:	4770      	bx	lr

08012f02 <memcpy>:
 8012f02:	440a      	add	r2, r1
 8012f04:	4291      	cmp	r1, r2
 8012f06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8012f0a:	d100      	bne.n	8012f0e <memcpy+0xc>
 8012f0c:	4770      	bx	lr
 8012f0e:	b510      	push	{r4, lr}
 8012f10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012f14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012f18:	4291      	cmp	r1, r2
 8012f1a:	d1f9      	bne.n	8012f10 <memcpy+0xe>
 8012f1c:	bd10      	pop	{r4, pc}

08012f1e <memset>:
 8012f1e:	4402      	add	r2, r0
 8012f20:	4603      	mov	r3, r0
 8012f22:	4293      	cmp	r3, r2
 8012f24:	d100      	bne.n	8012f28 <memset+0xa>
 8012f26:	4770      	bx	lr
 8012f28:	f803 1b01 	strb.w	r1, [r3], #1
 8012f2c:	e7f9      	b.n	8012f22 <memset+0x4>
	...

08012f30 <sbrk_aligned>:
 8012f30:	b570      	push	{r4, r5, r6, lr}
 8012f32:	4e0e      	ldr	r6, [pc, #56]	; (8012f6c <sbrk_aligned+0x3c>)
 8012f34:	460c      	mov	r4, r1
 8012f36:	6831      	ldr	r1, [r6, #0]
 8012f38:	4605      	mov	r5, r0
 8012f3a:	b911      	cbnz	r1, 8012f42 <sbrk_aligned+0x12>
 8012f3c:	f000 fd60 	bl	8013a00 <_sbrk_r>
 8012f40:	6030      	str	r0, [r6, #0]
 8012f42:	4621      	mov	r1, r4
 8012f44:	4628      	mov	r0, r5
 8012f46:	f000 fd5b 	bl	8013a00 <_sbrk_r>
 8012f4a:	1c43      	adds	r3, r0, #1
 8012f4c:	d00a      	beq.n	8012f64 <sbrk_aligned+0x34>
 8012f4e:	1cc4      	adds	r4, r0, #3
 8012f50:	f024 0403 	bic.w	r4, r4, #3
 8012f54:	42a0      	cmp	r0, r4
 8012f56:	d007      	beq.n	8012f68 <sbrk_aligned+0x38>
 8012f58:	1a21      	subs	r1, r4, r0
 8012f5a:	4628      	mov	r0, r5
 8012f5c:	f000 fd50 	bl	8013a00 <_sbrk_r>
 8012f60:	3001      	adds	r0, #1
 8012f62:	d101      	bne.n	8012f68 <sbrk_aligned+0x38>
 8012f64:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8012f68:	4620      	mov	r0, r4
 8012f6a:	bd70      	pop	{r4, r5, r6, pc}
 8012f6c:	200082e0 	.word	0x200082e0

08012f70 <_malloc_r>:
 8012f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f74:	1ccd      	adds	r5, r1, #3
 8012f76:	f025 0503 	bic.w	r5, r5, #3
 8012f7a:	3508      	adds	r5, #8
 8012f7c:	2d0c      	cmp	r5, #12
 8012f7e:	bf38      	it	cc
 8012f80:	250c      	movcc	r5, #12
 8012f82:	2d00      	cmp	r5, #0
 8012f84:	4607      	mov	r7, r0
 8012f86:	db01      	blt.n	8012f8c <_malloc_r+0x1c>
 8012f88:	42a9      	cmp	r1, r5
 8012f8a:	d905      	bls.n	8012f98 <_malloc_r+0x28>
 8012f8c:	230c      	movs	r3, #12
 8012f8e:	603b      	str	r3, [r7, #0]
 8012f90:	2600      	movs	r6, #0
 8012f92:	4630      	mov	r0, r6
 8012f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f98:	4e2e      	ldr	r6, [pc, #184]	; (8013054 <_malloc_r+0xe4>)
 8012f9a:	f002 ffd1 	bl	8015f40 <__malloc_lock>
 8012f9e:	6833      	ldr	r3, [r6, #0]
 8012fa0:	461c      	mov	r4, r3
 8012fa2:	bb34      	cbnz	r4, 8012ff2 <_malloc_r+0x82>
 8012fa4:	4629      	mov	r1, r5
 8012fa6:	4638      	mov	r0, r7
 8012fa8:	f7ff ffc2 	bl	8012f30 <sbrk_aligned>
 8012fac:	1c43      	adds	r3, r0, #1
 8012fae:	4604      	mov	r4, r0
 8012fb0:	d14d      	bne.n	801304e <_malloc_r+0xde>
 8012fb2:	6834      	ldr	r4, [r6, #0]
 8012fb4:	4626      	mov	r6, r4
 8012fb6:	2e00      	cmp	r6, #0
 8012fb8:	d140      	bne.n	801303c <_malloc_r+0xcc>
 8012fba:	6823      	ldr	r3, [r4, #0]
 8012fbc:	4631      	mov	r1, r6
 8012fbe:	4638      	mov	r0, r7
 8012fc0:	eb04 0803 	add.w	r8, r4, r3
 8012fc4:	f000 fd1c 	bl	8013a00 <_sbrk_r>
 8012fc8:	4580      	cmp	r8, r0
 8012fca:	d13a      	bne.n	8013042 <_malloc_r+0xd2>
 8012fcc:	6821      	ldr	r1, [r4, #0]
 8012fce:	3503      	adds	r5, #3
 8012fd0:	1a6d      	subs	r5, r5, r1
 8012fd2:	f025 0503 	bic.w	r5, r5, #3
 8012fd6:	3508      	adds	r5, #8
 8012fd8:	2d0c      	cmp	r5, #12
 8012fda:	bf38      	it	cc
 8012fdc:	250c      	movcc	r5, #12
 8012fde:	4629      	mov	r1, r5
 8012fe0:	4638      	mov	r0, r7
 8012fe2:	f7ff ffa5 	bl	8012f30 <sbrk_aligned>
 8012fe6:	3001      	adds	r0, #1
 8012fe8:	d02b      	beq.n	8013042 <_malloc_r+0xd2>
 8012fea:	6823      	ldr	r3, [r4, #0]
 8012fec:	442b      	add	r3, r5
 8012fee:	6023      	str	r3, [r4, #0]
 8012ff0:	e00e      	b.n	8013010 <_malloc_r+0xa0>
 8012ff2:	6822      	ldr	r2, [r4, #0]
 8012ff4:	1b52      	subs	r2, r2, r5
 8012ff6:	d41e      	bmi.n	8013036 <_malloc_r+0xc6>
 8012ff8:	2a0b      	cmp	r2, #11
 8012ffa:	d916      	bls.n	801302a <_malloc_r+0xba>
 8012ffc:	1961      	adds	r1, r4, r5
 8012ffe:	42a3      	cmp	r3, r4
 8013000:	6025      	str	r5, [r4, #0]
 8013002:	bf18      	it	ne
 8013004:	6059      	strne	r1, [r3, #4]
 8013006:	6863      	ldr	r3, [r4, #4]
 8013008:	bf08      	it	eq
 801300a:	6031      	streq	r1, [r6, #0]
 801300c:	5162      	str	r2, [r4, r5]
 801300e:	604b      	str	r3, [r1, #4]
 8013010:	4638      	mov	r0, r7
 8013012:	f104 060b 	add.w	r6, r4, #11
 8013016:	f002 ff99 	bl	8015f4c <__malloc_unlock>
 801301a:	f026 0607 	bic.w	r6, r6, #7
 801301e:	1d23      	adds	r3, r4, #4
 8013020:	1af2      	subs	r2, r6, r3
 8013022:	d0b6      	beq.n	8012f92 <_malloc_r+0x22>
 8013024:	1b9b      	subs	r3, r3, r6
 8013026:	50a3      	str	r3, [r4, r2]
 8013028:	e7b3      	b.n	8012f92 <_malloc_r+0x22>
 801302a:	6862      	ldr	r2, [r4, #4]
 801302c:	42a3      	cmp	r3, r4
 801302e:	bf0c      	ite	eq
 8013030:	6032      	streq	r2, [r6, #0]
 8013032:	605a      	strne	r2, [r3, #4]
 8013034:	e7ec      	b.n	8013010 <_malloc_r+0xa0>
 8013036:	4623      	mov	r3, r4
 8013038:	6864      	ldr	r4, [r4, #4]
 801303a:	e7b2      	b.n	8012fa2 <_malloc_r+0x32>
 801303c:	4634      	mov	r4, r6
 801303e:	6876      	ldr	r6, [r6, #4]
 8013040:	e7b9      	b.n	8012fb6 <_malloc_r+0x46>
 8013042:	230c      	movs	r3, #12
 8013044:	603b      	str	r3, [r7, #0]
 8013046:	4638      	mov	r0, r7
 8013048:	f002 ff80 	bl	8015f4c <__malloc_unlock>
 801304c:	e7a1      	b.n	8012f92 <_malloc_r+0x22>
 801304e:	6025      	str	r5, [r4, #0]
 8013050:	e7de      	b.n	8013010 <_malloc_r+0xa0>
 8013052:	bf00      	nop
 8013054:	200082dc 	.word	0x200082dc

08013058 <__cvt>:
 8013058:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801305c:	ec55 4b10 	vmov	r4, r5, d0
 8013060:	2d00      	cmp	r5, #0
 8013062:	460e      	mov	r6, r1
 8013064:	4619      	mov	r1, r3
 8013066:	462b      	mov	r3, r5
 8013068:	bfbb      	ittet	lt
 801306a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801306e:	461d      	movlt	r5, r3
 8013070:	2300      	movge	r3, #0
 8013072:	232d      	movlt	r3, #45	; 0x2d
 8013074:	700b      	strb	r3, [r1, #0]
 8013076:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013078:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801307c:	4691      	mov	r9, r2
 801307e:	f023 0820 	bic.w	r8, r3, #32
 8013082:	bfbc      	itt	lt
 8013084:	4622      	movlt	r2, r4
 8013086:	4614      	movlt	r4, r2
 8013088:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801308c:	d005      	beq.n	801309a <__cvt+0x42>
 801308e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8013092:	d100      	bne.n	8013096 <__cvt+0x3e>
 8013094:	3601      	adds	r6, #1
 8013096:	2102      	movs	r1, #2
 8013098:	e000      	b.n	801309c <__cvt+0x44>
 801309a:	2103      	movs	r1, #3
 801309c:	ab03      	add	r3, sp, #12
 801309e:	9301      	str	r3, [sp, #4]
 80130a0:	ab02      	add	r3, sp, #8
 80130a2:	9300      	str	r3, [sp, #0]
 80130a4:	ec45 4b10 	vmov	d0, r4, r5
 80130a8:	4653      	mov	r3, sl
 80130aa:	4632      	mov	r2, r6
 80130ac:	f001 fcf8 	bl	8014aa0 <_dtoa_r>
 80130b0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80130b4:	4607      	mov	r7, r0
 80130b6:	d102      	bne.n	80130be <__cvt+0x66>
 80130b8:	f019 0f01 	tst.w	r9, #1
 80130bc:	d022      	beq.n	8013104 <__cvt+0xac>
 80130be:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80130c2:	eb07 0906 	add.w	r9, r7, r6
 80130c6:	d110      	bne.n	80130ea <__cvt+0x92>
 80130c8:	783b      	ldrb	r3, [r7, #0]
 80130ca:	2b30      	cmp	r3, #48	; 0x30
 80130cc:	d10a      	bne.n	80130e4 <__cvt+0x8c>
 80130ce:	2200      	movs	r2, #0
 80130d0:	2300      	movs	r3, #0
 80130d2:	4620      	mov	r0, r4
 80130d4:	4629      	mov	r1, r5
 80130d6:	f7ed fcf7 	bl	8000ac8 <__aeabi_dcmpeq>
 80130da:	b918      	cbnz	r0, 80130e4 <__cvt+0x8c>
 80130dc:	f1c6 0601 	rsb	r6, r6, #1
 80130e0:	f8ca 6000 	str.w	r6, [sl]
 80130e4:	f8da 3000 	ldr.w	r3, [sl]
 80130e8:	4499      	add	r9, r3
 80130ea:	2200      	movs	r2, #0
 80130ec:	2300      	movs	r3, #0
 80130ee:	4620      	mov	r0, r4
 80130f0:	4629      	mov	r1, r5
 80130f2:	f7ed fce9 	bl	8000ac8 <__aeabi_dcmpeq>
 80130f6:	b108      	cbz	r0, 80130fc <__cvt+0xa4>
 80130f8:	f8cd 900c 	str.w	r9, [sp, #12]
 80130fc:	2230      	movs	r2, #48	; 0x30
 80130fe:	9b03      	ldr	r3, [sp, #12]
 8013100:	454b      	cmp	r3, r9
 8013102:	d307      	bcc.n	8013114 <__cvt+0xbc>
 8013104:	9b03      	ldr	r3, [sp, #12]
 8013106:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013108:	1bdb      	subs	r3, r3, r7
 801310a:	4638      	mov	r0, r7
 801310c:	6013      	str	r3, [r2, #0]
 801310e:	b004      	add	sp, #16
 8013110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013114:	1c59      	adds	r1, r3, #1
 8013116:	9103      	str	r1, [sp, #12]
 8013118:	701a      	strb	r2, [r3, #0]
 801311a:	e7f0      	b.n	80130fe <__cvt+0xa6>

0801311c <__exponent>:
 801311c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801311e:	4603      	mov	r3, r0
 8013120:	2900      	cmp	r1, #0
 8013122:	bfb8      	it	lt
 8013124:	4249      	neglt	r1, r1
 8013126:	f803 2b02 	strb.w	r2, [r3], #2
 801312a:	bfb4      	ite	lt
 801312c:	222d      	movlt	r2, #45	; 0x2d
 801312e:	222b      	movge	r2, #43	; 0x2b
 8013130:	2909      	cmp	r1, #9
 8013132:	7042      	strb	r2, [r0, #1]
 8013134:	dd2a      	ble.n	801318c <__exponent+0x70>
 8013136:	f10d 0407 	add.w	r4, sp, #7
 801313a:	46a4      	mov	ip, r4
 801313c:	270a      	movs	r7, #10
 801313e:	46a6      	mov	lr, r4
 8013140:	460a      	mov	r2, r1
 8013142:	fb91 f6f7 	sdiv	r6, r1, r7
 8013146:	fb07 1516 	mls	r5, r7, r6, r1
 801314a:	3530      	adds	r5, #48	; 0x30
 801314c:	2a63      	cmp	r2, #99	; 0x63
 801314e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8013152:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8013156:	4631      	mov	r1, r6
 8013158:	dcf1      	bgt.n	801313e <__exponent+0x22>
 801315a:	3130      	adds	r1, #48	; 0x30
 801315c:	f1ae 0502 	sub.w	r5, lr, #2
 8013160:	f804 1c01 	strb.w	r1, [r4, #-1]
 8013164:	1c44      	adds	r4, r0, #1
 8013166:	4629      	mov	r1, r5
 8013168:	4561      	cmp	r1, ip
 801316a:	d30a      	bcc.n	8013182 <__exponent+0x66>
 801316c:	f10d 0209 	add.w	r2, sp, #9
 8013170:	eba2 020e 	sub.w	r2, r2, lr
 8013174:	4565      	cmp	r5, ip
 8013176:	bf88      	it	hi
 8013178:	2200      	movhi	r2, #0
 801317a:	4413      	add	r3, r2
 801317c:	1a18      	subs	r0, r3, r0
 801317e:	b003      	add	sp, #12
 8013180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013182:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013186:	f804 2f01 	strb.w	r2, [r4, #1]!
 801318a:	e7ed      	b.n	8013168 <__exponent+0x4c>
 801318c:	2330      	movs	r3, #48	; 0x30
 801318e:	3130      	adds	r1, #48	; 0x30
 8013190:	7083      	strb	r3, [r0, #2]
 8013192:	70c1      	strb	r1, [r0, #3]
 8013194:	1d03      	adds	r3, r0, #4
 8013196:	e7f1      	b.n	801317c <__exponent+0x60>

08013198 <_printf_float>:
 8013198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801319c:	ed2d 8b02 	vpush	{d8}
 80131a0:	b08d      	sub	sp, #52	; 0x34
 80131a2:	460c      	mov	r4, r1
 80131a4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80131a8:	4616      	mov	r6, r2
 80131aa:	461f      	mov	r7, r3
 80131ac:	4605      	mov	r5, r0
 80131ae:	f002 fe97 	bl	8015ee0 <_localeconv_r>
 80131b2:	f8d0 a000 	ldr.w	sl, [r0]
 80131b6:	4650      	mov	r0, sl
 80131b8:	f7ed f80a 	bl	80001d0 <strlen>
 80131bc:	2300      	movs	r3, #0
 80131be:	930a      	str	r3, [sp, #40]	; 0x28
 80131c0:	6823      	ldr	r3, [r4, #0]
 80131c2:	9305      	str	r3, [sp, #20]
 80131c4:	f8d8 3000 	ldr.w	r3, [r8]
 80131c8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80131cc:	3307      	adds	r3, #7
 80131ce:	f023 0307 	bic.w	r3, r3, #7
 80131d2:	f103 0208 	add.w	r2, r3, #8
 80131d6:	f8c8 2000 	str.w	r2, [r8]
 80131da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131de:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80131e2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80131e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80131ea:	9307      	str	r3, [sp, #28]
 80131ec:	f8cd 8018 	str.w	r8, [sp, #24]
 80131f0:	ee08 0a10 	vmov	s16, r0
 80131f4:	4b9f      	ldr	r3, [pc, #636]	; (8013474 <_printf_float+0x2dc>)
 80131f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80131fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80131fe:	f7ed fc95 	bl	8000b2c <__aeabi_dcmpun>
 8013202:	bb88      	cbnz	r0, 8013268 <_printf_float+0xd0>
 8013204:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013208:	4b9a      	ldr	r3, [pc, #616]	; (8013474 <_printf_float+0x2dc>)
 801320a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801320e:	f7ed fc6f 	bl	8000af0 <__aeabi_dcmple>
 8013212:	bb48      	cbnz	r0, 8013268 <_printf_float+0xd0>
 8013214:	2200      	movs	r2, #0
 8013216:	2300      	movs	r3, #0
 8013218:	4640      	mov	r0, r8
 801321a:	4649      	mov	r1, r9
 801321c:	f7ed fc5e 	bl	8000adc <__aeabi_dcmplt>
 8013220:	b110      	cbz	r0, 8013228 <_printf_float+0x90>
 8013222:	232d      	movs	r3, #45	; 0x2d
 8013224:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013228:	4b93      	ldr	r3, [pc, #588]	; (8013478 <_printf_float+0x2e0>)
 801322a:	4894      	ldr	r0, [pc, #592]	; (801347c <_printf_float+0x2e4>)
 801322c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8013230:	bf94      	ite	ls
 8013232:	4698      	movls	r8, r3
 8013234:	4680      	movhi	r8, r0
 8013236:	2303      	movs	r3, #3
 8013238:	6123      	str	r3, [r4, #16]
 801323a:	9b05      	ldr	r3, [sp, #20]
 801323c:	f023 0204 	bic.w	r2, r3, #4
 8013240:	6022      	str	r2, [r4, #0]
 8013242:	f04f 0900 	mov.w	r9, #0
 8013246:	9700      	str	r7, [sp, #0]
 8013248:	4633      	mov	r3, r6
 801324a:	aa0b      	add	r2, sp, #44	; 0x2c
 801324c:	4621      	mov	r1, r4
 801324e:	4628      	mov	r0, r5
 8013250:	f000 f9d8 	bl	8013604 <_printf_common>
 8013254:	3001      	adds	r0, #1
 8013256:	f040 8090 	bne.w	801337a <_printf_float+0x1e2>
 801325a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801325e:	b00d      	add	sp, #52	; 0x34
 8013260:	ecbd 8b02 	vpop	{d8}
 8013264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013268:	4642      	mov	r2, r8
 801326a:	464b      	mov	r3, r9
 801326c:	4640      	mov	r0, r8
 801326e:	4649      	mov	r1, r9
 8013270:	f7ed fc5c 	bl	8000b2c <__aeabi_dcmpun>
 8013274:	b140      	cbz	r0, 8013288 <_printf_float+0xf0>
 8013276:	464b      	mov	r3, r9
 8013278:	2b00      	cmp	r3, #0
 801327a:	bfbc      	itt	lt
 801327c:	232d      	movlt	r3, #45	; 0x2d
 801327e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8013282:	487f      	ldr	r0, [pc, #508]	; (8013480 <_printf_float+0x2e8>)
 8013284:	4b7f      	ldr	r3, [pc, #508]	; (8013484 <_printf_float+0x2ec>)
 8013286:	e7d1      	b.n	801322c <_printf_float+0x94>
 8013288:	6863      	ldr	r3, [r4, #4]
 801328a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801328e:	9206      	str	r2, [sp, #24]
 8013290:	1c5a      	adds	r2, r3, #1
 8013292:	d13f      	bne.n	8013314 <_printf_float+0x17c>
 8013294:	2306      	movs	r3, #6
 8013296:	6063      	str	r3, [r4, #4]
 8013298:	9b05      	ldr	r3, [sp, #20]
 801329a:	6861      	ldr	r1, [r4, #4]
 801329c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80132a0:	2300      	movs	r3, #0
 80132a2:	9303      	str	r3, [sp, #12]
 80132a4:	ab0a      	add	r3, sp, #40	; 0x28
 80132a6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80132aa:	ab09      	add	r3, sp, #36	; 0x24
 80132ac:	ec49 8b10 	vmov	d0, r8, r9
 80132b0:	9300      	str	r3, [sp, #0]
 80132b2:	6022      	str	r2, [r4, #0]
 80132b4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80132b8:	4628      	mov	r0, r5
 80132ba:	f7ff fecd 	bl	8013058 <__cvt>
 80132be:	9b06      	ldr	r3, [sp, #24]
 80132c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80132c2:	2b47      	cmp	r3, #71	; 0x47
 80132c4:	4680      	mov	r8, r0
 80132c6:	d108      	bne.n	80132da <_printf_float+0x142>
 80132c8:	1cc8      	adds	r0, r1, #3
 80132ca:	db02      	blt.n	80132d2 <_printf_float+0x13a>
 80132cc:	6863      	ldr	r3, [r4, #4]
 80132ce:	4299      	cmp	r1, r3
 80132d0:	dd41      	ble.n	8013356 <_printf_float+0x1be>
 80132d2:	f1ab 0b02 	sub.w	fp, fp, #2
 80132d6:	fa5f fb8b 	uxtb.w	fp, fp
 80132da:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80132de:	d820      	bhi.n	8013322 <_printf_float+0x18a>
 80132e0:	3901      	subs	r1, #1
 80132e2:	465a      	mov	r2, fp
 80132e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80132e8:	9109      	str	r1, [sp, #36]	; 0x24
 80132ea:	f7ff ff17 	bl	801311c <__exponent>
 80132ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80132f0:	1813      	adds	r3, r2, r0
 80132f2:	2a01      	cmp	r2, #1
 80132f4:	4681      	mov	r9, r0
 80132f6:	6123      	str	r3, [r4, #16]
 80132f8:	dc02      	bgt.n	8013300 <_printf_float+0x168>
 80132fa:	6822      	ldr	r2, [r4, #0]
 80132fc:	07d2      	lsls	r2, r2, #31
 80132fe:	d501      	bpl.n	8013304 <_printf_float+0x16c>
 8013300:	3301      	adds	r3, #1
 8013302:	6123      	str	r3, [r4, #16]
 8013304:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013308:	2b00      	cmp	r3, #0
 801330a:	d09c      	beq.n	8013246 <_printf_float+0xae>
 801330c:	232d      	movs	r3, #45	; 0x2d
 801330e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013312:	e798      	b.n	8013246 <_printf_float+0xae>
 8013314:	9a06      	ldr	r2, [sp, #24]
 8013316:	2a47      	cmp	r2, #71	; 0x47
 8013318:	d1be      	bne.n	8013298 <_printf_float+0x100>
 801331a:	2b00      	cmp	r3, #0
 801331c:	d1bc      	bne.n	8013298 <_printf_float+0x100>
 801331e:	2301      	movs	r3, #1
 8013320:	e7b9      	b.n	8013296 <_printf_float+0xfe>
 8013322:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8013326:	d118      	bne.n	801335a <_printf_float+0x1c2>
 8013328:	2900      	cmp	r1, #0
 801332a:	6863      	ldr	r3, [r4, #4]
 801332c:	dd0b      	ble.n	8013346 <_printf_float+0x1ae>
 801332e:	6121      	str	r1, [r4, #16]
 8013330:	b913      	cbnz	r3, 8013338 <_printf_float+0x1a0>
 8013332:	6822      	ldr	r2, [r4, #0]
 8013334:	07d0      	lsls	r0, r2, #31
 8013336:	d502      	bpl.n	801333e <_printf_float+0x1a6>
 8013338:	3301      	adds	r3, #1
 801333a:	440b      	add	r3, r1
 801333c:	6123      	str	r3, [r4, #16]
 801333e:	65a1      	str	r1, [r4, #88]	; 0x58
 8013340:	f04f 0900 	mov.w	r9, #0
 8013344:	e7de      	b.n	8013304 <_printf_float+0x16c>
 8013346:	b913      	cbnz	r3, 801334e <_printf_float+0x1b6>
 8013348:	6822      	ldr	r2, [r4, #0]
 801334a:	07d2      	lsls	r2, r2, #31
 801334c:	d501      	bpl.n	8013352 <_printf_float+0x1ba>
 801334e:	3302      	adds	r3, #2
 8013350:	e7f4      	b.n	801333c <_printf_float+0x1a4>
 8013352:	2301      	movs	r3, #1
 8013354:	e7f2      	b.n	801333c <_printf_float+0x1a4>
 8013356:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801335a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801335c:	4299      	cmp	r1, r3
 801335e:	db05      	blt.n	801336c <_printf_float+0x1d4>
 8013360:	6823      	ldr	r3, [r4, #0]
 8013362:	6121      	str	r1, [r4, #16]
 8013364:	07d8      	lsls	r0, r3, #31
 8013366:	d5ea      	bpl.n	801333e <_printf_float+0x1a6>
 8013368:	1c4b      	adds	r3, r1, #1
 801336a:	e7e7      	b.n	801333c <_printf_float+0x1a4>
 801336c:	2900      	cmp	r1, #0
 801336e:	bfd4      	ite	le
 8013370:	f1c1 0202 	rsble	r2, r1, #2
 8013374:	2201      	movgt	r2, #1
 8013376:	4413      	add	r3, r2
 8013378:	e7e0      	b.n	801333c <_printf_float+0x1a4>
 801337a:	6823      	ldr	r3, [r4, #0]
 801337c:	055a      	lsls	r2, r3, #21
 801337e:	d407      	bmi.n	8013390 <_printf_float+0x1f8>
 8013380:	6923      	ldr	r3, [r4, #16]
 8013382:	4642      	mov	r2, r8
 8013384:	4631      	mov	r1, r6
 8013386:	4628      	mov	r0, r5
 8013388:	47b8      	blx	r7
 801338a:	3001      	adds	r0, #1
 801338c:	d12c      	bne.n	80133e8 <_printf_float+0x250>
 801338e:	e764      	b.n	801325a <_printf_float+0xc2>
 8013390:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013394:	f240 80e0 	bls.w	8013558 <_printf_float+0x3c0>
 8013398:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801339c:	2200      	movs	r2, #0
 801339e:	2300      	movs	r3, #0
 80133a0:	f7ed fb92 	bl	8000ac8 <__aeabi_dcmpeq>
 80133a4:	2800      	cmp	r0, #0
 80133a6:	d034      	beq.n	8013412 <_printf_float+0x27a>
 80133a8:	4a37      	ldr	r2, [pc, #220]	; (8013488 <_printf_float+0x2f0>)
 80133aa:	2301      	movs	r3, #1
 80133ac:	4631      	mov	r1, r6
 80133ae:	4628      	mov	r0, r5
 80133b0:	47b8      	blx	r7
 80133b2:	3001      	adds	r0, #1
 80133b4:	f43f af51 	beq.w	801325a <_printf_float+0xc2>
 80133b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80133bc:	429a      	cmp	r2, r3
 80133be:	db02      	blt.n	80133c6 <_printf_float+0x22e>
 80133c0:	6823      	ldr	r3, [r4, #0]
 80133c2:	07d8      	lsls	r0, r3, #31
 80133c4:	d510      	bpl.n	80133e8 <_printf_float+0x250>
 80133c6:	ee18 3a10 	vmov	r3, s16
 80133ca:	4652      	mov	r2, sl
 80133cc:	4631      	mov	r1, r6
 80133ce:	4628      	mov	r0, r5
 80133d0:	47b8      	blx	r7
 80133d2:	3001      	adds	r0, #1
 80133d4:	f43f af41 	beq.w	801325a <_printf_float+0xc2>
 80133d8:	f04f 0800 	mov.w	r8, #0
 80133dc:	f104 091a 	add.w	r9, r4, #26
 80133e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80133e2:	3b01      	subs	r3, #1
 80133e4:	4543      	cmp	r3, r8
 80133e6:	dc09      	bgt.n	80133fc <_printf_float+0x264>
 80133e8:	6823      	ldr	r3, [r4, #0]
 80133ea:	079b      	lsls	r3, r3, #30
 80133ec:	f100 8105 	bmi.w	80135fa <_printf_float+0x462>
 80133f0:	68e0      	ldr	r0, [r4, #12]
 80133f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80133f4:	4298      	cmp	r0, r3
 80133f6:	bfb8      	it	lt
 80133f8:	4618      	movlt	r0, r3
 80133fa:	e730      	b.n	801325e <_printf_float+0xc6>
 80133fc:	2301      	movs	r3, #1
 80133fe:	464a      	mov	r2, r9
 8013400:	4631      	mov	r1, r6
 8013402:	4628      	mov	r0, r5
 8013404:	47b8      	blx	r7
 8013406:	3001      	adds	r0, #1
 8013408:	f43f af27 	beq.w	801325a <_printf_float+0xc2>
 801340c:	f108 0801 	add.w	r8, r8, #1
 8013410:	e7e6      	b.n	80133e0 <_printf_float+0x248>
 8013412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013414:	2b00      	cmp	r3, #0
 8013416:	dc39      	bgt.n	801348c <_printf_float+0x2f4>
 8013418:	4a1b      	ldr	r2, [pc, #108]	; (8013488 <_printf_float+0x2f0>)
 801341a:	2301      	movs	r3, #1
 801341c:	4631      	mov	r1, r6
 801341e:	4628      	mov	r0, r5
 8013420:	47b8      	blx	r7
 8013422:	3001      	adds	r0, #1
 8013424:	f43f af19 	beq.w	801325a <_printf_float+0xc2>
 8013428:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801342c:	4313      	orrs	r3, r2
 801342e:	d102      	bne.n	8013436 <_printf_float+0x29e>
 8013430:	6823      	ldr	r3, [r4, #0]
 8013432:	07d9      	lsls	r1, r3, #31
 8013434:	d5d8      	bpl.n	80133e8 <_printf_float+0x250>
 8013436:	ee18 3a10 	vmov	r3, s16
 801343a:	4652      	mov	r2, sl
 801343c:	4631      	mov	r1, r6
 801343e:	4628      	mov	r0, r5
 8013440:	47b8      	blx	r7
 8013442:	3001      	adds	r0, #1
 8013444:	f43f af09 	beq.w	801325a <_printf_float+0xc2>
 8013448:	f04f 0900 	mov.w	r9, #0
 801344c:	f104 0a1a 	add.w	sl, r4, #26
 8013450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013452:	425b      	negs	r3, r3
 8013454:	454b      	cmp	r3, r9
 8013456:	dc01      	bgt.n	801345c <_printf_float+0x2c4>
 8013458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801345a:	e792      	b.n	8013382 <_printf_float+0x1ea>
 801345c:	2301      	movs	r3, #1
 801345e:	4652      	mov	r2, sl
 8013460:	4631      	mov	r1, r6
 8013462:	4628      	mov	r0, r5
 8013464:	47b8      	blx	r7
 8013466:	3001      	adds	r0, #1
 8013468:	f43f aef7 	beq.w	801325a <_printf_float+0xc2>
 801346c:	f109 0901 	add.w	r9, r9, #1
 8013470:	e7ee      	b.n	8013450 <_printf_float+0x2b8>
 8013472:	bf00      	nop
 8013474:	7fefffff 	.word	0x7fefffff
 8013478:	08018ed8 	.word	0x08018ed8
 801347c:	08018edc 	.word	0x08018edc
 8013480:	08018ee4 	.word	0x08018ee4
 8013484:	08018ee0 	.word	0x08018ee0
 8013488:	08018ee8 	.word	0x08018ee8
 801348c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801348e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013490:	429a      	cmp	r2, r3
 8013492:	bfa8      	it	ge
 8013494:	461a      	movge	r2, r3
 8013496:	2a00      	cmp	r2, #0
 8013498:	4691      	mov	r9, r2
 801349a:	dc37      	bgt.n	801350c <_printf_float+0x374>
 801349c:	f04f 0b00 	mov.w	fp, #0
 80134a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80134a4:	f104 021a 	add.w	r2, r4, #26
 80134a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80134aa:	9305      	str	r3, [sp, #20]
 80134ac:	eba3 0309 	sub.w	r3, r3, r9
 80134b0:	455b      	cmp	r3, fp
 80134b2:	dc33      	bgt.n	801351c <_printf_float+0x384>
 80134b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80134b8:	429a      	cmp	r2, r3
 80134ba:	db3b      	blt.n	8013534 <_printf_float+0x39c>
 80134bc:	6823      	ldr	r3, [r4, #0]
 80134be:	07da      	lsls	r2, r3, #31
 80134c0:	d438      	bmi.n	8013534 <_printf_float+0x39c>
 80134c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80134c4:	9a05      	ldr	r2, [sp, #20]
 80134c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80134c8:	1a9a      	subs	r2, r3, r2
 80134ca:	eba3 0901 	sub.w	r9, r3, r1
 80134ce:	4591      	cmp	r9, r2
 80134d0:	bfa8      	it	ge
 80134d2:	4691      	movge	r9, r2
 80134d4:	f1b9 0f00 	cmp.w	r9, #0
 80134d8:	dc35      	bgt.n	8013546 <_printf_float+0x3ae>
 80134da:	f04f 0800 	mov.w	r8, #0
 80134de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80134e2:	f104 0a1a 	add.w	sl, r4, #26
 80134e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80134ea:	1a9b      	subs	r3, r3, r2
 80134ec:	eba3 0309 	sub.w	r3, r3, r9
 80134f0:	4543      	cmp	r3, r8
 80134f2:	f77f af79 	ble.w	80133e8 <_printf_float+0x250>
 80134f6:	2301      	movs	r3, #1
 80134f8:	4652      	mov	r2, sl
 80134fa:	4631      	mov	r1, r6
 80134fc:	4628      	mov	r0, r5
 80134fe:	47b8      	blx	r7
 8013500:	3001      	adds	r0, #1
 8013502:	f43f aeaa 	beq.w	801325a <_printf_float+0xc2>
 8013506:	f108 0801 	add.w	r8, r8, #1
 801350a:	e7ec      	b.n	80134e6 <_printf_float+0x34e>
 801350c:	4613      	mov	r3, r2
 801350e:	4631      	mov	r1, r6
 8013510:	4642      	mov	r2, r8
 8013512:	4628      	mov	r0, r5
 8013514:	47b8      	blx	r7
 8013516:	3001      	adds	r0, #1
 8013518:	d1c0      	bne.n	801349c <_printf_float+0x304>
 801351a:	e69e      	b.n	801325a <_printf_float+0xc2>
 801351c:	2301      	movs	r3, #1
 801351e:	4631      	mov	r1, r6
 8013520:	4628      	mov	r0, r5
 8013522:	9205      	str	r2, [sp, #20]
 8013524:	47b8      	blx	r7
 8013526:	3001      	adds	r0, #1
 8013528:	f43f ae97 	beq.w	801325a <_printf_float+0xc2>
 801352c:	9a05      	ldr	r2, [sp, #20]
 801352e:	f10b 0b01 	add.w	fp, fp, #1
 8013532:	e7b9      	b.n	80134a8 <_printf_float+0x310>
 8013534:	ee18 3a10 	vmov	r3, s16
 8013538:	4652      	mov	r2, sl
 801353a:	4631      	mov	r1, r6
 801353c:	4628      	mov	r0, r5
 801353e:	47b8      	blx	r7
 8013540:	3001      	adds	r0, #1
 8013542:	d1be      	bne.n	80134c2 <_printf_float+0x32a>
 8013544:	e689      	b.n	801325a <_printf_float+0xc2>
 8013546:	9a05      	ldr	r2, [sp, #20]
 8013548:	464b      	mov	r3, r9
 801354a:	4442      	add	r2, r8
 801354c:	4631      	mov	r1, r6
 801354e:	4628      	mov	r0, r5
 8013550:	47b8      	blx	r7
 8013552:	3001      	adds	r0, #1
 8013554:	d1c1      	bne.n	80134da <_printf_float+0x342>
 8013556:	e680      	b.n	801325a <_printf_float+0xc2>
 8013558:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801355a:	2a01      	cmp	r2, #1
 801355c:	dc01      	bgt.n	8013562 <_printf_float+0x3ca>
 801355e:	07db      	lsls	r3, r3, #31
 8013560:	d538      	bpl.n	80135d4 <_printf_float+0x43c>
 8013562:	2301      	movs	r3, #1
 8013564:	4642      	mov	r2, r8
 8013566:	4631      	mov	r1, r6
 8013568:	4628      	mov	r0, r5
 801356a:	47b8      	blx	r7
 801356c:	3001      	adds	r0, #1
 801356e:	f43f ae74 	beq.w	801325a <_printf_float+0xc2>
 8013572:	ee18 3a10 	vmov	r3, s16
 8013576:	4652      	mov	r2, sl
 8013578:	4631      	mov	r1, r6
 801357a:	4628      	mov	r0, r5
 801357c:	47b8      	blx	r7
 801357e:	3001      	adds	r0, #1
 8013580:	f43f ae6b 	beq.w	801325a <_printf_float+0xc2>
 8013584:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013588:	2200      	movs	r2, #0
 801358a:	2300      	movs	r3, #0
 801358c:	f7ed fa9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8013590:	b9d8      	cbnz	r0, 80135ca <_printf_float+0x432>
 8013592:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013594:	f108 0201 	add.w	r2, r8, #1
 8013598:	3b01      	subs	r3, #1
 801359a:	4631      	mov	r1, r6
 801359c:	4628      	mov	r0, r5
 801359e:	47b8      	blx	r7
 80135a0:	3001      	adds	r0, #1
 80135a2:	d10e      	bne.n	80135c2 <_printf_float+0x42a>
 80135a4:	e659      	b.n	801325a <_printf_float+0xc2>
 80135a6:	2301      	movs	r3, #1
 80135a8:	4652      	mov	r2, sl
 80135aa:	4631      	mov	r1, r6
 80135ac:	4628      	mov	r0, r5
 80135ae:	47b8      	blx	r7
 80135b0:	3001      	adds	r0, #1
 80135b2:	f43f ae52 	beq.w	801325a <_printf_float+0xc2>
 80135b6:	f108 0801 	add.w	r8, r8, #1
 80135ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80135bc:	3b01      	subs	r3, #1
 80135be:	4543      	cmp	r3, r8
 80135c0:	dcf1      	bgt.n	80135a6 <_printf_float+0x40e>
 80135c2:	464b      	mov	r3, r9
 80135c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80135c8:	e6dc      	b.n	8013384 <_printf_float+0x1ec>
 80135ca:	f04f 0800 	mov.w	r8, #0
 80135ce:	f104 0a1a 	add.w	sl, r4, #26
 80135d2:	e7f2      	b.n	80135ba <_printf_float+0x422>
 80135d4:	2301      	movs	r3, #1
 80135d6:	4642      	mov	r2, r8
 80135d8:	e7df      	b.n	801359a <_printf_float+0x402>
 80135da:	2301      	movs	r3, #1
 80135dc:	464a      	mov	r2, r9
 80135de:	4631      	mov	r1, r6
 80135e0:	4628      	mov	r0, r5
 80135e2:	47b8      	blx	r7
 80135e4:	3001      	adds	r0, #1
 80135e6:	f43f ae38 	beq.w	801325a <_printf_float+0xc2>
 80135ea:	f108 0801 	add.w	r8, r8, #1
 80135ee:	68e3      	ldr	r3, [r4, #12]
 80135f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80135f2:	1a5b      	subs	r3, r3, r1
 80135f4:	4543      	cmp	r3, r8
 80135f6:	dcf0      	bgt.n	80135da <_printf_float+0x442>
 80135f8:	e6fa      	b.n	80133f0 <_printf_float+0x258>
 80135fa:	f04f 0800 	mov.w	r8, #0
 80135fe:	f104 0919 	add.w	r9, r4, #25
 8013602:	e7f4      	b.n	80135ee <_printf_float+0x456>

08013604 <_printf_common>:
 8013604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013608:	4616      	mov	r6, r2
 801360a:	4699      	mov	r9, r3
 801360c:	688a      	ldr	r2, [r1, #8]
 801360e:	690b      	ldr	r3, [r1, #16]
 8013610:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013614:	4293      	cmp	r3, r2
 8013616:	bfb8      	it	lt
 8013618:	4613      	movlt	r3, r2
 801361a:	6033      	str	r3, [r6, #0]
 801361c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013620:	4607      	mov	r7, r0
 8013622:	460c      	mov	r4, r1
 8013624:	b10a      	cbz	r2, 801362a <_printf_common+0x26>
 8013626:	3301      	adds	r3, #1
 8013628:	6033      	str	r3, [r6, #0]
 801362a:	6823      	ldr	r3, [r4, #0]
 801362c:	0699      	lsls	r1, r3, #26
 801362e:	bf42      	ittt	mi
 8013630:	6833      	ldrmi	r3, [r6, #0]
 8013632:	3302      	addmi	r3, #2
 8013634:	6033      	strmi	r3, [r6, #0]
 8013636:	6825      	ldr	r5, [r4, #0]
 8013638:	f015 0506 	ands.w	r5, r5, #6
 801363c:	d106      	bne.n	801364c <_printf_common+0x48>
 801363e:	f104 0a19 	add.w	sl, r4, #25
 8013642:	68e3      	ldr	r3, [r4, #12]
 8013644:	6832      	ldr	r2, [r6, #0]
 8013646:	1a9b      	subs	r3, r3, r2
 8013648:	42ab      	cmp	r3, r5
 801364a:	dc26      	bgt.n	801369a <_printf_common+0x96>
 801364c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013650:	1e13      	subs	r3, r2, #0
 8013652:	6822      	ldr	r2, [r4, #0]
 8013654:	bf18      	it	ne
 8013656:	2301      	movne	r3, #1
 8013658:	0692      	lsls	r2, r2, #26
 801365a:	d42b      	bmi.n	80136b4 <_printf_common+0xb0>
 801365c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013660:	4649      	mov	r1, r9
 8013662:	4638      	mov	r0, r7
 8013664:	47c0      	blx	r8
 8013666:	3001      	adds	r0, #1
 8013668:	d01e      	beq.n	80136a8 <_printf_common+0xa4>
 801366a:	6823      	ldr	r3, [r4, #0]
 801366c:	68e5      	ldr	r5, [r4, #12]
 801366e:	6832      	ldr	r2, [r6, #0]
 8013670:	f003 0306 	and.w	r3, r3, #6
 8013674:	2b04      	cmp	r3, #4
 8013676:	bf08      	it	eq
 8013678:	1aad      	subeq	r5, r5, r2
 801367a:	68a3      	ldr	r3, [r4, #8]
 801367c:	6922      	ldr	r2, [r4, #16]
 801367e:	bf0c      	ite	eq
 8013680:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013684:	2500      	movne	r5, #0
 8013686:	4293      	cmp	r3, r2
 8013688:	bfc4      	itt	gt
 801368a:	1a9b      	subgt	r3, r3, r2
 801368c:	18ed      	addgt	r5, r5, r3
 801368e:	2600      	movs	r6, #0
 8013690:	341a      	adds	r4, #26
 8013692:	42b5      	cmp	r5, r6
 8013694:	d11a      	bne.n	80136cc <_printf_common+0xc8>
 8013696:	2000      	movs	r0, #0
 8013698:	e008      	b.n	80136ac <_printf_common+0xa8>
 801369a:	2301      	movs	r3, #1
 801369c:	4652      	mov	r2, sl
 801369e:	4649      	mov	r1, r9
 80136a0:	4638      	mov	r0, r7
 80136a2:	47c0      	blx	r8
 80136a4:	3001      	adds	r0, #1
 80136a6:	d103      	bne.n	80136b0 <_printf_common+0xac>
 80136a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80136ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136b0:	3501      	adds	r5, #1
 80136b2:	e7c6      	b.n	8013642 <_printf_common+0x3e>
 80136b4:	18e1      	adds	r1, r4, r3
 80136b6:	1c5a      	adds	r2, r3, #1
 80136b8:	2030      	movs	r0, #48	; 0x30
 80136ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80136be:	4422      	add	r2, r4
 80136c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80136c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80136c8:	3302      	adds	r3, #2
 80136ca:	e7c7      	b.n	801365c <_printf_common+0x58>
 80136cc:	2301      	movs	r3, #1
 80136ce:	4622      	mov	r2, r4
 80136d0:	4649      	mov	r1, r9
 80136d2:	4638      	mov	r0, r7
 80136d4:	47c0      	blx	r8
 80136d6:	3001      	adds	r0, #1
 80136d8:	d0e6      	beq.n	80136a8 <_printf_common+0xa4>
 80136da:	3601      	adds	r6, #1
 80136dc:	e7d9      	b.n	8013692 <_printf_common+0x8e>
	...

080136e0 <_printf_i>:
 80136e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80136e4:	7e0f      	ldrb	r7, [r1, #24]
 80136e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80136e8:	2f78      	cmp	r7, #120	; 0x78
 80136ea:	4691      	mov	r9, r2
 80136ec:	4680      	mov	r8, r0
 80136ee:	460c      	mov	r4, r1
 80136f0:	469a      	mov	sl, r3
 80136f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80136f6:	d807      	bhi.n	8013708 <_printf_i+0x28>
 80136f8:	2f62      	cmp	r7, #98	; 0x62
 80136fa:	d80a      	bhi.n	8013712 <_printf_i+0x32>
 80136fc:	2f00      	cmp	r7, #0
 80136fe:	f000 80d8 	beq.w	80138b2 <_printf_i+0x1d2>
 8013702:	2f58      	cmp	r7, #88	; 0x58
 8013704:	f000 80a3 	beq.w	801384e <_printf_i+0x16e>
 8013708:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801370c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013710:	e03a      	b.n	8013788 <_printf_i+0xa8>
 8013712:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013716:	2b15      	cmp	r3, #21
 8013718:	d8f6      	bhi.n	8013708 <_printf_i+0x28>
 801371a:	a101      	add	r1, pc, #4	; (adr r1, 8013720 <_printf_i+0x40>)
 801371c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013720:	08013779 	.word	0x08013779
 8013724:	0801378d 	.word	0x0801378d
 8013728:	08013709 	.word	0x08013709
 801372c:	08013709 	.word	0x08013709
 8013730:	08013709 	.word	0x08013709
 8013734:	08013709 	.word	0x08013709
 8013738:	0801378d 	.word	0x0801378d
 801373c:	08013709 	.word	0x08013709
 8013740:	08013709 	.word	0x08013709
 8013744:	08013709 	.word	0x08013709
 8013748:	08013709 	.word	0x08013709
 801374c:	08013899 	.word	0x08013899
 8013750:	080137bd 	.word	0x080137bd
 8013754:	0801387b 	.word	0x0801387b
 8013758:	08013709 	.word	0x08013709
 801375c:	08013709 	.word	0x08013709
 8013760:	080138bb 	.word	0x080138bb
 8013764:	08013709 	.word	0x08013709
 8013768:	080137bd 	.word	0x080137bd
 801376c:	08013709 	.word	0x08013709
 8013770:	08013709 	.word	0x08013709
 8013774:	08013883 	.word	0x08013883
 8013778:	682b      	ldr	r3, [r5, #0]
 801377a:	1d1a      	adds	r2, r3, #4
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	602a      	str	r2, [r5, #0]
 8013780:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013784:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013788:	2301      	movs	r3, #1
 801378a:	e0a3      	b.n	80138d4 <_printf_i+0x1f4>
 801378c:	6820      	ldr	r0, [r4, #0]
 801378e:	6829      	ldr	r1, [r5, #0]
 8013790:	0606      	lsls	r6, r0, #24
 8013792:	f101 0304 	add.w	r3, r1, #4
 8013796:	d50a      	bpl.n	80137ae <_printf_i+0xce>
 8013798:	680e      	ldr	r6, [r1, #0]
 801379a:	602b      	str	r3, [r5, #0]
 801379c:	2e00      	cmp	r6, #0
 801379e:	da03      	bge.n	80137a8 <_printf_i+0xc8>
 80137a0:	232d      	movs	r3, #45	; 0x2d
 80137a2:	4276      	negs	r6, r6
 80137a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80137a8:	485e      	ldr	r0, [pc, #376]	; (8013924 <_printf_i+0x244>)
 80137aa:	230a      	movs	r3, #10
 80137ac:	e019      	b.n	80137e2 <_printf_i+0x102>
 80137ae:	680e      	ldr	r6, [r1, #0]
 80137b0:	602b      	str	r3, [r5, #0]
 80137b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80137b6:	bf18      	it	ne
 80137b8:	b236      	sxthne	r6, r6
 80137ba:	e7ef      	b.n	801379c <_printf_i+0xbc>
 80137bc:	682b      	ldr	r3, [r5, #0]
 80137be:	6820      	ldr	r0, [r4, #0]
 80137c0:	1d19      	adds	r1, r3, #4
 80137c2:	6029      	str	r1, [r5, #0]
 80137c4:	0601      	lsls	r1, r0, #24
 80137c6:	d501      	bpl.n	80137cc <_printf_i+0xec>
 80137c8:	681e      	ldr	r6, [r3, #0]
 80137ca:	e002      	b.n	80137d2 <_printf_i+0xf2>
 80137cc:	0646      	lsls	r6, r0, #25
 80137ce:	d5fb      	bpl.n	80137c8 <_printf_i+0xe8>
 80137d0:	881e      	ldrh	r6, [r3, #0]
 80137d2:	4854      	ldr	r0, [pc, #336]	; (8013924 <_printf_i+0x244>)
 80137d4:	2f6f      	cmp	r7, #111	; 0x6f
 80137d6:	bf0c      	ite	eq
 80137d8:	2308      	moveq	r3, #8
 80137da:	230a      	movne	r3, #10
 80137dc:	2100      	movs	r1, #0
 80137de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80137e2:	6865      	ldr	r5, [r4, #4]
 80137e4:	60a5      	str	r5, [r4, #8]
 80137e6:	2d00      	cmp	r5, #0
 80137e8:	bfa2      	ittt	ge
 80137ea:	6821      	ldrge	r1, [r4, #0]
 80137ec:	f021 0104 	bicge.w	r1, r1, #4
 80137f0:	6021      	strge	r1, [r4, #0]
 80137f2:	b90e      	cbnz	r6, 80137f8 <_printf_i+0x118>
 80137f4:	2d00      	cmp	r5, #0
 80137f6:	d04d      	beq.n	8013894 <_printf_i+0x1b4>
 80137f8:	4615      	mov	r5, r2
 80137fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80137fe:	fb03 6711 	mls	r7, r3, r1, r6
 8013802:	5dc7      	ldrb	r7, [r0, r7]
 8013804:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013808:	4637      	mov	r7, r6
 801380a:	42bb      	cmp	r3, r7
 801380c:	460e      	mov	r6, r1
 801380e:	d9f4      	bls.n	80137fa <_printf_i+0x11a>
 8013810:	2b08      	cmp	r3, #8
 8013812:	d10b      	bne.n	801382c <_printf_i+0x14c>
 8013814:	6823      	ldr	r3, [r4, #0]
 8013816:	07de      	lsls	r6, r3, #31
 8013818:	d508      	bpl.n	801382c <_printf_i+0x14c>
 801381a:	6923      	ldr	r3, [r4, #16]
 801381c:	6861      	ldr	r1, [r4, #4]
 801381e:	4299      	cmp	r1, r3
 8013820:	bfde      	ittt	le
 8013822:	2330      	movle	r3, #48	; 0x30
 8013824:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013828:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801382c:	1b52      	subs	r2, r2, r5
 801382e:	6122      	str	r2, [r4, #16]
 8013830:	f8cd a000 	str.w	sl, [sp]
 8013834:	464b      	mov	r3, r9
 8013836:	aa03      	add	r2, sp, #12
 8013838:	4621      	mov	r1, r4
 801383a:	4640      	mov	r0, r8
 801383c:	f7ff fee2 	bl	8013604 <_printf_common>
 8013840:	3001      	adds	r0, #1
 8013842:	d14c      	bne.n	80138de <_printf_i+0x1fe>
 8013844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013848:	b004      	add	sp, #16
 801384a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801384e:	4835      	ldr	r0, [pc, #212]	; (8013924 <_printf_i+0x244>)
 8013850:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013854:	6829      	ldr	r1, [r5, #0]
 8013856:	6823      	ldr	r3, [r4, #0]
 8013858:	f851 6b04 	ldr.w	r6, [r1], #4
 801385c:	6029      	str	r1, [r5, #0]
 801385e:	061d      	lsls	r5, r3, #24
 8013860:	d514      	bpl.n	801388c <_printf_i+0x1ac>
 8013862:	07df      	lsls	r7, r3, #31
 8013864:	bf44      	itt	mi
 8013866:	f043 0320 	orrmi.w	r3, r3, #32
 801386a:	6023      	strmi	r3, [r4, #0]
 801386c:	b91e      	cbnz	r6, 8013876 <_printf_i+0x196>
 801386e:	6823      	ldr	r3, [r4, #0]
 8013870:	f023 0320 	bic.w	r3, r3, #32
 8013874:	6023      	str	r3, [r4, #0]
 8013876:	2310      	movs	r3, #16
 8013878:	e7b0      	b.n	80137dc <_printf_i+0xfc>
 801387a:	6823      	ldr	r3, [r4, #0]
 801387c:	f043 0320 	orr.w	r3, r3, #32
 8013880:	6023      	str	r3, [r4, #0]
 8013882:	2378      	movs	r3, #120	; 0x78
 8013884:	4828      	ldr	r0, [pc, #160]	; (8013928 <_printf_i+0x248>)
 8013886:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801388a:	e7e3      	b.n	8013854 <_printf_i+0x174>
 801388c:	0659      	lsls	r1, r3, #25
 801388e:	bf48      	it	mi
 8013890:	b2b6      	uxthmi	r6, r6
 8013892:	e7e6      	b.n	8013862 <_printf_i+0x182>
 8013894:	4615      	mov	r5, r2
 8013896:	e7bb      	b.n	8013810 <_printf_i+0x130>
 8013898:	682b      	ldr	r3, [r5, #0]
 801389a:	6826      	ldr	r6, [r4, #0]
 801389c:	6961      	ldr	r1, [r4, #20]
 801389e:	1d18      	adds	r0, r3, #4
 80138a0:	6028      	str	r0, [r5, #0]
 80138a2:	0635      	lsls	r5, r6, #24
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	d501      	bpl.n	80138ac <_printf_i+0x1cc>
 80138a8:	6019      	str	r1, [r3, #0]
 80138aa:	e002      	b.n	80138b2 <_printf_i+0x1d2>
 80138ac:	0670      	lsls	r0, r6, #25
 80138ae:	d5fb      	bpl.n	80138a8 <_printf_i+0x1c8>
 80138b0:	8019      	strh	r1, [r3, #0]
 80138b2:	2300      	movs	r3, #0
 80138b4:	6123      	str	r3, [r4, #16]
 80138b6:	4615      	mov	r5, r2
 80138b8:	e7ba      	b.n	8013830 <_printf_i+0x150>
 80138ba:	682b      	ldr	r3, [r5, #0]
 80138bc:	1d1a      	adds	r2, r3, #4
 80138be:	602a      	str	r2, [r5, #0]
 80138c0:	681d      	ldr	r5, [r3, #0]
 80138c2:	6862      	ldr	r2, [r4, #4]
 80138c4:	2100      	movs	r1, #0
 80138c6:	4628      	mov	r0, r5
 80138c8:	f7ec fc8a 	bl	80001e0 <memchr>
 80138cc:	b108      	cbz	r0, 80138d2 <_printf_i+0x1f2>
 80138ce:	1b40      	subs	r0, r0, r5
 80138d0:	6060      	str	r0, [r4, #4]
 80138d2:	6863      	ldr	r3, [r4, #4]
 80138d4:	6123      	str	r3, [r4, #16]
 80138d6:	2300      	movs	r3, #0
 80138d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80138dc:	e7a8      	b.n	8013830 <_printf_i+0x150>
 80138de:	6923      	ldr	r3, [r4, #16]
 80138e0:	462a      	mov	r2, r5
 80138e2:	4649      	mov	r1, r9
 80138e4:	4640      	mov	r0, r8
 80138e6:	47d0      	blx	sl
 80138e8:	3001      	adds	r0, #1
 80138ea:	d0ab      	beq.n	8013844 <_printf_i+0x164>
 80138ec:	6823      	ldr	r3, [r4, #0]
 80138ee:	079b      	lsls	r3, r3, #30
 80138f0:	d413      	bmi.n	801391a <_printf_i+0x23a>
 80138f2:	68e0      	ldr	r0, [r4, #12]
 80138f4:	9b03      	ldr	r3, [sp, #12]
 80138f6:	4298      	cmp	r0, r3
 80138f8:	bfb8      	it	lt
 80138fa:	4618      	movlt	r0, r3
 80138fc:	e7a4      	b.n	8013848 <_printf_i+0x168>
 80138fe:	2301      	movs	r3, #1
 8013900:	4632      	mov	r2, r6
 8013902:	4649      	mov	r1, r9
 8013904:	4640      	mov	r0, r8
 8013906:	47d0      	blx	sl
 8013908:	3001      	adds	r0, #1
 801390a:	d09b      	beq.n	8013844 <_printf_i+0x164>
 801390c:	3501      	adds	r5, #1
 801390e:	68e3      	ldr	r3, [r4, #12]
 8013910:	9903      	ldr	r1, [sp, #12]
 8013912:	1a5b      	subs	r3, r3, r1
 8013914:	42ab      	cmp	r3, r5
 8013916:	dcf2      	bgt.n	80138fe <_printf_i+0x21e>
 8013918:	e7eb      	b.n	80138f2 <_printf_i+0x212>
 801391a:	2500      	movs	r5, #0
 801391c:	f104 0619 	add.w	r6, r4, #25
 8013920:	e7f5      	b.n	801390e <_printf_i+0x22e>
 8013922:	bf00      	nop
 8013924:	08018eea 	.word	0x08018eea
 8013928:	08018efb 	.word	0x08018efb

0801392c <cleanup_glue>:
 801392c:	b538      	push	{r3, r4, r5, lr}
 801392e:	460c      	mov	r4, r1
 8013930:	6809      	ldr	r1, [r1, #0]
 8013932:	4605      	mov	r5, r0
 8013934:	b109      	cbz	r1, 801393a <cleanup_glue+0xe>
 8013936:	f7ff fff9 	bl	801392c <cleanup_glue>
 801393a:	4621      	mov	r1, r4
 801393c:	4628      	mov	r0, r5
 801393e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013942:	f002 bfe1 	b.w	8016908 <_free_r>
	...

08013948 <_reclaim_reent>:
 8013948:	4b2c      	ldr	r3, [pc, #176]	; (80139fc <_reclaim_reent+0xb4>)
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	4283      	cmp	r3, r0
 801394e:	b570      	push	{r4, r5, r6, lr}
 8013950:	4604      	mov	r4, r0
 8013952:	d051      	beq.n	80139f8 <_reclaim_reent+0xb0>
 8013954:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013956:	b143      	cbz	r3, 801396a <_reclaim_reent+0x22>
 8013958:	68db      	ldr	r3, [r3, #12]
 801395a:	2b00      	cmp	r3, #0
 801395c:	d14a      	bne.n	80139f4 <_reclaim_reent+0xac>
 801395e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013960:	6819      	ldr	r1, [r3, #0]
 8013962:	b111      	cbz	r1, 801396a <_reclaim_reent+0x22>
 8013964:	4620      	mov	r0, r4
 8013966:	f002 ffcf 	bl	8016908 <_free_r>
 801396a:	6961      	ldr	r1, [r4, #20]
 801396c:	b111      	cbz	r1, 8013974 <_reclaim_reent+0x2c>
 801396e:	4620      	mov	r0, r4
 8013970:	f002 ffca 	bl	8016908 <_free_r>
 8013974:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013976:	b111      	cbz	r1, 801397e <_reclaim_reent+0x36>
 8013978:	4620      	mov	r0, r4
 801397a:	f002 ffc5 	bl	8016908 <_free_r>
 801397e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013980:	b111      	cbz	r1, 8013988 <_reclaim_reent+0x40>
 8013982:	4620      	mov	r0, r4
 8013984:	f002 ffc0 	bl	8016908 <_free_r>
 8013988:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801398a:	b111      	cbz	r1, 8013992 <_reclaim_reent+0x4a>
 801398c:	4620      	mov	r0, r4
 801398e:	f002 ffbb 	bl	8016908 <_free_r>
 8013992:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8013994:	b111      	cbz	r1, 801399c <_reclaim_reent+0x54>
 8013996:	4620      	mov	r0, r4
 8013998:	f002 ffb6 	bl	8016908 <_free_r>
 801399c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801399e:	b111      	cbz	r1, 80139a6 <_reclaim_reent+0x5e>
 80139a0:	4620      	mov	r0, r4
 80139a2:	f002 ffb1 	bl	8016908 <_free_r>
 80139a6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80139a8:	b111      	cbz	r1, 80139b0 <_reclaim_reent+0x68>
 80139aa:	4620      	mov	r0, r4
 80139ac:	f002 ffac 	bl	8016908 <_free_r>
 80139b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80139b2:	b111      	cbz	r1, 80139ba <_reclaim_reent+0x72>
 80139b4:	4620      	mov	r0, r4
 80139b6:	f002 ffa7 	bl	8016908 <_free_r>
 80139ba:	69a3      	ldr	r3, [r4, #24]
 80139bc:	b1e3      	cbz	r3, 80139f8 <_reclaim_reent+0xb0>
 80139be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80139c0:	4620      	mov	r0, r4
 80139c2:	4798      	blx	r3
 80139c4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80139c6:	b1b9      	cbz	r1, 80139f8 <_reclaim_reent+0xb0>
 80139c8:	4620      	mov	r0, r4
 80139ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80139ce:	f7ff bfad 	b.w	801392c <cleanup_glue>
 80139d2:	5949      	ldr	r1, [r1, r5]
 80139d4:	b941      	cbnz	r1, 80139e8 <_reclaim_reent+0xa0>
 80139d6:	3504      	adds	r5, #4
 80139d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80139da:	2d80      	cmp	r5, #128	; 0x80
 80139dc:	68d9      	ldr	r1, [r3, #12]
 80139de:	d1f8      	bne.n	80139d2 <_reclaim_reent+0x8a>
 80139e0:	4620      	mov	r0, r4
 80139e2:	f002 ff91 	bl	8016908 <_free_r>
 80139e6:	e7ba      	b.n	801395e <_reclaim_reent+0x16>
 80139e8:	680e      	ldr	r6, [r1, #0]
 80139ea:	4620      	mov	r0, r4
 80139ec:	f002 ff8c 	bl	8016908 <_free_r>
 80139f0:	4631      	mov	r1, r6
 80139f2:	e7ef      	b.n	80139d4 <_reclaim_reent+0x8c>
 80139f4:	2500      	movs	r5, #0
 80139f6:	e7ef      	b.n	80139d8 <_reclaim_reent+0x90>
 80139f8:	bd70      	pop	{r4, r5, r6, pc}
 80139fa:	bf00      	nop
 80139fc:	20000180 	.word	0x20000180

08013a00 <_sbrk_r>:
 8013a00:	b538      	push	{r3, r4, r5, lr}
 8013a02:	4d06      	ldr	r5, [pc, #24]	; (8013a1c <_sbrk_r+0x1c>)
 8013a04:	2300      	movs	r3, #0
 8013a06:	4604      	mov	r4, r0
 8013a08:	4608      	mov	r0, r1
 8013a0a:	602b      	str	r3, [r5, #0]
 8013a0c:	f7f2 ff90 	bl	8006930 <_sbrk>
 8013a10:	1c43      	adds	r3, r0, #1
 8013a12:	d102      	bne.n	8013a1a <_sbrk_r+0x1a>
 8013a14:	682b      	ldr	r3, [r5, #0]
 8013a16:	b103      	cbz	r3, 8013a1a <_sbrk_r+0x1a>
 8013a18:	6023      	str	r3, [r4, #0]
 8013a1a:	bd38      	pop	{r3, r4, r5, pc}
 8013a1c:	200082e4 	.word	0x200082e4

08013a20 <siprintf>:
 8013a20:	b40e      	push	{r1, r2, r3}
 8013a22:	b500      	push	{lr}
 8013a24:	b09c      	sub	sp, #112	; 0x70
 8013a26:	ab1d      	add	r3, sp, #116	; 0x74
 8013a28:	9002      	str	r0, [sp, #8]
 8013a2a:	9006      	str	r0, [sp, #24]
 8013a2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013a30:	4809      	ldr	r0, [pc, #36]	; (8013a58 <siprintf+0x38>)
 8013a32:	9107      	str	r1, [sp, #28]
 8013a34:	9104      	str	r1, [sp, #16]
 8013a36:	4909      	ldr	r1, [pc, #36]	; (8013a5c <siprintf+0x3c>)
 8013a38:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a3c:	9105      	str	r1, [sp, #20]
 8013a3e:	6800      	ldr	r0, [r0, #0]
 8013a40:	9301      	str	r3, [sp, #4]
 8013a42:	a902      	add	r1, sp, #8
 8013a44:	f003 f808 	bl	8016a58 <_svfiprintf_r>
 8013a48:	9b02      	ldr	r3, [sp, #8]
 8013a4a:	2200      	movs	r2, #0
 8013a4c:	701a      	strb	r2, [r3, #0]
 8013a4e:	b01c      	add	sp, #112	; 0x70
 8013a50:	f85d eb04 	ldr.w	lr, [sp], #4
 8013a54:	b003      	add	sp, #12
 8013a56:	4770      	bx	lr
 8013a58:	20000180 	.word	0x20000180
 8013a5c:	ffff0208 	.word	0xffff0208

08013a60 <__sread>:
 8013a60:	b510      	push	{r4, lr}
 8013a62:	460c      	mov	r4, r1
 8013a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a68:	f003 f8f6 	bl	8016c58 <_read_r>
 8013a6c:	2800      	cmp	r0, #0
 8013a6e:	bfab      	itete	ge
 8013a70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013a72:	89a3      	ldrhlt	r3, [r4, #12]
 8013a74:	181b      	addge	r3, r3, r0
 8013a76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013a7a:	bfac      	ite	ge
 8013a7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8013a7e:	81a3      	strhlt	r3, [r4, #12]
 8013a80:	bd10      	pop	{r4, pc}

08013a82 <__swrite>:
 8013a82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a86:	461f      	mov	r7, r3
 8013a88:	898b      	ldrh	r3, [r1, #12]
 8013a8a:	05db      	lsls	r3, r3, #23
 8013a8c:	4605      	mov	r5, r0
 8013a8e:	460c      	mov	r4, r1
 8013a90:	4616      	mov	r6, r2
 8013a92:	d505      	bpl.n	8013aa0 <__swrite+0x1e>
 8013a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a98:	2302      	movs	r3, #2
 8013a9a:	2200      	movs	r2, #0
 8013a9c:	f002 fa24 	bl	8015ee8 <_lseek_r>
 8013aa0:	89a3      	ldrh	r3, [r4, #12]
 8013aa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013aa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013aaa:	81a3      	strh	r3, [r4, #12]
 8013aac:	4632      	mov	r2, r6
 8013aae:	463b      	mov	r3, r7
 8013ab0:	4628      	mov	r0, r5
 8013ab2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013ab6:	f000 bf43 	b.w	8014940 <_write_r>

08013aba <__sseek>:
 8013aba:	b510      	push	{r4, lr}
 8013abc:	460c      	mov	r4, r1
 8013abe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ac2:	f002 fa11 	bl	8015ee8 <_lseek_r>
 8013ac6:	1c43      	adds	r3, r0, #1
 8013ac8:	89a3      	ldrh	r3, [r4, #12]
 8013aca:	bf15      	itete	ne
 8013acc:	6560      	strne	r0, [r4, #84]	; 0x54
 8013ace:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013ad2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013ad6:	81a3      	strheq	r3, [r4, #12]
 8013ad8:	bf18      	it	ne
 8013ada:	81a3      	strhne	r3, [r4, #12]
 8013adc:	bd10      	pop	{r4, pc}

08013ade <__sclose>:
 8013ade:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ae2:	f000 bf3f 	b.w	8014964 <_close_r>

08013ae6 <strchr>:
 8013ae6:	b2c9      	uxtb	r1, r1
 8013ae8:	4603      	mov	r3, r0
 8013aea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013aee:	b11a      	cbz	r2, 8013af8 <strchr+0x12>
 8013af0:	428a      	cmp	r2, r1
 8013af2:	d1f9      	bne.n	8013ae8 <strchr+0x2>
 8013af4:	4618      	mov	r0, r3
 8013af6:	4770      	bx	lr
 8013af8:	2900      	cmp	r1, #0
 8013afa:	bf18      	it	ne
 8013afc:	2300      	movne	r3, #0
 8013afe:	e7f9      	b.n	8013af4 <strchr+0xe>

08013b00 <strncmp>:
 8013b00:	b510      	push	{r4, lr}
 8013b02:	b17a      	cbz	r2, 8013b24 <strncmp+0x24>
 8013b04:	4603      	mov	r3, r0
 8013b06:	3901      	subs	r1, #1
 8013b08:	1884      	adds	r4, r0, r2
 8013b0a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013b0e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8013b12:	4290      	cmp	r0, r2
 8013b14:	d101      	bne.n	8013b1a <strncmp+0x1a>
 8013b16:	42a3      	cmp	r3, r4
 8013b18:	d101      	bne.n	8013b1e <strncmp+0x1e>
 8013b1a:	1a80      	subs	r0, r0, r2
 8013b1c:	bd10      	pop	{r4, pc}
 8013b1e:	2800      	cmp	r0, #0
 8013b20:	d1f3      	bne.n	8013b0a <strncmp+0xa>
 8013b22:	e7fa      	b.n	8013b1a <strncmp+0x1a>
 8013b24:	4610      	mov	r0, r2
 8013b26:	e7f9      	b.n	8013b1c <strncmp+0x1c>

08013b28 <strstr>:
 8013b28:	780a      	ldrb	r2, [r1, #0]
 8013b2a:	b570      	push	{r4, r5, r6, lr}
 8013b2c:	b96a      	cbnz	r2, 8013b4a <strstr+0x22>
 8013b2e:	bd70      	pop	{r4, r5, r6, pc}
 8013b30:	429a      	cmp	r2, r3
 8013b32:	d109      	bne.n	8013b48 <strstr+0x20>
 8013b34:	460c      	mov	r4, r1
 8013b36:	4605      	mov	r5, r0
 8013b38:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d0f6      	beq.n	8013b2e <strstr+0x6>
 8013b40:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8013b44:	429e      	cmp	r6, r3
 8013b46:	d0f7      	beq.n	8013b38 <strstr+0x10>
 8013b48:	3001      	adds	r0, #1
 8013b4a:	7803      	ldrb	r3, [r0, #0]
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d1ef      	bne.n	8013b30 <strstr+0x8>
 8013b50:	4618      	mov	r0, r3
 8013b52:	e7ec      	b.n	8013b2e <strstr+0x6>

08013b54 <sulp>:
 8013b54:	b570      	push	{r4, r5, r6, lr}
 8013b56:	4604      	mov	r4, r0
 8013b58:	460d      	mov	r5, r1
 8013b5a:	ec45 4b10 	vmov	d0, r4, r5
 8013b5e:	4616      	mov	r6, r2
 8013b60:	f002 fd6c 	bl	801663c <__ulp>
 8013b64:	ec51 0b10 	vmov	r0, r1, d0
 8013b68:	b17e      	cbz	r6, 8013b8a <sulp+0x36>
 8013b6a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013b6e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	dd09      	ble.n	8013b8a <sulp+0x36>
 8013b76:	051b      	lsls	r3, r3, #20
 8013b78:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8013b7c:	2400      	movs	r4, #0
 8013b7e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8013b82:	4622      	mov	r2, r4
 8013b84:	462b      	mov	r3, r5
 8013b86:	f7ec fd37 	bl	80005f8 <__aeabi_dmul>
 8013b8a:	bd70      	pop	{r4, r5, r6, pc}
 8013b8c:	0000      	movs	r0, r0
	...

08013b90 <_strtod_l>:
 8013b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b94:	ed2d 8b02 	vpush	{d8}
 8013b98:	b09d      	sub	sp, #116	; 0x74
 8013b9a:	461f      	mov	r7, r3
 8013b9c:	2300      	movs	r3, #0
 8013b9e:	9318      	str	r3, [sp, #96]	; 0x60
 8013ba0:	4ba2      	ldr	r3, [pc, #648]	; (8013e2c <_strtod_l+0x29c>)
 8013ba2:	9213      	str	r2, [sp, #76]	; 0x4c
 8013ba4:	681b      	ldr	r3, [r3, #0]
 8013ba6:	9305      	str	r3, [sp, #20]
 8013ba8:	4604      	mov	r4, r0
 8013baa:	4618      	mov	r0, r3
 8013bac:	4688      	mov	r8, r1
 8013bae:	f7ec fb0f 	bl	80001d0 <strlen>
 8013bb2:	f04f 0a00 	mov.w	sl, #0
 8013bb6:	4605      	mov	r5, r0
 8013bb8:	f04f 0b00 	mov.w	fp, #0
 8013bbc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8013bc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013bc2:	781a      	ldrb	r2, [r3, #0]
 8013bc4:	2a2b      	cmp	r2, #43	; 0x2b
 8013bc6:	d04e      	beq.n	8013c66 <_strtod_l+0xd6>
 8013bc8:	d83b      	bhi.n	8013c42 <_strtod_l+0xb2>
 8013bca:	2a0d      	cmp	r2, #13
 8013bcc:	d834      	bhi.n	8013c38 <_strtod_l+0xa8>
 8013bce:	2a08      	cmp	r2, #8
 8013bd0:	d834      	bhi.n	8013c3c <_strtod_l+0xac>
 8013bd2:	2a00      	cmp	r2, #0
 8013bd4:	d03e      	beq.n	8013c54 <_strtod_l+0xc4>
 8013bd6:	2300      	movs	r3, #0
 8013bd8:	930a      	str	r3, [sp, #40]	; 0x28
 8013bda:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8013bdc:	7833      	ldrb	r3, [r6, #0]
 8013bde:	2b30      	cmp	r3, #48	; 0x30
 8013be0:	f040 80b0 	bne.w	8013d44 <_strtod_l+0x1b4>
 8013be4:	7873      	ldrb	r3, [r6, #1]
 8013be6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013bea:	2b58      	cmp	r3, #88	; 0x58
 8013bec:	d168      	bne.n	8013cc0 <_strtod_l+0x130>
 8013bee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013bf0:	9301      	str	r3, [sp, #4]
 8013bf2:	ab18      	add	r3, sp, #96	; 0x60
 8013bf4:	9702      	str	r7, [sp, #8]
 8013bf6:	9300      	str	r3, [sp, #0]
 8013bf8:	4a8d      	ldr	r2, [pc, #564]	; (8013e30 <_strtod_l+0x2a0>)
 8013bfa:	ab19      	add	r3, sp, #100	; 0x64
 8013bfc:	a917      	add	r1, sp, #92	; 0x5c
 8013bfe:	4620      	mov	r0, r4
 8013c00:	f001 fe66 	bl	80158d0 <__gethex>
 8013c04:	f010 0707 	ands.w	r7, r0, #7
 8013c08:	4605      	mov	r5, r0
 8013c0a:	d005      	beq.n	8013c18 <_strtod_l+0x88>
 8013c0c:	2f06      	cmp	r7, #6
 8013c0e:	d12c      	bne.n	8013c6a <_strtod_l+0xda>
 8013c10:	3601      	adds	r6, #1
 8013c12:	2300      	movs	r3, #0
 8013c14:	9617      	str	r6, [sp, #92]	; 0x5c
 8013c16:	930a      	str	r3, [sp, #40]	; 0x28
 8013c18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	f040 8590 	bne.w	8014740 <_strtod_l+0xbb0>
 8013c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013c22:	b1eb      	cbz	r3, 8013c60 <_strtod_l+0xd0>
 8013c24:	4652      	mov	r2, sl
 8013c26:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013c2a:	ec43 2b10 	vmov	d0, r2, r3
 8013c2e:	b01d      	add	sp, #116	; 0x74
 8013c30:	ecbd 8b02 	vpop	{d8}
 8013c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c38:	2a20      	cmp	r2, #32
 8013c3a:	d1cc      	bne.n	8013bd6 <_strtod_l+0x46>
 8013c3c:	3301      	adds	r3, #1
 8013c3e:	9317      	str	r3, [sp, #92]	; 0x5c
 8013c40:	e7be      	b.n	8013bc0 <_strtod_l+0x30>
 8013c42:	2a2d      	cmp	r2, #45	; 0x2d
 8013c44:	d1c7      	bne.n	8013bd6 <_strtod_l+0x46>
 8013c46:	2201      	movs	r2, #1
 8013c48:	920a      	str	r2, [sp, #40]	; 0x28
 8013c4a:	1c5a      	adds	r2, r3, #1
 8013c4c:	9217      	str	r2, [sp, #92]	; 0x5c
 8013c4e:	785b      	ldrb	r3, [r3, #1]
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d1c2      	bne.n	8013bda <_strtod_l+0x4a>
 8013c54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013c56:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	f040 856e 	bne.w	801473c <_strtod_l+0xbac>
 8013c60:	4652      	mov	r2, sl
 8013c62:	465b      	mov	r3, fp
 8013c64:	e7e1      	b.n	8013c2a <_strtod_l+0x9a>
 8013c66:	2200      	movs	r2, #0
 8013c68:	e7ee      	b.n	8013c48 <_strtod_l+0xb8>
 8013c6a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013c6c:	b13a      	cbz	r2, 8013c7e <_strtod_l+0xee>
 8013c6e:	2135      	movs	r1, #53	; 0x35
 8013c70:	a81a      	add	r0, sp, #104	; 0x68
 8013c72:	f002 fdee 	bl	8016852 <__copybits>
 8013c76:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013c78:	4620      	mov	r0, r4
 8013c7a:	f002 f9ad 	bl	8015fd8 <_Bfree>
 8013c7e:	3f01      	subs	r7, #1
 8013c80:	2f04      	cmp	r7, #4
 8013c82:	d806      	bhi.n	8013c92 <_strtod_l+0x102>
 8013c84:	e8df f007 	tbb	[pc, r7]
 8013c88:	1714030a 	.word	0x1714030a
 8013c8c:	0a          	.byte	0x0a
 8013c8d:	00          	.byte	0x00
 8013c8e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8013c92:	0728      	lsls	r0, r5, #28
 8013c94:	d5c0      	bpl.n	8013c18 <_strtod_l+0x88>
 8013c96:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8013c9a:	e7bd      	b.n	8013c18 <_strtod_l+0x88>
 8013c9c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8013ca0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8013ca2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013ca6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013caa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013cae:	e7f0      	b.n	8013c92 <_strtod_l+0x102>
 8013cb0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8013e34 <_strtod_l+0x2a4>
 8013cb4:	e7ed      	b.n	8013c92 <_strtod_l+0x102>
 8013cb6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8013cba:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8013cbe:	e7e8      	b.n	8013c92 <_strtod_l+0x102>
 8013cc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013cc2:	1c5a      	adds	r2, r3, #1
 8013cc4:	9217      	str	r2, [sp, #92]	; 0x5c
 8013cc6:	785b      	ldrb	r3, [r3, #1]
 8013cc8:	2b30      	cmp	r3, #48	; 0x30
 8013cca:	d0f9      	beq.n	8013cc0 <_strtod_l+0x130>
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d0a3      	beq.n	8013c18 <_strtod_l+0x88>
 8013cd0:	2301      	movs	r3, #1
 8013cd2:	f04f 0900 	mov.w	r9, #0
 8013cd6:	9304      	str	r3, [sp, #16]
 8013cd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013cda:	9308      	str	r3, [sp, #32]
 8013cdc:	f8cd 901c 	str.w	r9, [sp, #28]
 8013ce0:	464f      	mov	r7, r9
 8013ce2:	220a      	movs	r2, #10
 8013ce4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8013ce6:	7806      	ldrb	r6, [r0, #0]
 8013ce8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8013cec:	b2d9      	uxtb	r1, r3
 8013cee:	2909      	cmp	r1, #9
 8013cf0:	d92a      	bls.n	8013d48 <_strtod_l+0x1b8>
 8013cf2:	9905      	ldr	r1, [sp, #20]
 8013cf4:	462a      	mov	r2, r5
 8013cf6:	f7ff ff03 	bl	8013b00 <strncmp>
 8013cfa:	b398      	cbz	r0, 8013d64 <_strtod_l+0x1d4>
 8013cfc:	2000      	movs	r0, #0
 8013cfe:	4632      	mov	r2, r6
 8013d00:	463d      	mov	r5, r7
 8013d02:	9005      	str	r0, [sp, #20]
 8013d04:	4603      	mov	r3, r0
 8013d06:	2a65      	cmp	r2, #101	; 0x65
 8013d08:	d001      	beq.n	8013d0e <_strtod_l+0x17e>
 8013d0a:	2a45      	cmp	r2, #69	; 0x45
 8013d0c:	d118      	bne.n	8013d40 <_strtod_l+0x1b0>
 8013d0e:	b91d      	cbnz	r5, 8013d18 <_strtod_l+0x188>
 8013d10:	9a04      	ldr	r2, [sp, #16]
 8013d12:	4302      	orrs	r2, r0
 8013d14:	d09e      	beq.n	8013c54 <_strtod_l+0xc4>
 8013d16:	2500      	movs	r5, #0
 8013d18:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8013d1c:	f108 0201 	add.w	r2, r8, #1
 8013d20:	9217      	str	r2, [sp, #92]	; 0x5c
 8013d22:	f898 2001 	ldrb.w	r2, [r8, #1]
 8013d26:	2a2b      	cmp	r2, #43	; 0x2b
 8013d28:	d075      	beq.n	8013e16 <_strtod_l+0x286>
 8013d2a:	2a2d      	cmp	r2, #45	; 0x2d
 8013d2c:	d07b      	beq.n	8013e26 <_strtod_l+0x296>
 8013d2e:	f04f 0c00 	mov.w	ip, #0
 8013d32:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8013d36:	2909      	cmp	r1, #9
 8013d38:	f240 8082 	bls.w	8013e40 <_strtod_l+0x2b0>
 8013d3c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8013d40:	2600      	movs	r6, #0
 8013d42:	e09d      	b.n	8013e80 <_strtod_l+0x2f0>
 8013d44:	2300      	movs	r3, #0
 8013d46:	e7c4      	b.n	8013cd2 <_strtod_l+0x142>
 8013d48:	2f08      	cmp	r7, #8
 8013d4a:	bfd8      	it	le
 8013d4c:	9907      	ldrle	r1, [sp, #28]
 8013d4e:	f100 0001 	add.w	r0, r0, #1
 8013d52:	bfda      	itte	le
 8013d54:	fb02 3301 	mlale	r3, r2, r1, r3
 8013d58:	9307      	strle	r3, [sp, #28]
 8013d5a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8013d5e:	3701      	adds	r7, #1
 8013d60:	9017      	str	r0, [sp, #92]	; 0x5c
 8013d62:	e7bf      	b.n	8013ce4 <_strtod_l+0x154>
 8013d64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013d66:	195a      	adds	r2, r3, r5
 8013d68:	9217      	str	r2, [sp, #92]	; 0x5c
 8013d6a:	5d5a      	ldrb	r2, [r3, r5]
 8013d6c:	2f00      	cmp	r7, #0
 8013d6e:	d037      	beq.n	8013de0 <_strtod_l+0x250>
 8013d70:	9005      	str	r0, [sp, #20]
 8013d72:	463d      	mov	r5, r7
 8013d74:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8013d78:	2b09      	cmp	r3, #9
 8013d7a:	d912      	bls.n	8013da2 <_strtod_l+0x212>
 8013d7c:	2301      	movs	r3, #1
 8013d7e:	e7c2      	b.n	8013d06 <_strtod_l+0x176>
 8013d80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013d82:	1c5a      	adds	r2, r3, #1
 8013d84:	9217      	str	r2, [sp, #92]	; 0x5c
 8013d86:	785a      	ldrb	r2, [r3, #1]
 8013d88:	3001      	adds	r0, #1
 8013d8a:	2a30      	cmp	r2, #48	; 0x30
 8013d8c:	d0f8      	beq.n	8013d80 <_strtod_l+0x1f0>
 8013d8e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8013d92:	2b08      	cmp	r3, #8
 8013d94:	f200 84d9 	bhi.w	801474a <_strtod_l+0xbba>
 8013d98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013d9a:	9005      	str	r0, [sp, #20]
 8013d9c:	2000      	movs	r0, #0
 8013d9e:	9308      	str	r3, [sp, #32]
 8013da0:	4605      	mov	r5, r0
 8013da2:	3a30      	subs	r2, #48	; 0x30
 8013da4:	f100 0301 	add.w	r3, r0, #1
 8013da8:	d014      	beq.n	8013dd4 <_strtod_l+0x244>
 8013daa:	9905      	ldr	r1, [sp, #20]
 8013dac:	4419      	add	r1, r3
 8013dae:	9105      	str	r1, [sp, #20]
 8013db0:	462b      	mov	r3, r5
 8013db2:	eb00 0e05 	add.w	lr, r0, r5
 8013db6:	210a      	movs	r1, #10
 8013db8:	4573      	cmp	r3, lr
 8013dba:	d113      	bne.n	8013de4 <_strtod_l+0x254>
 8013dbc:	182b      	adds	r3, r5, r0
 8013dbe:	2b08      	cmp	r3, #8
 8013dc0:	f105 0501 	add.w	r5, r5, #1
 8013dc4:	4405      	add	r5, r0
 8013dc6:	dc1c      	bgt.n	8013e02 <_strtod_l+0x272>
 8013dc8:	9907      	ldr	r1, [sp, #28]
 8013dca:	230a      	movs	r3, #10
 8013dcc:	fb03 2301 	mla	r3, r3, r1, r2
 8013dd0:	9307      	str	r3, [sp, #28]
 8013dd2:	2300      	movs	r3, #0
 8013dd4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013dd6:	1c51      	adds	r1, r2, #1
 8013dd8:	9117      	str	r1, [sp, #92]	; 0x5c
 8013dda:	7852      	ldrb	r2, [r2, #1]
 8013ddc:	4618      	mov	r0, r3
 8013dde:	e7c9      	b.n	8013d74 <_strtod_l+0x1e4>
 8013de0:	4638      	mov	r0, r7
 8013de2:	e7d2      	b.n	8013d8a <_strtod_l+0x1fa>
 8013de4:	2b08      	cmp	r3, #8
 8013de6:	dc04      	bgt.n	8013df2 <_strtod_l+0x262>
 8013de8:	9e07      	ldr	r6, [sp, #28]
 8013dea:	434e      	muls	r6, r1
 8013dec:	9607      	str	r6, [sp, #28]
 8013dee:	3301      	adds	r3, #1
 8013df0:	e7e2      	b.n	8013db8 <_strtod_l+0x228>
 8013df2:	f103 0c01 	add.w	ip, r3, #1
 8013df6:	f1bc 0f10 	cmp.w	ip, #16
 8013dfa:	bfd8      	it	le
 8013dfc:	fb01 f909 	mulle.w	r9, r1, r9
 8013e00:	e7f5      	b.n	8013dee <_strtod_l+0x25e>
 8013e02:	2d10      	cmp	r5, #16
 8013e04:	bfdc      	itt	le
 8013e06:	230a      	movle	r3, #10
 8013e08:	fb03 2909 	mlale	r9, r3, r9, r2
 8013e0c:	e7e1      	b.n	8013dd2 <_strtod_l+0x242>
 8013e0e:	2300      	movs	r3, #0
 8013e10:	9305      	str	r3, [sp, #20]
 8013e12:	2301      	movs	r3, #1
 8013e14:	e77c      	b.n	8013d10 <_strtod_l+0x180>
 8013e16:	f04f 0c00 	mov.w	ip, #0
 8013e1a:	f108 0202 	add.w	r2, r8, #2
 8013e1e:	9217      	str	r2, [sp, #92]	; 0x5c
 8013e20:	f898 2002 	ldrb.w	r2, [r8, #2]
 8013e24:	e785      	b.n	8013d32 <_strtod_l+0x1a2>
 8013e26:	f04f 0c01 	mov.w	ip, #1
 8013e2a:	e7f6      	b.n	8013e1a <_strtod_l+0x28a>
 8013e2c:	08019058 	.word	0x08019058
 8013e30:	08018f0c 	.word	0x08018f0c
 8013e34:	7ff00000 	.word	0x7ff00000
 8013e38:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013e3a:	1c51      	adds	r1, r2, #1
 8013e3c:	9117      	str	r1, [sp, #92]	; 0x5c
 8013e3e:	7852      	ldrb	r2, [r2, #1]
 8013e40:	2a30      	cmp	r2, #48	; 0x30
 8013e42:	d0f9      	beq.n	8013e38 <_strtod_l+0x2a8>
 8013e44:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8013e48:	2908      	cmp	r1, #8
 8013e4a:	f63f af79 	bhi.w	8013d40 <_strtod_l+0x1b0>
 8013e4e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8013e52:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013e54:	9206      	str	r2, [sp, #24]
 8013e56:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013e58:	1c51      	adds	r1, r2, #1
 8013e5a:	9117      	str	r1, [sp, #92]	; 0x5c
 8013e5c:	7852      	ldrb	r2, [r2, #1]
 8013e5e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8013e62:	2e09      	cmp	r6, #9
 8013e64:	d937      	bls.n	8013ed6 <_strtod_l+0x346>
 8013e66:	9e06      	ldr	r6, [sp, #24]
 8013e68:	1b89      	subs	r1, r1, r6
 8013e6a:	2908      	cmp	r1, #8
 8013e6c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8013e70:	dc02      	bgt.n	8013e78 <_strtod_l+0x2e8>
 8013e72:	4576      	cmp	r6, lr
 8013e74:	bfa8      	it	ge
 8013e76:	4676      	movge	r6, lr
 8013e78:	f1bc 0f00 	cmp.w	ip, #0
 8013e7c:	d000      	beq.n	8013e80 <_strtod_l+0x2f0>
 8013e7e:	4276      	negs	r6, r6
 8013e80:	2d00      	cmp	r5, #0
 8013e82:	d14d      	bne.n	8013f20 <_strtod_l+0x390>
 8013e84:	9904      	ldr	r1, [sp, #16]
 8013e86:	4301      	orrs	r1, r0
 8013e88:	f47f aec6 	bne.w	8013c18 <_strtod_l+0x88>
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	f47f aee1 	bne.w	8013c54 <_strtod_l+0xc4>
 8013e92:	2a69      	cmp	r2, #105	; 0x69
 8013e94:	d027      	beq.n	8013ee6 <_strtod_l+0x356>
 8013e96:	dc24      	bgt.n	8013ee2 <_strtod_l+0x352>
 8013e98:	2a49      	cmp	r2, #73	; 0x49
 8013e9a:	d024      	beq.n	8013ee6 <_strtod_l+0x356>
 8013e9c:	2a4e      	cmp	r2, #78	; 0x4e
 8013e9e:	f47f aed9 	bne.w	8013c54 <_strtod_l+0xc4>
 8013ea2:	499f      	ldr	r1, [pc, #636]	; (8014120 <_strtod_l+0x590>)
 8013ea4:	a817      	add	r0, sp, #92	; 0x5c
 8013ea6:	f001 ff6b 	bl	8015d80 <__match>
 8013eaa:	2800      	cmp	r0, #0
 8013eac:	f43f aed2 	beq.w	8013c54 <_strtod_l+0xc4>
 8013eb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013eb2:	781b      	ldrb	r3, [r3, #0]
 8013eb4:	2b28      	cmp	r3, #40	; 0x28
 8013eb6:	d12d      	bne.n	8013f14 <_strtod_l+0x384>
 8013eb8:	499a      	ldr	r1, [pc, #616]	; (8014124 <_strtod_l+0x594>)
 8013eba:	aa1a      	add	r2, sp, #104	; 0x68
 8013ebc:	a817      	add	r0, sp, #92	; 0x5c
 8013ebe:	f001 ff73 	bl	8015da8 <__hexnan>
 8013ec2:	2805      	cmp	r0, #5
 8013ec4:	d126      	bne.n	8013f14 <_strtod_l+0x384>
 8013ec6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013ec8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8013ecc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8013ed0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8013ed4:	e6a0      	b.n	8013c18 <_strtod_l+0x88>
 8013ed6:	210a      	movs	r1, #10
 8013ed8:	fb01 2e0e 	mla	lr, r1, lr, r2
 8013edc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8013ee0:	e7b9      	b.n	8013e56 <_strtod_l+0x2c6>
 8013ee2:	2a6e      	cmp	r2, #110	; 0x6e
 8013ee4:	e7db      	b.n	8013e9e <_strtod_l+0x30e>
 8013ee6:	4990      	ldr	r1, [pc, #576]	; (8014128 <_strtod_l+0x598>)
 8013ee8:	a817      	add	r0, sp, #92	; 0x5c
 8013eea:	f001 ff49 	bl	8015d80 <__match>
 8013eee:	2800      	cmp	r0, #0
 8013ef0:	f43f aeb0 	beq.w	8013c54 <_strtod_l+0xc4>
 8013ef4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013ef6:	498d      	ldr	r1, [pc, #564]	; (801412c <_strtod_l+0x59c>)
 8013ef8:	3b01      	subs	r3, #1
 8013efa:	a817      	add	r0, sp, #92	; 0x5c
 8013efc:	9317      	str	r3, [sp, #92]	; 0x5c
 8013efe:	f001 ff3f 	bl	8015d80 <__match>
 8013f02:	b910      	cbnz	r0, 8013f0a <_strtod_l+0x37a>
 8013f04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013f06:	3301      	adds	r3, #1
 8013f08:	9317      	str	r3, [sp, #92]	; 0x5c
 8013f0a:	f8df b230 	ldr.w	fp, [pc, #560]	; 801413c <_strtod_l+0x5ac>
 8013f0e:	f04f 0a00 	mov.w	sl, #0
 8013f12:	e681      	b.n	8013c18 <_strtod_l+0x88>
 8013f14:	4886      	ldr	r0, [pc, #536]	; (8014130 <_strtod_l+0x5a0>)
 8013f16:	f002 feb3 	bl	8016c80 <nan>
 8013f1a:	ec5b ab10 	vmov	sl, fp, d0
 8013f1e:	e67b      	b.n	8013c18 <_strtod_l+0x88>
 8013f20:	9b05      	ldr	r3, [sp, #20]
 8013f22:	9807      	ldr	r0, [sp, #28]
 8013f24:	1af3      	subs	r3, r6, r3
 8013f26:	2f00      	cmp	r7, #0
 8013f28:	bf08      	it	eq
 8013f2a:	462f      	moveq	r7, r5
 8013f2c:	2d10      	cmp	r5, #16
 8013f2e:	9306      	str	r3, [sp, #24]
 8013f30:	46a8      	mov	r8, r5
 8013f32:	bfa8      	it	ge
 8013f34:	f04f 0810 	movge.w	r8, #16
 8013f38:	f7ec fae4 	bl	8000504 <__aeabi_ui2d>
 8013f3c:	2d09      	cmp	r5, #9
 8013f3e:	4682      	mov	sl, r0
 8013f40:	468b      	mov	fp, r1
 8013f42:	dd13      	ble.n	8013f6c <_strtod_l+0x3dc>
 8013f44:	4b7b      	ldr	r3, [pc, #492]	; (8014134 <_strtod_l+0x5a4>)
 8013f46:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013f4a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013f4e:	f7ec fb53 	bl	80005f8 <__aeabi_dmul>
 8013f52:	4682      	mov	sl, r0
 8013f54:	4648      	mov	r0, r9
 8013f56:	468b      	mov	fp, r1
 8013f58:	f7ec fad4 	bl	8000504 <__aeabi_ui2d>
 8013f5c:	4602      	mov	r2, r0
 8013f5e:	460b      	mov	r3, r1
 8013f60:	4650      	mov	r0, sl
 8013f62:	4659      	mov	r1, fp
 8013f64:	f7ec f992 	bl	800028c <__adddf3>
 8013f68:	4682      	mov	sl, r0
 8013f6a:	468b      	mov	fp, r1
 8013f6c:	2d0f      	cmp	r5, #15
 8013f6e:	dc38      	bgt.n	8013fe2 <_strtod_l+0x452>
 8013f70:	9b06      	ldr	r3, [sp, #24]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	f43f ae50 	beq.w	8013c18 <_strtod_l+0x88>
 8013f78:	dd24      	ble.n	8013fc4 <_strtod_l+0x434>
 8013f7a:	2b16      	cmp	r3, #22
 8013f7c:	dc0b      	bgt.n	8013f96 <_strtod_l+0x406>
 8013f7e:	496d      	ldr	r1, [pc, #436]	; (8014134 <_strtod_l+0x5a4>)
 8013f80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013f84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013f88:	4652      	mov	r2, sl
 8013f8a:	465b      	mov	r3, fp
 8013f8c:	f7ec fb34 	bl	80005f8 <__aeabi_dmul>
 8013f90:	4682      	mov	sl, r0
 8013f92:	468b      	mov	fp, r1
 8013f94:	e640      	b.n	8013c18 <_strtod_l+0x88>
 8013f96:	9a06      	ldr	r2, [sp, #24]
 8013f98:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8013f9c:	4293      	cmp	r3, r2
 8013f9e:	db20      	blt.n	8013fe2 <_strtod_l+0x452>
 8013fa0:	4c64      	ldr	r4, [pc, #400]	; (8014134 <_strtod_l+0x5a4>)
 8013fa2:	f1c5 050f 	rsb	r5, r5, #15
 8013fa6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8013faa:	4652      	mov	r2, sl
 8013fac:	465b      	mov	r3, fp
 8013fae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013fb2:	f7ec fb21 	bl	80005f8 <__aeabi_dmul>
 8013fb6:	9b06      	ldr	r3, [sp, #24]
 8013fb8:	1b5d      	subs	r5, r3, r5
 8013fba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8013fbe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013fc2:	e7e3      	b.n	8013f8c <_strtod_l+0x3fc>
 8013fc4:	9b06      	ldr	r3, [sp, #24]
 8013fc6:	3316      	adds	r3, #22
 8013fc8:	db0b      	blt.n	8013fe2 <_strtod_l+0x452>
 8013fca:	9b05      	ldr	r3, [sp, #20]
 8013fcc:	1b9e      	subs	r6, r3, r6
 8013fce:	4b59      	ldr	r3, [pc, #356]	; (8014134 <_strtod_l+0x5a4>)
 8013fd0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8013fd4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013fd8:	4650      	mov	r0, sl
 8013fda:	4659      	mov	r1, fp
 8013fdc:	f7ec fc36 	bl	800084c <__aeabi_ddiv>
 8013fe0:	e7d6      	b.n	8013f90 <_strtod_l+0x400>
 8013fe2:	9b06      	ldr	r3, [sp, #24]
 8013fe4:	eba5 0808 	sub.w	r8, r5, r8
 8013fe8:	4498      	add	r8, r3
 8013fea:	f1b8 0f00 	cmp.w	r8, #0
 8013fee:	dd74      	ble.n	80140da <_strtod_l+0x54a>
 8013ff0:	f018 030f 	ands.w	r3, r8, #15
 8013ff4:	d00a      	beq.n	801400c <_strtod_l+0x47c>
 8013ff6:	494f      	ldr	r1, [pc, #316]	; (8014134 <_strtod_l+0x5a4>)
 8013ff8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013ffc:	4652      	mov	r2, sl
 8013ffe:	465b      	mov	r3, fp
 8014000:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014004:	f7ec faf8 	bl	80005f8 <__aeabi_dmul>
 8014008:	4682      	mov	sl, r0
 801400a:	468b      	mov	fp, r1
 801400c:	f038 080f 	bics.w	r8, r8, #15
 8014010:	d04f      	beq.n	80140b2 <_strtod_l+0x522>
 8014012:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8014016:	dd22      	ble.n	801405e <_strtod_l+0x4ce>
 8014018:	2500      	movs	r5, #0
 801401a:	462e      	mov	r6, r5
 801401c:	9507      	str	r5, [sp, #28]
 801401e:	9505      	str	r5, [sp, #20]
 8014020:	2322      	movs	r3, #34	; 0x22
 8014022:	f8df b118 	ldr.w	fp, [pc, #280]	; 801413c <_strtod_l+0x5ac>
 8014026:	6023      	str	r3, [r4, #0]
 8014028:	f04f 0a00 	mov.w	sl, #0
 801402c:	9b07      	ldr	r3, [sp, #28]
 801402e:	2b00      	cmp	r3, #0
 8014030:	f43f adf2 	beq.w	8013c18 <_strtod_l+0x88>
 8014034:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014036:	4620      	mov	r0, r4
 8014038:	f001 ffce 	bl	8015fd8 <_Bfree>
 801403c:	9905      	ldr	r1, [sp, #20]
 801403e:	4620      	mov	r0, r4
 8014040:	f001 ffca 	bl	8015fd8 <_Bfree>
 8014044:	4631      	mov	r1, r6
 8014046:	4620      	mov	r0, r4
 8014048:	f001 ffc6 	bl	8015fd8 <_Bfree>
 801404c:	9907      	ldr	r1, [sp, #28]
 801404e:	4620      	mov	r0, r4
 8014050:	f001 ffc2 	bl	8015fd8 <_Bfree>
 8014054:	4629      	mov	r1, r5
 8014056:	4620      	mov	r0, r4
 8014058:	f001 ffbe 	bl	8015fd8 <_Bfree>
 801405c:	e5dc      	b.n	8013c18 <_strtod_l+0x88>
 801405e:	4b36      	ldr	r3, [pc, #216]	; (8014138 <_strtod_l+0x5a8>)
 8014060:	9304      	str	r3, [sp, #16]
 8014062:	2300      	movs	r3, #0
 8014064:	ea4f 1828 	mov.w	r8, r8, asr #4
 8014068:	4650      	mov	r0, sl
 801406a:	4659      	mov	r1, fp
 801406c:	4699      	mov	r9, r3
 801406e:	f1b8 0f01 	cmp.w	r8, #1
 8014072:	dc21      	bgt.n	80140b8 <_strtod_l+0x528>
 8014074:	b10b      	cbz	r3, 801407a <_strtod_l+0x4ea>
 8014076:	4682      	mov	sl, r0
 8014078:	468b      	mov	fp, r1
 801407a:	4b2f      	ldr	r3, [pc, #188]	; (8014138 <_strtod_l+0x5a8>)
 801407c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8014080:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8014084:	4652      	mov	r2, sl
 8014086:	465b      	mov	r3, fp
 8014088:	e9d9 0100 	ldrd	r0, r1, [r9]
 801408c:	f7ec fab4 	bl	80005f8 <__aeabi_dmul>
 8014090:	4b2a      	ldr	r3, [pc, #168]	; (801413c <_strtod_l+0x5ac>)
 8014092:	460a      	mov	r2, r1
 8014094:	400b      	ands	r3, r1
 8014096:	492a      	ldr	r1, [pc, #168]	; (8014140 <_strtod_l+0x5b0>)
 8014098:	428b      	cmp	r3, r1
 801409a:	4682      	mov	sl, r0
 801409c:	d8bc      	bhi.n	8014018 <_strtod_l+0x488>
 801409e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80140a2:	428b      	cmp	r3, r1
 80140a4:	bf86      	itte	hi
 80140a6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8014144 <_strtod_l+0x5b4>
 80140aa:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 80140ae:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80140b2:	2300      	movs	r3, #0
 80140b4:	9304      	str	r3, [sp, #16]
 80140b6:	e084      	b.n	80141c2 <_strtod_l+0x632>
 80140b8:	f018 0f01 	tst.w	r8, #1
 80140bc:	d005      	beq.n	80140ca <_strtod_l+0x53a>
 80140be:	9b04      	ldr	r3, [sp, #16]
 80140c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140c4:	f7ec fa98 	bl	80005f8 <__aeabi_dmul>
 80140c8:	2301      	movs	r3, #1
 80140ca:	9a04      	ldr	r2, [sp, #16]
 80140cc:	3208      	adds	r2, #8
 80140ce:	f109 0901 	add.w	r9, r9, #1
 80140d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80140d6:	9204      	str	r2, [sp, #16]
 80140d8:	e7c9      	b.n	801406e <_strtod_l+0x4de>
 80140da:	d0ea      	beq.n	80140b2 <_strtod_l+0x522>
 80140dc:	f1c8 0800 	rsb	r8, r8, #0
 80140e0:	f018 020f 	ands.w	r2, r8, #15
 80140e4:	d00a      	beq.n	80140fc <_strtod_l+0x56c>
 80140e6:	4b13      	ldr	r3, [pc, #76]	; (8014134 <_strtod_l+0x5a4>)
 80140e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80140ec:	4650      	mov	r0, sl
 80140ee:	4659      	mov	r1, fp
 80140f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140f4:	f7ec fbaa 	bl	800084c <__aeabi_ddiv>
 80140f8:	4682      	mov	sl, r0
 80140fa:	468b      	mov	fp, r1
 80140fc:	ea5f 1828 	movs.w	r8, r8, asr #4
 8014100:	d0d7      	beq.n	80140b2 <_strtod_l+0x522>
 8014102:	f1b8 0f1f 	cmp.w	r8, #31
 8014106:	dd1f      	ble.n	8014148 <_strtod_l+0x5b8>
 8014108:	2500      	movs	r5, #0
 801410a:	462e      	mov	r6, r5
 801410c:	9507      	str	r5, [sp, #28]
 801410e:	9505      	str	r5, [sp, #20]
 8014110:	2322      	movs	r3, #34	; 0x22
 8014112:	f04f 0a00 	mov.w	sl, #0
 8014116:	f04f 0b00 	mov.w	fp, #0
 801411a:	6023      	str	r3, [r4, #0]
 801411c:	e786      	b.n	801402c <_strtod_l+0x49c>
 801411e:	bf00      	nop
 8014120:	08018ee5 	.word	0x08018ee5
 8014124:	08018f20 	.word	0x08018f20
 8014128:	08018edd 	.word	0x08018edd
 801412c:	08018f63 	.word	0x08018f63
 8014130:	08019210 	.word	0x08019210
 8014134:	080190f0 	.word	0x080190f0
 8014138:	080190c8 	.word	0x080190c8
 801413c:	7ff00000 	.word	0x7ff00000
 8014140:	7ca00000 	.word	0x7ca00000
 8014144:	7fefffff 	.word	0x7fefffff
 8014148:	f018 0310 	ands.w	r3, r8, #16
 801414c:	bf18      	it	ne
 801414e:	236a      	movne	r3, #106	; 0x6a
 8014150:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8014500 <_strtod_l+0x970>
 8014154:	9304      	str	r3, [sp, #16]
 8014156:	4650      	mov	r0, sl
 8014158:	4659      	mov	r1, fp
 801415a:	2300      	movs	r3, #0
 801415c:	f018 0f01 	tst.w	r8, #1
 8014160:	d004      	beq.n	801416c <_strtod_l+0x5dc>
 8014162:	e9d9 2300 	ldrd	r2, r3, [r9]
 8014166:	f7ec fa47 	bl	80005f8 <__aeabi_dmul>
 801416a:	2301      	movs	r3, #1
 801416c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8014170:	f109 0908 	add.w	r9, r9, #8
 8014174:	d1f2      	bne.n	801415c <_strtod_l+0x5cc>
 8014176:	b10b      	cbz	r3, 801417c <_strtod_l+0x5ec>
 8014178:	4682      	mov	sl, r0
 801417a:	468b      	mov	fp, r1
 801417c:	9b04      	ldr	r3, [sp, #16]
 801417e:	b1c3      	cbz	r3, 80141b2 <_strtod_l+0x622>
 8014180:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8014184:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8014188:	2b00      	cmp	r3, #0
 801418a:	4659      	mov	r1, fp
 801418c:	dd11      	ble.n	80141b2 <_strtod_l+0x622>
 801418e:	2b1f      	cmp	r3, #31
 8014190:	f340 8124 	ble.w	80143dc <_strtod_l+0x84c>
 8014194:	2b34      	cmp	r3, #52	; 0x34
 8014196:	bfde      	ittt	le
 8014198:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801419c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80141a0:	fa03 f202 	lslle.w	r2, r3, r2
 80141a4:	f04f 0a00 	mov.w	sl, #0
 80141a8:	bfcc      	ite	gt
 80141aa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80141ae:	ea02 0b01 	andle.w	fp, r2, r1
 80141b2:	2200      	movs	r2, #0
 80141b4:	2300      	movs	r3, #0
 80141b6:	4650      	mov	r0, sl
 80141b8:	4659      	mov	r1, fp
 80141ba:	f7ec fc85 	bl	8000ac8 <__aeabi_dcmpeq>
 80141be:	2800      	cmp	r0, #0
 80141c0:	d1a2      	bne.n	8014108 <_strtod_l+0x578>
 80141c2:	9b07      	ldr	r3, [sp, #28]
 80141c4:	9300      	str	r3, [sp, #0]
 80141c6:	9908      	ldr	r1, [sp, #32]
 80141c8:	462b      	mov	r3, r5
 80141ca:	463a      	mov	r2, r7
 80141cc:	4620      	mov	r0, r4
 80141ce:	f001 ff6b 	bl	80160a8 <__s2b>
 80141d2:	9007      	str	r0, [sp, #28]
 80141d4:	2800      	cmp	r0, #0
 80141d6:	f43f af1f 	beq.w	8014018 <_strtod_l+0x488>
 80141da:	9b05      	ldr	r3, [sp, #20]
 80141dc:	1b9e      	subs	r6, r3, r6
 80141de:	9b06      	ldr	r3, [sp, #24]
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	bfb4      	ite	lt
 80141e4:	4633      	movlt	r3, r6
 80141e6:	2300      	movge	r3, #0
 80141e8:	930c      	str	r3, [sp, #48]	; 0x30
 80141ea:	9b06      	ldr	r3, [sp, #24]
 80141ec:	2500      	movs	r5, #0
 80141ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80141f2:	9312      	str	r3, [sp, #72]	; 0x48
 80141f4:	462e      	mov	r6, r5
 80141f6:	9b07      	ldr	r3, [sp, #28]
 80141f8:	4620      	mov	r0, r4
 80141fa:	6859      	ldr	r1, [r3, #4]
 80141fc:	f001 feac 	bl	8015f58 <_Balloc>
 8014200:	9005      	str	r0, [sp, #20]
 8014202:	2800      	cmp	r0, #0
 8014204:	f43f af0c 	beq.w	8014020 <_strtod_l+0x490>
 8014208:	9b07      	ldr	r3, [sp, #28]
 801420a:	691a      	ldr	r2, [r3, #16]
 801420c:	3202      	adds	r2, #2
 801420e:	f103 010c 	add.w	r1, r3, #12
 8014212:	0092      	lsls	r2, r2, #2
 8014214:	300c      	adds	r0, #12
 8014216:	f7fe fe74 	bl	8012f02 <memcpy>
 801421a:	ec4b ab10 	vmov	d0, sl, fp
 801421e:	aa1a      	add	r2, sp, #104	; 0x68
 8014220:	a919      	add	r1, sp, #100	; 0x64
 8014222:	4620      	mov	r0, r4
 8014224:	f002 fa86 	bl	8016734 <__d2b>
 8014228:	ec4b ab18 	vmov	d8, sl, fp
 801422c:	9018      	str	r0, [sp, #96]	; 0x60
 801422e:	2800      	cmp	r0, #0
 8014230:	f43f aef6 	beq.w	8014020 <_strtod_l+0x490>
 8014234:	2101      	movs	r1, #1
 8014236:	4620      	mov	r0, r4
 8014238:	f001 ffd0 	bl	80161dc <__i2b>
 801423c:	4606      	mov	r6, r0
 801423e:	2800      	cmp	r0, #0
 8014240:	f43f aeee 	beq.w	8014020 <_strtod_l+0x490>
 8014244:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014246:	9904      	ldr	r1, [sp, #16]
 8014248:	2b00      	cmp	r3, #0
 801424a:	bfab      	itete	ge
 801424c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801424e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8014250:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8014252:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8014256:	bfac      	ite	ge
 8014258:	eb03 0902 	addge.w	r9, r3, r2
 801425c:	1ad7      	sublt	r7, r2, r3
 801425e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014260:	eba3 0801 	sub.w	r8, r3, r1
 8014264:	4490      	add	r8, r2
 8014266:	4ba1      	ldr	r3, [pc, #644]	; (80144ec <_strtod_l+0x95c>)
 8014268:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801426c:	4598      	cmp	r8, r3
 801426e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8014272:	f280 80c7 	bge.w	8014404 <_strtod_l+0x874>
 8014276:	eba3 0308 	sub.w	r3, r3, r8
 801427a:	2b1f      	cmp	r3, #31
 801427c:	eba2 0203 	sub.w	r2, r2, r3
 8014280:	f04f 0101 	mov.w	r1, #1
 8014284:	f300 80b1 	bgt.w	80143ea <_strtod_l+0x85a>
 8014288:	fa01 f303 	lsl.w	r3, r1, r3
 801428c:	930d      	str	r3, [sp, #52]	; 0x34
 801428e:	2300      	movs	r3, #0
 8014290:	9308      	str	r3, [sp, #32]
 8014292:	eb09 0802 	add.w	r8, r9, r2
 8014296:	9b04      	ldr	r3, [sp, #16]
 8014298:	45c1      	cmp	r9, r8
 801429a:	4417      	add	r7, r2
 801429c:	441f      	add	r7, r3
 801429e:	464b      	mov	r3, r9
 80142a0:	bfa8      	it	ge
 80142a2:	4643      	movge	r3, r8
 80142a4:	42bb      	cmp	r3, r7
 80142a6:	bfa8      	it	ge
 80142a8:	463b      	movge	r3, r7
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	bfc2      	ittt	gt
 80142ae:	eba8 0803 	subgt.w	r8, r8, r3
 80142b2:	1aff      	subgt	r7, r7, r3
 80142b4:	eba9 0903 	subgt.w	r9, r9, r3
 80142b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	dd17      	ble.n	80142ee <_strtod_l+0x75e>
 80142be:	4631      	mov	r1, r6
 80142c0:	461a      	mov	r2, r3
 80142c2:	4620      	mov	r0, r4
 80142c4:	f002 f84a 	bl	801635c <__pow5mult>
 80142c8:	4606      	mov	r6, r0
 80142ca:	2800      	cmp	r0, #0
 80142cc:	f43f aea8 	beq.w	8014020 <_strtod_l+0x490>
 80142d0:	4601      	mov	r1, r0
 80142d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80142d4:	4620      	mov	r0, r4
 80142d6:	f001 ff97 	bl	8016208 <__multiply>
 80142da:	900b      	str	r0, [sp, #44]	; 0x2c
 80142dc:	2800      	cmp	r0, #0
 80142de:	f43f ae9f 	beq.w	8014020 <_strtod_l+0x490>
 80142e2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80142e4:	4620      	mov	r0, r4
 80142e6:	f001 fe77 	bl	8015fd8 <_Bfree>
 80142ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80142ec:	9318      	str	r3, [sp, #96]	; 0x60
 80142ee:	f1b8 0f00 	cmp.w	r8, #0
 80142f2:	f300 808c 	bgt.w	801440e <_strtod_l+0x87e>
 80142f6:	9b06      	ldr	r3, [sp, #24]
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	dd08      	ble.n	801430e <_strtod_l+0x77e>
 80142fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80142fe:	9905      	ldr	r1, [sp, #20]
 8014300:	4620      	mov	r0, r4
 8014302:	f002 f82b 	bl	801635c <__pow5mult>
 8014306:	9005      	str	r0, [sp, #20]
 8014308:	2800      	cmp	r0, #0
 801430a:	f43f ae89 	beq.w	8014020 <_strtod_l+0x490>
 801430e:	2f00      	cmp	r7, #0
 8014310:	dd08      	ble.n	8014324 <_strtod_l+0x794>
 8014312:	9905      	ldr	r1, [sp, #20]
 8014314:	463a      	mov	r2, r7
 8014316:	4620      	mov	r0, r4
 8014318:	f002 f87a 	bl	8016410 <__lshift>
 801431c:	9005      	str	r0, [sp, #20]
 801431e:	2800      	cmp	r0, #0
 8014320:	f43f ae7e 	beq.w	8014020 <_strtod_l+0x490>
 8014324:	f1b9 0f00 	cmp.w	r9, #0
 8014328:	dd08      	ble.n	801433c <_strtod_l+0x7ac>
 801432a:	4631      	mov	r1, r6
 801432c:	464a      	mov	r2, r9
 801432e:	4620      	mov	r0, r4
 8014330:	f002 f86e 	bl	8016410 <__lshift>
 8014334:	4606      	mov	r6, r0
 8014336:	2800      	cmp	r0, #0
 8014338:	f43f ae72 	beq.w	8014020 <_strtod_l+0x490>
 801433c:	9a05      	ldr	r2, [sp, #20]
 801433e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014340:	4620      	mov	r0, r4
 8014342:	f002 f8f1 	bl	8016528 <__mdiff>
 8014346:	4605      	mov	r5, r0
 8014348:	2800      	cmp	r0, #0
 801434a:	f43f ae69 	beq.w	8014020 <_strtod_l+0x490>
 801434e:	68c3      	ldr	r3, [r0, #12]
 8014350:	930b      	str	r3, [sp, #44]	; 0x2c
 8014352:	2300      	movs	r3, #0
 8014354:	60c3      	str	r3, [r0, #12]
 8014356:	4631      	mov	r1, r6
 8014358:	f002 f8ca 	bl	80164f0 <__mcmp>
 801435c:	2800      	cmp	r0, #0
 801435e:	da60      	bge.n	8014422 <_strtod_l+0x892>
 8014360:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014362:	ea53 030a 	orrs.w	r3, r3, sl
 8014366:	f040 8082 	bne.w	801446e <_strtod_l+0x8de>
 801436a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801436e:	2b00      	cmp	r3, #0
 8014370:	d17d      	bne.n	801446e <_strtod_l+0x8de>
 8014372:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014376:	0d1b      	lsrs	r3, r3, #20
 8014378:	051b      	lsls	r3, r3, #20
 801437a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801437e:	d976      	bls.n	801446e <_strtod_l+0x8de>
 8014380:	696b      	ldr	r3, [r5, #20]
 8014382:	b913      	cbnz	r3, 801438a <_strtod_l+0x7fa>
 8014384:	692b      	ldr	r3, [r5, #16]
 8014386:	2b01      	cmp	r3, #1
 8014388:	dd71      	ble.n	801446e <_strtod_l+0x8de>
 801438a:	4629      	mov	r1, r5
 801438c:	2201      	movs	r2, #1
 801438e:	4620      	mov	r0, r4
 8014390:	f002 f83e 	bl	8016410 <__lshift>
 8014394:	4631      	mov	r1, r6
 8014396:	4605      	mov	r5, r0
 8014398:	f002 f8aa 	bl	80164f0 <__mcmp>
 801439c:	2800      	cmp	r0, #0
 801439e:	dd66      	ble.n	801446e <_strtod_l+0x8de>
 80143a0:	9904      	ldr	r1, [sp, #16]
 80143a2:	4a53      	ldr	r2, [pc, #332]	; (80144f0 <_strtod_l+0x960>)
 80143a4:	465b      	mov	r3, fp
 80143a6:	2900      	cmp	r1, #0
 80143a8:	f000 8081 	beq.w	80144ae <_strtod_l+0x91e>
 80143ac:	ea02 010b 	and.w	r1, r2, fp
 80143b0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80143b4:	dc7b      	bgt.n	80144ae <_strtod_l+0x91e>
 80143b6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80143ba:	f77f aea9 	ble.w	8014110 <_strtod_l+0x580>
 80143be:	4b4d      	ldr	r3, [pc, #308]	; (80144f4 <_strtod_l+0x964>)
 80143c0:	4650      	mov	r0, sl
 80143c2:	4659      	mov	r1, fp
 80143c4:	2200      	movs	r2, #0
 80143c6:	f7ec f917 	bl	80005f8 <__aeabi_dmul>
 80143ca:	460b      	mov	r3, r1
 80143cc:	4303      	orrs	r3, r0
 80143ce:	bf08      	it	eq
 80143d0:	2322      	moveq	r3, #34	; 0x22
 80143d2:	4682      	mov	sl, r0
 80143d4:	468b      	mov	fp, r1
 80143d6:	bf08      	it	eq
 80143d8:	6023      	streq	r3, [r4, #0]
 80143da:	e62b      	b.n	8014034 <_strtod_l+0x4a4>
 80143dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80143e0:	fa02 f303 	lsl.w	r3, r2, r3
 80143e4:	ea03 0a0a 	and.w	sl, r3, sl
 80143e8:	e6e3      	b.n	80141b2 <_strtod_l+0x622>
 80143ea:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80143ee:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80143f2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80143f6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80143fa:	fa01 f308 	lsl.w	r3, r1, r8
 80143fe:	9308      	str	r3, [sp, #32]
 8014400:	910d      	str	r1, [sp, #52]	; 0x34
 8014402:	e746      	b.n	8014292 <_strtod_l+0x702>
 8014404:	2300      	movs	r3, #0
 8014406:	9308      	str	r3, [sp, #32]
 8014408:	2301      	movs	r3, #1
 801440a:	930d      	str	r3, [sp, #52]	; 0x34
 801440c:	e741      	b.n	8014292 <_strtod_l+0x702>
 801440e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014410:	4642      	mov	r2, r8
 8014412:	4620      	mov	r0, r4
 8014414:	f001 fffc 	bl	8016410 <__lshift>
 8014418:	9018      	str	r0, [sp, #96]	; 0x60
 801441a:	2800      	cmp	r0, #0
 801441c:	f47f af6b 	bne.w	80142f6 <_strtod_l+0x766>
 8014420:	e5fe      	b.n	8014020 <_strtod_l+0x490>
 8014422:	465f      	mov	r7, fp
 8014424:	d16e      	bne.n	8014504 <_strtod_l+0x974>
 8014426:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014428:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801442c:	b342      	cbz	r2, 8014480 <_strtod_l+0x8f0>
 801442e:	4a32      	ldr	r2, [pc, #200]	; (80144f8 <_strtod_l+0x968>)
 8014430:	4293      	cmp	r3, r2
 8014432:	d128      	bne.n	8014486 <_strtod_l+0x8f6>
 8014434:	9b04      	ldr	r3, [sp, #16]
 8014436:	4651      	mov	r1, sl
 8014438:	b1eb      	cbz	r3, 8014476 <_strtod_l+0x8e6>
 801443a:	4b2d      	ldr	r3, [pc, #180]	; (80144f0 <_strtod_l+0x960>)
 801443c:	403b      	ands	r3, r7
 801443e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014442:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014446:	d819      	bhi.n	801447c <_strtod_l+0x8ec>
 8014448:	0d1b      	lsrs	r3, r3, #20
 801444a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801444e:	fa02 f303 	lsl.w	r3, r2, r3
 8014452:	4299      	cmp	r1, r3
 8014454:	d117      	bne.n	8014486 <_strtod_l+0x8f6>
 8014456:	4b29      	ldr	r3, [pc, #164]	; (80144fc <_strtod_l+0x96c>)
 8014458:	429f      	cmp	r7, r3
 801445a:	d102      	bne.n	8014462 <_strtod_l+0x8d2>
 801445c:	3101      	adds	r1, #1
 801445e:	f43f addf 	beq.w	8014020 <_strtod_l+0x490>
 8014462:	4b23      	ldr	r3, [pc, #140]	; (80144f0 <_strtod_l+0x960>)
 8014464:	403b      	ands	r3, r7
 8014466:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801446a:	f04f 0a00 	mov.w	sl, #0
 801446e:	9b04      	ldr	r3, [sp, #16]
 8014470:	2b00      	cmp	r3, #0
 8014472:	d1a4      	bne.n	80143be <_strtod_l+0x82e>
 8014474:	e5de      	b.n	8014034 <_strtod_l+0x4a4>
 8014476:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801447a:	e7ea      	b.n	8014452 <_strtod_l+0x8c2>
 801447c:	4613      	mov	r3, r2
 801447e:	e7e8      	b.n	8014452 <_strtod_l+0x8c2>
 8014480:	ea53 030a 	orrs.w	r3, r3, sl
 8014484:	d08c      	beq.n	80143a0 <_strtod_l+0x810>
 8014486:	9b08      	ldr	r3, [sp, #32]
 8014488:	b1db      	cbz	r3, 80144c2 <_strtod_l+0x932>
 801448a:	423b      	tst	r3, r7
 801448c:	d0ef      	beq.n	801446e <_strtod_l+0x8de>
 801448e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014490:	9a04      	ldr	r2, [sp, #16]
 8014492:	4650      	mov	r0, sl
 8014494:	4659      	mov	r1, fp
 8014496:	b1c3      	cbz	r3, 80144ca <_strtod_l+0x93a>
 8014498:	f7ff fb5c 	bl	8013b54 <sulp>
 801449c:	4602      	mov	r2, r0
 801449e:	460b      	mov	r3, r1
 80144a0:	ec51 0b18 	vmov	r0, r1, d8
 80144a4:	f7eb fef2 	bl	800028c <__adddf3>
 80144a8:	4682      	mov	sl, r0
 80144aa:	468b      	mov	fp, r1
 80144ac:	e7df      	b.n	801446e <_strtod_l+0x8de>
 80144ae:	4013      	ands	r3, r2
 80144b0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80144b4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80144b8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80144bc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80144c0:	e7d5      	b.n	801446e <_strtod_l+0x8de>
 80144c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80144c4:	ea13 0f0a 	tst.w	r3, sl
 80144c8:	e7e0      	b.n	801448c <_strtod_l+0x8fc>
 80144ca:	f7ff fb43 	bl	8013b54 <sulp>
 80144ce:	4602      	mov	r2, r0
 80144d0:	460b      	mov	r3, r1
 80144d2:	ec51 0b18 	vmov	r0, r1, d8
 80144d6:	f7eb fed7 	bl	8000288 <__aeabi_dsub>
 80144da:	2200      	movs	r2, #0
 80144dc:	2300      	movs	r3, #0
 80144de:	4682      	mov	sl, r0
 80144e0:	468b      	mov	fp, r1
 80144e2:	f7ec faf1 	bl	8000ac8 <__aeabi_dcmpeq>
 80144e6:	2800      	cmp	r0, #0
 80144e8:	d0c1      	beq.n	801446e <_strtod_l+0x8de>
 80144ea:	e611      	b.n	8014110 <_strtod_l+0x580>
 80144ec:	fffffc02 	.word	0xfffffc02
 80144f0:	7ff00000 	.word	0x7ff00000
 80144f4:	39500000 	.word	0x39500000
 80144f8:	000fffff 	.word	0x000fffff
 80144fc:	7fefffff 	.word	0x7fefffff
 8014500:	08018f38 	.word	0x08018f38
 8014504:	4631      	mov	r1, r6
 8014506:	4628      	mov	r0, r5
 8014508:	f002 f970 	bl	80167ec <__ratio>
 801450c:	ec59 8b10 	vmov	r8, r9, d0
 8014510:	ee10 0a10 	vmov	r0, s0
 8014514:	2200      	movs	r2, #0
 8014516:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801451a:	4649      	mov	r1, r9
 801451c:	f7ec fae8 	bl	8000af0 <__aeabi_dcmple>
 8014520:	2800      	cmp	r0, #0
 8014522:	d07a      	beq.n	801461a <_strtod_l+0xa8a>
 8014524:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014526:	2b00      	cmp	r3, #0
 8014528:	d04a      	beq.n	80145c0 <_strtod_l+0xa30>
 801452a:	4b95      	ldr	r3, [pc, #596]	; (8014780 <_strtod_l+0xbf0>)
 801452c:	2200      	movs	r2, #0
 801452e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014532:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8014780 <_strtod_l+0xbf0>
 8014536:	f04f 0800 	mov.w	r8, #0
 801453a:	4b92      	ldr	r3, [pc, #584]	; (8014784 <_strtod_l+0xbf4>)
 801453c:	403b      	ands	r3, r7
 801453e:	930d      	str	r3, [sp, #52]	; 0x34
 8014540:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014542:	4b91      	ldr	r3, [pc, #580]	; (8014788 <_strtod_l+0xbf8>)
 8014544:	429a      	cmp	r2, r3
 8014546:	f040 80b0 	bne.w	80146aa <_strtod_l+0xb1a>
 801454a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801454e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8014552:	ec4b ab10 	vmov	d0, sl, fp
 8014556:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801455a:	f002 f86f 	bl	801663c <__ulp>
 801455e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014562:	ec53 2b10 	vmov	r2, r3, d0
 8014566:	f7ec f847 	bl	80005f8 <__aeabi_dmul>
 801456a:	4652      	mov	r2, sl
 801456c:	465b      	mov	r3, fp
 801456e:	f7eb fe8d 	bl	800028c <__adddf3>
 8014572:	460b      	mov	r3, r1
 8014574:	4983      	ldr	r1, [pc, #524]	; (8014784 <_strtod_l+0xbf4>)
 8014576:	4a85      	ldr	r2, [pc, #532]	; (801478c <_strtod_l+0xbfc>)
 8014578:	4019      	ands	r1, r3
 801457a:	4291      	cmp	r1, r2
 801457c:	4682      	mov	sl, r0
 801457e:	d960      	bls.n	8014642 <_strtod_l+0xab2>
 8014580:	ee18 3a90 	vmov	r3, s17
 8014584:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8014588:	4293      	cmp	r3, r2
 801458a:	d104      	bne.n	8014596 <_strtod_l+0xa06>
 801458c:	ee18 3a10 	vmov	r3, s16
 8014590:	3301      	adds	r3, #1
 8014592:	f43f ad45 	beq.w	8014020 <_strtod_l+0x490>
 8014596:	f8df b200 	ldr.w	fp, [pc, #512]	; 8014798 <_strtod_l+0xc08>
 801459a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801459e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80145a0:	4620      	mov	r0, r4
 80145a2:	f001 fd19 	bl	8015fd8 <_Bfree>
 80145a6:	9905      	ldr	r1, [sp, #20]
 80145a8:	4620      	mov	r0, r4
 80145aa:	f001 fd15 	bl	8015fd8 <_Bfree>
 80145ae:	4631      	mov	r1, r6
 80145b0:	4620      	mov	r0, r4
 80145b2:	f001 fd11 	bl	8015fd8 <_Bfree>
 80145b6:	4629      	mov	r1, r5
 80145b8:	4620      	mov	r0, r4
 80145ba:	f001 fd0d 	bl	8015fd8 <_Bfree>
 80145be:	e61a      	b.n	80141f6 <_strtod_l+0x666>
 80145c0:	f1ba 0f00 	cmp.w	sl, #0
 80145c4:	d11b      	bne.n	80145fe <_strtod_l+0xa6e>
 80145c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80145ca:	b9f3      	cbnz	r3, 801460a <_strtod_l+0xa7a>
 80145cc:	4b6c      	ldr	r3, [pc, #432]	; (8014780 <_strtod_l+0xbf0>)
 80145ce:	2200      	movs	r2, #0
 80145d0:	4640      	mov	r0, r8
 80145d2:	4649      	mov	r1, r9
 80145d4:	f7ec fa82 	bl	8000adc <__aeabi_dcmplt>
 80145d8:	b9d0      	cbnz	r0, 8014610 <_strtod_l+0xa80>
 80145da:	4640      	mov	r0, r8
 80145dc:	4649      	mov	r1, r9
 80145de:	4b6c      	ldr	r3, [pc, #432]	; (8014790 <_strtod_l+0xc00>)
 80145e0:	2200      	movs	r2, #0
 80145e2:	f7ec f809 	bl	80005f8 <__aeabi_dmul>
 80145e6:	4680      	mov	r8, r0
 80145e8:	4689      	mov	r9, r1
 80145ea:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80145ee:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80145f2:	9315      	str	r3, [sp, #84]	; 0x54
 80145f4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80145f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80145fc:	e79d      	b.n	801453a <_strtod_l+0x9aa>
 80145fe:	f1ba 0f01 	cmp.w	sl, #1
 8014602:	d102      	bne.n	801460a <_strtod_l+0xa7a>
 8014604:	2f00      	cmp	r7, #0
 8014606:	f43f ad83 	beq.w	8014110 <_strtod_l+0x580>
 801460a:	4b62      	ldr	r3, [pc, #392]	; (8014794 <_strtod_l+0xc04>)
 801460c:	2200      	movs	r2, #0
 801460e:	e78e      	b.n	801452e <_strtod_l+0x99e>
 8014610:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8014790 <_strtod_l+0xc00>
 8014614:	f04f 0800 	mov.w	r8, #0
 8014618:	e7e7      	b.n	80145ea <_strtod_l+0xa5a>
 801461a:	4b5d      	ldr	r3, [pc, #372]	; (8014790 <_strtod_l+0xc00>)
 801461c:	4640      	mov	r0, r8
 801461e:	4649      	mov	r1, r9
 8014620:	2200      	movs	r2, #0
 8014622:	f7eb ffe9 	bl	80005f8 <__aeabi_dmul>
 8014626:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014628:	4680      	mov	r8, r0
 801462a:	4689      	mov	r9, r1
 801462c:	b933      	cbnz	r3, 801463c <_strtod_l+0xaac>
 801462e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014632:	900e      	str	r0, [sp, #56]	; 0x38
 8014634:	930f      	str	r3, [sp, #60]	; 0x3c
 8014636:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801463a:	e7dd      	b.n	80145f8 <_strtod_l+0xa68>
 801463c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8014640:	e7f9      	b.n	8014636 <_strtod_l+0xaa6>
 8014642:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8014646:	9b04      	ldr	r3, [sp, #16]
 8014648:	2b00      	cmp	r3, #0
 801464a:	d1a8      	bne.n	801459e <_strtod_l+0xa0e>
 801464c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014650:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014652:	0d1b      	lsrs	r3, r3, #20
 8014654:	051b      	lsls	r3, r3, #20
 8014656:	429a      	cmp	r2, r3
 8014658:	d1a1      	bne.n	801459e <_strtod_l+0xa0e>
 801465a:	4640      	mov	r0, r8
 801465c:	4649      	mov	r1, r9
 801465e:	f7ec fb7b 	bl	8000d58 <__aeabi_d2lz>
 8014662:	f7eb ff9b 	bl	800059c <__aeabi_l2d>
 8014666:	4602      	mov	r2, r0
 8014668:	460b      	mov	r3, r1
 801466a:	4640      	mov	r0, r8
 801466c:	4649      	mov	r1, r9
 801466e:	f7eb fe0b 	bl	8000288 <__aeabi_dsub>
 8014672:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014674:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014678:	ea43 030a 	orr.w	r3, r3, sl
 801467c:	4313      	orrs	r3, r2
 801467e:	4680      	mov	r8, r0
 8014680:	4689      	mov	r9, r1
 8014682:	d055      	beq.n	8014730 <_strtod_l+0xba0>
 8014684:	a336      	add	r3, pc, #216	; (adr r3, 8014760 <_strtod_l+0xbd0>)
 8014686:	e9d3 2300 	ldrd	r2, r3, [r3]
 801468a:	f7ec fa27 	bl	8000adc <__aeabi_dcmplt>
 801468e:	2800      	cmp	r0, #0
 8014690:	f47f acd0 	bne.w	8014034 <_strtod_l+0x4a4>
 8014694:	a334      	add	r3, pc, #208	; (adr r3, 8014768 <_strtod_l+0xbd8>)
 8014696:	e9d3 2300 	ldrd	r2, r3, [r3]
 801469a:	4640      	mov	r0, r8
 801469c:	4649      	mov	r1, r9
 801469e:	f7ec fa3b 	bl	8000b18 <__aeabi_dcmpgt>
 80146a2:	2800      	cmp	r0, #0
 80146a4:	f43f af7b 	beq.w	801459e <_strtod_l+0xa0e>
 80146a8:	e4c4      	b.n	8014034 <_strtod_l+0x4a4>
 80146aa:	9b04      	ldr	r3, [sp, #16]
 80146ac:	b333      	cbz	r3, 80146fc <_strtod_l+0xb6c>
 80146ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80146b0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80146b4:	d822      	bhi.n	80146fc <_strtod_l+0xb6c>
 80146b6:	a32e      	add	r3, pc, #184	; (adr r3, 8014770 <_strtod_l+0xbe0>)
 80146b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146bc:	4640      	mov	r0, r8
 80146be:	4649      	mov	r1, r9
 80146c0:	f7ec fa16 	bl	8000af0 <__aeabi_dcmple>
 80146c4:	b1a0      	cbz	r0, 80146f0 <_strtod_l+0xb60>
 80146c6:	4649      	mov	r1, r9
 80146c8:	4640      	mov	r0, r8
 80146ca:	f7ec fa6d 	bl	8000ba8 <__aeabi_d2uiz>
 80146ce:	2801      	cmp	r0, #1
 80146d0:	bf38      	it	cc
 80146d2:	2001      	movcc	r0, #1
 80146d4:	f7eb ff16 	bl	8000504 <__aeabi_ui2d>
 80146d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80146da:	4680      	mov	r8, r0
 80146dc:	4689      	mov	r9, r1
 80146de:	bb23      	cbnz	r3, 801472a <_strtod_l+0xb9a>
 80146e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80146e4:	9010      	str	r0, [sp, #64]	; 0x40
 80146e6:	9311      	str	r3, [sp, #68]	; 0x44
 80146e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80146ec:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80146f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80146f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80146f4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80146f8:	1a9b      	subs	r3, r3, r2
 80146fa:	9309      	str	r3, [sp, #36]	; 0x24
 80146fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014700:	eeb0 0a48 	vmov.f32	s0, s16
 8014704:	eef0 0a68 	vmov.f32	s1, s17
 8014708:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801470c:	f001 ff96 	bl	801663c <__ulp>
 8014710:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014714:	ec53 2b10 	vmov	r2, r3, d0
 8014718:	f7eb ff6e 	bl	80005f8 <__aeabi_dmul>
 801471c:	ec53 2b18 	vmov	r2, r3, d8
 8014720:	f7eb fdb4 	bl	800028c <__adddf3>
 8014724:	4682      	mov	sl, r0
 8014726:	468b      	mov	fp, r1
 8014728:	e78d      	b.n	8014646 <_strtod_l+0xab6>
 801472a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801472e:	e7db      	b.n	80146e8 <_strtod_l+0xb58>
 8014730:	a311      	add	r3, pc, #68	; (adr r3, 8014778 <_strtod_l+0xbe8>)
 8014732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014736:	f7ec f9d1 	bl	8000adc <__aeabi_dcmplt>
 801473a:	e7b2      	b.n	80146a2 <_strtod_l+0xb12>
 801473c:	2300      	movs	r3, #0
 801473e:	930a      	str	r3, [sp, #40]	; 0x28
 8014740:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014742:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014744:	6013      	str	r3, [r2, #0]
 8014746:	f7ff ba6b 	b.w	8013c20 <_strtod_l+0x90>
 801474a:	2a65      	cmp	r2, #101	; 0x65
 801474c:	f43f ab5f 	beq.w	8013e0e <_strtod_l+0x27e>
 8014750:	2a45      	cmp	r2, #69	; 0x45
 8014752:	f43f ab5c 	beq.w	8013e0e <_strtod_l+0x27e>
 8014756:	2301      	movs	r3, #1
 8014758:	f7ff bb94 	b.w	8013e84 <_strtod_l+0x2f4>
 801475c:	f3af 8000 	nop.w
 8014760:	94a03595 	.word	0x94a03595
 8014764:	3fdfffff 	.word	0x3fdfffff
 8014768:	35afe535 	.word	0x35afe535
 801476c:	3fe00000 	.word	0x3fe00000
 8014770:	ffc00000 	.word	0xffc00000
 8014774:	41dfffff 	.word	0x41dfffff
 8014778:	94a03595 	.word	0x94a03595
 801477c:	3fcfffff 	.word	0x3fcfffff
 8014780:	3ff00000 	.word	0x3ff00000
 8014784:	7ff00000 	.word	0x7ff00000
 8014788:	7fe00000 	.word	0x7fe00000
 801478c:	7c9fffff 	.word	0x7c9fffff
 8014790:	3fe00000 	.word	0x3fe00000
 8014794:	bff00000 	.word	0xbff00000
 8014798:	7fefffff 	.word	0x7fefffff

0801479c <strtod>:
 801479c:	460a      	mov	r2, r1
 801479e:	4601      	mov	r1, r0
 80147a0:	4802      	ldr	r0, [pc, #8]	; (80147ac <strtod+0x10>)
 80147a2:	4b03      	ldr	r3, [pc, #12]	; (80147b0 <strtod+0x14>)
 80147a4:	6800      	ldr	r0, [r0, #0]
 80147a6:	f7ff b9f3 	b.w	8013b90 <_strtod_l>
 80147aa:	bf00      	nop
 80147ac:	20000180 	.word	0x20000180
 80147b0:	200001e8 	.word	0x200001e8

080147b4 <_strtol_l.constprop.0>:
 80147b4:	2b01      	cmp	r3, #1
 80147b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80147ba:	d001      	beq.n	80147c0 <_strtol_l.constprop.0+0xc>
 80147bc:	2b24      	cmp	r3, #36	; 0x24
 80147be:	d906      	bls.n	80147ce <_strtol_l.constprop.0+0x1a>
 80147c0:	f7fe f9d0 	bl	8012b64 <__errno>
 80147c4:	2316      	movs	r3, #22
 80147c6:	6003      	str	r3, [r0, #0]
 80147c8:	2000      	movs	r0, #0
 80147ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147ce:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80148b4 <_strtol_l.constprop.0+0x100>
 80147d2:	460d      	mov	r5, r1
 80147d4:	462e      	mov	r6, r5
 80147d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80147da:	f814 700c 	ldrb.w	r7, [r4, ip]
 80147de:	f017 0708 	ands.w	r7, r7, #8
 80147e2:	d1f7      	bne.n	80147d4 <_strtol_l.constprop.0+0x20>
 80147e4:	2c2d      	cmp	r4, #45	; 0x2d
 80147e6:	d132      	bne.n	801484e <_strtol_l.constprop.0+0x9a>
 80147e8:	782c      	ldrb	r4, [r5, #0]
 80147ea:	2701      	movs	r7, #1
 80147ec:	1cb5      	adds	r5, r6, #2
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d05b      	beq.n	80148aa <_strtol_l.constprop.0+0xf6>
 80147f2:	2b10      	cmp	r3, #16
 80147f4:	d109      	bne.n	801480a <_strtol_l.constprop.0+0x56>
 80147f6:	2c30      	cmp	r4, #48	; 0x30
 80147f8:	d107      	bne.n	801480a <_strtol_l.constprop.0+0x56>
 80147fa:	782c      	ldrb	r4, [r5, #0]
 80147fc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014800:	2c58      	cmp	r4, #88	; 0x58
 8014802:	d14d      	bne.n	80148a0 <_strtol_l.constprop.0+0xec>
 8014804:	786c      	ldrb	r4, [r5, #1]
 8014806:	2310      	movs	r3, #16
 8014808:	3502      	adds	r5, #2
 801480a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801480e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8014812:	f04f 0c00 	mov.w	ip, #0
 8014816:	fbb8 f9f3 	udiv	r9, r8, r3
 801481a:	4666      	mov	r6, ip
 801481c:	fb03 8a19 	mls	sl, r3, r9, r8
 8014820:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8014824:	f1be 0f09 	cmp.w	lr, #9
 8014828:	d816      	bhi.n	8014858 <_strtol_l.constprop.0+0xa4>
 801482a:	4674      	mov	r4, lr
 801482c:	42a3      	cmp	r3, r4
 801482e:	dd24      	ble.n	801487a <_strtol_l.constprop.0+0xc6>
 8014830:	f1bc 0f00 	cmp.w	ip, #0
 8014834:	db1e      	blt.n	8014874 <_strtol_l.constprop.0+0xc0>
 8014836:	45b1      	cmp	r9, r6
 8014838:	d31c      	bcc.n	8014874 <_strtol_l.constprop.0+0xc0>
 801483a:	d101      	bne.n	8014840 <_strtol_l.constprop.0+0x8c>
 801483c:	45a2      	cmp	sl, r4
 801483e:	db19      	blt.n	8014874 <_strtol_l.constprop.0+0xc0>
 8014840:	fb06 4603 	mla	r6, r6, r3, r4
 8014844:	f04f 0c01 	mov.w	ip, #1
 8014848:	f815 4b01 	ldrb.w	r4, [r5], #1
 801484c:	e7e8      	b.n	8014820 <_strtol_l.constprop.0+0x6c>
 801484e:	2c2b      	cmp	r4, #43	; 0x2b
 8014850:	bf04      	itt	eq
 8014852:	782c      	ldrbeq	r4, [r5, #0]
 8014854:	1cb5      	addeq	r5, r6, #2
 8014856:	e7ca      	b.n	80147ee <_strtol_l.constprop.0+0x3a>
 8014858:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801485c:	f1be 0f19 	cmp.w	lr, #25
 8014860:	d801      	bhi.n	8014866 <_strtol_l.constprop.0+0xb2>
 8014862:	3c37      	subs	r4, #55	; 0x37
 8014864:	e7e2      	b.n	801482c <_strtol_l.constprop.0+0x78>
 8014866:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801486a:	f1be 0f19 	cmp.w	lr, #25
 801486e:	d804      	bhi.n	801487a <_strtol_l.constprop.0+0xc6>
 8014870:	3c57      	subs	r4, #87	; 0x57
 8014872:	e7db      	b.n	801482c <_strtol_l.constprop.0+0x78>
 8014874:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8014878:	e7e6      	b.n	8014848 <_strtol_l.constprop.0+0x94>
 801487a:	f1bc 0f00 	cmp.w	ip, #0
 801487e:	da05      	bge.n	801488c <_strtol_l.constprop.0+0xd8>
 8014880:	2322      	movs	r3, #34	; 0x22
 8014882:	6003      	str	r3, [r0, #0]
 8014884:	4646      	mov	r6, r8
 8014886:	b942      	cbnz	r2, 801489a <_strtol_l.constprop.0+0xe6>
 8014888:	4630      	mov	r0, r6
 801488a:	e79e      	b.n	80147ca <_strtol_l.constprop.0+0x16>
 801488c:	b107      	cbz	r7, 8014890 <_strtol_l.constprop.0+0xdc>
 801488e:	4276      	negs	r6, r6
 8014890:	2a00      	cmp	r2, #0
 8014892:	d0f9      	beq.n	8014888 <_strtol_l.constprop.0+0xd4>
 8014894:	f1bc 0f00 	cmp.w	ip, #0
 8014898:	d000      	beq.n	801489c <_strtol_l.constprop.0+0xe8>
 801489a:	1e69      	subs	r1, r5, #1
 801489c:	6011      	str	r1, [r2, #0]
 801489e:	e7f3      	b.n	8014888 <_strtol_l.constprop.0+0xd4>
 80148a0:	2430      	movs	r4, #48	; 0x30
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d1b1      	bne.n	801480a <_strtol_l.constprop.0+0x56>
 80148a6:	2308      	movs	r3, #8
 80148a8:	e7af      	b.n	801480a <_strtol_l.constprop.0+0x56>
 80148aa:	2c30      	cmp	r4, #48	; 0x30
 80148ac:	d0a5      	beq.n	80147fa <_strtol_l.constprop.0+0x46>
 80148ae:	230a      	movs	r3, #10
 80148b0:	e7ab      	b.n	801480a <_strtol_l.constprop.0+0x56>
 80148b2:	bf00      	nop
 80148b4:	08018d71 	.word	0x08018d71

080148b8 <strtol>:
 80148b8:	4613      	mov	r3, r2
 80148ba:	460a      	mov	r2, r1
 80148bc:	4601      	mov	r1, r0
 80148be:	4802      	ldr	r0, [pc, #8]	; (80148c8 <strtol+0x10>)
 80148c0:	6800      	ldr	r0, [r0, #0]
 80148c2:	f7ff bf77 	b.w	80147b4 <_strtol_l.constprop.0>
 80148c6:	bf00      	nop
 80148c8:	20000180 	.word	0x20000180

080148cc <_vsniprintf_r>:
 80148cc:	b530      	push	{r4, r5, lr}
 80148ce:	4614      	mov	r4, r2
 80148d0:	2c00      	cmp	r4, #0
 80148d2:	b09b      	sub	sp, #108	; 0x6c
 80148d4:	4605      	mov	r5, r0
 80148d6:	461a      	mov	r2, r3
 80148d8:	da05      	bge.n	80148e6 <_vsniprintf_r+0x1a>
 80148da:	238b      	movs	r3, #139	; 0x8b
 80148dc:	6003      	str	r3, [r0, #0]
 80148de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80148e2:	b01b      	add	sp, #108	; 0x6c
 80148e4:	bd30      	pop	{r4, r5, pc}
 80148e6:	f44f 7302 	mov.w	r3, #520	; 0x208
 80148ea:	f8ad 300c 	strh.w	r3, [sp, #12]
 80148ee:	bf14      	ite	ne
 80148f0:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80148f4:	4623      	moveq	r3, r4
 80148f6:	9302      	str	r3, [sp, #8]
 80148f8:	9305      	str	r3, [sp, #20]
 80148fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80148fe:	9100      	str	r1, [sp, #0]
 8014900:	9104      	str	r1, [sp, #16]
 8014902:	f8ad 300e 	strh.w	r3, [sp, #14]
 8014906:	4669      	mov	r1, sp
 8014908:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801490a:	f002 f8a5 	bl	8016a58 <_svfiprintf_r>
 801490e:	1c43      	adds	r3, r0, #1
 8014910:	bfbc      	itt	lt
 8014912:	238b      	movlt	r3, #139	; 0x8b
 8014914:	602b      	strlt	r3, [r5, #0]
 8014916:	2c00      	cmp	r4, #0
 8014918:	d0e3      	beq.n	80148e2 <_vsniprintf_r+0x16>
 801491a:	9b00      	ldr	r3, [sp, #0]
 801491c:	2200      	movs	r2, #0
 801491e:	701a      	strb	r2, [r3, #0]
 8014920:	e7df      	b.n	80148e2 <_vsniprintf_r+0x16>
	...

08014924 <vsniprintf>:
 8014924:	b507      	push	{r0, r1, r2, lr}
 8014926:	9300      	str	r3, [sp, #0]
 8014928:	4613      	mov	r3, r2
 801492a:	460a      	mov	r2, r1
 801492c:	4601      	mov	r1, r0
 801492e:	4803      	ldr	r0, [pc, #12]	; (801493c <vsniprintf+0x18>)
 8014930:	6800      	ldr	r0, [r0, #0]
 8014932:	f7ff ffcb 	bl	80148cc <_vsniprintf_r>
 8014936:	b003      	add	sp, #12
 8014938:	f85d fb04 	ldr.w	pc, [sp], #4
 801493c:	20000180 	.word	0x20000180

08014940 <_write_r>:
 8014940:	b538      	push	{r3, r4, r5, lr}
 8014942:	4d07      	ldr	r5, [pc, #28]	; (8014960 <_write_r+0x20>)
 8014944:	4604      	mov	r4, r0
 8014946:	4608      	mov	r0, r1
 8014948:	4611      	mov	r1, r2
 801494a:	2200      	movs	r2, #0
 801494c:	602a      	str	r2, [r5, #0]
 801494e:	461a      	mov	r2, r3
 8014950:	f7f1 ff9d 	bl	800688e <_write>
 8014954:	1c43      	adds	r3, r0, #1
 8014956:	d102      	bne.n	801495e <_write_r+0x1e>
 8014958:	682b      	ldr	r3, [r5, #0]
 801495a:	b103      	cbz	r3, 801495e <_write_r+0x1e>
 801495c:	6023      	str	r3, [r4, #0]
 801495e:	bd38      	pop	{r3, r4, r5, pc}
 8014960:	200082e4 	.word	0x200082e4

08014964 <_close_r>:
 8014964:	b538      	push	{r3, r4, r5, lr}
 8014966:	4d06      	ldr	r5, [pc, #24]	; (8014980 <_close_r+0x1c>)
 8014968:	2300      	movs	r3, #0
 801496a:	4604      	mov	r4, r0
 801496c:	4608      	mov	r0, r1
 801496e:	602b      	str	r3, [r5, #0]
 8014970:	f7f1 ffa9 	bl	80068c6 <_close>
 8014974:	1c43      	adds	r3, r0, #1
 8014976:	d102      	bne.n	801497e <_close_r+0x1a>
 8014978:	682b      	ldr	r3, [r5, #0]
 801497a:	b103      	cbz	r3, 801497e <_close_r+0x1a>
 801497c:	6023      	str	r3, [r4, #0]
 801497e:	bd38      	pop	{r3, r4, r5, pc}
 8014980:	200082e4 	.word	0x200082e4

08014984 <quorem>:
 8014984:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014988:	6903      	ldr	r3, [r0, #16]
 801498a:	690c      	ldr	r4, [r1, #16]
 801498c:	42a3      	cmp	r3, r4
 801498e:	4607      	mov	r7, r0
 8014990:	f2c0 8081 	blt.w	8014a96 <quorem+0x112>
 8014994:	3c01      	subs	r4, #1
 8014996:	f101 0814 	add.w	r8, r1, #20
 801499a:	f100 0514 	add.w	r5, r0, #20
 801499e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80149a2:	9301      	str	r3, [sp, #4]
 80149a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80149a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80149ac:	3301      	adds	r3, #1
 80149ae:	429a      	cmp	r2, r3
 80149b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80149b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80149b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80149bc:	d331      	bcc.n	8014a22 <quorem+0x9e>
 80149be:	f04f 0e00 	mov.w	lr, #0
 80149c2:	4640      	mov	r0, r8
 80149c4:	46ac      	mov	ip, r5
 80149c6:	46f2      	mov	sl, lr
 80149c8:	f850 2b04 	ldr.w	r2, [r0], #4
 80149cc:	b293      	uxth	r3, r2
 80149ce:	fb06 e303 	mla	r3, r6, r3, lr
 80149d2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80149d6:	b29b      	uxth	r3, r3
 80149d8:	ebaa 0303 	sub.w	r3, sl, r3
 80149dc:	f8dc a000 	ldr.w	sl, [ip]
 80149e0:	0c12      	lsrs	r2, r2, #16
 80149e2:	fa13 f38a 	uxtah	r3, r3, sl
 80149e6:	fb06 e202 	mla	r2, r6, r2, lr
 80149ea:	9300      	str	r3, [sp, #0]
 80149ec:	9b00      	ldr	r3, [sp, #0]
 80149ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80149f2:	b292      	uxth	r2, r2
 80149f4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80149f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80149fc:	f8bd 3000 	ldrh.w	r3, [sp]
 8014a00:	4581      	cmp	r9, r0
 8014a02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014a06:	f84c 3b04 	str.w	r3, [ip], #4
 8014a0a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014a0e:	d2db      	bcs.n	80149c8 <quorem+0x44>
 8014a10:	f855 300b 	ldr.w	r3, [r5, fp]
 8014a14:	b92b      	cbnz	r3, 8014a22 <quorem+0x9e>
 8014a16:	9b01      	ldr	r3, [sp, #4]
 8014a18:	3b04      	subs	r3, #4
 8014a1a:	429d      	cmp	r5, r3
 8014a1c:	461a      	mov	r2, r3
 8014a1e:	d32e      	bcc.n	8014a7e <quorem+0xfa>
 8014a20:	613c      	str	r4, [r7, #16]
 8014a22:	4638      	mov	r0, r7
 8014a24:	f001 fd64 	bl	80164f0 <__mcmp>
 8014a28:	2800      	cmp	r0, #0
 8014a2a:	db24      	blt.n	8014a76 <quorem+0xf2>
 8014a2c:	3601      	adds	r6, #1
 8014a2e:	4628      	mov	r0, r5
 8014a30:	f04f 0c00 	mov.w	ip, #0
 8014a34:	f858 2b04 	ldr.w	r2, [r8], #4
 8014a38:	f8d0 e000 	ldr.w	lr, [r0]
 8014a3c:	b293      	uxth	r3, r2
 8014a3e:	ebac 0303 	sub.w	r3, ip, r3
 8014a42:	0c12      	lsrs	r2, r2, #16
 8014a44:	fa13 f38e 	uxtah	r3, r3, lr
 8014a48:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014a4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014a50:	b29b      	uxth	r3, r3
 8014a52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014a56:	45c1      	cmp	r9, r8
 8014a58:	f840 3b04 	str.w	r3, [r0], #4
 8014a5c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014a60:	d2e8      	bcs.n	8014a34 <quorem+0xb0>
 8014a62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014a66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014a6a:	b922      	cbnz	r2, 8014a76 <quorem+0xf2>
 8014a6c:	3b04      	subs	r3, #4
 8014a6e:	429d      	cmp	r5, r3
 8014a70:	461a      	mov	r2, r3
 8014a72:	d30a      	bcc.n	8014a8a <quorem+0x106>
 8014a74:	613c      	str	r4, [r7, #16]
 8014a76:	4630      	mov	r0, r6
 8014a78:	b003      	add	sp, #12
 8014a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a7e:	6812      	ldr	r2, [r2, #0]
 8014a80:	3b04      	subs	r3, #4
 8014a82:	2a00      	cmp	r2, #0
 8014a84:	d1cc      	bne.n	8014a20 <quorem+0x9c>
 8014a86:	3c01      	subs	r4, #1
 8014a88:	e7c7      	b.n	8014a1a <quorem+0x96>
 8014a8a:	6812      	ldr	r2, [r2, #0]
 8014a8c:	3b04      	subs	r3, #4
 8014a8e:	2a00      	cmp	r2, #0
 8014a90:	d1f0      	bne.n	8014a74 <quorem+0xf0>
 8014a92:	3c01      	subs	r4, #1
 8014a94:	e7eb      	b.n	8014a6e <quorem+0xea>
 8014a96:	2000      	movs	r0, #0
 8014a98:	e7ee      	b.n	8014a78 <quorem+0xf4>
 8014a9a:	0000      	movs	r0, r0
 8014a9c:	0000      	movs	r0, r0
	...

08014aa0 <_dtoa_r>:
 8014aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014aa4:	ed2d 8b04 	vpush	{d8-d9}
 8014aa8:	ec57 6b10 	vmov	r6, r7, d0
 8014aac:	b093      	sub	sp, #76	; 0x4c
 8014aae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014ab0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014ab4:	9106      	str	r1, [sp, #24]
 8014ab6:	ee10 aa10 	vmov	sl, s0
 8014aba:	4604      	mov	r4, r0
 8014abc:	9209      	str	r2, [sp, #36]	; 0x24
 8014abe:	930c      	str	r3, [sp, #48]	; 0x30
 8014ac0:	46bb      	mov	fp, r7
 8014ac2:	b975      	cbnz	r5, 8014ae2 <_dtoa_r+0x42>
 8014ac4:	2010      	movs	r0, #16
 8014ac6:	f001 fa21 	bl	8015f0c <malloc>
 8014aca:	4602      	mov	r2, r0
 8014acc:	6260      	str	r0, [r4, #36]	; 0x24
 8014ace:	b920      	cbnz	r0, 8014ada <_dtoa_r+0x3a>
 8014ad0:	4ba7      	ldr	r3, [pc, #668]	; (8014d70 <_dtoa_r+0x2d0>)
 8014ad2:	21ea      	movs	r1, #234	; 0xea
 8014ad4:	48a7      	ldr	r0, [pc, #668]	; (8014d74 <_dtoa_r+0x2d4>)
 8014ad6:	f002 f8e9 	bl	8016cac <__assert_func>
 8014ada:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014ade:	6005      	str	r5, [r0, #0]
 8014ae0:	60c5      	str	r5, [r0, #12]
 8014ae2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014ae4:	6819      	ldr	r1, [r3, #0]
 8014ae6:	b151      	cbz	r1, 8014afe <_dtoa_r+0x5e>
 8014ae8:	685a      	ldr	r2, [r3, #4]
 8014aea:	604a      	str	r2, [r1, #4]
 8014aec:	2301      	movs	r3, #1
 8014aee:	4093      	lsls	r3, r2
 8014af0:	608b      	str	r3, [r1, #8]
 8014af2:	4620      	mov	r0, r4
 8014af4:	f001 fa70 	bl	8015fd8 <_Bfree>
 8014af8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014afa:	2200      	movs	r2, #0
 8014afc:	601a      	str	r2, [r3, #0]
 8014afe:	1e3b      	subs	r3, r7, #0
 8014b00:	bfaa      	itet	ge
 8014b02:	2300      	movge	r3, #0
 8014b04:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8014b08:	f8c8 3000 	strge.w	r3, [r8]
 8014b0c:	4b9a      	ldr	r3, [pc, #616]	; (8014d78 <_dtoa_r+0x2d8>)
 8014b0e:	bfbc      	itt	lt
 8014b10:	2201      	movlt	r2, #1
 8014b12:	f8c8 2000 	strlt.w	r2, [r8]
 8014b16:	ea33 030b 	bics.w	r3, r3, fp
 8014b1a:	d11b      	bne.n	8014b54 <_dtoa_r+0xb4>
 8014b1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014b1e:	f242 730f 	movw	r3, #9999	; 0x270f
 8014b22:	6013      	str	r3, [r2, #0]
 8014b24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014b28:	4333      	orrs	r3, r6
 8014b2a:	f000 8592 	beq.w	8015652 <_dtoa_r+0xbb2>
 8014b2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014b30:	b963      	cbnz	r3, 8014b4c <_dtoa_r+0xac>
 8014b32:	4b92      	ldr	r3, [pc, #584]	; (8014d7c <_dtoa_r+0x2dc>)
 8014b34:	e022      	b.n	8014b7c <_dtoa_r+0xdc>
 8014b36:	4b92      	ldr	r3, [pc, #584]	; (8014d80 <_dtoa_r+0x2e0>)
 8014b38:	9301      	str	r3, [sp, #4]
 8014b3a:	3308      	adds	r3, #8
 8014b3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014b3e:	6013      	str	r3, [r2, #0]
 8014b40:	9801      	ldr	r0, [sp, #4]
 8014b42:	b013      	add	sp, #76	; 0x4c
 8014b44:	ecbd 8b04 	vpop	{d8-d9}
 8014b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b4c:	4b8b      	ldr	r3, [pc, #556]	; (8014d7c <_dtoa_r+0x2dc>)
 8014b4e:	9301      	str	r3, [sp, #4]
 8014b50:	3303      	adds	r3, #3
 8014b52:	e7f3      	b.n	8014b3c <_dtoa_r+0x9c>
 8014b54:	2200      	movs	r2, #0
 8014b56:	2300      	movs	r3, #0
 8014b58:	4650      	mov	r0, sl
 8014b5a:	4659      	mov	r1, fp
 8014b5c:	f7eb ffb4 	bl	8000ac8 <__aeabi_dcmpeq>
 8014b60:	ec4b ab19 	vmov	d9, sl, fp
 8014b64:	4680      	mov	r8, r0
 8014b66:	b158      	cbz	r0, 8014b80 <_dtoa_r+0xe0>
 8014b68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014b6a:	2301      	movs	r3, #1
 8014b6c:	6013      	str	r3, [r2, #0]
 8014b6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	f000 856b 	beq.w	801564c <_dtoa_r+0xbac>
 8014b76:	4883      	ldr	r0, [pc, #524]	; (8014d84 <_dtoa_r+0x2e4>)
 8014b78:	6018      	str	r0, [r3, #0]
 8014b7a:	1e43      	subs	r3, r0, #1
 8014b7c:	9301      	str	r3, [sp, #4]
 8014b7e:	e7df      	b.n	8014b40 <_dtoa_r+0xa0>
 8014b80:	ec4b ab10 	vmov	d0, sl, fp
 8014b84:	aa10      	add	r2, sp, #64	; 0x40
 8014b86:	a911      	add	r1, sp, #68	; 0x44
 8014b88:	4620      	mov	r0, r4
 8014b8a:	f001 fdd3 	bl	8016734 <__d2b>
 8014b8e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8014b92:	ee08 0a10 	vmov	s16, r0
 8014b96:	2d00      	cmp	r5, #0
 8014b98:	f000 8084 	beq.w	8014ca4 <_dtoa_r+0x204>
 8014b9c:	ee19 3a90 	vmov	r3, s19
 8014ba0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014ba4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8014ba8:	4656      	mov	r6, sl
 8014baa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8014bae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014bb2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8014bb6:	4b74      	ldr	r3, [pc, #464]	; (8014d88 <_dtoa_r+0x2e8>)
 8014bb8:	2200      	movs	r2, #0
 8014bba:	4630      	mov	r0, r6
 8014bbc:	4639      	mov	r1, r7
 8014bbe:	f7eb fb63 	bl	8000288 <__aeabi_dsub>
 8014bc2:	a365      	add	r3, pc, #404	; (adr r3, 8014d58 <_dtoa_r+0x2b8>)
 8014bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bc8:	f7eb fd16 	bl	80005f8 <__aeabi_dmul>
 8014bcc:	a364      	add	r3, pc, #400	; (adr r3, 8014d60 <_dtoa_r+0x2c0>)
 8014bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bd2:	f7eb fb5b 	bl	800028c <__adddf3>
 8014bd6:	4606      	mov	r6, r0
 8014bd8:	4628      	mov	r0, r5
 8014bda:	460f      	mov	r7, r1
 8014bdc:	f7eb fca2 	bl	8000524 <__aeabi_i2d>
 8014be0:	a361      	add	r3, pc, #388	; (adr r3, 8014d68 <_dtoa_r+0x2c8>)
 8014be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014be6:	f7eb fd07 	bl	80005f8 <__aeabi_dmul>
 8014bea:	4602      	mov	r2, r0
 8014bec:	460b      	mov	r3, r1
 8014bee:	4630      	mov	r0, r6
 8014bf0:	4639      	mov	r1, r7
 8014bf2:	f7eb fb4b 	bl	800028c <__adddf3>
 8014bf6:	4606      	mov	r6, r0
 8014bf8:	460f      	mov	r7, r1
 8014bfa:	f7eb ffad 	bl	8000b58 <__aeabi_d2iz>
 8014bfe:	2200      	movs	r2, #0
 8014c00:	9000      	str	r0, [sp, #0]
 8014c02:	2300      	movs	r3, #0
 8014c04:	4630      	mov	r0, r6
 8014c06:	4639      	mov	r1, r7
 8014c08:	f7eb ff68 	bl	8000adc <__aeabi_dcmplt>
 8014c0c:	b150      	cbz	r0, 8014c24 <_dtoa_r+0x184>
 8014c0e:	9800      	ldr	r0, [sp, #0]
 8014c10:	f7eb fc88 	bl	8000524 <__aeabi_i2d>
 8014c14:	4632      	mov	r2, r6
 8014c16:	463b      	mov	r3, r7
 8014c18:	f7eb ff56 	bl	8000ac8 <__aeabi_dcmpeq>
 8014c1c:	b910      	cbnz	r0, 8014c24 <_dtoa_r+0x184>
 8014c1e:	9b00      	ldr	r3, [sp, #0]
 8014c20:	3b01      	subs	r3, #1
 8014c22:	9300      	str	r3, [sp, #0]
 8014c24:	9b00      	ldr	r3, [sp, #0]
 8014c26:	2b16      	cmp	r3, #22
 8014c28:	d85a      	bhi.n	8014ce0 <_dtoa_r+0x240>
 8014c2a:	9a00      	ldr	r2, [sp, #0]
 8014c2c:	4b57      	ldr	r3, [pc, #348]	; (8014d8c <_dtoa_r+0x2ec>)
 8014c2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c36:	ec51 0b19 	vmov	r0, r1, d9
 8014c3a:	f7eb ff4f 	bl	8000adc <__aeabi_dcmplt>
 8014c3e:	2800      	cmp	r0, #0
 8014c40:	d050      	beq.n	8014ce4 <_dtoa_r+0x244>
 8014c42:	9b00      	ldr	r3, [sp, #0]
 8014c44:	3b01      	subs	r3, #1
 8014c46:	9300      	str	r3, [sp, #0]
 8014c48:	2300      	movs	r3, #0
 8014c4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8014c4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014c4e:	1b5d      	subs	r5, r3, r5
 8014c50:	1e6b      	subs	r3, r5, #1
 8014c52:	9305      	str	r3, [sp, #20]
 8014c54:	bf45      	ittet	mi
 8014c56:	f1c5 0301 	rsbmi	r3, r5, #1
 8014c5a:	9304      	strmi	r3, [sp, #16]
 8014c5c:	2300      	movpl	r3, #0
 8014c5e:	2300      	movmi	r3, #0
 8014c60:	bf4c      	ite	mi
 8014c62:	9305      	strmi	r3, [sp, #20]
 8014c64:	9304      	strpl	r3, [sp, #16]
 8014c66:	9b00      	ldr	r3, [sp, #0]
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	db3d      	blt.n	8014ce8 <_dtoa_r+0x248>
 8014c6c:	9b05      	ldr	r3, [sp, #20]
 8014c6e:	9a00      	ldr	r2, [sp, #0]
 8014c70:	920a      	str	r2, [sp, #40]	; 0x28
 8014c72:	4413      	add	r3, r2
 8014c74:	9305      	str	r3, [sp, #20]
 8014c76:	2300      	movs	r3, #0
 8014c78:	9307      	str	r3, [sp, #28]
 8014c7a:	9b06      	ldr	r3, [sp, #24]
 8014c7c:	2b09      	cmp	r3, #9
 8014c7e:	f200 8089 	bhi.w	8014d94 <_dtoa_r+0x2f4>
 8014c82:	2b05      	cmp	r3, #5
 8014c84:	bfc4      	itt	gt
 8014c86:	3b04      	subgt	r3, #4
 8014c88:	9306      	strgt	r3, [sp, #24]
 8014c8a:	9b06      	ldr	r3, [sp, #24]
 8014c8c:	f1a3 0302 	sub.w	r3, r3, #2
 8014c90:	bfcc      	ite	gt
 8014c92:	2500      	movgt	r5, #0
 8014c94:	2501      	movle	r5, #1
 8014c96:	2b03      	cmp	r3, #3
 8014c98:	f200 8087 	bhi.w	8014daa <_dtoa_r+0x30a>
 8014c9c:	e8df f003 	tbb	[pc, r3]
 8014ca0:	59383a2d 	.word	0x59383a2d
 8014ca4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8014ca8:	441d      	add	r5, r3
 8014caa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8014cae:	2b20      	cmp	r3, #32
 8014cb0:	bfc1      	itttt	gt
 8014cb2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014cb6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8014cba:	fa0b f303 	lslgt.w	r3, fp, r3
 8014cbe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8014cc2:	bfda      	itte	le
 8014cc4:	f1c3 0320 	rsble	r3, r3, #32
 8014cc8:	fa06 f003 	lslle.w	r0, r6, r3
 8014ccc:	4318      	orrgt	r0, r3
 8014cce:	f7eb fc19 	bl	8000504 <__aeabi_ui2d>
 8014cd2:	2301      	movs	r3, #1
 8014cd4:	4606      	mov	r6, r0
 8014cd6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8014cda:	3d01      	subs	r5, #1
 8014cdc:	930e      	str	r3, [sp, #56]	; 0x38
 8014cde:	e76a      	b.n	8014bb6 <_dtoa_r+0x116>
 8014ce0:	2301      	movs	r3, #1
 8014ce2:	e7b2      	b.n	8014c4a <_dtoa_r+0x1aa>
 8014ce4:	900b      	str	r0, [sp, #44]	; 0x2c
 8014ce6:	e7b1      	b.n	8014c4c <_dtoa_r+0x1ac>
 8014ce8:	9b04      	ldr	r3, [sp, #16]
 8014cea:	9a00      	ldr	r2, [sp, #0]
 8014cec:	1a9b      	subs	r3, r3, r2
 8014cee:	9304      	str	r3, [sp, #16]
 8014cf0:	4253      	negs	r3, r2
 8014cf2:	9307      	str	r3, [sp, #28]
 8014cf4:	2300      	movs	r3, #0
 8014cf6:	930a      	str	r3, [sp, #40]	; 0x28
 8014cf8:	e7bf      	b.n	8014c7a <_dtoa_r+0x1da>
 8014cfa:	2300      	movs	r3, #0
 8014cfc:	9308      	str	r3, [sp, #32]
 8014cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	dc55      	bgt.n	8014db0 <_dtoa_r+0x310>
 8014d04:	2301      	movs	r3, #1
 8014d06:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014d0a:	461a      	mov	r2, r3
 8014d0c:	9209      	str	r2, [sp, #36]	; 0x24
 8014d0e:	e00c      	b.n	8014d2a <_dtoa_r+0x28a>
 8014d10:	2301      	movs	r3, #1
 8014d12:	e7f3      	b.n	8014cfc <_dtoa_r+0x25c>
 8014d14:	2300      	movs	r3, #0
 8014d16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014d18:	9308      	str	r3, [sp, #32]
 8014d1a:	9b00      	ldr	r3, [sp, #0]
 8014d1c:	4413      	add	r3, r2
 8014d1e:	9302      	str	r3, [sp, #8]
 8014d20:	3301      	adds	r3, #1
 8014d22:	2b01      	cmp	r3, #1
 8014d24:	9303      	str	r3, [sp, #12]
 8014d26:	bfb8      	it	lt
 8014d28:	2301      	movlt	r3, #1
 8014d2a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8014d2c:	2200      	movs	r2, #0
 8014d2e:	6042      	str	r2, [r0, #4]
 8014d30:	2204      	movs	r2, #4
 8014d32:	f102 0614 	add.w	r6, r2, #20
 8014d36:	429e      	cmp	r6, r3
 8014d38:	6841      	ldr	r1, [r0, #4]
 8014d3a:	d93d      	bls.n	8014db8 <_dtoa_r+0x318>
 8014d3c:	4620      	mov	r0, r4
 8014d3e:	f001 f90b 	bl	8015f58 <_Balloc>
 8014d42:	9001      	str	r0, [sp, #4]
 8014d44:	2800      	cmp	r0, #0
 8014d46:	d13b      	bne.n	8014dc0 <_dtoa_r+0x320>
 8014d48:	4b11      	ldr	r3, [pc, #68]	; (8014d90 <_dtoa_r+0x2f0>)
 8014d4a:	4602      	mov	r2, r0
 8014d4c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8014d50:	e6c0      	b.n	8014ad4 <_dtoa_r+0x34>
 8014d52:	2301      	movs	r3, #1
 8014d54:	e7df      	b.n	8014d16 <_dtoa_r+0x276>
 8014d56:	bf00      	nop
 8014d58:	636f4361 	.word	0x636f4361
 8014d5c:	3fd287a7 	.word	0x3fd287a7
 8014d60:	8b60c8b3 	.word	0x8b60c8b3
 8014d64:	3fc68a28 	.word	0x3fc68a28
 8014d68:	509f79fb 	.word	0x509f79fb
 8014d6c:	3fd34413 	.word	0x3fd34413
 8014d70:	08018f6d 	.word	0x08018f6d
 8014d74:	08018f84 	.word	0x08018f84
 8014d78:	7ff00000 	.word	0x7ff00000
 8014d7c:	08018f69 	.word	0x08018f69
 8014d80:	08018f60 	.word	0x08018f60
 8014d84:	08018ee9 	.word	0x08018ee9
 8014d88:	3ff80000 	.word	0x3ff80000
 8014d8c:	080190f0 	.word	0x080190f0
 8014d90:	08018fdf 	.word	0x08018fdf
 8014d94:	2501      	movs	r5, #1
 8014d96:	2300      	movs	r3, #0
 8014d98:	9306      	str	r3, [sp, #24]
 8014d9a:	9508      	str	r5, [sp, #32]
 8014d9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014da0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014da4:	2200      	movs	r2, #0
 8014da6:	2312      	movs	r3, #18
 8014da8:	e7b0      	b.n	8014d0c <_dtoa_r+0x26c>
 8014daa:	2301      	movs	r3, #1
 8014dac:	9308      	str	r3, [sp, #32]
 8014dae:	e7f5      	b.n	8014d9c <_dtoa_r+0x2fc>
 8014db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014db2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014db6:	e7b8      	b.n	8014d2a <_dtoa_r+0x28a>
 8014db8:	3101      	adds	r1, #1
 8014dba:	6041      	str	r1, [r0, #4]
 8014dbc:	0052      	lsls	r2, r2, #1
 8014dbe:	e7b8      	b.n	8014d32 <_dtoa_r+0x292>
 8014dc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014dc2:	9a01      	ldr	r2, [sp, #4]
 8014dc4:	601a      	str	r2, [r3, #0]
 8014dc6:	9b03      	ldr	r3, [sp, #12]
 8014dc8:	2b0e      	cmp	r3, #14
 8014dca:	f200 809d 	bhi.w	8014f08 <_dtoa_r+0x468>
 8014dce:	2d00      	cmp	r5, #0
 8014dd0:	f000 809a 	beq.w	8014f08 <_dtoa_r+0x468>
 8014dd4:	9b00      	ldr	r3, [sp, #0]
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	dd32      	ble.n	8014e40 <_dtoa_r+0x3a0>
 8014dda:	4ab7      	ldr	r2, [pc, #732]	; (80150b8 <_dtoa_r+0x618>)
 8014ddc:	f003 030f 	and.w	r3, r3, #15
 8014de0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014de4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014de8:	9b00      	ldr	r3, [sp, #0]
 8014dea:	05d8      	lsls	r0, r3, #23
 8014dec:	ea4f 1723 	mov.w	r7, r3, asr #4
 8014df0:	d516      	bpl.n	8014e20 <_dtoa_r+0x380>
 8014df2:	4bb2      	ldr	r3, [pc, #712]	; (80150bc <_dtoa_r+0x61c>)
 8014df4:	ec51 0b19 	vmov	r0, r1, d9
 8014df8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014dfc:	f7eb fd26 	bl	800084c <__aeabi_ddiv>
 8014e00:	f007 070f 	and.w	r7, r7, #15
 8014e04:	4682      	mov	sl, r0
 8014e06:	468b      	mov	fp, r1
 8014e08:	2503      	movs	r5, #3
 8014e0a:	4eac      	ldr	r6, [pc, #688]	; (80150bc <_dtoa_r+0x61c>)
 8014e0c:	b957      	cbnz	r7, 8014e24 <_dtoa_r+0x384>
 8014e0e:	4642      	mov	r2, r8
 8014e10:	464b      	mov	r3, r9
 8014e12:	4650      	mov	r0, sl
 8014e14:	4659      	mov	r1, fp
 8014e16:	f7eb fd19 	bl	800084c <__aeabi_ddiv>
 8014e1a:	4682      	mov	sl, r0
 8014e1c:	468b      	mov	fp, r1
 8014e1e:	e028      	b.n	8014e72 <_dtoa_r+0x3d2>
 8014e20:	2502      	movs	r5, #2
 8014e22:	e7f2      	b.n	8014e0a <_dtoa_r+0x36a>
 8014e24:	07f9      	lsls	r1, r7, #31
 8014e26:	d508      	bpl.n	8014e3a <_dtoa_r+0x39a>
 8014e28:	4640      	mov	r0, r8
 8014e2a:	4649      	mov	r1, r9
 8014e2c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014e30:	f7eb fbe2 	bl	80005f8 <__aeabi_dmul>
 8014e34:	3501      	adds	r5, #1
 8014e36:	4680      	mov	r8, r0
 8014e38:	4689      	mov	r9, r1
 8014e3a:	107f      	asrs	r7, r7, #1
 8014e3c:	3608      	adds	r6, #8
 8014e3e:	e7e5      	b.n	8014e0c <_dtoa_r+0x36c>
 8014e40:	f000 809b 	beq.w	8014f7a <_dtoa_r+0x4da>
 8014e44:	9b00      	ldr	r3, [sp, #0]
 8014e46:	4f9d      	ldr	r7, [pc, #628]	; (80150bc <_dtoa_r+0x61c>)
 8014e48:	425e      	negs	r6, r3
 8014e4a:	4b9b      	ldr	r3, [pc, #620]	; (80150b8 <_dtoa_r+0x618>)
 8014e4c:	f006 020f 	and.w	r2, r6, #15
 8014e50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e58:	ec51 0b19 	vmov	r0, r1, d9
 8014e5c:	f7eb fbcc 	bl	80005f8 <__aeabi_dmul>
 8014e60:	1136      	asrs	r6, r6, #4
 8014e62:	4682      	mov	sl, r0
 8014e64:	468b      	mov	fp, r1
 8014e66:	2300      	movs	r3, #0
 8014e68:	2502      	movs	r5, #2
 8014e6a:	2e00      	cmp	r6, #0
 8014e6c:	d17a      	bne.n	8014f64 <_dtoa_r+0x4c4>
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d1d3      	bne.n	8014e1a <_dtoa_r+0x37a>
 8014e72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	f000 8082 	beq.w	8014f7e <_dtoa_r+0x4de>
 8014e7a:	4b91      	ldr	r3, [pc, #580]	; (80150c0 <_dtoa_r+0x620>)
 8014e7c:	2200      	movs	r2, #0
 8014e7e:	4650      	mov	r0, sl
 8014e80:	4659      	mov	r1, fp
 8014e82:	f7eb fe2b 	bl	8000adc <__aeabi_dcmplt>
 8014e86:	2800      	cmp	r0, #0
 8014e88:	d079      	beq.n	8014f7e <_dtoa_r+0x4de>
 8014e8a:	9b03      	ldr	r3, [sp, #12]
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d076      	beq.n	8014f7e <_dtoa_r+0x4de>
 8014e90:	9b02      	ldr	r3, [sp, #8]
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	dd36      	ble.n	8014f04 <_dtoa_r+0x464>
 8014e96:	9b00      	ldr	r3, [sp, #0]
 8014e98:	4650      	mov	r0, sl
 8014e9a:	4659      	mov	r1, fp
 8014e9c:	1e5f      	subs	r7, r3, #1
 8014e9e:	2200      	movs	r2, #0
 8014ea0:	4b88      	ldr	r3, [pc, #544]	; (80150c4 <_dtoa_r+0x624>)
 8014ea2:	f7eb fba9 	bl	80005f8 <__aeabi_dmul>
 8014ea6:	9e02      	ldr	r6, [sp, #8]
 8014ea8:	4682      	mov	sl, r0
 8014eaa:	468b      	mov	fp, r1
 8014eac:	3501      	adds	r5, #1
 8014eae:	4628      	mov	r0, r5
 8014eb0:	f7eb fb38 	bl	8000524 <__aeabi_i2d>
 8014eb4:	4652      	mov	r2, sl
 8014eb6:	465b      	mov	r3, fp
 8014eb8:	f7eb fb9e 	bl	80005f8 <__aeabi_dmul>
 8014ebc:	4b82      	ldr	r3, [pc, #520]	; (80150c8 <_dtoa_r+0x628>)
 8014ebe:	2200      	movs	r2, #0
 8014ec0:	f7eb f9e4 	bl	800028c <__adddf3>
 8014ec4:	46d0      	mov	r8, sl
 8014ec6:	46d9      	mov	r9, fp
 8014ec8:	4682      	mov	sl, r0
 8014eca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8014ece:	2e00      	cmp	r6, #0
 8014ed0:	d158      	bne.n	8014f84 <_dtoa_r+0x4e4>
 8014ed2:	4b7e      	ldr	r3, [pc, #504]	; (80150cc <_dtoa_r+0x62c>)
 8014ed4:	2200      	movs	r2, #0
 8014ed6:	4640      	mov	r0, r8
 8014ed8:	4649      	mov	r1, r9
 8014eda:	f7eb f9d5 	bl	8000288 <__aeabi_dsub>
 8014ede:	4652      	mov	r2, sl
 8014ee0:	465b      	mov	r3, fp
 8014ee2:	4680      	mov	r8, r0
 8014ee4:	4689      	mov	r9, r1
 8014ee6:	f7eb fe17 	bl	8000b18 <__aeabi_dcmpgt>
 8014eea:	2800      	cmp	r0, #0
 8014eec:	f040 8295 	bne.w	801541a <_dtoa_r+0x97a>
 8014ef0:	4652      	mov	r2, sl
 8014ef2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8014ef6:	4640      	mov	r0, r8
 8014ef8:	4649      	mov	r1, r9
 8014efa:	f7eb fdef 	bl	8000adc <__aeabi_dcmplt>
 8014efe:	2800      	cmp	r0, #0
 8014f00:	f040 8289 	bne.w	8015416 <_dtoa_r+0x976>
 8014f04:	ec5b ab19 	vmov	sl, fp, d9
 8014f08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	f2c0 8148 	blt.w	80151a0 <_dtoa_r+0x700>
 8014f10:	9a00      	ldr	r2, [sp, #0]
 8014f12:	2a0e      	cmp	r2, #14
 8014f14:	f300 8144 	bgt.w	80151a0 <_dtoa_r+0x700>
 8014f18:	4b67      	ldr	r3, [pc, #412]	; (80150b8 <_dtoa_r+0x618>)
 8014f1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014f1e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014f22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	f280 80d5 	bge.w	80150d4 <_dtoa_r+0x634>
 8014f2a:	9b03      	ldr	r3, [sp, #12]
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	f300 80d1 	bgt.w	80150d4 <_dtoa_r+0x634>
 8014f32:	f040 826f 	bne.w	8015414 <_dtoa_r+0x974>
 8014f36:	4b65      	ldr	r3, [pc, #404]	; (80150cc <_dtoa_r+0x62c>)
 8014f38:	2200      	movs	r2, #0
 8014f3a:	4640      	mov	r0, r8
 8014f3c:	4649      	mov	r1, r9
 8014f3e:	f7eb fb5b 	bl	80005f8 <__aeabi_dmul>
 8014f42:	4652      	mov	r2, sl
 8014f44:	465b      	mov	r3, fp
 8014f46:	f7eb fddd 	bl	8000b04 <__aeabi_dcmpge>
 8014f4a:	9e03      	ldr	r6, [sp, #12]
 8014f4c:	4637      	mov	r7, r6
 8014f4e:	2800      	cmp	r0, #0
 8014f50:	f040 8245 	bne.w	80153de <_dtoa_r+0x93e>
 8014f54:	9d01      	ldr	r5, [sp, #4]
 8014f56:	2331      	movs	r3, #49	; 0x31
 8014f58:	f805 3b01 	strb.w	r3, [r5], #1
 8014f5c:	9b00      	ldr	r3, [sp, #0]
 8014f5e:	3301      	adds	r3, #1
 8014f60:	9300      	str	r3, [sp, #0]
 8014f62:	e240      	b.n	80153e6 <_dtoa_r+0x946>
 8014f64:	07f2      	lsls	r2, r6, #31
 8014f66:	d505      	bpl.n	8014f74 <_dtoa_r+0x4d4>
 8014f68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014f6c:	f7eb fb44 	bl	80005f8 <__aeabi_dmul>
 8014f70:	3501      	adds	r5, #1
 8014f72:	2301      	movs	r3, #1
 8014f74:	1076      	asrs	r6, r6, #1
 8014f76:	3708      	adds	r7, #8
 8014f78:	e777      	b.n	8014e6a <_dtoa_r+0x3ca>
 8014f7a:	2502      	movs	r5, #2
 8014f7c:	e779      	b.n	8014e72 <_dtoa_r+0x3d2>
 8014f7e:	9f00      	ldr	r7, [sp, #0]
 8014f80:	9e03      	ldr	r6, [sp, #12]
 8014f82:	e794      	b.n	8014eae <_dtoa_r+0x40e>
 8014f84:	9901      	ldr	r1, [sp, #4]
 8014f86:	4b4c      	ldr	r3, [pc, #304]	; (80150b8 <_dtoa_r+0x618>)
 8014f88:	4431      	add	r1, r6
 8014f8a:	910d      	str	r1, [sp, #52]	; 0x34
 8014f8c:	9908      	ldr	r1, [sp, #32]
 8014f8e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8014f92:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014f96:	2900      	cmp	r1, #0
 8014f98:	d043      	beq.n	8015022 <_dtoa_r+0x582>
 8014f9a:	494d      	ldr	r1, [pc, #308]	; (80150d0 <_dtoa_r+0x630>)
 8014f9c:	2000      	movs	r0, #0
 8014f9e:	f7eb fc55 	bl	800084c <__aeabi_ddiv>
 8014fa2:	4652      	mov	r2, sl
 8014fa4:	465b      	mov	r3, fp
 8014fa6:	f7eb f96f 	bl	8000288 <__aeabi_dsub>
 8014faa:	9d01      	ldr	r5, [sp, #4]
 8014fac:	4682      	mov	sl, r0
 8014fae:	468b      	mov	fp, r1
 8014fb0:	4649      	mov	r1, r9
 8014fb2:	4640      	mov	r0, r8
 8014fb4:	f7eb fdd0 	bl	8000b58 <__aeabi_d2iz>
 8014fb8:	4606      	mov	r6, r0
 8014fba:	f7eb fab3 	bl	8000524 <__aeabi_i2d>
 8014fbe:	4602      	mov	r2, r0
 8014fc0:	460b      	mov	r3, r1
 8014fc2:	4640      	mov	r0, r8
 8014fc4:	4649      	mov	r1, r9
 8014fc6:	f7eb f95f 	bl	8000288 <__aeabi_dsub>
 8014fca:	3630      	adds	r6, #48	; 0x30
 8014fcc:	f805 6b01 	strb.w	r6, [r5], #1
 8014fd0:	4652      	mov	r2, sl
 8014fd2:	465b      	mov	r3, fp
 8014fd4:	4680      	mov	r8, r0
 8014fd6:	4689      	mov	r9, r1
 8014fd8:	f7eb fd80 	bl	8000adc <__aeabi_dcmplt>
 8014fdc:	2800      	cmp	r0, #0
 8014fde:	d163      	bne.n	80150a8 <_dtoa_r+0x608>
 8014fe0:	4642      	mov	r2, r8
 8014fe2:	464b      	mov	r3, r9
 8014fe4:	4936      	ldr	r1, [pc, #216]	; (80150c0 <_dtoa_r+0x620>)
 8014fe6:	2000      	movs	r0, #0
 8014fe8:	f7eb f94e 	bl	8000288 <__aeabi_dsub>
 8014fec:	4652      	mov	r2, sl
 8014fee:	465b      	mov	r3, fp
 8014ff0:	f7eb fd74 	bl	8000adc <__aeabi_dcmplt>
 8014ff4:	2800      	cmp	r0, #0
 8014ff6:	f040 80b5 	bne.w	8015164 <_dtoa_r+0x6c4>
 8014ffa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014ffc:	429d      	cmp	r5, r3
 8014ffe:	d081      	beq.n	8014f04 <_dtoa_r+0x464>
 8015000:	4b30      	ldr	r3, [pc, #192]	; (80150c4 <_dtoa_r+0x624>)
 8015002:	2200      	movs	r2, #0
 8015004:	4650      	mov	r0, sl
 8015006:	4659      	mov	r1, fp
 8015008:	f7eb faf6 	bl	80005f8 <__aeabi_dmul>
 801500c:	4b2d      	ldr	r3, [pc, #180]	; (80150c4 <_dtoa_r+0x624>)
 801500e:	4682      	mov	sl, r0
 8015010:	468b      	mov	fp, r1
 8015012:	4640      	mov	r0, r8
 8015014:	4649      	mov	r1, r9
 8015016:	2200      	movs	r2, #0
 8015018:	f7eb faee 	bl	80005f8 <__aeabi_dmul>
 801501c:	4680      	mov	r8, r0
 801501e:	4689      	mov	r9, r1
 8015020:	e7c6      	b.n	8014fb0 <_dtoa_r+0x510>
 8015022:	4650      	mov	r0, sl
 8015024:	4659      	mov	r1, fp
 8015026:	f7eb fae7 	bl	80005f8 <__aeabi_dmul>
 801502a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801502c:	9d01      	ldr	r5, [sp, #4]
 801502e:	930f      	str	r3, [sp, #60]	; 0x3c
 8015030:	4682      	mov	sl, r0
 8015032:	468b      	mov	fp, r1
 8015034:	4649      	mov	r1, r9
 8015036:	4640      	mov	r0, r8
 8015038:	f7eb fd8e 	bl	8000b58 <__aeabi_d2iz>
 801503c:	4606      	mov	r6, r0
 801503e:	f7eb fa71 	bl	8000524 <__aeabi_i2d>
 8015042:	3630      	adds	r6, #48	; 0x30
 8015044:	4602      	mov	r2, r0
 8015046:	460b      	mov	r3, r1
 8015048:	4640      	mov	r0, r8
 801504a:	4649      	mov	r1, r9
 801504c:	f7eb f91c 	bl	8000288 <__aeabi_dsub>
 8015050:	f805 6b01 	strb.w	r6, [r5], #1
 8015054:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015056:	429d      	cmp	r5, r3
 8015058:	4680      	mov	r8, r0
 801505a:	4689      	mov	r9, r1
 801505c:	f04f 0200 	mov.w	r2, #0
 8015060:	d124      	bne.n	80150ac <_dtoa_r+0x60c>
 8015062:	4b1b      	ldr	r3, [pc, #108]	; (80150d0 <_dtoa_r+0x630>)
 8015064:	4650      	mov	r0, sl
 8015066:	4659      	mov	r1, fp
 8015068:	f7eb f910 	bl	800028c <__adddf3>
 801506c:	4602      	mov	r2, r0
 801506e:	460b      	mov	r3, r1
 8015070:	4640      	mov	r0, r8
 8015072:	4649      	mov	r1, r9
 8015074:	f7eb fd50 	bl	8000b18 <__aeabi_dcmpgt>
 8015078:	2800      	cmp	r0, #0
 801507a:	d173      	bne.n	8015164 <_dtoa_r+0x6c4>
 801507c:	4652      	mov	r2, sl
 801507e:	465b      	mov	r3, fp
 8015080:	4913      	ldr	r1, [pc, #76]	; (80150d0 <_dtoa_r+0x630>)
 8015082:	2000      	movs	r0, #0
 8015084:	f7eb f900 	bl	8000288 <__aeabi_dsub>
 8015088:	4602      	mov	r2, r0
 801508a:	460b      	mov	r3, r1
 801508c:	4640      	mov	r0, r8
 801508e:	4649      	mov	r1, r9
 8015090:	f7eb fd24 	bl	8000adc <__aeabi_dcmplt>
 8015094:	2800      	cmp	r0, #0
 8015096:	f43f af35 	beq.w	8014f04 <_dtoa_r+0x464>
 801509a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801509c:	1e6b      	subs	r3, r5, #1
 801509e:	930f      	str	r3, [sp, #60]	; 0x3c
 80150a0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80150a4:	2b30      	cmp	r3, #48	; 0x30
 80150a6:	d0f8      	beq.n	801509a <_dtoa_r+0x5fa>
 80150a8:	9700      	str	r7, [sp, #0]
 80150aa:	e049      	b.n	8015140 <_dtoa_r+0x6a0>
 80150ac:	4b05      	ldr	r3, [pc, #20]	; (80150c4 <_dtoa_r+0x624>)
 80150ae:	f7eb faa3 	bl	80005f8 <__aeabi_dmul>
 80150b2:	4680      	mov	r8, r0
 80150b4:	4689      	mov	r9, r1
 80150b6:	e7bd      	b.n	8015034 <_dtoa_r+0x594>
 80150b8:	080190f0 	.word	0x080190f0
 80150bc:	080190c8 	.word	0x080190c8
 80150c0:	3ff00000 	.word	0x3ff00000
 80150c4:	40240000 	.word	0x40240000
 80150c8:	401c0000 	.word	0x401c0000
 80150cc:	40140000 	.word	0x40140000
 80150d0:	3fe00000 	.word	0x3fe00000
 80150d4:	9d01      	ldr	r5, [sp, #4]
 80150d6:	4656      	mov	r6, sl
 80150d8:	465f      	mov	r7, fp
 80150da:	4642      	mov	r2, r8
 80150dc:	464b      	mov	r3, r9
 80150de:	4630      	mov	r0, r6
 80150e0:	4639      	mov	r1, r7
 80150e2:	f7eb fbb3 	bl	800084c <__aeabi_ddiv>
 80150e6:	f7eb fd37 	bl	8000b58 <__aeabi_d2iz>
 80150ea:	4682      	mov	sl, r0
 80150ec:	f7eb fa1a 	bl	8000524 <__aeabi_i2d>
 80150f0:	4642      	mov	r2, r8
 80150f2:	464b      	mov	r3, r9
 80150f4:	f7eb fa80 	bl	80005f8 <__aeabi_dmul>
 80150f8:	4602      	mov	r2, r0
 80150fa:	460b      	mov	r3, r1
 80150fc:	4630      	mov	r0, r6
 80150fe:	4639      	mov	r1, r7
 8015100:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8015104:	f7eb f8c0 	bl	8000288 <__aeabi_dsub>
 8015108:	f805 6b01 	strb.w	r6, [r5], #1
 801510c:	9e01      	ldr	r6, [sp, #4]
 801510e:	9f03      	ldr	r7, [sp, #12]
 8015110:	1bae      	subs	r6, r5, r6
 8015112:	42b7      	cmp	r7, r6
 8015114:	4602      	mov	r2, r0
 8015116:	460b      	mov	r3, r1
 8015118:	d135      	bne.n	8015186 <_dtoa_r+0x6e6>
 801511a:	f7eb f8b7 	bl	800028c <__adddf3>
 801511e:	4642      	mov	r2, r8
 8015120:	464b      	mov	r3, r9
 8015122:	4606      	mov	r6, r0
 8015124:	460f      	mov	r7, r1
 8015126:	f7eb fcf7 	bl	8000b18 <__aeabi_dcmpgt>
 801512a:	b9d0      	cbnz	r0, 8015162 <_dtoa_r+0x6c2>
 801512c:	4642      	mov	r2, r8
 801512e:	464b      	mov	r3, r9
 8015130:	4630      	mov	r0, r6
 8015132:	4639      	mov	r1, r7
 8015134:	f7eb fcc8 	bl	8000ac8 <__aeabi_dcmpeq>
 8015138:	b110      	cbz	r0, 8015140 <_dtoa_r+0x6a0>
 801513a:	f01a 0f01 	tst.w	sl, #1
 801513e:	d110      	bne.n	8015162 <_dtoa_r+0x6c2>
 8015140:	4620      	mov	r0, r4
 8015142:	ee18 1a10 	vmov	r1, s16
 8015146:	f000 ff47 	bl	8015fd8 <_Bfree>
 801514a:	2300      	movs	r3, #0
 801514c:	9800      	ldr	r0, [sp, #0]
 801514e:	702b      	strb	r3, [r5, #0]
 8015150:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015152:	3001      	adds	r0, #1
 8015154:	6018      	str	r0, [r3, #0]
 8015156:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015158:	2b00      	cmp	r3, #0
 801515a:	f43f acf1 	beq.w	8014b40 <_dtoa_r+0xa0>
 801515e:	601d      	str	r5, [r3, #0]
 8015160:	e4ee      	b.n	8014b40 <_dtoa_r+0xa0>
 8015162:	9f00      	ldr	r7, [sp, #0]
 8015164:	462b      	mov	r3, r5
 8015166:	461d      	mov	r5, r3
 8015168:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801516c:	2a39      	cmp	r2, #57	; 0x39
 801516e:	d106      	bne.n	801517e <_dtoa_r+0x6de>
 8015170:	9a01      	ldr	r2, [sp, #4]
 8015172:	429a      	cmp	r2, r3
 8015174:	d1f7      	bne.n	8015166 <_dtoa_r+0x6c6>
 8015176:	9901      	ldr	r1, [sp, #4]
 8015178:	2230      	movs	r2, #48	; 0x30
 801517a:	3701      	adds	r7, #1
 801517c:	700a      	strb	r2, [r1, #0]
 801517e:	781a      	ldrb	r2, [r3, #0]
 8015180:	3201      	adds	r2, #1
 8015182:	701a      	strb	r2, [r3, #0]
 8015184:	e790      	b.n	80150a8 <_dtoa_r+0x608>
 8015186:	4ba6      	ldr	r3, [pc, #664]	; (8015420 <_dtoa_r+0x980>)
 8015188:	2200      	movs	r2, #0
 801518a:	f7eb fa35 	bl	80005f8 <__aeabi_dmul>
 801518e:	2200      	movs	r2, #0
 8015190:	2300      	movs	r3, #0
 8015192:	4606      	mov	r6, r0
 8015194:	460f      	mov	r7, r1
 8015196:	f7eb fc97 	bl	8000ac8 <__aeabi_dcmpeq>
 801519a:	2800      	cmp	r0, #0
 801519c:	d09d      	beq.n	80150da <_dtoa_r+0x63a>
 801519e:	e7cf      	b.n	8015140 <_dtoa_r+0x6a0>
 80151a0:	9a08      	ldr	r2, [sp, #32]
 80151a2:	2a00      	cmp	r2, #0
 80151a4:	f000 80d7 	beq.w	8015356 <_dtoa_r+0x8b6>
 80151a8:	9a06      	ldr	r2, [sp, #24]
 80151aa:	2a01      	cmp	r2, #1
 80151ac:	f300 80ba 	bgt.w	8015324 <_dtoa_r+0x884>
 80151b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80151b2:	2a00      	cmp	r2, #0
 80151b4:	f000 80b2 	beq.w	801531c <_dtoa_r+0x87c>
 80151b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80151bc:	9e07      	ldr	r6, [sp, #28]
 80151be:	9d04      	ldr	r5, [sp, #16]
 80151c0:	9a04      	ldr	r2, [sp, #16]
 80151c2:	441a      	add	r2, r3
 80151c4:	9204      	str	r2, [sp, #16]
 80151c6:	9a05      	ldr	r2, [sp, #20]
 80151c8:	2101      	movs	r1, #1
 80151ca:	441a      	add	r2, r3
 80151cc:	4620      	mov	r0, r4
 80151ce:	9205      	str	r2, [sp, #20]
 80151d0:	f001 f804 	bl	80161dc <__i2b>
 80151d4:	4607      	mov	r7, r0
 80151d6:	2d00      	cmp	r5, #0
 80151d8:	dd0c      	ble.n	80151f4 <_dtoa_r+0x754>
 80151da:	9b05      	ldr	r3, [sp, #20]
 80151dc:	2b00      	cmp	r3, #0
 80151de:	dd09      	ble.n	80151f4 <_dtoa_r+0x754>
 80151e0:	42ab      	cmp	r3, r5
 80151e2:	9a04      	ldr	r2, [sp, #16]
 80151e4:	bfa8      	it	ge
 80151e6:	462b      	movge	r3, r5
 80151e8:	1ad2      	subs	r2, r2, r3
 80151ea:	9204      	str	r2, [sp, #16]
 80151ec:	9a05      	ldr	r2, [sp, #20]
 80151ee:	1aed      	subs	r5, r5, r3
 80151f0:	1ad3      	subs	r3, r2, r3
 80151f2:	9305      	str	r3, [sp, #20]
 80151f4:	9b07      	ldr	r3, [sp, #28]
 80151f6:	b31b      	cbz	r3, 8015240 <_dtoa_r+0x7a0>
 80151f8:	9b08      	ldr	r3, [sp, #32]
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	f000 80af 	beq.w	801535e <_dtoa_r+0x8be>
 8015200:	2e00      	cmp	r6, #0
 8015202:	dd13      	ble.n	801522c <_dtoa_r+0x78c>
 8015204:	4639      	mov	r1, r7
 8015206:	4632      	mov	r2, r6
 8015208:	4620      	mov	r0, r4
 801520a:	f001 f8a7 	bl	801635c <__pow5mult>
 801520e:	ee18 2a10 	vmov	r2, s16
 8015212:	4601      	mov	r1, r0
 8015214:	4607      	mov	r7, r0
 8015216:	4620      	mov	r0, r4
 8015218:	f000 fff6 	bl	8016208 <__multiply>
 801521c:	ee18 1a10 	vmov	r1, s16
 8015220:	4680      	mov	r8, r0
 8015222:	4620      	mov	r0, r4
 8015224:	f000 fed8 	bl	8015fd8 <_Bfree>
 8015228:	ee08 8a10 	vmov	s16, r8
 801522c:	9b07      	ldr	r3, [sp, #28]
 801522e:	1b9a      	subs	r2, r3, r6
 8015230:	d006      	beq.n	8015240 <_dtoa_r+0x7a0>
 8015232:	ee18 1a10 	vmov	r1, s16
 8015236:	4620      	mov	r0, r4
 8015238:	f001 f890 	bl	801635c <__pow5mult>
 801523c:	ee08 0a10 	vmov	s16, r0
 8015240:	2101      	movs	r1, #1
 8015242:	4620      	mov	r0, r4
 8015244:	f000 ffca 	bl	80161dc <__i2b>
 8015248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801524a:	2b00      	cmp	r3, #0
 801524c:	4606      	mov	r6, r0
 801524e:	f340 8088 	ble.w	8015362 <_dtoa_r+0x8c2>
 8015252:	461a      	mov	r2, r3
 8015254:	4601      	mov	r1, r0
 8015256:	4620      	mov	r0, r4
 8015258:	f001 f880 	bl	801635c <__pow5mult>
 801525c:	9b06      	ldr	r3, [sp, #24]
 801525e:	2b01      	cmp	r3, #1
 8015260:	4606      	mov	r6, r0
 8015262:	f340 8081 	ble.w	8015368 <_dtoa_r+0x8c8>
 8015266:	f04f 0800 	mov.w	r8, #0
 801526a:	6933      	ldr	r3, [r6, #16]
 801526c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015270:	6918      	ldr	r0, [r3, #16]
 8015272:	f000 ff63 	bl	801613c <__hi0bits>
 8015276:	f1c0 0020 	rsb	r0, r0, #32
 801527a:	9b05      	ldr	r3, [sp, #20]
 801527c:	4418      	add	r0, r3
 801527e:	f010 001f 	ands.w	r0, r0, #31
 8015282:	f000 8092 	beq.w	80153aa <_dtoa_r+0x90a>
 8015286:	f1c0 0320 	rsb	r3, r0, #32
 801528a:	2b04      	cmp	r3, #4
 801528c:	f340 808a 	ble.w	80153a4 <_dtoa_r+0x904>
 8015290:	f1c0 001c 	rsb	r0, r0, #28
 8015294:	9b04      	ldr	r3, [sp, #16]
 8015296:	4403      	add	r3, r0
 8015298:	9304      	str	r3, [sp, #16]
 801529a:	9b05      	ldr	r3, [sp, #20]
 801529c:	4403      	add	r3, r0
 801529e:	4405      	add	r5, r0
 80152a0:	9305      	str	r3, [sp, #20]
 80152a2:	9b04      	ldr	r3, [sp, #16]
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	dd07      	ble.n	80152b8 <_dtoa_r+0x818>
 80152a8:	ee18 1a10 	vmov	r1, s16
 80152ac:	461a      	mov	r2, r3
 80152ae:	4620      	mov	r0, r4
 80152b0:	f001 f8ae 	bl	8016410 <__lshift>
 80152b4:	ee08 0a10 	vmov	s16, r0
 80152b8:	9b05      	ldr	r3, [sp, #20]
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	dd05      	ble.n	80152ca <_dtoa_r+0x82a>
 80152be:	4631      	mov	r1, r6
 80152c0:	461a      	mov	r2, r3
 80152c2:	4620      	mov	r0, r4
 80152c4:	f001 f8a4 	bl	8016410 <__lshift>
 80152c8:	4606      	mov	r6, r0
 80152ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d06e      	beq.n	80153ae <_dtoa_r+0x90e>
 80152d0:	ee18 0a10 	vmov	r0, s16
 80152d4:	4631      	mov	r1, r6
 80152d6:	f001 f90b 	bl	80164f0 <__mcmp>
 80152da:	2800      	cmp	r0, #0
 80152dc:	da67      	bge.n	80153ae <_dtoa_r+0x90e>
 80152de:	9b00      	ldr	r3, [sp, #0]
 80152e0:	3b01      	subs	r3, #1
 80152e2:	ee18 1a10 	vmov	r1, s16
 80152e6:	9300      	str	r3, [sp, #0]
 80152e8:	220a      	movs	r2, #10
 80152ea:	2300      	movs	r3, #0
 80152ec:	4620      	mov	r0, r4
 80152ee:	f000 fe95 	bl	801601c <__multadd>
 80152f2:	9b08      	ldr	r3, [sp, #32]
 80152f4:	ee08 0a10 	vmov	s16, r0
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	f000 81b1 	beq.w	8015660 <_dtoa_r+0xbc0>
 80152fe:	2300      	movs	r3, #0
 8015300:	4639      	mov	r1, r7
 8015302:	220a      	movs	r2, #10
 8015304:	4620      	mov	r0, r4
 8015306:	f000 fe89 	bl	801601c <__multadd>
 801530a:	9b02      	ldr	r3, [sp, #8]
 801530c:	2b00      	cmp	r3, #0
 801530e:	4607      	mov	r7, r0
 8015310:	f300 808e 	bgt.w	8015430 <_dtoa_r+0x990>
 8015314:	9b06      	ldr	r3, [sp, #24]
 8015316:	2b02      	cmp	r3, #2
 8015318:	dc51      	bgt.n	80153be <_dtoa_r+0x91e>
 801531a:	e089      	b.n	8015430 <_dtoa_r+0x990>
 801531c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801531e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015322:	e74b      	b.n	80151bc <_dtoa_r+0x71c>
 8015324:	9b03      	ldr	r3, [sp, #12]
 8015326:	1e5e      	subs	r6, r3, #1
 8015328:	9b07      	ldr	r3, [sp, #28]
 801532a:	42b3      	cmp	r3, r6
 801532c:	bfbf      	itttt	lt
 801532e:	9b07      	ldrlt	r3, [sp, #28]
 8015330:	9607      	strlt	r6, [sp, #28]
 8015332:	1af2      	sublt	r2, r6, r3
 8015334:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8015336:	bfb6      	itet	lt
 8015338:	189b      	addlt	r3, r3, r2
 801533a:	1b9e      	subge	r6, r3, r6
 801533c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801533e:	9b03      	ldr	r3, [sp, #12]
 8015340:	bfb8      	it	lt
 8015342:	2600      	movlt	r6, #0
 8015344:	2b00      	cmp	r3, #0
 8015346:	bfb7      	itett	lt
 8015348:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801534c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8015350:	1a9d      	sublt	r5, r3, r2
 8015352:	2300      	movlt	r3, #0
 8015354:	e734      	b.n	80151c0 <_dtoa_r+0x720>
 8015356:	9e07      	ldr	r6, [sp, #28]
 8015358:	9d04      	ldr	r5, [sp, #16]
 801535a:	9f08      	ldr	r7, [sp, #32]
 801535c:	e73b      	b.n	80151d6 <_dtoa_r+0x736>
 801535e:	9a07      	ldr	r2, [sp, #28]
 8015360:	e767      	b.n	8015232 <_dtoa_r+0x792>
 8015362:	9b06      	ldr	r3, [sp, #24]
 8015364:	2b01      	cmp	r3, #1
 8015366:	dc18      	bgt.n	801539a <_dtoa_r+0x8fa>
 8015368:	f1ba 0f00 	cmp.w	sl, #0
 801536c:	d115      	bne.n	801539a <_dtoa_r+0x8fa>
 801536e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015372:	b993      	cbnz	r3, 801539a <_dtoa_r+0x8fa>
 8015374:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015378:	0d1b      	lsrs	r3, r3, #20
 801537a:	051b      	lsls	r3, r3, #20
 801537c:	b183      	cbz	r3, 80153a0 <_dtoa_r+0x900>
 801537e:	9b04      	ldr	r3, [sp, #16]
 8015380:	3301      	adds	r3, #1
 8015382:	9304      	str	r3, [sp, #16]
 8015384:	9b05      	ldr	r3, [sp, #20]
 8015386:	3301      	adds	r3, #1
 8015388:	9305      	str	r3, [sp, #20]
 801538a:	f04f 0801 	mov.w	r8, #1
 801538e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015390:	2b00      	cmp	r3, #0
 8015392:	f47f af6a 	bne.w	801526a <_dtoa_r+0x7ca>
 8015396:	2001      	movs	r0, #1
 8015398:	e76f      	b.n	801527a <_dtoa_r+0x7da>
 801539a:	f04f 0800 	mov.w	r8, #0
 801539e:	e7f6      	b.n	801538e <_dtoa_r+0x8ee>
 80153a0:	4698      	mov	r8, r3
 80153a2:	e7f4      	b.n	801538e <_dtoa_r+0x8ee>
 80153a4:	f43f af7d 	beq.w	80152a2 <_dtoa_r+0x802>
 80153a8:	4618      	mov	r0, r3
 80153aa:	301c      	adds	r0, #28
 80153ac:	e772      	b.n	8015294 <_dtoa_r+0x7f4>
 80153ae:	9b03      	ldr	r3, [sp, #12]
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	dc37      	bgt.n	8015424 <_dtoa_r+0x984>
 80153b4:	9b06      	ldr	r3, [sp, #24]
 80153b6:	2b02      	cmp	r3, #2
 80153b8:	dd34      	ble.n	8015424 <_dtoa_r+0x984>
 80153ba:	9b03      	ldr	r3, [sp, #12]
 80153bc:	9302      	str	r3, [sp, #8]
 80153be:	9b02      	ldr	r3, [sp, #8]
 80153c0:	b96b      	cbnz	r3, 80153de <_dtoa_r+0x93e>
 80153c2:	4631      	mov	r1, r6
 80153c4:	2205      	movs	r2, #5
 80153c6:	4620      	mov	r0, r4
 80153c8:	f000 fe28 	bl	801601c <__multadd>
 80153cc:	4601      	mov	r1, r0
 80153ce:	4606      	mov	r6, r0
 80153d0:	ee18 0a10 	vmov	r0, s16
 80153d4:	f001 f88c 	bl	80164f0 <__mcmp>
 80153d8:	2800      	cmp	r0, #0
 80153da:	f73f adbb 	bgt.w	8014f54 <_dtoa_r+0x4b4>
 80153de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153e0:	9d01      	ldr	r5, [sp, #4]
 80153e2:	43db      	mvns	r3, r3
 80153e4:	9300      	str	r3, [sp, #0]
 80153e6:	f04f 0800 	mov.w	r8, #0
 80153ea:	4631      	mov	r1, r6
 80153ec:	4620      	mov	r0, r4
 80153ee:	f000 fdf3 	bl	8015fd8 <_Bfree>
 80153f2:	2f00      	cmp	r7, #0
 80153f4:	f43f aea4 	beq.w	8015140 <_dtoa_r+0x6a0>
 80153f8:	f1b8 0f00 	cmp.w	r8, #0
 80153fc:	d005      	beq.n	801540a <_dtoa_r+0x96a>
 80153fe:	45b8      	cmp	r8, r7
 8015400:	d003      	beq.n	801540a <_dtoa_r+0x96a>
 8015402:	4641      	mov	r1, r8
 8015404:	4620      	mov	r0, r4
 8015406:	f000 fde7 	bl	8015fd8 <_Bfree>
 801540a:	4639      	mov	r1, r7
 801540c:	4620      	mov	r0, r4
 801540e:	f000 fde3 	bl	8015fd8 <_Bfree>
 8015412:	e695      	b.n	8015140 <_dtoa_r+0x6a0>
 8015414:	2600      	movs	r6, #0
 8015416:	4637      	mov	r7, r6
 8015418:	e7e1      	b.n	80153de <_dtoa_r+0x93e>
 801541a:	9700      	str	r7, [sp, #0]
 801541c:	4637      	mov	r7, r6
 801541e:	e599      	b.n	8014f54 <_dtoa_r+0x4b4>
 8015420:	40240000 	.word	0x40240000
 8015424:	9b08      	ldr	r3, [sp, #32]
 8015426:	2b00      	cmp	r3, #0
 8015428:	f000 80ca 	beq.w	80155c0 <_dtoa_r+0xb20>
 801542c:	9b03      	ldr	r3, [sp, #12]
 801542e:	9302      	str	r3, [sp, #8]
 8015430:	2d00      	cmp	r5, #0
 8015432:	dd05      	ble.n	8015440 <_dtoa_r+0x9a0>
 8015434:	4639      	mov	r1, r7
 8015436:	462a      	mov	r2, r5
 8015438:	4620      	mov	r0, r4
 801543a:	f000 ffe9 	bl	8016410 <__lshift>
 801543e:	4607      	mov	r7, r0
 8015440:	f1b8 0f00 	cmp.w	r8, #0
 8015444:	d05b      	beq.n	80154fe <_dtoa_r+0xa5e>
 8015446:	6879      	ldr	r1, [r7, #4]
 8015448:	4620      	mov	r0, r4
 801544a:	f000 fd85 	bl	8015f58 <_Balloc>
 801544e:	4605      	mov	r5, r0
 8015450:	b928      	cbnz	r0, 801545e <_dtoa_r+0x9be>
 8015452:	4b87      	ldr	r3, [pc, #540]	; (8015670 <_dtoa_r+0xbd0>)
 8015454:	4602      	mov	r2, r0
 8015456:	f240 21ea 	movw	r1, #746	; 0x2ea
 801545a:	f7ff bb3b 	b.w	8014ad4 <_dtoa_r+0x34>
 801545e:	693a      	ldr	r2, [r7, #16]
 8015460:	3202      	adds	r2, #2
 8015462:	0092      	lsls	r2, r2, #2
 8015464:	f107 010c 	add.w	r1, r7, #12
 8015468:	300c      	adds	r0, #12
 801546a:	f7fd fd4a 	bl	8012f02 <memcpy>
 801546e:	2201      	movs	r2, #1
 8015470:	4629      	mov	r1, r5
 8015472:	4620      	mov	r0, r4
 8015474:	f000 ffcc 	bl	8016410 <__lshift>
 8015478:	9b01      	ldr	r3, [sp, #4]
 801547a:	f103 0901 	add.w	r9, r3, #1
 801547e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8015482:	4413      	add	r3, r2
 8015484:	9305      	str	r3, [sp, #20]
 8015486:	f00a 0301 	and.w	r3, sl, #1
 801548a:	46b8      	mov	r8, r7
 801548c:	9304      	str	r3, [sp, #16]
 801548e:	4607      	mov	r7, r0
 8015490:	4631      	mov	r1, r6
 8015492:	ee18 0a10 	vmov	r0, s16
 8015496:	f7ff fa75 	bl	8014984 <quorem>
 801549a:	4641      	mov	r1, r8
 801549c:	9002      	str	r0, [sp, #8]
 801549e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80154a2:	ee18 0a10 	vmov	r0, s16
 80154a6:	f001 f823 	bl	80164f0 <__mcmp>
 80154aa:	463a      	mov	r2, r7
 80154ac:	9003      	str	r0, [sp, #12]
 80154ae:	4631      	mov	r1, r6
 80154b0:	4620      	mov	r0, r4
 80154b2:	f001 f839 	bl	8016528 <__mdiff>
 80154b6:	68c2      	ldr	r2, [r0, #12]
 80154b8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80154bc:	4605      	mov	r5, r0
 80154be:	bb02      	cbnz	r2, 8015502 <_dtoa_r+0xa62>
 80154c0:	4601      	mov	r1, r0
 80154c2:	ee18 0a10 	vmov	r0, s16
 80154c6:	f001 f813 	bl	80164f0 <__mcmp>
 80154ca:	4602      	mov	r2, r0
 80154cc:	4629      	mov	r1, r5
 80154ce:	4620      	mov	r0, r4
 80154d0:	9207      	str	r2, [sp, #28]
 80154d2:	f000 fd81 	bl	8015fd8 <_Bfree>
 80154d6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80154da:	ea43 0102 	orr.w	r1, r3, r2
 80154de:	9b04      	ldr	r3, [sp, #16]
 80154e0:	430b      	orrs	r3, r1
 80154e2:	464d      	mov	r5, r9
 80154e4:	d10f      	bne.n	8015506 <_dtoa_r+0xa66>
 80154e6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80154ea:	d02a      	beq.n	8015542 <_dtoa_r+0xaa2>
 80154ec:	9b03      	ldr	r3, [sp, #12]
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	dd02      	ble.n	80154f8 <_dtoa_r+0xa58>
 80154f2:	9b02      	ldr	r3, [sp, #8]
 80154f4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80154f8:	f88b a000 	strb.w	sl, [fp]
 80154fc:	e775      	b.n	80153ea <_dtoa_r+0x94a>
 80154fe:	4638      	mov	r0, r7
 8015500:	e7ba      	b.n	8015478 <_dtoa_r+0x9d8>
 8015502:	2201      	movs	r2, #1
 8015504:	e7e2      	b.n	80154cc <_dtoa_r+0xa2c>
 8015506:	9b03      	ldr	r3, [sp, #12]
 8015508:	2b00      	cmp	r3, #0
 801550a:	db04      	blt.n	8015516 <_dtoa_r+0xa76>
 801550c:	9906      	ldr	r1, [sp, #24]
 801550e:	430b      	orrs	r3, r1
 8015510:	9904      	ldr	r1, [sp, #16]
 8015512:	430b      	orrs	r3, r1
 8015514:	d122      	bne.n	801555c <_dtoa_r+0xabc>
 8015516:	2a00      	cmp	r2, #0
 8015518:	ddee      	ble.n	80154f8 <_dtoa_r+0xa58>
 801551a:	ee18 1a10 	vmov	r1, s16
 801551e:	2201      	movs	r2, #1
 8015520:	4620      	mov	r0, r4
 8015522:	f000 ff75 	bl	8016410 <__lshift>
 8015526:	4631      	mov	r1, r6
 8015528:	ee08 0a10 	vmov	s16, r0
 801552c:	f000 ffe0 	bl	80164f0 <__mcmp>
 8015530:	2800      	cmp	r0, #0
 8015532:	dc03      	bgt.n	801553c <_dtoa_r+0xa9c>
 8015534:	d1e0      	bne.n	80154f8 <_dtoa_r+0xa58>
 8015536:	f01a 0f01 	tst.w	sl, #1
 801553a:	d0dd      	beq.n	80154f8 <_dtoa_r+0xa58>
 801553c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015540:	d1d7      	bne.n	80154f2 <_dtoa_r+0xa52>
 8015542:	2339      	movs	r3, #57	; 0x39
 8015544:	f88b 3000 	strb.w	r3, [fp]
 8015548:	462b      	mov	r3, r5
 801554a:	461d      	mov	r5, r3
 801554c:	3b01      	subs	r3, #1
 801554e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8015552:	2a39      	cmp	r2, #57	; 0x39
 8015554:	d071      	beq.n	801563a <_dtoa_r+0xb9a>
 8015556:	3201      	adds	r2, #1
 8015558:	701a      	strb	r2, [r3, #0]
 801555a:	e746      	b.n	80153ea <_dtoa_r+0x94a>
 801555c:	2a00      	cmp	r2, #0
 801555e:	dd07      	ble.n	8015570 <_dtoa_r+0xad0>
 8015560:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015564:	d0ed      	beq.n	8015542 <_dtoa_r+0xaa2>
 8015566:	f10a 0301 	add.w	r3, sl, #1
 801556a:	f88b 3000 	strb.w	r3, [fp]
 801556e:	e73c      	b.n	80153ea <_dtoa_r+0x94a>
 8015570:	9b05      	ldr	r3, [sp, #20]
 8015572:	f809 ac01 	strb.w	sl, [r9, #-1]
 8015576:	4599      	cmp	r9, r3
 8015578:	d047      	beq.n	801560a <_dtoa_r+0xb6a>
 801557a:	ee18 1a10 	vmov	r1, s16
 801557e:	2300      	movs	r3, #0
 8015580:	220a      	movs	r2, #10
 8015582:	4620      	mov	r0, r4
 8015584:	f000 fd4a 	bl	801601c <__multadd>
 8015588:	45b8      	cmp	r8, r7
 801558a:	ee08 0a10 	vmov	s16, r0
 801558e:	f04f 0300 	mov.w	r3, #0
 8015592:	f04f 020a 	mov.w	r2, #10
 8015596:	4641      	mov	r1, r8
 8015598:	4620      	mov	r0, r4
 801559a:	d106      	bne.n	80155aa <_dtoa_r+0xb0a>
 801559c:	f000 fd3e 	bl	801601c <__multadd>
 80155a0:	4680      	mov	r8, r0
 80155a2:	4607      	mov	r7, r0
 80155a4:	f109 0901 	add.w	r9, r9, #1
 80155a8:	e772      	b.n	8015490 <_dtoa_r+0x9f0>
 80155aa:	f000 fd37 	bl	801601c <__multadd>
 80155ae:	4639      	mov	r1, r7
 80155b0:	4680      	mov	r8, r0
 80155b2:	2300      	movs	r3, #0
 80155b4:	220a      	movs	r2, #10
 80155b6:	4620      	mov	r0, r4
 80155b8:	f000 fd30 	bl	801601c <__multadd>
 80155bc:	4607      	mov	r7, r0
 80155be:	e7f1      	b.n	80155a4 <_dtoa_r+0xb04>
 80155c0:	9b03      	ldr	r3, [sp, #12]
 80155c2:	9302      	str	r3, [sp, #8]
 80155c4:	9d01      	ldr	r5, [sp, #4]
 80155c6:	ee18 0a10 	vmov	r0, s16
 80155ca:	4631      	mov	r1, r6
 80155cc:	f7ff f9da 	bl	8014984 <quorem>
 80155d0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80155d4:	9b01      	ldr	r3, [sp, #4]
 80155d6:	f805 ab01 	strb.w	sl, [r5], #1
 80155da:	1aea      	subs	r2, r5, r3
 80155dc:	9b02      	ldr	r3, [sp, #8]
 80155de:	4293      	cmp	r3, r2
 80155e0:	dd09      	ble.n	80155f6 <_dtoa_r+0xb56>
 80155e2:	ee18 1a10 	vmov	r1, s16
 80155e6:	2300      	movs	r3, #0
 80155e8:	220a      	movs	r2, #10
 80155ea:	4620      	mov	r0, r4
 80155ec:	f000 fd16 	bl	801601c <__multadd>
 80155f0:	ee08 0a10 	vmov	s16, r0
 80155f4:	e7e7      	b.n	80155c6 <_dtoa_r+0xb26>
 80155f6:	9b02      	ldr	r3, [sp, #8]
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	bfc8      	it	gt
 80155fc:	461d      	movgt	r5, r3
 80155fe:	9b01      	ldr	r3, [sp, #4]
 8015600:	bfd8      	it	le
 8015602:	2501      	movle	r5, #1
 8015604:	441d      	add	r5, r3
 8015606:	f04f 0800 	mov.w	r8, #0
 801560a:	ee18 1a10 	vmov	r1, s16
 801560e:	2201      	movs	r2, #1
 8015610:	4620      	mov	r0, r4
 8015612:	f000 fefd 	bl	8016410 <__lshift>
 8015616:	4631      	mov	r1, r6
 8015618:	ee08 0a10 	vmov	s16, r0
 801561c:	f000 ff68 	bl	80164f0 <__mcmp>
 8015620:	2800      	cmp	r0, #0
 8015622:	dc91      	bgt.n	8015548 <_dtoa_r+0xaa8>
 8015624:	d102      	bne.n	801562c <_dtoa_r+0xb8c>
 8015626:	f01a 0f01 	tst.w	sl, #1
 801562a:	d18d      	bne.n	8015548 <_dtoa_r+0xaa8>
 801562c:	462b      	mov	r3, r5
 801562e:	461d      	mov	r5, r3
 8015630:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015634:	2a30      	cmp	r2, #48	; 0x30
 8015636:	d0fa      	beq.n	801562e <_dtoa_r+0xb8e>
 8015638:	e6d7      	b.n	80153ea <_dtoa_r+0x94a>
 801563a:	9a01      	ldr	r2, [sp, #4]
 801563c:	429a      	cmp	r2, r3
 801563e:	d184      	bne.n	801554a <_dtoa_r+0xaaa>
 8015640:	9b00      	ldr	r3, [sp, #0]
 8015642:	3301      	adds	r3, #1
 8015644:	9300      	str	r3, [sp, #0]
 8015646:	2331      	movs	r3, #49	; 0x31
 8015648:	7013      	strb	r3, [r2, #0]
 801564a:	e6ce      	b.n	80153ea <_dtoa_r+0x94a>
 801564c:	4b09      	ldr	r3, [pc, #36]	; (8015674 <_dtoa_r+0xbd4>)
 801564e:	f7ff ba95 	b.w	8014b7c <_dtoa_r+0xdc>
 8015652:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015654:	2b00      	cmp	r3, #0
 8015656:	f47f aa6e 	bne.w	8014b36 <_dtoa_r+0x96>
 801565a:	4b07      	ldr	r3, [pc, #28]	; (8015678 <_dtoa_r+0xbd8>)
 801565c:	f7ff ba8e 	b.w	8014b7c <_dtoa_r+0xdc>
 8015660:	9b02      	ldr	r3, [sp, #8]
 8015662:	2b00      	cmp	r3, #0
 8015664:	dcae      	bgt.n	80155c4 <_dtoa_r+0xb24>
 8015666:	9b06      	ldr	r3, [sp, #24]
 8015668:	2b02      	cmp	r3, #2
 801566a:	f73f aea8 	bgt.w	80153be <_dtoa_r+0x91e>
 801566e:	e7a9      	b.n	80155c4 <_dtoa_r+0xb24>
 8015670:	08018fdf 	.word	0x08018fdf
 8015674:	08018ee8 	.word	0x08018ee8
 8015678:	08018f60 	.word	0x08018f60

0801567c <__sflush_r>:
 801567c:	898a      	ldrh	r2, [r1, #12]
 801567e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015682:	4605      	mov	r5, r0
 8015684:	0710      	lsls	r0, r2, #28
 8015686:	460c      	mov	r4, r1
 8015688:	d458      	bmi.n	801573c <__sflush_r+0xc0>
 801568a:	684b      	ldr	r3, [r1, #4]
 801568c:	2b00      	cmp	r3, #0
 801568e:	dc05      	bgt.n	801569c <__sflush_r+0x20>
 8015690:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015692:	2b00      	cmp	r3, #0
 8015694:	dc02      	bgt.n	801569c <__sflush_r+0x20>
 8015696:	2000      	movs	r0, #0
 8015698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801569c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801569e:	2e00      	cmp	r6, #0
 80156a0:	d0f9      	beq.n	8015696 <__sflush_r+0x1a>
 80156a2:	2300      	movs	r3, #0
 80156a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80156a8:	682f      	ldr	r7, [r5, #0]
 80156aa:	602b      	str	r3, [r5, #0]
 80156ac:	d032      	beq.n	8015714 <__sflush_r+0x98>
 80156ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80156b0:	89a3      	ldrh	r3, [r4, #12]
 80156b2:	075a      	lsls	r2, r3, #29
 80156b4:	d505      	bpl.n	80156c2 <__sflush_r+0x46>
 80156b6:	6863      	ldr	r3, [r4, #4]
 80156b8:	1ac0      	subs	r0, r0, r3
 80156ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80156bc:	b10b      	cbz	r3, 80156c2 <__sflush_r+0x46>
 80156be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80156c0:	1ac0      	subs	r0, r0, r3
 80156c2:	2300      	movs	r3, #0
 80156c4:	4602      	mov	r2, r0
 80156c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80156c8:	6a21      	ldr	r1, [r4, #32]
 80156ca:	4628      	mov	r0, r5
 80156cc:	47b0      	blx	r6
 80156ce:	1c43      	adds	r3, r0, #1
 80156d0:	89a3      	ldrh	r3, [r4, #12]
 80156d2:	d106      	bne.n	80156e2 <__sflush_r+0x66>
 80156d4:	6829      	ldr	r1, [r5, #0]
 80156d6:	291d      	cmp	r1, #29
 80156d8:	d82c      	bhi.n	8015734 <__sflush_r+0xb8>
 80156da:	4a2a      	ldr	r2, [pc, #168]	; (8015784 <__sflush_r+0x108>)
 80156dc:	40ca      	lsrs	r2, r1
 80156de:	07d6      	lsls	r6, r2, #31
 80156e0:	d528      	bpl.n	8015734 <__sflush_r+0xb8>
 80156e2:	2200      	movs	r2, #0
 80156e4:	6062      	str	r2, [r4, #4]
 80156e6:	04d9      	lsls	r1, r3, #19
 80156e8:	6922      	ldr	r2, [r4, #16]
 80156ea:	6022      	str	r2, [r4, #0]
 80156ec:	d504      	bpl.n	80156f8 <__sflush_r+0x7c>
 80156ee:	1c42      	adds	r2, r0, #1
 80156f0:	d101      	bne.n	80156f6 <__sflush_r+0x7a>
 80156f2:	682b      	ldr	r3, [r5, #0]
 80156f4:	b903      	cbnz	r3, 80156f8 <__sflush_r+0x7c>
 80156f6:	6560      	str	r0, [r4, #84]	; 0x54
 80156f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80156fa:	602f      	str	r7, [r5, #0]
 80156fc:	2900      	cmp	r1, #0
 80156fe:	d0ca      	beq.n	8015696 <__sflush_r+0x1a>
 8015700:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015704:	4299      	cmp	r1, r3
 8015706:	d002      	beq.n	801570e <__sflush_r+0x92>
 8015708:	4628      	mov	r0, r5
 801570a:	f001 f8fd 	bl	8016908 <_free_r>
 801570e:	2000      	movs	r0, #0
 8015710:	6360      	str	r0, [r4, #52]	; 0x34
 8015712:	e7c1      	b.n	8015698 <__sflush_r+0x1c>
 8015714:	6a21      	ldr	r1, [r4, #32]
 8015716:	2301      	movs	r3, #1
 8015718:	4628      	mov	r0, r5
 801571a:	47b0      	blx	r6
 801571c:	1c41      	adds	r1, r0, #1
 801571e:	d1c7      	bne.n	80156b0 <__sflush_r+0x34>
 8015720:	682b      	ldr	r3, [r5, #0]
 8015722:	2b00      	cmp	r3, #0
 8015724:	d0c4      	beq.n	80156b0 <__sflush_r+0x34>
 8015726:	2b1d      	cmp	r3, #29
 8015728:	d001      	beq.n	801572e <__sflush_r+0xb2>
 801572a:	2b16      	cmp	r3, #22
 801572c:	d101      	bne.n	8015732 <__sflush_r+0xb6>
 801572e:	602f      	str	r7, [r5, #0]
 8015730:	e7b1      	b.n	8015696 <__sflush_r+0x1a>
 8015732:	89a3      	ldrh	r3, [r4, #12]
 8015734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015738:	81a3      	strh	r3, [r4, #12]
 801573a:	e7ad      	b.n	8015698 <__sflush_r+0x1c>
 801573c:	690f      	ldr	r7, [r1, #16]
 801573e:	2f00      	cmp	r7, #0
 8015740:	d0a9      	beq.n	8015696 <__sflush_r+0x1a>
 8015742:	0793      	lsls	r3, r2, #30
 8015744:	680e      	ldr	r6, [r1, #0]
 8015746:	bf08      	it	eq
 8015748:	694b      	ldreq	r3, [r1, #20]
 801574a:	600f      	str	r7, [r1, #0]
 801574c:	bf18      	it	ne
 801574e:	2300      	movne	r3, #0
 8015750:	eba6 0807 	sub.w	r8, r6, r7
 8015754:	608b      	str	r3, [r1, #8]
 8015756:	f1b8 0f00 	cmp.w	r8, #0
 801575a:	dd9c      	ble.n	8015696 <__sflush_r+0x1a>
 801575c:	6a21      	ldr	r1, [r4, #32]
 801575e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015760:	4643      	mov	r3, r8
 8015762:	463a      	mov	r2, r7
 8015764:	4628      	mov	r0, r5
 8015766:	47b0      	blx	r6
 8015768:	2800      	cmp	r0, #0
 801576a:	dc06      	bgt.n	801577a <__sflush_r+0xfe>
 801576c:	89a3      	ldrh	r3, [r4, #12]
 801576e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015772:	81a3      	strh	r3, [r4, #12]
 8015774:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015778:	e78e      	b.n	8015698 <__sflush_r+0x1c>
 801577a:	4407      	add	r7, r0
 801577c:	eba8 0800 	sub.w	r8, r8, r0
 8015780:	e7e9      	b.n	8015756 <__sflush_r+0xda>
 8015782:	bf00      	nop
 8015784:	20400001 	.word	0x20400001

08015788 <_fflush_r>:
 8015788:	b538      	push	{r3, r4, r5, lr}
 801578a:	690b      	ldr	r3, [r1, #16]
 801578c:	4605      	mov	r5, r0
 801578e:	460c      	mov	r4, r1
 8015790:	b913      	cbnz	r3, 8015798 <_fflush_r+0x10>
 8015792:	2500      	movs	r5, #0
 8015794:	4628      	mov	r0, r5
 8015796:	bd38      	pop	{r3, r4, r5, pc}
 8015798:	b118      	cbz	r0, 80157a2 <_fflush_r+0x1a>
 801579a:	6983      	ldr	r3, [r0, #24]
 801579c:	b90b      	cbnz	r3, 80157a2 <_fflush_r+0x1a>
 801579e:	f7fd fa3f 	bl	8012c20 <__sinit>
 80157a2:	4b14      	ldr	r3, [pc, #80]	; (80157f4 <_fflush_r+0x6c>)
 80157a4:	429c      	cmp	r4, r3
 80157a6:	d11b      	bne.n	80157e0 <_fflush_r+0x58>
 80157a8:	686c      	ldr	r4, [r5, #4]
 80157aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d0ef      	beq.n	8015792 <_fflush_r+0xa>
 80157b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80157b4:	07d0      	lsls	r0, r2, #31
 80157b6:	d404      	bmi.n	80157c2 <_fflush_r+0x3a>
 80157b8:	0599      	lsls	r1, r3, #22
 80157ba:	d402      	bmi.n	80157c2 <_fflush_r+0x3a>
 80157bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80157be:	f7fd fb9e 	bl	8012efe <__retarget_lock_acquire_recursive>
 80157c2:	4628      	mov	r0, r5
 80157c4:	4621      	mov	r1, r4
 80157c6:	f7ff ff59 	bl	801567c <__sflush_r>
 80157ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80157cc:	07da      	lsls	r2, r3, #31
 80157ce:	4605      	mov	r5, r0
 80157d0:	d4e0      	bmi.n	8015794 <_fflush_r+0xc>
 80157d2:	89a3      	ldrh	r3, [r4, #12]
 80157d4:	059b      	lsls	r3, r3, #22
 80157d6:	d4dd      	bmi.n	8015794 <_fflush_r+0xc>
 80157d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80157da:	f7fd fb91 	bl	8012f00 <__retarget_lock_release_recursive>
 80157de:	e7d9      	b.n	8015794 <_fflush_r+0xc>
 80157e0:	4b05      	ldr	r3, [pc, #20]	; (80157f8 <_fflush_r+0x70>)
 80157e2:	429c      	cmp	r4, r3
 80157e4:	d101      	bne.n	80157ea <_fflush_r+0x62>
 80157e6:	68ac      	ldr	r4, [r5, #8]
 80157e8:	e7df      	b.n	80157aa <_fflush_r+0x22>
 80157ea:	4b04      	ldr	r3, [pc, #16]	; (80157fc <_fflush_r+0x74>)
 80157ec:	429c      	cmp	r4, r3
 80157ee:	bf08      	it	eq
 80157f0:	68ec      	ldreq	r4, [r5, #12]
 80157f2:	e7da      	b.n	80157aa <_fflush_r+0x22>
 80157f4:	08018e94 	.word	0x08018e94
 80157f8:	08018eb4 	.word	0x08018eb4
 80157fc:	08018e74 	.word	0x08018e74

08015800 <rshift>:
 8015800:	6903      	ldr	r3, [r0, #16]
 8015802:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8015806:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801580a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801580e:	f100 0414 	add.w	r4, r0, #20
 8015812:	dd45      	ble.n	80158a0 <rshift+0xa0>
 8015814:	f011 011f 	ands.w	r1, r1, #31
 8015818:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801581c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8015820:	d10c      	bne.n	801583c <rshift+0x3c>
 8015822:	f100 0710 	add.w	r7, r0, #16
 8015826:	4629      	mov	r1, r5
 8015828:	42b1      	cmp	r1, r6
 801582a:	d334      	bcc.n	8015896 <rshift+0x96>
 801582c:	1a9b      	subs	r3, r3, r2
 801582e:	009b      	lsls	r3, r3, #2
 8015830:	1eea      	subs	r2, r5, #3
 8015832:	4296      	cmp	r6, r2
 8015834:	bf38      	it	cc
 8015836:	2300      	movcc	r3, #0
 8015838:	4423      	add	r3, r4
 801583a:	e015      	b.n	8015868 <rshift+0x68>
 801583c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8015840:	f1c1 0820 	rsb	r8, r1, #32
 8015844:	40cf      	lsrs	r7, r1
 8015846:	f105 0e04 	add.w	lr, r5, #4
 801584a:	46a1      	mov	r9, r4
 801584c:	4576      	cmp	r6, lr
 801584e:	46f4      	mov	ip, lr
 8015850:	d815      	bhi.n	801587e <rshift+0x7e>
 8015852:	1a9a      	subs	r2, r3, r2
 8015854:	0092      	lsls	r2, r2, #2
 8015856:	3a04      	subs	r2, #4
 8015858:	3501      	adds	r5, #1
 801585a:	42ae      	cmp	r6, r5
 801585c:	bf38      	it	cc
 801585e:	2200      	movcc	r2, #0
 8015860:	18a3      	adds	r3, r4, r2
 8015862:	50a7      	str	r7, [r4, r2]
 8015864:	b107      	cbz	r7, 8015868 <rshift+0x68>
 8015866:	3304      	adds	r3, #4
 8015868:	1b1a      	subs	r2, r3, r4
 801586a:	42a3      	cmp	r3, r4
 801586c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015870:	bf08      	it	eq
 8015872:	2300      	moveq	r3, #0
 8015874:	6102      	str	r2, [r0, #16]
 8015876:	bf08      	it	eq
 8015878:	6143      	streq	r3, [r0, #20]
 801587a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801587e:	f8dc c000 	ldr.w	ip, [ip]
 8015882:	fa0c fc08 	lsl.w	ip, ip, r8
 8015886:	ea4c 0707 	orr.w	r7, ip, r7
 801588a:	f849 7b04 	str.w	r7, [r9], #4
 801588e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015892:	40cf      	lsrs	r7, r1
 8015894:	e7da      	b.n	801584c <rshift+0x4c>
 8015896:	f851 cb04 	ldr.w	ip, [r1], #4
 801589a:	f847 cf04 	str.w	ip, [r7, #4]!
 801589e:	e7c3      	b.n	8015828 <rshift+0x28>
 80158a0:	4623      	mov	r3, r4
 80158a2:	e7e1      	b.n	8015868 <rshift+0x68>

080158a4 <__hexdig_fun>:
 80158a4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80158a8:	2b09      	cmp	r3, #9
 80158aa:	d802      	bhi.n	80158b2 <__hexdig_fun+0xe>
 80158ac:	3820      	subs	r0, #32
 80158ae:	b2c0      	uxtb	r0, r0
 80158b0:	4770      	bx	lr
 80158b2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80158b6:	2b05      	cmp	r3, #5
 80158b8:	d801      	bhi.n	80158be <__hexdig_fun+0x1a>
 80158ba:	3847      	subs	r0, #71	; 0x47
 80158bc:	e7f7      	b.n	80158ae <__hexdig_fun+0xa>
 80158be:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80158c2:	2b05      	cmp	r3, #5
 80158c4:	d801      	bhi.n	80158ca <__hexdig_fun+0x26>
 80158c6:	3827      	subs	r0, #39	; 0x27
 80158c8:	e7f1      	b.n	80158ae <__hexdig_fun+0xa>
 80158ca:	2000      	movs	r0, #0
 80158cc:	4770      	bx	lr
	...

080158d0 <__gethex>:
 80158d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158d4:	ed2d 8b02 	vpush	{d8}
 80158d8:	b089      	sub	sp, #36	; 0x24
 80158da:	ee08 0a10 	vmov	s16, r0
 80158de:	9304      	str	r3, [sp, #16]
 80158e0:	4bb4      	ldr	r3, [pc, #720]	; (8015bb4 <__gethex+0x2e4>)
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	9301      	str	r3, [sp, #4]
 80158e6:	4618      	mov	r0, r3
 80158e8:	468b      	mov	fp, r1
 80158ea:	4690      	mov	r8, r2
 80158ec:	f7ea fc70 	bl	80001d0 <strlen>
 80158f0:	9b01      	ldr	r3, [sp, #4]
 80158f2:	f8db 2000 	ldr.w	r2, [fp]
 80158f6:	4403      	add	r3, r0
 80158f8:	4682      	mov	sl, r0
 80158fa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80158fe:	9305      	str	r3, [sp, #20]
 8015900:	1c93      	adds	r3, r2, #2
 8015902:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8015906:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801590a:	32fe      	adds	r2, #254	; 0xfe
 801590c:	18d1      	adds	r1, r2, r3
 801590e:	461f      	mov	r7, r3
 8015910:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015914:	9100      	str	r1, [sp, #0]
 8015916:	2830      	cmp	r0, #48	; 0x30
 8015918:	d0f8      	beq.n	801590c <__gethex+0x3c>
 801591a:	f7ff ffc3 	bl	80158a4 <__hexdig_fun>
 801591e:	4604      	mov	r4, r0
 8015920:	2800      	cmp	r0, #0
 8015922:	d13a      	bne.n	801599a <__gethex+0xca>
 8015924:	9901      	ldr	r1, [sp, #4]
 8015926:	4652      	mov	r2, sl
 8015928:	4638      	mov	r0, r7
 801592a:	f7fe f8e9 	bl	8013b00 <strncmp>
 801592e:	4605      	mov	r5, r0
 8015930:	2800      	cmp	r0, #0
 8015932:	d168      	bne.n	8015a06 <__gethex+0x136>
 8015934:	f817 000a 	ldrb.w	r0, [r7, sl]
 8015938:	eb07 060a 	add.w	r6, r7, sl
 801593c:	f7ff ffb2 	bl	80158a4 <__hexdig_fun>
 8015940:	2800      	cmp	r0, #0
 8015942:	d062      	beq.n	8015a0a <__gethex+0x13a>
 8015944:	4633      	mov	r3, r6
 8015946:	7818      	ldrb	r0, [r3, #0]
 8015948:	2830      	cmp	r0, #48	; 0x30
 801594a:	461f      	mov	r7, r3
 801594c:	f103 0301 	add.w	r3, r3, #1
 8015950:	d0f9      	beq.n	8015946 <__gethex+0x76>
 8015952:	f7ff ffa7 	bl	80158a4 <__hexdig_fun>
 8015956:	2301      	movs	r3, #1
 8015958:	fab0 f480 	clz	r4, r0
 801595c:	0964      	lsrs	r4, r4, #5
 801595e:	4635      	mov	r5, r6
 8015960:	9300      	str	r3, [sp, #0]
 8015962:	463a      	mov	r2, r7
 8015964:	4616      	mov	r6, r2
 8015966:	3201      	adds	r2, #1
 8015968:	7830      	ldrb	r0, [r6, #0]
 801596a:	f7ff ff9b 	bl	80158a4 <__hexdig_fun>
 801596e:	2800      	cmp	r0, #0
 8015970:	d1f8      	bne.n	8015964 <__gethex+0x94>
 8015972:	9901      	ldr	r1, [sp, #4]
 8015974:	4652      	mov	r2, sl
 8015976:	4630      	mov	r0, r6
 8015978:	f7fe f8c2 	bl	8013b00 <strncmp>
 801597c:	b980      	cbnz	r0, 80159a0 <__gethex+0xd0>
 801597e:	b94d      	cbnz	r5, 8015994 <__gethex+0xc4>
 8015980:	eb06 050a 	add.w	r5, r6, sl
 8015984:	462a      	mov	r2, r5
 8015986:	4616      	mov	r6, r2
 8015988:	3201      	adds	r2, #1
 801598a:	7830      	ldrb	r0, [r6, #0]
 801598c:	f7ff ff8a 	bl	80158a4 <__hexdig_fun>
 8015990:	2800      	cmp	r0, #0
 8015992:	d1f8      	bne.n	8015986 <__gethex+0xb6>
 8015994:	1bad      	subs	r5, r5, r6
 8015996:	00ad      	lsls	r5, r5, #2
 8015998:	e004      	b.n	80159a4 <__gethex+0xd4>
 801599a:	2400      	movs	r4, #0
 801599c:	4625      	mov	r5, r4
 801599e:	e7e0      	b.n	8015962 <__gethex+0x92>
 80159a0:	2d00      	cmp	r5, #0
 80159a2:	d1f7      	bne.n	8015994 <__gethex+0xc4>
 80159a4:	7833      	ldrb	r3, [r6, #0]
 80159a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80159aa:	2b50      	cmp	r3, #80	; 0x50
 80159ac:	d13b      	bne.n	8015a26 <__gethex+0x156>
 80159ae:	7873      	ldrb	r3, [r6, #1]
 80159b0:	2b2b      	cmp	r3, #43	; 0x2b
 80159b2:	d02c      	beq.n	8015a0e <__gethex+0x13e>
 80159b4:	2b2d      	cmp	r3, #45	; 0x2d
 80159b6:	d02e      	beq.n	8015a16 <__gethex+0x146>
 80159b8:	1c71      	adds	r1, r6, #1
 80159ba:	f04f 0900 	mov.w	r9, #0
 80159be:	7808      	ldrb	r0, [r1, #0]
 80159c0:	f7ff ff70 	bl	80158a4 <__hexdig_fun>
 80159c4:	1e43      	subs	r3, r0, #1
 80159c6:	b2db      	uxtb	r3, r3
 80159c8:	2b18      	cmp	r3, #24
 80159ca:	d82c      	bhi.n	8015a26 <__gethex+0x156>
 80159cc:	f1a0 0210 	sub.w	r2, r0, #16
 80159d0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80159d4:	f7ff ff66 	bl	80158a4 <__hexdig_fun>
 80159d8:	1e43      	subs	r3, r0, #1
 80159da:	b2db      	uxtb	r3, r3
 80159dc:	2b18      	cmp	r3, #24
 80159de:	d91d      	bls.n	8015a1c <__gethex+0x14c>
 80159e0:	f1b9 0f00 	cmp.w	r9, #0
 80159e4:	d000      	beq.n	80159e8 <__gethex+0x118>
 80159e6:	4252      	negs	r2, r2
 80159e8:	4415      	add	r5, r2
 80159ea:	f8cb 1000 	str.w	r1, [fp]
 80159ee:	b1e4      	cbz	r4, 8015a2a <__gethex+0x15a>
 80159f0:	9b00      	ldr	r3, [sp, #0]
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	bf14      	ite	ne
 80159f6:	2700      	movne	r7, #0
 80159f8:	2706      	moveq	r7, #6
 80159fa:	4638      	mov	r0, r7
 80159fc:	b009      	add	sp, #36	; 0x24
 80159fe:	ecbd 8b02 	vpop	{d8}
 8015a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a06:	463e      	mov	r6, r7
 8015a08:	4625      	mov	r5, r4
 8015a0a:	2401      	movs	r4, #1
 8015a0c:	e7ca      	b.n	80159a4 <__gethex+0xd4>
 8015a0e:	f04f 0900 	mov.w	r9, #0
 8015a12:	1cb1      	adds	r1, r6, #2
 8015a14:	e7d3      	b.n	80159be <__gethex+0xee>
 8015a16:	f04f 0901 	mov.w	r9, #1
 8015a1a:	e7fa      	b.n	8015a12 <__gethex+0x142>
 8015a1c:	230a      	movs	r3, #10
 8015a1e:	fb03 0202 	mla	r2, r3, r2, r0
 8015a22:	3a10      	subs	r2, #16
 8015a24:	e7d4      	b.n	80159d0 <__gethex+0x100>
 8015a26:	4631      	mov	r1, r6
 8015a28:	e7df      	b.n	80159ea <__gethex+0x11a>
 8015a2a:	1bf3      	subs	r3, r6, r7
 8015a2c:	3b01      	subs	r3, #1
 8015a2e:	4621      	mov	r1, r4
 8015a30:	2b07      	cmp	r3, #7
 8015a32:	dc0b      	bgt.n	8015a4c <__gethex+0x17c>
 8015a34:	ee18 0a10 	vmov	r0, s16
 8015a38:	f000 fa8e 	bl	8015f58 <_Balloc>
 8015a3c:	4604      	mov	r4, r0
 8015a3e:	b940      	cbnz	r0, 8015a52 <__gethex+0x182>
 8015a40:	4b5d      	ldr	r3, [pc, #372]	; (8015bb8 <__gethex+0x2e8>)
 8015a42:	4602      	mov	r2, r0
 8015a44:	21de      	movs	r1, #222	; 0xde
 8015a46:	485d      	ldr	r0, [pc, #372]	; (8015bbc <__gethex+0x2ec>)
 8015a48:	f001 f930 	bl	8016cac <__assert_func>
 8015a4c:	3101      	adds	r1, #1
 8015a4e:	105b      	asrs	r3, r3, #1
 8015a50:	e7ee      	b.n	8015a30 <__gethex+0x160>
 8015a52:	f100 0914 	add.w	r9, r0, #20
 8015a56:	f04f 0b00 	mov.w	fp, #0
 8015a5a:	f1ca 0301 	rsb	r3, sl, #1
 8015a5e:	f8cd 9008 	str.w	r9, [sp, #8]
 8015a62:	f8cd b000 	str.w	fp, [sp]
 8015a66:	9306      	str	r3, [sp, #24]
 8015a68:	42b7      	cmp	r7, r6
 8015a6a:	d340      	bcc.n	8015aee <__gethex+0x21e>
 8015a6c:	9802      	ldr	r0, [sp, #8]
 8015a6e:	9b00      	ldr	r3, [sp, #0]
 8015a70:	f840 3b04 	str.w	r3, [r0], #4
 8015a74:	eba0 0009 	sub.w	r0, r0, r9
 8015a78:	1080      	asrs	r0, r0, #2
 8015a7a:	0146      	lsls	r6, r0, #5
 8015a7c:	6120      	str	r0, [r4, #16]
 8015a7e:	4618      	mov	r0, r3
 8015a80:	f000 fb5c 	bl	801613c <__hi0bits>
 8015a84:	1a30      	subs	r0, r6, r0
 8015a86:	f8d8 6000 	ldr.w	r6, [r8]
 8015a8a:	42b0      	cmp	r0, r6
 8015a8c:	dd63      	ble.n	8015b56 <__gethex+0x286>
 8015a8e:	1b87      	subs	r7, r0, r6
 8015a90:	4639      	mov	r1, r7
 8015a92:	4620      	mov	r0, r4
 8015a94:	f000 ff00 	bl	8016898 <__any_on>
 8015a98:	4682      	mov	sl, r0
 8015a9a:	b1a8      	cbz	r0, 8015ac8 <__gethex+0x1f8>
 8015a9c:	1e7b      	subs	r3, r7, #1
 8015a9e:	1159      	asrs	r1, r3, #5
 8015aa0:	f003 021f 	and.w	r2, r3, #31
 8015aa4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015aa8:	f04f 0a01 	mov.w	sl, #1
 8015aac:	fa0a f202 	lsl.w	r2, sl, r2
 8015ab0:	420a      	tst	r2, r1
 8015ab2:	d009      	beq.n	8015ac8 <__gethex+0x1f8>
 8015ab4:	4553      	cmp	r3, sl
 8015ab6:	dd05      	ble.n	8015ac4 <__gethex+0x1f4>
 8015ab8:	1eb9      	subs	r1, r7, #2
 8015aba:	4620      	mov	r0, r4
 8015abc:	f000 feec 	bl	8016898 <__any_on>
 8015ac0:	2800      	cmp	r0, #0
 8015ac2:	d145      	bne.n	8015b50 <__gethex+0x280>
 8015ac4:	f04f 0a02 	mov.w	sl, #2
 8015ac8:	4639      	mov	r1, r7
 8015aca:	4620      	mov	r0, r4
 8015acc:	f7ff fe98 	bl	8015800 <rshift>
 8015ad0:	443d      	add	r5, r7
 8015ad2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015ad6:	42ab      	cmp	r3, r5
 8015ad8:	da4c      	bge.n	8015b74 <__gethex+0x2a4>
 8015ada:	ee18 0a10 	vmov	r0, s16
 8015ade:	4621      	mov	r1, r4
 8015ae0:	f000 fa7a 	bl	8015fd8 <_Bfree>
 8015ae4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015ae6:	2300      	movs	r3, #0
 8015ae8:	6013      	str	r3, [r2, #0]
 8015aea:	27a3      	movs	r7, #163	; 0xa3
 8015aec:	e785      	b.n	80159fa <__gethex+0x12a>
 8015aee:	1e73      	subs	r3, r6, #1
 8015af0:	9a05      	ldr	r2, [sp, #20]
 8015af2:	9303      	str	r3, [sp, #12]
 8015af4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015af8:	4293      	cmp	r3, r2
 8015afa:	d019      	beq.n	8015b30 <__gethex+0x260>
 8015afc:	f1bb 0f20 	cmp.w	fp, #32
 8015b00:	d107      	bne.n	8015b12 <__gethex+0x242>
 8015b02:	9b02      	ldr	r3, [sp, #8]
 8015b04:	9a00      	ldr	r2, [sp, #0]
 8015b06:	f843 2b04 	str.w	r2, [r3], #4
 8015b0a:	9302      	str	r3, [sp, #8]
 8015b0c:	2300      	movs	r3, #0
 8015b0e:	9300      	str	r3, [sp, #0]
 8015b10:	469b      	mov	fp, r3
 8015b12:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015b16:	f7ff fec5 	bl	80158a4 <__hexdig_fun>
 8015b1a:	9b00      	ldr	r3, [sp, #0]
 8015b1c:	f000 000f 	and.w	r0, r0, #15
 8015b20:	fa00 f00b 	lsl.w	r0, r0, fp
 8015b24:	4303      	orrs	r3, r0
 8015b26:	9300      	str	r3, [sp, #0]
 8015b28:	f10b 0b04 	add.w	fp, fp, #4
 8015b2c:	9b03      	ldr	r3, [sp, #12]
 8015b2e:	e00d      	b.n	8015b4c <__gethex+0x27c>
 8015b30:	9b03      	ldr	r3, [sp, #12]
 8015b32:	9a06      	ldr	r2, [sp, #24]
 8015b34:	4413      	add	r3, r2
 8015b36:	42bb      	cmp	r3, r7
 8015b38:	d3e0      	bcc.n	8015afc <__gethex+0x22c>
 8015b3a:	4618      	mov	r0, r3
 8015b3c:	9901      	ldr	r1, [sp, #4]
 8015b3e:	9307      	str	r3, [sp, #28]
 8015b40:	4652      	mov	r2, sl
 8015b42:	f7fd ffdd 	bl	8013b00 <strncmp>
 8015b46:	9b07      	ldr	r3, [sp, #28]
 8015b48:	2800      	cmp	r0, #0
 8015b4a:	d1d7      	bne.n	8015afc <__gethex+0x22c>
 8015b4c:	461e      	mov	r6, r3
 8015b4e:	e78b      	b.n	8015a68 <__gethex+0x198>
 8015b50:	f04f 0a03 	mov.w	sl, #3
 8015b54:	e7b8      	b.n	8015ac8 <__gethex+0x1f8>
 8015b56:	da0a      	bge.n	8015b6e <__gethex+0x29e>
 8015b58:	1a37      	subs	r7, r6, r0
 8015b5a:	4621      	mov	r1, r4
 8015b5c:	ee18 0a10 	vmov	r0, s16
 8015b60:	463a      	mov	r2, r7
 8015b62:	f000 fc55 	bl	8016410 <__lshift>
 8015b66:	1bed      	subs	r5, r5, r7
 8015b68:	4604      	mov	r4, r0
 8015b6a:	f100 0914 	add.w	r9, r0, #20
 8015b6e:	f04f 0a00 	mov.w	sl, #0
 8015b72:	e7ae      	b.n	8015ad2 <__gethex+0x202>
 8015b74:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015b78:	42a8      	cmp	r0, r5
 8015b7a:	dd72      	ble.n	8015c62 <__gethex+0x392>
 8015b7c:	1b45      	subs	r5, r0, r5
 8015b7e:	42ae      	cmp	r6, r5
 8015b80:	dc36      	bgt.n	8015bf0 <__gethex+0x320>
 8015b82:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015b86:	2b02      	cmp	r3, #2
 8015b88:	d02a      	beq.n	8015be0 <__gethex+0x310>
 8015b8a:	2b03      	cmp	r3, #3
 8015b8c:	d02c      	beq.n	8015be8 <__gethex+0x318>
 8015b8e:	2b01      	cmp	r3, #1
 8015b90:	d11c      	bne.n	8015bcc <__gethex+0x2fc>
 8015b92:	42ae      	cmp	r6, r5
 8015b94:	d11a      	bne.n	8015bcc <__gethex+0x2fc>
 8015b96:	2e01      	cmp	r6, #1
 8015b98:	d112      	bne.n	8015bc0 <__gethex+0x2f0>
 8015b9a:	9a04      	ldr	r2, [sp, #16]
 8015b9c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015ba0:	6013      	str	r3, [r2, #0]
 8015ba2:	2301      	movs	r3, #1
 8015ba4:	6123      	str	r3, [r4, #16]
 8015ba6:	f8c9 3000 	str.w	r3, [r9]
 8015baa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015bac:	2762      	movs	r7, #98	; 0x62
 8015bae:	601c      	str	r4, [r3, #0]
 8015bb0:	e723      	b.n	80159fa <__gethex+0x12a>
 8015bb2:	bf00      	nop
 8015bb4:	08019058 	.word	0x08019058
 8015bb8:	08018fdf 	.word	0x08018fdf
 8015bbc:	08018ff0 	.word	0x08018ff0
 8015bc0:	1e71      	subs	r1, r6, #1
 8015bc2:	4620      	mov	r0, r4
 8015bc4:	f000 fe68 	bl	8016898 <__any_on>
 8015bc8:	2800      	cmp	r0, #0
 8015bca:	d1e6      	bne.n	8015b9a <__gethex+0x2ca>
 8015bcc:	ee18 0a10 	vmov	r0, s16
 8015bd0:	4621      	mov	r1, r4
 8015bd2:	f000 fa01 	bl	8015fd8 <_Bfree>
 8015bd6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015bd8:	2300      	movs	r3, #0
 8015bda:	6013      	str	r3, [r2, #0]
 8015bdc:	2750      	movs	r7, #80	; 0x50
 8015bde:	e70c      	b.n	80159fa <__gethex+0x12a>
 8015be0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	d1f2      	bne.n	8015bcc <__gethex+0x2fc>
 8015be6:	e7d8      	b.n	8015b9a <__gethex+0x2ca>
 8015be8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	d1d5      	bne.n	8015b9a <__gethex+0x2ca>
 8015bee:	e7ed      	b.n	8015bcc <__gethex+0x2fc>
 8015bf0:	1e6f      	subs	r7, r5, #1
 8015bf2:	f1ba 0f00 	cmp.w	sl, #0
 8015bf6:	d131      	bne.n	8015c5c <__gethex+0x38c>
 8015bf8:	b127      	cbz	r7, 8015c04 <__gethex+0x334>
 8015bfa:	4639      	mov	r1, r7
 8015bfc:	4620      	mov	r0, r4
 8015bfe:	f000 fe4b 	bl	8016898 <__any_on>
 8015c02:	4682      	mov	sl, r0
 8015c04:	117b      	asrs	r3, r7, #5
 8015c06:	2101      	movs	r1, #1
 8015c08:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8015c0c:	f007 071f 	and.w	r7, r7, #31
 8015c10:	fa01 f707 	lsl.w	r7, r1, r7
 8015c14:	421f      	tst	r7, r3
 8015c16:	4629      	mov	r1, r5
 8015c18:	4620      	mov	r0, r4
 8015c1a:	bf18      	it	ne
 8015c1c:	f04a 0a02 	orrne.w	sl, sl, #2
 8015c20:	1b76      	subs	r6, r6, r5
 8015c22:	f7ff fded 	bl	8015800 <rshift>
 8015c26:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8015c2a:	2702      	movs	r7, #2
 8015c2c:	f1ba 0f00 	cmp.w	sl, #0
 8015c30:	d048      	beq.n	8015cc4 <__gethex+0x3f4>
 8015c32:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015c36:	2b02      	cmp	r3, #2
 8015c38:	d015      	beq.n	8015c66 <__gethex+0x396>
 8015c3a:	2b03      	cmp	r3, #3
 8015c3c:	d017      	beq.n	8015c6e <__gethex+0x39e>
 8015c3e:	2b01      	cmp	r3, #1
 8015c40:	d109      	bne.n	8015c56 <__gethex+0x386>
 8015c42:	f01a 0f02 	tst.w	sl, #2
 8015c46:	d006      	beq.n	8015c56 <__gethex+0x386>
 8015c48:	f8d9 0000 	ldr.w	r0, [r9]
 8015c4c:	ea4a 0a00 	orr.w	sl, sl, r0
 8015c50:	f01a 0f01 	tst.w	sl, #1
 8015c54:	d10e      	bne.n	8015c74 <__gethex+0x3a4>
 8015c56:	f047 0710 	orr.w	r7, r7, #16
 8015c5a:	e033      	b.n	8015cc4 <__gethex+0x3f4>
 8015c5c:	f04f 0a01 	mov.w	sl, #1
 8015c60:	e7d0      	b.n	8015c04 <__gethex+0x334>
 8015c62:	2701      	movs	r7, #1
 8015c64:	e7e2      	b.n	8015c2c <__gethex+0x35c>
 8015c66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015c68:	f1c3 0301 	rsb	r3, r3, #1
 8015c6c:	9315      	str	r3, [sp, #84]	; 0x54
 8015c6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	d0f0      	beq.n	8015c56 <__gethex+0x386>
 8015c74:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015c78:	f104 0314 	add.w	r3, r4, #20
 8015c7c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8015c80:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8015c84:	f04f 0c00 	mov.w	ip, #0
 8015c88:	4618      	mov	r0, r3
 8015c8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8015c8e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8015c92:	d01c      	beq.n	8015cce <__gethex+0x3fe>
 8015c94:	3201      	adds	r2, #1
 8015c96:	6002      	str	r2, [r0, #0]
 8015c98:	2f02      	cmp	r7, #2
 8015c9a:	f104 0314 	add.w	r3, r4, #20
 8015c9e:	d13f      	bne.n	8015d20 <__gethex+0x450>
 8015ca0:	f8d8 2000 	ldr.w	r2, [r8]
 8015ca4:	3a01      	subs	r2, #1
 8015ca6:	42b2      	cmp	r2, r6
 8015ca8:	d10a      	bne.n	8015cc0 <__gethex+0x3f0>
 8015caa:	1171      	asrs	r1, r6, #5
 8015cac:	2201      	movs	r2, #1
 8015cae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015cb2:	f006 061f 	and.w	r6, r6, #31
 8015cb6:	fa02 f606 	lsl.w	r6, r2, r6
 8015cba:	421e      	tst	r6, r3
 8015cbc:	bf18      	it	ne
 8015cbe:	4617      	movne	r7, r2
 8015cc0:	f047 0720 	orr.w	r7, r7, #32
 8015cc4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015cc6:	601c      	str	r4, [r3, #0]
 8015cc8:	9b04      	ldr	r3, [sp, #16]
 8015cca:	601d      	str	r5, [r3, #0]
 8015ccc:	e695      	b.n	80159fa <__gethex+0x12a>
 8015cce:	4299      	cmp	r1, r3
 8015cd0:	f843 cc04 	str.w	ip, [r3, #-4]
 8015cd4:	d8d8      	bhi.n	8015c88 <__gethex+0x3b8>
 8015cd6:	68a3      	ldr	r3, [r4, #8]
 8015cd8:	459b      	cmp	fp, r3
 8015cda:	db19      	blt.n	8015d10 <__gethex+0x440>
 8015cdc:	6861      	ldr	r1, [r4, #4]
 8015cde:	ee18 0a10 	vmov	r0, s16
 8015ce2:	3101      	adds	r1, #1
 8015ce4:	f000 f938 	bl	8015f58 <_Balloc>
 8015ce8:	4681      	mov	r9, r0
 8015cea:	b918      	cbnz	r0, 8015cf4 <__gethex+0x424>
 8015cec:	4b1a      	ldr	r3, [pc, #104]	; (8015d58 <__gethex+0x488>)
 8015cee:	4602      	mov	r2, r0
 8015cf0:	2184      	movs	r1, #132	; 0x84
 8015cf2:	e6a8      	b.n	8015a46 <__gethex+0x176>
 8015cf4:	6922      	ldr	r2, [r4, #16]
 8015cf6:	3202      	adds	r2, #2
 8015cf8:	f104 010c 	add.w	r1, r4, #12
 8015cfc:	0092      	lsls	r2, r2, #2
 8015cfe:	300c      	adds	r0, #12
 8015d00:	f7fd f8ff 	bl	8012f02 <memcpy>
 8015d04:	4621      	mov	r1, r4
 8015d06:	ee18 0a10 	vmov	r0, s16
 8015d0a:	f000 f965 	bl	8015fd8 <_Bfree>
 8015d0e:	464c      	mov	r4, r9
 8015d10:	6923      	ldr	r3, [r4, #16]
 8015d12:	1c5a      	adds	r2, r3, #1
 8015d14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015d18:	6122      	str	r2, [r4, #16]
 8015d1a:	2201      	movs	r2, #1
 8015d1c:	615a      	str	r2, [r3, #20]
 8015d1e:	e7bb      	b.n	8015c98 <__gethex+0x3c8>
 8015d20:	6922      	ldr	r2, [r4, #16]
 8015d22:	455a      	cmp	r2, fp
 8015d24:	dd0b      	ble.n	8015d3e <__gethex+0x46e>
 8015d26:	2101      	movs	r1, #1
 8015d28:	4620      	mov	r0, r4
 8015d2a:	f7ff fd69 	bl	8015800 <rshift>
 8015d2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015d32:	3501      	adds	r5, #1
 8015d34:	42ab      	cmp	r3, r5
 8015d36:	f6ff aed0 	blt.w	8015ada <__gethex+0x20a>
 8015d3a:	2701      	movs	r7, #1
 8015d3c:	e7c0      	b.n	8015cc0 <__gethex+0x3f0>
 8015d3e:	f016 061f 	ands.w	r6, r6, #31
 8015d42:	d0fa      	beq.n	8015d3a <__gethex+0x46a>
 8015d44:	4453      	add	r3, sl
 8015d46:	f1c6 0620 	rsb	r6, r6, #32
 8015d4a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8015d4e:	f000 f9f5 	bl	801613c <__hi0bits>
 8015d52:	42b0      	cmp	r0, r6
 8015d54:	dbe7      	blt.n	8015d26 <__gethex+0x456>
 8015d56:	e7f0      	b.n	8015d3a <__gethex+0x46a>
 8015d58:	08018fdf 	.word	0x08018fdf

08015d5c <L_shift>:
 8015d5c:	f1c2 0208 	rsb	r2, r2, #8
 8015d60:	0092      	lsls	r2, r2, #2
 8015d62:	b570      	push	{r4, r5, r6, lr}
 8015d64:	f1c2 0620 	rsb	r6, r2, #32
 8015d68:	6843      	ldr	r3, [r0, #4]
 8015d6a:	6804      	ldr	r4, [r0, #0]
 8015d6c:	fa03 f506 	lsl.w	r5, r3, r6
 8015d70:	432c      	orrs	r4, r5
 8015d72:	40d3      	lsrs	r3, r2
 8015d74:	6004      	str	r4, [r0, #0]
 8015d76:	f840 3f04 	str.w	r3, [r0, #4]!
 8015d7a:	4288      	cmp	r0, r1
 8015d7c:	d3f4      	bcc.n	8015d68 <L_shift+0xc>
 8015d7e:	bd70      	pop	{r4, r5, r6, pc}

08015d80 <__match>:
 8015d80:	b530      	push	{r4, r5, lr}
 8015d82:	6803      	ldr	r3, [r0, #0]
 8015d84:	3301      	adds	r3, #1
 8015d86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015d8a:	b914      	cbnz	r4, 8015d92 <__match+0x12>
 8015d8c:	6003      	str	r3, [r0, #0]
 8015d8e:	2001      	movs	r0, #1
 8015d90:	bd30      	pop	{r4, r5, pc}
 8015d92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015d96:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8015d9a:	2d19      	cmp	r5, #25
 8015d9c:	bf98      	it	ls
 8015d9e:	3220      	addls	r2, #32
 8015da0:	42a2      	cmp	r2, r4
 8015da2:	d0f0      	beq.n	8015d86 <__match+0x6>
 8015da4:	2000      	movs	r0, #0
 8015da6:	e7f3      	b.n	8015d90 <__match+0x10>

08015da8 <__hexnan>:
 8015da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015dac:	680b      	ldr	r3, [r1, #0]
 8015dae:	115e      	asrs	r6, r3, #5
 8015db0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015db4:	f013 031f 	ands.w	r3, r3, #31
 8015db8:	b087      	sub	sp, #28
 8015dba:	bf18      	it	ne
 8015dbc:	3604      	addne	r6, #4
 8015dbe:	2500      	movs	r5, #0
 8015dc0:	1f37      	subs	r7, r6, #4
 8015dc2:	4690      	mov	r8, r2
 8015dc4:	6802      	ldr	r2, [r0, #0]
 8015dc6:	9301      	str	r3, [sp, #4]
 8015dc8:	4682      	mov	sl, r0
 8015dca:	f846 5c04 	str.w	r5, [r6, #-4]
 8015dce:	46b9      	mov	r9, r7
 8015dd0:	463c      	mov	r4, r7
 8015dd2:	9502      	str	r5, [sp, #8]
 8015dd4:	46ab      	mov	fp, r5
 8015dd6:	7851      	ldrb	r1, [r2, #1]
 8015dd8:	1c53      	adds	r3, r2, #1
 8015dda:	9303      	str	r3, [sp, #12]
 8015ddc:	b341      	cbz	r1, 8015e30 <__hexnan+0x88>
 8015dde:	4608      	mov	r0, r1
 8015de0:	9205      	str	r2, [sp, #20]
 8015de2:	9104      	str	r1, [sp, #16]
 8015de4:	f7ff fd5e 	bl	80158a4 <__hexdig_fun>
 8015de8:	2800      	cmp	r0, #0
 8015dea:	d14f      	bne.n	8015e8c <__hexnan+0xe4>
 8015dec:	9904      	ldr	r1, [sp, #16]
 8015dee:	9a05      	ldr	r2, [sp, #20]
 8015df0:	2920      	cmp	r1, #32
 8015df2:	d818      	bhi.n	8015e26 <__hexnan+0x7e>
 8015df4:	9b02      	ldr	r3, [sp, #8]
 8015df6:	459b      	cmp	fp, r3
 8015df8:	dd13      	ble.n	8015e22 <__hexnan+0x7a>
 8015dfa:	454c      	cmp	r4, r9
 8015dfc:	d206      	bcs.n	8015e0c <__hexnan+0x64>
 8015dfe:	2d07      	cmp	r5, #7
 8015e00:	dc04      	bgt.n	8015e0c <__hexnan+0x64>
 8015e02:	462a      	mov	r2, r5
 8015e04:	4649      	mov	r1, r9
 8015e06:	4620      	mov	r0, r4
 8015e08:	f7ff ffa8 	bl	8015d5c <L_shift>
 8015e0c:	4544      	cmp	r4, r8
 8015e0e:	d950      	bls.n	8015eb2 <__hexnan+0x10a>
 8015e10:	2300      	movs	r3, #0
 8015e12:	f1a4 0904 	sub.w	r9, r4, #4
 8015e16:	f844 3c04 	str.w	r3, [r4, #-4]
 8015e1a:	f8cd b008 	str.w	fp, [sp, #8]
 8015e1e:	464c      	mov	r4, r9
 8015e20:	461d      	mov	r5, r3
 8015e22:	9a03      	ldr	r2, [sp, #12]
 8015e24:	e7d7      	b.n	8015dd6 <__hexnan+0x2e>
 8015e26:	2929      	cmp	r1, #41	; 0x29
 8015e28:	d156      	bne.n	8015ed8 <__hexnan+0x130>
 8015e2a:	3202      	adds	r2, #2
 8015e2c:	f8ca 2000 	str.w	r2, [sl]
 8015e30:	f1bb 0f00 	cmp.w	fp, #0
 8015e34:	d050      	beq.n	8015ed8 <__hexnan+0x130>
 8015e36:	454c      	cmp	r4, r9
 8015e38:	d206      	bcs.n	8015e48 <__hexnan+0xa0>
 8015e3a:	2d07      	cmp	r5, #7
 8015e3c:	dc04      	bgt.n	8015e48 <__hexnan+0xa0>
 8015e3e:	462a      	mov	r2, r5
 8015e40:	4649      	mov	r1, r9
 8015e42:	4620      	mov	r0, r4
 8015e44:	f7ff ff8a 	bl	8015d5c <L_shift>
 8015e48:	4544      	cmp	r4, r8
 8015e4a:	d934      	bls.n	8015eb6 <__hexnan+0x10e>
 8015e4c:	f1a8 0204 	sub.w	r2, r8, #4
 8015e50:	4623      	mov	r3, r4
 8015e52:	f853 1b04 	ldr.w	r1, [r3], #4
 8015e56:	f842 1f04 	str.w	r1, [r2, #4]!
 8015e5a:	429f      	cmp	r7, r3
 8015e5c:	d2f9      	bcs.n	8015e52 <__hexnan+0xaa>
 8015e5e:	1b3b      	subs	r3, r7, r4
 8015e60:	f023 0303 	bic.w	r3, r3, #3
 8015e64:	3304      	adds	r3, #4
 8015e66:	3401      	adds	r4, #1
 8015e68:	3e03      	subs	r6, #3
 8015e6a:	42b4      	cmp	r4, r6
 8015e6c:	bf88      	it	hi
 8015e6e:	2304      	movhi	r3, #4
 8015e70:	4443      	add	r3, r8
 8015e72:	2200      	movs	r2, #0
 8015e74:	f843 2b04 	str.w	r2, [r3], #4
 8015e78:	429f      	cmp	r7, r3
 8015e7a:	d2fb      	bcs.n	8015e74 <__hexnan+0xcc>
 8015e7c:	683b      	ldr	r3, [r7, #0]
 8015e7e:	b91b      	cbnz	r3, 8015e88 <__hexnan+0xe0>
 8015e80:	4547      	cmp	r7, r8
 8015e82:	d127      	bne.n	8015ed4 <__hexnan+0x12c>
 8015e84:	2301      	movs	r3, #1
 8015e86:	603b      	str	r3, [r7, #0]
 8015e88:	2005      	movs	r0, #5
 8015e8a:	e026      	b.n	8015eda <__hexnan+0x132>
 8015e8c:	3501      	adds	r5, #1
 8015e8e:	2d08      	cmp	r5, #8
 8015e90:	f10b 0b01 	add.w	fp, fp, #1
 8015e94:	dd06      	ble.n	8015ea4 <__hexnan+0xfc>
 8015e96:	4544      	cmp	r4, r8
 8015e98:	d9c3      	bls.n	8015e22 <__hexnan+0x7a>
 8015e9a:	2300      	movs	r3, #0
 8015e9c:	f844 3c04 	str.w	r3, [r4, #-4]
 8015ea0:	2501      	movs	r5, #1
 8015ea2:	3c04      	subs	r4, #4
 8015ea4:	6822      	ldr	r2, [r4, #0]
 8015ea6:	f000 000f 	and.w	r0, r0, #15
 8015eaa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8015eae:	6022      	str	r2, [r4, #0]
 8015eb0:	e7b7      	b.n	8015e22 <__hexnan+0x7a>
 8015eb2:	2508      	movs	r5, #8
 8015eb4:	e7b5      	b.n	8015e22 <__hexnan+0x7a>
 8015eb6:	9b01      	ldr	r3, [sp, #4]
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d0df      	beq.n	8015e7c <__hexnan+0xd4>
 8015ebc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015ec0:	f1c3 0320 	rsb	r3, r3, #32
 8015ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8015ec8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8015ecc:	401a      	ands	r2, r3
 8015ece:	f846 2c04 	str.w	r2, [r6, #-4]
 8015ed2:	e7d3      	b.n	8015e7c <__hexnan+0xd4>
 8015ed4:	3f04      	subs	r7, #4
 8015ed6:	e7d1      	b.n	8015e7c <__hexnan+0xd4>
 8015ed8:	2004      	movs	r0, #4
 8015eda:	b007      	add	sp, #28
 8015edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015ee0 <_localeconv_r>:
 8015ee0:	4800      	ldr	r0, [pc, #0]	; (8015ee4 <_localeconv_r+0x4>)
 8015ee2:	4770      	bx	lr
 8015ee4:	200002d8 	.word	0x200002d8

08015ee8 <_lseek_r>:
 8015ee8:	b538      	push	{r3, r4, r5, lr}
 8015eea:	4d07      	ldr	r5, [pc, #28]	; (8015f08 <_lseek_r+0x20>)
 8015eec:	4604      	mov	r4, r0
 8015eee:	4608      	mov	r0, r1
 8015ef0:	4611      	mov	r1, r2
 8015ef2:	2200      	movs	r2, #0
 8015ef4:	602a      	str	r2, [r5, #0]
 8015ef6:	461a      	mov	r2, r3
 8015ef8:	f7f0 fd0c 	bl	8006914 <_lseek>
 8015efc:	1c43      	adds	r3, r0, #1
 8015efe:	d102      	bne.n	8015f06 <_lseek_r+0x1e>
 8015f00:	682b      	ldr	r3, [r5, #0]
 8015f02:	b103      	cbz	r3, 8015f06 <_lseek_r+0x1e>
 8015f04:	6023      	str	r3, [r4, #0]
 8015f06:	bd38      	pop	{r3, r4, r5, pc}
 8015f08:	200082e4 	.word	0x200082e4

08015f0c <malloc>:
 8015f0c:	4b02      	ldr	r3, [pc, #8]	; (8015f18 <malloc+0xc>)
 8015f0e:	4601      	mov	r1, r0
 8015f10:	6818      	ldr	r0, [r3, #0]
 8015f12:	f7fd b82d 	b.w	8012f70 <_malloc_r>
 8015f16:	bf00      	nop
 8015f18:	20000180 	.word	0x20000180

08015f1c <__ascii_mbtowc>:
 8015f1c:	b082      	sub	sp, #8
 8015f1e:	b901      	cbnz	r1, 8015f22 <__ascii_mbtowc+0x6>
 8015f20:	a901      	add	r1, sp, #4
 8015f22:	b142      	cbz	r2, 8015f36 <__ascii_mbtowc+0x1a>
 8015f24:	b14b      	cbz	r3, 8015f3a <__ascii_mbtowc+0x1e>
 8015f26:	7813      	ldrb	r3, [r2, #0]
 8015f28:	600b      	str	r3, [r1, #0]
 8015f2a:	7812      	ldrb	r2, [r2, #0]
 8015f2c:	1e10      	subs	r0, r2, #0
 8015f2e:	bf18      	it	ne
 8015f30:	2001      	movne	r0, #1
 8015f32:	b002      	add	sp, #8
 8015f34:	4770      	bx	lr
 8015f36:	4610      	mov	r0, r2
 8015f38:	e7fb      	b.n	8015f32 <__ascii_mbtowc+0x16>
 8015f3a:	f06f 0001 	mvn.w	r0, #1
 8015f3e:	e7f8      	b.n	8015f32 <__ascii_mbtowc+0x16>

08015f40 <__malloc_lock>:
 8015f40:	4801      	ldr	r0, [pc, #4]	; (8015f48 <__malloc_lock+0x8>)
 8015f42:	f7fc bfdc 	b.w	8012efe <__retarget_lock_acquire_recursive>
 8015f46:	bf00      	nop
 8015f48:	200082d8 	.word	0x200082d8

08015f4c <__malloc_unlock>:
 8015f4c:	4801      	ldr	r0, [pc, #4]	; (8015f54 <__malloc_unlock+0x8>)
 8015f4e:	f7fc bfd7 	b.w	8012f00 <__retarget_lock_release_recursive>
 8015f52:	bf00      	nop
 8015f54:	200082d8 	.word	0x200082d8

08015f58 <_Balloc>:
 8015f58:	b570      	push	{r4, r5, r6, lr}
 8015f5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015f5c:	4604      	mov	r4, r0
 8015f5e:	460d      	mov	r5, r1
 8015f60:	b976      	cbnz	r6, 8015f80 <_Balloc+0x28>
 8015f62:	2010      	movs	r0, #16
 8015f64:	f7ff ffd2 	bl	8015f0c <malloc>
 8015f68:	4602      	mov	r2, r0
 8015f6a:	6260      	str	r0, [r4, #36]	; 0x24
 8015f6c:	b920      	cbnz	r0, 8015f78 <_Balloc+0x20>
 8015f6e:	4b18      	ldr	r3, [pc, #96]	; (8015fd0 <_Balloc+0x78>)
 8015f70:	4818      	ldr	r0, [pc, #96]	; (8015fd4 <_Balloc+0x7c>)
 8015f72:	2166      	movs	r1, #102	; 0x66
 8015f74:	f000 fe9a 	bl	8016cac <__assert_func>
 8015f78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015f7c:	6006      	str	r6, [r0, #0]
 8015f7e:	60c6      	str	r6, [r0, #12]
 8015f80:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015f82:	68f3      	ldr	r3, [r6, #12]
 8015f84:	b183      	cbz	r3, 8015fa8 <_Balloc+0x50>
 8015f86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015f88:	68db      	ldr	r3, [r3, #12]
 8015f8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015f8e:	b9b8      	cbnz	r0, 8015fc0 <_Balloc+0x68>
 8015f90:	2101      	movs	r1, #1
 8015f92:	fa01 f605 	lsl.w	r6, r1, r5
 8015f96:	1d72      	adds	r2, r6, #5
 8015f98:	0092      	lsls	r2, r2, #2
 8015f9a:	4620      	mov	r0, r4
 8015f9c:	f000 fc9d 	bl	80168da <_calloc_r>
 8015fa0:	b160      	cbz	r0, 8015fbc <_Balloc+0x64>
 8015fa2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015fa6:	e00e      	b.n	8015fc6 <_Balloc+0x6e>
 8015fa8:	2221      	movs	r2, #33	; 0x21
 8015faa:	2104      	movs	r1, #4
 8015fac:	4620      	mov	r0, r4
 8015fae:	f000 fc94 	bl	80168da <_calloc_r>
 8015fb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015fb4:	60f0      	str	r0, [r6, #12]
 8015fb6:	68db      	ldr	r3, [r3, #12]
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d1e4      	bne.n	8015f86 <_Balloc+0x2e>
 8015fbc:	2000      	movs	r0, #0
 8015fbe:	bd70      	pop	{r4, r5, r6, pc}
 8015fc0:	6802      	ldr	r2, [r0, #0]
 8015fc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015fc6:	2300      	movs	r3, #0
 8015fc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015fcc:	e7f7      	b.n	8015fbe <_Balloc+0x66>
 8015fce:	bf00      	nop
 8015fd0:	08018f6d 	.word	0x08018f6d
 8015fd4:	0801906c 	.word	0x0801906c

08015fd8 <_Bfree>:
 8015fd8:	b570      	push	{r4, r5, r6, lr}
 8015fda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015fdc:	4605      	mov	r5, r0
 8015fde:	460c      	mov	r4, r1
 8015fe0:	b976      	cbnz	r6, 8016000 <_Bfree+0x28>
 8015fe2:	2010      	movs	r0, #16
 8015fe4:	f7ff ff92 	bl	8015f0c <malloc>
 8015fe8:	4602      	mov	r2, r0
 8015fea:	6268      	str	r0, [r5, #36]	; 0x24
 8015fec:	b920      	cbnz	r0, 8015ff8 <_Bfree+0x20>
 8015fee:	4b09      	ldr	r3, [pc, #36]	; (8016014 <_Bfree+0x3c>)
 8015ff0:	4809      	ldr	r0, [pc, #36]	; (8016018 <_Bfree+0x40>)
 8015ff2:	218a      	movs	r1, #138	; 0x8a
 8015ff4:	f000 fe5a 	bl	8016cac <__assert_func>
 8015ff8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015ffc:	6006      	str	r6, [r0, #0]
 8015ffe:	60c6      	str	r6, [r0, #12]
 8016000:	b13c      	cbz	r4, 8016012 <_Bfree+0x3a>
 8016002:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8016004:	6862      	ldr	r2, [r4, #4]
 8016006:	68db      	ldr	r3, [r3, #12]
 8016008:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801600c:	6021      	str	r1, [r4, #0]
 801600e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016012:	bd70      	pop	{r4, r5, r6, pc}
 8016014:	08018f6d 	.word	0x08018f6d
 8016018:	0801906c 	.word	0x0801906c

0801601c <__multadd>:
 801601c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016020:	690d      	ldr	r5, [r1, #16]
 8016022:	4607      	mov	r7, r0
 8016024:	460c      	mov	r4, r1
 8016026:	461e      	mov	r6, r3
 8016028:	f101 0c14 	add.w	ip, r1, #20
 801602c:	2000      	movs	r0, #0
 801602e:	f8dc 3000 	ldr.w	r3, [ip]
 8016032:	b299      	uxth	r1, r3
 8016034:	fb02 6101 	mla	r1, r2, r1, r6
 8016038:	0c1e      	lsrs	r6, r3, #16
 801603a:	0c0b      	lsrs	r3, r1, #16
 801603c:	fb02 3306 	mla	r3, r2, r6, r3
 8016040:	b289      	uxth	r1, r1
 8016042:	3001      	adds	r0, #1
 8016044:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016048:	4285      	cmp	r5, r0
 801604a:	f84c 1b04 	str.w	r1, [ip], #4
 801604e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016052:	dcec      	bgt.n	801602e <__multadd+0x12>
 8016054:	b30e      	cbz	r6, 801609a <__multadd+0x7e>
 8016056:	68a3      	ldr	r3, [r4, #8]
 8016058:	42ab      	cmp	r3, r5
 801605a:	dc19      	bgt.n	8016090 <__multadd+0x74>
 801605c:	6861      	ldr	r1, [r4, #4]
 801605e:	4638      	mov	r0, r7
 8016060:	3101      	adds	r1, #1
 8016062:	f7ff ff79 	bl	8015f58 <_Balloc>
 8016066:	4680      	mov	r8, r0
 8016068:	b928      	cbnz	r0, 8016076 <__multadd+0x5a>
 801606a:	4602      	mov	r2, r0
 801606c:	4b0c      	ldr	r3, [pc, #48]	; (80160a0 <__multadd+0x84>)
 801606e:	480d      	ldr	r0, [pc, #52]	; (80160a4 <__multadd+0x88>)
 8016070:	21b5      	movs	r1, #181	; 0xb5
 8016072:	f000 fe1b 	bl	8016cac <__assert_func>
 8016076:	6922      	ldr	r2, [r4, #16]
 8016078:	3202      	adds	r2, #2
 801607a:	f104 010c 	add.w	r1, r4, #12
 801607e:	0092      	lsls	r2, r2, #2
 8016080:	300c      	adds	r0, #12
 8016082:	f7fc ff3e 	bl	8012f02 <memcpy>
 8016086:	4621      	mov	r1, r4
 8016088:	4638      	mov	r0, r7
 801608a:	f7ff ffa5 	bl	8015fd8 <_Bfree>
 801608e:	4644      	mov	r4, r8
 8016090:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016094:	3501      	adds	r5, #1
 8016096:	615e      	str	r6, [r3, #20]
 8016098:	6125      	str	r5, [r4, #16]
 801609a:	4620      	mov	r0, r4
 801609c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160a0:	08018fdf 	.word	0x08018fdf
 80160a4:	0801906c 	.word	0x0801906c

080160a8 <__s2b>:
 80160a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80160ac:	460c      	mov	r4, r1
 80160ae:	4615      	mov	r5, r2
 80160b0:	461f      	mov	r7, r3
 80160b2:	2209      	movs	r2, #9
 80160b4:	3308      	adds	r3, #8
 80160b6:	4606      	mov	r6, r0
 80160b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80160bc:	2100      	movs	r1, #0
 80160be:	2201      	movs	r2, #1
 80160c0:	429a      	cmp	r2, r3
 80160c2:	db09      	blt.n	80160d8 <__s2b+0x30>
 80160c4:	4630      	mov	r0, r6
 80160c6:	f7ff ff47 	bl	8015f58 <_Balloc>
 80160ca:	b940      	cbnz	r0, 80160de <__s2b+0x36>
 80160cc:	4602      	mov	r2, r0
 80160ce:	4b19      	ldr	r3, [pc, #100]	; (8016134 <__s2b+0x8c>)
 80160d0:	4819      	ldr	r0, [pc, #100]	; (8016138 <__s2b+0x90>)
 80160d2:	21ce      	movs	r1, #206	; 0xce
 80160d4:	f000 fdea 	bl	8016cac <__assert_func>
 80160d8:	0052      	lsls	r2, r2, #1
 80160da:	3101      	adds	r1, #1
 80160dc:	e7f0      	b.n	80160c0 <__s2b+0x18>
 80160de:	9b08      	ldr	r3, [sp, #32]
 80160e0:	6143      	str	r3, [r0, #20]
 80160e2:	2d09      	cmp	r5, #9
 80160e4:	f04f 0301 	mov.w	r3, #1
 80160e8:	6103      	str	r3, [r0, #16]
 80160ea:	dd16      	ble.n	801611a <__s2b+0x72>
 80160ec:	f104 0909 	add.w	r9, r4, #9
 80160f0:	46c8      	mov	r8, r9
 80160f2:	442c      	add	r4, r5
 80160f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80160f8:	4601      	mov	r1, r0
 80160fa:	3b30      	subs	r3, #48	; 0x30
 80160fc:	220a      	movs	r2, #10
 80160fe:	4630      	mov	r0, r6
 8016100:	f7ff ff8c 	bl	801601c <__multadd>
 8016104:	45a0      	cmp	r8, r4
 8016106:	d1f5      	bne.n	80160f4 <__s2b+0x4c>
 8016108:	f1a5 0408 	sub.w	r4, r5, #8
 801610c:	444c      	add	r4, r9
 801610e:	1b2d      	subs	r5, r5, r4
 8016110:	1963      	adds	r3, r4, r5
 8016112:	42bb      	cmp	r3, r7
 8016114:	db04      	blt.n	8016120 <__s2b+0x78>
 8016116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801611a:	340a      	adds	r4, #10
 801611c:	2509      	movs	r5, #9
 801611e:	e7f6      	b.n	801610e <__s2b+0x66>
 8016120:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016124:	4601      	mov	r1, r0
 8016126:	3b30      	subs	r3, #48	; 0x30
 8016128:	220a      	movs	r2, #10
 801612a:	4630      	mov	r0, r6
 801612c:	f7ff ff76 	bl	801601c <__multadd>
 8016130:	e7ee      	b.n	8016110 <__s2b+0x68>
 8016132:	bf00      	nop
 8016134:	08018fdf 	.word	0x08018fdf
 8016138:	0801906c 	.word	0x0801906c

0801613c <__hi0bits>:
 801613c:	0c03      	lsrs	r3, r0, #16
 801613e:	041b      	lsls	r3, r3, #16
 8016140:	b9d3      	cbnz	r3, 8016178 <__hi0bits+0x3c>
 8016142:	0400      	lsls	r0, r0, #16
 8016144:	2310      	movs	r3, #16
 8016146:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801614a:	bf04      	itt	eq
 801614c:	0200      	lsleq	r0, r0, #8
 801614e:	3308      	addeq	r3, #8
 8016150:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016154:	bf04      	itt	eq
 8016156:	0100      	lsleq	r0, r0, #4
 8016158:	3304      	addeq	r3, #4
 801615a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801615e:	bf04      	itt	eq
 8016160:	0080      	lsleq	r0, r0, #2
 8016162:	3302      	addeq	r3, #2
 8016164:	2800      	cmp	r0, #0
 8016166:	db05      	blt.n	8016174 <__hi0bits+0x38>
 8016168:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801616c:	f103 0301 	add.w	r3, r3, #1
 8016170:	bf08      	it	eq
 8016172:	2320      	moveq	r3, #32
 8016174:	4618      	mov	r0, r3
 8016176:	4770      	bx	lr
 8016178:	2300      	movs	r3, #0
 801617a:	e7e4      	b.n	8016146 <__hi0bits+0xa>

0801617c <__lo0bits>:
 801617c:	6803      	ldr	r3, [r0, #0]
 801617e:	f013 0207 	ands.w	r2, r3, #7
 8016182:	4601      	mov	r1, r0
 8016184:	d00b      	beq.n	801619e <__lo0bits+0x22>
 8016186:	07da      	lsls	r2, r3, #31
 8016188:	d423      	bmi.n	80161d2 <__lo0bits+0x56>
 801618a:	0798      	lsls	r0, r3, #30
 801618c:	bf49      	itett	mi
 801618e:	085b      	lsrmi	r3, r3, #1
 8016190:	089b      	lsrpl	r3, r3, #2
 8016192:	2001      	movmi	r0, #1
 8016194:	600b      	strmi	r3, [r1, #0]
 8016196:	bf5c      	itt	pl
 8016198:	600b      	strpl	r3, [r1, #0]
 801619a:	2002      	movpl	r0, #2
 801619c:	4770      	bx	lr
 801619e:	b298      	uxth	r0, r3
 80161a0:	b9a8      	cbnz	r0, 80161ce <__lo0bits+0x52>
 80161a2:	0c1b      	lsrs	r3, r3, #16
 80161a4:	2010      	movs	r0, #16
 80161a6:	b2da      	uxtb	r2, r3
 80161a8:	b90a      	cbnz	r2, 80161ae <__lo0bits+0x32>
 80161aa:	3008      	adds	r0, #8
 80161ac:	0a1b      	lsrs	r3, r3, #8
 80161ae:	071a      	lsls	r2, r3, #28
 80161b0:	bf04      	itt	eq
 80161b2:	091b      	lsreq	r3, r3, #4
 80161b4:	3004      	addeq	r0, #4
 80161b6:	079a      	lsls	r2, r3, #30
 80161b8:	bf04      	itt	eq
 80161ba:	089b      	lsreq	r3, r3, #2
 80161bc:	3002      	addeq	r0, #2
 80161be:	07da      	lsls	r2, r3, #31
 80161c0:	d403      	bmi.n	80161ca <__lo0bits+0x4e>
 80161c2:	085b      	lsrs	r3, r3, #1
 80161c4:	f100 0001 	add.w	r0, r0, #1
 80161c8:	d005      	beq.n	80161d6 <__lo0bits+0x5a>
 80161ca:	600b      	str	r3, [r1, #0]
 80161cc:	4770      	bx	lr
 80161ce:	4610      	mov	r0, r2
 80161d0:	e7e9      	b.n	80161a6 <__lo0bits+0x2a>
 80161d2:	2000      	movs	r0, #0
 80161d4:	4770      	bx	lr
 80161d6:	2020      	movs	r0, #32
 80161d8:	4770      	bx	lr
	...

080161dc <__i2b>:
 80161dc:	b510      	push	{r4, lr}
 80161de:	460c      	mov	r4, r1
 80161e0:	2101      	movs	r1, #1
 80161e2:	f7ff feb9 	bl	8015f58 <_Balloc>
 80161e6:	4602      	mov	r2, r0
 80161e8:	b928      	cbnz	r0, 80161f6 <__i2b+0x1a>
 80161ea:	4b05      	ldr	r3, [pc, #20]	; (8016200 <__i2b+0x24>)
 80161ec:	4805      	ldr	r0, [pc, #20]	; (8016204 <__i2b+0x28>)
 80161ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80161f2:	f000 fd5b 	bl	8016cac <__assert_func>
 80161f6:	2301      	movs	r3, #1
 80161f8:	6144      	str	r4, [r0, #20]
 80161fa:	6103      	str	r3, [r0, #16]
 80161fc:	bd10      	pop	{r4, pc}
 80161fe:	bf00      	nop
 8016200:	08018fdf 	.word	0x08018fdf
 8016204:	0801906c 	.word	0x0801906c

08016208 <__multiply>:
 8016208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801620c:	4691      	mov	r9, r2
 801620e:	690a      	ldr	r2, [r1, #16]
 8016210:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016214:	429a      	cmp	r2, r3
 8016216:	bfb8      	it	lt
 8016218:	460b      	movlt	r3, r1
 801621a:	460c      	mov	r4, r1
 801621c:	bfbc      	itt	lt
 801621e:	464c      	movlt	r4, r9
 8016220:	4699      	movlt	r9, r3
 8016222:	6927      	ldr	r7, [r4, #16]
 8016224:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016228:	68a3      	ldr	r3, [r4, #8]
 801622a:	6861      	ldr	r1, [r4, #4]
 801622c:	eb07 060a 	add.w	r6, r7, sl
 8016230:	42b3      	cmp	r3, r6
 8016232:	b085      	sub	sp, #20
 8016234:	bfb8      	it	lt
 8016236:	3101      	addlt	r1, #1
 8016238:	f7ff fe8e 	bl	8015f58 <_Balloc>
 801623c:	b930      	cbnz	r0, 801624c <__multiply+0x44>
 801623e:	4602      	mov	r2, r0
 8016240:	4b44      	ldr	r3, [pc, #272]	; (8016354 <__multiply+0x14c>)
 8016242:	4845      	ldr	r0, [pc, #276]	; (8016358 <__multiply+0x150>)
 8016244:	f240 115d 	movw	r1, #349	; 0x15d
 8016248:	f000 fd30 	bl	8016cac <__assert_func>
 801624c:	f100 0514 	add.w	r5, r0, #20
 8016250:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8016254:	462b      	mov	r3, r5
 8016256:	2200      	movs	r2, #0
 8016258:	4543      	cmp	r3, r8
 801625a:	d321      	bcc.n	80162a0 <__multiply+0x98>
 801625c:	f104 0314 	add.w	r3, r4, #20
 8016260:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8016264:	f109 0314 	add.w	r3, r9, #20
 8016268:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801626c:	9202      	str	r2, [sp, #8]
 801626e:	1b3a      	subs	r2, r7, r4
 8016270:	3a15      	subs	r2, #21
 8016272:	f022 0203 	bic.w	r2, r2, #3
 8016276:	3204      	adds	r2, #4
 8016278:	f104 0115 	add.w	r1, r4, #21
 801627c:	428f      	cmp	r7, r1
 801627e:	bf38      	it	cc
 8016280:	2204      	movcc	r2, #4
 8016282:	9201      	str	r2, [sp, #4]
 8016284:	9a02      	ldr	r2, [sp, #8]
 8016286:	9303      	str	r3, [sp, #12]
 8016288:	429a      	cmp	r2, r3
 801628a:	d80c      	bhi.n	80162a6 <__multiply+0x9e>
 801628c:	2e00      	cmp	r6, #0
 801628e:	dd03      	ble.n	8016298 <__multiply+0x90>
 8016290:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016294:	2b00      	cmp	r3, #0
 8016296:	d05a      	beq.n	801634e <__multiply+0x146>
 8016298:	6106      	str	r6, [r0, #16]
 801629a:	b005      	add	sp, #20
 801629c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162a0:	f843 2b04 	str.w	r2, [r3], #4
 80162a4:	e7d8      	b.n	8016258 <__multiply+0x50>
 80162a6:	f8b3 a000 	ldrh.w	sl, [r3]
 80162aa:	f1ba 0f00 	cmp.w	sl, #0
 80162ae:	d024      	beq.n	80162fa <__multiply+0xf2>
 80162b0:	f104 0e14 	add.w	lr, r4, #20
 80162b4:	46a9      	mov	r9, r5
 80162b6:	f04f 0c00 	mov.w	ip, #0
 80162ba:	f85e 2b04 	ldr.w	r2, [lr], #4
 80162be:	f8d9 1000 	ldr.w	r1, [r9]
 80162c2:	fa1f fb82 	uxth.w	fp, r2
 80162c6:	b289      	uxth	r1, r1
 80162c8:	fb0a 110b 	mla	r1, sl, fp, r1
 80162cc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80162d0:	f8d9 2000 	ldr.w	r2, [r9]
 80162d4:	4461      	add	r1, ip
 80162d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80162da:	fb0a c20b 	mla	r2, sl, fp, ip
 80162de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80162e2:	b289      	uxth	r1, r1
 80162e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80162e8:	4577      	cmp	r7, lr
 80162ea:	f849 1b04 	str.w	r1, [r9], #4
 80162ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80162f2:	d8e2      	bhi.n	80162ba <__multiply+0xb2>
 80162f4:	9a01      	ldr	r2, [sp, #4]
 80162f6:	f845 c002 	str.w	ip, [r5, r2]
 80162fa:	9a03      	ldr	r2, [sp, #12]
 80162fc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8016300:	3304      	adds	r3, #4
 8016302:	f1b9 0f00 	cmp.w	r9, #0
 8016306:	d020      	beq.n	801634a <__multiply+0x142>
 8016308:	6829      	ldr	r1, [r5, #0]
 801630a:	f104 0c14 	add.w	ip, r4, #20
 801630e:	46ae      	mov	lr, r5
 8016310:	f04f 0a00 	mov.w	sl, #0
 8016314:	f8bc b000 	ldrh.w	fp, [ip]
 8016318:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801631c:	fb09 220b 	mla	r2, r9, fp, r2
 8016320:	4492      	add	sl, r2
 8016322:	b289      	uxth	r1, r1
 8016324:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8016328:	f84e 1b04 	str.w	r1, [lr], #4
 801632c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8016330:	f8be 1000 	ldrh.w	r1, [lr]
 8016334:	0c12      	lsrs	r2, r2, #16
 8016336:	fb09 1102 	mla	r1, r9, r2, r1
 801633a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801633e:	4567      	cmp	r7, ip
 8016340:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8016344:	d8e6      	bhi.n	8016314 <__multiply+0x10c>
 8016346:	9a01      	ldr	r2, [sp, #4]
 8016348:	50a9      	str	r1, [r5, r2]
 801634a:	3504      	adds	r5, #4
 801634c:	e79a      	b.n	8016284 <__multiply+0x7c>
 801634e:	3e01      	subs	r6, #1
 8016350:	e79c      	b.n	801628c <__multiply+0x84>
 8016352:	bf00      	nop
 8016354:	08018fdf 	.word	0x08018fdf
 8016358:	0801906c 	.word	0x0801906c

0801635c <__pow5mult>:
 801635c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016360:	4615      	mov	r5, r2
 8016362:	f012 0203 	ands.w	r2, r2, #3
 8016366:	4606      	mov	r6, r0
 8016368:	460f      	mov	r7, r1
 801636a:	d007      	beq.n	801637c <__pow5mult+0x20>
 801636c:	4c25      	ldr	r4, [pc, #148]	; (8016404 <__pow5mult+0xa8>)
 801636e:	3a01      	subs	r2, #1
 8016370:	2300      	movs	r3, #0
 8016372:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016376:	f7ff fe51 	bl	801601c <__multadd>
 801637a:	4607      	mov	r7, r0
 801637c:	10ad      	asrs	r5, r5, #2
 801637e:	d03d      	beq.n	80163fc <__pow5mult+0xa0>
 8016380:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8016382:	b97c      	cbnz	r4, 80163a4 <__pow5mult+0x48>
 8016384:	2010      	movs	r0, #16
 8016386:	f7ff fdc1 	bl	8015f0c <malloc>
 801638a:	4602      	mov	r2, r0
 801638c:	6270      	str	r0, [r6, #36]	; 0x24
 801638e:	b928      	cbnz	r0, 801639c <__pow5mult+0x40>
 8016390:	4b1d      	ldr	r3, [pc, #116]	; (8016408 <__pow5mult+0xac>)
 8016392:	481e      	ldr	r0, [pc, #120]	; (801640c <__pow5mult+0xb0>)
 8016394:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8016398:	f000 fc88 	bl	8016cac <__assert_func>
 801639c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80163a0:	6004      	str	r4, [r0, #0]
 80163a2:	60c4      	str	r4, [r0, #12]
 80163a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80163a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80163ac:	b94c      	cbnz	r4, 80163c2 <__pow5mult+0x66>
 80163ae:	f240 2171 	movw	r1, #625	; 0x271
 80163b2:	4630      	mov	r0, r6
 80163b4:	f7ff ff12 	bl	80161dc <__i2b>
 80163b8:	2300      	movs	r3, #0
 80163ba:	f8c8 0008 	str.w	r0, [r8, #8]
 80163be:	4604      	mov	r4, r0
 80163c0:	6003      	str	r3, [r0, #0]
 80163c2:	f04f 0900 	mov.w	r9, #0
 80163c6:	07eb      	lsls	r3, r5, #31
 80163c8:	d50a      	bpl.n	80163e0 <__pow5mult+0x84>
 80163ca:	4639      	mov	r1, r7
 80163cc:	4622      	mov	r2, r4
 80163ce:	4630      	mov	r0, r6
 80163d0:	f7ff ff1a 	bl	8016208 <__multiply>
 80163d4:	4639      	mov	r1, r7
 80163d6:	4680      	mov	r8, r0
 80163d8:	4630      	mov	r0, r6
 80163da:	f7ff fdfd 	bl	8015fd8 <_Bfree>
 80163de:	4647      	mov	r7, r8
 80163e0:	106d      	asrs	r5, r5, #1
 80163e2:	d00b      	beq.n	80163fc <__pow5mult+0xa0>
 80163e4:	6820      	ldr	r0, [r4, #0]
 80163e6:	b938      	cbnz	r0, 80163f8 <__pow5mult+0x9c>
 80163e8:	4622      	mov	r2, r4
 80163ea:	4621      	mov	r1, r4
 80163ec:	4630      	mov	r0, r6
 80163ee:	f7ff ff0b 	bl	8016208 <__multiply>
 80163f2:	6020      	str	r0, [r4, #0]
 80163f4:	f8c0 9000 	str.w	r9, [r0]
 80163f8:	4604      	mov	r4, r0
 80163fa:	e7e4      	b.n	80163c6 <__pow5mult+0x6a>
 80163fc:	4638      	mov	r0, r7
 80163fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016402:	bf00      	nop
 8016404:	080191b8 	.word	0x080191b8
 8016408:	08018f6d 	.word	0x08018f6d
 801640c:	0801906c 	.word	0x0801906c

08016410 <__lshift>:
 8016410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016414:	460c      	mov	r4, r1
 8016416:	6849      	ldr	r1, [r1, #4]
 8016418:	6923      	ldr	r3, [r4, #16]
 801641a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801641e:	68a3      	ldr	r3, [r4, #8]
 8016420:	4607      	mov	r7, r0
 8016422:	4691      	mov	r9, r2
 8016424:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016428:	f108 0601 	add.w	r6, r8, #1
 801642c:	42b3      	cmp	r3, r6
 801642e:	db0b      	blt.n	8016448 <__lshift+0x38>
 8016430:	4638      	mov	r0, r7
 8016432:	f7ff fd91 	bl	8015f58 <_Balloc>
 8016436:	4605      	mov	r5, r0
 8016438:	b948      	cbnz	r0, 801644e <__lshift+0x3e>
 801643a:	4602      	mov	r2, r0
 801643c:	4b2a      	ldr	r3, [pc, #168]	; (80164e8 <__lshift+0xd8>)
 801643e:	482b      	ldr	r0, [pc, #172]	; (80164ec <__lshift+0xdc>)
 8016440:	f240 11d9 	movw	r1, #473	; 0x1d9
 8016444:	f000 fc32 	bl	8016cac <__assert_func>
 8016448:	3101      	adds	r1, #1
 801644a:	005b      	lsls	r3, r3, #1
 801644c:	e7ee      	b.n	801642c <__lshift+0x1c>
 801644e:	2300      	movs	r3, #0
 8016450:	f100 0114 	add.w	r1, r0, #20
 8016454:	f100 0210 	add.w	r2, r0, #16
 8016458:	4618      	mov	r0, r3
 801645a:	4553      	cmp	r3, sl
 801645c:	db37      	blt.n	80164ce <__lshift+0xbe>
 801645e:	6920      	ldr	r0, [r4, #16]
 8016460:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016464:	f104 0314 	add.w	r3, r4, #20
 8016468:	f019 091f 	ands.w	r9, r9, #31
 801646c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016470:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8016474:	d02f      	beq.n	80164d6 <__lshift+0xc6>
 8016476:	f1c9 0e20 	rsb	lr, r9, #32
 801647a:	468a      	mov	sl, r1
 801647c:	f04f 0c00 	mov.w	ip, #0
 8016480:	681a      	ldr	r2, [r3, #0]
 8016482:	fa02 f209 	lsl.w	r2, r2, r9
 8016486:	ea42 020c 	orr.w	r2, r2, ip
 801648a:	f84a 2b04 	str.w	r2, [sl], #4
 801648e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016492:	4298      	cmp	r0, r3
 8016494:	fa22 fc0e 	lsr.w	ip, r2, lr
 8016498:	d8f2      	bhi.n	8016480 <__lshift+0x70>
 801649a:	1b03      	subs	r3, r0, r4
 801649c:	3b15      	subs	r3, #21
 801649e:	f023 0303 	bic.w	r3, r3, #3
 80164a2:	3304      	adds	r3, #4
 80164a4:	f104 0215 	add.w	r2, r4, #21
 80164a8:	4290      	cmp	r0, r2
 80164aa:	bf38      	it	cc
 80164ac:	2304      	movcc	r3, #4
 80164ae:	f841 c003 	str.w	ip, [r1, r3]
 80164b2:	f1bc 0f00 	cmp.w	ip, #0
 80164b6:	d001      	beq.n	80164bc <__lshift+0xac>
 80164b8:	f108 0602 	add.w	r6, r8, #2
 80164bc:	3e01      	subs	r6, #1
 80164be:	4638      	mov	r0, r7
 80164c0:	612e      	str	r6, [r5, #16]
 80164c2:	4621      	mov	r1, r4
 80164c4:	f7ff fd88 	bl	8015fd8 <_Bfree>
 80164c8:	4628      	mov	r0, r5
 80164ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80164d2:	3301      	adds	r3, #1
 80164d4:	e7c1      	b.n	801645a <__lshift+0x4a>
 80164d6:	3904      	subs	r1, #4
 80164d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80164dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80164e0:	4298      	cmp	r0, r3
 80164e2:	d8f9      	bhi.n	80164d8 <__lshift+0xc8>
 80164e4:	e7ea      	b.n	80164bc <__lshift+0xac>
 80164e6:	bf00      	nop
 80164e8:	08018fdf 	.word	0x08018fdf
 80164ec:	0801906c 	.word	0x0801906c

080164f0 <__mcmp>:
 80164f0:	b530      	push	{r4, r5, lr}
 80164f2:	6902      	ldr	r2, [r0, #16]
 80164f4:	690c      	ldr	r4, [r1, #16]
 80164f6:	1b12      	subs	r2, r2, r4
 80164f8:	d10e      	bne.n	8016518 <__mcmp+0x28>
 80164fa:	f100 0314 	add.w	r3, r0, #20
 80164fe:	3114      	adds	r1, #20
 8016500:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016504:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016508:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801650c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016510:	42a5      	cmp	r5, r4
 8016512:	d003      	beq.n	801651c <__mcmp+0x2c>
 8016514:	d305      	bcc.n	8016522 <__mcmp+0x32>
 8016516:	2201      	movs	r2, #1
 8016518:	4610      	mov	r0, r2
 801651a:	bd30      	pop	{r4, r5, pc}
 801651c:	4283      	cmp	r3, r0
 801651e:	d3f3      	bcc.n	8016508 <__mcmp+0x18>
 8016520:	e7fa      	b.n	8016518 <__mcmp+0x28>
 8016522:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016526:	e7f7      	b.n	8016518 <__mcmp+0x28>

08016528 <__mdiff>:
 8016528:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801652c:	460c      	mov	r4, r1
 801652e:	4606      	mov	r6, r0
 8016530:	4611      	mov	r1, r2
 8016532:	4620      	mov	r0, r4
 8016534:	4690      	mov	r8, r2
 8016536:	f7ff ffdb 	bl	80164f0 <__mcmp>
 801653a:	1e05      	subs	r5, r0, #0
 801653c:	d110      	bne.n	8016560 <__mdiff+0x38>
 801653e:	4629      	mov	r1, r5
 8016540:	4630      	mov	r0, r6
 8016542:	f7ff fd09 	bl	8015f58 <_Balloc>
 8016546:	b930      	cbnz	r0, 8016556 <__mdiff+0x2e>
 8016548:	4b3a      	ldr	r3, [pc, #232]	; (8016634 <__mdiff+0x10c>)
 801654a:	4602      	mov	r2, r0
 801654c:	f240 2132 	movw	r1, #562	; 0x232
 8016550:	4839      	ldr	r0, [pc, #228]	; (8016638 <__mdiff+0x110>)
 8016552:	f000 fbab 	bl	8016cac <__assert_func>
 8016556:	2301      	movs	r3, #1
 8016558:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801655c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016560:	bfa4      	itt	ge
 8016562:	4643      	movge	r3, r8
 8016564:	46a0      	movge	r8, r4
 8016566:	4630      	mov	r0, r6
 8016568:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801656c:	bfa6      	itte	ge
 801656e:	461c      	movge	r4, r3
 8016570:	2500      	movge	r5, #0
 8016572:	2501      	movlt	r5, #1
 8016574:	f7ff fcf0 	bl	8015f58 <_Balloc>
 8016578:	b920      	cbnz	r0, 8016584 <__mdiff+0x5c>
 801657a:	4b2e      	ldr	r3, [pc, #184]	; (8016634 <__mdiff+0x10c>)
 801657c:	4602      	mov	r2, r0
 801657e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8016582:	e7e5      	b.n	8016550 <__mdiff+0x28>
 8016584:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016588:	6926      	ldr	r6, [r4, #16]
 801658a:	60c5      	str	r5, [r0, #12]
 801658c:	f104 0914 	add.w	r9, r4, #20
 8016590:	f108 0514 	add.w	r5, r8, #20
 8016594:	f100 0e14 	add.w	lr, r0, #20
 8016598:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801659c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80165a0:	f108 0210 	add.w	r2, r8, #16
 80165a4:	46f2      	mov	sl, lr
 80165a6:	2100      	movs	r1, #0
 80165a8:	f859 3b04 	ldr.w	r3, [r9], #4
 80165ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80165b0:	fa1f f883 	uxth.w	r8, r3
 80165b4:	fa11 f18b 	uxtah	r1, r1, fp
 80165b8:	0c1b      	lsrs	r3, r3, #16
 80165ba:	eba1 0808 	sub.w	r8, r1, r8
 80165be:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80165c2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80165c6:	fa1f f888 	uxth.w	r8, r8
 80165ca:	1419      	asrs	r1, r3, #16
 80165cc:	454e      	cmp	r6, r9
 80165ce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80165d2:	f84a 3b04 	str.w	r3, [sl], #4
 80165d6:	d8e7      	bhi.n	80165a8 <__mdiff+0x80>
 80165d8:	1b33      	subs	r3, r6, r4
 80165da:	3b15      	subs	r3, #21
 80165dc:	f023 0303 	bic.w	r3, r3, #3
 80165e0:	3304      	adds	r3, #4
 80165e2:	3415      	adds	r4, #21
 80165e4:	42a6      	cmp	r6, r4
 80165e6:	bf38      	it	cc
 80165e8:	2304      	movcc	r3, #4
 80165ea:	441d      	add	r5, r3
 80165ec:	4473      	add	r3, lr
 80165ee:	469e      	mov	lr, r3
 80165f0:	462e      	mov	r6, r5
 80165f2:	4566      	cmp	r6, ip
 80165f4:	d30e      	bcc.n	8016614 <__mdiff+0xec>
 80165f6:	f10c 0203 	add.w	r2, ip, #3
 80165fa:	1b52      	subs	r2, r2, r5
 80165fc:	f022 0203 	bic.w	r2, r2, #3
 8016600:	3d03      	subs	r5, #3
 8016602:	45ac      	cmp	ip, r5
 8016604:	bf38      	it	cc
 8016606:	2200      	movcc	r2, #0
 8016608:	441a      	add	r2, r3
 801660a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801660e:	b17b      	cbz	r3, 8016630 <__mdiff+0x108>
 8016610:	6107      	str	r7, [r0, #16]
 8016612:	e7a3      	b.n	801655c <__mdiff+0x34>
 8016614:	f856 8b04 	ldr.w	r8, [r6], #4
 8016618:	fa11 f288 	uxtah	r2, r1, r8
 801661c:	1414      	asrs	r4, r2, #16
 801661e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8016622:	b292      	uxth	r2, r2
 8016624:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8016628:	f84e 2b04 	str.w	r2, [lr], #4
 801662c:	1421      	asrs	r1, r4, #16
 801662e:	e7e0      	b.n	80165f2 <__mdiff+0xca>
 8016630:	3f01      	subs	r7, #1
 8016632:	e7ea      	b.n	801660a <__mdiff+0xe2>
 8016634:	08018fdf 	.word	0x08018fdf
 8016638:	0801906c 	.word	0x0801906c

0801663c <__ulp>:
 801663c:	b082      	sub	sp, #8
 801663e:	ed8d 0b00 	vstr	d0, [sp]
 8016642:	9b01      	ldr	r3, [sp, #4]
 8016644:	4912      	ldr	r1, [pc, #72]	; (8016690 <__ulp+0x54>)
 8016646:	4019      	ands	r1, r3
 8016648:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801664c:	2900      	cmp	r1, #0
 801664e:	dd05      	ble.n	801665c <__ulp+0x20>
 8016650:	2200      	movs	r2, #0
 8016652:	460b      	mov	r3, r1
 8016654:	ec43 2b10 	vmov	d0, r2, r3
 8016658:	b002      	add	sp, #8
 801665a:	4770      	bx	lr
 801665c:	4249      	negs	r1, r1
 801665e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8016662:	ea4f 5021 	mov.w	r0, r1, asr #20
 8016666:	f04f 0200 	mov.w	r2, #0
 801666a:	f04f 0300 	mov.w	r3, #0
 801666e:	da04      	bge.n	801667a <__ulp+0x3e>
 8016670:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8016674:	fa41 f300 	asr.w	r3, r1, r0
 8016678:	e7ec      	b.n	8016654 <__ulp+0x18>
 801667a:	f1a0 0114 	sub.w	r1, r0, #20
 801667e:	291e      	cmp	r1, #30
 8016680:	bfda      	itte	le
 8016682:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8016686:	fa20 f101 	lsrle.w	r1, r0, r1
 801668a:	2101      	movgt	r1, #1
 801668c:	460a      	mov	r2, r1
 801668e:	e7e1      	b.n	8016654 <__ulp+0x18>
 8016690:	7ff00000 	.word	0x7ff00000

08016694 <__b2d>:
 8016694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016696:	6905      	ldr	r5, [r0, #16]
 8016698:	f100 0714 	add.w	r7, r0, #20
 801669c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80166a0:	1f2e      	subs	r6, r5, #4
 80166a2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80166a6:	4620      	mov	r0, r4
 80166a8:	f7ff fd48 	bl	801613c <__hi0bits>
 80166ac:	f1c0 0320 	rsb	r3, r0, #32
 80166b0:	280a      	cmp	r0, #10
 80166b2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8016730 <__b2d+0x9c>
 80166b6:	600b      	str	r3, [r1, #0]
 80166b8:	dc14      	bgt.n	80166e4 <__b2d+0x50>
 80166ba:	f1c0 0e0b 	rsb	lr, r0, #11
 80166be:	fa24 f10e 	lsr.w	r1, r4, lr
 80166c2:	42b7      	cmp	r7, r6
 80166c4:	ea41 030c 	orr.w	r3, r1, ip
 80166c8:	bf34      	ite	cc
 80166ca:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80166ce:	2100      	movcs	r1, #0
 80166d0:	3015      	adds	r0, #21
 80166d2:	fa04 f000 	lsl.w	r0, r4, r0
 80166d6:	fa21 f10e 	lsr.w	r1, r1, lr
 80166da:	ea40 0201 	orr.w	r2, r0, r1
 80166de:	ec43 2b10 	vmov	d0, r2, r3
 80166e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80166e4:	42b7      	cmp	r7, r6
 80166e6:	bf3a      	itte	cc
 80166e8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80166ec:	f1a5 0608 	subcc.w	r6, r5, #8
 80166f0:	2100      	movcs	r1, #0
 80166f2:	380b      	subs	r0, #11
 80166f4:	d017      	beq.n	8016726 <__b2d+0x92>
 80166f6:	f1c0 0c20 	rsb	ip, r0, #32
 80166fa:	fa04 f500 	lsl.w	r5, r4, r0
 80166fe:	42be      	cmp	r6, r7
 8016700:	fa21 f40c 	lsr.w	r4, r1, ip
 8016704:	ea45 0504 	orr.w	r5, r5, r4
 8016708:	bf8c      	ite	hi
 801670a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801670e:	2400      	movls	r4, #0
 8016710:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8016714:	fa01 f000 	lsl.w	r0, r1, r0
 8016718:	fa24 f40c 	lsr.w	r4, r4, ip
 801671c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8016720:	ea40 0204 	orr.w	r2, r0, r4
 8016724:	e7db      	b.n	80166de <__b2d+0x4a>
 8016726:	ea44 030c 	orr.w	r3, r4, ip
 801672a:	460a      	mov	r2, r1
 801672c:	e7d7      	b.n	80166de <__b2d+0x4a>
 801672e:	bf00      	nop
 8016730:	3ff00000 	.word	0x3ff00000

08016734 <__d2b>:
 8016734:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016738:	4689      	mov	r9, r1
 801673a:	2101      	movs	r1, #1
 801673c:	ec57 6b10 	vmov	r6, r7, d0
 8016740:	4690      	mov	r8, r2
 8016742:	f7ff fc09 	bl	8015f58 <_Balloc>
 8016746:	4604      	mov	r4, r0
 8016748:	b930      	cbnz	r0, 8016758 <__d2b+0x24>
 801674a:	4602      	mov	r2, r0
 801674c:	4b25      	ldr	r3, [pc, #148]	; (80167e4 <__d2b+0xb0>)
 801674e:	4826      	ldr	r0, [pc, #152]	; (80167e8 <__d2b+0xb4>)
 8016750:	f240 310a 	movw	r1, #778	; 0x30a
 8016754:	f000 faaa 	bl	8016cac <__assert_func>
 8016758:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801675c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016760:	bb35      	cbnz	r5, 80167b0 <__d2b+0x7c>
 8016762:	2e00      	cmp	r6, #0
 8016764:	9301      	str	r3, [sp, #4]
 8016766:	d028      	beq.n	80167ba <__d2b+0x86>
 8016768:	4668      	mov	r0, sp
 801676a:	9600      	str	r6, [sp, #0]
 801676c:	f7ff fd06 	bl	801617c <__lo0bits>
 8016770:	9900      	ldr	r1, [sp, #0]
 8016772:	b300      	cbz	r0, 80167b6 <__d2b+0x82>
 8016774:	9a01      	ldr	r2, [sp, #4]
 8016776:	f1c0 0320 	rsb	r3, r0, #32
 801677a:	fa02 f303 	lsl.w	r3, r2, r3
 801677e:	430b      	orrs	r3, r1
 8016780:	40c2      	lsrs	r2, r0
 8016782:	6163      	str	r3, [r4, #20]
 8016784:	9201      	str	r2, [sp, #4]
 8016786:	9b01      	ldr	r3, [sp, #4]
 8016788:	61a3      	str	r3, [r4, #24]
 801678a:	2b00      	cmp	r3, #0
 801678c:	bf14      	ite	ne
 801678e:	2202      	movne	r2, #2
 8016790:	2201      	moveq	r2, #1
 8016792:	6122      	str	r2, [r4, #16]
 8016794:	b1d5      	cbz	r5, 80167cc <__d2b+0x98>
 8016796:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801679a:	4405      	add	r5, r0
 801679c:	f8c9 5000 	str.w	r5, [r9]
 80167a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80167a4:	f8c8 0000 	str.w	r0, [r8]
 80167a8:	4620      	mov	r0, r4
 80167aa:	b003      	add	sp, #12
 80167ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80167b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80167b4:	e7d5      	b.n	8016762 <__d2b+0x2e>
 80167b6:	6161      	str	r1, [r4, #20]
 80167b8:	e7e5      	b.n	8016786 <__d2b+0x52>
 80167ba:	a801      	add	r0, sp, #4
 80167bc:	f7ff fcde 	bl	801617c <__lo0bits>
 80167c0:	9b01      	ldr	r3, [sp, #4]
 80167c2:	6163      	str	r3, [r4, #20]
 80167c4:	2201      	movs	r2, #1
 80167c6:	6122      	str	r2, [r4, #16]
 80167c8:	3020      	adds	r0, #32
 80167ca:	e7e3      	b.n	8016794 <__d2b+0x60>
 80167cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80167d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80167d4:	f8c9 0000 	str.w	r0, [r9]
 80167d8:	6918      	ldr	r0, [r3, #16]
 80167da:	f7ff fcaf 	bl	801613c <__hi0bits>
 80167de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80167e2:	e7df      	b.n	80167a4 <__d2b+0x70>
 80167e4:	08018fdf 	.word	0x08018fdf
 80167e8:	0801906c 	.word	0x0801906c

080167ec <__ratio>:
 80167ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167f0:	4688      	mov	r8, r1
 80167f2:	4669      	mov	r1, sp
 80167f4:	4681      	mov	r9, r0
 80167f6:	f7ff ff4d 	bl	8016694 <__b2d>
 80167fa:	a901      	add	r1, sp, #4
 80167fc:	4640      	mov	r0, r8
 80167fe:	ec55 4b10 	vmov	r4, r5, d0
 8016802:	f7ff ff47 	bl	8016694 <__b2d>
 8016806:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801680a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801680e:	eba3 0c02 	sub.w	ip, r3, r2
 8016812:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016816:	1a9b      	subs	r3, r3, r2
 8016818:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801681c:	ec51 0b10 	vmov	r0, r1, d0
 8016820:	2b00      	cmp	r3, #0
 8016822:	bfd6      	itet	le
 8016824:	460a      	movle	r2, r1
 8016826:	462a      	movgt	r2, r5
 8016828:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801682c:	468b      	mov	fp, r1
 801682e:	462f      	mov	r7, r5
 8016830:	bfd4      	ite	le
 8016832:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8016836:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801683a:	4620      	mov	r0, r4
 801683c:	ee10 2a10 	vmov	r2, s0
 8016840:	465b      	mov	r3, fp
 8016842:	4639      	mov	r1, r7
 8016844:	f7ea f802 	bl	800084c <__aeabi_ddiv>
 8016848:	ec41 0b10 	vmov	d0, r0, r1
 801684c:	b003      	add	sp, #12
 801684e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016852 <__copybits>:
 8016852:	3901      	subs	r1, #1
 8016854:	b570      	push	{r4, r5, r6, lr}
 8016856:	1149      	asrs	r1, r1, #5
 8016858:	6914      	ldr	r4, [r2, #16]
 801685a:	3101      	adds	r1, #1
 801685c:	f102 0314 	add.w	r3, r2, #20
 8016860:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016864:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016868:	1f05      	subs	r5, r0, #4
 801686a:	42a3      	cmp	r3, r4
 801686c:	d30c      	bcc.n	8016888 <__copybits+0x36>
 801686e:	1aa3      	subs	r3, r4, r2
 8016870:	3b11      	subs	r3, #17
 8016872:	f023 0303 	bic.w	r3, r3, #3
 8016876:	3211      	adds	r2, #17
 8016878:	42a2      	cmp	r2, r4
 801687a:	bf88      	it	hi
 801687c:	2300      	movhi	r3, #0
 801687e:	4418      	add	r0, r3
 8016880:	2300      	movs	r3, #0
 8016882:	4288      	cmp	r0, r1
 8016884:	d305      	bcc.n	8016892 <__copybits+0x40>
 8016886:	bd70      	pop	{r4, r5, r6, pc}
 8016888:	f853 6b04 	ldr.w	r6, [r3], #4
 801688c:	f845 6f04 	str.w	r6, [r5, #4]!
 8016890:	e7eb      	b.n	801686a <__copybits+0x18>
 8016892:	f840 3b04 	str.w	r3, [r0], #4
 8016896:	e7f4      	b.n	8016882 <__copybits+0x30>

08016898 <__any_on>:
 8016898:	f100 0214 	add.w	r2, r0, #20
 801689c:	6900      	ldr	r0, [r0, #16]
 801689e:	114b      	asrs	r3, r1, #5
 80168a0:	4298      	cmp	r0, r3
 80168a2:	b510      	push	{r4, lr}
 80168a4:	db11      	blt.n	80168ca <__any_on+0x32>
 80168a6:	dd0a      	ble.n	80168be <__any_on+0x26>
 80168a8:	f011 011f 	ands.w	r1, r1, #31
 80168ac:	d007      	beq.n	80168be <__any_on+0x26>
 80168ae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80168b2:	fa24 f001 	lsr.w	r0, r4, r1
 80168b6:	fa00 f101 	lsl.w	r1, r0, r1
 80168ba:	428c      	cmp	r4, r1
 80168bc:	d10b      	bne.n	80168d6 <__any_on+0x3e>
 80168be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80168c2:	4293      	cmp	r3, r2
 80168c4:	d803      	bhi.n	80168ce <__any_on+0x36>
 80168c6:	2000      	movs	r0, #0
 80168c8:	bd10      	pop	{r4, pc}
 80168ca:	4603      	mov	r3, r0
 80168cc:	e7f7      	b.n	80168be <__any_on+0x26>
 80168ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80168d2:	2900      	cmp	r1, #0
 80168d4:	d0f5      	beq.n	80168c2 <__any_on+0x2a>
 80168d6:	2001      	movs	r0, #1
 80168d8:	e7f6      	b.n	80168c8 <__any_on+0x30>

080168da <_calloc_r>:
 80168da:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80168dc:	fba1 2402 	umull	r2, r4, r1, r2
 80168e0:	b94c      	cbnz	r4, 80168f6 <_calloc_r+0x1c>
 80168e2:	4611      	mov	r1, r2
 80168e4:	9201      	str	r2, [sp, #4]
 80168e6:	f7fc fb43 	bl	8012f70 <_malloc_r>
 80168ea:	9a01      	ldr	r2, [sp, #4]
 80168ec:	4605      	mov	r5, r0
 80168ee:	b930      	cbnz	r0, 80168fe <_calloc_r+0x24>
 80168f0:	4628      	mov	r0, r5
 80168f2:	b003      	add	sp, #12
 80168f4:	bd30      	pop	{r4, r5, pc}
 80168f6:	220c      	movs	r2, #12
 80168f8:	6002      	str	r2, [r0, #0]
 80168fa:	2500      	movs	r5, #0
 80168fc:	e7f8      	b.n	80168f0 <_calloc_r+0x16>
 80168fe:	4621      	mov	r1, r4
 8016900:	f7fc fb0d 	bl	8012f1e <memset>
 8016904:	e7f4      	b.n	80168f0 <_calloc_r+0x16>
	...

08016908 <_free_r>:
 8016908:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801690a:	2900      	cmp	r1, #0
 801690c:	d044      	beq.n	8016998 <_free_r+0x90>
 801690e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016912:	9001      	str	r0, [sp, #4]
 8016914:	2b00      	cmp	r3, #0
 8016916:	f1a1 0404 	sub.w	r4, r1, #4
 801691a:	bfb8      	it	lt
 801691c:	18e4      	addlt	r4, r4, r3
 801691e:	f7ff fb0f 	bl	8015f40 <__malloc_lock>
 8016922:	4a1e      	ldr	r2, [pc, #120]	; (801699c <_free_r+0x94>)
 8016924:	9801      	ldr	r0, [sp, #4]
 8016926:	6813      	ldr	r3, [r2, #0]
 8016928:	b933      	cbnz	r3, 8016938 <_free_r+0x30>
 801692a:	6063      	str	r3, [r4, #4]
 801692c:	6014      	str	r4, [r2, #0]
 801692e:	b003      	add	sp, #12
 8016930:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016934:	f7ff bb0a 	b.w	8015f4c <__malloc_unlock>
 8016938:	42a3      	cmp	r3, r4
 801693a:	d908      	bls.n	801694e <_free_r+0x46>
 801693c:	6825      	ldr	r5, [r4, #0]
 801693e:	1961      	adds	r1, r4, r5
 8016940:	428b      	cmp	r3, r1
 8016942:	bf01      	itttt	eq
 8016944:	6819      	ldreq	r1, [r3, #0]
 8016946:	685b      	ldreq	r3, [r3, #4]
 8016948:	1949      	addeq	r1, r1, r5
 801694a:	6021      	streq	r1, [r4, #0]
 801694c:	e7ed      	b.n	801692a <_free_r+0x22>
 801694e:	461a      	mov	r2, r3
 8016950:	685b      	ldr	r3, [r3, #4]
 8016952:	b10b      	cbz	r3, 8016958 <_free_r+0x50>
 8016954:	42a3      	cmp	r3, r4
 8016956:	d9fa      	bls.n	801694e <_free_r+0x46>
 8016958:	6811      	ldr	r1, [r2, #0]
 801695a:	1855      	adds	r5, r2, r1
 801695c:	42a5      	cmp	r5, r4
 801695e:	d10b      	bne.n	8016978 <_free_r+0x70>
 8016960:	6824      	ldr	r4, [r4, #0]
 8016962:	4421      	add	r1, r4
 8016964:	1854      	adds	r4, r2, r1
 8016966:	42a3      	cmp	r3, r4
 8016968:	6011      	str	r1, [r2, #0]
 801696a:	d1e0      	bne.n	801692e <_free_r+0x26>
 801696c:	681c      	ldr	r4, [r3, #0]
 801696e:	685b      	ldr	r3, [r3, #4]
 8016970:	6053      	str	r3, [r2, #4]
 8016972:	4421      	add	r1, r4
 8016974:	6011      	str	r1, [r2, #0]
 8016976:	e7da      	b.n	801692e <_free_r+0x26>
 8016978:	d902      	bls.n	8016980 <_free_r+0x78>
 801697a:	230c      	movs	r3, #12
 801697c:	6003      	str	r3, [r0, #0]
 801697e:	e7d6      	b.n	801692e <_free_r+0x26>
 8016980:	6825      	ldr	r5, [r4, #0]
 8016982:	1961      	adds	r1, r4, r5
 8016984:	428b      	cmp	r3, r1
 8016986:	bf04      	itt	eq
 8016988:	6819      	ldreq	r1, [r3, #0]
 801698a:	685b      	ldreq	r3, [r3, #4]
 801698c:	6063      	str	r3, [r4, #4]
 801698e:	bf04      	itt	eq
 8016990:	1949      	addeq	r1, r1, r5
 8016992:	6021      	streq	r1, [r4, #0]
 8016994:	6054      	str	r4, [r2, #4]
 8016996:	e7ca      	b.n	801692e <_free_r+0x26>
 8016998:	b003      	add	sp, #12
 801699a:	bd30      	pop	{r4, r5, pc}
 801699c:	200082dc 	.word	0x200082dc

080169a0 <__ssputs_r>:
 80169a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80169a4:	688e      	ldr	r6, [r1, #8]
 80169a6:	429e      	cmp	r6, r3
 80169a8:	4682      	mov	sl, r0
 80169aa:	460c      	mov	r4, r1
 80169ac:	4690      	mov	r8, r2
 80169ae:	461f      	mov	r7, r3
 80169b0:	d838      	bhi.n	8016a24 <__ssputs_r+0x84>
 80169b2:	898a      	ldrh	r2, [r1, #12]
 80169b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80169b8:	d032      	beq.n	8016a20 <__ssputs_r+0x80>
 80169ba:	6825      	ldr	r5, [r4, #0]
 80169bc:	6909      	ldr	r1, [r1, #16]
 80169be:	eba5 0901 	sub.w	r9, r5, r1
 80169c2:	6965      	ldr	r5, [r4, #20]
 80169c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80169c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80169cc:	3301      	adds	r3, #1
 80169ce:	444b      	add	r3, r9
 80169d0:	106d      	asrs	r5, r5, #1
 80169d2:	429d      	cmp	r5, r3
 80169d4:	bf38      	it	cc
 80169d6:	461d      	movcc	r5, r3
 80169d8:	0553      	lsls	r3, r2, #21
 80169da:	d531      	bpl.n	8016a40 <__ssputs_r+0xa0>
 80169dc:	4629      	mov	r1, r5
 80169de:	f7fc fac7 	bl	8012f70 <_malloc_r>
 80169e2:	4606      	mov	r6, r0
 80169e4:	b950      	cbnz	r0, 80169fc <__ssputs_r+0x5c>
 80169e6:	230c      	movs	r3, #12
 80169e8:	f8ca 3000 	str.w	r3, [sl]
 80169ec:	89a3      	ldrh	r3, [r4, #12]
 80169ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80169f2:	81a3      	strh	r3, [r4, #12]
 80169f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80169f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80169fc:	6921      	ldr	r1, [r4, #16]
 80169fe:	464a      	mov	r2, r9
 8016a00:	f7fc fa7f 	bl	8012f02 <memcpy>
 8016a04:	89a3      	ldrh	r3, [r4, #12]
 8016a06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016a0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016a0e:	81a3      	strh	r3, [r4, #12]
 8016a10:	6126      	str	r6, [r4, #16]
 8016a12:	6165      	str	r5, [r4, #20]
 8016a14:	444e      	add	r6, r9
 8016a16:	eba5 0509 	sub.w	r5, r5, r9
 8016a1a:	6026      	str	r6, [r4, #0]
 8016a1c:	60a5      	str	r5, [r4, #8]
 8016a1e:	463e      	mov	r6, r7
 8016a20:	42be      	cmp	r6, r7
 8016a22:	d900      	bls.n	8016a26 <__ssputs_r+0x86>
 8016a24:	463e      	mov	r6, r7
 8016a26:	6820      	ldr	r0, [r4, #0]
 8016a28:	4632      	mov	r2, r6
 8016a2a:	4641      	mov	r1, r8
 8016a2c:	f000 f96e 	bl	8016d0c <memmove>
 8016a30:	68a3      	ldr	r3, [r4, #8]
 8016a32:	1b9b      	subs	r3, r3, r6
 8016a34:	60a3      	str	r3, [r4, #8]
 8016a36:	6823      	ldr	r3, [r4, #0]
 8016a38:	4433      	add	r3, r6
 8016a3a:	6023      	str	r3, [r4, #0]
 8016a3c:	2000      	movs	r0, #0
 8016a3e:	e7db      	b.n	80169f8 <__ssputs_r+0x58>
 8016a40:	462a      	mov	r2, r5
 8016a42:	f000 f97d 	bl	8016d40 <_realloc_r>
 8016a46:	4606      	mov	r6, r0
 8016a48:	2800      	cmp	r0, #0
 8016a4a:	d1e1      	bne.n	8016a10 <__ssputs_r+0x70>
 8016a4c:	6921      	ldr	r1, [r4, #16]
 8016a4e:	4650      	mov	r0, sl
 8016a50:	f7ff ff5a 	bl	8016908 <_free_r>
 8016a54:	e7c7      	b.n	80169e6 <__ssputs_r+0x46>
	...

08016a58 <_svfiprintf_r>:
 8016a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a5c:	4698      	mov	r8, r3
 8016a5e:	898b      	ldrh	r3, [r1, #12]
 8016a60:	061b      	lsls	r3, r3, #24
 8016a62:	b09d      	sub	sp, #116	; 0x74
 8016a64:	4607      	mov	r7, r0
 8016a66:	460d      	mov	r5, r1
 8016a68:	4614      	mov	r4, r2
 8016a6a:	d50e      	bpl.n	8016a8a <_svfiprintf_r+0x32>
 8016a6c:	690b      	ldr	r3, [r1, #16]
 8016a6e:	b963      	cbnz	r3, 8016a8a <_svfiprintf_r+0x32>
 8016a70:	2140      	movs	r1, #64	; 0x40
 8016a72:	f7fc fa7d 	bl	8012f70 <_malloc_r>
 8016a76:	6028      	str	r0, [r5, #0]
 8016a78:	6128      	str	r0, [r5, #16]
 8016a7a:	b920      	cbnz	r0, 8016a86 <_svfiprintf_r+0x2e>
 8016a7c:	230c      	movs	r3, #12
 8016a7e:	603b      	str	r3, [r7, #0]
 8016a80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016a84:	e0d1      	b.n	8016c2a <_svfiprintf_r+0x1d2>
 8016a86:	2340      	movs	r3, #64	; 0x40
 8016a88:	616b      	str	r3, [r5, #20]
 8016a8a:	2300      	movs	r3, #0
 8016a8c:	9309      	str	r3, [sp, #36]	; 0x24
 8016a8e:	2320      	movs	r3, #32
 8016a90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016a94:	f8cd 800c 	str.w	r8, [sp, #12]
 8016a98:	2330      	movs	r3, #48	; 0x30
 8016a9a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8016c44 <_svfiprintf_r+0x1ec>
 8016a9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016aa2:	f04f 0901 	mov.w	r9, #1
 8016aa6:	4623      	mov	r3, r4
 8016aa8:	469a      	mov	sl, r3
 8016aaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016aae:	b10a      	cbz	r2, 8016ab4 <_svfiprintf_r+0x5c>
 8016ab0:	2a25      	cmp	r2, #37	; 0x25
 8016ab2:	d1f9      	bne.n	8016aa8 <_svfiprintf_r+0x50>
 8016ab4:	ebba 0b04 	subs.w	fp, sl, r4
 8016ab8:	d00b      	beq.n	8016ad2 <_svfiprintf_r+0x7a>
 8016aba:	465b      	mov	r3, fp
 8016abc:	4622      	mov	r2, r4
 8016abe:	4629      	mov	r1, r5
 8016ac0:	4638      	mov	r0, r7
 8016ac2:	f7ff ff6d 	bl	80169a0 <__ssputs_r>
 8016ac6:	3001      	adds	r0, #1
 8016ac8:	f000 80aa 	beq.w	8016c20 <_svfiprintf_r+0x1c8>
 8016acc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016ace:	445a      	add	r2, fp
 8016ad0:	9209      	str	r2, [sp, #36]	; 0x24
 8016ad2:	f89a 3000 	ldrb.w	r3, [sl]
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	f000 80a2 	beq.w	8016c20 <_svfiprintf_r+0x1c8>
 8016adc:	2300      	movs	r3, #0
 8016ade:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016ae2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016ae6:	f10a 0a01 	add.w	sl, sl, #1
 8016aea:	9304      	str	r3, [sp, #16]
 8016aec:	9307      	str	r3, [sp, #28]
 8016aee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016af2:	931a      	str	r3, [sp, #104]	; 0x68
 8016af4:	4654      	mov	r4, sl
 8016af6:	2205      	movs	r2, #5
 8016af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016afc:	4851      	ldr	r0, [pc, #324]	; (8016c44 <_svfiprintf_r+0x1ec>)
 8016afe:	f7e9 fb6f 	bl	80001e0 <memchr>
 8016b02:	9a04      	ldr	r2, [sp, #16]
 8016b04:	b9d8      	cbnz	r0, 8016b3e <_svfiprintf_r+0xe6>
 8016b06:	06d0      	lsls	r0, r2, #27
 8016b08:	bf44      	itt	mi
 8016b0a:	2320      	movmi	r3, #32
 8016b0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016b10:	0711      	lsls	r1, r2, #28
 8016b12:	bf44      	itt	mi
 8016b14:	232b      	movmi	r3, #43	; 0x2b
 8016b16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016b1a:	f89a 3000 	ldrb.w	r3, [sl]
 8016b1e:	2b2a      	cmp	r3, #42	; 0x2a
 8016b20:	d015      	beq.n	8016b4e <_svfiprintf_r+0xf6>
 8016b22:	9a07      	ldr	r2, [sp, #28]
 8016b24:	4654      	mov	r4, sl
 8016b26:	2000      	movs	r0, #0
 8016b28:	f04f 0c0a 	mov.w	ip, #10
 8016b2c:	4621      	mov	r1, r4
 8016b2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016b32:	3b30      	subs	r3, #48	; 0x30
 8016b34:	2b09      	cmp	r3, #9
 8016b36:	d94e      	bls.n	8016bd6 <_svfiprintf_r+0x17e>
 8016b38:	b1b0      	cbz	r0, 8016b68 <_svfiprintf_r+0x110>
 8016b3a:	9207      	str	r2, [sp, #28]
 8016b3c:	e014      	b.n	8016b68 <_svfiprintf_r+0x110>
 8016b3e:	eba0 0308 	sub.w	r3, r0, r8
 8016b42:	fa09 f303 	lsl.w	r3, r9, r3
 8016b46:	4313      	orrs	r3, r2
 8016b48:	9304      	str	r3, [sp, #16]
 8016b4a:	46a2      	mov	sl, r4
 8016b4c:	e7d2      	b.n	8016af4 <_svfiprintf_r+0x9c>
 8016b4e:	9b03      	ldr	r3, [sp, #12]
 8016b50:	1d19      	adds	r1, r3, #4
 8016b52:	681b      	ldr	r3, [r3, #0]
 8016b54:	9103      	str	r1, [sp, #12]
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	bfbb      	ittet	lt
 8016b5a:	425b      	neglt	r3, r3
 8016b5c:	f042 0202 	orrlt.w	r2, r2, #2
 8016b60:	9307      	strge	r3, [sp, #28]
 8016b62:	9307      	strlt	r3, [sp, #28]
 8016b64:	bfb8      	it	lt
 8016b66:	9204      	strlt	r2, [sp, #16]
 8016b68:	7823      	ldrb	r3, [r4, #0]
 8016b6a:	2b2e      	cmp	r3, #46	; 0x2e
 8016b6c:	d10c      	bne.n	8016b88 <_svfiprintf_r+0x130>
 8016b6e:	7863      	ldrb	r3, [r4, #1]
 8016b70:	2b2a      	cmp	r3, #42	; 0x2a
 8016b72:	d135      	bne.n	8016be0 <_svfiprintf_r+0x188>
 8016b74:	9b03      	ldr	r3, [sp, #12]
 8016b76:	1d1a      	adds	r2, r3, #4
 8016b78:	681b      	ldr	r3, [r3, #0]
 8016b7a:	9203      	str	r2, [sp, #12]
 8016b7c:	2b00      	cmp	r3, #0
 8016b7e:	bfb8      	it	lt
 8016b80:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8016b84:	3402      	adds	r4, #2
 8016b86:	9305      	str	r3, [sp, #20]
 8016b88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8016c54 <_svfiprintf_r+0x1fc>
 8016b8c:	7821      	ldrb	r1, [r4, #0]
 8016b8e:	2203      	movs	r2, #3
 8016b90:	4650      	mov	r0, sl
 8016b92:	f7e9 fb25 	bl	80001e0 <memchr>
 8016b96:	b140      	cbz	r0, 8016baa <_svfiprintf_r+0x152>
 8016b98:	2340      	movs	r3, #64	; 0x40
 8016b9a:	eba0 000a 	sub.w	r0, r0, sl
 8016b9e:	fa03 f000 	lsl.w	r0, r3, r0
 8016ba2:	9b04      	ldr	r3, [sp, #16]
 8016ba4:	4303      	orrs	r3, r0
 8016ba6:	3401      	adds	r4, #1
 8016ba8:	9304      	str	r3, [sp, #16]
 8016baa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016bae:	4826      	ldr	r0, [pc, #152]	; (8016c48 <_svfiprintf_r+0x1f0>)
 8016bb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016bb4:	2206      	movs	r2, #6
 8016bb6:	f7e9 fb13 	bl	80001e0 <memchr>
 8016bba:	2800      	cmp	r0, #0
 8016bbc:	d038      	beq.n	8016c30 <_svfiprintf_r+0x1d8>
 8016bbe:	4b23      	ldr	r3, [pc, #140]	; (8016c4c <_svfiprintf_r+0x1f4>)
 8016bc0:	bb1b      	cbnz	r3, 8016c0a <_svfiprintf_r+0x1b2>
 8016bc2:	9b03      	ldr	r3, [sp, #12]
 8016bc4:	3307      	adds	r3, #7
 8016bc6:	f023 0307 	bic.w	r3, r3, #7
 8016bca:	3308      	adds	r3, #8
 8016bcc:	9303      	str	r3, [sp, #12]
 8016bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016bd0:	4433      	add	r3, r6
 8016bd2:	9309      	str	r3, [sp, #36]	; 0x24
 8016bd4:	e767      	b.n	8016aa6 <_svfiprintf_r+0x4e>
 8016bd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8016bda:	460c      	mov	r4, r1
 8016bdc:	2001      	movs	r0, #1
 8016bde:	e7a5      	b.n	8016b2c <_svfiprintf_r+0xd4>
 8016be0:	2300      	movs	r3, #0
 8016be2:	3401      	adds	r4, #1
 8016be4:	9305      	str	r3, [sp, #20]
 8016be6:	4619      	mov	r1, r3
 8016be8:	f04f 0c0a 	mov.w	ip, #10
 8016bec:	4620      	mov	r0, r4
 8016bee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016bf2:	3a30      	subs	r2, #48	; 0x30
 8016bf4:	2a09      	cmp	r2, #9
 8016bf6:	d903      	bls.n	8016c00 <_svfiprintf_r+0x1a8>
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d0c5      	beq.n	8016b88 <_svfiprintf_r+0x130>
 8016bfc:	9105      	str	r1, [sp, #20]
 8016bfe:	e7c3      	b.n	8016b88 <_svfiprintf_r+0x130>
 8016c00:	fb0c 2101 	mla	r1, ip, r1, r2
 8016c04:	4604      	mov	r4, r0
 8016c06:	2301      	movs	r3, #1
 8016c08:	e7f0      	b.n	8016bec <_svfiprintf_r+0x194>
 8016c0a:	ab03      	add	r3, sp, #12
 8016c0c:	9300      	str	r3, [sp, #0]
 8016c0e:	462a      	mov	r2, r5
 8016c10:	4b0f      	ldr	r3, [pc, #60]	; (8016c50 <_svfiprintf_r+0x1f8>)
 8016c12:	a904      	add	r1, sp, #16
 8016c14:	4638      	mov	r0, r7
 8016c16:	f7fc fabf 	bl	8013198 <_printf_float>
 8016c1a:	1c42      	adds	r2, r0, #1
 8016c1c:	4606      	mov	r6, r0
 8016c1e:	d1d6      	bne.n	8016bce <_svfiprintf_r+0x176>
 8016c20:	89ab      	ldrh	r3, [r5, #12]
 8016c22:	065b      	lsls	r3, r3, #25
 8016c24:	f53f af2c 	bmi.w	8016a80 <_svfiprintf_r+0x28>
 8016c28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016c2a:	b01d      	add	sp, #116	; 0x74
 8016c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c30:	ab03      	add	r3, sp, #12
 8016c32:	9300      	str	r3, [sp, #0]
 8016c34:	462a      	mov	r2, r5
 8016c36:	4b06      	ldr	r3, [pc, #24]	; (8016c50 <_svfiprintf_r+0x1f8>)
 8016c38:	a904      	add	r1, sp, #16
 8016c3a:	4638      	mov	r0, r7
 8016c3c:	f7fc fd50 	bl	80136e0 <_printf_i>
 8016c40:	e7eb      	b.n	8016c1a <_svfiprintf_r+0x1c2>
 8016c42:	bf00      	nop
 8016c44:	080191c4 	.word	0x080191c4
 8016c48:	080191ce 	.word	0x080191ce
 8016c4c:	08013199 	.word	0x08013199
 8016c50:	080169a1 	.word	0x080169a1
 8016c54:	080191ca 	.word	0x080191ca

08016c58 <_read_r>:
 8016c58:	b538      	push	{r3, r4, r5, lr}
 8016c5a:	4d07      	ldr	r5, [pc, #28]	; (8016c78 <_read_r+0x20>)
 8016c5c:	4604      	mov	r4, r0
 8016c5e:	4608      	mov	r0, r1
 8016c60:	4611      	mov	r1, r2
 8016c62:	2200      	movs	r2, #0
 8016c64:	602a      	str	r2, [r5, #0]
 8016c66:	461a      	mov	r2, r3
 8016c68:	f7ef fdf4 	bl	8006854 <_read>
 8016c6c:	1c43      	adds	r3, r0, #1
 8016c6e:	d102      	bne.n	8016c76 <_read_r+0x1e>
 8016c70:	682b      	ldr	r3, [r5, #0]
 8016c72:	b103      	cbz	r3, 8016c76 <_read_r+0x1e>
 8016c74:	6023      	str	r3, [r4, #0]
 8016c76:	bd38      	pop	{r3, r4, r5, pc}
 8016c78:	200082e4 	.word	0x200082e4
 8016c7c:	00000000 	.word	0x00000000

08016c80 <nan>:
 8016c80:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016c88 <nan+0x8>
 8016c84:	4770      	bx	lr
 8016c86:	bf00      	nop
 8016c88:	00000000 	.word	0x00000000
 8016c8c:	7ff80000 	.word	0x7ff80000

08016c90 <__ascii_wctomb>:
 8016c90:	b149      	cbz	r1, 8016ca6 <__ascii_wctomb+0x16>
 8016c92:	2aff      	cmp	r2, #255	; 0xff
 8016c94:	bf85      	ittet	hi
 8016c96:	238a      	movhi	r3, #138	; 0x8a
 8016c98:	6003      	strhi	r3, [r0, #0]
 8016c9a:	700a      	strbls	r2, [r1, #0]
 8016c9c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8016ca0:	bf98      	it	ls
 8016ca2:	2001      	movls	r0, #1
 8016ca4:	4770      	bx	lr
 8016ca6:	4608      	mov	r0, r1
 8016ca8:	4770      	bx	lr
	...

08016cac <__assert_func>:
 8016cac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016cae:	4614      	mov	r4, r2
 8016cb0:	461a      	mov	r2, r3
 8016cb2:	4b09      	ldr	r3, [pc, #36]	; (8016cd8 <__assert_func+0x2c>)
 8016cb4:	681b      	ldr	r3, [r3, #0]
 8016cb6:	4605      	mov	r5, r0
 8016cb8:	68d8      	ldr	r0, [r3, #12]
 8016cba:	b14c      	cbz	r4, 8016cd0 <__assert_func+0x24>
 8016cbc:	4b07      	ldr	r3, [pc, #28]	; (8016cdc <__assert_func+0x30>)
 8016cbe:	9100      	str	r1, [sp, #0]
 8016cc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016cc4:	4906      	ldr	r1, [pc, #24]	; (8016ce0 <__assert_func+0x34>)
 8016cc6:	462b      	mov	r3, r5
 8016cc8:	f000 f80e 	bl	8016ce8 <fiprintf>
 8016ccc:	f000 fa80 	bl	80171d0 <abort>
 8016cd0:	4b04      	ldr	r3, [pc, #16]	; (8016ce4 <__assert_func+0x38>)
 8016cd2:	461c      	mov	r4, r3
 8016cd4:	e7f3      	b.n	8016cbe <__assert_func+0x12>
 8016cd6:	bf00      	nop
 8016cd8:	20000180 	.word	0x20000180
 8016cdc:	080191d5 	.word	0x080191d5
 8016ce0:	080191e2 	.word	0x080191e2
 8016ce4:	08019210 	.word	0x08019210

08016ce8 <fiprintf>:
 8016ce8:	b40e      	push	{r1, r2, r3}
 8016cea:	b503      	push	{r0, r1, lr}
 8016cec:	4601      	mov	r1, r0
 8016cee:	ab03      	add	r3, sp, #12
 8016cf0:	4805      	ldr	r0, [pc, #20]	; (8016d08 <fiprintf+0x20>)
 8016cf2:	f853 2b04 	ldr.w	r2, [r3], #4
 8016cf6:	6800      	ldr	r0, [r0, #0]
 8016cf8:	9301      	str	r3, [sp, #4]
 8016cfa:	f000 f879 	bl	8016df0 <_vfiprintf_r>
 8016cfe:	b002      	add	sp, #8
 8016d00:	f85d eb04 	ldr.w	lr, [sp], #4
 8016d04:	b003      	add	sp, #12
 8016d06:	4770      	bx	lr
 8016d08:	20000180 	.word	0x20000180

08016d0c <memmove>:
 8016d0c:	4288      	cmp	r0, r1
 8016d0e:	b510      	push	{r4, lr}
 8016d10:	eb01 0402 	add.w	r4, r1, r2
 8016d14:	d902      	bls.n	8016d1c <memmove+0x10>
 8016d16:	4284      	cmp	r4, r0
 8016d18:	4623      	mov	r3, r4
 8016d1a:	d807      	bhi.n	8016d2c <memmove+0x20>
 8016d1c:	1e43      	subs	r3, r0, #1
 8016d1e:	42a1      	cmp	r1, r4
 8016d20:	d008      	beq.n	8016d34 <memmove+0x28>
 8016d22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016d26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016d2a:	e7f8      	b.n	8016d1e <memmove+0x12>
 8016d2c:	4402      	add	r2, r0
 8016d2e:	4601      	mov	r1, r0
 8016d30:	428a      	cmp	r2, r1
 8016d32:	d100      	bne.n	8016d36 <memmove+0x2a>
 8016d34:	bd10      	pop	{r4, pc}
 8016d36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016d3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016d3e:	e7f7      	b.n	8016d30 <memmove+0x24>

08016d40 <_realloc_r>:
 8016d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d44:	4680      	mov	r8, r0
 8016d46:	4614      	mov	r4, r2
 8016d48:	460e      	mov	r6, r1
 8016d4a:	b921      	cbnz	r1, 8016d56 <_realloc_r+0x16>
 8016d4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016d50:	4611      	mov	r1, r2
 8016d52:	f7fc b90d 	b.w	8012f70 <_malloc_r>
 8016d56:	b92a      	cbnz	r2, 8016d64 <_realloc_r+0x24>
 8016d58:	f7ff fdd6 	bl	8016908 <_free_r>
 8016d5c:	4625      	mov	r5, r4
 8016d5e:	4628      	mov	r0, r5
 8016d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d64:	f000 faa0 	bl	80172a8 <_malloc_usable_size_r>
 8016d68:	4284      	cmp	r4, r0
 8016d6a:	4607      	mov	r7, r0
 8016d6c:	d802      	bhi.n	8016d74 <_realloc_r+0x34>
 8016d6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016d72:	d812      	bhi.n	8016d9a <_realloc_r+0x5a>
 8016d74:	4621      	mov	r1, r4
 8016d76:	4640      	mov	r0, r8
 8016d78:	f7fc f8fa 	bl	8012f70 <_malloc_r>
 8016d7c:	4605      	mov	r5, r0
 8016d7e:	2800      	cmp	r0, #0
 8016d80:	d0ed      	beq.n	8016d5e <_realloc_r+0x1e>
 8016d82:	42bc      	cmp	r4, r7
 8016d84:	4622      	mov	r2, r4
 8016d86:	4631      	mov	r1, r6
 8016d88:	bf28      	it	cs
 8016d8a:	463a      	movcs	r2, r7
 8016d8c:	f7fc f8b9 	bl	8012f02 <memcpy>
 8016d90:	4631      	mov	r1, r6
 8016d92:	4640      	mov	r0, r8
 8016d94:	f7ff fdb8 	bl	8016908 <_free_r>
 8016d98:	e7e1      	b.n	8016d5e <_realloc_r+0x1e>
 8016d9a:	4635      	mov	r5, r6
 8016d9c:	e7df      	b.n	8016d5e <_realloc_r+0x1e>

08016d9e <__sfputc_r>:
 8016d9e:	6893      	ldr	r3, [r2, #8]
 8016da0:	3b01      	subs	r3, #1
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	b410      	push	{r4}
 8016da6:	6093      	str	r3, [r2, #8]
 8016da8:	da08      	bge.n	8016dbc <__sfputc_r+0x1e>
 8016daa:	6994      	ldr	r4, [r2, #24]
 8016dac:	42a3      	cmp	r3, r4
 8016dae:	db01      	blt.n	8016db4 <__sfputc_r+0x16>
 8016db0:	290a      	cmp	r1, #10
 8016db2:	d103      	bne.n	8016dbc <__sfputc_r+0x1e>
 8016db4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016db8:	f000 b94a 	b.w	8017050 <__swbuf_r>
 8016dbc:	6813      	ldr	r3, [r2, #0]
 8016dbe:	1c58      	adds	r0, r3, #1
 8016dc0:	6010      	str	r0, [r2, #0]
 8016dc2:	7019      	strb	r1, [r3, #0]
 8016dc4:	4608      	mov	r0, r1
 8016dc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016dca:	4770      	bx	lr

08016dcc <__sfputs_r>:
 8016dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016dce:	4606      	mov	r6, r0
 8016dd0:	460f      	mov	r7, r1
 8016dd2:	4614      	mov	r4, r2
 8016dd4:	18d5      	adds	r5, r2, r3
 8016dd6:	42ac      	cmp	r4, r5
 8016dd8:	d101      	bne.n	8016dde <__sfputs_r+0x12>
 8016dda:	2000      	movs	r0, #0
 8016ddc:	e007      	b.n	8016dee <__sfputs_r+0x22>
 8016dde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016de2:	463a      	mov	r2, r7
 8016de4:	4630      	mov	r0, r6
 8016de6:	f7ff ffda 	bl	8016d9e <__sfputc_r>
 8016dea:	1c43      	adds	r3, r0, #1
 8016dec:	d1f3      	bne.n	8016dd6 <__sfputs_r+0xa>
 8016dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016df0 <_vfiprintf_r>:
 8016df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016df4:	460d      	mov	r5, r1
 8016df6:	b09d      	sub	sp, #116	; 0x74
 8016df8:	4614      	mov	r4, r2
 8016dfa:	4698      	mov	r8, r3
 8016dfc:	4606      	mov	r6, r0
 8016dfe:	b118      	cbz	r0, 8016e08 <_vfiprintf_r+0x18>
 8016e00:	6983      	ldr	r3, [r0, #24]
 8016e02:	b90b      	cbnz	r3, 8016e08 <_vfiprintf_r+0x18>
 8016e04:	f7fb ff0c 	bl	8012c20 <__sinit>
 8016e08:	4b89      	ldr	r3, [pc, #548]	; (8017030 <_vfiprintf_r+0x240>)
 8016e0a:	429d      	cmp	r5, r3
 8016e0c:	d11b      	bne.n	8016e46 <_vfiprintf_r+0x56>
 8016e0e:	6875      	ldr	r5, [r6, #4]
 8016e10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016e12:	07d9      	lsls	r1, r3, #31
 8016e14:	d405      	bmi.n	8016e22 <_vfiprintf_r+0x32>
 8016e16:	89ab      	ldrh	r3, [r5, #12]
 8016e18:	059a      	lsls	r2, r3, #22
 8016e1a:	d402      	bmi.n	8016e22 <_vfiprintf_r+0x32>
 8016e1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016e1e:	f7fc f86e 	bl	8012efe <__retarget_lock_acquire_recursive>
 8016e22:	89ab      	ldrh	r3, [r5, #12]
 8016e24:	071b      	lsls	r3, r3, #28
 8016e26:	d501      	bpl.n	8016e2c <_vfiprintf_r+0x3c>
 8016e28:	692b      	ldr	r3, [r5, #16]
 8016e2a:	b9eb      	cbnz	r3, 8016e68 <_vfiprintf_r+0x78>
 8016e2c:	4629      	mov	r1, r5
 8016e2e:	4630      	mov	r0, r6
 8016e30:	f000 f960 	bl	80170f4 <__swsetup_r>
 8016e34:	b1c0      	cbz	r0, 8016e68 <_vfiprintf_r+0x78>
 8016e36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016e38:	07dc      	lsls	r4, r3, #31
 8016e3a:	d50e      	bpl.n	8016e5a <_vfiprintf_r+0x6a>
 8016e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016e40:	b01d      	add	sp, #116	; 0x74
 8016e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e46:	4b7b      	ldr	r3, [pc, #492]	; (8017034 <_vfiprintf_r+0x244>)
 8016e48:	429d      	cmp	r5, r3
 8016e4a:	d101      	bne.n	8016e50 <_vfiprintf_r+0x60>
 8016e4c:	68b5      	ldr	r5, [r6, #8]
 8016e4e:	e7df      	b.n	8016e10 <_vfiprintf_r+0x20>
 8016e50:	4b79      	ldr	r3, [pc, #484]	; (8017038 <_vfiprintf_r+0x248>)
 8016e52:	429d      	cmp	r5, r3
 8016e54:	bf08      	it	eq
 8016e56:	68f5      	ldreq	r5, [r6, #12]
 8016e58:	e7da      	b.n	8016e10 <_vfiprintf_r+0x20>
 8016e5a:	89ab      	ldrh	r3, [r5, #12]
 8016e5c:	0598      	lsls	r0, r3, #22
 8016e5e:	d4ed      	bmi.n	8016e3c <_vfiprintf_r+0x4c>
 8016e60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016e62:	f7fc f84d 	bl	8012f00 <__retarget_lock_release_recursive>
 8016e66:	e7e9      	b.n	8016e3c <_vfiprintf_r+0x4c>
 8016e68:	2300      	movs	r3, #0
 8016e6a:	9309      	str	r3, [sp, #36]	; 0x24
 8016e6c:	2320      	movs	r3, #32
 8016e6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016e72:	f8cd 800c 	str.w	r8, [sp, #12]
 8016e76:	2330      	movs	r3, #48	; 0x30
 8016e78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801703c <_vfiprintf_r+0x24c>
 8016e7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016e80:	f04f 0901 	mov.w	r9, #1
 8016e84:	4623      	mov	r3, r4
 8016e86:	469a      	mov	sl, r3
 8016e88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016e8c:	b10a      	cbz	r2, 8016e92 <_vfiprintf_r+0xa2>
 8016e8e:	2a25      	cmp	r2, #37	; 0x25
 8016e90:	d1f9      	bne.n	8016e86 <_vfiprintf_r+0x96>
 8016e92:	ebba 0b04 	subs.w	fp, sl, r4
 8016e96:	d00b      	beq.n	8016eb0 <_vfiprintf_r+0xc0>
 8016e98:	465b      	mov	r3, fp
 8016e9a:	4622      	mov	r2, r4
 8016e9c:	4629      	mov	r1, r5
 8016e9e:	4630      	mov	r0, r6
 8016ea0:	f7ff ff94 	bl	8016dcc <__sfputs_r>
 8016ea4:	3001      	adds	r0, #1
 8016ea6:	f000 80aa 	beq.w	8016ffe <_vfiprintf_r+0x20e>
 8016eaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016eac:	445a      	add	r2, fp
 8016eae:	9209      	str	r2, [sp, #36]	; 0x24
 8016eb0:	f89a 3000 	ldrb.w	r3, [sl]
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	f000 80a2 	beq.w	8016ffe <_vfiprintf_r+0x20e>
 8016eba:	2300      	movs	r3, #0
 8016ebc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016ec0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016ec4:	f10a 0a01 	add.w	sl, sl, #1
 8016ec8:	9304      	str	r3, [sp, #16]
 8016eca:	9307      	str	r3, [sp, #28]
 8016ecc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016ed0:	931a      	str	r3, [sp, #104]	; 0x68
 8016ed2:	4654      	mov	r4, sl
 8016ed4:	2205      	movs	r2, #5
 8016ed6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016eda:	4858      	ldr	r0, [pc, #352]	; (801703c <_vfiprintf_r+0x24c>)
 8016edc:	f7e9 f980 	bl	80001e0 <memchr>
 8016ee0:	9a04      	ldr	r2, [sp, #16]
 8016ee2:	b9d8      	cbnz	r0, 8016f1c <_vfiprintf_r+0x12c>
 8016ee4:	06d1      	lsls	r1, r2, #27
 8016ee6:	bf44      	itt	mi
 8016ee8:	2320      	movmi	r3, #32
 8016eea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016eee:	0713      	lsls	r3, r2, #28
 8016ef0:	bf44      	itt	mi
 8016ef2:	232b      	movmi	r3, #43	; 0x2b
 8016ef4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016ef8:	f89a 3000 	ldrb.w	r3, [sl]
 8016efc:	2b2a      	cmp	r3, #42	; 0x2a
 8016efe:	d015      	beq.n	8016f2c <_vfiprintf_r+0x13c>
 8016f00:	9a07      	ldr	r2, [sp, #28]
 8016f02:	4654      	mov	r4, sl
 8016f04:	2000      	movs	r0, #0
 8016f06:	f04f 0c0a 	mov.w	ip, #10
 8016f0a:	4621      	mov	r1, r4
 8016f0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016f10:	3b30      	subs	r3, #48	; 0x30
 8016f12:	2b09      	cmp	r3, #9
 8016f14:	d94e      	bls.n	8016fb4 <_vfiprintf_r+0x1c4>
 8016f16:	b1b0      	cbz	r0, 8016f46 <_vfiprintf_r+0x156>
 8016f18:	9207      	str	r2, [sp, #28]
 8016f1a:	e014      	b.n	8016f46 <_vfiprintf_r+0x156>
 8016f1c:	eba0 0308 	sub.w	r3, r0, r8
 8016f20:	fa09 f303 	lsl.w	r3, r9, r3
 8016f24:	4313      	orrs	r3, r2
 8016f26:	9304      	str	r3, [sp, #16]
 8016f28:	46a2      	mov	sl, r4
 8016f2a:	e7d2      	b.n	8016ed2 <_vfiprintf_r+0xe2>
 8016f2c:	9b03      	ldr	r3, [sp, #12]
 8016f2e:	1d19      	adds	r1, r3, #4
 8016f30:	681b      	ldr	r3, [r3, #0]
 8016f32:	9103      	str	r1, [sp, #12]
 8016f34:	2b00      	cmp	r3, #0
 8016f36:	bfbb      	ittet	lt
 8016f38:	425b      	neglt	r3, r3
 8016f3a:	f042 0202 	orrlt.w	r2, r2, #2
 8016f3e:	9307      	strge	r3, [sp, #28]
 8016f40:	9307      	strlt	r3, [sp, #28]
 8016f42:	bfb8      	it	lt
 8016f44:	9204      	strlt	r2, [sp, #16]
 8016f46:	7823      	ldrb	r3, [r4, #0]
 8016f48:	2b2e      	cmp	r3, #46	; 0x2e
 8016f4a:	d10c      	bne.n	8016f66 <_vfiprintf_r+0x176>
 8016f4c:	7863      	ldrb	r3, [r4, #1]
 8016f4e:	2b2a      	cmp	r3, #42	; 0x2a
 8016f50:	d135      	bne.n	8016fbe <_vfiprintf_r+0x1ce>
 8016f52:	9b03      	ldr	r3, [sp, #12]
 8016f54:	1d1a      	adds	r2, r3, #4
 8016f56:	681b      	ldr	r3, [r3, #0]
 8016f58:	9203      	str	r2, [sp, #12]
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	bfb8      	it	lt
 8016f5e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8016f62:	3402      	adds	r4, #2
 8016f64:	9305      	str	r3, [sp, #20]
 8016f66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801704c <_vfiprintf_r+0x25c>
 8016f6a:	7821      	ldrb	r1, [r4, #0]
 8016f6c:	2203      	movs	r2, #3
 8016f6e:	4650      	mov	r0, sl
 8016f70:	f7e9 f936 	bl	80001e0 <memchr>
 8016f74:	b140      	cbz	r0, 8016f88 <_vfiprintf_r+0x198>
 8016f76:	2340      	movs	r3, #64	; 0x40
 8016f78:	eba0 000a 	sub.w	r0, r0, sl
 8016f7c:	fa03 f000 	lsl.w	r0, r3, r0
 8016f80:	9b04      	ldr	r3, [sp, #16]
 8016f82:	4303      	orrs	r3, r0
 8016f84:	3401      	adds	r4, #1
 8016f86:	9304      	str	r3, [sp, #16]
 8016f88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016f8c:	482c      	ldr	r0, [pc, #176]	; (8017040 <_vfiprintf_r+0x250>)
 8016f8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016f92:	2206      	movs	r2, #6
 8016f94:	f7e9 f924 	bl	80001e0 <memchr>
 8016f98:	2800      	cmp	r0, #0
 8016f9a:	d03f      	beq.n	801701c <_vfiprintf_r+0x22c>
 8016f9c:	4b29      	ldr	r3, [pc, #164]	; (8017044 <_vfiprintf_r+0x254>)
 8016f9e:	bb1b      	cbnz	r3, 8016fe8 <_vfiprintf_r+0x1f8>
 8016fa0:	9b03      	ldr	r3, [sp, #12]
 8016fa2:	3307      	adds	r3, #7
 8016fa4:	f023 0307 	bic.w	r3, r3, #7
 8016fa8:	3308      	adds	r3, #8
 8016faa:	9303      	str	r3, [sp, #12]
 8016fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016fae:	443b      	add	r3, r7
 8016fb0:	9309      	str	r3, [sp, #36]	; 0x24
 8016fb2:	e767      	b.n	8016e84 <_vfiprintf_r+0x94>
 8016fb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8016fb8:	460c      	mov	r4, r1
 8016fba:	2001      	movs	r0, #1
 8016fbc:	e7a5      	b.n	8016f0a <_vfiprintf_r+0x11a>
 8016fbe:	2300      	movs	r3, #0
 8016fc0:	3401      	adds	r4, #1
 8016fc2:	9305      	str	r3, [sp, #20]
 8016fc4:	4619      	mov	r1, r3
 8016fc6:	f04f 0c0a 	mov.w	ip, #10
 8016fca:	4620      	mov	r0, r4
 8016fcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016fd0:	3a30      	subs	r2, #48	; 0x30
 8016fd2:	2a09      	cmp	r2, #9
 8016fd4:	d903      	bls.n	8016fde <_vfiprintf_r+0x1ee>
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d0c5      	beq.n	8016f66 <_vfiprintf_r+0x176>
 8016fda:	9105      	str	r1, [sp, #20]
 8016fdc:	e7c3      	b.n	8016f66 <_vfiprintf_r+0x176>
 8016fde:	fb0c 2101 	mla	r1, ip, r1, r2
 8016fe2:	4604      	mov	r4, r0
 8016fe4:	2301      	movs	r3, #1
 8016fe6:	e7f0      	b.n	8016fca <_vfiprintf_r+0x1da>
 8016fe8:	ab03      	add	r3, sp, #12
 8016fea:	9300      	str	r3, [sp, #0]
 8016fec:	462a      	mov	r2, r5
 8016fee:	4b16      	ldr	r3, [pc, #88]	; (8017048 <_vfiprintf_r+0x258>)
 8016ff0:	a904      	add	r1, sp, #16
 8016ff2:	4630      	mov	r0, r6
 8016ff4:	f7fc f8d0 	bl	8013198 <_printf_float>
 8016ff8:	4607      	mov	r7, r0
 8016ffa:	1c78      	adds	r0, r7, #1
 8016ffc:	d1d6      	bne.n	8016fac <_vfiprintf_r+0x1bc>
 8016ffe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017000:	07d9      	lsls	r1, r3, #31
 8017002:	d405      	bmi.n	8017010 <_vfiprintf_r+0x220>
 8017004:	89ab      	ldrh	r3, [r5, #12]
 8017006:	059a      	lsls	r2, r3, #22
 8017008:	d402      	bmi.n	8017010 <_vfiprintf_r+0x220>
 801700a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801700c:	f7fb ff78 	bl	8012f00 <__retarget_lock_release_recursive>
 8017010:	89ab      	ldrh	r3, [r5, #12]
 8017012:	065b      	lsls	r3, r3, #25
 8017014:	f53f af12 	bmi.w	8016e3c <_vfiprintf_r+0x4c>
 8017018:	9809      	ldr	r0, [sp, #36]	; 0x24
 801701a:	e711      	b.n	8016e40 <_vfiprintf_r+0x50>
 801701c:	ab03      	add	r3, sp, #12
 801701e:	9300      	str	r3, [sp, #0]
 8017020:	462a      	mov	r2, r5
 8017022:	4b09      	ldr	r3, [pc, #36]	; (8017048 <_vfiprintf_r+0x258>)
 8017024:	a904      	add	r1, sp, #16
 8017026:	4630      	mov	r0, r6
 8017028:	f7fc fb5a 	bl	80136e0 <_printf_i>
 801702c:	e7e4      	b.n	8016ff8 <_vfiprintf_r+0x208>
 801702e:	bf00      	nop
 8017030:	08018e94 	.word	0x08018e94
 8017034:	08018eb4 	.word	0x08018eb4
 8017038:	08018e74 	.word	0x08018e74
 801703c:	080191c4 	.word	0x080191c4
 8017040:	080191ce 	.word	0x080191ce
 8017044:	08013199 	.word	0x08013199
 8017048:	08016dcd 	.word	0x08016dcd
 801704c:	080191ca 	.word	0x080191ca

08017050 <__swbuf_r>:
 8017050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017052:	460e      	mov	r6, r1
 8017054:	4614      	mov	r4, r2
 8017056:	4605      	mov	r5, r0
 8017058:	b118      	cbz	r0, 8017062 <__swbuf_r+0x12>
 801705a:	6983      	ldr	r3, [r0, #24]
 801705c:	b90b      	cbnz	r3, 8017062 <__swbuf_r+0x12>
 801705e:	f7fb fddf 	bl	8012c20 <__sinit>
 8017062:	4b21      	ldr	r3, [pc, #132]	; (80170e8 <__swbuf_r+0x98>)
 8017064:	429c      	cmp	r4, r3
 8017066:	d12b      	bne.n	80170c0 <__swbuf_r+0x70>
 8017068:	686c      	ldr	r4, [r5, #4]
 801706a:	69a3      	ldr	r3, [r4, #24]
 801706c:	60a3      	str	r3, [r4, #8]
 801706e:	89a3      	ldrh	r3, [r4, #12]
 8017070:	071a      	lsls	r2, r3, #28
 8017072:	d52f      	bpl.n	80170d4 <__swbuf_r+0x84>
 8017074:	6923      	ldr	r3, [r4, #16]
 8017076:	b36b      	cbz	r3, 80170d4 <__swbuf_r+0x84>
 8017078:	6923      	ldr	r3, [r4, #16]
 801707a:	6820      	ldr	r0, [r4, #0]
 801707c:	1ac0      	subs	r0, r0, r3
 801707e:	6963      	ldr	r3, [r4, #20]
 8017080:	b2f6      	uxtb	r6, r6
 8017082:	4283      	cmp	r3, r0
 8017084:	4637      	mov	r7, r6
 8017086:	dc04      	bgt.n	8017092 <__swbuf_r+0x42>
 8017088:	4621      	mov	r1, r4
 801708a:	4628      	mov	r0, r5
 801708c:	f7fe fb7c 	bl	8015788 <_fflush_r>
 8017090:	bb30      	cbnz	r0, 80170e0 <__swbuf_r+0x90>
 8017092:	68a3      	ldr	r3, [r4, #8]
 8017094:	3b01      	subs	r3, #1
 8017096:	60a3      	str	r3, [r4, #8]
 8017098:	6823      	ldr	r3, [r4, #0]
 801709a:	1c5a      	adds	r2, r3, #1
 801709c:	6022      	str	r2, [r4, #0]
 801709e:	701e      	strb	r6, [r3, #0]
 80170a0:	6963      	ldr	r3, [r4, #20]
 80170a2:	3001      	adds	r0, #1
 80170a4:	4283      	cmp	r3, r0
 80170a6:	d004      	beq.n	80170b2 <__swbuf_r+0x62>
 80170a8:	89a3      	ldrh	r3, [r4, #12]
 80170aa:	07db      	lsls	r3, r3, #31
 80170ac:	d506      	bpl.n	80170bc <__swbuf_r+0x6c>
 80170ae:	2e0a      	cmp	r6, #10
 80170b0:	d104      	bne.n	80170bc <__swbuf_r+0x6c>
 80170b2:	4621      	mov	r1, r4
 80170b4:	4628      	mov	r0, r5
 80170b6:	f7fe fb67 	bl	8015788 <_fflush_r>
 80170ba:	b988      	cbnz	r0, 80170e0 <__swbuf_r+0x90>
 80170bc:	4638      	mov	r0, r7
 80170be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80170c0:	4b0a      	ldr	r3, [pc, #40]	; (80170ec <__swbuf_r+0x9c>)
 80170c2:	429c      	cmp	r4, r3
 80170c4:	d101      	bne.n	80170ca <__swbuf_r+0x7a>
 80170c6:	68ac      	ldr	r4, [r5, #8]
 80170c8:	e7cf      	b.n	801706a <__swbuf_r+0x1a>
 80170ca:	4b09      	ldr	r3, [pc, #36]	; (80170f0 <__swbuf_r+0xa0>)
 80170cc:	429c      	cmp	r4, r3
 80170ce:	bf08      	it	eq
 80170d0:	68ec      	ldreq	r4, [r5, #12]
 80170d2:	e7ca      	b.n	801706a <__swbuf_r+0x1a>
 80170d4:	4621      	mov	r1, r4
 80170d6:	4628      	mov	r0, r5
 80170d8:	f000 f80c 	bl	80170f4 <__swsetup_r>
 80170dc:	2800      	cmp	r0, #0
 80170de:	d0cb      	beq.n	8017078 <__swbuf_r+0x28>
 80170e0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80170e4:	e7ea      	b.n	80170bc <__swbuf_r+0x6c>
 80170e6:	bf00      	nop
 80170e8:	08018e94 	.word	0x08018e94
 80170ec:	08018eb4 	.word	0x08018eb4
 80170f0:	08018e74 	.word	0x08018e74

080170f4 <__swsetup_r>:
 80170f4:	4b32      	ldr	r3, [pc, #200]	; (80171c0 <__swsetup_r+0xcc>)
 80170f6:	b570      	push	{r4, r5, r6, lr}
 80170f8:	681d      	ldr	r5, [r3, #0]
 80170fa:	4606      	mov	r6, r0
 80170fc:	460c      	mov	r4, r1
 80170fe:	b125      	cbz	r5, 801710a <__swsetup_r+0x16>
 8017100:	69ab      	ldr	r3, [r5, #24]
 8017102:	b913      	cbnz	r3, 801710a <__swsetup_r+0x16>
 8017104:	4628      	mov	r0, r5
 8017106:	f7fb fd8b 	bl	8012c20 <__sinit>
 801710a:	4b2e      	ldr	r3, [pc, #184]	; (80171c4 <__swsetup_r+0xd0>)
 801710c:	429c      	cmp	r4, r3
 801710e:	d10f      	bne.n	8017130 <__swsetup_r+0x3c>
 8017110:	686c      	ldr	r4, [r5, #4]
 8017112:	89a3      	ldrh	r3, [r4, #12]
 8017114:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017118:	0719      	lsls	r1, r3, #28
 801711a:	d42c      	bmi.n	8017176 <__swsetup_r+0x82>
 801711c:	06dd      	lsls	r5, r3, #27
 801711e:	d411      	bmi.n	8017144 <__swsetup_r+0x50>
 8017120:	2309      	movs	r3, #9
 8017122:	6033      	str	r3, [r6, #0]
 8017124:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017128:	81a3      	strh	r3, [r4, #12]
 801712a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801712e:	e03e      	b.n	80171ae <__swsetup_r+0xba>
 8017130:	4b25      	ldr	r3, [pc, #148]	; (80171c8 <__swsetup_r+0xd4>)
 8017132:	429c      	cmp	r4, r3
 8017134:	d101      	bne.n	801713a <__swsetup_r+0x46>
 8017136:	68ac      	ldr	r4, [r5, #8]
 8017138:	e7eb      	b.n	8017112 <__swsetup_r+0x1e>
 801713a:	4b24      	ldr	r3, [pc, #144]	; (80171cc <__swsetup_r+0xd8>)
 801713c:	429c      	cmp	r4, r3
 801713e:	bf08      	it	eq
 8017140:	68ec      	ldreq	r4, [r5, #12]
 8017142:	e7e6      	b.n	8017112 <__swsetup_r+0x1e>
 8017144:	0758      	lsls	r0, r3, #29
 8017146:	d512      	bpl.n	801716e <__swsetup_r+0x7a>
 8017148:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801714a:	b141      	cbz	r1, 801715e <__swsetup_r+0x6a>
 801714c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017150:	4299      	cmp	r1, r3
 8017152:	d002      	beq.n	801715a <__swsetup_r+0x66>
 8017154:	4630      	mov	r0, r6
 8017156:	f7ff fbd7 	bl	8016908 <_free_r>
 801715a:	2300      	movs	r3, #0
 801715c:	6363      	str	r3, [r4, #52]	; 0x34
 801715e:	89a3      	ldrh	r3, [r4, #12]
 8017160:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017164:	81a3      	strh	r3, [r4, #12]
 8017166:	2300      	movs	r3, #0
 8017168:	6063      	str	r3, [r4, #4]
 801716a:	6923      	ldr	r3, [r4, #16]
 801716c:	6023      	str	r3, [r4, #0]
 801716e:	89a3      	ldrh	r3, [r4, #12]
 8017170:	f043 0308 	orr.w	r3, r3, #8
 8017174:	81a3      	strh	r3, [r4, #12]
 8017176:	6923      	ldr	r3, [r4, #16]
 8017178:	b94b      	cbnz	r3, 801718e <__swsetup_r+0x9a>
 801717a:	89a3      	ldrh	r3, [r4, #12]
 801717c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017184:	d003      	beq.n	801718e <__swsetup_r+0x9a>
 8017186:	4621      	mov	r1, r4
 8017188:	4630      	mov	r0, r6
 801718a:	f000 f84d 	bl	8017228 <__smakebuf_r>
 801718e:	89a0      	ldrh	r0, [r4, #12]
 8017190:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017194:	f010 0301 	ands.w	r3, r0, #1
 8017198:	d00a      	beq.n	80171b0 <__swsetup_r+0xbc>
 801719a:	2300      	movs	r3, #0
 801719c:	60a3      	str	r3, [r4, #8]
 801719e:	6963      	ldr	r3, [r4, #20]
 80171a0:	425b      	negs	r3, r3
 80171a2:	61a3      	str	r3, [r4, #24]
 80171a4:	6923      	ldr	r3, [r4, #16]
 80171a6:	b943      	cbnz	r3, 80171ba <__swsetup_r+0xc6>
 80171a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80171ac:	d1ba      	bne.n	8017124 <__swsetup_r+0x30>
 80171ae:	bd70      	pop	{r4, r5, r6, pc}
 80171b0:	0781      	lsls	r1, r0, #30
 80171b2:	bf58      	it	pl
 80171b4:	6963      	ldrpl	r3, [r4, #20]
 80171b6:	60a3      	str	r3, [r4, #8]
 80171b8:	e7f4      	b.n	80171a4 <__swsetup_r+0xb0>
 80171ba:	2000      	movs	r0, #0
 80171bc:	e7f7      	b.n	80171ae <__swsetup_r+0xba>
 80171be:	bf00      	nop
 80171c0:	20000180 	.word	0x20000180
 80171c4:	08018e94 	.word	0x08018e94
 80171c8:	08018eb4 	.word	0x08018eb4
 80171cc:	08018e74 	.word	0x08018e74

080171d0 <abort>:
 80171d0:	b508      	push	{r3, lr}
 80171d2:	2006      	movs	r0, #6
 80171d4:	f000 f898 	bl	8017308 <raise>
 80171d8:	2001      	movs	r0, #1
 80171da:	f7ef fb31 	bl	8006840 <_exit>

080171de <__swhatbuf_r>:
 80171de:	b570      	push	{r4, r5, r6, lr}
 80171e0:	460e      	mov	r6, r1
 80171e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80171e6:	2900      	cmp	r1, #0
 80171e8:	b096      	sub	sp, #88	; 0x58
 80171ea:	4614      	mov	r4, r2
 80171ec:	461d      	mov	r5, r3
 80171ee:	da08      	bge.n	8017202 <__swhatbuf_r+0x24>
 80171f0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80171f4:	2200      	movs	r2, #0
 80171f6:	602a      	str	r2, [r5, #0]
 80171f8:	061a      	lsls	r2, r3, #24
 80171fa:	d410      	bmi.n	801721e <__swhatbuf_r+0x40>
 80171fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017200:	e00e      	b.n	8017220 <__swhatbuf_r+0x42>
 8017202:	466a      	mov	r2, sp
 8017204:	f000 f89c 	bl	8017340 <_fstat_r>
 8017208:	2800      	cmp	r0, #0
 801720a:	dbf1      	blt.n	80171f0 <__swhatbuf_r+0x12>
 801720c:	9a01      	ldr	r2, [sp, #4]
 801720e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017212:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017216:	425a      	negs	r2, r3
 8017218:	415a      	adcs	r2, r3
 801721a:	602a      	str	r2, [r5, #0]
 801721c:	e7ee      	b.n	80171fc <__swhatbuf_r+0x1e>
 801721e:	2340      	movs	r3, #64	; 0x40
 8017220:	2000      	movs	r0, #0
 8017222:	6023      	str	r3, [r4, #0]
 8017224:	b016      	add	sp, #88	; 0x58
 8017226:	bd70      	pop	{r4, r5, r6, pc}

08017228 <__smakebuf_r>:
 8017228:	898b      	ldrh	r3, [r1, #12]
 801722a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801722c:	079d      	lsls	r5, r3, #30
 801722e:	4606      	mov	r6, r0
 8017230:	460c      	mov	r4, r1
 8017232:	d507      	bpl.n	8017244 <__smakebuf_r+0x1c>
 8017234:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017238:	6023      	str	r3, [r4, #0]
 801723a:	6123      	str	r3, [r4, #16]
 801723c:	2301      	movs	r3, #1
 801723e:	6163      	str	r3, [r4, #20]
 8017240:	b002      	add	sp, #8
 8017242:	bd70      	pop	{r4, r5, r6, pc}
 8017244:	ab01      	add	r3, sp, #4
 8017246:	466a      	mov	r2, sp
 8017248:	f7ff ffc9 	bl	80171de <__swhatbuf_r>
 801724c:	9900      	ldr	r1, [sp, #0]
 801724e:	4605      	mov	r5, r0
 8017250:	4630      	mov	r0, r6
 8017252:	f7fb fe8d 	bl	8012f70 <_malloc_r>
 8017256:	b948      	cbnz	r0, 801726c <__smakebuf_r+0x44>
 8017258:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801725c:	059a      	lsls	r2, r3, #22
 801725e:	d4ef      	bmi.n	8017240 <__smakebuf_r+0x18>
 8017260:	f023 0303 	bic.w	r3, r3, #3
 8017264:	f043 0302 	orr.w	r3, r3, #2
 8017268:	81a3      	strh	r3, [r4, #12]
 801726a:	e7e3      	b.n	8017234 <__smakebuf_r+0xc>
 801726c:	4b0d      	ldr	r3, [pc, #52]	; (80172a4 <__smakebuf_r+0x7c>)
 801726e:	62b3      	str	r3, [r6, #40]	; 0x28
 8017270:	89a3      	ldrh	r3, [r4, #12]
 8017272:	6020      	str	r0, [r4, #0]
 8017274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017278:	81a3      	strh	r3, [r4, #12]
 801727a:	9b00      	ldr	r3, [sp, #0]
 801727c:	6163      	str	r3, [r4, #20]
 801727e:	9b01      	ldr	r3, [sp, #4]
 8017280:	6120      	str	r0, [r4, #16]
 8017282:	b15b      	cbz	r3, 801729c <__smakebuf_r+0x74>
 8017284:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017288:	4630      	mov	r0, r6
 801728a:	f000 f86b 	bl	8017364 <_isatty_r>
 801728e:	b128      	cbz	r0, 801729c <__smakebuf_r+0x74>
 8017290:	89a3      	ldrh	r3, [r4, #12]
 8017292:	f023 0303 	bic.w	r3, r3, #3
 8017296:	f043 0301 	orr.w	r3, r3, #1
 801729a:	81a3      	strh	r3, [r4, #12]
 801729c:	89a0      	ldrh	r0, [r4, #12]
 801729e:	4305      	orrs	r5, r0
 80172a0:	81a5      	strh	r5, [r4, #12]
 80172a2:	e7cd      	b.n	8017240 <__smakebuf_r+0x18>
 80172a4:	08012bb9 	.word	0x08012bb9

080172a8 <_malloc_usable_size_r>:
 80172a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80172ac:	1f18      	subs	r0, r3, #4
 80172ae:	2b00      	cmp	r3, #0
 80172b0:	bfbc      	itt	lt
 80172b2:	580b      	ldrlt	r3, [r1, r0]
 80172b4:	18c0      	addlt	r0, r0, r3
 80172b6:	4770      	bx	lr

080172b8 <_raise_r>:
 80172b8:	291f      	cmp	r1, #31
 80172ba:	b538      	push	{r3, r4, r5, lr}
 80172bc:	4604      	mov	r4, r0
 80172be:	460d      	mov	r5, r1
 80172c0:	d904      	bls.n	80172cc <_raise_r+0x14>
 80172c2:	2316      	movs	r3, #22
 80172c4:	6003      	str	r3, [r0, #0]
 80172c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80172ca:	bd38      	pop	{r3, r4, r5, pc}
 80172cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80172ce:	b112      	cbz	r2, 80172d6 <_raise_r+0x1e>
 80172d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80172d4:	b94b      	cbnz	r3, 80172ea <_raise_r+0x32>
 80172d6:	4620      	mov	r0, r4
 80172d8:	f000 f830 	bl	801733c <_getpid_r>
 80172dc:	462a      	mov	r2, r5
 80172de:	4601      	mov	r1, r0
 80172e0:	4620      	mov	r0, r4
 80172e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80172e6:	f000 b817 	b.w	8017318 <_kill_r>
 80172ea:	2b01      	cmp	r3, #1
 80172ec:	d00a      	beq.n	8017304 <_raise_r+0x4c>
 80172ee:	1c59      	adds	r1, r3, #1
 80172f0:	d103      	bne.n	80172fa <_raise_r+0x42>
 80172f2:	2316      	movs	r3, #22
 80172f4:	6003      	str	r3, [r0, #0]
 80172f6:	2001      	movs	r0, #1
 80172f8:	e7e7      	b.n	80172ca <_raise_r+0x12>
 80172fa:	2400      	movs	r4, #0
 80172fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017300:	4628      	mov	r0, r5
 8017302:	4798      	blx	r3
 8017304:	2000      	movs	r0, #0
 8017306:	e7e0      	b.n	80172ca <_raise_r+0x12>

08017308 <raise>:
 8017308:	4b02      	ldr	r3, [pc, #8]	; (8017314 <raise+0xc>)
 801730a:	4601      	mov	r1, r0
 801730c:	6818      	ldr	r0, [r3, #0]
 801730e:	f7ff bfd3 	b.w	80172b8 <_raise_r>
 8017312:	bf00      	nop
 8017314:	20000180 	.word	0x20000180

08017318 <_kill_r>:
 8017318:	b538      	push	{r3, r4, r5, lr}
 801731a:	4d07      	ldr	r5, [pc, #28]	; (8017338 <_kill_r+0x20>)
 801731c:	2300      	movs	r3, #0
 801731e:	4604      	mov	r4, r0
 8017320:	4608      	mov	r0, r1
 8017322:	4611      	mov	r1, r2
 8017324:	602b      	str	r3, [r5, #0]
 8017326:	f7ef fa7b 	bl	8006820 <_kill>
 801732a:	1c43      	adds	r3, r0, #1
 801732c:	d102      	bne.n	8017334 <_kill_r+0x1c>
 801732e:	682b      	ldr	r3, [r5, #0]
 8017330:	b103      	cbz	r3, 8017334 <_kill_r+0x1c>
 8017332:	6023      	str	r3, [r4, #0]
 8017334:	bd38      	pop	{r3, r4, r5, pc}
 8017336:	bf00      	nop
 8017338:	200082e4 	.word	0x200082e4

0801733c <_getpid_r>:
 801733c:	f7ef ba68 	b.w	8006810 <_getpid>

08017340 <_fstat_r>:
 8017340:	b538      	push	{r3, r4, r5, lr}
 8017342:	4d07      	ldr	r5, [pc, #28]	; (8017360 <_fstat_r+0x20>)
 8017344:	2300      	movs	r3, #0
 8017346:	4604      	mov	r4, r0
 8017348:	4608      	mov	r0, r1
 801734a:	4611      	mov	r1, r2
 801734c:	602b      	str	r3, [r5, #0]
 801734e:	f7ef fac6 	bl	80068de <_fstat>
 8017352:	1c43      	adds	r3, r0, #1
 8017354:	d102      	bne.n	801735c <_fstat_r+0x1c>
 8017356:	682b      	ldr	r3, [r5, #0]
 8017358:	b103      	cbz	r3, 801735c <_fstat_r+0x1c>
 801735a:	6023      	str	r3, [r4, #0]
 801735c:	bd38      	pop	{r3, r4, r5, pc}
 801735e:	bf00      	nop
 8017360:	200082e4 	.word	0x200082e4

08017364 <_isatty_r>:
 8017364:	b538      	push	{r3, r4, r5, lr}
 8017366:	4d06      	ldr	r5, [pc, #24]	; (8017380 <_isatty_r+0x1c>)
 8017368:	2300      	movs	r3, #0
 801736a:	4604      	mov	r4, r0
 801736c:	4608      	mov	r0, r1
 801736e:	602b      	str	r3, [r5, #0]
 8017370:	f7ef fac5 	bl	80068fe <_isatty>
 8017374:	1c43      	adds	r3, r0, #1
 8017376:	d102      	bne.n	801737e <_isatty_r+0x1a>
 8017378:	682b      	ldr	r3, [r5, #0]
 801737a:	b103      	cbz	r3, 801737e <_isatty_r+0x1a>
 801737c:	6023      	str	r3, [r4, #0]
 801737e:	bd38      	pop	{r3, r4, r5, pc}
 8017380:	200082e4 	.word	0x200082e4

08017384 <_init>:
 8017384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017386:	bf00      	nop
 8017388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801738a:	bc08      	pop	{r3}
 801738c:	469e      	mov	lr, r3
 801738e:	4770      	bx	lr

08017390 <_fini>:
 8017390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017392:	bf00      	nop
 8017394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017396:	bc08      	pop	{r3}
 8017398:	469e      	mov	lr, r3
 801739a:	4770      	bx	lr
