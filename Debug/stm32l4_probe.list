
stm32l4_probe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001304c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b0c  080131e0  080131e0  000231e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014cec  08014cec  00030410  2**0
                  CONTENTS
  4 .ARM          00000008  08014cec  08014cec  00024cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014cf4  08014cf4  00030410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014cf4  08014cf4  00024cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014cf8  08014cf8  00024cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000410  20000000  08014cfc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000032c8  20000410  0801510c  00030410  2**3
                  ALLOC
 10 ._user_heap_stack 00001000  200036d8  0801510c  000336d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030410  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eff7  00000000  00000000  00030440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a16  00000000  00000000  0004f437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ad0  00000000  00000000  00052e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019e0  00000000  00000000  00054920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b316  00000000  00000000  00056300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fd70  00000000  00000000  00081616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102549  00000000  00000000  000a1386  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a38cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008900  00000000  00000000  001a3920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000410 	.word	0x20000410
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080131c4 	.word	0x080131c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000414 	.word	0x20000414
 80001cc:	080131c4 	.word	0x080131c4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ca6:	f000 b9f5 	b.w	8001094 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f883 	bl	8000dc4 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f876 	bl	8000dc4 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f865 	bl	8000dc4 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f857 	bl	8000dc4 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d3c:	f000 b9aa 	b.w	8001094 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f83c 	bl	8000dc4 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_d2lz>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	460d      	mov	r5, r1
 8000d62:	f7ff febb 	bl	8000adc <__aeabi_dcmplt>
 8000d66:	b928      	cbnz	r0, 8000d74 <__aeabi_d2lz+0x1c>
 8000d68:	4620      	mov	r0, r4
 8000d6a:	4629      	mov	r1, r5
 8000d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d70:	f000 b80a 	b.w	8000d88 <__aeabi_d2ulz>
 8000d74:	4620      	mov	r0, r4
 8000d76:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d7a:	f000 f805 	bl	8000d88 <__aeabi_d2ulz>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
 8000d86:	bf00      	nop

08000d88 <__aeabi_d2ulz>:
 8000d88:	b5d0      	push	{r4, r6, r7, lr}
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__aeabi_d2ulz+0x34>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4606      	mov	r6, r0
 8000d90:	460f      	mov	r7, r1
 8000d92:	f7ff fc31 	bl	80005f8 <__aeabi_dmul>
 8000d96:	f7ff ff07 	bl	8000ba8 <__aeabi_d2uiz>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	f7ff fbb2 	bl	8000504 <__aeabi_ui2d>
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <__aeabi_d2ulz+0x38>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f7ff fc28 	bl	80005f8 <__aeabi_dmul>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4630      	mov	r0, r6
 8000dae:	4639      	mov	r1, r7
 8000db0:	f7ff fa6a 	bl	8000288 <__aeabi_dsub>
 8000db4:	f7ff fef8 	bl	8000ba8 <__aeabi_d2uiz>
 8000db8:	4621      	mov	r1, r4
 8000dba:	bdd0      	pop	{r4, r6, r7, pc}
 8000dbc:	3df00000 	.word	0x3df00000
 8000dc0:	41f00000 	.word	0x41f00000

08000dc4 <__udivmoddi4>:
 8000dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc8:	9d08      	ldr	r5, [sp, #32]
 8000dca:	4604      	mov	r4, r0
 8000dcc:	468e      	mov	lr, r1
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d14d      	bne.n	8000e6e <__udivmoddi4+0xaa>
 8000dd2:	428a      	cmp	r2, r1
 8000dd4:	4694      	mov	ip, r2
 8000dd6:	d969      	bls.n	8000eac <__udivmoddi4+0xe8>
 8000dd8:	fab2 f282 	clz	r2, r2
 8000ddc:	b152      	cbz	r2, 8000df4 <__udivmoddi4+0x30>
 8000dde:	fa01 f302 	lsl.w	r3, r1, r2
 8000de2:	f1c2 0120 	rsb	r1, r2, #32
 8000de6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dea:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dee:	ea41 0e03 	orr.w	lr, r1, r3
 8000df2:	4094      	lsls	r4, r2
 8000df4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df8:	0c21      	lsrs	r1, r4, #16
 8000dfa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dfe:	fa1f f78c 	uxth.w	r7, ip
 8000e02:	fb08 e316 	mls	r3, r8, r6, lr
 8000e06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e0a:	fb06 f107 	mul.w	r1, r6, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x64>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000e1a:	f080 811f 	bcs.w	800105c <__udivmoddi4+0x298>
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	f240 811c 	bls.w	800105c <__udivmoddi4+0x298>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b2a4      	uxth	r4, r4
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e38:	fb00 f707 	mul.w	r7, r0, r7
 8000e3c:	42a7      	cmp	r7, r4
 8000e3e:	d90a      	bls.n	8000e56 <__udivmoddi4+0x92>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e48:	f080 810a 	bcs.w	8001060 <__udivmoddi4+0x29c>
 8000e4c:	42a7      	cmp	r7, r4
 8000e4e:	f240 8107 	bls.w	8001060 <__udivmoddi4+0x29c>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e5a:	1be4      	subs	r4, r4, r7
 8000e5c:	2600      	movs	r6, #0
 8000e5e:	b11d      	cbz	r5, 8000e68 <__udivmoddi4+0xa4>
 8000e60:	40d4      	lsrs	r4, r2
 8000e62:	2300      	movs	r3, #0
 8000e64:	e9c5 4300 	strd	r4, r3, [r5]
 8000e68:	4631      	mov	r1, r6
 8000e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d909      	bls.n	8000e86 <__udivmoddi4+0xc2>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	f000 80ef 	beq.w	8001056 <__udivmoddi4+0x292>
 8000e78:	2600      	movs	r6, #0
 8000e7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7e:	4630      	mov	r0, r6
 8000e80:	4631      	mov	r1, r6
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	fab3 f683 	clz	r6, r3
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d14a      	bne.n	8000f24 <__udivmoddi4+0x160>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d302      	bcc.n	8000e98 <__udivmoddi4+0xd4>
 8000e92:	4282      	cmp	r2, r0
 8000e94:	f200 80f9 	bhi.w	800108a <__udivmoddi4+0x2c6>
 8000e98:	1a84      	subs	r4, r0, r2
 8000e9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	469e      	mov	lr, r3
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d0e0      	beq.n	8000e68 <__udivmoddi4+0xa4>
 8000ea6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eaa:	e7dd      	b.n	8000e68 <__udivmoddi4+0xa4>
 8000eac:	b902      	cbnz	r2, 8000eb0 <__udivmoddi4+0xec>
 8000eae:	deff      	udf	#255	; 0xff
 8000eb0:	fab2 f282 	clz	r2, r2
 8000eb4:	2a00      	cmp	r2, #0
 8000eb6:	f040 8092 	bne.w	8000fde <__udivmoddi4+0x21a>
 8000eba:	eba1 010c 	sub.w	r1, r1, ip
 8000ebe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec2:	fa1f fe8c 	uxth.w	lr, ip
 8000ec6:	2601      	movs	r6, #1
 8000ec8:	0c20      	lsrs	r0, r4, #16
 8000eca:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ece:	fb07 1113 	mls	r1, r7, r3, r1
 8000ed2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed6:	fb0e f003 	mul.w	r0, lr, r3
 8000eda:	4288      	cmp	r0, r1
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x12c>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x12a>
 8000ee8:	4288      	cmp	r0, r1
 8000eea:	f200 80cb 	bhi.w	8001084 <__udivmoddi4+0x2c0>
 8000eee:	4643      	mov	r3, r8
 8000ef0:	1a09      	subs	r1, r1, r0
 8000ef2:	b2a4      	uxth	r4, r4
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1110 	mls	r1, r7, r0, r1
 8000efc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f00:	fb0e fe00 	mul.w	lr, lr, r0
 8000f04:	45a6      	cmp	lr, r4
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x156>
 8000f08:	eb1c 0404 	adds.w	r4, ip, r4
 8000f0c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f10:	d202      	bcs.n	8000f18 <__udivmoddi4+0x154>
 8000f12:	45a6      	cmp	lr, r4
 8000f14:	f200 80bb 	bhi.w	800108e <__udivmoddi4+0x2ca>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	eba4 040e 	sub.w	r4, r4, lr
 8000f1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f22:	e79c      	b.n	8000e5e <__udivmoddi4+0x9a>
 8000f24:	f1c6 0720 	rsb	r7, r6, #32
 8000f28:	40b3      	lsls	r3, r6
 8000f2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f32:	fa20 f407 	lsr.w	r4, r0, r7
 8000f36:	fa01 f306 	lsl.w	r3, r1, r6
 8000f3a:	431c      	orrs	r4, r3
 8000f3c:	40f9      	lsrs	r1, r7
 8000f3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f42:	fa00 f306 	lsl.w	r3, r0, r6
 8000f46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f4a:	0c20      	lsrs	r0, r4, #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fb09 1118 	mls	r1, r9, r8, r1
 8000f54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f58:	fb08 f00e 	mul.w	r0, r8, lr
 8000f5c:	4288      	cmp	r0, r1
 8000f5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f62:	d90b      	bls.n	8000f7c <__udivmoddi4+0x1b8>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f6c:	f080 8088 	bcs.w	8001080 <__udivmoddi4+0x2bc>
 8000f70:	4288      	cmp	r0, r1
 8000f72:	f240 8085 	bls.w	8001080 <__udivmoddi4+0x2bc>
 8000f76:	f1a8 0802 	sub.w	r8, r8, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1a09      	subs	r1, r1, r0
 8000f7e:	b2a4      	uxth	r4, r4
 8000f80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f84:	fb09 1110 	mls	r1, r9, r0, r1
 8000f88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f90:	458e      	cmp	lr, r1
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x1e2>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f9c:	d26c      	bcs.n	8001078 <__udivmoddi4+0x2b4>
 8000f9e:	458e      	cmp	lr, r1
 8000fa0:	d96a      	bls.n	8001078 <__udivmoddi4+0x2b4>
 8000fa2:	3802      	subs	r0, #2
 8000fa4:	4461      	add	r1, ip
 8000fa6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000faa:	fba0 9402 	umull	r9, r4, r0, r2
 8000fae:	eba1 010e 	sub.w	r1, r1, lr
 8000fb2:	42a1      	cmp	r1, r4
 8000fb4:	46c8      	mov	r8, r9
 8000fb6:	46a6      	mov	lr, r4
 8000fb8:	d356      	bcc.n	8001068 <__udivmoddi4+0x2a4>
 8000fba:	d053      	beq.n	8001064 <__udivmoddi4+0x2a0>
 8000fbc:	b15d      	cbz	r5, 8000fd6 <__udivmoddi4+0x212>
 8000fbe:	ebb3 0208 	subs.w	r2, r3, r8
 8000fc2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fc6:	fa01 f707 	lsl.w	r7, r1, r7
 8000fca:	fa22 f306 	lsr.w	r3, r2, r6
 8000fce:	40f1      	lsrs	r1, r6
 8000fd0:	431f      	orrs	r7, r3
 8000fd2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fd6:	2600      	movs	r6, #0
 8000fd8:	4631      	mov	r1, r6
 8000fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fde:	f1c2 0320 	rsb	r3, r2, #32
 8000fe2:	40d8      	lsrs	r0, r3
 8000fe4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fe8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fec:	4091      	lsls	r1, r2
 8000fee:	4301      	orrs	r1, r0
 8000ff0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ff4:	fa1f fe8c 	uxth.w	lr, ip
 8000ff8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ffc:	fb07 3610 	mls	r6, r7, r0, r3
 8001000:	0c0b      	lsrs	r3, r1, #16
 8001002:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001006:	fb00 f60e 	mul.w	r6, r0, lr
 800100a:	429e      	cmp	r6, r3
 800100c:	fa04 f402 	lsl.w	r4, r4, r2
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x260>
 8001012:	eb1c 0303 	adds.w	r3, ip, r3
 8001016:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800101a:	d22f      	bcs.n	800107c <__udivmoddi4+0x2b8>
 800101c:	429e      	cmp	r6, r3
 800101e:	d92d      	bls.n	800107c <__udivmoddi4+0x2b8>
 8001020:	3802      	subs	r0, #2
 8001022:	4463      	add	r3, ip
 8001024:	1b9b      	subs	r3, r3, r6
 8001026:	b289      	uxth	r1, r1
 8001028:	fbb3 f6f7 	udiv	r6, r3, r7
 800102c:	fb07 3316 	mls	r3, r7, r6, r3
 8001030:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001034:	fb06 f30e 	mul.w	r3, r6, lr
 8001038:	428b      	cmp	r3, r1
 800103a:	d908      	bls.n	800104e <__udivmoddi4+0x28a>
 800103c:	eb1c 0101 	adds.w	r1, ip, r1
 8001040:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8001044:	d216      	bcs.n	8001074 <__udivmoddi4+0x2b0>
 8001046:	428b      	cmp	r3, r1
 8001048:	d914      	bls.n	8001074 <__udivmoddi4+0x2b0>
 800104a:	3e02      	subs	r6, #2
 800104c:	4461      	add	r1, ip
 800104e:	1ac9      	subs	r1, r1, r3
 8001050:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001054:	e738      	b.n	8000ec8 <__udivmoddi4+0x104>
 8001056:	462e      	mov	r6, r5
 8001058:	4628      	mov	r0, r5
 800105a:	e705      	b.n	8000e68 <__udivmoddi4+0xa4>
 800105c:	4606      	mov	r6, r0
 800105e:	e6e3      	b.n	8000e28 <__udivmoddi4+0x64>
 8001060:	4618      	mov	r0, r3
 8001062:	e6f8      	b.n	8000e56 <__udivmoddi4+0x92>
 8001064:	454b      	cmp	r3, r9
 8001066:	d2a9      	bcs.n	8000fbc <__udivmoddi4+0x1f8>
 8001068:	ebb9 0802 	subs.w	r8, r9, r2
 800106c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001070:	3801      	subs	r0, #1
 8001072:	e7a3      	b.n	8000fbc <__udivmoddi4+0x1f8>
 8001074:	4646      	mov	r6, r8
 8001076:	e7ea      	b.n	800104e <__udivmoddi4+0x28a>
 8001078:	4620      	mov	r0, r4
 800107a:	e794      	b.n	8000fa6 <__udivmoddi4+0x1e2>
 800107c:	4640      	mov	r0, r8
 800107e:	e7d1      	b.n	8001024 <__udivmoddi4+0x260>
 8001080:	46d0      	mov	r8, sl
 8001082:	e77b      	b.n	8000f7c <__udivmoddi4+0x1b8>
 8001084:	3b02      	subs	r3, #2
 8001086:	4461      	add	r1, ip
 8001088:	e732      	b.n	8000ef0 <__udivmoddi4+0x12c>
 800108a:	4630      	mov	r0, r6
 800108c:	e709      	b.n	8000ea2 <__udivmoddi4+0xde>
 800108e:	4464      	add	r4, ip
 8001090:	3802      	subs	r0, #2
 8001092:	e742      	b.n	8000f1a <__udivmoddi4+0x156>

08001094 <__aeabi_idiv0>:
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <ST7565_Select>:
uint8_t lcdRdy = 1;

//------------------------------------------------------------------------------

inline static void ST7565_Select()
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
#ifdef CS_PORT
	//-- если захотим переделать под HAL ------------------
	#ifdef ST7565_SPI_HAL
		//HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
		CS_GPIO_Port->BSRR = ( CS_Pin << 16 );
 800109c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80010a4:	619a      	str	r2, [r3, #24]
	#ifdef ST7565_SPI_CMSIS
		CS_GPIO_Port->BSRR = ( CS_Pin << 16 );
	#endif
	//-----------------------------------------------------
#endif
}
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <ST7565_Unselect>:

//------------------------------------------------------------------------------

inline static void ST7565_Unselect()
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
#ifdef CS_PORT
	//-- если захотим переделать под HAL ------------------
	#ifdef ST7565_SPI_HAL
		//HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
		CS_GPIO_Port->BSRR = CS_Pin;
 80010b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010b8:	2210      	movs	r2, #16
 80010ba:	619a      	str	r2, [r3, #24]
	#ifdef ST7565_SPI_CMSIS
		CS_GPIO_Port->BSRR = CS_Pin;
	#endif
	//-----------------------------------------------------
#endif
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
	...

080010c8 <ST7565_Reset>:
	* @brief	 ( описание ):  аппарвтный сброс дисплея
	* @param	( параметры ):	
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Reset()
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	RES_GPIO_Port->BSRR = (RES_Pin << 16);//HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_RESET );
 80010cc:	4b07      	ldr	r3, [pc, #28]	; (80010ec <ST7565_Reset+0x24>)
 80010ce:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80010d2:	619a      	str	r2, [r3, #24]
	HAL_Delay(1);
 80010d4:	2001      	movs	r0, #1
 80010d6:	f005 fe63 	bl	8006da0 <HAL_Delay>
	
	RES_GPIO_Port->BSRR = RES_Pin;//HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_SET );
 80010da:	4b04      	ldr	r3, [pc, #16]	; (80010ec <ST7565_Reset+0x24>)
 80010dc:	2204      	movs	r2, #4
 80010de:	619a      	str	r2, [r3, #24]
	HAL_Delay(1);
 80010e0:	2001      	movs	r0, #1
 80010e2:	f005 fe5d 	bl	8006da0 <HAL_Delay>
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	48000c00 	.word	0x48000c00

080010f0 <ST7565_w_dats>:
//--------------------------------------------------------------------------------
#ifdef SET_NEW_PROC
inline static void ST7565_w_dats(uint8_t *Data, uint16_t len)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	807b      	strh	r3, [r7, #2]
	DC_GPIO_Port->BSRR = DC_Pin;//HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80010fc:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <ST7565_w_dats+0x84>)
 80010fe:	2220      	movs	r2, #32
 8001100:	619a      	str	r2, [r3, #24]

	if (with_dma) {
 8001102:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <ST7565_w_dats+0x88>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d018      	beq.n	800113c <ST7565_w_dats+0x4c>
		lcdRdy = 0;
 800110a:	4b1c      	ldr	r3, [pc, #112]	; (800117c <ST7565_w_dats+0x8c>)
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]
		if (HAL_SPI_Transmit_DMA(&ST7565_SPI_HAL, Data, len) != HAL_OK) devError |= devLCD;
 8001110:	887b      	ldrh	r3, [r7, #2]
 8001112:	461a      	mov	r2, r3
 8001114:	6879      	ldr	r1, [r7, #4]
 8001116:	481a      	ldr	r0, [pc, #104]	; (8001180 <ST7565_w_dats+0x90>)
 8001118:	f00a fc42 	bl	800b9a0 <HAL_SPI_Transmit_DMA>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d006      	beq.n	8001130 <ST7565_w_dats+0x40>
 8001122:	4b18      	ldr	r3, [pc, #96]	; (8001184 <ST7565_w_dats+0x94>)
 8001124:	881b      	ldrh	r3, [r3, #0]
 8001126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800112a:	b29a      	uxth	r2, r3
 800112c:	4b15      	ldr	r3, [pc, #84]	; (8001184 <ST7565_w_dats+0x94>)
 800112e:	801a      	strh	r2, [r3, #0]
		while (!lcdRdy) {};
 8001130:	bf00      	nop
 8001132:	4b12      	ldr	r3, [pc, #72]	; (800117c <ST7565_w_dats+0x8c>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d0fb      	beq.n	8001132 <ST7565_w_dats+0x42>
	} else {
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Data, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
	}
}
 800113a:	e017      	b.n	800116c <ST7565_w_dats+0x7c>
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Data, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
 800113c:	887a      	ldrh	r2, [r7, #2]
 800113e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	480e      	ldr	r0, [pc, #56]	; (8001180 <ST7565_w_dats+0x90>)
 8001146:	f009 ff7a 	bl	800b03e <HAL_SPI_Transmit>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d006      	beq.n	800115e <ST7565_w_dats+0x6e>
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <ST7565_w_dats+0x94>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001158:	b29a      	uxth	r2, r3
 800115a:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <ST7565_w_dats+0x94>)
 800115c:	801a      	strh	r2, [r3, #0]
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
 800115e:	bf00      	nop
 8001160:	4807      	ldr	r0, [pc, #28]	; (8001180 <ST7565_w_dats+0x90>)
 8001162:	f00a ffbb 	bl	800c0dc <HAL_SPI_GetState>
 8001166:	4603      	mov	r3, r0
 8001168:	2b01      	cmp	r3, #1
 800116a:	d1f9      	bne.n	8001160 <ST7565_w_dats+0x70>
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	48000400 	.word	0x48000400
 8001178:	2000082c 	.word	0x2000082c
 800117c:	20000000 	.word	0x20000000
 8001180:	20000938 	.word	0x20000938
 8001184:	2000193c 	.word	0x2000193c

08001188 <ST7565_w_cmds>:
//
inline static void ST7565_w_cmds(uint8_t *Command, uint16_t len)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	807b      	strh	r3, [r7, #2]
	DC_GPIO_Port->BSRR = (DC_Pin << 16);//HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8001194:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <ST7565_w_cmds+0x88>)
 8001196:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800119a:	619a      	str	r2, [r3, #24]

	if (with_dma) {
 800119c:	4b1d      	ldr	r3, [pc, #116]	; (8001214 <ST7565_w_cmds+0x8c>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d018      	beq.n	80011d6 <ST7565_w_cmds+0x4e>
		lcdRdy = 0;
 80011a4:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <ST7565_w_cmds+0x90>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	701a      	strb	r2, [r3, #0]
		if (HAL_SPI_Transmit_DMA(&ST7565_SPI_HAL, Command, len) != HAL_OK) devError |= devLCD;
 80011aa:	887b      	ldrh	r3, [r7, #2]
 80011ac:	461a      	mov	r2, r3
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	481a      	ldr	r0, [pc, #104]	; (800121c <ST7565_w_cmds+0x94>)
 80011b2:	f00a fbf5 	bl	800b9a0 <HAL_SPI_Transmit_DMA>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d006      	beq.n	80011ca <ST7565_w_cmds+0x42>
 80011bc:	4b18      	ldr	r3, [pc, #96]	; (8001220 <ST7565_w_cmds+0x98>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	4b16      	ldr	r3, [pc, #88]	; (8001220 <ST7565_w_cmds+0x98>)
 80011c8:	801a      	strh	r2, [r3, #0]
		while (!lcdRdy) {};
 80011ca:	bf00      	nop
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <ST7565_w_cmds+0x90>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0fb      	beq.n	80011cc <ST7565_w_cmds+0x44>
	} else {
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Command, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
	}
}
 80011d4:	e017      	b.n	8001206 <ST7565_w_cmds+0x7e>
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Command, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
 80011d6:	887a      	ldrh	r2, [r7, #2]
 80011d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011dc:	6879      	ldr	r1, [r7, #4]
 80011de:	480f      	ldr	r0, [pc, #60]	; (800121c <ST7565_w_cmds+0x94>)
 80011e0:	f009 ff2d 	bl	800b03e <HAL_SPI_Transmit>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d006      	beq.n	80011f8 <ST7565_w_cmds+0x70>
 80011ea:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <ST7565_w_cmds+0x98>)
 80011ec:	881b      	ldrh	r3, [r3, #0]
 80011ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <ST7565_w_cmds+0x98>)
 80011f6:	801a      	strh	r2, [r3, #0]
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
 80011f8:	bf00      	nop
 80011fa:	4808      	ldr	r0, [pc, #32]	; (800121c <ST7565_w_cmds+0x94>)
 80011fc:	f00a ff6e 	bl	800c0dc <HAL_SPI_GetState>
 8001200:	4603      	mov	r3, r0
 8001202:	2b01      	cmp	r3, #1
 8001204:	d1f9      	bne.n	80011fa <ST7565_w_cmds+0x72>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	48000400 	.word	0x48000400
 8001214:	2000082c 	.word	0x2000082c
 8001218:	20000000 	.word	0x20000000
 800121c:	20000938 	.word	0x20000938
 8001220:	2000193c 	.word	0x2000193c

08001224 <ST7565_SetX>:
inline static void ST7565_SetX(uint8_t x)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
	uint8_t bytes[] = { ((x & 0xf0) >> 4) | 0x10, x & 0x0f };
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	091b      	lsrs	r3, r3, #4
 8001232:	b2db      	uxtb	r3, r3
 8001234:	f043 0310 	orr.w	r3, r3, #16
 8001238:	b2db      	uxtb	r3, r3
 800123a:	733b      	strb	r3, [r7, #12]
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	b2db      	uxtb	r3, r3
 8001244:	737b      	strb	r3, [r7, #13]
	ST7565_w_cmds(bytes, 2);
 8001246:	f107 030c 	add.w	r3, r7, #12
 800124a:	2102      	movs	r1, #2
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff9b 	bl	8001188 <ST7565_w_cmds>
}
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <ST7565_SetY>:
//
inline static void ST7565_SetY(uint8_t y)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b084      	sub	sp, #16
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	71fb      	strb	r3, [r7, #7]
	uint8_t byte = (y & 0x07) | 0xB0;
 8001264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001268:	f003 0307 	and.w	r3, r3, #7
 800126c:	b25b      	sxtb	r3, r3
 800126e:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8001272:	b25b      	sxtb	r3, r3
 8001274:	b2db      	uxtb	r3, r3
 8001276:	73fb      	strb	r3, [r7, #15]
	ST7565_w_cmds(&byte, 1);
 8001278:	f107 030f 	add.w	r3, r7, #15
 800127c:	2101      	movs	r1, #1
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff ff82 	bl	8001188 <ST7565_w_cmds>
}
 8001284:	bf00      	nop
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <ST7565_Display_fill>:
								( данные отправляются сразу на дисплей и записываются в буфер кадра )
								Функцию ST7565_Update() вызывать не нужно
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Display_fill(uint8_t fill)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
uint8_t page;//, column;
	
	memset(ST7565_buffer, fill, (SCREEN_WIDTH * SCREEN_HEIGHT / 8));	// отчистка памяти заполняем массив значением 0x00
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800129c:	4619      	mov	r1, r3
 800129e:	4814      	ldr	r0, [pc, #80]	; (80012f0 <ST7565_Display_fill+0x64>)
 80012a0:	f00d fcdc 	bl	800ec5c <memset>
	
	ST7565_Select();
 80012a4:	f7ff fef8 	bl	8001098 <ST7565_Select>
#ifdef SET_NEW_PROC
	uint8_t dta[] = {0, 0x10, 0};
 80012a8:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <ST7565_Display_fill+0x68>)
 80012aa:	f107 030c 	add.w	r3, r7, #12
 80012ae:	6812      	ldr	r2, [r2, #0]
 80012b0:	4611      	mov	r1, r2
 80012b2:	8019      	strh	r1, [r3, #0]
 80012b4:	3302      	adds	r3, #2
 80012b6:	0c12      	lsrs	r2, r2, #16
 80012b8:	701a      	strb	r2, [r3, #0]
#endif
	for (page = 0xB7; page >= 0xB0; page-- ) {
 80012ba:	23b7      	movs	r3, #183	; 0xb7
 80012bc:	73fb      	strb	r3, [r7, #15]
 80012be:	e00e      	b.n	80012de <ST7565_Display_fill+0x52>
		ST7565_w_cmd(page);  //set page address
		ST7565_w_cmd(0x10);  //set Column address MSB   
		ST7565_w_cmd(0x00);  //set column address LSB
		for (column = 0; column < 131; column++) ST7565_w_dat(fill);
#else
		dta[0] = page;
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	733b      	strb	r3, [r7, #12]
		ST7565_w_cmds(dta, sizeof(dta));
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	2103      	movs	r1, #3
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff ff5c 	bl	8001188 <ST7565_w_cmds>
		ST7565_w_dats(ST7565_buffer, 131);
 80012d0:	2183      	movs	r1, #131	; 0x83
 80012d2:	4807      	ldr	r0, [pc, #28]	; (80012f0 <ST7565_Display_fill+0x64>)
 80012d4:	f7ff ff0c 	bl	80010f0 <ST7565_w_dats>
	for (page = 0xB7; page >= 0xB0; page-- ) {
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	3b01      	subs	r3, #1
 80012dc:	73fb      	strb	r3, [r7, #15]
 80012de:	7bfb      	ldrb	r3, [r7, #15]
 80012e0:	2baf      	cmp	r3, #175	; 0xaf
 80012e2:	d8ed      	bhi.n	80012c0 <ST7565_Display_fill+0x34>
#endif
    }
		
	ST7565_Unselect();
 80012e4:	f7ff fee4 	bl	80010b0 <ST7565_Unselect>
}
 80012e8:	bf00      	nop
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	2000042c 	.word	0x2000042c
 80012f4:	080131e0 	.word	0x080131e0

080012f8 <ST7565_Init>:
	* @brief	 ( описание ):  инициализация дисплея ( при другой инициализации можно поменять параметры внутри функции )
	* @param	( параметры ):	
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Init()
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
	ST7565_Select();
 80012fe:	f7ff fecb 	bl	8001098 <ST7565_Select>
	ST7565_w_cmd(CMD_DISPLAY_ON);    		//Display on
	// Инвертирование экрана CMD_SET_DISP_NORMAL - OFF    CMD_SET_DISP_REVERSE - ON
	ST7565_w_cmd(CMD_SET_DISP_NORMAL);
	//HAL_Delay(1);//1
#else
	uint8_t dta[] = {
 8001302:	4a09      	ldr	r2, [pc, #36]	; (8001328 <ST7565_Init+0x30>)
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	ca07      	ldmia	r2, {r0, r1, r2}
 8001308:	c303      	stmia	r3!, {r0, r1}
 800130a:	801a      	strh	r2, [r3, #0]
	};
	#if defined (SCREEN_ORIENTATION_180)
		dta[1] = CMD_SET_ADC_REVERSE;    	//ADC selection(SEG0->SEG128)  CMD_SET_ADC_NORMAL горизонтально «нормальная» (не перевернутая)
		dta[2] = CMD_SET_COM_NORMAL;    		//SHL selection(COM0->COM64)   CMD_SET_COM_REVERSE вертикально «перевернутая» (дополняет команду выше)
	#endif
	ST7565_w_cmds(dta, sizeof(dta));
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	210a      	movs	r1, #10
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff39 	bl	8001188 <ST7565_w_cmds>
#endif
	
	ST7565_Display_fill(0);
 8001316:	2000      	movs	r0, #0
 8001318:	f7ff ffb8 	bl	800128c <ST7565_Display_fill>
	
	ST7565_Unselect();
 800131c:	f7ff fec8 	bl	80010b0 <ST7565_Unselect>
   
}
 8001320:	bf00      	nop
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	080131e4 	.word	0x080131e4

0800132c <ST7565_CMD_DISPLAY>:
//--------------------------------------------------------------------------------
void ST7565_CMD_DISPLAY(uint8_t byte)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
#ifdef SET_NEW_PROC
	ST7565_w_cmds(&byte, 1);
 8001336:	1dfb      	adds	r3, r7, #7
 8001338:	2101      	movs	r1, #1
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff ff24 	bl	8001188 <ST7565_w_cmds>
#else
	ST7565_w_cmd(byte);
#endif
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <ST7565_Draw_pixel>:
	* @param	( параметры ):	координата X(0 - 127) и координата Y(0 - 63)  color 1 or 0
	* @return  ( возвращает ):	
*******************************************************************************/
// X(0 - 127)  Y(0 - 63)
void ST7565_Draw_pixel(int16_t x, int16_t y, uint8_t color)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	80fb      	strh	r3, [r7, #6]
 8001352:	460b      	mov	r3, r1
 8001354:	80bb      	strh	r3, [r7, #4]
 8001356:	4613      	mov	r3, r2
 8001358:	70fb      	strb	r3, [r7, #3]
    if (x >= SCREEN_WIDTH || x < 0 || y >= SCREEN_HEIGHT || y < 0) return;
 800135a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800135e:	2b7f      	cmp	r3, #127	; 0x7f
 8001360:	dc4c      	bgt.n	80013fc <ST7565_Draw_pixel+0xb4>
 8001362:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001366:	2b00      	cmp	r3, #0
 8001368:	db48      	blt.n	80013fc <ST7565_Draw_pixel+0xb4>
 800136a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800136e:	2b3f      	cmp	r3, #63	; 0x3f
 8001370:	dc44      	bgt.n	80013fc <ST7565_Draw_pixel+0xb4>
 8001372:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	db40      	blt.n	80013fc <ST7565_Draw_pixel+0xb4>

    uint16_t array_pos = x + ((y >> 3) * SCREEN_WIDTH );
 800137a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800137e:	10db      	asrs	r3, r3, #3
 8001380:	b21b      	sxth	r3, r3
 8001382:	b29b      	uxth	r3, r3
 8001384:	01db      	lsls	r3, r3, #7
 8001386:	b29a      	uxth	r2, r3
 8001388:	88fb      	ldrh	r3, [r7, #6]
 800138a:	4413      	add	r3, r2
 800138c:	81fb      	strh	r3, [r7, #14]

    if (color) {
 800138e:	78fb      	ldrb	r3, [r7, #3]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d018      	beq.n	80013c6 <ST7565_Draw_pixel+0x7e>
        ST7565_buffer[array_pos] |= 1 << (y % 8);
 8001394:	89fb      	ldrh	r3, [r7, #14]
 8001396:	4a1c      	ldr	r2, [pc, #112]	; (8001408 <ST7565_Draw_pixel+0xc0>)
 8001398:	5cd3      	ldrb	r3, [r2, r3]
 800139a:	b25a      	sxtb	r2, r3
 800139c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013a0:	4259      	negs	r1, r3
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	f001 0107 	and.w	r1, r1, #7
 80013aa:	bf58      	it	pl
 80013ac:	424b      	negpl	r3, r1
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	4619      	mov	r1, r3
 80013b2:	2301      	movs	r3, #1
 80013b4:	408b      	lsls	r3, r1
 80013b6:	b25b      	sxtb	r3, r3
 80013b8:	4313      	orrs	r3, r2
 80013ba:	b25a      	sxtb	r2, r3
 80013bc:	89fb      	ldrh	r3, [r7, #14]
 80013be:	b2d1      	uxtb	r1, r2
 80013c0:	4a11      	ldr	r2, [pc, #68]	; (8001408 <ST7565_Draw_pixel+0xc0>)
 80013c2:	54d1      	strb	r1, [r2, r3]
 80013c4:	e01b      	b.n	80013fe <ST7565_Draw_pixel+0xb6>
    } else {
        ST7565_buffer[array_pos] &= 0xFF ^ 1 << (y % 8);
 80013c6:	89fb      	ldrh	r3, [r7, #14]
 80013c8:	4a0f      	ldr	r2, [pc, #60]	; (8001408 <ST7565_Draw_pixel+0xc0>)
 80013ca:	5cd3      	ldrb	r3, [r2, r3]
 80013cc:	b25a      	sxtb	r2, r3
 80013ce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013d2:	4259      	negs	r1, r3
 80013d4:	f003 0307 	and.w	r3, r3, #7
 80013d8:	f001 0107 	and.w	r1, r1, #7
 80013dc:	bf58      	it	pl
 80013de:	424b      	negpl	r3, r1
 80013e0:	b21b      	sxth	r3, r3
 80013e2:	4619      	mov	r1, r3
 80013e4:	2301      	movs	r3, #1
 80013e6:	408b      	lsls	r3, r1
 80013e8:	b25b      	sxtb	r3, r3
 80013ea:	43db      	mvns	r3, r3
 80013ec:	b25b      	sxtb	r3, r3
 80013ee:	4013      	ands	r3, r2
 80013f0:	b25a      	sxtb	r2, r3
 80013f2:	89fb      	ldrh	r3, [r7, #14]
 80013f4:	b2d1      	uxtb	r1, r2
 80013f6:	4a04      	ldr	r2, [pc, #16]	; (8001408 <ST7565_Draw_pixel+0xc0>)
 80013f8:	54d1      	strb	r1, [r2, r3]
 80013fa:	e000      	b.n	80013fe <ST7565_Draw_pixel+0xb6>
    if (x >= SCREEN_WIDTH || x < 0 || y >= SCREEN_HEIGHT || y < 0) return;
 80013fc:	bf00      	nop
    }
}
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	2000042c 	.word	0x2000042c

0800140c <ST7565_Update>:
	* @brief	 ( описание ):  вывод буффера кадра на дисплей
	* @param	( параметры ):	
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Update()
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
uint8_t x, y;
		
	ST7565_Select();
 8001412:	f7ff fe41 	bl	8001098 <ST7565_Select>

  	for (y = 0; y < 8; y++) {
 8001416:	2300      	movs	r3, #0
 8001418:	71bb      	strb	r3, [r7, #6]
 800141a:	e01d      	b.n	8001458 <ST7565_Update+0x4c>
		ST7565_SetX(0);	
 800141c:	2000      	movs	r0, #0
 800141e:	f7ff ff01 	bl	8001224 <ST7565_SetX>
		ST7565_SetY(y);
 8001422:	79bb      	ldrb	r3, [r7, #6]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff ff18 	bl	800125a <ST7565_SetY>
		for (x = 0; x < 128; x++) {
 800142a:	2300      	movs	r3, #0
 800142c:	71fb      	strb	r3, [r7, #7]
 800142e:	e00c      	b.n	800144a <ST7565_Update+0x3e>
			ST7565_w_dats(&ST7565_buffer[x + 128 * y], 1);
 8001430:	79fa      	ldrb	r2, [r7, #7]
 8001432:	79bb      	ldrb	r3, [r7, #6]
 8001434:	01db      	lsls	r3, r3, #7
 8001436:	4413      	add	r3, r2
 8001438:	4a0d      	ldr	r2, [pc, #52]	; (8001470 <ST7565_Update+0x64>)
 800143a:	4413      	add	r3, r2
 800143c:	2101      	movs	r1, #1
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fe56 	bl	80010f0 <ST7565_w_dats>
		for (x = 0; x < 128; x++) {
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	3301      	adds	r3, #1
 8001448:	71fb      	strb	r3, [r7, #7]
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	2b00      	cmp	r3, #0
 8001450:	daee      	bge.n	8001430 <ST7565_Update+0x24>
  	for (y = 0; y < 8; y++) {
 8001452:	79bb      	ldrb	r3, [r7, #6]
 8001454:	3301      	adds	r3, #1
 8001456:	71bb      	strb	r3, [r7, #6]
 8001458:	79bb      	ldrb	r3, [r7, #6]
 800145a:	2b07      	cmp	r3, #7
 800145c:	d9de      	bls.n	800141c <ST7565_Update+0x10>
		}
	}
	
	ST7565_Unselect();
 800145e:	f7ff fe27 	bl	80010b0 <ST7565_Unselect>
	HAL_Delay(100);
 8001462:	2064      	movs	r0, #100	; 0x64
 8001464:	f005 fc9c 	bl	8006da0 <HAL_Delay>
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	2000042c 	.word	0x2000042c

08001474 <ST7565_DrawChar>:
	* @brief	 ( описание ):  функция записывает 1 символ в буфер кадра
	* @param	( параметры ):	координаты X(0 - 127)  Y(0 - 63), символ, шрифт, множитель, цвет 1 или 0
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawChar(int16_t x, int16_t y, unsigned char ch, FontDef_t* Font, uint8_t multiplier, uint8_t color)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b088      	sub	sp, #32
 8001478:	af00      	add	r7, sp, #0
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	4603      	mov	r3, r0
 800147e:	81fb      	strh	r3, [r7, #14]
 8001480:	460b      	mov	r3, r1
 8001482:	81bb      	strh	r3, [r7, #12]
 8001484:	4613      	mov	r3, r2
 8001486:	72fb      	strb	r3, [r7, #11]
uint16_t i, j;
uint16_t b;
int16_t X = x, Y = y;
 8001488:	89fb      	ldrh	r3, [r7, #14]
 800148a:	833b      	strh	r3, [r7, #24]
 800148c:	89bb      	ldrh	r3, [r7, #12]
 800148e:	82fb      	strh	r3, [r7, #22]
int16_t xx, yy;
	
	if (multiplier < 1) multiplier = 1;
 8001490:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001494:	2b00      	cmp	r3, #0
 8001496:	d102      	bne.n	800149e <ST7565_DrawChar+0x2a>
 8001498:	2301      	movs	r3, #1
 800149a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	
	// Check available space in LCD
	if (SCREEN_WIDTH >= ( x + Font->FontWidth) || SCREEN_HEIGHT >= ( y + Font->FontHeight)) {
 800149e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	7812      	ldrb	r2, [r2, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	2b80      	cmp	r3, #128	; 0x80
 80014aa:	dd07      	ble.n	80014bc <ST7565_DrawChar+0x48>
 80014ac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	7852      	ldrb	r2, [r2, #1]
 80014b4:	4413      	add	r3, r2
 80014b6:	2b40      	cmp	r3, #64	; 0x40
 80014b8:	f300 8154 	bgt.w	8001764 <ST7565_DrawChar+0x2f0>
		// Go through font
		for (i = 0; i < Font->FontHeight; i++) {
 80014bc:	2300      	movs	r3, #0
 80014be:	83fb      	strh	r3, [r7, #30]
 80014c0:	e149      	b.n	8001756 <ST7565_DrawChar+0x2e2>
			if (ch < 127) {
 80014c2:	7afb      	ldrb	r3, [r7, #11]
 80014c4:	2b7e      	cmp	r3, #126	; 0x7e
 80014c6:	d80f      	bhi.n	80014e8 <ST7565_DrawChar+0x74>
				b = Font->data[(ch - 32) * Font->FontHeight + i];
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80014ce:	7afb      	ldrb	r3, [r7, #11]
 80014d0:	3b20      	subs	r3, #32
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	7849      	ldrb	r1, [r1, #1]
 80014d6:	fb03 f101 	mul.w	r1, r3, r1
 80014da:	8bfb      	ldrh	r3, [r7, #30]
 80014dc:	440b      	add	r3, r1
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	4413      	add	r3, r2
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	837b      	strh	r3, [r7, #26]
 80014e6:	e0af      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch > 191) {
 80014e8:	7afb      	ldrb	r3, [r7, #11]
 80014ea:	2bbf      	cmp	r3, #191	; 0xbf
 80014ec:	d90f      	bls.n	800150e <ST7565_DrawChar+0x9a>
				// +96 это так как латинские символы и знаки в шрифтах занимают 96 позиций
				// и если в шрифте который содержит сперва латиницу и спец символы и потом 
				// только кирилицу то нужно добавлять 95 если шрифт 
				// содержит только кирилицу то +96 не нужно
				b = Font->data[((ch - 192) + 96) * Font->FontHeight + i];
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80014f4:	7afb      	ldrb	r3, [r7, #11]
 80014f6:	3b60      	subs	r3, #96	; 0x60
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	7849      	ldrb	r1, [r1, #1]
 80014fc:	fb03 f101 	mul.w	r1, r3, r1
 8001500:	8bfb      	ldrh	r3, [r7, #30]
 8001502:	440b      	add	r3, r1
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	4413      	add	r3, r2
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	837b      	strh	r3, [r7, #26]
 800150c:	e09c      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 168) {	// 168 символ по ASCII - Ё
 800150e:	7afb      	ldrb	r3, [r7, #11]
 8001510:	2ba8      	cmp	r3, #168	; 0xa8
 8001512:	d111      	bne.n	8001538 <ST7565_DrawChar+0xc4>
				// 160 эллемент ( символ Ё ) 
				b = Font->data[160 * Font->FontHeight + i];
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f8d3 2002 	ldr.w	r2, [r3, #2]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	785b      	ldrb	r3, [r3, #1]
 800151e:	4619      	mov	r1, r3
 8001520:	460b      	mov	r3, r1
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	440b      	add	r3, r1
 8001526:	015b      	lsls	r3, r3, #5
 8001528:	4619      	mov	r1, r3
 800152a:	8bfb      	ldrh	r3, [r7, #30]
 800152c:	440b      	add	r3, r1
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4413      	add	r3, r2
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	837b      	strh	r3, [r7, #26]
 8001536:	e087      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 184) {	// 184 символ по ASCII - ё
 8001538:	7afb      	ldrb	r3, [r7, #11]
 800153a:	2bb8      	cmp	r3, #184	; 0xb8
 800153c:	d111      	bne.n	8001562 <ST7565_DrawChar+0xee>
				// 161 эллемент  ( символ ё ) 
				b = Font->data[161 * Font->FontHeight + i];
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f8d3 1002 	ldr.w	r1, [r3, #2]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	785b      	ldrb	r3, [r3, #1]
 8001548:	461a      	mov	r2, r3
 800154a:	4613      	mov	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	015b      	lsls	r3, r3, #5
 8001552:	441a      	add	r2, r3
 8001554:	8bfb      	ldrh	r3, [r7, #30]
 8001556:	4413      	add	r3, r2
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	440b      	add	r3, r1
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	837b      	strh	r3, [r7, #26]
 8001560:	e072      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 170) {	// 168 символ по ASCII - Є
 8001562:	7afb      	ldrb	r3, [r7, #11]
 8001564:	2baa      	cmp	r3, #170	; 0xaa
 8001566:	d10f      	bne.n	8001588 <ST7565_DrawChar+0x114>
				// 162 эллемент ( символ Є )
				b = Font->data[162 * Font->FontHeight + i];
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f8d3 2002 	ldr.w	r2, [r3, #2]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	785b      	ldrb	r3, [r3, #1]
 8001572:	4619      	mov	r1, r3
 8001574:	23a2      	movs	r3, #162	; 0xa2
 8001576:	fb03 f101 	mul.w	r1, r3, r1
 800157a:	8bfb      	ldrh	r3, [r7, #30]
 800157c:	440b      	add	r3, r1
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	4413      	add	r3, r2
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	837b      	strh	r3, [r7, #26]
 8001586:	e05f      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 175) {	// 184 символ по ASCII - Ї
 8001588:	7afb      	ldrb	r3, [r7, #11]
 800158a:	2baf      	cmp	r3, #175	; 0xaf
 800158c:	d10f      	bne.n	80015ae <ST7565_DrawChar+0x13a>
				// 163 эллемент  ( символ Ї )
				b = Font->data[163 * Font->FontHeight + i];
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	785b      	ldrb	r3, [r3, #1]
 8001598:	4619      	mov	r1, r3
 800159a:	23a3      	movs	r3, #163	; 0xa3
 800159c:	fb03 f101 	mul.w	r1, r3, r1
 80015a0:	8bfb      	ldrh	r3, [r7, #30]
 80015a2:	440b      	add	r3, r1
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	4413      	add	r3, r2
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	837b      	strh	r3, [r7, #26]
 80015ac:	e04c      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 178) {	// 168 символ по ASCII - І
 80015ae:	7afb      	ldrb	r3, [r7, #11]
 80015b0:	2bb2      	cmp	r3, #178	; 0xb2
 80015b2:	d10f      	bne.n	80015d4 <ST7565_DrawChar+0x160>
				// 164 эллемент ( символ І )
				b = Font->data[164 * Font->FontHeight + i];
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	785b      	ldrb	r3, [r3, #1]
 80015be:	4619      	mov	r1, r3
 80015c0:	23a4      	movs	r3, #164	; 0xa4
 80015c2:	fb03 f101 	mul.w	r1, r3, r1
 80015c6:	8bfb      	ldrh	r3, [r7, #30]
 80015c8:	440b      	add	r3, r1
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	4413      	add	r3, r2
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	837b      	strh	r3, [r7, #26]
 80015d2:	e039      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			}
			else if (ch == 179) {	// 184 символ по ASCII - і
 80015d4:	7afb      	ldrb	r3, [r7, #11]
 80015d6:	2bb3      	cmp	r3, #179	; 0xb3
 80015d8:	d111      	bne.n	80015fe <ST7565_DrawChar+0x18a>
				// 165 эллемент  ( символ і )
				b = Font->data[165 * Font->FontHeight + i];
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	785b      	ldrb	r3, [r3, #1]
 80015e4:	4619      	mov	r1, r3
 80015e6:	460b      	mov	r3, r1
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	440b      	add	r3, r1
 80015ec:	0159      	lsls	r1, r3, #5
 80015ee:	4419      	add	r1, r3
 80015f0:	8bfb      	ldrh	r3, [r7, #30]
 80015f2:	440b      	add	r3, r1
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	4413      	add	r3, r2
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	837b      	strh	r3, [r7, #26]
 80015fc:	e024      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 186) {	// 184 символ по ASCII - є
 80015fe:	7afb      	ldrb	r3, [r7, #11]
 8001600:	2bba      	cmp	r3, #186	; 0xba
 8001602:	d10f      	bne.n	8001624 <ST7565_DrawChar+0x1b0>
				// 166 эллемент  ( символ є )
				b = Font->data[166 * Font->FontHeight + i];
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f8d3 2002 	ldr.w	r2, [r3, #2]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	785b      	ldrb	r3, [r3, #1]
 800160e:	4619      	mov	r1, r3
 8001610:	23a6      	movs	r3, #166	; 0xa6
 8001612:	fb03 f101 	mul.w	r1, r3, r1
 8001616:	8bfb      	ldrh	r3, [r7, #30]
 8001618:	440b      	add	r3, r1
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	4413      	add	r3, r2
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	837b      	strh	r3, [r7, #26]
 8001622:	e011      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 191) {	// 168 символ по ASCII - ї
 8001624:	7afb      	ldrb	r3, [r7, #11]
 8001626:	2bbf      	cmp	r3, #191	; 0xbf
 8001628:	d10e      	bne.n	8001648 <ST7565_DrawChar+0x1d4>
				// 167 эллемент ( символ ї )
				b = Font->data[167 * Font->FontHeight + i];
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	785b      	ldrb	r3, [r3, #1]
 8001634:	4619      	mov	r1, r3
 8001636:	23a7      	movs	r3, #167	; 0xa7
 8001638:	fb03 f101 	mul.w	r1, r3, r1
 800163c:	8bfb      	ldrh	r3, [r7, #30]
 800163e:	440b      	add	r3, r1
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4413      	add	r3, r2
 8001644:	881b      	ldrh	r3, [r3, #0]
 8001646:	837b      	strh	r3, [r7, #26]
			}
			//-----------------------------------------------------------------------------
			
			for (j = 0; j < Font->FontWidth; j++) {
 8001648:	2300      	movs	r3, #0
 800164a:	83bb      	strh	r3, [r7, #28]
 800164c:	e071      	b.n	8001732 <ST7565_DrawChar+0x2be>
				if ((b << j) & 0x8000) {
 800164e:	8b7a      	ldrh	r2, [r7, #26]
 8001650:	8bbb      	ldrh	r3, [r7, #28]
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d02d      	beq.n	80016ba <ST7565_DrawChar+0x246>
					for (yy = 0; yy < multiplier; yy++){
 800165e:	2300      	movs	r3, #0
 8001660:	827b      	strh	r3, [r7, #18]
 8001662:	e023      	b.n	80016ac <ST7565_DrawChar+0x238>
						for (xx = 0; xx < multiplier; xx++){
 8001664:	2300      	movs	r3, #0
 8001666:	82bb      	strh	r3, [r7, #20]
 8001668:	e014      	b.n	8001694 <ST7565_DrawChar+0x220>
							ST7565_Draw_pixel(X + xx, Y + yy, color);
 800166a:	8b3a      	ldrh	r2, [r7, #24]
 800166c:	8abb      	ldrh	r3, [r7, #20]
 800166e:	4413      	add	r3, r2
 8001670:	b29b      	uxth	r3, r3
 8001672:	b218      	sxth	r0, r3
 8001674:	8afa      	ldrh	r2, [r7, #22]
 8001676:	8a7b      	ldrh	r3, [r7, #18]
 8001678:	4413      	add	r3, r2
 800167a:	b29b      	uxth	r3, r3
 800167c:	b21b      	sxth	r3, r3
 800167e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001682:	4619      	mov	r1, r3
 8001684:	f7ff fe60 	bl	8001348 <ST7565_Draw_pixel>
						for (xx = 0; xx < multiplier; xx++){
 8001688:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800168c:	b29b      	uxth	r3, r3
 800168e:	3301      	adds	r3, #1
 8001690:	b29b      	uxth	r3, r3
 8001692:	82bb      	strh	r3, [r7, #20]
 8001694:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001698:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800169c:	429a      	cmp	r2, r3
 800169e:	dbe4      	blt.n	800166a <ST7565_DrawChar+0x1f6>
					for (yy = 0; yy < multiplier; yy++){
 80016a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	3301      	adds	r3, #1
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	827b      	strh	r3, [r7, #18]
 80016ac:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80016b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80016b4:	429a      	cmp	r2, r3
 80016b6:	dbd5      	blt.n	8001664 <ST7565_DrawChar+0x1f0>
 80016b8:	e031      	b.n	800171e <ST7565_DrawChar+0x2aa>
						}
					}
				} else {// если фон очищать то оставляем если чтоб фон оставался старый то коментируем эту часть -------------
					for (yy = 0; yy < multiplier; yy++){
 80016ba:	2300      	movs	r3, #0
 80016bc:	827b      	strh	r3, [r7, #18]
 80016be:	e028      	b.n	8001712 <ST7565_DrawChar+0x29e>
						for (xx = 0; xx < multiplier; xx++){
 80016c0:	2300      	movs	r3, #0
 80016c2:	82bb      	strh	r3, [r7, #20]
 80016c4:	e019      	b.n	80016fa <ST7565_DrawChar+0x286>
							ST7565_Draw_pixel(X + xx, Y + yy, !color);
 80016c6:	8b3a      	ldrh	r2, [r7, #24]
 80016c8:	8abb      	ldrh	r3, [r7, #20]
 80016ca:	4413      	add	r3, r2
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	b218      	sxth	r0, r3
 80016d0:	8afa      	ldrh	r2, [r7, #22]
 80016d2:	8a7b      	ldrh	r3, [r7, #18]
 80016d4:	4413      	add	r3, r2
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	b219      	sxth	r1, r3
 80016da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80016de:	2b00      	cmp	r3, #0
 80016e0:	bf0c      	ite	eq
 80016e2:	2301      	moveq	r3, #1
 80016e4:	2300      	movne	r3, #0
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	461a      	mov	r2, r3
 80016ea:	f7ff fe2d 	bl	8001348 <ST7565_Draw_pixel>
						for (xx = 0; xx < multiplier; xx++){
 80016ee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	3301      	adds	r3, #1
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	82bb      	strh	r3, [r7, #20]
 80016fa:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80016fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001702:	429a      	cmp	r2, r3
 8001704:	dbdf      	blt.n	80016c6 <ST7565_DrawChar+0x252>
					for (yy = 0; yy < multiplier; yy++){
 8001706:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800170a:	b29b      	uxth	r3, r3
 800170c:	3301      	adds	r3, #1
 800170e:	b29b      	uxth	r3, r3
 8001710:	827b      	strh	r3, [r7, #18]
 8001712:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001716:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800171a:	429a      	cmp	r2, r3
 800171c:	dbd0      	blt.n	80016c0 <ST7565_DrawChar+0x24c>
						}
					}
				}
				//----------------------------------------------------------------------------------------------------
				X += multiplier;
 800171e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001722:	b29a      	uxth	r2, r3
 8001724:	8b3b      	ldrh	r3, [r7, #24]
 8001726:	4413      	add	r3, r2
 8001728:	b29b      	uxth	r3, r3
 800172a:	833b      	strh	r3, [r7, #24]
			for (j = 0; j < Font->FontWidth; j++) {
 800172c:	8bbb      	ldrh	r3, [r7, #28]
 800172e:	3301      	adds	r3, #1
 8001730:	83bb      	strh	r3, [r7, #28]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	b29b      	uxth	r3, r3
 8001738:	8bba      	ldrh	r2, [r7, #28]
 800173a:	429a      	cmp	r2, r3
 800173c:	d387      	bcc.n	800164e <ST7565_DrawChar+0x1da>
			}
			X = x;
 800173e:	89fb      	ldrh	r3, [r7, #14]
 8001740:	833b      	strh	r3, [r7, #24]
			Y += multiplier;
 8001742:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001746:	b29a      	uxth	r2, r3
 8001748:	8afb      	ldrh	r3, [r7, #22]
 800174a:	4413      	add	r3, r2
 800174c:	b29b      	uxth	r3, r3
 800174e:	82fb      	strh	r3, [r7, #22]
		for (i = 0; i < Font->FontHeight; i++) {
 8001750:	8bfb      	ldrh	r3, [r7, #30]
 8001752:	3301      	adds	r3, #1
 8001754:	83fb      	strh	r3, [r7, #30]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	785b      	ldrb	r3, [r3, #1]
 800175a:	b29b      	uxth	r3, r3
 800175c:	8bfa      	ldrh	r2, [r7, #30]
 800175e:	429a      	cmp	r2, r3
 8001760:	f4ff aeaf 	bcc.w	80014c2 <ST7565_DrawChar+0x4e>
		}
		
	}
}
 8001764:	bf00      	nop
 8001766:	3720      	adds	r7, #32
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <ST7565_Print>:
 * @brief	 ( описание ):  функция записывает строку в буфер кадра ( поддерживает кириллицу ( в том числе и Укр. язык) и латиницу
 * @param	( параметры ):	координаты X(0 - 127)  Y(0 - 63), символ, шрифт, множитель, цвет 1 или 0
 * @return  ( возвращает ):
*******************************************************************************/
void ST7565_Print(int16_t x, int16_t y, char *str, FontDef_t *Font, uint8_t multiplier, uint8_t color)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af02      	add	r7, sp, #8
 8001772:	60ba      	str	r2, [r7, #8]
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	4603      	mov	r3, r0
 8001778:	81fb      	strh	r3, [r7, #14]
 800177a:	460b      	mov	r3, r1
 800177c:	81bb      	strh	r3, [r7, #12]
unsigned char buff_char;
uint16_t len = strlen(str);
 800177e:	68b8      	ldr	r0, [r7, #8]
 8001780:	f7fe fd26 	bl	80001d0 <strlen>
 8001784:	4603      	mov	r3, r0
 8001786:	82bb      	strh	r3, [r7, #20]

	if (multiplier < 1) multiplier = 1;
 8001788:	f897 3020 	ldrb.w	r3, [r7, #32]
 800178c:	2b00      	cmp	r3, #0
 800178e:	f040 809c 	bne.w	80018ca <ST7565_Print+0x15e>
 8001792:	2301      	movs	r3, #1
 8001794:	f887 3020 	strb.w	r3, [r7, #32]
	
	while (len--) {
 8001798:	e097      	b.n	80018ca <ST7565_Print+0x15e>
		//---------------------------------------------------------------------
		// проверка на кириллицу UTF-8, если латиница то пропускаем if
		// Расширенные символы ASCII Win-1251 кириллица (код символа 128-255)
		// проверяем первый байт из двух ( так как UTF-8 ето два байта )
		// если он больше либо равен 0xC0 ( первый байт в кириллеце будет равен 0xD0 либо 0xD1 именно в алфавите )
		if ( (uint8_t)*str >= 0xC0 ) {	// код 0xC0 соответствует символу кириллица 'A' по ASCII Win-1251
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2bbf      	cmp	r3, #191	; 0xbf
 80017a0:	d974      	bls.n	800188c <ST7565_Print+0x120>
			// проверяем какой именно байт первый 0xD0 либо 0xD1
			switch ((uint8_t)*str) {
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2bd0      	cmp	r3, #208	; 0xd0
 80017a8:	d002      	beq.n	80017b0 <ST7565_Print+0x44>
 80017aa:	2bd1      	cmp	r3, #209	; 0xd1
 80017ac:	d02c      	beq.n	8001808 <ST7565_Print+0x9c>
 80017ae:	e05b      	b.n	8001868 <ST7565_Print+0xfc>
				case 0xD0:
				//{
					// увеличиваем массив так как нам нужен второй байт
					str++;
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	3301      	adds	r3, #1
 80017b4:	60bb      	str	r3, [r7, #8]
					// проверяем второй байт там сам символ
					if ((uint8_t)*str == 0x81) { buff_char = 0xA8; break; }		// байт символа Ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b81      	cmp	r3, #129	; 0x81
 80017bc:	d102      	bne.n	80017c4 <ST7565_Print+0x58>
 80017be:	23a8      	movs	r3, #168	; 0xa8
 80017c0:	75fb      	strb	r3, [r7, #23]
 80017c2:	e051      	b.n	8001868 <ST7565_Print+0xfc>
					else if ((uint8_t)*str >= 0x90 && (uint8_t)*str <= 0xBF) { buff_char = (*str) + 0x30; }	// байт символов А...Я а...п  делаем здвиг на +48
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b8f      	cmp	r3, #143	; 0x8f
 80017ca:	d908      	bls.n	80017de <ST7565_Print+0x72>
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2bbf      	cmp	r3, #191	; 0xbf
 80017d2:	d804      	bhi.n	80017de <ST7565_Print+0x72>
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	3330      	adds	r3, #48	; 0x30
 80017da:	75fb      	strb	r3, [r7, #23]
					else if ((uint8_t)*str == 0x84) { buff_char = 0xAA; break; }		// байт символа Є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x86) { buff_char = 0xB2; break; }		// байт символа І ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x87) { buff_char = 0xAF; break; }		// байт символа Ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
				break;
 80017dc:	e041      	b.n	8001862 <ST7565_Print+0xf6>
					else if ((uint8_t)*str == 0x84) { buff_char = 0xAA; break; }		// байт символа Є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b84      	cmp	r3, #132	; 0x84
 80017e4:	d102      	bne.n	80017ec <ST7565_Print+0x80>
 80017e6:	23aa      	movs	r3, #170	; 0xaa
 80017e8:	75fb      	strb	r3, [r7, #23]
 80017ea:	e03d      	b.n	8001868 <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x86) { buff_char = 0xB2; break; }		// байт символа І ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b86      	cmp	r3, #134	; 0x86
 80017f2:	d102      	bne.n	80017fa <ST7565_Print+0x8e>
 80017f4:	23b2      	movs	r3, #178	; 0xb2
 80017f6:	75fb      	strb	r3, [r7, #23]
 80017f8:	e036      	b.n	8001868 <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x87) { buff_char = 0xAF; break; }		// байт символа Ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b87      	cmp	r3, #135	; 0x87
 8001800:	d12f      	bne.n	8001862 <ST7565_Print+0xf6>
 8001802:	23af      	movs	r3, #175	; 0xaf
 8001804:	75fb      	strb	r3, [r7, #23]
 8001806:	e02f      	b.n	8001868 <ST7565_Print+0xfc>
				//}
				case 0xD1:
				//{
					// увеличиваем массив так как нам нужен второй байт
					str++;
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	3301      	adds	r3, #1
 800180c:	60bb      	str	r3, [r7, #8]
					// проверяем второй байт там сам символ
					if ((uint8_t)*str == 0x91) { buff_char = 0xB8; break; }		// байт символа ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b91      	cmp	r3, #145	; 0x91
 8001814:	d102      	bne.n	800181c <ST7565_Print+0xb0>
 8001816:	23b8      	movs	r3, #184	; 0xb8
 8001818:	75fb      	strb	r3, [r7, #23]
 800181a:	e025      	b.n	8001868 <ST7565_Print+0xfc>
					else if ((uint8_t)*str >= 0x80 && (uint8_t)*str <= 0x8F) { buff_char = (*str) + 0x70; }	// байт символов п...я	елаем здвиг на +112
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	b25b      	sxtb	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	da08      	bge.n	8001838 <ST7565_Print+0xcc>
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b8f      	cmp	r3, #143	; 0x8f
 800182c:	d804      	bhi.n	8001838 <ST7565_Print+0xcc>
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	3370      	adds	r3, #112	; 0x70
 8001834:	75fb      	strb	r3, [r7, #23]
					else if ((uint8_t)*str == 0x94) { buff_char = 0xBA; break; }		// байт символа є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x96) { buff_char = 0xB3; break; }		// байт символа і ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x97) { buff_char = 0xBF; break; }		// байт символа ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
				break;
 8001836:	e016      	b.n	8001866 <ST7565_Print+0xfa>
					else if ((uint8_t)*str == 0x94) { buff_char = 0xBA; break; }		// байт символа є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b94      	cmp	r3, #148	; 0x94
 800183e:	d102      	bne.n	8001846 <ST7565_Print+0xda>
 8001840:	23ba      	movs	r3, #186	; 0xba
 8001842:	75fb      	strb	r3, [r7, #23]
 8001844:	e010      	b.n	8001868 <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x96) { buff_char = 0xB3; break; }		// байт символа і ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b96      	cmp	r3, #150	; 0x96
 800184c:	d102      	bne.n	8001854 <ST7565_Print+0xe8>
 800184e:	23b3      	movs	r3, #179	; 0xb3
 8001850:	75fb      	strb	r3, [r7, #23]
 8001852:	e009      	b.n	8001868 <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x97) { buff_char = 0xBF; break; }		// байт символа ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b97      	cmp	r3, #151	; 0x97
 800185a:	d104      	bne.n	8001866 <ST7565_Print+0xfa>
 800185c:	23bf      	movs	r3, #191	; 0xbf
 800185e:	75fb      	strb	r3, [r7, #23]
 8001860:	e002      	b.n	8001868 <ST7565_Print+0xfc>
				break;
 8001862:	bf00      	nop
 8001864:	e000      	b.n	8001868 <ST7565_Print+0xfc>
				break;
 8001866:	bf00      	nop
				//}
			}
			// уменьшаем еще переменную так как израсходывали 2 байта для кириллицы
			len--;
 8001868:	8abb      	ldrh	r3, [r7, #20]
 800186a:	3b01      	subs	r3, #1
 800186c:	82bb      	strh	r3, [r7, #20]
			ST7565_DrawChar(x, y, buff_char, Font, multiplier, color);
 800186e:	7dfa      	ldrb	r2, [r7, #23]
 8001870:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001874:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001878:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800187c:	9301      	str	r3, [sp, #4]
 800187e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f7ff fdf5 	bl	8001474 <ST7565_DrawChar>
 800188a:	e00e      	b.n	80018aa <ST7565_Print+0x13e>
		} else {
			ST7565_DrawChar(x, y, *str, Font, multiplier, color);
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	781a      	ldrb	r2, [r3, #0]
 8001890:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001894:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001898:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800189c:	9301      	str	r3, [sp, #4]
 800189e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f7ff fde5 	bl	8001474 <ST7565_DrawChar>
		}
		
		x += (Font->FontWidth * multiplier);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	fb12 f303 	smulbb	r3, r2, r3
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	89fb      	ldrh	r3, [r7, #14]
 80018be:	4413      	add	r3, r2
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	81fb      	strh	r3, [r7, #14]
		str++;
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	3301      	adds	r3, #1
 80018c8:	60bb      	str	r3, [r7, #8]
	while (len--) {
 80018ca:	8abb      	ldrh	r3, [r7, #20]
 80018cc:	1e5a      	subs	r2, r3, #1
 80018ce:	82ba      	strh	r2, [r7, #20]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f47f af62 	bne.w	800179a <ST7565_Print+0x2e>
	}
}
 80018d6:	bf00      	nop
 80018d8:	bf00      	nop
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <ST7565_DrawLine>:
	* @param	( параметры ):	координаты начальной точки и конечной и цвет 0 или 1
								X(0 - 127)  Y(0 - 63)
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint8_t c)
{
 80018e0:	b590      	push	{r4, r7, lr}
 80018e2:	b087      	sub	sp, #28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4604      	mov	r4, r0
 80018e8:	4608      	mov	r0, r1
 80018ea:	4611      	mov	r1, r2
 80018ec:	461a      	mov	r2, r3
 80018ee:	4623      	mov	r3, r4
 80018f0:	80fb      	strh	r3, [r7, #6]
 80018f2:	4603      	mov	r3, r0
 80018f4:	80bb      	strh	r3, [r7, #4]
 80018f6:	460b      	mov	r3, r1
 80018f8:	807b      	strh	r3, [r7, #2]
 80018fa:	4613      	mov	r3, r2
 80018fc:	803b      	strh	r3, [r7, #0]
int16_t dx, dy, sx, sy, err, e2, i, tmp;
	
	/* Check for overflow */
	if (x0 >= SCREEN_WIDTH)  x0 = SCREEN_WIDTH  - 1;
 80018fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001902:	2b7f      	cmp	r3, #127	; 0x7f
 8001904:	dd01      	ble.n	800190a <ST7565_DrawLine+0x2a>
 8001906:	237f      	movs	r3, #127	; 0x7f
 8001908:	80fb      	strh	r3, [r7, #6]
	if (x1 >= SCREEN_WIDTH)  x1 = SCREEN_WIDTH  - 1;
 800190a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800190e:	2b7f      	cmp	r3, #127	; 0x7f
 8001910:	dd01      	ble.n	8001916 <ST7565_DrawLine+0x36>
 8001912:	237f      	movs	r3, #127	; 0x7f
 8001914:	807b      	strh	r3, [r7, #2]
	if (y0 >= SCREEN_HEIGHT) y0 = SCREEN_HEIGHT - 1;
 8001916:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800191a:	2b3f      	cmp	r3, #63	; 0x3f
 800191c:	dd01      	ble.n	8001922 <ST7565_DrawLine+0x42>
 800191e:	233f      	movs	r3, #63	; 0x3f
 8001920:	80bb      	strh	r3, [r7, #4]
	if (y1 >= SCREEN_HEIGHT) y1 = SCREEN_HEIGHT - 1;
 8001922:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001926:	2b3f      	cmp	r3, #63	; 0x3f
 8001928:	dd01      	ble.n	800192e <ST7565_DrawLine+0x4e>
 800192a:	233f      	movs	r3, #63	; 0x3f
 800192c:	803b      	strh	r3, [r7, #0]
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 800192e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001932:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001936:	429a      	cmp	r2, r3
 8001938:	da05      	bge.n	8001946 <ST7565_DrawLine+0x66>
 800193a:	887a      	ldrh	r2, [r7, #2]
 800193c:	88fb      	ldrh	r3, [r7, #6]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	b29b      	uxth	r3, r3
 8001942:	b21b      	sxth	r3, r3
 8001944:	e004      	b.n	8001950 <ST7565_DrawLine+0x70>
 8001946:	88fa      	ldrh	r2, [r7, #6]
 8001948:	887b      	ldrh	r3, [r7, #2]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	b29b      	uxth	r3, r3
 800194e:	b21b      	sxth	r3, r3
 8001950:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8001952:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001956:	f9b7 3000 	ldrsh.w	r3, [r7]
 800195a:	429a      	cmp	r2, r3
 800195c:	da05      	bge.n	800196a <ST7565_DrawLine+0x8a>
 800195e:	883a      	ldrh	r2, [r7, #0]
 8001960:	88bb      	ldrh	r3, [r7, #4]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	b29b      	uxth	r3, r3
 8001966:	b21b      	sxth	r3, r3
 8001968:	e004      	b.n	8001974 <ST7565_DrawLine+0x94>
 800196a:	88ba      	ldrh	r2, [r7, #4]
 800196c:	883b      	ldrh	r3, [r7, #0]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	b29b      	uxth	r3, r3
 8001972:	b21b      	sxth	r3, r3
 8001974:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8001976:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800197a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800197e:	429a      	cmp	r2, r3
 8001980:	da01      	bge.n	8001986 <ST7565_DrawLine+0xa6>
 8001982:	2301      	movs	r3, #1
 8001984:	e001      	b.n	800198a <ST7565_DrawLine+0xaa>
 8001986:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800198a:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 800198c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001990:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001994:	429a      	cmp	r2, r3
 8001996:	da01      	bge.n	800199c <ST7565_DrawLine+0xbc>
 8001998:	2301      	movs	r3, #1
 800199a:	e001      	b.n	80019a0 <ST7565_DrawLine+0xc0>
 800199c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019a0:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 80019a2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80019a6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	dd06      	ble.n	80019bc <ST7565_DrawLine+0xdc>
 80019ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80019b2:	0fda      	lsrs	r2, r3, #31
 80019b4:	4413      	add	r3, r2
 80019b6:	105b      	asrs	r3, r3, #1
 80019b8:	b21b      	sxth	r3, r3
 80019ba:	e006      	b.n	80019ca <ST7565_DrawLine+0xea>
 80019bc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80019c0:	0fda      	lsrs	r2, r3, #31
 80019c2:	4413      	add	r3, r2
 80019c4:	105b      	asrs	r3, r3, #1
 80019c6:	425b      	negs	r3, r3
 80019c8:	b21b      	sxth	r3, r3
 80019ca:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 80019cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d130      	bne.n	8001a36 <ST7565_DrawLine+0x156>
		if (y1 < y0) {
 80019d4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80019d8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80019dc:	429a      	cmp	r2, r3
 80019de:	da05      	bge.n	80019ec <ST7565_DrawLine+0x10c>
			tmp = y1;
 80019e0:	883b      	ldrh	r3, [r7, #0]
 80019e2:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80019e4:	88bb      	ldrh	r3, [r7, #4]
 80019e6:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80019e8:	893b      	ldrh	r3, [r7, #8]
 80019ea:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 80019ec:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80019f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	da05      	bge.n	8001a04 <ST7565_DrawLine+0x124>
			tmp = x1;
 80019f8:	887b      	ldrh	r3, [r7, #2]
 80019fa:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80019fc:	88fb      	ldrh	r3, [r7, #6]
 80019fe:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001a00:	893b      	ldrh	r3, [r7, #8]
 8001a02:	80fb      	strh	r3, [r7, #6]
		}
		
		// Vertical line
		for (i = y0; i <= y1; i++) ST7565_Draw_pixel(x0, i, c);
 8001a04:	88bb      	ldrh	r3, [r7, #4]
 8001a06:	82bb      	strh	r3, [r7, #20]
 8001a08:	e00e      	b.n	8001a28 <ST7565_DrawLine+0x148>
 8001a0a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001a0e:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8001a12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff fc96 	bl	8001348 <ST7565_Draw_pixel>
 8001a1c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	3301      	adds	r3, #1
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	82bb      	strh	r3, [r7, #20]
 8001a28:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001a2c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	ddea      	ble.n	8001a0a <ST7565_DrawLine+0x12a>
		
		return;
 8001a34:	e06e      	b.n	8001b14 <ST7565_DrawLine+0x234>
	}
	
	if (dy == 0) {
 8001a36:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d130      	bne.n	8001aa0 <ST7565_DrawLine+0x1c0>
		if (y1 < y0) {
 8001a3e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001a42:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	da05      	bge.n	8001a56 <ST7565_DrawLine+0x176>
			tmp = y1;
 8001a4a:	883b      	ldrh	r3, [r7, #0]
 8001a4c:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001a4e:	88bb      	ldrh	r3, [r7, #4]
 8001a50:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001a52:	893b      	ldrh	r3, [r7, #8]
 8001a54:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001a56:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001a5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	da05      	bge.n	8001a6e <ST7565_DrawLine+0x18e>
			tmp = x1;
 8001a62:	887b      	ldrh	r3, [r7, #2]
 8001a64:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001a66:	88fb      	ldrh	r3, [r7, #6]
 8001a68:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001a6a:	893b      	ldrh	r3, [r7, #8]
 8001a6c:	80fb      	strh	r3, [r7, #6]
		}
		
		// Horizontal line
		for (i = x0; i <= x1; i++) ST7565_Draw_pixel(i, y0, c);
 8001a6e:	88fb      	ldrh	r3, [r7, #6]
 8001a70:	82bb      	strh	r3, [r7, #20]
 8001a72:	e00e      	b.n	8001a92 <ST7565_DrawLine+0x1b2>
 8001a74:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001a78:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001a7c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fc61 	bl	8001348 <ST7565_Draw_pixel>
 8001a86:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	82bb      	strh	r3, [r7, #20]
 8001a92:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001a96:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	ddea      	ble.n	8001a74 <ST7565_DrawLine+0x194>
		
		return;
 8001a9e:	e039      	b.n	8001b14 <ST7565_DrawLine+0x234>
	}
	
	while (1) {
		ST7565_Draw_pixel(x0, y0, c);
 8001aa0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001aa4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001aa8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fc4b 	bl	8001348 <ST7565_Draw_pixel>
		if (x0 == x1 && y0 == y1) break;
 8001ab2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001ab6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d105      	bne.n	8001aca <ST7565_DrawLine+0x1ea>
 8001abe:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001ac2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d023      	beq.n	8001b12 <ST7565_DrawLine+0x232>

		e2 = err; 
 8001aca:	8afb      	ldrh	r3, [r7, #22]
 8001acc:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8001ace:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001ad2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001ad6:	425b      	negs	r3, r3
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	dd09      	ble.n	8001af0 <ST7565_DrawLine+0x210>
			err -= dy;
 8001adc:	8afa      	ldrh	r2, [r7, #22]
 8001ade:	8a3b      	ldrh	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001ae6:	88fa      	ldrh	r2, [r7, #6]
 8001ae8:	89fb      	ldrh	r3, [r7, #14]
 8001aea:	4413      	add	r3, r2
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8001af0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001af4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	dad1      	bge.n	8001aa0 <ST7565_DrawLine+0x1c0>
			err += dx;
 8001afc:	8afa      	ldrh	r2, [r7, #22]
 8001afe:	8a7b      	ldrh	r3, [r7, #18]
 8001b00:	4413      	add	r3, r2
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001b06:	88ba      	ldrh	r2, [r7, #4]
 8001b08:	89bb      	ldrh	r3, [r7, #12]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	80bb      	strh	r3, [r7, #4]
		ST7565_Draw_pixel(x0, y0, c);
 8001b10:	e7c6      	b.n	8001aa0 <ST7565_DrawLine+0x1c0>
		if (x0 == x1 && y0 == y1) break;
 8001b12:	bf00      	nop
		} 
	}
}
 8001b14:	371c      	adds	r7, #28
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd90      	pop	{r4, r7, pc}

08001b1a <ST7565_DrawRectangle>:
	* @param	( параметры ):	координаты верхнего левого и ширина и высота и цвет
								X(0 - 127)  Y(0 - 63)
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawRectangle(int16_t x, int16_t y, int16_t w, int16_t h, uint8_t c)
{
 8001b1a:	b590      	push	{r4, r7, lr}
 8001b1c:	b085      	sub	sp, #20
 8001b1e:	af02      	add	r7, sp, #8
 8001b20:	4604      	mov	r4, r0
 8001b22:	4608      	mov	r0, r1
 8001b24:	4611      	mov	r1, r2
 8001b26:	461a      	mov	r2, r3
 8001b28:	4623      	mov	r3, r4
 8001b2a:	80fb      	strh	r3, [r7, #6]
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	80bb      	strh	r3, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	807b      	strh	r3, [r7, #2]
 8001b34:	4613      	mov	r3, r2
 8001b36:	803b      	strh	r3, [r7, #0]
	// Check input parameters
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001b38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b3c:	2b7f      	cmp	r3, #127	; 0x7f
 8001b3e:	dc6a      	bgt.n	8001c16 <ST7565_DrawRectangle+0xfc>
 8001b40:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001b44:	2b3f      	cmp	r3, #63	; 0x3f
 8001b46:	dc66      	bgt.n	8001c16 <ST7565_DrawRectangle+0xfc>
	
	// Check width and height
	if ((x + w) >= SCREEN_WIDTH)  w = SCREEN_WIDTH  - x;
 8001b48:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b50:	4413      	add	r3, r2
 8001b52:	2b7f      	cmp	r3, #127	; 0x7f
 8001b54:	dd04      	ble.n	8001b60 <ST7565_DrawRectangle+0x46>
 8001b56:	88fb      	ldrh	r3, [r7, #6]
 8001b58:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	807b      	strh	r3, [r7, #2]
	if ((y + h) >= SCREEN_HEIGHT) h = SCREEN_HEIGHT - y;
 8001b60:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001b64:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001b68:	4413      	add	r3, r2
 8001b6a:	2b3f      	cmp	r3, #63	; 0x3f
 8001b6c:	dd04      	ble.n	8001b78 <ST7565_DrawRectangle+0x5e>
 8001b6e:	88bb      	ldrh	r3, [r7, #4]
 8001b70:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	803b      	strh	r3, [r7, #0]
	
	// Draw 4 lines
	ST7565_DrawLine(x, y, x + w, y, c);         // Top line
 8001b78:	88fa      	ldrh	r2, [r7, #6]
 8001b7a:	887b      	ldrh	r3, [r7, #2]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	b21a      	sxth	r2, r3
 8001b82:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8001b86:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001b8a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001b8e:	7e3b      	ldrb	r3, [r7, #24]
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	4623      	mov	r3, r4
 8001b94:	f7ff fea4 	bl	80018e0 <ST7565_DrawLine>
	ST7565_DrawLine(x, y + h, x + w, y + h, c); // Bottom line
 8001b98:	88ba      	ldrh	r2, [r7, #4]
 8001b9a:	883b      	ldrh	r3, [r7, #0]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	b219      	sxth	r1, r3
 8001ba2:	88fa      	ldrh	r2, [r7, #6]
 8001ba4:	887b      	ldrh	r3, [r7, #2]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	b21c      	sxth	r4, r3
 8001bac:	88ba      	ldrh	r2, [r7, #4]
 8001bae:	883b      	ldrh	r3, [r7, #0]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	b21a      	sxth	r2, r3
 8001bb6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001bba:	7e3b      	ldrb	r3, [r7, #24]
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	4622      	mov	r2, r4
 8001bc2:	f7ff fe8d 	bl	80018e0 <ST7565_DrawLine>
	ST7565_DrawLine(x, y, x, y + h, c);         // Left line
 8001bc6:	88ba      	ldrh	r2, [r7, #4]
 8001bc8:	883b      	ldrh	r3, [r7, #0]
 8001bca:	4413      	add	r3, r2
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	b21c      	sxth	r4, r3
 8001bd0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001bd4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001bd8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001bdc:	7e3b      	ldrb	r3, [r7, #24]
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	4623      	mov	r3, r4
 8001be2:	f7ff fe7d 	bl	80018e0 <ST7565_DrawLine>
	ST7565_DrawLine(x + w, y, x + w, y + h, c); // Right line
 8001be6:	88fa      	ldrh	r2, [r7, #6]
 8001be8:	887b      	ldrh	r3, [r7, #2]
 8001bea:	4413      	add	r3, r2
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	b218      	sxth	r0, r3
 8001bf0:	88fa      	ldrh	r2, [r7, #6]
 8001bf2:	887b      	ldrh	r3, [r7, #2]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	b21c      	sxth	r4, r3
 8001bfa:	88ba      	ldrh	r2, [r7, #4]
 8001bfc:	883b      	ldrh	r3, [r7, #0]
 8001bfe:	4413      	add	r3, r2
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	b21a      	sxth	r2, r3
 8001c04:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001c08:	7e3b      	ldrb	r3, [r7, #24]
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	4622      	mov	r2, r4
 8001c10:	f7ff fe66 	bl	80018e0 <ST7565_DrawLine>
 8001c14:	e000      	b.n	8001c18 <ST7565_DrawRectangle+0xfe>
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001c16:	bf00      	nop
}
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd90      	pop	{r4, r7, pc}

08001c1e <ST7565_DrawFilledRectangle>:
	* @param	( параметры ):	координаты верхнего левого и ширина и высота и цвет
								X(0 - 127)  Y(0 - 63)
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawFilledRectangle(int16_t x, int16_t y, int16_t w, int16_t h, uint8_t c)
{
 8001c1e:	b590      	push	{r4, r7, lr}
 8001c20:	b087      	sub	sp, #28
 8001c22:	af02      	add	r7, sp, #8
 8001c24:	4604      	mov	r4, r0
 8001c26:	4608      	mov	r0, r1
 8001c28:	4611      	mov	r1, r2
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	4623      	mov	r3, r4
 8001c2e:	80fb      	strh	r3, [r7, #6]
 8001c30:	4603      	mov	r3, r0
 8001c32:	80bb      	strh	r3, [r7, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	807b      	strh	r3, [r7, #2]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	803b      	strh	r3, [r7, #0]
uint8_t i;
	
	// Check input parameters
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001c3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c40:	2b7f      	cmp	r3, #127	; 0x7f
 8001c42:	dc41      	bgt.n	8001cc8 <ST7565_DrawFilledRectangle+0xaa>
 8001c44:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c48:	2b3f      	cmp	r3, #63	; 0x3f
 8001c4a:	dc3d      	bgt.n	8001cc8 <ST7565_DrawFilledRectangle+0xaa>
	
	// Check width and height
	if ((x + w) >= SCREEN_WIDTH)  w = SCREEN_WIDTH  - x;
 8001c4c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001c50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001c54:	4413      	add	r3, r2
 8001c56:	2b7f      	cmp	r3, #127	; 0x7f
 8001c58:	dd04      	ble.n	8001c64 <ST7565_DrawFilledRectangle+0x46>
 8001c5a:	88fb      	ldrh	r3, [r7, #6]
 8001c5c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	807b      	strh	r3, [r7, #2]
	if ((y + h) >= SCREEN_HEIGHT) h = SCREEN_HEIGHT - y;
 8001c64:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001c68:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	2b3f      	cmp	r3, #63	; 0x3f
 8001c70:	dd04      	ble.n	8001c7c <ST7565_DrawFilledRectangle+0x5e>
 8001c72:	88bb      	ldrh	r3, [r7, #4]
 8001c74:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	803b      	strh	r3, [r7, #0]
	
	for (i = 0; i <= h; i++) ST7565_DrawLine(x, y + i, x + w, y + i, c);
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	73fb      	strb	r3, [r7, #15]
 8001c80:	e01c      	b.n	8001cbc <ST7565_DrawFilledRectangle+0x9e>
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	88bb      	ldrh	r3, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	b219      	sxth	r1, r3
 8001c8e:	88fa      	ldrh	r2, [r7, #6]
 8001c90:	887b      	ldrh	r3, [r7, #2]
 8001c92:	4413      	add	r3, r2
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	b21c      	sxth	r4, r3
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	88bb      	ldrh	r3, [r7, #4]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	b21a      	sxth	r2, r3
 8001ca4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001ca8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	4622      	mov	r2, r4
 8001cb2:	f7ff fe15 	bl	80018e0 <ST7565_DrawLine>
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	73fb      	strb	r3, [r7, #15]
 8001cbc:	7bfa      	ldrb	r2, [r7, #15]
 8001cbe:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	dddd      	ble.n	8001c82 <ST7565_DrawFilledRectangle+0x64>
 8001cc6:	e000      	b.n	8001cca <ST7565_DrawFilledRectangle+0xac>
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001cc8:	bf00      	nop
}
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd90      	pop	{r4, r7, pc}

08001cd0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001cd4:	f3bf 8f4f 	dsb	sy
}
 8001cd8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <__NVIC_SystemReset+0x24>)
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001ce2:	4904      	ldr	r1, [pc, #16]	; (8001cf4 <__NVIC_SystemReset+0x24>)
 8001ce4:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <__NVIC_SystemReset+0x28>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001cea:	f3bf 8f4f 	dsb	sy
}
 8001cee:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001cf0:	bf00      	nop
 8001cf2:	e7fd      	b.n	8001cf0 <__NVIC_SystemReset+0x20>
 8001cf4:	e000ed00 	.word	0xe000ed00
 8001cf8:	05fa0004 	.word	0x05fa0004

08001cfc <showCfg>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//------------------------------------------------------------------------------------------
void showCfg()
{
 8001cfc:	b5b0      	push	{r4, r5, r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af04      	add	r7, sp, #16
	*strf = '\0';
 8001d02:	4b20      	ldr	r3, [pc, #128]	; (8001d84 <showCfg+0x88>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_LIST; i++) {
 8001d08:	2300      	movs	r3, #0
 8001d0a:	607b      	str	r3, [r7, #4]
 8001d0c:	e02d      	b.n	8001d6a <showCfg+0x6e>
		sprintf(strf+strlen(strf), "%u:%.1f:%s\r\n", list[i].band, list[i].freq, list[i].name);
 8001d0e:	481d      	ldr	r0, [pc, #116]	; (8001d84 <showCfg+0x88>)
 8001d10:	f7fe fa5e 	bl	80001d0 <strlen>
 8001d14:	4603      	mov	r3, r0
 8001d16:	4a1b      	ldr	r2, [pc, #108]	; (8001d84 <showCfg+0x88>)
 8001d18:	189c      	adds	r4, r3, r2
 8001d1a:	491b      	ldr	r1, [pc, #108]	; (8001d88 <showCfg+0x8c>)
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	4413      	add	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	440b      	add	r3, r1
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	461d      	mov	r5, r3
 8001d2c:	4916      	ldr	r1, [pc, #88]	; (8001d88 <showCfg+0x8c>)
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	4613      	mov	r3, r2
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	4413      	add	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	440b      	add	r3, r1
 8001d3a:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7fe fc02 	bl	8000548 <__aeabi_f2d>
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	4613      	mov	r3, r2
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	4413      	add	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4a0e      	ldr	r2, [pc, #56]	; (8001d88 <showCfg+0x8c>)
 8001d50:	4413      	add	r3, r2
 8001d52:	3305      	adds	r3, #5
 8001d54:	9302      	str	r3, [sp, #8]
 8001d56:	e9cd 0100 	strd	r0, r1, [sp]
 8001d5a:	462a      	mov	r2, r5
 8001d5c:	490b      	ldr	r1, [pc, #44]	; (8001d8c <showCfg+0x90>)
 8001d5e:	4620      	mov	r0, r4
 8001d60:	f00d fcf4 	bl	800f74c <siprintf>
	for (int i = 0; i < MAX_LIST; i++) {
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3301      	adds	r3, #1
 8001d68:	607b      	str	r3, [r7, #4]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b18      	cmp	r3, #24
 8001d6e:	ddce      	ble.n	8001d0e <showCfg+0x12>
	}
	Report(0, "%s", strf);
 8001d70:	4a04      	ldr	r2, [pc, #16]	; (8001d84 <showCfg+0x88>)
 8001d72:	4907      	ldr	r1, [pc, #28]	; (8001d90 <showCfg+0x94>)
 8001d74:	2000      	movs	r0, #0
 8001d76:	f002 fb8b 	bl	8004490 <Report>
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bdb0      	pop	{r4, r5, r7, pc}
 8001d82:	bf00      	nop
 8001d84:	2000153c 	.word	0x2000153c
 8001d88:	20002da0 	.word	0x20002da0
 8001d8c:	08013390 	.word	0x08013390
 8001d90:	080133a0 	.word	0x080133a0

08001d94 <bleWakeUp>:
//-------------------------------------------------------------------------------------------

#ifdef SET_BLE
//-------------------------------------------------------------------------------------------
void bleWakeUp()
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
	WAKEUP_DOWN();
 8001d98:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <bleWakeUp+0x20>)
 8001d9a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d9e:	619a      	str	r2, [r3, #24]
	HAL_Delay(100);
 8001da0:	2064      	movs	r0, #100	; 0x64
 8001da2:	f004 fffd 	bl	8006da0 <HAL_Delay>
	WAKEUP_UP();
 8001da6:	4b03      	ldr	r3, [pc, #12]	; (8001db4 <bleWakeUp+0x20>)
 8001da8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dac:	619a      	str	r2, [r3, #24]
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	48000400 	.word	0x48000400

08001db8 <get_bleStat>:
//-------------------------------------------------------------------------------------------
uint8_t get_bleStat()
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(BLE_STAT_GPIO_Port, BLE_STAT_Pin);
 8001dbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dc0:	4802      	ldr	r0, [pc, #8]	; (8001dcc <get_bleStat+0x14>)
 8001dc2:	f005 fd83 	bl	80078cc <HAL_GPIO_ReadPin>
 8001dc6:	4603      	mov	r3, r0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	48000400 	.word	0x48000400

08001dd0 <bleWrite>:
//-------------------------------------------------------------------------------------------
void bleWrite(const char *str, bool prn)
{
 8001dd0:	b590      	push	{r4, r7, lr}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	70fb      	strb	r3, [r7, #3]
	if (ble_withDMA) {
 8001ddc:	4b25      	ldr	r3, [pc, #148]	; (8001e74 <bleWrite+0xa4>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d023      	beq.n	8001e2c <bleWrite+0x5c>
		while (!bleRdy) {};
 8001de4:	bf00      	nop
 8001de6:	4b24      	ldr	r3, [pc, #144]	; (8001e78 <bleWrite+0xa8>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0fb      	beq.n	8001de6 <bleWrite+0x16>
		bleRdy = 0;
 8001dee:	4b22      	ldr	r3, [pc, #136]	; (8001e78 <bleWrite+0xa8>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	701a      	strb	r2, [r3, #0]
		if (HAL_UART_Transmit_DMA(blePort, (uint8_t *)str, strlen(str)) != HAL_OK) devError |= devBLE;
 8001df4:	4b21      	ldr	r3, [pc, #132]	; (8001e7c <bleWrite+0xac>)
 8001df6:	681c      	ldr	r4, [r3, #0]
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f7fe f9e9 	bl	80001d0 <strlen>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	461a      	mov	r2, r3
 8001e04:	6879      	ldr	r1, [r7, #4]
 8001e06:	4620      	mov	r0, r4
 8001e08:	f00b fa9a 	bl	800d340 <HAL_UART_Transmit_DMA>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d006      	beq.n	8001e20 <bleWrite+0x50>
 8001e12:	4b1b      	ldr	r3, [pc, #108]	; (8001e80 <bleWrite+0xb0>)
 8001e14:	881b      	ldrh	r3, [r3, #0]
 8001e16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <bleWrite+0xb0>)
 8001e1e:	801a      	strh	r2, [r3, #0]
		while (!bleRdy) {};
 8001e20:	bf00      	nop
 8001e22:	4b15      	ldr	r3, [pc, #84]	; (8001e78 <bleWrite+0xa8>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0fb      	beq.n	8001e22 <bleWrite+0x52>
 8001e2a:	e016      	b.n	8001e5a <bleWrite+0x8a>
		/*while (HAL_UART_GetState(blePort) != HAL_UART_STATE_READY) {
			if (HAL_UART_GetState(blePort) == HAL_UART_STATE_BUSY_RX) break;
			//HAL_Delay(1);
		}*/
	} else {
		if (HAL_UART_Transmit(blePort, (uint8_t *)str, strlen(str), 1000) != HAL_OK) devError |= devBLE;
 8001e2c:	4b13      	ldr	r3, [pc, #76]	; (8001e7c <bleWrite+0xac>)
 8001e2e:	681c      	ldr	r4, [r3, #0]
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7fe f9cd 	bl	80001d0 <strlen>
 8001e36:	4603      	mov	r3, r0
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	4620      	mov	r0, r4
 8001e42:	f00b f993 	bl	800d16c <HAL_UART_Transmit>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d006      	beq.n	8001e5a <bleWrite+0x8a>
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <bleWrite+0xb0>)
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <bleWrite+0xb0>)
 8001e58:	801a      	strh	r2, [r3, #0]
	}

	if (prn) Report(1, "[BLE] %s", str);
 8001e5a:	78fb      	ldrb	r3, [r7, #3]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d004      	beq.n	8001e6a <bleWrite+0x9a>
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	4908      	ldr	r1, [pc, #32]	; (8001e84 <bleWrite+0xb4>)
 8001e64:	2001      	movs	r0, #1
 8001e66:	f002 fb13 	bl	8004490 <Report>

}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd90      	pop	{r4, r7, pc}
 8001e72:	bf00      	nop
 8001e74:	2000342c 	.word	0x2000342c
 8001e78:	200001fc 	.word	0x200001fc
 8001e7c:	200001f8 	.word	0x200001f8
 8001e80:	2000193c 	.word	0x2000193c
 8001e84:	080133a4 	.word	0x080133a4

08001e88 <initRECQ>:
//------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------
bool initRECQ(s_recq_t *q)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
	q->put = q->get = 0;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	709a      	strb	r2, [r3, #2]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	789a      	ldrb	r2, [r3, #2]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	705a      	strb	r2, [r3, #1]
	q->lock = 0;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < MAX_QREC; i++) {
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	73fb      	strb	r3, [r7, #15]
 8001ea8:	e01b      	b.n	8001ee2 <initRECQ+0x5a>
		q->rec[i].id = i;
 8001eaa:	7bfa      	ldrb	r2, [r7, #15]
 8001eac:	f997 000f 	ldrsb.w	r0, [r7, #15]
 8001eb0:	6879      	ldr	r1, [r7, #4]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	440b      	add	r3, r1
 8001eba:	3303      	adds	r3, #3
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	701a      	strb	r2, [r3, #0]
		q->rec[i].adr = NULL;
 8001ec0:	7bfa      	ldrb	r2, [r7, #15]
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	440b      	add	r3, r1
 8001ecc:	2200      	movs	r2, #0
 8001ece:	711a      	strb	r2, [r3, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	715a      	strb	r2, [r3, #5]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	719a      	strb	r2, [r3, #6]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	71da      	strb	r2, [r3, #7]
	for (uint8_t i = 0; i < MAX_QREC; i++) {
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	73fb      	strb	r3, [r7, #15]
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
 8001ee4:	2b1f      	cmp	r3, #31
 8001ee6:	d9e0      	bls.n	8001eaa <initRECQ+0x22>
	}

	return true;
 8001ee8:	2301      	movs	r3, #1
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3714      	adds	r7, #20
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <putRECQ>:

	return false;
}
//-------------------------------------------------------------------------------------------
int8_t putRECQ(char *adr, s_recq_t *q)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b085      	sub	sp, #20
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
 8001efe:	6039      	str	r1, [r7, #0]
int8_t ret = -1;
 8001f00:	23ff      	movs	r3, #255	; 0xff
 8001f02:	73fb      	strb	r3, [r7, #15]

	while (q->lock) {}
 8001f04:	bf00      	nop
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1fa      	bne.n	8001f06 <putRECQ+0x10>
	q->lock = 1;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	2201      	movs	r2, #1
 8001f14:	701a      	strb	r2, [r3, #0]

	if (q->rec[q->put].adr == NULL) {
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	785b      	ldrb	r3, [r3, #1]
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	460b      	mov	r3, r1
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	440b      	add	r3, r1
 8001f24:	4413      	add	r3, r2
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d121      	bne.n	8001f70 <putRECQ+0x7a>
		q->rec[q->put].adr = adr;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	785b      	ldrb	r3, [r3, #1]
 8001f30:	4619      	mov	r1, r3
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	460b      	mov	r3, r1
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	440b      	add	r3, r1
 8001f3a:	4413      	add	r3, r2
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	605a      	str	r2, [r3, #4]
		ret = q->rec[q->put].id;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	785b      	ldrb	r3, [r3, #1]
 8001f44:	4619      	mov	r1, r3
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	4413      	add	r3, r2
 8001f50:	3303      	adds	r3, #3
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	73fb      	strb	r3, [r7, #15]
		q->put++;   if (q->put >= MAX_QREC) q->put = 0;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	785b      	ldrb	r3, [r3, #1]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	705a      	strb	r2, [r3, #1]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	785b      	ldrb	r3, [r3, #1]
 8001f66:	2b1f      	cmp	r3, #31
 8001f68:	d902      	bls.n	8001f70 <putRECQ+0x7a>
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	705a      	strb	r2, [r3, #1]
	}

	q->lock = 0;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	2200      	movs	r2, #0
 8001f74:	701a      	strb	r2, [r3, #0]

	return ret;
 8001f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <getRECQ>:
//-------------------------------------------------------------------------------------------
int8_t getRECQ(char *dat, s_recq_t *q)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b084      	sub	sp, #16
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	6039      	str	r1, [r7, #0]
int8_t ret = -1;
 8001f90:	23ff      	movs	r3, #255	; 0xff
 8001f92:	73fb      	strb	r3, [r7, #15]
int len = 0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	60bb      	str	r3, [r7, #8]

	while (q->lock) {}
 8001f98:	bf00      	nop
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1fa      	bne.n	8001f9a <getRECQ+0x14>
	q->lock = 1;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	701a      	strb	r2, [r3, #0]

	if (q->rec[q->get].adr != NULL) {
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	789b      	ldrb	r3, [r3, #2]
 8001fae:	4619      	mov	r1, r3
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	440b      	add	r3, r1
 8001fb8:	4413      	add	r3, r2
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d045      	beq.n	800204c <getRECQ+0xc6>
		len = strlen(q->rec[q->get].adr);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	789b      	ldrb	r3, [r3, #2]
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	440b      	add	r3, r1
 8001fce:	4413      	add	r3, r2
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7fe f8fc 	bl	80001d0 <strlen>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	60bb      	str	r3, [r7, #8]
		ret = q->rec[q->get].id;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	789b      	ldrb	r3, [r3, #2]
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	440b      	add	r3, r1
 8001fea:	4413      	add	r3, r2
 8001fec:	3303      	adds	r3, #3
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	73fb      	strb	r3, [r7, #15]
		if (dat) memcpy(dat, q->rec[q->get].adr, len);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00d      	beq.n	8002014 <getRECQ+0x8e>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	789b      	ldrb	r3, [r3, #2]
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	460b      	mov	r3, r1
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	440b      	add	r3, r1
 8002006:	4413      	add	r3, r2
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	68ba      	ldr	r2, [r7, #8]
 800200c:	4619      	mov	r1, r3
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f00c fe16 	bl	800ec40 <memcpy>
		free(q->rec[q->get].adr);
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	789b      	ldrb	r3, [r3, #2]
 8002018:	4619      	mov	r1, r3
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	460b      	mov	r3, r1
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	440b      	add	r3, r1
 8002022:	4413      	add	r3, r2
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	4618      	mov	r0, r3
 8002028:	f00c fe02 	bl	800ec30 <free>
		q->rec[q->get].adr = NULL;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	789b      	ldrb	r3, [r3, #2]
 8002030:	4619      	mov	r1, r3
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	460b      	mov	r3, r1
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	4413      	add	r3, r2
 800203c:	2200      	movs	r2, #0
 800203e:	711a      	strb	r2, [r3, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	715a      	strb	r2, [r3, #5]
 8002044:	2200      	movs	r2, #0
 8002046:	719a      	strb	r2, [r3, #6]
 8002048:	2200      	movs	r2, #0
 800204a:	71da      	strb	r2, [r3, #7]
	}

	if (ret >= 0) {
 800204c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002050:	2b00      	cmp	r3, #0
 8002052:	db14      	blt.n	800207e <getRECQ+0xf8>
		if (dat) *(dat + len) = '\0';
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d004      	beq.n	8002064 <getRECQ+0xde>
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	4413      	add	r3, r2
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]
		q->get++;   if (q->get >= MAX_QREC) q->get = 0;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	789b      	ldrb	r3, [r3, #2]
 8002068:	3301      	adds	r3, #1
 800206a:	b2da      	uxtb	r2, r3
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	709a      	strb	r2, [r3, #2]
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	789b      	ldrb	r3, [r3, #2]
 8002074:	2b1f      	cmp	r3, #31
 8002076:	d902      	bls.n	800207e <getRECQ+0xf8>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	2200      	movs	r2, #0
 800207c:	709a      	strb	r2, [r3, #2]
	}

	q->lock = 0;
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	2200      	movs	r2, #0
 8002082:	701a      	strb	r2, [r3, #0]

	return ret;
 8002084:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002094:	b0c2      	sub	sp, #264	; 0x108
 8002096:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002098:	f004 fe0d 	bl	8006cb6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800209c:	f001 fa64 	bl	8003568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020a0:	f001 fcd4 	bl	8003a4c <MX_GPIO_Init>
  MX_TIM4_Init();
 80020a4:	f001 fbca 	bl	800383c <MX_TIM4_Init>
  MX_DMA_Init();
 80020a8:	f001 fc76 	bl	8003998 <MX_DMA_Init>
  MX_RTC_Init();
 80020ac:	f001 faee 	bl	800368c <MX_RTC_Init>
  MX_USART2_UART_Init();
 80020b0:	f001 fc42 	bl	8003938 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80020b4:	f001 fb84 	bl	80037c0 <MX_SPI2_Init>
  MX_SPI1_Init();
 80020b8:	f001 fb44 	bl	8003744 <MX_SPI1_Init>
  MX_I2C1_Init();
 80020bc:	f001 faa6 	bl	800360c <MX_I2C1_Init>
  MX_UART4_Init();
 80020c0:	f001 fc0a 	bl	80038d8 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */


    if (HAL_TIM_Base_Start_IT(tikPort) != HAL_OK) devError |= devTIK;
 80020c4:	4b64      	ldr	r3, [pc, #400]	; (8002258 <main+0x1c8>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f00a fb77 	bl	800c7bc <HAL_TIM_Base_Start_IT>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d006      	beq.n	80020e2 <main+0x52>
 80020d4:	4b61      	ldr	r3, [pc, #388]	; (800225c <main+0x1cc>)
 80020d6:	881b      	ldrh	r3, [r3, #0]
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	b29a      	uxth	r2, r3
 80020de:	4b5f      	ldr	r3, [pc, #380]	; (800225c <main+0x1cc>)
 80020e0:	801a      	strh	r2, [r3, #0]

    for (int8_t i = 0; i < 4; i++) {
 80020e2:	2300      	movs	r3, #0
 80020e4:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 80020e8:	e012      	b.n	8002110 <main+0x80>
    	errLedOn(true);
 80020ea:	2001      	movs	r0, #1
 80020ec:	f002 f880 	bl	80041f0 <errLedOn>
    	HAL_Delay(100);
 80020f0:	2064      	movs	r0, #100	; 0x64
 80020f2:	f004 fe55 	bl	8006da0 <HAL_Delay>
    	errLedOn(false);
 80020f6:	2000      	movs	r0, #0
 80020f8:	f002 f87a 	bl	80041f0 <errLedOn>
    	HAL_Delay(100);
 80020fc:	2064      	movs	r0, #100	; 0x64
 80020fe:	f004 fe4f 	bl	8006da0 <HAL_Delay>
    for (int8_t i = 0; i < 4; i++) {
 8002102:	f997 30e7 	ldrsb.w	r3, [r7, #231]	; 0xe7
 8002106:	b2db      	uxtb	r3, r3
 8002108:	3301      	adds	r3, #1
 800210a:	b2db      	uxtb	r3, r3
 800210c:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8002110:	f997 30e7 	ldrsb.w	r3, [r7, #231]	; 0xe7
 8002114:	2b03      	cmp	r3, #3
 8002116:	dde8      	ble.n	80020ea <main+0x5a>
    }

    if (HAL_UART_Receive_IT(cmdPort, &rxByte, 1) != HAL_OK) devError |= devUART;
 8002118:	4b51      	ldr	r3, [pc, #324]	; (8002260 <main+0x1d0>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2201      	movs	r2, #1
 800211e:	4951      	ldr	r1, [pc, #324]	; (8002264 <main+0x1d4>)
 8002120:	4618      	mov	r0, r3
 8002122:	f00b f8b7 	bl	800d294 <HAL_UART_Receive_IT>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d006      	beq.n	800213a <main+0xaa>
 800212c:	4b4b      	ldr	r3, [pc, #300]	; (800225c <main+0x1cc>)
 800212e:	881b      	ldrh	r3, [r3, #0]
 8002130:	f043 0302 	orr.w	r3, r3, #2
 8002134:	b29a      	uxth	r2, r3
 8002136:	4b49      	ldr	r3, [pc, #292]	; (800225c <main+0x1cc>)
 8002138:	801a      	strh	r2, [r3, #0]
#ifdef SET_BLE
    if (HAL_UART_Receive_IT(blePort, &rxbByte, 1) != HAL_OK) devError |= devBLE;
 800213a:	4b4b      	ldr	r3, [pc, #300]	; (8002268 <main+0x1d8>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2201      	movs	r2, #1
 8002140:	494a      	ldr	r1, [pc, #296]	; (800226c <main+0x1dc>)
 8002142:	4618      	mov	r0, r3
 8002144:	f00b f8a6 	bl	800d294 <HAL_UART_Receive_IT>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d006      	beq.n	800215c <main+0xcc>
 800214e:	4b43      	ldr	r3, [pc, #268]	; (800225c <main+0x1cc>)
 8002150:	881b      	ldrh	r3, [r3, #0]
 8002152:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002156:	b29a      	uxth	r2, r3
 8002158:	4b40      	ldr	r3, [pc, #256]	; (800225c <main+0x1cc>)
 800215a:	801a      	strh	r2, [r3, #0]
#endif

    set_Date(epoch);
 800215c:	4b44      	ldr	r3, [pc, #272]	; (8002270 <main+0x1e0>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4618      	mov	r0, r3
 8002162:	f002 f89b 	bl	800429c <set_Date>

    HAL_Delay(100);
 8002166:	2064      	movs	r0, #100	; 0x64
 8002168:	f004 fe1a 	bl	8006da0 <HAL_Delay>

    Report(1, "[que:%u] Start application ver.%s\r\n", cntEvt, ver);
 800216c:	4b41      	ldr	r3, [pc, #260]	; (8002274 <main+0x1e4>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	b2db      	uxtb	r3, r3
 8002172:	461a      	mov	r2, r3
 8002174:	4b40      	ldr	r3, [pc, #256]	; (8002278 <main+0x1e8>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4940      	ldr	r1, [pc, #256]	; (800227c <main+0x1ec>)
 800217a:	2001      	movs	r0, #1
 800217c:	f002 f988 	bl	8004490 <Report>

#ifdef SET_W25FLASH
    chipPresent = W25qxx_Init();
 8002180:	f004 f920 	bl	80063c4 <W25qxx_Init>
 8002184:	4603      	mov	r3, r0
 8002186:	461a      	mov	r2, r3
 8002188:	4b3d      	ldr	r3, [pc, #244]	; (8002280 <main+0x1f0>)
 800218a:	701a      	strb	r2, [r3, #0]
    uint32_t cid = W25qxx_getChipID();
 800218c:	f004 f9d4 	bl	8006538 <W25qxx_getChipID>
 8002190:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
    if ( chipPresent && ((cid >= W25Q10) && (cid <= W25Q128)) ) validChipID = true;
 8002194:	4b3a      	ldr	r3, [pc, #232]	; (8002280 <main+0x1f0>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00a      	beq.n	80021b2 <main+0x122>
 800219c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d006      	beq.n	80021b2 <main+0x122>
 80021a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d802      	bhi.n	80021b2 <main+0x122>
 80021ac:	4b35      	ldr	r3, [pc, #212]	; (8002284 <main+0x1f4>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	701a      	strb	r2, [r3, #0]
    list_sector = W25qxx_getPageSize() << 1;
 80021b2:	f004 f9e5 	bl	8006580 <W25qxx_getPageSize>
 80021b6:	4603      	mov	r3, r0
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	461a      	mov	r2, r3
 80021bc:	4b32      	ldr	r3, [pc, #200]	; (8002288 <main+0x1f8>)
 80021be:	601a      	str	r2, [r3, #0]
    //
    listSize = sizeof(rec_t) * MAX_LIST;
 80021c0:	4b32      	ldr	r3, [pc, #200]	; (800228c <main+0x1fc>)
 80021c2:	f44f 7261 	mov.w	r2, #900	; 0x384
 80021c6:	801a      	strh	r2, [r3, #0]
    memset((uint8_t *)&list[0].band, 0, listSize);
 80021c8:	4b30      	ldr	r3, [pc, #192]	; (800228c <main+0x1fc>)
 80021ca:	881b      	ldrh	r3, [r3, #0]
 80021cc:	461a      	mov	r2, r3
 80021ce:	2100      	movs	r1, #0
 80021d0:	482f      	ldr	r0, [pc, #188]	; (8002290 <main+0x200>)
 80021d2:	f00c fd43 	bl	800ec5c <memset>
    //
    cfgSector = W25qxx_getSectorCount() - 1;
 80021d6:	f004 f9bb 	bl	8006550 <W25qxx_getSectorCount>
 80021da:	4603      	mov	r3, r0
 80021dc:	3b01      	subs	r3, #1
 80021de:	4a2d      	ldr	r2, [pc, #180]	; (8002294 <main+0x204>)
 80021e0:	6013      	str	r3, [r2, #0]
    if (W25qxx_IsEmptySector(cfgSector, 0, listSize)) {//sector is empty -> need write data to sector
 80021e2:	4b2c      	ldr	r3, [pc, #176]	; (8002294 <main+0x204>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a29      	ldr	r2, [pc, #164]	; (800228c <main+0x1fc>)
 80021e8:	8812      	ldrh	r2, [r2, #0]
 80021ea:	2100      	movs	r1, #0
 80021ec:	4618      	mov	r0, r3
 80021ee:	f004 fa31 	bl	8006654 <W25qxx_IsEmptySector>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d017      	beq.n	8002228 <main+0x198>
    	if (!(devError & devSPI)) {
 80021f8:	4b18      	ldr	r3, [pc, #96]	; (800225c <main+0x1cc>)
 80021fa:	881b      	ldrh	r3, [r3, #0]
 80021fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002200:	2b00      	cmp	r3, #0
 8002202:	d156      	bne.n	80022b2 <main+0x222>
    		W25qxx_WriteSector((uint8_t *)&def_list[0].band, cfgSector, 0, listSize);
 8002204:	4b23      	ldr	r3, [pc, #140]	; (8002294 <main+0x204>)
 8002206:	6819      	ldr	r1, [r3, #0]
 8002208:	4b20      	ldr	r3, [pc, #128]	; (800228c <main+0x1fc>)
 800220a:	881b      	ldrh	r3, [r3, #0]
 800220c:	2200      	movs	r2, #0
 800220e:	4822      	ldr	r0, [pc, #136]	; (8002298 <main+0x208>)
 8002210:	f004 fb94 	bl	800693c <W25qxx_WriteSector>
    		Report(1, "Writen cfg_stations_data (%lu bytes) to cfgSector #%lu\r\n", listSize, cfgSector);
 8002214:	4b1d      	ldr	r3, [pc, #116]	; (800228c <main+0x1fc>)
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	461a      	mov	r2, r3
 800221a:	4b1e      	ldr	r3, [pc, #120]	; (8002294 <main+0x204>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	491f      	ldr	r1, [pc, #124]	; (800229c <main+0x20c>)
 8002220:	2001      	movs	r0, #1
 8002222:	f002 f935 	bl	8004490 <Report>
 8002226:	e044      	b.n	80022b2 <main+0x222>
      	}
    } else {//in sector	present any data
    	if (!(devError & devSPI)) {
 8002228:	4b0c      	ldr	r3, [pc, #48]	; (800225c <main+0x1cc>)
 800222a:	881b      	ldrh	r3, [r3, #0]
 800222c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002230:	2b00      	cmp	r3, #0
 8002232:	d137      	bne.n	80022a4 <main+0x214>
    		W25qxx_ReadSector((uint8_t *)&list[0].band, cfgSector, 0, listSize);
 8002234:	4b17      	ldr	r3, [pc, #92]	; (8002294 <main+0x204>)
 8002236:	6819      	ldr	r1, [r3, #0]
 8002238:	4b14      	ldr	r3, [pc, #80]	; (800228c <main+0x1fc>)
 800223a:	881b      	ldrh	r3, [r3, #0]
 800223c:	2200      	movs	r2, #0
 800223e:	4814      	ldr	r0, [pc, #80]	; (8002290 <main+0x200>)
 8002240:	f004 fca4 	bl	8006b8c <W25qxx_ReadSector>
    		Report(1, "Readed cfg_stations_data (%lu bytes) from cfgSector #%lu\r\n", listSize, cfgSector);
 8002244:	4b11      	ldr	r3, [pc, #68]	; (800228c <main+0x1fc>)
 8002246:	881b      	ldrh	r3, [r3, #0]
 8002248:	461a      	mov	r2, r3
 800224a:	4b12      	ldr	r3, [pc, #72]	; (8002294 <main+0x204>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4914      	ldr	r1, [pc, #80]	; (80022a0 <main+0x210>)
 8002250:	2001      	movs	r0, #1
 8002252:	f002 f91d 	bl	8004490 <Report>
 8002256:	e02c      	b.n	80022b2 <main+0x222>
 8002258:	20000008 	.word	0x20000008
 800225c:	2000193c 	.word	0x2000193c
 8002260:	20000010 	.word	0x20000010
 8002264:	20001950 	.word	0x20001950
 8002268:	200001f8 	.word	0x200001f8
 800226c:	20003126 	.word	0x20003126
 8002270:	20000018 	.word	0x20000018
 8002274:	20001d5c 	.word	0x20001d5c
 8002278:	20000004 	.word	0x20000004
 800227c:	080133b0 	.word	0x080133b0
 8002280:	20002d74 	.word	0x20002d74
 8002284:	20002d75 	.word	0x20002d75
 8002288:	20001d68 	.word	0x20001d68
 800228c:	20003124 	.word	0x20003124
 8002290:	20002da0 	.word	0x20002da0
 8002294:	20002d80 	.word	0x20002d80
 8002298:	08014448 	.word	0x08014448
 800229c:	080133d4 	.word	0x080133d4
 80022a0:	08013410 	.word	0x08013410
      	} else {
      		memcpy((uint8_t *)&list[0].band, (uint8_t *)&def_list[0].band, listSize);
 80022a4:	4ba8      	ldr	r3, [pc, #672]	; (8002548 <main+0x4b8>)
 80022a6:	881b      	ldrh	r3, [r3, #0]
 80022a8:	461a      	mov	r2, r3
 80022aa:	49a8      	ldr	r1, [pc, #672]	; (800254c <main+0x4bc>)
 80022ac:	48a8      	ldr	r0, [pc, #672]	; (8002550 <main+0x4c0>)
 80022ae:	f00c fcc7 	bl	800ec40 <memcpy>
#endif


#ifdef SET_RDA_CHIP

    rdaID = rda5807_init(&Freq);
 80022b2:	48a8      	ldr	r0, [pc, #672]	; (8002554 <main+0x4c4>)
 80022b4:	f002 fe00 	bl	8004eb8 <rda5807_init>
 80022b8:	4603      	mov	r3, r0
 80022ba:	461a      	mov	r2, r3
 80022bc:	4ba6      	ldr	r3, [pc, #664]	; (8002558 <main+0x4c8>)
 80022be:	701a      	strb	r2, [r3, #0]
    RSSI = rda5807_rssi();
 80022c0:	f002 fe68 	bl	8004f94 <rda5807_rssi>
 80022c4:	4603      	mov	r3, r0
 80022c6:	461a      	mov	r2, r3
 80022c8:	4ba4      	ldr	r3, [pc, #656]	; (800255c <main+0x4cc>)
 80022ca:	801a      	strh	r2, [r3, #0]
    rda5807_SetVolume(Volume);
 80022cc:	4ba4      	ldr	r3, [pc, #656]	; (8002560 <main+0x4d0>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f003 f83d 	bl	8005350 <rda5807_SetVolume>
    rda5807_SetBassBoost(BassBoost);
 80022d6:	4ba3      	ldr	r3, [pc, #652]	; (8002564 <main+0x4d4>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f003 f880 	bl	80053e0 <rda5807_SetBassBoost>
    stereo = rda5807_Get_StereoMonoFlag();
 80022e0:	f003 f994 	bl	800560c <rda5807_Get_StereoMonoFlag>
 80022e4:	4603      	mov	r3, r0
 80022e6:	461a      	mov	r2, r3
 80022e8:	4b9f      	ldr	r3, [pc, #636]	; (8002568 <main+0x4d8>)
 80022ea:	701a      	strb	r2, [r3, #0]
    Chan = rda5807_Get_Channel();
 80022ec:	f003 f9a6 	bl	800563c <rda5807_Get_Channel>
 80022f0:	4603      	mov	r3, r0
 80022f2:	461a      	mov	r2, r3
 80022f4:	4b9d      	ldr	r3, [pc, #628]	; (800256c <main+0x4dc>)
 80022f6:	801a      	strh	r2, [r3, #0]
#endif

#ifdef SET_DISPLAY

	#ifdef FONT_6x8
  		FontDef_t Font_6x8 = { 6, 8, Font6x8 };
 80022f8:	4a9d      	ldr	r2, [pc, #628]	; (8002570 <main+0x4e0>)
 80022fa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80022fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002302:	6018      	str	r0, [r3, #0]
 8002304:	3304      	adds	r3, #4
 8002306:	8019      	strh	r1, [r3, #0]
  		lfnt = &Font_6x8;
 8002308:	4a9a      	ldr	r2, [pc, #616]	; (8002574 <main+0x4e4>)
 800230a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800230e:	6013      	str	r3, [r2, #0]
	#endif

  	uint16_t lin1 = 1;
 8002310:	2301      	movs	r3, #1
 8002312:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
  	uint16_t lin2 = lin1 + Font_6x8.FontHeight;//chipID...
 8002316:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 800231a:	b29a      	uxth	r2, r3
 800231c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002320:	4413      	add	r3, r2
 8002322:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
  	uint16_t lin3 = lin2 + Font_6x8.FontHeight + 1;//Band...
 8002326:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 800232a:	b29a      	uxth	r2, r3
 800232c:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8002330:	4413      	add	r3, r2
 8002332:	b29b      	uxth	r3, r3
 8002334:	3301      	adds	r3, #1
 8002336:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
  	uint16_t lin4 = lin3 + Font_6x8.FontHeight + 1;//Volume...//Freq...
 800233a:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 800233e:	b29a      	uxth	r2, r3
 8002340:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8002344:	4413      	add	r3, r2
 8002346:	b29b      	uxth	r3, r3
 8002348:	3301      	adds	r3, #1
 800234a:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
  	uint16_t lin5 = lin4 + Font_6x8.FontHeight + 1;//Freq...//Volume...
 800234e:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8002352:	b29a      	uxth	r2, r3
 8002354:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8002358:	4413      	add	r3, r2
 800235a:	b29b      	uxth	r3, r3
 800235c:	3301      	adds	r3, #1
 800235e:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
  	uint16_t lin6 = lin5 + Font_6x8.FontHeight + 1;//Station
 8002362:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8002366:	b29a      	uxth	r2, r3
 8002368:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800236c:	4413      	add	r3, r2
 800236e:	b29b      	uxth	r3, r3
 8002370:	3301      	adds	r3, #1
 8002372:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
  	char st[64];
  	char sta[32];
  	char stb[32];

  	ST7565_Reset();
 8002376:	f7fe fea7 	bl	80010c8 <ST7565_Reset>
  	ST7565_Init();
 800237a:	f7fe ffbd 	bl	80012f8 <ST7565_Init>

  	ST7565_CMD_DISPLAY(CMD_DISPLAY_ON);
 800237e:	20af      	movs	r0, #175	; 0xaf
 8002380:	f7fe ffd4 	bl	800132c <ST7565_CMD_DISPLAY>

    int dl = sprintf(tmp, "Ver.%s", ver);
 8002384:	4b7c      	ldr	r3, [pc, #496]	; (8002578 <main+0x4e8>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	461a      	mov	r2, r3
 800238a:	497c      	ldr	r1, [pc, #496]	; (800257c <main+0x4ec>)
 800238c:	487c      	ldr	r0, [pc, #496]	; (8002580 <main+0x4f0>)
 800238e:	f00d f9dd 	bl	800f74c <siprintf>
 8002392:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
    uint16_t x = ((SCREEN_WIDTH - (Font_6x8.FontWidth * dl)) >> 1) & 0x7f;
 8002396:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 800239a:	461a      	mov	r2, r3
 800239c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023a0:	fb02 f303 	mul.w	r3, r2, r3
 80023a4:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80023a8:	105b      	asrs	r3, r3, #1
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023b0:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
    ST7565_Print(x, SCREEN_HEIGHT - Font_6x8.FontHeight, tmp, &Font_6x8, 1, PIX_ON);//печатаем надпись с указаным шрифтом и цветом(PIX_ON-белый, PIX_OFF-черный)
 80023b4:	f9b7 00b2 	ldrsh.w	r0, [r7, #178]	; 0xb2
 80023b8:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 80023bc:	b29b      	uxth	r3, r3
 80023be:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	b219      	sxth	r1, r3
 80023c6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80023ca:	2201      	movs	r2, #1
 80023cc:	9201      	str	r2, [sp, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	9200      	str	r2, [sp, #0]
 80023d2:	4a6b      	ldr	r2, [pc, #428]	; (8002580 <main+0x4f0>)
 80023d4:	f7ff f9ca 	bl	800176c <ST7565_Print>

	#ifdef SET_RDA_CHIP
    	int il = sprintf(st, "RDA5807 chipID:0x%x", rdaID);
 80023d8:	4b5f      	ldr	r3, [pc, #380]	; (8002558 <main+0x4c8>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	461a      	mov	r2, r3
 80023de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80023e2:	4968      	ldr	r1, [pc, #416]	; (8002584 <main+0x4f4>)
 80023e4:	4618      	mov	r0, r3
 80023e6:	f00d f9b1 	bl	800f74c <siprintf>
 80023ea:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    	uint16_t xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * il)) >> 1) & 0x7f;
 80023ee:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80023f2:	461a      	mov	r2, r3
 80023f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023f8:	fb02 f303 	mul.w	r3, r2, r3
 80023fc:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002400:	105b      	asrs	r3, r3, #1
 8002402:	b29b      	uxth	r3, r3
 8002404:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002408:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    	if (!xf) xf = 1;
 800240c:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 8002410:	2b00      	cmp	r3, #0
 8002412:	d102      	bne.n	800241a <main+0x38a>
 8002414:	2301      	movs	r3, #1
 8002416:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    	ST7565_Print(xf, lin2, st, &Font_6x8, 1, PIX_ON);
 800241a:	f9b7 00da 	ldrsh.w	r0, [r7, #218]	; 0xda
 800241e:	f9b7 10bc 	ldrsh.w	r1, [r7, #188]	; 0xbc
 8002422:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002426:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800242a:	2401      	movs	r4, #1
 800242c:	9401      	str	r4, [sp, #4]
 800242e:	2401      	movs	r4, #1
 8002430:	9400      	str	r4, [sp, #0]
 8002432:	f7ff f99b 	bl	800176c <ST7565_Print>

    	int it = sprintf(stb, "FM Band:%s", allBands[Band]);//(uint16_t)lBand, (uint16_t)rBand);
 8002436:	4b54      	ldr	r3, [pc, #336]	; (8002588 <main+0x4f8>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	461a      	mov	r2, r3
 800243c:	4b53      	ldr	r3, [pc, #332]	; (800258c <main+0x4fc>)
 800243e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002442:	f107 0310 	add.w	r3, r7, #16
 8002446:	4952      	ldr	r1, [pc, #328]	; (8002590 <main+0x500>)
 8002448:	4618      	mov	r0, r3
 800244a:	f00d f97f 	bl	800f74c <siprintf>
 800244e:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
    	int lit = it;
 8002452:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002456:	60fb      	str	r3, [r7, #12]
    	xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * it)) >> 1) & 0x7f;
 8002458:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 800245c:	461a      	mov	r2, r3
 800245e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002462:	fb02 f303 	mul.w	r3, r2, r3
 8002466:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800246a:	105b      	asrs	r3, r3, #1
 800246c:	b29b      	uxth	r3, r3
 800246e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002472:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 8002476:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <main+0x3f6>
 800247e:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 8002482:	2b7d      	cmp	r3, #125	; 0x7d
 8002484:	d902      	bls.n	800248c <main+0x3fc>
 8002486:	2301      	movs	r3, #1
 8002488:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    	ST7565_Print(xf, lin3, stb, &Font_6x8, 1, PIX_ON);
 800248c:	f9b7 00da 	ldrsh.w	r0, [r7, #218]	; 0xda
 8002490:	f9b7 10ba 	ldrsh.w	r1, [r7, #186]	; 0xba
 8002494:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002498:	f107 0210 	add.w	r2, r7, #16
 800249c:	2401      	movs	r4, #1
 800249e:	9401      	str	r4, [sp, #4]
 80024a0:	2401      	movs	r4, #1
 80024a2:	9400      	str	r4, [sp, #0]
 80024a4:	f7ff f962 	bl	800176c <ST7565_Print>

    	int im = sprintf(st, "Bass:%u Vol:%u", BassBoost, Volume);
 80024a8:	4b2e      	ldr	r3, [pc, #184]	; (8002564 <main+0x4d4>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	461a      	mov	r2, r3
 80024ae:	4b2c      	ldr	r3, [pc, #176]	; (8002560 <main+0x4d0>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80024b6:	4937      	ldr	r1, [pc, #220]	; (8002594 <main+0x504>)
 80024b8:	f00d f948 	bl	800f74c <siprintf>
 80024bc:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
    	int lim = im;
 80024c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024c4:	60bb      	str	r3, [r7, #8]
    	xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * im)) >> 1) & 0x7f;
 80024c6:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80024ca:	461a      	mov	r2, r3
 80024cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024d0:	fb02 f303 	mul.w	r3, r2, r3
 80024d4:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80024d8:	105b      	asrs	r3, r3, #1
 80024da:	b29b      	uxth	r3, r3
 80024dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024e0:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 80024e4:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <main+0x464>
 80024ec:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 80024f0:	2b7d      	cmp	r3, #125	; 0x7d
 80024f2:	d902      	bls.n	80024fa <main+0x46a>
 80024f4:	2301      	movs	r3, #1
 80024f6:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    	ST7565_Print(xf, lin4, st, &Font_6x8, 1, PIX_ON);
 80024fa:	f9b7 00da 	ldrsh.w	r0, [r7, #218]	; 0xda
 80024fe:	f9b7 10b8 	ldrsh.w	r1, [r7, #184]	; 0xb8
 8002502:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002506:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800250a:	2401      	movs	r4, #1
 800250c:	9401      	str	r4, [sp, #4]
 800250e:	2401      	movs	r4, #1
 8002510:	9400      	str	r4, [sp, #0]
 8002512:	f7ff f92b 	bl	800176c <ST7565_Print>

    	if (stereo)
 8002516:	4b14      	ldr	r3, [pc, #80]	; (8002568 <main+0x4d8>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d03e      	beq.n	800259c <main+0x50c>
    		il = sprintf(st, "Rssi:%u Freq:%.1f S", RSSI, Freq);
 800251e:	4b0f      	ldr	r3, [pc, #60]	; (800255c <main+0x4cc>)
 8002520:	881b      	ldrh	r3, [r3, #0]
 8002522:	461c      	mov	r4, r3
 8002524:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <main+0x4c4>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f7fe f80d 	bl	8000548 <__aeabi_f2d>
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002536:	e9cd 2300 	strd	r2, r3, [sp]
 800253a:	4622      	mov	r2, r4
 800253c:	4916      	ldr	r1, [pc, #88]	; (8002598 <main+0x508>)
 800253e:	f00d f905 	bl	800f74c <siprintf>
 8002542:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 8002546:	e03d      	b.n	80025c4 <main+0x534>
 8002548:	20003124 	.word	0x20003124
 800254c:	08014448 	.word	0x08014448
 8002550:	20002da0 	.word	0x20002da0
 8002554:	200001d4 	.word	0x200001d4
 8002558:	20002d98 	.word	0x20002d98
 800255c:	20002d96 	.word	0x20002d96
 8002560:	200001df 	.word	0x200001df
 8002564:	20002d9a 	.word	0x20002d9a
 8002568:	20002d9c 	.word	0x20002d9c
 800256c:	20002d94 	.word	0x20002d94
 8002570:	080137f8 	.word	0x080137f8
 8002574:	20002d88 	.word	0x20002d88
 8002578:	20000004 	.word	0x20000004
 800257c:	0801344c 	.word	0x0801344c
 8002580:	200010bc 	.word	0x200010bc
 8002584:	08013454 	.word	0x08013454
 8002588:	200001dc 	.word	0x200001dc
 800258c:	200001e8 	.word	0x200001e8
 8002590:	08013468 	.word	0x08013468
 8002594:	08013474 	.word	0x08013474
 8002598:	08013484 	.word	0x08013484
    	else
    		il = sprintf(st, "Rssi:%u Freq:%.1f", RSSI, Freq);
 800259c:	4bc2      	ldr	r3, [pc, #776]	; (80028a8 <main+0x818>)
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	461c      	mov	r4, r3
 80025a2:	4bc2      	ldr	r3, [pc, #776]	; (80028ac <main+0x81c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fd ffce 	bl	8000548 <__aeabi_f2d>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80025b4:	e9cd 2300 	strd	r2, r3, [sp]
 80025b8:	4622      	mov	r2, r4
 80025ba:	49bd      	ldr	r1, [pc, #756]	; (80028b0 <main+0x820>)
 80025bc:	f00d f8c6 	bl	800f74c <siprintf>
 80025c0:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    	int lil = il;
 80025c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025c8:	607b      	str	r3, [r7, #4]
    	xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * il)) >> 1) & 0x7f;
 80025ca:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80025ce:	461a      	mov	r2, r3
 80025d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025d4:	fb02 f303 	mul.w	r3, r2, r3
 80025d8:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80025dc:	105b      	asrs	r3, r3, #1
 80025de:	b29b      	uxth	r3, r3
 80025e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025e4:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 80025e8:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <main+0x568>
 80025f0:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 80025f4:	2b7d      	cmp	r3, #125	; 0x7d
 80025f6:	d902      	bls.n	80025fe <main+0x56e>
 80025f8:	2301      	movs	r3, #1
 80025fa:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    	ST7565_Print(xf, lin5, st, &Font_6x8, 1, PIX_ON);
 80025fe:	f9b7 00da 	ldrsh.w	r0, [r7, #218]	; 0xda
 8002602:	f9b7 10b6 	ldrsh.w	r1, [r7, #182]	; 0xb6
 8002606:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800260a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800260e:	2401      	movs	r4, #1
 8002610:	9401      	str	r4, [sp, #4]
 8002612:	2401      	movs	r4, #1
 8002614:	9400      	str	r4, [sp, #0]
 8002616:	f7ff f8a9 	bl	800176c <ST7565_Print>

    	int ia = sprintf(sta, "%s", nameStation(Freq));
 800261a:	4ba4      	ldr	r3, [pc, #656]	; (80028ac <main+0x81c>)
 800261c:	edd3 7a00 	vldr	s15, [r3]
 8002620:	eeb0 0a67 	vmov.f32	s0, s15
 8002624:	f001 fc4c 	bl	8003ec0 <nameStation>
 8002628:	4602      	mov	r2, r0
 800262a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800262e:	49a1      	ldr	r1, [pc, #644]	; (80028b4 <main+0x824>)
 8002630:	4618      	mov	r0, r3
 8002632:	f00d f88b 	bl	800f74c <siprintf>
 8002636:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
    	int lia = ia;
 800263a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800263e:	603b      	str	r3, [r7, #0]
    	xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * ia)) >> 1) & 0x7f;
 8002640:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8002644:	461a      	mov	r2, r3
 8002646:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800264a:	fb02 f303 	mul.w	r3, r2, r3
 800264e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002652:	105b      	asrs	r3, r3, #1
 8002654:	b29b      	uxth	r3, r3
 8002656:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800265a:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 800265e:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <main+0x5de>
 8002666:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 800266a:	2b7d      	cmp	r3, #125	; 0x7d
 800266c:	d902      	bls.n	8002674 <main+0x5e4>
 800266e:	2301      	movs	r3, #1
 8002670:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    	ST7565_Print(xf, lin6, sta, &Font_6x8, 1, PIX_ON);
 8002674:	f9b7 00da 	ldrsh.w	r0, [r7, #218]	; 0xda
 8002678:	f9b7 10b4 	ldrsh.w	r1, [r7, #180]	; 0xb4
 800267c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002680:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002684:	2401      	movs	r4, #1
 8002686:	9401      	str	r4, [sp, #4]
 8002688:	2401      	movs	r4, #1
 800268a:	9400      	str	r4, [sp, #0]
 800268c:	f7ff f86e 	bl	800176c <ST7565_Print>

    	Report(1, "ChipID:0x%x Chan:%u Freq:%.2f %s RSSI:%u Band:%s Vol:%u BassEn:%u\r\n",
 8002690:	4b89      	ldr	r3, [pc, #548]	; (80028b8 <main+0x828>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	461e      	mov	r6, r3
 8002696:	4b89      	ldr	r3, [pc, #548]	; (80028bc <main+0x82c>)
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	4698      	mov	r8, r3
 800269c:	4b83      	ldr	r3, [pc, #524]	; (80028ac <main+0x81c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7fd ff51 	bl	8000548 <__aeabi_f2d>
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	497f      	ldr	r1, [pc, #508]	; (80028a8 <main+0x818>)
 80026ac:	8809      	ldrh	r1, [r1, #0]
 80026ae:	460c      	mov	r4, r1
 80026b0:	4983      	ldr	r1, [pc, #524]	; (80028c0 <main+0x830>)
 80026b2:	7809      	ldrb	r1, [r1, #0]
 80026b4:	4608      	mov	r0, r1
 80026b6:	4983      	ldr	r1, [pc, #524]	; (80028c4 <main+0x834>)
 80026b8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80026bc:	4882      	ldr	r0, [pc, #520]	; (80028c8 <main+0x838>)
 80026be:	7800      	ldrb	r0, [r0, #0]
 80026c0:	4605      	mov	r5, r0
 80026c2:	4882      	ldr	r0, [pc, #520]	; (80028cc <main+0x83c>)
 80026c4:	7800      	ldrb	r0, [r0, #0]
 80026c6:	9006      	str	r0, [sp, #24]
 80026c8:	9505      	str	r5, [sp, #20]
 80026ca:	9104      	str	r1, [sp, #16]
 80026cc:	9403      	str	r4, [sp, #12]
 80026ce:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80026d2:	9102      	str	r1, [sp, #8]
 80026d4:	e9cd 2300 	strd	r2, r3, [sp]
 80026d8:	4643      	mov	r3, r8
 80026da:	4632      	mov	r2, r6
 80026dc:	497c      	ldr	r1, [pc, #496]	; (80028d0 <main+0x840>)
 80026de:	2001      	movs	r0, #1
 80026e0:	f001 fed6 	bl	8004490 <Report>
    			rdaID, Chan, Freq, sta, RSSI, allBands[Band], Volume, BassBoost);
	#endif

    ST7565_DrawRectangle(0, Font_6x8.FontHeight, SCREEN_WIDTH - 1, SCREEN_HEIGHT - (Font_6x8.FontHeight << 1) - 2, PIX_ON);
 80026e4:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 80026e8:	b219      	sxth	r1, r3
 80026ea:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	f1c3 033e 	rsb	r3, r3, #62	; 0x3e
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	b21b      	sxth	r3, r3
 80026fc:	2201      	movs	r2, #1
 80026fe:	9200      	str	r2, [sp, #0]
 8002700:	227f      	movs	r2, #127	; 0x7f
 8002702:	2000      	movs	r0, #0
 8002704:	f7ff fa09 	bl	8001b1a <ST7565_DrawRectangle>
    ST7565_DrawFilledRectangle(0, 0, SCREEN_WIDTH - 1, Font_6x8.FontHeight, PIX_ON);
 8002708:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 800270c:	b21b      	sxth	r3, r3
 800270e:	2201      	movs	r2, #1
 8002710:	9200      	str	r2, [sp, #0]
 8002712:	227f      	movs	r2, #127	; 0x7f
 8002714:	2100      	movs	r1, #0
 8002716:	2000      	movs	r0, #0
 8002718:	f7ff fa81 	bl	8001c1e <ST7565_DrawFilledRectangle>
    ST7565_Update();
 800271c:	f7fe fe76 	bl	800140c <ST7565_Update>

    startSec = true;
 8002720:	4b6c      	ldr	r3, [pc, #432]	; (80028d4 <main+0x844>)
 8002722:	2201      	movs	r2, #1
 8002724:	701a      	strb	r2, [r3, #0]

#endif

#ifdef SET_BLE
    bleQueAckFlag   = initRECQ(&bleQueAck);
 8002726:	486c      	ldr	r0, [pc, #432]	; (80028d8 <main+0x848>)
 8002728:	f7ff fbae 	bl	8001e88 <initRECQ>
 800272c:	4603      	mov	r3, r0
 800272e:	461a      	mov	r2, r3
 8002730:	4b6a      	ldr	r3, [pc, #424]	; (80028dc <main+0x84c>)
 8002732:	701a      	strb	r2, [r3, #0]
    bleQueCmdFlag   = initRECQ(&bleQueCmd);
 8002734:	486a      	ldr	r0, [pc, #424]	; (80028e0 <main+0x850>)
 8002736:	f7ff fba7 	bl	8001e88 <initRECQ>
 800273a:	4603      	mov	r3, r0
 800273c:	461a      	mov	r2, r3
 800273e:	4b69      	ldr	r3, [pc, #420]	; (80028e4 <main+0x854>)
 8002740:	701a      	strb	r2, [r3, #0]

    bleWrite("AT+RESET\r\n", 1);
 8002742:	2101      	movs	r1, #1
 8002744:	4868      	ldr	r0, [pc, #416]	; (80028e8 <main+0x858>)
 8002746:	f7ff fb43 	bl	8001dd0 <bleWrite>
    ble_stat = get_bleStat();
 800274a:	f7ff fb35 	bl	8001db8 <get_bleStat>
 800274e:	4603      	mov	r3, r0
 8002750:	461a      	mov	r2, r3
 8002752:	4b66      	ldr	r3, [pc, #408]	; (80028ec <main+0x85c>)
 8002754:	701a      	strb	r2, [r3, #0]
    Report(1, "[BLE] stat = %u\r\n", ble_stat);
 8002756:	4b65      	ldr	r3, [pc, #404]	; (80028ec <main+0x85c>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	461a      	mov	r2, r3
 800275c:	4964      	ldr	r1, [pc, #400]	; (80028f0 <main+0x860>)
 800275e:	2001      	movs	r0, #1
 8002760:	f001 fe96 	bl	8004490 <Report>
#endif

    uint16_t lastErr = devOK;
 8002764:	2300      	movs	r3, #0
 8002766:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8

    putEvt(evt_Freq);
 800276a:	200c      	movs	r0, #12
 800276c:	f001 faf6 	bl	8003d5c <putEvt>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


    while (!restart) {
 8002770:	f000 bebc 	b.w	80034ec <main+0x145c>


#ifdef SET_FIFO_MODE
    	evt = getEvt();
 8002774:	f001 fb64 	bl	8003e40 <getEvt>
 8002778:	4603      	mov	r3, r0
 800277a:	4a5e      	ldr	r2, [pc, #376]	; (80028f4 <main+0x864>)
 800277c:	6013      	str	r3, [r2, #0]
    	if (evt != evt_None) {
 800277e:	4b5d      	ldr	r3, [pc, #372]	; (80028f4 <main+0x864>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002786:	f000 8609 	beq.w	800339c <main+0x130c>
    		cntEvt = getEvtCount();
 800278a:	f001 fadb 	bl	8003d44 <getEvtCount>
 800278e:	4603      	mov	r3, r0
 8002790:	461a      	mov	r2, r3
 8002792:	4b59      	ldr	r3, [pc, #356]	; (80028f8 <main+0x868>)
 8002794:	701a      	strb	r2, [r3, #0]
    		if (evt != evt_Sec) {
 8002796:	4b57      	ldr	r3, [pc, #348]	; (80028f4 <main+0x864>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2b08      	cmp	r3, #8
 800279c:	d050      	beq.n	8002840 <main+0x7b0>
    			Report(1, "[que:%u] get event '%s'\r\n", cntEvt, str_cmds[evt]);
 800279e:	4b56      	ldr	r3, [pc, #344]	; (80028f8 <main+0x868>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	4619      	mov	r1, r3
 80027a6:	4b53      	ldr	r3, [pc, #332]	; (80028f4 <main+0x864>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a54      	ldr	r2, [pc, #336]	; (80028fc <main+0x86c>)
 80027ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b0:	460a      	mov	r2, r1
 80027b2:	4953      	ldr	r1, [pc, #332]	; (8002900 <main+0x870>)
 80027b4:	2001      	movs	r0, #1
 80027b6:	f001 fe6b 	bl	8004490 <Report>
#ifdef SET_DISPLAY
    			ST7565_DrawFilledRectangle(0, SCREEN_HEIGHT - Font_6x8.FontHeight, SCREEN_WIDTH - 1, Font_6x8.FontHeight, PIX_OFF);
 80027ba:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 80027be:	b29b      	uxth	r3, r3
 80027c0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	b219      	sxth	r1, r3
 80027c8:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 80027cc:	b21b      	sxth	r3, r3
 80027ce:	2200      	movs	r2, #0
 80027d0:	9200      	str	r2, [sp, #0]
 80027d2:	227f      	movs	r2, #127	; 0x7f
 80027d4:	2000      	movs	r0, #0
 80027d6:	f7ff fa22 	bl	8001c1e <ST7565_DrawFilledRectangle>
    			dl = sprintf(tmp, "evt(%u) : %s", cntEvt, str_cmds[evt]);
 80027da:	4b47      	ldr	r3, [pc, #284]	; (80028f8 <main+0x868>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	4619      	mov	r1, r3
 80027e2:	4b44      	ldr	r3, [pc, #272]	; (80028f4 <main+0x864>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a45      	ldr	r2, [pc, #276]	; (80028fc <main+0x86c>)
 80027e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ec:	460a      	mov	r2, r1
 80027ee:	4945      	ldr	r1, [pc, #276]	; (8002904 <main+0x874>)
 80027f0:	4845      	ldr	r0, [pc, #276]	; (8002908 <main+0x878>)
 80027f2:	f00c ffab 	bl	800f74c <siprintf>
 80027f6:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
    			x = ((SCREEN_WIDTH - (Font_6x8.FontWidth * dl)) >> 1) & 0x7f;
 80027fa:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80027fe:	461a      	mov	r2, r3
 8002800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002804:	fb02 f303 	mul.w	r3, r2, r3
 8002808:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800280c:	105b      	asrs	r3, r3, #1
 800280e:	b29b      	uxth	r3, r3
 8002810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002814:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
    			ST7565_Print(x, SCREEN_HEIGHT - Font_6x8.FontHeight, tmp, &Font_6x8, 1, PIX_ON);//печатаем надпись с указаным шрифтом и цветом(PIX_ON-белый, PIX_OFF-черный)
 8002818:	f9b7 00b2 	ldrsh.w	r0, [r7, #178]	; 0xb2
 800281c:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8002820:	b29b      	uxth	r3, r3
 8002822:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002826:	b29b      	uxth	r3, r3
 8002828:	b219      	sxth	r1, r3
 800282a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800282e:	2201      	movs	r2, #1
 8002830:	9201      	str	r2, [sp, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	9200      	str	r2, [sp, #0]
 8002836:	4a34      	ldr	r2, [pc, #208]	; (8002908 <main+0x878>)
 8002838:	f7fe ff98 	bl	800176c <ST7565_Print>
    			ST7565_Update();
 800283c:	f7fe fde6 	bl	800140c <ST7565_Update>
#endif
    		}
    		switch (evt) {
 8002840:	4b2c      	ldr	r3, [pc, #176]	; (80028f4 <main+0x864>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2b13      	cmp	r3, #19
 8002846:	f200 8599 	bhi.w	800337c <main+0x12ec>
 800284a:	a201      	add	r2, pc, #4	; (adr r2, 8002850 <main+0x7c0>)
 800284c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002850:	0800308f 	.word	0x0800308f
 8002854:	080030dd 	.word	0x080030dd
 8002858:	080030f5 	.word	0x080030f5
 800285c:	08003115 	.word	0x08003115
 8002860:	08003189 	.word	0x08003189
 8002864:	0800332d 	.word	0x0800332d
 8002868:	08003189 	.word	0x08003189
 800286c:	080032ab 	.word	0x080032ab
 8002870:	08002e39 	.word	0x08002e39
 8002874:	08002dd3 	.word	0x08002dd3
 8002878:	08003077 	.word	0x08003077
 800287c:	08002db3 	.word	0x08002db3
 8002880:	08002c67 	.word	0x08002c67
 8002884:	08002b01 	.word	0x08002b01
 8002888:	08002b7b 	.word	0x08002b7b
 800288c:	08002a85 	.word	0x08002a85
 8002890:	080029e1 	.word	0x080029e1
 8002894:	0800290d 	.word	0x0800290d
 8002898:	080029d9 	.word	0x080029d9
 800289c:	080028a1 	.word	0x080028a1
    			case evt_WakeUp:
    				bleWakeUp();
 80028a0:	f7ff fa78 	bl	8001d94 <bleWakeUp>
    			break;
 80028a4:	f000 bd6a 	b.w	800337c <main+0x12ec>
 80028a8:	20002d96 	.word	0x20002d96
 80028ac:	200001d4 	.word	0x200001d4
 80028b0:	08013498 	.word	0x08013498
 80028b4:	080133a0 	.word	0x080133a0
 80028b8:	20002d98 	.word	0x20002d98
 80028bc:	20002d94 	.word	0x20002d94
 80028c0:	200001dc 	.word	0x200001dc
 80028c4:	200001e8 	.word	0x200001e8
 80028c8:	200001df 	.word	0x200001df
 80028cc:	20002d9a 	.word	0x20002d9a
 80028d0:	080134ac 	.word	0x080134ac
 80028d4:	20002d84 	.word	0x20002d84
 80028d8:	20003430 	.word	0x20003430
 80028dc:	20003577 	.word	0x20003577
 80028e0:	200034d4 	.word	0x200034d4
 80028e4:	20003578 	.word	0x20003578
 80028e8:	080134f0 	.word	0x080134f0
 80028ec:	2000342d 	.word	0x2000342d
 80028f0:	080134fc 	.word	0x080134fc
 80028f4:	200001bc 	.word	0x200001bc
 80028f8:	20001d5c 	.word	0x20001d5c
 80028fc:	2000006c 	.word	0x2000006c
 8002900:	08013510 	.word	0x08013510
 8002904:	0801352c 	.word	0x0801352c
 8002908:	200010bc 	.word	0x200010bc
    			case evt_Band:
    				Band = newBand;
 800290c:	4bab      	ldr	r3, [pc, #684]	; (8002bbc <main+0xb2c>)
 800290e:	781a      	ldrb	r2, [r3, #0]
 8002910:	4bab      	ldr	r3, [pc, #684]	; (8002bc0 <main+0xb30>)
 8002912:	701a      	strb	r2, [r3, #0]
    				if (!rda5807_Set_Band(Band)) {
 8002914:	4baa      	ldr	r3, [pc, #680]	; (8002bc0 <main+0xb30>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f002 fea1 	bl	8005660 <rda5807_Set_Band>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	f040 8522 	bne.w	800336a <main+0x12da>
    					sprintf(stb, "FM Band:%s", allBands[Band]);//(uint16_t)lBand, (uint16_t)rBand);
 8002926:	4ba6      	ldr	r3, [pc, #664]	; (8002bc0 <main+0xb30>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	461a      	mov	r2, r3
 800292c:	4ba5      	ldr	r3, [pc, #660]	; (8002bc4 <main+0xb34>)
 800292e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002932:	f107 0310 	add.w	r3, r7, #16
 8002936:	49a4      	ldr	r1, [pc, #656]	; (8002bc8 <main+0xb38>)
 8002938:	4618      	mov	r0, r3
 800293a:	f00c ff07 	bl	800f74c <siprintf>
    					showLine(stb, lin3, &lit, true);
 800293e:	f107 020c 	add.w	r2, r7, #12
 8002942:	f8b7 10ba 	ldrh.w	r1, [r7, #186]	; 0xba
 8002946:	f107 0010 	add.w	r0, r7, #16
 800294a:	2301      	movs	r3, #1
 800294c:	f001 fbe2 	bl	8004114 <showLine>
    					Report(1, "[que:%u] set new band=%u '%s'\r\n", cntEvt, Band, allBands[Band]);
 8002950:	4b9e      	ldr	r3, [pc, #632]	; (8002bcc <main+0xb3c>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	b2db      	uxtb	r3, r3
 8002956:	4619      	mov	r1, r3
 8002958:	4b99      	ldr	r3, [pc, #612]	; (8002bc0 <main+0xb30>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	4b98      	ldr	r3, [pc, #608]	; (8002bc0 <main+0xb30>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	461a      	mov	r2, r3
 8002964:	4b97      	ldr	r3, [pc, #604]	; (8002bc4 <main+0xb34>)
 8002966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800296a:	9300      	str	r3, [sp, #0]
 800296c:	4603      	mov	r3, r0
 800296e:	460a      	mov	r2, r1
 8002970:	4997      	ldr	r1, [pc, #604]	; (8002bd0 <main+0xb40>)
 8002972:	2001      	movs	r0, #1
 8002974:	f001 fd8c 	bl	8004490 <Report>
    					if (next_evt == evt) {
 8002978:	4b96      	ldr	r3, [pc, #600]	; (8002bd4 <main+0xb44>)
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	4b96      	ldr	r3, [pc, #600]	; (8002bd8 <main+0xb48>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	429a      	cmp	r2, r3
 8002982:	d120      	bne.n	80029c6 <main+0x936>
    						if ((Freq < lBand) || (Freq > rBand)) {
 8002984:	4b95      	ldr	r3, [pc, #596]	; (8002bdc <main+0xb4c>)
 8002986:	ed93 7a00 	vldr	s14, [r3]
 800298a:	4b95      	ldr	r3, [pc, #596]	; (8002be0 <main+0xb50>)
 800298c:	edd3 7a00 	vldr	s15, [r3]
 8002990:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002998:	d40c      	bmi.n	80029b4 <main+0x924>
 800299a:	4b90      	ldr	r3, [pc, #576]	; (8002bdc <main+0xb4c>)
 800299c:	ed93 7a00 	vldr	s14, [r3]
 80029a0:	4b90      	ldr	r3, [pc, #576]	; (8002be4 <main+0xb54>)
 80029a2:	edd3 7a00 	vldr	s15, [r3]
 80029a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ae:	dc01      	bgt.n	80029b4 <main+0x924>
    					} else {
    						next_evt = evt;
    						putEvt(evt_Freq);
    					}
    				}
    			break;
 80029b0:	f000 bcdb 	b.w	800336a <main+0x12da>
    							newFreq = lBand;
 80029b4:	4b8a      	ldr	r3, [pc, #552]	; (8002be0 <main+0xb50>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a8b      	ldr	r2, [pc, #556]	; (8002be8 <main+0xb58>)
 80029ba:	6013      	str	r3, [r2, #0]
    							putEvt(evt_Freq);
 80029bc:	200c      	movs	r0, #12
 80029be:	f001 f9cd 	bl	8003d5c <putEvt>
    			break;
 80029c2:	f000 bcd2 	b.w	800336a <main+0x12da>
    						next_evt = evt;
 80029c6:	4b84      	ldr	r3, [pc, #528]	; (8002bd8 <main+0xb48>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a82      	ldr	r2, [pc, #520]	; (8002bd4 <main+0xb44>)
 80029cc:	6013      	str	r3, [r2, #0]
    						putEvt(evt_Freq);
 80029ce:	200c      	movs	r0, #12
 80029d0:	f001 f9c4 	bl	8003d5c <putEvt>
    			break;
 80029d4:	f000 bcc9 	b.w	800336a <main+0x12da>
    			case evt_Cfg:
    				showCfg();
 80029d8:	f7ff f990 	bl	8001cfc <showCfg>
    			break;
 80029dc:	f000 bcce 	b.w	800337c <main+0x12ec>
    			case evt_List:
    				next_evt = evt_Freq;
 80029e0:	4b7c      	ldr	r3, [pc, #496]	; (8002bd4 <main+0xb44>)
 80029e2:	220c      	movs	r2, #12
 80029e4:	601a      	str	r2, [r3, #0]
    				newFreq = getNextList(Freq, seek_up, &newBand);
 80029e6:	4b7d      	ldr	r3, [pc, #500]	; (8002bdc <main+0xb4c>)
 80029e8:	edd3 7a00 	vldr	s15, [r3]
 80029ec:	4b7f      	ldr	r3, [pc, #508]	; (8002bec <main+0xb5c>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	4972      	ldr	r1, [pc, #456]	; (8002bbc <main+0xb2c>)
 80029f4:	4618      	mov	r0, r3
 80029f6:	eeb0 0a67 	vmov.f32	s0, s15
 80029fa:	f001 faa7 	bl	8003f4c <getNextList>
 80029fe:	eef0 7a40 	vmov.f32	s15, s0
 8002a02:	4b79      	ldr	r3, [pc, #484]	; (8002be8 <main+0xb58>)
 8002a04:	edc3 7a00 	vstr	s15, [r3]
					if (newBand == Band) {
 8002a08:	4b6c      	ldr	r3, [pc, #432]	; (8002bbc <main+0xb2c>)
 8002a0a:	781a      	ldrb	r2, [r3, #0]
 8002a0c:	4b6c      	ldr	r3, [pc, #432]	; (8002bc0 <main+0xb30>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d119      	bne.n	8002a48 <main+0x9b8>
						Report(1, "Band = newBand = %u -> goto set newFreq to %.1f (up = %u)\r\n", newBand, newFreq, seek_up);
 8002a14:	4b69      	ldr	r3, [pc, #420]	; (8002bbc <main+0xb2c>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	461c      	mov	r4, r3
 8002a1a:	4b73      	ldr	r3, [pc, #460]	; (8002be8 <main+0xb58>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fd fd92 	bl	8000548 <__aeabi_f2d>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	4970      	ldr	r1, [pc, #448]	; (8002bec <main+0xb5c>)
 8002a2a:	7809      	ldrb	r1, [r1, #0]
 8002a2c:	b2c9      	uxtb	r1, r1
 8002a2e:	9102      	str	r1, [sp, #8]
 8002a30:	e9cd 2300 	strd	r2, r3, [sp]
 8002a34:	4622      	mov	r2, r4
 8002a36:	496e      	ldr	r1, [pc, #440]	; (8002bf0 <main+0xb60>)
 8002a38:	2001      	movs	r0, #1
 8002a3a:	f001 fd29 	bl	8004490 <Report>
    					putEvt(evt_Freq);
 8002a3e:	200c      	movs	r0, #12
 8002a40:	f001 f98c 	bl	8003d5c <putEvt>
					} else {
						Report(1, "Band = %u -> goto set newBand to %u (newFreq to %.1f up = %u)\r\n", Band, newBand, newFreq, seek_up);
    					putEvt(evt_Band);
					}
    			break;
 8002a44:	f000 bc9a 	b.w	800337c <main+0x12ec>
						Report(1, "Band = %u -> goto set newBand to %u (newFreq to %.1f up = %u)\r\n", Band, newBand, newFreq, seek_up);
 8002a48:	4b5d      	ldr	r3, [pc, #372]	; (8002bc0 <main+0xb30>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	461c      	mov	r4, r3
 8002a4e:	4b5b      	ldr	r3, [pc, #364]	; (8002bbc <main+0xb2c>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	461d      	mov	r5, r3
 8002a54:	4b64      	ldr	r3, [pc, #400]	; (8002be8 <main+0xb58>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7fd fd75 	bl	8000548 <__aeabi_f2d>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	4962      	ldr	r1, [pc, #392]	; (8002bec <main+0xb5c>)
 8002a64:	7809      	ldrb	r1, [r1, #0]
 8002a66:	b2c9      	uxtb	r1, r1
 8002a68:	9102      	str	r1, [sp, #8]
 8002a6a:	e9cd 2300 	strd	r2, r3, [sp]
 8002a6e:	462b      	mov	r3, r5
 8002a70:	4622      	mov	r2, r4
 8002a72:	4960      	ldr	r1, [pc, #384]	; (8002bf4 <main+0xb64>)
 8002a74:	2001      	movs	r0, #1
 8002a76:	f001 fd0b 	bl	8004490 <Report>
    					putEvt(evt_Band);
 8002a7a:	2011      	movs	r0, #17
 8002a7c:	f001 f96e 	bl	8003d5c <putEvt>
    			break;
 8002a80:	f000 bc7c 	b.w	800337c <main+0x12ec>
    			case evt_Bass:
    				if (newBassBoost != BassBoost) {
 8002a84:	4b5c      	ldr	r3, [pc, #368]	; (8002bf8 <main+0xb68>)
 8002a86:	781a      	ldrb	r2, [r3, #0]
 8002a88:	4b5c      	ldr	r3, [pc, #368]	; (8002bfc <main+0xb6c>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	f000 846e 	beq.w	800336e <main+0x12de>
    					BassBoost = newBassBoost;
 8002a92:	4b59      	ldr	r3, [pc, #356]	; (8002bf8 <main+0xb68>)
 8002a94:	781a      	ldrb	r2, [r3, #0]
 8002a96:	4b59      	ldr	r3, [pc, #356]	; (8002bfc <main+0xb6c>)
 8002a98:	701a      	strb	r2, [r3, #0]
    					rda5807_SetBassBoost(BassBoost);
 8002a9a:	4b58      	ldr	r3, [pc, #352]	; (8002bfc <main+0xb6c>)
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f002 fc9e 	bl	80053e0 <rda5807_SetBassBoost>
    					//
    					if (noMute)
 8002aa4:	4b56      	ldr	r3, [pc, #344]	; (8002c00 <main+0xb70>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00a      	beq.n	8002ac2 <main+0xa32>
    						sprintf(st, "Bass:%u Vol:%u", BassBoost, Volume);
 8002aac:	4b53      	ldr	r3, [pc, #332]	; (8002bfc <main+0xb6c>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	4b54      	ldr	r3, [pc, #336]	; (8002c04 <main+0xb74>)
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002aba:	4953      	ldr	r1, [pc, #332]	; (8002c08 <main+0xb78>)
 8002abc:	f00c fe46 	bl	800f74c <siprintf>
 8002ac0:	e009      	b.n	8002ad6 <main+0xa46>
    					else
    						sprintf(st, "Bass:%u Vol:%u M", BassBoost, Volume);
 8002ac2:	4b4e      	ldr	r3, [pc, #312]	; (8002bfc <main+0xb6c>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	4b4e      	ldr	r3, [pc, #312]	; (8002c04 <main+0xb74>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002ad0:	494e      	ldr	r1, [pc, #312]	; (8002c0c <main+0xb7c>)
 8002ad2:	f00c fe3b 	bl	800f74c <siprintf>
    					showLine(st, lin4, &lim, true);
 8002ad6:	f107 0208 	add.w	r2, r7, #8
 8002ada:	f8b7 10b8 	ldrh.w	r1, [r7, #184]	; 0xb8
 8002ade:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	f001 fb16 	bl	8004114 <showLine>
    					Report(1, "[que:%u] set new BassBoost to %u\r\n", cntEvt, BassBoost);
 8002ae8:	4b38      	ldr	r3, [pc, #224]	; (8002bcc <main+0xb3c>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	461a      	mov	r2, r3
 8002af0:	4b42      	ldr	r3, [pc, #264]	; (8002bfc <main+0xb6c>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	4946      	ldr	r1, [pc, #280]	; (8002c10 <main+0xb80>)
 8002af6:	2001      	movs	r0, #1
 8002af8:	f001 fcca 	bl	8004490 <Report>
    				}
    			break;
 8002afc:	f000 bc37 	b.w	800336e <main+0x12de>
    			case evt_Vol:
    				if (newVolume != Volume) {
 8002b00:	4b44      	ldr	r3, [pc, #272]	; (8002c14 <main+0xb84>)
 8002b02:	781a      	ldrb	r2, [r3, #0]
 8002b04:	4b3f      	ldr	r3, [pc, #252]	; (8002c04 <main+0xb74>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	f000 8432 	beq.w	8003372 <main+0x12e2>
    					Volume = newVolume;
 8002b0e:	4b41      	ldr	r3, [pc, #260]	; (8002c14 <main+0xb84>)
 8002b10:	781a      	ldrb	r2, [r3, #0]
 8002b12:	4b3c      	ldr	r3, [pc, #240]	; (8002c04 <main+0xb74>)
 8002b14:	701a      	strb	r2, [r3, #0]
    					rda5807_SetVolume(Volume);
 8002b16:	4b3b      	ldr	r3, [pc, #236]	; (8002c04 <main+0xb74>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f002 fc18 	bl	8005350 <rda5807_SetVolume>
    					//
    					if (noMute)
 8002b20:	4b37      	ldr	r3, [pc, #220]	; (8002c00 <main+0xb70>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00a      	beq.n	8002b3e <main+0xaae>
    						sprintf(st, "Bass:%u Vol:%u", BassBoost, Volume);
 8002b28:	4b34      	ldr	r3, [pc, #208]	; (8002bfc <main+0xb6c>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	4b35      	ldr	r3, [pc, #212]	; (8002c04 <main+0xb74>)
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002b36:	4934      	ldr	r1, [pc, #208]	; (8002c08 <main+0xb78>)
 8002b38:	f00c fe08 	bl	800f74c <siprintf>
 8002b3c:	e009      	b.n	8002b52 <main+0xac2>
    					else
    						sprintf(st, "Bass:%u Vol:%u M", BassBoost, Volume);
 8002b3e:	4b2f      	ldr	r3, [pc, #188]	; (8002bfc <main+0xb6c>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	461a      	mov	r2, r3
 8002b44:	4b2f      	ldr	r3, [pc, #188]	; (8002c04 <main+0xb74>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002b4c:	492f      	ldr	r1, [pc, #188]	; (8002c0c <main+0xb7c>)
 8002b4e:	f00c fdfd 	bl	800f74c <siprintf>
    					showLine(st, lin4, &lim, true);
 8002b52:	f107 0208 	add.w	r2, r7, #8
 8002b56:	f8b7 10b8 	ldrh.w	r1, [r7, #184]	; 0xb8
 8002b5a:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002b5e:	2301      	movs	r3, #1
 8002b60:	f001 fad8 	bl	8004114 <showLine>
    					Report(1, "[que:%u] set new Volume to %u\r\n", cntEvt, Volume);
 8002b64:	4b19      	ldr	r3, [pc, #100]	; (8002bcc <main+0xb3c>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	4b25      	ldr	r3, [pc, #148]	; (8002c04 <main+0xb74>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	4929      	ldr	r1, [pc, #164]	; (8002c18 <main+0xb88>)
 8002b72:	2001      	movs	r0, #1
 8002b74:	f001 fc8c 	bl	8004490 <Report>
    				}
    			break;
 8002b78:	e3fb      	b.n	8003372 <main+0x12e2>
    			case evt_Mute:
    				noMute = (~noMute) & 1;
 8002b7a:	4b21      	ldr	r3, [pc, #132]	; (8002c00 <main+0xb70>)
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	bf0c      	ite	eq
 8002b86:	2301      	moveq	r3, #1
 8002b88:	2300      	movne	r3, #0
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	4b1c      	ldr	r3, [pc, #112]	; (8002c00 <main+0xb70>)
 8002b90:	701a      	strb	r2, [r3, #0]
    				rda5807_Set_Mute(noMute);
 8002b92:	4b1b      	ldr	r3, [pc, #108]	; (8002c00 <main+0xb70>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f002 fdce 	bl	8005738 <rda5807_Set_Mute>
    				//
    				if (noMute)
 8002b9c:	4b18      	ldr	r3, [pc, #96]	; (8002c00 <main+0xb70>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d03b      	beq.n	8002c1c <main+0xb8c>
    					sprintf(st, "Bass:%u Vol:%u", BassBoost, Volume);
 8002ba4:	4b15      	ldr	r3, [pc, #84]	; (8002bfc <main+0xb6c>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4b16      	ldr	r3, [pc, #88]	; (8002c04 <main+0xb74>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002bb2:	4915      	ldr	r1, [pc, #84]	; (8002c08 <main+0xb78>)
 8002bb4:	f00c fdca 	bl	800f74c <siprintf>
 8002bb8:	e03a      	b.n	8002c30 <main+0xba0>
 8002bba:	bf00      	nop
 8002bbc:	200001dd 	.word	0x200001dd
 8002bc0:	200001dc 	.word	0x200001dc
 8002bc4:	200001e8 	.word	0x200001e8
 8002bc8:	08013468 	.word	0x08013468
 8002bcc:	20001d5c 	.word	0x20001d5c
 8002bd0:	0801353c 	.word	0x0801353c
 8002bd4:	200001c0 	.word	0x200001c0
 8002bd8:	200001bc 	.word	0x200001bc
 8002bdc:	200001d4 	.word	0x200001d4
 8002be0:	20002d8c 	.word	0x20002d8c
 8002be4:	20002d90 	.word	0x20002d90
 8002be8:	200001d8 	.word	0x200001d8
 8002bec:	200001de 	.word	0x200001de
 8002bf0:	0801355c 	.word	0x0801355c
 8002bf4:	08013598 	.word	0x08013598
 8002bf8:	20002d9b 	.word	0x20002d9b
 8002bfc:	20002d9a 	.word	0x20002d9a
 8002c00:	200001e1 	.word	0x200001e1
 8002c04:	200001df 	.word	0x200001df
 8002c08:	08013474 	.word	0x08013474
 8002c0c:	080135d8 	.word	0x080135d8
 8002c10:	080135ec 	.word	0x080135ec
 8002c14:	200001e0 	.word	0x200001e0
 8002c18:	08013610 	.word	0x08013610
    				else
    					sprintf(st, "Bass:%u Vol:%u M", BassBoost, Volume);
 8002c1c:	4b71      	ldr	r3, [pc, #452]	; (8002de4 <main+0xd54>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	461a      	mov	r2, r3
 8002c22:	4b71      	ldr	r3, [pc, #452]	; (8002de8 <main+0xd58>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002c2a:	4970      	ldr	r1, [pc, #448]	; (8002dec <main+0xd5c>)
 8002c2c:	f00c fd8e 	bl	800f74c <siprintf>
    				showLine(st, lin4, &lim, true);
 8002c30:	f107 0208 	add.w	r2, r7, #8
 8002c34:	f8b7 10b8 	ldrh.w	r1, [r7, #184]	; 0xb8
 8002c38:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	f001 fa69 	bl	8004114 <showLine>
    				Report(1, "[que:%u] set Mute to %u\r\n", cntEvt, (~noMute) & 1);
 8002c42:	4b6b      	ldr	r3, [pc, #428]	; (8002df0 <main+0xd60>)
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	461a      	mov	r2, r3
 8002c4a:	4b6a      	ldr	r3, [pc, #424]	; (8002df4 <main+0xd64>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	bf0c      	ite	eq
 8002c56:	2301      	moveq	r3, #1
 8002c58:	2300      	movne	r3, #0
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	4966      	ldr	r1, [pc, #408]	; (8002df8 <main+0xd68>)
 8002c5e:	2001      	movs	r0, #1
 8002c60:	f001 fc16 	bl	8004490 <Report>
    			break;
 8002c64:	e38a      	b.n	800337c <main+0x12ec>
    			case evt_Freq:
    				if ((newFreq >= lBand) && (newFreq <= rBand)) {
 8002c66:	4b65      	ldr	r3, [pc, #404]	; (8002dfc <main+0xd6c>)
 8002c68:	ed93 7a00 	vldr	s14, [r3]
 8002c6c:	4b64      	ldr	r3, [pc, #400]	; (8002e00 <main+0xd70>)
 8002c6e:	edd3 7a00 	vldr	s15, [r3]
 8002c72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c7a:	da00      	bge.n	8002c7e <main+0xbee>
    						sprintf(sta, "%s", nameStation(Freq));
    						showLine(sta, lin6, &lia, true);
    						Report(1, "[que:%u] set new Freq to %.1f %s (Chan:%u)\r\n", cntEvt, Freq, sta, Chan);
    					}
    				}
				break;
 8002c7c:	e37b      	b.n	8003376 <main+0x12e6>
    				if ((newFreq >= lBand) && (newFreq <= rBand)) {
 8002c7e:	4b5f      	ldr	r3, [pc, #380]	; (8002dfc <main+0xd6c>)
 8002c80:	ed93 7a00 	vldr	s14, [r3]
 8002c84:	4b5f      	ldr	r3, [pc, #380]	; (8002e04 <main+0xd74>)
 8002c86:	edd3 7a00 	vldr	s15, [r3]
 8002c8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c92:	d900      	bls.n	8002c96 <main+0xc06>
				break;
 8002c94:	e36f      	b.n	8003376 <main+0x12e6>
    					if (newFreq != Freq) {
 8002c96:	4b59      	ldr	r3, [pc, #356]	; (8002dfc <main+0xd6c>)
 8002c98:	ed93 7a00 	vldr	s14, [r3]
 8002c9c:	4b5a      	ldr	r3, [pc, #360]	; (8002e08 <main+0xd78>)
 8002c9e:	edd3 7a00 	vldr	s15, [r3]
 8002ca2:	eeb4 7a67 	vcmp.f32	s14, s15
 8002ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002caa:	f000 8364 	beq.w	8003376 <main+0x12e6>
    						Freq = newFreq;
 8002cae:	4b53      	ldr	r3, [pc, #332]	; (8002dfc <main+0xd6c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a55      	ldr	r2, [pc, #340]	; (8002e08 <main+0xd78>)
 8002cb4:	6013      	str	r3, [r2, #0]
    						uint16_t fr = (uint16_t)(Freq * 10);
 8002cb6:	4b54      	ldr	r3, [pc, #336]	; (8002e08 <main+0xd78>)
 8002cb8:	edd3 7a00 	vldr	s15, [r3]
 8002cbc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002cc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cc8:	ee17 3a90 	vmov	r3, s15
 8002ccc:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
    						rda5807_SetFreq_In100Khz(fr);
 8002cd0:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f002 fba3 	bl	8005420 <rda5807_SetFreq_In100Khz>
    						stereo = rda5807_Get_StereoMonoFlag();
 8002cda:	f002 fc97 	bl	800560c <rda5807_Get_StereoMonoFlag>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	4b4a      	ldr	r3, [pc, #296]	; (8002e0c <main+0xd7c>)
 8002ce4:	701a      	strb	r2, [r3, #0]
    						Chan = rda5807_Get_Channel();
 8002ce6:	f002 fca9 	bl	800563c <rda5807_Get_Channel>
 8002cea:	4603      	mov	r3, r0
 8002cec:	461a      	mov	r2, r3
 8002cee:	4b48      	ldr	r3, [pc, #288]	; (8002e10 <main+0xd80>)
 8002cf0:	801a      	strh	r2, [r3, #0]
    						if (stereo)
 8002cf2:	4b46      	ldr	r3, [pc, #280]	; (8002e0c <main+0xd7c>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d012      	beq.n	8002d20 <main+0xc90>
    							sprintf(st, "Rssi:%u Freq:%.1f S", RSSI, Freq);
 8002cfa:	4b46      	ldr	r3, [pc, #280]	; (8002e14 <main+0xd84>)
 8002cfc:	881b      	ldrh	r3, [r3, #0]
 8002cfe:	461c      	mov	r4, r3
 8002d00:	4b41      	ldr	r3, [pc, #260]	; (8002e08 <main+0xd78>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7fd fc1f 	bl	8000548 <__aeabi_f2d>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002d12:	e9cd 2300 	strd	r2, r3, [sp]
 8002d16:	4622      	mov	r2, r4
 8002d18:	493f      	ldr	r1, [pc, #252]	; (8002e18 <main+0xd88>)
 8002d1a:	f00c fd17 	bl	800f74c <siprintf>
 8002d1e:	e011      	b.n	8002d44 <main+0xcb4>
    							sprintf(st, "Rssi:%u Freq:%.1f", RSSI, Freq);
 8002d20:	4b3c      	ldr	r3, [pc, #240]	; (8002e14 <main+0xd84>)
 8002d22:	881b      	ldrh	r3, [r3, #0]
 8002d24:	461c      	mov	r4, r3
 8002d26:	4b38      	ldr	r3, [pc, #224]	; (8002e08 <main+0xd78>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7fd fc0c 	bl	8000548 <__aeabi_f2d>
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002d38:	e9cd 2300 	strd	r2, r3, [sp]
 8002d3c:	4622      	mov	r2, r4
 8002d3e:	4937      	ldr	r1, [pc, #220]	; (8002e1c <main+0xd8c>)
 8002d40:	f00c fd04 	bl	800f74c <siprintf>
    						showLine(st, lin5, &lil, false);
 8002d44:	1d3a      	adds	r2, r7, #4
 8002d46:	f8b7 10b6 	ldrh.w	r1, [r7, #182]	; 0xb6
 8002d4a:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f001 f9e0 	bl	8004114 <showLine>
    						sprintf(sta, "%s", nameStation(Freq));
 8002d54:	4b2c      	ldr	r3, [pc, #176]	; (8002e08 <main+0xd78>)
 8002d56:	edd3 7a00 	vldr	s15, [r3]
 8002d5a:	eeb0 0a67 	vmov.f32	s0, s15
 8002d5e:	f001 f8af 	bl	8003ec0 <nameStation>
 8002d62:	4602      	mov	r2, r0
 8002d64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d68:	492d      	ldr	r1, [pc, #180]	; (8002e20 <main+0xd90>)
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f00c fcee 	bl	800f74c <siprintf>
    						showLine(sta, lin6, &lia, true);
 8002d70:	463a      	mov	r2, r7
 8002d72:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 8002d76:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	f001 f9ca 	bl	8004114 <showLine>
    						Report(1, "[que:%u] set new Freq to %.1f %s (Chan:%u)\r\n", cntEvt, Freq, sta, Chan);
 8002d80:	4b1b      	ldr	r3, [pc, #108]	; (8002df0 <main+0xd60>)
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	461c      	mov	r4, r3
 8002d88:	4b1f      	ldr	r3, [pc, #124]	; (8002e08 <main+0xd78>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fd fbdb 	bl	8000548 <__aeabi_f2d>
 8002d92:	4602      	mov	r2, r0
 8002d94:	460b      	mov	r3, r1
 8002d96:	491e      	ldr	r1, [pc, #120]	; (8002e10 <main+0xd80>)
 8002d98:	8809      	ldrh	r1, [r1, #0]
 8002d9a:	9103      	str	r1, [sp, #12]
 8002d9c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002da0:	9102      	str	r1, [sp, #8]
 8002da2:	e9cd 2300 	strd	r2, r3, [sp]
 8002da6:	4622      	mov	r2, r4
 8002da8:	491e      	ldr	r1, [pc, #120]	; (8002e24 <main+0xd94>)
 8002daa:	2001      	movs	r0, #1
 8002dac:	f001 fb70 	bl	8004490 <Report>
				break;
 8002db0:	e2e1      	b.n	8003376 <main+0x12e6>
    			case evt_Scan:
    				if (!scan) {
 8002db2:	4b1d      	ldr	r3, [pc, #116]	; (8002e28 <main+0xd98>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f040 82de 	bne.w	800337a <main+0x12ea>
    					scan = 1;
 8002dbe:	4b1a      	ldr	r3, [pc, #104]	; (8002e28 <main+0xd98>)
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	701a      	strb	r2, [r3, #0]
    					rda5807_StartSeek(seek_up);
 8002dc4:	4b19      	ldr	r3, [pc, #100]	; (8002e2c <main+0xd9c>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f002 fbe2 	bl	8005594 <rda5807_StartSeek>
    				}
    			break;
 8002dd0:	e2d3      	b.n	800337a <main+0x12ea>
    			case evt_Ver:
    				Report(1, "Ver.%s\r\n", ver);
 8002dd2:	4b17      	ldr	r3, [pc, #92]	; (8002e30 <main+0xda0>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	4916      	ldr	r1, [pc, #88]	; (8002e34 <main+0xda4>)
 8002dda:	2001      	movs	r0, #1
 8002ddc:	f001 fb58 	bl	8004490 <Report>
    			break;
 8002de0:	e2cc      	b.n	800337c <main+0x12ec>
 8002de2:	bf00      	nop
 8002de4:	20002d9a 	.word	0x20002d9a
 8002de8:	200001df 	.word	0x200001df
 8002dec:	080135d8 	.word	0x080135d8
 8002df0:	20001d5c 	.word	0x20001d5c
 8002df4:	200001e1 	.word	0x200001e1
 8002df8:	08013630 	.word	0x08013630
 8002dfc:	200001d8 	.word	0x200001d8
 8002e00:	20002d8c 	.word	0x20002d8c
 8002e04:	20002d90 	.word	0x20002d90
 8002e08:	200001d4 	.word	0x200001d4
 8002e0c:	20002d9c 	.word	0x20002d9c
 8002e10:	20002d94 	.word	0x20002d94
 8002e14:	20002d96 	.word	0x20002d96
 8002e18:	08013484 	.word	0x08013484
 8002e1c:	08013498 	.word	0x08013498
 8002e20:	080133a0 	.word	0x080133a0
 8002e24:	0801364c 	.word	0x0801364c
 8002e28:	20002d99 	.word	0x20002d99
 8002e2c:	200001de 	.word	0x200001de
 8002e30:	20000004 	.word	0x20000004
 8002e34:	0801367c 	.word	0x0801367c
    			case evt_Sec:
    			{
#ifdef SET_DISPLAY
    				dl = sec2str(st);
 8002e38:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f001 fa8d 	bl	800435c <sec2str>
 8002e42:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
    				x = ((SCREEN_WIDTH - (Font_6x8.FontWidth * dl)) >> 1) & 0x7f;
 8002e46:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e50:	fb02 f303 	mul.w	r3, r2, r3
 8002e54:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002e58:	105b      	asrs	r3, r3, #1
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e60:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
    				ST7565_Print(x, lin1, st, &Font_6x8, 0, PIX_OFF);
 8002e64:	f9b7 00b2 	ldrsh.w	r0, [r7, #178]	; 0xb2
 8002e68:	f9b7 10be 	ldrsh.w	r1, [r7, #190]	; 0xbe
 8002e6c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002e70:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002e74:	2400      	movs	r4, #0
 8002e76:	9401      	str	r4, [sp, #4]
 8002e78:	2400      	movs	r4, #0
 8002e7a:	9400      	str	r4, [sp, #0]
 8002e7c:	f7fe fc76 	bl	800176c <ST7565_Print>
#endif
    				//
    				if (scan) {
 8002e80:	4ba9      	ldr	r3, [pc, #676]	; (8003128 <main+0x1098>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d04f      	beq.n	8002f2a <main+0xe9a>
    					if (rda5807_Get_SeekTuneReadyFlag()) {
 8002e8a:	f002 fbad 	bl	80055e8 <rda5807_Get_SeekTuneReadyFlag>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d04a      	beq.n	8002f2a <main+0xe9a>
    						Freq = (float)rda5807_GetFreq_In100Khz();
 8002e94:	f002 fb3e 	bl	8005514 <rda5807_GetFreq_In100Khz>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	ee07 3a90 	vmov	s15, r3
 8002e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ea2:	4ba2      	ldr	r3, [pc, #648]	; (800312c <main+0x109c>)
 8002ea4:	edc3 7a00 	vstr	s15, [r3]
    						Freq /= 10;
 8002ea8:	4ba0      	ldr	r3, [pc, #640]	; (800312c <main+0x109c>)
 8002eaa:	ed93 7a00 	vldr	s14, [r3]
 8002eae:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002eb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002eb6:	4b9d      	ldr	r3, [pc, #628]	; (800312c <main+0x109c>)
 8002eb8:	edc3 7a00 	vstr	s15, [r3]
    						scan = 0;
 8002ebc:	4b9a      	ldr	r3, [pc, #616]	; (8003128 <main+0x1098>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	701a      	strb	r2, [r3, #0]
    						Chan = rda5807_Get_Channel();
 8002ec2:	f002 fbbb 	bl	800563c <rda5807_Get_Channel>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	461a      	mov	r2, r3
 8002eca:	4b99      	ldr	r3, [pc, #612]	; (8003130 <main+0x10a0>)
 8002ecc:	801a      	strh	r2, [r3, #0]
    						sprintf(sta, "%s", nameStation(Freq));
 8002ece:	4b97      	ldr	r3, [pc, #604]	; (800312c <main+0x109c>)
 8002ed0:	edd3 7a00 	vldr	s15, [r3]
 8002ed4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ed8:	f000 fff2 	bl	8003ec0 <nameStation>
 8002edc:	4602      	mov	r2, r0
 8002ede:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ee2:	4994      	ldr	r1, [pc, #592]	; (8003134 <main+0x10a4>)
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f00c fc31 	bl	800f74c <siprintf>
    						showLine(sta, lin6, &lia, true);
 8002eea:	463a      	mov	r2, r7
 8002eec:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 8002ef0:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	f001 f90d 	bl	8004114 <showLine>
    						Report(1, "[que:%u] set new Freq to %.1f %s (Chan:%u)\r\n", cntEvt, Freq, sta, Chan);
 8002efa:	4b8f      	ldr	r3, [pc, #572]	; (8003138 <main+0x10a8>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	461c      	mov	r4, r3
 8002f02:	4b8a      	ldr	r3, [pc, #552]	; (800312c <main+0x109c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fd fb1e 	bl	8000548 <__aeabi_f2d>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	460b      	mov	r3, r1
 8002f10:	4987      	ldr	r1, [pc, #540]	; (8003130 <main+0x10a0>)
 8002f12:	8809      	ldrh	r1, [r1, #0]
 8002f14:	9103      	str	r1, [sp, #12]
 8002f16:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002f1a:	9102      	str	r1, [sp, #8]
 8002f1c:	e9cd 2300 	strd	r2, r3, [sp]
 8002f20:	4622      	mov	r2, r4
 8002f22:	4986      	ldr	r1, [pc, #536]	; (800313c <main+0x10ac>)
 8002f24:	2001      	movs	r0, #1
 8002f26:	f001 fab3 	bl	8004490 <Report>
    					}
    				}
    				//
    				uint16_t rssi = rda5807_rssi();
 8002f2a:	f002 f833 	bl	8004f94 <rda5807_rssi>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
    				if (rssi != RSSI) {
 8002f34:	4b82      	ldr	r3, [pc, #520]	; (8003140 <main+0x10b0>)
 8002f36:	881b      	ldrh	r3, [r3, #0]
 8002f38:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d03a      	beq.n	8002fb6 <main+0xf26>
    					RSSI = rssi;
 8002f40:	4a7f      	ldr	r2, [pc, #508]	; (8003140 <main+0x10b0>)
 8002f42:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8002f46:	8013      	strh	r3, [r2, #0]
    					stereo = rda5807_Get_StereoMonoFlag();
 8002f48:	f002 fb60 	bl	800560c <rda5807_Get_StereoMonoFlag>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	461a      	mov	r2, r3
 8002f50:	4b7c      	ldr	r3, [pc, #496]	; (8003144 <main+0x10b4>)
 8002f52:	701a      	strb	r2, [r3, #0]
#ifdef SET_DISPLAY
    					if (stereo)
 8002f54:	4b7b      	ldr	r3, [pc, #492]	; (8003144 <main+0x10b4>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d012      	beq.n	8002f82 <main+0xef2>
    						sprintf(st, "Rssi:%u Freq:%.1f S", RSSI, Freq);
 8002f5c:	4b78      	ldr	r3, [pc, #480]	; (8003140 <main+0x10b0>)
 8002f5e:	881b      	ldrh	r3, [r3, #0]
 8002f60:	461c      	mov	r4, r3
 8002f62:	4b72      	ldr	r3, [pc, #456]	; (800312c <main+0x109c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fd faee 	bl	8000548 <__aeabi_f2d>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	460b      	mov	r3, r1
 8002f70:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002f74:	e9cd 2300 	strd	r2, r3, [sp]
 8002f78:	4622      	mov	r2, r4
 8002f7a:	4973      	ldr	r1, [pc, #460]	; (8003148 <main+0x10b8>)
 8002f7c:	f00c fbe6 	bl	800f74c <siprintf>
 8002f80:	e011      	b.n	8002fa6 <main+0xf16>
    					else
    						sprintf(st, "Rssi:%u Freq:%.1f", RSSI, Freq);
 8002f82:	4b6f      	ldr	r3, [pc, #444]	; (8003140 <main+0x10b0>)
 8002f84:	881b      	ldrh	r3, [r3, #0]
 8002f86:	461c      	mov	r4, r3
 8002f88:	4b68      	ldr	r3, [pc, #416]	; (800312c <main+0x109c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7fd fadb 	bl	8000548 <__aeabi_f2d>
 8002f92:	4602      	mov	r2, r0
 8002f94:	460b      	mov	r3, r1
 8002f96:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002f9a:	e9cd 2300 	strd	r2, r3, [sp]
 8002f9e:	4622      	mov	r2, r4
 8002fa0:	496a      	ldr	r1, [pc, #424]	; (800314c <main+0x10bc>)
 8002fa2:	f00c fbd3 	bl	800f74c <siprintf>
    					showLine(st, lin5, &lil, false);
 8002fa6:	1d3a      	adds	r2, r7, #4
 8002fa8:	f8b7 10b6 	ldrh.w	r1, [r7, #182]	; 0xb6
 8002fac:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	f001 f8af 	bl	8004114 <showLine>
    					//showLine(sta, lin6, &lia, true);
    					////Report(1, "ChipID:0x%x Chan:%u Freq:%.2f RSSI:%u\r\n", rdaID, Chan, Freq, RSSI);
#endif
    				}
    				//
    				if (devError) {
 8002fb6:	4b66      	ldr	r3, [pc, #408]	; (8003150 <main+0x10c0>)
 8002fb8:	881b      	ldrh	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00d      	beq.n	8002fda <main+0xf4a>
    					dl = sprintf(tmp, "devError : 0x%04X", devError);
 8002fbe:	4b64      	ldr	r3, [pc, #400]	; (8003150 <main+0x10c0>)
 8002fc0:	881b      	ldrh	r3, [r3, #0]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	4963      	ldr	r1, [pc, #396]	; (8003154 <main+0x10c4>)
 8002fc6:	4864      	ldr	r0, [pc, #400]	; (8003158 <main+0x10c8>)
 8002fc8:	f00c fbc0 	bl	800f74c <siprintf>
 8002fcc:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
    					lastErr = devError;
 8002fd0:	4b5f      	ldr	r3, [pc, #380]	; (8003150 <main+0x10c0>)
 8002fd2:	881b      	ldrh	r3, [r3, #0]
 8002fd4:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
 8002fd8:	e013      	b.n	8003002 <main+0xf72>
    				} else {
    					if (lastErr) {
 8002fda:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00c      	beq.n	8002ffc <main+0xf6c>
    						dl = sprintf(tmp, "Ver.%s", ver);
 8002fe2:	4b5e      	ldr	r3, [pc, #376]	; (800315c <main+0x10cc>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	495d      	ldr	r1, [pc, #372]	; (8003160 <main+0x10d0>)
 8002fea:	485b      	ldr	r0, [pc, #364]	; (8003158 <main+0x10c8>)
 8002fec:	f00c fbae 	bl	800f74c <siprintf>
 8002ff0:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
    						lastErr = devOK;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
 8002ffa:	e002      	b.n	8003002 <main+0xf72>
    					} else dl = 0;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    				}
#ifdef SET_DISPLAY
    				if (dl) {
 8003002:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d032      	beq.n	8003070 <main+0xfe0>
    					ST7565_DrawFilledRectangle(0, SCREEN_HEIGHT - Font_6x8.FontHeight, SCREEN_WIDTH - 1, Font_6x8.FontHeight, PIX_OFF);
 800300a:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 800300e:	b29b      	uxth	r3, r3
 8003010:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003014:	b29b      	uxth	r3, r3
 8003016:	b219      	sxth	r1, r3
 8003018:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 800301c:	b21b      	sxth	r3, r3
 800301e:	2200      	movs	r2, #0
 8003020:	9200      	str	r2, [sp, #0]
 8003022:	227f      	movs	r2, #127	; 0x7f
 8003024:	2000      	movs	r0, #0
 8003026:	f7fe fdfa 	bl	8001c1e <ST7565_DrawFilledRectangle>
    					x = ((SCREEN_WIDTH - (Font_6x8.FontWidth * dl)) >> 1) & 0x7f;
 800302a:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 800302e:	461a      	mov	r2, r3
 8003030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003034:	fb02 f303 	mul.w	r3, r2, r3
 8003038:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800303c:	105b      	asrs	r3, r3, #1
 800303e:	b29b      	uxth	r3, r3
 8003040:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003044:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
    					ST7565_Print(x, SCREEN_HEIGHT - Font_6x8.FontHeight, tmp, &Font_6x8, 1, PIX_ON);
 8003048:	f9b7 00b2 	ldrsh.w	r0, [r7, #178]	; 0xb2
 800304c:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8003050:	b29b      	uxth	r3, r3
 8003052:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003056:	b29b      	uxth	r3, r3
 8003058:	b219      	sxth	r1, r3
 800305a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800305e:	2201      	movs	r2, #1
 8003060:	9201      	str	r2, [sp, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	9200      	str	r2, [sp, #0]
 8003066:	4a3c      	ldr	r2, [pc, #240]	; (8003158 <main+0x10c8>)
 8003068:	f7fe fb80 	bl	800176c <ST7565_Print>
    					ST7565_Update();
 800306c:	f7fe f9ce 	bl	800140c <ST7565_Update>
    				}
    				//
    				ST7565_Update();
 8003070:	f7fe f9cc 	bl	800140c <ST7565_Update>
#endif
    			}
    			break;
 8003074:	e182      	b.n	800337c <main+0x12ec>
    			case evt_Clr:
    				devError = devOK;
 8003076:	4b36      	ldr	r3, [pc, #216]	; (8003150 <main+0x10c0>)
 8003078:	2200      	movs	r2, #0
 800307a:	801a      	strh	r2, [r3, #0]
    				Report(1, "[que:%u] Clear all Errors...\r\n", cntEvt);
 800307c:	4b2e      	ldr	r3, [pc, #184]	; (8003138 <main+0x10a8>)
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	b2db      	uxtb	r3, r3
 8003082:	461a      	mov	r2, r3
 8003084:	4937      	ldr	r1, [pc, #220]	; (8003164 <main+0x10d4>)
 8003086:	2001      	movs	r0, #1
 8003088:	f001 fa02 	bl	8004490 <Report>
    			break;
 800308c:	e176      	b.n	800337c <main+0x12ec>
    			case evt_Help:
    				stx[0] = '\0';
 800308e:	4b36      	ldr	r3, [pc, #216]	; (8003168 <main+0x10d8>)
 8003090:	2200      	movs	r2, #0
 8003092:	701a      	strb	r2, [r3, #0]
    				for (int8_t i = 0; i < MAX_CMDS; i++) sprintf(stx+strlen(stx), "\t%s\r\n", s_cmds[i]);
 8003094:	2300      	movs	r3, #0
 8003096:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800309a:	e015      	b.n	80030c8 <main+0x1038>
 800309c:	4832      	ldr	r0, [pc, #200]	; (8003168 <main+0x10d8>)
 800309e:	f7fd f897 	bl	80001d0 <strlen>
 80030a2:	4603      	mov	r3, r0
 80030a4:	4a30      	ldr	r2, [pc, #192]	; (8003168 <main+0x10d8>)
 80030a6:	1898      	adds	r0, r3, r2
 80030a8:	f997 30d7 	ldrsb.w	r3, [r7, #215]	; 0xd7
 80030ac:	4a2f      	ldr	r2, [pc, #188]	; (800316c <main+0x10dc>)
 80030ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030b2:	461a      	mov	r2, r3
 80030b4:	492e      	ldr	r1, [pc, #184]	; (8003170 <main+0x10e0>)
 80030b6:	f00c fb49 	bl	800f74c <siprintf>
 80030ba:	f997 30d7 	ldrsb.w	r3, [r7, #215]	; 0xd7
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	3301      	adds	r3, #1
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80030c8:	f997 30d7 	ldrsb.w	r3, [r7, #215]	; 0xd7
 80030cc:	2b13      	cmp	r3, #19
 80030ce:	dde5      	ble.n	800309c <main+0x100c>
    				Report(0, "%s", stx);
 80030d0:	4a25      	ldr	r2, [pc, #148]	; (8003168 <main+0x10d8>)
 80030d2:	4918      	ldr	r1, [pc, #96]	; (8003134 <main+0x10a4>)
 80030d4:	2000      	movs	r0, #0
 80030d6:	f001 f9db 	bl	8004490 <Report>
    			break;
 80030da:	e14f      	b.n	800337c <main+0x12ec>
    			case evt_Restart:
    				restart = 1;
 80030dc:	4b25      	ldr	r3, [pc, #148]	; (8003174 <main+0x10e4>)
 80030de:	2201      	movs	r2, #1
 80030e0:	701a      	strb	r2, [r3, #0]
    				Report(1, "[que:%u] Restart system...\r\n", cntEvt);
 80030e2:	4b15      	ldr	r3, [pc, #84]	; (8003138 <main+0x10a8>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	461a      	mov	r2, r3
 80030ea:	4923      	ldr	r1, [pc, #140]	; (8003178 <main+0x10e8>)
 80030ec:	2001      	movs	r0, #1
 80030ee:	f001 f9cf 	bl	8004490 <Report>
    			break;
 80030f2:	e143      	b.n	800337c <main+0x12ec>
    			case evt_Epoch:
    				set_Date(epoch);
 80030f4:	4b21      	ldr	r3, [pc, #132]	; (800317c <main+0x10ec>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f001 f8cf 	bl	800429c <set_Date>
    				Report(1, "[que:%u] Set Unix TimeStamp to %lu\r\n", cntEvt, epoch);
 80030fe:	4b0e      	ldr	r3, [pc, #56]	; (8003138 <main+0x10a8>)
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	b2db      	uxtb	r3, r3
 8003104:	461a      	mov	r2, r3
 8003106:	4b1d      	ldr	r3, [pc, #116]	; (800317c <main+0x10ec>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	491d      	ldr	r1, [pc, #116]	; (8003180 <main+0x10f0>)
 800310c:	2001      	movs	r0, #1
 800310e:	f001 f9bf 	bl	8004490 <Report>
    			break;
 8003112:	e133      	b.n	800337c <main+0x12ec>
    			case evt_Err:
    				Report(1, "[que:%u] Error input from uart\r\n", cntEvt);
 8003114:	4b08      	ldr	r3, [pc, #32]	; (8003138 <main+0x10a8>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	b2db      	uxtb	r3, r3
 800311a:	461a      	mov	r2, r3
 800311c:	4919      	ldr	r1, [pc, #100]	; (8003184 <main+0x10f4>)
 800311e:	2001      	movs	r0, #1
 8003120:	f001 f9b6 	bl	8004490 <Report>
    			break;
 8003124:	e12a      	b.n	800337c <main+0x12ec>
 8003126:	bf00      	nop
 8003128:	20002d99 	.word	0x20002d99
 800312c:	200001d4 	.word	0x200001d4
 8003130:	20002d94 	.word	0x20002d94
 8003134:	080133a0 	.word	0x080133a0
 8003138:	20001d5c 	.word	0x20001d5c
 800313c:	0801364c 	.word	0x0801364c
 8003140:	20002d96 	.word	0x20002d96
 8003144:	20002d9c 	.word	0x20002d9c
 8003148:	08013484 	.word	0x08013484
 800314c:	08013498 	.word	0x08013498
 8003150:	2000193c 	.word	0x2000193c
 8003154:	08013688 	.word	0x08013688
 8003158:	200010bc 	.word	0x200010bc
 800315c:	20000004 	.word	0x20000004
 8003160:	0801344c 	.word	0x0801344c
 8003164:	0801369c 	.word	0x0801369c
 8003168:	20000cbc 	.word	0x20000cbc
 800316c:	2000001c 	.word	0x2000001c
 8003170:	080136bc 	.word	0x080136bc
 8003174:	20001d54 	.word	0x20001d54
 8003178:	080136c4 	.word	0x080136c4
 800317c:	20000018 	.word	0x20000018
 8003180:	080136e4 	.word	0x080136e4
 8003184:	0801370c 	.word	0x0801370c
#ifdef SET_W25FLASH
    			case evt_sRead:
    			case evt_sNext:
    			{
    				uint32_t w25_adr = (adr_sector * W25qxx_getSectorSize()) + offset_sector;
 8003188:	f003 f9ee 	bl	8006568 <W25qxx_getSectorSize>
 800318c:	4603      	mov	r3, r0
 800318e:	4a97      	ldr	r2, [pc, #604]	; (80033ec <main+0x135c>)
 8003190:	6812      	ldr	r2, [r2, #0]
 8003192:	fb02 f303 	mul.w	r3, r2, r3
 8003196:	4a96      	ldr	r2, [pc, #600]	; (80033f0 <main+0x1360>)
 8003198:	6812      	ldr	r2, [r2, #0]
 800319a:	4413      	add	r3, r2
 800319c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    				uint32_t dlin = list_sector;
 80031a0:	4b94      	ldr	r3, [pc, #592]	; (80033f4 <main+0x1364>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    				int step = 32;
 80031a8:	2320      	movs	r3, #32
 80031aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    				uint32_t ind = 0;
 80031ae:	2300      	movs	r3, #0
 80031b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    				W25qxx_ReadSector(fs_work, adr_sector, offset_sector, dlin);
 80031b4:	4b8d      	ldr	r3, [pc, #564]	; (80033ec <main+0x135c>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4619      	mov	r1, r3
 80031ba:	4b8d      	ldr	r3, [pc, #564]	; (80033f0 <main+0x1360>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	461a      	mov	r2, r3
 80031c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031c4:	488c      	ldr	r0, [pc, #560]	; (80033f8 <main+0x1368>)
 80031c6:	f003 fce1 	bl	8006b8c <W25qxx_ReadSector>
    				Report(0, "Read sector:%d offset:%d len:%u\r\n", adr_sector, offset_sector, dlin);
 80031ca:	4b88      	ldr	r3, [pc, #544]	; (80033ec <main+0x135c>)
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	4b88      	ldr	r3, [pc, #544]	; (80033f0 <main+0x1360>)
 80031d0:	6819      	ldr	r1, [r3, #0]
 80031d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	460b      	mov	r3, r1
 80031da:	4988      	ldr	r1, [pc, #544]	; (80033fc <main+0x136c>)
 80031dc:	2000      	movs	r0, #0
 80031de:	f001 f957 	bl	8004490 <Report>
    				while (ind < dlin) {
 80031e2:	e05b      	b.n	800329c <main+0x120c>
    					strf[0] = '\0';
 80031e4:	4b86      	ldr	r3, [pc, #536]	; (8003400 <main+0x1370>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	701a      	strb	r2, [r3, #0]
    					while (1) {
    						sprintf(strf+strlen(strf), "%06X ", (unsigned int)w25_adr);
 80031ea:	4885      	ldr	r0, [pc, #532]	; (8003400 <main+0x1370>)
 80031ec:	f7fc fff0 	bl	80001d0 <strlen>
 80031f0:	4603      	mov	r3, r0
 80031f2:	4a83      	ldr	r2, [pc, #524]	; (8003400 <main+0x1370>)
 80031f4:	4413      	add	r3, r2
 80031f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80031fa:	4982      	ldr	r1, [pc, #520]	; (8003404 <main+0x1374>)
 80031fc:	4618      	mov	r0, r3
 80031fe:	f00c faa5 	bl	800f74c <siprintf>
    						for (int i = 0; i < step; i++) sprintf(strf+strlen(strf), " %02X", fs_work[i + ind]);
 8003202:	2300      	movs	r3, #0
 8003204:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003208:	e015      	b.n	8003236 <main+0x11a6>
 800320a:	487d      	ldr	r0, [pc, #500]	; (8003400 <main+0x1370>)
 800320c:	f7fc ffe0 	bl	80001d0 <strlen>
 8003210:	4603      	mov	r3, r0
 8003212:	4a7b      	ldr	r2, [pc, #492]	; (8003400 <main+0x1370>)
 8003214:	1898      	adds	r0, r3, r2
 8003216:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800321a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800321e:	4413      	add	r3, r2
 8003220:	4a75      	ldr	r2, [pc, #468]	; (80033f8 <main+0x1368>)
 8003222:	5cd3      	ldrb	r3, [r2, r3]
 8003224:	461a      	mov	r2, r3
 8003226:	4978      	ldr	r1, [pc, #480]	; (8003408 <main+0x1378>)
 8003228:	f00c fa90 	bl	800f74c <siprintf>
 800322c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003230:	3301      	adds	r3, #1
 8003232:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003236:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800323a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800323e:	429a      	cmp	r2, r3
 8003240:	dbe3      	blt.n	800320a <main+0x117a>
    						strcat(strf, "\r\n");
 8003242:	486f      	ldr	r0, [pc, #444]	; (8003400 <main+0x1370>)
 8003244:	f7fc ffc4 	bl	80001d0 <strlen>
 8003248:	4603      	mov	r3, r0
 800324a:	461a      	mov	r2, r3
 800324c:	4b6c      	ldr	r3, [pc, #432]	; (8003400 <main+0x1370>)
 800324e:	4413      	add	r3, r2
 8003250:	4a6e      	ldr	r2, [pc, #440]	; (800340c <main+0x137c>)
 8003252:	8811      	ldrh	r1, [r2, #0]
 8003254:	7892      	ldrb	r2, [r2, #2]
 8003256:	8019      	strh	r1, [r3, #0]
 8003258:	709a      	strb	r2, [r3, #2]
    						w25_adr += step;
 800325a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800325e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003262:	4413      	add	r3, r2
 8003264:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    						ind += step;
 8003268:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800326c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003270:	4413      	add	r3, r2
 8003272:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    						if (!(ind % W25qxx_getPageSize())) break;
 8003276:	f003 f983 	bl	8006580 <W25qxx_getPageSize>
 800327a:	4602      	mov	r2, r0
 800327c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003280:	fbb3 f1f2 	udiv	r1, r3, r2
 8003284:	fb01 f202 	mul.w	r2, r1, r2
 8003288:	1a9b      	subs	r3, r3, r2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d000      	beq.n	8003290 <main+0x1200>
    						sprintf(strf+strlen(strf), "%06X ", (unsigned int)w25_adr);
 800328e:	e7ac      	b.n	80031ea <main+0x115a>
    						if (!(ind % W25qxx_getPageSize())) break;
 8003290:	bf00      	nop
    					}
    					Report(0, "%s", strf);
 8003292:	4a5b      	ldr	r2, [pc, #364]	; (8003400 <main+0x1370>)
 8003294:	495e      	ldr	r1, [pc, #376]	; (8003410 <main+0x1380>)
 8003296:	2000      	movs	r0, #0
 8003298:	f001 f8fa 	bl	8004490 <Report>
    				while (ind < dlin) {
 800329c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80032a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d39d      	bcc.n	80031e4 <main+0x1154>
    				}
    			}
    			break;
 80032a8:	e068      	b.n	800337c <main+0x12ec>
    			case evt_sWrite:
    			{
    				uint32_t ss = W25qxx_getSectorSize();
 80032aa:	f003 f95d 	bl	8006568 <W25qxx_getSectorSize>
 80032ae:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
    				if (!W25qxx_IsEmptySector(adr_sector, 0, ss)) W25qxx_EraseSector(adr_sector);
 80032b2:	4b4e      	ldr	r3, [pc, #312]	; (80033ec <main+0x135c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80032ba:	2100      	movs	r1, #0
 80032bc:	4618      	mov	r0, r3
 80032be:	f003 f9c9 	bl	8006654 <W25qxx_IsEmptySector>
 80032c2:	4603      	mov	r3, r0
 80032c4:	f083 0301 	eor.w	r3, r3, #1
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d004      	beq.n	80032d8 <main+0x1248>
 80032ce:	4b47      	ldr	r3, [pc, #284]	; (80033ec <main+0x135c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f003 f962 	bl	800659c <W25qxx_EraseSector>
    				memset(fs_work, byte_write, ss);
 80032d8:	4b4e      	ldr	r3, [pc, #312]	; (8003414 <main+0x1384>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80032e0:	4619      	mov	r1, r3
 80032e2:	4845      	ldr	r0, [pc, #276]	; (80033f8 <main+0x1368>)
 80032e4:	f00b fcba 	bl	800ec5c <memset>
    				if (len_write != -1) ss = len_write;
 80032e8:	4b4b      	ldr	r3, [pc, #300]	; (8003418 <main+0x1388>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032f0:	d003      	beq.n	80032fa <main+0x126a>
 80032f2:	4b49      	ldr	r3, [pc, #292]	; (8003418 <main+0x1388>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    				W25qxx_WriteSector(fs_work, adr_sector, offset_sector, ss);
 80032fa:	4b3c      	ldr	r3, [pc, #240]	; (80033ec <main+0x135c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4619      	mov	r1, r3
 8003300:	4b3b      	ldr	r3, [pc, #236]	; (80033f0 <main+0x1360>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	461a      	mov	r2, r3
 8003306:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800330a:	483b      	ldr	r0, [pc, #236]	; (80033f8 <main+0x1368>)
 800330c:	f003 fb16 	bl	800693c <W25qxx_WriteSector>
    				Report(0, "Fill sector:%d byte:%02X len:%d done\r\n", adr_sector, byte_write, ss);
 8003310:	4b36      	ldr	r3, [pc, #216]	; (80033ec <main+0x135c>)
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	4b3f      	ldr	r3, [pc, #252]	; (8003414 <main+0x1384>)
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	4619      	mov	r1, r3
 800331a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	460b      	mov	r3, r1
 8003322:	493e      	ldr	r1, [pc, #248]	; (800341c <main+0x138c>)
 8003324:	2000      	movs	r0, #0
 8003326:	f001 f8b3 	bl	8004490 <Report>
    			}
    			break;
 800332a:	e027      	b.n	800337c <main+0x12ec>
    			case evt_sErase:
    				if (adr_sector == -1) {
 800332c:	4b2f      	ldr	r3, [pc, #188]	; (80033ec <main+0x135c>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003334:	d10c      	bne.n	8003350 <main+0x12c0>
    					Report(1, "Erase flash");
 8003336:	493a      	ldr	r1, [pc, #232]	; (8003420 <main+0x1390>)
 8003338:	2001      	movs	r0, #1
 800333a:	f001 f8a9 	bl	8004490 <Report>
    					flag_sector = true;
 800333e:	4b39      	ldr	r3, [pc, #228]	; (8003424 <main+0x1394>)
 8003340:	2201      	movs	r2, #1
 8003342:	701a      	strb	r2, [r3, #0]
    					btime = HAL_GetTick();
 8003344:	f003 fd20 	bl	8006d88 <HAL_GetTick>
 8003348:	4603      	mov	r3, r0
 800334a:	4a37      	ldr	r2, [pc, #220]	; (8003428 <main+0x1398>)
 800334c:	6013      	str	r3, [r2, #0]
    				} else {
    					W25qxx_EraseSector(adr_sector);
    					Report(1, "Erase sector:%d done\r\n", adr_sector);
    				}
    			break;
 800334e:	e015      	b.n	800337c <main+0x12ec>
    					W25qxx_EraseSector(adr_sector);
 8003350:	4b26      	ldr	r3, [pc, #152]	; (80033ec <main+0x135c>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f003 f921 	bl	800659c <W25qxx_EraseSector>
    					Report(1, "Erase sector:%d done\r\n", adr_sector);
 800335a:	4b24      	ldr	r3, [pc, #144]	; (80033ec <main+0x135c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	461a      	mov	r2, r3
 8003360:	4932      	ldr	r1, [pc, #200]	; (800342c <main+0x139c>)
 8003362:	2001      	movs	r0, #1
 8003364:	f001 f894 	bl	8004490 <Report>
    			break;
 8003368:	e008      	b.n	800337c <main+0x12ec>
    			break;
 800336a:	bf00      	nop
 800336c:	e006      	b.n	800337c <main+0x12ec>
    			break;
 800336e:	bf00      	nop
 8003370:	e004      	b.n	800337c <main+0x12ec>
    			break;
 8003372:	bf00      	nop
 8003374:	e002      	b.n	800337c <main+0x12ec>
				break;
 8003376:	bf00      	nop
 8003378:	e000      	b.n	800337c <main+0x12ec>
    			break;
 800337a:	bf00      	nop
#endif
    		}
    		if ((evt >= evt_sRead) && (evt <= evt_sWrite)) {
 800337c:	4b2c      	ldr	r3, [pc, #176]	; (8003430 <main+0x13a0>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2b03      	cmp	r3, #3
 8003382:	dd0b      	ble.n	800339c <main+0x130c>
 8003384:	4b2a      	ldr	r3, [pc, #168]	; (8003430 <main+0x13a0>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2b07      	cmp	r3, #7
 800338a:	dc07      	bgt.n	800339c <main+0x130c>
    			last_cmd_sector =  evt;//cmd_sector;
 800338c:	4b28      	ldr	r3, [pc, #160]	; (8003430 <main+0x13a0>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a28      	ldr	r2, [pc, #160]	; (8003434 <main+0x13a4>)
 8003392:	6013      	str	r3, [r2, #0]
    			cmd_sector = sNone;
 8003394:	4b28      	ldr	r3, [pc, #160]	; (8003438 <main+0x13a8>)
 8003396:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800339a:	601a      	str	r2, [r3, #0]
    		}
    	}
#endif

#ifdef SET_W25FLASH
    	if (flag_sector) {
 800339c:	4b21      	ldr	r3, [pc, #132]	; (8003424 <main+0x1394>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d060      	beq.n	8003466 <main+0x13d6>
    		adr_sector++;
 80033a4:	4b11      	ldr	r3, [pc, #68]	; (80033ec <main+0x135c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	3301      	adds	r3, #1
 80033aa:	4a10      	ldr	r2, [pc, #64]	; (80033ec <main+0x135c>)
 80033ac:	6013      	str	r3, [r2, #0]
    		if (adr_sector >= W25qxx_getSectorCount()) {
 80033ae:	f003 f8cf 	bl	8006550 <W25qxx_getSectorCount>
 80033b2:	4603      	mov	r3, r0
 80033b4:	4a0d      	ldr	r2, [pc, #52]	; (80033ec <main+0x135c>)
 80033b6:	6812      	ldr	r2, [r2, #0]
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d845      	bhi.n	8003448 <main+0x13b8>
    			flag_sector = false;
 80033bc:	4b19      	ldr	r3, [pc, #100]	; (8003424 <main+0x1394>)
 80033be:	2200      	movs	r2, #0
 80033c0:	701a      	strb	r2, [r3, #0]
    			etime = HAL_GetTick();
 80033c2:	f003 fce1 	bl	8006d88 <HAL_GetTick>
 80033c6:	4603      	mov	r3, r0
 80033c8:	4a1c      	ldr	r2, [pc, #112]	; (800343c <main+0x13ac>)
 80033ca:	6013      	str	r3, [r2, #0]
    			Report(0, " done (%lu sec)\r\n", (etime - btime) / 1000);
 80033cc:	4b1b      	ldr	r3, [pc, #108]	; (800343c <main+0x13ac>)
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	4b15      	ldr	r3, [pc, #84]	; (8003428 <main+0x1398>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	4a1a      	ldr	r2, [pc, #104]	; (8003440 <main+0x13b0>)
 80033d8:	fba2 2303 	umull	r2, r3, r2, r3
 80033dc:	099b      	lsrs	r3, r3, #6
 80033de:	461a      	mov	r2, r3
 80033e0:	4918      	ldr	r1, [pc, #96]	; (8003444 <main+0x13b4>)
 80033e2:	2000      	movs	r0, #0
 80033e4:	f001 f854 	bl	8004490 <Report>
 80033e8:	e03d      	b.n	8003466 <main+0x13d6>
 80033ea:	bf00      	nop
 80033ec:	20001d60 	.word	0x20001d60
 80033f0:	20001d64 	.word	0x20001d64
 80033f4:	20001d68 	.word	0x20001d68
 80033f8:	20001d74 	.word	0x20001d74
 80033fc:	08013730 	.word	0x08013730
 8003400:	2000153c 	.word	0x2000153c
 8003404:	08013754 	.word	0x08013754
 8003408:	0801375c 	.word	0x0801375c
 800340c:	08013764 	.word	0x08013764
 8003410:	080133a0 	.word	0x080133a0
 8003414:	200001d0 	.word	0x200001d0
 8003418:	20001d6c 	.word	0x20001d6c
 800341c:	08013768 	.word	0x08013768
 8003420:	08013790 	.word	0x08013790
 8003424:	20001d70 	.word	0x20001d70
 8003428:	20002d78 	.word	0x20002d78
 800342c:	0801379c 	.word	0x0801379c
 8003430:	200001bc 	.word	0x200001bc
 8003434:	200001cc 	.word	0x200001cc
 8003438:	200001c8 	.word	0x200001c8
 800343c:	20002d7c 	.word	0x20002d7c
 8003440:	10624dd3 	.word	0x10624dd3
 8003444:	080137b4 	.word	0x080137b4
    		} else {
    			//putEvt(evt_sErase);
    			W25qxx_EraseSector(adr_sector);
 8003448:	4b37      	ldr	r3, [pc, #220]	; (8003528 <main+0x1498>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4618      	mov	r0, r3
 800344e:	f003 f8a5 	bl	800659c <W25qxx_EraseSector>
    			if (!(adr_sector % 8)) Report(0, ".");
 8003452:	4b35      	ldr	r3, [pc, #212]	; (8003528 <main+0x1498>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0307 	and.w	r3, r3, #7
 800345a:	2b00      	cmp	r3, #0
 800345c:	d103      	bne.n	8003466 <main+0x13d6>
 800345e:	4933      	ldr	r1, [pc, #204]	; (800352c <main+0x149c>)
 8003460:	2000      	movs	r0, #0
 8003462:	f001 f815 	bl	8004490 <Report>
    	}
#endif


#ifdef SET_BLE
    	if (bleQueAckFlag) {
 8003466:	4b32      	ldr	r3, [pc, #200]	; (8003530 <main+0x14a0>)
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00b      	beq.n	8003486 <main+0x13f6>
    		if (getRECQ(bleRxBuf, &bleQueAck) >= 0) {
 800346e:	4931      	ldr	r1, [pc, #196]	; (8003534 <main+0x14a4>)
 8003470:	4831      	ldr	r0, [pc, #196]	; (8003538 <main+0x14a8>)
 8003472:	f7fe fd88 	bl	8001f86 <getRECQ>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	db04      	blt.n	8003486 <main+0x13f6>
    			Report(1, "[BLE] %s\r\n", bleRxBuf);
 800347c:	4a2e      	ldr	r2, [pc, #184]	; (8003538 <main+0x14a8>)
 800347e:	492f      	ldr	r1, [pc, #188]	; (800353c <main+0x14ac>)
 8003480:	2001      	movs	r0, #1
 8003482:	f001 f805 	bl	8004490 <Report>
    		}
    	}
    	//
    	if (bleQueCmdFlag) {//command to GSM module queue is ready
 8003486:	4b2e      	ldr	r3, [pc, #184]	; (8003540 <main+0x14b0>)
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d016      	beq.n	80034bc <main+0x142c>
    		if (getRECQ(bleBuf, &bleQueCmd) >= 0) {
 800348e:	492d      	ldr	r1, [pc, #180]	; (8003544 <main+0x14b4>)
 8003490:	482d      	ldr	r0, [pc, #180]	; (8003548 <main+0x14b8>)
 8003492:	f7fe fd78 	bl	8001f86 <getRECQ>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	db0f      	blt.n	80034bc <main+0x142c>
    			strcat(bleBuf, "\r\n");
 800349c:	482a      	ldr	r0, [pc, #168]	; (8003548 <main+0x14b8>)
 800349e:	f7fc fe97 	bl	80001d0 <strlen>
 80034a2:	4603      	mov	r3, r0
 80034a4:	461a      	mov	r2, r3
 80034a6:	4b28      	ldr	r3, [pc, #160]	; (8003548 <main+0x14b8>)
 80034a8:	4413      	add	r3, r2
 80034aa:	4a28      	ldr	r2, [pc, #160]	; (800354c <main+0x14bc>)
 80034ac:	8811      	ldrh	r1, [r2, #0]
 80034ae:	7892      	ldrb	r2, [r2, #2]
 80034b0:	8019      	strh	r1, [r3, #0]
 80034b2:	709a      	strb	r2, [r3, #2]
    			bleWrite(bleBuf, 1);
 80034b4:	2101      	movs	r1, #1
 80034b6:	4824      	ldr	r0, [pc, #144]	; (8003548 <main+0x14b8>)
 80034b8:	f7fe fc8a 	bl	8001dd0 <bleWrite>
    		}
    	}
#endif


    	if (devError) {
 80034bc:	4b24      	ldr	r3, [pc, #144]	; (8003550 <main+0x14c0>)
 80034be:	881b      	ldrh	r3, [r3, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d009      	beq.n	80034d8 <main+0x1448>
    		errLedOn(true);
 80034c4:	2001      	movs	r0, #1
 80034c6:	f000 fe93 	bl	80041f0 <errLedOn>
    		HAL_Delay(50);
 80034ca:	2032      	movs	r0, #50	; 0x32
 80034cc:	f003 fc68 	bl	8006da0 <HAL_Delay>
    		errLedOn(false);
 80034d0:	2000      	movs	r0, #0
 80034d2:	f000 fe8d 	bl	80041f0 <errLedOn>
 80034d6:	e009      	b.n	80034ec <main+0x145c>
    	} else {
    		if (HAL_GPIO_ReadPin(ERR_LED_GPIO_Port, ERR_LED_Pin)) errLedOn(false);
 80034d8:	2108      	movs	r1, #8
 80034da:	481e      	ldr	r0, [pc, #120]	; (8003554 <main+0x14c4>)
 80034dc:	f004 f9f6 	bl	80078cc <HAL_GPIO_ReadPin>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d002      	beq.n	80034ec <main+0x145c>
 80034e6:	2000      	movs	r0, #0
 80034e8:	f000 fe82 	bl	80041f0 <errLedOn>
    while (!restart) {
 80034ec:	4b1a      	ldr	r3, [pc, #104]	; (8003558 <main+0x14c8>)
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f43f a93e 	beq.w	8002774 <main+0x6e4>

    /* USER CODE BEGIN 3 */

    }//while (!restart)

    HAL_TIM_Base_Stop_IT(tikPort);
 80034f8:	4b18      	ldr	r3, [pc, #96]	; (800355c <main+0x14cc>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f009 f9cd 	bl	800c89c <HAL_TIM_Base_Stop_IT>

#ifdef SET_DISPLAY
    ST7565_Reset();
 8003502:	f7fd fde1 	bl	80010c8 <ST7565_Reset>
    ST7565_CMD_DISPLAY(CMD_DISPLAY_OFF);
 8003506:	20ae      	movs	r0, #174	; 0xae
 8003508:	f7fd ff10 	bl	800132c <ST7565_CMD_DISPLAY>
#endif


    Report(1, "[que:%u] Stop application...\r\n", cntEvt);
 800350c:	4b14      	ldr	r3, [pc, #80]	; (8003560 <main+0x14d0>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	b2db      	uxtb	r3, r3
 8003512:	461a      	mov	r2, r3
 8003514:	4913      	ldr	r1, [pc, #76]	; (8003564 <main+0x14d4>)
 8003516:	2001      	movs	r0, #1
 8003518:	f000 ffba 	bl	8004490 <Report>

    HAL_Delay(250);
 800351c:	20fa      	movs	r0, #250	; 0xfa
 800351e:	f003 fc3f 	bl	8006da0 <HAL_Delay>

    NVIC_SystemReset();
 8003522:	f7fe fbd5 	bl	8001cd0 <__NVIC_SystemReset>
 8003526:	bf00      	nop
 8003528:	20001d60 	.word	0x20001d60
 800352c:	080137c8 	.word	0x080137c8
 8003530:	20003577 	.word	0x20003577
 8003534:	20003430 	.word	0x20003430
 8003538:	2000332c 	.word	0x2000332c
 800353c:	080137cc 	.word	0x080137cc
 8003540:	20003578 	.word	0x20003578
 8003544:	200034d4 	.word	0x200034d4
 8003548:	2000322c 	.word	0x2000322c
 800354c:	08013764 	.word	0x08013764
 8003550:	2000193c 	.word	0x2000193c
 8003554:	48000800 	.word	0x48000800
 8003558:	20001d54 	.word	0x20001d54
 800355c:	20000008 	.word	0x20000008
 8003560:	20001d5c 	.word	0x20001d5c
 8003564:	080137d8 	.word	0x080137d8

08003568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b096      	sub	sp, #88	; 0x58
 800356c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800356e:	f107 0314 	add.w	r3, r7, #20
 8003572:	2244      	movs	r2, #68	; 0x44
 8003574:	2100      	movs	r1, #0
 8003576:	4618      	mov	r0, r3
 8003578:	f00b fb70 	bl	800ec5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800357c:	463b      	mov	r3, r7
 800357e:	2200      	movs	r2, #0
 8003580:	601a      	str	r2, [r3, #0]
 8003582:	605a      	str	r2, [r3, #4]
 8003584:	609a      	str	r2, [r3, #8]
 8003586:	60da      	str	r2, [r3, #12]
 8003588:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800358a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800358e:	f005 fe87 	bl	80092a0 <HAL_PWREx_ControlVoltageScaling>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003598:	f001 fc7c 	bl	8004e94 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800359c:	2309      	movs	r3, #9
 800359e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80035a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80035a6:	2301      	movs	r3, #1
 80035a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80035aa:	2302      	movs	r3, #2
 80035ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80035ae:	2303      	movs	r3, #3
 80035b0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80035b2:	2301      	movs	r3, #1
 80035b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80035b6:	2314      	movs	r3, #20
 80035b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80035ba:	2307      	movs	r3, #7
 80035bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80035be:	2302      	movs	r3, #2
 80035c0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80035c2:	2302      	movs	r3, #2
 80035c4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035c6:	f107 0314 	add.w	r3, r7, #20
 80035ca:	4618      	mov	r0, r3
 80035cc:	f005 febe 	bl	800934c <HAL_RCC_OscConfig>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <SystemClock_Config+0x72>
  {
    Error_Handler();
 80035d6:	f001 fc5d 	bl	8004e94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035da:	230f      	movs	r3, #15
 80035dc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035de:	2303      	movs	r3, #3
 80035e0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035e2:	2300      	movs	r3, #0
 80035e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80035e6:	2300      	movs	r3, #0
 80035e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80035ea:	2300      	movs	r3, #0
 80035ec:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80035ee:	463b      	mov	r3, r7
 80035f0:	2104      	movs	r1, #4
 80035f2:	4618      	mov	r0, r3
 80035f4:	f006 fa86 	bl	8009b04 <HAL_RCC_ClockConfig>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80035fe:	f001 fc49 	bl	8004e94 <Error_Handler>
  }
}
 8003602:	bf00      	nop
 8003604:	3758      	adds	r7, #88	; 0x58
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
	...

0800360c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003610:	4b1b      	ldr	r3, [pc, #108]	; (8003680 <MX_I2C1_Init+0x74>)
 8003612:	4a1c      	ldr	r2, [pc, #112]	; (8003684 <MX_I2C1_Init+0x78>)
 8003614:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702D95;
 8003616:	4b1a      	ldr	r3, [pc, #104]	; (8003680 <MX_I2C1_Init+0x74>)
 8003618:	4a1b      	ldr	r2, [pc, #108]	; (8003688 <MX_I2C1_Init+0x7c>)
 800361a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800361c:	4b18      	ldr	r3, [pc, #96]	; (8003680 <MX_I2C1_Init+0x74>)
 800361e:	2200      	movs	r2, #0
 8003620:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003622:	4b17      	ldr	r3, [pc, #92]	; (8003680 <MX_I2C1_Init+0x74>)
 8003624:	2201      	movs	r2, #1
 8003626:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003628:	4b15      	ldr	r3, [pc, #84]	; (8003680 <MX_I2C1_Init+0x74>)
 800362a:	2200      	movs	r2, #0
 800362c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800362e:	4b14      	ldr	r3, [pc, #80]	; (8003680 <MX_I2C1_Init+0x74>)
 8003630:	2200      	movs	r2, #0
 8003632:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003634:	4b12      	ldr	r3, [pc, #72]	; (8003680 <MX_I2C1_Init+0x74>)
 8003636:	2200      	movs	r2, #0
 8003638:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800363a:	4b11      	ldr	r3, [pc, #68]	; (8003680 <MX_I2C1_Init+0x74>)
 800363c:	2200      	movs	r2, #0
 800363e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003640:	4b0f      	ldr	r3, [pc, #60]	; (8003680 <MX_I2C1_Init+0x74>)
 8003642:	2200      	movs	r2, #0
 8003644:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003646:	480e      	ldr	r0, [pc, #56]	; (8003680 <MX_I2C1_Init+0x74>)
 8003648:	f004 f9a2 	bl	8007990 <HAL_I2C_Init>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003652:	f001 fc1f 	bl	8004e94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8003656:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800365a:	4809      	ldr	r0, [pc, #36]	; (8003680 <MX_I2C1_Init+0x74>)
 800365c:	f005 fd5a 	bl	8009114 <HAL_I2CEx_ConfigAnalogFilter>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8003666:	f001 fc15 	bl	8004e94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800366a:	2100      	movs	r1, #0
 800366c:	4804      	ldr	r0, [pc, #16]	; (8003680 <MX_I2C1_Init+0x74>)
 800366e:	f005 fd9c 	bl	80091aa <HAL_I2CEx_ConfigDigitalFilter>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8003678:	f001 fc0c 	bl	8004e94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800367c:	bf00      	nop
 800367e:	bd80      	pop	{r7, pc}
 8003680:	20000830 	.word	0x20000830
 8003684:	40005400 	.word	0x40005400
 8003688:	00702d95 	.word	0x00702d95

0800368c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003692:	1d3b      	adds	r3, r7, #4
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	605a      	str	r2, [r3, #4]
 800369a:	609a      	str	r2, [r3, #8]
 800369c:	60da      	str	r2, [r3, #12]
 800369e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80036a0:	2300      	movs	r3, #0
 80036a2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80036a4:	4b25      	ldr	r3, [pc, #148]	; (800373c <MX_RTC_Init+0xb0>)
 80036a6:	4a26      	ldr	r2, [pc, #152]	; (8003740 <MX_RTC_Init+0xb4>)
 80036a8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80036aa:	4b24      	ldr	r3, [pc, #144]	; (800373c <MX_RTC_Init+0xb0>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80036b0:	4b22      	ldr	r3, [pc, #136]	; (800373c <MX_RTC_Init+0xb0>)
 80036b2:	227f      	movs	r2, #127	; 0x7f
 80036b4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80036b6:	4b21      	ldr	r3, [pc, #132]	; (800373c <MX_RTC_Init+0xb0>)
 80036b8:	22ff      	movs	r2, #255	; 0xff
 80036ba:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80036bc:	4b1f      	ldr	r3, [pc, #124]	; (800373c <MX_RTC_Init+0xb0>)
 80036be:	2200      	movs	r2, #0
 80036c0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80036c2:	4b1e      	ldr	r3, [pc, #120]	; (800373c <MX_RTC_Init+0xb0>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80036c8:	4b1c      	ldr	r3, [pc, #112]	; (800373c <MX_RTC_Init+0xb0>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80036ce:	4b1b      	ldr	r3, [pc, #108]	; (800373c <MX_RTC_Init+0xb0>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80036d4:	4819      	ldr	r0, [pc, #100]	; (800373c <MX_RTC_Init+0xb0>)
 80036d6:	f007 f8f5 	bl	800a8c4 <HAL_RTC_Init>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80036e0:	f001 fbd8 	bl	8004e94 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80036e4:	2300      	movs	r3, #0
 80036e6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80036e8:	2300      	movs	r3, #0
 80036ea:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80036ec:	2300      	movs	r3, #0
 80036ee:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80036f0:	2300      	movs	r3, #0
 80036f2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80036f4:	2300      	movs	r3, #0
 80036f6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80036f8:	1d3b      	adds	r3, r7, #4
 80036fa:	2201      	movs	r2, #1
 80036fc:	4619      	mov	r1, r3
 80036fe:	480f      	ldr	r0, [pc, #60]	; (800373c <MX_RTC_Init+0xb0>)
 8003700:	f007 f95b 	bl	800a9ba <HAL_RTC_SetTime>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800370a:	f001 fbc3 	bl	8004e94 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 800370e:	2303      	movs	r3, #3
 8003710:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 8003712:	2307      	movs	r3, #7
 8003714:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x6;
 8003716:	2306      	movs	r3, #6
 8003718:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 800371a:	2322      	movs	r3, #34	; 0x22
 800371c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800371e:	463b      	mov	r3, r7
 8003720:	2201      	movs	r2, #1
 8003722:	4619      	mov	r1, r3
 8003724:	4805      	ldr	r0, [pc, #20]	; (800373c <MX_RTC_Init+0xb0>)
 8003726:	f007 fa41 	bl	800abac <HAL_RTC_SetDate>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8003730:	f001 fbb0 	bl	8004e94 <Error_Handler>

  //set_Date(epoch);

  /* USER CODE END RTC_Init 2 */

}
 8003734:	bf00      	nop
 8003736:	3718      	adds	r7, #24
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	20000914 	.word	0x20000914
 8003740:	40002800 	.word	0x40002800

08003744 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003748:	4b1b      	ldr	r3, [pc, #108]	; (80037b8 <MX_SPI1_Init+0x74>)
 800374a:	4a1c      	ldr	r2, [pc, #112]	; (80037bc <MX_SPI1_Init+0x78>)
 800374c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800374e:	4b1a      	ldr	r3, [pc, #104]	; (80037b8 <MX_SPI1_Init+0x74>)
 8003750:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003754:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003756:	4b18      	ldr	r3, [pc, #96]	; (80037b8 <MX_SPI1_Init+0x74>)
 8003758:	2200      	movs	r2, #0
 800375a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800375c:	4b16      	ldr	r3, [pc, #88]	; (80037b8 <MX_SPI1_Init+0x74>)
 800375e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003762:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003764:	4b14      	ldr	r3, [pc, #80]	; (80037b8 <MX_SPI1_Init+0x74>)
 8003766:	2200      	movs	r2, #0
 8003768:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800376a:	4b13      	ldr	r3, [pc, #76]	; (80037b8 <MX_SPI1_Init+0x74>)
 800376c:	2200      	movs	r2, #0
 800376e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003770:	4b11      	ldr	r3, [pc, #68]	; (80037b8 <MX_SPI1_Init+0x74>)
 8003772:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003776:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003778:	4b0f      	ldr	r3, [pc, #60]	; (80037b8 <MX_SPI1_Init+0x74>)
 800377a:	2208      	movs	r2, #8
 800377c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800377e:	4b0e      	ldr	r3, [pc, #56]	; (80037b8 <MX_SPI1_Init+0x74>)
 8003780:	2200      	movs	r2, #0
 8003782:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003784:	4b0c      	ldr	r3, [pc, #48]	; (80037b8 <MX_SPI1_Init+0x74>)
 8003786:	2200      	movs	r2, #0
 8003788:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800378a:	4b0b      	ldr	r3, [pc, #44]	; (80037b8 <MX_SPI1_Init+0x74>)
 800378c:	2200      	movs	r2, #0
 800378e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003790:	4b09      	ldr	r3, [pc, #36]	; (80037b8 <MX_SPI1_Init+0x74>)
 8003792:	2207      	movs	r2, #7
 8003794:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003796:	4b08      	ldr	r3, [pc, #32]	; (80037b8 <MX_SPI1_Init+0x74>)
 8003798:	2200      	movs	r2, #0
 800379a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800379c:	4b06      	ldr	r3, [pc, #24]	; (80037b8 <MX_SPI1_Init+0x74>)
 800379e:	2200      	movs	r2, #0
 80037a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80037a2:	4805      	ldr	r0, [pc, #20]	; (80037b8 <MX_SPI1_Init+0x74>)
 80037a4:	f007 fba8 	bl	800aef8 <HAL_SPI_Init>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80037ae:	f001 fb71 	bl	8004e94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80037b2:	bf00      	nop
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	20000938 	.word	0x20000938
 80037bc:	40013000 	.word	0x40013000

080037c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80037c4:	4b1b      	ldr	r3, [pc, #108]	; (8003834 <MX_SPI2_Init+0x74>)
 80037c6:	4a1c      	ldr	r2, [pc, #112]	; (8003838 <MX_SPI2_Init+0x78>)
 80037c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80037ca:	4b1a      	ldr	r3, [pc, #104]	; (8003834 <MX_SPI2_Init+0x74>)
 80037cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80037d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80037d2:	4b18      	ldr	r3, [pc, #96]	; (8003834 <MX_SPI2_Init+0x74>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80037d8:	4b16      	ldr	r3, [pc, #88]	; (8003834 <MX_SPI2_Init+0x74>)
 80037da:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80037de:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80037e0:	4b14      	ldr	r3, [pc, #80]	; (8003834 <MX_SPI2_Init+0x74>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80037e6:	4b13      	ldr	r3, [pc, #76]	; (8003834 <MX_SPI2_Init+0x74>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80037ec:	4b11      	ldr	r3, [pc, #68]	; (8003834 <MX_SPI2_Init+0x74>)
 80037ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037f2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037f4:	4b0f      	ldr	r3, [pc, #60]	; (8003834 <MX_SPI2_Init+0x74>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80037fa:	4b0e      	ldr	r3, [pc, #56]	; (8003834 <MX_SPI2_Init+0x74>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003800:	4b0c      	ldr	r3, [pc, #48]	; (8003834 <MX_SPI2_Init+0x74>)
 8003802:	2200      	movs	r2, #0
 8003804:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003806:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <MX_SPI2_Init+0x74>)
 8003808:	2200      	movs	r2, #0
 800380a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800380c:	4b09      	ldr	r3, [pc, #36]	; (8003834 <MX_SPI2_Init+0x74>)
 800380e:	2207      	movs	r2, #7
 8003810:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003812:	4b08      	ldr	r3, [pc, #32]	; (8003834 <MX_SPI2_Init+0x74>)
 8003814:	2200      	movs	r2, #0
 8003816:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003818:	4b06      	ldr	r3, [pc, #24]	; (8003834 <MX_SPI2_Init+0x74>)
 800381a:	2200      	movs	r2, #0
 800381c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800381e:	4805      	ldr	r0, [pc, #20]	; (8003834 <MX_SPI2_Init+0x74>)
 8003820:	f007 fb6a 	bl	800aef8 <HAL_SPI_Init>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800382a:	f001 fb33 	bl	8004e94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800382e:	bf00      	nop
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	2000099c 	.word	0x2000099c
 8003838:	40003800 	.word	0x40003800

0800383c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b088      	sub	sp, #32
 8003840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003842:	f107 0310 	add.w	r3, r7, #16
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	605a      	str	r2, [r3, #4]
 800384c:	609a      	str	r2, [r3, #8]
 800384e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003850:	1d3b      	adds	r3, r7, #4
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	605a      	str	r2, [r3, #4]
 8003858:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN TIM4_Init 1 */

  // interupt every 10 ms

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800385a:	4b1d      	ldr	r3, [pc, #116]	; (80038d0 <MX_TIM4_Init+0x94>)
 800385c:	4a1d      	ldr	r2, [pc, #116]	; (80038d4 <MX_TIM4_Init+0x98>)
 800385e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7999;
 8003860:	4b1b      	ldr	r3, [pc, #108]	; (80038d0 <MX_TIM4_Init+0x94>)
 8003862:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8003866:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003868:	4b19      	ldr	r3, [pc, #100]	; (80038d0 <MX_TIM4_Init+0x94>)
 800386a:	2200      	movs	r2, #0
 800386c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 800386e:	4b18      	ldr	r3, [pc, #96]	; (80038d0 <MX_TIM4_Init+0x94>)
 8003870:	2263      	movs	r2, #99	; 0x63
 8003872:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003874:	4b16      	ldr	r3, [pc, #88]	; (80038d0 <MX_TIM4_Init+0x94>)
 8003876:	2200      	movs	r2, #0
 8003878:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800387a:	4b15      	ldr	r3, [pc, #84]	; (80038d0 <MX_TIM4_Init+0x94>)
 800387c:	2280      	movs	r2, #128	; 0x80
 800387e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003880:	4813      	ldr	r0, [pc, #76]	; (80038d0 <MX_TIM4_Init+0x94>)
 8003882:	f008 ff43 	bl	800c70c <HAL_TIM_Base_Init>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800388c:	f001 fb02 	bl	8004e94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003894:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003896:	f107 0310 	add.w	r3, r7, #16
 800389a:	4619      	mov	r1, r3
 800389c:	480c      	ldr	r0, [pc, #48]	; (80038d0 <MX_TIM4_Init+0x94>)
 800389e:	f009 f94b 	bl	800cb38 <HAL_TIM_ConfigClockSource>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80038a8:	f001 faf4 	bl	8004e94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038ac:	2300      	movs	r3, #0
 80038ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038b0:	2300      	movs	r3, #0
 80038b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80038b4:	1d3b      	adds	r3, r7, #4
 80038b6:	4619      	mov	r1, r3
 80038b8:	4805      	ldr	r0, [pc, #20]	; (80038d0 <MX_TIM4_Init+0x94>)
 80038ba:	f009 fb63 	bl	800cf84 <HAL_TIMEx_MasterConfigSynchronization>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80038c4:	f001 fae6 	bl	8004e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80038c8:	bf00      	nop
 80038ca:	3720      	adds	r7, #32
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	20000ad8 	.word	0x20000ad8
 80038d4:	40000800 	.word	0x40000800

080038d8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80038dc:	4b14      	ldr	r3, [pc, #80]	; (8003930 <MX_UART4_Init+0x58>)
 80038de:	4a15      	ldr	r2, [pc, #84]	; (8003934 <MX_UART4_Init+0x5c>)
 80038e0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80038e2:	4b13      	ldr	r3, [pc, #76]	; (8003930 <MX_UART4_Init+0x58>)
 80038e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80038e8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80038ea:	4b11      	ldr	r3, [pc, #68]	; (8003930 <MX_UART4_Init+0x58>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80038f0:	4b0f      	ldr	r3, [pc, #60]	; (8003930 <MX_UART4_Init+0x58>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80038f6:	4b0e      	ldr	r3, [pc, #56]	; (8003930 <MX_UART4_Init+0x58>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80038fc:	4b0c      	ldr	r3, [pc, #48]	; (8003930 <MX_UART4_Init+0x58>)
 80038fe:	220c      	movs	r2, #12
 8003900:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003902:	4b0b      	ldr	r3, [pc, #44]	; (8003930 <MX_UART4_Init+0x58>)
 8003904:	2200      	movs	r2, #0
 8003906:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003908:	4b09      	ldr	r3, [pc, #36]	; (8003930 <MX_UART4_Init+0x58>)
 800390a:	2200      	movs	r2, #0
 800390c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800390e:	4b08      	ldr	r3, [pc, #32]	; (8003930 <MX_UART4_Init+0x58>)
 8003910:	2200      	movs	r2, #0
 8003912:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003914:	4b06      	ldr	r3, [pc, #24]	; (8003930 <MX_UART4_Init+0x58>)
 8003916:	2200      	movs	r2, #0
 8003918:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800391a:	4805      	ldr	r0, [pc, #20]	; (8003930 <MX_UART4_Init+0x58>)
 800391c:	f009 fbd8 	bl	800d0d0 <HAL_UART_Init>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8003926:	f001 fab5 	bl	8004e94 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800392a:	bf00      	nop
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	20000b24 	.word	0x20000b24
 8003934:	40004c00 	.word	0x40004c00

08003938 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800393c:	4b14      	ldr	r3, [pc, #80]	; (8003990 <MX_USART2_UART_Init+0x58>)
 800393e:	4a15      	ldr	r2, [pc, #84]	; (8003994 <MX_USART2_UART_Init+0x5c>)
 8003940:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8003942:	4b13      	ldr	r3, [pc, #76]	; (8003990 <MX_USART2_UART_Init+0x58>)
 8003944:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8003948:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800394a:	4b11      	ldr	r3, [pc, #68]	; (8003990 <MX_USART2_UART_Init+0x58>)
 800394c:	2200      	movs	r2, #0
 800394e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003950:	4b0f      	ldr	r3, [pc, #60]	; (8003990 <MX_USART2_UART_Init+0x58>)
 8003952:	2200      	movs	r2, #0
 8003954:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003956:	4b0e      	ldr	r3, [pc, #56]	; (8003990 <MX_USART2_UART_Init+0x58>)
 8003958:	2200      	movs	r2, #0
 800395a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800395c:	4b0c      	ldr	r3, [pc, #48]	; (8003990 <MX_USART2_UART_Init+0x58>)
 800395e:	220c      	movs	r2, #12
 8003960:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003962:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <MX_USART2_UART_Init+0x58>)
 8003964:	2200      	movs	r2, #0
 8003966:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003968:	4b09      	ldr	r3, [pc, #36]	; (8003990 <MX_USART2_UART_Init+0x58>)
 800396a:	2200      	movs	r2, #0
 800396c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800396e:	4b08      	ldr	r3, [pc, #32]	; (8003990 <MX_USART2_UART_Init+0x58>)
 8003970:	2200      	movs	r2, #0
 8003972:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003974:	4b06      	ldr	r3, [pc, #24]	; (8003990 <MX_USART2_UART_Init+0x58>)
 8003976:	2200      	movs	r2, #0
 8003978:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800397a:	4805      	ldr	r0, [pc, #20]	; (8003990 <MX_USART2_UART_Init+0x58>)
 800397c:	f009 fba8 	bl	800d0d0 <HAL_UART_Init>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003986:	f001 fa85 	bl	8004e94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800398a:	bf00      	nop
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	20000ba8 	.word	0x20000ba8
 8003994:	40004400 	.word	0x40004400

08003998 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800399e:	4b2a      	ldr	r3, [pc, #168]	; (8003a48 <MX_DMA_Init+0xb0>)
 80039a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039a2:	4a29      	ldr	r2, [pc, #164]	; (8003a48 <MX_DMA_Init+0xb0>)
 80039a4:	f043 0301 	orr.w	r3, r3, #1
 80039a8:	6493      	str	r3, [r2, #72]	; 0x48
 80039aa:	4b27      	ldr	r3, [pc, #156]	; (8003a48 <MX_DMA_Init+0xb0>)
 80039ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	607b      	str	r3, [r7, #4]
 80039b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80039b6:	4b24      	ldr	r3, [pc, #144]	; (8003a48 <MX_DMA_Init+0xb0>)
 80039b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ba:	4a23      	ldr	r2, [pc, #140]	; (8003a48 <MX_DMA_Init+0xb0>)
 80039bc:	f043 0302 	orr.w	r3, r3, #2
 80039c0:	6493      	str	r3, [r2, #72]	; 0x48
 80039c2:	4b21      	ldr	r3, [pc, #132]	; (8003a48 <MX_DMA_Init+0xb0>)
 80039c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	603b      	str	r3, [r7, #0]
 80039cc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80039ce:	2200      	movs	r2, #0
 80039d0:	2100      	movs	r1, #0
 80039d2:	200e      	movs	r0, #14
 80039d4:	f003 fb07 	bl	8006fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80039d8:	200e      	movs	r0, #14
 80039da:	f003 fb20 	bl	800701e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80039de:	2200      	movs	r2, #0
 80039e0:	2100      	movs	r1, #0
 80039e2:	200f      	movs	r0, #15
 80039e4:	f003 faff 	bl	8006fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80039e8:	200f      	movs	r0, #15
 80039ea:	f003 fb18 	bl	800701e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80039ee:	2200      	movs	r2, #0
 80039f0:	2100      	movs	r1, #0
 80039f2:	2010      	movs	r0, #16
 80039f4:	f003 faf7 	bl	8006fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80039f8:	2010      	movs	r0, #16
 80039fa:	f003 fb10 	bl	800701e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 3, 0);
 80039fe:	2200      	movs	r2, #0
 8003a00:	2103      	movs	r1, #3
 8003a02:	2011      	movs	r0, #17
 8003a04:	f003 faef 	bl	8006fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8003a08:	2011      	movs	r0, #17
 8003a0a:	f003 fb08 	bl	800701e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8003a0e:	2200      	movs	r2, #0
 8003a10:	2100      	movs	r1, #0
 8003a12:	203a      	movs	r0, #58	; 0x3a
 8003a14:	f003 fae7 	bl	8006fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8003a18:	203a      	movs	r0, #58	; 0x3a
 8003a1a:	f003 fb00 	bl	800701e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 8003a1e:	2200      	movs	r2, #0
 8003a20:	2100      	movs	r1, #0
 8003a22:	203b      	movs	r0, #59	; 0x3b
 8003a24:	f003 fadf 	bl	8006fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8003a28:	203b      	movs	r0, #59	; 0x3b
 8003a2a:	f003 faf8 	bl	800701e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0, 0);
 8003a2e:	2200      	movs	r2, #0
 8003a30:	2100      	movs	r1, #0
 8003a32:	2044      	movs	r0, #68	; 0x44
 8003a34:	f003 fad7 	bl	8006fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8003a38:	2044      	movs	r0, #68	; 0x44
 8003a3a:	f003 faf0 	bl	800701e <HAL_NVIC_EnableIRQ>

}
 8003a3e:	bf00      	nop
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	40021000 	.word	0x40021000

08003a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b08a      	sub	sp, #40	; 0x28
 8003a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a52:	f107 0314 	add.w	r3, r7, #20
 8003a56:	2200      	movs	r2, #0
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	605a      	str	r2, [r3, #4]
 8003a5c:	609a      	str	r2, [r3, #8]
 8003a5e:	60da      	str	r2, [r3, #12]
 8003a60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a62:	4b7d      	ldr	r3, [pc, #500]	; (8003c58 <MX_GPIO_Init+0x20c>)
 8003a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a66:	4a7c      	ldr	r2, [pc, #496]	; (8003c58 <MX_GPIO_Init+0x20c>)
 8003a68:	f043 0304 	orr.w	r3, r3, #4
 8003a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a6e:	4b7a      	ldr	r3, [pc, #488]	; (8003c58 <MX_GPIO_Init+0x20c>)
 8003a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a72:	f003 0304 	and.w	r3, r3, #4
 8003a76:	613b      	str	r3, [r7, #16]
 8003a78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a7a:	4b77      	ldr	r3, [pc, #476]	; (8003c58 <MX_GPIO_Init+0x20c>)
 8003a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a7e:	4a76      	ldr	r2, [pc, #472]	; (8003c58 <MX_GPIO_Init+0x20c>)
 8003a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a86:	4b74      	ldr	r3, [pc, #464]	; (8003c58 <MX_GPIO_Init+0x20c>)
 8003a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a8e:	60fb      	str	r3, [r7, #12]
 8003a90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a92:	4b71      	ldr	r3, [pc, #452]	; (8003c58 <MX_GPIO_Init+0x20c>)
 8003a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a96:	4a70      	ldr	r2, [pc, #448]	; (8003c58 <MX_GPIO_Init+0x20c>)
 8003a98:	f043 0301 	orr.w	r3, r3, #1
 8003a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a9e:	4b6e      	ldr	r3, [pc, #440]	; (8003c58 <MX_GPIO_Init+0x20c>)
 8003aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	60bb      	str	r3, [r7, #8]
 8003aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aaa:	4b6b      	ldr	r3, [pc, #428]	; (8003c58 <MX_GPIO_Init+0x20c>)
 8003aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aae:	4a6a      	ldr	r2, [pc, #424]	; (8003c58 <MX_GPIO_Init+0x20c>)
 8003ab0:	f043 0302 	orr.w	r3, r3, #2
 8003ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ab6:	4b68      	ldr	r3, [pc, #416]	; (8003c58 <MX_GPIO_Init+0x20c>)
 8003ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	607b      	str	r3, [r7, #4]
 8003ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ac2:	4b65      	ldr	r3, [pc, #404]	; (8003c58 <MX_GPIO_Init+0x20c>)
 8003ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ac6:	4a64      	ldr	r2, [pc, #400]	; (8003c58 <MX_GPIO_Init+0x20c>)
 8003ac8:	f043 0308 	orr.w	r3, r3, #8
 8003acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ace:	4b62      	ldr	r3, [pc, #392]	; (8003c58 <MX_GPIO_Init+0x20c>)
 8003ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad2:	f003 0308 	and.w	r3, r3, #8
 8003ad6:	603b      	str	r3, [r7, #0]
 8003ad8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TIK_LED_Pin|ERR_LED_Pin, GPIO_PIN_RESET);
 8003ada:	2200      	movs	r2, #0
 8003adc:	2109      	movs	r1, #9
 8003ade:	485f      	ldr	r0, [pc, #380]	; (8003c5c <MX_GPIO_Init+0x210>)
 8003ae0:	f003 ff0c 	bl	80078fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	2110      	movs	r1, #16
 8003ae8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003aec:	f003 ff06 	bl	80078fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|SPI1_DC_Pin|WAKEUP_Pin, GPIO_PIN_SET);
 8003af0:	2201      	movs	r2, #1
 8003af2:	f44f 5189 	mov.w	r1, #4384	; 0x1120
 8003af6:	485a      	ldr	r0, [pc, #360]	; (8003c60 <MX_GPIO_Init+0x214>)
 8003af8:	f003 ff00 	bl	80078fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8003afc:	2201      	movs	r2, #1
 8003afe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b02:	4856      	ldr	r0, [pc, #344]	; (8003c5c <MX_GPIO_Init+0x210>)
 8003b04:	f003 fefa 	bl	80078fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_RST_GPIO_Port, SPI1_RST_Pin, GPIO_PIN_SET);
 8003b08:	2201      	movs	r2, #1
 8003b0a:	2104      	movs	r1, #4
 8003b0c:	4855      	ldr	r0, [pc, #340]	; (8003c64 <MX_GPIO_Init+0x218>)
 8003b0e:	f003 fef5 	bl	80078fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TIK_LED_Pin */
  GPIO_InitStruct.Pin = TIK_LED_Pin;
 8003b12:	2301      	movs	r3, #1
 8003b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b16:	2301      	movs	r3, #1
 8003b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TIK_LED_GPIO_Port, &GPIO_InitStruct);
 8003b22:	f107 0314 	add.w	r3, r7, #20
 8003b26:	4619      	mov	r1, r3
 8003b28:	484c      	ldr	r0, [pc, #304]	; (8003c5c <MX_GPIO_Init+0x210>)
 8003b2a:	f003 fd25 	bl	8007578 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY0_Pin KEY1_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin;
 8003b2e:	2306      	movs	r3, #6
 8003b30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003b32:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003b36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b3c:	f107 0314 	add.w	r3, r7, #20
 8003b40:	4619      	mov	r1, r3
 8003b42:	4846      	ldr	r0, [pc, #280]	; (8003c5c <MX_GPIO_Init+0x210>)
 8003b44:	f003 fd18 	bl	8007578 <HAL_GPIO_Init>

  /*Configure GPIO pin : ERR_LED_Pin */
  GPIO_InitStruct.Pin = ERR_LED_Pin;
 8003b48:	2308      	movs	r3, #8
 8003b4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b50:	2300      	movs	r3, #0
 8003b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003b54:	2301      	movs	r3, #1
 8003b56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERR_LED_GPIO_Port, &GPIO_InitStruct);
 8003b58:	f107 0314 	add.w	r3, r7, #20
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	483f      	ldr	r0, [pc, #252]	; (8003c5c <MX_GPIO_Init+0x210>)
 8003b60:	f003 fd0a 	bl	8007578 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8003b64:	2310      	movs	r3, #16
 8003b66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b70:	2302      	movs	r3, #2
 8003b72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8003b74:	f107 0314 	add.w	r3, r7, #20
 8003b78:	4619      	mov	r1, r3
 8003b7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b7e:	f003 fcfb 	bl	8007578 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8003b82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b90:	2302      	movs	r3, #2
 8003b92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8003b94:	f107 0314 	add.w	r3, r7, #20
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4831      	ldr	r0, [pc, #196]	; (8003c60 <MX_GPIO_Init+0x214>)
 8003b9c:	f003 fcec 	bl	8007578 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8003ba0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ba4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003baa:	2301      	movs	r3, #1
 8003bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8003bb2:	f107 0314 	add.w	r3, r7, #20
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	4828      	ldr	r0, [pc, #160]	; (8003c5c <MX_GPIO_Init+0x210>)
 8003bba:	f003 fcdd 	bl	8007578 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_RST_Pin */
  GPIO_InitStruct.Pin = SPI1_RST_Pin;
 8003bbe:	2304      	movs	r3, #4
 8003bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003bca:	2302      	movs	r3, #2
 8003bcc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_RST_GPIO_Port, &GPIO_InitStruct);
 8003bce:	f107 0314 	add.w	r3, r7, #20
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	4823      	ldr	r0, [pc, #140]	; (8003c64 <MX_GPIO_Init+0x218>)
 8003bd6:	f003 fccf 	bl	8007578 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_DC_Pin */
  GPIO_InitStruct.Pin = SPI1_DC_Pin;
 8003bda:	2320      	movs	r3, #32
 8003bdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bde:	2301      	movs	r3, #1
 8003be0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be2:	2300      	movs	r3, #0
 8003be4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003be6:	2302      	movs	r3, #2
 8003be8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_DC_GPIO_Port, &GPIO_InitStruct);
 8003bea:	f107 0314 	add.w	r3, r7, #20
 8003bee:	4619      	mov	r1, r3
 8003bf0:	481b      	ldr	r0, [pc, #108]	; (8003c60 <MX_GPIO_Init+0x214>)
 8003bf2:	f003 fcc1 	bl	8007578 <HAL_GPIO_Init>

  /*Configure GPIO pin : WAKEUP_Pin */
  GPIO_InitStruct.Pin = WAKEUP_Pin;
 8003bf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c00:	2301      	movs	r3, #1
 8003c02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003c04:	2301      	movs	r3, #1
 8003c06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8003c08:	f107 0314 	add.w	r3, r7, #20
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	4814      	ldr	r0, [pc, #80]	; (8003c60 <MX_GPIO_Init+0x214>)
 8003c10:	f003 fcb2 	bl	8007578 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_STAT_Pin */
  GPIO_InitStruct.Pin = BLE_STAT_Pin;
 8003c14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003c1e:	2302      	movs	r3, #2
 8003c20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLE_STAT_GPIO_Port, &GPIO_InitStruct);
 8003c22:	f107 0314 	add.w	r3, r7, #20
 8003c26:	4619      	mov	r1, r3
 8003c28:	480d      	ldr	r0, [pc, #52]	; (8003c60 <MX_GPIO_Init+0x214>)
 8003c2a:	f003 fca5 	bl	8007578 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003c2e:	2200      	movs	r2, #0
 8003c30:	2100      	movs	r1, #0
 8003c32:	2007      	movs	r0, #7
 8003c34:	f003 f9d7 	bl	8006fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003c38:	2007      	movs	r0, #7
 8003c3a:	f003 f9f0 	bl	800701e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8003c3e:	2200      	movs	r2, #0
 8003c40:	2100      	movs	r1, #0
 8003c42:	2008      	movs	r0, #8
 8003c44:	f003 f9cf 	bl	8006fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003c48:	2008      	movs	r0, #8
 8003c4a:	f003 f9e8 	bl	800701e <HAL_NVIC_EnableIRQ>

}
 8003c4e:	bf00      	nop
 8003c50:	3728      	adds	r7, #40	; 0x28
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	48000800 	.word	0x48000800
 8003c60:	48000400 	.word	0x48000400
 8003c64:	48000c00 	.word	0x48000c00

08003c68 <hexToBin>:

//-------------------------------------------------------------------------------------------
//      Преобразует два символа строки из hex-формата в двоичный
//
uint8_t hexToBin(char *sc)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
char st = 0, ml = 0;
 8003c70:	2300      	movs	r3, #0
 8003c72:	73fb      	strb	r3, [r7, #15]
 8003c74:	2300      	movs	r3, #0
 8003c76:	73bb      	strb	r3, [r7, #14]

	if ((sc[0] >= '0') && (sc[0] <= '9')) st = (sc[0] - 0x30);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	2b2f      	cmp	r3, #47	; 0x2f
 8003c7e:	d908      	bls.n	8003c92 <hexToBin+0x2a>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	2b39      	cmp	r3, #57	; 0x39
 8003c86:	d804      	bhi.n	8003c92 <hexToBin+0x2a>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	3b30      	subs	r3, #48	; 0x30
 8003c8e:	73fb      	strb	r3, [r7, #15]
 8003c90:	e018      	b.n	8003cc4 <hexToBin+0x5c>
	else
	if ((sc[0] >= 'A') && (sc[0] <= 'F')) st = (sc[0] - 0x37);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	2b40      	cmp	r3, #64	; 0x40
 8003c98:	d908      	bls.n	8003cac <hexToBin+0x44>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	2b46      	cmp	r3, #70	; 0x46
 8003ca0:	d804      	bhi.n	8003cac <hexToBin+0x44>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	3b37      	subs	r3, #55	; 0x37
 8003ca8:	73fb      	strb	r3, [r7, #15]
 8003caa:	e00b      	b.n	8003cc4 <hexToBin+0x5c>
	else
	if ((sc[0] >= 'a') && (sc[0] <= 'f')) st = (sc[0] - 0x57);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	2b60      	cmp	r3, #96	; 0x60
 8003cb2:	d907      	bls.n	8003cc4 <hexToBin+0x5c>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	2b66      	cmp	r3, #102	; 0x66
 8003cba:	d803      	bhi.n	8003cc4 <hexToBin+0x5c>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	3b57      	subs	r3, #87	; 0x57
 8003cc2:	73fb      	strb	r3, [r7, #15]

	if ((sc[1] >= '0') && (sc[1] <= '9')) ml = (sc[1] - 0x30);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	2b2f      	cmp	r3, #47	; 0x2f
 8003ccc:	d90a      	bls.n	8003ce4 <hexToBin+0x7c>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	2b39      	cmp	r3, #57	; 0x39
 8003cd6:	d805      	bhi.n	8003ce4 <hexToBin+0x7c>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	3b30      	subs	r3, #48	; 0x30
 8003ce0:	73bb      	strb	r3, [r7, #14]
 8003ce2:	e01e      	b.n	8003d22 <hexToBin+0xba>
	else
	if ((sc[1] >= 'A') && (sc[1] <= 'F')) ml = (sc[1] - 0x37);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	2b40      	cmp	r3, #64	; 0x40
 8003cec:	d90a      	bls.n	8003d04 <hexToBin+0x9c>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	2b46      	cmp	r3, #70	; 0x46
 8003cf6:	d805      	bhi.n	8003d04 <hexToBin+0x9c>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	3b37      	subs	r3, #55	; 0x37
 8003d00:	73bb      	strb	r3, [r7, #14]
 8003d02:	e00e      	b.n	8003d22 <hexToBin+0xba>
	else
	if ((sc[1] >= 'a') && (sc[1] <= 'f')) ml = (sc[1] - 0x57);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	3301      	adds	r3, #1
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	2b60      	cmp	r3, #96	; 0x60
 8003d0c:	d909      	bls.n	8003d22 <hexToBin+0xba>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	3301      	adds	r3, #1
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	2b66      	cmp	r3, #102	; 0x66
 8003d16:	d804      	bhi.n	8003d22 <hexToBin+0xba>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	3b57      	subs	r3, #87	; 0x57
 8003d20:	73bb      	strb	r3, [r7, #14]

	return ((st << 4) | (ml & 0x0f));
 8003d22:	7bfb      	ldrb	r3, [r7, #15]
 8003d24:	011b      	lsls	r3, r3, #4
 8003d26:	b25a      	sxtb	r2, r3
 8003d28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d2c:	f003 030f 	and.w	r3, r3, #15
 8003d30:	b25b      	sxtb	r3, r3
 8003d32:	4313      	orrs	r3, r2
 8003d34:	b25b      	sxtb	r3, r3
 8003d36:	b2db      	uxtb	r3, r3

}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3714      	adds	r7, #20
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <getEvtCount>:


#ifdef SET_FIFO_MODE
//-------------------------------------------------------------------------------------------
uint8_t getEvtCount()
{
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0
	return cnt_evt;
 8003d48:	4b03      	ldr	r3, [pc, #12]	; (8003d58 <getEvtCount+0x14>)
 8003d4a:	781b      	ldrb	r3, [r3, #0]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	20001d5a 	.word	0x20001d5a

08003d5c <putEvt>:
//-------------------------------------------------------------------------------------------
void putEvt(int evt)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]

	//while (lock_fifo);
	//lock_fifo = true;

	if (cnt_evt > (MAX_FIFO_SIZE - 3)) {
 8003d64:	4b30      	ldr	r3, [pc, #192]	; (8003e28 <putEvt+0xcc>)
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	2b3d      	cmp	r3, #61	; 0x3d
 8003d6a:	d907      	bls.n	8003d7c <putEvt+0x20>
		devError |= devFIFO;
 8003d6c:	4b2f      	ldr	r3, [pc, #188]	; (8003e2c <putEvt+0xd0>)
 8003d6e:	881b      	ldrh	r3, [r3, #0]
 8003d70:	f043 0310 	orr.w	r3, r3, #16
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	4b2d      	ldr	r3, [pc, #180]	; (8003e2c <putEvt+0xd0>)
 8003d78:	801a      	strh	r2, [r3, #0]
		//lock_fifo = false;
		return;
 8003d7a:	e051      	b.n	8003e20 <putEvt+0xc4>
	}

	HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003d7c:	2026      	movs	r0, #38	; 0x26
 8003d7e:	f003 f95c 	bl	800703a <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(TIM4_IRQn);
 8003d82:	201e      	movs	r0, #30
 8003d84:	f003 f959 	bl	800703a <HAL_NVIC_DisableIRQ>

	if (cnt_evt >= MAX_FIFO_SIZE) {
 8003d88:	4b27      	ldr	r3, [pc, #156]	; (8003e28 <putEvt+0xcc>)
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	2b3f      	cmp	r3, #63	; 0x3f
 8003d8e:	d906      	bls.n	8003d9e <putEvt+0x42>
			wr_evt_err++;
 8003d90:	4b27      	ldr	r3, [pc, #156]	; (8003e30 <putEvt+0xd4>)
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	3301      	adds	r3, #1
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	4b25      	ldr	r3, [pc, #148]	; (8003e30 <putEvt+0xd4>)
 8003d9a:	701a      	strb	r2, [r3, #0]
 8003d9c:	e027      	b.n	8003dee <putEvt+0x92>
		} else {
			evt_fifo[wr_evt_adr] = evt;
 8003d9e:	4b25      	ldr	r3, [pc, #148]	; (8003e34 <putEvt+0xd8>)
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	4619      	mov	r1, r3
 8003da4:	4a24      	ldr	r2, [pc, #144]	; (8003e38 <putEvt+0xdc>)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			cnt_evt++;
 8003dac:	4b1e      	ldr	r3, [pc, #120]	; (8003e28 <putEvt+0xcc>)
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	3301      	adds	r3, #1
 8003db2:	b2da      	uxtb	r2, r3
 8003db4:	4b1c      	ldr	r3, [pc, #112]	; (8003e28 <putEvt+0xcc>)
 8003db6:	701a      	strb	r2, [r3, #0]
			if (wr_evt_adr < (MAX_FIFO_SIZE - 1) ) {
 8003db8:	4b1e      	ldr	r3, [pc, #120]	; (8003e34 <putEvt+0xd8>)
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	2b3e      	cmp	r3, #62	; 0x3e
 8003dbe:	d806      	bhi.n	8003dce <putEvt+0x72>
				wr_evt_adr++;
 8003dc0:	4b1c      	ldr	r3, [pc, #112]	; (8003e34 <putEvt+0xd8>)
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	4b1a      	ldr	r3, [pc, #104]	; (8003e34 <putEvt+0xd8>)
 8003dca:	701a      	strb	r2, [r3, #0]
 8003dcc:	e002      	b.n	8003dd4 <putEvt+0x78>
			} else  {
				wr_evt_adr = 0;
 8003dce:	4b19      	ldr	r3, [pc, #100]	; (8003e34 <putEvt+0xd8>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	701a      	strb	r2, [r3, #0]
			}
			wr_evt_err = 0;
 8003dd4:	4b16      	ldr	r3, [pc, #88]	; (8003e30 <putEvt+0xd4>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	701a      	strb	r2, [r3, #0]
			if (cnt_evt > max_evt) max_evt = cnt_evt;
 8003dda:	4b13      	ldr	r3, [pc, #76]	; (8003e28 <putEvt+0xcc>)
 8003ddc:	781a      	ldrb	r2, [r3, #0]
 8003dde:	4b17      	ldr	r3, [pc, #92]	; (8003e3c <putEvt+0xe0>)
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d903      	bls.n	8003dee <putEvt+0x92>
 8003de6:	4b10      	ldr	r3, [pc, #64]	; (8003e28 <putEvt+0xcc>)
 8003de8:	781a      	ldrb	r2, [r3, #0]
 8003dea:	4b14      	ldr	r3, [pc, #80]	; (8003e3c <putEvt+0xe0>)
 8003dec:	701a      	strb	r2, [r3, #0]
		}

		if (wr_evt_err) devError |= devFIFO;
 8003dee:	4b10      	ldr	r3, [pc, #64]	; (8003e30 <putEvt+0xd4>)
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d007      	beq.n	8003e06 <putEvt+0xaa>
 8003df6:	4b0d      	ldr	r3, [pc, #52]	; (8003e2c <putEvt+0xd0>)
 8003df8:	881b      	ldrh	r3, [r3, #0]
 8003dfa:	f043 0310 	orr.w	r3, r3, #16
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	4b0a      	ldr	r3, [pc, #40]	; (8003e2c <putEvt+0xd0>)
 8003e02:	801a      	strh	r2, [r3, #0]
 8003e04:	e006      	b.n	8003e14 <putEvt+0xb8>
				   else devError &= ~devFIFO;
 8003e06:	4b09      	ldr	r3, [pc, #36]	; (8003e2c <putEvt+0xd0>)
 8003e08:	881b      	ldrh	r3, [r3, #0]
 8003e0a:	f023 0310 	bic.w	r3, r3, #16
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	4b06      	ldr	r3, [pc, #24]	; (8003e2c <putEvt+0xd0>)
 8003e12:	801a      	strh	r2, [r3, #0]

		HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003e14:	201e      	movs	r0, #30
 8003e16:	f003 f902 	bl	800701e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003e1a:	2026      	movs	r0, #38	; 0x26
 8003e1c:	f003 f8ff 	bl	800701e <HAL_NVIC_EnableIRQ>

		//lock_fifo = false;
}
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	20001d5a 	.word	0x20001d5a
 8003e2c:	2000193c 	.word	0x2000193c
 8003e30:	20001d59 	.word	0x20001d59
 8003e34:	20001d58 	.word	0x20001d58
 8003e38:	200000bc 	.word	0x200000bc
 8003e3c:	20001d5b 	.word	0x20001d5b

08003e40 <getEvt>:
//-------------------------------------------------------------------------------------------
int getEvt()
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
int ret = evt_None;
 8003e46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e4a:	607b      	str	r3, [r7, #4]

	//while (lock_fifo);
	//lock_fifo = true;

	HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003e4c:	2026      	movs	r0, #38	; 0x26
 8003e4e:	f003 f8f4 	bl	800703a <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(TIM4_IRQn);
 8003e52:	201e      	movs	r0, #30
 8003e54:	f003 f8f1 	bl	800703a <HAL_NVIC_DisableIRQ>
	if (cnt_evt) {
 8003e58:	4b16      	ldr	r3, [pc, #88]	; (8003eb4 <getEvt+0x74>)
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d01e      	beq.n	8003e9e <getEvt+0x5e>
		ret = evt_fifo[rd_evt_adr];
 8003e60:	4b15      	ldr	r3, [pc, #84]	; (8003eb8 <getEvt+0x78>)
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	461a      	mov	r2, r3
 8003e66:	4b15      	ldr	r3, [pc, #84]	; (8003ebc <getEvt+0x7c>)
 8003e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e6c:	607b      	str	r3, [r7, #4]
		if (cnt_evt) cnt_evt--;
 8003e6e:	4b11      	ldr	r3, [pc, #68]	; (8003eb4 <getEvt+0x74>)
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d005      	beq.n	8003e82 <getEvt+0x42>
 8003e76:	4b0f      	ldr	r3, [pc, #60]	; (8003eb4 <getEvt+0x74>)
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	4b0d      	ldr	r3, [pc, #52]	; (8003eb4 <getEvt+0x74>)
 8003e80:	701a      	strb	r2, [r3, #0]
		if (rd_evt_adr < (MAX_FIFO_SIZE - 1) ) {
 8003e82:	4b0d      	ldr	r3, [pc, #52]	; (8003eb8 <getEvt+0x78>)
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	2b3e      	cmp	r3, #62	; 0x3e
 8003e88:	d806      	bhi.n	8003e98 <getEvt+0x58>
			rd_evt_adr++;
 8003e8a:	4b0b      	ldr	r3, [pc, #44]	; (8003eb8 <getEvt+0x78>)
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	4b09      	ldr	r3, [pc, #36]	; (8003eb8 <getEvt+0x78>)
 8003e94:	701a      	strb	r2, [r3, #0]
 8003e96:	e002      	b.n	8003e9e <getEvt+0x5e>
		} else {
			rd_evt_adr = 0;
 8003e98:	4b07      	ldr	r3, [pc, #28]	; (8003eb8 <getEvt+0x78>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	701a      	strb	r2, [r3, #0]
		}
	}

	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003e9e:	201e      	movs	r0, #30
 8003ea0:	f003 f8bd 	bl	800701e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003ea4:	2026      	movs	r0, #38	; 0x26
 8003ea6:	f003 f8ba 	bl	800701e <HAL_NVIC_EnableIRQ>

	//lock_fifo = false;

	return ret;
 8003eaa:	687b      	ldr	r3, [r7, #4]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3708      	adds	r7, #8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	20001d5a 	.word	0x20001d5a
 8003eb8:	20001d57 	.word	0x20001d57
 8003ebc:	200000bc 	.word	0x200000bc

08003ec0 <nameStation>:
//-------------------------------------------------------------------------------------------
#ifdef SET_DISPLAY

//-------------------------------------------------------------------------------------------
const char *nameStation(float fr)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	ed87 0a01 	vstr	s0, [r7, #4]
int8_t ik = -1;
 8003eca:	23ff      	movs	r3, #255	; 0xff
 8003ecc:	73fb      	strb	r3, [r7, #15]

	for (int8_t i = 0; i < MAX_LIST; i++) {
 8003ece:	2300      	movs	r3, #0
 8003ed0:	73bb      	strb	r3, [r7, #14]
 8003ed2:	e01b      	b.n	8003f0c <nameStation+0x4c>
		if (list[i].freq == fr) {
 8003ed4:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8003ed8:	491a      	ldr	r1, [pc, #104]	; (8003f44 <nameStation+0x84>)
 8003eda:	4613      	mov	r3, r2
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	4413      	add	r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	440b      	add	r3, r1
 8003ee4:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8003ee8:	edd7 7a01 	vldr	s15, [r7, #4]
 8003eec:	ee07 3a10 	vmov	s14, r3
 8003ef0:	eef4 7a47 	vcmp.f32	s15, s14
 8003ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ef8:	d102      	bne.n	8003f00 <nameStation+0x40>
			ik = i;
 8003efa:	7bbb      	ldrb	r3, [r7, #14]
 8003efc:	73fb      	strb	r3, [r7, #15]
			break;
 8003efe:	e009      	b.n	8003f14 <nameStation+0x54>
	for (int8_t i = 0; i < MAX_LIST; i++) {
 8003f00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	3301      	adds	r3, #1
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	73bb      	strb	r3, [r7, #14]
 8003f0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f10:	2b18      	cmp	r3, #24
 8003f12:	dddf      	ble.n	8003ed4 <nameStation+0x14>
		}
	}

	if (ik != -1) return list[ik].name;
 8003f14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f1c:	d009      	beq.n	8003f32 <nameStation+0x72>
 8003f1e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8003f22:	4613      	mov	r3, r2
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	4413      	add	r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4a06      	ldr	r2, [pc, #24]	; (8003f44 <nameStation+0x84>)
 8003f2c:	4413      	add	r3, r2
 8003f2e:	3305      	adds	r3, #5
 8003f30:	e001      	b.n	8003f36 <nameStation+0x76>
			 else return noneStation;
 8003f32:	4b05      	ldr	r3, [pc, #20]	; (8003f48 <nameStation+0x88>)
 8003f34:	681b      	ldr	r3, [r3, #0]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3714      	adds	r7, #20
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	20002da0 	.word	0x20002da0
 8003f48:	200001e4 	.word	0x200001e4

08003f4c <getNextList>:
//-------------------------------------------------------------------------------------------
float getNextList(float fr, uint8_t up, uint8_t *band)
{
 8003f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f50:	b08e      	sub	sp, #56	; 0x38
 8003f52:	af08      	add	r7, sp, #32
 8003f54:	ed87 0a03 	vstr	s0, [r7, #12]
 8003f58:	4603      	mov	r3, r0
 8003f5a:	6079      	str	r1, [r7, #4]
 8003f5c:	72fb      	strb	r3, [r7, #11]
float ret = fr;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	613b      	str	r3, [r7, #16]
int8_t ik = -1;
 8003f62:	23ff      	movs	r3, #255	; 0xff
 8003f64:	75fb      	strb	r3, [r7, #23]

	for (int8_t i = 0; i < MAX_LIST; i++) {
 8003f66:	2300      	movs	r3, #0
 8003f68:	75bb      	strb	r3, [r7, #22]
 8003f6a:	e01b      	b.n	8003fa4 <getNextList+0x58>
		if (list[i].freq == fr) {
 8003f6c:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8003f70:	4965      	ldr	r1, [pc, #404]	; (8004108 <getNextList+0x1bc>)
 8003f72:	4613      	mov	r3, r2
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	4413      	add	r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	440b      	add	r3, r1
 8003f7c:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8003f80:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f84:	ee07 3a10 	vmov	s14, r3
 8003f88:	eef4 7a47 	vcmp.f32	s15, s14
 8003f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f90:	d102      	bne.n	8003f98 <getNextList+0x4c>
			ik = i;
 8003f92:	7dbb      	ldrb	r3, [r7, #22]
 8003f94:	75fb      	strb	r3, [r7, #23]
			break;
 8003f96:	e009      	b.n	8003fac <getNextList+0x60>
	for (int8_t i = 0; i < MAX_LIST; i++) {
 8003f98:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	75bb      	strb	r3, [r7, #22]
 8003fa4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003fa8:	2b18      	cmp	r3, #24
 8003faa:	dddf      	ble.n	8003f6c <getNextList+0x20>
		}
	}
	if (ik != -1) {
 8003fac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003fb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fb4:	d01b      	beq.n	8003fee <getNextList+0xa2>
		if (up) {
 8003fb6:	7afb      	ldrb	r3, [r7, #11]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00a      	beq.n	8003fd2 <getNextList+0x86>
			if (++ik == MAX_LIST) ik = 0;
 8003fbc:	7dfb      	ldrb	r3, [r7, #23]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	75fb      	strb	r3, [r7, #23]
 8003fc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003fc8:	2b19      	cmp	r3, #25
 8003fca:	d161      	bne.n	8004090 <getNextList+0x144>
 8003fcc:	2300      	movs	r3, #0
 8003fce:	75fb      	strb	r3, [r7, #23]
 8003fd0:	e05e      	b.n	8004090 <getNextList+0x144>
		} else {
			if (ik != 0) ik--; else ik = MAX_LIST - 1;
 8003fd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d006      	beq.n	8003fe8 <getNextList+0x9c>
 8003fda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	75fb      	strb	r3, [r7, #23]
 8003fe6:	e053      	b.n	8004090 <getNextList+0x144>
 8003fe8:	2318      	movs	r3, #24
 8003fea:	75fb      	strb	r3, [r7, #23]
 8003fec:	e050      	b.n	8004090 <getNextList+0x144>
		}
	} else {
		if (up) {// seek_up
 8003fee:	7afb      	ldrb	r3, [r7, #11]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d023      	beq.n	800403c <getNextList+0xf0>
			for (int8_t i = ik; i < MAX_LIST; i++) {
 8003ff4:	7dfb      	ldrb	r3, [r7, #23]
 8003ff6:	757b      	strb	r3, [r7, #21]
 8003ff8:	e01b      	b.n	8004032 <getNextList+0xe6>
				if (list[i].freq > fr) {
 8003ffa:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8003ffe:	4942      	ldr	r1, [pc, #264]	; (8004108 <getNextList+0x1bc>)
 8004000:	4613      	mov	r3, r2
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	4413      	add	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	440b      	add	r3, r1
 800400a:	f8d3 3001 	ldr.w	r3, [r3, #1]
 800400e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004012:	ee07 3a10 	vmov	s14, r3
 8004016:	eef4 7ac7 	vcmpe.f32	s15, s14
 800401a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800401e:	d502      	bpl.n	8004026 <getNextList+0xda>
					ik = i;
 8004020:	7d7b      	ldrb	r3, [r7, #21]
 8004022:	75fb      	strb	r3, [r7, #23]
					break;
 8004024:	e02d      	b.n	8004082 <getNextList+0x136>
			for (int8_t i = ik; i < MAX_LIST; i++) {
 8004026:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800402a:	b2db      	uxtb	r3, r3
 800402c:	3301      	adds	r3, #1
 800402e:	b2db      	uxtb	r3, r3
 8004030:	757b      	strb	r3, [r7, #21]
 8004032:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8004036:	2b18      	cmp	r3, #24
 8004038:	dddf      	ble.n	8003ffa <getNextList+0xae>
 800403a:	e022      	b.n	8004082 <getNextList+0x136>
				}
			}
		} else {// seek_down
			for (int8_t i = ik; i <= 0; i--) {
 800403c:	7dfb      	ldrb	r3, [r7, #23]
 800403e:	753b      	strb	r3, [r7, #20]
 8004040:	e01b      	b.n	800407a <getNextList+0x12e>
				if (list[i].freq < fr) {
 8004042:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8004046:	4930      	ldr	r1, [pc, #192]	; (8004108 <getNextList+0x1bc>)
 8004048:	4613      	mov	r3, r2
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	4413      	add	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	440b      	add	r3, r1
 8004052:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8004056:	edd7 7a03 	vldr	s15, [r7, #12]
 800405a:	ee07 3a10 	vmov	s14, r3
 800405e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004066:	dd02      	ble.n	800406e <getNextList+0x122>
					ik = i;
 8004068:	7d3b      	ldrb	r3, [r7, #20]
 800406a:	75fb      	strb	r3, [r7, #23]
					break;
 800406c:	e009      	b.n	8004082 <getNextList+0x136>
			for (int8_t i = ik; i <= 0; i--) {
 800406e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8004072:	b2db      	uxtb	r3, r3
 8004074:	3b01      	subs	r3, #1
 8004076:	b2db      	uxtb	r3, r3
 8004078:	753b      	strb	r3, [r7, #20]
 800407a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800407e:	2b00      	cmp	r3, #0
 8004080:	dddf      	ble.n	8004042 <getNextList+0xf6>
				}
			}
		}
		if (ik == -1) ik = 0;
 8004082:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004086:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800408a:	d101      	bne.n	8004090 <getNextList+0x144>
 800408c:	2300      	movs	r3, #0
 800408e:	75fb      	strb	r3, [r7, #23]
	}
	ret = list[ik].freq;
 8004090:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8004094:	491c      	ldr	r1, [pc, #112]	; (8004108 <getNextList+0x1bc>)
 8004096:	4613      	mov	r3, r2
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	4413      	add	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	440b      	add	r3, r1
 80040a0:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80040a4:	613b      	str	r3, [r7, #16]
	*band = list[ik].band;
 80040a6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80040aa:	4917      	ldr	r1, [pc, #92]	; (8004108 <getNextList+0x1bc>)
 80040ac:	4613      	mov	r3, r2
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	4413      	add	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	440b      	add	r3, r1
 80040b6:	781a      	ldrb	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	701a      	strb	r2, [r3, #0]
	Report(1, "[%s] up=%u ik=%d, fr=%.1f ret=%.1f band=%u\r\n", __func__, up, ik, fr, ret, *band);
 80040bc:	f897 800b 	ldrb.w	r8, [r7, #11]
 80040c0:	f997 6017 	ldrsb.w	r6, [r7, #23]
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f7fc fa3f 	bl	8000548 <__aeabi_f2d>
 80040ca:	4604      	mov	r4, r0
 80040cc:	460d      	mov	r5, r1
 80040ce:	6938      	ldr	r0, [r7, #16]
 80040d0:	f7fc fa3a 	bl	8000548 <__aeabi_f2d>
 80040d4:	4602      	mov	r2, r0
 80040d6:	460b      	mov	r3, r1
 80040d8:	6879      	ldr	r1, [r7, #4]
 80040da:	7809      	ldrb	r1, [r1, #0]
 80040dc:	9106      	str	r1, [sp, #24]
 80040de:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80040e2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80040e6:	9600      	str	r6, [sp, #0]
 80040e8:	4643      	mov	r3, r8
 80040ea:	4a08      	ldr	r2, [pc, #32]	; (800410c <getNextList+0x1c0>)
 80040ec:	4908      	ldr	r1, [pc, #32]	; (8004110 <getNextList+0x1c4>)
 80040ee:	2001      	movs	r0, #1
 80040f0:	f000 f9ce 	bl	8004490 <Report>

	return ret;
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	ee07 3a90 	vmov	s15, r3
}
 80040fa:	eeb0 0a67 	vmov.f32	s0, s15
 80040fe:	3718      	adds	r7, #24
 8004100:	46bd      	mov	sp, r7
 8004102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004106:	bf00      	nop
 8004108:	20002da0 	.word	0x20002da0
 800410c:	080147cc 	.word	0x080147cc
 8004110:	08013800 	.word	0x08013800

08004114 <showLine>:
//-------------------------------------------------------------------------------------------
void showLine(char *msg, uint16_t lin, int *last_len, bool update)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b08a      	sub	sp, #40	; 0x28
 8004118:	af02      	add	r7, sp, #8
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	607a      	str	r2, [r7, #4]
 800411e:	461a      	mov	r2, r3
 8004120:	460b      	mov	r3, r1
 8004122:	817b      	strh	r3, [r7, #10]
 8004124:	4613      	mov	r3, r2
 8004126:	727b      	strb	r3, [r7, #9]
int il = strlen(msg);
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f7fc f851 	bl	80001d0 <strlen>
 800412e:	4603      	mov	r3, r0
 8004130:	617b      	str	r3, [r7, #20]
int xf = ( (SCREEN_WIDTH - (lfnt->FontWidth * il) ) >> 1);// & 0x7f;
 8004132:	4b2e      	ldr	r3, [pc, #184]	; (80041ec <showLine+0xd8>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	461a      	mov	r2, r3
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	fb02 f303 	mul.w	r3, r2, r3
 8004140:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8004144:	105b      	asrs	r3, r3, #1
 8004146:	61fb      	str	r3, [r7, #28]
bool yes = false;
 8004148:	2300      	movs	r3, #0
 800414a:	76fb      	strb	r3, [r7, #27]

	if (*last_len > il) {
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	429a      	cmp	r2, r3
 8004154:	da0d      	bge.n	8004172 <showLine+0x5e>
		ST7565_DrawFilledRectangle(2, lin, SCREEN_WIDTH - 4, lfnt->FontHeight, PIX_OFF);
 8004156:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800415a:	4b24      	ldr	r3, [pc, #144]	; (80041ec <showLine+0xd8>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	785b      	ldrb	r3, [r3, #1]
 8004160:	b21b      	sxth	r3, r3
 8004162:	2200      	movs	r2, #0
 8004164:	9200      	str	r2, [sp, #0]
 8004166:	227c      	movs	r2, #124	; 0x7c
 8004168:	2002      	movs	r0, #2
 800416a:	f7fd fd58 	bl	8001c1e <ST7565_DrawFilledRectangle>
		yes = true;
 800416e:	2301      	movs	r3, #1
 8004170:	76fb      	strb	r3, [r7, #27]
	}
	*last_len = il;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	601a      	str	r2, [r3, #0]
	if (*msg > 0x7f) {
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	b25b      	sxtb	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	da03      	bge.n	800418a <showLine+0x76>
		xf += il;
 8004182:	69fa      	ldr	r2, [r7, #28]
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	4413      	add	r3, r2
 8004188:	61fb      	str	r3, [r7, #28]
	}
	if (!yes) ST7565_DrawFilledRectangle(2, lin, SCREEN_WIDTH - 4, lfnt->FontHeight, PIX_OFF);
 800418a:	7efb      	ldrb	r3, [r7, #27]
 800418c:	f083 0301 	eor.w	r3, r3, #1
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00b      	beq.n	80041ae <showLine+0x9a>
 8004196:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800419a:	4b14      	ldr	r3, [pc, #80]	; (80041ec <showLine+0xd8>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	785b      	ldrb	r3, [r3, #1]
 80041a0:	b21b      	sxth	r3, r3
 80041a2:	2200      	movs	r2, #0
 80041a4:	9200      	str	r2, [sp, #0]
 80041a6:	227c      	movs	r2, #124	; 0x7c
 80041a8:	2002      	movs	r0, #2
 80041aa:	f7fd fd38 	bl	8001c1e <ST7565_DrawFilledRectangle>

	if ((!xf) || (xf > (SCREEN_WIDTH - 4))) xf = 1;
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d002      	beq.n	80041ba <showLine+0xa6>
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	2b7c      	cmp	r3, #124	; 0x7c
 80041b8:	dd01      	ble.n	80041be <showLine+0xaa>
 80041ba:	2301      	movs	r3, #1
 80041bc:	61fb      	str	r3, [r7, #28]
	ST7565_Print(xf, lin, msg, lfnt, 1, PIX_ON);
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	b218      	sxth	r0, r3
 80041c2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80041c6:	4b09      	ldr	r3, [pc, #36]	; (80041ec <showLine+0xd8>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2201      	movs	r2, #1
 80041cc:	9201      	str	r2, [sp, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	9200      	str	r2, [sp, #0]
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	f7fd faca 	bl	800176c <ST7565_Print>
	if (update) ST7565_Update();
 80041d8:	7a7b      	ldrb	r3, [r7, #9]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <showLine+0xce>
 80041de:	f7fd f915 	bl	800140c <ST7565_Update>
}
 80041e2:	bf00      	nop
 80041e4:	3720      	adds	r7, #32
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	20002d88 	.word	0x20002d88

080041f0 <errLedOn>:
#endif
//-------------------------------------------------------------------------------------------
void errLedOn(bool on)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	4603      	mov	r3, r0
 80041f8:	71fb      	strb	r3, [r7, #7]
	if (on)
 80041fa:	79fb      	ldrb	r3, [r7, #7]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d005      	beq.n	800420c <errLedOn+0x1c>
		HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_SET);//LED ON
 8004200:	2201      	movs	r2, #1
 8004202:	2108      	movs	r1, #8
 8004204:	4806      	ldr	r0, [pc, #24]	; (8004220 <errLedOn+0x30>)
 8004206:	f003 fb79 	bl	80078fc <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_RESET);//LED OFF
}
 800420a:	e004      	b.n	8004216 <errLedOn+0x26>
		HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_RESET);//LED OFF
 800420c:	2200      	movs	r2, #0
 800420e:	2108      	movs	r1, #8
 8004210:	4803      	ldr	r0, [pc, #12]	; (8004220 <errLedOn+0x30>)
 8004212:	f003 fb73 	bl	80078fc <HAL_GPIO_WritePin>
}
 8004216:	bf00      	nop
 8004218:	3708      	adds	r7, #8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	48000800 	.word	0x48000800

08004224 <get_secCounter>:
//------------------------------------------------------------------------------------
uint32_t get_secCounter()
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
	return secCounter;
 8004228:	4b03      	ldr	r3, [pc, #12]	; (8004238 <get_secCounter+0x14>)
 800422a:	681b      	ldr	r3, [r3, #0]
}
 800422c:	4618      	mov	r0, r3
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	20001940 	.word	0x20001940

0800423c <toUppers>:
{
	return (get_msCounter() >= hs ? true : false);
}
//------------------------------------------------------------------------------------------
void toUppers(char *st)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
int i;

    for (i = 0; i < strlen(st); i++) *(st + i) = toupper(*(st + i));
 8004244:	2300      	movs	r3, #0
 8004246:	60fb      	str	r3, [r7, #12]
 8004248:	e019      	b.n	800427e <toUppers+0x42>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	4413      	add	r3, r2
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	72fb      	strb	r3, [r7, #11]
 8004254:	7afb      	ldrb	r3, [r7, #11]
 8004256:	3301      	adds	r3, #1
 8004258:	4a0f      	ldr	r2, [pc, #60]	; (8004298 <toUppers+0x5c>)
 800425a:	4413      	add	r3, r2
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	f003 0303 	and.w	r3, r3, #3
 8004262:	2b02      	cmp	r3, #2
 8004264:	d102      	bne.n	800426c <toUppers+0x30>
 8004266:	7afb      	ldrb	r3, [r7, #11]
 8004268:	3b20      	subs	r3, #32
 800426a:	e000      	b.n	800426e <toUppers+0x32>
 800426c:	7afb      	ldrb	r3, [r7, #11]
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	6879      	ldr	r1, [r7, #4]
 8004272:	440a      	add	r2, r1
 8004274:	b2db      	uxtb	r3, r3
 8004276:	7013      	strb	r3, [r2, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	3301      	adds	r3, #1
 800427c:	60fb      	str	r3, [r7, #12]
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7fb ffa6 	bl	80001d0 <strlen>
 8004284:	4602      	mov	r2, r0
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	429a      	cmp	r2, r3
 800428a:	d8de      	bhi.n	800424a <toUppers+0xe>
}
 800428c:	bf00      	nop
 800428e:	bf00      	nop
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	0801484c 	.word	0x0801484c

0800429c <set_Date>:
//------------------------------------------------------------------------------------------
void set_Date(uint32_t usec)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b094      	sub	sp, #80	; 0x50
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
struct tm ts;
time_t ep = (time_t)usec;
 80042a4:	6879      	ldr	r1, [r7, #4]
 80042a6:	2000      	movs	r0, #0
 80042a8:	460a      	mov	r2, r1
 80042aa:	4603      	mov	r3, r0
 80042ac:	e9c7 2308 	strd	r2, r3, [r7, #32]

	gmtime_r(&ep, &ts);
 80042b0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80042b4:	f107 0320 	add.w	r3, r7, #32
 80042b8:	4611      	mov	r1, r2
 80042ba:	4618      	mov	r0, r3
 80042bc:	f00a fbe0 	bl	800ea80 <gmtime_r>

	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	sDate.WeekDay = ts.tm_wday;
 80042c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	723b      	strb	r3, [r7, #8]
	sDate.Month   = ts.tm_mon + 1;
 80042c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	3301      	adds	r3, #1
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	727b      	strb	r3, [r7, #9]
	sDate.Date    = ts.tm_mday;
 80042d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	72bb      	strb	r3, [r7, #10]
	sDate.Year    = ts.tm_year;
 80042d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	72fb      	strb	r3, [r7, #11]
	sTime.Hours   = ts.tm_hour + tZone;
 80042dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042de:	b2da      	uxtb	r2, r3
 80042e0:	4b1a      	ldr	r3, [pc, #104]	; (800434c <set_Date+0xb0>)
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	4413      	add	r3, r2
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = ts.tm_min;
 80042ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = ts.tm_sec;
 80042f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	73bb      	strb	r3, [r7, #14]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 80042f6:	f107 030c 	add.w	r3, r7, #12
 80042fa:	2200      	movs	r2, #0
 80042fc:	4619      	mov	r1, r3
 80042fe:	4814      	ldr	r0, [pc, #80]	; (8004350 <set_Date+0xb4>)
 8004300:	f006 fb5b 	bl	800a9ba <HAL_RTC_SetTime>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d007      	beq.n	800431a <set_Date+0x7e>
 800430a:	4b12      	ldr	r3, [pc, #72]	; (8004354 <set_Date+0xb8>)
 800430c:	881b      	ldrh	r3, [r3, #0]
 800430e:	f043 0308 	orr.w	r3, r3, #8
 8004312:	b29a      	uxth	r2, r3
 8004314:	4b0f      	ldr	r3, [pc, #60]	; (8004354 <set_Date+0xb8>)
 8004316:	801a      	strh	r2, [r3, #0]
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
		else {
			setDate = true;
		}
	}
}
 8004318:	e014      	b.n	8004344 <set_Date+0xa8>
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 800431a:	f107 0308 	add.w	r3, r7, #8
 800431e:	2200      	movs	r2, #0
 8004320:	4619      	mov	r1, r3
 8004322:	480b      	ldr	r0, [pc, #44]	; (8004350 <set_Date+0xb4>)
 8004324:	f006 fc42 	bl	800abac <HAL_RTC_SetDate>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d007      	beq.n	800433e <set_Date+0xa2>
 800432e:	4b09      	ldr	r3, [pc, #36]	; (8004354 <set_Date+0xb8>)
 8004330:	881b      	ldrh	r3, [r3, #0]
 8004332:	f043 0308 	orr.w	r3, r3, #8
 8004336:	b29a      	uxth	r2, r3
 8004338:	4b06      	ldr	r3, [pc, #24]	; (8004354 <set_Date+0xb8>)
 800433a:	801a      	strh	r2, [r3, #0]
}
 800433c:	e002      	b.n	8004344 <set_Date+0xa8>
			setDate = true;
 800433e:	4b06      	ldr	r3, [pc, #24]	; (8004358 <set_Date+0xbc>)
 8004340:	2201      	movs	r2, #1
 8004342:	701a      	strb	r2, [r3, #0]
}
 8004344:	bf00      	nop
 8004346:	3750      	adds	r7, #80	; 0x50
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	20001d56 	.word	0x20001d56
 8004350:	20000914 	.word	0x20000914
 8004354:	2000193c 	.word	0x2000193c
 8004358:	20001d55 	.word	0x20001d55

0800435c <sec2str>:

	return ep;
}
//------------------------------------------------------------------------------------------
int sec2str(char *st)
{
 800435c:	b590      	push	{r4, r7, lr}
 800435e:	b093      	sub	sp, #76	; 0x4c
 8004360:	af04      	add	r7, sp, #16
 8004362:	6078      	str	r0, [r7, #4]
int ret = 0;
 8004364:	2300      	movs	r3, #0
 8004366:	637b      	str	r3, [r7, #52]	; 0x34

	if (!setDate) {
 8004368:	4b40      	ldr	r3, [pc, #256]	; (800446c <sec2str+0x110>)
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	f083 0301 	eor.w	r3, r3, #1
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d040      	beq.n	80043f8 <sec2str+0x9c>
		uint32_t sec = get_secCounter();
 8004376:	f7ff ff55 	bl	8004224 <get_secCounter>
 800437a:	6338      	str	r0, [r7, #48]	; 0x30

		uint32_t day = sec / (60 * 60 * 24);
 800437c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437e:	4a3c      	ldr	r2, [pc, #240]	; (8004470 <sec2str+0x114>)
 8004380:	fba2 2303 	umull	r2, r3, r2, r3
 8004384:	0c1b      	lsrs	r3, r3, #16
 8004386:	62fb      	str	r3, [r7, #44]	; 0x2c
		sec %= (60 * 60 * 24);
 8004388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438a:	4a39      	ldr	r2, [pc, #228]	; (8004470 <sec2str+0x114>)
 800438c:	fba2 1203 	umull	r1, r2, r2, r3
 8004390:	0c12      	lsrs	r2, r2, #16
 8004392:	4938      	ldr	r1, [pc, #224]	; (8004474 <sec2str+0x118>)
 8004394:	fb01 f202 	mul.w	r2, r1, r2
 8004398:	1a9b      	subs	r3, r3, r2
 800439a:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t hour = sec / (60 * 60);
 800439c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439e:	4a36      	ldr	r2, [pc, #216]	; (8004478 <sec2str+0x11c>)
 80043a0:	fba2 2303 	umull	r2, r3, r2, r3
 80043a4:	0adb      	lsrs	r3, r3, #11
 80043a6:	62bb      	str	r3, [r7, #40]	; 0x28
		sec %= (60 * 60);
 80043a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043aa:	4a33      	ldr	r2, [pc, #204]	; (8004478 <sec2str+0x11c>)
 80043ac:	fba2 1203 	umull	r1, r2, r2, r3
 80043b0:	0ad2      	lsrs	r2, r2, #11
 80043b2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80043b6:	fb01 f202 	mul.w	r2, r1, r2
 80043ba:	1a9b      	subs	r3, r3, r2
 80043bc:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t min = sec / (60);
 80043be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c0:	4a2e      	ldr	r2, [pc, #184]	; (800447c <sec2str+0x120>)
 80043c2:	fba2 2303 	umull	r2, r3, r2, r3
 80043c6:	095b      	lsrs	r3, r3, #5
 80043c8:	627b      	str	r3, [r7, #36]	; 0x24
		sec %= 60;
 80043ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043cc:	4b2b      	ldr	r3, [pc, #172]	; (800447c <sec2str+0x120>)
 80043ce:	fba3 1302 	umull	r1, r3, r3, r2
 80043d2:	0959      	lsrs	r1, r3, #5
 80043d4:	460b      	mov	r3, r1
 80043d6:	011b      	lsls	r3, r3, #4
 80043d8:	1a5b      	subs	r3, r3, r1
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	633b      	str	r3, [r7, #48]	; 0x30

		ret = sprintf(st, "%lu.%02lu:%02lu:%02lu", day, hour, min, sec);
 80043e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e2:	9301      	str	r3, [sp, #4]
 80043e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043ec:	4924      	ldr	r1, [pc, #144]	; (8004480 <sec2str+0x124>)
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f00b f9ac 	bl	800f74c <siprintf>
 80043f4:	6378      	str	r0, [r7, #52]	; 0x34
 80043f6:	e034      	b.n	8004462 <sec2str+0x106>
	} else {
		RTC_TimeTypeDef sTime;
		RTC_DateTypeDef sDate;
		if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN)) devError |= devRTC;
 80043f8:	f107 030c 	add.w	r3, r7, #12
 80043fc:	2200      	movs	r2, #0
 80043fe:	4619      	mov	r1, r3
 8004400:	4820      	ldr	r0, [pc, #128]	; (8004484 <sec2str+0x128>)
 8004402:	f006 fc5a 	bl	800acba <HAL_RTC_GetDate>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d007      	beq.n	800441c <sec2str+0xc0>
 800440c:	4b1e      	ldr	r3, [pc, #120]	; (8004488 <sec2str+0x12c>)
 800440e:	881b      	ldrh	r3, [r3, #0]
 8004410:	f043 0308 	orr.w	r3, r3, #8
 8004414:	b29a      	uxth	r2, r3
 8004416:	4b1c      	ldr	r3, [pc, #112]	; (8004488 <sec2str+0x12c>)
 8004418:	801a      	strh	r2, [r3, #0]
 800441a:	e022      	b.n	8004462 <sec2str+0x106>
		else {
			if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN)) devError |= devRTC;
 800441c:	f107 0310 	add.w	r3, r7, #16
 8004420:	2200      	movs	r2, #0
 8004422:	4619      	mov	r1, r3
 8004424:	4817      	ldr	r0, [pc, #92]	; (8004484 <sec2str+0x128>)
 8004426:	f006 fb65 	bl	800aaf4 <HAL_RTC_GetTime>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d007      	beq.n	8004440 <sec2str+0xe4>
 8004430:	4b15      	ldr	r3, [pc, #84]	; (8004488 <sec2str+0x12c>)
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	f043 0308 	orr.w	r3, r3, #8
 8004438:	b29a      	uxth	r2, r3
 800443a:	4b13      	ldr	r3, [pc, #76]	; (8004488 <sec2str+0x12c>)
 800443c:	801a      	strh	r2, [r3, #0]
 800443e:	e010      	b.n	8004462 <sec2str+0x106>
			else {
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
								sDate.Date, sDate.Month,
 8004440:	7bbb      	ldrb	r3, [r7, #14]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 8004442:	4618      	mov	r0, r3
								sDate.Date, sDate.Month,
 8004444:	7b7b      	ldrb	r3, [r7, #13]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 8004446:	461c      	mov	r4, r3
								sTime.Hours, sTime.Minutes, sTime.Seconds);
 8004448:	7c3b      	ldrb	r3, [r7, #16]
 800444a:	7c7a      	ldrb	r2, [r7, #17]
 800444c:	7cb9      	ldrb	r1, [r7, #18]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 800444e:	9102      	str	r1, [sp, #8]
 8004450:	9201      	str	r2, [sp, #4]
 8004452:	9300      	str	r3, [sp, #0]
 8004454:	4623      	mov	r3, r4
 8004456:	4602      	mov	r2, r0
 8004458:	490c      	ldr	r1, [pc, #48]	; (800448c <sec2str+0x130>)
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f00b f976 	bl	800f74c <siprintf>
 8004460:	6378      	str	r0, [r7, #52]	; 0x34
			}
		}
	}

	return ret;
 8004462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004464:	4618      	mov	r0, r3
 8004466:	373c      	adds	r7, #60	; 0x3c
 8004468:	46bd      	mov	sp, r7
 800446a:	bd90      	pop	{r4, r7, pc}
 800446c:	20001d55 	.word	0x20001d55
 8004470:	c22e4507 	.word	0xc22e4507
 8004474:	00015180 	.word	0x00015180
 8004478:	91a2b3c5 	.word	0x91a2b3c5
 800447c:	88888889 	.word	0x88888889
 8004480:	08013830 	.word	0x08013830
 8004484:	20000914 	.word	0x20000914
 8004488:	2000193c 	.word	0x2000193c
 800448c:	08013848 	.word	0x08013848

08004490 <Report>:
//--------------------------------------------------------------------------------------------
void Report(const uint8_t addTime, const char *fmt, ...)
{
 8004490:	b40e      	push	{r1, r2, r3}
 8004492:	b590      	push	{r4, r7, lr}
 8004494:	b088      	sub	sp, #32
 8004496:	af00      	add	r7, sp, #0
 8004498:	4603      	mov	r3, r0
 800449a:	71fb      	strb	r3, [r7, #7]
size_t len = MAX_UART_BUF;
 800449c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044a0:	617b      	str	r3, [r7, #20]
char *buf = &cmdBuf[0];
 80044a2:	4b32      	ldr	r3, [pc, #200]	; (800456c <Report+0xdc>)
 80044a4:	613b      	str	r3, [r7, #16]
uint32_t cnt = 16;
 80044a6:	2310      	movs	r3, #16
 80044a8:	61fb      	str	r3, [r7, #28]
uint32_t stim = HAL_GetTick();
 80044aa:	f002 fc6d 	bl	8006d88 <HAL_GetTick>
 80044ae:	60f8      	str	r0, [r7, #12]

	while (!uartRdy && cnt) {
 80044b0:	e008      	b.n	80044c4 <Report+0x34>
		if (HAL_GetTick() - stim) cnt--;
 80044b2:	f002 fc69 	bl	8006d88 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d002      	beq.n	80044c4 <Report+0x34>
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	3b01      	subs	r3, #1
 80044c2:	61fb      	str	r3, [r7, #28]
	while (!uartRdy && cnt) {
 80044c4:	4b2a      	ldr	r3, [pc, #168]	; (8004570 <Report+0xe0>)
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d102      	bne.n	80044d2 <Report+0x42>
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1ef      	bne.n	80044b2 <Report+0x22>
	}

	//if (buf) {
		*buf = '\0';
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	2200      	movs	r2, #0
 80044d6:	701a      	strb	r2, [r3, #0]
		int dl = 0;
 80044d8:	2300      	movs	r3, #0
 80044da:	61bb      	str	r3, [r7, #24]
		if (addTime) {
 80044dc:	79fb      	ldrb	r3, [r7, #7]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d010      	beq.n	8004504 <Report+0x74>
			dl = sec2str(buf);
 80044e2:	6938      	ldr	r0, [r7, #16]
 80044e4:	f7ff ff3a 	bl	800435c <sec2str>
 80044e8:	61b8      	str	r0, [r7, #24]
			strcat(buf, " | ");
 80044ea:	6938      	ldr	r0, [r7, #16]
 80044ec:	f7fb fe70 	bl	80001d0 <strlen>
 80044f0:	4603      	mov	r3, r0
 80044f2:	461a      	mov	r2, r3
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	4413      	add	r3, r2
 80044f8:	4a1e      	ldr	r2, [pc, #120]	; (8004574 <Report+0xe4>)
 80044fa:	6810      	ldr	r0, [r2, #0]
 80044fc:	6018      	str	r0, [r3, #0]
			dl += 3;
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	3303      	adds	r3, #3
 8004502:	61bb      	str	r3, [r7, #24]
		}

		va_list args;
		va_start(args, fmt);
 8004504:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004508:	60bb      	str	r3, [r7, #8]
		vsnprintf(buf + dl, len - dl, fmt, args);
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	18d0      	adds	r0, r2, r3
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	1ad1      	subs	r1, r2, r3
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800451a:	f00c f857 	bl	80105cc <vsniprintf>

		uartRdy = false;
 800451e:	4b14      	ldr	r3, [pc, #80]	; (8004570 <Report+0xe0>)
 8004520:	2200      	movs	r2, #0
 8004522:	701a      	strb	r2, [r3, #0]
		if (HAL_UART_Transmit_DMA(cmdPort, (uint8_t *)buf, strlen(buf)) != HAL_OK) devError |= devUART;
 8004524:	4b14      	ldr	r3, [pc, #80]	; (8004578 <Report+0xe8>)
 8004526:	681c      	ldr	r4, [r3, #0]
 8004528:	6938      	ldr	r0, [r7, #16]
 800452a:	f7fb fe51 	bl	80001d0 <strlen>
 800452e:	4603      	mov	r3, r0
 8004530:	b29b      	uxth	r3, r3
 8004532:	461a      	mov	r2, r3
 8004534:	6939      	ldr	r1, [r7, #16]
 8004536:	4620      	mov	r0, r4
 8004538:	f008 ff02 	bl	800d340 <HAL_UART_Transmit_DMA>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d006      	beq.n	8004550 <Report+0xc0>
 8004542:	4b0e      	ldr	r3, [pc, #56]	; (800457c <Report+0xec>)
 8004544:	881b      	ldrh	r3, [r3, #0]
 8004546:	f043 0302 	orr.w	r3, r3, #2
 800454a:	b29a      	uxth	r2, r3
 800454c:	4b0b      	ldr	r3, [pc, #44]	; (800457c <Report+0xec>)
 800454e:	801a      	strh	r2, [r3, #0]
		while (!uartRdy) {} //HAL_Delay(1)
 8004550:	bf00      	nop
 8004552:	4b07      	ldr	r3, [pc, #28]	; (8004570 <Report+0xe0>)
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d0fb      	beq.n	8004552 <Report+0xc2>
	//	free(buf);
	//} else {
	//	devError |= devMEM;
	//}

}
 800455a:	bf00      	nop
 800455c:	bf00      	nop
 800455e:	3720      	adds	r7, #32
 8004560:	46bd      	mov	sp, r7
 8004562:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004566:	b003      	add	sp, #12
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	2000113c 	.word	0x2000113c
 8004570:	20000014 	.word	0x20000014
 8004574:	08013864 	.word	0x08013864
 8004578:	20000010 	.word	0x20000010
 800457c:	2000193c 	.word	0x2000193c

08004580 <HAL_TIM_PeriodElapsedCallback>:



//------------------------------------------------------------------------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004580:	b5b0      	push	{r4, r5, r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) {
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a15      	ldr	r2, [pc, #84]	; (80045e4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d124      	bne.n	80045dc <HAL_TIM_PeriodElapsedCallback+0x5c>
		msCounter++;//inc_msCounter();
 8004592:	4b15      	ldr	r3, [pc, #84]	; (80045e8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8004594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004598:	1c54      	adds	r4, r2, #1
 800459a:	f143 0500 	adc.w	r5, r3, #0
 800459e:	4b12      	ldr	r3, [pc, #72]	; (80045e8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80045a0:	e9c3 4500 	strd	r4, r5, [r3]
		if (!(msCounter % _1s)) {// 1 seconda
 80045a4:	4b10      	ldr	r3, [pc, #64]	; (80045e8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80045a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80045aa:	f04f 0264 	mov.w	r2, #100	; 0x64
 80045ae:	f04f 0300 	mov.w	r3, #0
 80045b2:	f7fc fbb9 	bl	8000d28 <__aeabi_uldivmod>
 80045b6:	4313      	orrs	r3, r2
 80045b8:	d110      	bne.n	80045dc <HAL_TIM_PeriodElapsedCallback+0x5c>
			secCounter++;
 80045ba:	4b0c      	ldr	r3, [pc, #48]	; (80045ec <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	3301      	adds	r3, #1
 80045c0:	4a0a      	ldr	r2, [pc, #40]	; (80045ec <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80045c2:	6013      	str	r3, [r2, #0]
		  	HAL_GPIO_TogglePin(TIK_LED_GPIO_Port, TIK_LED_Pin);
 80045c4:	2101      	movs	r1, #1
 80045c6:	480a      	ldr	r0, [pc, #40]	; (80045f0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80045c8:	f003 f9b0 	bl	800792c <HAL_GPIO_TogglePin>
#ifdef SET_DISPLAY
		  	if (startSec) putEvt(evt_Sec);
 80045cc:	4b09      	ldr	r3, [pc, #36]	; (80045f4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d002      	beq.n	80045dc <HAL_TIM_PeriodElapsedCallback+0x5c>
 80045d6:	2008      	movs	r0, #8
 80045d8:	f7ff fbc0 	bl	8003d5c <putEvt>
#endif
	  	}
	}
}
 80045dc:	bf00      	nop
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bdb0      	pop	{r4, r5, r7, pc}
 80045e4:	40000800 	.word	0x40000800
 80045e8:	20001948 	.word	0x20001948
 80045ec:	20001940 	.word	0x20001940
 80045f0:	48000800 	.word	0x48000800
 80045f4:	20002d84 	.word	0x20002d84

080045f8 <HAL_UART_TxCpltCallback>:
//--------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a0a      	ldr	r2, [pc, #40]	; (8004630 <HAL_UART_TxCpltCallback+0x38>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d103      	bne.n	8004612 <HAL_UART_TxCpltCallback+0x1a>
		uartRdy = 1;
 800460a:	4b0a      	ldr	r3, [pc, #40]	; (8004634 <HAL_UART_TxCpltCallback+0x3c>)
 800460c:	2201      	movs	r2, #1
 800460e:	701a      	strb	r2, [r3, #0]
	else
	if (huart->Instance == UART4) {
		bleRdy = 1;
	}
#endif
}
 8004610:	e007      	b.n	8004622 <HAL_UART_TxCpltCallback+0x2a>
	if (huart->Instance == UART4) {
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a08      	ldr	r2, [pc, #32]	; (8004638 <HAL_UART_TxCpltCallback+0x40>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d102      	bne.n	8004622 <HAL_UART_TxCpltCallback+0x2a>
		bleRdy = 1;
 800461c:	4b07      	ldr	r3, [pc, #28]	; (800463c <HAL_UART_TxCpltCallback+0x44>)
 800461e:	2201      	movs	r2, #1
 8004620:	701a      	strb	r2, [r3, #0]
}
 8004622:	bf00      	nop
 8004624:	370c      	adds	r7, #12
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	40004400 	.word	0x40004400
 8004634:	20000014 	.word	0x20000014
 8004638:	40004c00 	.word	0x40004c00
 800463c:	200001fc 	.word	0x200001fc

08004640 <HAL_UART_ErrorCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a0e      	ldr	r2, [pc, #56]	; (8004688 <HAL_UART_ErrorCallback+0x48>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d107      	bne.n	8004662 <HAL_UART_ErrorCallback+0x22>
		devError |= devUART;
 8004652:	4b0e      	ldr	r3, [pc, #56]	; (800468c <HAL_UART_ErrorCallback+0x4c>)
 8004654:	881b      	ldrh	r3, [r3, #0]
 8004656:	f043 0302 	orr.w	r3, r3, #2
 800465a:	b29a      	uxth	r2, r3
 800465c:	4b0b      	ldr	r3, [pc, #44]	; (800468c <HAL_UART_ErrorCallback+0x4c>)
 800465e:	801a      	strh	r2, [r3, #0]
	else
	if (huart->Instance == UART4) {
		devError |= devBLE;
	}
#endif
}
 8004660:	e00b      	b.n	800467a <HAL_UART_ErrorCallback+0x3a>
	if (huart->Instance == UART4) {
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a0a      	ldr	r2, [pc, #40]	; (8004690 <HAL_UART_ErrorCallback+0x50>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d106      	bne.n	800467a <HAL_UART_ErrorCallback+0x3a>
		devError |= devBLE;
 800466c:	4b07      	ldr	r3, [pc, #28]	; (800468c <HAL_UART_ErrorCallback+0x4c>)
 800466e:	881b      	ldrh	r3, [r3, #0]
 8004670:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004674:	b29a      	uxth	r2, r3
 8004676:	4b05      	ldr	r3, [pc, #20]	; (800468c <HAL_UART_ErrorCallback+0x4c>)
 8004678:	801a      	strh	r2, [r3, #0]
}
 800467a:	bf00      	nop
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	40004400 	.word	0x40004400
 800468c:	2000193c 	.word	0x2000193c
 8004690:	40004c00 	.word	0x40004c00

08004694 <HAL_UART_RxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004694:	b590      	push	{r4, r7, lr}
 8004696:	b091      	sub	sp, #68	; 0x44
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
#ifdef SET_BLE
	if (huart->Instance == UART4) {
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a86      	ldr	r2, [pc, #536]	; (80048bc <HAL_UART_RxCpltCallback+0x228>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	f040 8085 	bne.w	80047b2 <HAL_UART_RxCpltCallback+0x11e>
		if ((rxbByte > 0x0D) && (rxbByte < 0x80)) {
 80046a8:	4b85      	ldr	r3, [pc, #532]	; (80048c0 <HAL_UART_RxCpltCallback+0x22c>)
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	2b0d      	cmp	r3, #13
 80046ae:	d91a      	bls.n	80046e6 <HAL_UART_RxCpltCallback+0x52>
 80046b0:	4b83      	ldr	r3, [pc, #524]	; (80048c0 <HAL_UART_RxCpltCallback+0x22c>)
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	b25b      	sxtb	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	db15      	blt.n	80046e6 <HAL_UART_RxCpltCallback+0x52>
			if (rxbByte >= 0x20) adone = 1;
 80046ba:	4b81      	ldr	r3, [pc, #516]	; (80048c0 <HAL_UART_RxCpltCallback+0x22c>)
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	2b1f      	cmp	r3, #31
 80046c0:	d902      	bls.n	80046c8 <HAL_UART_RxCpltCallback+0x34>
 80046c2:	4b80      	ldr	r3, [pc, #512]	; (80048c4 <HAL_UART_RxCpltCallback+0x230>)
 80046c4:	2201      	movs	r2, #1
 80046c6:	701a      	strb	r2, [r3, #0]
			if (adone) rxbBuf[rxbInd++] = (char)rxbByte;
 80046c8:	4b7e      	ldr	r3, [pc, #504]	; (80048c4 <HAL_UART_RxCpltCallback+0x230>)
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00a      	beq.n	80046e6 <HAL_UART_RxCpltCallback+0x52>
 80046d0:	4b7d      	ldr	r3, [pc, #500]	; (80048c8 <HAL_UART_RxCpltCallback+0x234>)
 80046d2:	881b      	ldrh	r3, [r3, #0]
 80046d4:	1c5a      	adds	r2, r3, #1
 80046d6:	b291      	uxth	r1, r2
 80046d8:	4a7b      	ldr	r2, [pc, #492]	; (80048c8 <HAL_UART_RxCpltCallback+0x234>)
 80046da:	8011      	strh	r1, [r2, #0]
 80046dc:	461a      	mov	r2, r3
 80046de:	4b78      	ldr	r3, [pc, #480]	; (80048c0 <HAL_UART_RxCpltCallback+0x22c>)
 80046e0:	7819      	ldrb	r1, [r3, #0]
 80046e2:	4b7a      	ldr	r3, [pc, #488]	; (80048cc <HAL_UART_RxCpltCallback+0x238>)
 80046e4:	5499      	strb	r1, [r3, r2]
		}
		if (adone) {
 80046e6:	4b77      	ldr	r3, [pc, #476]	; (80048c4 <HAL_UART_RxCpltCallback+0x230>)
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d050      	beq.n	8004790 <HAL_UART_RxCpltCallback+0xfc>
		//rxbBuf[rxbInd++] = (char)rxbByte;
			if (rxbByte == 0x0a) {// '\n'
 80046ee:	4b74      	ldr	r3, [pc, #464]	; (80048c0 <HAL_UART_RxCpltCallback+0x22c>)
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	2b0a      	cmp	r3, #10
 80046f4:	d14c      	bne.n	8004790 <HAL_UART_RxCpltCallback+0xfc>
				//rxbBuf[--rxbInd] = '\0';
				if (bleQueAckFlag) {
 80046f6:	4b76      	ldr	r3, [pc, #472]	; (80048d0 <HAL_UART_RxCpltCallback+0x23c>)
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d03c      	beq.n	8004778 <HAL_UART_RxCpltCallback+0xe4>
					int len = strlen(rxbBuf);
 80046fe:	4873      	ldr	r0, [pc, #460]	; (80048cc <HAL_UART_RxCpltCallback+0x238>)
 8004700:	f7fb fd66 	bl	80001d0 <strlen>
 8004704:	4603      	mov	r3, r0
 8004706:	60fb      	str	r3, [r7, #12]
					// Блок помещает в очередь ответов на команду очередное сообщение от модуля BLE
					char *from = (char *)calloc(1, len + 1);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	3301      	adds	r3, #1
 800470c:	4619      	mov	r1, r3
 800470e:	2001      	movs	r0, #1
 8004710:	f00a f9a8 	bl	800ea64 <calloc>
 8004714:	4603      	mov	r3, r0
 8004716:	60bb      	str	r3, [r7, #8]
					if (from) {
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d025      	beq.n	800476a <HAL_UART_RxCpltCallback+0xd6>
						memcpy(from, rxbBuf, len);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	461a      	mov	r2, r3
 8004722:	496a      	ldr	r1, [pc, #424]	; (80048cc <HAL_UART_RxCpltCallback+0x238>)
 8004724:	68b8      	ldr	r0, [r7, #8]
 8004726:	f00a fa8b 	bl	800ec40 <memcpy>
						if (putRECQ(from, &bleQueAck) < 0) {
 800472a:	496a      	ldr	r1, [pc, #424]	; (80048d4 <HAL_UART_RxCpltCallback+0x240>)
 800472c:	68b8      	ldr	r0, [r7, #8]
 800472e:	f7fd fbe2 	bl	8001ef6 <putRECQ>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	da0a      	bge.n	800474e <HAL_UART_RxCpltCallback+0xba>
							devError |= devQUE;
 8004738:	4b67      	ldr	r3, [pc, #412]	; (80048d8 <HAL_UART_RxCpltCallback+0x244>)
 800473a:	881b      	ldrh	r3, [r3, #0]
 800473c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004740:	b29a      	uxth	r2, r3
 8004742:	4b65      	ldr	r3, [pc, #404]	; (80048d8 <HAL_UART_RxCpltCallback+0x244>)
 8004744:	801a      	strh	r2, [r3, #0]
							free(from);
 8004746:	68b8      	ldr	r0, [r7, #8]
 8004748:	f00a fa72 	bl	800ec30 <free>
 800474c:	e014      	b.n	8004778 <HAL_UART_RxCpltCallback+0xe4>
						} else {
							if (devError & devQUE) devError &= ~devQUE;
 800474e:	4b62      	ldr	r3, [pc, #392]	; (80048d8 <HAL_UART_RxCpltCallback+0x244>)
 8004750:	881b      	ldrh	r3, [r3, #0]
 8004752:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00e      	beq.n	8004778 <HAL_UART_RxCpltCallback+0xe4>
 800475a:	4b5f      	ldr	r3, [pc, #380]	; (80048d8 <HAL_UART_RxCpltCallback+0x244>)
 800475c:	881b      	ldrh	r3, [r3, #0]
 800475e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004762:	b29a      	uxth	r2, r3
 8004764:	4b5c      	ldr	r3, [pc, #368]	; (80048d8 <HAL_UART_RxCpltCallback+0x244>)
 8004766:	801a      	strh	r2, [r3, #0]
 8004768:	e006      	b.n	8004778 <HAL_UART_RxCpltCallback+0xe4>
						}
					} else {
						devError |= devMEM;
 800476a:	4b5b      	ldr	r3, [pc, #364]	; (80048d8 <HAL_UART_RxCpltCallback+0x244>)
 800476c:	881b      	ldrh	r3, [r3, #0]
 800476e:	f043 0304 	orr.w	r3, r3, #4
 8004772:	b29a      	uxth	r2, r3
 8004774:	4b58      	ldr	r3, [pc, #352]	; (80048d8 <HAL_UART_RxCpltCallback+0x244>)
 8004776:	801a      	strh	r2, [r3, #0]
					}
					//-----------------------------------------------------------------------------
				}
				rxbInd = 0;
 8004778:	4b53      	ldr	r3, [pc, #332]	; (80048c8 <HAL_UART_RxCpltCallback+0x234>)
 800477a:	2200      	movs	r2, #0
 800477c:	801a      	strh	r2, [r3, #0]
				adone = 0;
 800477e:	4b51      	ldr	r3, [pc, #324]	; (80048c4 <HAL_UART_RxCpltCallback+0x230>)
 8004780:	2200      	movs	r2, #0
 8004782:	701a      	strb	r2, [r3, #0]
				memset(rxbBuf, 0, sizeof(rxbBuf));
 8004784:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004788:	2100      	movs	r1, #0
 800478a:	4850      	ldr	r0, [pc, #320]	; (80048cc <HAL_UART_RxCpltCallback+0x238>)
 800478c:	f00a fa66 	bl	800ec5c <memset>
			}
		}
		//
		if (HAL_UART_Receive_IT(huart, &rxbByte, 1) != HAL_OK) devError |= devBLE;
 8004790:	2201      	movs	r2, #1
 8004792:	494b      	ldr	r1, [pc, #300]	; (80048c0 <HAL_UART_RxCpltCallback+0x22c>)
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f008 fd7d 	bl	800d294 <HAL_UART_Receive_IT>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	f000 82cb 	beq.w	8004d38 <HAL_UART_RxCpltCallback+0x6a4>
 80047a2:	4b4d      	ldr	r3, [pc, #308]	; (80048d8 <HAL_UART_RxCpltCallback+0x244>)
 80047a4:	881b      	ldrh	r3, [r3, #0]
 80047a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	4b4a      	ldr	r3, [pc, #296]	; (80048d8 <HAL_UART_RxCpltCallback+0x244>)
 80047ae:	801a      	strh	r2, [r3, #0]
			*rxBuf = '\0';
		}

		if (HAL_UART_Receive_IT(huart, &rxByte, 1) != HAL_OK) devError |= devUART;
	}
}
 80047b0:	e2c2      	b.n	8004d38 <HAL_UART_RxCpltCallback+0x6a4>
	if (huart->Instance == USART2) {
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a49      	ldr	r2, [pc, #292]	; (80048dc <HAL_UART_RxCpltCallback+0x248>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	f040 82bd 	bne.w	8004d38 <HAL_UART_RxCpltCallback+0x6a4>
		rxBuf[rxInd++] = (char)rxByte;
 80047be:	4b48      	ldr	r3, [pc, #288]	; (80048e0 <HAL_UART_RxCpltCallback+0x24c>)
 80047c0:	881b      	ldrh	r3, [r3, #0]
 80047c2:	1c5a      	adds	r2, r3, #1
 80047c4:	b291      	uxth	r1, r2
 80047c6:	4a46      	ldr	r2, [pc, #280]	; (80048e0 <HAL_UART_RxCpltCallback+0x24c>)
 80047c8:	8011      	strh	r1, [r2, #0]
 80047ca:	461a      	mov	r2, r3
 80047cc:	4b45      	ldr	r3, [pc, #276]	; (80048e4 <HAL_UART_RxCpltCallback+0x250>)
 80047ce:	7819      	ldrb	r1, [r3, #0]
 80047d0:	4b45      	ldr	r3, [pc, #276]	; (80048e8 <HAL_UART_RxCpltCallback+0x254>)
 80047d2:	5499      	strb	r1, [r3, r2]
		if (rxByte == 0x0a) {//end of line
 80047d4:	4b43      	ldr	r3, [pc, #268]	; (80048e4 <HAL_UART_RxCpltCallback+0x250>)
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	2b0a      	cmp	r3, #10
 80047da:	f040 829e 	bne.w	8004d1a <HAL_UART_RxCpltCallback+0x686>
			rxBuf[--rxInd] = '\0';
 80047de:	4b40      	ldr	r3, [pc, #256]	; (80048e0 <HAL_UART_RxCpltCallback+0x24c>)
 80047e0:	881b      	ldrh	r3, [r3, #0]
 80047e2:	3b01      	subs	r3, #1
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	4b3e      	ldr	r3, [pc, #248]	; (80048e0 <HAL_UART_RxCpltCallback+0x24c>)
 80047e8:	801a      	strh	r2, [r3, #0]
 80047ea:	4b3d      	ldr	r3, [pc, #244]	; (80048e0 <HAL_UART_RxCpltCallback+0x24c>)
 80047ec:	881b      	ldrh	r3, [r3, #0]
 80047ee:	461a      	mov	r2, r3
 80047f0:	4b3d      	ldr	r3, [pc, #244]	; (80048e8 <HAL_UART_RxCpltCallback+0x254>)
 80047f2:	2100      	movs	r1, #0
 80047f4:	5499      	strb	r1, [r3, r2]
			int i, ev = -1;
 80047f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047fa:	63bb      	str	r3, [r7, #56]	; 0x38
			if (strlen(rxBuf) > 2) {
 80047fc:	483a      	ldr	r0, [pc, #232]	; (80048e8 <HAL_UART_RxCpltCallback+0x254>)
 80047fe:	f7fb fce7 	bl	80001d0 <strlen>
 8004802:	4603      	mov	r3, r0
 8004804:	2b02      	cmp	r3, #2
 8004806:	f240 8282 	bls.w	8004d0e <HAL_UART_RxCpltCallback+0x67a>
				if ( (strstr(rxBuf, "at+")) || (strstr(rxBuf, "AT+")) ) {
 800480a:	4938      	ldr	r1, [pc, #224]	; (80048ec <HAL_UART_RxCpltCallback+0x258>)
 800480c:	4836      	ldr	r0, [pc, #216]	; (80048e8 <HAL_UART_RxCpltCallback+0x254>)
 800480e:	f00a ffde 	bl	800f7ce <strstr>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d106      	bne.n	8004826 <HAL_UART_RxCpltCallback+0x192>
 8004818:	4935      	ldr	r1, [pc, #212]	; (80048f0 <HAL_UART_RxCpltCallback+0x25c>)
 800481a:	4833      	ldr	r0, [pc, #204]	; (80048e8 <HAL_UART_RxCpltCallback+0x254>)
 800481c:	f00a ffd7 	bl	800f7ce <strstr>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d047      	beq.n	80048b6 <HAL_UART_RxCpltCallback+0x222>
					if (bleQueCmdFlag) {
 8004826:	4b33      	ldr	r3, [pc, #204]	; (80048f4 <HAL_UART_RxCpltCallback+0x260>)
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d03f      	beq.n	80048ae <HAL_UART_RxCpltCallback+0x21a>
						int len = strlen(rxBuf);
 800482e:	482e      	ldr	r0, [pc, #184]	; (80048e8 <HAL_UART_RxCpltCallback+0x254>)
 8004830:	f7fb fcce 	bl	80001d0 <strlen>
 8004834:	4603      	mov	r3, r0
 8004836:	617b      	str	r3, [r7, #20]
						char *to = (char *)calloc(1, len + 3);
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	3303      	adds	r3, #3
 800483c:	4619      	mov	r1, r3
 800483e:	2001      	movs	r0, #1
 8004840:	f00a f910 	bl	800ea64 <calloc>
 8004844:	4603      	mov	r3, r0
 8004846:	613b      	str	r3, [r7, #16]
						if (to) {
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d028      	beq.n	80048a0 <HAL_UART_RxCpltCallback+0x20c>
							memcpy(to, rxBuf, len);
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	461a      	mov	r2, r3
 8004852:	4925      	ldr	r1, [pc, #148]	; (80048e8 <HAL_UART_RxCpltCallback+0x254>)
 8004854:	6938      	ldr	r0, [r7, #16]
 8004856:	f00a f9f3 	bl	800ec40 <memcpy>
							toUppers(to);
 800485a:	6938      	ldr	r0, [r7, #16]
 800485c:	f7ff fcee 	bl	800423c <toUppers>
							if (putRECQ(to, &bleQueCmd) < 0) {
 8004860:	4925      	ldr	r1, [pc, #148]	; (80048f8 <HAL_UART_RxCpltCallback+0x264>)
 8004862:	6938      	ldr	r0, [r7, #16]
 8004864:	f7fd fb47 	bl	8001ef6 <putRECQ>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	da0a      	bge.n	8004884 <HAL_UART_RxCpltCallback+0x1f0>
								devError |= devQUE;
 800486e:	4b1a      	ldr	r3, [pc, #104]	; (80048d8 <HAL_UART_RxCpltCallback+0x244>)
 8004870:	881b      	ldrh	r3, [r3, #0]
 8004872:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004876:	b29a      	uxth	r2, r3
 8004878:	4b17      	ldr	r3, [pc, #92]	; (80048d8 <HAL_UART_RxCpltCallback+0x244>)
 800487a:	801a      	strh	r2, [r3, #0]
								free(to);
 800487c:	6938      	ldr	r0, [r7, #16]
 800487e:	f00a f9d7 	bl	800ec30 <free>
 8004882:	e014      	b.n	80048ae <HAL_UART_RxCpltCallback+0x21a>
								if (devError & devQUE) devError &= ~devQUE;
 8004884:	4b14      	ldr	r3, [pc, #80]	; (80048d8 <HAL_UART_RxCpltCallback+0x244>)
 8004886:	881b      	ldrh	r3, [r3, #0]
 8004888:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00e      	beq.n	80048ae <HAL_UART_RxCpltCallback+0x21a>
 8004890:	4b11      	ldr	r3, [pc, #68]	; (80048d8 <HAL_UART_RxCpltCallback+0x244>)
 8004892:	881b      	ldrh	r3, [r3, #0]
 8004894:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004898:	b29a      	uxth	r2, r3
 800489a:	4b0f      	ldr	r3, [pc, #60]	; (80048d8 <HAL_UART_RxCpltCallback+0x244>)
 800489c:	801a      	strh	r2, [r3, #0]
 800489e:	e006      	b.n	80048ae <HAL_UART_RxCpltCallback+0x21a>
							devError |= devMEM;
 80048a0:	4b0d      	ldr	r3, [pc, #52]	; (80048d8 <HAL_UART_RxCpltCallback+0x244>)
 80048a2:	881b      	ldrh	r3, [r3, #0]
 80048a4:	f043 0304 	orr.w	r3, r3, #4
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	4b0b      	ldr	r3, [pc, #44]	; (80048d8 <HAL_UART_RxCpltCallback+0x244>)
 80048ac:	801a      	strh	r2, [r3, #0]
					ev = -2;
 80048ae:	f06f 0301 	mvn.w	r3, #1
 80048b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80048b4:	e21e      	b.n	8004cf4 <HAL_UART_RxCpltCallback+0x660>
					for (i = 0; i < MAX_CMDS; i++) {
 80048b6:	2300      	movs	r3, #0
 80048b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048ba:	e215      	b.n	8004ce8 <HAL_UART_RxCpltCallback+0x654>
 80048bc:	40004c00 	.word	0x40004c00
 80048c0:	20003126 	.word	0x20003126
 80048c4:	2000342e 	.word	0x2000342e
 80048c8:	20003128 	.word	0x20003128
 80048cc:	2000312c 	.word	0x2000312c
 80048d0:	20003577 	.word	0x20003577
 80048d4:	20003430 	.word	0x20003430
 80048d8:	2000193c 	.word	0x2000193c
 80048dc:	40004400 	.word	0x40004400
 80048e0:	20001952 	.word	0x20001952
 80048e4:	20001950 	.word	0x20001950
 80048e8:	20001954 	.word	0x20001954
 80048ec:	08013868 	.word	0x08013868
 80048f0:	0801386c 	.word	0x0801386c
 80048f4:	20003578 	.word	0x20003578
 80048f8:	200034d4 	.word	0x200034d4
						if (!strncmp(rxBuf, s_cmds[i], strlen(s_cmds[i]))) {
 80048fc:	4aa9      	ldr	r2, [pc, #676]	; (8004ba4 <HAL_UART_RxCpltCallback+0x510>)
 80048fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004900:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8004904:	4aa7      	ldr	r2, [pc, #668]	; (8004ba4 <HAL_UART_RxCpltCallback+0x510>)
 8004906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800490c:	4618      	mov	r0, r3
 800490e:	f7fb fc5f 	bl	80001d0 <strlen>
 8004912:	4603      	mov	r3, r0
 8004914:	461a      	mov	r2, r3
 8004916:	4621      	mov	r1, r4
 8004918:	48a3      	ldr	r0, [pc, #652]	; (8004ba8 <HAL_UART_RxCpltCallback+0x514>)
 800491a:	f00a ff44 	bl	800f7a6 <strncmp>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	f040 81de 	bne.w	8004ce2 <HAL_UART_RxCpltCallback+0x64e>
							char *uk = rxBuf + strlen(s_cmds[i]);
 8004926:	4a9f      	ldr	r2, [pc, #636]	; (8004ba4 <HAL_UART_RxCpltCallback+0x510>)
 8004928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800492a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800492e:	4618      	mov	r0, r3
 8004930:	f7fb fc4e 	bl	80001d0 <strlen>
 8004934:	4603      	mov	r3, r0
 8004936:	4a9c      	ldr	r2, [pc, #624]	; (8004ba8 <HAL_UART_RxCpltCallback+0x514>)
 8004938:	4413      	add	r3, r2
 800493a:	633b      	str	r3, [r7, #48]	; 0x30
							ev = -1;
 800493c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004940:	63bb      	str	r3, [r7, #56]	; 0x38
							switch (i) {
 8004942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004944:	2b13      	cmp	r3, #19
 8004946:	f200 81d4 	bhi.w	8004cf2 <HAL_UART_RxCpltCallback+0x65e>
 800494a:	a201      	add	r2, pc, #4	; (adr r2, 8004950 <HAL_UART_RxCpltCallback+0x2bc>)
 800494c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004950:	08004adb 	.word	0x08004adb
 8004954:	08004adb 	.word	0x08004adb
 8004958:	08004ae1 	.word	0x08004ae1
 800495c:	08004cf3 	.word	0x08004cf3
 8004960:	08004b33 	.word	0x08004b33
 8004964:	08004b33 	.word	0x08004b33
 8004968:	08004c85 	.word	0x08004c85
 800496c:	08004be9 	.word	0x08004be9
 8004970:	08004cf3 	.word	0x08004cf3
 8004974:	08004adb 	.word	0x08004adb
 8004978:	08004adb 	.word	0x08004adb
 800497c:	08004a99 	.word	0x08004a99
 8004980:	08004a55 	.word	0x08004a55
 8004984:	080049cd 	.word	0x080049cd
 8004988:	08004adb 	.word	0x08004adb
 800498c:	08004a37 	.word	0x08004a37
 8004990:	08004a99 	.word	0x08004a99
 8004994:	080049a1 	.word	0x080049a1
 8004998:	08004adb 	.word	0x08004adb
 800499c:	08004adb 	.word	0x08004adb
									if (strlen(uk) >= 1) {
 80049a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 818a 	beq.w	8004cbe <HAL_UART_RxCpltCallback+0x62a>
										newBand = atol(uk);
 80049aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049ac:	f00a f855 	bl	800ea5a <atol>
 80049b0:	4603      	mov	r3, r0
 80049b2:	b2da      	uxtb	r2, r3
 80049b4:	4b7d      	ldr	r3, [pc, #500]	; (8004bac <HAL_UART_RxCpltCallback+0x518>)
 80049b6:	701a      	strb	r2, [r3, #0]
										if (newBand != Band) {
 80049b8:	4b7c      	ldr	r3, [pc, #496]	; (8004bac <HAL_UART_RxCpltCallback+0x518>)
 80049ba:	781a      	ldrb	r2, [r3, #0]
 80049bc:	4b7c      	ldr	r3, [pc, #496]	; (8004bb0 <HAL_UART_RxCpltCallback+0x51c>)
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	f000 817c 	beq.w	8004cbe <HAL_UART_RxCpltCallback+0x62a>
											ev = i;
 80049c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049c8:	63bb      	str	r3, [r7, #56]	; 0x38
								break;
 80049ca:	e178      	b.n	8004cbe <HAL_UART_RxCpltCallback+0x62a>
									if (strlen(uk) >= 1) {
 80049cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f000 8176 	beq.w	8004cc2 <HAL_UART_RxCpltCallback+0x62e>
										uint8_t nv = Volume;
 80049d6:	4b77      	ldr	r3, [pc, #476]	; (8004bb4 <HAL_UART_RxCpltCallback+0x520>)
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
										if (strstr(uk, "up")) {
 80049de:	4976      	ldr	r1, [pc, #472]	; (8004bb8 <HAL_UART_RxCpltCallback+0x524>)
 80049e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049e2:	f00a fef4 	bl	800f7ce <strstr>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d005      	beq.n	80049f8 <HAL_UART_RxCpltCallback+0x364>
											nv++;
 80049ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80049f0:	3301      	adds	r3, #1
 80049f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80049f6:	e012      	b.n	8004a1e <HAL_UART_RxCpltCallback+0x38a>
										} else if (strstr(uk, "down")) {
 80049f8:	4970      	ldr	r1, [pc, #448]	; (8004bbc <HAL_UART_RxCpltCallback+0x528>)
 80049fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049fc:	f00a fee7 	bl	800f7ce <strstr>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d005      	beq.n	8004a12 <HAL_UART_RxCpltCallback+0x37e>
											nv--;
 8004a06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004a10:	e005      	b.n	8004a1e <HAL_UART_RxCpltCallback+0x38a>
											nv = (uint8_t)atol(uk);
 8004a12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a14:	f00a f821 	bl	800ea5a <atol>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
										if ((nv >= 0) && (nv <= 15)) {
 8004a1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004a22:	2b0f      	cmp	r3, #15
 8004a24:	f200 814d 	bhi.w	8004cc2 <HAL_UART_RxCpltCallback+0x62e>
											newVolume = nv;
 8004a28:	4a65      	ldr	r2, [pc, #404]	; (8004bc0 <HAL_UART_RxCpltCallback+0x52c>)
 8004a2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004a2e:	7013      	strb	r3, [r2, #0]
											ev = i;
 8004a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a32:	63bb      	str	r3, [r7, #56]	; 0x38
								break;
 8004a34:	e145      	b.n	8004cc2 <HAL_UART_RxCpltCallback+0x62e>
									if (strlen(uk) >= 1) {
 8004a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f000 8143 	beq.w	8004cc6 <HAL_UART_RxCpltCallback+0x632>
										newBassBoost = (uint8_t)atol(uk);
 8004a40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a42:	f00a f80a 	bl	800ea5a <atol>
 8004a46:	4603      	mov	r3, r0
 8004a48:	b2da      	uxtb	r2, r3
 8004a4a:	4b5e      	ldr	r3, [pc, #376]	; (8004bc4 <HAL_UART_RxCpltCallback+0x530>)
 8004a4c:	701a      	strb	r2, [r3, #0]
										ev = i;
 8004a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a50:	63bb      	str	r3, [r7, #56]	; 0x38
								break;
 8004a52:	e138      	b.n	8004cc6 <HAL_UART_RxCpltCallback+0x632>
									if (strlen(uk) >= 2) {
 8004a54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a56:	f7fb fbbb 	bl	80001d0 <strlen>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	f240 8134 	bls.w	8004cca <HAL_UART_RxCpltCallback+0x636>
										newFreq = (float)atof(uk);
 8004a62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a64:	f009 fff2 	bl	800ea4c <atof>
 8004a68:	ec53 2b10 	vmov	r2, r3, d0
 8004a6c:	4610      	mov	r0, r2
 8004a6e:	4619      	mov	r1, r3
 8004a70:	f7fc f8ba 	bl	8000be8 <__aeabi_d2f>
 8004a74:	4603      	mov	r3, r0
 8004a76:	4a54      	ldr	r2, [pc, #336]	; (8004bc8 <HAL_UART_RxCpltCallback+0x534>)
 8004a78:	6013      	str	r3, [r2, #0]
										if (newFreq != Freq) {
 8004a7a:	4b53      	ldr	r3, [pc, #332]	; (8004bc8 <HAL_UART_RxCpltCallback+0x534>)
 8004a7c:	ed93 7a00 	vldr	s14, [r3]
 8004a80:	4b52      	ldr	r3, [pc, #328]	; (8004bcc <HAL_UART_RxCpltCallback+0x538>)
 8004a82:	edd3 7a00 	vldr	s15, [r3]
 8004a86:	eeb4 7a67 	vcmp.f32	s14, s15
 8004a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a8e:	f000 811c 	beq.w	8004cca <HAL_UART_RxCpltCallback+0x636>
											ev = i;
 8004a92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a94:	63bb      	str	r3, [r7, #56]	; 0x38
								break;
 8004a96:	e118      	b.n	8004cca <HAL_UART_RxCpltCallback+0x636>
									seek_up = 1;
 8004a98:	4b4d      	ldr	r3, [pc, #308]	; (8004bd0 <HAL_UART_RxCpltCallback+0x53c>)
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	701a      	strb	r2, [r3, #0]
									ev = i;
 8004a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aa0:	63bb      	str	r3, [r7, #56]	; 0x38
									char *uki = strchr(uk, ':');
 8004aa2:	213a      	movs	r1, #58	; 0x3a
 8004aa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004aa6:	f00a fe71 	bl	800f78c <strchr>
 8004aaa:	62f8      	str	r0, [r7, #44]	; 0x2c
									if (uki) {
 8004aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f000 810d 	beq.w	8004cce <HAL_UART_RxCpltCallback+0x63a>
										if ((*(char *)(uki + 1) == '0') || strstr(uki + 1, "down")) seek_up = 0;
 8004ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	2b30      	cmp	r3, #48	; 0x30
 8004abc:	d009      	beq.n	8004ad2 <HAL_UART_RxCpltCallback+0x43e>
 8004abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	493e      	ldr	r1, [pc, #248]	; (8004bbc <HAL_UART_RxCpltCallback+0x528>)
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f00a fe82 	bl	800f7ce <strstr>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 80fe 	beq.w	8004cce <HAL_UART_RxCpltCallback+0x63a>
 8004ad2:	4b3f      	ldr	r3, [pc, #252]	; (8004bd0 <HAL_UART_RxCpltCallback+0x53c>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	701a      	strb	r2, [r3, #0]
								break;
 8004ad8:	e0f9      	b.n	8004cce <HAL_UART_RxCpltCallback+0x63a>
									ev = i;
 8004ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004adc:	63bb      	str	r3, [r7, #56]	; 0x38
								break;
 8004ade:	e0ff      	b.n	8004ce0 <HAL_UART_RxCpltCallback+0x64c>
									if (strlen(uk) >= 10) {
 8004ae0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ae2:	f7fb fb75 	bl	80001d0 <strlen>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b09      	cmp	r3, #9
 8004aea:	f240 80f2 	bls.w	8004cd2 <HAL_UART_RxCpltCallback+0x63e>
										char *uki = strchr(uk, ':');
 8004aee:	213a      	movs	r1, #58	; 0x3a
 8004af0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004af2:	f00a fe4b 	bl	800f78c <strchr>
 8004af6:	61b8      	str	r0, [r7, #24]
										if (uki) {
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00c      	beq.n	8004b18 <HAL_UART_RxCpltCallback+0x484>
											tZone = (uint8_t)atol(uki + 1);
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	3301      	adds	r3, #1
 8004b02:	4618      	mov	r0, r3
 8004b04:	f009 ffa9 	bl	800ea5a <atol>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	b2da      	uxtb	r2, r3
 8004b0c:	4b31      	ldr	r3, [pc, #196]	; (8004bd4 <HAL_UART_RxCpltCallback+0x540>)
 8004b0e:	701a      	strb	r2, [r3, #0]
											*uki = '\0';
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	2200      	movs	r2, #0
 8004b14:	701a      	strb	r2, [r3, #0]
 8004b16:	e002      	b.n	8004b1e <HAL_UART_RxCpltCallback+0x48a>
											tZone = 0;
 8004b18:	4b2e      	ldr	r3, [pc, #184]	; (8004bd4 <HAL_UART_RxCpltCallback+0x540>)
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	701a      	strb	r2, [r3, #0]
										epoch = (uint32_t)atol(uk);
 8004b1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b20:	f009 ff9b 	bl	800ea5a <atol>
 8004b24:	4603      	mov	r3, r0
 8004b26:	461a      	mov	r2, r3
 8004b28:	4b2b      	ldr	r3, [pc, #172]	; (8004bd8 <HAL_UART_RxCpltCallback+0x544>)
 8004b2a:	601a      	str	r2, [r3, #0]
										ev = i;
 8004b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b2e:	63bb      	str	r3, [r7, #56]	; 0x38
								break;
 8004b30:	e0cf      	b.n	8004cd2 <HAL_UART_RxCpltCallback+0x63e>
									if (i == cmdsRead) cmd_sector = cmdsRead;
 8004b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b34:	2b04      	cmp	r3, #4
 8004b36:	d103      	bne.n	8004b40 <HAL_UART_RxCpltCallback+0x4ac>
 8004b38:	4b28      	ldr	r3, [pc, #160]	; (8004bdc <HAL_UART_RxCpltCallback+0x548>)
 8004b3a:	2204      	movs	r2, #4
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	e002      	b.n	8004b46 <HAL_UART_RxCpltCallback+0x4b2>
												  else cmd_sector = cmdsErase;
 8004b40:	4b26      	ldr	r3, [pc, #152]	; (8004bdc <HAL_UART_RxCpltCallback+0x548>)
 8004b42:	2205      	movs	r2, #5
 8004b44:	601a      	str	r2, [r3, #0]
									if (*uk == ':') {
 8004b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	2b3a      	cmp	r3, #58	; 0x3a
 8004b4c:	f040 80c3 	bne.w	8004cd6 <HAL_UART_RxCpltCallback+0x642>
										int sek = atoi(++uk);
 8004b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b52:	3301      	adds	r3, #1
 8004b54:	633b      	str	r3, [r7, #48]	; 0x30
 8004b56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b58:	f009 ff7b 	bl	800ea52 <atoi>
 8004b5c:	61f8      	str	r0, [r7, #28]
										if ( ((sek >= 0) && (sek < W25qxx_getSectorCount())) || (sek == -1) ) {
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	db05      	blt.n	8004b70 <HAL_UART_RxCpltCallback+0x4dc>
 8004b64:	f001 fcf4 	bl	8006550 <W25qxx_getSectorCount>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d804      	bhi.n	8004b7a <HAL_UART_RxCpltCallback+0x4e6>
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b76:	f040 80ae 	bne.w	8004cd6 <HAL_UART_RxCpltCallback+0x642>
											adr_sector = sek;
 8004b7a:	4a19      	ldr	r2, [pc, #100]	; (8004be0 <HAL_UART_RxCpltCallback+0x54c>)
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	6013      	str	r3, [r2, #0]
											offset_sector = 0;
 8004b80:	4b18      	ldr	r3, [pc, #96]	; (8004be4 <HAL_UART_RxCpltCallback+0x550>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	601a      	str	r2, [r3, #0]
											if (sek == -1) {
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b8c:	d107      	bne.n	8004b9e <HAL_UART_RxCpltCallback+0x50a>
												if (cmd_sector == cmdsErase) ev = i;
 8004b8e:	4b13      	ldr	r3, [pc, #76]	; (8004bdc <HAL_UART_RxCpltCallback+0x548>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2b05      	cmp	r3, #5
 8004b94:	f040 809f 	bne.w	8004cd6 <HAL_UART_RxCpltCallback+0x642>
 8004b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b9a:	63bb      	str	r3, [r7, #56]	; 0x38
								break;
 8004b9c:	e09b      	b.n	8004cd6 <HAL_UART_RxCpltCallback+0x642>
												ev = i;
 8004b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ba0:	63bb      	str	r3, [r7, #56]	; 0x38
								break;
 8004ba2:	e098      	b.n	8004cd6 <HAL_UART_RxCpltCallback+0x642>
 8004ba4:	2000001c 	.word	0x2000001c
 8004ba8:	20001954 	.word	0x20001954
 8004bac:	200001dd 	.word	0x200001dd
 8004bb0:	200001dc 	.word	0x200001dc
 8004bb4:	200001df 	.word	0x200001df
 8004bb8:	08013870 	.word	0x08013870
 8004bbc:	08013874 	.word	0x08013874
 8004bc0:	200001e0 	.word	0x200001e0
 8004bc4:	20002d9b 	.word	0x20002d9b
 8004bc8:	200001d8 	.word	0x200001d8
 8004bcc:	200001d4 	.word	0x200001d4
 8004bd0:	200001de 	.word	0x200001de
 8004bd4:	20001d56 	.word	0x20001d56
 8004bd8:	20000018 	.word	0x20000018
 8004bdc:	200001c8 	.word	0x200001c8
 8004be0:	20001d60 	.word	0x20001d60
 8004be4:	20001d64 	.word	0x20001d64
									if (*uk == ':') {
 8004be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	2b3a      	cmp	r3, #58	; 0x3a
 8004bee:	d174      	bne.n	8004cda <HAL_UART_RxCpltCallback+0x646>
										uk++;
 8004bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	633b      	str	r3, [r7, #48]	; 0x30
										int sek = atoi(uk);
 8004bf6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bf8:	f009 ff2b 	bl	800ea52 <atoi>
 8004bfc:	62b8      	str	r0, [r7, #40]	; 0x28
										if ((sek >= 0) && (sek < W25qxx_getSectorCount())) {
 8004bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	db6a      	blt.n	8004cda <HAL_UART_RxCpltCallback+0x646>
 8004c04:	f001 fca4 	bl	8006550 <W25qxx_getSectorCount>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d964      	bls.n	8004cda <HAL_UART_RxCpltCallback+0x646>
											char *ukn = strchr(uk, ':');
 8004c10:	213a      	movs	r1, #58	; 0x3a
 8004c12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c14:	f00a fdba 	bl	800f78c <strchr>
 8004c18:	6278      	str	r0, [r7, #36]	; 0x24
											if (ukn) {
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d05c      	beq.n	8004cda <HAL_UART_RxCpltCallback+0x646>
												len_write = -1;
 8004c20:	4b47      	ldr	r3, [pc, #284]	; (8004d40 <HAL_UART_RxCpltCallback+0x6ac>)
 8004c22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c26:	601a      	str	r2, [r3, #0]
												ukn++;
 8004c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	627b      	str	r3, [r7, #36]	; 0x24
												byte_write = hexToBin(ukn);
 8004c2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c30:	f7ff f81a 	bl	8003c68 <hexToBin>
 8004c34:	4603      	mov	r3, r0
 8004c36:	461a      	mov	r2, r3
 8004c38:	4b42      	ldr	r3, [pc, #264]	; (8004d44 <HAL_UART_RxCpltCallback+0x6b0>)
 8004c3a:	701a      	strb	r2, [r3, #0]
												uk = strchr(ukn, ':');
 8004c3c:	213a      	movs	r1, #58	; 0x3a
 8004c3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c40:	f00a fda4 	bl	800f78c <strchr>
 8004c44:	6338      	str	r0, [r7, #48]	; 0x30
												if (uk) {
 8004c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d012      	beq.n	8004c72 <HAL_UART_RxCpltCallback+0x5de>
													int l = atoi(++uk);
 8004c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4e:	3301      	adds	r3, #1
 8004c50:	633b      	str	r3, [r7, #48]	; 0x30
 8004c52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c54:	f009 fefd 	bl	800ea52 <atoi>
 8004c58:	6238      	str	r0, [r7, #32]
													if ((l > 0) && (l < W25qxx_getSectorSize())) len_write = l;
 8004c5a:	6a3b      	ldr	r3, [r7, #32]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	dd08      	ble.n	8004c72 <HAL_UART_RxCpltCallback+0x5de>
 8004c60:	f001 fc82 	bl	8006568 <W25qxx_getSectorSize>
 8004c64:	4602      	mov	r2, r0
 8004c66:	6a3b      	ldr	r3, [r7, #32]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d902      	bls.n	8004c72 <HAL_UART_RxCpltCallback+0x5de>
 8004c6c:	4a34      	ldr	r2, [pc, #208]	; (8004d40 <HAL_UART_RxCpltCallback+0x6ac>)
 8004c6e:	6a3b      	ldr	r3, [r7, #32]
 8004c70:	6013      	str	r3, [r2, #0]
												adr_sector = sek;
 8004c72:	4a35      	ldr	r2, [pc, #212]	; (8004d48 <HAL_UART_RxCpltCallback+0x6b4>)
 8004c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c76:	6013      	str	r3, [r2, #0]
												offset_sector = 0;
 8004c78:	4b34      	ldr	r3, [pc, #208]	; (8004d4c <HAL_UART_RxCpltCallback+0x6b8>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	601a      	str	r2, [r3, #0]
												ev = i;//flag_sector = true;
 8004c7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c80:	63bb      	str	r3, [r7, #56]	; 0x38
								break;
 8004c82:	e02a      	b.n	8004cda <HAL_UART_RxCpltCallback+0x646>
									if ((last_cmd_sector == cmdsRead) || (last_cmd_sector == cmdsNext)) {
 8004c84:	4b32      	ldr	r3, [pc, #200]	; (8004d50 <HAL_UART_RxCpltCallback+0x6bc>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2b04      	cmp	r3, #4
 8004c8a:	d003      	beq.n	8004c94 <HAL_UART_RxCpltCallback+0x600>
 8004c8c:	4b30      	ldr	r3, [pc, #192]	; (8004d50 <HAL_UART_RxCpltCallback+0x6bc>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2b06      	cmp	r3, #6
 8004c92:	d124      	bne.n	8004cde <HAL_UART_RxCpltCallback+0x64a>
										if ((offset_sector + list_sector) < W25qxx_getSectorSize()) {
 8004c94:	4b2d      	ldr	r3, [pc, #180]	; (8004d4c <HAL_UART_RxCpltCallback+0x6b8>)
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	4b2e      	ldr	r3, [pc, #184]	; (8004d54 <HAL_UART_RxCpltCallback+0x6c0>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	461c      	mov	r4, r3
 8004ca0:	f001 fc62 	bl	8006568 <W25qxx_getSectorSize>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	429c      	cmp	r4, r3
 8004ca8:	d219      	bcs.n	8004cde <HAL_UART_RxCpltCallback+0x64a>
											offset_sector += list_sector;
 8004caa:	4b28      	ldr	r3, [pc, #160]	; (8004d4c <HAL_UART_RxCpltCallback+0x6b8>)
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	4b29      	ldr	r3, [pc, #164]	; (8004d54 <HAL_UART_RxCpltCallback+0x6c0>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	4a25      	ldr	r2, [pc, #148]	; (8004d4c <HAL_UART_RxCpltCallback+0x6b8>)
 8004cb6:	6013      	str	r3, [r2, #0]
											ev = i;//flag_sector = true;
 8004cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cba:	63bb      	str	r3, [r7, #56]	; 0x38
								break;
 8004cbc:	e00f      	b.n	8004cde <HAL_UART_RxCpltCallback+0x64a>
								break;
 8004cbe:	bf00      	nop
 8004cc0:	e017      	b.n	8004cf2 <HAL_UART_RxCpltCallback+0x65e>
								break;
 8004cc2:	bf00      	nop
 8004cc4:	e015      	b.n	8004cf2 <HAL_UART_RxCpltCallback+0x65e>
								break;
 8004cc6:	bf00      	nop
 8004cc8:	e013      	b.n	8004cf2 <HAL_UART_RxCpltCallback+0x65e>
								break;
 8004cca:	bf00      	nop
 8004ccc:	e011      	b.n	8004cf2 <HAL_UART_RxCpltCallback+0x65e>
								break;
 8004cce:	bf00      	nop
 8004cd0:	e00f      	b.n	8004cf2 <HAL_UART_RxCpltCallback+0x65e>
								break;
 8004cd2:	bf00      	nop
 8004cd4:	e00d      	b.n	8004cf2 <HAL_UART_RxCpltCallback+0x65e>
								break;
 8004cd6:	bf00      	nop
 8004cd8:	e00b      	b.n	8004cf2 <HAL_UART_RxCpltCallback+0x65e>
								break;
 8004cda:	bf00      	nop
 8004cdc:	e009      	b.n	8004cf2 <HAL_UART_RxCpltCallback+0x65e>
								break;
 8004cde:	bf00      	nop
							break;
 8004ce0:	e007      	b.n	8004cf2 <HAL_UART_RxCpltCallback+0x65e>
					for (i = 0; i < MAX_CMDS; i++) {
 8004ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cea:	2b13      	cmp	r3, #19
 8004cec:	f77f ae06 	ble.w	80048fc <HAL_UART_RxCpltCallback+0x268>
 8004cf0:	e000      	b.n	8004cf4 <HAL_UART_RxCpltCallback+0x660>
							break;
 8004cf2:	bf00      	nop
				if (ev != -2) {
 8004cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf6:	f113 0f02 	cmn.w	r3, #2
 8004cfa:	d008      	beq.n	8004d0e <HAL_UART_RxCpltCallback+0x67a>
					if (ev == -1) ev = cmdErr;
 8004cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d02:	d101      	bne.n	8004d08 <HAL_UART_RxCpltCallback+0x674>
 8004d04:	2303      	movs	r3, #3
 8004d06:	63bb      	str	r3, [r7, #56]	; 0x38
					putEvt(ev);
 8004d08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004d0a:	f7ff f827 	bl	8003d5c <putEvt>
			rxInd = 0;
 8004d0e:	4b12      	ldr	r3, [pc, #72]	; (8004d58 <HAL_UART_RxCpltCallback+0x6c4>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	801a      	strh	r2, [r3, #0]
			*rxBuf = '\0';
 8004d14:	4b11      	ldr	r3, [pc, #68]	; (8004d5c <HAL_UART_RxCpltCallback+0x6c8>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	701a      	strb	r2, [r3, #0]
		if (HAL_UART_Receive_IT(huart, &rxByte, 1) != HAL_OK) devError |= devUART;
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	4910      	ldr	r1, [pc, #64]	; (8004d60 <HAL_UART_RxCpltCallback+0x6cc>)
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f008 fab8 	bl	800d294 <HAL_UART_Receive_IT>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d006      	beq.n	8004d38 <HAL_UART_RxCpltCallback+0x6a4>
 8004d2a:	4b0e      	ldr	r3, [pc, #56]	; (8004d64 <HAL_UART_RxCpltCallback+0x6d0>)
 8004d2c:	881b      	ldrh	r3, [r3, #0]
 8004d2e:	f043 0302 	orr.w	r3, r3, #2
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	4b0b      	ldr	r3, [pc, #44]	; (8004d64 <HAL_UART_RxCpltCallback+0x6d0>)
 8004d36:	801a      	strh	r2, [r3, #0]
}
 8004d38:	bf00      	nop
 8004d3a:	3744      	adds	r7, #68	; 0x44
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd90      	pop	{r4, r7, pc}
 8004d40:	20001d6c 	.word	0x20001d6c
 8004d44:	200001d0 	.word	0x200001d0
 8004d48:	20001d60 	.word	0x20001d60
 8004d4c:	20001d64 	.word	0x20001d64
 8004d50:	200001cc 	.word	0x200001cc
 8004d54:	20001d68 	.word	0x20001d68
 8004d58:	20001952 	.word	0x20001952
 8004d5c:	20001954 	.word	0x20001954
 8004d60:	20001950 	.word	0x20001950
 8004d64:	2000193c 	.word	0x2000193c

08004d68 <spiDone>:
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
//    Функция устанавливает в начальное состояние 'готов' служебные параметры порта SPI1:
//
void spiDone(SPI_HandleTypeDef *hspi)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
#ifdef SET_W25FLASH
	if (hspi->Instance == SPI2) {
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a0a      	ldr	r2, [pc, #40]	; (8004da0 <spiDone+0x38>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d105      	bne.n	8004d86 <spiDone+0x1e>
		W25_UNSELECT();
 8004d7a:	f001 fa0d 	bl	8006198 <W25_UNSELECT>
		spiRdy = 1;
 8004d7e:	4b09      	ldr	r3, [pc, #36]	; (8004da4 <spiDone+0x3c>)
 8004d80:	2201      	movs	r2, #1
 8004d82:	701a      	strb	r2, [r3, #0]
	else
	if (hspi->Instance == SPI1) {
		lcdRdy = 1;
	}
#endif
}
 8004d84:	e007      	b.n	8004d96 <spiDone+0x2e>
	if (hspi->Instance == SPI1) {
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a07      	ldr	r2, [pc, #28]	; (8004da8 <spiDone+0x40>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d102      	bne.n	8004d96 <spiDone+0x2e>
		lcdRdy = 1;
 8004d90:	4b06      	ldr	r3, [pc, #24]	; (8004dac <spiDone+0x44>)
 8004d92:	2201      	movs	r2, #1
 8004d94:	701a      	strb	r2, [r3, #0]
}
 8004d96:	bf00      	nop
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	40003800 	.word	0x40003800
 8004da4:	200001c4 	.word	0x200001c4
 8004da8:	40013000 	.word	0x40013000
 8004dac:	20000000 	.word	0x20000000

08004db0 <HAL_SPI_RxCpltCallback>:
//-------------------------------------------------------------------------------------------
//    CallBack функция, вызывается по завершении приема данных от порта SPI
//
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f7ff ffd5 	bl	8004d68 <spiDone>
}
 8004dbe:	bf00      	nop
 8004dc0:	3708      	adds	r7, #8
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <HAL_SPI_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
//    CallBack функция, вызывается по завершении передачи данных в порт SPI
//
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b082      	sub	sp, #8
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7ff ffca 	bl	8004d68 <spiDone>
}
 8004dd4:	bf00      	nop
 8004dd6:	3708      	adds	r7, #8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <HAL_SPI_TxRxCpltCallback>:
//-------------------------------------------------------------------------------------------
//    CallBack функция, вызывается по завершении приема/передачи данных порта SPI
//
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f7ff ffbf 	bl	8004d68 <spiDone>
}
 8004dea:	bf00      	nop
 8004dec:	3708      	adds	r7, #8
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
	...

08004df4 <HAL_SPI_ErrorCallback>:
//--------------------------------------------------------------------------------------------
//    CallBack функция, вызывается при возникновении ошибки у модуля SPI
//
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f7ff ffb3 	bl	8004d68 <spiDone>
	devError |= devSPI;
 8004e02:	4b05      	ldr	r3, [pc, #20]	; (8004e18 <HAL_SPI_ErrorCallback+0x24>)
 8004e04:	881b      	ldrh	r3, [r3, #0]
 8004e06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	4b02      	ldr	r3, [pc, #8]	; (8004e18 <HAL_SPI_ErrorCallback+0x24>)
 8004e0e:	801a      	strh	r2, [r3, #0]
}
 8004e10:	bf00      	nop
 8004e12:	3708      	adds	r7, #8
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	2000193c 	.word	0x2000193c

08004e1c <HAL_I2C_ErrorCallback>:
	}
#endif
}
//--------------------------------------------------------------------------------------------
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
#ifdef SET_RDA_CHIP
	if (hi2c->Instance == I2C1) {
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a07      	ldr	r2, [pc, #28]	; (8004e48 <HAL_I2C_ErrorCallback+0x2c>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d106      	bne.n	8004e3c <HAL_I2C_ErrorCallback+0x20>
		devError |= devRDA;
 8004e2e:	4b07      	ldr	r3, [pc, #28]	; (8004e4c <HAL_I2C_ErrorCallback+0x30>)
 8004e30:	881b      	ldrh	r3, [r3, #0]
 8004e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	4b04      	ldr	r3, [pc, #16]	; (8004e4c <HAL_I2C_ErrorCallback+0x30>)
 8004e3a:	801a      	strh	r2, [r3, #0]
	}
#endif
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr
 8004e48:	40005400 	.word	0x40005400
 8004e4c:	2000193c 	.word	0x2000193c

08004e50 <HAL_GPIO_EXTI_Callback>:
//--------------------------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	4603      	mov	r3, r0
 8004e58:	80fb      	strh	r3, [r7, #6]
	if ((GPIO_Pin != KEY0_Pin) && (GPIO_Pin != KEY1_Pin)) return;
 8004e5a:	88fb      	ldrh	r3, [r7, #6]
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d002      	beq.n	8004e66 <HAL_GPIO_EXTI_Callback+0x16>
 8004e60:	88fb      	ldrh	r3, [r7, #6]
 8004e62:	2b04      	cmp	r3, #4
 8004e64:	d110      	bne.n	8004e88 <HAL_GPIO_EXTI_Callback+0x38>

	if (GPIO_Pin == KEY0_Pin) seek_up = 1;
 8004e66:	88fb      	ldrh	r3, [r7, #6]
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d103      	bne.n	8004e74 <HAL_GPIO_EXTI_Callback+0x24>
 8004e6c:	4b08      	ldr	r3, [pc, #32]	; (8004e90 <HAL_GPIO_EXTI_Callback+0x40>)
 8004e6e:	2201      	movs	r2, #1
 8004e70:	701a      	strb	r2, [r3, #0]
 8004e72:	e005      	b.n	8004e80 <HAL_GPIO_EXTI_Callback+0x30>
	else
	if (GPIO_Pin == KEY1_Pin) seek_up = 0;
 8004e74:	88fb      	ldrh	r3, [r7, #6]
 8004e76:	2b04      	cmp	r3, #4
 8004e78:	d102      	bne.n	8004e80 <HAL_GPIO_EXTI_Callback+0x30>
 8004e7a:	4b05      	ldr	r3, [pc, #20]	; (8004e90 <HAL_GPIO_EXTI_Callback+0x40>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	701a      	strb	r2, [r3, #0]

	putEvt(cmdScan);
 8004e80:	200b      	movs	r0, #11
 8004e82:	f7fe ff6b 	bl	8003d5c <putEvt>
 8004e86:	e000      	b.n	8004e8a <HAL_GPIO_EXTI_Callback+0x3a>
	if ((GPIO_Pin != KEY0_Pin) && (GPIO_Pin != KEY1_Pin)) return;
 8004e88:	bf00      	nop
}
 8004e8a:	3708      	adds	r7, #8
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	200001de 	.word	0x200001de

08004e94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004e98:	b672      	cpsid	i
}
 8004e9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  devError |= devSYS;
 8004e9c:	4b05      	ldr	r3, [pc, #20]	; (8004eb4 <Error_Handler+0x20>)
 8004e9e:	881b      	ldrh	r3, [r3, #0]
 8004ea0:	f043 0320 	orr.w	r3, r3, #32
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	4b03      	ldr	r3, [pc, #12]	; (8004eb4 <Error_Handler+0x20>)
 8004ea8:	801a      	strh	r2, [r3, #0]
	  errLedOn(true);
 8004eaa:	2001      	movs	r0, #1
 8004eac:	f7ff f9a0 	bl	80041f0 <errLedOn>
	  devError |= devSYS;
 8004eb0:	e7f4      	b.n	8004e9c <Error_Handler+0x8>
 8004eb2:	bf00      	nop
 8004eb4:	2000193c 	.word	0x2000193c

08004eb8 <rda5807_init>:

//==============================================================================
// Инициализация rda5807
//==============================================================================
uint8_t rda5807_init(float *freq)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b088      	sub	sp, #32
 8004ebc:	af04      	add	r7, sp, #16
 8004ebe:	6078      	str	r0, [r7, #4]
uint8_t buf[2] = {0, 0};
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	813b      	strh	r3, [r7, #8]
uint8_t *id = &buf[0];
 8004ec4:	f107 0308 	add.w	r3, r7, #8
 8004ec8:	60fb      	str	r3, [r7, #12]

    if (HAL_I2C_Mem_Read(i2cRDA, RDA5807_RandAccess_Addr, 0, I2C_MEMADD_SIZE_8BIT, buf, 2, RDA5807_TO) != HAL_OK) {
 8004eca:	4b30      	ldr	r3, [pc, #192]	; (8004f8c <rda5807_init+0xd4>)
 8004ecc:	6818      	ldr	r0, [r3, #0]
 8004ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ed2:	9302      	str	r3, [sp, #8]
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	9301      	str	r3, [sp, #4]
 8004ed8:	f107 0308 	add.w	r3, r7, #8
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	2301      	movs	r3, #1
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	2122      	movs	r1, #34	; 0x22
 8004ee4:	f002 ffec 	bl	8007ec0 <HAL_I2C_Mem_Read>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d13c      	bne.n	8004f68 <rda5807_init+0xb0>
    stx[0] = '\0';
    for (int i = 0; i < 64; i++) sprintf(stx+strlen(stx)," %02x", buf11[i]);
    Report(1, "[%s] %s\r\n", __func__, stx);
#endif

    rda5807_SoftReset();
 8004eee:	f000 f927 	bl	8005140 <rda5807_SoftReset>
    if (devError & devRDA) goto err_out;
 8004ef2:	4b27      	ldr	r3, [pc, #156]	; (8004f90 <rda5807_init+0xd8>)
 8004ef4:	881b      	ldrh	r3, [r3, #0]
 8004ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d136      	bne.n	8004f6c <rda5807_init+0xb4>

    rda5807_SetupDefault();
 8004efe:	f000 f949 	bl	8005194 <rda5807_SetupDefault>
    if (devError & devRDA) goto err_out;
 8004f02:	4b23      	ldr	r3, [pc, #140]	; (8004f90 <rda5807_init+0xd8>)
 8004f04:	881b      	ldrh	r3, [r3, #0]
 8004f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d130      	bne.n	8004f70 <rda5807_init+0xb8>

    uint16_t fr = (uint16_t)(*freq * 10);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	edd3 7a00 	vldr	s15, [r3]
 8004f14:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004f18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f20:	ee17 3a90 	vmov	r3, s15
 8004f24:	817b      	strh	r3, [r7, #10]
    rda5807_SetFreq_In100Khz(fr);
 8004f26:	897b      	ldrh	r3, [r7, #10]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f000 fa79 	bl	8005420 <rda5807_SetFreq_In100Khz>
    //
    HAL_Delay(200);
 8004f2e:	20c8      	movs	r0, #200	; 0xc8
 8004f30:	f001 ff36 	bl	8006da0 <HAL_Delay>
    //
    *freq = (float)rda5807_GetFreq_In100Khz();
 8004f34:	f000 faee 	bl	8005514 <rda5807_GetFreq_In100Khz>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	ee07 3a90 	vmov	s15, r3
 8004f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	edc3 7a00 	vstr	s15, [r3]
    *freq /= 10;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	ed93 7a00 	vldr	s14, [r3]
 8004f4e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004f52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	edc3 7a00 	vstr	s15, [r3]
#ifdef SET_RDA_DEBUG
    Report(1, "[%s] Freq: %.2f\r\n", __func__, *freq);//rda5807_GetFreq_In100Khz());
#endif

    HAL_Delay(100);
 8004f5c:	2064      	movs	r0, #100	; 0x64
 8004f5e:	f001 ff1f 	bl	8006da0 <HAL_Delay>

    return *id;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	e00d      	b.n	8004f84 <rda5807_init+0xcc>
    	goto err_out;
 8004f68:	bf00      	nop
 8004f6a:	e002      	b.n	8004f72 <rda5807_init+0xba>
    if (devError & devRDA) goto err_out;
 8004f6c:	bf00      	nop
 8004f6e:	e000      	b.n	8004f72 <rda5807_init+0xba>
    if (devError & devRDA) goto err_out;
 8004f70:	bf00      	nop

err_out:
	devError |= devRDA;
 8004f72:	4b07      	ldr	r3, [pc, #28]	; (8004f90 <rda5807_init+0xd8>)
 8004f74:	881b      	ldrh	r3, [r3, #0]
 8004f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	4b04      	ldr	r3, [pc, #16]	; (8004f90 <rda5807_init+0xd8>)
 8004f7e:	801a      	strh	r2, [r3, #0]
    return *id;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	781b      	ldrb	r3, [r3, #0]
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	20000200 	.word	0x20000200
 8004f90:	2000193c 	.word	0x2000193c

08004f94 <rda5807_rssi>:
//==============================================================================
uint16_t rda5807_rssi()
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
uint16_t word = 0;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	80fb      	strh	r3, [r7, #6]

    rda5807_read(0x0B, &word, 1);
 8004f9e:	1dbb      	adds	r3, r7, #6
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	200b      	movs	r0, #11
 8004fa6:	f000 f85d 	bl	8005064 <rda5807_read>

    return (word >> 9);
 8004faa:	88fb      	ldrh	r3, [r7, #6]
 8004fac:	0a5b      	lsrs	r3, r3, #9
 8004fae:	b29b      	uxth	r3, r3
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3708      	adds	r7, #8
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <rda5807_bytes_change>:

//==============================================================================
// Процедура меняет местами байты попарно в буфере pBuff 
//==============================================================================
void rda5807_bytes_change(uint8_t *pBuff, uint8_t count)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	70fb      	strb	r3, [r7, #3]
    while (count > 1) {    // Если осталась хотя бы пара байт
 8004fc4:	e010      	b.n	8004fe8 <rda5807_bytes_change+0x30>
        uint8_t Temp = *(pBuff + 1);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	785b      	ldrb	r3, [r3, #1]
 8004fca:	73fb      	strb	r3, [r7, #15]
        *(pBuff + 1) = *pBuff;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	7812      	ldrb	r2, [r2, #0]
 8004fd4:	701a      	strb	r2, [r3, #0]
        *pBuff = Temp;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	7bfa      	ldrb	r2, [r7, #15]
 8004fda:	701a      	strb	r2, [r3, #0]
        pBuff += 2;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	3302      	adds	r3, #2
 8004fe0:	607b      	str	r3, [r7, #4]
        count -= 2;
 8004fe2:	78fb      	ldrb	r3, [r7, #3]
 8004fe4:	3b02      	subs	r3, #2
 8004fe6:	70fb      	strb	r3, [r7, #3]
    while (count > 1) {    // Если осталась хотя бы пара байт
 8004fe8:	78fb      	ldrb	r3, [r7, #3]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d8eb      	bhi.n	8004fc6 <rda5807_bytes_change+0xe>
    }
}
 8004fee:	bf00      	nop
 8004ff0:	bf00      	nop
 8004ff2:	3714      	adds	r7, #20
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <rda5807_write_regfile>:
//==============================================================================
// Процедура пишет в rda5807 группу регистров (кол-во RegNum) начиная с 0x02
// Используется I2C-адрес RDA5807_SeqAccess_Addr
//==============================================================================
void rda5807_write_regfile(uint16_t *pBuff, uint8_t RegNum)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af02      	add	r7, sp, #8
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	460b      	mov	r3, r1
 8005006:	70fb      	strb	r3, [r7, #3]
    err = i2cm_Start(I2Cx, RDA5807_SeqAccess_Addr, 0, RDA5807_TO);
    if (err) {
        Error_Handler();
    } //*/

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8005008:	78fb      	ldrb	r3, [r7, #3]
 800500a:	005b      	lsls	r3, r3, #1
 800500c:	b2db      	uxtb	r3, r3
 800500e:	4619      	mov	r1, r3
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f7ff ffd1 	bl	8004fb8 <rda5807_bytes_change>

//    err = i2cm_WriteBuff(I2Cx, (uint8_t *) pBuff, RegNum << 1, RDA5807_TO);
//    i2cm_Stop(I2Cx, RDA5807_TO);

    if (HAL_I2C_Master_Transmit(i2cRDA, (uint16_t)RDA5807_SeqAccess_Addr, (uint8_t *)pBuff, RegNum << 1, RDA5807_TO) != HAL_OK) {
 8005016:	4b11      	ldr	r3, [pc, #68]	; (800505c <rda5807_write_regfile+0x60>)
 8005018:	6818      	ldr	r0, [r3, #0]
 800501a:	78fb      	ldrb	r3, [r7, #3]
 800501c:	b29b      	uxth	r3, r3
 800501e:	005b      	lsls	r3, r3, #1
 8005020:	b29b      	uxth	r3, r3
 8005022:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005026:	9200      	str	r2, [sp, #0]
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	2120      	movs	r1, #32
 800502c:	f002 fd40 	bl	8007ab0 <HAL_I2C_Master_Transmit>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d006      	beq.n	8005044 <rda5807_write_regfile+0x48>
    	devError |= devRDA;
 8005036:	4b0a      	ldr	r3, [pc, #40]	; (8005060 <rda5807_write_regfile+0x64>)
 8005038:	881b      	ldrh	r3, [r3, #0]
 800503a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800503e:	b29a      	uxth	r2, r3
 8005040:	4b07      	ldr	r3, [pc, #28]	; (8005060 <rda5807_write_regfile+0x64>)
 8005042:	801a      	strh	r2, [r3, #0]
    }

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8005044:	78fb      	ldrb	r3, [r7, #3]
 8005046:	005b      	lsls	r3, r3, #1
 8005048:	b2db      	uxtb	r3, r3
 800504a:	4619      	mov	r1, r3
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f7ff ffb3 	bl	8004fb8 <rda5807_bytes_change>
}
 8005052:	bf00      	nop
 8005054:	3708      	adds	r7, #8
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	20000200 	.word	0x20000200
 8005060:	2000193c 	.word	0x2000193c

08005064 <rda5807_read>:
//==============================================================================
// Процедура читает из rda5807 группу регистров (кол-во RegNum) начиная с RegAddr
// Используется I2C-адрес RDA5807_RandAccess_Addr (для режима совместимости с rda5800)
//==============================================================================
void rda5807_read(uint8_t RegAddr, uint16_t *pBuff, uint8_t RegNum)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af04      	add	r7, sp, #16
 800506a:	4603      	mov	r3, r0
 800506c:	6039      	str	r1, [r7, #0]
 800506e:	71fb      	strb	r3, [r7, #7]
 8005070:	4613      	mov	r3, r2
 8005072:	71bb      	strb	r3, [r7, #6]
        Error_Handler();
    }
    // Читаем
    i2cm_ReadBuffAndStop(I2Cx, (uint8_t *) pBuff, RegNum << 1, RDA5807_TO); //*/

    if (HAL_I2C_Mem_Read(i2cRDA, RDA5807_RandAccess_Addr,
 8005074:	4b13      	ldr	r3, [pc, #76]	; (80050c4 <rda5807_read+0x60>)
 8005076:	6818      	ldr	r0, [r3, #0]
 8005078:	79fb      	ldrb	r3, [r7, #7]
 800507a:	b29a      	uxth	r2, r3
 800507c:	79bb      	ldrb	r3, [r7, #6]
 800507e:	b29b      	uxth	r3, r3
 8005080:	005b      	lsls	r3, r3, #1
 8005082:	b29b      	uxth	r3, r3
 8005084:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005088:	9102      	str	r1, [sp, #8]
 800508a:	9301      	str	r3, [sp, #4]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	9300      	str	r3, [sp, #0]
 8005090:	2301      	movs	r3, #1
 8005092:	2122      	movs	r1, #34	; 0x22
 8005094:	f002 ff14 	bl	8007ec0 <HAL_I2C_Mem_Read>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d006      	beq.n	80050ac <rda5807_read+0x48>
    				     RegAddr, I2C_MEMADD_SIZE_8BIT,
						 (uint8_t *)pBuff, RegNum << 1,
						 RDA5807_TO) != HAL_OK) {
    	devError |= devRDA;
 800509e:	4b0a      	ldr	r3, [pc, #40]	; (80050c8 <rda5807_read+0x64>)
 80050a0:	881b      	ldrh	r3, [r3, #0]
 80050a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	4b07      	ldr	r3, [pc, #28]	; (80050c8 <rda5807_read+0x64>)
 80050aa:	801a      	strh	r2, [r3, #0]
    }

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 80050ac:	79bb      	ldrb	r3, [r7, #6]
 80050ae:	005b      	lsls	r3, r3, #1
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	4619      	mov	r1, r3
 80050b4:	6838      	ldr	r0, [r7, #0]
 80050b6:	f7ff ff7f 	bl	8004fb8 <rda5807_bytes_change>
}
 80050ba:	bf00      	nop
 80050bc:	3708      	adds	r7, #8
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	20000200 	.word	0x20000200
 80050c8:	2000193c 	.word	0x2000193c

080050cc <rda5807_write>:
//==============================================================================
// Процедура пишет в rda5807 группу регистров (кол-во RegNum) начиная с RegAddr
// Используется I2C-адрес RDA5807_RandAccess_Addr (для режима совместимости с rda5800)
//==============================================================================
void rda5807_write(uint8_t RegAddr, uint16_t *pBuff, uint8_t RegNum)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af04      	add	r7, sp, #16
 80050d2:	4603      	mov	r3, r0
 80050d4:	6039      	str	r1, [r7, #0]
 80050d6:	71fb      	strb	r3, [r7, #7]
 80050d8:	4613      	mov	r3, r2
 80050da:	71bb      	strb	r3, [r7, #6]

    if (i2cm_WriteBuff(I2Cx, &RegAddr, 1, RDA5807_TO)) {
        Error_Handler();
    } //*/

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 80050dc:	79bb      	ldrb	r3, [r7, #6]
 80050de:	005b      	lsls	r3, r3, #1
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	4619      	mov	r1, r3
 80050e4:	6838      	ldr	r0, [r7, #0]
 80050e6:	f7ff ff67 	bl	8004fb8 <rda5807_bytes_change>

    //err = i2cm_WriteBuff(I2Cx, (uint8_t *) pBuff, RegNum << 1, RDA5807_TO);
    //i2cm_Stop(I2Cx, RDA5807_TO);

    if (HAL_I2C_Mem_Write(i2cRDA,
 80050ea:	4b13      	ldr	r3, [pc, #76]	; (8005138 <rda5807_write+0x6c>)
 80050ec:	6818      	ldr	r0, [r3, #0]
 80050ee:	79fb      	ldrb	r3, [r7, #7]
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	79bb      	ldrb	r3, [r7, #6]
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	005b      	lsls	r3, r3, #1
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80050fe:	9102      	str	r1, [sp, #8]
 8005100:	9301      	str	r3, [sp, #4]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	2301      	movs	r3, #1
 8005108:	2122      	movs	r1, #34	; 0x22
 800510a:	f002 fdc5 	bl	8007c98 <HAL_I2C_Mem_Write>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d006      	beq.n	8005122 <rda5807_write+0x56>
    					  RDA5807_RandAccess_Addr,
						  RegAddr, I2C_MEMADD_SIZE_8BIT,
						  (uint8_t *)pBuff, RegNum << 1,
						  RDA5807_TO) != HAL_OK) {
    	devError |= devRDA;
 8005114:	4b09      	ldr	r3, [pc, #36]	; (800513c <rda5807_write+0x70>)
 8005116:	881b      	ldrh	r3, [r3, #0]
 8005118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800511c:	b29a      	uxth	r2, r3
 800511e:	4b07      	ldr	r3, [pc, #28]	; (800513c <rda5807_write+0x70>)
 8005120:	801a      	strh	r2, [r3, #0]
    }

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8005122:	79bb      	ldrb	r3, [r7, #6]
 8005124:	005b      	lsls	r3, r3, #1
 8005126:	b2db      	uxtb	r3, r3
 8005128:	4619      	mov	r1, r3
 800512a:	6838      	ldr	r0, [r7, #0]
 800512c:	f7ff ff44 	bl	8004fb8 <rda5807_bytes_change>
}
 8005130:	bf00      	nop
 8005132:	3708      	adds	r7, #8
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	20000200 	.word	0x20000200
 800513c:	2000193c 	.word	0x2000193c

08005140 <rda5807_SoftReset>:

//==============================================================================
// Процедура делает программный сброс rda5807
//==============================================================================
void rda5807_SoftReset()
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
tReg02h reg02;

    rda5807_read(2, (uint16_t *)&reg02, 1);
 8005146:	1d3b      	adds	r3, r7, #4
 8005148:	2201      	movs	r2, #1
 800514a:	4619      	mov	r1, r3
 800514c:	2002      	movs	r0, #2
 800514e:	f7ff ff89 	bl	8005064 <rda5807_read>

	reg02.bENABLE = 1;
 8005152:	793b      	ldrb	r3, [r7, #4]
 8005154:	f043 0301 	orr.w	r3, r3, #1
 8005158:	713b      	strb	r3, [r7, #4]
	reg02.bSOFT_RESET = 1;
 800515a:	793b      	ldrb	r3, [r7, #4]
 800515c:	f043 0302 	orr.w	r3, r3, #2
 8005160:	713b      	strb	r3, [r7, #4]
    rda5807_write(2, (uint16_t *)&reg02, 1);
 8005162:	1d3b      	adds	r3, r7, #4
 8005164:	2201      	movs	r2, #1
 8005166:	4619      	mov	r1, r3
 8005168:	2002      	movs	r0, #2
 800516a:	f7ff ffaf 	bl	80050cc <rda5807_write>

    reg02.bENABLE = 1;
 800516e:	793b      	ldrb	r3, [r7, #4]
 8005170:	f043 0301 	orr.w	r3, r3, #1
 8005174:	713b      	strb	r3, [r7, #4]
    reg02.bSOFT_RESET = 0;
 8005176:	793b      	ldrb	r3, [r7, #4]
 8005178:	f36f 0341 	bfc	r3, #1, #1
 800517c:	713b      	strb	r3, [r7, #4]
    rda5807_write(2, (uint16_t *)&reg02, 1);
 800517e:	1d3b      	adds	r3, r7, #4
 8005180:	2201      	movs	r2, #1
 8005182:	4619      	mov	r1, r3
 8005184:	2002      	movs	r0, #2
 8005186:	f7ff ffa1 	bl	80050cc <rda5807_write>
}
 800518a:	bf00      	nop
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
	...

08005194 <rda5807_SetupDefault>:

//==============================================================================
// Процедура производит начальную настройку rda5807
//==============================================================================
void rda5807_SetupDefault()
{
 8005194:	b580      	push	{r7, lr}
 8005196:	af00      	add	r7, sp, #0
	tReg06h Reg06;
	tReg07h Reg07;
} Buffs;*/

    // Регистр 0x02
    Buffs.Reg02.bENABLE = 1;
 8005198:	4a6b      	ldr	r2, [pc, #428]	; (8005348 <rda5807_SetupDefault+0x1b4>)
 800519a:	7813      	ldrb	r3, [r2, #0]
 800519c:	f043 0301 	orr.w	r3, r3, #1
 80051a0:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSOFT_RESET = 0;
 80051a2:	4a69      	ldr	r2, [pc, #420]	; (8005348 <rda5807_SetupDefault+0x1b4>)
 80051a4:	7813      	ldrb	r3, [r2, #0]
 80051a6:	f36f 0341 	bfc	r3, #1, #1
 80051aa:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bNEW_METHOD = 1;
 80051ac:	4a66      	ldr	r2, [pc, #408]	; (8005348 <rda5807_SetupDefault+0x1b4>)
 80051ae:	7813      	ldrb	r3, [r2, #0]
 80051b0:	f043 0304 	orr.w	r3, r3, #4
 80051b4:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bRDS_EN = 1;
 80051b6:	4a64      	ldr	r2, [pc, #400]	; (8005348 <rda5807_SetupDefault+0x1b4>)
 80051b8:	7813      	ldrb	r3, [r2, #0]
 80051ba:	f043 0308 	orr.w	r3, r3, #8
 80051be:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bCLK_MODE = 0;        // 32.768
 80051c0:	4a61      	ldr	r2, [pc, #388]	; (8005348 <rda5807_SetupDefault+0x1b4>)
 80051c2:	7813      	ldrb	r3, [r2, #0]
 80051c4:	f36f 1306 	bfc	r3, #4, #3
 80051c8:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSKMODE = 0;
 80051ca:	4a5f      	ldr	r2, [pc, #380]	; (8005348 <rda5807_SetupDefault+0x1b4>)
 80051cc:	7813      	ldrb	r3, [r2, #0]
 80051ce:	f36f 13c7 	bfc	r3, #7, #1
 80051d2:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSEEK = 0;
 80051d4:	4a5c      	ldr	r2, [pc, #368]	; (8005348 <rda5807_SetupDefault+0x1b4>)
 80051d6:	7853      	ldrb	r3, [r2, #1]
 80051d8:	f36f 0300 	bfc	r3, #0, #1
 80051dc:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bSEEKUP = 1;
 80051de:	4a5a      	ldr	r2, [pc, #360]	; (8005348 <rda5807_SetupDefault+0x1b4>)
 80051e0:	7853      	ldrb	r3, [r2, #1]
 80051e2:	f043 0302 	orr.w	r3, r3, #2
 80051e6:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bRCLK_DirectInput = 0;
 80051e8:	4a57      	ldr	r2, [pc, #348]	; (8005348 <rda5807_SetupDefault+0x1b4>)
 80051ea:	7853      	ldrb	r3, [r2, #1]
 80051ec:	f36f 0382 	bfc	r3, #2, #1
 80051f0:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bRCLK_NonCalibMode = 0;
 80051f2:	4a55      	ldr	r2, [pc, #340]	; (8005348 <rda5807_SetupDefault+0x1b4>)
 80051f4:	7853      	ldrb	r3, [r2, #1]
 80051f6:	f36f 03c3 	bfc	r3, #3, #1
 80051fa:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bBASS = 0;
 80051fc:	4a52      	ldr	r2, [pc, #328]	; (8005348 <rda5807_SetupDefault+0x1b4>)
 80051fe:	7853      	ldrb	r3, [r2, #1]
 8005200:	f36f 1304 	bfc	r3, #4, #1
 8005204:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bMONO = 0;
 8005206:	4a50      	ldr	r2, [pc, #320]	; (8005348 <rda5807_SetupDefault+0x1b4>)
 8005208:	7853      	ldrb	r3, [r2, #1]
 800520a:	f36f 1345 	bfc	r3, #5, #1
 800520e:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bDMUTE = 1;
 8005210:	4a4d      	ldr	r2, [pc, #308]	; (8005348 <rda5807_SetupDefault+0x1b4>)
 8005212:	7853      	ldrb	r3, [r2, #1]
 8005214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005218:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bDHIZ = 1;
 800521a:	4a4b      	ldr	r2, [pc, #300]	; (8005348 <rda5807_SetupDefault+0x1b4>)
 800521c:	7853      	ldrb	r3, [r2, #1]
 800521e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005222:	7053      	strb	r3, [r2, #1]
    // Регистр 0x03
    Buffs.Reg03.bSPACE = 0;//Step;//0;   // Шаг настройки - 0 = 100 КГц
 8005224:	4a48      	ldr	r2, [pc, #288]	; (8005348 <rda5807_SetupDefault+0x1b4>)
 8005226:	7893      	ldrb	r3, [r2, #2]
 8005228:	f36f 0301 	bfc	r3, #0, #2
 800522c:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bBAND = Band;//2;//0;    // Диапазон 2 - 76–108 MHz
 800522e:	4b47      	ldr	r3, [pc, #284]	; (800534c <rda5807_SetupDefault+0x1b8>)
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	f003 0303 	and.w	r3, r3, #3
 8005236:	b2d9      	uxtb	r1, r3
 8005238:	4a43      	ldr	r2, [pc, #268]	; (8005348 <rda5807_SetupDefault+0x1b4>)
 800523a:	7893      	ldrb	r3, [r2, #2]
 800523c:	f361 0383 	bfi	r3, r1, #2, #2
 8005240:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bTUNE = 1;
 8005242:	4a41      	ldr	r2, [pc, #260]	; (8005348 <rda5807_SetupDefault+0x1b4>)
 8005244:	7893      	ldrb	r3, [r2, #2]
 8005246:	f043 0310 	orr.w	r3, r3, #16
 800524a:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bDIRECT_MODE = 0;
 800524c:	4a3e      	ldr	r2, [pc, #248]	; (8005348 <rda5807_SetupDefault+0x1b4>)
 800524e:	7893      	ldrb	r3, [r2, #2]
 8005250:	f36f 1345 	bfc	r3, #5, #1
 8005254:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bCHAN = 0;
 8005256:	4a3c      	ldr	r2, [pc, #240]	; (8005348 <rda5807_SetupDefault+0x1b4>)
 8005258:	8853      	ldrh	r3, [r2, #2]
 800525a:	f36f 138f 	bfc	r3, #6, #10
 800525e:	8053      	strh	r3, [r2, #2]
    // Регистр 0x04
    Buffs.Reg04.bRSVD1 = 0;
 8005260:	4b39      	ldr	r3, [pc, #228]	; (8005348 <rda5807_SetupDefault+0x1b4>)
 8005262:	2200      	movs	r2, #0
 8005264:	711a      	strb	r2, [r3, #4]
    Buffs.Reg04.bAFCD = 0;
 8005266:	4a38      	ldr	r2, [pc, #224]	; (8005348 <rda5807_SetupDefault+0x1b4>)
 8005268:	7953      	ldrb	r3, [r2, #5]
 800526a:	f36f 0300 	bfc	r3, #0, #1
 800526e:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bSOFTMUTE_EN = 1;
 8005270:	4a35      	ldr	r2, [pc, #212]	; (8005348 <rda5807_SetupDefault+0x1b4>)
 8005272:	7953      	ldrb	r3, [r2, #5]
 8005274:	f043 0302 	orr.w	r3, r3, #2
 8005278:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bRSVD2 = 0;
 800527a:	4a33      	ldr	r2, [pc, #204]	; (8005348 <rda5807_SetupDefault+0x1b4>)
 800527c:	7953      	ldrb	r3, [r2, #5]
 800527e:	f36f 0382 	bfc	r3, #2, #1
 8005282:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bDE = 0;
 8005284:	4a30      	ldr	r2, [pc, #192]	; (8005348 <rda5807_SetupDefault+0x1b4>)
 8005286:	7953      	ldrb	r3, [r2, #5]
 8005288:	f36f 03c3 	bfc	r3, #3, #1
 800528c:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bRSVD3 = 0;
 800528e:	4a2e      	ldr	r2, [pc, #184]	; (8005348 <rda5807_SetupDefault+0x1b4>)
 8005290:	7953      	ldrb	r3, [r2, #5]
 8005292:	f36f 1307 	bfc	r3, #4, #4
 8005296:	7153      	strb	r3, [r2, #5]
    // Регистр 0x05
    Buffs.Reg05.bVOLUME = 0;
 8005298:	4a2b      	ldr	r2, [pc, #172]	; (8005348 <rda5807_SetupDefault+0x1b4>)
 800529a:	7993      	ldrb	r3, [r2, #6]
 800529c:	f36f 0303 	bfc	r3, #0, #4
 80052a0:	7193      	strb	r3, [r2, #6]
    Buffs.Reg05.bANT_GAIN = 0;
 80052a2:	4a29      	ldr	r2, [pc, #164]	; (8005348 <rda5807_SetupDefault+0x1b4>)
 80052a4:	7993      	ldrb	r3, [r2, #6]
 80052a6:	f36f 1305 	bfc	r3, #4, #2
 80052aa:	7193      	strb	r3, [r2, #6]
    Buffs.Reg05.bANT_TYPE = ANT_TYPE_Both;//ANT_TYPE_External;//ANT_TYPE_Headphones;//ANT_TYPE_Both;
 80052ac:	4a26      	ldr	r2, [pc, #152]	; (8005348 <rda5807_SetupDefault+0x1b4>)
 80052ae:	7993      	ldrb	r3, [r2, #6]
 80052b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052b4:	7193      	strb	r3, [r2, #6]
    Buffs.Reg05.bSEEKTH = 8;
 80052b6:	4a24      	ldr	r2, [pc, #144]	; (8005348 <rda5807_SetupDefault+0x1b4>)
 80052b8:	79d3      	ldrb	r3, [r2, #7]
 80052ba:	2108      	movs	r1, #8
 80052bc:	f361 0303 	bfi	r3, r1, #0, #4
 80052c0:	71d3      	strb	r3, [r2, #7]
    Buffs.Reg05.bRSVD3 = 0;
 80052c2:	4a21      	ldr	r2, [pc, #132]	; (8005348 <rda5807_SetupDefault+0x1b4>)
 80052c4:	79d3      	ldrb	r3, [r2, #7]
 80052c6:	f36f 1306 	bfc	r3, #4, #3
 80052ca:	71d3      	strb	r3, [r2, #7]
    Buffs.Reg05.bINT_MODE = 1;
 80052cc:	4a1e      	ldr	r2, [pc, #120]	; (8005348 <rda5807_SetupDefault+0x1b4>)
 80052ce:	79d3      	ldrb	r3, [r2, #7]
 80052d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052d4:	71d3      	strb	r3, [r2, #7]
    // Регистр 0x06
    Buffs.Reg06.bRSVD1 = 0;
 80052d6:	4a1c      	ldr	r2, [pc, #112]	; (8005348 <rda5807_SetupDefault+0x1b4>)
 80052d8:	8913      	ldrh	r3, [r2, #8]
 80052da:	f36f 030c 	bfc	r3, #0, #13
 80052de:	8113      	strh	r3, [r2, #8]
    Buffs.Reg06.bOPEN_MODE = 0;
 80052e0:	4a19      	ldr	r2, [pc, #100]	; (8005348 <rda5807_SetupDefault+0x1b4>)
 80052e2:	7a53      	ldrb	r3, [r2, #9]
 80052e4:	f36f 1346 	bfc	r3, #5, #2
 80052e8:	7253      	strb	r3, [r2, #9]
    Buffs.Reg06.bRSVD2 = 0;
 80052ea:	4a17      	ldr	r2, [pc, #92]	; (8005348 <rda5807_SetupDefault+0x1b4>)
 80052ec:	7a53      	ldrb	r3, [r2, #9]
 80052ee:	f36f 13c7 	bfc	r3, #7, #1
 80052f2:	7253      	strb	r3, [r2, #9]
    // Регистр 0x07
    Buffs.Reg07.bFREQ_MODE = 0;
 80052f4:	4a14      	ldr	r2, [pc, #80]	; (8005348 <rda5807_SetupDefault+0x1b4>)
 80052f6:	7a93      	ldrb	r3, [r2, #10]
 80052f8:	f36f 0300 	bfc	r3, #0, #1
 80052fc:	7293      	strb	r3, [r2, #10]
    Buffs.Reg07.bSOFTBLEND_EN = 1;
 80052fe:	4a12      	ldr	r2, [pc, #72]	; (8005348 <rda5807_SetupDefault+0x1b4>)
 8005300:	7a93      	ldrb	r3, [r2, #10]
 8005302:	f043 0302 	orr.w	r3, r3, #2
 8005306:	7293      	strb	r3, [r2, #10]
    Buffs.Reg07.bSEEK_TH_OLD = 0;
 8005308:	4a0f      	ldr	r2, [pc, #60]	; (8005348 <rda5807_SetupDefault+0x1b4>)
 800530a:	7a93      	ldrb	r3, [r2, #10]
 800530c:	f36f 0387 	bfc	r3, #2, #6
 8005310:	7293      	strb	r3, [r2, #10]
    Buffs.Reg07.bRSVD1 = 0;
 8005312:	4a0d      	ldr	r2, [pc, #52]	; (8005348 <rda5807_SetupDefault+0x1b4>)
 8005314:	7ad3      	ldrb	r3, [r2, #11]
 8005316:	f36f 0300 	bfc	r3, #0, #1
 800531a:	72d3      	strb	r3, [r2, #11]
    Buffs.Reg07.b65M_50M_MODE = 1;
 800531c:	4a0a      	ldr	r2, [pc, #40]	; (8005348 <rda5807_SetupDefault+0x1b4>)
 800531e:	7ad3      	ldrb	r3, [r2, #11]
 8005320:	f043 0302 	orr.w	r3, r3, #2
 8005324:	72d3      	strb	r3, [r2, #11]
    Buffs.Reg07.bTH_SOFRBLEND = 16;
 8005326:	4a08      	ldr	r2, [pc, #32]	; (8005348 <rda5807_SetupDefault+0x1b4>)
 8005328:	7ad3      	ldrb	r3, [r2, #11]
 800532a:	2110      	movs	r1, #16
 800532c:	f361 0386 	bfi	r3, r1, #2, #5
 8005330:	72d3      	strb	r3, [r2, #11]
    Buffs.Reg07.bRSVD2 = 0;
 8005332:	4a05      	ldr	r2, [pc, #20]	; (8005348 <rda5807_SetupDefault+0x1b4>)
 8005334:	7ad3      	ldrb	r3, [r2, #11]
 8005336:	f36f 13c7 	bfc	r3, #7, #1
 800533a:	72d3      	strb	r3, [r2, #11]

    // Пишем регистры функцией записи регистрового файла
    rda5807_write_regfile((uint16_t *)&(Buffs.Reg02), 6);
 800533c:	2106      	movs	r1, #6
 800533e:	4802      	ldr	r0, [pc, #8]	; (8005348 <rda5807_SetupDefault+0x1b4>)
 8005340:	f7ff fe5c 	bl	8004ffc <rda5807_write_regfile>
}
 8005344:	bf00      	nop
 8005346:	bd80      	pop	{r7, pc}
 8005348:	2000357c 	.word	0x2000357c
 800534c:	200001dc 	.word	0x200001dc

08005350 <rda5807_SetVolume>:

//==============================================================================
// Процедура устанавливает уровень громкости (0..16) выхода rda5807. При Value=0 включает MUTE
//==============================================================================
void rda5807_SetVolume(uint8_t Value)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	4603      	mov	r3, r0
 8005358:	71fb      	strb	r3, [r7, #7]
//tReg02h Reg02;
//tReg05h Reg05;
uint8_t Mute = Value ? 0 : 1;
 800535a:	79fb      	ldrb	r3, [r7, #7]
 800535c:	2b00      	cmp	r3, #0
 800535e:	bf0c      	ite	eq
 8005360:	2301      	moveq	r3, #1
 8005362:	2300      	movne	r3, #0
 8005364:	b2db      	uxtb	r3, r3
 8005366:	73fb      	strb	r3, [r7, #15]

    if (Value > 16) Value = 16;
 8005368:	79fb      	ldrb	r3, [r7, #7]
 800536a:	2b10      	cmp	r3, #16
 800536c:	d901      	bls.n	8005372 <rda5807_SetVolume+0x22>
 800536e:	2310      	movs	r3, #16
 8005370:	71fb      	strb	r3, [r7, #7]

    Value--;    // Значение для поля Volume на 1 меньше, чем входной параметр функции
 8005372:	79fb      	ldrb	r3, [r7, #7]
 8005374:	3b01      	subs	r3, #1
 8005376:	71fb      	strb	r3, [r7, #7]

    if (!Mute) {
 8005378:	7bfb      	ldrb	r3, [r7, #15]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d112      	bne.n	80053a4 <rda5807_SetVolume+0x54>
        // Читаем регистр 0x05
        rda5807_read(5, (uint16_t *)&Buffs.Reg05, 1);
 800537e:	2201      	movs	r2, #1
 8005380:	4915      	ldr	r1, [pc, #84]	; (80053d8 <rda5807_SetVolume+0x88>)
 8005382:	2005      	movs	r0, #5
 8005384:	f7ff fe6e 	bl	8005064 <rda5807_read>
        // Меняем значение поля VOLUME
        Buffs.Reg05.bVOLUME = Value;
 8005388:	79fb      	ldrb	r3, [r7, #7]
 800538a:	f003 030f 	and.w	r3, r3, #15
 800538e:	b2d9      	uxtb	r1, r3
 8005390:	4a12      	ldr	r2, [pc, #72]	; (80053dc <rda5807_SetVolume+0x8c>)
 8005392:	7993      	ldrb	r3, [r2, #6]
 8005394:	f361 0303 	bfi	r3, r1, #0, #4
 8005398:	7193      	strb	r3, [r2, #6]
        // Пишем регистр 0x05
        rda5807_write(5, (uint16_t *)&Buffs.Reg05, 1);
 800539a:	2201      	movs	r2, #1
 800539c:	490e      	ldr	r1, [pc, #56]	; (80053d8 <rda5807_SetVolume+0x88>)
 800539e:	2005      	movs	r0, #5
 80053a0:	f7ff fe94 	bl	80050cc <rda5807_write>
    }

    // Читаем регистр 0x02
    rda5807_read(2, (uint16_t *)&Buffs.Reg02, 1);
 80053a4:	2201      	movs	r2, #1
 80053a6:	490d      	ldr	r1, [pc, #52]	; (80053dc <rda5807_SetVolume+0x8c>)
 80053a8:	2002      	movs	r0, #2
 80053aa:	f7ff fe5b 	bl	8005064 <rda5807_read>
    // Меняем значение поля VOLUME
    Buffs.Reg02.bDMUTE = Mute ? 0 : 1;
 80053ae:	7bfb      	ldrb	r3, [r7, #15]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	bf0c      	ite	eq
 80053b4:	2301      	moveq	r3, #1
 80053b6:	2300      	movne	r3, #0
 80053b8:	b2d9      	uxtb	r1, r3
 80053ba:	4a08      	ldr	r2, [pc, #32]	; (80053dc <rda5807_SetVolume+0x8c>)
 80053bc:	7853      	ldrb	r3, [r2, #1]
 80053be:	f361 1386 	bfi	r3, r1, #6, #1
 80053c2:	7053      	strb	r3, [r2, #1]
    // Пишем регистр 0x02
    rda5807_write(2, (uint16_t *)&Buffs.Reg02, 1);
 80053c4:	2201      	movs	r2, #1
 80053c6:	4905      	ldr	r1, [pc, #20]	; (80053dc <rda5807_SetVolume+0x8c>)
 80053c8:	2002      	movs	r0, #2
 80053ca:	f7ff fe7f 	bl	80050cc <rda5807_write>
}
 80053ce:	bf00      	nop
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	20003582 	.word	0x20003582
 80053dc:	2000357c 	.word	0x2000357c

080053e0 <rda5807_SetBassBoost>:

//==============================================================================
// Процедура включает/выключает BassBoost
//==============================================================================
void rda5807_SetBassBoost(uint8_t Value)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	4603      	mov	r3, r0
 80053e8:	71fb      	strb	r3, [r7, #7]
//tReg02h Reg02;

    // Читаем регистр 0x02
    rda5807_read(2, (uint16_t *)&Buffs.Reg02, 1);
 80053ea:	2201      	movs	r2, #1
 80053ec:	490b      	ldr	r1, [pc, #44]	; (800541c <rda5807_SetBassBoost+0x3c>)
 80053ee:	2002      	movs	r0, #2
 80053f0:	f7ff fe38 	bl	8005064 <rda5807_read>
    // Меняем значение поля BASS
    Buffs.Reg02.bBASS = (Value) ? 1 : 0;
 80053f4:	79fb      	ldrb	r3, [r7, #7]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	bf14      	ite	ne
 80053fa:	2301      	movne	r3, #1
 80053fc:	2300      	moveq	r3, #0
 80053fe:	b2d9      	uxtb	r1, r3
 8005400:	4a06      	ldr	r2, [pc, #24]	; (800541c <rda5807_SetBassBoost+0x3c>)
 8005402:	7853      	ldrb	r3, [r2, #1]
 8005404:	f361 1304 	bfi	r3, r1, #4, #1
 8005408:	7053      	strb	r3, [r2, #1]
    // Пишем регистр 0x02
    rda5807_write(2, (uint16_t *)&Buffs.Reg02, 1);
 800540a:	2201      	movs	r2, #1
 800540c:	4903      	ldr	r1, [pc, #12]	; (800541c <rda5807_SetBassBoost+0x3c>)
 800540e:	2002      	movs	r0, #2
 8005410:	f7ff fe5c 	bl	80050cc <rda5807_write>
}
 8005414:	bf00      	nop
 8005416:	3708      	adds	r7, #8
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	2000357c 	.word	0x2000357c

08005420 <rda5807_SetFreq_In100Khz>:
//==============================================================================
// Процедура устанавливает текущую частоту Freq100kHz и стартует перенастройку rda5807 на эту частоту.
// Окончание процесса можно установки можно проконтроллировать по обнулению бита STR в регистре 0x0A (функцией rda5807_Get_SeekTuneReadyFlag)
//==============================================================================
void rda5807_SetFreq_In100Khz(uint16_t Freq100kHz)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	4603      	mov	r3, r0
 8005428:	80fb      	strh	r3, [r7, #6]
//tReg03h Reg03;
uint16_t l = 870, r = 1080;
 800542a:	f240 3366 	movw	r3, #870	; 0x366
 800542e:	81fb      	strh	r3, [r7, #14]
 8005430:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8005434:	81bb      	strh	r3, [r7, #12]

    // Проверка входного параметра для диапазона Buffs.Reg03.bBAND
	switch (Buffs.Reg03.bBAND) {    // Диапазон 87–108 MHz
 8005436:	4b33      	ldr	r3, [pc, #204]	; (8005504 <rda5807_SetFreq_In100Khz+0xe4>)
 8005438:	789b      	ldrb	r3, [r3, #2]
 800543a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b03      	cmp	r3, #3
 8005442:	d011      	beq.n	8005468 <rda5807_SetFreq_In100Khz+0x48>
 8005444:	2b03      	cmp	r3, #3
 8005446:	dc16      	bgt.n	8005476 <rda5807_SetFreq_In100Khz+0x56>
 8005448:	2b01      	cmp	r3, #1
 800544a:	d002      	beq.n	8005452 <rda5807_SetFreq_In100Khz+0x32>
 800544c:	2b02      	cmp	r3, #2
 800544e:	d007      	beq.n	8005460 <rda5807_SetFreq_In100Khz+0x40>
 8005450:	e011      	b.n	8005476 <rda5807_SetFreq_In100Khz+0x56>
		//case 0:// 00 = 87–108 MHz (US/Europe)
		//break;
		case 1:// 01 = 76–91 MHz (Japan)
			l = 760;
 8005452:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8005456:	81fb      	strh	r3, [r7, #14]
			r = 910;
 8005458:	f240 338e 	movw	r3, #910	; 0x38e
 800545c:	81bb      	strh	r3, [r7, #12]
		break;
 800545e:	e00a      	b.n	8005476 <rda5807_SetFreq_In100Khz+0x56>
		case 2:// 10 = 76–108 MHz (world wide)
			l = 760;
 8005460:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8005464:	81fb      	strh	r3, [r7, #14]
		break;
 8005466:	e006      	b.n	8005476 <rda5807_SetFreq_In100Khz+0x56>
		case 3:// 11 = 65 –76 MHz (East Europe) or 50-65MHz
			l = 650;
 8005468:	f240 238a 	movw	r3, #650	; 0x28a
 800546c:	81fb      	strh	r3, [r7, #14]
			r = 760;
 800546e:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8005472:	81bb      	strh	r3, [r7, #12]
		break;
 8005474:	bf00      	nop
	}
	lBand = ((float)l) / 10;
 8005476:	89fb      	ldrh	r3, [r7, #14]
 8005478:	ee07 3a90 	vmov	s15, r3
 800547c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005480:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005484:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005488:	4b1f      	ldr	r3, [pc, #124]	; (8005508 <rda5807_SetFreq_In100Khz+0xe8>)
 800548a:	edc3 7a00 	vstr	s15, [r3]
	rBand = ((float)r) / 10;
 800548e:	89bb      	ldrh	r3, [r7, #12]
 8005490:	ee07 3a90 	vmov	s15, r3
 8005494:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005498:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800549c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80054a0:	4b1a      	ldr	r3, [pc, #104]	; (800550c <rda5807_SetFreq_In100Khz+0xec>)
 80054a2:	edc3 7a00 	vstr	s15, [r3]

    if (Freq100kHz < l)  Freq100kHz = l;
 80054a6:	88fa      	ldrh	r2, [r7, #6]
 80054a8:	89fb      	ldrh	r3, [r7, #14]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d201      	bcs.n	80054b2 <rda5807_SetFreq_In100Khz+0x92>
 80054ae:	89fb      	ldrh	r3, [r7, #14]
 80054b0:	80fb      	strh	r3, [r7, #6]
    if (Freq100kHz > r) Freq100kHz = r;
 80054b2:	88fa      	ldrh	r2, [r7, #6]
 80054b4:	89bb      	ldrh	r3, [r7, #12]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d901      	bls.n	80054be <rda5807_SetFreq_In100Khz+0x9e>
 80054ba:	89bb      	ldrh	r3, [r7, #12]
 80054bc:	80fb      	strh	r3, [r7, #6]

    // Вычитаем начало диапазона (left)
    Freq100kHz -= l;
 80054be:	88fa      	ldrh	r2, [r7, #6]
 80054c0:	89fb      	ldrh	r3, [r7, #14]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	80fb      	strh	r3, [r7, #6]

    // Читаем регистр 0x03
    rda5807_read(3, (uint16_t *)&Buffs.Reg03, 1);
 80054c6:	2201      	movs	r2, #1
 80054c8:	4911      	ldr	r1, [pc, #68]	; (8005510 <rda5807_SetFreq_In100Khz+0xf0>)
 80054ca:	2003      	movs	r0, #3
 80054cc:	f7ff fdca 	bl	8005064 <rda5807_read>
    // Меняем значение поля CHAN
    Buffs.Reg03.bCHAN = Freq100kHz;
 80054d0:	88fb      	ldrh	r3, [r7, #6]
 80054d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054d6:	b299      	uxth	r1, r3
 80054d8:	4a0a      	ldr	r2, [pc, #40]	; (8005504 <rda5807_SetFreq_In100Khz+0xe4>)
 80054da:	8853      	ldrh	r3, [r2, #2]
 80054dc:	f361 138f 	bfi	r3, r1, #6, #10
 80054e0:	8053      	strh	r3, [r2, #2]
    // Выставляем флаг начала перенастройки на канал
    Buffs.Reg03.bTUNE = 1;
 80054e2:	4a08      	ldr	r2, [pc, #32]	; (8005504 <rda5807_SetFreq_In100Khz+0xe4>)
 80054e4:	7893      	ldrb	r3, [r2, #2]
 80054e6:	f043 0310 	orr.w	r3, r3, #16
 80054ea:	7093      	strb	r3, [r2, #2]
    // Пишем регистр 0x03
    rda5807_write(3, (uint16_t *)&Buffs.Reg03, 1);
 80054ec:	2201      	movs	r2, #1
 80054ee:	4908      	ldr	r1, [pc, #32]	; (8005510 <rda5807_SetFreq_In100Khz+0xf0>)
 80054f0:	2003      	movs	r0, #3
 80054f2:	f7ff fdeb 	bl	80050cc <rda5807_write>

    HAL_Delay(50);
 80054f6:	2032      	movs	r0, #50	; 0x32
 80054f8:	f001 fc52 	bl	8006da0 <HAL_Delay>
}
 80054fc:	bf00      	nop
 80054fe:	3710      	adds	r7, #16
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	2000357c 	.word	0x2000357c
 8005508:	20002d8c 	.word	0x20002d8c
 800550c:	20002d90 	.word	0x20002d90
 8005510:	2000357e 	.word	0x2000357e

08005514 <rda5807_GetFreq_In100Khz>:

//==============================================================================
// Функция читает текущую частоту, на которую настроен rda5807
//==============================================================================
uint16_t rda5807_GetFreq_In100Khz()
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 800551a:	2201      	movs	r2, #1
 800551c:	491b      	ldr	r1, [pc, #108]	; (800558c <rda5807_GetFreq_In100Khz+0x78>)
 800551e:	200a      	movs	r0, #10
 8005520:	f7ff fda0 	bl	8005064 <rda5807_read>

    uint16_t Freq100kHz = Buffs.Reg0A.bREADCHAN;
 8005524:	4b1a      	ldr	r3, [pc, #104]	; (8005590 <rda5807_GetFreq_In100Khz+0x7c>)
 8005526:	8a1b      	ldrh	r3, [r3, #16]
 8005528:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800552c:	b29b      	uxth	r3, r3
 800552e:	80bb      	strh	r3, [r7, #4]

    if (Freq100kHz == 319) return 0;
 8005530:	88bb      	ldrh	r3, [r7, #4]
 8005532:	f240 123f 	movw	r2, #319	; 0x13f
 8005536:	4293      	cmp	r3, r2
 8005538:	d101      	bne.n	800553e <rda5807_GetFreq_In100Khz+0x2a>
 800553a:	2300      	movs	r3, #0
 800553c:	e021      	b.n	8005582 <rda5807_GetFreq_In100Khz+0x6e>

    // Прибавляем начало диапазона (87 МГц)
    uint16_t left = 870;
 800553e:	f240 3366 	movw	r3, #870	; 0x366
 8005542:	80fb      	strh	r3, [r7, #6]
    switch (Buffs.Reg03.bBAND) {    // Диапазон 87–108 MHz
 8005544:	4b12      	ldr	r3, [pc, #72]	; (8005590 <rda5807_GetFreq_In100Khz+0x7c>)
 8005546:	789b      	ldrb	r3, [r3, #2]
 8005548:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b03      	cmp	r3, #3
 8005550:	d00e      	beq.n	8005570 <rda5807_GetFreq_In100Khz+0x5c>
 8005552:	2b03      	cmp	r3, #3
 8005554:	dc10      	bgt.n	8005578 <rda5807_GetFreq_In100Khz+0x64>
 8005556:	2b01      	cmp	r3, #1
 8005558:	d002      	beq.n	8005560 <rda5807_GetFreq_In100Khz+0x4c>
 800555a:	2b02      	cmp	r3, #2
 800555c:	d004      	beq.n	8005568 <rda5807_GetFreq_In100Khz+0x54>
 800555e:	e00b      	b.n	8005578 <rda5807_GetFreq_In100Khz+0x64>
    	//case 0:// 00 = 87–108 MHz (US/Europe)
    	//break;
    	case 1:// 01 = 76–91 MHz (Japan)
    		left = 760;
 8005560:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8005564:	80fb      	strh	r3, [r7, #6]
    	break;
 8005566:	e007      	b.n	8005578 <rda5807_GetFreq_In100Khz+0x64>
    	case 2:// 10 = 76–108 MHz (world wide)
    		left = 760;
 8005568:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 800556c:	80fb      	strh	r3, [r7, #6]
    	break;
 800556e:	e003      	b.n	8005578 <rda5807_GetFreq_In100Khz+0x64>
    	case 3:// 11 = 65 –76 MHz (East Europe) or 50-65MHz
    		left = 650;
 8005570:	f240 238a 	movw	r3, #650	; 0x28a
 8005574:	80fb      	strh	r3, [r7, #6]
    	break;
 8005576:	bf00      	nop
    }
    Freq100kHz += left;
 8005578:	88ba      	ldrh	r2, [r7, #4]
 800557a:	88fb      	ldrh	r3, [r7, #6]
 800557c:	4413      	add	r3, r2
 800557e:	80bb      	strh	r3, [r7, #4]

    return Freq100kHz;
 8005580:	88bb      	ldrh	r3, [r7, #4]
}
 8005582:	4618      	mov	r0, r3
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	2000358c 	.word	0x2000358c
 8005590:	2000357c 	.word	0x2000357c

08005594 <rda5807_StartSeek>:

//==============================================================================
// Процедура стартует поиск радиостанции вверх/вниз
//==============================================================================
void rda5807_StartSeek(uint8_t Up)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	4603      	mov	r3, r0
 800559c:	71fb      	strb	r3, [r7, #7]
//tReg02h Reg02;

    // Читаем регистр 0x02
    rda5807_read(0x02, (uint16_t *)&Buffs.Reg02, 1);
 800559e:	2201      	movs	r2, #1
 80055a0:	4910      	ldr	r1, [pc, #64]	; (80055e4 <rda5807_StartSeek+0x50>)
 80055a2:	2002      	movs	r0, #2
 80055a4:	f7ff fd5e 	bl	8005064 <rda5807_read>

    Buffs.Reg02.bSKMODE = 1;          // 07 Seek Mode (0 = wrap at the upper or lower band limit and continue seeking; 1 = stop seeking at the upper or lower band limit)
 80055a8:	4a0e      	ldr	r2, [pc, #56]	; (80055e4 <rda5807_StartSeek+0x50>)
 80055aa:	7813      	ldrb	r3, [r2, #0]
 80055ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055b0:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSEEK = 1;            // 08 Seek (0 = Disable stop seek; 1 = Enable)
 80055b2:	4a0c      	ldr	r2, [pc, #48]	; (80055e4 <rda5807_StartSeek+0x50>)
 80055b4:	7853      	ldrb	r3, [r2, #1]
 80055b6:	f043 0301 	orr.w	r3, r3, #1
 80055ba:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bSEEKUP = Up ? 1 : 0; // 09 Seek Up (0 = Seek down; 1 = Seek up)
 80055bc:	79fb      	ldrb	r3, [r7, #7]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	bf14      	ite	ne
 80055c2:	2301      	movne	r3, #1
 80055c4:	2300      	moveq	r3, #0
 80055c6:	b2d9      	uxtb	r1, r3
 80055c8:	4a06      	ldr	r2, [pc, #24]	; (80055e4 <rda5807_StartSeek+0x50>)
 80055ca:	7853      	ldrb	r3, [r2, #1]
 80055cc:	f361 0341 	bfi	r3, r1, #1, #1
 80055d0:	7053      	strb	r3, [r2, #1]

    // Пишем регистр 0x02
    rda5807_write(0x02, (uint16_t *)&Buffs.Reg02, 1);
 80055d2:	2201      	movs	r2, #1
 80055d4:	4903      	ldr	r1, [pc, #12]	; (80055e4 <rda5807_StartSeek+0x50>)
 80055d6:	2002      	movs	r0, #2
 80055d8:	f7ff fd78 	bl	80050cc <rda5807_write>
}
 80055dc:	bf00      	nop
 80055de:	3708      	adds	r7, #8
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	2000357c 	.word	0x2000357c

080055e8 <rda5807_Get_SeekTuneReadyFlag>:
//==============================================================================
// Функция возвращает состояние бита STR (SeekTuneReadyFlag)
// SeekTuneReadyFlag=1 пока идёт процесс настройки на частоту или поиск радиостанции.
//==============================================================================
uint8_t rda5807_Get_SeekTuneReadyFlag()
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 80055ec:	2201      	movs	r2, #1
 80055ee:	4905      	ldr	r1, [pc, #20]	; (8005604 <rda5807_Get_SeekTuneReadyFlag+0x1c>)
 80055f0:	200a      	movs	r0, #10
 80055f2:	f7ff fd37 	bl	8005064 <rda5807_read>

    return Buffs.Reg0A.bSTC;
 80055f6:	4b04      	ldr	r3, [pc, #16]	; (8005608 <rda5807_Get_SeekTuneReadyFlag+0x20>)
 80055f8:	7c5b      	ldrb	r3, [r3, #17]
 80055fa:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80055fe:	b2db      	uxtb	r3, r3
}
 8005600:	4618      	mov	r0, r3
 8005602:	bd80      	pop	{r7, pc}
 8005604:	2000358c 	.word	0x2000358c
 8005608:	2000357c 	.word	0x2000357c

0800560c <rda5807_Get_StereoMonoFlag>:
//==============================================================================
//==============================================================================
bool rda5807_Get_StereoMonoFlag()
{
 800560c:	b580      	push	{r7, lr}
 800560e:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 8005610:	2201      	movs	r2, #1
 8005612:	4908      	ldr	r1, [pc, #32]	; (8005634 <rda5807_Get_StereoMonoFlag+0x28>)
 8005614:	200a      	movs	r0, #10
 8005616:	f7ff fd25 	bl	8005064 <rda5807_read>

    return Buffs.Reg0A.bST;     // Stereo Indicator (0 = Mono; 1 = Stereo)
 800561a:	4b07      	ldr	r3, [pc, #28]	; (8005638 <rda5807_Get_StereoMonoFlag+0x2c>)
 800561c:	7c5b      	ldrb	r3, [r3, #17]
 800561e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005622:	b2db      	uxtb	r3, r3
 8005624:	2b00      	cmp	r3, #0
 8005626:	bf14      	ite	ne
 8005628:	2301      	movne	r3, #1
 800562a:	2300      	moveq	r3, #0
 800562c:	b2db      	uxtb	r3, r3
}
 800562e:	4618      	mov	r0, r3
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	2000358c 	.word	0x2000358c
 8005638:	2000357c 	.word	0x2000357c

0800563c <rda5807_Get_Channel>:
//==============================================================================
uint16_t rda5807_Get_Channel()
{
 800563c:	b580      	push	{r7, lr}
 800563e:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 8005640:	2201      	movs	r2, #1
 8005642:	4905      	ldr	r1, [pc, #20]	; (8005658 <rda5807_Get_Channel+0x1c>)
 8005644:	200a      	movs	r0, #10
 8005646:	f7ff fd0d 	bl	8005064 <rda5807_read>

    return Buffs.Reg0A.bREADCHAN;    // 0-9 Read Channel.
 800564a:	4b04      	ldr	r3, [pc, #16]	; (800565c <rda5807_Get_Channel+0x20>)
 800564c:	8a1b      	ldrh	r3, [r3, #16]
 800564e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005652:	b29b      	uxth	r3, r3
}
 8005654:	4618      	mov	r0, r3
 8005656:	bd80      	pop	{r7, pc}
 8005658:	2000358c 	.word	0x2000358c
 800565c:	2000357c 	.word	0x2000357c

08005660 <rda5807_Set_Band>:
//==============================================================================
uint8_t rda5807_Set_Band(uint8_t band)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	4603      	mov	r3, r0
 8005668:	71fb      	strb	r3, [r7, #7]
	if (band > 3) return 1;
 800566a:	79fb      	ldrb	r3, [r7, #7]
 800566c:	2b03      	cmp	r3, #3
 800566e:	d901      	bls.n	8005674 <rda5807_Set_Band+0x14>
 8005670:	2301      	movs	r3, #1
 8005672:	e054      	b.n	800571e <rda5807_Set_Band+0xbe>

    // Читаем регистр 3
    rda5807_read(3, (uint16_t *)&Buffs.Reg03, 1);
 8005674:	2201      	movs	r2, #1
 8005676:	492c      	ldr	r1, [pc, #176]	; (8005728 <rda5807_Set_Band+0xc8>)
 8005678:	2003      	movs	r0, #3
 800567a:	f7ff fcf3 	bl	8005064 <rda5807_read>

    Buffs.Reg03.bBAND = band;
 800567e:	79fb      	ldrb	r3, [r7, #7]
 8005680:	f003 0303 	and.w	r3, r3, #3
 8005684:	b2d9      	uxtb	r1, r3
 8005686:	4a29      	ldr	r2, [pc, #164]	; (800572c <rda5807_Set_Band+0xcc>)
 8005688:	7893      	ldrb	r3, [r2, #2]
 800568a:	f361 0383 	bfi	r3, r1, #2, #2
 800568e:	7093      	strb	r3, [r2, #2]

    rda5807_write(3, (uint16_t *)&Buffs.Reg03, 1);
 8005690:	2201      	movs	r2, #1
 8005692:	4925      	ldr	r1, [pc, #148]	; (8005728 <rda5807_Set_Band+0xc8>)
 8005694:	2003      	movs	r0, #3
 8005696:	f7ff fd19 	bl	80050cc <rda5807_write>

    uint16_t l = 870, r = 1080;
 800569a:	f240 3366 	movw	r3, #870	; 0x366
 800569e:	81fb      	strh	r3, [r7, #14]
 80056a0:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80056a4:	81bb      	strh	r3, [r7, #12]

    switch (Buffs.Reg03.bBAND) {    // Диапазон 87–108 MHz
 80056a6:	4b21      	ldr	r3, [pc, #132]	; (800572c <rda5807_Set_Band+0xcc>)
 80056a8:	789b      	ldrb	r3, [r3, #2]
 80056aa:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b03      	cmp	r3, #3
 80056b2:	d011      	beq.n	80056d8 <rda5807_Set_Band+0x78>
 80056b4:	2b03      	cmp	r3, #3
 80056b6:	dc16      	bgt.n	80056e6 <rda5807_Set_Band+0x86>
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d002      	beq.n	80056c2 <rda5807_Set_Band+0x62>
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d007      	beq.n	80056d0 <rda5807_Set_Band+0x70>
 80056c0:	e011      	b.n	80056e6 <rda5807_Set_Band+0x86>
    	//case 0:// 00 = 87–108 MHz (US/Europe)
    	//break;
    	case 1:// 01 = 76–91 MHz (Japan)
    		l = 760;
 80056c2:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 80056c6:	81fb      	strh	r3, [r7, #14]
    		r = 910;
 80056c8:	f240 338e 	movw	r3, #910	; 0x38e
 80056cc:	81bb      	strh	r3, [r7, #12]
    	break;
 80056ce:	e00a      	b.n	80056e6 <rda5807_Set_Band+0x86>
    	case 2:// 10 = 76–108 MHz (world wide)
    		l = 760;
 80056d0:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 80056d4:	81fb      	strh	r3, [r7, #14]
    	break;
 80056d6:	e006      	b.n	80056e6 <rda5807_Set_Band+0x86>
    	case 3:// 11 = 65 –76 MHz (East Europe) or 50-65MHz
    		l = 650;
 80056d8:	f240 238a 	movw	r3, #650	; 0x28a
 80056dc:	81fb      	strh	r3, [r7, #14]
    		r = 760;
 80056de:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 80056e2:	81bb      	strh	r3, [r7, #12]
    	break;
 80056e4:	bf00      	nop
    }
    lBand = ((float)l) / 10;
 80056e6:	89fb      	ldrh	r3, [r7, #14]
 80056e8:	ee07 3a90 	vmov	s15, r3
 80056ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80056f0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80056f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80056f8:	4b0d      	ldr	r3, [pc, #52]	; (8005730 <rda5807_Set_Band+0xd0>)
 80056fa:	edc3 7a00 	vstr	s15, [r3]
    rBand = ((float)r) / 10;
 80056fe:	89bb      	ldrh	r3, [r7, #12]
 8005700:	ee07 3a90 	vmov	s15, r3
 8005704:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005708:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800570c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005710:	4b08      	ldr	r3, [pc, #32]	; (8005734 <rda5807_Set_Band+0xd4>)
 8005712:	edc3 7a00 	vstr	s15, [r3]

    HAL_Delay(50);
 8005716:	2032      	movs	r0, #50	; 0x32
 8005718:	f001 fb42 	bl	8006da0 <HAL_Delay>

    return 0;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	2000357e 	.word	0x2000357e
 800572c:	2000357c 	.word	0x2000357c
 8005730:	20002d8c 	.word	0x20002d8c
 8005734:	20002d90 	.word	0x20002d90

08005738 <rda5807_Set_Mute>:
//==============================================================================
void rda5807_Set_Mute(uint8_t mute)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	4603      	mov	r3, r0
 8005740:	71fb      	strb	r3, [r7, #7]
	// Читаем регистр 2
	rda5807_read(2, (uint16_t *)&Buffs.Reg02, 1);
 8005742:	2201      	movs	r2, #1
 8005744:	490a      	ldr	r1, [pc, #40]	; (8005770 <rda5807_Set_Mute+0x38>)
 8005746:	2002      	movs	r0, #2
 8005748:	f7ff fc8c 	bl	8005064 <rda5807_read>

	Buffs.Reg02.bDMUTE = mute & 1;
 800574c:	79fb      	ldrb	r3, [r7, #7]
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	b2d9      	uxtb	r1, r3
 8005754:	4a06      	ldr	r2, [pc, #24]	; (8005770 <rda5807_Set_Mute+0x38>)
 8005756:	7853      	ldrb	r3, [r2, #1]
 8005758:	f361 1386 	bfi	r3, r1, #6, #1
 800575c:	7053      	strb	r3, [r2, #1]

	rda5807_write(2, (uint16_t *)&Buffs.Reg02, 1);
 800575e:	2201      	movs	r2, #1
 8005760:	4903      	ldr	r1, [pc, #12]	; (8005770 <rda5807_Set_Mute+0x38>)
 8005762:	2002      	movs	r0, #2
 8005764:	f7ff fcb2 	bl	80050cc <rda5807_write>
}
 8005768:	bf00      	nop
 800576a:	3708      	adds	r7, #8
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	2000357c 	.word	0x2000357c

08005774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800577a:	4b0f      	ldr	r3, [pc, #60]	; (80057b8 <HAL_MspInit+0x44>)
 800577c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800577e:	4a0e      	ldr	r2, [pc, #56]	; (80057b8 <HAL_MspInit+0x44>)
 8005780:	f043 0301 	orr.w	r3, r3, #1
 8005784:	6613      	str	r3, [r2, #96]	; 0x60
 8005786:	4b0c      	ldr	r3, [pc, #48]	; (80057b8 <HAL_MspInit+0x44>)
 8005788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	607b      	str	r3, [r7, #4]
 8005790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005792:	4b09      	ldr	r3, [pc, #36]	; (80057b8 <HAL_MspInit+0x44>)
 8005794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005796:	4a08      	ldr	r2, [pc, #32]	; (80057b8 <HAL_MspInit+0x44>)
 8005798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800579c:	6593      	str	r3, [r2, #88]	; 0x58
 800579e:	4b06      	ldr	r3, [pc, #24]	; (80057b8 <HAL_MspInit+0x44>)
 80057a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057a6:	603b      	str	r3, [r7, #0]
 80057a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80057aa:	bf00      	nop
 80057ac:	370c      	adds	r7, #12
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	40021000 	.word	0x40021000

080057bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b0ac      	sub	sp, #176	; 0xb0
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057c4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80057c8:	2200      	movs	r2, #0
 80057ca:	601a      	str	r2, [r3, #0]
 80057cc:	605a      	str	r2, [r3, #4]
 80057ce:	609a      	str	r2, [r3, #8]
 80057d0:	60da      	str	r2, [r3, #12]
 80057d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80057d4:	f107 0314 	add.w	r3, r7, #20
 80057d8:	2288      	movs	r2, #136	; 0x88
 80057da:	2100      	movs	r1, #0
 80057dc:	4618      	mov	r0, r3
 80057de:	f009 fa3d 	bl	800ec5c <memset>
  if(hi2c->Instance==I2C1)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a57      	ldr	r2, [pc, #348]	; (8005944 <HAL_I2C_MspInit+0x188>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	f040 80a7 	bne.w	800593c <HAL_I2C_MspInit+0x180>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80057ee:	2340      	movs	r3, #64	; 0x40
 80057f0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80057f2:	2300      	movs	r3, #0
 80057f4:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80057f6:	f107 0314 	add.w	r3, r7, #20
 80057fa:	4618      	mov	r0, r3
 80057fc:	f004 fba6 	bl	8009f4c <HAL_RCCEx_PeriphCLKConfig>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8005806:	f7ff fb45 	bl	8004e94 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800580a:	4b4f      	ldr	r3, [pc, #316]	; (8005948 <HAL_I2C_MspInit+0x18c>)
 800580c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800580e:	4a4e      	ldr	r2, [pc, #312]	; (8005948 <HAL_I2C_MspInit+0x18c>)
 8005810:	f043 0302 	orr.w	r3, r3, #2
 8005814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005816:	4b4c      	ldr	r3, [pc, #304]	; (8005948 <HAL_I2C_MspInit+0x18c>)
 8005818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800581a:	f003 0302 	and.w	r3, r3, #2
 800581e:	613b      	str	r3, [r7, #16]
 8005820:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005822:	23c0      	movs	r3, #192	; 0xc0
 8005824:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005828:	2312      	movs	r3, #18
 800582a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800582e:	2300      	movs	r3, #0
 8005830:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005834:	2302      	movs	r3, #2
 8005836:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800583a:	2304      	movs	r3, #4
 800583c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005840:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005844:	4619      	mov	r1, r3
 8005846:	4841      	ldr	r0, [pc, #260]	; (800594c <HAL_I2C_MspInit+0x190>)
 8005848:	f001 fe96 	bl	8007578 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB6);
 800584c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005850:	f003 fcf8 	bl	8009244 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB7);
 8005854:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8005858:	f003 fcf4 	bl	8009244 <HAL_I2CEx_EnableFastModePlus>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800585c:	4b3a      	ldr	r3, [pc, #232]	; (8005948 <HAL_I2C_MspInit+0x18c>)
 800585e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005860:	4a39      	ldr	r2, [pc, #228]	; (8005948 <HAL_I2C_MspInit+0x18c>)
 8005862:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005866:	6593      	str	r3, [r2, #88]	; 0x58
 8005868:	4b37      	ldr	r3, [pc, #220]	; (8005948 <HAL_I2C_MspInit+0x18c>)
 800586a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800586c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005870:	60fb      	str	r3, [r7, #12]
 8005872:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA2_Channel6;
 8005874:	4b36      	ldr	r3, [pc, #216]	; (8005950 <HAL_I2C_MspInit+0x194>)
 8005876:	4a37      	ldr	r2, [pc, #220]	; (8005954 <HAL_I2C_MspInit+0x198>)
 8005878:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_5;
 800587a:	4b35      	ldr	r3, [pc, #212]	; (8005950 <HAL_I2C_MspInit+0x194>)
 800587c:	2205      	movs	r2, #5
 800587e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005880:	4b33      	ldr	r3, [pc, #204]	; (8005950 <HAL_I2C_MspInit+0x194>)
 8005882:	2200      	movs	r2, #0
 8005884:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005886:	4b32      	ldr	r3, [pc, #200]	; (8005950 <HAL_I2C_MspInit+0x194>)
 8005888:	2200      	movs	r2, #0
 800588a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800588c:	4b30      	ldr	r3, [pc, #192]	; (8005950 <HAL_I2C_MspInit+0x194>)
 800588e:	2280      	movs	r2, #128	; 0x80
 8005890:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005892:	4b2f      	ldr	r3, [pc, #188]	; (8005950 <HAL_I2C_MspInit+0x194>)
 8005894:	2200      	movs	r2, #0
 8005896:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005898:	4b2d      	ldr	r3, [pc, #180]	; (8005950 <HAL_I2C_MspInit+0x194>)
 800589a:	2200      	movs	r2, #0
 800589c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800589e:	4b2c      	ldr	r3, [pc, #176]	; (8005950 <HAL_I2C_MspInit+0x194>)
 80058a0:	2200      	movs	r2, #0
 80058a2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80058a4:	4b2a      	ldr	r3, [pc, #168]	; (8005950 <HAL_I2C_MspInit+0x194>)
 80058a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80058aa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80058ac:	4828      	ldr	r0, [pc, #160]	; (8005950 <HAL_I2C_MspInit+0x194>)
 80058ae:	f001 fbdf 	bl	8007070 <HAL_DMA_Init>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d001      	beq.n	80058bc <HAL_I2C_MspInit+0x100>
    {
      Error_Handler();
 80058b8:	f7ff faec 	bl	8004e94 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a24      	ldr	r2, [pc, #144]	; (8005950 <HAL_I2C_MspInit+0x194>)
 80058c0:	63da      	str	r2, [r3, #60]	; 0x3c
 80058c2:	4a23      	ldr	r2, [pc, #140]	; (8005950 <HAL_I2C_MspInit+0x194>)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80058c8:	4b23      	ldr	r3, [pc, #140]	; (8005958 <HAL_I2C_MspInit+0x19c>)
 80058ca:	4a24      	ldr	r2, [pc, #144]	; (800595c <HAL_I2C_MspInit+0x1a0>)
 80058cc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 80058ce:	4b22      	ldr	r3, [pc, #136]	; (8005958 <HAL_I2C_MspInit+0x19c>)
 80058d0:	2203      	movs	r2, #3
 80058d2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80058d4:	4b20      	ldr	r3, [pc, #128]	; (8005958 <HAL_I2C_MspInit+0x19c>)
 80058d6:	2210      	movs	r2, #16
 80058d8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80058da:	4b1f      	ldr	r3, [pc, #124]	; (8005958 <HAL_I2C_MspInit+0x19c>)
 80058dc:	2200      	movs	r2, #0
 80058de:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80058e0:	4b1d      	ldr	r3, [pc, #116]	; (8005958 <HAL_I2C_MspInit+0x19c>)
 80058e2:	2280      	movs	r2, #128	; 0x80
 80058e4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80058e6:	4b1c      	ldr	r3, [pc, #112]	; (8005958 <HAL_I2C_MspInit+0x19c>)
 80058e8:	2200      	movs	r2, #0
 80058ea:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80058ec:	4b1a      	ldr	r3, [pc, #104]	; (8005958 <HAL_I2C_MspInit+0x19c>)
 80058ee:	2200      	movs	r2, #0
 80058f0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80058f2:	4b19      	ldr	r3, [pc, #100]	; (8005958 <HAL_I2C_MspInit+0x19c>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80058f8:	4b17      	ldr	r3, [pc, #92]	; (8005958 <HAL_I2C_MspInit+0x19c>)
 80058fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80058fe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8005900:	4815      	ldr	r0, [pc, #84]	; (8005958 <HAL_I2C_MspInit+0x19c>)
 8005902:	f001 fbb5 	bl	8007070 <HAL_DMA_Init>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d001      	beq.n	8005910 <HAL_I2C_MspInit+0x154>
    {
      Error_Handler();
 800590c:	f7ff fac2 	bl	8004e94 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a11      	ldr	r2, [pc, #68]	; (8005958 <HAL_I2C_MspInit+0x19c>)
 8005914:	639a      	str	r2, [r3, #56]	; 0x38
 8005916:	4a10      	ldr	r2, [pc, #64]	; (8005958 <HAL_I2C_MspInit+0x19c>)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800591c:	2200      	movs	r2, #0
 800591e:	2100      	movs	r1, #0
 8005920:	201f      	movs	r0, #31
 8005922:	f001 fb60 	bl	8006fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005926:	201f      	movs	r0, #31
 8005928:	f001 fb79 	bl	800701e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800592c:	2200      	movs	r2, #0
 800592e:	2100      	movs	r1, #0
 8005930:	2020      	movs	r0, #32
 8005932:	f001 fb58 	bl	8006fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8005936:	2020      	movs	r0, #32
 8005938:	f001 fb71 	bl	800701e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800593c:	bf00      	nop
 800593e:	37b0      	adds	r7, #176	; 0xb0
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	40005400 	.word	0x40005400
 8005948:	40021000 	.word	0x40021000
 800594c:	48000400 	.word	0x48000400
 8005950:	20000884 	.word	0x20000884
 8005954:	4002046c 	.word	0x4002046c
 8005958:	200008cc 	.word	0x200008cc
 800595c:	4002006c 	.word	0x4002006c

08005960 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b0a4      	sub	sp, #144	; 0x90
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005968:	f107 0308 	add.w	r3, r7, #8
 800596c:	2288      	movs	r2, #136	; 0x88
 800596e:	2100      	movs	r1, #0
 8005970:	4618      	mov	r0, r3
 8005972:	f009 f973 	bl	800ec5c <memset>
  if(hrtc->Instance==RTC)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a10      	ldr	r2, [pc, #64]	; (80059bc <HAL_RTC_MspInit+0x5c>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d118      	bne.n	80059b2 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005980:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005984:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8005986:	f44f 7300 	mov.w	r3, #512	; 0x200
 800598a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800598e:	f107 0308 	add.w	r3, r7, #8
 8005992:	4618      	mov	r0, r3
 8005994:	f004 fada 	bl	8009f4c <HAL_RCCEx_PeriphCLKConfig>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d001      	beq.n	80059a2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800599e:	f7ff fa79 	bl	8004e94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80059a2:	4b07      	ldr	r3, [pc, #28]	; (80059c0 <HAL_RTC_MspInit+0x60>)
 80059a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059a8:	4a05      	ldr	r2, [pc, #20]	; (80059c0 <HAL_RTC_MspInit+0x60>)
 80059aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80059b2:	bf00      	nop
 80059b4:	3790      	adds	r7, #144	; 0x90
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	40002800 	.word	0x40002800
 80059c0:	40021000 	.word	0x40021000

080059c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b08c      	sub	sp, #48	; 0x30
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059cc:	f107 031c 	add.w	r3, r7, #28
 80059d0:	2200      	movs	r2, #0
 80059d2:	601a      	str	r2, [r3, #0]
 80059d4:	605a      	str	r2, [r3, #4]
 80059d6:	609a      	str	r2, [r3, #8]
 80059d8:	60da      	str	r2, [r3, #12]
 80059da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a76      	ldr	r2, [pc, #472]	; (8005bbc <HAL_SPI_MspInit+0x1f8>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d15b      	bne.n	8005a9e <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80059e6:	4b76      	ldr	r3, [pc, #472]	; (8005bc0 <HAL_SPI_MspInit+0x1fc>)
 80059e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ea:	4a75      	ldr	r2, [pc, #468]	; (8005bc0 <HAL_SPI_MspInit+0x1fc>)
 80059ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80059f0:	6613      	str	r3, [r2, #96]	; 0x60
 80059f2:	4b73      	ldr	r3, [pc, #460]	; (8005bc0 <HAL_SPI_MspInit+0x1fc>)
 80059f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059fa:	61bb      	str	r3, [r7, #24]
 80059fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059fe:	4b70      	ldr	r3, [pc, #448]	; (8005bc0 <HAL_SPI_MspInit+0x1fc>)
 8005a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a02:	4a6f      	ldr	r2, [pc, #444]	; (8005bc0 <HAL_SPI_MspInit+0x1fc>)
 8005a04:	f043 0301 	orr.w	r3, r3, #1
 8005a08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a0a:	4b6d      	ldr	r3, [pc, #436]	; (8005bc0 <HAL_SPI_MspInit+0x1fc>)
 8005a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	617b      	str	r3, [r7, #20]
 8005a14:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8005a16:	23a0      	movs	r3, #160	; 0xa0
 8005a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a1a:	2302      	movs	r3, #2
 8005a1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a22:	2303      	movs	r3, #3
 8005a24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005a26:	2305      	movs	r3, #5
 8005a28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a2a:	f107 031c 	add.w	r3, r7, #28
 8005a2e:	4619      	mov	r1, r3
 8005a30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a34:	f001 fda0 	bl	8007578 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Channel4;
 8005a38:	4b62      	ldr	r3, [pc, #392]	; (8005bc4 <HAL_SPI_MspInit+0x200>)
 8005a3a:	4a63      	ldr	r2, [pc, #396]	; (8005bc8 <HAL_SPI_MspInit+0x204>)
 8005a3c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_4;
 8005a3e:	4b61      	ldr	r3, [pc, #388]	; (8005bc4 <HAL_SPI_MspInit+0x200>)
 8005a40:	2204      	movs	r2, #4
 8005a42:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005a44:	4b5f      	ldr	r3, [pc, #380]	; (8005bc4 <HAL_SPI_MspInit+0x200>)
 8005a46:	2210      	movs	r2, #16
 8005a48:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a4a:	4b5e      	ldr	r3, [pc, #376]	; (8005bc4 <HAL_SPI_MspInit+0x200>)
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005a50:	4b5c      	ldr	r3, [pc, #368]	; (8005bc4 <HAL_SPI_MspInit+0x200>)
 8005a52:	2280      	movs	r2, #128	; 0x80
 8005a54:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a56:	4b5b      	ldr	r3, [pc, #364]	; (8005bc4 <HAL_SPI_MspInit+0x200>)
 8005a58:	2200      	movs	r2, #0
 8005a5a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a5c:	4b59      	ldr	r3, [pc, #356]	; (8005bc4 <HAL_SPI_MspInit+0x200>)
 8005a5e:	2200      	movs	r2, #0
 8005a60:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8005a62:	4b58      	ldr	r3, [pc, #352]	; (8005bc4 <HAL_SPI_MspInit+0x200>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005a68:	4b56      	ldr	r3, [pc, #344]	; (8005bc4 <HAL_SPI_MspInit+0x200>)
 8005a6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005a6e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8005a70:	4854      	ldr	r0, [pc, #336]	; (8005bc4 <HAL_SPI_MspInit+0x200>)
 8005a72:	f001 fafd 	bl	8007070 <HAL_DMA_Init>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d001      	beq.n	8005a80 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8005a7c:	f7ff fa0a 	bl	8004e94 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a50      	ldr	r2, [pc, #320]	; (8005bc4 <HAL_SPI_MspInit+0x200>)
 8005a84:	655a      	str	r2, [r3, #84]	; 0x54
 8005a86:	4a4f      	ldr	r2, [pc, #316]	; (8005bc4 <HAL_SPI_MspInit+0x200>)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	2100      	movs	r1, #0
 8005a90:	2023      	movs	r0, #35	; 0x23
 8005a92:	f001 faa8 	bl	8006fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8005a96:	2023      	movs	r0, #35	; 0x23
 8005a98:	f001 fac1 	bl	800701e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005a9c:	e08a      	b.n	8005bb4 <HAL_SPI_MspInit+0x1f0>
  else if(hspi->Instance==SPI2)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a4a      	ldr	r2, [pc, #296]	; (8005bcc <HAL_SPI_MspInit+0x208>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	f040 8085 	bne.w	8005bb4 <HAL_SPI_MspInit+0x1f0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005aaa:	4b45      	ldr	r3, [pc, #276]	; (8005bc0 <HAL_SPI_MspInit+0x1fc>)
 8005aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aae:	4a44      	ldr	r2, [pc, #272]	; (8005bc0 <HAL_SPI_MspInit+0x1fc>)
 8005ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ab4:	6593      	str	r3, [r2, #88]	; 0x58
 8005ab6:	4b42      	ldr	r3, [pc, #264]	; (8005bc0 <HAL_SPI_MspInit+0x1fc>)
 8005ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005abe:	613b      	str	r3, [r7, #16]
 8005ac0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ac2:	4b3f      	ldr	r3, [pc, #252]	; (8005bc0 <HAL_SPI_MspInit+0x1fc>)
 8005ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ac6:	4a3e      	ldr	r2, [pc, #248]	; (8005bc0 <HAL_SPI_MspInit+0x1fc>)
 8005ac8:	f043 0302 	orr.w	r3, r3, #2
 8005acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005ace:	4b3c      	ldr	r3, [pc, #240]	; (8005bc0 <HAL_SPI_MspInit+0x1fc>)
 8005ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ad2:	f003 0302 	and.w	r3, r3, #2
 8005ad6:	60fb      	str	r3, [r7, #12]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005ada:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005aec:	2305      	movs	r3, #5
 8005aee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005af0:	f107 031c 	add.w	r3, r7, #28
 8005af4:	4619      	mov	r1, r3
 8005af6:	4836      	ldr	r0, [pc, #216]	; (8005bd0 <HAL_SPI_MspInit+0x20c>)
 8005af8:	f001 fd3e 	bl	8007578 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8005afc:	4b35      	ldr	r3, [pc, #212]	; (8005bd4 <HAL_SPI_MspInit+0x210>)
 8005afe:	4a36      	ldr	r2, [pc, #216]	; (8005bd8 <HAL_SPI_MspInit+0x214>)
 8005b00:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_1;
 8005b02:	4b34      	ldr	r3, [pc, #208]	; (8005bd4 <HAL_SPI_MspInit+0x210>)
 8005b04:	2201      	movs	r2, #1
 8005b06:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005b08:	4b32      	ldr	r3, [pc, #200]	; (8005bd4 <HAL_SPI_MspInit+0x210>)
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b0e:	4b31      	ldr	r3, [pc, #196]	; (8005bd4 <HAL_SPI_MspInit+0x210>)
 8005b10:	2200      	movs	r2, #0
 8005b12:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005b14:	4b2f      	ldr	r3, [pc, #188]	; (8005bd4 <HAL_SPI_MspInit+0x210>)
 8005b16:	2280      	movs	r2, #128	; 0x80
 8005b18:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005b1a:	4b2e      	ldr	r3, [pc, #184]	; (8005bd4 <HAL_SPI_MspInit+0x210>)
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005b20:	4b2c      	ldr	r3, [pc, #176]	; (8005bd4 <HAL_SPI_MspInit+0x210>)
 8005b22:	2200      	movs	r2, #0
 8005b24:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8005b26:	4b2b      	ldr	r3, [pc, #172]	; (8005bd4 <HAL_SPI_MspInit+0x210>)
 8005b28:	2200      	movs	r2, #0
 8005b2a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8005b2c:	4b29      	ldr	r3, [pc, #164]	; (8005bd4 <HAL_SPI_MspInit+0x210>)
 8005b2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005b32:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8005b34:	4827      	ldr	r0, [pc, #156]	; (8005bd4 <HAL_SPI_MspInit+0x210>)
 8005b36:	f001 fa9b 	bl	8007070 <HAL_DMA_Init>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d001      	beq.n	8005b44 <HAL_SPI_MspInit+0x180>
      Error_Handler();
 8005b40:	f7ff f9a8 	bl	8004e94 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a23      	ldr	r2, [pc, #140]	; (8005bd4 <HAL_SPI_MspInit+0x210>)
 8005b48:	659a      	str	r2, [r3, #88]	; 0x58
 8005b4a:	4a22      	ldr	r2, [pc, #136]	; (8005bd4 <HAL_SPI_MspInit+0x210>)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8005b50:	4b22      	ldr	r3, [pc, #136]	; (8005bdc <HAL_SPI_MspInit+0x218>)
 8005b52:	4a23      	ldr	r2, [pc, #140]	; (8005be0 <HAL_SPI_MspInit+0x21c>)
 8005b54:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8005b56:	4b21      	ldr	r3, [pc, #132]	; (8005bdc <HAL_SPI_MspInit+0x218>)
 8005b58:	2201      	movs	r2, #1
 8005b5a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005b5c:	4b1f      	ldr	r3, [pc, #124]	; (8005bdc <HAL_SPI_MspInit+0x218>)
 8005b5e:	2210      	movs	r2, #16
 8005b60:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b62:	4b1e      	ldr	r3, [pc, #120]	; (8005bdc <HAL_SPI_MspInit+0x218>)
 8005b64:	2200      	movs	r2, #0
 8005b66:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005b68:	4b1c      	ldr	r3, [pc, #112]	; (8005bdc <HAL_SPI_MspInit+0x218>)
 8005b6a:	2280      	movs	r2, #128	; 0x80
 8005b6c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005b6e:	4b1b      	ldr	r3, [pc, #108]	; (8005bdc <HAL_SPI_MspInit+0x218>)
 8005b70:	2200      	movs	r2, #0
 8005b72:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005b74:	4b19      	ldr	r3, [pc, #100]	; (8005bdc <HAL_SPI_MspInit+0x218>)
 8005b76:	2200      	movs	r2, #0
 8005b78:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8005b7a:	4b18      	ldr	r3, [pc, #96]	; (8005bdc <HAL_SPI_MspInit+0x218>)
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005b80:	4b16      	ldr	r3, [pc, #88]	; (8005bdc <HAL_SPI_MspInit+0x218>)
 8005b82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005b86:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8005b88:	4814      	ldr	r0, [pc, #80]	; (8005bdc <HAL_SPI_MspInit+0x218>)
 8005b8a:	f001 fa71 	bl	8007070 <HAL_DMA_Init>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d001      	beq.n	8005b98 <HAL_SPI_MspInit+0x1d4>
      Error_Handler();
 8005b94:	f7ff f97e 	bl	8004e94 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a10      	ldr	r2, [pc, #64]	; (8005bdc <HAL_SPI_MspInit+0x218>)
 8005b9c:	655a      	str	r2, [r3, #84]	; 0x54
 8005b9e:	4a0f      	ldr	r2, [pc, #60]	; (8005bdc <HAL_SPI_MspInit+0x218>)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	2100      	movs	r1, #0
 8005ba8:	2024      	movs	r0, #36	; 0x24
 8005baa:	f001 fa1c 	bl	8006fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8005bae:	2024      	movs	r0, #36	; 0x24
 8005bb0:	f001 fa35 	bl	800701e <HAL_NVIC_EnableIRQ>
}
 8005bb4:	bf00      	nop
 8005bb6:	3730      	adds	r7, #48	; 0x30
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	40013000 	.word	0x40013000
 8005bc0:	40021000 	.word	0x40021000
 8005bc4:	20000a00 	.word	0x20000a00
 8005bc8:	40020444 	.word	0x40020444
 8005bcc:	40003800 	.word	0x40003800
 8005bd0:	48000400 	.word	0x48000400
 8005bd4:	20000a48 	.word	0x20000a48
 8005bd8:	40020044 	.word	0x40020044
 8005bdc:	20000a90 	.word	0x20000a90
 8005be0:	40020058 	.word	0x40020058

08005be4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a0d      	ldr	r2, [pc, #52]	; (8005c28 <HAL_TIM_Base_MspInit+0x44>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d113      	bne.n	8005c1e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005bf6:	4b0d      	ldr	r3, [pc, #52]	; (8005c2c <HAL_TIM_Base_MspInit+0x48>)
 8005bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bfa:	4a0c      	ldr	r2, [pc, #48]	; (8005c2c <HAL_TIM_Base_MspInit+0x48>)
 8005bfc:	f043 0304 	orr.w	r3, r3, #4
 8005c00:	6593      	str	r3, [r2, #88]	; 0x58
 8005c02:	4b0a      	ldr	r3, [pc, #40]	; (8005c2c <HAL_TIM_Base_MspInit+0x48>)
 8005c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c06:	f003 0304 	and.w	r3, r3, #4
 8005c0a:	60fb      	str	r3, [r7, #12]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 8005c0e:	2200      	movs	r2, #0
 8005c10:	2102      	movs	r1, #2
 8005c12:	201e      	movs	r0, #30
 8005c14:	f001 f9e7 	bl	8006fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005c18:	201e      	movs	r0, #30
 8005c1a:	f001 fa00 	bl	800701e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005c1e:	bf00      	nop
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	40000800 	.word	0x40000800
 8005c2c:	40021000 	.word	0x40021000

08005c30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b0ae      	sub	sp, #184	; 0xb8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c38:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	601a      	str	r2, [r3, #0]
 8005c40:	605a      	str	r2, [r3, #4]
 8005c42:	609a      	str	r2, [r3, #8]
 8005c44:	60da      	str	r2, [r3, #12]
 8005c46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005c48:	f107 031c 	add.w	r3, r7, #28
 8005c4c:	2288      	movs	r2, #136	; 0x88
 8005c4e:	2100      	movs	r1, #0
 8005c50:	4618      	mov	r0, r3
 8005c52:	f009 f803 	bl	800ec5c <memset>
  if(huart->Instance==UART4)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a74      	ldr	r2, [pc, #464]	; (8005e2c <HAL_UART_MspInit+0x1fc>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d16e      	bne.n	8005d3e <HAL_UART_MspInit+0x10e>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8005c60:	2308      	movs	r3, #8
 8005c62:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8005c64:	2300      	movs	r3, #0
 8005c66:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005c68:	f107 031c 	add.w	r3, r7, #28
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f004 f96d 	bl	8009f4c <HAL_RCCEx_PeriphCLKConfig>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d001      	beq.n	8005c7c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005c78:	f7ff f90c 	bl	8004e94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005c7c:	4b6c      	ldr	r3, [pc, #432]	; (8005e30 <HAL_UART_MspInit+0x200>)
 8005c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c80:	4a6b      	ldr	r2, [pc, #428]	; (8005e30 <HAL_UART_MspInit+0x200>)
 8005c82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c86:	6593      	str	r3, [r2, #88]	; 0x58
 8005c88:	4b69      	ldr	r3, [pc, #420]	; (8005e30 <HAL_UART_MspInit+0x200>)
 8005c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c90:	61bb      	str	r3, [r7, #24]
 8005c92:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c94:	4b66      	ldr	r3, [pc, #408]	; (8005e30 <HAL_UART_MspInit+0x200>)
 8005c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c98:	4a65      	ldr	r2, [pc, #404]	; (8005e30 <HAL_UART_MspInit+0x200>)
 8005c9a:	f043 0301 	orr.w	r3, r3, #1
 8005c9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005ca0:	4b63      	ldr	r3, [pc, #396]	; (8005e30 <HAL_UART_MspInit+0x200>)
 8005ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ca4:	f003 0301 	and.w	r3, r3, #1
 8005ca8:	617b      	str	r3, [r7, #20]
 8005caa:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005cac:	2303      	movs	r3, #3
 8005cae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cb2:	2302      	movs	r3, #2
 8005cb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005cc4:	2308      	movs	r3, #8
 8005cc6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005cce:	4619      	mov	r1, r3
 8005cd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005cd4:	f001 fc50 	bl	8007578 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Channel3;
 8005cd8:	4b56      	ldr	r3, [pc, #344]	; (8005e34 <HAL_UART_MspInit+0x204>)
 8005cda:	4a57      	ldr	r2, [pc, #348]	; (8005e38 <HAL_UART_MspInit+0x208>)
 8005cdc:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_2;
 8005cde:	4b55      	ldr	r3, [pc, #340]	; (8005e34 <HAL_UART_MspInit+0x204>)
 8005ce0:	2202      	movs	r2, #2
 8005ce2:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005ce4:	4b53      	ldr	r3, [pc, #332]	; (8005e34 <HAL_UART_MspInit+0x204>)
 8005ce6:	2210      	movs	r2, #16
 8005ce8:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005cea:	4b52      	ldr	r3, [pc, #328]	; (8005e34 <HAL_UART_MspInit+0x204>)
 8005cec:	2200      	movs	r2, #0
 8005cee:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005cf0:	4b50      	ldr	r3, [pc, #320]	; (8005e34 <HAL_UART_MspInit+0x204>)
 8005cf2:	2280      	movs	r2, #128	; 0x80
 8005cf4:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005cf6:	4b4f      	ldr	r3, [pc, #316]	; (8005e34 <HAL_UART_MspInit+0x204>)
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005cfc:	4b4d      	ldr	r3, [pc, #308]	; (8005e34 <HAL_UART_MspInit+0x204>)
 8005cfe:	2200      	movs	r2, #0
 8005d00:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8005d02:	4b4c      	ldr	r3, [pc, #304]	; (8005e34 <HAL_UART_MspInit+0x204>)
 8005d04:	2200      	movs	r2, #0
 8005d06:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005d08:	4b4a      	ldr	r3, [pc, #296]	; (8005e34 <HAL_UART_MspInit+0x204>)
 8005d0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005d0e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8005d10:	4848      	ldr	r0, [pc, #288]	; (8005e34 <HAL_UART_MspInit+0x204>)
 8005d12:	f001 f9ad 	bl	8007070 <HAL_DMA_Init>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d001      	beq.n	8005d20 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8005d1c:	f7ff f8ba 	bl	8004e94 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a44      	ldr	r2, [pc, #272]	; (8005e34 <HAL_UART_MspInit+0x204>)
 8005d24:	66da      	str	r2, [r3, #108]	; 0x6c
 8005d26:	4a43      	ldr	r2, [pc, #268]	; (8005e34 <HAL_UART_MspInit+0x204>)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 1, 0);
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	2101      	movs	r1, #1
 8005d30:	2034      	movs	r0, #52	; 0x34
 8005d32:	f001 f958 	bl	8006fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8005d36:	2034      	movs	r0, #52	; 0x34
 8005d38:	f001 f971 	bl	800701e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005d3c:	e072      	b.n	8005e24 <HAL_UART_MspInit+0x1f4>
  else if(huart->Instance==USART2)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a3e      	ldr	r2, [pc, #248]	; (8005e3c <HAL_UART_MspInit+0x20c>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d16d      	bne.n	8005e24 <HAL_UART_MspInit+0x1f4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005d48:	2302      	movs	r3, #2
 8005d4a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005d50:	f107 031c 	add.w	r3, r7, #28
 8005d54:	4618      	mov	r0, r3
 8005d56:	f004 f8f9 	bl	8009f4c <HAL_RCCEx_PeriphCLKConfig>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d001      	beq.n	8005d64 <HAL_UART_MspInit+0x134>
      Error_Handler();
 8005d60:	f7ff f898 	bl	8004e94 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005d64:	4b32      	ldr	r3, [pc, #200]	; (8005e30 <HAL_UART_MspInit+0x200>)
 8005d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d68:	4a31      	ldr	r2, [pc, #196]	; (8005e30 <HAL_UART_MspInit+0x200>)
 8005d6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d6e:	6593      	str	r3, [r2, #88]	; 0x58
 8005d70:	4b2f      	ldr	r3, [pc, #188]	; (8005e30 <HAL_UART_MspInit+0x200>)
 8005d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d78:	613b      	str	r3, [r7, #16]
 8005d7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d7c:	4b2c      	ldr	r3, [pc, #176]	; (8005e30 <HAL_UART_MspInit+0x200>)
 8005d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d80:	4a2b      	ldr	r2, [pc, #172]	; (8005e30 <HAL_UART_MspInit+0x200>)
 8005d82:	f043 0301 	orr.w	r3, r3, #1
 8005d86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005d88:	4b29      	ldr	r3, [pc, #164]	; (8005e30 <HAL_UART_MspInit+0x200>)
 8005d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d8c:	f003 0301 	and.w	r3, r3, #1
 8005d90:	60fb      	str	r3, [r7, #12]
 8005d92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LOG_TX_Pin|LOG_RX_Pin;
 8005d94:	230c      	movs	r3, #12
 8005d96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d9a:	2302      	movs	r3, #2
 8005d9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005da0:	2300      	movs	r3, #0
 8005da2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005da6:	2303      	movs	r3, #3
 8005da8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005dac:	2307      	movs	r3, #7
 8005dae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005db2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005db6:	4619      	mov	r1, r3
 8005db8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005dbc:	f001 fbdc 	bl	8007578 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8005dc0:	4b1f      	ldr	r3, [pc, #124]	; (8005e40 <HAL_UART_MspInit+0x210>)
 8005dc2:	4a20      	ldr	r2, [pc, #128]	; (8005e44 <HAL_UART_MspInit+0x214>)
 8005dc4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8005dc6:	4b1e      	ldr	r3, [pc, #120]	; (8005e40 <HAL_UART_MspInit+0x210>)
 8005dc8:	2202      	movs	r2, #2
 8005dca:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005dcc:	4b1c      	ldr	r3, [pc, #112]	; (8005e40 <HAL_UART_MspInit+0x210>)
 8005dce:	2210      	movs	r2, #16
 8005dd0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005dd2:	4b1b      	ldr	r3, [pc, #108]	; (8005e40 <HAL_UART_MspInit+0x210>)
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005dd8:	4b19      	ldr	r3, [pc, #100]	; (8005e40 <HAL_UART_MspInit+0x210>)
 8005dda:	2280      	movs	r2, #128	; 0x80
 8005ddc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005dde:	4b18      	ldr	r3, [pc, #96]	; (8005e40 <HAL_UART_MspInit+0x210>)
 8005de0:	2200      	movs	r2, #0
 8005de2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005de4:	4b16      	ldr	r3, [pc, #88]	; (8005e40 <HAL_UART_MspInit+0x210>)
 8005de6:	2200      	movs	r2, #0
 8005de8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005dea:	4b15      	ldr	r3, [pc, #84]	; (8005e40 <HAL_UART_MspInit+0x210>)
 8005dec:	2200      	movs	r2, #0
 8005dee:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005df0:	4b13      	ldr	r3, [pc, #76]	; (8005e40 <HAL_UART_MspInit+0x210>)
 8005df2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005df6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005df8:	4811      	ldr	r0, [pc, #68]	; (8005e40 <HAL_UART_MspInit+0x210>)
 8005dfa:	f001 f939 	bl	8007070 <HAL_DMA_Init>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d001      	beq.n	8005e08 <HAL_UART_MspInit+0x1d8>
      Error_Handler();
 8005e04:	f7ff f846 	bl	8004e94 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a0d      	ldr	r2, [pc, #52]	; (8005e40 <HAL_UART_MspInit+0x210>)
 8005e0c:	66da      	str	r2, [r3, #108]	; 0x6c
 8005e0e:	4a0c      	ldr	r2, [pc, #48]	; (8005e40 <HAL_UART_MspInit+0x210>)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8005e14:	2200      	movs	r2, #0
 8005e16:	2101      	movs	r1, #1
 8005e18:	2026      	movs	r0, #38	; 0x26
 8005e1a:	f001 f8e4 	bl	8006fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005e1e:	2026      	movs	r0, #38	; 0x26
 8005e20:	f001 f8fd 	bl	800701e <HAL_NVIC_EnableIRQ>
}
 8005e24:	bf00      	nop
 8005e26:	37b8      	adds	r7, #184	; 0xb8
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	40004c00 	.word	0x40004c00
 8005e30:	40021000 	.word	0x40021000
 8005e34:	20000c2c 	.word	0x20000c2c
 8005e38:	40020430 	.word	0x40020430
 8005e3c:	40004400 	.word	0x40004400
 8005e40:	20000c74 	.word	0x20000c74
 8005e44:	40020080 	.word	0x40020080

08005e48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005e4c:	e7fe      	b.n	8005e4c <NMI_Handler+0x4>

08005e4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005e4e:	b480      	push	{r7}
 8005e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005e52:	e7fe      	b.n	8005e52 <HardFault_Handler+0x4>

08005e54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005e54:	b480      	push	{r7}
 8005e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005e58:	e7fe      	b.n	8005e58 <MemManage_Handler+0x4>

08005e5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005e5e:	e7fe      	b.n	8005e5e <BusFault_Handler+0x4>

08005e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005e60:	b480      	push	{r7}
 8005e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005e64:	e7fe      	b.n	8005e64 <UsageFault_Handler+0x4>

08005e66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005e66:	b480      	push	{r7}
 8005e68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005e6a:	bf00      	nop
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005e74:	b480      	push	{r7}
 8005e76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005e78:	bf00      	nop
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr

08005e82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005e82:	b480      	push	{r7}
 8005e84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005e86:	bf00      	nop
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005e94:	f000 ff64 	bl	8006d60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005e98:	bf00      	nop
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY0_Pin);
 8005ea0:	2002      	movs	r0, #2
 8005ea2:	f001 fd5d 	bl	8007960 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8005ea6:	bf00      	nop
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY1_Pin);
 8005eae:	2004      	movs	r0, #4
 8005eb0:	f001 fd56 	bl	8007960 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8005eb4:	bf00      	nop
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8005ebc:	4802      	ldr	r0, [pc, #8]	; (8005ec8 <DMA1_Channel4_IRQHandler+0x10>)
 8005ebe:	f001 fa6e 	bl	800739e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8005ec2:	bf00      	nop
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	20000a48 	.word	0x20000a48

08005ecc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8005ed0:	4802      	ldr	r0, [pc, #8]	; (8005edc <DMA1_Channel5_IRQHandler+0x10>)
 8005ed2:	f001 fa64 	bl	800739e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8005ed6:	bf00      	nop
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	20000a90 	.word	0x20000a90

08005ee0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8005ee4:	4802      	ldr	r0, [pc, #8]	; (8005ef0 <DMA1_Channel6_IRQHandler+0x10>)
 8005ee6:	f001 fa5a 	bl	800739e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8005eea:	bf00      	nop
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	200008cc 	.word	0x200008cc

08005ef4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005ef8:	4802      	ldr	r0, [pc, #8]	; (8005f04 <DMA1_Channel7_IRQHandler+0x10>)
 8005efa:	f001 fa50 	bl	800739e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8005efe:	bf00      	nop
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	20000c74 	.word	0x20000c74

08005f08 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005f0c:	4802      	ldr	r0, [pc, #8]	; (8005f18 <TIM4_IRQHandler+0x10>)
 8005f0e:	f006 fcf4 	bl	800c8fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005f12:	bf00      	nop
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	20000ad8 	.word	0x20000ad8

08005f1c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005f20:	4802      	ldr	r0, [pc, #8]	; (8005f2c <I2C1_EV_IRQHandler+0x10>)
 8005f22:	f002 f8e7 	bl	80080f4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005f26:	bf00      	nop
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	20000830 	.word	0x20000830

08005f30 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005f34:	4802      	ldr	r0, [pc, #8]	; (8005f40 <I2C1_ER_IRQHandler+0x10>)
 8005f36:	f002 f8f7 	bl	8008128 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8005f3a:	bf00      	nop
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	20000830 	.word	0x20000830

08005f44 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8005f48:	4802      	ldr	r0, [pc, #8]	; (8005f54 <SPI1_IRQHandler+0x10>)
 8005f4a:	f005 ffa9 	bl	800bea0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8005f4e:	bf00      	nop
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	20000938 	.word	0x20000938

08005f58 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8005f5c:	4802      	ldr	r0, [pc, #8]	; (8005f68 <SPI2_IRQHandler+0x10>)
 8005f5e:	f005 ff9f 	bl	800bea0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8005f62:	bf00      	nop
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	2000099c 	.word	0x2000099c

08005f6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005f70:	4802      	ldr	r0, [pc, #8]	; (8005f7c <USART2_IRQHandler+0x10>)
 8005f72:	f007 fa75 	bl	800d460 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005f76:	bf00      	nop
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	20000ba8 	.word	0x20000ba8

08005f80 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8005f84:	4802      	ldr	r0, [pc, #8]	; (8005f90 <UART4_IRQHandler+0x10>)
 8005f86:	f007 fa6b 	bl	800d460 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8005f8a:	bf00      	nop
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	20000b24 	.word	0x20000b24

08005f94 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8005f98:	4802      	ldr	r0, [pc, #8]	; (8005fa4 <DMA2_Channel3_IRQHandler+0x10>)
 8005f9a:	f001 fa00 	bl	800739e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8005f9e:	bf00      	nop
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	20000c2c 	.word	0x20000c2c

08005fa8 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8005fac:	4802      	ldr	r0, [pc, #8]	; (8005fb8 <DMA2_Channel4_IRQHandler+0x10>)
 8005fae:	f001 f9f6 	bl	800739e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8005fb2:	bf00      	nop
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	20000a00 	.word	0x20000a00

08005fbc <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8005fc0:	4802      	ldr	r0, [pc, #8]	; (8005fcc <DMA2_Channel6_IRQHandler+0x10>)
 8005fc2:	f001 f9ec 	bl	800739e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 8005fc6:	bf00      	nop
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	20000884 	.word	0x20000884

08005fd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	af00      	add	r7, sp, #0
	return 1;
 8005fd4:	2301      	movs	r3, #1
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <_kill>:

int _kill(int pid, int sig)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005fea:	f008 fd43 	bl	800ea74 <__errno>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2216      	movs	r2, #22
 8005ff2:	601a      	str	r2, [r3, #0]
	return -1;
 8005ff4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3708      	adds	r7, #8
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <_exit>:

void _exit (int status)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b082      	sub	sp, #8
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006008:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f7ff ffe7 	bl	8005fe0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006012:	e7fe      	b.n	8006012 <_exit+0x12>

08006014 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b086      	sub	sp, #24
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006020:	2300      	movs	r3, #0
 8006022:	617b      	str	r3, [r7, #20]
 8006024:	e00a      	b.n	800603c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006026:	f3af 8000 	nop.w
 800602a:	4601      	mov	r1, r0
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	1c5a      	adds	r2, r3, #1
 8006030:	60ba      	str	r2, [r7, #8]
 8006032:	b2ca      	uxtb	r2, r1
 8006034:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	3301      	adds	r3, #1
 800603a:	617b      	str	r3, [r7, #20]
 800603c:	697a      	ldr	r2, [r7, #20]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	429a      	cmp	r2, r3
 8006042:	dbf0      	blt.n	8006026 <_read+0x12>
	}

return len;
 8006044:	687b      	ldr	r3, [r7, #4]
}
 8006046:	4618      	mov	r0, r3
 8006048:	3718      	adds	r7, #24
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800604e:	b580      	push	{r7, lr}
 8006050:	b086      	sub	sp, #24
 8006052:	af00      	add	r7, sp, #0
 8006054:	60f8      	str	r0, [r7, #12]
 8006056:	60b9      	str	r1, [r7, #8]
 8006058:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800605a:	2300      	movs	r3, #0
 800605c:	617b      	str	r3, [r7, #20]
 800605e:	e009      	b.n	8006074 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	1c5a      	adds	r2, r3, #1
 8006064:	60ba      	str	r2, [r7, #8]
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	4618      	mov	r0, r3
 800606a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	3301      	adds	r3, #1
 8006072:	617b      	str	r3, [r7, #20]
 8006074:	697a      	ldr	r2, [r7, #20]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	429a      	cmp	r2, r3
 800607a:	dbf1      	blt.n	8006060 <_write+0x12>
	}
	return len;
 800607c:	687b      	ldr	r3, [r7, #4]
}
 800607e:	4618      	mov	r0, r3
 8006080:	3718      	adds	r7, #24
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <_close>:

int _close(int file)
{
 8006086:	b480      	push	{r7}
 8006088:	b083      	sub	sp, #12
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
	return -1;
 800608e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006092:	4618      	mov	r0, r3
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800609e:	b480      	push	{r7}
 80060a0:	b083      	sub	sp, #12
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
 80060a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80060ae:	605a      	str	r2, [r3, #4]
	return 0;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	370c      	adds	r7, #12
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr

080060be <_isatty>:

int _isatty(int file)
{
 80060be:	b480      	push	{r7}
 80060c0:	b083      	sub	sp, #12
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
	return 1;
 80060c6:	2301      	movs	r3, #1
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
	return 0;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3714      	adds	r7, #20
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
	...

080060f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80060f8:	4a14      	ldr	r2, [pc, #80]	; (800614c <_sbrk+0x5c>)
 80060fa:	4b15      	ldr	r3, [pc, #84]	; (8006150 <_sbrk+0x60>)
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006104:	4b13      	ldr	r3, [pc, #76]	; (8006154 <_sbrk+0x64>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d102      	bne.n	8006112 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800610c:	4b11      	ldr	r3, [pc, #68]	; (8006154 <_sbrk+0x64>)
 800610e:	4a12      	ldr	r2, [pc, #72]	; (8006158 <_sbrk+0x68>)
 8006110:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006112:	4b10      	ldr	r3, [pc, #64]	; (8006154 <_sbrk+0x64>)
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4413      	add	r3, r2
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	429a      	cmp	r2, r3
 800611e:	d207      	bcs.n	8006130 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006120:	f008 fca8 	bl	800ea74 <__errno>
 8006124:	4603      	mov	r3, r0
 8006126:	220c      	movs	r2, #12
 8006128:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800612a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800612e:	e009      	b.n	8006144 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006130:	4b08      	ldr	r3, [pc, #32]	; (8006154 <_sbrk+0x64>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006136:	4b07      	ldr	r3, [pc, #28]	; (8006154 <_sbrk+0x64>)
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4413      	add	r3, r2
 800613e:	4a05      	ldr	r2, [pc, #20]	; (8006154 <_sbrk+0x64>)
 8006140:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006142:	68fb      	ldr	r3, [r7, #12]
}
 8006144:	4618      	mov	r0, r3
 8006146:	3718      	adds	r7, #24
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	20018000 	.word	0x20018000
 8006150:	00000c00 	.word	0x00000c00
 8006154:	20003590 	.word	0x20003590
 8006158:	200036d8 	.word	0x200036d8

0800615c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800615c:	b480      	push	{r7}
 800615e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8006160:	4b06      	ldr	r3, [pc, #24]	; (800617c <SystemInit+0x20>)
 8006162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006166:	4a05      	ldr	r2, [pc, #20]	; (800617c <SystemInit+0x20>)
 8006168:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800616c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8006170:	bf00      	nop
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	e000ed00 	.word	0xe000ed00

08006180 <W25_SELECT>:

extern void Report(const uint8_t addTime, const char *fmt, ...);

//------------------------------------------------------------------------------------------

void W25_SELECT()   { W25_SEL(); } //HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_RESET);//set to 0
 8006180:	b580      	push	{r7, lr}
 8006182:	af00      	add	r7, sp, #0
 8006184:	2200      	movs	r2, #0
 8006186:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800618a:	4802      	ldr	r0, [pc, #8]	; (8006194 <W25_SELECT+0x14>)
 800618c:	f001 fbb6 	bl	80078fc <HAL_GPIO_WritePin>
 8006190:	bf00      	nop
 8006192:	bd80      	pop	{r7, pc}
 8006194:	48000400 	.word	0x48000400

08006198 <W25_UNSELECT>:
void W25_UNSELECT() { W25_UNSEL(); } //HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_SET);//set to 1
 8006198:	b580      	push	{r7, lr}
 800619a:	af00      	add	r7, sp, #0
 800619c:	2201      	movs	r2, #1
 800619e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80061a2:	4802      	ldr	r0, [pc, #8]	; (80061ac <W25_UNSELECT+0x14>)
 80061a4:	f001 fbaa 	bl	80078fc <HAL_GPIO_WritePin>
 80061a8:	bf00      	nop
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	48000400 	.word	0x48000400

080061b0 <W25qxx_Spi>:
//void W25_SELECT()   { HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_RESET); }//set to 0
//void W25_UNSELECT() { HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_SET); }//set to 1

//------------------------------------------------------------------------------------------
uint8_t W25qxx_Spi(uint8_t Data)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b086      	sub	sp, #24
 80061b4:	af02      	add	r7, sp, #8
 80061b6:	4603      	mov	r3, r0
 80061b8:	71fb      	strb	r3, [r7, #7]
uint8_t ret;

    if (HAL_SPI_TransmitReceive(portFLASH, &Data, &ret, 1, min_wait_ms) != HAL_OK) devError |= devSPI;
 80061ba:	4b0c      	ldr	r3, [pc, #48]	; (80061ec <W25qxx_Spi+0x3c>)
 80061bc:	6818      	ldr	r0, [r3, #0]
 80061be:	23fa      	movs	r3, #250	; 0xfa
 80061c0:	f107 020f 	add.w	r2, r7, #15
 80061c4:	1df9      	adds	r1, r7, #7
 80061c6:	9300      	str	r3, [sp, #0]
 80061c8:	2301      	movs	r3, #1
 80061ca:	f005 f9d6 	bl	800b57a <HAL_SPI_TransmitReceive>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d006      	beq.n	80061e2 <W25qxx_Spi+0x32>
 80061d4:	4b06      	ldr	r3, [pc, #24]	; (80061f0 <W25qxx_Spi+0x40>)
 80061d6:	881b      	ldrh	r3, [r3, #0]
 80061d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061dc:	b29a      	uxth	r2, r3
 80061de:	4b04      	ldr	r3, [pc, #16]	; (80061f0 <W25qxx_Spi+0x40>)
 80061e0:	801a      	strh	r2, [r3, #0]

    return ret;
 80061e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3710      	adds	r7, #16
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	2000000c 	.word	0x2000000c
 80061f0:	2000193c 	.word	0x2000193c

080061f4 <W25qxx_Reset>:
//------------------------------------------------------------------------------------------
void W25qxx_Reset(void)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	af00      	add	r7, sp, #0
	W25qxx_Delay(100);
 80061f8:	2064      	movs	r0, #100	; 0x64
 80061fa:	f000 fdd1 	bl	8006da0 <HAL_Delay>

	W25_SELECT();
 80061fe:	f7ff ffbf 	bl	8006180 <W25_SELECT>
		W25qxx_Spi(EN_RESET);
 8006202:	2066      	movs	r0, #102	; 0x66
 8006204:	f7ff ffd4 	bl	80061b0 <W25qxx_Spi>
		W25qxx_Spi(CHIP_RESET);
 8006208:	2099      	movs	r0, #153	; 0x99
 800620a:	f7ff ffd1 	bl	80061b0 <W25qxx_Spi>
	W25_UNSELECT();
 800620e:	f7ff ffc3 	bl	8006198 <W25_UNSELECT>

	W25qxx_Delay(100);
 8006212:	2064      	movs	r0, #100	; 0x64
 8006214:	f000 fdc4 	bl	8006da0 <HAL_Delay>
}
 8006218:	bf00      	nop
 800621a:	bd80      	pop	{r7, pc}

0800621c <W25qxx_ReadID>:
//------------------------------------------------------------------------------------------
uint32_t W25qxx_ReadID(void)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
uint32_t Temp[3] = {0};
 8006222:	1d3b      	adds	r3, r7, #4
 8006224:	2200      	movs	r2, #0
 8006226:	601a      	str	r2, [r3, #0]
 8006228:	605a      	str	r2, [r3, #4]
 800622a:	609a      	str	r2, [r3, #8]

    W25_SELECT();//set to 0
 800622c:	f7ff ffa8 	bl	8006180 <W25_SELECT>

    W25qxx_Spi(JEDEC_ID);
 8006230:	209f      	movs	r0, #159	; 0x9f
 8006232:	f7ff ffbd 	bl	80061b0 <W25qxx_Spi>
    Temp[0] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8006236:	20a5      	movs	r0, #165	; 0xa5
 8006238:	f7ff ffba 	bl	80061b0 <W25qxx_Spi>
 800623c:	4603      	mov	r3, r0
 800623e:	607b      	str	r3, [r7, #4]
    Temp[1] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8006240:	20a5      	movs	r0, #165	; 0xa5
 8006242:	f7ff ffb5 	bl	80061b0 <W25qxx_Spi>
 8006246:	4603      	mov	r3, r0
 8006248:	60bb      	str	r3, [r7, #8]
    Temp[2] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800624a:	20a5      	movs	r0, #165	; 0xa5
 800624c:	f7ff ffb0 	bl	80061b0 <W25qxx_Spi>
 8006250:	4603      	mov	r3, r0
 8006252:	60fb      	str	r3, [r7, #12]

    W25_UNSELECT();//set to 1
 8006254:	f7ff ffa0 	bl	8006198 <W25_UNSELECT>

    return ((Temp[0] << 16) | (Temp[1] << 8) | Temp[2]);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	041a      	lsls	r2, r3, #16
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	021b      	lsls	r3, r3, #8
 8006260:	431a      	orrs	r2, r3
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	4313      	orrs	r3, r2
}
 8006266:	4618      	mov	r0, r3
 8006268:	3710      	adds	r7, #16
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
	...

08006270 <W25qxx_ReadUniqID>:
//------------------------------------------------------------------------------------------
void W25qxx_ReadUniqID(void)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
	uint8_t dat[] = {READ_UID, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE};
 8006276:	4a18      	ldr	r2, [pc, #96]	; (80062d8 <W25qxx_ReadUniqID+0x68>)
 8006278:	463b      	mov	r3, r7
 800627a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800627e:	6018      	str	r0, [r3, #0]
 8006280:	3304      	adds	r3, #4
 8006282:	7019      	strb	r1, [r3, #0]
    W25_SELECT();
 8006284:	f7ff ff7c 	bl	8006180 <W25_SELECT>

    //W25qxx_Spi(READ_UID);
    //for (uint8_t i = 0; i < 4; i++) W25qxx_Spi(W25QXX_DUMMY_BYTE);
    //for (uint8_t i = 0; i < 8; i++) w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
    if (HAL_SPI_Transmit(portFLASH, dat, sizeof(dat), min_wait_ms) != HAL_OK) devError |= devSPI;
 8006288:	4b14      	ldr	r3, [pc, #80]	; (80062dc <W25qxx_ReadUniqID+0x6c>)
 800628a:	6818      	ldr	r0, [r3, #0]
 800628c:	23fa      	movs	r3, #250	; 0xfa
 800628e:	4639      	mov	r1, r7
 8006290:	2205      	movs	r2, #5
 8006292:	f004 fed4 	bl	800b03e <HAL_SPI_Transmit>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d006      	beq.n	80062aa <W25qxx_ReadUniqID+0x3a>
 800629c:	4b10      	ldr	r3, [pc, #64]	; (80062e0 <W25qxx_ReadUniqID+0x70>)
 800629e:	881b      	ldrh	r3, [r3, #0]
 80062a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	4b0e      	ldr	r3, [pc, #56]	; (80062e0 <W25qxx_ReadUniqID+0x70>)
 80062a8:	801a      	strh	r2, [r3, #0]
    if (HAL_SPI_Receive(portFLASH, w25qxx.UniqID, 8, min_wait_ms) != HAL_OK) devError |= devSPI;
 80062aa:	4b0c      	ldr	r3, [pc, #48]	; (80062dc <W25qxx_ReadUniqID+0x6c>)
 80062ac:	6818      	ldr	r0, [r3, #0]
 80062ae:	23fa      	movs	r3, #250	; 0xfa
 80062b0:	2208      	movs	r2, #8
 80062b2:	490c      	ldr	r1, [pc, #48]	; (80062e4 <W25qxx_ReadUniqID+0x74>)
 80062b4:	f005 f831 	bl	800b31a <HAL_SPI_Receive>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d006      	beq.n	80062cc <W25qxx_ReadUniqID+0x5c>
 80062be:	4b08      	ldr	r3, [pc, #32]	; (80062e0 <W25qxx_ReadUniqID+0x70>)
 80062c0:	881b      	ldrh	r3, [r3, #0]
 80062c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	4b05      	ldr	r3, [pc, #20]	; (80062e0 <W25qxx_ReadUniqID+0x70>)
 80062ca:	801a      	strh	r2, [r3, #0]

    W25_UNSELECT();
 80062cc:	f7ff ff64 	bl	8006198 <W25_UNSELECT>
}
 80062d0:	bf00      	nop
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	080138d0 	.word	0x080138d0
 80062dc:	2000000c 	.word	0x2000000c
 80062e0:	2000193c 	.word	0x2000193c
 80062e4:	20003595 	.word	0x20003595

080062e8 <W25qxx_WriteEnable>:
//------------------------------------------------------------------------------------------
void W25qxx_WriteEnable(void)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	af00      	add	r7, sp, #0
    W25_SELECT();
 80062ec:	f7ff ff48 	bl	8006180 <W25_SELECT>

    W25qxx_Spi(WRITE_ENABLE);
 80062f0:	2006      	movs	r0, #6
 80062f2:	f7ff ff5d 	bl	80061b0 <W25qxx_Spi>

    W25_UNSELECT();
 80062f6:	f7ff ff4f 	bl	8006198 <W25_UNSELECT>

    W25qxx_Delay(1);
 80062fa:	2001      	movs	r0, #1
 80062fc:	f000 fd50 	bl	8006da0 <HAL_Delay>
}
 8006300:	bf00      	nop
 8006302:	bd80      	pop	{r7, pc}

08006304 <W25qxx_ReadStatusRegister>:

    W25qxx_Delay(1);
}
//------------------------------------------------------------------------------------------
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusReg)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	4603      	mov	r3, r0
 800630c:	71fb      	strb	r3, [r7, #7]
uint8_t status = 0;
 800630e:	2300      	movs	r3, #0
 8006310:	73fb      	strb	r3, [r7, #15]

    W25_SELECT();
 8006312:	f7ff ff35 	bl	8006180 <W25_SELECT>

    switch (SelectStatusReg) {
 8006316:	79fb      	ldrb	r3, [r7, #7]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d002      	beq.n	8006322 <W25qxx_ReadStatusRegister+0x1e>
 800631c:	2b02      	cmp	r3, #2
 800631e:	d00d      	beq.n	800633c <W25qxx_ReadStatusRegister+0x38>
 8006320:	e019      	b.n	8006356 <W25qxx_ReadStatusRegister+0x52>
        case 1:
            W25qxx_Spi(READ_STAT_REG1);
 8006322:	2005      	movs	r0, #5
 8006324:	f7ff ff44 	bl	80061b0 <W25qxx_Spi>
            status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8006328:	20a5      	movs	r0, #165	; 0xa5
 800632a:	f7ff ff41 	bl	80061b0 <W25qxx_Spi>
 800632e:	4603      	mov	r3, r0
 8006330:	73fb      	strb	r3, [r7, #15]
            w25qxx.StatusRegister1 = status;
 8006332:	4a12      	ldr	r2, [pc, #72]	; (800637c <W25qxx_ReadStatusRegister+0x78>)
 8006334:	7bfb      	ldrb	r3, [r7, #15]
 8006336:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
        break;
 800633a:	e018      	b.n	800636e <W25qxx_ReadStatusRegister+0x6a>
        case 2:
            W25qxx_Spi(READ_STAT_REG2);
 800633c:	2035      	movs	r0, #53	; 0x35
 800633e:	f7ff ff37 	bl	80061b0 <W25qxx_Spi>
            status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8006342:	20a5      	movs	r0, #165	; 0xa5
 8006344:	f7ff ff34 	bl	80061b0 <W25qxx_Spi>
 8006348:	4603      	mov	r3, r0
 800634a:	73fb      	strb	r3, [r7, #15]
            w25qxx.StatusRegister2 = status;
 800634c:	4a0b      	ldr	r2, [pc, #44]	; (800637c <W25qxx_ReadStatusRegister+0x78>)
 800634e:	7bfb      	ldrb	r3, [r7, #15]
 8006350:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
        break;
 8006354:	e00b      	b.n	800636e <W25qxx_ReadStatusRegister+0x6a>
        default : {
            W25qxx_Spi(READ_STAT_REG3);
 8006356:	2015      	movs	r0, #21
 8006358:	f7ff ff2a 	bl	80061b0 <W25qxx_Spi>
            status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800635c:	20a5      	movs	r0, #165	; 0xa5
 800635e:	f7ff ff27 	bl	80061b0 <W25qxx_Spi>
 8006362:	4603      	mov	r3, r0
 8006364:	73fb      	strb	r3, [r7, #15]
            w25qxx.StatusRegister3 = status;
 8006366:	4a05      	ldr	r2, [pc, #20]	; (800637c <W25qxx_ReadStatusRegister+0x78>)
 8006368:	7bfb      	ldrb	r3, [r7, #15]
 800636a:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
        }
    }

    W25_UNSELECT();
 800636e:	f7ff ff13 	bl	8006198 <W25_UNSELECT>

    return status;
 8006372:	7bfb      	ldrb	r3, [r7, #15]
}
 8006374:	4618      	mov	r0, r3
 8006376:	3710      	adds	r7, #16
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	20003594 	.word	0x20003594

08006380 <W25qxx_WaitForWriteEnd>:

    W25_UNSELECT();
}
//------------------------------------------------------------------------------------------
void W25qxx_WaitForWriteEnd(void)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	af00      	add	r7, sp, #0
    W25qxx_Delay(1);
 8006384:	2001      	movs	r0, #1
 8006386:	f000 fd0b 	bl	8006da0 <HAL_Delay>

    W25_SELECT();
 800638a:	f7ff fef9 	bl	8006180 <W25_SELECT>

    W25qxx_Spi(READ_STAT_REG1);
 800638e:	2005      	movs	r0, #5
 8006390:	f7ff ff0e 	bl	80061b0 <W25qxx_Spi>
    do
    {
        w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8006394:	20a5      	movs	r0, #165	; 0xa5
 8006396:	f7ff ff0b 	bl	80061b0 <W25qxx_Spi>
 800639a:	4603      	mov	r3, r0
 800639c:	461a      	mov	r2, r3
 800639e:	4b08      	ldr	r3, [pc, #32]	; (80063c0 <W25qxx_WaitForWriteEnd+0x40>)
 80063a0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        W25qxx_Delay(1);
 80063a4:	2001      	movs	r0, #1
 80063a6:	f000 fcfb 	bl	8006da0 <HAL_Delay>
    } while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 80063aa:	4b05      	ldr	r3, [pc, #20]	; (80063c0 <W25qxx_WaitForWriteEnd+0x40>)
 80063ac:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80063b0:	f003 0301 	and.w	r3, r3, #1
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d1ed      	bne.n	8006394 <W25qxx_WaitForWriteEnd+0x14>

    W25_UNSELECT();
 80063b8:	f7ff feee 	bl	8006198 <W25_UNSELECT>
}
 80063bc:	bf00      	nop
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	20003594 	.word	0x20003594

080063c4 <W25qxx_Init>:
//------------------------------------------------------------------------------------------
bool W25qxx_Init(void)
{
 80063c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063c6:	b089      	sub	sp, #36	; 0x24
 80063c8:	af06      	add	r7, sp, #24

	W25qxx_Reset();
 80063ca:	f7ff ff13 	bl	80061f4 <W25qxx_Reset>


    w25qxx.Lock = 1;
 80063ce:	4b54      	ldr	r3, [pc, #336]	; (8006520 <W25qxx_Init+0x15c>)
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    bool ret = false;
 80063d6:	2300      	movs	r3, #0
 80063d8:	71fb      	strb	r3, [r7, #7]

    W25_UNSELECT();
 80063da:	f7ff fedd 	bl	8006198 <W25_UNSELECT>

    uint32_t id = W25qxx_ReadID() & 0xffff;
 80063de:	f7ff ff1d 	bl	800621c <W25qxx_ReadID>
 80063e2:	4603      	mov	r3, r0
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	603b      	str	r3, [r7, #0]
//#ifdef W25QXX_DEBUG
    Report(1, "w25qxx Init Begin... Chip ID:0x%X\r\n", id);
 80063e8:	683a      	ldr	r2, [r7, #0]
 80063ea:	494e      	ldr	r1, [pc, #312]	; (8006524 <W25qxx_Init+0x160>)
 80063ec:	2001      	movs	r0, #1
 80063ee:	f7fe f84f 	bl	8004490 <Report>
//#endif
    id &= 0xff;
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	603b      	str	r3, [r7, #0]
    id -= 0x10;//0x4010;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	3b10      	subs	r3, #16
 80063fc:	603b      	str	r3, [r7, #0]
    if (id > 0x0a) id = 0;
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	2b0a      	cmp	r3, #10
 8006402:	d901      	bls.n	8006408 <W25qxx_Init+0x44>
 8006404:	2300      	movs	r3, #0
 8006406:	603b      	str	r3, [r7, #0]
    w25qxx.ID         = id;              //W25Q10..W25Q512
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	b2da      	uxtb	r2, r3
 800640c:	4b44      	ldr	r3, [pc, #272]	; (8006520 <W25qxx_Init+0x15c>)
 800640e:	701a      	strb	r2, [r3, #0]
    w25qxx.BlockCount = all_chipBLK[id]; //0..1024;
 8006410:	4a45      	ldr	r2, [pc, #276]	; (8006528 <W25qxx_Init+0x164>)
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006418:	4a41      	ldr	r2, [pc, #260]	; (8006520 <W25qxx_Init+0x15c>)
 800641a:	f8c2 301b 	str.w	r3, [r2, #27]
//#ifdef W25QXX_DEBUG
    Report(1, "Chip %s\r\n", all_chipID[id]);
 800641e:	4a43      	ldr	r2, [pc, #268]	; (800652c <W25qxx_Init+0x168>)
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006426:	461a      	mov	r2, r3
 8006428:	4941      	ldr	r1, [pc, #260]	; (8006530 <W25qxx_Init+0x16c>)
 800642a:	2001      	movs	r0, #1
 800642c:	f7fe f830 	bl	8004490 <Report>
//#endif

    if (id) {
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d06b      	beq.n	800650e <W25qxx_Init+0x14a>
    	w25qxx.PageSize = 256;
 8006436:	4b3a      	ldr	r3, [pc, #232]	; (8006520 <W25qxx_Init+0x15c>)
 8006438:	2200      	movs	r2, #0
 800643a:	725a      	strb	r2, [r3, #9]
 800643c:	2200      	movs	r2, #0
 800643e:	f042 0201 	orr.w	r2, r2, #1
 8006442:	729a      	strb	r2, [r3, #10]
    	w25qxx.SectorSize = 0x1000;
 8006444:	4b36      	ldr	r3, [pc, #216]	; (8006520 <W25qxx_Init+0x15c>)
 8006446:	2200      	movs	r2, #0
 8006448:	73da      	strb	r2, [r3, #15]
 800644a:	2200      	movs	r2, #0
 800644c:	f042 0210 	orr.w	r2, r2, #16
 8006450:	741a      	strb	r2, [r3, #16]
 8006452:	2200      	movs	r2, #0
 8006454:	745a      	strb	r2, [r3, #17]
 8006456:	2200      	movs	r2, #0
 8006458:	749a      	strb	r2, [r3, #18]
    	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 800645a:	4b31      	ldr	r3, [pc, #196]	; (8006520 <W25qxx_Init+0x15c>)
 800645c:	f8d3 301b 	ldr.w	r3, [r3, #27]
 8006460:	011b      	lsls	r3, r3, #4
 8006462:	4a2f      	ldr	r2, [pc, #188]	; (8006520 <W25qxx_Init+0x15c>)
 8006464:	f8c2 3013 	str.w	r3, [r2, #19]
    	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8006468:	4b2d      	ldr	r3, [pc, #180]	; (8006520 <W25qxx_Init+0x15c>)
 800646a:	f8d3 3013 	ldr.w	r3, [r3, #19]
 800646e:	4a2c      	ldr	r2, [pc, #176]	; (8006520 <W25qxx_Init+0x15c>)
 8006470:	f8d2 200f 	ldr.w	r2, [r2, #15]
 8006474:	fb02 f303 	mul.w	r3, r2, r3
 8006478:	4a29      	ldr	r2, [pc, #164]	; (8006520 <W25qxx_Init+0x15c>)
 800647a:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 800647e:	b292      	uxth	r2, r2
 8006480:	fbb3 f3f2 	udiv	r3, r3, r2
 8006484:	4a26      	ldr	r2, [pc, #152]	; (8006520 <W25qxx_Init+0x15c>)
 8006486:	f8c2 300b 	str.w	r3, [r2, #11]
    	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 800648a:	4b25      	ldr	r3, [pc, #148]	; (8006520 <W25qxx_Init+0x15c>)
 800648c:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006490:	011b      	lsls	r3, r3, #4
 8006492:	4a23      	ldr	r2, [pc, #140]	; (8006520 <W25qxx_Init+0x15c>)
 8006494:	f8c2 3017 	str.w	r3, [r2, #23]
    	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8006498:	4b21      	ldr	r3, [pc, #132]	; (8006520 <W25qxx_Init+0x15c>)
 800649a:	f8d3 3013 	ldr.w	r3, [r3, #19]
 800649e:	4a20      	ldr	r2, [pc, #128]	; (8006520 <W25qxx_Init+0x15c>)
 80064a0:	f8d2 200f 	ldr.w	r2, [r2, #15]
 80064a4:	fb02 f303 	mul.w	r3, r2, r3
 80064a8:	0a9b      	lsrs	r3, r3, #10
 80064aa:	4a1d      	ldr	r2, [pc, #116]	; (8006520 <W25qxx_Init+0x15c>)
 80064ac:	f8c2 301f 	str.w	r3, [r2, #31]
    	W25qxx_ReadUniqID();
 80064b0:	f7ff fede 	bl	8006270 <W25qxx_ReadUniqID>
    	W25qxx_ReadStatusRegister(1);
 80064b4:	2001      	movs	r0, #1
 80064b6:	f7ff ff25 	bl	8006304 <W25qxx_ReadStatusRegister>
    	W25qxx_ReadStatusRegister(2);
 80064ba:	2002      	movs	r0, #2
 80064bc:	f7ff ff22 	bl	8006304 <W25qxx_ReadStatusRegister>
    	W25qxx_ReadStatusRegister(3);
 80064c0:	2003      	movs	r0, #3
 80064c2:	f7ff ff1f 	bl	8006304 <W25qxx_ReadStatusRegister>
    	ret = true;
 80064c6:	2301      	movs	r3, #1
 80064c8:	71fb      	strb	r3, [r7, #7]
                 "\tSector Size:\t%u bytes\r\n"
                 "\tSector Count:\t%u\r\n"
                 "\tBlock Size:\t%u bytes\r\n"
                 "\tBlock Count:\t%u\r\n"
                 "\tCapacity:\t%u KBytes\r\n",
                 w25qxx.PageSize,
 80064ca:	4b15      	ldr	r3, [pc, #84]	; (8006520 <W25qxx_Init+0x15c>)
 80064cc:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80064d0:	b29b      	uxth	r3, r3
    	Report(0,"\tPage Size:\t%u bytes\r\n"
 80064d2:	461e      	mov	r6, r3
 80064d4:	4b12      	ldr	r3, [pc, #72]	; (8006520 <W25qxx_Init+0x15c>)
 80064d6:	f8d3 500b 	ldr.w	r5, [r3, #11]
 80064da:	4b11      	ldr	r3, [pc, #68]	; (8006520 <W25qxx_Init+0x15c>)
 80064dc:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80064e0:	4a0f      	ldr	r2, [pc, #60]	; (8006520 <W25qxx_Init+0x15c>)
 80064e2:	f8d2 2013 	ldr.w	r2, [r2, #19]
 80064e6:	490e      	ldr	r1, [pc, #56]	; (8006520 <W25qxx_Init+0x15c>)
 80064e8:	f8d1 1017 	ldr.w	r1, [r1, #23]
 80064ec:	480c      	ldr	r0, [pc, #48]	; (8006520 <W25qxx_Init+0x15c>)
 80064ee:	f8d0 001b 	ldr.w	r0, [r0, #27]
 80064f2:	4c0b      	ldr	r4, [pc, #44]	; (8006520 <W25qxx_Init+0x15c>)
 80064f4:	f8d4 401f 	ldr.w	r4, [r4, #31]
 80064f8:	9404      	str	r4, [sp, #16]
 80064fa:	9003      	str	r0, [sp, #12]
 80064fc:	9102      	str	r1, [sp, #8]
 80064fe:	9201      	str	r2, [sp, #4]
 8006500:	9300      	str	r3, [sp, #0]
 8006502:	462b      	mov	r3, r5
 8006504:	4632      	mov	r2, r6
 8006506:	490b      	ldr	r1, [pc, #44]	; (8006534 <W25qxx_Init+0x170>)
 8006508:	2000      	movs	r0, #0
 800650a:	f7fd ffc1 	bl	8004490 <Report>
                 w25qxx.BlockCount,
                 w25qxx.CapacityInKiloByte);
//#endif
    }

    w25qxx.Lock = 0;
 800650e:	4b04      	ldr	r3, [pc, #16]	; (8006520 <W25qxx_Init+0x15c>)
 8006510:	2200      	movs	r2, #0
 8006512:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    return ret;
 8006516:	79fb      	ldrb	r3, [r7, #7]
}
 8006518:	4618      	mov	r0, r3
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006520:	20003594 	.word	0x20003594
 8006524:	080138d8 	.word	0x080138d8
 8006528:	08014820 	.word	0x08014820
 800652c:	20000208 	.word	0x20000208
 8006530:	080138fc 	.word	0x080138fc
 8006534:	08013908 	.word	0x08013908

08006538 <W25qxx_getChipID>:
//------------------------------------------------------------------------------------------
uint32_t W25qxx_getChipID()
{
 8006538:	b480      	push	{r7}
 800653a:	af00      	add	r7, sp, #0
	return (uint32_t)w25qxx.ID;
 800653c:	4b03      	ldr	r3, [pc, #12]	; (800654c <W25qxx_getChipID+0x14>)
 800653e:	781b      	ldrb	r3, [r3, #0]
}
 8006540:	4618      	mov	r0, r3
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	20003594 	.word	0x20003594

08006550 <W25qxx_getSectorCount>:
uint32_t W25qxx_getSectorCount()
{
 8006550:	b480      	push	{r7}
 8006552:	af00      	add	r7, sp, #0
	return w25qxx.SectorCount;
 8006554:	4b03      	ldr	r3, [pc, #12]	; (8006564 <W25qxx_getSectorCount+0x14>)
 8006556:	f8d3 3013 	ldr.w	r3, [r3, #19]
}
 800655a:	4618      	mov	r0, r3
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr
 8006564:	20003594 	.word	0x20003594

08006568 <W25qxx_getSectorSize>:
uint32_t W25qxx_getSectorSize()
{
 8006568:	b480      	push	{r7}
 800656a:	af00      	add	r7, sp, #0
	return w25qxx.SectorSize;
 800656c:	4b03      	ldr	r3, [pc, #12]	; (800657c <W25qxx_getSectorSize+0x14>)
 800656e:	f8d3 300f 	ldr.w	r3, [r3, #15]
}
 8006572:	4618      	mov	r0, r3
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr
 800657c:	20003594 	.word	0x20003594

08006580 <W25qxx_getPageSize>:
uint32_t W25qxx_getPageCount()
{
	return w25qxx.PageCount;
}
uint32_t W25qxx_getPageSize()
{
 8006580:	b480      	push	{r7}
 8006582:	af00      	add	r7, sp, #0
	return w25qxx.PageSize;
 8006584:	4b04      	ldr	r3, [pc, #16]	; (8006598 <W25qxx_getPageSize+0x18>)
 8006586:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800658a:	b29b      	uxth	r3, r3
}
 800658c:	4618      	mov	r0, r3
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	20003594 	.word	0x20003594

0800659c <W25qxx_EraseSector>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
    while (w25qxx.Lock) W25qxx_Delay(1);
 80065a4:	e002      	b.n	80065ac <W25qxx_EraseSector+0x10>
 80065a6:	2001      	movs	r0, #1
 80065a8:	f000 fbfa 	bl	8006da0 <HAL_Delay>
 80065ac:	4b1c      	ldr	r3, [pc, #112]	; (8006620 <W25qxx_EraseSector+0x84>)
 80065ae:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1f7      	bne.n	80065a6 <W25qxx_EraseSector+0xa>

    w25qxx.Lock = 1;
 80065b6:	4b1a      	ldr	r3, [pc, #104]	; (8006620 <W25qxx_EraseSector+0x84>)
 80065b8:	2201      	movs	r2, #1
 80065ba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
#ifdef W25QXX_DEBUG
    uint32_t StartTime = HAL_GetTick();
    Report(1, "%u Begin...", SectorAddr);
#endif

    W25qxx_WaitForWriteEnd();
 80065be:	f7ff fedf 	bl	8006380 <W25qxx_WaitForWriteEnd>
    SectorAddr = SectorAddr * w25qxx.SectorSize;
 80065c2:	4b17      	ldr	r3, [pc, #92]	; (8006620 <W25qxx_EraseSector+0x84>)
 80065c4:	f8d3 200f 	ldr.w	r2, [r3, #15]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	fb02 f303 	mul.w	r3, r2, r3
 80065ce:	607b      	str	r3, [r7, #4]
    W25qxx_WriteEnable();
 80065d0:	f7ff fe8a 	bl	80062e8 <W25qxx_WriteEnable>

    W25_SELECT();
 80065d4:	f7ff fdd4 	bl	8006180 <W25_SELECT>
    W25qxx_Spi(SECTOR_ERASE);
 80065d8:	2020      	movs	r0, #32
 80065da:	f7ff fde9 	bl	80061b0 <W25qxx_Spi>
    //if (w25qxx.ID >= W25Q256) W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
    W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	0c1b      	lsrs	r3, r3, #16
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	4618      	mov	r0, r3
 80065e6:	f7ff fde3 	bl	80061b0 <W25qxx_Spi>
    W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	0a1b      	lsrs	r3, r3, #8
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	4618      	mov	r0, r3
 80065f2:	f7ff fddd 	bl	80061b0 <W25qxx_Spi>
    W25qxx_Spi(SectorAddr & 0xFF);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7ff fdd8 	bl	80061b0 <W25qxx_Spi>
    W25_UNSELECT();
 8006600:	f7ff fdca 	bl	8006198 <W25_UNSELECT>

    W25qxx_WaitForWriteEnd();
 8006604:	f7ff febc 	bl	8006380 <W25qxx_WaitForWriteEnd>

#ifdef W25QXX_DEBUG
    uint32_t dur = HAL_GetTick() - StartTime;
    Report(0, " done after %u ms (%u sec)!\r\n", dur, dur / 1000);
#endif
    W25qxx_Delay(1);
 8006608:	2001      	movs	r0, #1
 800660a:	f000 fbc9 	bl	8006da0 <HAL_Delay>

    w25qxx.Lock = 0;
 800660e:	4b04      	ldr	r3, [pc, #16]	; (8006620 <W25qxx_EraseSector+0x84>)
 8006610:	2200      	movs	r2, #0
 8006612:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8006616:	bf00      	nop
 8006618:	3708      	adds	r7, #8
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	20003594 	.word	0x20003594

08006624 <W25qxx_SectorToPage>:
{
    return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//------------------------------------------------------------------------------------------
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
    return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 800662c:	4b08      	ldr	r3, [pc, #32]	; (8006650 <W25qxx_SectorToPage+0x2c>)
 800662e:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	fb02 f303 	mul.w	r3, r2, r3
 8006638:	4a05      	ldr	r2, [pc, #20]	; (8006650 <W25qxx_SectorToPage+0x2c>)
 800663a:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 800663e:	b292      	uxth	r2, r2
 8006640:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8006644:	4618      	mov	r0, r3
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr
 8006650:	20003594 	.word	0x20003594

08006654 <W25qxx_IsEmptySector>:

    return false;
}
//------------------------------------------------------------------------------------------
bool W25qxx_IsEmptySector(uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToCheck_up_to_SectorSize)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b090      	sub	sp, #64	; 0x40
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	607a      	str	r2, [r7, #4]
    while (w25qxx.Lock) W25qxx_Delay(1);
 8006660:	e002      	b.n	8006668 <W25qxx_IsEmptySector+0x14>
 8006662:	2001      	movs	r0, #1
 8006664:	f000 fb9c 	bl	8006da0 <HAL_Delay>
 8006668:	4b59      	ldr	r3, [pc, #356]	; (80067d0 <W25qxx_IsEmptySector+0x17c>)
 800666a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1f7      	bne.n	8006662 <W25qxx_IsEmptySector+0xe>

    w25qxx.Lock = 1;
 8006672:	4b57      	ldr	r3, [pc, #348]	; (80067d0 <W25qxx_IsEmptySector+0x17c>)
 8006674:	2201      	movs	r2, #1
 8006676:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    if ( (NumByteToCheck_up_to_SectorSize > w25qxx.SectorSize) || (!NumByteToCheck_up_to_SectorSize) )
 800667a:	4b55      	ldr	r3, [pc, #340]	; (80067d0 <W25qxx_IsEmptySector+0x17c>)
 800667c:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	429a      	cmp	r2, r3
 8006684:	d802      	bhi.n	800668c <W25qxx_IsEmptySector+0x38>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d103      	bne.n	8006694 <W25qxx_IsEmptySector+0x40>
                NumByteToCheck_up_to_SectorSize = w25qxx.SectorSize;
 800668c:	4b50      	ldr	r3, [pc, #320]	; (80067d0 <W25qxx_IsEmptySector+0x17c>)
 800668e:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006692:	607b      	str	r3, [r7, #4]
    uint32_t StartTime = HAL_GetTick();
#endif

    uint8_t pBuffer[32];
    uint32_t i, WorkAddress;
    for ( i = OffsetInByte; i < w25qxx.SectorSize; i += sizeof(pBuffer)) {
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006698:	e040      	b.n	800671c <W25qxx_IsEmptySector+0xc8>

    	W25_SELECT();
 800669a:	f7ff fd71 	bl	8006180 <W25_SELECT>
        WorkAddress = (i + Sector_Address * w25qxx.SectorSize);
 800669e:	4b4c      	ldr	r3, [pc, #304]	; (80067d0 <W25qxx_IsEmptySector+0x17c>)
 80066a0:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	fb02 f303 	mul.w	r3, r2, r3
 80066aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80066ac:	4413      	add	r3, r2
 80066ae:	637b      	str	r3, [r7, #52]	; 0x34
        W25qxx_Spi(DATA_READ);//FAST_READ);
 80066b0:	2003      	movs	r0, #3
 80066b2:	f7ff fd7d 	bl	80061b0 <W25qxx_Spi>
        //if (w25qxx.ID >= W25Q256) W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
        W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 80066b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066b8:	0c1b      	lsrs	r3, r3, #16
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	4618      	mov	r0, r3
 80066be:	f7ff fd77 	bl	80061b0 <W25qxx_Spi>
        W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 80066c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066c4:	0a1b      	lsrs	r3, r3, #8
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	4618      	mov	r0, r3
 80066ca:	f7ff fd71 	bl	80061b0 <W25qxx_Spi>
        W25qxx_Spi(WorkAddress & 0xFF);
 80066ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7ff fd6c 	bl	80061b0 <W25qxx_Spi>
        //W25qxx_Spi(0);
        HAL_SPI_Receive(portFLASH, pBuffer, sizeof(pBuffer), min_wait_ms);
 80066d8:	4b3e      	ldr	r3, [pc, #248]	; (80067d4 <W25qxx_IsEmptySector+0x180>)
 80066da:	6818      	ldr	r0, [r3, #0]
 80066dc:	23fa      	movs	r3, #250	; 0xfa
 80066de:	f107 0114 	add.w	r1, r7, #20
 80066e2:	2220      	movs	r2, #32
 80066e4:	f004 fe19 	bl	800b31a <HAL_SPI_Receive>
        W25_UNSELECT();
 80066e8:	f7ff fd56 	bl	8006198 <W25_UNSELECT>

        for (uint8_t x = 0; x < sizeof(pBuffer); x++) {
 80066ec:	2300      	movs	r3, #0
 80066ee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80066f2:	e00c      	b.n	800670e <W25qxx_IsEmptySector+0xba>
            if (pBuffer[x] != 0xFF) goto NOT_EMPTY;
 80066f4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80066f8:	3340      	adds	r3, #64	; 0x40
 80066fa:	443b      	add	r3, r7
 80066fc:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8006700:	2bff      	cmp	r3, #255	; 0xff
 8006702:	d159      	bne.n	80067b8 <W25qxx_IsEmptySector+0x164>
        for (uint8_t x = 0; x < sizeof(pBuffer); x++) {
 8006704:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006708:	3301      	adds	r3, #1
 800670a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800670e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006712:	2b1f      	cmp	r3, #31
 8006714:	d9ee      	bls.n	80066f4 <W25qxx_IsEmptySector+0xa0>
    for ( i = OffsetInByte; i < w25qxx.SectorSize; i += sizeof(pBuffer)) {
 8006716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006718:	3320      	adds	r3, #32
 800671a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800671c:	4b2c      	ldr	r3, [pc, #176]	; (80067d0 <W25qxx_IsEmptySector+0x17c>)
 800671e:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006722:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006724:	429a      	cmp	r2, r3
 8006726:	d3b8      	bcc.n	800669a <W25qxx_IsEmptySector+0x46>
        }
    }
    if ((w25qxx.SectorSize + OffsetInByte) % sizeof(pBuffer) != 0) {
 8006728:	4b29      	ldr	r3, [pc, #164]	; (80067d0 <W25qxx_IsEmptySector+0x17c>)
 800672a:	f8d3 200f 	ldr.w	r2, [r3, #15]
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	4413      	add	r3, r2
 8006732:	f003 031f 	and.w	r3, r3, #31
 8006736:	2b00      	cmp	r3, #0
 8006738:	d038      	beq.n	80067ac <W25qxx_IsEmptySector+0x158>
        i -= sizeof(pBuffer);
 800673a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800673c:	3b20      	subs	r3, #32
 800673e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for( ; i < w25qxx.SectorSize; i++) {
 8006740:	e02e      	b.n	80067a0 <W25qxx_IsEmptySector+0x14c>

            W25_SELECT();
 8006742:	f7ff fd1d 	bl	8006180 <W25_SELECT>
            WorkAddress = (i + Sector_Address * w25qxx.SectorSize);
 8006746:	4b22      	ldr	r3, [pc, #136]	; (80067d0 <W25qxx_IsEmptySector+0x17c>)
 8006748:	f8d3 300f 	ldr.w	r3, [r3, #15]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	fb02 f303 	mul.w	r3, r2, r3
 8006752:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006754:	4413      	add	r3, r2
 8006756:	637b      	str	r3, [r7, #52]	; 0x34
            W25qxx_Spi(DATA_READ);//FAST_READ);
 8006758:	2003      	movs	r0, #3
 800675a:	f7ff fd29 	bl	80061b0 <W25qxx_Spi>
            //if (w25qxx.ID >= W25Q256) W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
            W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 800675e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006760:	0c1b      	lsrs	r3, r3, #16
 8006762:	b2db      	uxtb	r3, r3
 8006764:	4618      	mov	r0, r3
 8006766:	f7ff fd23 	bl	80061b0 <W25qxx_Spi>
            W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 800676a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800676c:	0a1b      	lsrs	r3, r3, #8
 800676e:	b2db      	uxtb	r3, r3
 8006770:	4618      	mov	r0, r3
 8006772:	f7ff fd1d 	bl	80061b0 <W25qxx_Spi>
            W25qxx_Spi(WorkAddress & 0xFF);
 8006776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006778:	b2db      	uxtb	r3, r3
 800677a:	4618      	mov	r0, r3
 800677c:	f7ff fd18 	bl	80061b0 <W25qxx_Spi>
            //W25qxx_Spi(0);
            HAL_SPI_Receive(portFLASH, pBuffer, 1, min_wait_ms);
 8006780:	4b14      	ldr	r3, [pc, #80]	; (80067d4 <W25qxx_IsEmptySector+0x180>)
 8006782:	6818      	ldr	r0, [r3, #0]
 8006784:	23fa      	movs	r3, #250	; 0xfa
 8006786:	f107 0114 	add.w	r1, r7, #20
 800678a:	2201      	movs	r2, #1
 800678c:	f004 fdc5 	bl	800b31a <HAL_SPI_Receive>
            W25_UNSELECT();
 8006790:	f7ff fd02 	bl	8006198 <W25_UNSELECT>

            if (pBuffer[0] != 0xFF) goto NOT_EMPTY;
 8006794:	7d3b      	ldrb	r3, [r7, #20]
 8006796:	2bff      	cmp	r3, #255	; 0xff
 8006798:	d110      	bne.n	80067bc <W25qxx_IsEmptySector+0x168>
        for( ; i < w25qxx.SectorSize; i++) {
 800679a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800679c:	3301      	adds	r3, #1
 800679e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067a0:	4b0b      	ldr	r3, [pc, #44]	; (80067d0 <W25qxx_IsEmptySector+0x17c>)
 80067a2:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80067a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d3ca      	bcc.n	8006742 <W25qxx_IsEmptySector+0xee>
#ifdef W25QXX_DEBUG
    Report(1, "w25qxx CheckSector is Empty in %u ms\r\n", HAL_GetTick() - StartTime);
    //W25qxx_Delay(100);
#endif

    w25qxx.Lock = 0;
 80067ac:	4b08      	ldr	r3, [pc, #32]	; (80067d0 <W25qxx_IsEmptySector+0x17c>)
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    return true;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e007      	b.n	80067c8 <W25qxx_IsEmptySector+0x174>
            if (pBuffer[x] != 0xFF) goto NOT_EMPTY;
 80067b8:	bf00      	nop
 80067ba:	e000      	b.n	80067be <W25qxx_IsEmptySector+0x16a>
            if (pBuffer[0] != 0xFF) goto NOT_EMPTY;
 80067bc:	bf00      	nop
#ifdef W25QXX_DEBUG
    Report(1, "w25qxx CheckSector is Not Empty in %u ms\r\n", HAL_GetTick() - StartTime);
    //W25qxx_Delay(100);
#endif

    w25qxx.Lock = 0;
 80067be:	4b04      	ldr	r3, [pc, #16]	; (80067d0 <W25qxx_IsEmptySector+0x17c>)
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    return false;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3740      	adds	r7, #64	; 0x40
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	20003594 	.word	0x20003594
 80067d4:	2000000c 	.word	0x2000000c

080067d8 <W25qxx_WritePage>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b086      	sub	sp, #24
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]
 80067e4:	603b      	str	r3, [r7, #0]
    while (w25qxx.Lock) W25qxx_Delay(1);
 80067e6:	e002      	b.n	80067ee <W25qxx_WritePage+0x16>
 80067e8:	2001      	movs	r0, #1
 80067ea:	f000 fad9 	bl	8006da0 <HAL_Delay>
 80067ee:	4b4d      	ldr	r3, [pc, #308]	; (8006924 <W25qxx_WritePage+0x14c>)
 80067f0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d1f7      	bne.n	80067e8 <W25qxx_WritePage+0x10>

    w25qxx.Lock = 1;
 80067f8:	4b4a      	ldr	r3, [pc, #296]	; (8006924 <W25qxx_WritePage+0x14c>)
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    if ( ((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || !NumByteToWrite_up_to_PageSize )
 8006800:	683a      	ldr	r2, [r7, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4413      	add	r3, r2
 8006806:	4a47      	ldr	r2, [pc, #284]	; (8006924 <W25qxx_WritePage+0x14c>)
 8006808:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 800680c:	b292      	uxth	r2, r2
 800680e:	4293      	cmp	r3, r2
 8006810:	d802      	bhi.n	8006818 <W25qxx_WritePage+0x40>
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d107      	bne.n	8006828 <W25qxx_WritePage+0x50>
                NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8006818:	4b42      	ldr	r3, [pc, #264]	; (8006924 <W25qxx_WritePage+0x14c>)
 800681a:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800681e:	b29b      	uxth	r3, r3
 8006820:	461a      	mov	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	603b      	str	r3, [r7, #0]
    if ( (OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize )
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	4413      	add	r3, r2
 800682e:	4a3d      	ldr	r2, [pc, #244]	; (8006924 <W25qxx_WritePage+0x14c>)
 8006830:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8006834:	b292      	uxth	r2, r2
 8006836:	4293      	cmp	r3, r2
 8006838:	d907      	bls.n	800684a <W25qxx_WritePage+0x72>
                NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800683a:	4b3a      	ldr	r3, [pc, #232]	; (8006924 <W25qxx_WritePage+0x14c>)
 800683c:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006840:	b29b      	uxth	r3, r3
 8006842:	461a      	mov	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	603b      	str	r3, [r7, #0]
    Report(1, "%s WritePage:0x%X(%u), Offset:%u ,Writes %u Bytes, begin...\r\n",
                 __func__, Page_Address, Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
    uint32_t StartTime = HAL_GetTick();
#endif

    W25qxx_WaitForWriteEnd();
 800684a:	f7ff fd99 	bl	8006380 <W25qxx_WaitForWriteEnd>
    W25qxx_WriteEnable();
 800684e:	f7ff fd4b 	bl	80062e8 <W25qxx_WriteEnable>

    Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8006852:	4b34      	ldr	r3, [pc, #208]	; (8006924 <W25qxx_WritePage+0x14c>)
 8006854:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006858:	b29b      	uxth	r3, r3
 800685a:	461a      	mov	r2, r3
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	fb02 f303 	mul.w	r3, r2, r3
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	4413      	add	r3, r2
 8006866:	60bb      	str	r3, [r7, #8]
    W25qxx_Spi((Page_Address & 0xFF00) >> 8);
    W25qxx_Spi(Page_Address&0xFF);
    HAL_SPI_Transmit(portFLASH, pBuffer, NumByteToWrite_up_to_PageSize, min_wait_ms);
    W25_UNSELECT();*/

    uint16_t lens = NumByteToWrite_up_to_PageSize + PAGE_HDR_BYTES;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	b29b      	uxth	r3, r3
 800686c:	3304      	adds	r3, #4
 800686e:	82fb      	strh	r3, [r7, #22]
    int idx = 0;
 8006870:	2300      	movs	r3, #0
 8006872:	613b      	str	r3, [r7, #16]
    pageTmp[idx++] = PAGE_PROG;
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	1c5a      	adds	r2, r3, #1
 8006878:	613a      	str	r2, [r7, #16]
 800687a:	4a2b      	ldr	r2, [pc, #172]	; (8006928 <W25qxx_WritePage+0x150>)
 800687c:	2102      	movs	r1, #2
 800687e:	54d1      	strb	r1, [r2, r3]
    //if (w25qxx.ID >= W25Q256) pageTmp[idx++] = (Page_Address & 0xFF000000) >> 24;
    pageTmp[idx++] = (Page_Address & 0xFF0000) >> 16;
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	0c19      	lsrs	r1, r3, #16
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	1c5a      	adds	r2, r3, #1
 8006888:	613a      	str	r2, [r7, #16]
 800688a:	b2c9      	uxtb	r1, r1
 800688c:	4a26      	ldr	r2, [pc, #152]	; (8006928 <W25qxx_WritePage+0x150>)
 800688e:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = (Page_Address& 0xFF00) >> 8;
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	0a19      	lsrs	r1, r3, #8
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	1c5a      	adds	r2, r3, #1
 8006898:	613a      	str	r2, [r7, #16]
 800689a:	b2c9      	uxtb	r1, r1
 800689c:	4a22      	ldr	r2, [pc, #136]	; (8006928 <W25qxx_WritePage+0x150>)
 800689e:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = Page_Address & 0xFF;
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	1c5a      	adds	r2, r3, #1
 80068a4:	613a      	str	r2, [r7, #16]
 80068a6:	68ba      	ldr	r2, [r7, #8]
 80068a8:	b2d1      	uxtb	r1, r2
 80068aa:	4a1f      	ldr	r2, [pc, #124]	; (8006928 <W25qxx_WritePage+0x150>)
 80068ac:	54d1      	strb	r1, [r2, r3]
    memcpy(&pageTmp[PAGE_HDR_BYTES], pBuffer, NumByteToWrite_up_to_PageSize);//w25qxx.PageSize);
 80068ae:	683a      	ldr	r2, [r7, #0]
 80068b0:	68f9      	ldr	r1, [r7, #12]
 80068b2:	481e      	ldr	r0, [pc, #120]	; (800692c <W25qxx_WritePage+0x154>)
 80068b4:	f008 f9c4 	bl	800ec40 <memcpy>

    spiRdy = 0;
 80068b8:	4b1d      	ldr	r3, [pc, #116]	; (8006930 <W25qxx_WritePage+0x158>)
 80068ba:	2200      	movs	r2, #0
 80068bc:	701a      	strb	r2, [r3, #0]

w25_withDMA = 1;
 80068be:	4b1d      	ldr	r3, [pc, #116]	; (8006934 <W25qxx_WritePage+0x15c>)
 80068c0:	2201      	movs	r2, #1
 80068c2:	701a      	strb	r2, [r3, #0]
    W25_SELECT();
 80068c4:	f7ff fc5c 	bl	8006180 <W25_SELECT>
    if (w25_withDMA) {
 80068c8:	4b1a      	ldr	r3, [pc, #104]	; (8006934 <W25qxx_WritePage+0x15c>)
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d012      	beq.n	80068f6 <W25qxx_WritePage+0x11e>
    	HAL_SPI_Transmit_DMA(portFLASH, pageTmp, lens);
 80068d0:	4b19      	ldr	r3, [pc, #100]	; (8006938 <W25qxx_WritePage+0x160>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	8afa      	ldrh	r2, [r7, #22]
 80068d6:	4914      	ldr	r1, [pc, #80]	; (8006928 <W25qxx_WritePage+0x150>)
 80068d8:	4618      	mov	r0, r3
 80068da:	f005 f861 	bl	800b9a0 <HAL_SPI_Transmit_DMA>
    	while (!spiRdy) {
 80068de:	e002      	b.n	80068e6 <W25qxx_WritePage+0x10e>
    		W25qxx_Delay(1);
 80068e0:	2001      	movs	r0, #1
 80068e2:	f000 fa5d 	bl	8006da0 <HAL_Delay>
    	while (!spiRdy) {
 80068e6:	4b12      	ldr	r3, [pc, #72]	; (8006930 <W25qxx_WritePage+0x158>)
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d0f8      	beq.n	80068e0 <W25qxx_WritePage+0x108>
    	}
w25_withDMA = 0;
 80068ee:	4b11      	ldr	r3, [pc, #68]	; (8006934 <W25qxx_WritePage+0x15c>)
 80068f0:	2200      	movs	r2, #0
 80068f2:	701a      	strb	r2, [r3, #0]
 80068f4:	e00d      	b.n	8006912 <W25qxx_WritePage+0x13a>
    } else {
    	HAL_SPI_Transmit(portFLASH, pageTmp, lens, min_wait_ms);
 80068f6:	4b10      	ldr	r3, [pc, #64]	; (8006938 <W25qxx_WritePage+0x160>)
 80068f8:	6818      	ldr	r0, [r3, #0]
 80068fa:	23fa      	movs	r3, #250	; 0xfa
 80068fc:	8afa      	ldrh	r2, [r7, #22]
 80068fe:	490a      	ldr	r1, [pc, #40]	; (8006928 <W25qxx_WritePage+0x150>)
 8006900:	f004 fb9d 	bl	800b03e <HAL_SPI_Transmit>

    	W25_UNSELECT();
 8006904:	f7ff fc48 	bl	8006198 <W25_UNSELECT>

    	W25qxx_WaitForWriteEnd();
 8006908:	f7ff fd3a 	bl	8006380 <W25qxx_WaitForWriteEnd>

    	spiRdy = 1;
 800690c:	4b08      	ldr	r3, [pc, #32]	; (8006930 <W25qxx_WritePage+0x158>)
 800690e:	2201      	movs	r2, #1
 8006910:	701a      	strb	r2, [r3, #0]
    	Report(0, "\r\n");
    	Report(1, "%s done after %u ms\r\n", __func__, StartTime);
#endif
    }

    w25qxx.Lock = 0;
 8006912:	4b04      	ldr	r3, [pc, #16]	; (8006924 <W25qxx_WritePage+0x14c>)
 8006914:	2200      	movs	r2, #0
 8006916:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 800691a:	bf00      	nop
 800691c:	3718      	adds	r7, #24
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	20003594 	.word	0x20003594
 8006928:	200035bc 	.word	0x200035bc
 800692c:	200035c0 	.word	0x200035c0
 8006930:	200001c4 	.word	0x200001c4
 8006934:	200036c1 	.word	0x200036c1
 8006938:	2000000c 	.word	0x2000000c

0800693c <W25qxx_WriteSector>:
//------------------------------------------------------------------------------------------
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b088      	sub	sp, #32
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	607a      	str	r2, [r7, #4]
 8006948:	603b      	str	r3, [r7, #0]
    if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || !NumByteToWrite_up_to_SectorSize)
 800694a:	4b31      	ldr	r3, [pc, #196]	; (8006a10 <W25qxx_WriteSector+0xd4>)
 800694c:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006950:	683a      	ldr	r2, [r7, #0]
 8006952:	429a      	cmp	r2, r3
 8006954:	d802      	bhi.n	800695c <W25qxx_WriteSector+0x20>
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d103      	bne.n	8006964 <W25qxx_WriteSector+0x28>
                NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 800695c:	4b2c      	ldr	r3, [pc, #176]	; (8006a10 <W25qxx_WriteSector+0xd4>)
 800695e:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006962:	603b      	str	r3, [r7, #0]
    Report(1, "%s WriteSector:0x%X(%u), Offset:%u ,Write %u Bytes, begin...\r\n",
                 __func__, Sector_Address, Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
    //W25qxx_Delay(100);
#endif

    if (OffsetInByte >= w25qxx.SectorSize) {
 8006964:	4b2a      	ldr	r3, [pc, #168]	; (8006a10 <W25qxx_WriteSector+0xd4>)
 8006966:	f8d3 300f 	ldr.w	r3, [r3, #15]
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	429a      	cmp	r2, r3
 800696e:	d24b      	bcs.n	8006a08 <W25qxx_WriteSector+0xcc>
        return;
    }

    int32_t BytesToWrite;
    uint32_t LocalOffset, StartPage;
    if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	441a      	add	r2, r3
 8006976:	4b26      	ldr	r3, [pc, #152]	; (8006a10 <W25qxx_WriteSector+0xd4>)
 8006978:	f8d3 300f 	ldr.w	r3, [r3, #15]
 800697c:	429a      	cmp	r2, r3
 800697e:	d906      	bls.n	800698e <W25qxx_WriteSector+0x52>
        BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8006980:	4b23      	ldr	r3, [pc, #140]	; (8006a10 <W25qxx_WriteSector+0xd4>)
 8006982:	f8d3 200f 	ldr.w	r2, [r3, #15]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	61fb      	str	r3, [r7, #28]
 800698c:	e001      	b.n	8006992 <W25qxx_WriteSector+0x56>
    else
        BytesToWrite = NumByteToWrite_up_to_SectorSize;
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	61fb      	str	r3, [r7, #28]
    StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8006992:	68b8      	ldr	r0, [r7, #8]
 8006994:	f7ff fe46 	bl	8006624 <W25qxx_SectorToPage>
 8006998:	4602      	mov	r2, r0
 800699a:	4b1d      	ldr	r3, [pc, #116]	; (8006a10 <W25qxx_WriteSector+0xd4>)
 800699c:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	4619      	mov	r1, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80069aa:	4413      	add	r3, r2
 80069ac:	617b      	str	r3, [r7, #20]
    LocalOffset = OffsetInByte % w25qxx.PageSize;
 80069ae:	4b18      	ldr	r3, [pc, #96]	; (8006a10 <W25qxx_WriteSector+0xd4>)
 80069b0:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	461a      	mov	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80069be:	fb01 f202 	mul.w	r2, r1, r2
 80069c2:	1a9b      	subs	r3, r3, r2
 80069c4:	61bb      	str	r3, [r7, #24]

    do
    {
        W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	69ba      	ldr	r2, [r7, #24]
 80069ca:	6979      	ldr	r1, [r7, #20]
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f7ff ff03 	bl	80067d8 <W25qxx_WritePage>
        StartPage++;
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	3301      	adds	r3, #1
 80069d6:	617b      	str	r3, [r7, #20]
        BytesToWrite -= w25qxx.PageSize - LocalOffset;
 80069d8:	4b0d      	ldr	r3, [pc, #52]	; (8006a10 <W25qxx_WriteSector+0xd4>)
 80069da:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80069de:	b29b      	uxth	r3, r3
 80069e0:	461a      	mov	r2, r3
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	1a9a      	subs	r2, r3, r2
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	4413      	add	r3, r2
 80069ea:	61fb      	str	r3, [r7, #28]
        pBuffer += w25qxx.PageSize;
 80069ec:	4b08      	ldr	r3, [pc, #32]	; (8006a10 <W25qxx_WriteSector+0xd4>)
 80069ee:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	461a      	mov	r2, r3
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	4413      	add	r3, r2
 80069fa:	60fb      	str	r3, [r7, #12]
        LocalOffset = 0;
 80069fc:	2300      	movs	r3, #0
 80069fe:	61bb      	str	r3, [r7, #24]
    } while(BytesToWrite > 0);
 8006a00:	69fb      	ldr	r3, [r7, #28]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	dcdf      	bgt.n	80069c6 <W25qxx_WriteSector+0x8a>
 8006a06:	e000      	b.n	8006a0a <W25qxx_WriteSector+0xce>
        return;
 8006a08:	bf00      	nop
#ifdef W25QXX_DEBUG
    Report(1, "%s Done\r\n", __func__);
    //W25qxx_Delay(100);
#endif

}
 8006a0a:	3720      	adds	r7, #32
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	20003594 	.word	0x20003594

08006a14 <W25qxx_ReadPage>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b088      	sub	sp, #32
 8006a18:	af02      	add	r7, sp, #8
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	607a      	str	r2, [r7, #4]
 8006a20:	603b      	str	r3, [r7, #0]
    while (w25qxx.Lock) W25qxx_Delay(1);
 8006a22:	e002      	b.n	8006a2a <W25qxx_ReadPage+0x16>
 8006a24:	2001      	movs	r0, #1
 8006a26:	f000 f9bb 	bl	8006da0 <HAL_Delay>
 8006a2a:	4b51      	ldr	r3, [pc, #324]	; (8006b70 <W25qxx_ReadPage+0x15c>)
 8006a2c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d1f7      	bne.n	8006a24 <W25qxx_ReadPage+0x10>

    w25qxx.Lock = 1;
 8006a34:	4b4e      	ldr	r3, [pc, #312]	; (8006b70 <W25qxx_ReadPage+0x15c>)
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || !NumByteToRead_up_to_PageSize)
 8006a3c:	4b4c      	ldr	r3, [pc, #304]	; (8006b70 <W25qxx_ReadPage+0x15c>)
 8006a3e:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	461a      	mov	r2, r3
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d802      	bhi.n	8006a52 <W25qxx_ReadPage+0x3e>
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d104      	bne.n	8006a5c <W25qxx_ReadPage+0x48>
        NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8006a52:	4b47      	ldr	r3, [pc, #284]	; (8006b70 <W25qxx_ReadPage+0x15c>)
 8006a54:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	603b      	str	r3, [r7, #0]
    if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	4413      	add	r3, r2
 8006a62:	4a43      	ldr	r2, [pc, #268]	; (8006b70 <W25qxx_ReadPage+0x15c>)
 8006a64:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8006a68:	b292      	uxth	r2, r2
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d907      	bls.n	8006a7e <W25qxx_ReadPage+0x6a>
        NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8006a6e:	4b40      	ldr	r3, [pc, #256]	; (8006b70 <W25qxx_ReadPage+0x15c>)
 8006a70:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	461a      	mov	r2, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	603b      	str	r3, [r7, #0]
                 __func__, Page_Address, Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
    //W25qxx_Delay(100);
    uint32_t StartTime = HAL_GetTick();
#endif

    Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8006a7e:	4b3c      	ldr	r3, [pc, #240]	; (8006b70 <W25qxx_ReadPage+0x15c>)
 8006a80:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	461a      	mov	r2, r3
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	fb02 f303 	mul.w	r3, r2, r3
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	4413      	add	r3, r2
 8006a92:	60bb      	str	r3, [r7, #8]
    W25qxx_Spi(Page_Address & 0xFF);
    //W25qxx_Spi(0);
    HAL_SPI_Receive(portFLASH, pBuffer, NumByteToRead_up_to_PageSize, min_wait_ms);
    W25_UNSELECT();
    */
    memset(pageTmp, 0, sizeof(pageTmp));
 8006a94:	f240 1205 	movw	r2, #261	; 0x105
 8006a98:	2100      	movs	r1, #0
 8006a9a:	4836      	ldr	r0, [pc, #216]	; (8006b74 <W25qxx_ReadPage+0x160>)
 8006a9c:	f008 f8de 	bl	800ec5c <memset>
    uint16_t lens = NumByteToRead_up_to_PageSize + PAGE_HDR_BYTES;// + 1;
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	3304      	adds	r3, #4
 8006aa6:	82fb      	strh	r3, [r7, #22]
    int idx = 0;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	613b      	str	r3, [r7, #16]
    pageTmp[idx++] = DATA_READ;//FAST_READ;
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	1c5a      	adds	r2, r3, #1
 8006ab0:	613a      	str	r2, [r7, #16]
 8006ab2:	4a30      	ldr	r2, [pc, #192]	; (8006b74 <W25qxx_ReadPage+0x160>)
 8006ab4:	2103      	movs	r1, #3
 8006ab6:	54d1      	strb	r1, [r2, r3]
    //if (w25qxx.ID >= W25Q256) pageTmp[idx++] = (Page_Address & 0xFF000000) >> 24;
    pageTmp[idx++] = (Page_Address & 0xFF0000) >> 16;
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	0c19      	lsrs	r1, r3, #16
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	1c5a      	adds	r2, r3, #1
 8006ac0:	613a      	str	r2, [r7, #16]
 8006ac2:	b2c9      	uxtb	r1, r1
 8006ac4:	4a2b      	ldr	r2, [pc, #172]	; (8006b74 <W25qxx_ReadPage+0x160>)
 8006ac6:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = (Page_Address& 0xFF00) >> 8;
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	0a19      	lsrs	r1, r3, #8
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	1c5a      	adds	r2, r3, #1
 8006ad0:	613a      	str	r2, [r7, #16]
 8006ad2:	b2c9      	uxtb	r1, r1
 8006ad4:	4a27      	ldr	r2, [pc, #156]	; (8006b74 <W25qxx_ReadPage+0x160>)
 8006ad6:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = Page_Address & 0xFF;
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	1c5a      	adds	r2, r3, #1
 8006adc:	613a      	str	r2, [r7, #16]
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	b2d1      	uxtb	r1, r2
 8006ae2:	4a24      	ldr	r2, [pc, #144]	; (8006b74 <W25qxx_ReadPage+0x160>)
 8006ae4:	54d1      	strb	r1, [r2, r3]
    //pageTmp[idx++] = 0;
    spiRdy = 0;
 8006ae6:	4b24      	ldr	r3, [pc, #144]	; (8006b78 <W25qxx_ReadPage+0x164>)
 8006ae8:	2200      	movs	r2, #0
 8006aea:	701a      	strb	r2, [r3, #0]

w25_withDMA = 1;
 8006aec:	4b23      	ldr	r3, [pc, #140]	; (8006b7c <W25qxx_ReadPage+0x168>)
 8006aee:	2201      	movs	r2, #1
 8006af0:	701a      	strb	r2, [r3, #0]
    W25_SELECT();
 8006af2:	f7ff fb45 	bl	8006180 <W25_SELECT>
    if (w25_withDMA) {
 8006af6:	4b21      	ldr	r3, [pc, #132]	; (8006b7c <W25qxx_ReadPage+0x168>)
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d012      	beq.n	8006b24 <W25qxx_ReadPage+0x110>
    	HAL_SPI_TransmitReceive_DMA(portFLASH, pageTmp, pageTmp, lens);
 8006afe:	4b20      	ldr	r3, [pc, #128]	; (8006b80 <W25qxx_ReadPage+0x16c>)
 8006b00:	6818      	ldr	r0, [r3, #0]
 8006b02:	8afb      	ldrh	r3, [r7, #22]
 8006b04:	4a1b      	ldr	r2, [pc, #108]	; (8006b74 <W25qxx_ReadPage+0x160>)
 8006b06:	491b      	ldr	r1, [pc, #108]	; (8006b74 <W25qxx_ReadPage+0x160>)
 8006b08:	f005 f83e 	bl	800bb88 <HAL_SPI_TransmitReceive_DMA>
    	while (!spiRdy) {
 8006b0c:	e002      	b.n	8006b14 <W25qxx_ReadPage+0x100>
    		W25qxx_Delay(1);
 8006b0e:	2001      	movs	r0, #1
 8006b10:	f000 f946 	bl	8006da0 <HAL_Delay>
    	while (!spiRdy) {
 8006b14:	4b18      	ldr	r3, [pc, #96]	; (8006b78 <W25qxx_ReadPage+0x164>)
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d0f8      	beq.n	8006b0e <W25qxx_ReadPage+0xfa>
    	}
w25_withDMA = 0;
 8006b1c:	4b17      	ldr	r3, [pc, #92]	; (8006b7c <W25qxx_ReadPage+0x168>)
 8006b1e:	2200      	movs	r2, #0
 8006b20:	701a      	strb	r2, [r3, #0]
 8006b22:	e017      	b.n	8006b54 <W25qxx_ReadPage+0x140>
    } else {
    	if (HAL_SPI_TransmitReceive(portFLASH, pageTmp, pageTmp, lens, min_wait_ms) != HAL_OK) devError |= devSPI;
 8006b24:	4b16      	ldr	r3, [pc, #88]	; (8006b80 <W25qxx_ReadPage+0x16c>)
 8006b26:	6818      	ldr	r0, [r3, #0]
 8006b28:	22fa      	movs	r2, #250	; 0xfa
 8006b2a:	8afb      	ldrh	r3, [r7, #22]
 8006b2c:	9200      	str	r2, [sp, #0]
 8006b2e:	4a11      	ldr	r2, [pc, #68]	; (8006b74 <W25qxx_ReadPage+0x160>)
 8006b30:	4910      	ldr	r1, [pc, #64]	; (8006b74 <W25qxx_ReadPage+0x160>)
 8006b32:	f004 fd22 	bl	800b57a <HAL_SPI_TransmitReceive>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d006      	beq.n	8006b4a <W25qxx_ReadPage+0x136>
 8006b3c:	4b11      	ldr	r3, [pc, #68]	; (8006b84 <W25qxx_ReadPage+0x170>)
 8006b3e:	881b      	ldrh	r3, [r3, #0]
 8006b40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	4b0f      	ldr	r3, [pc, #60]	; (8006b84 <W25qxx_ReadPage+0x170>)
 8006b48:	801a      	strh	r2, [r3, #0]
    	W25_UNSELECT();
 8006b4a:	f7ff fb25 	bl	8006198 <W25_UNSELECT>

    	spiRdy = 1;
 8006b4e:	4b0a      	ldr	r3, [pc, #40]	; (8006b78 <W25qxx_ReadPage+0x164>)
 8006b50:	2201      	movs	r2, #1
 8006b52:	701a      	strb	r2, [r3, #0]
    }
	memcpy(pBuffer, &pageTmp[PAGE_HDR_BYTES], NumByteToRead_up_to_PageSize);//w25qxx.PageSize);
 8006b54:	683a      	ldr	r2, [r7, #0]
 8006b56:	490c      	ldr	r1, [pc, #48]	; (8006b88 <W25qxx_ReadPage+0x174>)
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f008 f871 	bl	800ec40 <memcpy>
    	Report(0, "\r\n");
    	Report(1, "%s done after %u ms\r\n", __func__, StartTime);
#endif


    w25qxx.Lock = 0;
 8006b5e:	4b04      	ldr	r3, [pc, #16]	; (8006b70 <W25qxx_ReadPage+0x15c>)
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8006b66:	bf00      	nop
 8006b68:	3718      	adds	r7, #24
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	20003594 	.word	0x20003594
 8006b74:	200035bc 	.word	0x200035bc
 8006b78:	200001c4 	.word	0x200001c4
 8006b7c:	200036c1 	.word	0x200036c1
 8006b80:	2000000c 	.word	0x2000000c
 8006b84:	2000193c 	.word	0x2000193c
 8006b88:	200035c0 	.word	0x200035c0

08006b8c <W25qxx_ReadSector>:
//------------------------------------------------------------------------------------------
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b088      	sub	sp, #32
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	607a      	str	r2, [r7, #4]
 8006b98:	603b      	str	r3, [r7, #0]
    if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || !NumByteToRead_up_to_SectorSize)
 8006b9a:	4b31      	ldr	r3, [pc, #196]	; (8006c60 <W25qxx_ReadSector+0xd4>)
 8006b9c:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006ba0:	683a      	ldr	r2, [r7, #0]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d802      	bhi.n	8006bac <W25qxx_ReadSector+0x20>
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d103      	bne.n	8006bb4 <W25qxx_ReadSector+0x28>
                NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8006bac:	4b2c      	ldr	r3, [pc, #176]	; (8006c60 <W25qxx_ReadSector+0xd4>)
 8006bae:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006bb2:	603b      	str	r3, [r7, #0]
    Report(1, "%s:0x%X(%u), Offset:%u ,Read %u Bytes, begin...\r\n",
                 __func__, Sector_Address, Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
    //W25qxx_Delay(100);
#endif

    if (OffsetInByte >= w25qxx.SectorSize) {
 8006bb4:	4b2a      	ldr	r3, [pc, #168]	; (8006c60 <W25qxx_ReadSector+0xd4>)
 8006bb6:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d24b      	bcs.n	8006c58 <W25qxx_ReadSector+0xcc>
        return;
    }

    int32_t BytesToRead;
    uint32_t LocalOffset, StartPage;
    if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	441a      	add	r2, r3
 8006bc6:	4b26      	ldr	r3, [pc, #152]	; (8006c60 <W25qxx_ReadSector+0xd4>)
 8006bc8:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d906      	bls.n	8006bde <W25qxx_ReadSector+0x52>
        BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8006bd0:	4b23      	ldr	r3, [pc, #140]	; (8006c60 <W25qxx_ReadSector+0xd4>)
 8006bd2:	f8d3 200f 	ldr.w	r2, [r3, #15]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	61fb      	str	r3, [r7, #28]
 8006bdc:	e001      	b.n	8006be2 <W25qxx_ReadSector+0x56>
    else
        BytesToRead = NumByteToRead_up_to_SectorSize;
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	61fb      	str	r3, [r7, #28]
    StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8006be2:	68b8      	ldr	r0, [r7, #8]
 8006be4:	f7ff fd1e 	bl	8006624 <W25qxx_SectorToPage>
 8006be8:	4602      	mov	r2, r0
 8006bea:	4b1d      	ldr	r3, [pc, #116]	; (8006c60 <W25qxx_ReadSector+0xd4>)
 8006bec:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bfa:	4413      	add	r3, r2
 8006bfc:	617b      	str	r3, [r7, #20]
    LocalOffset = OffsetInByte % w25qxx.PageSize;
 8006bfe:	4b18      	ldr	r3, [pc, #96]	; (8006c60 <W25qxx_ReadSector+0xd4>)
 8006c00:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	461a      	mov	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c0e:	fb01 f202 	mul.w	r2, r1, r2
 8006c12:	1a9b      	subs	r3, r3, r2
 8006c14:	61bb      	str	r3, [r7, #24]
    do {
        W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	69ba      	ldr	r2, [r7, #24]
 8006c1a:	6979      	ldr	r1, [r7, #20]
 8006c1c:	68f8      	ldr	r0, [r7, #12]
 8006c1e:	f7ff fef9 	bl	8006a14 <W25qxx_ReadPage>
        StartPage++;
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	3301      	adds	r3, #1
 8006c26:	617b      	str	r3, [r7, #20]
        BytesToRead -= w25qxx.PageSize - LocalOffset;
 8006c28:	4b0d      	ldr	r3, [pc, #52]	; (8006c60 <W25qxx_ReadSector+0xd4>)
 8006c2a:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	461a      	mov	r2, r3
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	1a9a      	subs	r2, r3, r2
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	4413      	add	r3, r2
 8006c3a:	61fb      	str	r3, [r7, #28]
        pBuffer += w25qxx.PageSize;
 8006c3c:	4b08      	ldr	r3, [pc, #32]	; (8006c60 <W25qxx_ReadSector+0xd4>)
 8006c3e:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	461a      	mov	r2, r3
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	4413      	add	r3, r2
 8006c4a:	60fb      	str	r3, [r7, #12]
        LocalOffset = 0;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	61bb      	str	r3, [r7, #24]
    } while(BytesToRead > 0);
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	dcdf      	bgt.n	8006c16 <W25qxx_ReadSector+0x8a>
 8006c56:	e000      	b.n	8006c5a <W25qxx_ReadSector+0xce>
        return;
 8006c58:	bf00      	nop
#ifdef W25QXX_DEBUG
    Report(1, "%s done\r\n", __func__);
    //W25qxx_Delay(100);
#endif

}
 8006c5a:	3720      	adds	r7, #32
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}
 8006c60:	20003594 	.word	0x20003594

08006c64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8006c64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006c9c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006c68:	f7ff fa78 	bl	800615c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006c6c:	480c      	ldr	r0, [pc, #48]	; (8006ca0 <LoopForever+0x6>)
  ldr r1, =_edata
 8006c6e:	490d      	ldr	r1, [pc, #52]	; (8006ca4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006c70:	4a0d      	ldr	r2, [pc, #52]	; (8006ca8 <LoopForever+0xe>)
  movs r3, #0
 8006c72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006c74:	e002      	b.n	8006c7c <LoopCopyDataInit>

08006c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006c7a:	3304      	adds	r3, #4

08006c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006c80:	d3f9      	bcc.n	8006c76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006c82:	4a0a      	ldr	r2, [pc, #40]	; (8006cac <LoopForever+0x12>)
  ldr r4, =_ebss
 8006c84:	4c0a      	ldr	r4, [pc, #40]	; (8006cb0 <LoopForever+0x16>)
  movs r3, #0
 8006c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006c88:	e001      	b.n	8006c8e <LoopFillZerobss>

08006c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006c8c:	3204      	adds	r2, #4

08006c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006c90:	d3fb      	bcc.n	8006c8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006c92:	f007 ffa1 	bl	800ebd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006c96:	f7fb f9fb 	bl	8002090 <main>

08006c9a <LoopForever>:

LoopForever:
    b LoopForever
 8006c9a:	e7fe      	b.n	8006c9a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8006c9c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8006ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006ca4:	20000410 	.word	0x20000410
  ldr r2, =_sidata
 8006ca8:	08014cfc 	.word	0x08014cfc
  ldr r2, =_sbss
 8006cac:	20000410 	.word	0x20000410
  ldr r4, =_ebss
 8006cb0:	200036d8 	.word	0x200036d8

08006cb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006cb4:	e7fe      	b.n	8006cb4 <ADC1_2_IRQHandler>

08006cb6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b082      	sub	sp, #8
 8006cba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006cc0:	2003      	movs	r0, #3
 8006cc2:	f000 f985 	bl	8006fd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006cc6:	200f      	movs	r0, #15
 8006cc8:	f000 f80e 	bl	8006ce8 <HAL_InitTick>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d002      	beq.n	8006cd8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	71fb      	strb	r3, [r7, #7]
 8006cd6:	e001      	b.n	8006cdc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006cd8:	f7fe fd4c 	bl	8005774 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006cdc:	79fb      	ldrb	r3, [r7, #7]
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3708      	adds	r7, #8
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
	...

08006ce8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8006cf4:	4b17      	ldr	r3, [pc, #92]	; (8006d54 <HAL_InitTick+0x6c>)
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d023      	beq.n	8006d44 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006cfc:	4b16      	ldr	r3, [pc, #88]	; (8006d58 <HAL_InitTick+0x70>)
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	4b14      	ldr	r3, [pc, #80]	; (8006d54 <HAL_InitTick+0x6c>)
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	4619      	mov	r1, r3
 8006d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006d0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d12:	4618      	mov	r0, r3
 8006d14:	f000 f99f 	bl	8007056 <HAL_SYSTICK_Config>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d10f      	bne.n	8006d3e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2b0f      	cmp	r3, #15
 8006d22:	d809      	bhi.n	8006d38 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006d24:	2200      	movs	r2, #0
 8006d26:	6879      	ldr	r1, [r7, #4]
 8006d28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d2c:	f000 f95b 	bl	8006fe6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006d30:	4a0a      	ldr	r2, [pc, #40]	; (8006d5c <HAL_InitTick+0x74>)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6013      	str	r3, [r2, #0]
 8006d36:	e007      	b.n	8006d48 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	73fb      	strb	r3, [r7, #15]
 8006d3c:	e004      	b.n	8006d48 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	73fb      	strb	r3, [r7, #15]
 8006d42:	e001      	b.n	8006d48 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3710      	adds	r7, #16
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	20000238 	.word	0x20000238
 8006d58:	20000204 	.word	0x20000204
 8006d5c:	20000234 	.word	0x20000234

08006d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006d60:	b480      	push	{r7}
 8006d62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006d64:	4b06      	ldr	r3, [pc, #24]	; (8006d80 <HAL_IncTick+0x20>)
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	461a      	mov	r2, r3
 8006d6a:	4b06      	ldr	r3, [pc, #24]	; (8006d84 <HAL_IncTick+0x24>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4413      	add	r3, r2
 8006d70:	4a04      	ldr	r2, [pc, #16]	; (8006d84 <HAL_IncTick+0x24>)
 8006d72:	6013      	str	r3, [r2, #0]
}
 8006d74:	bf00      	nop
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	20000238 	.word	0x20000238
 8006d84:	200036c4 	.word	0x200036c4

08006d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8006d8c:	4b03      	ldr	r3, [pc, #12]	; (8006d9c <HAL_GetTick+0x14>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	200036c4 	.word	0x200036c4

08006da0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006da8:	f7ff ffee 	bl	8006d88 <HAL_GetTick>
 8006dac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006db8:	d005      	beq.n	8006dc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8006dba:	4b0a      	ldr	r3, [pc, #40]	; (8006de4 <HAL_Delay+0x44>)
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006dc6:	bf00      	nop
 8006dc8:	f7ff ffde 	bl	8006d88 <HAL_GetTick>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d8f7      	bhi.n	8006dc8 <HAL_Delay+0x28>
  {
  }
}
 8006dd8:	bf00      	nop
 8006dda:	bf00      	nop
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	20000238 	.word	0x20000238

08006de8 <__NVIC_SetPriorityGrouping>:
{
 8006de8:	b480      	push	{r7}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f003 0307 	and.w	r3, r3, #7
 8006df6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006df8:	4b0c      	ldr	r3, [pc, #48]	; (8006e2c <__NVIC_SetPriorityGrouping+0x44>)
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006e04:	4013      	ands	r3, r2
 8006e06:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006e10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006e14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006e1a:	4a04      	ldr	r2, [pc, #16]	; (8006e2c <__NVIC_SetPriorityGrouping+0x44>)
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	60d3      	str	r3, [r2, #12]
}
 8006e20:	bf00      	nop
 8006e22:	3714      	adds	r7, #20
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr
 8006e2c:	e000ed00 	.word	0xe000ed00

08006e30 <__NVIC_GetPriorityGrouping>:
{
 8006e30:	b480      	push	{r7}
 8006e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e34:	4b04      	ldr	r3, [pc, #16]	; (8006e48 <__NVIC_GetPriorityGrouping+0x18>)
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	0a1b      	lsrs	r3, r3, #8
 8006e3a:	f003 0307 	and.w	r3, r3, #7
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr
 8006e48:	e000ed00 	.word	0xe000ed00

08006e4c <__NVIC_EnableIRQ>:
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	4603      	mov	r3, r0
 8006e54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	db0b      	blt.n	8006e76 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e5e:	79fb      	ldrb	r3, [r7, #7]
 8006e60:	f003 021f 	and.w	r2, r3, #31
 8006e64:	4907      	ldr	r1, [pc, #28]	; (8006e84 <__NVIC_EnableIRQ+0x38>)
 8006e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e6a:	095b      	lsrs	r3, r3, #5
 8006e6c:	2001      	movs	r0, #1
 8006e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8006e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006e76:	bf00      	nop
 8006e78:	370c      	adds	r7, #12
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr
 8006e82:	bf00      	nop
 8006e84:	e000e100 	.word	0xe000e100

08006e88 <__NVIC_DisableIRQ>:
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	4603      	mov	r3, r0
 8006e90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	db12      	blt.n	8006ec0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e9a:	79fb      	ldrb	r3, [r7, #7]
 8006e9c:	f003 021f 	and.w	r2, r3, #31
 8006ea0:	490a      	ldr	r1, [pc, #40]	; (8006ecc <__NVIC_DisableIRQ+0x44>)
 8006ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ea6:	095b      	lsrs	r3, r3, #5
 8006ea8:	2001      	movs	r0, #1
 8006eaa:	fa00 f202 	lsl.w	r2, r0, r2
 8006eae:	3320      	adds	r3, #32
 8006eb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006eb4:	f3bf 8f4f 	dsb	sy
}
 8006eb8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006eba:	f3bf 8f6f 	isb	sy
}
 8006ebe:	bf00      	nop
}
 8006ec0:	bf00      	nop
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr
 8006ecc:	e000e100 	.word	0xe000e100

08006ed0 <__NVIC_SetPriority>:
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	6039      	str	r1, [r7, #0]
 8006eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	db0a      	blt.n	8006efa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	b2da      	uxtb	r2, r3
 8006ee8:	490c      	ldr	r1, [pc, #48]	; (8006f1c <__NVIC_SetPriority+0x4c>)
 8006eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eee:	0112      	lsls	r2, r2, #4
 8006ef0:	b2d2      	uxtb	r2, r2
 8006ef2:	440b      	add	r3, r1
 8006ef4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006ef8:	e00a      	b.n	8006f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	b2da      	uxtb	r2, r3
 8006efe:	4908      	ldr	r1, [pc, #32]	; (8006f20 <__NVIC_SetPriority+0x50>)
 8006f00:	79fb      	ldrb	r3, [r7, #7]
 8006f02:	f003 030f 	and.w	r3, r3, #15
 8006f06:	3b04      	subs	r3, #4
 8006f08:	0112      	lsls	r2, r2, #4
 8006f0a:	b2d2      	uxtb	r2, r2
 8006f0c:	440b      	add	r3, r1
 8006f0e:	761a      	strb	r2, [r3, #24]
}
 8006f10:	bf00      	nop
 8006f12:	370c      	adds	r7, #12
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr
 8006f1c:	e000e100 	.word	0xe000e100
 8006f20:	e000ed00 	.word	0xe000ed00

08006f24 <NVIC_EncodePriority>:
{
 8006f24:	b480      	push	{r7}
 8006f26:	b089      	sub	sp, #36	; 0x24
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f003 0307 	and.w	r3, r3, #7
 8006f36:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	f1c3 0307 	rsb	r3, r3, #7
 8006f3e:	2b04      	cmp	r3, #4
 8006f40:	bf28      	it	cs
 8006f42:	2304      	movcs	r3, #4
 8006f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006f46:	69fb      	ldr	r3, [r7, #28]
 8006f48:	3304      	adds	r3, #4
 8006f4a:	2b06      	cmp	r3, #6
 8006f4c:	d902      	bls.n	8006f54 <NVIC_EncodePriority+0x30>
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	3b03      	subs	r3, #3
 8006f52:	e000      	b.n	8006f56 <NVIC_EncodePriority+0x32>
 8006f54:	2300      	movs	r3, #0
 8006f56:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f62:	43da      	mvns	r2, r3
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	401a      	ands	r2, r3
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	fa01 f303 	lsl.w	r3, r1, r3
 8006f76:	43d9      	mvns	r1, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f7c:	4313      	orrs	r3, r2
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3724      	adds	r7, #36	; 0x24
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
	...

08006f8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	3b01      	subs	r3, #1
 8006f98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f9c:	d301      	bcc.n	8006fa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e00f      	b.n	8006fc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006fa2:	4a0a      	ldr	r2, [pc, #40]	; (8006fcc <SysTick_Config+0x40>)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	3b01      	subs	r3, #1
 8006fa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006faa:	210f      	movs	r1, #15
 8006fac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fb0:	f7ff ff8e 	bl	8006ed0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006fb4:	4b05      	ldr	r3, [pc, #20]	; (8006fcc <SysTick_Config+0x40>)
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006fba:	4b04      	ldr	r3, [pc, #16]	; (8006fcc <SysTick_Config+0x40>)
 8006fbc:	2207      	movs	r2, #7
 8006fbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3708      	adds	r7, #8
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	e000e010 	.word	0xe000e010

08006fd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f7ff ff05 	bl	8006de8 <__NVIC_SetPriorityGrouping>
}
 8006fde:	bf00      	nop
 8006fe0:	3708      	adds	r7, #8
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b086      	sub	sp, #24
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	4603      	mov	r3, r0
 8006fee:	60b9      	str	r1, [r7, #8]
 8006ff0:	607a      	str	r2, [r7, #4]
 8006ff2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006ff8:	f7ff ff1a 	bl	8006e30 <__NVIC_GetPriorityGrouping>
 8006ffc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	68b9      	ldr	r1, [r7, #8]
 8007002:	6978      	ldr	r0, [r7, #20]
 8007004:	f7ff ff8e 	bl	8006f24 <NVIC_EncodePriority>
 8007008:	4602      	mov	r2, r0
 800700a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800700e:	4611      	mov	r1, r2
 8007010:	4618      	mov	r0, r3
 8007012:	f7ff ff5d 	bl	8006ed0 <__NVIC_SetPriority>
}
 8007016:	bf00      	nop
 8007018:	3718      	adds	r7, #24
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b082      	sub	sp, #8
 8007022:	af00      	add	r7, sp, #0
 8007024:	4603      	mov	r3, r0
 8007026:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800702c:	4618      	mov	r0, r3
 800702e:	f7ff ff0d 	bl	8006e4c <__NVIC_EnableIRQ>
}
 8007032:	bf00      	nop
 8007034:	3708      	adds	r7, #8
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}

0800703a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b082      	sub	sp, #8
 800703e:	af00      	add	r7, sp, #0
 8007040:	4603      	mov	r3, r0
 8007042:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007048:	4618      	mov	r0, r3
 800704a:	f7ff ff1d 	bl	8006e88 <__NVIC_DisableIRQ>
}
 800704e:	bf00      	nop
 8007050:	3708      	adds	r7, #8
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b082      	sub	sp, #8
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f7ff ff94 	bl	8006f8c <SysTick_Config>
 8007064:	4603      	mov	r3, r0
}
 8007066:	4618      	mov	r0, r3
 8007068:	3708      	adds	r7, #8
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
	...

08007070 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007070:	b480      	push	{r7}
 8007072:	b085      	sub	sp, #20
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d101      	bne.n	8007082 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e098      	b.n	80071b4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	461a      	mov	r2, r3
 8007088:	4b4d      	ldr	r3, [pc, #308]	; (80071c0 <HAL_DMA_Init+0x150>)
 800708a:	429a      	cmp	r2, r3
 800708c:	d80f      	bhi.n	80070ae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	461a      	mov	r2, r3
 8007094:	4b4b      	ldr	r3, [pc, #300]	; (80071c4 <HAL_DMA_Init+0x154>)
 8007096:	4413      	add	r3, r2
 8007098:	4a4b      	ldr	r2, [pc, #300]	; (80071c8 <HAL_DMA_Init+0x158>)
 800709a:	fba2 2303 	umull	r2, r3, r2, r3
 800709e:	091b      	lsrs	r3, r3, #4
 80070a0:	009a      	lsls	r2, r3, #2
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a48      	ldr	r2, [pc, #288]	; (80071cc <HAL_DMA_Init+0x15c>)
 80070aa:	641a      	str	r2, [r3, #64]	; 0x40
 80070ac:	e00e      	b.n	80070cc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	461a      	mov	r2, r3
 80070b4:	4b46      	ldr	r3, [pc, #280]	; (80071d0 <HAL_DMA_Init+0x160>)
 80070b6:	4413      	add	r3, r2
 80070b8:	4a43      	ldr	r2, [pc, #268]	; (80071c8 <HAL_DMA_Init+0x158>)
 80070ba:	fba2 2303 	umull	r2, r3, r2, r3
 80070be:	091b      	lsrs	r3, r3, #4
 80070c0:	009a      	lsls	r2, r3, #2
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a42      	ldr	r2, [pc, #264]	; (80071d4 <HAL_DMA_Init+0x164>)
 80070ca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2202      	movs	r2, #2
 80070d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80070e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80070f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007108:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	4313      	orrs	r3, r2
 8007114:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007126:	d039      	beq.n	800719c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712c:	4a27      	ldr	r2, [pc, #156]	; (80071cc <HAL_DMA_Init+0x15c>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d11a      	bne.n	8007168 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007132:	4b29      	ldr	r3, [pc, #164]	; (80071d8 <HAL_DMA_Init+0x168>)
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800713a:	f003 031c 	and.w	r3, r3, #28
 800713e:	210f      	movs	r1, #15
 8007140:	fa01 f303 	lsl.w	r3, r1, r3
 8007144:	43db      	mvns	r3, r3
 8007146:	4924      	ldr	r1, [pc, #144]	; (80071d8 <HAL_DMA_Init+0x168>)
 8007148:	4013      	ands	r3, r2
 800714a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800714c:	4b22      	ldr	r3, [pc, #136]	; (80071d8 <HAL_DMA_Init+0x168>)
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6859      	ldr	r1, [r3, #4]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007158:	f003 031c 	and.w	r3, r3, #28
 800715c:	fa01 f303 	lsl.w	r3, r1, r3
 8007160:	491d      	ldr	r1, [pc, #116]	; (80071d8 <HAL_DMA_Init+0x168>)
 8007162:	4313      	orrs	r3, r2
 8007164:	600b      	str	r3, [r1, #0]
 8007166:	e019      	b.n	800719c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007168:	4b1c      	ldr	r3, [pc, #112]	; (80071dc <HAL_DMA_Init+0x16c>)
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007170:	f003 031c 	and.w	r3, r3, #28
 8007174:	210f      	movs	r1, #15
 8007176:	fa01 f303 	lsl.w	r3, r1, r3
 800717a:	43db      	mvns	r3, r3
 800717c:	4917      	ldr	r1, [pc, #92]	; (80071dc <HAL_DMA_Init+0x16c>)
 800717e:	4013      	ands	r3, r2
 8007180:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8007182:	4b16      	ldr	r3, [pc, #88]	; (80071dc <HAL_DMA_Init+0x16c>)
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6859      	ldr	r1, [r3, #4]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800718e:	f003 031c 	and.w	r3, r3, #28
 8007192:	fa01 f303 	lsl.w	r3, r1, r3
 8007196:	4911      	ldr	r1, [pc, #68]	; (80071dc <HAL_DMA_Init+0x16c>)
 8007198:	4313      	orrs	r3, r2
 800719a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2201      	movs	r2, #1
 80071a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3714      	adds	r7, #20
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr
 80071c0:	40020407 	.word	0x40020407
 80071c4:	bffdfff8 	.word	0xbffdfff8
 80071c8:	cccccccd 	.word	0xcccccccd
 80071cc:	40020000 	.word	0x40020000
 80071d0:	bffdfbf8 	.word	0xbffdfbf8
 80071d4:	40020400 	.word	0x40020400
 80071d8:	400200a8 	.word	0x400200a8
 80071dc:	400204a8 	.word	0x400204a8

080071e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b086      	sub	sp, #24
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
 80071ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071ee:	2300      	movs	r3, #0
 80071f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d101      	bne.n	8007200 <HAL_DMA_Start_IT+0x20>
 80071fc:	2302      	movs	r3, #2
 80071fe:	e04b      	b.n	8007298 <HAL_DMA_Start_IT+0xb8>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800720e:	b2db      	uxtb	r3, r3
 8007210:	2b01      	cmp	r3, #1
 8007212:	d13a      	bne.n	800728a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2202      	movs	r2, #2
 8007218:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2200      	movs	r2, #0
 8007220:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f022 0201 	bic.w	r2, r2, #1
 8007230:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	68b9      	ldr	r1, [r7, #8]
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f000 f96d 	bl	8007518 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007242:	2b00      	cmp	r3, #0
 8007244:	d008      	beq.n	8007258 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f042 020e 	orr.w	r2, r2, #14
 8007254:	601a      	str	r2, [r3, #0]
 8007256:	e00f      	b.n	8007278 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f022 0204 	bic.w	r2, r2, #4
 8007266:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f042 020a 	orr.w	r2, r2, #10
 8007276:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f042 0201 	orr.w	r2, r2, #1
 8007286:	601a      	str	r2, [r3, #0]
 8007288:	e005      	b.n	8007296 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007292:	2302      	movs	r3, #2
 8007294:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007296:	7dfb      	ldrb	r3, [r7, #23]
}
 8007298:	4618      	mov	r0, r3
 800729a:	3718      	adds	r7, #24
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072a8:	2300      	movs	r3, #0
 80072aa:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d008      	beq.n	80072ca <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2204      	movs	r2, #4
 80072bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e022      	b.n	8007310 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f022 020e 	bic.w	r2, r2, #14
 80072d8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f022 0201 	bic.w	r2, r2, #1
 80072e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ee:	f003 021c 	and.w	r2, r3, #28
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f6:	2101      	movs	r1, #1
 80072f8:	fa01 f202 	lsl.w	r2, r1, r2
 80072fc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2201      	movs	r2, #1
 8007302:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800730e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8007310:	4618      	mov	r0, r3
 8007312:	3714      	adds	r7, #20
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007324:	2300      	movs	r3, #0
 8007326:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800732e:	b2db      	uxtb	r3, r3
 8007330:	2b02      	cmp	r3, #2
 8007332:	d005      	beq.n	8007340 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2204      	movs	r2, #4
 8007338:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	73fb      	strb	r3, [r7, #15]
 800733e:	e029      	b.n	8007394 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f022 020e 	bic.w	r2, r2, #14
 800734e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f022 0201 	bic.w	r2, r2, #1
 800735e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007364:	f003 021c 	and.w	r2, r3, #28
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736c:	2101      	movs	r1, #1
 800736e:	fa01 f202 	lsl.w	r2, r1, r2
 8007372:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007388:	2b00      	cmp	r3, #0
 800738a:	d003      	beq.n	8007394 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	4798      	blx	r3
    }
  }
  return status;
 8007394:	7bfb      	ldrb	r3, [r7, #15]
}
 8007396:	4618      	mov	r0, r3
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800739e:	b580      	push	{r7, lr}
 80073a0:	b084      	sub	sp, #16
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ba:	f003 031c 	and.w	r3, r3, #28
 80073be:	2204      	movs	r2, #4
 80073c0:	409a      	lsls	r2, r3
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	4013      	ands	r3, r2
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d026      	beq.n	8007418 <HAL_DMA_IRQHandler+0x7a>
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	f003 0304 	and.w	r3, r3, #4
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d021      	beq.n	8007418 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f003 0320 	and.w	r3, r3, #32
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d107      	bne.n	80073f2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f022 0204 	bic.w	r2, r2, #4
 80073f0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073f6:	f003 021c 	and.w	r2, r3, #28
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fe:	2104      	movs	r1, #4
 8007400:	fa01 f202 	lsl.w	r2, r1, r2
 8007404:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800740a:	2b00      	cmp	r3, #0
 800740c:	d071      	beq.n	80074f2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8007416:	e06c      	b.n	80074f2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800741c:	f003 031c 	and.w	r3, r3, #28
 8007420:	2202      	movs	r2, #2
 8007422:	409a      	lsls	r2, r3
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	4013      	ands	r3, r2
 8007428:	2b00      	cmp	r3, #0
 800742a:	d02e      	beq.n	800748a <HAL_DMA_IRQHandler+0xec>
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	f003 0302 	and.w	r3, r3, #2
 8007432:	2b00      	cmp	r3, #0
 8007434:	d029      	beq.n	800748a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 0320 	and.w	r3, r3, #32
 8007440:	2b00      	cmp	r3, #0
 8007442:	d10b      	bne.n	800745c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f022 020a 	bic.w	r2, r2, #10
 8007452:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007460:	f003 021c 	and.w	r2, r3, #28
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007468:	2102      	movs	r1, #2
 800746a:	fa01 f202 	lsl.w	r2, r1, r2
 800746e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747c:	2b00      	cmp	r3, #0
 800747e:	d038      	beq.n	80074f2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8007488:	e033      	b.n	80074f2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800748e:	f003 031c 	and.w	r3, r3, #28
 8007492:	2208      	movs	r2, #8
 8007494:	409a      	lsls	r2, r3
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	4013      	ands	r3, r2
 800749a:	2b00      	cmp	r3, #0
 800749c:	d02a      	beq.n	80074f4 <HAL_DMA_IRQHandler+0x156>
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	f003 0308 	and.w	r3, r3, #8
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d025      	beq.n	80074f4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f022 020e 	bic.w	r2, r2, #14
 80074b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074bc:	f003 021c 	and.w	r2, r3, #28
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c4:	2101      	movs	r1, #1
 80074c6:	fa01 f202 	lsl.w	r2, r1, r2
 80074ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d004      	beq.n	80074f4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80074f2:	bf00      	nop
 80074f4:	bf00      	nop
}
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800750a:	b2db      	uxtb	r3, r3
}
 800750c:	4618      	mov	r0, r3
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007518:	b480      	push	{r7}
 800751a:	b085      	sub	sp, #20
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	607a      	str	r2, [r7, #4]
 8007524:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800752a:	f003 021c 	and.w	r2, r3, #28
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007532:	2101      	movs	r1, #1
 8007534:	fa01 f202 	lsl.w	r2, r1, r2
 8007538:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	683a      	ldr	r2, [r7, #0]
 8007540:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	2b10      	cmp	r3, #16
 8007548:	d108      	bne.n	800755c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68ba      	ldr	r2, [r7, #8]
 8007558:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800755a:	e007      	b.n	800756c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	68ba      	ldr	r2, [r7, #8]
 8007562:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	60da      	str	r2, [r3, #12]
}
 800756c:	bf00      	nop
 800756e:	3714      	adds	r7, #20
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007578:	b480      	push	{r7}
 800757a:	b087      	sub	sp, #28
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007582:	2300      	movs	r3, #0
 8007584:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007586:	e17f      	b.n	8007888 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	2101      	movs	r1, #1
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	fa01 f303 	lsl.w	r3, r1, r3
 8007594:	4013      	ands	r3, r2
 8007596:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2b00      	cmp	r3, #0
 800759c:	f000 8171 	beq.w	8007882 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	f003 0303 	and.w	r3, r3, #3
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d005      	beq.n	80075b8 <HAL_GPIO_Init+0x40>
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	f003 0303 	and.w	r3, r3, #3
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d130      	bne.n	800761a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	005b      	lsls	r3, r3, #1
 80075c2:	2203      	movs	r2, #3
 80075c4:	fa02 f303 	lsl.w	r3, r2, r3
 80075c8:	43db      	mvns	r3, r3
 80075ca:	693a      	ldr	r2, [r7, #16]
 80075cc:	4013      	ands	r3, r2
 80075ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	68da      	ldr	r2, [r3, #12]
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	005b      	lsls	r3, r3, #1
 80075d8:	fa02 f303 	lsl.w	r3, r2, r3
 80075dc:	693a      	ldr	r2, [r7, #16]
 80075de:	4313      	orrs	r3, r2
 80075e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	693a      	ldr	r2, [r7, #16]
 80075e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80075ee:	2201      	movs	r2, #1
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	fa02 f303 	lsl.w	r3, r2, r3
 80075f6:	43db      	mvns	r3, r3
 80075f8:	693a      	ldr	r2, [r7, #16]
 80075fa:	4013      	ands	r3, r2
 80075fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	091b      	lsrs	r3, r3, #4
 8007604:	f003 0201 	and.w	r2, r3, #1
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	fa02 f303 	lsl.w	r3, r2, r3
 800760e:	693a      	ldr	r2, [r7, #16]
 8007610:	4313      	orrs	r3, r2
 8007612:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	693a      	ldr	r2, [r7, #16]
 8007618:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	f003 0303 	and.w	r3, r3, #3
 8007622:	2b03      	cmp	r3, #3
 8007624:	d118      	bne.n	8007658 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800762c:	2201      	movs	r2, #1
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	fa02 f303 	lsl.w	r3, r2, r3
 8007634:	43db      	mvns	r3, r3
 8007636:	693a      	ldr	r2, [r7, #16]
 8007638:	4013      	ands	r3, r2
 800763a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	08db      	lsrs	r3, r3, #3
 8007642:	f003 0201 	and.w	r2, r3, #1
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	fa02 f303 	lsl.w	r3, r2, r3
 800764c:	693a      	ldr	r2, [r7, #16]
 800764e:	4313      	orrs	r3, r2
 8007650:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	693a      	ldr	r2, [r7, #16]
 8007656:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	f003 0303 	and.w	r3, r3, #3
 8007660:	2b03      	cmp	r3, #3
 8007662:	d017      	beq.n	8007694 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	005b      	lsls	r3, r3, #1
 800766e:	2203      	movs	r2, #3
 8007670:	fa02 f303 	lsl.w	r3, r2, r3
 8007674:	43db      	mvns	r3, r3
 8007676:	693a      	ldr	r2, [r7, #16]
 8007678:	4013      	ands	r3, r2
 800767a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	689a      	ldr	r2, [r3, #8]
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	005b      	lsls	r3, r3, #1
 8007684:	fa02 f303 	lsl.w	r3, r2, r3
 8007688:	693a      	ldr	r2, [r7, #16]
 800768a:	4313      	orrs	r3, r2
 800768c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	693a      	ldr	r2, [r7, #16]
 8007692:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	f003 0303 	and.w	r3, r3, #3
 800769c:	2b02      	cmp	r3, #2
 800769e:	d123      	bne.n	80076e8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	08da      	lsrs	r2, r3, #3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	3208      	adds	r2, #8
 80076a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	f003 0307 	and.w	r3, r3, #7
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	220f      	movs	r2, #15
 80076b8:	fa02 f303 	lsl.w	r3, r2, r3
 80076bc:	43db      	mvns	r3, r3
 80076be:	693a      	ldr	r2, [r7, #16]
 80076c0:	4013      	ands	r3, r2
 80076c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	691a      	ldr	r2, [r3, #16]
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	f003 0307 	and.w	r3, r3, #7
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	fa02 f303 	lsl.w	r3, r2, r3
 80076d4:	693a      	ldr	r2, [r7, #16]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	08da      	lsrs	r2, r3, #3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	3208      	adds	r2, #8
 80076e2:	6939      	ldr	r1, [r7, #16]
 80076e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	005b      	lsls	r3, r3, #1
 80076f2:	2203      	movs	r2, #3
 80076f4:	fa02 f303 	lsl.w	r3, r2, r3
 80076f8:	43db      	mvns	r3, r3
 80076fa:	693a      	ldr	r2, [r7, #16]
 80076fc:	4013      	ands	r3, r2
 80076fe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	f003 0203 	and.w	r2, r3, #3
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	005b      	lsls	r3, r3, #1
 800770c:	fa02 f303 	lsl.w	r3, r2, r3
 8007710:	693a      	ldr	r2, [r7, #16]
 8007712:	4313      	orrs	r3, r2
 8007714:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	693a      	ldr	r2, [r7, #16]
 800771a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007724:	2b00      	cmp	r3, #0
 8007726:	f000 80ac 	beq.w	8007882 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800772a:	4b5f      	ldr	r3, [pc, #380]	; (80078a8 <HAL_GPIO_Init+0x330>)
 800772c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800772e:	4a5e      	ldr	r2, [pc, #376]	; (80078a8 <HAL_GPIO_Init+0x330>)
 8007730:	f043 0301 	orr.w	r3, r3, #1
 8007734:	6613      	str	r3, [r2, #96]	; 0x60
 8007736:	4b5c      	ldr	r3, [pc, #368]	; (80078a8 <HAL_GPIO_Init+0x330>)
 8007738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800773a:	f003 0301 	and.w	r3, r3, #1
 800773e:	60bb      	str	r3, [r7, #8]
 8007740:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007742:	4a5a      	ldr	r2, [pc, #360]	; (80078ac <HAL_GPIO_Init+0x334>)
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	089b      	lsrs	r3, r3, #2
 8007748:	3302      	adds	r3, #2
 800774a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800774e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	f003 0303 	and.w	r3, r3, #3
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	220f      	movs	r2, #15
 800775a:	fa02 f303 	lsl.w	r3, r2, r3
 800775e:	43db      	mvns	r3, r3
 8007760:	693a      	ldr	r2, [r7, #16]
 8007762:	4013      	ands	r3, r2
 8007764:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800776c:	d025      	beq.n	80077ba <HAL_GPIO_Init+0x242>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a4f      	ldr	r2, [pc, #316]	; (80078b0 <HAL_GPIO_Init+0x338>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d01f      	beq.n	80077b6 <HAL_GPIO_Init+0x23e>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4a4e      	ldr	r2, [pc, #312]	; (80078b4 <HAL_GPIO_Init+0x33c>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d019      	beq.n	80077b2 <HAL_GPIO_Init+0x23a>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4a4d      	ldr	r2, [pc, #308]	; (80078b8 <HAL_GPIO_Init+0x340>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d013      	beq.n	80077ae <HAL_GPIO_Init+0x236>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4a4c      	ldr	r2, [pc, #304]	; (80078bc <HAL_GPIO_Init+0x344>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d00d      	beq.n	80077aa <HAL_GPIO_Init+0x232>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4a4b      	ldr	r2, [pc, #300]	; (80078c0 <HAL_GPIO_Init+0x348>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d007      	beq.n	80077a6 <HAL_GPIO_Init+0x22e>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4a4a      	ldr	r2, [pc, #296]	; (80078c4 <HAL_GPIO_Init+0x34c>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d101      	bne.n	80077a2 <HAL_GPIO_Init+0x22a>
 800779e:	2306      	movs	r3, #6
 80077a0:	e00c      	b.n	80077bc <HAL_GPIO_Init+0x244>
 80077a2:	2307      	movs	r3, #7
 80077a4:	e00a      	b.n	80077bc <HAL_GPIO_Init+0x244>
 80077a6:	2305      	movs	r3, #5
 80077a8:	e008      	b.n	80077bc <HAL_GPIO_Init+0x244>
 80077aa:	2304      	movs	r3, #4
 80077ac:	e006      	b.n	80077bc <HAL_GPIO_Init+0x244>
 80077ae:	2303      	movs	r3, #3
 80077b0:	e004      	b.n	80077bc <HAL_GPIO_Init+0x244>
 80077b2:	2302      	movs	r3, #2
 80077b4:	e002      	b.n	80077bc <HAL_GPIO_Init+0x244>
 80077b6:	2301      	movs	r3, #1
 80077b8:	e000      	b.n	80077bc <HAL_GPIO_Init+0x244>
 80077ba:	2300      	movs	r3, #0
 80077bc:	697a      	ldr	r2, [r7, #20]
 80077be:	f002 0203 	and.w	r2, r2, #3
 80077c2:	0092      	lsls	r2, r2, #2
 80077c4:	4093      	lsls	r3, r2
 80077c6:	693a      	ldr	r2, [r7, #16]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80077cc:	4937      	ldr	r1, [pc, #220]	; (80078ac <HAL_GPIO_Init+0x334>)
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	089b      	lsrs	r3, r3, #2
 80077d2:	3302      	adds	r3, #2
 80077d4:	693a      	ldr	r2, [r7, #16]
 80077d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80077da:	4b3b      	ldr	r3, [pc, #236]	; (80078c8 <HAL_GPIO_Init+0x350>)
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	43db      	mvns	r3, r3
 80077e4:	693a      	ldr	r2, [r7, #16]
 80077e6:	4013      	ands	r3, r2
 80077e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d003      	beq.n	80077fe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80077f6:	693a      	ldr	r2, [r7, #16]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80077fe:	4a32      	ldr	r2, [pc, #200]	; (80078c8 <HAL_GPIO_Init+0x350>)
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007804:	4b30      	ldr	r3, [pc, #192]	; (80078c8 <HAL_GPIO_Init+0x350>)
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	43db      	mvns	r3, r3
 800780e:	693a      	ldr	r2, [r7, #16]
 8007810:	4013      	ands	r3, r2
 8007812:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800781c:	2b00      	cmp	r3, #0
 800781e:	d003      	beq.n	8007828 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8007820:	693a      	ldr	r2, [r7, #16]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	4313      	orrs	r3, r2
 8007826:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007828:	4a27      	ldr	r2, [pc, #156]	; (80078c8 <HAL_GPIO_Init+0x350>)
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800782e:	4b26      	ldr	r3, [pc, #152]	; (80078c8 <HAL_GPIO_Init+0x350>)
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	43db      	mvns	r3, r3
 8007838:	693a      	ldr	r2, [r7, #16]
 800783a:	4013      	ands	r3, r2
 800783c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007846:	2b00      	cmp	r3, #0
 8007848:	d003      	beq.n	8007852 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800784a:	693a      	ldr	r2, [r7, #16]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	4313      	orrs	r3, r2
 8007850:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007852:	4a1d      	ldr	r2, [pc, #116]	; (80078c8 <HAL_GPIO_Init+0x350>)
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8007858:	4b1b      	ldr	r3, [pc, #108]	; (80078c8 <HAL_GPIO_Init+0x350>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	43db      	mvns	r3, r3
 8007862:	693a      	ldr	r2, [r7, #16]
 8007864:	4013      	ands	r3, r2
 8007866:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007870:	2b00      	cmp	r3, #0
 8007872:	d003      	beq.n	800787c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8007874:	693a      	ldr	r2, [r7, #16]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	4313      	orrs	r3, r2
 800787a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800787c:	4a12      	ldr	r2, [pc, #72]	; (80078c8 <HAL_GPIO_Init+0x350>)
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	3301      	adds	r3, #1
 8007886:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	fa22 f303 	lsr.w	r3, r2, r3
 8007892:	2b00      	cmp	r3, #0
 8007894:	f47f ae78 	bne.w	8007588 <HAL_GPIO_Init+0x10>
  }
}
 8007898:	bf00      	nop
 800789a:	bf00      	nop
 800789c:	371c      	adds	r7, #28
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop
 80078a8:	40021000 	.word	0x40021000
 80078ac:	40010000 	.word	0x40010000
 80078b0:	48000400 	.word	0x48000400
 80078b4:	48000800 	.word	0x48000800
 80078b8:	48000c00 	.word	0x48000c00
 80078bc:	48001000 	.word	0x48001000
 80078c0:	48001400 	.word	0x48001400
 80078c4:	48001800 	.word	0x48001800
 80078c8:	40010400 	.word	0x40010400

080078cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	460b      	mov	r3, r1
 80078d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	691a      	ldr	r2, [r3, #16]
 80078dc:	887b      	ldrh	r3, [r7, #2]
 80078de:	4013      	ands	r3, r2
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d002      	beq.n	80078ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80078e4:	2301      	movs	r3, #1
 80078e6:	73fb      	strb	r3, [r7, #15]
 80078e8:	e001      	b.n	80078ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80078ea:	2300      	movs	r3, #0
 80078ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80078ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3714      	adds	r7, #20
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	460b      	mov	r3, r1
 8007906:	807b      	strh	r3, [r7, #2]
 8007908:	4613      	mov	r3, r2
 800790a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800790c:	787b      	ldrb	r3, [r7, #1]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d003      	beq.n	800791a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007912:	887a      	ldrh	r2, [r7, #2]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007918:	e002      	b.n	8007920 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800791a:	887a      	ldrh	r2, [r7, #2]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007920:	bf00      	nop
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800792c:	b480      	push	{r7}
 800792e:	b085      	sub	sp, #20
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	460b      	mov	r3, r1
 8007936:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	695b      	ldr	r3, [r3, #20]
 800793c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800793e:	887a      	ldrh	r2, [r7, #2]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	4013      	ands	r3, r2
 8007944:	041a      	lsls	r2, r3, #16
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	43d9      	mvns	r1, r3
 800794a:	887b      	ldrh	r3, [r7, #2]
 800794c:	400b      	ands	r3, r1
 800794e:	431a      	orrs	r2, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	619a      	str	r2, [r3, #24]
}
 8007954:	bf00      	nop
 8007956:	3714      	adds	r7, #20
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	4603      	mov	r3, r0
 8007968:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800796a:	4b08      	ldr	r3, [pc, #32]	; (800798c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800796c:	695a      	ldr	r2, [r3, #20]
 800796e:	88fb      	ldrh	r3, [r7, #6]
 8007970:	4013      	ands	r3, r2
 8007972:	2b00      	cmp	r3, #0
 8007974:	d006      	beq.n	8007984 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007976:	4a05      	ldr	r2, [pc, #20]	; (800798c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007978:	88fb      	ldrh	r3, [r7, #6]
 800797a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800797c:	88fb      	ldrh	r3, [r7, #6]
 800797e:	4618      	mov	r0, r3
 8007980:	f7fd fa66 	bl	8004e50 <HAL_GPIO_EXTI_Callback>
  }
}
 8007984:	bf00      	nop
 8007986:	3708      	adds	r7, #8
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	40010400 	.word	0x40010400

08007990 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d101      	bne.n	80079a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	e081      	b.n	8007aa6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d106      	bne.n	80079bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f7fd ff00 	bl	80057bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2224      	movs	r2, #36	; 0x24
 80079c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f022 0201 	bic.w	r2, r2, #1
 80079d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	685a      	ldr	r2, [r3, #4]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80079e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	689a      	ldr	r2, [r3, #8]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80079f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d107      	bne.n	8007a0a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	689a      	ldr	r2, [r3, #8]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007a06:	609a      	str	r2, [r3, #8]
 8007a08:	e006      	b.n	8007a18 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	689a      	ldr	r2, [r3, #8]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007a16:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	68db      	ldr	r3, [r3, #12]
 8007a1c:	2b02      	cmp	r3, #2
 8007a1e:	d104      	bne.n	8007a2a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a28:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	6812      	ldr	r2, [r2, #0]
 8007a34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007a38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a3c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68da      	ldr	r2, [r3, #12]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007a4c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	691a      	ldr	r2, [r3, #16]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	695b      	ldr	r3, [r3, #20]
 8007a56:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	699b      	ldr	r3, [r3, #24]
 8007a5e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	430a      	orrs	r2, r1
 8007a66:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	69d9      	ldr	r1, [r3, #28]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6a1a      	ldr	r2, [r3, #32]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	430a      	orrs	r2, r1
 8007a76:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f042 0201 	orr.w	r2, r2, #1
 8007a86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2220      	movs	r2, #32
 8007a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007aa4:	2300      	movs	r3, #0
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3708      	adds	r7, #8
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
	...

08007ab0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b088      	sub	sp, #32
 8007ab4:	af02      	add	r7, sp, #8
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	607a      	str	r2, [r7, #4]
 8007aba:	461a      	mov	r2, r3
 8007abc:	460b      	mov	r3, r1
 8007abe:	817b      	strh	r3, [r7, #10]
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	2b20      	cmp	r3, #32
 8007ace:	f040 80da 	bne.w	8007c86 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d101      	bne.n	8007ae0 <HAL_I2C_Master_Transmit+0x30>
 8007adc:	2302      	movs	r3, #2
 8007ade:	e0d3      	b.n	8007c88 <HAL_I2C_Master_Transmit+0x1d8>
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007ae8:	f7ff f94e 	bl	8006d88 <HAL_GetTick>
 8007aec:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	9300      	str	r3, [sp, #0]
 8007af2:	2319      	movs	r3, #25
 8007af4:	2201      	movs	r2, #1
 8007af6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	f001 f8d1 	bl	8008ca2 <I2C_WaitOnFlagUntilTimeout>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d001      	beq.n	8007b0a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e0be      	b.n	8007c88 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2221      	movs	r2, #33	; 0x21
 8007b0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2210      	movs	r2, #16
 8007b16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	893a      	ldrh	r2, [r7, #8]
 8007b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	2bff      	cmp	r3, #255	; 0xff
 8007b3a:	d90e      	bls.n	8007b5a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	22ff      	movs	r2, #255	; 0xff
 8007b40:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b46:	b2da      	uxtb	r2, r3
 8007b48:	8979      	ldrh	r1, [r7, #10]
 8007b4a:	4b51      	ldr	r3, [pc, #324]	; (8007c90 <HAL_I2C_Master_Transmit+0x1e0>)
 8007b4c:	9300      	str	r3, [sp, #0]
 8007b4e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	f001 fa4e 	bl	8008ff4 <I2C_TransferConfig>
 8007b58:	e06c      	b.n	8007c34 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b68:	b2da      	uxtb	r2, r3
 8007b6a:	8979      	ldrh	r1, [r7, #10]
 8007b6c:	4b48      	ldr	r3, [pc, #288]	; (8007c90 <HAL_I2C_Master_Transmit+0x1e0>)
 8007b6e:	9300      	str	r3, [sp, #0]
 8007b70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f001 fa3d 	bl	8008ff4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007b7a:	e05b      	b.n	8007c34 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b7c:	697a      	ldr	r2, [r7, #20]
 8007b7e:	6a39      	ldr	r1, [r7, #32]
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	f001 f8ce 	bl	8008d22 <I2C_WaitOnTXISFlagUntilTimeout>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d001      	beq.n	8007b90 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e07b      	b.n	8007c88 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b94:	781a      	ldrb	r2, [r3, #0]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba0:	1c5a      	adds	r2, r3, #1
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	3b01      	subs	r3, #1
 8007bae:	b29a      	uxth	r2, r3
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	b29a      	uxth	r2, r3
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d034      	beq.n	8007c34 <HAL_I2C_Master_Transmit+0x184>
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d130      	bne.n	8007c34 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	9300      	str	r3, [sp, #0]
 8007bd6:	6a3b      	ldr	r3, [r7, #32]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	2180      	movs	r1, #128	; 0x80
 8007bdc:	68f8      	ldr	r0, [r7, #12]
 8007bde:	f001 f860 	bl	8008ca2 <I2C_WaitOnFlagUntilTimeout>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d001      	beq.n	8007bec <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	e04d      	b.n	8007c88 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	2bff      	cmp	r3, #255	; 0xff
 8007bf4:	d90e      	bls.n	8007c14 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	22ff      	movs	r2, #255	; 0xff
 8007bfa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c00:	b2da      	uxtb	r2, r3
 8007c02:	8979      	ldrh	r1, [r7, #10]
 8007c04:	2300      	movs	r3, #0
 8007c06:	9300      	str	r3, [sp, #0]
 8007c08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f001 f9f1 	bl	8008ff4 <I2C_TransferConfig>
 8007c12:	e00f      	b.n	8007c34 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c18:	b29a      	uxth	r2, r3
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c22:	b2da      	uxtb	r2, r3
 8007c24:	8979      	ldrh	r1, [r7, #10]
 8007c26:	2300      	movs	r3, #0
 8007c28:	9300      	str	r3, [sp, #0]
 8007c2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c2e:	68f8      	ldr	r0, [r7, #12]
 8007c30:	f001 f9e0 	bl	8008ff4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d19e      	bne.n	8007b7c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c3e:	697a      	ldr	r2, [r7, #20]
 8007c40:	6a39      	ldr	r1, [r7, #32]
 8007c42:	68f8      	ldr	r0, [r7, #12]
 8007c44:	f001 f8ad 	bl	8008da2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d001      	beq.n	8007c52 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e01a      	b.n	8007c88 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	2220      	movs	r2, #32
 8007c58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	6859      	ldr	r1, [r3, #4]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	4b0b      	ldr	r3, [pc, #44]	; (8007c94 <HAL_I2C_Master_Transmit+0x1e4>)
 8007c66:	400b      	ands	r3, r1
 8007c68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2220      	movs	r2, #32
 8007c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007c82:	2300      	movs	r3, #0
 8007c84:	e000      	b.n	8007c88 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007c86:	2302      	movs	r3, #2
  }
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3718      	adds	r7, #24
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	80002000 	.word	0x80002000
 8007c94:	fe00e800 	.word	0xfe00e800

08007c98 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b088      	sub	sp, #32
 8007c9c:	af02      	add	r7, sp, #8
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	4608      	mov	r0, r1
 8007ca2:	4611      	mov	r1, r2
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	817b      	strh	r3, [r7, #10]
 8007caa:	460b      	mov	r3, r1
 8007cac:	813b      	strh	r3, [r7, #8]
 8007cae:	4613      	mov	r3, r2
 8007cb0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	2b20      	cmp	r3, #32
 8007cbc:	f040 80f9 	bne.w	8007eb2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cc0:	6a3b      	ldr	r3, [r7, #32]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d002      	beq.n	8007ccc <HAL_I2C_Mem_Write+0x34>
 8007cc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d105      	bne.n	8007cd8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cd2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e0ed      	b.n	8007eb4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d101      	bne.n	8007ce6 <HAL_I2C_Mem_Write+0x4e>
 8007ce2:	2302      	movs	r3, #2
 8007ce4:	e0e6      	b.n	8007eb4 <HAL_I2C_Mem_Write+0x21c>
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007cee:	f7ff f84b 	bl	8006d88 <HAL_GetTick>
 8007cf2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	9300      	str	r3, [sp, #0]
 8007cf8:	2319      	movs	r3, #25
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007d00:	68f8      	ldr	r0, [r7, #12]
 8007d02:	f000 ffce 	bl	8008ca2 <I2C_WaitOnFlagUntilTimeout>
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d001      	beq.n	8007d10 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e0d1      	b.n	8007eb4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2221      	movs	r2, #33	; 0x21
 8007d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2240      	movs	r2, #64	; 0x40
 8007d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2200      	movs	r2, #0
 8007d24:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	6a3a      	ldr	r2, [r7, #32]
 8007d2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007d30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2200      	movs	r2, #0
 8007d36:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007d38:	88f8      	ldrh	r0, [r7, #6]
 8007d3a:	893a      	ldrh	r2, [r7, #8]
 8007d3c:	8979      	ldrh	r1, [r7, #10]
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	9301      	str	r3, [sp, #4]
 8007d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d44:	9300      	str	r3, [sp, #0]
 8007d46:	4603      	mov	r3, r0
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f000 fb87 	bl	800845c <I2C_RequestMemoryWrite>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d005      	beq.n	8007d60 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2200      	movs	r2, #0
 8007d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e0a9      	b.n	8007eb4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	2bff      	cmp	r3, #255	; 0xff
 8007d68:	d90e      	bls.n	8007d88 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	22ff      	movs	r2, #255	; 0xff
 8007d6e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d74:	b2da      	uxtb	r2, r3
 8007d76:	8979      	ldrh	r1, [r7, #10]
 8007d78:	2300      	movs	r3, #0
 8007d7a:	9300      	str	r3, [sp, #0]
 8007d7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	f001 f937 	bl	8008ff4 <I2C_TransferConfig>
 8007d86:	e00f      	b.n	8007da8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d8c:	b29a      	uxth	r2, r3
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d96:	b2da      	uxtb	r2, r3
 8007d98:	8979      	ldrh	r1, [r7, #10]
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	9300      	str	r3, [sp, #0]
 8007d9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007da2:	68f8      	ldr	r0, [r7, #12]
 8007da4:	f001 f926 	bl	8008ff4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007da8:	697a      	ldr	r2, [r7, #20]
 8007daa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f000 ffb8 	bl	8008d22 <I2C_WaitOnTXISFlagUntilTimeout>
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d001      	beq.n	8007dbc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007db8:	2301      	movs	r3, #1
 8007dba:	e07b      	b.n	8007eb4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc0:	781a      	ldrb	r2, [r3, #0]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dcc:	1c5a      	adds	r2, r3, #1
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	3b01      	subs	r3, #1
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007de4:	3b01      	subs	r3, #1
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d034      	beq.n	8007e60 <HAL_I2C_Mem_Write+0x1c8>
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d130      	bne.n	8007e60 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	9300      	str	r3, [sp, #0]
 8007e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e04:	2200      	movs	r2, #0
 8007e06:	2180      	movs	r1, #128	; 0x80
 8007e08:	68f8      	ldr	r0, [r7, #12]
 8007e0a:	f000 ff4a 	bl	8008ca2 <I2C_WaitOnFlagUntilTimeout>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d001      	beq.n	8007e18 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	e04d      	b.n	8007eb4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	2bff      	cmp	r3, #255	; 0xff
 8007e20:	d90e      	bls.n	8007e40 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	22ff      	movs	r2, #255	; 0xff
 8007e26:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e2c:	b2da      	uxtb	r2, r3
 8007e2e:	8979      	ldrh	r1, [r7, #10]
 8007e30:	2300      	movs	r3, #0
 8007e32:	9300      	str	r3, [sp, #0]
 8007e34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e38:	68f8      	ldr	r0, [r7, #12]
 8007e3a:	f001 f8db 	bl	8008ff4 <I2C_TransferConfig>
 8007e3e:	e00f      	b.n	8007e60 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e44:	b29a      	uxth	r2, r3
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e4e:	b2da      	uxtb	r2, r3
 8007e50:	8979      	ldrh	r1, [r7, #10]
 8007e52:	2300      	movs	r3, #0
 8007e54:	9300      	str	r3, [sp, #0]
 8007e56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007e5a:	68f8      	ldr	r0, [r7, #12]
 8007e5c:	f001 f8ca 	bl	8008ff4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d19e      	bne.n	8007da8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e6a:	697a      	ldr	r2, [r7, #20]
 8007e6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e6e:	68f8      	ldr	r0, [r7, #12]
 8007e70:	f000 ff97 	bl	8008da2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d001      	beq.n	8007e7e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	e01a      	b.n	8007eb4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2220      	movs	r2, #32
 8007e84:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	6859      	ldr	r1, [r3, #4]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	4b0a      	ldr	r3, [pc, #40]	; (8007ebc <HAL_I2C_Mem_Write+0x224>)
 8007e92:	400b      	ands	r3, r1
 8007e94:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2220      	movs	r2, #32
 8007e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	e000      	b.n	8007eb4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007eb2:	2302      	movs	r3, #2
  }
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3718      	adds	r7, #24
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	fe00e800 	.word	0xfe00e800

08007ec0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b088      	sub	sp, #32
 8007ec4:	af02      	add	r7, sp, #8
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	4608      	mov	r0, r1
 8007eca:	4611      	mov	r1, r2
 8007ecc:	461a      	mov	r2, r3
 8007ece:	4603      	mov	r3, r0
 8007ed0:	817b      	strh	r3, [r7, #10]
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	813b      	strh	r3, [r7, #8]
 8007ed6:	4613      	mov	r3, r2
 8007ed8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	2b20      	cmp	r3, #32
 8007ee4:	f040 80fd 	bne.w	80080e2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ee8:	6a3b      	ldr	r3, [r7, #32]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d002      	beq.n	8007ef4 <HAL_I2C_Mem_Read+0x34>
 8007eee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d105      	bne.n	8007f00 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007efa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	e0f1      	b.n	80080e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d101      	bne.n	8007f0e <HAL_I2C_Mem_Read+0x4e>
 8007f0a:	2302      	movs	r3, #2
 8007f0c:	e0ea      	b.n	80080e4 <HAL_I2C_Mem_Read+0x224>
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2201      	movs	r2, #1
 8007f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007f16:	f7fe ff37 	bl	8006d88 <HAL_GetTick>
 8007f1a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	9300      	str	r3, [sp, #0]
 8007f20:	2319      	movs	r3, #25
 8007f22:	2201      	movs	r2, #1
 8007f24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	f000 feba 	bl	8008ca2 <I2C_WaitOnFlagUntilTimeout>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d001      	beq.n	8007f38 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	e0d5      	b.n	80080e4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2222      	movs	r2, #34	; 0x22
 8007f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2240      	movs	r2, #64	; 0x40
 8007f44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	6a3a      	ldr	r2, [r7, #32]
 8007f52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007f58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007f60:	88f8      	ldrh	r0, [r7, #6]
 8007f62:	893a      	ldrh	r2, [r7, #8]
 8007f64:	8979      	ldrh	r1, [r7, #10]
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	9301      	str	r3, [sp, #4]
 8007f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6c:	9300      	str	r3, [sp, #0]
 8007f6e:	4603      	mov	r3, r0
 8007f70:	68f8      	ldr	r0, [r7, #12]
 8007f72:	f000 fac7 	bl	8008504 <I2C_RequestMemoryRead>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d005      	beq.n	8007f88 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	e0ad      	b.n	80080e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	2bff      	cmp	r3, #255	; 0xff
 8007f90:	d90e      	bls.n	8007fb0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	22ff      	movs	r2, #255	; 0xff
 8007f96:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f9c:	b2da      	uxtb	r2, r3
 8007f9e:	8979      	ldrh	r1, [r7, #10]
 8007fa0:	4b52      	ldr	r3, [pc, #328]	; (80080ec <HAL_I2C_Mem_Read+0x22c>)
 8007fa2:	9300      	str	r3, [sp, #0]
 8007fa4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007fa8:	68f8      	ldr	r0, [r7, #12]
 8007faa:	f001 f823 	bl	8008ff4 <I2C_TransferConfig>
 8007fae:	e00f      	b.n	8007fd0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fb4:	b29a      	uxth	r2, r3
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fbe:	b2da      	uxtb	r2, r3
 8007fc0:	8979      	ldrh	r1, [r7, #10]
 8007fc2:	4b4a      	ldr	r3, [pc, #296]	; (80080ec <HAL_I2C_Mem_Read+0x22c>)
 8007fc4:	9300      	str	r3, [sp, #0]
 8007fc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007fca:	68f8      	ldr	r0, [r7, #12]
 8007fcc:	f001 f812 	bl	8008ff4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	9300      	str	r3, [sp, #0]
 8007fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	2104      	movs	r1, #4
 8007fda:	68f8      	ldr	r0, [r7, #12]
 8007fdc:	f000 fe61 	bl	8008ca2 <I2C_WaitOnFlagUntilTimeout>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d001      	beq.n	8007fea <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	e07c      	b.n	80080e4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff4:	b2d2      	uxtb	r2, r2
 8007ff6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffc:	1c5a      	adds	r2, r3, #1
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008006:	3b01      	subs	r3, #1
 8008008:	b29a      	uxth	r2, r3
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008012:	b29b      	uxth	r3, r3
 8008014:	3b01      	subs	r3, #1
 8008016:	b29a      	uxth	r2, r3
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008020:	b29b      	uxth	r3, r3
 8008022:	2b00      	cmp	r3, #0
 8008024:	d034      	beq.n	8008090 <HAL_I2C_Mem_Read+0x1d0>
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800802a:	2b00      	cmp	r3, #0
 800802c:	d130      	bne.n	8008090 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	9300      	str	r3, [sp, #0]
 8008032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008034:	2200      	movs	r2, #0
 8008036:	2180      	movs	r1, #128	; 0x80
 8008038:	68f8      	ldr	r0, [r7, #12]
 800803a:	f000 fe32 	bl	8008ca2 <I2C_WaitOnFlagUntilTimeout>
 800803e:	4603      	mov	r3, r0
 8008040:	2b00      	cmp	r3, #0
 8008042:	d001      	beq.n	8008048 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008044:	2301      	movs	r3, #1
 8008046:	e04d      	b.n	80080e4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800804c:	b29b      	uxth	r3, r3
 800804e:	2bff      	cmp	r3, #255	; 0xff
 8008050:	d90e      	bls.n	8008070 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	22ff      	movs	r2, #255	; 0xff
 8008056:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800805c:	b2da      	uxtb	r2, r3
 800805e:	8979      	ldrh	r1, [r7, #10]
 8008060:	2300      	movs	r3, #0
 8008062:	9300      	str	r3, [sp, #0]
 8008064:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008068:	68f8      	ldr	r0, [r7, #12]
 800806a:	f000 ffc3 	bl	8008ff4 <I2C_TransferConfig>
 800806e:	e00f      	b.n	8008090 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008074:	b29a      	uxth	r2, r3
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800807e:	b2da      	uxtb	r2, r3
 8008080:	8979      	ldrh	r1, [r7, #10]
 8008082:	2300      	movs	r3, #0
 8008084:	9300      	str	r3, [sp, #0]
 8008086:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800808a:	68f8      	ldr	r0, [r7, #12]
 800808c:	f000 ffb2 	bl	8008ff4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008094:	b29b      	uxth	r3, r3
 8008096:	2b00      	cmp	r3, #0
 8008098:	d19a      	bne.n	8007fd0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800809a:	697a      	ldr	r2, [r7, #20]
 800809c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800809e:	68f8      	ldr	r0, [r7, #12]
 80080a0:	f000 fe7f 	bl	8008da2 <I2C_WaitOnSTOPFlagUntilTimeout>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d001      	beq.n	80080ae <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	e01a      	b.n	80080e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2220      	movs	r2, #32
 80080b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	6859      	ldr	r1, [r3, #4]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	4b0b      	ldr	r3, [pc, #44]	; (80080f0 <HAL_I2C_Mem_Read+0x230>)
 80080c2:	400b      	ands	r3, r1
 80080c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2220      	movs	r2, #32
 80080ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2200      	movs	r2, #0
 80080d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2200      	movs	r2, #0
 80080da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80080de:	2300      	movs	r3, #0
 80080e0:	e000      	b.n	80080e4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80080e2:	2302      	movs	r3, #2
  }
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3718      	adds	r7, #24
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}
 80080ec:	80002400 	.word	0x80002400
 80080f0:	fe00e800 	.word	0xfe00e800

080080f4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	699b      	ldr	r3, [r3, #24]
 8008102:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008110:	2b00      	cmp	r3, #0
 8008112:	d005      	beq.n	8008120 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008118:	68ba      	ldr	r2, [r7, #8]
 800811a:	68f9      	ldr	r1, [r7, #12]
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	4798      	blx	r3
  }
}
 8008120:	bf00      	nop
 8008122:	3710      	adds	r7, #16
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b086      	sub	sp, #24
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	699b      	ldr	r3, [r3, #24]
 8008136:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	0a1b      	lsrs	r3, r3, #8
 8008144:	f003 0301 	and.w	r3, r3, #1
 8008148:	2b00      	cmp	r3, #0
 800814a:	d010      	beq.n	800816e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	09db      	lsrs	r3, r3, #7
 8008150:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008154:	2b00      	cmp	r3, #0
 8008156:	d00a      	beq.n	800816e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800815c:	f043 0201 	orr.w	r2, r3, #1
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f44f 7280 	mov.w	r2, #256	; 0x100
 800816c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	0a9b      	lsrs	r3, r3, #10
 8008172:	f003 0301 	and.w	r3, r3, #1
 8008176:	2b00      	cmp	r3, #0
 8008178:	d010      	beq.n	800819c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	09db      	lsrs	r3, r3, #7
 800817e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008182:	2b00      	cmp	r3, #0
 8008184:	d00a      	beq.n	800819c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800818a:	f043 0208 	orr.w	r2, r3, #8
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800819a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	0a5b      	lsrs	r3, r3, #9
 80081a0:	f003 0301 	and.w	r3, r3, #1
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d010      	beq.n	80081ca <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	09db      	lsrs	r3, r3, #7
 80081ac:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00a      	beq.n	80081ca <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081b8:	f043 0202 	orr.w	r2, r3, #2
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081c8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081ce:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f003 030b 	and.w	r3, r3, #11
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d003      	beq.n	80081e2 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80081da:	68f9      	ldr	r1, [r7, #12]
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 fc27 	bl	8008a30 <I2C_ITError>
  }
}
 80081e2:	bf00      	nop
 80081e4:	3718      	adds	r7, #24
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80081ea:	b480      	push	{r7}
 80081ec:	b083      	sub	sp, #12
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80081f2:	bf00      	nop
 80081f4:	370c      	adds	r7, #12
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr

080081fe <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80081fe:	b480      	push	{r7}
 8008200:	b083      	sub	sp, #12
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008206:	bf00      	nop
 8008208:	370c      	adds	r7, #12
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr

08008212 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008212:	b480      	push	{r7}
 8008214:	b083      	sub	sp, #12
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
 800821a:	460b      	mov	r3, r1
 800821c:	70fb      	strb	r3, [r7, #3]
 800821e:	4613      	mov	r3, r2
 8008220:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008222:	bf00      	nop
 8008224:	370c      	adds	r7, #12
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr

0800822e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800822e:	b480      	push	{r7}
 8008230:	b083      	sub	sp, #12
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8008236:	bf00      	nop
 8008238:	370c      	adds	r7, #12
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr

08008242 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008242:	b480      	push	{r7}
 8008244:	b083      	sub	sp, #12
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800824a:	bf00      	nop
 800824c:	370c      	adds	r7, #12
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr

08008256 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b086      	sub	sp, #24
 800825a:	af00      	add	r7, sp, #0
 800825c:	60f8      	str	r0, [r7, #12]
 800825e:	60b9      	str	r1, [r7, #8]
 8008260:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008266:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008272:	2b01      	cmp	r3, #1
 8008274:	d101      	bne.n	800827a <I2C_Slave_ISR_IT+0x24>
 8008276:	2302      	movs	r3, #2
 8008278:	e0ec      	b.n	8008454 <I2C_Slave_ISR_IT+0x1fe>
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2201      	movs	r2, #1
 800827e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	095b      	lsrs	r3, r3, #5
 8008286:	f003 0301 	and.w	r3, r3, #1
 800828a:	2b00      	cmp	r3, #0
 800828c:	d009      	beq.n	80082a2 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	095b      	lsrs	r3, r3, #5
 8008292:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008296:	2b00      	cmp	r3, #0
 8008298:	d003      	beq.n	80082a2 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800829a:	6939      	ldr	r1, [r7, #16]
 800829c:	68f8      	ldr	r0, [r7, #12]
 800829e:	f000 fa67 	bl	8008770 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	091b      	lsrs	r3, r3, #4
 80082a6:	f003 0301 	and.w	r3, r3, #1
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d04d      	beq.n	800834a <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	091b      	lsrs	r3, r3, #4
 80082b2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d047      	beq.n	800834a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082be:	b29b      	uxth	r3, r3
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d128      	bne.n	8008316 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	2b28      	cmp	r3, #40	; 0x28
 80082ce:	d108      	bne.n	80082e2 <I2C_Slave_ISR_IT+0x8c>
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082d6:	d104      	bne.n	80082e2 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80082d8:	6939      	ldr	r1, [r7, #16]
 80082da:	68f8      	ldr	r0, [r7, #12]
 80082dc:	f000 fb52 	bl	8008984 <I2C_ITListenCplt>
 80082e0:	e032      	b.n	8008348 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	2b29      	cmp	r3, #41	; 0x29
 80082ec:	d10e      	bne.n	800830c <I2C_Slave_ISR_IT+0xb6>
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80082f4:	d00a      	beq.n	800830c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	2210      	movs	r2, #16
 80082fc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80082fe:	68f8      	ldr	r0, [r7, #12]
 8008300:	f000 fc8d 	bl	8008c1e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008304:	68f8      	ldr	r0, [r7, #12]
 8008306:	f000 f9d5 	bl	80086b4 <I2C_ITSlaveSeqCplt>
 800830a:	e01d      	b.n	8008348 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2210      	movs	r2, #16
 8008312:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8008314:	e096      	b.n	8008444 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2210      	movs	r2, #16
 800831c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008322:	f043 0204 	orr.w	r2, r3, #4
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d004      	beq.n	800833a <I2C_Slave_ISR_IT+0xe4>
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008336:	f040 8085 	bne.w	8008444 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800833e:	4619      	mov	r1, r3
 8008340:	68f8      	ldr	r0, [r7, #12]
 8008342:	f000 fb75 	bl	8008a30 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008346:	e07d      	b.n	8008444 <I2C_Slave_ISR_IT+0x1ee>
 8008348:	e07c      	b.n	8008444 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	089b      	lsrs	r3, r3, #2
 800834e:	f003 0301 	and.w	r3, r3, #1
 8008352:	2b00      	cmp	r3, #0
 8008354:	d030      	beq.n	80083b8 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	089b      	lsrs	r3, r3, #2
 800835a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800835e:	2b00      	cmp	r3, #0
 8008360:	d02a      	beq.n	80083b8 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008366:	b29b      	uxth	r3, r3
 8008368:	2b00      	cmp	r3, #0
 800836a:	d018      	beq.n	800839e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008376:	b2d2      	uxtb	r2, r2
 8008378:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837e:	1c5a      	adds	r2, r3, #1
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008388:	3b01      	subs	r3, #1
 800838a:	b29a      	uxth	r2, r3
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008394:	b29b      	uxth	r3, r3
 8008396:	3b01      	subs	r3, #1
 8008398:	b29a      	uxth	r2, r3
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d14f      	bne.n	8008448 <I2C_Slave_ISR_IT+0x1f2>
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80083ae:	d04b      	beq.n	8008448 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80083b0:	68f8      	ldr	r0, [r7, #12]
 80083b2:	f000 f97f 	bl	80086b4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80083b6:	e047      	b.n	8008448 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	08db      	lsrs	r3, r3, #3
 80083bc:	f003 0301 	and.w	r3, r3, #1
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d00a      	beq.n	80083da <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	08db      	lsrs	r3, r3, #3
 80083c8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d004      	beq.n	80083da <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80083d0:	6939      	ldr	r1, [r7, #16]
 80083d2:	68f8      	ldr	r0, [r7, #12]
 80083d4:	f000 f8ea 	bl	80085ac <I2C_ITAddrCplt>
 80083d8:	e037      	b.n	800844a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	085b      	lsrs	r3, r3, #1
 80083de:	f003 0301 	and.w	r3, r3, #1
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d031      	beq.n	800844a <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	085b      	lsrs	r3, r3, #1
 80083ea:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d02b      	beq.n	800844a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d018      	beq.n	800842e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008400:	781a      	ldrb	r2, [r3, #0]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840c:	1c5a      	adds	r2, r3, #1
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008416:	b29b      	uxth	r3, r3
 8008418:	3b01      	subs	r3, #1
 800841a:	b29a      	uxth	r2, r3
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008424:	3b01      	subs	r3, #1
 8008426:	b29a      	uxth	r2, r3
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	851a      	strh	r2, [r3, #40]	; 0x28
 800842c:	e00d      	b.n	800844a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008434:	d002      	beq.n	800843c <I2C_Slave_ISR_IT+0x1e6>
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d106      	bne.n	800844a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800843c:	68f8      	ldr	r0, [r7, #12]
 800843e:	f000 f939 	bl	80086b4 <I2C_ITSlaveSeqCplt>
 8008442:	e002      	b.n	800844a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8008444:	bf00      	nop
 8008446:	e000      	b.n	800844a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8008448:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2200      	movs	r2, #0
 800844e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	3718      	adds	r7, #24
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b086      	sub	sp, #24
 8008460:	af02      	add	r7, sp, #8
 8008462:	60f8      	str	r0, [r7, #12]
 8008464:	4608      	mov	r0, r1
 8008466:	4611      	mov	r1, r2
 8008468:	461a      	mov	r2, r3
 800846a:	4603      	mov	r3, r0
 800846c:	817b      	strh	r3, [r7, #10]
 800846e:	460b      	mov	r3, r1
 8008470:	813b      	strh	r3, [r7, #8]
 8008472:	4613      	mov	r3, r2
 8008474:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008476:	88fb      	ldrh	r3, [r7, #6]
 8008478:	b2da      	uxtb	r2, r3
 800847a:	8979      	ldrh	r1, [r7, #10]
 800847c:	4b20      	ldr	r3, [pc, #128]	; (8008500 <I2C_RequestMemoryWrite+0xa4>)
 800847e:	9300      	str	r3, [sp, #0]
 8008480:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008484:	68f8      	ldr	r0, [r7, #12]
 8008486:	f000 fdb5 	bl	8008ff4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800848a:	69fa      	ldr	r2, [r7, #28]
 800848c:	69b9      	ldr	r1, [r7, #24]
 800848e:	68f8      	ldr	r0, [r7, #12]
 8008490:	f000 fc47 	bl	8008d22 <I2C_WaitOnTXISFlagUntilTimeout>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d001      	beq.n	800849e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800849a:	2301      	movs	r3, #1
 800849c:	e02c      	b.n	80084f8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800849e:	88fb      	ldrh	r3, [r7, #6]
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d105      	bne.n	80084b0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80084a4:	893b      	ldrh	r3, [r7, #8]
 80084a6:	b2da      	uxtb	r2, r3
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	629a      	str	r2, [r3, #40]	; 0x28
 80084ae:	e015      	b.n	80084dc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80084b0:	893b      	ldrh	r3, [r7, #8]
 80084b2:	0a1b      	lsrs	r3, r3, #8
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	b2da      	uxtb	r2, r3
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80084be:	69fa      	ldr	r2, [r7, #28]
 80084c0:	69b9      	ldr	r1, [r7, #24]
 80084c2:	68f8      	ldr	r0, [r7, #12]
 80084c4:	f000 fc2d 	bl	8008d22 <I2C_WaitOnTXISFlagUntilTimeout>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d001      	beq.n	80084d2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	e012      	b.n	80084f8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80084d2:	893b      	ldrh	r3, [r7, #8]
 80084d4:	b2da      	uxtb	r2, r3
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80084dc:	69fb      	ldr	r3, [r7, #28]
 80084de:	9300      	str	r3, [sp, #0]
 80084e0:	69bb      	ldr	r3, [r7, #24]
 80084e2:	2200      	movs	r2, #0
 80084e4:	2180      	movs	r1, #128	; 0x80
 80084e6:	68f8      	ldr	r0, [r7, #12]
 80084e8:	f000 fbdb 	bl	8008ca2 <I2C_WaitOnFlagUntilTimeout>
 80084ec:	4603      	mov	r3, r0
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d001      	beq.n	80084f6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	e000      	b.n	80084f8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80084f6:	2300      	movs	r3, #0
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3710      	adds	r7, #16
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}
 8008500:	80002000 	.word	0x80002000

08008504 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b086      	sub	sp, #24
 8008508:	af02      	add	r7, sp, #8
 800850a:	60f8      	str	r0, [r7, #12]
 800850c:	4608      	mov	r0, r1
 800850e:	4611      	mov	r1, r2
 8008510:	461a      	mov	r2, r3
 8008512:	4603      	mov	r3, r0
 8008514:	817b      	strh	r3, [r7, #10]
 8008516:	460b      	mov	r3, r1
 8008518:	813b      	strh	r3, [r7, #8]
 800851a:	4613      	mov	r3, r2
 800851c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800851e:	88fb      	ldrh	r3, [r7, #6]
 8008520:	b2da      	uxtb	r2, r3
 8008522:	8979      	ldrh	r1, [r7, #10]
 8008524:	4b20      	ldr	r3, [pc, #128]	; (80085a8 <I2C_RequestMemoryRead+0xa4>)
 8008526:	9300      	str	r3, [sp, #0]
 8008528:	2300      	movs	r3, #0
 800852a:	68f8      	ldr	r0, [r7, #12]
 800852c:	f000 fd62 	bl	8008ff4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008530:	69fa      	ldr	r2, [r7, #28]
 8008532:	69b9      	ldr	r1, [r7, #24]
 8008534:	68f8      	ldr	r0, [r7, #12]
 8008536:	f000 fbf4 	bl	8008d22 <I2C_WaitOnTXISFlagUntilTimeout>
 800853a:	4603      	mov	r3, r0
 800853c:	2b00      	cmp	r3, #0
 800853e:	d001      	beq.n	8008544 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008540:	2301      	movs	r3, #1
 8008542:	e02c      	b.n	800859e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008544:	88fb      	ldrh	r3, [r7, #6]
 8008546:	2b01      	cmp	r3, #1
 8008548:	d105      	bne.n	8008556 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800854a:	893b      	ldrh	r3, [r7, #8]
 800854c:	b2da      	uxtb	r2, r3
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	629a      	str	r2, [r3, #40]	; 0x28
 8008554:	e015      	b.n	8008582 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008556:	893b      	ldrh	r3, [r7, #8]
 8008558:	0a1b      	lsrs	r3, r3, #8
 800855a:	b29b      	uxth	r3, r3
 800855c:	b2da      	uxtb	r2, r3
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008564:	69fa      	ldr	r2, [r7, #28]
 8008566:	69b9      	ldr	r1, [r7, #24]
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	f000 fbda 	bl	8008d22 <I2C_WaitOnTXISFlagUntilTimeout>
 800856e:	4603      	mov	r3, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d001      	beq.n	8008578 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008574:	2301      	movs	r3, #1
 8008576:	e012      	b.n	800859e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008578:	893b      	ldrh	r3, [r7, #8]
 800857a:	b2da      	uxtb	r2, r3
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	9300      	str	r3, [sp, #0]
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	2200      	movs	r2, #0
 800858a:	2140      	movs	r1, #64	; 0x40
 800858c:	68f8      	ldr	r0, [r7, #12]
 800858e:	f000 fb88 	bl	8008ca2 <I2C_WaitOnFlagUntilTimeout>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d001      	beq.n	800859c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	e000      	b.n	800859e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800859c:	2300      	movs	r3, #0
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3710      	adds	r7, #16
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	80002000 	.word	0x80002000

080085ac <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80085c2:	2b28      	cmp	r3, #40	; 0x28
 80085c4:	d16a      	bne.n	800869c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	699b      	ldr	r3, [r3, #24]
 80085cc:	0c1b      	lsrs	r3, r3, #16
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	f003 0301 	and.w	r3, r3, #1
 80085d4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	699b      	ldr	r3, [r3, #24]
 80085dc:	0c1b      	lsrs	r3, r3, #16
 80085de:	b29b      	uxth	r3, r3
 80085e0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80085e4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085f2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	68db      	ldr	r3, [r3, #12]
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008600:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	68db      	ldr	r3, [r3, #12]
 8008606:	2b02      	cmp	r3, #2
 8008608:	d138      	bne.n	800867c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800860a:	897b      	ldrh	r3, [r7, #10]
 800860c:	09db      	lsrs	r3, r3, #7
 800860e:	b29a      	uxth	r2, r3
 8008610:	89bb      	ldrh	r3, [r7, #12]
 8008612:	4053      	eors	r3, r2
 8008614:	b29b      	uxth	r3, r3
 8008616:	f003 0306 	and.w	r3, r3, #6
 800861a:	2b00      	cmp	r3, #0
 800861c:	d11c      	bne.n	8008658 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800861e:	897b      	ldrh	r3, [r7, #10]
 8008620:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008626:	1c5a      	adds	r2, r3, #1
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008630:	2b02      	cmp	r3, #2
 8008632:	d13b      	bne.n	80086ac <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2208      	movs	r2, #8
 8008640:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2200      	movs	r2, #0
 8008646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800864a:	89ba      	ldrh	r2, [r7, #12]
 800864c:	7bfb      	ldrb	r3, [r7, #15]
 800864e:	4619      	mov	r1, r3
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f7ff fdde 	bl	8008212 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008656:	e029      	b.n	80086ac <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8008658:	893b      	ldrh	r3, [r7, #8]
 800865a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800865c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 fcf9 	bl	8009058 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800866e:	89ba      	ldrh	r2, [r7, #12]
 8008670:	7bfb      	ldrb	r3, [r7, #15]
 8008672:	4619      	mov	r1, r3
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f7ff fdcc 	bl	8008212 <HAL_I2C_AddrCallback>
}
 800867a:	e017      	b.n	80086ac <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800867c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 fce9 	bl	8009058 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2200      	movs	r2, #0
 800868a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800868e:	89ba      	ldrh	r2, [r7, #12]
 8008690:	7bfb      	ldrb	r3, [r7, #15]
 8008692:	4619      	mov	r1, r3
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f7ff fdbc 	bl	8008212 <HAL_I2C_AddrCallback>
}
 800869a:	e007      	b.n	80086ac <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2208      	movs	r2, #8
 80086a2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80086ac:	bf00      	nop
 80086ae:	3710      	adds	r7, #16
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b084      	sub	sp, #16
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	0b9b      	lsrs	r3, r3, #14
 80086d0:	f003 0301 	and.w	r3, r3, #1
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d008      	beq.n	80086ea <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80086e6:	601a      	str	r2, [r3, #0]
 80086e8:	e00d      	b.n	8008706 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	0bdb      	lsrs	r3, r3, #15
 80086ee:	f003 0301 	and.w	r3, r3, #1
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d007      	beq.n	8008706 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008704:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800870c:	b2db      	uxtb	r3, r3
 800870e:	2b29      	cmp	r3, #41	; 0x29
 8008710:	d112      	bne.n	8008738 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2228      	movs	r2, #40	; 0x28
 8008716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2221      	movs	r2, #33	; 0x21
 800871e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008720:	2101      	movs	r1, #1
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 fc98 	bl	8009058 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2200      	movs	r2, #0
 800872c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f7ff fd5a 	bl	80081ea <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008736:	e017      	b.n	8008768 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800873e:	b2db      	uxtb	r3, r3
 8008740:	2b2a      	cmp	r3, #42	; 0x2a
 8008742:	d111      	bne.n	8008768 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2228      	movs	r2, #40	; 0x28
 8008748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2222      	movs	r2, #34	; 0x22
 8008750:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008752:	2102      	movs	r1, #2
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 fc7f 	bl	8009058 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f7ff fd4b 	bl	80081fe <HAL_I2C_SlaveRxCpltCallback>
}
 8008768:	bf00      	nop
 800876a:	3710      	adds	r7, #16
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b086      	sub	sp, #24
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800878c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	2220      	movs	r2, #32
 8008794:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008796:	7bfb      	ldrb	r3, [r7, #15]
 8008798:	2b21      	cmp	r3, #33	; 0x21
 800879a:	d002      	beq.n	80087a2 <I2C_ITSlaveCplt+0x32>
 800879c:	7bfb      	ldrb	r3, [r7, #15]
 800879e:	2b29      	cmp	r3, #41	; 0x29
 80087a0:	d108      	bne.n	80087b4 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80087a2:	f248 0101 	movw	r1, #32769	; 0x8001
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 fc56 	bl	8009058 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2221      	movs	r2, #33	; 0x21
 80087b0:	631a      	str	r2, [r3, #48]	; 0x30
 80087b2:	e00d      	b.n	80087d0 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80087b4:	7bfb      	ldrb	r3, [r7, #15]
 80087b6:	2b22      	cmp	r3, #34	; 0x22
 80087b8:	d002      	beq.n	80087c0 <I2C_ITSlaveCplt+0x50>
 80087ba:	7bfb      	ldrb	r3, [r7, #15]
 80087bc:	2b2a      	cmp	r3, #42	; 0x2a
 80087be:	d107      	bne.n	80087d0 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80087c0:	f248 0102 	movw	r1, #32770	; 0x8002
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 fc47 	bl	8009058 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2222      	movs	r2, #34	; 0x22
 80087ce:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	685a      	ldr	r2, [r3, #4]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80087de:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	6859      	ldr	r1, [r3, #4]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681a      	ldr	r2, [r3, #0]
 80087ea:	4b64      	ldr	r3, [pc, #400]	; (800897c <I2C_ITSlaveCplt+0x20c>)
 80087ec:	400b      	ands	r3, r1
 80087ee:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 fa14 	bl	8008c1e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	0b9b      	lsrs	r3, r3, #14
 80087fa:	f003 0301 	and.w	r3, r3, #1
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d013      	beq.n	800882a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008810:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008816:	2b00      	cmp	r3, #0
 8008818:	d020      	beq.n	800885c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	b29a      	uxth	r2, r3
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008828:	e018      	b.n	800885c <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	0bdb      	lsrs	r3, r3, #15
 800882e:	f003 0301 	and.w	r3, r3, #1
 8008832:	2b00      	cmp	r3, #0
 8008834:	d012      	beq.n	800885c <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008844:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800884a:	2b00      	cmp	r3, #0
 800884c:	d006      	beq.n	800885c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	b29a      	uxth	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	089b      	lsrs	r3, r3, #2
 8008860:	f003 0301 	and.w	r3, r3, #1
 8008864:	2b00      	cmp	r3, #0
 8008866:	d020      	beq.n	80088aa <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	f023 0304 	bic.w	r3, r3, #4
 800886e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800887a:	b2d2      	uxtb	r2, r2
 800887c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008882:	1c5a      	adds	r2, r3, #1
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800888c:	2b00      	cmp	r3, #0
 800888e:	d00c      	beq.n	80088aa <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008894:	3b01      	subs	r3, #1
 8008896:	b29a      	uxth	r2, r3
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	3b01      	subs	r3, #1
 80088a4:	b29a      	uxth	r2, r3
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d005      	beq.n	80088c0 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088b8:	f043 0204 	orr.w	r2, r3, #4
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d010      	beq.n	80088f8 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088da:	4619      	mov	r1, r3
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 f8a7 	bl	8008a30 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	2b28      	cmp	r3, #40	; 0x28
 80088ec:	d141      	bne.n	8008972 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80088ee:	6979      	ldr	r1, [r7, #20]
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f000 f847 	bl	8008984 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80088f6:	e03c      	b.n	8008972 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008900:	d014      	beq.n	800892c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f7ff fed6 	bl	80086b4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	4a1d      	ldr	r2, [pc, #116]	; (8008980 <I2C_ITSlaveCplt+0x210>)
 800890c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2220      	movs	r2, #32
 8008912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2200      	movs	r2, #0
 800891a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f7ff fc82 	bl	800822e <HAL_I2C_ListenCpltCallback>
}
 800892a:	e022      	b.n	8008972 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008932:	b2db      	uxtb	r3, r3
 8008934:	2b22      	cmp	r3, #34	; 0x22
 8008936:	d10e      	bne.n	8008956 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2220      	movs	r2, #32
 800893c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2200      	movs	r2, #0
 8008944:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f7ff fc55 	bl	80081fe <HAL_I2C_SlaveRxCpltCallback>
}
 8008954:	e00d      	b.n	8008972 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2220      	movs	r2, #32
 800895a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f7ff fc3c 	bl	80081ea <HAL_I2C_SlaveTxCpltCallback>
}
 8008972:	bf00      	nop
 8008974:	3718      	adds	r7, #24
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
 800897a:	bf00      	nop
 800897c:	fe00e800 	.word	0xfe00e800
 8008980:	ffff0000 	.word	0xffff0000

08008984 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4a26      	ldr	r2, [pc, #152]	; (8008a2c <I2C_ITListenCplt+0xa8>)
 8008992:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2200      	movs	r2, #0
 8008998:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2220      	movs	r2, #32
 800899e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2200      	movs	r2, #0
 80089ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	089b      	lsrs	r3, r3, #2
 80089b4:	f003 0301 	and.w	r3, r3, #1
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d022      	beq.n	8008a02 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c6:	b2d2      	uxtb	r2, r2
 80089c8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ce:	1c5a      	adds	r2, r3, #1
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d012      	beq.n	8008a02 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089e0:	3b01      	subs	r3, #1
 80089e2:	b29a      	uxth	r2, r3
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	3b01      	subs	r3, #1
 80089f0:	b29a      	uxth	r2, r3
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089fa:	f043 0204 	orr.w	r2, r3, #4
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008a02:	f248 0103 	movw	r1, #32771	; 0x8003
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 fb26 	bl	8009058 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2210      	movs	r2, #16
 8008a12:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f7ff fc06 	bl	800822e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8008a22:	bf00      	nop
 8008a24:	3708      	adds	r7, #8
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	ffff0000 	.word	0xffff0000

08008a30 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	4a5d      	ldr	r2, [pc, #372]	; (8008bc4 <I2C_ITError+0x194>)
 8008a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	431a      	orrs	r2, r3
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8008a62:	7bfb      	ldrb	r3, [r7, #15]
 8008a64:	2b28      	cmp	r3, #40	; 0x28
 8008a66:	d005      	beq.n	8008a74 <I2C_ITError+0x44>
 8008a68:	7bfb      	ldrb	r3, [r7, #15]
 8008a6a:	2b29      	cmp	r3, #41	; 0x29
 8008a6c:	d002      	beq.n	8008a74 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8008a6e:	7bfb      	ldrb	r3, [r7, #15]
 8008a70:	2b2a      	cmp	r3, #42	; 0x2a
 8008a72:	d10b      	bne.n	8008a8c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008a74:	2103      	movs	r1, #3
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 faee 	bl	8009058 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2228      	movs	r2, #40	; 0x28
 8008a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	4a50      	ldr	r2, [pc, #320]	; (8008bc8 <I2C_ITError+0x198>)
 8008a88:	635a      	str	r2, [r3, #52]	; 0x34
 8008a8a:	e011      	b.n	8008ab0 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008a8c:	f248 0103 	movw	r1, #32771	; 0x8003
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 fae1 	bl	8009058 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	2b60      	cmp	r3, #96	; 0x60
 8008aa0:	d003      	beq.n	8008aaa <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2220      	movs	r2, #32
 8008aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2200      	movs	r2, #0
 8008aae:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ab4:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d039      	beq.n	8008b32 <I2C_ITError+0x102>
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	2b11      	cmp	r3, #17
 8008ac2:	d002      	beq.n	8008aca <I2C_ITError+0x9a>
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	2b21      	cmp	r3, #33	; 0x21
 8008ac8:	d133      	bne.n	8008b32 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ad4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ad8:	d107      	bne.n	8008aea <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	681a      	ldr	r2, [r3, #0]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008ae8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7fe fd04 	bl	80074fc <HAL_DMA_GetState>
 8008af4:	4603      	mov	r3, r0
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d017      	beq.n	8008b2a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008afe:	4a33      	ldr	r2, [pc, #204]	; (8008bcc <I2C_ITError+0x19c>)
 8008b00:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7fe fc04 	bl	800731c <HAL_DMA_Abort_IT>
 8008b14:	4603      	mov	r3, r0
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d04d      	beq.n	8008bb6 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008b24:	4610      	mov	r0, r2
 8008b26:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008b28:	e045      	b.n	8008bb6 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 f850 	bl	8008bd0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008b30:	e041      	b.n	8008bb6 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d039      	beq.n	8008bae <I2C_ITError+0x17e>
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	2b12      	cmp	r3, #18
 8008b3e:	d002      	beq.n	8008b46 <I2C_ITError+0x116>
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	2b22      	cmp	r3, #34	; 0x22
 8008b44:	d133      	bne.n	8008bae <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b54:	d107      	bne.n	8008b66 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008b64:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f7fe fcc6 	bl	80074fc <HAL_DMA_GetState>
 8008b70:	4603      	mov	r3, r0
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d017      	beq.n	8008ba6 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b7a:	4a14      	ldr	r2, [pc, #80]	; (8008bcc <I2C_ITError+0x19c>)
 8008b7c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2200      	movs	r2, #0
 8008b82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7fe fbc6 	bl	800731c <HAL_DMA_Abort_IT>
 8008b90:	4603      	mov	r3, r0
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d011      	beq.n	8008bba <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008ba0:	4610      	mov	r0, r2
 8008ba2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008ba4:	e009      	b.n	8008bba <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 f812 	bl	8008bd0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008bac:	e005      	b.n	8008bba <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 f80e 	bl	8008bd0 <I2C_TreatErrorCallback>
  }
}
 8008bb4:	e002      	b.n	8008bbc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008bb6:	bf00      	nop
 8008bb8:	e000      	b.n	8008bbc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008bba:	bf00      	nop
}
 8008bbc:	bf00      	nop
 8008bbe:	3710      	adds	r7, #16
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}
 8008bc4:	ffff0000 	.word	0xffff0000
 8008bc8:	08008257 	.word	0x08008257
 8008bcc:	08008c67 	.word	0x08008c67

08008bd0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	2b60      	cmp	r3, #96	; 0x60
 8008be2:	d10e      	bne.n	8008c02 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2220      	movs	r2, #32
 8008be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f7ff fb21 	bl	8008242 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008c00:	e009      	b.n	8008c16 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2200      	movs	r2, #0
 8008c06:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f7fc f903 	bl	8004e1c <HAL_I2C_ErrorCallback>
}
 8008c16:	bf00      	nop
 8008c18:	3708      	adds	r7, #8
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}

08008c1e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008c1e:	b480      	push	{r7}
 8008c20:	b083      	sub	sp, #12
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	699b      	ldr	r3, [r3, #24]
 8008c2c:	f003 0302 	and.w	r3, r3, #2
 8008c30:	2b02      	cmp	r3, #2
 8008c32:	d103      	bne.n	8008c3c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	699b      	ldr	r3, [r3, #24]
 8008c42:	f003 0301 	and.w	r3, r3, #1
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d007      	beq.n	8008c5a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	699a      	ldr	r2, [r3, #24]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f042 0201 	orr.w	r2, r2, #1
 8008c58:	619a      	str	r2, [r3, #24]
  }
}
 8008c5a:	bf00      	nop
 8008c5c:	370c      	adds	r7, #12
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr

08008c66 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008c66:	b580      	push	{r7, lr}
 8008c68:	b084      	sub	sp, #16
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c72:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d003      	beq.n	8008c84 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c80:	2200      	movs	r2, #0
 8008c82:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d003      	beq.n	8008c94 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c90:	2200      	movs	r2, #0
 8008c92:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8008c94:	68f8      	ldr	r0, [r7, #12]
 8008c96:	f7ff ff9b 	bl	8008bd0 <I2C_TreatErrorCallback>
}
 8008c9a:	bf00      	nop
 8008c9c:	3710      	adds	r7, #16
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	b084      	sub	sp, #16
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	60f8      	str	r0, [r7, #12]
 8008caa:	60b9      	str	r1, [r7, #8]
 8008cac:	603b      	str	r3, [r7, #0]
 8008cae:	4613      	mov	r3, r2
 8008cb0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008cb2:	e022      	b.n	8008cfa <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cba:	d01e      	beq.n	8008cfa <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cbc:	f7fe f864 	bl	8006d88 <HAL_GetTick>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	69bb      	ldr	r3, [r7, #24]
 8008cc4:	1ad3      	subs	r3, r2, r3
 8008cc6:	683a      	ldr	r2, [r7, #0]
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d302      	bcc.n	8008cd2 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d113      	bne.n	8008cfa <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cd6:	f043 0220 	orr.w	r2, r3, #32
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2220      	movs	r2, #32
 8008ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	e00f      	b.n	8008d1a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	699a      	ldr	r2, [r3, #24]
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	4013      	ands	r3, r2
 8008d04:	68ba      	ldr	r2, [r7, #8]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	bf0c      	ite	eq
 8008d0a:	2301      	moveq	r3, #1
 8008d0c:	2300      	movne	r3, #0
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	461a      	mov	r2, r3
 8008d12:	79fb      	ldrb	r3, [r7, #7]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d0cd      	beq.n	8008cb4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008d18:	2300      	movs	r3, #0
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3710      	adds	r7, #16
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b084      	sub	sp, #16
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	60f8      	str	r0, [r7, #12]
 8008d2a:	60b9      	str	r1, [r7, #8]
 8008d2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008d2e:	e02c      	b.n	8008d8a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	68b9      	ldr	r1, [r7, #8]
 8008d34:	68f8      	ldr	r0, [r7, #12]
 8008d36:	f000 f871 	bl	8008e1c <I2C_IsErrorOccurred>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d001      	beq.n	8008d44 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008d40:	2301      	movs	r3, #1
 8008d42:	e02a      	b.n	8008d9a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d4a:	d01e      	beq.n	8008d8a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d4c:	f7fe f81c 	bl	8006d88 <HAL_GetTick>
 8008d50:	4602      	mov	r2, r0
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	1ad3      	subs	r3, r2, r3
 8008d56:	68ba      	ldr	r2, [r7, #8]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d302      	bcc.n	8008d62 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d113      	bne.n	8008d8a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d66:	f043 0220 	orr.w	r2, r3, #32
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2220      	movs	r2, #32
 8008d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2200      	movs	r2, #0
 8008d82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008d86:	2301      	movs	r3, #1
 8008d88:	e007      	b.n	8008d9a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	699b      	ldr	r3, [r3, #24]
 8008d90:	f003 0302 	and.w	r3, r3, #2
 8008d94:	2b02      	cmp	r3, #2
 8008d96:	d1cb      	bne.n	8008d30 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008d98:	2300      	movs	r3, #0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3710      	adds	r7, #16
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}

08008da2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b084      	sub	sp, #16
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	60f8      	str	r0, [r7, #12]
 8008daa:	60b9      	str	r1, [r7, #8]
 8008dac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008dae:	e028      	b.n	8008e02 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	68b9      	ldr	r1, [r7, #8]
 8008db4:	68f8      	ldr	r0, [r7, #12]
 8008db6:	f000 f831 	bl	8008e1c <I2C_IsErrorOccurred>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d001      	beq.n	8008dc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	e026      	b.n	8008e12 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dc4:	f7fd ffe0 	bl	8006d88 <HAL_GetTick>
 8008dc8:	4602      	mov	r2, r0
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	1ad3      	subs	r3, r2, r3
 8008dce:	68ba      	ldr	r2, [r7, #8]
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d302      	bcc.n	8008dda <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d113      	bne.n	8008e02 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dde:	f043 0220 	orr.w	r2, r3, #32
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2220      	movs	r2, #32
 8008dea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2200      	movs	r2, #0
 8008df2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e007      	b.n	8008e12 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	699b      	ldr	r3, [r3, #24]
 8008e08:	f003 0320 	and.w	r3, r3, #32
 8008e0c:	2b20      	cmp	r3, #32
 8008e0e:	d1cf      	bne.n	8008db0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008e10:	2300      	movs	r3, #0
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3710      	adds	r7, #16
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
	...

08008e1c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b08a      	sub	sp, #40	; 0x28
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	60f8      	str	r0, [r7, #12]
 8008e24:	60b9      	str	r1, [r7, #8]
 8008e26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	699b      	ldr	r3, [r3, #24]
 8008e34:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008e36:	2300      	movs	r3, #0
 8008e38:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008e3e:	69bb      	ldr	r3, [r7, #24]
 8008e40:	f003 0310 	and.w	r3, r3, #16
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d075      	beq.n	8008f34 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2210      	movs	r2, #16
 8008e4e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008e50:	e056      	b.n	8008f00 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e58:	d052      	beq.n	8008f00 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008e5a:	f7fd ff95 	bl	8006d88 <HAL_GetTick>
 8008e5e:	4602      	mov	r2, r0
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	1ad3      	subs	r3, r2, r3
 8008e64:	68ba      	ldr	r2, [r7, #8]
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d302      	bcc.n	8008e70 <I2C_IsErrorOccurred+0x54>
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d147      	bne.n	8008f00 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e7a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008e82:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	699b      	ldr	r3, [r3, #24]
 8008e8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e92:	d12e      	bne.n	8008ef2 <I2C_IsErrorOccurred+0xd6>
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e9a:	d02a      	beq.n	8008ef2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8008e9c:	7cfb      	ldrb	r3, [r7, #19]
 8008e9e:	2b20      	cmp	r3, #32
 8008ea0:	d027      	beq.n	8008ef2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	685a      	ldr	r2, [r3, #4]
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008eb0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008eb2:	f7fd ff69 	bl	8006d88 <HAL_GetTick>
 8008eb6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008eb8:	e01b      	b.n	8008ef2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008eba:	f7fd ff65 	bl	8006d88 <HAL_GetTick>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	69fb      	ldr	r3, [r7, #28]
 8008ec2:	1ad3      	subs	r3, r2, r3
 8008ec4:	2b19      	cmp	r3, #25
 8008ec6:	d914      	bls.n	8008ef2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ecc:	f043 0220 	orr.w	r2, r3, #32
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2220      	movs	r2, #32
 8008ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8008eec:	2301      	movs	r3, #1
 8008eee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	699b      	ldr	r3, [r3, #24]
 8008ef8:	f003 0320 	and.w	r3, r3, #32
 8008efc:	2b20      	cmp	r3, #32
 8008efe:	d1dc      	bne.n	8008eba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	699b      	ldr	r3, [r3, #24]
 8008f06:	f003 0320 	and.w	r3, r3, #32
 8008f0a:	2b20      	cmp	r3, #32
 8008f0c:	d003      	beq.n	8008f16 <I2C_IsErrorOccurred+0xfa>
 8008f0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d09d      	beq.n	8008e52 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008f16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d103      	bne.n	8008f26 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2220      	movs	r2, #32
 8008f24:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008f26:	6a3b      	ldr	r3, [r7, #32]
 8008f28:	f043 0304 	orr.w	r3, r3, #4
 8008f2c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	699b      	ldr	r3, [r3, #24]
 8008f3a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008f3c:	69bb      	ldr	r3, [r7, #24]
 8008f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d00b      	beq.n	8008f5e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008f46:	6a3b      	ldr	r3, [r7, #32]
 8008f48:	f043 0301 	orr.w	r3, r3, #1
 8008f4c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f56:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d00b      	beq.n	8008f80 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008f68:	6a3b      	ldr	r3, [r7, #32]
 8008f6a:	f043 0308 	orr.w	r3, r3, #8
 8008f6e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008f78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008f80:	69bb      	ldr	r3, [r7, #24]
 8008f82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d00b      	beq.n	8008fa2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008f8a:	6a3b      	ldr	r3, [r7, #32]
 8008f8c:	f043 0302 	orr.w	r3, r3, #2
 8008f90:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f9a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008fa2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d01c      	beq.n	8008fe4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008faa:	68f8      	ldr	r0, [r7, #12]
 8008fac:	f7ff fe37 	bl	8008c1e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	6859      	ldr	r1, [r3, #4]
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	4b0d      	ldr	r3, [pc, #52]	; (8008ff0 <I2C_IsErrorOccurred+0x1d4>)
 8008fbc:	400b      	ands	r3, r1
 8008fbe:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008fc4:	6a3b      	ldr	r3, [r7, #32]
 8008fc6:	431a      	orrs	r2, r3
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2220      	movs	r2, #32
 8008fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008fe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3728      	adds	r7, #40	; 0x28
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}
 8008ff0:	fe00e800 	.word	0xfe00e800

08008ff4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b087      	sub	sp, #28
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	607b      	str	r3, [r7, #4]
 8008ffe:	460b      	mov	r3, r1
 8009000:	817b      	strh	r3, [r7, #10]
 8009002:	4613      	mov	r3, r2
 8009004:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009006:	897b      	ldrh	r3, [r7, #10]
 8009008:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800900c:	7a7b      	ldrb	r3, [r7, #9]
 800900e:	041b      	lsls	r3, r3, #16
 8009010:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009014:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800901a:	6a3b      	ldr	r3, [r7, #32]
 800901c:	4313      	orrs	r3, r2
 800901e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009022:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	685a      	ldr	r2, [r3, #4]
 800902a:	6a3b      	ldr	r3, [r7, #32]
 800902c:	0d5b      	lsrs	r3, r3, #21
 800902e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009032:	4b08      	ldr	r3, [pc, #32]	; (8009054 <I2C_TransferConfig+0x60>)
 8009034:	430b      	orrs	r3, r1
 8009036:	43db      	mvns	r3, r3
 8009038:	ea02 0103 	and.w	r1, r2, r3
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	697a      	ldr	r2, [r7, #20]
 8009042:	430a      	orrs	r2, r1
 8009044:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009046:	bf00      	nop
 8009048:	371c      	adds	r7, #28
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr
 8009052:	bf00      	nop
 8009054:	03ff63ff 	.word	0x03ff63ff

08009058 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009058:	b480      	push	{r7}
 800905a:	b085      	sub	sp, #20
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	460b      	mov	r3, r1
 8009062:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009064:	2300      	movs	r3, #0
 8009066:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009068:	887b      	ldrh	r3, [r7, #2]
 800906a:	f003 0301 	and.w	r3, r3, #1
 800906e:	2b00      	cmp	r3, #0
 8009070:	d00f      	beq.n	8009092 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8009078:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009080:	b2db      	uxtb	r3, r3
 8009082:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009086:	2b28      	cmp	r3, #40	; 0x28
 8009088:	d003      	beq.n	8009092 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8009090:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009092:	887b      	ldrh	r3, [r7, #2]
 8009094:	f003 0302 	and.w	r3, r3, #2
 8009098:	2b00      	cmp	r3, #0
 800909a:	d00f      	beq.n	80090bc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80090a2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80090b0:	2b28      	cmp	r3, #40	; 0x28
 80090b2:	d003      	beq.n	80090bc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80090ba:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80090bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	da03      	bge.n	80090cc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80090ca:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80090cc:	887b      	ldrh	r3, [r7, #2]
 80090ce:	2b10      	cmp	r3, #16
 80090d0:	d103      	bne.n	80090da <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80090d8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80090da:	887b      	ldrh	r3, [r7, #2]
 80090dc:	2b20      	cmp	r3, #32
 80090de:	d103      	bne.n	80090e8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f043 0320 	orr.w	r3, r3, #32
 80090e6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80090e8:	887b      	ldrh	r3, [r7, #2]
 80090ea:	2b40      	cmp	r3, #64	; 0x40
 80090ec:	d103      	bne.n	80090f6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090f4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	6819      	ldr	r1, [r3, #0]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	43da      	mvns	r2, r3
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	400a      	ands	r2, r1
 8009106:	601a      	str	r2, [r3, #0]
}
 8009108:	bf00      	nop
 800910a:	3714      	adds	r7, #20
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr

08009114 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009114:	b480      	push	{r7}
 8009116:	b083      	sub	sp, #12
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009124:	b2db      	uxtb	r3, r3
 8009126:	2b20      	cmp	r3, #32
 8009128:	d138      	bne.n	800919c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009130:	2b01      	cmp	r3, #1
 8009132:	d101      	bne.n	8009138 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009134:	2302      	movs	r3, #2
 8009136:	e032      	b.n	800919e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2201      	movs	r2, #1
 800913c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2224      	movs	r2, #36	; 0x24
 8009144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	681a      	ldr	r2, [r3, #0]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f022 0201 	bic.w	r2, r2, #1
 8009156:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009166:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	6819      	ldr	r1, [r3, #0]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	683a      	ldr	r2, [r7, #0]
 8009174:	430a      	orrs	r2, r1
 8009176:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	681a      	ldr	r2, [r3, #0]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f042 0201 	orr.w	r2, r2, #1
 8009186:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2220      	movs	r2, #32
 800918c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2200      	movs	r2, #0
 8009194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009198:	2300      	movs	r3, #0
 800919a:	e000      	b.n	800919e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800919c:	2302      	movs	r3, #2
  }
}
 800919e:	4618      	mov	r0, r3
 80091a0:	370c      	adds	r7, #12
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr

080091aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80091aa:	b480      	push	{r7}
 80091ac:	b085      	sub	sp, #20
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
 80091b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091ba:	b2db      	uxtb	r3, r3
 80091bc:	2b20      	cmp	r3, #32
 80091be:	d139      	bne.n	8009234 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	d101      	bne.n	80091ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80091ca:	2302      	movs	r3, #2
 80091cc:	e033      	b.n	8009236 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2201      	movs	r2, #1
 80091d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2224      	movs	r2, #36	; 0x24
 80091da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f022 0201 	bic.w	r2, r2, #1
 80091ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80091fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	021b      	lsls	r3, r3, #8
 8009202:	68fa      	ldr	r2, [r7, #12]
 8009204:	4313      	orrs	r3, r2
 8009206:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	68fa      	ldr	r2, [r7, #12]
 800920e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	681a      	ldr	r2, [r3, #0]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f042 0201 	orr.w	r2, r2, #1
 800921e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2220      	movs	r2, #32
 8009224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009230:	2300      	movs	r3, #0
 8009232:	e000      	b.n	8009236 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009234:	2302      	movs	r3, #2
  }
}
 8009236:	4618      	mov	r0, r3
 8009238:	3714      	adds	r7, #20
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr
	...

08009244 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009244:	b480      	push	{r7}
 8009246:	b085      	sub	sp, #20
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800924c:	4b0b      	ldr	r3, [pc, #44]	; (800927c <HAL_I2CEx_EnableFastModePlus+0x38>)
 800924e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009250:	4a0a      	ldr	r2, [pc, #40]	; (800927c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8009252:	f043 0301 	orr.w	r3, r3, #1
 8009256:	6613      	str	r3, [r2, #96]	; 0x60
 8009258:	4b08      	ldr	r3, [pc, #32]	; (800927c <HAL_I2CEx_EnableFastModePlus+0x38>)
 800925a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800925c:	f003 0301 	and.w	r3, r3, #1
 8009260:	60fb      	str	r3, [r7, #12]
 8009262:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8009264:	4b06      	ldr	r3, [pc, #24]	; (8009280 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8009266:	685a      	ldr	r2, [r3, #4]
 8009268:	4905      	ldr	r1, [pc, #20]	; (8009280 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	4313      	orrs	r3, r2
 800926e:	604b      	str	r3, [r1, #4]
}
 8009270:	bf00      	nop
 8009272:	3714      	adds	r7, #20
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr
 800927c:	40021000 	.word	0x40021000
 8009280:	40010000 	.word	0x40010000

08009284 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009284:	b480      	push	{r7}
 8009286:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8009288:	4b04      	ldr	r3, [pc, #16]	; (800929c <HAL_PWREx_GetVoltageRange+0x18>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8009290:	4618      	mov	r0, r3
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr
 800929a:	bf00      	nop
 800929c:	40007000 	.word	0x40007000

080092a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b085      	sub	sp, #20
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092ae:	d130      	bne.n	8009312 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80092b0:	4b23      	ldr	r3, [pc, #140]	; (8009340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80092b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092bc:	d038      	beq.n	8009330 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80092be:	4b20      	ldr	r3, [pc, #128]	; (8009340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80092c6:	4a1e      	ldr	r2, [pc, #120]	; (8009340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80092c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80092cc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80092ce:	4b1d      	ldr	r3, [pc, #116]	; (8009344 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	2232      	movs	r2, #50	; 0x32
 80092d4:	fb02 f303 	mul.w	r3, r2, r3
 80092d8:	4a1b      	ldr	r2, [pc, #108]	; (8009348 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80092da:	fba2 2303 	umull	r2, r3, r2, r3
 80092de:	0c9b      	lsrs	r3, r3, #18
 80092e0:	3301      	adds	r3, #1
 80092e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80092e4:	e002      	b.n	80092ec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	3b01      	subs	r3, #1
 80092ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80092ec:	4b14      	ldr	r3, [pc, #80]	; (8009340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80092ee:	695b      	ldr	r3, [r3, #20]
 80092f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092f8:	d102      	bne.n	8009300 <HAL_PWREx_ControlVoltageScaling+0x60>
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d1f2      	bne.n	80092e6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009300:	4b0f      	ldr	r3, [pc, #60]	; (8009340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009302:	695b      	ldr	r3, [r3, #20]
 8009304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009308:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800930c:	d110      	bne.n	8009330 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800930e:	2303      	movs	r3, #3
 8009310:	e00f      	b.n	8009332 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8009312:	4b0b      	ldr	r3, [pc, #44]	; (8009340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800931a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800931e:	d007      	beq.n	8009330 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009320:	4b07      	ldr	r3, [pc, #28]	; (8009340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009328:	4a05      	ldr	r2, [pc, #20]	; (8009340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800932a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800932e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8009330:	2300      	movs	r3, #0
}
 8009332:	4618      	mov	r0, r3
 8009334:	3714      	adds	r7, #20
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr
 800933e:	bf00      	nop
 8009340:	40007000 	.word	0x40007000
 8009344:	20000204 	.word	0x20000204
 8009348:	431bde83 	.word	0x431bde83

0800934c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b088      	sub	sp, #32
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d101      	bne.n	800935e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800935a:	2301      	movs	r3, #1
 800935c:	e3ca      	b.n	8009af4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800935e:	4b97      	ldr	r3, [pc, #604]	; (80095bc <HAL_RCC_OscConfig+0x270>)
 8009360:	689b      	ldr	r3, [r3, #8]
 8009362:	f003 030c 	and.w	r3, r3, #12
 8009366:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009368:	4b94      	ldr	r3, [pc, #592]	; (80095bc <HAL_RCC_OscConfig+0x270>)
 800936a:	68db      	ldr	r3, [r3, #12]
 800936c:	f003 0303 	and.w	r3, r3, #3
 8009370:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f003 0310 	and.w	r3, r3, #16
 800937a:	2b00      	cmp	r3, #0
 800937c:	f000 80e4 	beq.w	8009548 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009380:	69bb      	ldr	r3, [r7, #24]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d007      	beq.n	8009396 <HAL_RCC_OscConfig+0x4a>
 8009386:	69bb      	ldr	r3, [r7, #24]
 8009388:	2b0c      	cmp	r3, #12
 800938a:	f040 808b 	bne.w	80094a4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	2b01      	cmp	r3, #1
 8009392:	f040 8087 	bne.w	80094a4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009396:	4b89      	ldr	r3, [pc, #548]	; (80095bc <HAL_RCC_OscConfig+0x270>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f003 0302 	and.w	r3, r3, #2
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d005      	beq.n	80093ae <HAL_RCC_OscConfig+0x62>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	699b      	ldr	r3, [r3, #24]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d101      	bne.n	80093ae <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80093aa:	2301      	movs	r3, #1
 80093ac:	e3a2      	b.n	8009af4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6a1a      	ldr	r2, [r3, #32]
 80093b2:	4b82      	ldr	r3, [pc, #520]	; (80095bc <HAL_RCC_OscConfig+0x270>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f003 0308 	and.w	r3, r3, #8
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d004      	beq.n	80093c8 <HAL_RCC_OscConfig+0x7c>
 80093be:	4b7f      	ldr	r3, [pc, #508]	; (80095bc <HAL_RCC_OscConfig+0x270>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093c6:	e005      	b.n	80093d4 <HAL_RCC_OscConfig+0x88>
 80093c8:	4b7c      	ldr	r3, [pc, #496]	; (80095bc <HAL_RCC_OscConfig+0x270>)
 80093ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80093ce:	091b      	lsrs	r3, r3, #4
 80093d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d223      	bcs.n	8009420 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6a1b      	ldr	r3, [r3, #32]
 80093dc:	4618      	mov	r0, r3
 80093de:	f000 fd55 	bl	8009e8c <RCC_SetFlashLatencyFromMSIRange>
 80093e2:	4603      	mov	r3, r0
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d001      	beq.n	80093ec <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80093e8:	2301      	movs	r3, #1
 80093ea:	e383      	b.n	8009af4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80093ec:	4b73      	ldr	r3, [pc, #460]	; (80095bc <HAL_RCC_OscConfig+0x270>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a72      	ldr	r2, [pc, #456]	; (80095bc <HAL_RCC_OscConfig+0x270>)
 80093f2:	f043 0308 	orr.w	r3, r3, #8
 80093f6:	6013      	str	r3, [r2, #0]
 80093f8:	4b70      	ldr	r3, [pc, #448]	; (80095bc <HAL_RCC_OscConfig+0x270>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6a1b      	ldr	r3, [r3, #32]
 8009404:	496d      	ldr	r1, [pc, #436]	; (80095bc <HAL_RCC_OscConfig+0x270>)
 8009406:	4313      	orrs	r3, r2
 8009408:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800940a:	4b6c      	ldr	r3, [pc, #432]	; (80095bc <HAL_RCC_OscConfig+0x270>)
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	69db      	ldr	r3, [r3, #28]
 8009416:	021b      	lsls	r3, r3, #8
 8009418:	4968      	ldr	r1, [pc, #416]	; (80095bc <HAL_RCC_OscConfig+0x270>)
 800941a:	4313      	orrs	r3, r2
 800941c:	604b      	str	r3, [r1, #4]
 800941e:	e025      	b.n	800946c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009420:	4b66      	ldr	r3, [pc, #408]	; (80095bc <HAL_RCC_OscConfig+0x270>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a65      	ldr	r2, [pc, #404]	; (80095bc <HAL_RCC_OscConfig+0x270>)
 8009426:	f043 0308 	orr.w	r3, r3, #8
 800942a:	6013      	str	r3, [r2, #0]
 800942c:	4b63      	ldr	r3, [pc, #396]	; (80095bc <HAL_RCC_OscConfig+0x270>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6a1b      	ldr	r3, [r3, #32]
 8009438:	4960      	ldr	r1, [pc, #384]	; (80095bc <HAL_RCC_OscConfig+0x270>)
 800943a:	4313      	orrs	r3, r2
 800943c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800943e:	4b5f      	ldr	r3, [pc, #380]	; (80095bc <HAL_RCC_OscConfig+0x270>)
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	69db      	ldr	r3, [r3, #28]
 800944a:	021b      	lsls	r3, r3, #8
 800944c:	495b      	ldr	r1, [pc, #364]	; (80095bc <HAL_RCC_OscConfig+0x270>)
 800944e:	4313      	orrs	r3, r2
 8009450:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009452:	69bb      	ldr	r3, [r7, #24]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d109      	bne.n	800946c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6a1b      	ldr	r3, [r3, #32]
 800945c:	4618      	mov	r0, r3
 800945e:	f000 fd15 	bl	8009e8c <RCC_SetFlashLatencyFromMSIRange>
 8009462:	4603      	mov	r3, r0
 8009464:	2b00      	cmp	r3, #0
 8009466:	d001      	beq.n	800946c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8009468:	2301      	movs	r3, #1
 800946a:	e343      	b.n	8009af4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800946c:	f000 fc4a 	bl	8009d04 <HAL_RCC_GetSysClockFreq>
 8009470:	4602      	mov	r2, r0
 8009472:	4b52      	ldr	r3, [pc, #328]	; (80095bc <HAL_RCC_OscConfig+0x270>)
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	091b      	lsrs	r3, r3, #4
 8009478:	f003 030f 	and.w	r3, r3, #15
 800947c:	4950      	ldr	r1, [pc, #320]	; (80095c0 <HAL_RCC_OscConfig+0x274>)
 800947e:	5ccb      	ldrb	r3, [r1, r3]
 8009480:	f003 031f 	and.w	r3, r3, #31
 8009484:	fa22 f303 	lsr.w	r3, r2, r3
 8009488:	4a4e      	ldr	r2, [pc, #312]	; (80095c4 <HAL_RCC_OscConfig+0x278>)
 800948a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800948c:	4b4e      	ldr	r3, [pc, #312]	; (80095c8 <HAL_RCC_OscConfig+0x27c>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4618      	mov	r0, r3
 8009492:	f7fd fc29 	bl	8006ce8 <HAL_InitTick>
 8009496:	4603      	mov	r3, r0
 8009498:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800949a:	7bfb      	ldrb	r3, [r7, #15]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d052      	beq.n	8009546 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80094a0:	7bfb      	ldrb	r3, [r7, #15]
 80094a2:	e327      	b.n	8009af4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	699b      	ldr	r3, [r3, #24]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d032      	beq.n	8009512 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80094ac:	4b43      	ldr	r3, [pc, #268]	; (80095bc <HAL_RCC_OscConfig+0x270>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a42      	ldr	r2, [pc, #264]	; (80095bc <HAL_RCC_OscConfig+0x270>)
 80094b2:	f043 0301 	orr.w	r3, r3, #1
 80094b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80094b8:	f7fd fc66 	bl	8006d88 <HAL_GetTick>
 80094bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80094be:	e008      	b.n	80094d2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80094c0:	f7fd fc62 	bl	8006d88 <HAL_GetTick>
 80094c4:	4602      	mov	r2, r0
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	1ad3      	subs	r3, r2, r3
 80094ca:	2b02      	cmp	r3, #2
 80094cc:	d901      	bls.n	80094d2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80094ce:	2303      	movs	r3, #3
 80094d0:	e310      	b.n	8009af4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80094d2:	4b3a      	ldr	r3, [pc, #232]	; (80095bc <HAL_RCC_OscConfig+0x270>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f003 0302 	and.w	r3, r3, #2
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d0f0      	beq.n	80094c0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80094de:	4b37      	ldr	r3, [pc, #220]	; (80095bc <HAL_RCC_OscConfig+0x270>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4a36      	ldr	r2, [pc, #216]	; (80095bc <HAL_RCC_OscConfig+0x270>)
 80094e4:	f043 0308 	orr.w	r3, r3, #8
 80094e8:	6013      	str	r3, [r2, #0]
 80094ea:	4b34      	ldr	r3, [pc, #208]	; (80095bc <HAL_RCC_OscConfig+0x270>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6a1b      	ldr	r3, [r3, #32]
 80094f6:	4931      	ldr	r1, [pc, #196]	; (80095bc <HAL_RCC_OscConfig+0x270>)
 80094f8:	4313      	orrs	r3, r2
 80094fa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80094fc:	4b2f      	ldr	r3, [pc, #188]	; (80095bc <HAL_RCC_OscConfig+0x270>)
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	69db      	ldr	r3, [r3, #28]
 8009508:	021b      	lsls	r3, r3, #8
 800950a:	492c      	ldr	r1, [pc, #176]	; (80095bc <HAL_RCC_OscConfig+0x270>)
 800950c:	4313      	orrs	r3, r2
 800950e:	604b      	str	r3, [r1, #4]
 8009510:	e01a      	b.n	8009548 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009512:	4b2a      	ldr	r3, [pc, #168]	; (80095bc <HAL_RCC_OscConfig+0x270>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a29      	ldr	r2, [pc, #164]	; (80095bc <HAL_RCC_OscConfig+0x270>)
 8009518:	f023 0301 	bic.w	r3, r3, #1
 800951c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800951e:	f7fd fc33 	bl	8006d88 <HAL_GetTick>
 8009522:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009524:	e008      	b.n	8009538 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009526:	f7fd fc2f 	bl	8006d88 <HAL_GetTick>
 800952a:	4602      	mov	r2, r0
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	1ad3      	subs	r3, r2, r3
 8009530:	2b02      	cmp	r3, #2
 8009532:	d901      	bls.n	8009538 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8009534:	2303      	movs	r3, #3
 8009536:	e2dd      	b.n	8009af4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009538:	4b20      	ldr	r3, [pc, #128]	; (80095bc <HAL_RCC_OscConfig+0x270>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f003 0302 	and.w	r3, r3, #2
 8009540:	2b00      	cmp	r3, #0
 8009542:	d1f0      	bne.n	8009526 <HAL_RCC_OscConfig+0x1da>
 8009544:	e000      	b.n	8009548 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009546:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f003 0301 	and.w	r3, r3, #1
 8009550:	2b00      	cmp	r3, #0
 8009552:	d074      	beq.n	800963e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8009554:	69bb      	ldr	r3, [r7, #24]
 8009556:	2b08      	cmp	r3, #8
 8009558:	d005      	beq.n	8009566 <HAL_RCC_OscConfig+0x21a>
 800955a:	69bb      	ldr	r3, [r7, #24]
 800955c:	2b0c      	cmp	r3, #12
 800955e:	d10e      	bne.n	800957e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	2b03      	cmp	r3, #3
 8009564:	d10b      	bne.n	800957e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009566:	4b15      	ldr	r3, [pc, #84]	; (80095bc <HAL_RCC_OscConfig+0x270>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800956e:	2b00      	cmp	r3, #0
 8009570:	d064      	beq.n	800963c <HAL_RCC_OscConfig+0x2f0>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d160      	bne.n	800963c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800957a:	2301      	movs	r3, #1
 800957c:	e2ba      	b.n	8009af4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009586:	d106      	bne.n	8009596 <HAL_RCC_OscConfig+0x24a>
 8009588:	4b0c      	ldr	r3, [pc, #48]	; (80095bc <HAL_RCC_OscConfig+0x270>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a0b      	ldr	r2, [pc, #44]	; (80095bc <HAL_RCC_OscConfig+0x270>)
 800958e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009592:	6013      	str	r3, [r2, #0]
 8009594:	e026      	b.n	80095e4 <HAL_RCC_OscConfig+0x298>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800959e:	d115      	bne.n	80095cc <HAL_RCC_OscConfig+0x280>
 80095a0:	4b06      	ldr	r3, [pc, #24]	; (80095bc <HAL_RCC_OscConfig+0x270>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a05      	ldr	r2, [pc, #20]	; (80095bc <HAL_RCC_OscConfig+0x270>)
 80095a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80095aa:	6013      	str	r3, [r2, #0]
 80095ac:	4b03      	ldr	r3, [pc, #12]	; (80095bc <HAL_RCC_OscConfig+0x270>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a02      	ldr	r2, [pc, #8]	; (80095bc <HAL_RCC_OscConfig+0x270>)
 80095b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095b6:	6013      	str	r3, [r2, #0]
 80095b8:	e014      	b.n	80095e4 <HAL_RCC_OscConfig+0x298>
 80095ba:	bf00      	nop
 80095bc:	40021000 	.word	0x40021000
 80095c0:	080147d8 	.word	0x080147d8
 80095c4:	20000204 	.word	0x20000204
 80095c8:	20000234 	.word	0x20000234
 80095cc:	4ba0      	ldr	r3, [pc, #640]	; (8009850 <HAL_RCC_OscConfig+0x504>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a9f      	ldr	r2, [pc, #636]	; (8009850 <HAL_RCC_OscConfig+0x504>)
 80095d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095d6:	6013      	str	r3, [r2, #0]
 80095d8:	4b9d      	ldr	r3, [pc, #628]	; (8009850 <HAL_RCC_OscConfig+0x504>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4a9c      	ldr	r2, [pc, #624]	; (8009850 <HAL_RCC_OscConfig+0x504>)
 80095de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80095e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d013      	beq.n	8009614 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095ec:	f7fd fbcc 	bl	8006d88 <HAL_GetTick>
 80095f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80095f2:	e008      	b.n	8009606 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80095f4:	f7fd fbc8 	bl	8006d88 <HAL_GetTick>
 80095f8:	4602      	mov	r2, r0
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	1ad3      	subs	r3, r2, r3
 80095fe:	2b64      	cmp	r3, #100	; 0x64
 8009600:	d901      	bls.n	8009606 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8009602:	2303      	movs	r3, #3
 8009604:	e276      	b.n	8009af4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009606:	4b92      	ldr	r3, [pc, #584]	; (8009850 <HAL_RCC_OscConfig+0x504>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800960e:	2b00      	cmp	r3, #0
 8009610:	d0f0      	beq.n	80095f4 <HAL_RCC_OscConfig+0x2a8>
 8009612:	e014      	b.n	800963e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009614:	f7fd fbb8 	bl	8006d88 <HAL_GetTick>
 8009618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800961a:	e008      	b.n	800962e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800961c:	f7fd fbb4 	bl	8006d88 <HAL_GetTick>
 8009620:	4602      	mov	r2, r0
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	1ad3      	subs	r3, r2, r3
 8009626:	2b64      	cmp	r3, #100	; 0x64
 8009628:	d901      	bls.n	800962e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800962a:	2303      	movs	r3, #3
 800962c:	e262      	b.n	8009af4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800962e:	4b88      	ldr	r3, [pc, #544]	; (8009850 <HAL_RCC_OscConfig+0x504>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009636:	2b00      	cmp	r3, #0
 8009638:	d1f0      	bne.n	800961c <HAL_RCC_OscConfig+0x2d0>
 800963a:	e000      	b.n	800963e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800963c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f003 0302 	and.w	r3, r3, #2
 8009646:	2b00      	cmp	r3, #0
 8009648:	d060      	beq.n	800970c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800964a:	69bb      	ldr	r3, [r7, #24]
 800964c:	2b04      	cmp	r3, #4
 800964e:	d005      	beq.n	800965c <HAL_RCC_OscConfig+0x310>
 8009650:	69bb      	ldr	r3, [r7, #24]
 8009652:	2b0c      	cmp	r3, #12
 8009654:	d119      	bne.n	800968a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	2b02      	cmp	r3, #2
 800965a:	d116      	bne.n	800968a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800965c:	4b7c      	ldr	r3, [pc, #496]	; (8009850 <HAL_RCC_OscConfig+0x504>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009664:	2b00      	cmp	r3, #0
 8009666:	d005      	beq.n	8009674 <HAL_RCC_OscConfig+0x328>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	68db      	ldr	r3, [r3, #12]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d101      	bne.n	8009674 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8009670:	2301      	movs	r3, #1
 8009672:	e23f      	b.n	8009af4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009674:	4b76      	ldr	r3, [pc, #472]	; (8009850 <HAL_RCC_OscConfig+0x504>)
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	691b      	ldr	r3, [r3, #16]
 8009680:	061b      	lsls	r3, r3, #24
 8009682:	4973      	ldr	r1, [pc, #460]	; (8009850 <HAL_RCC_OscConfig+0x504>)
 8009684:	4313      	orrs	r3, r2
 8009686:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009688:	e040      	b.n	800970c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	68db      	ldr	r3, [r3, #12]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d023      	beq.n	80096da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009692:	4b6f      	ldr	r3, [pc, #444]	; (8009850 <HAL_RCC_OscConfig+0x504>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a6e      	ldr	r2, [pc, #440]	; (8009850 <HAL_RCC_OscConfig+0x504>)
 8009698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800969c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800969e:	f7fd fb73 	bl	8006d88 <HAL_GetTick>
 80096a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80096a4:	e008      	b.n	80096b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80096a6:	f7fd fb6f 	bl	8006d88 <HAL_GetTick>
 80096aa:	4602      	mov	r2, r0
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	1ad3      	subs	r3, r2, r3
 80096b0:	2b02      	cmp	r3, #2
 80096b2:	d901      	bls.n	80096b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80096b4:	2303      	movs	r3, #3
 80096b6:	e21d      	b.n	8009af4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80096b8:	4b65      	ldr	r3, [pc, #404]	; (8009850 <HAL_RCC_OscConfig+0x504>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d0f0      	beq.n	80096a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80096c4:	4b62      	ldr	r3, [pc, #392]	; (8009850 <HAL_RCC_OscConfig+0x504>)
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	691b      	ldr	r3, [r3, #16]
 80096d0:	061b      	lsls	r3, r3, #24
 80096d2:	495f      	ldr	r1, [pc, #380]	; (8009850 <HAL_RCC_OscConfig+0x504>)
 80096d4:	4313      	orrs	r3, r2
 80096d6:	604b      	str	r3, [r1, #4]
 80096d8:	e018      	b.n	800970c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80096da:	4b5d      	ldr	r3, [pc, #372]	; (8009850 <HAL_RCC_OscConfig+0x504>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4a5c      	ldr	r2, [pc, #368]	; (8009850 <HAL_RCC_OscConfig+0x504>)
 80096e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096e6:	f7fd fb4f 	bl	8006d88 <HAL_GetTick>
 80096ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80096ec:	e008      	b.n	8009700 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80096ee:	f7fd fb4b 	bl	8006d88 <HAL_GetTick>
 80096f2:	4602      	mov	r2, r0
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	1ad3      	subs	r3, r2, r3
 80096f8:	2b02      	cmp	r3, #2
 80096fa:	d901      	bls.n	8009700 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80096fc:	2303      	movs	r3, #3
 80096fe:	e1f9      	b.n	8009af4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009700:	4b53      	ldr	r3, [pc, #332]	; (8009850 <HAL_RCC_OscConfig+0x504>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009708:	2b00      	cmp	r3, #0
 800970a:	d1f0      	bne.n	80096ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f003 0308 	and.w	r3, r3, #8
 8009714:	2b00      	cmp	r3, #0
 8009716:	d03c      	beq.n	8009792 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	695b      	ldr	r3, [r3, #20]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d01c      	beq.n	800975a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009720:	4b4b      	ldr	r3, [pc, #300]	; (8009850 <HAL_RCC_OscConfig+0x504>)
 8009722:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009726:	4a4a      	ldr	r2, [pc, #296]	; (8009850 <HAL_RCC_OscConfig+0x504>)
 8009728:	f043 0301 	orr.w	r3, r3, #1
 800972c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009730:	f7fd fb2a 	bl	8006d88 <HAL_GetTick>
 8009734:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009736:	e008      	b.n	800974a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009738:	f7fd fb26 	bl	8006d88 <HAL_GetTick>
 800973c:	4602      	mov	r2, r0
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	1ad3      	subs	r3, r2, r3
 8009742:	2b02      	cmp	r3, #2
 8009744:	d901      	bls.n	800974a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8009746:	2303      	movs	r3, #3
 8009748:	e1d4      	b.n	8009af4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800974a:	4b41      	ldr	r3, [pc, #260]	; (8009850 <HAL_RCC_OscConfig+0x504>)
 800974c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009750:	f003 0302 	and.w	r3, r3, #2
 8009754:	2b00      	cmp	r3, #0
 8009756:	d0ef      	beq.n	8009738 <HAL_RCC_OscConfig+0x3ec>
 8009758:	e01b      	b.n	8009792 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800975a:	4b3d      	ldr	r3, [pc, #244]	; (8009850 <HAL_RCC_OscConfig+0x504>)
 800975c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009760:	4a3b      	ldr	r2, [pc, #236]	; (8009850 <HAL_RCC_OscConfig+0x504>)
 8009762:	f023 0301 	bic.w	r3, r3, #1
 8009766:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800976a:	f7fd fb0d 	bl	8006d88 <HAL_GetTick>
 800976e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009770:	e008      	b.n	8009784 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009772:	f7fd fb09 	bl	8006d88 <HAL_GetTick>
 8009776:	4602      	mov	r2, r0
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	1ad3      	subs	r3, r2, r3
 800977c:	2b02      	cmp	r3, #2
 800977e:	d901      	bls.n	8009784 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8009780:	2303      	movs	r3, #3
 8009782:	e1b7      	b.n	8009af4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009784:	4b32      	ldr	r3, [pc, #200]	; (8009850 <HAL_RCC_OscConfig+0x504>)
 8009786:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800978a:	f003 0302 	and.w	r3, r3, #2
 800978e:	2b00      	cmp	r3, #0
 8009790:	d1ef      	bne.n	8009772 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f003 0304 	and.w	r3, r3, #4
 800979a:	2b00      	cmp	r3, #0
 800979c:	f000 80a6 	beq.w	80098ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80097a0:	2300      	movs	r3, #0
 80097a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80097a4:	4b2a      	ldr	r3, [pc, #168]	; (8009850 <HAL_RCC_OscConfig+0x504>)
 80097a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d10d      	bne.n	80097cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80097b0:	4b27      	ldr	r3, [pc, #156]	; (8009850 <HAL_RCC_OscConfig+0x504>)
 80097b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097b4:	4a26      	ldr	r2, [pc, #152]	; (8009850 <HAL_RCC_OscConfig+0x504>)
 80097b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097ba:	6593      	str	r3, [r2, #88]	; 0x58
 80097bc:	4b24      	ldr	r3, [pc, #144]	; (8009850 <HAL_RCC_OscConfig+0x504>)
 80097be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097c4:	60bb      	str	r3, [r7, #8]
 80097c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80097c8:	2301      	movs	r3, #1
 80097ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80097cc:	4b21      	ldr	r3, [pc, #132]	; (8009854 <HAL_RCC_OscConfig+0x508>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d118      	bne.n	800980a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80097d8:	4b1e      	ldr	r3, [pc, #120]	; (8009854 <HAL_RCC_OscConfig+0x508>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4a1d      	ldr	r2, [pc, #116]	; (8009854 <HAL_RCC_OscConfig+0x508>)
 80097de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80097e4:	f7fd fad0 	bl	8006d88 <HAL_GetTick>
 80097e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80097ea:	e008      	b.n	80097fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80097ec:	f7fd facc 	bl	8006d88 <HAL_GetTick>
 80097f0:	4602      	mov	r2, r0
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	1ad3      	subs	r3, r2, r3
 80097f6:	2b02      	cmp	r3, #2
 80097f8:	d901      	bls.n	80097fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80097fa:	2303      	movs	r3, #3
 80097fc:	e17a      	b.n	8009af4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80097fe:	4b15      	ldr	r3, [pc, #84]	; (8009854 <HAL_RCC_OscConfig+0x508>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009806:	2b00      	cmp	r3, #0
 8009808:	d0f0      	beq.n	80097ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	689b      	ldr	r3, [r3, #8]
 800980e:	2b01      	cmp	r3, #1
 8009810:	d108      	bne.n	8009824 <HAL_RCC_OscConfig+0x4d8>
 8009812:	4b0f      	ldr	r3, [pc, #60]	; (8009850 <HAL_RCC_OscConfig+0x504>)
 8009814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009818:	4a0d      	ldr	r2, [pc, #52]	; (8009850 <HAL_RCC_OscConfig+0x504>)
 800981a:	f043 0301 	orr.w	r3, r3, #1
 800981e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009822:	e029      	b.n	8009878 <HAL_RCC_OscConfig+0x52c>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	689b      	ldr	r3, [r3, #8]
 8009828:	2b05      	cmp	r3, #5
 800982a:	d115      	bne.n	8009858 <HAL_RCC_OscConfig+0x50c>
 800982c:	4b08      	ldr	r3, [pc, #32]	; (8009850 <HAL_RCC_OscConfig+0x504>)
 800982e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009832:	4a07      	ldr	r2, [pc, #28]	; (8009850 <HAL_RCC_OscConfig+0x504>)
 8009834:	f043 0304 	orr.w	r3, r3, #4
 8009838:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800983c:	4b04      	ldr	r3, [pc, #16]	; (8009850 <HAL_RCC_OscConfig+0x504>)
 800983e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009842:	4a03      	ldr	r2, [pc, #12]	; (8009850 <HAL_RCC_OscConfig+0x504>)
 8009844:	f043 0301 	orr.w	r3, r3, #1
 8009848:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800984c:	e014      	b.n	8009878 <HAL_RCC_OscConfig+0x52c>
 800984e:	bf00      	nop
 8009850:	40021000 	.word	0x40021000
 8009854:	40007000 	.word	0x40007000
 8009858:	4b9c      	ldr	r3, [pc, #624]	; (8009acc <HAL_RCC_OscConfig+0x780>)
 800985a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800985e:	4a9b      	ldr	r2, [pc, #620]	; (8009acc <HAL_RCC_OscConfig+0x780>)
 8009860:	f023 0301 	bic.w	r3, r3, #1
 8009864:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009868:	4b98      	ldr	r3, [pc, #608]	; (8009acc <HAL_RCC_OscConfig+0x780>)
 800986a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800986e:	4a97      	ldr	r2, [pc, #604]	; (8009acc <HAL_RCC_OscConfig+0x780>)
 8009870:	f023 0304 	bic.w	r3, r3, #4
 8009874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	689b      	ldr	r3, [r3, #8]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d016      	beq.n	80098ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009880:	f7fd fa82 	bl	8006d88 <HAL_GetTick>
 8009884:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009886:	e00a      	b.n	800989e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009888:	f7fd fa7e 	bl	8006d88 <HAL_GetTick>
 800988c:	4602      	mov	r2, r0
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	1ad3      	subs	r3, r2, r3
 8009892:	f241 3288 	movw	r2, #5000	; 0x1388
 8009896:	4293      	cmp	r3, r2
 8009898:	d901      	bls.n	800989e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800989a:	2303      	movs	r3, #3
 800989c:	e12a      	b.n	8009af4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800989e:	4b8b      	ldr	r3, [pc, #556]	; (8009acc <HAL_RCC_OscConfig+0x780>)
 80098a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098a4:	f003 0302 	and.w	r3, r3, #2
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d0ed      	beq.n	8009888 <HAL_RCC_OscConfig+0x53c>
 80098ac:	e015      	b.n	80098da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098ae:	f7fd fa6b 	bl	8006d88 <HAL_GetTick>
 80098b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80098b4:	e00a      	b.n	80098cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80098b6:	f7fd fa67 	bl	8006d88 <HAL_GetTick>
 80098ba:	4602      	mov	r2, r0
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	1ad3      	subs	r3, r2, r3
 80098c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d901      	bls.n	80098cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80098c8:	2303      	movs	r3, #3
 80098ca:	e113      	b.n	8009af4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80098cc:	4b7f      	ldr	r3, [pc, #508]	; (8009acc <HAL_RCC_OscConfig+0x780>)
 80098ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098d2:	f003 0302 	and.w	r3, r3, #2
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d1ed      	bne.n	80098b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80098da:	7ffb      	ldrb	r3, [r7, #31]
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d105      	bne.n	80098ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80098e0:	4b7a      	ldr	r3, [pc, #488]	; (8009acc <HAL_RCC_OscConfig+0x780>)
 80098e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098e4:	4a79      	ldr	r2, [pc, #484]	; (8009acc <HAL_RCC_OscConfig+0x780>)
 80098e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80098ea:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	f000 80fe 	beq.w	8009af2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098fa:	2b02      	cmp	r3, #2
 80098fc:	f040 80d0 	bne.w	8009aa0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8009900:	4b72      	ldr	r3, [pc, #456]	; (8009acc <HAL_RCC_OscConfig+0x780>)
 8009902:	68db      	ldr	r3, [r3, #12]
 8009904:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	f003 0203 	and.w	r2, r3, #3
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009910:	429a      	cmp	r2, r3
 8009912:	d130      	bne.n	8009976 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800991e:	3b01      	subs	r3, #1
 8009920:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009922:	429a      	cmp	r2, r3
 8009924:	d127      	bne.n	8009976 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009930:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009932:	429a      	cmp	r2, r3
 8009934:	d11f      	bne.n	8009976 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009940:	2a07      	cmp	r2, #7
 8009942:	bf14      	ite	ne
 8009944:	2201      	movne	r2, #1
 8009946:	2200      	moveq	r2, #0
 8009948:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800994a:	4293      	cmp	r3, r2
 800994c:	d113      	bne.n	8009976 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009958:	085b      	lsrs	r3, r3, #1
 800995a:	3b01      	subs	r3, #1
 800995c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800995e:	429a      	cmp	r2, r3
 8009960:	d109      	bne.n	8009976 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800996c:	085b      	lsrs	r3, r3, #1
 800996e:	3b01      	subs	r3, #1
 8009970:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009972:	429a      	cmp	r2, r3
 8009974:	d06e      	beq.n	8009a54 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009976:	69bb      	ldr	r3, [r7, #24]
 8009978:	2b0c      	cmp	r3, #12
 800997a:	d069      	beq.n	8009a50 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800997c:	4b53      	ldr	r3, [pc, #332]	; (8009acc <HAL_RCC_OscConfig+0x780>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009984:	2b00      	cmp	r3, #0
 8009986:	d105      	bne.n	8009994 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8009988:	4b50      	ldr	r3, [pc, #320]	; (8009acc <HAL_RCC_OscConfig+0x780>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009990:	2b00      	cmp	r3, #0
 8009992:	d001      	beq.n	8009998 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8009994:	2301      	movs	r3, #1
 8009996:	e0ad      	b.n	8009af4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8009998:	4b4c      	ldr	r3, [pc, #304]	; (8009acc <HAL_RCC_OscConfig+0x780>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4a4b      	ldr	r2, [pc, #300]	; (8009acc <HAL_RCC_OscConfig+0x780>)
 800999e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80099a2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80099a4:	f7fd f9f0 	bl	8006d88 <HAL_GetTick>
 80099a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80099aa:	e008      	b.n	80099be <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80099ac:	f7fd f9ec 	bl	8006d88 <HAL_GetTick>
 80099b0:	4602      	mov	r2, r0
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	1ad3      	subs	r3, r2, r3
 80099b6:	2b02      	cmp	r3, #2
 80099b8:	d901      	bls.n	80099be <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80099ba:	2303      	movs	r3, #3
 80099bc:	e09a      	b.n	8009af4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80099be:	4b43      	ldr	r3, [pc, #268]	; (8009acc <HAL_RCC_OscConfig+0x780>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d1f0      	bne.n	80099ac <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80099ca:	4b40      	ldr	r3, [pc, #256]	; (8009acc <HAL_RCC_OscConfig+0x780>)
 80099cc:	68da      	ldr	r2, [r3, #12]
 80099ce:	4b40      	ldr	r3, [pc, #256]	; (8009ad0 <HAL_RCC_OscConfig+0x784>)
 80099d0:	4013      	ands	r3, r2
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80099da:	3a01      	subs	r2, #1
 80099dc:	0112      	lsls	r2, r2, #4
 80099de:	4311      	orrs	r1, r2
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80099e4:	0212      	lsls	r2, r2, #8
 80099e6:	4311      	orrs	r1, r2
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80099ec:	0852      	lsrs	r2, r2, #1
 80099ee:	3a01      	subs	r2, #1
 80099f0:	0552      	lsls	r2, r2, #21
 80099f2:	4311      	orrs	r1, r2
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80099f8:	0852      	lsrs	r2, r2, #1
 80099fa:	3a01      	subs	r2, #1
 80099fc:	0652      	lsls	r2, r2, #25
 80099fe:	4311      	orrs	r1, r2
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009a04:	0912      	lsrs	r2, r2, #4
 8009a06:	0452      	lsls	r2, r2, #17
 8009a08:	430a      	orrs	r2, r1
 8009a0a:	4930      	ldr	r1, [pc, #192]	; (8009acc <HAL_RCC_OscConfig+0x780>)
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8009a10:	4b2e      	ldr	r3, [pc, #184]	; (8009acc <HAL_RCC_OscConfig+0x780>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a2d      	ldr	r2, [pc, #180]	; (8009acc <HAL_RCC_OscConfig+0x780>)
 8009a16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009a1a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009a1c:	4b2b      	ldr	r3, [pc, #172]	; (8009acc <HAL_RCC_OscConfig+0x780>)
 8009a1e:	68db      	ldr	r3, [r3, #12]
 8009a20:	4a2a      	ldr	r2, [pc, #168]	; (8009acc <HAL_RCC_OscConfig+0x780>)
 8009a22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009a26:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009a28:	f7fd f9ae 	bl	8006d88 <HAL_GetTick>
 8009a2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009a2e:	e008      	b.n	8009a42 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009a30:	f7fd f9aa 	bl	8006d88 <HAL_GetTick>
 8009a34:	4602      	mov	r2, r0
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	1ad3      	subs	r3, r2, r3
 8009a3a:	2b02      	cmp	r3, #2
 8009a3c:	d901      	bls.n	8009a42 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8009a3e:	2303      	movs	r3, #3
 8009a40:	e058      	b.n	8009af4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009a42:	4b22      	ldr	r3, [pc, #136]	; (8009acc <HAL_RCC_OscConfig+0x780>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d0f0      	beq.n	8009a30 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009a4e:	e050      	b.n	8009af2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8009a50:	2301      	movs	r3, #1
 8009a52:	e04f      	b.n	8009af4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009a54:	4b1d      	ldr	r3, [pc, #116]	; (8009acc <HAL_RCC_OscConfig+0x780>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d148      	bne.n	8009af2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009a60:	4b1a      	ldr	r3, [pc, #104]	; (8009acc <HAL_RCC_OscConfig+0x780>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a19      	ldr	r2, [pc, #100]	; (8009acc <HAL_RCC_OscConfig+0x780>)
 8009a66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009a6a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009a6c:	4b17      	ldr	r3, [pc, #92]	; (8009acc <HAL_RCC_OscConfig+0x780>)
 8009a6e:	68db      	ldr	r3, [r3, #12]
 8009a70:	4a16      	ldr	r2, [pc, #88]	; (8009acc <HAL_RCC_OscConfig+0x780>)
 8009a72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009a76:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009a78:	f7fd f986 	bl	8006d88 <HAL_GetTick>
 8009a7c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009a7e:	e008      	b.n	8009a92 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009a80:	f7fd f982 	bl	8006d88 <HAL_GetTick>
 8009a84:	4602      	mov	r2, r0
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	1ad3      	subs	r3, r2, r3
 8009a8a:	2b02      	cmp	r3, #2
 8009a8c:	d901      	bls.n	8009a92 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8009a8e:	2303      	movs	r3, #3
 8009a90:	e030      	b.n	8009af4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009a92:	4b0e      	ldr	r3, [pc, #56]	; (8009acc <HAL_RCC_OscConfig+0x780>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d0f0      	beq.n	8009a80 <HAL_RCC_OscConfig+0x734>
 8009a9e:	e028      	b.n	8009af2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009aa0:	69bb      	ldr	r3, [r7, #24]
 8009aa2:	2b0c      	cmp	r3, #12
 8009aa4:	d023      	beq.n	8009aee <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009aa6:	4b09      	ldr	r3, [pc, #36]	; (8009acc <HAL_RCC_OscConfig+0x780>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4a08      	ldr	r2, [pc, #32]	; (8009acc <HAL_RCC_OscConfig+0x780>)
 8009aac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009ab0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ab2:	f7fd f969 	bl	8006d88 <HAL_GetTick>
 8009ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009ab8:	e00c      	b.n	8009ad4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009aba:	f7fd f965 	bl	8006d88 <HAL_GetTick>
 8009abe:	4602      	mov	r2, r0
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	1ad3      	subs	r3, r2, r3
 8009ac4:	2b02      	cmp	r3, #2
 8009ac6:	d905      	bls.n	8009ad4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8009ac8:	2303      	movs	r3, #3
 8009aca:	e013      	b.n	8009af4 <HAL_RCC_OscConfig+0x7a8>
 8009acc:	40021000 	.word	0x40021000
 8009ad0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009ad4:	4b09      	ldr	r3, [pc, #36]	; (8009afc <HAL_RCC_OscConfig+0x7b0>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d1ec      	bne.n	8009aba <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8009ae0:	4b06      	ldr	r3, [pc, #24]	; (8009afc <HAL_RCC_OscConfig+0x7b0>)
 8009ae2:	68da      	ldr	r2, [r3, #12]
 8009ae4:	4905      	ldr	r1, [pc, #20]	; (8009afc <HAL_RCC_OscConfig+0x7b0>)
 8009ae6:	4b06      	ldr	r3, [pc, #24]	; (8009b00 <HAL_RCC_OscConfig+0x7b4>)
 8009ae8:	4013      	ands	r3, r2
 8009aea:	60cb      	str	r3, [r1, #12]
 8009aec:	e001      	b.n	8009af2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8009aee:	2301      	movs	r3, #1
 8009af0:	e000      	b.n	8009af4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8009af2:	2300      	movs	r3, #0
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3720      	adds	r7, #32
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}
 8009afc:	40021000 	.word	0x40021000
 8009b00:	feeefffc 	.word	0xfeeefffc

08009b04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b084      	sub	sp, #16
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d101      	bne.n	8009b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009b14:	2301      	movs	r3, #1
 8009b16:	e0e7      	b.n	8009ce8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009b18:	4b75      	ldr	r3, [pc, #468]	; (8009cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f003 0307 	and.w	r3, r3, #7
 8009b20:	683a      	ldr	r2, [r7, #0]
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d910      	bls.n	8009b48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b26:	4b72      	ldr	r3, [pc, #456]	; (8009cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f023 0207 	bic.w	r2, r3, #7
 8009b2e:	4970      	ldr	r1, [pc, #448]	; (8009cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	4313      	orrs	r3, r2
 8009b34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b36:	4b6e      	ldr	r3, [pc, #440]	; (8009cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f003 0307 	and.w	r3, r3, #7
 8009b3e:	683a      	ldr	r2, [r7, #0]
 8009b40:	429a      	cmp	r2, r3
 8009b42:	d001      	beq.n	8009b48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009b44:	2301      	movs	r3, #1
 8009b46:	e0cf      	b.n	8009ce8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f003 0302 	and.w	r3, r3, #2
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d010      	beq.n	8009b76 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	689a      	ldr	r2, [r3, #8]
 8009b58:	4b66      	ldr	r3, [pc, #408]	; (8009cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d908      	bls.n	8009b76 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009b64:	4b63      	ldr	r3, [pc, #396]	; (8009cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8009b66:	689b      	ldr	r3, [r3, #8]
 8009b68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	689b      	ldr	r3, [r3, #8]
 8009b70:	4960      	ldr	r1, [pc, #384]	; (8009cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8009b72:	4313      	orrs	r3, r2
 8009b74:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f003 0301 	and.w	r3, r3, #1
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d04c      	beq.n	8009c1c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	2b03      	cmp	r3, #3
 8009b88:	d107      	bne.n	8009b9a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009b8a:	4b5a      	ldr	r3, [pc, #360]	; (8009cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d121      	bne.n	8009bda <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8009b96:	2301      	movs	r3, #1
 8009b98:	e0a6      	b.n	8009ce8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	2b02      	cmp	r3, #2
 8009ba0:	d107      	bne.n	8009bb2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009ba2:	4b54      	ldr	r3, [pc, #336]	; (8009cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d115      	bne.n	8009bda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	e09a      	b.n	8009ce8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d107      	bne.n	8009bca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009bba:	4b4e      	ldr	r3, [pc, #312]	; (8009cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f003 0302 	and.w	r3, r3, #2
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d109      	bne.n	8009bda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e08e      	b.n	8009ce8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009bca:	4b4a      	ldr	r3, [pc, #296]	; (8009cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d101      	bne.n	8009bda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	e086      	b.n	8009ce8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009bda:	4b46      	ldr	r3, [pc, #280]	; (8009cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	f023 0203 	bic.w	r2, r3, #3
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	4943      	ldr	r1, [pc, #268]	; (8009cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8009be8:	4313      	orrs	r3, r2
 8009bea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009bec:	f7fd f8cc 	bl	8006d88 <HAL_GetTick>
 8009bf0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009bf2:	e00a      	b.n	8009c0a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009bf4:	f7fd f8c8 	bl	8006d88 <HAL_GetTick>
 8009bf8:	4602      	mov	r2, r0
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	1ad3      	subs	r3, r2, r3
 8009bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d901      	bls.n	8009c0a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8009c06:	2303      	movs	r3, #3
 8009c08:	e06e      	b.n	8009ce8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c0a:	4b3a      	ldr	r3, [pc, #232]	; (8009cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8009c0c:	689b      	ldr	r3, [r3, #8]
 8009c0e:	f003 020c 	and.w	r2, r3, #12
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	009b      	lsls	r3, r3, #2
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d1eb      	bne.n	8009bf4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f003 0302 	and.w	r3, r3, #2
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d010      	beq.n	8009c4a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	689a      	ldr	r2, [r3, #8]
 8009c2c:	4b31      	ldr	r3, [pc, #196]	; (8009cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8009c2e:	689b      	ldr	r3, [r3, #8]
 8009c30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d208      	bcs.n	8009c4a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009c38:	4b2e      	ldr	r3, [pc, #184]	; (8009cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8009c3a:	689b      	ldr	r3, [r3, #8]
 8009c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	492b      	ldr	r1, [pc, #172]	; (8009cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8009c46:	4313      	orrs	r3, r2
 8009c48:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009c4a:	4b29      	ldr	r3, [pc, #164]	; (8009cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f003 0307 	and.w	r3, r3, #7
 8009c52:	683a      	ldr	r2, [r7, #0]
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d210      	bcs.n	8009c7a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c58:	4b25      	ldr	r3, [pc, #148]	; (8009cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f023 0207 	bic.w	r2, r3, #7
 8009c60:	4923      	ldr	r1, [pc, #140]	; (8009cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	4313      	orrs	r3, r2
 8009c66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c68:	4b21      	ldr	r3, [pc, #132]	; (8009cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f003 0307 	and.w	r3, r3, #7
 8009c70:	683a      	ldr	r2, [r7, #0]
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d001      	beq.n	8009c7a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8009c76:	2301      	movs	r3, #1
 8009c78:	e036      	b.n	8009ce8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f003 0304 	and.w	r3, r3, #4
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d008      	beq.n	8009c98 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009c86:	4b1b      	ldr	r3, [pc, #108]	; (8009cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8009c88:	689b      	ldr	r3, [r3, #8]
 8009c8a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	68db      	ldr	r3, [r3, #12]
 8009c92:	4918      	ldr	r1, [pc, #96]	; (8009cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8009c94:	4313      	orrs	r3, r2
 8009c96:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f003 0308 	and.w	r3, r3, #8
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d009      	beq.n	8009cb8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009ca4:	4b13      	ldr	r3, [pc, #76]	; (8009cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8009ca6:	689b      	ldr	r3, [r3, #8]
 8009ca8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	691b      	ldr	r3, [r3, #16]
 8009cb0:	00db      	lsls	r3, r3, #3
 8009cb2:	4910      	ldr	r1, [pc, #64]	; (8009cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009cb8:	f000 f824 	bl	8009d04 <HAL_RCC_GetSysClockFreq>
 8009cbc:	4602      	mov	r2, r0
 8009cbe:	4b0d      	ldr	r3, [pc, #52]	; (8009cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8009cc0:	689b      	ldr	r3, [r3, #8]
 8009cc2:	091b      	lsrs	r3, r3, #4
 8009cc4:	f003 030f 	and.w	r3, r3, #15
 8009cc8:	490b      	ldr	r1, [pc, #44]	; (8009cf8 <HAL_RCC_ClockConfig+0x1f4>)
 8009cca:	5ccb      	ldrb	r3, [r1, r3]
 8009ccc:	f003 031f 	and.w	r3, r3, #31
 8009cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8009cd4:	4a09      	ldr	r2, [pc, #36]	; (8009cfc <HAL_RCC_ClockConfig+0x1f8>)
 8009cd6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009cd8:	4b09      	ldr	r3, [pc, #36]	; (8009d00 <HAL_RCC_ClockConfig+0x1fc>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f7fd f803 	bl	8006ce8 <HAL_InitTick>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	72fb      	strb	r3, [r7, #11]

  return status;
 8009ce6:	7afb      	ldrb	r3, [r7, #11]
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3710      	adds	r7, #16
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}
 8009cf0:	40022000 	.word	0x40022000
 8009cf4:	40021000 	.word	0x40021000
 8009cf8:	080147d8 	.word	0x080147d8
 8009cfc:	20000204 	.word	0x20000204
 8009d00:	20000234 	.word	0x20000234

08009d04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b089      	sub	sp, #36	; 0x24
 8009d08:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	61fb      	str	r3, [r7, #28]
 8009d0e:	2300      	movs	r3, #0
 8009d10:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009d12:	4b3e      	ldr	r3, [pc, #248]	; (8009e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8009d14:	689b      	ldr	r3, [r3, #8]
 8009d16:	f003 030c 	and.w	r3, r3, #12
 8009d1a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009d1c:	4b3b      	ldr	r3, [pc, #236]	; (8009e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8009d1e:	68db      	ldr	r3, [r3, #12]
 8009d20:	f003 0303 	and.w	r3, r3, #3
 8009d24:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d005      	beq.n	8009d38 <HAL_RCC_GetSysClockFreq+0x34>
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	2b0c      	cmp	r3, #12
 8009d30:	d121      	bne.n	8009d76 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d11e      	bne.n	8009d76 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009d38:	4b34      	ldr	r3, [pc, #208]	; (8009e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f003 0308 	and.w	r3, r3, #8
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d107      	bne.n	8009d54 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009d44:	4b31      	ldr	r3, [pc, #196]	; (8009e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8009d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d4a:	0a1b      	lsrs	r3, r3, #8
 8009d4c:	f003 030f 	and.w	r3, r3, #15
 8009d50:	61fb      	str	r3, [r7, #28]
 8009d52:	e005      	b.n	8009d60 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009d54:	4b2d      	ldr	r3, [pc, #180]	; (8009e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	091b      	lsrs	r3, r3, #4
 8009d5a:	f003 030f 	and.w	r3, r3, #15
 8009d5e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009d60:	4a2b      	ldr	r2, [pc, #172]	; (8009e10 <HAL_RCC_GetSysClockFreq+0x10c>)
 8009d62:	69fb      	ldr	r3, [r7, #28]
 8009d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d68:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d10d      	bne.n	8009d8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009d70:	69fb      	ldr	r3, [r7, #28]
 8009d72:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009d74:	e00a      	b.n	8009d8c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	2b04      	cmp	r3, #4
 8009d7a:	d102      	bne.n	8009d82 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009d7c:	4b25      	ldr	r3, [pc, #148]	; (8009e14 <HAL_RCC_GetSysClockFreq+0x110>)
 8009d7e:	61bb      	str	r3, [r7, #24]
 8009d80:	e004      	b.n	8009d8c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	2b08      	cmp	r3, #8
 8009d86:	d101      	bne.n	8009d8c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009d88:	4b23      	ldr	r3, [pc, #140]	; (8009e18 <HAL_RCC_GetSysClockFreq+0x114>)
 8009d8a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	2b0c      	cmp	r3, #12
 8009d90:	d134      	bne.n	8009dfc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009d92:	4b1e      	ldr	r3, [pc, #120]	; (8009e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8009d94:	68db      	ldr	r3, [r3, #12]
 8009d96:	f003 0303 	and.w	r3, r3, #3
 8009d9a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	2b02      	cmp	r3, #2
 8009da0:	d003      	beq.n	8009daa <HAL_RCC_GetSysClockFreq+0xa6>
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	2b03      	cmp	r3, #3
 8009da6:	d003      	beq.n	8009db0 <HAL_RCC_GetSysClockFreq+0xac>
 8009da8:	e005      	b.n	8009db6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8009daa:	4b1a      	ldr	r3, [pc, #104]	; (8009e14 <HAL_RCC_GetSysClockFreq+0x110>)
 8009dac:	617b      	str	r3, [r7, #20]
      break;
 8009dae:	e005      	b.n	8009dbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8009db0:	4b19      	ldr	r3, [pc, #100]	; (8009e18 <HAL_RCC_GetSysClockFreq+0x114>)
 8009db2:	617b      	str	r3, [r7, #20]
      break;
 8009db4:	e002      	b.n	8009dbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8009db6:	69fb      	ldr	r3, [r7, #28]
 8009db8:	617b      	str	r3, [r7, #20]
      break;
 8009dba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009dbc:	4b13      	ldr	r3, [pc, #76]	; (8009e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8009dbe:	68db      	ldr	r3, [r3, #12]
 8009dc0:	091b      	lsrs	r3, r3, #4
 8009dc2:	f003 0307 	and.w	r3, r3, #7
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009dca:	4b10      	ldr	r3, [pc, #64]	; (8009e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8009dcc:	68db      	ldr	r3, [r3, #12]
 8009dce:	0a1b      	lsrs	r3, r3, #8
 8009dd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dd4:	697a      	ldr	r2, [r7, #20]
 8009dd6:	fb03 f202 	mul.w	r2, r3, r2
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009de0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009de2:	4b0a      	ldr	r3, [pc, #40]	; (8009e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8009de4:	68db      	ldr	r3, [r3, #12]
 8009de6:	0e5b      	lsrs	r3, r3, #25
 8009de8:	f003 0303 	and.w	r3, r3, #3
 8009dec:	3301      	adds	r3, #1
 8009dee:	005b      	lsls	r3, r3, #1
 8009df0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8009df2:	697a      	ldr	r2, [r7, #20]
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dfa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8009dfc:	69bb      	ldr	r3, [r7, #24]
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3724      	adds	r7, #36	; 0x24
 8009e02:	46bd      	mov	sp, r7
 8009e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e08:	4770      	bx	lr
 8009e0a:	bf00      	nop
 8009e0c:	40021000 	.word	0x40021000
 8009e10:	080147f0 	.word	0x080147f0
 8009e14:	00f42400 	.word	0x00f42400
 8009e18:	007a1200 	.word	0x007a1200

08009e1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009e20:	4b03      	ldr	r3, [pc, #12]	; (8009e30 <HAL_RCC_GetHCLKFreq+0x14>)
 8009e22:	681b      	ldr	r3, [r3, #0]
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	46bd      	mov	sp, r7
 8009e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2c:	4770      	bx	lr
 8009e2e:	bf00      	nop
 8009e30:	20000204 	.word	0x20000204

08009e34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009e38:	f7ff fff0 	bl	8009e1c <HAL_RCC_GetHCLKFreq>
 8009e3c:	4602      	mov	r2, r0
 8009e3e:	4b06      	ldr	r3, [pc, #24]	; (8009e58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009e40:	689b      	ldr	r3, [r3, #8]
 8009e42:	0a1b      	lsrs	r3, r3, #8
 8009e44:	f003 0307 	and.w	r3, r3, #7
 8009e48:	4904      	ldr	r1, [pc, #16]	; (8009e5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8009e4a:	5ccb      	ldrb	r3, [r1, r3]
 8009e4c:	f003 031f 	and.w	r3, r3, #31
 8009e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	bd80      	pop	{r7, pc}
 8009e58:	40021000 	.word	0x40021000
 8009e5c:	080147e8 	.word	0x080147e8

08009e60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009e64:	f7ff ffda 	bl	8009e1c <HAL_RCC_GetHCLKFreq>
 8009e68:	4602      	mov	r2, r0
 8009e6a:	4b06      	ldr	r3, [pc, #24]	; (8009e84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009e6c:	689b      	ldr	r3, [r3, #8]
 8009e6e:	0adb      	lsrs	r3, r3, #11
 8009e70:	f003 0307 	and.w	r3, r3, #7
 8009e74:	4904      	ldr	r1, [pc, #16]	; (8009e88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009e76:	5ccb      	ldrb	r3, [r1, r3]
 8009e78:	f003 031f 	and.w	r3, r3, #31
 8009e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	bd80      	pop	{r7, pc}
 8009e84:	40021000 	.word	0x40021000
 8009e88:	080147e8 	.word	0x080147e8

08009e8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b086      	sub	sp, #24
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009e94:	2300      	movs	r3, #0
 8009e96:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009e98:	4b2a      	ldr	r3, [pc, #168]	; (8009f44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d003      	beq.n	8009eac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009ea4:	f7ff f9ee 	bl	8009284 <HAL_PWREx_GetVoltageRange>
 8009ea8:	6178      	str	r0, [r7, #20]
 8009eaa:	e014      	b.n	8009ed6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009eac:	4b25      	ldr	r3, [pc, #148]	; (8009f44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009eb0:	4a24      	ldr	r2, [pc, #144]	; (8009f44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009eb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009eb6:	6593      	str	r3, [r2, #88]	; 0x58
 8009eb8:	4b22      	ldr	r3, [pc, #136]	; (8009f44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ec0:	60fb      	str	r3, [r7, #12]
 8009ec2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009ec4:	f7ff f9de 	bl	8009284 <HAL_PWREx_GetVoltageRange>
 8009ec8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009eca:	4b1e      	ldr	r3, [pc, #120]	; (8009f44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ece:	4a1d      	ldr	r2, [pc, #116]	; (8009f44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009ed0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ed4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009edc:	d10b      	bne.n	8009ef6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2b80      	cmp	r3, #128	; 0x80
 8009ee2:	d919      	bls.n	8009f18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2ba0      	cmp	r3, #160	; 0xa0
 8009ee8:	d902      	bls.n	8009ef0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009eea:	2302      	movs	r3, #2
 8009eec:	613b      	str	r3, [r7, #16]
 8009eee:	e013      	b.n	8009f18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	613b      	str	r3, [r7, #16]
 8009ef4:	e010      	b.n	8009f18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2b80      	cmp	r3, #128	; 0x80
 8009efa:	d902      	bls.n	8009f02 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8009efc:	2303      	movs	r3, #3
 8009efe:	613b      	str	r3, [r7, #16]
 8009f00:	e00a      	b.n	8009f18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2b80      	cmp	r3, #128	; 0x80
 8009f06:	d102      	bne.n	8009f0e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009f08:	2302      	movs	r3, #2
 8009f0a:	613b      	str	r3, [r7, #16]
 8009f0c:	e004      	b.n	8009f18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2b70      	cmp	r3, #112	; 0x70
 8009f12:	d101      	bne.n	8009f18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009f14:	2301      	movs	r3, #1
 8009f16:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009f18:	4b0b      	ldr	r3, [pc, #44]	; (8009f48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f023 0207 	bic.w	r2, r3, #7
 8009f20:	4909      	ldr	r1, [pc, #36]	; (8009f48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	4313      	orrs	r3, r2
 8009f26:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009f28:	4b07      	ldr	r3, [pc, #28]	; (8009f48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f003 0307 	and.w	r3, r3, #7
 8009f30:	693a      	ldr	r2, [r7, #16]
 8009f32:	429a      	cmp	r2, r3
 8009f34:	d001      	beq.n	8009f3a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8009f36:	2301      	movs	r3, #1
 8009f38:	e000      	b.n	8009f3c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8009f3a:	2300      	movs	r3, #0
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3718      	adds	r7, #24
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}
 8009f44:	40021000 	.word	0x40021000
 8009f48:	40022000 	.word	0x40022000

08009f4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b086      	sub	sp, #24
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009f54:	2300      	movs	r3, #0
 8009f56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009f58:	2300      	movs	r3, #0
 8009f5a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d041      	beq.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f6c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009f70:	d02a      	beq.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009f72:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009f76:	d824      	bhi.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009f78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009f7c:	d008      	beq.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009f7e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009f82:	d81e      	bhi.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d00a      	beq.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009f88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009f8c:	d010      	beq.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009f8e:	e018      	b.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009f90:	4b86      	ldr	r3, [pc, #536]	; (800a1ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009f92:	68db      	ldr	r3, [r3, #12]
 8009f94:	4a85      	ldr	r2, [pc, #532]	; (800a1ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f9a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009f9c:	e015      	b.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	3304      	adds	r3, #4
 8009fa2:	2100      	movs	r1, #0
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f000 fabb 	bl	800a520 <RCCEx_PLLSAI1_Config>
 8009faa:	4603      	mov	r3, r0
 8009fac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009fae:	e00c      	b.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	3320      	adds	r3, #32
 8009fb4:	2100      	movs	r1, #0
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f000 fba6 	bl	800a708 <RCCEx_PLLSAI2_Config>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009fc0:	e003      	b.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	74fb      	strb	r3, [r7, #19]
      break;
 8009fc6:	e000      	b.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009fc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009fca:	7cfb      	ldrb	r3, [r7, #19]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d10b      	bne.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009fd0:	4b76      	ldr	r3, [pc, #472]	; (800a1ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fd6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fde:	4973      	ldr	r1, [pc, #460]	; (800a1ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8009fe6:	e001      	b.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fe8:	7cfb      	ldrb	r3, [r7, #19]
 8009fea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d041      	beq.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ffc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a000:	d02a      	beq.n	800a058 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800a002:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a006:	d824      	bhi.n	800a052 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800a008:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a00c:	d008      	beq.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800a00e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a012:	d81e      	bhi.n	800a052 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800a014:	2b00      	cmp	r3, #0
 800a016:	d00a      	beq.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800a018:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a01c:	d010      	beq.n	800a040 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800a01e:	e018      	b.n	800a052 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a020:	4b62      	ldr	r3, [pc, #392]	; (800a1ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a022:	68db      	ldr	r3, [r3, #12]
 800a024:	4a61      	ldr	r2, [pc, #388]	; (800a1ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a026:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a02a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a02c:	e015      	b.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	3304      	adds	r3, #4
 800a032:	2100      	movs	r1, #0
 800a034:	4618      	mov	r0, r3
 800a036:	f000 fa73 	bl	800a520 <RCCEx_PLLSAI1_Config>
 800a03a:	4603      	mov	r3, r0
 800a03c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a03e:	e00c      	b.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	3320      	adds	r3, #32
 800a044:	2100      	movs	r1, #0
 800a046:	4618      	mov	r0, r3
 800a048:	f000 fb5e 	bl	800a708 <RCCEx_PLLSAI2_Config>
 800a04c:	4603      	mov	r3, r0
 800a04e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a050:	e003      	b.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a052:	2301      	movs	r3, #1
 800a054:	74fb      	strb	r3, [r7, #19]
      break;
 800a056:	e000      	b.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800a058:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a05a:	7cfb      	ldrb	r3, [r7, #19]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d10b      	bne.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a060:	4b52      	ldr	r3, [pc, #328]	; (800a1ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a066:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a06e:	494f      	ldr	r1, [pc, #316]	; (800a1ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a070:	4313      	orrs	r3, r2
 800a072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800a076:	e001      	b.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a078:	7cfb      	ldrb	r3, [r7, #19]
 800a07a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a084:	2b00      	cmp	r3, #0
 800a086:	f000 80a0 	beq.w	800a1ca <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a08a:	2300      	movs	r3, #0
 800a08c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a08e:	4b47      	ldr	r3, [pc, #284]	; (800a1ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a096:	2b00      	cmp	r3, #0
 800a098:	d101      	bne.n	800a09e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800a09a:	2301      	movs	r3, #1
 800a09c:	e000      	b.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800a09e:	2300      	movs	r3, #0
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d00d      	beq.n	800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a0a4:	4b41      	ldr	r3, [pc, #260]	; (800a1ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a0a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0a8:	4a40      	ldr	r2, [pc, #256]	; (800a1ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a0aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0ae:	6593      	str	r3, [r2, #88]	; 0x58
 800a0b0:	4b3e      	ldr	r3, [pc, #248]	; (800a1ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a0b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0b8:	60bb      	str	r3, [r7, #8]
 800a0ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a0c0:	4b3b      	ldr	r3, [pc, #236]	; (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4a3a      	ldr	r2, [pc, #232]	; (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a0c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a0cc:	f7fc fe5c 	bl	8006d88 <HAL_GetTick>
 800a0d0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a0d2:	e009      	b.n	800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a0d4:	f7fc fe58 	bl	8006d88 <HAL_GetTick>
 800a0d8:	4602      	mov	r2, r0
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	1ad3      	subs	r3, r2, r3
 800a0de:	2b02      	cmp	r3, #2
 800a0e0:	d902      	bls.n	800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800a0e2:	2303      	movs	r3, #3
 800a0e4:	74fb      	strb	r3, [r7, #19]
        break;
 800a0e6:	e005      	b.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a0e8:	4b31      	ldr	r3, [pc, #196]	; (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d0ef      	beq.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800a0f4:	7cfb      	ldrb	r3, [r7, #19]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d15c      	bne.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a0fa:	4b2c      	ldr	r3, [pc, #176]	; (800a1ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a0fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a100:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a104:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d01f      	beq.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a112:	697a      	ldr	r2, [r7, #20]
 800a114:	429a      	cmp	r2, r3
 800a116:	d019      	beq.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a118:	4b24      	ldr	r3, [pc, #144]	; (800a1ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a11a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a11e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a122:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a124:	4b21      	ldr	r3, [pc, #132]	; (800a1ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a12a:	4a20      	ldr	r2, [pc, #128]	; (800a1ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a12c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a130:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a134:	4b1d      	ldr	r3, [pc, #116]	; (800a1ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a13a:	4a1c      	ldr	r2, [pc, #112]	; (800a1ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a13c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a140:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a144:	4a19      	ldr	r2, [pc, #100]	; (800a1ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a14c:	697b      	ldr	r3, [r7, #20]
 800a14e:	f003 0301 	and.w	r3, r3, #1
 800a152:	2b00      	cmp	r3, #0
 800a154:	d016      	beq.n	800a184 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a156:	f7fc fe17 	bl	8006d88 <HAL_GetTick>
 800a15a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a15c:	e00b      	b.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a15e:	f7fc fe13 	bl	8006d88 <HAL_GetTick>
 800a162:	4602      	mov	r2, r0
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	1ad3      	subs	r3, r2, r3
 800a168:	f241 3288 	movw	r2, #5000	; 0x1388
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d902      	bls.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800a170:	2303      	movs	r3, #3
 800a172:	74fb      	strb	r3, [r7, #19]
            break;
 800a174:	e006      	b.n	800a184 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a176:	4b0d      	ldr	r3, [pc, #52]	; (800a1ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a17c:	f003 0302 	and.w	r3, r3, #2
 800a180:	2b00      	cmp	r3, #0
 800a182:	d0ec      	beq.n	800a15e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800a184:	7cfb      	ldrb	r3, [r7, #19]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d10c      	bne.n	800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a18a:	4b08      	ldr	r3, [pc, #32]	; (800a1ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a18c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a190:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a19a:	4904      	ldr	r1, [pc, #16]	; (800a1ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a19c:	4313      	orrs	r3, r2
 800a19e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800a1a2:	e009      	b.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a1a4:	7cfb      	ldrb	r3, [r7, #19]
 800a1a6:	74bb      	strb	r3, [r7, #18]
 800a1a8:	e006      	b.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800a1aa:	bf00      	nop
 800a1ac:	40021000 	.word	0x40021000
 800a1b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1b4:	7cfb      	ldrb	r3, [r7, #19]
 800a1b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a1b8:	7c7b      	ldrb	r3, [r7, #17]
 800a1ba:	2b01      	cmp	r3, #1
 800a1bc:	d105      	bne.n	800a1ca <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a1be:	4b9e      	ldr	r3, [pc, #632]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a1c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1c2:	4a9d      	ldr	r2, [pc, #628]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a1c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a1c8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f003 0301 	and.w	r3, r3, #1
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d00a      	beq.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a1d6:	4b98      	ldr	r3, [pc, #608]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a1d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1dc:	f023 0203 	bic.w	r2, r3, #3
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1e4:	4994      	ldr	r1, [pc, #592]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f003 0302 	and.w	r3, r3, #2
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d00a      	beq.n	800a20e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a1f8:	4b8f      	ldr	r3, [pc, #572]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a1fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1fe:	f023 020c 	bic.w	r2, r3, #12
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a206:	498c      	ldr	r1, [pc, #560]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a208:	4313      	orrs	r3, r2
 800a20a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f003 0304 	and.w	r3, r3, #4
 800a216:	2b00      	cmp	r3, #0
 800a218:	d00a      	beq.n	800a230 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a21a:	4b87      	ldr	r3, [pc, #540]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a21c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a220:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a228:	4983      	ldr	r1, [pc, #524]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a22a:	4313      	orrs	r3, r2
 800a22c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f003 0308 	and.w	r3, r3, #8
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d00a      	beq.n	800a252 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a23c:	4b7e      	ldr	r3, [pc, #504]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a23e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a242:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a24a:	497b      	ldr	r1, [pc, #492]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a24c:	4313      	orrs	r3, r2
 800a24e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f003 0310 	and.w	r3, r3, #16
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d00a      	beq.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a25e:	4b76      	ldr	r3, [pc, #472]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a264:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a26c:	4972      	ldr	r1, [pc, #456]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a26e:	4313      	orrs	r3, r2
 800a270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f003 0320 	and.w	r3, r3, #32
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d00a      	beq.n	800a296 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a280:	4b6d      	ldr	r3, [pc, #436]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a286:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a28e:	496a      	ldr	r1, [pc, #424]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a290:	4313      	orrs	r3, r2
 800a292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d00a      	beq.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a2a2:	4b65      	ldr	r3, [pc, #404]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a2a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2b0:	4961      	ldr	r1, [pc, #388]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d00a      	beq.n	800a2da <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a2c4:	4b5c      	ldr	r3, [pc, #368]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a2c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2d2:	4959      	ldr	r1, [pc, #356]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a2d4:	4313      	orrs	r3, r2
 800a2d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d00a      	beq.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a2e6:	4b54      	ldr	r3, [pc, #336]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a2e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2ec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2f4:	4950      	ldr	r1, [pc, #320]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a304:	2b00      	cmp	r3, #0
 800a306:	d00a      	beq.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a308:	4b4b      	ldr	r3, [pc, #300]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a30a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a30e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a316:	4948      	ldr	r1, [pc, #288]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a318:	4313      	orrs	r3, r2
 800a31a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a326:	2b00      	cmp	r3, #0
 800a328:	d00a      	beq.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a32a:	4b43      	ldr	r3, [pc, #268]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a32c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a330:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a338:	493f      	ldr	r1, [pc, #252]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a33a:	4313      	orrs	r3, r2
 800a33c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d028      	beq.n	800a39e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a34c:	4b3a      	ldr	r3, [pc, #232]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a34e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a352:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a35a:	4937      	ldr	r1, [pc, #220]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a35c:	4313      	orrs	r3, r2
 800a35e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a366:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a36a:	d106      	bne.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a36c:	4b32      	ldr	r3, [pc, #200]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a36e:	68db      	ldr	r3, [r3, #12]
 800a370:	4a31      	ldr	r2, [pc, #196]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a372:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a376:	60d3      	str	r3, [r2, #12]
 800a378:	e011      	b.n	800a39e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a37e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a382:	d10c      	bne.n	800a39e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	3304      	adds	r3, #4
 800a388:	2101      	movs	r1, #1
 800a38a:	4618      	mov	r0, r3
 800a38c:	f000 f8c8 	bl	800a520 <RCCEx_PLLSAI1_Config>
 800a390:	4603      	mov	r3, r0
 800a392:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800a394:	7cfb      	ldrb	r3, [r7, #19]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d001      	beq.n	800a39e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800a39a:	7cfb      	ldrb	r3, [r7, #19]
 800a39c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d028      	beq.n	800a3fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a3aa:	4b23      	ldr	r3, [pc, #140]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a3ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3b0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3b8:	491f      	ldr	r1, [pc, #124]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a3c8:	d106      	bne.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a3ca:	4b1b      	ldr	r3, [pc, #108]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a3cc:	68db      	ldr	r3, [r3, #12]
 800a3ce:	4a1a      	ldr	r2, [pc, #104]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a3d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a3d4:	60d3      	str	r3, [r2, #12]
 800a3d6:	e011      	b.n	800a3fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a3e0:	d10c      	bne.n	800a3fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	3304      	adds	r3, #4
 800a3e6:	2101      	movs	r1, #1
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f000 f899 	bl	800a520 <RCCEx_PLLSAI1_Config>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a3f2:	7cfb      	ldrb	r3, [r7, #19]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d001      	beq.n	800a3fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800a3f8:	7cfb      	ldrb	r3, [r7, #19]
 800a3fa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a404:	2b00      	cmp	r3, #0
 800a406:	d02b      	beq.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a408:	4b0b      	ldr	r3, [pc, #44]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a40a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a40e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a416:	4908      	ldr	r1, [pc, #32]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a418:	4313      	orrs	r3, r2
 800a41a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a422:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a426:	d109      	bne.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a428:	4b03      	ldr	r3, [pc, #12]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a42a:	68db      	ldr	r3, [r3, #12]
 800a42c:	4a02      	ldr	r2, [pc, #8]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a42e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a432:	60d3      	str	r3, [r2, #12]
 800a434:	e014      	b.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800a436:	bf00      	nop
 800a438:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a440:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a444:	d10c      	bne.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	3304      	adds	r3, #4
 800a44a:	2101      	movs	r1, #1
 800a44c:	4618      	mov	r0, r3
 800a44e:	f000 f867 	bl	800a520 <RCCEx_PLLSAI1_Config>
 800a452:	4603      	mov	r3, r0
 800a454:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a456:	7cfb      	ldrb	r3, [r7, #19]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d001      	beq.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800a45c:	7cfb      	ldrb	r3, [r7, #19]
 800a45e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d02f      	beq.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a46c:	4b2b      	ldr	r3, [pc, #172]	; (800a51c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a46e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a472:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a47a:	4928      	ldr	r1, [pc, #160]	; (800a51c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a47c:	4313      	orrs	r3, r2
 800a47e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a486:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a48a:	d10d      	bne.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	3304      	adds	r3, #4
 800a490:	2102      	movs	r1, #2
 800a492:	4618      	mov	r0, r3
 800a494:	f000 f844 	bl	800a520 <RCCEx_PLLSAI1_Config>
 800a498:	4603      	mov	r3, r0
 800a49a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a49c:	7cfb      	ldrb	r3, [r7, #19]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d014      	beq.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800a4a2:	7cfb      	ldrb	r3, [r7, #19]
 800a4a4:	74bb      	strb	r3, [r7, #18]
 800a4a6:	e011      	b.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a4ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4b0:	d10c      	bne.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	3320      	adds	r3, #32
 800a4b6:	2102      	movs	r1, #2
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f000 f925 	bl	800a708 <RCCEx_PLLSAI2_Config>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a4c2:	7cfb      	ldrb	r3, [r7, #19]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d001      	beq.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800a4c8:	7cfb      	ldrb	r3, [r7, #19]
 800a4ca:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d00a      	beq.n	800a4ee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a4d8:	4b10      	ldr	r3, [pc, #64]	; (800a51c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a4da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4de:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4e6:	490d      	ldr	r1, [pc, #52]	; (800a51c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d00b      	beq.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a4fa:	4b08      	ldr	r3, [pc, #32]	; (800a51c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a4fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a500:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a50a:	4904      	ldr	r1, [pc, #16]	; (800a51c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a50c:	4313      	orrs	r3, r2
 800a50e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800a512:	7cbb      	ldrb	r3, [r7, #18]
}
 800a514:	4618      	mov	r0, r3
 800a516:	3718      	adds	r7, #24
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}
 800a51c:	40021000 	.word	0x40021000

0800a520 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b084      	sub	sp, #16
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a52a:	2300      	movs	r3, #0
 800a52c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a52e:	4b75      	ldr	r3, [pc, #468]	; (800a704 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a530:	68db      	ldr	r3, [r3, #12]
 800a532:	f003 0303 	and.w	r3, r3, #3
 800a536:	2b00      	cmp	r3, #0
 800a538:	d018      	beq.n	800a56c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a53a:	4b72      	ldr	r3, [pc, #456]	; (800a704 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a53c:	68db      	ldr	r3, [r3, #12]
 800a53e:	f003 0203 	and.w	r2, r3, #3
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	429a      	cmp	r2, r3
 800a548:	d10d      	bne.n	800a566 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
       ||
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d009      	beq.n	800a566 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800a552:	4b6c      	ldr	r3, [pc, #432]	; (800a704 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a554:	68db      	ldr	r3, [r3, #12]
 800a556:	091b      	lsrs	r3, r3, #4
 800a558:	f003 0307 	and.w	r3, r3, #7
 800a55c:	1c5a      	adds	r2, r3, #1
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	685b      	ldr	r3, [r3, #4]
       ||
 800a562:	429a      	cmp	r2, r3
 800a564:	d047      	beq.n	800a5f6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a566:	2301      	movs	r3, #1
 800a568:	73fb      	strb	r3, [r7, #15]
 800a56a:	e044      	b.n	800a5f6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	2b03      	cmp	r3, #3
 800a572:	d018      	beq.n	800a5a6 <RCCEx_PLLSAI1_Config+0x86>
 800a574:	2b03      	cmp	r3, #3
 800a576:	d825      	bhi.n	800a5c4 <RCCEx_PLLSAI1_Config+0xa4>
 800a578:	2b01      	cmp	r3, #1
 800a57a:	d002      	beq.n	800a582 <RCCEx_PLLSAI1_Config+0x62>
 800a57c:	2b02      	cmp	r3, #2
 800a57e:	d009      	beq.n	800a594 <RCCEx_PLLSAI1_Config+0x74>
 800a580:	e020      	b.n	800a5c4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a582:	4b60      	ldr	r3, [pc, #384]	; (800a704 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f003 0302 	and.w	r3, r3, #2
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d11d      	bne.n	800a5ca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800a58e:	2301      	movs	r3, #1
 800a590:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a592:	e01a      	b.n	800a5ca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a594:	4b5b      	ldr	r3, [pc, #364]	; (800a704 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d116      	bne.n	800a5ce <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a5a4:	e013      	b.n	800a5ce <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a5a6:	4b57      	ldr	r3, [pc, #348]	; (800a704 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d10f      	bne.n	800a5d2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a5b2:	4b54      	ldr	r3, [pc, #336]	; (800a704 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d109      	bne.n	800a5d2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a5c2:	e006      	b.n	800a5d2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	73fb      	strb	r3, [r7, #15]
      break;
 800a5c8:	e004      	b.n	800a5d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a5ca:	bf00      	nop
 800a5cc:	e002      	b.n	800a5d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a5ce:	bf00      	nop
 800a5d0:	e000      	b.n	800a5d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a5d2:	bf00      	nop
    }

    if(status == HAL_OK)
 800a5d4:	7bfb      	ldrb	r3, [r7, #15]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d10d      	bne.n	800a5f6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a5da:	4b4a      	ldr	r3, [pc, #296]	; (800a704 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a5dc:	68db      	ldr	r3, [r3, #12]
 800a5de:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6819      	ldr	r1, [r3, #0]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	685b      	ldr	r3, [r3, #4]
 800a5ea:	3b01      	subs	r3, #1
 800a5ec:	011b      	lsls	r3, r3, #4
 800a5ee:	430b      	orrs	r3, r1
 800a5f0:	4944      	ldr	r1, [pc, #272]	; (800a704 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a5f6:	7bfb      	ldrb	r3, [r7, #15]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d17d      	bne.n	800a6f8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800a5fc:	4b41      	ldr	r3, [pc, #260]	; (800a704 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a40      	ldr	r2, [pc, #256]	; (800a704 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a602:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a606:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a608:	f7fc fbbe 	bl	8006d88 <HAL_GetTick>
 800a60c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a60e:	e009      	b.n	800a624 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a610:	f7fc fbba 	bl	8006d88 <HAL_GetTick>
 800a614:	4602      	mov	r2, r0
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	1ad3      	subs	r3, r2, r3
 800a61a:	2b02      	cmp	r3, #2
 800a61c:	d902      	bls.n	800a624 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a61e:	2303      	movs	r3, #3
 800a620:	73fb      	strb	r3, [r7, #15]
        break;
 800a622:	e005      	b.n	800a630 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a624:	4b37      	ldr	r3, [pc, #220]	; (800a704 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d1ef      	bne.n	800a610 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a630:	7bfb      	ldrb	r3, [r7, #15]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d160      	bne.n	800a6f8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d111      	bne.n	800a660 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a63c:	4b31      	ldr	r3, [pc, #196]	; (800a704 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a63e:	691b      	ldr	r3, [r3, #16]
 800a640:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800a644:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a648:	687a      	ldr	r2, [r7, #4]
 800a64a:	6892      	ldr	r2, [r2, #8]
 800a64c:	0211      	lsls	r1, r2, #8
 800a64e:	687a      	ldr	r2, [r7, #4]
 800a650:	68d2      	ldr	r2, [r2, #12]
 800a652:	0912      	lsrs	r2, r2, #4
 800a654:	0452      	lsls	r2, r2, #17
 800a656:	430a      	orrs	r2, r1
 800a658:	492a      	ldr	r1, [pc, #168]	; (800a704 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a65a:	4313      	orrs	r3, r2
 800a65c:	610b      	str	r3, [r1, #16]
 800a65e:	e027      	b.n	800a6b0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	2b01      	cmp	r3, #1
 800a664:	d112      	bne.n	800a68c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a666:	4b27      	ldr	r3, [pc, #156]	; (800a704 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a668:	691b      	ldr	r3, [r3, #16]
 800a66a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800a66e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a672:	687a      	ldr	r2, [r7, #4]
 800a674:	6892      	ldr	r2, [r2, #8]
 800a676:	0211      	lsls	r1, r2, #8
 800a678:	687a      	ldr	r2, [r7, #4]
 800a67a:	6912      	ldr	r2, [r2, #16]
 800a67c:	0852      	lsrs	r2, r2, #1
 800a67e:	3a01      	subs	r2, #1
 800a680:	0552      	lsls	r2, r2, #21
 800a682:	430a      	orrs	r2, r1
 800a684:	491f      	ldr	r1, [pc, #124]	; (800a704 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a686:	4313      	orrs	r3, r2
 800a688:	610b      	str	r3, [r1, #16]
 800a68a:	e011      	b.n	800a6b0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a68c:	4b1d      	ldr	r3, [pc, #116]	; (800a704 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a68e:	691b      	ldr	r3, [r3, #16]
 800a690:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a694:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a698:	687a      	ldr	r2, [r7, #4]
 800a69a:	6892      	ldr	r2, [r2, #8]
 800a69c:	0211      	lsls	r1, r2, #8
 800a69e:	687a      	ldr	r2, [r7, #4]
 800a6a0:	6952      	ldr	r2, [r2, #20]
 800a6a2:	0852      	lsrs	r2, r2, #1
 800a6a4:	3a01      	subs	r2, #1
 800a6a6:	0652      	lsls	r2, r2, #25
 800a6a8:	430a      	orrs	r2, r1
 800a6aa:	4916      	ldr	r1, [pc, #88]	; (800a704 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800a6b0:	4b14      	ldr	r3, [pc, #80]	; (800a704 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	4a13      	ldr	r2, [pc, #76]	; (800a704 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a6b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a6ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a6bc:	f7fc fb64 	bl	8006d88 <HAL_GetTick>
 800a6c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a6c2:	e009      	b.n	800a6d8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a6c4:	f7fc fb60 	bl	8006d88 <HAL_GetTick>
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	1ad3      	subs	r3, r2, r3
 800a6ce:	2b02      	cmp	r3, #2
 800a6d0:	d902      	bls.n	800a6d8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800a6d2:	2303      	movs	r3, #3
 800a6d4:	73fb      	strb	r3, [r7, #15]
          break;
 800a6d6:	e005      	b.n	800a6e4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a6d8:	4b0a      	ldr	r3, [pc, #40]	; (800a704 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d0ef      	beq.n	800a6c4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800a6e4:	7bfb      	ldrb	r3, [r7, #15]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d106      	bne.n	800a6f8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a6ea:	4b06      	ldr	r3, [pc, #24]	; (800a704 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a6ec:	691a      	ldr	r2, [r3, #16]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	699b      	ldr	r3, [r3, #24]
 800a6f2:	4904      	ldr	r1, [pc, #16]	; (800a704 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a6f4:	4313      	orrs	r3, r2
 800a6f6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800a6f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3710      	adds	r7, #16
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
 800a702:	bf00      	nop
 800a704:	40021000 	.word	0x40021000

0800a708 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a712:	2300      	movs	r3, #0
 800a714:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a716:	4b6a      	ldr	r3, [pc, #424]	; (800a8c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a718:	68db      	ldr	r3, [r3, #12]
 800a71a:	f003 0303 	and.w	r3, r3, #3
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d018      	beq.n	800a754 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800a722:	4b67      	ldr	r3, [pc, #412]	; (800a8c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a724:	68db      	ldr	r3, [r3, #12]
 800a726:	f003 0203 	and.w	r2, r3, #3
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	429a      	cmp	r2, r3
 800a730:	d10d      	bne.n	800a74e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
       ||
 800a736:	2b00      	cmp	r3, #0
 800a738:	d009      	beq.n	800a74e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800a73a:	4b61      	ldr	r3, [pc, #388]	; (800a8c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a73c:	68db      	ldr	r3, [r3, #12]
 800a73e:	091b      	lsrs	r3, r3, #4
 800a740:	f003 0307 	and.w	r3, r3, #7
 800a744:	1c5a      	adds	r2, r3, #1
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	685b      	ldr	r3, [r3, #4]
       ||
 800a74a:	429a      	cmp	r2, r3
 800a74c:	d047      	beq.n	800a7de <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a74e:	2301      	movs	r3, #1
 800a750:	73fb      	strb	r3, [r7, #15]
 800a752:	e044      	b.n	800a7de <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	2b03      	cmp	r3, #3
 800a75a:	d018      	beq.n	800a78e <RCCEx_PLLSAI2_Config+0x86>
 800a75c:	2b03      	cmp	r3, #3
 800a75e:	d825      	bhi.n	800a7ac <RCCEx_PLLSAI2_Config+0xa4>
 800a760:	2b01      	cmp	r3, #1
 800a762:	d002      	beq.n	800a76a <RCCEx_PLLSAI2_Config+0x62>
 800a764:	2b02      	cmp	r3, #2
 800a766:	d009      	beq.n	800a77c <RCCEx_PLLSAI2_Config+0x74>
 800a768:	e020      	b.n	800a7ac <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a76a:	4b55      	ldr	r3, [pc, #340]	; (800a8c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f003 0302 	and.w	r3, r3, #2
 800a772:	2b00      	cmp	r3, #0
 800a774:	d11d      	bne.n	800a7b2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800a776:	2301      	movs	r3, #1
 800a778:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a77a:	e01a      	b.n	800a7b2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a77c:	4b50      	ldr	r3, [pc, #320]	; (800a8c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a784:	2b00      	cmp	r3, #0
 800a786:	d116      	bne.n	800a7b6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800a788:	2301      	movs	r3, #1
 800a78a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a78c:	e013      	b.n	800a7b6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a78e:	4b4c      	ldr	r3, [pc, #304]	; (800a8c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a796:	2b00      	cmp	r3, #0
 800a798:	d10f      	bne.n	800a7ba <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a79a:	4b49      	ldr	r3, [pc, #292]	; (800a8c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d109      	bne.n	800a7ba <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a7aa:	e006      	b.n	800a7ba <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	73fb      	strb	r3, [r7, #15]
      break;
 800a7b0:	e004      	b.n	800a7bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a7b2:	bf00      	nop
 800a7b4:	e002      	b.n	800a7bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a7b6:	bf00      	nop
 800a7b8:	e000      	b.n	800a7bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a7ba:	bf00      	nop
    }

    if(status == HAL_OK)
 800a7bc:	7bfb      	ldrb	r3, [r7, #15]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d10d      	bne.n	800a7de <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a7c2:	4b3f      	ldr	r3, [pc, #252]	; (800a8c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a7c4:	68db      	ldr	r3, [r3, #12]
 800a7c6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6819      	ldr	r1, [r3, #0]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	3b01      	subs	r3, #1
 800a7d4:	011b      	lsls	r3, r3, #4
 800a7d6:	430b      	orrs	r3, r1
 800a7d8:	4939      	ldr	r1, [pc, #228]	; (800a8c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a7da:	4313      	orrs	r3, r2
 800a7dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a7de:	7bfb      	ldrb	r3, [r7, #15]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d167      	bne.n	800a8b4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800a7e4:	4b36      	ldr	r3, [pc, #216]	; (800a8c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	4a35      	ldr	r2, [pc, #212]	; (800a8c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a7ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a7ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a7f0:	f7fc faca 	bl	8006d88 <HAL_GetTick>
 800a7f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a7f6:	e009      	b.n	800a80c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a7f8:	f7fc fac6 	bl	8006d88 <HAL_GetTick>
 800a7fc:	4602      	mov	r2, r0
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	1ad3      	subs	r3, r2, r3
 800a802:	2b02      	cmp	r3, #2
 800a804:	d902      	bls.n	800a80c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a806:	2303      	movs	r3, #3
 800a808:	73fb      	strb	r3, [r7, #15]
        break;
 800a80a:	e005      	b.n	800a818 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a80c:	4b2c      	ldr	r3, [pc, #176]	; (800a8c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a814:	2b00      	cmp	r3, #0
 800a816:	d1ef      	bne.n	800a7f8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a818:	7bfb      	ldrb	r3, [r7, #15]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d14a      	bne.n	800a8b4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d111      	bne.n	800a848 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a824:	4b26      	ldr	r3, [pc, #152]	; (800a8c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a826:	695b      	ldr	r3, [r3, #20]
 800a828:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800a82c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a830:	687a      	ldr	r2, [r7, #4]
 800a832:	6892      	ldr	r2, [r2, #8]
 800a834:	0211      	lsls	r1, r2, #8
 800a836:	687a      	ldr	r2, [r7, #4]
 800a838:	68d2      	ldr	r2, [r2, #12]
 800a83a:	0912      	lsrs	r2, r2, #4
 800a83c:	0452      	lsls	r2, r2, #17
 800a83e:	430a      	orrs	r2, r1
 800a840:	491f      	ldr	r1, [pc, #124]	; (800a8c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a842:	4313      	orrs	r3, r2
 800a844:	614b      	str	r3, [r1, #20]
 800a846:	e011      	b.n	800a86c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a848:	4b1d      	ldr	r3, [pc, #116]	; (800a8c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a84a:	695b      	ldr	r3, [r3, #20]
 800a84c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a850:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a854:	687a      	ldr	r2, [r7, #4]
 800a856:	6892      	ldr	r2, [r2, #8]
 800a858:	0211      	lsls	r1, r2, #8
 800a85a:	687a      	ldr	r2, [r7, #4]
 800a85c:	6912      	ldr	r2, [r2, #16]
 800a85e:	0852      	lsrs	r2, r2, #1
 800a860:	3a01      	subs	r2, #1
 800a862:	0652      	lsls	r2, r2, #25
 800a864:	430a      	orrs	r2, r1
 800a866:	4916      	ldr	r1, [pc, #88]	; (800a8c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a868:	4313      	orrs	r3, r2
 800a86a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800a86c:	4b14      	ldr	r3, [pc, #80]	; (800a8c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4a13      	ldr	r2, [pc, #76]	; (800a8c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a876:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a878:	f7fc fa86 	bl	8006d88 <HAL_GetTick>
 800a87c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a87e:	e009      	b.n	800a894 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a880:	f7fc fa82 	bl	8006d88 <HAL_GetTick>
 800a884:	4602      	mov	r2, r0
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	1ad3      	subs	r3, r2, r3
 800a88a:	2b02      	cmp	r3, #2
 800a88c:	d902      	bls.n	800a894 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800a88e:	2303      	movs	r3, #3
 800a890:	73fb      	strb	r3, [r7, #15]
          break;
 800a892:	e005      	b.n	800a8a0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a894:	4b0a      	ldr	r3, [pc, #40]	; (800a8c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d0ef      	beq.n	800a880 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800a8a0:	7bfb      	ldrb	r3, [r7, #15]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d106      	bne.n	800a8b4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800a8a6:	4b06      	ldr	r3, [pc, #24]	; (800a8c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a8a8:	695a      	ldr	r2, [r3, #20]
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	695b      	ldr	r3, [r3, #20]
 800a8ae:	4904      	ldr	r1, [pc, #16]	; (800a8c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a8b0:	4313      	orrs	r3, r2
 800a8b2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800a8b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3710      	adds	r7, #16
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
 800a8be:	bf00      	nop
 800a8c0:	40021000 	.word	0x40021000

0800a8c4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b084      	sub	sp, #16
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d06c      	beq.n	800a9b0 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a8dc:	b2db      	uxtb	r3, r3
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d106      	bne.n	800a8f0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f7fb f838 	bl	8005960 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2202      	movs	r2, #2
 800a8f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	22ca      	movs	r2, #202	; 0xca
 800a8fe:	625a      	str	r2, [r3, #36]	; 0x24
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	2253      	movs	r2, #83	; 0x53
 800a906:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f000 fa49 	bl	800ada0 <RTC_EnterInitMode>
 800a90e:	4603      	mov	r3, r0
 800a910:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800a912:	7bfb      	ldrb	r3, [r7, #15]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d14b      	bne.n	800a9b0 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	689b      	ldr	r3, [r3, #8]
 800a91e:	687a      	ldr	r2, [r7, #4]
 800a920:	6812      	ldr	r2, [r2, #0]
 800a922:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a926:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a92a:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	6899      	ldr	r1, [r3, #8]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	685a      	ldr	r2, [r3, #4]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	691b      	ldr	r3, [r3, #16]
 800a93a:	431a      	orrs	r2, r3
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	699b      	ldr	r3, [r3, #24]
 800a940:	431a      	orrs	r2, r3
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	430a      	orrs	r2, r1
 800a948:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	687a      	ldr	r2, [r7, #4]
 800a950:	68d2      	ldr	r2, [r2, #12]
 800a952:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	6919      	ldr	r1, [r3, #16]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	689b      	ldr	r3, [r3, #8]
 800a95e:	041a      	lsls	r2, r3, #16
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	430a      	orrs	r2, r1
 800a966:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f000 fa4d 	bl	800ae08 <RTC_ExitInitMode>
 800a96e:	4603      	mov	r3, r0
 800a970:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800a972:	7bfb      	ldrb	r3, [r7, #15]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d11b      	bne.n	800a9b0 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f022 0203 	bic.w	r2, r2, #3
 800a986:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	69da      	ldr	r2, [r3, #28]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	695b      	ldr	r3, [r3, #20]
 800a996:	431a      	orrs	r2, r3
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	430a      	orrs	r2, r1
 800a99e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	22ff      	movs	r2, #255	; 0xff
 800a9a6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800a9b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3710      	adds	r7, #16
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}

0800a9ba <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a9ba:	b590      	push	{r4, r7, lr}
 800a9bc:	b087      	sub	sp, #28
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	60f8      	str	r0, [r7, #12]
 800a9c2:	60b9      	str	r1, [r7, #8]
 800a9c4:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	d101      	bne.n	800a9d4 <HAL_RTC_SetTime+0x1a>
 800a9d0:	2302      	movs	r3, #2
 800a9d2:	e08b      	b.n	800aaec <HAL_RTC_SetTime+0x132>
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	2202      	movs	r2, #2
 800a9e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	22ca      	movs	r2, #202	; 0xca
 800a9ea:	625a      	str	r2, [r3, #36]	; 0x24
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	2253      	movs	r2, #83	; 0x53
 800a9f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a9f4:	68f8      	ldr	r0, [r7, #12]
 800a9f6:	f000 f9d3 	bl	800ada0 <RTC_EnterInitMode>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a9fe:	7cfb      	ldrb	r3, [r7, #19]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d163      	bne.n	800aacc <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d126      	bne.n	800aa58 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	689b      	ldr	r3, [r3, #8]
 800aa10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d102      	bne.n	800aa1e <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	781b      	ldrb	r3, [r3, #0]
 800aa22:	4618      	mov	r0, r3
 800aa24:	f000 fa2e 	bl	800ae84 <RTC_ByteToBcd2>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	785b      	ldrb	r3, [r3, #1]
 800aa30:	4618      	mov	r0, r3
 800aa32:	f000 fa27 	bl	800ae84 <RTC_ByteToBcd2>
 800aa36:	4603      	mov	r3, r0
 800aa38:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800aa3a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	789b      	ldrb	r3, [r3, #2]
 800aa40:	4618      	mov	r0, r3
 800aa42:	f000 fa1f 	bl	800ae84 <RTC_ByteToBcd2>
 800aa46:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800aa48:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	78db      	ldrb	r3, [r3, #3]
 800aa50:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800aa52:	4313      	orrs	r3, r2
 800aa54:	617b      	str	r3, [r7, #20]
 800aa56:	e018      	b.n	800aa8a <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	689b      	ldr	r3, [r3, #8]
 800aa5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d102      	bne.n	800aa6c <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	781b      	ldrb	r3, [r3, #0]
 800aa70:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	785b      	ldrb	r3, [r3, #1]
 800aa76:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800aa78:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800aa7a:	68ba      	ldr	r2, [r7, #8]
 800aa7c:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800aa7e:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	78db      	ldrb	r3, [r3, #3]
 800aa84:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800aa86:	4313      	orrs	r3, r2
 800aa88:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681a      	ldr	r2, [r3, #0]
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800aa94:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800aa98:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	689a      	ldr	r2, [r3, #8]
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800aaa8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	6899      	ldr	r1, [r3, #8]
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	68da      	ldr	r2, [r3, #12]
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	691b      	ldr	r3, [r3, #16]
 800aab8:	431a      	orrs	r2, r3
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	430a      	orrs	r2, r1
 800aac0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800aac2:	68f8      	ldr	r0, [r7, #12]
 800aac4:	f000 f9a0 	bl	800ae08 <RTC_ExitInitMode>
 800aac8:	4603      	mov	r3, r0
 800aaca:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	22ff      	movs	r2, #255	; 0xff
 800aad2:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800aad4:	7cfb      	ldrb	r3, [r7, #19]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d103      	bne.n	800aae2 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	2201      	movs	r2, #1
 800aade:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	2200      	movs	r2, #0
 800aae6:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800aaea:	7cfb      	ldrb	r3, [r7, #19]
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	371c      	adds	r7, #28
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd90      	pop	{r4, r7, pc}

0800aaf4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b086      	sub	sp, #24
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	60f8      	str	r0, [r7, #12]
 800aafc:	60b9      	str	r1, [r7, #8]
 800aafe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	691b      	ldr	r3, [r3, #16]
 800ab10:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800ab22:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800ab26:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	0c1b      	lsrs	r3, r3, #16
 800ab2c:	b2db      	uxtb	r3, r3
 800ab2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab32:	b2da      	uxtb	r2, r3
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	0a1b      	lsrs	r3, r3, #8
 800ab3c:	b2db      	uxtb	r3, r3
 800ab3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab42:	b2da      	uxtb	r2, r3
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	b2db      	uxtb	r3, r3
 800ab4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab50:	b2da      	uxtb	r2, r3
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	0d9b      	lsrs	r3, r3, #22
 800ab5a:	b2db      	uxtb	r3, r3
 800ab5c:	f003 0301 	and.w	r3, r3, #1
 800ab60:	b2da      	uxtb	r2, r3
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d11a      	bne.n	800aba2 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	781b      	ldrb	r3, [r3, #0]
 800ab70:	4618      	mov	r0, r3
 800ab72:	f000 f9a7 	bl	800aec4 <RTC_Bcd2ToByte>
 800ab76:	4603      	mov	r3, r0
 800ab78:	461a      	mov	r2, r3
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	785b      	ldrb	r3, [r3, #1]
 800ab82:	4618      	mov	r0, r3
 800ab84:	f000 f99e 	bl	800aec4 <RTC_Bcd2ToByte>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	461a      	mov	r2, r3
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	789b      	ldrb	r3, [r3, #2]
 800ab94:	4618      	mov	r0, r3
 800ab96:	f000 f995 	bl	800aec4 <RTC_Bcd2ToByte>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	461a      	mov	r2, r3
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800aba2:	2300      	movs	r3, #0
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3718      	adds	r7, #24
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}

0800abac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800abac:	b590      	push	{r4, r7, lr}
 800abae:	b087      	sub	sp, #28
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	60f8      	str	r0, [r7, #12]
 800abb4:	60b9      	str	r1, [r7, #8]
 800abb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	f893 3020 	ldrb.w	r3, [r3, #32]
 800abbe:	2b01      	cmp	r3, #1
 800abc0:	d101      	bne.n	800abc6 <HAL_RTC_SetDate+0x1a>
 800abc2:	2302      	movs	r3, #2
 800abc4:	e075      	b.n	800acb2 <HAL_RTC_SetDate+0x106>
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	2201      	movs	r2, #1
 800abca:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2202      	movs	r2, #2
 800abd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d10e      	bne.n	800abfa <HAL_RTC_SetDate+0x4e>
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	785b      	ldrb	r3, [r3, #1]
 800abe0:	f003 0310 	and.w	r3, r3, #16
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d008      	beq.n	800abfa <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	785b      	ldrb	r3, [r3, #1]
 800abec:	f023 0310 	bic.w	r3, r3, #16
 800abf0:	b2db      	uxtb	r3, r3
 800abf2:	330a      	adds	r3, #10
 800abf4:	b2da      	uxtb	r2, r3
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d11c      	bne.n	800ac3a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	78db      	ldrb	r3, [r3, #3]
 800ac04:	4618      	mov	r0, r3
 800ac06:	f000 f93d 	bl	800ae84 <RTC_ByteToBcd2>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	785b      	ldrb	r3, [r3, #1]
 800ac12:	4618      	mov	r0, r3
 800ac14:	f000 f936 	bl	800ae84 <RTC_ByteToBcd2>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800ac1c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	789b      	ldrb	r3, [r3, #2]
 800ac22:	4618      	mov	r0, r3
 800ac24:	f000 f92e 	bl	800ae84 <RTC_ByteToBcd2>
 800ac28:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800ac2a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800ac34:	4313      	orrs	r3, r2
 800ac36:	617b      	str	r3, [r7, #20]
 800ac38:	e00e      	b.n	800ac58 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	78db      	ldrb	r3, [r3, #3]
 800ac3e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	785b      	ldrb	r3, [r3, #1]
 800ac44:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800ac46:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800ac48:	68ba      	ldr	r2, [r7, #8]
 800ac4a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800ac4c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	781b      	ldrb	r3, [r3, #0]
 800ac52:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800ac54:	4313      	orrs	r3, r2
 800ac56:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	22ca      	movs	r2, #202	; 0xca
 800ac5e:	625a      	str	r2, [r3, #36]	; 0x24
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	2253      	movs	r2, #83	; 0x53
 800ac66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ac68:	68f8      	ldr	r0, [r7, #12]
 800ac6a:	f000 f899 	bl	800ada0 <RTC_EnterInitMode>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800ac72:	7cfb      	ldrb	r3, [r7, #19]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d10c      	bne.n	800ac92 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681a      	ldr	r2, [r3, #0]
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ac82:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ac86:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ac88:	68f8      	ldr	r0, [r7, #12]
 800ac8a:	f000 f8bd 	bl	800ae08 <RTC_ExitInitMode>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	22ff      	movs	r2, #255	; 0xff
 800ac98:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800ac9a:	7cfb      	ldrb	r3, [r7, #19]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d103      	bne.n	800aca8 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	2201      	movs	r2, #1
 800aca4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	2200      	movs	r2, #0
 800acac:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800acb0:	7cfb      	ldrb	r3, [r7, #19]
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	371c      	adds	r7, #28
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd90      	pop	{r4, r7, pc}

0800acba <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800acba:	b580      	push	{r7, lr}
 800acbc:	b086      	sub	sp, #24
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	60f8      	str	r0, [r7, #12]
 800acc2:	60b9      	str	r1, [r7, #8]
 800acc4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	685b      	ldr	r3, [r3, #4]
 800accc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800acd0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800acd4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	0c1b      	lsrs	r3, r3, #16
 800acda:	b2da      	uxtb	r2, r3
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	0a1b      	lsrs	r3, r3, #8
 800ace4:	b2db      	uxtb	r3, r3
 800ace6:	f003 031f 	and.w	r3, r3, #31
 800acea:	b2da      	uxtb	r2, r3
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	b2db      	uxtb	r3, r3
 800acf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800acf8:	b2da      	uxtb	r2, r3
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	0b5b      	lsrs	r3, r3, #13
 800ad02:	b2db      	uxtb	r3, r3
 800ad04:	f003 0307 	and.w	r3, r3, #7
 800ad08:	b2da      	uxtb	r2, r3
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d11a      	bne.n	800ad4a <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	78db      	ldrb	r3, [r3, #3]
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f000 f8d3 	bl	800aec4 <RTC_Bcd2ToByte>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	461a      	mov	r2, r3
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	785b      	ldrb	r3, [r3, #1]
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f000 f8ca 	bl	800aec4 <RTC_Bcd2ToByte>
 800ad30:	4603      	mov	r3, r0
 800ad32:	461a      	mov	r2, r3
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	789b      	ldrb	r3, [r3, #2]
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f000 f8c1 	bl	800aec4 <RTC_Bcd2ToByte>
 800ad42:	4603      	mov	r3, r0
 800ad44:	461a      	mov	r2, r3
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800ad4a:	2300      	movs	r3, #0
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3718      	adds	r7, #24
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b084      	sub	sp, #16
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	68da      	ldr	r2, [r3, #12]
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800ad6a:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800ad6c:	f7fc f80c 	bl	8006d88 <HAL_GetTick>
 800ad70:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ad72:	e009      	b.n	800ad88 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ad74:	f7fc f808 	bl	8006d88 <HAL_GetTick>
 800ad78:	4602      	mov	r2, r0
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	1ad3      	subs	r3, r2, r3
 800ad7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ad82:	d901      	bls.n	800ad88 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800ad84:	2303      	movs	r3, #3
 800ad86:	e007      	b.n	800ad98 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	68db      	ldr	r3, [r3, #12]
 800ad8e:	f003 0320 	and.w	r3, r3, #32
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d0ee      	beq.n	800ad74 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800ad96:	2300      	movs	r3, #0
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	3710      	adds	r7, #16
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}

0800ada0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b084      	sub	sp, #16
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ada8:	2300      	movs	r3, #0
 800adaa:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	68db      	ldr	r3, [r3, #12]
 800adb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d120      	bne.n	800adfc <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800adc2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800adc4:	f7fb ffe0 	bl	8006d88 <HAL_GetTick>
 800adc8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800adca:	e00d      	b.n	800ade8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800adcc:	f7fb ffdc 	bl	8006d88 <HAL_GetTick>
 800add0:	4602      	mov	r2, r0
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	1ad3      	subs	r3, r2, r3
 800add6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800adda:	d905      	bls.n	800ade8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800addc:	2303      	movs	r3, #3
 800adde:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2203      	movs	r2, #3
 800ade4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	68db      	ldr	r3, [r3, #12]
 800adee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d102      	bne.n	800adfc <RTC_EnterInitMode+0x5c>
 800adf6:	7bfb      	ldrb	r3, [r7, #15]
 800adf8:	2b03      	cmp	r3, #3
 800adfa:	d1e7      	bne.n	800adcc <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800adfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3710      	adds	r7, #16
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}
	...

0800ae08 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b084      	sub	sp, #16
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae10:	2300      	movs	r3, #0
 800ae12:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800ae14:	4b1a      	ldr	r3, [pc, #104]	; (800ae80 <RTC_ExitInitMode+0x78>)
 800ae16:	68db      	ldr	r3, [r3, #12]
 800ae18:	4a19      	ldr	r2, [pc, #100]	; (800ae80 <RTC_ExitInitMode+0x78>)
 800ae1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae1e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800ae20:	4b17      	ldr	r3, [pc, #92]	; (800ae80 <RTC_ExitInitMode+0x78>)
 800ae22:	689b      	ldr	r3, [r3, #8]
 800ae24:	f003 0320 	and.w	r3, r3, #32
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d10c      	bne.n	800ae46 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f7ff ff91 	bl	800ad54 <HAL_RTC_WaitForSynchro>
 800ae32:	4603      	mov	r3, r0
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d01e      	beq.n	800ae76 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2203      	movs	r2, #3
 800ae3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800ae40:	2303      	movs	r3, #3
 800ae42:	73fb      	strb	r3, [r7, #15]
 800ae44:	e017      	b.n	800ae76 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ae46:	4b0e      	ldr	r3, [pc, #56]	; (800ae80 <RTC_ExitInitMode+0x78>)
 800ae48:	689b      	ldr	r3, [r3, #8]
 800ae4a:	4a0d      	ldr	r2, [pc, #52]	; (800ae80 <RTC_ExitInitMode+0x78>)
 800ae4c:	f023 0320 	bic.w	r3, r3, #32
 800ae50:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f7ff ff7e 	bl	800ad54 <HAL_RTC_WaitForSynchro>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d005      	beq.n	800ae6a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2203      	movs	r2, #3
 800ae62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800ae66:	2303      	movs	r3, #3
 800ae68:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ae6a:	4b05      	ldr	r3, [pc, #20]	; (800ae80 <RTC_ExitInitMode+0x78>)
 800ae6c:	689b      	ldr	r3, [r3, #8]
 800ae6e:	4a04      	ldr	r2, [pc, #16]	; (800ae80 <RTC_ExitInitMode+0x78>)
 800ae70:	f043 0320 	orr.w	r3, r3, #32
 800ae74:	6093      	str	r3, [r2, #8]
  }

  return status;
 800ae76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3710      	adds	r7, #16
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}
 800ae80:	40002800 	.word	0x40002800

0800ae84 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800ae84:	b480      	push	{r7}
 800ae86:	b085      	sub	sp, #20
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800ae92:	79fb      	ldrb	r3, [r7, #7]
 800ae94:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800ae96:	e005      	b.n	800aea4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	3301      	adds	r3, #1
 800ae9c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800ae9e:	7afb      	ldrb	r3, [r7, #11]
 800aea0:	3b0a      	subs	r3, #10
 800aea2:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800aea4:	7afb      	ldrb	r3, [r7, #11]
 800aea6:	2b09      	cmp	r3, #9
 800aea8:	d8f6      	bhi.n	800ae98 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	b2db      	uxtb	r3, r3
 800aeae:	011b      	lsls	r3, r3, #4
 800aeb0:	b2da      	uxtb	r2, r3
 800aeb2:	7afb      	ldrb	r3, [r7, #11]
 800aeb4:	4313      	orrs	r3, r2
 800aeb6:	b2db      	uxtb	r3, r3
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3714      	adds	r7, #20
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr

0800aec4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800aec4:	b480      	push	{r7}
 800aec6:	b085      	sub	sp, #20
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	4603      	mov	r3, r0
 800aecc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800aece:	79fb      	ldrb	r3, [r7, #7]
 800aed0:	091b      	lsrs	r3, r3, #4
 800aed2:	b2db      	uxtb	r3, r3
 800aed4:	461a      	mov	r2, r3
 800aed6:	0092      	lsls	r2, r2, #2
 800aed8:	4413      	add	r3, r2
 800aeda:	005b      	lsls	r3, r3, #1
 800aedc:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800aede:	79fb      	ldrb	r3, [r7, #7]
 800aee0:	f003 030f 	and.w	r3, r3, #15
 800aee4:	b2da      	uxtb	r2, r3
 800aee6:	7bfb      	ldrb	r3, [r7, #15]
 800aee8:	4413      	add	r3, r2
 800aeea:	b2db      	uxtb	r3, r3
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3714      	adds	r7, #20
 800aef0:	46bd      	mov	sp, r7
 800aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef6:	4770      	bx	lr

0800aef8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b084      	sub	sp, #16
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d101      	bne.n	800af0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800af06:	2301      	movs	r3, #1
 800af08:	e095      	b.n	800b036 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d108      	bne.n	800af24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	685b      	ldr	r3, [r3, #4]
 800af16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800af1a:	d009      	beq.n	800af30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2200      	movs	r2, #0
 800af20:	61da      	str	r2, [r3, #28]
 800af22:	e005      	b.n	800af30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2200      	movs	r2, #0
 800af28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2200      	movs	r2, #0
 800af2e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2200      	movs	r2, #0
 800af34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800af3c:	b2db      	uxtb	r3, r3
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d106      	bne.n	800af50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2200      	movs	r2, #0
 800af46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f7fa fd3a 	bl	80059c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2202      	movs	r2, #2
 800af54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	681a      	ldr	r2, [r3, #0]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af66:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	68db      	ldr	r3, [r3, #12]
 800af6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800af70:	d902      	bls.n	800af78 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800af72:	2300      	movs	r3, #0
 800af74:	60fb      	str	r3, [r7, #12]
 800af76:	e002      	b.n	800af7e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800af78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af7c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	68db      	ldr	r3, [r3, #12]
 800af82:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800af86:	d007      	beq.n	800af98 <HAL_SPI_Init+0xa0>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	68db      	ldr	r3, [r3, #12]
 800af8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800af90:	d002      	beq.n	800af98 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2200      	movs	r2, #0
 800af96:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	689b      	ldr	r3, [r3, #8]
 800afa4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800afa8:	431a      	orrs	r2, r3
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	691b      	ldr	r3, [r3, #16]
 800afae:	f003 0302 	and.w	r3, r3, #2
 800afb2:	431a      	orrs	r2, r3
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	695b      	ldr	r3, [r3, #20]
 800afb8:	f003 0301 	and.w	r3, r3, #1
 800afbc:	431a      	orrs	r2, r3
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	699b      	ldr	r3, [r3, #24]
 800afc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800afc6:	431a      	orrs	r2, r3
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	69db      	ldr	r3, [r3, #28]
 800afcc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800afd0:	431a      	orrs	r2, r3
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6a1b      	ldr	r3, [r3, #32]
 800afd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afda:	ea42 0103 	orr.w	r1, r2, r3
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afe2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	430a      	orrs	r2, r1
 800afec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	699b      	ldr	r3, [r3, #24]
 800aff2:	0c1b      	lsrs	r3, r3, #16
 800aff4:	f003 0204 	and.w	r2, r3, #4
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800affc:	f003 0310 	and.w	r3, r3, #16
 800b000:	431a      	orrs	r2, r3
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b006:	f003 0308 	and.w	r3, r3, #8
 800b00a:	431a      	orrs	r2, r3
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	68db      	ldr	r3, [r3, #12]
 800b010:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b014:	ea42 0103 	orr.w	r1, r2, r3
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	430a      	orrs	r2, r1
 800b024:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2200      	movs	r2, #0
 800b02a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2201      	movs	r2, #1
 800b030:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800b034:	2300      	movs	r3, #0
}
 800b036:	4618      	mov	r0, r3
 800b038:	3710      	adds	r7, #16
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}

0800b03e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b03e:	b580      	push	{r7, lr}
 800b040:	b088      	sub	sp, #32
 800b042:	af00      	add	r7, sp, #0
 800b044:	60f8      	str	r0, [r7, #12]
 800b046:	60b9      	str	r1, [r7, #8]
 800b048:	603b      	str	r3, [r7, #0]
 800b04a:	4613      	mov	r3, r2
 800b04c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b04e:	2300      	movs	r3, #0
 800b050:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b058:	2b01      	cmp	r3, #1
 800b05a:	d101      	bne.n	800b060 <HAL_SPI_Transmit+0x22>
 800b05c:	2302      	movs	r3, #2
 800b05e:	e158      	b.n	800b312 <HAL_SPI_Transmit+0x2d4>
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	2201      	movs	r2, #1
 800b064:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b068:	f7fb fe8e 	bl	8006d88 <HAL_GetTick>
 800b06c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b06e:	88fb      	ldrh	r3, [r7, #6]
 800b070:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b078:	b2db      	uxtb	r3, r3
 800b07a:	2b01      	cmp	r3, #1
 800b07c:	d002      	beq.n	800b084 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b07e:	2302      	movs	r3, #2
 800b080:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b082:	e13d      	b.n	800b300 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d002      	beq.n	800b090 <HAL_SPI_Transmit+0x52>
 800b08a:	88fb      	ldrh	r3, [r7, #6]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d102      	bne.n	800b096 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b090:	2301      	movs	r3, #1
 800b092:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b094:	e134      	b.n	800b300 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	2203      	movs	r2, #3
 800b09a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	68ba      	ldr	r2, [r7, #8]
 800b0a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	88fa      	ldrh	r2, [r7, #6]
 800b0ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	88fa      	ldrh	r2, [r7, #6]
 800b0b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	689b      	ldr	r3, [r3, #8]
 800b0dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b0e0:	d10f      	bne.n	800b102 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	681a      	ldr	r2, [r3, #0]
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b0f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	681a      	ldr	r2, [r3, #0]
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b100:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b10c:	2b40      	cmp	r3, #64	; 0x40
 800b10e:	d007      	beq.n	800b120 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	681a      	ldr	r2, [r3, #0]
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b11e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	68db      	ldr	r3, [r3, #12]
 800b124:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b128:	d94b      	bls.n	800b1c2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	685b      	ldr	r3, [r3, #4]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d002      	beq.n	800b138 <HAL_SPI_Transmit+0xfa>
 800b132:	8afb      	ldrh	r3, [r7, #22]
 800b134:	2b01      	cmp	r3, #1
 800b136:	d13e      	bne.n	800b1b6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b13c:	881a      	ldrh	r2, [r3, #0]
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b148:	1c9a      	adds	r2, r3, #2
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b152:	b29b      	uxth	r3, r3
 800b154:	3b01      	subs	r3, #1
 800b156:	b29a      	uxth	r2, r3
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b15c:	e02b      	b.n	800b1b6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	689b      	ldr	r3, [r3, #8]
 800b164:	f003 0302 	and.w	r3, r3, #2
 800b168:	2b02      	cmp	r3, #2
 800b16a:	d112      	bne.n	800b192 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b170:	881a      	ldrh	r2, [r3, #0]
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b17c:	1c9a      	adds	r2, r3, #2
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b186:	b29b      	uxth	r3, r3
 800b188:	3b01      	subs	r3, #1
 800b18a:	b29a      	uxth	r2, r3
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b190:	e011      	b.n	800b1b6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b192:	f7fb fdf9 	bl	8006d88 <HAL_GetTick>
 800b196:	4602      	mov	r2, r0
 800b198:	69bb      	ldr	r3, [r7, #24]
 800b19a:	1ad3      	subs	r3, r2, r3
 800b19c:	683a      	ldr	r2, [r7, #0]
 800b19e:	429a      	cmp	r2, r3
 800b1a0:	d803      	bhi.n	800b1aa <HAL_SPI_Transmit+0x16c>
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b1a8:	d102      	bne.n	800b1b0 <HAL_SPI_Transmit+0x172>
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d102      	bne.n	800b1b6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800b1b0:	2303      	movs	r3, #3
 800b1b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b1b4:	e0a4      	b.n	800b300 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b1ba:	b29b      	uxth	r3, r3
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d1ce      	bne.n	800b15e <HAL_SPI_Transmit+0x120>
 800b1c0:	e07c      	b.n	800b2bc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	685b      	ldr	r3, [r3, #4]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d002      	beq.n	800b1d0 <HAL_SPI_Transmit+0x192>
 800b1ca:	8afb      	ldrh	r3, [r7, #22]
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d170      	bne.n	800b2b2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b1d4:	b29b      	uxth	r3, r3
 800b1d6:	2b01      	cmp	r3, #1
 800b1d8:	d912      	bls.n	800b200 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1de:	881a      	ldrh	r2, [r3, #0]
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1ea:	1c9a      	adds	r2, r3, #2
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b1f4:	b29b      	uxth	r3, r3
 800b1f6:	3b02      	subs	r3, #2
 800b1f8:	b29a      	uxth	r2, r3
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b1fe:	e058      	b.n	800b2b2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	330c      	adds	r3, #12
 800b20a:	7812      	ldrb	r2, [r2, #0]
 800b20c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b212:	1c5a      	adds	r2, r3, #1
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b21c:	b29b      	uxth	r3, r3
 800b21e:	3b01      	subs	r3, #1
 800b220:	b29a      	uxth	r2, r3
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800b226:	e044      	b.n	800b2b2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	689b      	ldr	r3, [r3, #8]
 800b22e:	f003 0302 	and.w	r3, r3, #2
 800b232:	2b02      	cmp	r3, #2
 800b234:	d12b      	bne.n	800b28e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b23a:	b29b      	uxth	r3, r3
 800b23c:	2b01      	cmp	r3, #1
 800b23e:	d912      	bls.n	800b266 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b244:	881a      	ldrh	r2, [r3, #0]
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b250:	1c9a      	adds	r2, r3, #2
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b25a:	b29b      	uxth	r3, r3
 800b25c:	3b02      	subs	r3, #2
 800b25e:	b29a      	uxth	r2, r3
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b264:	e025      	b.n	800b2b2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	330c      	adds	r3, #12
 800b270:	7812      	ldrb	r2, [r2, #0]
 800b272:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b278:	1c5a      	adds	r2, r3, #1
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b282:	b29b      	uxth	r3, r3
 800b284:	3b01      	subs	r3, #1
 800b286:	b29a      	uxth	r2, r3
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b28c:	e011      	b.n	800b2b2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b28e:	f7fb fd7b 	bl	8006d88 <HAL_GetTick>
 800b292:	4602      	mov	r2, r0
 800b294:	69bb      	ldr	r3, [r7, #24]
 800b296:	1ad3      	subs	r3, r2, r3
 800b298:	683a      	ldr	r2, [r7, #0]
 800b29a:	429a      	cmp	r2, r3
 800b29c:	d803      	bhi.n	800b2a6 <HAL_SPI_Transmit+0x268>
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b2a4:	d102      	bne.n	800b2ac <HAL_SPI_Transmit+0x26e>
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d102      	bne.n	800b2b2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800b2ac:	2303      	movs	r3, #3
 800b2ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b2b0:	e026      	b.n	800b300 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b2b6:	b29b      	uxth	r3, r3
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d1b5      	bne.n	800b228 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b2bc:	69ba      	ldr	r2, [r7, #24]
 800b2be:	6839      	ldr	r1, [r7, #0]
 800b2c0:	68f8      	ldr	r0, [r7, #12]
 800b2c2:	f001 f9dd 	bl	800c680 <SPI_EndRxTxTransaction>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d002      	beq.n	800b2d2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	2220      	movs	r2, #32
 800b2d0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	689b      	ldr	r3, [r3, #8]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d10a      	bne.n	800b2f0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b2da:	2300      	movs	r3, #0
 800b2dc:	613b      	str	r3, [r7, #16]
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	68db      	ldr	r3, [r3, #12]
 800b2e4:	613b      	str	r3, [r7, #16]
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	689b      	ldr	r3, [r3, #8]
 800b2ec:	613b      	str	r3, [r7, #16]
 800b2ee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d002      	beq.n	800b2fe <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	77fb      	strb	r3, [r7, #31]
 800b2fc:	e000      	b.n	800b300 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800b2fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	2201      	movs	r2, #1
 800b304:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	2200      	movs	r2, #0
 800b30c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b310:	7ffb      	ldrb	r3, [r7, #31]
}
 800b312:	4618      	mov	r0, r3
 800b314:	3720      	adds	r7, #32
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}

0800b31a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b31a:	b580      	push	{r7, lr}
 800b31c:	b088      	sub	sp, #32
 800b31e:	af02      	add	r7, sp, #8
 800b320:	60f8      	str	r0, [r7, #12]
 800b322:	60b9      	str	r1, [r7, #8]
 800b324:	603b      	str	r3, [r7, #0]
 800b326:	4613      	mov	r3, r2
 800b328:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b32a:	2300      	movs	r3, #0
 800b32c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	685b      	ldr	r3, [r3, #4]
 800b332:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b336:	d112      	bne.n	800b35e <HAL_SPI_Receive+0x44>
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	689b      	ldr	r3, [r3, #8]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d10e      	bne.n	800b35e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	2204      	movs	r2, #4
 800b344:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b348:	88fa      	ldrh	r2, [r7, #6]
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	9300      	str	r3, [sp, #0]
 800b34e:	4613      	mov	r3, r2
 800b350:	68ba      	ldr	r2, [r7, #8]
 800b352:	68b9      	ldr	r1, [r7, #8]
 800b354:	68f8      	ldr	r0, [r7, #12]
 800b356:	f000 f910 	bl	800b57a <HAL_SPI_TransmitReceive>
 800b35a:	4603      	mov	r3, r0
 800b35c:	e109      	b.n	800b572 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b364:	2b01      	cmp	r3, #1
 800b366:	d101      	bne.n	800b36c <HAL_SPI_Receive+0x52>
 800b368:	2302      	movs	r3, #2
 800b36a:	e102      	b.n	800b572 <HAL_SPI_Receive+0x258>
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2201      	movs	r2, #1
 800b370:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b374:	f7fb fd08 	bl	8006d88 <HAL_GetTick>
 800b378:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b380:	b2db      	uxtb	r3, r3
 800b382:	2b01      	cmp	r3, #1
 800b384:	d002      	beq.n	800b38c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800b386:	2302      	movs	r3, #2
 800b388:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b38a:	e0e9      	b.n	800b560 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d002      	beq.n	800b398 <HAL_SPI_Receive+0x7e>
 800b392:	88fb      	ldrh	r3, [r7, #6]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d102      	bne.n	800b39e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800b398:	2301      	movs	r3, #1
 800b39a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b39c:	e0e0      	b.n	800b560 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	2204      	movs	r2, #4
 800b3a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	68ba      	ldr	r2, [r7, #8]
 800b3b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	88fa      	ldrh	r2, [r7, #6]
 800b3b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	88fa      	ldrh	r2, [r7, #6]
 800b3be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	68db      	ldr	r3, [r3, #12]
 800b3e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b3e8:	d908      	bls.n	800b3fc <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	685a      	ldr	r2, [r3, #4]
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b3f8:	605a      	str	r2, [r3, #4]
 800b3fa:	e007      	b.n	800b40c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	685a      	ldr	r2, [r3, #4]
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b40a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	689b      	ldr	r3, [r3, #8]
 800b410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b414:	d10f      	bne.n	800b436 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	681a      	ldr	r2, [r3, #0]
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b424:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	681a      	ldr	r2, [r3, #0]
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b434:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b440:	2b40      	cmp	r3, #64	; 0x40
 800b442:	d007      	beq.n	800b454 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	681a      	ldr	r2, [r3, #0]
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b452:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	68db      	ldr	r3, [r3, #12]
 800b458:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b45c:	d867      	bhi.n	800b52e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b45e:	e030      	b.n	800b4c2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	689b      	ldr	r3, [r3, #8]
 800b466:	f003 0301 	and.w	r3, r3, #1
 800b46a:	2b01      	cmp	r3, #1
 800b46c:	d117      	bne.n	800b49e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f103 020c 	add.w	r2, r3, #12
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b47a:	7812      	ldrb	r2, [r2, #0]
 800b47c:	b2d2      	uxtb	r2, r2
 800b47e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b484:	1c5a      	adds	r2, r3, #1
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b490:	b29b      	uxth	r3, r3
 800b492:	3b01      	subs	r3, #1
 800b494:	b29a      	uxth	r2, r3
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800b49c:	e011      	b.n	800b4c2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b49e:	f7fb fc73 	bl	8006d88 <HAL_GetTick>
 800b4a2:	4602      	mov	r2, r0
 800b4a4:	693b      	ldr	r3, [r7, #16]
 800b4a6:	1ad3      	subs	r3, r2, r3
 800b4a8:	683a      	ldr	r2, [r7, #0]
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d803      	bhi.n	800b4b6 <HAL_SPI_Receive+0x19c>
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b4b4:	d102      	bne.n	800b4bc <HAL_SPI_Receive+0x1a2>
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d102      	bne.n	800b4c2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800b4bc:	2303      	movs	r3, #3
 800b4be:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b4c0:	e04e      	b.n	800b560 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b4c8:	b29b      	uxth	r3, r3
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d1c8      	bne.n	800b460 <HAL_SPI_Receive+0x146>
 800b4ce:	e034      	b.n	800b53a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	689b      	ldr	r3, [r3, #8]
 800b4d6:	f003 0301 	and.w	r3, r3, #1
 800b4da:	2b01      	cmp	r3, #1
 800b4dc:	d115      	bne.n	800b50a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	68da      	ldr	r2, [r3, #12]
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4e8:	b292      	uxth	r2, r2
 800b4ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4f0:	1c9a      	adds	r2, r3, #2
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b4fc:	b29b      	uxth	r3, r3
 800b4fe:	3b01      	subs	r3, #1
 800b500:	b29a      	uxth	r2, r3
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800b508:	e011      	b.n	800b52e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b50a:	f7fb fc3d 	bl	8006d88 <HAL_GetTick>
 800b50e:	4602      	mov	r2, r0
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	1ad3      	subs	r3, r2, r3
 800b514:	683a      	ldr	r2, [r7, #0]
 800b516:	429a      	cmp	r2, r3
 800b518:	d803      	bhi.n	800b522 <HAL_SPI_Receive+0x208>
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b520:	d102      	bne.n	800b528 <HAL_SPI_Receive+0x20e>
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d102      	bne.n	800b52e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800b528:	2303      	movs	r3, #3
 800b52a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b52c:	e018      	b.n	800b560 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b534:	b29b      	uxth	r3, r3
 800b536:	2b00      	cmp	r3, #0
 800b538:	d1ca      	bne.n	800b4d0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b53a:	693a      	ldr	r2, [r7, #16]
 800b53c:	6839      	ldr	r1, [r7, #0]
 800b53e:	68f8      	ldr	r0, [r7, #12]
 800b540:	f001 f846 	bl	800c5d0 <SPI_EndRxTransaction>
 800b544:	4603      	mov	r3, r0
 800b546:	2b00      	cmp	r3, #0
 800b548:	d002      	beq.n	800b550 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	2220      	movs	r2, #32
 800b54e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b554:	2b00      	cmp	r3, #0
 800b556:	d002      	beq.n	800b55e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800b558:	2301      	movs	r3, #1
 800b55a:	75fb      	strb	r3, [r7, #23]
 800b55c:	e000      	b.n	800b560 <HAL_SPI_Receive+0x246>
  }

error :
 800b55e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2201      	movs	r2, #1
 800b564:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	2200      	movs	r2, #0
 800b56c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b570:	7dfb      	ldrb	r3, [r7, #23]
}
 800b572:	4618      	mov	r0, r3
 800b574:	3718      	adds	r7, #24
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}

0800b57a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b57a:	b580      	push	{r7, lr}
 800b57c:	b08a      	sub	sp, #40	; 0x28
 800b57e:	af00      	add	r7, sp, #0
 800b580:	60f8      	str	r0, [r7, #12]
 800b582:	60b9      	str	r1, [r7, #8]
 800b584:	607a      	str	r2, [r7, #4]
 800b586:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b588:	2301      	movs	r3, #1
 800b58a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b58c:	2300      	movs	r3, #0
 800b58e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d101      	bne.n	800b5a0 <HAL_SPI_TransmitReceive+0x26>
 800b59c:	2302      	movs	r3, #2
 800b59e:	e1fb      	b.n	800b998 <HAL_SPI_TransmitReceive+0x41e>
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	2201      	movs	r2, #1
 800b5a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b5a8:	f7fb fbee 	bl	8006d88 <HAL_GetTick>
 800b5ac:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b5b4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	685b      	ldr	r3, [r3, #4]
 800b5ba:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800b5bc:	887b      	ldrh	r3, [r7, #2]
 800b5be:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800b5c0:	887b      	ldrh	r3, [r7, #2]
 800b5c2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b5c4:	7efb      	ldrb	r3, [r7, #27]
 800b5c6:	2b01      	cmp	r3, #1
 800b5c8:	d00e      	beq.n	800b5e8 <HAL_SPI_TransmitReceive+0x6e>
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b5d0:	d106      	bne.n	800b5e0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	689b      	ldr	r3, [r3, #8]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d102      	bne.n	800b5e0 <HAL_SPI_TransmitReceive+0x66>
 800b5da:	7efb      	ldrb	r3, [r7, #27]
 800b5dc:	2b04      	cmp	r3, #4
 800b5de:	d003      	beq.n	800b5e8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800b5e0:	2302      	movs	r3, #2
 800b5e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800b5e6:	e1cd      	b.n	800b984 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d005      	beq.n	800b5fa <HAL_SPI_TransmitReceive+0x80>
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d002      	beq.n	800b5fa <HAL_SPI_TransmitReceive+0x80>
 800b5f4:	887b      	ldrh	r3, [r7, #2]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d103      	bne.n	800b602 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800b600:	e1c0      	b.n	800b984 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b608:	b2db      	uxtb	r3, r3
 800b60a:	2b04      	cmp	r3, #4
 800b60c:	d003      	beq.n	800b616 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	2205      	movs	r2, #5
 800b612:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	2200      	movs	r2, #0
 800b61a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	687a      	ldr	r2, [r7, #4]
 800b620:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	887a      	ldrh	r2, [r7, #2]
 800b626:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	887a      	ldrh	r2, [r7, #2]
 800b62e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	68ba      	ldr	r2, [r7, #8]
 800b636:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	887a      	ldrh	r2, [r7, #2]
 800b63c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	887a      	ldrh	r2, [r7, #2]
 800b642:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	2200      	movs	r2, #0
 800b648:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	2200      	movs	r2, #0
 800b64e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	68db      	ldr	r3, [r3, #12]
 800b654:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b658:	d802      	bhi.n	800b660 <HAL_SPI_TransmitReceive+0xe6>
 800b65a:	8a3b      	ldrh	r3, [r7, #16]
 800b65c:	2b01      	cmp	r3, #1
 800b65e:	d908      	bls.n	800b672 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	685a      	ldr	r2, [r3, #4]
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b66e:	605a      	str	r2, [r3, #4]
 800b670:	e007      	b.n	800b682 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	685a      	ldr	r2, [r3, #4]
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b680:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b68c:	2b40      	cmp	r3, #64	; 0x40
 800b68e:	d007      	beq.n	800b6a0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	681a      	ldr	r2, [r3, #0]
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b69e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	68db      	ldr	r3, [r3, #12]
 800b6a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b6a8:	d97c      	bls.n	800b7a4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	685b      	ldr	r3, [r3, #4]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d002      	beq.n	800b6b8 <HAL_SPI_TransmitReceive+0x13e>
 800b6b2:	8a7b      	ldrh	r3, [r7, #18]
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	d169      	bne.n	800b78c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6bc:	881a      	ldrh	r2, [r3, #0]
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6c8:	1c9a      	adds	r2, r3, #2
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b6d2:	b29b      	uxth	r3, r3
 800b6d4:	3b01      	subs	r3, #1
 800b6d6:	b29a      	uxth	r2, r3
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b6dc:	e056      	b.n	800b78c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	689b      	ldr	r3, [r3, #8]
 800b6e4:	f003 0302 	and.w	r3, r3, #2
 800b6e8:	2b02      	cmp	r3, #2
 800b6ea:	d11b      	bne.n	800b724 <HAL_SPI_TransmitReceive+0x1aa>
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b6f0:	b29b      	uxth	r3, r3
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d016      	beq.n	800b724 <HAL_SPI_TransmitReceive+0x1aa>
 800b6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f8:	2b01      	cmp	r3, #1
 800b6fa:	d113      	bne.n	800b724 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b700:	881a      	ldrh	r2, [r3, #0]
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b70c:	1c9a      	adds	r2, r3, #2
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b716:	b29b      	uxth	r3, r3
 800b718:	3b01      	subs	r3, #1
 800b71a:	b29a      	uxth	r2, r3
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b720:	2300      	movs	r3, #0
 800b722:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	689b      	ldr	r3, [r3, #8]
 800b72a:	f003 0301 	and.w	r3, r3, #1
 800b72e:	2b01      	cmp	r3, #1
 800b730:	d11c      	bne.n	800b76c <HAL_SPI_TransmitReceive+0x1f2>
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b738:	b29b      	uxth	r3, r3
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d016      	beq.n	800b76c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	68da      	ldr	r2, [r3, #12]
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b748:	b292      	uxth	r2, r2
 800b74a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b750:	1c9a      	adds	r2, r3, #2
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b75c:	b29b      	uxth	r3, r3
 800b75e:	3b01      	subs	r3, #1
 800b760:	b29a      	uxth	r2, r3
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b768:	2301      	movs	r3, #1
 800b76a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b76c:	f7fb fb0c 	bl	8006d88 <HAL_GetTick>
 800b770:	4602      	mov	r2, r0
 800b772:	69fb      	ldr	r3, [r7, #28]
 800b774:	1ad3      	subs	r3, r2, r3
 800b776:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b778:	429a      	cmp	r2, r3
 800b77a:	d807      	bhi.n	800b78c <HAL_SPI_TransmitReceive+0x212>
 800b77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b77e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b782:	d003      	beq.n	800b78c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800b784:	2303      	movs	r3, #3
 800b786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800b78a:	e0fb      	b.n	800b984 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b790:	b29b      	uxth	r3, r3
 800b792:	2b00      	cmp	r3, #0
 800b794:	d1a3      	bne.n	800b6de <HAL_SPI_TransmitReceive+0x164>
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b79c:	b29b      	uxth	r3, r3
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d19d      	bne.n	800b6de <HAL_SPI_TransmitReceive+0x164>
 800b7a2:	e0df      	b.n	800b964 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	685b      	ldr	r3, [r3, #4]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d003      	beq.n	800b7b4 <HAL_SPI_TransmitReceive+0x23a>
 800b7ac:	8a7b      	ldrh	r3, [r7, #18]
 800b7ae:	2b01      	cmp	r3, #1
 800b7b0:	f040 80cb 	bne.w	800b94a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7b8:	b29b      	uxth	r3, r3
 800b7ba:	2b01      	cmp	r3, #1
 800b7bc:	d912      	bls.n	800b7e4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7c2:	881a      	ldrh	r2, [r3, #0]
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ce:	1c9a      	adds	r2, r3, #2
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7d8:	b29b      	uxth	r3, r3
 800b7da:	3b02      	subs	r3, #2
 800b7dc:	b29a      	uxth	r2, r3
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b7e2:	e0b2      	b.n	800b94a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	330c      	adds	r3, #12
 800b7ee:	7812      	ldrb	r2, [r2, #0]
 800b7f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7f6:	1c5a      	adds	r2, r3, #1
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b800:	b29b      	uxth	r3, r3
 800b802:	3b01      	subs	r3, #1
 800b804:	b29a      	uxth	r2, r3
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b80a:	e09e      	b.n	800b94a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	689b      	ldr	r3, [r3, #8]
 800b812:	f003 0302 	and.w	r3, r3, #2
 800b816:	2b02      	cmp	r3, #2
 800b818:	d134      	bne.n	800b884 <HAL_SPI_TransmitReceive+0x30a>
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b81e:	b29b      	uxth	r3, r3
 800b820:	2b00      	cmp	r3, #0
 800b822:	d02f      	beq.n	800b884 <HAL_SPI_TransmitReceive+0x30a>
 800b824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b826:	2b01      	cmp	r3, #1
 800b828:	d12c      	bne.n	800b884 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b82e:	b29b      	uxth	r3, r3
 800b830:	2b01      	cmp	r3, #1
 800b832:	d912      	bls.n	800b85a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b838:	881a      	ldrh	r2, [r3, #0]
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b844:	1c9a      	adds	r2, r3, #2
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b84e:	b29b      	uxth	r3, r3
 800b850:	3b02      	subs	r3, #2
 800b852:	b29a      	uxth	r2, r3
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b858:	e012      	b.n	800b880 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	330c      	adds	r3, #12
 800b864:	7812      	ldrb	r2, [r2, #0]
 800b866:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b86c:	1c5a      	adds	r2, r3, #1
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b876:	b29b      	uxth	r3, r3
 800b878:	3b01      	subs	r3, #1
 800b87a:	b29a      	uxth	r2, r3
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b880:	2300      	movs	r3, #0
 800b882:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	689b      	ldr	r3, [r3, #8]
 800b88a:	f003 0301 	and.w	r3, r3, #1
 800b88e:	2b01      	cmp	r3, #1
 800b890:	d148      	bne.n	800b924 <HAL_SPI_TransmitReceive+0x3aa>
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b898:	b29b      	uxth	r3, r3
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d042      	beq.n	800b924 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b8a4:	b29b      	uxth	r3, r3
 800b8a6:	2b01      	cmp	r3, #1
 800b8a8:	d923      	bls.n	800b8f2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	68da      	ldr	r2, [r3, #12]
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8b4:	b292      	uxth	r2, r2
 800b8b6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8bc:	1c9a      	adds	r2, r3, #2
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b8c8:	b29b      	uxth	r3, r3
 800b8ca:	3b02      	subs	r3, #2
 800b8cc:	b29a      	uxth	r2, r3
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b8da:	b29b      	uxth	r3, r3
 800b8dc:	2b01      	cmp	r3, #1
 800b8de:	d81f      	bhi.n	800b920 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	685a      	ldr	r2, [r3, #4]
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b8ee:	605a      	str	r2, [r3, #4]
 800b8f0:	e016      	b.n	800b920 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	f103 020c 	add.w	r2, r3, #12
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8fe:	7812      	ldrb	r2, [r2, #0]
 800b900:	b2d2      	uxtb	r2, r2
 800b902:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b908:	1c5a      	adds	r2, r3, #1
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b914:	b29b      	uxth	r3, r3
 800b916:	3b01      	subs	r3, #1
 800b918:	b29a      	uxth	r2, r3
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b920:	2301      	movs	r3, #1
 800b922:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b924:	f7fb fa30 	bl	8006d88 <HAL_GetTick>
 800b928:	4602      	mov	r2, r0
 800b92a:	69fb      	ldr	r3, [r7, #28]
 800b92c:	1ad3      	subs	r3, r2, r3
 800b92e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b930:	429a      	cmp	r2, r3
 800b932:	d803      	bhi.n	800b93c <HAL_SPI_TransmitReceive+0x3c2>
 800b934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b936:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b93a:	d102      	bne.n	800b942 <HAL_SPI_TransmitReceive+0x3c8>
 800b93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d103      	bne.n	800b94a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800b942:	2303      	movs	r3, #3
 800b944:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800b948:	e01c      	b.n	800b984 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b94e:	b29b      	uxth	r3, r3
 800b950:	2b00      	cmp	r3, #0
 800b952:	f47f af5b 	bne.w	800b80c <HAL_SPI_TransmitReceive+0x292>
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b95c:	b29b      	uxth	r3, r3
 800b95e:	2b00      	cmp	r3, #0
 800b960:	f47f af54 	bne.w	800b80c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b964:	69fa      	ldr	r2, [r7, #28]
 800b966:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b968:	68f8      	ldr	r0, [r7, #12]
 800b96a:	f000 fe89 	bl	800c680 <SPI_EndRxTxTransaction>
 800b96e:	4603      	mov	r3, r0
 800b970:	2b00      	cmp	r3, #0
 800b972:	d006      	beq.n	800b982 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800b974:	2301      	movs	r3, #1
 800b976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	2220      	movs	r2, #32
 800b97e:	661a      	str	r2, [r3, #96]	; 0x60
 800b980:	e000      	b.n	800b984 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800b982:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	2201      	movs	r2, #1
 800b988:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	2200      	movs	r2, #0
 800b990:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b994:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800b998:	4618      	mov	r0, r3
 800b99a:	3728      	adds	r7, #40	; 0x28
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}

0800b9a0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b086      	sub	sp, #24
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	60f8      	str	r0, [r7, #12]
 800b9a8:	60b9      	str	r1, [r7, #8]
 800b9aa:	4613      	mov	r3, r2
 800b9ac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b9b8:	2b01      	cmp	r3, #1
 800b9ba:	d101      	bne.n	800b9c0 <HAL_SPI_Transmit_DMA+0x20>
 800b9bc:	2302      	movs	r3, #2
 800b9be:	e0d8      	b.n	800bb72 <HAL_SPI_Transmit_DMA+0x1d2>
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	2201      	movs	r2, #1
 800b9c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b9ce:	b2db      	uxtb	r3, r3
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d002      	beq.n	800b9da <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800b9d4:	2302      	movs	r3, #2
 800b9d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b9d8:	e0c6      	b.n	800bb68 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d002      	beq.n	800b9e6 <HAL_SPI_Transmit_DMA+0x46>
 800b9e0:	88fb      	ldrh	r3, [r7, #6]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d102      	bne.n	800b9ec <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b9ea:	e0bd      	b.n	800bb68 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	2203      	movs	r2, #3
 800b9f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	68ba      	ldr	r2, [r7, #8]
 800b9fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	88fa      	ldrh	r2, [r7, #6]
 800ba04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	88fa      	ldrh	r2, [r7, #6]
 800ba0a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	2200      	movs	r2, #0
 800ba16:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	2200      	movs	r2, #0
 800ba22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	2200      	movs	r2, #0
 800ba2a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	689b      	ldr	r3, [r3, #8]
 800ba32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba36:	d10f      	bne.n	800ba58 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	681a      	ldr	r2, [r3, #0]
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ba46:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	681a      	ldr	r2, [r3, #0]
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ba56:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba5c:	4a47      	ldr	r2, [pc, #284]	; (800bb7c <HAL_SPI_Transmit_DMA+0x1dc>)
 800ba5e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba64:	4a46      	ldr	r2, [pc, #280]	; (800bb80 <HAL_SPI_Transmit_DMA+0x1e0>)
 800ba66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba6c:	4a45      	ldr	r2, [pc, #276]	; (800bb84 <HAL_SPI_Transmit_DMA+0x1e4>)
 800ba6e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba74:	2200      	movs	r2, #0
 800ba76:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	685a      	ldr	r2, [r3, #4]
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ba86:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	68db      	ldr	r3, [r3, #12]
 800ba8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ba90:	d82d      	bhi.n	800baee <HAL_SPI_Transmit_DMA+0x14e>
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba96:	699b      	ldr	r3, [r3, #24]
 800ba98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba9c:	d127      	bne.n	800baee <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800baa2:	b29b      	uxth	r3, r3
 800baa4:	f003 0301 	and.w	r3, r3, #1
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d10f      	bne.n	800bacc <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	685a      	ldr	r2, [r3, #4]
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800baba:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bac0:	b29b      	uxth	r3, r3
 800bac2:	085b      	lsrs	r3, r3, #1
 800bac4:	b29a      	uxth	r2, r3
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800baca:	e010      	b.n	800baee <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	685a      	ldr	r2, [r3, #4]
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bada:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bae0:	b29b      	uxth	r3, r3
 800bae2:	085b      	lsrs	r3, r3, #1
 800bae4:	b29b      	uxth	r3, r3
 800bae6:	3301      	adds	r3, #1
 800bae8:	b29a      	uxth	r2, r3
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baf6:	4619      	mov	r1, r3
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	330c      	adds	r3, #12
 800bafe:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb04:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800bb06:	f7fb fb6b 	bl	80071e0 <HAL_DMA_Start_IT>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d00c      	beq.n	800bb2a <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb14:	f043 0210 	orr.w	r2, r3, #16
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	2201      	movs	r2, #1
 800bb24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800bb28:	e01e      	b.n	800bb68 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb34:	2b40      	cmp	r3, #64	; 0x40
 800bb36:	d007      	beq.n	800bb48 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	681a      	ldr	r2, [r3, #0]
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bb46:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	685a      	ldr	r2, [r3, #4]
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	f042 0220 	orr.w	r2, r2, #32
 800bb56:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	685a      	ldr	r2, [r3, #4]
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	f042 0202 	orr.w	r2, r2, #2
 800bb66:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800bb70:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	3718      	adds	r7, #24
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}
 800bb7a:	bf00      	nop
 800bb7c:	0800c2d7 	.word	0x0800c2d7
 800bb80:	0800c0f9 	.word	0x0800c0f9
 800bb84:	0800c32b 	.word	0x0800c32b

0800bb88 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b086      	sub	sp, #24
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	60f8      	str	r0, [r7, #12]
 800bb90:	60b9      	str	r1, [r7, #8]
 800bb92:	607a      	str	r2, [r7, #4]
 800bb94:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bb96:	2300      	movs	r3, #0
 800bb98:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800bba0:	2b01      	cmp	r3, #1
 800bba2:	d101      	bne.n	800bba8 <HAL_SPI_TransmitReceive_DMA+0x20>
 800bba4:	2302      	movs	r3, #2
 800bba6:	e16c      	b.n	800be82 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	2201      	movs	r2, #1
 800bbac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bbb6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	685b      	ldr	r3, [r3, #4]
 800bbbc:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800bbbe:	7dbb      	ldrb	r3, [r7, #22]
 800bbc0:	2b01      	cmp	r3, #1
 800bbc2:	d00d      	beq.n	800bbe0 <HAL_SPI_TransmitReceive_DMA+0x58>
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bbca:	d106      	bne.n	800bbda <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	689b      	ldr	r3, [r3, #8]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d102      	bne.n	800bbda <HAL_SPI_TransmitReceive_DMA+0x52>
 800bbd4:	7dbb      	ldrb	r3, [r7, #22]
 800bbd6:	2b04      	cmp	r3, #4
 800bbd8:	d002      	beq.n	800bbe0 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800bbda:	2302      	movs	r3, #2
 800bbdc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bbde:	e14b      	b.n	800be78 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d005      	beq.n	800bbf2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d002      	beq.n	800bbf2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800bbec:	887b      	ldrh	r3, [r7, #2]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d102      	bne.n	800bbf8 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bbf6:	e13f      	b.n	800be78 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bbfe:	b2db      	uxtb	r3, r3
 800bc00:	2b04      	cmp	r3, #4
 800bc02:	d003      	beq.n	800bc0c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	2205      	movs	r2, #5
 800bc08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	68ba      	ldr	r2, [r7, #8]
 800bc16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	887a      	ldrh	r2, [r7, #2]
 800bc1c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	887a      	ldrh	r2, [r7, #2]
 800bc22:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	687a      	ldr	r2, [r7, #4]
 800bc28:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	887a      	ldrh	r2, [r7, #2]
 800bc2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	887a      	ldrh	r2, [r7, #2]
 800bc36:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	2200      	movs	r2, #0
 800bc44:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	685a      	ldr	r2, [r3, #4]
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800bc54:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	68db      	ldr	r3, [r3, #12]
 800bc5a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bc5e:	d908      	bls.n	800bc72 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	685a      	ldr	r2, [r3, #4]
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bc6e:	605a      	str	r2, [r3, #4]
 800bc70:	e06f      	b.n	800bd52 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	685a      	ldr	r2, [r3, #4]
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bc80:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc86:	699b      	ldr	r3, [r3, #24]
 800bc88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc8c:	d126      	bne.n	800bcdc <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800bc92:	f003 0301 	and.w	r3, r3, #1
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d10f      	bne.n	800bcba <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	685a      	ldr	r2, [r3, #4]
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bca8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bcae:	b29b      	uxth	r3, r3
 800bcb0:	085b      	lsrs	r3, r3, #1
 800bcb2:	b29a      	uxth	r2, r3
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bcb8:	e010      	b.n	800bcdc <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	685a      	ldr	r2, [r3, #4]
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bcc8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bcce:	b29b      	uxth	r3, r3
 800bcd0:	085b      	lsrs	r3, r3, #1
 800bcd2:	b29b      	uxth	r3, r3
 800bcd4:	3301      	adds	r3, #1
 800bcd6:	b29a      	uxth	r2, r3
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bce0:	699b      	ldr	r3, [r3, #24]
 800bce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bce6:	d134      	bne.n	800bd52 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	685a      	ldr	r2, [r3, #4]
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bcf6:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bcfe:	b29b      	uxth	r3, r3
 800bd00:	f003 0301 	and.w	r3, r3, #1
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d111      	bne.n	800bd2c <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	685a      	ldr	r2, [r3, #4]
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bd16:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bd1e:	b29b      	uxth	r3, r3
 800bd20:	085b      	lsrs	r3, r3, #1
 800bd22:	b29a      	uxth	r2, r3
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800bd2a:	e012      	b.n	800bd52 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	685a      	ldr	r2, [r3, #4]
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bd3a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bd42:	b29b      	uxth	r3, r3
 800bd44:	085b      	lsrs	r3, r3, #1
 800bd46:	b29b      	uxth	r3, r3
 800bd48:	3301      	adds	r3, #1
 800bd4a:	b29a      	uxth	r2, r3
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bd58:	b2db      	uxtb	r3, r3
 800bd5a:	2b04      	cmp	r3, #4
 800bd5c:	d108      	bne.n	800bd70 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd62:	4a4a      	ldr	r2, [pc, #296]	; (800be8c <HAL_SPI_TransmitReceive_DMA+0x304>)
 800bd64:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd6a:	4a49      	ldr	r2, [pc, #292]	; (800be90 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800bd6c:	62da      	str	r2, [r3, #44]	; 0x2c
 800bd6e:	e007      	b.n	800bd80 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd74:	4a47      	ldr	r2, [pc, #284]	; (800be94 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800bd76:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd7c:	4a46      	ldr	r2, [pc, #280]	; (800be98 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800bd7e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd84:	4a45      	ldr	r2, [pc, #276]	; (800be9c <HAL_SPI_TransmitReceive_DMA+0x314>)
 800bd86:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	330c      	adds	r3, #12
 800bd9a:	4619      	mov	r1, r3
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bda0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bda8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800bdaa:	f7fb fa19 	bl	80071e0 <HAL_DMA_Start_IT>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d00c      	beq.n	800bdce <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bdb8:	f043 0210 	orr.w	r2, r3, #16
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800bdcc:	e054      	b.n	800be78 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	685a      	ldr	r2, [r3, #4]
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f042 0201 	orr.w	r2, r2, #1
 800bddc:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bde2:	2200      	movs	r2, #0
 800bde4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdea:	2200      	movs	r2, #0
 800bdec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be06:	4619      	mov	r1, r3
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	330c      	adds	r3, #12
 800be0e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be14:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800be16:	f7fb f9e3 	bl	80071e0 <HAL_DMA_Start_IT>
 800be1a:	4603      	mov	r3, r0
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d00c      	beq.n	800be3a <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be24:	f043 0210 	orr.w	r2, r3, #16
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800be2c:	2301      	movs	r3, #1
 800be2e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	2201      	movs	r2, #1
 800be34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800be38:	e01e      	b.n	800be78 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be44:	2b40      	cmp	r3, #64	; 0x40
 800be46:	d007      	beq.n	800be58 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	681a      	ldr	r2, [r3, #0]
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800be56:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	685a      	ldr	r2, [r3, #4]
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	f042 0220 	orr.w	r2, r2, #32
 800be66:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	685a      	ldr	r2, [r3, #4]
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	f042 0202 	orr.w	r2, r2, #2
 800be76:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	2200      	movs	r2, #0
 800be7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800be80:	7dfb      	ldrb	r3, [r7, #23]
}
 800be82:	4618      	mov	r0, r3
 800be84:	3718      	adds	r7, #24
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}
 800be8a:	bf00      	nop
 800be8c:	0800c2f3 	.word	0x0800c2f3
 800be90:	0800c19f 	.word	0x0800c19f
 800be94:	0800c30f 	.word	0x0800c30f
 800be98:	0800c247 	.word	0x0800c247
 800be9c:	0800c32b 	.word	0x0800c32b

0800bea0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b088      	sub	sp, #32
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	685b      	ldr	r3, [r3, #4]
 800beae:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	689b      	ldr	r3, [r3, #8]
 800beb6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800beb8:	69bb      	ldr	r3, [r7, #24]
 800beba:	099b      	lsrs	r3, r3, #6
 800bebc:	f003 0301 	and.w	r3, r3, #1
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d10f      	bne.n	800bee4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800bec4:	69bb      	ldr	r3, [r7, #24]
 800bec6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800beca:	2b00      	cmp	r3, #0
 800becc:	d00a      	beq.n	800bee4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800bece:	69fb      	ldr	r3, [r7, #28]
 800bed0:	099b      	lsrs	r3, r3, #6
 800bed2:	f003 0301 	and.w	r3, r3, #1
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d004      	beq.n	800bee4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	4798      	blx	r3
    return;
 800bee2:	e0d7      	b.n	800c094 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800bee4:	69bb      	ldr	r3, [r7, #24]
 800bee6:	085b      	lsrs	r3, r3, #1
 800bee8:	f003 0301 	and.w	r3, r3, #1
 800beec:	2b00      	cmp	r3, #0
 800beee:	d00a      	beq.n	800bf06 <HAL_SPI_IRQHandler+0x66>
 800bef0:	69fb      	ldr	r3, [r7, #28]
 800bef2:	09db      	lsrs	r3, r3, #7
 800bef4:	f003 0301 	and.w	r3, r3, #1
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d004      	beq.n	800bf06 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	4798      	blx	r3
    return;
 800bf04:	e0c6      	b.n	800c094 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800bf06:	69bb      	ldr	r3, [r7, #24]
 800bf08:	095b      	lsrs	r3, r3, #5
 800bf0a:	f003 0301 	and.w	r3, r3, #1
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d10c      	bne.n	800bf2c <HAL_SPI_IRQHandler+0x8c>
 800bf12:	69bb      	ldr	r3, [r7, #24]
 800bf14:	099b      	lsrs	r3, r3, #6
 800bf16:	f003 0301 	and.w	r3, r3, #1
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d106      	bne.n	800bf2c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800bf1e:	69bb      	ldr	r3, [r7, #24]
 800bf20:	0a1b      	lsrs	r3, r3, #8
 800bf22:	f003 0301 	and.w	r3, r3, #1
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	f000 80b4 	beq.w	800c094 <HAL_SPI_IRQHandler+0x1f4>
 800bf2c:	69fb      	ldr	r3, [r7, #28]
 800bf2e:	095b      	lsrs	r3, r3, #5
 800bf30:	f003 0301 	and.w	r3, r3, #1
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	f000 80ad 	beq.w	800c094 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800bf3a:	69bb      	ldr	r3, [r7, #24]
 800bf3c:	099b      	lsrs	r3, r3, #6
 800bf3e:	f003 0301 	and.w	r3, r3, #1
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d023      	beq.n	800bf8e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bf4c:	b2db      	uxtb	r3, r3
 800bf4e:	2b03      	cmp	r3, #3
 800bf50:	d011      	beq.n	800bf76 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bf56:	f043 0204 	orr.w	r2, r3, #4
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bf5e:	2300      	movs	r3, #0
 800bf60:	617b      	str	r3, [r7, #20]
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	68db      	ldr	r3, [r3, #12]
 800bf68:	617b      	str	r3, [r7, #20]
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	689b      	ldr	r3, [r3, #8]
 800bf70:	617b      	str	r3, [r7, #20]
 800bf72:	697b      	ldr	r3, [r7, #20]
 800bf74:	e00b      	b.n	800bf8e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bf76:	2300      	movs	r3, #0
 800bf78:	613b      	str	r3, [r7, #16]
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	68db      	ldr	r3, [r3, #12]
 800bf80:	613b      	str	r3, [r7, #16]
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	689b      	ldr	r3, [r3, #8]
 800bf88:	613b      	str	r3, [r7, #16]
 800bf8a:	693b      	ldr	r3, [r7, #16]
        return;
 800bf8c:	e082      	b.n	800c094 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800bf8e:	69bb      	ldr	r3, [r7, #24]
 800bf90:	095b      	lsrs	r3, r3, #5
 800bf92:	f003 0301 	and.w	r3, r3, #1
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d014      	beq.n	800bfc4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bf9e:	f043 0201 	orr.w	r2, r3, #1
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	60fb      	str	r3, [r7, #12]
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	689b      	ldr	r3, [r3, #8]
 800bfb0:	60fb      	str	r3, [r7, #12]
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	681a      	ldr	r2, [r3, #0]
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bfc0:	601a      	str	r2, [r3, #0]
 800bfc2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800bfc4:	69bb      	ldr	r3, [r7, #24]
 800bfc6:	0a1b      	lsrs	r3, r3, #8
 800bfc8:	f003 0301 	and.w	r3, r3, #1
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d00c      	beq.n	800bfea <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bfd4:	f043 0208 	orr.w	r2, r3, #8
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bfdc:	2300      	movs	r3, #0
 800bfde:	60bb      	str	r3, [r7, #8]
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	689b      	ldr	r3, [r3, #8]
 800bfe6:	60bb      	str	r3, [r7, #8]
 800bfe8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d04f      	beq.n	800c092 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	685a      	ldr	r2, [r3, #4]
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c000:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2201      	movs	r2, #1
 800c006:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800c00a:	69fb      	ldr	r3, [r7, #28]
 800c00c:	f003 0302 	and.w	r3, r3, #2
 800c010:	2b00      	cmp	r3, #0
 800c012:	d104      	bne.n	800c01e <HAL_SPI_IRQHandler+0x17e>
 800c014:	69fb      	ldr	r3, [r7, #28]
 800c016:	f003 0301 	and.w	r3, r3, #1
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d034      	beq.n	800c088 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	685a      	ldr	r2, [r3, #4]
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f022 0203 	bic.w	r2, r2, #3
 800c02c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c032:	2b00      	cmp	r3, #0
 800c034:	d011      	beq.n	800c05a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c03a:	4a18      	ldr	r2, [pc, #96]	; (800c09c <HAL_SPI_IRQHandler+0x1fc>)
 800c03c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c042:	4618      	mov	r0, r3
 800c044:	f7fb f96a 	bl	800731c <HAL_DMA_Abort_IT>
 800c048:	4603      	mov	r3, r0
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d005      	beq.n	800c05a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c052:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d016      	beq.n	800c090 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c066:	4a0d      	ldr	r2, [pc, #52]	; (800c09c <HAL_SPI_IRQHandler+0x1fc>)
 800c068:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c06e:	4618      	mov	r0, r3
 800c070:	f7fb f954 	bl	800731c <HAL_DMA_Abort_IT>
 800c074:	4603      	mov	r3, r0
 800c076:	2b00      	cmp	r3, #0
 800c078:	d00a      	beq.n	800c090 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c07e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800c086:	e003      	b.n	800c090 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f7f8 feb3 	bl	8004df4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800c08e:	e000      	b.n	800c092 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800c090:	bf00      	nop
    return;
 800c092:	bf00      	nop
  }
}
 800c094:	3720      	adds	r7, #32
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}
 800c09a:	bf00      	nop
 800c09c:	0800c36b 	.word	0x0800c36b

0800c0a0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b083      	sub	sp, #12
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800c0a8:	bf00      	nop
 800c0aa:	370c      	adds	r7, #12
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b2:	4770      	bx	lr

0800c0b4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b083      	sub	sp, #12
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800c0bc:	bf00      	nop
 800c0be:	370c      	adds	r7, #12
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	4770      	bx	lr

0800c0c8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b083      	sub	sp, #12
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800c0d0:	bf00      	nop
 800c0d2:	370c      	adds	r7, #12
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0da:	4770      	bx	lr

0800c0dc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b083      	sub	sp, #12
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c0ea:	b2db      	uxtb	r3, r3
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	370c      	adds	r7, #12
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f6:	4770      	bx	lr

0800c0f8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b086      	sub	sp, #24
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c104:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c106:	f7fa fe3f 	bl	8006d88 <HAL_GetTick>
 800c10a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f003 0320 	and.w	r3, r3, #32
 800c116:	2b20      	cmp	r3, #32
 800c118:	d03b      	beq.n	800c192 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c11a:	697b      	ldr	r3, [r7, #20]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	685a      	ldr	r2, [r3, #4]
 800c120:	697b      	ldr	r3, [r7, #20]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f022 0220 	bic.w	r2, r2, #32
 800c128:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	685a      	ldr	r2, [r3, #4]
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f022 0202 	bic.w	r2, r2, #2
 800c138:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c13a:	693a      	ldr	r2, [r7, #16]
 800c13c:	2164      	movs	r1, #100	; 0x64
 800c13e:	6978      	ldr	r0, [r7, #20]
 800c140:	f000 fa9e 	bl	800c680 <SPI_EndRxTxTransaction>
 800c144:	4603      	mov	r3, r0
 800c146:	2b00      	cmp	r3, #0
 800c148:	d005      	beq.n	800c156 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c14a:	697b      	ldr	r3, [r7, #20]
 800c14c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c14e:	f043 0220 	orr.w	r2, r3, #32
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	689b      	ldr	r3, [r3, #8]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d10a      	bne.n	800c174 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c15e:	2300      	movs	r3, #0
 800c160:	60fb      	str	r3, [r7, #12]
 800c162:	697b      	ldr	r3, [r7, #20]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	68db      	ldr	r3, [r3, #12]
 800c168:	60fb      	str	r3, [r7, #12]
 800c16a:	697b      	ldr	r3, [r7, #20]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	689b      	ldr	r3, [r3, #8]
 800c170:	60fb      	str	r3, [r7, #12]
 800c172:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	2200      	movs	r2, #0
 800c178:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	2201      	movs	r2, #1
 800c17e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c186:	2b00      	cmp	r3, #0
 800c188:	d003      	beq.n	800c192 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c18a:	6978      	ldr	r0, [r7, #20]
 800c18c:	f7f8 fe32 	bl	8004df4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c190:	e002      	b.n	800c198 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800c192:	6978      	ldr	r0, [r7, #20]
 800c194:	f7f8 fe17 	bl	8004dc6 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c198:	3718      	adds	r7, #24
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}

0800c19e <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c19e:	b580      	push	{r7, lr}
 800c1a0:	b084      	sub	sp, #16
 800c1a2:	af00      	add	r7, sp, #0
 800c1a4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1aa:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c1ac:	f7fa fdec 	bl	8006d88 <HAL_GetTick>
 800c1b0:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	f003 0320 	and.w	r3, r3, #32
 800c1bc:	2b20      	cmp	r3, #32
 800c1be:	d03c      	beq.n	800c23a <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	685a      	ldr	r2, [r3, #4]
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f022 0220 	bic.w	r2, r2, #32
 800c1ce:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	689b      	ldr	r3, [r3, #8]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d10d      	bne.n	800c1f4 <SPI_DMAReceiveCplt+0x56>
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	685b      	ldr	r3, [r3, #4]
 800c1dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c1e0:	d108      	bne.n	800c1f4 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	685a      	ldr	r2, [r3, #4]
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	f022 0203 	bic.w	r2, r2, #3
 800c1f0:	605a      	str	r2, [r3, #4]
 800c1f2:	e007      	b.n	800c204 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	685a      	ldr	r2, [r3, #4]
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f022 0201 	bic.w	r2, r2, #1
 800c202:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c204:	68ba      	ldr	r2, [r7, #8]
 800c206:	2164      	movs	r1, #100	; 0x64
 800c208:	68f8      	ldr	r0, [r7, #12]
 800c20a:	f000 f9e1 	bl	800c5d0 <SPI_EndRxTransaction>
 800c20e:	4603      	mov	r3, r0
 800c210:	2b00      	cmp	r3, #0
 800c212:	d002      	beq.n	800c21a <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	2220      	movs	r2, #32
 800c218:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	2200      	movs	r2, #0
 800c21e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	2201      	movs	r2, #1
 800c226:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d003      	beq.n	800c23a <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c232:	68f8      	ldr	r0, [r7, #12]
 800c234:	f7f8 fdde 	bl	8004df4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c238:	e002      	b.n	800c240 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800c23a:	68f8      	ldr	r0, [r7, #12]
 800c23c:	f7f8 fdb8 	bl	8004db0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c240:	3710      	adds	r7, #16
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}

0800c246 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c246:	b580      	push	{r7, lr}
 800c248:	b084      	sub	sp, #16
 800c24a:	af00      	add	r7, sp, #0
 800c24c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c252:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c254:	f7fa fd98 	bl	8006d88 <HAL_GetTick>
 800c258:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	f003 0320 	and.w	r3, r3, #32
 800c264:	2b20      	cmp	r3, #32
 800c266:	d030      	beq.n	800c2ca <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	685a      	ldr	r2, [r3, #4]
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	f022 0220 	bic.w	r2, r2, #32
 800c276:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c278:	68ba      	ldr	r2, [r7, #8]
 800c27a:	2164      	movs	r1, #100	; 0x64
 800c27c:	68f8      	ldr	r0, [r7, #12]
 800c27e:	f000 f9ff 	bl	800c680 <SPI_EndRxTxTransaction>
 800c282:	4603      	mov	r3, r0
 800c284:	2b00      	cmp	r3, #0
 800c286:	d005      	beq.n	800c294 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c28c:	f043 0220 	orr.w	r2, r3, #32
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	685a      	ldr	r2, [r3, #4]
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	f022 0203 	bic.w	r2, r2, #3
 800c2a2:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	2201      	movs	r2, #1
 800c2b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d003      	beq.n	800c2ca <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c2c2:	68f8      	ldr	r0, [r7, #12]
 800c2c4:	f7f8 fd96 	bl	8004df4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c2c8:	e002      	b.n	800c2d0 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800c2ca:	68f8      	ldr	r0, [r7, #12]
 800c2cc:	f7f8 fd86 	bl	8004ddc <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c2d0:	3710      	adds	r7, #16
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}

0800c2d6 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c2d6:	b580      	push	{r7, lr}
 800c2d8:	b084      	sub	sp, #16
 800c2da:	af00      	add	r7, sp, #0
 800c2dc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2e2:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800c2e4:	68f8      	ldr	r0, [r7, #12]
 800c2e6:	f7ff fedb 	bl	800c0a0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c2ea:	bf00      	nop
 800c2ec:	3710      	adds	r7, #16
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}

0800c2f2 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c2f2:	b580      	push	{r7, lr}
 800c2f4:	b084      	sub	sp, #16
 800c2f6:	af00      	add	r7, sp, #0
 800c2f8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2fe:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800c300:	68f8      	ldr	r0, [r7, #12]
 800c302:	f7ff fed7 	bl	800c0b4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c306:	bf00      	nop
 800c308:	3710      	adds	r7, #16
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}

0800c30e <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c30e:	b580      	push	{r7, lr}
 800c310:	b084      	sub	sp, #16
 800c312:	af00      	add	r7, sp, #0
 800c314:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c31a:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800c31c:	68f8      	ldr	r0, [r7, #12]
 800c31e:	f7ff fed3 	bl	800c0c8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c322:	bf00      	nop
 800c324:	3710      	adds	r7, #16
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}

0800c32a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800c32a:	b580      	push	{r7, lr}
 800c32c:	b084      	sub	sp, #16
 800c32e:	af00      	add	r7, sp, #0
 800c330:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c336:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	685a      	ldr	r2, [r3, #4]
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f022 0203 	bic.w	r2, r2, #3
 800c346:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c34c:	f043 0210 	orr.w	r2, r3, #16
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	2201      	movs	r2, #1
 800c358:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c35c:	68f8      	ldr	r0, [r7, #12]
 800c35e:	f7f8 fd49 	bl	8004df4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c362:	bf00      	nop
 800c364:	3710      	adds	r7, #16
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}

0800c36a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c36a:	b580      	push	{r7, lr}
 800c36c:	b084      	sub	sp, #16
 800c36e:	af00      	add	r7, sp, #0
 800c370:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c376:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	2200      	movs	r2, #0
 800c37c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	2200      	movs	r2, #0
 800c384:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c386:	68f8      	ldr	r0, [r7, #12]
 800c388:	f7f8 fd34 	bl	8004df4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c38c:	bf00      	nop
 800c38e:	3710      	adds	r7, #16
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}

0800c394 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b088      	sub	sp, #32
 800c398:	af00      	add	r7, sp, #0
 800c39a:	60f8      	str	r0, [r7, #12]
 800c39c:	60b9      	str	r1, [r7, #8]
 800c39e:	603b      	str	r3, [r7, #0]
 800c3a0:	4613      	mov	r3, r2
 800c3a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c3a4:	f7fa fcf0 	bl	8006d88 <HAL_GetTick>
 800c3a8:	4602      	mov	r2, r0
 800c3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ac:	1a9b      	subs	r3, r3, r2
 800c3ae:	683a      	ldr	r2, [r7, #0]
 800c3b0:	4413      	add	r3, r2
 800c3b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c3b4:	f7fa fce8 	bl	8006d88 <HAL_GetTick>
 800c3b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c3ba:	4b39      	ldr	r3, [pc, #228]	; (800c4a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	015b      	lsls	r3, r3, #5
 800c3c0:	0d1b      	lsrs	r3, r3, #20
 800c3c2:	69fa      	ldr	r2, [r7, #28]
 800c3c4:	fb02 f303 	mul.w	r3, r2, r3
 800c3c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c3ca:	e054      	b.n	800c476 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c3d2:	d050      	beq.n	800c476 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c3d4:	f7fa fcd8 	bl	8006d88 <HAL_GetTick>
 800c3d8:	4602      	mov	r2, r0
 800c3da:	69bb      	ldr	r3, [r7, #24]
 800c3dc:	1ad3      	subs	r3, r2, r3
 800c3de:	69fa      	ldr	r2, [r7, #28]
 800c3e0:	429a      	cmp	r2, r3
 800c3e2:	d902      	bls.n	800c3ea <SPI_WaitFlagStateUntilTimeout+0x56>
 800c3e4:	69fb      	ldr	r3, [r7, #28]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d13d      	bne.n	800c466 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	685a      	ldr	r2, [r3, #4]
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c3f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	685b      	ldr	r3, [r3, #4]
 800c3fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c402:	d111      	bne.n	800c428 <SPI_WaitFlagStateUntilTimeout+0x94>
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	689b      	ldr	r3, [r3, #8]
 800c408:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c40c:	d004      	beq.n	800c418 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	689b      	ldr	r3, [r3, #8]
 800c412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c416:	d107      	bne.n	800c428 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	681a      	ldr	r2, [r3, #0]
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c426:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c42c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c430:	d10f      	bne.n	800c452 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	681a      	ldr	r2, [r3, #0]
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c440:	601a      	str	r2, [r3, #0]
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	681a      	ldr	r2, [r3, #0]
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c450:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	2201      	movs	r2, #1
 800c456:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	2200      	movs	r2, #0
 800c45e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c462:	2303      	movs	r3, #3
 800c464:	e017      	b.n	800c496 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d101      	bne.n	800c470 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c46c:	2300      	movs	r3, #0
 800c46e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c470:	697b      	ldr	r3, [r7, #20]
 800c472:	3b01      	subs	r3, #1
 800c474:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	689a      	ldr	r2, [r3, #8]
 800c47c:	68bb      	ldr	r3, [r7, #8]
 800c47e:	4013      	ands	r3, r2
 800c480:	68ba      	ldr	r2, [r7, #8]
 800c482:	429a      	cmp	r2, r3
 800c484:	bf0c      	ite	eq
 800c486:	2301      	moveq	r3, #1
 800c488:	2300      	movne	r3, #0
 800c48a:	b2db      	uxtb	r3, r3
 800c48c:	461a      	mov	r2, r3
 800c48e:	79fb      	ldrb	r3, [r7, #7]
 800c490:	429a      	cmp	r2, r3
 800c492:	d19b      	bne.n	800c3cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c494:	2300      	movs	r3, #0
}
 800c496:	4618      	mov	r0, r3
 800c498:	3720      	adds	r7, #32
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}
 800c49e:	bf00      	nop
 800c4a0:	20000204 	.word	0x20000204

0800c4a4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b08a      	sub	sp, #40	; 0x28
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	60f8      	str	r0, [r7, #12]
 800c4ac:	60b9      	str	r1, [r7, #8]
 800c4ae:	607a      	str	r2, [r7, #4]
 800c4b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800c4b6:	f7fa fc67 	bl	8006d88 <HAL_GetTick>
 800c4ba:	4602      	mov	r2, r0
 800c4bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4be:	1a9b      	subs	r3, r3, r2
 800c4c0:	683a      	ldr	r2, [r7, #0]
 800c4c2:	4413      	add	r3, r2
 800c4c4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800c4c6:	f7fa fc5f 	bl	8006d88 <HAL_GetTick>
 800c4ca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	330c      	adds	r3, #12
 800c4d2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800c4d4:	4b3d      	ldr	r3, [pc, #244]	; (800c5cc <SPI_WaitFifoStateUntilTimeout+0x128>)
 800c4d6:	681a      	ldr	r2, [r3, #0]
 800c4d8:	4613      	mov	r3, r2
 800c4da:	009b      	lsls	r3, r3, #2
 800c4dc:	4413      	add	r3, r2
 800c4de:	00da      	lsls	r2, r3, #3
 800c4e0:	1ad3      	subs	r3, r2, r3
 800c4e2:	0d1b      	lsrs	r3, r3, #20
 800c4e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4e6:	fb02 f303 	mul.w	r3, r2, r3
 800c4ea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800c4ec:	e060      	b.n	800c5b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c4f4:	d107      	bne.n	800c506 <SPI_WaitFifoStateUntilTimeout+0x62>
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d104      	bne.n	800c506 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800c4fc:	69fb      	ldr	r3, [r7, #28]
 800c4fe:	781b      	ldrb	r3, [r3, #0]
 800c500:	b2db      	uxtb	r3, r3
 800c502:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800c504:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c50c:	d050      	beq.n	800c5b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c50e:	f7fa fc3b 	bl	8006d88 <HAL_GetTick>
 800c512:	4602      	mov	r2, r0
 800c514:	6a3b      	ldr	r3, [r7, #32]
 800c516:	1ad3      	subs	r3, r2, r3
 800c518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c51a:	429a      	cmp	r2, r3
 800c51c:	d902      	bls.n	800c524 <SPI_WaitFifoStateUntilTimeout+0x80>
 800c51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c520:	2b00      	cmp	r3, #0
 800c522:	d13d      	bne.n	800c5a0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	685a      	ldr	r2, [r3, #4]
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c532:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	685b      	ldr	r3, [r3, #4]
 800c538:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c53c:	d111      	bne.n	800c562 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	689b      	ldr	r3, [r3, #8]
 800c542:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c546:	d004      	beq.n	800c552 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	689b      	ldr	r3, [r3, #8]
 800c54c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c550:	d107      	bne.n	800c562 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	681a      	ldr	r2, [r3, #0]
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c560:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c56a:	d10f      	bne.n	800c58c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	681a      	ldr	r2, [r3, #0]
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c57a:	601a      	str	r2, [r3, #0]
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	681a      	ldr	r2, [r3, #0]
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c58a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	2201      	movs	r2, #1
 800c590:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	2200      	movs	r2, #0
 800c598:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c59c:	2303      	movs	r3, #3
 800c59e:	e010      	b.n	800c5c2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c5a0:	69bb      	ldr	r3, [r7, #24]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d101      	bne.n	800c5aa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800c5aa:	69bb      	ldr	r3, [r7, #24]
 800c5ac:	3b01      	subs	r3, #1
 800c5ae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	689a      	ldr	r2, [r3, #8]
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	4013      	ands	r3, r2
 800c5ba:	687a      	ldr	r2, [r7, #4]
 800c5bc:	429a      	cmp	r2, r3
 800c5be:	d196      	bne.n	800c4ee <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800c5c0:	2300      	movs	r3, #0
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	3728      	adds	r7, #40	; 0x28
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}
 800c5ca:	bf00      	nop
 800c5cc:	20000204 	.word	0x20000204

0800c5d0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b086      	sub	sp, #24
 800c5d4:	af02      	add	r7, sp, #8
 800c5d6:	60f8      	str	r0, [r7, #12]
 800c5d8:	60b9      	str	r1, [r7, #8]
 800c5da:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	685b      	ldr	r3, [r3, #4]
 800c5e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c5e4:	d111      	bne.n	800c60a <SPI_EndRxTransaction+0x3a>
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	689b      	ldr	r3, [r3, #8]
 800c5ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c5ee:	d004      	beq.n	800c5fa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	689b      	ldr	r3, [r3, #8]
 800c5f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c5f8:	d107      	bne.n	800c60a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	681a      	ldr	r2, [r3, #0]
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c608:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	9300      	str	r3, [sp, #0]
 800c60e:	68bb      	ldr	r3, [r7, #8]
 800c610:	2200      	movs	r2, #0
 800c612:	2180      	movs	r1, #128	; 0x80
 800c614:	68f8      	ldr	r0, [r7, #12]
 800c616:	f7ff febd 	bl	800c394 <SPI_WaitFlagStateUntilTimeout>
 800c61a:	4603      	mov	r3, r0
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d007      	beq.n	800c630 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c624:	f043 0220 	orr.w	r2, r3, #32
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c62c:	2303      	movs	r3, #3
 800c62e:	e023      	b.n	800c678 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	685b      	ldr	r3, [r3, #4]
 800c634:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c638:	d11d      	bne.n	800c676 <SPI_EndRxTransaction+0xa6>
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	689b      	ldr	r3, [r3, #8]
 800c63e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c642:	d004      	beq.n	800c64e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	689b      	ldr	r3, [r3, #8]
 800c648:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c64c:	d113      	bne.n	800c676 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	9300      	str	r3, [sp, #0]
 800c652:	68bb      	ldr	r3, [r7, #8]
 800c654:	2200      	movs	r2, #0
 800c656:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c65a:	68f8      	ldr	r0, [r7, #12]
 800c65c:	f7ff ff22 	bl	800c4a4 <SPI_WaitFifoStateUntilTimeout>
 800c660:	4603      	mov	r3, r0
 800c662:	2b00      	cmp	r3, #0
 800c664:	d007      	beq.n	800c676 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c66a:	f043 0220 	orr.w	r2, r3, #32
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800c672:	2303      	movs	r3, #3
 800c674:	e000      	b.n	800c678 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800c676:	2300      	movs	r3, #0
}
 800c678:	4618      	mov	r0, r3
 800c67a:	3710      	adds	r7, #16
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}

0800c680 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b086      	sub	sp, #24
 800c684:	af02      	add	r7, sp, #8
 800c686:	60f8      	str	r0, [r7, #12]
 800c688:	60b9      	str	r1, [r7, #8]
 800c68a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	9300      	str	r3, [sp, #0]
 800c690:	68bb      	ldr	r3, [r7, #8]
 800c692:	2200      	movs	r2, #0
 800c694:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800c698:	68f8      	ldr	r0, [r7, #12]
 800c69a:	f7ff ff03 	bl	800c4a4 <SPI_WaitFifoStateUntilTimeout>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d007      	beq.n	800c6b4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c6a8:	f043 0220 	orr.w	r2, r3, #32
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c6b0:	2303      	movs	r3, #3
 800c6b2:	e027      	b.n	800c704 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	9300      	str	r3, [sp, #0]
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	2180      	movs	r1, #128	; 0x80
 800c6be:	68f8      	ldr	r0, [r7, #12]
 800c6c0:	f7ff fe68 	bl	800c394 <SPI_WaitFlagStateUntilTimeout>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d007      	beq.n	800c6da <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c6ce:	f043 0220 	orr.w	r2, r3, #32
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c6d6:	2303      	movs	r3, #3
 800c6d8:	e014      	b.n	800c704 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	9300      	str	r3, [sp, #0]
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c6e6:	68f8      	ldr	r0, [r7, #12]
 800c6e8:	f7ff fedc 	bl	800c4a4 <SPI_WaitFifoStateUntilTimeout>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d007      	beq.n	800c702 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c6f6:	f043 0220 	orr.w	r2, r3, #32
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c6fe:	2303      	movs	r3, #3
 800c700:	e000      	b.n	800c704 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800c702:	2300      	movs	r3, #0
}
 800c704:	4618      	mov	r0, r3
 800c706:	3710      	adds	r7, #16
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}

0800c70c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b082      	sub	sp, #8
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d101      	bne.n	800c71e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c71a:	2301      	movs	r3, #1
 800c71c:	e049      	b.n	800c7b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c724:	b2db      	uxtb	r3, r3
 800c726:	2b00      	cmp	r3, #0
 800c728:	d106      	bne.n	800c738 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2200      	movs	r2, #0
 800c72e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f7f9 fa56 	bl	8005be4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2202      	movs	r2, #2
 800c73c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681a      	ldr	r2, [r3, #0]
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	3304      	adds	r3, #4
 800c748:	4619      	mov	r1, r3
 800c74a:	4610      	mov	r0, r2
 800c74c:	f000 fae6 	bl	800cd1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2201      	movs	r2, #1
 800c754:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2201      	movs	r2, #1
 800c75c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2201      	movs	r2, #1
 800c764:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2201      	movs	r2, #1
 800c76c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2201      	movs	r2, #1
 800c774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2201      	movs	r2, #1
 800c77c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2201      	movs	r2, #1
 800c784:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2201      	movs	r2, #1
 800c78c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2201      	movs	r2, #1
 800c794:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2201      	movs	r2, #1
 800c79c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2201      	movs	r2, #1
 800c7a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c7b0:	2300      	movs	r3, #0
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	3708      	adds	r7, #8
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}
	...

0800c7bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c7bc:	b480      	push	{r7}
 800c7be:	b085      	sub	sp, #20
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c7ca:	b2db      	uxtb	r3, r3
 800c7cc:	2b01      	cmp	r3, #1
 800c7ce:	d001      	beq.n	800c7d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	e04f      	b.n	800c874 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2202      	movs	r2, #2
 800c7d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	68da      	ldr	r2, [r3, #12]
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	f042 0201 	orr.w	r2, r2, #1
 800c7ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	4a23      	ldr	r2, [pc, #140]	; (800c880 <HAL_TIM_Base_Start_IT+0xc4>)
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d01d      	beq.n	800c832 <HAL_TIM_Base_Start_IT+0x76>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7fe:	d018      	beq.n	800c832 <HAL_TIM_Base_Start_IT+0x76>
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	4a1f      	ldr	r2, [pc, #124]	; (800c884 <HAL_TIM_Base_Start_IT+0xc8>)
 800c806:	4293      	cmp	r3, r2
 800c808:	d013      	beq.n	800c832 <HAL_TIM_Base_Start_IT+0x76>
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	4a1e      	ldr	r2, [pc, #120]	; (800c888 <HAL_TIM_Base_Start_IT+0xcc>)
 800c810:	4293      	cmp	r3, r2
 800c812:	d00e      	beq.n	800c832 <HAL_TIM_Base_Start_IT+0x76>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	4a1c      	ldr	r2, [pc, #112]	; (800c88c <HAL_TIM_Base_Start_IT+0xd0>)
 800c81a:	4293      	cmp	r3, r2
 800c81c:	d009      	beq.n	800c832 <HAL_TIM_Base_Start_IT+0x76>
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	4a1b      	ldr	r2, [pc, #108]	; (800c890 <HAL_TIM_Base_Start_IT+0xd4>)
 800c824:	4293      	cmp	r3, r2
 800c826:	d004      	beq.n	800c832 <HAL_TIM_Base_Start_IT+0x76>
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	4a19      	ldr	r2, [pc, #100]	; (800c894 <HAL_TIM_Base_Start_IT+0xd8>)
 800c82e:	4293      	cmp	r3, r2
 800c830:	d115      	bne.n	800c85e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	689a      	ldr	r2, [r3, #8]
 800c838:	4b17      	ldr	r3, [pc, #92]	; (800c898 <HAL_TIM_Base_Start_IT+0xdc>)
 800c83a:	4013      	ands	r3, r2
 800c83c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	2b06      	cmp	r3, #6
 800c842:	d015      	beq.n	800c870 <HAL_TIM_Base_Start_IT+0xb4>
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c84a:	d011      	beq.n	800c870 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	681a      	ldr	r2, [r3, #0]
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	f042 0201 	orr.w	r2, r2, #1
 800c85a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c85c:	e008      	b.n	800c870 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	681a      	ldr	r2, [r3, #0]
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	f042 0201 	orr.w	r2, r2, #1
 800c86c:	601a      	str	r2, [r3, #0]
 800c86e:	e000      	b.n	800c872 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c870:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c872:	2300      	movs	r3, #0
}
 800c874:	4618      	mov	r0, r3
 800c876:	3714      	adds	r7, #20
 800c878:	46bd      	mov	sp, r7
 800c87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87e:	4770      	bx	lr
 800c880:	40012c00 	.word	0x40012c00
 800c884:	40000400 	.word	0x40000400
 800c888:	40000800 	.word	0x40000800
 800c88c:	40000c00 	.word	0x40000c00
 800c890:	40013400 	.word	0x40013400
 800c894:	40014000 	.word	0x40014000
 800c898:	00010007 	.word	0x00010007

0800c89c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800c89c:	b480      	push	{r7}
 800c89e:	b083      	sub	sp, #12
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	68da      	ldr	r2, [r3, #12]
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	f022 0201 	bic.w	r2, r2, #1
 800c8b2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	6a1a      	ldr	r2, [r3, #32]
 800c8ba:	f241 1311 	movw	r3, #4369	; 0x1111
 800c8be:	4013      	ands	r3, r2
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d10f      	bne.n	800c8e4 <HAL_TIM_Base_Stop_IT+0x48>
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	6a1a      	ldr	r2, [r3, #32]
 800c8ca:	f240 4344 	movw	r3, #1092	; 0x444
 800c8ce:	4013      	ands	r3, r2
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d107      	bne.n	800c8e4 <HAL_TIM_Base_Stop_IT+0x48>
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	681a      	ldr	r2, [r3, #0]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	f022 0201 	bic.w	r2, r2, #1
 800c8e2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2201      	movs	r2, #1
 800c8e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c8ec:	2300      	movs	r3, #0
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	370c      	adds	r7, #12
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f8:	4770      	bx	lr

0800c8fa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c8fa:	b580      	push	{r7, lr}
 800c8fc:	b082      	sub	sp, #8
 800c8fe:	af00      	add	r7, sp, #0
 800c900:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	691b      	ldr	r3, [r3, #16]
 800c908:	f003 0302 	and.w	r3, r3, #2
 800c90c:	2b02      	cmp	r3, #2
 800c90e:	d122      	bne.n	800c956 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	68db      	ldr	r3, [r3, #12]
 800c916:	f003 0302 	and.w	r3, r3, #2
 800c91a:	2b02      	cmp	r3, #2
 800c91c:	d11b      	bne.n	800c956 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	f06f 0202 	mvn.w	r2, #2
 800c926:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2201      	movs	r2, #1
 800c92c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	699b      	ldr	r3, [r3, #24]
 800c934:	f003 0303 	and.w	r3, r3, #3
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d003      	beq.n	800c944 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f000 f9ce 	bl	800ccde <HAL_TIM_IC_CaptureCallback>
 800c942:	e005      	b.n	800c950 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f000 f9c0 	bl	800ccca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c94a:	6878      	ldr	r0, [r7, #4]
 800c94c:	f000 f9d1 	bl	800ccf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2200      	movs	r2, #0
 800c954:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	691b      	ldr	r3, [r3, #16]
 800c95c:	f003 0304 	and.w	r3, r3, #4
 800c960:	2b04      	cmp	r3, #4
 800c962:	d122      	bne.n	800c9aa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	68db      	ldr	r3, [r3, #12]
 800c96a:	f003 0304 	and.w	r3, r3, #4
 800c96e:	2b04      	cmp	r3, #4
 800c970:	d11b      	bne.n	800c9aa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	f06f 0204 	mvn.w	r2, #4
 800c97a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2202      	movs	r2, #2
 800c980:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	699b      	ldr	r3, [r3, #24]
 800c988:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d003      	beq.n	800c998 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f000 f9a4 	bl	800ccde <HAL_TIM_IC_CaptureCallback>
 800c996:	e005      	b.n	800c9a4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f000 f996 	bl	800ccca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	f000 f9a7 	bl	800ccf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	691b      	ldr	r3, [r3, #16]
 800c9b0:	f003 0308 	and.w	r3, r3, #8
 800c9b4:	2b08      	cmp	r3, #8
 800c9b6:	d122      	bne.n	800c9fe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	68db      	ldr	r3, [r3, #12]
 800c9be:	f003 0308 	and.w	r3, r3, #8
 800c9c2:	2b08      	cmp	r3, #8
 800c9c4:	d11b      	bne.n	800c9fe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	f06f 0208 	mvn.w	r2, #8
 800c9ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2204      	movs	r2, #4
 800c9d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	69db      	ldr	r3, [r3, #28]
 800c9dc:	f003 0303 	and.w	r3, r3, #3
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d003      	beq.n	800c9ec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c9e4:	6878      	ldr	r0, [r7, #4]
 800c9e6:	f000 f97a 	bl	800ccde <HAL_TIM_IC_CaptureCallback>
 800c9ea:	e005      	b.n	800c9f8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c9ec:	6878      	ldr	r0, [r7, #4]
 800c9ee:	f000 f96c 	bl	800ccca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	f000 f97d 	bl	800ccf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	691b      	ldr	r3, [r3, #16]
 800ca04:	f003 0310 	and.w	r3, r3, #16
 800ca08:	2b10      	cmp	r3, #16
 800ca0a:	d122      	bne.n	800ca52 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	68db      	ldr	r3, [r3, #12]
 800ca12:	f003 0310 	and.w	r3, r3, #16
 800ca16:	2b10      	cmp	r3, #16
 800ca18:	d11b      	bne.n	800ca52 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	f06f 0210 	mvn.w	r2, #16
 800ca22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2208      	movs	r2, #8
 800ca28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	69db      	ldr	r3, [r3, #28]
 800ca30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d003      	beq.n	800ca40 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f000 f950 	bl	800ccde <HAL_TIM_IC_CaptureCallback>
 800ca3e:	e005      	b.n	800ca4c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	f000 f942 	bl	800ccca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f000 f953 	bl	800ccf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2200      	movs	r2, #0
 800ca50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	691b      	ldr	r3, [r3, #16]
 800ca58:	f003 0301 	and.w	r3, r3, #1
 800ca5c:	2b01      	cmp	r3, #1
 800ca5e:	d10e      	bne.n	800ca7e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	68db      	ldr	r3, [r3, #12]
 800ca66:	f003 0301 	and.w	r3, r3, #1
 800ca6a:	2b01      	cmp	r3, #1
 800ca6c:	d107      	bne.n	800ca7e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	f06f 0201 	mvn.w	r2, #1
 800ca76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f7f7 fd81 	bl	8004580 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	691b      	ldr	r3, [r3, #16]
 800ca84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca88:	2b80      	cmp	r3, #128	; 0x80
 800ca8a:	d10e      	bne.n	800caaa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	68db      	ldr	r3, [r3, #12]
 800ca92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca96:	2b80      	cmp	r3, #128	; 0x80
 800ca98:	d107      	bne.n	800caaa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800caa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f000 faff 	bl	800d0a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	691b      	ldr	r3, [r3, #16]
 800cab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cab4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cab8:	d10e      	bne.n	800cad8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	68db      	ldr	r3, [r3, #12]
 800cac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cac4:	2b80      	cmp	r3, #128	; 0x80
 800cac6:	d107      	bne.n	800cad8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f000 faf2 	bl	800d0bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	691b      	ldr	r3, [r3, #16]
 800cade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cae2:	2b40      	cmp	r3, #64	; 0x40
 800cae4:	d10e      	bne.n	800cb04 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	68db      	ldr	r3, [r3, #12]
 800caec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800caf0:	2b40      	cmp	r3, #64	; 0x40
 800caf2:	d107      	bne.n	800cb04 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cafc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cafe:	6878      	ldr	r0, [r7, #4]
 800cb00:	f000 f901 	bl	800cd06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	691b      	ldr	r3, [r3, #16]
 800cb0a:	f003 0320 	and.w	r3, r3, #32
 800cb0e:	2b20      	cmp	r3, #32
 800cb10:	d10e      	bne.n	800cb30 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	68db      	ldr	r3, [r3, #12]
 800cb18:	f003 0320 	and.w	r3, r3, #32
 800cb1c:	2b20      	cmp	r3, #32
 800cb1e:	d107      	bne.n	800cb30 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	f06f 0220 	mvn.w	r2, #32
 800cb28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f000 fab2 	bl	800d094 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cb30:	bf00      	nop
 800cb32:	3708      	adds	r7, #8
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}

0800cb38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b084      	sub	sp, #16
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
 800cb40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cb42:	2300      	movs	r3, #0
 800cb44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cb4c:	2b01      	cmp	r3, #1
 800cb4e:	d101      	bne.n	800cb54 <HAL_TIM_ConfigClockSource+0x1c>
 800cb50:	2302      	movs	r3, #2
 800cb52:	e0b6      	b.n	800ccc2 <HAL_TIM_ConfigClockSource+0x18a>
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2201      	movs	r2, #1
 800cb58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	2202      	movs	r2, #2
 800cb60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	689b      	ldr	r3, [r3, #8]
 800cb6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cb72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800cb76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cb78:	68bb      	ldr	r3, [r7, #8]
 800cb7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cb7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	68ba      	ldr	r2, [r7, #8]
 800cb86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb90:	d03e      	beq.n	800cc10 <HAL_TIM_ConfigClockSource+0xd8>
 800cb92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb96:	f200 8087 	bhi.w	800cca8 <HAL_TIM_ConfigClockSource+0x170>
 800cb9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb9e:	f000 8086 	beq.w	800ccae <HAL_TIM_ConfigClockSource+0x176>
 800cba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cba6:	d87f      	bhi.n	800cca8 <HAL_TIM_ConfigClockSource+0x170>
 800cba8:	2b70      	cmp	r3, #112	; 0x70
 800cbaa:	d01a      	beq.n	800cbe2 <HAL_TIM_ConfigClockSource+0xaa>
 800cbac:	2b70      	cmp	r3, #112	; 0x70
 800cbae:	d87b      	bhi.n	800cca8 <HAL_TIM_ConfigClockSource+0x170>
 800cbb0:	2b60      	cmp	r3, #96	; 0x60
 800cbb2:	d050      	beq.n	800cc56 <HAL_TIM_ConfigClockSource+0x11e>
 800cbb4:	2b60      	cmp	r3, #96	; 0x60
 800cbb6:	d877      	bhi.n	800cca8 <HAL_TIM_ConfigClockSource+0x170>
 800cbb8:	2b50      	cmp	r3, #80	; 0x50
 800cbba:	d03c      	beq.n	800cc36 <HAL_TIM_ConfigClockSource+0xfe>
 800cbbc:	2b50      	cmp	r3, #80	; 0x50
 800cbbe:	d873      	bhi.n	800cca8 <HAL_TIM_ConfigClockSource+0x170>
 800cbc0:	2b40      	cmp	r3, #64	; 0x40
 800cbc2:	d058      	beq.n	800cc76 <HAL_TIM_ConfigClockSource+0x13e>
 800cbc4:	2b40      	cmp	r3, #64	; 0x40
 800cbc6:	d86f      	bhi.n	800cca8 <HAL_TIM_ConfigClockSource+0x170>
 800cbc8:	2b30      	cmp	r3, #48	; 0x30
 800cbca:	d064      	beq.n	800cc96 <HAL_TIM_ConfigClockSource+0x15e>
 800cbcc:	2b30      	cmp	r3, #48	; 0x30
 800cbce:	d86b      	bhi.n	800cca8 <HAL_TIM_ConfigClockSource+0x170>
 800cbd0:	2b20      	cmp	r3, #32
 800cbd2:	d060      	beq.n	800cc96 <HAL_TIM_ConfigClockSource+0x15e>
 800cbd4:	2b20      	cmp	r3, #32
 800cbd6:	d867      	bhi.n	800cca8 <HAL_TIM_ConfigClockSource+0x170>
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d05c      	beq.n	800cc96 <HAL_TIM_ConfigClockSource+0x15e>
 800cbdc:	2b10      	cmp	r3, #16
 800cbde:	d05a      	beq.n	800cc96 <HAL_TIM_ConfigClockSource+0x15e>
 800cbe0:	e062      	b.n	800cca8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	6818      	ldr	r0, [r3, #0]
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	6899      	ldr	r1, [r3, #8]
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	685a      	ldr	r2, [r3, #4]
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	68db      	ldr	r3, [r3, #12]
 800cbf2:	f000 f9a7 	bl	800cf44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	689b      	ldr	r3, [r3, #8]
 800cbfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cc04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	68ba      	ldr	r2, [r7, #8]
 800cc0c:	609a      	str	r2, [r3, #8]
      break;
 800cc0e:	e04f      	b.n	800ccb0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	6818      	ldr	r0, [r3, #0]
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	6899      	ldr	r1, [r3, #8]
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	685a      	ldr	r2, [r3, #4]
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	68db      	ldr	r3, [r3, #12]
 800cc20:	f000 f990 	bl	800cf44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	689a      	ldr	r2, [r3, #8]
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cc32:	609a      	str	r2, [r3, #8]
      break;
 800cc34:	e03c      	b.n	800ccb0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	6818      	ldr	r0, [r3, #0]
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	6859      	ldr	r1, [r3, #4]
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	68db      	ldr	r3, [r3, #12]
 800cc42:	461a      	mov	r2, r3
 800cc44:	f000 f904 	bl	800ce50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	2150      	movs	r1, #80	; 0x50
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f000 f95d 	bl	800cf0e <TIM_ITRx_SetConfig>
      break;
 800cc54:	e02c      	b.n	800ccb0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6818      	ldr	r0, [r3, #0]
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	6859      	ldr	r1, [r3, #4]
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	68db      	ldr	r3, [r3, #12]
 800cc62:	461a      	mov	r2, r3
 800cc64:	f000 f923 	bl	800ceae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	2160      	movs	r1, #96	; 0x60
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f000 f94d 	bl	800cf0e <TIM_ITRx_SetConfig>
      break;
 800cc74:	e01c      	b.n	800ccb0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	6818      	ldr	r0, [r3, #0]
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	6859      	ldr	r1, [r3, #4]
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	68db      	ldr	r3, [r3, #12]
 800cc82:	461a      	mov	r2, r3
 800cc84:	f000 f8e4 	bl	800ce50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	2140      	movs	r1, #64	; 0x40
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f000 f93d 	bl	800cf0e <TIM_ITRx_SetConfig>
      break;
 800cc94:	e00c      	b.n	800ccb0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681a      	ldr	r2, [r3, #0]
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	4619      	mov	r1, r3
 800cca0:	4610      	mov	r0, r2
 800cca2:	f000 f934 	bl	800cf0e <TIM_ITRx_SetConfig>
      break;
 800cca6:	e003      	b.n	800ccb0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800cca8:	2301      	movs	r3, #1
 800ccaa:	73fb      	strb	r3, [r7, #15]
      break;
 800ccac:	e000      	b.n	800ccb0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800ccae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2201      	movs	r2, #1
 800ccb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ccc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	3710      	adds	r7, #16
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd80      	pop	{r7, pc}

0800ccca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ccca:	b480      	push	{r7}
 800cccc:	b083      	sub	sp, #12
 800ccce:	af00      	add	r7, sp, #0
 800ccd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ccd2:	bf00      	nop
 800ccd4:	370c      	adds	r7, #12
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccdc:	4770      	bx	lr

0800ccde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ccde:	b480      	push	{r7}
 800cce0:	b083      	sub	sp, #12
 800cce2:	af00      	add	r7, sp, #0
 800cce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cce6:	bf00      	nop
 800cce8:	370c      	adds	r7, #12
 800ccea:	46bd      	mov	sp, r7
 800ccec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf0:	4770      	bx	lr

0800ccf2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ccf2:	b480      	push	{r7}
 800ccf4:	b083      	sub	sp, #12
 800ccf6:	af00      	add	r7, sp, #0
 800ccf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ccfa:	bf00      	nop
 800ccfc:	370c      	adds	r7, #12
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd04:	4770      	bx	lr

0800cd06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cd06:	b480      	push	{r7}
 800cd08:	b083      	sub	sp, #12
 800cd0a:	af00      	add	r7, sp, #0
 800cd0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cd0e:	bf00      	nop
 800cd10:	370c      	adds	r7, #12
 800cd12:	46bd      	mov	sp, r7
 800cd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd18:	4770      	bx	lr
	...

0800cd1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cd1c:	b480      	push	{r7}
 800cd1e:	b085      	sub	sp, #20
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
 800cd24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	4a40      	ldr	r2, [pc, #256]	; (800ce30 <TIM_Base_SetConfig+0x114>)
 800cd30:	4293      	cmp	r3, r2
 800cd32:	d013      	beq.n	800cd5c <TIM_Base_SetConfig+0x40>
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd3a:	d00f      	beq.n	800cd5c <TIM_Base_SetConfig+0x40>
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	4a3d      	ldr	r2, [pc, #244]	; (800ce34 <TIM_Base_SetConfig+0x118>)
 800cd40:	4293      	cmp	r3, r2
 800cd42:	d00b      	beq.n	800cd5c <TIM_Base_SetConfig+0x40>
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	4a3c      	ldr	r2, [pc, #240]	; (800ce38 <TIM_Base_SetConfig+0x11c>)
 800cd48:	4293      	cmp	r3, r2
 800cd4a:	d007      	beq.n	800cd5c <TIM_Base_SetConfig+0x40>
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	4a3b      	ldr	r2, [pc, #236]	; (800ce3c <TIM_Base_SetConfig+0x120>)
 800cd50:	4293      	cmp	r3, r2
 800cd52:	d003      	beq.n	800cd5c <TIM_Base_SetConfig+0x40>
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	4a3a      	ldr	r2, [pc, #232]	; (800ce40 <TIM_Base_SetConfig+0x124>)
 800cd58:	4293      	cmp	r3, r2
 800cd5a:	d108      	bne.n	800cd6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	685b      	ldr	r3, [r3, #4]
 800cd68:	68fa      	ldr	r2, [r7, #12]
 800cd6a:	4313      	orrs	r3, r2
 800cd6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	4a2f      	ldr	r2, [pc, #188]	; (800ce30 <TIM_Base_SetConfig+0x114>)
 800cd72:	4293      	cmp	r3, r2
 800cd74:	d01f      	beq.n	800cdb6 <TIM_Base_SetConfig+0x9a>
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd7c:	d01b      	beq.n	800cdb6 <TIM_Base_SetConfig+0x9a>
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	4a2c      	ldr	r2, [pc, #176]	; (800ce34 <TIM_Base_SetConfig+0x118>)
 800cd82:	4293      	cmp	r3, r2
 800cd84:	d017      	beq.n	800cdb6 <TIM_Base_SetConfig+0x9a>
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	4a2b      	ldr	r2, [pc, #172]	; (800ce38 <TIM_Base_SetConfig+0x11c>)
 800cd8a:	4293      	cmp	r3, r2
 800cd8c:	d013      	beq.n	800cdb6 <TIM_Base_SetConfig+0x9a>
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	4a2a      	ldr	r2, [pc, #168]	; (800ce3c <TIM_Base_SetConfig+0x120>)
 800cd92:	4293      	cmp	r3, r2
 800cd94:	d00f      	beq.n	800cdb6 <TIM_Base_SetConfig+0x9a>
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	4a29      	ldr	r2, [pc, #164]	; (800ce40 <TIM_Base_SetConfig+0x124>)
 800cd9a:	4293      	cmp	r3, r2
 800cd9c:	d00b      	beq.n	800cdb6 <TIM_Base_SetConfig+0x9a>
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	4a28      	ldr	r2, [pc, #160]	; (800ce44 <TIM_Base_SetConfig+0x128>)
 800cda2:	4293      	cmp	r3, r2
 800cda4:	d007      	beq.n	800cdb6 <TIM_Base_SetConfig+0x9a>
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	4a27      	ldr	r2, [pc, #156]	; (800ce48 <TIM_Base_SetConfig+0x12c>)
 800cdaa:	4293      	cmp	r3, r2
 800cdac:	d003      	beq.n	800cdb6 <TIM_Base_SetConfig+0x9a>
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	4a26      	ldr	r2, [pc, #152]	; (800ce4c <TIM_Base_SetConfig+0x130>)
 800cdb2:	4293      	cmp	r3, r2
 800cdb4:	d108      	bne.n	800cdc8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cdbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	68db      	ldr	r3, [r3, #12]
 800cdc2:	68fa      	ldr	r2, [r7, #12]
 800cdc4:	4313      	orrs	r3, r2
 800cdc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	695b      	ldr	r3, [r3, #20]
 800cdd2:	4313      	orrs	r3, r2
 800cdd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	68fa      	ldr	r2, [r7, #12]
 800cdda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	689a      	ldr	r2, [r3, #8]
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	681a      	ldr	r2, [r3, #0]
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	4a10      	ldr	r2, [pc, #64]	; (800ce30 <TIM_Base_SetConfig+0x114>)
 800cdf0:	4293      	cmp	r3, r2
 800cdf2:	d00f      	beq.n	800ce14 <TIM_Base_SetConfig+0xf8>
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	4a12      	ldr	r2, [pc, #72]	; (800ce40 <TIM_Base_SetConfig+0x124>)
 800cdf8:	4293      	cmp	r3, r2
 800cdfa:	d00b      	beq.n	800ce14 <TIM_Base_SetConfig+0xf8>
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	4a11      	ldr	r2, [pc, #68]	; (800ce44 <TIM_Base_SetConfig+0x128>)
 800ce00:	4293      	cmp	r3, r2
 800ce02:	d007      	beq.n	800ce14 <TIM_Base_SetConfig+0xf8>
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	4a10      	ldr	r2, [pc, #64]	; (800ce48 <TIM_Base_SetConfig+0x12c>)
 800ce08:	4293      	cmp	r3, r2
 800ce0a:	d003      	beq.n	800ce14 <TIM_Base_SetConfig+0xf8>
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	4a0f      	ldr	r2, [pc, #60]	; (800ce4c <TIM_Base_SetConfig+0x130>)
 800ce10:	4293      	cmp	r3, r2
 800ce12:	d103      	bne.n	800ce1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	691a      	ldr	r2, [r3, #16]
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2201      	movs	r2, #1
 800ce20:	615a      	str	r2, [r3, #20]
}
 800ce22:	bf00      	nop
 800ce24:	3714      	adds	r7, #20
 800ce26:	46bd      	mov	sp, r7
 800ce28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2c:	4770      	bx	lr
 800ce2e:	bf00      	nop
 800ce30:	40012c00 	.word	0x40012c00
 800ce34:	40000400 	.word	0x40000400
 800ce38:	40000800 	.word	0x40000800
 800ce3c:	40000c00 	.word	0x40000c00
 800ce40:	40013400 	.word	0x40013400
 800ce44:	40014000 	.word	0x40014000
 800ce48:	40014400 	.word	0x40014400
 800ce4c:	40014800 	.word	0x40014800

0800ce50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ce50:	b480      	push	{r7}
 800ce52:	b087      	sub	sp, #28
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	60f8      	str	r0, [r7, #12]
 800ce58:	60b9      	str	r1, [r7, #8]
 800ce5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	6a1b      	ldr	r3, [r3, #32]
 800ce60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	6a1b      	ldr	r3, [r3, #32]
 800ce66:	f023 0201 	bic.w	r2, r3, #1
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	699b      	ldr	r3, [r3, #24]
 800ce72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ce74:	693b      	ldr	r3, [r7, #16]
 800ce76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ce7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	011b      	lsls	r3, r3, #4
 800ce80:	693a      	ldr	r2, [r7, #16]
 800ce82:	4313      	orrs	r3, r2
 800ce84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ce86:	697b      	ldr	r3, [r7, #20]
 800ce88:	f023 030a 	bic.w	r3, r3, #10
 800ce8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ce8e:	697a      	ldr	r2, [r7, #20]
 800ce90:	68bb      	ldr	r3, [r7, #8]
 800ce92:	4313      	orrs	r3, r2
 800ce94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	693a      	ldr	r2, [r7, #16]
 800ce9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	697a      	ldr	r2, [r7, #20]
 800cea0:	621a      	str	r2, [r3, #32]
}
 800cea2:	bf00      	nop
 800cea4:	371c      	adds	r7, #28
 800cea6:	46bd      	mov	sp, r7
 800cea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceac:	4770      	bx	lr

0800ceae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ceae:	b480      	push	{r7}
 800ceb0:	b087      	sub	sp, #28
 800ceb2:	af00      	add	r7, sp, #0
 800ceb4:	60f8      	str	r0, [r7, #12]
 800ceb6:	60b9      	str	r1, [r7, #8]
 800ceb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	6a1b      	ldr	r3, [r3, #32]
 800cebe:	f023 0210 	bic.w	r2, r3, #16
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	699b      	ldr	r3, [r3, #24]
 800ceca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	6a1b      	ldr	r3, [r3, #32]
 800ced0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ced2:	697b      	ldr	r3, [r7, #20]
 800ced4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ced8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	031b      	lsls	r3, r3, #12
 800cede:	697a      	ldr	r2, [r7, #20]
 800cee0:	4313      	orrs	r3, r2
 800cee2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cee4:	693b      	ldr	r3, [r7, #16]
 800cee6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ceea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	011b      	lsls	r3, r3, #4
 800cef0:	693a      	ldr	r2, [r7, #16]
 800cef2:	4313      	orrs	r3, r2
 800cef4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	697a      	ldr	r2, [r7, #20]
 800cefa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	693a      	ldr	r2, [r7, #16]
 800cf00:	621a      	str	r2, [r3, #32]
}
 800cf02:	bf00      	nop
 800cf04:	371c      	adds	r7, #28
 800cf06:	46bd      	mov	sp, r7
 800cf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0c:	4770      	bx	lr

0800cf0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cf0e:	b480      	push	{r7}
 800cf10:	b085      	sub	sp, #20
 800cf12:	af00      	add	r7, sp, #0
 800cf14:	6078      	str	r0, [r7, #4]
 800cf16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	689b      	ldr	r3, [r3, #8]
 800cf1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cf26:	683a      	ldr	r2, [r7, #0]
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	4313      	orrs	r3, r2
 800cf2c:	f043 0307 	orr.w	r3, r3, #7
 800cf30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	68fa      	ldr	r2, [r7, #12]
 800cf36:	609a      	str	r2, [r3, #8]
}
 800cf38:	bf00      	nop
 800cf3a:	3714      	adds	r7, #20
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf42:	4770      	bx	lr

0800cf44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cf44:	b480      	push	{r7}
 800cf46:	b087      	sub	sp, #28
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	60f8      	str	r0, [r7, #12]
 800cf4c:	60b9      	str	r1, [r7, #8]
 800cf4e:	607a      	str	r2, [r7, #4]
 800cf50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	689b      	ldr	r3, [r3, #8]
 800cf56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cf58:	697b      	ldr	r3, [r7, #20]
 800cf5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cf5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	021a      	lsls	r2, r3, #8
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	431a      	orrs	r2, r3
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	4313      	orrs	r3, r2
 800cf6c:	697a      	ldr	r2, [r7, #20]
 800cf6e:	4313      	orrs	r3, r2
 800cf70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	697a      	ldr	r2, [r7, #20]
 800cf76:	609a      	str	r2, [r3, #8]
}
 800cf78:	bf00      	nop
 800cf7a:	371c      	adds	r7, #28
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf82:	4770      	bx	lr

0800cf84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cf84:	b480      	push	{r7}
 800cf86:	b085      	sub	sp, #20
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
 800cf8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf94:	2b01      	cmp	r3, #1
 800cf96:	d101      	bne.n	800cf9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cf98:	2302      	movs	r3, #2
 800cf9a:	e068      	b.n	800d06e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2201      	movs	r2, #1
 800cfa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2202      	movs	r2, #2
 800cfa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	685b      	ldr	r3, [r3, #4]
 800cfb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	689b      	ldr	r3, [r3, #8]
 800cfba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	4a2e      	ldr	r2, [pc, #184]	; (800d07c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	d004      	beq.n	800cfd0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	4a2d      	ldr	r2, [pc, #180]	; (800d080 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800cfcc:	4293      	cmp	r3, r2
 800cfce:	d108      	bne.n	800cfe2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cfd6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	685b      	ldr	r3, [r3, #4]
 800cfdc:	68fa      	ldr	r2, [r7, #12]
 800cfde:	4313      	orrs	r3, r2
 800cfe0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cfe8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	68fa      	ldr	r2, [r7, #12]
 800cff0:	4313      	orrs	r3, r2
 800cff2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	68fa      	ldr	r2, [r7, #12]
 800cffa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	4a1e      	ldr	r2, [pc, #120]	; (800d07c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800d002:	4293      	cmp	r3, r2
 800d004:	d01d      	beq.n	800d042 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d00e:	d018      	beq.n	800d042 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	4a1b      	ldr	r2, [pc, #108]	; (800d084 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d016:	4293      	cmp	r3, r2
 800d018:	d013      	beq.n	800d042 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	4a1a      	ldr	r2, [pc, #104]	; (800d088 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d020:	4293      	cmp	r3, r2
 800d022:	d00e      	beq.n	800d042 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	4a18      	ldr	r2, [pc, #96]	; (800d08c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d02a:	4293      	cmp	r3, r2
 800d02c:	d009      	beq.n	800d042 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	4a13      	ldr	r2, [pc, #76]	; (800d080 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800d034:	4293      	cmp	r3, r2
 800d036:	d004      	beq.n	800d042 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	4a14      	ldr	r2, [pc, #80]	; (800d090 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d03e:	4293      	cmp	r3, r2
 800d040:	d10c      	bne.n	800d05c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d048:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	689b      	ldr	r3, [r3, #8]
 800d04e:	68ba      	ldr	r2, [r7, #8]
 800d050:	4313      	orrs	r3, r2
 800d052:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	68ba      	ldr	r2, [r7, #8]
 800d05a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2201      	movs	r2, #1
 800d060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2200      	movs	r2, #0
 800d068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d06c:	2300      	movs	r3, #0
}
 800d06e:	4618      	mov	r0, r3
 800d070:	3714      	adds	r7, #20
 800d072:	46bd      	mov	sp, r7
 800d074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d078:	4770      	bx	lr
 800d07a:	bf00      	nop
 800d07c:	40012c00 	.word	0x40012c00
 800d080:	40013400 	.word	0x40013400
 800d084:	40000400 	.word	0x40000400
 800d088:	40000800 	.word	0x40000800
 800d08c:	40000c00 	.word	0x40000c00
 800d090:	40014000 	.word	0x40014000

0800d094 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d094:	b480      	push	{r7}
 800d096:	b083      	sub	sp, #12
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d09c:	bf00      	nop
 800d09e:	370c      	adds	r7, #12
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a6:	4770      	bx	lr

0800d0a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d0a8:	b480      	push	{r7}
 800d0aa:	b083      	sub	sp, #12
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d0b0:	bf00      	nop
 800d0b2:	370c      	adds	r7, #12
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ba:	4770      	bx	lr

0800d0bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d0bc:	b480      	push	{r7}
 800d0be:	b083      	sub	sp, #12
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d0c4:	bf00      	nop
 800d0c6:	370c      	adds	r7, #12
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ce:	4770      	bx	lr

0800d0d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b082      	sub	sp, #8
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d101      	bne.n	800d0e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d0de:	2301      	movs	r3, #1
 800d0e0:	e040      	b.n	800d164 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d106      	bne.n	800d0f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f7f8 fd9c 	bl	8005c30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2224      	movs	r2, #36	; 0x24
 800d0fc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	681a      	ldr	r2, [r3, #0]
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	f022 0201 	bic.w	r2, r2, #1
 800d10c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	f000 fc9e 	bl	800da50 <UART_SetConfig>
 800d114:	4603      	mov	r3, r0
 800d116:	2b01      	cmp	r3, #1
 800d118:	d101      	bne.n	800d11e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800d11a:	2301      	movs	r3, #1
 800d11c:	e022      	b.n	800d164 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d122:	2b00      	cmp	r3, #0
 800d124:	d002      	beq.n	800d12c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f000 ff4a 	bl	800dfc0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	685a      	ldr	r2, [r3, #4]
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d13a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	689a      	ldr	r2, [r3, #8]
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d14a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	681a      	ldr	r2, [r3, #0]
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	f042 0201 	orr.w	r2, r2, #1
 800d15a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d15c:	6878      	ldr	r0, [r7, #4]
 800d15e:	f000 ffd1 	bl	800e104 <UART_CheckIdleState>
 800d162:	4603      	mov	r3, r0
}
 800d164:	4618      	mov	r0, r3
 800d166:	3708      	adds	r7, #8
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}

0800d16c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b08a      	sub	sp, #40	; 0x28
 800d170:	af02      	add	r7, sp, #8
 800d172:	60f8      	str	r0, [r7, #12]
 800d174:	60b9      	str	r1, [r7, #8]
 800d176:	603b      	str	r3, [r7, #0]
 800d178:	4613      	mov	r3, r2
 800d17a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d180:	2b20      	cmp	r3, #32
 800d182:	f040 8082 	bne.w	800d28a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d186:	68bb      	ldr	r3, [r7, #8]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d002      	beq.n	800d192 <HAL_UART_Transmit+0x26>
 800d18c:	88fb      	ldrh	r3, [r7, #6]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d101      	bne.n	800d196 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d192:	2301      	movs	r3, #1
 800d194:	e07a      	b.n	800d28c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800d19c:	2b01      	cmp	r3, #1
 800d19e:	d101      	bne.n	800d1a4 <HAL_UART_Transmit+0x38>
 800d1a0:	2302      	movs	r3, #2
 800d1a2:	e073      	b.n	800d28c <HAL_UART_Transmit+0x120>
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	2201      	movs	r2, #1
 800d1a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	2221      	movs	r2, #33	; 0x21
 800d1b8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d1ba:	f7f9 fde5 	bl	8006d88 <HAL_GetTick>
 800d1be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	88fa      	ldrh	r2, [r7, #6]
 800d1c4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	88fa      	ldrh	r2, [r7, #6]
 800d1cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	689b      	ldr	r3, [r3, #8]
 800d1d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d1d8:	d108      	bne.n	800d1ec <HAL_UART_Transmit+0x80>
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	691b      	ldr	r3, [r3, #16]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d104      	bne.n	800d1ec <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d1e6:	68bb      	ldr	r3, [r7, #8]
 800d1e8:	61bb      	str	r3, [r7, #24]
 800d1ea:	e003      	b.n	800d1f4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800d1fc:	e02d      	b.n	800d25a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	9300      	str	r3, [sp, #0]
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	2200      	movs	r2, #0
 800d206:	2180      	movs	r1, #128	; 0x80
 800d208:	68f8      	ldr	r0, [r7, #12]
 800d20a:	f000 ffc4 	bl	800e196 <UART_WaitOnFlagUntilTimeout>
 800d20e:	4603      	mov	r3, r0
 800d210:	2b00      	cmp	r3, #0
 800d212:	d001      	beq.n	800d218 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800d214:	2303      	movs	r3, #3
 800d216:	e039      	b.n	800d28c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800d218:	69fb      	ldr	r3, [r7, #28]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d10b      	bne.n	800d236 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d21e:	69bb      	ldr	r3, [r7, #24]
 800d220:	881a      	ldrh	r2, [r3, #0]
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d22a:	b292      	uxth	r2, r2
 800d22c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d22e:	69bb      	ldr	r3, [r7, #24]
 800d230:	3302      	adds	r3, #2
 800d232:	61bb      	str	r3, [r7, #24]
 800d234:	e008      	b.n	800d248 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d236:	69fb      	ldr	r3, [r7, #28]
 800d238:	781a      	ldrb	r2, [r3, #0]
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	b292      	uxth	r2, r2
 800d240:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d242:	69fb      	ldr	r3, [r7, #28]
 800d244:	3301      	adds	r3, #1
 800d246:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d24e:	b29b      	uxth	r3, r3
 800d250:	3b01      	subs	r3, #1
 800d252:	b29a      	uxth	r2, r3
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d260:	b29b      	uxth	r3, r3
 800d262:	2b00      	cmp	r3, #0
 800d264:	d1cb      	bne.n	800d1fe <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d266:	683b      	ldr	r3, [r7, #0]
 800d268:	9300      	str	r3, [sp, #0]
 800d26a:	697b      	ldr	r3, [r7, #20]
 800d26c:	2200      	movs	r2, #0
 800d26e:	2140      	movs	r1, #64	; 0x40
 800d270:	68f8      	ldr	r0, [r7, #12]
 800d272:	f000 ff90 	bl	800e196 <UART_WaitOnFlagUntilTimeout>
 800d276:	4603      	mov	r3, r0
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d001      	beq.n	800d280 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800d27c:	2303      	movs	r3, #3
 800d27e:	e005      	b.n	800d28c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	2220      	movs	r2, #32
 800d284:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800d286:	2300      	movs	r3, #0
 800d288:	e000      	b.n	800d28c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800d28a:	2302      	movs	r3, #2
  }
}
 800d28c:	4618      	mov	r0, r3
 800d28e:	3720      	adds	r7, #32
 800d290:	46bd      	mov	sp, r7
 800d292:	bd80      	pop	{r7, pc}

0800d294 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b08a      	sub	sp, #40	; 0x28
 800d298:	af00      	add	r7, sp, #0
 800d29a:	60f8      	str	r0, [r7, #12]
 800d29c:	60b9      	str	r1, [r7, #8]
 800d29e:	4613      	mov	r3, r2
 800d2a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2a6:	2b20      	cmp	r3, #32
 800d2a8:	d142      	bne.n	800d330 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800d2aa:	68bb      	ldr	r3, [r7, #8]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d002      	beq.n	800d2b6 <HAL_UART_Receive_IT+0x22>
 800d2b0:	88fb      	ldrh	r3, [r7, #6]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d101      	bne.n	800d2ba <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	e03b      	b.n	800d332 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800d2c0:	2b01      	cmp	r3, #1
 800d2c2:	d101      	bne.n	800d2c8 <HAL_UART_Receive_IT+0x34>
 800d2c4:	2302      	movs	r3, #2
 800d2c6:	e034      	b.n	800d332 <HAL_UART_Receive_IT+0x9e>
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	2201      	movs	r2, #1
 800d2cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	4a18      	ldr	r2, [pc, #96]	; (800d33c <HAL_UART_Receive_IT+0xa8>)
 800d2dc:	4293      	cmp	r3, r2
 800d2de:	d01f      	beq.n	800d320 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	685b      	ldr	r3, [r3, #4]
 800d2e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d018      	beq.n	800d320 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2f4:	697b      	ldr	r3, [r7, #20]
 800d2f6:	e853 3f00 	ldrex	r3, [r3]
 800d2fa:	613b      	str	r3, [r7, #16]
   return(result);
 800d2fc:	693b      	ldr	r3, [r7, #16]
 800d2fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d302:	627b      	str	r3, [r7, #36]	; 0x24
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	461a      	mov	r2, r3
 800d30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d30c:	623b      	str	r3, [r7, #32]
 800d30e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d310:	69f9      	ldr	r1, [r7, #28]
 800d312:	6a3a      	ldr	r2, [r7, #32]
 800d314:	e841 2300 	strex	r3, r2, [r1]
 800d318:	61bb      	str	r3, [r7, #24]
   return(result);
 800d31a:	69bb      	ldr	r3, [r7, #24]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d1e6      	bne.n	800d2ee <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d320:	88fb      	ldrh	r3, [r7, #6]
 800d322:	461a      	mov	r2, r3
 800d324:	68b9      	ldr	r1, [r7, #8]
 800d326:	68f8      	ldr	r0, [r7, #12]
 800d328:	f000 fffa 	bl	800e320 <UART_Start_Receive_IT>
 800d32c:	4603      	mov	r3, r0
 800d32e:	e000      	b.n	800d332 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800d330:	2302      	movs	r3, #2
  }
}
 800d332:	4618      	mov	r0, r3
 800d334:	3728      	adds	r7, #40	; 0x28
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}
 800d33a:	bf00      	nop
 800d33c:	40008000 	.word	0x40008000

0800d340 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b08a      	sub	sp, #40	; 0x28
 800d344:	af00      	add	r7, sp, #0
 800d346:	60f8      	str	r0, [r7, #12]
 800d348:	60b9      	str	r1, [r7, #8]
 800d34a:	4613      	mov	r3, r2
 800d34c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d352:	2b20      	cmp	r3, #32
 800d354:	d178      	bne.n	800d448 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d002      	beq.n	800d362 <HAL_UART_Transmit_DMA+0x22>
 800d35c:	88fb      	ldrh	r3, [r7, #6]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d101      	bne.n	800d366 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800d362:	2301      	movs	r3, #1
 800d364:	e071      	b.n	800d44a <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800d36c:	2b01      	cmp	r3, #1
 800d36e:	d101      	bne.n	800d374 <HAL_UART_Transmit_DMA+0x34>
 800d370:	2302      	movs	r3, #2
 800d372:	e06a      	b.n	800d44a <HAL_UART_Transmit_DMA+0x10a>
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	2201      	movs	r2, #1
 800d378:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	68ba      	ldr	r2, [r7, #8]
 800d380:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	88fa      	ldrh	r2, [r7, #6]
 800d386:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	88fa      	ldrh	r2, [r7, #6]
 800d38e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	2200      	movs	r2, #0
 800d396:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	2221      	movs	r2, #33	; 0x21
 800d39e:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d02b      	beq.n	800d400 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3ac:	4a29      	ldr	r2, [pc, #164]	; (800d454 <HAL_UART_Transmit_DMA+0x114>)
 800d3ae:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3b4:	4a28      	ldr	r2, [pc, #160]	; (800d458 <HAL_UART_Transmit_DMA+0x118>)
 800d3b6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3bc:	4a27      	ldr	r2, [pc, #156]	; (800d45c <HAL_UART_Transmit_DMA+0x11c>)
 800d3be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3d0:	4619      	mov	r1, r3
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	3328      	adds	r3, #40	; 0x28
 800d3d8:	461a      	mov	r2, r3
 800d3da:	88fb      	ldrh	r3, [r7, #6]
 800d3dc:	f7f9 ff00 	bl	80071e0 <HAL_DMA_Start_IT>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d00c      	beq.n	800d400 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	2210      	movs	r2, #16
 800d3ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	2220      	movs	r2, #32
 800d3fa:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	e024      	b.n	800d44a <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	2240      	movs	r2, #64	; 0x40
 800d406:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	2200      	movs	r2, #0
 800d40c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	3308      	adds	r3, #8
 800d416:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d418:	697b      	ldr	r3, [r7, #20]
 800d41a:	e853 3f00 	ldrex	r3, [r3]
 800d41e:	613b      	str	r3, [r7, #16]
   return(result);
 800d420:	693b      	ldr	r3, [r7, #16]
 800d422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d426:	627b      	str	r3, [r7, #36]	; 0x24
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	3308      	adds	r3, #8
 800d42e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d430:	623a      	str	r2, [r7, #32]
 800d432:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d434:	69f9      	ldr	r1, [r7, #28]
 800d436:	6a3a      	ldr	r2, [r7, #32]
 800d438:	e841 2300 	strex	r3, r2, [r1]
 800d43c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d43e:	69bb      	ldr	r3, [r7, #24]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d1e5      	bne.n	800d410 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 800d444:	2300      	movs	r3, #0
 800d446:	e000      	b.n	800d44a <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800d448:	2302      	movs	r3, #2
  }
}
 800d44a:	4618      	mov	r0, r3
 800d44c:	3728      	adds	r7, #40	; 0x28
 800d44e:	46bd      	mov	sp, r7
 800d450:	bd80      	pop	{r7, pc}
 800d452:	bf00      	nop
 800d454:	0800e5c7 	.word	0x0800e5c7
 800d458:	0800e661 	.word	0x0800e661
 800d45c:	0800e67d 	.word	0x0800e67d

0800d460 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b0ba      	sub	sp, #232	; 0xe8
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	69db      	ldr	r3, [r3, #28]
 800d46e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	689b      	ldr	r3, [r3, #8]
 800d482:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d486:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d48a:	f640 030f 	movw	r3, #2063	; 0x80f
 800d48e:	4013      	ands	r3, r2
 800d490:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d494:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d115      	bne.n	800d4c8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800d49c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4a0:	f003 0320 	and.w	r3, r3, #32
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d00f      	beq.n	800d4c8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800d4a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d4ac:	f003 0320 	and.w	r3, r3, #32
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d009      	beq.n	800d4c8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	f000 82a6 	beq.w	800da0a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d4c2:	6878      	ldr	r0, [r7, #4]
 800d4c4:	4798      	blx	r3
      }
      return;
 800d4c6:	e2a0      	b.n	800da0a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800d4c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	f000 8117 	beq.w	800d700 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800d4d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d4d6:	f003 0301 	and.w	r3, r3, #1
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d106      	bne.n	800d4ec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800d4de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d4e2:	4b85      	ldr	r3, [pc, #532]	; (800d6f8 <HAL_UART_IRQHandler+0x298>)
 800d4e4:	4013      	ands	r3, r2
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	f000 810a 	beq.w	800d700 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d4ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4f0:	f003 0301 	and.w	r3, r3, #1
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d011      	beq.n	800d51c <HAL_UART_IRQHandler+0xbc>
 800d4f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d4fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d500:	2b00      	cmp	r3, #0
 800d502:	d00b      	beq.n	800d51c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	2201      	movs	r2, #1
 800d50a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d512:	f043 0201 	orr.w	r2, r3, #1
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d51c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d520:	f003 0302 	and.w	r3, r3, #2
 800d524:	2b00      	cmp	r3, #0
 800d526:	d011      	beq.n	800d54c <HAL_UART_IRQHandler+0xec>
 800d528:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d52c:	f003 0301 	and.w	r3, r3, #1
 800d530:	2b00      	cmp	r3, #0
 800d532:	d00b      	beq.n	800d54c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	2202      	movs	r2, #2
 800d53a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d542:	f043 0204 	orr.w	r2, r3, #4
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d54c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d550:	f003 0304 	and.w	r3, r3, #4
 800d554:	2b00      	cmp	r3, #0
 800d556:	d011      	beq.n	800d57c <HAL_UART_IRQHandler+0x11c>
 800d558:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d55c:	f003 0301 	and.w	r3, r3, #1
 800d560:	2b00      	cmp	r3, #0
 800d562:	d00b      	beq.n	800d57c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	2204      	movs	r2, #4
 800d56a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d572:	f043 0202 	orr.w	r2, r3, #2
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d57c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d580:	f003 0308 	and.w	r3, r3, #8
 800d584:	2b00      	cmp	r3, #0
 800d586:	d017      	beq.n	800d5b8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800d588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d58c:	f003 0320 	and.w	r3, r3, #32
 800d590:	2b00      	cmp	r3, #0
 800d592:	d105      	bne.n	800d5a0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800d594:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d598:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d00b      	beq.n	800d5b8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	2208      	movs	r2, #8
 800d5a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5ae:	f043 0208 	orr.w	r2, r3, #8
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d5b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d5bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d012      	beq.n	800d5ea <HAL_UART_IRQHandler+0x18a>
 800d5c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d5c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d00c      	beq.n	800d5ea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d5d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5e0:	f043 0220 	orr.w	r2, r3, #32
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	f000 820c 	beq.w	800da0e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800d5f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d5fa:	f003 0320 	and.w	r3, r3, #32
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d00d      	beq.n	800d61e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800d602:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d606:	f003 0320 	and.w	r3, r3, #32
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d007      	beq.n	800d61e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d612:	2b00      	cmp	r3, #0
 800d614:	d003      	beq.n	800d61e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d61a:	6878      	ldr	r0, [r7, #4]
 800d61c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d624:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	689b      	ldr	r3, [r3, #8]
 800d62e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d632:	2b40      	cmp	r3, #64	; 0x40
 800d634:	d005      	beq.n	800d642 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d636:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d63a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d04f      	beq.n	800d6e2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d642:	6878      	ldr	r0, [r7, #4]
 800d644:	f000 ff5c 	bl	800e500 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	689b      	ldr	r3, [r3, #8]
 800d64e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d652:	2b40      	cmp	r3, #64	; 0x40
 800d654:	d141      	bne.n	800d6da <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	3308      	adds	r3, #8
 800d65c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d660:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d664:	e853 3f00 	ldrex	r3, [r3]
 800d668:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d66c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d670:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d674:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	3308      	adds	r3, #8
 800d67e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d682:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d686:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d68a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d68e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d692:	e841 2300 	strex	r3, r2, [r1]
 800d696:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d69a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d1d9      	bne.n	800d656 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d013      	beq.n	800d6d2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6ae:	4a13      	ldr	r2, [pc, #76]	; (800d6fc <HAL_UART_IRQHandler+0x29c>)
 800d6b0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	f7f9 fe30 	bl	800731c <HAL_DMA_Abort_IT>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d017      	beq.n	800d6f2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6c8:	687a      	ldr	r2, [r7, #4]
 800d6ca:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800d6cc:	4610      	mov	r0, r2
 800d6ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d6d0:	e00f      	b.n	800d6f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d6d2:	6878      	ldr	r0, [r7, #4]
 800d6d4:	f7f6 ffb4 	bl	8004640 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d6d8:	e00b      	b.n	800d6f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d6da:	6878      	ldr	r0, [r7, #4]
 800d6dc:	f7f6 ffb0 	bl	8004640 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d6e0:	e007      	b.n	800d6f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f7f6 ffac 	bl	8004640 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800d6f0:	e18d      	b.n	800da0e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d6f2:	bf00      	nop
    return;
 800d6f4:	e18b      	b.n	800da0e <HAL_UART_IRQHandler+0x5ae>
 800d6f6:	bf00      	nop
 800d6f8:	04000120 	.word	0x04000120
 800d6fc:	0800e6f9 	.word	0x0800e6f9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d704:	2b01      	cmp	r3, #1
 800d706:	f040 8146 	bne.w	800d996 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d70a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d70e:	f003 0310 	and.w	r3, r3, #16
 800d712:	2b00      	cmp	r3, #0
 800d714:	f000 813f 	beq.w	800d996 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d71c:	f003 0310 	and.w	r3, r3, #16
 800d720:	2b00      	cmp	r3, #0
 800d722:	f000 8138 	beq.w	800d996 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	2210      	movs	r2, #16
 800d72c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	689b      	ldr	r3, [r3, #8]
 800d734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d738:	2b40      	cmp	r3, #64	; 0x40
 800d73a:	f040 80b4 	bne.w	800d8a6 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	685b      	ldr	r3, [r3, #4]
 800d746:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d74a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d74e:	2b00      	cmp	r3, #0
 800d750:	f000 815f 	beq.w	800da12 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d75a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d75e:	429a      	cmp	r2, r3
 800d760:	f080 8157 	bcs.w	800da12 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d76a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	f003 0320 	and.w	r3, r3, #32
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	f040 8085 	bne.w	800d88a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d788:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d78c:	e853 3f00 	ldrex	r3, [r3]
 800d790:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d794:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d798:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d79c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	461a      	mov	r2, r3
 800d7a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d7aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d7ae:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d7b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d7ba:	e841 2300 	strex	r3, r2, [r1]
 800d7be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d7c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d1da      	bne.n	800d780 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	3308      	adds	r3, #8
 800d7d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d7d4:	e853 3f00 	ldrex	r3, [r3]
 800d7d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d7da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d7dc:	f023 0301 	bic.w	r3, r3, #1
 800d7e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	3308      	adds	r3, #8
 800d7ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d7ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d7f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d7f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d7fa:	e841 2300 	strex	r3, r2, [r1]
 800d7fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d800:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d802:	2b00      	cmp	r3, #0
 800d804:	d1e1      	bne.n	800d7ca <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	3308      	adds	r3, #8
 800d80c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d80e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d810:	e853 3f00 	ldrex	r3, [r3]
 800d814:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d816:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d818:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d81c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	3308      	adds	r3, #8
 800d826:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d82a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d82c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d82e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d830:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d832:	e841 2300 	strex	r3, r2, [r1]
 800d836:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d838:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d1e3      	bne.n	800d806 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	2220      	movs	r2, #32
 800d842:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2200      	movs	r2, #0
 800d848:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d852:	e853 3f00 	ldrex	r3, [r3]
 800d856:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d858:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d85a:	f023 0310 	bic.w	r3, r3, #16
 800d85e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	461a      	mov	r2, r3
 800d868:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d86c:	65bb      	str	r3, [r7, #88]	; 0x58
 800d86e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d870:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d872:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d874:	e841 2300 	strex	r3, r2, [r1]
 800d878:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d87a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d1e4      	bne.n	800d84a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d884:	4618      	mov	r0, r3
 800d886:	f7f9 fd0b 	bl	80072a0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d896:	b29b      	uxth	r3, r3
 800d898:	1ad3      	subs	r3, r2, r3
 800d89a:	b29b      	uxth	r3, r3
 800d89c:	4619      	mov	r1, r3
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	f000 f8ca 	bl	800da38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d8a4:	e0b5      	b.n	800da12 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d8b2:	b29b      	uxth	r3, r3
 800d8b4:	1ad3      	subs	r3, r2, r3
 800d8b6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d8c0:	b29b      	uxth	r3, r3
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	f000 80a7 	beq.w	800da16 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800d8c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	f000 80a2 	beq.w	800da16 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8da:	e853 3f00 	ldrex	r3, [r3]
 800d8de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d8e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d8e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	461a      	mov	r2, r3
 800d8f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d8f4:	647b      	str	r3, [r7, #68]	; 0x44
 800d8f6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d8fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d8fc:	e841 2300 	strex	r3, r2, [r1]
 800d900:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d904:	2b00      	cmp	r3, #0
 800d906:	d1e4      	bne.n	800d8d2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	3308      	adds	r3, #8
 800d90e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d912:	e853 3f00 	ldrex	r3, [r3]
 800d916:	623b      	str	r3, [r7, #32]
   return(result);
 800d918:	6a3b      	ldr	r3, [r7, #32]
 800d91a:	f023 0301 	bic.w	r3, r3, #1
 800d91e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	3308      	adds	r3, #8
 800d928:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d92c:	633a      	str	r2, [r7, #48]	; 0x30
 800d92e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d930:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d932:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d934:	e841 2300 	strex	r3, r2, [r1]
 800d938:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d1e3      	bne.n	800d908 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	2220      	movs	r2, #32
 800d944:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2200      	movs	r2, #0
 800d94a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2200      	movs	r2, #0
 800d950:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d958:	693b      	ldr	r3, [r7, #16]
 800d95a:	e853 3f00 	ldrex	r3, [r3]
 800d95e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	f023 0310 	bic.w	r3, r3, #16
 800d966:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	461a      	mov	r2, r3
 800d970:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d974:	61fb      	str	r3, [r7, #28]
 800d976:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d978:	69b9      	ldr	r1, [r7, #24]
 800d97a:	69fa      	ldr	r2, [r7, #28]
 800d97c:	e841 2300 	strex	r3, r2, [r1]
 800d980:	617b      	str	r3, [r7, #20]
   return(result);
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d1e4      	bne.n	800d952 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d988:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d98c:	4619      	mov	r1, r3
 800d98e:	6878      	ldr	r0, [r7, #4]
 800d990:	f000 f852 	bl	800da38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d994:	e03f      	b.n	800da16 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d99a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d00e      	beq.n	800d9c0 <HAL_UART_IRQHandler+0x560>
 800d9a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d9a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d008      	beq.n	800d9c0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d9b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	f001 f83d 	bl	800ea38 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d9be:	e02d      	b.n	800da1c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800d9c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d00e      	beq.n	800d9ea <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800d9cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d9d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d008      	beq.n	800d9ea <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d01c      	beq.n	800da1a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9e4:	6878      	ldr	r0, [r7, #4]
 800d9e6:	4798      	blx	r3
    }
    return;
 800d9e8:	e017      	b.n	800da1a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d9ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d012      	beq.n	800da1c <HAL_UART_IRQHandler+0x5bc>
 800d9f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d9fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d00c      	beq.n	800da1c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f000 fe8e 	bl	800e724 <UART_EndTransmit_IT>
    return;
 800da08:	e008      	b.n	800da1c <HAL_UART_IRQHandler+0x5bc>
      return;
 800da0a:	bf00      	nop
 800da0c:	e006      	b.n	800da1c <HAL_UART_IRQHandler+0x5bc>
    return;
 800da0e:	bf00      	nop
 800da10:	e004      	b.n	800da1c <HAL_UART_IRQHandler+0x5bc>
      return;
 800da12:	bf00      	nop
 800da14:	e002      	b.n	800da1c <HAL_UART_IRQHandler+0x5bc>
      return;
 800da16:	bf00      	nop
 800da18:	e000      	b.n	800da1c <HAL_UART_IRQHandler+0x5bc>
    return;
 800da1a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800da1c:	37e8      	adds	r7, #232	; 0xe8
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}
 800da22:	bf00      	nop

0800da24 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800da24:	b480      	push	{r7}
 800da26:	b083      	sub	sp, #12
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800da2c:	bf00      	nop
 800da2e:	370c      	adds	r7, #12
 800da30:	46bd      	mov	sp, r7
 800da32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da36:	4770      	bx	lr

0800da38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800da38:	b480      	push	{r7}
 800da3a:	b083      	sub	sp, #12
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
 800da40:	460b      	mov	r3, r1
 800da42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800da44:	bf00      	nop
 800da46:	370c      	adds	r7, #12
 800da48:	46bd      	mov	sp, r7
 800da4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4e:	4770      	bx	lr

0800da50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800da50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800da54:	b08a      	sub	sp, #40	; 0x28
 800da56:	af00      	add	r7, sp, #0
 800da58:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800da5a:	2300      	movs	r3, #0
 800da5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	689a      	ldr	r2, [r3, #8]
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	691b      	ldr	r3, [r3, #16]
 800da68:	431a      	orrs	r2, r3
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	695b      	ldr	r3, [r3, #20]
 800da6e:	431a      	orrs	r2, r3
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	69db      	ldr	r3, [r3, #28]
 800da74:	4313      	orrs	r3, r2
 800da76:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	681a      	ldr	r2, [r3, #0]
 800da7e:	4ba4      	ldr	r3, [pc, #656]	; (800dd10 <UART_SetConfig+0x2c0>)
 800da80:	4013      	ands	r3, r2
 800da82:	68fa      	ldr	r2, [r7, #12]
 800da84:	6812      	ldr	r2, [r2, #0]
 800da86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800da88:	430b      	orrs	r3, r1
 800da8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	685b      	ldr	r3, [r3, #4]
 800da92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	68da      	ldr	r2, [r3, #12]
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	430a      	orrs	r2, r1
 800daa0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	699b      	ldr	r3, [r3, #24]
 800daa6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	4a99      	ldr	r2, [pc, #612]	; (800dd14 <UART_SetConfig+0x2c4>)
 800daae:	4293      	cmp	r3, r2
 800dab0:	d004      	beq.n	800dabc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	6a1b      	ldr	r3, [r3, #32]
 800dab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dab8:	4313      	orrs	r3, r2
 800daba:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	689b      	ldr	r3, [r3, #8]
 800dac2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dacc:	430a      	orrs	r2, r1
 800dace:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	4a90      	ldr	r2, [pc, #576]	; (800dd18 <UART_SetConfig+0x2c8>)
 800dad6:	4293      	cmp	r3, r2
 800dad8:	d126      	bne.n	800db28 <UART_SetConfig+0xd8>
 800dada:	4b90      	ldr	r3, [pc, #576]	; (800dd1c <UART_SetConfig+0x2cc>)
 800dadc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dae0:	f003 0303 	and.w	r3, r3, #3
 800dae4:	2b03      	cmp	r3, #3
 800dae6:	d81b      	bhi.n	800db20 <UART_SetConfig+0xd0>
 800dae8:	a201      	add	r2, pc, #4	; (adr r2, 800daf0 <UART_SetConfig+0xa0>)
 800daea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daee:	bf00      	nop
 800daf0:	0800db01 	.word	0x0800db01
 800daf4:	0800db11 	.word	0x0800db11
 800daf8:	0800db09 	.word	0x0800db09
 800dafc:	0800db19 	.word	0x0800db19
 800db00:	2301      	movs	r3, #1
 800db02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800db06:	e116      	b.n	800dd36 <UART_SetConfig+0x2e6>
 800db08:	2302      	movs	r3, #2
 800db0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800db0e:	e112      	b.n	800dd36 <UART_SetConfig+0x2e6>
 800db10:	2304      	movs	r3, #4
 800db12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800db16:	e10e      	b.n	800dd36 <UART_SetConfig+0x2e6>
 800db18:	2308      	movs	r3, #8
 800db1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800db1e:	e10a      	b.n	800dd36 <UART_SetConfig+0x2e6>
 800db20:	2310      	movs	r3, #16
 800db22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800db26:	e106      	b.n	800dd36 <UART_SetConfig+0x2e6>
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	4a7c      	ldr	r2, [pc, #496]	; (800dd20 <UART_SetConfig+0x2d0>)
 800db2e:	4293      	cmp	r3, r2
 800db30:	d138      	bne.n	800dba4 <UART_SetConfig+0x154>
 800db32:	4b7a      	ldr	r3, [pc, #488]	; (800dd1c <UART_SetConfig+0x2cc>)
 800db34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db38:	f003 030c 	and.w	r3, r3, #12
 800db3c:	2b0c      	cmp	r3, #12
 800db3e:	d82d      	bhi.n	800db9c <UART_SetConfig+0x14c>
 800db40:	a201      	add	r2, pc, #4	; (adr r2, 800db48 <UART_SetConfig+0xf8>)
 800db42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db46:	bf00      	nop
 800db48:	0800db7d 	.word	0x0800db7d
 800db4c:	0800db9d 	.word	0x0800db9d
 800db50:	0800db9d 	.word	0x0800db9d
 800db54:	0800db9d 	.word	0x0800db9d
 800db58:	0800db8d 	.word	0x0800db8d
 800db5c:	0800db9d 	.word	0x0800db9d
 800db60:	0800db9d 	.word	0x0800db9d
 800db64:	0800db9d 	.word	0x0800db9d
 800db68:	0800db85 	.word	0x0800db85
 800db6c:	0800db9d 	.word	0x0800db9d
 800db70:	0800db9d 	.word	0x0800db9d
 800db74:	0800db9d 	.word	0x0800db9d
 800db78:	0800db95 	.word	0x0800db95
 800db7c:	2300      	movs	r3, #0
 800db7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800db82:	e0d8      	b.n	800dd36 <UART_SetConfig+0x2e6>
 800db84:	2302      	movs	r3, #2
 800db86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800db8a:	e0d4      	b.n	800dd36 <UART_SetConfig+0x2e6>
 800db8c:	2304      	movs	r3, #4
 800db8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800db92:	e0d0      	b.n	800dd36 <UART_SetConfig+0x2e6>
 800db94:	2308      	movs	r3, #8
 800db96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800db9a:	e0cc      	b.n	800dd36 <UART_SetConfig+0x2e6>
 800db9c:	2310      	movs	r3, #16
 800db9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dba2:	e0c8      	b.n	800dd36 <UART_SetConfig+0x2e6>
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	4a5e      	ldr	r2, [pc, #376]	; (800dd24 <UART_SetConfig+0x2d4>)
 800dbaa:	4293      	cmp	r3, r2
 800dbac:	d125      	bne.n	800dbfa <UART_SetConfig+0x1aa>
 800dbae:	4b5b      	ldr	r3, [pc, #364]	; (800dd1c <UART_SetConfig+0x2cc>)
 800dbb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dbb4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800dbb8:	2b30      	cmp	r3, #48	; 0x30
 800dbba:	d016      	beq.n	800dbea <UART_SetConfig+0x19a>
 800dbbc:	2b30      	cmp	r3, #48	; 0x30
 800dbbe:	d818      	bhi.n	800dbf2 <UART_SetConfig+0x1a2>
 800dbc0:	2b20      	cmp	r3, #32
 800dbc2:	d00a      	beq.n	800dbda <UART_SetConfig+0x18a>
 800dbc4:	2b20      	cmp	r3, #32
 800dbc6:	d814      	bhi.n	800dbf2 <UART_SetConfig+0x1a2>
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d002      	beq.n	800dbd2 <UART_SetConfig+0x182>
 800dbcc:	2b10      	cmp	r3, #16
 800dbce:	d008      	beq.n	800dbe2 <UART_SetConfig+0x192>
 800dbd0:	e00f      	b.n	800dbf2 <UART_SetConfig+0x1a2>
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dbd8:	e0ad      	b.n	800dd36 <UART_SetConfig+0x2e6>
 800dbda:	2302      	movs	r3, #2
 800dbdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dbe0:	e0a9      	b.n	800dd36 <UART_SetConfig+0x2e6>
 800dbe2:	2304      	movs	r3, #4
 800dbe4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dbe8:	e0a5      	b.n	800dd36 <UART_SetConfig+0x2e6>
 800dbea:	2308      	movs	r3, #8
 800dbec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dbf0:	e0a1      	b.n	800dd36 <UART_SetConfig+0x2e6>
 800dbf2:	2310      	movs	r3, #16
 800dbf4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dbf8:	e09d      	b.n	800dd36 <UART_SetConfig+0x2e6>
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	4a4a      	ldr	r2, [pc, #296]	; (800dd28 <UART_SetConfig+0x2d8>)
 800dc00:	4293      	cmp	r3, r2
 800dc02:	d125      	bne.n	800dc50 <UART_SetConfig+0x200>
 800dc04:	4b45      	ldr	r3, [pc, #276]	; (800dd1c <UART_SetConfig+0x2cc>)
 800dc06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc0a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800dc0e:	2bc0      	cmp	r3, #192	; 0xc0
 800dc10:	d016      	beq.n	800dc40 <UART_SetConfig+0x1f0>
 800dc12:	2bc0      	cmp	r3, #192	; 0xc0
 800dc14:	d818      	bhi.n	800dc48 <UART_SetConfig+0x1f8>
 800dc16:	2b80      	cmp	r3, #128	; 0x80
 800dc18:	d00a      	beq.n	800dc30 <UART_SetConfig+0x1e0>
 800dc1a:	2b80      	cmp	r3, #128	; 0x80
 800dc1c:	d814      	bhi.n	800dc48 <UART_SetConfig+0x1f8>
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d002      	beq.n	800dc28 <UART_SetConfig+0x1d8>
 800dc22:	2b40      	cmp	r3, #64	; 0x40
 800dc24:	d008      	beq.n	800dc38 <UART_SetConfig+0x1e8>
 800dc26:	e00f      	b.n	800dc48 <UART_SetConfig+0x1f8>
 800dc28:	2300      	movs	r3, #0
 800dc2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dc2e:	e082      	b.n	800dd36 <UART_SetConfig+0x2e6>
 800dc30:	2302      	movs	r3, #2
 800dc32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dc36:	e07e      	b.n	800dd36 <UART_SetConfig+0x2e6>
 800dc38:	2304      	movs	r3, #4
 800dc3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dc3e:	e07a      	b.n	800dd36 <UART_SetConfig+0x2e6>
 800dc40:	2308      	movs	r3, #8
 800dc42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dc46:	e076      	b.n	800dd36 <UART_SetConfig+0x2e6>
 800dc48:	2310      	movs	r3, #16
 800dc4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dc4e:	e072      	b.n	800dd36 <UART_SetConfig+0x2e6>
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	4a35      	ldr	r2, [pc, #212]	; (800dd2c <UART_SetConfig+0x2dc>)
 800dc56:	4293      	cmp	r3, r2
 800dc58:	d12a      	bne.n	800dcb0 <UART_SetConfig+0x260>
 800dc5a:	4b30      	ldr	r3, [pc, #192]	; (800dd1c <UART_SetConfig+0x2cc>)
 800dc5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dc64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dc68:	d01a      	beq.n	800dca0 <UART_SetConfig+0x250>
 800dc6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dc6e:	d81b      	bhi.n	800dca8 <UART_SetConfig+0x258>
 800dc70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc74:	d00c      	beq.n	800dc90 <UART_SetConfig+0x240>
 800dc76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc7a:	d815      	bhi.n	800dca8 <UART_SetConfig+0x258>
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d003      	beq.n	800dc88 <UART_SetConfig+0x238>
 800dc80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc84:	d008      	beq.n	800dc98 <UART_SetConfig+0x248>
 800dc86:	e00f      	b.n	800dca8 <UART_SetConfig+0x258>
 800dc88:	2300      	movs	r3, #0
 800dc8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dc8e:	e052      	b.n	800dd36 <UART_SetConfig+0x2e6>
 800dc90:	2302      	movs	r3, #2
 800dc92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dc96:	e04e      	b.n	800dd36 <UART_SetConfig+0x2e6>
 800dc98:	2304      	movs	r3, #4
 800dc9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dc9e:	e04a      	b.n	800dd36 <UART_SetConfig+0x2e6>
 800dca0:	2308      	movs	r3, #8
 800dca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dca6:	e046      	b.n	800dd36 <UART_SetConfig+0x2e6>
 800dca8:	2310      	movs	r3, #16
 800dcaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dcae:	e042      	b.n	800dd36 <UART_SetConfig+0x2e6>
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	4a17      	ldr	r2, [pc, #92]	; (800dd14 <UART_SetConfig+0x2c4>)
 800dcb6:	4293      	cmp	r3, r2
 800dcb8:	d13a      	bne.n	800dd30 <UART_SetConfig+0x2e0>
 800dcba:	4b18      	ldr	r3, [pc, #96]	; (800dd1c <UART_SetConfig+0x2cc>)
 800dcbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dcc0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800dcc4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800dcc8:	d01a      	beq.n	800dd00 <UART_SetConfig+0x2b0>
 800dcca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800dcce:	d81b      	bhi.n	800dd08 <UART_SetConfig+0x2b8>
 800dcd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dcd4:	d00c      	beq.n	800dcf0 <UART_SetConfig+0x2a0>
 800dcd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dcda:	d815      	bhi.n	800dd08 <UART_SetConfig+0x2b8>
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d003      	beq.n	800dce8 <UART_SetConfig+0x298>
 800dce0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dce4:	d008      	beq.n	800dcf8 <UART_SetConfig+0x2a8>
 800dce6:	e00f      	b.n	800dd08 <UART_SetConfig+0x2b8>
 800dce8:	2300      	movs	r3, #0
 800dcea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dcee:	e022      	b.n	800dd36 <UART_SetConfig+0x2e6>
 800dcf0:	2302      	movs	r3, #2
 800dcf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dcf6:	e01e      	b.n	800dd36 <UART_SetConfig+0x2e6>
 800dcf8:	2304      	movs	r3, #4
 800dcfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dcfe:	e01a      	b.n	800dd36 <UART_SetConfig+0x2e6>
 800dd00:	2308      	movs	r3, #8
 800dd02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dd06:	e016      	b.n	800dd36 <UART_SetConfig+0x2e6>
 800dd08:	2310      	movs	r3, #16
 800dd0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dd0e:	e012      	b.n	800dd36 <UART_SetConfig+0x2e6>
 800dd10:	efff69f3 	.word	0xefff69f3
 800dd14:	40008000 	.word	0x40008000
 800dd18:	40013800 	.word	0x40013800
 800dd1c:	40021000 	.word	0x40021000
 800dd20:	40004400 	.word	0x40004400
 800dd24:	40004800 	.word	0x40004800
 800dd28:	40004c00 	.word	0x40004c00
 800dd2c:	40005000 	.word	0x40005000
 800dd30:	2310      	movs	r3, #16
 800dd32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	4a9f      	ldr	r2, [pc, #636]	; (800dfb8 <UART_SetConfig+0x568>)
 800dd3c:	4293      	cmp	r3, r2
 800dd3e:	d17a      	bne.n	800de36 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dd40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dd44:	2b08      	cmp	r3, #8
 800dd46:	d824      	bhi.n	800dd92 <UART_SetConfig+0x342>
 800dd48:	a201      	add	r2, pc, #4	; (adr r2, 800dd50 <UART_SetConfig+0x300>)
 800dd4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd4e:	bf00      	nop
 800dd50:	0800dd75 	.word	0x0800dd75
 800dd54:	0800dd93 	.word	0x0800dd93
 800dd58:	0800dd7d 	.word	0x0800dd7d
 800dd5c:	0800dd93 	.word	0x0800dd93
 800dd60:	0800dd83 	.word	0x0800dd83
 800dd64:	0800dd93 	.word	0x0800dd93
 800dd68:	0800dd93 	.word	0x0800dd93
 800dd6c:	0800dd93 	.word	0x0800dd93
 800dd70:	0800dd8b 	.word	0x0800dd8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dd74:	f7fc f85e 	bl	8009e34 <HAL_RCC_GetPCLK1Freq>
 800dd78:	61f8      	str	r0, [r7, #28]
        break;
 800dd7a:	e010      	b.n	800dd9e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800dd7c:	4b8f      	ldr	r3, [pc, #572]	; (800dfbc <UART_SetConfig+0x56c>)
 800dd7e:	61fb      	str	r3, [r7, #28]
        break;
 800dd80:	e00d      	b.n	800dd9e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dd82:	f7fb ffbf 	bl	8009d04 <HAL_RCC_GetSysClockFreq>
 800dd86:	61f8      	str	r0, [r7, #28]
        break;
 800dd88:	e009      	b.n	800dd9e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dd8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dd8e:	61fb      	str	r3, [r7, #28]
        break;
 800dd90:	e005      	b.n	800dd9e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800dd92:	2300      	movs	r3, #0
 800dd94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800dd96:	2301      	movs	r3, #1
 800dd98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800dd9c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800dd9e:	69fb      	ldr	r3, [r7, #28]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	f000 80fb 	beq.w	800df9c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	685a      	ldr	r2, [r3, #4]
 800ddaa:	4613      	mov	r3, r2
 800ddac:	005b      	lsls	r3, r3, #1
 800ddae:	4413      	add	r3, r2
 800ddb0:	69fa      	ldr	r2, [r7, #28]
 800ddb2:	429a      	cmp	r2, r3
 800ddb4:	d305      	bcc.n	800ddc2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	685b      	ldr	r3, [r3, #4]
 800ddba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ddbc:	69fa      	ldr	r2, [r7, #28]
 800ddbe:	429a      	cmp	r2, r3
 800ddc0:	d903      	bls.n	800ddca <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800ddc2:	2301      	movs	r3, #1
 800ddc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ddc8:	e0e8      	b.n	800df9c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800ddca:	69fb      	ldr	r3, [r7, #28]
 800ddcc:	2200      	movs	r2, #0
 800ddce:	461c      	mov	r4, r3
 800ddd0:	4615      	mov	r5, r2
 800ddd2:	f04f 0200 	mov.w	r2, #0
 800ddd6:	f04f 0300 	mov.w	r3, #0
 800ddda:	022b      	lsls	r3, r5, #8
 800dddc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800dde0:	0222      	lsls	r2, r4, #8
 800dde2:	68f9      	ldr	r1, [r7, #12]
 800dde4:	6849      	ldr	r1, [r1, #4]
 800dde6:	0849      	lsrs	r1, r1, #1
 800dde8:	2000      	movs	r0, #0
 800ddea:	4688      	mov	r8, r1
 800ddec:	4681      	mov	r9, r0
 800ddee:	eb12 0a08 	adds.w	sl, r2, r8
 800ddf2:	eb43 0b09 	adc.w	fp, r3, r9
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	685b      	ldr	r3, [r3, #4]
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	603b      	str	r3, [r7, #0]
 800ddfe:	607a      	str	r2, [r7, #4]
 800de00:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de04:	4650      	mov	r0, sl
 800de06:	4659      	mov	r1, fp
 800de08:	f7f2 ff8e 	bl	8000d28 <__aeabi_uldivmod>
 800de0c:	4602      	mov	r2, r0
 800de0e:	460b      	mov	r3, r1
 800de10:	4613      	mov	r3, r2
 800de12:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800de14:	69bb      	ldr	r3, [r7, #24]
 800de16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800de1a:	d308      	bcc.n	800de2e <UART_SetConfig+0x3de>
 800de1c:	69bb      	ldr	r3, [r7, #24]
 800de1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800de22:	d204      	bcs.n	800de2e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	69ba      	ldr	r2, [r7, #24]
 800de2a:	60da      	str	r2, [r3, #12]
 800de2c:	e0b6      	b.n	800df9c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800de2e:	2301      	movs	r3, #1
 800de30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800de34:	e0b2      	b.n	800df9c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	69db      	ldr	r3, [r3, #28]
 800de3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de3e:	d15e      	bne.n	800defe <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800de40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800de44:	2b08      	cmp	r3, #8
 800de46:	d828      	bhi.n	800de9a <UART_SetConfig+0x44a>
 800de48:	a201      	add	r2, pc, #4	; (adr r2, 800de50 <UART_SetConfig+0x400>)
 800de4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de4e:	bf00      	nop
 800de50:	0800de75 	.word	0x0800de75
 800de54:	0800de7d 	.word	0x0800de7d
 800de58:	0800de85 	.word	0x0800de85
 800de5c:	0800de9b 	.word	0x0800de9b
 800de60:	0800de8b 	.word	0x0800de8b
 800de64:	0800de9b 	.word	0x0800de9b
 800de68:	0800de9b 	.word	0x0800de9b
 800de6c:	0800de9b 	.word	0x0800de9b
 800de70:	0800de93 	.word	0x0800de93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800de74:	f7fb ffde 	bl	8009e34 <HAL_RCC_GetPCLK1Freq>
 800de78:	61f8      	str	r0, [r7, #28]
        break;
 800de7a:	e014      	b.n	800dea6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800de7c:	f7fb fff0 	bl	8009e60 <HAL_RCC_GetPCLK2Freq>
 800de80:	61f8      	str	r0, [r7, #28]
        break;
 800de82:	e010      	b.n	800dea6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800de84:	4b4d      	ldr	r3, [pc, #308]	; (800dfbc <UART_SetConfig+0x56c>)
 800de86:	61fb      	str	r3, [r7, #28]
        break;
 800de88:	e00d      	b.n	800dea6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800de8a:	f7fb ff3b 	bl	8009d04 <HAL_RCC_GetSysClockFreq>
 800de8e:	61f8      	str	r0, [r7, #28]
        break;
 800de90:	e009      	b.n	800dea6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800de92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800de96:	61fb      	str	r3, [r7, #28]
        break;
 800de98:	e005      	b.n	800dea6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800de9a:	2300      	movs	r3, #0
 800de9c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800de9e:	2301      	movs	r3, #1
 800dea0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800dea4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800dea6:	69fb      	ldr	r3, [r7, #28]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d077      	beq.n	800df9c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800deac:	69fb      	ldr	r3, [r7, #28]
 800deae:	005a      	lsls	r2, r3, #1
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	685b      	ldr	r3, [r3, #4]
 800deb4:	085b      	lsrs	r3, r3, #1
 800deb6:	441a      	add	r2, r3
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	685b      	ldr	r3, [r3, #4]
 800debc:	fbb2 f3f3 	udiv	r3, r2, r3
 800dec0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dec2:	69bb      	ldr	r3, [r7, #24]
 800dec4:	2b0f      	cmp	r3, #15
 800dec6:	d916      	bls.n	800def6 <UART_SetConfig+0x4a6>
 800dec8:	69bb      	ldr	r3, [r7, #24]
 800deca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dece:	d212      	bcs.n	800def6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ded0:	69bb      	ldr	r3, [r7, #24]
 800ded2:	b29b      	uxth	r3, r3
 800ded4:	f023 030f 	bic.w	r3, r3, #15
 800ded8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800deda:	69bb      	ldr	r3, [r7, #24]
 800dedc:	085b      	lsrs	r3, r3, #1
 800dede:	b29b      	uxth	r3, r3
 800dee0:	f003 0307 	and.w	r3, r3, #7
 800dee4:	b29a      	uxth	r2, r3
 800dee6:	8afb      	ldrh	r3, [r7, #22]
 800dee8:	4313      	orrs	r3, r2
 800deea:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	8afa      	ldrh	r2, [r7, #22]
 800def2:	60da      	str	r2, [r3, #12]
 800def4:	e052      	b.n	800df9c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800def6:	2301      	movs	r3, #1
 800def8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800defc:	e04e      	b.n	800df9c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800defe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800df02:	2b08      	cmp	r3, #8
 800df04:	d827      	bhi.n	800df56 <UART_SetConfig+0x506>
 800df06:	a201      	add	r2, pc, #4	; (adr r2, 800df0c <UART_SetConfig+0x4bc>)
 800df08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df0c:	0800df31 	.word	0x0800df31
 800df10:	0800df39 	.word	0x0800df39
 800df14:	0800df41 	.word	0x0800df41
 800df18:	0800df57 	.word	0x0800df57
 800df1c:	0800df47 	.word	0x0800df47
 800df20:	0800df57 	.word	0x0800df57
 800df24:	0800df57 	.word	0x0800df57
 800df28:	0800df57 	.word	0x0800df57
 800df2c:	0800df4f 	.word	0x0800df4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800df30:	f7fb ff80 	bl	8009e34 <HAL_RCC_GetPCLK1Freq>
 800df34:	61f8      	str	r0, [r7, #28]
        break;
 800df36:	e014      	b.n	800df62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800df38:	f7fb ff92 	bl	8009e60 <HAL_RCC_GetPCLK2Freq>
 800df3c:	61f8      	str	r0, [r7, #28]
        break;
 800df3e:	e010      	b.n	800df62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800df40:	4b1e      	ldr	r3, [pc, #120]	; (800dfbc <UART_SetConfig+0x56c>)
 800df42:	61fb      	str	r3, [r7, #28]
        break;
 800df44:	e00d      	b.n	800df62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800df46:	f7fb fedd 	bl	8009d04 <HAL_RCC_GetSysClockFreq>
 800df4a:	61f8      	str	r0, [r7, #28]
        break;
 800df4c:	e009      	b.n	800df62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800df4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800df52:	61fb      	str	r3, [r7, #28]
        break;
 800df54:	e005      	b.n	800df62 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800df56:	2300      	movs	r3, #0
 800df58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800df5a:	2301      	movs	r3, #1
 800df5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800df60:	bf00      	nop
    }

    if (pclk != 0U)
 800df62:	69fb      	ldr	r3, [r7, #28]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d019      	beq.n	800df9c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	685b      	ldr	r3, [r3, #4]
 800df6c:	085a      	lsrs	r2, r3, #1
 800df6e:	69fb      	ldr	r3, [r7, #28]
 800df70:	441a      	add	r2, r3
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	685b      	ldr	r3, [r3, #4]
 800df76:	fbb2 f3f3 	udiv	r3, r2, r3
 800df7a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800df7c:	69bb      	ldr	r3, [r7, #24]
 800df7e:	2b0f      	cmp	r3, #15
 800df80:	d909      	bls.n	800df96 <UART_SetConfig+0x546>
 800df82:	69bb      	ldr	r3, [r7, #24]
 800df84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df88:	d205      	bcs.n	800df96 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800df8a:	69bb      	ldr	r3, [r7, #24]
 800df8c:	b29a      	uxth	r2, r3
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	60da      	str	r2, [r3, #12]
 800df94:	e002      	b.n	800df9c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800df96:	2301      	movs	r3, #1
 800df98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	2200      	movs	r2, #0
 800dfa0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800dfa8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800dfac:	4618      	mov	r0, r3
 800dfae:	3728      	adds	r7, #40	; 0x28
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dfb6:	bf00      	nop
 800dfb8:	40008000 	.word	0x40008000
 800dfbc:	00f42400 	.word	0x00f42400

0800dfc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dfc0:	b480      	push	{r7}
 800dfc2:	b083      	sub	sp, #12
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfcc:	f003 0301 	and.w	r3, r3, #1
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d00a      	beq.n	800dfea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	685b      	ldr	r3, [r3, #4]
 800dfda:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	430a      	orrs	r2, r1
 800dfe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfee:	f003 0302 	and.w	r3, r3, #2
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d00a      	beq.n	800e00c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	685b      	ldr	r3, [r3, #4]
 800dffc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	430a      	orrs	r2, r1
 800e00a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e010:	f003 0304 	and.w	r3, r3, #4
 800e014:	2b00      	cmp	r3, #0
 800e016:	d00a      	beq.n	800e02e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	685b      	ldr	r3, [r3, #4]
 800e01e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	430a      	orrs	r2, r1
 800e02c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e032:	f003 0308 	and.w	r3, r3, #8
 800e036:	2b00      	cmp	r3, #0
 800e038:	d00a      	beq.n	800e050 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	685b      	ldr	r3, [r3, #4]
 800e040:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	430a      	orrs	r2, r1
 800e04e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e054:	f003 0310 	and.w	r3, r3, #16
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d00a      	beq.n	800e072 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	689b      	ldr	r3, [r3, #8]
 800e062:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	430a      	orrs	r2, r1
 800e070:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e076:	f003 0320 	and.w	r3, r3, #32
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d00a      	beq.n	800e094 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	689b      	ldr	r3, [r3, #8]
 800e084:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	430a      	orrs	r2, r1
 800e092:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d01a      	beq.n	800e0d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	685b      	ldr	r3, [r3, #4]
 800e0a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	430a      	orrs	r2, r1
 800e0b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e0be:	d10a      	bne.n	800e0d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	685b      	ldr	r3, [r3, #4]
 800e0c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	430a      	orrs	r2, r1
 800e0d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d00a      	beq.n	800e0f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	685b      	ldr	r3, [r3, #4]
 800e0e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	430a      	orrs	r2, r1
 800e0f6:	605a      	str	r2, [r3, #4]
  }
}
 800e0f8:	bf00      	nop
 800e0fa:	370c      	adds	r7, #12
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e102:	4770      	bx	lr

0800e104 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b086      	sub	sp, #24
 800e108:	af02      	add	r7, sp, #8
 800e10a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	2200      	movs	r2, #0
 800e110:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e114:	f7f8 fe38 	bl	8006d88 <HAL_GetTick>
 800e118:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	f003 0308 	and.w	r3, r3, #8
 800e124:	2b08      	cmp	r3, #8
 800e126:	d10e      	bne.n	800e146 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e128:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e12c:	9300      	str	r3, [sp, #0]
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	2200      	movs	r2, #0
 800e132:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e136:	6878      	ldr	r0, [r7, #4]
 800e138:	f000 f82d 	bl	800e196 <UART_WaitOnFlagUntilTimeout>
 800e13c:	4603      	mov	r3, r0
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d001      	beq.n	800e146 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e142:	2303      	movs	r3, #3
 800e144:	e023      	b.n	800e18e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	f003 0304 	and.w	r3, r3, #4
 800e150:	2b04      	cmp	r3, #4
 800e152:	d10e      	bne.n	800e172 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e154:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e158:	9300      	str	r3, [sp, #0]
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	2200      	movs	r2, #0
 800e15e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e162:	6878      	ldr	r0, [r7, #4]
 800e164:	f000 f817 	bl	800e196 <UART_WaitOnFlagUntilTimeout>
 800e168:	4603      	mov	r3, r0
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d001      	beq.n	800e172 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e16e:	2303      	movs	r3, #3
 800e170:	e00d      	b.n	800e18e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	2220      	movs	r2, #32
 800e176:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2220      	movs	r2, #32
 800e17c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	2200      	movs	r2, #0
 800e182:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2200      	movs	r2, #0
 800e188:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800e18c:	2300      	movs	r3, #0
}
 800e18e:	4618      	mov	r0, r3
 800e190:	3710      	adds	r7, #16
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}

0800e196 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e196:	b580      	push	{r7, lr}
 800e198:	b09c      	sub	sp, #112	; 0x70
 800e19a:	af00      	add	r7, sp, #0
 800e19c:	60f8      	str	r0, [r7, #12]
 800e19e:	60b9      	str	r1, [r7, #8]
 800e1a0:	603b      	str	r3, [r7, #0]
 800e1a2:	4613      	mov	r3, r2
 800e1a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e1a6:	e0a5      	b.n	800e2f4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e1a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e1aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e1ae:	f000 80a1 	beq.w	800e2f4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e1b2:	f7f8 fde9 	bl	8006d88 <HAL_GetTick>
 800e1b6:	4602      	mov	r2, r0
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	1ad3      	subs	r3, r2, r3
 800e1bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e1be:	429a      	cmp	r2, r3
 800e1c0:	d302      	bcc.n	800e1c8 <UART_WaitOnFlagUntilTimeout+0x32>
 800e1c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d13e      	bne.n	800e246 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1d0:	e853 3f00 	ldrex	r3, [r3]
 800e1d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e1d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e1dc:	667b      	str	r3, [r7, #100]	; 0x64
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	461a      	mov	r2, r3
 800e1e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e1e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e1e8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e1ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e1ee:	e841 2300 	strex	r3, r2, [r1]
 800e1f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e1f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d1e6      	bne.n	800e1c8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	3308      	adds	r3, #8
 800e200:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e204:	e853 3f00 	ldrex	r3, [r3]
 800e208:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e20c:	f023 0301 	bic.w	r3, r3, #1
 800e210:	663b      	str	r3, [r7, #96]	; 0x60
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	3308      	adds	r3, #8
 800e218:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e21a:	64ba      	str	r2, [r7, #72]	; 0x48
 800e21c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e21e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e220:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e222:	e841 2300 	strex	r3, r2, [r1]
 800e226:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d1e5      	bne.n	800e1fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	2220      	movs	r2, #32
 800e232:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	2220      	movs	r2, #32
 800e238:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	2200      	movs	r2, #0
 800e23e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800e242:	2303      	movs	r3, #3
 800e244:	e067      	b.n	800e316 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	f003 0304 	and.w	r3, r3, #4
 800e250:	2b00      	cmp	r3, #0
 800e252:	d04f      	beq.n	800e2f4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	69db      	ldr	r3, [r3, #28]
 800e25a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e25e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e262:	d147      	bne.n	800e2f4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e26c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e276:	e853 3f00 	ldrex	r3, [r3]
 800e27a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e27e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e282:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	461a      	mov	r2, r3
 800e28a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e28c:	637b      	str	r3, [r7, #52]	; 0x34
 800e28e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e290:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e292:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e294:	e841 2300 	strex	r3, r2, [r1]
 800e298:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d1e6      	bne.n	800e26e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	3308      	adds	r3, #8
 800e2a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2a8:	697b      	ldr	r3, [r7, #20]
 800e2aa:	e853 3f00 	ldrex	r3, [r3]
 800e2ae:	613b      	str	r3, [r7, #16]
   return(result);
 800e2b0:	693b      	ldr	r3, [r7, #16]
 800e2b2:	f023 0301 	bic.w	r3, r3, #1
 800e2b6:	66bb      	str	r3, [r7, #104]	; 0x68
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	3308      	adds	r3, #8
 800e2be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e2c0:	623a      	str	r2, [r7, #32]
 800e2c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2c4:	69f9      	ldr	r1, [r7, #28]
 800e2c6:	6a3a      	ldr	r2, [r7, #32]
 800e2c8:	e841 2300 	strex	r3, r2, [r1]
 800e2cc:	61bb      	str	r3, [r7, #24]
   return(result);
 800e2ce:	69bb      	ldr	r3, [r7, #24]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d1e5      	bne.n	800e2a0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	2220      	movs	r2, #32
 800e2d8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	2220      	movs	r2, #32
 800e2de:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	2220      	movs	r2, #32
 800e2e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800e2f0:	2303      	movs	r3, #3
 800e2f2:	e010      	b.n	800e316 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	69da      	ldr	r2, [r3, #28]
 800e2fa:	68bb      	ldr	r3, [r7, #8]
 800e2fc:	4013      	ands	r3, r2
 800e2fe:	68ba      	ldr	r2, [r7, #8]
 800e300:	429a      	cmp	r2, r3
 800e302:	bf0c      	ite	eq
 800e304:	2301      	moveq	r3, #1
 800e306:	2300      	movne	r3, #0
 800e308:	b2db      	uxtb	r3, r3
 800e30a:	461a      	mov	r2, r3
 800e30c:	79fb      	ldrb	r3, [r7, #7]
 800e30e:	429a      	cmp	r2, r3
 800e310:	f43f af4a 	beq.w	800e1a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e314:	2300      	movs	r3, #0
}
 800e316:	4618      	mov	r0, r3
 800e318:	3770      	adds	r7, #112	; 0x70
 800e31a:	46bd      	mov	sp, r7
 800e31c:	bd80      	pop	{r7, pc}
	...

0800e320 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e320:	b480      	push	{r7}
 800e322:	b097      	sub	sp, #92	; 0x5c
 800e324:	af00      	add	r7, sp, #0
 800e326:	60f8      	str	r0, [r7, #12]
 800e328:	60b9      	str	r1, [r7, #8]
 800e32a:	4613      	mov	r3, r2
 800e32c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	68ba      	ldr	r2, [r7, #8]
 800e332:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	88fa      	ldrh	r2, [r7, #6]
 800e338:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	88fa      	ldrh	r2, [r7, #6]
 800e340:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	2200      	movs	r2, #0
 800e348:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	689b      	ldr	r3, [r3, #8]
 800e34e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e352:	d10e      	bne.n	800e372 <UART_Start_Receive_IT+0x52>
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	691b      	ldr	r3, [r3, #16]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d105      	bne.n	800e368 <UART_Start_Receive_IT+0x48>
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800e362:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e366:	e02d      	b.n	800e3c4 <UART_Start_Receive_IT+0xa4>
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	22ff      	movs	r2, #255	; 0xff
 800e36c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e370:	e028      	b.n	800e3c4 <UART_Start_Receive_IT+0xa4>
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	689b      	ldr	r3, [r3, #8]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d10d      	bne.n	800e396 <UART_Start_Receive_IT+0x76>
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	691b      	ldr	r3, [r3, #16]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d104      	bne.n	800e38c <UART_Start_Receive_IT+0x6c>
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	22ff      	movs	r2, #255	; 0xff
 800e386:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e38a:	e01b      	b.n	800e3c4 <UART_Start_Receive_IT+0xa4>
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	227f      	movs	r2, #127	; 0x7f
 800e390:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e394:	e016      	b.n	800e3c4 <UART_Start_Receive_IT+0xa4>
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	689b      	ldr	r3, [r3, #8]
 800e39a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e39e:	d10d      	bne.n	800e3bc <UART_Start_Receive_IT+0x9c>
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	691b      	ldr	r3, [r3, #16]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d104      	bne.n	800e3b2 <UART_Start_Receive_IT+0x92>
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	227f      	movs	r2, #127	; 0x7f
 800e3ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e3b0:	e008      	b.n	800e3c4 <UART_Start_Receive_IT+0xa4>
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	223f      	movs	r2, #63	; 0x3f
 800e3b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e3ba:	e003      	b.n	800e3c4 <UART_Start_Receive_IT+0xa4>
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	2200      	movs	r2, #0
 800e3c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	2222      	movs	r2, #34	; 0x22
 800e3d0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	3308      	adds	r3, #8
 800e3d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3dc:	e853 3f00 	ldrex	r3, [r3]
 800e3e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3e4:	f043 0301 	orr.w	r3, r3, #1
 800e3e8:	657b      	str	r3, [r7, #84]	; 0x54
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	3308      	adds	r3, #8
 800e3f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e3f2:	64ba      	str	r2, [r7, #72]	; 0x48
 800e3f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e3f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e3fa:	e841 2300 	strex	r3, r2, [r1]
 800e3fe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e400:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e402:	2b00      	cmp	r3, #0
 800e404:	d1e5      	bne.n	800e3d2 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	689b      	ldr	r3, [r3, #8]
 800e40a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e40e:	d107      	bne.n	800e420 <UART_Start_Receive_IT+0x100>
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	691b      	ldr	r3, [r3, #16]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d103      	bne.n	800e420 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	4a24      	ldr	r2, [pc, #144]	; (800e4ac <UART_Start_Receive_IT+0x18c>)
 800e41c:	665a      	str	r2, [r3, #100]	; 0x64
 800e41e:	e002      	b.n	800e426 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	4a23      	ldr	r2, [pc, #140]	; (800e4b0 <UART_Start_Receive_IT+0x190>)
 800e424:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	2200      	movs	r2, #0
 800e42a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	691b      	ldr	r3, [r3, #16]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d019      	beq.n	800e46a <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e43e:	e853 3f00 	ldrex	r3, [r3]
 800e442:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e446:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800e44a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	461a      	mov	r2, r3
 800e452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e454:	637b      	str	r3, [r7, #52]	; 0x34
 800e456:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e458:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e45a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e45c:	e841 2300 	strex	r3, r2, [r1]
 800e460:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e464:	2b00      	cmp	r3, #0
 800e466:	d1e6      	bne.n	800e436 <UART_Start_Receive_IT+0x116>
 800e468:	e018      	b.n	800e49c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e470:	697b      	ldr	r3, [r7, #20]
 800e472:	e853 3f00 	ldrex	r3, [r3]
 800e476:	613b      	str	r3, [r7, #16]
   return(result);
 800e478:	693b      	ldr	r3, [r7, #16]
 800e47a:	f043 0320 	orr.w	r3, r3, #32
 800e47e:	653b      	str	r3, [r7, #80]	; 0x50
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	461a      	mov	r2, r3
 800e486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e488:	623b      	str	r3, [r7, #32]
 800e48a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e48c:	69f9      	ldr	r1, [r7, #28]
 800e48e:	6a3a      	ldr	r2, [r7, #32]
 800e490:	e841 2300 	strex	r3, r2, [r1]
 800e494:	61bb      	str	r3, [r7, #24]
   return(result);
 800e496:	69bb      	ldr	r3, [r7, #24]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d1e6      	bne.n	800e46a <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800e49c:	2300      	movs	r3, #0
}
 800e49e:	4618      	mov	r0, r3
 800e4a0:	375c      	adds	r7, #92	; 0x5c
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a8:	4770      	bx	lr
 800e4aa:	bf00      	nop
 800e4ac:	0800e8d9 	.word	0x0800e8d9
 800e4b0:	0800e779 	.word	0x0800e779

0800e4b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e4b4:	b480      	push	{r7}
 800e4b6:	b089      	sub	sp, #36	; 0x24
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	e853 3f00 	ldrex	r3, [r3]
 800e4c8:	60bb      	str	r3, [r7, #8]
   return(result);
 800e4ca:	68bb      	ldr	r3, [r7, #8]
 800e4cc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e4d0:	61fb      	str	r3, [r7, #28]
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	461a      	mov	r2, r3
 800e4d8:	69fb      	ldr	r3, [r7, #28]
 800e4da:	61bb      	str	r3, [r7, #24]
 800e4dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4de:	6979      	ldr	r1, [r7, #20]
 800e4e0:	69ba      	ldr	r2, [r7, #24]
 800e4e2:	e841 2300 	strex	r3, r2, [r1]
 800e4e6:	613b      	str	r3, [r7, #16]
   return(result);
 800e4e8:	693b      	ldr	r3, [r7, #16]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d1e6      	bne.n	800e4bc <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	2220      	movs	r2, #32
 800e4f2:	679a      	str	r2, [r3, #120]	; 0x78
}
 800e4f4:	bf00      	nop
 800e4f6:	3724      	adds	r7, #36	; 0x24
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fe:	4770      	bx	lr

0800e500 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e500:	b480      	push	{r7}
 800e502:	b095      	sub	sp, #84	; 0x54
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e50e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e510:	e853 3f00 	ldrex	r3, [r3]
 800e514:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e518:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e51c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	461a      	mov	r2, r3
 800e524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e526:	643b      	str	r3, [r7, #64]	; 0x40
 800e528:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e52a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e52c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e52e:	e841 2300 	strex	r3, r2, [r1]
 800e532:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e536:	2b00      	cmp	r3, #0
 800e538:	d1e6      	bne.n	800e508 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	3308      	adds	r3, #8
 800e540:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e542:	6a3b      	ldr	r3, [r7, #32]
 800e544:	e853 3f00 	ldrex	r3, [r3]
 800e548:	61fb      	str	r3, [r7, #28]
   return(result);
 800e54a:	69fb      	ldr	r3, [r7, #28]
 800e54c:	f023 0301 	bic.w	r3, r3, #1
 800e550:	64bb      	str	r3, [r7, #72]	; 0x48
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	3308      	adds	r3, #8
 800e558:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e55a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e55c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e55e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e560:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e562:	e841 2300 	strex	r3, r2, [r1]
 800e566:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d1e5      	bne.n	800e53a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e572:	2b01      	cmp	r3, #1
 800e574:	d118      	bne.n	800e5a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	e853 3f00 	ldrex	r3, [r3]
 800e582:	60bb      	str	r3, [r7, #8]
   return(result);
 800e584:	68bb      	ldr	r3, [r7, #8]
 800e586:	f023 0310 	bic.w	r3, r3, #16
 800e58a:	647b      	str	r3, [r7, #68]	; 0x44
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	461a      	mov	r2, r3
 800e592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e594:	61bb      	str	r3, [r7, #24]
 800e596:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e598:	6979      	ldr	r1, [r7, #20]
 800e59a:	69ba      	ldr	r2, [r7, #24]
 800e59c:	e841 2300 	strex	r3, r2, [r1]
 800e5a0:	613b      	str	r3, [r7, #16]
   return(result);
 800e5a2:	693b      	ldr	r3, [r7, #16]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d1e6      	bne.n	800e576 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2220      	movs	r2, #32
 800e5ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	665a      	str	r2, [r3, #100]	; 0x64
}
 800e5ba:	bf00      	nop
 800e5bc:	3754      	adds	r7, #84	; 0x54
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c4:	4770      	bx	lr

0800e5c6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e5c6:	b580      	push	{r7, lr}
 800e5c8:	b090      	sub	sp, #64	; 0x40
 800e5ca:	af00      	add	r7, sp, #0
 800e5cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5d2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	f003 0320 	and.w	r3, r3, #32
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d137      	bne.n	800e652 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800e5e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e5ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	3308      	adds	r3, #8
 800e5f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5f4:	e853 3f00 	ldrex	r3, [r3]
 800e5f8:	623b      	str	r3, [r7, #32]
   return(result);
 800e5fa:	6a3b      	ldr	r3, [r7, #32]
 800e5fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e600:	63bb      	str	r3, [r7, #56]	; 0x38
 800e602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	3308      	adds	r3, #8
 800e608:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e60a:	633a      	str	r2, [r7, #48]	; 0x30
 800e60c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e60e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e612:	e841 2300 	strex	r3, r2, [r1]
 800e616:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d1e5      	bne.n	800e5ea <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e61e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e624:	693b      	ldr	r3, [r7, #16]
 800e626:	e853 3f00 	ldrex	r3, [r3]
 800e62a:	60fb      	str	r3, [r7, #12]
   return(result);
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e632:	637b      	str	r3, [r7, #52]	; 0x34
 800e634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	461a      	mov	r2, r3
 800e63a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e63c:	61fb      	str	r3, [r7, #28]
 800e63e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e640:	69b9      	ldr	r1, [r7, #24]
 800e642:	69fa      	ldr	r2, [r7, #28]
 800e644:	e841 2300 	strex	r3, r2, [r1]
 800e648:	617b      	str	r3, [r7, #20]
   return(result);
 800e64a:	697b      	ldr	r3, [r7, #20]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d1e6      	bne.n	800e61e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e650:	e002      	b.n	800e658 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800e652:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e654:	f7f5 ffd0 	bl	80045f8 <HAL_UART_TxCpltCallback>
}
 800e658:	bf00      	nop
 800e65a:	3740      	adds	r7, #64	; 0x40
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bd80      	pop	{r7, pc}

0800e660 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b084      	sub	sp, #16
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e66c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e66e:	68f8      	ldr	r0, [r7, #12]
 800e670:	f7ff f9d8 	bl	800da24 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e674:	bf00      	nop
 800e676:	3710      	adds	r7, #16
 800e678:	46bd      	mov	sp, r7
 800e67a:	bd80      	pop	{r7, pc}

0800e67c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b086      	sub	sp, #24
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e688:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e68a:	697b      	ldr	r3, [r7, #20]
 800e68c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e68e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e690:	697b      	ldr	r3, [r7, #20]
 800e692:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e694:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e696:	697b      	ldr	r3, [r7, #20]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	689b      	ldr	r3, [r3, #8]
 800e69c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6a0:	2b80      	cmp	r3, #128	; 0x80
 800e6a2:	d109      	bne.n	800e6b8 <UART_DMAError+0x3c>
 800e6a4:	693b      	ldr	r3, [r7, #16]
 800e6a6:	2b21      	cmp	r3, #33	; 0x21
 800e6a8:	d106      	bne.n	800e6b8 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e6aa:	697b      	ldr	r3, [r7, #20]
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800e6b2:	6978      	ldr	r0, [r7, #20]
 800e6b4:	f7ff fefe 	bl	800e4b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e6b8:	697b      	ldr	r3, [r7, #20]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	689b      	ldr	r3, [r3, #8]
 800e6be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6c2:	2b40      	cmp	r3, #64	; 0x40
 800e6c4:	d109      	bne.n	800e6da <UART_DMAError+0x5e>
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	2b22      	cmp	r3, #34	; 0x22
 800e6ca:	d106      	bne.n	800e6da <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e6cc:	697b      	ldr	r3, [r7, #20]
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800e6d4:	6978      	ldr	r0, [r7, #20]
 800e6d6:	f7ff ff13 	bl	800e500 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e6da:	697b      	ldr	r3, [r7, #20]
 800e6dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e6e0:	f043 0210 	orr.w	r2, r3, #16
 800e6e4:	697b      	ldr	r3, [r7, #20]
 800e6e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e6ea:	6978      	ldr	r0, [r7, #20]
 800e6ec:	f7f5 ffa8 	bl	8004640 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e6f0:	bf00      	nop
 800e6f2:	3718      	adds	r7, #24
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	bd80      	pop	{r7, pc}

0800e6f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b084      	sub	sp, #16
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e704:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	2200      	movs	r2, #0
 800e70a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	2200      	movs	r2, #0
 800e712:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e716:	68f8      	ldr	r0, [r7, #12]
 800e718:	f7f5 ff92 	bl	8004640 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e71c:	bf00      	nop
 800e71e:	3710      	adds	r7, #16
 800e720:	46bd      	mov	sp, r7
 800e722:	bd80      	pop	{r7, pc}

0800e724 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e724:	b580      	push	{r7, lr}
 800e726:	b088      	sub	sp, #32
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	e853 3f00 	ldrex	r3, [r3]
 800e738:	60bb      	str	r3, [r7, #8]
   return(result);
 800e73a:	68bb      	ldr	r3, [r7, #8]
 800e73c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e740:	61fb      	str	r3, [r7, #28]
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	461a      	mov	r2, r3
 800e748:	69fb      	ldr	r3, [r7, #28]
 800e74a:	61bb      	str	r3, [r7, #24]
 800e74c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e74e:	6979      	ldr	r1, [r7, #20]
 800e750:	69ba      	ldr	r2, [r7, #24]
 800e752:	e841 2300 	strex	r3, r2, [r1]
 800e756:	613b      	str	r3, [r7, #16]
   return(result);
 800e758:	693b      	ldr	r3, [r7, #16]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d1e6      	bne.n	800e72c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	2220      	movs	r2, #32
 800e762:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	2200      	movs	r2, #0
 800e768:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e76a:	6878      	ldr	r0, [r7, #4]
 800e76c:	f7f5 ff44 	bl	80045f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e770:	bf00      	nop
 800e772:	3720      	adds	r7, #32
 800e774:	46bd      	mov	sp, r7
 800e776:	bd80      	pop	{r7, pc}

0800e778 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e778:	b580      	push	{r7, lr}
 800e77a:	b096      	sub	sp, #88	; 0x58
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e786:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e78e:	2b22      	cmp	r3, #34	; 0x22
 800e790:	f040 8094 	bne.w	800e8bc <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e79a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e79e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800e7a2:	b2d9      	uxtb	r1, r3
 800e7a4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e7a8:	b2da      	uxtb	r2, r3
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7ae:	400a      	ands	r2, r1
 800e7b0:	b2d2      	uxtb	r2, r2
 800e7b2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7b8:	1c5a      	adds	r2, r3, #1
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e7c4:	b29b      	uxth	r3, r3
 800e7c6:	3b01      	subs	r3, #1
 800e7c8:	b29a      	uxth	r2, r3
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e7d6:	b29b      	uxth	r3, r3
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d179      	bne.n	800e8d0 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7e4:	e853 3f00 	ldrex	r3, [r3]
 800e7e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e7ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e7f0:	653b      	str	r3, [r7, #80]	; 0x50
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	461a      	mov	r2, r3
 800e7f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7fa:	647b      	str	r3, [r7, #68]	; 0x44
 800e7fc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e800:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e802:	e841 2300 	strex	r3, r2, [r1]
 800e806:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d1e6      	bne.n	800e7dc <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	3308      	adds	r3, #8
 800e814:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e818:	e853 3f00 	ldrex	r3, [r3]
 800e81c:	623b      	str	r3, [r7, #32]
   return(result);
 800e81e:	6a3b      	ldr	r3, [r7, #32]
 800e820:	f023 0301 	bic.w	r3, r3, #1
 800e824:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	3308      	adds	r3, #8
 800e82c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e82e:	633a      	str	r2, [r7, #48]	; 0x30
 800e830:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e832:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e836:	e841 2300 	strex	r3, r2, [r1]
 800e83a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d1e5      	bne.n	800e80e <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	2220      	movs	r2, #32
 800e846:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	2200      	movs	r2, #0
 800e84c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e852:	2b01      	cmp	r3, #1
 800e854:	d12e      	bne.n	800e8b4 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	2200      	movs	r2, #0
 800e85a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e862:	693b      	ldr	r3, [r7, #16]
 800e864:	e853 3f00 	ldrex	r3, [r3]
 800e868:	60fb      	str	r3, [r7, #12]
   return(result);
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	f023 0310 	bic.w	r3, r3, #16
 800e870:	64bb      	str	r3, [r7, #72]	; 0x48
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	461a      	mov	r2, r3
 800e878:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e87a:	61fb      	str	r3, [r7, #28]
 800e87c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e87e:	69b9      	ldr	r1, [r7, #24]
 800e880:	69fa      	ldr	r2, [r7, #28]
 800e882:	e841 2300 	strex	r3, r2, [r1]
 800e886:	617b      	str	r3, [r7, #20]
   return(result);
 800e888:	697b      	ldr	r3, [r7, #20]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d1e6      	bne.n	800e85c <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	69db      	ldr	r3, [r3, #28]
 800e894:	f003 0310 	and.w	r3, r3, #16
 800e898:	2b10      	cmp	r3, #16
 800e89a:	d103      	bne.n	800e8a4 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	2210      	movs	r2, #16
 800e8a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e8aa:	4619      	mov	r1, r3
 800e8ac:	6878      	ldr	r0, [r7, #4]
 800e8ae:	f7ff f8c3 	bl	800da38 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e8b2:	e00d      	b.n	800e8d0 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800e8b4:	6878      	ldr	r0, [r7, #4]
 800e8b6:	f7f5 feed 	bl	8004694 <HAL_UART_RxCpltCallback>
}
 800e8ba:	e009      	b.n	800e8d0 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	8b1b      	ldrh	r3, [r3, #24]
 800e8c2:	b29a      	uxth	r2, r3
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	f042 0208 	orr.w	r2, r2, #8
 800e8cc:	b292      	uxth	r2, r2
 800e8ce:	831a      	strh	r2, [r3, #24]
}
 800e8d0:	bf00      	nop
 800e8d2:	3758      	adds	r7, #88	; 0x58
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	bd80      	pop	{r7, pc}

0800e8d8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b096      	sub	sp, #88	; 0x58
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e8e6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e8ee:	2b22      	cmp	r3, #34	; 0x22
 800e8f0:	f040 8094 	bne.w	800ea1c <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e8fa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e902:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800e904:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800e908:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e90c:	4013      	ands	r3, r2
 800e90e:	b29a      	uxth	r2, r3
 800e910:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e912:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e918:	1c9a      	adds	r2, r3, #2
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e924:	b29b      	uxth	r3, r3
 800e926:	3b01      	subs	r3, #1
 800e928:	b29a      	uxth	r2, r3
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e936:	b29b      	uxth	r3, r3
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d179      	bne.n	800ea30 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e944:	e853 3f00 	ldrex	r3, [r3]
 800e948:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e94c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e950:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	461a      	mov	r2, r3
 800e958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e95a:	643b      	str	r3, [r7, #64]	; 0x40
 800e95c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e95e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e960:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e962:	e841 2300 	strex	r3, r2, [r1]
 800e966:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d1e6      	bne.n	800e93c <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	3308      	adds	r3, #8
 800e974:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e976:	6a3b      	ldr	r3, [r7, #32]
 800e978:	e853 3f00 	ldrex	r3, [r3]
 800e97c:	61fb      	str	r3, [r7, #28]
   return(result);
 800e97e:	69fb      	ldr	r3, [r7, #28]
 800e980:	f023 0301 	bic.w	r3, r3, #1
 800e984:	64bb      	str	r3, [r7, #72]	; 0x48
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	3308      	adds	r3, #8
 800e98c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e98e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e990:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e992:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e994:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e996:	e841 2300 	strex	r3, r2, [r1]
 800e99a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d1e5      	bne.n	800e96e <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2220      	movs	r2, #32
 800e9a6:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e9b2:	2b01      	cmp	r3, #1
 800e9b4:	d12e      	bne.n	800ea14 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	e853 3f00 	ldrex	r3, [r3]
 800e9c8:	60bb      	str	r3, [r7, #8]
   return(result);
 800e9ca:	68bb      	ldr	r3, [r7, #8]
 800e9cc:	f023 0310 	bic.w	r3, r3, #16
 800e9d0:	647b      	str	r3, [r7, #68]	; 0x44
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	461a      	mov	r2, r3
 800e9d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9da:	61bb      	str	r3, [r7, #24]
 800e9dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9de:	6979      	ldr	r1, [r7, #20]
 800e9e0:	69ba      	ldr	r2, [r7, #24]
 800e9e2:	e841 2300 	strex	r3, r2, [r1]
 800e9e6:	613b      	str	r3, [r7, #16]
   return(result);
 800e9e8:	693b      	ldr	r3, [r7, #16]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d1e6      	bne.n	800e9bc <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	69db      	ldr	r3, [r3, #28]
 800e9f4:	f003 0310 	and.w	r3, r3, #16
 800e9f8:	2b10      	cmp	r3, #16
 800e9fa:	d103      	bne.n	800ea04 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	2210      	movs	r2, #16
 800ea02:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ea0a:	4619      	mov	r1, r3
 800ea0c:	6878      	ldr	r0, [r7, #4]
 800ea0e:	f7ff f813 	bl	800da38 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ea12:	e00d      	b.n	800ea30 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800ea14:	6878      	ldr	r0, [r7, #4]
 800ea16:	f7f5 fe3d 	bl	8004694 <HAL_UART_RxCpltCallback>
}
 800ea1a:	e009      	b.n	800ea30 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	8b1b      	ldrh	r3, [r3, #24]
 800ea22:	b29a      	uxth	r2, r3
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	f042 0208 	orr.w	r2, r2, #8
 800ea2c:	b292      	uxth	r2, r2
 800ea2e:	831a      	strh	r2, [r3, #24]
}
 800ea30:	bf00      	nop
 800ea32:	3758      	adds	r7, #88	; 0x58
 800ea34:	46bd      	mov	sp, r7
 800ea36:	bd80      	pop	{r7, pc}

0800ea38 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ea38:	b480      	push	{r7}
 800ea3a:	b083      	sub	sp, #12
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ea40:	bf00      	nop
 800ea42:	370c      	adds	r7, #12
 800ea44:	46bd      	mov	sp, r7
 800ea46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4a:	4770      	bx	lr

0800ea4c <atof>:
 800ea4c:	2100      	movs	r1, #0
 800ea4e:	f001 bcf9 	b.w	8010444 <strtod>

0800ea52 <atoi>:
 800ea52:	220a      	movs	r2, #10
 800ea54:	2100      	movs	r1, #0
 800ea56:	f001 bd83 	b.w	8010560 <strtol>

0800ea5a <atol>:
 800ea5a:	220a      	movs	r2, #10
 800ea5c:	2100      	movs	r1, #0
 800ea5e:	f001 bd7f 	b.w	8010560 <strtol>
	...

0800ea64 <calloc>:
 800ea64:	4b02      	ldr	r3, [pc, #8]	; (800ea70 <calloc+0xc>)
 800ea66:	460a      	mov	r2, r1
 800ea68:	4601      	mov	r1, r0
 800ea6a:	6818      	ldr	r0, [r3, #0]
 800ea6c:	f000 b8fe 	b.w	800ec6c <_calloc_r>
 800ea70:	2000023c 	.word	0x2000023c

0800ea74 <__errno>:
 800ea74:	4b01      	ldr	r3, [pc, #4]	; (800ea7c <__errno+0x8>)
 800ea76:	6818      	ldr	r0, [r3, #0]
 800ea78:	4770      	bx	lr
 800ea7a:	bf00      	nop
 800ea7c:	2000023c 	.word	0x2000023c

0800ea80 <gmtime_r>:
 800ea80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea84:	e9d0 6700 	ldrd	r6, r7, [r0]
 800ea88:	460c      	mov	r4, r1
 800ea8a:	4a4f      	ldr	r2, [pc, #316]	; (800ebc8 <gmtime_r+0x148>)
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	4630      	mov	r0, r6
 800ea90:	4639      	mov	r1, r7
 800ea92:	f7f2 f8f9 	bl	8000c88 <__aeabi_ldivmod>
 800ea96:	4639      	mov	r1, r7
 800ea98:	4605      	mov	r5, r0
 800ea9a:	4a4b      	ldr	r2, [pc, #300]	; (800ebc8 <gmtime_r+0x148>)
 800ea9c:	4630      	mov	r0, r6
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	f7f2 f8f2 	bl	8000c88 <__aeabi_ldivmod>
 800eaa4:	2a00      	cmp	r2, #0
 800eaa6:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800eaaa:	bfb7      	itett	lt
 800eaac:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800eab0:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 800eab4:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 800eab8:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800eabc:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800eac0:	fbb2 f1f0 	udiv	r1, r2, r0
 800eac4:	fb00 2211 	mls	r2, r0, r1, r2
 800eac8:	203c      	movs	r0, #60	; 0x3c
 800eaca:	60a1      	str	r1, [r4, #8]
 800eacc:	fbb2 f1f0 	udiv	r1, r2, r0
 800ead0:	fb00 2211 	mls	r2, r0, r1, r2
 800ead4:	6061      	str	r1, [r4, #4]
 800ead6:	6022      	str	r2, [r4, #0]
 800ead8:	2107      	movs	r1, #7
 800eada:	1cda      	adds	r2, r3, #3
 800eadc:	fb92 f1f1 	sdiv	r1, r2, r1
 800eae0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800eae4:	1a52      	subs	r2, r2, r1
 800eae6:	bf48      	it	mi
 800eae8:	3207      	addmi	r2, #7
 800eaea:	4d38      	ldr	r5, [pc, #224]	; (800ebcc <gmtime_r+0x14c>)
 800eaec:	4838      	ldr	r0, [pc, #224]	; (800ebd0 <gmtime_r+0x150>)
 800eaee:	61a2      	str	r2, [r4, #24]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	bfb7      	itett	lt
 800eaf4:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800eaf8:	fb93 f5f5 	sdivge	r5, r3, r5
 800eafc:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800eb00:	fb92 f5f5 	sdivlt	r5, r2, r5
 800eb04:	fb00 3005 	mla	r0, r0, r5, r3
 800eb08:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800eb0c:	fbb0 f2f2 	udiv	r2, r0, r2
 800eb10:	4402      	add	r2, r0
 800eb12:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800eb16:	fbb0 f1f3 	udiv	r1, r0, r3
 800eb1a:	1a52      	subs	r2, r2, r1
 800eb1c:	f240 1c6d 	movw	ip, #365	; 0x16d
 800eb20:	492c      	ldr	r1, [pc, #176]	; (800ebd4 <gmtime_r+0x154>)
 800eb22:	fbb0 f1f1 	udiv	r1, r0, r1
 800eb26:	2764      	movs	r7, #100	; 0x64
 800eb28:	1a52      	subs	r2, r2, r1
 800eb2a:	fbb2 f1fc 	udiv	r1, r2, ip
 800eb2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb32:	fbb1 f6f7 	udiv	r6, r1, r7
 800eb36:	1af3      	subs	r3, r6, r3
 800eb38:	4403      	add	r3, r0
 800eb3a:	fb0c 3311 	mls	r3, ip, r1, r3
 800eb3e:	2299      	movs	r2, #153	; 0x99
 800eb40:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800eb44:	f10e 0e02 	add.w	lr, lr, #2
 800eb48:	f103 0c01 	add.w	ip, r3, #1
 800eb4c:	fbbe f0f2 	udiv	r0, lr, r2
 800eb50:	4342      	muls	r2, r0
 800eb52:	3202      	adds	r2, #2
 800eb54:	f04f 0805 	mov.w	r8, #5
 800eb58:	fbb2 f2f8 	udiv	r2, r2, r8
 800eb5c:	ebac 0c02 	sub.w	ip, ip, r2
 800eb60:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800eb64:	4596      	cmp	lr, r2
 800eb66:	bf94      	ite	ls
 800eb68:	2202      	movls	r2, #2
 800eb6a:	f06f 0209 	mvnhi.w	r2, #9
 800eb6e:	4410      	add	r0, r2
 800eb70:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800eb74:	fb02 1505 	mla	r5, r2, r5, r1
 800eb78:	2801      	cmp	r0, #1
 800eb7a:	bf98      	it	ls
 800eb7c:	3501      	addls	r5, #1
 800eb7e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800eb82:	d30d      	bcc.n	800eba0 <gmtime_r+0x120>
 800eb84:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800eb88:	61e3      	str	r3, [r4, #28]
 800eb8a:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800eb8e:	2300      	movs	r3, #0
 800eb90:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800eb94:	f8c4 c00c 	str.w	ip, [r4, #12]
 800eb98:	6223      	str	r3, [r4, #32]
 800eb9a:	4620      	mov	r0, r4
 800eb9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eba0:	078a      	lsls	r2, r1, #30
 800eba2:	d102      	bne.n	800ebaa <gmtime_r+0x12a>
 800eba4:	fb07 1616 	mls	r6, r7, r6, r1
 800eba8:	b95e      	cbnz	r6, 800ebc2 <gmtime_r+0x142>
 800ebaa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800ebae:	fbb1 f6f2 	udiv	r6, r1, r2
 800ebb2:	fb02 1216 	mls	r2, r2, r6, r1
 800ebb6:	fab2 f282 	clz	r2, r2
 800ebba:	0952      	lsrs	r2, r2, #5
 800ebbc:	333b      	adds	r3, #59	; 0x3b
 800ebbe:	4413      	add	r3, r2
 800ebc0:	e7e2      	b.n	800eb88 <gmtime_r+0x108>
 800ebc2:	2201      	movs	r2, #1
 800ebc4:	e7fa      	b.n	800ebbc <gmtime_r+0x13c>
 800ebc6:	bf00      	nop
 800ebc8:	00015180 	.word	0x00015180
 800ebcc:	00023ab1 	.word	0x00023ab1
 800ebd0:	fffdc54f 	.word	0xfffdc54f
 800ebd4:	00023ab0 	.word	0x00023ab0

0800ebd8 <__libc_init_array>:
 800ebd8:	b570      	push	{r4, r5, r6, lr}
 800ebda:	4d0d      	ldr	r5, [pc, #52]	; (800ec10 <__libc_init_array+0x38>)
 800ebdc:	4c0d      	ldr	r4, [pc, #52]	; (800ec14 <__libc_init_array+0x3c>)
 800ebde:	1b64      	subs	r4, r4, r5
 800ebe0:	10a4      	asrs	r4, r4, #2
 800ebe2:	2600      	movs	r6, #0
 800ebe4:	42a6      	cmp	r6, r4
 800ebe6:	d109      	bne.n	800ebfc <__libc_init_array+0x24>
 800ebe8:	4d0b      	ldr	r5, [pc, #44]	; (800ec18 <__libc_init_array+0x40>)
 800ebea:	4c0c      	ldr	r4, [pc, #48]	; (800ec1c <__libc_init_array+0x44>)
 800ebec:	f004 faea 	bl	80131c4 <_init>
 800ebf0:	1b64      	subs	r4, r4, r5
 800ebf2:	10a4      	asrs	r4, r4, #2
 800ebf4:	2600      	movs	r6, #0
 800ebf6:	42a6      	cmp	r6, r4
 800ebf8:	d105      	bne.n	800ec06 <__libc_init_array+0x2e>
 800ebfa:	bd70      	pop	{r4, r5, r6, pc}
 800ebfc:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec00:	4798      	blx	r3
 800ec02:	3601      	adds	r6, #1
 800ec04:	e7ee      	b.n	800ebe4 <__libc_init_array+0xc>
 800ec06:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec0a:	4798      	blx	r3
 800ec0c:	3601      	adds	r6, #1
 800ec0e:	e7f2      	b.n	800ebf6 <__libc_init_array+0x1e>
 800ec10:	08014cf4 	.word	0x08014cf4
 800ec14:	08014cf4 	.word	0x08014cf4
 800ec18:	08014cf4 	.word	0x08014cf4
 800ec1c:	08014cf8 	.word	0x08014cf8

0800ec20 <malloc>:
 800ec20:	4b02      	ldr	r3, [pc, #8]	; (800ec2c <malloc+0xc>)
 800ec22:	4601      	mov	r1, r0
 800ec24:	6818      	ldr	r0, [r3, #0]
 800ec26:	f000 b8a3 	b.w	800ed70 <_malloc_r>
 800ec2a:	bf00      	nop
 800ec2c:	2000023c 	.word	0x2000023c

0800ec30 <free>:
 800ec30:	4b02      	ldr	r3, [pc, #8]	; (800ec3c <free+0xc>)
 800ec32:	4601      	mov	r1, r0
 800ec34:	6818      	ldr	r0, [r3, #0]
 800ec36:	f000 b82f 	b.w	800ec98 <_free_r>
 800ec3a:	bf00      	nop
 800ec3c:	2000023c 	.word	0x2000023c

0800ec40 <memcpy>:
 800ec40:	440a      	add	r2, r1
 800ec42:	4291      	cmp	r1, r2
 800ec44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ec48:	d100      	bne.n	800ec4c <memcpy+0xc>
 800ec4a:	4770      	bx	lr
 800ec4c:	b510      	push	{r4, lr}
 800ec4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec52:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ec56:	4291      	cmp	r1, r2
 800ec58:	d1f9      	bne.n	800ec4e <memcpy+0xe>
 800ec5a:	bd10      	pop	{r4, pc}

0800ec5c <memset>:
 800ec5c:	4402      	add	r2, r0
 800ec5e:	4603      	mov	r3, r0
 800ec60:	4293      	cmp	r3, r2
 800ec62:	d100      	bne.n	800ec66 <memset+0xa>
 800ec64:	4770      	bx	lr
 800ec66:	f803 1b01 	strb.w	r1, [r3], #1
 800ec6a:	e7f9      	b.n	800ec60 <memset+0x4>

0800ec6c <_calloc_r>:
 800ec6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ec6e:	fba1 2402 	umull	r2, r4, r1, r2
 800ec72:	b94c      	cbnz	r4, 800ec88 <_calloc_r+0x1c>
 800ec74:	4611      	mov	r1, r2
 800ec76:	9201      	str	r2, [sp, #4]
 800ec78:	f000 f87a 	bl	800ed70 <_malloc_r>
 800ec7c:	9a01      	ldr	r2, [sp, #4]
 800ec7e:	4605      	mov	r5, r0
 800ec80:	b930      	cbnz	r0, 800ec90 <_calloc_r+0x24>
 800ec82:	4628      	mov	r0, r5
 800ec84:	b003      	add	sp, #12
 800ec86:	bd30      	pop	{r4, r5, pc}
 800ec88:	220c      	movs	r2, #12
 800ec8a:	6002      	str	r2, [r0, #0]
 800ec8c:	2500      	movs	r5, #0
 800ec8e:	e7f8      	b.n	800ec82 <_calloc_r+0x16>
 800ec90:	4621      	mov	r1, r4
 800ec92:	f7ff ffe3 	bl	800ec5c <memset>
 800ec96:	e7f4      	b.n	800ec82 <_calloc_r+0x16>

0800ec98 <_free_r>:
 800ec98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ec9a:	2900      	cmp	r1, #0
 800ec9c:	d044      	beq.n	800ed28 <_free_r+0x90>
 800ec9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eca2:	9001      	str	r0, [sp, #4]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	f1a1 0404 	sub.w	r4, r1, #4
 800ecaa:	bfb8      	it	lt
 800ecac:	18e4      	addlt	r4, r4, r3
 800ecae:	f002 fe9f 	bl	80119f0 <__malloc_lock>
 800ecb2:	4a1e      	ldr	r2, [pc, #120]	; (800ed2c <_free_r+0x94>)
 800ecb4:	9801      	ldr	r0, [sp, #4]
 800ecb6:	6813      	ldr	r3, [r2, #0]
 800ecb8:	b933      	cbnz	r3, 800ecc8 <_free_r+0x30>
 800ecba:	6063      	str	r3, [r4, #4]
 800ecbc:	6014      	str	r4, [r2, #0]
 800ecbe:	b003      	add	sp, #12
 800ecc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ecc4:	f002 be9a 	b.w	80119fc <__malloc_unlock>
 800ecc8:	42a3      	cmp	r3, r4
 800ecca:	d908      	bls.n	800ecde <_free_r+0x46>
 800eccc:	6825      	ldr	r5, [r4, #0]
 800ecce:	1961      	adds	r1, r4, r5
 800ecd0:	428b      	cmp	r3, r1
 800ecd2:	bf01      	itttt	eq
 800ecd4:	6819      	ldreq	r1, [r3, #0]
 800ecd6:	685b      	ldreq	r3, [r3, #4]
 800ecd8:	1949      	addeq	r1, r1, r5
 800ecda:	6021      	streq	r1, [r4, #0]
 800ecdc:	e7ed      	b.n	800ecba <_free_r+0x22>
 800ecde:	461a      	mov	r2, r3
 800ece0:	685b      	ldr	r3, [r3, #4]
 800ece2:	b10b      	cbz	r3, 800ece8 <_free_r+0x50>
 800ece4:	42a3      	cmp	r3, r4
 800ece6:	d9fa      	bls.n	800ecde <_free_r+0x46>
 800ece8:	6811      	ldr	r1, [r2, #0]
 800ecea:	1855      	adds	r5, r2, r1
 800ecec:	42a5      	cmp	r5, r4
 800ecee:	d10b      	bne.n	800ed08 <_free_r+0x70>
 800ecf0:	6824      	ldr	r4, [r4, #0]
 800ecf2:	4421      	add	r1, r4
 800ecf4:	1854      	adds	r4, r2, r1
 800ecf6:	42a3      	cmp	r3, r4
 800ecf8:	6011      	str	r1, [r2, #0]
 800ecfa:	d1e0      	bne.n	800ecbe <_free_r+0x26>
 800ecfc:	681c      	ldr	r4, [r3, #0]
 800ecfe:	685b      	ldr	r3, [r3, #4]
 800ed00:	6053      	str	r3, [r2, #4]
 800ed02:	4421      	add	r1, r4
 800ed04:	6011      	str	r1, [r2, #0]
 800ed06:	e7da      	b.n	800ecbe <_free_r+0x26>
 800ed08:	d902      	bls.n	800ed10 <_free_r+0x78>
 800ed0a:	230c      	movs	r3, #12
 800ed0c:	6003      	str	r3, [r0, #0]
 800ed0e:	e7d6      	b.n	800ecbe <_free_r+0x26>
 800ed10:	6825      	ldr	r5, [r4, #0]
 800ed12:	1961      	adds	r1, r4, r5
 800ed14:	428b      	cmp	r3, r1
 800ed16:	bf04      	itt	eq
 800ed18:	6819      	ldreq	r1, [r3, #0]
 800ed1a:	685b      	ldreq	r3, [r3, #4]
 800ed1c:	6063      	str	r3, [r4, #4]
 800ed1e:	bf04      	itt	eq
 800ed20:	1949      	addeq	r1, r1, r5
 800ed22:	6021      	streq	r1, [r4, #0]
 800ed24:	6054      	str	r4, [r2, #4]
 800ed26:	e7ca      	b.n	800ecbe <_free_r+0x26>
 800ed28:	b003      	add	sp, #12
 800ed2a:	bd30      	pop	{r4, r5, pc}
 800ed2c:	200036c8 	.word	0x200036c8

0800ed30 <sbrk_aligned>:
 800ed30:	b570      	push	{r4, r5, r6, lr}
 800ed32:	4e0e      	ldr	r6, [pc, #56]	; (800ed6c <sbrk_aligned+0x3c>)
 800ed34:	460c      	mov	r4, r1
 800ed36:	6831      	ldr	r1, [r6, #0]
 800ed38:	4605      	mov	r5, r0
 800ed3a:	b911      	cbnz	r1, 800ed42 <sbrk_aligned+0x12>
 800ed3c:	f000 fcf6 	bl	800f72c <_sbrk_r>
 800ed40:	6030      	str	r0, [r6, #0]
 800ed42:	4621      	mov	r1, r4
 800ed44:	4628      	mov	r0, r5
 800ed46:	f000 fcf1 	bl	800f72c <_sbrk_r>
 800ed4a:	1c43      	adds	r3, r0, #1
 800ed4c:	d00a      	beq.n	800ed64 <sbrk_aligned+0x34>
 800ed4e:	1cc4      	adds	r4, r0, #3
 800ed50:	f024 0403 	bic.w	r4, r4, #3
 800ed54:	42a0      	cmp	r0, r4
 800ed56:	d007      	beq.n	800ed68 <sbrk_aligned+0x38>
 800ed58:	1a21      	subs	r1, r4, r0
 800ed5a:	4628      	mov	r0, r5
 800ed5c:	f000 fce6 	bl	800f72c <_sbrk_r>
 800ed60:	3001      	adds	r0, #1
 800ed62:	d101      	bne.n	800ed68 <sbrk_aligned+0x38>
 800ed64:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ed68:	4620      	mov	r0, r4
 800ed6a:	bd70      	pop	{r4, r5, r6, pc}
 800ed6c:	200036cc 	.word	0x200036cc

0800ed70 <_malloc_r>:
 800ed70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed74:	1ccd      	adds	r5, r1, #3
 800ed76:	f025 0503 	bic.w	r5, r5, #3
 800ed7a:	3508      	adds	r5, #8
 800ed7c:	2d0c      	cmp	r5, #12
 800ed7e:	bf38      	it	cc
 800ed80:	250c      	movcc	r5, #12
 800ed82:	2d00      	cmp	r5, #0
 800ed84:	4607      	mov	r7, r0
 800ed86:	db01      	blt.n	800ed8c <_malloc_r+0x1c>
 800ed88:	42a9      	cmp	r1, r5
 800ed8a:	d905      	bls.n	800ed98 <_malloc_r+0x28>
 800ed8c:	230c      	movs	r3, #12
 800ed8e:	603b      	str	r3, [r7, #0]
 800ed90:	2600      	movs	r6, #0
 800ed92:	4630      	mov	r0, r6
 800ed94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed98:	4e2e      	ldr	r6, [pc, #184]	; (800ee54 <_malloc_r+0xe4>)
 800ed9a:	f002 fe29 	bl	80119f0 <__malloc_lock>
 800ed9e:	6833      	ldr	r3, [r6, #0]
 800eda0:	461c      	mov	r4, r3
 800eda2:	bb34      	cbnz	r4, 800edf2 <_malloc_r+0x82>
 800eda4:	4629      	mov	r1, r5
 800eda6:	4638      	mov	r0, r7
 800eda8:	f7ff ffc2 	bl	800ed30 <sbrk_aligned>
 800edac:	1c43      	adds	r3, r0, #1
 800edae:	4604      	mov	r4, r0
 800edb0:	d14d      	bne.n	800ee4e <_malloc_r+0xde>
 800edb2:	6834      	ldr	r4, [r6, #0]
 800edb4:	4626      	mov	r6, r4
 800edb6:	2e00      	cmp	r6, #0
 800edb8:	d140      	bne.n	800ee3c <_malloc_r+0xcc>
 800edba:	6823      	ldr	r3, [r4, #0]
 800edbc:	4631      	mov	r1, r6
 800edbe:	4638      	mov	r0, r7
 800edc0:	eb04 0803 	add.w	r8, r4, r3
 800edc4:	f000 fcb2 	bl	800f72c <_sbrk_r>
 800edc8:	4580      	cmp	r8, r0
 800edca:	d13a      	bne.n	800ee42 <_malloc_r+0xd2>
 800edcc:	6821      	ldr	r1, [r4, #0]
 800edce:	3503      	adds	r5, #3
 800edd0:	1a6d      	subs	r5, r5, r1
 800edd2:	f025 0503 	bic.w	r5, r5, #3
 800edd6:	3508      	adds	r5, #8
 800edd8:	2d0c      	cmp	r5, #12
 800edda:	bf38      	it	cc
 800eddc:	250c      	movcc	r5, #12
 800edde:	4629      	mov	r1, r5
 800ede0:	4638      	mov	r0, r7
 800ede2:	f7ff ffa5 	bl	800ed30 <sbrk_aligned>
 800ede6:	3001      	adds	r0, #1
 800ede8:	d02b      	beq.n	800ee42 <_malloc_r+0xd2>
 800edea:	6823      	ldr	r3, [r4, #0]
 800edec:	442b      	add	r3, r5
 800edee:	6023      	str	r3, [r4, #0]
 800edf0:	e00e      	b.n	800ee10 <_malloc_r+0xa0>
 800edf2:	6822      	ldr	r2, [r4, #0]
 800edf4:	1b52      	subs	r2, r2, r5
 800edf6:	d41e      	bmi.n	800ee36 <_malloc_r+0xc6>
 800edf8:	2a0b      	cmp	r2, #11
 800edfa:	d916      	bls.n	800ee2a <_malloc_r+0xba>
 800edfc:	1961      	adds	r1, r4, r5
 800edfe:	42a3      	cmp	r3, r4
 800ee00:	6025      	str	r5, [r4, #0]
 800ee02:	bf18      	it	ne
 800ee04:	6059      	strne	r1, [r3, #4]
 800ee06:	6863      	ldr	r3, [r4, #4]
 800ee08:	bf08      	it	eq
 800ee0a:	6031      	streq	r1, [r6, #0]
 800ee0c:	5162      	str	r2, [r4, r5]
 800ee0e:	604b      	str	r3, [r1, #4]
 800ee10:	4638      	mov	r0, r7
 800ee12:	f104 060b 	add.w	r6, r4, #11
 800ee16:	f002 fdf1 	bl	80119fc <__malloc_unlock>
 800ee1a:	f026 0607 	bic.w	r6, r6, #7
 800ee1e:	1d23      	adds	r3, r4, #4
 800ee20:	1af2      	subs	r2, r6, r3
 800ee22:	d0b6      	beq.n	800ed92 <_malloc_r+0x22>
 800ee24:	1b9b      	subs	r3, r3, r6
 800ee26:	50a3      	str	r3, [r4, r2]
 800ee28:	e7b3      	b.n	800ed92 <_malloc_r+0x22>
 800ee2a:	6862      	ldr	r2, [r4, #4]
 800ee2c:	42a3      	cmp	r3, r4
 800ee2e:	bf0c      	ite	eq
 800ee30:	6032      	streq	r2, [r6, #0]
 800ee32:	605a      	strne	r2, [r3, #4]
 800ee34:	e7ec      	b.n	800ee10 <_malloc_r+0xa0>
 800ee36:	4623      	mov	r3, r4
 800ee38:	6864      	ldr	r4, [r4, #4]
 800ee3a:	e7b2      	b.n	800eda2 <_malloc_r+0x32>
 800ee3c:	4634      	mov	r4, r6
 800ee3e:	6876      	ldr	r6, [r6, #4]
 800ee40:	e7b9      	b.n	800edb6 <_malloc_r+0x46>
 800ee42:	230c      	movs	r3, #12
 800ee44:	603b      	str	r3, [r7, #0]
 800ee46:	4638      	mov	r0, r7
 800ee48:	f002 fdd8 	bl	80119fc <__malloc_unlock>
 800ee4c:	e7a1      	b.n	800ed92 <_malloc_r+0x22>
 800ee4e:	6025      	str	r5, [r4, #0]
 800ee50:	e7de      	b.n	800ee10 <_malloc_r+0xa0>
 800ee52:	bf00      	nop
 800ee54:	200036c8 	.word	0x200036c8

0800ee58 <__cvt>:
 800ee58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ee5c:	ec55 4b10 	vmov	r4, r5, d0
 800ee60:	2d00      	cmp	r5, #0
 800ee62:	460e      	mov	r6, r1
 800ee64:	4619      	mov	r1, r3
 800ee66:	462b      	mov	r3, r5
 800ee68:	bfbb      	ittet	lt
 800ee6a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ee6e:	461d      	movlt	r5, r3
 800ee70:	2300      	movge	r3, #0
 800ee72:	232d      	movlt	r3, #45	; 0x2d
 800ee74:	700b      	strb	r3, [r1, #0]
 800ee76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ee78:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ee7c:	4691      	mov	r9, r2
 800ee7e:	f023 0820 	bic.w	r8, r3, #32
 800ee82:	bfbc      	itt	lt
 800ee84:	4622      	movlt	r2, r4
 800ee86:	4614      	movlt	r4, r2
 800ee88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ee8c:	d005      	beq.n	800ee9a <__cvt+0x42>
 800ee8e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ee92:	d100      	bne.n	800ee96 <__cvt+0x3e>
 800ee94:	3601      	adds	r6, #1
 800ee96:	2102      	movs	r1, #2
 800ee98:	e000      	b.n	800ee9c <__cvt+0x44>
 800ee9a:	2103      	movs	r1, #3
 800ee9c:	ab03      	add	r3, sp, #12
 800ee9e:	9301      	str	r3, [sp, #4]
 800eea0:	ab02      	add	r3, sp, #8
 800eea2:	9300      	str	r3, [sp, #0]
 800eea4:	ec45 4b10 	vmov	d0, r4, r5
 800eea8:	4653      	mov	r3, sl
 800eeaa:	4632      	mov	r2, r6
 800eeac:	f001 fc28 	bl	8010700 <_dtoa_r>
 800eeb0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800eeb4:	4607      	mov	r7, r0
 800eeb6:	d102      	bne.n	800eebe <__cvt+0x66>
 800eeb8:	f019 0f01 	tst.w	r9, #1
 800eebc:	d022      	beq.n	800ef04 <__cvt+0xac>
 800eebe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800eec2:	eb07 0906 	add.w	r9, r7, r6
 800eec6:	d110      	bne.n	800eeea <__cvt+0x92>
 800eec8:	783b      	ldrb	r3, [r7, #0]
 800eeca:	2b30      	cmp	r3, #48	; 0x30
 800eecc:	d10a      	bne.n	800eee4 <__cvt+0x8c>
 800eece:	2200      	movs	r2, #0
 800eed0:	2300      	movs	r3, #0
 800eed2:	4620      	mov	r0, r4
 800eed4:	4629      	mov	r1, r5
 800eed6:	f7f1 fdf7 	bl	8000ac8 <__aeabi_dcmpeq>
 800eeda:	b918      	cbnz	r0, 800eee4 <__cvt+0x8c>
 800eedc:	f1c6 0601 	rsb	r6, r6, #1
 800eee0:	f8ca 6000 	str.w	r6, [sl]
 800eee4:	f8da 3000 	ldr.w	r3, [sl]
 800eee8:	4499      	add	r9, r3
 800eeea:	2200      	movs	r2, #0
 800eeec:	2300      	movs	r3, #0
 800eeee:	4620      	mov	r0, r4
 800eef0:	4629      	mov	r1, r5
 800eef2:	f7f1 fde9 	bl	8000ac8 <__aeabi_dcmpeq>
 800eef6:	b108      	cbz	r0, 800eefc <__cvt+0xa4>
 800eef8:	f8cd 900c 	str.w	r9, [sp, #12]
 800eefc:	2230      	movs	r2, #48	; 0x30
 800eefe:	9b03      	ldr	r3, [sp, #12]
 800ef00:	454b      	cmp	r3, r9
 800ef02:	d307      	bcc.n	800ef14 <__cvt+0xbc>
 800ef04:	9b03      	ldr	r3, [sp, #12]
 800ef06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ef08:	1bdb      	subs	r3, r3, r7
 800ef0a:	4638      	mov	r0, r7
 800ef0c:	6013      	str	r3, [r2, #0]
 800ef0e:	b004      	add	sp, #16
 800ef10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef14:	1c59      	adds	r1, r3, #1
 800ef16:	9103      	str	r1, [sp, #12]
 800ef18:	701a      	strb	r2, [r3, #0]
 800ef1a:	e7f0      	b.n	800eefe <__cvt+0xa6>

0800ef1c <__exponent>:
 800ef1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ef1e:	4603      	mov	r3, r0
 800ef20:	2900      	cmp	r1, #0
 800ef22:	bfb8      	it	lt
 800ef24:	4249      	neglt	r1, r1
 800ef26:	f803 2b02 	strb.w	r2, [r3], #2
 800ef2a:	bfb4      	ite	lt
 800ef2c:	222d      	movlt	r2, #45	; 0x2d
 800ef2e:	222b      	movge	r2, #43	; 0x2b
 800ef30:	2909      	cmp	r1, #9
 800ef32:	7042      	strb	r2, [r0, #1]
 800ef34:	dd2a      	ble.n	800ef8c <__exponent+0x70>
 800ef36:	f10d 0407 	add.w	r4, sp, #7
 800ef3a:	46a4      	mov	ip, r4
 800ef3c:	270a      	movs	r7, #10
 800ef3e:	46a6      	mov	lr, r4
 800ef40:	460a      	mov	r2, r1
 800ef42:	fb91 f6f7 	sdiv	r6, r1, r7
 800ef46:	fb07 1516 	mls	r5, r7, r6, r1
 800ef4a:	3530      	adds	r5, #48	; 0x30
 800ef4c:	2a63      	cmp	r2, #99	; 0x63
 800ef4e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800ef52:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ef56:	4631      	mov	r1, r6
 800ef58:	dcf1      	bgt.n	800ef3e <__exponent+0x22>
 800ef5a:	3130      	adds	r1, #48	; 0x30
 800ef5c:	f1ae 0502 	sub.w	r5, lr, #2
 800ef60:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ef64:	1c44      	adds	r4, r0, #1
 800ef66:	4629      	mov	r1, r5
 800ef68:	4561      	cmp	r1, ip
 800ef6a:	d30a      	bcc.n	800ef82 <__exponent+0x66>
 800ef6c:	f10d 0209 	add.w	r2, sp, #9
 800ef70:	eba2 020e 	sub.w	r2, r2, lr
 800ef74:	4565      	cmp	r5, ip
 800ef76:	bf88      	it	hi
 800ef78:	2200      	movhi	r2, #0
 800ef7a:	4413      	add	r3, r2
 800ef7c:	1a18      	subs	r0, r3, r0
 800ef7e:	b003      	add	sp, #12
 800ef80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef82:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ef86:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ef8a:	e7ed      	b.n	800ef68 <__exponent+0x4c>
 800ef8c:	2330      	movs	r3, #48	; 0x30
 800ef8e:	3130      	adds	r1, #48	; 0x30
 800ef90:	7083      	strb	r3, [r0, #2]
 800ef92:	70c1      	strb	r1, [r0, #3]
 800ef94:	1d03      	adds	r3, r0, #4
 800ef96:	e7f1      	b.n	800ef7c <__exponent+0x60>

0800ef98 <_printf_float>:
 800ef98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef9c:	ed2d 8b02 	vpush	{d8}
 800efa0:	b08d      	sub	sp, #52	; 0x34
 800efa2:	460c      	mov	r4, r1
 800efa4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800efa8:	4616      	mov	r6, r2
 800efaa:	461f      	mov	r7, r3
 800efac:	4605      	mov	r5, r0
 800efae:	f002 fd05 	bl	80119bc <_localeconv_r>
 800efb2:	f8d0 a000 	ldr.w	sl, [r0]
 800efb6:	4650      	mov	r0, sl
 800efb8:	f7f1 f90a 	bl	80001d0 <strlen>
 800efbc:	2300      	movs	r3, #0
 800efbe:	930a      	str	r3, [sp, #40]	; 0x28
 800efc0:	6823      	ldr	r3, [r4, #0]
 800efc2:	9305      	str	r3, [sp, #20]
 800efc4:	f8d8 3000 	ldr.w	r3, [r8]
 800efc8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800efcc:	3307      	adds	r3, #7
 800efce:	f023 0307 	bic.w	r3, r3, #7
 800efd2:	f103 0208 	add.w	r2, r3, #8
 800efd6:	f8c8 2000 	str.w	r2, [r8]
 800efda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efde:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800efe2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800efe6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800efea:	9307      	str	r3, [sp, #28]
 800efec:	f8cd 8018 	str.w	r8, [sp, #24]
 800eff0:	ee08 0a10 	vmov	s16, r0
 800eff4:	4b9f      	ldr	r3, [pc, #636]	; (800f274 <_printf_float+0x2dc>)
 800eff6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800effa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800effe:	f7f1 fd95 	bl	8000b2c <__aeabi_dcmpun>
 800f002:	bb88      	cbnz	r0, 800f068 <_printf_float+0xd0>
 800f004:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f008:	4b9a      	ldr	r3, [pc, #616]	; (800f274 <_printf_float+0x2dc>)
 800f00a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f00e:	f7f1 fd6f 	bl	8000af0 <__aeabi_dcmple>
 800f012:	bb48      	cbnz	r0, 800f068 <_printf_float+0xd0>
 800f014:	2200      	movs	r2, #0
 800f016:	2300      	movs	r3, #0
 800f018:	4640      	mov	r0, r8
 800f01a:	4649      	mov	r1, r9
 800f01c:	f7f1 fd5e 	bl	8000adc <__aeabi_dcmplt>
 800f020:	b110      	cbz	r0, 800f028 <_printf_float+0x90>
 800f022:	232d      	movs	r3, #45	; 0x2d
 800f024:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f028:	4b93      	ldr	r3, [pc, #588]	; (800f278 <_printf_float+0x2e0>)
 800f02a:	4894      	ldr	r0, [pc, #592]	; (800f27c <_printf_float+0x2e4>)
 800f02c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f030:	bf94      	ite	ls
 800f032:	4698      	movls	r8, r3
 800f034:	4680      	movhi	r8, r0
 800f036:	2303      	movs	r3, #3
 800f038:	6123      	str	r3, [r4, #16]
 800f03a:	9b05      	ldr	r3, [sp, #20]
 800f03c:	f023 0204 	bic.w	r2, r3, #4
 800f040:	6022      	str	r2, [r4, #0]
 800f042:	f04f 0900 	mov.w	r9, #0
 800f046:	9700      	str	r7, [sp, #0]
 800f048:	4633      	mov	r3, r6
 800f04a:	aa0b      	add	r2, sp, #44	; 0x2c
 800f04c:	4621      	mov	r1, r4
 800f04e:	4628      	mov	r0, r5
 800f050:	f000 f9d8 	bl	800f404 <_printf_common>
 800f054:	3001      	adds	r0, #1
 800f056:	f040 8090 	bne.w	800f17a <_printf_float+0x1e2>
 800f05a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f05e:	b00d      	add	sp, #52	; 0x34
 800f060:	ecbd 8b02 	vpop	{d8}
 800f064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f068:	4642      	mov	r2, r8
 800f06a:	464b      	mov	r3, r9
 800f06c:	4640      	mov	r0, r8
 800f06e:	4649      	mov	r1, r9
 800f070:	f7f1 fd5c 	bl	8000b2c <__aeabi_dcmpun>
 800f074:	b140      	cbz	r0, 800f088 <_printf_float+0xf0>
 800f076:	464b      	mov	r3, r9
 800f078:	2b00      	cmp	r3, #0
 800f07a:	bfbc      	itt	lt
 800f07c:	232d      	movlt	r3, #45	; 0x2d
 800f07e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f082:	487f      	ldr	r0, [pc, #508]	; (800f280 <_printf_float+0x2e8>)
 800f084:	4b7f      	ldr	r3, [pc, #508]	; (800f284 <_printf_float+0x2ec>)
 800f086:	e7d1      	b.n	800f02c <_printf_float+0x94>
 800f088:	6863      	ldr	r3, [r4, #4]
 800f08a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f08e:	9206      	str	r2, [sp, #24]
 800f090:	1c5a      	adds	r2, r3, #1
 800f092:	d13f      	bne.n	800f114 <_printf_float+0x17c>
 800f094:	2306      	movs	r3, #6
 800f096:	6063      	str	r3, [r4, #4]
 800f098:	9b05      	ldr	r3, [sp, #20]
 800f09a:	6861      	ldr	r1, [r4, #4]
 800f09c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	9303      	str	r3, [sp, #12]
 800f0a4:	ab0a      	add	r3, sp, #40	; 0x28
 800f0a6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f0aa:	ab09      	add	r3, sp, #36	; 0x24
 800f0ac:	ec49 8b10 	vmov	d0, r8, r9
 800f0b0:	9300      	str	r3, [sp, #0]
 800f0b2:	6022      	str	r2, [r4, #0]
 800f0b4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f0b8:	4628      	mov	r0, r5
 800f0ba:	f7ff fecd 	bl	800ee58 <__cvt>
 800f0be:	9b06      	ldr	r3, [sp, #24]
 800f0c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f0c2:	2b47      	cmp	r3, #71	; 0x47
 800f0c4:	4680      	mov	r8, r0
 800f0c6:	d108      	bne.n	800f0da <_printf_float+0x142>
 800f0c8:	1cc8      	adds	r0, r1, #3
 800f0ca:	db02      	blt.n	800f0d2 <_printf_float+0x13a>
 800f0cc:	6863      	ldr	r3, [r4, #4]
 800f0ce:	4299      	cmp	r1, r3
 800f0d0:	dd41      	ble.n	800f156 <_printf_float+0x1be>
 800f0d2:	f1ab 0b02 	sub.w	fp, fp, #2
 800f0d6:	fa5f fb8b 	uxtb.w	fp, fp
 800f0da:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f0de:	d820      	bhi.n	800f122 <_printf_float+0x18a>
 800f0e0:	3901      	subs	r1, #1
 800f0e2:	465a      	mov	r2, fp
 800f0e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f0e8:	9109      	str	r1, [sp, #36]	; 0x24
 800f0ea:	f7ff ff17 	bl	800ef1c <__exponent>
 800f0ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f0f0:	1813      	adds	r3, r2, r0
 800f0f2:	2a01      	cmp	r2, #1
 800f0f4:	4681      	mov	r9, r0
 800f0f6:	6123      	str	r3, [r4, #16]
 800f0f8:	dc02      	bgt.n	800f100 <_printf_float+0x168>
 800f0fa:	6822      	ldr	r2, [r4, #0]
 800f0fc:	07d2      	lsls	r2, r2, #31
 800f0fe:	d501      	bpl.n	800f104 <_printf_float+0x16c>
 800f100:	3301      	adds	r3, #1
 800f102:	6123      	str	r3, [r4, #16]
 800f104:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d09c      	beq.n	800f046 <_printf_float+0xae>
 800f10c:	232d      	movs	r3, #45	; 0x2d
 800f10e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f112:	e798      	b.n	800f046 <_printf_float+0xae>
 800f114:	9a06      	ldr	r2, [sp, #24]
 800f116:	2a47      	cmp	r2, #71	; 0x47
 800f118:	d1be      	bne.n	800f098 <_printf_float+0x100>
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d1bc      	bne.n	800f098 <_printf_float+0x100>
 800f11e:	2301      	movs	r3, #1
 800f120:	e7b9      	b.n	800f096 <_printf_float+0xfe>
 800f122:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f126:	d118      	bne.n	800f15a <_printf_float+0x1c2>
 800f128:	2900      	cmp	r1, #0
 800f12a:	6863      	ldr	r3, [r4, #4]
 800f12c:	dd0b      	ble.n	800f146 <_printf_float+0x1ae>
 800f12e:	6121      	str	r1, [r4, #16]
 800f130:	b913      	cbnz	r3, 800f138 <_printf_float+0x1a0>
 800f132:	6822      	ldr	r2, [r4, #0]
 800f134:	07d0      	lsls	r0, r2, #31
 800f136:	d502      	bpl.n	800f13e <_printf_float+0x1a6>
 800f138:	3301      	adds	r3, #1
 800f13a:	440b      	add	r3, r1
 800f13c:	6123      	str	r3, [r4, #16]
 800f13e:	65a1      	str	r1, [r4, #88]	; 0x58
 800f140:	f04f 0900 	mov.w	r9, #0
 800f144:	e7de      	b.n	800f104 <_printf_float+0x16c>
 800f146:	b913      	cbnz	r3, 800f14e <_printf_float+0x1b6>
 800f148:	6822      	ldr	r2, [r4, #0]
 800f14a:	07d2      	lsls	r2, r2, #31
 800f14c:	d501      	bpl.n	800f152 <_printf_float+0x1ba>
 800f14e:	3302      	adds	r3, #2
 800f150:	e7f4      	b.n	800f13c <_printf_float+0x1a4>
 800f152:	2301      	movs	r3, #1
 800f154:	e7f2      	b.n	800f13c <_printf_float+0x1a4>
 800f156:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f15a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f15c:	4299      	cmp	r1, r3
 800f15e:	db05      	blt.n	800f16c <_printf_float+0x1d4>
 800f160:	6823      	ldr	r3, [r4, #0]
 800f162:	6121      	str	r1, [r4, #16]
 800f164:	07d8      	lsls	r0, r3, #31
 800f166:	d5ea      	bpl.n	800f13e <_printf_float+0x1a6>
 800f168:	1c4b      	adds	r3, r1, #1
 800f16a:	e7e7      	b.n	800f13c <_printf_float+0x1a4>
 800f16c:	2900      	cmp	r1, #0
 800f16e:	bfd4      	ite	le
 800f170:	f1c1 0202 	rsble	r2, r1, #2
 800f174:	2201      	movgt	r2, #1
 800f176:	4413      	add	r3, r2
 800f178:	e7e0      	b.n	800f13c <_printf_float+0x1a4>
 800f17a:	6823      	ldr	r3, [r4, #0]
 800f17c:	055a      	lsls	r2, r3, #21
 800f17e:	d407      	bmi.n	800f190 <_printf_float+0x1f8>
 800f180:	6923      	ldr	r3, [r4, #16]
 800f182:	4642      	mov	r2, r8
 800f184:	4631      	mov	r1, r6
 800f186:	4628      	mov	r0, r5
 800f188:	47b8      	blx	r7
 800f18a:	3001      	adds	r0, #1
 800f18c:	d12c      	bne.n	800f1e8 <_printf_float+0x250>
 800f18e:	e764      	b.n	800f05a <_printf_float+0xc2>
 800f190:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f194:	f240 80e0 	bls.w	800f358 <_printf_float+0x3c0>
 800f198:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f19c:	2200      	movs	r2, #0
 800f19e:	2300      	movs	r3, #0
 800f1a0:	f7f1 fc92 	bl	8000ac8 <__aeabi_dcmpeq>
 800f1a4:	2800      	cmp	r0, #0
 800f1a6:	d034      	beq.n	800f212 <_printf_float+0x27a>
 800f1a8:	4a37      	ldr	r2, [pc, #220]	; (800f288 <_printf_float+0x2f0>)
 800f1aa:	2301      	movs	r3, #1
 800f1ac:	4631      	mov	r1, r6
 800f1ae:	4628      	mov	r0, r5
 800f1b0:	47b8      	blx	r7
 800f1b2:	3001      	adds	r0, #1
 800f1b4:	f43f af51 	beq.w	800f05a <_printf_float+0xc2>
 800f1b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f1bc:	429a      	cmp	r2, r3
 800f1be:	db02      	blt.n	800f1c6 <_printf_float+0x22e>
 800f1c0:	6823      	ldr	r3, [r4, #0]
 800f1c2:	07d8      	lsls	r0, r3, #31
 800f1c4:	d510      	bpl.n	800f1e8 <_printf_float+0x250>
 800f1c6:	ee18 3a10 	vmov	r3, s16
 800f1ca:	4652      	mov	r2, sl
 800f1cc:	4631      	mov	r1, r6
 800f1ce:	4628      	mov	r0, r5
 800f1d0:	47b8      	blx	r7
 800f1d2:	3001      	adds	r0, #1
 800f1d4:	f43f af41 	beq.w	800f05a <_printf_float+0xc2>
 800f1d8:	f04f 0800 	mov.w	r8, #0
 800f1dc:	f104 091a 	add.w	r9, r4, #26
 800f1e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1e2:	3b01      	subs	r3, #1
 800f1e4:	4543      	cmp	r3, r8
 800f1e6:	dc09      	bgt.n	800f1fc <_printf_float+0x264>
 800f1e8:	6823      	ldr	r3, [r4, #0]
 800f1ea:	079b      	lsls	r3, r3, #30
 800f1ec:	f100 8105 	bmi.w	800f3fa <_printf_float+0x462>
 800f1f0:	68e0      	ldr	r0, [r4, #12]
 800f1f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f1f4:	4298      	cmp	r0, r3
 800f1f6:	bfb8      	it	lt
 800f1f8:	4618      	movlt	r0, r3
 800f1fa:	e730      	b.n	800f05e <_printf_float+0xc6>
 800f1fc:	2301      	movs	r3, #1
 800f1fe:	464a      	mov	r2, r9
 800f200:	4631      	mov	r1, r6
 800f202:	4628      	mov	r0, r5
 800f204:	47b8      	blx	r7
 800f206:	3001      	adds	r0, #1
 800f208:	f43f af27 	beq.w	800f05a <_printf_float+0xc2>
 800f20c:	f108 0801 	add.w	r8, r8, #1
 800f210:	e7e6      	b.n	800f1e0 <_printf_float+0x248>
 800f212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f214:	2b00      	cmp	r3, #0
 800f216:	dc39      	bgt.n	800f28c <_printf_float+0x2f4>
 800f218:	4a1b      	ldr	r2, [pc, #108]	; (800f288 <_printf_float+0x2f0>)
 800f21a:	2301      	movs	r3, #1
 800f21c:	4631      	mov	r1, r6
 800f21e:	4628      	mov	r0, r5
 800f220:	47b8      	blx	r7
 800f222:	3001      	adds	r0, #1
 800f224:	f43f af19 	beq.w	800f05a <_printf_float+0xc2>
 800f228:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f22c:	4313      	orrs	r3, r2
 800f22e:	d102      	bne.n	800f236 <_printf_float+0x29e>
 800f230:	6823      	ldr	r3, [r4, #0]
 800f232:	07d9      	lsls	r1, r3, #31
 800f234:	d5d8      	bpl.n	800f1e8 <_printf_float+0x250>
 800f236:	ee18 3a10 	vmov	r3, s16
 800f23a:	4652      	mov	r2, sl
 800f23c:	4631      	mov	r1, r6
 800f23e:	4628      	mov	r0, r5
 800f240:	47b8      	blx	r7
 800f242:	3001      	adds	r0, #1
 800f244:	f43f af09 	beq.w	800f05a <_printf_float+0xc2>
 800f248:	f04f 0900 	mov.w	r9, #0
 800f24c:	f104 0a1a 	add.w	sl, r4, #26
 800f250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f252:	425b      	negs	r3, r3
 800f254:	454b      	cmp	r3, r9
 800f256:	dc01      	bgt.n	800f25c <_printf_float+0x2c4>
 800f258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f25a:	e792      	b.n	800f182 <_printf_float+0x1ea>
 800f25c:	2301      	movs	r3, #1
 800f25e:	4652      	mov	r2, sl
 800f260:	4631      	mov	r1, r6
 800f262:	4628      	mov	r0, r5
 800f264:	47b8      	blx	r7
 800f266:	3001      	adds	r0, #1
 800f268:	f43f aef7 	beq.w	800f05a <_printf_float+0xc2>
 800f26c:	f109 0901 	add.w	r9, r9, #1
 800f270:	e7ee      	b.n	800f250 <_printf_float+0x2b8>
 800f272:	bf00      	nop
 800f274:	7fefffff 	.word	0x7fefffff
 800f278:	08014954 	.word	0x08014954
 800f27c:	08014958 	.word	0x08014958
 800f280:	08014960 	.word	0x08014960
 800f284:	0801495c 	.word	0x0801495c
 800f288:	08014964 	.word	0x08014964
 800f28c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f28e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f290:	429a      	cmp	r2, r3
 800f292:	bfa8      	it	ge
 800f294:	461a      	movge	r2, r3
 800f296:	2a00      	cmp	r2, #0
 800f298:	4691      	mov	r9, r2
 800f29a:	dc37      	bgt.n	800f30c <_printf_float+0x374>
 800f29c:	f04f 0b00 	mov.w	fp, #0
 800f2a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f2a4:	f104 021a 	add.w	r2, r4, #26
 800f2a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f2aa:	9305      	str	r3, [sp, #20]
 800f2ac:	eba3 0309 	sub.w	r3, r3, r9
 800f2b0:	455b      	cmp	r3, fp
 800f2b2:	dc33      	bgt.n	800f31c <_printf_float+0x384>
 800f2b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f2b8:	429a      	cmp	r2, r3
 800f2ba:	db3b      	blt.n	800f334 <_printf_float+0x39c>
 800f2bc:	6823      	ldr	r3, [r4, #0]
 800f2be:	07da      	lsls	r2, r3, #31
 800f2c0:	d438      	bmi.n	800f334 <_printf_float+0x39c>
 800f2c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2c4:	9a05      	ldr	r2, [sp, #20]
 800f2c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f2c8:	1a9a      	subs	r2, r3, r2
 800f2ca:	eba3 0901 	sub.w	r9, r3, r1
 800f2ce:	4591      	cmp	r9, r2
 800f2d0:	bfa8      	it	ge
 800f2d2:	4691      	movge	r9, r2
 800f2d4:	f1b9 0f00 	cmp.w	r9, #0
 800f2d8:	dc35      	bgt.n	800f346 <_printf_float+0x3ae>
 800f2da:	f04f 0800 	mov.w	r8, #0
 800f2de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f2e2:	f104 0a1a 	add.w	sl, r4, #26
 800f2e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f2ea:	1a9b      	subs	r3, r3, r2
 800f2ec:	eba3 0309 	sub.w	r3, r3, r9
 800f2f0:	4543      	cmp	r3, r8
 800f2f2:	f77f af79 	ble.w	800f1e8 <_printf_float+0x250>
 800f2f6:	2301      	movs	r3, #1
 800f2f8:	4652      	mov	r2, sl
 800f2fa:	4631      	mov	r1, r6
 800f2fc:	4628      	mov	r0, r5
 800f2fe:	47b8      	blx	r7
 800f300:	3001      	adds	r0, #1
 800f302:	f43f aeaa 	beq.w	800f05a <_printf_float+0xc2>
 800f306:	f108 0801 	add.w	r8, r8, #1
 800f30a:	e7ec      	b.n	800f2e6 <_printf_float+0x34e>
 800f30c:	4613      	mov	r3, r2
 800f30e:	4631      	mov	r1, r6
 800f310:	4642      	mov	r2, r8
 800f312:	4628      	mov	r0, r5
 800f314:	47b8      	blx	r7
 800f316:	3001      	adds	r0, #1
 800f318:	d1c0      	bne.n	800f29c <_printf_float+0x304>
 800f31a:	e69e      	b.n	800f05a <_printf_float+0xc2>
 800f31c:	2301      	movs	r3, #1
 800f31e:	4631      	mov	r1, r6
 800f320:	4628      	mov	r0, r5
 800f322:	9205      	str	r2, [sp, #20]
 800f324:	47b8      	blx	r7
 800f326:	3001      	adds	r0, #1
 800f328:	f43f ae97 	beq.w	800f05a <_printf_float+0xc2>
 800f32c:	9a05      	ldr	r2, [sp, #20]
 800f32e:	f10b 0b01 	add.w	fp, fp, #1
 800f332:	e7b9      	b.n	800f2a8 <_printf_float+0x310>
 800f334:	ee18 3a10 	vmov	r3, s16
 800f338:	4652      	mov	r2, sl
 800f33a:	4631      	mov	r1, r6
 800f33c:	4628      	mov	r0, r5
 800f33e:	47b8      	blx	r7
 800f340:	3001      	adds	r0, #1
 800f342:	d1be      	bne.n	800f2c2 <_printf_float+0x32a>
 800f344:	e689      	b.n	800f05a <_printf_float+0xc2>
 800f346:	9a05      	ldr	r2, [sp, #20]
 800f348:	464b      	mov	r3, r9
 800f34a:	4442      	add	r2, r8
 800f34c:	4631      	mov	r1, r6
 800f34e:	4628      	mov	r0, r5
 800f350:	47b8      	blx	r7
 800f352:	3001      	adds	r0, #1
 800f354:	d1c1      	bne.n	800f2da <_printf_float+0x342>
 800f356:	e680      	b.n	800f05a <_printf_float+0xc2>
 800f358:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f35a:	2a01      	cmp	r2, #1
 800f35c:	dc01      	bgt.n	800f362 <_printf_float+0x3ca>
 800f35e:	07db      	lsls	r3, r3, #31
 800f360:	d538      	bpl.n	800f3d4 <_printf_float+0x43c>
 800f362:	2301      	movs	r3, #1
 800f364:	4642      	mov	r2, r8
 800f366:	4631      	mov	r1, r6
 800f368:	4628      	mov	r0, r5
 800f36a:	47b8      	blx	r7
 800f36c:	3001      	adds	r0, #1
 800f36e:	f43f ae74 	beq.w	800f05a <_printf_float+0xc2>
 800f372:	ee18 3a10 	vmov	r3, s16
 800f376:	4652      	mov	r2, sl
 800f378:	4631      	mov	r1, r6
 800f37a:	4628      	mov	r0, r5
 800f37c:	47b8      	blx	r7
 800f37e:	3001      	adds	r0, #1
 800f380:	f43f ae6b 	beq.w	800f05a <_printf_float+0xc2>
 800f384:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f388:	2200      	movs	r2, #0
 800f38a:	2300      	movs	r3, #0
 800f38c:	f7f1 fb9c 	bl	8000ac8 <__aeabi_dcmpeq>
 800f390:	b9d8      	cbnz	r0, 800f3ca <_printf_float+0x432>
 800f392:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f394:	f108 0201 	add.w	r2, r8, #1
 800f398:	3b01      	subs	r3, #1
 800f39a:	4631      	mov	r1, r6
 800f39c:	4628      	mov	r0, r5
 800f39e:	47b8      	blx	r7
 800f3a0:	3001      	adds	r0, #1
 800f3a2:	d10e      	bne.n	800f3c2 <_printf_float+0x42a>
 800f3a4:	e659      	b.n	800f05a <_printf_float+0xc2>
 800f3a6:	2301      	movs	r3, #1
 800f3a8:	4652      	mov	r2, sl
 800f3aa:	4631      	mov	r1, r6
 800f3ac:	4628      	mov	r0, r5
 800f3ae:	47b8      	blx	r7
 800f3b0:	3001      	adds	r0, #1
 800f3b2:	f43f ae52 	beq.w	800f05a <_printf_float+0xc2>
 800f3b6:	f108 0801 	add.w	r8, r8, #1
 800f3ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3bc:	3b01      	subs	r3, #1
 800f3be:	4543      	cmp	r3, r8
 800f3c0:	dcf1      	bgt.n	800f3a6 <_printf_float+0x40e>
 800f3c2:	464b      	mov	r3, r9
 800f3c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f3c8:	e6dc      	b.n	800f184 <_printf_float+0x1ec>
 800f3ca:	f04f 0800 	mov.w	r8, #0
 800f3ce:	f104 0a1a 	add.w	sl, r4, #26
 800f3d2:	e7f2      	b.n	800f3ba <_printf_float+0x422>
 800f3d4:	2301      	movs	r3, #1
 800f3d6:	4642      	mov	r2, r8
 800f3d8:	e7df      	b.n	800f39a <_printf_float+0x402>
 800f3da:	2301      	movs	r3, #1
 800f3dc:	464a      	mov	r2, r9
 800f3de:	4631      	mov	r1, r6
 800f3e0:	4628      	mov	r0, r5
 800f3e2:	47b8      	blx	r7
 800f3e4:	3001      	adds	r0, #1
 800f3e6:	f43f ae38 	beq.w	800f05a <_printf_float+0xc2>
 800f3ea:	f108 0801 	add.w	r8, r8, #1
 800f3ee:	68e3      	ldr	r3, [r4, #12]
 800f3f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f3f2:	1a5b      	subs	r3, r3, r1
 800f3f4:	4543      	cmp	r3, r8
 800f3f6:	dcf0      	bgt.n	800f3da <_printf_float+0x442>
 800f3f8:	e6fa      	b.n	800f1f0 <_printf_float+0x258>
 800f3fa:	f04f 0800 	mov.w	r8, #0
 800f3fe:	f104 0919 	add.w	r9, r4, #25
 800f402:	e7f4      	b.n	800f3ee <_printf_float+0x456>

0800f404 <_printf_common>:
 800f404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f408:	4616      	mov	r6, r2
 800f40a:	4699      	mov	r9, r3
 800f40c:	688a      	ldr	r2, [r1, #8]
 800f40e:	690b      	ldr	r3, [r1, #16]
 800f410:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f414:	4293      	cmp	r3, r2
 800f416:	bfb8      	it	lt
 800f418:	4613      	movlt	r3, r2
 800f41a:	6033      	str	r3, [r6, #0]
 800f41c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f420:	4607      	mov	r7, r0
 800f422:	460c      	mov	r4, r1
 800f424:	b10a      	cbz	r2, 800f42a <_printf_common+0x26>
 800f426:	3301      	adds	r3, #1
 800f428:	6033      	str	r3, [r6, #0]
 800f42a:	6823      	ldr	r3, [r4, #0]
 800f42c:	0699      	lsls	r1, r3, #26
 800f42e:	bf42      	ittt	mi
 800f430:	6833      	ldrmi	r3, [r6, #0]
 800f432:	3302      	addmi	r3, #2
 800f434:	6033      	strmi	r3, [r6, #0]
 800f436:	6825      	ldr	r5, [r4, #0]
 800f438:	f015 0506 	ands.w	r5, r5, #6
 800f43c:	d106      	bne.n	800f44c <_printf_common+0x48>
 800f43e:	f104 0a19 	add.w	sl, r4, #25
 800f442:	68e3      	ldr	r3, [r4, #12]
 800f444:	6832      	ldr	r2, [r6, #0]
 800f446:	1a9b      	subs	r3, r3, r2
 800f448:	42ab      	cmp	r3, r5
 800f44a:	dc26      	bgt.n	800f49a <_printf_common+0x96>
 800f44c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f450:	1e13      	subs	r3, r2, #0
 800f452:	6822      	ldr	r2, [r4, #0]
 800f454:	bf18      	it	ne
 800f456:	2301      	movne	r3, #1
 800f458:	0692      	lsls	r2, r2, #26
 800f45a:	d42b      	bmi.n	800f4b4 <_printf_common+0xb0>
 800f45c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f460:	4649      	mov	r1, r9
 800f462:	4638      	mov	r0, r7
 800f464:	47c0      	blx	r8
 800f466:	3001      	adds	r0, #1
 800f468:	d01e      	beq.n	800f4a8 <_printf_common+0xa4>
 800f46a:	6823      	ldr	r3, [r4, #0]
 800f46c:	68e5      	ldr	r5, [r4, #12]
 800f46e:	6832      	ldr	r2, [r6, #0]
 800f470:	f003 0306 	and.w	r3, r3, #6
 800f474:	2b04      	cmp	r3, #4
 800f476:	bf08      	it	eq
 800f478:	1aad      	subeq	r5, r5, r2
 800f47a:	68a3      	ldr	r3, [r4, #8]
 800f47c:	6922      	ldr	r2, [r4, #16]
 800f47e:	bf0c      	ite	eq
 800f480:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f484:	2500      	movne	r5, #0
 800f486:	4293      	cmp	r3, r2
 800f488:	bfc4      	itt	gt
 800f48a:	1a9b      	subgt	r3, r3, r2
 800f48c:	18ed      	addgt	r5, r5, r3
 800f48e:	2600      	movs	r6, #0
 800f490:	341a      	adds	r4, #26
 800f492:	42b5      	cmp	r5, r6
 800f494:	d11a      	bne.n	800f4cc <_printf_common+0xc8>
 800f496:	2000      	movs	r0, #0
 800f498:	e008      	b.n	800f4ac <_printf_common+0xa8>
 800f49a:	2301      	movs	r3, #1
 800f49c:	4652      	mov	r2, sl
 800f49e:	4649      	mov	r1, r9
 800f4a0:	4638      	mov	r0, r7
 800f4a2:	47c0      	blx	r8
 800f4a4:	3001      	adds	r0, #1
 800f4a6:	d103      	bne.n	800f4b0 <_printf_common+0xac>
 800f4a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f4ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4b0:	3501      	adds	r5, #1
 800f4b2:	e7c6      	b.n	800f442 <_printf_common+0x3e>
 800f4b4:	18e1      	adds	r1, r4, r3
 800f4b6:	1c5a      	adds	r2, r3, #1
 800f4b8:	2030      	movs	r0, #48	; 0x30
 800f4ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f4be:	4422      	add	r2, r4
 800f4c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f4c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f4c8:	3302      	adds	r3, #2
 800f4ca:	e7c7      	b.n	800f45c <_printf_common+0x58>
 800f4cc:	2301      	movs	r3, #1
 800f4ce:	4622      	mov	r2, r4
 800f4d0:	4649      	mov	r1, r9
 800f4d2:	4638      	mov	r0, r7
 800f4d4:	47c0      	blx	r8
 800f4d6:	3001      	adds	r0, #1
 800f4d8:	d0e6      	beq.n	800f4a8 <_printf_common+0xa4>
 800f4da:	3601      	adds	r6, #1
 800f4dc:	e7d9      	b.n	800f492 <_printf_common+0x8e>
	...

0800f4e0 <_printf_i>:
 800f4e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f4e4:	7e0f      	ldrb	r7, [r1, #24]
 800f4e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f4e8:	2f78      	cmp	r7, #120	; 0x78
 800f4ea:	4691      	mov	r9, r2
 800f4ec:	4680      	mov	r8, r0
 800f4ee:	460c      	mov	r4, r1
 800f4f0:	469a      	mov	sl, r3
 800f4f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f4f6:	d807      	bhi.n	800f508 <_printf_i+0x28>
 800f4f8:	2f62      	cmp	r7, #98	; 0x62
 800f4fa:	d80a      	bhi.n	800f512 <_printf_i+0x32>
 800f4fc:	2f00      	cmp	r7, #0
 800f4fe:	f000 80d8 	beq.w	800f6b2 <_printf_i+0x1d2>
 800f502:	2f58      	cmp	r7, #88	; 0x58
 800f504:	f000 80a3 	beq.w	800f64e <_printf_i+0x16e>
 800f508:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f50c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f510:	e03a      	b.n	800f588 <_printf_i+0xa8>
 800f512:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f516:	2b15      	cmp	r3, #21
 800f518:	d8f6      	bhi.n	800f508 <_printf_i+0x28>
 800f51a:	a101      	add	r1, pc, #4	; (adr r1, 800f520 <_printf_i+0x40>)
 800f51c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f520:	0800f579 	.word	0x0800f579
 800f524:	0800f58d 	.word	0x0800f58d
 800f528:	0800f509 	.word	0x0800f509
 800f52c:	0800f509 	.word	0x0800f509
 800f530:	0800f509 	.word	0x0800f509
 800f534:	0800f509 	.word	0x0800f509
 800f538:	0800f58d 	.word	0x0800f58d
 800f53c:	0800f509 	.word	0x0800f509
 800f540:	0800f509 	.word	0x0800f509
 800f544:	0800f509 	.word	0x0800f509
 800f548:	0800f509 	.word	0x0800f509
 800f54c:	0800f699 	.word	0x0800f699
 800f550:	0800f5bd 	.word	0x0800f5bd
 800f554:	0800f67b 	.word	0x0800f67b
 800f558:	0800f509 	.word	0x0800f509
 800f55c:	0800f509 	.word	0x0800f509
 800f560:	0800f6bb 	.word	0x0800f6bb
 800f564:	0800f509 	.word	0x0800f509
 800f568:	0800f5bd 	.word	0x0800f5bd
 800f56c:	0800f509 	.word	0x0800f509
 800f570:	0800f509 	.word	0x0800f509
 800f574:	0800f683 	.word	0x0800f683
 800f578:	682b      	ldr	r3, [r5, #0]
 800f57a:	1d1a      	adds	r2, r3, #4
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	602a      	str	r2, [r5, #0]
 800f580:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f584:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f588:	2301      	movs	r3, #1
 800f58a:	e0a3      	b.n	800f6d4 <_printf_i+0x1f4>
 800f58c:	6820      	ldr	r0, [r4, #0]
 800f58e:	6829      	ldr	r1, [r5, #0]
 800f590:	0606      	lsls	r6, r0, #24
 800f592:	f101 0304 	add.w	r3, r1, #4
 800f596:	d50a      	bpl.n	800f5ae <_printf_i+0xce>
 800f598:	680e      	ldr	r6, [r1, #0]
 800f59a:	602b      	str	r3, [r5, #0]
 800f59c:	2e00      	cmp	r6, #0
 800f59e:	da03      	bge.n	800f5a8 <_printf_i+0xc8>
 800f5a0:	232d      	movs	r3, #45	; 0x2d
 800f5a2:	4276      	negs	r6, r6
 800f5a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f5a8:	485e      	ldr	r0, [pc, #376]	; (800f724 <_printf_i+0x244>)
 800f5aa:	230a      	movs	r3, #10
 800f5ac:	e019      	b.n	800f5e2 <_printf_i+0x102>
 800f5ae:	680e      	ldr	r6, [r1, #0]
 800f5b0:	602b      	str	r3, [r5, #0]
 800f5b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f5b6:	bf18      	it	ne
 800f5b8:	b236      	sxthne	r6, r6
 800f5ba:	e7ef      	b.n	800f59c <_printf_i+0xbc>
 800f5bc:	682b      	ldr	r3, [r5, #0]
 800f5be:	6820      	ldr	r0, [r4, #0]
 800f5c0:	1d19      	adds	r1, r3, #4
 800f5c2:	6029      	str	r1, [r5, #0]
 800f5c4:	0601      	lsls	r1, r0, #24
 800f5c6:	d501      	bpl.n	800f5cc <_printf_i+0xec>
 800f5c8:	681e      	ldr	r6, [r3, #0]
 800f5ca:	e002      	b.n	800f5d2 <_printf_i+0xf2>
 800f5cc:	0646      	lsls	r6, r0, #25
 800f5ce:	d5fb      	bpl.n	800f5c8 <_printf_i+0xe8>
 800f5d0:	881e      	ldrh	r6, [r3, #0]
 800f5d2:	4854      	ldr	r0, [pc, #336]	; (800f724 <_printf_i+0x244>)
 800f5d4:	2f6f      	cmp	r7, #111	; 0x6f
 800f5d6:	bf0c      	ite	eq
 800f5d8:	2308      	moveq	r3, #8
 800f5da:	230a      	movne	r3, #10
 800f5dc:	2100      	movs	r1, #0
 800f5de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f5e2:	6865      	ldr	r5, [r4, #4]
 800f5e4:	60a5      	str	r5, [r4, #8]
 800f5e6:	2d00      	cmp	r5, #0
 800f5e8:	bfa2      	ittt	ge
 800f5ea:	6821      	ldrge	r1, [r4, #0]
 800f5ec:	f021 0104 	bicge.w	r1, r1, #4
 800f5f0:	6021      	strge	r1, [r4, #0]
 800f5f2:	b90e      	cbnz	r6, 800f5f8 <_printf_i+0x118>
 800f5f4:	2d00      	cmp	r5, #0
 800f5f6:	d04d      	beq.n	800f694 <_printf_i+0x1b4>
 800f5f8:	4615      	mov	r5, r2
 800f5fa:	fbb6 f1f3 	udiv	r1, r6, r3
 800f5fe:	fb03 6711 	mls	r7, r3, r1, r6
 800f602:	5dc7      	ldrb	r7, [r0, r7]
 800f604:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f608:	4637      	mov	r7, r6
 800f60a:	42bb      	cmp	r3, r7
 800f60c:	460e      	mov	r6, r1
 800f60e:	d9f4      	bls.n	800f5fa <_printf_i+0x11a>
 800f610:	2b08      	cmp	r3, #8
 800f612:	d10b      	bne.n	800f62c <_printf_i+0x14c>
 800f614:	6823      	ldr	r3, [r4, #0]
 800f616:	07de      	lsls	r6, r3, #31
 800f618:	d508      	bpl.n	800f62c <_printf_i+0x14c>
 800f61a:	6923      	ldr	r3, [r4, #16]
 800f61c:	6861      	ldr	r1, [r4, #4]
 800f61e:	4299      	cmp	r1, r3
 800f620:	bfde      	ittt	le
 800f622:	2330      	movle	r3, #48	; 0x30
 800f624:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f628:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800f62c:	1b52      	subs	r2, r2, r5
 800f62e:	6122      	str	r2, [r4, #16]
 800f630:	f8cd a000 	str.w	sl, [sp]
 800f634:	464b      	mov	r3, r9
 800f636:	aa03      	add	r2, sp, #12
 800f638:	4621      	mov	r1, r4
 800f63a:	4640      	mov	r0, r8
 800f63c:	f7ff fee2 	bl	800f404 <_printf_common>
 800f640:	3001      	adds	r0, #1
 800f642:	d14c      	bne.n	800f6de <_printf_i+0x1fe>
 800f644:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f648:	b004      	add	sp, #16
 800f64a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f64e:	4835      	ldr	r0, [pc, #212]	; (800f724 <_printf_i+0x244>)
 800f650:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f654:	6829      	ldr	r1, [r5, #0]
 800f656:	6823      	ldr	r3, [r4, #0]
 800f658:	f851 6b04 	ldr.w	r6, [r1], #4
 800f65c:	6029      	str	r1, [r5, #0]
 800f65e:	061d      	lsls	r5, r3, #24
 800f660:	d514      	bpl.n	800f68c <_printf_i+0x1ac>
 800f662:	07df      	lsls	r7, r3, #31
 800f664:	bf44      	itt	mi
 800f666:	f043 0320 	orrmi.w	r3, r3, #32
 800f66a:	6023      	strmi	r3, [r4, #0]
 800f66c:	b91e      	cbnz	r6, 800f676 <_printf_i+0x196>
 800f66e:	6823      	ldr	r3, [r4, #0]
 800f670:	f023 0320 	bic.w	r3, r3, #32
 800f674:	6023      	str	r3, [r4, #0]
 800f676:	2310      	movs	r3, #16
 800f678:	e7b0      	b.n	800f5dc <_printf_i+0xfc>
 800f67a:	6823      	ldr	r3, [r4, #0]
 800f67c:	f043 0320 	orr.w	r3, r3, #32
 800f680:	6023      	str	r3, [r4, #0]
 800f682:	2378      	movs	r3, #120	; 0x78
 800f684:	4828      	ldr	r0, [pc, #160]	; (800f728 <_printf_i+0x248>)
 800f686:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f68a:	e7e3      	b.n	800f654 <_printf_i+0x174>
 800f68c:	0659      	lsls	r1, r3, #25
 800f68e:	bf48      	it	mi
 800f690:	b2b6      	uxthmi	r6, r6
 800f692:	e7e6      	b.n	800f662 <_printf_i+0x182>
 800f694:	4615      	mov	r5, r2
 800f696:	e7bb      	b.n	800f610 <_printf_i+0x130>
 800f698:	682b      	ldr	r3, [r5, #0]
 800f69a:	6826      	ldr	r6, [r4, #0]
 800f69c:	6961      	ldr	r1, [r4, #20]
 800f69e:	1d18      	adds	r0, r3, #4
 800f6a0:	6028      	str	r0, [r5, #0]
 800f6a2:	0635      	lsls	r5, r6, #24
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	d501      	bpl.n	800f6ac <_printf_i+0x1cc>
 800f6a8:	6019      	str	r1, [r3, #0]
 800f6aa:	e002      	b.n	800f6b2 <_printf_i+0x1d2>
 800f6ac:	0670      	lsls	r0, r6, #25
 800f6ae:	d5fb      	bpl.n	800f6a8 <_printf_i+0x1c8>
 800f6b0:	8019      	strh	r1, [r3, #0]
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	6123      	str	r3, [r4, #16]
 800f6b6:	4615      	mov	r5, r2
 800f6b8:	e7ba      	b.n	800f630 <_printf_i+0x150>
 800f6ba:	682b      	ldr	r3, [r5, #0]
 800f6bc:	1d1a      	adds	r2, r3, #4
 800f6be:	602a      	str	r2, [r5, #0]
 800f6c0:	681d      	ldr	r5, [r3, #0]
 800f6c2:	6862      	ldr	r2, [r4, #4]
 800f6c4:	2100      	movs	r1, #0
 800f6c6:	4628      	mov	r0, r5
 800f6c8:	f7f0 fd8a 	bl	80001e0 <memchr>
 800f6cc:	b108      	cbz	r0, 800f6d2 <_printf_i+0x1f2>
 800f6ce:	1b40      	subs	r0, r0, r5
 800f6d0:	6060      	str	r0, [r4, #4]
 800f6d2:	6863      	ldr	r3, [r4, #4]
 800f6d4:	6123      	str	r3, [r4, #16]
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f6dc:	e7a8      	b.n	800f630 <_printf_i+0x150>
 800f6de:	6923      	ldr	r3, [r4, #16]
 800f6e0:	462a      	mov	r2, r5
 800f6e2:	4649      	mov	r1, r9
 800f6e4:	4640      	mov	r0, r8
 800f6e6:	47d0      	blx	sl
 800f6e8:	3001      	adds	r0, #1
 800f6ea:	d0ab      	beq.n	800f644 <_printf_i+0x164>
 800f6ec:	6823      	ldr	r3, [r4, #0]
 800f6ee:	079b      	lsls	r3, r3, #30
 800f6f0:	d413      	bmi.n	800f71a <_printf_i+0x23a>
 800f6f2:	68e0      	ldr	r0, [r4, #12]
 800f6f4:	9b03      	ldr	r3, [sp, #12]
 800f6f6:	4298      	cmp	r0, r3
 800f6f8:	bfb8      	it	lt
 800f6fa:	4618      	movlt	r0, r3
 800f6fc:	e7a4      	b.n	800f648 <_printf_i+0x168>
 800f6fe:	2301      	movs	r3, #1
 800f700:	4632      	mov	r2, r6
 800f702:	4649      	mov	r1, r9
 800f704:	4640      	mov	r0, r8
 800f706:	47d0      	blx	sl
 800f708:	3001      	adds	r0, #1
 800f70a:	d09b      	beq.n	800f644 <_printf_i+0x164>
 800f70c:	3501      	adds	r5, #1
 800f70e:	68e3      	ldr	r3, [r4, #12]
 800f710:	9903      	ldr	r1, [sp, #12]
 800f712:	1a5b      	subs	r3, r3, r1
 800f714:	42ab      	cmp	r3, r5
 800f716:	dcf2      	bgt.n	800f6fe <_printf_i+0x21e>
 800f718:	e7eb      	b.n	800f6f2 <_printf_i+0x212>
 800f71a:	2500      	movs	r5, #0
 800f71c:	f104 0619 	add.w	r6, r4, #25
 800f720:	e7f5      	b.n	800f70e <_printf_i+0x22e>
 800f722:	bf00      	nop
 800f724:	08014966 	.word	0x08014966
 800f728:	08014977 	.word	0x08014977

0800f72c <_sbrk_r>:
 800f72c:	b538      	push	{r3, r4, r5, lr}
 800f72e:	4d06      	ldr	r5, [pc, #24]	; (800f748 <_sbrk_r+0x1c>)
 800f730:	2300      	movs	r3, #0
 800f732:	4604      	mov	r4, r0
 800f734:	4608      	mov	r0, r1
 800f736:	602b      	str	r3, [r5, #0]
 800f738:	f7f6 fcda 	bl	80060f0 <_sbrk>
 800f73c:	1c43      	adds	r3, r0, #1
 800f73e:	d102      	bne.n	800f746 <_sbrk_r+0x1a>
 800f740:	682b      	ldr	r3, [r5, #0]
 800f742:	b103      	cbz	r3, 800f746 <_sbrk_r+0x1a>
 800f744:	6023      	str	r3, [r4, #0]
 800f746:	bd38      	pop	{r3, r4, r5, pc}
 800f748:	200036d4 	.word	0x200036d4

0800f74c <siprintf>:
 800f74c:	b40e      	push	{r1, r2, r3}
 800f74e:	b500      	push	{lr}
 800f750:	b09c      	sub	sp, #112	; 0x70
 800f752:	ab1d      	add	r3, sp, #116	; 0x74
 800f754:	9002      	str	r0, [sp, #8]
 800f756:	9006      	str	r0, [sp, #24]
 800f758:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f75c:	4809      	ldr	r0, [pc, #36]	; (800f784 <siprintf+0x38>)
 800f75e:	9107      	str	r1, [sp, #28]
 800f760:	9104      	str	r1, [sp, #16]
 800f762:	4909      	ldr	r1, [pc, #36]	; (800f788 <siprintf+0x3c>)
 800f764:	f853 2b04 	ldr.w	r2, [r3], #4
 800f768:	9105      	str	r1, [sp, #20]
 800f76a:	6800      	ldr	r0, [r0, #0]
 800f76c:	9301      	str	r3, [sp, #4]
 800f76e:	a902      	add	r1, sp, #8
 800f770:	f002 fe66 	bl	8012440 <_svfiprintf_r>
 800f774:	9b02      	ldr	r3, [sp, #8]
 800f776:	2200      	movs	r2, #0
 800f778:	701a      	strb	r2, [r3, #0]
 800f77a:	b01c      	add	sp, #112	; 0x70
 800f77c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f780:	b003      	add	sp, #12
 800f782:	4770      	bx	lr
 800f784:	2000023c 	.word	0x2000023c
 800f788:	ffff0208 	.word	0xffff0208

0800f78c <strchr>:
 800f78c:	b2c9      	uxtb	r1, r1
 800f78e:	4603      	mov	r3, r0
 800f790:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f794:	b11a      	cbz	r2, 800f79e <strchr+0x12>
 800f796:	428a      	cmp	r2, r1
 800f798:	d1f9      	bne.n	800f78e <strchr+0x2>
 800f79a:	4618      	mov	r0, r3
 800f79c:	4770      	bx	lr
 800f79e:	2900      	cmp	r1, #0
 800f7a0:	bf18      	it	ne
 800f7a2:	2300      	movne	r3, #0
 800f7a4:	e7f9      	b.n	800f79a <strchr+0xe>

0800f7a6 <strncmp>:
 800f7a6:	b510      	push	{r4, lr}
 800f7a8:	b17a      	cbz	r2, 800f7ca <strncmp+0x24>
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	3901      	subs	r1, #1
 800f7ae:	1884      	adds	r4, r0, r2
 800f7b0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f7b4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f7b8:	4290      	cmp	r0, r2
 800f7ba:	d101      	bne.n	800f7c0 <strncmp+0x1a>
 800f7bc:	42a3      	cmp	r3, r4
 800f7be:	d101      	bne.n	800f7c4 <strncmp+0x1e>
 800f7c0:	1a80      	subs	r0, r0, r2
 800f7c2:	bd10      	pop	{r4, pc}
 800f7c4:	2800      	cmp	r0, #0
 800f7c6:	d1f3      	bne.n	800f7b0 <strncmp+0xa>
 800f7c8:	e7fa      	b.n	800f7c0 <strncmp+0x1a>
 800f7ca:	4610      	mov	r0, r2
 800f7cc:	e7f9      	b.n	800f7c2 <strncmp+0x1c>

0800f7ce <strstr>:
 800f7ce:	780a      	ldrb	r2, [r1, #0]
 800f7d0:	b570      	push	{r4, r5, r6, lr}
 800f7d2:	b96a      	cbnz	r2, 800f7f0 <strstr+0x22>
 800f7d4:	bd70      	pop	{r4, r5, r6, pc}
 800f7d6:	429a      	cmp	r2, r3
 800f7d8:	d109      	bne.n	800f7ee <strstr+0x20>
 800f7da:	460c      	mov	r4, r1
 800f7dc:	4605      	mov	r5, r0
 800f7de:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d0f6      	beq.n	800f7d4 <strstr+0x6>
 800f7e6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800f7ea:	429e      	cmp	r6, r3
 800f7ec:	d0f7      	beq.n	800f7de <strstr+0x10>
 800f7ee:	3001      	adds	r0, #1
 800f7f0:	7803      	ldrb	r3, [r0, #0]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d1ef      	bne.n	800f7d6 <strstr+0x8>
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	e7ec      	b.n	800f7d4 <strstr+0x6>

0800f7fa <sulp>:
 800f7fa:	b570      	push	{r4, r5, r6, lr}
 800f7fc:	4604      	mov	r4, r0
 800f7fe:	460d      	mov	r5, r1
 800f800:	ec45 4b10 	vmov	d0, r4, r5
 800f804:	4616      	mov	r6, r2
 800f806:	f002 fc71 	bl	80120ec <__ulp>
 800f80a:	ec51 0b10 	vmov	r0, r1, d0
 800f80e:	b17e      	cbz	r6, 800f830 <sulp+0x36>
 800f810:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f814:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f818:	2b00      	cmp	r3, #0
 800f81a:	dd09      	ble.n	800f830 <sulp+0x36>
 800f81c:	051b      	lsls	r3, r3, #20
 800f81e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f822:	2400      	movs	r4, #0
 800f824:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f828:	4622      	mov	r2, r4
 800f82a:	462b      	mov	r3, r5
 800f82c:	f7f0 fee4 	bl	80005f8 <__aeabi_dmul>
 800f830:	bd70      	pop	{r4, r5, r6, pc}
 800f832:	0000      	movs	r0, r0
 800f834:	0000      	movs	r0, r0
	...

0800f838 <_strtod_l>:
 800f838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f83c:	ed2d 8b02 	vpush	{d8}
 800f840:	b09d      	sub	sp, #116	; 0x74
 800f842:	461f      	mov	r7, r3
 800f844:	2300      	movs	r3, #0
 800f846:	9318      	str	r3, [sp, #96]	; 0x60
 800f848:	4ba2      	ldr	r3, [pc, #648]	; (800fad4 <_strtod_l+0x29c>)
 800f84a:	9213      	str	r2, [sp, #76]	; 0x4c
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	9305      	str	r3, [sp, #20]
 800f850:	4604      	mov	r4, r0
 800f852:	4618      	mov	r0, r3
 800f854:	4688      	mov	r8, r1
 800f856:	f7f0 fcbb 	bl	80001d0 <strlen>
 800f85a:	f04f 0a00 	mov.w	sl, #0
 800f85e:	4605      	mov	r5, r0
 800f860:	f04f 0b00 	mov.w	fp, #0
 800f864:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f868:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f86a:	781a      	ldrb	r2, [r3, #0]
 800f86c:	2a2b      	cmp	r2, #43	; 0x2b
 800f86e:	d04e      	beq.n	800f90e <_strtod_l+0xd6>
 800f870:	d83b      	bhi.n	800f8ea <_strtod_l+0xb2>
 800f872:	2a0d      	cmp	r2, #13
 800f874:	d834      	bhi.n	800f8e0 <_strtod_l+0xa8>
 800f876:	2a08      	cmp	r2, #8
 800f878:	d834      	bhi.n	800f8e4 <_strtod_l+0xac>
 800f87a:	2a00      	cmp	r2, #0
 800f87c:	d03e      	beq.n	800f8fc <_strtod_l+0xc4>
 800f87e:	2300      	movs	r3, #0
 800f880:	930a      	str	r3, [sp, #40]	; 0x28
 800f882:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800f884:	7833      	ldrb	r3, [r6, #0]
 800f886:	2b30      	cmp	r3, #48	; 0x30
 800f888:	f040 80b0 	bne.w	800f9ec <_strtod_l+0x1b4>
 800f88c:	7873      	ldrb	r3, [r6, #1]
 800f88e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f892:	2b58      	cmp	r3, #88	; 0x58
 800f894:	d168      	bne.n	800f968 <_strtod_l+0x130>
 800f896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f898:	9301      	str	r3, [sp, #4]
 800f89a:	ab18      	add	r3, sp, #96	; 0x60
 800f89c:	9702      	str	r7, [sp, #8]
 800f89e:	9300      	str	r3, [sp, #0]
 800f8a0:	4a8d      	ldr	r2, [pc, #564]	; (800fad8 <_strtod_l+0x2a0>)
 800f8a2:	ab19      	add	r3, sp, #100	; 0x64
 800f8a4:	a917      	add	r1, sp, #92	; 0x5c
 800f8a6:	4620      	mov	r0, r4
 800f8a8:	f001 fd80 	bl	80113ac <__gethex>
 800f8ac:	f010 0707 	ands.w	r7, r0, #7
 800f8b0:	4605      	mov	r5, r0
 800f8b2:	d005      	beq.n	800f8c0 <_strtod_l+0x88>
 800f8b4:	2f06      	cmp	r7, #6
 800f8b6:	d12c      	bne.n	800f912 <_strtod_l+0xda>
 800f8b8:	3601      	adds	r6, #1
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	9617      	str	r6, [sp, #92]	; 0x5c
 800f8be:	930a      	str	r3, [sp, #40]	; 0x28
 800f8c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	f040 8590 	bne.w	80103e8 <_strtod_l+0xbb0>
 800f8c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8ca:	b1eb      	cbz	r3, 800f908 <_strtod_l+0xd0>
 800f8cc:	4652      	mov	r2, sl
 800f8ce:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f8d2:	ec43 2b10 	vmov	d0, r2, r3
 800f8d6:	b01d      	add	sp, #116	; 0x74
 800f8d8:	ecbd 8b02 	vpop	{d8}
 800f8dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8e0:	2a20      	cmp	r2, #32
 800f8e2:	d1cc      	bne.n	800f87e <_strtod_l+0x46>
 800f8e4:	3301      	adds	r3, #1
 800f8e6:	9317      	str	r3, [sp, #92]	; 0x5c
 800f8e8:	e7be      	b.n	800f868 <_strtod_l+0x30>
 800f8ea:	2a2d      	cmp	r2, #45	; 0x2d
 800f8ec:	d1c7      	bne.n	800f87e <_strtod_l+0x46>
 800f8ee:	2201      	movs	r2, #1
 800f8f0:	920a      	str	r2, [sp, #40]	; 0x28
 800f8f2:	1c5a      	adds	r2, r3, #1
 800f8f4:	9217      	str	r2, [sp, #92]	; 0x5c
 800f8f6:	785b      	ldrb	r3, [r3, #1]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d1c2      	bne.n	800f882 <_strtod_l+0x4a>
 800f8fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f8fe:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f902:	2b00      	cmp	r3, #0
 800f904:	f040 856e 	bne.w	80103e4 <_strtod_l+0xbac>
 800f908:	4652      	mov	r2, sl
 800f90a:	465b      	mov	r3, fp
 800f90c:	e7e1      	b.n	800f8d2 <_strtod_l+0x9a>
 800f90e:	2200      	movs	r2, #0
 800f910:	e7ee      	b.n	800f8f0 <_strtod_l+0xb8>
 800f912:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f914:	b13a      	cbz	r2, 800f926 <_strtod_l+0xee>
 800f916:	2135      	movs	r1, #53	; 0x35
 800f918:	a81a      	add	r0, sp, #104	; 0x68
 800f91a:	f002 fcf2 	bl	8012302 <__copybits>
 800f91e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f920:	4620      	mov	r0, r4
 800f922:	f002 f8b1 	bl	8011a88 <_Bfree>
 800f926:	3f01      	subs	r7, #1
 800f928:	2f04      	cmp	r7, #4
 800f92a:	d806      	bhi.n	800f93a <_strtod_l+0x102>
 800f92c:	e8df f007 	tbb	[pc, r7]
 800f930:	1714030a 	.word	0x1714030a
 800f934:	0a          	.byte	0x0a
 800f935:	00          	.byte	0x00
 800f936:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800f93a:	0728      	lsls	r0, r5, #28
 800f93c:	d5c0      	bpl.n	800f8c0 <_strtod_l+0x88>
 800f93e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800f942:	e7bd      	b.n	800f8c0 <_strtod_l+0x88>
 800f944:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800f948:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f94a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f94e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f952:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f956:	e7f0      	b.n	800f93a <_strtod_l+0x102>
 800f958:	f8df b180 	ldr.w	fp, [pc, #384]	; 800fadc <_strtod_l+0x2a4>
 800f95c:	e7ed      	b.n	800f93a <_strtod_l+0x102>
 800f95e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800f962:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800f966:	e7e8      	b.n	800f93a <_strtod_l+0x102>
 800f968:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f96a:	1c5a      	adds	r2, r3, #1
 800f96c:	9217      	str	r2, [sp, #92]	; 0x5c
 800f96e:	785b      	ldrb	r3, [r3, #1]
 800f970:	2b30      	cmp	r3, #48	; 0x30
 800f972:	d0f9      	beq.n	800f968 <_strtod_l+0x130>
 800f974:	2b00      	cmp	r3, #0
 800f976:	d0a3      	beq.n	800f8c0 <_strtod_l+0x88>
 800f978:	2301      	movs	r3, #1
 800f97a:	f04f 0900 	mov.w	r9, #0
 800f97e:	9304      	str	r3, [sp, #16]
 800f980:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f982:	9308      	str	r3, [sp, #32]
 800f984:	f8cd 901c 	str.w	r9, [sp, #28]
 800f988:	464f      	mov	r7, r9
 800f98a:	220a      	movs	r2, #10
 800f98c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800f98e:	7806      	ldrb	r6, [r0, #0]
 800f990:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800f994:	b2d9      	uxtb	r1, r3
 800f996:	2909      	cmp	r1, #9
 800f998:	d92a      	bls.n	800f9f0 <_strtod_l+0x1b8>
 800f99a:	9905      	ldr	r1, [sp, #20]
 800f99c:	462a      	mov	r2, r5
 800f99e:	f7ff ff02 	bl	800f7a6 <strncmp>
 800f9a2:	b398      	cbz	r0, 800fa0c <_strtod_l+0x1d4>
 800f9a4:	2000      	movs	r0, #0
 800f9a6:	4632      	mov	r2, r6
 800f9a8:	463d      	mov	r5, r7
 800f9aa:	9005      	str	r0, [sp, #20]
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	2a65      	cmp	r2, #101	; 0x65
 800f9b0:	d001      	beq.n	800f9b6 <_strtod_l+0x17e>
 800f9b2:	2a45      	cmp	r2, #69	; 0x45
 800f9b4:	d118      	bne.n	800f9e8 <_strtod_l+0x1b0>
 800f9b6:	b91d      	cbnz	r5, 800f9c0 <_strtod_l+0x188>
 800f9b8:	9a04      	ldr	r2, [sp, #16]
 800f9ba:	4302      	orrs	r2, r0
 800f9bc:	d09e      	beq.n	800f8fc <_strtod_l+0xc4>
 800f9be:	2500      	movs	r5, #0
 800f9c0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800f9c4:	f108 0201 	add.w	r2, r8, #1
 800f9c8:	9217      	str	r2, [sp, #92]	; 0x5c
 800f9ca:	f898 2001 	ldrb.w	r2, [r8, #1]
 800f9ce:	2a2b      	cmp	r2, #43	; 0x2b
 800f9d0:	d075      	beq.n	800fabe <_strtod_l+0x286>
 800f9d2:	2a2d      	cmp	r2, #45	; 0x2d
 800f9d4:	d07b      	beq.n	800face <_strtod_l+0x296>
 800f9d6:	f04f 0c00 	mov.w	ip, #0
 800f9da:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800f9de:	2909      	cmp	r1, #9
 800f9e0:	f240 8082 	bls.w	800fae8 <_strtod_l+0x2b0>
 800f9e4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f9e8:	2600      	movs	r6, #0
 800f9ea:	e09d      	b.n	800fb28 <_strtod_l+0x2f0>
 800f9ec:	2300      	movs	r3, #0
 800f9ee:	e7c4      	b.n	800f97a <_strtod_l+0x142>
 800f9f0:	2f08      	cmp	r7, #8
 800f9f2:	bfd8      	it	le
 800f9f4:	9907      	ldrle	r1, [sp, #28]
 800f9f6:	f100 0001 	add.w	r0, r0, #1
 800f9fa:	bfda      	itte	le
 800f9fc:	fb02 3301 	mlale	r3, r2, r1, r3
 800fa00:	9307      	strle	r3, [sp, #28]
 800fa02:	fb02 3909 	mlagt	r9, r2, r9, r3
 800fa06:	3701      	adds	r7, #1
 800fa08:	9017      	str	r0, [sp, #92]	; 0x5c
 800fa0a:	e7bf      	b.n	800f98c <_strtod_l+0x154>
 800fa0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fa0e:	195a      	adds	r2, r3, r5
 800fa10:	9217      	str	r2, [sp, #92]	; 0x5c
 800fa12:	5d5a      	ldrb	r2, [r3, r5]
 800fa14:	2f00      	cmp	r7, #0
 800fa16:	d037      	beq.n	800fa88 <_strtod_l+0x250>
 800fa18:	9005      	str	r0, [sp, #20]
 800fa1a:	463d      	mov	r5, r7
 800fa1c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800fa20:	2b09      	cmp	r3, #9
 800fa22:	d912      	bls.n	800fa4a <_strtod_l+0x212>
 800fa24:	2301      	movs	r3, #1
 800fa26:	e7c2      	b.n	800f9ae <_strtod_l+0x176>
 800fa28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fa2a:	1c5a      	adds	r2, r3, #1
 800fa2c:	9217      	str	r2, [sp, #92]	; 0x5c
 800fa2e:	785a      	ldrb	r2, [r3, #1]
 800fa30:	3001      	adds	r0, #1
 800fa32:	2a30      	cmp	r2, #48	; 0x30
 800fa34:	d0f8      	beq.n	800fa28 <_strtod_l+0x1f0>
 800fa36:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800fa3a:	2b08      	cmp	r3, #8
 800fa3c:	f200 84d9 	bhi.w	80103f2 <_strtod_l+0xbba>
 800fa40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fa42:	9005      	str	r0, [sp, #20]
 800fa44:	2000      	movs	r0, #0
 800fa46:	9308      	str	r3, [sp, #32]
 800fa48:	4605      	mov	r5, r0
 800fa4a:	3a30      	subs	r2, #48	; 0x30
 800fa4c:	f100 0301 	add.w	r3, r0, #1
 800fa50:	d014      	beq.n	800fa7c <_strtod_l+0x244>
 800fa52:	9905      	ldr	r1, [sp, #20]
 800fa54:	4419      	add	r1, r3
 800fa56:	9105      	str	r1, [sp, #20]
 800fa58:	462b      	mov	r3, r5
 800fa5a:	eb00 0e05 	add.w	lr, r0, r5
 800fa5e:	210a      	movs	r1, #10
 800fa60:	4573      	cmp	r3, lr
 800fa62:	d113      	bne.n	800fa8c <_strtod_l+0x254>
 800fa64:	182b      	adds	r3, r5, r0
 800fa66:	2b08      	cmp	r3, #8
 800fa68:	f105 0501 	add.w	r5, r5, #1
 800fa6c:	4405      	add	r5, r0
 800fa6e:	dc1c      	bgt.n	800faaa <_strtod_l+0x272>
 800fa70:	9907      	ldr	r1, [sp, #28]
 800fa72:	230a      	movs	r3, #10
 800fa74:	fb03 2301 	mla	r3, r3, r1, r2
 800fa78:	9307      	str	r3, [sp, #28]
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fa7e:	1c51      	adds	r1, r2, #1
 800fa80:	9117      	str	r1, [sp, #92]	; 0x5c
 800fa82:	7852      	ldrb	r2, [r2, #1]
 800fa84:	4618      	mov	r0, r3
 800fa86:	e7c9      	b.n	800fa1c <_strtod_l+0x1e4>
 800fa88:	4638      	mov	r0, r7
 800fa8a:	e7d2      	b.n	800fa32 <_strtod_l+0x1fa>
 800fa8c:	2b08      	cmp	r3, #8
 800fa8e:	dc04      	bgt.n	800fa9a <_strtod_l+0x262>
 800fa90:	9e07      	ldr	r6, [sp, #28]
 800fa92:	434e      	muls	r6, r1
 800fa94:	9607      	str	r6, [sp, #28]
 800fa96:	3301      	adds	r3, #1
 800fa98:	e7e2      	b.n	800fa60 <_strtod_l+0x228>
 800fa9a:	f103 0c01 	add.w	ip, r3, #1
 800fa9e:	f1bc 0f10 	cmp.w	ip, #16
 800faa2:	bfd8      	it	le
 800faa4:	fb01 f909 	mulle.w	r9, r1, r9
 800faa8:	e7f5      	b.n	800fa96 <_strtod_l+0x25e>
 800faaa:	2d10      	cmp	r5, #16
 800faac:	bfdc      	itt	le
 800faae:	230a      	movle	r3, #10
 800fab0:	fb03 2909 	mlale	r9, r3, r9, r2
 800fab4:	e7e1      	b.n	800fa7a <_strtod_l+0x242>
 800fab6:	2300      	movs	r3, #0
 800fab8:	9305      	str	r3, [sp, #20]
 800faba:	2301      	movs	r3, #1
 800fabc:	e77c      	b.n	800f9b8 <_strtod_l+0x180>
 800fabe:	f04f 0c00 	mov.w	ip, #0
 800fac2:	f108 0202 	add.w	r2, r8, #2
 800fac6:	9217      	str	r2, [sp, #92]	; 0x5c
 800fac8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800facc:	e785      	b.n	800f9da <_strtod_l+0x1a2>
 800face:	f04f 0c01 	mov.w	ip, #1
 800fad2:	e7f6      	b.n	800fac2 <_strtod_l+0x28a>
 800fad4:	08014ad0 	.word	0x08014ad0
 800fad8:	08014988 	.word	0x08014988
 800fadc:	7ff00000 	.word	0x7ff00000
 800fae0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fae2:	1c51      	adds	r1, r2, #1
 800fae4:	9117      	str	r1, [sp, #92]	; 0x5c
 800fae6:	7852      	ldrb	r2, [r2, #1]
 800fae8:	2a30      	cmp	r2, #48	; 0x30
 800faea:	d0f9      	beq.n	800fae0 <_strtod_l+0x2a8>
 800faec:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800faf0:	2908      	cmp	r1, #8
 800faf2:	f63f af79 	bhi.w	800f9e8 <_strtod_l+0x1b0>
 800faf6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800fafa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fafc:	9206      	str	r2, [sp, #24]
 800fafe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fb00:	1c51      	adds	r1, r2, #1
 800fb02:	9117      	str	r1, [sp, #92]	; 0x5c
 800fb04:	7852      	ldrb	r2, [r2, #1]
 800fb06:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800fb0a:	2e09      	cmp	r6, #9
 800fb0c:	d937      	bls.n	800fb7e <_strtod_l+0x346>
 800fb0e:	9e06      	ldr	r6, [sp, #24]
 800fb10:	1b89      	subs	r1, r1, r6
 800fb12:	2908      	cmp	r1, #8
 800fb14:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800fb18:	dc02      	bgt.n	800fb20 <_strtod_l+0x2e8>
 800fb1a:	4576      	cmp	r6, lr
 800fb1c:	bfa8      	it	ge
 800fb1e:	4676      	movge	r6, lr
 800fb20:	f1bc 0f00 	cmp.w	ip, #0
 800fb24:	d000      	beq.n	800fb28 <_strtod_l+0x2f0>
 800fb26:	4276      	negs	r6, r6
 800fb28:	2d00      	cmp	r5, #0
 800fb2a:	d14d      	bne.n	800fbc8 <_strtod_l+0x390>
 800fb2c:	9904      	ldr	r1, [sp, #16]
 800fb2e:	4301      	orrs	r1, r0
 800fb30:	f47f aec6 	bne.w	800f8c0 <_strtod_l+0x88>
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	f47f aee1 	bne.w	800f8fc <_strtod_l+0xc4>
 800fb3a:	2a69      	cmp	r2, #105	; 0x69
 800fb3c:	d027      	beq.n	800fb8e <_strtod_l+0x356>
 800fb3e:	dc24      	bgt.n	800fb8a <_strtod_l+0x352>
 800fb40:	2a49      	cmp	r2, #73	; 0x49
 800fb42:	d024      	beq.n	800fb8e <_strtod_l+0x356>
 800fb44:	2a4e      	cmp	r2, #78	; 0x4e
 800fb46:	f47f aed9 	bne.w	800f8fc <_strtod_l+0xc4>
 800fb4a:	499f      	ldr	r1, [pc, #636]	; (800fdc8 <_strtod_l+0x590>)
 800fb4c:	a817      	add	r0, sp, #92	; 0x5c
 800fb4e:	f001 fe85 	bl	801185c <__match>
 800fb52:	2800      	cmp	r0, #0
 800fb54:	f43f aed2 	beq.w	800f8fc <_strtod_l+0xc4>
 800fb58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fb5a:	781b      	ldrb	r3, [r3, #0]
 800fb5c:	2b28      	cmp	r3, #40	; 0x28
 800fb5e:	d12d      	bne.n	800fbbc <_strtod_l+0x384>
 800fb60:	499a      	ldr	r1, [pc, #616]	; (800fdcc <_strtod_l+0x594>)
 800fb62:	aa1a      	add	r2, sp, #104	; 0x68
 800fb64:	a817      	add	r0, sp, #92	; 0x5c
 800fb66:	f001 fe8d 	bl	8011884 <__hexnan>
 800fb6a:	2805      	cmp	r0, #5
 800fb6c:	d126      	bne.n	800fbbc <_strtod_l+0x384>
 800fb6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fb70:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800fb74:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800fb78:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800fb7c:	e6a0      	b.n	800f8c0 <_strtod_l+0x88>
 800fb7e:	210a      	movs	r1, #10
 800fb80:	fb01 2e0e 	mla	lr, r1, lr, r2
 800fb84:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800fb88:	e7b9      	b.n	800fafe <_strtod_l+0x2c6>
 800fb8a:	2a6e      	cmp	r2, #110	; 0x6e
 800fb8c:	e7db      	b.n	800fb46 <_strtod_l+0x30e>
 800fb8e:	4990      	ldr	r1, [pc, #576]	; (800fdd0 <_strtod_l+0x598>)
 800fb90:	a817      	add	r0, sp, #92	; 0x5c
 800fb92:	f001 fe63 	bl	801185c <__match>
 800fb96:	2800      	cmp	r0, #0
 800fb98:	f43f aeb0 	beq.w	800f8fc <_strtod_l+0xc4>
 800fb9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fb9e:	498d      	ldr	r1, [pc, #564]	; (800fdd4 <_strtod_l+0x59c>)
 800fba0:	3b01      	subs	r3, #1
 800fba2:	a817      	add	r0, sp, #92	; 0x5c
 800fba4:	9317      	str	r3, [sp, #92]	; 0x5c
 800fba6:	f001 fe59 	bl	801185c <__match>
 800fbaa:	b910      	cbnz	r0, 800fbb2 <_strtod_l+0x37a>
 800fbac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fbae:	3301      	adds	r3, #1
 800fbb0:	9317      	str	r3, [sp, #92]	; 0x5c
 800fbb2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800fde4 <_strtod_l+0x5ac>
 800fbb6:	f04f 0a00 	mov.w	sl, #0
 800fbba:	e681      	b.n	800f8c0 <_strtod_l+0x88>
 800fbbc:	4886      	ldr	r0, [pc, #536]	; (800fdd8 <_strtod_l+0x5a0>)
 800fbbe:	f002 fd3f 	bl	8012640 <nan>
 800fbc2:	ec5b ab10 	vmov	sl, fp, d0
 800fbc6:	e67b      	b.n	800f8c0 <_strtod_l+0x88>
 800fbc8:	9b05      	ldr	r3, [sp, #20]
 800fbca:	9807      	ldr	r0, [sp, #28]
 800fbcc:	1af3      	subs	r3, r6, r3
 800fbce:	2f00      	cmp	r7, #0
 800fbd0:	bf08      	it	eq
 800fbd2:	462f      	moveq	r7, r5
 800fbd4:	2d10      	cmp	r5, #16
 800fbd6:	9306      	str	r3, [sp, #24]
 800fbd8:	46a8      	mov	r8, r5
 800fbda:	bfa8      	it	ge
 800fbdc:	f04f 0810 	movge.w	r8, #16
 800fbe0:	f7f0 fc90 	bl	8000504 <__aeabi_ui2d>
 800fbe4:	2d09      	cmp	r5, #9
 800fbe6:	4682      	mov	sl, r0
 800fbe8:	468b      	mov	fp, r1
 800fbea:	dd13      	ble.n	800fc14 <_strtod_l+0x3dc>
 800fbec:	4b7b      	ldr	r3, [pc, #492]	; (800fddc <_strtod_l+0x5a4>)
 800fbee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800fbf2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800fbf6:	f7f0 fcff 	bl	80005f8 <__aeabi_dmul>
 800fbfa:	4682      	mov	sl, r0
 800fbfc:	4648      	mov	r0, r9
 800fbfe:	468b      	mov	fp, r1
 800fc00:	f7f0 fc80 	bl	8000504 <__aeabi_ui2d>
 800fc04:	4602      	mov	r2, r0
 800fc06:	460b      	mov	r3, r1
 800fc08:	4650      	mov	r0, sl
 800fc0a:	4659      	mov	r1, fp
 800fc0c:	f7f0 fb3e 	bl	800028c <__adddf3>
 800fc10:	4682      	mov	sl, r0
 800fc12:	468b      	mov	fp, r1
 800fc14:	2d0f      	cmp	r5, #15
 800fc16:	dc38      	bgt.n	800fc8a <_strtod_l+0x452>
 800fc18:	9b06      	ldr	r3, [sp, #24]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	f43f ae50 	beq.w	800f8c0 <_strtod_l+0x88>
 800fc20:	dd24      	ble.n	800fc6c <_strtod_l+0x434>
 800fc22:	2b16      	cmp	r3, #22
 800fc24:	dc0b      	bgt.n	800fc3e <_strtod_l+0x406>
 800fc26:	496d      	ldr	r1, [pc, #436]	; (800fddc <_strtod_l+0x5a4>)
 800fc28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fc2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc30:	4652      	mov	r2, sl
 800fc32:	465b      	mov	r3, fp
 800fc34:	f7f0 fce0 	bl	80005f8 <__aeabi_dmul>
 800fc38:	4682      	mov	sl, r0
 800fc3a:	468b      	mov	fp, r1
 800fc3c:	e640      	b.n	800f8c0 <_strtod_l+0x88>
 800fc3e:	9a06      	ldr	r2, [sp, #24]
 800fc40:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800fc44:	4293      	cmp	r3, r2
 800fc46:	db20      	blt.n	800fc8a <_strtod_l+0x452>
 800fc48:	4c64      	ldr	r4, [pc, #400]	; (800fddc <_strtod_l+0x5a4>)
 800fc4a:	f1c5 050f 	rsb	r5, r5, #15
 800fc4e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800fc52:	4652      	mov	r2, sl
 800fc54:	465b      	mov	r3, fp
 800fc56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc5a:	f7f0 fccd 	bl	80005f8 <__aeabi_dmul>
 800fc5e:	9b06      	ldr	r3, [sp, #24]
 800fc60:	1b5d      	subs	r5, r3, r5
 800fc62:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800fc66:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fc6a:	e7e3      	b.n	800fc34 <_strtod_l+0x3fc>
 800fc6c:	9b06      	ldr	r3, [sp, #24]
 800fc6e:	3316      	adds	r3, #22
 800fc70:	db0b      	blt.n	800fc8a <_strtod_l+0x452>
 800fc72:	9b05      	ldr	r3, [sp, #20]
 800fc74:	1b9e      	subs	r6, r3, r6
 800fc76:	4b59      	ldr	r3, [pc, #356]	; (800fddc <_strtod_l+0x5a4>)
 800fc78:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800fc7c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fc80:	4650      	mov	r0, sl
 800fc82:	4659      	mov	r1, fp
 800fc84:	f7f0 fde2 	bl	800084c <__aeabi_ddiv>
 800fc88:	e7d6      	b.n	800fc38 <_strtod_l+0x400>
 800fc8a:	9b06      	ldr	r3, [sp, #24]
 800fc8c:	eba5 0808 	sub.w	r8, r5, r8
 800fc90:	4498      	add	r8, r3
 800fc92:	f1b8 0f00 	cmp.w	r8, #0
 800fc96:	dd74      	ble.n	800fd82 <_strtod_l+0x54a>
 800fc98:	f018 030f 	ands.w	r3, r8, #15
 800fc9c:	d00a      	beq.n	800fcb4 <_strtod_l+0x47c>
 800fc9e:	494f      	ldr	r1, [pc, #316]	; (800fddc <_strtod_l+0x5a4>)
 800fca0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fca4:	4652      	mov	r2, sl
 800fca6:	465b      	mov	r3, fp
 800fca8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fcac:	f7f0 fca4 	bl	80005f8 <__aeabi_dmul>
 800fcb0:	4682      	mov	sl, r0
 800fcb2:	468b      	mov	fp, r1
 800fcb4:	f038 080f 	bics.w	r8, r8, #15
 800fcb8:	d04f      	beq.n	800fd5a <_strtod_l+0x522>
 800fcba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800fcbe:	dd22      	ble.n	800fd06 <_strtod_l+0x4ce>
 800fcc0:	2500      	movs	r5, #0
 800fcc2:	462e      	mov	r6, r5
 800fcc4:	9507      	str	r5, [sp, #28]
 800fcc6:	9505      	str	r5, [sp, #20]
 800fcc8:	2322      	movs	r3, #34	; 0x22
 800fcca:	f8df b118 	ldr.w	fp, [pc, #280]	; 800fde4 <_strtod_l+0x5ac>
 800fcce:	6023      	str	r3, [r4, #0]
 800fcd0:	f04f 0a00 	mov.w	sl, #0
 800fcd4:	9b07      	ldr	r3, [sp, #28]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	f43f adf2 	beq.w	800f8c0 <_strtod_l+0x88>
 800fcdc:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fcde:	4620      	mov	r0, r4
 800fce0:	f001 fed2 	bl	8011a88 <_Bfree>
 800fce4:	9905      	ldr	r1, [sp, #20]
 800fce6:	4620      	mov	r0, r4
 800fce8:	f001 fece 	bl	8011a88 <_Bfree>
 800fcec:	4631      	mov	r1, r6
 800fcee:	4620      	mov	r0, r4
 800fcf0:	f001 feca 	bl	8011a88 <_Bfree>
 800fcf4:	9907      	ldr	r1, [sp, #28]
 800fcf6:	4620      	mov	r0, r4
 800fcf8:	f001 fec6 	bl	8011a88 <_Bfree>
 800fcfc:	4629      	mov	r1, r5
 800fcfe:	4620      	mov	r0, r4
 800fd00:	f001 fec2 	bl	8011a88 <_Bfree>
 800fd04:	e5dc      	b.n	800f8c0 <_strtod_l+0x88>
 800fd06:	4b36      	ldr	r3, [pc, #216]	; (800fde0 <_strtod_l+0x5a8>)
 800fd08:	9304      	str	r3, [sp, #16]
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800fd10:	4650      	mov	r0, sl
 800fd12:	4659      	mov	r1, fp
 800fd14:	4699      	mov	r9, r3
 800fd16:	f1b8 0f01 	cmp.w	r8, #1
 800fd1a:	dc21      	bgt.n	800fd60 <_strtod_l+0x528>
 800fd1c:	b10b      	cbz	r3, 800fd22 <_strtod_l+0x4ea>
 800fd1e:	4682      	mov	sl, r0
 800fd20:	468b      	mov	fp, r1
 800fd22:	4b2f      	ldr	r3, [pc, #188]	; (800fde0 <_strtod_l+0x5a8>)
 800fd24:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800fd28:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800fd2c:	4652      	mov	r2, sl
 800fd2e:	465b      	mov	r3, fp
 800fd30:	e9d9 0100 	ldrd	r0, r1, [r9]
 800fd34:	f7f0 fc60 	bl	80005f8 <__aeabi_dmul>
 800fd38:	4b2a      	ldr	r3, [pc, #168]	; (800fde4 <_strtod_l+0x5ac>)
 800fd3a:	460a      	mov	r2, r1
 800fd3c:	400b      	ands	r3, r1
 800fd3e:	492a      	ldr	r1, [pc, #168]	; (800fde8 <_strtod_l+0x5b0>)
 800fd40:	428b      	cmp	r3, r1
 800fd42:	4682      	mov	sl, r0
 800fd44:	d8bc      	bhi.n	800fcc0 <_strtod_l+0x488>
 800fd46:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800fd4a:	428b      	cmp	r3, r1
 800fd4c:	bf86      	itte	hi
 800fd4e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800fdec <_strtod_l+0x5b4>
 800fd52:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800fd56:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	9304      	str	r3, [sp, #16]
 800fd5e:	e084      	b.n	800fe6a <_strtod_l+0x632>
 800fd60:	f018 0f01 	tst.w	r8, #1
 800fd64:	d005      	beq.n	800fd72 <_strtod_l+0x53a>
 800fd66:	9b04      	ldr	r3, [sp, #16]
 800fd68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd6c:	f7f0 fc44 	bl	80005f8 <__aeabi_dmul>
 800fd70:	2301      	movs	r3, #1
 800fd72:	9a04      	ldr	r2, [sp, #16]
 800fd74:	3208      	adds	r2, #8
 800fd76:	f109 0901 	add.w	r9, r9, #1
 800fd7a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800fd7e:	9204      	str	r2, [sp, #16]
 800fd80:	e7c9      	b.n	800fd16 <_strtod_l+0x4de>
 800fd82:	d0ea      	beq.n	800fd5a <_strtod_l+0x522>
 800fd84:	f1c8 0800 	rsb	r8, r8, #0
 800fd88:	f018 020f 	ands.w	r2, r8, #15
 800fd8c:	d00a      	beq.n	800fda4 <_strtod_l+0x56c>
 800fd8e:	4b13      	ldr	r3, [pc, #76]	; (800fddc <_strtod_l+0x5a4>)
 800fd90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fd94:	4650      	mov	r0, sl
 800fd96:	4659      	mov	r1, fp
 800fd98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd9c:	f7f0 fd56 	bl	800084c <__aeabi_ddiv>
 800fda0:	4682      	mov	sl, r0
 800fda2:	468b      	mov	fp, r1
 800fda4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800fda8:	d0d7      	beq.n	800fd5a <_strtod_l+0x522>
 800fdaa:	f1b8 0f1f 	cmp.w	r8, #31
 800fdae:	dd1f      	ble.n	800fdf0 <_strtod_l+0x5b8>
 800fdb0:	2500      	movs	r5, #0
 800fdb2:	462e      	mov	r6, r5
 800fdb4:	9507      	str	r5, [sp, #28]
 800fdb6:	9505      	str	r5, [sp, #20]
 800fdb8:	2322      	movs	r3, #34	; 0x22
 800fdba:	f04f 0a00 	mov.w	sl, #0
 800fdbe:	f04f 0b00 	mov.w	fp, #0
 800fdc2:	6023      	str	r3, [r4, #0]
 800fdc4:	e786      	b.n	800fcd4 <_strtod_l+0x49c>
 800fdc6:	bf00      	nop
 800fdc8:	08014961 	.word	0x08014961
 800fdcc:	0801499c 	.word	0x0801499c
 800fdd0:	08014959 	.word	0x08014959
 800fdd4:	080149db 	.word	0x080149db
 800fdd8:	08014c88 	.word	0x08014c88
 800fddc:	08014b68 	.word	0x08014b68
 800fde0:	08014b40 	.word	0x08014b40
 800fde4:	7ff00000 	.word	0x7ff00000
 800fde8:	7ca00000 	.word	0x7ca00000
 800fdec:	7fefffff 	.word	0x7fefffff
 800fdf0:	f018 0310 	ands.w	r3, r8, #16
 800fdf4:	bf18      	it	ne
 800fdf6:	236a      	movne	r3, #106	; 0x6a
 800fdf8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80101a8 <_strtod_l+0x970>
 800fdfc:	9304      	str	r3, [sp, #16]
 800fdfe:	4650      	mov	r0, sl
 800fe00:	4659      	mov	r1, fp
 800fe02:	2300      	movs	r3, #0
 800fe04:	f018 0f01 	tst.w	r8, #1
 800fe08:	d004      	beq.n	800fe14 <_strtod_l+0x5dc>
 800fe0a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800fe0e:	f7f0 fbf3 	bl	80005f8 <__aeabi_dmul>
 800fe12:	2301      	movs	r3, #1
 800fe14:	ea5f 0868 	movs.w	r8, r8, asr #1
 800fe18:	f109 0908 	add.w	r9, r9, #8
 800fe1c:	d1f2      	bne.n	800fe04 <_strtod_l+0x5cc>
 800fe1e:	b10b      	cbz	r3, 800fe24 <_strtod_l+0x5ec>
 800fe20:	4682      	mov	sl, r0
 800fe22:	468b      	mov	fp, r1
 800fe24:	9b04      	ldr	r3, [sp, #16]
 800fe26:	b1c3      	cbz	r3, 800fe5a <_strtod_l+0x622>
 800fe28:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800fe2c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	4659      	mov	r1, fp
 800fe34:	dd11      	ble.n	800fe5a <_strtod_l+0x622>
 800fe36:	2b1f      	cmp	r3, #31
 800fe38:	f340 8124 	ble.w	8010084 <_strtod_l+0x84c>
 800fe3c:	2b34      	cmp	r3, #52	; 0x34
 800fe3e:	bfde      	ittt	le
 800fe40:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800fe44:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800fe48:	fa03 f202 	lslle.w	r2, r3, r2
 800fe4c:	f04f 0a00 	mov.w	sl, #0
 800fe50:	bfcc      	ite	gt
 800fe52:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800fe56:	ea02 0b01 	andle.w	fp, r2, r1
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	4650      	mov	r0, sl
 800fe60:	4659      	mov	r1, fp
 800fe62:	f7f0 fe31 	bl	8000ac8 <__aeabi_dcmpeq>
 800fe66:	2800      	cmp	r0, #0
 800fe68:	d1a2      	bne.n	800fdb0 <_strtod_l+0x578>
 800fe6a:	9b07      	ldr	r3, [sp, #28]
 800fe6c:	9300      	str	r3, [sp, #0]
 800fe6e:	9908      	ldr	r1, [sp, #32]
 800fe70:	462b      	mov	r3, r5
 800fe72:	463a      	mov	r2, r7
 800fe74:	4620      	mov	r0, r4
 800fe76:	f001 fe6f 	bl	8011b58 <__s2b>
 800fe7a:	9007      	str	r0, [sp, #28]
 800fe7c:	2800      	cmp	r0, #0
 800fe7e:	f43f af1f 	beq.w	800fcc0 <_strtod_l+0x488>
 800fe82:	9b05      	ldr	r3, [sp, #20]
 800fe84:	1b9e      	subs	r6, r3, r6
 800fe86:	9b06      	ldr	r3, [sp, #24]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	bfb4      	ite	lt
 800fe8c:	4633      	movlt	r3, r6
 800fe8e:	2300      	movge	r3, #0
 800fe90:	930c      	str	r3, [sp, #48]	; 0x30
 800fe92:	9b06      	ldr	r3, [sp, #24]
 800fe94:	2500      	movs	r5, #0
 800fe96:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fe9a:	9312      	str	r3, [sp, #72]	; 0x48
 800fe9c:	462e      	mov	r6, r5
 800fe9e:	9b07      	ldr	r3, [sp, #28]
 800fea0:	4620      	mov	r0, r4
 800fea2:	6859      	ldr	r1, [r3, #4]
 800fea4:	f001 fdb0 	bl	8011a08 <_Balloc>
 800fea8:	9005      	str	r0, [sp, #20]
 800feaa:	2800      	cmp	r0, #0
 800feac:	f43f af0c 	beq.w	800fcc8 <_strtod_l+0x490>
 800feb0:	9b07      	ldr	r3, [sp, #28]
 800feb2:	691a      	ldr	r2, [r3, #16]
 800feb4:	3202      	adds	r2, #2
 800feb6:	f103 010c 	add.w	r1, r3, #12
 800feba:	0092      	lsls	r2, r2, #2
 800febc:	300c      	adds	r0, #12
 800febe:	f7fe febf 	bl	800ec40 <memcpy>
 800fec2:	ec4b ab10 	vmov	d0, sl, fp
 800fec6:	aa1a      	add	r2, sp, #104	; 0x68
 800fec8:	a919      	add	r1, sp, #100	; 0x64
 800feca:	4620      	mov	r0, r4
 800fecc:	f002 f98a 	bl	80121e4 <__d2b>
 800fed0:	ec4b ab18 	vmov	d8, sl, fp
 800fed4:	9018      	str	r0, [sp, #96]	; 0x60
 800fed6:	2800      	cmp	r0, #0
 800fed8:	f43f aef6 	beq.w	800fcc8 <_strtod_l+0x490>
 800fedc:	2101      	movs	r1, #1
 800fede:	4620      	mov	r0, r4
 800fee0:	f001 fed4 	bl	8011c8c <__i2b>
 800fee4:	4606      	mov	r6, r0
 800fee6:	2800      	cmp	r0, #0
 800fee8:	f43f aeee 	beq.w	800fcc8 <_strtod_l+0x490>
 800feec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800feee:	9904      	ldr	r1, [sp, #16]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	bfab      	itete	ge
 800fef4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800fef6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800fef8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800fefa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800fefe:	bfac      	ite	ge
 800ff00:	eb03 0902 	addge.w	r9, r3, r2
 800ff04:	1ad7      	sublt	r7, r2, r3
 800ff06:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ff08:	eba3 0801 	sub.w	r8, r3, r1
 800ff0c:	4490      	add	r8, r2
 800ff0e:	4ba1      	ldr	r3, [pc, #644]	; (8010194 <_strtod_l+0x95c>)
 800ff10:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800ff14:	4598      	cmp	r8, r3
 800ff16:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ff1a:	f280 80c7 	bge.w	80100ac <_strtod_l+0x874>
 800ff1e:	eba3 0308 	sub.w	r3, r3, r8
 800ff22:	2b1f      	cmp	r3, #31
 800ff24:	eba2 0203 	sub.w	r2, r2, r3
 800ff28:	f04f 0101 	mov.w	r1, #1
 800ff2c:	f300 80b1 	bgt.w	8010092 <_strtod_l+0x85a>
 800ff30:	fa01 f303 	lsl.w	r3, r1, r3
 800ff34:	930d      	str	r3, [sp, #52]	; 0x34
 800ff36:	2300      	movs	r3, #0
 800ff38:	9308      	str	r3, [sp, #32]
 800ff3a:	eb09 0802 	add.w	r8, r9, r2
 800ff3e:	9b04      	ldr	r3, [sp, #16]
 800ff40:	45c1      	cmp	r9, r8
 800ff42:	4417      	add	r7, r2
 800ff44:	441f      	add	r7, r3
 800ff46:	464b      	mov	r3, r9
 800ff48:	bfa8      	it	ge
 800ff4a:	4643      	movge	r3, r8
 800ff4c:	42bb      	cmp	r3, r7
 800ff4e:	bfa8      	it	ge
 800ff50:	463b      	movge	r3, r7
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	bfc2      	ittt	gt
 800ff56:	eba8 0803 	subgt.w	r8, r8, r3
 800ff5a:	1aff      	subgt	r7, r7, r3
 800ff5c:	eba9 0903 	subgt.w	r9, r9, r3
 800ff60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	dd17      	ble.n	800ff96 <_strtod_l+0x75e>
 800ff66:	4631      	mov	r1, r6
 800ff68:	461a      	mov	r2, r3
 800ff6a:	4620      	mov	r0, r4
 800ff6c:	f001 ff4e 	bl	8011e0c <__pow5mult>
 800ff70:	4606      	mov	r6, r0
 800ff72:	2800      	cmp	r0, #0
 800ff74:	f43f aea8 	beq.w	800fcc8 <_strtod_l+0x490>
 800ff78:	4601      	mov	r1, r0
 800ff7a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ff7c:	4620      	mov	r0, r4
 800ff7e:	f001 fe9b 	bl	8011cb8 <__multiply>
 800ff82:	900b      	str	r0, [sp, #44]	; 0x2c
 800ff84:	2800      	cmp	r0, #0
 800ff86:	f43f ae9f 	beq.w	800fcc8 <_strtod_l+0x490>
 800ff8a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ff8c:	4620      	mov	r0, r4
 800ff8e:	f001 fd7b 	bl	8011a88 <_Bfree>
 800ff92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff94:	9318      	str	r3, [sp, #96]	; 0x60
 800ff96:	f1b8 0f00 	cmp.w	r8, #0
 800ff9a:	f300 808c 	bgt.w	80100b6 <_strtod_l+0x87e>
 800ff9e:	9b06      	ldr	r3, [sp, #24]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	dd08      	ble.n	800ffb6 <_strtod_l+0x77e>
 800ffa4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ffa6:	9905      	ldr	r1, [sp, #20]
 800ffa8:	4620      	mov	r0, r4
 800ffaa:	f001 ff2f 	bl	8011e0c <__pow5mult>
 800ffae:	9005      	str	r0, [sp, #20]
 800ffb0:	2800      	cmp	r0, #0
 800ffb2:	f43f ae89 	beq.w	800fcc8 <_strtod_l+0x490>
 800ffb6:	2f00      	cmp	r7, #0
 800ffb8:	dd08      	ble.n	800ffcc <_strtod_l+0x794>
 800ffba:	9905      	ldr	r1, [sp, #20]
 800ffbc:	463a      	mov	r2, r7
 800ffbe:	4620      	mov	r0, r4
 800ffc0:	f001 ff7e 	bl	8011ec0 <__lshift>
 800ffc4:	9005      	str	r0, [sp, #20]
 800ffc6:	2800      	cmp	r0, #0
 800ffc8:	f43f ae7e 	beq.w	800fcc8 <_strtod_l+0x490>
 800ffcc:	f1b9 0f00 	cmp.w	r9, #0
 800ffd0:	dd08      	ble.n	800ffe4 <_strtod_l+0x7ac>
 800ffd2:	4631      	mov	r1, r6
 800ffd4:	464a      	mov	r2, r9
 800ffd6:	4620      	mov	r0, r4
 800ffd8:	f001 ff72 	bl	8011ec0 <__lshift>
 800ffdc:	4606      	mov	r6, r0
 800ffde:	2800      	cmp	r0, #0
 800ffe0:	f43f ae72 	beq.w	800fcc8 <_strtod_l+0x490>
 800ffe4:	9a05      	ldr	r2, [sp, #20]
 800ffe6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ffe8:	4620      	mov	r0, r4
 800ffea:	f001 fff5 	bl	8011fd8 <__mdiff>
 800ffee:	4605      	mov	r5, r0
 800fff0:	2800      	cmp	r0, #0
 800fff2:	f43f ae69 	beq.w	800fcc8 <_strtod_l+0x490>
 800fff6:	68c3      	ldr	r3, [r0, #12]
 800fff8:	930b      	str	r3, [sp, #44]	; 0x2c
 800fffa:	2300      	movs	r3, #0
 800fffc:	60c3      	str	r3, [r0, #12]
 800fffe:	4631      	mov	r1, r6
 8010000:	f001 ffce 	bl	8011fa0 <__mcmp>
 8010004:	2800      	cmp	r0, #0
 8010006:	da60      	bge.n	80100ca <_strtod_l+0x892>
 8010008:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801000a:	ea53 030a 	orrs.w	r3, r3, sl
 801000e:	f040 8082 	bne.w	8010116 <_strtod_l+0x8de>
 8010012:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010016:	2b00      	cmp	r3, #0
 8010018:	d17d      	bne.n	8010116 <_strtod_l+0x8de>
 801001a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801001e:	0d1b      	lsrs	r3, r3, #20
 8010020:	051b      	lsls	r3, r3, #20
 8010022:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010026:	d976      	bls.n	8010116 <_strtod_l+0x8de>
 8010028:	696b      	ldr	r3, [r5, #20]
 801002a:	b913      	cbnz	r3, 8010032 <_strtod_l+0x7fa>
 801002c:	692b      	ldr	r3, [r5, #16]
 801002e:	2b01      	cmp	r3, #1
 8010030:	dd71      	ble.n	8010116 <_strtod_l+0x8de>
 8010032:	4629      	mov	r1, r5
 8010034:	2201      	movs	r2, #1
 8010036:	4620      	mov	r0, r4
 8010038:	f001 ff42 	bl	8011ec0 <__lshift>
 801003c:	4631      	mov	r1, r6
 801003e:	4605      	mov	r5, r0
 8010040:	f001 ffae 	bl	8011fa0 <__mcmp>
 8010044:	2800      	cmp	r0, #0
 8010046:	dd66      	ble.n	8010116 <_strtod_l+0x8de>
 8010048:	9904      	ldr	r1, [sp, #16]
 801004a:	4a53      	ldr	r2, [pc, #332]	; (8010198 <_strtod_l+0x960>)
 801004c:	465b      	mov	r3, fp
 801004e:	2900      	cmp	r1, #0
 8010050:	f000 8081 	beq.w	8010156 <_strtod_l+0x91e>
 8010054:	ea02 010b 	and.w	r1, r2, fp
 8010058:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801005c:	dc7b      	bgt.n	8010156 <_strtod_l+0x91e>
 801005e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010062:	f77f aea9 	ble.w	800fdb8 <_strtod_l+0x580>
 8010066:	4b4d      	ldr	r3, [pc, #308]	; (801019c <_strtod_l+0x964>)
 8010068:	4650      	mov	r0, sl
 801006a:	4659      	mov	r1, fp
 801006c:	2200      	movs	r2, #0
 801006e:	f7f0 fac3 	bl	80005f8 <__aeabi_dmul>
 8010072:	460b      	mov	r3, r1
 8010074:	4303      	orrs	r3, r0
 8010076:	bf08      	it	eq
 8010078:	2322      	moveq	r3, #34	; 0x22
 801007a:	4682      	mov	sl, r0
 801007c:	468b      	mov	fp, r1
 801007e:	bf08      	it	eq
 8010080:	6023      	streq	r3, [r4, #0]
 8010082:	e62b      	b.n	800fcdc <_strtod_l+0x4a4>
 8010084:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010088:	fa02 f303 	lsl.w	r3, r2, r3
 801008c:	ea03 0a0a 	and.w	sl, r3, sl
 8010090:	e6e3      	b.n	800fe5a <_strtod_l+0x622>
 8010092:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8010096:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801009a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801009e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80100a2:	fa01 f308 	lsl.w	r3, r1, r8
 80100a6:	9308      	str	r3, [sp, #32]
 80100a8:	910d      	str	r1, [sp, #52]	; 0x34
 80100aa:	e746      	b.n	800ff3a <_strtod_l+0x702>
 80100ac:	2300      	movs	r3, #0
 80100ae:	9308      	str	r3, [sp, #32]
 80100b0:	2301      	movs	r3, #1
 80100b2:	930d      	str	r3, [sp, #52]	; 0x34
 80100b4:	e741      	b.n	800ff3a <_strtod_l+0x702>
 80100b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80100b8:	4642      	mov	r2, r8
 80100ba:	4620      	mov	r0, r4
 80100bc:	f001 ff00 	bl	8011ec0 <__lshift>
 80100c0:	9018      	str	r0, [sp, #96]	; 0x60
 80100c2:	2800      	cmp	r0, #0
 80100c4:	f47f af6b 	bne.w	800ff9e <_strtod_l+0x766>
 80100c8:	e5fe      	b.n	800fcc8 <_strtod_l+0x490>
 80100ca:	465f      	mov	r7, fp
 80100cc:	d16e      	bne.n	80101ac <_strtod_l+0x974>
 80100ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80100d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80100d4:	b342      	cbz	r2, 8010128 <_strtod_l+0x8f0>
 80100d6:	4a32      	ldr	r2, [pc, #200]	; (80101a0 <_strtod_l+0x968>)
 80100d8:	4293      	cmp	r3, r2
 80100da:	d128      	bne.n	801012e <_strtod_l+0x8f6>
 80100dc:	9b04      	ldr	r3, [sp, #16]
 80100de:	4651      	mov	r1, sl
 80100e0:	b1eb      	cbz	r3, 801011e <_strtod_l+0x8e6>
 80100e2:	4b2d      	ldr	r3, [pc, #180]	; (8010198 <_strtod_l+0x960>)
 80100e4:	403b      	ands	r3, r7
 80100e6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80100ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80100ee:	d819      	bhi.n	8010124 <_strtod_l+0x8ec>
 80100f0:	0d1b      	lsrs	r3, r3, #20
 80100f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80100f6:	fa02 f303 	lsl.w	r3, r2, r3
 80100fa:	4299      	cmp	r1, r3
 80100fc:	d117      	bne.n	801012e <_strtod_l+0x8f6>
 80100fe:	4b29      	ldr	r3, [pc, #164]	; (80101a4 <_strtod_l+0x96c>)
 8010100:	429f      	cmp	r7, r3
 8010102:	d102      	bne.n	801010a <_strtod_l+0x8d2>
 8010104:	3101      	adds	r1, #1
 8010106:	f43f addf 	beq.w	800fcc8 <_strtod_l+0x490>
 801010a:	4b23      	ldr	r3, [pc, #140]	; (8010198 <_strtod_l+0x960>)
 801010c:	403b      	ands	r3, r7
 801010e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8010112:	f04f 0a00 	mov.w	sl, #0
 8010116:	9b04      	ldr	r3, [sp, #16]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d1a4      	bne.n	8010066 <_strtod_l+0x82e>
 801011c:	e5de      	b.n	800fcdc <_strtod_l+0x4a4>
 801011e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010122:	e7ea      	b.n	80100fa <_strtod_l+0x8c2>
 8010124:	4613      	mov	r3, r2
 8010126:	e7e8      	b.n	80100fa <_strtod_l+0x8c2>
 8010128:	ea53 030a 	orrs.w	r3, r3, sl
 801012c:	d08c      	beq.n	8010048 <_strtod_l+0x810>
 801012e:	9b08      	ldr	r3, [sp, #32]
 8010130:	b1db      	cbz	r3, 801016a <_strtod_l+0x932>
 8010132:	423b      	tst	r3, r7
 8010134:	d0ef      	beq.n	8010116 <_strtod_l+0x8de>
 8010136:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010138:	9a04      	ldr	r2, [sp, #16]
 801013a:	4650      	mov	r0, sl
 801013c:	4659      	mov	r1, fp
 801013e:	b1c3      	cbz	r3, 8010172 <_strtod_l+0x93a>
 8010140:	f7ff fb5b 	bl	800f7fa <sulp>
 8010144:	4602      	mov	r2, r0
 8010146:	460b      	mov	r3, r1
 8010148:	ec51 0b18 	vmov	r0, r1, d8
 801014c:	f7f0 f89e 	bl	800028c <__adddf3>
 8010150:	4682      	mov	sl, r0
 8010152:	468b      	mov	fp, r1
 8010154:	e7df      	b.n	8010116 <_strtod_l+0x8de>
 8010156:	4013      	ands	r3, r2
 8010158:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801015c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010160:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010164:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8010168:	e7d5      	b.n	8010116 <_strtod_l+0x8de>
 801016a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801016c:	ea13 0f0a 	tst.w	r3, sl
 8010170:	e7e0      	b.n	8010134 <_strtod_l+0x8fc>
 8010172:	f7ff fb42 	bl	800f7fa <sulp>
 8010176:	4602      	mov	r2, r0
 8010178:	460b      	mov	r3, r1
 801017a:	ec51 0b18 	vmov	r0, r1, d8
 801017e:	f7f0 f883 	bl	8000288 <__aeabi_dsub>
 8010182:	2200      	movs	r2, #0
 8010184:	2300      	movs	r3, #0
 8010186:	4682      	mov	sl, r0
 8010188:	468b      	mov	fp, r1
 801018a:	f7f0 fc9d 	bl	8000ac8 <__aeabi_dcmpeq>
 801018e:	2800      	cmp	r0, #0
 8010190:	d0c1      	beq.n	8010116 <_strtod_l+0x8de>
 8010192:	e611      	b.n	800fdb8 <_strtod_l+0x580>
 8010194:	fffffc02 	.word	0xfffffc02
 8010198:	7ff00000 	.word	0x7ff00000
 801019c:	39500000 	.word	0x39500000
 80101a0:	000fffff 	.word	0x000fffff
 80101a4:	7fefffff 	.word	0x7fefffff
 80101a8:	080149b0 	.word	0x080149b0
 80101ac:	4631      	mov	r1, r6
 80101ae:	4628      	mov	r0, r5
 80101b0:	f002 f874 	bl	801229c <__ratio>
 80101b4:	ec59 8b10 	vmov	r8, r9, d0
 80101b8:	ee10 0a10 	vmov	r0, s0
 80101bc:	2200      	movs	r2, #0
 80101be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80101c2:	4649      	mov	r1, r9
 80101c4:	f7f0 fc94 	bl	8000af0 <__aeabi_dcmple>
 80101c8:	2800      	cmp	r0, #0
 80101ca:	d07a      	beq.n	80102c2 <_strtod_l+0xa8a>
 80101cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d04a      	beq.n	8010268 <_strtod_l+0xa30>
 80101d2:	4b95      	ldr	r3, [pc, #596]	; (8010428 <_strtod_l+0xbf0>)
 80101d4:	2200      	movs	r2, #0
 80101d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80101da:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8010428 <_strtod_l+0xbf0>
 80101de:	f04f 0800 	mov.w	r8, #0
 80101e2:	4b92      	ldr	r3, [pc, #584]	; (801042c <_strtod_l+0xbf4>)
 80101e4:	403b      	ands	r3, r7
 80101e6:	930d      	str	r3, [sp, #52]	; 0x34
 80101e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80101ea:	4b91      	ldr	r3, [pc, #580]	; (8010430 <_strtod_l+0xbf8>)
 80101ec:	429a      	cmp	r2, r3
 80101ee:	f040 80b0 	bne.w	8010352 <_strtod_l+0xb1a>
 80101f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80101f6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80101fa:	ec4b ab10 	vmov	d0, sl, fp
 80101fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010202:	f001 ff73 	bl	80120ec <__ulp>
 8010206:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801020a:	ec53 2b10 	vmov	r2, r3, d0
 801020e:	f7f0 f9f3 	bl	80005f8 <__aeabi_dmul>
 8010212:	4652      	mov	r2, sl
 8010214:	465b      	mov	r3, fp
 8010216:	f7f0 f839 	bl	800028c <__adddf3>
 801021a:	460b      	mov	r3, r1
 801021c:	4983      	ldr	r1, [pc, #524]	; (801042c <_strtod_l+0xbf4>)
 801021e:	4a85      	ldr	r2, [pc, #532]	; (8010434 <_strtod_l+0xbfc>)
 8010220:	4019      	ands	r1, r3
 8010222:	4291      	cmp	r1, r2
 8010224:	4682      	mov	sl, r0
 8010226:	d960      	bls.n	80102ea <_strtod_l+0xab2>
 8010228:	ee18 3a90 	vmov	r3, s17
 801022c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8010230:	4293      	cmp	r3, r2
 8010232:	d104      	bne.n	801023e <_strtod_l+0xa06>
 8010234:	ee18 3a10 	vmov	r3, s16
 8010238:	3301      	adds	r3, #1
 801023a:	f43f ad45 	beq.w	800fcc8 <_strtod_l+0x490>
 801023e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8010440 <_strtod_l+0xc08>
 8010242:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8010246:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010248:	4620      	mov	r0, r4
 801024a:	f001 fc1d 	bl	8011a88 <_Bfree>
 801024e:	9905      	ldr	r1, [sp, #20]
 8010250:	4620      	mov	r0, r4
 8010252:	f001 fc19 	bl	8011a88 <_Bfree>
 8010256:	4631      	mov	r1, r6
 8010258:	4620      	mov	r0, r4
 801025a:	f001 fc15 	bl	8011a88 <_Bfree>
 801025e:	4629      	mov	r1, r5
 8010260:	4620      	mov	r0, r4
 8010262:	f001 fc11 	bl	8011a88 <_Bfree>
 8010266:	e61a      	b.n	800fe9e <_strtod_l+0x666>
 8010268:	f1ba 0f00 	cmp.w	sl, #0
 801026c:	d11b      	bne.n	80102a6 <_strtod_l+0xa6e>
 801026e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010272:	b9f3      	cbnz	r3, 80102b2 <_strtod_l+0xa7a>
 8010274:	4b6c      	ldr	r3, [pc, #432]	; (8010428 <_strtod_l+0xbf0>)
 8010276:	2200      	movs	r2, #0
 8010278:	4640      	mov	r0, r8
 801027a:	4649      	mov	r1, r9
 801027c:	f7f0 fc2e 	bl	8000adc <__aeabi_dcmplt>
 8010280:	b9d0      	cbnz	r0, 80102b8 <_strtod_l+0xa80>
 8010282:	4640      	mov	r0, r8
 8010284:	4649      	mov	r1, r9
 8010286:	4b6c      	ldr	r3, [pc, #432]	; (8010438 <_strtod_l+0xc00>)
 8010288:	2200      	movs	r2, #0
 801028a:	f7f0 f9b5 	bl	80005f8 <__aeabi_dmul>
 801028e:	4680      	mov	r8, r0
 8010290:	4689      	mov	r9, r1
 8010292:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010296:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801029a:	9315      	str	r3, [sp, #84]	; 0x54
 801029c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80102a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80102a4:	e79d      	b.n	80101e2 <_strtod_l+0x9aa>
 80102a6:	f1ba 0f01 	cmp.w	sl, #1
 80102aa:	d102      	bne.n	80102b2 <_strtod_l+0xa7a>
 80102ac:	2f00      	cmp	r7, #0
 80102ae:	f43f ad83 	beq.w	800fdb8 <_strtod_l+0x580>
 80102b2:	4b62      	ldr	r3, [pc, #392]	; (801043c <_strtod_l+0xc04>)
 80102b4:	2200      	movs	r2, #0
 80102b6:	e78e      	b.n	80101d6 <_strtod_l+0x99e>
 80102b8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8010438 <_strtod_l+0xc00>
 80102bc:	f04f 0800 	mov.w	r8, #0
 80102c0:	e7e7      	b.n	8010292 <_strtod_l+0xa5a>
 80102c2:	4b5d      	ldr	r3, [pc, #372]	; (8010438 <_strtod_l+0xc00>)
 80102c4:	4640      	mov	r0, r8
 80102c6:	4649      	mov	r1, r9
 80102c8:	2200      	movs	r2, #0
 80102ca:	f7f0 f995 	bl	80005f8 <__aeabi_dmul>
 80102ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80102d0:	4680      	mov	r8, r0
 80102d2:	4689      	mov	r9, r1
 80102d4:	b933      	cbnz	r3, 80102e4 <_strtod_l+0xaac>
 80102d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80102da:	900e      	str	r0, [sp, #56]	; 0x38
 80102dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80102de:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80102e2:	e7dd      	b.n	80102a0 <_strtod_l+0xa68>
 80102e4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80102e8:	e7f9      	b.n	80102de <_strtod_l+0xaa6>
 80102ea:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80102ee:	9b04      	ldr	r3, [sp, #16]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d1a8      	bne.n	8010246 <_strtod_l+0xa0e>
 80102f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80102f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80102fa:	0d1b      	lsrs	r3, r3, #20
 80102fc:	051b      	lsls	r3, r3, #20
 80102fe:	429a      	cmp	r2, r3
 8010300:	d1a1      	bne.n	8010246 <_strtod_l+0xa0e>
 8010302:	4640      	mov	r0, r8
 8010304:	4649      	mov	r1, r9
 8010306:	f7f0 fd27 	bl	8000d58 <__aeabi_d2lz>
 801030a:	f7f0 f947 	bl	800059c <__aeabi_l2d>
 801030e:	4602      	mov	r2, r0
 8010310:	460b      	mov	r3, r1
 8010312:	4640      	mov	r0, r8
 8010314:	4649      	mov	r1, r9
 8010316:	f7ef ffb7 	bl	8000288 <__aeabi_dsub>
 801031a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801031c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010320:	ea43 030a 	orr.w	r3, r3, sl
 8010324:	4313      	orrs	r3, r2
 8010326:	4680      	mov	r8, r0
 8010328:	4689      	mov	r9, r1
 801032a:	d055      	beq.n	80103d8 <_strtod_l+0xba0>
 801032c:	a336      	add	r3, pc, #216	; (adr r3, 8010408 <_strtod_l+0xbd0>)
 801032e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010332:	f7f0 fbd3 	bl	8000adc <__aeabi_dcmplt>
 8010336:	2800      	cmp	r0, #0
 8010338:	f47f acd0 	bne.w	800fcdc <_strtod_l+0x4a4>
 801033c:	a334      	add	r3, pc, #208	; (adr r3, 8010410 <_strtod_l+0xbd8>)
 801033e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010342:	4640      	mov	r0, r8
 8010344:	4649      	mov	r1, r9
 8010346:	f7f0 fbe7 	bl	8000b18 <__aeabi_dcmpgt>
 801034a:	2800      	cmp	r0, #0
 801034c:	f43f af7b 	beq.w	8010246 <_strtod_l+0xa0e>
 8010350:	e4c4      	b.n	800fcdc <_strtod_l+0x4a4>
 8010352:	9b04      	ldr	r3, [sp, #16]
 8010354:	b333      	cbz	r3, 80103a4 <_strtod_l+0xb6c>
 8010356:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010358:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801035c:	d822      	bhi.n	80103a4 <_strtod_l+0xb6c>
 801035e:	a32e      	add	r3, pc, #184	; (adr r3, 8010418 <_strtod_l+0xbe0>)
 8010360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010364:	4640      	mov	r0, r8
 8010366:	4649      	mov	r1, r9
 8010368:	f7f0 fbc2 	bl	8000af0 <__aeabi_dcmple>
 801036c:	b1a0      	cbz	r0, 8010398 <_strtod_l+0xb60>
 801036e:	4649      	mov	r1, r9
 8010370:	4640      	mov	r0, r8
 8010372:	f7f0 fc19 	bl	8000ba8 <__aeabi_d2uiz>
 8010376:	2801      	cmp	r0, #1
 8010378:	bf38      	it	cc
 801037a:	2001      	movcc	r0, #1
 801037c:	f7f0 f8c2 	bl	8000504 <__aeabi_ui2d>
 8010380:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010382:	4680      	mov	r8, r0
 8010384:	4689      	mov	r9, r1
 8010386:	bb23      	cbnz	r3, 80103d2 <_strtod_l+0xb9a>
 8010388:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801038c:	9010      	str	r0, [sp, #64]	; 0x40
 801038e:	9311      	str	r3, [sp, #68]	; 0x44
 8010390:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010394:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801039a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801039c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80103a0:	1a9b      	subs	r3, r3, r2
 80103a2:	9309      	str	r3, [sp, #36]	; 0x24
 80103a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80103a8:	eeb0 0a48 	vmov.f32	s0, s16
 80103ac:	eef0 0a68 	vmov.f32	s1, s17
 80103b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80103b4:	f001 fe9a 	bl	80120ec <__ulp>
 80103b8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80103bc:	ec53 2b10 	vmov	r2, r3, d0
 80103c0:	f7f0 f91a 	bl	80005f8 <__aeabi_dmul>
 80103c4:	ec53 2b18 	vmov	r2, r3, d8
 80103c8:	f7ef ff60 	bl	800028c <__adddf3>
 80103cc:	4682      	mov	sl, r0
 80103ce:	468b      	mov	fp, r1
 80103d0:	e78d      	b.n	80102ee <_strtod_l+0xab6>
 80103d2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80103d6:	e7db      	b.n	8010390 <_strtod_l+0xb58>
 80103d8:	a311      	add	r3, pc, #68	; (adr r3, 8010420 <_strtod_l+0xbe8>)
 80103da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103de:	f7f0 fb7d 	bl	8000adc <__aeabi_dcmplt>
 80103e2:	e7b2      	b.n	801034a <_strtod_l+0xb12>
 80103e4:	2300      	movs	r3, #0
 80103e6:	930a      	str	r3, [sp, #40]	; 0x28
 80103e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80103ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80103ec:	6013      	str	r3, [r2, #0]
 80103ee:	f7ff ba6b 	b.w	800f8c8 <_strtod_l+0x90>
 80103f2:	2a65      	cmp	r2, #101	; 0x65
 80103f4:	f43f ab5f 	beq.w	800fab6 <_strtod_l+0x27e>
 80103f8:	2a45      	cmp	r2, #69	; 0x45
 80103fa:	f43f ab5c 	beq.w	800fab6 <_strtod_l+0x27e>
 80103fe:	2301      	movs	r3, #1
 8010400:	f7ff bb94 	b.w	800fb2c <_strtod_l+0x2f4>
 8010404:	f3af 8000 	nop.w
 8010408:	94a03595 	.word	0x94a03595
 801040c:	3fdfffff 	.word	0x3fdfffff
 8010410:	35afe535 	.word	0x35afe535
 8010414:	3fe00000 	.word	0x3fe00000
 8010418:	ffc00000 	.word	0xffc00000
 801041c:	41dfffff 	.word	0x41dfffff
 8010420:	94a03595 	.word	0x94a03595
 8010424:	3fcfffff 	.word	0x3fcfffff
 8010428:	3ff00000 	.word	0x3ff00000
 801042c:	7ff00000 	.word	0x7ff00000
 8010430:	7fe00000 	.word	0x7fe00000
 8010434:	7c9fffff 	.word	0x7c9fffff
 8010438:	3fe00000 	.word	0x3fe00000
 801043c:	bff00000 	.word	0xbff00000
 8010440:	7fefffff 	.word	0x7fefffff

08010444 <strtod>:
 8010444:	460a      	mov	r2, r1
 8010446:	4601      	mov	r1, r0
 8010448:	4802      	ldr	r0, [pc, #8]	; (8010454 <strtod+0x10>)
 801044a:	4b03      	ldr	r3, [pc, #12]	; (8010458 <strtod+0x14>)
 801044c:	6800      	ldr	r0, [r0, #0]
 801044e:	f7ff b9f3 	b.w	800f838 <_strtod_l>
 8010452:	bf00      	nop
 8010454:	2000023c 	.word	0x2000023c
 8010458:	200002a4 	.word	0x200002a4

0801045c <_strtol_l.constprop.0>:
 801045c:	2b01      	cmp	r3, #1
 801045e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010462:	d001      	beq.n	8010468 <_strtol_l.constprop.0+0xc>
 8010464:	2b24      	cmp	r3, #36	; 0x24
 8010466:	d906      	bls.n	8010476 <_strtol_l.constprop.0+0x1a>
 8010468:	f7fe fb04 	bl	800ea74 <__errno>
 801046c:	2316      	movs	r3, #22
 801046e:	6003      	str	r3, [r0, #0]
 8010470:	2000      	movs	r0, #0
 8010472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010476:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801055c <_strtol_l.constprop.0+0x100>
 801047a:	460d      	mov	r5, r1
 801047c:	462e      	mov	r6, r5
 801047e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010482:	f814 700c 	ldrb.w	r7, [r4, ip]
 8010486:	f017 0708 	ands.w	r7, r7, #8
 801048a:	d1f7      	bne.n	801047c <_strtol_l.constprop.0+0x20>
 801048c:	2c2d      	cmp	r4, #45	; 0x2d
 801048e:	d132      	bne.n	80104f6 <_strtol_l.constprop.0+0x9a>
 8010490:	782c      	ldrb	r4, [r5, #0]
 8010492:	2701      	movs	r7, #1
 8010494:	1cb5      	adds	r5, r6, #2
 8010496:	2b00      	cmp	r3, #0
 8010498:	d05b      	beq.n	8010552 <_strtol_l.constprop.0+0xf6>
 801049a:	2b10      	cmp	r3, #16
 801049c:	d109      	bne.n	80104b2 <_strtol_l.constprop.0+0x56>
 801049e:	2c30      	cmp	r4, #48	; 0x30
 80104a0:	d107      	bne.n	80104b2 <_strtol_l.constprop.0+0x56>
 80104a2:	782c      	ldrb	r4, [r5, #0]
 80104a4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80104a8:	2c58      	cmp	r4, #88	; 0x58
 80104aa:	d14d      	bne.n	8010548 <_strtol_l.constprop.0+0xec>
 80104ac:	786c      	ldrb	r4, [r5, #1]
 80104ae:	2310      	movs	r3, #16
 80104b0:	3502      	adds	r5, #2
 80104b2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80104b6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80104ba:	f04f 0c00 	mov.w	ip, #0
 80104be:	fbb8 f9f3 	udiv	r9, r8, r3
 80104c2:	4666      	mov	r6, ip
 80104c4:	fb03 8a19 	mls	sl, r3, r9, r8
 80104c8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80104cc:	f1be 0f09 	cmp.w	lr, #9
 80104d0:	d816      	bhi.n	8010500 <_strtol_l.constprop.0+0xa4>
 80104d2:	4674      	mov	r4, lr
 80104d4:	42a3      	cmp	r3, r4
 80104d6:	dd24      	ble.n	8010522 <_strtol_l.constprop.0+0xc6>
 80104d8:	f1bc 0f00 	cmp.w	ip, #0
 80104dc:	db1e      	blt.n	801051c <_strtol_l.constprop.0+0xc0>
 80104de:	45b1      	cmp	r9, r6
 80104e0:	d31c      	bcc.n	801051c <_strtol_l.constprop.0+0xc0>
 80104e2:	d101      	bne.n	80104e8 <_strtol_l.constprop.0+0x8c>
 80104e4:	45a2      	cmp	sl, r4
 80104e6:	db19      	blt.n	801051c <_strtol_l.constprop.0+0xc0>
 80104e8:	fb06 4603 	mla	r6, r6, r3, r4
 80104ec:	f04f 0c01 	mov.w	ip, #1
 80104f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80104f4:	e7e8      	b.n	80104c8 <_strtol_l.constprop.0+0x6c>
 80104f6:	2c2b      	cmp	r4, #43	; 0x2b
 80104f8:	bf04      	itt	eq
 80104fa:	782c      	ldrbeq	r4, [r5, #0]
 80104fc:	1cb5      	addeq	r5, r6, #2
 80104fe:	e7ca      	b.n	8010496 <_strtol_l.constprop.0+0x3a>
 8010500:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8010504:	f1be 0f19 	cmp.w	lr, #25
 8010508:	d801      	bhi.n	801050e <_strtol_l.constprop.0+0xb2>
 801050a:	3c37      	subs	r4, #55	; 0x37
 801050c:	e7e2      	b.n	80104d4 <_strtol_l.constprop.0+0x78>
 801050e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8010512:	f1be 0f19 	cmp.w	lr, #25
 8010516:	d804      	bhi.n	8010522 <_strtol_l.constprop.0+0xc6>
 8010518:	3c57      	subs	r4, #87	; 0x57
 801051a:	e7db      	b.n	80104d4 <_strtol_l.constprop.0+0x78>
 801051c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8010520:	e7e6      	b.n	80104f0 <_strtol_l.constprop.0+0x94>
 8010522:	f1bc 0f00 	cmp.w	ip, #0
 8010526:	da05      	bge.n	8010534 <_strtol_l.constprop.0+0xd8>
 8010528:	2322      	movs	r3, #34	; 0x22
 801052a:	6003      	str	r3, [r0, #0]
 801052c:	4646      	mov	r6, r8
 801052e:	b942      	cbnz	r2, 8010542 <_strtol_l.constprop.0+0xe6>
 8010530:	4630      	mov	r0, r6
 8010532:	e79e      	b.n	8010472 <_strtol_l.constprop.0+0x16>
 8010534:	b107      	cbz	r7, 8010538 <_strtol_l.constprop.0+0xdc>
 8010536:	4276      	negs	r6, r6
 8010538:	2a00      	cmp	r2, #0
 801053a:	d0f9      	beq.n	8010530 <_strtol_l.constprop.0+0xd4>
 801053c:	f1bc 0f00 	cmp.w	ip, #0
 8010540:	d000      	beq.n	8010544 <_strtol_l.constprop.0+0xe8>
 8010542:	1e69      	subs	r1, r5, #1
 8010544:	6011      	str	r1, [r2, #0]
 8010546:	e7f3      	b.n	8010530 <_strtol_l.constprop.0+0xd4>
 8010548:	2430      	movs	r4, #48	; 0x30
 801054a:	2b00      	cmp	r3, #0
 801054c:	d1b1      	bne.n	80104b2 <_strtol_l.constprop.0+0x56>
 801054e:	2308      	movs	r3, #8
 8010550:	e7af      	b.n	80104b2 <_strtol_l.constprop.0+0x56>
 8010552:	2c30      	cmp	r4, #48	; 0x30
 8010554:	d0a5      	beq.n	80104a2 <_strtol_l.constprop.0+0x46>
 8010556:	230a      	movs	r3, #10
 8010558:	e7ab      	b.n	80104b2 <_strtol_l.constprop.0+0x56>
 801055a:	bf00      	nop
 801055c:	0801484d 	.word	0x0801484d

08010560 <strtol>:
 8010560:	4613      	mov	r3, r2
 8010562:	460a      	mov	r2, r1
 8010564:	4601      	mov	r1, r0
 8010566:	4802      	ldr	r0, [pc, #8]	; (8010570 <strtol+0x10>)
 8010568:	6800      	ldr	r0, [r0, #0]
 801056a:	f7ff bf77 	b.w	801045c <_strtol_l.constprop.0>
 801056e:	bf00      	nop
 8010570:	2000023c 	.word	0x2000023c

08010574 <_vsniprintf_r>:
 8010574:	b530      	push	{r4, r5, lr}
 8010576:	4614      	mov	r4, r2
 8010578:	2c00      	cmp	r4, #0
 801057a:	b09b      	sub	sp, #108	; 0x6c
 801057c:	4605      	mov	r5, r0
 801057e:	461a      	mov	r2, r3
 8010580:	da05      	bge.n	801058e <_vsniprintf_r+0x1a>
 8010582:	238b      	movs	r3, #139	; 0x8b
 8010584:	6003      	str	r3, [r0, #0]
 8010586:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801058a:	b01b      	add	sp, #108	; 0x6c
 801058c:	bd30      	pop	{r4, r5, pc}
 801058e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010592:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010596:	bf14      	ite	ne
 8010598:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801059c:	4623      	moveq	r3, r4
 801059e:	9302      	str	r3, [sp, #8]
 80105a0:	9305      	str	r3, [sp, #20]
 80105a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80105a6:	9100      	str	r1, [sp, #0]
 80105a8:	9104      	str	r1, [sp, #16]
 80105aa:	f8ad 300e 	strh.w	r3, [sp, #14]
 80105ae:	4669      	mov	r1, sp
 80105b0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80105b2:	f001 ff45 	bl	8012440 <_svfiprintf_r>
 80105b6:	1c43      	adds	r3, r0, #1
 80105b8:	bfbc      	itt	lt
 80105ba:	238b      	movlt	r3, #139	; 0x8b
 80105bc:	602b      	strlt	r3, [r5, #0]
 80105be:	2c00      	cmp	r4, #0
 80105c0:	d0e3      	beq.n	801058a <_vsniprintf_r+0x16>
 80105c2:	9b00      	ldr	r3, [sp, #0]
 80105c4:	2200      	movs	r2, #0
 80105c6:	701a      	strb	r2, [r3, #0]
 80105c8:	e7df      	b.n	801058a <_vsniprintf_r+0x16>
	...

080105cc <vsniprintf>:
 80105cc:	b507      	push	{r0, r1, r2, lr}
 80105ce:	9300      	str	r3, [sp, #0]
 80105d0:	4613      	mov	r3, r2
 80105d2:	460a      	mov	r2, r1
 80105d4:	4601      	mov	r1, r0
 80105d6:	4803      	ldr	r0, [pc, #12]	; (80105e4 <vsniprintf+0x18>)
 80105d8:	6800      	ldr	r0, [r0, #0]
 80105da:	f7ff ffcb 	bl	8010574 <_vsniprintf_r>
 80105de:	b003      	add	sp, #12
 80105e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80105e4:	2000023c 	.word	0x2000023c

080105e8 <quorem>:
 80105e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105ec:	6903      	ldr	r3, [r0, #16]
 80105ee:	690c      	ldr	r4, [r1, #16]
 80105f0:	42a3      	cmp	r3, r4
 80105f2:	4607      	mov	r7, r0
 80105f4:	f2c0 8081 	blt.w	80106fa <quorem+0x112>
 80105f8:	3c01      	subs	r4, #1
 80105fa:	f101 0814 	add.w	r8, r1, #20
 80105fe:	f100 0514 	add.w	r5, r0, #20
 8010602:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010606:	9301      	str	r3, [sp, #4]
 8010608:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801060c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010610:	3301      	adds	r3, #1
 8010612:	429a      	cmp	r2, r3
 8010614:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010618:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801061c:	fbb2 f6f3 	udiv	r6, r2, r3
 8010620:	d331      	bcc.n	8010686 <quorem+0x9e>
 8010622:	f04f 0e00 	mov.w	lr, #0
 8010626:	4640      	mov	r0, r8
 8010628:	46ac      	mov	ip, r5
 801062a:	46f2      	mov	sl, lr
 801062c:	f850 2b04 	ldr.w	r2, [r0], #4
 8010630:	b293      	uxth	r3, r2
 8010632:	fb06 e303 	mla	r3, r6, r3, lr
 8010636:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801063a:	b29b      	uxth	r3, r3
 801063c:	ebaa 0303 	sub.w	r3, sl, r3
 8010640:	f8dc a000 	ldr.w	sl, [ip]
 8010644:	0c12      	lsrs	r2, r2, #16
 8010646:	fa13 f38a 	uxtah	r3, r3, sl
 801064a:	fb06 e202 	mla	r2, r6, r2, lr
 801064e:	9300      	str	r3, [sp, #0]
 8010650:	9b00      	ldr	r3, [sp, #0]
 8010652:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010656:	b292      	uxth	r2, r2
 8010658:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801065c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010660:	f8bd 3000 	ldrh.w	r3, [sp]
 8010664:	4581      	cmp	r9, r0
 8010666:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801066a:	f84c 3b04 	str.w	r3, [ip], #4
 801066e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010672:	d2db      	bcs.n	801062c <quorem+0x44>
 8010674:	f855 300b 	ldr.w	r3, [r5, fp]
 8010678:	b92b      	cbnz	r3, 8010686 <quorem+0x9e>
 801067a:	9b01      	ldr	r3, [sp, #4]
 801067c:	3b04      	subs	r3, #4
 801067e:	429d      	cmp	r5, r3
 8010680:	461a      	mov	r2, r3
 8010682:	d32e      	bcc.n	80106e2 <quorem+0xfa>
 8010684:	613c      	str	r4, [r7, #16]
 8010686:	4638      	mov	r0, r7
 8010688:	f001 fc8a 	bl	8011fa0 <__mcmp>
 801068c:	2800      	cmp	r0, #0
 801068e:	db24      	blt.n	80106da <quorem+0xf2>
 8010690:	3601      	adds	r6, #1
 8010692:	4628      	mov	r0, r5
 8010694:	f04f 0c00 	mov.w	ip, #0
 8010698:	f858 2b04 	ldr.w	r2, [r8], #4
 801069c:	f8d0 e000 	ldr.w	lr, [r0]
 80106a0:	b293      	uxth	r3, r2
 80106a2:	ebac 0303 	sub.w	r3, ip, r3
 80106a6:	0c12      	lsrs	r2, r2, #16
 80106a8:	fa13 f38e 	uxtah	r3, r3, lr
 80106ac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80106b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80106b4:	b29b      	uxth	r3, r3
 80106b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80106ba:	45c1      	cmp	r9, r8
 80106bc:	f840 3b04 	str.w	r3, [r0], #4
 80106c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80106c4:	d2e8      	bcs.n	8010698 <quorem+0xb0>
 80106c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80106ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80106ce:	b922      	cbnz	r2, 80106da <quorem+0xf2>
 80106d0:	3b04      	subs	r3, #4
 80106d2:	429d      	cmp	r5, r3
 80106d4:	461a      	mov	r2, r3
 80106d6:	d30a      	bcc.n	80106ee <quorem+0x106>
 80106d8:	613c      	str	r4, [r7, #16]
 80106da:	4630      	mov	r0, r6
 80106dc:	b003      	add	sp, #12
 80106de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106e2:	6812      	ldr	r2, [r2, #0]
 80106e4:	3b04      	subs	r3, #4
 80106e6:	2a00      	cmp	r2, #0
 80106e8:	d1cc      	bne.n	8010684 <quorem+0x9c>
 80106ea:	3c01      	subs	r4, #1
 80106ec:	e7c7      	b.n	801067e <quorem+0x96>
 80106ee:	6812      	ldr	r2, [r2, #0]
 80106f0:	3b04      	subs	r3, #4
 80106f2:	2a00      	cmp	r2, #0
 80106f4:	d1f0      	bne.n	80106d8 <quorem+0xf0>
 80106f6:	3c01      	subs	r4, #1
 80106f8:	e7eb      	b.n	80106d2 <quorem+0xea>
 80106fa:	2000      	movs	r0, #0
 80106fc:	e7ee      	b.n	80106dc <quorem+0xf4>
	...

08010700 <_dtoa_r>:
 8010700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010704:	ed2d 8b04 	vpush	{d8-d9}
 8010708:	ec57 6b10 	vmov	r6, r7, d0
 801070c:	b093      	sub	sp, #76	; 0x4c
 801070e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010710:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010714:	9106      	str	r1, [sp, #24]
 8010716:	ee10 aa10 	vmov	sl, s0
 801071a:	4604      	mov	r4, r0
 801071c:	9209      	str	r2, [sp, #36]	; 0x24
 801071e:	930c      	str	r3, [sp, #48]	; 0x30
 8010720:	46bb      	mov	fp, r7
 8010722:	b975      	cbnz	r5, 8010742 <_dtoa_r+0x42>
 8010724:	2010      	movs	r0, #16
 8010726:	f7fe fa7b 	bl	800ec20 <malloc>
 801072a:	4602      	mov	r2, r0
 801072c:	6260      	str	r0, [r4, #36]	; 0x24
 801072e:	b920      	cbnz	r0, 801073a <_dtoa_r+0x3a>
 8010730:	4ba7      	ldr	r3, [pc, #668]	; (80109d0 <_dtoa_r+0x2d0>)
 8010732:	21ea      	movs	r1, #234	; 0xea
 8010734:	48a7      	ldr	r0, [pc, #668]	; (80109d4 <_dtoa_r+0x2d4>)
 8010736:	f001 ffed 	bl	8012714 <__assert_func>
 801073a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801073e:	6005      	str	r5, [r0, #0]
 8010740:	60c5      	str	r5, [r0, #12]
 8010742:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010744:	6819      	ldr	r1, [r3, #0]
 8010746:	b151      	cbz	r1, 801075e <_dtoa_r+0x5e>
 8010748:	685a      	ldr	r2, [r3, #4]
 801074a:	604a      	str	r2, [r1, #4]
 801074c:	2301      	movs	r3, #1
 801074e:	4093      	lsls	r3, r2
 8010750:	608b      	str	r3, [r1, #8]
 8010752:	4620      	mov	r0, r4
 8010754:	f001 f998 	bl	8011a88 <_Bfree>
 8010758:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801075a:	2200      	movs	r2, #0
 801075c:	601a      	str	r2, [r3, #0]
 801075e:	1e3b      	subs	r3, r7, #0
 8010760:	bfaa      	itet	ge
 8010762:	2300      	movge	r3, #0
 8010764:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010768:	f8c8 3000 	strge.w	r3, [r8]
 801076c:	4b9a      	ldr	r3, [pc, #616]	; (80109d8 <_dtoa_r+0x2d8>)
 801076e:	bfbc      	itt	lt
 8010770:	2201      	movlt	r2, #1
 8010772:	f8c8 2000 	strlt.w	r2, [r8]
 8010776:	ea33 030b 	bics.w	r3, r3, fp
 801077a:	d11b      	bne.n	80107b4 <_dtoa_r+0xb4>
 801077c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801077e:	f242 730f 	movw	r3, #9999	; 0x270f
 8010782:	6013      	str	r3, [r2, #0]
 8010784:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010788:	4333      	orrs	r3, r6
 801078a:	f000 8592 	beq.w	80112b2 <_dtoa_r+0xbb2>
 801078e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010790:	b963      	cbnz	r3, 80107ac <_dtoa_r+0xac>
 8010792:	4b92      	ldr	r3, [pc, #584]	; (80109dc <_dtoa_r+0x2dc>)
 8010794:	e022      	b.n	80107dc <_dtoa_r+0xdc>
 8010796:	4b92      	ldr	r3, [pc, #584]	; (80109e0 <_dtoa_r+0x2e0>)
 8010798:	9301      	str	r3, [sp, #4]
 801079a:	3308      	adds	r3, #8
 801079c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801079e:	6013      	str	r3, [r2, #0]
 80107a0:	9801      	ldr	r0, [sp, #4]
 80107a2:	b013      	add	sp, #76	; 0x4c
 80107a4:	ecbd 8b04 	vpop	{d8-d9}
 80107a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107ac:	4b8b      	ldr	r3, [pc, #556]	; (80109dc <_dtoa_r+0x2dc>)
 80107ae:	9301      	str	r3, [sp, #4]
 80107b0:	3303      	adds	r3, #3
 80107b2:	e7f3      	b.n	801079c <_dtoa_r+0x9c>
 80107b4:	2200      	movs	r2, #0
 80107b6:	2300      	movs	r3, #0
 80107b8:	4650      	mov	r0, sl
 80107ba:	4659      	mov	r1, fp
 80107bc:	f7f0 f984 	bl	8000ac8 <__aeabi_dcmpeq>
 80107c0:	ec4b ab19 	vmov	d9, sl, fp
 80107c4:	4680      	mov	r8, r0
 80107c6:	b158      	cbz	r0, 80107e0 <_dtoa_r+0xe0>
 80107c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80107ca:	2301      	movs	r3, #1
 80107cc:	6013      	str	r3, [r2, #0]
 80107ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	f000 856b 	beq.w	80112ac <_dtoa_r+0xbac>
 80107d6:	4883      	ldr	r0, [pc, #524]	; (80109e4 <_dtoa_r+0x2e4>)
 80107d8:	6018      	str	r0, [r3, #0]
 80107da:	1e43      	subs	r3, r0, #1
 80107dc:	9301      	str	r3, [sp, #4]
 80107de:	e7df      	b.n	80107a0 <_dtoa_r+0xa0>
 80107e0:	ec4b ab10 	vmov	d0, sl, fp
 80107e4:	aa10      	add	r2, sp, #64	; 0x40
 80107e6:	a911      	add	r1, sp, #68	; 0x44
 80107e8:	4620      	mov	r0, r4
 80107ea:	f001 fcfb 	bl	80121e4 <__d2b>
 80107ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80107f2:	ee08 0a10 	vmov	s16, r0
 80107f6:	2d00      	cmp	r5, #0
 80107f8:	f000 8084 	beq.w	8010904 <_dtoa_r+0x204>
 80107fc:	ee19 3a90 	vmov	r3, s19
 8010800:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010804:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010808:	4656      	mov	r6, sl
 801080a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801080e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010812:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8010816:	4b74      	ldr	r3, [pc, #464]	; (80109e8 <_dtoa_r+0x2e8>)
 8010818:	2200      	movs	r2, #0
 801081a:	4630      	mov	r0, r6
 801081c:	4639      	mov	r1, r7
 801081e:	f7ef fd33 	bl	8000288 <__aeabi_dsub>
 8010822:	a365      	add	r3, pc, #404	; (adr r3, 80109b8 <_dtoa_r+0x2b8>)
 8010824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010828:	f7ef fee6 	bl	80005f8 <__aeabi_dmul>
 801082c:	a364      	add	r3, pc, #400	; (adr r3, 80109c0 <_dtoa_r+0x2c0>)
 801082e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010832:	f7ef fd2b 	bl	800028c <__adddf3>
 8010836:	4606      	mov	r6, r0
 8010838:	4628      	mov	r0, r5
 801083a:	460f      	mov	r7, r1
 801083c:	f7ef fe72 	bl	8000524 <__aeabi_i2d>
 8010840:	a361      	add	r3, pc, #388	; (adr r3, 80109c8 <_dtoa_r+0x2c8>)
 8010842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010846:	f7ef fed7 	bl	80005f8 <__aeabi_dmul>
 801084a:	4602      	mov	r2, r0
 801084c:	460b      	mov	r3, r1
 801084e:	4630      	mov	r0, r6
 8010850:	4639      	mov	r1, r7
 8010852:	f7ef fd1b 	bl	800028c <__adddf3>
 8010856:	4606      	mov	r6, r0
 8010858:	460f      	mov	r7, r1
 801085a:	f7f0 f97d 	bl	8000b58 <__aeabi_d2iz>
 801085e:	2200      	movs	r2, #0
 8010860:	9000      	str	r0, [sp, #0]
 8010862:	2300      	movs	r3, #0
 8010864:	4630      	mov	r0, r6
 8010866:	4639      	mov	r1, r7
 8010868:	f7f0 f938 	bl	8000adc <__aeabi_dcmplt>
 801086c:	b150      	cbz	r0, 8010884 <_dtoa_r+0x184>
 801086e:	9800      	ldr	r0, [sp, #0]
 8010870:	f7ef fe58 	bl	8000524 <__aeabi_i2d>
 8010874:	4632      	mov	r2, r6
 8010876:	463b      	mov	r3, r7
 8010878:	f7f0 f926 	bl	8000ac8 <__aeabi_dcmpeq>
 801087c:	b910      	cbnz	r0, 8010884 <_dtoa_r+0x184>
 801087e:	9b00      	ldr	r3, [sp, #0]
 8010880:	3b01      	subs	r3, #1
 8010882:	9300      	str	r3, [sp, #0]
 8010884:	9b00      	ldr	r3, [sp, #0]
 8010886:	2b16      	cmp	r3, #22
 8010888:	d85a      	bhi.n	8010940 <_dtoa_r+0x240>
 801088a:	9a00      	ldr	r2, [sp, #0]
 801088c:	4b57      	ldr	r3, [pc, #348]	; (80109ec <_dtoa_r+0x2ec>)
 801088e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010896:	ec51 0b19 	vmov	r0, r1, d9
 801089a:	f7f0 f91f 	bl	8000adc <__aeabi_dcmplt>
 801089e:	2800      	cmp	r0, #0
 80108a0:	d050      	beq.n	8010944 <_dtoa_r+0x244>
 80108a2:	9b00      	ldr	r3, [sp, #0]
 80108a4:	3b01      	subs	r3, #1
 80108a6:	9300      	str	r3, [sp, #0]
 80108a8:	2300      	movs	r3, #0
 80108aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80108ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80108ae:	1b5d      	subs	r5, r3, r5
 80108b0:	1e6b      	subs	r3, r5, #1
 80108b2:	9305      	str	r3, [sp, #20]
 80108b4:	bf45      	ittet	mi
 80108b6:	f1c5 0301 	rsbmi	r3, r5, #1
 80108ba:	9304      	strmi	r3, [sp, #16]
 80108bc:	2300      	movpl	r3, #0
 80108be:	2300      	movmi	r3, #0
 80108c0:	bf4c      	ite	mi
 80108c2:	9305      	strmi	r3, [sp, #20]
 80108c4:	9304      	strpl	r3, [sp, #16]
 80108c6:	9b00      	ldr	r3, [sp, #0]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	db3d      	blt.n	8010948 <_dtoa_r+0x248>
 80108cc:	9b05      	ldr	r3, [sp, #20]
 80108ce:	9a00      	ldr	r2, [sp, #0]
 80108d0:	920a      	str	r2, [sp, #40]	; 0x28
 80108d2:	4413      	add	r3, r2
 80108d4:	9305      	str	r3, [sp, #20]
 80108d6:	2300      	movs	r3, #0
 80108d8:	9307      	str	r3, [sp, #28]
 80108da:	9b06      	ldr	r3, [sp, #24]
 80108dc:	2b09      	cmp	r3, #9
 80108de:	f200 8089 	bhi.w	80109f4 <_dtoa_r+0x2f4>
 80108e2:	2b05      	cmp	r3, #5
 80108e4:	bfc4      	itt	gt
 80108e6:	3b04      	subgt	r3, #4
 80108e8:	9306      	strgt	r3, [sp, #24]
 80108ea:	9b06      	ldr	r3, [sp, #24]
 80108ec:	f1a3 0302 	sub.w	r3, r3, #2
 80108f0:	bfcc      	ite	gt
 80108f2:	2500      	movgt	r5, #0
 80108f4:	2501      	movle	r5, #1
 80108f6:	2b03      	cmp	r3, #3
 80108f8:	f200 8087 	bhi.w	8010a0a <_dtoa_r+0x30a>
 80108fc:	e8df f003 	tbb	[pc, r3]
 8010900:	59383a2d 	.word	0x59383a2d
 8010904:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010908:	441d      	add	r5, r3
 801090a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801090e:	2b20      	cmp	r3, #32
 8010910:	bfc1      	itttt	gt
 8010912:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010916:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801091a:	fa0b f303 	lslgt.w	r3, fp, r3
 801091e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010922:	bfda      	itte	le
 8010924:	f1c3 0320 	rsble	r3, r3, #32
 8010928:	fa06 f003 	lslle.w	r0, r6, r3
 801092c:	4318      	orrgt	r0, r3
 801092e:	f7ef fde9 	bl	8000504 <__aeabi_ui2d>
 8010932:	2301      	movs	r3, #1
 8010934:	4606      	mov	r6, r0
 8010936:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801093a:	3d01      	subs	r5, #1
 801093c:	930e      	str	r3, [sp, #56]	; 0x38
 801093e:	e76a      	b.n	8010816 <_dtoa_r+0x116>
 8010940:	2301      	movs	r3, #1
 8010942:	e7b2      	b.n	80108aa <_dtoa_r+0x1aa>
 8010944:	900b      	str	r0, [sp, #44]	; 0x2c
 8010946:	e7b1      	b.n	80108ac <_dtoa_r+0x1ac>
 8010948:	9b04      	ldr	r3, [sp, #16]
 801094a:	9a00      	ldr	r2, [sp, #0]
 801094c:	1a9b      	subs	r3, r3, r2
 801094e:	9304      	str	r3, [sp, #16]
 8010950:	4253      	negs	r3, r2
 8010952:	9307      	str	r3, [sp, #28]
 8010954:	2300      	movs	r3, #0
 8010956:	930a      	str	r3, [sp, #40]	; 0x28
 8010958:	e7bf      	b.n	80108da <_dtoa_r+0x1da>
 801095a:	2300      	movs	r3, #0
 801095c:	9308      	str	r3, [sp, #32]
 801095e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010960:	2b00      	cmp	r3, #0
 8010962:	dc55      	bgt.n	8010a10 <_dtoa_r+0x310>
 8010964:	2301      	movs	r3, #1
 8010966:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801096a:	461a      	mov	r2, r3
 801096c:	9209      	str	r2, [sp, #36]	; 0x24
 801096e:	e00c      	b.n	801098a <_dtoa_r+0x28a>
 8010970:	2301      	movs	r3, #1
 8010972:	e7f3      	b.n	801095c <_dtoa_r+0x25c>
 8010974:	2300      	movs	r3, #0
 8010976:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010978:	9308      	str	r3, [sp, #32]
 801097a:	9b00      	ldr	r3, [sp, #0]
 801097c:	4413      	add	r3, r2
 801097e:	9302      	str	r3, [sp, #8]
 8010980:	3301      	adds	r3, #1
 8010982:	2b01      	cmp	r3, #1
 8010984:	9303      	str	r3, [sp, #12]
 8010986:	bfb8      	it	lt
 8010988:	2301      	movlt	r3, #1
 801098a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801098c:	2200      	movs	r2, #0
 801098e:	6042      	str	r2, [r0, #4]
 8010990:	2204      	movs	r2, #4
 8010992:	f102 0614 	add.w	r6, r2, #20
 8010996:	429e      	cmp	r6, r3
 8010998:	6841      	ldr	r1, [r0, #4]
 801099a:	d93d      	bls.n	8010a18 <_dtoa_r+0x318>
 801099c:	4620      	mov	r0, r4
 801099e:	f001 f833 	bl	8011a08 <_Balloc>
 80109a2:	9001      	str	r0, [sp, #4]
 80109a4:	2800      	cmp	r0, #0
 80109a6:	d13b      	bne.n	8010a20 <_dtoa_r+0x320>
 80109a8:	4b11      	ldr	r3, [pc, #68]	; (80109f0 <_dtoa_r+0x2f0>)
 80109aa:	4602      	mov	r2, r0
 80109ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80109b0:	e6c0      	b.n	8010734 <_dtoa_r+0x34>
 80109b2:	2301      	movs	r3, #1
 80109b4:	e7df      	b.n	8010976 <_dtoa_r+0x276>
 80109b6:	bf00      	nop
 80109b8:	636f4361 	.word	0x636f4361
 80109bc:	3fd287a7 	.word	0x3fd287a7
 80109c0:	8b60c8b3 	.word	0x8b60c8b3
 80109c4:	3fc68a28 	.word	0x3fc68a28
 80109c8:	509f79fb 	.word	0x509f79fb
 80109cc:	3fd34413 	.word	0x3fd34413
 80109d0:	080149e5 	.word	0x080149e5
 80109d4:	080149fc 	.word	0x080149fc
 80109d8:	7ff00000 	.word	0x7ff00000
 80109dc:	080149e1 	.word	0x080149e1
 80109e0:	080149d8 	.word	0x080149d8
 80109e4:	08014965 	.word	0x08014965
 80109e8:	3ff80000 	.word	0x3ff80000
 80109ec:	08014b68 	.word	0x08014b68
 80109f0:	08014a57 	.word	0x08014a57
 80109f4:	2501      	movs	r5, #1
 80109f6:	2300      	movs	r3, #0
 80109f8:	9306      	str	r3, [sp, #24]
 80109fa:	9508      	str	r5, [sp, #32]
 80109fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010a00:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010a04:	2200      	movs	r2, #0
 8010a06:	2312      	movs	r3, #18
 8010a08:	e7b0      	b.n	801096c <_dtoa_r+0x26c>
 8010a0a:	2301      	movs	r3, #1
 8010a0c:	9308      	str	r3, [sp, #32]
 8010a0e:	e7f5      	b.n	80109fc <_dtoa_r+0x2fc>
 8010a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a12:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010a16:	e7b8      	b.n	801098a <_dtoa_r+0x28a>
 8010a18:	3101      	adds	r1, #1
 8010a1a:	6041      	str	r1, [r0, #4]
 8010a1c:	0052      	lsls	r2, r2, #1
 8010a1e:	e7b8      	b.n	8010992 <_dtoa_r+0x292>
 8010a20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010a22:	9a01      	ldr	r2, [sp, #4]
 8010a24:	601a      	str	r2, [r3, #0]
 8010a26:	9b03      	ldr	r3, [sp, #12]
 8010a28:	2b0e      	cmp	r3, #14
 8010a2a:	f200 809d 	bhi.w	8010b68 <_dtoa_r+0x468>
 8010a2e:	2d00      	cmp	r5, #0
 8010a30:	f000 809a 	beq.w	8010b68 <_dtoa_r+0x468>
 8010a34:	9b00      	ldr	r3, [sp, #0]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	dd32      	ble.n	8010aa0 <_dtoa_r+0x3a0>
 8010a3a:	4ab7      	ldr	r2, [pc, #732]	; (8010d18 <_dtoa_r+0x618>)
 8010a3c:	f003 030f 	and.w	r3, r3, #15
 8010a40:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010a44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010a48:	9b00      	ldr	r3, [sp, #0]
 8010a4a:	05d8      	lsls	r0, r3, #23
 8010a4c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010a50:	d516      	bpl.n	8010a80 <_dtoa_r+0x380>
 8010a52:	4bb2      	ldr	r3, [pc, #712]	; (8010d1c <_dtoa_r+0x61c>)
 8010a54:	ec51 0b19 	vmov	r0, r1, d9
 8010a58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010a5c:	f7ef fef6 	bl	800084c <__aeabi_ddiv>
 8010a60:	f007 070f 	and.w	r7, r7, #15
 8010a64:	4682      	mov	sl, r0
 8010a66:	468b      	mov	fp, r1
 8010a68:	2503      	movs	r5, #3
 8010a6a:	4eac      	ldr	r6, [pc, #688]	; (8010d1c <_dtoa_r+0x61c>)
 8010a6c:	b957      	cbnz	r7, 8010a84 <_dtoa_r+0x384>
 8010a6e:	4642      	mov	r2, r8
 8010a70:	464b      	mov	r3, r9
 8010a72:	4650      	mov	r0, sl
 8010a74:	4659      	mov	r1, fp
 8010a76:	f7ef fee9 	bl	800084c <__aeabi_ddiv>
 8010a7a:	4682      	mov	sl, r0
 8010a7c:	468b      	mov	fp, r1
 8010a7e:	e028      	b.n	8010ad2 <_dtoa_r+0x3d2>
 8010a80:	2502      	movs	r5, #2
 8010a82:	e7f2      	b.n	8010a6a <_dtoa_r+0x36a>
 8010a84:	07f9      	lsls	r1, r7, #31
 8010a86:	d508      	bpl.n	8010a9a <_dtoa_r+0x39a>
 8010a88:	4640      	mov	r0, r8
 8010a8a:	4649      	mov	r1, r9
 8010a8c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010a90:	f7ef fdb2 	bl	80005f8 <__aeabi_dmul>
 8010a94:	3501      	adds	r5, #1
 8010a96:	4680      	mov	r8, r0
 8010a98:	4689      	mov	r9, r1
 8010a9a:	107f      	asrs	r7, r7, #1
 8010a9c:	3608      	adds	r6, #8
 8010a9e:	e7e5      	b.n	8010a6c <_dtoa_r+0x36c>
 8010aa0:	f000 809b 	beq.w	8010bda <_dtoa_r+0x4da>
 8010aa4:	9b00      	ldr	r3, [sp, #0]
 8010aa6:	4f9d      	ldr	r7, [pc, #628]	; (8010d1c <_dtoa_r+0x61c>)
 8010aa8:	425e      	negs	r6, r3
 8010aaa:	4b9b      	ldr	r3, [pc, #620]	; (8010d18 <_dtoa_r+0x618>)
 8010aac:	f006 020f 	and.w	r2, r6, #15
 8010ab0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ab8:	ec51 0b19 	vmov	r0, r1, d9
 8010abc:	f7ef fd9c 	bl	80005f8 <__aeabi_dmul>
 8010ac0:	1136      	asrs	r6, r6, #4
 8010ac2:	4682      	mov	sl, r0
 8010ac4:	468b      	mov	fp, r1
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	2502      	movs	r5, #2
 8010aca:	2e00      	cmp	r6, #0
 8010acc:	d17a      	bne.n	8010bc4 <_dtoa_r+0x4c4>
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d1d3      	bne.n	8010a7a <_dtoa_r+0x37a>
 8010ad2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	f000 8082 	beq.w	8010bde <_dtoa_r+0x4de>
 8010ada:	4b91      	ldr	r3, [pc, #580]	; (8010d20 <_dtoa_r+0x620>)
 8010adc:	2200      	movs	r2, #0
 8010ade:	4650      	mov	r0, sl
 8010ae0:	4659      	mov	r1, fp
 8010ae2:	f7ef fffb 	bl	8000adc <__aeabi_dcmplt>
 8010ae6:	2800      	cmp	r0, #0
 8010ae8:	d079      	beq.n	8010bde <_dtoa_r+0x4de>
 8010aea:	9b03      	ldr	r3, [sp, #12]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d076      	beq.n	8010bde <_dtoa_r+0x4de>
 8010af0:	9b02      	ldr	r3, [sp, #8]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	dd36      	ble.n	8010b64 <_dtoa_r+0x464>
 8010af6:	9b00      	ldr	r3, [sp, #0]
 8010af8:	4650      	mov	r0, sl
 8010afa:	4659      	mov	r1, fp
 8010afc:	1e5f      	subs	r7, r3, #1
 8010afe:	2200      	movs	r2, #0
 8010b00:	4b88      	ldr	r3, [pc, #544]	; (8010d24 <_dtoa_r+0x624>)
 8010b02:	f7ef fd79 	bl	80005f8 <__aeabi_dmul>
 8010b06:	9e02      	ldr	r6, [sp, #8]
 8010b08:	4682      	mov	sl, r0
 8010b0a:	468b      	mov	fp, r1
 8010b0c:	3501      	adds	r5, #1
 8010b0e:	4628      	mov	r0, r5
 8010b10:	f7ef fd08 	bl	8000524 <__aeabi_i2d>
 8010b14:	4652      	mov	r2, sl
 8010b16:	465b      	mov	r3, fp
 8010b18:	f7ef fd6e 	bl	80005f8 <__aeabi_dmul>
 8010b1c:	4b82      	ldr	r3, [pc, #520]	; (8010d28 <_dtoa_r+0x628>)
 8010b1e:	2200      	movs	r2, #0
 8010b20:	f7ef fbb4 	bl	800028c <__adddf3>
 8010b24:	46d0      	mov	r8, sl
 8010b26:	46d9      	mov	r9, fp
 8010b28:	4682      	mov	sl, r0
 8010b2a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010b2e:	2e00      	cmp	r6, #0
 8010b30:	d158      	bne.n	8010be4 <_dtoa_r+0x4e4>
 8010b32:	4b7e      	ldr	r3, [pc, #504]	; (8010d2c <_dtoa_r+0x62c>)
 8010b34:	2200      	movs	r2, #0
 8010b36:	4640      	mov	r0, r8
 8010b38:	4649      	mov	r1, r9
 8010b3a:	f7ef fba5 	bl	8000288 <__aeabi_dsub>
 8010b3e:	4652      	mov	r2, sl
 8010b40:	465b      	mov	r3, fp
 8010b42:	4680      	mov	r8, r0
 8010b44:	4689      	mov	r9, r1
 8010b46:	f7ef ffe7 	bl	8000b18 <__aeabi_dcmpgt>
 8010b4a:	2800      	cmp	r0, #0
 8010b4c:	f040 8295 	bne.w	801107a <_dtoa_r+0x97a>
 8010b50:	4652      	mov	r2, sl
 8010b52:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010b56:	4640      	mov	r0, r8
 8010b58:	4649      	mov	r1, r9
 8010b5a:	f7ef ffbf 	bl	8000adc <__aeabi_dcmplt>
 8010b5e:	2800      	cmp	r0, #0
 8010b60:	f040 8289 	bne.w	8011076 <_dtoa_r+0x976>
 8010b64:	ec5b ab19 	vmov	sl, fp, d9
 8010b68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	f2c0 8148 	blt.w	8010e00 <_dtoa_r+0x700>
 8010b70:	9a00      	ldr	r2, [sp, #0]
 8010b72:	2a0e      	cmp	r2, #14
 8010b74:	f300 8144 	bgt.w	8010e00 <_dtoa_r+0x700>
 8010b78:	4b67      	ldr	r3, [pc, #412]	; (8010d18 <_dtoa_r+0x618>)
 8010b7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010b7e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	f280 80d5 	bge.w	8010d34 <_dtoa_r+0x634>
 8010b8a:	9b03      	ldr	r3, [sp, #12]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	f300 80d1 	bgt.w	8010d34 <_dtoa_r+0x634>
 8010b92:	f040 826f 	bne.w	8011074 <_dtoa_r+0x974>
 8010b96:	4b65      	ldr	r3, [pc, #404]	; (8010d2c <_dtoa_r+0x62c>)
 8010b98:	2200      	movs	r2, #0
 8010b9a:	4640      	mov	r0, r8
 8010b9c:	4649      	mov	r1, r9
 8010b9e:	f7ef fd2b 	bl	80005f8 <__aeabi_dmul>
 8010ba2:	4652      	mov	r2, sl
 8010ba4:	465b      	mov	r3, fp
 8010ba6:	f7ef ffad 	bl	8000b04 <__aeabi_dcmpge>
 8010baa:	9e03      	ldr	r6, [sp, #12]
 8010bac:	4637      	mov	r7, r6
 8010bae:	2800      	cmp	r0, #0
 8010bb0:	f040 8245 	bne.w	801103e <_dtoa_r+0x93e>
 8010bb4:	9d01      	ldr	r5, [sp, #4]
 8010bb6:	2331      	movs	r3, #49	; 0x31
 8010bb8:	f805 3b01 	strb.w	r3, [r5], #1
 8010bbc:	9b00      	ldr	r3, [sp, #0]
 8010bbe:	3301      	adds	r3, #1
 8010bc0:	9300      	str	r3, [sp, #0]
 8010bc2:	e240      	b.n	8011046 <_dtoa_r+0x946>
 8010bc4:	07f2      	lsls	r2, r6, #31
 8010bc6:	d505      	bpl.n	8010bd4 <_dtoa_r+0x4d4>
 8010bc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010bcc:	f7ef fd14 	bl	80005f8 <__aeabi_dmul>
 8010bd0:	3501      	adds	r5, #1
 8010bd2:	2301      	movs	r3, #1
 8010bd4:	1076      	asrs	r6, r6, #1
 8010bd6:	3708      	adds	r7, #8
 8010bd8:	e777      	b.n	8010aca <_dtoa_r+0x3ca>
 8010bda:	2502      	movs	r5, #2
 8010bdc:	e779      	b.n	8010ad2 <_dtoa_r+0x3d2>
 8010bde:	9f00      	ldr	r7, [sp, #0]
 8010be0:	9e03      	ldr	r6, [sp, #12]
 8010be2:	e794      	b.n	8010b0e <_dtoa_r+0x40e>
 8010be4:	9901      	ldr	r1, [sp, #4]
 8010be6:	4b4c      	ldr	r3, [pc, #304]	; (8010d18 <_dtoa_r+0x618>)
 8010be8:	4431      	add	r1, r6
 8010bea:	910d      	str	r1, [sp, #52]	; 0x34
 8010bec:	9908      	ldr	r1, [sp, #32]
 8010bee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010bf2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010bf6:	2900      	cmp	r1, #0
 8010bf8:	d043      	beq.n	8010c82 <_dtoa_r+0x582>
 8010bfa:	494d      	ldr	r1, [pc, #308]	; (8010d30 <_dtoa_r+0x630>)
 8010bfc:	2000      	movs	r0, #0
 8010bfe:	f7ef fe25 	bl	800084c <__aeabi_ddiv>
 8010c02:	4652      	mov	r2, sl
 8010c04:	465b      	mov	r3, fp
 8010c06:	f7ef fb3f 	bl	8000288 <__aeabi_dsub>
 8010c0a:	9d01      	ldr	r5, [sp, #4]
 8010c0c:	4682      	mov	sl, r0
 8010c0e:	468b      	mov	fp, r1
 8010c10:	4649      	mov	r1, r9
 8010c12:	4640      	mov	r0, r8
 8010c14:	f7ef ffa0 	bl	8000b58 <__aeabi_d2iz>
 8010c18:	4606      	mov	r6, r0
 8010c1a:	f7ef fc83 	bl	8000524 <__aeabi_i2d>
 8010c1e:	4602      	mov	r2, r0
 8010c20:	460b      	mov	r3, r1
 8010c22:	4640      	mov	r0, r8
 8010c24:	4649      	mov	r1, r9
 8010c26:	f7ef fb2f 	bl	8000288 <__aeabi_dsub>
 8010c2a:	3630      	adds	r6, #48	; 0x30
 8010c2c:	f805 6b01 	strb.w	r6, [r5], #1
 8010c30:	4652      	mov	r2, sl
 8010c32:	465b      	mov	r3, fp
 8010c34:	4680      	mov	r8, r0
 8010c36:	4689      	mov	r9, r1
 8010c38:	f7ef ff50 	bl	8000adc <__aeabi_dcmplt>
 8010c3c:	2800      	cmp	r0, #0
 8010c3e:	d163      	bne.n	8010d08 <_dtoa_r+0x608>
 8010c40:	4642      	mov	r2, r8
 8010c42:	464b      	mov	r3, r9
 8010c44:	4936      	ldr	r1, [pc, #216]	; (8010d20 <_dtoa_r+0x620>)
 8010c46:	2000      	movs	r0, #0
 8010c48:	f7ef fb1e 	bl	8000288 <__aeabi_dsub>
 8010c4c:	4652      	mov	r2, sl
 8010c4e:	465b      	mov	r3, fp
 8010c50:	f7ef ff44 	bl	8000adc <__aeabi_dcmplt>
 8010c54:	2800      	cmp	r0, #0
 8010c56:	f040 80b5 	bne.w	8010dc4 <_dtoa_r+0x6c4>
 8010c5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010c5c:	429d      	cmp	r5, r3
 8010c5e:	d081      	beq.n	8010b64 <_dtoa_r+0x464>
 8010c60:	4b30      	ldr	r3, [pc, #192]	; (8010d24 <_dtoa_r+0x624>)
 8010c62:	2200      	movs	r2, #0
 8010c64:	4650      	mov	r0, sl
 8010c66:	4659      	mov	r1, fp
 8010c68:	f7ef fcc6 	bl	80005f8 <__aeabi_dmul>
 8010c6c:	4b2d      	ldr	r3, [pc, #180]	; (8010d24 <_dtoa_r+0x624>)
 8010c6e:	4682      	mov	sl, r0
 8010c70:	468b      	mov	fp, r1
 8010c72:	4640      	mov	r0, r8
 8010c74:	4649      	mov	r1, r9
 8010c76:	2200      	movs	r2, #0
 8010c78:	f7ef fcbe 	bl	80005f8 <__aeabi_dmul>
 8010c7c:	4680      	mov	r8, r0
 8010c7e:	4689      	mov	r9, r1
 8010c80:	e7c6      	b.n	8010c10 <_dtoa_r+0x510>
 8010c82:	4650      	mov	r0, sl
 8010c84:	4659      	mov	r1, fp
 8010c86:	f7ef fcb7 	bl	80005f8 <__aeabi_dmul>
 8010c8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010c8c:	9d01      	ldr	r5, [sp, #4]
 8010c8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010c90:	4682      	mov	sl, r0
 8010c92:	468b      	mov	fp, r1
 8010c94:	4649      	mov	r1, r9
 8010c96:	4640      	mov	r0, r8
 8010c98:	f7ef ff5e 	bl	8000b58 <__aeabi_d2iz>
 8010c9c:	4606      	mov	r6, r0
 8010c9e:	f7ef fc41 	bl	8000524 <__aeabi_i2d>
 8010ca2:	3630      	adds	r6, #48	; 0x30
 8010ca4:	4602      	mov	r2, r0
 8010ca6:	460b      	mov	r3, r1
 8010ca8:	4640      	mov	r0, r8
 8010caa:	4649      	mov	r1, r9
 8010cac:	f7ef faec 	bl	8000288 <__aeabi_dsub>
 8010cb0:	f805 6b01 	strb.w	r6, [r5], #1
 8010cb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010cb6:	429d      	cmp	r5, r3
 8010cb8:	4680      	mov	r8, r0
 8010cba:	4689      	mov	r9, r1
 8010cbc:	f04f 0200 	mov.w	r2, #0
 8010cc0:	d124      	bne.n	8010d0c <_dtoa_r+0x60c>
 8010cc2:	4b1b      	ldr	r3, [pc, #108]	; (8010d30 <_dtoa_r+0x630>)
 8010cc4:	4650      	mov	r0, sl
 8010cc6:	4659      	mov	r1, fp
 8010cc8:	f7ef fae0 	bl	800028c <__adddf3>
 8010ccc:	4602      	mov	r2, r0
 8010cce:	460b      	mov	r3, r1
 8010cd0:	4640      	mov	r0, r8
 8010cd2:	4649      	mov	r1, r9
 8010cd4:	f7ef ff20 	bl	8000b18 <__aeabi_dcmpgt>
 8010cd8:	2800      	cmp	r0, #0
 8010cda:	d173      	bne.n	8010dc4 <_dtoa_r+0x6c4>
 8010cdc:	4652      	mov	r2, sl
 8010cde:	465b      	mov	r3, fp
 8010ce0:	4913      	ldr	r1, [pc, #76]	; (8010d30 <_dtoa_r+0x630>)
 8010ce2:	2000      	movs	r0, #0
 8010ce4:	f7ef fad0 	bl	8000288 <__aeabi_dsub>
 8010ce8:	4602      	mov	r2, r0
 8010cea:	460b      	mov	r3, r1
 8010cec:	4640      	mov	r0, r8
 8010cee:	4649      	mov	r1, r9
 8010cf0:	f7ef fef4 	bl	8000adc <__aeabi_dcmplt>
 8010cf4:	2800      	cmp	r0, #0
 8010cf6:	f43f af35 	beq.w	8010b64 <_dtoa_r+0x464>
 8010cfa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010cfc:	1e6b      	subs	r3, r5, #1
 8010cfe:	930f      	str	r3, [sp, #60]	; 0x3c
 8010d00:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010d04:	2b30      	cmp	r3, #48	; 0x30
 8010d06:	d0f8      	beq.n	8010cfa <_dtoa_r+0x5fa>
 8010d08:	9700      	str	r7, [sp, #0]
 8010d0a:	e049      	b.n	8010da0 <_dtoa_r+0x6a0>
 8010d0c:	4b05      	ldr	r3, [pc, #20]	; (8010d24 <_dtoa_r+0x624>)
 8010d0e:	f7ef fc73 	bl	80005f8 <__aeabi_dmul>
 8010d12:	4680      	mov	r8, r0
 8010d14:	4689      	mov	r9, r1
 8010d16:	e7bd      	b.n	8010c94 <_dtoa_r+0x594>
 8010d18:	08014b68 	.word	0x08014b68
 8010d1c:	08014b40 	.word	0x08014b40
 8010d20:	3ff00000 	.word	0x3ff00000
 8010d24:	40240000 	.word	0x40240000
 8010d28:	401c0000 	.word	0x401c0000
 8010d2c:	40140000 	.word	0x40140000
 8010d30:	3fe00000 	.word	0x3fe00000
 8010d34:	9d01      	ldr	r5, [sp, #4]
 8010d36:	4656      	mov	r6, sl
 8010d38:	465f      	mov	r7, fp
 8010d3a:	4642      	mov	r2, r8
 8010d3c:	464b      	mov	r3, r9
 8010d3e:	4630      	mov	r0, r6
 8010d40:	4639      	mov	r1, r7
 8010d42:	f7ef fd83 	bl	800084c <__aeabi_ddiv>
 8010d46:	f7ef ff07 	bl	8000b58 <__aeabi_d2iz>
 8010d4a:	4682      	mov	sl, r0
 8010d4c:	f7ef fbea 	bl	8000524 <__aeabi_i2d>
 8010d50:	4642      	mov	r2, r8
 8010d52:	464b      	mov	r3, r9
 8010d54:	f7ef fc50 	bl	80005f8 <__aeabi_dmul>
 8010d58:	4602      	mov	r2, r0
 8010d5a:	460b      	mov	r3, r1
 8010d5c:	4630      	mov	r0, r6
 8010d5e:	4639      	mov	r1, r7
 8010d60:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8010d64:	f7ef fa90 	bl	8000288 <__aeabi_dsub>
 8010d68:	f805 6b01 	strb.w	r6, [r5], #1
 8010d6c:	9e01      	ldr	r6, [sp, #4]
 8010d6e:	9f03      	ldr	r7, [sp, #12]
 8010d70:	1bae      	subs	r6, r5, r6
 8010d72:	42b7      	cmp	r7, r6
 8010d74:	4602      	mov	r2, r0
 8010d76:	460b      	mov	r3, r1
 8010d78:	d135      	bne.n	8010de6 <_dtoa_r+0x6e6>
 8010d7a:	f7ef fa87 	bl	800028c <__adddf3>
 8010d7e:	4642      	mov	r2, r8
 8010d80:	464b      	mov	r3, r9
 8010d82:	4606      	mov	r6, r0
 8010d84:	460f      	mov	r7, r1
 8010d86:	f7ef fec7 	bl	8000b18 <__aeabi_dcmpgt>
 8010d8a:	b9d0      	cbnz	r0, 8010dc2 <_dtoa_r+0x6c2>
 8010d8c:	4642      	mov	r2, r8
 8010d8e:	464b      	mov	r3, r9
 8010d90:	4630      	mov	r0, r6
 8010d92:	4639      	mov	r1, r7
 8010d94:	f7ef fe98 	bl	8000ac8 <__aeabi_dcmpeq>
 8010d98:	b110      	cbz	r0, 8010da0 <_dtoa_r+0x6a0>
 8010d9a:	f01a 0f01 	tst.w	sl, #1
 8010d9e:	d110      	bne.n	8010dc2 <_dtoa_r+0x6c2>
 8010da0:	4620      	mov	r0, r4
 8010da2:	ee18 1a10 	vmov	r1, s16
 8010da6:	f000 fe6f 	bl	8011a88 <_Bfree>
 8010daa:	2300      	movs	r3, #0
 8010dac:	9800      	ldr	r0, [sp, #0]
 8010dae:	702b      	strb	r3, [r5, #0]
 8010db0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010db2:	3001      	adds	r0, #1
 8010db4:	6018      	str	r0, [r3, #0]
 8010db6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	f43f acf1 	beq.w	80107a0 <_dtoa_r+0xa0>
 8010dbe:	601d      	str	r5, [r3, #0]
 8010dc0:	e4ee      	b.n	80107a0 <_dtoa_r+0xa0>
 8010dc2:	9f00      	ldr	r7, [sp, #0]
 8010dc4:	462b      	mov	r3, r5
 8010dc6:	461d      	mov	r5, r3
 8010dc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010dcc:	2a39      	cmp	r2, #57	; 0x39
 8010dce:	d106      	bne.n	8010dde <_dtoa_r+0x6de>
 8010dd0:	9a01      	ldr	r2, [sp, #4]
 8010dd2:	429a      	cmp	r2, r3
 8010dd4:	d1f7      	bne.n	8010dc6 <_dtoa_r+0x6c6>
 8010dd6:	9901      	ldr	r1, [sp, #4]
 8010dd8:	2230      	movs	r2, #48	; 0x30
 8010dda:	3701      	adds	r7, #1
 8010ddc:	700a      	strb	r2, [r1, #0]
 8010dde:	781a      	ldrb	r2, [r3, #0]
 8010de0:	3201      	adds	r2, #1
 8010de2:	701a      	strb	r2, [r3, #0]
 8010de4:	e790      	b.n	8010d08 <_dtoa_r+0x608>
 8010de6:	4ba6      	ldr	r3, [pc, #664]	; (8011080 <_dtoa_r+0x980>)
 8010de8:	2200      	movs	r2, #0
 8010dea:	f7ef fc05 	bl	80005f8 <__aeabi_dmul>
 8010dee:	2200      	movs	r2, #0
 8010df0:	2300      	movs	r3, #0
 8010df2:	4606      	mov	r6, r0
 8010df4:	460f      	mov	r7, r1
 8010df6:	f7ef fe67 	bl	8000ac8 <__aeabi_dcmpeq>
 8010dfa:	2800      	cmp	r0, #0
 8010dfc:	d09d      	beq.n	8010d3a <_dtoa_r+0x63a>
 8010dfe:	e7cf      	b.n	8010da0 <_dtoa_r+0x6a0>
 8010e00:	9a08      	ldr	r2, [sp, #32]
 8010e02:	2a00      	cmp	r2, #0
 8010e04:	f000 80d7 	beq.w	8010fb6 <_dtoa_r+0x8b6>
 8010e08:	9a06      	ldr	r2, [sp, #24]
 8010e0a:	2a01      	cmp	r2, #1
 8010e0c:	f300 80ba 	bgt.w	8010f84 <_dtoa_r+0x884>
 8010e10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010e12:	2a00      	cmp	r2, #0
 8010e14:	f000 80b2 	beq.w	8010f7c <_dtoa_r+0x87c>
 8010e18:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010e1c:	9e07      	ldr	r6, [sp, #28]
 8010e1e:	9d04      	ldr	r5, [sp, #16]
 8010e20:	9a04      	ldr	r2, [sp, #16]
 8010e22:	441a      	add	r2, r3
 8010e24:	9204      	str	r2, [sp, #16]
 8010e26:	9a05      	ldr	r2, [sp, #20]
 8010e28:	2101      	movs	r1, #1
 8010e2a:	441a      	add	r2, r3
 8010e2c:	4620      	mov	r0, r4
 8010e2e:	9205      	str	r2, [sp, #20]
 8010e30:	f000 ff2c 	bl	8011c8c <__i2b>
 8010e34:	4607      	mov	r7, r0
 8010e36:	2d00      	cmp	r5, #0
 8010e38:	dd0c      	ble.n	8010e54 <_dtoa_r+0x754>
 8010e3a:	9b05      	ldr	r3, [sp, #20]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	dd09      	ble.n	8010e54 <_dtoa_r+0x754>
 8010e40:	42ab      	cmp	r3, r5
 8010e42:	9a04      	ldr	r2, [sp, #16]
 8010e44:	bfa8      	it	ge
 8010e46:	462b      	movge	r3, r5
 8010e48:	1ad2      	subs	r2, r2, r3
 8010e4a:	9204      	str	r2, [sp, #16]
 8010e4c:	9a05      	ldr	r2, [sp, #20]
 8010e4e:	1aed      	subs	r5, r5, r3
 8010e50:	1ad3      	subs	r3, r2, r3
 8010e52:	9305      	str	r3, [sp, #20]
 8010e54:	9b07      	ldr	r3, [sp, #28]
 8010e56:	b31b      	cbz	r3, 8010ea0 <_dtoa_r+0x7a0>
 8010e58:	9b08      	ldr	r3, [sp, #32]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	f000 80af 	beq.w	8010fbe <_dtoa_r+0x8be>
 8010e60:	2e00      	cmp	r6, #0
 8010e62:	dd13      	ble.n	8010e8c <_dtoa_r+0x78c>
 8010e64:	4639      	mov	r1, r7
 8010e66:	4632      	mov	r2, r6
 8010e68:	4620      	mov	r0, r4
 8010e6a:	f000 ffcf 	bl	8011e0c <__pow5mult>
 8010e6e:	ee18 2a10 	vmov	r2, s16
 8010e72:	4601      	mov	r1, r0
 8010e74:	4607      	mov	r7, r0
 8010e76:	4620      	mov	r0, r4
 8010e78:	f000 ff1e 	bl	8011cb8 <__multiply>
 8010e7c:	ee18 1a10 	vmov	r1, s16
 8010e80:	4680      	mov	r8, r0
 8010e82:	4620      	mov	r0, r4
 8010e84:	f000 fe00 	bl	8011a88 <_Bfree>
 8010e88:	ee08 8a10 	vmov	s16, r8
 8010e8c:	9b07      	ldr	r3, [sp, #28]
 8010e8e:	1b9a      	subs	r2, r3, r6
 8010e90:	d006      	beq.n	8010ea0 <_dtoa_r+0x7a0>
 8010e92:	ee18 1a10 	vmov	r1, s16
 8010e96:	4620      	mov	r0, r4
 8010e98:	f000 ffb8 	bl	8011e0c <__pow5mult>
 8010e9c:	ee08 0a10 	vmov	s16, r0
 8010ea0:	2101      	movs	r1, #1
 8010ea2:	4620      	mov	r0, r4
 8010ea4:	f000 fef2 	bl	8011c8c <__i2b>
 8010ea8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	4606      	mov	r6, r0
 8010eae:	f340 8088 	ble.w	8010fc2 <_dtoa_r+0x8c2>
 8010eb2:	461a      	mov	r2, r3
 8010eb4:	4601      	mov	r1, r0
 8010eb6:	4620      	mov	r0, r4
 8010eb8:	f000 ffa8 	bl	8011e0c <__pow5mult>
 8010ebc:	9b06      	ldr	r3, [sp, #24]
 8010ebe:	2b01      	cmp	r3, #1
 8010ec0:	4606      	mov	r6, r0
 8010ec2:	f340 8081 	ble.w	8010fc8 <_dtoa_r+0x8c8>
 8010ec6:	f04f 0800 	mov.w	r8, #0
 8010eca:	6933      	ldr	r3, [r6, #16]
 8010ecc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010ed0:	6918      	ldr	r0, [r3, #16]
 8010ed2:	f000 fe8b 	bl	8011bec <__hi0bits>
 8010ed6:	f1c0 0020 	rsb	r0, r0, #32
 8010eda:	9b05      	ldr	r3, [sp, #20]
 8010edc:	4418      	add	r0, r3
 8010ede:	f010 001f 	ands.w	r0, r0, #31
 8010ee2:	f000 8092 	beq.w	801100a <_dtoa_r+0x90a>
 8010ee6:	f1c0 0320 	rsb	r3, r0, #32
 8010eea:	2b04      	cmp	r3, #4
 8010eec:	f340 808a 	ble.w	8011004 <_dtoa_r+0x904>
 8010ef0:	f1c0 001c 	rsb	r0, r0, #28
 8010ef4:	9b04      	ldr	r3, [sp, #16]
 8010ef6:	4403      	add	r3, r0
 8010ef8:	9304      	str	r3, [sp, #16]
 8010efa:	9b05      	ldr	r3, [sp, #20]
 8010efc:	4403      	add	r3, r0
 8010efe:	4405      	add	r5, r0
 8010f00:	9305      	str	r3, [sp, #20]
 8010f02:	9b04      	ldr	r3, [sp, #16]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	dd07      	ble.n	8010f18 <_dtoa_r+0x818>
 8010f08:	ee18 1a10 	vmov	r1, s16
 8010f0c:	461a      	mov	r2, r3
 8010f0e:	4620      	mov	r0, r4
 8010f10:	f000 ffd6 	bl	8011ec0 <__lshift>
 8010f14:	ee08 0a10 	vmov	s16, r0
 8010f18:	9b05      	ldr	r3, [sp, #20]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	dd05      	ble.n	8010f2a <_dtoa_r+0x82a>
 8010f1e:	4631      	mov	r1, r6
 8010f20:	461a      	mov	r2, r3
 8010f22:	4620      	mov	r0, r4
 8010f24:	f000 ffcc 	bl	8011ec0 <__lshift>
 8010f28:	4606      	mov	r6, r0
 8010f2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d06e      	beq.n	801100e <_dtoa_r+0x90e>
 8010f30:	ee18 0a10 	vmov	r0, s16
 8010f34:	4631      	mov	r1, r6
 8010f36:	f001 f833 	bl	8011fa0 <__mcmp>
 8010f3a:	2800      	cmp	r0, #0
 8010f3c:	da67      	bge.n	801100e <_dtoa_r+0x90e>
 8010f3e:	9b00      	ldr	r3, [sp, #0]
 8010f40:	3b01      	subs	r3, #1
 8010f42:	ee18 1a10 	vmov	r1, s16
 8010f46:	9300      	str	r3, [sp, #0]
 8010f48:	220a      	movs	r2, #10
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	4620      	mov	r0, r4
 8010f4e:	f000 fdbd 	bl	8011acc <__multadd>
 8010f52:	9b08      	ldr	r3, [sp, #32]
 8010f54:	ee08 0a10 	vmov	s16, r0
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	f000 81b1 	beq.w	80112c0 <_dtoa_r+0xbc0>
 8010f5e:	2300      	movs	r3, #0
 8010f60:	4639      	mov	r1, r7
 8010f62:	220a      	movs	r2, #10
 8010f64:	4620      	mov	r0, r4
 8010f66:	f000 fdb1 	bl	8011acc <__multadd>
 8010f6a:	9b02      	ldr	r3, [sp, #8]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	4607      	mov	r7, r0
 8010f70:	f300 808e 	bgt.w	8011090 <_dtoa_r+0x990>
 8010f74:	9b06      	ldr	r3, [sp, #24]
 8010f76:	2b02      	cmp	r3, #2
 8010f78:	dc51      	bgt.n	801101e <_dtoa_r+0x91e>
 8010f7a:	e089      	b.n	8011090 <_dtoa_r+0x990>
 8010f7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010f7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010f82:	e74b      	b.n	8010e1c <_dtoa_r+0x71c>
 8010f84:	9b03      	ldr	r3, [sp, #12]
 8010f86:	1e5e      	subs	r6, r3, #1
 8010f88:	9b07      	ldr	r3, [sp, #28]
 8010f8a:	42b3      	cmp	r3, r6
 8010f8c:	bfbf      	itttt	lt
 8010f8e:	9b07      	ldrlt	r3, [sp, #28]
 8010f90:	9607      	strlt	r6, [sp, #28]
 8010f92:	1af2      	sublt	r2, r6, r3
 8010f94:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8010f96:	bfb6      	itet	lt
 8010f98:	189b      	addlt	r3, r3, r2
 8010f9a:	1b9e      	subge	r6, r3, r6
 8010f9c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8010f9e:	9b03      	ldr	r3, [sp, #12]
 8010fa0:	bfb8      	it	lt
 8010fa2:	2600      	movlt	r6, #0
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	bfb7      	itett	lt
 8010fa8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8010fac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010fb0:	1a9d      	sublt	r5, r3, r2
 8010fb2:	2300      	movlt	r3, #0
 8010fb4:	e734      	b.n	8010e20 <_dtoa_r+0x720>
 8010fb6:	9e07      	ldr	r6, [sp, #28]
 8010fb8:	9d04      	ldr	r5, [sp, #16]
 8010fba:	9f08      	ldr	r7, [sp, #32]
 8010fbc:	e73b      	b.n	8010e36 <_dtoa_r+0x736>
 8010fbe:	9a07      	ldr	r2, [sp, #28]
 8010fc0:	e767      	b.n	8010e92 <_dtoa_r+0x792>
 8010fc2:	9b06      	ldr	r3, [sp, #24]
 8010fc4:	2b01      	cmp	r3, #1
 8010fc6:	dc18      	bgt.n	8010ffa <_dtoa_r+0x8fa>
 8010fc8:	f1ba 0f00 	cmp.w	sl, #0
 8010fcc:	d115      	bne.n	8010ffa <_dtoa_r+0x8fa>
 8010fce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010fd2:	b993      	cbnz	r3, 8010ffa <_dtoa_r+0x8fa>
 8010fd4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010fd8:	0d1b      	lsrs	r3, r3, #20
 8010fda:	051b      	lsls	r3, r3, #20
 8010fdc:	b183      	cbz	r3, 8011000 <_dtoa_r+0x900>
 8010fde:	9b04      	ldr	r3, [sp, #16]
 8010fe0:	3301      	adds	r3, #1
 8010fe2:	9304      	str	r3, [sp, #16]
 8010fe4:	9b05      	ldr	r3, [sp, #20]
 8010fe6:	3301      	adds	r3, #1
 8010fe8:	9305      	str	r3, [sp, #20]
 8010fea:	f04f 0801 	mov.w	r8, #1
 8010fee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	f47f af6a 	bne.w	8010eca <_dtoa_r+0x7ca>
 8010ff6:	2001      	movs	r0, #1
 8010ff8:	e76f      	b.n	8010eda <_dtoa_r+0x7da>
 8010ffa:	f04f 0800 	mov.w	r8, #0
 8010ffe:	e7f6      	b.n	8010fee <_dtoa_r+0x8ee>
 8011000:	4698      	mov	r8, r3
 8011002:	e7f4      	b.n	8010fee <_dtoa_r+0x8ee>
 8011004:	f43f af7d 	beq.w	8010f02 <_dtoa_r+0x802>
 8011008:	4618      	mov	r0, r3
 801100a:	301c      	adds	r0, #28
 801100c:	e772      	b.n	8010ef4 <_dtoa_r+0x7f4>
 801100e:	9b03      	ldr	r3, [sp, #12]
 8011010:	2b00      	cmp	r3, #0
 8011012:	dc37      	bgt.n	8011084 <_dtoa_r+0x984>
 8011014:	9b06      	ldr	r3, [sp, #24]
 8011016:	2b02      	cmp	r3, #2
 8011018:	dd34      	ble.n	8011084 <_dtoa_r+0x984>
 801101a:	9b03      	ldr	r3, [sp, #12]
 801101c:	9302      	str	r3, [sp, #8]
 801101e:	9b02      	ldr	r3, [sp, #8]
 8011020:	b96b      	cbnz	r3, 801103e <_dtoa_r+0x93e>
 8011022:	4631      	mov	r1, r6
 8011024:	2205      	movs	r2, #5
 8011026:	4620      	mov	r0, r4
 8011028:	f000 fd50 	bl	8011acc <__multadd>
 801102c:	4601      	mov	r1, r0
 801102e:	4606      	mov	r6, r0
 8011030:	ee18 0a10 	vmov	r0, s16
 8011034:	f000 ffb4 	bl	8011fa0 <__mcmp>
 8011038:	2800      	cmp	r0, #0
 801103a:	f73f adbb 	bgt.w	8010bb4 <_dtoa_r+0x4b4>
 801103e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011040:	9d01      	ldr	r5, [sp, #4]
 8011042:	43db      	mvns	r3, r3
 8011044:	9300      	str	r3, [sp, #0]
 8011046:	f04f 0800 	mov.w	r8, #0
 801104a:	4631      	mov	r1, r6
 801104c:	4620      	mov	r0, r4
 801104e:	f000 fd1b 	bl	8011a88 <_Bfree>
 8011052:	2f00      	cmp	r7, #0
 8011054:	f43f aea4 	beq.w	8010da0 <_dtoa_r+0x6a0>
 8011058:	f1b8 0f00 	cmp.w	r8, #0
 801105c:	d005      	beq.n	801106a <_dtoa_r+0x96a>
 801105e:	45b8      	cmp	r8, r7
 8011060:	d003      	beq.n	801106a <_dtoa_r+0x96a>
 8011062:	4641      	mov	r1, r8
 8011064:	4620      	mov	r0, r4
 8011066:	f000 fd0f 	bl	8011a88 <_Bfree>
 801106a:	4639      	mov	r1, r7
 801106c:	4620      	mov	r0, r4
 801106e:	f000 fd0b 	bl	8011a88 <_Bfree>
 8011072:	e695      	b.n	8010da0 <_dtoa_r+0x6a0>
 8011074:	2600      	movs	r6, #0
 8011076:	4637      	mov	r7, r6
 8011078:	e7e1      	b.n	801103e <_dtoa_r+0x93e>
 801107a:	9700      	str	r7, [sp, #0]
 801107c:	4637      	mov	r7, r6
 801107e:	e599      	b.n	8010bb4 <_dtoa_r+0x4b4>
 8011080:	40240000 	.word	0x40240000
 8011084:	9b08      	ldr	r3, [sp, #32]
 8011086:	2b00      	cmp	r3, #0
 8011088:	f000 80ca 	beq.w	8011220 <_dtoa_r+0xb20>
 801108c:	9b03      	ldr	r3, [sp, #12]
 801108e:	9302      	str	r3, [sp, #8]
 8011090:	2d00      	cmp	r5, #0
 8011092:	dd05      	ble.n	80110a0 <_dtoa_r+0x9a0>
 8011094:	4639      	mov	r1, r7
 8011096:	462a      	mov	r2, r5
 8011098:	4620      	mov	r0, r4
 801109a:	f000 ff11 	bl	8011ec0 <__lshift>
 801109e:	4607      	mov	r7, r0
 80110a0:	f1b8 0f00 	cmp.w	r8, #0
 80110a4:	d05b      	beq.n	801115e <_dtoa_r+0xa5e>
 80110a6:	6879      	ldr	r1, [r7, #4]
 80110a8:	4620      	mov	r0, r4
 80110aa:	f000 fcad 	bl	8011a08 <_Balloc>
 80110ae:	4605      	mov	r5, r0
 80110b0:	b928      	cbnz	r0, 80110be <_dtoa_r+0x9be>
 80110b2:	4b87      	ldr	r3, [pc, #540]	; (80112d0 <_dtoa_r+0xbd0>)
 80110b4:	4602      	mov	r2, r0
 80110b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80110ba:	f7ff bb3b 	b.w	8010734 <_dtoa_r+0x34>
 80110be:	693a      	ldr	r2, [r7, #16]
 80110c0:	3202      	adds	r2, #2
 80110c2:	0092      	lsls	r2, r2, #2
 80110c4:	f107 010c 	add.w	r1, r7, #12
 80110c8:	300c      	adds	r0, #12
 80110ca:	f7fd fdb9 	bl	800ec40 <memcpy>
 80110ce:	2201      	movs	r2, #1
 80110d0:	4629      	mov	r1, r5
 80110d2:	4620      	mov	r0, r4
 80110d4:	f000 fef4 	bl	8011ec0 <__lshift>
 80110d8:	9b01      	ldr	r3, [sp, #4]
 80110da:	f103 0901 	add.w	r9, r3, #1
 80110de:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80110e2:	4413      	add	r3, r2
 80110e4:	9305      	str	r3, [sp, #20]
 80110e6:	f00a 0301 	and.w	r3, sl, #1
 80110ea:	46b8      	mov	r8, r7
 80110ec:	9304      	str	r3, [sp, #16]
 80110ee:	4607      	mov	r7, r0
 80110f0:	4631      	mov	r1, r6
 80110f2:	ee18 0a10 	vmov	r0, s16
 80110f6:	f7ff fa77 	bl	80105e8 <quorem>
 80110fa:	4641      	mov	r1, r8
 80110fc:	9002      	str	r0, [sp, #8]
 80110fe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011102:	ee18 0a10 	vmov	r0, s16
 8011106:	f000 ff4b 	bl	8011fa0 <__mcmp>
 801110a:	463a      	mov	r2, r7
 801110c:	9003      	str	r0, [sp, #12]
 801110e:	4631      	mov	r1, r6
 8011110:	4620      	mov	r0, r4
 8011112:	f000 ff61 	bl	8011fd8 <__mdiff>
 8011116:	68c2      	ldr	r2, [r0, #12]
 8011118:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 801111c:	4605      	mov	r5, r0
 801111e:	bb02      	cbnz	r2, 8011162 <_dtoa_r+0xa62>
 8011120:	4601      	mov	r1, r0
 8011122:	ee18 0a10 	vmov	r0, s16
 8011126:	f000 ff3b 	bl	8011fa0 <__mcmp>
 801112a:	4602      	mov	r2, r0
 801112c:	4629      	mov	r1, r5
 801112e:	4620      	mov	r0, r4
 8011130:	9207      	str	r2, [sp, #28]
 8011132:	f000 fca9 	bl	8011a88 <_Bfree>
 8011136:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801113a:	ea43 0102 	orr.w	r1, r3, r2
 801113e:	9b04      	ldr	r3, [sp, #16]
 8011140:	430b      	orrs	r3, r1
 8011142:	464d      	mov	r5, r9
 8011144:	d10f      	bne.n	8011166 <_dtoa_r+0xa66>
 8011146:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801114a:	d02a      	beq.n	80111a2 <_dtoa_r+0xaa2>
 801114c:	9b03      	ldr	r3, [sp, #12]
 801114e:	2b00      	cmp	r3, #0
 8011150:	dd02      	ble.n	8011158 <_dtoa_r+0xa58>
 8011152:	9b02      	ldr	r3, [sp, #8]
 8011154:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011158:	f88b a000 	strb.w	sl, [fp]
 801115c:	e775      	b.n	801104a <_dtoa_r+0x94a>
 801115e:	4638      	mov	r0, r7
 8011160:	e7ba      	b.n	80110d8 <_dtoa_r+0x9d8>
 8011162:	2201      	movs	r2, #1
 8011164:	e7e2      	b.n	801112c <_dtoa_r+0xa2c>
 8011166:	9b03      	ldr	r3, [sp, #12]
 8011168:	2b00      	cmp	r3, #0
 801116a:	db04      	blt.n	8011176 <_dtoa_r+0xa76>
 801116c:	9906      	ldr	r1, [sp, #24]
 801116e:	430b      	orrs	r3, r1
 8011170:	9904      	ldr	r1, [sp, #16]
 8011172:	430b      	orrs	r3, r1
 8011174:	d122      	bne.n	80111bc <_dtoa_r+0xabc>
 8011176:	2a00      	cmp	r2, #0
 8011178:	ddee      	ble.n	8011158 <_dtoa_r+0xa58>
 801117a:	ee18 1a10 	vmov	r1, s16
 801117e:	2201      	movs	r2, #1
 8011180:	4620      	mov	r0, r4
 8011182:	f000 fe9d 	bl	8011ec0 <__lshift>
 8011186:	4631      	mov	r1, r6
 8011188:	ee08 0a10 	vmov	s16, r0
 801118c:	f000 ff08 	bl	8011fa0 <__mcmp>
 8011190:	2800      	cmp	r0, #0
 8011192:	dc03      	bgt.n	801119c <_dtoa_r+0xa9c>
 8011194:	d1e0      	bne.n	8011158 <_dtoa_r+0xa58>
 8011196:	f01a 0f01 	tst.w	sl, #1
 801119a:	d0dd      	beq.n	8011158 <_dtoa_r+0xa58>
 801119c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80111a0:	d1d7      	bne.n	8011152 <_dtoa_r+0xa52>
 80111a2:	2339      	movs	r3, #57	; 0x39
 80111a4:	f88b 3000 	strb.w	r3, [fp]
 80111a8:	462b      	mov	r3, r5
 80111aa:	461d      	mov	r5, r3
 80111ac:	3b01      	subs	r3, #1
 80111ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80111b2:	2a39      	cmp	r2, #57	; 0x39
 80111b4:	d071      	beq.n	801129a <_dtoa_r+0xb9a>
 80111b6:	3201      	adds	r2, #1
 80111b8:	701a      	strb	r2, [r3, #0]
 80111ba:	e746      	b.n	801104a <_dtoa_r+0x94a>
 80111bc:	2a00      	cmp	r2, #0
 80111be:	dd07      	ble.n	80111d0 <_dtoa_r+0xad0>
 80111c0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80111c4:	d0ed      	beq.n	80111a2 <_dtoa_r+0xaa2>
 80111c6:	f10a 0301 	add.w	r3, sl, #1
 80111ca:	f88b 3000 	strb.w	r3, [fp]
 80111ce:	e73c      	b.n	801104a <_dtoa_r+0x94a>
 80111d0:	9b05      	ldr	r3, [sp, #20]
 80111d2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80111d6:	4599      	cmp	r9, r3
 80111d8:	d047      	beq.n	801126a <_dtoa_r+0xb6a>
 80111da:	ee18 1a10 	vmov	r1, s16
 80111de:	2300      	movs	r3, #0
 80111e0:	220a      	movs	r2, #10
 80111e2:	4620      	mov	r0, r4
 80111e4:	f000 fc72 	bl	8011acc <__multadd>
 80111e8:	45b8      	cmp	r8, r7
 80111ea:	ee08 0a10 	vmov	s16, r0
 80111ee:	f04f 0300 	mov.w	r3, #0
 80111f2:	f04f 020a 	mov.w	r2, #10
 80111f6:	4641      	mov	r1, r8
 80111f8:	4620      	mov	r0, r4
 80111fa:	d106      	bne.n	801120a <_dtoa_r+0xb0a>
 80111fc:	f000 fc66 	bl	8011acc <__multadd>
 8011200:	4680      	mov	r8, r0
 8011202:	4607      	mov	r7, r0
 8011204:	f109 0901 	add.w	r9, r9, #1
 8011208:	e772      	b.n	80110f0 <_dtoa_r+0x9f0>
 801120a:	f000 fc5f 	bl	8011acc <__multadd>
 801120e:	4639      	mov	r1, r7
 8011210:	4680      	mov	r8, r0
 8011212:	2300      	movs	r3, #0
 8011214:	220a      	movs	r2, #10
 8011216:	4620      	mov	r0, r4
 8011218:	f000 fc58 	bl	8011acc <__multadd>
 801121c:	4607      	mov	r7, r0
 801121e:	e7f1      	b.n	8011204 <_dtoa_r+0xb04>
 8011220:	9b03      	ldr	r3, [sp, #12]
 8011222:	9302      	str	r3, [sp, #8]
 8011224:	9d01      	ldr	r5, [sp, #4]
 8011226:	ee18 0a10 	vmov	r0, s16
 801122a:	4631      	mov	r1, r6
 801122c:	f7ff f9dc 	bl	80105e8 <quorem>
 8011230:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011234:	9b01      	ldr	r3, [sp, #4]
 8011236:	f805 ab01 	strb.w	sl, [r5], #1
 801123a:	1aea      	subs	r2, r5, r3
 801123c:	9b02      	ldr	r3, [sp, #8]
 801123e:	4293      	cmp	r3, r2
 8011240:	dd09      	ble.n	8011256 <_dtoa_r+0xb56>
 8011242:	ee18 1a10 	vmov	r1, s16
 8011246:	2300      	movs	r3, #0
 8011248:	220a      	movs	r2, #10
 801124a:	4620      	mov	r0, r4
 801124c:	f000 fc3e 	bl	8011acc <__multadd>
 8011250:	ee08 0a10 	vmov	s16, r0
 8011254:	e7e7      	b.n	8011226 <_dtoa_r+0xb26>
 8011256:	9b02      	ldr	r3, [sp, #8]
 8011258:	2b00      	cmp	r3, #0
 801125a:	bfc8      	it	gt
 801125c:	461d      	movgt	r5, r3
 801125e:	9b01      	ldr	r3, [sp, #4]
 8011260:	bfd8      	it	le
 8011262:	2501      	movle	r5, #1
 8011264:	441d      	add	r5, r3
 8011266:	f04f 0800 	mov.w	r8, #0
 801126a:	ee18 1a10 	vmov	r1, s16
 801126e:	2201      	movs	r2, #1
 8011270:	4620      	mov	r0, r4
 8011272:	f000 fe25 	bl	8011ec0 <__lshift>
 8011276:	4631      	mov	r1, r6
 8011278:	ee08 0a10 	vmov	s16, r0
 801127c:	f000 fe90 	bl	8011fa0 <__mcmp>
 8011280:	2800      	cmp	r0, #0
 8011282:	dc91      	bgt.n	80111a8 <_dtoa_r+0xaa8>
 8011284:	d102      	bne.n	801128c <_dtoa_r+0xb8c>
 8011286:	f01a 0f01 	tst.w	sl, #1
 801128a:	d18d      	bne.n	80111a8 <_dtoa_r+0xaa8>
 801128c:	462b      	mov	r3, r5
 801128e:	461d      	mov	r5, r3
 8011290:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011294:	2a30      	cmp	r2, #48	; 0x30
 8011296:	d0fa      	beq.n	801128e <_dtoa_r+0xb8e>
 8011298:	e6d7      	b.n	801104a <_dtoa_r+0x94a>
 801129a:	9a01      	ldr	r2, [sp, #4]
 801129c:	429a      	cmp	r2, r3
 801129e:	d184      	bne.n	80111aa <_dtoa_r+0xaaa>
 80112a0:	9b00      	ldr	r3, [sp, #0]
 80112a2:	3301      	adds	r3, #1
 80112a4:	9300      	str	r3, [sp, #0]
 80112a6:	2331      	movs	r3, #49	; 0x31
 80112a8:	7013      	strb	r3, [r2, #0]
 80112aa:	e6ce      	b.n	801104a <_dtoa_r+0x94a>
 80112ac:	4b09      	ldr	r3, [pc, #36]	; (80112d4 <_dtoa_r+0xbd4>)
 80112ae:	f7ff ba95 	b.w	80107dc <_dtoa_r+0xdc>
 80112b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	f47f aa6e 	bne.w	8010796 <_dtoa_r+0x96>
 80112ba:	4b07      	ldr	r3, [pc, #28]	; (80112d8 <_dtoa_r+0xbd8>)
 80112bc:	f7ff ba8e 	b.w	80107dc <_dtoa_r+0xdc>
 80112c0:	9b02      	ldr	r3, [sp, #8]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	dcae      	bgt.n	8011224 <_dtoa_r+0xb24>
 80112c6:	9b06      	ldr	r3, [sp, #24]
 80112c8:	2b02      	cmp	r3, #2
 80112ca:	f73f aea8 	bgt.w	801101e <_dtoa_r+0x91e>
 80112ce:	e7a9      	b.n	8011224 <_dtoa_r+0xb24>
 80112d0:	08014a57 	.word	0x08014a57
 80112d4:	08014964 	.word	0x08014964
 80112d8:	080149d8 	.word	0x080149d8

080112dc <rshift>:
 80112dc:	6903      	ldr	r3, [r0, #16]
 80112de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80112e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80112e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80112ea:	f100 0414 	add.w	r4, r0, #20
 80112ee:	dd45      	ble.n	801137c <rshift+0xa0>
 80112f0:	f011 011f 	ands.w	r1, r1, #31
 80112f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80112f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80112fc:	d10c      	bne.n	8011318 <rshift+0x3c>
 80112fe:	f100 0710 	add.w	r7, r0, #16
 8011302:	4629      	mov	r1, r5
 8011304:	42b1      	cmp	r1, r6
 8011306:	d334      	bcc.n	8011372 <rshift+0x96>
 8011308:	1a9b      	subs	r3, r3, r2
 801130a:	009b      	lsls	r3, r3, #2
 801130c:	1eea      	subs	r2, r5, #3
 801130e:	4296      	cmp	r6, r2
 8011310:	bf38      	it	cc
 8011312:	2300      	movcc	r3, #0
 8011314:	4423      	add	r3, r4
 8011316:	e015      	b.n	8011344 <rshift+0x68>
 8011318:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801131c:	f1c1 0820 	rsb	r8, r1, #32
 8011320:	40cf      	lsrs	r7, r1
 8011322:	f105 0e04 	add.w	lr, r5, #4
 8011326:	46a1      	mov	r9, r4
 8011328:	4576      	cmp	r6, lr
 801132a:	46f4      	mov	ip, lr
 801132c:	d815      	bhi.n	801135a <rshift+0x7e>
 801132e:	1a9a      	subs	r2, r3, r2
 8011330:	0092      	lsls	r2, r2, #2
 8011332:	3a04      	subs	r2, #4
 8011334:	3501      	adds	r5, #1
 8011336:	42ae      	cmp	r6, r5
 8011338:	bf38      	it	cc
 801133a:	2200      	movcc	r2, #0
 801133c:	18a3      	adds	r3, r4, r2
 801133e:	50a7      	str	r7, [r4, r2]
 8011340:	b107      	cbz	r7, 8011344 <rshift+0x68>
 8011342:	3304      	adds	r3, #4
 8011344:	1b1a      	subs	r2, r3, r4
 8011346:	42a3      	cmp	r3, r4
 8011348:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801134c:	bf08      	it	eq
 801134e:	2300      	moveq	r3, #0
 8011350:	6102      	str	r2, [r0, #16]
 8011352:	bf08      	it	eq
 8011354:	6143      	streq	r3, [r0, #20]
 8011356:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801135a:	f8dc c000 	ldr.w	ip, [ip]
 801135e:	fa0c fc08 	lsl.w	ip, ip, r8
 8011362:	ea4c 0707 	orr.w	r7, ip, r7
 8011366:	f849 7b04 	str.w	r7, [r9], #4
 801136a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801136e:	40cf      	lsrs	r7, r1
 8011370:	e7da      	b.n	8011328 <rshift+0x4c>
 8011372:	f851 cb04 	ldr.w	ip, [r1], #4
 8011376:	f847 cf04 	str.w	ip, [r7, #4]!
 801137a:	e7c3      	b.n	8011304 <rshift+0x28>
 801137c:	4623      	mov	r3, r4
 801137e:	e7e1      	b.n	8011344 <rshift+0x68>

08011380 <__hexdig_fun>:
 8011380:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011384:	2b09      	cmp	r3, #9
 8011386:	d802      	bhi.n	801138e <__hexdig_fun+0xe>
 8011388:	3820      	subs	r0, #32
 801138a:	b2c0      	uxtb	r0, r0
 801138c:	4770      	bx	lr
 801138e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011392:	2b05      	cmp	r3, #5
 8011394:	d801      	bhi.n	801139a <__hexdig_fun+0x1a>
 8011396:	3847      	subs	r0, #71	; 0x47
 8011398:	e7f7      	b.n	801138a <__hexdig_fun+0xa>
 801139a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801139e:	2b05      	cmp	r3, #5
 80113a0:	d801      	bhi.n	80113a6 <__hexdig_fun+0x26>
 80113a2:	3827      	subs	r0, #39	; 0x27
 80113a4:	e7f1      	b.n	801138a <__hexdig_fun+0xa>
 80113a6:	2000      	movs	r0, #0
 80113a8:	4770      	bx	lr
	...

080113ac <__gethex>:
 80113ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113b0:	ed2d 8b02 	vpush	{d8}
 80113b4:	b089      	sub	sp, #36	; 0x24
 80113b6:	ee08 0a10 	vmov	s16, r0
 80113ba:	9304      	str	r3, [sp, #16]
 80113bc:	4bb4      	ldr	r3, [pc, #720]	; (8011690 <__gethex+0x2e4>)
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	9301      	str	r3, [sp, #4]
 80113c2:	4618      	mov	r0, r3
 80113c4:	468b      	mov	fp, r1
 80113c6:	4690      	mov	r8, r2
 80113c8:	f7ee ff02 	bl	80001d0 <strlen>
 80113cc:	9b01      	ldr	r3, [sp, #4]
 80113ce:	f8db 2000 	ldr.w	r2, [fp]
 80113d2:	4403      	add	r3, r0
 80113d4:	4682      	mov	sl, r0
 80113d6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80113da:	9305      	str	r3, [sp, #20]
 80113dc:	1c93      	adds	r3, r2, #2
 80113de:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80113e2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80113e6:	32fe      	adds	r2, #254	; 0xfe
 80113e8:	18d1      	adds	r1, r2, r3
 80113ea:	461f      	mov	r7, r3
 80113ec:	f813 0b01 	ldrb.w	r0, [r3], #1
 80113f0:	9100      	str	r1, [sp, #0]
 80113f2:	2830      	cmp	r0, #48	; 0x30
 80113f4:	d0f8      	beq.n	80113e8 <__gethex+0x3c>
 80113f6:	f7ff ffc3 	bl	8011380 <__hexdig_fun>
 80113fa:	4604      	mov	r4, r0
 80113fc:	2800      	cmp	r0, #0
 80113fe:	d13a      	bne.n	8011476 <__gethex+0xca>
 8011400:	9901      	ldr	r1, [sp, #4]
 8011402:	4652      	mov	r2, sl
 8011404:	4638      	mov	r0, r7
 8011406:	f7fe f9ce 	bl	800f7a6 <strncmp>
 801140a:	4605      	mov	r5, r0
 801140c:	2800      	cmp	r0, #0
 801140e:	d168      	bne.n	80114e2 <__gethex+0x136>
 8011410:	f817 000a 	ldrb.w	r0, [r7, sl]
 8011414:	eb07 060a 	add.w	r6, r7, sl
 8011418:	f7ff ffb2 	bl	8011380 <__hexdig_fun>
 801141c:	2800      	cmp	r0, #0
 801141e:	d062      	beq.n	80114e6 <__gethex+0x13a>
 8011420:	4633      	mov	r3, r6
 8011422:	7818      	ldrb	r0, [r3, #0]
 8011424:	2830      	cmp	r0, #48	; 0x30
 8011426:	461f      	mov	r7, r3
 8011428:	f103 0301 	add.w	r3, r3, #1
 801142c:	d0f9      	beq.n	8011422 <__gethex+0x76>
 801142e:	f7ff ffa7 	bl	8011380 <__hexdig_fun>
 8011432:	2301      	movs	r3, #1
 8011434:	fab0 f480 	clz	r4, r0
 8011438:	0964      	lsrs	r4, r4, #5
 801143a:	4635      	mov	r5, r6
 801143c:	9300      	str	r3, [sp, #0]
 801143e:	463a      	mov	r2, r7
 8011440:	4616      	mov	r6, r2
 8011442:	3201      	adds	r2, #1
 8011444:	7830      	ldrb	r0, [r6, #0]
 8011446:	f7ff ff9b 	bl	8011380 <__hexdig_fun>
 801144a:	2800      	cmp	r0, #0
 801144c:	d1f8      	bne.n	8011440 <__gethex+0x94>
 801144e:	9901      	ldr	r1, [sp, #4]
 8011450:	4652      	mov	r2, sl
 8011452:	4630      	mov	r0, r6
 8011454:	f7fe f9a7 	bl	800f7a6 <strncmp>
 8011458:	b980      	cbnz	r0, 801147c <__gethex+0xd0>
 801145a:	b94d      	cbnz	r5, 8011470 <__gethex+0xc4>
 801145c:	eb06 050a 	add.w	r5, r6, sl
 8011460:	462a      	mov	r2, r5
 8011462:	4616      	mov	r6, r2
 8011464:	3201      	adds	r2, #1
 8011466:	7830      	ldrb	r0, [r6, #0]
 8011468:	f7ff ff8a 	bl	8011380 <__hexdig_fun>
 801146c:	2800      	cmp	r0, #0
 801146e:	d1f8      	bne.n	8011462 <__gethex+0xb6>
 8011470:	1bad      	subs	r5, r5, r6
 8011472:	00ad      	lsls	r5, r5, #2
 8011474:	e004      	b.n	8011480 <__gethex+0xd4>
 8011476:	2400      	movs	r4, #0
 8011478:	4625      	mov	r5, r4
 801147a:	e7e0      	b.n	801143e <__gethex+0x92>
 801147c:	2d00      	cmp	r5, #0
 801147e:	d1f7      	bne.n	8011470 <__gethex+0xc4>
 8011480:	7833      	ldrb	r3, [r6, #0]
 8011482:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011486:	2b50      	cmp	r3, #80	; 0x50
 8011488:	d13b      	bne.n	8011502 <__gethex+0x156>
 801148a:	7873      	ldrb	r3, [r6, #1]
 801148c:	2b2b      	cmp	r3, #43	; 0x2b
 801148e:	d02c      	beq.n	80114ea <__gethex+0x13e>
 8011490:	2b2d      	cmp	r3, #45	; 0x2d
 8011492:	d02e      	beq.n	80114f2 <__gethex+0x146>
 8011494:	1c71      	adds	r1, r6, #1
 8011496:	f04f 0900 	mov.w	r9, #0
 801149a:	7808      	ldrb	r0, [r1, #0]
 801149c:	f7ff ff70 	bl	8011380 <__hexdig_fun>
 80114a0:	1e43      	subs	r3, r0, #1
 80114a2:	b2db      	uxtb	r3, r3
 80114a4:	2b18      	cmp	r3, #24
 80114a6:	d82c      	bhi.n	8011502 <__gethex+0x156>
 80114a8:	f1a0 0210 	sub.w	r2, r0, #16
 80114ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80114b0:	f7ff ff66 	bl	8011380 <__hexdig_fun>
 80114b4:	1e43      	subs	r3, r0, #1
 80114b6:	b2db      	uxtb	r3, r3
 80114b8:	2b18      	cmp	r3, #24
 80114ba:	d91d      	bls.n	80114f8 <__gethex+0x14c>
 80114bc:	f1b9 0f00 	cmp.w	r9, #0
 80114c0:	d000      	beq.n	80114c4 <__gethex+0x118>
 80114c2:	4252      	negs	r2, r2
 80114c4:	4415      	add	r5, r2
 80114c6:	f8cb 1000 	str.w	r1, [fp]
 80114ca:	b1e4      	cbz	r4, 8011506 <__gethex+0x15a>
 80114cc:	9b00      	ldr	r3, [sp, #0]
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	bf14      	ite	ne
 80114d2:	2700      	movne	r7, #0
 80114d4:	2706      	moveq	r7, #6
 80114d6:	4638      	mov	r0, r7
 80114d8:	b009      	add	sp, #36	; 0x24
 80114da:	ecbd 8b02 	vpop	{d8}
 80114de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114e2:	463e      	mov	r6, r7
 80114e4:	4625      	mov	r5, r4
 80114e6:	2401      	movs	r4, #1
 80114e8:	e7ca      	b.n	8011480 <__gethex+0xd4>
 80114ea:	f04f 0900 	mov.w	r9, #0
 80114ee:	1cb1      	adds	r1, r6, #2
 80114f0:	e7d3      	b.n	801149a <__gethex+0xee>
 80114f2:	f04f 0901 	mov.w	r9, #1
 80114f6:	e7fa      	b.n	80114ee <__gethex+0x142>
 80114f8:	230a      	movs	r3, #10
 80114fa:	fb03 0202 	mla	r2, r3, r2, r0
 80114fe:	3a10      	subs	r2, #16
 8011500:	e7d4      	b.n	80114ac <__gethex+0x100>
 8011502:	4631      	mov	r1, r6
 8011504:	e7df      	b.n	80114c6 <__gethex+0x11a>
 8011506:	1bf3      	subs	r3, r6, r7
 8011508:	3b01      	subs	r3, #1
 801150a:	4621      	mov	r1, r4
 801150c:	2b07      	cmp	r3, #7
 801150e:	dc0b      	bgt.n	8011528 <__gethex+0x17c>
 8011510:	ee18 0a10 	vmov	r0, s16
 8011514:	f000 fa78 	bl	8011a08 <_Balloc>
 8011518:	4604      	mov	r4, r0
 801151a:	b940      	cbnz	r0, 801152e <__gethex+0x182>
 801151c:	4b5d      	ldr	r3, [pc, #372]	; (8011694 <__gethex+0x2e8>)
 801151e:	4602      	mov	r2, r0
 8011520:	21de      	movs	r1, #222	; 0xde
 8011522:	485d      	ldr	r0, [pc, #372]	; (8011698 <__gethex+0x2ec>)
 8011524:	f001 f8f6 	bl	8012714 <__assert_func>
 8011528:	3101      	adds	r1, #1
 801152a:	105b      	asrs	r3, r3, #1
 801152c:	e7ee      	b.n	801150c <__gethex+0x160>
 801152e:	f100 0914 	add.w	r9, r0, #20
 8011532:	f04f 0b00 	mov.w	fp, #0
 8011536:	f1ca 0301 	rsb	r3, sl, #1
 801153a:	f8cd 9008 	str.w	r9, [sp, #8]
 801153e:	f8cd b000 	str.w	fp, [sp]
 8011542:	9306      	str	r3, [sp, #24]
 8011544:	42b7      	cmp	r7, r6
 8011546:	d340      	bcc.n	80115ca <__gethex+0x21e>
 8011548:	9802      	ldr	r0, [sp, #8]
 801154a:	9b00      	ldr	r3, [sp, #0]
 801154c:	f840 3b04 	str.w	r3, [r0], #4
 8011550:	eba0 0009 	sub.w	r0, r0, r9
 8011554:	1080      	asrs	r0, r0, #2
 8011556:	0146      	lsls	r6, r0, #5
 8011558:	6120      	str	r0, [r4, #16]
 801155a:	4618      	mov	r0, r3
 801155c:	f000 fb46 	bl	8011bec <__hi0bits>
 8011560:	1a30      	subs	r0, r6, r0
 8011562:	f8d8 6000 	ldr.w	r6, [r8]
 8011566:	42b0      	cmp	r0, r6
 8011568:	dd63      	ble.n	8011632 <__gethex+0x286>
 801156a:	1b87      	subs	r7, r0, r6
 801156c:	4639      	mov	r1, r7
 801156e:	4620      	mov	r0, r4
 8011570:	f000 feea 	bl	8012348 <__any_on>
 8011574:	4682      	mov	sl, r0
 8011576:	b1a8      	cbz	r0, 80115a4 <__gethex+0x1f8>
 8011578:	1e7b      	subs	r3, r7, #1
 801157a:	1159      	asrs	r1, r3, #5
 801157c:	f003 021f 	and.w	r2, r3, #31
 8011580:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011584:	f04f 0a01 	mov.w	sl, #1
 8011588:	fa0a f202 	lsl.w	r2, sl, r2
 801158c:	420a      	tst	r2, r1
 801158e:	d009      	beq.n	80115a4 <__gethex+0x1f8>
 8011590:	4553      	cmp	r3, sl
 8011592:	dd05      	ble.n	80115a0 <__gethex+0x1f4>
 8011594:	1eb9      	subs	r1, r7, #2
 8011596:	4620      	mov	r0, r4
 8011598:	f000 fed6 	bl	8012348 <__any_on>
 801159c:	2800      	cmp	r0, #0
 801159e:	d145      	bne.n	801162c <__gethex+0x280>
 80115a0:	f04f 0a02 	mov.w	sl, #2
 80115a4:	4639      	mov	r1, r7
 80115a6:	4620      	mov	r0, r4
 80115a8:	f7ff fe98 	bl	80112dc <rshift>
 80115ac:	443d      	add	r5, r7
 80115ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80115b2:	42ab      	cmp	r3, r5
 80115b4:	da4c      	bge.n	8011650 <__gethex+0x2a4>
 80115b6:	ee18 0a10 	vmov	r0, s16
 80115ba:	4621      	mov	r1, r4
 80115bc:	f000 fa64 	bl	8011a88 <_Bfree>
 80115c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80115c2:	2300      	movs	r3, #0
 80115c4:	6013      	str	r3, [r2, #0]
 80115c6:	27a3      	movs	r7, #163	; 0xa3
 80115c8:	e785      	b.n	80114d6 <__gethex+0x12a>
 80115ca:	1e73      	subs	r3, r6, #1
 80115cc:	9a05      	ldr	r2, [sp, #20]
 80115ce:	9303      	str	r3, [sp, #12]
 80115d0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80115d4:	4293      	cmp	r3, r2
 80115d6:	d019      	beq.n	801160c <__gethex+0x260>
 80115d8:	f1bb 0f20 	cmp.w	fp, #32
 80115dc:	d107      	bne.n	80115ee <__gethex+0x242>
 80115de:	9b02      	ldr	r3, [sp, #8]
 80115e0:	9a00      	ldr	r2, [sp, #0]
 80115e2:	f843 2b04 	str.w	r2, [r3], #4
 80115e6:	9302      	str	r3, [sp, #8]
 80115e8:	2300      	movs	r3, #0
 80115ea:	9300      	str	r3, [sp, #0]
 80115ec:	469b      	mov	fp, r3
 80115ee:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80115f2:	f7ff fec5 	bl	8011380 <__hexdig_fun>
 80115f6:	9b00      	ldr	r3, [sp, #0]
 80115f8:	f000 000f 	and.w	r0, r0, #15
 80115fc:	fa00 f00b 	lsl.w	r0, r0, fp
 8011600:	4303      	orrs	r3, r0
 8011602:	9300      	str	r3, [sp, #0]
 8011604:	f10b 0b04 	add.w	fp, fp, #4
 8011608:	9b03      	ldr	r3, [sp, #12]
 801160a:	e00d      	b.n	8011628 <__gethex+0x27c>
 801160c:	9b03      	ldr	r3, [sp, #12]
 801160e:	9a06      	ldr	r2, [sp, #24]
 8011610:	4413      	add	r3, r2
 8011612:	42bb      	cmp	r3, r7
 8011614:	d3e0      	bcc.n	80115d8 <__gethex+0x22c>
 8011616:	4618      	mov	r0, r3
 8011618:	9901      	ldr	r1, [sp, #4]
 801161a:	9307      	str	r3, [sp, #28]
 801161c:	4652      	mov	r2, sl
 801161e:	f7fe f8c2 	bl	800f7a6 <strncmp>
 8011622:	9b07      	ldr	r3, [sp, #28]
 8011624:	2800      	cmp	r0, #0
 8011626:	d1d7      	bne.n	80115d8 <__gethex+0x22c>
 8011628:	461e      	mov	r6, r3
 801162a:	e78b      	b.n	8011544 <__gethex+0x198>
 801162c:	f04f 0a03 	mov.w	sl, #3
 8011630:	e7b8      	b.n	80115a4 <__gethex+0x1f8>
 8011632:	da0a      	bge.n	801164a <__gethex+0x29e>
 8011634:	1a37      	subs	r7, r6, r0
 8011636:	4621      	mov	r1, r4
 8011638:	ee18 0a10 	vmov	r0, s16
 801163c:	463a      	mov	r2, r7
 801163e:	f000 fc3f 	bl	8011ec0 <__lshift>
 8011642:	1bed      	subs	r5, r5, r7
 8011644:	4604      	mov	r4, r0
 8011646:	f100 0914 	add.w	r9, r0, #20
 801164a:	f04f 0a00 	mov.w	sl, #0
 801164e:	e7ae      	b.n	80115ae <__gethex+0x202>
 8011650:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011654:	42a8      	cmp	r0, r5
 8011656:	dd72      	ble.n	801173e <__gethex+0x392>
 8011658:	1b45      	subs	r5, r0, r5
 801165a:	42ae      	cmp	r6, r5
 801165c:	dc36      	bgt.n	80116cc <__gethex+0x320>
 801165e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011662:	2b02      	cmp	r3, #2
 8011664:	d02a      	beq.n	80116bc <__gethex+0x310>
 8011666:	2b03      	cmp	r3, #3
 8011668:	d02c      	beq.n	80116c4 <__gethex+0x318>
 801166a:	2b01      	cmp	r3, #1
 801166c:	d11c      	bne.n	80116a8 <__gethex+0x2fc>
 801166e:	42ae      	cmp	r6, r5
 8011670:	d11a      	bne.n	80116a8 <__gethex+0x2fc>
 8011672:	2e01      	cmp	r6, #1
 8011674:	d112      	bne.n	801169c <__gethex+0x2f0>
 8011676:	9a04      	ldr	r2, [sp, #16]
 8011678:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801167c:	6013      	str	r3, [r2, #0]
 801167e:	2301      	movs	r3, #1
 8011680:	6123      	str	r3, [r4, #16]
 8011682:	f8c9 3000 	str.w	r3, [r9]
 8011686:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011688:	2762      	movs	r7, #98	; 0x62
 801168a:	601c      	str	r4, [r3, #0]
 801168c:	e723      	b.n	80114d6 <__gethex+0x12a>
 801168e:	bf00      	nop
 8011690:	08014ad0 	.word	0x08014ad0
 8011694:	08014a57 	.word	0x08014a57
 8011698:	08014a68 	.word	0x08014a68
 801169c:	1e71      	subs	r1, r6, #1
 801169e:	4620      	mov	r0, r4
 80116a0:	f000 fe52 	bl	8012348 <__any_on>
 80116a4:	2800      	cmp	r0, #0
 80116a6:	d1e6      	bne.n	8011676 <__gethex+0x2ca>
 80116a8:	ee18 0a10 	vmov	r0, s16
 80116ac:	4621      	mov	r1, r4
 80116ae:	f000 f9eb 	bl	8011a88 <_Bfree>
 80116b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80116b4:	2300      	movs	r3, #0
 80116b6:	6013      	str	r3, [r2, #0]
 80116b8:	2750      	movs	r7, #80	; 0x50
 80116ba:	e70c      	b.n	80114d6 <__gethex+0x12a>
 80116bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d1f2      	bne.n	80116a8 <__gethex+0x2fc>
 80116c2:	e7d8      	b.n	8011676 <__gethex+0x2ca>
 80116c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d1d5      	bne.n	8011676 <__gethex+0x2ca>
 80116ca:	e7ed      	b.n	80116a8 <__gethex+0x2fc>
 80116cc:	1e6f      	subs	r7, r5, #1
 80116ce:	f1ba 0f00 	cmp.w	sl, #0
 80116d2:	d131      	bne.n	8011738 <__gethex+0x38c>
 80116d4:	b127      	cbz	r7, 80116e0 <__gethex+0x334>
 80116d6:	4639      	mov	r1, r7
 80116d8:	4620      	mov	r0, r4
 80116da:	f000 fe35 	bl	8012348 <__any_on>
 80116de:	4682      	mov	sl, r0
 80116e0:	117b      	asrs	r3, r7, #5
 80116e2:	2101      	movs	r1, #1
 80116e4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80116e8:	f007 071f 	and.w	r7, r7, #31
 80116ec:	fa01 f707 	lsl.w	r7, r1, r7
 80116f0:	421f      	tst	r7, r3
 80116f2:	4629      	mov	r1, r5
 80116f4:	4620      	mov	r0, r4
 80116f6:	bf18      	it	ne
 80116f8:	f04a 0a02 	orrne.w	sl, sl, #2
 80116fc:	1b76      	subs	r6, r6, r5
 80116fe:	f7ff fded 	bl	80112dc <rshift>
 8011702:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011706:	2702      	movs	r7, #2
 8011708:	f1ba 0f00 	cmp.w	sl, #0
 801170c:	d048      	beq.n	80117a0 <__gethex+0x3f4>
 801170e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011712:	2b02      	cmp	r3, #2
 8011714:	d015      	beq.n	8011742 <__gethex+0x396>
 8011716:	2b03      	cmp	r3, #3
 8011718:	d017      	beq.n	801174a <__gethex+0x39e>
 801171a:	2b01      	cmp	r3, #1
 801171c:	d109      	bne.n	8011732 <__gethex+0x386>
 801171e:	f01a 0f02 	tst.w	sl, #2
 8011722:	d006      	beq.n	8011732 <__gethex+0x386>
 8011724:	f8d9 0000 	ldr.w	r0, [r9]
 8011728:	ea4a 0a00 	orr.w	sl, sl, r0
 801172c:	f01a 0f01 	tst.w	sl, #1
 8011730:	d10e      	bne.n	8011750 <__gethex+0x3a4>
 8011732:	f047 0710 	orr.w	r7, r7, #16
 8011736:	e033      	b.n	80117a0 <__gethex+0x3f4>
 8011738:	f04f 0a01 	mov.w	sl, #1
 801173c:	e7d0      	b.n	80116e0 <__gethex+0x334>
 801173e:	2701      	movs	r7, #1
 8011740:	e7e2      	b.n	8011708 <__gethex+0x35c>
 8011742:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011744:	f1c3 0301 	rsb	r3, r3, #1
 8011748:	9315      	str	r3, [sp, #84]	; 0x54
 801174a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801174c:	2b00      	cmp	r3, #0
 801174e:	d0f0      	beq.n	8011732 <__gethex+0x386>
 8011750:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011754:	f104 0314 	add.w	r3, r4, #20
 8011758:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801175c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011760:	f04f 0c00 	mov.w	ip, #0
 8011764:	4618      	mov	r0, r3
 8011766:	f853 2b04 	ldr.w	r2, [r3], #4
 801176a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 801176e:	d01c      	beq.n	80117aa <__gethex+0x3fe>
 8011770:	3201      	adds	r2, #1
 8011772:	6002      	str	r2, [r0, #0]
 8011774:	2f02      	cmp	r7, #2
 8011776:	f104 0314 	add.w	r3, r4, #20
 801177a:	d13f      	bne.n	80117fc <__gethex+0x450>
 801177c:	f8d8 2000 	ldr.w	r2, [r8]
 8011780:	3a01      	subs	r2, #1
 8011782:	42b2      	cmp	r2, r6
 8011784:	d10a      	bne.n	801179c <__gethex+0x3f0>
 8011786:	1171      	asrs	r1, r6, #5
 8011788:	2201      	movs	r2, #1
 801178a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801178e:	f006 061f 	and.w	r6, r6, #31
 8011792:	fa02 f606 	lsl.w	r6, r2, r6
 8011796:	421e      	tst	r6, r3
 8011798:	bf18      	it	ne
 801179a:	4617      	movne	r7, r2
 801179c:	f047 0720 	orr.w	r7, r7, #32
 80117a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80117a2:	601c      	str	r4, [r3, #0]
 80117a4:	9b04      	ldr	r3, [sp, #16]
 80117a6:	601d      	str	r5, [r3, #0]
 80117a8:	e695      	b.n	80114d6 <__gethex+0x12a>
 80117aa:	4299      	cmp	r1, r3
 80117ac:	f843 cc04 	str.w	ip, [r3, #-4]
 80117b0:	d8d8      	bhi.n	8011764 <__gethex+0x3b8>
 80117b2:	68a3      	ldr	r3, [r4, #8]
 80117b4:	459b      	cmp	fp, r3
 80117b6:	db19      	blt.n	80117ec <__gethex+0x440>
 80117b8:	6861      	ldr	r1, [r4, #4]
 80117ba:	ee18 0a10 	vmov	r0, s16
 80117be:	3101      	adds	r1, #1
 80117c0:	f000 f922 	bl	8011a08 <_Balloc>
 80117c4:	4681      	mov	r9, r0
 80117c6:	b918      	cbnz	r0, 80117d0 <__gethex+0x424>
 80117c8:	4b1a      	ldr	r3, [pc, #104]	; (8011834 <__gethex+0x488>)
 80117ca:	4602      	mov	r2, r0
 80117cc:	2184      	movs	r1, #132	; 0x84
 80117ce:	e6a8      	b.n	8011522 <__gethex+0x176>
 80117d0:	6922      	ldr	r2, [r4, #16]
 80117d2:	3202      	adds	r2, #2
 80117d4:	f104 010c 	add.w	r1, r4, #12
 80117d8:	0092      	lsls	r2, r2, #2
 80117da:	300c      	adds	r0, #12
 80117dc:	f7fd fa30 	bl	800ec40 <memcpy>
 80117e0:	4621      	mov	r1, r4
 80117e2:	ee18 0a10 	vmov	r0, s16
 80117e6:	f000 f94f 	bl	8011a88 <_Bfree>
 80117ea:	464c      	mov	r4, r9
 80117ec:	6923      	ldr	r3, [r4, #16]
 80117ee:	1c5a      	adds	r2, r3, #1
 80117f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80117f4:	6122      	str	r2, [r4, #16]
 80117f6:	2201      	movs	r2, #1
 80117f8:	615a      	str	r2, [r3, #20]
 80117fa:	e7bb      	b.n	8011774 <__gethex+0x3c8>
 80117fc:	6922      	ldr	r2, [r4, #16]
 80117fe:	455a      	cmp	r2, fp
 8011800:	dd0b      	ble.n	801181a <__gethex+0x46e>
 8011802:	2101      	movs	r1, #1
 8011804:	4620      	mov	r0, r4
 8011806:	f7ff fd69 	bl	80112dc <rshift>
 801180a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801180e:	3501      	adds	r5, #1
 8011810:	42ab      	cmp	r3, r5
 8011812:	f6ff aed0 	blt.w	80115b6 <__gethex+0x20a>
 8011816:	2701      	movs	r7, #1
 8011818:	e7c0      	b.n	801179c <__gethex+0x3f0>
 801181a:	f016 061f 	ands.w	r6, r6, #31
 801181e:	d0fa      	beq.n	8011816 <__gethex+0x46a>
 8011820:	4453      	add	r3, sl
 8011822:	f1c6 0620 	rsb	r6, r6, #32
 8011826:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801182a:	f000 f9df 	bl	8011bec <__hi0bits>
 801182e:	42b0      	cmp	r0, r6
 8011830:	dbe7      	blt.n	8011802 <__gethex+0x456>
 8011832:	e7f0      	b.n	8011816 <__gethex+0x46a>
 8011834:	08014a57 	.word	0x08014a57

08011838 <L_shift>:
 8011838:	f1c2 0208 	rsb	r2, r2, #8
 801183c:	0092      	lsls	r2, r2, #2
 801183e:	b570      	push	{r4, r5, r6, lr}
 8011840:	f1c2 0620 	rsb	r6, r2, #32
 8011844:	6843      	ldr	r3, [r0, #4]
 8011846:	6804      	ldr	r4, [r0, #0]
 8011848:	fa03 f506 	lsl.w	r5, r3, r6
 801184c:	432c      	orrs	r4, r5
 801184e:	40d3      	lsrs	r3, r2
 8011850:	6004      	str	r4, [r0, #0]
 8011852:	f840 3f04 	str.w	r3, [r0, #4]!
 8011856:	4288      	cmp	r0, r1
 8011858:	d3f4      	bcc.n	8011844 <L_shift+0xc>
 801185a:	bd70      	pop	{r4, r5, r6, pc}

0801185c <__match>:
 801185c:	b530      	push	{r4, r5, lr}
 801185e:	6803      	ldr	r3, [r0, #0]
 8011860:	3301      	adds	r3, #1
 8011862:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011866:	b914      	cbnz	r4, 801186e <__match+0x12>
 8011868:	6003      	str	r3, [r0, #0]
 801186a:	2001      	movs	r0, #1
 801186c:	bd30      	pop	{r4, r5, pc}
 801186e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011872:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011876:	2d19      	cmp	r5, #25
 8011878:	bf98      	it	ls
 801187a:	3220      	addls	r2, #32
 801187c:	42a2      	cmp	r2, r4
 801187e:	d0f0      	beq.n	8011862 <__match+0x6>
 8011880:	2000      	movs	r0, #0
 8011882:	e7f3      	b.n	801186c <__match+0x10>

08011884 <__hexnan>:
 8011884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011888:	680b      	ldr	r3, [r1, #0]
 801188a:	115e      	asrs	r6, r3, #5
 801188c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011890:	f013 031f 	ands.w	r3, r3, #31
 8011894:	b087      	sub	sp, #28
 8011896:	bf18      	it	ne
 8011898:	3604      	addne	r6, #4
 801189a:	2500      	movs	r5, #0
 801189c:	1f37      	subs	r7, r6, #4
 801189e:	4690      	mov	r8, r2
 80118a0:	6802      	ldr	r2, [r0, #0]
 80118a2:	9301      	str	r3, [sp, #4]
 80118a4:	4682      	mov	sl, r0
 80118a6:	f846 5c04 	str.w	r5, [r6, #-4]
 80118aa:	46b9      	mov	r9, r7
 80118ac:	463c      	mov	r4, r7
 80118ae:	9502      	str	r5, [sp, #8]
 80118b0:	46ab      	mov	fp, r5
 80118b2:	7851      	ldrb	r1, [r2, #1]
 80118b4:	1c53      	adds	r3, r2, #1
 80118b6:	9303      	str	r3, [sp, #12]
 80118b8:	b341      	cbz	r1, 801190c <__hexnan+0x88>
 80118ba:	4608      	mov	r0, r1
 80118bc:	9205      	str	r2, [sp, #20]
 80118be:	9104      	str	r1, [sp, #16]
 80118c0:	f7ff fd5e 	bl	8011380 <__hexdig_fun>
 80118c4:	2800      	cmp	r0, #0
 80118c6:	d14f      	bne.n	8011968 <__hexnan+0xe4>
 80118c8:	9904      	ldr	r1, [sp, #16]
 80118ca:	9a05      	ldr	r2, [sp, #20]
 80118cc:	2920      	cmp	r1, #32
 80118ce:	d818      	bhi.n	8011902 <__hexnan+0x7e>
 80118d0:	9b02      	ldr	r3, [sp, #8]
 80118d2:	459b      	cmp	fp, r3
 80118d4:	dd13      	ble.n	80118fe <__hexnan+0x7a>
 80118d6:	454c      	cmp	r4, r9
 80118d8:	d206      	bcs.n	80118e8 <__hexnan+0x64>
 80118da:	2d07      	cmp	r5, #7
 80118dc:	dc04      	bgt.n	80118e8 <__hexnan+0x64>
 80118de:	462a      	mov	r2, r5
 80118e0:	4649      	mov	r1, r9
 80118e2:	4620      	mov	r0, r4
 80118e4:	f7ff ffa8 	bl	8011838 <L_shift>
 80118e8:	4544      	cmp	r4, r8
 80118ea:	d950      	bls.n	801198e <__hexnan+0x10a>
 80118ec:	2300      	movs	r3, #0
 80118ee:	f1a4 0904 	sub.w	r9, r4, #4
 80118f2:	f844 3c04 	str.w	r3, [r4, #-4]
 80118f6:	f8cd b008 	str.w	fp, [sp, #8]
 80118fa:	464c      	mov	r4, r9
 80118fc:	461d      	mov	r5, r3
 80118fe:	9a03      	ldr	r2, [sp, #12]
 8011900:	e7d7      	b.n	80118b2 <__hexnan+0x2e>
 8011902:	2929      	cmp	r1, #41	; 0x29
 8011904:	d156      	bne.n	80119b4 <__hexnan+0x130>
 8011906:	3202      	adds	r2, #2
 8011908:	f8ca 2000 	str.w	r2, [sl]
 801190c:	f1bb 0f00 	cmp.w	fp, #0
 8011910:	d050      	beq.n	80119b4 <__hexnan+0x130>
 8011912:	454c      	cmp	r4, r9
 8011914:	d206      	bcs.n	8011924 <__hexnan+0xa0>
 8011916:	2d07      	cmp	r5, #7
 8011918:	dc04      	bgt.n	8011924 <__hexnan+0xa0>
 801191a:	462a      	mov	r2, r5
 801191c:	4649      	mov	r1, r9
 801191e:	4620      	mov	r0, r4
 8011920:	f7ff ff8a 	bl	8011838 <L_shift>
 8011924:	4544      	cmp	r4, r8
 8011926:	d934      	bls.n	8011992 <__hexnan+0x10e>
 8011928:	f1a8 0204 	sub.w	r2, r8, #4
 801192c:	4623      	mov	r3, r4
 801192e:	f853 1b04 	ldr.w	r1, [r3], #4
 8011932:	f842 1f04 	str.w	r1, [r2, #4]!
 8011936:	429f      	cmp	r7, r3
 8011938:	d2f9      	bcs.n	801192e <__hexnan+0xaa>
 801193a:	1b3b      	subs	r3, r7, r4
 801193c:	f023 0303 	bic.w	r3, r3, #3
 8011940:	3304      	adds	r3, #4
 8011942:	3401      	adds	r4, #1
 8011944:	3e03      	subs	r6, #3
 8011946:	42b4      	cmp	r4, r6
 8011948:	bf88      	it	hi
 801194a:	2304      	movhi	r3, #4
 801194c:	4443      	add	r3, r8
 801194e:	2200      	movs	r2, #0
 8011950:	f843 2b04 	str.w	r2, [r3], #4
 8011954:	429f      	cmp	r7, r3
 8011956:	d2fb      	bcs.n	8011950 <__hexnan+0xcc>
 8011958:	683b      	ldr	r3, [r7, #0]
 801195a:	b91b      	cbnz	r3, 8011964 <__hexnan+0xe0>
 801195c:	4547      	cmp	r7, r8
 801195e:	d127      	bne.n	80119b0 <__hexnan+0x12c>
 8011960:	2301      	movs	r3, #1
 8011962:	603b      	str	r3, [r7, #0]
 8011964:	2005      	movs	r0, #5
 8011966:	e026      	b.n	80119b6 <__hexnan+0x132>
 8011968:	3501      	adds	r5, #1
 801196a:	2d08      	cmp	r5, #8
 801196c:	f10b 0b01 	add.w	fp, fp, #1
 8011970:	dd06      	ble.n	8011980 <__hexnan+0xfc>
 8011972:	4544      	cmp	r4, r8
 8011974:	d9c3      	bls.n	80118fe <__hexnan+0x7a>
 8011976:	2300      	movs	r3, #0
 8011978:	f844 3c04 	str.w	r3, [r4, #-4]
 801197c:	2501      	movs	r5, #1
 801197e:	3c04      	subs	r4, #4
 8011980:	6822      	ldr	r2, [r4, #0]
 8011982:	f000 000f 	and.w	r0, r0, #15
 8011986:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801198a:	6022      	str	r2, [r4, #0]
 801198c:	e7b7      	b.n	80118fe <__hexnan+0x7a>
 801198e:	2508      	movs	r5, #8
 8011990:	e7b5      	b.n	80118fe <__hexnan+0x7a>
 8011992:	9b01      	ldr	r3, [sp, #4]
 8011994:	2b00      	cmp	r3, #0
 8011996:	d0df      	beq.n	8011958 <__hexnan+0xd4>
 8011998:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801199c:	f1c3 0320 	rsb	r3, r3, #32
 80119a0:	fa22 f303 	lsr.w	r3, r2, r3
 80119a4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80119a8:	401a      	ands	r2, r3
 80119aa:	f846 2c04 	str.w	r2, [r6, #-4]
 80119ae:	e7d3      	b.n	8011958 <__hexnan+0xd4>
 80119b0:	3f04      	subs	r7, #4
 80119b2:	e7d1      	b.n	8011958 <__hexnan+0xd4>
 80119b4:	2004      	movs	r0, #4
 80119b6:	b007      	add	sp, #28
 80119b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080119bc <_localeconv_r>:
 80119bc:	4800      	ldr	r0, [pc, #0]	; (80119c0 <_localeconv_r+0x4>)
 80119be:	4770      	bx	lr
 80119c0:	20000394 	.word	0x20000394

080119c4 <__retarget_lock_init_recursive>:
 80119c4:	4770      	bx	lr

080119c6 <__retarget_lock_acquire_recursive>:
 80119c6:	4770      	bx	lr

080119c8 <__retarget_lock_release_recursive>:
 80119c8:	4770      	bx	lr

080119ca <__ascii_mbtowc>:
 80119ca:	b082      	sub	sp, #8
 80119cc:	b901      	cbnz	r1, 80119d0 <__ascii_mbtowc+0x6>
 80119ce:	a901      	add	r1, sp, #4
 80119d0:	b142      	cbz	r2, 80119e4 <__ascii_mbtowc+0x1a>
 80119d2:	b14b      	cbz	r3, 80119e8 <__ascii_mbtowc+0x1e>
 80119d4:	7813      	ldrb	r3, [r2, #0]
 80119d6:	600b      	str	r3, [r1, #0]
 80119d8:	7812      	ldrb	r2, [r2, #0]
 80119da:	1e10      	subs	r0, r2, #0
 80119dc:	bf18      	it	ne
 80119de:	2001      	movne	r0, #1
 80119e0:	b002      	add	sp, #8
 80119e2:	4770      	bx	lr
 80119e4:	4610      	mov	r0, r2
 80119e6:	e7fb      	b.n	80119e0 <__ascii_mbtowc+0x16>
 80119e8:	f06f 0001 	mvn.w	r0, #1
 80119ec:	e7f8      	b.n	80119e0 <__ascii_mbtowc+0x16>
	...

080119f0 <__malloc_lock>:
 80119f0:	4801      	ldr	r0, [pc, #4]	; (80119f8 <__malloc_lock+0x8>)
 80119f2:	f7ff bfe8 	b.w	80119c6 <__retarget_lock_acquire_recursive>
 80119f6:	bf00      	nop
 80119f8:	200036d0 	.word	0x200036d0

080119fc <__malloc_unlock>:
 80119fc:	4801      	ldr	r0, [pc, #4]	; (8011a04 <__malloc_unlock+0x8>)
 80119fe:	f7ff bfe3 	b.w	80119c8 <__retarget_lock_release_recursive>
 8011a02:	bf00      	nop
 8011a04:	200036d0 	.word	0x200036d0

08011a08 <_Balloc>:
 8011a08:	b570      	push	{r4, r5, r6, lr}
 8011a0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011a0c:	4604      	mov	r4, r0
 8011a0e:	460d      	mov	r5, r1
 8011a10:	b976      	cbnz	r6, 8011a30 <_Balloc+0x28>
 8011a12:	2010      	movs	r0, #16
 8011a14:	f7fd f904 	bl	800ec20 <malloc>
 8011a18:	4602      	mov	r2, r0
 8011a1a:	6260      	str	r0, [r4, #36]	; 0x24
 8011a1c:	b920      	cbnz	r0, 8011a28 <_Balloc+0x20>
 8011a1e:	4b18      	ldr	r3, [pc, #96]	; (8011a80 <_Balloc+0x78>)
 8011a20:	4818      	ldr	r0, [pc, #96]	; (8011a84 <_Balloc+0x7c>)
 8011a22:	2166      	movs	r1, #102	; 0x66
 8011a24:	f000 fe76 	bl	8012714 <__assert_func>
 8011a28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011a2c:	6006      	str	r6, [r0, #0]
 8011a2e:	60c6      	str	r6, [r0, #12]
 8011a30:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011a32:	68f3      	ldr	r3, [r6, #12]
 8011a34:	b183      	cbz	r3, 8011a58 <_Balloc+0x50>
 8011a36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a38:	68db      	ldr	r3, [r3, #12]
 8011a3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011a3e:	b9b8      	cbnz	r0, 8011a70 <_Balloc+0x68>
 8011a40:	2101      	movs	r1, #1
 8011a42:	fa01 f605 	lsl.w	r6, r1, r5
 8011a46:	1d72      	adds	r2, r6, #5
 8011a48:	0092      	lsls	r2, r2, #2
 8011a4a:	4620      	mov	r0, r4
 8011a4c:	f7fd f90e 	bl	800ec6c <_calloc_r>
 8011a50:	b160      	cbz	r0, 8011a6c <_Balloc+0x64>
 8011a52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011a56:	e00e      	b.n	8011a76 <_Balloc+0x6e>
 8011a58:	2221      	movs	r2, #33	; 0x21
 8011a5a:	2104      	movs	r1, #4
 8011a5c:	4620      	mov	r0, r4
 8011a5e:	f7fd f905 	bl	800ec6c <_calloc_r>
 8011a62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a64:	60f0      	str	r0, [r6, #12]
 8011a66:	68db      	ldr	r3, [r3, #12]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d1e4      	bne.n	8011a36 <_Balloc+0x2e>
 8011a6c:	2000      	movs	r0, #0
 8011a6e:	bd70      	pop	{r4, r5, r6, pc}
 8011a70:	6802      	ldr	r2, [r0, #0]
 8011a72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011a76:	2300      	movs	r3, #0
 8011a78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011a7c:	e7f7      	b.n	8011a6e <_Balloc+0x66>
 8011a7e:	bf00      	nop
 8011a80:	080149e5 	.word	0x080149e5
 8011a84:	08014ae4 	.word	0x08014ae4

08011a88 <_Bfree>:
 8011a88:	b570      	push	{r4, r5, r6, lr}
 8011a8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011a8c:	4605      	mov	r5, r0
 8011a8e:	460c      	mov	r4, r1
 8011a90:	b976      	cbnz	r6, 8011ab0 <_Bfree+0x28>
 8011a92:	2010      	movs	r0, #16
 8011a94:	f7fd f8c4 	bl	800ec20 <malloc>
 8011a98:	4602      	mov	r2, r0
 8011a9a:	6268      	str	r0, [r5, #36]	; 0x24
 8011a9c:	b920      	cbnz	r0, 8011aa8 <_Bfree+0x20>
 8011a9e:	4b09      	ldr	r3, [pc, #36]	; (8011ac4 <_Bfree+0x3c>)
 8011aa0:	4809      	ldr	r0, [pc, #36]	; (8011ac8 <_Bfree+0x40>)
 8011aa2:	218a      	movs	r1, #138	; 0x8a
 8011aa4:	f000 fe36 	bl	8012714 <__assert_func>
 8011aa8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011aac:	6006      	str	r6, [r0, #0]
 8011aae:	60c6      	str	r6, [r0, #12]
 8011ab0:	b13c      	cbz	r4, 8011ac2 <_Bfree+0x3a>
 8011ab2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011ab4:	6862      	ldr	r2, [r4, #4]
 8011ab6:	68db      	ldr	r3, [r3, #12]
 8011ab8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011abc:	6021      	str	r1, [r4, #0]
 8011abe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011ac2:	bd70      	pop	{r4, r5, r6, pc}
 8011ac4:	080149e5 	.word	0x080149e5
 8011ac8:	08014ae4 	.word	0x08014ae4

08011acc <__multadd>:
 8011acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ad0:	690d      	ldr	r5, [r1, #16]
 8011ad2:	4607      	mov	r7, r0
 8011ad4:	460c      	mov	r4, r1
 8011ad6:	461e      	mov	r6, r3
 8011ad8:	f101 0c14 	add.w	ip, r1, #20
 8011adc:	2000      	movs	r0, #0
 8011ade:	f8dc 3000 	ldr.w	r3, [ip]
 8011ae2:	b299      	uxth	r1, r3
 8011ae4:	fb02 6101 	mla	r1, r2, r1, r6
 8011ae8:	0c1e      	lsrs	r6, r3, #16
 8011aea:	0c0b      	lsrs	r3, r1, #16
 8011aec:	fb02 3306 	mla	r3, r2, r6, r3
 8011af0:	b289      	uxth	r1, r1
 8011af2:	3001      	adds	r0, #1
 8011af4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011af8:	4285      	cmp	r5, r0
 8011afa:	f84c 1b04 	str.w	r1, [ip], #4
 8011afe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011b02:	dcec      	bgt.n	8011ade <__multadd+0x12>
 8011b04:	b30e      	cbz	r6, 8011b4a <__multadd+0x7e>
 8011b06:	68a3      	ldr	r3, [r4, #8]
 8011b08:	42ab      	cmp	r3, r5
 8011b0a:	dc19      	bgt.n	8011b40 <__multadd+0x74>
 8011b0c:	6861      	ldr	r1, [r4, #4]
 8011b0e:	4638      	mov	r0, r7
 8011b10:	3101      	adds	r1, #1
 8011b12:	f7ff ff79 	bl	8011a08 <_Balloc>
 8011b16:	4680      	mov	r8, r0
 8011b18:	b928      	cbnz	r0, 8011b26 <__multadd+0x5a>
 8011b1a:	4602      	mov	r2, r0
 8011b1c:	4b0c      	ldr	r3, [pc, #48]	; (8011b50 <__multadd+0x84>)
 8011b1e:	480d      	ldr	r0, [pc, #52]	; (8011b54 <__multadd+0x88>)
 8011b20:	21b5      	movs	r1, #181	; 0xb5
 8011b22:	f000 fdf7 	bl	8012714 <__assert_func>
 8011b26:	6922      	ldr	r2, [r4, #16]
 8011b28:	3202      	adds	r2, #2
 8011b2a:	f104 010c 	add.w	r1, r4, #12
 8011b2e:	0092      	lsls	r2, r2, #2
 8011b30:	300c      	adds	r0, #12
 8011b32:	f7fd f885 	bl	800ec40 <memcpy>
 8011b36:	4621      	mov	r1, r4
 8011b38:	4638      	mov	r0, r7
 8011b3a:	f7ff ffa5 	bl	8011a88 <_Bfree>
 8011b3e:	4644      	mov	r4, r8
 8011b40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011b44:	3501      	adds	r5, #1
 8011b46:	615e      	str	r6, [r3, #20]
 8011b48:	6125      	str	r5, [r4, #16]
 8011b4a:	4620      	mov	r0, r4
 8011b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b50:	08014a57 	.word	0x08014a57
 8011b54:	08014ae4 	.word	0x08014ae4

08011b58 <__s2b>:
 8011b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b5c:	460c      	mov	r4, r1
 8011b5e:	4615      	mov	r5, r2
 8011b60:	461f      	mov	r7, r3
 8011b62:	2209      	movs	r2, #9
 8011b64:	3308      	adds	r3, #8
 8011b66:	4606      	mov	r6, r0
 8011b68:	fb93 f3f2 	sdiv	r3, r3, r2
 8011b6c:	2100      	movs	r1, #0
 8011b6e:	2201      	movs	r2, #1
 8011b70:	429a      	cmp	r2, r3
 8011b72:	db09      	blt.n	8011b88 <__s2b+0x30>
 8011b74:	4630      	mov	r0, r6
 8011b76:	f7ff ff47 	bl	8011a08 <_Balloc>
 8011b7a:	b940      	cbnz	r0, 8011b8e <__s2b+0x36>
 8011b7c:	4602      	mov	r2, r0
 8011b7e:	4b19      	ldr	r3, [pc, #100]	; (8011be4 <__s2b+0x8c>)
 8011b80:	4819      	ldr	r0, [pc, #100]	; (8011be8 <__s2b+0x90>)
 8011b82:	21ce      	movs	r1, #206	; 0xce
 8011b84:	f000 fdc6 	bl	8012714 <__assert_func>
 8011b88:	0052      	lsls	r2, r2, #1
 8011b8a:	3101      	adds	r1, #1
 8011b8c:	e7f0      	b.n	8011b70 <__s2b+0x18>
 8011b8e:	9b08      	ldr	r3, [sp, #32]
 8011b90:	6143      	str	r3, [r0, #20]
 8011b92:	2d09      	cmp	r5, #9
 8011b94:	f04f 0301 	mov.w	r3, #1
 8011b98:	6103      	str	r3, [r0, #16]
 8011b9a:	dd16      	ble.n	8011bca <__s2b+0x72>
 8011b9c:	f104 0909 	add.w	r9, r4, #9
 8011ba0:	46c8      	mov	r8, r9
 8011ba2:	442c      	add	r4, r5
 8011ba4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011ba8:	4601      	mov	r1, r0
 8011baa:	3b30      	subs	r3, #48	; 0x30
 8011bac:	220a      	movs	r2, #10
 8011bae:	4630      	mov	r0, r6
 8011bb0:	f7ff ff8c 	bl	8011acc <__multadd>
 8011bb4:	45a0      	cmp	r8, r4
 8011bb6:	d1f5      	bne.n	8011ba4 <__s2b+0x4c>
 8011bb8:	f1a5 0408 	sub.w	r4, r5, #8
 8011bbc:	444c      	add	r4, r9
 8011bbe:	1b2d      	subs	r5, r5, r4
 8011bc0:	1963      	adds	r3, r4, r5
 8011bc2:	42bb      	cmp	r3, r7
 8011bc4:	db04      	blt.n	8011bd0 <__s2b+0x78>
 8011bc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011bca:	340a      	adds	r4, #10
 8011bcc:	2509      	movs	r5, #9
 8011bce:	e7f6      	b.n	8011bbe <__s2b+0x66>
 8011bd0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011bd4:	4601      	mov	r1, r0
 8011bd6:	3b30      	subs	r3, #48	; 0x30
 8011bd8:	220a      	movs	r2, #10
 8011bda:	4630      	mov	r0, r6
 8011bdc:	f7ff ff76 	bl	8011acc <__multadd>
 8011be0:	e7ee      	b.n	8011bc0 <__s2b+0x68>
 8011be2:	bf00      	nop
 8011be4:	08014a57 	.word	0x08014a57
 8011be8:	08014ae4 	.word	0x08014ae4

08011bec <__hi0bits>:
 8011bec:	0c03      	lsrs	r3, r0, #16
 8011bee:	041b      	lsls	r3, r3, #16
 8011bf0:	b9d3      	cbnz	r3, 8011c28 <__hi0bits+0x3c>
 8011bf2:	0400      	lsls	r0, r0, #16
 8011bf4:	2310      	movs	r3, #16
 8011bf6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011bfa:	bf04      	itt	eq
 8011bfc:	0200      	lsleq	r0, r0, #8
 8011bfe:	3308      	addeq	r3, #8
 8011c00:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011c04:	bf04      	itt	eq
 8011c06:	0100      	lsleq	r0, r0, #4
 8011c08:	3304      	addeq	r3, #4
 8011c0a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011c0e:	bf04      	itt	eq
 8011c10:	0080      	lsleq	r0, r0, #2
 8011c12:	3302      	addeq	r3, #2
 8011c14:	2800      	cmp	r0, #0
 8011c16:	db05      	blt.n	8011c24 <__hi0bits+0x38>
 8011c18:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011c1c:	f103 0301 	add.w	r3, r3, #1
 8011c20:	bf08      	it	eq
 8011c22:	2320      	moveq	r3, #32
 8011c24:	4618      	mov	r0, r3
 8011c26:	4770      	bx	lr
 8011c28:	2300      	movs	r3, #0
 8011c2a:	e7e4      	b.n	8011bf6 <__hi0bits+0xa>

08011c2c <__lo0bits>:
 8011c2c:	6803      	ldr	r3, [r0, #0]
 8011c2e:	f013 0207 	ands.w	r2, r3, #7
 8011c32:	4601      	mov	r1, r0
 8011c34:	d00b      	beq.n	8011c4e <__lo0bits+0x22>
 8011c36:	07da      	lsls	r2, r3, #31
 8011c38:	d423      	bmi.n	8011c82 <__lo0bits+0x56>
 8011c3a:	0798      	lsls	r0, r3, #30
 8011c3c:	bf49      	itett	mi
 8011c3e:	085b      	lsrmi	r3, r3, #1
 8011c40:	089b      	lsrpl	r3, r3, #2
 8011c42:	2001      	movmi	r0, #1
 8011c44:	600b      	strmi	r3, [r1, #0]
 8011c46:	bf5c      	itt	pl
 8011c48:	600b      	strpl	r3, [r1, #0]
 8011c4a:	2002      	movpl	r0, #2
 8011c4c:	4770      	bx	lr
 8011c4e:	b298      	uxth	r0, r3
 8011c50:	b9a8      	cbnz	r0, 8011c7e <__lo0bits+0x52>
 8011c52:	0c1b      	lsrs	r3, r3, #16
 8011c54:	2010      	movs	r0, #16
 8011c56:	b2da      	uxtb	r2, r3
 8011c58:	b90a      	cbnz	r2, 8011c5e <__lo0bits+0x32>
 8011c5a:	3008      	adds	r0, #8
 8011c5c:	0a1b      	lsrs	r3, r3, #8
 8011c5e:	071a      	lsls	r2, r3, #28
 8011c60:	bf04      	itt	eq
 8011c62:	091b      	lsreq	r3, r3, #4
 8011c64:	3004      	addeq	r0, #4
 8011c66:	079a      	lsls	r2, r3, #30
 8011c68:	bf04      	itt	eq
 8011c6a:	089b      	lsreq	r3, r3, #2
 8011c6c:	3002      	addeq	r0, #2
 8011c6e:	07da      	lsls	r2, r3, #31
 8011c70:	d403      	bmi.n	8011c7a <__lo0bits+0x4e>
 8011c72:	085b      	lsrs	r3, r3, #1
 8011c74:	f100 0001 	add.w	r0, r0, #1
 8011c78:	d005      	beq.n	8011c86 <__lo0bits+0x5a>
 8011c7a:	600b      	str	r3, [r1, #0]
 8011c7c:	4770      	bx	lr
 8011c7e:	4610      	mov	r0, r2
 8011c80:	e7e9      	b.n	8011c56 <__lo0bits+0x2a>
 8011c82:	2000      	movs	r0, #0
 8011c84:	4770      	bx	lr
 8011c86:	2020      	movs	r0, #32
 8011c88:	4770      	bx	lr
	...

08011c8c <__i2b>:
 8011c8c:	b510      	push	{r4, lr}
 8011c8e:	460c      	mov	r4, r1
 8011c90:	2101      	movs	r1, #1
 8011c92:	f7ff feb9 	bl	8011a08 <_Balloc>
 8011c96:	4602      	mov	r2, r0
 8011c98:	b928      	cbnz	r0, 8011ca6 <__i2b+0x1a>
 8011c9a:	4b05      	ldr	r3, [pc, #20]	; (8011cb0 <__i2b+0x24>)
 8011c9c:	4805      	ldr	r0, [pc, #20]	; (8011cb4 <__i2b+0x28>)
 8011c9e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011ca2:	f000 fd37 	bl	8012714 <__assert_func>
 8011ca6:	2301      	movs	r3, #1
 8011ca8:	6144      	str	r4, [r0, #20]
 8011caa:	6103      	str	r3, [r0, #16]
 8011cac:	bd10      	pop	{r4, pc}
 8011cae:	bf00      	nop
 8011cb0:	08014a57 	.word	0x08014a57
 8011cb4:	08014ae4 	.word	0x08014ae4

08011cb8 <__multiply>:
 8011cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cbc:	4691      	mov	r9, r2
 8011cbe:	690a      	ldr	r2, [r1, #16]
 8011cc0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011cc4:	429a      	cmp	r2, r3
 8011cc6:	bfb8      	it	lt
 8011cc8:	460b      	movlt	r3, r1
 8011cca:	460c      	mov	r4, r1
 8011ccc:	bfbc      	itt	lt
 8011cce:	464c      	movlt	r4, r9
 8011cd0:	4699      	movlt	r9, r3
 8011cd2:	6927      	ldr	r7, [r4, #16]
 8011cd4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011cd8:	68a3      	ldr	r3, [r4, #8]
 8011cda:	6861      	ldr	r1, [r4, #4]
 8011cdc:	eb07 060a 	add.w	r6, r7, sl
 8011ce0:	42b3      	cmp	r3, r6
 8011ce2:	b085      	sub	sp, #20
 8011ce4:	bfb8      	it	lt
 8011ce6:	3101      	addlt	r1, #1
 8011ce8:	f7ff fe8e 	bl	8011a08 <_Balloc>
 8011cec:	b930      	cbnz	r0, 8011cfc <__multiply+0x44>
 8011cee:	4602      	mov	r2, r0
 8011cf0:	4b44      	ldr	r3, [pc, #272]	; (8011e04 <__multiply+0x14c>)
 8011cf2:	4845      	ldr	r0, [pc, #276]	; (8011e08 <__multiply+0x150>)
 8011cf4:	f240 115d 	movw	r1, #349	; 0x15d
 8011cf8:	f000 fd0c 	bl	8012714 <__assert_func>
 8011cfc:	f100 0514 	add.w	r5, r0, #20
 8011d00:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011d04:	462b      	mov	r3, r5
 8011d06:	2200      	movs	r2, #0
 8011d08:	4543      	cmp	r3, r8
 8011d0a:	d321      	bcc.n	8011d50 <__multiply+0x98>
 8011d0c:	f104 0314 	add.w	r3, r4, #20
 8011d10:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011d14:	f109 0314 	add.w	r3, r9, #20
 8011d18:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011d1c:	9202      	str	r2, [sp, #8]
 8011d1e:	1b3a      	subs	r2, r7, r4
 8011d20:	3a15      	subs	r2, #21
 8011d22:	f022 0203 	bic.w	r2, r2, #3
 8011d26:	3204      	adds	r2, #4
 8011d28:	f104 0115 	add.w	r1, r4, #21
 8011d2c:	428f      	cmp	r7, r1
 8011d2e:	bf38      	it	cc
 8011d30:	2204      	movcc	r2, #4
 8011d32:	9201      	str	r2, [sp, #4]
 8011d34:	9a02      	ldr	r2, [sp, #8]
 8011d36:	9303      	str	r3, [sp, #12]
 8011d38:	429a      	cmp	r2, r3
 8011d3a:	d80c      	bhi.n	8011d56 <__multiply+0x9e>
 8011d3c:	2e00      	cmp	r6, #0
 8011d3e:	dd03      	ble.n	8011d48 <__multiply+0x90>
 8011d40:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d05a      	beq.n	8011dfe <__multiply+0x146>
 8011d48:	6106      	str	r6, [r0, #16]
 8011d4a:	b005      	add	sp, #20
 8011d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d50:	f843 2b04 	str.w	r2, [r3], #4
 8011d54:	e7d8      	b.n	8011d08 <__multiply+0x50>
 8011d56:	f8b3 a000 	ldrh.w	sl, [r3]
 8011d5a:	f1ba 0f00 	cmp.w	sl, #0
 8011d5e:	d024      	beq.n	8011daa <__multiply+0xf2>
 8011d60:	f104 0e14 	add.w	lr, r4, #20
 8011d64:	46a9      	mov	r9, r5
 8011d66:	f04f 0c00 	mov.w	ip, #0
 8011d6a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011d6e:	f8d9 1000 	ldr.w	r1, [r9]
 8011d72:	fa1f fb82 	uxth.w	fp, r2
 8011d76:	b289      	uxth	r1, r1
 8011d78:	fb0a 110b 	mla	r1, sl, fp, r1
 8011d7c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011d80:	f8d9 2000 	ldr.w	r2, [r9]
 8011d84:	4461      	add	r1, ip
 8011d86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011d8a:	fb0a c20b 	mla	r2, sl, fp, ip
 8011d8e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011d92:	b289      	uxth	r1, r1
 8011d94:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011d98:	4577      	cmp	r7, lr
 8011d9a:	f849 1b04 	str.w	r1, [r9], #4
 8011d9e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011da2:	d8e2      	bhi.n	8011d6a <__multiply+0xb2>
 8011da4:	9a01      	ldr	r2, [sp, #4]
 8011da6:	f845 c002 	str.w	ip, [r5, r2]
 8011daa:	9a03      	ldr	r2, [sp, #12]
 8011dac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011db0:	3304      	adds	r3, #4
 8011db2:	f1b9 0f00 	cmp.w	r9, #0
 8011db6:	d020      	beq.n	8011dfa <__multiply+0x142>
 8011db8:	6829      	ldr	r1, [r5, #0]
 8011dba:	f104 0c14 	add.w	ip, r4, #20
 8011dbe:	46ae      	mov	lr, r5
 8011dc0:	f04f 0a00 	mov.w	sl, #0
 8011dc4:	f8bc b000 	ldrh.w	fp, [ip]
 8011dc8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011dcc:	fb09 220b 	mla	r2, r9, fp, r2
 8011dd0:	4492      	add	sl, r2
 8011dd2:	b289      	uxth	r1, r1
 8011dd4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011dd8:	f84e 1b04 	str.w	r1, [lr], #4
 8011ddc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011de0:	f8be 1000 	ldrh.w	r1, [lr]
 8011de4:	0c12      	lsrs	r2, r2, #16
 8011de6:	fb09 1102 	mla	r1, r9, r2, r1
 8011dea:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011dee:	4567      	cmp	r7, ip
 8011df0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011df4:	d8e6      	bhi.n	8011dc4 <__multiply+0x10c>
 8011df6:	9a01      	ldr	r2, [sp, #4]
 8011df8:	50a9      	str	r1, [r5, r2]
 8011dfa:	3504      	adds	r5, #4
 8011dfc:	e79a      	b.n	8011d34 <__multiply+0x7c>
 8011dfe:	3e01      	subs	r6, #1
 8011e00:	e79c      	b.n	8011d3c <__multiply+0x84>
 8011e02:	bf00      	nop
 8011e04:	08014a57 	.word	0x08014a57
 8011e08:	08014ae4 	.word	0x08014ae4

08011e0c <__pow5mult>:
 8011e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e10:	4615      	mov	r5, r2
 8011e12:	f012 0203 	ands.w	r2, r2, #3
 8011e16:	4606      	mov	r6, r0
 8011e18:	460f      	mov	r7, r1
 8011e1a:	d007      	beq.n	8011e2c <__pow5mult+0x20>
 8011e1c:	4c25      	ldr	r4, [pc, #148]	; (8011eb4 <__pow5mult+0xa8>)
 8011e1e:	3a01      	subs	r2, #1
 8011e20:	2300      	movs	r3, #0
 8011e22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011e26:	f7ff fe51 	bl	8011acc <__multadd>
 8011e2a:	4607      	mov	r7, r0
 8011e2c:	10ad      	asrs	r5, r5, #2
 8011e2e:	d03d      	beq.n	8011eac <__pow5mult+0xa0>
 8011e30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011e32:	b97c      	cbnz	r4, 8011e54 <__pow5mult+0x48>
 8011e34:	2010      	movs	r0, #16
 8011e36:	f7fc fef3 	bl	800ec20 <malloc>
 8011e3a:	4602      	mov	r2, r0
 8011e3c:	6270      	str	r0, [r6, #36]	; 0x24
 8011e3e:	b928      	cbnz	r0, 8011e4c <__pow5mult+0x40>
 8011e40:	4b1d      	ldr	r3, [pc, #116]	; (8011eb8 <__pow5mult+0xac>)
 8011e42:	481e      	ldr	r0, [pc, #120]	; (8011ebc <__pow5mult+0xb0>)
 8011e44:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011e48:	f000 fc64 	bl	8012714 <__assert_func>
 8011e4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011e50:	6004      	str	r4, [r0, #0]
 8011e52:	60c4      	str	r4, [r0, #12]
 8011e54:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011e58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011e5c:	b94c      	cbnz	r4, 8011e72 <__pow5mult+0x66>
 8011e5e:	f240 2171 	movw	r1, #625	; 0x271
 8011e62:	4630      	mov	r0, r6
 8011e64:	f7ff ff12 	bl	8011c8c <__i2b>
 8011e68:	2300      	movs	r3, #0
 8011e6a:	f8c8 0008 	str.w	r0, [r8, #8]
 8011e6e:	4604      	mov	r4, r0
 8011e70:	6003      	str	r3, [r0, #0]
 8011e72:	f04f 0900 	mov.w	r9, #0
 8011e76:	07eb      	lsls	r3, r5, #31
 8011e78:	d50a      	bpl.n	8011e90 <__pow5mult+0x84>
 8011e7a:	4639      	mov	r1, r7
 8011e7c:	4622      	mov	r2, r4
 8011e7e:	4630      	mov	r0, r6
 8011e80:	f7ff ff1a 	bl	8011cb8 <__multiply>
 8011e84:	4639      	mov	r1, r7
 8011e86:	4680      	mov	r8, r0
 8011e88:	4630      	mov	r0, r6
 8011e8a:	f7ff fdfd 	bl	8011a88 <_Bfree>
 8011e8e:	4647      	mov	r7, r8
 8011e90:	106d      	asrs	r5, r5, #1
 8011e92:	d00b      	beq.n	8011eac <__pow5mult+0xa0>
 8011e94:	6820      	ldr	r0, [r4, #0]
 8011e96:	b938      	cbnz	r0, 8011ea8 <__pow5mult+0x9c>
 8011e98:	4622      	mov	r2, r4
 8011e9a:	4621      	mov	r1, r4
 8011e9c:	4630      	mov	r0, r6
 8011e9e:	f7ff ff0b 	bl	8011cb8 <__multiply>
 8011ea2:	6020      	str	r0, [r4, #0]
 8011ea4:	f8c0 9000 	str.w	r9, [r0]
 8011ea8:	4604      	mov	r4, r0
 8011eaa:	e7e4      	b.n	8011e76 <__pow5mult+0x6a>
 8011eac:	4638      	mov	r0, r7
 8011eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011eb2:	bf00      	nop
 8011eb4:	08014c30 	.word	0x08014c30
 8011eb8:	080149e5 	.word	0x080149e5
 8011ebc:	08014ae4 	.word	0x08014ae4

08011ec0 <__lshift>:
 8011ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ec4:	460c      	mov	r4, r1
 8011ec6:	6849      	ldr	r1, [r1, #4]
 8011ec8:	6923      	ldr	r3, [r4, #16]
 8011eca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011ece:	68a3      	ldr	r3, [r4, #8]
 8011ed0:	4607      	mov	r7, r0
 8011ed2:	4691      	mov	r9, r2
 8011ed4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011ed8:	f108 0601 	add.w	r6, r8, #1
 8011edc:	42b3      	cmp	r3, r6
 8011ede:	db0b      	blt.n	8011ef8 <__lshift+0x38>
 8011ee0:	4638      	mov	r0, r7
 8011ee2:	f7ff fd91 	bl	8011a08 <_Balloc>
 8011ee6:	4605      	mov	r5, r0
 8011ee8:	b948      	cbnz	r0, 8011efe <__lshift+0x3e>
 8011eea:	4602      	mov	r2, r0
 8011eec:	4b2a      	ldr	r3, [pc, #168]	; (8011f98 <__lshift+0xd8>)
 8011eee:	482b      	ldr	r0, [pc, #172]	; (8011f9c <__lshift+0xdc>)
 8011ef0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011ef4:	f000 fc0e 	bl	8012714 <__assert_func>
 8011ef8:	3101      	adds	r1, #1
 8011efa:	005b      	lsls	r3, r3, #1
 8011efc:	e7ee      	b.n	8011edc <__lshift+0x1c>
 8011efe:	2300      	movs	r3, #0
 8011f00:	f100 0114 	add.w	r1, r0, #20
 8011f04:	f100 0210 	add.w	r2, r0, #16
 8011f08:	4618      	mov	r0, r3
 8011f0a:	4553      	cmp	r3, sl
 8011f0c:	db37      	blt.n	8011f7e <__lshift+0xbe>
 8011f0e:	6920      	ldr	r0, [r4, #16]
 8011f10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011f14:	f104 0314 	add.w	r3, r4, #20
 8011f18:	f019 091f 	ands.w	r9, r9, #31
 8011f1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011f20:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011f24:	d02f      	beq.n	8011f86 <__lshift+0xc6>
 8011f26:	f1c9 0e20 	rsb	lr, r9, #32
 8011f2a:	468a      	mov	sl, r1
 8011f2c:	f04f 0c00 	mov.w	ip, #0
 8011f30:	681a      	ldr	r2, [r3, #0]
 8011f32:	fa02 f209 	lsl.w	r2, r2, r9
 8011f36:	ea42 020c 	orr.w	r2, r2, ip
 8011f3a:	f84a 2b04 	str.w	r2, [sl], #4
 8011f3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f42:	4298      	cmp	r0, r3
 8011f44:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011f48:	d8f2      	bhi.n	8011f30 <__lshift+0x70>
 8011f4a:	1b03      	subs	r3, r0, r4
 8011f4c:	3b15      	subs	r3, #21
 8011f4e:	f023 0303 	bic.w	r3, r3, #3
 8011f52:	3304      	adds	r3, #4
 8011f54:	f104 0215 	add.w	r2, r4, #21
 8011f58:	4290      	cmp	r0, r2
 8011f5a:	bf38      	it	cc
 8011f5c:	2304      	movcc	r3, #4
 8011f5e:	f841 c003 	str.w	ip, [r1, r3]
 8011f62:	f1bc 0f00 	cmp.w	ip, #0
 8011f66:	d001      	beq.n	8011f6c <__lshift+0xac>
 8011f68:	f108 0602 	add.w	r6, r8, #2
 8011f6c:	3e01      	subs	r6, #1
 8011f6e:	4638      	mov	r0, r7
 8011f70:	612e      	str	r6, [r5, #16]
 8011f72:	4621      	mov	r1, r4
 8011f74:	f7ff fd88 	bl	8011a88 <_Bfree>
 8011f78:	4628      	mov	r0, r5
 8011f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f7e:	f842 0f04 	str.w	r0, [r2, #4]!
 8011f82:	3301      	adds	r3, #1
 8011f84:	e7c1      	b.n	8011f0a <__lshift+0x4a>
 8011f86:	3904      	subs	r1, #4
 8011f88:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f8c:	f841 2f04 	str.w	r2, [r1, #4]!
 8011f90:	4298      	cmp	r0, r3
 8011f92:	d8f9      	bhi.n	8011f88 <__lshift+0xc8>
 8011f94:	e7ea      	b.n	8011f6c <__lshift+0xac>
 8011f96:	bf00      	nop
 8011f98:	08014a57 	.word	0x08014a57
 8011f9c:	08014ae4 	.word	0x08014ae4

08011fa0 <__mcmp>:
 8011fa0:	b530      	push	{r4, r5, lr}
 8011fa2:	6902      	ldr	r2, [r0, #16]
 8011fa4:	690c      	ldr	r4, [r1, #16]
 8011fa6:	1b12      	subs	r2, r2, r4
 8011fa8:	d10e      	bne.n	8011fc8 <__mcmp+0x28>
 8011faa:	f100 0314 	add.w	r3, r0, #20
 8011fae:	3114      	adds	r1, #20
 8011fb0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011fb4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011fb8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011fbc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011fc0:	42a5      	cmp	r5, r4
 8011fc2:	d003      	beq.n	8011fcc <__mcmp+0x2c>
 8011fc4:	d305      	bcc.n	8011fd2 <__mcmp+0x32>
 8011fc6:	2201      	movs	r2, #1
 8011fc8:	4610      	mov	r0, r2
 8011fca:	bd30      	pop	{r4, r5, pc}
 8011fcc:	4283      	cmp	r3, r0
 8011fce:	d3f3      	bcc.n	8011fb8 <__mcmp+0x18>
 8011fd0:	e7fa      	b.n	8011fc8 <__mcmp+0x28>
 8011fd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011fd6:	e7f7      	b.n	8011fc8 <__mcmp+0x28>

08011fd8 <__mdiff>:
 8011fd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fdc:	460c      	mov	r4, r1
 8011fde:	4606      	mov	r6, r0
 8011fe0:	4611      	mov	r1, r2
 8011fe2:	4620      	mov	r0, r4
 8011fe4:	4690      	mov	r8, r2
 8011fe6:	f7ff ffdb 	bl	8011fa0 <__mcmp>
 8011fea:	1e05      	subs	r5, r0, #0
 8011fec:	d110      	bne.n	8012010 <__mdiff+0x38>
 8011fee:	4629      	mov	r1, r5
 8011ff0:	4630      	mov	r0, r6
 8011ff2:	f7ff fd09 	bl	8011a08 <_Balloc>
 8011ff6:	b930      	cbnz	r0, 8012006 <__mdiff+0x2e>
 8011ff8:	4b3a      	ldr	r3, [pc, #232]	; (80120e4 <__mdiff+0x10c>)
 8011ffa:	4602      	mov	r2, r0
 8011ffc:	f240 2132 	movw	r1, #562	; 0x232
 8012000:	4839      	ldr	r0, [pc, #228]	; (80120e8 <__mdiff+0x110>)
 8012002:	f000 fb87 	bl	8012714 <__assert_func>
 8012006:	2301      	movs	r3, #1
 8012008:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801200c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012010:	bfa4      	itt	ge
 8012012:	4643      	movge	r3, r8
 8012014:	46a0      	movge	r8, r4
 8012016:	4630      	mov	r0, r6
 8012018:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801201c:	bfa6      	itte	ge
 801201e:	461c      	movge	r4, r3
 8012020:	2500      	movge	r5, #0
 8012022:	2501      	movlt	r5, #1
 8012024:	f7ff fcf0 	bl	8011a08 <_Balloc>
 8012028:	b920      	cbnz	r0, 8012034 <__mdiff+0x5c>
 801202a:	4b2e      	ldr	r3, [pc, #184]	; (80120e4 <__mdiff+0x10c>)
 801202c:	4602      	mov	r2, r0
 801202e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012032:	e7e5      	b.n	8012000 <__mdiff+0x28>
 8012034:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012038:	6926      	ldr	r6, [r4, #16]
 801203a:	60c5      	str	r5, [r0, #12]
 801203c:	f104 0914 	add.w	r9, r4, #20
 8012040:	f108 0514 	add.w	r5, r8, #20
 8012044:	f100 0e14 	add.w	lr, r0, #20
 8012048:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801204c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012050:	f108 0210 	add.w	r2, r8, #16
 8012054:	46f2      	mov	sl, lr
 8012056:	2100      	movs	r1, #0
 8012058:	f859 3b04 	ldr.w	r3, [r9], #4
 801205c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012060:	fa1f f883 	uxth.w	r8, r3
 8012064:	fa11 f18b 	uxtah	r1, r1, fp
 8012068:	0c1b      	lsrs	r3, r3, #16
 801206a:	eba1 0808 	sub.w	r8, r1, r8
 801206e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012072:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012076:	fa1f f888 	uxth.w	r8, r8
 801207a:	1419      	asrs	r1, r3, #16
 801207c:	454e      	cmp	r6, r9
 801207e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012082:	f84a 3b04 	str.w	r3, [sl], #4
 8012086:	d8e7      	bhi.n	8012058 <__mdiff+0x80>
 8012088:	1b33      	subs	r3, r6, r4
 801208a:	3b15      	subs	r3, #21
 801208c:	f023 0303 	bic.w	r3, r3, #3
 8012090:	3304      	adds	r3, #4
 8012092:	3415      	adds	r4, #21
 8012094:	42a6      	cmp	r6, r4
 8012096:	bf38      	it	cc
 8012098:	2304      	movcc	r3, #4
 801209a:	441d      	add	r5, r3
 801209c:	4473      	add	r3, lr
 801209e:	469e      	mov	lr, r3
 80120a0:	462e      	mov	r6, r5
 80120a2:	4566      	cmp	r6, ip
 80120a4:	d30e      	bcc.n	80120c4 <__mdiff+0xec>
 80120a6:	f10c 0203 	add.w	r2, ip, #3
 80120aa:	1b52      	subs	r2, r2, r5
 80120ac:	f022 0203 	bic.w	r2, r2, #3
 80120b0:	3d03      	subs	r5, #3
 80120b2:	45ac      	cmp	ip, r5
 80120b4:	bf38      	it	cc
 80120b6:	2200      	movcc	r2, #0
 80120b8:	441a      	add	r2, r3
 80120ba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80120be:	b17b      	cbz	r3, 80120e0 <__mdiff+0x108>
 80120c0:	6107      	str	r7, [r0, #16]
 80120c2:	e7a3      	b.n	801200c <__mdiff+0x34>
 80120c4:	f856 8b04 	ldr.w	r8, [r6], #4
 80120c8:	fa11 f288 	uxtah	r2, r1, r8
 80120cc:	1414      	asrs	r4, r2, #16
 80120ce:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80120d2:	b292      	uxth	r2, r2
 80120d4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80120d8:	f84e 2b04 	str.w	r2, [lr], #4
 80120dc:	1421      	asrs	r1, r4, #16
 80120de:	e7e0      	b.n	80120a2 <__mdiff+0xca>
 80120e0:	3f01      	subs	r7, #1
 80120e2:	e7ea      	b.n	80120ba <__mdiff+0xe2>
 80120e4:	08014a57 	.word	0x08014a57
 80120e8:	08014ae4 	.word	0x08014ae4

080120ec <__ulp>:
 80120ec:	b082      	sub	sp, #8
 80120ee:	ed8d 0b00 	vstr	d0, [sp]
 80120f2:	9b01      	ldr	r3, [sp, #4]
 80120f4:	4912      	ldr	r1, [pc, #72]	; (8012140 <__ulp+0x54>)
 80120f6:	4019      	ands	r1, r3
 80120f8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80120fc:	2900      	cmp	r1, #0
 80120fe:	dd05      	ble.n	801210c <__ulp+0x20>
 8012100:	2200      	movs	r2, #0
 8012102:	460b      	mov	r3, r1
 8012104:	ec43 2b10 	vmov	d0, r2, r3
 8012108:	b002      	add	sp, #8
 801210a:	4770      	bx	lr
 801210c:	4249      	negs	r1, r1
 801210e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8012112:	ea4f 5021 	mov.w	r0, r1, asr #20
 8012116:	f04f 0200 	mov.w	r2, #0
 801211a:	f04f 0300 	mov.w	r3, #0
 801211e:	da04      	bge.n	801212a <__ulp+0x3e>
 8012120:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8012124:	fa41 f300 	asr.w	r3, r1, r0
 8012128:	e7ec      	b.n	8012104 <__ulp+0x18>
 801212a:	f1a0 0114 	sub.w	r1, r0, #20
 801212e:	291e      	cmp	r1, #30
 8012130:	bfda      	itte	le
 8012132:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8012136:	fa20 f101 	lsrle.w	r1, r0, r1
 801213a:	2101      	movgt	r1, #1
 801213c:	460a      	mov	r2, r1
 801213e:	e7e1      	b.n	8012104 <__ulp+0x18>
 8012140:	7ff00000 	.word	0x7ff00000

08012144 <__b2d>:
 8012144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012146:	6905      	ldr	r5, [r0, #16]
 8012148:	f100 0714 	add.w	r7, r0, #20
 801214c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8012150:	1f2e      	subs	r6, r5, #4
 8012152:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8012156:	4620      	mov	r0, r4
 8012158:	f7ff fd48 	bl	8011bec <__hi0bits>
 801215c:	f1c0 0320 	rsb	r3, r0, #32
 8012160:	280a      	cmp	r0, #10
 8012162:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80121e0 <__b2d+0x9c>
 8012166:	600b      	str	r3, [r1, #0]
 8012168:	dc14      	bgt.n	8012194 <__b2d+0x50>
 801216a:	f1c0 0e0b 	rsb	lr, r0, #11
 801216e:	fa24 f10e 	lsr.w	r1, r4, lr
 8012172:	42b7      	cmp	r7, r6
 8012174:	ea41 030c 	orr.w	r3, r1, ip
 8012178:	bf34      	ite	cc
 801217a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801217e:	2100      	movcs	r1, #0
 8012180:	3015      	adds	r0, #21
 8012182:	fa04 f000 	lsl.w	r0, r4, r0
 8012186:	fa21 f10e 	lsr.w	r1, r1, lr
 801218a:	ea40 0201 	orr.w	r2, r0, r1
 801218e:	ec43 2b10 	vmov	d0, r2, r3
 8012192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012194:	42b7      	cmp	r7, r6
 8012196:	bf3a      	itte	cc
 8012198:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801219c:	f1a5 0608 	subcc.w	r6, r5, #8
 80121a0:	2100      	movcs	r1, #0
 80121a2:	380b      	subs	r0, #11
 80121a4:	d017      	beq.n	80121d6 <__b2d+0x92>
 80121a6:	f1c0 0c20 	rsb	ip, r0, #32
 80121aa:	fa04 f500 	lsl.w	r5, r4, r0
 80121ae:	42be      	cmp	r6, r7
 80121b0:	fa21 f40c 	lsr.w	r4, r1, ip
 80121b4:	ea45 0504 	orr.w	r5, r5, r4
 80121b8:	bf8c      	ite	hi
 80121ba:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80121be:	2400      	movls	r4, #0
 80121c0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80121c4:	fa01 f000 	lsl.w	r0, r1, r0
 80121c8:	fa24 f40c 	lsr.w	r4, r4, ip
 80121cc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80121d0:	ea40 0204 	orr.w	r2, r0, r4
 80121d4:	e7db      	b.n	801218e <__b2d+0x4a>
 80121d6:	ea44 030c 	orr.w	r3, r4, ip
 80121da:	460a      	mov	r2, r1
 80121dc:	e7d7      	b.n	801218e <__b2d+0x4a>
 80121de:	bf00      	nop
 80121e0:	3ff00000 	.word	0x3ff00000

080121e4 <__d2b>:
 80121e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80121e8:	4689      	mov	r9, r1
 80121ea:	2101      	movs	r1, #1
 80121ec:	ec57 6b10 	vmov	r6, r7, d0
 80121f0:	4690      	mov	r8, r2
 80121f2:	f7ff fc09 	bl	8011a08 <_Balloc>
 80121f6:	4604      	mov	r4, r0
 80121f8:	b930      	cbnz	r0, 8012208 <__d2b+0x24>
 80121fa:	4602      	mov	r2, r0
 80121fc:	4b25      	ldr	r3, [pc, #148]	; (8012294 <__d2b+0xb0>)
 80121fe:	4826      	ldr	r0, [pc, #152]	; (8012298 <__d2b+0xb4>)
 8012200:	f240 310a 	movw	r1, #778	; 0x30a
 8012204:	f000 fa86 	bl	8012714 <__assert_func>
 8012208:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801220c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012210:	bb35      	cbnz	r5, 8012260 <__d2b+0x7c>
 8012212:	2e00      	cmp	r6, #0
 8012214:	9301      	str	r3, [sp, #4]
 8012216:	d028      	beq.n	801226a <__d2b+0x86>
 8012218:	4668      	mov	r0, sp
 801221a:	9600      	str	r6, [sp, #0]
 801221c:	f7ff fd06 	bl	8011c2c <__lo0bits>
 8012220:	9900      	ldr	r1, [sp, #0]
 8012222:	b300      	cbz	r0, 8012266 <__d2b+0x82>
 8012224:	9a01      	ldr	r2, [sp, #4]
 8012226:	f1c0 0320 	rsb	r3, r0, #32
 801222a:	fa02 f303 	lsl.w	r3, r2, r3
 801222e:	430b      	orrs	r3, r1
 8012230:	40c2      	lsrs	r2, r0
 8012232:	6163      	str	r3, [r4, #20]
 8012234:	9201      	str	r2, [sp, #4]
 8012236:	9b01      	ldr	r3, [sp, #4]
 8012238:	61a3      	str	r3, [r4, #24]
 801223a:	2b00      	cmp	r3, #0
 801223c:	bf14      	ite	ne
 801223e:	2202      	movne	r2, #2
 8012240:	2201      	moveq	r2, #1
 8012242:	6122      	str	r2, [r4, #16]
 8012244:	b1d5      	cbz	r5, 801227c <__d2b+0x98>
 8012246:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801224a:	4405      	add	r5, r0
 801224c:	f8c9 5000 	str.w	r5, [r9]
 8012250:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012254:	f8c8 0000 	str.w	r0, [r8]
 8012258:	4620      	mov	r0, r4
 801225a:	b003      	add	sp, #12
 801225c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012260:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012264:	e7d5      	b.n	8012212 <__d2b+0x2e>
 8012266:	6161      	str	r1, [r4, #20]
 8012268:	e7e5      	b.n	8012236 <__d2b+0x52>
 801226a:	a801      	add	r0, sp, #4
 801226c:	f7ff fcde 	bl	8011c2c <__lo0bits>
 8012270:	9b01      	ldr	r3, [sp, #4]
 8012272:	6163      	str	r3, [r4, #20]
 8012274:	2201      	movs	r2, #1
 8012276:	6122      	str	r2, [r4, #16]
 8012278:	3020      	adds	r0, #32
 801227a:	e7e3      	b.n	8012244 <__d2b+0x60>
 801227c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012280:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012284:	f8c9 0000 	str.w	r0, [r9]
 8012288:	6918      	ldr	r0, [r3, #16]
 801228a:	f7ff fcaf 	bl	8011bec <__hi0bits>
 801228e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012292:	e7df      	b.n	8012254 <__d2b+0x70>
 8012294:	08014a57 	.word	0x08014a57
 8012298:	08014ae4 	.word	0x08014ae4

0801229c <__ratio>:
 801229c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122a0:	4688      	mov	r8, r1
 80122a2:	4669      	mov	r1, sp
 80122a4:	4681      	mov	r9, r0
 80122a6:	f7ff ff4d 	bl	8012144 <__b2d>
 80122aa:	a901      	add	r1, sp, #4
 80122ac:	4640      	mov	r0, r8
 80122ae:	ec55 4b10 	vmov	r4, r5, d0
 80122b2:	f7ff ff47 	bl	8012144 <__b2d>
 80122b6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80122ba:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80122be:	eba3 0c02 	sub.w	ip, r3, r2
 80122c2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80122c6:	1a9b      	subs	r3, r3, r2
 80122c8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80122cc:	ec51 0b10 	vmov	r0, r1, d0
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	bfd6      	itet	le
 80122d4:	460a      	movle	r2, r1
 80122d6:	462a      	movgt	r2, r5
 80122d8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80122dc:	468b      	mov	fp, r1
 80122de:	462f      	mov	r7, r5
 80122e0:	bfd4      	ite	le
 80122e2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80122e6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80122ea:	4620      	mov	r0, r4
 80122ec:	ee10 2a10 	vmov	r2, s0
 80122f0:	465b      	mov	r3, fp
 80122f2:	4639      	mov	r1, r7
 80122f4:	f7ee faaa 	bl	800084c <__aeabi_ddiv>
 80122f8:	ec41 0b10 	vmov	d0, r0, r1
 80122fc:	b003      	add	sp, #12
 80122fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012302 <__copybits>:
 8012302:	3901      	subs	r1, #1
 8012304:	b570      	push	{r4, r5, r6, lr}
 8012306:	1149      	asrs	r1, r1, #5
 8012308:	6914      	ldr	r4, [r2, #16]
 801230a:	3101      	adds	r1, #1
 801230c:	f102 0314 	add.w	r3, r2, #20
 8012310:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012314:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012318:	1f05      	subs	r5, r0, #4
 801231a:	42a3      	cmp	r3, r4
 801231c:	d30c      	bcc.n	8012338 <__copybits+0x36>
 801231e:	1aa3      	subs	r3, r4, r2
 8012320:	3b11      	subs	r3, #17
 8012322:	f023 0303 	bic.w	r3, r3, #3
 8012326:	3211      	adds	r2, #17
 8012328:	42a2      	cmp	r2, r4
 801232a:	bf88      	it	hi
 801232c:	2300      	movhi	r3, #0
 801232e:	4418      	add	r0, r3
 8012330:	2300      	movs	r3, #0
 8012332:	4288      	cmp	r0, r1
 8012334:	d305      	bcc.n	8012342 <__copybits+0x40>
 8012336:	bd70      	pop	{r4, r5, r6, pc}
 8012338:	f853 6b04 	ldr.w	r6, [r3], #4
 801233c:	f845 6f04 	str.w	r6, [r5, #4]!
 8012340:	e7eb      	b.n	801231a <__copybits+0x18>
 8012342:	f840 3b04 	str.w	r3, [r0], #4
 8012346:	e7f4      	b.n	8012332 <__copybits+0x30>

08012348 <__any_on>:
 8012348:	f100 0214 	add.w	r2, r0, #20
 801234c:	6900      	ldr	r0, [r0, #16]
 801234e:	114b      	asrs	r3, r1, #5
 8012350:	4298      	cmp	r0, r3
 8012352:	b510      	push	{r4, lr}
 8012354:	db11      	blt.n	801237a <__any_on+0x32>
 8012356:	dd0a      	ble.n	801236e <__any_on+0x26>
 8012358:	f011 011f 	ands.w	r1, r1, #31
 801235c:	d007      	beq.n	801236e <__any_on+0x26>
 801235e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012362:	fa24 f001 	lsr.w	r0, r4, r1
 8012366:	fa00 f101 	lsl.w	r1, r0, r1
 801236a:	428c      	cmp	r4, r1
 801236c:	d10b      	bne.n	8012386 <__any_on+0x3e>
 801236e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012372:	4293      	cmp	r3, r2
 8012374:	d803      	bhi.n	801237e <__any_on+0x36>
 8012376:	2000      	movs	r0, #0
 8012378:	bd10      	pop	{r4, pc}
 801237a:	4603      	mov	r3, r0
 801237c:	e7f7      	b.n	801236e <__any_on+0x26>
 801237e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012382:	2900      	cmp	r1, #0
 8012384:	d0f5      	beq.n	8012372 <__any_on+0x2a>
 8012386:	2001      	movs	r0, #1
 8012388:	e7f6      	b.n	8012378 <__any_on+0x30>

0801238a <__ssputs_r>:
 801238a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801238e:	688e      	ldr	r6, [r1, #8]
 8012390:	429e      	cmp	r6, r3
 8012392:	4682      	mov	sl, r0
 8012394:	460c      	mov	r4, r1
 8012396:	4690      	mov	r8, r2
 8012398:	461f      	mov	r7, r3
 801239a:	d838      	bhi.n	801240e <__ssputs_r+0x84>
 801239c:	898a      	ldrh	r2, [r1, #12]
 801239e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80123a2:	d032      	beq.n	801240a <__ssputs_r+0x80>
 80123a4:	6825      	ldr	r5, [r4, #0]
 80123a6:	6909      	ldr	r1, [r1, #16]
 80123a8:	eba5 0901 	sub.w	r9, r5, r1
 80123ac:	6965      	ldr	r5, [r4, #20]
 80123ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80123b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80123b6:	3301      	adds	r3, #1
 80123b8:	444b      	add	r3, r9
 80123ba:	106d      	asrs	r5, r5, #1
 80123bc:	429d      	cmp	r5, r3
 80123be:	bf38      	it	cc
 80123c0:	461d      	movcc	r5, r3
 80123c2:	0553      	lsls	r3, r2, #21
 80123c4:	d531      	bpl.n	801242a <__ssputs_r+0xa0>
 80123c6:	4629      	mov	r1, r5
 80123c8:	f7fc fcd2 	bl	800ed70 <_malloc_r>
 80123cc:	4606      	mov	r6, r0
 80123ce:	b950      	cbnz	r0, 80123e6 <__ssputs_r+0x5c>
 80123d0:	230c      	movs	r3, #12
 80123d2:	f8ca 3000 	str.w	r3, [sl]
 80123d6:	89a3      	ldrh	r3, [r4, #12]
 80123d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80123dc:	81a3      	strh	r3, [r4, #12]
 80123de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80123e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123e6:	6921      	ldr	r1, [r4, #16]
 80123e8:	464a      	mov	r2, r9
 80123ea:	f7fc fc29 	bl	800ec40 <memcpy>
 80123ee:	89a3      	ldrh	r3, [r4, #12]
 80123f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80123f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80123f8:	81a3      	strh	r3, [r4, #12]
 80123fa:	6126      	str	r6, [r4, #16]
 80123fc:	6165      	str	r5, [r4, #20]
 80123fe:	444e      	add	r6, r9
 8012400:	eba5 0509 	sub.w	r5, r5, r9
 8012404:	6026      	str	r6, [r4, #0]
 8012406:	60a5      	str	r5, [r4, #8]
 8012408:	463e      	mov	r6, r7
 801240a:	42be      	cmp	r6, r7
 801240c:	d900      	bls.n	8012410 <__ssputs_r+0x86>
 801240e:	463e      	mov	r6, r7
 8012410:	6820      	ldr	r0, [r4, #0]
 8012412:	4632      	mov	r2, r6
 8012414:	4641      	mov	r1, r8
 8012416:	f000 f9cf 	bl	80127b8 <memmove>
 801241a:	68a3      	ldr	r3, [r4, #8]
 801241c:	1b9b      	subs	r3, r3, r6
 801241e:	60a3      	str	r3, [r4, #8]
 8012420:	6823      	ldr	r3, [r4, #0]
 8012422:	4433      	add	r3, r6
 8012424:	6023      	str	r3, [r4, #0]
 8012426:	2000      	movs	r0, #0
 8012428:	e7db      	b.n	80123e2 <__ssputs_r+0x58>
 801242a:	462a      	mov	r2, r5
 801242c:	f000 f9de 	bl	80127ec <_realloc_r>
 8012430:	4606      	mov	r6, r0
 8012432:	2800      	cmp	r0, #0
 8012434:	d1e1      	bne.n	80123fa <__ssputs_r+0x70>
 8012436:	6921      	ldr	r1, [r4, #16]
 8012438:	4650      	mov	r0, sl
 801243a:	f7fc fc2d 	bl	800ec98 <_free_r>
 801243e:	e7c7      	b.n	80123d0 <__ssputs_r+0x46>

08012440 <_svfiprintf_r>:
 8012440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012444:	4698      	mov	r8, r3
 8012446:	898b      	ldrh	r3, [r1, #12]
 8012448:	061b      	lsls	r3, r3, #24
 801244a:	b09d      	sub	sp, #116	; 0x74
 801244c:	4607      	mov	r7, r0
 801244e:	460d      	mov	r5, r1
 8012450:	4614      	mov	r4, r2
 8012452:	d50e      	bpl.n	8012472 <_svfiprintf_r+0x32>
 8012454:	690b      	ldr	r3, [r1, #16]
 8012456:	b963      	cbnz	r3, 8012472 <_svfiprintf_r+0x32>
 8012458:	2140      	movs	r1, #64	; 0x40
 801245a:	f7fc fc89 	bl	800ed70 <_malloc_r>
 801245e:	6028      	str	r0, [r5, #0]
 8012460:	6128      	str	r0, [r5, #16]
 8012462:	b920      	cbnz	r0, 801246e <_svfiprintf_r+0x2e>
 8012464:	230c      	movs	r3, #12
 8012466:	603b      	str	r3, [r7, #0]
 8012468:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801246c:	e0d1      	b.n	8012612 <_svfiprintf_r+0x1d2>
 801246e:	2340      	movs	r3, #64	; 0x40
 8012470:	616b      	str	r3, [r5, #20]
 8012472:	2300      	movs	r3, #0
 8012474:	9309      	str	r3, [sp, #36]	; 0x24
 8012476:	2320      	movs	r3, #32
 8012478:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801247c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012480:	2330      	movs	r3, #48	; 0x30
 8012482:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801262c <_svfiprintf_r+0x1ec>
 8012486:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801248a:	f04f 0901 	mov.w	r9, #1
 801248e:	4623      	mov	r3, r4
 8012490:	469a      	mov	sl, r3
 8012492:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012496:	b10a      	cbz	r2, 801249c <_svfiprintf_r+0x5c>
 8012498:	2a25      	cmp	r2, #37	; 0x25
 801249a:	d1f9      	bne.n	8012490 <_svfiprintf_r+0x50>
 801249c:	ebba 0b04 	subs.w	fp, sl, r4
 80124a0:	d00b      	beq.n	80124ba <_svfiprintf_r+0x7a>
 80124a2:	465b      	mov	r3, fp
 80124a4:	4622      	mov	r2, r4
 80124a6:	4629      	mov	r1, r5
 80124a8:	4638      	mov	r0, r7
 80124aa:	f7ff ff6e 	bl	801238a <__ssputs_r>
 80124ae:	3001      	adds	r0, #1
 80124b0:	f000 80aa 	beq.w	8012608 <_svfiprintf_r+0x1c8>
 80124b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80124b6:	445a      	add	r2, fp
 80124b8:	9209      	str	r2, [sp, #36]	; 0x24
 80124ba:	f89a 3000 	ldrb.w	r3, [sl]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	f000 80a2 	beq.w	8012608 <_svfiprintf_r+0x1c8>
 80124c4:	2300      	movs	r3, #0
 80124c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80124ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80124ce:	f10a 0a01 	add.w	sl, sl, #1
 80124d2:	9304      	str	r3, [sp, #16]
 80124d4:	9307      	str	r3, [sp, #28]
 80124d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80124da:	931a      	str	r3, [sp, #104]	; 0x68
 80124dc:	4654      	mov	r4, sl
 80124de:	2205      	movs	r2, #5
 80124e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124e4:	4851      	ldr	r0, [pc, #324]	; (801262c <_svfiprintf_r+0x1ec>)
 80124e6:	f7ed fe7b 	bl	80001e0 <memchr>
 80124ea:	9a04      	ldr	r2, [sp, #16]
 80124ec:	b9d8      	cbnz	r0, 8012526 <_svfiprintf_r+0xe6>
 80124ee:	06d0      	lsls	r0, r2, #27
 80124f0:	bf44      	itt	mi
 80124f2:	2320      	movmi	r3, #32
 80124f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80124f8:	0711      	lsls	r1, r2, #28
 80124fa:	bf44      	itt	mi
 80124fc:	232b      	movmi	r3, #43	; 0x2b
 80124fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012502:	f89a 3000 	ldrb.w	r3, [sl]
 8012506:	2b2a      	cmp	r3, #42	; 0x2a
 8012508:	d015      	beq.n	8012536 <_svfiprintf_r+0xf6>
 801250a:	9a07      	ldr	r2, [sp, #28]
 801250c:	4654      	mov	r4, sl
 801250e:	2000      	movs	r0, #0
 8012510:	f04f 0c0a 	mov.w	ip, #10
 8012514:	4621      	mov	r1, r4
 8012516:	f811 3b01 	ldrb.w	r3, [r1], #1
 801251a:	3b30      	subs	r3, #48	; 0x30
 801251c:	2b09      	cmp	r3, #9
 801251e:	d94e      	bls.n	80125be <_svfiprintf_r+0x17e>
 8012520:	b1b0      	cbz	r0, 8012550 <_svfiprintf_r+0x110>
 8012522:	9207      	str	r2, [sp, #28]
 8012524:	e014      	b.n	8012550 <_svfiprintf_r+0x110>
 8012526:	eba0 0308 	sub.w	r3, r0, r8
 801252a:	fa09 f303 	lsl.w	r3, r9, r3
 801252e:	4313      	orrs	r3, r2
 8012530:	9304      	str	r3, [sp, #16]
 8012532:	46a2      	mov	sl, r4
 8012534:	e7d2      	b.n	80124dc <_svfiprintf_r+0x9c>
 8012536:	9b03      	ldr	r3, [sp, #12]
 8012538:	1d19      	adds	r1, r3, #4
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	9103      	str	r1, [sp, #12]
 801253e:	2b00      	cmp	r3, #0
 8012540:	bfbb      	ittet	lt
 8012542:	425b      	neglt	r3, r3
 8012544:	f042 0202 	orrlt.w	r2, r2, #2
 8012548:	9307      	strge	r3, [sp, #28]
 801254a:	9307      	strlt	r3, [sp, #28]
 801254c:	bfb8      	it	lt
 801254e:	9204      	strlt	r2, [sp, #16]
 8012550:	7823      	ldrb	r3, [r4, #0]
 8012552:	2b2e      	cmp	r3, #46	; 0x2e
 8012554:	d10c      	bne.n	8012570 <_svfiprintf_r+0x130>
 8012556:	7863      	ldrb	r3, [r4, #1]
 8012558:	2b2a      	cmp	r3, #42	; 0x2a
 801255a:	d135      	bne.n	80125c8 <_svfiprintf_r+0x188>
 801255c:	9b03      	ldr	r3, [sp, #12]
 801255e:	1d1a      	adds	r2, r3, #4
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	9203      	str	r2, [sp, #12]
 8012564:	2b00      	cmp	r3, #0
 8012566:	bfb8      	it	lt
 8012568:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801256c:	3402      	adds	r4, #2
 801256e:	9305      	str	r3, [sp, #20]
 8012570:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801263c <_svfiprintf_r+0x1fc>
 8012574:	7821      	ldrb	r1, [r4, #0]
 8012576:	2203      	movs	r2, #3
 8012578:	4650      	mov	r0, sl
 801257a:	f7ed fe31 	bl	80001e0 <memchr>
 801257e:	b140      	cbz	r0, 8012592 <_svfiprintf_r+0x152>
 8012580:	2340      	movs	r3, #64	; 0x40
 8012582:	eba0 000a 	sub.w	r0, r0, sl
 8012586:	fa03 f000 	lsl.w	r0, r3, r0
 801258a:	9b04      	ldr	r3, [sp, #16]
 801258c:	4303      	orrs	r3, r0
 801258e:	3401      	adds	r4, #1
 8012590:	9304      	str	r3, [sp, #16]
 8012592:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012596:	4826      	ldr	r0, [pc, #152]	; (8012630 <_svfiprintf_r+0x1f0>)
 8012598:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801259c:	2206      	movs	r2, #6
 801259e:	f7ed fe1f 	bl	80001e0 <memchr>
 80125a2:	2800      	cmp	r0, #0
 80125a4:	d038      	beq.n	8012618 <_svfiprintf_r+0x1d8>
 80125a6:	4b23      	ldr	r3, [pc, #140]	; (8012634 <_svfiprintf_r+0x1f4>)
 80125a8:	bb1b      	cbnz	r3, 80125f2 <_svfiprintf_r+0x1b2>
 80125aa:	9b03      	ldr	r3, [sp, #12]
 80125ac:	3307      	adds	r3, #7
 80125ae:	f023 0307 	bic.w	r3, r3, #7
 80125b2:	3308      	adds	r3, #8
 80125b4:	9303      	str	r3, [sp, #12]
 80125b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125b8:	4433      	add	r3, r6
 80125ba:	9309      	str	r3, [sp, #36]	; 0x24
 80125bc:	e767      	b.n	801248e <_svfiprintf_r+0x4e>
 80125be:	fb0c 3202 	mla	r2, ip, r2, r3
 80125c2:	460c      	mov	r4, r1
 80125c4:	2001      	movs	r0, #1
 80125c6:	e7a5      	b.n	8012514 <_svfiprintf_r+0xd4>
 80125c8:	2300      	movs	r3, #0
 80125ca:	3401      	adds	r4, #1
 80125cc:	9305      	str	r3, [sp, #20]
 80125ce:	4619      	mov	r1, r3
 80125d0:	f04f 0c0a 	mov.w	ip, #10
 80125d4:	4620      	mov	r0, r4
 80125d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80125da:	3a30      	subs	r2, #48	; 0x30
 80125dc:	2a09      	cmp	r2, #9
 80125de:	d903      	bls.n	80125e8 <_svfiprintf_r+0x1a8>
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d0c5      	beq.n	8012570 <_svfiprintf_r+0x130>
 80125e4:	9105      	str	r1, [sp, #20]
 80125e6:	e7c3      	b.n	8012570 <_svfiprintf_r+0x130>
 80125e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80125ec:	4604      	mov	r4, r0
 80125ee:	2301      	movs	r3, #1
 80125f0:	e7f0      	b.n	80125d4 <_svfiprintf_r+0x194>
 80125f2:	ab03      	add	r3, sp, #12
 80125f4:	9300      	str	r3, [sp, #0]
 80125f6:	462a      	mov	r2, r5
 80125f8:	4b0f      	ldr	r3, [pc, #60]	; (8012638 <_svfiprintf_r+0x1f8>)
 80125fa:	a904      	add	r1, sp, #16
 80125fc:	4638      	mov	r0, r7
 80125fe:	f7fc fccb 	bl	800ef98 <_printf_float>
 8012602:	1c42      	adds	r2, r0, #1
 8012604:	4606      	mov	r6, r0
 8012606:	d1d6      	bne.n	80125b6 <_svfiprintf_r+0x176>
 8012608:	89ab      	ldrh	r3, [r5, #12]
 801260a:	065b      	lsls	r3, r3, #25
 801260c:	f53f af2c 	bmi.w	8012468 <_svfiprintf_r+0x28>
 8012610:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012612:	b01d      	add	sp, #116	; 0x74
 8012614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012618:	ab03      	add	r3, sp, #12
 801261a:	9300      	str	r3, [sp, #0]
 801261c:	462a      	mov	r2, r5
 801261e:	4b06      	ldr	r3, [pc, #24]	; (8012638 <_svfiprintf_r+0x1f8>)
 8012620:	a904      	add	r1, sp, #16
 8012622:	4638      	mov	r0, r7
 8012624:	f7fc ff5c 	bl	800f4e0 <_printf_i>
 8012628:	e7eb      	b.n	8012602 <_svfiprintf_r+0x1c2>
 801262a:	bf00      	nop
 801262c:	08014c3c 	.word	0x08014c3c
 8012630:	08014c46 	.word	0x08014c46
 8012634:	0800ef99 	.word	0x0800ef99
 8012638:	0801238b 	.word	0x0801238b
 801263c:	08014c42 	.word	0x08014c42

08012640 <nan>:
 8012640:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012648 <nan+0x8>
 8012644:	4770      	bx	lr
 8012646:	bf00      	nop
 8012648:	00000000 	.word	0x00000000
 801264c:	7ff80000 	.word	0x7ff80000

08012650 <__sread>:
 8012650:	b510      	push	{r4, lr}
 8012652:	460c      	mov	r4, r1
 8012654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012658:	f000 fa50 	bl	8012afc <_read_r>
 801265c:	2800      	cmp	r0, #0
 801265e:	bfab      	itete	ge
 8012660:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012662:	89a3      	ldrhlt	r3, [r4, #12]
 8012664:	181b      	addge	r3, r3, r0
 8012666:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801266a:	bfac      	ite	ge
 801266c:	6563      	strge	r3, [r4, #84]	; 0x54
 801266e:	81a3      	strhlt	r3, [r4, #12]
 8012670:	bd10      	pop	{r4, pc}

08012672 <__swrite>:
 8012672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012676:	461f      	mov	r7, r3
 8012678:	898b      	ldrh	r3, [r1, #12]
 801267a:	05db      	lsls	r3, r3, #23
 801267c:	4605      	mov	r5, r0
 801267e:	460c      	mov	r4, r1
 8012680:	4616      	mov	r6, r2
 8012682:	d505      	bpl.n	8012690 <__swrite+0x1e>
 8012684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012688:	2302      	movs	r3, #2
 801268a:	2200      	movs	r2, #0
 801268c:	f000 f882 	bl	8012794 <_lseek_r>
 8012690:	89a3      	ldrh	r3, [r4, #12]
 8012692:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012696:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801269a:	81a3      	strh	r3, [r4, #12]
 801269c:	4632      	mov	r2, r6
 801269e:	463b      	mov	r3, r7
 80126a0:	4628      	mov	r0, r5
 80126a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80126a6:	f000 b823 	b.w	80126f0 <_write_r>

080126aa <__sseek>:
 80126aa:	b510      	push	{r4, lr}
 80126ac:	460c      	mov	r4, r1
 80126ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126b2:	f000 f86f 	bl	8012794 <_lseek_r>
 80126b6:	1c43      	adds	r3, r0, #1
 80126b8:	89a3      	ldrh	r3, [r4, #12]
 80126ba:	bf15      	itete	ne
 80126bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80126be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80126c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80126c6:	81a3      	strheq	r3, [r4, #12]
 80126c8:	bf18      	it	ne
 80126ca:	81a3      	strhne	r3, [r4, #12]
 80126cc:	bd10      	pop	{r4, pc}

080126ce <__sclose>:
 80126ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126d2:	f000 b83d 	b.w	8012750 <_close_r>

080126d6 <__ascii_wctomb>:
 80126d6:	b149      	cbz	r1, 80126ec <__ascii_wctomb+0x16>
 80126d8:	2aff      	cmp	r2, #255	; 0xff
 80126da:	bf85      	ittet	hi
 80126dc:	238a      	movhi	r3, #138	; 0x8a
 80126de:	6003      	strhi	r3, [r0, #0]
 80126e0:	700a      	strbls	r2, [r1, #0]
 80126e2:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80126e6:	bf98      	it	ls
 80126e8:	2001      	movls	r0, #1
 80126ea:	4770      	bx	lr
 80126ec:	4608      	mov	r0, r1
 80126ee:	4770      	bx	lr

080126f0 <_write_r>:
 80126f0:	b538      	push	{r3, r4, r5, lr}
 80126f2:	4d07      	ldr	r5, [pc, #28]	; (8012710 <_write_r+0x20>)
 80126f4:	4604      	mov	r4, r0
 80126f6:	4608      	mov	r0, r1
 80126f8:	4611      	mov	r1, r2
 80126fa:	2200      	movs	r2, #0
 80126fc:	602a      	str	r2, [r5, #0]
 80126fe:	461a      	mov	r2, r3
 8012700:	f7f3 fca5 	bl	800604e <_write>
 8012704:	1c43      	adds	r3, r0, #1
 8012706:	d102      	bne.n	801270e <_write_r+0x1e>
 8012708:	682b      	ldr	r3, [r5, #0]
 801270a:	b103      	cbz	r3, 801270e <_write_r+0x1e>
 801270c:	6023      	str	r3, [r4, #0]
 801270e:	bd38      	pop	{r3, r4, r5, pc}
 8012710:	200036d4 	.word	0x200036d4

08012714 <__assert_func>:
 8012714:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012716:	4614      	mov	r4, r2
 8012718:	461a      	mov	r2, r3
 801271a:	4b09      	ldr	r3, [pc, #36]	; (8012740 <__assert_func+0x2c>)
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	4605      	mov	r5, r0
 8012720:	68d8      	ldr	r0, [r3, #12]
 8012722:	b14c      	cbz	r4, 8012738 <__assert_func+0x24>
 8012724:	4b07      	ldr	r3, [pc, #28]	; (8012744 <__assert_func+0x30>)
 8012726:	9100      	str	r1, [sp, #0]
 8012728:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801272c:	4906      	ldr	r1, [pc, #24]	; (8012748 <__assert_func+0x34>)
 801272e:	462b      	mov	r3, r5
 8012730:	f000 f81e 	bl	8012770 <fiprintf>
 8012734:	f000 fab4 	bl	8012ca0 <abort>
 8012738:	4b04      	ldr	r3, [pc, #16]	; (801274c <__assert_func+0x38>)
 801273a:	461c      	mov	r4, r3
 801273c:	e7f3      	b.n	8012726 <__assert_func+0x12>
 801273e:	bf00      	nop
 8012740:	2000023c 	.word	0x2000023c
 8012744:	08014c4d 	.word	0x08014c4d
 8012748:	08014c5a 	.word	0x08014c5a
 801274c:	08014c88 	.word	0x08014c88

08012750 <_close_r>:
 8012750:	b538      	push	{r3, r4, r5, lr}
 8012752:	4d06      	ldr	r5, [pc, #24]	; (801276c <_close_r+0x1c>)
 8012754:	2300      	movs	r3, #0
 8012756:	4604      	mov	r4, r0
 8012758:	4608      	mov	r0, r1
 801275a:	602b      	str	r3, [r5, #0]
 801275c:	f7f3 fc93 	bl	8006086 <_close>
 8012760:	1c43      	adds	r3, r0, #1
 8012762:	d102      	bne.n	801276a <_close_r+0x1a>
 8012764:	682b      	ldr	r3, [r5, #0]
 8012766:	b103      	cbz	r3, 801276a <_close_r+0x1a>
 8012768:	6023      	str	r3, [r4, #0]
 801276a:	bd38      	pop	{r3, r4, r5, pc}
 801276c:	200036d4 	.word	0x200036d4

08012770 <fiprintf>:
 8012770:	b40e      	push	{r1, r2, r3}
 8012772:	b503      	push	{r0, r1, lr}
 8012774:	4601      	mov	r1, r0
 8012776:	ab03      	add	r3, sp, #12
 8012778:	4805      	ldr	r0, [pc, #20]	; (8012790 <fiprintf+0x20>)
 801277a:	f853 2b04 	ldr.w	r2, [r3], #4
 801277e:	6800      	ldr	r0, [r0, #0]
 8012780:	9301      	str	r3, [sp, #4]
 8012782:	f000 f88b 	bl	801289c <_vfiprintf_r>
 8012786:	b002      	add	sp, #8
 8012788:	f85d eb04 	ldr.w	lr, [sp], #4
 801278c:	b003      	add	sp, #12
 801278e:	4770      	bx	lr
 8012790:	2000023c 	.word	0x2000023c

08012794 <_lseek_r>:
 8012794:	b538      	push	{r3, r4, r5, lr}
 8012796:	4d07      	ldr	r5, [pc, #28]	; (80127b4 <_lseek_r+0x20>)
 8012798:	4604      	mov	r4, r0
 801279a:	4608      	mov	r0, r1
 801279c:	4611      	mov	r1, r2
 801279e:	2200      	movs	r2, #0
 80127a0:	602a      	str	r2, [r5, #0]
 80127a2:	461a      	mov	r2, r3
 80127a4:	f7f3 fc96 	bl	80060d4 <_lseek>
 80127a8:	1c43      	adds	r3, r0, #1
 80127aa:	d102      	bne.n	80127b2 <_lseek_r+0x1e>
 80127ac:	682b      	ldr	r3, [r5, #0]
 80127ae:	b103      	cbz	r3, 80127b2 <_lseek_r+0x1e>
 80127b0:	6023      	str	r3, [r4, #0]
 80127b2:	bd38      	pop	{r3, r4, r5, pc}
 80127b4:	200036d4 	.word	0x200036d4

080127b8 <memmove>:
 80127b8:	4288      	cmp	r0, r1
 80127ba:	b510      	push	{r4, lr}
 80127bc:	eb01 0402 	add.w	r4, r1, r2
 80127c0:	d902      	bls.n	80127c8 <memmove+0x10>
 80127c2:	4284      	cmp	r4, r0
 80127c4:	4623      	mov	r3, r4
 80127c6:	d807      	bhi.n	80127d8 <memmove+0x20>
 80127c8:	1e43      	subs	r3, r0, #1
 80127ca:	42a1      	cmp	r1, r4
 80127cc:	d008      	beq.n	80127e0 <memmove+0x28>
 80127ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80127d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80127d6:	e7f8      	b.n	80127ca <memmove+0x12>
 80127d8:	4402      	add	r2, r0
 80127da:	4601      	mov	r1, r0
 80127dc:	428a      	cmp	r2, r1
 80127de:	d100      	bne.n	80127e2 <memmove+0x2a>
 80127e0:	bd10      	pop	{r4, pc}
 80127e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80127e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80127ea:	e7f7      	b.n	80127dc <memmove+0x24>

080127ec <_realloc_r>:
 80127ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127f0:	4680      	mov	r8, r0
 80127f2:	4614      	mov	r4, r2
 80127f4:	460e      	mov	r6, r1
 80127f6:	b921      	cbnz	r1, 8012802 <_realloc_r+0x16>
 80127f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80127fc:	4611      	mov	r1, r2
 80127fe:	f7fc bab7 	b.w	800ed70 <_malloc_r>
 8012802:	b92a      	cbnz	r2, 8012810 <_realloc_r+0x24>
 8012804:	f7fc fa48 	bl	800ec98 <_free_r>
 8012808:	4625      	mov	r5, r4
 801280a:	4628      	mov	r0, r5
 801280c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012810:	f000 fc6a 	bl	80130e8 <_malloc_usable_size_r>
 8012814:	4284      	cmp	r4, r0
 8012816:	4607      	mov	r7, r0
 8012818:	d802      	bhi.n	8012820 <_realloc_r+0x34>
 801281a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801281e:	d812      	bhi.n	8012846 <_realloc_r+0x5a>
 8012820:	4621      	mov	r1, r4
 8012822:	4640      	mov	r0, r8
 8012824:	f7fc faa4 	bl	800ed70 <_malloc_r>
 8012828:	4605      	mov	r5, r0
 801282a:	2800      	cmp	r0, #0
 801282c:	d0ed      	beq.n	801280a <_realloc_r+0x1e>
 801282e:	42bc      	cmp	r4, r7
 8012830:	4622      	mov	r2, r4
 8012832:	4631      	mov	r1, r6
 8012834:	bf28      	it	cs
 8012836:	463a      	movcs	r2, r7
 8012838:	f7fc fa02 	bl	800ec40 <memcpy>
 801283c:	4631      	mov	r1, r6
 801283e:	4640      	mov	r0, r8
 8012840:	f7fc fa2a 	bl	800ec98 <_free_r>
 8012844:	e7e1      	b.n	801280a <_realloc_r+0x1e>
 8012846:	4635      	mov	r5, r6
 8012848:	e7df      	b.n	801280a <_realloc_r+0x1e>

0801284a <__sfputc_r>:
 801284a:	6893      	ldr	r3, [r2, #8]
 801284c:	3b01      	subs	r3, #1
 801284e:	2b00      	cmp	r3, #0
 8012850:	b410      	push	{r4}
 8012852:	6093      	str	r3, [r2, #8]
 8012854:	da08      	bge.n	8012868 <__sfputc_r+0x1e>
 8012856:	6994      	ldr	r4, [r2, #24]
 8012858:	42a3      	cmp	r3, r4
 801285a:	db01      	blt.n	8012860 <__sfputc_r+0x16>
 801285c:	290a      	cmp	r1, #10
 801285e:	d103      	bne.n	8012868 <__sfputc_r+0x1e>
 8012860:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012864:	f000 b95c 	b.w	8012b20 <__swbuf_r>
 8012868:	6813      	ldr	r3, [r2, #0]
 801286a:	1c58      	adds	r0, r3, #1
 801286c:	6010      	str	r0, [r2, #0]
 801286e:	7019      	strb	r1, [r3, #0]
 8012870:	4608      	mov	r0, r1
 8012872:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012876:	4770      	bx	lr

08012878 <__sfputs_r>:
 8012878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801287a:	4606      	mov	r6, r0
 801287c:	460f      	mov	r7, r1
 801287e:	4614      	mov	r4, r2
 8012880:	18d5      	adds	r5, r2, r3
 8012882:	42ac      	cmp	r4, r5
 8012884:	d101      	bne.n	801288a <__sfputs_r+0x12>
 8012886:	2000      	movs	r0, #0
 8012888:	e007      	b.n	801289a <__sfputs_r+0x22>
 801288a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801288e:	463a      	mov	r2, r7
 8012890:	4630      	mov	r0, r6
 8012892:	f7ff ffda 	bl	801284a <__sfputc_r>
 8012896:	1c43      	adds	r3, r0, #1
 8012898:	d1f3      	bne.n	8012882 <__sfputs_r+0xa>
 801289a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801289c <_vfiprintf_r>:
 801289c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128a0:	460d      	mov	r5, r1
 80128a2:	b09d      	sub	sp, #116	; 0x74
 80128a4:	4614      	mov	r4, r2
 80128a6:	4698      	mov	r8, r3
 80128a8:	4606      	mov	r6, r0
 80128aa:	b118      	cbz	r0, 80128b4 <_vfiprintf_r+0x18>
 80128ac:	6983      	ldr	r3, [r0, #24]
 80128ae:	b90b      	cbnz	r3, 80128b4 <_vfiprintf_r+0x18>
 80128b0:	f000 fb18 	bl	8012ee4 <__sinit>
 80128b4:	4b89      	ldr	r3, [pc, #548]	; (8012adc <_vfiprintf_r+0x240>)
 80128b6:	429d      	cmp	r5, r3
 80128b8:	d11b      	bne.n	80128f2 <_vfiprintf_r+0x56>
 80128ba:	6875      	ldr	r5, [r6, #4]
 80128bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80128be:	07d9      	lsls	r1, r3, #31
 80128c0:	d405      	bmi.n	80128ce <_vfiprintf_r+0x32>
 80128c2:	89ab      	ldrh	r3, [r5, #12]
 80128c4:	059a      	lsls	r2, r3, #22
 80128c6:	d402      	bmi.n	80128ce <_vfiprintf_r+0x32>
 80128c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80128ca:	f7ff f87c 	bl	80119c6 <__retarget_lock_acquire_recursive>
 80128ce:	89ab      	ldrh	r3, [r5, #12]
 80128d0:	071b      	lsls	r3, r3, #28
 80128d2:	d501      	bpl.n	80128d8 <_vfiprintf_r+0x3c>
 80128d4:	692b      	ldr	r3, [r5, #16]
 80128d6:	b9eb      	cbnz	r3, 8012914 <_vfiprintf_r+0x78>
 80128d8:	4629      	mov	r1, r5
 80128da:	4630      	mov	r0, r6
 80128dc:	f000 f972 	bl	8012bc4 <__swsetup_r>
 80128e0:	b1c0      	cbz	r0, 8012914 <_vfiprintf_r+0x78>
 80128e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80128e4:	07dc      	lsls	r4, r3, #31
 80128e6:	d50e      	bpl.n	8012906 <_vfiprintf_r+0x6a>
 80128e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80128ec:	b01d      	add	sp, #116	; 0x74
 80128ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128f2:	4b7b      	ldr	r3, [pc, #492]	; (8012ae0 <_vfiprintf_r+0x244>)
 80128f4:	429d      	cmp	r5, r3
 80128f6:	d101      	bne.n	80128fc <_vfiprintf_r+0x60>
 80128f8:	68b5      	ldr	r5, [r6, #8]
 80128fa:	e7df      	b.n	80128bc <_vfiprintf_r+0x20>
 80128fc:	4b79      	ldr	r3, [pc, #484]	; (8012ae4 <_vfiprintf_r+0x248>)
 80128fe:	429d      	cmp	r5, r3
 8012900:	bf08      	it	eq
 8012902:	68f5      	ldreq	r5, [r6, #12]
 8012904:	e7da      	b.n	80128bc <_vfiprintf_r+0x20>
 8012906:	89ab      	ldrh	r3, [r5, #12]
 8012908:	0598      	lsls	r0, r3, #22
 801290a:	d4ed      	bmi.n	80128e8 <_vfiprintf_r+0x4c>
 801290c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801290e:	f7ff f85b 	bl	80119c8 <__retarget_lock_release_recursive>
 8012912:	e7e9      	b.n	80128e8 <_vfiprintf_r+0x4c>
 8012914:	2300      	movs	r3, #0
 8012916:	9309      	str	r3, [sp, #36]	; 0x24
 8012918:	2320      	movs	r3, #32
 801291a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801291e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012922:	2330      	movs	r3, #48	; 0x30
 8012924:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012ae8 <_vfiprintf_r+0x24c>
 8012928:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801292c:	f04f 0901 	mov.w	r9, #1
 8012930:	4623      	mov	r3, r4
 8012932:	469a      	mov	sl, r3
 8012934:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012938:	b10a      	cbz	r2, 801293e <_vfiprintf_r+0xa2>
 801293a:	2a25      	cmp	r2, #37	; 0x25
 801293c:	d1f9      	bne.n	8012932 <_vfiprintf_r+0x96>
 801293e:	ebba 0b04 	subs.w	fp, sl, r4
 8012942:	d00b      	beq.n	801295c <_vfiprintf_r+0xc0>
 8012944:	465b      	mov	r3, fp
 8012946:	4622      	mov	r2, r4
 8012948:	4629      	mov	r1, r5
 801294a:	4630      	mov	r0, r6
 801294c:	f7ff ff94 	bl	8012878 <__sfputs_r>
 8012950:	3001      	adds	r0, #1
 8012952:	f000 80aa 	beq.w	8012aaa <_vfiprintf_r+0x20e>
 8012956:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012958:	445a      	add	r2, fp
 801295a:	9209      	str	r2, [sp, #36]	; 0x24
 801295c:	f89a 3000 	ldrb.w	r3, [sl]
 8012960:	2b00      	cmp	r3, #0
 8012962:	f000 80a2 	beq.w	8012aaa <_vfiprintf_r+0x20e>
 8012966:	2300      	movs	r3, #0
 8012968:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801296c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012970:	f10a 0a01 	add.w	sl, sl, #1
 8012974:	9304      	str	r3, [sp, #16]
 8012976:	9307      	str	r3, [sp, #28]
 8012978:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801297c:	931a      	str	r3, [sp, #104]	; 0x68
 801297e:	4654      	mov	r4, sl
 8012980:	2205      	movs	r2, #5
 8012982:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012986:	4858      	ldr	r0, [pc, #352]	; (8012ae8 <_vfiprintf_r+0x24c>)
 8012988:	f7ed fc2a 	bl	80001e0 <memchr>
 801298c:	9a04      	ldr	r2, [sp, #16]
 801298e:	b9d8      	cbnz	r0, 80129c8 <_vfiprintf_r+0x12c>
 8012990:	06d1      	lsls	r1, r2, #27
 8012992:	bf44      	itt	mi
 8012994:	2320      	movmi	r3, #32
 8012996:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801299a:	0713      	lsls	r3, r2, #28
 801299c:	bf44      	itt	mi
 801299e:	232b      	movmi	r3, #43	; 0x2b
 80129a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80129a4:	f89a 3000 	ldrb.w	r3, [sl]
 80129a8:	2b2a      	cmp	r3, #42	; 0x2a
 80129aa:	d015      	beq.n	80129d8 <_vfiprintf_r+0x13c>
 80129ac:	9a07      	ldr	r2, [sp, #28]
 80129ae:	4654      	mov	r4, sl
 80129b0:	2000      	movs	r0, #0
 80129b2:	f04f 0c0a 	mov.w	ip, #10
 80129b6:	4621      	mov	r1, r4
 80129b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80129bc:	3b30      	subs	r3, #48	; 0x30
 80129be:	2b09      	cmp	r3, #9
 80129c0:	d94e      	bls.n	8012a60 <_vfiprintf_r+0x1c4>
 80129c2:	b1b0      	cbz	r0, 80129f2 <_vfiprintf_r+0x156>
 80129c4:	9207      	str	r2, [sp, #28]
 80129c6:	e014      	b.n	80129f2 <_vfiprintf_r+0x156>
 80129c8:	eba0 0308 	sub.w	r3, r0, r8
 80129cc:	fa09 f303 	lsl.w	r3, r9, r3
 80129d0:	4313      	orrs	r3, r2
 80129d2:	9304      	str	r3, [sp, #16]
 80129d4:	46a2      	mov	sl, r4
 80129d6:	e7d2      	b.n	801297e <_vfiprintf_r+0xe2>
 80129d8:	9b03      	ldr	r3, [sp, #12]
 80129da:	1d19      	adds	r1, r3, #4
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	9103      	str	r1, [sp, #12]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	bfbb      	ittet	lt
 80129e4:	425b      	neglt	r3, r3
 80129e6:	f042 0202 	orrlt.w	r2, r2, #2
 80129ea:	9307      	strge	r3, [sp, #28]
 80129ec:	9307      	strlt	r3, [sp, #28]
 80129ee:	bfb8      	it	lt
 80129f0:	9204      	strlt	r2, [sp, #16]
 80129f2:	7823      	ldrb	r3, [r4, #0]
 80129f4:	2b2e      	cmp	r3, #46	; 0x2e
 80129f6:	d10c      	bne.n	8012a12 <_vfiprintf_r+0x176>
 80129f8:	7863      	ldrb	r3, [r4, #1]
 80129fa:	2b2a      	cmp	r3, #42	; 0x2a
 80129fc:	d135      	bne.n	8012a6a <_vfiprintf_r+0x1ce>
 80129fe:	9b03      	ldr	r3, [sp, #12]
 8012a00:	1d1a      	adds	r2, r3, #4
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	9203      	str	r2, [sp, #12]
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	bfb8      	it	lt
 8012a0a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012a0e:	3402      	adds	r4, #2
 8012a10:	9305      	str	r3, [sp, #20]
 8012a12:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012af8 <_vfiprintf_r+0x25c>
 8012a16:	7821      	ldrb	r1, [r4, #0]
 8012a18:	2203      	movs	r2, #3
 8012a1a:	4650      	mov	r0, sl
 8012a1c:	f7ed fbe0 	bl	80001e0 <memchr>
 8012a20:	b140      	cbz	r0, 8012a34 <_vfiprintf_r+0x198>
 8012a22:	2340      	movs	r3, #64	; 0x40
 8012a24:	eba0 000a 	sub.w	r0, r0, sl
 8012a28:	fa03 f000 	lsl.w	r0, r3, r0
 8012a2c:	9b04      	ldr	r3, [sp, #16]
 8012a2e:	4303      	orrs	r3, r0
 8012a30:	3401      	adds	r4, #1
 8012a32:	9304      	str	r3, [sp, #16]
 8012a34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a38:	482c      	ldr	r0, [pc, #176]	; (8012aec <_vfiprintf_r+0x250>)
 8012a3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012a3e:	2206      	movs	r2, #6
 8012a40:	f7ed fbce 	bl	80001e0 <memchr>
 8012a44:	2800      	cmp	r0, #0
 8012a46:	d03f      	beq.n	8012ac8 <_vfiprintf_r+0x22c>
 8012a48:	4b29      	ldr	r3, [pc, #164]	; (8012af0 <_vfiprintf_r+0x254>)
 8012a4a:	bb1b      	cbnz	r3, 8012a94 <_vfiprintf_r+0x1f8>
 8012a4c:	9b03      	ldr	r3, [sp, #12]
 8012a4e:	3307      	adds	r3, #7
 8012a50:	f023 0307 	bic.w	r3, r3, #7
 8012a54:	3308      	adds	r3, #8
 8012a56:	9303      	str	r3, [sp, #12]
 8012a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a5a:	443b      	add	r3, r7
 8012a5c:	9309      	str	r3, [sp, #36]	; 0x24
 8012a5e:	e767      	b.n	8012930 <_vfiprintf_r+0x94>
 8012a60:	fb0c 3202 	mla	r2, ip, r2, r3
 8012a64:	460c      	mov	r4, r1
 8012a66:	2001      	movs	r0, #1
 8012a68:	e7a5      	b.n	80129b6 <_vfiprintf_r+0x11a>
 8012a6a:	2300      	movs	r3, #0
 8012a6c:	3401      	adds	r4, #1
 8012a6e:	9305      	str	r3, [sp, #20]
 8012a70:	4619      	mov	r1, r3
 8012a72:	f04f 0c0a 	mov.w	ip, #10
 8012a76:	4620      	mov	r0, r4
 8012a78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012a7c:	3a30      	subs	r2, #48	; 0x30
 8012a7e:	2a09      	cmp	r2, #9
 8012a80:	d903      	bls.n	8012a8a <_vfiprintf_r+0x1ee>
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d0c5      	beq.n	8012a12 <_vfiprintf_r+0x176>
 8012a86:	9105      	str	r1, [sp, #20]
 8012a88:	e7c3      	b.n	8012a12 <_vfiprintf_r+0x176>
 8012a8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8012a8e:	4604      	mov	r4, r0
 8012a90:	2301      	movs	r3, #1
 8012a92:	e7f0      	b.n	8012a76 <_vfiprintf_r+0x1da>
 8012a94:	ab03      	add	r3, sp, #12
 8012a96:	9300      	str	r3, [sp, #0]
 8012a98:	462a      	mov	r2, r5
 8012a9a:	4b16      	ldr	r3, [pc, #88]	; (8012af4 <_vfiprintf_r+0x258>)
 8012a9c:	a904      	add	r1, sp, #16
 8012a9e:	4630      	mov	r0, r6
 8012aa0:	f7fc fa7a 	bl	800ef98 <_printf_float>
 8012aa4:	4607      	mov	r7, r0
 8012aa6:	1c78      	adds	r0, r7, #1
 8012aa8:	d1d6      	bne.n	8012a58 <_vfiprintf_r+0x1bc>
 8012aaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012aac:	07d9      	lsls	r1, r3, #31
 8012aae:	d405      	bmi.n	8012abc <_vfiprintf_r+0x220>
 8012ab0:	89ab      	ldrh	r3, [r5, #12]
 8012ab2:	059a      	lsls	r2, r3, #22
 8012ab4:	d402      	bmi.n	8012abc <_vfiprintf_r+0x220>
 8012ab6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012ab8:	f7fe ff86 	bl	80119c8 <__retarget_lock_release_recursive>
 8012abc:	89ab      	ldrh	r3, [r5, #12]
 8012abe:	065b      	lsls	r3, r3, #25
 8012ac0:	f53f af12 	bmi.w	80128e8 <_vfiprintf_r+0x4c>
 8012ac4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012ac6:	e711      	b.n	80128ec <_vfiprintf_r+0x50>
 8012ac8:	ab03      	add	r3, sp, #12
 8012aca:	9300      	str	r3, [sp, #0]
 8012acc:	462a      	mov	r2, r5
 8012ace:	4b09      	ldr	r3, [pc, #36]	; (8012af4 <_vfiprintf_r+0x258>)
 8012ad0:	a904      	add	r1, sp, #16
 8012ad2:	4630      	mov	r0, r6
 8012ad4:	f7fc fd04 	bl	800f4e0 <_printf_i>
 8012ad8:	e7e4      	b.n	8012aa4 <_vfiprintf_r+0x208>
 8012ada:	bf00      	nop
 8012adc:	08014cac 	.word	0x08014cac
 8012ae0:	08014ccc 	.word	0x08014ccc
 8012ae4:	08014c8c 	.word	0x08014c8c
 8012ae8:	08014c3c 	.word	0x08014c3c
 8012aec:	08014c46 	.word	0x08014c46
 8012af0:	0800ef99 	.word	0x0800ef99
 8012af4:	08012879 	.word	0x08012879
 8012af8:	08014c42 	.word	0x08014c42

08012afc <_read_r>:
 8012afc:	b538      	push	{r3, r4, r5, lr}
 8012afe:	4d07      	ldr	r5, [pc, #28]	; (8012b1c <_read_r+0x20>)
 8012b00:	4604      	mov	r4, r0
 8012b02:	4608      	mov	r0, r1
 8012b04:	4611      	mov	r1, r2
 8012b06:	2200      	movs	r2, #0
 8012b08:	602a      	str	r2, [r5, #0]
 8012b0a:	461a      	mov	r2, r3
 8012b0c:	f7f3 fa82 	bl	8006014 <_read>
 8012b10:	1c43      	adds	r3, r0, #1
 8012b12:	d102      	bne.n	8012b1a <_read_r+0x1e>
 8012b14:	682b      	ldr	r3, [r5, #0]
 8012b16:	b103      	cbz	r3, 8012b1a <_read_r+0x1e>
 8012b18:	6023      	str	r3, [r4, #0]
 8012b1a:	bd38      	pop	{r3, r4, r5, pc}
 8012b1c:	200036d4 	.word	0x200036d4

08012b20 <__swbuf_r>:
 8012b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b22:	460e      	mov	r6, r1
 8012b24:	4614      	mov	r4, r2
 8012b26:	4605      	mov	r5, r0
 8012b28:	b118      	cbz	r0, 8012b32 <__swbuf_r+0x12>
 8012b2a:	6983      	ldr	r3, [r0, #24]
 8012b2c:	b90b      	cbnz	r3, 8012b32 <__swbuf_r+0x12>
 8012b2e:	f000 f9d9 	bl	8012ee4 <__sinit>
 8012b32:	4b21      	ldr	r3, [pc, #132]	; (8012bb8 <__swbuf_r+0x98>)
 8012b34:	429c      	cmp	r4, r3
 8012b36:	d12b      	bne.n	8012b90 <__swbuf_r+0x70>
 8012b38:	686c      	ldr	r4, [r5, #4]
 8012b3a:	69a3      	ldr	r3, [r4, #24]
 8012b3c:	60a3      	str	r3, [r4, #8]
 8012b3e:	89a3      	ldrh	r3, [r4, #12]
 8012b40:	071a      	lsls	r2, r3, #28
 8012b42:	d52f      	bpl.n	8012ba4 <__swbuf_r+0x84>
 8012b44:	6923      	ldr	r3, [r4, #16]
 8012b46:	b36b      	cbz	r3, 8012ba4 <__swbuf_r+0x84>
 8012b48:	6923      	ldr	r3, [r4, #16]
 8012b4a:	6820      	ldr	r0, [r4, #0]
 8012b4c:	1ac0      	subs	r0, r0, r3
 8012b4e:	6963      	ldr	r3, [r4, #20]
 8012b50:	b2f6      	uxtb	r6, r6
 8012b52:	4283      	cmp	r3, r0
 8012b54:	4637      	mov	r7, r6
 8012b56:	dc04      	bgt.n	8012b62 <__swbuf_r+0x42>
 8012b58:	4621      	mov	r1, r4
 8012b5a:	4628      	mov	r0, r5
 8012b5c:	f000 f92e 	bl	8012dbc <_fflush_r>
 8012b60:	bb30      	cbnz	r0, 8012bb0 <__swbuf_r+0x90>
 8012b62:	68a3      	ldr	r3, [r4, #8]
 8012b64:	3b01      	subs	r3, #1
 8012b66:	60a3      	str	r3, [r4, #8]
 8012b68:	6823      	ldr	r3, [r4, #0]
 8012b6a:	1c5a      	adds	r2, r3, #1
 8012b6c:	6022      	str	r2, [r4, #0]
 8012b6e:	701e      	strb	r6, [r3, #0]
 8012b70:	6963      	ldr	r3, [r4, #20]
 8012b72:	3001      	adds	r0, #1
 8012b74:	4283      	cmp	r3, r0
 8012b76:	d004      	beq.n	8012b82 <__swbuf_r+0x62>
 8012b78:	89a3      	ldrh	r3, [r4, #12]
 8012b7a:	07db      	lsls	r3, r3, #31
 8012b7c:	d506      	bpl.n	8012b8c <__swbuf_r+0x6c>
 8012b7e:	2e0a      	cmp	r6, #10
 8012b80:	d104      	bne.n	8012b8c <__swbuf_r+0x6c>
 8012b82:	4621      	mov	r1, r4
 8012b84:	4628      	mov	r0, r5
 8012b86:	f000 f919 	bl	8012dbc <_fflush_r>
 8012b8a:	b988      	cbnz	r0, 8012bb0 <__swbuf_r+0x90>
 8012b8c:	4638      	mov	r0, r7
 8012b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b90:	4b0a      	ldr	r3, [pc, #40]	; (8012bbc <__swbuf_r+0x9c>)
 8012b92:	429c      	cmp	r4, r3
 8012b94:	d101      	bne.n	8012b9a <__swbuf_r+0x7a>
 8012b96:	68ac      	ldr	r4, [r5, #8]
 8012b98:	e7cf      	b.n	8012b3a <__swbuf_r+0x1a>
 8012b9a:	4b09      	ldr	r3, [pc, #36]	; (8012bc0 <__swbuf_r+0xa0>)
 8012b9c:	429c      	cmp	r4, r3
 8012b9e:	bf08      	it	eq
 8012ba0:	68ec      	ldreq	r4, [r5, #12]
 8012ba2:	e7ca      	b.n	8012b3a <__swbuf_r+0x1a>
 8012ba4:	4621      	mov	r1, r4
 8012ba6:	4628      	mov	r0, r5
 8012ba8:	f000 f80c 	bl	8012bc4 <__swsetup_r>
 8012bac:	2800      	cmp	r0, #0
 8012bae:	d0cb      	beq.n	8012b48 <__swbuf_r+0x28>
 8012bb0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012bb4:	e7ea      	b.n	8012b8c <__swbuf_r+0x6c>
 8012bb6:	bf00      	nop
 8012bb8:	08014cac 	.word	0x08014cac
 8012bbc:	08014ccc 	.word	0x08014ccc
 8012bc0:	08014c8c 	.word	0x08014c8c

08012bc4 <__swsetup_r>:
 8012bc4:	4b32      	ldr	r3, [pc, #200]	; (8012c90 <__swsetup_r+0xcc>)
 8012bc6:	b570      	push	{r4, r5, r6, lr}
 8012bc8:	681d      	ldr	r5, [r3, #0]
 8012bca:	4606      	mov	r6, r0
 8012bcc:	460c      	mov	r4, r1
 8012bce:	b125      	cbz	r5, 8012bda <__swsetup_r+0x16>
 8012bd0:	69ab      	ldr	r3, [r5, #24]
 8012bd2:	b913      	cbnz	r3, 8012bda <__swsetup_r+0x16>
 8012bd4:	4628      	mov	r0, r5
 8012bd6:	f000 f985 	bl	8012ee4 <__sinit>
 8012bda:	4b2e      	ldr	r3, [pc, #184]	; (8012c94 <__swsetup_r+0xd0>)
 8012bdc:	429c      	cmp	r4, r3
 8012bde:	d10f      	bne.n	8012c00 <__swsetup_r+0x3c>
 8012be0:	686c      	ldr	r4, [r5, #4]
 8012be2:	89a3      	ldrh	r3, [r4, #12]
 8012be4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012be8:	0719      	lsls	r1, r3, #28
 8012bea:	d42c      	bmi.n	8012c46 <__swsetup_r+0x82>
 8012bec:	06dd      	lsls	r5, r3, #27
 8012bee:	d411      	bmi.n	8012c14 <__swsetup_r+0x50>
 8012bf0:	2309      	movs	r3, #9
 8012bf2:	6033      	str	r3, [r6, #0]
 8012bf4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012bf8:	81a3      	strh	r3, [r4, #12]
 8012bfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012bfe:	e03e      	b.n	8012c7e <__swsetup_r+0xba>
 8012c00:	4b25      	ldr	r3, [pc, #148]	; (8012c98 <__swsetup_r+0xd4>)
 8012c02:	429c      	cmp	r4, r3
 8012c04:	d101      	bne.n	8012c0a <__swsetup_r+0x46>
 8012c06:	68ac      	ldr	r4, [r5, #8]
 8012c08:	e7eb      	b.n	8012be2 <__swsetup_r+0x1e>
 8012c0a:	4b24      	ldr	r3, [pc, #144]	; (8012c9c <__swsetup_r+0xd8>)
 8012c0c:	429c      	cmp	r4, r3
 8012c0e:	bf08      	it	eq
 8012c10:	68ec      	ldreq	r4, [r5, #12]
 8012c12:	e7e6      	b.n	8012be2 <__swsetup_r+0x1e>
 8012c14:	0758      	lsls	r0, r3, #29
 8012c16:	d512      	bpl.n	8012c3e <__swsetup_r+0x7a>
 8012c18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012c1a:	b141      	cbz	r1, 8012c2e <__swsetup_r+0x6a>
 8012c1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012c20:	4299      	cmp	r1, r3
 8012c22:	d002      	beq.n	8012c2a <__swsetup_r+0x66>
 8012c24:	4630      	mov	r0, r6
 8012c26:	f7fc f837 	bl	800ec98 <_free_r>
 8012c2a:	2300      	movs	r3, #0
 8012c2c:	6363      	str	r3, [r4, #52]	; 0x34
 8012c2e:	89a3      	ldrh	r3, [r4, #12]
 8012c30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012c34:	81a3      	strh	r3, [r4, #12]
 8012c36:	2300      	movs	r3, #0
 8012c38:	6063      	str	r3, [r4, #4]
 8012c3a:	6923      	ldr	r3, [r4, #16]
 8012c3c:	6023      	str	r3, [r4, #0]
 8012c3e:	89a3      	ldrh	r3, [r4, #12]
 8012c40:	f043 0308 	orr.w	r3, r3, #8
 8012c44:	81a3      	strh	r3, [r4, #12]
 8012c46:	6923      	ldr	r3, [r4, #16]
 8012c48:	b94b      	cbnz	r3, 8012c5e <__swsetup_r+0x9a>
 8012c4a:	89a3      	ldrh	r3, [r4, #12]
 8012c4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012c50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012c54:	d003      	beq.n	8012c5e <__swsetup_r+0x9a>
 8012c56:	4621      	mov	r1, r4
 8012c58:	4630      	mov	r0, r6
 8012c5a:	f000 fa05 	bl	8013068 <__smakebuf_r>
 8012c5e:	89a0      	ldrh	r0, [r4, #12]
 8012c60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012c64:	f010 0301 	ands.w	r3, r0, #1
 8012c68:	d00a      	beq.n	8012c80 <__swsetup_r+0xbc>
 8012c6a:	2300      	movs	r3, #0
 8012c6c:	60a3      	str	r3, [r4, #8]
 8012c6e:	6963      	ldr	r3, [r4, #20]
 8012c70:	425b      	negs	r3, r3
 8012c72:	61a3      	str	r3, [r4, #24]
 8012c74:	6923      	ldr	r3, [r4, #16]
 8012c76:	b943      	cbnz	r3, 8012c8a <__swsetup_r+0xc6>
 8012c78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012c7c:	d1ba      	bne.n	8012bf4 <__swsetup_r+0x30>
 8012c7e:	bd70      	pop	{r4, r5, r6, pc}
 8012c80:	0781      	lsls	r1, r0, #30
 8012c82:	bf58      	it	pl
 8012c84:	6963      	ldrpl	r3, [r4, #20]
 8012c86:	60a3      	str	r3, [r4, #8]
 8012c88:	e7f4      	b.n	8012c74 <__swsetup_r+0xb0>
 8012c8a:	2000      	movs	r0, #0
 8012c8c:	e7f7      	b.n	8012c7e <__swsetup_r+0xba>
 8012c8e:	bf00      	nop
 8012c90:	2000023c 	.word	0x2000023c
 8012c94:	08014cac 	.word	0x08014cac
 8012c98:	08014ccc 	.word	0x08014ccc
 8012c9c:	08014c8c 	.word	0x08014c8c

08012ca0 <abort>:
 8012ca0:	b508      	push	{r3, lr}
 8012ca2:	2006      	movs	r0, #6
 8012ca4:	f000 fa50 	bl	8013148 <raise>
 8012ca8:	2001      	movs	r0, #1
 8012caa:	f7f3 f9a9 	bl	8006000 <_exit>
	...

08012cb0 <__sflush_r>:
 8012cb0:	898a      	ldrh	r2, [r1, #12]
 8012cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cb6:	4605      	mov	r5, r0
 8012cb8:	0710      	lsls	r0, r2, #28
 8012cba:	460c      	mov	r4, r1
 8012cbc:	d458      	bmi.n	8012d70 <__sflush_r+0xc0>
 8012cbe:	684b      	ldr	r3, [r1, #4]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	dc05      	bgt.n	8012cd0 <__sflush_r+0x20>
 8012cc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	dc02      	bgt.n	8012cd0 <__sflush_r+0x20>
 8012cca:	2000      	movs	r0, #0
 8012ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012cd2:	2e00      	cmp	r6, #0
 8012cd4:	d0f9      	beq.n	8012cca <__sflush_r+0x1a>
 8012cd6:	2300      	movs	r3, #0
 8012cd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012cdc:	682f      	ldr	r7, [r5, #0]
 8012cde:	602b      	str	r3, [r5, #0]
 8012ce0:	d032      	beq.n	8012d48 <__sflush_r+0x98>
 8012ce2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012ce4:	89a3      	ldrh	r3, [r4, #12]
 8012ce6:	075a      	lsls	r2, r3, #29
 8012ce8:	d505      	bpl.n	8012cf6 <__sflush_r+0x46>
 8012cea:	6863      	ldr	r3, [r4, #4]
 8012cec:	1ac0      	subs	r0, r0, r3
 8012cee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012cf0:	b10b      	cbz	r3, 8012cf6 <__sflush_r+0x46>
 8012cf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012cf4:	1ac0      	subs	r0, r0, r3
 8012cf6:	2300      	movs	r3, #0
 8012cf8:	4602      	mov	r2, r0
 8012cfa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012cfc:	6a21      	ldr	r1, [r4, #32]
 8012cfe:	4628      	mov	r0, r5
 8012d00:	47b0      	blx	r6
 8012d02:	1c43      	adds	r3, r0, #1
 8012d04:	89a3      	ldrh	r3, [r4, #12]
 8012d06:	d106      	bne.n	8012d16 <__sflush_r+0x66>
 8012d08:	6829      	ldr	r1, [r5, #0]
 8012d0a:	291d      	cmp	r1, #29
 8012d0c:	d82c      	bhi.n	8012d68 <__sflush_r+0xb8>
 8012d0e:	4a2a      	ldr	r2, [pc, #168]	; (8012db8 <__sflush_r+0x108>)
 8012d10:	40ca      	lsrs	r2, r1
 8012d12:	07d6      	lsls	r6, r2, #31
 8012d14:	d528      	bpl.n	8012d68 <__sflush_r+0xb8>
 8012d16:	2200      	movs	r2, #0
 8012d18:	6062      	str	r2, [r4, #4]
 8012d1a:	04d9      	lsls	r1, r3, #19
 8012d1c:	6922      	ldr	r2, [r4, #16]
 8012d1e:	6022      	str	r2, [r4, #0]
 8012d20:	d504      	bpl.n	8012d2c <__sflush_r+0x7c>
 8012d22:	1c42      	adds	r2, r0, #1
 8012d24:	d101      	bne.n	8012d2a <__sflush_r+0x7a>
 8012d26:	682b      	ldr	r3, [r5, #0]
 8012d28:	b903      	cbnz	r3, 8012d2c <__sflush_r+0x7c>
 8012d2a:	6560      	str	r0, [r4, #84]	; 0x54
 8012d2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012d2e:	602f      	str	r7, [r5, #0]
 8012d30:	2900      	cmp	r1, #0
 8012d32:	d0ca      	beq.n	8012cca <__sflush_r+0x1a>
 8012d34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012d38:	4299      	cmp	r1, r3
 8012d3a:	d002      	beq.n	8012d42 <__sflush_r+0x92>
 8012d3c:	4628      	mov	r0, r5
 8012d3e:	f7fb ffab 	bl	800ec98 <_free_r>
 8012d42:	2000      	movs	r0, #0
 8012d44:	6360      	str	r0, [r4, #52]	; 0x34
 8012d46:	e7c1      	b.n	8012ccc <__sflush_r+0x1c>
 8012d48:	6a21      	ldr	r1, [r4, #32]
 8012d4a:	2301      	movs	r3, #1
 8012d4c:	4628      	mov	r0, r5
 8012d4e:	47b0      	blx	r6
 8012d50:	1c41      	adds	r1, r0, #1
 8012d52:	d1c7      	bne.n	8012ce4 <__sflush_r+0x34>
 8012d54:	682b      	ldr	r3, [r5, #0]
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d0c4      	beq.n	8012ce4 <__sflush_r+0x34>
 8012d5a:	2b1d      	cmp	r3, #29
 8012d5c:	d001      	beq.n	8012d62 <__sflush_r+0xb2>
 8012d5e:	2b16      	cmp	r3, #22
 8012d60:	d101      	bne.n	8012d66 <__sflush_r+0xb6>
 8012d62:	602f      	str	r7, [r5, #0]
 8012d64:	e7b1      	b.n	8012cca <__sflush_r+0x1a>
 8012d66:	89a3      	ldrh	r3, [r4, #12]
 8012d68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012d6c:	81a3      	strh	r3, [r4, #12]
 8012d6e:	e7ad      	b.n	8012ccc <__sflush_r+0x1c>
 8012d70:	690f      	ldr	r7, [r1, #16]
 8012d72:	2f00      	cmp	r7, #0
 8012d74:	d0a9      	beq.n	8012cca <__sflush_r+0x1a>
 8012d76:	0793      	lsls	r3, r2, #30
 8012d78:	680e      	ldr	r6, [r1, #0]
 8012d7a:	bf08      	it	eq
 8012d7c:	694b      	ldreq	r3, [r1, #20]
 8012d7e:	600f      	str	r7, [r1, #0]
 8012d80:	bf18      	it	ne
 8012d82:	2300      	movne	r3, #0
 8012d84:	eba6 0807 	sub.w	r8, r6, r7
 8012d88:	608b      	str	r3, [r1, #8]
 8012d8a:	f1b8 0f00 	cmp.w	r8, #0
 8012d8e:	dd9c      	ble.n	8012cca <__sflush_r+0x1a>
 8012d90:	6a21      	ldr	r1, [r4, #32]
 8012d92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012d94:	4643      	mov	r3, r8
 8012d96:	463a      	mov	r2, r7
 8012d98:	4628      	mov	r0, r5
 8012d9a:	47b0      	blx	r6
 8012d9c:	2800      	cmp	r0, #0
 8012d9e:	dc06      	bgt.n	8012dae <__sflush_r+0xfe>
 8012da0:	89a3      	ldrh	r3, [r4, #12]
 8012da2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012da6:	81a3      	strh	r3, [r4, #12]
 8012da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012dac:	e78e      	b.n	8012ccc <__sflush_r+0x1c>
 8012dae:	4407      	add	r7, r0
 8012db0:	eba8 0800 	sub.w	r8, r8, r0
 8012db4:	e7e9      	b.n	8012d8a <__sflush_r+0xda>
 8012db6:	bf00      	nop
 8012db8:	20400001 	.word	0x20400001

08012dbc <_fflush_r>:
 8012dbc:	b538      	push	{r3, r4, r5, lr}
 8012dbe:	690b      	ldr	r3, [r1, #16]
 8012dc0:	4605      	mov	r5, r0
 8012dc2:	460c      	mov	r4, r1
 8012dc4:	b913      	cbnz	r3, 8012dcc <_fflush_r+0x10>
 8012dc6:	2500      	movs	r5, #0
 8012dc8:	4628      	mov	r0, r5
 8012dca:	bd38      	pop	{r3, r4, r5, pc}
 8012dcc:	b118      	cbz	r0, 8012dd6 <_fflush_r+0x1a>
 8012dce:	6983      	ldr	r3, [r0, #24]
 8012dd0:	b90b      	cbnz	r3, 8012dd6 <_fflush_r+0x1a>
 8012dd2:	f000 f887 	bl	8012ee4 <__sinit>
 8012dd6:	4b14      	ldr	r3, [pc, #80]	; (8012e28 <_fflush_r+0x6c>)
 8012dd8:	429c      	cmp	r4, r3
 8012dda:	d11b      	bne.n	8012e14 <_fflush_r+0x58>
 8012ddc:	686c      	ldr	r4, [r5, #4]
 8012dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d0ef      	beq.n	8012dc6 <_fflush_r+0xa>
 8012de6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012de8:	07d0      	lsls	r0, r2, #31
 8012dea:	d404      	bmi.n	8012df6 <_fflush_r+0x3a>
 8012dec:	0599      	lsls	r1, r3, #22
 8012dee:	d402      	bmi.n	8012df6 <_fflush_r+0x3a>
 8012df0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012df2:	f7fe fde8 	bl	80119c6 <__retarget_lock_acquire_recursive>
 8012df6:	4628      	mov	r0, r5
 8012df8:	4621      	mov	r1, r4
 8012dfa:	f7ff ff59 	bl	8012cb0 <__sflush_r>
 8012dfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012e00:	07da      	lsls	r2, r3, #31
 8012e02:	4605      	mov	r5, r0
 8012e04:	d4e0      	bmi.n	8012dc8 <_fflush_r+0xc>
 8012e06:	89a3      	ldrh	r3, [r4, #12]
 8012e08:	059b      	lsls	r3, r3, #22
 8012e0a:	d4dd      	bmi.n	8012dc8 <_fflush_r+0xc>
 8012e0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012e0e:	f7fe fddb 	bl	80119c8 <__retarget_lock_release_recursive>
 8012e12:	e7d9      	b.n	8012dc8 <_fflush_r+0xc>
 8012e14:	4b05      	ldr	r3, [pc, #20]	; (8012e2c <_fflush_r+0x70>)
 8012e16:	429c      	cmp	r4, r3
 8012e18:	d101      	bne.n	8012e1e <_fflush_r+0x62>
 8012e1a:	68ac      	ldr	r4, [r5, #8]
 8012e1c:	e7df      	b.n	8012dde <_fflush_r+0x22>
 8012e1e:	4b04      	ldr	r3, [pc, #16]	; (8012e30 <_fflush_r+0x74>)
 8012e20:	429c      	cmp	r4, r3
 8012e22:	bf08      	it	eq
 8012e24:	68ec      	ldreq	r4, [r5, #12]
 8012e26:	e7da      	b.n	8012dde <_fflush_r+0x22>
 8012e28:	08014cac 	.word	0x08014cac
 8012e2c:	08014ccc 	.word	0x08014ccc
 8012e30:	08014c8c 	.word	0x08014c8c

08012e34 <std>:
 8012e34:	2300      	movs	r3, #0
 8012e36:	b510      	push	{r4, lr}
 8012e38:	4604      	mov	r4, r0
 8012e3a:	e9c0 3300 	strd	r3, r3, [r0]
 8012e3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012e42:	6083      	str	r3, [r0, #8]
 8012e44:	8181      	strh	r1, [r0, #12]
 8012e46:	6643      	str	r3, [r0, #100]	; 0x64
 8012e48:	81c2      	strh	r2, [r0, #14]
 8012e4a:	6183      	str	r3, [r0, #24]
 8012e4c:	4619      	mov	r1, r3
 8012e4e:	2208      	movs	r2, #8
 8012e50:	305c      	adds	r0, #92	; 0x5c
 8012e52:	f7fb ff03 	bl	800ec5c <memset>
 8012e56:	4b05      	ldr	r3, [pc, #20]	; (8012e6c <std+0x38>)
 8012e58:	6263      	str	r3, [r4, #36]	; 0x24
 8012e5a:	4b05      	ldr	r3, [pc, #20]	; (8012e70 <std+0x3c>)
 8012e5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8012e5e:	4b05      	ldr	r3, [pc, #20]	; (8012e74 <std+0x40>)
 8012e60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012e62:	4b05      	ldr	r3, [pc, #20]	; (8012e78 <std+0x44>)
 8012e64:	6224      	str	r4, [r4, #32]
 8012e66:	6323      	str	r3, [r4, #48]	; 0x30
 8012e68:	bd10      	pop	{r4, pc}
 8012e6a:	bf00      	nop
 8012e6c:	08012651 	.word	0x08012651
 8012e70:	08012673 	.word	0x08012673
 8012e74:	080126ab 	.word	0x080126ab
 8012e78:	080126cf 	.word	0x080126cf

08012e7c <_cleanup_r>:
 8012e7c:	4901      	ldr	r1, [pc, #4]	; (8012e84 <_cleanup_r+0x8>)
 8012e7e:	f000 b8af 	b.w	8012fe0 <_fwalk_reent>
 8012e82:	bf00      	nop
 8012e84:	08012dbd 	.word	0x08012dbd

08012e88 <__sfmoreglue>:
 8012e88:	b570      	push	{r4, r5, r6, lr}
 8012e8a:	2268      	movs	r2, #104	; 0x68
 8012e8c:	1e4d      	subs	r5, r1, #1
 8012e8e:	4355      	muls	r5, r2
 8012e90:	460e      	mov	r6, r1
 8012e92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012e96:	f7fb ff6b 	bl	800ed70 <_malloc_r>
 8012e9a:	4604      	mov	r4, r0
 8012e9c:	b140      	cbz	r0, 8012eb0 <__sfmoreglue+0x28>
 8012e9e:	2100      	movs	r1, #0
 8012ea0:	e9c0 1600 	strd	r1, r6, [r0]
 8012ea4:	300c      	adds	r0, #12
 8012ea6:	60a0      	str	r0, [r4, #8]
 8012ea8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012eac:	f7fb fed6 	bl	800ec5c <memset>
 8012eb0:	4620      	mov	r0, r4
 8012eb2:	bd70      	pop	{r4, r5, r6, pc}

08012eb4 <__sfp_lock_acquire>:
 8012eb4:	4801      	ldr	r0, [pc, #4]	; (8012ebc <__sfp_lock_acquire+0x8>)
 8012eb6:	f7fe bd86 	b.w	80119c6 <__retarget_lock_acquire_recursive>
 8012eba:	bf00      	nop
 8012ebc:	200036d1 	.word	0x200036d1

08012ec0 <__sfp_lock_release>:
 8012ec0:	4801      	ldr	r0, [pc, #4]	; (8012ec8 <__sfp_lock_release+0x8>)
 8012ec2:	f7fe bd81 	b.w	80119c8 <__retarget_lock_release_recursive>
 8012ec6:	bf00      	nop
 8012ec8:	200036d1 	.word	0x200036d1

08012ecc <__sinit_lock_acquire>:
 8012ecc:	4801      	ldr	r0, [pc, #4]	; (8012ed4 <__sinit_lock_acquire+0x8>)
 8012ece:	f7fe bd7a 	b.w	80119c6 <__retarget_lock_acquire_recursive>
 8012ed2:	bf00      	nop
 8012ed4:	200036d2 	.word	0x200036d2

08012ed8 <__sinit_lock_release>:
 8012ed8:	4801      	ldr	r0, [pc, #4]	; (8012ee0 <__sinit_lock_release+0x8>)
 8012eda:	f7fe bd75 	b.w	80119c8 <__retarget_lock_release_recursive>
 8012ede:	bf00      	nop
 8012ee0:	200036d2 	.word	0x200036d2

08012ee4 <__sinit>:
 8012ee4:	b510      	push	{r4, lr}
 8012ee6:	4604      	mov	r4, r0
 8012ee8:	f7ff fff0 	bl	8012ecc <__sinit_lock_acquire>
 8012eec:	69a3      	ldr	r3, [r4, #24]
 8012eee:	b11b      	cbz	r3, 8012ef8 <__sinit+0x14>
 8012ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ef4:	f7ff bff0 	b.w	8012ed8 <__sinit_lock_release>
 8012ef8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012efc:	6523      	str	r3, [r4, #80]	; 0x50
 8012efe:	4b13      	ldr	r3, [pc, #76]	; (8012f4c <__sinit+0x68>)
 8012f00:	4a13      	ldr	r2, [pc, #76]	; (8012f50 <__sinit+0x6c>)
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	62a2      	str	r2, [r4, #40]	; 0x28
 8012f06:	42a3      	cmp	r3, r4
 8012f08:	bf04      	itt	eq
 8012f0a:	2301      	moveq	r3, #1
 8012f0c:	61a3      	streq	r3, [r4, #24]
 8012f0e:	4620      	mov	r0, r4
 8012f10:	f000 f820 	bl	8012f54 <__sfp>
 8012f14:	6060      	str	r0, [r4, #4]
 8012f16:	4620      	mov	r0, r4
 8012f18:	f000 f81c 	bl	8012f54 <__sfp>
 8012f1c:	60a0      	str	r0, [r4, #8]
 8012f1e:	4620      	mov	r0, r4
 8012f20:	f000 f818 	bl	8012f54 <__sfp>
 8012f24:	2200      	movs	r2, #0
 8012f26:	60e0      	str	r0, [r4, #12]
 8012f28:	2104      	movs	r1, #4
 8012f2a:	6860      	ldr	r0, [r4, #4]
 8012f2c:	f7ff ff82 	bl	8012e34 <std>
 8012f30:	68a0      	ldr	r0, [r4, #8]
 8012f32:	2201      	movs	r2, #1
 8012f34:	2109      	movs	r1, #9
 8012f36:	f7ff ff7d 	bl	8012e34 <std>
 8012f3a:	68e0      	ldr	r0, [r4, #12]
 8012f3c:	2202      	movs	r2, #2
 8012f3e:	2112      	movs	r1, #18
 8012f40:	f7ff ff78 	bl	8012e34 <std>
 8012f44:	2301      	movs	r3, #1
 8012f46:	61a3      	str	r3, [r4, #24]
 8012f48:	e7d2      	b.n	8012ef0 <__sinit+0xc>
 8012f4a:	bf00      	nop
 8012f4c:	08014950 	.word	0x08014950
 8012f50:	08012e7d 	.word	0x08012e7d

08012f54 <__sfp>:
 8012f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f56:	4607      	mov	r7, r0
 8012f58:	f7ff ffac 	bl	8012eb4 <__sfp_lock_acquire>
 8012f5c:	4b1e      	ldr	r3, [pc, #120]	; (8012fd8 <__sfp+0x84>)
 8012f5e:	681e      	ldr	r6, [r3, #0]
 8012f60:	69b3      	ldr	r3, [r6, #24]
 8012f62:	b913      	cbnz	r3, 8012f6a <__sfp+0x16>
 8012f64:	4630      	mov	r0, r6
 8012f66:	f7ff ffbd 	bl	8012ee4 <__sinit>
 8012f6a:	3648      	adds	r6, #72	; 0x48
 8012f6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012f70:	3b01      	subs	r3, #1
 8012f72:	d503      	bpl.n	8012f7c <__sfp+0x28>
 8012f74:	6833      	ldr	r3, [r6, #0]
 8012f76:	b30b      	cbz	r3, 8012fbc <__sfp+0x68>
 8012f78:	6836      	ldr	r6, [r6, #0]
 8012f7a:	e7f7      	b.n	8012f6c <__sfp+0x18>
 8012f7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012f80:	b9d5      	cbnz	r5, 8012fb8 <__sfp+0x64>
 8012f82:	4b16      	ldr	r3, [pc, #88]	; (8012fdc <__sfp+0x88>)
 8012f84:	60e3      	str	r3, [r4, #12]
 8012f86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012f8a:	6665      	str	r5, [r4, #100]	; 0x64
 8012f8c:	f7fe fd1a 	bl	80119c4 <__retarget_lock_init_recursive>
 8012f90:	f7ff ff96 	bl	8012ec0 <__sfp_lock_release>
 8012f94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012f98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012f9c:	6025      	str	r5, [r4, #0]
 8012f9e:	61a5      	str	r5, [r4, #24]
 8012fa0:	2208      	movs	r2, #8
 8012fa2:	4629      	mov	r1, r5
 8012fa4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012fa8:	f7fb fe58 	bl	800ec5c <memset>
 8012fac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012fb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012fb4:	4620      	mov	r0, r4
 8012fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fb8:	3468      	adds	r4, #104	; 0x68
 8012fba:	e7d9      	b.n	8012f70 <__sfp+0x1c>
 8012fbc:	2104      	movs	r1, #4
 8012fbe:	4638      	mov	r0, r7
 8012fc0:	f7ff ff62 	bl	8012e88 <__sfmoreglue>
 8012fc4:	4604      	mov	r4, r0
 8012fc6:	6030      	str	r0, [r6, #0]
 8012fc8:	2800      	cmp	r0, #0
 8012fca:	d1d5      	bne.n	8012f78 <__sfp+0x24>
 8012fcc:	f7ff ff78 	bl	8012ec0 <__sfp_lock_release>
 8012fd0:	230c      	movs	r3, #12
 8012fd2:	603b      	str	r3, [r7, #0]
 8012fd4:	e7ee      	b.n	8012fb4 <__sfp+0x60>
 8012fd6:	bf00      	nop
 8012fd8:	08014950 	.word	0x08014950
 8012fdc:	ffff0001 	.word	0xffff0001

08012fe0 <_fwalk_reent>:
 8012fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012fe4:	4606      	mov	r6, r0
 8012fe6:	4688      	mov	r8, r1
 8012fe8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012fec:	2700      	movs	r7, #0
 8012fee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012ff2:	f1b9 0901 	subs.w	r9, r9, #1
 8012ff6:	d505      	bpl.n	8013004 <_fwalk_reent+0x24>
 8012ff8:	6824      	ldr	r4, [r4, #0]
 8012ffa:	2c00      	cmp	r4, #0
 8012ffc:	d1f7      	bne.n	8012fee <_fwalk_reent+0xe>
 8012ffe:	4638      	mov	r0, r7
 8013000:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013004:	89ab      	ldrh	r3, [r5, #12]
 8013006:	2b01      	cmp	r3, #1
 8013008:	d907      	bls.n	801301a <_fwalk_reent+0x3a>
 801300a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801300e:	3301      	adds	r3, #1
 8013010:	d003      	beq.n	801301a <_fwalk_reent+0x3a>
 8013012:	4629      	mov	r1, r5
 8013014:	4630      	mov	r0, r6
 8013016:	47c0      	blx	r8
 8013018:	4307      	orrs	r7, r0
 801301a:	3568      	adds	r5, #104	; 0x68
 801301c:	e7e9      	b.n	8012ff2 <_fwalk_reent+0x12>

0801301e <__swhatbuf_r>:
 801301e:	b570      	push	{r4, r5, r6, lr}
 8013020:	460e      	mov	r6, r1
 8013022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013026:	2900      	cmp	r1, #0
 8013028:	b096      	sub	sp, #88	; 0x58
 801302a:	4614      	mov	r4, r2
 801302c:	461d      	mov	r5, r3
 801302e:	da08      	bge.n	8013042 <__swhatbuf_r+0x24>
 8013030:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013034:	2200      	movs	r2, #0
 8013036:	602a      	str	r2, [r5, #0]
 8013038:	061a      	lsls	r2, r3, #24
 801303a:	d410      	bmi.n	801305e <__swhatbuf_r+0x40>
 801303c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013040:	e00e      	b.n	8013060 <__swhatbuf_r+0x42>
 8013042:	466a      	mov	r2, sp
 8013044:	f000 f89c 	bl	8013180 <_fstat_r>
 8013048:	2800      	cmp	r0, #0
 801304a:	dbf1      	blt.n	8013030 <__swhatbuf_r+0x12>
 801304c:	9a01      	ldr	r2, [sp, #4]
 801304e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013052:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013056:	425a      	negs	r2, r3
 8013058:	415a      	adcs	r2, r3
 801305a:	602a      	str	r2, [r5, #0]
 801305c:	e7ee      	b.n	801303c <__swhatbuf_r+0x1e>
 801305e:	2340      	movs	r3, #64	; 0x40
 8013060:	2000      	movs	r0, #0
 8013062:	6023      	str	r3, [r4, #0]
 8013064:	b016      	add	sp, #88	; 0x58
 8013066:	bd70      	pop	{r4, r5, r6, pc}

08013068 <__smakebuf_r>:
 8013068:	898b      	ldrh	r3, [r1, #12]
 801306a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801306c:	079d      	lsls	r5, r3, #30
 801306e:	4606      	mov	r6, r0
 8013070:	460c      	mov	r4, r1
 8013072:	d507      	bpl.n	8013084 <__smakebuf_r+0x1c>
 8013074:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013078:	6023      	str	r3, [r4, #0]
 801307a:	6123      	str	r3, [r4, #16]
 801307c:	2301      	movs	r3, #1
 801307e:	6163      	str	r3, [r4, #20]
 8013080:	b002      	add	sp, #8
 8013082:	bd70      	pop	{r4, r5, r6, pc}
 8013084:	ab01      	add	r3, sp, #4
 8013086:	466a      	mov	r2, sp
 8013088:	f7ff ffc9 	bl	801301e <__swhatbuf_r>
 801308c:	9900      	ldr	r1, [sp, #0]
 801308e:	4605      	mov	r5, r0
 8013090:	4630      	mov	r0, r6
 8013092:	f7fb fe6d 	bl	800ed70 <_malloc_r>
 8013096:	b948      	cbnz	r0, 80130ac <__smakebuf_r+0x44>
 8013098:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801309c:	059a      	lsls	r2, r3, #22
 801309e:	d4ef      	bmi.n	8013080 <__smakebuf_r+0x18>
 80130a0:	f023 0303 	bic.w	r3, r3, #3
 80130a4:	f043 0302 	orr.w	r3, r3, #2
 80130a8:	81a3      	strh	r3, [r4, #12]
 80130aa:	e7e3      	b.n	8013074 <__smakebuf_r+0xc>
 80130ac:	4b0d      	ldr	r3, [pc, #52]	; (80130e4 <__smakebuf_r+0x7c>)
 80130ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80130b0:	89a3      	ldrh	r3, [r4, #12]
 80130b2:	6020      	str	r0, [r4, #0]
 80130b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80130b8:	81a3      	strh	r3, [r4, #12]
 80130ba:	9b00      	ldr	r3, [sp, #0]
 80130bc:	6163      	str	r3, [r4, #20]
 80130be:	9b01      	ldr	r3, [sp, #4]
 80130c0:	6120      	str	r0, [r4, #16]
 80130c2:	b15b      	cbz	r3, 80130dc <__smakebuf_r+0x74>
 80130c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80130c8:	4630      	mov	r0, r6
 80130ca:	f000 f86b 	bl	80131a4 <_isatty_r>
 80130ce:	b128      	cbz	r0, 80130dc <__smakebuf_r+0x74>
 80130d0:	89a3      	ldrh	r3, [r4, #12]
 80130d2:	f023 0303 	bic.w	r3, r3, #3
 80130d6:	f043 0301 	orr.w	r3, r3, #1
 80130da:	81a3      	strh	r3, [r4, #12]
 80130dc:	89a0      	ldrh	r0, [r4, #12]
 80130de:	4305      	orrs	r5, r0
 80130e0:	81a5      	strh	r5, [r4, #12]
 80130e2:	e7cd      	b.n	8013080 <__smakebuf_r+0x18>
 80130e4:	08012e7d 	.word	0x08012e7d

080130e8 <_malloc_usable_size_r>:
 80130e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80130ec:	1f18      	subs	r0, r3, #4
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	bfbc      	itt	lt
 80130f2:	580b      	ldrlt	r3, [r1, r0]
 80130f4:	18c0      	addlt	r0, r0, r3
 80130f6:	4770      	bx	lr

080130f8 <_raise_r>:
 80130f8:	291f      	cmp	r1, #31
 80130fa:	b538      	push	{r3, r4, r5, lr}
 80130fc:	4604      	mov	r4, r0
 80130fe:	460d      	mov	r5, r1
 8013100:	d904      	bls.n	801310c <_raise_r+0x14>
 8013102:	2316      	movs	r3, #22
 8013104:	6003      	str	r3, [r0, #0]
 8013106:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801310a:	bd38      	pop	{r3, r4, r5, pc}
 801310c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801310e:	b112      	cbz	r2, 8013116 <_raise_r+0x1e>
 8013110:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013114:	b94b      	cbnz	r3, 801312a <_raise_r+0x32>
 8013116:	4620      	mov	r0, r4
 8013118:	f000 f830 	bl	801317c <_getpid_r>
 801311c:	462a      	mov	r2, r5
 801311e:	4601      	mov	r1, r0
 8013120:	4620      	mov	r0, r4
 8013122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013126:	f000 b817 	b.w	8013158 <_kill_r>
 801312a:	2b01      	cmp	r3, #1
 801312c:	d00a      	beq.n	8013144 <_raise_r+0x4c>
 801312e:	1c59      	adds	r1, r3, #1
 8013130:	d103      	bne.n	801313a <_raise_r+0x42>
 8013132:	2316      	movs	r3, #22
 8013134:	6003      	str	r3, [r0, #0]
 8013136:	2001      	movs	r0, #1
 8013138:	e7e7      	b.n	801310a <_raise_r+0x12>
 801313a:	2400      	movs	r4, #0
 801313c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013140:	4628      	mov	r0, r5
 8013142:	4798      	blx	r3
 8013144:	2000      	movs	r0, #0
 8013146:	e7e0      	b.n	801310a <_raise_r+0x12>

08013148 <raise>:
 8013148:	4b02      	ldr	r3, [pc, #8]	; (8013154 <raise+0xc>)
 801314a:	4601      	mov	r1, r0
 801314c:	6818      	ldr	r0, [r3, #0]
 801314e:	f7ff bfd3 	b.w	80130f8 <_raise_r>
 8013152:	bf00      	nop
 8013154:	2000023c 	.word	0x2000023c

08013158 <_kill_r>:
 8013158:	b538      	push	{r3, r4, r5, lr}
 801315a:	4d07      	ldr	r5, [pc, #28]	; (8013178 <_kill_r+0x20>)
 801315c:	2300      	movs	r3, #0
 801315e:	4604      	mov	r4, r0
 8013160:	4608      	mov	r0, r1
 8013162:	4611      	mov	r1, r2
 8013164:	602b      	str	r3, [r5, #0]
 8013166:	f7f2 ff3b 	bl	8005fe0 <_kill>
 801316a:	1c43      	adds	r3, r0, #1
 801316c:	d102      	bne.n	8013174 <_kill_r+0x1c>
 801316e:	682b      	ldr	r3, [r5, #0]
 8013170:	b103      	cbz	r3, 8013174 <_kill_r+0x1c>
 8013172:	6023      	str	r3, [r4, #0]
 8013174:	bd38      	pop	{r3, r4, r5, pc}
 8013176:	bf00      	nop
 8013178:	200036d4 	.word	0x200036d4

0801317c <_getpid_r>:
 801317c:	f7f2 bf28 	b.w	8005fd0 <_getpid>

08013180 <_fstat_r>:
 8013180:	b538      	push	{r3, r4, r5, lr}
 8013182:	4d07      	ldr	r5, [pc, #28]	; (80131a0 <_fstat_r+0x20>)
 8013184:	2300      	movs	r3, #0
 8013186:	4604      	mov	r4, r0
 8013188:	4608      	mov	r0, r1
 801318a:	4611      	mov	r1, r2
 801318c:	602b      	str	r3, [r5, #0]
 801318e:	f7f2 ff86 	bl	800609e <_fstat>
 8013192:	1c43      	adds	r3, r0, #1
 8013194:	d102      	bne.n	801319c <_fstat_r+0x1c>
 8013196:	682b      	ldr	r3, [r5, #0]
 8013198:	b103      	cbz	r3, 801319c <_fstat_r+0x1c>
 801319a:	6023      	str	r3, [r4, #0]
 801319c:	bd38      	pop	{r3, r4, r5, pc}
 801319e:	bf00      	nop
 80131a0:	200036d4 	.word	0x200036d4

080131a4 <_isatty_r>:
 80131a4:	b538      	push	{r3, r4, r5, lr}
 80131a6:	4d06      	ldr	r5, [pc, #24]	; (80131c0 <_isatty_r+0x1c>)
 80131a8:	2300      	movs	r3, #0
 80131aa:	4604      	mov	r4, r0
 80131ac:	4608      	mov	r0, r1
 80131ae:	602b      	str	r3, [r5, #0]
 80131b0:	f7f2 ff85 	bl	80060be <_isatty>
 80131b4:	1c43      	adds	r3, r0, #1
 80131b6:	d102      	bne.n	80131be <_isatty_r+0x1a>
 80131b8:	682b      	ldr	r3, [r5, #0]
 80131ba:	b103      	cbz	r3, 80131be <_isatty_r+0x1a>
 80131bc:	6023      	str	r3, [r4, #0]
 80131be:	bd38      	pop	{r3, r4, r5, pc}
 80131c0:	200036d4 	.word	0x200036d4

080131c4 <_init>:
 80131c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131c6:	bf00      	nop
 80131c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80131ca:	bc08      	pop	{r3}
 80131cc:	469e      	mov	lr, r3
 80131ce:	4770      	bx	lr

080131d0 <_fini>:
 80131d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131d2:	bf00      	nop
 80131d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80131d6:	bc08      	pop	{r3}
 80131d8:	469e      	mov	lr, r3
 80131da:	4770      	bx	lr
